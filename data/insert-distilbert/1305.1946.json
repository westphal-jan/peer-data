{"id": "1305.1946", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-May-2013", "title": "Semantic-based Anomalous Pattern Discovery in Moving Object Trajectories", "abstract": "in translating this work, we investigate a novel semantic approach for pattern discovery simulation in trajectories that, relying on ontologies, enhances object movement information with event semantics. the approach can be thoroughly applied to the detection range of movement patterns and behaviors whenever semantic the semantics of events occurring along the trajectory gradient is, explicitly or implicitly, available. in particular, we tested it against an exacting potential case handling scenario in aerial maritime surveillance, i. e., the discovery of suspicious container transportations.", "histories": [["v1", "Wed, 8 May 2013 20:14:03 GMT  (1855kb,D)", "http://arxiv.org/abs/1305.1946v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.IR", "authors": ["elena camossi", "paola villa", "luca mazzola"], "accepted": false, "id": "1305.1946"}, "pdf": {"name": "1305.1946.pdf", "metadata": {"source": "CRF", "title": "Semantic-based Anomalous Pattern Discovery in Moving Object Trajectories", "authors": ["Elena Camossi", "Paola Villa", "Luca Mazzola"], "emails": ["mazzola.luca}@gmail.com", "luca.mazzola@polimi.it"], "sections": [{"heading": null, "text": "The methodology we have developed entails the formalization of the application domain through a domain ontology, extending the Moving Object Ontology (MOO) described in this paper. Afterwards, movement patterns have to be formalized, either as Description Logic (DL) axioms or queries, enabling the retrieval of the trajectories that follow the patterns.\nIn our experimental evaluation, we have considered a real world dataset of 18 Million of container events describing the deed undertaken in a port to accomplish the shipping (e.g., loading on a vessel, export operation). Leveraging events, we have reconstructed almost 300 thousand container trajectories referring to 50 thousand containers travelling along three years. We have formalized the anomalous itinerary patterns as DL axioms, testing different ontology APIs and DL reasoners to retrieve the suspicious transportations.\nOur experiments demonstrate that the approach is feasible and efficient. In particular, the joint use of Pellet and SPARQL-DL enables to detect the trajectories following a given pattern in a reasonable time with big size datasets.\nI. INTRODUCTION Semantic trajectory is a research trend that has recently emerged in Geographical Information Science and Spatiotemporal Knowledge Discovery [1, 26, 57, 58, 73], to enhance the modelling and analysis of moving object data, e.g., GPS trajectories, mobile telephone streams, data collected from sensor networks. In this domain, a moving object is an entity that changes position over time, such as a person that walks or cycles, a car, taxi or bus moving in a city, a vessel navigating by sea, etc.\nIn Semantic Trajectory, the goal is not the mere processing of the geographical trajectory for conventional GIS analysis,\nThis paper relies on the research presented in: P. Villa, E. Camossi, A Description Logic Approach to Discover Suspicious Itineraries from Maritime Container Trajectories, In Proc. of GEOS 2011, LNCS 6631, p. 182-199. Springer-Verlag 2011. This research contributes to European Commission JRC action 41004 Vessel and Container Surveillance.\nbut the understanding of the motion of the moving object with respect to the application of interest. Therefore, the spatio-temporal modelling of object trajectory is enriched with semantic information that characterizes the application context, such as the points of interest, like museums, schools, shops, etc., or the annotation of parts of the trajectory to describe different movement behaviors, e.g., walking, cycling, driving. Semantics enhances the analysis of data and facilitates the discovery of semantically implicit patterns and behaviors [50], useful for abstracting the modelling domain and for inferring new knowledge. In particular, the ontology-driven enrichment of moving object trajectories is a promising approach for the discovery of itinerary patterns [8], which can be applied for example to detect outliers in sequences of movements.\nThe analysis of moving object trajectories is a largely used tool in the field of maritime surveillance and security [16, 20], for fighting commercial frauds [61] and for enforcing the supply chain security to fight smuggling, counterfeiting and drug traffic. Beyond its importance from an economic and citizen security perspective, supply chain monitoring is a challenging application scenario, in particular because the number of containerized shipments to verify is enormous. Indeed, containers are used to ship the 25% of world trade cargo, and even if recent legislation imposes to increase the inspections rate, currently less than 2% of containers can be physically checked without causing expensive delays in the good trade chain. Furthermore, 90% of containers, i.e., 19 millions per year, travel by sea, with an estimated growth to reach 27 million by 2020. This, combined with the complexity of the shipping operations and with the number of subjects involved, makes containerized transport particularly suitable to conceal illegal or hazardous materials.\nIn such a complex domain, effective Risk Analysis tools are essential to help Customs authorities identify effective suspicious transportations. Route-based risk indicators (RRI), for example, target high risk consignments of goods by evaluating the trajectories of cargos, ships and containers. RRIs analyse spatial information such as the ports where a container has been loaded and discharged, the logistic of transshipment operations, and the actual route followed by a container. RRIs support more traditional risk factors, such as the name of the consignee, the carrier, the value of transported goods.\nIn this work, we describe a novel methodology for semantic pattern discovery that relies on ontology and describe the\nar X\niv :1\n30 5.\n19 46\nv1 [\ncs .A\nI] 8\nM ay\n2 01\n3\n2 tests we have run in the maritime surveillance scenario to detect suspicious containerized transportations. The approach we propose relies on a top-level ontology for modelling moving object trajectories, namely the Moving Object Ontology (MOO), that has to be extended to represent the properties of the specific application domain. On top of this formalization, movement patterns of interest may be defined as Description Logic (DL)[6] axioms. The ontology instances that satisfy the axioms represent the trajectories with the modelled movement behaviour.\nIn our test scenario, we have defined a knowledge base for the domain of maritime containers, namely the Maritime Container Ontology (MCO) [62], and modelled anomalous container patterns that describe suspicious movement behaviors. We have run a set of experiments translating the axioms into DLs queries, that can be easily tested with different ontology APIs and reasoners on the populated ontology, retrieving the suspicious shipments that follow the defined patterns.\nFor our tests, we consider two suspicious pattern examples, the proposed formalization can be extended to any number of patterns. The patterns we considered are Loop and Unnecessary Transshipment, and are well known in maritime risk analysis. They formalize irregular behaviors involving not only containers but also different vessels, because usually more than one vessel is used to accomplish a container shipment and containers are moved from one vessel to another during transshipment operations. Such patterns are complex enough to show the potentialities of the semantic approach we propose, and are a step forward with respect to existing approaches proposed in the literature to detect patterns in moving object trajectories [7]. However, despite they apparent complexity, they may be successfully discovered by integrating the knowledge of the locations where the events occur and the event semantics.\nThe methodology we propose can be applied in every context where the event semantics can be explicitly described with respect to STOPs or MOVEs [58]: specifically, STOPs are the places where a moving object stays for a minimum amount of time, while MOVEs are the subtrajectories between consecutive STOPs. In our application scenario, we modelled STOPs and enriched them semantically with information on container and vessel events. These ones describe the deeds undertaken on containers to accomplish shipment operations and arrival and departure operations of vessels in ports.\nThe advantages of the semantic approach we propose in this paper are twofold. First, abstracting the properties of the domain to high-level semantic concepts, it simplifies the reasoning. For instance, every carrier company represents information on events using its own vocabulary but, within the ontology, we can abstract from different vocabularies and reason on generic categories of events that are relevant for the application, such as transshipment events. Moreover, our formalisation relies on DLs, a family of formal knowledge representation languages used to describe and classify concepts and their instances, that combine good expressivity and good computational properties, supporting the practical feasibility of the approach. Indeed, knowledge representation systems based on description logics have been proven useful for structurally\nrepresenting the terminological knowledge of an application domain. Compared with first-order logic, DLs achieve a better trade-off between the computational complexity of reasoning and the expressiveness of the language. DLs are briefly introduced in Section III.\nThe research presented in this paper relies on a previous work [62], where we introduced the MCO design and the application of axioms for anomalous patterns discovery in container itineraries. With respect to [62], in this work: (1) we abstract from the application domain to define a methodology for semantic pattern discovery that can be applied in other domains involving moving object trajectories; (2) we define DL-queries, semantically equivalent to ontology axioms, for the efficient retrieval of trajectories that verify the axioms conditions; (3) we run an extensive experimental evaluation on a real world dataset to test the feasibility of the approach.\nIn our experiments, we have tested different DL reasoners, i.e., Hermit [51], Pellet [56], and FaCT++ [60], and two of the most used API for DL querying: OWL-API [30] and SPARQL-DL API [55], and run the queries implementing the anomalous patterns against four ontologies of increasing size. These have been populated with data taken from a dataset of eighteen million container events, preprocessed to define three hundred thousand container shipments. We have verified that the implementation solution combining SPARQL-DL API and Pellet achieves the maximum query language expressivity with the best performance, enabling to test a suspicious patterns in few minutes.\nIn the following, we use the term container trajectory to refer the spatial trajectory a container follows along a shipment, while with the term itinerary we refer to the same trajectories, semantically annotated with information on the events that occur during the shipment.\nThe rest of the paper is organized as follows. We first provide the background of this research, discussing recent work on Semantic Trajectories in Section II and introducing the basic concepts of DLs in Section III. In Section IV, we present the methodology we propose for the discovery of patterns and behaviors in moving object trajectories, that we apply to the domain of containerized transportation in the next sections: we describe the domain knowledge base for maritime container MCO (Section V) and give the description logic formalisation of suspicious container itineraries (Section VI). Before introducing the experiments we have run in this domain (Section VIII), in Section VII we compare the different tools and API for ontology querying that we have evaluated for our experimental evaluation. Finally, in Section IX we discuss the potential development and the shortcomings of the approach we are proposing, concluding the paper."}, {"heading": "II. SEMANTIC TRAJECTORIES", "text": "Most of the research on Semantic Trajectory has originated by the community grown within the FP6 project GeoPKDD [34], whose original focus was on privacy aware exploitation of spatio-temporal data. To continue the investigation on the discovery of knowledge and exploitation of moving object data, GeoPKDD has been followed first by MODAP [21]\n3 and more recently by SEEK [22]. The same community has recently presented a survey of the research on this area [50]. Among the active initiatives aiming at boosting the research on moving object modelling, analysis and visualization, a notable contribution has originated also by the COST Action MOVE [23].\nAnother recent overview has been presented by Spaccapietra and collaborators [57], the same group that originally proposed the first conceptual model for the representation of semantics in trajectories [58], which has become a reference model for trajectory data analysis (for example, [1, 26, 8, 11] refer to this model). This model relies on the conceptualization of STOPs and MOVEs in trajectories: a STOP is an interesting place in which a moving entity has stopped or reduced significantly its speed for a sufficient amount of time, likely to accomplish some activity; a MOVE is any subset of the object trajectory between consecutive STOPs, and can be classified, for example, with respect to the type of moving (e.g., running, cycling, driving) or by the mean of transportation used to move.\nMost of the research advances on trajectories and semantics may be broadly classified among three research areas: Spatiotemporal Data Modelling for the representation of semantic trajectories; Knowledge Discovery from Data (KDD) for semantic trajectory mining; and Geographic Visualization and Visual Analytics for semantic trajectory visualization. In the rest of the section, we first overview work on semantic trajectories falling in the research areas above; then, we conclude discussing how our approach differs from the existing state of the art."}, {"heading": "A. Representing Semantic Trajectories", "text": "For the representation and modelling of semantic trajectories, we can distinguish two different approaches: a traditional one that includes moving object semantics since the phase of data design, and a-posteriori approach in which trajectories are annotated by analyzing its raw features, such as the speed of the moving object or the intersection of the object trajectory with Places Of Interest (POI) previously extracted from the corresponding geographical layer.\nThe first approach is adopted in [78], where the authors introduce an algebraic model that represents a spatio-temporal trajectory as an Abstract Data Type (ADT) that encapsulates the semantic dimension. A series of trajectory states is potentially observed and measured, and the ADT representation combines a formal definition with manipulation operations, allowing the user to formulate queries on the semantics of the spatio-temporal trajectory data type. Close to this approach we can account also the work of Pfoser et al. [18], that generate synthetic datasets of semantic trajectories.\nThe second approach, which can be also referred to as (semantic) segmentation of trajectories, or episodes identification, is more frequent in the literature. The resulting representation is compliant to the model defined by Spaccapietra et al. [58] whenever interesting places, activities or means of transportation are identified to annotate the STOPs and MOVEs of the trajectory. In particular, STOPs, somewhere called stay points, semantic places or locations, distinguish the different\nepisodes, i.e., the significant segments of a trajectory that identify different phases of the object movement and can be assigned a clear semantics, relevant for the application domain.\nInformation on candidate STOPs is often encoded in the underlying geographical representation. For example, Cao et al. [17] and Guc et al. [26] select STOPs from pre-encoded POIs crossing the moving object trajectory. Alvares et al. [1] apply a similar approach, but selecting the Regions of Interest (ROI) in which the moving object stays for more than a given time, a temporal threshold that can differ for each ROI and is encoded within the ROI representation at a semantic level. Cao et al. [17] give also a ranking of the top-k significant locations for each trajectory. The significance of locations for a user is discussed also by Zheng et al. [76], who adopt a hierarchical approach to detect important places and typical travel sequences from user trajectories.\nOther works infer STOPs evaluating only the raw features of the trajectory, for example, the time the moving object does not move along the trajectory and the distance between these stops [77], the change of speed [49] or direction [53].\nThe two approaches can be combined, validating and correcting the geographical position of the STOPs resulting by the trajectory features processing with contextual information, like in the work by Yan et al. [73, 71]. Moreover, Yan et al. [73, 71] abstract from the requirement of a specific application domain using POI, ROI and Lines of Interest to annotate STOPs, and enabling to annotate also MOVEs, both as activities, such as walking, driving, cycling, and transportation modes, like bus, car, taxi, etc.\nAnnotation of MOVEs is also addressed by Yan et al. [72], who realize online identification of episodes by detecting the alteration of patterns within the trajectory. The trajectory segmentation adopts an existing approach for the discovery of trends that evaluates correlation coefficients, and incorporates also modules for trajectory cleaning and compression. The episode tagging is done at a second stage by a classification model trained on trajectory features collected during the online segmentation, such as distance, duration, density, speed, acceleration, heading.\nAnnotation of MOVEs is also manually assisted by the visual tool developed by Guc et al. [26]. The work of Wannous et al. [69] is a case of MOVEs annotation for animals trajectories, specifically seals\u2019, to distinguish travelling states (e.g., travelling, resting, foraging). They adopt ontologies to integrate the time knowledge to infer the different travelling states, which differentiate on duration and are defined in term of temporal axioms. Zhu et al. [80] segment GPS trajectories of taxis to infer the taxi status, i.e., free, occupied or parked. Wang et al. in [68] apply clustering on whole trajectories to distinguish among different trajectory types (e.g., pedestrian, vehicles) and activities (e.g., walking, cycling). In this case the labelling is done on an entire trajectory. The result of the clustering is used in particular to infer the structure of the scene in which the objects are moving.\nClustering is also used by Cao et al. [17] for the extraction of semantic locations and by Palma et al. [49], who adopt spatio-temporal clustering to classify trajectory with respect to their speed.\n4 Finally, van Hage et al. [29] present an interesting approach for modelling and analysing ship trajectories for early time awareness for Maritime Surveillance and Security, which takes into account the semantics of the trajectories. Taking in input Marine Automatic Identification System (AIS) messages sent by ships, they build trajectories and segment them by detecting the significant events that represent changes in ship behaviour, such as speeding up, anchored, stopped. Reasoning rules for event labelling are specified in SWI-Prolog, and the geographical knowledge relies on the GeoNames1 ontology."}, {"heading": "B. Knowledge Discovery and Exploitation of Semantic Trajectories", "text": "As we have seen, some of the methods described above [68, 17, 49] adopt data mining, clustering in particular, for the semantic annotation of trajectories. However, there are also approaches that exploit semantic trajectory for knowledge discovery, in particular movement patterns. In this area, several works have been published by the communities collaborating within the project GeoPKDD and its followers.\nAlvares et al. [2] and Moreno et al. [43] take semantic trajectory with annotated STOPs and MOVEs and extract moving patterns considering also background geographical information. Bogorny et al. in [13] present Weka-STPM, a data mining toolkit for geographical data that takes trajectories with annotated POIs and performs episode recognitions as pre-processing for analysis and visualization. Bogorny et al. in [11, 12] formalize the idea of semantic trajectory pattern mining to boost data preprocessing and to mine data at a higher abstraction level. They discuss in particular the discovery of frequent and sequential patterns and association rules from trajectories. Relying on the results presented in [1, 49], they preprocess trajectories to annotate STOPs and MOVEs. Then, mining can be applied directly on the annotated dataset.\nYing et al. [74] compute similarity of user trajectories, taking into account trajectory semantics. The same authors in [75] rely on user behaviour in similar clusters to predict the next location in a semantic trajectory.\nBaglioni et al. [7, 8] represent annotated trajectories in an ontology encompassing also geographical and application domain knowledge. Different kinds of STOPs are considered, and temporal knowledge is used to discriminate among them. Afterwards, they use ontology axioms to infer behaviour al patterns.\nSimilarly to [7, 8], Yan et al. [70] use an ontological approach for the representation of semantic trajectory. They define three different ontology modules for representing geometry, geography and the requirements of the application domain and apply their approach to the application case of traffic management. The geometric modules includes a Trajectory Ontology compliant with the model defined by the same authors in [58]. In their approach, the ABox of the ontology, containing the ontology instances, is stored in a database, specifically Oracle extended with Oracle Semantics, which includes the OWLPrime language, a DL subset, for ontology representation, querying and inference.\n1www.geonames.org\nBased on space time ontology and events approach, Boulmakoul et al. [14] propose a generic meta-model for trajectories of moving objects to allow independent applications processing trajectories data benefit from a high level of interoperability, information sharing as well as an efficient answer for a wide range of complex trajectory queries. Their approach is inspired by ontologies, but the resulting system they propose is database-based.\nApart from pure mining and knowledge discovery, there are also approaches that exploit trajectory semantics for different purposes. For example, Richter et al. [52] use geographical knowledge on POIs to compress trajectories while maintaining an acceptable information loss. Monreale et al. [42] discuss the privacy issues of semantic trajectories. Whenever a user trajectory crosses locations that may enable to infer sensitive information on the trajectory user, such as an hospital, a privacy issue arises. To solve such problem, they propose a privacy model for semantic trajectories, and an algorithm to preserve user privacy modifying the trajectory representation: in a safe trajectory, sensitive locations are abstracted along a place taxonomy to mask them, while preserving the trajectory semantics.\nC. Visualization of Semantic Trajectories Visual Analytics, together with Information Visualization, provides the instruments to empower human capacity for distillation and knowledge extraction from very large data repositories. In particular, Visual analytics develops intelligent visualization for data analysis. The research community in this area proposed several tools to improve the visualization of geographical data, bringing to the development of the area of GeoVisualization and Geo Visual Analytics. Not to be neglected is the contribution in stressing the contextual information attached over the trajectories, that allows its refinement and classification [4].\nOne of the main advantages of these visual techniques is the possibility to confirm expected patterns by detecting them, but also to observe the emergence of unexpected ones. This can guide the users towards the revision, either of the collection, extraction, distillation or representation mechanism, or the model updating. Another observed effect is the possibility to improve the effectiveness in decision making process by people: this can result from the availability of filtering, aggregating and drilling down functionalities in the visualisation interface.\nFor the specific task of visualizing the Geo-Spatial data enriched with temporal information \u2013which Semantic Trajectories is a subtype\u2013 a recent review from Andrienko et al. [5] presents some possible techniques, working as a reference framework for choosing the techniques that better fit the specific characteristics of the data to be represented and the objectives of the analysis.\nOther works that address visualization to offer knowledge to the user are present in literature, such as the Weka-STPM tool [13]. Beyond the pre-processing of data to semantically annotate trajectories and mining them, it includes also a visualization interface for the semantic patterns extracted, such as frequent STOPs, MOVEs, and sequential STOPs. Another\n5 approach proposed by Bakshev et al. [9] proposes a framework for trajectory visualisation and querying, where the semantic context of trajectories is modelled as an application domain ontology.\nIn this area, the work of Andrienko and Andrienko is particularly relevant and a reference for the research community. In [3], Andrienko et al. discuss how visualization and the graphical representation of object movement can help understand its meaning, and present a conceptual framework about the possible types of information that can be extracted from movement data. Currently the established visualization techniques for geographical data are animated map and spacetime cube (see, for example, [5]), which enhance understanding taking into account also the temporal dimension of data to support data analysis.\nThe space-time cube is also used by Zhong et al. [79] to design a method for semantic visualisation of trajectories based on the notion of events, that are modelled as ADTs. Each event is characterised by the actor that does it, and by the place and the time it occurs. Moreover, levels of detail (LOD) are associated to each event type.\nFinally, [40] evaluates the importance of contextual information derived by geographical knowledge for visual analytics approaches to enhance the understanding of human behaviour."}, {"heading": "D. Comparison with the proposed approach", "text": "With respect to the current state of the art in Semantic Trajectory, our work has some distinguish characteristics and innovative aspects that we discuss in this section. Referring to the previous classification of the research on this topic, the main contribution of this paper can be accounted to Knowledge Discovery, because we exploit semantically annotated trajectories for the discovery of movement patterns. However, our work addresses also the representation of trajectories and their semantics, therefore we compare it with the research in both areas.\nIn our approach, both trajectories and patterns are represented in an application domain ontology that extends a toplevel ontology for representing moving objects. Differently from work on trajectory segmentation that infers implicit semantics of episodes by processing the raw features of the trajectories or from the contextual knowledge, we adopt a reverse approach: taken spatio-temporal events with explicit semantics, we reconstruct the trajectories that describe the movements from one event to another.\nIn the test case scenario we propose, we start from Container Status Messages that encompass an explicit description of the activities that are undergoing on containers in a port, and from these labelled STOPs we reconstruct the container trajectories. The case of vessels is slightly different: we first aggregate container events to derive the implicit semantics of vessel events, and from them we build vessel trajectories as in the case of containers. However, we take into consideration the underlying geographical knowledge to distinguish among ports and other types of locations, that do not intervene in the patterns we discuss as examples.\nOur approach has in common with [69, 7, 8, 70, 9] the use of ontology for the representation of the domain and expert\nknowledge. The usage of DL axioms for automatic reasoning on moving object data is applied in particular by [69, 7, 8]. Specifically, similarly to Baglioni et al. [7, 8], we focus on the discovery of patterns expressed as ontology axioms and on the retrieval of ontology instances that verify such patterns. However, even if the general approach is the same, with respect to [7, 8], we go a step forward in term of complexity of domain knowledge and axioms. In the application scenario we have considered for testing, the design of the MCO includes multiple moving objects (i.e., containers and vessels), and the ontology axioms formalizing anomalous patterns involve different semantic trajectories for these objects. In particular, usually more than one vessel is used to accomplish a container shipment: in transshipment operations, containers are unloaded from one vessel to another, and continue for another step of the trip. Transshipments can occur several times along a container trajectory. This implies that, to verify if a container trajectory is anomalous, we have to compare it with several vessel trajectories.\nMoreover, differently from [7, 8], we translate axioms into DL queries, and evaluate according different implementation settings, considering combinations of different DL query languages and APIs and reasoning engines. By contrast, Baglioni et al. tested their approach in [8] importing the domain ontology in ORACLE and using OWLPrime to test the axioms. In our case, we considered also this implementation alternative, but we discovered that OWLPrime is too limited to express the complexity of the axiom conditions we have specified for the application case of maritime containers.\nOur work has some similarities with [14]: actually, the authors have elaborated a meta-model to represent moving objects using a mapping ontology for locations; despite this similarity, in extracting information from the instantiated model during the evaluation phase, they seem to rely on a pure SQL-based approach, whether we rely on semantics queries."}, {"heading": "III. DESCRIPTION LOGICS (DL)", "text": "In this section we introduce the main features of DLs [6], that are the foundational basis of our formalization. In DLs, the domain of interest is modeled by means of individuals, concepts, and roles, denoting objects of the domain, unary predicates, and binary predicates respectively. Concepts correspond to classes, which are sets of objects, while roles correspond to relations, i.e., binary relations on objects.\nThe basic syntactic building blocks of DLs are atomic concepts (A), and atomic roles (R). Complex concepts (denoted by C or D) can be built from them inductively according to the syntax in the upper part of Table I. From a semantic point of view, concepts are interpreted as subsets of an abstract domain, while roles are interpreted as binary relations over such a domain. More precisely, an interpretation (\u2206I , \u00b7I) consists of a domain of interpretation \u2206I , and an interpretation function\nA Knowledge Base (KB) comprises two components: the TBox and the ABox. The TBox is a finite set of terminological axioms which make statements about how concepts are related to each other. Generally, they have two forms: C \u2261 D or\nC v D, where C,D are concepts. The first kind is called equalities which states that CI is equivalent to DI , and the second is called inclusions which states that CI is a subset of DI for all I. The ABox is a finite set of individual assertions, which can be of two types: C(a) or r(a, b), where C is a concept, r is a role, a, b are individuals. The first kind is called concept assertions which states that aI \u2208 CI , and the second is called role assertions which states that (aI , bI) \u2208 r for all I.\nThe basic reasoning services in DLs are satisfiability and subsumption. A concept C is satisfiable in a KB K if K admits a model in which the extension of C, i.e., the set of individuals that belong to C, is non empty. By contrast, C subsumes D in K if CI \u2286 DI for every interpretation I of K. Subsumption can be easily reduced to satisfiability as follows: A concept C is subsumed by a concept D in K if and only if C u \u00acD is not satisfiable in K. Upon that it is sufficient to consider concept satisfiability only.\nWe refer to the DL ALC[6] to represent and reason on the domain according to its features. Moreover, we have extended its expressivity to represent the domain of containerised transportation. In particular, nominals and transitive roles are needed in this context. Nominals are necessary to identify the locations involved in a suspicious pattern. Transitive roles are necessary to bind every container event with all the subsequent ones. The addition of these two features does not influence the complexity of the basic reasoning services, which, in presence of an acyclic TBox2, remains PSpace-complete as in ALC [6]. Although the reasoning is of a relatively high complexity, the pathological cases that lead to the worst case complexity rarely occur in practice [6]."}, {"heading": "IV. A METHODOLOGY FOR TRAJECTORY PATTERN DISCOVERY", "text": "In this section we present the methodology we propose for the discovery of patterns and behaviors in moving object trajectories. Specifically, given a dataset of moving object trajectories, we want to retrieve the trajectories that follow a given pattern, i.e., have a certain movement behaviour. Our approach strongly relies on ontology and on the DL formalism: we use ontology for the representation of the moving object application domain, and DL axioms for the specification of the patterns.\n2a TBox is acyclic iff no concept name uses itself.\nIn the following, we define the graphical formalism we use in the paper for describing the ontology design; then, using such formalism, we introduce a top-level ontology for modelling moving object trajectories, namely the Moving Object Ontology (MOO). Afterwards, we discuss how the MOO can be extended to formalize the semantics of a specific application domain, and explain how trajectory patterns can be formally defined to enable instance retrieval. Finally, we describe the implementation workflow we have developed for itinerary pattern discovery."}, {"heading": "A. Ontology diagrams", "text": "In the paper we introduce the ontology design we apply through the support of ontology diagrams describing the concepts and the roles between them, where concept and role have the semantics we have introduced in Section III. An example of ontology diagram is given in Fig. 1, that illustrates the MOO design. We represent concepts as rectangles with rounded corners, while we depict roles as directed arrows. For the sake of clarity, we do not report the concept\u2019s structural properties but describe them in the text whenever necessary. In the text, the ontology names are emphasized (e.g., Moving Object). However, within the discourse entity and concept names are used interchangeably where no ambiguity arises.\nConcept generalizations are depicted as straight lines that go from low-level to top-level concepts, similarly to the ISA relation of object-oriented models. Starred labels (label*) model one to many relationships. Underlined arrow labels represent roles that have been re-defined in sub-concepts; the corresponding domain and co-domain are restricted accordingly by means of ontology axioms."}, {"heading": "B. Moving Object Ontology (MOO)", "text": "The fundamental entities of the MOO abstract the features that are common to different domains focusing on the movement of some kind of object, such as traffic analysis for route planning, pedestrian trajectory analysis, animal movement analysis, detection of shipping corridors for maritime surveillance, etc.\nThe concepts formalising these entities are depicted in Fig. 1, namely, Moving Object (MO), MO Trajectory, Location, Time, and MO Event. MO formalises any class of objects that move, such as cars, persons, airplanes, buses, etc. MO Itinerary models the semantically enriched movement of the\n7\nMO, defined as sequences of MO Events. Events are crucial concepts in our modelling, because we rely on them to leverage the trajectory semantics. Events describe the activities accomplished by the MO, each occurring at a specific Time in a particular Location. For example, a container in a port is loaded on a cargo vessel; a car at a gas station is refuelling.\nEvent semantics can either be explicit, i.e., declared in the data, as we see for the case of containerized transportation, or implicit, but nevertheless inferrable from other contextual information: for example, knowing that a person is in a restaurant at lunch time we can likely infer that this person is eating. Event semantics may also help infer additional information on the object activity: for example, after a container has being loaded on a vessel, we can foresee that it will start soon travelling.\nWe can navigate the events in an itinerary according to the sequence they occur, relying on their timestamps. Navigating the sequence, we can follow the MO along its trajectory and along the activities it has done during the itinerary. Moreover, event sequences are also modelled intensionally in the MOO through the transitive property hasNextEvent, which links each event to the next event in the sequence.\nIn Fig. 1 we have depicted also the roles between concepts. For example, events are connected to MO by the role hasMO; by role hasLocation to Location, which generalizes City, Port, Train Junction, etc; and by role hasTime to Time."}, {"heading": "C. Domain Ontology and Patterns", "text": "To model the entities of the application domain of interest, ontology concepts and roles in the MOO have to be extended. For example, in Fig. 1 we have extended the concept Moving Object to represent Cars, Persons, Airplanes, Buses. In the next section, we see how the MOO has been extended to model the domain of containerized transportation.\nIn our application scenario, we are interested in formalizing movement patterns and in retrieving the trajectories that comply with the behaviour such patterns express. Patterns may be specified directly in the domain ontology as axioms. An axiom defines, using the DL syntax, a new class of objects, whose ontology instances are those verifying the axiom conditions.\nTherefore, to retrieve the trajectory instances that verify the patterns, it is sufficient to check the pattern axioms against the ontology.\nAs an alternative, axioms can be transformed into explicit DL queries, which can be used to query the ontology instances. This solution enlarges the implementation possibilities because different languages and APIs are available to express them. Currently, the most used ones are OWL-API [30] and SPARQL-DL [55], that we have tested in the experimental evaluation in Section VIII."}, {"heading": "D. Pattern Discovery Workflow", "text": "The complete workflow for pattern discovery is illustrated in Fig. 2. Once the MOO is extended at step (1) to model the application domain and (2) the movement patterns have been defined as described above, we can proceed with the development of the pattern discovery tool. At step (3), data have to be selected, to extract the event sequences, and the event semantics must be made explicit, annotating the moving object trajectories."}, {"heading": "V. MARITIME CONTAINER ONTOLOGY", "text": "In [62], we proposed the Maritime Container Ontology (MCO) to represent the domain of the maritime containers. In the remaining of the section, we describe the MCO design, that extends the MOO formalised above to define containers, container and vessel itineraries, leveraging on the semantics of events. Herein we do not report the detailed design of shipments and shipment phases, that goes beyond the scope of the paper. We refer the interested reader to [62] for the details.\nIn the ontology diagrams in the section, we use the following convention for role inheritance: roles in italic are inherited by the MOO as they are, while roles whose name is underlined are inherited roles that have been specialized to refer to specific sub-concepts."}, {"heading": "A. Containers and Shipments", "text": "In the MCO every container is modelled by an instance of the concept Container, which extends Moving Object in the\n8\nMOO (see Fig. 1). Each container has a unique identifier, that maps an ISO 6346 [33] identification code, i.e., the BIC code 3. Every container belongs to a Carrier, i.e., a shipping or a leasing company, which leases the container to a carrier, to whom it is connected by the role belongsTo (see Fig. 3).\nEach Shipment is handled by a Carrier to deliver a set of Goods and encompasses the dates when the order has been placed, shipped and delivered to a Consignee. A shipment is made by at least one Container Shipment; each Container Shipment refers to a single container and has one Container Itinerary."}, {"heading": "B. Container Itineraries and Events", "text": "A Container Itinerary is defined by all the events occurring to a container to accomplish a shipment. These encompass the transport, which is mainly performed by sea, but also the operations to prepare and conclude the shipment. Therefore, a container itinerary goes beyond the mere trajectory of the container, and represents the complete history of the shipment performed using the container.\nA Container Event describes any deed undertaken on a container, such as Loaded to vessel, Discharged at port. Container Event extends MO Event in the MOO and refers to the Time it occurs (e.g., 26th of November 2020) and the Location where this event took place. This can be either a port in intra-customs transport, or a train station or a city in inland transportation.\n3BIC codes are assigned by the Bureau International des Containers et du Transport Intermodal (BIC).\nEach container event refers also to other information dimensions, including the container Loading Status (i.e., empty, full) and, for events referring to transportation, to a Mean of Transport, in particular Vessels for Maritime Container Events which are the events occurring during the maritime transportation.\nThere is no standard for event descriptions, and each carrier adopts a different one. Within the project an effort towards standardization of container events has been promoted, and the outcome has been formalized in the MCO: in Fig. 4 we report eighteen events, classified among four classes of toplevel events: Trip Start, Maritime/Transshipment Event, Trip End, and Other. Each event, as specified by the carrier, is mapped to an instance of one of the concepts specified in the figure. This mapping simplifies the representation of the application domain, and enables to abstract from the contextual knowledge of the carrier vocabulary when defining the axioms for anomalous patterns, as we will see in Section VI.\nTop-level events characterize the different phases of a shipment. In Fig 3, only Maritime/Transshipment Events are shown to focus on the main events occurring during the maritime part of a container itinerary, that is loading to and discharging from vessels during the maritime transportation. For such events, the Vessel the container has been loaded to or from which it has been discharged is also reported (roles hasDischargingVessel and hasLoadingVessel). In case a transshipment occurs in an intermediate port, the vessels involved are always two and the two roles are filled in accordingly. We can see in Section VI that transshipments from one vessel to another play an important role in defining suspicious patterns.\n9\nOther events, such as Released to Shipper for Cargo Stuffing and Empty Returned, do not describe any container movement, but deeds occurring to prepare the container for the shipping at the source port or to complete it at the port of destination. They may be helpful to confirm the presence of a container in a port at the begin and at the end of a shipment, as well as to define the temporal period spent by the container in a port, helping characterise the itinerary with better accuracy.\nC. Vessels Events and Itineraries In the MCO, we focus in particular on cargo vessels, because most of the import-export of goods is performed by sea. Vessels in the ontology are uniquely identified through their name and, when available, the International Maritime Organization (IMO) number.\nWe focus on Arrival and Departure events (see 5), that occur in Ports and are sufficient to define the vessel movement. A Vessel Itinerary, as above, models extensively a sequence of events, which is also defined intensively through the transitive\nrelationships hasNextEvent inherited by Moving Object Event. As before, instances of Vessel Event model the STOPs of a Vessel Itinerary [12, 58]. In particular, as described above, a Transshipment of a container involves two different vessels."}, {"heading": "VI. SUSPICIOUS PATTERNS", "text": "On top of the semantic model formalising the domain knowledge, we developed the axioms for the discovery of anomalous patterns. In particular, here we present two suspicious patterns: namely, Loop and Unnecessary Transshipment. Such patterns have been defined in a collaboration with experts of Custom\u2019s Risk Intelligent Department, and are patterns that potentially suggest some fraud activity has occurred, because they carry out unnecessary operations that entail extra costs or delays for the shipper.\nThese patterns are defined in the MCO as DL axioms. Each axiom combines ontology concepts with logical operators, defining implicitly the class of objects describing the container itineraries following the corresponding suspicious pattern.\n10\nBoth the axioms crosscheck container and vessel itineraries: this is because cargo vessels transport thousand of containers during their trips, and usually pass through more than one port for each voyage. For logistic reasons, when a vessel arrives in a port, some containers are transshipped to reach the next port in their itinerary; at the same time, other containers are loaded to the vessel, that will continue its trip. A container may be transshipped several times before reaching its destination, therefore, vessels routes do not coincide with maritime container itineraries, but partially overlap with them. To discover anomalies, we have to crosscheck container itineraries with vessel trips, in order to discover the real trajectory followed by a container.\nSuspicious pattern go beyond the simple patterns presented in similar approaches [7], in particular because they involve multiple itineraries and events classes, i.e., each axiom evaluates a container itinerary and the itineraries of the vessels used for its shipment. This is necessary because the container itinerary is not completely specified by its own, but to fully understand it we have to take into account loading and discharging operations and intersecting the container trajectory with those of the vessels used for its transportation. Moreover, the semantics of the container STOPs [58] is not inferred from the place classification, but is derived from event descriptions."}, {"heading": "A. Loop", "text": "The pattern Loop is graphically depicted in Fig. 6. A container is loaded on V essel1 in port P1 at time t1, with destination Px. At time t3 V essel1 reaches the intermediate port P3, where the container is transshipped on V essel2. Afterwards, V essel1 continues its itinerary, while V essel2 comes back to port P1 before reaching Px.\nGiven the formalisation represented in Fig. 3 and Fig. 5, the axiom that formalises pattern Loop defines the class of container itineraries that involve a transshipment on a vessel that comes back to port P1 before reaching port PX , as depicted in Fig. 6. The corresponding DL specification is as follows: DL-Axiom. (axiom Loop)\nLoopP1_P2 \u2261 MaritimeContainerItinerary u\u2203hasCISourcePort.{P1} u \u2203hasCIDestinationPort.{PX} u \u2203hasContainerEvent.(Transshipment_Event u \u2203hasLoadingVesselEvent.(\u2203hasNextEvent .(\u2203hasVPort.{P1} u \u2203hasNextEvent.\u2203hasVPort.{PX}))))\n2\nThe core of the axiom is the concept Transhippment Event, which allows to abstract from the specific definitions of transhippment to avoid depending on different ways to describe the same events, combined with the role hasLoadingVesselEvent (see Fig. 5), which links the container itinerary to the route of any vessel used for its transportation. The axiom Loop matches all the itineraries in which a loading vessel comes back to the port of origin of a container before reaching the shipment destination.\nNote that it matches all cycle patterns, disregarding the number or transshipments done during the itinerary of the container. However, to be sure of pruning false positive cases, we have to take into account two dates; the first one is the container arrival, and the second one is the arrive of the vessel that performs the loop: if they are in the same day, or in very close days, we can be sure that the itinerary is suspicious; if they differ of months, of even years, then we can be in presence of a gap in the container or vessel event sequence.\nP1 and PX are two nominal concepts that indicate two different ports. To process all the ports in a dataset, the implementation described in Section VIII process the axiom iteratively on all possible pairs of locations.\n11\nWe also propose a slightly different specification of the axiom to describe the event that P1 is not the starting port for a container itinerary, but is one of the intermediate ports that the container reaches before arriving to the final destination. In this case, we have to test the axiom considering for P1 all possible values that come before PX in the trip. The corresponding DL specification is as follows: DL-Axiom. (axiom Loop - intermediate ports)\nLoopP1_P2 \u2261 MaritimeContainerItinerary u\u2203hasCIEvent.(\u2203hasLocation.{P1}) u \u2203hasCIDestinationPort.{PX} u \u2203hasContainerEvent.(Transshipment_Event u \u2203hasLoadingVesselEvent.(\u2203hasNextEvent .(\u2203hasVPort.{P1} u \u2203hasNextEvent.\u2203hasVPort.{PX}))))\n2"}, {"heading": "B. Unnecessary Transshipment", "text": "Pattern Unnecessary Transshipment is in Fig. 7, where a container, loaded at time t1 on V essel1 in port P1, is transshipped on V essel2 in an intermediate port P3 at time t3, and afterwards, both V essel1 and V essel2 arrive at port P4, which is the container destination, therefore the transhippment was not necessary. Such a manipulation in the container itineraries is often put in place to conceal the real origin of a shipment, to take advantage of convenient duties agreement between the countries involved: Indeed, thanks to such unnecessary transshipment, a fraudulent shipper can easily manipulate the container documents pretending that the shipment originated from the starting port of V essel2, i.e., port P2, instead of P1.\nGiven the formalisation represented in Fig. 3 and Fig. 5, the DL axiom formalizing pattern Unnecessary Transshipment is as follows: DL-Axiom. (axiom Unnecessary Transshipment)\nUnnecess_TransP \u2261 MaritimeContainerItinerary u \u2203hasCIDestinationPort.{P} u \u2203hasContainerEvent.(Transshipment_Event u \u2203hasDischargingVesselEvent.(\u2203hasNextEvent .(\u2203hasVPort.{P}))))\n2\nAlso in this example, the main parts of this axiom are represented by the concept Transhippment Event and by the connection between the container and the vessel events: in this case, this connection is represented by the role hasDischargingVesselEvent, that allows to pass from the description of the container itinerary to the one that brought it to the transshipment port.\nWe have to point out that the instances matching this axiom have to be further elaborated, because it matches all the ships that pass from the container destination, i.e., port P in the example, after the transshipment. As a simple strategy to prune the suspicious itineraries, one can evaluate the date of arrival of the first vessel to the container destination: if the date is in the same day, or in very close days, to the one of the container arrival, the transshipment was not necessary and the container itinerary can be labeled as anomalous."}, {"heading": "VII. ONTOLOGY QUERYING TOOLS: A SURVEY", "text": "In this section we review the tools and technologies available to query our ontology. As we discussed above, we can retrieve the trajectories that follow the patterns we are interested in by checking the DL axioms that formalize such patterns against the ontology, because axiom checking implicitly creates the classes encompassing the trajectory instances that verify the patterns. Different DL reasoners can be applied to check the axioms, the most common ones being Pellet [56], FaCT++ [60], Hermit [51] and RacerPro [27].\nAs an alternative, we can retrieve the trajectory instances by querying the ontology through an ontology Query Language (QL). This solution augments the expressivity at our disposal for pattern specification, and enables us to test alternative QLs and different QL implementations, possibly benefiting from improved performance.\nTable II gives an overview of the existing ontology QLs. They can be broadly classified into three categories: RDFbased, applying subgraph matching of RDF triples against the ontology graph but lacking DL reasoning capabilities; DLbased, supporting directly the DL semantics, usually in the form of atomic DL expressions; and mixed approaches that combine DL expressivity with DL query conjunction.\nThe most used RDF-QLs is SPARQL, the W3C recommendation for querying triples in RDF graphs through subgraph matching. DL-based languages enable to express TBox, RBox and ABox queries that can be run directly against OWL files. For some QL, such as nRQL [28], the Racer DL-QL, a limited possibility for query conjunction is also supported. Other DL-based approaches augment the QL expressivity providing graphical instruments to specify a query, like ONTOVQL [24],\n12\nor integrate the support for rules (i.e., Horn clauses), like SQWRL [47], which takes rule antecedents as query specifications. Finally, the OWLink protocol [41], which overcomes the ASK DIG interface [10] to interact with OWL 2.0 ontologies, is a reference interface for DL reasoning and querying.\nA big step forward towards improving the language expressivity, while preserving decidability and performance, is given by recent proposals combining the two approaches above, specifically extending the SPARQL simple entailment based on subgraph matching with with DL reasoning, in particular OWL semantics. The widest proposal is a recent W3C Candidate Recommendation: SPARQL 1.1 [67]. It encompasses entailment regimes [66] for RDF, RDFS, RIF Core, D-entailment, OWL Direct and RDF-Based Semantics entailment. The SPARQL 1.1 specification relies on the work of different communities, including the ones working on SPARQL-OWL [37] and SPARQL-DL [55]. SPARQL-OWL, in particular, has been implemented extending the engine of the Hermit reasoner (a benchmark is provided, but the source code is not available). By contrast, a fully functional API for SPARQL-DL [55] is available. It extends the Pellet [56] query engine, and is currently a very competitive solution for ontology querying, as we discuss in the experimental evaluation section. The SPARQL-DL API [55] and other tools that either support ontology QL or generically enable to query an ontology, are reported in Table III.\nAmong the tools listed in the table, JENA [54] and KAON2 [44] are mainly designed for RDF knowledge bases: even if they can handle OWL ontologies, reasoning is performed as subgraph matching in JENA, while KAON2 implements the DIG ASK interface, limited to OWL-Lite for DL reasoning, but partially extended towards SWRL and FLOGIC. KAON2 OWL TOOLS partially supports SPARQL-DL, but apparently this project is not maintained anymore.\nAmong the tools specifically designed for OWL ontologies, the OWLink API [41], the API for the OWLink protocol is the evolution of the DIG interface for OWL 2.0. The Prote\u0301ge\u0301-OWL API [59] is an API designed for plugin development, while and SQWRL-API [37] and OWL2Query [38] are Prote\u0301ge\u0301 plugins for ontology querying, integrating SWRL rules and\nSPARQL-DLNOT , which is SPARQL-DL with negation as failure, respectively.\nNEON [19], RacerPro APIs and SQWRL-API adopt query languages specifically designed for the tools, respectively SAIQL, nRQL and SQWRL. Of these, the RacerPro API is the most used. However, the supported QL nRQL, as we mentioned above, enables only ABox conjunctive queries; moreover, only the 32bit version of the reasoner is available and the free license for research has some limitation.\nThe OWL-API [30] is an open source API written in Java that is considered as a reference interface for ontology manipulation. It is widely used and is implemented by several DL reasoners, including FaCT++, Hermit, Pellet, CEL (which are referred to in the table as OWL-API v.3 compliant reasoners), and RacerPro. It supports directly entailment checking for answering DL atomic queries, but it does not enable to answer conjunctive or SPARQL based queries.\nBy contrast, as mentioned above, this functionalities are supported by the SPARQL-DL API [55], that extends the OWL API to enable conjunctive DL query answering. Moreover, through OWL API, querying can be realized using any OWL API compliant reasoner.\nRecently, also mainstream database vendors propose products that combine the ability of databases to handle big amounts of data with the reasoning capabilities offered by ontology. In its latest version 11g, ORACLE Database includes a module for Semantic Technologies, that supports RDF and OWL files, with three different vocabularies: RDFS++, which is an extension of RDFS; OWLIFS, OWL with the support of the IF semantics; and OWLPrime, which is a OWL subset that does not support cardinality property restriction, set operators (union,intersection) and enumeration. OWLPrime is by far the language that provide the maximum expressivity among those offered by this product, and OWLPrime expressions can be integrated in SPARQL-like queries that can be specified directly against the database. Unfortunately, the lack of set expressions does not allow to specify DL axioms with conjunction or disjunction of atomic expression, limiting the application of this type of products.\n13"}, {"heading": "VIII. EXPERIMENTAL EVALUATION", "text": "The experimental evaluation has been organized in three steps, as depicted in Fig. 8. At step (1), we first select the data to process. We have chosen a sample dataset from the data collected by JRC as part of its container monitoring activity. The dataset includes 18 millions of Container Status Messages (CSM). A CSM is a semi-structured text that describes a shipping deed undertaken by carrier companies on a container. Each CSM includes the position of the container, the operation carried out on it (that we formalize in the MCO as a container event), its loading status and the vessel used for its transportation. The initial dataset included CSM referring to 50 thousand containers travelling worldwide for three years, from 2009 to 2012.\nDuring the pre-processing phase in step (1), we segment CSM sequences to extract container itineraries, identifying container shipments and vessel trips. As a result of the segmentation phase, more than 290 thousand container itineraries and more than 43 thousands vessel trips have been identified. Since usually more than one vessel is used for accomplishing a container shipment, and every vessel transports in a single trips thousands of containers, we need to map every part of a container itinerary with the corresponding vessel trips. This concludes the pre-processing phase.\nWe populate the MCO at step (2) with the itineraries and the related information. The MCO has been implemented in OWL-\nDL, the description logic sublanguage of the Web Ontology Language OWL [63], according to the design described in Section V. OWL is widely used for ontology definition, therefore a lot of tools and libraries are available for ontology editing, population and visualization and querying (cf. Section VII). Moreover, it includes semantic features to enhance reasoning, in particular ontology axioms, that we use to express suspicious itinerary patterns. Among the available tools, we chose the Jena Java API [54] for populating the ontology.\nTo have a more meaningful evaluation of the approach, in particular in terms of performance scalability, we run different tests using four ontologies of different sizes, randomly created starting from the initial dataset, that contain, respectively: 100589, 153816, 207356 and 260637 individuals. To have an insight on the complexity of the ontology, we can consider the number of other types of individuals, namely container and vessel itineraries, containers, vessels, and ports, as summarized in Table IV. Notice for instance that, while the number of containers increases more or less proportionally to the number of container itineraries, which is our reference dimension for the experimental evaluation, the increase in the number of vessels remains limited. This phenomenon is more evident when considering the ports traversed by the itineraries. The fact that the number of ports remains bounded is an advantage for our application, because in the evaluation of the axioms, we have to scan iteratively all the ports the containers passed through,\n14\ntherefore the number of ports in the dataset can become very easily a bottleneck for the application. By contrast, if the axiom has acceptable performance with a limited number of container itineraries, we can expect reasonable processing time even with a bigger number of shipments, because the number of ports does not increase proportionally.\nWe expect this consideration applies as well in other application domains, for example the locations crossed by itineraries do not increase proportionally when considering a bigger dataset of trajectories.\nAt step (3), we query the MCO against a set of DL-queries that implement the anomalous itinerary axioms we formalized in Section VI. We tested different ontology APIs, languages and reasoners: the OWL-API [30] and SPARQL-DL [55] DLquery languages, combined with Pellet [56], Hermit [51], FaCT++[60]."}, {"heading": "A. Data selection and pre-processing", "text": "For each container in the CSM dataset, we extracted the corresponding event sequence, which details the shipment history of a single container. An example of container sequence is reported in Table V. Each line in the table represents a CSM, which is composed by: a CSM identifier; an ISO 6346 container identifier4; the date when the event occurred; textual description; the place, usually a port, where it took place; the loading status of the container (empty or full); depending on the event type, a vessel identifier.\nEach container sequence is then processed to extract the container and vessel itineraries, as described next.\n1) Reconstructing Container Itineraries: The itinerary segmentation is implemented in Java, and leverages the semantics of container events, as defined in the ontology excerpt reported in Fig. 4. The class diagram of the API is reported in Fig. 9. Specifically, we segment every container event sequence among different shipments.\nIdeally, an itinerary is composed by the following phases, corresponding to the five main categories of events described in Section V-A: - Begin of Trip; - Container Export; - an optional sequence of Container Transshipments; - Container Import; - End of Trip. Given for instance the sequence in Table V, it includes two itineraries for container ABCD1234567: the first starting at Shangai in China on the 27th of May and ending at Antwerpen in Belgium on the 16th of July; and the second, which is partial, starting at Antwerpen the 20th of August. Note that we can have gaps in the event sequence, therefore the segmentation algorithm can produce partial itineraries, or merge different itineraries in a single one. To partially overcome this issue, the algorithm takes into account also events that do not describe a container movement but are deeds occurring to prepare the\n4In ISO 6346 identifier ABCU1234567, ABC identifies a carrier company, D is a container category; 123456 is a serial identification number and 7 is a check digit.\ncontainer for the shipping at the source port or to complete it at the port of destination (e.g., released to shipper for cargo stuffing, empty returned). These events, complemented with the loading status of the container, help put a container in a specific port at the begin and at the end of a shipment, and define more precisely the temporal period a container spends in a port.\n2) Reconstructing Vessel Trips: Vessel itineraries are extracted from the same dataset of container sequences we processed above. Indeed, vessel routes are implicitly defined by CSMs that can include also the names of the vessels used for the container transportation. Typically, a vessel transports many containers in a single trip between two ports, hence its movements can be inferred by considering CSM of different containers. In this case, we are likely to overcome the issue of incomplete container sequences.\nFor each vessel in the dataset, we aggregate container events with respect to their occurrence in each port at a specific time, obtaining the temporal interval during which the vessel stopped in each port. Ordering such interval-based vessel events, we obtain a sequence of events for the vessel, with the events dates and locations, from which we infer the event description, i.e., departure or arrival. Vessel itineraries are extracted from vessel sequence, considering them made by pairs of departure and arrival vessel events.\n3) Binding Itineraries to Trips: Once container and vessel itineraries have been reconstructed, we proceed to link them relying on transshipment events. Transshipments play a fundamental role in both the anomalous axioms described\n15\nin Section VI, therefore, in order to detect the corresponding anomalous patterns, we need to set correctly the roles involved in the transhippment specification. These ones are not explicit in the dataset, but should be set explicitly in the ontology. Therefore, we connect every discharging container event with the arrival event of the corresponding vessel that occurs immediately before its discharge; similarly, every loading container event with the vessel departure that happens immediately after its loading. The results of this procedure, which has been implemented in ORACLE PL/SQL, are stored back in the database."}, {"heading": "B. Ontology population", "text": "We use the Jena [54] framework to obtain four populated ontology files, described in Table IV, that has to be queried to detect anomalous itineraries. To reach this goal, we implemented an ad-hoc Java package, whose design is illustrated in Fig. 10, and whose main classes describe the domain knowledge base for the MCO. For sake of simplicity, we show in Fig. 10 only the attributes of these classes. The population of the ontology is fulfilled by the class Population.java\n(see Fig.10) which, relying on Jena, builds the corresponding objects to insert them into the the ontology source file."}, {"heading": "C. Detecting anomalous itineraries", "text": "We have started to test the axioms by considering the Java OWL-API [30] interface. Among the compatible reasoners, we have tested FaCT++, HermiT, and Pellet. RacerPro has platform limitations and its free license for research has limitations. After having collected their performance in terms of time used to get the positive cases, we have searched for other tools in order to get better results. We have taken into account the SPARQL-DL[55] engine in Pellet, and the SPARQL-DL implementation by Derivo.\nAll the tests have been done using a PC with a 64 bits processor: Intel(R) Xeon(R) CPU E5620, equipped with 133MHz of clock, reserving 5 Gb of RAM to the process.\nIn the following, for each suspicious pattern we show the steps we have followed in our experimentation, and the performance of our tests.\n1) Detecting Unnecessary Transshipments: In Table VI and in Fig. 11, we show the most performant results of the experimental phase with the Unnecessary Transshipment axiom. We have started our experimentation relying on OWL-API,\n16\nand we have exploited it by developing a Java package called itineraries.query, that is based on Matthew Horridge\u2019s example code in [30].\nIn the core class of this package, we extract from the database all the ports where the containers passed through, and we test the axiom of Section VI against every port. To reach this goal, the axiom has been rewritten into Manchester syntax for OWL [31]. We have tested three reasoners: HermiT, Pellet and FaCT++. We have found that FaCT++ is by far the reasoner that performs better with OWL-API. On the other hand, we stopped testing Hermit after having realized that, in the case with the smallest dataset, its computation took more than twice as long as the one with Pellet.\nHowever, the main problems with the OWL-API pure approach are the slowness of the computation, and the necessity of another mechanism in order to clean the itineraries found by selecting those that have compatible arrival dates (see Section VI for details). Actually, OWL-API does not allow us to extract this information.\nAs an alternative, we considered SPARQL-DL [55]: it is an expressive language for querying OWL-DL ontologies, and allows us to extract the dates that are necessary to get the real suspicious itineraries. Moreover, Pellet is equipped with an engine that can speed up the performance with this tool. In Table VI and in Fig. 11, we can see that the results with Pellet and SPARQL-DL are better performing than the pure OWLAPI approach. After this test, we have decided to test a generic implementation of SPARQL-DL, and we have considered the one by Derivo. Since their SPARQL-DL query engine is settled on top of the OWL-API, we have tried to combine its use with the more performant reasoner with OWL-API, that is FaCT++ according to our tests. Unfortunately, in this test the performance has been very bad and we have stopped it when we have realized that it would not have terminated the execution in a reasonable time. The code of the experiment can be seen in the appendix.\nBy looking at the experiments results, we can see that the combination of SPARQL-DL and Pellet is by far the best one in terms of time: for example, if we consider the case of 10000 itineraries, we have an improvement of more than 99% of time with respect to the OWL-API and Pellet approach. If we take into account the other cases, we have improvements of the same order of size. Moreover, we have to observe that SPARQL-DL enables to compare dates, hence its use eliminates the need of a post-processing phase for eliminating false positive cases. Hence, it seems the most appropriate to analyse itineraries of this kind.\n2) Detecting Loops:\n[2] WITH DATE FILTER;\n[3] WITH DATE FILTER AND INTERMEDIATE PORTS.\nIn Table VII and in and in Fig. 12, we have the fastest performance of the experimental phase with the Loop axiom. We obtained an acceptable performance with OWL-API only when combined with Pellet: actually, in the other cases (involving HermiT and FaCT++) we were obliged to stop the tests because of the slowness of their computation.\nWe have also tested the SPARQL-DL version of the axiom, (Pellet & SPARQL-DL(1) in the Figure), and we have found an improvement in performance.\nHowever, exploiting the ability offered by SPARQL-DL to compare dates, we were able to test another formalisation of the query: in this version, it considers containers loaded on a ship that goes back to its port of start and, after this fact, it is discharged. This formalization improves by far the performance (Pellet & SPARQL-DL(2) in Fig. 12) to be compared with the previous versions.\nBy exploiting the same ability, we have implemented also the other version of the query, that matches the itineraries when a container goes back to an intermediate port before reaching its final destination. The performance of this experiment is labelled by Pellet & SPARQL-DL(3) in Table VII and in Fig. 12. The code of the experiment can be seen in the appendix.\nBy looking at the experiments results, we can see that also in this case that the joint use of SPARQL-DL and Pellet is by far the best one in terms of time: for example, if we consider the case of 10000 itineraries, the performance of Pellet & SPARQL-DL(1) improves of almost 80% the time with respect to the OWL-API and Pellet approach. Moreover, the possibility to compare dates enables us to rewrite the query in a different way: this can cause a further improvement of the performances,\n17\nand this is what happens with the Pellet & SPARQL-DL(2) query version. This improvement of the performance has given us the reason to implement and test the Pellet & SPARQLDL(3) query version. From these tests, we can deduce that the combination of SPARQL-DL and Pellet seems one of the most indicates to implement our methodology.\nWe remark that, while in the Unnecessary Transshipment experiment Fact++ seemed to be the most promising reasoner to be used with the OWL-API, in this case Pellet has obtained better performance. Relying only on the OWL-API, it would be very difficult to choose the best reasoner for the application. However, the solution that combines Pellet and SPARQL-DL is efficient in both cases."}, {"heading": "IX. DISCUSSION AND CONCLUSIONS", "text": "In this paper, we have shown a semantic approach for pattern discovery in trajectories that, relying on ontologies, enhances moving object information with event semantics. Our methodology includes a top-level ontology for modelling moving object trajectories, that can be extended to formalize the semantics of a specific application domain. The domain ontology can be queried to search for trajectories following given patterns. These can be formalized as ontology axioms, or specified as DL queries using some ontology query languages. We have validated our approach in a real world scenario, evaluating different implementation solutions.\nThe main asset of this approach is the possibility to define concepts and properties by exploiting the ontology expressivity and its capability of abstracting the entities of the application domain. In particular, axioms formalizing patterns may be expressed in terms of high-level semantic concepts, abstracting from the specific modelling adopted to represent the domain. This is a remarkable feature in heterogeneous domains like the one we considered for testing, because it enabled us to refer to the standard events classes defined in the ontology instead of referring the specific events defined by carrier companies using their own vocabulary.\nMoreover, this approach enables to use a DL reasoner for building an automatic system for the characterization of different itineraries in terms of the user\u2019s needs. The approach is robust because the decidability of axiom evaluation is guaranteed by the robusteness of the DL formalism.\nIt is worth mentioning that, for application domains requiring more complex formalization, we can further improve the representation language expressivity using formalisations such as OWL and SWRL[32], to enable the use of variables and express equality comparison between instances. However, this entails weakening the decidability constraint.\nThe use of an ontology to describe the behaviour of movement has also some drawbacks. In particular, scalability with a large datasets is an open issue. In the case of maritime surveillance and security, the search of suspicious patterns may involve the analysis of several thousands of records, therefore we have to take into consideration scalability when chosing the approach to apply.\nAs we have discussed in Section VII, recently, reasoning engines specifically designed to handle big knowledge bases\nhave been presented[48]. However, even if this products are a potential solution to the scalability issue, currently these technologies are not mature enough, because their expressivity is very limited, and lack of fundamental DL operations (e.g., OWLPrime does not provide union and intersection [48], which are necessary for axiom evaluation).\nAnother way to face up with the scalability issue might be the development of pre-processing procedures to reduce the size of the dataset, providing the DL reasoner with a smaller knowledge base input. The same approach has been adopted in [12], where an input dataset of touristic trajectories is first pre-processed with a set of data mining procedures to discover a bunch of data-mining patterns; only after this step, such patterns are loaded in the knowledge base to reason on them.\nHowever, in the test scenario we have considered, we showed that the combined use of Pellet and SPARQL-DL API is efficient even when considering datasets with thousands of itineraries and instances, and we can obtain even better performance when applying some a priori filtering directly in the DL query specification.\nWe remark that at the moment our approach is related only to complete itineraries: a possible extension of this work will be to integrate data mining technologies for managing incomplete itineraries. Moreover, since a peculiarity of such technologies is to discover implicit semantics, we can rely on them to manage unexpected patterns.\nAs for the future work, we plan to investigate the employment of OWL and SWRL formalism in order to increase the expressiveness of our approach. Moreover, we plan to study the development of pre-processing procedures to reduce the size of the initial dataset. We are currently developing a preprocessing module to address container itineraries that includes also non explicit events, such as the container passing in a port without being handled. These can be retrieved by reasoning vessel events, defined relying on other containers that travel on the same vessel."}, {"heading": "APPENDIX A", "text": "Querying Unnecessary Transshipment:\nDL-Query. Unnecessary Transshipmentin OWL-API Maritime_Container_Itinerary and hasCDestionationPort value P and hasContainerEvent some (Transhipment_Event and hasDischargingVesselEvent some (hasNextVesselEvent some (Event and hasVPort value P))) 2\nDL-Query. Unnecessary Transshipmentin SPARQL-DL SELECT DISTINCT ?c ?endCI ?vesStop WHERE { ?c a st:Container_itinerary . ?c st:hasEndTime ?cd . ?c st:hasCIDestinationPort st:port . ?c st:hasContainerEvent ?t . ?t rdf:type ?eventClass . ?eventClass rdfs:subClassOf st:Transshipment_Event . ?t st:hasDischargingVesselEvent ?v . ?v st:hasNextVesselEvent ?v1 . ?v1 st:hasLocation st:port . ?v1 st:hasTimestamp ?vd . BIND( fn:substring(?cd,5,10) AS ?endCI ) . BIND( fn:substring(?vd,5,10) AS ?vesStop ) . FILTER (xsd:date(?vesStop) > xsd:date(?endCI)) . } 2\nQuerying Loop: DL-Query. Loopin OWL-API Maritime_Container_Itinerary and hasCSourcePort value P1 and hasCDestinationPort value P2 and hasContainerEvent some (Transhipment_Event and hasLoadingVesselEvent some (hasNextVesselEvent some (Event and hasVPort value P1 and hasNextVesselEvent some (Event and hasVPort value P2)))) 2\nDL-Query. Loopin SPARQL-DL SELECT DISTINCT ?c ?cd ?vd WHERE { ?c a st:Container_itinerary . ?c st:hasEndTime ?cd . ?c st:hasCISourcePort st:port1 . ?c st:hasCIDestinationPort st:port2 . ?c st:hasContainerEvent ?t . ?t rdf:type ?eventClass . ?eventClass rdfs:subClassOf st:Transshipment_Event . ?t st:hasLoadingVesselEvent ?v . ?v st:hasNextVesselEvent ?v1 . ?v1 st:hasLocation st:port1 . ?v1 st:hasNextVesselEvent ?v2 . ?v2 st:hasLocation st:port2 . ?v2 st:hasTimestamp ?vd . } 2\nDL-Query. Loopin SPARQL-DL (alternative formalization) SELECT DISTINCT ?c ?endCI ?vesStop WHERE { ?c a st:Container_itinerary . ?c st:hasEndTime ?cd . ?c st:hasCISourcePort st:port . ?c st:hasContainerEvent ?t . ?t rdf:type ?eventClass . ?eventClass rdfs:subClassOf st:Transshipment_Event .\n20\n?t st:hasLoadingVesselEvent ?v . ?v st:hasNextVesselEvent ?v1 . ?v1 st:hasLocation st:port . ?v1 st:hasTimestamp ?vd . ?v1 st:hasNextVesselEvent ?v2 . ?t2 st:hasDischargingVesselEvent ?v2 . ?t2 rdf:type ?eventClass2 . ?eventClass2 rdfs:subClassOf st:Transshipment_Event . ?c st:hasContainerEvent ?t2 . ?t2 st:hasTimestamp ?disDate . BIND( fn:substring(?disDate,5,10) AS ?endvTimeDis) . BIND( fn:substring(?cd,5,10) AS ?endCI ) . BIND( fn:substring(?vdstr,5,10) AS ?vesStop)) . FILTER (xsd:date(?endCI) > xsd:date(?vesStop)) . FILTER (xsd:date(?endvTimeDis) > xsd:date(?vesStop)) . } 2\nDL-Query. Loopin SPARQL-DL (intermediate ports) SELECT DISTINCT ?c ?endCI ?vesStop WHERE { ?c a st:Container_itinerary . ?c st:hasEndTime ?cd . ?c st:hasContainerEvent ?interMediate . ?interMediate st:hasLocation st:port . ?interMediate st:hasTimestamp ?interMediateTimeStamp . ?c st:hasContainerEvent ?t . ?t rdf:type ?eventClass . ?eventClass rdfs:subClassOf st:Transshipment_Event . ?t st:hasLoadingVesselEvent ?v . ?v st:hasNextVesselEvent ?v1 . ?v1 st:hasLocation st:port . ?v1 st:hasTimestamp ?vd . ?v1 st:hasNextVesselEvent ?v2 . ?t2 st:hasDischargingVesselEvent ?v2 . ?c st:hasContainerEvent ?t2 . ?t2 rdf:type ?eventClass2 . ?eventClass2 rdfs:subClassOf st:Transshipment_Event . ?t2 st:hasTimestamp ?disDate . BIND( fn:substring(?disDate,5,10) AS ?endvTimeDis ) BIND( fn:substring(?interMediateTimeStamp,5,10) AS ?interMediateTime ). BIND( fn:substring(?cd,5,10) AS ?endCI ) BIND( fn:substring(?vd,5,10) AS ?vesStop ) FILTER (xsd:date(?vesStop) > xsd:date(?interMediateTime)) . FILTER (xsd:date(?endCI) > xsd:date(?vesStop)) . FILTER (xsd:date(?endvTimeDis) > xsd:date(?vesStop)) . } 2"}], "references": [{"title": "A model for enriching trajectories with semantic geographical information", "author": ["L Alvares", "V Bogorny", "B Kuijpers", "JF de Macedo", "B Moelans", "S Spaccapietra", "A Vaisman"], "venue": "Proceedings of the 15th ACM international symposium on Advances in Geographic Information Systems (GIS\u201907),", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2007}, {"title": "Dynamic modeling of trajectory patterns using data mining and reverse engineering. In: Tutorials, posters, panels and industrial contributions at the 26th international conference on Conceptual modeling (ER \u201907", "author": ["L Alvares", "V Bogorny", "JF de Macedo", "B Moelans", "S Spaccapietra"], "venue": "Volume 83,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2007}, {"title": "A conceptual framework and taxonomy of techniques for analyzing movement", "author": ["G Andrienko", "N Andrienko", "P Bak", "D Keim", "S Kisilevich", "S Wrobel"], "venue": "J Vis Lang Comput 22(3):213\u2013232,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "Visual analytics of movement: An overview of methods, tools and procedures", "author": ["N Andrienko", "G Andrienko"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "Exploratory spatio-temporal visualization: an analytical review", "author": ["NV Andrienko", "GL Andrienko", "P Gatalsky"], "venue": "J Vis Lang Comput", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2003}, {"title": "The Description Logic Handbook: Theory, Implementation, and Applications", "author": ["F Baader", "D Calvanese", "DL McGuinness", "D Nardi", "PF Patel-Schneider"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2003}, {"title": "An Ontology-Based Approach for the Semantic Modelling and Reasoning on Trajectories", "author": ["M Baglioni", "J Mac\u00eado", "C Renso", "M Wachowicz"], "venue": "ER Workshops", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2008}, {"title": "Towards Semantic Interpretation of Movement Behavior. In: Advances in GIScience, Lecture  18 Notes in Geoinformation and Cartography", "author": ["M Baglioni", "J Mac\u00eado", "C Renso", "R Trasarti", "M Wachowicz"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2009}, {"title": "Trajectory semantic visualization", "author": ["S Bakshev", "L Spinsanti", "JAF de Mac\u00eado", "C Vidal", "MA Casanova"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2011}, {"title": "The DIG Description Logic Interface: DIG/1.1", "author": ["S Bechhofer"], "venue": "In: DL2003 Workshop, URL http://dig.sourceforge.net/,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2003}, {"title": "STDMQL: A Semantic Trajectory Data Mining Query Language", "author": ["V Bogorny", "B Kuijpers", "LO Alvares"], "venue": "International Journal of Geographical Information Science 23(10):1245\u20131276,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2009}, {"title": "A Conceptual Data Model for Trajectory Data Mining", "author": ["V Bogorny", "CA Heuser", "LO Alvares"], "venue": "Proceedings of the 6th International Conference on Geographic Information Science,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2010}, {"title": "Wekastpm: a software architecture and prototype for semantic trajectory data mining and visualization. Transactions in GIS 15(2):227\u2013248", "author": ["V Bogorny", "H Avancini", "BC de Paula", "CR Kuplich", "LO Alvares"], "venue": "DOI 10.1111/j.1467-9671. 2011.01246.x,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2011}, {"title": "Moving object trajectories meta-model and spatio-temporal queries", "author": ["A Boulmakoul", "L Karim", "A Lbath"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "An rdf query and transformation language", "author": ["J Broekstra", "A Kampman"], "venue": "Semantic Web and Peer-to-Peer,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2006}, {"title": "Detecting anomalous maritime container itineraries for anti-fraud and supply chain security", "author": ["E Camossi", "T Dimitrova", "A Tsois"], "venue": "European Intelligence and Security Informatics Conference (EISIC)", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2012}, {"title": "Mining Significant Semantic Locations", "author": ["X Cao", "G Cong", "CS Jensen"], "venue": "From GPS Data. In: VLDB Endowment,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2010}, {"title": "Generating semantics-based trajectories of moving objects. Computers, Environment and Urban Systems", "author": ["Dieter Pfoser", "Yannis Theodoridis"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2003}, {"title": "Enriching an ontology with multilingual information", "author": ["M Espinoza", "A Gomez-Perez", "E Mena"], "venue": "European Semantic Web Conference (ESWC\u201908), URL http://neon-toolkit.org/wiki/Main Page,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2008}, {"title": "Spatio-temporal trajectory analysis of mobile objects following the same itinerary", "author": ["L Etienne", "T Devogele", "A Bouju"], "venue": "Advances in Geo-Spatial Information Science", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2012}, {"title": "OntoVQL: A Graphical Query Language for OWL Ontologies", "author": ["A Fadhil", "V Haarslev"], "venue": "S (eds) Description Logics, CEUR-WS.org, CEUR Workshop Proceedings,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2007}, {"title": "OWL-QL: A language for deductive query answering on the Semantic Web", "author": ["R Fikes", "P Hayes", "I Horrocks"], "venue": "Journal of Web Semantics 2(1):19\u201329,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2004}, {"title": "Semantic Annotation of GPS Trajectories", "author": ["B Guc", "M May", "Y Sayigin", "C Koerner"], "venue": "AGILE International Conference on Geographic Information Science", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2008}, {"title": "Racer: A Core Inference Engine for the Semantic Web. In: Proceedings of the 2nd International Workshop on Evaluation of Ontologybased Tools (EON2003), Sanibel Island, Florida, USA, pp 27\u201336", "author": ["V Haarslev", "R M\u00f6ller"], "venue": "URL http://www. racer-systems.com/products/download/nativelibraries.phtml,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2003}, {"title": "Querying the semantic web with Racer + nRQL", "author": ["V Haarslev", "R M\u00f6ller", "M Wessel"], "venue": "Proceedings of the KI-2004 International Workshop on Applications of Description Logics", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2004}, {"title": "Combining ship trajectories and semantics with the simple event model (sem)", "author": ["WR van Hage", "V Malais\u00e9", "G de Vries", "G Schreiber", "M van Someren"], "venue": "Proceedings of the 1st ACM international workshop on Events in multimedia,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2009}, {"title": "The OWL API: A Java API for OWL Ontologies", "author": ["M Horridge", "S Bechhofer"], "venue": "Semantic Web Journal, Special Issue on Semantic Web Tools and Systems", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2011}, {"title": "Manchester syntax for owl", "author": ["M Horridge", "P Patel-Schneider"], "venue": "Proceedings of the International Workshop on OWL: Experiences and Directions (OWLED),", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2008}, {"title": "SWRL: A Semantic Web Rule Language Combining OWL and RuleML. W3C Member Submission, URL http://www.w3.org/Submission/SWRL/, last access", "author": ["I Horrocks", "PF Patel-Schneider", "H Boley", "S Tabet", "B Grosofand", "M Dean"], "venue": null, "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2004}, {"title": "Rql: A declarative query language for rdf", "author": ["G Karvounarakis", "S Alexaki", "V Christophides", "D Plexousakis", "M Scholl"], "venue": null, "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2002}, {"title": "Owlq \u2013 an owl-based query language for owl data. URL  http://www.dbis.informatik.uni-goettingen.de/Teaching/Theses/PDF/ MSc-Kemnade-OWLQ-07.pdf", "author": ["J Kemnade"], "venue": null, "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2007}, {"title": "SPARQL query answering over OWL ontologies. In: Proceedings of the 8th extended semantic web conference on the Semantic Web: research and applications - Volume Part I", "author": ["I Kollia", "B Glimm", "I Horrocks"], "venue": null, "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2011}, {"title": "Owl2query. URL http://protegewiki.stanford.edu/wiki/ OWL2Query", "author": ["P Kr\u0302emen", "B Kostov"], "venue": "(accessed in December", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2010}, {"title": "Owl saiql - an owl dl query language for ontology extraction", "author": ["E Kubias", "S Schenk", "S Staab", "JZ Pan"], "venue": "Proceedings of the 3rd International Workshop on OWL: Experiences and Directions", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2007}, {"title": "How context influences the segmentation of movement trajectories - an experimental approach for environmental and behavioral context", "author": ["AK Lautensch\u00fctz"], "venue": "Online proceedings of GIScience 2010 (Extended abstract),", "citeRegEx": "40", "shortCiteRegEx": "40", "year": 2010}, {"title": "Owlink. Semantic Web \u2013 Interoperability, Usability, Applicability 2(1):23\u201332", "author": ["T Liebig", "M Luther", "O Noppens", "M Wessel"], "venue": "URL http://owllink-owlapi. sourceforge.net/,", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2011}, {"title": "Preserving privacy in semantic-rich trajectories of human mobility", "author": ["A Monreale", "R Trasarti", "C Renso", "D Pedreschi", "V Bogorny"], "venue": "Proceedings of the 3rd ACM SIGSPATIAL International Workshop on Security and Privacy in GIS and LBS,", "citeRegEx": "42", "shortCiteRegEx": "42", "year": 2010}, {"title": "Looking inside the stops of trajectories of moving objects", "author": ["B Moreno", "VC Times", "C Renso", "V Bogorny"], "venue": null, "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2010}, {"title": "Scalable Reasoning over Ontologies with Large Data Sets", "author": ["B Motik"], "venue": "ERCIM News", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 2008}, {"title": "Oracle Database Semantic Technologies Developer\u2019s Guide, 11g Release 2 (11.2)", "author": ["C Murray"], "venue": "URL http://docs.oracle.com/cd/E11882 01/appdev.112/e25609. pdf,", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 2005}, {"title": "Sqwrl: A query language for owl", "author": ["MJ O\u2019Connor", "AK Das"], "venue": "Proceedings of the International Workshop on OWL: Experiences and Directions (OWLED), CEUR-WS.org, CEUR Workshop Proceedings,", "citeRegEx": "47", "shortCiteRegEx": "47", "year": 2009}, {"title": "A clustering-based approach for discovering interesting places in trajectories", "author": ["AT Palma", "V Bogorny", "B Kuijpers", "LO Alvares"], "venue": "Proceedings of the 2008 ACM symposium on Applied computing,", "citeRegEx": "49", "shortCiteRegEx": "49", "year": 2008}, {"title": "Semantic Trajectories Modeling and Analysis", "author": ["C Parent", "S Spaccapietra", "C Renso", "G Andrienko", "N Andrienko", "V Bogorny", "M Damiani", "A Gkoulalas-divanis", "J Macedo", "N Pelekis", "Y Theodoridis", "Z Yan"], "venue": null, "citeRegEx": "50", "shortCiteRegEx": "50", "year": 2013}, {"title": "HermiT: A Highly-Efficient OWL Reasoner", "author": ["R Shearer", "B Motik", "I Horrocks"], "venue": "Proceedings of the 5th International Workshop on OWL: Experiences and Directions (OWLED", "citeRegEx": "51", "shortCiteRegEx": "51", "year": 2008}, {"title": "Semantic trajectory compression: Representing urban movement in a nutshell", "author": ["KF Richter", "F Schmid", "P Laube"], "venue": "J Spatial Information Science", "citeRegEx": "52", "shortCiteRegEx": "52", "year": 2012}, {"title": "DB-SMoT: A directionbased spatio-temporal clustering method", "author": ["J Rocha", "G Oliveira", "L Alvares", "V Bogorny", "V Times"], "venue": "Intelligent Systems (IS),", "citeRegEx": "53", "shortCiteRegEx": "53", "year": 2010}, {"title": "Sparql-dl: Sparql query for owl-dl", "author": ["E Sirin", "B Parsia"], "venue": "Proceedings of the 3rd International Workshop on OWL: Experiences and Directions (OWLED-2007), URL http://www.derivo.de/en/resources/sparql-dl-api.html,", "citeRegEx": "55", "shortCiteRegEx": "55", "year": 2007}, {"title": "Pellet: A practical OWL-DL reasoner", "author": ["E Sirin", "B Parsia", "B Grau", "A Kalyanpur", "Y Katz"], "venue": "J of Web Semantics", "citeRegEx": "56", "shortCiteRegEx": "56", "year": 2007}, {"title": "Adding Meaning to Your Steps (Keynote Paper)", "author": ["S Spaccapietra", "C Parent"], "venue": "Conceptual Modeling - Er", "citeRegEx": "57", "shortCiteRegEx": "57", "year": 2011}, {"title": "FaCT++ Description Logic Reasoner: System Description", "author": ["D Tsarkov", "I Horrocks"], "venue": "Proceedings of the International Joint Conference on Automated Reasoning (IJCAR", "citeRegEx": "60", "shortCiteRegEx": "60", "year": 2006}, {"title": "Contraffic: Maritime container traffic anomaly detection", "author": ["A Varfis", "E Kotsakis", "A Tsois", "AV Donati", "M Sjachyn", "E Camossi", "P Villa", "T Dimitrova", "M Pellissier"], "venue": "Proceedings of the International Workshop on Maritime Anomaly Detection (MAD", "citeRegEx": "61", "shortCiteRegEx": "61", "year": 2011}, {"title": "A Description Logic Approach to Discover Suspicious Itineraries from Maritime Container Trajectories", "author": ["P Villa", "E Camossi"], "venue": "Proceedings of the 4th International Conference on GeoSpatial Semantics,", "citeRegEx": "62", "shortCiteRegEx": "62", "year": 2011}, {"title": "Learning semantic scene models by trajectory analysis", "author": ["X Wang", "K Tieu", "E Grimson"], "venue": null, "citeRegEx": "68", "shortCiteRegEx": "68", "year": 2006}, {"title": "Time integration in semantic trajectories using an ontological modelling approach", "author": ["R Wannous", "J Malki", "A Bouju", "C Vincent"], "venue": "New Trends in Databases and Information Systems, Advances in Intelligent Systems and Computing,", "citeRegEx": "69", "shortCiteRegEx": "69", "year": 2013}, {"title": "Trajectory ontologies and queries. Transactions in GIS 12:75\u201391", "author": ["Z Yan", "J Macedo", "C Parent", "S Spaccapietra"], "venue": "DOI 10.1111/j.1467-9671.2008.01137.x,", "citeRegEx": "70", "shortCiteRegEx": "70", "year": 2008}, {"title": "Semitri: a framework for semantic annotation of heterogeneous trajectories", "author": ["Z Yan", "D Chakraborty", "C Parent", "S Spaccapietra", "K Aberer"], "venue": "Proceedings of the 14th International Conference on Extending Database Technology,", "citeRegEx": "71", "shortCiteRegEx": "71", "year": 2011}, {"title": "SeTraStream: Semantic-Aware Trajectory Construction over Streaming Movement Data", "author": ["Z Yan", "N Giatrakos", "V Katsikaros", "N Pelekis", "Y Theodoridis"], "venue": "Y (eds) Advances in Spatial and Temporal Databases, Lecture Notes in Computer Science,", "citeRegEx": "72", "shortCiteRegEx": "72", "year": 2011}, {"title": "Semantic trajectories: Mobility data computation and annotation", "author": ["Z Yan", "D Chakraborty", "C Parent", "S Spaccapietra", "K Aberer"], "venue": "ACM Transactions on Intelligent Systems and Technology", "citeRegEx": "73", "shortCiteRegEx": "73", "year": 2012}, {"title": "Mining user similarity from semantic trajectories", "author": ["JJC Ying", "EHC Lu", "WC Lee", "TC Weng", "VS Tseng"], "venue": "Proceedings of the 2nd ACM SIGSPA- TIAL International Workshop on Location Based Social Networks,", "citeRegEx": "74", "shortCiteRegEx": "74", "year": 2010}, {"title": "Semantic trajectory mining for location prediction", "author": ["JJC Ying", "WC Lee", "TC Weng", "VS Tseng"], "venue": "Proceedings of the 19th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems,", "citeRegEx": "75", "shortCiteRegEx": "75", "year": 2011}, {"title": "Mining interesting locations and travel sequences from gps trajectories", "author": ["Y Zheng", "L Zhang", "X Xie", "WY Ma"], "venue": "Proceedings of the 18th international conference on World wide web,", "citeRegEx": "76", "shortCiteRegEx": "76", "year": 2009}, {"title": "Recommending friends and  locations based on individual location history", "author": ["Y Zheng", "L Zhang", "Z Ma", "X Xie", "WY Ma"], "venue": "ACM Trans Web 5(1):5:1\u20135:44,", "citeRegEx": "77", "shortCiteRegEx": "77", "year": 2011}, {"title": "A Semantic Approach for the Modeling of Trajectories in Space and Time", "author": ["D Zheni", "A Frihida", "H Ghezala", "C Claramunt"], "venue": "Proceedings of the ER", "citeRegEx": "78", "shortCiteRegEx": "78", "year": 2009}, {"title": "Event-based semantic visualization of trajectory data in urban city with a space-time cube. In: Proceedings of the 3rd WSEAS international conference on Visualization, imaging and simulation, World Scientific and Engineering Academy and Society", "author": ["C Zhong", "C Zaki", "V Tourre", "G Moreau"], "venue": null, "citeRegEx": "79", "shortCiteRegEx": "79", "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": "Semantic trajectory is a research trend that has recently emerged in Geographical Information Science and Spatiotemporal Knowledge Discovery [1, 26, 57, 58, 73], to enhance the modelling and analysis of moving object data, e.", "startOffset": 141, "endOffset": 160}, {"referenceID": 22, "context": "Semantic trajectory is a research trend that has recently emerged in Geographical Information Science and Spatiotemporal Knowledge Discovery [1, 26, 57, 58, 73], to enhance the modelling and analysis of moving object data, e.", "startOffset": 141, "endOffset": 160}, {"referenceID": 48, "context": "Semantic trajectory is a research trend that has recently emerged in Geographical Information Science and Spatiotemporal Knowledge Discovery [1, 26, 57, 58, 73], to enhance the modelling and analysis of moving object data, e.", "startOffset": 141, "endOffset": 160}, {"referenceID": 57, "context": "Semantic trajectory is a research trend that has recently emerged in Geographical Information Science and Spatiotemporal Knowledge Discovery [1, 26, 57, 58, 73], to enhance the modelling and analysis of moving object data, e.", "startOffset": 141, "endOffset": 160}, {"referenceID": 42, "context": "Semantics enhances the analysis of data and facilitates the discovery of semantically implicit patterns and behaviors [50], useful for abstracting the modelling domain and for inferring new knowledge.", "startOffset": 118, "endOffset": 122}, {"referenceID": 7, "context": "In particular, the ontology-driven enrichment of moving object trajectories is a promising approach for the discovery of itinerary patterns [8], which can be applied for example to detect outliers in sequences of movements.", "startOffset": 140, "endOffset": 143}, {"referenceID": 15, "context": "The analysis of moving object trajectories is a largely used tool in the field of maritime surveillance and security [16, 20], for fighting commercial frauds [61] and for enforcing the supply chain security to fight smuggling, counterfeiting and drug traffic.", "startOffset": 117, "endOffset": 125}, {"referenceID": 19, "context": "The analysis of moving object trajectories is a largely used tool in the field of maritime surveillance and security [16, 20], for fighting commercial frauds [61] and for enforcing the supply chain security to fight smuggling, counterfeiting and drug traffic.", "startOffset": 117, "endOffset": 125}, {"referenceID": 50, "context": "The analysis of moving object trajectories is a largely used tool in the field of maritime surveillance and security [16, 20], for fighting commercial frauds [61] and for enforcing the supply chain security to fight smuggling, counterfeiting and drug traffic.", "startOffset": 158, "endOffset": 162}, {"referenceID": 5, "context": "On top of this formalization, movement patterns of interest may be defined as Description Logic (DL)[6] axioms.", "startOffset": 100, "endOffset": 103}, {"referenceID": 51, "context": "In our test scenario, we have defined a knowledge base for the domain of maritime containers, namely the Maritime Container Ontology (MCO) [62], and modelled anomalous container patterns that describe suspicious movement behaviors.", "startOffset": 139, "endOffset": 143}, {"referenceID": 6, "context": "Such patterns are complex enough to show the potentialities of the semantic approach we propose, and are a step forward with respect to existing approaches proposed in the literature to detect patterns in moving object trajectories [7].", "startOffset": 232, "endOffset": 235}, {"referenceID": 51, "context": "The research presented in this paper relies on a previous work [62], where we introduced the MCO design and the application of axioms for anomalous patterns discovery in container itineraries.", "startOffset": 63, "endOffset": 67}, {"referenceID": 51, "context": "With respect to [62], in this work: (1) we abstract from the application domain to define a methodology for semantic pattern discovery that can be applied in other domains involving moving object trajectories; (2) we define DL-queries, semantically equivalent to ontology axioms, for the efficient retrieval of trajectories that verify the axioms conditions; (3) we run an extensive experimental evaluation on a real world dataset to test the feasibility of the approach.", "startOffset": 16, "endOffset": 20}, {"referenceID": 43, "context": ", Hermit [51], Pellet [56], and FaCT++ [60], and two of the most used API for DL querying: OWL-API [30] and SPARQL-DL API [55], and run the queries implementing the anomalous patterns against four ontologies of increasing size.", "startOffset": 9, "endOffset": 13}, {"referenceID": 47, "context": ", Hermit [51], Pellet [56], and FaCT++ [60], and two of the most used API for DL querying: OWL-API [30] and SPARQL-DL API [55], and run the queries implementing the anomalous patterns against four ontologies of increasing size.", "startOffset": 22, "endOffset": 26}, {"referenceID": 49, "context": ", Hermit [51], Pellet [56], and FaCT++ [60], and two of the most used API for DL querying: OWL-API [30] and SPARQL-DL API [55], and run the queries implementing the anomalous patterns against four ontologies of increasing size.", "startOffset": 39, "endOffset": 43}, {"referenceID": 26, "context": ", Hermit [51], Pellet [56], and FaCT++ [60], and two of the most used API for DL querying: OWL-API [30] and SPARQL-DL API [55], and run the queries implementing the anomalous patterns against four ontologies of increasing size.", "startOffset": 99, "endOffset": 103}, {"referenceID": 46, "context": ", Hermit [51], Pellet [56], and FaCT++ [60], and two of the most used API for DL querying: OWL-API [30] and SPARQL-DL API [55], and run the queries implementing the anomalous patterns against four ontologies of increasing size.", "startOffset": 122, "endOffset": 126}, {"referenceID": 42, "context": "The same community has recently presented a survey of the research on this area [50].", "startOffset": 80, "endOffset": 84}, {"referenceID": 48, "context": "Another recent overview has been presented by Spaccapietra and collaborators [57], the same group that originally proposed the first conceptual model for the representation of semantics in trajectories [58], which has become a reference model for trajectory data analysis (for example, [1, 26, 8, 11] refer to this model).", "startOffset": 77, "endOffset": 81}, {"referenceID": 0, "context": "Another recent overview has been presented by Spaccapietra and collaborators [57], the same group that originally proposed the first conceptual model for the representation of semantics in trajectories [58], which has become a reference model for trajectory data analysis (for example, [1, 26, 8, 11] refer to this model).", "startOffset": 286, "endOffset": 300}, {"referenceID": 22, "context": "Another recent overview has been presented by Spaccapietra and collaborators [57], the same group that originally proposed the first conceptual model for the representation of semantics in trajectories [58], which has become a reference model for trajectory data analysis (for example, [1, 26, 8, 11] refer to this model).", "startOffset": 286, "endOffset": 300}, {"referenceID": 7, "context": "Another recent overview has been presented by Spaccapietra and collaborators [57], the same group that originally proposed the first conceptual model for the representation of semantics in trajectories [58], which has become a reference model for trajectory data analysis (for example, [1, 26, 8, 11] refer to this model).", "startOffset": 286, "endOffset": 300}, {"referenceID": 10, "context": "Another recent overview has been presented by Spaccapietra and collaborators [57], the same group that originally proposed the first conceptual model for the representation of semantics in trajectories [58], which has become a reference model for trajectory data analysis (for example, [1, 26, 8, 11] refer to this model).", "startOffset": 286, "endOffset": 300}, {"referenceID": 62, "context": "The first approach is adopted in [78], where the authors introduce an algebraic model that represents a spatio-temporal trajectory as an Abstract Data Type (ADT) that encapsulates the semantic dimension.", "startOffset": 33, "endOffset": 37}, {"referenceID": 17, "context": "[18], that generate synthetic datasets of semantic trajectories.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[17] and Guc et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "[26] select STOPs from pre-encoded POIs crossing the moving object trajectory.", "startOffset": 0, "endOffset": 4}, {"referenceID": 0, "context": "[1] apply a similar approach, but selecting the Regions of Interest (ROI) in which the moving object stays for more than a given time, a temporal threshold that can differ for each ROI and is encoded within the ROI representation at a semantic level.", "startOffset": 0, "endOffset": 3}, {"referenceID": 16, "context": "[17] give also a ranking of the top-k significant locations for each trajectory.", "startOffset": 0, "endOffset": 4}, {"referenceID": 60, "context": "[76], who adopt a hierarchical approach to detect important places and typical travel sequences from user trajectories.", "startOffset": 0, "endOffset": 4}, {"referenceID": 61, "context": "Other works infer STOPs evaluating only the raw features of the trajectory, for example, the time the moving object does not move along the trajectory and the distance between these stops [77], the change of speed [49] or direction [53].", "startOffset": 188, "endOffset": 192}, {"referenceID": 41, "context": "Other works infer STOPs evaluating only the raw features of the trajectory, for example, the time the moving object does not move along the trajectory and the distance between these stops [77], the change of speed [49] or direction [53].", "startOffset": 214, "endOffset": 218}, {"referenceID": 45, "context": "Other works infer STOPs evaluating only the raw features of the trajectory, for example, the time the moving object does not move along the trajectory and the distance between these stops [77], the change of speed [49] or direction [53].", "startOffset": 232, "endOffset": 236}, {"referenceID": 57, "context": "[73, 71].", "startOffset": 0, "endOffset": 8}, {"referenceID": 55, "context": "[73, 71].", "startOffset": 0, "endOffset": 8}, {"referenceID": 57, "context": "[73, 71] abstract from the requirement of a specific application domain using POI, ROI and Lines of Interest to annotate STOPs, and enabling to annotate also MOVEs, both as activities, such as walking, driving, cycling, and transportation modes, like bus, car, taxi, etc.", "startOffset": 0, "endOffset": 8}, {"referenceID": 55, "context": "[73, 71] abstract from the requirement of a specific application domain using POI, ROI and Lines of Interest to annotate STOPs, and enabling to annotate also MOVEs, both as activities, such as walking, driving, cycling, and transportation modes, like bus, car, taxi, etc.", "startOffset": 0, "endOffset": 8}, {"referenceID": 56, "context": "[72], who realize online identification of episodes by detecting the alteration of patterns within the trajectory.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "[26].", "startOffset": 0, "endOffset": 4}, {"referenceID": 53, "context": "[69] is a case of MOVEs annotation for animals trajectories, specifically seals\u2019, to distinguish travelling states (e.", "startOffset": 0, "endOffset": 4}, {"referenceID": 52, "context": "in [68] apply clustering on whole trajectories to distinguish among different trajectory types (e.", "startOffset": 3, "endOffset": 7}, {"referenceID": 16, "context": "[17] for the extraction of semantic locations and by Palma et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 41, "context": "[49], who adopt spatio-temporal clustering to classify trajectory with respect to their speed.", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "[29] present an interesting approach for modelling and analysing ship trajectories for early time awareness for Maritime Surveillance and Security, which takes into account the semantics of the trajectories.", "startOffset": 0, "endOffset": 4}, {"referenceID": 52, "context": "As we have seen, some of the methods described above [68, 17, 49] adopt data mining, clustering in particular, for the semantic annotation of trajectories.", "startOffset": 53, "endOffset": 65}, {"referenceID": 16, "context": "As we have seen, some of the methods described above [68, 17, 49] adopt data mining, clustering in particular, for the semantic annotation of trajectories.", "startOffset": 53, "endOffset": 65}, {"referenceID": 41, "context": "As we have seen, some of the methods described above [68, 17, 49] adopt data mining, clustering in particular, for the semantic annotation of trajectories.", "startOffset": 53, "endOffset": 65}, {"referenceID": 1, "context": "[2] and Moreno et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 37, "context": "[43] take semantic trajectory with annotated STOPs and MOVEs and extract moving patterns considering also background geographical information.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "in [13] present Weka-STPM, a data mining toolkit for geographical data that takes trajectories with annotated POIs and performs episode recognitions as pre-processing for analysis and visualization.", "startOffset": 3, "endOffset": 7}, {"referenceID": 10, "context": "in [11, 12] formalize the idea of semantic trajectory pattern mining to boost data preprocessing and to mine data at a higher abstraction level.", "startOffset": 3, "endOffset": 11}, {"referenceID": 11, "context": "in [11, 12] formalize the idea of semantic trajectory pattern mining to boost data preprocessing and to mine data at a higher abstraction level.", "startOffset": 3, "endOffset": 11}, {"referenceID": 0, "context": "Relying on the results presented in [1, 49], they preprocess trajectories to annotate STOPs and MOVEs.", "startOffset": 36, "endOffset": 43}, {"referenceID": 41, "context": "Relying on the results presented in [1, 49], they preprocess trajectories to annotate STOPs and MOVEs.", "startOffset": 36, "endOffset": 43}, {"referenceID": 58, "context": "[74] compute similarity of user trajectories, taking into account trajectory semantics.", "startOffset": 0, "endOffset": 4}, {"referenceID": 59, "context": "The same authors in [75] rely on user behaviour in similar clusters to predict the next location in a semantic trajectory.", "startOffset": 20, "endOffset": 24}, {"referenceID": 6, "context": "[7, 8] represent annotated trajectories in an ontology encompassing also geographical and application domain knowledge.", "startOffset": 0, "endOffset": 6}, {"referenceID": 7, "context": "[7, 8] represent annotated trajectories in an ontology encompassing also geographical and application domain knowledge.", "startOffset": 0, "endOffset": 6}, {"referenceID": 6, "context": "Similarly to [7, 8], Yan et al.", "startOffset": 13, "endOffset": 19}, {"referenceID": 7, "context": "Similarly to [7, 8], Yan et al.", "startOffset": 13, "endOffset": 19}, {"referenceID": 54, "context": "[70] use an ontological approach for the representation of semantic trajectory.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[14] propose a generic meta-model for trajectories of moving objects to allow independent applications processing trajectories data benefit from a high level of interoperability, information sharing as well as an efficient answer for a wide range of complex trajectory queries.", "startOffset": 0, "endOffset": 4}, {"referenceID": 44, "context": "[52] use geographical knowledge on POIs to compress trajectories while maintaining an acceptable information loss.", "startOffset": 0, "endOffset": 4}, {"referenceID": 36, "context": "[42] discuss the privacy issues of semantic trajectories.", "startOffset": 0, "endOffset": 4}, {"referenceID": 3, "context": "Not to be neglected is the contribution in stressing the contextual information attached over the trajectories, that allows its refinement and classification [4].", "startOffset": 158, "endOffset": 161}, {"referenceID": 4, "context": "[5] presents some possible techniques, working as a reference framework for choosing the techniques that better fit the specific characteristics of the data to be represented and the objectives of the analysis.", "startOffset": 0, "endOffset": 3}, {"referenceID": 12, "context": "Other works that address visualization to offer knowledge to the user are present in literature, such as the Weka-STPM tool [13].", "startOffset": 124, "endOffset": 128}, {"referenceID": 8, "context": "[9] proposes a framework for trajectory visualisation and querying, where the semantic context of trajectories is modelled as an application domain ontology.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "In [3], Andrienko et al.", "startOffset": 3, "endOffset": 6}, {"referenceID": 4, "context": "Currently the established visualization techniques for geographical data are animated map and spacetime cube (see, for example, [5]), which enhance understanding taking into account also the temporal dimension of data to support data analysis.", "startOffset": 128, "endOffset": 131}, {"referenceID": 63, "context": "[79] to design a method for semantic visualisation of trajectories based on the notion of events, that are modelled as ADTs.", "startOffset": 0, "endOffset": 4}, {"referenceID": 34, "context": "Finally, [40] evaluates the importance of contextual information derived by geographical knowledge for visual analytics approaches to enhance the understanding of human behaviour.", "startOffset": 9, "endOffset": 13}, {"referenceID": 53, "context": "Our approach has in common with [69, 7, 8, 70, 9] the use of ontology for the representation of the domain and expert knowledge.", "startOffset": 32, "endOffset": 49}, {"referenceID": 6, "context": "Our approach has in common with [69, 7, 8, 70, 9] the use of ontology for the representation of the domain and expert knowledge.", "startOffset": 32, "endOffset": 49}, {"referenceID": 7, "context": "Our approach has in common with [69, 7, 8, 70, 9] the use of ontology for the representation of the domain and expert knowledge.", "startOffset": 32, "endOffset": 49}, {"referenceID": 54, "context": "Our approach has in common with [69, 7, 8, 70, 9] the use of ontology for the representation of the domain and expert knowledge.", "startOffset": 32, "endOffset": 49}, {"referenceID": 8, "context": "Our approach has in common with [69, 7, 8, 70, 9] the use of ontology for the representation of the domain and expert knowledge.", "startOffset": 32, "endOffset": 49}, {"referenceID": 53, "context": "The usage of DL axioms for automatic reasoning on moving object data is applied in particular by [69, 7, 8].", "startOffset": 97, "endOffset": 107}, {"referenceID": 6, "context": "The usage of DL axioms for automatic reasoning on moving object data is applied in particular by [69, 7, 8].", "startOffset": 97, "endOffset": 107}, {"referenceID": 7, "context": "The usage of DL axioms for automatic reasoning on moving object data is applied in particular by [69, 7, 8].", "startOffset": 97, "endOffset": 107}, {"referenceID": 6, "context": "[7, 8], we focus on the discovery of patterns expressed as ontology axioms and on the retrieval of ontology instances that verify such patterns.", "startOffset": 0, "endOffset": 6}, {"referenceID": 7, "context": "[7, 8], we focus on the discovery of patterns expressed as ontology axioms and on the retrieval of ontology instances that verify such patterns.", "startOffset": 0, "endOffset": 6}, {"referenceID": 6, "context": "However, even if the general approach is the same, with respect to [7, 8], we go a step forward in term of complexity of domain knowledge and axioms.", "startOffset": 67, "endOffset": 73}, {"referenceID": 7, "context": "However, even if the general approach is the same, with respect to [7, 8], we go a step forward in term of complexity of domain knowledge and axioms.", "startOffset": 67, "endOffset": 73}, {"referenceID": 6, "context": "Moreover, differently from [7, 8], we translate axioms into DL queries, and evaluate according different implementation settings, considering combinations of different DL query languages and APIs and reasoning engines.", "startOffset": 27, "endOffset": 33}, {"referenceID": 7, "context": "Moreover, differently from [7, 8], we translate axioms into DL queries, and evaluate according different implementation settings, considering combinations of different DL query languages and APIs and reasoning engines.", "startOffset": 27, "endOffset": 33}, {"referenceID": 7, "context": "tested their approach in [8] importing the domain ontology in ORACLE and using OWLPrime to test the axioms.", "startOffset": 25, "endOffset": 28}, {"referenceID": 13, "context": "Our work has some similarities with [14]: actually, the authors have elaborated a meta-model to represent moving objects using a mapping ontology for locations; despite this similarity, in extracting information from the instantiated model during the evaluation phase, they seem to rely on a pure SQL-based approach, whether we rely on semantics queries.", "startOffset": 36, "endOffset": 40}, {"referenceID": 5, "context": "In this section we introduce the main features of DLs [6], that are the foundational basis of our formalization.", "startOffset": 54, "endOffset": 57}, {"referenceID": 5, "context": "We refer to the DL ALC[6] to represent and reason on the domain according to its features.", "startOffset": 22, "endOffset": 25}, {"referenceID": 5, "context": "The addition of these two features does not influence the complexity of the basic reasoning services, which, in presence of an acyclic TBox2, remains PSpace-complete as in ALC [6].", "startOffset": 176, "endOffset": 179}, {"referenceID": 5, "context": "Although the reasoning is of a relatively high complexity, the pathological cases that lead to the worst case complexity rarely occur in practice [6].", "startOffset": 146, "endOffset": 149}, {"referenceID": 26, "context": "Currently, the most used ones are OWL-API [30] and SPARQL-DL [55], that we have tested in the experimental evaluation in Section VIII.", "startOffset": 42, "endOffset": 46}, {"referenceID": 46, "context": "Currently, the most used ones are OWL-API [30] and SPARQL-DL [55], that we have tested in the experimental evaluation in Section VIII.", "startOffset": 61, "endOffset": 65}, {"referenceID": 51, "context": "In [62], we proposed the Maritime Container Ontology (MCO) to represent the domain of the maritime containers.", "startOffset": 3, "endOffset": 7}, {"referenceID": 51, "context": "We refer the interested reader to [62] for the details.", "startOffset": 34, "endOffset": 38}, {"referenceID": 11, "context": "As before, instances of Vessel Event model the STOPs of a Vessel Itinerary [12, 58].", "startOffset": 75, "endOffset": 83}, {"referenceID": 6, "context": "Suspicious pattern go beyond the simple patterns presented in similar approaches [7], in particular because they involve multiple itineraries and events classes, i.", "startOffset": 81, "endOffset": 84}, {"referenceID": 47, "context": "Different DL reasoners can be applied to check the axioms, the most common ones being Pellet [56], FaCT++ [60], Hermit [51] and RacerPro [27].", "startOffset": 93, "endOffset": 97}, {"referenceID": 49, "context": "Different DL reasoners can be applied to check the axioms, the most common ones being Pellet [56], FaCT++ [60], Hermit [51] and RacerPro [27].", "startOffset": 106, "endOffset": 110}, {"referenceID": 43, "context": "Different DL reasoners can be applied to check the axioms, the most common ones being Pellet [56], FaCT++ [60], Hermit [51] and RacerPro [27].", "startOffset": 119, "endOffset": 123}, {"referenceID": 23, "context": "Different DL reasoners can be applied to check the axioms, the most common ones being Pellet [56], FaCT++ [60], Hermit [51] and RacerPro [27].", "startOffset": 137, "endOffset": 141}, {"referenceID": 24, "context": "For some QL, such as nRQL [28], the Racer DL-QL, a limited possibility for query conjunction is also supported.", "startOffset": 26, "endOffset": 30}, {"referenceID": 20, "context": "Other DL-based approaches augment the QL expressivity providing graphical instruments to specify a query, like ONTOVQL [24],", "startOffset": 119, "endOffset": 123}, {"referenceID": 29, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 64, "endOffset": 68}, {"referenceID": 14, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 97, "endOffset": 101}, {"referenceID": 9, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 164, "endOffset": 168}, {"referenceID": 35, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 224, "endOffset": 228}, {"referenceID": 21, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 281, "endOffset": 285}, {"referenceID": 30, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 330, "endOffset": 334}, {"referenceID": 33, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 380, "endOffset": 384}, {"referenceID": 24, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 429, "endOffset": 433}, {"referenceID": 20, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 471, "endOffset": 475}, {"referenceID": 40, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 521, "endOffset": 525}, {"referenceID": 46, "context": "SPARQL [65] RDF, OWL subgraph matching, conjunctive queries RQL [35] RDF subgraph matching SeRQL [15] RDF subgraph matching RDQL [64] RDF subgraph matching ASK DIG [10] OWL DL atomic queries (TBox/RBox/ABox) OWLink protocol [41] OWL DL atomic queries (TBox/RBox/ABox) OWL-QL (DQL) [25] OWL DL atomic queries (TBox/RBox/ABox) OWLQ [36] OWL DL atomic queries (TBox/RBox/ABox) SAIQL [39] OWL DL atomic queries (TBox/RBox/ABox) nRQL [28] OWL conjunctive ABox queries ONTOVQL [24] OWL DL atomic queries (TBox/RBox/ABox) SQWRL [47] OWL + SWRL DL atomic queries + SWRL rules SPARQL-DL [55] OWL conjunctive TBox, RBox, ABox queries SPARQL 1.", "startOffset": 578, "endOffset": 582}, {"referenceID": 31, "context": "1 [67] OWL conjunctive TBox, RBox, ABox queries SPARQL-OWL [37] OWL conjunctive TBox, RBox, ABox queries", "startOffset": 59, "endOffset": 63}, {"referenceID": 40, "context": ", Horn clauses), like SQWRL [47], which takes rule antecedents as query specifications.", "startOffset": 28, "endOffset": 32}, {"referenceID": 35, "context": "Finally, the OWLink protocol [41], which overcomes the ASK DIG interface [10] to interact with OWL 2.", "startOffset": 29, "endOffset": 33}, {"referenceID": 9, "context": "Finally, the OWLink protocol [41], which overcomes the ASK DIG interface [10] to interact with OWL 2.", "startOffset": 73, "endOffset": 77}, {"referenceID": 31, "context": "1 specification relies on the work of different communities, including the ones working on SPARQL-OWL [37] and SPARQL-DL [55].", "startOffset": 102, "endOffset": 106}, {"referenceID": 46, "context": "1 specification relies on the work of different communities, including the ones working on SPARQL-OWL [37] and SPARQL-DL [55].", "startOffset": 121, "endOffset": 125}, {"referenceID": 46, "context": "By contrast, a fully functional API for SPARQL-DL [55] is available.", "startOffset": 50, "endOffset": 54}, {"referenceID": 47, "context": "It extends the Pellet [56] query engine, and is currently a very competitive solution for ontology querying, as we discuss in the experimental evaluation section.", "startOffset": 22, "endOffset": 26}, {"referenceID": 46, "context": "The SPARQL-DL API [55] and other tools that either support ontology QL or generically enable to query an ontology, are reported in Table III.", "startOffset": 18, "endOffset": 22}, {"referenceID": 38, "context": "Among the tools listed in the table, JENA [54] and KAON2 [44] are mainly designed for RDF knowledge bases: even if they can handle OWL ontologies, reasoning is performed as subgraph matching in JENA, while KAON2 implements the DIG ASK interface, limited to OWL-Lite for DL reasoning, but partially extended towards SWRL and FLOGIC.", "startOffset": 57, "endOffset": 61}, {"referenceID": 35, "context": "Among the tools specifically designed for OWL ontologies, the OWLink API [41], the API for the OWLink protocol is the evolution of the DIG interface for OWL 2.", "startOffset": 73, "endOffset": 77}, {"referenceID": 31, "context": "The Prot\u00e9g\u00e9-OWL API [59] is an API designed for plugin development, while and SQWRL-API [37] and OWL2Query [38] are Prot\u00e9g\u00e9 plugins for ontology querying, integrating SWRL rules and SPARQL-DL , which is SPARQL-DL with negation as failure, respectively.", "startOffset": 88, "endOffset": 92}, {"referenceID": 32, "context": "The Prot\u00e9g\u00e9-OWL API [59] is an API designed for plugin development, while and SQWRL-API [37] and OWL2Query [38] are Prot\u00e9g\u00e9 plugins for ontology querying, integrating SWRL rules and SPARQL-DL , which is SPARQL-DL with negation as failure, respectively.", "startOffset": 107, "endOffset": 111}, {"referenceID": 18, "context": "NEON [19], RacerPro APIs and SQWRL-API adopt query languages specifically designed for the tools, respectively SAIQL, nRQL and SQWRL.", "startOffset": 5, "endOffset": 9}, {"referenceID": 26, "context": "The OWL-API [30] is an open source API written in Java that is considered as a reference interface for ontology manipulation.", "startOffset": 12, "endOffset": 16}, {"referenceID": 46, "context": "By contrast, as mentioned above, this functionalities are supported by the SPARQL-DL API [55], that extends the OWL API to enable conjunctive DL query answering.", "startOffset": 89, "endOffset": 93}, {"referenceID": 38, "context": "JENA [54] SPARQL OWL reasoners but only subgraph matching KAON2 [44] SPARQL Integrated reasoner (OWL Lite, DL safe SWRL, FLOGIC) DIG ASK interface KAON2 OWL Tools [45] SPARQL-DL Lite OWL-API compliant NEON Toolkit [19] SAIQL OWL-API compliant Prot\u00e9g\u00e9-OWL API [59] DL atomic TBox/RBox/ABox queries DIG ASK compliant SQWRL-API [37] SQWRL Jess Rule Engine, RacerPro", "startOffset": 64, "endOffset": 68}, {"referenceID": 18, "context": "JENA [54] SPARQL OWL reasoners but only subgraph matching KAON2 [44] SPARQL Integrated reasoner (OWL Lite, DL safe SWRL, FLOGIC) DIG ASK interface KAON2 OWL Tools [45] SPARQL-DL Lite OWL-API compliant NEON Toolkit [19] SAIQL OWL-API compliant Prot\u00e9g\u00e9-OWL API [59] DL atomic TBox/RBox/ABox queries DIG ASK compliant SQWRL-API [37] SQWRL Jess Rule Engine, RacerPro", "startOffset": 214, "endOffset": 218}, {"referenceID": 31, "context": "JENA [54] SPARQL OWL reasoners but only subgraph matching KAON2 [44] SPARQL Integrated reasoner (OWL Lite, DL safe SWRL, FLOGIC) DIG ASK interface KAON2 OWL Tools [45] SPARQL-DL Lite OWL-API compliant NEON Toolkit [19] SAIQL OWL-API compliant Prot\u00e9g\u00e9-OWL API [59] DL atomic TBox/RBox/ABox queries DIG ASK compliant SQWRL-API [37] SQWRL Jess Rule Engine, RacerPro", "startOffset": 325, "endOffset": 329}, {"referenceID": 32, "context": "OWL2Query [38] SPARQL-DLNOT OWL-API v.", "startOffset": 10, "endOffset": 14}, {"referenceID": 23, "context": "3 compliant RacerPro APIs [27] nRQL RacerPro OWL-API [30] DL atomic TBox/RBox/ABox queries FaCT++, Hermit, Pellet, CEL (OWL-API v.", "startOffset": 26, "endOffset": 30}, {"referenceID": 26, "context": "3 compliant RacerPro APIs [27] nRQL RacerPro OWL-API [30] DL atomic TBox/RBox/ABox queries FaCT++, Hermit, Pellet, CEL (OWL-API v.", "startOffset": 53, "endOffset": 57}, {"referenceID": 35, "context": "3 compliant), and RacerPro (via OWLLink) OWLLink API [41] DL atomic TBox/RBox/ABox queries RacerPro, OWL-API v.", "startOffset": 53, "endOffset": 57}, {"referenceID": 46, "context": "3 compliant reasoners SPARQL-DL API [55] SPARQL-DL OWL-API v.", "startOffset": 36, "endOffset": 40}, {"referenceID": 39, "context": "3 compliant reasoners ORACLE Database Semantic Technologies [46] RDF,RDFS++,OWLSIF,OWLPrime", "startOffset": 60, "endOffset": 64}, {"referenceID": 26, "context": "We tested different ontology APIs, languages and reasoners: the OWL-API [30] and SPARQL-DL [55] DLquery languages, combined with Pellet [56], Hermit [51], FaCT++[60].", "startOffset": 72, "endOffset": 76}, {"referenceID": 46, "context": "We tested different ontology APIs, languages and reasoners: the OWL-API [30] and SPARQL-DL [55] DLquery languages, combined with Pellet [56], Hermit [51], FaCT++[60].", "startOffset": 91, "endOffset": 95}, {"referenceID": 47, "context": "We tested different ontology APIs, languages and reasoners: the OWL-API [30] and SPARQL-DL [55] DLquery languages, combined with Pellet [56], Hermit [51], FaCT++[60].", "startOffset": 136, "endOffset": 140}, {"referenceID": 43, "context": "We tested different ontology APIs, languages and reasoners: the OWL-API [30] and SPARQL-DL [55] DLquery languages, combined with Pellet [56], Hermit [51], FaCT++[60].", "startOffset": 149, "endOffset": 153}, {"referenceID": 49, "context": "We tested different ontology APIs, languages and reasoners: the OWL-API [30] and SPARQL-DL [55] DLquery languages, combined with Pellet [56], Hermit [51], FaCT++[60].", "startOffset": 161, "endOffset": 165}, {"referenceID": 26, "context": "We have started to test the axioms by considering the Java OWL-API [30] interface.", "startOffset": 67, "endOffset": 71}, {"referenceID": 46, "context": "We have taken into account the SPARQL-DL[55] engine in Pellet, and the SPARQL-DL implementation by Derivo.", "startOffset": 40, "endOffset": 44}, {"referenceID": 26, "context": "query, that is based on Matthew Horridge\u2019s example code in [30].", "startOffset": 59, "endOffset": 63}, {"referenceID": 27, "context": "To reach this goal, the axiom has been rewritten into Manchester syntax for OWL [31].", "startOffset": 80, "endOffset": 84}, {"referenceID": 46, "context": "As an alternative, we considered SPARQL-DL [55]: it is an expressive language for querying OWL-DL ontologies, and allows us to extract the dates that are necessary to get the real suspicious itineraries.", "startOffset": 43, "endOffset": 47}, {"referenceID": 0, "context": "Pellet & SPARQL-DL [1] 39 512 588 658 [2] 3 5 8 10 [3] 5 7 10 40 TABLE VII.", "startOffset": 19, "endOffset": 22}, {"referenceID": 1, "context": "Pellet & SPARQL-DL [1] 39 512 588 658 [2] 3 5 8 10 [3] 5 7 10 40 TABLE VII.", "startOffset": 38, "endOffset": 41}, {"referenceID": 2, "context": "Pellet & SPARQL-DL [1] 39 512 588 658 [2] 3 5 8 10 [3] 5 7 10 40 TABLE VII.", "startOffset": 51, "endOffset": 54}, {"referenceID": 0, "context": "FOR THE ROWS Pellet & SPARQL-DL, WE HAVE CASES: [1] WITHOUT DATE FILTER; [2] WITH DATE FILTER; [3] WITH DATE FILTER AND INTERMEDIATE PORTS.", "startOffset": 48, "endOffset": 51}, {"referenceID": 1, "context": "FOR THE ROWS Pellet & SPARQL-DL, WE HAVE CASES: [1] WITHOUT DATE FILTER; [2] WITH DATE FILTER; [3] WITH DATE FILTER AND INTERMEDIATE PORTS.", "startOffset": 73, "endOffset": 76}, {"referenceID": 2, "context": "FOR THE ROWS Pellet & SPARQL-DL, WE HAVE CASES: [1] WITHOUT DATE FILTER; [2] WITH DATE FILTER; [3] WITH DATE FILTER AND INTERMEDIATE PORTS.", "startOffset": 95, "endOffset": 98}, {"referenceID": 28, "context": "It is worth mentioning that, for application domains requiring more complex formalization, we can further improve the representation language expressivity using formalisations such as OWL and SWRL[32], to enable the use of variables and express equality comparison between instances.", "startOffset": 196, "endOffset": 200}, {"referenceID": 11, "context": "The same approach has been adopted in [12], where an input dataset of touristic trajectories is first pre-processed with a set of data mining procedures to discover a bunch of data-mining patterns; only after this step, such patterns are loaded in the knowledge base to reason on them.", "startOffset": 38, "endOffset": 42}], "year": 2013, "abstractText": "In this work, we investigate a novel semantic approach for pattern discovery in trajectories that, relying on ontologies, enhances object movement information with event semantics. The approach can be applied to the detection of movement patterns and behaviors whenever the semantics of events occurring along the trajectory is, explicitly or implicitly, available. In particular, we tested it against an exacting case scenario in maritime surveillance, i.e., the discovery of suspicious container transportations. The methodology we have developed entails the formalization of the application domain through a domain ontology, extending the Moving Object Ontology (MOO) described in this paper. Afterwards, movement patterns have to be formalized, either as Description Logic (DL) axioms or queries, enabling the retrieval of the trajectories that follow the patterns. In our experimental evaluation, we have considered a real world dataset of 18 Million of container events describing the deed undertaken in a port to accomplish the shipping (e.g., loading on a vessel, export operation). Leveraging events, we have reconstructed almost 300 thousand container trajectories referring to 50 thousand containers travelling along three years. We have formalized the anomalous itinerary patterns as DL axioms, testing different ontology APIs and DL reasoners to retrieve the suspicious transportations. Our experiments demonstrate that the approach is feasible and efficient. In particular, the joint use of Pellet and SPARQL-DL enables to detect the trajectories following a given pattern in a reasonable time with big size datasets.", "creator": "LaTeX with hyperref package"}}}