{"id": "1305.2505", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-May-2013", "title": "On the Generalization Ability of Online Learning Algorithms for Pairwise Loss Functions", "abstract": "in this paper, we study the generalization properties constructed of online learning based stochastic methods for supervised learning problems where the loss function is dependent on more than some one training sample ( e. g., metric learning, ranking ). we present a generic decoupling methods technique that enables us to provide rademacher complexity - based generalization error bounds. our bounds frames are in general strictly tighter than those obtained by wang et al ( colt 2012 ) for the precisely same problem. using our decoupling technique, we are further able to possibly obtain fast convergence rates for strongly orthogonal convex random pairwise similarity loss functions. we are also able to analyze a class of memory efficient online learning algorithms for pairwise learning problems that use only a bounded subset of past training samples to update the hypothesis at each step. finally, in order to complement our generalization bounds, we propose a novel memory efficient online learning algorithm for higher order learning problems with bounded regret guarantees.", "histories": [["v1", "Sat, 11 May 2013 13:52:37 GMT  (94kb,D)", "http://arxiv.org/abs/1305.2505v1", "To appear in proceedings of the 30th International Conference on Machine Learning (ICML 2013)"]], "COMMENTS": "To appear in proceedings of the 30th International Conference on Machine Learning (ICML 2013)", "reviews": [], "SUBJECTS": "cs.LG stat.ML", "authors": ["purushottam kar", "bharath k sriperumbudur", "prateek jain 0002", "harish karnick"], "accepted": true, "id": "1305.2505"}, "pdf": {"name": "1305.2505.pdf", "metadata": {"source": "META", "title": "On the Generalization Ability of Online Learning Algorithms for Pairwise Loss Functions", "authors": ["Purushottam Kar", "Bharath K Sriperumbudur"], "emails": ["purushot@cse.iitk.ac.in", "bs493@statslab.cam.ac.uk", "prajain@microsoft.com", "hk@cse.iitk.ac.in"], "sections": [{"heading": "1. Introduction", "text": "Several supervised learning problems involve working with pairwise or higher order loss functions, i.e., loss functions that depend on more than one training samProceedings of the 30 th International Conference on Machine Learning, Atlanta, Georgia, USA, 2013. JMLR: W&CP volume 28. Copyright 2013 by the author(s).\nple. Take for example the metric learning problem (Jin et al., 2009), where the goal is to learn a metric M that brings points of a similar label together while keeping differently labeled points apart. In this case the loss function used is a pairwise loss function `(M, (x, y), (x\u2032, y\u2032)) = \u03c6 (yy\u2032 (1\u2212M(x,x\u2032))) where \u03c6 is the hinge loss function. In general, a pairwise loss function is of the form ` : H \u00d7 X \u00d7 X \u2192 R+ where H is the hypothesis space and X is the input domain. Other examples include preference learning (Xing et al., 2002), ranking (Agarwal & Niyogi, 2009), AUC maximization (Zhao et al., 2011) and multiple kernel learning (Kumar et al., 2012).\nIn practice, algorithms for such problems use intersecting pairs of training samples to learn. Hence the training data pairs are not i.i.d. and consequently, standard generalization error analysis techniques do not apply to these algorithms. Recently, the analysis of batch algorithms learning from such coupled samples has received much attention (Cao et al., 2012; Cle\u0301menc\u0327on et al., 2008; Brefeld & Scheffer, 2005) where a dominant idea has been to use an alternate representation of the U-statistic and provide uniform convergence bounds. Another popular approach has been to use algorithmic stability (Agarwal & Niyogi, 2009; Jin et al., 2009) to obtain algorithm-specific results.\nWhile batch algorithms for pairwise (and higher-order) learning problems have been studied well theoretically, online learning based stochastic algorithms are more popular in practice due to their scalability. However, their generalization properties were not studied until recently. Wang et al. (2012) provided the first generalization error analysis of online learning methods\nar X\niv :1\n30 5.\n25 05\nv1 [\ncs .L\nG ]\n1 1\napplied to pairwise loss functions. In particular, they showed that such higher-order online learning methods also admit online to batch conversion bounds (similar to those for first-order problems (Cesa-Bianchi et al., 2001)) which can be combined with regret bounds to obtain generalization error bounds. However, due to their proof technique and dependence on L\u221e covering numbers of function classes, their bounds are not tight and have a strong dependence on the dimensionality of the input space.\nIn literature, there are several instances where Rademacher complexity based techniques achieve sharper bounds than those based on covering numbers (Kakade et al., 2008). However, the coupling of different input pairs in our problem does not allow us to use such techniques directly.\nIn this paper we introduce a generic technique for analyzing online learning algorithms for higher order learning problems. Our technique, that uses an extension of Rademacher complexities to higher order function classes (instead of covering numbers), allows us to give bounds that are tighter than those of (Wang et al., 2012) and that, for several learning scenarios, have no dependence on input dimensionality at all.\nKey to our proof is a technique we call Symmetrization of Expectations which acts as a decoupling step and allows us to reduce excess risk estimates to Rademacher complexities of function classes. (Wang et al., 2012), on the other hand, perform a symmetrization with probabilities which, apart from being more involved, yields suboptimal bounds. Another advantage of our technique is that it allows us to obtain fast convergence rates for learning algorithms that use strongly convex loss functions. Our result, that uses a novel two stage proof technique, extends a similar result in the first order setting by Kakade & Tewari (2008) to the pairwise setting.\nWang et al. (2012) (and our results mentioned above) assume an online learning setup in which a stream of points z1, . . . , zn is observed and the penalty function used at the tth step is L\u0302t(h) = 1t\u22121 \u2211t\u22121 \u03c4=1 `(h, zt, z\u03c4 ). Consequently, the results of Wang et al. (2012) expect regret bounds with respect to these all-pairs penalties L\u0302t. This requires one to use/store all previously seen points which is computationally/storagewise expensive and hence in practice, learning algorithms update their hypotheses using only a bounded subset of the past samples (Zhao et al., 2011).\nIn the above mentioned setting, we are able to give generalization bounds that only require algorithms to give regret bounds with respect to finite-buffer penalty\nfunctions such as L\u0302buft (h) = 1|B| \u2211 z\u2208B `(h, zt, z) where B is a buffer that is updated at each step. Our proofs hold for any stream oblivious buffer update policy including FIFO and the widely used reservoir sampling policy (Vitter, 1985; Zhao et al., 2011)1.\nTo complement our online to batch conversion bounds, we also provide a memory efficient online learning algorithm that works with bounded buffers. Although our algorithm is constrained to observe and learn using the finite-buffer penalties L\u0302buft alone, we are still able to provide high confidence regret bounds with respect to the all-pairs penalty functions L\u0302t. We note that Zhao et al. (2011) also propose an algorithm that uses finite buffers and claim an all-pairs regret bound for the same. However, their regret bound does not hold due to a subtle mistake in their proof.\nWe also provide empirical validation of our proposed online learning algorithm on AUC maximization tasks and show that our algorithm performs competitively with that of (Zhao et al., 2011), in addition to being able to offer theoretical regret bounds.\nOur Contributions:\n(a) We provide a generic online-to-batch conversion technique for higher-order supervised learning problems offering bounds that are sharper than those of (Wang et al., 2012).\n(b) We obtain fast convergence rates when loss functions are strongly convex.\n(c) We analyze online learning algorithms that are constrained to learn using a finite buffer.\n(d) We propose a novel online learning algorithm that works with finite buffers but is able to provide a high confidence regret bound with respect to the all-pairs penalty functions."}, {"heading": "2. Problem Setup", "text": "For ease of exposition, we introduce an online learning model for higher order supervised learning problems in this section; concrete learning instances such as AUC maximization and metric learning are given in Section 6. For sake of simplicity, we restrict ourselves to pairwise problems in this paper; our techniques can be readily extended to higher order problems as well.\nFor pairwise learning problems, our goal is to learn a\n1Independently, Wang et al. (2013) also extended their proof to give similar guarantees. However, their bounds hold only for the FIFO update policy and have worse dependence on dimensionality in several cases (see Section 5).\nreal valued bivariate function h\u2217 : X \u00d7 X \u2192 Y, where h\u2217 \u2208 H, under some loss function ` : H\u00d7Z\u00d7Z \u2192 R+ where Z = X \u00d7 Y.\nThe online learning algorithm is given sequential access to a stream of elements z1, z2, . . . , zn chosen i.i.d. from the domain Z. Let Zt := {z1, . . . , zt}. At each time step t = 2 . . . n, the algorithm posits a hypothesis ht\u22121 \u2208 H upon which the element zt is revealed and the algorithm incurs the following penalty:\nL\u0302t(ht\u22121) = 1\nt\u2212 1 t\u22121\u2211 \u03c4=1 `(ht\u22121, zt, z\u03c4 ). (1)\nFor any h \u2208 H, we define its expected risk as:\nL(h) := E z,z\u2032\nJ`(h, z, z\u2032)K . (2)\nOur aim is to present an ensemble h1, . . . , hn\u22121 such that the expected risk of the ensemble is small. More specifically, we desire that, for some small > 0,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + ,\nwhere h\u2217 = arg min h\u2208H L(h) is the population risk minimizer. Note that this allows us to do hypothesis selection in a way that ensures small expected risk. Specifically, if one chooses a hypothesis as h\u0302 :=\n1 (n\u22121) \u2211n t=2 ht\u22121 (for convex `) or h\u0302 := arg min\nt=2,...,n L(ht)\nthen we have L(h\u0302) \u2264 L(h\u2217) + .\nSince the model presented above requires storing all previously seen points, it becomes unusable in large scale learning scenarios. Instead, in practice, a sketch of the stream is maintained in a buffer B of capacity s. At each step, the penalty is now incurred only on the pairs {(zt, z) : z \u2208 Bt} where Bt is the state of the buffer at time t. That is,\nL\u0302buft (ht\u22121) = 1 |Bt| \u2211 z\u2208Bt `(ht\u22121, zt, z). (3)\nWe shall assume that the buffer is updated at each step using some stream oblivious policy such as FIFO or Reservoir sampling (Vitter, 1985) (see Section 5).\nIn Section 3, we present online-to-batch conversion bounds for online learning algorithms that give regret bounds w.r.t. penalty functions given by (1). In Section 4, we extend our analysis to algorithms using strongly convex loss functions. In Section 5 we provide generalization error bounds for algorithms that give regret bounds w.r.t. finite-buffer penalty functions given by (3). Finally in section 7 we present a novel memory efficient online learning algorithm with regret bounds."}, {"heading": "3. Online to Batch Conversion Bounds for Bounded Loss Functions", "text": "We now present our generalization bounds for algorithms that provide regret bounds with respect to the all-pairs loss functions (see Eq. (1)). Our results give tighter bounds and have a much better dependence on input dimensionality than the bounds given by Wang et al. (2012). See Section 3.1 for a detailed comparison.\nAs was noted by (Wang et al., 2012), the generalization error analysis of online learning algorithms in this setting does not follow from existing techniques for first-order problems (such as (Cesa-Bianchi et al., 2001; Kakade & Tewari, 2008)). The reason is that the terms Vt = L\u0302t(ht\u22121) do not form a martingale due to the intersection of training samples in Vt and V\u03c4 , \u03c4 < t.\nOur technique, that aims to utilize the Rademacher complexities of function classes in order to get tighter bounds, faces yet another challenge at the symmetrization step, a precursor to the introduction of Rademacher complexities. It turns out that, due to the coupling between the \u201chead\u201d variable zt and the \u201ctail\u201d variables z\u03c4 in the loss function L\u0302t, a standard symmetrization between true z\u03c4 and ghost z\u0303\u03c4 samples does not succeed in generating Rademacher averages and instead yields complex looking terms.\nMore specifically, suppose we have true variables zt and ghost variables z\u0303t and are in the process of bounding the expected excess risk by analyzing expressions of the form\nEorig = `(ht\u22121, zt, z\u03c4 )\u2212 `(ht\u22121, z\u0303t, z\u0303\u03c4 ).\nPerforming a traditional symmetrization of the variables z\u03c4 with z\u0303\u03c4 would give us expressions of the form\nEsymm = `(ht\u22121, zt, z\u0303\u03c4 )\u2212 `(ht\u22121, z\u0303t, z\u03c4 ).\nAt this point the analysis hits a barrier since unlike first order situations, we cannot relate Esymm to Eorig by means of introducing Rademacher variables.\nWe circumvent this problem by using a technique that we call Symmetrization of Expectations. The technique allows us to use standard symmetrization to obtain Rademacher complexities. More specifically, we analyze expressions of the form\nE\u2032orig = E z J`(ht\u22121, z, z\u03c4 )K\u2212 E z J`(ht\u22121, z, z\u0303\u03c4 )K\nwhich upon symmetrization yield expressions such as\nE\u2032symm = E z J`(ht\u22121, z, z\u0303\u03c4 )K\u2212 E z J`(ht\u22121, z, z\u03c4 )K\nwhich allow us to introduce Rademacher variables since E\u2032symm = \u2212E\u2032orig. This idea is exploited by the\nlemma given below that relates the expected risk of the ensemble to the penalties incurred during the online learning process. In the following we use the following extension of Rademacher averages (Kakade et al., 2008) to bivariate function classes:\nRn(H) = E t sup h\u2208H 1 n n\u2211 \u03c4=1 \u03c4h(z, z\u03c4 ) |\nwhere the expectation is over \u03c4 , z and z\u03c4 . We shall denote composite function classes as follows : ` \u25e6H := {(z, z\u2032) 7\u2192 `(h, z, z\u2032), h \u2208 H}. Lemma 1. Let h1, . . . , hn\u22121 be an ensemble of hypotheses generated by an online learning algorithm working with a bounded loss function ` : H\u00d7Z \u00d7Z \u2192 [0, B]. Then for any \u03b4 > 0, we have with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 1 n\u2212 1 n\u2211 t=2 L\u0302t(ht\u22121)\n+ 2\nn\u2212 1 n\u2211 t=2 Rt\u22121(` \u25e6 H) + 3B \u221a log n\u03b4 n\u2212 1 .\nThe proof of the lemma involves decomposing the excess risk term into a martingale difference sequence and a residual term in a manner similar to (Wang et al., 2012). The martingale sequence, being a bounded one, is shown to converge using the AzumaHoeffding inequality. The residual term is handled using uniform convergence techniques involving Rademacher averages. The complete proof of the lemma is given in the Appendix A.\nSimilar to Lemma 1, the following converse relation between the population and empirical risk of the population risk minimizer h\u2217 can also be shown.\nLemma 2. For any \u03b4 > 0, we have with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 L\u0302t(h\u2217) \u2264 L(h\u2217) + 2 n\u2212 1 n\u2211 t=2 Rt\u22121(` \u25e6 H)\n+3B \u221a log 1\u03b4 n\u2212 1 .\nAn online learning algorithm will be said to have an all-pairs regret bound Rn if it presents an ensemble h1, . . . , hn\u22121 such that\nn\u2211 t=2 L\u0302t(ht\u22121) \u2264 inf h\u2208H n\u2211 t=2 L\u0302t(h) + Rn.\nSuppose we have an online learning algorithm with a regret bound Rn. Then combining Lemmata 1 and\n2 gives us the following online to batch conversion bound:\nTheorem 3. Let h1, . . . , hn\u22121 be an ensemble of hypotheses generated by an online learning algorithm working with a B-bounded loss function ` that guarantees a regret bound of Rn. Then for any \u03b4 > 0, we have with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + 4 n\u2212 1 n\u2211 t=2 Rt\u22121(` \u25e6 H)\n+ Rn n\u2212 1 + 6B \u221a log n\u03b4 n\u2212 1 .\nAs we shall see in Section 6, for several learning problems, the Rademacher complexities behave as Rt\u22121(`\u25e6 H) \u2264 Cd \u00b7 O ( 1\u221a t\u22121 ) where Cd is a constant dependent only on the dimension d of the input space and the O (\u00b7) notation hides constants dependent on the domain size and the loss function. This allows us to bound the excess risk as follows:\u2211n\nt=2 L(ht\u22121) n\u2212 1 \u2264 L(h \u2217) + Rn n\u2212 1 +O\n( Cd + \u221a log(n/\u03b4)\u221a n\u2212 1 ) .\nHere, the error decreases with n at a standard 1/ \u221a n rate (up to a \u221a\nlog n factor), similar to that obtained by Wang et al. (2012). However, for several problems the above bound can be significantly tighter than those offered by covering number based arguments. We provide below a detailed comparison of our results with those of Wang et al. (2012)."}, {"heading": "3.1. Discussion on the nature of our bounds", "text": "As mentioned above, our proof enables us to use Rademacher complexities which are typically easier to analyze and provide tighter bounds (Kakade et al., 2008). In particular, as shown in Section 6, for L2 regularized learning formulations, the Rademacher complexities are dimension independent i.e. Cd = 1. Consequently, unlike the bounds of (Wang et al., 2012) that have a linear dependence on d, our bound becomes independent of the input space dimension. For sparse learning formulations with L1 or trace norm regularization, we have Cd = \u221a log d giving us a mild dependence on the input dimensionality.\nOur bounds are also tighter that those of (Wang et al., 2012) in general. Whereas we provide a confidence bound of \u03b4 < exp ( \u2212n 2 + log n ) , (Wang et al., 2012)\noffer a weaker bound \u03b4 < (1/ )d exp ( \u2212n 2 + log n ) .\nAn artifact of the proof technique of (Wang et al., 2012) is that their proof is required to exclude a constant fraction of the ensemble (h1, . . . , hcn) from the\nanalysis, failing which their bounds turn vacuous. Our proof on the other hand is able to give guarantees for the entire ensemble.\nIn addition to this, as the following sections show, our proof technique enjoys the flexibility of being extendable to give fast convergence guarantees for strongly convex loss functions as well as being able to accommodate learning algorithms that use finite buffers."}, {"heading": "4. Fast Convergence Rates for Strongly Convex Loss Functions", "text": "In this section we extend results of the previous section to give fast convergence guarantees for online learning algorithms that use strongly convex loss functions of the following form: `(h, z, z\u2032) = g(\u3008h, \u03c6(z, z\u2032)\u3009) + r(h), where g is a convex function and r(h) is a \u03c3-strongly convex regularizer (see Section 6 for examples) i.e. \u2200h1, h2 \u2208 H and \u03b1 \u2208 [0, 1], we have\nr(\u03b1h1 + (1\u2212 \u03b1)h2) \u2264 \u03b1r(h1) + (1\u2212 \u03b1)r(h2)\n\u2212 \u03c3 2 \u03b1(1\u2212 \u03b1) \u2016h1 \u2212 h2\u20162 .\nFor any norm \u2016\u00b7\u2016, let \u2016\u00b7\u2016\u2217 denote its dual norm. Our analysis reduces the pairwise problem to a first order problem and a martingale convergence problem. We require the following fast convergence bound in the standard first order batch learning setting:\nTheorem 4. Let F be a closed and convex set of functions over X . Let \u2118(f,x) = p(\u3008f, \u03c6(x)\u3009) + r(f), for a \u03c3-strongly convex function r, be a loss function with P and P\u0302 as the associated population and empirical risk functionals and f\u2217 as the population risk minimizer. Suppose \u2118 is L-Lipschitz and \u2016\u03c6(x)\u2016\u2217 \u2264 R,\u2200x \u2208 X . Then w.p. 1\u2212 \u03b4, for any > 0, we have for all f \u2208 F ,\nP(f)\u2212 P(f\u2217) \u2264 (1 + ) ( P\u0302(f)\u2212 P\u0302(f\u2217) ) +\nC\u03b4 \u03c3n\nwhere C\u03b4 = C 2 d \u00b7 (4(1 + )LR)2 (32 + log(1/\u03b4)) and Cd is the dependence of the Rademacher complexity of the class F on the input dimensionality d.\nThe above theorem is a minor modification of a similar result by Sridharan et al. (2008) and the proof (given in Appendix B) closely follows their proof as well. We can now state our online to batch conversion result for strongly convex loss functions.\nTheorem 5. Let h1, . . . , hn\u22121 be an ensemble of hypotheses generated by an online learning algorithm working with a B-bounded, L-Lipschitz and \u03c3-strongly convex loss function `. Further suppose the learning algorithm guarantees a regret bound of Rn. Let Vn =\nmax { Rn, 2C 2 d log n log(n/\u03b4) } Then for any \u03b4 > 0, we have with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + Rn n\u2212 1\n+Cd \u00b7 O\n(\u221a Vn log n log(n/\u03b4)\nn\u2212 1\n) ,\nwhere the O (\u00b7) notation hides constants dependent on domain size and the loss function such as L,B and \u03c3.\nThe decomposition of the excess risk in this case is not made explicitly but rather emerges as a side-effect of the proof progression. The proof starts off by applying Theorem 4 to the hypothesis in each round with the following loss function \u2118(h, z\u2032) := E\nz J`(h, z, z\u2032)K.\nApplying the regret bound to the resulting expression gives us a martingale difference sequence which we then bound using Bernstein-style inequalities and a proof technique from (Kakade & Tewari, 2008). The complete proof is given in Appendix C.\nWe now note some properties of this result. The effective dependence of the above bound on the input dimensionality is C2d since the expression \u221a Vn hides a Cd term. We have C 2 d = 1 for non sparse learning formulations and C2d = log d for sparse learning formulations. We note that our bound matches that of Kakade & Tewari (2008) (for first-order learning problems) up to a logarithmic factor."}, {"heading": "5. Analyzing Online Learning Algorithms that use Finite Buffers", "text": "In this section, we present our online to batch conversion bounds for algorithms that work with finitebuffer loss functions L\u0302buft . Recall that an online learning algorithm working with finite buffers incurs a loss L\u0302buft (h) = 1|Bt| \u2211 z\u2208Bt `(ht\u22121, zt, z) at each step where Bt is the state of the buffer at time t.\nAn online learning algorithm will be said to have a finite-buffer regret bound Rbufn if it presents an ensemble h1, . . . , hn\u22121 such that\nn\u2211 t=2 L\u0302buft (ht\u22121)\u2212 inf h\u2208H n\u2211 t=2 L\u0302buft (h) \u2264 Rbufn .\nFor our guarantees to hold, we require the buffer update policy used by the learning algorithm to be stream oblivious. More specifically, we require the buffer update rule to decide upon the inclusion of a particular point zi in the buffer based only on its stream index i \u2208 [n]. Popular examples of stream oblivious policies include Reservoir sampling (Vitter, 1985) (referred to\nas RS henceforth) and FIFO. Stream oblivious policies allow us to decouple buffer construction randomness from training sample randomness which makes analysis easier; we leave the analysis of stream aware buffer update policies as a topic of future research.\nIn the above mentioned setting, we can prove the following online to batch conversion bounds:\nTheorem 6. Let h1, . . . , hn\u22121 be an ensemble of hypotheses generated by an online learning algorithm working with a finite buffer of capacity s and a Bbounded loss function `. Moreover, suppose that the algorithm guarantees a regret bound of Rbufn . Then for any \u03b4 > 0, we have with probability at least 1\u2212 \u03b4,\u2211n\nt=2 L(ht\u22121) n\u2212 1 \u2264 L(h\u2217) + R buf n n\u2212 1 +O ( Cd\u221a s +B \u221a log n\u03b4 s ) If the loss function is Lipschitz and strongly convex as well, then with the same confidence, we have\u2211n\nt=2 L(ht\u22121) n\u2212 1 \u2264 L(h\u2217) + R buf n n\u2212 1 + Cd \u00b7 O\n(\u221a Wn log n \u03b4\nsn\n)\nwhere Wn = max { Rbufn , 2C2dn log(n/\u03b4) s } and Cd is the dependence of Rn(H) on the input dimensionality d.\nThe above bound guarantees an excess error of O\u0303 (1/s) for algorithms (such as Follow-the-leader (Hazan et al., 2006)) that offer logarithmic regret Rbufn = O (log n). We stress that this theorem is not a direct corollary of our results for the infinite buffer case (Theorems 3 and 5). Instead, our proofs require a more careful analysis of the excess risk in order to accommodate the finiteness of the buffer and the randomness (possibly) used in constructing it.\nMore specifically, care needs to be taken to handle randomized buffer update policies such as RS which introduce additional randomness into the analysis. A naive application of techniques used to prove results for the unbounded buffer case would result in bounds that give non trivial generalization guarantees only for large buffer sizes such as s = \u03c9( \u221a n). Our bounds, on the other hand, only require s = \u03c9\u0303(1).\nKey to our proofs is a conditioning step where we first analyze the conditional excess risk by conditioning upon randomness used by the buffer update policy. Such conditioning is made possible by the stream-oblivious nature of the update policy and thus, stream-obliviousness is required by our analysis. Subsequently, we analyze the excess risk by taking expectations over randomness used by the buffer update policy. The complete proofs of both parts of Theorem 6 are given in Appendix D.\nNote that the above results only require an online learning algorithm to provide regret bounds w.r.t. the finite-buffer penalties L\u0302buft and do not require any regret bounds w.r.t the all-pairs penalties L\u0302t.\nFor instance, the finite buffer based online learning algorithms OAMseq and OAMgra proposed in (Zhao et al., 2011) are able to provide a regret bound w.r.t. L\u0302buft (Zhao et al., 2011, Lemma 2) but are not able to do so w.r.t the all-pairs loss function (see Section 7 for a discussion). Using Theorem 6, we are able to give a generalization bound for OAMseq and OAMgra and hence explain the good empirical performance of these algorithms as reported in (Zhao et al., 2011). Note that Wang et al. (2013) are not able to analyze OAMseq and OAMgra since their analysis is restricted to algorithms that use the (deterministic) FIFO update policy whereas OAMseq and OAMgra use the (randomized) RS policy of Vitter (1985)."}, {"heading": "6. Applications", "text": "In this section we make explicit our online to batch conversion bounds for several learning scenarios and also demonstrate their dependence on input dimensionality by calculating their respective Rademacher complexities. Recall that our definition of Rademacher complexity for a pairwise function class is given by,\nRn(H) = E t sup h\u2208H 1 n n\u2211 \u03c4=1 \u03c4h(z, z\u03c4 ) | .\nFor our purposes, we would be interested in the Rademacher complexities of composition classes of the form ` \u25e6 H := {(z, z\u2032) 7\u2192 `(h, z, z\u2032), h \u2208 H} where ` is some Lipschitz loss function. Frequently we have `(h, z, z\u2032) = \u03c6 (h(x,x\u2032)Y (y, y\u2032)) where Y (y, y\u2032) = y\u2212y\u2032 or Y (y, y\u2032) = yy\u2032 and \u03c6 : R \u2192 R is some margin loss function (Steinwart & Christmann, 2008). Suppose \u03c6 is L-Lipschitz and Y = sup\ny,y\u2032\u2208Y |Y (y, y\u2032)|. Then we have\nTheorem 7. Rn(` \u25e6 H) \u2264 LYRn(H).\nThe proof uses standard contraction inequalities and is given in Appendix E. This reduces our task to computing the values of Rn(H) which we do using a two stage proof technique (see Appendix F). For any subset X of a Banach space and any norm \u2016\u00b7\u2016p, we define \u2016X\u2016p := sup\nx\u2208X \u2016x\u2016p. Let the domain X \u2282 Rd.\nAUC maximization (Zhao et al., 2011): the goal here is to maximize the area under the ROC curve for a linear classification problem where the hypothesis space W \u2282 Rd. We have hw(x,x\u2032) = w>x\u2212w>x\u2032 and `(hw, z, z \u2032) = \u03c6 ((y \u2212 y\u2032)hw(x,x\u2032)) where \u03c6 is the\nhinge loss. In case our classifiers are Lp regularized for p > 1, we can show thatRn(W) \u2264 2 \u2016X\u2016q \u2016W\u2016p \u221a q\u22121 n where q = p/(p\u2212 1). Using the sparsity promoting L1 regularizer gives us Rn(W) \u2264 2 \u2016X\u2016\u221e \u2016W\u20161 \u221a e log d n . Note that we obtain dimension independence, for example when the classifiers are L2 regularized which allows us to bound the Rademacher complexities of kernelized function classes for bounded kernels as well.\nMetric learning (Jin et al., 2009): the goal here is to learn a Mahalanobis metric MW(x,x\n\u2032) = (x \u2212 x\u2032)>W(x \u2212 x\u2032) using the loss function `(W, z, z\u2032) = \u03c6 ( yy\u2032 ( 1\u2212M2W(x,x\u2032) )) for a hypothesis class W \u2282 Rd\u00d7d. In this case it is possible to use a variety of mixed norm \u2016\u00b7\u2016p,q and Schatten norm \u2016\u00b7\u2016S(p) regularizations on matrices in the hypothesis class. In case we use trace norm regularization on the ma-\ntrix class, we get Rn(W) \u2264 \u2016X\u201622 \u2016W\u2016S(1) \u221a e log d n . The (2, 2)-norm regularization offers a dimension in-\ndependent bound Rn(W) \u2264 \u2016X\u201622 \u2016W\u20162,2 \u221a 1 n . The mixed (2, 1)-norm regularization offers Rn(W) \u2264 \u2016X\u20162 \u2016X\u2016\u221e \u2016W\u20162,1 \u221a e log d n .\nMultiple kernel learning (Kumar et al., 2012): the goal here is to improve the SVM classification algorithm by learning a good kernel K that is a positive combination of base kernels K1, . . . ,Kp i.e. K\u00b5(x,x \u2032) = \u2211p i=1 \u00b5iKi(x,x\n\u2032) for some \u00b5 \u2208 Rp,\u00b5 \u2265 0. The base kernels are bounded, i.e. for all i, |Ki(x,x\u2032)| \u2264 \u03ba2 for all x,x\u2032 \u2208 X The notion of goodness used here is the one proposed by Balcan & Blum (2006) and involves using the loss function `(\u00b5, z, z\u2032) = \u03c6 (yy\u2032K\u00b5(x,x\n\u2032)) where \u03c6(\u00b7) is a margin loss function meant to encode some notion of alignment. The two hypothesis classes for the combination vector \u00b5 that we study are the L1 regularized unit simplex \u2206(1) = {\u00b5 : \u2016\u00b5\u20161 = 1,\u00b5 \u2265 0} and the L2 regularized unit sphere S2(1) = {\u00b5 : \u2016\u00b5\u20162 = 1,\u00b5 \u2265 0}. We are able to show the following Rademacher complexity bounds for these classes: Rn(S2(1)) \u2264 \u03ba2 \u221a p n\nand Rn(\u2206(1)) \u2264 \u03ba2 \u221a e log p n .\nThe details of the Rademacher complexity derivations for these problems and other examples such as similarity learning can be found in Appendix F."}, {"heading": "7. OLP : Online Learning with Pairwise Loss Functions", "text": "In this section, we present an online learning algorithm for learning with pairwise loss functions in a finite buffer setting. The key contribution in this section\nAlgorithm 1 RS-x : Stream Subsampling with Replacement Input: Buffer B, new point zt, buffer size s, timestep t. 1: if |B| < s then //There is space 2: B \u2190 B \u222a {zt} 3: else //Overflow situation 4: if t = s+ 1 then //Repopulation step 5: TMP\u2190 B \u222a {zt} 6: Repopulate B with s points sampled uniformly\nwith replacement from TMP. 7: else //Normal update step 8: Independently, replace each point of B with zt with probability 1/t. 9: end if\n10: end if\nAlgorithm 2 OLP : Online Learning with Pairwise Loss Functions Input: Step length scale \u03b7, Buffer size s Output: An ensemble w2, . . . ,wn \u2208 W with low regret 1: w0 \u2190 0, B \u2190 \u03c6 2: for t = 1 to n do 3: Obtain a training point zt 4: Set step length \u03b7t \u2190 \u03b7\u221at 5: wt \u2190 \u03a0W [ wt\u22121 + \u03b7t |B| \u2211 z\u2208B \u2207w`(wt\u22121, zt, z) ]\n//\u03a0W projects onto the set W 6: B \u2190 Update-buffer(B, zt, s, t) //using RS-x 7: end for 8: return w2, . . . ,wn\nis a buffer update policy that when combined with a variant of the GIGA algorithm (Zinkevich, 2003) allows us to give high probability regret bounds.\nIn previous work, Zhao et al. (2011) presented an online learning algorithm that uses finite buffers with the RS policy and proposed an all-pairs regret bound. The RS policy ensures, over the randomness used in buffer updates, that at any given time, the buffer contains a uniform sample from the preceding stream. Using this property, (Zhao et al., 2011, Lemma 2) claimed that E r L\u0302buft (ht\u22121) z = L\u0302t(ht\u22121) where the expectation is taken over the randomness used in buffer construction. However, a property such as E r L\u0302buft (h) z =\nL\u0302t(h) holds only for functions h that are either fixed or obtained independently of the random variables used in buffer updates (over which the expectation is taken). Since ht\u22121 is learned from points in the buffer itself, the above property, and consequently the regret bound, does not hold.\nWe remedy this issue by showing a relatively weaker claim; we show that with high probability we have L\u0302t(ht\u22121) \u2264 L\u0302buft (ht\u22121) + . At a high level, this claim is similar to showing uniform convergence bounds for L\u0302buft . However, the reservoir sampling algorithm is not particularly well suited to prove such uniform conver-\ngence bounds as it essentially performs sampling without replacement (see Appendix G for a discussion). We overcome this hurdle by proposing a new buffer update policy RS-x (see Algorithm 1) that, at each time step, guarantees s i.i.d. samples from the preceding stream (see Appendix H for a proof).\nOur algorithm uses this buffer update policy in conjunction with an online learning algorithm OLP (see Algorithm 2) that is a variant of the well-known GIGA algorithm (Zinkevich, 2003). We provide the following all-pairs regret guarantee for our algorithm:\nTheorem 8. Suppose the OLP algorithm working with an s-sized buffer generates an ensemble w1, . . . ,wn\u22121. Then with probability at least 1\u2212 \u03b4,\nRn n\u2212 1 \u2264 O\n( Cd \u221a log n\u03b4 s + \u221a 1 n\u2212 1 )\nSee Appendix I for the proof. A drawback of our bound is that it offers sublinear regret only for buffer sizes s = \u03c9(log n). A better regret bound for constant s or a lower-bound on the regret is an open problem."}, {"heading": "8. Experimental Evaluation", "text": "In this section we present experimental evaluation of our proposed OLP algorithm. We stress that the aim of this evaluation is to show that our algorithm, that enjoys high confidence regret bounds, also performs competitively in practice with respect to the OAMgra algorithm proposed by Zhao et al. (2011) since our results in Section 5 show that OAMgra does enjoy good\ngeneralization guarantees despite the lack of an allpairs regret bound.\nIn our experiments, we adapted the OLP algorithm to the AUC maximization problem and compared it with OAMgra on 18 different benchmark datasets. We used 60% of the available data points up to a maximum of 20000 points to train both algorithms. We refer the reader to Appendix J for a discussion on the implementation of the RS-x algorithm. Figure 1 presents the results of our experiments on 4 datasets across 5 random training/test splits. Results on other datasets can be found in Appendix K. The results demonstrate that OLP performs competitively to OAMgra while in some cases having slightly better performance for small buffer sizes."}, {"heading": "9. Conclusion", "text": "In this paper we studied the generalization capabilities of online learning algorithms for pairwise loss functions from several different perspectives. Using the method of Symmetrization of Expectations, we first provided sharp online to batch conversion bounds for algorithms that offer all-pairs regret bounds. Our results for bounded and strongly convex loss functions closely match their first order counterparts. We also extended our analysis to algorithms that are only able to provide finite-buffer regret bounds using which we were able to explain the good empirical performance of some existing algorithms. Finally we presented a new memory-efficient online learning algorithm that is able to provide all-pairs regret bounds in addition to performing well empirically.\nSeveral interesting directions can be pursued for future work, foremost being the development of online learning algorithms that can guarantee sub-linear regret at constant buffer sizes or else a regret lower bound for finite buffer algorithms. Secondly, the idea of a stream-aware buffer update policy is especially interesting both from an empirical as well as theoretical point of view and would possibly require novel proof techniques for its analysis. Lastly, scalability issues that arise when working with higher order loss functions also pose an interesting challenge."}, {"heading": "Acknowledgment", "text": "The authors thank the anonymous referees for comments that improved the presentation of the paper. PK is supported by the Microsoft Corporation and Microsoft Research India under a Microsoft Research India Ph.D. fellowship award."}, {"heading": "A. Proof of Lemma 1", "text": "Lemma 9 (Lemma 1 restated). Let h1, . . . , hn\u22121 be an ensemble of hypotheses generated by an online learning algorithm working with a bounded loss function ` : H\u00d7 Z \u00d7 Z \u2192 [0, B]. Then for any \u03b4 > 0, we have with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 1 n\u2212 1 n\u2211 t=2 L\u0302t(ht\u22121)\n+ 2\nn\u2212 1 n\u2211 t=2 Rt\u22121(` \u25e6 H) + 3B \u221a log n\u03b4 n\u2212 1 .\nProof. As a first step, we decompose the excess risk in a manner similar to (Wang et al., 2012). For any h \u2208 H let\nL\u0303t(h) := E zt\nr L\u0302t(h) \u2223\u2223\u2223Zt\u22121z . This allows us to decompose the excess risk as follows:\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121)\u2212 L\u0302t(ht\u22121)\n= 1\nn\u2212 1  n\u2211 t=2 L(ht\u22121)\u2212 L\u0303t(ht\u22121)\ufe38 \ufe37\ufe37 \ufe38 Pt + L\u0303(ht\u22121)\u2212 L\u0302t(ht\u22121)\ufe38 \ufe37\ufe37 \ufe38 Qt  . By construction, we have E\nzt\nq Qt|Zt\u22121 y = 0 and hence\nthe sequence Q2, . . . , Qn forms a martingale difference sequence. Since |Qt| \u2264 B as the loss function is bounded, an application of the Azuma-Hoeffding inequality shows that with probability at least 1\u2212 \u03b4\n1\nn\u2212 1 n\u2211 t=2 Qt \u2264 B \u221a 2 log 1\u03b4 n\u2212 1 . (4)\nWe now analyze each term Pt individually. By linearity of expectation, we have for a ghost sample Z\u0303t\u22121 = {z\u03031, . . . , z\u0303t\u22121},\nL(ht\u22121) = E Z\u0303t\u22121\nt 1\nt\u2212 1 t\u22121\u2211 \u03c4=1 E z J`(ht\u22121, z, z\u0303\u03c4 )K | . (5)\nThe expression of L(ht\u22121) as a nested expectation is the precursor to performing symmetrization with expectations and plays a crucial role in overcoming coupling problems. This allows us to write Pt as\nPt = E Z\u0303t\u22121\nt 1\nt\u2212 1 t\u22121\u2211 \u03c4=1 E z J`(ht\u22121, z, z\u0303\u03c4 )K | \u2212 L\u0303t(ht\u22121)\n\u2264 sup h\u2208H\n[ E\nZ\u0303t\u22121\nt 1\nt\u2212 1 t\u22121\u2211 \u03c4=1 E z J`(h, z, z\u0303\u03c4 )K | \u2212 L\u0303t(h) ] \ufe38 \ufe37\ufe37 \ufe38\ngt(z1,...,zt\u22121)\n.\nSince L\u0303t(h) = E z r 1 t\u22121 \u2211t\u22121 \u03c4=1 `(h, z, z\u03c4 ) \u2223\u2223\u2223Zt\u22121z and ` is bounded, the expression gt(z1, . . . , zt\u22121) can have a variation of at most B/(t\u22121) when changing any of its (t\u22121) variables. Hence an application of McDiarmid\u2019s inequality gives us, with probability at least 1\u2212 \u03b4,\ngt(z1, . . . , zt\u22121) \u2264 E Zt\u22121 Jgt(z1, . . . , zt\u22121)K+B\n\u221a log 1\u03b4\n2(t\u2212 1) .\nFor any h \u2208 H, z\u2032 \u2208 Z, let \u2118(h, z\u2032) := 1t\u22121Ez J`(h, z, z \u2032)K. Then we can write E Zt\u22121 Jg(z1, . . . , zt\u22121)K as\nE Zt\u22121 t sup h\u2208H\n[ E\nZ\u0303t\u22121 t t\u22121\u2211 \u03c4=1 \u2118(h, z\u0303\u03c4 ) | \u2212 t\u22121\u2211 \u03c4=1 \u2118(h, z\u03c4 )\n]|\n\u2264 E Zt\u22121,Z\u0303t\u22121 t sup h\u2208H [ t\u22121\u2211 \u03c4=1 \u2118(h, z\u0303\u03c4 )\u2212 t\u22121\u2211 \u03c4=1 \u2118(h, z\u03c4 ) ]|\n= E Zt\u22121,Z\u0303t\u22121,{ \u03c4} t sup h\u2208H [ t\u22121\u2211 \u03c4=1 \u03c4 (\u2118(h, z\u0303\u03c4 )\u2212 \u2118(h, z\u03c4 )) ]|\n\u2264 2 t\u2212 1 E Zt\u22121,{ \u03c4} t sup h\u2208H [ t\u22121\u2211 \u03c4=1 \u03c4E z J`(h, z, z\u03c4 )K ]|\n\u2264 2 t\u2212 1 E z,Zt\u22121,{ \u03c4} t sup h\u2208H [ t\u22121\u2211 \u03c4=1 \u03c4 `(h, z, z\u03c4 ) ]| = 2Rt\u22121(` \u25e6 H).\nNote that in the third step, the symmetrization was made possible by the decoupling step in Eq. (5) where we decoupled the \u201chead\u201d variable zt from the \u201ctail\u201d variables by absorbing it inside an expectation. This allowed us to symmetrize the true and ghost samples z\u03c4 and z\u0303\u03c4 in a standard manner. Thus we have, with probability at least 1\u2212 \u03b4,\nPt \u2264 2Rt\u22121(` \u25e6 H) +B\n\u221a log 1\u03b4\n2(t\u2212 1) .\nApplying a union bound on the bounds for Pt, t = 2, . . . , n gives us with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 Pt \u2264 2 n\u2212 1 n\u2211 t=2 Rt\u22121(` \u25e6 H) +B \u221a 2 log n\u03b4 n\u2212 1 .\n(6)\nAdding Equations (4) and (6) gives us the result."}, {"heading": "B. Proof of Theorem 4", "text": "Theorem 10 (Theorem 4 restated). Let F be a closed and convex set of functions over X . Let \u2118(f,x) = p(\u3008f, \u03c6(x)\u3009) + r(f), for a \u03c3-strongly convex function\nr, be a loss function with P and P\u0302 as the associated population and empirical risk functionals and f\u2217 as the population risk minimizer. Suppose \u2118 is L-Lipschitz and \u2016\u03c6(x)\u2016\u2217 \u2264 R,\u2200x \u2208 X . Then w.p. 1 \u2212 \u03b4, for any > 0, we have for all f \u2208 F ,\nP(f)\u2212 P(f\u2217) \u2264 (1 + ) ( P\u0302(f)\u2212 P\u0302(f\u2217) ) +\nC\u03b4 \u03c3n\nwhere C\u03b4 = C 2 d \u00b7 (4(1 + )LR)2 (32 + log(1/\u03b4)) and Cd is the dependence of the Rademacher complexity of the class F on the input dimensionality d.\nProof. We begin with a lemma implicit in the proof of Theorem 1 in (Sridharan et al., 2008). For the function class F and loss function \u2118 as above, define a new loss function \u00b5 : (f,x) 7\u2192 \u2118(f,x) \u2212 \u2118(f\u2217,x) with M and M\u0302 as the associated population and empirical risk functionals. Let r =\n4L2R2C2d(32+log(1/\u03b4)) \u03c3n . Then we\nhave the following\nLemma 11. For any > 0, with probability at least 1\u2212 \u03b4, the following happens\n1. For all f \u2208 F such that M(f) \u2264 16 ( 1 + 1 )2 r,\nwe have M(f) \u2264 M\u0302(f) + 4 ( 1 + 1 ) r.\n2. For all f \u2208 F such that M(f) > 16 ( 1 + 1 )2 r,\nwe have M(f) \u2264 (1 + )M\u0302(f).\nThe difference in our proof technique lies in the way we combine these two cases. We do so by proving the following two simple results.\nLemma 12. For all f s.t. M(f) \u2264 16 ( 1 + 1 )2 r, we\nhave M(f) \u2264 (1 + ) ( M\u0302(f) + 4 ( 1 + 1 ) r ) .\nProof. We notice that for all f \u2208 F , we have M(f) = P(f)\u2212P(f\u2217) \u2265 0. Thus, using Lemma 11, Part 1, we have M\u0302(f) + 4 ( 1 + 1 ) r \u2265 M(f) \u2265 0. Since for any a, > 0, we have a \u2264 (1 + )a, the result follows.\nLemma 13. For all f s.t. M(f) > 16 ( 1 + 1 )2 r, we\nhave M(f) \u2264 (1 + ) ( M\u0302(f) + 4 ( 1 + 1 ) r ) .\nProof. We use the fact that r > 0 and thus 4(1 + ) ( 1 + 1 ) r > 0 as well. The result then follows from an application of Part 2 of Lemma 11.\nFrom the definition of the loss function \u00b5, we have for any f \u2208 F , M(f) = P(f) \u2212 P(f\u2217) and M\u0302(f) = P\u0302(f) \u2212 P\u0302(f\u2217). Combining the above lemmata with this observation completes the proof."}, {"heading": "C. Proof of Theorem 5", "text": "Theorem 14 (Theorem 5 restated). Let h1, . . . , hn\u22121 be an ensemble of hypotheses generated by an online learning algorithm working with a B-bounded, LLipschitz and \u03c3-strongly convex loss function `. Further suppose the learning algorithm guarantees a regret bound of Rn. Let Vn = max { Rn, 2C 2 d log n log(n/\u03b4)\n} Then for any \u03b4 > 0, we have with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + Rn n\u2212 1\n+Cd \u00b7 O\n(\u221a Vn log n log(n/\u03b4)\nn\u2212 1\n) ,\nwhere the O (\u00b7) notation hides constants dependent on domain size and the loss function such as L,B and \u03c3.\nProof. The decomposition of the excess risk shall not be made explicitly in this case but shall emerge as a side-effect of the proof progression. Consider the loss function \u2118(h, z\u2032) := E\nz J`(h, z, z\u2032)K with P and P\u0302 as\nthe associated population and empirical risk functionals. Clearly, if ` is L-Lipschitz and \u03c3-strongly convex then so is \u2118. As Equation (5) shows, for any h \u2208 H, P(h) = L(h). Also it is easy to see that for any Zt\u22121, P\u0302(h) = L\u0303t(h). Applying Theorem 4 on ht\u22121 with the loss function \u2118 gives us w.p. 1\u2212 \u03b4,\nL(ht\u22121)\u2212 L(h\u2217) \u2264 (1 + ) ( L\u0303t(ht\u22121)\u2212 L\u0303t(h\u2217) ) +\nC\u03b4 \u03c3(t\u2212 1)\nwhich, upon summing across time steps and taking a union bound, gives us with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + C(\u03b4/n) logn \u03c3(n\u2212 1)\n+ 1 +\nn\u2212 1 n\u2211 t=2 ( L\u0303t(ht\u22121)\u2212 L\u0303t(h\u2217) ) .\nLet \u03bet := ( L\u0303t(ht\u22121)\u2212 L\u0303t(h\u2217) ) \u2212 ( L\u0302t(ht\u22121)\u2212 L\u0302t(h\u2217) ) .\nThen using the regret bound Rn we can write,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + 1 + n\u2212 1\n( Rn +\nn\u2211 t=2 \u03bet\n)\n+ C(\u03b4/n) logn\n\u03c3(n\u2212 1) .\nWe now use Bernstein type inequalities to bound the sum \u2211n t=2 \u03bet using a proof technique used in (Kakade & Tewari, 2008; Cesa-Bianchi & Gentile, 2008). We first note some properties of the sequence below.\nLemma 15. The sequence \u03be2, . . . , \u03ben is a bounded martingale difference sequence with bounded conditional variance.\nProof. That \u03bet is a martingale difference sequence follows by construction: we can decompose the term \u03bet = \u03c6t \u2212 \u03c8t where \u03c6t = L\u0303t(ht\u22121) \u2212 L\u0302t(ht\u22121) and \u03c8t = L\u0303t(h\u2217) \u2212 L\u0302t(h\u2217), both of which are martingale difference sequences with respect to the common filtration F = {Fn : n = 0, 1, . . .} where Fn = \u03c3 (zi : i = 1, . . . , n).\nSince the loss function takes values in [0, B], we have |\u03bet| \u2264 2B which proves that our sequence is bounded.\nTo prove variance bounds for the sequence, we first use the Lipschitz properties of the loss function to get\n\u03bet = ( L\u0303t(ht\u22121)\u2212 L\u0303t(h\u2217) ) \u2212 ( L\u0302t(ht\u22121)\u2212 L\u0302t(h\u2217) ) \u2264 2L \u2016ht\u22121 \u2212 h\u2217\u2016 .\nRecall that the hypothesis space is embedded in a Banach space equipped with the norm \u2016\u00b7\u2016. Thus we have E q \u03be2t \u2223\u2223Zt\u22121y \u2264 4L2 \u2016ht\u22121 \u2212 h\u2217\u20162. Now using \u03c3-strong convexity of the loss function we have\nL(ht\u22121) + L(h\u2217) 2\n\u2265 L ( ht\u22121 + h \u2217\n2\n) + \u03c3\n8 \u2016ht\u22121 \u2212 h\u2217\u20162\n\u2265 L(h\u2217) + \u03c3 8 \u2016ht\u22121 \u2212 h\u2217\u20162 .\nLet \u03c32t := 16L2 \u03c3 (L(ht\u22121)\u2212 L(h \u2217)). Combining the two inequalities we get E q \u03be2t \u2223\u2223Zt\u22121y \u2264 \u03c32t .\nWe note that although (Kakade & Tewari, 2008) state their result with a requirement that the loss function be strongly convex in a point wise manner, i.e., for all z, z\u2032 \u2208 Z, the function `(h, z, z\u2032) be strongly convex in h, they only require the result in expectation. More specifically, our notion of strong convexity where we require the population risk functional L(h) to be strongly convex actually suits the proof of (Kakade & Tewari, 2008) as well.\nWe now use a Bernstein type inequality for martingales proved in (Kakade & Tewari, 2008). The proof is based on a fundamental result on martingale convergence due to Freedman (1975).\nTheorem 16. Given a martingale difference sequence Xt, t = 1 . . . n that is uniformly B-bounded and has conditional variance E q X2t |X1, . . . , Xt\u22121 y \u2264 \u03c32t , we have for any \u03b4 < 1/e and n \u2265 3, with probability at least 1\u2212 \u03b4, n\u2211 t=1 Xt \u2264 max { 2\u03c3\u2217, 3B \u221a log 4 log n \u03b4 }\u221a log 4 log n \u03b4 ,\nwhere \u03c3\u2217 = \u221a\u2211n\nt=1 \u03c3 2 t .\nLet Dn = \u2211n t=2 (L(ht\u22121)\u2212 L(h\u2217)). Then we can write the variance bound as\n\u03c3\u2217 = \u221a\u221a\u221a\u221a n\u2211 t=1 \u03c32t = \u221a\u221a\u221a\u221a n\u2211 t=1 16L2 \u03c3 (L(ht\u22121)\u2212 L(h\u2217))\n= 4L \u221a Dn \u03c3 .\nThus, with probability at least 1\u2212 \u03b4, we have n\u2211 t=1 \u03bet \u2264 max { 8L \u221a Dn \u03c3 , 6B \u221a log 4 log n \u03b4 }\u221a log 4 log n \u03b4 .\nDenoting \u2206 = \u221a\nlog 4 logn\u03b4 for notational simplicity\nand using the above bound in the online to batch conversion bound gives us\nDn n\u2212 1 \u2264 1 + n\u2212 1\n( Rn + max { 8L \u221a Dn \u03c3 , 6B\u2206 } \u2206 )\n+ C(\u03b4/n) log n\n\u03c3(n\u2212 1) .\nSolving this quadratic inequality is simplified by a useful result given in (Kakade & Tewari, 2008, Lemma 4)\nLemma 17. For any s, r, d, b,\u2206 > 0 such that s \u2264 r + max { 4 \u221a ds, 6b\u2206 } \u2206,\nwe also have\ns \u2264 r + 4 \u221a dr\u2206 + max {16d, 6b}\u22062.\nUsing this result gives us a rather nasty looking expression which we simplify by absorbing constants inside the O (\u00b7) notation. We also make a simplifying adhoc assumption that we shall only set \u2208 (0, 1]. The resulting expression is given below:\nDn \u2264 (1 + )Rn +O ( C2d log n log(n/\u03b4) + log log n\n\u03b4 ) +O (\u221a( Rn + C2d log n log(n/\u03b4) ) log log n\n\u03b4\n) .\nLet Vn = max { Rn, 2C 2 d log n log (n/\u03b4) } . Concentrating only on the portion of the expression involving and ignoring the constants, we get\nRn + C2d log n log(n/\u03b4) +\n\u221a C2d log n log(n/\u03b4)\nlog\nlog n\n\u03b4\n\u2264 Rn + 2C2d log n log(n/\u03b4) \u2264 Vn + 2C2d log n log(n/\u03b4)\n\u2264 2Cd \u221a 2Vn log n log(n/\u03b4),\nwhere the second step follows since \u2264 1 and the fourth step follows by using = \u221a 2C2d logn log(n/\u03b4)\nVn \u2264 1.\nPutting this into the excess risk expression gives us\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + Rn n\u2212 1\n+ Cd \u00b7 O\n(\u221a Vn log n log(n/\u03b4)\nn\u2212 1 ) which finishes the proof."}, {"heading": "D. Generalization Bounds for Finite Buffer Algorithms", "text": "In this section we present online to batch conversion bounds for learning algorithms that work with finite buffers and are able to provide regret bounds Rbufn with respect to finite-buffer loss functions L\u0302buft .\nAlthough due to lack of space, Theorem 6 presents these bounds for bounded as well as strongly convex functions together, we prove them separately for sake of clarity. Moreover, the techniques used to prove these two results are fairly different which further motivates this. Before we begin, we present the problem setup formally and introduce necessary notation.\nIn our finite buffer online learning model, one observes a stream of elements z1, . . . , zn. A sketch of these elements is maintained in a buffer B of size s, i.e., at each step t = 2, . . . , n, the buffer contains a subset of the elements Zt\u22121 of size at most s. At each step t = 2 . . . n, the online learning algorithm posits a hypothesis ht\u22121 \u2208 H, upon which the element zt is revealed and the algorithm incurs the loss\nL\u0302buft (ht\u22121) = 1 |Bt| \u2211 z\u2208Bt `(ht\u22121, zt, z),\nwhere Bt is the state of the buffer at time t. Note that |Bt| \u2264 s. We would be interested in algorithms that are able to give a finite-buffer regret bound, i.e., for which, the proposed ensemble h1, . . . , hn\u22121 satisfies\nn\u2211 t=2 L\u0302buft (ht\u22121)\u2212 inf h\u2208H n\u2211 t=2 L\u0302buft (h) \u2264 Rbufn .\nWe assume that the buffer is updated after each step in a stream-oblivious manner. For randomized buffer update policies (such as reservoir sampling (Vitter, 1985)), we assume that we are supplied at each step with some fresh randomness rt (see examples below) along with the data point zt. Thus the data received at time t is a tuple wt = (zt, rt). We shall refer to\nthe random variables rt as auxiliary variables. It is important to note that stream obliviousness dictates that rt as a random variable is independent of zt. Let W t\u22121 := {w1, . . . ,wt\u22121} and Rt\u22121 := {r1, . . . , rt\u22121}. Note that Rt\u22121 completely decides the indices present in the buffer Bt at step t independent of Z\nt\u22121. For any h \u2208 H, define\nL\u0303buft := E zt\nr L\u0302buft \u2223\u2223\u2223W t\u22121z . D.1. Examples of Stream Oblivious Policies\nBelow we give some examples of stream oblivious policies for updating the buffer:\n1. FIFO: in this policy, the data point zt arriving at time t > s is inducted into the buffer by evicting the data point z(t\u2212s) from the buffer. Since this is a non-randomized policy, there is no need for auxiliary randomness and we can assume that rt follows the trivial law rt \u223c 1{r=1}.\n2. RS : the Reservoir Sampling policy was introduced by Vitter (1985). In this policy, at time t > s, the incoming data point zt is inducted into the buffer with probability s/t. If chosen to be induced, it results in the eviction of a random element of the buffer. In this case the auxiliary random variable is 2-tuple that follows the law\nrt = (r 1 t , r 2 t ) \u223c\n( Bernoulli (s t ) , 1 s s\u2211 i=1 1{r2=i} ) .\n3. RS-x (see Algorithm 1): in this policy, the incoming data point zt at time t > s, replaces each data point in the buffer independently with probability 1/t. Thus the incoming point has the potential to evict multiple buffer points while establishing multiple copies of itself in the buffer. In this case, the auxiliary random variable is defined by a Bernoulli process: rt = (r 1 t , r 2 t . . . , r s t ) \u223c(\nBernoulli ( 1 t ) ,Bernoulli ( 1 t ) , . . . ,Bernoulli ( 1 t )) .\n4. RS-x2 (see Algorithm 3): this is a variant of RSx in which the number of evictions is first decided by a Binomial trial and then those many random points in the buffer are replaced by the incoming data point. This can be implemented as follows: rt = (r 1 t , r 2 t ) \u223c ( Binomial ( s, 1t ) ,Perm(s)\n) where Perm(s) gives a random permutation of s elements.\nD.2. Finite Buffer Algorithms with Bounded Loss Functions\nWe shall prove the result in two steps. In the first step we shall prove the following uniform convergence style\nresult\nLemma 18. Let h1, . . . , hn\u22121 be an ensemble of hypotheses generated by an online learning algorithm working with a B-bounded loss function ` and a finite buffer of capacity s. Then for any \u03b4 > 0, we have with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 1 n\u2212 1 n\u2211 t=2 L\u0302buft (ht\u22121) +B \u221a 2 log n\u03b4 s\n+ 2\nn\u2212 1 n\u2211 t=2 Rmin{t\u22121,s}(` \u25e6 H).\nAt a high level, our proof progression shall follow that of Lemma 1. However, the execution of the proof will have to be different in order to accommodate the finiteness of the buffer and randomness used to construct it. Similarly, we shall also be able to show the following result.\nLemma 19. For any \u03b4 > 0, we have with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 L\u0302buft (h\u2217) \u2264 L(h\u2217) + 3B \u221a log n\u03b4 s\n+ 2\nn\u2212 1 n\u2211 t=2 Rmin{t\u22121,s}(` \u25e6 H).\nNote that for classes whose Rademacher averages behave as Rn(H) \u2264 Cd \u00b7 O (\n1\u221a n\n) , applying Lemma 7\ngives us Rn(`\u25e6H) \u2264 Cd \u00b7O (\n1\u221a n\n) as well which allows\nus to show\n2\nn\u2212 1 n\u2211 t=2 Rmin{t\u22121,s}(` \u25e6 H) = Cd \u00b7 O ( 1\u221a s ) .\nCombining Lemmata 18 and 19 along with the definition of bounded buffer regret Rbufn gives us the first part of Theorem 6. We prove Lemma 18 below:\nProof (of Lemma 18). We first decompose the excess risk term as before\nn\u2211 t=2 L(ht\u22121)\u2212 L\u0302buft (ht\u22121)\n= n\u2211 t=2\nL(ht\u22121)\u2212 L\u0303buft (ht\u22121)\ufe38 \ufe37\ufe37 \ufe38 Pt + L\u0303buft (ht\u22121)\u2212 L\u0302buft (ht\u22121)\ufe38 \ufe37\ufe37 \ufe38 Qt .\nBy construction, the sequence Qt forms a martingale difference sequence, i.e., E\nzt\nq Qt|Zt\u22121 y = 0 and hence\nby an application of Azuma Hoeffding inequality we have\n1\nn\u2212 1 n\u2211 t=2 Qt \u2264 B \u221a 2 log 1\u03b4 n\u2212 1 . (7)\nWe now analyze each term Pt individually. To simplify the analysis a bit we assume that the buffer update policy keeps admitting points into the buffer as long as there is space so that for t \u2264 s+ 1, the buffer contains an exact copy of the preceding stream. This is a very natural assumption satisfied by FIFO as well as reservoir sampling. We stress that our analysis works even without this assumption but requires a bit more work. In case we do make this assumption, the analysis of Lemma 1 applies directly and we have, for any t \u2264 s+ 1, with probability at least 1\u2212 \u03b4,\nPt \u2264 Rt\u22121(` \u25e6 H) +B\n\u221a log 1\u03b4\n2(t\u2212 1)\nFor t > s + 1, for an independent ghost sample {w\u03031, . . . , w\u0303t\u22121} we have,\nE W\u0303 t\u22121\nr L\u0303buft z = E W\u0303 t\u22121 u v1 s \u2211 z\u0303\u2208B\u0303t E z J`(ht\u22121, z, z\u0303)K } ~\n= E R\u0303t\u22121 u v E Z\u0303t\u22121 u v 1 s \u2211 z\u0303\u2208B\u0303t E z J`(ht\u22121, z, z\u0303)K \u2223\u2223\u2223\u2223\u2223\u2223 R\u0303t\u22121 } ~ } ~ .\nThe conditioning performed above is made possible by stream obliviousness. Now suppose that given R\u0303t\u22121 the indices \u03c4\u03031, . . . , \u03c4\u0303s are present in the buffer B\u0303t at time t. Recall that this choice of indices is independent of Z\u0303t\u22121 because of stream obliviousness. Then we can write the above as\nE R\u0303t\u22121 u v E Z\u0303t\u22121 u v 1 s \u2211 z\u0303\u2208B\u0303t E z J`(ht\u22121, z, z\u0303)K \u2223\u2223\u2223\u2223\u2223\u2223 R\u0303t\u22121 } ~ } ~\n= E R\u0303t\u22121 u v E Z\u0303t\u22121 u v1 s s\u2211 j=1 E z q `(ht\u22121, z, z\u0303\u03c4\u0303j ) y } ~ } ~\n= E R\u0303t\u22121\nu v E\nz\u03031,...,z\u0303s u v1 s s\u2211 j=1 E z J`(ht\u22121, z, z\u0303j)K } ~ } ~\n= E R\u0303t\u22121 JL(ht\u22121)K = L(ht\u22121).\nWe thus have\nE W\u0303 t\u22121 u v1 s \u2211 z\u0303\u2208B\u0303t E z J`(ht\u22121, z, z\u0303)K } ~ = L(ht\u22121). (8)\nWe now upper bound Pt as\nPt = L(ht\u22121)\u2212 L\u0303buft (ht\u22121)\n= E W\u0303 t\u22121 u v1 s \u2211 z\u0303\u2208B\u0303t E z J`(ht\u22121, z, z\u0303)K } ~\u2212 L\u0303buft (ht\u22121)\n\u2264 sup h\u2208H  E W\u0303 t\u22121 u v1 s \u2211 z\u0303\u2208B\u0303t E z J`(h, z, z\u0303)K } ~\u2212 L\u0303buft (h)  \ufe38 \ufe37\ufe37 \ufe38\ngt(w1,...,wt\u22121)\n.\nNow it turns out that applying McDiarmid\u2019s inequality to gt(w1, . . . ,wt\u22121) directly would yield a very loose bound. This is because of the following reason: since L\u0302buft (h) = 1|Bt| \u2211 z\u2208Bt `(h, zt, z) depends only on s data points, changing any one of the (t\u22121) variables wi brings about a perturbation in gt of magnitude at most O (1/s). The problem is that gt is a function of (t \u2212 1) s variables and hence a direct application of McDiarmid\u2019s inequality would yield an excess\nerror term of \u221a\nt log(1/\u03b4) s2 which would in the end re-\nquire s = \u03c9( \u221a n) to give any non trivial generalization bounds. In contrast, we wish to give results that would give non trivial bounds for s = \u03c9\u0303(1).\nIn order to get around this problem, we need to reduce the number of variables in the statistic while applying McDiarmid\u2019s inequality. Fortunately, we observe that gt effectively depends only on s variables, the data points that end up in the buffer at time t. This allows us to do the following. For any Rt\u22121, define\n\u03b4(Rt\u22121) := P Zt\u22121\n[ gt(w1, . . . ,wt\u22121) > |Rt\u22121 ] .\nWe will first bound \u03b4(Rt\u22121). This will allow us to show\nP W t\u22121 [gt(w1, . . . ,wt\u22121) > ] \u2264 E Rt\u22121\nq \u03b4(Rt\u22121) y ,\nwhere we take expectation over the distribution on Rt\u22121 induced by the buffer update policy. Note that since we are oblivious to the nature of the distribution over Rt\u22121, our proof works for any stream oblivious buffer update policy. Suppose that given Rt\u22121 the indices \u03c41, . . . , \u03c4s are present in the buffer Bt at time t. Then we have\ngt(w1, . . . ,wt\u22121;R t\u22121)\n= sup h\u2208H  E W\u0303 t\u22121 u v1 s \u2211 z\u0303\u2208B\u0303t E z J`(h, z, z\u0303)K } ~\u2212 1 s s\u2211 j=1 E z q `(h, z, z\u03c4j ) y \n=: g\u0303t(z\u03c41 , . . . , z\u03c4s).\nThe function g\u0303t can be perturbed at most B/s due to a change in one of z\u03c4j . Applying McDiarmid\u2019s inequality\nto the function g\u0303t we get with probability at least 1\u2212\u03b4,\ng\u0303t(z\u03c41 , . . . , z\u03c4s) \u2264 E Zt\u22121 Jg\u0303t(z\u03c41 , . . . , z\u03c4s)K +B\n\u221a log 1\u03b4\n2s\nWe analyze E Zt\u22121 Jg\u0303t(z\u03c41 , . . . , z\u03c4s)K in Figure 2. In the third step in the calculations we symmetrize the true random variable z\u03c4j with the ghost random variable z\u0303\u03c4\u0303j . This is contrasted with traditional symmetrization where we would symmetrize zi with z\u0303i. In our case, we let the buffer construction dictate the matching at the symmetrization step. Thus we get, with probability at least 1\u2212 \u03b4 over z1, . . . , zt\u22121,\ngt(w1, . . . ,wt\u22121;R t\u22121) \u2264 2Rs(` \u25e6 H) +B\n\u221a log 1\u03b4\n2s\nwhich in turn, upon taking expectations with respect to Rt\u22121, gives us with probability at least 1 \u2212 \u03b4 over w1, . . . ,wt\u22121,\nPt = gt(w1, . . . ,wt\u22121) \u2264 2Rs(` \u25e6 H) +B\n\u221a log 1\u03b4\n2s .\nApplying a union bound on the bounds for Pt, t = 2, . . . , n gives us with probability at least 1\u2212 \u03b4,\n1\nn\u2212 1 n\u2211 t=2 Pt \u2264 2 n\u2212 1 n\u2211 t=2 Rmin{t\u22121,s}(` \u25e6 H)\n+B\n\u221a log n\u03b4\n2s . (9)\nAdding Equations (7) and (9) gives us the result.\nD.3. Finite Buffer Algorithms with Strongly Convex Loss Functions\nIn this section we prove faster convergence bounds for algorithms that offer finite-buffer regret bounds and use strongly convex loss functions. Given the development of the method of decoupling training and auxiliary random variables in the last section, we can proceed with the proof right away.\nOur task here is to prove bounds on the following quantity\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121)\u2212 L(h\u2217).\nProceeding as before, we will first prove the following result\nP Zn\n[ 1\nn\u2212 1 n\u2211 t=2 L(ht\u22121)\u2212 L(h\u2217) > \u2223\u2223\u2223\u2223\u2223Rn ] \u2264 \u03b4. (10)\nThis will allow us, upon taking expectations over Rn, show the following\nP Wn\n[ 1\nn\u2212 1 n\u2211 t=2 L(ht\u22121)\u2212 L(h\u2217) >\n] \u2264 \u03b4,\nwhich shall complete the proof.\nIn order to prove the statement given in Equation (10), we will use Theorem 4. As we did in the case of all-pairs loss functions, consider the loss function \u2118(h, z\u2032) := E\nz J`(h, z, z\u2032)K with P and P\u0302 as the as-\nsociated population and empirical risk functionals. Clearly, if ` is L-Lipschitz and \u03c3-strongly convex then so is \u2118. By linearity of expectation, for any h \u2208 H, P(h) = L(h). Suppose that given Rt\u22121 the indices \u03c41, . . . , \u03c4s are present in the buffer Bt at time t. Applying Theorem 4 on ht\u22121 at the t\nth step with the loss function \u2118 gives us that given Rt\u22121, with probability at least 1\u2212 \u03b4 over the choice of Zt\u22121,\nL(ht\u22121)\u2212 L(h\u2217) \u2264 (1 + ) ( L\u0303buft (ht\u22121)\u2212 L\u0303buft (h\u2217) ) +\nC\u03b4 \u03c3(min {s, t\u2212 1}) ,\nwhere we have again made the simplifying (yet optional) assumption that prior to time t = s + 1, the buffer contains an exact copy of the stream. Summing across time steps and taking a union bound, gives us that given Rn, with probability at least 1\u2212 \u03b4 over the choice of Zn,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + C(\u03b4/n) \u03c3 ( log 2s n\u2212 1 + 1 s )\n+ 1 +\nn\u2212 1 n\u2211 t=2 L\u0303buft (ht\u22121)\u2212 L\u0303buft (h\u2217).\nLet us define as before \u03bet := ( L\u0303buft (ht\u22121)\u2212 L\u0303buft (h\u2217) ) \u2212 ( L\u0302buft (ht\u22121)\u2212 L\u0302buft (h\u2217) ) .\nThen using the regret bound Rbufn we can write,\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + 1 + n\u2212 1 ( Rbufn + n\u2211 t=2 \u03bet )\n+ C(\u03b4/n)\n\u03c3\n( log 2s\nn\u2212 1 +\n1\ns\n) .\nAssuming s < n/ log n simplifies the above expression to the following:\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + 1 + n\u2212 1 ( Rbufn + n\u2211 t=2 \u03bet )\n+ 2C(\u03b4/n)\n\u03c3s .\nNote that this assumption is neither crucial to our proof nor very harsh as for s = \u2126 (n), we can always apply the results from the infinite-buffer setting using Theorem 5. Moving forward, by using the Bernsteinstyle inequality from (Kakade & Tewari, 2008), one can show with that probability at least 1\u2212 \u03b4, we have n\u2211 t=1 \u03bet \u2264 max { 8L \u221a Dn \u03c3 , 6B \u221a log 4 log n \u03b4 }\u221a log 4 log n \u03b4 ,\nwhere Dn = \u2211n t=2 (L(ht\u22121)\u2212 L(h\u2217)). This gives us\nDn n\u2212 1 \u2264 1 + n\u2212 1\n( Rbufn + max { 8L \u221a Dn \u03c3 , 6B\u2206 } \u2206 )\n+ 2C(\u03b4/n)\n\u03c3s .\nUsing (Kakade & Tewari, 2008, Lemma 4) and absorbing constants inside the O (\u00b7) notation we get:\nDn \u2264 (1 + )Rbufn +O ( C2dn log(n/\u03b4)\ns + log\nlog n\n\u03b4 ) +O (\u221a( Rbufn + C2dn log(n/\u03b4)\ns\n) log log n\n\u03b4\n) .\nLet Wn = max { Rbufn , 2C2dn log(n/\u03b4) s } . Concentrating only on the portion of the expression involving and ignoring the constants, we get\nRbufn + C2dn log(n/\u03b4)\ns +\n\u221a C2dn log(n/\u03b4)\ns log\nlog n\n\u03b4\n\u2264 Rbufn + 2C2dn log(n/\u03b4)\ns \u2264 Wn +\n2C2dn log(n/\u03b4)\ns\n\u2264 2Cd\n\u221a 2Wnn log(n/\u03b4)\ns ,\nwhere the second step follows since \u2264 1 and s \u2264 n and the fourth step follows by using =\u221a\n2C2dn log(n/\u03b4)\nWns \u2264 1 Putting this into the excess risk\nexpression gives us\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + Rbufn n\u2212 1\n+ Cd \u00b7 O\n(\u221a Wn log(n/\u03b4)\nsn\n) ,\nwhich finishes the proof. Note that in case Wn = R buf n , we get\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + Rbufn n\u2212 1\n+ Cd \u00b7 O\n(\u221a Rbufn log(n/\u03b4)\nsn\n) .\nOn the other hand if Rbufn \u2264 2C2dn log(n/\u03b4) s , we get\n1\nn\u2212 1 n\u2211 t=2 L(ht\u22121) \u2264 L(h\u2217) + Rbufn n\u2212 1\n+ C2d \u00b7 O ( log(n/\u03b4)\ns\n) ."}, {"heading": "E. Proof of Theorem 7", "text": "Recall that we are considering a composition classes of the form ` \u25e6H := {(z, z\u2032) 7\u2192 `(h, z, z\u2032), h \u2208 H} where ` is some Lipschitz loss function. We have `(h, z1, z2) = \u03c6 (h(x1, x2)Y (y1, y2)) where Y (y1, y2) = y1 \u2212 y2 or\nY (y1, y2) = y1y2 and \u03c6 : R \u2192 R involves some margin loss function. We also assume that \u03c6 is point wise L-Lipschitz. Let Y = sup\ny1,y2\u2208Y |Y (y1, y2)|.\nTheorem 20 (Theorem 7 restated).\nRn(` \u25e6 H) \u2264 LYRn(H)\nProof. Let \u03c6\u0303(x) = \u03c6(x)\u2212\u03c6(0). Note that \u03c6\u0303(\u00b7) is point wise L-Lipschitz as well as satisfies \u03c6\u0303(0) = 0. Let Y = sup\ny,y\u2032\u2208Y |Y (y, y\u2032)|.\nWe will require the following contraction lemma that we state below.\nTheorem 21 (Implicit in proof of (Ledoux & Talagrand, 2002), Theorem 4.12). Let H be a set of bounded real valued functions from some domain X and let x1, . . . ,xn be arbitrary elements from X . Furthermore, let \u03c6i : R \u2192 R, i = 1, . . . , n be L-Lipschitz functions such that \u03c6i(0) = 0 for all i. Then we have\nE t sup h\u2208H 1 n n\u2211 i=1 i\u03c6i(h(xi)) | \u2264 LE t sup h\u2208H 1 n n\u2211 i=1 ih(xi) | .\nUsing the above inequality we can state the following chain of (in)equalities:\nRn(` \u25e6 H) = E t sup h\u2208H 1 n n\u2211 i=1 i`(h, z, zi) |\n= E t sup h\u2208H 1 n n\u2211 i=1 i\u03c6 (h(x,xi)Y (y, yi)) |\n= E t sup h\u2208H 1 n n\u2211 i=1 i\u03c6\u0303 (h(x,xi)Y (y, yi)) |\n+ \u03c6(0)E\nt 1\nn n\u2211 i=1 i |\n= E t sup h\u2208H 1 n n\u2211 i=1 i\u03c6\u0303 (h(x,xi)Y (y, yi)) |\n\u2264 LY E t sup h\u2208H 1 n n\u2211 i=1 ih(x,xi) | = LYRn(H),\nwhere the fourth step follows from linearity of expectation. The fifth step is obtained by applying the contraction inequality to the functions \u03c8i : x 7\u2192 \u03c6\u0303(aix) where ai = Y (y, yi). We exploit the fact that the contraction inequality is actually proven for the empirical Rademacher averages due to which we can take ai = Y (y, yi) to be a constant dependent only on i,\nuse the inequality, and subsequently take expectations. We also have, for any i and any x, y \u2208 R,\n|\u03c8i(x)\u2212 \u03c8i(y)| = \u2223\u2223\u2223\u03c6\u0303(aix)\u2212 \u03c6\u0303(aiy)\u2223\u2223\u2223\n\u2264 L |aix\u2212 aiy| \u2264 L |ai| |x\u2212 y| \u2264 LY |x\u2212 y| ,\nwhich shows that every function \u03c8i(\u00b7) is LY -Lipschitz and satisfies \u03c8i(0) = 0. This makes an application of the contraction inequality possible on the empirical Rademacher averages which upon taking expectations give us the result."}, {"heading": "F. Applications", "text": "In this section we shall derive Rademacher complexity bounds for hypothesis classes used in various learning problems. Crucial to our derivations shall be the following result by (Kakade et al., 2008). Recall the usual definition of Rademacher complexity of a univariate function class F = {f : X \u2192 R}\nRn(F) = E t sup f\u2208F 1 n n\u2211 i=1 if(xi) | .\nTheorem 22 ((Kakade et al., 2008), Theorem 1). Let W be a closed and convex subset of some Banach space equipped with a norm \u2016\u00b7\u2016 and dual norm \u2016\u00b7\u2016\u2217. Let F : W \u2192 R be \u03c3-strongly convex with respect to \u2016\u00b7\u2016\u2217. Assume W \u2286 { w : F (w) \u2264W 2\u2217 } . Furthermore, let X = {x : \u2016x\u2016 \u2264 X} and FW := {w 7\u2192 \u3008w,x\u3009 : w \u2208 W,x \u2208 X}. Then, we have\nRn(FW) \u2264 XW\u2217\n\u221a 2\n\u03c3n .\nWe note that Theorem 22 is applicable only to first order learning problems since it gives bounds for univariate function classes. However, our hypothesis classes consist of bivariate functions which makes a direct application difficult. Recall our extension of Rademacher averages to bivariate function classes:\nRn(H) = E t sup h\u2208H 1 n n\u2211 i=1 ih(z, zi) |\nwhere the expectation is over i, z and zi. To overcome the above problem we will use the following two step proof technique:\n1. Order reduction: We shall cast our learning problems in a modified input domain where predictors behave linearly as univariate functions.\nMore specifically, given a hypothesis class H and domain X , we shall construct a modified domain X\u0303 and a map \u03c8 : X \u00d7 X \u2192 X\u0303 such that for any x,x\u2032 \u2208 X and h \u2208 H, we have h(x,x\u2032) = \u3008h, \u03c8(x,x\u2032)\u3009.\n2. Conditioning: For every x \u2208 X , we will create a function class Fx = {x\u2032 7\u2192 \u3008h, \u03c8(x,x\u2032)\u3009 : h \u2208 H}. Since Fx is a univariate function class, we will use Theorem 22 to bound Rn(Fx). Since Rn(H) = E x\nJRn(Fx)K, we shall obtain Rademacher complexity bounds for H.\nWe give below some examples of learning situations where these results may be applied.\nAs before, for any subset X of a Banach space and any norm \u2016\u00b7\u2016p, we define \u2016X\u2016p := sup\nx\u2208X \u2016x\u2016p. We\nalso define norm bounded balls in the Banach space as Bp(r) := { x : \u2016x\u2016p \u2264 r } for any r > 0. Let the domain X be a subset of Rd.\nFor sake of convenience we present the examples using loss functions for classification tasks but the same can be extended to other learning problems such as regression, multi-class classification and ordinal regression.\nF.1. AUC maximization for Linear Prediction\nIn this case the goal is to maximize the area under the ROC curve for a linear classification problem at hand. This translates itself to a learning situation where W,X \u2286 Rd. We have hw(x,x\u2032) = w>x\u2212w>x\u2032 and `(hw, z1, z2) = \u03c6 ((y \u2212 y\u2032)hw(x,x\u2032)) where \u03c6 is the hinge loss or the exponential loss (Zhao et al., 2011).\nIn order to apply Theorem 22, we rewrite the hypothesis as hw(x,x\n\u2032) = w>(x \u2212 x\u2032) and consider the input domain X\u0303 = {x\u2212 x\u2032 : x,x\u2032 \u2208 X} and the map \u03c8 : (x,x\u2032) 7\u2192 x \u2212 x\u2032. Clearly if X \u2286 {x : \u2016x\u2016 \u2264 X} then X\u0303 \u2286 {x : \u2016x\u2016 \u2264 2X} and thus we have\n\u2225\u2225\u2225X\u0303\u2225\u2225\u2225 \u2264 2 \u2016X\u2016 for any norm \u2016\u00b7\u2016. It is now possible to regularize the hypothesis class W using a variety of norms.\nIf we wish to define our hypothesis class as Bq(\u00b7), q > 1, then in order to apply Theorem 22, we can use the regularizer F (w) = \u2016w\u20162q. If we wish the sparse\nhypotheses class, B1(W1), we can use the regularizer F (w) = \u2016w\u20162q with q = log d log d\u22121 as this regularizer is strongly convex with respect to the L1 norm (Kakade et al., 2012). Table 1 gives a succinct summary of such possible regularizations and corresponding Rademacher complexity bounds.\nKernelized AUC maximization: Since the L2 regularized hypothesis class has a dimension independent Rademacher complexity, it is possible to give guarantees for algorithms performing AUC maximization using kernel classifiers as well. In this case we have a Mercer kernel K with associated reproducing kernel Hilbert space HK and feature map \u03a6K : X \u2192 HK . Our predictors lie in the RKHS, i.e., w \u2208 HK and we have hw(x,x\n\u2032) = w> (\u03a6K(x)\u2212 \u03a6K(x\u2032)). In this case we will have to use the map \u03c8 : (x,x\u2032) 7\u2192 \u03a6K(x)\u2212 \u03a6K(x\u2032) \u2208 HK . If the kernel is bounded, i.e., for all x,x\u2032 \u2208 X , we have |K(x,x\u2032)| \u2264 \u03ba2, then we can get a Rademacher average bound of 2\u03ba \u2016W\u20162 \u221a 1 n .\nF.2. Linear Similarity and Mahalanobis Metric learning\nA variety of applications, such as in vision, require one to fine tune one\u2019s notion of proximity by learning a similarity or metric function over the input space. We consider some such examples below. In the following, we have W \u2208 Rd\u00d7d.\n1. Mahalanobis metric learning : in this case we wish to learn a metric MW(x,x\n\u2032) = (x \u2212 x\u2032)>W(x \u2212 x\u2032) using the loss function `(MW, z, z\n\u2032) = \u03c6 ( yy\u2032 ( 1\u2212M2W(x,x\u2032) )) (Jin et al., 2009).\n2. Linear kernel learning : in this case we wish to learn a linear kernel function KW(x,x\n\u2032) = x>Wx\u2032,W 0. A variety of loss functions have been proposed to aid the learning process\n(a) Kernel-target Alignment : the loss function used is `(KW, z, z \u2032) = \u03c6 (yy\u2032KW(x,x \u2032))\nwhere \u03c6 is used to encode some notion of alignment (Cristianini et al., 2001; Cortes et al., 2010b).\n(b) S-Goodness: this is used in case one wishes to learn a good similarity function that need not be positive semi definite (Bellet et al., 2012; Balcan & Blum, 2006) by defining\n`(KW, z) = \u03c6 ( y E (x\u2032,y\u2032) Jy\u2032KW(x,x\u2032)K ) .\nIn order to apply Theorem 22, we will again rewrite the hypothesis and consider a different input domain. For the similarity learning problem, write the similarity function as KW(x,x \u2032) = \u2329 W,xx\u2032> \u232a and consider\nthe input space X\u0303 = { xx\u2032> : x,x\u2032 \u2208 X } \u2286 Rd\u00d7d along with the map \u03c8 : (x,x\u2032) 7\u2192 xx\u2032>. For the metric learning problem, rewrite the metric as MW(x,x\n\u2032) =\u2329 W, (x\u2212 x\u2032)(x\u2212 x\u2032)> \u232a and consider the input space\nX\u0303 = { (x\u2212 x\u2032)(x\u2212 x\u2032)> : x,x\u2032 \u2208 X } \u2286 Rd\u00d7d along with the map \u03c8 : (x,x\u2032) 7\u2192 (x\u2212 x\u2032)(x\u2212 x\u2032)>.\nIn this case it is possible to apply a variety of matrix norms to regularize the hypothesis class. We consider the following (mixed) matrix norms : \u2016\u00b7\u20161,1, \u2016\u00b7\u20162,1 and \u2016\u00b7\u20162,2. We also consider the Schatten norm \u2016X\u2016S(p) := \u2016\u03c3(X)\u2016p that includes the widely used trace norm \u2016\u03c3(X)\u20161. As before, we define norm bounded balls in the Banach space as follows:\nBp,q(r) := { x : \u2016x\u2016p,q \u2264 r } .\nUsing results on construction of strongly convex functions with respect to theses norms from (Kakade et al., 2012), it is possible to get bounds on the Rademacher averages of the various hypothesis classes. However these bounds involve norm bounds for the modified domain X\u0303 . We make these bounds explicit by expressing norm bounds for X\u0303 in terms of those for X . From the definition of X\u0303 for the similarity learning problems, we get, for any p, q \u2265 1, \u2225\u2225\u2225X\u0303\u2225\u2225\u2225 p,q \u2264 \u2016X\u2016p \u2016X\u2016q. Also, since every element of X\u0303 is of the form xx\u2032>, it has only one non zero singular value \u2016x\u20162 \u2016x\u2032\u20162 which gives us \u2225\u2225\u2225X\u0303\u2225\u2225\u2225 S(p) \u2264 \u2016X\u201622 for any p \u2265 1. For the metric learning problem, we can similarly get\u2225\u2225\u2225X\u0303\u2225\u2225\u2225 p,q \u2264 4 \u2016X\u2016p \u2016X\u2016q and \u2225\u2225\u2225X\u0303\u2225\u2225\u2225 S(p) \u2264 4 \u2016X\u201622 for any p \u2265 1 which allows us to get similar bounds as those for similarity learning but for an extra constant factor. We summarize our bounds in Table 2. We note that (Cao et al., 2012) devote a substantial amount of effort to calculate these values for the mixed norms on a case-by-case basis (and do not consider Schatten norms either) whereas, using results exploiting strong convexity and strong smoothness from (Kakade et al., 2012), we are able to get the same as simple corollaries.\nF.3. Two-stage Multiple kernel learning\nThe analysis of the previous example can be replicated for learning non-linear Mercer kernels as well. Additionally, since all Mercer kernels yield Hilbertian metrics, these methods can be extended to learning Hilbertian metrics as well. However, since Hilbertian metric learning has not been very popular in literature, we restrict our analysis to kernel learning alone. We present this example using the framework proposed by (Kumar et al., 2012) due to its simplicity and generality.\nWe are given p Mercer kernels K1, . . . ,Kp that are bounded, i.e., for all i, |Ki(x,x\u2032)| \u2264 \u03ba2 for all x,x\u2032 \u2208 X and our task is to find a combination of these kernels given by a vector \u00b5 \u2208 Rp,\u00b5 \u2265 0 such that the kernel K\u00b5(x,x \u2032) = \u2211p i=1 \u00b5iKi(x,x\n\u2032) is a good kernel (Balcan & Blum, 2006). In this case the loss function used is `(\u00b5, z, z\u2032) = \u03c6 (yy\u2032K\u00b5(x,x\n\u2032)) where \u03c6(\u00b7) is meant to encode some notion of alignment. Kumar et al. (2012) take \u03c6(\u00b7) to be the hinge loss.\nTo apply Theorem 22, we simply use the \u201cK-space\u201d construction proposed in (Kumar et al., 2012). We write K\u00b5(x,x\n\u2032) = \u3008\u00b5, z(x,x\u2032)\u3009 where z(x,x\u2032) = (K1(x,x \u2032), . . . ,Kp(x,x \u2032)). Consequently our modified input space looks like X\u0303 = {z(x,x\u2032) : x,x\u2032 \u2208 X} \u2286 Rp with the map \u03c8 : (x,x\u2032) 7\u2192 z(x,x\u2032). Popular regularizations on the kernel combination vector \u00b5 include the sparsity inducing L1 regularization that constrains \u00b5 to lie on the unit simplex \u2206(1) = {\u00b5 : \u2016\u00b5\u20161 = 1,\u00b5 \u2265 0} and L2 regularization that restricts \u00b5 to lie on the unit sphere S2(1) = {\u00b5 : \u2016\u00b5\u20162 = 1,\u00b5 \u2265 0}. Arguments similar to the one used to discuss the case of AUC maximization for linear predictors give us bounds on the Rademacher aver-\nages for these two hypothesis classes in terms of \u2225\u2225\u2225X\u0303\u2225\u2225\u2225\n2 and \u2225\u2225\u2225X\u0303\u2225\u2225\u2225\n\u221e . Since \u2225\u2225\u2225X\u0303\u2225\u2225\u2225 2 \u2264 \u03ba2\u221ap and \u2225\u2225\u2225X\u0303\u2225\u2225\u2225 \u221e \u2264 \u03ba2, we\nobtain explicit bounds on the Rademacher averages that are given in Table 3.\nWe note that for the L1 regularized case, our bound has a similar dependence on the number of kernels, i.e., \u221a\nlog p as the bounds presented in (Cortes et al., 2010a). For the L2 case however, we have a worse dependence of \u221a p than Cortes et al. (2010a) who get a 4 \u221a p dependence. However, it is a bit unfair to compare\nthe two bounds since Cortes et al. (2010a) consider single stage kernel learning algorithms that try to learn the kernel combination as well as the classifier in a single step whereas we are dealing with a two-stage process where classifier learning is disjoint from the kernel learning step."}, {"heading": "G. Regret Bounds for Reservoir Sampling Algorithms", "text": "The Reservoir Sampling algorithm (Vitter, 1985) essentially performs sampling without replacement which means that the samples present in the buffer are not i.i.d. samples from the preceding stream. Due to this, proving regret bounds by way of uniform convergence arguments becomes a bit more difficult. However, there has been a lot of work on analyzing learning algorithms that learn from non-i.i.d. data such as data generated by ergodic processes. Of particular interest is a result by Serfling 2 that gives Hoeffding style bounds for data generated from a finite population without replacement.\nAlthough Serfling\u2019s result does provide a way to analyze the RS algorithm, doing so directly would require using arguments that involve covering numbers that offer bounds that are dimension dependent and that are not tight. It would be interesting to see if equivalents of the McDiarmid\u2019s inequality and Rademacher averages can be formulated for samples obtained without replacement to get tighter results. For our purposes, we remedy the situation by proposing a new sampling algorithm that gives us i.i.d. samples in the buffer allowing existing techniques to be used to obtain regret bounds (see Appendices H and I)."}, {"heading": "H. Analysis of the RS-x Algorithm", "text": "In this section we analyze the RS-x substream sampling algorithm and prove its statistical properties. Recall that the RS-x algorithm simply admits a point into the buffer if there is space. It performs a Repopulation step at the first instance of overflow which involves refilling the buffer by sampling with replacement from all the set of points seen so far (including the one that caused the overflow). In subsequent steps, a Normal update step is performed. The following theorem formalizes the properties of the sampling algorithm\nTheorem 23. Suppose we have a stream of elements z1, . . . , zn being sampled into a buffer B of size s using\n2R. J. Serfling, Probability Inequalities for the Sum in Sampling without Replacement, The Annals of Statistics, 2(1):39-48, 1974.\nthe RS-x algorithm. Then at any time t \u2265 s+ 2, each element of B is an i.i.d. sample from the set Zt\u22121.\nProof. To prove the results, let us assume that the buffer contents are addressed using the variables \u03b61, . . . , \u03b6s. We shall first concentrate on a fixed element, say \u03b61 (which we shall call simply \u03b6 for notational convenience) of the buffer and inductively analyze the probability law Pt obeyed by \u03b6 at each time step t \u2265 s+ 2.\nWe will prove that the probability law obeyed by \u03b6 at time t is Pt(\u03b6) = 1t\u22121 \u2211t\u22121 \u03c4=1 1{\u03b6=z\u03c4}. The law is interpreted as saying the following: for any \u03c4 \u2264 t \u2212 1, P [\u03b6 = z\u03c4 ] = 1t\u22121 and shows that the element \u03b6 is indeed a uniform sample from the set Zt\u22121. We would similarly be able to show this for all locations \u03b62, . . . , \u03b6s which would prove that the elements in the buffer are indeed identical samples from the preceding stream. Since at each step, the RS-x algorithm updates all buffer locations independently, the random variables \u03b61, . . . , \u03b6s are independent as well which would allow us to conclude that at each step we have s i.i.d. samples in the buffer as claimed.\nWe now prove the probability law for \u03b6. We note that the repopulation step done at time t = s+ 1 explicitly ensures that at step t = s+2, the buffer contains s i.i.d samples from Zs+1 i.e. Ps+2(\u03b6) = 1s+1 \u2211s+1 \u03c4=1 1{\u03b6=z\u03c4}. This forms the initialization of our inductive argument. Now suppose that at the tth time step, the claim is true and \u03b6 obeys the law Pt(\u03b6) = 1t\u22121 \u2211t\u22121 \u03c4=1 1{\u03b6=z\u03c4}. At the tth step, we would update the buffer by making the incoming element zt replace the element present at the location indexed by \u03b6 with probability 1/(t + 1). Hence \u03b6 would obey the following law after the update(\n1\u2212 1 t\n) Pt(\u03b6) + 1\nt 1{\u03b6=zt} =\n1\nt t\u2211 \u03c4=1 1{\u03b6=z\u03c4}\nwhich shows that at the (t+ 1)th step, \u03b6 would follow the law Pt+1(\u03b6) = 1t \u2211t \u03c4=1 1{\u03b6=z\u03c4} which completes the inductive argument and the proof."}, {"heading": "I. Proof of Theorem 8", "text": "We now prove Theorem 8 that gives a high confidence regret bound for the OLP learning algorithm when used along with the RS-x buffer update policy. Our proof proceeds in two steps: in the first step we prove a uniform convergence type guarantee that would allow us to convert regret bounds with respect to the finitebuffer penalties L\u0302buft into regret bounds in in terms of the all-pairs loss functions L\u0302t. In the second step we\nthen prove a regret bound for OLP with respect to the finite-buffer penalties.\nWe proceed with the first step of the proof by proving the lemma given below. Recall that for any sequence of training examples z1, . . . , zn, we define, for any h \u2208 H, the all-pairs loss function as L\u0302t(h) = 1t\u22121 \u2211t\u22121 \u03c4=1 `(h, zt, z\u03c4 ). Moreover, if the online learning process uses a buffer, the we also define the finite-buffer loss function as L\u0302buft (ht\u22121) = 1 |Bt| \u2211 z\u2208Bt `(ht\u22121, zt, z). Lemma 24. Suppose we have an online learning algorithm that incurs buffer penalties based on a buffer B of size s that is updated using the RS-x algorithm. Suppose further that the learning algorithm generates an ensemble h1, . . . , hn\u22121. Then for any t \u2208 [1, n\u2212 1], with probability at least 1\u2212\u03b4 over the choice of the random variables used to update the buffer B until time t, we have\nL\u0302t(ht\u22121) \u2264 L\u0302buft (ht\u22121) + Cd \u00b7 O \u221a log 1\u03b4 s  Proof. Suppose t \u2264 s+ 1, then since at that point the buffer stores the stream exactly, we have\nL\u0302t(ht\u22121) = L\u0302buft (ht\u22121)\nwhich proves the result. Note that, as Algorithm 2 indicates, at step t = s+1 the buffer is updated (using the repopulation step) only after the losses have been calculated and hence step t = s+ 1 still works with a buffer that stores the stream exactly.\nWe now analyze the case t > s+1. At each step \u03c4 > s, the RS-x algorithm uses s independent Bernoulli random variables (which we call auxiliary random variables) to update the buffer, call them r\u03c41 , . . . , r \u03c4 s where r\u03c4j is used to update the j th item \u03b6j in the buffer. Let rtj := {r s+1 j , r 2 j , . . . , r t j} \u2208 {0, 1} t denote an ensemble random variable composed of t \u2212 s independent Bernoulli variables. It is easy to see that the element \u03b6j is completely determined at the t th step given rt\u22121j .\nTheorem 23 shows, for any t > s + 1, that the buffer contains s i.i.d. samples from the set Zt\u22121. Thus, for any fixed function h \u2208 H, we have for any j \u2208 [s],\nE rt\u22121j\nJ`(h, zt, \u03b6j)K = 1\nt\u2212 1 t\u22121\u2211 \u03c4=1 `(h, zt, z\u03c4 )\nwhich in turn shows us that\nE rt\u221211 ,...,r t\u22121 s\nr L\u0302buft (h) z = 1\nt\u2212 1 t\u22121\u2211 \u03c4=1 `(h, zt, z\u03c4 ) = L\u0302t(h)\nNow consider a ghost sample of auxiliary random variables r\u0303t\u221211 , . . . , r\u0303 t\u22121 s . Since our hypothesis ht\u22121 is independent of these ghost variables, we can write\nE r\u0303t\u221211 ,...,r\u0303 t\u22121 s\nr L\u0302buft (ht\u22121) z = L\u0302t(ht\u22121)\nWe recall that error in the proof presented in Zhao et al. (2011) was to apply such a result on the true auxiliary variables upon which ht\u22121 is indeed dependent. Thus we have\nL\u0302t(ht\u22121)\u2212 L\u0302buft (ht\u22121)\n= E r\u0303t\u221211 ,...,r\u0303 t\u22121 s\nr L\u0302buft (ht\u22121) z \u2212 L\u0302buft (ht\u22121)\n\u2264 sup h\u2208H\n[ E\nr\u0303t\u221211 ,...,r\u0303 t\u22121 s\nr L\u0302buft (h) z \u2212 L\u0302buft (h) ] \ufe38 \ufe37\ufe37 \ufe38\ngt(r t\u22121 1 ,...,r t\u22121 s )\nNow, the perturbation to any of the ensemble variables rj (a perturbation to an ensemble variable implies a perturbation to one or more variables forming that ensemble) can only perturb only the element \u03b6j in\nthe buffer. Since L\u0302buft (ht\u22121) = 1s \u2211\nz\u2208Bt `(ht\u22121, zt, z) and the loss function is B-bounded, this implies that a perturbation to any of the ensemble variables can only perturb g(rt\u221211 , . . . , r t\u22121 s ) by at most B/s. Hence an application of McDiarmid\u2019s inequality gives us, with probability at least 1\u2212 \u03b4,\ngt(r t\u22121 1 , . . . , r t\u22121 s ) \u2264 E\nrt\u22121j\nq gt(r t\u22121 1 , . . . , r t\u22121 s ) y +B\n\u221a log 1\u03b4\n2s\nAnalyzing the expectation term we get\nE rt\u22121j\nq gt(r t\u22121 1 , . . . , r t\u22121 s ) y\n= E rt\u22121j t sup h\u2208H\n[ E\nr\u0303t\u221211 ,...,r\u0303 t\u22121 s\nr L\u0302buft (h) z \u2212 L\u0302buft (h)\n]|\n\u2264 E rt\u22121j ,r\u0303 t\u22121 j u vsup h\u2208H 1 s s\u2211 j=1 `(h, zt, \u03b6\u0303j)\u2212 `(h, zt, \u03b6j) }~ = E\nrt\u22121j ,r\u0303 t\u22121 j , j\nu vsup h\u2208H 1 s s\u2211 j=1 j ( `(h, zt, \u03b6\u0303j)\u2212 `(h, zt, \u03b6j) )}~ \u2264 2 E\nrt\u22121j ,r\u0303 t\u22121 j , j\nu vsup h\u2208H 1 s s\u2211 j=1 j`(h, zt, \u03b6j) }~ \u2264 2Rs(` \u25e6 H)\nwhere in the third step we have used the fact that symmetrizing a pair of true and ghost ensemble variables\nis equivalent to symmetrizing the buffer elements they determine. In the last step we have exploited the definition of Rademacher averages with the (empirical)\nmeasure 1t\u22121 \u2211t\u22121 \u03c4=1 \u03b4z\u03c4 imposed over the domain Z.\nFor hypothesis classes for which we have R\u0302s(` \u25e6 H) = Cd \u00b7 O (\u221a 1 s ) , this proves the claim.\nUsing a similar proof progression we can also show the following:\nLemma 25. For any fixed h \u2208 H and any t \u2208 [1, n\u22121], with probability at least 1 \u2212 \u03b4 over the choice of the random variables used to update the buffer B until time t, we have\nL\u0302buft (h) \u2264 L\u0302t(h) + Cd \u00b7 O \u221a log 1\u03b4 s  Combining Lemmata 24 and 25 and taking a union bound over all time steps, the following corollary gives us a buffer to all-pairs conversion bound.\nLemma 26. Suppose we have an online learning algorithm that incurs buffer penalties based on a buffer B of size s that is updated using the RS-x algorithm. Suppose further that the learning algorithm generates an ensemble h1, . . . , hn\u22121. Then with probability at least 1\u2212\u03b4 over the choice of the random variables used to update the buffer B, we have\nRn \u2264 Rbufn + Cd (n\u2212 1) \u00b7 O (\u221a log n\u03b4 s ) ,\nwhere we recall the definition of the all-pairs regret as\nRn := n\u2211 t=2 L\u0302t(ht\u22121)\u2212 inf h\u2208H n\u2211 t=2 L\u0302t(h)\nand the finite-buffer regret as\nRbufn := n\u2211 t=2 L\u0302buft (ht\u22121)\u2212 inf h\u2208H n\u2211 t=2 L\u0302buft (h).\nProof. Let h\u0302 := arg inf h\u2208H\n\u2211n t=2 L\u0302t(h). Then Lemma 25\ngives us, upon summing over t and taking a union bound,\nn\u2211 t=2 L\u0302buft (h\u0302) \u2264 n\u2211 t=2 L\u0302t(h\u0302) + Cd(n\u2212 1) \u00b7 O (\u221a log n\u03b4 s ) ,\n(11)\nwhereas Lemma 24 similarly guarantees n\u2211 t=2 L\u0302t(ht\u22121) \u2264 n\u2211 t=2 L\u0302buft (ht\u22121) + Cd(n\u2212 1) \u00b7 O (\u221a log n\u03b4 s ) ,\n(12)\nwhere both results hold with high confidence. Adding the Equations (11) and (12) and using\u2211n t=2 L\u0302buft (ht\u22121) \u2264 inf\nh\u2208H\n\u2211n t=2 L\u0302buft (h\u0302)+Rbufn completes\nthe proof.\nAs the final step of the proof, we give below a finitebuffer regret bound for the OLP algorithm.\nLemma 27. Suppose the OLP algorithm working with an s-sized buffer generates an ensemble w1, . . . ,wn\u22121. Further suppose that the loss function ` being used is L-Lipschitz and the space of hypotheses W is a compact subset of a Banach space with a finite diameter D with respect to the Banach space norm. Then we have\nRbufn \u2264 LD \u221a n\u2212 1\nProof. We observe that the algorithm OLP is simply a variant of the GIGA algorithm (Zinkevich, 2003) being applied with the loss functions `GIGAt : w 7\u2192 L\u0302buft (w). Since `GIGAt inherits the Lipschitz constant of L\u0302buft which in turn inherits it from `, we can use the analysis given by Zinkevich (2003) to conclude the proof.\nCombining Lemmata 26 and 27 gives us the following result:\nTheorem 28 (Theorem 8 restated). Suppose the OLP algorithm working with an s-sized buffer generates an ensemble w1, . . . ,wn\u22121. Then with probability at least 1\u2212 \u03b4,\nRn n\u2212 1 \u2264 O\n( Cd \u221a log n\u03b4 s + \u221a 1 n\u2212 1 )\nJ. Implementing the RS-x Algorithm\nAlthough the RS-x algorithm presented in the paper allows us to give clean regret bounds, it suffers from a few drawbacks. From a theoretical point of view, the algorithm is inferior to Vitter\u2019s RS algorithm in terms of randomness usage. The RS algorithm (see (Zhao et al., 2011) for example) uses a Bernoulli random variable and a discrete uniform random variable at each time step. The discrete random variable takes values in [s] as a result of which the algorithm uses a total of O (log s) random bits at each step.\nAlgorithm 3 RS-x2 : An Alternate Implementation of the RS-x Algorithm\nInput: Buffer B, new point zt, buffer size s, timestep t Output: Updated buffer Bnew 1: if |B| < s then //There is space 2: Bnew \u2190 B \u222a {zt} 3: else //Overflow situation 4: if t = s+ 1 then //Repopulation step 5: TMP = B \u222a {zt} 6: Bnew = \u03c6 7: for i = 1 to s do 8: Select random r \u2208 TMP with replacement 9: Bnew \u2190 Bnew \u222a {r} 10: end for 11: else //Normal update step 12: Bnew \u2190 B 13: Sample k \u223c Binomial(s, 1/t) 14: Remove k random elements from Bnew\n15: Bnew \u2190 Bnew \u222a (\u2210k i=1 {zt} ) 16: end if 17: end if 18: return Bnew\nThe RS-x algorithm as proposed, on the other hand, uses s Bernoulli random variables at each step (to decide which buffer elements to replace with the incoming point) taking its randomness usage to O (s) bits. From a practical point of view this has a few negative consequences:\n1. Due to increased randomness usage, the variance of the resulting algorithm increases.\n2. At step t, the Bernoulli random variables required all have success probability 1/t. This quantity drops down to negligible values for even moderate values of t. Note that Vitter\u2019s RS on the other hand requires a Bernoulli random variable with success probability s/t which dies down much more slowly.\n3. Due to the requirement of such high precision random variables, the imprecisions of any pseudo random generator used to simulate this algorithm become apparent resulting in poor performance.\nIn order to ameliorate the situation, we propose an alternate implementation of the normal update step of the RS-x algorithm in Algorithm 3. We call this new sampling policy RS-x2 . We shall formally demonstrate the equivalence of the RS-x and the RS-x2 policies by showing that both policies result in a buffer whose each element is a uniform sample from the preceding stream with replacement. This shall be done by proving that the joint distribution of the buffer elements remains the same whether the RS-x normal update is applied or the RS-x2 normal step is ap-\nplied (note that RS-x and RS-x2 have identical repopulation steps). This will ensure that any learning algorithm will be unable to distinguish between the two update mechanisms and consequently, our regret guarantees shall continue to hold.\nFirst we analyze the randomness usage of the RS-x2 update step. The update step first samples a number Kt \u223c B(s, 1/t) from the binomial distribution and then replaces Kt random locations with the incoming point. Choosing k locations without replacement from a pool of s locations requires at most k log s bits of randomness. Since Kt is sampled from the binomial distribution B(s, 1/t), we have Kt = O (1) in expectation (as well as with high probability) since t > s whenever this step is applied. Hence our randomness usage per update is at most O (log s) random bits which is much better than the randomness usage of RS-x and that actually matches that of Vitter\u2019s RS upto a constant.\nTo analyze the statistical properties of the RS-x2 update step, let us analyze the state of the buffer after the update step. In the RS-x algorithm, the state of the buffer after an update is completely specified once we enumerate the locations that were replaced by the incoming point. Let the indicator variable Ri indicate whether the ith location was replaced or not. Let r \u2208 {0, 1}s denote a fixed pattern of replacements. Then the original implementation of the update step of RS-x guarantees that\nP RS-x [ s\u2227 i=1 (Ri = ri) ] = ( 1 t )\u2016r\u20161 ( 1\u2212 1 t )s\u2212\u2016r\u20161 To analyze the same for the alternate implementation of the RS-x2 update step, we first notice that choosing k items from a pool of s without replacement is identical to choosing the first k locations from a random permutation of the s items. Let us denote \u2016r\u20161 = k. Then we have,\nP RS-x2 [ s\u2227 i=1 (Ri = ri) ] = s\u2211 j=1 P [ s\u2227 i=1 (Ri = ri) \u2227Kt = j ]\n= P [ s\u2227 i=1 (Ri = ri) \u2227Kt = k ]\n= P [ s\u2227 i=1 (Ri = ri) \u2223\u2223\u2223\u2223\u2223Kt = k ] P [Kt = k]\nWe have P [Kt = k] = ( s\nk\n)( 1\nt\n)k ( 1\u2212 1\nt )s\u2212k The number of arrangements of s items such that some specific k items fall in the first k positions is k!(s\u2212k)!.\nThus we have\nP RS-x2 [ s\u2227 i=1 (Ri = ri) ] = ( s k )( 1 t )k ( 1\u2212 1 t )s\u2212k k!(s\u2212 k)! s!\n=\n( 1\nt\n)k ( 1\u2212 1\nt )s\u2212k = P\nRS-x [ s\u2227 i=1 (Ri = ri) ]\nwhich completes the argument."}, {"heading": "K. Additional Experimental Results", "text": "Here we present experimental results on 14 different benchmark datasets (refer to Figure 3) comparing the OLP algorithm using the RS-x2 buffer policy with the OAMgra algorithm using the RS buffer policy. We continue to observe the trend that OLP performs competitively to OAMgra while enjoying a slight advantage in small buffer situations in most cases."}], "references": [], "referenceMentions": [], "year": 2013, "abstractText": "In this paper, we study the generalization properties of online learning based stochastic methods for supervised learning problems where the loss function is dependent on more than one training sample (e.g., metric learning, ranking). We present a generic decoupling technique that enables us to provide Rademacher complexity-based generalization error bounds. Our bounds are in general tighter than those obtained by Wang et al. (2012) for the same problem. Using our decoupling technique, we are further able to obtain fast convergence rates for strongly convex pairwise loss functions. We are also able to analyze a class of memory efficient online learning algorithms for pairwise learning problems that use only a bounded subset of past training samples to update the hypothesis at each step. Finally, in order to complement our generalization bounds, we propose a novel memory efficient online learning algorithm for higher order learning problems with bounded regret guarantees.", "creator": "LaTeX with hyperref package"}}}