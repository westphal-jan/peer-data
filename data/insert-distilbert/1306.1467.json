{"id": "1306.1467", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Jun-2013", "title": "Highly Scalable, Parallel and Distributed AdaBoost Algorithm using Light Weight Threads and Web Services on a Network of Multi-Core Machines", "abstract": "compressed adaboost is an important algorithm in machine learning and is being widely used chiefly in object detection. adaboost works by iteratively, selecting the best amongst weak classifiers, and then combines so several weak classifiers to obtain a strong classifier. even though adaboost has proven to be very effective, its learning execution time variance can be quite large depending upon the application e. g., in face detection, the learning time onset can be several days. due to its increasing use in computer vision applications, the learning time needs to be drastically reduced so that an adaptive near real time object detection system can be incorporated. in this paper, we develop a hybrid parallel and distributed adaboost algorithm that exploits the multiple cores in a cpu via light weight threads, and also uses multiple machines via a web service software architecture to achieve high scalability. we should present a novel hierarchical web services based distributed architecture and achieve nearly linear speedup up to the number of processors available to us. in comparison with the previously published work, which primarily used a single level master - slave parallel and distributed implementation [ 1 ] and only achieved a speedup of 2. 66 on four nodes, we achieve a speedup of 95. 1 pcs on 31 workstations each having a quad - core processor, basically resulting in a learning time of only 4. 8 seconds per feature.", "histories": [["v1", "Thu, 6 Jun 2013 16:38:26 GMT  (677kb)", "http://arxiv.org/abs/1306.1467v1", null]], "reviews": [], "SUBJECTS": "cs.DC cs.LG", "authors": ["munther abualkibash", "ahmed elsayed", "ausif mahmood"], "accepted": false, "id": "1306.1467"}, "pdf": {"name": "1306.1467.pdf", "metadata": {"source": "CRF", "title": "MULTI-CORE MACHINES", "authors": ["Munther Abualkibash", "Ahmed ElSayed", "Ausif Mahmood"], "emails": ["mabualki@bridgeport.edu,", "aelsayed@bridgeport.edu,", "mahmood@bridgeport.edu"], "sections": [{"heading": null, "text": "DOI : 10.5121/ijdps.2013.4303 29\nIn this paper, we focus on the method used in the last category. Viola and Jones have used this method in [4] and their algorithm has proven to be very successful in real time face detection. For learning of the face detection classifier, Viola Jones\u2019 algorithm uses AdaBoost [5] on a training set of approximately 5000 faces and 10,000 non faces. Since the training set and the number of possible features used in learning a classifier is quite large, running time of AdaBoost can be very\nhigh and the time to complete training of one feature can be on the order of several minutes. Thus depending on the total number of features desired, the learning time of the algorithm can be several days. For example, to obtain a 200 feature classifier, it takes about one day on a modern workstation. Thus for applications, where we would like the object detection to be adaptive, this training time needs to be greatly reduced. An example where this is highly desirable is identifying a particular model of a car when it gets stolen, and the traffic cameras need to detect only that model. Since there are tens of thousands of make model and year of cars, waiting for several days until a classifier is ready would not be an option.\nParallel and distributed processing can be employed for speeding up of the AdaBoost algorithm. With the wide availability of multicore workstations and high speed network of workstations, we can take advantage of the computing power available. Software frameworks targeting the efficient use of multiple cores within a workstation have been recently developed for both Windows and Unix/Linux environments e.g., Task Parallel Library [6] allows creation of light weight threads where the cost to launch a thread is only 50 assembly language instructions as opposed to approximately 200 instructions for a regular thread. Further, web services frameworks based on scalable WS* standards are available where efficient distributed implementation can be successfully developed. In this paper, we develop a hybrid parallel as well as distributed implementation of the AdaBoost algorithm exploiting both the multiple cores in a machine via the Task Parallel Library, as well as multiple machines via a novel hierarchical web services based distributed implementation to achieve significant reduction in training time."}, {"heading": "1.1. Related Work", "text": "A recent work at a parallel and distributed implementation of AdaBoost has been reported in [1]. Their system consists of a client computer and a server pool. The parallelization of AdaBoost is accomplished by using feature blocks. They employ four computing nodes in the distributed model and thus achieve a speedup of only 2.66. Another parallel implementation of face detection has carried out on GPUs in [7] and have demonstrated the improvement in face detection time of the Haar feature based Adaboost algorithm to about 30 frames per second (FPS) using CUDA on the GeForce GTX 480 GPU. The main problem with their work is that they focused on the object detection time, not the classifier training time, so if the training dataset is updated, the training process will be repeated again. Our main focus in this paper is the parallelization of training of the Haar feature classifier to make training process near real-time such that any changes in the feature types or the training dataset can be handled in a short retraining time. The reminder of this paper is organized as follows. In section 2, we provide a brief background on the AdaBoost algorithm before presenting our parallel and distributed approach in section 3. Section 4 provides the experimental results. Conclusions are presented in section 5."}, {"heading": "2. ADABOOST ALGORITHM", "text": "One of the main contributions of Viola and Jones is the integral image [4]. The benefit of using integral image is to speed up the computation of rectangular features used in AdaBoost. We review the calculations in the integral image below and then describe the AdaBoost algorithm."}, {"heading": "2.1. Integral Image", "text": "To get the integral image value on position x, y, the summation of the all pixels values located on top and to the left of x, y is taken. Figure 1 explains this concept.\nThe following equation explains the computations to get the integral image:\n( , ) = ( , ) ,\nwhere ( , ) represents the integral image, and ( , ) represents the original image.\nFor obtaining the integral image in the dark rectangle in Figure 2 only, the following equation is followed:\n( ) = 4 + 1 \u2212 (2 + 3)"}, {"heading": "2.2. Extracted Feature Types and Selection", "text": "The features extraction in Viola Jones\u2019 algorithm are based on Haar basis functions [4, 8]. Five types of features have been used in the original algorithm as shown in Figure 3.\n(a) (b) (c)\nFigure 3. Five rectangular features. Figure (a) shows two rectangles horizontal and vertical features, figure (b) shows three rectangles horizontal and vertical features, and figure (c) shows a four rectangles feature.\nTo calculate the value of each one of the features, the sum of pixels located in the white side of the rectangle are subtracted from the dark side [4]. The window size used for training and detecting purposes in face detection is 24x24. For scaling, the starting point is the smallest size of a rectangular feature, e.g. in three rectangle feature type, it is 3x1 pixels, in a two rectangle feature type, it is 2x1 pixels, etc.. Each rectangular feature is scaled up until reaching total window size of 24x24. As a result, the total number of features for each type is:\n For three rectangle feature type, 27,600 features.  For two rectangle feature type, 43,200 features.  For four rectangle feature type, 20,736 features.\nThe total number for all features combined is going to be: Three rectangles horizontal + three rectangles vertical + two rectangles horizontal + two rectangles vertical + four rectangles = 27600 + 27600 + 43200 + 43200 + 20736 = 162,336 features. During the learning phase, all of these features are going to be computed for all faces in the training set. The set of faces which we use for training purpose is the same one that has been used by Viola and Jones for face detection [4]. The size of each image is 24x24. There are 4916 faces and 7960 non-faces. Thus, the total number of all possible features in all training images is 2,090,238,336 (i.e., number of training images multiplied by features per image). Viola and Jones have used AdaBoost to combine weak classifiers into a stronger classifier [5]. The conventional AdaBoost algorithm works by assigning good features relatively higher weight and the poor ones a smaller weight to determine the best weak classifier [4]. The main goal of a weak classifier is to get the optimal threshold among positive and negative examples for any rectangular feature. This technique has been known as the decision stump. The selected threshold minimizes the number of misclassified examples. The decision of a weak classifier is 1 or 0, i.e., positive or negative. The following equation explains the way a weak classifier works.\n\u210e( , , , ) = 1, ( ) <0, \u210e where p is either 1 or -1, is the threshold, and f is the feature."}, {"heading": "2.3. AdaBoost Algorithm used by Viola and Jones", "text": " Suppose there are N numbers of images as training set. Each image is labelled as 0 for\nnegative images, and, 1 for positive images, as shown in table 1.\n Initializing the weight for each image in the first round as shown in the following table:\nTable 2. Example of images and labels and weights.\nImages w , w , w , w , Label 1 0 0 1 Weight 1\n2l 1 2m 1 2m 1\n2l Where l is the total number of positive images i.e., faces, and m is the total number of nonfaces.\n For t = 1 to T: 1. Normalizing the weight of each image in each round as the following:\nw , = , , where w is the sum total of the weight of all images in the same round.\n2. Calculating the error of all features, until getting the feature has the minimum error. The selected feature is the best weak classifier in t round. \u03f5 = min , , \u2211 w h(x , f, p, \u03b8) \u2212 y 3. Based on the minimum error (\u03f5 ), which is determined by f , p , and \u03b8 , get h (x), where: h (x) = h(x, f , p ,\u03b8 ) . 4. As preparation for the next round, the weight should be updated: w , = w , \u03b2\nwhere e = 1, if x is misclassified, e = 0 otherwise, and \u03b2 =\n.\n At the end, after going through all rounds, the strong classifier is determined as the following:\nC(x) = 1, \u03b1 h (x) \u2265 1 2 \u03b1\n0, \u210e\nwhere \u03b1 = log"}, {"heading": "3. OUR PARALLEL AND DISTRIBUTED WEB SERVICES- BASED ADABOOST ARCHITECTURE", "text": "The original AdaBoost determines the best weak classifier in each round based on the minimum classification error. It needs to go through all features and determine which feature yields the minimum error. Since there are a large number of features, the execution time during the learning phase is high. Our parallel approach speeds up the execution time by efficiently parallelizing the AdaBoost algorithm. We implement a three way approach to get results in shortest possible time. We run main computational part of AdaBoost in parallel using Task parallel Library (TPL). Task parallel library is a built in library in Microsoft .NET framework. The advantage of using TPL is noticed in multi-core CPUs, where the declared parallel workload is automatically distributed between the different CPU cores by creating light weight threads called tasks [6]. To further improve the execution time of AdaBoost, we use web services to run parallel Adaboost on multiple workstations in a distributed manner. Our first level architecture does workload\ndivision based on the feature type. Since there are five feature types, we use five workstations at level 1. As shown in figure 4, total of six machines are used, i.e., one master and five slaves. To achieve further scalability, computation of each of the feature types is further expanded to a second level using web services. Figure 5 shows twenty one PC\u2019s being used, in a two-level hierarchy, Master, Sub-Master, and Slaves."}, {"heading": "3.1. The Parallel AdaBoost Algorithm", "text": "Three approaches for speeding up execution are implemented in the AdaBoost algorithm:  Parallel execution.  Web Services and Parallel execution on one hierarchal level.  Web Services and Parallel execution on two hierarchal levels."}, {"heading": "3.3.1. Parallel execution", "text": "All features are grouped based on type, such as, three rectangle horizontal, three rectangle vertical, two rectangle horizontal, two rectangle vertical, and four rectangle. Each group is uploaded to the system memory in parallel. Once all of these have been loaded, then the AdaBoost rounds from 1 to T are started. Since the goal is to find the feature has the minimum error in each group in parallel in each round, five features are selected from five groups. Among them, the feature that has the least minimum error is picked and based on that the weight is updated for the next round of AdaBoost algorithm. Since selecting a minimum error feature runs in parallel, the execution time time is reduced by a factor of five."}, {"heading": "3.3.2. Web Services and Parallel execution on one hierarchal level", "text": "Each group of features is distributed to a separate PC. Since five groups exist, five PC\u2019s are used for feature calculations, and a master coordinates the five PC\u2019s as shown in figure 4. The parallel and distributed pseudo code for this approach is described below. Pseudocode of one level master and five slaves Parallel Adaboost  Given example images ( , ), \u2026 , ( , ) where = 0,1 for negative and positive examples\nrespectively.  Prepare one master workstation and five slaves.  Each slave is assigned to one particular feature type.\n (slave 1, Three rectangles Horizontal)  (slave 2, Three rectangles Vertical)  (slave 3, Two rectangles Horizontal)  (slave 4, Two rectangles Vertical)  (slave 5, Four rectangles)\n On slave\u2019s workstations: Initialize all images on each slave.  On master workstation:\n Initialize weights , = , for = 0,1 respectively, where and are the number of negatives and positives respectively.  For = 1, \u2026 , \u2236 1. Normalize the weights, , \u2190 ,\u2211 , so that is a probability distribution.\n2. Send the weights to all slaves. 3. On each slave:\na. For each feature, , train a classifier \u210e which is restricted to using a single feature. The error is evaluated with respect to , =\u2211 |\u210e ( ) \u2212 |.\nb. Send the classifier,\u210e , with the lowest error , to master workstation. 4. On master workstation:\na. Amongst the received classifiers from each slave, choose the classifier,\u210e , with the lowest error .\nb. Update the weights: , = , where = 0 if example is classified correctly, = 1 otherwise, and = .\n The final strong classifier is:\n\u210e( ) = 1, \u2211 \u210e ( ) \u2265 \u2211 0, \u210e\nwhere = log"}, {"heading": "3.3.3. Web Services and Parallel Execution on two Hierarchal Levels", "text": "The previous technique divided the work based on feature type. Now we further distribute the calculations in a feature type to another set of machines in the next hierarchical level as shown in figure 5. Pseudocode of Two level Master, five sub-master, and N slaves\n Given example images (x , y ), \u2026 , (x , y ) where y = 0,1 for negative and positive examples respectively.  Prepare one master workstation, five sub-masters, and twenty five slaves.  Each sub-master and its slaves are assigned to one particular feature type.\n (sub-master 1 and 5 slaves, Three rectangles Horizontal)  (sub-master 2 and 5 slaves, Three rectangles Vertical)  (sub-master 3 and 5 slaves, Two rectangles Horizontal)  (sub-master 4 and 5 slaves, Two rectangles Vertical)  (sub-master 5 and 5 slaves, Four rectangles)\n On all slaves\u2019 workstations: Initialize all images on each slave.  On master workstation:\n Initialize weights w , = , for y = 0,1 respectively, where m and l are the number of negatives and positives respectively.  For t = 1, \u2026 , T \u2236 1. Normalize the weights, w , \u2190\n, \u2211 , so that w is a probability distribution.\n2. Send the weights to all sub-masters, and then sub-master sends them to its slaves. 3. Sub-masters divide the features between their slaves, where each slave\nresponsible for some parts of the features. 4. On each slave:\na. For each feature,j, train a classifier h which is restricted to using a single feature. The error is evaluated with respect to w , \u03f5 =\u2211 w |h (x ) \u2212 y |.\nb. Send the classifier,h , with the lowest error \u03f5 , to the assigned sub-master workstation. c. Each sub-master choose the classifier,h , with the lowest error \u03f5 amongst their slaves and send it to the master.\n5. On master workstation: a. Amongst the received classifiers from each sub-master, choose the\nclassifier,h , with the lowest error \u03f5 . b. Update the weights: w , =w , \u03b2 where e = 0 if example x is classified\ncorrectly, e = 1 otherwise, and \u03b2 = .  The final strong classifier is:\nh(x) = 1, \u2211 \u03b1 h (x) \u2265 \u2211 \u03b1 0, otherwise\nwhere \u03b1 = log"}, {"heading": "3. EXPERIMENTAL RESULTS", "text": "We developed four variations of the AdaBoost algorithm, as follows:\n Sequential algorithm.  Parallel on one machine that only uses TPL.  Web Services and Parallel execution on one hierarchal level.  Web Services and Parallel execution on two hierarchal levels. Table 3 shows a comparison of the different approaches we implemented. These results show a significant improvement in speedup as compared to the previous work reported in [1]. We obtain a speedup of 95.1 as compared to a speedup of 2.6 reported in [1]. Figure 6 shows the parallel execution time of our implementation as the number of slaves is increased. With 31 machines, an execution time per feature of 4.8 second is achieved.\nTo be able to predict the speedup for any number of machines available, we develop the following predictive equation for calculating parallel execution time based on the number of nodes in the last level attached to one sub-master node in the middle level (see figure 6 and 7).\n= (0.2 \u2217 ) + 0.5\n1000 \u2217 ( ) Where is the number of nodes attached to a one sub-master node, and is the maximum number of features allocated to one sub-master node. It is noticed that increasing number of nodes in the last level beyond 7 per feature type is not going to further help in speeding up execution. Since communication overhead in the network is going to dominate. Table 4, 5 and 6, and figure 6 explain that."}, {"heading": "5. CONCLUSIONS", "text": "We have developed a hybrid parallel and distributed implementation of AdaBoost algorithm that exploits the multiple cores in a CPU via light weight threads, and also uses multiple machines via web service software architecture to achieve high scalability. We also develop a novel hierarchical web services based distributed architecture for maximal exploitation of concurrency in the AdaBoost algorithm. We demonstrate nearly linear speedup upto the number of processors available to us, and can accomplish the learning of a feature in the AdaBoost algorithm within a few seconds. This may be particularly useful in applications where the classifier needs to be dynamically adapted to changing training set data e.g., in car model detection. In comparison with the previously published work, which used a single level master slave parallel and distributed implementation [8], and only achieved a speedup of 2.66 using four nodes, we achieve a speedup of 95.1 on 31 workstations each having a quadcore processor, resulting in a learning time of only 4.8 seconds per feature. Our future work involves developing a learning framework that can adapt to different object detection needs in a near real time manner."}], "references": [{"title": "A distributed parallel AdaBoost algorithm for face detection", "author": ["H. ZheHuang", "S. Xiaodong"], "venue": "Intelligent Computing and Intelligent Systems (ICIS), 2010 IEEE International Conference on, 2010, pp. 147-150.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2010}, {"title": "A Survey of Recent Advances in Face Detection", "author": ["Z.Z.C. Zhang"], "venue": "Technical Report 66, Microsoft Research, Redmond, Washington, USA (June 2010).", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2010}, {"title": "Detecting faces in images: a survey", "author": ["Y. Ming-Hsuan"], "venue": "Pattern Analysis and Machine Intelligence, IEEE Transactions on, vol. 24, pp. 34-58, 2002.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2002}, {"title": "Robust Real-Time Face Detection", "author": ["P. Viola", "M.J. Jones"], "venue": "Int. J. Comput. Vision, vol. 57, pp. 137-154, 2004.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2004}, {"title": "A decision-theoretic generalization of on-line learning and an application to boosting", "author": ["Y. Freund", "R.E. Schapire"], "venue": "presented at the Proceedings of the Second European Conference on Computational Learning Theory, 1995.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1995}, {"title": "The design of a task parallel library", "author": ["D. Leijen"], "venue": "presented at the Proceedings of the 24th ACM SIGPLAN conference on Object oriented programming systems languages and applications, Orlando, Florida, USA, 2009.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2009}, {"title": "Haar Classifiers for Object Detection with CUDA", "author": ["A. Obukhov"], "venue": "GPU Computing Gems Emerald Edition (Applications of GPU Computing Series). vol. (1), W.-m. W. Hwu, Ed., ed: Morgan Kaufmann's Applications of GPU Computing Series, 2011.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "A General Framework for Object Detection", "author": ["C.P. Papageorgiou"], "venue": "presented at the Proceedings of the Sixth International Conference on Computer Vision, 1998.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1998}], "referenceMentions": [{"referenceID": 0, "context": "In comparison with the previously published work, which used a single level master-slave parallel and distributed implementation [1] and only achieved a speedup of 2.", "startOffset": 129, "endOffset": 132}, {"referenceID": 0, "context": ", [1-4].", "startOffset": 2, "endOffset": 7}, {"referenceID": 1, "context": ", [1-4].", "startOffset": 2, "endOffset": 7}, {"referenceID": 2, "context": ", [1-4].", "startOffset": 2, "endOffset": 7}, {"referenceID": 3, "context": ", [1-4].", "startOffset": 2, "endOffset": 7}, {"referenceID": 2, "context": "A survey on face detection techniques presented in [3] classifies recent work into four major categories: First, knowledge-based methods where human knowledge is the basis for face determination.", "startOffset": 51, "endOffset": 54}, {"referenceID": 3, "context": "Viola and Jones have used this method in [4] and their algorithm has proven to be very successful in real time face detection.", "startOffset": 41, "endOffset": 44}, {"referenceID": 4, "context": "For learning of the face detection classifier, Viola Jones\u2019 algorithm uses AdaBoost [5] on a training set of approximately 5000 faces and 10,000 non faces.", "startOffset": 84, "endOffset": 87}, {"referenceID": 5, "context": ", Task Parallel Library [6] allows creation of light weight threads where the cost to launch a thread is only 50 assembly language instructions as opposed to approximately 200 instructions for a regular thread.", "startOffset": 24, "endOffset": 27}, {"referenceID": 0, "context": "A recent work at a parallel and distributed implementation of AdaBoost has been reported in [1].", "startOffset": 92, "endOffset": 95}, {"referenceID": 6, "context": "Another parallel implementation of face detection has carried out on GPUs in [7] and have demonstrated the improvement in face detection time of the Haar feature based Adaboost algorithm to about 30 frames per second (FPS) using CUDA on the GeForce GTX 480 GPU.", "startOffset": 77, "endOffset": 80}, {"referenceID": 3, "context": "One of the main contributions of Viola and Jones is the integral image [4].", "startOffset": 71, "endOffset": 74}, {"referenceID": 3, "context": "The features extraction in Viola Jones\u2019 algorithm are based on Haar basis functions [4, 8].", "startOffset": 84, "endOffset": 90}, {"referenceID": 7, "context": "The features extraction in Viola Jones\u2019 algorithm are based on Haar basis functions [4, 8].", "startOffset": 84, "endOffset": 90}, {"referenceID": 3, "context": "To calculate the value of each one of the features, the sum of pixels located in the white side of the rectangle are subtracted from the dark side [4].", "startOffset": 147, "endOffset": 150}, {"referenceID": 3, "context": "The set of faces which we use for training purpose is the same one that has been used by Viola and Jones for face detection [4].", "startOffset": 124, "endOffset": 127}, {"referenceID": 4, "context": "Viola and Jones have used AdaBoost to combine weak classifiers into a stronger classifier [5].", "startOffset": 90, "endOffset": 93}, {"referenceID": 3, "context": "The conventional AdaBoost algorithm works by assigning good features relatively higher weight and the poor ones a smaller weight to determine the best weak classifier [4].", "startOffset": 167, "endOffset": 170}, {"referenceID": 5, "context": "The advantage of using TPL is noticed in multi-core CPUs, where the declared parallel workload is automatically distributed between the different CPU cores by creating light weight threads called tasks [6].", "startOffset": 202, "endOffset": 205}, {"referenceID": 0, "context": "These results show a significant improvement in speedup as compared to the previous work reported in [1].", "startOffset": 101, "endOffset": 104}, {"referenceID": 0, "context": "6 reported in [1].", "startOffset": 14, "endOffset": 17}, {"referenceID": 7, "context": "In comparison with the previously published work, which used a single level master slave parallel and distributed implementation [8], and only achieved a speedup of 2.", "startOffset": 129, "endOffset": 132}], "year": 2013, "abstractText": "AdaBoost is an important algorithm in machine learning and is being widely used in object detection. AdaBoost works by iteratively selecting the best amongst weak classifiers, and then combines several weak classifiers to obtain a strong classifier. Even though AdaBoost has proven to be very effective, its learning execution time can be quite large depending upon the application e.g., in face detection, the learning time can be several days. Due to its increasing use in computer vision applications, the learning time needs to be drastically reduced so that an adaptive near real time object detection system can be incorporated. In this paper, we develop a hybrid parallel and distributed AdaBoost algorithm that exploits the multiple cores in a CPU via light weight threads, and also uses multiple machines via a web service software architecture to achieve high scalability. We present a novel hierarchical web services based distributed architecture and achieve nearly linear speedup up to the number of processors available to us. In comparison with the previously published work, which used a single level master-slave parallel and distributed implementation [1] and only achieved a speedup of 2.66 on four nodes, we achieve a speedup of 95.1 on 31 workstations each having a quad-core processor, resulting in a learning time of only 4.8 seconds per feature.", "creator": null}}}