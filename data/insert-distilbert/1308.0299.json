{"id": "1308.0299", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Aug-2013", "title": "Exact and Heuristic Methods for the Assembly Line Worker Assignment and Balancing Problem", "abstract": "in traditional assembly lines, it is reasonable to assume that task execution times are the same for each worker. however, in sheltered work placement centres for disabled this assumption is not valid : some workers may execute some tasks considerably slower or even be incapable of either executing them. worker heterogeneity leads to a problem called the assembly line worker assignment and balancing problem ( alwabp ). for a fixed number of workers the problem is designed to gradually maximize the production rate of an assembly line employee by assigning workers to stations and tasks analogous to workers, even while satisfying precedence constraints between the tasks. this paper introduces valuable new heuristic and exact methods to solve this problem. we present a new mip model, propose a novel heuristic algorithm based on beam search, as well as a task - oriented branch - and - bound procedure which uses new reduction rules and lower bounds for solving the problem. extensive dedicated computational tests on scheduling a large set of instances show that these methods are effective and improve over existing ones.", "histories": [["v1", "Thu, 1 Aug 2013 18:49:07 GMT  (23kb)", "http://arxiv.org/abs/1308.0299v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.DM cs.DS", "authors": ["leonardo borba", "marcus ritt"], "accepted": false, "id": "1308.0299"}, "pdf": {"name": "1308.0299.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["lmborba@inf.ufrgs.br", "mrpritt@inf.ufrgs.br"], "sections": [{"heading": null, "text": "ar X\niv :1\n30 8.\n02 99\nv1 [\nare the same for each worker. However, in sheltered work centres for disabled this assumption is not valid: some workers may execute some tasks considerably slower or even be incapable of executing them. Worker heterogeneity leads to a problem called the assembly line worker assignment and balancing problem (ALWABP). For a fixed number of workers the problem is to maximize the production rate of an assembly line by assigning workers to stations and tasks to workers, while satisfying precedence constraints between the tasks.\nThis paper introduces new heuristic and exact methods to solve this problem. We present a new MIP model, propose a novel heuristic algorithm based on beam search, as well as a task-oriented branch-and-bound procedure which uses new reduction rules and lower bounds for solving the problem. Extensive computational tests on a large set of instances show that these methods are effective and improve over existing ones."}, {"heading": "1 Introduction", "text": "The Universal Declaration of Human Rights states that \u201ceveryone has the right to work, to free choice of employment, to just and favourable conditions of work and to protection against unemployment\u201d (United Nations, 1948). Despite this, low employment rates still demonstrate the lack of job opportunities for more than 785 million persons with disabilities, including 110 million with a severe deficiency degree, due to factors like prejudices and absence of appropriate technical preparation (Organisation for Economic Co-Operation and Development, 2003). This deficit lead to the creation of programs for the social inclusion of persons with disabilities. Some of them concern their qualification (World Health Organization, 2011), while others ensure opportunities by quota laws (Lobato, 2009). Countries like Spain, Japan and Switzerland merged these two forms by creating Sheltered Work Centres for Disabled (SWDs) (Chaves, 2009), which employ mainly persons with disabilities and provide training and a first job opportunity for them (Miralles et al., 2007). SWDs are not-for-profit industries applying all revenues in improvements for the company and the creation of new jobs.\nMiralles et al. (2007) have shown that using assembly lines in SWDs has advantages, because the division of work into smaller tasks can effectively hide the differences among the workers. Furthermore, the execution of repetitive tasks, when properly assigned, can be an excellent therapeutic treatment for workers with disabilities. Traditional approaches to the optimization of assembly lines assume that the workers have similar abilities and are capable of executing the tasks in the same time. The most basic model of this kind is the Simple Assembly Line Balancing Problem (SALBP), which has been extensively studied in the literature (Scholl and Becker, 2006b). Several authors have considered stochastic models of assembly lines, where task times may vary, and remedial actions are taken if the cycle time is exceeded at some station (Silverman and Carter, 1986; Kottas and Lau, 1976; Lyu, 1997). In this paper we are not directly concerned with varying task times of a single worker, but with the case of SWDs, where the workers need different times to execute the tasks, or may even be incapable of executing some of them. To model such a situation, Miralles et al. (2008) proposed the Assembly Line Worker Assignment and Balancing Problem (ALWABP), which assigns tasks to different workers and these workers to the workstations."}, {"heading": "1.1 Problem Definition", "text": "Let S be a set of stations, W be a set of workers, |W | = |S|, and T be a set of tasks. Each workstation s \u2208 S is placed along a conveyor belt and is assigned to exactly one worker w \u2208W , which is responsible for executing a subset of tasks xw \u2286 T . The tasks are partially ordered, and we assume that the partial order is given by a transitively reduced directed acyclic graph G(T,E) on the tasks, such that for an arc (t, t \u2032) \u2208 E task t precedes task t \u2032. Therefore, the station that executes task t cannot be placed later than that of task t \u2032 on the conveyor belt. The execution time of task t for worker w is ptw. If a worker w cannot execute a task t, ptw is set to \u221e.\nThe total execution time of worker w is Dw = \u2211t\u2208xw pwt . The cycle time C of the line is defined by the maximum total execution time maxw\u2208W Dw. In assembly line balancing, a problem of type 1 aims to reduce the number of stations for a given cycle time. Since in SWDs the goal is to include all workers, our problem is of type 2, and aims to minimize the cycle time for a\ngiven number of stations and the same number of workers. A valid solution is an assignment of workers to stations together with an assignment of tasks to workers that satisfies the precedence constraints.\nFigure 1 shows an example of an ALWABP-2 instance. For the assignment given in the figure, we have Dw1 = 5, Dw2 = 6, Dw3 = 5, and a cycle time of C = max{Dw1 ,Dw2 ,Dw3}= 6."}, {"heading": "1.2 Related Work", "text": "The majority of the publications on the ALWABP-2 is dedicated to the application of metaheuristics to find approximate solutions to the problem. Two clustering search methods were proposed by Chaves et al. (2007, 2009), which were outperformed on large instances by a tabu search of Moreira and Costa (2009). Blum and Miralles (2011) proposed an iterated beam search based on the station-oriented branch-and-bound procedure of Miralles et al. (2008). Later, Moreira et al. (2012) used a constructive heuristic with various combinations of priority rules to produce initial solutions for a genetic algorithm (GA). Mutlu et al. (2013) developed an iterated GA that produces valid orders of tasks and applies iterated local search to attribute the tasks in the selected order to the workers.\nTo the best of our knowledge, the only exact method for the ALWABP-2 is the branch-andbound procedure of Miralles et al. (2008). It embeds a station-oriented, depth-first branch-andbound search in a linear lower bound search for the optimal cycle time, and is limited to very small instances."}, {"heading": "1.3 Structure of the paper", "text": "In Section 2 we introduce a new MIP model for the ALWABP-2. In Section 3 we present several lower bounds for the problem. A new heuristic for ALWABP-2 is proposed in Section 4. In Section 5 we present a task-oriented branch-and-bound method for solving the problem exactly. Computational results are presented and analyzed in Section 6. We conclude in Section 7."}, {"heading": "2 Mathematical formulation", "text": "In this section we will present a new mixed-integer model for the ALWABP-2. Currently, the only model used in the literature, called M1 here, is the one proposed by Miralles et al. (2008). It has O(|T | |W | |S|) variables, and O(|T |+ |E|+ |W | |S|) constraints. In the following we will use the notation defined in Table 1."}, {"heading": "2.1 Formulation with two-index variables", "text": "Our formulation is based on the observation that it is sufficient to assign tasks to workers and to guarantee that the directed graph over the workers, induced by the precedences between the tasks, is acyclic. Therefore our model uses variables xwt such that xwt = 1 if task t \u2208 T has been assigned to worker w \u2208 W , and dvw such that dvw = 1 if worker v \u2208 W must precede worker w \u2208W . In this way, we obtain a model M2 as follows:\nminimize C, (1)\nsubject to \u2211 t\u2208Aw ptw xwt \u2264C, \u2200w \u2208W, (2)\n\u2211 w\u2208At xwt = 1, \u2200t \u2208 T, (3) dvw \u2265 xvt + xwt \u2032 \u22121, \u2200(t, t \u2032) \u2208 E,v \u2208 At ,w \u2208 At \u2032 \\{v}, (4)\nduw \u2265 duv +dvw \u22121, \u2200{u,v,w} \u2286W, |{u,v,w}| = 3, (5)\ndvw +dwv \u2264 1, \u2200v \u2208W,w \u2208W \\{v}, (6)\nxwt \u2208 {0,1}, \u2200w \u2208W, t \u2208 Aw, (7)\ndvw \u2208 {0,1}, \u2200v \u2208W,w \u2208W \\{v}, (8)\nC \u2208 R. (9)\nConstraint (2) defines the cycle time C of the problem. Constraint (3) ensures that every task is executed by exactly one worker. The dependencies between workers are defined by\nconstraint (4): when a task t is assigned to worker v and precedes another task t \u2032 assigned to a different worker w, worker v must precede worker w. Constraints (5) and (6) enforce transitivity and anti-symmetry of the worker dependencies. As a consequence of these constraints, the workers of a valid solution can always be ordered linearly."}, {"heading": "2.2 Continuity constraints", "text": "We can strengthen the above model by the following observation: if two tasks i and k are assigned to the same worker w, then all tasks j that are simultaneously successors of i and predecessors of k should also be assigned to w. These continuity constraints generalize constraints proposed by Peeters and Degraeve (2006) for single station loads in the SALBP to several stations:\nxw j \u2265 xwt + xwk \u22121, \u2200i \u2208 T, j \u2208 F \u2217 i ,k \u2208 F \u2217 j ,w \u2208 Ai \u2229A j \u2229Ak. (10)\nSimilarly, if task i is assigned to worker w, but some successor (predecessor) j of i is unfeasible for w, then no successor (predecessor) of j can be assigned to w. This justifies the constraints\nxwk + xwi \u2264 1, \u2200i \u2208 T, j \u2208 F \u2217 i ,k \u2208 F \u2217 j ,w \u2208 Ai \u2229 (T \\A j)\u2229Ak. (11)\nLet model M3 be model M2 with additional constraints (10) and (11). Model M3 has O(|W |(|T |+ |W |)) variables, and O(|E\u2217||T ||W |+ |W |3 + |E||W |2) constraints, i.e. it has less variables but more constraints than M1. As will be seen in Section 6 model M3 gives significantly better bounds than M1."}, {"heading": "3 Lower bounds", "text": "Lower bounds for ALWABP-2 can be obtained by different relaxations of the problem. In this section we discuss relaxations of the mixed-integer model presented above, as well as relaxations to SALBP-2 and R ||Cmax."}, {"heading": "3.1 Relaxation to SALBP-2", "text": "If we relax the task processing times to their minimum p\u2212t = min{ptw | w \u2208W}, ALWABP-2 reduces to SALBP-2. Therefore, all valid lower bounds for SALBP-2 apply to this relaxation. In particular, we use the lower bounds\nLC1 = max\n{\nmax{p\u2212t | t \u2208 T},\n\u2308\n\u2211 t\u2208T (p\u2212t )/|S|\n\u2309\n}\nand\nLC2 = max\n{\n\u2211 0\u2264i\u2264k p\u2212k|S|+1\u2212i\n\u2223 \u2223 \u2223 1 \u2264 k \u2264\n\u230a\n|T |\u22121 |W |\n\u230b\n}\n.\n(The bound LC2 supposes that the tasks are ordered such that p \u2212 1 \u2265 \u00b7\u00b7 \u00b7 \u2265 p \u2212 |T |.) We further use the SALBP-2 bounds on the earliest and latest possible station of task t for a given cycle time C\nEt(C) =\n\u2308\n(\n\u2211 j\u2208P\u2217i p\u2212j + p \u2212 t\n)\n/C\n\u2309\nand (12)\nLt(C) = |S|+1\u2212\n\u2308\n(\n\u2211 j\u2208F\u2217i p\u2212j + p \u2212 t\n)\n/C\n\u2309\n(13)\nto obtain the lower bound LC3, defined as the smallest cycle time C such that Et(C)\u2264 Lt(C) for all t \u2208 T . For more details on these bounds we refer the reader to the survey of Scholl and Becker (2006a).\n3.2 Relaxation to R ||Cmax\nBy removing the precedence constraints the ALWABP-2 reduces to the problem of minimizing the makespan of the tasks on unrelated parallel machines (R ||Cmax), which itself is an NP-hard problem. Several effective lower bounds for R || Cmax have been proposed by Martello et al. (1997). Their lower bounds L1 and L2 are obtained by Lagrangian relaxation of the cycle time constraints (2) and the assignment constraints (3), respectively. Martello et al. (1997) further propose an additive improvement that can be applied to L1 to obtain a bound La1 \u2265 L1, as well as an improvement by cuts on disjunctions, that may be applied to La1 and L2 to obtain lower bounds L a 1 \u2265 L a 1 and L2 \u2265 L2."}, {"heading": "3.3 Linear relaxation of ALWABP-2 models", "text": "Bounds obtained from linear relaxations of integer models for the SALBP-2 are usually weaker than the SALBP-2 bounds of Section 3.1. However, the relaxation to minimum task execution times weakens the SALBP-2 bounds considerably. Therefore, the linear relaxations of model M3 provides a useful lower bound for the ALWABP-2 (Moreira et al., 2012)."}, {"heading": "4 Heuristic search procedure", "text": "In this section, we describe a heuristic algorithm IPBS for the ALWABP-2. It systematically searches for a small cycle time by trying to solve the feasibility problem ALWABP-F for different candidate cycle times from an interval ending at the current best upper bound. For each candidate cycle time C, a probabilistic beam search tries to find a feasible allocation."}, {"heading": "4.1 Probabilistic beam search for the ALWABP-F", "text": "The basis for the probabilistic beam search is a station-based assignment procedure, which assigns tasks in a forward manner station by station. For each station it repeatedly selects an available task, until no such task has an execution time less than the idle time of the current station. A task is available if all its predecessors have been assigned already. If there are several\navailable tasks the highest priority task as defined by a prioritization rule is assigned next. The procedure succeeds if an assignment using at most the available number of stations is found. Station-based procedures can be also applied in a backward manner, assigning tasks whose successors have been assigned already. For this it is sufficient to apply a forward procedure to an instance with reversed dependencies. For the ALWABP we additionally have to decide which worker to assign to the current station. This is accomplished by applying the task assignment procedure to all workers which are not yet assigned, and then choosing the best worker for the current station by a worker prioritization rule.\nThe probabilistic beam search extends the station-oriented assignment procedure in two aspects. First, when assigning tasks to the current station, it randomly chooses one of the available tasks with a probability proportional to its priority. Second, it applies beam search to find the best assignment of workers and their corresponding tasks.\nBeam search is a truncated breadth-first tree search procedure (Lowerre, 1976; Ow and Morton, 1988). When applied to the ALWABP-F, it maintains a set of partial solutions called the beam during the station-based assignment. The number of solutions in the beam is called its width \u03b3 . Beam search extends a partial solution by assigning each available worker to the next station, and for each worker, chooses the tasks to execute according to the above probabilistic rule. For each worker this is repeated several times, to select different subsets of tasks. The number of repetitions is the beam\u2019s branching factor f . Among all new partial solutions the algorithm selects those of highest worker priority to form the new beam. The number of solutions selected is at most the beam width.\nTask and worker prioritization rules are important for the efficacy of station-oriented assignment procedure. Moreira et al. (2012) compared the performance of 16 task priority rules and three worker prioritization rules for the ALWABP-2. We have chosen the task priority rule MaxPW\u2212 and the worker priority rule MinRLB, which have been found to produce the best results in average for the problem. The task prioritization rule MaxPW\u2212 gives preference to tasks with larger minimum positional weight pw\u2212t = p \u2212 t +\u2211t \u2032\u2208F\u2217t p \u2212 t \u2032 . The worker prioritization rule MinRLB gives preference to workers with smaller restricted lower bound \u2211t\u2208Tu p \u2212 t (Wu)/|Wu|, where p\u2212t (W \u2032) = minw\u2208W \u2032 ptw with the set Wu \u2286W corresponding to the unassigned workers and Tu \u2286 T to the set of unassigned tasks of a partial assignment. Before computing MinRLB we apply to each partial solution the logic of the continuity constraints (10) and (11) to strengthen the bound. If tasks i and k have been assigned already to some worker w, we also assign all tasks succeeding i and preceding k to w. Similarly, if i has been assigned to w and some successor (predecessor) j of i is infeasible for w we set pkw = \u221e for all successors (predecessors) k of j. The probabilistic beam search is shown in Algorithm 1."}, {"heading": "4.2 The interval search method IPBS", "text": "An upper bound search starts from a known feasible cycle time and tries to reduce it iteratively. A common strategy is to reduce it successively by one and to try to find a better feasible solution by some heuristic algorithm. However, it is well known that heuristic assignment procedures are not monotone, i.e., they may find a feasible solution for some cycle time but not for larger cycle times. To overcome this, we propose to modify the upper bound search to examine an interval of cycle times ending at the current best upper bound. If the current lower and upper\nAlgorithm 1: Probabilistic beam search input : A set of stations S, a candidate cycle time C, a beam width \u03b3 and a beam factor f . output: A valid assignment or \u201cfailed\u201d if no valid assignment could be found. 1 B \u2190 { /0}; /* current set of partial assignments */ 2 for k \u2208 S do 3 B\u2032 \u2190 /0; 4 for s \u2208 B do 5 for f times do 6 for all unassigned workers w \u2208W do 7 s\u2032 \u2190 s concatenated with a new empty station k; 8 while there are available tasks P that do not overload the current station do 9 select a task t \u2208 P with probability proportional to MaxPW\u2212(t); 10 assign t to station k in s\u2032; 11 if all tasks in T are assigned in s\u2032 then return Solution s\u2032; 12 else if |B\u2032|< \u03b3 then B\u2032 \u2190 B\u2032\u222a{s\u2032}; 13 else 14 o \u2190 argmin{MinRLB(o\u2032) | o\u2032 \u2208 B\u2032}; 15 if MinRLB(s\u2032)> MinRLB(o) then B\u2032 \u2190 B\u2032\u222a{s\u2032}\\{o}; 16 B \u2190 B\u2032; 17 return \u201cfailed\u201d;\nbounds on the cycle time are C and C, the upper bound search will try to find a feasible solution for all cycle times between max{C, \u230a pC \u230b\n} and C \u2212 1 for a given factor p \u2208 (0,1) and update C to the best cycle time found, if any. Otherwise, the upper bound search continues with the same interval. Since the beam search is probabilistic this may produce a feasible solution in a later trial. The interval search depends on three parameters: the minimum search time tmin, the maximum search time tmax and the maximum number of repetitions r. The search terminates if the cycle time found equals the lower bound, or if the maximum time or the maximum number of repetitions are exceeded, but not before the minimum search time has passed.\nInitially, the value of C is set to the best of all lower bounds presented in Section 3. The initial upper bound C is determined by an single run of the beam search with a beam factor of one."}, {"heading": "4.3 Improvement by local search", "text": "A local search is applied to the results found by interval search method. It focuses on critical stations whose load equals the cycle time of the current assignment. It tries to remove tasks from a critical station in order to reduce the cycle time. Since there can be multiple critical stations, a move is considered successful if it reduces the number of critical stations. The local search applies the following four types of moves, until the assignment cannot be improved any more.\n1. A shift of a task from a critical station to another station.\n2. A swap of two tasks. At least one of the tasks must be on a critical station.\n3. A sequence of two shift moves. Here the first shift move is allowed to produce a worse result than the initial assignment.\n4. A swap of workers between two stations without reassigning the tasks."}, {"heading": "5 Task-oriented branch-and-bound algorithm", "text": "In this section we propose a branch-and-bound algorithm for ALWABP-2 using the bounds and the heuristic presented in the previous sections.\nThe algorithm first computes a heuristic solution by running the probabilistic beam search. It also applies the lower bounds LC1,LC2,LC3,M3,L a 1,L2 at the root node to obtain an initial lower bound. If the solution cannot be proven optimal at the root node, the algorithm proceeds with a depth-first search. In branch-and-bound algorithms for assembly line balancing two branching strategies are common. The station-oriented method proceeds by stations and branches on all feasible maximal loads for the current station, while the task-oriented method, proceeds by tasks and branches on all possible stations for the current task. The most effective methods for SALBP use station-oriented branching. However, for the ALWABP the additional worker selection substantially increases the branching factor of the station-oriented approach. A workeroriented strategy, on the other hand, has to consider much more station loads, since all subsets of unassigned tasks which satisfy the continuity constraints (10) are candidates to be assigned to a worker. Therefore, we use a task-oriented branching strategy.\nThe proposed task-oriented method executes the recursive procedure shown in Algorithm 2. At each new node it applies the lower bounds LC1,LC2,LC3,L a 1 (line 7), since the lower bounds M3 and L2 are too slow to be applied during the search, although they obtain the best bounds. When a complete solution has been found, the algorithm updates the incumbent (line 2). Otherwise, it selects an unassigned task t (line 4) and assigns it to all feasible workers (loop in lines 5\u201311).\nAlgorithm 2: branchTasks(llb,A) Input : An upper bound gub, a set A \u2286 T of assigned tasks, and a local lower bound llb.\n1 if A = T then 2 if llb < gub then gub \u2190 llb; 3 return 4 select a task t \u2208 T \\A ; 5 foreach w \u2208W | assignmentIsValid(t,w) do 6 apply reduction rules; 7 newllb \u2190 lower bound with new assignment (t,w); 8 if newllb < gub then 9 setAssignment(t,w);\n10 branchTasks(newllb,A\u222a{t}); 11 unsetAssignment(t,w);\nFor branching, the task with the largest number of infeasible workers is chosen in line 4. A worker is considered infeasible, if the allocation of the task to the worker creates an immediate cyclic worker dependency or the lower bound LC1 after the assignment is at least the value of the incumbent. In case of ties, the task with the largest lower bound is chosen, where the lower bound of a task is the smallest lower bound LC1 over its feasible workers. This rule gives preference to tasks that tighten the lower bound early. Any remaining tie is broken by the task\nindex. After the task has been chosen, a branch is created for each valid worker. The branches are visited in order of non-decreasing lower bounds. Again, ties are broken by the worker index."}, {"heading": "5.1 Valid assignments", "text": "The algorithm maintains a directed graph H on the set of workers to verify efficiently if the precedence constraints are satisfied. It contains an edge (w,w\u2032) if there is some task t assigned to w and another task t \u2032 assigned to w\u2032, such that (t, t \u2032) \u2208 E\u2217. The graph H also contains all resulting transitive edges. For a valid assignment of tasks, H must be acylic. If this is the case, any topological sorting defines a valid assignment of workers to stations. The procedure assignmentIsValid(t,w) verifies in time O(|T ||W |) if the assignment of task t to worker w would insert an arc into H whose inverse arc exists already. Before branching to a new node, the procedure setAssignment(t,w) inserts such arcs into H and computes the new transitive closure in time O(|T ||W |). This is undone by unsetAssignment(t,w) when backtracking. To speed up the selection of a task for branching, we do not consider the violation of transitive dependencies in H in line 4, but only the creation of an immediate cyclic worker dependency, which results from inserting an edge (w,w\u2032) for which (w\u2032,w) is already present. This can be tested in time O(|Pt |+ |Ft|)."}, {"heading": "5.2 Reduction rules", "text": "After a task t has been assigned to a worker w, and before branching, we apply several more costly reduction rules to strengthen the lower bounds (line 6). First, we can set ptw\u2032 = \u221e for any w\u2032 6= w. Second, we can enforce the continuity constraints (10) and (11). An application of (10) may assign further tasks to w, and the application of (11) may exclude some tasks from being assigned to w (whose execution time is set to pt \u2032w = \u221e). Finally, we can exclude a taskworker assignment (t \u2032,w) if the total execution time ptw+ pt \u2032w+\u2211u\u2208i(t,t \u2032) puw of the tasks i(t, t \u2032)= (P\u2217t \u2229F \u2217 t \u2032 )\u222a (F \u2217 t \u2229P \u2217 t \u2032 ) between t and t\n\u2032 is more than or equal to the current upper bound. These rules are repeatedly applied until no more tasks can be assigned or excluded."}, {"heading": "6 Computational results", "text": "All algorithms were implemented in C++ and compiled with the GNU C compiler 4.6.3 with maximum optimization. The MIP models and their linear relaxations were solved using the commercial solver CPLEX 12.3. The experiments were done on a PC with a 2.8 GHz Core i7 930 processor and 12 GB of main memory, running a 64-bit Ubuntu Linux. All tests used only one core. Details of the results reported in this section are available online 1."}, {"heading": "6.1 Test instances", "text": "A set of 320 test instances has been proposed by Chaves et al. (2007). They are characterized by five experimental factors: the number of tasks, the order strength (OS)2, the number of workers\n1http://www.inf.ufrgs.br/algopt 2The order strength is number of precedence relations of the instance in percent of all possible relations\n(|T | 2 ) .\n(|W |), the task time variability (Var), and the percentage of infeasible task-worker pairs (Inf). All factors take two levels, as shown in Table 2, defining 32 groups of 10 instances. The instances are based on the SALBP instances Heskia (low |T |, low OS) , Roszieg (low |T |, high OS), Wee-mag (high |T |, low OS), and Tonge (high |T |, high OS). The first worker of each instance executes task t \u2208 T in time pt of the corresponding SALBP instance, and the remaining workers have an execution time randomly selected in the interval [1, pi] (low variability) or [1,2pi] (high variability)."}, {"heading": "6.2 Comparison of lower bounds", "text": "We first compare the strength of the lower bounds proposed in Section 3. To compute the lower bound L1 we use the ascent direction method of van de Velde (1993). This bound was improved to L a 1, as proposed by Martello et al. (1997). Their method applies a binary search for the best improved bound, which is obtained by solving |S| knapsack problems of capacity C for each trial cycle time C. Different from Martello et al. (1997) we solve the all-capacities knapsack problem by dynamic programming only once and use the resulting table during the binary search. The knapsack problems that arise when computing L2 and L2 by subgradient optimization are solved similarly.\nFigure 2 shows the average relative deviation in percent from the best known value and the average computation time over all 320 instances. Looking at the models, the lower bound of M2 is significantly better than M1, and the addition of the continuity constraints improves the relative deviation by another 10%, yielding the best lower bound overall. The computation time of the three models is comparable, with M3 being slower than the other two models. The linear relaxation of R ||Cmax is slightly worse that M2, but two orders of magnitude faster. The bounds L1 and L a 1 achieve about the same quality an order of magnitude faster than R ||Cmax. The lower bounds from the relaxation to SALBP are weaker than most of the other lower bounds, except LC1, but another order of magnitude faster.\nFor the branch-and-bound we chose to use the lower bounds from the relaxation to SALBP and L\na 1, since the other bounds are too costly to be applied at every node of the branch-and-bound\ntree. We include all of the faster bounds, since they yield complementary results. In particular LC1 obtains the best bound in average at the root node, but is less effective during the search."}, {"heading": "6.3 Comparison of MIP models", "text": "We next compare the performance of the new MIP models with that of model M1. Table 3 shows the average number of nodes and the average computation time needed to solve the instances to optimality for the 16 groups with a low number of tasks. The instance groups Tonge and Wee-Mag with a high number of tasks are not shown, since none of them could be solved to optimality within an hour.\nOverall model M2 needs significantly more nodes than M1, and is a factor of about two slower. It executes more nodes per second, and has a better lower bound, but CPLEX is able to apply more cuts for model M1 at the root, such that in average model M2 has no advantage on the tested instances. However, when the continuity constraints are applied, model M3 needs significantly less nodes and time compared to model M1 (confirmed by a Wilcoxon signed rank test with p < 0.01). The results show that the continuity constraints are very effective, in particular for a high order strength and for high numbers of workers."}, {"heading": "6.4 Results for the IPBS heuristic", "text": "We compare IPBS with three state of the art heuristic methods for the ALWABP-2, namely the hybrid genetic algorithm (HGA) of Moreira et al. (2012), the iterated beam search (IBS) of Blum and Miralles (2011), and the iterative genetic algorithm (IGA) of Mutlu et al. (2013). In\npreliminary experiments we determined reasonable parameters for the probabilistic beam search as shown in Table 4. For the HGA and the IBS we compare in Table 5 the relative deviation from the current best known value (Gap) and the computation time (t), in average for each group of instances and over 20 replications per instance. We further report the average computation time to find the best value (tb), and the average relative deviation of the best solution of the 20 replications (Gapb). The total computation time of Blum and Miralles (2011) is always 120s more than the time to find the best value, and has been omitted from the table.\nWe can see that the problem can be considered well solved for a low number of tasks, since all three methods find the optimal solution with a few exceptions in less than ten seconds. In six instance groups the IPBS terminates in less than the minimum search time, since the solution was provably optimal. For instances with a high number of tasks, IBS produces better solutions for more workers, while the HGA is better on less workers. IPBS always achieves better results than both methods (confirmed by a Wilcoxon signed rank test with p < 0.01). This holds for the\naverages as well as the best found solutions (except the first instance group of Wee-Mag, where the best solution of IPBS is slightly worse than that of the HGA). IPBS is also very robust in the sense that the difference between average and best relative deviations is the smallest of the three methods. In average over all instances, its solutions are 1.8% over the best known values. Since the best known values are known to be optimal for 307 of the 320 instances, the gap is close to optimal.\nTo compare execution times, we have to consider that the results have been obtained on different machines (for IBS a PC with a 2.2 GHz AMD64X2 4400 processor and 4GB of main memory, for HGA a PC with a Core 2 Duo 2.2 GHz processor in 3 GB of main memory). A conservative assumption is that their performance is within a factor of two of each other. Taking this into account, over all instances HGA and IBS have comparable computation times, and the IPBS is about a factor two faster. This holds for finding the best solution and also for the total computation time. (Remember that the total computation time of IBS is 120 s longer than the\ntime to find the best solution.) The faster average computation times are mainly due to the instances with a high number of tasks, for which IPBS scales better. The best solutions are almost always found in less than 30 seconds.\nFor all heuristics, the computation time is significantly less for a low number of tasks, a low number of workers, and a low order strength. Similarly, the relative deviations are smaller for a low number of tasks and low order strength. However, the relative deviation does not depend significantly on the number of workers, except for the HGA, which produces better solution for a low number of workers. (These findings are confirmed by a Wilcoxon signed rank test at significance level p < 0.01.) For IBS and IBPS there is an interaction between the number of workers and the order strength: both produce better solutions for a low number of workers and a high order strength or vice versa.\nSince for the IGA no detailed results are available, we compare in Table 6 with the summarized values reported by Mutlu et al. (2013): the average cycle time (C), the average cycle time\nof the best found solution (Cb), and the average computation time to find the best value (tb). The values are again averages for all groups of instances, but over only 10 replications for the IGA. The results for our method are the same as in Table 5 but in absolute values. Note that this evaluation may mask large deviations in instances with low cycle times and overestimate small deviations for high cycle times.\nAs the other methods, the IGA solves the small instances optimally, but not the larger ones. Compared to our method, its average performance is worse except for three groups of wee-mag with a low number of workers, where the average cycle time is about 0.2 lower. The comparison is similar for the best found values, where the IGA is better by 0.4 in a single group. In average over all large instances our method produces a cycle time of about 1 unit less.\nThe execution times of the two methods are comparable. The results of Mutlu et al. (2013) have been obtained on a Intel Core 2 Duo T5750 processor running at 2.0 GHz, whose performance is within a factor of three from our machine. Taking this into account, our methods find the best value about 50% faster.\nIn summary, the results show that IPBS can compete with and often outperforms the other methods in solution quality as well as computation time. The difference to the other methods is smallest for the large instances with a low order strength and a low number of workers. IPBS in general is very robust over the entire set of instances."}, {"heading": "6.5 Results for the branch-and-bound algorithm", "text": "We evaluated the branch-and-bound algorithm on the same 320 test instances. For the tests, IPBS was used to produce an initial heuristic solution. It was made deterministic by fixing a random seed of 42 and configured with a minimum search time of 0s and a maximum search time of |T ||W |/10s. During the search the number of iterations of the ascent direction method to compute L1 has been limited to 50, and the number of iterations for the subgradient optimization to compute L2 to 20.\nThe only other branch-and-bound algorithm in the literature proposed by Miralles et al. (2008) for the ALWABP-2 has been found inferior to model M1 by Chaves et al. (2009) in tests with CPLEX (version 10.1). We therefore limit our comparison to the MIP models. We first compare our approach to CPLEX on the best model M3 on the instances with a low number of tasks in Table 7. In Table 8 we then present the results of the branch-and-bound algorithm with a time limit of one hour on the larger instances. CPLEX is not able to solve any of the models on the instances with a high number of tasks within this time limit.\nTable 7 shows the average solving time and the average number of nodes in the branch-andbound tree for all instance groups with a low number of workers. On these instances both methods have a similar performance, solving all instances in a few seconds, and are even competitive with the heuristic methods. In most cases the branch-and-bound algorithm needs fewer nodes than CPLEX, except for five groups with a low number of workers. Computation times are also comparable, although the time of the branch-and-bound algorithm is dominated by the initial heuristic.\nTable 8 shows the results of the branch-and-bound algorithm on the larger instances. We report the number of optimal solutions found (Opt) and the number of solutions proven to be optimal (Prov), the average computation time (t), the average relative deviation from the best\nknown value (Gap), and the average cycle time for each group of instances (C). In about 70% of the instances the optimal solution was found, and about 60% of the solutions could be proven to be optimal within the time limit. All except four instances with a high order strength were solved. The average relative deviation over all 320 instances is 0.60%, about one third of the average case of the best heuristic.\nAs expected, the solution times are higher than those of the heuristic methods but for the instances with a high order strength only about an order of magnitude, in average. The solving time depends mainly on the number of tasks, the number of workers, and the order strength (as confirmed by a Kruskal-Wallis test followed by Wilcoxon signed rank post hoc tests at significance level p < 0.01). The instances with a high order strength or a low number of workers are easier to solve, because the reduction rules are more effective."}, {"heading": "7 Conclusion", "text": "We have presented a new MIP model, a heuristic search procedure and an exact algorithm for solving the Assembly Line Worker Assignment and Balancing Problem of type 2. The new MIP model shows the importance of including continuity constraints in this type of problem, and its linear relaxation gives the current best lower bound for the problem. The proposed heuristic IPBS is competetive with the current best methods, often outperforms them in computation time and solution quality, and shows a robust performance over the complete set of 320 test instances. Finally, the branch-and-bound method can solve instances with a low number of tasks in a few seconds, and was able to optimally solve 95 of the 160 instances with a high number of tasks for the first time.\nWith respect to the problem, constraints that enforce continuity have shown to be the most effective way of strengthening the lower bounds in the models as well as the heuristic and exact algorithm. Besides the size of the instance, the number of workers and the order strength has the strongest influence on the problem difficulty. All methods are able to solve instances with a high order strength better. This also holds for the branch-and-bound algorithm on instances with a low number of workers.\nOur results show that assembly lines with heterogeneous workers can be balanced robustly and close to optimal for problems of sizes of about 75 tasks and 20 workers. Problems of this size arise, for example, in Sheltered Work Centers for Disabled, and we hope that these methods will contribute to a better integration of persons with disabilities in the labour market. A very interesting future line of research in this context may be the integration of persons with disabilities into larger assembly lines with regular workers."}], "references": [{"title": "On solving the assembly line worker assignment and balancing problem via beam search", "author": ["Christian Blum", "Crist\u00f3bal Miralles"], "venue": null, "citeRegEx": "Blum and Miralles.,? \\Q2011\\E", "shortCiteRegEx": "Blum and Miralles.", "year": 2011}, {"title": "Clustering Search Approach for the Assembly Line Worker Assignment and Balancing Problem", "author": ["A A Chaves", "C Miralles", "L A N Lorena"], "venue": "Proc. ICC&IE,", "citeRegEx": "Chaves et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Chaves et al\\.", "year": 2007}, {"title": "Hybrid Metaheuristic for the Assembly Line Worker Assignment and Balancing Problem", "author": ["Antonio Chaves", "Luiz Lorena", "Cristobal Miralles"], "venue": "Hybrid Metaheuristics,", "citeRegEx": "Chaves et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Chaves et al\\.", "year": 2009}, {"title": "Uma meta-heur\u0131\u0301stica h\u0131\u0301brida com busca por agrupamentos aplicada a problemas de otimiza\u00e7\u00e3o combinat\u00f3ria", "author": ["Antonio Augusto Chaves"], "venue": "PhD thesis, Instituto Nacional de Pesquisas Espaciais,", "citeRegEx": "Chaves.,? \\Q2009\\E", "shortCiteRegEx": "Chaves.", "year": 2009}, {"title": "A total operating cost model for paced lines with stochastic task", "author": ["John F. Kottas", "Hon-Shiang Lau"], "venue": null, "citeRegEx": "Kottas and Lau.,? \\Q1976\\E", "shortCiteRegEx": "Kottas and Lau.", "year": 1976}, {"title": "Pessoas com defici\u00eancia no mercado de trabalho: implica\u00e7\u00f5es da lei de cotas. Mestrado em educa\u00e7\u00e3o especial", "author": ["Beatriz Cardoso Lobato"], "venue": "Universidade Federal de Sa\u0303o Carlos,", "citeRegEx": "Lobato.,? \\Q2009\\E", "shortCiteRegEx": "Lobato.", "year": 2009}, {"title": "The Harpy Speech Recognition System", "author": ["B Lowerre"], "venue": "PhD thesis,", "citeRegEx": "Lowerre.,? \\Q1976\\E", "shortCiteRegEx": "Lowerre.", "year": 1976}, {"title": "A single-run optimization algorithm for stochastic assembly line balancing problems", "author": ["J. Lyu"], "venue": null, "citeRegEx": "Lyu.,? \\Q1997\\E", "shortCiteRegEx": "Lyu.", "year": 1997}, {"title": "Exact and approximation algorithms for makespan minimization on unrelated parallel machines", "author": ["S. Martello", "F. Soumis", "Paolo Toth"], "venue": null, "citeRegEx": "Martello et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Martello et al\\.", "year": 1997}, {"title": "Branch and Bound Procedures for Solving the Assembly Line Worker Assignment and Balancing Problem: Application to Sheltered Work Centres for Disabled", "author": ["C Miralles", "J P Garc\u0131\u0301a-Sabater", "C Andr\u00e9s", "M Card\u00f3s"], "venue": null, "citeRegEx": "Miralles et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Miralles et al\\.", "year": 2008}, {"title": "Advantages of assembly lines in Sheltered Work Centres for Disabled", "author": ["Crist\u00f3bal Miralles", "Jose Pedro Garc\u0131\u0301a-Sabater", "Carlos Andr\u00e9s", "Manuel Cardos"], "venue": "A case study", "citeRegEx": "Miralles et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Miralles et al\\.", "year": 2007}, {"title": "A Minimalist Yet Efficient Tabu Search for Balancing Assembly Lines with Disabled Workers", "author": ["M C O Moreira", "A M Costa"], "venue": "Anais Do XLI Simpo\u0301sio Brasileiro de Pesquisa Operacional, Porto Seguro,", "citeRegEx": "Moreira and Costa.,? \\Q2009\\E", "shortCiteRegEx": "Moreira and Costa.", "year": 2009}, {"title": "Simple heuristics for the assembly line worker assignment and balancing problem", "author": ["Mayron Moreira", "Marcus Ritt", "Alysson Costa", "Antonio Chaves"], "venue": null, "citeRegEx": "Moreira et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Moreira et al\\.", "year": 2012}, {"title": "An iterative genetic algorithm for the assembly line worker assignment and balancing problem of type-II", "author": ["\u00d6zcan Mutlu", "Olcay Polat", "Aliye Ayca Supciller"], "venue": null, "citeRegEx": "Mutlu et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mutlu et al\\.", "year": 2013}, {"title": "An linear programming based lower bound for the simple assembly line balancing problem", "author": ["Marc Peeters", "Zeger Degraeve"], "venue": null, "citeRegEx": "Peeters and Degraeve.,? \\Q2006\\E", "shortCiteRegEx": "Peeters and Degraeve.", "year": 2006}, {"title": "State-of-the-art exact and heuristic solution procedures for simple assembly line balancing", "author": ["Armin Scholl", "Christian Becker"], "venue": null, "citeRegEx": "Scholl and Becker.,? \\Q2006\\E", "shortCiteRegEx": "Scholl and Becker.", "year": 2006}, {"title": "State-of-the-art exact and heuristic solution procedures for simple assembly line balancing", "author": ["Armin Scholl", "Christian Becker"], "venue": null, "citeRegEx": "Scholl and Becker.,? \\Q2006\\E", "shortCiteRegEx": "Scholl and Becker.", "year": 2006}, {"title": "A cost-based methodology for stochastic line balancing with intermittent line stoppages", "author": ["Fred N. Silverman", "John C. Carter"], "venue": null, "citeRegEx": "Silverman and Carter.,? \\Q1986\\E", "shortCiteRegEx": "Silverman and Carter.", "year": 1986}, {"title": "Duality-Based Algorithms for Scheduling Unrelated Parallel Machines", "author": ["S L van de Velde"], "venue": null, "citeRegEx": "Velde.,? \\Q1993\\E", "shortCiteRegEx": "Velde.", "year": 1993}], "referenceMentions": [{"referenceID": 5, "context": "Some of them concern their qualification (World Health Organization, 2011), while others ensure opportunities by quota laws (Lobato, 2009).", "startOffset": 124, "endOffset": 138}, {"referenceID": 3, "context": "Countries like Spain, Japan and Switzerland merged these two forms by creating Sheltered Work Centres for Disabled (SWDs) (Chaves, 2009), which employ mainly persons with disabilities and provide training and a first job opportunity for them (Miralles et al.", "startOffset": 122, "endOffset": 136}, {"referenceID": 10, "context": "Countries like Spain, Japan and Switzerland merged these two forms by creating Sheltered Work Centres for Disabled (SWDs) (Chaves, 2009), which employ mainly persons with disabilities and provide training and a first job opportunity for them (Miralles et al., 2007).", "startOffset": 242, "endOffset": 265}, {"referenceID": 17, "context": "Several authors have considered stochastic models of assembly lines, where task times may vary, and remedial actions are taken if the cycle time is exceeded at some station (Silverman and Carter, 1986; Kottas and Lau, 1976; Lyu, 1997).", "startOffset": 173, "endOffset": 234}, {"referenceID": 4, "context": "Several authors have considered stochastic models of assembly lines, where task times may vary, and remedial actions are taken if the cycle time is exceeded at some station (Silverman and Carter, 1986; Kottas and Lau, 1976; Lyu, 1997).", "startOffset": 173, "endOffset": 234}, {"referenceID": 7, "context": "Several authors have considered stochastic models of assembly lines, where task times may vary, and remedial actions are taken if the cycle time is exceeded at some station (Silverman and Carter, 1986; Kottas and Lau, 1976; Lyu, 1997).", "startOffset": 173, "endOffset": 234}, {"referenceID": 3, "context": "Countries like Spain, Japan and Switzerland merged these two forms by creating Sheltered Work Centres for Disabled (SWDs) (Chaves, 2009), which employ mainly persons with disabilities and provide training and a first job opportunity for them (Miralles et al., 2007). SWDs are not-for-profit industries applying all revenues in improvements for the company and the creation of new jobs. Miralles et al. (2007) have shown that using assembly lines in SWDs has advantages, because the division of work into smaller tasks can effectively hide the differences among the workers.", "startOffset": 123, "endOffset": 409}, {"referenceID": 3, "context": "Countries like Spain, Japan and Switzerland merged these two forms by creating Sheltered Work Centres for Disabled (SWDs) (Chaves, 2009), which employ mainly persons with disabilities and provide training and a first job opportunity for them (Miralles et al., 2007). SWDs are not-for-profit industries applying all revenues in improvements for the company and the creation of new jobs. Miralles et al. (2007) have shown that using assembly lines in SWDs has advantages, because the division of work into smaller tasks can effectively hide the differences among the workers. Furthermore, the execution of repetitive tasks, when properly assigned, can be an excellent therapeutic treatment for workers with disabilities. Traditional approaches to the optimization of assembly lines assume that the workers have similar abilities and are capable of executing the tasks in the same time. The most basic model of this kind is the Simple Assembly Line Balancing Problem (SALBP), which has been extensively studied in the literature (Scholl and Becker, 2006b). Several authors have considered stochastic models of assembly lines, where task times may vary, and remedial actions are taken if the cycle time is exceeded at some station (Silverman and Carter, 1986; Kottas and Lau, 1976; Lyu, 1997). In this paper we are not directly concerned with varying task times of a single worker, but with the case of SWDs, where the workers need different times to execute the tasks, or may even be incapable of executing some of them. To model such a situation, Miralles et al. (2008) proposed the Assembly Line Worker Assignment and Balancing Problem (ALWABP), which assigns tasks to different workers and these workers to the workstations.", "startOffset": 123, "endOffset": 1568}, {"referenceID": 0, "context": "Two clustering search methods were proposed by Chaves et al. (2007, 2009), which were outperformed on large instances by a tabu search of Moreira and Costa (2009). Blum and Miralles (2011) proposed an iterated beam search based on the station-oriented branch-and-bound procedure of Miralles et al.", "startOffset": 47, "endOffset": 163}, {"referenceID": 0, "context": "Blum and Miralles (2011) proposed an iterated beam search based on the station-oriented branch-and-bound procedure of Miralles et al.", "startOffset": 0, "endOffset": 25}, {"referenceID": 0, "context": "Blum and Miralles (2011) proposed an iterated beam search based on the station-oriented branch-and-bound procedure of Miralles et al. (2008). Later, Moreira et al.", "startOffset": 0, "endOffset": 141}, {"referenceID": 0, "context": "Blum and Miralles (2011) proposed an iterated beam search based on the station-oriented branch-and-bound procedure of Miralles et al. (2008). Later, Moreira et al. (2012) used a constructive heuristic with various combinations of priority rules to produce initial solutions for a genetic algorithm (GA).", "startOffset": 0, "endOffset": 171}, {"referenceID": 0, "context": "Blum and Miralles (2011) proposed an iterated beam search based on the station-oriented branch-and-bound procedure of Miralles et al. (2008). Later, Moreira et al. (2012) used a constructive heuristic with various combinations of priority rules to produce initial solutions for a genetic algorithm (GA). Mutlu et al. (2013) developed an iterated GA that produces valid orders of tasks and applies iterated local search to attribute the tasks in the selected order to the workers.", "startOffset": 0, "endOffset": 324}, {"referenceID": 0, "context": "Blum and Miralles (2011) proposed an iterated beam search based on the station-oriented branch-and-bound procedure of Miralles et al. (2008). Later, Moreira et al. (2012) used a constructive heuristic with various combinations of priority rules to produce initial solutions for a genetic algorithm (GA). Mutlu et al. (2013) developed an iterated GA that produces valid orders of tasks and applies iterated local search to attribute the tasks in the selected order to the workers. To the best of our knowledge, the only exact method for the ALWABP-2 is the branch-andbound procedure of Miralles et al. (2008). It embeds a station-oriented, depth-first branch-andbound search in a linear lower bound search for the optimal cycle time, and is limited to very small instances.", "startOffset": 0, "endOffset": 608}, {"referenceID": 9, "context": "Currently, the only model used in the literature, called M1 here, is the one proposed by Miralles et al. (2008). It has O(|T | |W | |S|) variables, and O(|T |+ |E|+ |W | |S|) constraints.", "startOffset": 89, "endOffset": 112}, {"referenceID": 14, "context": "These continuity constraints generalize constraints proposed by Peeters and Degraeve (2006) for single station loads in the SALBP to several stations:", "startOffset": 64, "endOffset": 92}, {"referenceID": 15, "context": "For more details on these bounds we refer the reader to the survey of Scholl and Becker (2006a).", "startOffset": 70, "endOffset": 96}, {"referenceID": 8, "context": "Several effective lower bounds for R || Cmax have been proposed by Martello et al. (1997). Their lower bounds L1 and L2 are obtained by Lagrangian relaxation of the cycle time constraints (2) and the assignment constraints (3), respectively.", "startOffset": 67, "endOffset": 90}, {"referenceID": 8, "context": "Several effective lower bounds for R || Cmax have been proposed by Martello et al. (1997). Their lower bounds L1 and L2 are obtained by Lagrangian relaxation of the cycle time constraints (2) and the assignment constraints (3), respectively. Martello et al. (1997) further propose an additive improvement that can be applied to L1 to obtain a bound L1 \u2265 L1, as well as an improvement by cuts on disjunctions, that may be applied to L1 and L2 to obtain lower bounds L a 1 \u2265 L a 1 and L2 \u2265 L2.", "startOffset": 67, "endOffset": 265}, {"referenceID": 12, "context": "Therefore, the linear relaxations of model M3 provides a useful lower bound for the ALWABP-2 (Moreira et al., 2012).", "startOffset": 93, "endOffset": 115}, {"referenceID": 6, "context": "Beam search is a truncated breadth-first tree search procedure (Lowerre, 1976; Ow and Morton, 1988).", "startOffset": 63, "endOffset": 99}, {"referenceID": 6, "context": "Beam search is a truncated breadth-first tree search procedure (Lowerre, 1976; Ow and Morton, 1988). When applied to the ALWABP-F, it maintains a set of partial solutions called the beam during the station-based assignment. The number of solutions in the beam is called its width \u03b3 . Beam search extends a partial solution by assigning each available worker to the next station, and for each worker, chooses the tasks to execute according to the above probabilistic rule. For each worker this is repeated several times, to select different subsets of tasks. The number of repetitions is the beam\u2019s branching factor f . Among all new partial solutions the algorithm selects those of highest worker priority to form the new beam. The number of solutions selected is at most the beam width. Task and worker prioritization rules are important for the efficacy of station-oriented assignment procedure. Moreira et al. (2012) compared the performance of 16 task priority rules and three worker prioritization rules for the ALWABP-2.", "startOffset": 64, "endOffset": 920}, {"referenceID": 1, "context": "A set of 320 test instances has been proposed by Chaves et al. (2007). They are characterized by five experimental factors: the number of tasks, the order strength (OS)2, the number of workers 1http://www.", "startOffset": 49, "endOffset": 70}, {"referenceID": 17, "context": "To compute the lower bound L1 we use the ascent direction method of van de Velde (1993). This bound was improved to L a 1, as proposed by Martello et al.", "startOffset": 75, "endOffset": 88}, {"referenceID": 8, "context": "This bound was improved to L a 1, as proposed by Martello et al. (1997). Their method applies a binary search for the best improved bound, which is obtained by solving |S| knapsack problems of capacity C for each trial cycle time C.", "startOffset": 49, "endOffset": 72}, {"referenceID": 8, "context": "This bound was improved to L a 1, as proposed by Martello et al. (1997). Their method applies a binary search for the best improved bound, which is obtained by solving |S| knapsack problems of capacity C for each trial cycle time C. Different from Martello et al. (1997) we solve the all-capacities knapsack problem by dynamic programming only once and use the resulting table during the binary search.", "startOffset": 49, "endOffset": 271}, {"referenceID": 11, "context": "We compare IPBS with three state of the art heuristic methods for the ALWABP-2, namely the hybrid genetic algorithm (HGA) of Moreira et al. (2012), the iterated beam search (IBS) of Blum and Miralles (2011), and the iterative genetic algorithm (IGA) of Mutlu et al.", "startOffset": 125, "endOffset": 147}, {"referenceID": 0, "context": "(2012), the iterated beam search (IBS) of Blum and Miralles (2011), and the iterative genetic algorithm (IGA) of Mutlu et al.", "startOffset": 42, "endOffset": 67}, {"referenceID": 0, "context": "(2012), the iterated beam search (IBS) of Blum and Miralles (2011), and the iterative genetic algorithm (IGA) of Mutlu et al. (2013). In", "startOffset": 42, "endOffset": 133}, {"referenceID": 0, "context": "The total computation time of Blum and Miralles (2011) is always 120s more than the time to find the best value, and has been omitted from the table.", "startOffset": 30, "endOffset": 55}, {"referenceID": 12, "context": "Table 5: Comparison of the proposed heuristic with a hybrid genetic algorithm (Moreira et al., 2012) and an iterated beam search (Blum and Miralles, 2011).", "startOffset": 78, "endOffset": 100}, {"referenceID": 0, "context": ", 2012) and an iterated beam search (Blum and Miralles, 2011).", "startOffset": 36, "endOffset": 61}, {"referenceID": 13, "context": "Table 6: Comparison of the proposed heuristic with an iterated genetic algorithm (Mutlu et al., 2013).", "startOffset": 81, "endOffset": 101}, {"referenceID": 13, "context": "Since for the IGA no detailed results are available, we compare in Table 6 with the summarized values reported by Mutlu et al. (2013): the average cycle time (C), the average cycle time", "startOffset": 114, "endOffset": 134}, {"referenceID": 13, "context": "The results of Mutlu et al. (2013) have been obtained on a Intel Core 2 Duo T5750 processor running at 2.", "startOffset": 15, "endOffset": 35}, {"referenceID": 6, "context": "The only other branch-and-bound algorithm in the literature proposed by Miralles et al. (2008) for the ALWABP-2 has been found inferior to model M1 by Chaves et al.", "startOffset": 72, "endOffset": 95}, {"referenceID": 1, "context": "(2008) for the ALWABP-2 has been found inferior to model M1 by Chaves et al. (2009) in tests with CPLEX (version 10.", "startOffset": 63, "endOffset": 84}], "year": 2013, "abstractText": "In traditional assembly lines, it is reasonable to assume that task execution times are the same for each worker. However, in sheltered work centres for disabled this assumption is not valid: some workers may execute some tasks considerably slower or even be incapable of executing them. Worker heterogeneity leads to a problem called the assembly line worker assignment and balancing problem (ALWABP). For a fixed number of workers the problem is to maximize the production rate of an assembly line by assigning workers to stations and tasks to workers, while satisfying precedence constraints between the tasks. This paper introduces new heuristic and exact methods to solve this problem. We present a new MIP model, propose a novel heuristic algorithm based on beam search, as well as a task-oriented branch-and-bound procedure which uses new reduction rules and lower bounds for solving the problem. Extensive computational tests on a large set of instances show that these methods are effective and improve over existing ones.", "creator": "LaTeX with hyperref package"}}}