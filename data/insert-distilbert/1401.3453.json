{"id": "1401.3453", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Jan-2014", "title": "The Computational Complexity of Dominance and Consistency in CP-Nets", "abstract": "we investigate the computational complexity of testing dominance and consistency in cp - nets. previously, the program complexity of dominance has been determined for restricted classes ( in which the dependency constraints graph of composing the cp - net is acyclic. however, there are preferences of interest that will define cyclic dependency graphs ; these are modeled with general lattice cp - d nets. in our main results, we literally show here that both dominance and consistency formulas for general hierarchy cp - nets are pspace - complete. we then consider the concept of strong dominance, dominance equivalence and dominance incomparability, and several notions of optimality, and identify the complexity of overcoming the algorithm corresponding conditional decision problems. the reductions used in the proofs are from strips tree planning, and thus reinforce the earlier established connections between both areas.", "histories": [["v1", "Wed, 15 Jan 2014 05:13:25 GMT  (226kb)", "http://arxiv.org/abs/1401.3453v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["judy goldsmith", "jerome lang", "miroslaw truszczyski", "nic wilson"], "accepted": false, "id": "1401.3453"}, "pdf": {"name": "1401.3453.pdf", "metadata": {"source": "CRF", "title": "The Computational Complexity of Dominance and Consistency in CP-Nets", "authors": ["Judy Goldsmith", "J\u00e9r\u00f4me Lang", "Miroslaw Truszczy\u0144ski", "Nic Wilson"], "emails": ["GOLDSMIT@CS.UKY.EDU", "LANG@IRIT.FR", "MIREK@CS.UKY.EDU", "N.WILSON@4C.UCC.IE"], "sections": [{"heading": null, "text": "Previously, the complexity of dominance has been determined for restricted classes in which the dependency graph of the CP-net is acyclic. However, there are preferences of interest that define cyclic dependency graphs; these are modeled with general CP-nets. In our main results, we show here that both dominance and consistency for general CP-nets are PSPACE-complete. We then consider the concept of strong dominance, dominance equivalence and dominance incomparability, and several notions of optimality, and identify the complexity of the corresponding decision problems. The reductions used in the proofs are from STRIPS planning, and thus reinforce the earlier established connections between both areas."}, {"heading": "1. Introduction", "text": "The problems of eliciting, representing and computing with preferences over a multi-attribute domain arise in many fields such as planning, design, and group decision making. However, in a multi-attribute preference domain, such computations may be nontrivial, as we show here for the CP-net representation. Natural questions that arise in a preference domain are, \u201cIs this item preferred to that one?\u201d, and \u201cIs this set of preferences consistent?\u201d More formally, a set of preferences is consistent if and only if no item is preferred to itself. We assume that preferences are transitive, i.e., if \u03b1 is preferred to \u03b2, and \u03b2 is preferred to \u03b3, then \u03b1 is preferred to \u03b3.\nAn explicit representation of a preference ordering of elements, also called outcomes, of such multi-variable domains is exponentially large in the number of attributes. Therefore, AI researchers have developed languages for representing preference orderings in a succinct way. The formalism of CP-nets (Boutilier, Brafman, Hoos, & Poole, 1999) is among the most popular ones. A CP-net\nc\u00a92008 AI Access Foundation. All rights reserved.\nprovides a succinct representation of preference ordering on outcomes in terms of local preference statements of the form p : xi > x j, where xi,x j are values of a variable X and p is a logical condition. Informally, a preference statement p : xi > x j means that given p, xi is strictly preferred to x j ceteris paribus, that is, all other things being equal. The meaning of a CP-net is given by a certain ordering relation, called dominance, on the set of outcomes, derived from such reading of preference statements. If one outcome dominates another, we say that the dominant one is preferred.\nReasoning about the preference ordering (dominance relation) expressed by a CP-net is far from easy. The key problems include dominance testing and consistency testing. In the first problem, given a CP-net and two outcomes \u03b1 and \u03b2, we want to decide whether \u03b2 dominates \u03b1. The second problem asks whether there is a dominance cycle in the dominance ordering defined by an input CP-net, that is, whether there is an outcome that dominates (is preferred to) itself.\nWe study the computational complexity of these two problems. The results obtained prior to this work concerned only restricted classes of CP-nets, all requiring that the graph of variable dependencies implied by preference statements in the CP-net be acyclic. Under certain assumptions, the dominance-testing problem is in NP and, under some additional assumptions, even in P (Domshlak & Brafman, 2002; Boutilier, Brafman, Domshlak, Hoos, & Poole, 2004a). We show that the complexity in the general case is PSPACE-complete, and this holds even for the propositional case, by exhibiting in Section 4 a PSPACE-hardness proof for dominance testing.\nWe then turn to consistency testing. While acyclic CP-nets are guaranteed to be consistent, this is not the case with general CP-nets (Domshlak & Brafman, 2002; Brafman & Dimopoulos, 2004). In Section 5, we show that consistency testing is as hard as dominance testing.\nIn the following two sections we study decision problems related to dominance and optimality in CP-nets. First, we consider the complexity of deciding strict dominance, dominance equivalence and dominance incomparability of outcomes in a CP-net. Then, we study the complexity of deciding the optimality of outcomes, and the existence of optimal outcomes, for several notions of optimality.\nTo prove the hardness part of the results, we first establish the PSPACE-hardness of some problems related to propositional STRIPS planning. We then show that these problems can be reduced to CP-net dominance and consistency testing by exploiting connections between actions in STRIPS planning and preference statements in CP-nets.\nThe complexity results in this paper address CP-nets whose dominance relation may contain cycles. Most earlier work has concentrated on the acyclic model. However, as argued earlier, for instance by Domshlak and Brafman (2002), acyclic CP-nets are not sufficiently expressive to capture human preferences on even some simple domains.1 Consider, for instance, a diner who has to choose either red or white wine, and either fish or meat. Given red wine, they prefer meat, and conversely, given meat they prefer red wine. On the other hand, given white wine, they prefer fish, and conversely, given fish they prefer white wine. This gives a consistent cyclic CP-net, and there is no acyclic CP-net giving rise to the same preferences on outcomes. So, such cyclicity of preference variables does not necessarily lead to a cyclic order on outcomes.\n1. We do not mean to say that cyclic CP-nets are sufficient to capture all possible human preferences on simple domains \u2013 this is obviously not true. However, we note that every preference relation extends the preference relation induced by some CP-net with possibly cyclic dependencies. Not only is this property no longer true when cyclic dependencies are precluded but, in the case of binary variables, the number of linear orders that extends some acyclic CP-net is exponentially smaller than the number of all linear orders (Xia, Conitzer, & Lang, 2008).\nWe assume some familiarity with the complexity class PSPACE. We refer to Papadimitriou (1994) for details. In particular, we later use the identities NPSPACE = PSPACE = coPSPACE.\nIn several places, we will consider versions of decision problem, in which input instances are assumed to have some additional property. Such problems are usually formulated in the following way: \u201cQ, given R\u201d2. We first note that \u201cQ, given R\u201d is not the same problem as \u201cQ and R\u201d. Let us recall the definition of a decision problem as presented by Ausiello et al. (1999). A decision problem is a pair P = \u3008IP ,YP \u3009 where IP is a set of strings (formally, a subset of \u03a3\u2217, where \u03a3 is a finite alphabet), The decision problem P = \u3008IP ,YP \u3009 reads as follows: given a string x \u2208 IP , decide whether x \u2208 YP . A problem \u3008IP ,YP \u3009 is in a complexity class C if the language YP \u2286 \u03a3\u2217 is in C (this does not depend on IP ). A problem \u3008IQ ,YQ \u3009 is reducible to \u3008IP ,YP \u3009 if there is a polynomial-time function F such that (1) for every x \u2208 IQ , F(x) \u2208 IP , and (2) for every x \u2208 IQ , x \u2208 YQ if and only if F(x) \u2208 YP . Thus, if P is the decision problem \u201cQ, given R\u201d, then IP is the set of all strings satisfying R, while YP is the set of all strings satisfying R\u2229Q. For all such problems, it is granted that the input belongs to R; to solve them we do not have to check that the input string is indeed an element of R. Such problems \u201cQ, given R\u201d are widespread in the literature. However, in most cases, R is a very simple property, that can be checked in polynomial (and often linear) time, such as \u201cdecide whether a graph possesses a Hamiltonian cycle, given that every vertex has a degree at most 3\u201d. Here, however, we will consider several problems \u201cQ, given R\u201d where R itself is not in the class P (unless the polynomial hierarchy collapses). However, as we said above, the complexity of recognizing whether a given string is in R does not matter. In other words, the complexity of \u201cQ, given R\u201d is the same, whether R can be recognized in unit time or is PSPACE-complete. We will come back to this when the first such problem appears in the paper (cf. the proof of Proposition 5). In no case that we consider is the complexity of R greater than the complexity of Q.\nA part of this paper (up to Section 5) is an extended version of our earlier conference publication (Goldsmith, Lang, Truszczyn\u0301ski, & Wilson, 2005). Sections 6 and 7 are entirely new."}, {"heading": "2. Generalized Propositional CP-Nets", "text": "Let V = {x1, . . . ,xn} be a finite set of variables. For each variable x \u2208V , we assume a finite domain Dx of values. An outcome is an n-tuple (d1, . . . ,dn) of Dx1 \u00d7\u00b7\u00b7 \u00b7\u00d7Dxn .\nIn this paper, we focus on propositional variables: variables with binary domains. Let V be a finite set of propositional variables. For every x \u2208 V , we set Dx = {x,\u00acx} (thus, we overload the notation and write x both for the variable and for one of its values). We refer to x and \u00acx as literals. Given a literal l we write \u00acl to denote the dual literal to l. The focus on binary variables makes the presentation clearer and has no impact on our complexity results.\nWe also note that in the case of binary domains, we often identify an outcome with the set of its values (literals). In fact, we also often identify such sets with the conjunctions of their elements. Sets (conjunctions) of literals corresponding to outcomes are consistent and complete.\nA conditional preference rule (sometimes, a preference rule or just a rule) over V is an expression p : l > \u00acl, where l is a literal of some atom x \u2208V and p is a propositional formula over V that does not involve variable x.\n2. In the literature one often finds the following formulation: \u201cQ, even if R\u201d, which does not have exactly the same meaning as \u201cQ, given R\u201d. Specifically, when saying \u201cQ is NP-complete, even if R\u201d, one means \u201cQ is NP-complete, and Q, given R is NP-complete as well\u201d.\nIn the rest of the paper, we need to refer to two different languages: a conditional preference language where for every (binary) variable x, the conditional preference table for x needs to specify a preferred value of x for every possible assignment of its parent variables, and a more general language where the tables may be incomplete (for some values of its parents, the preferred value of x may not be specified) and/or locally inconsistent (for some values of its parents, the table may both contain the information that x is preferred and the information that \u00acx is preferred). We call these languages respectively CP-nets and GCP-nets (for \u201cgeneralized CP-nets\u201d). Note that GCP-nets are not new, as similar structures have been discussed before (Domshlak, Rossi, Venable, & Walsh, 2003). The reason why we use this terminology (\u201cCP-nets\u201d and \u201cGCP-nets\u201d) is twofold. First, even if the assumptions of completeness and local consistency for CP-nets are sometimes relaxed, most papers on CP-nets do make them. Second, we could have used \u201cCP-nets\u201d and \u201clocally consistent, complete CP-nets\u201d instead of \u201cGCP-nets\u201d and \u201cCP-nets\u201d, but we felt our notation is simpler and more transparent.\nDefinition 1 (Generalized CP-net) A generalized CP-net C (for short, a GCP-net) over V is a set of conditional preference rules. For x \u2208 V we define p+C (x) and p \u2212 C (x), usually written just: p+(x) and p\u2212(x), as follows: p+C (x) is equal to the disjunction of all p such that there exists a rule p : x > \u00acx in C; p\u2212C (x) is the disjunction of all p such that there exists a rule p : \u00acx > x in C. We define the associated directed graph GC (the dependency graph) over V to consist of all pairs (y,x) of variables such that y appears in either p+(x) or p\u2212(x).\nIn our complexity results we will also need the following representation of GCP-nets: a GCPnet C is said to be in conjunctive form if C only contains rules p : l > \u00acl such that p is a (possibly empty) conjunction of literals. In this case all formulas p\u2212(x), p+(x) are in disjunctive normal form, that is, a disjunction of conjunctions of literals (including \u22a4 \u2013 the empty conjunction of literals).\nGCP-nets determine a transitive relation on outcomes, interpreted in terms of preference. A preference rule p : l > \u00acl represents the statement \u201cgiven that p holds, l is preferred to \u00acl ceteris paribus\u201d. Its intended meaning is as follows. If outcome \u03b2 satisfies p and l, then \u03b2 is preferred to the outcome \u03b1 which differs from \u03b2 only in that it assigns \u00acl to variable x. In this situation we say that there is an improving flip from \u03b1 to \u03b2 sanctioned by the rule p : l > \u00acl.\nDefinition 2 If \u03b10, . . . ,\u03b1m is a sequence of outcomes with m \u2265 1 and each next outcome in the sequence is obtained from the previous one by an improving flip, then we say that \u03b10, . . . ,\u03b1m is an improving sequence from \u03b10 to \u03b1m for the GCP-net, and that \u03b1m dominates \u03b10, written \u03b10 \u227a \u03b1m.\nFinally, a GCP-net is consistent if there is no outcome \u03b1 which is strictly preferred to itself, that is, such that \u03b1 \u227a \u03b1.\nThe main objective of the paper is to establish the complexity of the following two problems concerning the notion of dominance associated with GCP-nets (sometimes under restrictions on the class of input GCP-nets).\nDefinition 3 GCP-DOMINANCE: given a GCP-net C and two outcomes \u03b1 and \u03b2, decide whether \u03b1 \u227a \u03b2 in C, that is, whether \u03b2 dominates \u03b1 in C. GCP-CONSISTENCY: given a GCP-net C, decide whether C is consistent.\nGCP-nets extend the notion of CP-nets (Boutilier et al., 1999). There are two properties of GCP-nets that are essential in linking the two notions.\nDefinition 4 A GCP-net C over V is locally consistent if for every x \u2208V , the formula p\u2212C (x)\u2227 p + C (x) is unsatisfiable. It is locally complete if for every x \u2208V , the formula p\u2212C (x)\u2228 p + C (x) is a tautology.\nInformally, local consistency means that there is no outcome in which both x is preferred over \u00acx and \u00acx is preferred over x. Local completeness means that, for every variable x, in every outcome either x is preferred over \u00acx or \u00acx is preferred over x.\nDefinition 5 (Propositional CP-net) A CP-net over the set V of (propositional) variables is a locally consistent and locally complete GCP-net over V .\nIt is not easy to decide whether a GCP-net is actually a CP-net. In fact, the task is coNPcomplete.\nProposition 1 The problem of deciding, given a GCP-net C, whether C is a CP-net is coNPcomplete.\nProof: Deciding whether a GCP-net C is a CP-net consists of checking local consistency and local completeness. Each of these tasks amounts to n validity tests (one for each variable). It follows that deciding whether a GCP-net is a CP-net is the intersection of 2n problems from coNP. Hence, it is in coNP, itself. Hardness comes from the following reduction from UNSAT. To any propositional formula \u03d5 we assign the CP-net C(\u03d5), defined by its set of variables Var(\u03d5)\u222a{z}, where z 6\u2208Var(\u03d5), and the following tables:\n\u2022 for any variable x 6= z: p+C(\u03d5)(x) = \u22a4; p \u2212 C(\u03d5)(x) = \u22a5;\n\u2022 p+C(\u03d5)(z) = \u00ac\u03d5; p \u2212 C(\u03d5)(z) = \u22a5.\nFor any variable x 6= z, we have p+C(\u03d5)(x)\u2227 p \u2212 C(\u03d5)(x) =\u22a5; moreover, p + C(\u03d5)(z)\u2227 p \u2212 C(\u03d5)(z) =\u22a5. Therefore, C(\u03d5) is locally consistent. Now, for any variable x 6= z, we have p+C(\u03d5)(x)\u2228 p \u2212 C(\u03d5)(x) = \u22a4. Moreover, p+C(\u03d5)(z)\u2228 p \u2212 C(\u03d5)(z) = \u00ac\u03d5. Thus, C(\u03d5) is locally complete if and only if \u03d5 is unsatisfiable. It follows that C(\u03d5) is a CP-net if and only if \u03d5 is unsatisfiable.\nMany works on CP-nets make use of explicit conditional preference tables that list every combination of values of parent variables (variables on which x depends) exactly once, each such combination designating either x or \u00acx as preferred.3 Clearly, CP-nets in this restricted sense can be regarded as CP-nets in our sense that, for every variable x, satisfy the following condition:\nif y1, . . . ,yk are all the atoms appearing in p+(x) and p\u2212(x) then every complete and consistent conjunction of literals over {y1, . . . ,yn} appears as a disjunct in exactly one of p+(x) and p\u2212(x).\n3. There are exceptions. Some are discussed for instance by Boutilier et al. (2004a) in Section 6 of their paper.\nUnder this embedding, the concepts of dominance and consistency we introduced here for GCP-nets generalize the ones considered for CP-nets as defined by Boutilier et al. (2004a).\nProblems CP-DOMINANCE and CP-CONSISTENCY are defined analogously to Definition 3. In the paper we are interested in the complexity of dominance and consistency problems for both GCPnets and CP-nets. Therefore, the matter of the way in which these nets (especially CP-nets, as for GCP-nets there are no alternative proposals) are represented is important. Our representation of CP-nets is often more compact than the one proposed by Boutilier et al. (2004a), as the formulas p+(x) and p\u2212(x) implied by the conditional preference tables can often be given equivalent, but exponentially smaller, disjunctive normal form representations. Thus, when defining a decision problem, it is critical to specify the way to represent its input instances, as the representation may affect the complexity of the problem. Unless stated otherwise, we assume that GCP-nets (and thus, CP-nets) are represented as a set of preference rules, as described in Definition 1. Therefore, the size of a GCP-net is given by the total size of the formulas p\u2212(x), p+(x), x \u2208V .\nWe now note a key property of consistent GCP-nets, which we will use several times later in the paper.\nProposition 2 If a GCP-net C is consistent then it is locally consistent.\nProof: If C is not locally consistent then there exists a variable x and an outcome \u03b1 satisfying p\u2212C (x)\u2227 p + C (x). Then \u03b1 \u227a \u03b1 can be shown by flipping x from its current value in \u03b1 to the dual value and then flipping it back: since \u03b1 satisfies p\u2212C (x)\u2227 p + C (x), and since p \u2212 C (x)\u2227 p + C (x) does not involve any occurrences of x, both flips are allowed.\nFinally, we conclude this section with an example illustrating the notions discussed above.\nExample 1 Consider a GCP-net C on variables V = {x,y} with four rules, defined as follows: x : y > \u00acy; \u00acx : \u00acy > y; y : \u00acx > x; \u00acy : x > \u00acx. We have p+(y) = x, p\u2212(y) = \u00acx, p+(x) = \u00acy and p\u2212(x) = y. Therefore C is locally consistent and locally complete, and so is a CP-net.\nThere is a cycle of dominance between outcomes: x\u2227 y \u227a \u00acx\u2227 y \u227a \u00acx\u2227\u00acy \u227a x\u2227\u00acy \u227a x\u2227 y, and so C is inconsistent. This shows that consistency is a strictly stronger property than local consistency."}, {"heading": "3. Propositional STRIPS Planning", "text": "In this section we derive some technical results on propositional STRIPS planning which form the basis of our complexity results in Sections 4 and 5. We establish the complexity of plan existence problems for propositional STRIPS planning under restrictions on input instances that make the problem of use in the studies of dominance and consistency in GCP-nets.\nLet V be a finite set of variables. A state over V is a complete and consistent set of literals over V , which we often view as the conjunction of its members. A state is therefore equivalent to an outcome, defined in a CP-nets context.\nDefinition 6 (Propositional STRIPS planning) By a propositional STRIPS instance we mean a tuple \u3008V,\u03b10,\u03b3,ACT\u3009, where\n1. V is a finite set of propositional variables;\n2. \u03b10 is a state over V , called the initial state;\n3. \u03b3 is a state called the goal;4\n4. ACT is a finite set of actions, where each action a \u2208 ACT is described by a consistent conjunction of literals pre(a) (a precondition) and a consistent conjunction of literals post(a) (a postcondition, or effect).5\nAn action a is executable in a state \u03b1 if \u03b1 |= pre(a). The effect of a in state \u03b1, denoted by eff (a,\u03b1), is the state \u03b1\u2032 containing the same literals as \u03b1 for all variables not mentioned in post(a), and the literals of post(a). We assume that an action can be applied to any state, but that it does not change the state if its preconditions do not hold: if \u03b1 6|= pre(a) (given that states are complete, this is equivalent to \u03b1 |= \u00acpre(a)) then eff (a,\u03b1) = \u03b1. This assumption has no influence as far as complexity results are concerned.\nThe PROPOSITIONAL STRIPS PLAN EXISTENCE problem, or STRIPS PLAN for short, is to decide whether for a given propositional STRIPS instance \u3008V,\u03b10,\u03b3,ACT\u3009 there is a finite sequence of actions leading from the initial state \u03b10 to the final state \u03b3. Each such sequence is a plan for \u3008V,\u03b10,\u03b3,ACT\u3009. A plan is irreducible if every one of its actions changes the state.\nWe assume, without loss of generality, that for any action a, no literal in post(a) appears also in pre(a); otherwise we can omit the literal from post(a) without changing the effect of the action; if post(a) then becomes an empty conjunction, the action a can be omitted from ACT as it has no effect.\nWe have the following result due to Bylander (1994).\nProposition 3 (Bylander, 1994) STRIPS PLAN is PSPACE-complete.\nTypically, propositional STRIPS instances do not require that goals be states. Instead, goals are defined as consistent conjunctions of literals that do not need to be complete. In such a setting, a plan is a sequence of actions that leads from the start state to a state in which the goal holds. We restrict consideration to complete goals. This restriction has no effect on the complexity of the plan existence problem: it remains PSPACE-complete under the goal-completeness restriction (Lang, 2004)."}, {"heading": "3.1 Acyclic STRIPS", "text": "Definition 7 (Acyclic sets of actions) A set of actions ACT (we use the same notation as in Definition 6) is acyclic if there is no state \u03b1 such that \u3008V,\u03b1,\u03b1,ACT\u3009 has a non-empty irreducible plan, that is to say, if there are no non-trivial directed cycles in the graph on states induced by ACT.\nWe will now establish the complexity of the following problem:\nACTION-SET ACYCLICITY: given a set ACT of actions, decide whether ACT is acyclic.\nProposition 4 ACTION-SET ACYCLICITY is PSPACE-complete.\n4. Note that in standard STRIPS the goal can be a partial state. This point is discussed just after Proposition 3. 5. We emphasize that we allow negative literals in preconditions and goals. Some definitions of STRIPS do not allow\nthis. This particular variant of STRIPS is sometimes called PSN (propositional STRIPS with negation) in the literature.\nProof: The argument for the membership in PSPACE is standard; we nevertheless give some details. We will omit such details for further proofs of membership in PSPACE. The following nondeterministic algorithm decides that ACT has a cycle:\nguess \u03b10; \u03b1 := \u03b10; repeat\nguess an action a \u2208 ACT ; \u03b1\u2032 := eff (a,\u03b1); \u03b1 := \u03b1\u2032\nuntil \u03b1 = \u03b10.\nThis algorithm works in nondeterministic polynomial space (because we only need to store \u03b10, \u03b1 and \u03b1\u2032), which shows that ACTION-SET ACYCLICITY is in NPSPACE, and therefore in PSPACE, since NPSPACE = PSPACE. Thus, ACTION-SET ACYCLICITY is in coPSPACE, hence in PSPACE, since coPSPACE = PSPACE.\nWe will now show that the complement of the ACTION-SET ACYCLICITY problem is PSPACEhard by reducing the ACYCLIC STRIPS PLAN problem to it.\nLet PE = \u3008V,\u03b10,\u03b3,ACT\u3009 be an instance of the ACYCLIC STRIPS PLAN problem. In particular, we have that ACT is acyclic. Let a be a new action defined by pre(a) = \u03b3 and post(a) = \u03b10. It is easy to see that ACT \u222a{a} is not acyclic if and only if there exists a plan for PE. Thus, the PSPACEhardness of the complement of the ACTION-SET ACYCLICITY problem follows from Proposition 5. Consequently, the ACTION-SET ACYCLICITY problem is coPSPACE-hard. Since PSPACE = coPSPACE, the ACTION-SET ACYCLICITY problem is PSPACE-hard, as well.\nNext, we consider the STRIPS planning problem restricted to instances that have acyclic sets of actions. Formally, we consider the following problem:\nACYCLIC STRIPS PLAN: Given a propositional STRIPS instance \u3008V,\u03b10,\u03b3,ACT\u3009 such that ACT is acyclic and \u03b10 6= \u03b3, decide whether there is a plan for \u3008V,\u03b10,\u03b3,ACT\u3009\nThis is the first of our problems of the form \u201cQ, given R\u201d that we encounter and it illustrates well the concerns we discussed at the end of the introduction. Here, R is the set of all propositional STRIPS instances \u3008V,\u03b10,\u03b3,ACT\u3009 such that ACT is acyclic, and Q is the set of all such instances for which there is a plan for \u3008V,\u03b10,\u03b3,ACT\u3009. Checking whether a given propositional STRIPS instance is actually acyclic is itself PSPACE-complete (this is what Proposition 4 states), but this does not matter when it comes to solving ACYCLIC STRIPS PLAN: when considering an instance of ACYCLIC STRIPS PLAN, we already know that it is acyclic (and this is reflected in the reduction below).\nProposition 5 ACYCLIC STRIPS PLAN is PSPACE-complete.\nProof: The argument for the membership in PSPACE is standard (cf. the proof of Proposition 4). To prove PSPACE-hardness, we first exhibit a polynomial-time reduction F from STRIPS PLAN. Let PE = \u3008V,\u03b10,\u03b3,ACT\u3009 be an instance of STRIPS PLAN. The idea behind the reduction is to introduce a counter, so that each time an action is executed, the counter is incremented. The counter may count up to 2n, where n = |V |, making use of n additional variables. The counter is initialized to\n0. Once it reaches 2n \u2212 1 it can no longer be incremented and no action can be executed. Hence, the set of actions in the resulting instance of STRIPS PLAN is acyclic: we are guaranteed to produce an instance of R. To describe the reduction, we write V as {x1, . . . ,xn}. We define F(PE) = PE\u2032 = \u3008V \u2032,\u03b1\u20320,\u03b3\u2032,ACT \u2032\u3009 as follows:\n\u2022 V \u2032 = {x1, . . . ,xn,z1, . . . ,zn}, where zi are new variables we will use to implement the counter;\n\u2022 \u03b1\u20320 = \u03b10 \u2227\u00acz1 \u2227\u00b7\u00b7 \u00b7\u2227\u00aczn;\n\u2022 \u03b3\u2032 = \u03b3\u2227 z1 \u2227\u00b7\u00b7 \u00b7\u2227 zn;\n\u2022 for each action a \u2208 ACT , we include in ACT \u2032 n actions ai, 1 \u2264 i \u2264 n, such that:\n\u2013 for i \u2264 n\u22121 : { pre(ai) = pre(a)\u2227\u00aczi \u2227 zi+1 \u2227\u00b7\u00b7 \u00b7\u2227 zn post(ai) = post(a)\u2227 zi \u2227\u00aczi+1 \u2227\u00b7\u00b7 \u00b7\u2227\u00aczn, and\n\u2013 for i = n : { pre(an) = pre(a)\u2227\u00aczn post(an) = post(a)\u2227 zn.\n\u2022 Furthermore, we include in ACT \u2032 n actions bi, 1 \u2264 i \u2264 n, such that:\n\u2013 for i \u2264 n\u22121 : { pre(bi) = \u00aczi \u2227 zi+1 \u2227\u00b7\u00b7 \u00b7\u2227 zn post(bi) = zi \u2227\u00aczi+1 \u2227\u00b7\u00b7 \u00b7\u2227\u00aczn, and\n\u2013 for i = n : { pre(bn) = \u00aczn post(bn) = zn.\nWe will denote states over V \u2032 by pairs (\u03b1,k), where \u03b1 is a state over V and k is an integer, 0 \u2264 k \u2264 2n \u22121. We view k as a compact representation of a state over variables z1, . . . ,zn: assuming that the binary representation of k is d1 . . .dn (with dn being the least significant digit), k represents the state which contains zi if di = 1 and \u00aczi, otherwise. For instance, let V = {x1,x2,x3}. Then we have V \u2032 = {x1,x2,x3,z1,z2,z3}, and the state \u00acx1 \u2227 x2 \u2227 x3 \u2227 z1 \u2227\u00acz2 \u2227 z3 is denoted by (\u00acx1 \u2227 x2 \u2227 x3,5).\nWe note that the effect of ai or bi on state (\u03b1,k) is either void, or increments the counter:\neff (ai,(\u03b1,k)) = { (eff (a,\u03b1),k +1) if ai is executable in (\u03b1,k) (\u03b1,k) otherwise\neff (bi,(\u03b1,k)) = { (\u03b1,k +1) if bi is executable in (\u03b1,k) (\u03b1,k) otherwise\nNext, we remark that at most one ai and at most one bi are executable in a given state (\u03b1,k). More precisely,\n\u2022 if k < 2n\u22121, then exactly one bi is executable in (\u03b1,k); denote by i(k) the index such that bi(k) is executable in (\u03b1,k) (this index depends only on k). We also have that ai(k) is executable in (\u03b1,k), provided that a is executable in \u03b1.\n\u2022 if k = 2n \u22121, then no ai and no bi is executable in (\u03b1,k).\nNow we show that PE\u2032 is acyclic. Assume \u03c0 is an irreducible plan for \u3008V \u2032,\u03b1\u2032,\u03b1\u2032,ACT \u2032\u3009. Let \u03b1\u2032 = (\u03b1,k). If k < 2n \u2212 1, then \u03c0 is empty, since any action in ACT \u2032 in any state either is nonexecutable or increments the counter, and an irreducible plan contains only actions whose effect is non-void. If k = 2n\u22121, then no action of ACT \u2032 is executable in \u03b1\u2032 and again \u03c0 is empty. Thus, there exists no non-empty irreducible plan for \u3008V \u2032,\u03b1\u2032,\u03b1\u2032,ACT \u2032\u3009, and this holds for all \u03b1\u2032. Therefore PE\u2032 is acyclic.\nWe now claim that there is a plan for PE if and only if there is a plan for PE\u2032. First, assume that there is a plan in PE. Let \u03c0 be a shortest plan in PE and let m be its length (the number of actions used). We have m \u2264 2n \u2212 1, since no state along \u03c0 repeats (otherwise, shorter plans than \u03c0 for PE would exist). Let \u03b10,\u03b11, . . . ,\u03b1m = \u03b3 be the sequence of states obtained by executing \u03c0. Let a be the action used in the transition from \u03b1k to \u03b1k+1. Since k < 2n \u22121 (because m \u2264 2n \u22121 and k \u2264 m\u22121), there is exactly one i, 1 \u2264 i \u2264 n, such that the action ai applies at the state (\u03b1,k) over V \u2032. Replacing a with ai in \u03c0 yields a plan that when started at (\u03b10,0) leads to (\u03b1m,m) = (\u03b3,m). Appending that plan with appropriate actions bi to increment the counter to 2n\u22121 yields a plan for PE\u2032. Conversely, if \u03c4 is a plan for PE\u2032, the plan obtained from \u03c4 by removing all actions of the form b j and replacing each action ai with a is a plan for PE, since ai has the same effect on V as a does. Thus, the claim follows.\nWe emphasize that this reduction F from STRIPS PLAN to ACYCLIC STRIPS PLAN (or, equivalently, to STRIPS PLAN given ACTION-SET ACYCLICITY) works because it satisfies the following two conditions:\n1. for every instance PE of STRIPS PLAN, F(PE) is an instance of ACYCLIC STRIPS PLAN (this holds because for every PE, F(PE) is acyclic);\n2. for every PE of STRIPS PLAN, F(PE) is a positive instance of ACYCLIC STRIPS PLAN if and only if PE is a positive instance of STRIPS PLAN."}, {"heading": "3.2 Mapping STRIPS Plans to Single-Effect STRIPS Plans", "text": "Versions of the STRIPS PLAN and ACYCLIC STRIPS PLAN problems that are important for us allow only actions with exactly one literal in their postconditions in their input propositional STRIPS instances. We call such actions single-effect actions.6 We refer to the restricted problems as SE STRIPS PLAN and ACYCLIC SE STRIPS PLAN, respectively.\nTo prove PSPACE-hardness of both problems, we describe a mapping from STRIPS instances to single-effect STRIPS instances.7\nConsider an instance PE = \u3008V,\u03b10,\u03b3,ACT\u3009 of the STRIPS PLAN problem, where ACT is not necessarily acyclic. For each action a \u2208 ACT we introduce a new variable xa, whose intuitive meaning is that action a is currently being executed.\nWe set X = V\na\u2208ACT \u00acxa. That is, X is the conjunction of negative literals of all the additional variables. In addition, for each a \u2208 ACT we set Xa = xa \u2227 V\nb\u2208ACT\u2212{a}\u00acxb. We now define an instance PE\u2032 = \u3008V \u2032,\u03b1\u20320,\u03b3\u2032,S(ACT)\u3009 of the SE STRIPS PLAN problem as follows:\n6. Such actions are also called \u201cunary\u201d actions in the planning literature. We stick to the terminology \u201csingle-effect\u201d although it is less commonly used, simply because it is more explicit. 7. PSPACE-completeness of propositional STRIPS planning with single-effect actions was proved already by Bylander (1994). However, to deal with acyclicity we need to give a different reduction than the one used in that paper.\n\u2022 Set of variables: V \u2032 = V \u222a{xa : a \u2208 ACT};\n\u2022 initial state: \u03b1\u20320 = \u03b10 \u2227X ;\n\u2022 goal state: \u03b3\u2032 = \u03b3\u2227X ;\n\u2022 set of actions: S(ACT) = {ai : a \u2208 ACT, i = 1, . . . ,2|post(a)|+1}. Let a be an action in ACT such that post(a) = l1 \u2227\u00b7\u00b7 \u00b7\u2227 lq, where l1, . . . , lq are literals.\n\u2013 For i = 1, . . . ,q, we define an action ai by setting:\npre(ai) = pre(a)\u2227X \u2227\u00acli; post(a i) = xa.\nThe role of ai is to enforce that Xa holds after ai is successfully applied, and in this way to enable \u201cstarting the execution of a\u201d, provided that no action is currently being executed, that the ith effect of a is not already true, and that the precondition of a is true.\n\u2013 For i = q+1, . . . ,2q, we define action ai by setting:\npre(ai) = Xa; post(a i) = li.\nThe role of ai is to make the ith effect of a true.\n\u2013 Finally, we define a2q+1 by setting:\npre(a2q+1) = Xa \u2227 l1 \u2227\u00b7\u00b7 \u00b7\u2227 lq; post(a 2q+1) = \u00acxa.\nThus, a2q+1 is designed so that X holds after a2q+1 is successfully applied; that is, a2q+1 \u201ccloses\u201d the execution of a, thus allowing for the next action to be executed.\nLet \u03c0 be a sequence of actions in ACT . We define S(\u03c0) to be the sequence of actions in S(ACT) obtained by replacing each action a in \u03c0 by a1, . . . ,a2q+1, where q = |post(a)|. Now consider a sequence \u03c4 of actions from S(ACT). Remove from \u03c4 every action ai such that i 6= 2|post(a)|+ 1, and replace actions of the form a2|post(a)|+1 by a. We denote the resulting sequence of actions from ACT by S\u2032(\u03c4). We note that S\u2032(S(\u03c0)) = \u03c0. The following properties then hold.\nLemma 1 With the above definitions,\n(i) if \u03c0 is a plan for PE then S(\u03c0) is a plan for PE\u2032;\n(ii) if \u03c4 is an irreducible plan for PE\u2032 then S\u2032(\u03c4) is an irreducible plan for PE;\n(iii) ACT is acyclic if and only if S(ACT) is acyclic.\nProof: (i) Let a \u2208 ACT be an action, let \u03b1 be a state and let \u03b2 be the state obtained from \u03b1 by applying a. Let \u03b8 be the V \u2032-state obtained by applying the sequence of actions \u3008a1, . . . ,a2q+1\u3009 (where q = |post(a)|) to the state \u03b1\u2227X of PE\u2032. We will show that \u03b8 = \u03b2\u2227X .\nWe note that if for each i = 1, . . . ,q, state \u03b1\u2227X does not satisfy pre(ai) then the sequence of actions \u3008a1, . . . ,a2q+1\u3009 has no effect, so the state is still \u03b1\u2227X . For this to happen, either \u03b1 doesn\u2019t satisfy pre(a), or all of l1, . . . , lq already hold in \u03b1 so post(a) holds in \u03b1. In either case, \u03b1 = \u03b2, and so \u03b8 = \u03b2\u2227X .\nSuppose now that for some i \u2208 {1, . . . ,q}, \u03b1 does satisfy pre(ai). Then the first such action ai causes xa and hence Xa to hold. After applying actions aq+1, . . . ,a2q, l1 \u2227 \u00b7\u00b7 \u00b7 \u2227 lq holds, and so post(a) holds. After applying a2q+1 both post(a) and X hold. No other variable in V has changed, so \u03b8 = \u03b2\u2227X , as required.\nApplying this result iteratively implies that if \u03c0 is a plan for PE then S(\u03c0) is a plan for PE\u2032.\n(ii) Let \u03c4 be an irreducible plan for PE\u2032, so that every action in \u03c4 changes the state, which implies that every action in \u03c4 is performed in a state where its precondition is true. We will show that S\u2032(\u03c4) is a plan for PE. We will assume that \u03c4 6= /0. When \u03c4 = /0, S\u2032(\u03c4) = /0, too, and the assertion follows.\nWrite the first action in \u03c4 as a j, where a \u2208 ACT , and let \u03c4\u2032 be the maximal initial subsequence of \u03c4 consisting of all actions of the form ai. We must have j \u2264 |post(a)|, since X holds in \u03b1\u20320 (by our assumption above, action a j does apply) and X is inconsistent with the precondition of ai for each i > |post(a)|. Also, pre(a j) and \u00acl j hold in \u03b1\u20320 and so, in \u03b10 as well. Thus, \u03b10 satisfies pre(a), and applying a changes the state, since \u00acl j holds in \u03b10 and post(a) |= l j. Let us denote by \u03b2 the state resulting from applying a to \u03b10. As we noted, \u03b2 6= \u03b10,\nLet \u03b2\u2032 be the state resulting after applying \u03c4\u2032 to \u03b1\u20320. If \u03b2\u2032 is the goal state \u03b3\u2032 then X holds in \u03b2\u2032. If \u03b2\u2032 is not the goal state then \u03c4 6= \u03c4\u2032. Let bi be the action in \u03c4 directly following the last action in \u03c4\u2032. By the definition of \u03c4\u2032, a 6= b. After applying a j, Xa holds, so in \u03b2\u2032 either Xa holds or X holds. Thus, Xb does not hold, as a 6= b. Since bi changes the state, i must be in {1, . . . , |post(b)|}, so X holds in \u03b2\u2032 in this case, too.\nHence the last action in \u03c4\u2032 is a2q+1, where q = |post(a)|. Since the only variables in V which can be affected by actions ai are those that appear in the literals in post(a) and since the action a2q+1 can be executed (otherwise it would not belong to \u03c4), it follows that \u03b2\u2032 = \u03b2\u2227X . Applying this reasoning repeatedly, we show that applying S\u2032(\u03c4) to \u03b10 yields \u03b3, and that each action in S\u2032(\u03c4) changes the state, so S\u2032(\u03c4) is an irreducible plan for PE, which is non-empty if and only if \u03c4 is non-empty.\n(iii) Suppose ACT is not acyclic, so that there exists state \u03b1 and a non-empty irreducible plan \u03c0 for PE\u03b1 = \u3008V,\u03b1,\u03b1,ACT\u3009. Then, by (i), S(\u03c0) is a plan for PE\u2032\u03b1 = \u3008V \u2032,\u03b1\u2227X ,\u03b1\u2227X ,S(ACT )\u3009. Because \u03c0 is non-empty and irreducible, it changes some state, so S(\u03c0) also changes some state, and hence can be reduced to a non-empty irreducible plan for PE\u2032\u03b1. Therefore S(ACT) is not acyclic.\nConversely, suppose that S(ACT) is not acyclic. Then there exists a state \u03b1\u2032 and a non-empty irreducible plan \u03c4 for \u3008V \u2032,\u03b1\u2032,\u03b1\u2032,S(ACT)\u3009. We will first prove that X holds at some state obtained during the execution of this plan.\nSuppose that X holds at no such state, and let a j be the first action in \u03c4. We note that \u03c4 6= /0. By our assumption, X does not hold either before or after applying a j. Therefore q+1 \u2264 j \u2264 2q, where q = |post(a)|. Since \u03c4 is irreducible, a j changes the state. Thus, \u00acl j holds in \u03b1\u2032 and l j holds in the state resulting from \u03b1\u2032 after applying a j.\nBy our assumption, Xa holds before and after applying a j. Thus, the next action, if there is one, must also be of the form ai for q + 1 \u2264 i \u2264 2q. Repeating this argument implies that all actions in \u03c4 are of the form ai where q + 1 \u2264 i \u2264 2q. Since the set of literals in post(a) is consistent, l j is never reset back to \u00acl j. Thus, the state resulting from \u03b1\u2032 after applying \u03c4 is different from \u03b1\u2032, a contradiction.\nThus, X holds at some state reached during the execution of \u03c4. Let us consider one such state. It can be written as \u03b2\u2227X , for some state \u03b2 over V . We can cyclically permute \u03c4 to generate a non-empty irreducible plan \u03c4\u2032 for \u3008V \u2032,\u03b2\u2227X ,\u03b2\u2227X ,S(ACT)\u3009. By part (ii), S\u2032(\u03c4\u2032) is a non-empty\nirreducible plan for \u3008V,\u03b2,\u03b2,ACT\u3009. Therefore ACT is not acyclic.\nProposition 6 SE STRIPS PLAN and ACYCLIC SE STRIPS PLAN are PSPACE-complete.\nProof: Again, the argument for the membership in PSPACE is standard. PSPACE-hardness of ACYCLIC SE STRIPS PLAN is shown by reduction from ACYCLIC STRIPS PLAN. The same construction shows that STRIPS PLAN is reducible to SE STRIPS PLAN, and thus SE STRIPS PLAN is PSPACE-complete.\nLet us consider an instance PE = \u3008V,\u03b10,\u03b3,ACT\u3009 of ACYCLIC STRIPS PLAN. We define PE\u2032 = \u3008V \u2032,\u03b1\u20320,\u03b3\u2032,S(ACT)\u3009, which by Lemma 1(iii) is an instance of the ACYCLIC SE STRIPS PLAN problem. By Lemma 1(i) and (ii) there exists a plan for PE if and only if there exists a plan for PE\u2032. This implies that ACYCLIC SE STRIPS PLAN is PSPACE-hard."}, {"heading": "4. Dominance", "text": "The goal of this section is to prove that the GCP-DOMINANCE problem is PSPACE-complete, and that the complexity does not go down even when we restrict the class of inputs to CP-nets. We use the results on propositional STRIPS planning from Section 3 to prove that the general GCPDOMINANCE problem is PSPACE-complete. We then show that the complexity does not change if we require the input GCP-net to be locally consistent and locally complete.\nThe similarities between dominance testing in CP-nets and propositional STRIPS planning were first noted by Boutilier et al. (1999). They presented a reduction, discussed later in more detail by Boutilier et al. (2004a), from the dominance problem to the plan existence problem for a class of propositional STRIPS planning specifications consisting of unary actions (actions with single effects). We prove our results for the GCP-DOMINANCE and GCP-CONSISTENCY problems by constructing a reduction in the other direction.\nThis reduction is much more complex than the one used by Boutilier et al. (1999), due to the fact that CP-nets impose more restrictions than STRIPS planning. Firstly, STRIPS planning allows multiple effects, but GCP-nets only allow flips x > \u00acx or \u00acx > x that change the value of one variable; this is why we constructed the reduction from STRIPS planning to single-effect STRIPS planning in the last section. Secondly, CP-nets impose two more restrictions, local consistency and local completeness, which do not have natural counterparts in the context of STRIPS planning.\nFor all dominance and consistency problems we consider, the membership in PSPACE can be demonstrated similarly to the membership proof of Proposition 4, namely by considering nondeterministic polynomial space algorithms consisting of repeatedly guessing appropriate improving flips and making use of the fact that PSPACE = NPSPACE = coPSPACE. Therefore, from now on we only provide arguments for the PSPACE-hardness of problems we consider."}, {"heading": "4.1 Dominance for Generalized CP-Nets", "text": "We will prove that the GCP-DOMINANCE problem is PSPACE-complete by a reduction from the problem SE STRIPS PLAN, which we now know to be PSPACE-complete."}, {"heading": "4.1.1 MAPPING SINGLE-EFFECT STRIPS PROBLEMS TO GCP-NETS DOMINANCE PROBLEMS", "text": "Let \u3008V,\u03b10,\u03b3,ACT\u3009 be an instance of the SE STRIPS PLAN problem. For every action a \u2208 ACT we denote by la the unique literal in the postcondition of a, that is, post(a) = la. We denote by pre\u2032(a) the conjunction of all literals in pre(a) different from \u00acla (we recall that by a convention we adopted earlier, pre\u2032(a) does not contain la). We then define ca to be the conditional preference rule pre\u2032(a) : la >\u00acla and define M(ACT) to be the GCP-net C = {ca : a\u2208 ACT}, which is in conjunctive form.\nA sequence of states in a plan corresponds to an improving sequence from \u03b10 to \u03b3, which leads to the following result.\nLemma 2 With the above notation,\n(i) there is a non-empty irreducible plan for \u3008V,\u03b10,\u03b3,ACT\u3009 if and only if \u03b3 dominates \u03b10 in M(ACT);\n(ii) ACT is acyclic if and only if M(ACT) is consistent.\nProof: We first note the following equivalence. Let a be an action in ACT , and let \u03b1 and \u03b2 be different outcomes (or, in the STRIPS setting, states). The action a applied to \u03b1 yields \u03b2 if and only if the rule ca sanctions an improving flip from \u03b1 to \u03b2. This is because a applied to \u03b1 yields \u03b2 if and only if \u03b1 satisfies pre(a) and \u03b1 and \u03b2 differ only on literal la, with \u03b2 satisfying la and \u03b1 satisfying \u00acla. This is if and only if \u03b1 satisfies pre\u2032(a) and \u03b1 and \u03b2 differ only on literal la, with \u03b2 satisfying la, and \u03b1 satisfying \u00acla. This, in turn, is equivalent to say that rule ca sanctions an improving flip from \u03b1 to \u03b2. Proof of (i): Suppose first that there exists a non-empty irreducible plan a1, . . . ,am for \u3008V,\u03b10,\u03b3,ACT\u3009. Let \u03b10,\u03b11, . . . ,\u03b1m = \u03b3 be the corresponding sequence of outcomes, and, for each i = 1, . . . ,m, action ai, when applied in state \u03b1i\u22121, yields different state \u03b1i. By the above equivalence, for each i = 1, . . . ,m, cai sanctions an improving flip from \u03b1i\u22121 to \u03b1i, which implies that \u03b10,\u03b11, . . . ,\u03b1m is an improving flipping sequence in M(ACT), and therefore \u03b3 dominates \u03b10 in M(ACT).\nConversely, suppose that \u03b3 dominates \u03b10 in M(ACT), so that there exists an improving flipping sequence \u03b10,\u03b11, . . . ,\u03b1m with \u03b1m = \u03b3, and m \u2265 1. For each i = 1, . . . ,m, let cai be an element of M(ACT) which sanctions the improving flip from \u03b1i\u22121 to \u03b1i. Then, by the above equivalence, action ai, when applied to state \u03b1i\u22121 yields \u03b1i (which is different from \u03b1i\u22121), and so a1, . . . ,am is a non-empty irreducible plan for \u3008V,\u03b10,\u03b3,ACT\u3009. Proof of (ii): ACT is not acyclic if and only if there exists a state \u03b1 and a non-empty irreducible plan for \u3008V,\u03b1,\u03b1,ACT\u3009. By (i) this is if and only if there exists an outcome \u03b1 which dominates itself in M(ACT), which is if and only if M(ACT) is not consistent.\nTheorem 1 The GCP-DOMINANCE problem is PSPACE-complete. Moreover, this remains so under the restrictions that the GCP-net is consistent and is in conjunctive form.\nProof: PSPACE-hardness is shown by reduction from ACYCLIC SE STRIPS PLAN (Proposition 6). Let \u3008V,\u03b10,\u03b3,ACT\u3009 be an instance of the ACYCLIC SE STRIPS PLAN problem. By Lemma 2(ii), M(ACT) is a consistent GCP-net in conjunctive form. Since \u03b10 6= \u03b3 (imposed in the definition of\nthe problem ACYCLIC SE STRIPS PLAN), there is a plan for \u3008V,\u03b10,\u03b3,ACT\u3009 if and only if there is a non-empty irreducible plan for \u3008V,\u03b10,\u03b3,ACT\u3009, which, by Lemma 2(i), is if and only if \u03b3 dominates \u03b10 in C.\nTheorem 1 implies the PSPACE-completeness of dominance in the more general conditional preference language introduced by Wilson (2004b), where the conditional preference rules are written in conjunctive form."}, {"heading": "4.2 Dominance in CP-Nets", "text": "In this section we show that GCP-DOMINANCE remains PSPACE-complete under the restriction to locally consistent and locally complete GCP-nets, that is, CP-nets. We refer to this restriction of GCP-DOMINANCE as CP-DOMINANCE.\nConsistency of a GCP-net implies local consistency (Proposition 2). Therefore, the reduction in the proof of Theorem 1 (from ACYCLIC SE STRIPS PLAN to GCP-DOMINANCE restricted to consistent GCP-nets) is also a reduction to GCP-DOMINANCE restricted to locally consistent GCP-nets. PSPACE-hardness of ACYCLIC SE STRIPS PLAN (Proposition 6) then implies that GCPDOMINANCE restricted to locally consistent GCP-nets is PSPACE-hard, and, in fact, PSPACEcomplete since membership in PSPACE is easily obtained with the usual line of argumentation.\nWe will show PSPACE-hardness for CP-DOMINANCE by a reduction from GCP-DOMINANCE for consistent GCP-nets."}, {"heading": "4.2.1 MAPPING LOCALLY CONSISTENT GCP-NETS TO CP-NETS", "text": "Let C be a locally consistent GCP-net. Let V = {x1, . . . ,xn} be the set of variables of C. We define V \u2032 = V \u222a {y1, . . . ,yn}, where {y1, . . . ,yn} \u2229V = /0. We define a GCP-net C\u2032 over V \u2032, which we will show is a CP-net. To this end, for every z \u2208 V \u2032 we will define conditional preference rules q+(z) : z > \u00acz and q\u2212(z) : \u00acz > z to be included in C\u2032 by specifying formulas q+(z) and q\u2212(z).\nFirst, for each variable xi \u2208V , we set\nq+(xi) = yi and q \u2212(xi) = \u00acyi.\nThus, xi depends only on yi. We also note that the formulas q+(xi) and q\u2212(xi) satisfy local consistency and local completeness requirements.\nNext, for each variable yi, 1 \u2264 i \u2264 n, we define\nei = (x1 \u2194 y1)\u2227\u00b7\u00b7 \u00b7\u2227 (xi\u22121 \u2194 yi\u22121)\u2227 (xi+1 \u2194 yi+1)\u2227\u00b7\u00b7 \u00b7\u2227 (xn \u2194 yn),\nf +i = ei \u2227 p +(xi) and f \u2212 i = ei \u2227 p \u2212(xi).\nFinally, we define q+(yi) = f + i \u2228 (\u00ac f \u2212 i \u2227 xi)\nand q\u2212(yi) = f \u2212 i \u2228 (\u00ac f + i \u2227\u00acxi).\nThus, yi depends on every variable in V \u2032 but itself. We note that by the local consistency of C, formulas f +i \u2227 f \u2212 i , 1 \u2264 i \u2264 n, are unsatisfiable. Consequently, formulas q+(yi)\u2227q\u2212(yi), 1 \u2264 i \u2264 n, are unsatisfiable. Thus, C\u2032 is locally consistent.\nFinally, q+(yi)\u2228 q\u2212(yi) is equivalent to f + i \u2228\u00acxi \u2228 f \u2212 i \u2228 xi, so is a tautology. Thus, C \u2032 is locally complete and hence a CP-net over V \u2032.\nLet \u03b1 and \u03b2 be outcomes over {x1, . . . ,xn} and {y1, . . . ,yn}, respectively. By \u03b1\u03b2 we denote the outcome over V \u2032 obtained by concatenating n-tuples \u03b1 and \u03b2. Conversely, every outcome for C\u2032 can be written in this way.\nLet \u03b1 be an outcome over V . We define \u03b1 to be the outcome over {y1, . . . ,yn} obtained by replacing in \u03b1 every component of the form xi with yi and every component \u00acxi with \u00acyi. Then for every i, 1 \u2264 i \u2264 n, \u03b1\u03b1 |= ei.\nLet s be a sequence \u03b10, . . . ,\u03b1m of outcomes over V . Define L(s) to be the sequence of V \u2032- outcomes: \u03b10\u03b10,\u03b10\u03b11,\u03b11\u03b11,\u03b11\u03b12, . . . ,\u03b1m\u03b1m. Further, let t be a sequence \u03b50,\u03b51, . . . ,\u03b5m of V \u2032- outcomes with \u03b50 = \u03b1\u03b1 and \u03b5m = \u03b2\u03b2. Define L\u2032(t) to be the sequence obtained from t by projecting each element in t to V and iteratively removing elements in the sequence which are the same as their predecessor (until any two consecutive outcomes are different).\nLemma 3 With the above definitions,\n(i) if s is an improving sequence for C from \u03b1 to \u03b2 then L(s) is an improving sequence for C\u2032 from \u03b1\u03b1 to \u03b2\u03b2;\n(ii) if t is an improving sequence from \u03b1\u03b1 to \u03b2\u03b2 then L\u2032(t) is an improving sequence from \u03b1 to \u03b2;\n(iii) C is consistent if and only if C\u2032 is consistent.\nProof: Let e = Vn\ni=1(xi \u2194 yi). The definitions have been arranged so that the GCP-net C and the CP-net C\u2032 have the following properties: (a) If e does not hold in an outcome \u03b3 over V \u2032, then every improving flip applicable to \u03b3 changes the value of some variable xi or yi so that xi \u2194 yi holds after the flip.\nIndeed, let us assume that there is an improving flip from \u03b3 to some outcome \u03b3\u2032 over V \u2032. If the flip concerns a variable xi, then xi \u2194\u00acyi holds in \u03b3. Consequently, xi \u2194 yi holds in \u03b3\u2032.\nThus, let us assume that the flip concerns a variable yi. If ei holds in \u03b3 then, since e does not, xi \u2194\u00acyi holds in \u03b3. Thus, xi \u2194 yi holds in \u03b3\u2032. If ei does not hold in \u03b3 then neither f +i nor f \u2212 i does. Thus, if xi (\u00acxi, respectively) holds in \u03b3, yi (\u00acyi, respectively) holds in \u03b3\u2032. Since the flip concerns yi, it follows that xi \u2194 yi holds in \u03b3\u2032. (b) No improving flip from \u03b1\u03b1 changes any variable xi.\nIndeed, for any variable xi, since e holds in \u03b1\u03b1, xi \u2194 yi holds in \u03b1\u03b1, too. Thus, no improving flip changes xi. (c) There is an improving flip in C\u2032 that changes variable yi in an outcome \u03b1\u03b1 if and only if there is an improving flip for the GCP-net C from outcome \u03b1 that changes variable xi. After applying the improving flip (changing variable yi) to \u03b1\u03b1, there is exactly one improving flip possible. It changes xi and results in an outcome \u03b2\u03b2, where \u03b2 is the outcome over V resulting from applying to \u03b1 the improving flip changing the variable xi.\nTo prove (c), let us first assume that \u00acyi holds in \u03b1\u03b1 and observe that in such case \u00acxi holds in \u03b1\u03b1, too. It follows that q+(yi) holds in \u03b1\u03b1 if and only if p+(xi) holds in \u03b1. Consequently, changing yi in \u03b1\u03b1 is an improving flip in C\u2032 if and only if changing xi in \u03b1 is an improving flip in C. The argument in the case when yi holds in \u03b1\u03b1 is analogous (but involves q\u2212(yi) and p\u2212(xi)). Thus, the first part of (c) follows.\nLet \u03b2 be the outcome obtained by applying an improving flip to xi in \u03b1. It follows that the improving flip changing the value of yi in \u03b1\u03b1 results in the outcome \u03b1\u03b2. In this outcome, by (a), an improving flip must concern x j or y j such that x j \u2194 y j holds after the flip. Since for every j 6= i, x j \u2194 y j holds in \u03b1\u03b2, the only improving flips in \u03b1\u03b2 concern either xi or yi. By the local consistency of C\u2032, yi cannot be flipped right back. Clearly, changing xi is an improving flip that can be applied to \u03b1\u03b2. By our discussion, it is the only improving flip applicable in \u03b1\u03b2 and it results in the outcome \u03b2\u03b2. This proves the second part of (c). Proof of (i): The assertion follows by iterative application of (c).\nProof of (ii): Suppose that t is an improving sequence \u03b50,\u03b51, . . . ,\u03b5m of V \u2032-outcomes with \u03b50 = \u03b1\u03b1 and \u03b5m = \u03b2\u03b2. Since e holds in \u03b50, (b) implies that the first flip changes some variable yi, and (c) implies that the second flip changes variable xi to make xi \u2194 yi hold again. Hence \u03b52 can be written as \u03b4\u03b4. By (c) there is an improving flip in C from outcome \u03b1 changing variable xi, that is, leading from \u03b1 to \u03b4. Iterating this process shows that L\u2032(t) is an improving sequence from \u03b1 to \u03b2. Proof of (iii): Suppose that C is inconsistent. Then there exists some outcome \u03b1 and an improving sequence s in C from \u03b1 to \u03b1. By (i), L(s) is an improving sequence from \u03b1\u03b1 to \u03b1\u03b1, proving that C\u2032 is inconsistent.\nConversely, suppose that C\u2032 is inconsistent, so there exists an improving sequence t for C\u2032 from some outcome to itself. By (a), any improving flip applied to an outcome in which e does not hold increases (by one) the number of i such that xi \u2194 yi holds. This implies that e must hold in some outcome in t, because t is not acyclic. Write this outcome as \u03b1\u03b1. We can cyclically permute t to form an improving sequence t2 from \u03b1\u03b1 to itself. Part (ii) then implies that L\u2032(t2) is an improving flipping sequence for C from \u03b1 to itself, showing that C is inconsistent.\nTheorem 2 CP-DOMINANCE is PSPACE-complete. This holds even if we restrict the CP-nets to being consistent.\nProof: We use a reduction from PSPACE-hardness of the GCP-DOMINANCE problem when the GCP-nets are restricted to being consistent (Theorem 1). Let C be a consistent, and hence locally consistent, GCP-net over V , and let \u03b1 and \u03b2 be outcomes over V . Consider the CP-net C\u2032 over variables V \u2032 constructed above. Lemma 3(i) and (ii) imply that \u03b2 dominates \u03b1 in C if and only if \u03b2\u03b2 dominates \u03b1\u03b1 in C\u2032. Moreover, C\u2032 is consistent by Lemma 3(iii). Consequently, the hardness part of the assertion follows.\nNote that PSPACE-hardness obviously remains if we require input outcomes to be different, because the reduction for Theorem 1 uses a pair of different outcomes.\nNotice the huge complexity gap with the problem of deciding whether there exists a nondominated outcome, which is \u201conly\u201d NP-complete (Domshlak et al., 2003, 2006)."}, {"heading": "5. Consistency of GCP-Nets", "text": "In this section we show that the GCP-CONSISTENCY problem is PSPACE-complete, using results from Sections 3 and 4.\nTheorem 3 GCP-CONSISTENCY is PSPACE-complete. This holds even under the restriction to GCP-nets in conjunctive form.\nProof: PSPACE-hardness is shown by reduction from ACTION-SET ACYCLICITY. We apply function S from Section 3.2 followed by M from Section 4.1. This maps instances of ACTION-SET ACYCLICITY to instances of GCP-CONSISTENCY in conjunctive form. By Lemma 1(iii) and Lemma 2 (ii), an instance of ACTION-SET ACYCLICITY is acyclic if and only if the corresponding instance of GCP-CONSISTENCY is consistent, proving the result.\nWe now show that consistency testing remains PSPACE-complete for CP-nets (GCP-nets that are both locally consistent and locally complete).\nTheorem 4 CP-CONSISTENCY is PSPACE-complete.\nProof: We use a reduction from GCP-CONSISTENCY under the restriction that the GCP-net is in conjunctive form. Let C be a GCP-net in conjunctive form. We define a CP-net C\u2032 as follows. Because C is in conjunctive form, local consistency can be decided in polynomial time, as it amounts to checking the consistency of a conjunction of conjunctions of literals. If C is not locally consistent we set C\u2032 to be a predetermined inconsistent but locally consistent CP-net, such as in the example in Section 2. Otherwise, C is locally consistent and for C\u2032 we take the CP-net we constructed in Section 4.2. The mapping from locally consistent GCP-nets to CP-nets, described in Section 4.2, preserves consistency (Lemma 3 (iii)). Since local inconsistency implies inconsistency (Proposition 2), we have that the GCP-net C is consistent if and only if the CP-net C\u2032 is consistent. Thus, PSPACE-hardness of the CP-CONSISTENCY problem follows from Theorem 3."}, {"heading": "6. Additional Problems Related to Dominance in GCP-Nets", "text": "Having proved our main results on consistency of and dominance in GCP-nets, we move on to additional questions concerning the dominance relation. Before we state them, we introduce more terminology.\nLet \u03b1 and \u03b2 be outcomes in a GCP-net C. We say that \u03b1 and \u03b2 are dominance-equivalent in C, written \u03b1 \u2248C \u03b2, if \u03b1 = \u03b2, or \u03b1 \u227aC \u03b2 and \u03b2 \u227aC \u03b1. Next, \u03b1 and \u03b2 are dominance-incomparable in C if \u03b1 6= \u03b2, \u03b1\u2280C\u03b2 and \u03b2\u2280C\u03b1. Finally, \u03b1 strictly dominates \u03b2 if \u03b2 \u227aC \u03b1 and \u03b1 6\u227aC\u03b2.\nDefinition 8 We define the following decision problems: SELF-DOMINANCE: given a GCP-net C and an outcome \u03b1, decide whether \u03b1 \u227aC \u03b1, that is, whether \u03b1 dominates itself in C. STRICT DOMINANCE: given a GCP-net C and outcomes \u03b1 and \u03b2, decide whether \u03b1 strictly dominates \u03b2 in C. DOMINANCE EQUIVALENCE: given a GCP-net C and outcomes \u03b1 and \u03b2, decide whether \u03b1 and \u03b2 are dominance-equivalent in C. DOMINANCE INCOMPARABILITY: given a GCP-net C and outcomes \u03b1 and \u03b2, decide whether \u03b1 and \u03b2 are dominance-incomparable in C.\nWhen establishing the complexity of these problems, we will use polynomial-time reductions from the problem GCP-DOMINANCE. Let H be a GCP-net with the set of variables V = {x1, . . . ,xn}, and let \u03b2 be an outcome. We define a GCP-net G = \u03981(H,\u03b2) with the set of variables W = V \u222a{y} by setting the conditions for flips on variables xi, i = 1, . . . ,n, and y as follows:\n1. if xi \u2208 \u03b2: p+G(xi) = p + H(xi)\u2228\u00acy\np\u2212G(xi) = p \u2212 H(xi)\u2227 y\n2. if \u00acxi \u2208 \u03b2: p+G(xi) = p + H(xi)\u2227 y\np\u2212G(xi) = p \u2212 H(xi)\u2228\u00acy\n3. p+G(y) = \u03b2\n4. p\u2212G(y) = \u00ac\u03b2.\nThe mapping \u03981 can be computed in polynomial time. Moreover, one can check that if H is a locally consistent GCP-net, \u03981(H,\u03b2) is also locally consistent. Finally, if H is a CP-net, \u03981(H,\u03b2) is a CP-net, as well.\nFor every V -outcome \u03b3, we let \u03b3+ = \u03b3\u2227 y and \u03b3\u2212 = \u03b3\u2227\u00acy. We note that every W -outcome is of the form \u03b3+ or \u03b3\u2212. To explain the structure of the GCP-net G, we point out that there is an improving flip in G from \u03b3+ into \u03b4+ if and only if there is an improving flip in H from \u03b3 to \u03b4 (thus, G restricted to outcomes of the form \u03b3+ forms a copy of the GCP-net H). Moreover, there is an improving flip in G from \u03b3\u2212 into \u03b4\u2212 if and only if \u03b4 agrees with \u03b2 on exactly one more variable xi than \u03b3 does. Finally, an improving flip moves between outcomes of different type if and only if it transforms \u03b2\u2212 to \u03b2+, or \u03b3+ to \u03b3\u2212 for some \u03b3 6= \u03b2.\nWe now formalize some useful properties of the GCP-net G = \u03981(H,\u03b2). We use the notation introduced above.\nLemma 4 For every V -outcome \u03b3, \u03b3\u2212 \u227aG \u03b2+ and, if \u03b3 6= \u03b2, \u03b3+ \u227aG \u03b2+ (in other words, \u03b2+ dominates every other W-outcome).\nProof: Consider any V -outcome \u03b3 6= \u03b2. Then \u03b3\u2227\u00acy \u227aC \u03b2\u2227\u00acy since, given \u00acy, changing a literal to the form it has in \u03b2 is an improving flip. By the definition, we also have \u03b2\u2227\u00acy \u227aC \u03b2\u2227 y and \u03b3\u2227 y \u227aG \u03b3\u2227\u00acy (as \u03b3 6= \u03b2). It follows that \u03b2\u2212 \u227aG \u03b2+ and \u03b3+ \u227aG \u03b3\u2212 \u227aG \u03b2+. Thus, the assertion follows.\nLemma 5 For arbitrary V -outcome \u03b1 different from \u03b2, the following statements are equivalent:\n1. \u03b2 \u227aH \u03b1;\n2. \u03b2+ \u227aG \u03b1+;\n3. \u03b2+ \u2248G \u03b1+.\nProof: By Lemma 4, \u03b1+ \u227aG \u03b2+. Thus, the conditions (2) and (3) are equivalent. [(1)\u21d2(2)] Clearly (recall our discussion about the structure of G), if there is an improving flip from \u03b3 to \u03b4 in H, then there is an improving flip from \u03b3+ to \u03b4+ in G. Thus, if there is an improving sequence in H from \u03b2 to \u03b1, there is an improving sequence in G from \u03b2+ to \u03b1+. [(2)\u21d2(1)] Let us assume \u03b2+ \u227aG \u03b1+, and let us consider an improving sequence of minimum length from \u03b2+ to \u03b1+. By the minimality, no internal element in such a sequence is \u03b2+. Thus, no internal element equals \u03b2\u2212 either (as the only improving flip from \u03b2\u2212 leads to \u03b2+). Since an improving flip from \u03b3\u2212 to \u03b3+ requires that \u03b3 = \u03b2, all outcomes in the sequence are of the form \u03b3+. By dropping y from each outcome in this sequence, we get an improving flipping sequence from \u03b1 to \u03b2 in H. Thus, \u03b2 \u227aH \u03b1.\nLemma 6 Let H be consistent and let \u03b1 and \u03b2 be different V -outcomes. Then, \u03b1+ \u227aG \u03b1+ if and only if \u03b2 \u227aH \u03b1.\nProof: Suppose there exists an improving sequence from \u03b1+ to itself. There must be an outcome in the sequence of the form \u03b3\u2227\u00acy (otherwise, dropping y in every outcome yields an improving sequence from \u03b1 to \u03b1 in H, contradicting the consistency of H). To perform an improving flip from \u00acy to y we need \u03b2 to hold, which implies that \u03b2+ appears in the sequence. Thus, \u03b2+ \u227aG \u03b1+. By Lemma 5, \u03b2 \u227aH \u03b1.\nConversely, let us assume that \u03b2\u227aH \u03b1. Again by Lemma 5, \u03b2+ \u227aG \u03b1+. By Lemma 4, \u03b1+ \u227aG \u03b2+. Thus, \u03b1+ \u227aG \u03b1+.\nThe next construction is similar. Let H be a GCP-net on variables V = {x1, . . . ,xn}, and let \u03b1 be an outcome. We define a GCP-net F = \u03982(H,\u03b1) as follows. As before, we set W = V \u222a{y} to be the set of variables of F . We define the conditions for flips on variables xi, i = 1, . . . ,n, and y as follows:\n1. p+G(xi) = p + H(xi)\u2227 y\n2. p\u2212G(xi) = p \u2212 H(xi)\u2227 y\n3. p+G(y) = \u00ac\u03b1\n4. p\u2212G(y) = \u03b1.\nInformally, outcomes of the form \u03b3+ form in F a copy of H. There are no improving flips between outcomes of the form \u03b3\u2212. There is an improving flip from \u03b1+ to \u03b1\u2212 and, for every \u03b3 6= \u03b1, from \u03b3\u2212 to \u03b3+. In particular, if F is consistent then \u03982(H,\u03b1) is consistent, The mapping \u03982 can be computed in polynomial time and we also have the following property.\nLemma 7 Let \u03b2 be a V -outcome different from \u03b1. Then the following conditions are equivalent:\n1. \u03b2 \u227aH \u03b1\n2. \u03b1\u2212 strictly dominates \u03b2\u2212 in F\n3. \u03b1\u2212 and \u03b2\u2212 are not dominance-incomparable in F.\nProof: If there exists an improving sequence from \u03b2\u2212 to \u03b1\u2212 then the first improving flip in the sequence changes \u03b2\u2212 to \u03b2+. Moreover, there is an improving flip from \u03b3+ to \u03b3\u2212 if and only if \u03b3 = \u03b1. Thus, \u03b2\u2212 \u227aF \u03b1\u2212 if and only if \u03b2 \u227aH \u03b1. Since \u03b1\u2212 \u2280F \u03b2\u2212 all three conditions are equivalent.\nProposition 7 The following problems are PSPACE-complete: SELF-DOMINANCE, STRICT DOMINANCE, DOMINANCE EQUIVALENCE, and DOMINANCE INCOMPARABILITY.\nProof: For all four problems, membership is proven easily as for the problems in earlier sections. For the PSPACE-hardness proofs, we use the problem CP-DOMINANCE in a version when we required that the input CP-net be consistent and the two input outcomes different. The problem is PSPACE-hard by Theorem 2.\nLet H be a consistent CP-net on a set V of variables, and let \u03b1 and \u03b2 be two different V -outcomes. By Lemma 5, \u03b2 \u227aH \u03b1 can be decided by deciding the problem DOMINANCE EQUIVALENCE for \u03b1+ and \u03b2+ in the GCP-net \u03981(H,\u03b2). Thus, the PSPACE-hardness of DOMINANCE EQUIVALENCE follows.\nNext, the equivalence of Lemma 6, \u03b1+ \u227aG \u03b1+ \u21d4 \u03b2 \u227aH \u03b1, which holds due to consistency of H, shows that the problem SELF-DOMINANCE is PSPACE-hard.\nFinally, by Lemma 7, \u03b2 \u227aH \u03b1 can be decided either by deciding the problem STRICT DOMINANCE for outcomes \u03b1\u2212 and \u03b2\u2212 in \u03982(H,\u03b1), or by deciding the complement of the problem DOMINANCE INCOMPARABILITY for \u03b1\u2212 and \u03b2\u2212 in the GCP-net \u03982(H,\u03b1). It follows that STRICT DOMINANCE and DOMINANCE INCOMPARABILITY (the latter by the fact that coPSPACE=PSPACE) are PSPACE-complete.8\nCorollary 1 The problems SELF-DOMINANCE and DOMINANCE EQUIVALENCE are PSPACE-complete under the restriction to CP-nets. The problems STRICT DOMINANCE and DOMINANCE INCOMPARABILITY remain PSPACE-complete under the restriction to consistent CP-nets.\nProof: Since in the proof of Proposition 7 we have that H is a CP-net, the claim for the first two problems follows by our remarks that the mapping \u03981 preserves the property of being a CP-net.\nFor the last two problems, we observe that since H in the proof of Proposition 7 is assumed to be consistent, F = \u03982(H,\u03b1) is consistent, too. Thus, it is also locally consistent and the mapping F to F \u2032 we used for the proof of Theorem 2 applies. In particular, F \u2032 is a consistent CP-net and has the following properties (implied by Lemma 3):\n1. \u03b1 strictly dominates \u03b2 in F if and only if \u03b1\u03b1 strictly dominates \u03b2\u03b2 in F \u2032\n2. \u03b1 and \u03b2 are dominance-incomparable in F if and only if \u03b1\u03b1 and \u03b2\u03b2 are dominance-incomparable in F \u2032.\nSince F \u2032 is a consistent CP-net, the claim for the last two problems follows, too.\n8. For STRICT DOMINANCE, the result could have been also obtained as a simple corollary of Theorem 2, since in consistent GCP-nets dominance is equivalent to strict dominance."}, {"heading": "7. Problems Concerning Optimality in GCP-Nets", "text": "The dominance relation \u227aC of a GCP-net C determines a certain order relation, which gives rise to several notions of optimality. We will introduce them and study the complexity of corresponding decision problems.\nWe first observe that the dominance equivalence relation is indeed an equivalence relation (reflexive, symmetric and transitive). Thus, it partitions the set of all outcomes into non-empty equivalence classes, which we call dominance classes. We denote the dominance class of an outcome \u03b1 in a GCP-net C by [\u03b1]C.\nThe relation \u227aC induces on the set of dominance classes a strict order relation (a relation that is irreflexive and transitive). Namely, we define [\u03b1]C \u227adcC [\u03b2]C if [\u03b1]C 6= [\u03b2]C (equivalently, \u03b1 6\u2248C \u03b2) and \u03b1 \u227aC \u03b2. One can check that the definition of the relation \u227adcC on dominance classes is independent of the choice of representatives of the classes.\nDefinition 9 (Non-dominated class, optimality in GCP-nets) Let C be a GCP-net. A dominance class [\u03b1]C is non-dominated if it is maximal in the strict order \u227adcC (there is no dominance class [\u03b2]C such that [\u03b1]C \u227adcC [\u03b2]C). A dominance class is dominating if for every dominance class [\u03b2]C, [\u03b1]C = [\u03b2]C or [\u03b2]C \u227adcC [\u03b1]C.\nAn outcome \u03b1 is weakly non-dominated if it belongs to a non-dominated class. If \u03b1 is weakly non-dominated and is the only element in its dominance class, then \u03b1 is non-dominated.\nAn outcome \u03b1 is dominating if it belongs to a dominating class. An outcome \u03b1 is strongly dominating if it is dominating and non-dominated.\nOutcomes that are weakly non-dominated, non-dominated, dominating and strongly dominating capture some notions of optimality. In the context of CP-nets, weakly non-dominated and nondominated outcomes were proposed and studied before (Brafman & Dimopoulos, 2004). They were referred to as weakly and strongly optimal there. Similar notions of optimality were also studied earlier for the problem of defining winners in partial tournaments (Brandt, Fischer, & Harrenstein, 2007). We will study here the complexity of problems to decide whether a given outcome is optimal and whether optimal outcomes exist.\nFirst, we note the following general properties (simple consequences of properties of finite strict orders).\nLemma 8 Let C be a GCP-net.\n1. There exist non-dominated classes and so, weakly non-dominated outcomes.\n2. Dominating outcomes and nondominated outcomes are weakly non-dominated.\n3. A strongly dominating outcome is dominating and non-dominated.\n4. The following conditions are equivalent:\n(a) C has a unique non-dominated class;\n(b) C has a dominating outcome;\n(c) weakly non-dominated and dominating outcomes in C coincide.\nFor consistent GCP-nets only two different notions of optimality remain.\nLemma 9 Let C be a consistent GCP-net. Then:\n1. Each dominance class is a singleton, \u227aC is a strict order, and \u227aC and \u227adcC coincide (modulo the one-to-one and onto correspondence \u03b1 7\u2192 [\u03b1]C)\n2. If \u03b1 is a weakly non-dominated outcome, \u03b1 is non-dominated (weakly non-dominated and non-dominated outcomes coincide)\n3. If \u03b1 is a dominating outcome, \u03b1 is strongly dominating (strongly dominating and dominating outcomes coincide).\n4. Finally, \u03b1 is a unique (weakly) non-dominated outcome if and only if \u03b1 is strongly dominating.\nNext, we observe that all concepts of optimality we introduced are different. To this end, we will show GCP-nets with a single non-dominated class that is a singleton, with multiple non-dominated classes, each being a singleton, with a single non-dominated class that is not a singleton, and with multiple non-dominated classes, each containing more than one element. We will also show a GCPnet with two non-dominated classes, one of them a singleton and the other one consisting of several outcomes.\nExample 2 Consider the following GCP-net C with two binary variables a and b\n: a > a\u0304 : b > b\u0304\nThis GCP-net determines a strict preorder on the dominance classes, in which {ab} is the only maximal class (in fact, all dominance classes are singletons). Thus, ab is both non-dominated and dominating and so, it is strongly dominating.\nExample 3 Consider the following GCP-net C with two binary variables a and b\nb : a > a\u0304 b\u0304 : a\u0304 > a a : b > b\u0304 a\u0304 : b\u0304 > b\nThis GCP-net determines a strict preorder, in which {ab} and {a\u0304b\u0304} are two different non-dominated classes. Thus, ab and a\u0304b\u0304 are non-dominated and there is no dominating outcome.\nExample 4 Consider a GCP-net with variables a,b and c, defined as follows:\na : b > b\u0304 a\u0304 : b\u0304 > b b\u0304 : a > a\u0304 b : a\u0304 > a ab : c > c\u0304\nThere are two dominance classes: Sc = {abc,ab\u0304c, a\u0304bc, a\u0304b\u0304c} and Sc\u0304 = {abc\u0304,ab\u0304c\u0304, a\u0304bc\u0304, a\u0304b\u0304c\u0304}. Every outcome in Sc strictly dominates every outcome in Sc\u0304, therefore, Sc is the unique non-dominated class and every outcome in Sc is dominating. Because Sc is not a singleton, there are no nondominated outcomes (and so, no strongly dominating outcome, either).\nExample 5 Let us remove from the GCP-net of Example 4 the preference statement ab : c > c\u0304. Then Sc and Sc\u0304 are still the two dominance classes, but now every outcome is Sc is incomparable with any outcome in Sc\u0304. Thus, Sc and Sc\u0304 are both non-dominated. Since there are two non-dominated classes, there is no dominating outcome. Since each class has more than one element, there are no non-dominated outcomes. All outcomes are weakly non-dominated, though.\nExample 6 Let us modify the GCP-net of Example 4 by changing the preference statement b\u0304 : a > a\u0304 into b\u0304c : a > a\u0304. The dominance relation \u227a of this GCP-net satisfies the following properties: (i) the four outcomes in Sc dominate each other; (ii) a\u0304b\u0304c\u0304 \u227b a\u0304bc\u0304 \u227b abc\u0304 \u227b ab\u0304c\u0304; (iii) any outcome in Sc dominates abc\u0304 (and, a fortiori, ab\u0304c\u0304). One can check that there are five dominance classes: Sc, {abc\u0304}, {a\u0304bc\u0304}, {ab\u0304c\u0304} and {a\u0304b\u0304c\u0304}. Two of them are non-dominated: Sc and {a\u0304b\u0304c\u0304}. Since there are two nondominated classes, there is no dominating outcome. On the other hand, {a\u0304b\u0304c\u0304} is a non-dominated outcome (a unique one).\nWe will consider the following decision problems corresponding to the notions of optimality we introduced.\nDefinition 10 For a given GCP-net C: WEAKLY NON-DOMINATED OUTCOME: given an outcome \u03b1, decide whether \u03b1 is weakly nondominated in C NON-DOMINATED OUTCOME: given an outcome \u03b1, decide whether \u03b1 is non-dominated in C DOMINATING OUTCOME: given an outcome \u03b1, decide whether \u03b1 is dominating in C STRONGLY DOMINATING OUTCOME: given an outcome \u03b1, decide whether \u03b1 is strongly dominating in C EXISTENCE OF A NON-DOMINATED OUTCOME: decide whether C has a non-dominated outcome EXISTENCE OF A DOMINATING OUTCOME: decide whether C has a dominating outcome EXISTENCE OF A STRONGLY DOMINATING OUTCOME: decide whether C has a strongly dominating outcome.\nIn some of the hardness proofs, we will again use the reductions \u03981 and \u03982, described in the previous section. We note the following additional useful properties of the GCP-net G = \u03981(H,\u03b2).\nLemma 10 For arbitrary V -outcome \u03b1 different from \u03b2, the following statements are equivalent:\n1. \u03b2+ \u227aG \u03b1+\n2. \u03b1+ is weakly non-dominated in G\n3. \u03b1+ is a dominating outcome in G.\nProof: Since \u03b2+ is dominating in G (Lemma 4), weakly non-dominated outcomes and dominating outcomes coincide (Lemma 8). It follows that the conditions (1)-(3) are equivalent to each other.\nProposition 8 The following problems are PSPACE-complete: WEAKLY NON-DOMINATED OUTCOME and DOMINATING OUTCOME. The result holds also for the problems restricted to CP-nets.\nProof: The membership is easy to prove by techniques similar to those we used earlier. For the PSPACE-hardness proofs, we use reductions from CP-DOMINANCE for consistent CPnets (in the version where the two input outcomes are different). Let H be a CP-net, and \u03b1 and \u03b2 two different V -outcomes. By Lemmas 5 and 10, \u03b2 \u227aH \u03b1 can be decided by deciding either of the problems WEAKLY NON-DOMINATED OUTCOME and DOMINATING OUTCOME for the GCPnet G = \u03981(H,\u03b2) and the outcome \u03b1+. We observed earlier, that if H is a CP-net, then so is G = \u03981(H,\u03b2). Thus, the second part of the assertion follows.\nNext, we will consider the problem STRONGLY DOMINATING OUTCOME. We will exploit the reduction F = \u03982(H,\u03b1), which we discussed in the previous section. We observe the following property of F .\nLemma 11 Let H be a GCP-net and F = \u03982(H,\u03b1). Then \u03b1\u2212 is strongly dominating in F if and only if \u03b1 is dominating in H.\nProof: Let us assume that \u03b1 is dominating in H. From the definition of F , it follows that for every V -outcome \u03b3 6= \u03b1, \u03b3+ \u227aF \u03b1+ and \u03b3\u2212 \u227aF \u03b3+. Since \u03b1+ \u227aF \u03b1\u2212, \u03b1\u2212 is dominating in F . Since there is no improving flip leading out of \u03b1\u2212, \u03b1\u2212 is strongly dominating.\nConversely, let us assume that \u03b1\u2212 is strongly dominating in F and let \u03b3 be a V -outcome different from \u03b1. Let us consider an improving sequence from \u03b3+ to \u03b1\u2212. All outcomes in the sequence other than the last one, \u03b1\u2212, are of the form \u03b4+. Moreover, the outcome directly preceding \u03b1\u2212 is \u03b1+. Dropping y from every outcome in the segment of the sequence between \u03b3+ and \u03b1+ yields an improving sequence from \u03b3 to \u03b1 in H.\nWe now have the following consequence of this result.\nProposition 9 The problem STRONGLY DOMINATING OUTCOME is PSPACE-complete, even if restricted to CP-nets.\nProof: Let H be a CP-net (over the set V of variables) and \u03b1 an outcome. By Lemma 11, the problem DOMINATING OUTCOME can be decided by deciding the problem STRONGLY DOMINATING OUTCOME for F = \u03982(H,\u03b1) and \u03b1\u2212. Thus, the PSPACE-hardness of STRONGLY DOMINATING OUTCOME follows by Proposition 8. The membership in PSPACE is, as in other cases, standard and is omitted.\nSince H is a CP-net, it is locally consistent and so, F is locally consistent, too. As in the proof of Corollary 1 we use the mapping from GCP-net F to CP-net F \u2032 defined in Section 4.2. By Lemma 3, \u03b1 is a strongly dominating outcome in F if and only if \u03b1\u03b1 dominates every outcome of the form \u03b3\u03b3, which is if and only if \u03b1\u03b1 is a strongly dominating outcome in F \u2032, since any F \u2032-outcome is dominated by an outcome of the form \u03b3\u03b3 (using the rules q+(xi) = yi and q\u2212(xi) = \u00acyi). Therefore\nSTRONGLY DOMINATING OUTCOME for F and \u03b1 can be decided by deciding STRONGLY DOMINATING OUTCOME for F \u2032 and \u03b1\u03b1. Thus, the second part of the claim follows.\nThe problem NON-DOMINATED OUTCOME is easier. It is known to be in P for CP-nets (Brafman & Dimopoulos, 2004). The result extends to GCP-nets. Indeed, if H is a GCP-net and \u03b1 an outcome, \u03b1 is non-dominated if and only if there is no improving flip that applies to \u03b1. The latter holds if and only if for every variable x in H, if x (respectively, \u00acx) holds in \u03b1, then p\u2212(x) (respectively, p+(x)) does not hold in \u03b1. Since the conditions can be checked in polynomial the claim holds and we have the following result.\nProposition 10 The problem NON-DOMINATED OUTCOME for GCP-nets is in P.\nNext, we will consider the problems concerning the existence of optimal outcomes. Let H be a GCP-net on the set of variables V = {x1, . . . ,xn}, and let \u03b1 and \u03b2 be two different V -outcomes. For every i = 1,2, . . . ,n, we define formulas \u03b1i as follows. If xi \u2208 \u03b1, then \u03b1i is the conjunction of all literals in \u03b1, except that instead of xi we take \u00acxi. Similarly, if \u00acxi \u2208 \u03b1, then \u03b1i is the conjunction of all literals in \u03b1, except that instead of \u00acxi we take xi. Thus, \u03b1i is the outcome that results in \u03b1 when the literal in corresponding to xi is flipped into its dual.\nWe now define a GCP-net E = \u03983(H,\u03b1,\u03b2) by taking W = V \u222a{y} as the set of variables of E and by defining the flipping conditions as follows:\n1. p+E (xi) = (p + H(xi)\u2227 y)\u2228 (\u00acy\u2227\u00ac\u03b1\u2227\u00ac\u03b1i)\np\u2212E (xi) = p \u2212 H(xi)\u2227 y\n2. p+E (y) = \u03b2\n3. p\u2212E (y) = \u00ac\u03b2.\nThe GCP-net \u03983(H,\u03b1,\u03b2) has the following properties. The outcomes of the form \u03b3+ (= \u03b3\u2227 y) form a copy of H. There is no improving flip for the outcome \u03b1\u2212 (= \u03b1\u2227\u00acy). Next, there is no improving flip into \u03b1\u2212 from an outcome of the form \u03b3\u2212. To see this, let us assume that such a flip exists and concerns a variable, say, xi. It follows that \u03b3 = \u03b1i. By the definition of flipping conditions, an improving flip for \u03b3\u2212 that involves xi is impossible, a contradiction. Thus, the only improving flip that leads to \u03b1\u2212 originates in \u03b1+.\nWe also have that for every outcome \u03b3 other than \u03b1 and \u03b2, \u03b3\u2212 \u227aE \u03b2\u2212. It follows from the fact that for every outcome \u03b3 other than \u03b1 and \u03b2, \u03b3\u2212 has an improving flip. Indeed, for each such \u03b3 there is a variable xi such that (i) xi is false in \u03b3, and (ii) flipping the literal of xi to its dual does not lead to \u03b1 (that is, \u03b3 is not \u03b1i). (For even if \u03b3 = \u03b1i for some i, then, because \u03b3,\u03b1 6= \u03b2, there exists i\u2032 6= i such that \u03b3 and \u03b2 differ on xi\u2032 , so that xi\u2032 satisfies (i) and (ii).) Thus, a flip on that variable is improving. As all improving flips between outcomes containing \u00acy result in one more variable xi assigned to true, thus having the same status as it has in \u03b2, \u03b3\u2212 \u227aE \u03b2\u2212 follows.\nFinally, we have \u03b2\u2212 \u227aE \u03b2+ and, for every outcome \u03b3 other than \u03b2, \u03b3+ \u227aE \u03b3\u2212. This leads to the following property of E = \u03983(H,\u03b1,\u03b2).\nLemma 12 Let H be a GCP-net and let \u03b1 and \u03b2 be two different outcomes. Then \u03b2 \u227aH \u03b1 if and only if \u03983(H,\u03b1,\u03b2) has a (strongly) dominating outcome.\nProof: (Only if) Based on our earlier remarks, \u03b1+ \u227aE \u03b1\u2212. Moreover, since \u03b2 \u227aH \u03b1, we have \u03b2+ \u227aE \u03b1+. In addition, for every \u03b3 different from \u03b1 and \u03b2, \u03b3+ \u227aE \u03b3\u2212 \u227aE \u03b2\u2212 \u227aE \u03b2+. Thus, \u03b1\u2212 is both dominating and strongly dominating (the latter follows from the fact that no improving flips lead out of \u03b1\u2212). (If) Let us assume that \u03b1\u2212 is dominating (and so, the argument applies also when \u03b1\u2212 is strongly dominating). Then there is an improving sequence from \u03b2+ to \u03b1\u2212. Let us consider a shortest such sequence. Clearly, \u03b1+ is the outcome just before \u03b1\u2212 in that sequence (as we pointed out, no improving flip from an outcome of the form \u03b3\u2212 to \u03b1\u2212 is possible). Moreover, by the definition of \u03983(H,\u03b1,\u03b2) and the fact that we are considering a shortest sequence from \u03b2+ to \u03b1\u2212, every outcome in the sequence between \u03b2+ and \u03b1+ is of the form \u03b3+. By dropping y from each of these outcomes, we get an improving sequence from \u03b2 to \u03b1.\nProposition 11 The problem EXISTENCE OF DOMINATING OUTCOME and the problem EXISTENCE OF STRONGLY DOMINATING OUTCOME are PSPACE-complete, even if restricted to CP-nets.\nProof: We show the hardness part only, as the membership part is straightforward. To prove hardness we notice that by Lemma 12, given a consistent CP-net H and two outcomes \u03b1 and \u03b2, \u03b2 \u227aH \u03b1 can be decided by deciding either of the problems EXISTENCE OF DOMINATING OUTCOME and EXISTENCE OF STRONGLY DOMINATING OUTCOME for \u03983(H,\u03b1,\u03b2). To prove the second part of the assertion, we note that if H is consistent, E = \u03983(H,\u03b1,\u03b2) is consistent, too and so, the mapping from locally consistent GCP nets to CP-nets applies. Let us denote the result of applying the mapping to E by E \u2032. Then, using the same argument as in the proof of Proposition 9, E has a (strongly) dominating outcome if and only if E \u2032 has a strongly dominating outcome. Thus, one can decide whether \u03b2 \u227aH \u03b1 in a consistent CP-net H by deciding either of the problems EXISTENCE OF DOMINATING OUTCOME and EXISTENCE OF STRONGLY DOMINATING OUTCOME for E \u2032.\nWe also note that the problem EXISTENCE OF NON-DOMINATED OUTCOME is easier (under standard complexity theory assumptions).\nProposition 12 The problem EXISTENCE OF NON-DOMINATED OUTCOME is NP-complete.\nProof: We note that in the case of GCP-nets in conjunctive form the problem is known to be NP-hard (Domshlak et al., 2003, 2006). Thus, the problem is NP-hard for GCP-nets. The membership in the class NP follows from Proposition 10.\nIf we restrict to consistent GCP-nets, the situation simplifies. First, we recall (Lemma 9) that if a GCP-net is consistent then weakly non-dominated and non-dominated outcomes coincide, and the same is true for dominating and strongly dominating outcomes. Moreover, for consistent GCP-nets, non-dominated outcomes exist (and so, the corresponding decision problem is trivially in P). Thus, for consistent GCP-nets we will only consider problems DOMINATING OUTCOME and EXISTENCE OF DOMINATING OUTCOME.\nProposition 13 The problems DOMINATING OUTCOME and EXISTENCE OF DOMINATING OUTCOME restricted to consistent GCP-nets are in coNP.\nProof: Using Lemmas 8 and 9, \u03b1 is not a dominating outcome if and only if there exists an outcome \u03b2 6= \u03b1 which is non-dominated. Similarly, there is no dominating outcome in a consistent GCP-net if and only if there are at least two non-dominated outcomes. Thus, guessing non-deterministically an outcome \u03b2 6= \u03b1, and verifying that \u03b2 is non-dominated, is a non-deterministic polynomial-time algorithm deciding the complement of the problem DOMINATING OUTCOME. The argument for the other problem is similar.\nWe do not know if the bounds in Proposition 13 are tight, that is, whether these two problems are coNP-complete. We conjecture they are."}, {"heading": "8. Concluding Remarks", "text": "We have shown that dominance and consistency testing in CP-nets are both PSPACE-complete. Also several related problems related to dominance and optimality in CP-nets are PSPACE-complete, too.\nThe repeated use of reductions from planning problems confirms the importance of the structural similarity between STRIPS planning and reasoning with CP-nets. This suggests that the welldeveloped field of planning algorithms for STRIPS representations, especially for unary operators (Brafman & Domshlak, 2003), could be useful for implementing algorithms for dominance and consistency in CP-nets.\nOur theorems extend to CP-nets with non-binary domains, and to extensions and variations of CP-nets, such as TCP-nets (Brafman & Domshlak, 2002; Brafman, Domshlak, & Shimony, 2006) that allow for explicit priority of some variables over others, and the more general language for conditional preferences (Wilson, 2004a, 2004b), where the conditional preference rules are written in conjunctive form.\nThe complexity result for dominance is also relevant for the following constrained optimisation problem: given a CP-net and a constraint satisfaction problem (CSP), find an optimal solution (a solution of the CSP which is not dominated by any other solution of the CSP). This is computationally complex, intuitively because a complete algorithm involves many dominance checks when the definition of dominance under constraints allows for dominance paths to go through outcomes violating the constraints (Boutilier, Brafman, Domshlak, Hoos, & Poole, 2004b).9 The problem of checking whether a given solution of a CSP is non-dominated can be seen to be PSPACE-complete by a reduction from CP-dominance that uses a CSP that has exactly two solutions.\nOur results reinforce the need for work on finding special classes of problems where dominance and consistency can be tested efficiently (Domshlak & Brafman, 2002; Boutilier et al., 2004a), and for incomplete methods for checking consistency and constrained optimisation (Wilson, 2004a, 2006).\nSeveral open problems remain. We do not know the complexity of deciding whether the preference relation induced by a CP-net is complete. We do not know whether dominance and consistency testing remain PSPACE-complete when the number of parents in the dependency graph is bounded by a constant. We also do not know whether these two problems remain PSPACE-complete for CP-nets in conjunctive form (the reduction used to prove Theorems 2 and 4 yields CP-nets that are not in conjunctive form). Two additional open problems are listed at the end of Section 7.\n9. With another possible definition, where going through outcomes violating the constraints is not allowed (Prestwich, Rossi, Venable, & Walsh, 2005), dominance testing is not needed to check whether a given solution is non-dominated."}, {"heading": "Acknowledgments", "text": "J\u00e9r\u00f4me Lang\u2019s new address is: LAMSADE, Universit\u00e9 Paris-Dauphine, 75775 Paris Cedex 16, France. The authors are grateful to the reviewers for their excellent comments, and to Pierre Marquis for helpful discussions. This work was supported in part by the NSF under Grants ITR-0325063, IIS-0097278 and KSEF-1036-RDE-008, by the ANR Project ANR\u201305\u2013BLAN\u20130384 \u201cPreference Handling and Aggregation in Combinatorial Domains\u201d, by Science Foundation Ireland under Grants No. 00/PI.1/C075 and 05/IN/I886, and by Enterprise Ireland Ulysses travel grant FR/2006/36."}], "references": [{"title": "Complexity and Approximation. Combinatorial optimization problems and their approximability properties", "author": ["G. Ausiello", "P. Crescenzi", "G. Gambosi", "V. Kann", "A. Marchetti-Spaccamela", "M. Protasi"], "venue": null, "citeRegEx": "Ausiello et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Ausiello et al\\.", "year": 1999}, {"title": "CP-nets: a tool for representing and reasoning with conditional ceteris paribus statements", "author": ["C. Boutilier", "R. Brafman", "C. Domshlak", "H. Hoos", "D. Poole"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Boutilier et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Boutilier et al\\.", "year": 2004}, {"title": "Preference-based constrained optimization with CP-nets", "author": ["C. Boutilier", "R. Brafman", "C. Domshlak", "H. Hoos", "D. Poole"], "venue": "Computational Intelligence,", "citeRegEx": "Boutilier et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Boutilier et al\\.", "year": 2004}, {"title": "Reasoning with conditional ceteris paribus preference statements", "author": ["C. Boutilier", "R. Brafman", "H. Hoos", "D. Poole"], "venue": "In Proceedings of UAI-99,", "citeRegEx": "Boutilier et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Boutilier et al\\.", "year": 1999}, {"title": "On graphical modeling of preference and importance", "author": ["R. Brafman", "C. Domshlak", "E. Shimony"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Brafman et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Brafman et al\\.", "year": 2006}, {"title": "Extended semantics and optimization algorithms for CPnetworks", "author": ["R. Brafman", "Y. Dimopoulos"], "venue": "Computational Intelligence,", "citeRegEx": "Brafman and Dimopoulos,? \\Q2004\\E", "shortCiteRegEx": "Brafman and Dimopoulos", "year": 2004}, {"title": "Introducing variable importance trade-offs into CP-nets", "author": ["R. Brafman", "C. Domshlak"], "venue": "In Proceedings of UAI-02,", "citeRegEx": "Brafman and Domshlak,? \\Q2002\\E", "shortCiteRegEx": "Brafman and Domshlak", "year": 2002}, {"title": "Structure and complexity of planning with unary operators", "author": ["R. Brafman", "C. Domshlak"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Brafman and Domshlak,? \\Q2003\\E", "shortCiteRegEx": "Brafman and Domshlak", "year": 2003}, {"title": "The computational complexity of choice sets", "author": ["F. Brandt", "F. Fischer", "P. Harrenstein"], "venue": "In Proceedings of TARK-07,", "citeRegEx": "Brandt et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Brandt et al\\.", "year": 2007}, {"title": "The computational complexity of propositional STRIPS planning", "author": ["T. Bylander"], "venue": "Artificial Intelligence, 69(1\u20132), 165\u2013204.", "citeRegEx": "Bylander,? 1994", "shortCiteRegEx": "Bylander", "year": 1994}, {"title": "CP-nets\u2014reasoning and consistency testing", "author": ["C. Domshlak", "R. Brafman"], "venue": "In Proceedings of KR-02,", "citeRegEx": "Domshlak and Brafman,? \\Q2002\\E", "shortCiteRegEx": "Domshlak and Brafman", "year": 2002}, {"title": "Hard and soft constraints for reasoning about qualitative conditional preferences", "author": ["C. Domshlak", "S. Prestwich", "F. Rossi", "K. Venable", "T. Walsh"], "venue": "Journal of Heuristics,", "citeRegEx": "Domshlak et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Domshlak et al\\.", "year": 2006}, {"title": "Reasoning about soft constraints and conditional preferences: complexity results and approximation techniques", "author": ["C. Domshlak", "F. Rossi", "K. Venable", "T. Walsh"], "venue": "In Proceedings of IJCAI-03,", "citeRegEx": "Domshlak et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Domshlak et al\\.", "year": 2003}, {"title": "The computational complexity of dominance and consistency in CP-nets", "author": ["J. Goldsmith", "J. Lang", "M. Truszczy\u0144ski", "N. Wilson"], "venue": "In Proceedings of IJCAI-05,", "citeRegEx": "Goldsmith et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Goldsmith et al\\.", "year": 2005}, {"title": "Logical preference representation and combinatorial vote", "author": ["J. Lang"], "venue": "Annals of Mathematics and Artificial Intelligence, 42(1), 37\u201371.", "citeRegEx": "Lang,? 2004", "shortCiteRegEx": "Lang", "year": 2004}, {"title": "Computational complexity", "author": ["C. Papadimitriou"], "venue": "Addison-Wesley.", "citeRegEx": "Papadimitriou,? 1994", "shortCiteRegEx": "Papadimitriou", "year": 1994}, {"title": "Constraint-based preferential optimization", "author": ["S. Prestwich", "F. Rossi", "B. Venable", "T. Walsh"], "venue": "In Proceedings of AAAI-05,", "citeRegEx": "Prestwich et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Prestwich et al\\.", "year": 2005}, {"title": "Consistency and constrained optimisation for conditional preferences", "author": ["N. Wilson"], "venue": "Proceedings of ECAI-04, pp. 888\u2013892.", "citeRegEx": "Wilson,? 2004a", "shortCiteRegEx": "Wilson", "year": 2004}, {"title": "Extending CP-nets with stronger conditional preference statements", "author": ["N. Wilson"], "venue": "Proceedings of AAAI-04, pp. 735\u2013741.", "citeRegEx": "Wilson,? 2004b", "shortCiteRegEx": "Wilson", "year": 2004}, {"title": "An efficient upper approximation for conditional preference", "author": ["N. Wilson"], "venue": "Proceedings of ECAI-06, pp. 472\u2013476.", "citeRegEx": "Wilson,? 2006", "shortCiteRegEx": "Wilson", "year": 2006}, {"title": "Voting on multiattribute domains with cyclic preferential dependencies", "author": ["L. Xia", "V. Conitzer", "J. Lang"], "venue": "In Proceedings of AAAI-08,", "citeRegEx": "Xia et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Xia et al\\.", "year": 2008}], "referenceMentions": [{"referenceID": 10, "context": "However, as argued earlier, for instance by Domshlak and Brafman (2002), acyclic CP-nets are not sufficiently expressive to capture human preferences on even some simple domains.", "startOffset": 44, "endOffset": 72}, {"referenceID": 13, "context": "We refer to Papadimitriou (1994) for details.", "startOffset": 12, "endOffset": 33}, {"referenceID": 0, "context": "Let us recall the definition of a decision problem as presented by Ausiello et al. (1999). A decision problem is a pair P = \u3008IP ,YP \u3009 where IP is a set of strings (formally, a subset of \u03a3\u2217, where \u03a3 is a finite alphabet), The decision problem P = \u3008IP ,YP \u3009 reads as follows: given a string x \u2208 IP , decide whether x \u2208 YP .", "startOffset": 67, "endOffset": 90}, {"referenceID": 3, "context": "GCP-nets extend the notion of CP-nets (Boutilier et al., 1999).", "startOffset": 38, "endOffset": 62}, {"referenceID": 1, "context": "Some are discussed for instance by Boutilier et al. (2004a) in Section 6 of their paper.", "startOffset": 35, "endOffset": 60}, {"referenceID": 1, "context": "Under this embedding, the concepts of dominance and consistency we introduced here for GCP-nets generalize the ones considered for CP-nets as defined by Boutilier et al. (2004a). Problems CP-DOMINANCE and CP-CONSISTENCY are defined analogously to Definition 3.", "startOffset": 153, "endOffset": 178}, {"referenceID": 1, "context": "Under this embedding, the concepts of dominance and consistency we introduced here for GCP-nets generalize the ones considered for CP-nets as defined by Boutilier et al. (2004a). Problems CP-DOMINANCE and CP-CONSISTENCY are defined analogously to Definition 3. In the paper we are interested in the complexity of dominance and consistency problems for both GCPnets and CP-nets. Therefore, the matter of the way in which these nets (especially CP-nets, as for GCP-nets there are no alternative proposals) are represented is important. Our representation of CP-nets is often more compact than the one proposed by Boutilier et al. (2004a), as the formulas p+(x) and p\u2212(x) implied by the conditional preference tables can often be given equivalent, but exponentially smaller, disjunctive normal form representations.", "startOffset": 153, "endOffset": 636}, {"referenceID": 9, "context": "We have the following result due to Bylander (1994).", "startOffset": 36, "endOffset": 52}, {"referenceID": 9, "context": "Proposition 3 (Bylander, 1994) STRIPS PLAN is PSPACE-complete.", "startOffset": 14, "endOffset": 30}, {"referenceID": 14, "context": "This restriction has no effect on the complexity of the plan existence problem: it remains PSPACE-complete under the goal-completeness restriction (Lang, 2004).", "startOffset": 147, "endOffset": 159}, {"referenceID": 9, "context": "PSPACE-completeness of propositional STRIPS planning with single-effect actions was proved already by Bylander (1994). However, to deal with acyclicity we need to give a different reduction than the one used in that paper.", "startOffset": 102, "endOffset": 118}, {"referenceID": 1, "context": "The similarities between dominance testing in CP-nets and propositional STRIPS planning were first noted by Boutilier et al. (1999). They presented a reduction, discussed later in more detail by Boutilier et al.", "startOffset": 108, "endOffset": 132}, {"referenceID": 1, "context": "The similarities between dominance testing in CP-nets and propositional STRIPS planning were first noted by Boutilier et al. (1999). They presented a reduction, discussed later in more detail by Boutilier et al. (2004a), from the dominance problem to the plan existence problem for a class of propositional STRIPS planning specifications consisting of unary actions (actions with single effects).", "startOffset": 108, "endOffset": 220}, {"referenceID": 1, "context": "The similarities between dominance testing in CP-nets and propositional STRIPS planning were first noted by Boutilier et al. (1999). They presented a reduction, discussed later in more detail by Boutilier et al. (2004a), from the dominance problem to the plan existence problem for a class of propositional STRIPS planning specifications consisting of unary actions (actions with single effects). We prove our results for the GCP-DOMINANCE and GCP-CONSISTENCY problems by constructing a reduction in the other direction. This reduction is much more complex than the one used by Boutilier et al. (1999), due to the fact that CP-nets impose more restrictions than STRIPS planning.", "startOffset": 108, "endOffset": 602}, {"referenceID": 14, "context": "Theorem 1 implies the PSPACE-completeness of dominance in the more general conditional preference language introduced by Wilson (2004b), where the conditional preference rules are written in conjunctive form.", "startOffset": 98, "endOffset": 136}], "year": 2008, "abstractText": "We investigate the computational complexity of testing dominance and consistency in CP-nets. Previously, the complexity of dominance has been determined for restricted classes in which the dependency graph of the CP-net is acyclic. However, there are preferences of interest that define cyclic dependency graphs; these are modeled with general CP-nets. In our main results, we show here that both dominance and consistency for general CP-nets are PSPACE-complete. We then consider the concept of strong dominance, dominance equivalence and dominance incomparability, and several notions of optimality, and identify the complexity of the corresponding decision problems. The reductions used in the proofs are from STRIPS planning, and thus reinforce the earlier established connections between both areas.", "creator": "dvips(k) 5.96.1 Copyright 2007 Radical Eye Software"}}}