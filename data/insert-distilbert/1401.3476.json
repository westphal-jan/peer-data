{"id": "1401.3476", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Jan-2014", "title": "The Complexity of Circumscription in DLs", "abstract": "as fragments of first - order logic, description logics ( dls ) don't provide inherently nonmonotonic features such as defeasible inheritance and default rules. since many applications would benefit from the availability of such features, several families worthy of nonmonotonic dls have been developed proving that likely are mostly based on default logic and autoepistemic logic. in this paper, we consider circumscription as an interesting alternative approach to nonmonotonic dls that, in particular, supports defeasible inheritance in a natural way. we study dls extended with circumscription under different language restrictions and under different constraints and on the sets of minimized, fixed, and varying multiple predicates, and pinpoint the exact computational complexity of reasoning for dls ranging from alc * to alcio and alcqo. moreover when the minimized and fixed subset predicates include only concept names but generate no role names, then reasoning is complete for nexptime ^ np. it becomes complete for np ^ nexptime when the number of minimized and fixed predicates is bounded by a constant. if roles can be minimized or fixed, then complexity ranges from nexptime ^ np to undecidability.", "histories": [["v1", "Wed, 15 Jan 2014 05:32:08 GMT  (447kb)", "http://arxiv.org/abs/1401.3476v1", null]], "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["piero a bonatti", "carsten lutz", "frank wolter"], "accepted": false, "id": "1401.3476"}, "pdf": {"name": "1401.3476.pdf", "metadata": {"source": "CRF", "title": "The Complexity of Circumscription in Description Logic", "authors": ["Piero A. Bonatti", "Carsten Lutz", "Frank Wolter"], "emails": ["bonatti@na.infn.it", "clu@informatik.uni-bremen.de", "wolter@liverpool.ac.uk"], "sections": [{"heading": "1. Introduction", "text": "Early knowledge representation (KR) formalisms such as semantic networks and frames included a wealth of features in order to provide as much expressive power as possible (Quillian, 1968; Minsky, 1975). In particular, such formalisms usually admitted a structured representation of classes and objects similar to modern description logics (DLs), but also mechanisms for defeasible inheritance, default rules, and other features that are nowadays studied in the area of nonmonotonic logics (NMLs). When KR theory developed further, the all-embracing approaches were largely given up in favour of more specialized ones due to unfavourable computational properties and problems with the semantics. This process has caused DLs and NMLs to develop into two independent subfields. Consequently, modern description logics such as SHIQ lack the expressive power to represent defeasible inheritance and other nonmonotonic features (Horrocks, Sattler, & Tobies, 2000).\nDespite (or due to) this development, there has been a continuous interest in the (re)integration of nonmonotonic features into description logics. In recent years, the advent of several new applications of DLs have increased this interest even further. We briefly discuss two of them. First, DLs have become a popular tool for the formalization of biomed-\nc\u00a92009 AI Access Foundation. All rights reserved.\nical ontologies such as GALEN (Rector & Horrocks, 1997) and SNOMED (Cote, Rothwell, Palotay, Beckett, & Brochu, 1993). As argued for example by Rector (2004) and Stevens et al. (2005), it is important for such ontologies to represent exceptions of the form \u201cin humans, the heart is usually located on the left-hand side of the body; in humans with situs inversus, the heart is located on the right-hand side of the body\u201d. Modelling such situations requires defeasible inheritance, i.e., properties transfer to all instances of a class by default, but can be explicitly overridden in special cases (McCarthy, 1986; Horty, 1994; Brewka, 1994; Baader & Hollunder, 1995b). The second application is the use of DLs as security policy languages (Uszok, Bradshaw, Johnson, Jeffers, Tate, Dalton, & Aitken, 2004; Kagal, Finin, & Joshi, 2003; Tonti, Bradshaw, Jeffers, Montanari, Suri, & Uszok, 2003). In formalizing access control policies, one must deal with the situation where a given request is neither explicitly allowed nor explicitly denied. Then, a default decision has to be taken such as in open and closed policies, where authorizations are respectively granted or denied by default (Bonatti & Samarati, 2003). Moreover, policies are often formulated incrementally, i.e., start with general authorizations for large classes of subjects, objects, and actions, and then progressively refine them by introducing exceptions for specific subclasses. This approach is clearly an incarnation of defeasible inheritance.\nWhile the above applications illustrate that integrating nonmonotonic features into DLs is worthwhile, the actual engineering of a computationally well-behaved nonmonotonic DL that provides sufficient expressive power turns out to be a non-trivial task. In particular, combinations of DLs and nonmonotonic logics typically involve subtle interactions between the two component logics and this easily leads to undecidability. It appears that there is no one optimal way to circumnavigate these difficulties, and thus many different combinations of DLs and nonmonotonic logics have been proposed in the literature, each with individual strengths and limitations (we provide a survey in Section 7). However, there is a striking gap: almost all existing approaches are based on default logic and autoepistemic logic, while circumscription has received very little attention in connection with DLs, and the computational properties of DLs with circumscription have been almost completely unknown. This is all the more surprising since circumscription is known to be one of the weakest forms of nonmonotonic reasoning\u2014see the work by Janhunen (1999) for one of the most recent surveys, and the paper by Bonatti and Eiter (1996) for an expressiveness analysis in terms of queries. Therefore, it is a natural idea to use circumscription for defining a computationally well-behaved, yet expressive DL with nonmonotonic features.\nIn this paper, we study circumscription (McCarthy, 1980) as an alternative approach to defining nonmonotonic DLs. In particular, we define a family of DLs with circumscription that enable a natural modelling of defeasible inheritance. Our general approach is to generalize standard DL knowledge bases to circumscribed knowledge bases (cKBs) which, additionally to a TBox for representing terminological knowledge and an ABox for representing knowledge about individuals, are equipped with a circumscription pattern. This pattern lists predicates (i.e., concept and role names) to be minimized in the sense that, in all admitted models of the cKB, the extension of the listed predicates has to be minimal w.r.t. set inclusion. Following McCarthy (1986), the minimized predicates can be used as \u201cabnormality predicates\u201d that identify instances which are not typical for their class. Circumscription patterns can require other predicates to be fixed during minimization, or allow them to vary freely (McCarthy, 1986). A main feature of the DLs of our family is that they\ncome with a built-in mechanism for defeasible inheritance: by default, the properties of a class (\u201chumans\u201d in the first example above) transfer to each subclass (\u201chumans with situs inversus\u201d), but exceptions can be specified based on a priority mechanism. It is well-known that defeasible inheritance with priority cannot be modularly encoded with pure default or autoepistemic logic (Horty, 1994), and workarounds such as the explicit listing of exceptions lead to serious maintainability problems. Circumscription lends itself naturally to priorities, based on circumscription patterns that can express preferences between minimized predicates in terms of a partial ordering. As argued by Baader and Hollunder (1995b), such an approach is well-suited to ensure a smooth interplay between defeasible inheritance and DL subsumption, and thus we prefer it over traditional prioritized circumscription.\nTo achieve decidability, nonmonotonic DLs usually have to adopt suitable restrictions on the expressive power of the DL component, on non-monotonic features, or their interaction. In the case of default logic and autoepistemic logic, a typical restriction concerns the different treatment of individuals that are explicitly denoted by a constant, and those that are not. This goes back to reasoning in first-order default logic (Reiter, 1980) and autoepistemic logic (Moore, 1985), which also involve tricky technical issues related to the denotation of individuals. To make reasoning decidable in DLs based on default logic, default rules are applied only to the individuals denoted by constants that occur explicitly in the knowledge base (Baader & Hollunder, 1995a), but not to unnamed individuals. As a consequence, named and unnamed individuals are not treated uniformly. In approaches based on autoepistemic logic (Donini, Lenzerini, Nardi, Nutt, & Schaerf, 1998; Donini, Nardi, & Rosati, 1997, 2002), an alternative solution is to restrict the domain to a fixed, denumerable set of constants. This approach overcomes the different treatment of named and unnamed individuals since all individuals are named. The flipside is that ad-hoc encodings are required when the domain is finite or the unique name assumption is not enforced, i.e., when different constants are allowed to denote the same individual. In this respect, DLs with circumscription pose no difficulty at all, and named individuals are treated in exactly the same way as unnamed ones without any assumptions on the domain. At the same time, we are able to base our nonmonotonic DLs on rather expressive DL components such as ALCIO and ALCQO without losing decidability. However, we cannot do without any restrictions either: we only allow to fix and minimize concept names during circumscription and require that all role names vary.\nThe main contribution of this paper is a detailed analysis of the computational properties of reasoning with cKBs. We show that, in the expressive DLsALCIO andALCQO, instance checking, satisfiability and subsumption are decidable for concept-circumscribed KBs in which only concept names (and no role names) are minimized and fixed. More precisely, we prove that these reasoning problems are NExpNP-complete, where the lower bound applies already to concept-circumscribed KBs in ALC with empty preference relation and without fixed concept names and (1) empty TBox or (2) empty ABox and acyclic TBox. In addition, we show that if a constant bound is imposed on the number of minimized and fixed concept names, then the complexity drops to NPNExp.\nThe situation is completely different when role names are minimized or fixed. First, the complexity of reasoning with cKBs formulated in ALC with a single fixed role name, empty TBox, empty preference relation, and no minimized role names turns out to be outside the analytic hierarchy, and thus very highly undecidable. This result is shown by a reduction\nof satisfiability in monadic second-order logic (MSO) with binary predicates over arbitrary (i.e., not necessarily tree-shaped) structures. The reduction does not apply to cKBs in which role names can be minimized, but not fixed. Surprisingly, we find that in this case reasoning with empty TBoxes becomes decidable (and again NExpNP-complete) for DLs between ALC and ALCQO, and only for ALCI and its extensions it is undecidable. For all these logics, however, adding acyclic TBoxes leads to undecidability. The reader can find a table summarising the complexity results in Section 7.\nIt is interesting to note that our results are somewhat unusual from the perspective of NMLs. First, the arity of predicates has an impact on decidability: fixing concept names (unary predicates) does not impair decidability, whereas fixing a single role name (binary predicate) leads to a strong undecidability result. Second, the number of predicates that are minimized or fixed (bounded vs. unbounded) affects the computational complexity of reasoning. Although (as we note in passing) a similar effect can be observed in propositional logic with circumscription, this has, to the best of our knowledge, never been explicitly noted.\nThe paper is organized as follows. In the next section we introduce syntax, semantics, and reasoning problems for circumscribed KBs, and provide some examples. Section 3 provides some basic results such as a polynomial simulation of fixed concepts by means of minimized concepts, a polynomial reduction of reasoning with general TBoxes to reasoning with acyclic TBoxes, and a polynomial reduction of the simultaneous satisfiability of multiple cKBs to standard satisfiability. Then, Section 4 proves the decidability and complexity results for concept-circumscribed knowledge bases. Fixed and minimized roles are considered in Sections 5 and 6, respectively. Section 7 discusses related work, and Section 8 concludes the paper by summarizing the main results and pointing out some interesting directions for further research. To improve readability, many proof details are deferred to the appendix. This paper is an extended version of the article by Bonatti, Lutz, and Wolter (2006)."}, {"heading": "2. Description Logics and Circumscription", "text": "In DLs, concepts are inductively defined with the help of a set of constructors, starting with a set NC of concept names, a set NR of role names, and (possibly) a set NI of individual\nnames (all countably infinite). We use the term predicates to refer to elements of NC \u222aNR. The concepts of the expressive DL ALCQIO are formed using the constructors shown in Figure 1.\nThere, the inverse role constructor is a role constructor, whereas the remaining six constructors are concept constructors. In Figure 1 and throughout this paper, we use #S to denote the cardinality of a set S, a and b to denote individual names, r and s to denote roles (i.e., role names and inverses thereof), A,B to denote concept names, and C,D to denote (possibly complex) concepts. As usual, we use > as abbreviation for an arbitrary (but fixed) propositional tautology, \u22a5 for \u00ac>,\u2192 and\u2194 for the usual Boolean abbreviations, \u2203r.C (existential restriction) for (> 1 r C), and \u2200r.C (universal restriction) for (6 0 r \u00acC).\nIn this paper, we will not be concerned with ALCQIO itself, but with several of its fragments.1 The basic such fragment allows only for negation, conjunction, disjunction, and universal and existential restrictions, and is called ALC. The availability of additional constructors is indicated by concatenation of a corresponding letter: Q stands for number restrictions, I stands for inverse roles, and O for nominals. This explains the name ALCQIO, and also allows us to refer to fragments such as ALCIO, ALCQO, and ALCQI.\nThe semantics of ALCQIO-concepts is defined in terms of an interpretation I = (\u2206I , \u00b7I). The domain \u2206I is a non-empty set of individuals and the interpretation function \u00b7I maps each concept name A \u2208 NC to a subset AI of \u2206I , each role name r \u2208 NR to a binary relation rI on \u2206I , and each individual name a \u2208 NI to an individual aI \u2208 \u2206I . The extension of \u00b7I to inverse roles and arbitrary concepts is inductively defined as shown in the third column of Figure 1. An interpretation I is called a model of a concept C if CI 6= \u2205. If I is a model of C, we also say that C is satisfied by I.\nA (general) TBox is a finite set of concept implications (CIs) C v D where C and D are concepts. As usual, we use C .= D as an abbreviation for C v D and D v C. An ABox is a finite set of concept assertions C(a) and role assertions r(a, b), where a, b are individual names, r is a role name, and C is a concept. An interpretation I satisfies (i) a CI C v D if CI \u2286 DI , (ii) an assertion C(a) if aI \u2208 CI , and (iii) an assertion r(a, b) if (aI , bI) \u2208 rI . Then, I is a model of a TBox T if it satisfies all implications in T , and a model of an ABox A if it satisfies all assertions in A.\nAn important class of TBoxes are acyclic TBoxes: call a TBox T acyclic if it is a set of concept definitions A .= C, where A is a concept name and the following two conditions hold:\n\u2022 no concept name occurs more than once on the left hand side of a definition in T ;\n\u2022 the relation \u227aT , defined by setting A \u227aT B iff A .= C \u2208 T and B occurs in C, is\nwell-founded.\n1. The reason that we do not consider ALCQIO in this paper is that it does not have the finite model property; i.e., there are satisfiable concepts that are not satisfiable in finite models. Our proofs of the complexity upper bounds assume the finite model property and, therefore, do not work for ALCQIO. Investigating circumscription for description logics without the finite model property remains an interesting open problem."}, {"heading": "2.1 Circumscription, Varying Predicates, and Partial Priority Ordering", "text": "Circumscription is a logical approach suitable for modelling what normally or typically holds, and thus admits the modeling of defeasible inheritance (McCarthy, 1986; Lifschitz, 1993). The idea is to define, in a standard first-order language, both domain knowledge and so-called abnormality predicates that identify instances of a class that violate the normal or typical properties of that class. To capture the intuition that abnormality is exceptional, inference is not based on the set of all models of the resulting theory as in classical logic, but rather restricted to those models where the extension of the abnormality predicates is minimal with respect to set inclusion. Intuitively, this means that reasoning is based only on models that are \u201cas normal as possible\u201d. Since such models are classical models of the given knowledge base, all classical first-order inferences are valid in circumscription (but additional inferences may become possible).\nSince description logics are fragments of first-order logic, circumscription can be readily applied. Using ALC syntax, we can assert that mammals normally inhabitate land, and that whales do not live on land:\nMammal v \u2203habitat.Land t AbMammal Whale v Mammal u \u00ac\u2203habitat.Land\nThe upper inclusion states that any mammal not inhabitating land is an abnormal mammal, thus satisfying the abnormality predicate AbMammal. When applying circumscription to the above TBox, we should thus only consider models where the extension of AbMammal is minimal. However, there is more than one way of defining such preferred models because each nonminimized predicate can be treated in two different ways during minimization: we may either fix its extension or let it vary freely.\nIntuitively, fixed predicates retain their classical semantics while varying predicates may be affected by minimization. As a concrete example, consider once more the above TBox and assume that all non-minimized predicates are fixed. Then we can derive the following subsumptions:\nWhale v AbMammal AbMammal .= Mammal u \u00ac\u2203habitat.Land. (\u2020)\nHere, Whale v AbMammal and AbMammal w Mammalu\u00ac\u2203habitat.Land are classical consequences of the TBox. The minimization of AbMammal adds only the inclusion AbMammal v Mammal u \u00ac\u2203habitat.Land.\nTo further analyze fixed predicates, suppose that we explicitly introduce a concrete mammal that is not a whale by adding an ABox assertion\nMammal u \u00acWhale(flipper)\nWe might expect that we can derive \u2203habitat.Land(flipper), but actually that is not the case. To see this, observe that there is a classical model of the knowledge base that falsifies \u2203habitat.Land(flipper); the extension of the fixed predicates habitat and Land are not affected by minimization, so \u2203habitat.Land(flipper) must still be false after minimization. The same argument can be applied to the negation of \u2203habitat.Land(flipper), which is thus also not derivable. What we have just seen is that if a sentence uses only fixed\npredicates, then it is a consequence of a circumscribed knowledge base if, and only if, it is a classical consequence of the knowledge base.\nNow assume that we let the role habitat and the concept name Land vary freely, and fix only Mammal and Whale. In view of the concept inclusion for Mammal in our original TBox, this setup may be interpreted as expressing that it is very unlikely for a mammal not to live on land: we are willing to modify the extension of habitat and Land in order to avoid abnormality. We obtain an additional consequence, namely:\nWhale .= AbMammal. (\u2021)\nTo see that this is indeed a consequence note that, during minimization, we can (i) make Land non-empty and (ii) for any mammal m that is not a whale, ensure that m is not an AbMammal by linking it via habitat to the generated instance of Land.2 Intuitively, the equality (\u2021) can be seen as reflecting the unlikeliness of being abnormal: a mammal is only abnormal if there is a reason, and the only reason that we have captured in our knowledge base is being a whale.\nLet us now return to the assertion Mammal u \u00acWhale(flipper). By applying classical reasoning to (\u2020) and (\u2021), we derive Whale w Mammal u \u00ac\u2203habitat.Land (i.e., whales are the only mammals that do not live on land). Thus we can now derive the expected conclusion \u2203habitat.Land(flipper). In summary, by turning habitat and Land into varying predicates, we have obtained a more natural modelling in which the habitat attribute of mammals can be forced to its default value.\nDriving our example further, we might now consider whales abnormal to such a degree that we do not believe they exist unless there is evidence that they do. Then we should, additionally, let Whale vary freely. The result is that (\u2020) and (\u2021) can still be derived, and additionally we obtain the consequence\nWhale .= AbMammal .= \u22a5.\nWe can then use an ABox to add evidence that whales exist, e.g. through the assertion Whale(mobydick). As expected, the result of this change is that\nWhale .= AbMammal .= {mobydick}.\nEvidence for the existence of another, anonymous whale could be generated by adding the ABox assertion Male(mobydick) and the TBox statement\nWhale v \u2203mother.(Whale u \u00acMale)\nwith mother and Male varying freely. This knowledge base classically entails that there exist two whales, satisfying Male and \u00acMale, respectively. The former is denoted by mobydick, while the latter is not denoted by any ABox individual (which corresponds to a first-order constant). After minimization, Whale contains exactly those two individuals.\nIn general, the appropriate combination of fixed and varying predicates depends on the application. Therefore, we adhere to standard circumscription and give users the freedom to choose which predicates are minimized, fixed, and varying.\n2. Indeed, this is the only reason to let Land vary: to ensure that it can be made non-empty during minimization.\nAs another example, consider the sentences: \u201cIn humans, the heart is usually located on the left-hand side of the body; in humans with situs inversus, the heart is located on the right-hand side of the body\u201d. They can be axiomatized as follows:\nHuman v \u2203has heart.\u2203has position.{Left} t AbHuman Situs Inversus v \u2203has heart.\u2203has position.{Right} \u2203has heart.\u2203has position.{Left} u \u2203has heart.\u2203has position.{Right} v \u22a5 .\nThe predicate AbHuman represents abnormal humans and should be minimized. If humans with situs inversus are to be restricted to those individuals that are explicitly declared to have this property, then by analogy with the previous example the roles specifying heart position and the class of exceptional individuals Situs Inversus should be allowed to vary while Human can be fixed and retain its classical semantics. As a result and in the absence of any further axioms, AbHuman and Situs Inversus are empty in all minimized models. The additional axiom \u2203has friend.Situs Inversus(John) turns AbHuman and Situs Inversus into a singleton set containing an anonymous individual (though in some models, it may be John himself). As an example for a nonclassical consequence, consider:\nHuman u \u00acSitus Inversus v \u2203has heart.\u2203has position.{Left} ,\nthat is, all humans have the default heart position with the only exception of those that are explicitly declared to have situs inversus.\nIt has been extensively argued (McCarthy, 1986; Horty, 1994; Brewka, 1994; Baader & Hollunder, 1995b) that there is an interplay between subsumption and abnormality predicates that should be addressed in nonmonotonic DLs. Consider, for example, the following TBox:\nUser v \u00ac\u2203hasAccessTo.{ConfidentialFile} t AbUser Staff v User Staff v \u2203hasAccessTo.{ConfidentialFile} t AbStaff\nBlacklistedStaff v Staff u \u00ac\u2203hasAccessTo.{ConfidentialFile}\nTo get models that are \u201cas normal as possible\u201d, as a first attempt we could minimize the two abnormality predicates AbUser and AbStaff in parallel. Assume that hasAccessTo is varying, and User, Staff, and BlacklistedStaff are fixed. Then, the result of parallel minimization is that staff members may or may not have access to confidential files, with equal preference. In the first case, they are abnormal users, and in the second case, they are abnormal staff. However, one may argue that the first option should be preferred: since Staff v User (but not the other way round), the normality information for staff is more specific than the normality information for users and should have higher priority. Such effects are well-known also from the propositional/first-order case and indeed, circumscription has soon after its introduction been extended with priorities to address issues of specificity (McCarthy, 1986).\nIn our formalism, users can specify priorities between minimized predicates. Typically, these priorities will reflect the subsumption hierarchy (as computed w.r.t. the class of all models). Since the subsumption hierarchy is in general a partial order, the priorities between minimized predicates may form a partial order, too. This approach is analogous to partially\nordering priorities on default rules, as proposed by Brewka (1994). It is more general than standard prioritized circumscription, which assumes a total ordering (McCarthy, 1986; Lifschitz, 1985), and a special case of nested circumscription (Lifschitz, 1995)."}, {"heading": "2.2 Circumscribed Knowledge Bases", "text": "To define DLs with circumscription, we start by introducing circumscription patterns. They describe how individual predicates are treated during minimization.\nDefinition 1 (Circumscription pattern, <CP) A circumscription pattern is a tuple CP of the form (\u227a,M, F, V ), where \u227a is a strict partial order over M , and M , F , and V are mutually disjoint subsets of NC \u222a NR, the minimized, fixed, and varying predicates, respectively. By , we denote the reflexive closure of \u227a. Define a preference relation <CP on interpretations by setting I <CP J iff the following conditions hold:\n1. \u2206I = \u2206J and, for all a \u2208 NI, aI = aJ ,\n2. for all p \u2208 F , pI = pJ ,\n3. for all p \u2208M , if pI 6\u2286 pJ then there exists q \u2208M , q \u227a p, such that qI \u2282 qJ ,"}, {"heading": "4. there exists p \u2208M such that pI \u2282 pJ and for all q \u2208M such that q \u227a p, qI = qJ .", "text": "When M \u222a F \u2286 NC (i.e., the minimized and fixed predicates are all concepts) we call (\u227a,M, F, V ) a concept circumscription pattern. 4\nWe use the term concept circumscription if only concept circumscription patterns are admitted. Based on circumscription patterns, we can define circumscribed DL knowledge bases and their models.\nDefinition 2 (Circumscribed KB) A circumscribed knowledge base (cKB) is an expression CircCP(T ,A), where T is a TBox, A an ABox, and CP = (\u227a,M, F, V ) a circumscription pattern such that M,F, V partition the predicates used in T and A. An interpretation I is a model of CircCP(T ,A) if it is a model of T and A and there exists no model I \u2032 of T and A such that I \u2032 <CP I.\nA cKB CircCP(T ,A) is called a concept-circumscribed KB if CP is a concept circumscription pattern. 4\nNote that partially ordered circumscription becomes standard parallel circumscription if the empty relation is used for \u227a.\nThe main reasoning tasks for (non-circumscribed) KBs are satisfiability of concepts w.r.t. KBs, subsumption w.r.t. KBs, and instance checking w.r.t. KBs. These reasoning tasks are fundamental for circumscribed KBs as well. We now provide precise definitions of these tasks. Throughout this and the following section, DL denotes the set of DLs introduced in the previous section; i.e., ALC, ALCI, ALCO, ALCQ, ALCQI, ALCIO, ALCQO, and ALCQIO.\nDefinition 3 (Reasoning tasks)\n\u2022 A concept C is satisfiable w.r.t. a cKB CircCP(T ,A) if some model I of CircCP(T ,A) satisfies CI 6= \u2205. Let L \u2208 DL. The satisfiability problem w.r.t. cKBs in L is defined as follows: given a concept C in L and a cKB CircCP(T ,A) in L, decide whether C is satisfiable w.r.t. CircCP(T ,A).\n\u2022 A concept C is subsumed by a concept D w.r.t. a cKB CircCP(T ,A), in symbols CircCP(T ,A) |= C v D, if CI \u2286 DI for all models I of CircCP(T ,A). Let L \u2208 DL. The subsumption problem w.r.t. cKBs in L is defined as follows: given concepts C and D in L and a cKB CircCP(T ,A) in L, decide whether CircCP(T ,A) |= C v D.\n\u2022 An individual name a is an instance of a concept C w.r.t. a cKB CircCP(T ,A), in symbols CircCP(T ,A) |= C(a), if aI \u2208 CI for all models I of CircCP(T ,A). Let L \u2208 DL. The instance problem w.r.t. cKBs in L is defined as follows: given a concept C in L, an individual name a, and a cKB CircCP(T ,A) in L, decide whether CircCP(T ,A) |= C(a).\n4\nThese reasoning problems can be polynomially reduced to one another: first, C is satisfiable w.r.t. CircCP(T ,A) iff CircCP(T ,A) 6|= C v \u22a5, and CircCP(T ,A) |= C v D iff C u \u00acD is not satisfiable w.r.t. CircCP(T ,A). And second, C is satisfiable w.r.t. CircCP(T ,A) iff CircCP(T ,A) 6|= \u00acC(a), where a is an individual name not appearing in T and A; conversely, we have CircCP(T ,A) |= C(a) iff Au\u00acC is not satisfiable w.r.t. CircCP\u2032(T ,A\u222a{A(a)}), where A is a concept name not occurring in T and A, and CP\u2032 is obtained from CP by adding A to M (and leaving \u227a as it is). In this paper, we use satisfiability w.r.t. cKBs as the basic reasoning problem."}, {"heading": "3. Basic Reductions", "text": "We present three basic reductions between reasoning problems for circumscribed knowledge bases that are interesting in their own right and, additionally, will be useful for establishing the main results of this paper later on. More precisely, we replay a well-known reduction of fixed predicates to minimized predicates in the context of DLs, reduce reasoning w.r.t. cKBs with general TBoxes to reasoning w.r.t. cKBs with acyclic TBoxes, and show that, under certain conditions, simultaneous satisfiability w.r.t. a collection of cKBs is reducible to satisfiability w.r.t. a single cKB."}, {"heading": "3.1 Fixed and minimized concepts", "text": "In circumscription, it is folklore that fixed predicates can be simulated in terms of minimized predicates, see e.g. de Kleer (1989). In the case of DLs, the same simulation is possible for concept names. To see this, let C0 be a concept and CircCP(T ,A) a circumscribed KB with CP = (\u227a,M, F, V ) and F0 = {A1, . . . , Ak} = F \u2229 NC. Define a new pattern CP\u2032 = (\u227a,M \u2032, F \\ F0, V ) with\n\u2022 M \u2032 = M \u222a{A1, . . . , Ak, A\u20321, . . . , A\u2032k}, where A\u20321, . . . , A\u2032k are concept names that do not occur in C0, M , F , V , T , and A;\n\u2022 T \u2032 = T \u222a {A\u2032i .= \u00acAi | 1 \u2264 i \u2264 k}.\nIt is not difficult to see that C0 is satisfiable w.r.t. CircCP(T ,A) iff it is satisfiable w.r.t. CircCP\u2032(T \u2032,A). Thus, we get the following result.\nLemma 4 Let L \u2208 DL. Then satisfiability w.r.t. (concept-)circumscribed KBs in L can be polynomially reduced to satisfiability w.r.t. (concept-)circumscribed KBs in L that have no fixed concept names.\nIn contrast to concept names, fixed role names cannot be reduced to minimized role names since Boolean operators on roles are not available in standard DLs such as ALCQIO. A proof is given in Section 6, where we show that, in some cases, reasoning with minimized role names is decidable, whereas the corresponding reasoning task for cKBs with fixed role names is undecidable.\nThe reduction above clearly relies on TBoxes. However, in this paper we will sometimes work with circumscribed KBs in which the TBox is empty. The following lemma, proved in the appendix, shows that for cKBs in ALC without fixed role names and with empty TBox, one can simulate fixed concept names using minimized concept names without introducing a TBox. The proof, which may be viewed as a much more careful version of the proof of Lemma 4, can be adapted to yield an analogous result for the other logics in DL.\nLemma 5 In ALC, satisfiability w.r.t. (concept-)circumscribed KBs with empty TBox and without fixed roles can be polynomially reduced to satisfiability w.r.t. (concept-)circumscribed KBs with empty TBox and without fixed predicates."}, {"heading": "3.2 Acyclic and General TBoxes", "text": "For many DLs, satisfiability w.r.t. (non-circumscribed) KBs with general TBoxes is harder than satisfiability w.r.t. (non-circumscribed) KBs with acyclic TBoxes. In the case of ALC, ALCI, ALCQ, and ALCQO, the latter problem is PSpace-complete (Baader, McGuiness, Nardi, & Patel-Schneider, 2003; Baader, Milicic, Lutz, Sattler, & Wolter, 2005b; Y. Ding & Wu, 2007) while the former is ExpTime-complete (Baader et al., 2003). The only DLs considered in this paper for which satisfiability is ExpTime-hard already with acyclic TBoxes are ALCIO and its extensions (Areces, Blackburn, & Marx, 2000). We show that, for circumscribed KBs, there is no difference in computational complexity between acyclic and general TBoxes.\nLet C0 be a concept and CircCP(T ,A) a cKB with CP = (\u227a,M, F, V ). We may assume without loss of generality that T = {> .= C} for some concept C. (To see this, observe that axioms C v D are equivalent to > .= \u00acC tD). Define\n\u2022 an acyclic TBox T \u2032 = {A .= C,B .= \u2203u.\u00acA,A\u2032 .= \u00acA,B\u2032 .= \u00acB}, where A,B,A\u2032, B\u2032, u are new concept and role names not occurring in T , A, M , F , V , and C0.\n\u2022 a circumscription pattern CP\u2032 = (\u227a,M \u2032, F, V \u2032), where M \u2032 = M \u222a {A\u2032, B\u2032} and V \u2032 = V \u222a {A,B, u}.\nWe will ad B\u2032 conjunctively to C0 and thus be interested in models of CircCP\u2032(T \u2032,A) where (B\u2032)I 6= \u2205. In such models, we have AI = \u2206I (and thus CI = \u2206I) since, otherwise, we can turn each instance d of B\u2032 into an instance of \u00acB\u2032 by making d an instance of B and\nlinking it via the role u to an instance of \u00acA, thus obtaining a more preferred model w.r.t. <CP\u2032 . This is the basis of the proof of the following lemma, given in the appendix.\nLemma 6 C0 is satisfiable w.r.t. CircCP(T ,A) iff C0uB\u2032 is satisfiable w.r.t. CircCP\u2032(T \u2032,A).\nThus, we have obtained the following result.\nProposition 7 Let L \u2208 DL. Satisfiability w.r.t. (concept-)circumscribed KBs in L can be polynomially reduced to satisfiability w.r.t. (concept-)circumscribed KBs in L with acyclic TBoxes and without changing the ABox.\nThis shows that satisfiability w.r.t. cKBs with acyclic TBoxes is of the same complexity as satisfiability w.r.t. cKBs with general TBoxes. In many cases considered in this paper, the same is even true for cKBs with empty TBoxes, c.f. Section 4. However, we also identify cases where cKBs with non-empty TBoxes have higher complexity (see Theorems 24 and 28), and thus a general reduction as the one underlying Proposition 7 cannot exist for the case of empty TBoxes."}, {"heading": "3.3 Simultaneous Satisfiability", "text": "In applications, it is often necessary to merge TBoxes, ABoxes, and whole knowledge bases by taking their union. We show that, under certain conditions, reasoning w.r.t. the union of several circumscribed KBs can be reduced to reasoning w.r.t. the component cKBs. A concept C is simultaneously satisfiable w.r.t. cKBs CircCP1(T1,A1), . . . ,CircCPk(Tk,Ak) if there exists an interpretation I that is a model of all the cKBs and satisfies CI 6= \u2205. The following lemma says that simultaneous satisfiability can be polynomially reduced to satisfiability w.r.t. a single cKB if there are no two cKBs that share a role name.\nThe proof idea for the case k = 2 is as follows. Given CircCP1(T1,A1) and CircCP2(T2,A2), we first take the union of these two cKBs, replacing in CircCP2(T2,A2) each concept name A that is also used in CircCP1(T1,A1) with a fresh concept name A\u2032. We then introduce an additional concept name P (for \u2018problem\u2019) and make sure that P is satisfied by each ABox individual whenever there is a point in the model where the interpretation of A and A\u2032 disagrees. We then look for a model where P is not satisfied in the ABox. Intuitively, the additional concept name P satisfies the purpose of \u2018decoupling\u2019 A and A\u2032, which is important e.g. in the case where A/A\u2032 is minimized both in CircCP1(T1,A1) and CircCP2(T2,A2). Details are given in the appendix.\nLemma 8 For all L \u2208 DL, simultaneous satisfiability w.r.t. (concept-)circumscribed KBs CircCP1(T1,A1), . . .CircCPk(Tk,Ak), such that CircCPi(Ti,Ai) and CircCPj (Tj ,Aj) share no role names for 1 \u2264 i < j \u2264 k, can be reduced in polynomial time to satisfiability w.r.t. single (concept-)circumscribed KBs."}, {"heading": "4. The Complexity of Reasoning in Concept-Circumscribed KBs", "text": "The main contributions of this paper consist in (i) showing that, in many cases, reasoning with circumscribed knowledge bases is decidable; and (ii) performing a detailed analysis\nof the computational complexity of these decidable cases. In this section, we show that satisfiability w.r.t. concept-circumscribed KBs is NExpNP-complete for the DL ALC and its extensionsALCIO andALCQO. We also show that it is NPNExp-complete if the number of fixed and minimized concept names is bounded by a constant. We first present proofs of the upper bounds and then establish matching lower bounds."}, {"heading": "4.1 Upper Bounds", "text": "We start with the general case in which there is no bound on the number of fixed and minimized predicates."}, {"heading": "4.1.1 The General Case", "text": "We prepare the upper bound proof by showing that if a concept is satisfiable w.r.t. a concept-circumscribed KB, then it is satisfiable in a model of bounded size. We use |C| to denote the length of the concept C, i.e., the number of (occurrences of) symbols needed to write C. The size |T | of a TBox T is \u2211 CvD\u2208T |C|+ |D|, and the size |A| of an ABox A is the sum of the sizes of all assertions in A, where the size of each role assertion is 1 and the size of concept assertions C(a) is |C|.\nLemma 9 Let C0 be a concept, CircCP(T ,A) a concept-circumscribed KB, and n := |C0|+ |T |+ |A|. If C0 is satisfiable w.r.t. CircCP(T ,A), then the following holds:\n(i) If T , A and C0 are formulated in ALCIO, then C0 is satisfied in a model I of CircCP(T ,A) with #\u2206I \u2264 22n.\n(ii) If T , A and C0 are formulated in ALCQO and m is the maximal parameter occurring in a number restriction in T , A, or C0, then C0 is satisfied in a model I of CircCP(T ,A) with #\u2206I \u2264 22n \u00d7 (m+ 1)\u00d7 n.\nProof. Let CP, T , A, and C0 be as in Lemma 9. We may assume that A = \u2205 as every assertion C(a) can be expressed as an implication {a} v C, and every assertion r(a, b) can be expressed as {a} v \u2203r.{b}. Denote by cl(C, T ) the smallest set of concepts that contains all subconcepts of C, all subconcepts of concepts appearing in T , and is closed under single negations (i.e., if D \u2208 cl(C, T ) and D does not start with \u00ac, then \u00acD \u2208 cl(C, T )).\nLet I be a common model of C0 and CircCP(T ,A), and let d0 \u2208 CI0 . Define an equivalence relation \u201c\u223c\u201d on \u2206I by setting d \u223c d\u2032 iff\n{C \u2208 cl(C0, T ) | d \u2208 CI} = {C \u2208 cl(C0, T ) | d\u2032 \u2208 CI}.\nWe use [d] to denote the equivalence class of d \u2208 \u2206I w.r.t. the \u201c\u223c\u201d relation. Pick from each equivalence class [d] exactly one member and denote the resulting subset of \u2206I by \u2206\u2032.\nWe first prove Point (i). Thus, assume that T and C0 are formulated in ALCIO. We define a new interpretation J as follows:\n\u2206J := \u2206\u2032 AJ := {d \u2208 \u2206\u2032 | d \u2208 AI} rJ := {(d1, d2) \u2208 \u2206\u2032 \u00d7\u2206\u2032 | \u2203d\u20321 \u2208 [d1], d\u20322 \u2208 [d2] : (d\u20321, d\u20322) \u2208 rI} aJ := d \u2208 \u2206\u2032 if aI \u2208 [d].\nThe following claim is easily proved using induction on the structure of C.\nClaim: For all C \u2208 cl(C0, T ) and all d \u2208 \u2206I , we have d \u2208 CI iff d\u2032 \u2208 CJ for the element d\u2032 \u2208 [d] of \u2206J .\nThus, J is a model of T satisfying C0. To show that J is a model of CircCP(T ,A), it thus remains to show that there is no model J \u2032 of T with J \u2032 <CP J . Assume to the contrary that there is such a J \u2032. We define an interpretation I \u2032 as follows:\n\u2206I \u2032 := \u2206I\nAI \u2032 := \u22c3\nd\u2208AJ \u2032 [d]\nrI \u2032 := \u22c3\n(d1,d2)\u2208rJ \u2032 [d1]\u00d7 [d2]\naI \u2032 := aI .\nIt is a matter of routine to show the following:\nClaim: For all concepts C \u2208 cl(C0, T ) and all d \u2208 \u2206I , we have d \u2208 CI \u2032 iff d\u2032 \u2208 CJ \u2032 for the element d\u2032 \u2208 [d] from \u2206J .\nIt follows that I \u2032 is a model of T . Observe that AI AI\u2032 iff AJ AJ \u2032 for each concept name A and \u2208 {\u2287,\u2286}. Therefore \u2013 and since CP is a concept circumscription pattern \u2013 I \u2032 <CP I follows from J \u2032 <CP J . We have derived a contradiction and conclude that J is a model of CircCP(T ,A). Thus we are done since the size of J is bounded by 22n.\nNow for Point (ii). Pick, for each d \u2208 \u2206\u2032 and each concept (> k r C) \u2208 cl(C0, T ) such that d \u2208 (> k r C)I , k elements from {d\u2032 | d\u2032 \u2208 CI , (d, d\u2032) \u2208 rI}. Also pick, for each concept (6 k r C) \u2208 cl(C0, T ) such that d \u2208 (\u00ac(6 k r C))I , k + 1 elements from {d\u2032 | d\u2032 \u2208 CI , (d, d\u2032) \u2208 rI}. Denote by \u2206\u2032\u2032 the collection of the elements picked. Take for each d \u2208 \u2206\u2032\u2032 \\\u2206\u2032 an element ds \u2208 \u2206\u2032 such that d \u223c ds and define an interpretation J by\n\u2206J := \u2206\u2032 \u222a\u2206\u2032\u2032 AJ := {d \u2208 \u2206\u2032 \u222a\u2206\u2032\u2032 | d \u2208 AI} rJ := {(d1, d2) \u2208 \u2206\u2032 \u00d7 (\u2206\u2032 \u222a\u2206\u2032\u2032) | (d1, d2) \u2208 rI}\n\u222a{(d1, d2) \u2208 (\u2206\u2032\u2032 \\\u2206\u2032)\u00d7 (\u2206\u2032 \u222a\u2206\u2032\u2032) | (ds1, d2) \u2208 rI} aJ := d if aI \u2208 [d].\nThe following claim is easily proved.\nClaim: For all C \u2208 cl(C0, T ), we have the following:\n(i) for all d, d\u2032 \u2208 \u2206J , if d \u223c d\u2032, then d \u2208 CJ iff d\u2032 \u2208 CJ ;\n(ii) for all d \u2208 \u2206I , we have d \u2208 CI iff d\u2032 \u2208 CJ for some element d\u2032 \u2208 [d] of \u2206J .\nThus, J is a model of T satisfying C0. To show that J is a model of CircCP(T ,A), it thus remains to show that there is no model J \u2032 of T with J \u2032 <CP J . Assume to the contrary that there is such a J \u2032. We define an interpretation I \u2032. To this end, take for each\nd \u2208 \u2206I \\\u2206J the dp \u2208 \u2206\u2032 such that d \u223c dp. Now define I \u2032 as follows\n\u2206I \u2032 := \u2206I AI \u2032 := AJ \u2032 \u222a {d \u2208 \u2206I \\\u2206J | dp \u2208 AJ \u2032}\nrI \u2032 := rJ \u2032 \u222a {(d1, d2) \u2208 (\u2206I \\\u2206J )\u00d7\u2206I | (dp1, d2) \u2208 rJ \u2032} aI \u2032 := aI .\nAgain, it is a matter of routine to show:\nClaim: For all concepts C \u2208 cl(C0, T ) and all d \u2208 \u2206I , we have d \u2208 CI \u2032 \u2229\u2206J iff d \u2208 CJ \u2032 and d \u2208 CI\u2032 \u2229 (\u2206I \\\u2206J ) iff dp \u2208 CJ \u2032 for the element dp \u2208 [d] from \u2206\u2032.\nIt follows that I \u2032 is a model for T . Observe that AI AI\u2032 iff AJ AJ \u2032 for each concept name A and \u2208 {\u2287,\u2286}. Therefore \u2013 and since CP is a concept circumscription pattern \u2013 I \u2032 <CP I follows from J \u2032 <CP J . We have derived a contradiction and conclude that J is a model of CircCP(T ,A). Thus we are done since the size of J is clearly bounded by 22n \u00d7 (m+ 1)\u00d7 n. o\nIt is interesting to note that the proof of Lemma 9 does not go through if role names are minimized or fixed. This problem cannot be overcome, as proved by the undecidability results presented in Sections 5 and 6.\nUsing the bounded model property just established, we can now prove decidability of reasoning with concept-circumscribed KBs formulated in ALCIO and ALCQO. More precisely, Lemma 9 suggests a non-deterministic decision procedure for satisfiability w.r.t. concept circumscription patterns: simply guess an interpretation of bounded size and then check whether it is a model. It turns out that this procedure shows containment of satisfiability in the complexity class NExpNP, which contains those problems that can be solved by a non-deterministic exponentially time-bounded Turing machine that has access to an NP oracle. It is known that NExp \u2286 NExpNP \u2286 ExpSpace.\nTheorem 10 In ALCIO and ALCQO, it is in NExpNP to decide whether a concept is satisfiable w.r.t. a concept-circumscribed KB CircCP(T ,A).\nProof. It is not hard to see that there exists an NP algorithm that takes as input a cKB CircCP(T ,A) and a finite interpretation I, and checks whether I is not a model of CircCP(T ,A): the algorithm first verifies in polynomial time whether I is a model of T and A, answering \u201cyes\u201d if this is not the case. Otherwise, the algorithm guesses an interpretation J that has the same domain as I and interprets all individual names in the same way, and then checks whether (i) J is a model of T and A, and (ii) J <CP I. It answers \u201cyes\u201d if both checks succeed, and \u201cno\u201d otherwise. Clearly, checking whether J <CP I can be done in time polynomial w.r.t. the size of J and I.\nThis NP algorithm may now be used as an oracle in a NExp-algorithm for deciding satisfiability of a concept C0 w.r.t. a cKB CircCP(T ,A): by Lemma 9, it suffices to guess an interpretation of size 24k with k = |C0| + |T | + |A|,3 and then use the NP algorithm to check whether I is a model of CircCP(T ,A). This proves that concept satisfiability is in NExpNP. o\n3. The bound 24k clearly dominates the two bounds given in Parts (i) and (ii) of Lemma 9.\nBy the reductions given in Section 2, Theorem 10 yields co-NExpNP upper bounds for subsumption and the instance problem. We will show in Section 4.2 that these upper bounds are tight."}, {"heading": "4.1.2 Bounded Number of Minimized and Fixed Predicates", "text": "Since NExpNP is a rather large complexity class, it is a natural question whether we can impose restrictions on concept circumscription such that reasoning becomes simpler. In the following, we identify such a case by considering concept-circumscribed KBs in which the number of minimized and fixed concept names is bounded by some constant. In this case, the complexity of satisfiability w.r.t. concept-circumscribed KBs drops to NPNExp. For readers uninitiated to oracle complexity classes, we recall that NExp \u2286 NPNExp \u2286 NExpNP, and that NPNExp is believed to be much less powerful than NExpNP, see for example the work by Eiter et al. (2004).\nTo prove the NPNExp upper bound, we first introduce counting formulas as a common generalization of TBoxes and ABoxes.\nDefinition 11 (Counting Formula) A counting formula \u03c6 is a Boolean combination of concept implications, ABox assertions C(a), and cardinality assertions (C = n) where C is a concept and n a non-negative integer. We use \u2227, \u2228, \u00ac and \u2192 to denote the Boolean operators of counting formulas. An interpretation I satisfies a cardinality assertion (C = n) if #CI = n. The satisfaction relation I |= \u03c6 between models I and counting formulas \u03c6 is defined in the obvious way. 4\nIn the following, we assume that the integers occurring in cardinality assertions are coded in binary. The NPNExp algorithm to be devised will use an algorithm for satisfiability of (non-circumscribed) counting formulas as an oracle. Therefore, we should first determine the computational complexity of the latter. It follows from results by Tobies (2000) that, in ALC, satisfiability of counting formulas is NExp-hard. A matching upper bound for the DLs ALCIO and ALCQO is obtained from the facts that (i) there is a polynomial translation of counting formulas formulated in these languages into C2, the two-variable fragment of first-order logic extended with counting quantifiers (Gra\u0308del, Otto, & Rosen, 1997; Pacholski, Szwast, & Tendera, 2000), and (ii) satisfiability in C2 is in NExp even if the numbers in counting quantifiers are coded in binary (Pratt-Hartmann, 2005).\nTheorem 12 (Tobies, Pratt) In ALC, ALCIO and ALCQO, satisfiability of counting formulas is NExp-complete even if numbers in number restrictions are coded in binary.\nWe now establish the improved upper bound.\nTheorem 13 Let c be a constant. In ALCIO and ALCQO, it is in NPNExp to decide satisfiability w.r.t. concept-circumscribed KBs CircCP(T ,A), where CP = (\u227a,M, F, V ) is such that #M \u2264 c and #F \u2264 c.\nProof. Assume that we want to decide satisfiability of the concept C0 w.r.t. the cKB CircCP(T ,A), where CP = (\u227a,M, F, V ) with #M \u2264 c and #F \u2264 c. By Lemma 4, we may assume that F = \u2205 (we may have to increase the constant c appropriately). We may assume without loss of generality that the cardinality of M is exactly c. Thus, let M = {A0, . . . , Ac}. By Lemma 9, C0 is satisfiable w.r.t. CircCP(T ,A) iff there exists a model of C0 and CircCP(T ,A) of size 24k, with k = |C0| + |T | + |A|. Consider, for all S \u2286M , the concept\nCS := u A\u2208S A u u A\u2208{A1,...,Ac}\\S \u00acA.\nAs c is constant, the number 2c of such concepts is constant as well. Clearly, the sets CIS , S \u2286 M , form a partition of the domain \u2206I of any model I. Introduce, for each concept name B and role name r in T \u222a A, a fresh concept name B\u2032 and a fresh role name r\u2032, respectively. For a concept C, denote by C \u2032 the result of replacing in C each concept name B and role name r with B\u2032 and r\u2032, respectively. The primed versions A\u2032 and T \u2032 of A and T are defined analogously. Denote by N the set of individual names in T \u222a A \u222a {C0}.\nThe NExp-oracle we are going to use in our algorithm checks whether a counting formula \u03c6 is satisfiable or not. Now, the NPNExp-algorithm is as follows (we use C @ D as an abbreviation for the counting formula (C v D) \u2227 \u00ac(D v C)):\n1. Guess\n\u2022 a sequence (nS | S \u2286M) of numbers nS \u2264 24k coded in binary; \u2022 for each individual name a \u2208 N , exactly one set Sa \u2286M ; \u2022 a subset E of N \u00d7N .\n2. By calling the oracle, check whether the counting formula \u03c61 is satisfiable, where \u03c61 is the conjunction over\n\u2022 T \u222a A \u222a {\u00ac(C0 = 0)}; \u2022 (CS = nS), for all S \u2286M ; \u2022 CSa(a), for each a \u2208 N ; \u2022 {({a} v {b}) | (a, b) \u2208 E} \u222a {\u00ac({a} v {b}) | (a, b) \u2208 N \u2212 E}.\n3. By calling the oracle, check whether the counting formula \u03c62 is satisfiable, where \u03c62 is the conjunction over\n\u2022 T \u2032 \u222a A\u2032; \u2022 (CS = nS), for all S \u2286M (note that we use the unprimed versions); \u2022 CSa(a), for each individual name a \u2208 N (we use the unprimed versions); \u2022 {({a} v {b}) | (a, b) \u2208 E} \u222a {\u00ac({a} v {b}) | (a, b) \u2208 N \u2212 E}; \u2022 for all A \u2208M ,\n\u00ac(A\u2032 v A)\u2192 \u2228\nB\u2208M,B\u227aA (B\u2032 @ B);\n\u2022 and, finally, \u2228 A\u2208M ( (A\u2032 @ A) \u2227 \u2227 B\u2208M,B\u227aA (B .= B\u2032) ) .\n4. The algorithm states that C0 is satisfiable in a model of CircCP(T ,A) if, and only if, \u03c61 is satisfiable and \u03c62 is not satisfiable.\nUsing the fact that c is fixed, is is not hard to verify that this is a NPNExp-algorithm. It remains to show correctness and completeness.\nSuppose that there exists a model of CircCP(T ,A) satisfying C0. Then there is such a model I of size bounded by 24k. Let the algorithm guess\n\u2022 the numbers nS = #CIS , S \u2286M ,\n\u2022 the sets Sa such that aI \u2208 CISa ,\n\u2022 the set E = {(a, b), (b, a) | aI = bI , a, b \u2208 N}.\nClearly, \u03c61 is satisfied in I. It remains to show that \u03c62 is unsatisfiable. But suppose there exists a model J satisfying \u03c62. By the definitions of \u03c61 and \u03c62, we may assume that\n\u2022 \u2206I = \u2206J ;\n\u2022 AI = AJ for all A \u2208M ;\n\u2022 aI = aJ for all individual names a.\nMoreover, as no unprimed role names occur in \u03c62 and the only unprimed concept names in \u03c62 are those in M , we may assume that the interpretation of all unprimed concept and role names in I and J coincide. Thus, J is a model of CircCP(T ,A) satisfying C0. But now define a model J \u2032 with domain \u2206J by setting\n\u2022 aJ \u2032 = aJ , for all individual names a;\n\u2022 rJ \u2032 = (r\u2032)J , for all role names r;\n\u2022 AJ \u2032 = (A\u2032)J , for all concept names A.\nThen, by the conjunct under Item 1 of the definition of \u03c62, J \u2032 is a model for A \u222a T . By Items 5 and 6 of the definition of \u03c62, J \u2032 <CP J , and we have derived a contradiction.\nConversely, suppose the algorithm says that there exists a model of CircCP(T ,A) satisfying C0. Then take a model I for \u03c61. By the conjunct under Item 1 of \u03c61, I is a model for T \u222a A satisfying C0. It follows from the unsatisfiability of \u03c62 that I is a model for CircCP(T ,A). o\nAs a corollary, we obtain co-NPNExp upper bounds for subsumption and the instance problem. A similar drop of complexity occurs in propositional logic, where satisfiability w.r.t. circumscribed theories is complete for NPNP and it is not difficult to see that bounding the minimized and fixed predicates allows us to find a PNP algorithm."}, {"heading": "4.2 Lower Bounds", "text": "We prove lower complexity bounds for reasoning with concept-circumscribed KBs that match the upper bounds given in Section 4.1."}, {"heading": "4.2.1 The General Case", "text": "As in Section 4.1, we start with the general case in which the number of fixed and minimized predicates is not bounded. Our aim is to establish two NExpNP-lower bounds that both match the upper bound established in Theorem 10. The first bound is for satisfiability w.r.t. concept-circumscribed KBs that are formulated inALC and have an empty TBox, but a nonempty ABox. The second bound is also for satisfiability w.r.t. concept-circumscribed KBs formulated in ALC, but assumes an acyclic TBox and empty ABox. Both reductions work already in the case of an empty preference relation, and without any fixed predicates. Note that considering satisfiability of a concept C w.r.t. a concept-circumscribed KB CircCP(T ,A) with both T and A empty is not very interesting: it can be seen that C is satisfiable w.r.t. CircCP(T ,A) iff C\u22a5 is satisfiable (without reference to any KB), where C\u22a5 is the concept obtained from C by replacing all minimized concept names with \u22a5.\nThe proof of our first result is by reduction of a succinct version of the problem coCERT3COL, which is NExpNP-complete (Eiter, Gottlob, & Mannila, 1997), to satisfiability w.r.t. concept-circumscribed KBs with empty TBox. Let us first introduce the regular (nonsuccinct) version of co-CERT3COL:\nInstance of size n: an undirected graph G on the vertices {0, 1, . . . , n\u2212 1} such that every edge is labelled with a disjunction of two literals over the Boolean variables {Vi,j | i, j < n}. Yes-Instance of size n: an instance G of size n such that, for some truth value assignment t to the Boolean variables, the graph t(G) obtained from G by including only those edges whose label evaluates to true under t is not 3-colorable.\nAs shown by Stewart (1991), co-CERT3COL is complete for NPNP. To obtain a problem complete for NExpNP, Eiter et al. use the complexity upgrade technique: by encoding the input in a succinct form using Boolean circuits, the complexity is raised by one exponential to NExpNP (Eiter et al., 1997). More precisely, the succinct version co-CERT3COLS of co-CERT3COL is obtained by representing the input graph G with nodes {0, . . . , 2n \u2212 1} as 4n+ 3 Boolean circuits with 2n inputs (and one output) each. The Boolean circuits are named cE , c (1) S , c (2) S , and c (i) j , with i \u2208 {1, 2, 3, 4} and j < n. For all circuits, the 2n inputs are the bits of the binary representation of two nodes of the graph. The purpose of the circuits is as follows:\n\u2022 circuit cE outputs 1 if there is an edge between the two input nodes, and 0 otherwise;\n\u2022 if there is an edge between the input nodes, circuit c(1)S outputs 1 if the first literal in the disjunction labelling this edge is positive, and 0 otherwise; circuit c(2)S does the\nsame for the second literal; if there is no edge between the input nodes, the output is arbitrary;\n\u2022 if there is an edge between the input nodes, the circuits c(i)j compute the labelling Vk1,k2\u2228Vk3,k4 of this edge between the input nodes by generating the numbers k1, . . . , k4: circuit c(i)j outputs the j-th bit of ki; if there is no edge between the input nodes, the output is arbitrary.\nWe reduce co-CERT3COLS to satisfiability w.r.t. concept-circumscribed KBs that are formulated in ALC and whose TBox and preference relation are empty. It then remains to apply Lemma 5 to eliminate fixed concept names (we note that the construction in the proof of the lemma leaves the preference relation untouched). Let\nG = (n, cE , c (1) S , c (2) S , {c (i) j }i\u2208{1,..,4},j<n)\nbe the (succinct representation of the) input graph with 2n nodes. We construct an ABox AG = {C0 u Root(a0)}, a circumscription pattern CPG, and a concept CG such that G is a yes-instance of co-CERT3COLS iff CG is satisfiable w.r.t. CircCPG(\u2205,AG).\nThe concept C0 used in AG is a conjunction whose presentation is split into two parts. Intuitively, the purpose of the first group of conjuncts is to fix a truth assignment t for the variables {Vi,j | i, j < n}, and to construct (an isomorphic image of) the graph t(G) obtained from G by including only those edges whose label evaluates to true under t. Then, the purpose of the second group is to make sure that t(G) is not 3-colorable.\nWhen formulating C0, we use several binary counters for counting modulo 2n (the number of nodes in the input graph). The main counters X and Y use concept names X0, . . . , Xn\u22121 and Y0, . . . , Yn\u22121 as their bits, respectively. Additionally, we introduce concept names K(i)0 , . . . ,K (i) n\u22121, i \u2208 {1, 2, 3, 4}, that serve as four additional counters K(1), . . . ,K(4). The first group of conjuncts of C0 can be found in Figure 2, where the following abbreviations are used:\n\u2022 \u2200ri.C denotes the n-fold nesting \u2200r. \u00b7 \u00b7 \u00b7 .\u2200r.C;\n\u2022 \u2200r.(K(i) = X) is an abbreviation foru j<n ( (Xj \u2192 \u2200r.K(i)j ) u (\u00acXj \u2192 \u2200r.\u00acK (i) j ) ) and\nsimilarly for \u2200r.(K(i) = Y );\n\u2022 the abbreviations Wc, c a Boolean circuit, are explained later on.\nThe intuition behind Figure 2 is as follows. Lines (1) to (5) build up a binary tree of depth 2n whose edges are labeled with the role name r. The 22n leaves of the tree are instances of the concept name Leaf, and they are labeled with all possible values of the counters X and Y . Since we will minimize Leaf via the circumscription pattern CPG, this concept name denotes precisely the leaves of the tree. Due to the use of the counters X and Y , the leaves are all distinct.\nThe leaves of the tree just established satisfy a number of purposes. To start with, each leaf with counter values X = i and Y = j corresponds to the variable Vi,j of co3CERTCOLS and determines a truth value for this variable via truth/falsity of the concept\nname Tr. Thus, the leaves jointly describe a truth assignment t for the instance G of co3CERTCOLS . A second purpose of the leaves is to represent the potential edges of G: additionally to representing a variable, a leaf with X = i and Y = j corresponds to the potential edge between the nodes i and j. To explain this more properly, we must first discuss the abbreviations Wc used in Lines (6) and (7) of Figure 2.\nEach concept Wc, c a Boolean circuit with 2n inputs, is the result of converting c into a concept that uses only the constructors \u00ac, u, t such that the following condition is satisfied: if a d \u2208 \u2206I is an instance of Wc, the output of c upon input b0, . . . , b2n\u22121 is b, and the truth value of the concept names X0, . . . , Xn\u22121, Y0, . . . , Yn\u22121 at d is described by b0, . . . , b2n\u22121, then the truth value of some concept name Out at d is described by b. By introducing one auxiliary concept name for every inner gate of c, the translation can be done such that the size of Wc is linear in the size of c. The following concept names are used as output:\n\u2022 WcE uses the concept name E as output;\n\u2022 W c (i) S uses the concept name Si as output, for i \u2208 {1, 2};\n\u2022 W c (i) j uses the concept name K(i)j as output, for i \u2208 {1, . . . , 4} and j < n.\nLines (6) and (7) ensure that these concepts are propagated to all leaves. Our next aim is to ensure that each leaf that represents a potential edge (i, j) is connected via the role var1 to the leaf that represents the variable in the first disjunct of the label of (i, j), and analogously for the role var2 and the variable in the second disjunct of the edge label. If we replaced the concept name LeafFix with Leaf in Lines (8) and (9), then these lines would apparently encode these properties. However, we have to be careful as the mentioned replacement would interact with the minimization of Leaf. To fix this problem, we resort to a trick: we use the concept name LeafFix instead of Leaf. In this way, we may or may not reach an instance of Leaf. If we do not, we force the concept name P to be true at the root of the tree in Lines (10) and (11). We will use CG to rule out models in which P is true. Finally, we fix LeafFix via CPG to eliminate interaction with the minimization of Leaf.\nThe remaining Lines (12) to (16) ensure that a leaf is an instance of Elim iff the potential edge that it represents is not present in the graph t(G) induced by the truth assignment t described by the leaves.\nThe second group of conjuncts of C0 can be found in Figure 3. Here, (Y = 0) stands for the concept (\u00acY0 u \u00b7 \u00b7 \u00b7 u \u00acYn\u22121). As already mentioned, the purpose of these conjuncts is to ensure that the graph t(G) described by the leaves does not have a 3-coloring. The strategy for ensuring this is as follows: we use the 2n leaves with Y = 0 to store the colors of the nodes, i.e., the leaf with X = i and Y = 0 stores the color of node i. By Lines (22) and (23), there is a unique coloring. Then, Lines (17) to (21) ensure that each leaf (viewed as an edge) is connected via the role col1 to the leaf that stores the color of the first node of the edge, and analogously for the role col2 and the second node of the edge. LeafFix and P have the same role as before. Lines (24) to (26) guarantee that the concept name Clash identifies problems in the coloring: a leaf is in Clash if it represents an edge that exists in G, is not dropped in t(G), and where both endpoints have the same color. The idea is that Clash will be minimized while R, G, and B vary. When some additional concept names are fixed, this corresponds to a universal quantification over all possible colorings.\nSet CG = Root u \u00acP u \u2203r2n.Clash, and recall that AG = {C0 u Root(a0)}. The following lemma is proved in the appendix.\nLemma 14 G is a yes-instance of co-3CERTCOLS iff CG is satisfiable with respect to CircCPG(\u2205,AG), where CPG = (\u227a,M, F, V ) with \u227a = \u2205, M = {Root, Leaf,Clash},\nF = {LeafFix,Tr, X0, . . . , Xn\u22121, Y0, . . . , Yn\u22121, },\nand V the set of all remaining predicates in AG.\nSince the size of AG is polynomial in n, we get the following result by applying Lemma 5.\nTheorem 15 In ALC, satisfiability w.r.t. concept-circumscribed KBs is NExpNP-hard even if the TBox and the preference relation are empty and there are no fixed predicates.\nIt is now rather straightforward to establish the announced second NExpNP lower bound by a reduction of satisfiability w.r.t. concept-circumscribed KBs in the special case formulated in Theorem 15. Details are given in the appendix.\nCorollary 16 In ALC, satisfiability w.r.t. concept-circumscribed KBs is NExpNP-hard even if the TBox is acyclic, the ABox and preference relations are empty, and there are no fixed predicates.\nCorresponding lower bounds for subsumption and the instance problems follow from the reduction given in Section 2."}, {"heading": "4.2.2 Bounded Number of Minimized and Fixed Predicates", "text": "We now establish a matching lower bound for Theorem 13 by showing that, in ALC, satisfiability w.r.t. concept-circumscribed KBs is NPNExp-hard even if only a constant number of predicates is allowed to be minimized and fixed. In contrast to the previous section, we ignore the case of empty TBoxes and directly establish the lower bound for the case of non-empty TBoxes and empty ABoxes. This allows us to demonstrate the usefulness of Lemma 8 for separating different parts of a lower bound proof: in the main reduction from the previous section, the two parts of the reduction shown in Figure 2 and 3 are not truly independent, which forced us to implement the technical trick that involves the concept names LeafFix and P . When using Lemma 8, in contrast, we achieve a true separation of concerns. In general, though, we conjecture that the lower bound proved in this section can also be established for the case of empty TBoxes by adapting the mentioned technical trick. We leave this as a problem to the interested reader.\nRecall that a (non-deterministic) k-tape Turing machine is described by a tuple\n(Q,\u03a3, q0,\u2206, qacc, qrej),\nwith Q a finite set of states, \u03a3 a finite alphabet, q0 \u2208 Q a starting state,\n\u2206 \u2286 Q\u00d7 \u03a3k \u00d7Q\u00d7 \u03a3k \u00d7 {L,R}k\na transition relation, and qacc, qrej \u2208 Q the accepting and rejecting states. For our purposes, an oracle Turing machine is a 2-tape Turing machine M that, additionally, is equipped with\n\u2022 a 1-tape Turing machine M\u2032 (the oracle) whose alphabet is identical to that of M,\n\u2022 a query state q?, and\n\u2022 two answer states qyes and qno.\nThe second tape ofM is called the oracle tape. WhenM enters q?, the oracle determines the next state of M: if the content of the oracle tape is contained in the language accepted by the oracle, the next state is qyes. Otherwise, it is qno. During this transition, the head is not moved and no symbols are written. The state q? cannot occur as the left-most component of a tuple in M\u2019s transition relation.\nLet M = (Q,\u03a3, q0,\u2206, qacc, qrej,M\u2032, q?, qyes, qno) be an oracle Turing machine such that the following holds:\n\u2022 M solves an NPNExp-complete problem;\n\u2022 the time consumption of M is bounded by a polynomial p (where oracle calls contribute with a single clock tick);\n\u2022 the time consumption of M\u2032 = (Q\u2032,\u03a3, q\u20320,\u2206\u2032, q\u2032acc, q\u2032rej) is bounded by 2q(n), with q a polynomial.\nWe assume without loss of generality that M and M\u2032 never attempt to move left from the left-most position of the tape (neither right from the right-most position). Our NPNExphardness proof uses a reduction of the word problem of M. Thus, let w \u2208 \u03a3\u2217 be an input for M of length n, and let m = p(n) and m\u2032 = q(p(n)). We construct three TBoxes Tw, T \u2032w, and T \u2032\u2032w , circumscription patterns CP, CP\u2032, and CP\u2032\u2032, and a concept Cw such that M accepts w iff Cw is simultaneously satisfiable w.r.t. CircCP(Tw, \u2205), CircCP\u2032(T \u2032w, \u2205), and CircCP\u2032\u2032(T \u2032\u2032w , \u2205). Then, Lemma 8 yields a reduction to (non-simultaneous) satisfiability w.r.t. concept-circumscribed cKBs. Intuitively, the purpose of the first TBox Tw is to impose a basic structure on the domain, while T \u2032w describes computations of M, and T \u2032\u2032w describes computations of M\u2032. We use general TBoxes rather than acyclic ones since, by Lemma 6, this can be done without loss of generality.\nThe TBox Tw is shown in Figure 4. As in the previous reduction, we use concept names X0, . . . , Xm\u2032\u22121 and Y0, . . . , Ym\u2032\u22121 to implement two binary counters for counting modulo 2m \u2032 . We also use the same abbreviations as in the previous reduction. Additionally, \u2200r.(X++) states that the value of the counter X0, . . . , Xm\u2032\u22121 is incremented when going to r-successors, i.e.,\nu k=0..m\u2032\u22121 ( u j=0..k\u22121 Xj ) \u2192 ( (Xk \u2192 \u2200r.\u00acXk) u (\u00acXk \u2192 \u2200r.Xk) ) u k=0..m\u2032\u22121 ( t j=0..k\u22121 \u00acXj ) \u2192 ( (Xk \u2192 \u2200r.Xk) u (\u00acXk \u2192 \u2200r.\u00acXk)\n) The purpose of Lines (27) to (30) is to ensure that, for each possible value (i, j) of the counters X and Y , there is at least one instance of NExp that satisfies (X = i) and (Y = j). We minimize NExp, and thus enforce that NExp has exactly 2m\n\u2032 \u00d7 2m\u2032 elements. These elements are interconnected via the roles r (for \u201cright\u201d) and u (for \u201cup\u201d) to form a 2m\n\u2032\u00d72m\u2032grid. Later on, we use this grid to encode computations of the oracle machineM\u2032. Observe\nthat, since we are working with simultaneous satisfiability, the minimization of NExp does not interact with anything that we are going to put into the TBoxes T \u2032w and T \u2032\u2032w .\nWe also minimize the concept name Result, and thus Lines (31) and (32) guarantee that there are exactly m instances of Result, identified by the concept names R0, . . . , Rm\u22121. If M makes a call to the oracle in the i-th step, then the result of this call will be stored in the (unique) instance of Result uRi, i.e., this instance will satisfy the concept name Rej if M\u2032 rejected the input and falsify it otherwise. Finally, we also minimize NP, and thus Line (33) guarantees that there is exactly one instance of NP. This instance will be used to represent the computation of M. Summing up, the circumscription pattern for Tw is\nCP := (\u2205, {NExp,Result,NP}, \u2205, V ),\nwith V containing all remaining predicates used in Tw. The purpose of T \u2032w is to describe computations of M. We use the following concept names:\n\u2022 For all a \u2208 \u03a3, i, j < m, and k \u2208 {1, 2}, we introduce a concept name Si,j,ka . Intuitively, Si,j,ka expresses that a is the symbol in the j-th cell of the k-th tape in the i-th step of M\u2019s computation. We start our numbering of tape cells and steps with 0.\n\u2022 For all q \u2208 Q and i < m, Qiq is a concept name expressing thatM is in state q in the i-th step of the computation.\n\u2022 For all q \u2208 Q, i, j < m, and k \u2208 {1, 2}, H i,kj is a concept name expressing that the k-th head of M is on cell j in the i-th step of the computation.\n\u2022 For all q \u2208 Q, a \u2208 \u03a3, i, j < m, k \u2208 {1, 2}, and M \u2208 {L,R}, concept names Aiq, A i,j,k a ,\nAi,kM that serve as markers. More precisely, A i q means that, at time point i, M has executed a transition that switches to state q. Similarly, Ai,j,ka describes the symbol written in that transition on tape k, and Ai,kM describes the move on tape k.\nThe details of T \u2032w are given in Figure 5. One copy of the concept inclusions in this figure are needed for every i, j, j\u2032 < m and every k \u2208 {1, 2}. We assume that w = a0 \u00b7 \u00b7 \u00b7 an\u22121 and\nuse B to denote the (shared) blank symbol of M and M\u2032. Lines (34) to (43) describe the behaviour of a Turing machine in the usual way: transitions follow the transition table, the computation starts in the initial configuration, etc. Line (45) ensures that the instance of NP can reach the (unique) instance of ResultuRi via the role resi, for all i < m. Lines (46) and (47) deal with transitions ofM in the query state by looking up the result of the oracle call in the corresponding instance of Result. Finally, Lines (48) and (49) ensure that the head position and tape symbols do not change when querying the oracle. The circumscription pattern for T \u2032w is simply CP\u2032 := (\u2205, \u2205, \u2205, V ), with V the set of all predicates used in T \u2032w.\nThe purpose of T \u2032\u2032w is to describe computations of the oracle Turing machine M\u2032. Note that we have to describe more than a single computation of M\u2032 (but at most polynomially many) since M may visit the state q? more than once. All these computations are represented in the NExp grid, where different computations are untangled by the use of different concept names for each computation. We use the counter X0, . . . , Xm\u2032\u22121 to count\nconfigurations and the counter Y0, . . . , Ym\u2032\u22121 to count the tape cells of each configuration. Moreover, we use the following concept names:\n\u2022 For all a \u2208 \u03a3 and i < m, a concept name Sia. If Sia is satisfied by some instance of NExp where X0, . . . , Xm\u2032\u22121 has value j and Y0, . . . , Ym\u2032\u22121 has value k, then the i-th computation of M\u2032 has, in its j-th step, symbol a on the k-th cell.\n\u2022 For all q \u2208 Q and i < m, a concept name Qiq. The purpose of this concept name is two-fold: first, it represents the current state of M\u2032 in the i-th computation. And second, it indicates the head position in the i-th computation.\n\u2022 For all a \u2208 \u03a3, q \u2208 Q, M \u2208 {L,R} and all i < m, a concept name Aiq,a,M as a marker. The meaning of the marker Aiq,a,M is that, to reach the current configuration,M\u2032 has switched to q, written a, and moved its head in direction M . Additionally, the marker indicates the head position in the previous configuration.\n\u2022 An additional concept name NH (for \u201cnohead\u201d) that helps us to enforce that M\u2032 has only a single head position.\nThe details of T \u2032\u2032w are shown in Figure 6, where we require one copy of each line for every i < m. The purpose of Lines (50) and (51) is to regenerate the grid structure of NExp using the roles r\u2032 und u\u2032. This is necessary since the roles r and u are used in Tw, and, to use Lemma 8, the TBoxes cannot share any role names. Lines (52) and (53) ensure that every instance of NExp reaches (only) the unique instance of NP via the role toNP, and (only) the unique instance of ResultuRi via the role res\u2032i, for all i < m. Lines (54) to (64) describe the computation of M\u2032 in a straightforward way. More precisely, Lines (54) to (56) set up the initial configuration by reading the contents of M\u2019s oracle tape from the instance of NP. Lines (57) to (61) implement transitions, and Lines (62) to (64) enforce a unique label of the tape, a unique state, and a unique head position. Finally, Line (65) ensures that, if the i-th computation of M\u2032 is rejecting, then Rej is true in the instance of Result uRi.\nNote thatM\u2032 is a non-deterministic machine and may have more than one computation. For storing Rej in Result u Ri, we need to know that all these computations are rejecting. To deal with this issue, Rej is minimized with all other predicates varying: if there exists an accepting computation ofM\u2032 on the i-th input, then we can represent this computation in NExp and make Rej false in the instance of Result u Ri. Hence, Rej holds at Result u Ri iff there exists no accepting computation. Note that we cannot fix the concept names X0, . . . , Xm\u2032\u22121, Y0, . . . , Ym\u2032\u22121 while minimizing Rej since we would get an unbounded number of fixed concept names. This means that the elements of NExp can change their position during minimization, and with them the roles r\u2032 and u\u2032. This is not harmful since Tw and Lines (50) and (51) ensure that that the structure (NExpI , (r\u2032)I , (u\u2032)I) is always isomorphic to a grid, and the rest of T \u2032\u2032w ensures that the elements of NExp always encode computations of M\u2032. We thus use the circumscription pattern CP\u2032\u2032 := (\u2205, {Rej}, \u2205, V \u2032), where V \u2032 contains all predicates used in T \u2032\u2032w except Rej.\nThe proof of the following lemma is left to the reader. In it\u2019s formulation, the union over all Qiqacc imposes that at least one state in the computation is accepting.\nLemma 17 M accepts w iff Cw := NP u t i<m Qiqacc is simultaneously satisfiable w.r.t. CircCP(Tw, \u2205), CircCP\u2032(T \u2032w, \u2205), and CircCP\u2032\u2032(T \u2032\u2032w , \u2205).\nIt remains to apply Lemmas 6, 4, and 8 to obtain the following result.\nTheorem 18 In ALC, satisfiability w.r.t. concept-circumscribed cKBs is NPNExp-hard even if the TBox is acyclic, the ABox and preference relations are empty, there are no fixed predicates, and the number of minimized predicates is bounded by a constant.\nAs already mentioned, we conjecture that the same result can be proved with empty TBoxes (but non-empty ABoxes). Corresponding lower bounds for subsumption and the instance problems follow from the reduction given in Section 2."}, {"heading": "5. Circumscription with Fixed Roles", "text": "In the preceeding sections, we have analyzed the computational complexity of reasoning w.r.t. concept-circumscribed KBs and, in particular, established decidability. In the current section, we extend concept-circumscribed KBs to what we call role-fixing cKBs, which differ from the former by allowing role names to be fixed (but not minimized). Interestingly, the result of this seemingly harmless modification is that reasoning becomes highly undecidable. We start with defining the cKBs studied in this section.\nDefinition 19 A cKB CircCP(T ,A) with CP = (\u227a,M, F, V ) is called role-fixing if M contains no role names. 4\nTo pinpoint the exact complexity of reasoning in role-fixing cKBs, we present a reduction of the logical consequence problem in monadic second-order logic with binary relation symbols (over unrestricted structures, not over trees) to the instance problem w.r.t. role-fixing cKBs formulated in ALC. It follows that the latter problem is harder than any problem definable in second-order arithmetic and thus outside the analytical hierarchy. Analogous results for satisfiability and subsumption follow by the reductions given in Section 2. Our reduction applies already to the case where TBox and preference relation are empty.\nFor a finite set R of binary relation symbols, denote by MSO(R) the set of formulas constructed from a countably infinite set P1, P2, . . . of variables for sets, a countable infinite set x1, x2, . . . of individual variables, and the binary relation symbols in R, using Boolean connectives, first-order quantification, and monadic second-order quantification. It is not hard to see that reasoning with role-fixing cKBs corresponds to reasoning in a \u201ctiny\u201d fragment of MSO(R). More specifically, consider the standard translation of ALC-concepts C to FO-formulas (and thus MSO(R)-formulas) C](x) with one free individual variable x as e.g. given by Borgida (1996) and take a cKB CircCP(T ,A) with CP = (\u227a,M, F, V ), \u227a = V = \u2205, M = {A}, and F = {r}. Translate (T ,A) to the MSO(R)-sentence\n\u03d5 = \u2227\nCvD\u2208T \u2200x(C](x)\u2192 D](x)) \u2227 \u2227 C(a)\u2208A C](xa) \u2227 \u2227 r(a,b)\u2208A r(xa, xb),\nwhere the xa are individual variables. Then an ALC-concept C is satisfiable w.r.t. CircCP(T ,A) if, and only if, the MSO(R)formula \u03d5 \u2227 \u2203xC](x) \u2227 \u2200P (P \u2282 A] \u2192 \u00ac\u03d5[P/A]])\nis satisfiable, where P \u2282 A] stands for \u2200x (P (x)\u2192 A](x))\u2227\u2203x (A](x)\u2227\u00acP (x)) and \u03d5[P/A]] denotes \u03d5 with A] replaced by P . This translation is easily extended to the case where an arbitrary number of concept names is minimized and an arbitrary number of concept and role names is fixed and varies.\nWhen we prove that logical consequence in MSO(R) is reducible to the instance problem w.r.t. role-fixing cKBs, we thus establish the surprising result that reasoning in such sKBs does not only correspond to the above tiny fragment of MSO(R), but is as hard as all of MSO(R). Our reduction is indirect: instead of directly reducing logical consequence in MSO(R), we reduce the semantic consequence problem of modal logic and exploit Thomason\u2019s result that logical consequence in MSO(R) can be reduced to the latter problem, see\nthe works by Thomason (1975b, 1975a) and the survey articles by Wolter et al. (2007) and Goldblatt (2003) for details.\nWe first define the semantic consequence problem of modal logic (in the framework of description logic) and present Thomason\u2019s result, starting with some notation.\nLet R be a finite set of role names. An R-frame is a structure F = (\u2206F, RF), where \u2206F is a non-empty domain and rF \u2286 \u2206F \u00d7\u2206F for all r \u2208 R. An interpretation I = (\u2206I , \u00b7I) is based on an R-frame F iff \u2206F = \u2206I and rI = rF for all r \u2208 R. We say that a concept C is valid in F and write F |= C if CI = \u2206I for every interpretation I based on F. The semantic consequence of modal logic is now defined as follows. Let C and D be ALC concepts with roles from R. Then D is a semantic consequence of C, in symbols C D, if for every R-frame F, from F |= C it follows that F |= D. Note that since validity in an R-frame F involves quantification over all possible interpretations of the symbols not contained in R, the relation C D is invariant over all uniform renamings of atomic concepts in D (this will be used later on).\nFor simplicity, we consider only MSO(r), monadic second-order logic with one binary relation symbol r. It is straighforward to extend our result to arbitrary finite sets R of relation symbols. Given a set of role names R, an ALC-concept is called an ALCR-concept if it uses no other role names other than those in R. The following theorem follows from the results by Thomason (1975b, 1975a).\nTheorem 20 There exist an effective translation \u03c3 : \u03c8 7\u2192 \u03c3(\u03c8) of MSO(r) sentences to ALC{r}-concepts and an ALC{r}-concept C0 such that for all MSO(r) sentences \u03d5 and \u03c8, the following conditions are equivalent:\n\u2022 \u03c8 is a logical consequence of \u03d5 in MSO(r);\n\u2022 C0 u \u03c3(\u03d5) \u03c3(\u03c8).\nWe can thus establish the reduction of MSO(r) to the instance problem w.r.t. role-fixing cKBs by reducing instead the semantic consequence problem. In fact, such a reduction can be implemented in a very transparent way if we extend ALC with the universal role, whereas the reduction to ALC itself requires a number of rather technical intermediate steps. For this reason, we defer the ALC case to the appendix and give the proof with the universal role.\nLet u be a new role name, called the universal role. In every interpretation I, u has the fixed interpretation as uI = \u2206I \u00d7\u2206I . Since the interpretation of u is fixed anyway, we do not allow to use it in circumscription patterns.\nNow suppose that C and D are ALC{r}-concepts. To establish the reduction, we construct a role-fixing cKB CircCP(\u2205, {C0(a)}) and concept C1 such that C D if, and only if, a is an instance of C1 w.r.t. CircCP(\u2205, {C0(a)}). As noted above, we may assume that C,D do not share any concept names (otherwise, simply replace the concept names in D with fresh ones). Let A be a concept name that does not occur in C and D, let CP = (\u227a,M, {r}, V ), where \u227a = \u2205, M consists of A and the set of concept names in C, and V consists of the concept names in D. Set A = {(\u00ac\u2200u.C t \u2200u. u\nB\u2208M B)(a)}.\nLemma 21 The following conditions are equivalent:\n\u2022 C D;\n\u2022 a is an instance of (\u00ac\u2200u.C) tD w.r.t. CircCP(\u2205,A).\nProof. To prove that Point 1 implies Point 2, assume that Point 2 does not hold. Let I be a model of CircCP(\u2205,A) such that aI \u2208 ((\u2200u.C) u \u00acD)I . Let I be based on F. To prove that Point 1 does not hold, we show that F |= C and F 6|= D. The latter is easy as it is witnessed by the interpretation I. To show the former, let J be an interpretation based on F. We show that CJ = \u2206I . First note that, since I is a model of A and aI \u2208 (\u2200u.C)I , we have BI = \u2206I , for all B \u2208M . We now distinguish two cases:\n\u2022 BJ = \u2206I , for all B \u2208 M . In this case, all B \u2208 M have the same interpretation in I and J . Thus, since all concept names in C are in M and I and J are based on the same frame, we obtain CJ = CI = \u2206I .\n\u2022 BJ 6= \u2206I , for at least one B \u2208 M . Then J <CP I. Assume that CJ 6= \u2206I . Then aI \u2208 (\u00ac\u2200u.C)J and J is a model of A. Thus, we have derived a contradiction to the assumption that I is a model of CircCP(\u2205,A).\nTo prove that Point 2 implies Point 1, assume that Point 1 does not hold. Consider a frame F such that F |= C, but F 6|= D. Let I be an interpretation based on F such that aI \u2208 (\u00acD)I . We may also assume that BI = \u2206I for all B \u2208M (since no such B occurs in D). Then aI \u2208 ((\u2200u.C) u \u00acD)I and I is a model of A. It remains to show that there does not exist an I \u2032 <CP I such that I \u2032 is a model of A. This is straightforward: from F |= C, we obtain that there does not exist any I \u2032 such that aI\u2032 \u2208 (\u00ac\u2200u.C)I\u2032 . Moreover, there clearly does not exist an I \u2032 such that BI\u2032 ( BI for some B \u2208M and aI\u2032 \u2208 (\u2200u. u\nB\u2208M B)I \u2032 . o\nWe have thus proved that the logical consequence problem of MSO(r) is effectively reducible to the instance problem w.r.t. role-fixing cKBs formulated in ALC extended with the universal role. In our reduction, the TBox and preference relation are empty. In the appendix, we show how the reduction above can be modified so as to prove the same result for ALC without the universal role.\nTheorem 22 The logical consequence problem of MSO(r) is effectively reducible to the instance problem w.r.t. role-fixing cKBs formulated in ALC. This even holds when the TBox and preference relation are empty."}, {"heading": "6. Circumscription with Minimized Roles", "text": "Unlike fixed concept names, fixed role names cannot be simulated using minimized role names. This is due to the fact that Boolean operators on roles are not available in standard DLs. Thus, Theorem 22 does not imply undecidability of reasoning in cKBs in which role names are allowed to be minimized, but not fixed. In this section, we investigate cKBs of this type. The formal definition is as follows.\nDefinition 23 A cKB CircCP(T ,A) with CP = (\u227a,M, F, V ) is called role-minimizing if F contains no role names. 4\nWe show that role-minimizing cKBs behave rather differently from concept-circumscribed KBs and from role-fixing cKBs. First, it turns out that reasoning with role-minimizing cKBs with empty TBox is NExpNP-complete for ALCQO, but undecidable for ALCI. Thus, in contrast to the circumscribed KBs considered so far, we now observe a difference in complexity between ALCQO and ALCI, and even between ALC and ALCI. A second difference to the results obtained so far is that the NExpNP-lower bound, which applies to cKBs formulated in ALC with an empty TBox, even holds for role-minimizing cKBs in which a single role is minimized and no other predicate is fixed or minimized. This result is of interest because it shows that complexity does not drop to NPNExp if the number of minimized predicates is constant. Finally, we show that, with non-empty TBoxes, reasoning with role-minimizing cKBs becomes undecidable already for ALC.\n6.1 Role-minimizing cKBs With Empty TBox in ALCQO\nWe first prove the NExpNP-completeness result discussed above for DLs without inverse roles. We start with the upper bound. To prove it, we first establish a bounded model property using a \u2018selective filtration\u2019-style argument, see e.g. Blackburn et al. (2001). The difference to the bounded model property proof given above for concept-circumscribed KBs is that, here, we do not build a quotient model of a given model by identifying nodes using an equivalence relation, but construct a submodel of a given model by selecting relevant nodes. In contrast to forming quotient models, this technique works only with empty TBoxes since a TBox can force us to select infinitely many nodes. Similarly, the selection technique does not work for DLs with the inverse role because, as we shall see below, inverse roles can be used to simulate TBoxes.\nRecall that the role depth rd(C) of a concept C is defined as the nesting depth of the constructors (> k r D) and (6 k r D) in C.\nTheorem 24 In ALCQO, satisfiability w.r.t. role-minimizing cKBs with empty TBox is in NExpNP.\nProof. Let CircCP(\u2205,A) be a role-minimizing cKB with CP = (\u227a,M, F, V ), and let C0 be a concept that is satisfiable w.r.t. CircCP(\u2205,A). Let m0 be the maximal parameter occurring in number restrictions of A or C0. Set\nn := max({rd(C0)} \u222a {rd(C) | C(a) \u2208 A}) and m := ((m0 + 1)\u00d7 (|A|+ |C0|))n+1,\nWe show that there exists a model J of CircCP(\u2205,A) satisfying C0 such that #\u2206J \u2264 m. Let I be a model of CircCP(\u2205,A) such that there exists a d0 \u2208 CI0 . For each d \u2208 \u2206I , fix a minimal set D(d) \u2286 \u2206I such that,\n\u2022 for every concept (> k r C) which occurs in A or C0 with d \u2208 (> k r C)I there exist at least k distinct e \u2208 D(d) such that (d, e) \u2208 rI and e \u2208 CI and\n\u2022 for every concept (6 k r C) which occurs in A or C0 with d 6\u2208 (6 k r C)I there exist at least k + 1 distinct e \u2208 D(d) such that (d, e) \u2208 rI and e \u2208 CI .\nClearly, #D(d) \u2264 (m0 + 1)\u00d7 (|C0|+ |A|) for each d \u2208 \u2206I . Next, define a set D0 \u2286 \u2206I by setting\nD0 := {d0} \u222a {aI | a \u2208 NI occurs in A or C0}.\nDefine sets Di \u2286 \u2206I , 1 \u2264 i \u2264 n, inductively by\nDi+1 := ( \u22c3\nd\u2208Di\nD(d))\nand set \u2206n := \u22c3 0\u2264i\u2264nDi. Define an interpretation I \u2032 with domain \u2206I as follows:\n\u2022 aI\u2032 = aI , for all individual names a;\n\u2022 for r \u2208M \u222a V , (d, e) \u2208 rI\u2032 if d \u2208 \u2206n \\Dn, e \u2208 D(d), and (d, e) \u2208 rI ;\n\u2022 for A \u2208M \u222a V , AI\u2032 = AI \u2229\u2206n;\n\u2022 for A \u2208 F , AI\u2032 = AI .\nA straightforward inductive argument shows that I \u2032 is a model of A such that d0 \u2208 CI \u2032\n0 . Note that we did not change the interpretation of the A \u2208 F . Moreover, we have pI\u2032 \u2286 pI for every p \u2208M . Together with the fact that I \u2032 is a model of A and I \u2032 6<CP I, we even get pI \u2032\n= pI for every p \u2208 M . It follows that I \u2032 is a model for CircCP(\u2205,A) because J <CP I \u2032 would imply J <CP I.\nNote that rI \u2032 \u2286 \u2206n\u00d7\u2206n, for every role r. Now define an interpretation J with domain\n\u2206J = \u2206n by putting\n\u2022 AJ = AI\u2032 \u2229\u2206n, for every concept name A;\n\u2022 rJ = rI\u2032 , for every role name r;\n\u2022 aJ = aI , for every individual name a from A or C0.\nWe still have that J is a model for A satisfying C0. Moreover, any interpretation J \u2032 <CP J satisfying A can be easily extended to an interpretation I \u2032\u2032 <CP I \u2032 satisfying A. Hence, no such interpretation exists and J is a model for CircCP(\u2205,A). From #\u2206n \u2264 m we derive #\u2206J \u2264 m.\nThe proof of the NExpNP-upper bound is now exactly the same as the proof of Theorem 10; it suffices to replace the bound 24k for the size of interpretations by the bound m. o\nWe now give a lower bound matching the upper bound of Theorem 24.\nTheorem 25 In ALC, satisfiability w.r.t. role-minimizing cKBs with empty TBox is NExpNPhard. This holds even if there is only one minimized role name and no fixed prediates\nProof. By Theorem 15, in ALC it is NExpNP-hard to decide whether a concept C0 is satisfiable w.r.t. CircCP(\u2205,A), where CP = (\u2205,M, \u2205, V ) and M contains concept names only. Clearly, it is still NExpNP-hard to decide whether there exists a common model of C0 and CircCP(\u2205,A) of size at least #M . Thus, it is sufficient to provide a polynomial reduction of this problem to the satisfiability problem w.r.t. cKBs in ALC with a single minimized role and all remaining predicates varying. Suppose C0 and CircCP(\u2205,A) are given. Let M = {A1, . . . , Ak} and take\n\u2022 two fresh role names r0, r1;\n\u2022 Boolean concepts C1, . . . , Ck built using fresh concept names B1, . . . , Bk such that every Ci, i \u2264 k, is satisfiable and every Ci u Cj , i 6= j, is unsatisfiable. One can take, for example, Ci = B1 u \u00b7 \u00b7 \u00b7 uBi\u22121 u \u00acBi uBi+1 u \u00b7 \u00b7 \u00b7 uBk, for i \u2264 k.\nLet CP\u2032 = (\u2205, {r0}, \u2205, V \u222a {B1, . . . , Bk, r1}) and define A\u2032 and C \u20320 as the result of replacing, in A and C0, every occurrence of Ai by \u2203r0.Ci, for i \u2264 k. Finally, set A\u2217 = A\u2032\u222a{\u2203r1.Ci(a) | i \u2264 k}. We show the following:\n(\u2217) C0 is satisfiable w.r.t. CircCP(\u2205,A) in a model of size at least #M if, and only if, C \u20320 is satisfiable w.r.t. CircCP\u2032(\u2205,A\u2217).\nLet I be a model of CircCP(\u2205,A) and C0 of size at least #M . Define an interpretation I \u2032 with domain \u2206I by extending I as follows: take mutually distinct d1, . . . , dk \u2208 \u2206I and interpret B1, . . . , Bk, r0, r1, and a in such a way that\n\u2022 CI\u2032i = {di}, for i \u2264 k,\n\u2022 rI\u20320 = {(d, di) | d \u2208 AIi , i \u2264 k},\n\u2022 aI = d1,\n\u2022 rI\u20321 = {(d1, d1), . . . , (d1, dk)}.\nIt is readily checked that I \u2032 is a model of C \u20320 and CircCP\u2032(\u2205,A\u2217). Conversely, let I be a model of CircCP\u2032(\u2205,A\u2217) and C \u20320. Define an interpretation I \u2032 by extending I with AI\u2032i = (\u2203r0.Ci)I , for i \u2264 k. It is readily checked that I \u2032 is a model of C0 and CircCP(\u2205,A). o"}, {"heading": "6.2 Role-minimizing cKBs With Nonempty TBox", "text": "In the bounded model property proof above, it is important that the selection of nodes stops after n iterations with the set \u2206n, where n is the maximum of the role depths of the concepts in the ABox and the concept C we want to satisfy. Such a bound for the selection of nodes does not exist if the TBox is non-empty, and we now show that reasoning w.r.t. role-minimizing cKBs is indeed undecidable in this case. The proof is by a reduction of the N\u00d7N-tiling problem (Berger, 1966).\nDefinition 26 A tiling problem is a quadruple triple P = (T,H, V ), where T is a finite set of tile types and H,V \u2286 T \u00d7 T are the horizontal and vertical matching conditions. A solution to P is a mapping \u03c4 : N\u00d7N\u2192 T such that\n\u2022 (\u03c4(i, j), \u03c4(i+ 1, j)) \u2208 H for all i, j \u2265 0;\n\u2022 (\u03c4(i, j), \u03c4(i, j + 1)) \u2208 V for all i, j \u2265 0. 4\nLet P = (T,H, V ) be an instance of the tiling problem. We define a TBox TP as follows:\n> v \u2203x.> u \u2203y.> (66)\n> v t t\u2208T\n( At u u\nt\u2032\u2208T,t6=t\u2032 \u00acAt\u2032\n) (67)\n> v u t\u2208T\n( At \u2192 t\n(t,t\u2032)\u2208H \u2200x.At\u2032\n) uu\nt\u2208T\n( At \u2192 t\n(t,t\u2032)\u2208V \u2200y.At\u2032\n) (68)\n> v N t (\u2203x.\u2203y.B u \u2203y.\u2203x.\u00acB) (69) \u00acN v D (70) D w \u2203x.D t \u2203y.D (71) D v \u2200x.D u \u2200y.D (72)\nLet CP = (\u2205,M, \u2205, V ) be the circumscription pattern in which V = {B,D} and M consists of the remaining concept and role names.\nLemma 27 CircCP(TP , \u2205) 6|= D(a) iff P has a solution.\nProof. Assume that P has a solution \u03c4 . Define an interpretation I as follows:\n\u2206I := N\u00d7N xI := {((i, j), (i+ 1, j)) | i, j \u2265 0} yI := {((i, j), (i, j + 1)) | i, j \u2265 0} AIt := {(i, j) \u2208 \u2206I | \u03c4(i, j) = t} NI := \u2206I BI := {(i, j) \u2208 \u2206I | i > 0 and j > 0} DI := \u2205 aI := (0, 0)\nIt is straightforward to verify that I is a model of TP . Additionally, we clearly have aI /\u2208 DI . It thus remains to show that there is no model J of TP with J <CP I. Assume there is such a J . Since all concept and role names except D and B are minimized, it follows that\n1. xI = xJ and yI = yJ because J is a model of (66);\n2. AIt = A J t for all t \u2208 T because of Point 1 and J is a model of (67);\n3. NI = NJ because, no matter what BJ is, by Point 1 we have\n(\u2203x.\u2203y.B u \u2203y.\u2203x.\u00acB)J = \u2205.\nThus and because J is a model of (69), NI = NJ .\nThus, I and J differ at most in the interpretation of the concept names D and B, which are varying. This is a contradiction to J <CP I.\nConversely, assume that CircCP(TP , \u2205) 6|= D(a), and let I be a model of CircCP(TP , \u2205) with aI 6\u2208 DI . By induction on i+ j, we define a mapping \u03c0 that assigns to each (i, j) \u2208 N\u00d7N an element \u03c0(i, j) \u2208 \u2206I such that for all i, j \u2265 0, we have\n1. (\u03c0(i, j), \u03c0(i+ 1, j)) \u2208 xI ;\n2. (\u03c0(i, j), \u03c0(i, j + 1)) \u2208 yI ;\nTo start, set \u03c0(0, 0) = aI . In the `-th step, we do the following:\n\u2022 Select a d \u2208 \u2206I such that (\u03c0(0, ` \u2212 1), d) \u2208 yI and put \u03c0(0, `) := d. Such a d exists since I is a model of (66).\n\u2022 Select a d \u2208 \u2206I such that (\u03c0(` \u2212 1, 0), d) \u2208 xI and put \u03c0(`, 0) := d. Again, such a d exists since I is a model of (66).\n\u2022 Now let i, j > 0 such that i + j = `. Since I is a model of (66), there are d, d\u2032 \u2208 \u2206I such that (\u03c0(i \u2212 1, j), d) \u2208 xI and (\u03c0(i, j \u2212 1), d\u2032) \u2208 yI . We show that d = d\u2032, and then set \u03c0(i, j) := d.\nAssume to the contrary that d 6= d\u2032. By (70)\u2013(72) and since aI /\u2208 DI , we have \u03c0(i \u2212 1, j \u2212 1) \u2208 NI . Define a new interpretation J that is obtained from I by the following modifications:\n\u2013 \u03c0(i\u2212 1, j \u2212 1) is removed from NI ; \u2013 let d\u2032 \u2208 BJ and d 6\u2208 BJ ; \u2013 let DJ = \u2206I .\nClearly, J <CP I. To obtain a contradiction against I being a model of CircCP(TP , \u2205), it thus remains to show that J is a model of TP . It suffices to consider (69) to (72), the only concept inclusions referring to N , B, and D. The axioms (70) to (72) hold because DJ = \u2206I . To show (69), let e \u2208 \u2206I . We show that e \u2208 CJ for C the concept on the right hand side of (69). Clearly, e \u2208 CJ since e \u2208 CI , if e is not {x, y, x\u2212, y\u2212}reachable from aI . We have e \u2208 NI if e is {x, y, x\u2212, y\u2212}-reachable from aI , because otherwise we would have aI \u2208 DI by axioms (70) to (72). Thus, e \u2208 NJ \u2286 CJ if e 6= \u03c0(i\u2212 1, j \u2212 1). Finally, \u03c0(i\u2212 1, j \u2212 1) \u2208 CJ , by definition of BJ .\nNow define a mapping \u03c4 : N \u00d7N \u2192 T by setting \u03c4(i, j) := t if \u03c0(i, j) \u2208 At. By (67), this mapping is well-defined. By (68), it satisfies the horizontal and vertical matching conditions. Thus, P has a solution.\no\nThus, we have shown the following result.\nTheorem 28 In ALC, satisfiability w.r.t role-minimizing cKBs is undecidable.\n6.3 Reasoning in Role-minimizing cKBs With Empty TBox in ALCI\nWe prove undecidability of reasoning in role-minimizing cKBs with empty TBox in ALCI. The proof uses the \u201cspy-point\u201d technique (Areces, Blackburn, & Marx, 1999); namely, we show that ABoxes can simulate TBox reasoning by employing inverse roles and a simulation of nominals by circumscription. Using this idea the proof is rather similar to the proof of Theorem 28.\nLet P be an instance of the tiling problem and consider the cKB CircCP(TP , \u2205) defined in the proof of Lemma 27. We simulate its TBox axioms C v C \u2032 by ABox assertions ((C \u2192 C \u2032)u \u2200r0.(C \u2192 C \u2032))(a) and enforcing the role r0 to connect all relevant points to a. This is achieved by forcing all relevant points in the domain to satisfy \u2203r\u22120 .{a}. Since we do not have nominals in the language we use a concept name A instead of {a} and ensure that it behaves like a nominal. We now present the details.\nFor the sake of readability, we write concept assertions C(a) in the form a : C and we set \u22001{r}.C = C u \u2200r.C. Let A, B\u2032, and N \u2032 be fresh concept names and r0 be a fresh role name not occurring in TP . Then AP consists of the assertions\na : \u22001{r0}.(C \u2192 C \u2032), (73)\nfor C v C \u2032 \u2208 TP ,\na : A, a : \u22001{r0}. u s=x,y \u2200s.\u2203r\u22120 .A, (74)\na : \u22001{r0}. ( N \u2032 t (( (A uB\u2032) t \u2203r\u22120 .(A uB \u2032) ) u t\ns=x,y \u2203s.\u2203r\u22120 .(A u \u00acB\n\u2032) ))\n(75)\na : \u22001{r0}.(\u00acN \u2032 \u2192 D), a : \u2203r0.D \u2192 D (76)\nNow let CP = (\u2205,M, \u2205, {D,B,B\u2032}), where M consists of all concept and role names distinct from D, B, and B\u2032.\nLemma 29 CircCP(\u2205,AP ) 6|= D(a) iff P has a solution.\nProof. Assume P has a solution \u03c4 . Take the interpretation I from the proof of Lemma 27 expanded by\nAI = {(0, 0)}, N \u2032I = \u2206I , B\u2032I = \u2205, rI0 = {(aI , d) | d \u2208 \u2206I}.\nWe show that I is a model of CircCP(\u2205,AP ). Clearly, I is a model of AP . Thus it remains to show that there is no model J of AP with J <CP I. Assume there exists J <CP I which is a model of AP . As A is minimized and by (74), AJ = {(0, 0)}. It follows from axiom (66) encoded in (73) that ((0, 0), (1, 0)) \u2208 xJ and ((0, 0), (0, 1)) \u2208 yJ . Now one can prove by induction on ` > 0 using again the axiom (66) encoded in (73) and (74) that for all (i, j) with i + j = `, ((0, 0), (i, j)) \u2208 rJ0 and ((i, j), (i + 1, j)) \u2208 xJ , ((i, j), (i, j + 1)) \u2208 yJ . It follows that xJ = xI and yJ = yI . Also observe that N \u2032J = \u2206I because, no matter how B\u2032 is interpreted,((\n(A uB\u2032) t \u2203r\u22120 .(A uB \u2032) ) u t\ns=x,y \u2203s.\u2203r\u22120 .(A u \u00acB\n\u2032) )J = \u2205.\nNow one can prove similarly to the proof of Lemma 27 that J can only differ from I in the interpretation of B, B\u2032, and D, which is a contradiction.\nConversely, suppose I is a model of CircCP(\u2205,AP ) with aI 6\u2208 DI . We first show that (aI , d) \u2208 rI0 whenever d 6= aI and d is {x, y}-reachable in I from aI in a finite number of steps. Assume that this is not the case. Then there exist d, d\u2032 \u2208 \u2206I such that\n\u2022 d = aI or (aI , d) \u2208 rI0 ,\n\u2022 (d, d\u2032) \u2208 xI or (d, d\u2032) \u2208 yI ,\n\u2022 (a, d\u2032) 6\u2208 rI0 .\nBy (74), there exists d\u2032\u2032 \u2208 \u2206I such that aI 6= d\u2032\u2032, (d\u2032\u2032, d\u2032) \u2208 rI0 , and d\u2032\u2032 \u2208 AI . Observe that d \u2208 N \u2032I by (76) and aI 6\u2208 DI . Define a new interpretation J by modifying I as follows:\n\u2022 d is removed from N \u2032I ;\n\u2022 let aI \u2208 B\u2032J and d\u2032\u2032 6\u2208 B\u2032J ;\n\u2022 let DJ = \u2206I .\nClearly J <CP I. To obtain a contradiction it is thus sufficient to show that J is a model of AP . Clearly, all assertion in AP containing neither D, B\u2032, nor N \u2032 are satisfied in J . For the remaining assertions except (75), it follows from DJ = \u2206I that they are satisfied in J . Finally, for (75), observe that N \u2032I \u2287 {aI}\u222a{e | (aI , e) \u2208 rI0 } because a 6\u2208 DI and assertions (76). Thus, by definition of N \u2032J , we only have to consider the point d removed from N \u2032I .\nBut d \u2208 (( (A uB\u2032) t \u2203r\u22120 .(A uB\u2032) ) u t\ns=x,y \u2203s.\u2203r\u22120 .(A u \u00acB\u2032)\n)J by definition of J .\nNow one can use the assertions (73) to construct a solution \u03c4 of P in the same way as in the proof of Lemma 27. o\nWe have thus proved the following result.\nTheorem 30 In ALCI, satisfiability w.r.t. role-minimizing cKBs with empty TBox is undecidable."}, {"heading": "7. Related Work", "text": "We have already pointed out in the introduction that circumscription is just one of several possible approaches to nonmonotonic DLs and that, in order to achieve decidability, each of these approaches has to adopt a suitable restriction on the expressive power of the DL component, on the non-monotonic features, or on the interaction of the DL and its nonmonotonic features. In this section, we survey the existing approaches, discuss the adopted restrictions, and relate them to DLs with circumscription whenever possible. However, we point out that a full-fledged formal comparison of the different approaches is a serious research endeavor of its own and outside the scope of this paper. The main approaches to nonmonotonic DLs (excluding those relying on the integration of DLs and logic programming) are summarized in Table 1, where \u2018n.a.\u2019 stands for \u2018not analyzed\u2019 and the \u2018specificity\u2019 column states whether a formalism is equipped with a priority mechanism based on the the specificity (i.e., subsumption) of concepts.\nWe start with two early approaches based on circumscription. In the work by Brewka (1987), a frame system is given a nonmonotonic semantics based on circumscription. The focus is on showing the appropriateness of the proposed semantics, and the decidability and complexity of reasoning is not analyzed. Cadoli et al. (1990), apply circumscription to a DL\nin the same way as we do here. The authors consider only non-prioritized circumscription and apply it to a fragment of the description logic ALE . Decidability of reasoning is shown by a reduction to propositional reasoning under the Extended Closed World Assumption (ECWA), which is in \u03a0p2. To the best of our knowledge, this was the first effective reasoning method for a nonmonotonic description logic.\nIn another early approach by Padgham and Zhang (1993), a nonmonotonic DL is obtained by an adaptation of the inheritance networks approach (Horty, 1994) where the underlying DL is essentially AL extended with concrete data values. The main contribution is the definition of the formalism and a discussion of applications, decidability and complexity are not analyzed.\nA recent approach that is similar in spirit to circumscription has been taken by Giordano et al. (2008). The authors extend ALC with a modal operator T representing typicality, and maximize T \u2019s extension to achieve nonmonotonic inferences. Decidability is proved via a tableau algorithm that also establishes a co-NExpNP upper bound for subsumption. A lower bound is not given.\nWe now turn to approaches based on default logic (Reiter, 1980). The nonmonotonic DLs by Baader and Hollunder (1995a, 1995b), Straccia (1993), and Lambrix et al. (1998) share a common restriction: default rules can be applied to an individual only if it has a name, that is, if it is denoted by an individual constant that occurs explicitly in the knowledge base. This restriction is motivated by the observation that, when defaults are also applied to implicit (anonymous) individuals, then reasoning becomes undecidable (Baader &\nHollunder, 1995a). Since the models of DL knowledge bases usually include a large number of anonymous individuals due to existential quantification, this restriction introduces a strong asymmetry in the treatment of individuals.\nAnother line of nonmonotonic DLs (Donini et al., 1998, 1997, 2002) is based on first-order autoepistemic logics whose interpretation domains are restricted to a fixed and denumerable set of constants. The use of a unique domain resolves several issues related to quantification in modal logics (such as whether the Barcan formula should hold, and whether different worlds of the same Kripke structure should be allowed to have different domains). It also avoids the asymmetry of the approaches based on default logic because, by definition, all individuals have a name. The other side of the coin is that domains with finite or varying cardinality and knowledge bases that do not satisfy the unique name assumption can only be dealt with using rather technical encodings (such as an explicit axiomatization of the finite domain represented by a concept name D).\nIn the first paper mentioned above (Donini et al., 1998), decidability results apply only to monotonic knowledge bases4 as the autoepistemic operator can be used in a nonmonotonic fashion only in queries. This restriction has been lifted in the subsequent publications. They make use of the logic of minimal knowledge and negation as failure (MKNF), which is equipped with two (auto)epistemic operators \u201cK\u201d and \u201cA\u201d (Donini et al., 1997, 2002). In the former paper (Donini et al., 1997), the underlying monotonic fragment can be any description logic with a decidable instance checking problem. The price payed for this generality is that decidability results apply only to so-called simple knowledge bases, where quantifying-in (that is, quantification across modal operators, as in \u2200R.KC) is not allowed. Nonetheless, such KBs are expressive enough to model default rules. A different restriction is explored by Donini et al. (2002). The underlying DL is restricted toALC while limited forms of quantifying-in are allowed, in so-called subjectively quantified ALCKNF knowledge bases. Decidability results are obtained for the subclass of simple subjectively quantified knowledge bases, whose nonmonotonic part is restricted to inclusions of the form KC v D such that > v C is can not be inferred from the knowledge base. This restriction is incompatible with the traditional embedding of (priority-free) circumscription into autoepistemic logic, which is based on prerequisite-free default rules that would be equivalent to inclusions of the form K> v C.\nA recent line of research on integrating DLs and logic programming rules introduces further nonmonotonic extensions of DLs based on negation-as-failure. Some approaches (Eiter et al., 2004) use a loosely coupled integration of logic programs and DLs, where the interpretations of the DL component are not restricted while the logic program variables range only over the named DL individuals. Thus, these approaches are somewhat similar to the classical extensions of DLs based on defaults in that nonmonotonic inferences are limited to named individuals. A more recent approach (Motik & Rosati, 2007) is based on MKNF and shares with the MKNF-DLs discussed above pros and cons of adopting a fixed denumerable domain. If the complexity of reasoning in the underlying DL is C 6\u2286 NP, then the data complexity of entailment is bounded by CC . Finally, we mention a 3-valued variant of this approach (Knorr, Alferes, & Hitzler, 2007) based on the well-founded semantics.\n4. The autoepistemic operator can be used only in restricted contexts that suffice to encode so-called procedural rules, which are monotonic.\nA common limitation of the nonmonotonic extensions of DLs based on MKNF is that they provide no support for specificity and priorities. In particular, defeasible inheritance is not mentioned in the expressiveness analysis for autoepistemic approaches (Donini et al., 1997, 2002) and it does not appear to be a goal of any MKNF-based approach. As pointed out in the introduction, it is well-known that, in the propositional case, nonmonotonic logics cannot modularly encode specificity-based priorities such as those needed by inheritance mechanisms (Horty, 1994)."}, {"heading": "8. Conclusions and Perspectives", "text": "We have shown that circumscription provides an elegant approach to defining nonmonotonic DLs, that the resulting formalisms have an appealing expressive power and are decidable if appropriate restrictions are adopted. The main such restriction, which leads to rather robust decidability results, is that only concept names are minimized and fixed whereas all role names vary. With empty TBoxes, decidability is retained if roles are allowed to be minimized, but not when they are fixed. The decidability and complexity results obtained in this paper are listed in more detail in Table 2. By the results of Section 3, all bounds with TBox 6= \u2205 apply to both general and acyclic TBoxes.\nWe view this paper as a promising step towards establishing circumscribed DLs as a major family of nonmonotonic DLs to be used in practical applications. To reach this goal, some additional research topics have to be addressed, of which we mention two. First, the algorithms presented in this paper are based on massive non-deterministic guessing and thus do not admit an efficient implementation. Ideally, one would like to have algorithms which are well-behaved extensions of the tableau algorithms that underly state-of-the-art DL reasoners (Baader & Sattler, 2000). A crucial issue is whether the sophisticated optimization techniques implemented in such reasoners (tableaux caching, dependency-directed backtracking etc.; cf. Baader et al., 2003, Chap. 9) can be adapted to circumscribed DLs. Some first steps have been made by Grimm and Hitzler (2008). Second, it seems necessary to develop a design methodology for modelling defeasible inheritance. The examples given in this paper indicate that the main challenge is to find rules of thumb to determine which predicates should be fixed, varied, and minimized. It may be appealing to hide abnormality predicates behind explicit syntax for defeasible inclusions, and trade some generality for simplicity and usability.\nAlso from a theoretical perspective, our initial investigation leave open at least some interesting questions. For example, our current techniques are limited to circumscribed DLs\nthat have the finite model property. It would be desirable to overcome this limitation and obtain decidability results for even more expressive DLs such as SHIQ or OWL. It is also possible to follow the opposite approach and consider circumscribed versions of inexpressive DLs such as those of the EL or DL-Lite family (Baader, Brandt, & Lutz, 2005a; Calvanese, Giacomo, Lembo, Lenzerini, & Rosati, 2007), which are currently very popular in a large number of applications. First steps have been made by Bonatti, Faella, and Sauro (2009), who investigated circumscribed versions of EL and DL-lite.\nFinally, it is worth mentioning that our complexity results for circumscription can be used to prove complexity bounds for other, seemingly unrelated, reasoning problems in description logic. For example, certain reasoning services for conservative extensions and modularity in description logic and the satisfiability problem w.r.t. concept-circumscribed knowledge bases are mutually reducible to each other in polynomial time (Konev, Lutz, Walther, & Wolter, 2008). As there are not many problems that are known to be NExpNPcomplete, circumscription thus provides a new class of problems that can potentially be employed to give NExpNP lower bound proofs."}, {"heading": "Acknowledgments", "text": "The first author was partially supported by the network of excellence REWERSE, IST-2004506779. The third author was partially supported by UK EPSRC grant no. GR/S63182/01."}, {"heading": "Appendix A. Missing Proofs in Section 3", "text": "Lemma 5. In ALC, satisfiability w.r.t. (concept-)circumscribed KBs with empty TBox and without fixed roles can be polynomially reduced to satisfiability w.r.t. (concept-)circumscribed KBs with empty TBox and without fixed predicates.\nProof. In the proof of Lemma 4, we have used TBox axioms to state that some fresh concept names are interpreted as the complement of fixed concept names. In general, this cannot be done using ABox assertions only. Instead, we construct ABox assertions which force this to be the case only for objects which are relevant for the truth of the given ABox. Some care is required to do this using ABox assertions of polynomial size. The first part of the proof deals with this problem. The second part is then a straighforward modification of the proof of Lemma 4.\nThe first part of the proof consists of introducing some notation and proving a central technical claim. For w = r1 \u00b7 \u00b7 \u00b7 rn \u2208 N\u2217R, an interpretation I, and d, e \u2208 \u2206I , we write (d, e) \u2208 wI iff there are d0, . . . , dn \u2208 \u2206I with d = d0, e = dn, and (di, di+1) \u2208 rIi+1 for all i < n.\nLet N be a set of individual names and Paths a mapping from N to the powerset of N\u2217R. An interpretation I is well-behaved for the mapping Paths if for every d \u2208 \u2206I , there is an a \u2208 N and a w \u2208 Paths(a) such that (aI , d) \u2208 wI . With each ALC-concept C, we associate a set P(C) of pairs (w,D) with w \u2208 N\u2217R and D a subconcept of C as follows:\n\u2022 if C \u2208 NC, then P(C) = {(\u03b5, C)};\n\u2022 if C = \u00acD, then P(C) = {(\u03b5, C)} \u222a P(D);\n\u2022 if C = D1 uD2 or C = D1 tD2, then P(C) = {(\u03b5, C)} \u222a P(D1) \u222a P(D2);\n\u2022 if C = \u2203r.D or C = \u2200r.D, then P(C) = {(\u03b5, C)} \u222a {(rw,E) | (w,E) \u2208 P(D)}.\nFor a set of ABox assertions S and an individual name a, we use P(S, a) to denote the set\u22c3 C(a)\u2208S P(C). We write Paths(S, a) for {w | \u2203D : (w,D) \u2208 P(S, a)}. We now formulate the announced claim.\nClaim 1. Suppose CircCP(\u2205,A) 6|= C0(a0), where CP does not contain fixed role names and A and C0(a) are formulated in ALC. Let S = A\u222a{C0(a0)} and let N be the set of individual names in S. Let I \u2032 be the restriction of I to those d \u2208 \u2206I such that, for some a \u2208 N and some w \u2208 Paths(S, a), we have (aI , d) \u2208 wI . Then I \u2032 is a model of CircCP(\u2205,A) and \u00acC0(a0) which is well-behaved for the mapping Paths(a) = Paths(S, a), a \u2208 N .\nWe now prove the claim. Let I be a model of CircCP(\u2205,A) with aI0 \u2208 (\u00acC0)I . Note that for all a \u2208 N , we have \u03b5 \u2208 Paths(S, a) and thus aI \u2208 \u2206I\u2032 . Clearly, I \u2032 is well-behaved for Paths. One can prove by induction on C that\n(\u2217) for all a \u2208 N , (w,C) \u2208 P(S, a), and d \u2208 \u2206I\u2032 with (aI , d) \u2208 wI , we have d \u2208 CI iff d \u2208 CI\u2032 .\nWe show only the case C = \u2203r.D, and leave the other cases to the reader. Let d \u2208 CI . Then there is an e \u2208 DI with (d, e) \u2208 rI . Since (w,C) \u2208 P(S, a), we have (wr,D) \u2208 P(S, a). Since (aI , d) \u2208 wI , we have (aI , e) \u2208 (wr)I . Thus, e \u2208 \u2206I\u2032 and the induction hypothesis yields e \u2208 DI\u2032 . By definition of I \u2032 and the semantics, d \u2208 CI\u2032 . Now let d \u2208 CI\u2032 . Then there is an e \u2208 DI\u2032 with (d, e) \u2208 rI\u2032 . By definition of I \u2032, (d, e) \u2208 rI . Since (w,C) \u2208 P(S, a), we have (wr,D) \u2208 P(S, a). Since (aI , d) \u2208 wI , we have (aI , e) \u2208 (wr)I . Thus, the induction hypothesis yields e \u2208 DI .\nThus, (\u2217) is established. Using (\u2217) and the facts that aI0 \u2208 (\u00acC0)I and that I is a model of A, it is not hard to verify that aI\u20320 \u2208 (\u00acC0)I \u2032 and that I \u2032 is a model of A. We show that I \u2032 is also a model of CircCP(\u2205,A). Assume to the contrary that there is a model J \u2032 of A with J \u2032 <CP I \u2032. Define an interpretation J as follows:\n\u2022 \u2206J = \u2206I ;\n\u2022 AJ = AI for all A \u2208 F ;\n\u2022 AJ = AJ \u2032 for all A \u2208 V \u222aM ;\n\u2022 rJ = rJ \u2032 for all r \u2208 NC;\n\u2022 bJ = bI for all b \u2208 NI.\nUsing the assumption that CP does not contain fixed role names, it is not hard to verify that J <CP I. To obtain a contradiction to the fact that I is a model of CircCP(\u2205,A), it thus remains to show that J is a model of A. To this end, we prove by induction on C that\n(\u2217\u2217) for all a \u2208 N , (w,C) \u2208 P(S, a), and d \u2208 \u2206J \u2032 with (aJ , d) \u2208 wJ , we have d \u2208 CJ iff d \u2208 CJ \u2032 .\nSince the induction step is as in the proof of (\u2217), we only do the induction start. Thus, let C = A \u2208 NC. If A \u2208 V \u222aM , we are done by definition of J . Now let A \u2208 F . Since I \u2032 is\na restriction of I and AJ \u2032 = AI\u2032 , the definition of J yields AJ \u2229\u2206J \u2032 = AJ \u2032 , as required. This finishes the proof of the claim.\nTo prove Lemma 5, we consider instance checking instead of satisfiability. Since we have provided polynomial reductions from satisfiability to (non)-instance checking and vice versa in Section 2, we nevertheless obtain the desired result. Let CircCP(\u2205,A) be a cKB with CP = (\u227a,M, F, V ) and F = {A1, . . . , Ak}. Take a concept assertion C0(a0). Let S = A \u222a {C0(a0)} and N be the set of individual names in S. Define\n\u2022 M \u2032 = M \u222a {A1, . . . , Ak, A\u20321, . . . , A\u2032k}, where the A\u2032i are fresh concept names;\n\u2022 A\u2032 = A \u222a {\u2200w.(A\u2032i \u2194 \u00acAi)(a) | w \u2208 Paths(S, a), a \u2208 N , i \u2264 k};\n\u2022 CP\u2032 = (\u227a,M \u2032, \u2205, V ).\nThen CircCP(\u2205,A) |= C0(a0) iff CircCP\u2032(\u2205,A\u2032) |= C0(a0) follows immediately from Claim 1 and the fact that Paths(S, a) = Paths(S \u2032, a), for S \u2032 = A\u2032 \u222a C0(a0). o\nLemma 6 C0 is satisfiable w.r.t. CircCP(T ,A) iff C0 uB\u2032 is satisfiable w.r.t. CircCP\u2032(T \u2032,A). Proof. Suppose I is a model of C0 and CircCP(T ,A). Expand I to an interpretation I \u2032 by setting\nAI \u2032 = B\u2032I \u2032 = \u2206I , BI \u2032 = A\u2032I \u2032 = \u2205, uI\u2032 = \u2205.\nClearly, I \u2032 is a model of C0 uB\u2032 and (T \u2032,A). We show that I \u2032 is a model of CircCP\u2032(T \u2032,A). Assume to the contrary that there is a model J of (T \u2032,A) with J <CP\u2032 I \u2032. Then A\u2032J = \u2205, AJ = \u2206I , BJ = \u2205, and B\u2032J = \u2206I . Since u is varying and J <CP\u2032 I \u2032, it is thus easy to show that J <CP I. This contradicts the fact that I is a model of CircCP(T ,A).\nConversely, suppose I is a model of C0 uB\u2032 and CircCP\u2032(T \u2032,A). We show that I is also a model of C0 and CircCP(T ,A). First observe that AI = \u2206I . For suppose that this is not the case. Define a new interpretation J in the same way as I except that uJ = \u2206I \u00d7\u2206I , BJ = \u2206I , and B\u2032J = \u2205. Then J <CP\u2032 I (since B\u2032I 6= \u2205) and J is a model of (T \u2032,A). Thus we have derived a contradiction. It follows that CI = \u2206I and hence I is a model of (T ,A) and C0. It remains to show that there is no J <CP I such that J is a model of (T ,A). Assume such a J exists. Then CJ = \u2206I . Define a model J \u2032 by expanding J as follows:\nAJ \u2032 = B\u2032J \u2032 = \u2206I , BJ \u2032 = A\u2032J \u2032 = \u2205, uJ \u2032 = \u2205.\nNote that A, B, A\u2032, B\u2032, and u are interpreted by I in the same way, then J \u2032 <CP\u2032 I. Moreover, J \u2032 is a model of (T \u2032,A). We have derived a contradiction. o\nLemma 8 For all L \u2208 DL, simultaneous satisfiability w.r.t. (concept) circumscribed KBs CircCP1(T1,A1), . . .CircCPk(Tk,Ak), such that CircCPi(Ti,Ai) and CircCPj (Tj ,Aj) share no role names for 1 \u2264 i < j \u2264 k, can be reduced to satisfiability w.r.t. single (concept) circumscribed KBs in polynomial time.\nProof. It suffices to reduce simultaneous satisfiability without shared role names to the complement of instance checking w.r.t. single cKBs. As a generalization is straightforward, we only give a proof for the case k = 2. Thus, let L \u2208 DL and CircCP1(T1,A1),CircCP2(T2,A2)\nbe cKBs formulated in L that share no role names, and C0 an L-concept. Moreover, let A0, . . . , An\u22121 be the concept names shared by the two cKBs, R the role names used in at least one of the two cKBs together with a fresh role name r0, and CPi = (\u227ai,Mi, Fi, Vi) for i \u2208 {1, 2}. We obtain a new TBox T \u20322 from T2 by replacing each concept name Ai, i < n, with a new concept name A\u2032i. Let A\u20322 be obtained from A2 and CP \u2032 2 = (\u227a\u20322,M \u20322, F \u20322, V \u20322) from CP2 in the same way. Define a TBox T \u2217 as follows, where P is a fresh concept name:\nAi u \u00acA\u2032i v P for all i < n \u00acAi uA\u2032i v P for all i < n\nP v \u2200r.P for all r \u2208 R \u2203r.P v P for all r \u2208 R\nNow set:\nT := T1 \u222a T \u20322 \u222a T \u2217\nA := A1 \u222a A\u20322 \u222a {r0(b1, b2) | b1, b2 occur in A1 \u222a A2 \u222a T1 \u222a T2} \u227a := \u227a1 \u222a \u227a\u20322 M := M1 \u222aM \u20322 F := F1 \u222a F \u20322 V := V1 \u222a V \u20322 \u222a {P, r0}\nCP := (\u227a,M, F, V )\nLet a0 be an individual name from A1 (clearly, we may assume that A1 6= \u2205). It remains to show the following:\nClaim. C0 is simultaneously satisfiable w.r.t. CircCP1(T1,A1) and CircCP2(T2,A2) iff a0 is not an instance of \u00ac(\u00acP u \u2203r0.C0) w.r.t. CircCP(T ,A).\n\u201cIf\u201d. Assume that a0 is not an instance of \u00ac(\u00acP u \u2203r0.C0) w.r.t. CircCP(T ,A). Then there is a model I of CircCP(T ,A) with aI0 \u2208 (\u00acP u\u2203r0.C0)I . We call I connected if the directed graph GI = (\u2206I , \u22c3 r\u2208R r\nI \u222a (r\u2212)I) is connected. A connected component I \u2032 of I is the restriction of I to domain \u2206I\u2032 such that \u2206I\u2032 is a (maximal) connected component in GI . We may assume without loss of generality that the chosen model I is connected: if it is not, then the use of the role r0 ensures that there is a connected component I \u2032 of I that contains bI for all individual names b in A1 \u222a A2 \u222a T1 \u222a T2. It is easy to see that I \u2032 is a model of CircCP(T ,A) and aI \u2032 0 \u2208 (\u00acP u \u2203r0.C0)I \u2032 , thus we may simply replace I by I \u2032.\nWe have to show that C0 is simultaneously satisfiable with respect to CircCP1(T1,A1) and CircCP2(T1,A2). Clearly, I is a model of C0. By construction of CircCP(T ,A), it is a model of T1, and A1. To show that I is also a model of CircCP1(T1,A1), assume to the contrary that this is not the case. Then there exists a model J of T1 and A1 such that J <CP1 I. Define a model J \u2032 as follows:\n\u2022 \u2206J \u2032 = \u2206J ;\n\u2022 all predicates used in T1 and A1 are interpreted as in J ;\n\u2022 all predicates used in T \u20322 and A\u20322 are interpreted as in I.\n\u2022 PJ \u2032 := { \u2206I if ((Ai u \u00acA\u2032i) t (\u00acAi uA\u2032i))J 6= \u2205 for some i < n \u2205 otherwise\n\u2022 rJ \u20320 = \u2206J \u2032 \u00d7\u2206J \u2032 .\nIt is readily checked that J \u2032 is a model of T and A, and that J \u2032 <CP I. Thus, we have derived a contradiction to the fact that I is a model of CircCP(T ,A), and it follows that I is a model of CircCP(T1,A1).\nIt remains to show that I is a model of CircCP(T2,A2). Since I is connected, a model of T \u2217, and satisfies aI0 /\u2208 P I , we have that AIi = (A\u2032i)I for all i < n. Therefore, I is also a model of T2 and A2. Analogously to the case of CircCP1(T1,A1), we can now show that I is a model of CircCP2(T2,A2).\n\u201cOnly if\u201d. Assume that C0 is simultaneously satisfiable w.r.t. the cKBs CircCP1(T1,A1) and CircCP2(T2,A2). Then there exists a model I of C0 that is a model of CircCP1(T1,A1) and CircCP2(T2,A2). We modify I to a new model I \u2032 by setting\n\u2022 (A\u2032i)I \u2032 := AIi for all i < n;\n\u2022 P I\u2032 := \u2205;\n\u2022 rI\u20320 := \u2206I \u00d7\u2206I .\nIt is easy to see that I \u2032 is a model of T and A, and that aI\u2032 \u2208 (\u00acP u \u2203r0.C0)I \u2032 . To show that a0 is not an instance of \u00ac(\u00acP u \u2203r0.C0) w.r.t. CircCP(T ,A), it thus remains to prove that I \u2032 is also model of CircCP(T ,A). To do this, we first show the following:\n(a) I \u2032 is a model of CircCP1(T1,A1). This is the case since any model J of T1 and A1 with J <CP1 I \u2032 satisfies J <CP1 I. Thus, the existence of such a model contradicts the fact that I is a model of CircCP1(T1,A1).\n(b) I \u2032 is a model of CircCP\u20322(T \u2032 2 ,A\u20322). Assume to the contrary that there is a model J of T \u20322 and A\u20322 with J <CP\u20322 I\n\u2032. Convert J into an interpretation J \u2217 by setting AJ \u2217i := (A\u2032i)J for all i < n. Then, J \u2217 is a model of T2 and A2 and satisfies J \u2217 <CP2 I. This is a contradiction to the fact that I is a model of CircCP2(T2,A2).\nNow, assume to the contrary of what is to be shown that there is a model J \u2032 of T and A with J \u2032 <CP I \u2032. By definition of CP, J \u2032 <CP I \u2032 implies that either J \u2032 <CP1 I \u2032 or J \u2032 <CP\u20322 I\n\u2032 hold. Since J \u2032 clearly satisfies T1, A1, T \u20322 , and A\u20322, we obtain a contradiction to (a) and (b). o"}, {"heading": "Appendix B. Missing Proofs in Section 4", "text": "Lemma 14 G is a yes-instance of co-3CERTCOLS iff CG is satisfiable w.r.t. CircCPG(\u2205,AG), where CPG = (\u227a,M, F, V ) with \u227a = \u2205, M = {Root, Leaf,Clash},\nF = {LeafFix,Tr, X0, . . . , Xn\u22121, Y0, . . . , Yn\u22121, },\nand V the set of all remaining predicates in AG.\nProof. \u201cIf\u201d. Suppose that CG is satisfiable w.r.t. CircCPG(\u2205,AG) and let I be a model of CircCPG(\u2205,AG) with CIG 6= \u2205. We have to show that G is a yes-instance of co-CERT3COLS . To start, we show that\n(I) aI0 \u2208 CIG. Assume to the contrary that this is not the case. Then there is a d \u2208 CIG with d 6= aI0 . Since d \u2208 CIG, we have d \u2208 Root\nI . Let J be the interpretation obtained from I by setting RootJ = {aI0}. By definition of AG, we have aI0 \u2208 RootI , and thus J \u227aCPG I. Moreover, it is easily seen that J is a model of AG. We have thus established a contradiction to the fact that I is a model of CircCPG(\u2205,AG), which proves (I).\nBy Lines (1)-(4) (Fig. 2), there are elements di,w \u2208 \u2206I (the nodes of the tree) for i \u2264 2n and w \u2208 {0, 1}i such that\n\u2022 aI0 = d0,\u03b5;\n\u2022 di,w \u2208 XIj iff the j + 1-st bit of w is 1, for all i \u2264 2n and j \u2264 min{i, n\u2212 1};\n\u2022 di,w \u2208 Y Ij iff the n+ j + 1-st bit of w is 1, for all i, j with n < i \u2264 2n and j \u2264 i\u2212 n;\n\u2022 (di,w, di+1,w0), (di,w, di+1,w1) \u2208 rI , for all i < 2n;\n\u2022 d2n,w \u2208 LeafI , for all w \u2208 {0, 1}2n.\nFor i, j < 2n, we use `i,j to denote the element d2n,w such that w \u2208 {0, 1}2n denotes the binary encoding of i followed by that of j. We now show that\n(II) LeafI = {`i,j | i, j < 2n}.\nAssume to the contrary that this is not the case, i.e., that there is a d \u2208 LeafI such that d 6= `i,j for all i, j < 2n. Let id, jd > 0 be integers such that the truth values of X0, . . . , Xn\u22121 at d encode id and the truth values of Y0, . . . , Yn\u22121 encode jd. Starting from I, we construct an interpretation J by setting\nLeafJ := LeafI \\ {d} rJ := (rI \\ (\u2206I \u00d7 d)) \u222a {(e, `id,jd) | (e, d) \u2208 rI}\nFurther modify J into J \u2032 by setting\nPJ \u2032 := (\u2203r2n.\u2203var1.\u00acLeaf)J \u222a (\u2203r2n.\u2203var2.\u00acLeaf)J \u222a (\u2203r2n.\u2203col1.\u00acLeaf)J \u222a (\u2203r2n.\u2203col2.\u00acLeaf)J\nBy going through Lines (1) to (26), it is straightforward to check that J \u2032 is a model of AG. Moreover, we clearly have J \u2032 <CPG I, and thus obtain a contradiction to the fact that I is a model of CircCPG(\u2205,AG). We have thus shown (II).\nThe following is an easy consequence of (I), the fact that \u00acP is a conjunct of CG, and Lines (8), (9), (20), and (21):\n(III) (`i,j , d) \u2208 rI implies d \u2208 LeafI for all i, j < 2n, d \u2208 \u2206I , and r \u2208 {var1, var2, col1, col2}.\nNow suppose to the contrary of what we aim to prove that G is not a yes-instance. Then, for all truth assignments t, the subgraph t(G) is 3-colorable. In particular, this holds for the assignment t defined by setting, for all i, j < 2n,\nt(Vij) := 1 iff `i,j \u2208 TrI .\nLet c : {0, . . . , 2n \u2212 1} \u2192 {R,G,B} be a 3-coloring of t(G) and construct an interpretation J by starting from I and applying the following modifications:\nCJ = {`i,0 | i < 2n, c(i) = C} for all C \u2208 {R,G,B} ClashJ = \u2205 .\nClearly, J <CPG I: the minimized predicate Clash is empty in J , but non-empty in I since CIG is non-empty. To obtain a contradiction, it thus suffices to show that J is a model of AG.\nSince I and J agree on all predicates but R,G,B, and Clash, all inclusions that do not mention these concepts are satisfied in J . These are Lines (1) to (21). Lines (22) and (23) are satisfied by construction of J and since, due to Line (5) and (II), (aJ0 , d) \u2208 (r2n)J implies d = `i,j for some i, j < 2n. It thus remains to consider Lines (24) to (26). We first show that\n(IV) for all i, j < 2n, (i, j) is an edge of t(G) iff `i,j /\u2208 ElimJ .\nLet i, j < 2n and let the potential edge (i, j) be labeled with Vk1,k2 \u2228 Vk3,k4 (since the circuits c(i)S and c (i) j deliver an output for any input, we can assume that also potential, but non-existing edges have a label). By (II) and (III) together with Lines (8) and (9), var1J = var1I = {`k1,k2} and var2J = var2I = {`k3,k4}. Thus, the definition of t together with Lines (12) to (16) yields that (i, j) is an edge of t(G) iff `i,j /\u2208 ElimI . To prove (IV), it remains to note that I and J interpret the concept name Elim in the same way.\nNow, we prove that (24) to (26) are satisfied in J . Let (aJ0 , d) \u2208 (r2n)J . By Line 5 and (II), d = `i,j for some i, j < 2n. Let `i,j /\u2208 ElimJ . By (IV) and since c is a 3-coloring of t(G), we get c(i) 6= c(j). Thus, by construction of J , `i,0 /\u2208 CJ or `j,0 /\u2208 CJ for all C \u2208 {R,G,B}. By (II) and (III) together with Lines (18) and (19), col1J = col1I = {`i,0} and col2J = col2I = {`j,0}. Therefore, `i,j /\u2208 (\u2203col1.C u \u2203col2.C)J for all C \u2208 {R,G,B}. Since this holds for any `i,j /\u2208 ElimJ , the preconditions of the implications in Lines (24) to (26) are never satisfied. Thus, the implications are satisfied.\n\u201cOnly if\u201d. Suppose that G is a yes-instance and let t be a truth assignment such that t(G) is not 3-colorable. Let c : {0, . . . , 2n \u2212 1} \u2192 {R,G,B} be a color assignment that minimizes (w.r.t. set inclusion) the set {(i, j) | (i, j) an edge in G with c(i) = c(j)}. Define an interpretation I as follows (here and in the following, we do not distinguish between a number and its binary encoding as a string):\n\u2206I = {di,w | i \u2264 2n, w \u2208 {0, 1}i} RootI = {d0,\u03b5} LeafI = {d2n,w | w \u2208 {0, 1}2n}\nLeafFixI = {d2n,w | w \u2208 {0, 1}2n} XIj = {di,w | the j + 1-st bit of w is 1, i \u2264 2n, and j \u2264 min{i, n\u2212 1}}; Y Ij = {di,w | the n+ j + 1-st bit of w is 1, n < i \u2264 2n, and j \u2264 i\u2212 n}; TrI = {d2n,ij | t(Vij) = 1}\nTrI` = {d2n,ij | t(Vij)\u2194 c (`) S (i, j)} (` = 1, 2)\nElimI = {d2n,ij | (i, j) is not an edge of t(G)} CI = {d2n,i0 | c(i) = C} (C = R,G,B)\nClashI = {d2n,ij | (i, j) is an edge of t(G) and c(i) = c(j)} rI = {(di,w, di+1,w0), (di,w, di+1,w1) | i < 2n}\nvar1I = {(d2n,ij , d2n,kl) | the first variable in the label of (i, j) is Vkl} var2I = {(d2n,ij , d2n,kl) | the second variable in the label of (i, j) is Vkl} col1I = {(d2n,ij , d2n,i0) | i < 2n} col2I = {(d2n,ij , d2n,j0) | i < 2n} P I = \u2205 aI0 = d0,\u03b5.\nFor each Boolean circuit c, the corresponding output concept name Outc is interpreted as OutIc := {d2n,ij | i, j < 2n and c(i, j) is true}.\nTo show that CG is satisfiable w.r.t. CircCPG(\u2205,AG), it suffices to show that aI0 \u2208 CIG and I is a model of CircCPG(\u2205,AG). The former is easy: recall that CG = Rootu\u00acP u\u2203r2n.Clash. By definition of I, aI0 \u2208 (Root u \u00acP )I . Since c is not a 3-coloring, aI0 \u2208 (\u2203r2n.Clash)I . It thus remains to show that I is a model of CircCPG(\u2205,AG). Since it is easy to verify that I is a model of AG, this boils down to showing that there is no model J of AG with J <CPG I.\nAssume to the contrary that there is such a J . By Lines (1)\u2013(5) and since J is a model of AG, we have #LeafJ \u2265 22n. Since #LeafI = 22n and J <CPG I, we get Leaf\nJ = LeafI . For similar but simpler reasons, RootJ = RootI . Thus, J <CPG I implies Clash\nJ ( ClashI . By Lines (1) to (5) and since I and J are models of AG with LeafJ = LeafI and #LeafI = #LeafJ = 22n, we have\n(I) {d \u2208 \u2206I | (aI0 , d) \u2208 (r2n)I} = {d \u2208 \u2206J | (a J 0 , d) \u2208 (r2n)J } = Leaf I = LeafJ\nThus, Lines (24) to (26) and the fact that J is a model of AG ensure that (II) \u22c3\nC\u2208{R,G,B}(Leaf u \u00acElim u \u2203col1.C u \u2203col2.C)J \u2286 Clash J .\nDefine a coloring c\u2032 by setting\nc\u2032(i) = C iff d2n,i0 \u2208 CJ (C = R,G,B).\nSuppose that\n(III) (a) ElimI \u2229 LeafI = ElimJ \u2229 LeafI , (b) col1I \u2229 (LeafI \u00d7 LeafI) = col1J \u2229 (LeafJ \u00d7 LeafJ ), and (c) col2I \u2229 (LeafI \u00d7 LeafI) = col2J \u2229 (LeafJ \u00d7 LeafJ ).\nThen (II) guarantees that if (i, j) is an edge in G with c\u2032(i) = c\u2032(j), then d2n,ij \u2208 ClashJ . Since ClashJ ( ClashI , we get that\n1. if c\u2032(i) = c\u2032(j), then c(i) = c(j);\n2. there are i, j with c\u2032(i) 6= c\u2032(j), but c(i) = c(j).\nThis contradicts our initial minimality assumption on the coloring c. It thus remains to prove (III). We start with (a). Assume that\n(d) var1I \u2229 (LeafI \u00d7 LeafI) = var1J \u2229 (LeafJ \u00d7 LeafJ ) and\n(e) var2I \u2229 (LeafI \u00d7 LeafI) = var2J \u2229 (LeafJ \u00d7 LeafJ ).\nThen, Lines (12) to (16) together with (I) and the fact that TrI = TrJ implies (a). It thus remains to prove (b) to (e). We concentrate on (b) as the other cases are analogous. Take (d, d\u2032) \u2208 col1I \u2229 (LeafI \u00d7 LeafI). Then d = d2n,ij and d\u2032 = d2n,i\u2032j\u2032 for some i, j, i\u2032, j\u2032 < 2n. By Line (18), i\u2032 = i and j\u2032 = 0. By (I) and Lines (17) and (18) and since I and J agree on the interpretation of X0, . . . , Xn\u22121, Y0, . . . , Yn\u22121, there is an e \u2208 LeafFixJ such that (d2n,ij , e) \u2208 col1J , the value encoded by X0, . . . , Xn\u22121 at e in J is i, and the value encoded by Y0, . . . , Yn\u22121 at e in J is 0. Since LeafFixI = LeafFixJ , we have LeafFixJ = LeafJ . However, there is only a single element of LeafJ where X0, . . . , Xn\u22121 encodes i and Y0, . . . , Yn\u22121 encodes 0 and this is d2n,i0 = d\u2032. The converse direction is analogous. o\nCorollary 16 In ALC, satisfiability w.r.t. concept-circumscribed KBs is NExpNP-hard even if the TBox is acyclic, the ABox and preference relations are empty, and there are no fixed predicates.\nProof. The ABox AG from the reduction given in Section 4.2.1 is of the form {C0(a0)} and the circumscription pattern CPG has an empty preference relation. It thus suffices to show that there is a polynomial reduction of satisfiability w.r.t. concept-circumscribed KBs of this form to satisfiability w.r.t. concept-circumscribed KBs with an acyclic TBox, empty ABox and preference relation, and no fixed predicates.\nLet CircCP(\u2205,A) be a concept-circumscribed KB with A = {C0(a0)} and CP = (\u227a ,M, V, F ) with \u227a= \u2205, and let C be an ALC concept. Define T = {A v \u2203u.C0}, where A is a concept name that does not occur in A and C and u is a role name that does not occur in A and C. Also define CP\u2032 = (\u227a,M, V \u222a {u}, F \u222a {A}). Then C is satisfiable w.r.t. CircCP(\u2205,A) iff A u C is satisfiable w.r.t. CircCP\u2032(T , \u2205):\n\u201cIf\u201d. If A u C is satisfiable w.r.t. CircCP\u2032(T , \u2205), then there is a model I of CircCP\u2032(T , \u2205) and a d0 \u2208 (A u C)I . Thus, there is an e0 \u2208 CI0 . Modify I to obtain a new interpretation J by setting aJ0 = e0. Clearly, J is a model of A and C. To show that it is also a model of CircCP(\u2205,A), assume to the contrary that there is a model J \u2032 of A with J \u2032 <CP J . Modify J \u2032 into an interpretation I \u2032 by setting AI\u2032 = AI and uI\u2032 = \u2206I \u00d7\u2206I . It is readily checked that I \u2032 is a model of T and I \u2032 <CP\u2032 I, thus we have obtained a contradiction to the fact that I is a model of CircCP\u2032(T , \u2205).\n\u201cOnly if\u201d. If C is satisfiable w.r.t. CircCP(\u2205,A), then there is a model I of CircCP(\u2205,A) and a d0 \u2208 CI . Let J be defined as I, except that AJ = {d0} and uJ = \u2206I \u00d7\u2206I . Clearly, J is a model of T and AuC. To show that J is also a model of CircCP(T , \u2205), assume to the contrary that there is a model J \u2032 of T with J \u2032 <CP\u2032 J . Since A is fixed in CP\u2032, d0 \u2208 AI \u2032 , thus d0 \u2208 (\u2203u.C0)J \u2032 and there is an e0 \u2208 CJ \u2032\n0 . Modify J \u2032 into a new interpretation I \u2032 by setting aI\n\u2032 0 = e0. It is readily checked that I \u2032 is a model of A and I \u2032 <CP I, thus we have\nobtained a contradiction to the fact that I is a model of CircCP\u2032(\u2205,A). To get rid of fixed predicates, it suffices to apply Lemma 5. o"}, {"heading": "Appendix C. Missing Proofs in Section 5", "text": "We show that the semantic consequence problem can be reduced to instance checking w.r.t. role-fixing cKBs in ALC. We have already proved that for ALC extended with the universal role. In fact, the only remaining problem is to \u2018approximate\u2019 concepts \u2200u.C using ALC concepts that state that the extension of C contains all points within a certain, sufficiently large neighbourhood.\nTo construct such an approximation, we first introduce a local version of the notion of frame validity of concepts. A pointed R-frame is a pair (F, d) such that d \u2208 \u2206F and F is an R-frame. A concept C is valid in a pointed R-frame (F, d), in symbols (F, d) |= C, iff d \u2208 CI for every interpretation I based on F. For m \u2208 N and R a finite set of role names, \u2200mR.C denotes C if m = 0, and\n\u2200m\u22121R.C uu r\u2208R \u2200r.\u2200m\u22121R.C\nif m > 0. In what follows, we will use concepts of the form \u2200mR.C as approximations of \u2200u.C. We remind the reader of some correspondence results of modal logic. Let transA = \u00ac\u2200s.A t \u2200s.\u2200s.A and contA = \u00ac\u2200s.A t \u2200r.A. Then it is well known (Blackburn & van Benthem, 2007) and easy to prove that for every {r, s}-frame F, the following holds:\n\u2022 transA is valid in F if, and only if, sF is transitive;\n\u2022 contA is valid in F if, and only if, rF \u2286 sF.\nSay that d\u2032 \u2208 \u2206F is {r, s}-reachable from d in F if (d, d\u2032) \u2208 (rF \u222a sF)\u2217 and call d \u2208 \u2206F a root of F if every d\u2032 \u2208 \u2206F is {r, s}-reachable from d in F. If F is an {r, s}-frame with root d, then the following conditions are equivalent:\n\u2022 \u22001{r, s}.(transA u contA) is valid in (F, d);\n\u2022 sF is transitive and rF \u2286 sF.\nThese observations are used in the proof of Lemma 31 below. As before, we sometimes write concept assertions C(a) in the form a : C. Recall that the role depth rd(C) of a concept C is defined as the nesting depth of the constructors \u2203r.D and \u2200r.D, r \u2208 R, in C.\nLemma 31 Let C and D be ALC{r}-concepts not sharing any concept names and let A be a fresh concept name. Let CP = (\u2205,M, {r, s}, V ) be a circumscription pattern, where M consists of A and the concept names in C and V consists of the concept names in D. Let a be an individual name. Then the following conditions are equivalent:\n1. for all {r, s}-frames F with rF \u2286 sF and sF transitive: if F |= C, then F |= D;\n2. for all pointed {r, s}-frames (F, d):\n(F, d) |= \u22001{r, s}.(transA u contA u C) \u21d2 (F, d) |= D\n3. a is an instance of \u00ac\u22001{r, s}.(transA u contA u C) tD w.r.t. CircCP(\u2205,A), where\nA = {a : (\u00ac\u22001{r, s}.(transA u contA u C) t \u22001+max {2,rd(C)}{r, s}. u B\u2208M B)}.\nProof. Point 1 implies Point 2. Suppose Point 2 does not hold. Let (F, d) be a pointed {r, s}-frame such that (F, d) |= \u22001{r, s}.(transA u contA u C) and (F, d) 6|= D. We may assume that d is a root of F. From (F, d) |= \u22001{r, s}.(transA u contA) we obtain rF \u2286 sF and sF transitive. Therefore, from (F, d) |= \u22001{s}.C we obtain F |= C. It follows that F is a frame refuting Point 1.\nIn what follows we use, for every I and d \u2208 \u2206I , d\u2191,I to denote the set of all e \u2208 \u2206I which are {r, s}-reachable from d in at most 1 + max {2, rd(C)} steps.\nPoint 2 implies Point 3. Suppose Point 3 does not hold. Let I be a model of CircCP(\u2205,A) such that\naI \u2208 (\u22001{r, s}.(transA u contA u C) u \u00acD)I . (77)\nLet I be based on F and set d := aI . We show (F, d) |= \u22001{r, s}.(transA u contA u C) and (F, d) 6|= D. The latter is easy as it is witnessed by the interpretation I. To show the former, let J be an interpretation based on F. We show that d \u2208 (\u22001{r, s}.(transA u contA uC))J . By (77) and since I is a model of CircCP(\u2205,A), aI \u2208 (\u22001+max {2,rd(C)}{r, s}. u\nB\u2208M B)I . It\nfollows immediately that BI = d\u2191,I , (78)\nfor all B \u2208M . We now distinguish two cases:\n\u2022 BJ \u2287 d\u2191,I , for all B \u2208M . Since I and J are based on the same frame and all concept names in contA, transA, and C are in M , the truth of \u22001{r, s}.(transA u contA uC) at d depends on the truth value of concept names from M in d\u2191,I only. From (78) we obtain BI \u2229 d\u2191,I = BJ \u2229 d\u2191,I , for all B \u2208M . Hence, by (77), d \u2208 (\u22001{r, s}.(transA u contA u C))J , as required.\n\u2022 BJ 6\u2287 d\u2191,I , for at least one B \u2208M .\nLet J \u2032 be the modification of J where BJ \u2032 = BJ \u2229d\u2191,I , for B \u2208M . By (78), J \u2032 <CP I. If d \u2208 (\u00ac\u22001{r, s}.(transA u contA u C))J \u2032 , then J \u2032 is a model of A and we have a contradiction to the fact that I is a model of CircCP(\u2205,A). Thus, d \u2208 (\u22001{r, s}.(transAu contAuC))J \u2032 . Since, again, the truth of \u22001{r, s}.(transAu contAuC) at d depends on the truth value of B \u2208M on d\u2191,I only, we have d \u2208 (\u22001{r, s}.(transA u contA u C))J , as required.\nPoint 3 implies Point 1. Suppose Point 1 does not hold. Consider a frame F such that sF is transitive, rF \u2286 sF, F |= C, and F 6|= D. It follows that F |= transA u contA. Let I be an interpretation based on F such that d \u2208 (\u00acD)I . We may assume that d is a root of F. We may also assume that BI = d\u2191,I for all B \u2208 M (since no such B occurs in D) and aI = d. Then aI \u2208 (\u22001{r, s}.(transAucontAuC)u\u00acD))I and I is a model of A. It remains to show that there does not exist an I \u2032 <CP I such that\naI \u2032 \u2208 (\u00ac\u22001{r, s}.(transA u contA u C) t \u22001+max {2,rd(C)}{r, s}. u\nB\u2208M B)I \u2032 .\nThis is straightforward: from (F, d) |= \u22001{r, s}.C, we obtain that there does not exist any I \u2032 such that d \u2208 (\u00ac\u22001{r, s}.C)I\u2032 and clearly there does not exist any B \u2208M with BI\u2032 \u2282 BI such that d \u2208 (\u22001+max {2,rd(C)}{r, s}.B)I\u2032 . o\nWe are in a position now to prove the reduction for ALC.\nTheorem 22 The logical consequence problem of MSO(r) is effectively reducible to the instance problem w.r.t. role-fixing cKBs formulated in ALC. This even holds when the TBox and preference relation are empty.\nProof. By Theorem 20, the logical consequence problem of MSO(r) is effectively reducible to the modal consequence problem for ALC{r}-concepts. Hence, it suffices to reduce the modal consequence problem for ALC{r}-concepts. Let ALC{r}-concepts C and D be given. We may assume that C and D have no concept names in common (if they have, then replace every concept name B in D by a new concept name B\u2032 and denote the resulting concept by D\u2032; as noted above, C D iff C D\u2032.) Let CP = (\u227a,M, {s, r}, V ) where \u227a = \u2205, M consists of A and all concept names in C, and V consists of all concept names in D. Let\nA = {a : (\u00ac\u22001{r, s}.(transA u contA u C) t \u22001+max {2,rd(C)}{r, s}. u B\u2208M B)}\nand C0 = \u00ac\u22001{r, s}.(transA u contA u C) t D. By the equivalence of Point 1 and Point 3 in Lemma 31, CircCP(\u2205,A) |= C0(a) if, and only if, for all frames F with rF \u2286 sF and sF transitive, from F |= C follows F |= D. As C and D do not contain s,\nCircCP(\u2205,A) |= C0(a) \u21d4 C D.\no"}], "references": [{"title": "A road-map on complexity for hybrid logics", "author": ["C. Areces", "P. Blackburn", "M. Marx"], "venue": "In Proceedings of the Eighth Annual Conference of the EACSL (CSL99),", "citeRegEx": "Areces et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Areces et al\\.", "year": 1999}, {"title": "The computational complexity of hybrid temporal logics", "author": ["C. Areces", "P. Blackburn", "M. Marx"], "venue": "Logic Journal of the IGPL,", "citeRegEx": "Areces et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Areces et al\\.", "year": 2000}, {"title": "Pushing the EL envelope", "author": ["F. Baader", "S. Brandt", "C. Lutz"], "venue": "Proceedings of the Nineteenth International Joint Conference on Artificial Intelligence", "citeRegEx": "Baader et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Baader et al\\.", "year": 2005}, {"title": "Integrating description logics and action formalisms for reasoning about web services. LTCSreport LTCS-05-02, Chair for Automata Theory, Institute for Theoretical Computer Science, Dresden University of Technology, Germany. See http://lat.inf.tudresden.de/research/reports.html", "author": ["F. Baader", "M. Milicic", "C. Lutz", "U. Sattler", "F. Wolter"], "venue": null, "citeRegEx": "Baader et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Baader et al\\.", "year": 2005}, {"title": "Embedding defaults into terminological knowledge representation formalisms", "author": ["F. Baader", "B. Hollunder"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "Baader and Hollunder,? \\Q1995\\E", "shortCiteRegEx": "Baader and Hollunder", "year": 1995}, {"title": "Priorities on defaults with prerequisites, and their application in treating specificity in terminological default logic", "author": ["F. Baader", "B. Hollunder"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "Baader and Hollunder,? \\Q1995\\E", "shortCiteRegEx": "Baader and Hollunder", "year": 1995}, {"title": "The Description Logic Handbook: Theory, implementation and applications", "author": ["F. Baader", "D.L. McGuiness", "D. Nardi", "P. Patel-Schneider"], "venue": null, "citeRegEx": "Baader et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Baader et al\\.", "year": 2003}, {"title": "Tableau algorithms for description logics", "author": ["F. Baader", "U. Sattler"], "venue": "Proceedings of the International Conference on Automated Reasoning with Tableaux and Related Methods (Tableaux2000),", "citeRegEx": "Baader and Sattler,? \\Q2000\\E", "shortCiteRegEx": "Baader and Sattler", "year": 2000}, {"title": "The undecidability of the dominoe problem", "author": ["R. Berger"], "venue": "Memoirs of the American Mathematical Society, 66.", "citeRegEx": "Berger,? 1966", "shortCiteRegEx": "Berger", "year": 1966}, {"title": "Modal logic: a semantic perspective", "author": ["P. Blackburn", "J. van Benthem"], "venue": "In Handbook of Modal Logic. Elsevier", "citeRegEx": "Blackburn and Benthem,? \\Q2007\\E", "shortCiteRegEx": "Blackburn and Benthem", "year": 2007}, {"title": "Defeasible inclusions in low-complexity DLs: Preliminary notes", "author": ["P. Bonatti", "M. Faella", "L. Sauro"], "venue": "In Proceedings of the 21st International Joint Conference on Artificial Intelligence", "citeRegEx": "Bonatti et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Bonatti et al\\.", "year": 2009}, {"title": "Expressive non-monotonic description logics based on circumscription", "author": ["P. Bonatti", "C. Lutz", "F. Wolter"], "venue": "In Proceedings of the Tenth International Conference on Principles of Knowledge Representation and Reasoning", "citeRegEx": "Bonatti et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Bonatti et al\\.", "year": 2006}, {"title": "Querying disjunctive databases through nonmonotonic logics", "author": ["P.A. Bonatti", "T. Eiter"], "venue": "Theoretical Computer Science,", "citeRegEx": "Bonatti and Eiter,? \\Q1996\\E", "shortCiteRegEx": "Bonatti and Eiter", "year": 1996}, {"title": "Logics for authorization and security", "author": ["P.A. Bonatti", "P. Samarati"], "venue": "In Logics for Emerging Applications of Databases,", "citeRegEx": "Bonatti and Samarati,? \\Q2003\\E", "shortCiteRegEx": "Bonatti and Samarati", "year": 2003}, {"title": "On the relative expressiveness of description logics and predicate logics", "author": ["A. Borgida"], "venue": "Artificial Intelligence, 82 (1 - 2), 353\u2013367.", "citeRegEx": "Borgida,? 1996", "shortCiteRegEx": "Borgida", "year": 1996}, {"title": "The logic of inheritance in frame systems", "author": ["G. Brewka"], "venue": "Proceedings of the 10th International Joint Conference on Artificial Intelligence (IJCAI87), pp. 483\u2013488. Morgan Kaufmann.", "citeRegEx": "Brewka,? 1987", "shortCiteRegEx": "Brewka", "year": 1987}, {"title": "Adding priorities and specificity to default logic", "author": ["G. Brewka"], "venue": "In Proceedings of Logics in Artificial Intelligence (JELIA94),", "citeRegEx": "Brewka,? \\Q1994\\E", "shortCiteRegEx": "Brewka", "year": 1994}, {"title": "Closed world reasoning in hybrid systems", "author": ["M. Cadoli", "F. Donini", "M. Schaerf"], "venue": "In Proceedings of the 6th International Symposium on Methodologies for Intelligent Systems", "citeRegEx": "Cadoli et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Cadoli et al\\.", "year": 1990}, {"title": "Tractable reasoning and efficient query answering in description logics: The DL-lite family", "author": ["D. Calvanese", "G.D. Giacomo", "D. Lembo", "M. Lenzerini", "R. Rosati"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "Calvanese et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Calvanese et al\\.", "year": 2007}, {"title": "The systematized nomenclature of human and veterinary medicine", "author": ["R. Cote", "D. Rothwell", "J. Palotay", "R. Beckett", "L. Brochu"], "venue": "Tech. rep., SNOMED International,", "citeRegEx": "Cote et al\\.,? \\Q1993\\E", "shortCiteRegEx": "Cote et al\\.", "year": 1993}, {"title": "Eliminating the fixed predicates from circumscription", "author": ["J. de Kleer", "K. Konolige"], "venue": "Artificial Intelligence,", "citeRegEx": "Kleer and Konolige,? \\Q1989\\E", "shortCiteRegEx": "Kleer and Konolige", "year": 1989}, {"title": "An epistemic operator for description logics", "author": ["F.M. Donini", "M. Lenzerini", "D. Nardi", "W. Nutt", "A. Schaerf"], "venue": "Artificial Intelligence,", "citeRegEx": "Donini et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Donini et al\\.", "year": 1998}, {"title": "Autoepistemic description logics", "author": ["F.M. Donini", "D. Nardi", "R. Rosati"], "venue": "In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence", "citeRegEx": "Donini et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Donini et al\\.", "year": 1997}, {"title": "Description logics of minimal knowledge and negation as failure", "author": ["F.M. Donini", "D. Nardi", "R. Rosati"], "venue": "ACM Transactions on Computational Logic,", "citeRegEx": "Donini et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Donini et al\\.", "year": 2002}, {"title": "Combining answer set programming with description logics for the semantic web", "author": ["T. Eiter", "T. Lukasiewicz", "R. Schindlauer", "H. Tompits"], "venue": "In Proceedings of the Ninth International Conference on the Principles of Knowledge Representation and Reasoning (KR", "citeRegEx": "Eiter et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Eiter et al\\.", "year": 2004}, {"title": "Reasoning about typicality in preferential description logics", "author": ["L. Giordano", "V. Gliozzi", "N. Olivetti", "G.L. Pozzato"], "venue": "In Proceedings of Logics in Artificial Intelligence (JELIA08),", "citeRegEx": "Giordano et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Giordano et al\\.", "year": 2008}, {"title": "Mathematical modal logic: A view of its evolution", "author": ["R. Goldblatt"], "venue": "Journal of Applied Logic, 1, 309\u2013392.", "citeRegEx": "Goldblatt,? 2003", "shortCiteRegEx": "Goldblatt", "year": 2003}, {"title": "Two-Variable Logic with Counting is Decidable", "author": ["E. Gr\u00e4del", "M. Otto", "E. Rosen"], "venue": "In Proceedings of Twelfth IEEE Symposium on Logic in Computer Science", "citeRegEx": "Gr\u00e4del et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Gr\u00e4del et al\\.", "year": 1997}, {"title": "Defeasible inference with circumscriptive OWL ontologies", "author": ["S. Grimm", "P. Hitzler"], "venue": "In Proceedings of the Workshop on Advancing Reasoning on the Web: Scalability and Commonsense,", "citeRegEx": "Grimm and Hitzler,? \\Q2008\\E", "shortCiteRegEx": "Grimm and Hitzler", "year": 2008}, {"title": "Practical reasoning for very expressive description logics", "author": ["I. Horrocks", "U. Sattler", "S. Tobies"], "venue": "Logic Journal of the IGPL,", "citeRegEx": "Horrocks et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Horrocks et al\\.", "year": 2000}, {"title": "Some direct theories of nonmonotonoc inheritance", "author": ["J.F. Horty"], "venue": "Handbook of Logic in Artificial Intelligence and Logic Programming-Nonmonotonic Reasoning and Uncertain Reasoning(Volume 3), pp. 111\u2013187. Clarendon Press.", "citeRegEx": "Horty,? 1994", "shortCiteRegEx": "Horty", "year": 1994}, {"title": "On the intertranslatability of non-monotonic logics", "author": ["T. Janhunen"], "venue": "Annals of Mathematics in Artificial Intelligence, 27 (1-4), 79\u2013128.", "citeRegEx": "Janhunen,? 1999", "shortCiteRegEx": "Janhunen", "year": 1999}, {"title": "A policy language for a pervasive computing environment", "author": ["L. Kagal", "T. Finin", "A. Joshi"], "venue": "In Fourth IEEE International Workshop on Policies for Distributed Systems and Networks", "citeRegEx": "Kagal et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Kagal et al\\.", "year": 2003}, {"title": "A well-founded semantics for hybrid MKNF knowledge bases", "author": ["M. Knorr", "J.J. Alferes", "P. Hitzler"], "venue": "In Proceedings of the 2007 International Workshop on Description Logics (DL2007),", "citeRegEx": "Knorr et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Knorr et al\\.", "year": 2007}, {"title": "Semantic modularity and module extraction in description logics", "author": ["B. Konev", "C. Lutz", "D. Walther", "F. Wolter"], "venue": "In Proceedings of 18th European Conference on Artificial Intelligence (ECAI),", "citeRegEx": "Konev et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Konev et al\\.", "year": 2008}, {"title": "A default extension to description logics for use in an intelligent search engine", "author": ["P. Lambrix", "N. Shahmehri", "N. Wahlloef"], "venue": "Proceedings of the Thirty-First Annual Hawaii International Conference on System Sciences (HICSS98)-Volume", "citeRegEx": "Lambrix et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Lambrix et al\\.", "year": 1998}, {"title": "Computing circumscription", "author": ["V. Lifschitz"], "venue": "Proceedings of the Ninth International Joint Conference on Artificial Intelligence (IJCAI85), pp. 121\u2013127. Morgan Kaufmann.", "citeRegEx": "Lifschitz,? 1985", "shortCiteRegEx": "Lifschitz", "year": 1985}, {"title": "Circumscription", "author": ["V. Lifschitz"], "venue": "The Handbook of Logic in AI and Logic Programming 3, pp. 298\u2013352. Oxford University Press.", "citeRegEx": "Lifschitz,? 1993", "shortCiteRegEx": "Lifschitz", "year": 1993}, {"title": "Nested abnormality theories", "author": ["V. Lifschitz"], "venue": "Artificial Intelligence, 74 (2), 351\u2013365.", "citeRegEx": "Lifschitz,? 1995", "shortCiteRegEx": "Lifschitz", "year": 1995}, {"title": "Circumscription: a form of nonmonotonic reasoning", "author": ["J. McCarthy"], "venue": "Artificial Intelligence, 13, 27\u201339.", "citeRegEx": "McCarthy,? 1980", "shortCiteRegEx": "McCarthy", "year": 1980}, {"title": "Applications of circumscription in formalizing common sense knowledge", "author": ["J. McCarthy"], "venue": "Artificial Intelligence, 28, 89\u2013116.", "citeRegEx": "McCarthy,? 1986", "shortCiteRegEx": "McCarthy", "year": 1986}, {"title": "A framework for representating knowledge", "author": ["M. Minsky"], "venue": "Winston, P. H. (Ed.), The Psychology of Computer Vision, pp. 211\u2013277. McGraw-Hill.", "citeRegEx": "Minsky,? 1975", "shortCiteRegEx": "Minsky", "year": 1975}, {"title": "Semantical considerations on nonmonotonic logics", "author": ["R.C. Moore"], "venue": "Artificial Intelligence, 25, 75\u201394.", "citeRegEx": "Moore,? 1985", "shortCiteRegEx": "Moore", "year": 1985}, {"title": "A Faithful Integration of Description Logics with Logic Programming", "author": ["B. Motik", "R. Rosati"], "venue": "In Proceedings of the Twentieth International Joint Conference on Artificial Intelligence", "citeRegEx": "Motik and Rosati,? \\Q2007\\E", "shortCiteRegEx": "Motik and Rosati", "year": 2007}, {"title": "Complexity results for first-order twovariable logic with counting", "author": ["L. Pacholski", "W. Szwast", "L. Tendera"], "venue": "SIAM Journal on Computing,", "citeRegEx": "Pacholski et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Pacholski et al\\.", "year": 2000}, {"title": "A terminological logic with defaults: A definition and an application", "author": ["L. Padgham", "T. Zhang"], "venue": "In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence", "citeRegEx": "Padgham and Zhang,? \\Q1993\\E", "shortCiteRegEx": "Padgham and Zhang", "year": 1993}, {"title": "Complexity of the two-variable fragment with counting quantifiers", "author": ["I. Pratt-Hartmann"], "venue": "Journal of Logic, Language, and Information, 14 (3), 369\u2013395.", "citeRegEx": "Pratt.Hartmann,? 2005", "shortCiteRegEx": "Pratt.Hartmann", "year": 2005}, {"title": "Semantic memory", "author": ["M.R. Quillian"], "venue": "Semantic Information Processing, pp. 227\u2013270. MIT Press.", "citeRegEx": "Quillian,? 1968", "shortCiteRegEx": "Quillian", "year": 1968}, {"title": "Defaults, context, and knowledge: Alternatives for OWL-indexed knowledge bases", "author": ["A. Rector"], "venue": "Proceedings of the Pacific Symposium on Biocomputing (PSB04), pp. 226\u2013237. World Scientific.", "citeRegEx": "Rector,? 2004", "shortCiteRegEx": "Rector", "year": 2004}, {"title": "Experience building a large, re-usable medical ontology using a description logic with transitivity and concept inclusions", "author": ["A. Rector", "I. Horrocks"], "venue": "In Proceedings of the Workshop on Ontological Engineering,", "citeRegEx": "Rector and Horrocks,? \\Q1997\\E", "shortCiteRegEx": "Rector and Horrocks", "year": 1997}, {"title": "A logic for default reasoning", "author": ["R. Reiter"], "venue": "Artificial Intelligence, 13, 81\u2013132.", "citeRegEx": "Reiter,? 1980", "shortCiteRegEx": "Reiter", "year": 1980}, {"title": "Using OWL to model biological knowledge", "author": ["R. Stevens", "M.E. Aranguren", "K. Wolstencroft", "U. Sattler", "N. Drummond", "M. Horridge", "A. Rector"], "venue": "International Journal of Man-Machine Studies,", "citeRegEx": "Stevens et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Stevens et al\\.", "year": 2005}, {"title": "Complete problems involving Boolean labelled structures and projection transactions", "author": ["I.A. Stewart"], "venue": "Journal of Logic and Computation, 1 (6), 861\u2013882.", "citeRegEx": "Stewart,? 1991", "shortCiteRegEx": "Stewart", "year": 1991}, {"title": "Default inheritance reasoning in hybrid KL-ONE-style logics", "author": ["U. Straccia"], "venue": "In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence", "citeRegEx": "Straccia,? \\Q1993\\E", "shortCiteRegEx": "Straccia", "year": 1993}, {"title": "The logical consequence relation of propositional tense logic", "author": ["S. Thomason"], "venue": "Zeitschrift f\u00fcr Mathematische Logik und Grundlagen der Mathematik, 21, 29\u201340.", "citeRegEx": "Thomason,? 1975a", "shortCiteRegEx": "Thomason", "year": 1975}, {"title": "Reduction of second-order logic to modal logic", "author": ["S. Thomason"], "venue": "Zeitschrift f\u00fcr Mathematische Logik und Grundlagen der Mathematik, 21, 107\u2013114.", "citeRegEx": "Thomason,? 1975b", "shortCiteRegEx": "Thomason", "year": 1975}, {"title": "The complexity of reasoning with cardinality restrictions and nominals in expressive description logics", "author": ["S. Tobies"], "venue": "Journal of Artificial Intelligence Research, 12, 199\u2013217.", "citeRegEx": "Tobies,? 2000", "shortCiteRegEx": "Tobies", "year": 2000}, {"title": "Semantic web languages for policy representation and reasoning: A comparison of KAoS, Rei, and Ponder", "author": ["G. Tonti", "J.M. Bradshaw", "R. Jeffers", "R. Montanari", "N. Suri", "A. Uszok"], "venue": "In Proceedings of the Second International Semantic Web Conference (ISWC03),", "citeRegEx": "Tonti et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Tonti et al\\.", "year": 2003}, {"title": "KAoS policy management for semantic web services", "author": ["A. Uszok", "J.M. Bradshaw", "M. Johnson", "R. Jeffers", "A. Tate", "J. Dalton", "S. Aitken"], "venue": "IEEE Intelligent Systems,", "citeRegEx": "Uszok et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Uszok et al\\.", "year": 2004}, {"title": "Modal decision problems", "author": ["F. Wolter", "M. Zakharyaschev"], "venue": "In Handbook of Modal Logic. Elsevier", "citeRegEx": "Wolter and Zakharyaschev,? \\Q2007\\E", "shortCiteRegEx": "Wolter and Zakharyaschev", "year": 2007}], "referenceMentions": [{"referenceID": 47, "context": "Early knowledge representation (KR) formalisms such as semantic networks and frames included a wealth of features in order to provide as much expressive power as possible (Quillian, 1968; Minsky, 1975).", "startOffset": 171, "endOffset": 201}, {"referenceID": 41, "context": "Early knowledge representation (KR) formalisms such as semantic networks and frames included a wealth of features in order to provide as much expressive power as possible (Quillian, 1968; Minsky, 1975).", "startOffset": 171, "endOffset": 201}, {"referenceID": 40, "context": ", properties transfer to all instances of a class by default, but can be explicitly overridden in special cases (McCarthy, 1986; Horty, 1994; Brewka, 1994; Baader & Hollunder, 1995b).", "startOffset": 112, "endOffset": 182}, {"referenceID": 30, "context": ", properties transfer to all instances of a class by default, but can be explicitly overridden in special cases (McCarthy, 1986; Horty, 1994; Brewka, 1994; Baader & Hollunder, 1995b).", "startOffset": 112, "endOffset": 182}, {"referenceID": 16, "context": ", properties transfer to all instances of a class by default, but can be explicitly overridden in special cases (McCarthy, 1986; Horty, 1994; Brewka, 1994; Baader & Hollunder, 1995b).", "startOffset": 112, "endOffset": 182}, {"referenceID": 39, "context": "In this paper, we study circumscription (McCarthy, 1980) as an alternative approach to defining nonmonotonic DLs.", "startOffset": 40, "endOffset": 56}, {"referenceID": 40, "context": "Circumscription patterns can require other predicates to be fixed during minimization, or allow them to vary freely (McCarthy, 1986).", "startOffset": 116, "endOffset": 132}, {"referenceID": 41, "context": "ical ontologies such as GALEN (Rector & Horrocks, 1997) and SNOMED (Cote, Rothwell, Palotay, Beckett, & Brochu, 1993). As argued for example by Rector (2004) and Stevens et al.", "startOffset": 31, "endOffset": 158}, {"referenceID": 41, "context": "ical ontologies such as GALEN (Rector & Horrocks, 1997) and SNOMED (Cote, Rothwell, Palotay, Beckett, & Brochu, 1993). As argued for example by Rector (2004) and Stevens et al. (2005), it is important for such ontologies to represent exceptions of the form \u201cin humans, the heart is usually located on the left-hand side of the body; in humans with situs inversus, the heart is located on the right-hand side of the body\u201d.", "startOffset": 31, "endOffset": 184}, {"referenceID": 14, "context": ", properties transfer to all instances of a class by default, but can be explicitly overridden in special cases (McCarthy, 1986; Horty, 1994; Brewka, 1994; Baader & Hollunder, 1995b). The second application is the use of DLs as security policy languages (Uszok, Bradshaw, Johnson, Jeffers, Tate, Dalton, & Aitken, 2004; Kagal, Finin, & Joshi, 2003; Tonti, Bradshaw, Jeffers, Montanari, Suri, & Uszok, 2003). In formalizing access control policies, one must deal with the situation where a given request is neither explicitly allowed nor explicitly denied. Then, a default decision has to be taken such as in open and closed policies, where authorizations are respectively granted or denied by default (Bonatti & Samarati, 2003). Moreover, policies are often formulated incrementally, i.e., start with general authorizations for large classes of subjects, objects, and actions, and then progressively refine them by introducing exceptions for specific subclasses. This approach is clearly an incarnation of defeasible inheritance. While the above applications illustrate that integrating nonmonotonic features into DLs is worthwhile, the actual engineering of a computationally well-behaved nonmonotonic DL that provides sufficient expressive power turns out to be a non-trivial task. In particular, combinations of DLs and nonmonotonic logics typically involve subtle interactions between the two component logics and this easily leads to undecidability. It appears that there is no one optimal way to circumnavigate these difficulties, and thus many different combinations of DLs and nonmonotonic logics have been proposed in the literature, each with individual strengths and limitations (we provide a survey in Section 7). However, there is a striking gap: almost all existing approaches are based on default logic and autoepistemic logic, while circumscription has received very little attention in connection with DLs, and the computational properties of DLs with circumscription have been almost completely unknown. This is all the more surprising since circumscription is known to be one of the weakest forms of nonmonotonic reasoning\u2014see the work by Janhunen (1999) for one of the most recent surveys, and the paper by Bonatti and Eiter (1996) for an expressiveness analysis in terms of queries.", "startOffset": 142, "endOffset": 2174}, {"referenceID": 12, "context": "This is all the more surprising since circumscription is known to be one of the weakest forms of nonmonotonic reasoning\u2014see the work by Janhunen (1999) for one of the most recent surveys, and the paper by Bonatti and Eiter (1996) for an expressiveness analysis in terms of queries.", "startOffset": 205, "endOffset": 230}, {"referenceID": 12, "context": "This is all the more surprising since circumscription is known to be one of the weakest forms of nonmonotonic reasoning\u2014see the work by Janhunen (1999) for one of the most recent surveys, and the paper by Bonatti and Eiter (1996) for an expressiveness analysis in terms of queries. Therefore, it is a natural idea to use circumscription for defining a computationally well-behaved, yet expressive DL with nonmonotonic features. In this paper, we study circumscription (McCarthy, 1980) as an alternative approach to defining nonmonotonic DLs. In particular, we define a family of DLs with circumscription that enable a natural modelling of defeasible inheritance. Our general approach is to generalize standard DL knowledge bases to circumscribed knowledge bases (cKBs) which, additionally to a TBox for representing terminological knowledge and an ABox for representing knowledge about individuals, are equipped with a circumscription pattern. This pattern lists predicates (i.e., concept and role names) to be minimized in the sense that, in all admitted models of the cKB, the extension of the listed predicates has to be minimal w.r.t. set inclusion. Following McCarthy (1986), the minimized predicates can be used as \u201cabnormality predicates\u201d that identify instances which are not typical for their class.", "startOffset": 205, "endOffset": 1180}, {"referenceID": 30, "context": "It is well-known that defeasible inheritance with priority cannot be modularly encoded with pure default or autoepistemic logic (Horty, 1994), and workarounds such as the explicit listing of exceptions lead to serious maintainability problems.", "startOffset": 128, "endOffset": 141}, {"referenceID": 50, "context": "This goes back to reasoning in first-order default logic (Reiter, 1980) and autoepistemic logic (Moore, 1985), which also involve tricky technical issues related to the denotation of individuals.", "startOffset": 57, "endOffset": 71}, {"referenceID": 42, "context": "This goes back to reasoning in first-order default logic (Reiter, 1980) and autoepistemic logic (Moore, 1985), which also involve tricky technical issues related to the denotation of individuals.", "startOffset": 96, "endOffset": 109}, {"referenceID": 4, "context": "As argued by Baader and Hollunder (1995b), such an approach is well-suited to ensure a smooth interplay between defeasible inheritance and DL subsumption, and thus we prefer it over traditional prioritized circumscription.", "startOffset": 13, "endOffset": 42}, {"referenceID": 40, "context": "Circumscription is a logical approach suitable for modelling what normally or typically holds, and thus admits the modeling of defeasible inheritance (McCarthy, 1986; Lifschitz, 1993).", "startOffset": 150, "endOffset": 183}, {"referenceID": 37, "context": "Circumscription is a logical approach suitable for modelling what normally or typically holds, and thus admits the modeling of defeasible inheritance (McCarthy, 1986; Lifschitz, 1993).", "startOffset": 150, "endOffset": 183}, {"referenceID": 40, "context": "It has been extensively argued (McCarthy, 1986; Horty, 1994; Brewka, 1994; Baader & Hollunder, 1995b) that there is an interplay between subsumption and abnormality predicates that should be addressed in nonmonotonic DLs.", "startOffset": 31, "endOffset": 101}, {"referenceID": 30, "context": "It has been extensively argued (McCarthy, 1986; Horty, 1994; Brewka, 1994; Baader & Hollunder, 1995b) that there is an interplay between subsumption and abnormality predicates that should be addressed in nonmonotonic DLs.", "startOffset": 31, "endOffset": 101}, {"referenceID": 16, "context": "It has been extensively argued (McCarthy, 1986; Horty, 1994; Brewka, 1994; Baader & Hollunder, 1995b) that there is an interplay between subsumption and abnormality predicates that should be addressed in nonmonotonic DLs.", "startOffset": 31, "endOffset": 101}, {"referenceID": 40, "context": "Such effects are well-known also from the propositional/first-order case and indeed, circumscription has soon after its introduction been extended with priorities to address issues of specificity (McCarthy, 1986).", "startOffset": 196, "endOffset": 212}, {"referenceID": 40, "context": "It is more general than standard prioritized circumscription, which assumes a total ordering (McCarthy, 1986; Lifschitz, 1985), and a special case of nested circumscription (Lifschitz, 1995).", "startOffset": 93, "endOffset": 126}, {"referenceID": 36, "context": "It is more general than standard prioritized circumscription, which assumes a total ordering (McCarthy, 1986; Lifschitz, 1985), and a special case of nested circumscription (Lifschitz, 1995).", "startOffset": 93, "endOffset": 126}, {"referenceID": 38, "context": "It is more general than standard prioritized circumscription, which assumes a total ordering (McCarthy, 1986; Lifschitz, 1985), and a special case of nested circumscription (Lifschitz, 1995).", "startOffset": 173, "endOffset": 190}, {"referenceID": 15, "context": "ordering priorities on default rules, as proposed by Brewka (1994). It is more general than standard prioritized circumscription, which assumes a total ordering (McCarthy, 1986; Lifschitz, 1985), and a special case of nested circumscription (Lifschitz, 1995).", "startOffset": 53, "endOffset": 67}, {"referenceID": 6, "context": "Ding & Wu, 2007) while the former is ExpTime-complete (Baader et al., 2003).", "startOffset": 54, "endOffset": 75}, {"referenceID": 24, "context": "For readers uninitiated to oracle complexity classes, we recall that NExp \u2286 NP \u2286 NExp, and that NP is believed to be much less powerful than NExp, see for example the work by Eiter et al. (2004). To prove the NP upper bound, we first introduce counting formulas as a common generalization of TBoxes and ABoxes.", "startOffset": 175, "endOffset": 195}, {"referenceID": 46, "context": "A matching upper bound for the DLs ALCIO and ALCQO is obtained from the facts that (i) there is a polynomial translation of counting formulas formulated in these languages into C2, the two-variable fragment of first-order logic extended with counting quantifiers (Gr\u00e4del, Otto, & Rosen, 1997; Pacholski, Szwast, & Tendera, 2000), and (ii) satisfiability in C2 is in NExp even if the numbers in counting quantifiers are coded in binary (Pratt-Hartmann, 2005).", "startOffset": 435, "endOffset": 457}, {"referenceID": 55, "context": "It follows from results by Tobies (2000) that, in ALC, satisfiability of counting formulas is NExp-hard.", "startOffset": 27, "endOffset": 41}, {"referenceID": 51, "context": "As shown by Stewart (1991), co-CERT3COL is complete for NP.", "startOffset": 12, "endOffset": 27}, {"referenceID": 14, "context": "given by Borgida (1996) and take a cKB CircCP(T ,A) with CP = (\u227a,M, F, V ), \u227a = V = \u2205, M = {A}, and F = {r}.", "startOffset": 9, "endOffset": 24}, {"referenceID": 53, "context": "the works by Thomason (1975b, 1975a) and the survey articles by Wolter et al. (2007) and Goldblatt (2003) for details.", "startOffset": 13, "endOffset": 85}, {"referenceID": 26, "context": "(2007) and Goldblatt (2003) for details.", "startOffset": 11, "endOffset": 28}, {"referenceID": 8, "context": "The proof is by a reduction of the N\u00d7N-tiling problem (Berger, 1966).", "startOffset": 54, "endOffset": 68}, {"referenceID": 15, "context": "In the work by Brewka (1987), a frame system is given a nonmonotonic semantics based on circumscription.", "startOffset": 15, "endOffset": 29}, {"referenceID": 15, "context": "In the work by Brewka (1987), a frame system is given a nonmonotonic semantics based on circumscription. The focus is on showing the appropriateness of the proposed semantics, and the decidability and complexity of reasoning is not analyzed. Cadoli et al. (1990), apply circumscription to a DL", "startOffset": 15, "endOffset": 263}, {"referenceID": 15, "context": "Ref DL NM features Complexity Specificity (Brewka, 1987) frame lang.", "startOffset": 42, "endOffset": 56}, {"referenceID": 53, "context": "(Straccia, 1993) ALC prioritized default logic decidable Y", "startOffset": 0, "endOffset": 16}, {"referenceID": 22, "context": "(Donini et al., 1997) any decidable DL MKNF with restrictions depends on DL N", "startOffset": 0, "endOffset": 21}, {"referenceID": 23, "context": "(Donini et al., 2002) ALC MKNF with restrictions in 3-ExpTime N", "startOffset": 0, "endOffset": 21}, {"referenceID": 30, "context": "In another early approach by Padgham and Zhang (1993), a nonmonotonic DL is obtained by an adaptation of the inheritance networks approach (Horty, 1994) where the underlying DL is essentially AL extended with concrete data values.", "startOffset": 139, "endOffset": 152}, {"referenceID": 50, "context": "We now turn to approaches based on default logic (Reiter, 1980).", "startOffset": 49, "endOffset": 63}, {"referenceID": 40, "context": "In another early approach by Padgham and Zhang (1993), a nonmonotonic DL is obtained by an adaptation of the inheritance networks approach (Horty, 1994) where the underlying DL is essentially AL extended with concrete data values.", "startOffset": 29, "endOffset": 54}, {"referenceID": 23, "context": "A recent approach that is similar in spirit to circumscription has been taken by Giordano et al. (2008). The authors extend ALC with a modal operator T representing typicality, and maximize T \u2019s extension to achieve nonmonotonic inferences.", "startOffset": 81, "endOffset": 104}, {"referenceID": 4, "context": "The nonmonotonic DLs by Baader and Hollunder (1995a, 1995b), Straccia (1993), and Lambrix et al.", "startOffset": 24, "endOffset": 77}, {"referenceID": 4, "context": "The nonmonotonic DLs by Baader and Hollunder (1995a, 1995b), Straccia (1993), and Lambrix et al. (1998) share a common restriction: default rules can be applied to an individual only if it has a name, that is, if it is denoted by an individual constant that occurs explicitly in the knowledge base.", "startOffset": 24, "endOffset": 104}, {"referenceID": 21, "context": "In the first paper mentioned above (Donini et al., 1998), decidability results apply only to monotonic knowledge bases4 as the autoepistemic operator can be used in a nonmonotonic fashion only in queries.", "startOffset": 35, "endOffset": 56}, {"referenceID": 22, "context": "In the former paper (Donini et al., 1997), the underlying monotonic fragment can be any description logic with a decidable instance checking problem.", "startOffset": 20, "endOffset": 41}, {"referenceID": 24, "context": "Some approaches (Eiter et al., 2004) use a loosely coupled integration of logic programs and DLs, where the interpretations of the DL component are not restricted while the logic program variables range only over the named DL individuals.", "startOffset": 16, "endOffset": 36}, {"referenceID": 21, "context": "Another line of nonmonotonic DLs (Donini et al., 1998, 1997, 2002) is based on first-order autoepistemic logics whose interpretation domains are restricted to a fixed and denumerable set of constants. The use of a unique domain resolves several issues related to quantification in modal logics (such as whether the Barcan formula should hold, and whether different worlds of the same Kripke structure should be allowed to have different domains). It also avoids the asymmetry of the approaches based on default logic because, by definition, all individuals have a name. The other side of the coin is that domains with finite or varying cardinality and knowledge bases that do not satisfy the unique name assumption can only be dealt with using rather technical encodings (such as an explicit axiomatization of the finite domain represented by a concept name D). In the first paper mentioned above (Donini et al., 1998), decidability results apply only to monotonic knowledge bases4 as the autoepistemic operator can be used in a nonmonotonic fashion only in queries. This restriction has been lifted in the subsequent publications. They make use of the logic of minimal knowledge and negation as failure (MKNF), which is equipped with two (auto)epistemic operators \u201cK\u201d and \u201cA\u201d (Donini et al., 1997, 2002). In the former paper (Donini et al., 1997), the underlying monotonic fragment can be any description logic with a decidable instance checking problem. The price payed for this generality is that decidability results apply only to so-called simple knowledge bases, where quantifying-in (that is, quantification across modal operators, as in \u2200R.KC) is not allowed. Nonetheless, such KBs are expressive enough to model default rules. A different restriction is explored by Donini et al. (2002). The underlying DL is restricted toALC while limited forms of quantifying-in are allowed, in so-called subjectively quantified ALCKNF knowledge bases.", "startOffset": 34, "endOffset": 1796}, {"referenceID": 30, "context": "As pointed out in the introduction, it is well-known that, in the propositional case, nonmonotonic logics cannot modularly encode specificity-based priorities such as those needed by inheritance mechanisms (Horty, 1994).", "startOffset": 206, "endOffset": 219}, {"referenceID": 2, "context": "Baader et al., 2003, Chap. 9) can be adapted to circumscribed DLs. Some first steps have been made by Grimm and Hitzler (2008). Second, it seems necessary to develop a design methodology for modelling defeasible inheritance.", "startOffset": 0, "endOffset": 127}], "year": 2009, "abstractText": "As fragments of first-order logic, Description logics (DLs) do not provide nonmonotonic features such as defeasible inheritance and default rules. Since many applications would benefit from the availability of such features, several families of nonmonotonic DLs have been developed that are mostly based on default logic and autoepistemic logic. In this paper, we consider circumscription as an interesting alternative approach to nonmonotonic DLs that, in particular, supports defeasible inheritance in a natural way. We study DLs extended with circumscription under different language restrictions and under different constraints on the sets of minimized, fixed, and varying predicates, and pinpoint the exact computational complexity of reasoning for DLs ranging from ALC to ALCIO and ALCQO. When the minimized and fixed predicates include only concept names but no role names, then reasoning is complete for NExp. It becomes complete for NP when the number of minimized and fixed predicates is bounded by a constant. If roles can be minimized or fixed, then complexity ranges from NExp to undecidability.", "creator": "TeX"}}}