{"id": "1401.3831", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jan-2014", "title": "An Investigation into Mathematical Programming for Finite Horizon Decentralized POMDPs", "abstract": "software decentralized planning in uncertain environments is a complex task generally dealt with periodically by using a decision - theoretic approach, mainly through the framework of decentralized partially observable marko markov decision processes ( dec - ps pomdps ). although dec - pomdps are sometimes a general and powerful utility modeling communication tool, solving them is a task with an overwhelming complexity that can be doubly exponential. in this preliminary paper, we study an alternate formulation of dec - assisted pomdps instead relying on a sequence - form functional representation of policies. from this formulation, we might show how to derive these mixed integer linear programming ( np milp ) problems that, once spontaneously solved, give exact optimal solutions to the dec - pomdps. both we show that these milps can be derived successively either by using some combinatorial characteristics of the optimal solutions of evaluating the dec - pomdps or by using concepts borrowed from game theory. through an experimental validation done on classical hardness test problems from the dec - pomdp literature, we compare our approach to existing algorithms. results show that agile mathematical programming outperforms dynamic programming but is less efficient than forward search, precisely except for some particular problems. the main contributions of for this work are the use of mathematical programming literature for dec - pomdps and a better understanding of alternate dec - pomdps and of their solutions. besides, we argue that our alternate dynamic representation of dec - pomdps procedures could be helpful for designing novel algorithms looking principally for approximate simple solutions to dec - pomdps.", "histories": [["v1", "Thu, 16 Jan 2014 04:49:14 GMT  (445kb)", "http://arxiv.org/abs/1401.3831v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["raghav aras", "alain dutech"], "accepted": false, "id": "1401.3831"}, "pdf": {"name": "1401.3831.pdf", "metadata": {"source": "CRF", "title": "An Investigation into Mathematical Programming for Finite Horizon Decentralized POMDPs", "authors": ["Raghav Aras", "Alain Dutech"], "emails": ["raghav.aras@gmail.com", "alain.dutech@loria.fr"], "sections": [{"heading": null, "text": "The main contributions of this work are the use of mathematical programming for DECPOMDPs and a better understanding of DEC-POMDPs and of their solutions. Besides, we argue that our alternate representation of DEC-POMDPs could be helpful for designing novel algorithms looking for approximate solutions to DEC-POMDPs."}, {"heading": "1. Introduction", "text": "The framework of Decentralized Partially Observable Markov Decision Processes (DECPOMDPs) can be used to model the problem of designing a system made of autonomous agents that need to coordinate in order to achieve a joint goal. Solving DEC-POMDPs is an untractable task as they belong to the class of NEXP-complete problems (see Section 1.1). In this paper, DEC-POMDPs are reformulated into sequence-form DEC-POMDPs so as to derive Mixed Integer Linear Programs that can be solved using very efficient solvers in order to design exact optimal solutions to finite-horizon DEC-POMDPs. Our main motivation is to investigate the benefits and limits of this novel approach and to get a better understanding of DEC-POMDPs (see Section 1.2). On a practical level, we provide new algorithms and heuristics for solving DEC-POMDPs and evaluate them on classical problems (see Section 1.3).\nc\u00a92010 AI Access Foundation. All rights reserved."}, {"heading": "1.1 Context", "text": "One of the main goals of Artificial Intelligence is to build artificial agents that exhibit intelligent behavior. An agent is an entity situated in an environment which it can perceive through sensors and act upon using actuators. The concept of planning, i.e., to select a sequence of actions in order to reach a goal, has been central to the field of Artificial Intelligence for years. While the notion of \u201cintelligent behavior\u201d is difficult to assess and to measure, we prefer to refer to the concept of \u201crational behavior\u201d as formulated by Russell and Norvig (1995). As a consequence, the work presented here uses a decision-theoretic approach in order to build agents that take optimal actions in an uncertain and partially unknown environment.\nWe are more particularly interested in cooperative multi-agent systems where multiple independent agents with limited perception of their environment must interact and coordinate in order to achieve a joint task. No central process with a full knowledge of the state of the system is there to control the agents. On the contrary, each agent is an autonomous entity that must execute its actions by itself. This setting is both a blessing, as each agent should ideally deal with a small part of the problem, and a curse, as coordination and cooperation are harder to develop and to enforce.\nThe decision-theoretic approach to rational behavior relies mostly on the framework of Markov Decision Processes (MDP) (Puterman, 1994). A system is seen as a sequence of discrete states with stochastic dynamics, some particular states giving a positive or negative reward. The process is divided into discrete decision periods; the number of such periods is called the horizon of the MDP. At each of these periods, an action is chosen which will influence the transition of the process to its next state. By using the right actions to influence the transition probabilities between states, the objective of the controller of the system is to maximize its long term return, which is often an additive function of the reward earned for the given horizon. If the controller knows the dynamics of the system, which is made of a transition function and of a reward function, algorithms derived from the field of Dynamic Programming (see Bellman, 1957) allow the controller to compute an optimal deterministic policy, i.e., a decision function which associates an \u201coptimal\u201d action to every state so that the expected long term return is optimal. This process is called planning in the MDP community.\nIn fact, using the MDP framework, it is quite straightforward to model a problem with one agent which has a full and complete knowledge of the state of the system. But agents, and especially in a multi-agent setting, are generally not able to determine the complete and exact state of the system because of noisy, faulty or limited sensors or because of the nature of the problem itself. As a consequence, different states of the system are observed as similar by the agent which is a problem when different optimal actions should be taken in these states; one speaks then of perceptual aliasing. An extension of MDPs called Partially Observable Markov Decisions Processes (POMDPs) deals explicitly with this phenomenon and allows a single agent to compute plans in such a setting provided it knows the conditional probabilities of observations given the state of the environment (Cassandra, Kaelbling, & Littman, 1994).\nAs pointed out by Boutilier (1996), multi-agent problems could be solved as MDPs if considered from a centralized point of view for planning and control. Here, although\nplanning is a centralized process, we are interested in decentralized settings where every agent executes its own policy. Even if the agents could instantly communicate their observation, we consider problems where the joint observation resulting from such communications would still not be enough to identify the state of the system. The framework of Decentralized Partially Observable Markov Decision Processes (DEC-POMDP) proposed by Bernstein, Givan, Immerman, and Zilberstein (2002) takes into account decentralization of control and partial observability. In a DEC-POMDP, we are looking for optimal joint policies which are composed of one policy for each agent, these individual policies being computed in a centralized way but then independently executed by the agents.\nThe main limitation of DEC-POMDPs is that they are provably untractable as they belong to the class of NEXP-complete problems (Bernstein et al., 2002). Concretely, this complexity result implies that, in the worst case, finding an optimal joint policy of a finite horizon DEC-POMDP requires time that is exponential in the horizon if one always make good choices. Because of this complexity, there are very few algorithms for finding exact optimal solutions for DEC-POMDPs (they all have a doubly exponential complexity) and only a few more that look for approximate solutions. As discussed and detailed in the work of Oliehoek, Spaan, and Vlassis (2008), these algorithms follow either a dynamic programming approach or a forward search approach by adapting concepts and algorithms that were designed for POMDPs.\nYet, the concept of decentralized planning has been the focus of quite a large body of previous work in other fields of research. For example, the Team Decision Problem (Radner, 1959), later formulated as a Markov system in the field of control theory by Anderson and Moore (1980), led to the Markov Team Decision Problem (Pynadath & Tambe, 2002). In the field of mathematics, the abundant literature on Game Theory brings a new way for looking at multi-agent planning. In particular, a DEC-POMDP with finite horizon can be thought as a game in extensive form with imperfect information and identical interests (Osborne & Rubinstein, 1994).\nTaking inspiration from the field of game theory and mathematical programming to design exact algorithms for solving DEC-POMDPs is precisely the subject of our contribution to the field of decentralized multi-agent planning."}, {"heading": "1.2 Motivations", "text": "The main objective of our work is to investigate the use of mathematical programming, more especially mixed-integer linear programs (MILP) (Diwekar, 2008), for solving DECPOMDPs. Our motivation relies on the fact that the field of linear programming is quite mature and of great interest to the industry. As a consequence, there exist many efficient solvers for mixed-integer linear programs and we want to see how these efficient solvers perform in the framework of DEC-POMDPs.\nTherefore, we have to reformulate a DEC-POMDP to solve it as a mixed-integer linear program. As shown in this article, two paths lead to such mathematical programs, one grounded on the work from Koller, Megiddo, and von Stengel (1994), Koller and Megiddo (1996) and von Stengel (2002), and another one grounded on combinatorial considerations. Both methods rely on a special reformulation of DEC-POMDPs in what we have called\nsequence-form DEC-POMDPs where a policy is defined by the histories (i.e., sequences of observations and actions) it can generate when applied to the DEC-POMDP.\nThe basic idea of our work is to select, among all the histories of the DEC-POMDP, the histories that will be part of the optimal policy. To that end, an optimal solution to the MILP presented in this article will assign a positive weight to each history of the DECPOMDP and every history with a non-negative weight will be part of the optimal policy to the DEC-POMDP. As the number of possible histories is exponential in the horizon of the problem, the complexity of a naive search for the optimal set of histories is doubly exponential. Therefore, our idea appears untractable and useless.\nNevertheless, we will show that combining the efficiency of MILP solvers with some quite simple heuristics leads to exact algorithms that compare quite well to some existing exact algorithms. In fact, sequence-form DEC-POMDPs only need a memory space exponential in the size of the problem. Even if solving MILPs can also be exponential in the size of the MILP and thus leads to doubly exponential complexity for sequence-form based algorithms, we argue that sequence-form MILPs compare quite well to dynamic programming thanks to optimized industrial MILP solvers like \u201cCplex\u201d.\nStill, our investigations and experiments with Mathematical Programming for DECPOMDPs do not solely aim at finding exact solutions to DEC-POMDPs. Our main motivation is to have a better understanding of DEC-POMDPs and of the limits and benefits of the mathematical programming approach. We hope that this knowledge will help deciding to what extent mathematical programming and sequence-form DEC-POMDPs can be used to design novel algorithms that look for approximate solutions to DEC-POMDPs."}, {"heading": "1.3 Contributions", "text": "In this paper we develop new algorithms in order to find exact optimal joint policies for DEC-POMDPs. Our main inspiration comes from the work of Koller, von Stegel and Megiddo that shows how to solve games in extensive form with imperfect information and identical interests, that is how to find a Nash equilibrium for this kind of game (Koller et al., 1994; Koller & Megiddo, 1996; von Stengel, 2002). Their algorithms caused a breakthrough as the memory space requirement of their approach is linear in the size of the game whereas more canonical algorithms required space that is exponential in the size of the game. This breakthrough is mostly due to the use of a new formulation of a policy in what they call a sequence-form.\nOur main contribution, as detailed in Section 3.3, is then to adapt the sequence-form introduced by Koller, von Stegel and Megiddo to the framework of DEC-POMDPs (Koller et al., 1994; Koller & Megiddo, 1996; von Stengel, 2002). As a result, it is possible to formulate the resolution of a DEC-POMDP as a special kind of mathematical program that can still be solved quite efficiently: a mixed linear program where some variables are required to be either 0 or 1. The adaptation and the resulting mixed-integer linear program is not straightforward. In fact, Koller, von Stegel and Megiddo could only find one Nash equilibrium in a 2-agent game. What is needed for DEC-POMDPs is to find the set of policies, called a joint policy, that corresponds to the Nash equilibrium with the highest value, finding \u201conly\u201d one Nash equilibrium \u2013 already a complex task \u2013 is not enough. Besides, whereas Koller, von Stegel and Megiddo algorithms could only be applied\nto 2-agent games, we extend the approach so as to solve DEC-POMDPs with an arbitrary number of agents, which constitutes an important contribution.\nIn order to formulate DEC-POMDPs as MILPs, we analyze in detail the structure of an optimal joint policy for a DEC-POMDP. A joint policy in sequence-form is expressed as a set of individual policies that are themselves described as a set of possible trajectories for each of the agents of the DEC-POMDP. Combinatorial considerations on these individual histories, as well as constraints that ensure these histories do define a valid joint policy are at the heart of the formulation of a DEC-POMDP as a mixed linear program, as developped in Sections 4 and 5. Thus, another contribution of our work is a better understanding of the properties of optimal solutions to DEC-POMDPs, a knowledge that might lead to the formulation of new approximate algorithms for DEC-POMDPs.\nAnother important contribution of this work is that we introduce heuristics for boosting the performance of the mathematical programs we propose (see Section 6). These heuristics take advantage of the succinctness of the DEC-POMDP model and of the knowledge acquired regarding the structure of optimal policies. Consequently, we are able to reduce the size of the mathematical programs (resulting also in reducing the time taken to solve them). These heuristics constitute an important pre-processing step in solving the programs. We present two types of heuristics: the elimination of extraneous histories which reduces the size of the mixed integer linear programs and the introduction of cuts in the mixed integer linear programs which reduces the time taken to solve a program.\nOn a more practical level, this article presents three different mixed integer linear programs, two are more directly derived from the work of Koller, von Stegel and Megiddo (see Table 4 and 5) and a third one is based solely on combinatorial considerations on the individual policies and histories (see Table 3). The theoretical validity of these formulations is backed by several theorems. We also conducted experimental evaluations of our algorithms and of our heuristics on several classical DEC-POMDP problems. We were thus able to confirm that our algorithms are quite comparable to dynamic programming exact algorithms but outperformed by forward search algorithms like GMAA* (Oliehoek et al., 2008). On some problems, though, MILPs are indeed faster by one order of magnitude or two than GMAA*."}, {"heading": "1.4 Overview of this Article", "text": "The remainder of this article is organized as follows. Section 2 introduces the formalism of DEC-POMDP and some background on the classical algorithms, usually based on dynamic programing. Then we expose our reformulation of the DEC-POMDP in sequence-form in Section 3 where we also define various notions needed by the sequence-form. In Section 4, we show how to use combinatorial properties of the sequence-form policies to derive a first mixed integer linear program (MILP, in Table 3) for solving DEC-POMDP. By using game theoretic concepts like Nash equilibrium, we take inspiration from previous work on games in extensive form to design two other MILPs for solving DEC-POMDP (Tables 4, 5). These MILPs are smaller in size and their detailed derivation is presented in Section 5. Our contributed heuristics to speed up the practical resolutions of the various MILPs make up the core of Section 6. Section 7 presents experimental validations of our MILP-based algorithms on classical benchmarks of the DEC-POMDP literature as well as on randomly\nbuilt problems. Finally, Section 8 analyzes and discusses our work and we conclude this paper with Section 9."}, {"heading": "2. Dec-POMDP", "text": "This section gives a formal definition of Decentralized Partially Observed Markov Decision Processes as introduced by Bernstein et al. (2002). As described, a solution of a DECPOMDP is a policy defined on the space of information sets that has an optimal value. This sections ends with a quick overview of the classical methods that have been developed to solve DEC-POMDPs."}, {"heading": "2.1 Formal Definition", "text": "A DEC-POMDP is defined as a tuple D = \u3008 I, S, {Ai}, P, {Oi}, G, R, T , \u03b1 \u3009 where:\n\u2022 I = {1, 2, \u00b7 \u00b7 \u00b7 , n} is a set of agents.\n\u2022 S is a finite set of states. The set of probability distributions over S shall be denoted by \u2206(S). Members of \u2206(S) shall be called belief states.\n\u2022 For each agent i \u2208 I, Ai is a set of actions. A = \u00d7i\u2208IAi denotes the set of joint actions.\n\u2022 P : S \u00d7 A\u00d7 S \u2192 [0, 1] is a state transition function. For each s, s\u2032 \u2208 S and for each a \u2208 A, P(s, a, s\u2032) is the probability that the state of the problem in a period t is s\u2032 if, in period t\u2212 1, its state was s and the agents performed the joint action a. Thus, for any time period t \u2265 2, for each pair of states s, s\u2032 \u2208 S and for each joint action a \u2208 A, there holds:\nP(s, a, s\u2032) = Pr(st = s\u2032|st\u22121 = s, at = a).\nThus, (S, A, P) defines a discrete-state, discrete-time controlled Markov process.\n\u2022 For each agent i \u2208 I, Oi is a set of observations. O = \u00d7i\u2208IOi denotes the set of joint observations.\n\u2022 G : A \u00d7 S \u00d7 O \u2192 [0, 1] is a joint observation function. For each a \u2208 A, for each o \u2208 O and for each s \u2208 S, G(a, s, o) is the probability that the agents receive the joint observation o (that is, each agent i receives the observation oi) if the state of the problem in that period is s and if in the previous period the agents took the joint action a. Thus, for any time period t \u2265 2, for each joint action a \u2208 A, for each state s \u2208 S and for each joint observation o \u2208 O, there holds:\nG(a, s, o) = Pr(ot = o|st = s, at\u22121 = a).\n\u2022 R : S \u00d7A \u2192 R is a reward function. For each s \u2208 S and for each a \u2208 A, R(s, a) \u2208 R is the reward obtained by the agents if they take the joint action a when the state of the process is s.\n\u2022 T is the horizon of the problem. The agents are allowed T joint-actions before the process halts.\n\u2022 \u03b1 \u2208 \u2206(S) is the initial state of the DEC-POMDP. For each s \u2208 S, \u03b1(s) denotes the probability that the state of the problem in the first period is s.\nAs said, S, A and P define a controlled Markov Process where the next state depends only on the previous state and on the joint action chosen by the agents. But the agents do not have access to the state of the process and can only rely on observations, generally partial and noisy, of this state, as specified by the observation function G. From time to time, agents receive a non-zero reward according to the reward function R.\naction \u3008at1, a t 2, \u00b7 \u00b7 \u00b7 , a t n\u3009 alters the state of the process.\nMore specifically, as illustrated in Figure 1, the control of a DEC-POMDP by the n agents unfolds over discrete time periods, t = 1, 2, \u00b7 \u00b7 \u00b7 ,T as follows. In each period t, the process is in a state denoted by st from S. In the first period t = 1, the state s1 is chosen according to \u03b1 and the agents take actions a1i . In each period t > 1 afterward, each agent i \u2208 I takes an action denoted by ati from Ai according to the agent\u2019s policy. When the agents take the joint action at = \u3008at1, a t 2, \u00b7 \u00b7 \u00b7 , a t n\u3009, the following events occur:\n1. The agents all obtain the same reward R(st, at).\n2. The state st+1 is determined according to the function P with arguments st and at.\n3. Each agent i \u2208 I receives an observation ot+1i from Oi. The joint observation o t+1 =\n\u3008ot+11 , o t+1 2 , \u00b7 \u00b7 \u00b7 , o t+1 n \u3009 is determined by the function G with arguments s t+1 and at.\n4. The period changes from t to t + 1.\nIn this paper, the DEC-POMDP we are interested in have the following properties:\n\u2022 the horizon T is finite and known by the agents;\n\u2022 agents cannot infer the exact state of the system from their joint observations (this is the more general setting of DEC-POMDPs);\n\u2022 agents do not observe actions and observations of the other agents. They are only aware of their own observations and reward;\n\u2022 agents have a perfect memory of their past; they can base their choice of action on the sequence of past actions and observations. We speak of perfect recall setting;\n\u2022 transition and observation functions are stationary, meaning that they do not depend on the period t.\nSolving a DEC-POMDPmeans finding the agents\u2019 policies (i.e., their decision functions) to optimize a given criterion based on the rewards received. The criterion we will work with is called the cumulative reward and defined by:\nE\n[\nT \u2211\nt=1\nR(st, \u3008at1, a t 2, . . . , a t n\u3009)\n]\n(1)\nwhere E is the mathematical expectation."}, {"heading": "2.2 Example of DEC-POMDP", "text": "The problem known as the \u201cDecentralized Tiger Problem\u201d (hereby denoted MA-Tiger), introduced by Nair, Tambe, Yokoo, Pynadath, and Marsella (2003), has been widely used to test DEC-POMDPs algorithms. It is a variation of a problem previously introduced for POMDPs (i.e., DEC-POMDPs with one agent) by Kaelbling, Littman, and Cassandra (1998).\nIn this problem, we are given two agents confronted with two closed doors. Behind one door is a tiger, behind the other an escape route. The agents do not know which door leads to what. Each agent, independently of the other, can open one of the two doors or listen carefully in order to detect the tiger. If either of them opens the wrong door, the lives of both will be imperiled. If they both open the escape door, they will be free. The agents have a limited time in which to decide which door to open. They can use this time to gather information about the precise location of the tiger by listening carefully to detect the location of the tiger. This problem can be formalized as a DEC-POMDP with:\n\u2022 two states as the tiger is either behind the left door (sl) or the right door (sr);\n\u2022 two agents, that must decide and act;\n\u2022 three actions for each agent: open the left door (al), open the right door (ar) and listen (ao);\n\u2022 two observations, as the only thing the agent can observe is that they hear the tiger on the left (ol) or on the right (or).\nThe initial state is chosen according to a uniform distribution over S. As long as the door remains closed, the state does not change but, when one door is opened, the state is reset to either sl or sr with equal probability. The observations are noisy, reflecting the difficulty of detecting the tiger. For example, when the tiger is on the left, the action ao produces an observation ol only 85% of the time. So if both agents perform ao, the joint observation (ol,ol) occurs with a probability of 0.85\u00d7 0.85 = 0.72. The reward function encourages the agents to coordinate their actions as, for example, the reward when both open the escape door (+20) is bigger than when one listens while the other opens the good door (+9). The full state transition function, joint observation function and reward function are described in the work of Nair et al. (2003)."}, {"heading": "2.3 Information Sets and Histories", "text": "An information set \u03d5 of agent i is a sequence (a1.o2.a2.o3 \u00b7 \u00b7 \u00b7 .ot) of even length in which the elements in odd positions are actions of the agent (members of Ai) and those in even positions are observations of the agent (members of Oi). An information set of length 0 shall be called the null information set, denoted by \u2205. An information set of length T \u22121 shall be called a terminal information set. The set of information sets of lengths less than or equal to T \u2212 1 shall be denoted by \u03a6i.\nWe define a history of agent i \u2208 I to be a sequence (a1.o2. a2. o3 \u00b7 \u00b7 \u00b7 .ot.at) of odd length in which the elements in odd positions are actions of the agent (members of Ai) and those in even positions are observations of the agent (members of Oi). We define the length of a history to be the number of actions in the history (t in our example). A history of length T shall be called a terminal history. Histories of lengths less than T shall be called non-terminal histories. The history of null length shall be denoted \u2205. The information set associated to an history h, denoted \u03d5(h), is the information set composed by removing from h its last action. If h is a history and o an observation, then h.o is an information set.\nWe shall denote by Hti the set of all possible histories of length t of agent i. Thus, H 1 i is just the set of actions Ai. We shall denote by Hi the set of histories of agent i of lengths less than or equal to T . The size ni of Hi is thus:\nni = |Hi| = \u2211T t=1 |Ai| t|Oi| t\u22121 = |Ai| (|Ai||Oi|)\nT \u2212 1\n|Ai||Oi| \u2212 1 . (2)\nThe set HTi of terminal histories of agent i shall be denoted by Ei. The set Hi\\H T i of\nnon-terminal histories of agent i shall be denoted by Ni.\nA tuple \u3008h1, h2, . . . , hn\u3009 made of one history for each agent is called a joint history. The tuple obtained by removing the history hi from the joint history h is noted h\u2212i and called an i-reduced joint history.\nExample Coming back to the MA-Tiger example, a set of valid histories could be: \u2205, (ao), (ao.ol.ao), (ao.or.ao), (ao.ol.ao.ol.ao), (ao.ol.ao.or.ar), (ao.or.ao.ol.ao) and (ao.or.ao.or.ar). Incidently, this set of histories corresponds to the support of the policy (i.e., the histories generated by using this policy) of the Figure 2, as explained in the next section."}, {"heading": "2.4 Policies", "text": "At each period of time, a policy must tell an agent what action to choose. This choice can be based on whatever past and present knowledge the agent has about the process at time t. One possibility is to define an individual policy \u03c0i of agent i as a mapping from information sets to actions. More formally:\n\u03c0i : \u03a6i \u2212\u2192 \u2206(Ai) (3)\nAmong the set \u03a0 of policies, three families are usually distinguished:\n\u2022 Pure policies. A pure or deterministic policy maps a given information set to one unique action. The set of pure policies for the agent i is denoted \u03a0\u0302. Pure policies could also be defined using trajectories of past observations only since actions, which are chosen deterministically, can be reconstructed from the observations.\n\u2022 Mixed policies. A mixed policy is a probability distribution over the set of pure policies. Thus, an agent using a mixed policy will control the DEC-POMDP by using a pure policy randomly chosen from a set of pure policies.\n\u2022 Stochastic policies. A stochastic policy is the more general formulation as it associates a probability distribution over actions to each history.\nIf we come back to the MA-Tiger problem (Section 2.2), Figure 2 gives a possible policy for a horizon 2. As shown, a policy is classically represented by an action-observation tree. In that kind of tree, each branch is labelled by an observation. For a given sequence of past observations, one starts from the root node and follows the branches down to an action node. This node contains the action to be executed by the agent when it has seen this sequence of observations.\nA joint policy \u03c0 = \u3008\u03c01, \u03c02, \u00b7 \u00b7 \u00b7 , \u03c0n\u3009 is an n-tuple where each \u03c0i is a policy for agent i. Each of the individual policies must have the same horizon. For an agent i, we also define the notion of an i-reduced joint policy \u03c0\u2212i = \u3008\u03c01, \u00b7 \u00b7 \u00b7 , \u03c0i\u22121, \u03c0i+1, \u00b7 \u00b7 \u00b7 , \u03c0n\u3009 composed of the policies of all the other agents. We thus have that \u03c0 = \u3008\u03c0i, \u03c0\u2212i\u3009."}, {"heading": "2.5 Value Function", "text": "When executed by the agents, every T -horizon joint policy generates a probability distribution over the possible sequences of reward from which one can compute the value of the policy according to Equation 1. Thus the value of the joint policy \u03c0 is formally defined as:\nV (\u03b1, \u03c0) = E\n[\nT \u2211\nt=1\nR(st, at)|\u03c0, \u03b1\n]\n(4)\ngiven that the state in the first period is chosen according to \u03b1 and that actions are chosen according to \u03c0.\nThere is a recursive definition of the value function of a policy \u03c0 that is also a way to compute it when the horizon T is finite. This definition requires some concepts that we shall now introduce.\nGiven a belief state \u03b2 \u2208 \u2206(S), a joint action a \u2208 A and a joint observation o \u2208 O, let T (o|\u03b2, a) denote the probability that the agents receive joint observation o if they take joint action a in a period t in which the state is chosen according to \u03b2. This probability is defined as\nT (o|\u03b2, a) = \u2211\ns\u2208S\n\u03b2(s) \u2211\ns\u2032\u2208S\nP(s, a, s\u2032)G(a, s\u2032, o) (5)\nGiven a belief state \u03b2 \u2208 \u2206(S), a joint action a \u2208 A and a joint observation o \u2208 O , the updated belief state \u03b2ao \u2208 \u2206(S) of \u03b2 with respect to a and o is defined as (for each s\u2032 \u2208 S),\n\u03b2ao(s\u2032) = G(a,s\u2032,o)[\n\u2211 s\u2208S\n\u03b2(s)P(s,a,s\u2032)] T (o|\u03b2,a) if T (o|\u03b2, a) > 0 (6)\n\u03b2ao(s\u2032) = 0 if T (o|\u03b2, a) = 0 (7)\nGiven a belief state \u03b2 \u2208 \u2206(S) and a joint action a \u2208 A, R(\u03b2, a) denotes \u2211\ns\u2208S \u03b2(s)R(s, a). Using the above definitions and notations, the value V (\u03b1, \u03c0) of \u03c0 is defined as follows:\nV (\u03b1, \u03c0) = V (\u03b1, \u03c0,\u2205) (8)\nwhere V (\u03b1, \u03c0,\u2205) is defined by recursion using equations (9), (10) and (11), given below. These equations are a straight reformulation of the classical Bellman equations for finite horizon problems.\n\u2022 For histories of null length\nV (\u03b1, \u03c0,\u2205) = R(\u03b1, \u03c0(\u2205)) + \u2211\no\u2208O\nT (o|\u03b1, \u03c0(\u2205))V (\u03b1\u03c0(\u2205)o, \u03c0, o) (9)\n\u03c0(\u2205) denotes the joint action \u3008\u03c01(\u2205), \u03c02(\u2205), \u00b7 \u00b7 \u00b7 , \u03c0n(\u2205)\u3009 and \u03b1 \u03c0(\u2205)o denotes the updated state of \u03b1 given \u03c0(\u2205) and the joint observation o.\n\u2022 For non-terminal histories. For any \u03b1\u2032 \u2208 \u2206(S), for each t of {1, . . . , T \u2212 2}, for each tuple of sequences of t observations o1:T = \u3008o1:T1 , o 1:T 2 , \u00b7 \u00b7 \u00b7 , o 1:T n \u3009 where o 1:T i \u2208 \u00d7TOi\nis a sequence of t observations of agent i \u2208 I:\nV (\u03b1\u2032, \u03c0, o1:T ) = R(\u03b1\u2032, \u03c0(o1:T )) + \u2211\no\u2208O\nT (o|\u03b1\u2032, \u03c0(o1:T ))V (\u03b1\u2032\u03c0(o 1:T )o, \u03c0, o1:T .o) (10)\n\u03b1\u2032\u03c0(o 1:T )o is the updated state of \u03b1\u2032 given the joint action \u03c0(o1:T ) and joint observation o = \u3008o1, o2, \u00b7 \u00b7 \u00b7 , on\u3009 and o1:T .o is the tuple of sequences of (t + 1) observations \u3008o1:T1 .o1, o1:T2 .o2, \u00b7 \u00b7 \u00b7 , o 1:T n .on\u3009.\n\u2022 For terminal histories. For any \u03b1\u2032 \u2208 \u2206(S), for each tuple of sequences of (T - 1) observations o1:T\u22121 = \u3008o1:T\u221211 , o 1:T\u22121 2 , \u00b7 \u00b7 \u00b7 , o 1:T\u22121 n \u3009:\nV (\u03b1\u2032, \u03c0, o1:T\u22121) = R(\u03b1, \u03c0(o1:T\u22121)) = \u2211\ns\u2208S\n\u03b1\u2032(s)R(s, \u03c0(o1:T\u22121)) (11)\nAn optimal policy \u03c0\u2217 is a policy with the best possible value, verifying:\nV (\u03b1, \u03c0\u2217) \u2265 V (\u03b1, \u03c0) \u2200\u03c0 \u2208 \u03a0. (12)\nAn important fact about DEC-POMDPs, based on the following theorem, is that we can restrict ourselves to the set of pure policies when looking for a solution to a DEC-POMDP.\nTheorem 2.1. A DEC-POMDP has at least one optimal pure joint policy.\nProof: See proof in the work of Nair et al. (2003)."}, {"heading": "2.6 Overview of DEC-POMDPs Solutions and Limitations", "text": "As detailed in the work of Oliehoek et al. (2008), existing methods for solving DECPOMDPs with finite-horizon belong to several broad families: \u201cbrute force\u201d, alternating maximization, search algorithms and dynamic programming.\nBrute Force The simplest approach for solving a DEC-POMDP is to enumerate all possible joint policies and to evaluate them in order to find the optimal one. However, such a method becomes quickly untractable as the number of joint policies is doubly exponential in the horizon of the problem.\nAlternating Maximization Following Chade\u0300s, Scherrer, and Charpillet (2002) and Nair et al. (2003), one possible way to solve DEC-POMDPs is for each agent (or each small group of agents) to alternatively search for a better policy while all the other agents freeze their own policy. Called alternating maximization by Oliehoek and alternated co-evolution by Chade\u0300s this method guarantees only to find a Nash equilibria, that is a locally optimal joint policy.\nHeuristic Search Algorithms The concept was introduced by Szer, Charpillet, and Zilberstein (2005) and relies on heuristic search for looking for an optimal joint policy, using an admissible approximation of the value of the optimal joint policy. As the search progresses, joint policies that will provably by worse that the current admissible solution are pruned. Szer et al. used underlying MDPs or POMDPs to compute the admissible heuristic, Oliehoek et al. (2008) introduced a better heuristic based on the resolution of a Bayesian Game with a carefully crafted cost function. Currently, Oliehoek\u2019s method called GMAA* (for Generic Multi-Agent A*) is the quickest exact method on a large set of benchmarks. But, as every exact method, it is limited to quite simple problems.\nDynamic Programming The work from Hansen, Bernstein, and Zilberstein (2004) adapts solutions designed for POMDPs to the domain of DEC-POMDPs. The general idea is to start with policies for 1 time step that are used to build 2 time step policies and so on. But the process is clearly less efficient that the heuristic search approach as an exponential number of policies must be constructed and evaluated at each iteration of the algorithm. Some of these policies can be pruned but, once again, pruning is less efficient.\nAs exposed in more details in the paper by Oliehoek et al. (2008), several others approaches have been developed for subclasses of DEC-POMDPs. For example, special settings where agents are allowed to communicate and exchange informations or settings where the transition function can be split into independant transition functions for each agent have been studied and found easier to solve than \u201cgeneric\u201d DEC-POMDPs."}, {"heading": "3. Sequence-Form of DEC-POMDPs", "text": "This section introduces the fundamental concept of policies in \u201csequence-form\u201d. A new formulation of a DEC-POMDP is thus possible and this leads to a Non-Linear Program (NLP) the solution of which defines an optimal solution to the DEC-POMDP."}, {"heading": "3.1 Policies in Sequence-Form", "text": "A history function p of an agent i is a mapping from the set of histories to the interval [0, 1]. The value p(h) is the weight of the history h for the history function p. A policy \u03c0i defines a probability function over the set of histories of the agent i by saying that, for each history hi of Hi, p(hi) is the conditional probability of hi given an observation sequence (o0i .o 1 i . \u00b7 \u00b7 \u00b7 .o t i) and \u03c0i.\nIf every policy defines a policy function, not every policy function can be associated to a valid policy. Some constraints must be met. In fact, a history function p is a sequenceform policy for agent i when the following constraints are met:\n\u2211\na\u2208Ai\np(a) = 1, (13)\n\u2212p(h) + \u2211\na\u2208Ai\np(h.o.a) = 0, \u2200h \u2208 Ni, \u2200o \u2208 Oi, (14)\nwhere h.o.a denotes the history obtained on concatenating o and a to h. This definition appears in a slightly different form as Lemma 5.1 in the work of Koller et al. (1994).\nA sequence-form policy can be stochastic as the probability of choosing action a in the information set h.o is p(h.o.a)/p(h). The support S(p) of a sequence-form policy is made of the set of histories that have a non-negative weight, i.e. S(p) = {h \u2208 Hi | p(h) > 0}. As a sequence-form policy p defines a unique policy \u03c0 for an agent, a sequence-form policy will be called a policy in the rest of this paper when no ambiguity is present.\nThe set of policies in the sequence-form of agent i shall be denoted by Xi. The set of pure policies in the sequence-form shall be denoted by X\u0302i \u2282 Xi.\nIn a way similar to the definitions of Section 2.4, we define a sequence-form joint policy as a tuple of sequence-form policies, one for each agent. The weight of the joint history h = \u3008hi\u3009 of a sequence-form joint policy \u3008p1, p2, \u00b7 \u00b7 \u00b7 , pn\u3009 is the product \u220f\ni\u2208I pi(hi). The set of joint policies in the sequence-form \u00d7i\u2208IXi shall be denoted by X and the set of i-reduced sequence-form joint policy is called X\u2212i."}, {"heading": "3.2 Policy Constraints", "text": "A policy of agent i in the sequence-form can be found by solving a set of linear inequalities (LI) found in Table 1. These LI merely implement the definition of a policy in the sequenceform. The LI contains one variable x(h) for each history h \u2208 Hi to represent the weight of h in the policy. A solution x\u2217 to these LI constitutes a policy in the sequence-form.\nExample In the Section E.1 of the Appendices, the policy constraints for the decentralized Tiger problem are given for 2 agents and a horizon of 2.\nNotice that in the policy constraints of an agent, each variable is only constrained to be non-negative whereas by the definition of a policy in sequence-form, the weight of a history must be in the interval [0, 1]. Does it mean that a variable in a solution to the policy constraints can assume a value higher than 1? Actually, the policy constraints are such that they prevent any variable from assuming a value higher than 1 as the following lemma shows.\nLemma 3.1. In every solution x\u2217 to (15)-(17), for each h \u2208 Hi, x \u2217(h) belongs to the [0, 1] interval.\nProof: This can be shown by forward induction. Every x(h) being non-negative (see Eq. (17)), it is also the case for every action a of Ai. Then, no x(a) can be greater than 1 otherwise constraint (15) would be violated. So, \u2200h \u2208 H1i , (i.e. \u2200a \u2208 Ai), we have x(h) belong to [0, 1].\nIf every h of Hti is such that x(h) \u2208 [0, 1], the previous reasoning applied using constraint (16) leads evidently to the fact that x(h) \u2208 [0, 1] for every h of Ht+1i .\nThereby, by induction this holds for all t.\nLater in this article, in order to simplify the task of looking for joint policies, the policy constraints LI will be used to find pure policies. Looking for pure policies is not a limitation as finite-horizon DEC-POMDPs admit deterministic policies when the policies are defined on information set. In fact, pure policies are needed in two of the three MILPs we build in order to solve DEC-POMDPs, otherwise their derivation would not be possible (see Sections 4 and 5.4).\nLooking for pure policies, an obvious solution would be to impose that every variable x(h) belongs to the set {0, 1}. But, when solving a mixed integer linear program, it is generally a good idea to limit the number of integer variables as each integer variable is a possible node for the branch and bound method used to assign integer values to the variables. A more efficient implementation of a mixed integer linear program is to take advantage of the following lemma to impose that only the weights of the terminal histories take 0 or 1 as possible values.\nLemma 3.2. If in (15)-(17), (17) is replaced by,\nx(h) \u2265 0, \u2200h \u2208 Ni (18)\nx(h) \u2208 {0, 1}, \u2200h \u2208 Ei (19)\nthen in every solution x\u2217 to the resulting LI, for each h \u2208 Hi, x \u2217(h) = 0 or 1. We will speak of a 0-1 LI.\nProof: We can prove this by backward induction. Let h be a history of length T - 1. Due to (16), for each o \u2208 Oi, there holds,\nx\u2217(h) = \u2211\na\u2208Ai\nx\u2217(h.o.a). (20)\nSince h is a history of length T - 1, each history h.o.a is a terminal history. Due to Lemma 3.1, x\u2217(h) \u2208 [0, 1]. Therefore, the sum on the right hand side of the above equation is also in [0, 1]. But due to (19), each x\u2217(h.o.a) \u2208 {0, 1}. Hence the sum on the right hand side is either 0 or 1, and not any value in between. Ergo, x\u2217(h) \u2208 {0, 1} and not any value in between. By this same reasoning, we can show that x\u2217(h) \u2208 {0, 1} for every non-terminal history h of length T - 2, T - 3, \u00b7 \u00b7 \u00b7 , 1.\nTo formulate the linear inequalities of Table 1 in memory, we require space that is only exponential in the horizon. For each agent i \u2208 I, the size of Hi is \u2211T t=1 |Ai| t|Oi| t\u22121. It is then exponential in T and the number of variables in the LP is also exponential in T . The number of constraints in the LI of Table 1 is\n\u2211T\u22121 t=0 |Ai| t|Oi| t, meaning that the number of\nconstraints of the LI is also exponential in T ."}, {"heading": "3.3 Sequence-Form of a DEC-POMDP", "text": "We are now able to give a formulation of a DEC-POMDP based on the use of sequence-form policies. We want to stress that this is only a re-formulation, but as such will provide us with new ways of solving DEC-POMDPs with mathematical programming.\nGiven a \u201cclassical\u201d formulation of a DEC-POMDP (see Section 2.1), the equivalent sequence-form DEC-POMDP is a tuple \u3008I, {Hi}, \u03a8, R\u3009 where:\n\u2022 I = {1, 2, \u00b7 \u00b7 \u00b7 , n} is a set of agents.\n\u2022 For each agent i \u2208 I, Hi is the set of histories of length less than or equal to T for the agent i, as defined in the previous section. Each set Hi is derived using the sets Ai and Oi.\n\u2022 \u03a8 is the joint history conditional probability function. For each joint history j \u2208 H, \u03a8(\u03b1, j) is the probability of j occurring conditional on the agents taking joint actions according to it and given that the initial state of the DEC-POMDP is \u03b1. This function is derived using the set of states S, the state transition function P and the joint observation function G.\n\u2022 R is the joint history value. For each joint history j \u2208 H, R(\u03b1, j) is the value of the expected reward the agents obtain if the joint history j occurs. This function is derived using the set of states S, the state transition function P, the joint observation function G and the reward function R. Alternatively, R can be described as a function of \u03a8 and R.\nThis formulation folds S, P and G into \u03a8 and R by relying on the set of histories. We will now give more details about the computation of \u03a8 and R.\n\u03a8(\u03b1, j) is the conditional probability that the sequence of joint observations received by the agents till period t is (o1(j).o2(j).\u00b7 \u00b7 \u00b7 . ot\u22121(j)) if the sequence of joint actions taken by them till period t - 1 is (a1(j). a2(j). \u00b7 \u00b7 \u00b7 . at\u22121(j)) and the initial state of the DEC-POMDP is \u03b1. That is,\n\u03a8(\u03b1, j) = Prob.(o1(j).o2(j). \u00b7 \u00b7 \u00b7 .ot\u22121(j)|\u03b1, a1(j).a2(j). \u00b7 \u00b7 \u00b7 .at\u22121(j)) (21)\nThis probability is the product of the probabilities of seeing observation ok(j) given the appropriate belief state and action chosen at time k, that is:\n\u03a8(\u03b1, j) = t\u22121 \u220f\nk=1\nT (ok(j)|\u03b2k\u22121j , a k(j)) (22)\nwhere \u03b2kj is the probability distribution on S given that the agents have followed the joint history j up to time k, that is:\n\u03b2kj (s) = Prob.(s|o 1(j).a1(j). \u00b7 \u00b7 \u00b7 .ok(j)). (23)\nRegarding the value of a joint history, it is defined by:\nR(\u03b1, j) = R(\u03b1, j)\u03a8(\u03b1, j) (24)\nwhere\nR(\u03b1, j) =\nt \u2211\nk=1\n\u2211\ns\u2208S\n\u03b2k\u22121j (s)R(s, a k(j)). (25)\nThus, V(\u03b1, p), the value of a sequence-form joint policy p, is the weighted sum of the value of the histories in its support:\nV(\u03b1, p) = \u2211\nj\u2208H\np(j)R(\u03b1, j) (26)\nwith p(j) = \u220f\ni\u2208I pi(ji)."}, {"heading": "3.4 Non-Linear Program for Solving DEC-POMDPs.", "text": "By using the sequence-form formulation of a DEC-POMDP, we are able to express joint policies as sets of linear constraints and to assess the value of every policy. Solving a DECPOMDP amounts to finding the policy with the maximal value, which can be done with the non-linear program (NLP) of Table 2 where, once again, the xi variables are the weights of the histories for the agent i.\nExample An example of the formulation of such an NLP can be found in the Appendices, in Section E.2. It is given for the decentralized Tiger problem with 2 agents and an horizon of 2.\nThe constraints of the program form a convex set, but the objective function is not concave (as explained in appendix A). In the general case, solving non-linear program is\nvery difficult and there are no generalized method that guarantee finding a global maximum point. However, this particular NLP is in fact a Multilinear Mathematical Program (see Drenick, 1992) and this kind of programs are still very difficult to solve. When only two agents are considered, one speaks of bilinear programs, that can be solved more easily (Petrik & Zilberstein, 2009; Horst & Tuy, 2003).\nAn evident, but inefficient, method to find a global maximum point is to evaluate all the extreme points of the set of feasible solutions of the program since it is known that every global as well as local maximum point of a non-concave function lies at an extreme point of such a set (Fletcher, 1987). This is an inefficient method because there is no test that tells if an extreme point is a local maximum point or a global maximum point. Hence, unless all extreme points are evaluated, we cannot be sure of having obtained a global maximum point. The set of feasible solutions to the NLP is X, the set of T -step joint policies. The set of extreme points of this set is X\u0302, the set of pure T -step joint policies, whose number is doubly exponential in T and exponential in n. So enumerating the extreme points for this NLP is untractable.\nOur approach, developed in the next sections, is to linearize the objective function of this NLP in order to deal only with linear programs. We will describe two ways for doing this: one is based on combinatorial consideration (Section 4) and the other is based on game theory concepts (Section 5). In both cases, this shall mean adding more variables and constraints to the NLP, but upon doing so, we shall derive mixed integer linear programs for which it is possible to find a global maximum point and hence an optimal joint policy of the DEC-POMDP."}, {"heading": "4. From Combinatorial Considerations to Mathematical Programming", "text": "This section explains how it is possible to use combinatorial properties of DEC-POMDPs to transform the previous NLP into a mixed integer linear program. As shown, this mathematical program belongs to the family of 0-1 Mixed Integer Linear Programs, meaning that some variables of this linear program must take integer values in the set {0, 1}."}, {"heading": "4.1 Linearization of the Objective Function", "text": "Borrowing ideas from the field of Quadratic Assignment Problems (Papadimitriou & Steiglitz, 1982), we turn the non-linear objective function of the previous NLP into a linear objective function and linear constraints involving new variables z that must take integer values. The variable z(j) represents the product of the xi(ji) variables.\nThus, the objective function that was:\nmaximize \u2211\nj\u2208E\nR(\u03b1, j) \u220f\ni\u2208I\nxi(ji) (31)\ncan now be rewritten as\nmaximize \u2211\nj\u2208E\nR(\u03b1, j)z(j) (32)\nwhere j = \u3008j1, j2, \u00b7 \u00b7 \u00b7 , jn\u3009.\nWe must ensure that there is a two way mapping between the value of the new variables z and the x variables for any solution of the mathematical program, that is:\nz\u2217(j) = \u220f\ni\u2208I\nx\u2217i (ji). (33)\nFor this, we will restrict ourself to pure policies where the x variables can only be 0 or 1. In that case, the previous constraint (33) becomes:\nz\u2217(j) = 1 \u21d4 x\u2217i (ji) = 1, \u2200i \u2208 I (34)\nThere, we take advantage on the fact that the support of a pure policy for an agent i is composed of |Oi|\nT\u22121 terminal histories to express these new constraints. On the one hand, to guarantee that z(j) is equal to 1 only when enough x variables are also equal to 1, we write:\nn \u2211\ni=1\nxi(ji)\u2212 nz(j) \u2265 0, \u2200j \u2208 E . (35)\nOn the other hand, to limit the number of z(j) variables that can take a value of 1, we will enumerate the number of joint terminal histories to end up with:\n\u2211\nj\u2208E\nz(j) = \u220f\ni\u2208I\n|Oi| T\u22121. (36)\nThe constraints (35) would weight heavily on any mathematical program as there would be one constraint for each terminal joint history, a number which is exponential in n and T . Our idea to reduce this number of constraints is not to reason about joint histories but with individual histories. An history h of agent i is part of the support of the solution of the problem (i.e., xi(h) = 1) if and only if the number of joint histories it belongs to ( \u2211\nj\u2032\u2208E\u2212i z(\u3008h, j\u2032\u3009)) is\n\u220f\nk\u2208I\\{i} |Ok| T\u22121. Then, we suggest to replace the\n\u220f\n|Ei| constraints (35)\nn \u2211\ni=1\nxi(ji)\u2212 nz(j) \u2265 0, \u2200j \u2208 E . (35)\nby the \u2211\n|Ei| constraints\n\u2211\nj\u2032\u2208E\u2212i\nz(\u3008h, j\u2032\u3009) =\n\u220f\nk\u2208I |Ok| T\u22121\n|Oi|T\u22121 xi(h)\n= xi(h) \u220f\nk\u2208I\\{i}\n|Ok| T\u22121, \u2200i \u2208 I, \u2200h \u2208 Ei. (37)"}, {"heading": "4.2 Fewer Integer Variables", "text": "The linearization of the objective function rely on the fact that we are dealing with pure policies, meaning that every x and z variable is supposed to value either 0 or 1. As solving linear programs with integer variables is usually based on the \u201cbranch and bound\u201d technique\n(Fletcher, 1987), for efficiency reasons, it is important to reduce the number of integer variables in our mathematical programs.\nAs done in Section 3.2, we can relax most x variables and allow them to take non-negative values provided that the x values for terminal histories are constrained to integer values. Furthermore, as proved by the following lemma, these constraints on x also guarantee that z variables only take their value in {0, 1}.\nWe eventually end up with the following linear program with real and integer variables, thus called an 0-1 mixed integer linear program (MILP). The MILP is shown in Table 3.\nExample In Section E.3 of the Appendices, an example if such MILP is given for the problem of the decentralized Tiger for 2 agents and an horizon of 2.\nLemma 4.1. In every solution (x\u2217, z\u2217) to the MILP of Table 3, for each j \u2208 E, z\u2217(j) is either 0 or 1.\nProof: Let (x\u2217, z\u2217) be a solution of MILP. Let,\nS(z) = {j \u2208 E|z\u2217(j) > 0} (46) Si(xi) = {h \u2208 Ei|x \u2217 i (h) = 1}, \u2200i \u2208 I (47)\nSi(z, j \u2032) = {j \u2208 E|j\u2212i = j \u2032, z\u2217(j) > 0}, \u2200i \u2208 I, \u2200j\u2032 \u2208 E\u2212i (48)\nNow, due to (42) and (45), |S(z)| \u2265 \u220f i\u2208I |Oi| T\u22121. By showing that |S(z)| \u2264 \u220f i\u2208I |Oi| T\u22121, we shall establish that |S(z)| = \u220f\ni\u2208I |Oi| T\u22121. Then due to the upper bound of 1 on each z\nvariable, the implication will be that z\u2217(j) is 0 or 1 for each terminal joint history j thus proving the statement of the lemma.\nNote that by Lemma (3.2), for each agent i, x\u2217i is a pure policy. Therefore, we have that |Si(x)| = |Oi|\nT\u22121. This means that in the set of constraints (41), an i-reduced terminal joint history j\u2032 \u2208 E\u2212i will appear on the right hand side not more than |Oi|\nT\u22121 times when in the left hand side, we have x\u2217i (h) = 1. Thus, \u2200j \u2032 \u2208 E\u2212i,\n|Si(z, j \u2032)| \u2264 |Oi| T\u22121. (49)\nNow, we know that for each agent i and for each history h \u2208 Hi , x \u2217 i (h) is either 0 or 1 since x\u2217i is a pure policy. So, given an i-reduced terminal joint history j \u2032, \u220f k\u2208I\\{i} x \u2217 k(j \u2032 k) is either 0 or 1. Secondly, due to (41), the following implication clearly holds for each terminal joint history j,\nz\u2217(j) > 0 \u21d2 x\u2217i (ji) = 1, \u2200i \u2208 I. (50)\nTherefore, we obtain\n|Si(z, j \u2032)| \u2264 |Oi| T\u22121 (51)\n= |Oi| T\u22121\n\u220f\nk\u2208I\\{i}\nx\u2217k(j \u2032 k). (52)\nAs a consequence,\n\u2211\nj\u2032\u2208E\u2212i\n|Si(z, j \u2032)| \u2264\n\u2211\nj\u2032\u2208E\u2212i\n|Oi| T\u22121\n\u220f\nk\u2208I\\{i}\nx\u2217k(j \u2032 k) (53)\n= |Oi| T\u22121\n\u2211\nj\u2032\u2208E\u2212i\n\u220f\nk\u2208I\\{i}\nx\u2217k(j \u2032 k) (54)\n= |Oi| T\u22121\n\u220f\nk\u2208I\\{i}\n\u2211\nh\u2032\u2208Ek\nx\u2217k(h \u2032) (55)\n= |Oi| T\u22121\n\u220f\nk\u2208I\\{i}\n|Ok| T\u22121 (56)\n= \u220f\nj\u2208I\n|Oj | T\u22121. (57)\nSince \u22c3\nj\u2032\u2208E\u2212i Si(z, j\n\u2032) = S(z), there holds that \u2211\nj\u2032\u2208E\u2212i |Si(z, j\n\u2032)| = |S(z)|. Hence,\n|S(z)| \u2264 \u220f\nj\u2208I\n|Oj | T\u22121. (58)\nThus the statement of the lemma is proved."}, {"heading": "4.3 Summary", "text": "By using combinatorial considerations, it is possible to design a 0-1 MILP for solving a given DEC-POMDP. As proved by theorem 4.1, the solution of this MILP defines an optimal joint policy for the DEC-POMDP. Nevertheless, this MILP is quite large, with O(kT ) constraints and \u2211\ni |Hi|+ \u220f i |Ei| = O(k nT ) variables, O(kT ) of these variables must take integer values.\nThe next section details another method for the linearization of NLP which leads to a \u201csmaller\u201d mathematical program for the 2-agent case.\nTheorem 4.1. Given a solution (x\u2217, z\u2217) to MILP, x\u2217 = \u3008x\u22171, x \u2217 2, \u00b7 \u00b7 \u00b7 , x \u2217 n\u3009 is a pure"}, {"heading": "T -period optimal joint policy in sequence-form.", "text": "Proof: Due to the policy constraints and the domain constraints of each agent, each x\u2217i is a pure sequence-form policy of agent i. Due to the constraints (41)-(42), each z\u2217 values 1 if and only if the product \u220f\ni\u2208I xi(ji) values 1. Then, by maximizing the objective function we are effectively maximizing the value of the sequence-form policy \u3008x\u22171, x \u2217 2, \u00b7 \u00b7 \u00b7 , x \u2217 n\u3009. Thus, \u3008x\u22171, x \u2217 2, \u00b7 \u00b7 \u00b7 , x \u2217 n\u3009 is an optimal joint policy of the original DEC-POMDP."}, {"heading": "5. From Game-Theoretical Considerations to Mathematical", "text": "Programming\nThis section borrows concepts like \u201cNash equilibrium\u201d and \u201cregret\u201d from game theory in order to design yet another 0-1 Mixed Integer Linear Program for solving DEC-POMDPs. In fact, two MILPs are designed, one that can only be applied for 2 agents and the other one for any number of agents. The main objective of this part is to derive a smaller mathematical program for the 2 agent case. Indeed, MILP-2 agents (see Table 4) has slightly less variables and constraints than MILP (see Table 3) and thus might prove easier to solve. On the other hand, when more than 2 agents are considered, the new derivation leads to a MILP which is only given for completeness as it is bigger than MILP.\nLinks between the fields of multiagent systems and game theory are numerous in the literature (see, for example, Sandholm, 1999; Parsons & Wooldridge, 2002). We will elaborate on the fact that the optimal policy of a DEC-POMDP is a Nash Equilibrium. It is in fact the Nash Equilibrium with the highest utility as the agents all share the same reward.\nFor the 2-agent case, the derivation we make in order to build the MILP is similar to the first derivation of Sandholm, Gilpin, and Conitzer (2005). We give more details of this derivation and adapt it to DEC-POMDP by adding an objective function to it. For more than 2 agents, our derivation can still be use to find Nash equilibriae with pure strategies.\nFor the rest of this article, we will make no distinction between a policy, a sequence-form policy or a strategy of an agent as, in our context, these concepts are equivalent. Borrowing from game theory, a joint policy will be denoted p or q, an individual policy pi or qi and a i-reduced policy p\u2212i or q\u2212i."}, {"heading": "5.1 Nash Equilibrium", "text": "A Nash Equilibrium is a joint policy in which each policy is a best response to the reduced joint policy formed by the other policies of the joint policy. In the context of a sequence-form\nDEC-POMDP, a policy pi \u2208 Xi of agent i is said to be a best response to an i-reduced joint policy q\u2212i \u2208 X\u2212i if there holds that\nV(\u03b1, \u3008pi, q\u2212i\u3009)\u2212 V(\u03b1, \u3008p \u2032 i, q\u2212i\u3009) \u2265 0, \u2200p \u2032 i \u2208 Xi. (59)\nA joint policy p \u2208 X is a Nash Equilibrium if there holds that\nV(\u03b1, p) \u2212 V(\u03b1, \u3008p\u2032i, p\u2212i\u3009) \u2265 0, \u2200i \u2208 I, \u2200p \u2032 i \u2208 Xi. (60)\nThat is,\n\u2211\nh\u2208Ei\n\u2211\nj\u2032\u2208E\u2212i\nR(\u03b1, \u3008h, j\u2032\u3009) \u220f\nk\u2208I\\{i}\npk(j \u2032 k) { pi(h)\u2212 p \u2032 i(h) } \u2265 0, \u2200i \u2208 I, \u2200p\u2032i \u2208 Xi. (61)\nThe derivation of the necessary conditions for a Nash equilibrium consists of deriving the necessary conditions for a policy to be a best response to a reduced joint policy. The following program finds a policy for an agent i that is a best response to an i-reduced joint policy q\u2212i \u2208 X\u2212i. Constraints (63)-(64) ensure that the policy defines a valid joint policy (see Section 3.2) and the objective function is a traduction of the concept of best response.\nVariables: xi(h), \u2200i \u2208 I, \u2200h \u2208 Hi\nMaximize \u2211\nh\u2208Ei\n\n\n\n\u2211\nj\u2032\u2208E\u2212i\nR(\u03b1, \u3008h, j\u2032\u3009) \u220f\nk\u2208I\\{i}\nqk(j \u2032 k)\n\n\n\nxi(h) (62)\nsubject to:\n\u2211\na\u2208Ai\nxi(a) = 1 (63)\n\u2212xi(h) + \u2211\na\u2208Ai\nxi(h.o.a) = 0, \u2200h \u2208 Ni, \u2200o \u2208 Oi (64)\nxi(h) \u2265 0, \u2200h \u2208 Hi. (65)\nThis linear program (LP) must still be refined so that its solution is not only a best response for agent i but a \u201cglobal\u201d best response, i.e., the policy of each agent is a best response to all the other agents. This will mean introducing new variables (a set of variable for each agent). The main point will be to adapt the objective function as the current objective function, when applied to find \u201cglobal\u201d best response, would lead to a non-linear objective function where product of weights of policies would appear. To do this, we will make use of the dual of the program (LP).\nThe linear program (LP) has one variable xi(h) for each history h \u2208 Hi representing the weight of h. It has one constraint per information set of agent i. In other words, each constraint of the linear program (LP) is uniquely labeled by an information set. For instance, the constraint (63) is labeled by the null information set \u2205, and for each nonterminal history h and for each observation o, the corresponding constraint in (64) is labeled by the information set h.o. Thus, (LP) has ni variables and mi constraints.\nAs described in the appendix (see appendix B), the dual of (LP) is expressed as:\nVariables: yi(\u03d5), \u2200\u03d5 \u2208 \u03a6i\nMinimize yi(\u2205) (66)\nsubject to:\nyi(\u03d5(h)) \u2212 \u2211\no\u2208Oi\nyi(h.o) \u2265 0, \u2200h \u2208 Ni (67)\nyi(\u03d5(h)) \u2212 \u2211\nj\u2032\u2208E\u2212i\nR(\u03b1, \u3008h, j\u2032\u3009) \u220f\nk\u2208I\\{i}\nqk(j \u2032 k) \u2265 0, \u2200h \u2208 Ei (68)\nyi(\u03d5) \u2208 (\u2212\u221e,+\u221e), \u2200\u03d5 \u2208 \u03a6i (69)\nwhere \u03d5(h) denotes the information set to which h belongs. The dual has one free variable yi()\u0307 for every information set of agent i. This is why the function \u03d5(h) (defined in Section 2.3) appears as a mapping from histories to information sets1. The dual program has one constraint per history of the agent. Thus, the dual has mi variables and ni constraints. Note that the objective of the dual is to minimize only yi(\u2205) because in the primal (LP), the right hand side of all the constraints, except the very first one, is a 0.\nThe theorem of duality (see the appendix B), applied to the primal (LP) (62)-(65) and the transformed dual (66)-(69), says that their solutions have the same value. Mathematically, that means that:\n\u2211\nh\u2208Ei\n\n\n\n\u2211\nj\u2032\u2208E\u2212i\nR(\u03b1, \u3008h, j\u2032\u3009) \u220f\nk\u2208I\\{i}\nqk(j \u2032 k)\n\n\n\nx\u2217i (h) = y \u2217 i (\u2205). (70)\nThus, the value of the joint policy \u3008x\u2217i , q\u2212i\u3009 can be expressed either as\nV(\u03b1, \u3008x\u2217i , q\u2212i\u3009) = \u2211\nh\u2208Ei\n{\n\u2211\nj\u2032\u2208E\u2212i\nR(\u03b1, \u3008h, j\u2032\u3009) \u220f\nk\u2208I\\{i}\nqk(j \u2032 k) } x\u2217i (h) (71)\nor as\nV(\u03b1, \u3008x\u2217i , q\u2212i\u3009) = y \u2217 i (\u2205). (72)\nDue to the constraints (63) and (64) of the primal LP, there holds that\ny\u2217i (\u2205) = y \u2217 i (\u2205)\n{\n\u2211\na\u2208Ai\nx\u2217i (a) } + \u2211\nh\u2208Ni\n\u2211\no\u2208Oi\ny\u2217i (h.o) { \u2212 x\u2217i (h) + \u2211\na\u2208Ai\nx\u2217i (h.o.a) } (73)\nas constraint (63) guarantees that the first term in the braces is 1 and constraints (65) guarantee that each of the remaining terms inside the braces is 0. The right hand side of (73) can be rewritten as \u2211\na\u2208Ai\nx\u2217i (a) { y\u2217i (\u2205) \u2212 \u2211 o\u2208Oi y\u2217i (a.o) }\n+ \u2211\nh\u2208Ni\\Ai\nx\u2217i (h) { y\u2217i (\u03d5(h)) \u2212 \u2211\no\u2208Oi\ny\u2217i (h.o) }\n+ \u2211\nh\u2208Ei\nx\u2217i (h)y \u2217 i (\u03d5(h))\n= \u2211 h\u2208Ni x\u2217i (h)\n{ y\u2217i (\u03d5(h))\u2212 \u2211\no\u2208Oi\ny\u2217i (h.o) } + \u2211\nh\u2208Ei\nx\u2217i (h)y \u2217 i (\u03d5(h)) (74)\n1. As h.o is an information set, yi(h.o) is a shortcut in writing for yi(\u03d5(h.o)).\nSo, combining equations (70) and (74), we get\n\u2211\nh\u2208Ni\nx\u2217i (h) { y\u2217i (\u03d5(h)) \u2212 \u2211\no\u2208Oi\ny\u2217i (h.o) }\n+ \u2211\nh\u2208Ei\nx\u2217i (h) { y\u2217i (\u03d5(h)) \u2212 \u2211\nj\u2032\u2208E\u2212i\nR(\u03b1, \u3008h, j\u2032\u3009) \u220f\nk\u2208I\\{i}\nqk(j \u2032 k) } = 0 (75)\nIt is time to introduce supplementary variables w for each information set. These variables, usually called slack variables, are defined as:\nyi(\u03d5(h)) \u2212 \u2211\no\u2208Oi\nyi(h.o) = wi(h), \u2200h \u2208 Ni (76)\nyi(\u03d5(h)) \u2212 \u2211\nj\u2032\u2208E\u2212i\nR(\u03b1, \u3008h, j\u2032\u3009) \u220f\nk\u2208I\\{i}\nqk(j \u2032 k) = wi(h), \u2200h \u2208 Ei. (77)\nAs shown is Section C of the appendix, these slack variables correspond to the concept of regret as defined in game theory. The regret of an history expresses the loss in accumulated reward the agent incurs when he acts according to this history rather than according to a history which would belong to the optimal joint policy.\nThanks to the slack variables, we can furthermore rewrite (75) as simply\n\u2211\nh\u2208Ni\nx\u2217i (h)w \u2217 i (h) +\n\u2211\nh\u2208Ei\nx\u2217i (h)w \u2217 i (h) = 0 (78)\n\u2211\nh\u2208Hi\nx\u2217i (h)w \u2217 i (h) = 0. (79)\nNow, (79) is a sum of ni products, ni being the size of Hi. Each product in this sum is necessarily 0 because both xi(h) and wi(h) are constrained to be nonnegative in the primal and the dual respectively. This property is strongly linked to the complementary slackness optimality criterion in linear programs (see, for example, Vanderbei, 2008). Hence, (79) is equivalent to\nx\u2217i (h)w \u2217 i (h) = 0, \u2200h \u2208 Hi. (80)\nBack to the framework of DEC-POMDPs, these constraints are written:\npi(h)\u00b5i(\u3008h, q\u2212i\u3009) = 0, \u2200h \u2208 Hi. (81)\nTo sum up, solving the following mathematical program would give an optimal joint policy for the DEC-POMDP. But constraints (87) are non-linear and thus prevent us from solving this program directly. The linearization of these constraints, called complementarity constraints, is the subject of the next section.\nVariables: xi(h), wi(h) \u2200i \u2208 I and \u2200h \u2208 Hi yi(\u03d5) \u2200i \u2208 I and \u2200\u03d5 \u2208 \u03a6i\nMaximize y1(\u2205) (82)\nsubject to:\n\u2211\na\u2208Ai\nxi(a) = 1 (83)\n\u2212xi(h) + \u2211\na\u2208Ai\nxi(h.o.a) = 0, \u2200i \u2208 I, \u2200h \u2208 Ni, \u2200o \u2208 Oi (84)\nyi(\u03d5(h)) \u2212 \u2211\no\u2208Oi\nyi(h.o) = wi(h), \u2200i \u2208 I, \u2200h \u2208 Ni (85)\nyi(\u03d5(h)) \u2212 \u2211\nj\u2032\u2208E\u2212i\nR(\u03b1, \u3008h, j\u2032\u3009) \u220f\nk\u2208I\\{i}\nxk(j \u2032 k) = wi(h), \u2200i \u2208 I, \u2200h \u2208 Ei (86)\nxi(h)wi(h) = 0, \u2200i \u2208 I, \u2200h \u2208 Hi (87)\nxi(h) \u2265 0, \u2200i \u2208 I, \u2200h \u2208 Hi (88)\nwi(h) \u2265 0, \u2200i \u2208 I, \u2200h \u2208 Hi (89)\nyi(\u03d5) \u2208 (\u2212\u221e,+\u221e), \u2200i \u2208 I, \u2200\u03d5 \u2208 \u03a6i (90)"}, {"heading": "5.2 Dealing with Complementarity Constraints", "text": "This section explains how the non-linear constraints xi(h)wi(h) = 0 in the previous mathematical program can be turned into sets of linear constraints and thus lead to a mixed integer linear programming formulation of the solution of a DEC-POMDP.\nConsider a complementarity constraint ab = 0 in variables a and b. Assume that the lower bound on the values of a and b is 0. Let the upper bounds on the values of a and b be respectively ua and ub. Now let c be a 0-1 variable. Then, the complementarity constraint ab = 0 can be separated into the following equivalent pair of linear constraints,\na \u2264 uac (91)\nb \u2264 ub(1\u2212 c). (92)\nIn other words, if this pair of constraints is satisfied, then it is surely the case that ab = 0. This is easily verified. c can either be 0 or 1. If c = 0, then a will be set to 0 because a is constrained to be no more than uac (and not less than 0); if c = 1, then b will be set to 0 since b is constrained to be not more than ub(1 \u2212 c) (and not less than 0). In either case, ab = 0.\nNow consider each complementarity constraint xi(h)wi(h) = 0 from the non-linear program (82)-(90) above. We wish to separate each constraint into a pair of linear constraints. We recall that xi(h) represents the weight of h and wi(h) represents the regret of h. The first requirement to convert this constraint to a pair of linear constraints is that the lower bound on the values of the two terms be 0. This is indeed the case since xi(h) and wi(h) are both constrained to be non-negative in the NLP. Next, we require upper bounds on the weights of histories and regrets of histories. We have shown in Lemma 3.1 that the upper bound on the value of xi(h) for each h is 1. For the upper bounds on the regrets of histories, we require some calculus.\nIn any policy pi of agent i there holds that \u2211\nh\u2208Ei\npi(h) = |Oi| T\u22121. (93)\nTherefore, in every i-reduced joint policy \u3008q1, q2, \u00b7 \u00b7 \u00b7 , qn\u3009 \u2208 X\u2212i, there holds\n\u2211\nj\u2032\u2208E\u2212i\n\u220f\nk\u2208I\\{i}\nqk(j \u2032 k) =\n\u220f\nk\u2208I\\{i}\n|Ok| T\u22121 (94)\nSince the regret of a terminal history h of agent i given \u3008q1, q2, \u00b7 \u00b7 \u00b7 , qn\u3009 is defined as\n\u00b5i(h, q) = max h\u2032\u2208\u03d5(h)\n\u2211\nj\u2032\u2208E\u2212i\n\u220f\nk\u2208I\\{i}\nqk(j \u2032 k)\n{ R(\u03b1, \u3008h\u2032, j\u2032\u3009)\u2212R(\u03b1, \u3008h, j\u2032\u3009) } , (95)\nwe can conclude that an upper bound Ui(h) on the regret of a terminal history h \u2208 Ei of agent i is,\nUi(h) = \u220f\nk\u2208I\\{i}\n|Ok| T\u22121\n{\nmax h\u2032\u2208\u03d5(h) max j\u2032\u2208E\u2212i R(\u03b1, \u3008h\u2032, j\u2032\u3009)\u2212 min j\u2032\u2032\u2208E\u2212i R(\u03b1, \u3008h, j\u2032\u2032\u3009)\n}\n. (96)\nNow let us consider the upper bounds on the regrets of non-terminal histories. Let \u03d5 be an information set of length t of agent i. Let Ei(\u03d5) \u2286 Ei denote the set of terminal histories of agent i such the first 2t elements of each history in the set are identical to \u03d5. Let h be a history of length t \u2264 T of agent i. Let Ei(h) \u2286 Ei denote the set of terminal histories such that the first 2t - 1 elements of each history in the set are identical to h. Since in any policy pi of agent i, there holds\n\u2211\nh\u2032\u2208Ei(h)\npi(h \u2032) \u2264 |Oi| T\u2212t (97)\nwe can conclude that an upper bound Ui(h) on the regret of a nonterminal history h \u2208 Ni of length t agent i is\nUi(h) = Li\n{\nmax h\u2032\u2208Ei(\u03d5(h)) max j\u2032\u2208E\u2212i R(\u03b1, \u3008h\u2032, j\u2032\u3009)\u2212 min g\u2208Ei(h) min j\u2032\u2032\u2208E\u2212i R(\u03b1, \u3008g, j\u2032\u2032\u3009)\n}\n(98)\nwhere\nLi = |Oi| T\u2212t\n\u220f\nk\u2208I\\{i}\n|Ok| T\u22121. (99)\nNotice that if t = T (that is, h is terminal) (98) reduces to (96).\nSo, the complementarity constraint xi(h)wi(h) = 0 can be separated into a pair of linear constraints by using a 0-1 variable bi(h) as follows,\nxi(h) \u2264 1\u2212 bi(h) (100)\nwi \u2264 Ui(h)bi(h) (101)\nbi(h) \u2208 {0, 1} (102)"}, {"heading": "5.3 Program for 2 Agents", "text": "When we combine the policy constraints (Section 3.2), the constraints we have just seen for a policy to be a best response (Sections 5.1, 5.2) and a maximization of the value of the joint policy, we can derive a 0-1 mixed integer linear program the solution of which is an optimal joint policy for a DEC-POMDP for 2 agents. Table 4 details this program that we will call MILP-2 agents.\nExample The formulation of the decentralized Tiger problem for 2 agents and for an horizon of 2 can be found in the appendices, in Section E.4\nThe variables of the program are the vectors xi, wi, bi and yi for each agent i. Note that for each agent i \u2208 I and for each history h of agent i, Ui(h) denotes the upper bound on the regret of history h.\nA solution (x\u2217, y\u2217, w\u2217, b\u2217) to MILP-2 agents consists of the following quantities: (i) an optimal joint policy x\u2217 = \u3008x\u22171, x \u2217 2\u3009 which may be stochastic; (ii) for each agent i = 1, 2, for each history h \u2208 Hi, w \u2217 i (h), the regret of h given the policy x \u2217 \u2212i of the other agent; (iii) for each agent i = 1, 2, for each information set \u03d5 \u2208 \u03a6i, y \u2217 i (\u03d5), the value of \u03d5 given the policy x\u2212i of the other agent; (iv) for each agent i = 1, 2, the vector b \u2217 i simply tells us which histories are not in the support of x\u2217i ; each history h of agent i such that b \u2217 i (h) = 1 is not in the support of x\u2217i . Note that we can replace y1(\u2205) by y2(\u2205) in the objective function without affecting the program. We have the following result.\nTheorem 5.1. Given a solution (x\u2217, w\u2217, y\u2217, b\u2217) to MILP-2 agents, x\u2217 = \u3008x\u22171, x \u2217 2\u3009 is an optimal joint policy in sequence-form.\nProof: Due to the policy constraints of each agent, each x\u2217i is a sequence-form policy of agent i. Due to the constraints (106)-(108), y\u2217i contains the values of the information sets of agent i given x\u2217\u2212i. Due to the complementarity constraints (109)-(110), each x \u2217 i is a best response to x\u2217\u2212i. Thus \u3008x \u2217 1, x \u2217 2\u3009 is a Nash equilibrium. Finally, by maximizing the value of the null information set of agent 1, we are effectively maximizing the value of \u3008x\u22171, x \u2217 2\u3009. Thus \u3008x\u22171, x \u2217 2\u3009 is an optimal joint policy.\nIn comparison with the MILP presented before in Table 3, MILP-2 agents should constitutes a particularly effective program in term of computation time for finding a 2- agent optimal T -period joint policy because it is a much smaller program. While the number of variables required by MILP is exponential in T and in n, the number of variables required by MILP-2 agents is exponential only in T . This represents a major reduction in size that should lead to an improvement in term of computation time."}, {"heading": "5.4 Program for 3 or More Agents", "text": "When the number of agents is more than 2, the constraint (86) of the non-linear program (82)-(90) is no longer a complementarity constraint between 2 variables that could be linearized as before. In particular, the term \u220f\nk\u2208I\\{i} xk(j \u2032 k) of the constraint (86) involves as\nmany variables as there are different agents. To linearize this term, we will restrict ourselves once again to pure joint policies and exploit some combinatorial facts on the number of histories involved. This leads to the 0-1 mixed linear program called MILP-n agents and depicted in Table 5.\nThe variables of the program MILP-n agents are the vectors xi, wi, bi and yi for each agent i and the vector z. We have the following result.\nTheorem 5.2. Given a solution (x\u2217, w\u2217, y\u2217, b\u2217, z\u2217) to MILP-n agents, x\u2217 = \u3008x\u22171, x \u2217 2, \u00b7 \u00b7 \u00b7 , x\u2217n\u3009 is a pure T -period optimal joint policy in sequence-form.\nProof: Due to the policy constraints and the domain constraints of each agent, each x\u2217i is a pure sequence-form policy of agent i. Due to the constraints (118)-(119), each y \u2217 i contains the values of the information sets of agent i given x\u2217\u2212i. Due to the complementarity constraints (122)-(123), each x\u2217i is a best response to x \u2217 \u2212i. Thus x\n\u2217 is a Nash equilibrium. Finally, by maximizing the value of the null information set of agent 1, we are effectively maximizing the value of x\u2217. Thus x\u2217 is an optimal joint policy.\nCompared to the MILP of Table 3, MILP-n agents has roughly the same size but with more real valued variables and more 0-1 variables. To be precise, MILP has a 0-1 variable for every terminal history of every agent (that is approximatively \u2211\ni\u2208I |Ai| T |Oi| T\u22121\ninteger variables) while MILP-n agents has two 0-1 variables for every terminal as well as nonterminal history of each agent (approximatively 2 \u2211\ni\u2208I(|Ai||Oi|) T integer variables)."}, {"heading": "5.5 Summary", "text": "The formulation of the solution of a DEC-POMDP and the application of the Duality Theorem for Linear Programs allow us to formulate the solution of a DEC-POMDP as the solution of a new kind of 0-1 MILP. For 2 agents, this MILP has \u201conly\u201d O(kT ) variables and constraints and is thus \u201csmaller\u201d than MILP of the previous section. Still, all these MILPS are quite large and the next section investigates heuristic ways to speed up their resolution."}, {"heading": "6. Heuristics for Speeding up the Mathematical Programs", "text": "This section focusses on ways to speed up the resolution of the various MILPs presented so far. Two ideas are exploited. First, we show how to prune the set of sequence-form policies by removing histories that will provably not be part of the optimal joint policy. These histories are called \u201clocally extraneous\u201d. Then, we give some lower and uppers bounds to the objective function of the MILPs, these bounds can sometimes be used in the \u201cbranch and bound\u201d method often used by MILP solvers to finalize the values of the integer variables."}, {"heading": "6.1 Locally Extraneous Histories", "text": "A locally extraneous history is a history that is not required to find an optimal joint policy when the initial state of the DEC-POMDP is \u03b1 because it could be replaced by a co-history without affecting the value of the joint policy. A co-history of a history h of an agent is defined to be a history of that agent that is identical to h in all aspects except for its last action. If Ai = {b, c}, the only co-history of c.u.b.v.b is the history c.u.b.v.c. The set of co-histories of a history h shall be denoted by C(h).\nFormally, a history h \u2208 Hti of length t of agent i is said to be locally extraneous if, for every probability distribution \u03b3 over the set Ht\u2212i of i-reduced joint histories of length t, there exists a history h\u2032 \u2208 C(h) such that\n\u2211\nj\u2032\u2208Ht \u2212i\n\u03b3(j\u2032) { R(\u03b1, \u3008h\u2032, j\u2032\u3009)\u2212R(\u03b1, \u3008h, j\u2032\u3009) } \u2265 0 (130)\nwhere \u03b3(j\u2032) denotes the probability of j\u2032 in \u03b3.\nAn alternative definition is as follows. A history h \u2208 Hti of length t of agent i is said to be locally extraneous if there exists a probability distribution \u03c9 over the set of co-histories of h such that for each i-reduced joint history j\u2032 of length t, there holds\n\u2211\nh\u2032\u2208C(h)\n\u03c9(h\u2032)R(\u03b1, \u3008h\u2032, j\u2032\u3009) \u2265 R(\u03b1, \u3008h, j\u2032\u3009) (131)\nwhere \u03c9(h\u2032) denotes the probability of the co-history h\u2032 in \u03c9. The following theorem justifies our incremental pruning of locally extraneous histories so that the search for optimal joint policies is faster because it is performed on a smaller set of possible support histories.\nTheorem 6.1. For every optimal T -period joint policy p\u2032 such that for some agent i \u2208 I and for a terminal history h of agent i that is locally extraneous at \u03b1, p\u2032i(h) > 0, there exists another T -period joint policy p that is optimal at \u03b1 and that is identical to p\u2032 in all respects except that pi(h) = 0.\nProof: Let p\u2032 be a T -period joint policy that is optimal at \u03b1. Assume that for some agent i \u2208 I and for a terminal history h of agent i that is locally extraneous at \u03b1, p\u2032i(h) > 0. By (130), there exists at least one co-history h\u2032 of h such that,\n\u2211\nj\u2032\u2208HT \u2212i\np\u2032\u2212i(j \u2032) { R(\u03b1, \u3008h\u2032, j\u2032\u3009)\u2212R(\u03b1, \u3008h, j\u2032\u3009) } \u2265 0. (132)\nLet q be a T -period policy of agent i that is identical to p\u2032i in all respects except that q(h \u2032) = p\u2032i(h) + p \u2032 i(h \u2032) and q(h) = 0. We shall show that q is also optimal at \u03b1. There holds,\nV(\u03b1, \u3008q, p\u2032\u2212i\u3009)\u2212 V(\u03b1, \u3008p \u2032 i, p\u2212i\u3009) =\n\u2211\nj\u2032\u2208HT \u2212i\np\u2032\u2212i(j \u2032) { R(\u03b1, \u3008h\u2032, j\u2032\u3009)q(h\u2032)\u2212R(\u03b1, \u3008h\u2032, j\u2032\u3009)p\u2032i(h \u2032)\u2212R(\u03b1, \u3008h, j\u2032\u3009)p\u2032i(h) } =\n\u2211\nj\u2032\u2208HT \u2212i\np\u2032\u2212i(j \u2032) { R(\u03b1, \u3008h\u2032, j\u2032\u3009)(q(h\u2032)\u2212 p\u2032i(h \u2032))\u2212R(\u03b1, \u3008h, j\u2032\u3009)p\u2032i(h) } =\n\u2211\nj\u2032\u2208HT \u2212i\np\u2032\u2212i(j \u2032) { R(\u03b1, \u3008h\u2032, j\u2032\u3009)p\u2032i(h)\u2212R(\u03b1, \u3008h, j \u2032\u3009)p\u2032i(h) }\nsince q(h\u2032) = p\u2032i(h) + p \u2032 i(h \u2032). Therefore,\nV(\u03b1, \u3008q, p\u2032\u2212i\u3009)\u2212 V(\u03b1, \u3008p \u2032 i, p\u2212i\u3009) =\n\u2211\nj\u2032\u2208HT \u2212i\np\u2032\u2212i(j \u2032) { R(\u03b1, \u3008h\u2032, j\u2032\u3009)\u2212R(\u03b1, \u3008h, j\u2032\u3009) } \u2265 0 (due to (132)).\nHence, p = \u3008q, p\u2032\u2212i\u3009 is also an optimal T -period joint policy at \u03b1.\nOne could also wonder if the order with which extraneous histories are pruned is important or not. To answer this question, the following theorem shows that if many co-histories are extraneous, they can be pruned in any order as:\n\u2022 either they all have the same value, so any one of them can be pruned ;\n\u2022 or pruning one of them does not change the fact that the others are still extraneous.\nTheorem 6.2. If two co-histories h1 and h2 are both locally extraneous, either their values R(\u03b1, \u3008h1, j \u2032\u3009) and R(\u03b1, \u3008h2, j \u2032\u3009)for all j\u2032 \u2208 Ht\u2212i are equal or h1 is also locally extraneous relatively to C(h) \\ {h2}.\nProof: Let C+ denotes the union C(h1) \u222a C(h2). We have immediately that C(h1) = C+ \\ {h1} and C(h2) = C\n+ \\ {h2}. h1 (resp. h2) being locally extraneous means that there exists a probability distribution \u03c91 on C(h1) (resp. \u03c92 on C(h2)) such that, for all j\n\u2032 of Ht\u2212i:\n\u2211\nh\u2032\u2208C+\\{h1}\n\u03c91(h \u2032)R(\u03b1, \u3008h\u2032, j\u2032\u3009) \u2265 R(\u03b1, \u3008h1, j \u2032\u3009) (133)\n\u2211\nh\u2032\u2208C+\\{h2}\n\u03c92(h \u2032)R(\u03b1, \u3008h\u2032, j\u2032\u3009) \u2265 R(\u03b1, \u3008h2, j \u2032\u3009) (134)\n(135)\nEq. (133) can be expanded in:\n\u03c91(h2)R(\u03b1, \u3008h2, j \u2032\u3009) +\n\u2211\nh\u2032\u2208C+\\{h1,h2}\n\u03c91(h \u2032)R(\u03b1, \u3008h\u2032, j\u2032\u3009) \u2265 R(\u03b1, \u3008h1, j \u2032\u3009). (136)\nUsing (134) in (136) gives\n\u03c91(h2) \u2211\nh\u2032\u2208C+\\{h2}\n\u03c92(h \u2032)R(\u03b1, \u3008h\u2032, j\u2032\u3009) +\n\u2211\nh\u2032\u2208C+\\{h1,h2}\n\u03c91(h \u2032)R(\u03b1, \u3008h\u2032, j\u2032\u3009) \u2265 R(\u03b1, \u3008h1, j \u2032\u3009)\n(137)\nleading to\n\u2211\nh\u2032\u2208C+\\{h1,h2}\n(\u03c91(h2)\u03c92(h \u2032) + \u03c91(h \u2032))R(\u03b1, \u3008h\u2032, j\u2032\u3009) \u2265 (1\u2212 \u03c91(h2)\u03c92(h1))R(\u03b1, \u3008h1, j \u2032\u3009) (138)\nSo, two cases are possible:\n\u2022 \u03c91(h2) = \u03c92(h1) = 1. In that case, asR(\u03b1, \u3008h2, j \u2032\u3009) \u2265 R(\u03b1, \u3008h1, j \u2032\u3009) andR(\u03b1, \u3008h1, j \u2032\u3009) \u2265\nR(\u03b1, \u3008h2, j \u2032\u3009), we have that R(\u03b1, \u3008h1, j \u2032\u3009) = R(\u03b1, \u3008h2, j \u2032\u3009) for all j\u2032 of Ht\u2212i.\n\u2022 \u03c91(h2)\u03c92(h1) < 1. In that case we have:\n\u2211\nh\u2032\u2208C+\\{h1,h2}\n\u03c91(h2)\u03c92(h \u2032) + \u03c91(h \u2032)\n1\u2212 \u03c91(h2)\u03c92(h1) R(\u03b1, \u3008h\u2032, j\u2032\u3009) \u2265 R(\u03b1, \u3008h1, j \u2032\u3009) (139)\nmeaning that even without using h2, h1 is still locally extraneous because \u03c91(h2)\u03c92(h\u2032)+\u03c91(h\u2032)\n1\u2212\u03c91(h2)\u03c92(h1) is a probability distribution over C+ \\ {h1, h2}\n\u2211\nh\u2032\u2208C+\\{h1,h2}\n\u03c91(h2)\u03c92(h \u2032) + \u03c91(h \u2032)\n1\u2212 \u03c91(h2)\u03c92(h1) =\n\u03c91(h2)(1\u2212 \u03c92(h1)) + (1\u2212 \u03c91(h2))\n1\u2212 \u03c91(h2)\u03c92(h1) (140)\n= 1\u2212 \u03c91(h2)\u03c92(h1)\n1\u2212 \u03c91(h2)\u03c92(h1) (141)\n= 1. (142)\nIn order to prune locally extraneous histories, one must be able to identify these histories. There are indeed two complementary ways for doing this.\nThe first method relies on the definition of the value of a history (see Section 3.3), that is\nR(\u03b1, \u3008h, j\u2032\u3009) = \u03a8(\u03b1, \u3008h, j\u2032\u3009)R(\u03b1, \u3008h, j\u2032\u3009). (143)\nTherefore, if\n\u03a8(\u03b1, \u3008h, j\u2032\u3009) = 0, \u2200j\u2032 \u2208 Ht\u2212i (144)\nis true for a history h, then that means that every joint history of length t occurring from \u03b1 of which the given history is a part of has an a priori probability of 0. thus, h is clearly extraneous. Besides, every co-history of h will also be locally extraneous as they share the same probabilities.\nA second test is needed because some locally extraneous histories do not verify (144). Once again, we turn to linear programing and in particular to the following linear program\nVariables: y(j), \u2200j \u2208 Ht\u2212i\nMinimize \u01eb (145)\nsubject to:\n\u2211\nj\u2032\u2208Ht \u2212i\ny(j\u2032) { R(\u03b1, \u3008h\u2032, j\u2032\u3009)\u2212R(\u03b1, \u3008h, j\u2032\u3009) } \u2264 \u01eb, \u2200h\u2032 \u2208 C(h) (146)\n\u2211\nj\u2032\u2208Ht \u2212i\ny(j\u2032) = 1 (147)\ny(j\u2032) \u2265 0, \u2200j\u2032 \u2208 Ht\u2212i (148) because of the following Lemma.\nLemma 6.1. If, it exists a solution (\u01eb\u2217, y\u2217) to the linear program (145)-(148) where \u01eb\u2217 \u2265 0, then h is locally extraneous.\nProof : Let (\u01eb\u2217, y\u2217) be a solution to the LP (145)-(148). y\u2217 is a probability distribution over Ht\u2212i due to constraints (147)-(148). If \u01eb\n\u2217 \u2265 0, since we are minimizing \u01eb, due to constraints (146), we have that for every y\u0303 \u2208 \u2206(Ht\u2212i), and for every co-history h \u2032 of h\n\u2211\nj\u2032\u2208Ht \u2212i\ny\u0303(j\u2032) { R(\u03b1, \u3008h\u2032, j\u2032\u3009)\u2212R(\u03b1, \u3008h, j\u2032\u3009) } \u2265 \u01eb\u2217. (149)\nTherefore, by definition, h is locally extraneous.\nThe following procedure identifies all locally extraneous terminal histories of all the agents and proceed to their iterative pruning. This is mainly motivated by Theorems 6.1 and 6.2 for effectively removing extraneous histories. The procedure is similar to the procedure of iterated elimination of dominated strategies in a game (Osborne & Rubinstein, 1994). The concept is also quite similar to the process of policy elimination in the backward step of the dynamic programming for partially observable stochastic games (Hansen et al., 2004).\n\u2022 Step 1: For each agent i \u2208 I, set H\u0303Ti to Ei. Let H\u0303 T denote the set \u00d7i\u2208IH\u0303 T i . For\neach joint history j \u2208 H\u0303T , compute and store the value R(\u03b1, j) of j and the joint observation sequence probability \u03a8(\u03b1, j) of j.\n\u2022 Step 2: For each agent i \u2208 I, for each history h \u2208 H\u0303Ti , if for each i-reduced joint history j\u2032 \u2208 H\u0303T\u2212i, \u03a8(\u03b1, \u3008h, j \u2032\u3009) = 0, remove h from H\u0303Ti .\n\u2022 Step 3: For each agent i \u2208 I, for each history h \u2208 H\u0303Ti do as follows: If C(h) \u2229 H\u0303 T i\nis non-empty, check whether h is locally extraneous or not by setting up and solving LP (145)-(148). When setting the LP, replace Ht\u2212i by the set H\u0303 T \u2212i and the set C(h) by the set C(h) \u2229 H\u0303Ti . If upon solving the LP, h is found to be locally extraneous at \u03b1, remove h from H\u0303Ti .\n\u2022 Step 4: If in Step 3 a history (of any agent) is found to be locally extraneous, go to Step 3. Otherwise, terminate the procedure.\nThe procedure builds the set H\u0303Ti for each agent i. This set contains every terminal history of agent i that is required for finding an optimal joint policy at \u03b1, that is every terminal history that is not locally extraneous at \u03b1. For each agent i, every history that is in HTi but not in H\u0303 T i is locally extraneous. The reason for reiterating Step 3 is that if a history h of some agent i is found to be locally extraneous and consequently removed from H\u0303Ti , it is possible that a history of some other agent that was previously not locally extraneous now becomes so, due to the removal of h from H\u0303Ti . Hence, in order to verify if this is the case for any history or not, we reiterate Step 3.\nBesides, Step 2 of the procedure below also prunes histories that are impossible given the model of the DEC-POMDP because their observation sequence can not be observed.\nA last pruning step can be taken in order to remove non-terminal histories that can only lead to extraneous terminal histories. This last step is recursive, starting from histories of horizon T \u2212 1, we remove histories hi that have no non-extraneous terminal histories, that is, histories hi such that all h.o.a are extraneous for a \u2208 Ai and o \u2208 Oi.\nComplexity The algorithm for pruning locally extraneous histories has an exponential complexity. Each joint history must be examined to compute its value and its occurence probability. Then, in the worst case, a Linear Program can be run for every local history in order to check it is extraneous or not. Experimentations are needed to see if the prunning is really interesting."}, {"heading": "6.2 Cutting Planes", "text": "Previous heuristics were aimed at reducing the search space of the linear programs, which incidentally has a good impact on the time needed to solve these programs. Another option which directly aims at reducing the computation time is to use cutting planes (Cornue\u0301jols, 2008). A cut (Dantzig, 1960) is a special constraint that identifies a portion of the set of feasible solutions in which the optimal solution provably does not lie. Cuts are used in conjunction with various \u201cbranch and bounds\u201d mechanism to reduce the number of possibles combination of integer variables that are examined by a solver.\nWe will present two kinds of cuts."}, {"heading": "6.2.1 Upper Bound for the Objective Function", "text": "The first cut we propose is the upper bound POMDP cut. The value of an optimal T -period joint policy at \u03b1 for a given DEC-POMDP is bounded from above by the value V\u2217P of an optimal T -period policy at \u03b1 for the POMDP derived from the DEC-POMDP. This derived POMDP is the DEC-POMDP but assuming a centralized controller (i.e. with only one agent using joint-actions).\nA sequence-form representation of the POMDP is quite straightforward. Calling H the set \u222aTt=1H\nt of joint histories of lengths less than or equal to T and N the set H\\E of nonterminal joint histories, a policy for POMDP with horizon T in sequence-form is a function q from H to [0, 1] such that:\n\u2211\na\u2208A\nq(a) = 1 (150)\n\u2212q(j) + \u2211\na\u2208A\nq(j.o.a) = 0, \u2200j \u2208 N , \u2200o \u2208 O (151)\nThe value VP (\u03b1, q) of a sequence-form policy q is then given by:\nVP (\u03b1, q) = \u2211\nj\u2208E\nR(\u03b1, j)q(j) (152)\nThereby, the solution y\u2217 of the linear program of Table 6 is an optimal policy for the POMDP of horizon T and the optimal value of the POMDP is \u2211\nj\u2208E R(\u03b1, j)y \u2217(j). So, the\nvalue V(\u03b1, p\u2217) of the optimal joint policy p\u2217 = \u3008p\u22171, p \u2217 2, \u00b7 \u00b7 \u00b7 , p \u2217 n\u3009 of the DEC-POMDP is bounded by above by the value VP (\u03b1, q \u2217) of the associated POMDP.\nComplexity The complexity of finding an upper bound is linked to the complexity of solving a POMDP which, as showed by Papadimitriou and Tsitsiklis (1987), can be PSPACE (i.e. require a memory that is polynomial in the size of the problem, leading to a possible exponential complexity in time). Once again, only experimentation can help us decide in which cases the upper bound cut is efficient."}, {"heading": "6.2.2 Lower Bound for the Objective Function", "text": "In the case of DEC-POMDPs with non-negative reward, it is trivial to show that the value of a T -period optimal policy is bounded from below by the value of the T\u22121 horizon optimal value. So, in the general case, we have to take into account the lowest reward possible to compute this lower bound and we can say that:\n\u2211\nj\u2208E\nR(\u03b1, j)z(j) \u2265 VT\u22121(\u03b1) + min a\u2208A min s\u2208S R(s, a) (157)\nwhere VT\u22121 is the value of the optimal policy with horizon T \u2212 1. The reasoning leads to an iterated computation of DEC-POMDPs of longer and longer horizon, reminiscent of the MAA* algorithm (Szer et al., 2005). Experiments will tell if it is worthwhile to solve bigger and bigger DEC-POMDPs to take advantage of a lower bound or if it is better to directly tackle the T horizon problem without using any lower bound.\nComplexity To compute the lower bound, one is required to solve a DEC-POMDP whith an horizon that is one step shorter than the current horizon. The complexity is clearly at least exponential. In our experiments, the value of a DEC-POMDP has been used for the same DEC-POMDP with a bigger horizon. In such case, the computation time has been augmented by the best time to solve the smaller DEC-POMDP."}, {"heading": "6.3 Summary", "text": "Pruning locally extraneous histories and using the bounds of the objective function can be of practical use for software solving the MILPs presented in this paper. Pruning histories means that the space of policies used by the MILP is reduced and, because the formulation of the MILP depends on combinatorial characteristics of the DEC-POMDP, these MILP must be altered as show in Appendix D.\nValidity As far as cuts are concerned, they do not alter the solution found by the MILPs, so a solution to these MILPs is still an optimal solution to the DEC-POMDP. When extraneous histories are pruned, at least one valid policy is left as a solution because, in step 3 of the algorithm, an history is pruned only if it has other co-histories left. Besides, this reduced set of histories can still be used to build an optimal policy because of Theroem 6.1. As a consequence, the MILP build on this reduced set of histories admit a solution and this solution is one optimal joint policy.\nIn the next section, experimental results will allow us to understand in which cases the heuristics introduced can be useful."}, {"heading": "7. Experiments", "text": "The mathematical programs and the heuristics designed in this paper are tested on four classical problems found in the literature. For these problems, involving two agents, we have mainly compared the computation time required to solve a DEC-POMDP using Mixed Integer Linear Programming methods to computation time reported for methods found in the literature. Then we have tested our programs on three-agent problems randomly designed.\nMILP and MILP-2 are solved using the \u201ciLog Cplex 10\u201d solver \u2013 a commercial set of Java packages \u2013 that relies on a combination of the \u201cSimplex\u201d and \u201cBranch and Bounds\u201d methods (Fletcher, 1987). The software is run on an Intel P4 at 3.4 GHz with 2Gb of RAM using default configuration parameters. For the mathematical programs, different combination of heuristics have been evaluated: pruning of locally extraneous histories, using a lower bound cut and using an upper bound cut, respectively denoted \u201cLOC\u201d, \u201cLow\u201d and \u201cUp\u201d in the result tables to come.\nThe Non-Linear Program (NLP) of Section 3.4 has been evaluated by using various solvers from the NEOS website (http://www-neos.mcs.anl.gov ), even thought this method does not guarantee an optimal solution to the DEC-POMDP. Three solvers have been used: LANCELOT (abbreviated as LANC.), LOQO and SNOPT.\nThe result tables also report results found in the literature for the following algorithms: DP stands for Dynamic Programming from Hansen et al. (2004); DP-LPC is an improved version of Dynamic Programming where policies are compressed in order to fit more of them in memory and speed up their evaluation as proposed by Boularias and Chaib-draa (2008); PBDP is an extension of Dynamic Programming where pruning is guided by the knowledge of reachable belief-states as detailed in the work of Szer and Charpillet (2006); MAA* is a heuristically guided forward search proposed by Szer et al. (2005) and a generalized and improved version of this algorithm called GMAA* developed by Oliehoek et al. (2008).\nThe problems selected to evaluate the algorithms are detailed in the coming subsections. They have been widely used to evaluate DEC-POMDPs algorithms in the literature and their \u201ccomplexity\u201d, in term of space size, is summarized in Table 7."}, {"heading": "7.1 Multi-Access Broadcast Channel Problem", "text": "Several versions of the Multi-Access Broadcast Channel (MABC) problem can be found in the literature. We will use the description given by Hansen et al. (2004) that allows this problem to be formalized as a DEC-POMDP.\nIn the MABC, we are given two nodes (computers) which are required to send messages to each other over a common channel for a given duration of time. Time is imagined to be split into discrete periods. Each node has a buffer with a capacity of one message. A buffer that is empty in a period is refilled with a certain probability in the next period. In a period, only one node can send a message. If both nodes send a message in the same period, a collision of the messages occurs and neither message is transmitted. In case of a collision, each node is intimated about it through a collision signal. But the collision\nsignaling mechanism is faulty. In case of a collision, with a certain probability, it does not send a signal to either one or both nodes.\nWe are interested in pre-allocating the channel amongst the two nodes for a given number of periods. The pre-allocation consists of giving the channel to one or both nodes in a period as a function of the node\u2019s information in that period. A node\u2019s information in a period consists only of the sequence of collision signals it has received till that period.\nIn modeling this problem as a DEC-POMDP, we obtain a 2-agent, 4-state, 2-actionsper-agent, 2-observations-per-agent DEC-POMDP whose components are as follows.\n\u2022 Each node is an agent.\n\u2022 The state of the problem is described by the states of the buffers of the two nodes. The state of a buffer is either Empty or Full. Hence, the problem has four states: (Empty, Empty), (Empty, Full), (Full, Empty) and (Full, Full).\n\u2022 Each node has two possible actions, Use Channel and Don\u2019t Use Channel.\n\u2022 In a period, a node may either receive a collision signal or it may not. So each node has two possible observations, Collision and No Collision.\nThe initial state of the problem \u03b1 is (Full, Full). The state transition function P, the joint observation function G and the reward function R have been taken from Hansen et al. (2004). If both agents have full buffers in a period, and both use the channel in that period, the state of the problem is unchanged in the next period; both agents have full buffers in the next period. If an agent has a full buffer in a period and only he uses the channel in that period, then his buffer is refilled with a certain probability in the next period. For agent 1, this probability is 0.9 and for agent 2, this probability is 0.1. If both agents have empty buffers in a period, irrespective of the actions they take in that period, their buffers get refilled with probabilities 0.9 (for agent 1) and 0.1 (for agent 2).\nThe observation function G is as follows. If the state in a period is (Full, Full) and the joint action taken by the agents in the previous period is (Use Channel, Use Channel), the probability that both receive a collision signal is 0.81, the probability that only one of them receives a collision signal is 0.09 and the probability that neither of them receives a collision signal is 0.01. For any other state the problem may be in a period and for any other joint action the agents may have taken in the previous period, the agents do not receive a collision signal.\nThe reward function R is quite simple. If the state in a period is (Full, Empty) and the joint action taken is (Use Channel, Don\u2019t Use Channel) or if the state in a period is (Empty, Full) and the joint action taken is (Don\u2019t Use Channel, Use Channel), the reward is 1; for any other combination of state and joint action, the reward is 0.\nWe have evaluated the various algorithms on this problem for three different horizons (3, 4 and 5) and the respective optimal policies have a value of 2.99, 3.89 and 4.79. Results are detailed in Table 8 where, for each horizon and algorithm, the value and the computation time for the best policy found are given.\nThe results show that the MILP compares favorably to more classical algorithms except for GMAA* that is always far better for horizon 4 and, for horizon 5, roughly within the\nsame order of magnitude as MILP with the more pertinent heuristics. As expected, apart for the simplest setting (horizon of 3), NLP based resolution can not find the optimal policy of the DEC-POMDP, but the computation time is lower than the other methods. Among MILP methods, MILP-2 is better than MILP even with the best heuristics for horizon 3 and 4. When the size of the problem increases, heuristics are the only way for MILPs to be able to cope with the size of the problem. The table also shows that, for the MABC problem, pruning extraneous histories using the LOC heuristic is always a good method and further investigation revealed that 62% of the heuristics proved to be locally extraneous. As far are cutting bounds are concerned, they don\u2019t seem to be very useful at first (for horizon 3 and 4) but are necessary for MILP to find a solution for horizon 5. For this problem, one must also have in mind that there is only one optimal policy for each horizon."}, {"heading": "7.2 Multi-Agent Tiger Problem", "text": "As explained in section 2.2, the Multi-Agent Tiger problem (MA-Tiger) has been introduced in the paper from Nair et al. (2003). From the general description of the problem, we ob-\ntain a 2-agent, 2-state, 3-actions-per-agent, 2-observations-per agent DEC-POMDP whose elements are as follows.\n\u2022 Each person is an agent. So, we have a 2-agent DEC-POMDP.\n\u2022 The state of the problem is described by the location of the tiger. Thus, S consists of two states Left (tiger is behind the left door) and Right (tiger is behind the right door).\n\u2022 Each agent\u2019s set of actions consists of three actions: Open Left (open the left door), Open Right (open the right door) and Listen (listen).\n\u2022 Each agent\u2019s set of observations consists of two observations: Noise Left (noise coming from the left door) and Noise Right (noise coming from the right door).\nThe initial state is an equi-probability distribution over S. The state transition function P, joint observation function G and the reward function R are taken from the paper by Nair et al. (2003). P is quite simple. If one or both agents opens a door in a period, the state of the problem in the next period is set back to \u03b1. If both agents listen in a period, the state of the process in unchanged in the next period. G, given in Table (9), is also quite simple. Nair et al. (2003) describes two reward functions called \u201cA\u201d and \u201cB\u201d for this problem, here we report only results for reward function \u201cA\u201d, given in Table 10, as the behavior of the algorithm are similar for both reward functions. The optimal value of this problem for horizons 3 and 4 are respectively 5.19 and 4.80.\nFor horizon 3, dynamic programming or forward search methods are generally better than mathematical programs. But this is the contrary for horizon 4 were the computation time of MILP with the \u201cLow\u201d heuristic is significatively better than any other, even GMAA*. Unlike MABC, the pruning of extraneous histories does not improve methods based on MILP, this is quite understandable as deeper investigations showed that there are no extraneous histories. Using lower cutting bounds proves to be very efficient and can be seen as a kind of heuristic search for the best policy ; not directly in the set of policies (like\nGMAA*) but in the set of combination of histories, which may explain the good behavior of MILP+Low.\nIt must also be noted that for this problem, approximate methods like NLP but also other algorithms not depicted here like the \u201cMemory Bound Dynamic Programming\u201d of Seuken and Zilberstein (2007) are able to find the optimal solution. And, once again, methods based on a NLP are quite fast and sometimes very accurate."}, {"heading": "7.3 Fire Fighters Problem", "text": "The problem of the Fire Fighters (FF) has been introduced as a new benchmark by Oliehoek et al. (2008). It models a team of n fire fighters that have to extinguish fires in a row of nh houses.\nThe state of each house is given by an integer parameter, called the fire level f , that takes discrete value between 0 (no fire) and nf (fire of maximum severity). At every time step, each agent can move to any one house. If two agents are at the same house, they extinguish any existing fire in that house. If an agent is alone, the fire level is lowered with a 0.6 probability if a neighbor house is also burning or with a 1 probability otherwise. A burning house with no fireman present will increase its fire level f by one point with a 0.8 probability if a neighbor house is also burning or with a probability of 0.4 otherwise. An unattended non-burning house can catch fire with a probability of 0.8 if a neighbor house is burning. After an action, the agents receive a reward of \u2212f for each house that is still burning. Each agent can only observe if there are flames at its location with a probability that depends on the fire level: 0.2 if f = 0, 0.5 if f = 1 and 0.8 otherwise. At start, the agents are outside any of the houses and the fire level of the houses is sampled from a uniform distribution.\nThe model has the following characteristics:\n\u2022 na agents, each with nh actions and nf possible informations.\n\u2022 There are nnhf . ( na+nh\u22121 na ) states as there are nnhf possible states for the burning houses\nand ( na+nh\u22121 na )\ndifferent ways to distribute the na fire fighters in the houses. For example, 2 agents with 3 houses and 3 levels of fire lead to 9\u00d7 6 = 54 states. But, it\nis possible to use the information from the joint action to reduce the number of state needed in the transition function to simply nnhf , meaning only 27 states for 2 agents with 3 houses and 3 levels of fire.\n\u2022 Transition, observation and reward functions are easily derived from the above description.\nFor this problem, dynamic programming based methods are not tested as the problem formulation is quite new. For horizon 3, the value of the optimal policy given by Oliehoek et al. (2008) (\u22125.73) differs from the value found by the MILP algorithms (\u22125.98) whereas both methods are supposed to be exact. This might come from slight differences in our respective formulation of the problems. For horizon 4, Oliehoek et al. (2008) report an optimal value of (\u22126.57).\nFor this problem, MILP methods are clearly outperformed by MAA* and GMAA*. Only NLP methods, which give an optimal solution for horizon 3, are better in term of computation time. It might be that NLP are also able to find optimal policies for horizon 4 but as our setting differs from the work of Oliehoek et al. (2008), we are not able to check if the policy found is really the optimal. The main reason for the superiority of forward search method lies in the fact that this problem admits many many optimal policies with the same value. In fact, for horizon 4, MILP-based methods find an optimal policy quite quickly (around 82s for MILP-2) but then, using branch-and-bound, must evaluate all the other potential policies before knowing that it indeed found an optimal policy. Forward search methods stop nearly as soon as they hit one optimal solution.\nHeuristics are not reported as, not only do they not improve the performance of MILP but they take away some computation time and thus the results are worse."}, {"heading": "7.4 Meeting on a Grid", "text": "The problem called \u201cMeeting on a grid\u201d deals with two agents that want to meet and stay together in a grid world. It has been introduced in the work of Bernstein, Hansen, and Zilberstein (2005).\nIn this problem, we have two robots navigating on a two-by-two grid world with no obstacles. Each robot can only sense whether there are walls to its left or right, and the goal is for the robots to spend as much time as possible on the same square. The actions are to move up, down, left or right, or to stay on the same square. When a robot attempts to move to an open square, it only goes in the intended direction with probability 0.6, otherwise it randomly either goes in another direction or stays in the same square. Any move into a wall results in staying in the same square. The robots do not interfere with each other and cannot sense each other. The reward is 1 when the agents share a square, and 0 otherwise. The initial state distribution is deterministic, placing both robots in the upper left corner of the grid.\nThe problem is modelled as a DEC-POMDP where:\n\u2022 There are 2 agents, each one with 5 actions and observations (wall on left, wall on right).\n\u2022 There are 16 states, since each robot can be in any of 4 squares at any time.\n\u2022 Transition, observation and reward functions are easily derived from the above description.\nFor this problem, dynamic programming based methods are not tested as the problem formulation is quite new. This problem is intrinsically more complex that FF and as such is only solved for horizon 2 and 3. Again, optimal value found by our method differ from the value reported by Oliehoek et al. (2008). Whereas we found that the optimal values are 1.12 and 1.87 for horizon 2 and 3, they report optimal values of 0.91 and 1.55.\nResults for this problem have roughly the same pattern that the results for the FF problem. MAA* and GMAA* are quicker than MILP, but this time MILP is able to find an optimal solution for horizon 3. NLP methods give quite good results but they are slower than GMAA*. As for the FF, there are numerous optimal policies and MILP methods are not able to detect that the policy found quickly is indeed optimal.\nAgain, heuristics are not reported as, not only do they not improve the performance of MILP but they take away some computation time and thus the results are worse."}, {"heading": "7.5 Random 3-Agent Problems", "text": "To test our approach on problems with 3 agents, we have used randomly generated DECPOMDPs where the state transition function, the joint observation function and the reward functions are randomly generated. The DEC-POMDPs have 2 actions and 2 observations per agent and 50 states. Rewards are randomly generated integers in the range 1 to 5. The complexity of this family of problem is quite similar to the complexity of the MABC problem (see Section 7.1).\nIn order to assess the \u201creal\u201d complexity of this Random problem, we have first tested a two-agent version of the problem for a horizon of 4. Results averaged over 10 runs of the programs are given in Table 14. When compared to the MABC problem which seemed of comparable complexity, the Random problem proves easier to solve (120s vs 900s). For this problem, the number of 0-1 variable is relatively small, as such it does not weight too much on the resolution time of MILP-2 which is thus faster.\nResults for a three-agent problem with horizon 3 are given in Table 15, once again averaged over 10 runs. Even though the size of the search space is \u201csmaller\u201d in that case (for 3 agents and a horizon of 3, there are 9 \u00d7 1021 policies whereas the problem with 2 agents and horizon 4, there are 1.5 \u00d7 1051 possible policies), the 3 agent problems seems more difficult to solve, demonstrating that one of the big issue is policy coordination. Here, heuristics bring a significative improvement on the resolution time of MILP. As predicted, MILP-n is not very efficient and is only given for completeness."}, {"heading": "8. Discussion", "text": "We have organized the discussion in two parts. In the first part, we analyze our results and offer explanations on the behavior of our algorithms and the usefulness of heuristics. Then, in a second part, we explicitely address some important questions."}, {"heading": "8.1 Analysis of the Results", "text": "From the results, it appears that MILP methods are a better alternative to Dynamic Programming methods for solving DEC-POMDPs but are globally and generally clearly outperformed by forward search methods. The structure and thus the characteristics of the problem have a big influence on the efficiency of the MILP methods. Whereas it seems that the behavior of GMAA* in terms of computation time is quite correlated with the complexity of the problem (size of the action and observation spaces), MILP methods seem sometimes less correlated to this complexity. It is the case for the MABC problem (many extraneous histories can be pruned) and the MA-Tiger problem (special structure) where they outperform GMAA*. On the contrary, when many optimal policies exists, forward search methods like GMAA* are clearly a better choice. Finally, Non-Linear Programs, even though they can not guarantee an optimal solution, are generally a good alternative as they are sometimes able to find a very good solution and their computation time is often better than GMAA*. This might prove useful for approximate heuristic-driven forward searches.\nThe computational record of the two 2-agent programs shows that MILP-2 agents is slower thanMILP when the horizon grows. There are two reasons to which the sluggishness of MILP-2 agents may be attributed. The time taken by the branch and bound (BB) method to solve a 0-1 MILP is inversely proportional to the number of 0-1 variables in the MILP. MILP-2 agents has many more 0-1 variables than MILP event hough the total number of variables in it is exponentially less than in MILP. This is the first reason. Secondly, MILP-2 agents is a more complicated program than MILP; it has many more constraints than MILP. MILP is a simple program, concerned only with finding a subset of a given set. In addition to finding weights of histories, MILP also finds weights of terminal joint histories. This is the only extra or superfluous quantity it is forced to find. On the other hand, MILP-2 agents takes a much more circuitous route, finding many more superfluous quantities than MILP. In addition to weights of histories, MILP-2 agents also finds supports of policies, regrets of histories and values of information sets. Thus, the\nrelaxation of MILP-2 agents takes longer to solve than the relaxation of MILP. This is the second reason for the slowness with which the BB method solves MILP-2 agents.\nFor bigger problems, namely Fire-Fighters and Meeting on a Grid, when the horizon stays small, MILP-2 agents can compete with MILP because of its slightly lower size. Its complexity grows like O((|Ai||Oi|) T ) whereas it grows like O((|Ai||Oi|) 2T ) for MILP. But that small difference does not hold long as the number of integer variables quickly lessens the efficiency of MILP-2 agents.\nAs far as heuristic are concerned, they proved to be invaluable for some problems (MABC and MA-Tiger) and useless for others. In the case of MABC, heuristics are very helpful to prune a large number of extraneous heuristics but ultimately, it is the combination with the upper bound cut that it the more efficient when the horizon grows. In the case of MA-Tiger, although no extraneous histories are found, using the lower bound cut heuristic with MILP leads to the quickest algorithm for solving the problem with a horizon of 4. For other problems, heuristics are more of a burden as they are too greedy in computation time to speed up the resolution. For example, for the \u201cGrid Meeting\u201d problem, the time taken to prune extraneous histories is bigger than the time saved for solving the problem.\nAs a result, the added value of using heuristics depends on the nature of the problem (as depicted in Table 16) but, right now, we are not able to predict their usefulness without trying them.\nWe also emphasize that the results given here lie at the limit of what is possible to solve in an exact manner given the memory of the computer used for the resolution, especially in terms of the horizon. Furthermore, as the number of agent increases, the length of the horizon must be decreased for the problems to still be solvable."}, {"heading": "8.2 Questions", "text": "The mathematical programing approach presented in this paper raises different questions. We have explicitly addressed some of the questions that appears important to us."}, {"heading": "Q1: Why is the sequence-form approach not entirely doomed by its exponential complexity?", "text": "As the number of sequence-form joint policies grows doubly exponentially with the horizon and the number of agents, the sequence-form approach seems doomed, even compared to dynamic programming which is doubly exponential in the worst cases only. But, indeed, some arguments must be taken into consideration.\n\u201cOnly\u201d an exponential number of individual histories need to be evaluated. The \u201cjoint\u201d part of the sequence-form is left to the MILP solver. And every computation done on a particular history, like computing its value or checking if it is extraneous, has a greater \u201creusability\u201d than computations done on entire policies. An history is shared by many more joint policies than an individual policy. In some way, sequence-form allows us to work on reusable part of policies without having to work directly in the world of distributions on the set of joint-policies.\nThen, the MILPs derived from the sequence-form DEC-POMDPs need a memory size which grows \u201conly\u201d exponentially with the horizon and the number of agents. Obviously, such a complexity is quickly overwhelming but it is also the case of every other exact method so far. As shown by the experiments, the MILP approach derived from the sequence-form compares quite well with dynamic programming, even if outperformed by forward methods like GMAA*."}, {"heading": "Q2: Why does MILP sometimes take so little time to find an optimal joint policy when compared to existing algorithms?", "text": "Despite the complexity of our MILP approach, three factors contribute to the relative efficiency of MILP.\n1. First, the efficiency of linear programming tools themselves. In solving MILP, the BB method solves a sequence of linear programs using the simplex algorithm. Each of these LPs is a relaxation of MILP. In theory, the simplex algorithm requires in the worst case an exponential number of steps (in the size of the LP) in solving a LP2, but it is well known that, in practice, it usually solves a LP in a polynomial number of steps (in the size of the LP). Since the size of a relaxation of MILP is exponential in the horizon, this means that, roughly speaking, the time taken to solve a relaxation of MILP is \u201conly\u201d exponential in the horizon whereas it can be doubly exponential for other methods.\n2. The second factor is the sparsity of the matrix of coefficients of the constraints of MILP. The sparsity of the matrix formed by the coefficients of the constraints of\n2. This statement must be qualified: this worst case time requirement has not been demonstrated for all variants of the simplex algorithm. It has been demonstrated only for the basic version of the simplex algorithm.\nan LP determines in practice the rate with which a pivoting algorithm such as the simplex solves the LP (this also applies to Lemke\u2019s algorithm in the context of an LCP). The sparser this matrix, the lesser the time required to perform elementary pivoting (row) operations involved in the simplex algorithm and the lesser the space required to model the LP.\n3. The third factor is the fact that we supplement MILP with cuts; the computational experience clearly shows how this speeds up the computations. While the first two factors were related to solving a relaxation of MILP (i.e., an LP), this third factor has an impact on the BB method itself. The upper bound cut identifies an additional terminating condition for the BB method, thus enabling it to terminate earlier than in the absence of this condition. The lower bound cut attempts to shorten the list of active subproblems (LPs) which the BB method solves sequentially. Due to this cut, the BB method has potentially a lesser number of LPs to solve. Note that in inserting the lower bound cut, we are emulating the forward search properties of the A* algorithm.\nQ3: How do we know that the MILP-solver (iLog\u2019s \u201cCplex\u201d in our experiments) is not the only reason for the speedup?\nClearly, our approach would be slower, even sometime slower than a classical dynamic programming approach if we had used another program for solving our MILPs as we experimented also our MILPs with solvers from the NEOS website that were indeed very very slow. It is true that Cplex, the solver we have used in our experiments, is quite optimized. Nevertheless, it is exactly one of the points we wanted to experiment with in this paper: one of the advantages of formulating a DEC-POMDP as a MILP is the possibility to use the fact that, as mixed integer linear programs are very important for the industrial world, optimized solvers do exist. Then, we had to formulate a DEC-POMDP as a MILP and this is mostly what this paper is about."}, {"heading": "Q4: What is the main contribution of this paper?", "text": "As stated earlier in the paper, current algorithms for DEC-POMDPs were largely inspired by POMDPs algorithms. Our main contribution was to pursue an entirely different approach, i.e., mixed integer linear programming. As such, we have learned a lot about DEC-POMDPs and about the pro & con of this mathematical programming approach. This has lead to the formulation of new algorithms.\nIn designing these algorithms, we have, first of all, drawn attention to a new representation of a policy, namely the sequence form of a policy, introduced by Koller, Megiddo and von Stengel. The sequence form of a policy is not a compact representation of the policy of an agent, but it does afford a compact representation of the set of policies of the agent.\nThe algorithms we have proposed for finite horizon DEC-POMDPs are mathematical programming algorithms. To be precise, they are 0-1 MILPs. In the MDP domain,\nmathematical programming has been long used for solving the infinite horizon case. For instance, an infinite horizon MDP can be solved by a linear program (d\u2019Epenoux, 1963). More recently, mathematical programming has been directed at infinite horizon POMDPs and DEC-POMDPs. Thus, an infinite horizon DEC-MDP (with state transition independence) can be solved by a 0-1 MILP (Petrik & Zilberstein, 2007) and an infinite horizon POMDP or DEC-POMDP can be solved (for local optima) by a nonlinear program (Amato, Bernstein, & Zilberstein, 2007b, 2007a). The finite horizon case \u2013 much different in character than the infinite horizon case \u2013 has been dealt with using dynamic programming. As stated earlier, whereas dynamic programming has been quite successful for finite horizon MDPs and POMDPs, it has been less so for finite horizon DEC-POMDPs.\nIn contrast, in game theory, mathematical programming has been successfully directed at games of finite horizon. Lemke\u2019s algorithm (1965) for two-player normal form games, the Govindan-Wilson algorithm (2001) for n-player normal form games and the Koller, Megiddo and von Stengel approach (which internally uses Lemke\u2019s algorithm) for two-player extensive form games are all for finite-horizon games.\nWhat remained then was to a find way to appropriate mathematical programming for solving the finite horizon case of the POMDP/DEC-POMDP domain. Our work has done precisely this (incidently, we now have an algorithm for solving some kind of n-player normal form games). Throughout the paper, we have shown how mathematical programming (in particular, 0-1 integer programming) can be applied for solving finite horizon DECPOMDPs (it is easy to see that the approach we have presented yields a linear program for solving a finite horizon POMDP). Additionally, the computational experience of our approach indicates that for finite horizon DEC-POMDPs, mathematical programming may be better (faster) than dynamic programming. We have also shown how the well-entrenched dynamic programming heuristic of the pruning of redundant or extraneous objects (in our case, histories) can be integrated into this mathematical programming approach. Hence, the main contribution of this paper is that it presents, for the first time, an alternative approach for solving finite horizon POMDPs/DEC-POMDPs based on MILPs.\nQ5: Is the mathematical programming approach presented in this paper something of a dead end?\nThis question is bit controversial and a very short answer to this question could be a \u201csmall yes\u201d. But this is true for every approach that looks for exact optimal solutions to DEC-POMDPs, whether it is grounded on dynamic programming or forward search or mathematical programming. Because of the complexity of the problem, an exact solution will always be untractable but our algorithms can still be improved.\nA longer answer is more mitigated, especially in the light of the recent advances made for dynamic programming and forward search algorithms. One crucial point in sequenceform DEC-POMDPs is the pruning of extraneous histories. A recent work from Oliehoek, Whiteson, and Spaan (2009) has shown how to clusters histories that are equivalent in a way that could also reduce the nomber of constraints in MILPs. The approach of Amato, Dibangoye, and Zilberstein (2009) that improves and speed up the dynamic programming operator could help in finding extraneous histories. So, at the very least, some work is\nstill required before stating that every aspect of sequence-form DEC-POMDPs have been studied.\nWe now turn to an even longer answer. Consider the long horizon case. Given that exact algorithms (including the ones presented in this paper) can only tackle horizons less than 6, by \u2018long horizon\u2019, we mean anything upwards of 6 time periods. For the long horizon case, we are required to conceive a possibly sub-optimal joint policy for the given horizon and determine an upper bound on the loss of value incurred by using the joint policy instead of using an optimal joint policy.\nThe current trend for the long horizon case is amemory-bounded approach. The memory bounded dynamic programming (MBDP) algorithm (Seuken & Zilberstein, 2007) is the main exponent of this approach. This algorithm is based on the backward induction DP algorithm (Hansen et al., 2004). The algorithm attempts to run in a limited amount of space. In order to do so, unlike the DP algorithm, it prunes even non-extraneous (i.e., nondominated) policy trees at each iteration. Thus, at each iteration, the algorithm retains a pre-determined number of trees. This algorithm and its variants have been used to find a joint policy for the MABC, the MA-tiger and the Box pushing problems for very long horizons (of the order of thousands of time periods).\nMBDP does not provide an upper bound on the loss of value. The bounded DP (BDP) algorithm presented in the paper by Amato, Carlin, and Zilberstein (2007c) does give an upper bound. However, on more interesting DEC-POMDP problems (such as MA-tiger), MBDP finds a much better joint policy than BDP.\nA meaningful way to introduce the notion of memory boundedness into our approach is to fix an a priori upper bound on the size of the concerned mathematical program. This presents all sorts of difficulties but the main difficulty seems to be the need to represent a policy for a long horizon in limited space. The MBDP algorithm solves this problem by using what may be termed as a recursive representation. The recursive representation causes the MBDP algorithm to take a long time to evaluate a joint policy, but it does allow the algorithm to represent a long horizon joint policy in limited space. In the context of our mathematical programming approach, we would have to change the policy constraints in some way so that a long horizon policy is represented by a system consisting of a limited number of linear equations and linear inequalities. Besides the policy constraints, other constraints of the presented programs would also have to be accordingly transfigured. It is not evident (to us) if such a transfiguration of the constraints is possible.\nOn the other hand, the infinite horizon case seems to be a promising candidate to adapt our approach to. Mathematical programming has already been applied, with some success, to solving infinite horizon DEC-POMDPs (Amato et al., 2007a). The computational experience of this mathematical programming approach shows that it is better (finds higher quality solutions in lesser time) than a dynamic programming approach (Bernstein et al., 2005; Szer & Charpillet, 2006).\nNevertheless, this approach has two inter-related shortcomings. First, the approach finds a joint controller (i.e., an infinite horizon joint policy) of a fixed size and not of the optimal size. Second, much graver than the first, for the fixed size, it finds a locally optimal joint controller. The approach does not guarantee finding an optimal joint controller. This is because the program presented in the work of Amato et al. (2007a) is a (non-convex)\nnonlinear program (NLP). The NLP finds a fixed size joint controller in the canonical form (i.e., in the form of a finite state machine). We believe that both these shortcomings can be removed by conceiving a mathematical program (specifically, a 0-1 mixed integer linear program) that finds a joint controller in the sequence-form. As stated earlier, the main challenge in this regard is therefore an identification of the sequence-form of an infinite horizon policy. In fact, it may be that if such sequence-form characterization of an infinite horizon policy is obtained, it could be used in conceiving a program for the long horizon (undiscounted reward) case as well."}, {"heading": "Q6: How does this help achieve designing artificial autonomous agents ?", "text": "At first sight, our work does not have any direct and immediate applied benefits for the purpose of building artificial intelligent agents or understanding how intelligence \u201cworks\u201d. Even in the limited field of multi-agent planning, our contributions are more on a theoretical level than on a practical one.\nReal artificial multi-agent systems can indeed be modeled as DEC-POMDPs, even if they make use of communication, of common knowledge, of common social law. Then, such real systems would likely be made of a large number of states, actions or observations and require solutions over a large horizon. Our mathematical programming approach is practically useless in that setting as limited to DEC-POMDPs of very small size. Other models that are simpler \u2013 but far from trivial \u2013 to solve because they explicitly take into account some characteristics of the real systems do exist. Some works take advantage of communications (Xuan, Lesser, & Zilberstein, 2000; Ghavamzadeh & Mahadevan, 2004), some of the existing independencies in the system (Wu & Durfee, 2006; Becker, Zilberstein, Lesser, & Goldman, 2004), some do focus on interaction between agents (Thomas, Bourjot, & Chevrier, 2004), some, as said while answering the previous questions, rely on approximate solutions, etc... It is our intention to facilitate the re-use and the adaptation to these other models of the concepts used in our work and of the knowledge about the structure of an optimal solution of a DEC-POMDP. To that end, we decided not only to describe the MILP programs but also, and most importantly, how we derived these programs by making use of some properties of optimal DEC-POMDP solutions.\nTruly autonomous agents will also require to adapt to new and unforeseen situations. Our work being dedicated to planning, it seems easy to argue that it does not contribute very much to that end either. On the other hand, learning in DEC-POMDPs has never really been addressed except for some fringe work in particular settings (Scherrer & Charpillet, 2002; Ghavamzadeh & Mahadevan, 2004; Buffet, Dutech, & Charpillet, 2007). In fact, even for \u201csimple\u201d POMDPs, learning is a very difficult task (Singh, Jaakkola, & Jordan, 1994). Currently, the more promising research deals with learning the \u201cPredictive State Representation\u201d (PSR) of a POMDP (Singh, Littman, Jong, Pardoe, & Stone, 2003; James & Singh, 2004; McCracken & Bowling, 2005). Making due allowance to the fundamental differences between the functional role of PSR and histories, we notice that PSR and histories are quite similar in structure. While it is too early to say, it might be that trying to learn the useful histories of a DEC-POMDP could take some inspiration from the way the right PSRs are learned for POMDPs."}, {"heading": "9. Conclusion", "text": "We designed and investigated new exact algorithms for solving Decentralized Partially Observable Markov Decision Processes with finite horizon (DEC-POMDPs). The main contribution of our paper is the use of sequence-form policies, based on a sets of histories, in order to reformulate a DEC-POMDP as a non-linear programming problem (NLP). We have then presented two different approaches to linearize the NLP in order to find global and optimal solutions to DEC-POMDPs. The first approach is based on the combinatorial properties of the optimal policies of DEC-POMDPs and the second one relies on concepts borrowed from the field of game theory. Both lead to formulating DEC-POMDPs as 0-1 Mixed Integer Linear Programming problems (MILPs). Several heuristics for speeding up the resolution of these MILPs make another important contribution of our work.\nExperimental validation of the mathematical programming problems designed in this work was conducted on classical DEC-POMDP problems found in the literature. These experiments show that, as expected, our MILP methods outperform classical Dynamic Programming algorithms. But, in general, they are less efficient and more costly than forward search methods like GMAA*, especially in the case where the DEC-POMDP admits many optimal policies. Nevertheless, according to the nature of the problem, MILP methods can sometimes greatly outperform GMAA* (as in the MA-Tiger problem).\nWhile it is clear that exact resolution of DEC-POMDPs can not scale up with the size of the problems or the length of the horizon, designing exact methods is useful in order to develop or improve approximate methods. We see at least three research directions where our work can contribute. One direction could be to take advantage of the large literature on algorithms for finding approximate solutions to MILPs and to adapt them to the MILPs formulated for DEC-POMDPs. Another direction would be to use the knowledge gained from our work to derive improved heuristics for guiding existing approximate existing methods for DEC-POMDPs. For example, the work of Seuken and Zilberstein (2007), in order to limit the memory resources used by the resolution algorithm, prune the space of policies to only consider some of them; our work could help using a better estimation of the policies that are important to be kept in the search space. Then, the one direction we are currently investigating is to adapt our approach to DEC-POMDPs of infinite length by looking for yet another representation that would allow such problems to be seen as MILPs.\nMore importantly, our work participates to a better understanding of DEC-POMDPs. We analyzed and understood key characteristics of the nature of optimal policies in order to design the MILPs presented in this paper. This knowledge can be useful for other work dealing with DEC-POMDPs and even POMDPs. The experimentations have also given some interesting insights on the nature of the various problems tested, in term of existence of extraneous histories or on the number of optimal policies. These insights might be a first step toward a taxonomy of DEC-POMDPs."}, {"heading": "Appendix A. Non-Convex Non-Linear Program", "text": "Using the simplest example, this section aims at showing that the Non-Linear Program (NLP) expressed in Table 2 can be non-convex.\nLet us consider an example with two agents, each one with 2 possible actions (a and b) that want to solve a horizon-1 decision problem. The set of possible joint-histories is then: \u3008a, a\u3009, \u3008a, b\u3009, \u3008b, a\u3009 and \u3008b, b\u3009. Then the NLP to solve is:\nVariables: x1(a), x1(b), x2(a), x2(a)\nMaximize R(\u03b1, \u3008a, a\u3009)x1(a)x2(a) +R(\u03b1, \u3008a, b\u3009)x1(a)x2(b) (158)\n+R(\u03b1, \u3008b, a\u3009)x1(b)x2(a) +R(\u03b1, \u3008b, b\u3009)x1(b)x2(b)\nsubject to\nx1(a) + x1(b) = 1\nx2(a) + x2(b) = 1\nx1(a) \u2265 0, x1(b) \u2265 0\nx2(a) \u2265 0, x2(b) \u2265 0\nA matrix formulation of the objective function of eq. (158) would be xT .C.x with C and x of the following kind:\nC =\n\n   0 0 c d 0 0 e f c e 0 0 d f 0 0\n\n  \nx =\n\n   x1(a) x1(b) x2(a) x2(b)\n\n   . (159)\nIf \u03bb is the eigen value of vector v = [v1 v2 v3 v4] T then it is straightforward to show that\n\u2212\u03bb is also an eigen value: [\u2212v1 \u2212 v2 v3 v4] T = \u2212\u03bbC.[v1 v2 \u2212 v3 \u2212 v4] T . As a result, the matrix C, hessian of the objective function, is not positive-definite and thus the objective function is not convex."}, {"heading": "Appendix B. Linear Program Duality", "text": "Every linear program (LP) has a converse linear program called its dual. The first LP is called the primal to distinguish it from its dual. If the primal maximizes a quantity, the dual minimizes the quantity. If there are n variables and m constraints in the primal, there are m variables and n constraints in the dual. Consider the following (primal) LP.\nVariables: x(i), \u2200i \u2208 {1, 2, \u00b7 \u00b7 \u00b7 , n}\nMaximize\nn \u2211\ni=1\nc(i)x(i)\nsubject to:\nn \u2211\ni=1\na(i, j)x(i) = b(j), j = 1, 2, \u00b7 \u00b7 \u00b7 , m\nx(i) \u2265 0, i = 1, 2, \u00b7 \u00b7 \u00b7 , n\nThis primal LP has one variable x(i) for each i = 1 to n. The data of the LP consists of numbers c(i) for each i = 1 to n, the numbers b(j) for each j = 1 to m and the numbers a(i, j) for each i = 1 to n and for each j = 1 to m. The LP thus has n variables and m constraints. The dual of this LP is the following LP.\nVariables: y(j), \u2200j \u2208 {1, 2, \u00b7 \u00b7 \u00b7 ,m\u2032}\nMinimize\nm\u2032 \u2211\nj=1\nb(j)y(j)\nsubject To:\nm\u2032 \u2211\nj=1\na(i, j)y(j) \u2265 c(i), i = 1, 2, \u00b7 \u00b7 \u00b7 , n\u2032\ny(j) \u2208 (\u2212\u221e,+\u221e), j = 1, 2, \u00b7 \u00b7 \u00b7 , m\u2032\nThe dual LP has one variable y(j) for each j = 1 to m. Each y(j) variable is a free variable. That is, it is allowed to take any value in R. The dual LP has m variables and n constraints.\nThe theorem of linear programming duality is as follows.\nTheorem B.1. (Luenberger, 1984) If either a primal LP or its dual LP has a finite optimal solution, then so does the other, and the corresponding values of the objective functions are equal.\nApplying this theorem to the primal-dual pair given above, there holds,\nn \u2211\ni=1\nc(i)x\u2217(i) = m \u2211\nj=1\nb(j)y\u2217(j)\nwhere x\u2217 denotes an optimal solution to the primal and y\u2217 denotes an optimal solution to the dual.\nThe theorem of complementary slackness is as follows.\nTheorem B.2. (Vanderbei, 2008) Suppose that x is feasible for a primal linear program and y is feasible for its dual. Let (w1,\u00b7 \u00b7 \u00b7 ,wm) denote the corresponding primal slack variables, and let (z1,\u00b7 \u00b7 \u00b7 ,zn) denote the corresponding dual slack variables. Then x and y are optimal for their respective problems if and only if\nxjzj = 0 for j = 1, \u00b7 \u00b7 \u00b7 , n,\nwiyi = 0 for i = 1, \u00b7 \u00b7 \u00b7 ,m."}, {"heading": "Appendix C. Regret for DEC-POMDPs", "text": "The value of an information set \u03d5 \u2208 Ii of an agent i for a i-reduced joint policy q, denoted \u03bb\u2217i (\u03d5, q), is defined by:\n\u03bb\u2217i (\u03d5, q) = max h\u2208\u03d5\n\u2211\nj\u2032\u2208E\u2212i\nR(\u03b1, \u3008h, j\u2032\u3009)q(j\u2032) (160)\nfor any terminal information set and, if \u03d5 is non-terminal, by:\n\u03bb\u2217i (\u03d5, q) = max h\u2208\u03d5\n\u2211\no\u2208Oi\n\u03bb\u2217i (h.o, q) (161)\nThen, the regret of a history h for an agent i and for a i-reduced joint policy q, denoted \u00b5i(h, q), it is defined by:\n\u00b5i(h, q) = \u03bb \u2217 i (\u03d5(h), q) \u2212\n\u2211\nj\u2032\u2208HT \u2212i\nR(\u03b1, \u3008h, j\u2032\u3009)q(j\u2032) (162)\nif h is terminal and, if h is non-terminal, by:\n\u00b5i(h, q) = \u03bb \u2217 i (\u03d5(h), q) \u2212\n\u2211\no\u2208Oi\n\u03bb\u2217i (h.o, q) (163)\nThe concept of regret of the agent i, which is independant of the policy of the agent i, is very useful when looking for optimal policy because its optimal value is known: it is 0. It is thus easier to manipulate than the optimal value of a policy."}, {"heading": "Appendix D. Program Changes Due to Optimizations", "text": "Pruning locally or globally extraneous histories reduces the size of the search space of the mathematical programs. Now, some constraints of the programs depend on the size of the search space, we must then alter some of these constraints.\nLet denote by a \u201c\u223c\u201d superscript the sets actually used in our program. For example, E\u0303i will be the actual set of terminal histories of agent i, be it pruned of extraneous histories or not.\nPrograms MILP (Table 3) and MILP-n agents (Table 5) rely on the fact that the number of histories of a given length t in the support of a pure policy of each agent is fixed and equal to |Oi|\nt\u22121. As it may not be the case with pruned sets, the following changes have to be made:\n\u2022 The constraint (42) of MILP or (121) MILP-n agents, that is \u2211\nj\u2208E\nz(j) = \u220f\ni\u2208I\n|Oi| T\u22121\nmust be replaced by \u2211\nj\u2208E\u0303\nz(j) \u2264 \u220f\ni\u2208I\n|Oi| T\u22121. (164)\n\u2022 The set of constraints (41) of MILP or (120) of MILP-n agents, that is\n\u2211\nj\u2032\u2208E\u2212i\nz(\u3008h, j\u2032\u3009) = \u220f\nk\u2208I\\{i}\n|Ok| T\u22121xi(h), \u2200i \u2208 I, \u2200h \u2208 Ei\nmust be replaced by\n\u2211\nj\u2032\u2208E\u0303\u2212i\nz(\u3008h, j\u2032\u3009) \u2264 \u220f\nk\u2208I\\{i}\n|Ok| T\u22121xi(h), \u2200i \u2208 I, \u2200h \u2208 E\u0303i. (165)\n\u2022 The set of constraints (119) of MILP-n agents, that is\nyi(\u03d5(h)) \u2212 1\n|Oi|T\u22121\n\u2211\nj\u2208E\nR(\u03b1, \u3008h, j\u2212i\u3009)z(j) = wi(h), \u2200h \u2208 Ei\nmust be replaced by\nyi(\u03d5(h)) \u2212 1\n|O\u0303i|T\u22121\n\u2211\nj\u2208E\u0303\nR(\u03b1, \u3008h, j\u2212i\u3009)z(j) = wi(h), \u2200h \u2208 E\u0303i. (166)"}, {"heading": "Appendix E. Example using MA-Tiger", "text": "All these example are derived using the Decentralized Tiger Problem (MA-Tiger) described in Section 2.2. We have two agents, with 3 actions (al, ar, ao) and 2 observations (ol, or). We will only consider problem with an horizon of 2.\nThere are 18 (32\u00d72) terminal histories for an agent: ao.ol.ao, ao.ol.al, ao.ol.ar, ao.or.ao, ao.or.al, ao.or.ar, al.ol.ao, al.ol.al, al.ol.ar, al.or.ao, al.or.al, al.or.ar, ar.ol.ao, ar.ol.al, ar.ol.ar, ar.or.ao, ar.or.al, ar.or.ar.\nAnd thus 324 (182 = 32\u00d72\u00d722) joint histories for the agents: \u3008ao.ol.ao,ao.ol.ao\u3009,\u3008ao.ol.ao,ao.ol.al\u3009, \u3008ao.ol.ao,ao.ol.ar\u3009, \u00b7 \u00b7 \u00b7 , \u3008ar.or.ar,ar.or.ar\u3009.\nE.1 Policy Constraints\nThe policy constraints with horizon 2 for one agent in the MA-Tiger problem would be: Variables: x for every history\nx(ao) + x(al) + x(ar) = 0\n\u2212x(ao) + x(ao.ol.ao) + x(ao.ol.al) + x(ao.ol.ar) = 0\n\u2212x(ao) + x(ao.or.ao) + x(ao.or.al) + x(ao.or.ar) = 0\n\u2212x(al) + x(al.ol.ao) + x(al.ol.al) + x(al.ol.ar) = 0\n\u2212x(al) + x(al.or.ao) + x(al.or.al) + x(al.or.ar) = 0\n\u2212x(ar) + x(ar.ol.ao) + x(ar.ol.al) + x(ar.ol.ar) = 0\n\u2212x(ar) + x(ar.or.ao) + x(ar.or.al) + x(ar.or.ar) = 0\nx(ao) \u2265 0 x(al) \u2265 0 x(ar) \u2265 0\nx(ao.ol.ao) \u2265 0 x(ao.ol.al) \u2265 0 x(ao.ol.ar) \u2265 0\nx(ao.or.ao) \u2265 0 x(ao.or.al) \u2265 0 x(ao.or.ar) \u2265 0\nx(al.ol.ao) \u2265 0 x(al.ol.al) \u2265 0 x(al.ol.ar) \u2265 0\nx(al.or.ao) \u2265 0 x(al.or.al) \u2265 0 x(al.or.ar) \u2265 0\nx(ar.ol.ao) \u2265 0 x(ar.ol.al) \u2265 0 x(ar.ol.ar) \u2265 0\nx(ar.or.ao) \u2265 0 x(ar.or.al) \u2265 0 x(ar.or.ar) \u2265 0\nE.2 Non-Linear Program for MA-Tiger\nThe Non-Linear Program for finding an optimal sequence-form policy for the MA-Tiger with horizon 2 would be:\nVariables: xi for every history for each agent\nMaximize R(\u03b1, \u3008ao.ol.ao, ao.ol.ao\u3009)x1(ao.ol.ao)x2(ao.ol.ao)\n+ R(\u03b1, \u3008ao.ol.ao, ao.ol.al\u3009)x1(ao.ol.ao)x2(ao.ol.al)\n+ R(\u03b1, \u3008ao.ol.ao, ao.ol.ar\u3009)x1(ao.ol.ao)x2(ao.ol.ar)\n+ \u00b7 \u00b7 \u00b7\nsubject to:\nx1(ao) + x1(al) + x1(ar) = 0\n\u2212x1(ao) + x1(ao.ol.ao) + x1(ao.ol.al) + x1(ao.ol.ar) = 0\n\u2212x1(ao) + x1(ao.or.ao) + x1(ao.or.al) + x1(ao.or.ar) = 0\n\u2212x1(al) + x1(al.ol.ao) + x1(al.ol.al) + x1(al.ol.ar) = 0\n\u2212x1(al) + x1(al.or.ao) + x1(al.or.al) + x1(al.or.ar) = 0\n\u2212x1(ar) + x1(ar.ol.ao) + x1(ar.ol.al) + x1(ar.ol.ar) = 0\n\u2212x1(ar) + x1(ar.or.ao) + x1(ar.or.al) + x1(ar.or.ar) = 0\nx2(ao) + x2(al) + x2(ar) = 0\n\u2212x2(ao) + x2(ao.ol.ao) + x2(ao.ol.al) + x2(ao.ol.ar) = 0\n\u2212x2(ao) + x2(ao.or.ao) + x2(ao.or.al) + x2(ao.or.ar) = 0\n\u2212x2(al) + x2(al.ol.ao) + x2(al.ol.al) + x2(al.ol.ar) = 0\n\u2212x2(al) + x2(al.or.ao) + x2(al.or.al) + x2(al.or.ar) = 0\n\u2212x2(ar) + x2(ar.ol.ao) + x2(ar.ol.al) + x2(ar.ol.ar) = 0\n\u2212x2(ar) + x2(ar.or.ao) + x2(ar.or.al) + x2(ar.or.ar) = 0\nx1(ao) \u2265 0 x1(al) \u2265 0 x1(ar) \u2265 0\nx1(ao.ol.ao) \u2265 0 x1(ao.ol.al) \u2265 0 x1(ao.ol.ar) \u2265 0\nx1(ao.or.ao) \u2265 0 x1(ao.or.al) \u2265 0 x1(ao.or.ar) \u2265 0\nx1(al.ol.ao) \u2265 0 x1(al.ol.al) \u2265 0 x1(al.ol.ar) \u2265 0\nx1(al.or.ao) \u2265 0 x1(al.or.al) \u2265 0 x1(al.or.ar) \u2265 0\nx1(ar.ol.ao) \u2265 0 x1(ar.ol.al) \u2265 0 x1(ar.ol.ar) \u2265 0\nx1(ar.or.ao) \u2265 0 x1(ar.or.al) \u2265 0 x1(ar.or.ar) \u2265 0\nx2(ao) \u2265 0 x2(al) \u2265 0 x2(ar) \u2265 0\nx2(ao.ol.ao) \u2265 0 x2(ao.ol.al) \u2265 0 x2(ao.ol.ar) \u2265 0\nx2(ao.or.ao) \u2265 0 x2(ao.or.al) \u2265 0 x2(ao.or.ar) \u2265 0\nx2(al.ol.ao) \u2265 0 x2(al.ol.al) \u2265 0 x2(al.ol.ar) \u2265 0\nx2(al.or.ao) \u2265 0 x2(al.or.al) \u2265 0 x2(al.or.ar) \u2265 0\nx2(ar.ol.ao) \u2265 0 x2(ar.ol.al) \u2265 0 x2(ar.ol.ar) \u2265 0\nx2(ar.or.ao) \u2265 0 x2(ar.or.al) \u2265 0 x2(ar.or.ar) \u2265 0\nE.3 MILP for MA-Tiger\nThe MILP with horizon 2 for the agents in the MA-Tiger problem would be: Variables: xi(h) for every history of agent i z(j) for every terminal joint history\nMaximize R(\u03b1, \u3008ao.ol.ao, ao.ol.ao\u3009)z(\u3008ao.ol.ao, ao.ol.ao\u3009)\n+ R(\u03b1, \u3008ao.ol.ao, ao.ol.al\u3009)z(\u3008ao.ol.ao, ao.ol.al\u3009)\n+ R(\u03b1, \u3008ao.ol.ao, ao.ol.ar\u3009)z(\u3008ao.ol.ao, ao.ol.ar\u3009)\n+ \u00b7 \u00b7 \u00b7\nsubject to:\nx1(ao) + x1(al) + x1(ar) = 0\n\u2212x1(ao) + x1(ao.ol.ao) + x1(ao.ol.al) + x1(ao.ol.ar) = 0\n\u2212x1(ao) + x1(ao.or.ao) + x1(ao.or.al) + x1(ao.or.ar) = 0\n\u00b7 \u00b7 \u00b7\nx2(ao) + x2(al) + x2(ar) = 0\n\u2212x2(ao) + x2(ao.ol.ao) + x2(ao.ol.al) + x2(ao.ol.ar) = 0\n\u2212x2(ao) + x2(ao.or.ao) + x2(ao.or.al) + x2(ao.or.ar) = 0\n\u00b7 \u00b7 \u00b7\nz(\u3008ao.ol.ao, ao.ol.ao\u3009) + z(\u3008ao.ol.ao, ao.ol.al\u3009) + z(\u3008ao.ol.ao, ao.ol.ar\u3009) = 2\u00d7 x1(ao.ol.ao)\nz(\u3008ao.ol.ao, ao.ol.ao\u3009) + z(\u3008ao.ol.al, ao.ol.ao\u3009) + z(\u3008ao.ol.ar, ao.ol.ao\u3009) = 2\u00d7 x2(ao.ol.ao)\nz(\u3008ao.ol.al, ao.ol.ao\u3009) + z(\u3008ao.ol.al, ao.ol.al\u3009) + z(\u3008ao.ol.al, ao.ol.ar\u3009) = 2\u00d7 x1(ao.ol.al)\nz(\u3008ao.ol.ao, ao.ol.al\u3009) + z(\u3008ao.ol.al, ao.ol.al\u3009) + z(\u3008ao.ol.ar, ao.ol.al\u3009) = 2\u00d7 x2(ao.ol.al)\n\u00b7 \u00b7 \u00b7\nx1(ao) \u2265 0 x1(al) \u2265 0 x1(ar) \u2265 0\nx1(ao.ol.ao) \u2208 {0, 1} x1(ao.ol.al) \u2208 {0, 1} x1(ao.ol.ar) \u2208 {0, 1}\nx1(ao.or.ao) \u2208 {0, 1} x1(ao.or.al) \u2208 {0, 1} x1(ao.or.ar) \u2208 {0, 1}\n\u00b7 \u00b7 \u00b7\nx2(ao) \u2265 0 x2(al) \u2265 0 x2(ar) \u2265 0\nx2(ao.ol.ao) \u2208 {0, 1} x2(ao.ol.al) \u2208 {0, 1} x2(ao.ol.ar) \u2208 {0, 1}\nx2(ao.or.ao) \u2208 {0, 1} x2(ao.or.al) \u2208 {0, 1} x2(ao.or.ar) \u2208 {0, 1}\n\u00b7 \u00b7 \u00b7\nz(\u3008ao.ol.ao, ao.ol.ao\u3009) \u2208 {0, 1} z(\u3008ao.ol.ao, ao.ol.al\u3009) \u2208 {0, 1} z(\u3008ao.ol.ao, ao.ol.ar\u3009) \u2208 {0, 1}\nz(\u3008ao.ol.al, ao.ol.ao\u3009) \u2208 {0, 1} z(\u3008ao.ol.al, ao.ol.al\u3009) \u2208 {0, 1} z(\u3008ao.ol.al, ao.ol.ar\u3009) \u2208 {0, 1}\n\u00b7 \u00b7 \u00b7\nE.4 MILP-2 Agents for MA-Tiger\nThe MILP-2 agents with horizon 2 for the agents in the MA-Tiger problem would be: Variables: xi(h), wi(h) and bi(h) for every history of agent i yi(\u03d5)) for each agent and for every information set\nMaximize y1(\u2205)\nsubject to:\nx1(ao) + x1(al) + x1(ar) = 0\n\u2212x1(ao) + x1(ao.ol.ao) + x1(ao.ol.al) + x1(ao.ol.ar) = 0\n\u2212x1(ao) + x1(ao.or.ao) + x1(ao.or.al) + x1(ao.or.ar) = 0\n\u00b7 \u00b7 \u00b7\nx2(ao) + x2(al) + x2(ar) = 0\n\u2212x2(ao) + x2(ao.ol.ao) + x2(ao.ol.al) + x2(ao.ol.ar) = 0\n\u2212x2(ao) + x2(ao.or.ao) + x2(ao.or.al) + x2(ao.or.ar) = 0\n\u00b7 \u00b7 \u00b7\ny1(\u2205)\u2212 y1(ao.ol)\u2212 y1(ao.or) = w1(ao)\ny1(\u2205)\u2212 y1(al.ol)\u2212 y1(al.or) = w1(al)\ny1(\u2205)\u2212 y1(ar.ol)\u2212 y1(ar.or) = w1(ar)\ny2(\u2205)\u2212 y2(ao.ol)\u2212 y2(ao.or) = w2(ao)\ny2(\u2205)\u2212 y2(al.ol)\u2212 y2(al.or) = w2(al)\ny2(\u2205)\u2212 y2(ar.ol)\u2212 y2(ar.or) = w2(ar)\ny1(ao.ol)\u2212R(\u03b1, \u3008ao.ol.ao, ao.ol.ao\u3009)x2(ao.ol.ao)\n\u2212R(\u03b1, \u3008ao.ol.ao, ao.ol.al\u3009)x2(ao.ol.al)\n\u2212R(\u03b1, \u3008ao.ol.ao, ao.ol.ar\u3009)x2(ao.ol.ar)\n\u2212R(\u03b1, \u3008ao.ol.ao, al.ol.ao\u3009)x2(al.ol.ao)\n\u2212R(\u03b1, \u3008ao.ol.ao, al.ol.al\u3009)x2(al.ol.al)\n\u2212R(\u03b1, \u3008ao.ol.ao, al.ol.ar\u3009)x2(al.ol.ar)\n\u00b7 \u00b7 \u00b7 = w1(ao.ol.ao)\ny1(ao.ol)\u2212R(\u03b1, \u3008ao.ol.al, ao.ol.ao\u3009)x2(ao.ol.ao)\n\u2212R(\u03b1, \u3008ao.ol.al, ao.ol.al\u3009)x2(ao.ol.al)\n\u2212R(\u03b1, \u3008ao.ol.al, ao.ol.ar\u3009)x2(ao.ol.ar)\n\u2212R(\u03b1, \u3008ao.ol.al, al.ol.ao\u3009)x2(al.ol.ao)\n\u2212R(\u03b1, \u3008ao.ol.al, al.ol.al\u3009)x2(al.ol.al)\n\u2212R(\u03b1, \u3008ao.ol.al, al.ol.ar\u3009)x2(al.ol.ar)\n\u00b7 \u00b7 \u00b7 = w1(ao.ol.al)\n\u00b7 \u00b7 \u00b7\ny1(ar.or)\u2212R(\u03b1, \u3008ar .or.ar, ao.ol.ao\u3009)x2(ao.ol.ao)\n\u2212R(\u03b1, \u3008ar.or.ar, ao.ol.al\u3009)x2(ao.ol.al)\n\u2212R(\u03b1, \u3008ar.or.ar, ao.ol.ar\u3009)x2(ao.ol.ar)\n\u2212R(\u03b1, \u3008ar.or.ar, al.ol.ao\u3009)x2(al.ol.ao)\n\u2212R(\u03b1, \u3008ar .or.ar, al.ol.al\u3009)x2(al.ol.al)\n\u2212R(\u03b1, \u3008ar .or.ar, al.ol.ar\u3009)x2(al.ol.ar)\n\u00b7 \u00b7 \u00b7 = w1(ar.or.ar)\ny2(ao.ol)\u2212R(\u03b1, \u3008ao.ol.ao, ao.ol.ao\u3009)x1(ao.ol.ao)\n\u2212R(\u03b1, \u3008ao.ol.al, ao.ol.ao\u3009)x1(ao.ol.al)\n\u2212R(\u03b1, \u3008ao.ol.ar, ao.ol.ao\u3009)x1(ao.ol.ar)\n\u2212R(\u03b1, \u3008al.ol.ao, ao.ol.ao\u3009)x1(al.ol.ao)\n\u2212R(\u03b1, \u3008al.ol.al, ao.ol.ao\u3009)x1(al.ol.al)\n\u2212R(\u03b1, \u3008al.ol.ar, ao.ol.ao\u3009)x1(al.ol.ar)\n\u00b7 \u00b7 \u00b7 = w2(ao.ol.ao)\ny2(ao.ol)\u2212R(\u03b1, \u3008ao.ol.ao, ao.ol.al\u3009)x1(ao.ol.ao)\n\u2212R(\u03b1, \u3008ao.ol.al, ao.ol.al\u3009)x1(ao.ol.al)\n\u2212R(\u03b1, \u3008ao.ol.ar, ao.ol.al\u3009)x1(ao.ol.ar)\n\u2212R(\u03b1, \u3008al.ol.ao, ao.ol.al\u3009)x1(al.ol.ao)\n\u2212R(\u03b1, \u3008al.ol.al, ao.ol.al\u3009)x1(al.ol.al)\n\u2212R(\u03b1, \u3008al.ol.ar, ao.ol.al\u3009)x1(al.ol.ar)\n\u00b7 \u00b7 \u00b7 = w2(ao.ol.al)\n\u00b7 \u00b7 \u00b7\nx1(ao) \u2264 1\u2212 b1(ao) x1(al) \u2264 1\u2212 b1(al)\nx1(ar) \u2264 1\u2212 b1(ar) x1(ao.ol.ao) \u2264 1\u2212 b1(ao.ol.ao)\nx1(ao.ol.al) \u2264 1\u2212 b1(ao.ol.al) x1(ao.ol.ar) \u2264 1\u2212 b1(ao.ol.ar)\n\u00b7 \u00b7 \u00b7\nw1(ao) \u2264 U1(ao)b1(ao) w1(al) \u2264 U1(al)b1(al)\nw1(ar) \u2264 U1(ar)b1(ar) w1(ao.ol.ao) \u2264 U1(ao.ol.ao)b1(ao.ol.ao)\nw1(ao.ol.al) \u2264 U1(ao.ol.al)b1(ao.ol.al) w1(ao.ol.ar) \u2264 U1(ao.ol.ar)b1(ao.ol.ar)\n\u00b7 \u00b7 \u00b7\nx1(ao) \u2265 0 x1(al) \u2265 0 x1(ar) \u2265 0\nx1(ao.ol.ao) \u2265 0 x1(ao.ol.al) \u2265 0 x1(ao.ol.ar) \u2265 0\n\u00b7 \u00b7 \u00b7\nw1(ao) \u2265 0 w1(al) \u2265 0 w1(ar) \u2265 0\nw1(ao.ol.ao) \u2265 0 w1(ao.ol.al) \u2265 0 w1(ao.ol.ar) \u2265 0\n\u00b7 \u00b7 \u00b7\nb1(ao) \u2208 {0, 1} b1(al) \u2208 {0, 1} b1(ar) \u2208 {0, 1}\nb1(ao.ol.ao) \u2208 {0, 1} b1(ao.ol.al) \u2208 {0, 1} b1(ao.ol.ar) \u2208 {0, 1}\n\u00b7 \u00b7 \u00b7\ny1(\u2205) \u2208 (\u2212\u221e,+\u221e)\ny1(ao.ol) \u2208 (\u2212\u221e,+\u221e) y1(ao.or) \u2208 (\u2212\u221e,+\u221e)\n\u00b7 \u00b7 \u00b7\n... and the same for agent 2"}], "references": [{"title": "Optimizing memory-bounded controllers for decentralized POMDPs", "author": ["C. Amato", "D.S. Bernstein", "S. Zilberstein"], "venue": "In Proc. of the Twenty-Third Conf. on Uncertainty in Artificial Intelligence (UAI-07)", "citeRegEx": "Amato et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Amato et al\\.", "year": 2007}, {"title": "Solving POMDPs using quadratically constrained linear programs", "author": ["C. Amato", "D.S. Bernstein", "S. Zilberstein"], "venue": "In Proc. of the Twentieth Int. Joint Conf. on Artificial Intelligence (IJCAI\u201907)", "citeRegEx": "Amato et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Amato et al\\.", "year": 2007}, {"title": "Bounded dynamic programming for decentralized POMDPs. In Proc. of the Workshop on Multi-Agent Sequential Decision Making in Uncertain Domains (MSDM) in AAMAS\u201907", "author": ["C. Amato", "A. Carlin", "S. Zilberstein"], "venue": null, "citeRegEx": "Amato et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Amato et al\\.", "year": 2007}, {"title": "Incremental policy generation for finitehorizon DEC-POMDPs", "author": ["C. Amato", "J. Dibangoye", "S. Zilberstein"], "venue": "In Proc. of the Nineteenth Int. Conf. on Automated Planning and Scheduling (ICAPS-09)", "citeRegEx": "Amato et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Amato et al\\.", "year": 2009}, {"title": "Time-varying feedback laws for decentralized control", "author": ["B. Anderson", "J. Moore"], "venue": "Nineteenth IEEE Conference on Decision and Control including the Symposium on Adaptive Processes,", "citeRegEx": "Anderson and Moore,? \\Q1980\\E", "shortCiteRegEx": "Anderson and Moore", "year": 1980}, {"title": "Solving transition independent decentralized Markov decision processes", "author": ["R. Becker", "S. Zilberstein", "V. Lesser", "C. Goldman"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Becker et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Becker et al\\.", "year": 2004}, {"title": "Dynamic programming", "author": ["R. Bellman"], "venue": null, "citeRegEx": "Bellman,? \\Q1957\\E", "shortCiteRegEx": "Bellman", "year": 1957}, {"title": "The complexity of decentralized control of Markov decision processes", "author": ["D. Bernstein", "R. Givan", "N. Immerman", "S. Zilberstein"], "venue": "Mathematics of Operations Research,", "citeRegEx": "Bernstein et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Bernstein et al\\.", "year": 2002}, {"title": "Bounded policy iteration for decentralized POMDPs", "author": ["D.S. Bernstein", "E.A. Hansen", "S. Zilberstein"], "venue": "In Proc. of the Nineteenth Int. Joint Conf. on Artificial Intelligence (IJCAI),", "citeRegEx": "Bernstein et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Bernstein et al\\.", "year": 2005}, {"title": "Exact dynamic programming for decentralized pomdps with lossless policy compression", "author": ["A. Boularias", "B. Chaib-draa"], "venue": "In Proc. of the Int. Conf. on Automated Planning and Scheduling (ICAPS\u201908)", "citeRegEx": "Boularias and Chaib.draa,? \\Q2008\\E", "shortCiteRegEx": "Boularias and Chaib.draa", "year": 2008}, {"title": "Planning, learning and coordination in multiagent decision processes", "author": ["C. Boutilier"], "venue": "In Proceedings of the 6th Conference on Theoretical Aspects of Rationality and Knowledge (TARK \u201996),", "citeRegEx": "Boutilier,? \\Q1996\\E", "shortCiteRegEx": "Boutilier", "year": 1996}, {"title": "Shaping multi-agent systems with gradient reinforcement learning", "author": ["O. Buffet", "A. Dutech", "F. Charpillet"], "venue": "Autonomous Agent and Multi-Agent System Journal (AAMASJ),", "citeRegEx": "Buffet et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Buffet et al\\.", "year": 2007}, {"title": "Acting optimally in partially observable stochastic domains", "author": ["A. Cassandra", "L. Kaelbling", "M. Littman"], "venue": "In Proc. of the 12th Nat. Conf. on Artificial Intelligence (AAAI)", "citeRegEx": "Cassandra et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Cassandra et al\\.", "year": 1994}, {"title": "A heuristic approach for solving decentralized-POMDP: assessment on the pursuit problem", "author": ["I. Chad\u00e8s", "B. Scherrer", "F. Charpillet"], "venue": "In Proc. of the 2002 ACM Symposium on Applied Computing,", "citeRegEx": "Chad\u00e8s et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Chad\u00e8s et al\\.", "year": 2002}, {"title": "Valid inequalities for mixed integer linear programs", "author": ["G. Cornu\u00e9jols"], "venue": "Mathematical Programming B,", "citeRegEx": "Cornu\u00e9jols,? \\Q2008\\E", "shortCiteRegEx": "Cornu\u00e9jols", "year": 2008}, {"title": "On the significance of solving linear programming problems with some integer variables", "author": ["G.B. Dantzig"], "venue": null, "citeRegEx": "Dantzig,? \\Q1960\\E", "shortCiteRegEx": "Dantzig", "year": 1960}, {"title": "A probabilistic production and inventory problem", "author": ["F. d\u2019Epenoux"], "venue": "Management Science,", "citeRegEx": "d.Epenoux,? \\Q1963\\E", "shortCiteRegEx": "d.Epenoux", "year": 1963}, {"title": "Introduction to Applied Optimization", "author": ["U. Diwekar"], "venue": null, "citeRegEx": "Diwekar,? \\Q2008\\E", "shortCiteRegEx": "Diwekar", "year": 2008}, {"title": "Multilinear programming: Duality theories", "author": ["R. Drenick"], "venue": "Journal of Optimization Theory and Applications,", "citeRegEx": "Drenick,? \\Q1992\\E", "shortCiteRegEx": "Drenick", "year": 1992}, {"title": "Practical Methods of Optimization", "author": ["R. Fletcher"], "venue": null, "citeRegEx": "Fletcher,? \\Q1987\\E", "shortCiteRegEx": "Fletcher", "year": 1987}, {"title": "Learning to communicate and act in cooperative multiagent systems using hierarchical reinforcement learning", "author": ["M. Ghavamzadeh", "S. Mahadevan"], "venue": "In Proc. of the 3rd Int. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS\u201904)", "citeRegEx": "Ghavamzadeh and Mahadevan,? \\Q2004\\E", "shortCiteRegEx": "Ghavamzadeh and Mahadevan", "year": 2004}, {"title": "A global newton method to compute Nash equilibria", "author": ["S. Govindan", "R. Wilson"], "venue": "Journal of Economic Theory,", "citeRegEx": "Govindan and Wilson,? \\Q2001\\E", "shortCiteRegEx": "Govindan and Wilson", "year": 2001}, {"title": "Dynamic programming for partially observable stochastic games", "author": ["E. Hansen", "D. Bernstein", "S. Zilberstein"], "venue": "In Proc. of the Nineteenth National Conference on Artificial Intelligence (AAAI-04)", "citeRegEx": "Hansen et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Hansen et al\\.", "year": 2004}, {"title": "Global Optimization: Deterministic Approaches (3rd edition)", "author": ["R. Horst", "H. Tuy"], "venue": null, "citeRegEx": "Horst and Tuy,? \\Q2003\\E", "shortCiteRegEx": "Horst and Tuy", "year": 2003}, {"title": "Learning and discovery of predictive state representations in dynamical systems with reset", "author": ["M. James", "S. Singh"], "venue": "In Proc. of the Twenty-first Int. Conf. of Machine Learning (ICML\u201904)", "citeRegEx": "James and Singh,? \\Q2004\\E", "shortCiteRegEx": "James and Singh", "year": 2004}, {"title": "Planning and acting in partially observable stochastic domains", "author": ["L. Kaelbling", "M. Littman", "A. Cassandra"], "venue": "Artificial Intelligence,", "citeRegEx": "Kaelbling et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Kaelbling et al\\.", "year": 1998}, {"title": "Fast algorithms for finding randomized strategies in game trees", "author": ["D. Koller", "N. Megiddo", "B. von Stengel"], "venue": "In Proceedings of the 26th ACM Symposium on Theory of Computing (STOC", "citeRegEx": "Koller et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Koller et al\\.", "year": 1994}, {"title": "Finding mixed strategies with small supports in extensive form games", "author": ["D. Koller", "N. Megiddo"], "venue": "International Journal of Game Theory,", "citeRegEx": "Koller and Megiddo,? \\Q1996\\E", "shortCiteRegEx": "Koller and Megiddo", "year": 1996}, {"title": "Bimatrix Equilibrium Points and Mathematical Programming", "author": ["C. Lemke"], "venue": "Management Science,", "citeRegEx": "Lemke,? \\Q1965\\E", "shortCiteRegEx": "Lemke", "year": 1965}, {"title": "Linear and Nonlinear Programming", "author": ["D. Luenberger"], "venue": null, "citeRegEx": "Luenberger,? \\Q1984\\E", "shortCiteRegEx": "Luenberger", "year": 1984}, {"title": "Online discovery and learning of predictive state representations", "author": ["P. McCracken", "M.H. Bowling"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "McCracken and Bowling,? \\Q2005\\E", "shortCiteRegEx": "McCracken and Bowling", "year": 2005}, {"title": "Taming decentralized POMDPs: towards efficient policy computation for multiagent setting", "author": ["R. Nair", "M. Tambe", "M. Yokoo", "D. Pynadath", "S. Marsella"], "venue": "In Proc. of Int. Joint Conference on Artificial Intelligence,", "citeRegEx": "Nair et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Nair et al\\.", "year": 2003}, {"title": "Optimal and approximate Q-value functions for decentralized POMDPs", "author": ["F. Oliehoek", "M. Spaan", "N. Vlassis"], "venue": "Journal of Artificial Intelligence Research (JAIR),", "citeRegEx": "Oliehoek et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Oliehoek et al\\.", "year": 2008}, {"title": "Lossless clustering of histories in decentralized POMDPs", "author": ["F. Oliehoek", "S. Whiteson", "M. Spaan"], "venue": "In Proc. of The International Joint Conference on Autonomous Agents and Multi Agent Systems,", "citeRegEx": "Oliehoek et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Oliehoek et al\\.", "year": 2009}, {"title": "A Course in Game Theory", "author": ["M.J. Osborne", "A. Rubinstein"], "venue": null, "citeRegEx": "Osborne and Rubinstein,? \\Q1994\\E", "shortCiteRegEx": "Osborne and Rubinstein", "year": 1994}, {"title": "Combinatorial Optimization: Algorithms and Complexity", "author": ["C.H. Papadimitriou", "K. Steiglitz"], "venue": null, "citeRegEx": "Papadimitriou and Steiglitz,? \\Q1982\\E", "shortCiteRegEx": "Papadimitriou and Steiglitz", "year": 1982}, {"title": "The Complexity Of Markov Decision Processes", "author": ["C.H. Papadimitriou", "J. Tsitsiklis"], "venue": "Mathematics of Operations Research,", "citeRegEx": "Papadimitriou and Tsitsiklis,? \\Q1987\\E", "shortCiteRegEx": "Papadimitriou and Tsitsiklis", "year": 1987}, {"title": "Game theory and decision theory in multi-agent systems", "author": ["S. Parsons", "M. Wooldridge"], "venue": "Autonomous Agents and Multi-Agent Systems (JAAMAS),", "citeRegEx": "Parsons and Wooldridge,? \\Q2002\\E", "shortCiteRegEx": "Parsons and Wooldridge", "year": 2002}, {"title": "Average-reward decentralized Markov decision processes", "author": ["M. Petrik", "S. Zilberstein"], "venue": "In Proc. of the Twentieth Int. Joint Conf. on Artificial Intelligence (IJCAI", "citeRegEx": "Petrik and Zilberstein,? \\Q2007\\E", "shortCiteRegEx": "Petrik and Zilberstein", "year": 2007}, {"title": "A bilinear programming approach for multiagent planning", "author": ["M. Petrik", "S. Zilberstein"], "venue": "Journal of Artificial Intelligence Research (JAIR),", "citeRegEx": "Petrik and Zilberstein,? \\Q2009\\E", "shortCiteRegEx": "Petrik and Zilberstein", "year": 2009}, {"title": "Markov Decision Processes: discrete stochastic dynamic programming", "author": ["M. Puterman"], "venue": null, "citeRegEx": "Puterman,? \\Q1994\\E", "shortCiteRegEx": "Puterman", "year": 1994}, {"title": "The Communicative Multiagent Team Decision Problem: Analyzing Teamwork Theories And Models", "author": ["D. Pynadath", "M. Tambe"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Pynadath and Tambe,? \\Q2002\\E", "shortCiteRegEx": "Pynadath and Tambe", "year": 2002}, {"title": "The application of linear programming to team decision problems", "author": ["R. Radner"], "venue": "Management Science,", "citeRegEx": "Radner,? \\Q1959\\E", "shortCiteRegEx": "Radner", "year": 1959}, {"title": "Artificial Intelligence: A modern approach", "author": ["S. Russell", "P. Norvig"], "venue": null, "citeRegEx": "Russell and Norvig,? \\Q1995\\E", "shortCiteRegEx": "Russell and Norvig", "year": 1995}, {"title": "Multiagent systems, chap. Distributed rational decision making, pp. 201\u2013258", "author": ["T. Sandholm"], "venue": null, "citeRegEx": "Sandholm,? \\Q1999\\E", "shortCiteRegEx": "Sandholm", "year": 1999}, {"title": "Mixed-integer programming methods for finding nash equilibria", "author": ["T. Sandholm", "A. Gilpin", "V. Conitzer"], "venue": "In Proc. of the National Conference on Artificial Intelligence (AAAI)", "citeRegEx": "Sandholm et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Sandholm et al\\.", "year": 2005}, {"title": "Cooperative co-learning: A model based approach for solving multi agent reinforcement problems", "author": ["B. Scherrer", "F. Charpillet"], "venue": "In Proc. of the IEEE Int. Conf. on Tools with Artificial Intelligence (ICTAI\u201902)", "citeRegEx": "Scherrer and Charpillet,? \\Q2002\\E", "shortCiteRegEx": "Scherrer and Charpillet", "year": 2002}, {"title": "Memory-bounded dynamic programming for DECPOMDPs", "author": ["S. Seuken", "S. Zilberstein"], "venue": "In Proc. of the Twentieth Int. Joint Conf. on Artificial Intelligence (IJCAI\u201907)", "citeRegEx": "Seuken and Zilberstein,? \\Q2007\\E", "shortCiteRegEx": "Seuken and Zilberstein", "year": 2007}, {"title": "Learning without state estimation in partially observable markovian decision processes", "author": ["S. Singh", "T. Jaakkola", "M. Jordan"], "venue": "In Proceedings of the Eleventh International Conference on Machine Learning", "citeRegEx": "Singh et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Singh et al\\.", "year": 1994}, {"title": "Learning predictive state representations", "author": ["S. Singh", "M. Littman", "N. Jong", "D. Pardoe", "P. Stone"], "venue": "In Proc. of the Twentieth Int. Conf. of Machine Learning (ICML\u201903)", "citeRegEx": "Singh et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Singh et al\\.", "year": 2003}, {"title": "Point-based Dynamic Programming for DEC-POMDPs", "author": ["D. Szer", "F. Charpillet"], "venue": "In Proc. of the Twenty-First National Conf. on Artificial Intelligence (AAAI", "citeRegEx": "Szer and Charpillet,? \\Q2006\\E", "shortCiteRegEx": "Szer and Charpillet", "year": 2006}, {"title": "MAA*: A heuristic search algorithm for solving decentralized POMDPs", "author": ["D. Szer", "F. Charpillet", "S. Zilberstein"], "venue": "In Proc. of the Twenty-First Conf. on Uncertainty in Artificial Intelligence", "citeRegEx": "Szer et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Szer et al\\.", "year": 2005}, {"title": "Interac-DEC-MDP : Towards the use of interactions in DEC-MDP", "author": ["V. Thomas", "C. Bourjot", "V. Chevrier"], "venue": "In Proc. of the Third Int. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS\u201904),", "citeRegEx": "Thomas et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Thomas et al\\.", "year": 2004}, {"title": "Linear Programming: Foundations and Extensions (3rd edition)", "author": ["R.J. Vanderbei"], "venue": null, "citeRegEx": "Vanderbei,? \\Q2008\\E", "shortCiteRegEx": "Vanderbei", "year": 2008}, {"title": "Handbook of Game Theory, Vol. 3, chap. 45-\u201dComputing equilibria for two-person games", "author": ["B. von Stengel"], "venue": null, "citeRegEx": "Stengel,? \\Q2002\\E", "shortCiteRegEx": "Stengel", "year": 2002}, {"title": "Mixed-integer linear programming for transitionindependent decentralized MDPs", "author": ["J. Wu", "E.H. Durfee"], "venue": "In Proc. of the fifth Int. Joint Conf. on Autonomous Agents and Multiagent Systems", "citeRegEx": "Wu and Durfee,? \\Q2006\\E", "shortCiteRegEx": "Wu and Durfee", "year": 2006}, {"title": "Communication in multi-agent Markov decision processes", "author": ["P. Xuan", "V. Lesser", "S. Zilberstein"], "venue": "In Proc. of ICMAS Workshop on Game Theoretic and Decision Theoretics Agents", "citeRegEx": "Xuan et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Xuan et al\\.", "year": 2000}], "referenceMentions": [{"referenceID": 40, "context": "The decision-theoretic approach to rational behavior relies mostly on the framework of Markov Decision Processes (MDP) (Puterman, 1994).", "startOffset": 119, "endOffset": 135}, {"referenceID": 40, "context": "While the notion of \u201cintelligent behavior\u201d is difficult to assess and to measure, we prefer to refer to the concept of \u201crational behavior\u201d as formulated by Russell and Norvig (1995). As a consequence, the work presented here uses a decision-theoretic approach in order to build agents that take optimal actions in an uncertain and partially unknown environment.", "startOffset": 156, "endOffset": 182}, {"referenceID": 6, "context": "If the controller knows the dynamics of the system, which is made of a transition function and of a reward function, algorithms derived from the field of Dynamic Programming (see Bellman, 1957) allow the controller to compute an optimal deterministic policy, i.e., a decision function which associates an \u201coptimal\u201d action to every state so that the expected long term return is optimal. This process is called planning in the MDP community. In fact, using the MDP framework, it is quite straightforward to model a problem with one agent which has a full and complete knowledge of the state of the system. But agents, and especially in a multi-agent setting, are generally not able to determine the complete and exact state of the system because of noisy, faulty or limited sensors or because of the nature of the problem itself. As a consequence, different states of the system are observed as similar by the agent which is a problem when different optimal actions should be taken in these states; one speaks then of perceptual aliasing. An extension of MDPs called Partially Observable Markov Decisions Processes (POMDPs) deals explicitly with this phenomenon and allows a single agent to compute plans in such a setting provided it knows the conditional probabilities of observations given the state of the environment (Cassandra, Kaelbling, & Littman, 1994). As pointed out by Boutilier (1996), multi-agent problems could be solved as MDPs if considered from a centralized point of view for planning and control.", "startOffset": 179, "endOffset": 1397}, {"referenceID": 7, "context": "The main limitation of DEC-POMDPs is that they are provably untractable as they belong to the class of NEXP-complete problems (Bernstein et al., 2002).", "startOffset": 126, "endOffset": 150}, {"referenceID": 42, "context": "For example, the Team Decision Problem (Radner, 1959), later formulated as a Markov system in the field of control theory by Anderson and Moore (1980), led to the Markov Team Decision Problem (Pynadath & Tambe, 2002).", "startOffset": 39, "endOffset": 53}, {"referenceID": 6, "context": "The main limitation of DEC-POMDPs is that they are provably untractable as they belong to the class of NEXP-complete problems (Bernstein et al., 2002). Concretely, this complexity result implies that, in the worst case, finding an optimal joint policy of a finite horizon DEC-POMDP requires time that is exponential in the horizon if one always make good choices. Because of this complexity, there are very few algorithms for finding exact optimal solutions for DEC-POMDPs (they all have a doubly exponential complexity) and only a few more that look for approximate solutions. As discussed and detailed in the work of Oliehoek, Spaan, and Vlassis (2008), these algorithms follow either a dynamic programming approach or a forward search approach by adapting concepts and algorithms that were designed for POMDPs.", "startOffset": 127, "endOffset": 655}, {"referenceID": 4, "context": "For example, the Team Decision Problem (Radner, 1959), later formulated as a Markov system in the field of control theory by Anderson and Moore (1980), led to the Markov Team Decision Problem (Pynadath & Tambe, 2002).", "startOffset": 125, "endOffset": 151}, {"referenceID": 17, "context": "2 Motivations The main objective of our work is to investigate the use of mathematical programming, more especially mixed-integer linear programs (MILP) (Diwekar, 2008), for solving DECPOMDPs.", "startOffset": 153, "endOffset": 168}, {"referenceID": 17, "context": "2 Motivations The main objective of our work is to investigate the use of mathematical programming, more especially mixed-integer linear programs (MILP) (Diwekar, 2008), for solving DECPOMDPs. Our motivation relies on the fact that the field of linear programming is quite mature and of great interest to the industry. As a consequence, there exist many efficient solvers for mixed-integer linear programs and we want to see how these efficient solvers perform in the framework of DEC-POMDPs. Therefore, we have to reformulate a DEC-POMDP to solve it as a mixed-integer linear program. As shown in this article, two paths lead to such mathematical programs, one grounded on the work from Koller, Megiddo, and von Stengel (1994), Koller and Megiddo (1996) and von Stengel (2002), and another one grounded on combinatorial considerations.", "startOffset": 154, "endOffset": 728}, {"referenceID": 17, "context": "2 Motivations The main objective of our work is to investigate the use of mathematical programming, more especially mixed-integer linear programs (MILP) (Diwekar, 2008), for solving DECPOMDPs. Our motivation relies on the fact that the field of linear programming is quite mature and of great interest to the industry. As a consequence, there exist many efficient solvers for mixed-integer linear programs and we want to see how these efficient solvers perform in the framework of DEC-POMDPs. Therefore, we have to reformulate a DEC-POMDP to solve it as a mixed-integer linear program. As shown in this article, two paths lead to such mathematical programs, one grounded on the work from Koller, Megiddo, and von Stengel (1994), Koller and Megiddo (1996) and von Stengel (2002), and another one grounded on combinatorial considerations.", "startOffset": 154, "endOffset": 755}, {"referenceID": 17, "context": "2 Motivations The main objective of our work is to investigate the use of mathematical programming, more especially mixed-integer linear programs (MILP) (Diwekar, 2008), for solving DECPOMDPs. Our motivation relies on the fact that the field of linear programming is quite mature and of great interest to the industry. As a consequence, there exist many efficient solvers for mixed-integer linear programs and we want to see how these efficient solvers perform in the framework of DEC-POMDPs. Therefore, we have to reformulate a DEC-POMDP to solve it as a mixed-integer linear program. As shown in this article, two paths lead to such mathematical programs, one grounded on the work from Koller, Megiddo, and von Stengel (1994), Koller and Megiddo (1996) and von Stengel (2002), and another one grounded on combinatorial considerations.", "startOffset": 154, "endOffset": 778}, {"referenceID": 26, "context": "Our main inspiration comes from the work of Koller, von Stegel and Megiddo that shows how to solve games in extensive form with imperfect information and identical interests, that is how to find a Nash equilibrium for this kind of game (Koller et al., 1994; Koller & Megiddo, 1996; von Stengel, 2002).", "startOffset": 236, "endOffset": 300}, {"referenceID": 26, "context": "3, is then to adapt the sequence-form introduced by Koller, von Stegel and Megiddo to the framework of DEC-POMDPs (Koller et al., 1994; Koller & Megiddo, 1996; von Stengel, 2002).", "startOffset": 114, "endOffset": 178}, {"referenceID": 32, "context": "We were thus able to confirm that our algorithms are quite comparable to dynamic programming exact algorithms but outperformed by forward search algorithms like GMAA* (Oliehoek et al., 2008).", "startOffset": 167, "endOffset": 190}, {"referenceID": 7, "context": "Dec-POMDP This section gives a formal definition of Decentralized Partially Observed Markov Decision Processes as introduced by Bernstein et al. (2002). As described, a solution of a DECPOMDP is a policy defined on the space of information sets that has an optimal value.", "startOffset": 128, "endOffset": 152}, {"referenceID": 31, "context": "The full state transition function, joint observation function and reward function are described in the work of Nair et al. (2003).", "startOffset": 112, "endOffset": 131}, {"referenceID": 31, "context": "Proof: See proof in the work of Nair et al. (2003).", "startOffset": 32, "endOffset": 51}, {"referenceID": 31, "context": "6 Overview of DEC-POMDPs Solutions and Limitations As detailed in the work of Oliehoek et al. (2008), existing methods for solving DECPOMDPs with finite-horizon belong to several broad families: \u201cbrute force\u201d, alternating maximization, search algorithms and dynamic programming.", "startOffset": 78, "endOffset": 101}, {"referenceID": 31, "context": "6 Overview of DEC-POMDPs Solutions and Limitations As detailed in the work of Oliehoek et al. (2008), existing methods for solving DECPOMDPs with finite-horizon belong to several broad families: \u201cbrute force\u201d, alternating maximization, search algorithms and dynamic programming. Brute Force The simplest approach for solving a DEC-POMDP is to enumerate all possible joint policies and to evaluate them in order to find the optimal one. However, such a method becomes quickly untractable as the number of joint policies is doubly exponential in the horizon of the problem. Alternating Maximization Following Chad\u00e8s, Scherrer, and Charpillet (2002) and Nair et al.", "startOffset": 78, "endOffset": 647}, {"referenceID": 31, "context": "Alternating Maximization Following Chad\u00e8s, Scherrer, and Charpillet (2002) and Nair et al. (2003), one possible way to solve DEC-POMDPs is for each agent (or each small group of agents) to alternatively search for a better policy while all the other agents freeze their own policy.", "startOffset": 79, "endOffset": 98}, {"referenceID": 32, "context": "used underlying MDPs or POMDPs to compute the admissible heuristic, Oliehoek et al. (2008) introduced a better heuristic based on the resolution of a Bayesian Game with a carefully crafted cost function.", "startOffset": 68, "endOffset": 91}, {"referenceID": 32, "context": "used underlying MDPs or POMDPs to compute the admissible heuristic, Oliehoek et al. (2008) introduced a better heuristic based on the resolution of a Bayesian Game with a carefully crafted cost function. Currently, Oliehoek\u2019s method called GMAA* (for Generic Multi-Agent A*) is the quickest exact method on a large set of benchmarks. But, as every exact method, it is limited to quite simple problems. Dynamic Programming The work from Hansen, Bernstein, and Zilberstein (2004) adapts solutions designed for POMDPs to the domain of DEC-POMDPs.", "startOffset": 68, "endOffset": 478}, {"referenceID": 32, "context": "used underlying MDPs or POMDPs to compute the admissible heuristic, Oliehoek et al. (2008) introduced a better heuristic based on the resolution of a Bayesian Game with a carefully crafted cost function. Currently, Oliehoek\u2019s method called GMAA* (for Generic Multi-Agent A*) is the quickest exact method on a large set of benchmarks. But, as every exact method, it is limited to quite simple problems. Dynamic Programming The work from Hansen, Bernstein, and Zilberstein (2004) adapts solutions designed for POMDPs to the domain of DEC-POMDPs. The general idea is to start with policies for 1 time step that are used to build 2 time step policies and so on. But the process is clearly less efficient that the heuristic search approach as an exponential number of policies must be constructed and evaluated at each iteration of the algorithm. Some of these policies can be pruned but, once again, pruning is less efficient. As exposed in more details in the paper by Oliehoek et al. (2008), several others approaches have been developed for subclasses of DEC-POMDPs.", "startOffset": 68, "endOffset": 989}, {"referenceID": 26, "context": "1 in the work of Koller et al. (1994).", "startOffset": 17, "endOffset": 38}, {"referenceID": 19, "context": "An evident, but inefficient, method to find a global maximum point is to evaluate all the extreme points of the set of feasible solutions of the program since it is known that every global as well as local maximum point of a non-concave function lies at an extreme point of such a set (Fletcher, 1987).", "startOffset": 285, "endOffset": 301}, {"referenceID": 19, "context": "(Fletcher, 1987), for efficiency reasons, it is important to reduce the number of integer variables in our mathematical programs.", "startOffset": 0, "endOffset": 16}, {"referenceID": 44, "context": "Links between the fields of multiagent systems and game theory are numerous in the literature (see, for example, Sandholm, 1999; Parsons & Wooldridge, 2002). We will elaborate on the fact that the optimal policy of a DEC-POMDP is a Nash Equilibrium. It is in fact the Nash Equilibrium with the highest utility as the agents all share the same reward. For the 2-agent case, the derivation we make in order to build the MILP is similar to the first derivation of Sandholm, Gilpin, and Conitzer (2005). We give more details of this derivation and adapt it to DEC-POMDP by adding an objective function to it.", "startOffset": 113, "endOffset": 499}, {"referenceID": 22, "context": "The concept is also quite similar to the process of policy elimination in the backward step of the dynamic programming for partially observable stochastic games (Hansen et al., 2004).", "startOffset": 161, "endOffset": 182}, {"referenceID": 14, "context": "Another option which directly aims at reducing the computation time is to use cutting planes (Cornu\u00e9jols, 2008).", "startOffset": 93, "endOffset": 111}, {"referenceID": 15, "context": "A cut (Dantzig, 1960) is a special constraint that identifies a portion of the set of feasible solutions in which the optimal solution provably does not lie.", "startOffset": 6, "endOffset": 21}, {"referenceID": 36, "context": "Complexity The complexity of finding an upper bound is linked to the complexity of solving a POMDP which, as showed by Papadimitriou and Tsitsiklis (1987), can be PSPACE (i.", "startOffset": 119, "endOffset": 155}, {"referenceID": 51, "context": "The reasoning leads to an iterated computation of DEC-POMDPs of longer and longer horizon, reminiscent of the MAA* algorithm (Szer et al., 2005).", "startOffset": 125, "endOffset": 144}, {"referenceID": 19, "context": "MILP and MILP-2 are solved using the \u201ciLog Cplex 10\u201d solver \u2013 a commercial set of Java packages \u2013 that relies on a combination of the \u201cSimplex\u201d and \u201cBranch and Bounds\u201d methods (Fletcher, 1987).", "startOffset": 176, "endOffset": 192}, {"referenceID": 18, "context": "MILP and MILP-2 are solved using the \u201ciLog Cplex 10\u201d solver \u2013 a commercial set of Java packages \u2013 that relies on a combination of the \u201cSimplex\u201d and \u201cBranch and Bounds\u201d methods (Fletcher, 1987). The software is run on an Intel P4 at 3.4 GHz with 2Gb of RAM using default configuration parameters. For the mathematical programs, different combination of heuristics have been evaluated: pruning of locally extraneous histories, using a lower bound cut and using an upper bound cut, respectively denoted \u201cLOC\u201d, \u201cLow\u201d and \u201cUp\u201d in the result tables to come. The Non-Linear Program (NLP) of Section 3.4 has been evaluated by using various solvers from the NEOS website (http://www-neos.mcs.anl.gov ), even thought this method does not guarantee an optimal solution to the DEC-POMDP. Three solvers have been used: LANCELOT (abbreviated as LANC.), LOQO and SNOPT. The result tables also report results found in the literature for the following algorithms: DP stands for Dynamic Programming from Hansen et al. (2004); DP-LPC is an improved version of Dynamic Programming where policies are compressed in order to fit more of them in memory and speed up their evaluation as proposed by Boularias and Chaib-draa (2008); PBDP is an extension of Dynamic Programming where pruning is guided by the knowledge of reachable belief-states as detailed in the work of Szer and Charpillet (2006); MAA* is a heuristically guided forward search proposed by Szer et al.", "startOffset": 177, "endOffset": 1007}, {"referenceID": 9, "context": "(2004); DP-LPC is an improved version of Dynamic Programming where policies are compressed in order to fit more of them in memory and speed up their evaluation as proposed by Boularias and Chaib-draa (2008); PBDP is an extension of Dynamic Programming where pruning is guided by the knowledge of reachable belief-states as detailed in the work of Szer and Charpillet (2006); MAA* is a heuristically guided forward search proposed by Szer et al.", "startOffset": 175, "endOffset": 207}, {"referenceID": 9, "context": "(2004); DP-LPC is an improved version of Dynamic Programming where policies are compressed in order to fit more of them in memory and speed up their evaluation as proposed by Boularias and Chaib-draa (2008); PBDP is an extension of Dynamic Programming where pruning is guided by the knowledge of reachable belief-states as detailed in the work of Szer and Charpillet (2006); MAA* is a heuristically guided forward search proposed by Szer et al.", "startOffset": 175, "endOffset": 374}, {"referenceID": 9, "context": "(2004); DP-LPC is an improved version of Dynamic Programming where policies are compressed in order to fit more of them in memory and speed up their evaluation as proposed by Boularias and Chaib-draa (2008); PBDP is an extension of Dynamic Programming where pruning is guided by the knowledge of reachable belief-states as detailed in the work of Szer and Charpillet (2006); MAA* is a heuristically guided forward search proposed by Szer et al. (2005) and a generalized and improved version of this algorithm called GMAA* developed by Oliehoek et al.", "startOffset": 175, "endOffset": 452}, {"referenceID": 9, "context": "(2004); DP-LPC is an improved version of Dynamic Programming where policies are compressed in order to fit more of them in memory and speed up their evaluation as proposed by Boularias and Chaib-draa (2008); PBDP is an extension of Dynamic Programming where pruning is guided by the knowledge of reachable belief-states as detailed in the work of Szer and Charpillet (2006); MAA* is a heuristically guided forward search proposed by Szer et al. (2005) and a generalized and improved version of this algorithm called GMAA* developed by Oliehoek et al. (2008). The problems selected to evaluate the algorithms are detailed in the coming subsections.", "startOffset": 175, "endOffset": 558}, {"referenceID": 22, "context": "We will use the description given by Hansen et al. (2004) that allows this problem to be formalized as a DEC-POMDP.", "startOffset": 37, "endOffset": 58}, {"referenceID": 22, "context": "The state transition function P, the joint observation function G and the reward function R have been taken from Hansen et al. (2004). If both agents have full buffers in a period, and both use the channel in that period, the state of the problem is unchanged in the next period; both agents have full buffers in the next period.", "startOffset": 113, "endOffset": 134}, {"referenceID": 31, "context": "2, the Multi-Agent Tiger problem (MA-Tiger) has been introduced in the paper from Nair et al. (2003). From the general description of the problem, we ob-", "startOffset": 82, "endOffset": 101}, {"referenceID": 31, "context": "The state transition function P, joint observation function G and the reward function R are taken from the paper by Nair et al. (2003). P is quite simple.", "startOffset": 116, "endOffset": 135}, {"referenceID": 31, "context": "The state transition function P, joint observation function G and the reward function R are taken from the paper by Nair et al. (2003). P is quite simple. If one or both agents opens a door in a period, the state of the problem in the next period is set back to \u03b1. If both agents listen in a period, the state of the process in unchanged in the next period. G, given in Table (9), is also quite simple. Nair et al. (2003) describes two reward functions called \u201cA\u201d and \u201cB\u201d for this problem, here we report only results for reward function \u201cA\u201d, given in Table 10, as the behavior of the algorithm are similar for both reward functions.", "startOffset": 116, "endOffset": 422}, {"referenceID": 47, "context": "It must also be noted that for this problem, approximate methods like NLP but also other algorithms not depicted here like the \u201cMemory Bound Dynamic Programming\u201d of Seuken and Zilberstein (2007) are able to find the optimal solution.", "startOffset": 165, "endOffset": 195}, {"referenceID": 32, "context": "3 Fire Fighters Problem The problem of the Fire Fighters (FF) has been introduced as a new benchmark by Oliehoek et al. (2008). It models a team of n fire fighters that have to extinguish fires in a row of nh houses.", "startOffset": 104, "endOffset": 127}, {"referenceID": 32, "context": "For MAA* and GMAA*, value in parenthesis are taken from the work of Oliehoek et al. (2008) and should be optimal but are different from our optimal values.", "startOffset": 68, "endOffset": 91}, {"referenceID": 32, "context": "For horizon 3, the value of the optimal policy given by Oliehoek et al. (2008) (\u22125.", "startOffset": 56, "endOffset": 79}, {"referenceID": 32, "context": "For horizon 3, the value of the optimal policy given by Oliehoek et al. (2008) (\u22125.73) differs from the value found by the MILP algorithms (\u22125.98) whereas both methods are supposed to be exact. This might come from slight differences in our respective formulation of the problems. For horizon 4, Oliehoek et al. (2008) report an optimal value of (\u22126.", "startOffset": 56, "endOffset": 319}, {"referenceID": 32, "context": "For horizon 3, the value of the optimal policy given by Oliehoek et al. (2008) (\u22125.73) differs from the value found by the MILP algorithms (\u22125.98) whereas both methods are supposed to be exact. This might come from slight differences in our respective formulation of the problems. For horizon 4, Oliehoek et al. (2008) report an optimal value of (\u22126.57). For this problem, MILP methods are clearly outperformed by MAA* and GMAA*. Only NLP methods, which give an optimal solution for horizon 3, are better in term of computation time. It might be that NLP are also able to find optimal policies for horizon 4 but as our setting differs from the work of Oliehoek et al. (2008), we are not able to check if the policy found is really the optimal.", "startOffset": 56, "endOffset": 675}, {"referenceID": 32, "context": "Again, optimal value found by our method differ from the value reported by Oliehoek et al. (2008). Whereas we found that the optimal values are 1.", "startOffset": 75, "endOffset": 98}, {"referenceID": 32, "context": "For MAA* and GMAA*, value in parenthesis are taken from the work of Oliehoek et al. (2008) and should be optimal but are different from our optimal values.", "startOffset": 68, "endOffset": 91}, {"referenceID": 16, "context": "For instance, an infinite horizon MDP can be solved by a linear program (d\u2019Epenoux, 1963).", "startOffset": 72, "endOffset": 89}, {"referenceID": 16, "context": "For instance, an infinite horizon MDP can be solved by a linear program (d\u2019Epenoux, 1963). More recently, mathematical programming has been directed at infinite horizon POMDPs and DEC-POMDPs. Thus, an infinite horizon DEC-MDP (with state transition independence) can be solved by a 0-1 MILP (Petrik & Zilberstein, 2007) and an infinite horizon POMDP or DEC-POMDP can be solved (for local optima) by a nonlinear program (Amato, Bernstein, & Zilberstein, 2007b, 2007a). The finite horizon case \u2013 much different in character than the infinite horizon case \u2013 has been dealt with using dynamic programming. As stated earlier, whereas dynamic programming has been quite successful for finite horizon MDPs and POMDPs, it has been less so for finite horizon DEC-POMDPs. In contrast, in game theory, mathematical programming has been successfully directed at games of finite horizon. Lemke\u2019s algorithm (1965) for two-player normal form games, the Govindan-Wilson algorithm (2001) for n-player normal form games and the Koller, Megiddo and von Stengel approach (which internally uses Lemke\u2019s algorithm) for two-player extensive form games are all for finite-horizon games.", "startOffset": 73, "endOffset": 900}, {"referenceID": 16, "context": "For instance, an infinite horizon MDP can be solved by a linear program (d\u2019Epenoux, 1963). More recently, mathematical programming has been directed at infinite horizon POMDPs and DEC-POMDPs. Thus, an infinite horizon DEC-MDP (with state transition independence) can be solved by a 0-1 MILP (Petrik & Zilberstein, 2007) and an infinite horizon POMDP or DEC-POMDP can be solved (for local optima) by a nonlinear program (Amato, Bernstein, & Zilberstein, 2007b, 2007a). The finite horizon case \u2013 much different in character than the infinite horizon case \u2013 has been dealt with using dynamic programming. As stated earlier, whereas dynamic programming has been quite successful for finite horizon MDPs and POMDPs, it has been less so for finite horizon DEC-POMDPs. In contrast, in game theory, mathematical programming has been successfully directed at games of finite horizon. Lemke\u2019s algorithm (1965) for two-player normal form games, the Govindan-Wilson algorithm (2001) for n-player normal form games and the Koller, Megiddo and von Stengel approach (which internally uses Lemke\u2019s algorithm) for two-player extensive form games are all for finite-horizon games.", "startOffset": 73, "endOffset": 971}, {"referenceID": 22, "context": "This algorithm is based on the backward induction DP algorithm (Hansen et al., 2004).", "startOffset": 63, "endOffset": 84}, {"referenceID": 8, "context": "The computational experience of this mathematical programming approach shows that it is better (finds higher quality solutions in lesser time) than a dynamic programming approach (Bernstein et al., 2005; Szer & Charpillet, 2006).", "startOffset": 179, "endOffset": 228}, {"referenceID": 16, "context": "This algorithm is based on the backward induction DP algorithm (Hansen et al., 2004). The algorithm attempts to run in a limited amount of space. In order to do so, unlike the DP algorithm, it prunes even non-extraneous (i.e., nondominated) policy trees at each iteration. Thus, at each iteration, the algorithm retains a pre-determined number of trees. This algorithm and its variants have been used to find a joint policy for the MABC, the MA-tiger and the Box pushing problems for very long horizons (of the order of thousands of time periods). MBDP does not provide an upper bound on the loss of value. The bounded DP (BDP) algorithm presented in the paper by Amato, Carlin, and Zilberstein (2007c) does give an upper bound.", "startOffset": 64, "endOffset": 703}, {"referenceID": 0, "context": "Mathematical programming has already been applied, with some success, to solving infinite horizon DEC-POMDPs (Amato et al., 2007a). The computational experience of this mathematical programming approach shows that it is better (finds higher quality solutions in lesser time) than a dynamic programming approach (Bernstein et al., 2005; Szer & Charpillet, 2006). Nevertheless, this approach has two inter-related shortcomings. First, the approach finds a joint controller (i.e., an infinite horizon joint policy) of a fixed size and not of the optimal size. Second, much graver than the first, for the fixed size, it finds a locally optimal joint controller. The approach does not guarantee finding an optimal joint controller. This is because the program presented in the work of Amato et al. (2007a) is a (non-convex)", "startOffset": 110, "endOffset": 801}, {"referenceID": 47, "context": "For example, the work of Seuken and Zilberstein (2007), in order to limit the memory resources used by the resolution algorithm, prune the space of policies to only consider some of them; our work could help using a better estimation of the policies that are important to be kept in the search space.", "startOffset": 25, "endOffset": 55}, {"referenceID": 29, "context": "(Luenberger, 1984) If either a primal LP or its dual LP has a finite optimal solution, then so does the other, and the corresponding values of the objective functions are equal.", "startOffset": 0, "endOffset": 18}, {"referenceID": 53, "context": "(Vanderbei, 2008) Suppose that x is feasible for a primal linear program and y is feasible for its dual.", "startOffset": 0, "endOffset": 17}], "year": 2010, "abstractText": "Decentralized planning in uncertain environments is a complex task generally dealt with by using a decision-theoretic approach, mainly through the framework of Decentralized Partially Observable Markov Decision Processes (DEC-POMDPs). Although DEC-POMDPS are a general and powerful modeling tool, solving them is a task with an overwhelming complexity that can be doubly exponential. In this paper, we study an alternate formulation of DEC-POMDPs relying on a sequence-form representation of policies. From this formulation, we show how to derive Mixed Integer Linear Programming (MILP) problems that, once solved, give exact optimal solutions to the DEC-POMDPs. We show that these MILPs can be derived either by using some combinatorial characteristics of the optimal solutions of the DEC-POMDPs or by using concepts borrowed from game theory. Through an experimental validation on classical test problems from the DEC-POMDP literature, we compare our approach to existing algorithms. Results show that mathematical programming outperforms dynamic programming but is less efficient than forward search, except for some particular problems. The main contributions of this work are the use of mathematical programming for DECPOMDPs and a better understanding of DEC-POMDPs and of their solutions. Besides, we argue that our alternate representation of DEC-POMDPs could be helpful for designing novel algorithms looking for approximate solutions to DEC-POMDPs.", "creator": "dvips(k) 5.98 Copyright 2009 Radical Eye Software"}}}