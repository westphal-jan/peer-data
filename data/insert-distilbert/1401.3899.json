{"id": "1401.3899", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jan-2014", "title": "Representing and Reasoning with Qualitative Preferences for Compositional Systems", "abstract": "many applications, e. g., web service composition, complex system design, team formation, etc., rely dramatically on methods for identifying collections of objects or entities satisfying some limited functional requirement. among the collections that satisfy the highest functional capacity requirement, it is often necessary to specifically identify one or additional more collections that are optimal with respect to user preferences over a set of certain attributes descriptions that describe the non - functional properties of the collection.", "histories": [["v1", "Thu, 16 Jan 2014 05:19:43 GMT  (8572kb)", "http://arxiv.org/abs/1401.3899v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["ganesh ram santhanam", "samik basu", "vasant honavar"], "accepted": false, "id": "1401.3899"}, "pdf": {"name": "1401.3899.pdf", "metadata": {"source": "CRF", "title": "Representing and Reasoning with Qualitative Preferences for Compositional Systems", "authors": ["Ganesh Ram Santhanam", "Samik Basu", "Vasant Honavar"], "emails": ["gsanthan@cs.iastate.edu", "sbasu@cs.iastate.edu", "honavar@cs.iastate.edu"], "sections": [{"heading": null, "text": "We develop a formalism that lets users express the relative importance among attributes and qualitative preferences over the valuations of each attribute. We define a dominance relation that allows us to compare collections of objects in terms of preferences over attributes of the objects that make up the collection. We establish some key properties of the dominance relation. In particular, we show that the dominance relation is a strict partial order when the intra-attribute preference relations are strict partial orders and the relative importance preference relation is an interval order.\nWe provide algorithms that use this dominance relation to identify the set of most preferred collections. We show that under certain conditions, the algorithms are guaranteed to return only (sound), all (complete), or at least one (weakly complete) of the most preferred collections. We present results of simulation experiments comparing the proposed algorithms with respect to (a) the quality of solutions (number of most preferred solutions) produced by the algorithms, and (b) their performance and efficiency. We also explore some interesting conjectures suggested by the results of our experiments that relate the properties of the user preferences, the dominance relation, and the algorithms."}, {"heading": "1. Introduction", "text": "Many applications call for techniques for representing and reasoning about preferences over a set of alternatives. In such settings, preferences over the alternatives are expressed with respect to a set of attributes that describe the alternatives. Such preferences can be either qualitative or quantitative. A great deal of work on multi-attribute decision theory has focused on reasoning with quantitative preferences (Fishburn, 1970a; Keeney & Raiffa, 1993). However, in many settings it is more natural to express preferences in qualitative terms (Doyle & Thomason, 1999) and hence, there is a growing interest on formalisms for representing and reasoning with qualitative preferences (Brafman & Domshlak, 2009) in AI.\nAn important problem in this context has to do with representing qualitative preferences over multiple attributes and reasoning with them to find the most preferred among a set of\nc\u00a92011 AI Access Foundation. All rights reserved.\nalternatives. Brafman, Domshlak and Shimony\u2019s seminal work (2006) attempts to address this problem by introducing preference networks that capture: (a) intra-variable or intraattribute preferences specifying preferences over the domains of attributes; (b) the relative importance among the attributes. Preference networks use a graphical representation to compactly encode the above types of preferences from the user, and employ the ceteris paribus1 semantics to reason about the most preferred alternatives. In this model, each alternative is completely described by the values assigned to a set of attributes.\nIn many AI applications such as planning and scheduling, the alternatives have a composite structure, i.e., an alternative represents a collection or a composition of objects rather than simple objects. In such settings, typically there are a set of user specified functional requirements that compositions are required to satisfy2. Among all the possible compositions that do satisfy the functional requirements, there is often a need to choose compositions that are most preferred with respect to a set of user preferences over a set of non-functional attributes of the objects that make up the composition. We illustrate the above problem using the following example."}, {"heading": "1.1 Illustrative Example", "text": "Consider the task of designing a program of study (POS) for a Masters student in the Computer Science department. The POS consists of a collection of courses chosen from a given repository of available courses spanning different areas of focus in computer science. Apart from the area of focus, each course also has an assigned instructor and a number of credit hours. A repository of available courses, their areas of focus, their instructors and the number of credit hours are specified in Table 1.\nIn this example, each POS can be viewed as a composition of courses. The requirements for an acceptable Masters POS (i.e., a feasible composition) are as follows.\nF1. The POS should include at least 15 credits\n1. A Latin term for \u2018all else being equal\u2019 2. For example, in planning, a valid plan is a collection of actions that satisfies the goal; and in scheduling,\na valid schedule is a collection of task-to-resource assignments that respects the precedence constraints.\nF2. The POS should include the two core courses CS509 and CS510\nF3. There should be courses covering at least two breadth areas of study (apart from the area of Theory (TH))\nGiven the repository of courses (see Table 1; there may be one or more acceptable programs of study, i.e., feasible compositions). For example:\n\u2022 P1 = CS501\u2295 CS502\u2295 CS503\u2295 CS504\u2295 CS509\u2295 CS510\n\u2022 P2 = CS501\u2295 CS502\u2295 CS505\u2295 CS506\u2295 CS509\u2295 CS510\n\u2022 P3 = CS503\u2295 CS504\u2295 CS507\u2295 CS508\u2295 CS509\u2295 CS510\nSuppose that in addition to the above requirements, a student has some preferences over the course attributes such as the area of focus, the choice of instructors and difficulty level in terms of credit hours. Among several acceptable programs of study, the student may be interested in those programs of study that: (a) satisfy the minimum requirements (see above) for an acceptable POS, and (b) those that are most preferred with respect to his/her preferences specified above. The preferences of a student with respect to the course attributes Area (A) and Instructor (I) are illustrated in Figure 1 (arrows are directed toward the preferred area/instructor in the figure, e.g., AI is preferred to FM and Bob is preferred to Tom). In addition let us say that the student prefers the POS that have lesser total number of credits (this specifies \u227bC). Further, let the relative importance among the attributes A, I and C be I \u22b2A\u22b2C, i.e., I is relatively more important than A, which is in turn relatively more important than C."}, {"heading": "1.2 Problem Statement for the Illustrative Example", "text": "The problems that we try to address in this paper for the above example are:\n\u2022 Given two programs of study, namely Pi and Pj , determine whether Pi dominates (i.e., is preferred to) Pj or vice versa with respect to the student\u2019s preferences;\n\u2022 Given a repository of courses and an algorithm for computing a set of acceptable programs of study, find the most preferred, acceptable programs of study with respect to the above dominance relation.\nIn the example given in Section 1.1, the functional requirements correspond to the three conditions F1 to F3, all of which must be satisfied for a collection of courses to be an acceptable POS. Area (A), instructor (I) and number of credits (C) constitute the nonfunctional attributes, and the user preferences over these attributes are given by {\u227bA,\u227bI ,\u227bC} and I \u22b2 A \u22b2 C. One can envision similar problems in several other applications, ranging from assembling hardware and software components in an embedded system (such as designing a pacemaker or anti-lock braking system) to putting together a complex piece of legislation (such as the one for reforming health care).\nIn general, we are interested in the problem of (a) reasoning about preferences over compositions of objects, given the preferences over a set of non-functional attributes describing the objects; and (b) identifying compositions that satisfy the functional requirements of the compositional system, and at the same time are optimal with respect to the stated preferences over the non-functional attributes. Against this background, we present a preference formalism and a set of algorithms to address this problem in compositional systems."}, {"heading": "1.3 Contributions", "text": "We adopt the preference network representation introduced by Brafman et al. (2006) for the specification of qualitative preferences3 over valuations of each attribute as well as the relative importance among the attributes. We extend reasoning about preferences over single objects to deal with preferences over collections of objects. The main contributions of this paper are as follows.\n1. We develop a preference formalism that allows users to specify preferences in terms of intra-attribute and relative importance preferences over a set of attributes, and includes mechanisms for:\na) Computing the valuation of a composition: With respect to each attribute, we define a generic aggregation function to compute the valuation of a composition as a function of the valuations of its components. We also present a strict partial order preference relation for comparing two compositions with respect to their aggregated valuations of each attribute.\nb) Comparing the valuations of compositions: We introduce a dominance relation that compares compositions (in terms of their aggregated valuations) with respect to the stated preferences, and establish some of its key properties. In particular, we show that this relation is a strict partial order whenever the intra-attribute preferences are strict partial orders and relative importance preference is an interval order.\n2. We develop a suite of algorithms that identify the set, or subset of the most preferred composition(s) with respect to the user preferences. In particular, we show that under certain conditions, the algorithms are guaranteed to return only (sound), all (complete), or at least one (weakly complete) of the most preferred compositions. The algorithms we develop fall into two classes:\n3. We do not deal with conditional preferences in this work.\na) those that first compute the set of all feasible compositions using a functional composition algorithm as a black box, and then proceed to find the most preferred among them using the preference relations developed in (1); and\nb) an algorithm that interleaves at each step the execution of a functional composition algorithm and the ordering of partial solutions with respect to user preferences. It requires the functional composition algorithm to be able to construct a composition satisfying the functional requirement incrementally, i.e., by iteratively extending partial compositions with additional components.\nWe analyze some key properties of the algorithms that yield specific conditions on the structure of preferences, under which the algorithms produce only/at least one/all of the most preferred solutions.\n3. We present results of experiments that compare performance of the above algorithms for computing the most preferred compositions on a set of simulated composition problem instances. The results demonstrate the feasibility of our approach in practice, and compare our algorithms with respect to the quality of (number of good or most preferred) solutions produced by the algorithms and their performance (running time) and efficiency (the number of times they invoke the functional composition algorithm). Based on analysis of the experimental results, we also establish some previously unknown key theoretical properties of the dominance relation directly as a function of the user preferences.\nOur formalism is generic in the sense that one can use any aggregation function that appropriately represents the valuation of the composition as a function of the valuations of its constituents. In particular, we show examples of aggregation functions that compute the summation (numeric), the minimum/maximum valuation (totally ordered), or the set of worst valuations (partially ordered) of the constituents of a composition. Our formalism also provides flexibility in choosing the preference relation that compares sets of valuations of two compositions, so that any strict partial order preference relation can be used.\nAll our algorithms are completely independent of various aspects of the preference formalism, namely, the choice of aggregation functions, the preference relation used to compare aggregated valuations over a single attribute, and the dominance relation used to compare compositions over all attributes, except that the preference relations are strict partial orders. The theoretical and experimental results provide precise conditions under which the algorithms produce only/at least one/all of the most preferred solutions. This enables the user to choose an algorithm of his/her choice for particular problem instance, depending on the quality of solutions that is needed. In addition, our analysis also allows the user to trade off the quality of solutions produced against performance and efficiency."}, {"heading": "1.4 Related Work", "text": "The closest work related to our paper is a paper by Binshtok, Brafman, Domshlak, and Shimony (2009), where preferences are expressed over collections based on the number of objects in the collection that satisfy a desired property (e.g., having at least two political and two sports articles in choosing articles for a newspaper publication). In contrast, we\ndevelop a formalism that considers the desirability of the collection as a whole based on the attributes of the objects that make up the collection, and algorithms to identify the most preferred collection(s) among those that satisfy the requirement. We further show how the problems solved using the formalism due to Binshtok et al. can also be solved in our formalism (see Section 7.3.2).\nIn the recent years, there has been a lot of work in the database community on the evaluation of preference queries (e.g., skyline queries) to find the most preferred subset of tuples from a result set. The problem of finding the most preferred set of tuples is analogous to finding the most preferred set of alternatives, where each alternative is a simple object, i.e., a tuple described by a set of attributes. Our problem then corresponds to finding the most preferred set of alternatives, where each alternative is in turn a set of tuples that satisfy some requirement (e.g., the set of tuples that satisfy a set of integrity constraints). Moreover, the algorithms found in the database literature mostly address totally or weakly ordered preferences over the values of attributes, while we address partially ordered preferences as well. In addition, most of them rely on the maintenance of database indexes over the attributes of the tuples because they typically cater to large scale, static data which is not typical in our setting. We however note the relevance and possible utility of techniques developed in the databases community for our problem in specific scenarios.\nWe refer the reader to Section 7.3 for a more detailed discussion of related work."}, {"heading": "1.5 Organization", "text": "The rest of the paper is organized as follows. In Section 2, we define a compositional system, discuss the types of preferences that we will consider, and specify the problem in formal terms. In Section 3, we present our preference formalism including the dominance relation and analyze its properties. In Section 4, we present four algorithms for identifying the most preferred compositions and discuss their properties. The proofs of the results in this section are given in Appendix A. In Section 5, we discuss the complexity of our algorithms.In Section 6, we present results of experiments that we performed to compare our algorithms in terms of the quality of solutions produced, performance and efficiency. In Section 7, we summarize our contributions and discuss the related and future work in this area."}, {"heading": "2. Preliminaries", "text": "We recall some basic properties and definitions concerning binary relations that we will use in the rest of the paper (see Fishburn, 1985, for a comprehensive treatment of the same)."}, {"heading": "2.1 Properties of Binary Relations", "text": "Let \u227b be a binary relation on a set S, i.e., \u227b\u2286 S\u00d7S. We say that \u227b is an equivalence (eq), a (strict) partial order (po), an interval order (io), a weak order (wo) or a total order (to), as defined in Table 2.\nA total order is also a weak order; a weak order is also an interval order; and an interval order is also a strict partial order."}, {"heading": "2.2 Compositional System", "text": "A compositional system consists of a repository of pre-existing components from which we are interested in assembling compositions that satisfy a pre-specified functionality. Formally, a compositional system is a tuple \u3008R,\u2295, |=\u3009 where:\n\u2022 R = {W1,W2 . . .Wr} is a set of available components,\n\u2022 \u2295 denotes a composition operator that functionally aggregates components and encodes all the functional details of the composition. \u2295 is a binary operation on components Wi,Wj in the repository that produces a composition Wi \u2295Wj .\n\u2022 |= is a satisfaction relation that evaluates to true when a composition satisfies some pre-specified functional properties.\nDefinition 1 (Compositions, Feasible Compositions and Extensions). Given a compositional system \u3008R,\u2295, |=\u3009, and a functionality \u03d5, a composition C = Wi1 \u2295Wi2 \u2295 . . .Win is an arbitrary collection of components Wi1 ,Wi2 , . . . ,Win s.t. \u2200j \u2208 [1, n] : Wij \u2208 R.\ni. C is a feasible composition whenever C |= \u03d5;\nii. C is a partial feasible composition whenever \u2203Wj1 . . .Wjm \u2208 R : C \u2295Wj1 \u2295 . . .\u2295Wjm is a feasible composition; and\niii. C \u2295Wi is a feasible extension of a partial feasible composition C whenever C \u2295Wi is a feasible or a partial feasible composition.\nGiven a compositional system \u3008R,\u2295, |=\u3009 and a functionality \u03d5, an algorithm that produces a set of feasible compositions (satisfying \u03d5) is called a functional composition algorithm. The most general class of functional composition algorithms we consider can be treated as black boxes, simply returning a set of feasible compositions satisfying \u03d5 in a single step. Some other functional composition algorithms proceed by computing the set of feasible extensions of partial feasible compositions incrementally.\nDefinition 2 (Incremental Functional Composition Algorithm). A functional composition algorithm is said to be incremental if, given an initial partial feasible composition C and the desired functionality \u03d5, the algorithm computes the set of feasible extensions to C.\nAn incremental functional composition algorithm can be used to compute the feasible compositions by recursively invoking the algorithm on the partial feasible compositions it produces starting with the empty composition (\u22a5), and culminating with a set of feasible compositions satisfying \u03d5. In this sense, incremental functional composition algorithms are similar to their \u201cblack box\u201d counterparts. However, (as we later show in Section 4.5) in contrast to their \u201cblack box\u201d counterparts, incremental functional composition algorithms can be exploited in the search for the most preferred feasible compositions, by interleaving each step of the functional composition algorithm with the optimization of the valuations of non-functional attributes (with respect to the user preferences). This allows us to develop algorithms that can eliminate partial feasible compositions that will lead to less preferred feasible compositions from further consideration early in the search.\nDifferent approaches to functional composition, (e.g., Traverso & Pistore, 2004; Lago, Pistore, & Traverso, 2002; Baier, Fritz, Bienvenu, & McIlraith, 2008; Passerone, de Alfaro, Henzinger, & Sangiovanni-Vincentelli, 2002) differ in terms of (a) the languages used to represent the desired functionality \u03d5 and the compositions, and (b) the algorithms used to verify whether a composition C satisfies \u03d5, i.e., C |= \u03d5. We have intentionally abstracted the details of how functionality \u03d5 is represented (e.g., transition systems, logic formulas, plans, etc.) and how a composition is tested for satisfiability (|=) against \u03d5, as the primary focus of our work is orthogonal to details of the specific methods used for functional composition."}, {"heading": "2.3 Preferences over Non-functional Attributes", "text": "We now turn to the non-functional aspects of compositional systems. In addition to obtaining functionally feasible compositions, users are often concerned about the non-functional aspects of the compositions, e.g., the reliability of a composite Web service. In such cases, users seek the most preferred compositions among those that are functionally feasible, with respect to a set of non-functional attributes describing the components. In order to compute the most preferred compositions, it is necessary for the user to specify his/her preferences over a set of non-functional attributes X ."}, {"heading": "2.3.1 Notation", "text": "In general, for any relation \u227bP , we use the same notation, i.e., \u227bP to denote the transitive closure of the relation as well, and 6\u227bP or \u00ac \u227bP to denote its complement. The list of notations used in this paper are given in Table 3.\nWe focus only on strict partial order preference relations, i.e., relations that are both irreflexive and transitive, because transitivity is a natural property of any rational preference relation (von Neumann &Morgenstern, 1944; French, 1986; Mas-Colell, Whinston, & Green, 1995), and irreflexivity ensures that the preferences are strict.\nWith respect to any strict partial order preference relation \u227bP , we say that two elements u and v are indifferent, denoted u \u223cP v, whenever u 6\u227bP v and v 6\u227bP u. For preference relations \u227bi, \u227b \u2032 i,\u22b2 and \u227bd , we denote the corresponding indifference relation by \u223ci, \u223c \u2032 i,\u223c\u22b2 and \u223cd respectively. We will drop the subscripts whenever they are understood from the context.\nProposition 1. For any strict partial order preference relation \u227bP , the corresponding indifference relation \u223cP is reflexive and symmetric.\nProof. Follows from a well-known property of strict partial orders due to Fishburn (1970b).\nIt is important to note that indifference with respect to a strict partial order is not necessarily transitive. For instance, \u227bX= {(b, c)} is a strict partial order on the set {a, b, c} with b \u223cX a, a \u223cX c but b \u227bX c."}, {"heading": "2.3.2 Representing Multi-Attribute Preferences", "text": "Following the representation scheme introduced by Boutilier et al. (2004) and Brafman et al. (2006), we model the user\u2019s preferences with respect to multiple attributes in two forms: (a) intra-attribute preferences with respect to each non-functional attribute in X , and (b) relative importance over all attributes.\n4. We will use the terms composition and collection; and component and object interchangeably.\nDefinition 3 (Intra-attribute Preference). The intra-attribute preference relation, denoted by \u227bi is a strict partial order (irreflexive and transitive) over the possible valuations of an attribute Xi \u2208 X . \u2200u, v \u2208 Di : u \u227bi v iff u is preferred to v with respect to Xi.\nDefinition 4 (Relative Importance). The relative importance preference relation, denoted by \u22b2 is a strict partial order (irreflexive and transitive) over the set of all attributes X . \u2200Xi,Xj \u2208 X : Xi \u22b2Xj iff Xi is relatively more important than Xj .\nGiven a set X of attributes, the intra-attribute preference relations {\u227bi} over their respective domains, and the relative importance preference relation \u22b2 on X , we address the following problems.\n\u2022 Given two compositions Cj and Ck, determine whether VCj \u227bd VCk or vice versa;\n\u2022 Given a compositional system \u3008R,\u2295, |=\u3009, and an algorithm for computing a set of feasible compositions {Cf : Cf |= \u03d5}, find the most preferred feasible compositions with respect to the above dominance relation."}, {"heading": "3. Preference Formalism", "text": "Given a compositional system with a repository of components described by attributes X and preferences ({\u227bi},\u22b2) over them, we are interested in reasoning about preferences over different compositions. Note that based on preferences {\u227bi} and \u22b2, one can make use of existing formalisms such as TCP-nets (Brafman et al., 2006) to select the most preferred components. However, the problem of comparing compositions (as opposed to comparing components) with respect to the attribute preferences is complicated by the fact that the valuation of a composition is a function of the valuations of its components. Our approach to developing the preference formalism is as follows.\nFirst, given a composition and the valuations of its components with respect to the attributes, we obtain the aggregated valuation of the composition with respect to each attribute as a function of the valuations of its components. Next, we define preference relations to compare the aggregated valuations of two compositions with respect to each attribute. Finally, we build a dominance preference relation \u227bd that qualitatively compares any two compositions with respect to their aggregated valuations across all attributes."}, {"heading": "3.1 Aggregating Attribute Valuations across Components", "text": "In order to reason about preferences over compositions, it is necessary to obtain the valuation of a composition with respect to each attribute Xi in terms of its components, using some aggregation function \u03a6i. There are several ways to aggregate the preference valuations attribute-wise across components in a composition. The aggregation function \u03a6i defines the valuation of a composition with respect to an attribute Xi as a function of the valuations of its components. Remark. In the compositional systems considered here, we assume that the valuation of a composition with respect to its attributes is a function of only the valuations of its components. In other words, if C = W1 \u2295 W2 \u2295 . . . \u2295 Wn, then VC is a function of only {VW1 , VW2 , . . . , VWn}. However, in the most general setting, the aggregation functions \u03a6i\nneed to take into account, in addition to the valuations of the components themselves, the structural or functional details of a composition encoded by \u2295 (e.g., the reliability of a Web service composition depends on whether the service components are composed in a series or parallel structure).\nDefinition 5 (Aggregation Function). The aggregation function on a multiset5 of possible valuations (Di) of attribute Xi is\n\u03a6i : M(Di) \u2212\u2192 F (Xi)\nwhere F (Xi) denotes the range of the aggregation function.\nAggregation with respect to an attribute Xi amounts to devising an appropriate aggregation function \u03a6i that computes the valuation of a composition in terms of the valuations of its components for Xi. The range F (Xi) of \u03a6i depends on the choice of aggregation function. Some examples of aggregation functions are given below.\n1. Summation. This is applicable in cases where an attribute is real-valued and represents some kind of cost. For example, the cost of a shopping cart is the sum of the costs of the individual items it includes. In our running example, the total number of credits in a POS consisting of a set of courses is the sum of the credits of all the courses it includes. That is, if S is the set of credit hours (valuations of the courses with respect to the attribute C) of courses in a POS, then\n\u03a6C(S) := {\u03a3s\u2208Ss}\n2. Minimum/Maximum. Here, the valuation of a composition with respect to an attribute is the worst, i.e., the minimum among the valuations of its components. This type of aggregation is a natural one to consider while composing embedded systems or Web services. For example, when putting together several components in an embedded system, the system is only as secure (or safe) as its least secure (or safe) component.\n\u03a6i(S) := {mins\u2208Ss}\nAnalogously, one could choose as the valuation of the composition the maximum (best) among the valuations of its components. Such an aggregation function may be useful in applications such as parallel job scheduling, where the maximum response time is used to measure the quality of a schedule.\n3. Best/Worst Frontier. In some settings, it is possible that the intra-attribute preference over the values of an attribute is a partial order (not necessarily a ranking or a total order). Hence, it may not be possible to compute the valuation of a composition as the best or worst among the valuations of its components because a unique maximum or minimum may not exist. For example, it may be useful to compute the\n5. A multiset is a generalization of a set that allows for multiple copies of its elements.\nvaluation of a composition as the minimal set of valuations among the valuations of its components, which we call the worst frontier. The worst frontier represents the worst possible valuations of an attribute Xi with respect to \u227bi, i.e., the minimal set 6 among the set of valuations of the components in a composition.\nDefinition 6 (Aggregation using Worst Frontier). Given a set S of valuations of an attribute Xi, the worst frontier aggregation function is defined by\n\u2200S \u2286 Di : \u03a6i(S) := {v : v \u2208 S \u2227 \u2204u \u2208 S : v \u227bi u}\nIn our running example (see Section 1.1), the user would like to avoid courses not in his interest area and professors whom he is not comfortable with. That is, a program of study is considered only as good as the least interesting areas of study it covers, and the set of professors he is least comfortable with. Hence, the worst frontier aggregation function is chosen for the breadth area and instructor attributes.\nExample. The \u201cworst possible\u201d valuations of the attributes A and I for the program of study (composition) P1 with respect to \u227bA and \u227bI are {FM,TH} and {White,Harry} respectively. Similarly, for P2 the valuations of the attributes A and I are {DB,NW} and {Jane, Tom} respectively; and for P3 the valuations of the attributes A and I are {CA,SE} and {Harry,White} respectively. These sets correspond to the \u201cworst frontiers\u201d of the respective attributes. The different areas of focus covered in the POS P2 are {FM,AI,DB,NW,TH}, and the worst frontier of this set is \u03a6A({FM,AI,DB,NW,TH}) = {DB,NW} because AI \u227bA DB,FM \u227bA DB,TH \u227bA NW . Similarly the set of instructors in P2 are {Tom,Gopal,Bob, Jane}, and hence we have \u03a6I({Tom,Gopal,Bob, Jane}) = {Jane, Tom} because Bob \u227bI Jane and Gopal \u227bI Tom. For attribute C, the aggregation function evaluates the sum of credits of the constituent courses in a POS. Therefore, for P2 we have \u03a6C({4, 3, 4, 2, 3, 3}) = 4 + 3 + 4 + 2 + 3 + 3 = 19. \u22c4\nWe note that other choices of the aggregation function can be accommodated in our framework (such as average or a combination of best and worst frontier sets), and that the above is only a representative list of choices.\nProposition 2 (Indifference of Frontier Elements). Consider an attribute Xi, whose valuations are aggregated using the best or worst frontier aggregation function. Let A \u2208 F (Xi). Then u \u223ci v for all u, v \u2208 A.\nProof. Follows from Definition 6 (or the analogous definition of a best frontier) and a wellknown result due to the work of Fishburn (1985).\nDefinition 7 (Valuation of a Composition for Attributes Aggregated using Best/Worst Frontier). Consider an attribute Xi, whose valuations are aggregated using the best or worst frontier aggregation function. The valuation of a component W with respect to an attribute Xi is denoted as VW (Xi) \u2208 Di. The valuation of a composition of two components W1 and W2 with respect to an attribute Xi, each with valuation VW1(Xi) and VW2(Xi) respectively, is given by\n6. Note that if \u227bi is a total order, then worst frontier represents the minimum or lowest element in the set with respect to the total order.\nVW1\u2295W2(Xi) := \u03a6i(VW1(Xi) \u222a VW2(Xi))\nExample. Consider P2 = CS501 \u2295 CS502 \u2295 CS505 \u2295 CS506 \u2295 CS509 \u2295 CS510 in our running example (see Section 1.1).\nVP2(I) = \u03a6I(VCS501(I) \u222a VCS502(I) \u222a VCS505(I) \u222a VCS506(I) \u222a VCS509(I) \u222a VCS510(I))\n= \u03a6I({Tom} \u222a {Gopal} \u222a {Bob} \u222a {Bob} \u222a {Jane} \u222a {Tom})\n= \u03a6I({Tom,Gopal,Bob, Jane})\n= {Tom, Jane}\n\u22c4\nIt must be noted that VW1\u2295W2(Xi) = VW2\u2295W1(Xi) according to the above definition, because the valuations of compositions are subsets of the union of individual component valuations."}, {"heading": "3.2 Comparing Aggregated Valuations", "text": "Having obtained an aggregated valuation with respect to each attribute, we next proceed to discuss how to compare aggregated valuations attribute-wise. We denote the preference relation used to compare the aggregated valuations for an attribute Xi by \u227b \u2032 i. In the simple case when an aggregation function \u03a6i with respect to an attribute Xi returns a value in Di (F (Xi) = Di), the intra-attribute preference \u227bi can be (re)used to compare aggregated valuations, i.e., \u227b\u2032i =\u227bi. Other choices of \u227b \u2032 i can be considered as long as \u227b \u2032 i is a partial order. In order to obtain a strict preference relation, we require irreflexivity, and to obtain a rational preference relation, we require transitivity7.\nFor worst frontier-based aggregation (Definition 6), we present a preference relation that uses the following idea: Given two compositions with different aggregated valuations (worst frontiers) A,B with respect to an attribute Xi, we say that A is preferred to B if for every valuation of Xi in B, there is some valuation in A that is strictly preferred.\nDefinition 8 (Preference over Worst Frontiers). Let A,B \u2208 F (Xi) be two worst frontiers with respect to attribute Xi. We say that valuation A is preferred to B with respect to Xi, denoted by A\u227b \u2032 iB, if for each element in B, there exists an element in A that is more preferred.\n\u2200A,B \u2208 F (Xi) : A\u227b \u2032 iB \u21d4 \u2200b \u2208 B,\u2203a \u2208 A : a \u227bi b\nExample. In our running example (see Section 1.1), we have {FM,TH}\u227b\u2032A{DB,NW} because FM \u227bA DB and TH \u227bA NW . \u22c4\nGiven a preference relation over a set of elements, there are several ways of obtaining a preference relation over subsets of elements from the set (see Barbera, Bossert, & Pattanaik, 2004, for a survey on preferences over sets). Definition 8 is one simple way to achieve this. In some settings, in contrast to Definition 8, it might be useful to compare only\n7. Any preference relation, including the one that compares only the uncommon elements of two sets can be used, provided it is irreflexive and transitive.\nelements in the two sets that are not common. In such settings, a suitable irreflexive and transitive preference relation can be used, such as the asymmetric part of preference relations developed by Brewka et al. (2010) and Bouveret et al. (2009). In the absence of transitivity, the transitive closure of the relation may be used to compare sets of elements, as done by Brewka et al.\nWe now discuss some properties of the specific relation \u227b\u2032i as introduced in Definition 8.\nProposition 3 (Irreflexivity of \u227b\u2032i). A \u2208 F (Xi) \u21d2 A 6 \u227b \u2032 i A.\nProof. \u2200a, b \u2208 A, a \u223ci b (follows from Proposition 2)\nProposition 4 (Transitivity of \u227b\u2032i). If A,B,C \u2208 F (Xi), then A\u227b \u2032 iB \u2227B\u227b \u2032 iC \u21d2 A\u227b \u2032 iC.\nProof. Immediate from Definition 8.\nDefinition 9. Let A,B \u2208 F (Xi). We say that valuation A is at least as preferred as B with respect to Xi, denoted \u2032 i iff\nA \u2032iB \u21d4 A = B \u2228A\u227b \u2032 iB\nProposition 5. \u2032i is reflexive and transitive.\nProof. Follows from the facts that = is reflexive and transitive, and \u227b\u2032i is irreflexive and transitive.\nDefinition 10 (Complete Valuation). The complete valuation or outcome or assignment of a composition C is defined as a tuple VC := \u3008VC(X1), . . . VC(Xm)\u3009, where VC(Xi) \u2208 F (Xi).\nThe set of all possible valuations or outcomes is denoted as\nm \u220f\ni=1\nF (Xi).\nExample. In case of our example in Section 1.1:\nVP1 = \u3008\u03a6A({FM,AI, TH}),\u03a6I ({Tom,Gopal,Harry,White, Jane}),\u03a6C ({4, 3, 2, 3, 3, 3})\u3009\n= \u3008{FM,TH}, {White,Harry}, {18}\u3009\nVP2 = \u3008\u03a6A({FM,AI,DB,NW,TH}),\u03a6I ({Tom,Gopal,Bob, Jane}),\u03a6C ({4, 3, 4, 2, 3, 3})\u3009\n= \u3008{DB,NW}, {Tom, Jane}, {19}\u3009\nVP3 = \u3008\u03a6A({FM,AI,CA, SE, TH}),\u03a6I ({Harry,White, Tom, Jane}),\u03a6C ({2, 3, 3, 2, 3, 3})\u3009\n= \u3008{CA,SE}, {Harry,White}, {16}\u3009\n\u22c4"}, {"heading": "3.3 Dominance: Preference over Compositions", "text": "In the previous sections, we have discussed how to evaluate and compare a composition with respect to the attributes as a function of its components. In order to identify preferred compositions, we need to compare compositions with respect to their aggregated valuations over all attributes, based on the originally specified intra-attribute and relative importance preferences. We present a specific dominance relation for performing such a comparison.\nDefinition 11 (Dominance). Dominance \u227bd is a binary relation defined as follows: for all U8,V \u2208 m \u220f\ni=1\nF (Xi)\nU \u227bd V \u21d4 \u2203Xi : U(Xi)\u227b \u2032 iV(Xi) \u2227\n\u2200Xk : (Xk \u22b2Xi \u2228Xk \u223c\u22b2 Xi) \u21d2 U(Xk) \u2032 kV(Xk)\nIn Definition 11, we call the attributeXi as the \u201cwitness\u201d of the relation. The dominance relation \u227bd is derived from and respects both the intra-attribute preferences (\u227bi) as well as the relative importance preferences (\u22b2) asserted by the user. Figure 2 graphically illustrates how dominance is derived from user-specified preferences. First, to start with we have user specified preferences, namely intra-attribute (\u227bi) and relative importance (\u22b2) preferences. Next, from \u227bi preferences, the valuations of compositions with respect to attributes are computed using the aggregation function (\u03a6i). Then the intra-attribute preference relation to compare the aggregated valuations (\u227b\u2032i) is derived from \u227bi. Finally, the global dominance (\u227bd ) is defined in terms of \u227b \u2032 i and \u22b2.\nThe definition of dominance states that a composition U dominates V iff we can find a witness attribute Xi such that with respect to the intra-attribute preference \u227bi, the valuation of U dominates V in terms of \u227b\u2032i, and for all attributes Xk which the user considers more important than (\u22b2) or indifferent to (\u223c\u22b2) Xi, the valuation of Xk in U is at least as preferred ( \u2032i) as the valuation of Xk in V.\n8. To avoid excessively cluttering the notation, for a given composition C, we will slightly abuse notation by using C interchangeably with VC.\nExample. In our running example (see Section 1.1), we have VP2 \u227bd VP1 with I as witness and VP1 \u227bd VP3 with A as witness. If I\u22b2A, I\u22b2C but A \u223c\u22b2 C then VP2 \u227bd VP1 and VP2 \u227bd VP3 with I as witness, but VP1 6 \u227bd VP3 and VP3 6 \u227bd VP1. This is because P1 is preferred to P3 with respect to A ({FM,TH}\u227b\u2032A{CA,SE}); but P3 is preferred to P1 with respect to C ({16}\u227b\u2032C{18}), and neither A nor C is relatively more important than the other. \u22c4"}, {"heading": "3.4 Properties of \u227bd", "text": "We now proceed to analyze some properties of \u227bd with respect to the worst-frontier aggregation function. First, we show that a partial feasible composition is not dominated with respect to \u227bd by any of its extensions. This property will be useful in establishing the soundness of algorithms that compute the most preferred compositions (see Section 4). Next, we observe that \u227bd is irreflexive (follows from the irreflexivity of \u227bi), and proceed to identify the conditions under which \u227bd is transitive. We focus on transitive preferences because many studies have considered transitivity to be a key property of preference relations (von Neumann & Morgenstern, 1944; French, 1986; Mas-Colell et al., 1995)9.\nProposition 6. Whenever preferences are aggregated using the worst-frontier based aggregation function, for any partial feasible composition C, there is no feasible extension C \u2295W that dominates it, i.e., VC\u2295W 6 \u227bd VC.\nProof. The proof proceeds by showing that with respect to each attribute Xi, VC\u2295W (Xi) 6 \u227b \u2032 i VC(Xi), thereby ruling out the existence of a witness for VC\u2295W \u227bd VC . Suppose that by contradiction, C \u2295W is a feasible extension of C such that VC\u2295W \u227bd VC . By Definition 11, VC\u2295W \u227bd VC requires the existence of a witness attributeXi \u2208 X such that VC\u2295W (Xi)\u227b \u2032 iVC(Xi), i.e., \u2200b \u2208 VC(Xi) \u2203a \u2208 VC\u2295W (Xi) : a \u227bi b (1)\nBy Definition 7, we have VC\u2295W (Xi) = \u03a6i(VC(Xi) \u222a VW (Xi)). However, by Definition 6 a \u2208 \u03a6i(VC(Xi)\u222aVW (Xi)) \u21d2 \u2204b \u2208 VC(Xi)\u222aVW (Xi) : a \u227bi b, which contradicts Equation (1). This rules out the existence of a witness for VC\u2295W \u227bd VC . Hence, VC\u2295W 6 \u227bd VC .\nWe next proceed to show that \u227bd is not necessarily transitive when intra-attribute and relative importance preference relations are both arbitrary strict partial orders.\nProposition 7. When intra-attribute preferences \u227bi as well as relative importance among attributes \u22b2 are arbitrary partial orders, U \u227bd V \u2227 V \u227bd Z ; U \u227bd Z\nProof. We show a counter example of a compositional system with partially ordered {\u227bi},\u22b2 and compositions U ,V,Z such that U \u227bd V, V \u227bd Z but U 6\u227bd Z.\nConsider a system with a set of attributes X = {X1,X2,X3,X4}, each with domains D1 = {a1, b1}, . . . D4 = {a4, b4}. Let the relative importance relation \u22b2 on X and the intraattribute preferences \u227b1 . . . \u227b4 be given by \u22b2 = {(X1,X3), (X2,X4)} and \u227bi= {(ai, bi)}, i = 1, 2, 3, 4 respectively (Figure 3). The valuations of U ,V,Z with respect to the attributes X are given in Table 4.\n9. While some studies of human decision making have argued that human preferences are not necessarily transitive (Tversky, 1969), others have offered evidence to the contrary (Regenwetter, Dana, & DavisStober, 2011).\nX1\nX3\nX2\nX4\nRelative Importance (\u22b2)\na1 \u227b1 b1\na2 \u227b2 b2\na3 \u227b3 b3\na4 \u227b4 b4\nIntra-variable preferences\nClearly U \u227bd V with X1 as the witness, and V \u227bd Z with X2 as the witness. In addition, note that:\nZ(X3)\u227b \u2032 3U(X3) (2) Z(X4)\u227b \u2032 4U(X4) (3)\nHowever, we observe that U 6 \u227bd Z:\na. X1 is not a witness due to X4 \u223c\u22b2 X1 and Equation (3).\nb. X2 is not a witness due to X3 \u223c\u22b2 X2 and Equation (2).\nc. X3 is not a witness due to Equation (2).\nd. X4 is not a witness due to Equation (3).\nThe above proposition shows that the dominance relation \u227bd is not transitive when \u227bi and \u22b2 are arbitrary partial orders, when considering worst-frontier based aggregation. Because transitivity of preference is a necessary condition for rational choice (von Neumann\n& Morgenstern, 1944; French, 1986; Mas-Colell et al., 1995), we proceed to investigate the possibility of obtaining such a dominance relation by restricting \u22b2. We later prove that such a restriction is necessary and sufficient for the transitivity of \u227bd .\nDefinition 12 (Relative Importance as an Interval Order). A relative importance relation \u22b2 is a binary relation which is reflexive and satisfies the following axiom.\n\u2200Xi,Xj ,Xk,Xl \u2208 X : (Xi \u22b2Xj \u2227Xk \u22b2Xl) \u21d2 (Xi \u22b2Xl \u2228Xk \u22b2Xj) (4)\nWe say that Xi is relatively more important than Xj if Xi \u22b2Xj .\nProposition 8 (Transitivity of \u22b2 see Fishburn, 1985). \u22b2 is transitive.\nRemarks.\n1. Definition 12 imposes an additional restriction on the structure of the relative importance relation \u22b2, over a strict partial order. A strict partial order is just irreflexive and transitive; however, the relative importance relation in Definition 12 should in addition satisfy Equation (4), thereby yielding an interval order (Fishburn, 1985).\n2. The indifference relation with respect to \u22b2, namely \u223c\u22b2 is not transitive. For example, if there are three attributes X = {X1,X2,X3}, and \u22b2 = {(X1,X2)}. \u22b2 satisfies the condition for an interval order, and we have X1 \u223c\u22b2 X3 and X3 \u223c\u22b2 X2, but X1 6\u223c\u22b2 X2 because X1 \u22b2X2.\nPropositions 9-12 establish the properties of the dominance relation \u227bd in the case where the relative importance relation \u22b2 is an interval order. In particular, we prove that \u227bd is irreflexive (Proposition 9) and transitive (Proposition 12), making \u227bd a strict partial order (Theorem 1).\nProposition 9 (Irreflexivity of \u227bd ). U \u2208 m \u220f\ni=1\nF (Xi) \u21d2 U 6\u227bd U .\nProof. Suppose that U \u227bd U by contradiction. Then \u2203Xi, s.t. U(Xi)\u227b \u2032 iU(Xi) by definition. But this contradicts Proposition 3.\nThe above proposition ensures that the dominance relation \u227bd is strict over compositions. In other words, no composition is preferred over itself. Next, we proceed to establish the other important property of rational preference relations: transitivity of \u227bd . We make use of two intermediate propositions 10 and 11 that are needed for the task.\nIn Proposition 10, we prove that if an attribute Xi is relatively more important than Xj , then Xi is not more important than a third attribute Xk implies that Xj is also not more important than Xk. This will help us prove the transitivity of the dominance relation. Figure 4 illustrates the cases that arise.\nProposition 10. \u2200Xi,Xj ,Xk : Xi \u22b2Xj \u21d2 ( (Xk \u22b2Xi \u2228Xk \u223c\u22b2 Xi) \u21d2 (Xk \u22b2Xj \u2228Xk \u223c\u22b2 Xj) )\nThe proof follows from the fact that \u22b2 is a partial order.\nProof.\n1. Xi \u22b2Xj (Hyp.)\n2. Xk \u22b2Xi \u2228Xk \u223c\u22b2 Xi (Hyp.) Show Xk \u22b2Xj \u2228Xk \u223c\u22b2 Xj\n2.1. Xk \u22b2Xi \u21d2 Xk \u22b2Xj By transitivity of \u22b2 and (1.); see Figure 4(a)\n2.2. Xk \u223c\u22b2 Xi \u21d2 Xk \u22b2Xj \u2228Xk \u223c\u22b2 Xj\ni. Xk \u223c\u22b2 Xi (Hyp.)\nii. (Xk \u22b2Xj) \u2228 (Xj \u22b2Xk) \u2228 (Xk \u223c\u22b2 Xj) Always; see Figure 4(b,c)\niii. Xj \u22b2Xk \u21d2 Xi \u22b2Xk (1.) Contradiction! iv. Xk \u22b2Xj \u2228Xk \u223c\u22b2 Xj (2.2.ii., iii.)\n3. Xi \u22b2Xj \u21d2 ( (Xk \u22b2Xi \u2228Xk \u223c\u22b2 Xi) \u21d2 (Xk \u22b2Xj \u2228Xk \u223c\u22b2 Xj) ) (1., 2.1, 2.2)\nProposition 11 states that if attributes Xi,Xj are such that Xi \u223c\u22b2 Xj then at least one of them, Xu is such that with respect to the other, Xv, there is no attribute Xk that is less important while at the same time Xk \u223c\u22b2 Xu. This result is needed to establish the transitivity of the dominance relation.\nProposition 11. \u2200Xi,Xj , u 6= v,Xi \u223c\u22b2 Xj \u21d2 \u2203Xu,Xv \u2208 {Xi,Xj},\u2204Xk : (Xu \u223c\u22b2 Xk \u2227 Xv \u22b2Xk)\nThe proof makes use of the fact that relative importance is an interval order relation.\nProof. Let Xi \u223c\u22b2 Xj , and X \u2032 i and X \u2032 j be attributes that are less important than Xi and Xj respectively (if any). Figure 5 illustrates all the cases. Figure 5(a, b, c, d, e) illustrates the cases when at most one of X \u2032i and X \u2032 j exists, and in each case the claim holds trivially. For example, in the cases of Figure 5(a, b, c), both Xu = Xi;Xv = Xj and Xu = Xj ;Xv = Xi satisfy the implication, and in the cases of Figure 5(d, e), the corresponding satisfactory assignments to Xu and Xv are shown in the figure. The case of Figure 5(f) never arises because \u22b2 is an interval order (see Definition 12). Hence, the proposition holds in all cases.\nThe above proposition reflects the interval order property of the \u22b2 relation, and it complements the result of Proposition 7, where \u227bd was shown to be intransitive when \u22b2 is not an interval order. In fact, if relative importance was defined as a strict partial order instead, the above proof does not hold. Given that U \u227bd V with witness Xi and V \u227bd Z with witness Xj , the above proposition guarantees that one among Xi and Xj can be chosen as a potential witness for U \u227bd Z so that the conditions demonstrated in the counter example of Proposition 7 are avoided. Using the propositions 10 and 11, we are now in a position to prove transitivity of \u227bd in Proposition 12.\nProposition 12 (Transitivity of \u227bd ). \u2200 U ,V,Z \u2208 m \u220f\ni=1\nF (Xi),\nU \u227bd V \u2227 V \u227bd Z \u21d2 U \u227bd Z.\nThe proof proceeds by considering all possible relationships between Xi,Xj , the respective attributes that are witnesses of the dominance of U over V and V over Z. Lines 5, 6, 7 in the proof establish the dominance of U over Z in the cases Xi \u22b2Xj , Xj \u22b2Xi and Xi \u223c\u22b2 Xj respectively. In the first two cases, the more important attribute among Xi and Xj is shown to be the witness for U \u227bd Z with the help of Proposition 10; and in the last case we make use of Proposition 11 to show that at least one of Xi,Xj is a witness for U \u227bd Z.\nProof.\n1. U \u227bd V (Hyp.)\n2. V \u227bd Z (Hyp.) 3. \u2203Xi : U(Xi)\u227b \u2032 iV(Xi) (1.) 4. \u2203Xj : V(Xj)\u227b \u2032 jZ(Xj) (2.)\nThree cases arise: Xi \u22b2Xj(5.), Xj \u22b2Xi(6.) and Xi \u223c\u22b2 Xj(7.).\n5. Xi \u22b2Xj \u21d2 U \u227bd Z\n5.1. Xi \u22b2Xj (Hyp.) 5.2. V(Xi) \u2032 iZ(Xi) (2., 5.1.) 5.3. U(Xi)\u227b \u2032 iZ(Xi) (3., 5.2.) 5.4. \u2200Xk : (Xk \u22b2Xi \u2228Xk \u223c\u22b2 Xi) \u21d2 U(Xk) \u2032 kZ(Xk)\ni. Let Xk \u22b2Xi \u2228Xk \u223c\u22b2 Xi (Hyp.)\nii. U(Xk) \u2032 kV(Xk) (1., 5.4.i.)\niii. Xk \u22b2Xj \u2228Xk \u223c\u22b2 Xj (5.4.i., P roposition 10) iv. V(Xk) \u2032 kZ(Xk) (2., 5.4.iii.)\nv. U(Xk) \u2032 kZ(Xk) (5.4.ii., 5.4.iv.)\n5.5. Xi \u22b2Xj \u21d2 U \u227bd Z (5.1., 5.3., 5.4.)\n6. Xj \u22b2Xi \u21d2 U \u227bd Z\n6.1. This is true by symmetry ofXi,Xj in the proof of (5.); in this case, it can easily be shown that U(Xj)\u227b \u2032 iZ(Xj) and \u2200Xk : (Xk\u22b2Xj\u2228Xk \u223c\u22b2 Xj) \u21d2 U(Xk) \u2032 kZ(Xk).\n7. Xi \u223c\u22b2 Xj \u21d2 U \u227bd Z\n7.1. Xi \u223c\u22b2 Xj (Hyp.) 7.2. \u2203Xu,Xv \u2208 {Xi,Xj} : Xu 6= Xv\u2227\u2204Xk : (Xu \u223c\u22b2 Xk\u2227Xv\u22b2Xk) (7.1., P roposition 11) 7.3. Without loss of generality, suppose that Xu = Xi,Xv = Xj (Hyp.). 7.4. V(Xi) \u2032 iZ(Xi) (2., 7.1.) 7.5. U(Xi)\u227b \u2032 iZ(Xi) (3., 7.4.) 7.6. \u2200Xk : Xk \u22b2Xi \u21d2 U(Xk) \u2032 kZ(Xk).\ni. Xk \u22b2Xi (Hyp.)\nii. U(Xk) \u2032 kV(Xk) (1., 7.6.i.)\niii. Xk \u22b2Xj \u2228Xk \u223c\u22b2 Xj Because Xj \u22b2Xk Contradicts (7.1., 7.6.i.)! iv. V(Xk) \u2032 kZ(Xk) (2., 7.6.iii.)\nv. U(Xk) \u2032 kZ(Xk) (7.6.ii., 7.6.iv.)\n7.7. \u2200Xk : Xk \u223c\u22b2 Xi \u21d2 U(Xk) \u2032 kZ(Xk)\ni. Xk \u223c\u22b2 Xi (Hyp.)\nii. U(Xk) \u2032 kV(Xk) (1., 7.7.i.)\niii. Xk \u22b2Xj \u2228Xk \u223c\u22b2 Xj Because Xj \u22b2Xk Contradicts (7.2., 7.3.)! iv. V(Xk) \u2032 kZ(Xk) (2., 7.7.iii.)\nv. U(Xk) \u2032 kZ(Xk) (7.7.ii., 7.7.iv.)\n7.8. \u2200Xk : Xk \u22b2Xi \u2228Xk \u223c\u22b2 Xi \u21d2 U(Xk) \u2032 kZ(Xk) (7.6., 7.7.) 7.9. Xi \u223c\u22b2 Xj \u21d2 U \u227bd Z (7.5., 7.8.)\n8. (Xi \u22b2Xj \u2228Xj \u22b2Xi \u2228Xi \u223c\u22b2 Xj) \u21d2 U \u227bd Z (5., 6., 7.)\n9. U \u227bd V \u2227 V \u227bd Z \u21d2 U \u227bd Z (1., 2., 8.)\nTheorem 1. If the intra-attribute preferences \u227bi are arbitrary strict partial orders and relative importance \u22b2 is an interval order, then \u227bd is a strict partial order.\nProof. Follows immediately from Propositions 9 and 12."}, {"heading": "3.5 Role of Interval Order Restriction on \u22b2 in the Transitivity of \u227bd", "text": "Theorem 1 establishes that given partially ordered intra-attribute preferences \u227bi, if the relative importance relation (\u22b2) is an interval order (Definition 12), then \u227bd is transitive. In addition, we have also seen a counter example in Proposition 7, which shows that the transitivity of \u227bd does not necessarily hold when \u22b2 is an arbitrary partial order.\nIs there a condition weaker than the interval order restriction that still makes \u227bd transitive when retain intra-attribute preferences as arbitrary partial orders and dominance as in Definition 11? The answer turns out to be \u2018no\u2019, which we prove next.\nBefore we proceed to prove the necessity of an interval ordered relative importance relation \u22b2 for a transitive dominance relation \u227bd , we will examine interval orders more closely. Recall from Definition 12 that every interval order \u22b2 on X is a partial order, and it additionally satisfies Ferrer\u2019s axiom for all X1,X2,X3,X4 \u2208 X :\n(X1 \u22b2X2 \u2227X3 \u22b2X4) \u21d2 (X1 \u22b2X4 \u2228X3 \u22b2X2)\nWe borrow a characterization of the above axiom by Fishburn (1970a, 1985) that the relation \u22b2 is an interval order if and only if 2\u2295 2 * \u22b2, where 2\u2295 2 is a relational structure shown in Figure 6. In other words, a partial order is an interval order if and only if it has no restriction of itself that is isomorphic to the partial order structure shown in Figure 6.\nTheorem 2 (Necessity of Interval Order). For partially ordered intra-attribute preferences and dominance relation in Definition 11, \u227bd is transitive only if relative importance \u22b2 is an interval order.\nProof. Assume that \u22b2 is not an interval order. This is true if and only if 2 \u2295 2 \u2286 \u22b2. However, we showed in Proposition 7 that in this case, \u227bd is not transitive using a counter example (see Figure 3). Hence, \u227bd is transitive only if relative importance \u22b2 is an interval order."}, {"heading": "3.6 Additional Properties of \u227bd with Respect to the Properties of {\u227bi} and \u22b2", "text": "We now present some additional properties10 of \u227bd that hold when certain restrictions are imposed on the intra-attribute and relative importance preference relations.\nProposition 13. If \u22b2 is a total order and Xi is the most important attribute in X with respect to \u22b2, then \u227b\u2032i \u2286 \u227bd .\n10. The results in this section essentially prove conjectures that arose out of analysis of the results of our experiments (see Section 6).\nProof. Let Xi be the (unique) most important attribute in X . Suppose that U(Xi)\u227b \u2032 iV(Xi), thereby making Xi a potential witness for U \u227bd V. Since Xi is the most important attribute, \u2200Xk \u2208 X : Xi \u22b2Xk, the second clause in the definition of U \u227bd V trivially holds. Hence, Xi is a witness for U \u227bd V (see Definition 11).\nNote that the proof of the above proposition only made use of the fact that \u2200Xk \u2208 X : Xi \u22b2Xk, which is a weaker condition than \u22b2 being a total order. Hence, we have the following more general result.\nProposition 14. If \u22b2 is such that there is a unique most important attribute Xi, i.e., \u2203Xi \u2208 X : \u2200Xk \u2208 X \\ {Xi} : Xi \u22b2Xk, then \u227b \u2032 i \u2286 \u227bd .\nWe proceed to prove an important result that gives conditions under which \u227bd is a weak order.\nTheorem 3. When the aggregation function \u227b\u2032i is defined as in Definition 8, if \u22b2 as well as {\u227bi} are total orders, then \u227bd is a weak order.\nProof. \u227bd is a weak order if and only if it is a strict partial order and negatively transitive. We have already shown that \u227bd is a strict partial order in Theorem 1, and hence we are only left with proving that \u227bd is negatively transitive, i.e., U 6 \u227bd V \u2227V 6 \u227bd Z \u21d2 U 6\u227bd Z.\nFirst, we note that since \u227bi is a total order, \u227b \u2032 i is also a total order (see Definition 8). U 6 \u227bd V \u21d2 (\u2200Xi : U(Xi)\u227b \u2032 iV(Xi) \u21d2 \u2203Xk : (Xk \u22b2Xi \u2227 U(Xk) 6 \u2032 k V(Xk))) (Xk \u223c\u22b2 Xi is not possible because \u22b2 is a total order). (1) Let Xi andXj be the most important attributes s.t. U(Xi)\u227b \u2032 iV(Xi) and V(Xj)\u227b \u2032 jZ(Xj) respectively. (2) Let Xp and Xq be the most important attributes s.t. Xp \u22b2Xi \u2227 U(Xp) 6 \u2032 p V(Xp) and Xq \u22b2Xj \u2227 V(Xq) 6 \u2032 q Z(Xq) respectively (such Xp and Xq must exist by (1)). (3)\nCase 1 Both Xi and Xj as defined in (2) exist (cases when such Xi and/or Xj don\u2019t exist will be dealt with separately).\nThree sub-cases arise: Xp \u22b2Xq, Xq \u22b2Xp and Xp = Xq. Case 1a: Suppose that Xp \u22b2Xq (see Figure 7). (4)\n\u2022 From (3) we know that Xp \u22b2Xi \u2227 U(Xp) 6 \u2032 p V(Xp), i.e., V(Xp)\u227b \u2032 pU(Xp). (5)\n\u2022 From (3) and (4) we know that V(Xp) \u2032 pZ(Xp), because Xq is the most important\nattribute that is also more important than Xj and V(Xq) 6 \u2032 q Z(Xq), and Xp is more important than Xq (and hence Xj as well). (6)\n\u2022 But because Xj is the most important attribute with V(Xj)\u227b \u2032 jZ(Xj), and Xp \u22b2Xj\n(since Xq \u22b2Xj and Xp\u22b2Xq), we have V(Xp) 6 \u227b \u2032 p Z(Xp) (as Xj is the most important attribute with V(Xj)\u227b \u2032 jZ(Xj), using (2)). Along with (6), this means that V(Xp) = Z(Xp). (7)\n\u2022 From (5) and (7), Z(Xp)\u227b \u2032 pU(Xp). (8)\n\u2022 Also, \u2200Xk : Xk \u22b2 Xp \u21d2 U(Xk) = V(Xk) \u2227 V(Xk) = Z(Xk) (because Xk is more important than Xi,Xj and Xp,Xq). (9)\n\u2022 From (8) and (9), Z \u227bd U with Xp as witness. Hence, U 6 \u227bd Z.\nCase 1b: Suppose that Xq \u22b2Xp. The claim holds by symmetry. Case 1c: Suppose that Xp = Xq.\n\u2022 From (3) we know that Xp \u22b2Xi \u2227 U(Xp) 6 \u2032 p V(Xp), i.e., V(Xp)\u227b \u2032 pU(Xp).\n\u2022 Similarly, Z(Xp)\u227b \u2032 pV(Xp).\n\u2022 Hence, Z(Xp)\u227b \u2032 pU(Xp). Moreover, \u2200Xk : Xk \u22b2 Xp \u21d2 U(Xk) = V(Xk) \u2227 V(Xk) =\nZ(Xk) (because Xk is more important than Xi,Xj and Xp,Xq).\n\u2022 Therefore, Z \u227bd U with Xp as witness. Hence, U 6 \u227bd Z.\nCase 2 : If Xi (say) does not exist, then \u2200Xi : U(Xi) 6 \u227b \u2032 i V(Xi). Let Xp be the most important attribute s.t. V(Xp)\u227b \u2032 pU(Xp) (if Xp does not exist, then trivially U 6 \u227bd Z because U = V). (10) Case 2a: Suppose Xp \u22b2Xq. Then \u2200Xk : Xk \u22b2Xp \u21d2 V(Xk) = Z(Xk) (because Xk \u22b2Xq as well). Moreover, Xp \u22b2 Xq \u21d2 V(Xp) = Z(Xp). Hence, Z \u227bd U with Xp as witness and therefore U 6 \u227bd Z.\nCase 2b: Suppose Xq \u22b2Xp. Then \u2200Xk : Xk \u22b2Xq \u21d2 U(Xk) = V(Xk) (because Xk \u22b2Xp as well). Moreover, Xq \u22b2Xp \u21d2 U(Xq) = V(Xq). Hence, Z \u227bd U with Xq as the witness and therefore U 6 \u227bd Z.\nCase 2c: SupposeXp = Xq. Then \u2200Xk : Xk\u22b2Xp \u21d2 V(Xk) = Z(Xk) (becauseXk\u22b2Xq as well) and similarly \u2200Xk : Xk \u22b2Xq \u21d2 U(Xk) = V(Xk) (because Xk \u22b2Xp as well). Moreover, since V(Xq) 6 \u2032 q Z(Xq) (by (3)), V(Xp)\u227b \u2032 pU(Xp) (using (10)) we have Z(Xp)\u227b \u2032 pU(Xp). Hence, Z \u227bd U with Xp as the witness and therefore U 6 \u227bd Z.\nCase 3 : If Xj (say) does not exist, the proof is symmetric to Case 2.\nCase 4 : Suppose that both Xi and Xj do not exist. Then, for any attribute Xi, V(Xi) \u2032 iU(Xi) and Z(Xi) \u2032 iV(Xi), i.e., \u2200Xi : Z(Xi) \u2032 iU(Xi). Hence, there is no witness for U \u227bd Z, or U 6 \u227bd Z.\nCases 1 - 4 are exhaustive, and in each case U 6 \u227bd Z. This completes the proof.\nWe further conjecture that \u227bd is a weak order when {\u227bi} are total orders and \u22b2 is an arbitrary interval order (i.e., under conditions that are more general than the conditions of Theorem 3). We leave this as an open problem.\nConjecture 1. If {\u227bi} are total orders and \u22b2 is an arbitrary interval order, then \u227bd is a weak order.\nRemark. As stated, Conjecture 1 and Theorem 3 apply whenever {\u227bi} are totally ordered, and when using our method of comparing two aggregated valuations (\u227b\u2032i) (see Definition 8). More generally, we note that they hold whenever {\u227b\u2032i} are total orders, regardless of the chosen method of comparing two aggregated valuations, and regardless of the properties of the input intra-attribute preferences {\u227bi}. For example, suppose that {\u227bi} are ranked weak orders (i.e., not total orders). As such, Conjecture 1 and Theorem 3 do not apply. However, for each attribute Xi if we define \u03a6i(S) to be the rank number corresponding to the worst frontier of S, and \u227b\u2032i as the natural total order over the ranks in the weak order, then the consequences of Conjecture 1 and Theorem 3 hold.\nWe summarize the theoretical results relating the properties of the dominance relation and the properties of the preference relations \u22b2 and {\u227b\u2032i} in Table 5."}, {"heading": "3.7 Choosing the Most Preferred Solutions", "text": "Given a set C = {Ci} of compositions and a preference relation \u227b (e.g., \u227bd ) that allows us to compare any pair of compositions, the problem is to find the most preferred composition(s). When the preference relations are totally ordered (e.g., a ranking) over a set of alternative solutions, rationality of choice suggests ordering the alternatives with respect to the complete preference and choosing the \u201cbest\u201d alternative, i.e., the one that ranks the highest. However, when the preference relation is a strict partial order, e.g., in the case of \u227bd , not every pair of solutions (compositions) may be comparable. Therefore, a solution that is the most preferred with respect to the preference relation may not exist. Hence, we use the notion of the non-dominated set of solutions defined as follows.\nDefinition 13 (Non-dominated Set). The non-dominated set of elements (alternatives or solutions or compositions) of a set C with respect to a (partially ordered) preference relation \u227b (e.g., \u227bd ), denoted \u03a8\u227b(C), is a subset of C such that none of the elements in S are preferred to any element in \u03a8\u227b(C).\n\u03a8\u227b(C) = {Ci \u2208 C|\u2204Cj \u2208 C : Cj \u227b Ci}\nNote that as per this definition, \u03a8\u227b(C) is the maximal set of elements in C with respect to the relation \u227b. It is also easy to observe that C 6= \u2205 \u21d4 \u03a8\u227b(C) 6= \u2205."}, {"heading": "4. Algorithms for Computing the Most Preferred Compositions", "text": "We now turn to the problem of identifying from a set of feasible compositions (that satisfy a pre-specified functionality (\u03d5)), the most preferred subset, i.e., the non-dominated set."}, {"heading": "4.1 Computing the Maximal/Minimal Subset with Respect to a Partial Order", "text": "The straightforward way of computing the maximal (non-dominated) elements in a set S of n elements with respect to any preference relation \u227b is the following algorithm: For each element si \u2208 S, check if \u2203sj \u2208 S : sj \u227b si, and if not, si is in the non-dominated set. This simple \u201ccompare all pairs and delete dominated\u201d approach involves computing dominance with respect to \u227b O(n2) times.\nRecently Daskalakis, Karp, Mossel, Riesenfeld and Verbin (2009) provided an algorithm that performs at most O(wn) pairwise comparisons to compute the maximal elements of a set S with respect to a partial order \u227b, where n = |S| and w is the width of the partial order \u227b on S (the size of the maximal set of pairwise incomparable elements in S with respect to \u227b). The algorithm presented by Daskalakis et al. finds the minimal elements; the corresponding algorithm for finding the maximal elements is as follows. Let T0 = \u2205. Let the elements of the set S be x1, x2, \u00b7 \u00b7 \u00b7 xn. At step t(\u2265 1):\n\u2022 Compare xt to all elements in Tt\u22121.\n\u2022 If there exists some a \u2208 Tt\u22121 such that a \u227b xt, do nothing.\n\u2022 Otherwise, remove from Tt\u22121 all elements a such that xt \u227b a and put xt into Tt.\nOn termination, the set Tn contains all the maximal elements in S, i.e., non-dominated subset of S with respect to \u227b. We make use of the above algorithm to compute the nondominated (maximal) subsets (namely, \u03a8\u227b(\u00b7)), and the original version of the algorithm given in by Daskalakis (2009) to compute the worst-frontiers (minimal subsets)."}, {"heading": "4.2 Algorithms for Finding the Most Preferred Feasible Compositions", "text": "We proceed to develop algorithms for finding the most preferred feasible compositions, given a compositional system \u3008R,\u2295, |=\u3009 consisting of a repository R of pre-existing components, a user specified functionality \u03d5, user preferences {\u227bi} and \u22b2 and a functional composition algorithm f . We analyze the properties of the algorithms with respect to the worst-frontier based aggregation (see Definition 6).\nDefinition 14 (Soundness and Completeness). An algorithm A that, given a set C of feasible compositions, computes a set of feasible compositions SA \u2286 \u03a8\u227bd (C) is said to be sound with respect to C. Such an algorithm is complete with respect to C if SA \u2287 \u03a8\u227bd (C).\nAlgorithm 1 ComposeAndFilter(\u227b, f, \u03d5)\n1. Find the set C of feasible compositions w.r.t. \u03d5 using f 2. return \u03a8\u227b(C)\nGiven a compositional system \u3008R,\u2295, |=\u3009 consisting of a repository R of pre-existing components, and a user specified functionality \u03d5, the most straightforward approach to finding the most preferred feasible compositions involves: (a) computing the set C of functionally feasible compositions using a functional composition algorithm f , and (b) choosing the non-dominated set according to preferences over non-functional attributes.\nAlgorithm 1 follows this simple approach to produce the set \u03a8\u227bd (C) of all non-dominated feasible compositions, when invoked with the preference relation \u227bd , the functional composition algorithm f and the desired functionality \u03d5. \u03a8\u227bd (C) can be computed using the procedure described in Section 4.1. Algorithm 1 is both sound and complete with respect to C."}, {"heading": "4.3 A Sound and Weakly Complete Algorithm", "text": "Note that in the worst case, Algorithm 1 evaluates the dominance relation \u227bd between all possible pairs of feasible compositions C. However, this can be avoided if we settle for a non-empty subset of \u03a8\u227bd (C). Note that every solution in such a subset is guaranteed to be \u201coptimal\u201d with respect to user preferences \u227bd . We introduce the notion of weak completeness to describe an algorithm that computes a set of feasible compositions, at least one of which is non-dominated with respect to \u227bd .\nDefinition 15 (Weak Completeness). An algorithm A that, given a set C of feasible compositions, computes a set SA of feasible compositions is said to be weakly complete with respect to C if \u03a8\u227bd (C) 6= \u2205 \u21d2 SA \u2229\u03a8\u227bd (C) 6= \u2205.\nWe now proceed to describe a sound and weakly complete algorithm, i.e., one that computes a non-empty subset of \u03a8\u227bd (C). The algorithm is based on the following observation: Solutions that are non-dominated with respect to each of the relatively most-important attributes are guaranteed to include some solutions that are non-dominated overall with respect to \u227bd as well. Hence, the solutions that are most preferred with respect to each such attribute can be used to compute a non-empty subset of \u03a8\u227bd (C). We proceed by considering solutions that are most preferred with respect to an attribute Xi.\nDefinition 16 (Non-dominated solutions w.r.t. attributes). The set \u03a8\u227b\u2032i(C) of solutions that are non-dominated with respect to an attribute Xi is defined as\n\u03a8\u227b\u2032i(C) = {U | U \u2208 C \u2227 \u2204V \u2208 C : V(Xi)\u227b \u2032 iU(Xi)}.\nLet I \u2286 X be the set of most important attributes with respect to \u22b2, i.e., I = \u03a8\u22b2(X ) = {Xi|\u2204Xj \u2208 X : Xj \u22b2Xi}. Clearly, I 6= \u2205 because there always exists a non-empty maximal set of elements in the partial order \u22b2. The following proposition states that for every Xi \u2208 I, at least one of the solutions in \u03a8\u227b\u2032i(C) is also contained in \u03a8\u227bd (C).\nProposition 15. \u2200Xi \u2208 I : \u03a8\u227bd (C) 6= \u2205 \u21d2 \u03a8\u227b\u2032i(C) \u2229 \u03a8\u227bd (C) 6= \u2205 (See Appendix A for a proof).\nAlgorithm 2 constructs a subset of \u03a8\u227bd (C), using the sets {\u03a8\u227b\u2032i(C) | Xi \u2208 I}. First, the algorithm computes the set I of most important attributes in X with respect to \u22b2 (Line 2). The algorithm iteratively computes \u03a8\u227b\u2032i(C) for each Xi \u2208 I (Lines 3, 4), identifies the subset of solutions that are non-dominated with respect to \u227bd in each case, and combines them to obtain \u03b8 \u2286 \u03a8\u227bd (C).\nAlgorithm 2 WeaklyCompleteCompose({\u227bi | Xi \u2208 X},\u22b2, f, \u03d5)\n1. \u03b8 \u2190 \u2205 2. I \u2190 \u03a8\u22b2(X ) = {Xi | \u2204Xj : Xj \u22b2Xi} 3. for all Xi \u2208 I do 4. \u03a8\u227b\u2032i(C) \u2190 ComposeAndFilter(\u227b \u2032 i, f, \u03d5) 5. \u03b8 \u2190 \u03b8 \u222a\u03a8\u227bd (\u03a8\u227b\u2032i(C)) 6. end for 7. return \u03b8\nTheorem 4 (Soundness and Weak Completeness of Algorithm 2). Given a set of attributes X , preference relations \u22b2 and \u227b\u2032i, Algorithm 2 generates a set \u03b8 of feasible compositions such that \u03b8 \u2286 \u03a8\u227bd (C) and \u03a8\u227bd (C) 6= \u2205 \u21d2 \u03b8 6= \u2205 (See Appendix A for a proof).\nIn general, Algorithm 2 is not guaranteed to yield a complete set of solutions, i.e., \u03b8 6= \u03a8\u227bd (C). The following example illustrates such a case.\nExample. Consider a compositional system with two attributes X = {X1,X2}, with domains {a1, a2, a3} and {b1, b2, b3} respectively. Let their intra-attribute preferences be total orders: a1 \u227b1 a2 \u227b1 a3 and b1 \u227b2 b2 \u227b2 b3 respectively, and let both attributes be equally important (\u22b2 = \u2205). Suppose the user-specified goal \u03d5 is satisfied by three feasible compositions C1, C2, C3 with valuations VC1 = \u3008{a1}, {b3}\u3009, VC2 = \u3008{a3}, {b1}\u3009 and VC3 = \u3008{a2}, {b2}\u3009 respectively. Given the above preferences, \u03a8\u227b\u2032\n1 (C) = {C1} and \u03a8\u227b\u2032 2 (C) = {C2}.\nThus, \u03b8 = {C1, C2} However, \u03a8\u227bd (C) = {C1, C2, C3} 6= \u03b8. \u22c4\nThe above example shows that the most preferred valuation for one attribute (e.g., X1) can result in poor valuations for one or more other attributes (e.g., X2). Algorithm 2 may thus leave out solutions like C3 that are not most preferred with respect to any one \u227b \u2032 i, but nevertheless may correspond to a good compromise when we consider multiple most important attributes. It is a natural question to ask what are the minimal conditions under which Algorithm 2 is complete. A related question is whether Algorithm 2 can be guaranteed to produce a certain minimum number of non-dominated solutions (|\u03b8|) under some specific set of conditions. Note that in general, the cardinality of \u03b8 depends not only on the user preferences \u227bi,\u22b2, but also on the user specified functionality \u03d5 which together with the repository R determines the set C of feasible compositions. However, in the special case when \u22b2 specifies a single attribute Xt that is relatively more important than all other attributes, we can show that Algorithm 2 is complete.\nProposition 16. If I = {Xt} \u2227 \u2200Xk 6= Xt \u2208 X : Xt \u22b2 Xk, then \u03a8\u227bd (C) \u2286 \u03b8, i.e., Algorithm 2 is complete (See Appendix A for a proof).\nIt remains to be seen what are all the necessary and sufficient conditions for ensuring the completeness of Algorithm 2, and we plan to address this problem in the future."}, {"heading": "4.4 Optimizing with Respect to One of the Most Important Attributes", "text": "As we will see in Section 5, Algorithm 2 has a high worst case complexity, especially if the set I of most important attributes is large. This is due to the fact that for each most important attribute Xi \u2208 I, the algorithm computes the non-dominated set over the feasible compositions with respect to \u227b\u2032i first, and then with respect to \u227bd , i.e., \u03b8 \u222a \u03a8\u227bd (\u03a8\u227b\u2032i(C)) (Line 4). The computation of the non-dominated set with respect to \u227bd , although expensive, is crucial to ensuring the soundness of Algorithm 2.\nWhile soundness is a desirable property, there may be settings requiring faster computation of feasible compositions, where it may be acceptable to obtain a set S of feasible compositions that contains at least one (whenever there exists one) of the most preferred feasible compositions (one that is non-dominated by any other feasible composition with respect to \u227bd ). In such a case, it might be useful to have an algorithm with lower complexity that finds a set of feasible compositions of which at least one is most preferred (i.e., weakly complete), as opposed to one with a higher complexity that finds a set of feasible compositions all of which are most preferred (i.e., sound).\nAlgorithm 3 AttWeaklyCompleteCompose({\u227bi | Xi \u2208 X},\u22b2, f, \u03d5)\n1. I \u2190 \u03a8\u22b2(X ) = {Xi | \u2204Xj : Xj \u22b2Xi} 2. for some Xi \u2208 I 3. \u03b8 \u2190 \u03a8\u227b\u2032i(C) = ComposeAndFilter(\u227b \u2032 i, f, \u03d5) 4. return \u03b8\nWe consider one such modification of Algorithm 2, namely Algorithm 3, that arbitrarily picks one of the most important attributes Xi \u2208 I (as opposed to the entire set I as in Algorithm 2) and finds the set of all feasible compositions that are non-dominated with respect to \u227b\u2032i, i.e., \u03b8 = \u03a8\u227b\u2032i(C) for Algorithm 3.\nThe weak completeness of Algorithm 3 follows directly from Proposition 15. In the following example, however, we show that some of the feasible compositions produced by Algorithm 3 may be dominated by some other feasible composition with respect to \u227bd , i.e., Algorithm 3 is not sound.\nExample. Consider a compositional system with two attributes X = {X1,X2}, with domains {a1, a2} and {b1, b2} respectively. Let their intra-attribute preferences be: a1 \u227b1 a2 and b1 \u227b2 b2 respectively, and let both attributes by equally important (\u22b2 = \u2205; I = {X1,X2}). Suppose the user-specified goal \u03d5 is satisfied by three feasible compositions C1, C2, C3 with valuations VC1 = \u3008{a1}, {b1}\u3009, VC2 = \u3008{a2}, {b1}\u3009 and VC3 = \u3008{a1}, {b2}\u3009 respectively. Given the above preferences, if we choose to maximize the preference with respect to attribute X1 \u2208 I, then \u03b8 = \u03a8\u227b\u2032\n1 (C) = {C1, C3}. If we choose X2 \u2208 I instead, we\nget \u03b8 = \u03a8\u227b\u2032 2 (C) = {C1, C2}. However, in any case \u03a8\u227bd (C) = {C1} 6= \u03b8. \u22c4\nThe following proposition gives a condition under which Algorithm 3 is complete.\nProposition 17. If |I| = 1, i.e., there is a unique most important attribute with respect to \u22b2, then Algorithm 3 is complete (See Appendix A for a proof).\nAlgorithm 4 InterleaveCompose(L,\u227b, f, \u03d5)\n1. if L = \u2205 then 2. return \u2205 3. end if 4. \u03b8 = \u03a8\u227b(L) 5. \u03b8\u2032 = \u2205 6. for all C \u2208 \u03b8 do 7. if C 6|= \u03d5 then 8. \u03b8\u2032 = \u03b8\u2032 \u222a f(C) 9. else\n10. \u03b8\u2032 = \u03b8\u2032 \u222a {C} 11. end if 12. end for 13. if \u03b8\u2032 = \u03b8 then 14. return \u03b8 15. else 16. InterleaveCompose((L \\ \u03b8) \u222a \u03b8\u2032,\u227b, f, \u03d5) 17. end if"}, {"heading": "4.5 Interleaving Functional Composition with Preferential Optimization", "text": "Algorithms 1, 2 and 3 identify the most preferred feasible compositions using the two step approach: (a) find the feasible compositions C; and (b) compute a subset of C that is preferred with respect to the user preferences. We now develop an algorithm that eliminates some of the intermediate partial feasible compositions from consideration based on the user preferences. This is particularly useful in settings (such as when |C| is large relative to |\u03a8\u227bd (C)|), where it might be more efficient to compute only a subset of C that are likely (based on \u227bi and \u22b2) to be in \u03a8\u227bd (C).\nAlgorithm 4 requires that the functional composition algorithm f is incremental (see Definition 2), i.e., that it produces a set f(C) of functionally feasible extensions given any existing partial feasible composition C. At each step, Algorithm 4 chooses a subset of the feasible extensions produced by applying f on all the non-dominated partial feasible compositions, based on the user preferences. Algorithm 4 computes the non-dominated set of feasible compositions by interleaving the execution of the incremental functional composition algorithm f with the ordering of partial solutions with respect to preferences over non-functional attributes.\nAlgorithm 4 is initially invoked using the parameters L = (\u22a5) 11, \u227bd , the functional composition algorithm f and \u03d5. The algorithm maintains at each step a list L of partial feasible compositions under consideration. If L is empty at any step, i.e., there are no more partial feasible compositions to be explored, then the algorithm terminates with no\n11. It is not necessary to invoke the algorithm with L = (\u22a5) (i.e., only \u22a5 in the list L) initially. There may be functional composition algorithms that begin with an non-empty composition C and proceed to obtain a feasible composition by iteratively altering C. For instance, one could think of randomized or evolutionary algorithms that begin with a random, non-empty composition which is somehow repeatedly \u201cimproved\u201d during the course of composition.\nsolution (Lines 1\u2212 3); otherwise it selects from L, the subset \u03b8 that is non-dominated with respect to some preference relation \u227b (Line 4). If all the partial feasible compositions in \u03b8 are also feasible compositions, then the algorithm outputs \u03b8 and terminates (Lines 13 \u2212 14). Otherwise, it replaces the partial feasible compositions in \u03b8 that are not feasible compositions, with their one-step extensions (Lines 7 \u2212 8). The algorithm continues to recurse (Line 16), at each iteration updating the dominated set by replacing \u03b8 with \u03b8\u2032 until there are no changes in the dominated set i.e., \u03b8 = \u03b8\u2032. Note that it is not possible to eliminate the dominated compositions (L\\ \u03b8) at this stage because some of their extensions (in a later iteration) could result in non-dominated compositions.\nProposition 18 (Termination of Algorithm 4). Given a finite repository of components, Algorithm 4 terminates in a finite number of steps (See Appendix A for a proof).\nWe next investigate the soundness, weak-completeness and completeness properties of Algorithm 4. Proposition 19 states that the algorithm is in general not sound with respect to C, i.e., it is not guaranteed to produce feasible compositions that are non-dominated with respect to \u227bd . However, this does not discount the usefulness of the algorithm, as we will show that it is sound under some other assumptions (see Theorem 5).\nProposition 19 (Unsoundness of Algorithm 4). Given a functional composition algorithm f and user preferences \u227b\u2032i and \u22b2 over a set of attributes X , Algorithm 4 is not guaranteed to generate a set of feasible compositions \u03b8 such that \u03b8 \u2286 \u03a8\u227bd (C) (See Appendix A for a proof).\nThis result implies that in general, not all feasible compositions returned by Algorithm 4 (\u03b8) are in \u03a8\u227bd (C). The example shown in Figure 8 illustrates this problem. At the time of termination, there may exist some partial feasible composition B in the list L that is dominated by some feasible composition E in \u03b8; however, it may be possible to extend B to a feasible composition B\u2295W that dominates one of the compositions F in \u03b8 (as illustrated by the counter example in the proof, see Appendix A). In other words, VE \u227bd VB, VF \u223cd VE , VF \u223cd VB and VB\u2295W \u227bd VF .\nAlthough Algorithm 4 is not sound in general, we show that it is sound when the \u227bd relation is an interval order (as opposed to an arbitrary partial order).\nTheorem 5 (Soundness of Algorithm 4). If \u227bd is an interval order, then given a functional composition algorithm f and user preferences {\u227b\u2032i},\u22b2 over a set of attributes X ,\nAlgorithm 4 generates a set \u03b8 of feasible compositions such that \u03b8 \u2286 \u03a8\u227bd (C) (See Appendix A for a proof).\nBecause Theorem 5 requires \u227bd to be an interval order, an important question arises: What are the conditions under which \u227bd an interval order? Theorem 3 (see Section 3.6) gives us one such condition when \u227bd is a weak order (i.e., also an interval order). The next two theorems give conditions under which Algorithm 4 is weakly complete and complete respectively.\nTheorem 6 (Weak Completeness of Algorithm 4). If \u227bd is an interval order, then given a functional composition algorithm f and user preferences {\u227b\u2032i},\u22b2 over a set of attributes X , Algorithm 4 produces a set \u03b8 of feasible compositions such that \u03a8\u227bd (C) 6= \u2205 \u21d2 \u03b8\u2229\u03a8\u227bd (C) 6= \u2205 (See Appendix A for a proof).\nTheorem 7 (Completeness of Algorithm 4). If \u227bd is a weak order, then given a functional composition algorithm f and user preferences {\u227b\u2032i},\u22b2 over a set of attributes X , Algorithm 4 generates a set \u03b8 of feasible compositions such that \u03a8\u227bd (C) \u2286 \u03b8 (See Appendix A for a proof).\nRemark. The above algorithm does not explore feasible compositions that can be generated by extending other feasible compositions (by the condition in Line 7). Proposition 6 shows that when worst-frontier based aggregation is used, extending a feasible composition cannot yield a more preferred feasible composition. This guarantees the soundness of Algorithm 4 (Theorem 5). However, when other aggregation schemes are used, it might be the case that a feasible extension of a feasible composition is more preferred, in which case, in order to ensure the soundness of Algorithm 4, Line 10 will have to be changed to \u03b8\u2032 = \u03b8\u2032 \u222a {C} \u222a f(C).\nA summary of the conditions (in terms of the properties of the relative importance or dominance preference) under which the algorithms are sound, complete and weak complete are given in Table 6."}, {"heading": "5. Complexity", "text": "In this section, we study the complexity of dominance testing (evaluating \u227bd , see Section 3.3) as well as the complexity of the algorithms for computing the non-dominated set of feasible compositions (see Section 4). We express the worst case time complexity of dominance testing in terms of the size of user specified intra-attribute, relative importance preference relations and the attribute domains (see Table 7)."}, {"heading": "5.1 Computing the Maximal(Non-dominated)/Minimal Subset.", "text": "Let \u227b be a partial order on the set S, with a width of w (size of the maximal set of elements which are pairwise incomparable) and n = |S|. The algorithm due to Daskalakis et al. discussed in Section 4.1 finds the maximal or minimal subset of S with respect to \u227b within O(wn) pairwise comparisons. Note that the maximum width of any partial order is w = n, when \u227b= \u2205. Hence, in the worst case O(n2) comparisons are needed."}, {"heading": "5.2 Complexity of Dominance Testing", "text": "Computing Worst Frontiers (\u03a6i). Let S \u2286 Di. Recall from Definition 6 that the worst frontier of a set S with respect to an attribute Xi is \u03a6i(S) := {v : v \u2208 S,\u2204u \u2208 S s.t. v \u227bi u}, i.e., the minimal set of elements in S with respect to the preference relation \u227bi. Using the algorithm due to Daskalakis et al. to find the minimal set with respect to a partial order (see above), the complexity of computing \u03a6i(S) is O(nwint).\nComparing Worst Frontiers (\u227b\u2032i). Let A,B \u2208 F (Xi). As per Definition 8, A\u227b \u2032 iB \u21d4 \u2200b \u2208 B,\u2203a \u2208 A : a \u227bi b. In the worst case, computing A\u227b \u2032 iB would involve checking whether a \u227bi b for each pair a, b, which would cost O(kint). Hence, the complexity of comparing the worst frontiers A and B is O(n2kint).\nDominance Testing (\u227bd ). Recall from Definition 11 the definition of dominance:\nU \u227bd V \u21d4 \u2203Xi : U(Xi)\u227b \u2032 iV(Xi) \u2227\n\u2200Xk, (Xk \u22b2Xi \u2228Xk \u223c\u22b2 Xi) \u21d2 U(Xk) \u2032 kV(Xk)\nThe complexity of dominance testing is the complexity of finding a witness attribute in X for U \u227bd V. For each attribute Xi, the complexity of computing the first clause in the conjunction of the definition of U \u227bd V is O(n\n2kint); and that of computing the second clause is O ( m(n2kint + krel) ) , where O(krel) and O(n 2kint) are the complexities of evaluating the left and right hand sides of the implication (respectively) for each Xk \u2208 X . Hence, the complexity of dominance testing is O ( m ( n2kint +m(n 2kint + krel) ))\n, or simply O ( m2(n2kint + krel) ) . We will use the shorthand d to denote m2(n2kint + krel)."}, {"heading": "5.3 Complexity of Algorithms", "text": "Each of the algorithms for computing the non-dominated feasible compositions (presented in Section 4) makes use of a functional composition algorithm f to find feasible compositions. Hence, the complexity analysis of the algorithms needs to incorporate of the complexity of the functional composition algorithm as well.\nRecall that Algorithms 1, 2 and 3 begin by computing the set of all feasible compositions in a single shot using a functional composition algorithm as a black box, and then proceed to find the most preferred among them. Algorithm 4 instead makes use of a functional composition algorithm that produces the set of feasible compositions by iteratively extending partial feasible compositions. Specifically, it interleaves the execution of the functional composition algorithm with the ordering of partial solutions with respect to preferences over non-functional attributes.\nWe denote by O(fe) and O(fg) respectively, the complexity of computing the set of feasible extensions of a partial feasible composition with respect to \u03d5 and the complexity of computing the set of all feasible compositions with respect to \u03d5."}, {"heading": "5.4 Complexity of Algorithm 1", "text": "The overall complexity for finding the set of all non-dominated feasible compositions is O(fg+cwdomd), where O(d) is the complexity of evaluating \u227bd for any pair of compositions. The first term fg accounts for Line 1 of the algorithm which computes the set of all feasible compositions, and the term cwdomd corresponds to the computation of \u03a8\u227bd (C) as per the algorithm given in Section 4.1."}, {"heading": "5.5 Complexity of Algorithm 2", "text": "The complexity of identifying the most important attributes I with respect to \u22b2 (Line 1) is O(mwrelkrel). For each most important attribute Xi \u2208 I, Algorithm 2 (a) invokes Algorithm 1 using the derived intra-attribute preference \u227b\u2032i to compute \u03a8\u227b\u2032i(C); (b) identifies the subset of \u03a8\u227b\u2032i(C) that is non-dominated with respect to \u227bd ; and (c) adds them to the set of solutions. Hence, the complexity of Algorithm 2 is O ( mwrelkrel+mI(fg+cwdomn 2kint)+ mI |\u03a8\u227b\u2032i(C)| 2d ) .\nSince the feasible compositions with respect to any given \u03d5 are fixed, by computing the feasible compositions only once (during the first invocation of Algorithm 1 and storing them), the complexity of Algorithm 2 can be further reduced to O(fg + mwrelkrel + mIcwdomn\n2kint +mI |\u03a8\u227b\u2032 i (C)|2d)."}, {"heading": "5.6 Complexity of Algorithm 3", "text": "The complexity of identifying the most important attributes I with respect to \u22b2 (Line 1) is O(mwrelkrel). In contrast to Algorithm 2, Algorithm 3 invokes Algorithm 1 using the derived intra-attribute preference \u227b\u2032i to compute \u03a8\u227b\u2032i(C) for exactly one of the most important attributes, Xi \u2208 I. Hence, the complexity of Algorithm 3 is O ( fg+mwrelkrel+cwdomn 2kint)."}, {"heading": "5.7 Complexity of Algorithm 4", "text": "We consider the worst case wherein the space of partial feasible compositions explored by Algorithm 4 is a tree rooted at \u22a5; let b be its maximum branching factor (corresponding to the maximum number of extensions produced by the functional composition algorithm), and h its height (corresponding to the maximum number of components used in a composition that satisfies \u03d5). In the worst case, in each iteration of Algorithm 4, every element of L, the list of current partial feasible compositions, ends up in the non-dominated set \u03b8.\nEach level in the tree corresponds to one iteration of Algorithm 4, and at the lth iteration, in the worst case there are bl nodes in L. Hence, the complexity of the lth iteration is O ( (bl)2d + blfe )\n, where the first term corresponds to computing the non-dominated set among the current set of partial feasible compositions, and the second term corresponds to computing the feasible extensions of each partial feasible composition. Hence, the overall complexity of Algorithm 4 is O ( \u2211h\nl=0 (b 2ld+ blfe)\n)\n\u2248 O(b2hd+ bhfe).\nWe further conducted experiments on the algorithms using simulated problem instances to study how the algorithms perform in practice, which we describe next."}, {"heading": "6. Experiments, Results & Analysis", "text": "We now describe the design and results of our experiments aimed at comparing the algorithms described in Section 4 with respect to the following attributes.\na) Quality of solutions produced by the algorithms. We measure the quality of the solutions produced by the algorithms as follows. First, among all the most preferred solutions that exist to the composition problem, we measure the fraction that is produced by the algorithm. Second, among all the solutions produced by the algorithm, we measure the fraction of solutions that are most preferred for the composition problem.\nb) Performance and efficiency of the algorithms. The performance of an algorithm is measured in terms of response time (time taken to return the set of solutions), and the efficiency is measured in terms of the number of times an algorithm invokes the functional composition algorithm."}, {"heading": "6.1 Experimental Setup", "text": "We now describe the data structure used to model the search space of compositions and the simulation parameters used to generate the compositions in our experiments."}, {"heading": "6.1.1 Modeling the Search Space of Compositions using Recursive Trees", "text": "The uniform recursive tree (Smythe & Mahmoud, 1995) serves as a good choice to model the search space of partial compositions and their feasible extensions. A tree with n vertices labeled by 1, 2, . . . n is a recursive tree if the node labeled 1 is distinguished as the root, and \u2200k : 2 \u2264 k \u2264 n, the labels of the nodes in the unique path from the root to the node labeled with k form an increasing sequence. A uniform recursive tree of n nodes (denoted URTree(n)) is one that is chosen with equal probability from the space of all such trees.\nA simple growth rule can be used to generate a uniform random recursive tree of n nodes, given such a tree of n\u22121 nodes: Given URTree(n\u22121), choose uniformly at random a node in URTree(n \u2212 1), and add a node labeled n with the randomly chosen node as parent to obtain URTree(n). The properties of this class of uniform random recursive trees are well studied in the literature of random data structures (see Smythe & Mahmoud, 1995, for a survey).\nThe rationale behind choosing the uniform recursive tree data structure to model the search space of our problem is that the growth rule that generates the recursive tree is similar in intuition to the process of searching for a feasible composition. Recall that the search space of partial compositions is generated by the recursive application of the functional composition algorithm f . The nodes in the recursive tree correspond to components in the repository of the composition problem. The tree is built starting with the root node \u2013 the search for feasible compositions correspondingly begins with \u22a5. The recursive tree is further grown by attaching new nodes to any of the existing nodes \u2013 this corresponds to extending feasible partial compositions by adding (composing) new components to any of the existing feasible partial compositions. Finally, the leaves of a recursive tree at depth d from the root correspond to a (possibly feasible) composition of d components from the repository in the composition problem.\nWe now show the precise correspondence between a recursive tree data structure and a search space of partial compositions.\n\u2022 Each node in the tree corresponds to a composition.\n\u2022 The root node corresponds to the empty composition \u22a5,\n\u2022 Each node at level 1 corresponds to the composition of \u22a5 with a component W in the repository, i.e., \u22a5\u2295W = W,W \u2208 R,\n\u2022 Each node at level i corresponds to the composition of a component W in the repository with the composition associated with the parent of this node,\n\u2022 A leaf node is called a feasible node if the composition associated with this node satisfies \u03d5.\nFor the purpose of experimentally evaluating our algorithms for finding the most preferred compositions and to compare them, we generate random recursive trees with varying number of nodes (or |R|, the number of components in the repository). In the generated random recursive tree, a certain fraction (feas) of leaves are picked uniformly randomly and are labeled to be feasible compositions. For each node in the generated and labeled\nrandom recursive tree, the valuation of attributes X = {Xi} (corresponding to the partial composition it represents) is randomly generated based on the respective domains ({Di}) 12."}, {"heading": "6.1.2 User Preferences", "text": "We generate user preferences by generating random partial/total orders for each \u227bi and random interval/total order for \u22b2 for varying number of attributes m = |X | and domain size of attributes n = |Di|."}, {"heading": "6.1.3 Implementation of Algorithms", "text": "Computing Dominance In order to check if one valuation dominates another with respect to the user preferences {\u227bi} and \u22b2, we iterate through all attributes X and check if there exists a witness for the dominance to hold (see Definition 11).\nComputing the most preferred solutions We implemented algorithms A1, A2, A3 and A4 in Java. Preliminary experiments with A2 showed that the algorithm did not scale up for large problem instances. In particular, when the number of attributes is large and dominance testing is computationally intensive, A2 timed out due to the computation of the non-dominated set multiple times for each of the most important attributes. Hence we did not proceed to run experiments on the samples with A2. However, we were able to run experiments with algorithm A3 that arbitrarily picks one of the most important attributes and finds the most preferred solutions with respect to the intra-attribute preferences of that attribute.\nIn algorithms A1 and A3 we first compute all solutions using the functional composition algorithm (simulated by f), whereas in A4, we interleave calls to f with choosing preferred\n12. Note that in the setup described here, the valuations for attributes is generated randomly for each node. In real applications, the valuations of the nodes may depend on the valuations of their parents.\ncompositions (partial solutions) at each step. At each step, A4 chooses a subset of the feasible extensions of the current compositions for further exploration. Table 9 gives a brief description of the implemented algorithms.\nTable 10 shows the attributes that are recorded during the execution of each of the algorithms A1, A3 and A4 for each composition problem."}, {"heading": "6.2 Results", "text": "We compare the algorithms A1, A3, A4 with respect to:\n1. Quality of solutions produced by the algorithms, in terms of SP/PF and SP/S\n2. Performance and efficiency in terms of running time and number of calls to the functional composition algorithm f"}, {"heading": "6.2.1 Quality of Solutions", "text": "We compare the quality of solutions produced by the algorithms in terms of the following measures.\n\u2022 SP/PF 13: Proportion of most preferred solutions produced by the algorithm (fraction of all optimal solutions produced by the algorithm). If the algorithm is complete, then SP/PF = 1.\n\u2022 SP/S: Proportion of solutions produced by the algorithm that are most preferred (fraction of solutions produced by the algorithm, that are optimal). If the algorithm is sound, then SP/S = 1.\nThe algorithm A1 exhaustively searches the entire space of compositions to identify all the feasible compositions F , and then finds the most preferred among them with respect to the user preferences \u22b2 and {\u227bi}. Because it computes the set \u03a8\u227bd (F ), we observed that for A1, SP = PF = S, i.e., it is both sound (finds only the most preferred solutions) and complete (finds all the most preferred solutions).\nWe next compare the algorithms A3 and A4 with respect to SP/PF and SP/S for various types of ordering restrictions on the user preferences {\u227bi} and \u22b2. Table 11 reports results for the following combinations: (i) \u22b2 is an interval order, {\u227bi} are partial orders; (ii) \u22b2 is an interval order, {\u227bi} are total orders; (iii) \u22b2 is a total order, {\u227bi} are partial orders; and (iv) \u22b2 is a total order, {\u227bi} are total orders.\nComparison of SP/PF\n\u2022 In general, most of the most preferred solutions were found by both the algorithms (see Table 11).\n13. For the sake of readability, we use the notation used to denote the set to denote its cardinality as well, e.g., SP is used to denote both the set and its cardinality (|SP |).\nComparison of SP/S\n\u2022 In general, most of the solutions that were found by the interleaved algorithm A4 were the most preferred solutions (see Table 12). On the other hand, algorithm A3 produced many solutions that were not the most preferred.\n\u2022 The second (and fourth) row(s) of Tables 12 and 11 suggests that when intra-attribute preferences ({\u227bi}) are total orders and \u22b2 is an arbitrary interval order, the interleaved algorithm A4 is sound and complete, i.e., it produces exactly the non-dominated set of solutions with respect to \u227bd . Conjecture 1 and Theorem 3 in Section 3.6 were obtained based on this insight."}, {"heading": "6.2.2 Performance and Efficiency", "text": "We compare the performance and efficiency of A3, A4 in terms of the number of times the functional composition algorithm f is invoked, and running time (in milliseconds) for the algorithms to compute their solutions.\nNumber of calls to functional composition f The plots in Figures 9 and 10 show the results of our experiments performed on problem instances where relative importance preferences are interval/total orders and intra-attribute preferences are partial/total orders, and they yield the following observations.\n\u2022 In general, our experiments show that the interleaved algorithm A4 makes fewer calls to f compared to A3. This can be seen in Figures 9 and 10, where all the data points corresponding to the number of calls to f made by A4 (colored red) lie below those that correspond to A3 (colored green) in plots (a) and (b). This is because A4 explores only the most preferred subset of the available feasible extensions at each step in the search. On the other hand, A3 exhaustively explores all feasible extensions at each step.\n\u2022 When the intra-attribute preferences {\u227bi} are total orders, the difference in the number of calls to f made by A3 and A4 is more pronounced. This can be observed in Figures 9 and 10, where the data points corresponding to the number of calls to f made by A4 (colored red) lie much closer to the axis corresponding to the number of feasible compositions, in comparison to A3 (colored green). This can be explained by the fact that in this case the dominance relation is larger, due to which the number of incomparable pairs of compositions is smaller. Therefore, at each interleaving step the non-dominated set computed for extension is smaller.\n\u2022 For both A3 and A4, the number of calls to f decreases as the fraction of feasible compositions (feas) increases. Figures 9 and 10 show that as the number of feasible compositions increases, the data points corresponding to the number of calls to f (for all algorithms) gets closer to the axis corresponding to the number of feasible compositions.\nRunning time We observed that the running times of both algorithms A3, A4 depend on two key factors:\n\u2022 fdelay, the time taken per execution of the functional composition at each step\n\u2022 Complexity of dominance testing which is in turn a function of |Di|, |X | and the properties of {\u227bi} and \u22b2. In particular, the complexity of dominance testing depends on the size of the preference relations {\u227bi} and \u22b2 (see Section 5.2).\nIn order to understand the effect of fdelay on the running times of the algorithms, we ran experiments with fdelay = 10ms and fdelay = 1000ms on problem instances where relative importance preferences are interval/total orders and intra-attribute preferences are partial/total orders (see Table 8 for the other parameters used and their ranges). The respective results are shown in Figures 11 \u2013 14. The results yield the following observations.\n\u2022 In general, in comparison to the running time of the algorithm A4 when the intraattribute preferences (\u227bi) are partial orders, A4 is faster when\u227bi are total orders. This trend is observed in plots (a) and (b) of Figure 12 (where intra-attribute preferences are total orders), as the data points corresponding to the running time of A4 (colored red) are much closer to the axis corresponding to the number of feasible compositions, in comparison to the plots (a) and (b). A similar trend is also observed in Figures 13 and 14.\n\u2022 The algorithm A3 almost always outperforms the blind search algorithm A1 in terms of running time. This is because A3 computes the non-dominated set in the last step with respect to the intra-attribute preference over the valuations of one attribute \u227b\u2032i (in place of the dominance relation \u227bd used by A1).\n\u2022 The interleaved algorithm A4 is more sensitive to the complexity of dominance than A1 and A3, because at each step A4 computes the non-dominated subset of extensions to explore. On the other hand, A1 and A3 involve computation of dominance only in the last step. A3 is faster than A1, more than A4, because it computes the nondominated set with respect to the intra-attribute preference over the valuations of one attribute \u227b\u2032i (in place of the dominance relation \u227bd used by A1 and A4).\n\u2022 Algorithms A1 and A3 are more sensitive to fdelay than the interleaved algorithm A4. This is because at each step A1 and A3 explore all feasible extensions, but A4 only explores the preferred subset of the feasible extensions at each step.\n\u2022 The overall running times of A1, A3 and A4 depend on the relative trade-offs among |Di|, |X |, the properties of {\u227bi},\u22b2 (those that influence the complexity of dominance testing) on the one hand and fdelay on the other."}, {"heading": "7. Summary and Discussion", "text": "We now summarize our contributions in this paper."}, {"heading": "7.1 Summary", "text": "Many applications, e.g., planning, Web service composition, embedded system design, etc., rely on methods for identifying collections (compositions) of objects (components) satisfying some functional specification. Among the compositions that satisfy the functional specification (feasible compositions), it is often necessary to identify one or more compositions that are most preferred with respect to user preferences over non-functional attributes. Of particular interest are settings where user preferences over attributes are expressed in qualitative rather than quantitative terms (Doyle & Thomason, 1999).\nIn this paper, we have proposed a framework for representing and reasoning with qualitative preferences over compositions in terms of the qualitative preferences over attributes of their components; and developed a suite of algorithms to compute the most preferred feasible compositions, given an algorithm that computes the functionally feasible compositions. Specifically,\na) We have defined a generic aggregation function to compute the valuation of a composition as a function of the valuations of its components. We have also presented a strict partial order preference relation for comparing two compositions with respect to their aggregated valuations of each attribute;\nb) We have introduced a dominance relation for comparing compositions based on user specified preferences and established some of its key properties. In particular, we have shown that this dominance relation is a strict partial order when intra-attribute preferences are strict partial orders and relative importance preferences are interval orders.\nc) We have developed four algorithms for identifying the most preferred composition(s) with respect to the user preferences. The first three algorithms first compute the set of all feasible compositions (solutions) using a functional composition algorithm as a black box, and then proceed to find the most preferred among them (1) based on the dominance relation (ComposeAndFilter); and (2) based on the preferred valuations with respect to the most important attribute(s) (WeaklyCompleteCompose and AttWeaklyCompleteCompose). The fourth algorithm interleaves the execution of a functional composition algorithm that produces the set of solutions by iteratively extending partial solutions and the ordering of partial solutions with respect to user preferences (InterleaveCompose).\nd) We have established some key properties of the above algorithms. ComposeAndFilter is guaranteed to return the set of all non-dominated solutions; WeaklyCompleteCompose is guaranteed to return a non-empty subset of non-dominated solutions; AttWeaklyCompleteCompose is guaranteed to return at least one of the non-dominated solutions; and InterleaveCompose is guaranteed to return (i) a non-empty subset of non-dominated solutions when the dominance relation is an interval order; and (ii) the entire set of non-dominated solutions when the dominance relation is a weak order.\ne) We have performed simulation experiments to compare the algorithms with respect to (i) the ratio of most preferred solutions produced to the actual set of most preferred solutions, and the ratio of the most preferred solutions produced to the entire set of solutions produced by the algorithm; (ii) their running times as a function of the search space and the overhead in each call to the functional composition algorithm; and (iii) the number of calls each algorithm makes to the functional composition algorithm during the course of its execution. The results showed the feasibility of our algorithms for composition problems that involve up to 200 components.\nf) We have analyzed the results of experiments to obtain additional theoretical properties of the dominance relation as a function of the properties of the underlying intra-attribute preference relations and relative importance preference relation. In particular, we obtained non-trivial results as a consequence of our analysis of experimental results, which were not known apriori, including conditions under which the dominance relation is a weak order. These conjectures/results are significant because they give the properties of the dominance relation directly as a function of the input\nuser preferences. In turn, they also throw light on the soundness, weak-completeness and/or completeness properties of the algorithms.\nThe proposed techniques for reasoning with preferences over non-functional attributes are independent of the language used to express the desired functionality \u03d5 of the composition, and the method used to check whether a composition C satisfies the desired functionality, i.e., C |= \u03d5. Our formalism and algorithms may be applicable to a broad range of domains including Web service composition (see Dustdar & Schreiner, 2005; Pathak, Basu, & Honavar, 2008, for surveys), planning (see Hendler, Tate, & Drummond, 1990; Baier & McIlraith, 2008a), team formation (see Lappas, Liu, & Terzi, 2009; Donsbach, Tannenbaum, Alliger, Mathieu, Salas, Goodwin, & Metcalf, 2009) and indeed any setting that calls for choosing the most preferred solutions from a set of candidate solutions, where each solution is made up of multiple components."}, {"heading": "7.2 Discussion", "text": "In the following, we discuss some of the alternate choices that one could make in applying our formalism for specific applications.\nAggregation Functions. In our previous work (Santhanam, Basu, & Honavar, 2008), we had proposed the use of TCP-net representation with ceteris paribus semantics (Brafman et al., 2006) for reasoning with preferences in addressing the problem of Web service composition. We had assumed that the intra-attribute preferences are total orders; however, this assumption does not hold in many practical settings involving qualitative preferences over non-functional attributes. In this paper, we have relaxed this requirement, allowing intra-attribute preferences that are strict partial orders.\nIn this paper we demonstrated the use of the summation (e.g., number of credits in a POS) and worst frontier (e.g., areas of study and instructors) aggregation functions. In some scenarios, it might be necessary to consider other ways of aggregating the valuations of the components, for example, using the best frontier denoting the best possible valuations of the components (i.e., the maximal valuations for each attribute Xi with respect to \u227bi). Any aggregation function can be used in our formalism, provided that the preference relation over the aggregated valuations is a strict partial order. Otherwise, the choice of aggregation function and the preference relation to compare aggregated valuations may impact the properties of the resulting dominance relation, and as a result, may also affect the soundness and completeness properties of some of the proposed algorithms.\nThe aggregation functions demonstrated in this paper are independent of the how the components interact or are assembled, i.e., the structure of a composition. However, in general, it may be necessary for the aggregation function to take into account the structure and/or other interactions between the valuations of components in a composition. For example, in evaluating the reliability of a composition, one needs to consider the precise structure of the composition. The reliability of a composition Ci is the product of the reli-\nabilities of the components (\nn \u220f\ni=1\nVWi(Reliability)) when the components are arranged in a\nseries configuration (Rausand & H\u00f8yland, 2003). On the other hand, when the same set of components {Wi} are arranged in a parallel configuration, the reliability of Ci is computed\nas (1 \u2212 n \u220f\ni=1\n(1\u2212 VWi(Reliability))). In general, it might be necessary to introduce aggrega-\ntion functions that take into consideration a variety of factors including the structure, the function, as well as the non-functional attributes of the composition.\nComparing Sets of Aggregated Valuations. In this paper, we presented a preference relation (\u227b\u2032i) to compare sets of valuations computed using the worst frontier aggregation function (Definition 8). This preference relation requires that given two sets of valuations, every element in the dominated set is preferred to at least one of the elements in the dominating set of valuations. Other choices of \u227b\u2032i can be used as well, but care should be taken because the properties of the chosen preference relation may affect the properties of the dominance (\u227bd ) relation and the properties of the algorithms. However, as long as \u227b \u2032 i is a strict partial order (irreflexive and transitive), the dominance relation continues to remain a strict partial order (subject to \u22b2 being an interval order), and hence the properties of the algorithms hold. This provides the user with a wide range of preference relations for comparing sets of valuations to choose from (see Barbera et al., 2004, for a survey of preferences over sets).\nNote that Definition 8 does not ignore common elements when comparing two sets of elements. However, some settings may require a preference relation that compares only elements in the two sets that are not common. In such settings, a suitable irreflexive and transitive preference relation can be used, such as the asymmetric part of preference relations developed by Brewka et al. (2010) and Bouveret et al. (2009). In the absence of transitivity, the transitive closure of the relation may be used to compare sets of elements, as done by Brewka et al.\nDominance and its Properties. The dominance relation (\u227bd ) adopted in this paper is a strict partial order when the intra-attribute preferences are arbitrary strict partial orders and the relative importance is an interval order. It would be interesting to explore alternative notions of dominance that preserve the rationality of choice, by requiring a different set of properties (e.g., those that satisfy negative-transitivity instead of transitivity). It would also be of interest to examine the relationships between \u227bd and alternative dominance relations. Some results comparing \u227bd with the dominance relations proposed by other authors (Brafman et al., 2006; Wilson, 2004b, 2004a) have been presented elsewhere (Santhanam, Basu, & Honavar, 2010b, 2009).\nImplementation. The current implementation of dominance testing with respect to \u227bd is based on iteratively searching all the attributes to find a witness. It would be interesting to compare this with other methods for dominance testing such as the one proposed in one of our earlier works (Santhanam, Basu, & Honavar, 2010a) that uses efficient model checking techniques. We would also like to use other multi-attribute preference formalisms that include conditional preferences in our framework for compositional systems and compare the performance of the resulting implementation with the current implementation."}, {"heading": "7.3 Related Work", "text": "Techniques for representing and reasoning with user preferences over a set of alternatives have been studied extensively in the areas of decision theory, microeconomics, psychol-\nogy, operations research, etc. The seminal work by von Neumann and Morgenstern (1944) models user preferences using utility functions that map the set of possible alternatives to numeric values. More recently, models for representing and reasoning with quantitative preferences over multiple attributes have been developed (Fishburn, 1970a; Keeney & Raiffa, 1993; Bacchus & Grove, 1995; Boutilier, Bacchus, & Brafman, 2001). Such models have been used to address problems such as identifying the most preferred tuples resulting from database queries (Agrawal & Wimmers, 2000; Hristidis & Papakonstantinou, 2004; Bo\u0308rzso\u0308nyi, Kossmann, & Stocker, 2001), assembling preferred composite Web services (Zeng, Benatallah, Dumas, Kalagnanam, & Sheng, 2003; Zeng, Benatallah, Ngu, Dumas, Kalagnanam, & Chang, 2004; Yu & Lin, 2005; Berbner, Spahn, Repp, Heckmann, & Steinmetz, 2006), and in other composition problems.\nHowever, in many applications it is more natural for users to express preferences in qualitative terms (Doyle & McGeachie, 2003; Doyle & Thomason, 1999; Dubois, Fargier, Prade, & Perny, 2002) and hence, there is a growing interest in AI on formalisms for representing and reasoning with qualitative preferences (Brafman & Domshlak, 2009). We now proceed to place our work in the context of some of the recent work on representing and reasoning with qualitative preferences."}, {"heading": "7.3.1 TCP-nets", "text": "Notable among qualitative frameworks for preferences are preference networks (Boutilier et al., 2004; Brafman et al., 2006) that deal with qualitative and conditional preferences. A class of preference networks, namely Tradeoff-enhanced Conditional Preference networks (TCP-nets) (Brafman et al., 2006) are closely related to our work, and we now proceed to discuss where our framework departs from and adds to the existing TCP-net framework.\nTCP-nets provide a very elegant and compact graphical model to represent qualitative intra-attribute and relative importance preferences over a set of attributes. In addition, TCP-nets can also model conditional preferences using dependencies among attributes. While TCP-nets allow us to represent and reason about preferences in general over simple objects (each of which is described by a set of attributes), the focus of our work is to reason about such preferences over compositions of simple objects (i.e., a collection of objects satisfying certain functional properties). For example, in the domain of Web services, the problem of identifying the most preferred Web services from a repository of available ones based on their non-functional attributes, namely Web service selection can be solved using the TCP-net formalism. On the other hand, in addition to Web service selection, our formalism can also address the more complicated problem of identifying the most preferred composite Web services that collectively satisfy a certain functional requirement, namely Web service composition.\nOur formalism is based on the intra-attribute and relative importance preferences over a set of attributes describing the objects. As a result, the graphical representation scheme of TCP-nets can still be used to compactly encode the intra-attribute and relative importance preferences of the users within our formalism 14.\n14. In our setting, we do not consider conditional preferences that correspond to edges denoting conditional dependencies in the TCP-nets.\nWe have extended reasoning about preferences over single objects to enable reasoning about preferences over collections of objects. We have: (a) provided an aggregation function for computing the valuation of a composition as a function of the valuations of its components; (b) defined a dominance relation for comparing the valuations of compositions and established some of its properties; and (c) developed algorithms for identifying a subset or the set of most preferred composition(s) with respect to this dominance relation.\nOur formalism departs from TCP-nets in the interpretation of the intra-attribute and relative importance preferences over objects: the dominance relation in a TCP-net is defined as any partial order relation that is consistent with the given preferences over attributes of the objects, based on the ceteris-paribus semantics. We introduce a dominance relation (see Definition 11) that allows us to reason about preferences over collections of objects in terms of sets of valuations of the attributes of objects that make up the collection. For instance, our worst frontier aggregation function returns the set of worst possible attribute valuations among all the components.\nWhen our dominance relation is applied in the simpler setting where each collection consists of a single object, the aggregation function for each attribute reduces to the identity function, and the preference relation \u227b\u2032i over sets of valuations of each attribute Xi reduces to the intra-attribute preference \u227bi. We have recently shown in our earlier works (Santhanam et al., 2010b, 2009) that in general, when TCP-nets are restricted to unconditional preferences, our dominance relation (when each collection consists of a single object) and the dominance relation used in TCP-nets are incomparable; when relative importance is restricted to be an interval order, our dominance relation is more general than the dominance relation used in TCP-nets with only unconditional preferences. In the latter case, our dominance relation is computable in polynomial time, whereas there are no known polynomial time algorithms for computing TCP-net dominance (Santhanam et al., 2010b, 2009)."}, {"heading": "7.3.2 Preferences over Collections of Objects", "text": "Several authors have considered ways to extend user preferences to obtain a ranking of collections of objects (see Barbera et al., 2004, for a survey). In all these works, preferences are specified over individual objects in a set as opposed to preferences over valuations of the attributes of the objects. The preferences over objects are in turn used to reason about preferences over collections of those objects. This scenario can be simulated by our framework, by introducing a single attribute whose valuations correspond to objects in the domain.\nDesJardins et al. (2005) have considered the problem of finding subsets that are optimal with respect to user specified quantitative preferences over a set of attributes in terms of the desired depth, feature weight and diversity for each attribute. In contrast, our framework focuses on qualitative preferences. In our setting, depth preferences that map attribute valuations to their relative desirability can be mapped to qualitative intra-attribute preferences and feature weights can be mapped to relative importance. Diversity preferences over attributes refer to the spread (e.g., variance, range, etc.) of component valuations with respect to the corresponding attributes. It would be interesting to explore whether a suitable\ndominance relation can be defined so as to simultaneously capture in our framework the user preferences with respect to the depth, diversity and feature weights.\nMore recently, Binshtok et al. (2009) have presented a language for specification of preferences over sets of objects. This framework, in addition to intra-attribute and relative importance preferences over attributes, allows users to express preferences over the number (|\u03d5|) of elements in a set that satisfy a desired property \u03d5. The preference language in this case allows statements such as \u201cSi : |\u03d5| REL n\u201d (number of elements in the preferred set with property \u03d5 should be REL n), \u201cSj : |\u03d5| REL |\u03c8|\u201d (number of elements in the preferred set with property \u03d5 should be REL number of elements in the preferred set with property \u03c8), etc., where REL is one of the arithmetic operators >,<,=,\u2265,\u2264 and n is an integer. In addition, there can be relative importance between the various preference statements such as \u201cSi is more important than Sj\u201d as well as external cardinality constraints such as a bound on the number of elements in the preferred set.\nOur formalism can accommodate such preference statements, by representing each preference statement Si as a new binary valued attribute in the compositional system. For example, preference statements Si : |\u03d5| \u2265 n and Sj : |\u03d5| \u2264 |\u03c8| can be represented in our formalism by creating new binary attributes Xi and Xj with intra-attribute preferences 1 \u227bi 0 and 1 \u227bj 0 respectively. The relative importance statements such as \u201cSi is more important than Sj\u201d can then be directly mapped to Xi \u22b2 Xj . Any external cardinality constraints on the size of the preferred set can be encoded in our setting by functional requirements, so as to restrict the feasible solutions to only those that satisfy the cardinality constraints.\nConsider the example discussed by Binshtok et al. (2009), with preferences over senate members described by attributes: Party affiliation (Republican, Democrat ), Views (liberal, conservative, ultra conservative), and Experience (experienced, inexperienced). The attributes and their domains are listed in Table 13. The set preferences are given by:\n\u2022 S1 : \u3008|P = Re \u2228 V = Co| \u2265 2\u3009\n\u2022 S2 : \u3008|E = Ex| \u2265 2\u3009\n\u2022 S3 : \u3008|V = Li| \u2265 1\u3009\nNote that the senate members (i.e., the individual objects) are described by three attributes XP ,XV ,XE representing the party affiliation, views and experience respectively. The valuation function for these attributes is defined in the obvious manner, e.g., if a senator Wj is a republican, then VWj (XP ) = Re. We introduce three additional boolean attributes\nX1,X2,X3 corresponding to the preference statements S1, S2, S3 respectively. The valuation function for each new attribute of a senator Wi can then be defined as follows.\n\u2022 VWi(X1) =\n{\n1 , if Wi |= S1 i.e., VWi(XP ) = Re or VWi(XV ) = Co 0 , otherwise\n\u2022 VWi(X2) =\n{\n1 , if Wi |= S2 i.e., VWi(XE) = Ex 0 , otherwise\n\u2022 VWi(X3) =\n{\n1 , if Wi |= S3 i.e., VWi(XV ) = Li 0 , otherwise\nThe valuation of the collection of senators W1 \u2295W2 \u2295 . . .\u2295Wn for i \u2208 {1, 2, 3} is:\nVW1\u2295W2\u2295...\u2295Wn(Xi) = \u03a6i(VW1, VW2 , . . . VWn) = VW1(Xi) + VW2(Xi) + \u00b7 \u00b7 \u00b7+ VWn(Xi)\nNote that the aggregation function \u03a6i defined above differs from the worst-frontier based aggregation function adopted in Definition 6. The preference relation for comparing groups of senators with respect to each new attribute Xi can then be defined based on the preference statement Si. For example, in the case of X1 we define \u227b \u2032 1 such that any value \u2265 2 is preferred to any value < 2, etc. Having defined the above aggregation function and comparison relation for each new attribute, any dominance relation can be adopted to compare compositions (arbitrary subsets) with respect to all attributes including the dominance relation used by Binshtok et al. (2009).\nIn contrast to the framework of Binshtok et al., (2009) our formalism focuses on collections of objects that satisfy some desired criteria, rather than arbitrary subsets. We provide algorithms for finding the most preferred compositions that satisfy the desired criteria."}, {"heading": "7.3.3 Database Preference Queries", "text": "Several authors (Bo\u0308rzso\u0308nyi et al., 2001; Chomicki, 2003; Kiessling & Kostler, 2002; Kiessling, 2002) have explored techniques for incorporating user specified preferences over the result sets of relational database queries. For instance, Chomicki\u2019s framework (2003) allows user preferences over each of the attributes of a relation to be expressed as first order logic formulas. Suppose Sq is the set of tuples that match a query q. For each attribute Xi, from Sq, a subset Sqi of tuples that have the most preferred value(s) for Xi is identified. The result set for the query q is then given by \u2229iSqi. A similar framework for expressing and combining user preferences is presented by Kiessling (2002) and Kiessling and Kostler (2002). Brafman and Domshlak (2004) have pointed out some of the semantic difficulties associated with above approaches, and considered an alternative approach to identifying the preferred result set based on the CP-net (Boutilier et al., 2004) dominance relation. Because of the high computational complexity of dominance testing for CP-nets, Boutilier et al. proposed an efficient alternative based on an ordering operator that orders the tuples in the result set in a way that is consistent with the user preferences. Our formalism can be used in the database setting, similar in spirit to that of Brafman and Domshlak, by considering each\ntuple in Sq as a collection with a single object. The differences in the semantics of the CP-net dominance and our dominance relation is discussed in Section 7.3.1.\nA host of algorithms have also been proposed for computing the non-dominated result set in response to preference queries, especially for the efficient evaluation of skyline queries (Bo\u0308rzso\u0308nyi et al., 2001; Chomicki, 2003). A skyline query yields the non-dominated result set from a database, where dominance is evaluated based on the notion of pareto dominance that considers all attributes to be equally important. Most of the proposed algorithms for computing the skylines (see Jain, 2009, for a survey) are applicable only when intraattribute preferences are totally or weakly ordered. Some other algorithms that can handle partially ordered attribute domains (Chan, Eng, & Tan, 2005; Sacharidis, Papadopoulos, & Papadias, 2009; Jung, Han, Yeom, & Kang, 2010) rely on creating and maintaining indexes over the attributes in the database, and on data structures specifically designed to identify the skyline with respect to pareto dominance. These algorithms may be considered if a particular problem instance involves such a large set of components are already stored in a database and indexed. However, it is not obvious that they generalize to an arbitrary notion of dominance such as the one presented here. On the other hand, our algorithms for finding the non-dominated set are applicable to any notion of dominance, provided the user preferences are such that the dominance relation is a partial order."}, {"heading": "7.3.4 Planning with Preferences", "text": "The classical planning problem consists of finding a sequence of actions that take a system from an initial state to one of the states that satisfies the user specified goal. Preference based planning refers to the problem of finding plans that are most preferred with respect to a set of user preferences over the plans. Such preferences are usually compactly expressed in terms of the preferences over the properties satisfied by the plans in the goal or intermediate states, or over actions, or over action sequences (i.e., temporal properties of the plans). We refer the interested reader to surveys by Baier et al. (2008b) and Bienvenu et al. (2011) for an overview of qualitative and quantitative preference languages used in preference based AI planning, and different algorithms for computing the most preferred plans.\nPreference based planning can be viewed as a problem of finding the most preferred composition in a compositional system, where the components correspond to the actions, and the feasible compositions correspond to the states of the plans that satisfy the goal in the planning problem. The allowed set of actions that can be performed from a given state in the planning problem can be encoded in the compositional system in terms of a set of functional requirements (or constraints on the functionality). The preferences over the various actions that can be taken at any given state in a plan can be captured by preferences over the components with which a composition can be extended in terms of their properties or attribute valuations. The properties satisfied by a state of a plan in the planning problem can be captured by the valuations of the attributes of the corresponding composition in the compositional system. Based on the mapping of actions performed in a given state to the properties of the resulting state in the planning problem, aggregation functions can be suitably defined in the compositional system. The addition of an action to a partial plan in the planning problem can be represented in the compositional system by the extension of a partial composition by a new component, and the properties satisfied by\nthe resulting state in the planning problem correspond to the valuations of the attributes of the extended composition as determined by the aggregation functions. Finding the most preferred plans then involves finding the most preferred feasible compositions.\nThe algorithms presented in this paper can be used to find the most preferred plans with respect to the user specified preferences over actions in terms of the properties satisfied by their resulting states, or over the properties satisfied by the plans in the goal state. However, planning problems that involve preferences over the orderings of states and actions in a plan, e.g., preferences over the properties that hold over the entire sequence of states of a plan (Baier, Bacchus, & McIlraith, 2009; Bienvenu et al., 2011) cannot be handled within our framework."}, {"heading": "8. Acknowledgments", "text": "Aspects of this work were supported in part by NSF grants CNS0709217, CCF0702758, IIS0711356 and CCF1143734. The work of Vasant Honavar was supported by the National Science Foundation, while working at the Foundation. Any opinion, finding, and conclusions contained in this article are those of the authors and do not necessarily reflect the views of the National Science Foundation.\nWe are grateful to anonymous reviewers for a thorough review and Dr. Ronen Brafman for many useful suggestions that have helped improve the manuscript."}, {"heading": "Appendix A. Proofs of Propositions and Theorems in Section 4", "text": "Proposition 15 \u2200Xi \u2208 I : \u03a8\u227bd (C) 6= \u2205 \u21d2 \u03a8\u227b\u2032i(C) \u2229\u03a8\u227bd (C) 6= \u2205.\nProof. Let Xi \u2208 I and U \u2208 \u03a8\u227b\u2032i(C). There are two possibilities: U \u2208 \u03a8\u227bd (C) and U /\u2208 \u03a8\u227bd (C). If U \u2208 \u03a8\u227bd (C), then there is nothing left to prove.\nSuppose that U /\u2208 \u03a8\u227bd (C). Then we show that \u2203V 6= U such that V \u2208 \u03a8\u227b\u2032i(C)\u2229\u03a8\u227bd (C).\nU \u2208 \u03a8\u227b\u2032i(C) \u2227 U /\u2208 \u03a8\u227bd (C) \u21d2 \u2203V \u2208 \u03a8\u227bd (C) : V \u227bd U . By Definitions 11 and 16, it follows that \u2204V \u2208 \u03a8\u227bd (C) : V(Xi)\u227b \u2032 iU(Xi). Hence, Xi\ncannot be a witness for V \u227bd U . Now there are two cases to consider.\nCase 1: U(Xi)\u227b \u2032 iV(Xi).\nLet attribute Xj 6= Xi be a witness for V \u227bd U . Since Xi \u2208 I, (Xi \u22b2 Xj) \u2228 (Xi \u223c\u22b2 Xj). It therefore follows that V(Xi) \u2032 iU(Xi), which contradicts our assumption that U(Xi)\u227b \u2032 iV(Xi). Hence, U(Xi) 6 \u227b \u2032 i V(Xi).\nCase 2: U(Xi)\u223c \u2032 iV(Xi).\nLet attribute Xj 6= Xi be a witness for V \u227bd U . Since Xi \u2208 I, (Xi \u22b2 Xj) \u2228 (Xi \u223c\u22b2 Xj). From Definition 11, V \u227bd U only if V(Xi) \u2032 iU(Xi). Because of our assumption that U(Xi)\u223c \u2032 iV(Xi), it must be the case that V(Xi) = U(Xi), i.e., V \u2208 \u03a8\u227b\u2032i(C). Thus, we have:\nU \u2208 \u03a8\u227b\u2032 i (C) \\\u03a8\u227bd (C) \u21d2 \u2203V \u2208 \u03a8\u227b\u2032i(C) \u2229\u03a8\u227bd (C) : V \u227bd U (5)\nThis completes the proof.\nTheorem 4 [Soundness and Weak Completeness of Algorithm 2] Given a set of attributes X , preference relations \u22b2 and \u227b\u2032i, Algorithm 2 generates a set \u03b8 of feasible compositions such that \u03b8 \u2286 \u03a8\u227bd (C) and \u03a8\u227bd (C) 6= \u2205 \u21d2 \u03b8 6= \u2205.\nProof. Soundness: The proof proceeds by contradiction. Suppose that the algorithm returns a solution U \u2208 \u03b8 such that U /\u2208 \u03a8\u227bd (C). Because U \u2208 \u03b8, it is necessary (by Line 5) that \u2203Xi \u2208 I : U \u2208 \u03a8\u227b\u2032i(C) \\ \u03a8\u227bd (C). Then, from Equation (5) in the proof of Proposition 15, \u2203V \u2208 \u03a8\u227b\u2032i(C) \u2229 \u03a8\u227bd (C) : V \u227bd U , which means that U /\u2208 \u03a8\u227bd (\u03a8\u227b\u2032i(C)). However, this contradicts Line 5 of the algorithm. Hence, \u03b8 \u2286 \u03a8\u227bd (C), i.e., Algorithm 2 is sound.\nWeak Completeness: Because I 6= \u2205, Line 5 is executed by the algorithm at least once for some Xi \u2208 I. By Definition 13, we have C 6= \u2205 \u21d2 \u03a8\u227b\u2032i(C) 6= \u2205 \u21d2 \u03a8\u227bd (\u03a8\u227b\u2032i(C)) 6= \u2205 \u21d2 \u03b8 6= \u2205. Hence, Algorithm 2 is weakly complete by Definition 15.\nProposition 16 If I = {Xt}\u2227\u2200Xk 6= Xt \u2208 X : Xt\u22b2Xk, then \u03a8\u227bd (C) \u2286 \u03b8, i.e., Algorithm 2 is complete.\nProof. The proof proceeds by contradiction. Let I = {Xt} and \u2200Xk 6= Xt \u2208 X : Xt \u22b2Xk, and suppose that \u2203V \u2208 \u03a8\u227bd (C) \\ \u03a8\u227b\u2032t(C). Since V /\u2208 \u03a8\u227b\u2032t(C), by Definition 13 it must be the case that \u2203U \u2208 \u03a8\u227b\u2032t(C) : U(Xt)\u227b \u2032 tV(Xt). However, then U \u227bd V by Definition 11 thus contradicting our assumption that V \u2208 \u03a8\u227bd (C).\nProposition 17 If |I| = 1, i.e., there is a unique most important attribute with respect to \u22b2, then Algorithm 3 is complete.\nProof. Let I = {Xi}. We know from Proposition 14 that \u227b \u2032 i \u2286 \u227bd . It follows that \u03a8\u227bd (S) \u2286 \u03a8\u227b\u2032i(S) for any set S. Hence, \u03a8\u227bd (C) \u2286 \u03a8\u227b\u2032i(C) = \u03b8, i.e., Algorithm 3 is complete.\nProposition 18 [Termination of Algorithm 4] Given a finite repository of components, Algorithm 4 terminates in a finite number of steps.\nProof. Given a finite repository R of components, and an algorithm f that computes feasible extensions of partial feasible compositions15, and due to the fact that Algorithm 4 does not re-visit any partial feasible composition, the number of recursive calls is finite.\nProposition 19 [Unsoundness of Algorithm 4] Given a functional composition algorithm f and user preferences \u227b\u2032i and \u22b2 over a set of attributes X , Algorithm 4 is not guaranteed to generate a set of feasible compositions \u03b8 such that \u03b8 \u2286 \u03a8\u227bd (C).\nProof. We provide an example wherein Algorithm 4 returns a feasible composition that is dominated by some other feasible composition. Consider a compositional system with a single attribute X = {X1}, with a domain of {a1, a2, a3, a4}. Let the intra-attribute preference of the user over those values be the partial order: a4 \u227b1 a1 and a2 \u227b1 a3 (Figure 15). Let R = {W1,W2,W3,W4} be the repository of components in the compositional system such that VWi(X1) = {ai}.\n15. An f that terminates with a set of feasible extensions is guaranteed by the decidability of \u03d5.\nSuppose that there are three feasible compositions in C satisfying the user specified functionality \u03d5, namely C1 = W1, C2 = W2, C3 = W3 \u2295 W4. Their respective valuations are: VC1 = \u3008{a1}\u3009, VC2 = \u3008{a2}\u3009 and VC3 = \u3008{a3, a4}\u3009. Clearly, \u03a8\u227bd (C) = {C2, C3}, because VC3 \u227bd VC1 (due to the fact that {a3, a4}\u227b \u2032 1{a1}).\nNow suppose that there exists a functional composition algorithm f that produces the following sequence of partial feasible compositions (Figure 16): {\u22a5}, {W1,W2,W3}, {W1,W2,W3 \u2295W4}. According to Line 13 of Algorithm 4, the algorithm will terminate after the first invocation of f , i.e., when the set {W1,W2,W3} of partial feasible compositions is produced by f . This is because after the first iteration, \u03b8 = {W1,W2}, with VW2 \u227bd VW3 , and both W1 and W2 are feasible compositions. This results in \u03b8 = {C1, C2} 6\u2286 \u03a8\u227bd (C).\nTheorem 5 [Soundness of Algorithm 4] If \u227bd is an interval order, then given a functional composition algorithm f and user preferences {\u227b\u2032i},\u22b2 over a set of attributes X , Algorithm 4 generates a set \u03b8 of feasible compositions such that \u03b8 \u2286 \u03a8\u227bd (C).\nProof. Suppose that by contradiction, F \u2208 \u03b8 and there is a feasible composition C /\u2208 \u03b8 such that VC \u227bd VF . If C is present in the list L upon termination of the algorithm, then C should have been in \u03b8, because the algorithm terminates only when all compositions in \u03a8\u227bd (L) are feasible. This implies that the algorithm did not terminate with an L containing C.\nThe algorithm keeps track of all partial feasible compositions that can be extended from \u22a5 in L, without discarding any of them before termination. Therefore, the existence of any such feasible composition C that is not in L at the time of termination must imply the existence of some partial feasible composition B in the list (at the time of termination) that can be extended to produce the feasible composition C, i.e., B \u2295W1 \u2295W2 \u2295 . . . \u2295Wn = C such that B 6|= \u03d5 and C |= \u03d5.\nB 6|= \u03d5 \u21d2 B /\u2208 \u03b8 at the time of termination, and therefore \u2203E \u2208 \u03b8 : VE \u227bd VB. Because \u227bd is transitive (by Proposition 12), since VC 6 \u227bd VB (by Proposition 6), it follows that VC 6 \u227bd VE (otherwise, VC \u227bd VE \u2227 VE \u227bd VB \u21d2 VC \u227bd VB, a contradiction). Hence, C must\ndominate some composition other than E , say F \u2208 \u03b8 at the time of termination, i.e., VC \u227bd VF . Because E ,F \u2208 \u03b8, it follows that VF \u223cd VE , which in turn implies that VE 6 \u227bd VC . Therefore, \u2203F \u2208 \u03b8 : VC \u227bd VF , VF \u223cd VE and VE \u223cd VC (see Figure 17).\nFrom VE \u227bd VB, VC \u227bd VF , VF \u223cd VE and VC 6 \u227bd VB, it follows that VC \u223cd VB (because VB \u227bd VC would otherwise imply VE \u227bd VF , a contradiction). Finally, it must be the case that: VB 6 \u227bd VF , since otherwise it would contradict VF \u223cd VE ; and VF 6 \u227bd VB, since otherwise it would contradict VC \u223cd VB. Therefore, VB \u223cd VF . Thus, the only possible dominance relationships among the compositions B, C, E ,F are as follows (see Figure 17):\n\u2022 VE \u227bd VB\n\u2022 VC \u227bd VF\nHowever, this scenario is ruled out by the fact that \u227bd is an interval order. Hence \u2200F \u2208 \u03b8,\u2200C \u2208 C \\ \u03b8 : VC 6 \u227bd VF , i.e., \u03b8 \u2286 \u03a8\u227bd (C).\nTheorem 6 [Weak Completeness of Algorithm 4] If \u227bd is an interval order, then given a functional composition algorithm f and user preferences {\u227b\u2032i},\u22b2 over a set of attributes X , Algorithm 4 produces a set \u03b8 of feasible compositions such that \u03a8\u227bd (C) 6= \u2205 \u21d2 \u03b8\u2229\u03a8\u227bd (C) 6= \u2205.\nProof. From Theorem 5, we have \u03b8 \u2286 \u03a8\u227bd (C) when \u227bd is an interval order. It suffices to show that \u03a8\u227bd (C) 6= \u2205 \u21d2 \u03b8 6= \u2205. The algorithm terminates with the non-dominated set of compositions in the current list L, i.e., the maximal elements of L with respect to \u227bd . The set of maximal elements of any partial order on the set of elements in L is not empty whenever L is not empty, and the set of elements in L is in turn not empty whenever C is not empty. Therefore, \u03a8\u227bd (C) 6= \u2205 \u21d2 C 6= \u2205 \u21d2 L 6= \u2205 \u21d2 \u03b8 6= \u2205 as required.\nTheorem 7 [Completeness of Algorithm 4] If \u227bd is a weak order, then given a functional composition algorithm f and user preferences {\u227b\u2032i},\u22b2 over a set of attributes X , Algorithm 4 generates a set \u03b8 of feasible compositions such that \u03a8\u227bd (C) \u2286 \u03b8.\nProof. It suffices to show that there is no feasible composition C \u2208 \u03a8\u227bd (C) \\ \u03b8. Suppose by contradiction that C \u2208 \u03a8\u227bd (C), and C /\u2208 \u03b8. This means that C was not present in the list L upon the termination of the algorithm (because otherwise C \u2208 \u03b8 as per Lines 4, 6, 13 in Algorithm 4). Hence, C must be a feasible extension of some partial feasible composition B that is present in L at the time of termination such that B \u2295 W1 \u2295 W2 \u2295 . . .\u2295Wk = C.\nFrom Proposition 6, we have VC 6 \u227bd VB. Because \u227bd is a weak order, (a) \u2200E \u2208 \u03b8 : VE \u227bd VB; and (b) VC 6 \u227bd VB \u2227 VE \u227bd VB \u21d2 VE \u227bd VC . However, this contradicts our assumption that C \u2208 \u03a8\u227bd (C)."}], "references": [{"title": "A framework for expressing and combining preferences", "author": ["R. Agrawal", "E.L. Wimmers"], "venue": "SIGMOD Rec.,", "citeRegEx": "Agrawal and Wimmers,? \\Q2000\\E", "shortCiteRegEx": "Agrawal and Wimmers", "year": 2000}, {"title": "Graphical models for preference and utility", "author": ["F. Bacchus", "A.J. Grove"], "venue": "In Proceedings of the Eleventh Annual Conference on Uncertainty in Artificial Intelligence", "citeRegEx": "Bacchus and Grove,? \\Q1995\\E", "shortCiteRegEx": "Bacchus and Grove", "year": 1995}, {"title": "A heuristic search approach to planning with temporally extended preferences", "author": ["J.A. Baier", "F. Bacchus", "S.A. McIlraith"], "venue": "Artificial Intelligence,", "citeRegEx": "Baier et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Baier et al\\.", "year": 2009}, {"title": "Beyond classical planning: Procedural control knowledge and preferences in state-of-the-art planners", "author": ["J.A. Baier", "C. Fritz", "M. Bienvenu", "S. McIlraith"], "venue": "In Proceedings of the 23rd AAAI Conference on Artificial Intelligence (AAAI), Nectar Track,", "citeRegEx": "Baier et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Baier et al\\.", "year": 2008}, {"title": "Ranking sets of objects", "author": ["S. Barbera", "W. Bossert", "P.K. Pattanaik"], "venue": "In Handbook of Utility Theory. Volume II Extensions,", "citeRegEx": "Barbera et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Barbera et al\\.", "year": 2004}, {"title": "Heuristics for qosaware web service composition", "author": ["R. Berbner", "M. Spahn", "N. Repp", "O. Heckmann", "R. Steinmetz"], "venue": "In Proceedings of the IEEE International Conference on Web Services,", "citeRegEx": "Berbner et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Berbner et al\\.", "year": 2006}, {"title": "Specifying and computing preferred plans", "author": ["M. Bienvenu", "C. Fritz", "S.A. McIlraith"], "venue": "Artificial Intelligence,", "citeRegEx": "Bienvenu et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Bienvenu et al\\.", "year": 2011}, {"title": "Generic preferences over subsets of structured objects", "author": ["M. Binshtok", "R.I. Brafman", "C. Domshlak", "S.E. Shimony"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Binshtok et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Binshtok et al\\.", "year": 2009}, {"title": "The skyline operator", "author": ["S. B\u00f6rzs\u00f6nyi", "D. Kossmann", "K. Stocker"], "venue": "In Proceedings of the 17th International Conference on Data Engineering,", "citeRegEx": "B\u00f6rzs\u00f6nyi et al\\.,? \\Q2001\\E", "shortCiteRegEx": "B\u00f6rzs\u00f6nyi et al\\.", "year": 2001}, {"title": "CP-nets: A tool for representing and reasoning with conditional ceteris paribus preference statements", "author": ["C. Boutilier", "R.I. Brafman", "C. Domshlak", "H.H. Hoos", "D. Poole"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Boutilier et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Boutilier et al\\.", "year": 2004}, {"title": "UCP-networks: A directed graphical representation of conditional utilities", "author": ["C. Boutilier", "F. Bacchus", "R.I. Brafman"], "venue": "In Proceedings of the 17th Conference in Uncertainty in Artificial Intelligence", "citeRegEx": "Boutilier et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Boutilier et al\\.", "year": 2001}, {"title": "Conditional importance networks: A graphical language for representing ordinal, monotonic preferences over sets of goods", "author": ["S. Bouveret", "U. Endriss", "J. Lang"], "venue": "In IJCAI,", "citeRegEx": "Bouveret et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Bouveret et al\\.", "year": 2009}, {"title": "On graphical modeling of preference and importance", "author": ["R.I. Brafman", "C. Domshlak", "S.E. Shimony"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Brafman et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Brafman et al\\.", "year": 2006}, {"title": "Database preference queries revisited", "author": ["R.I. Brafman", "C. Domshlak"], "venue": "Tech. rep. 1934,", "citeRegEx": "Brafman and Domshlak,? \\Q2004\\E", "shortCiteRegEx": "Brafman and Domshlak", "year": 2004}, {"title": "Preference handling - an introductory tutorial", "author": ["R.I. Brafman", "C. Domshlak"], "venue": "AI magazine,", "citeRegEx": "Brafman and Domshlak,? \\Q2009\\E", "shortCiteRegEx": "Brafman and Domshlak", "year": 2009}, {"title": "Representing preferences among sets. In AAAI", "author": ["G. Brewka", "M. Truszczynski", "S. Woltran"], "venue": null, "citeRegEx": "Brewka et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Brewka et al\\.", "year": 2010}, {"title": "Stratified computation of skylines with partially-ordered domains", "author": ["Chan", "C.-Y", "Eng", "P.-K", "Tan", "K.-L"], "venue": "Proceedings of the 2005 ACM SIGMOD international conference on Management of data,", "citeRegEx": "Chan et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Chan et al\\.", "year": 2005}, {"title": "Preference formulas in relational queries", "author": ["J. Chomicki"], "venue": "ACM Trans. Database Syst.,", "citeRegEx": "Chomicki,? \\Q2003\\E", "shortCiteRegEx": "Chomicki", "year": 2003}, {"title": "Sorting and selection in posets", "author": ["C. Daskalakis", "R.M. Karp", "E. Mossel", "S. Riesenfeld", "E. Verbin"], "venue": "In SODA,", "citeRegEx": "Daskalakis et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Daskalakis et al\\.", "year": 2009}, {"title": "DD-PREF: A language for expressing preferences over sets", "author": ["M. desJardins", "K. Wagstaff"], "venue": "In AAAI,", "citeRegEx": "desJardins and Wagstaff,? \\Q2005\\E", "shortCiteRegEx": "desJardins and Wagstaff", "year": 2005}, {"title": "Team composition optimization: The team optimal profile system (tops)", "author": ["J.S. Donsbach", "S.I. Tannenbaum", "G.M. Alliger", "J.E. Mathieu", "E. Salas", "G.F. Goodwin", "K.A. Metcalf"], "venue": "Tech. rep. ARI TR 1249, U.S. Army Research Institute for the Behavioral and Social Sciences", "citeRegEx": "Donsbach et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Donsbach et al\\.", "year": 2009}, {"title": "Exercising qualitative control in autonomous adaptive survivable systems", "author": ["J. Doyle", "M. McGeachie"], "venue": "In Self-Adaptive Software: Applications, chap", "citeRegEx": "Doyle and McGeachie,? \\Q2003\\E", "shortCiteRegEx": "Doyle and McGeachie", "year": 2003}, {"title": "Background to qualitative decision theory", "author": ["J. Doyle", "R.H. Thomason"], "venue": "AI magazine,", "citeRegEx": "Doyle and Thomason,? \\Q1999\\E", "shortCiteRegEx": "Doyle and Thomason", "year": 1999}, {"title": "Qualitative decision theory: from savage\u2019s axioms to nonmonotonic reasoning", "author": ["D. Dubois", "H. Fargier", "H. Prade", "P. Perny"], "venue": "Journal of the ACM,", "citeRegEx": "Dubois et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Dubois et al\\.", "year": 2002}, {"title": "A survey on web services composition", "author": ["S. Dustdar", "W. Schreiner"], "venue": "International Journal on Web and Grid Services,", "citeRegEx": "Dustdar and Schreiner,? \\Q2005\\E", "shortCiteRegEx": "Dustdar and Schreiner", "year": 2005}, {"title": "Utility Theory for Decision Making", "author": ["P. Fishburn"], "venue": null, "citeRegEx": "Fishburn,? \\Q1970\\E", "shortCiteRegEx": "Fishburn", "year": 1970}, {"title": "Utility theory with inexact preferences and degrees of preference", "author": ["P. Fishburn"], "venue": "Synthese, 21,", "citeRegEx": "Fishburn,? \\Q1970\\E", "shortCiteRegEx": "Fishburn", "year": 1970}, {"title": "Interval Orders and Interval Graphs", "author": ["P. Fishburn"], "venue": "J. Wiley,", "citeRegEx": "Fishburn,? \\Q1985\\E", "shortCiteRegEx": "Fishburn", "year": 1985}, {"title": "Decision theory: An introduction to the mathematics of rationality", "author": ["S. French"], "venue": null, "citeRegEx": "French,? \\Q1986\\E", "shortCiteRegEx": "French", "year": 1986}, {"title": "AI planning: systems and techniques", "author": ["J. Hendler", "A. Tate", "M. Drummond"], "venue": "AI Mag.,", "citeRegEx": "Hendler et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Hendler et al\\.", "year": 1990}, {"title": "Algorithms and applications for answering ranked queries using ranked views", "author": ["V. Hristidis", "Y. Papakonstantinou"], "venue": "The VLDB Journal,", "citeRegEx": "Hristidis and Papakonstantinou,? \\Q2004\\E", "shortCiteRegEx": "Hristidis and Papakonstantinou", "year": 2004}, {"title": "Handling worst case in skyline", "author": ["R. Jain"], "venue": "Masters thesis,", "citeRegEx": "Jain,? \\Q2009\\E", "shortCiteRegEx": "Jain", "year": 2009}, {"title": "A fast and progressive algorithm for skyline queries with totally- and partially-ordered domains", "author": ["H. Jung", "H. Han", "H.Y. Yeom", "S. Kang"], "venue": "Journal of Systems and Software,", "citeRegEx": "Jung et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Jung et al\\.", "year": 2010}, {"title": "Decisions with multiple objectives: Preferences and value trade-offs", "author": ["R.L. Keeney", "H. Raiffa"], "venue": null, "citeRegEx": "Keeney and Raiffa,? \\Q1993\\E", "shortCiteRegEx": "Keeney and Raiffa", "year": 1993}, {"title": "Foundations of preferences in database systems", "author": ["W. Kiessling"], "venue": "Proceedings of the 28th international conference on Very Large Data Bases,", "citeRegEx": "Kiessling,? \\Q2002\\E", "shortCiteRegEx": "Kiessling", "year": 2002}, {"title": "Preference sql: design, implementation, experiences", "author": ["W. Kiessling", "G. Kostler"], "venue": "Proceedings of the 28th international conference on Very Large Data Bases,", "citeRegEx": "Kiessling and Kostler,? \\Q2002\\E", "shortCiteRegEx": "Kiessling and Kostler", "year": 2002}, {"title": "Planning with a language for extended goals", "author": ["U.D. Lago", "M. Pistore", "P. Traverso"], "venue": "In Eighteenth national conference on Artificial intelligence,", "citeRegEx": "Lago et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Lago et al\\.", "year": 2002}, {"title": "Finding a team of experts in social networks", "author": ["T. Lappas", "K. Liu", "E. Terzi"], "venue": "In Proceedings of the 15th ACM SIGKDD international conference on Knowledge discovery and data mining (KDD),", "citeRegEx": "Lappas et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Lappas et al\\.", "year": 2009}, {"title": "Convertibility verification and converter synthesis: two faces of the same coin", "author": ["R. Passerone", "L. de Alfaro", "T.A. Henzinger", "A.L. Sangiovanni-Vincentelli"], "venue": "In ICCAD \u201902: Proceedings of the 2002 IEEE/ACM international conference on Computer-aided design,", "citeRegEx": "Passerone et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Passerone et al\\.", "year": 2002}, {"title": "Assembling composite web services from autonomous components", "author": ["J. Pathak", "S. Basu", "V. Honavar"], "venue": "In Emerging Artificial Intelligence Applications in Computer Engineering,", "citeRegEx": "Pathak et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Pathak et al\\.", "year": 2008}, {"title": "System Reliability Theory: Models, Statistical Methods and Applications Second Edition", "author": ["M. Rausand", "A. H\u00f8yland"], "venue": null, "citeRegEx": "Rausand and H\u00f8yland,? \\Q2003\\E", "shortCiteRegEx": "Rausand and H\u00f8yland", "year": 2003}, {"title": "Transitivity of preferences", "author": ["M. Regenwetter", "J. Dana", "C.P. Davis-Stober"], "venue": "Psychological Review,", "citeRegEx": "Regenwetter et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Regenwetter et al\\.", "year": 2011}, {"title": "Topologically sorted skylines for partially ordered domains", "author": ["D. Sacharidis", "S. Papadopoulos", "D. Papadias"], "venue": "Proceedings of the 2009 IEEE International Conference on Data Engineering,", "citeRegEx": "Sacharidis et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Sacharidis et al\\.", "year": 2009}, {"title": "TCP-compose\u22c6 - a TCP-net based algorithm for efficient composition of web services using qualitative preferences", "author": ["G.R. Santhanam", "S. Basu", "V. Honavar"], "venue": "Procceedings of the Sixth International Conference on Service-Oriented Computing,", "citeRegEx": "Santhanam et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Santhanam et al\\.", "year": 2008}, {"title": "A dominance relation for unconditional multi-attribute preferences", "author": ["G.R. Santhanam", "S. Basu", "V. Honavar"], "venue": "Tech. rep. 09-24,", "citeRegEx": "Santhanam et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Santhanam et al\\.", "year": 2009}, {"title": "Dominance testing via model checking", "author": ["G.R. Santhanam", "S. Basu", "V. Honavar"], "venue": "In Proceedings of the Twenty-Fourth AAAI Conference on Artificial Intelligence (AAAI),", "citeRegEx": "Santhanam et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Santhanam et al\\.", "year": 2010}, {"title": "Efficient dominance testing for unconditional preferences", "author": ["G.R. Santhanam", "S. Basu", "V. Honavar"], "venue": "In Proceedings of the Twelfth International Conference on the Principles of Knowledge Representation and Reasoning (KR),", "citeRegEx": "Santhanam et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Santhanam et al\\.", "year": 2010}, {"title": "A survey of recursive trees", "author": ["R.T. Smythe", "H.M. Mahmoud"], "venue": "Theor Prob Math Stat,", "citeRegEx": "Smythe and Mahmoud,? \\Q1995\\E", "shortCiteRegEx": "Smythe and Mahmoud", "year": 1995}, {"title": "Automated composition of semantic web services into executable processes", "author": ["P. Traverso", "M. Pistore"], "venue": "In Proceedings of ISWC", "citeRegEx": "Traverso and Pistore,? \\Q2004\\E", "shortCiteRegEx": "Traverso and Pistore", "year": 2004}, {"title": "Intransitivity of preferences", "author": ["A. Tversky"], "venue": "Psychological Review,", "citeRegEx": "Tversky,? \\Q1969\\E", "shortCiteRegEx": "Tversky", "year": 1969}, {"title": "Theory of Games and Economic Behavior", "author": ["J. von Neumann", "O. Morgenstern"], "venue": null, "citeRegEx": "Neumann and Morgenstern,? \\Q1944\\E", "shortCiteRegEx": "Neumann and Morgenstern", "year": 1944}, {"title": "Consistency and constrained optimisation for conditional preferences", "author": ["N. Wilson"], "venue": "In ECAI,", "citeRegEx": "Wilson,? \\Q2004\\E", "shortCiteRegEx": "Wilson", "year": 2004}, {"title": "Extending CP-nets with stronger conditional preference statements", "author": ["N. Wilson"], "venue": "In AAAI,", "citeRegEx": "Wilson,? \\Q2004\\E", "shortCiteRegEx": "Wilson", "year": 2004}, {"title": "Service selection algorithms for composing complex services with multiple qos constraints", "author": ["T. Yu", "K.J. Lin"], "venue": "In Service-Oriented Computing - ICSOC", "citeRegEx": "Yu and Lin,? \\Q2005\\E", "shortCiteRegEx": "Yu and Lin", "year": 2005}, {"title": "Quality driven web services composition", "author": ["L. Zeng", "B. Benatallah", "M. Dumas", "J. Kalagnanam", "Q.Z. Sheng"], "venue": "In Proceedings of the 12th International Conference on World Wide Web,", "citeRegEx": "Zeng et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Zeng et al\\.", "year": 2003}, {"title": "Qos-aware middleware for web services composition", "author": ["L. Zeng", "B. Benatallah", "A.H.H. Ngu", "M. Dumas", "J. Kalagnanam", "H. Chang"], "venue": "IEEE Transactions on Software Engineering,", "citeRegEx": "Zeng et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Zeng et al\\.", "year": 2004}], "referenceMentions": [{"referenceID": 12, "context": "3 Contributions We adopt the preference network representation introduced by Brafman et al. (2006) for the specification of qualitative preferences3 over valuations of each attribute as well as the relative importance among the attributes.", "startOffset": 77, "endOffset": 99}, {"referenceID": 28, "context": ", relations that are both irreflexive and transitive, because transitivity is a natural property of any rational preference relation (von Neumann &Morgenstern, 1944; French, 1986; Mas-Colell, Whinston, & Green, 1995), and irreflexivity ensures that the preferences are strict.", "startOffset": 133, "endOffset": 216}, {"referenceID": 25, "context": "Follows from a well-known property of strict partial orders due to Fishburn (1970b).", "startOffset": 67, "endOffset": 84}, {"referenceID": 9, "context": "Following the representation scheme introduced by Boutilier et al. (2004) and Brafman et al.", "startOffset": 50, "endOffset": 74}, {"referenceID": 9, "context": "Following the representation scheme introduced by Boutilier et al. (2004) and Brafman et al. (2006), we model the user\u2019s preferences with respect to multiple attributes in two forms: (a) intra-attribute preferences with respect to each non-functional attribute in X , and (b) relative importance over all attributes.", "startOffset": 50, "endOffset": 100}, {"referenceID": 12, "context": "Note that based on preferences {\u227bi} and \u22b2, one can make use of existing formalisms such as TCP-nets (Brafman et al., 2006) to select the most preferred components.", "startOffset": 100, "endOffset": 122}, {"referenceID": 25, "context": "Follows from Definition 6 (or the analogous definition of a best frontier) and a wellknown result due to the work of Fishburn (1985).", "startOffset": 117, "endOffset": 133}, {"referenceID": 14, "context": "In such settings, a suitable irreflexive and transitive preference relation can be used, such as the asymmetric part of preference relations developed by Brewka et al. (2010) and Bouveret et al.", "startOffset": 154, "endOffset": 175}, {"referenceID": 11, "context": "(2010) and Bouveret et al. (2009). In the absence of transitivity, the transitive closure of the relation may be used to compare sets of elements, as done by Brewka et al.", "startOffset": 11, "endOffset": 34}, {"referenceID": 28, "context": "We focus on transitive preferences because many studies have considered transitivity to be a key property of preference relations (von Neumann & Morgenstern, 1944; French, 1986; Mas-Colell et al., 1995)9.", "startOffset": 130, "endOffset": 202}, {"referenceID": 49, "context": "While some studies of human decision making have argued that human preferences are not necessarily transitive (Tversky, 1969), others have offered evidence to the contrary (Regenwetter, Dana, & DavisStober, 2011).", "startOffset": 110, "endOffset": 125}, {"referenceID": 27, "context": "A strict partial order is just irreflexive and transitive; however, the relative importance relation in Definition 12 should in addition satisfy Equation (4), thereby yielding an interval order (Fishburn, 1985).", "startOffset": 194, "endOffset": 210}, {"referenceID": 18, "context": "The algorithm presented by Daskalakis et al. finds the minimal elements; the corresponding algorithm for finding the maximal elements is as follows. Let T0 = \u2205. Let the elements of the set S be x1, x2, \u00b7 \u00b7 \u00b7 xn. At step t(\u2265 1): \u2022 Compare xt to all elements in Tt\u22121. \u2022 If there exists some a \u2208 Tt\u22121 such that a \u227b xt, do nothing. \u2022 Otherwise, remove from Tt\u22121 all elements a such that xt \u227b a and put xt into Tt. On termination, the set Tn contains all the maximal elements in S, i.e., non-dominated subset of S with respect to \u227b. We make use of the above algorithm to compute the nondominated (maximal) subsets (namely, \u03a8\u227b(\u00b7)), and the original version of the algorithm given in by Daskalakis (2009) to compute the worst-frontiers (minimal subsets).", "startOffset": 27, "endOffset": 698}, {"referenceID": 12, "context": "In our previous work (Santhanam, Basu, & Honavar, 2008), we had proposed the use of TCP-net representation with ceteris paribus semantics (Brafman et al., 2006) for reasoning with preferences in addressing the problem of Web service composition.", "startOffset": 138, "endOffset": 160}, {"referenceID": 4, "context": "This provides the user with a wide range of preference relations for comparing sets of valuations to choose from (see Barbera et al., 2004, for a survey of preferences over sets). Note that Definition 8 does not ignore common elements when comparing two sets of elements. However, some settings may require a preference relation that compares only elements in the two sets that are not common. In such settings, a suitable irreflexive and transitive preference relation can be used, such as the asymmetric part of preference relations developed by Brewka et al. (2010) and Bouveret et al.", "startOffset": 118, "endOffset": 569}, {"referenceID": 4, "context": "This provides the user with a wide range of preference relations for comparing sets of valuations to choose from (see Barbera et al., 2004, for a survey of preferences over sets). Note that Definition 8 does not ignore common elements when comparing two sets of elements. However, some settings may require a preference relation that compares only elements in the two sets that are not common. In such settings, a suitable irreflexive and transitive preference relation can be used, such as the asymmetric part of preference relations developed by Brewka et al. (2010) and Bouveret et al. (2009). In the absence of transitivity, the transitive closure of the relation may be used to compare sets of elements, as done by Brewka et al.", "startOffset": 118, "endOffset": 596}, {"referenceID": 12, "context": "Some results comparing \u227bd with the dominance relations proposed by other authors (Brafman et al., 2006; Wilson, 2004b, 2004a) have been presented elsewhere (Santhanam, Basu, & Honavar, 2010b, 2009).", "startOffset": 81, "endOffset": 125}, {"referenceID": 47, "context": "The seminal work by von Neumann and Morgenstern (1944) models user preferences using utility functions that map the set of possible alternatives to numeric values.", "startOffset": 24, "endOffset": 55}, {"referenceID": 9, "context": "Notable among qualitative frameworks for preferences are preference networks (Boutilier et al., 2004; Brafman et al., 2006) that deal with qualitative and conditional preferences.", "startOffset": 77, "endOffset": 123}, {"referenceID": 12, "context": "Notable among qualitative frameworks for preferences are preference networks (Boutilier et al., 2004; Brafman et al., 2006) that deal with qualitative and conditional preferences.", "startOffset": 77, "endOffset": 123}, {"referenceID": 12, "context": "A class of preference networks, namely Tradeoff-enhanced Conditional Preference networks (TCP-nets) (Brafman et al., 2006) are closely related to our work, and we now proceed to discuss where our framework departs from and adds to the existing TCP-net framework.", "startOffset": 100, "endOffset": 122}, {"referenceID": 4, "context": "Several authors have considered ways to extend user preferences to obtain a ranking of collections of objects (see Barbera et al., 2004, for a survey). In all these works, preferences are specified over individual objects in a set as opposed to preferences over valuations of the attributes of the objects. The preferences over objects are in turn used to reason about preferences over collections of those objects. This scenario can be simulated by our framework, by introducing a single attribute whose valuations correspond to objects in the domain. DesJardins et al. (2005) have considered the problem of finding subsets that are optimal with respect to user specified quantitative preferences over a set of attributes in terms of the desired depth, feature weight and diversity for each attribute.", "startOffset": 115, "endOffset": 578}, {"referenceID": 7, "context": "More recently, Binshtok et al. (2009) have presented a language for specification of preferences over sets of objects.", "startOffset": 15, "endOffset": 38}, {"referenceID": 7, "context": "More recently, Binshtok et al. (2009) have presented a language for specification of preferences over sets of objects. This framework, in addition to intra-attribute and relative importance preferences over attributes, allows users to express preferences over the number (|\u03c6|) of elements in a set that satisfy a desired property \u03c6. The preference language in this case allows statements such as \u201cSi : |\u03c6| REL n\u201d (number of elements in the preferred set with property \u03c6 should be REL n), \u201cSj : |\u03c6| REL |\u03c8|\u201d (number of elements in the preferred set with property \u03c6 should be REL number of elements in the preferred set with property \u03c8), etc., where REL is one of the arithmetic operators >,<,=,\u2265,\u2264 and n is an integer. In addition, there can be relative importance between the various preference statements such as \u201cSi is more important than Sj\u201d as well as external cardinality constraints such as a bound on the number of elements in the preferred set. Our formalism can accommodate such preference statements, by representing each preference statement Si as a new binary valued attribute in the compositional system. For example, preference statements Si : |\u03c6| \u2265 n and Sj : |\u03c6| \u2264 |\u03c8| can be represented in our formalism by creating new binary attributes Xi and Xj with intra-attribute preferences 1 \u227bi 0 and 1 \u227bj 0 respectively. The relative importance statements such as \u201cSi is more important than Sj\u201d can then be directly mapped to Xi \u22b2 Xj . Any external cardinality constraints on the size of the preferred set can be encoded in our setting by functional requirements, so as to restrict the feasible solutions to only those that satisfy the cardinality constraints. Consider the example discussed by Binshtok et al. (2009), with preferences over senate members described by attributes: Party affiliation (Republican, Democrat ), Views (liberal, conservative, ultra conservative), and Experience (experienced, inexperienced).", "startOffset": 15, "endOffset": 1727}, {"referenceID": 7, "context": "Having defined the above aggregation function and comparison relation for each new attribute, any dominance relation can be adopted to compare compositions (arbitrary subsets) with respect to all attributes including the dominance relation used by Binshtok et al. (2009). In contrast to the framework of Binshtok et al.", "startOffset": 248, "endOffset": 271}, {"referenceID": 7, "context": "Having defined the above aggregation function and comparison relation for each new attribute, any dominance relation can be adopted to compare compositions (arbitrary subsets) with respect to all attributes including the dominance relation used by Binshtok et al. (2009). In contrast to the framework of Binshtok et al., (2009) our formalism focuses on collections of objects that satisfy some desired criteria, rather than arbitrary subsets.", "startOffset": 248, "endOffset": 328}, {"referenceID": 8, "context": "Several authors (B\u00f6rzs\u00f6nyi et al., 2001; Chomicki, 2003; Kiessling & Kostler, 2002; Kiessling, 2002) have explored techniques for incorporating user specified preferences over the result sets of relational database queries.", "startOffset": 16, "endOffset": 100}, {"referenceID": 17, "context": "Several authors (B\u00f6rzs\u00f6nyi et al., 2001; Chomicki, 2003; Kiessling & Kostler, 2002; Kiessling, 2002) have explored techniques for incorporating user specified preferences over the result sets of relational database queries.", "startOffset": 16, "endOffset": 100}, {"referenceID": 34, "context": "Several authors (B\u00f6rzs\u00f6nyi et al., 2001; Chomicki, 2003; Kiessling & Kostler, 2002; Kiessling, 2002) have explored techniques for incorporating user specified preferences over the result sets of relational database queries.", "startOffset": 16, "endOffset": 100}, {"referenceID": 9, "context": "Brafman and Domshlak (2004) have pointed out some of the semantic difficulties associated with above approaches, and considered an alternative approach to identifying the preferred result set based on the CP-net (Boutilier et al., 2004) dominance relation.", "startOffset": 212, "endOffset": 236}, {"referenceID": 8, "context": "Several authors (B\u00f6rzs\u00f6nyi et al., 2001; Chomicki, 2003; Kiessling & Kostler, 2002; Kiessling, 2002) have explored techniques for incorporating user specified preferences over the result sets of relational database queries. For instance, Chomicki\u2019s framework (2003) allows user preferences over each of the attributes of a relation to be expressed as first order logic formulas.", "startOffset": 17, "endOffset": 266}, {"referenceID": 8, "context": "Several authors (B\u00f6rzs\u00f6nyi et al., 2001; Chomicki, 2003; Kiessling & Kostler, 2002; Kiessling, 2002) have explored techniques for incorporating user specified preferences over the result sets of relational database queries. For instance, Chomicki\u2019s framework (2003) allows user preferences over each of the attributes of a relation to be expressed as first order logic formulas. Suppose Sq is the set of tuples that match a query q. For each attribute Xi, from Sq, a subset Sqi of tuples that have the most preferred value(s) for Xi is identified. The result set for the query q is then given by \u2229iSqi. A similar framework for expressing and combining user preferences is presented by Kiessling (2002) and Kiessling and Kostler (2002).", "startOffset": 17, "endOffset": 702}, {"referenceID": 8, "context": "Several authors (B\u00f6rzs\u00f6nyi et al., 2001; Chomicki, 2003; Kiessling & Kostler, 2002; Kiessling, 2002) have explored techniques for incorporating user specified preferences over the result sets of relational database queries. For instance, Chomicki\u2019s framework (2003) allows user preferences over each of the attributes of a relation to be expressed as first order logic formulas. Suppose Sq is the set of tuples that match a query q. For each attribute Xi, from Sq, a subset Sqi of tuples that have the most preferred value(s) for Xi is identified. The result set for the query q is then given by \u2229iSqi. A similar framework for expressing and combining user preferences is presented by Kiessling (2002) and Kiessling and Kostler (2002). Brafman and Domshlak (2004) have pointed out some of the semantic difficulties associated with above approaches, and considered an alternative approach to identifying the preferred result set based on the CP-net (Boutilier et al.", "startOffset": 17, "endOffset": 735}, {"referenceID": 8, "context": "Several authors (B\u00f6rzs\u00f6nyi et al., 2001; Chomicki, 2003; Kiessling & Kostler, 2002; Kiessling, 2002) have explored techniques for incorporating user specified preferences over the result sets of relational database queries. For instance, Chomicki\u2019s framework (2003) allows user preferences over each of the attributes of a relation to be expressed as first order logic formulas. Suppose Sq is the set of tuples that match a query q. For each attribute Xi, from Sq, a subset Sqi of tuples that have the most preferred value(s) for Xi is identified. The result set for the query q is then given by \u2229iSqi. A similar framework for expressing and combining user preferences is presented by Kiessling (2002) and Kiessling and Kostler (2002). Brafman and Domshlak (2004) have pointed out some of the semantic difficulties associated with above approaches, and considered an alternative approach to identifying the preferred result set based on the CP-net (Boutilier et al.", "startOffset": 17, "endOffset": 764}, {"referenceID": 8, "context": "A host of algorithms have also been proposed for computing the non-dominated result set in response to preference queries, especially for the efficient evaluation of skyline queries (B\u00f6rzs\u00f6nyi et al., 2001; Chomicki, 2003).", "startOffset": 182, "endOffset": 222}, {"referenceID": 17, "context": "A host of algorithms have also been proposed for computing the non-dominated result set in response to preference queries, especially for the efficient evaluation of skyline queries (B\u00f6rzs\u00f6nyi et al., 2001; Chomicki, 2003).", "startOffset": 182, "endOffset": 222}, {"referenceID": 2, "context": "We refer the interested reader to surveys by Baier et al. (2008b) and Bienvenu et al.", "startOffset": 45, "endOffset": 66}, {"referenceID": 2, "context": "We refer the interested reader to surveys by Baier et al. (2008b) and Bienvenu et al. (2011) for an overview of qualitative and quantitative preference languages used in preference based AI planning, and different algorithms for computing the most preferred plans.", "startOffset": 45, "endOffset": 93}, {"referenceID": 6, "context": ", preferences over the properties that hold over the entire sequence of states of a plan (Baier, Bacchus, & McIlraith, 2009; Bienvenu et al., 2011) cannot be handled within our framework.", "startOffset": 89, "endOffset": 147}], "year": 2011, "abstractText": "Many applications, e.g., Web service composition, complex system design, team formation, etc., rely on methods for identifying collections of objects or entities satisfying some functional requirement. Among the collections that satisfy the functional requirement, it is often necessary to identify one or more collections that are optimal with respect to user preferences over a set of attributes that describe the non-functional properties of the collection. We develop a formalism that lets users express the relative importance among attributes and qualitative preferences over the valuations of each attribute. We define a dominance relation that allows us to compare collections of objects in terms of preferences over attributes of the objects that make up the collection. We establish some key properties of the dominance relation. In particular, we show that the dominance relation is a strict partial order when the intra-attribute preference relations are strict partial orders and the relative importance preference relation is an interval order. We provide algorithms that use this dominance relation to identify the set of most preferred collections. We show that under certain conditions, the algorithms are guaranteed to return only (sound), all (complete), or at least one (weakly complete) of the most preferred collections. We present results of simulation experiments comparing the proposed algorithms with respect to (a) the quality of solutions (number of most preferred solutions) produced by the algorithms, and (b) their performance and efficiency. We also explore some interesting conjectures suggested by the results of our experiments that relate the properties of the user preferences, the dominance relation, and the algorithms.", "creator": "dvips(k) 5.96dev Copyright 2007 Radical Eye Software"}}}