{"id": "1401.5855", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Jan-2014", "title": "Tractable Triangles and Cross-Free Convexity in Discrete Optimisation", "abstract": "the minimisation problem of a sum of unary and pairwise functions of discrete variables is a general np - hard problem described with wide applications such as computing map configurations in markov random data fields ( mrf ), minimising statistical gibbs energy, or systematically solving binary ordinary valued graph constraint satisfaction problems ( vcsps ).", "histories": [["v1", "Thu, 23 Jan 2014 02:45:30 GMT  (322kb)", "http://arxiv.org/abs/1401.5855v1", "arXiv admin note: text overlap witharXiv:1008.4035by other authors"]], "COMMENTS": "arXiv admin note: text overlap witharXiv:1008.4035by other authors", "reviews": [], "SUBJECTS": "cs.CC cs.AI", "authors": ["martin c cooper", "stanislav \\v{z}ivn\\'y"], "accepted": false, "id": "1401.5855"}, "pdf": {"name": "1401.5855.pdf", "metadata": {"source": "CRF", "title": "Tractable Triangles and Cross-Free Convexity in Discrete Optimisation", "authors": ["Martin C. Cooper", "Stanislav \u017divn\u00fd"], "emails": ["cooper@irit.fr", "standa.zivny@cs.ox.ac.uk"], "sections": [{"heading": null, "text": "We study the computational complexity of classes of discrete optimisation problems given by allowing only certain types of costs in every triangle of variable-value assignments to three distinct variables. We show that for several computational problems, the only nontrivial tractable classes are the well known maximum matching problem and the recently discovered joint-winner property. Our results, apart from giving complete classifications in the studied cases, provide guidance in the search for hybrid tractable classes; that is, classes of problems that are not captured by restrictions on the functions (such as submodularity) or the structure of the problem graph (such as bounded treewidth).\nFurthermore, we introduce a class of problems with convex cardinality functions on cross-free sets of assignments. We prove that while imposing only one of the two conditions renders the problem NP-hard, the conjunction of the two gives rise to a novel tractable class satisfying the cross-free convexity property, which generalises the joint-winner property to problems of unbounded arity."}, {"heading": "1. Introduction", "text": "The topic of this paper is the following optimisation problem: given a set of discrete variables and a set of functions, each depending on a subset of the variables, minimise the sum of the functions over all variables. This fundamental research problem has been studied within several different contexts of computer science and artificial intelligence under different names: Min-Sum Problems (Werner, 2007), MAP inference in Markov Random Fields (MRF) and Conditional Random Fields (CRF) (Lauritzen, 1996; Wainwright & Jordan, 2008), Gibbs energy minimisation (Geman & Geman, 1984), Valued Constraint Satisfaction Problems (Dechter, 2003), or (for two-state variables) pseudo-Boolean optimisation (Boros & Hammer, 2002).\nWe use the terminology of Valued Constraint Satisfaction Problems (VCSPs) (Schiex, Fargier, & Verfaillie, 1995; Dechter, 2003). We start with a special case of VCSPs that deals only with the feasibility (rather than optimisation) problem.\nc\u00a92012 AI Access Foundation. All rights reserved.\nA Constraint Satisfaction Problem (CSP) instance consists of a collection of variables which must be assigned values subject to specified constraints (Montanari, 1974). Each CSP instance has an underlying undirected graph, known as its constraint graph (or structure), whose vertices are the variables of the instance, and two vertices are adjacent if corresponding variables are related by some constraint.\nAn important line of research on CSPs is to identify all tractable cases which are recognisable in polynomial time. Most of this work has been focused on one of the two general approaches: either identifying forms of constraint which are sufficiently restrictive to ensure tractability no matter how they are combined (Bulatov, Krokhin, & Jeavons, 2005; Feder & Vardi, 1998), or else identifying structural properties of constraint networks which ensure tractability no matter what forms of constraint are imposed (Dechter & Pearl, 1988).\nThe first approach has led to identifying certain algebraic closure operations known as polymorphisms (Jeavons, 1998) which are necessary for a set of constraint types to ensure tractability. A set of constraint types with this property is called a tractable constraint language. The second approach has been used to characterise all tractable cases of boundedarity CSPs (such as binary CSPs) (Dalmau, Kolaitis, & Vardi, 2002; Grohe, 2007) and unbounded-arity CSPs (Marx, 2010).\nIn practice, constraint satisfaction problems usually do not possess a sufficiently restricted structure or use a sufficiently restricted constraint language to fall into any of these tractable classes. Nevertheless, they may still have properties which ensure they can be solved efficiently, but these properties concern both the structure and the form of the constraints. Such properties have sometimes been called hybrid reasons for tractability (Dechter, 2003; Cohen, 2003; Cohen & Jeavons, 2006; Cooper, Jeavons, & Salamon, 2010; Cohen, Cooper, Green, & Marx, 2011).\nCSPs capture only the feasibility aspects of a given problem. Since many computational problems involve seeking a solution that optimises certain criteria, as well as satisfying certain restrictions, various general frameworks for optimisation problems have been studied such as linear programming, mixed integer programming and others (Hooker, 2007). One possibility is to extend CSPs to so-called soft constraint satisfaction problems, which allow measures of desirability to be associated with different assignments to the variables (Dechter, 2003; Meseguer, Rossi, & Schiex, 2006). In an instance of a soft CSP, every constraint is associated with a function (rather than a relation as in standard CSPs) which represents preferences among different partial assignments, and the goal is to find the best assignment. Several very general soft CSP frameworks have been proposed in the literature (Schiex, Fargier, & Verfaillie, 1995; Bistarelli, Montanari, & Rossi, 1997). In this paper we focus on one of the very general frameworks, the valued constraint satisfaction problem (VCSP) (Schiex, Fargier, & Verfaillie, 1995). VCSPs are powerful enough to include many interesting optimisation problems (Rossi, van Beek, & Walsh, 2006; Cohen, Cooper, Jeavons, & Krokhin, 2006) and, as pointed out at the beginning of this introduction, are equivalent to other well studied optimisation problems studied in computer vision and other fields of computer science and artificial intelligence.\nAn important line of research on VCSPs is to identify tractable cases which are recognisable in polynomial time. It is well known that structural reasons for tractability generalise to the VCSP (Bertele\u0301 & Brioshi, 1972; Dechter, 2003). In the case of language restrictions, only a few conditions are known to guarantee tractability of a given set of valued\nconstraints (Cohen, Cooper, Jeavons, & Krokhin, 2006; Cohen, Cooper, & Jeavons, 2008; Jonsson, Kuivinen, & Thapper, 2011; Kolmogorov, 2011; Kolmogorov & Z\u030civny\u0301, 2012)."}, {"heading": "1.1 Contributions", "text": "This paper is the full version of results described in two conference papers (Cooper & Z\u030civny\u0301, 2011a, 2011c)."}, {"heading": "1.1.1 Binary VCSPs", "text": "In the first part of the paper, we study hybrid tractability of binary VCSPs (i.e. optimisation problems involving functions of at most two arguments) for various sets of possible costs that correspond to CSPs, CSPs with soft unary constraints, Max-CSPs, finite-valued VCSPs and general-valued VCSPs.\nWe focus on classes of instances defined by allowed combinations of binary costs in every assignment to 3 different variables (called a triangle). Our motivation for this investigation is that one such restriction, the so-called joint-winner property has recently been shown to define a tractable class (Cooper & Z\u030civny\u0301, 2011b). For finite sets of possible costs (corresponding to CSPs and Max-CSPs), there are only finitely many possibilities. For example, in Max-CSPs there are only four possible multi-sets of costs, namely {0, 0, 0}, {0, 0, 1}, {0, 1, 1} and {1, 1, 1}. However, for infinite sets of possible costs (corresponding to finitevalued CSPs and general-valued VCSPs) there are infinitely many combinations. Obviously, we cannot consider them all, and hence we consider an equivalence relation based on the total order on the valuation structure. For example, we consider the four equivalence classes of multi-sets {\u03b1, \u03b2, \u03b3} given by \u03b1 = \u03b2 = \u03b3, \u03b1 = \u03b2 < \u03b3, \u03b1 = \u03b2 > \u03b3, \u03b1 < \u03b2 < \u03b3.\nFor all sets of possible costs \u2126 we consider, we prove a dichotomy theorem, thus identifying all tractable cases with respect to the equivalence relation on the combinations of costs. It turns out that there are only two non-trivial tractable cases: the well-known maximum matching problem (Edmonds, 1965b), and the recently discovered joint-winner property (Cooper & Z\u030civny\u0301, 2011b)."}, {"heading": "1.1.2 Non-binary VCSPs", "text": "In the second part of the paper, we introduce the cross-free convexity property (CFC), and show that it gives rise to a novel tractable class of VCSPs. Informally speaking, the CFC property is a conjunction of convex cost functions applied to a structured set of sets of variable-value assignments. The CFC property generalises our recent results on VCSPs satisfying the non-overlapping convexity property (Cooper & Z\u030civny\u0301, 2011b) by dropping the assumption that the input functions are non-decreasing and allowing the assignmentsets to be not only hierarchically nested (laminar) but also cross-free. (All terms will be defined formally in Section 4.) Not only do we generalise the tractable class from the work of Cooper & Z\u030civny\u0301 (2011b), but our algorithm also has better running time compared to the algorithm of Cooper & Z\u030civny\u0301 (2011b). Moreover, we show that relaxing either one of the cross-free or convexity assumptions leads to an NP-hard class.\nA VCSP instance may be such that some subset of its constraints are cross-free convex. Since our network is projection-safe (Lee & Leung, 2009), we can use it to establish soft global arc consistency on this subset of constraints viewed as a single global constraint.\nWe also show that, over Boolean domains, it is possible to determine in polynomial time whether there exists some subset of the constraints such that the VCSP instance satisfies the cross-free convexity property after renaming the variables in these constraints. To explore this area even further, we study restrictions on overlaps of constraint scopes, and identify another tractable class which is incomparable with the cross-free convexity property."}, {"heading": "1.2 Organisation of the Paper", "text": "The rest of this paper is organised as follows. We start, in Section 2, by defining valuation structures, valued constraint satisfaction problems, and basics of flow networks. Section 3 is devoted to the classification of binary VCSPs defined by triangles: In Section 3.1, we present our results on CSPs, followed up with results on CSPs with soft unary constraints in Section 3.2. In Section 3.3, we present our results on Max-CSPs, followed by the results on finite-valued and general-valued VCSPs in Section 3.4 and in Section 3.5 respectively. Section 4 is devoted to our results on non-binary VCSPs: In Section 4.1, we present an algorithm for VCSPs satisfying the cross-free convexity property and analyze its running time. Section 4.4 shows that neither cross-freeness nor convexity on its own is enough to guarantee tractability. In Section 4.5, we extend the class of cross-free convex VCSPs over Boolean domains using the notion of renamability. Section 4.6 explores a related notion over sets of variables rather than sets of variable-value assignments. Finally, we conclude in Section 5."}, {"heading": "2. Preliminaries", "text": "In this section, we define valuation structures, valued constraint satisfaction problems, and present the basics of flow networks."}, {"heading": "2.1 Valuation Structures", "text": "A valuation structure, \u2126, is a totally ordered set, with a minimum and a maximum element (denoted 0 and \u221e), together with a commutative, associative binary aggregation operator (denoted \u2295), such that for all \u03b1, \u03b2, \u03b3 \u2208 \u2126, \u03b1 \u2295 0 = \u03b1, and \u03b1 \u2295 \u03b3 \u2265 \u03b2 \u2295 \u03b3 whenever \u03b1 \u2265 \u03b2. Members of \u2126 are called costs.\nWe shall denote by Q+ the set of all non-negative rational numbers. We define Q+ = Q+\u222a{\u221e}. We consider the following subsets of the valuation structure Q+: {0,\u221e}, {0, 1}, Q+ and Q+, where in all cases the aggregation operation is the standard addition operation on rationals +. Moreover, for all a \u2208 Q+, we define a+\u221e =\u221e+ a =\u221e."}, {"heading": "2.2 Valued Constraint Satisfaction Problems", "text": "An instance of the Valued Constraint Satisfaction Problem (VCSP) (Schiex, Fargier, & Verfaillie, 1995) is given by n variables v1, . . . , vn over finite domains D1, . . . , Dn of values and a set of constraints C. Each constraint from C is a pair \u3008s, g\u3009, where s is a list of variables s = \u3008vi1 , . . . , vim\u3009 called the constraint scope, and g is an m-ary cost function g : Di1 \u00d7 . . .\u00d7Dim \u2192 \u2126. Any assignment of values from the domains to all the variables is called a solution. The goal is to find an optimal solution; that is, a solution which minimises the total cost given by the aggregation of the costs for its restrictions onto each constraint\nscope: min\nv1\u2208D1,...,vn\u2208Dn \u2295 \u3008\u3008vi1 ,...,vim \u3009,g\u3009\u2208C g(vi1 , . . . , vim) .\nDepending on the set \u2126 of costs which may occur in instances, we get special cases of the VCSP: \u2126 = {0,\u221e} corresponds to the Constraint Satisfaction Problem (CSP), {0, 1} corresponds to the Maximum Constraint Satisfaction Problem (Max-CSP), Q+ corresponds to the finite-valued VCSP, and finally Q+ corresponds to the general-valued VCSP.\nIf all the domains of all the variables are the same, we denote this common domain by D. A CSP instance is called satisfiable if the cost of an optimal solution is zero (i.e. all constraints are satisfied).\nCost functions with range {0,\u221e} are called crisp. Cost functions which are not crisp are called soft."}, {"heading": "2.3 Binary Valued Constraint Satisfaction Problems", "text": "In Section 3 we will be interested in the special case of the VCSP when the bound on the arity of all constraints is 2; these are known as binary VCSPs. Without loss of generality, we can assume that any binary VCSP instance contains constraints of all possible scopes; that is, n unary constraints and ( n 2 ) binary constraints. We denote the cost function associated with the unary constraint with the scope \u3008vi\u3009 by ci and the cost function associated with the binary constraint with the scope \u3008vi, vj\u3009 by cij . The absence of any constraint on variable vi (or between variables vi, vj) is modelled by a cost function ci (or cij , respectively) which is uniformly zero. Using this notation, the goal is to find a solution which minimises the total cost given by:\nn\u2295 i=1 ci(vi) \u2295 \u2295 1\u2264i<j\u2264n cij(vi, vj) .\nRemark 2.1. We remark on terminological differences. VCSPs are studied under different names such as Min-Sum, Gibbs energy minimisation, or Markov Random Fields; domain values are sometimes called labels, whereas binary instances are called pairwise instances, m-ary cost functions are called m-cliques, and solutions are called labellings."}, {"heading": "2.4 Network Flows", "text": "Here we review some basics on flows in graphs. We refer the reader to standard textbooks (Ahuja, Magnanti, & Orlin, 2005; Schrijver, 2003) for more details. We present only the notions and results needed for our purposes. In particular, we deal with integral flows only. We denote by N the set of positive integers with zero. Let G = (V,A) be a directed graph with vertex set V and arc set A. For each arc a \u2208 A there is a demand/capacity function [d(a), c(a)] and a weight (or cost) function w(a), where d(a), c(a) \u2208 N and w(a) \u2208 Q. Let s, t \u2208 V . A function f : A \u2192 N is called an s \u2212 t flow (or just a flow) if for all v \u2208 V \\ {s, t}, \u2211\na=(u,v)\u2208A\nf(a) = \u2211\na=(v,u)\u2208A\nf(a) (flow conservation).\nWe say that a flow is feasible if d(a) \u2264 f(a) \u2264 c(a) for each a \u2208 A. We define the value of flow f as val(f) = \u2211 a=(s,v)\u2208A f(a) \u2212 \u2211 a=(v,s)\u2208A f(a). We define the cost of flow f as\u2211\na\u2208Aw(a)f(a). A minimum-cost flow is a feasible flow with minimum cost. Algorithms for finding the minimum-cost flow of a given value are well known (Ahuja, Magnanti, & Orlin, 2005; Schrijver, 2003). We consider a generalisation of the minimumcost flow problem. For each arc a \u2208 A there is a convex weight function wa which associates a cost wa(f(a)) to the flow f(a) along arc a. In particular, we consider the model in which the weight functions wa (a \u2208 A) are convex piecewise linear and given by the breakpoints (which covers the case of convex functions over the integers). The cost of flow f is now defined as \u2211 a\u2208Awa(f(a)). The corresponding problem of finding a minimum-cost integral flow is known as the minimum convex cost flow problem. In a network with n vertices and m edges with capacities at most U , the minimum convex cost flow problem can be solved in time O((m logU)SP (n,m)), where SP (n,m) is the time to compute a shortest directed path in a network with n vertices and m edges (Minoux, 1984, 1986; Ahuja, Magnanti, & Orlin, 2005)."}, {"heading": "3. Complexity Classification of Binary VCSPs Defined by Triangles", "text": "In a VCSP instance, we use the word triangle for any set of assignments {\u3008vi, a\u3009, \u3008vj , b\u3009, \u3008vk, c\u3009}, where vi, vj , vk are distinct variables and a \u2208 Di, b \u2208 Dj , c \u2208 Dk are domain values. The multi-set of costs in such a triangle is {cij(a, b), cik(a, c), cjk(b, c)}. A triple of costs will always refer to a multi-set of binary costs in a triangle.\nA triangle {\u3008vi, a\u3009, \u3008vj , b\u3009, \u3008vk, c\u3009}, where a \u2208 Di, b \u2208 Dj , c \u2208 Dk, satisfies the jointwinner property (JWP) if either all three cij(a, b), cik(a, c), cjk(b, c) are the same, or two of them are equal and the third one is bigger. A VCSP instance satisfies the joint-winner property if every triangle satisfies the joint-winner property.\nTheorem 3.1. (Cooper & Z\u030civny\u0301, 2011b) The class of VCSP instances satisfying JWP is tractable.\nIn our previous work (Cooper & Z\u030civny\u0301, 2011b), we also showed that the class defined by the joint-winner property is maximal \u2013 allowing a single extra triple of costs that violates the joint-winner property renders the class NP-hard.\nTheorem 3.2. (Cooper & Z\u030civny\u0301, 2011b) Let \u03b1 < \u03b2 \u2264 \u03b3, where \u03b1 \u2208 Q+ and \u03b2, \u03b3 \u2208 Q+, be a multi-set of costs that do not satisfy the joint-winner property. The class of instances where the costs in each triangle either satisfy the joint-winner property or are {\u03b1, \u03b2, \u03b3} is NP-hard, even for Boolean Max-CSPs, CSPs over size-3 domains or Boolean finite-valued VCSPs.\nIn this section we consider a much broader question, whether allowing any fixed set S of triples of costs in triangles, where S does not necessarily include all triples allowed by the JWP, defines a tractable class of VCSP instances.\nIn the case of CSP, there are only four possible multi-sets of costs ({0, 0, 0}, {0, 0,\u221e}, {0,\u221e,\u221e}, {\u221e,\u221e,\u221e}) and it is possible to study all 16 subsets S of this set. But, given an infinite set of possible costs, such as Q+ or Q+, there is an infinite number of sets S of triples of costs. Obviously, we cannot consider all such sets. Therefore, we only consider\ncases defined by the total order < on \u2126, corresponding to a partition of the set of all possible triples of costs into a small number of types of triples.\nLet D denote the set of all possible cost types under consideration. Let \u2126 be a fixed set of allowed costs. For any S \u2286 D, we denote by A\u2126(S) (A for allowed) the set of binary VCSP instances whose costs lie in \u2126 and where the triples of costs in all triangles belong to S.\nOur goal is to classify the complexity of A\u2126(S) for every S \u2286 D. The problem A\u2126(S) is considered tractable if there is a polynomial-time algorithm to solve it and intractable if it is NP-hard.\nProposition 3.3. Let \u2126 be an arbitrary set of costs and S a set of cost types.\n1. If A\u2126(S) is tractable and S\u2032 \u2286 S, then A\u2126(S\u2032) is tractable.\n2. If A\u2126(S) is intractable and S\u2032 \u2287 S, then A\u2126(S\u2032) is intractable.\nRemark 3.4. We implicitly allow all unary cost functions. In fact, all our tractability results work with unary cost functions, and our NP-hardness results do not require any unary cost functions.\nRemark 3.5. We consider problems with unbounded domains; that is, the domain sizes are part of the input. However, all our NP-hardness results are obtained for problems with a fixed domain size.1 In the case of CSPs, we need domains of size 3 to prove NP-hardness, and in all other cases domains of size 2 are sufficient to prove NP-hardness. Since binary CSPs are known to be tractable on Boolean domains, and any VCSP is trivially tractable over domains of size 1, all our NP-hardness results are tight."}, {"heading": "3.1 CSP", "text": "In this section, we will focus on the set of possible costs \u2126 = {0,\u221e}; that is, Constraint Satisfaction Problems (CSPs). We consider the four following types of triples of costs:\nSymbol Costs < {0, 0,\u221e} > {0,\u221e,\u221e} 0 {0, 0, 0} \u221e {\u221e,\u221e,\u221e}\nThe set of possible cost types is thus D = {<,>, 0,\u221e}. Indeed, these four cost types correspond precisely to the four possible multi-sets of costs: {0, 0, 0}, {0, 0,\u221e}, {0,\u221e,\u221e} and {\u221e,\u221e,\u221e}. The dichotomy presented in this section therefore represents a complete characterisation of the complexity of CSPs defined by placing restrictions on triples of costs in triangles.\nAs A{0,\u221e}(D) allows all binary CSPs, A{0,\u221e}(D) is intractable (Papadimitriou, 1994) unless the domain is of size at most 2, in which case it is equivalent to 2-SAT, which is a well-known tractable class (Schaefer, 1978).\n1. In other words, the considered problems are not fixed-parameter tractable (Downey & Fellows, 1999) in the domain size.\nProposition 3.6. A{0,\u221e}(D) is intractable unless |D| \u2264 2.\nThe joint-winner property for CSPs gives\nCorollary 3.7 (of Theorem 3.1). A{0,\u221e}({<, 0,\u221e}) is tractable.\nProposition 3.8. A{0,\u221e}({>, 0,\u221e}) is tractable.\nProof. Since < is forbidden, if two binary costs in a triangle are zero then the third binary cost must also be zero. In other words, if the assignment \u3008v1, a1\u3009 is consistent with \u3008vi, ai\u3009 for each i \u2208 {2, . . . , n}, then for all i, j \u2208 {1, . . . , n} such that i 6= j, \u3008vi, ai\u3009 is consistent with \u3008vj , aj\u3009. Thus Singleton Arc Consistency, which is a procedure enforcing Arc Consistency for every variable-value pair (Rossi, van Beek, & Walsh, 2006), solves A{0,\u221e}({>, 0,\u221e}).\nProposition 3.9. A{0,\u221e}({<,>,\u221e}) is tractable.\nProof. This class is trivial: instances with at least three variables have no solution of finite cost, since the triple of costs {0, 0, 0} is not allowed.\nProposition 3.10. A{0,\u221e}({<,>, 0}) is intractable unless |D| \u2264 2.\nProof. It is straightforward to encode the 3-Colouring problem as a binary CSP. The result then follows from the fact that 3-Colouring is NP-hard for triangle-free graphs (i.e. graphs that do not contain K3, the complete graph on 3 vertices, as a subgraph), which can be derived from two results from the work of Lova\u0301sz (1973). (Indeed, 3-Colouring is NP-hard even for triangle-free graphs of degree at most 4; see Maffray & Preissmann, 1996.) The triple of costs {\u221e,\u221e,\u221e} cannot occur in the CSP encoding of the colouring of a trianglefree graph.\nResults from this section, together with Proposition 3.3, complete the complexity classification, as depicted in Figure 1: white nodes represent tractable cases and shaded nodes represent intractable cases.\nTheorem 3.11. For |D| \u2265 3, a class of binary CSP instances defined as A{0,\u221e}(S), where S \u2286 {<,>, 0,\u221e}, is intractable if and only if {<,>, 0} \u2286 S."}, {"heading": "3.2 CSP with Soft Unary Constraints", "text": "A simple way to convert classical CSPs into an optimisation problem is to allow soft unary constraints. This framework includes well-studied problems such as Max-Ones over Boolean domains (Creignou, Khanna, & Sudan, 2001; Khanna, Sudan, Trevisan, & Williamson, 2001) and non-Boolean domains (Jonsson, Kuivinen, & Nordh, 2008), Max-Solution (Jonsson & Nordh, 2008), or Min-Cost-Hom (Takhanov, 2010).\nIt turns out that the dichotomy given in Theorem 3.11 remains valid even if soft unary constraints are allowed. In this case, the intractable cases are now intractable even for domains of size 2.\nWe use the notation AQ+{0,\u221e}(S) to represent the set of VCSP instances with binary costs from {0,\u221e}, unary costs from Q+ and whose triples of costs in triangles belong to S. In other words, we now consider VCSPs with crisp binary constraints and soft unary constraints.\nTheorem 3.12. For |D| \u2265 2, a class of binary CSP instances defined as AQ+{0,\u221e}(S), where S \u2286 {<,>, 0,\u221e}, is intractable if and only if {<,>, 0} \u2286 S.\nProof. For the tractability part of the theorem, it suffices to show tractability when S is {<,>,\u221e}, {<, 0,\u221e} or {>, 0,\u221e}, the three maximal tractable sets in the case of CSP shown in Figure 1.\nThe tractability of AQ+{0,\u221e}({<, 0,\u221e}) is again a corollary of Theorem 3.1 since the jointwinner property allows any unary soft constraints.\nTo solve AQ+{0,\u221e}({>, 0,\u221e}) in polynomial time, we establish Singleton Arc Consistency in the CSP instance corresponding to the binary constraints and then loop over all assignments to the first variable. For each assignment a1 to variable v1, we can determine the optimal global assignment which is an extension of \u3008v1, a1\u3009 by simply choosing the assignment ai for each variable vi with the least unary cost ci(ai) among those assignments \u3008vi, ai\u3009 that are consistent with \u3008v1, a1\u3009.\nAs in the proof of Proposition 3.9, any instance of AQ+{0,\u221e}({<,>,\u221e}) is tractable, since instances with at least three variables have no solution of finite cost.\nSets S which are intractable for CSPs clearly remain intractable when soft unary constraints are allowed. However, we want to prove intractability even in the Boolean case; that is, when |D| = 2.\nThe intractability of AQ+{0,\u221e}({<,>, 0}) (and hence, by Proposition 3.3, of A Q+ {0,\u221e}({<,> , 0,\u221e})) follows from the fact that the Independent Set problem (Garey & Johnson, 1979) is intractable even on triangle free graphs. This follows from the standard trick (Poljak, 1974) of replacing every edge by P4, the path on 4 vertices (this operation is also known\nas 2-subdivision). In particular, a graph G with m edges has an independent set of size k if and only if the 2-subdivision of G, denoted by G\u2032, has an independent set of size k +m. Note that G\u2032 is triangle-free. Any instance G\u2032 of the Independent Set problem on trianglefree graphs can be encoded as an instance of AQ+{0,\u221e}({<,>, 0}) over the {0, 1} domain in the straightforward way: variables correspond to vertices; edge {i, j} yields cost function cij(1, 1) =\u221e and cij(x, y) = 0 for (x, y) 6= (1, 1); ci(0) = 1 and ci(1) = 0 for every i. Since G\u2032 is triangle-free, the constructed instance belongs to AQ+{0,\u221e}({<,>, 0})."}, {"heading": "3.3 Max-CSP", "text": "In this section, we will focus on the set of possible costs \u2126 = {0, 1}. It is well known that the VCSP with costs in {0, 1} is polynomial-time equivalent to unweighted Max-CSP (no repetition of constraints allowed) (Rossi, van Beek, & Walsh, 2006). The four types of triples of costs we consider are:\nSymbol Costs < {0, 0, 1} > {0, 1, 1} 0 {0, 0, 0} 1 {1, 1, 1}\nThe set of possible cost types is then D = {<,>, 0, 1}. Again, these four costs types correspond precisely to the four possible multi-sets of costs: {0, 0, 0}, {0, 0, 1}, {0, 1, 1}, and {1, 1, 1}. As for the CSP, our dichotomy result for Max-CSP represents a complete characterisation of the complexity of classes of instances defined by placing restrictions on triples of costs in triangles.\nAs A{0,1}(D) allows all binary Max-CSPs, A{0,1}(D) is intractable (Garey & Johnson, 1979; Papadimitriou, 1994) unless the domain is of size 1.\nProposition 3.13. A{0,1}(D) is intractable unless |D| \u2264 1.\nThe joint-winner property (Cooper & Z\u030civny\u0301, 2011b) for Max-CSPs gives\nCorollary 3.14 (of Theorem 3.1). A{0,1}({<, 0, 1}) is tractable.\nProposition 3.15. A{0,1}({<,>}) is tractable.\nProof. We show that A{0,1}({<,>}) contains instances on at most 5 variables, thus showing that A{0,1}({<,>}) is trivially tractable. Consider an instance of A{0,1}({<,>}) on 6 or more variables. Choose 6 arbitrary variables v1, . . . , v6 and 6 domain values di \u2208 Dvi , 1 \u2264 i \u2264 6. Every cost is either 0 or 1. It is well known (Goodman, 1959) and not difficult to show2 that for every 2-colouring of edges of K6 (the complete graph on 6 vertices) there is a monochromatic triangle. Therefore, there is a triangle with costs either {0, 0, 0} or {1, 1, 1}. But this is a contradiction with the fact that only cost types < (i.e. {0, 0, 1}) and > (i.e. {1, 1, 0}) are allowed.\nRemark 3.16. Both A\u2126({>}) and A\u2126({<,>}) are tractable over any finite set of costs \u2126 due to a similar Ramsey type of argument: given \u2126 = {0, 1, . . . ,K \u2212 1}, there is nK \u2208 N such that for every complete graph G on n vertices, where n \u2265 nK , and every colouring of the edges of G with K colours, there is a monochromatic triangle in G. Hence there are only finitely many instances, which can be stored in a look-up table. However, once the set of costs is infinite (e.g. Q+), both classes become intractable, as shown in the next section.\nProposition 3.17. A{0,1}({>, 0, 1}) is intractable unless |D| \u2264 1.\nProof. Given an instance of the Max-2SAT problem, we show how to reduce it to a {0, 1}- valued VCSP instance from A{0,1}({>, 0, 1}). The result then follows from the well-known fact that Max-2SAT is NP-hard (Garey & Johnson, 1979; Papadimitriou, 1994). Recall that an instance of Max-2SAT is given by a set of m clauses of length 2 over n variables x1, . . . , xn and the goal is to find an assignment that maximises the number of clauses that have at least one true literal.\nIn order to simplify notation, rather than constructing a VCSP instance from A{0,1}({> , 0, 1}) with the goal to minimise the total cost, we construct an instance from A{0,1}({< , 0, 1}) with the goal to maximise the total cost. This implies that the allowed sets of costs in triangles are {0, 0, 1}, {0, 0, 0}, and {1, 1, 1}. Clearly, these two problems are polynomialtime equivalent.\nFor each variable xi, we create a large number M of copies x j i of xi with domain {0, 1}, 1 \u2264 i \u2264 n and 1 \u2264 j \u2264M . For each variable xi, the new copies of xi are pairwise joined by an equality-encouraging cost function h, where h(x, y) = 1 if x = y and h(x, y) = 0 otherwise. By choosing M very large, we can assume from now on that all copies of xi will be assigned the same value in all optimal solutions. We can effectively ignore the contribution of these\n2. Take an arbitrary vertex v in K6 where every edge is coloured either blue or red. By the pigeonhole principle, v is incident to at least 3 blue or at least 3 red edges. Without loss of generality, we consider the former case. Let v1, v2 and v3 be the three vertices incident to three blue edges incident to v. If an any of the edges {v1, v2}, {v1, v3}, {v2, v3} is blue, we have a blue triangle. If all three edges are red, we have a red triangle.\ncost functions, which is K = n ( M 2 ) , to the total cost. It is straightforward to check that all triangles involving the new copies of the variables have the allowed costs. For each clause (l1\u2228 l2), where l1 and l2 are literals, we create a variable zi with domain {l1, l2}, 1 \u2264 i \u2264 m. For each literal l in the domain of zk: if l is a positive literal l = xi, we introduce cost function g between zk and each copy x j i of xi, where g(l, 1) = 1 and g(., .) = 0 otherwise; if l is a negative literal l = \u00acxi, we introduce cost function g\u2032 between zk and each copy xji of xi, where g\n\u2032(l, 0) = 1 and g\u2032(., .) = 0 otherwise. To make sure that the only sets of costs in all triangles are {0, 0, 1}, {0, 0, 0}, and {1, 1, 1}, we also add cost functions f between the different clause variables zk and zk\u2032 involving the same literal l, where f(l, l) = 1 and f(., .) = 0 otherwise. The contribution of all the cost functions between zk and zk\u2032 , 1 \u2264 k 6= k\u2032 \u2264 m, is less than M and hence of no importance for M very large.\nAnswering the question of whether the resulting VCSP instance has a solution with a cost \u2265 K+ pM is equivalent to determining whether the original Max-2SAT instance has a solution satisfying at least p clauses. This is because each clause variable zk can only add a score \u2265M if we assign value l to zk for some literal l which is assigned true.\nProposition 3.18. Both A{0,1}({<,>, 0}) and A{0,1}({<,>, 1}) are intractable unless |D| \u2264 1.\nProof. We present a reduction from Max-Cut, a well-known NP-hard problem (Garey & Johnson, 1979), which is NP-hard even on triangle-free graphs (Lewis & Yannakakis, 1980). An instance of Max-Cut can easily be modelled as a Boolean {0, 1}-valued VCSP instance: every vertex of the graph is represented by a variable with the Boolean domain {0, 1}, and every edge yields cost function f , where f(x, y) = 1 if x = y and f(x, y) = 0 if x 6= y. Observe that since the original graph is triangle-free, there cannot be a triangle with costs {1, 1, 1}. Therefore, the constructed instance belongs to A{0,1}({<,>, 0}).\nFor theA{0,1}({<,>, 1}) case, instead of minimising the total cost, we maximise the total cost for instances from A{0,1}({<,>, 0}). Again, we model an instance of the Max-Cut problem using Boolean variables, and every edge yields a cost function g, where g(x, y) = 0 if x = y and g(x, y) = 1 if x 6= y (where in this case the aim is to maximise the total cost). The constructed instance belongs to A{0,1}({<,>, 0}). (In fact, in this case we do not need the original graph to be triangle-free.)\nProposition 3.19. A{0,1}({>, 0}) is tractable.\nProof. Let I be an instance from A{0,1}({>, 0}). The algorithm loops through all possible assignments {\u3008v1, a1\u3009, \u3008v2, a2\u3009} to the first two variables. Suppose that c12(a1, a2) = 1 (the case c12(a1, a2) = 0 is similar). Observe that the possible variable-value assignments to other variables {\u3008vi, b\u3009 |3 \u2264 i \u2264 n, b \u2208 Di} can be uniquely split in two sets L and R such that: (1) for every \u3008vi, b\u3009 \u2208 L, c1i(a1, b) = 1 and c2i(a2, b) = 0; for every \u3008vi, b\u3009, \u3008vj , c\u3009 \u2208 L, cij(b, c) = 0; (2) for every \u3008vi, b\u3009 \u2208 R, c1i(a1, b) = 0 and c2i(a2, b) = 1; for every \u3008vi, b\u3009, \u3008vj , c\u3009 \u2208 R, cij(b, c) = 0; (3) for every \u3008vi, b\u3009 \u2208 L and \u3008vj , c\u3009 \u2208 R, cij(b, c) = 1. Ignoring unary cost functions for a moment, to find an optimal assignment to the remaining n\u22122 variables, one has to decide how many variables vi, 3 \u2264 i \u2264 n, will be assigned a value b \u2208 Di such that \u3008vi, b\u3009 \u2208 L. The cost of a global assignment involving k variable-value assignments from L is 1 + k + (n\u2212 2\u2212 k) + k(n\u2212 2\u2212 k) = n\u2212 1 + k(n\u2212 2\u2212 k). For some variables vi it could\nhappen that \u3008vi, b\u3009 \u2208 L for all b \u2208 Di or \u3008vi, c\u3009 \u2208 R for all c \u2208 Di. If this is the case, then we choose an arbitrary value b for xi with minimum unary cost ci(b). This is an optimal choice whatever the assignments to the variables xj (j \u2208 {3, . . . , i\u2212 1, i+ 1, . . . , n}).\nAssuming that all such variables have been eliminated and now taking into account unary cost functions, the function to minimise is given by the objective function (in which we drop the constant term n\u2212 1):\n( \u2211 xi)(n\u2212 2\u2212 \u2211 xi) + \u2211 wLi xi + \u2211 wRi (1\u2212 xi)\n(each sum being over i \u2208 {3, . . . , n}), where xi \u2208 {0, 1} indicates whether vi is assigned a value from R or L, wLi = min{ci(b) : b \u2208 Di\u2227\u3008vi, b\u3009 \u2208 L}, and similarly wRi = min{ci(c) : c \u2208 Di\u2227\u3008vi, c\u3009 \u2208 R}. The objective function is thus equal to k(n\u22122\u2212k)+ \u2211 wLi xi+ \u2211 wRi (1\u2212xi),\nwhere, as above, k = \u2211 xi is the number of assignments from L. This objective function is minimised either when k = 0 or when k = n \u2212 2. This follows from the fact that the contribution of unary cost functions to the objective function is \u2211 wLi xi + \u2211 wRi (1 \u2212 xi) which is at most n \u2212 2 (since in Max-CSP all unary costs belong to {0, 1}). This is no greater than the value of the quadratic term k(n\u22122\u2212k) for all values of k in {1, . . . , n\u22123}, i.e. not equal to 0 or n\u2212 2.\nThe optimal assignment which involves k = 0 (respectively k = n\u22122) assignments from L is obtained by simply choosing each value ai (for i > 2) with minimum unary cost among all assignments \u3008vi, ai\u3009 \u2208 R (respectively L).\nIn the case that c12(a1, a2) = 0, a similar argument shows that the quadratic term in the objective function is now 2(n\u22122\u2212k) +k(n\u22122\u2212k) = (k+ 2)(n\u22122\u2212k). This is always minimised by setting k = n\u2212 2 and again the sum of the unary costs is no greater than the value of the quadratic term for other values of k 6= n \u2212 2. The optimal assignment which involves all k = n\u2212 2 assignments from L is obtained by simply choosing each value ai (for i > 2) with minimum unary cost among all assignments \u3008vi, ai\u3009 \u2208 L.\nProposition 3.20. A{0,1}({>, 1}) is tractable.\nProof. Let I be an instance from A{0,1}({>, 1}) without any unary constraints; i.e. all constraints are binary. Observe that every variable-value assignment \u3008vi, a\u3009, where a \u2208 Di, is included in zero-cost assignment-pairs involving at most one other variable; i.e. there is at most one variable vj , such that cij(a, b) = 0 for some b \u2208 Dj . In order to minimise the total cost, we have to maximise the number of zero-cost assignment-pairs. In a global assignment, no two zero-cost assignment-pairs can involve the same variable, which means that this can be achieved by a reduction to the maximum matching problem, a problem solvable in polynomial time (Edmonds, 1965b). We build a graph with vertices given by the variables of I, and there is an edge {vi, vj} if and only if there is a \u2208 Di and b \u2208 Dj such that cij(a, b) = 0.\nTo complete the proof, we show that unary constraints do not make the problem more difficult to solve; it suffices to perform a preprocessing step before the reduction to maximum matching. Let vi be an arbitrary variable of I. If ci(a) = 1 for all a \u2208 Di, then we can effectively ignore the unary cost function ci since it simply adds a cost of 1 to any solution. Otherwise, we show that all a \u2208 Di such that ci(a) = 1 can be ignored. Take an arbitrary assignment s to all variables such that s(vi) = a, where ci(a) = 1. Now take any b \u2208 Di\nsuch that ci(b) = 0. We claim that assignment s\u2032 defined by s\u2032(vi) = b and s\u2032(vj) = s(vj) for every j 6= i does not increase the total cost compared with s. Since the assignment \u3008vi, a\u3009 can occur in at most one zero-cost assignment-pair, there are two cases to consider: (1) if there is no \u3008vj , c\u3009 with s(vj) = c such that cij(a, c) = 0, then the claim holds since ci(a) = 1 and ci(b) = 0, so the overall cost can only decrease if we replace a by b; (2) if there is exactly one j 6= i such that cij(a, c) = 0 and s(vj) = c, then again the cost of s\u2032 cannot increase because the possible increase of cost by 1 in assigning b to vi is compensated by the unary cost function ci. Therefore, before using the reduction to maximum matching, we can remove all a \u2208 Di such that ci(a) = 1 and keep only those a \u2208 Di such that ci(a) = 0.\nRemark 3.21. In the proof of Proposition 3.20, we have shown that any instance from A{0,1}({>, 1}) can be reduced to an instance of maximum matching in graphs (Edmonds, 1965b). We remark that conversely, given a graph G, the maximum matching problem in G can be modelled as a VCSP instance I \u2032G from A{0,1}({>, 1}).\nWe order the vertices of G arbitrarily and call them 1, 2, . . . , n. The instance IG will have n variables v1, . . . , vn, one for each vertex of G. Let {n1, . . . , nm} be the neighbours of vertex i in G, where m is the degree of vertex i in G; that is, {j | {i, j} \u2208 E(G)} = {n1, . . . , nm}. We define Di = {0, n1, . . . , nm}.\nAny edge {i, j} \u2208 E(G), where i < j, yields cij(j, i) = 1, and all remaining costs are 0. It follows from the definition of IG that (i) solutions to IG of maximum cost correspond to maximum matchings in G; and (ii) IG \u2208 A{0,1}({<, 0}). By swapping the costs 0 and 1, we get an instance I \u2032G from A{0,1}({>, 1}), whose solutions correspond to matchings in G and solutions of minimum cost correspond to maximum matchings in G.\nResults from this section, together with Proposition 3.3, complete the complexity classification, as depicted in Figure 2: white nodes represent tractable cases and shaded nodes represent intractable cases.\nTheorem 3.22. For |D| \u2265 2, a class of binary unweighted Max-CSP instances defined as A{0,1}(S), where S \u2286 {<,>, 0, 1}, is intractable if and only if either {<,>, 0} \u2286 S, {<,>, 1} \u2286 S, or {>, 0, 1} \u2286 S."}, {"heading": "3.4 Finite-Valued VCSP", "text": "In this section, we will focus on finite-valued VCSPs. In other words, we consider the set of possible costs \u2126 = Q+. Since there are an infinite number of triples of costs, we consider types of triples defined by the total order on \u2126. We study three different ways of partitioning the set of all triples of costs into distinct types."}, {"heading": "3.4.1 Classification with respect to Order", "text": "The set of possible cost types is D = {4, <,>,=}, where these four types are defined in the following table:\nSymbol Costs Remark 4 {\u03b1, \u03b2, \u03b3} \u03b1, \u03b2, \u03b3 \u2208 \u2126, \u03b1 6= \u03b2 6= \u03b3 6= \u03b1 < {\u03b1, \u03b1, \u03b2} \u03b1, \u03b2 \u2208 \u2126, \u03b1 < \u03b2 > {\u03b1, \u03b1, \u03b2} \u03b1, \u03b2 \u2208 \u2126, \u03b1 > \u03b2 = {\u03b1, \u03b1, \u03b1} \u03b1 \u2208 \u2126\nAs AQ+(D) allows all finite-valued VCSPs, it is intractable even over a Boolean domain (Cohen, Cooper, Jeavons, & Krokhin, 2006) as it includes the Max-SAT problem for the exclusive or predicate (Papadimitriou & Yannakakis, 1991; Creignou, Khanna, & Sudan, 2001).\nProposition 3.23. AQ+(D) is intractable unless |D| \u2264 1.\nThe joint-winner property (Cooper & Z\u030civny\u0301, 2011b) for finite-valued VCSPs gives\nCorollary 3.24 (of Theorem 3.1). AQ+({<,=}) is tractable.\nProposition 3.25. AQ+({4}) is intractable unless |D| \u2264 1.\nProof. We show a reduction from Max-Cut, a well-known NP-hard problem (Garey & Johnson, 1979). An instance of Max-Cut can be easily modelled as a Boolean finite-valued VCSP instance: every vertex of the graph is represented by a variable with the Boolean domain {0, 1}, and every edge yields cost function f , where f(x, y) = 1 if x = y and f(x, y) = 0 if x 6= y. However, the constructed instance does not belong to AQ+({4}). Nevertheless, we can amend the VCSP instance by infinitesimal perturbations: all occurrences of the cost 0 are replaced by different numbers that are very close to 0, and all occurrences of the cost 1 are replaced by different numbers very close to 1. Now since all the costs are different, clearly the instance belongs to AQ+({4}).\nProposition 3.26. AQ+({>}) is intractable unless |D| \u2264 1.\nProof. We prove this by a perturbation of the construction in the proof of Proposition 3.17, which shows intractability of AQ+({>,=}). In order to simplify the proof, similarly to the proof of Proposition 3.17, we prove that maximising the total cost in the class AQ+({<}) is NP-hard.\nIn the construction in the proof of Proposition 3.17 we add i to each binary cost cij(a, b), where i < j, if cij(a, b) was equal to 1. We assume that is very small (n < 1). This simply\nensures that each triple of costs {1, 1, 1} in a triangle of assignments is now perturbed to become {1 + i , 1 + i , 1 + j }.\nIn the reduction from Max-2SAT, for each literal l, let Cl be the set of all variablevalue assignments corresponding to l (in both the xji and the zk variables). Recall that all binary costs for pairs of the assignments within Cl were 1 and all binary costs for pairs of the assignments from distinct Cl, Cl\u2032 were all 0 in the VCSP encoding of the Max-2SAT instance. We place an arbitrary ordering on the literals l1 < l2 < \u00b7 \u00b7 \u00b7 < lr. We then add i to each binary cost between two variable-value assignments whenever these assignments correspond to literals li, lj with i < j. This simply ensures that each triple of costs {0, 0, 0} in a triangle of assignments is now perturbed to become {0 + i , 0 + i , 0 + j }.\nThe resulting VCSP instance is in AQ+({>}) and correctly codes the original Max-2SAT instance for sufficiently small .\nResults from this section, together with Proposition 3.3, complete the complexity classification, as depicted in Figure 3: white nodes represent tractable cases and shaded nodes represent intractable cases.\nTheorem 3.27. For |D| \u2265 2, a class of binary finite-valued VCSP instances defined as AQ+(S), where S \u2286 {4, <,>,=}, is tractable if and only if S \u2286 {<,=}."}, {"heading": "3.4.2 Classification with respect to Minimum Cost", "text": "The tractable classes A{0,1}({>, 1}), A{0,1}({>, 0}) and A{0,1}({<,>}) appear in Figure 2, but do not appear as subclasses of the tractable classes AQ+(S) identified in Figure 3. This is due to the fact that for the infinite set of possible costs \u2126 = Q+, Figure 3 covers only a subset of the infinite number of possible restrictions on triples of costs in triangles. We now consider triples of costs which allow us to find generalisations of these three tractable classes to finite-valued VCSPs, by considering restrictions depending on the relationship of costs with the minimum or maximum binary cost in an instance.\nWe start with the minimum cost. Without loss of generality we can assume that the minimum binary cost of an instance is 0. We consider the following types of triples of costs:\nSymbol Costs Remark 40 {\u03b1, \u03b2, 0} \u03b1, \u03b2 \u2208 \u2126, \u03b1 > \u03b2 > 0 <0 {0, 0, \u03b1} \u03b1 \u2208 \u2126, \u03b1 > 0 >0 {\u03b1, \u03b1, 0} \u03b1 \u2208 \u2126, \u03b1 > 0 0 {0, 0, 0}\nFor simplicity of presentation, we do not consider the remaining type of triples of costs, namely {\u03b1, \u03b2, \u03b3} such that \u03b1, \u03b2, \u03b3 > 0. Since it is possible to transform any VCSP instance into an equivalent instance with non-zero costs by adding a constant > 0 to all binary costs, it is clear that allowing all such triples of costs would render the VCSP intractable.\nThe complexity of combinations of costs from {40, <0, >0, 0} are shown in Figure 4: white nodes represent tractable cases and shaded nodes represent intractable cases.\nProposition 3.28. AQ+({>0, 0}) is tractable.\nProof. Observe that either all non-zero binary costs involve the same variable vk (i.e. cij = 0 for all i, j 6= k) or there is only one distinct cost \u03b1 > 0 in the instance. (Otherwise, if there are two distinct \u03b1 6= \u03b2 non-zero costs \u03b1, \u03b2 > 0 in the instance such that cij(a, b) = \u03b1 and ckl(c, d) = \u03b2 for distinct i, j, k, l, then it is easy to verify that it is not possible to assign costs to cik(a, c), cil(a, d), cjk(b, c), cjl(b, d) so that all triangles have cost types >0 or 0.) This implies that AQ+({>0, 0}) is equivalent to A{0,1}({>, 0}) after the instantiation of at most one variable.\nCorollary 3.29 (of Theorem 3.1). AQ+({<0, 0}) is tractable.\nProposition 3.30. AQ+({40, <0, >0}) is tractable.\nProof. Analogously to the Ramsey type argument in the proof of Proposition 3.15, any instance on more than 5 variables must contain either a triangle of zero costs or a triangle of three non-zero costs and hence cannot belong to AQ+({40, <0, >0}).\nProposition 3.31. AQ+({<0, >0, 0}) is intractable unless |D| \u2264 1.\nProof. By reduction from Max-Cut on triangle-free graphs as in the proof of Proposition 3.18\nProposition 3.32. AQ+({40, 0}) is intractable unless |D| \u2264 1.\nProof. It has been shown that the VCSP remains intractable on bipartite graphs and Boolean domains (Cooper & Z\u030civny\u0301, 2011b). Let I be such an instance with a partition V1,V2 of the variables. Insignificantly small but distinct costs can be added to all binary costs in I between variables i \u2208 V1 and j \u2208 V2 to ensure that all triangles are of type 40 or 0.\nTheorem 3.33. For |D| \u2265 2, a class of binary finite-valued VCSP instances defined as AQ+(S), where S \u2286 {40, <0, >0, 0}, is tractable if and only if S \u2286 {<0, 0}, S \u2286 {>0, 0} or S \u2286 {40, <0, >0}."}, {"heading": "3.4.3 Classification with respect to Maximum Cost", "text": "Let M \u2208 Q+ be any cost and consider the following types of triples of costs:\nSymbol Costs Remark 4M {\u03b1, \u03b2,M} \u03b1, \u03b2 \u2208 \u2126, \u03b1 < \u03b2 < M <M {\u03b1, \u03b1,M} \u03b1 \u2208 \u2126, \u03b1 < M >M {\u03b1,M,M} \u03b1 \u2208 \u2126, \u03b1 < M M {M,M,M}\nAgain, we do not consider the remaining type of triples of costs, namely {\u03b1, \u03b2, \u03b3} such that \u03b1, \u03b2, \u03b3 < M , since allowing such triples of costs renders the VCSP intractable. If {4M , <M , >M ,M} are the only allowed combinations of triples of costs, then M is clearly the maximum binary cost in the instance.\nThe complexity of combinations of costs from {4M , <M , >M ,M} are depicted in Figure 5: white nodes represent tractable cases and shaded nodes represent intractable cases.\nThe most interesting case is AQ+({>M ,M}), which turns out to be tractable by a reduction to maximum weighted matching and hence is a proper generalization of class A{0,1}({>, 1}).\nProposition 3.34. AQ+({>M ,M}) is tractable.\nProof. The proof is similar to the proof of Proposition 3.20. Consider an instance I in AQ+({>M ,M}), and let\n\u03b1ij = min{ci(u) + cij(u, v) + cj(v) | u \u2208 Di, v \u2208 Dj}\nwith the minimum being attained when u = aji and v = a i j . We can assume, without loss of generality, that the unary cost functions satisfy \u2200i, \u2203di \u2208 Di such that ci(di) = 0 (by subtracting, if necessary, min ci(u) from the unary cost function ci). This implies that \u03b1ij \u2264 cij(di, dj) \u2264M .\nSuppose that (bi, bj) 6= (aji , aij) and cij(bi, bj) < M . Then we can replace (bi, bj) by (aji , a i j) in any solution to produce a solution of no greater cost: this is because all other binary costs involving bi or bj are necessarily maximal (i.e. equal to M). Therefore, setting cij(bi, bj) = M does not change the cost of an optimal solution to the instance I. It follows that we can assume that there is at most one non-maximal binary cost cij(a j i , a i j) in each binary cost function cij . Consider the weighted complete graph G with vertices 1, . . . , n and edge weights M\u2212\u03b1ij . Let MG be a maximum weighted matching of G. Define a solution x = \u3008x1, . . . , xn\u3009 to I by\nxi = { aji if {i, j} \u2208MG di otherwise .\nThis solution is well-defined since MG is a matching. The weight of MG is\u2211 {i,j}\u2208MG (M \u2212 \u03b1ij) = ( n 2 ) M \u2212 cost(x).\nOn the other hand, consider any solution y to I. Let\nE(y) = {{i, j} | yi = aji \u2227 yj = a i j \u2227 \u03b1ij < M}.\nE(y) is a matching of G of weight\u2211 {i,j}\u2208E(y) (M \u2212 \u03b1ij) \u2265 ( n 2 ) M \u2212 cost(y).\nSince MG is a maximum weighted matching, we can deduce that cost(y) \u2265 cost(x). Hence x is an optimal solution.\nTractability follows from the tractability of the maximum weighted matching problem (Edmonds, 1965a).\nRemark 3.35. We have seen in the proof of Proposition 3.34 that AQ+({>M ,M}) is tractable via a reduction to the maximum weighted matching problem (Edmonds, 1965a).\nSimilarly to Remark 3.21, it is easy to show that, conversely, any instance of the maximum weighted matching problem can be modelled as a VCSP instance fromAQ+({>M ,M}).\nCorollary 3.36 (of Theorem 3.1). AQ+({<M ,M}) is tractable.\nProposition 3.37. AQ+({4M , <M , >M}) is tractable.\nProof. Analogously to the proof of Proposition 3.30, instances contain at most 5 variables.\nProposition 3.38. AQ+({<M , >M ,M}) is intractable unless |D| \u2264 1.\nProof. By reduction from Max-Cut as in the proof of Proposition 3.18\nProposition 3.39. AQ+({4M ,M}) is intractable unless |D| \u2264 1.\nProof. We will show intractability by reduction from VCSP on bipartite graphs and with Boolean domains which is known to be NP-hard (Cooper & Z\u030civny\u0301, 2011b). It suffices to replace all zero costs by M in the reduction from VCSP on bipartite graphs given in the proof of Proposition 3.32 to produce an equivalent instance in AQ+({4M ,M}).\nTheorem 3.40. For |D| \u2265 2, a class of binary finite-valued VCSP instances defined as AQ+(S), where S \u2286 {4M , <M , >M ,M}, is tractable if and only if S \u2286 {<M ,M} or S \u2286 {>M ,M} or S \u2286 {4M , <M , >M}."}, {"heading": "3.5 General-Valued VCSP", "text": "In this section, we focus on general-valued VCSPs. In other words, we consider the complete valuation structure Q+ as the set of possible costs \u2126. In fact, the complexity classifications coincide with the classifications for finite-valued VCSPs obtained in Section 3.4.\nTheorem 3.27 applies to \u2126 = Q+ as well. Indeed, the hard cases remain intractable when we allow more triangles (involving infinite costs), and the only tractable case, AQ+({<,=}), remains tractable: AQ+({<,=}) is tractable by Theorem 3.1.\nTheorem 3.41. For |D| \u2265 2, a class of binary general-valued VCSP instances defined as AQ+(S), where S \u2286 {4, <,>,=}, is tractable if and only if S \u2286 {<,=}.\nSimilarly with Theorem 3.33. Indeed, intractable cases remain intractable, and tractable cases remain tractable.\nTheorem 3.42. For |D| \u2265 2, a class of binary general-valued VCSP instances defined as AQ+(S), where S \u2286 {4\n0, <0, >0, 0}, is tractable if and only if S \u2286 {<0, 0}, S \u2286 {>0, 0} or S \u2286 {40, <0, >0}.\nSimilarly with Theorem 3.40. Indeed, intractable cases remain intractable, and tractable cases remain tractable. (The class AQ+({>\nM ,M}) becomes trivially tractable if M = \u221e as there is no solution of finite cost in instances with more than two variables.)\nTheorem 3.43. For |D| \u2265 2, a class of binary general-valued VCSP instances defined as AQ+(S), where S \u2286 {4\nM , <M , >M ,M}, is tractable if and only if S \u2286 {<M ,M} or S \u2286 {>M ,M} or S \u2286 {4M , <M , >M}."}, {"heading": "4. Cross-Free and Convex VCSPs", "text": "In Section 3, we studied the computational complexity of several classes of binary VCSPs. In all considered cases, the joint-winner property (JWP) was either the only one or one of only a few tractable cases.\nIn this section, we will generalise JWP to the cross-free convexity property (CFC). This property defines a novel tractable class for which we describe an efficient algorithm. In Section 4.4, we show that the neither of the two conditions in the definition of the CFC\nproperty can be dropped without rendering the problem NP-hard. Moreover, in Section 4.5, we present an extension of the CFC over Boolean domains. Section 4.6 is devoted to a related idea of overlaps studied previously only for SAT and Max-SAT."}, {"heading": "4.1 Definition and Examples of Cross-Free and Convex VCSPs", "text": "A function g : {0, . . . , s} \u2192 Q+ is called convex on the interval [l, u] if g is finite-valued on the interval [l, u] and the derivative of g is non-decreasing on [l, u], i.e. g(m+2)\u2212g(m+1) \u2265 g(m+ 1)\u2212 g(m) for all m = l, . . . , u\u2212 2. For brevity, we will often say that g is convex if it is convex on some interval [l, u] \u2286 [0, s] and infinite elsewhere (i.e. on [0, l \u2212 1] \u222a [u+ 1, s]).\nTwo sets A1, A2 \u2286 A are said to be nested if they are either disjoint or one is a subset of the other (i.e. A1 \u2229A2 = \u2205, A1 \u2286 A2 or A2 \u2286 A1). If A1 and A2 are not nested, then we say that they overlap. We say that A1 and A2 incompletely overlap if A1 and A2 overlap and A1 \u222aA2 6= A.\nSets A1, . . . , Ar are called laminar (Schrijver, 2003) (or hierarchically nested ; see Cooper & Z\u030civny\u0301, 2011a) if for any 1 \u2264 i, j \u2264 r, Ai and Aj are nested. Sets A1, . . . , Ar \u2286 A are called cross-free if for every 1 \u2264 i, j \u2264 r, either Ai \u2286 Aj , or Ai \u2287 Aj , or Ai \u2229 Aj = \u2205, or Ai\u222aAj = A (Schrijver, 2003). It is clear that if sets A1, . . . , Ar are laminar, then A1, . . . , Ar are also cross-free.\nFor notational convenience, we interpret a solution x (i.e. an assignment to the variables v1, . . . , vn) to a VCSP instance as the set of \u3008variable,value\u3009 assignments {\u3008vi, xi\u3009 | xi \u2208 Di \u2227 i = 1, . . . , n}.\nIf Ai is a set of \u3008variable,value\u3009 assignments of a VCSP instance P and x a solution to P, then we use the notation |x\u2229Ai| to represent the number of \u3008variable,value\u3009 assignments in the solution x which lie in Ai.\nDefinition 4.1 (Laminar/Cross-free convexity). Let P be a VCSP instance. Let A1, . . . , Ar be laminar (cross-free) sets of \u3008variable,value\u3009 assignments of P. Let si be the number of distinct variables occurring in the set of \u3008variable,value\u3009 assignments Ai. Instance P satisfies the laminar-free (cross-free) convexity property if the objective function of P is g(x) = g1(|x \u2229A1|) + . . .+ gr(|x \u2229Ar|) where each gi : [0, si]\u2192 Q+ (i = 1, . . . , r) is convex on an interval [li, ui] \u2286 [0, si] and gi(z) =\u221e for z \u2208 [0, li \u2212 1] \u222a [ui + 1, si].\nWe remark that the functions gi in Definition 4.1 are not the cost functions associated with the constraints.\nIt follows from the definition that the laminar convexity property implies the cross-free convexity property.\nRemark 4.2. Observe that the addition of any unary cost function cannot destroy the laminar or cross-free convexity property. This is because for each \u3008variable,value\u3009 assignment \u3008vj , a\u3009 we can add the singleton Ai = {\u3008vj , a\u3009} which is necessarily either disjoint from or a subset of any other set Ak (and furthermore the corresponding function gi : {0, 1} \u2192 Q+ is trivially convex).\nWe now give a very special case of the cross-free convexity property, where all sets are disjoint and thus trivially cross-free.\nExample 4.3 (Value-based soft GCC). The Global Cardinality Constraint (GCC), introduced by Re\u0301gin (1996), is a generalisation of the AllDifferent constraint (Re\u0301gin, 1994). Given a set of n variables, the GCC specifies for each domain value d a lower bound ld and an upper bound ud on the number of variables that are assigned value d. The AllDifferent constraint is the special case of GCC with ld = 0 and ud = 1 for every d. Soft versions of the GCC have been considered by van Hoeve, Pesant, & Rousseau (2006).\nThe value-based soft GCC minimises the number of values below or above the given bound. We show that the value-based soft GCC satisfies the cross-free convexity property.\nFor every domain value d \u2208 D, let Ad = {\u3008vi, d\u3009 : i = 1, . . . , n}. Clearly, A1, . . . , As are disjoint, where s = |D|. For every d, let\ngd(m) =  ld \u2212m if m < ld 0 if ld \u2264 m \u2264 ud m\u2212 ud if m > ud\nIt follows readily from the definition of gd that the sequence gd(m + 1) \u2212 gd(m), for m = 0, . . . , n \u2212 1, is the sequence \u22121, . . . ,\u22121, 0, . . . , 0, 1, . . . , 1. Therefore, for every d, gd has a non-decreasing derivative and hence is convex.\nExample 4.4 (Nested value-based soft GCC). Being able to nest GCC constraints is useful in many staff assignment problems where there is a hierarchy (e.g. senior manager-managerpersonnel, foreman-worker, or senior nurse-nurse) (Zanarini & Pesant, 2007). We might want to impose soft global cardinality constraints such as each day we prefer that there are between 10 and 15 people at work, of which at least 5 are managers among whom there is exactly 1 senior manger, with convex penalties as described in Example 4.3 if these constraints do not hold.\nSuppose that the constraints of a VCSP instance consist of soft GCC constraints on pairwise nested sets of variables S1, . . . , St. Let Aid = {\u3008x, d\u3009 : x \u2208 Si}. Clearly, the sets of assignments Aid are cross-free and, as shown in Example 4.3, the cost functions corresponding to each soft GCC constraint are convex.\nThe main result of this section is the following theorem:\nTheorem 4.5. Any VCSP instance P satisfying the cross-free convexity property can be solved in polynomial time.\nFirstly, we present an algorithm to solve VCSPs satisfying the laminar convexity property, followed by a reduction from the cross-free case to the laminar case. Secondly, we give a proof of polynomial-time complexity of this algorithm."}, {"heading": "4.2 Algorithm for Laminar Convex VCSPs", "text": "We call the sets Ai (i = 1, . . . , r) assignment-sets. We assume that the assignment-sets Ai are distinct, since if Ai = Aj then these two sets can be merged by replacing the two functions gi,gj by their sum (which is necessarily also convex). Without loss of generality, we can assume that the assignment-set consisting of all variable-value assignments is present, and the corresponding function is the constant zero function. (If the corresponding function\ngi is not the constant zero function, then we just add the constant term gi(n) to the objective function.) This will be useful in the construction described below. We say that assignmentset Ak is the father of assignment-set Ai if it is the minimal assignment-set which properly contains Ai, i.e. Ai \u2282 Ak and @Aj such that Ai \u2282 Aj \u2282 Ak. It follows from the definition of laminarity that Ak is unique and hence that the father relation defines a tree. Moreover, again from the definition of laminarity, for every variable vi of P and every a \u2208 Di, there is a unique minimal assignment-set containing \u3008vi, a\u3009.\nWe construct a directed graph GP whose minimum-cost integral flows of value n are in one-to-one correspondence with the solutions to P. GP has the following nodes:\n1. the source node s;\n2. a variable node vi (i = 1, . . . , n) for each variable of P;\n3. an assignment node \u3008vi, d\u3009 (d \u2208 Di, i = 1, . . . , n) for each possible variable-value assignment in P;\n4. an assignment-set node Ai (i = 1, . . . , r) for each assignment-set in P;\n5. the sink node t, which we identify with the assignment-set consisting of all variablevalue assignments.\nGP has the following arcs:\n1. a = (s, vi) for each variable vi of P; the demand and capacity are given by d(a) = c(a) = 1 (this forces a flow of exactly 1 through each variable node vi); the weight function is given by w(a) = 0;\n2. a = (vi, \u3008vi, d\u3009) for all variables vi and for each d \u2208 Di; d(a) = 0; c(a) = 1; w(a) = 0;\n3. a = (\u3008vi, d\u3009, Aj) for all variables vi and for each d \u2208 Di, where Aj is the minimal assignment-set containing \u3008vi, d\u3009; d(a) = 0; c(a) = 1; w(a) = 0;\n4. for each assignment-set Ai with father Aj , there is an arc a from Ai to Aj with weight function gi, demand d(a) = li and capacity c(a) = ui.\nClearly, GP can be constructed from P in polynomial time. We now prove that minimum-cost flows f of value n in GP are in one-to-one correspondence with solutions to P and, furthermore, that the cost of f is equal to the cost in P of the corresponding solution.\nAll feasible flows have value n since all n arcs (s, vi) leaving the source have both demand and capacity equal to 1. Flows in GP necessarily correspond to the assignment of a unique value xi to each variable vi since the flow of 1 through node vi must traverse a node \u3008vi, xi\u3009 for some unique xi \u2208 Di. It remains to show that for every assignment x = {\u3008v1, x1\u3009, . . . , \u3008vn, xn\u3009} which is feasible (i.e. whose cost in P is finite), there is a corresponding minimum-cost feasible flow f in GP of cost g(x) = g1(|x\u2229A1|)+ . . .+gr(|x\u2229 Ar|).\nFor each arc a that is incoming to or outgoing from \u3008vi, d\u3009 in GP , let f(a) = 1 if d = xi and 0 otherwise. By construction, each assignment-set node Ai in GP has exactly\none outgoing arc to its father assignment-set. The flow fa in arc a from Ai to its father assignment-set Aj is uniquely determined by the assignment of values to variables in the solution x. Trivially, this is therefore a minimum-cost flow corresponding to the assignment x. The cost of flow f is clearly \u2211 i gi(|x \u2229 Ai|) which corresponds precisely to the cost of the assignment x. Having proved the correspondence between the cost of solutions to P and the cost of minimum-cost flows, it follows that the algorithm, which for given P constructs GP and finds a minimum-cost flow, is correct.\nExample 4.6. Let P be a VCSP instance with 4 variables v1, v2, v3, v4, D1 = D2 = D3 = D4 = {0, 1}, and the assignment-sets Ai, 1 \u2264 i \u2264 8 given in Figure 6. The cost functions gi, 1 \u2264 i \u2264 8 are arbitrary convex functions.\nThe network GP corresponding to instance P is shown in Figure 7: demands and capacities are in square brackets for the corresponding layer of the graph, and weights of arcs without numbers are 0. The only non-zero weight functions are on arcs between assignment-sets; those arcs have the corresponding cost functions gi, 1 \u2264 i \u2264 7. Set A8 is identified with the sink t. Minimum-cost feasible flows in GP correspond to assignments to P modulo the addition of the constant g8(4) (since there are 4 variables and A8 consists of all variable-value assignments). The bold red edges represent flow f corresponding to the assignment v1 = v2 = 1 and v3 = v4 = 0 with the total cost g1(1) + g2(0) + g3(2) + g4(1) + g5(0) + g6(1) + g7(3). Finding a minimum-cost flow in GP is equivalent to finding an optimal solution to P."}, {"heading": "4.3 From Laminar VCSPs to Cross-Free VCSPs", "text": "An alternative way of expressing the definition of cross-freeness is that for every 1 \u2264 i, j \u2264 r, one of Ai \u2229 (A \\Aj), (A \\Ai)\u2229Aj , Ai \u2229Aj , (A \\Ai)\u2229 (A \\Aj) is empty. It follows directly that if A1, . . . , Ar are cross-free then so are A1, . . . , Ar, (A \\Ai) for any 1 \u2264 i \u2264 r.\nWe now show how to reduce any VCSP instance with the cross-free convexity property to an instance satisfying the laminar convexity property.\nFirst we show that without loss of generality, we can assume that every Ai satisfies |Ai| \u2264 b|A|/2c, 1 \u2264 i \u2264 r. Let Ai be arbitrary such that |Ai| > b|A|/2c. As pointed out above, without loss of generality there is Aj , 1 \u2264 j \u2264 r, such that Aj = A \\ Ai. (If there is no such Aj among A1, . . . , Ar, we can add Aj with the corresponding convex cost function being the constant zero cost function. This would only double the number of assignment-sets.)\nLet hi be defined by hi(y) = gi(n \u2212 y) and let g\u2032j = gj + hi. Clearly g\u2032j is convex, and furthermore\ng\u2032j(|Aj \u2229 x|) = gj(|Aj \u2229 x|) + hi(|Aj \u2229 x|) = gj(|Aj \u2229 x|) + gi(n\u2212 |Aj \u2229 x|) = gj(|Aj \u2229 x|) + gi(|A \u2229 x| \u2212 |Aj \u2229 x|) = gj(|Aj \u2229 x|) + gi(|Ai \u2229 x|).\nSo we can eliminate the set Ai and its cost function gi by replacing gi, gj by a single cost function g\u2032j .\n[1, 1] [0, 1] [0, 1] [li, ui] [li, ui]\nSince all sets are at most half of the size of A, if Ai \u222aAj = A for some 1 \u2264 i, j \u2264 r, then necessarily Aj = A \\Ai. However, in this case, using the same argument as above, for each such pair of complementary sets Ai and Aj , we can eliminate Ai and its cost function gi by replacing gi, gj by a single cost function g\u2032j . Consequently, the resulting sets A1, . . . , Ar are laminar.\nComplexity Let P be a VCSP instance with n variables, each with a domain of size at most d, and r laminar assignment-sets Ai. The maximum number of distinct nonoverlapping sets Ai is 2nd\u2212 1 since the sets of assignments Ai form a tree with at most nd leaves (corresponding to single \u3008variable,value\u3009 assignments) and in which all non-leaf nodes have at least two sons. Thus r = O(nd). The network GP has n\u2032 = O(n+ nd+ r) = O(nd) vertices and arcs. GP can be built in O((nd)2) time in a top-down manner, by adding assignment-sets in inverse order of size (which ensures that an assignment-set is always inserted after its father) and using a table T [\u3008v, a\u3009]=smallest assignment-set (in the tree being built) containing \u3008v, a\u3009.\nIn a network with n\u2032 vertices and m\u2032 arcs with capacities at most U , the minimum convex cost flow problem can be solved in time O((m\u2032 logU)SP (n\u2032,m\u2032)), where SP (n\u2032,m\u2032) is the time to compute a shortest directed path in a network with n\u2032 vertices and m\u2032 edges (Ahuja, Magnanti, & Orlin, 2005). Using Fibonacci heaps (Fredman & Tarjan, 1987), SP (n\u2032,m\u2032) = O(m\u2032 + n\u2032 log n\u2032) = O(nd log(nd)), since the number of vertices n\u2032 and arcs m\u2032 are both O(nd). The maximum capacity U in the network GP is at most n. Hence an optimal solution to a cross-free convex VCSP can be determined in O((nd log n)(nd log(nd))) = O((nd)2(log n)(log n+ log d)) time.\nRemark 4.7. In our previous work (Cooper & Z\u030civny\u0301, 2011b), we proved a special case of Theorem 4.5 where all functions gi, 1 \u2264 i \u2264 r, are non-decreasing and assignment sets are laminar. (Previously, the laminar convexity property for non-decreasing functions gi, 1 \u2264 i \u2264 r, was called the non-overlapping convexity property; also, assignment-sets were called assignment-cliques; see Cooper & Z\u030civny\u0301, 2011b.)\nThe presented algorithm is similar to the algorithm of Cooper & Z\u030civny\u0301 (2011b) based on finding a minimum-cost flow in a network. The main difference is that we require only a single arc between any pair of nodes and the corresponding cost function gi is now an arbitrary convex function (which is not necessarily non-decreasing). The running time of our algorithm is thus better than the running time of the algorithm from our previous work (Cooper & Z\u030civny\u0301, 2011b), which is O(n3d2). The improvement is mostly due to the fact that the new construction involves only O(nd) arcs as opposed to O((nd)2) arcs in the previous work (Cooper & Z\u030civny\u0301, 2011b). Moreover, our algorithm solves a strictly bigger class of problems compared to the previous result (Cooper & Z\u030civny\u0301, 2011b). Overall, we solve more and faster!\nRemark 4.8. We remark that since our construction is projection-safe (Lee & Leung, 2009), it can be used for Soft Global Arc Consistency for cross-free convex constraints.\nRemark 4.9. For a VCSP instance P with the objective function of the form g(x) =\u2211r i=1 gi(|x\u2229Ai|), it follows from the definitions that we can test in polynomial time whether or not P satisfies the cross-free convexity property; that is, whether gi are convex and Ai are\ncross-free, for 1 \u2264 i \u2264 r. In fact, the described algorithm requires that the assignment-sets Ai and the functions gi be given explicitly.\nIn the conference version of this work (Cooper & Z\u030civny\u0301, 2011a), we mentioned the recognition problem as an open problem. In fact, this problem is easily shown intractable. Given an arbitrary VCSP instance P, there always exists a cross-free convex instance P \u2032 whose optimal solution coincides with a fixed optimal solution to P. Therefore, finding P \u2032 is impossible in polynomial time unless P=NP as otherwise an arbitrary VCSP instance P could be solved in polynomial time using Theorem 4.5."}, {"heading": "4.4 Maximality of Cross-Free Convexity", "text": "This section shows that relaxing either convexity or cross-freeness (in fact, laminarity) in Definition 4.1 leads to intractability.\nTheorem 4.10. The class of VCSP instances whose objective function is of the form g(x) = g1(|x\u2229A1|)+ . . .+gr(|x\u2229Ar|) where the functions gi are convex, but the sets of assignments Ai may overlap, is NP-hard, even if |Ai| \u2264 2 for all i \u2208 {1, . . . , r} and all variables are Boolean.\nProof. It suffices to demonstrate a polynomial-time reduction from the well-known NP-hard problem Max-2SAT (Garey & Johnson, 1979). Any Max-2SAT clause l1 \u2228 l2 (where l1, l2 are literals) is equivalent to the convex cost function g(|x \u2229 {l1, l2}|) where g(0) = 1 and g(1) = g(2) = 0. It is therefore possible to code any instance of Max-2SAT using convex cost functions (on possibly overlapping sets of assignments).\nTheorem 4.11. The class of VCSP instances whose objective function is of the form g(x) = g1(|x \u2229 A1|) + . . . + gr(|x \u2229 Ar|) where the sets of assignments Ai are laminar, but the functions gi are not necessarily convex, is NP-hard even if |Ai| \u2264 3 for all i \u2208 {1, . . . , r} and all variables are Boolean.\nProof. We give a polynomial-time reduction from the well-known NP-complete problem 3SAT (Garey & Johnson, 1979). Let I3SAT be an instance of 3SAT with m clauses. The constraint AllEqual(l1, l2, l3) (where l1, l2, l3 are literals) is equivalent to the (nonconvex) cost function g(|x \u2229 {l1, l2, l3}|) where g(0) = g(3) = 0 and g(1) = g(2) = \u221e. For each variable v in I3SAT , we use the following gadget Gv based on non-overlapping AllEqual constraints to produce multiple copies v1, . . . , vm of the variable v and multiple copies w1, . . . , wm of its negation v: Gv consists of the constraints AllEqual(ui, vi, yi) (i \u2208 {1, . . . ,m}), AllEqual(yi, wi, ui+1) (i \u2208 {1, . . . ,m\u22121}), and AllEqual(ym, wm, u1), where the variables ui, yi occur only in the gadget Gv. It is easy to verify that Gv imposes v1 = . . . = vm = w1 = . . . = wm. Furthermore, the variables vi, wi occur only negatively in Gv. We now replace the ith clause of I3SAT by a clause in which each positive variable v is replaced by its ith copy vi and each negative variable v is replaced by the ith copy wi of v. This produces a laminar VCSP instance which is equivalent to I3SAT (but whose cost functions are not all convex).\nNote that the NP-hardness reduction in the proof of Theorem 4.11 requires assignmentsets of size up to 3. This leaves open the complexity of laminar (and cross-free) non-convex VCSPs where all assignment-sets are of size at most 2.\nThe following result shows that the complexity of cross-free non-convex VCSPs with assignment-sets of size 2 and domains of size d is polynomial-time equivalent to cross-free non-convex VCSPs with assignment-sets of size 2 and domains of size at most 3.\nProposition 4.12. Cross-free VCSPs with assignment-sets of size at most 2 and domains of size d > 3 are polynomial-time equivalent to cross-free VCSPs with assignment-sets of size at most 2 and domains of size at most 3.\nProof. First we observe that for VCSPs with assignment-sets of size at most 2, laminarity and cross-freeness are almost identical. The extra condition in the definition of cross-freeness (for A1, A2 \u2286 A, A1 \u2229 A2 6= \u2205 \u21d2 A1 \u222a A2 = A) is irrelevant for instances with more than 3 variable-value assignments. Hence we only need to prove the equivalence for laminar VCSPs.\nLet v` be such that D` = {a1, . . . , ak}, where k > 3. We replace v` by k variables v`,1, . . . , v`,k with respective domains D`,1 = {1, a1}, D`,i = {0, 1, ai} for i = 2, . . . , k \u2212 1, and D`,k = {0, ak}. (Here we assume, without loss of generality, that 0 and 1 are different from ai, i = 1, . . . , k.) Moreover, we introduce k\u22121 new assignment-sets {\u3008v`,i, 1\u3009, \u3008v`,i+1, 0\u3009} for i = 1, . . . , k \u2212 1 with the associated convex function g defined as g(1) = 0 and g(0) = g(2) = \u221e. Finally, in any assignment-set involving the variable-value assignment \u3008v`, ai\u3009 (for some i \u2208 {1, . . . , k}), this assignment is replaced by \u3008v`,i, ai\u3009.\nThe function g applied to the assignment-sets {\u3008v`,i, 1\u3009, \u3008v`,i+1, 0\u3009} ensures that the only possible finite-cost assignments to variables v`,1, . . . , v`,k are of the form 1, . . . , 1, ai, 0, . . . , 0. Since exactly one of the variables v`,1, . . . , v`,k is assigned a value from D`, there is a one-toone correspondence between optimal solutions to the transformed instance and the original instance.\nThe tractability of cross-free non-convex VCSPs with assignment-sets of size 2 over domains of size 3 (or larger, by Proposition 4.12) is left as an open problem.\nThe case of cross-free assignment-sets of size at most 2 over Boolean domains is shown tractable in Theorem 4.21 in Section 4.6."}, {"heading": "4.5 Renamable Boolean Cross-Free Convex VCSPs", "text": "In this section we extend the class of cross-free convex VCSPs to allow renaming of certain variables in the case of Boolean domains. In this section we will consider only Boolean VCSPs.\nWe begin by illustrating the notion of renaming by means of an example. First, we require some notation. Cost function AtMostr(A) returns 0 if x contains at most r assignments from the set of assignments A, and AtMostr(A) returns 1 otherwise. Similarly, cost function AtLeastr(A) returns 0 if x contains at least r assignments from the set of assignments A, and AtLeastr(A) returns 1 otherwise. Note that cost functions AtLeast1 and AtMostr, where r = |A| \u2212 1, are both convex on [0, |A|].\nExample 4.13. Let P be a Max-SAT instance given in CNF form by the following clauses:\n(a \u2228 b \u2228 c), (c \u2228 d), (\u00acc \u2228 \u00acd \u2228 e), (\u00aca \u2228 \u00ace).\nClearly, a clause with literals A can be written as AtLeast1(A) in the VCSP encoding of this instance. Notice that, in this example, the first two clauses are overlapping. However, we can replace the second clause by the equivalent constraint AtMost1({\u00acc,\u00acd}). This gives us an equivalent problem with the following constraints:\n(a \u2228 b \u2228 c), AtMost1({\u00acc,\u00acd}), (\u00acc \u2228 \u00acd \u2228 e), (\u00aca \u2228 \u00ace).\nNow P is expressed as an instance satisfying the cross-free convexity property on the crossfree sets of assignments {a, b, c}, {\u00acc,\u00acd}, {\u00acc,\u00acd, e}, {\u00aca,\u00ace}.\nExample 4.13 leads to the following definitions:\nDefinition 4.14. Given a valued constraint in the form of the cost function g(|x \u2229 A|), where A is a set of Boolean assignments (i.e. literals) of size m, we define the renaming of this valued constraint, on the set of Boolean assignments A\u0304 = {\u00ac` | ` \u2208 A}, as the valued constraint g\u2032(|x \u2229 A\u0304|) = g(m\u2212 |x \u2229 A\u0304|) = g(|x \u2229A|).\nThe function g\u2032(z) = g(m\u2212 z) is clearly convex if and only if g is convex.\nDefinition 4.15. A Boolean VCSP instance P with the objective function g1(|x \u2229 A1|) + . . .+ gr(|x \u2229Ar|) is renamable cross-free convex if there is a subset of the constraints of P whose renaming results in an equivalent VCSP instance P \u2032 which is cross-free convex.\nTheorem 4.16. The class of renamable cross-free convex VCSPs is recognisable and solvable in polynomial time.\nProof. We show that recognition is polynomial-time by a simple reduction to 2-SAT, a well-known problem solvable in polynomial time (Garey & Johnson, 1979). Let P be a Boolean VCSP instance with r constraints such that the ith constraint (i = 1, . . . , r) is gi(|x \u2229 Ai|) for a convex function gi. For each constraint in P, there is a Boolean variable reni indicating whether or not the ith constraint is renamed. For each pair of distinct i, j \u2208 {1, . . . , r}, we add clauses of length 2 as follows:\n1. if Ai and Aj incompletely overlap then add constraint reni \u21d4 \u00acrenj (since we must rename just one of the two constraints);\n2. if A\u0304i and Aj incompletely overlap then add constraint reni \u21d4 renj (to avoid introducing an overlap by a renaming).\nIt is easy to see that solutions to the constructed 2-SAT instance correspond to valid renamings of P which give rise to an equivalent VCSP instance satisfying the cross-free convexity property. Tractability of solving the resulting renamed instance follows directly from Theorem 4.5."}, {"heading": "4.6 Knuth-Nested VCSPs", "text": "In order to relate our work to previous work, in this section we present a different class of tractable VCSPs which considers sets of variables (rather than sets of assignments) and allows overlaps of size 1. We show that a known tractable class can be extended from Max-SAT to VCSPs. We then apply this result to show that in a very special case the assumption of convexity in cross-free convex VCSPs can be dropped.\nDefinition 4.17. Given a VCSP instance P with variables V = {v1, . . . , vn} and constraints with scopes C = {C1, . . . , Cm}, we define the incidence graph of P as IP = (V (IP), E(IP)), where V (IP) = V \u222a C and E(IP) = {{vi, Cj} | vi \u2208 Cj}.\nDefinition 4.18. A VCSP instance P is called Knuth-nested if the variables of P can be linearly ordered v1, . . . , vn such that IP together with the edges {{vi, vi+1} | 1 \u2264 i \u2264 n} \u222a {vn, v1} allows a planar drawing so that the circle v1, . . . , vn, v1 bounds the outer face. P is called Knuth-co-nested if the constraint scopes of P can be linearly ordered C1, . . . , Cm such that IP together with the edges {{Ci, Ci+1} | 1 \u2264 i \u2264 m} \u222a {Cm, C1} allows a planar drawing so that the circle C1, . . . , Cm, C1 bounds the outer face.\nKnuth described a linear-time algorithm for solving Knuth-nested SAT instances (Knuth, 1990). Kratochv\u0301\u0131l and Kr\u030civa\u0301nek generalised Knuth\u2019s result and provided a linear-time algorithm for recognising and solving Knuth-nested and Knuth-co-nested SAT/Max-SAT instances (Kratochv\u0301\u0131l & Kr\u030civa\u0301nek, 1993). Henderson in his Master\u2019s thesis showed several different proofs of these results, including a proof that Knuth-nested and Knuth-co-nested SAT/Max-SAT instances have treewidth at most three (Biedl & Henderson, 2004; Henderson, 2005), and hence are solvable in polynomial time via a standard dynamic programming approach.\nTheorem 4.19. The class of Knuth-nested and Knuth-co-nested VCSP instances with constraints of bounded arity is recognisable and solvable in polynomial time.\nProof. Recognition can be reduced, via a simple reduction from the work of Kratochv\u0301\u0131l and Kr\u030civa\u0301nek (1993), to the planarity testing problem (Hopcroft & Tarjan, 1974).\nFollowing Henderson\u2019s argument (2005, p. 21), it is easy to show that if P is Knuthnested or Knuth-co-nested, then the incidence graph IP of P has treewidth at most 3. A VCSP with domains of size at most d, constraints of arity at most k and incidence graph IP is clearly equivalent to a binary VCSP with constraint graph IP in which domains are of size at most dk. The result then follows from the fact that any VCSP instance with a constraint graph of bounded treewidth is solvable in polynomial time (Bertele\u0301 & Brioshi, 1972).\nNote that the class of Knuth-nested (Knuth-co-nested) VCSP instances (in fact, even SAT instances) cannot be generalised as it follows from the work of Lichtenstein (1982) that the satisfiability of the conjunction of two Knuth-nested formulas is NP-complete.\nWe now show that the class of Knuth-nested/Knuth-co-nested instances from this section is incomparable with the class of cross-free convex instances defined in Section 4.1 even in the special case of Boolean formulas. Moreover, we also show that the class of Knuthnested/Knuth-co-nested instances is incomparable with the class of renamable Boolean cross-free convex instances defined in Section 4.5.\nExample 4.20. The SAT instance I = (x \u2228 y) \u2227 (y \u2228 z) \u2227 (\u00acy \u2228 w) is Knuth-nested and Knuth-co-nested, but neither cross-free nor renamable cross-free.\nThe following SAT instance is neither Knuth-nested nor Knuth-co-nested, but is crossfree (in fact laminar): (x \u2228 y \u2228 z) \u2227 (\u00acx \u2228 u \u2228 v) \u2227 (\u00acy \u2228 \u00acu \u2228 w) \u2227 (\u00acz \u2228 \u00acv \u2228 \u00acw).\nWe now turn our attention to cross-free VCSPs with possibly non-convex cost functions and assignment-sets of size at most 2. We show that the tractability of Boolean VCSP instances, i.e. instances over 2-element domains, follows from Theorem 4.19. Recall that the case of convex cost functions is tractable from Theorem 4.5, but that, from Theorem 4.11, the case of non-convex cost functions is intractable for assignments sets of size 3.\nTheorem 4.21. Any cross-free Boolean VCSP instance with assignment-sets of size at most 2 is solvable in polynomial time.\nProof. As mentioned in the proof of Proposition 4.12, first observe that for VCSPs with assignment-sets of size 2 (or any fixed size for that matter) laminarity and cross-freeness are almost identical. The extra condition in the definition of cross-freenes (for A1, A2 \u2286 A, A1 \u2229 A2 6= \u2205 \u21d2 A1 \u222a A2 = A) is irrelevant for instances with more than 3 variable-value assignments. Hence we only need to prove tractability for laminar Boolean VCSPs with assignment-sets of size at most 2.\nWe show that any Boolean VCSP with laminar assignment-sets of size at most 2 is Knuth-nested. Tractability then follows from Theorem 4.19.\nTake an arbitrary variable, for instance v1. We will show that there is an order < of variables satisfying the requirements of the Knuth-nested property. Since |D1| = 2, there are at most two assignment-sets, say Ai and Aj , containing (different) assignments to v1. Now since all assignment-sets are of size at most two, there is at most one more assignment in Ai, say an assignment to variable vk. We define v1 < vk. Similarly, there is at most one more assignment in Aj , say an assignment to variable vl, and we define vl < v1. Continuing the same reasoning for variables vl and vk, we can get another variable smaller (in the order < we are building) than vl and another variable bigger than vk. This has to stop eventually: either there are no more variables, or some assignment-set is of size 1, or some variable has domain of size 1, or the last considered assignment-set contains assignments to the smallest and the biggest variables (in the order <). It is easy to observe that in all cases we have a planar drawing as required in Definition 4.18. If there are some variables left, we continue in the same way.\nNext we show that cross-free VCSPs over 3-element domains with assignments sets of size at most 2 may be neither Knuth-nested nor Knuth-co-nested.\nExample 4.22. Take four variables x, y, z, w with the domain {0, 1, 2}, and sets A1 = {\u3008x, 0\u3009, \u3008y, 0\u3009}, A2 = {\u3008y, 1\u3009, \u3008z, 0\u3009}, A3 = {\u3008x, 1\u3009, \u3008z, 1\u3009}, A4 = {\u3008y, 2\u3009, \u3008w, 0\u3009}. This instance is cross-free (in fact laminar), but is neither Knuth-nested nor Knuth-co-nested."}, {"heading": "5. Conclusions", "text": "We have studied hybrid reasons for tractability for optimisation problems that can be cast as Valued Constraint Satisfaction Problems (VCSPs), or equivalently Markov Random Fields (MRFs) or Min-Sum problems. These are reasons for tractability that do not follow from the restriction on the functions (such as submodularity) or from the restriction on the structure of the instance (such as bounded treewidth).\nFirstly, we have studied binary VCSPs (also known as pairwise MRFs). In the CSP and Max-CSP case, we have obtained a complete dichotomy concerning the tractability\nof problems defined by placing restrictions on the possible combinations of binary costs in triangles of variable-value assignments. In the case of finite-valued and general-valued VCSP, we have obtained complete dichotomies with respect to equivalence classes which naturally follow from the total order on the valuation structure. We have shown that the joint-winner property and maximum (weighted) matching are the only non-trivial tractable classes.\nSecondly, we have studied non-binary VCSPs. We have presented a novel class of optimisation problems that can be solved efficiently using flow techniques. The new class is defined as problems with convex functions over a cross-free family of variable-value assignments. We have shown that neither of the two conditions on its own is sufficient for tractability. Moreover, over Boolean domains, we have managed to extend the new class using the idea of renamability.\nWe have left open one special case, namely the tractability of cross-free non-convex VCSPs with assignment-sets of size at most 2 and domains of size at most 3. (Assignmentsets of size 3 make the problem intractable even for Boolean domains, and assignment-sets of size 2 over Boolean domains have been shown tractable.)"}, {"heading": "Acknowledgments", "text": "Martin Cooper is supported by ANR Projects ANR-10-BLAN 0210 and 0214. Stanislav Z\u030civny\u0301 is supported by a Junior Research Fellowship at University College, Oxford."}], "references": [{"title": "Network Flows: Theory, Algorithms, and Applications", "author": ["R. Ahuja", "T. Magnanti", "J. Orlin"], "venue": null, "citeRegEx": "Ahuja et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Ahuja et al\\.", "year": 2005}, {"title": "Nonserial dynamic programming", "author": ["U. Bertel\u00e9", "F. Brioshi"], "venue": null, "citeRegEx": "Bertel\u00e9 and Brioshi,? \\Q1972\\E", "shortCiteRegEx": "Bertel\u00e9 and Brioshi", "year": 1972}, {"title": "Nested SAT Graphs have Treewidth Three", "author": ["T. Biedl", "P. Henderson"], "venue": "Tech. rep. CS-2004-70,", "citeRegEx": "Biedl and Henderson,? \\Q2004\\E", "shortCiteRegEx": "Biedl and Henderson", "year": 2004}, {"title": "Semiring-based Constraint Satisfaction and Optimisation", "author": ["S. Bistarelli", "U. Montanari", "F. Rossi"], "venue": "Journal of the ACM,", "citeRegEx": "Bistarelli et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Bistarelli et al\\.", "year": 1997}, {"title": "Pseudo-Boolean optimization", "author": ["E. Boros", "P.L. Hammer"], "venue": "Discrete Applied Mathematics,", "citeRegEx": "Boros and Hammer,? \\Q2002\\E", "shortCiteRegEx": "Boros and Hammer", "year": 2002}, {"title": "Classifying the Complexity of Constraints using Finite Algebras", "author": ["A. Bulatov", "A. Krokhin", "P. Jeavons"], "venue": "SIAM Journal on Computing,", "citeRegEx": "Bulatov et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Bulatov et al\\.", "year": 2005}, {"title": "The complexity of constraint languages", "author": ["D. Cohen", "P. Jeavons"], "venue": "The Handbook of Constraint Programming. Elsevier", "citeRegEx": "Cohen and Jeavons,? \\Q2006\\E", "shortCiteRegEx": "Cohen and Jeavons", "year": 2006}, {"title": "A New Class of Binary CSPs for which Arc-Constistency Is a Decision Procedure", "author": ["D.A. Cohen"], "venue": "Proceedings of the 9th International Conference on Principles and Practice of Constraint Programming (CP\u201903), Vol. 2833 of Lecture Notes in Computer Science, pp. 807\u2013811. Springer.", "citeRegEx": "Cohen,? 2003", "shortCiteRegEx": "Cohen", "year": 2003}, {"title": "On guaranteeing polynomiallybounded search tree size", "author": ["D.A. Cohen", "M.C. Cooper", "M. Green", "D. Marx"], "venue": "In Proceedings of the 17th International Conference", "citeRegEx": "Cohen et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Cohen et al\\.", "year": 2011}, {"title": "Generalising submodularity and Horn clauses: Tractable optimization problems defined by tournament pair multimorphisms", "author": ["D.A. Cohen", "M.C. Cooper", "P.G. Jeavons"], "venue": "Theoretical Computer Science,", "citeRegEx": "Cohen et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Cohen et al\\.", "year": 2008}, {"title": "The Complexity of Soft Constraint Satisfaction", "author": ["D.A. Cohen", "M.C. Cooper", "P.G. Jeavons", "A.A. Krokhin"], "venue": "Artificial Intelligence,", "citeRegEx": "Cohen et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Cohen et al\\.", "year": 2006}, {"title": "Generalizing constraint satisfaction on trees: Hybrid tractability and variable elimination", "author": ["M.C. Cooper", "P.G. Jeavons", "A.Z. Salamon"], "venue": "Artificial Intelligence,", "citeRegEx": "Cooper et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Cooper et al\\.", "year": 2010}, {"title": "Hierarchically nested convex VCSP", "author": ["M.C. Cooper", "S. \u017divn\u00fd"], "venue": "In Proceedings of the 17th International Conference on Principles and Practice of Constraint Programming (CP\u201911),", "citeRegEx": "Cooper and \u017divn\u00fd,? \\Q2011\\E", "shortCiteRegEx": "Cooper and \u017divn\u00fd", "year": 2011}, {"title": "Hybrid tractability of valued constraint problems", "author": ["M.C. Cooper", "S. \u017divn\u00fd"], "venue": "Artificial Intelligence,", "citeRegEx": "Cooper and \u017divn\u00fd,? \\Q2011\\E", "shortCiteRegEx": "Cooper and \u017divn\u00fd", "year": 2011}, {"title": "Tractable triangles", "author": ["M.C. Cooper", "S. \u017divn\u00fd"], "venue": "In Proceedings of the 17th International Conference on Principles and Practice of Constraint Programming (CP\u201911),", "citeRegEx": "Cooper and \u017divn\u00fd,? \\Q2011\\E", "shortCiteRegEx": "Cooper and \u017divn\u00fd", "year": 2011}, {"title": "Complexity Classification of Boolean Constraint Satisfaction Problems, Vol. 7 of SIAM Monographs on Discrete Mathematics and Applications", "author": ["N. Creignou", "S. Khanna", "M. Sudan"], "venue": null, "citeRegEx": "Creignou et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Creignou et al\\.", "year": 2001}, {"title": "Constraint Satisfaction, Bounded Treewidth, and Finite-Variable Logics", "author": ["V. Dalmau", "P.G. Kolaitis", "M.Y. Vardi"], "venue": "In Proceedings of the 8th International Conference on Principles and Practice of Constraint Programming (CP\u201902),", "citeRegEx": "Dalmau et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Dalmau et al\\.", "year": 2002}, {"title": "Network-based Heuristics for Constraint Satisfaction Problems", "author": ["R. Dechter", "J. Pearl"], "venue": "Artificial Intelligence,", "citeRegEx": "Dechter and Pearl,? \\Q1988\\E", "shortCiteRegEx": "Dechter and Pearl", "year": 1988}, {"title": "Constraint Processing", "author": ["R. Dechter"], "venue": "Morgan Kaufmann.", "citeRegEx": "Dechter,? 2003", "shortCiteRegEx": "Dechter", "year": 2003}, {"title": "Maximum Matching and a Polyhedron with 0, 1 Vertices", "author": ["J. Edmonds"], "venue": "Journal of Research National Bureau of Standards, 69 B, 125\u2013130.", "citeRegEx": "Edmonds,? 1965a", "shortCiteRegEx": "Edmonds", "year": 1965}, {"title": "Paths, trees, and flowers", "author": ["J. Edmonds"], "venue": "Canadian Journal of Mathematics, 17, 449\u2013467.", "citeRegEx": "Edmonds,? 1965b", "shortCiteRegEx": "Edmonds", "year": 1965}, {"title": "The Computational Structure of Monotone Monadic SNP and Constraint Satisfaction: A Study through Datalog and Group Theory", "author": ["T. Feder", "M.Y. Vardi"], "venue": "SIAM Journal on Computing,", "citeRegEx": "Feder and Vardi,? \\Q1998\\E", "shortCiteRegEx": "Feder and Vardi", "year": 1998}, {"title": "Fibonacci heaps and their uses in improved network optimization algorithms", "author": ["M.L. Fredman", "R.E. Tarjan"], "venue": "Journal of the ACM,", "citeRegEx": "Fredman and Tarjan,? \\Q1987\\E", "shortCiteRegEx": "Fredman and Tarjan", "year": 1987}, {"title": "Computers and Intractability: A Guide to the Theory of NP-Completeness", "author": ["M.R. Garey", "D.S. Johnson"], "venue": null, "citeRegEx": "Garey and Johnson,? \\Q1979\\E", "shortCiteRegEx": "Garey and Johnson", "year": 1979}, {"title": "Stochastic relaxation, Gibbs distributions, and the bayesian restoration of images", "author": ["S. Geman", "D. Geman"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence,", "citeRegEx": "Geman and Geman,? \\Q1984\\E", "shortCiteRegEx": "Geman and Geman", "year": 1984}, {"title": "On Sets of Acquaintances and Strangers at any Party", "author": ["A.W. Goodman"], "venue": "The American Mathematical Monthly, 66 (9), 778\u2013783.", "citeRegEx": "Goodman,? 1959", "shortCiteRegEx": "Goodman", "year": 1959}, {"title": "The complexity of homomorphism and constraint satisfaction problems seen from the other side", "author": ["M. Grohe"], "venue": "Journal of the ACM, 54 (1), 1\u201324.", "citeRegEx": "Grohe,? 2007", "shortCiteRegEx": "Grohe", "year": 2007}, {"title": "Planar Graphs and Partial k-Trees", "author": ["P. Henderson"], "venue": "Master\u2019s thesis, University of Waterloo.", "citeRegEx": "Henderson,? 2005", "shortCiteRegEx": "Henderson", "year": 2005}, {"title": "Integrated Method for Optimization", "author": ["J. Hooker"], "venue": "Springer.", "citeRegEx": "Hooker,? 2007", "shortCiteRegEx": "Hooker", "year": 2007}, {"title": "Efficient planarity testing", "author": ["J.E. Hopcroft", "R.E. Tarjan"], "venue": "Journal of the ACM,", "citeRegEx": "Hopcroft and Tarjan,? \\Q1974\\E", "shortCiteRegEx": "Hopcroft and Tarjan", "year": 1974}, {"title": "On the Algebraic Structure of Combinatorial Problems", "author": ["P.G. Jeavons"], "venue": "Theoretical Computer Science, 200 (1-2), 185\u2013204.", "citeRegEx": "Jeavons,? 1998", "shortCiteRegEx": "Jeavons", "year": 1998}, {"title": "MAX ONES Generalized to Larger Domains", "author": ["P. Jonsson", "F. Kuivinen", "G. Nordh"], "venue": "SIAM Journal on Computing,", "citeRegEx": "Jonsson et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Jonsson et al\\.", "year": 2008}, {"title": "Min CSP on Four Elements: Moving Beyond Submodularity", "author": ["P. Jonsson", "F. Kuivinen", "J. Thapper"], "venue": "In Proceedings of the 17th International Conference on Principles and Practice of Constraint Programming (CP\u201911),", "citeRegEx": "Jonsson et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Jonsson et al\\.", "year": 2011}, {"title": "Introduction to the maximum solution Problem", "author": ["P. Jonsson", "G. Nordh"], "venue": "In Complexity of Constraints,", "citeRegEx": "Jonsson and Nordh,? \\Q2008\\E", "shortCiteRegEx": "Jonsson and Nordh", "year": 2008}, {"title": "The approximability of constraint satisfaction problems", "author": ["S. Khanna", "M. Sudan", "L. Trevisan", "D. Williamson"], "venue": "SIAM Journal on Computing,", "citeRegEx": "Khanna et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Khanna et al\\.", "year": 2001}, {"title": "Nested satisfiability", "author": ["D.E. Knuth"], "venue": "Acta Informatica, 28 (1), 1\u20136. Kolmogorov, V. (2011). Submodularity on a tree: Unifying l]-convex and bisubmodular functions. In Proceedings of the 36th International Symposium on Mathematical Foundations of Computer Science (MFCS\u201911), Vol. 6907 of Lecture Notes in Computer Science, pp. 400\u2013411. Springer.", "citeRegEx": "Knuth,? 1990", "shortCiteRegEx": "Knuth", "year": 1990}, {"title": "The complexity of conservative valued CSPs", "author": ["V. Kolmogorov", "S. \u017divn\u00fd"], "venue": "In Proceedings of the 23rd Annual ACM-SIAM Symposium on Discrete Algorithms (SODA\u201912),", "citeRegEx": "Kolmogorov and \u017divn\u00fd,? \\Q2012\\E", "shortCiteRegEx": "Kolmogorov and \u017divn\u00fd", "year": 2012}, {"title": "Satisfiability of co-nsted formulas", "author": ["J. Kratochv\u0301\u0131l", "M. K\u0159iv\u00e1nek"], "venue": "Acta Informatica,", "citeRegEx": "Kratochv\u0301\u0131l and K\u0159iv\u00e1nek,? \\Q1993\\E", "shortCiteRegEx": "Kratochv\u0301\u0131l and K\u0159iv\u00e1nek", "year": 1993}, {"title": "Graphical Models", "author": ["S.L. Lauritzen"], "venue": "Oxford University Press.", "citeRegEx": "Lauritzen,? 1996", "shortCiteRegEx": "Lauritzen", "year": 1996}, {"title": "Towards efficient consistency enforcement for global constraints in weighted constraint satisfaction", "author": ["Lee", "J.H.-M", "K.L. Leung"], "venue": "In Proceedings of the 21st International Joint Conference on Artificial Intelligence", "citeRegEx": "Lee et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Lee et al\\.", "year": 2009}, {"title": "The node-deletion problem for hereditary properties is NP-complete", "author": ["J.M. Lewis", "M. Yannakakis"], "venue": "Journal of Computer System Sciences,", "citeRegEx": "Lewis and Yannakakis,? \\Q1980\\E", "shortCiteRegEx": "Lewis and Yannakakis", "year": 1980}, {"title": "Planar formulae and their uses", "author": ["D. Lichtenstein"], "venue": "SIAM Journal on Computing, 11 (2), 329\u2013343.", "citeRegEx": "Lichtenstein,? 1982", "shortCiteRegEx": "Lichtenstein", "year": 1982}, {"title": "Coverings and colorings of hypergraphs", "author": ["L. Lov\u00e1sz"], "venue": "Proceedings of the 4th Southeastern Conference on Combinatorics, Graph Theory and Computing, pp. 3\u201312.", "citeRegEx": "Lov\u00e1sz,? 1973", "shortCiteRegEx": "Lov\u00e1sz", "year": 1973}, {"title": "On the NP-completeness of the k-colorability problem for triangle-free graphs", "author": ["F. Maffray", "M. Preissmann"], "venue": "Discrete Mathematics,", "citeRegEx": "Maffray and Preissmann,? \\Q1996\\E", "shortCiteRegEx": "Maffray and Preissmann", "year": 1996}, {"title": "Tractable hypergraph properties for constraint satisfaction and conjunctive queries", "author": ["D. Marx"], "venue": "Proceedings of the 42nd ACM Symposium on Theory of Computing (STOC\u201910), pp. 735\u2013744.", "citeRegEx": "Marx,? 2010", "shortCiteRegEx": "Marx", "year": 2010}, {"title": "A polynomial algorithm for minimum quadratic cost flow problems", "author": ["M. Minoux"], "venue": "European Journal of Operational Research, 18, 377\u2013387.", "citeRegEx": "Minoux,? 1984", "shortCiteRegEx": "Minoux", "year": 1984}, {"title": "Solving integer minimum cost flows with separable convex cost objective polynomially", "author": ["M. Minoux"], "venue": "Mathematic Programming Studies, 26, 237\u2013239.", "citeRegEx": "Minoux,? 1986", "shortCiteRegEx": "Minoux", "year": 1986}, {"title": "Networks of Constraints: Fundamental properties and applications to picture processing", "author": ["U. Montanari"], "venue": "Information Sciences, 7, 95\u2013132.", "citeRegEx": "Montanari,? 1974", "shortCiteRegEx": "Montanari", "year": 1974}, {"title": "Computational Complexity", "author": ["C. Papadimitriou"], "venue": "Addison-Wesley.", "citeRegEx": "Papadimitriou,? 1994", "shortCiteRegEx": "Papadimitriou", "year": 1994}, {"title": "Optimization, Approximation, and Complexity Classes", "author": ["C.H. Papadimitriou", "M. Yannakakis"], "venue": "Journal of Computer and System Sciences,", "citeRegEx": "Papadimitriou and Yannakakis,? \\Q1991\\E", "shortCiteRegEx": "Papadimitriou and Yannakakis", "year": 1991}, {"title": "A note on stable sets and colorings of graphs", "author": ["S. Poljak"], "venue": "Commentationes Mathematicae Universitatis Carolinae, 15 (2), 307\u2013309.", "citeRegEx": "Poljak,? 1974", "shortCiteRegEx": "Poljak", "year": 1974}, {"title": "A filtering algorithm for constraints of difference in CSPs", "author": ["R\u00e9gin", "J.-C."], "venue": "Proceedings of the 12th National Conference on AI (AAAI\u201994), Vol. 1, pp. 362\u2013367.", "citeRegEx": "R\u00e9gin and J..C.,? 1994", "shortCiteRegEx": "R\u00e9gin and J..C.", "year": 1994}, {"title": "Generalized Arc Consistency for Global Cardinality Constraint", "author": ["R\u00e9gin", "J.-C."], "venue": "Proceedings of the 13th National Conference on AI (AAAI\u201996), Vol. 1, pp. 209\u2013215.", "citeRegEx": "R\u00e9gin and J..C.,? 1996", "shortCiteRegEx": "R\u00e9gin and J..C.", "year": 1996}, {"title": "The Handbook of Constraint", "author": ["F. Rossi", "P. van Beek", "T. Walsh"], "venue": null, "citeRegEx": "Rossi et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Rossi et al\\.", "year": 2006}, {"title": "The Complexity of Satisfiability Problems", "author": ["T.J. Schaefer"], "venue": "Proceedings of the 10th Annual ACM Symposium on Theory of Computing (STOC\u201978), pp. 216\u2013226. ACM.", "citeRegEx": "Schaefer,? 1978", "shortCiteRegEx": "Schaefer", "year": 1978}, {"title": "Valued Constraint Satisfaction Problems: Hard and Easy Problems", "author": ["T. Schiex", "H. Fargier", "G. Verfaillie"], "venue": "In Proceedings of the 14th International Joint Conference on Artificial Intelligence", "citeRegEx": "Schiex et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Schiex et al\\.", "year": 1995}, {"title": "Combinatorial Optimization: Polyhedra and Efficiency, Vol", "author": ["A. Schrijver"], "venue": "24 of Algorithms and Combinatorics. Springer.", "citeRegEx": "Schrijver,? 2003", "shortCiteRegEx": "Schrijver", "year": 2003}, {"title": "A Dichotomy Theorem for the General Minimum Cost Homomorphism Problem", "author": ["R. Takhanov"], "venue": "Proceedings of the 27th International Symposium on Theoretical Aspects of Computer Science (STACS\u201910), pp. 657\u2013668.", "citeRegEx": "Takhanov,? 2010", "shortCiteRegEx": "Takhanov", "year": 2010}, {"title": "On global warming: Flow-based soft global constraints", "author": ["W.J. van Hoeve", "G. Pesant", "Rousseau", "L.-M"], "venue": "Journal of Heuristics,", "citeRegEx": "Hoeve et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Hoeve et al\\.", "year": 2006}, {"title": "Graphical models, exponential families, and variational inference", "author": ["M.J. Wainwright", "M.I. Jordan"], "venue": "Foundations and Trends in Machine Learning,", "citeRegEx": "Wainwright and Jordan,? \\Q2008\\E", "shortCiteRegEx": "Wainwright and Jordan", "year": 2008}, {"title": "A Linear Programming Approach to Max-Sum Problem: A Review", "author": ["T. Werner"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence, 29 (7), 1165\u20131179.", "citeRegEx": "Werner,? 2007", "shortCiteRegEx": "Werner", "year": 2007}, {"title": "Generalizations of the global cardinality constraint for hierarchical resources. In Proceedings of the 4th International Conference on Integration of AI and OR Techniques in Constraint Programming for Combinatorial Optimization Problems (CPAIOR\u201907)", "author": ["A. Zanarini", "G. Pesant"], "venue": null, "citeRegEx": "Zanarini and Pesant,? \\Q2007\\E", "shortCiteRegEx": "Zanarini and Pesant", "year": 2007}], "referenceMentions": [{"referenceID": 60, "context": "This fundamental research problem has been studied within several different contexts of computer science and artificial intelligence under different names: Min-Sum Problems (Werner, 2007), MAP inference in Markov Random Fields (MRF) and Conditional Random Fields (CRF) (Lauritzen, 1996; Wainwright & Jordan, 2008), Gibbs energy minimisation (Geman & Geman, 1984), Valued Constraint Satisfaction Problems (Dechter, 2003), or (for two-state variables) pseudo-Boolean optimisation (Boros & Hammer, 2002).", "startOffset": 173, "endOffset": 187}, {"referenceID": 38, "context": "This fundamental research problem has been studied within several different contexts of computer science and artificial intelligence under different names: Min-Sum Problems (Werner, 2007), MAP inference in Markov Random Fields (MRF) and Conditional Random Fields (CRF) (Lauritzen, 1996; Wainwright & Jordan, 2008), Gibbs energy minimisation (Geman & Geman, 1984), Valued Constraint Satisfaction Problems (Dechter, 2003), or (for two-state variables) pseudo-Boolean optimisation (Boros & Hammer, 2002).", "startOffset": 269, "endOffset": 313}, {"referenceID": 18, "context": "This fundamental research problem has been studied within several different contexts of computer science and artificial intelligence under different names: Min-Sum Problems (Werner, 2007), MAP inference in Markov Random Fields (MRF) and Conditional Random Fields (CRF) (Lauritzen, 1996; Wainwright & Jordan, 2008), Gibbs energy minimisation (Geman & Geman, 1984), Valued Constraint Satisfaction Problems (Dechter, 2003), or (for two-state variables) pseudo-Boolean optimisation (Boros & Hammer, 2002).", "startOffset": 404, "endOffset": 419}, {"referenceID": 18, "context": "We use the terminology of Valued Constraint Satisfaction Problems (VCSPs) (Schiex, Fargier, & Verfaillie, 1995; Dechter, 2003).", "startOffset": 74, "endOffset": 126}, {"referenceID": 47, "context": "A Constraint Satisfaction Problem (CSP) instance consists of a collection of variables which must be assigned values subject to specified constraints (Montanari, 1974).", "startOffset": 150, "endOffset": 167}, {"referenceID": 30, "context": "The first approach has led to identifying certain algebraic closure operations known as polymorphisms (Jeavons, 1998) which are necessary for a set of constraint types to ensure tractability.", "startOffset": 102, "endOffset": 117}, {"referenceID": 26, "context": "The second approach has been used to characterise all tractable cases of boundedarity CSPs (such as binary CSPs) (Dalmau, Kolaitis, & Vardi, 2002; Grohe, 2007) and unbounded-arity CSPs (Marx, 2010).", "startOffset": 113, "endOffset": 159}, {"referenceID": 44, "context": "The second approach has been used to characterise all tractable cases of boundedarity CSPs (such as binary CSPs) (Dalmau, Kolaitis, & Vardi, 2002; Grohe, 2007) and unbounded-arity CSPs (Marx, 2010).", "startOffset": 185, "endOffset": 197}, {"referenceID": 18, "context": "Such properties have sometimes been called hybrid reasons for tractability (Dechter, 2003; Cohen, 2003; Cohen & Jeavons, 2006; Cooper, Jeavons, & Salamon, 2010; Cohen, Cooper, Green, & Marx, 2011).", "startOffset": 75, "endOffset": 196}, {"referenceID": 7, "context": "Such properties have sometimes been called hybrid reasons for tractability (Dechter, 2003; Cohen, 2003; Cohen & Jeavons, 2006; Cooper, Jeavons, & Salamon, 2010; Cohen, Cooper, Green, & Marx, 2011).", "startOffset": 75, "endOffset": 196}, {"referenceID": 28, "context": "Since many computational problems involve seeking a solution that optimises certain criteria, as well as satisfying certain restrictions, various general frameworks for optimisation problems have been studied such as linear programming, mixed integer programming and others (Hooker, 2007).", "startOffset": 274, "endOffset": 288}, {"referenceID": 18, "context": "One possibility is to extend CSPs to so-called soft constraint satisfaction problems, which allow measures of desirability to be associated with different assignments to the variables (Dechter, 2003; Meseguer, Rossi, & Schiex, 2006).", "startOffset": 184, "endOffset": 232}, {"referenceID": 18, "context": "It is well known that structural reasons for tractability generalise to the VCSP (Bertel\u00e9 & Brioshi, 1972; Dechter, 2003).", "startOffset": 81, "endOffset": 121}, {"referenceID": 20, "context": "It turns out that there are only two non-trivial tractable cases: the well-known maximum matching problem (Edmonds, 1965b), and the recently discovered joint-winner property (Cooper & \u017divn\u00fd, 2011b).", "startOffset": 106, "endOffset": 122}, {"referenceID": 56, "context": "We refer the reader to standard textbooks (Ahuja, Magnanti, & Orlin, 2005; Schrijver, 2003) for more details.", "startOffset": 42, "endOffset": 91}, {"referenceID": 56, "context": "Algorithms for finding the minimum-cost flow of a given value are well known (Ahuja, Magnanti, & Orlin, 2005; Schrijver, 2003).", "startOffset": 77, "endOffset": 126}, {"referenceID": 48, "context": "As A{0,\u221e}(D) allows all binary CSPs, A{0,\u221e}(D) is intractable (Papadimitriou, 1994) unless the domain is of size at most 2, in which case it is equivalent to 2-SAT, which is a well-known tractable class (Schaefer, 1978).", "startOffset": 62, "endOffset": 83}, {"referenceID": 54, "context": "As A{0,\u221e}(D) allows all binary CSPs, A{0,\u221e}(D) is intractable (Papadimitriou, 1994) unless the domain is of size at most 2, in which case it is equivalent to 2-SAT, which is a well-known tractable class (Schaefer, 1978).", "startOffset": 203, "endOffset": 219}, {"referenceID": 42, "context": "graphs that do not contain K3, the complete graph on 3 vertices, as a subgraph), which can be derived from two results from the work of Lov\u00e1sz (1973). (Indeed, 3-Colouring is NP-hard even for triangle-free graphs of degree at most 4; see Maffray & Preissmann, 1996.", "startOffset": 136, "endOffset": 150}, {"referenceID": 57, "context": "This framework includes well-studied problems such as Max-Ones over Boolean domains (Creignou, Khanna, & Sudan, 2001; Khanna, Sudan, Trevisan, & Williamson, 2001) and non-Boolean domains (Jonsson, Kuivinen, & Nordh, 2008), Max-Solution (Jonsson & Nordh, 2008), or Min-Cost-Hom (Takhanov, 2010).", "startOffset": 277, "endOffset": 293}, {"referenceID": 50, "context": "This follows from the standard trick (Poljak, 1974) of replacing every edge by P4, the path on 4 vertices (this operation is also known", "startOffset": 37, "endOffset": 51}, {"referenceID": 48, "context": "As A{0,1}(D) allows all binary Max-CSPs, A{0,1}(D) is intractable (Garey & Johnson, 1979; Papadimitriou, 1994) unless the domain is of size 1.", "startOffset": 66, "endOffset": 110}, {"referenceID": 25, "context": "It is well known (Goodman, 1959) and not difficult to show2 that for every 2-colouring of edges of K6 (the complete graph on 6 vertices) there is a monochromatic triangle.", "startOffset": 17, "endOffset": 32}, {"referenceID": 48, "context": "The result then follows from the well-known fact that Max-2SAT is NP-hard (Garey & Johnson, 1979; Papadimitriou, 1994).", "startOffset": 74, "endOffset": 118}, {"referenceID": 20, "context": "In a global assignment, no two zero-cost assignment-pairs can involve the same variable, which means that this can be achieved by a reduction to the maximum matching problem, a problem solvable in polynomial time (Edmonds, 1965b).", "startOffset": 213, "endOffset": 229}, {"referenceID": 20, "context": "20, we have shown that any instance from A{0,1}({>, 1}) can be reduced to an instance of maximum matching in graphs (Edmonds, 1965b).", "startOffset": 116, "endOffset": 132}, {"referenceID": 19, "context": "Tractability follows from the tractability of the maximum weighted matching problem (Edmonds, 1965a).", "startOffset": 84, "endOffset": 100}, {"referenceID": 19, "context": "34 that AQ+({> ,M}) is tractable via a reduction to the maximum weighted matching problem (Edmonds, 1965a).", "startOffset": 90, "endOffset": 106}, {"referenceID": 56, "context": ", Ar are called laminar (Schrijver, 2003) (or hierarchically nested ; see Cooper & \u017divn\u00fd, 2011a) if for any 1 \u2264 i, j \u2264 r, Ai and Aj are nested.", "startOffset": 24, "endOffset": 41}, {"referenceID": 56, "context": ", Ar \u2286 A are called cross-free if for every 1 \u2264 i, j \u2264 r, either Ai \u2286 Aj , or Ai \u2287 Aj , or Ai \u2229 Aj = \u2205, or Ai\u222aAj = A (Schrijver, 2003).", "startOffset": 117, "endOffset": 134}, {"referenceID": 35, "context": "Knuth described a linear-time algorithm for solving Knuth-nested SAT instances (Knuth, 1990).", "startOffset": 79, "endOffset": 92}, {"referenceID": 27, "context": "Henderson in his Master\u2019s thesis showed several different proofs of these results, including a proof that Knuth-nested and Knuth-co-nested SAT/Max-SAT instances have treewidth at most three (Biedl & Henderson, 2004; Henderson, 2005), and hence are solvable in polynomial time via a standard dynamic programming approach.", "startOffset": 190, "endOffset": 232}, {"referenceID": 35, "context": "Recognition can be reduced, via a simple reduction from the work of Kratochv\u0301\u0131l and K\u0159iv\u00e1nek (1993), to the planarity testing problem (Hopcroft & Tarjan, 1974).", "startOffset": 68, "endOffset": 100}, {"referenceID": 35, "context": "Note that the class of Knuth-nested (Knuth-co-nested) VCSP instances (in fact, even SAT instances) cannot be generalised as it follows from the work of Lichtenstein (1982) that the satisfiability of the conjunction of two Knuth-nested formulas is NP-complete.", "startOffset": 23, "endOffset": 172}], "year": 2012, "abstractText": "The minimisation problem of a sum of unary and pairwise functions of discrete variables is a general NP-hard problem with wide applications such as computing MAP configurations in Markov Random Fields (MRF), minimising Gibbs energy, or solving binary Valued Constraint Satisfaction Problems (VCSPs). We study the computational complexity of classes of discrete optimisation problems given by allowing only certain types of costs in every triangle of variable-value assignments to three distinct variables. We show that for several computational problems, the only nontrivial tractable classes are the well known maximum matching problem and the recently discovered joint-winner property. Our results, apart from giving complete classifications in the studied cases, provide guidance in the search for hybrid tractable classes; that is, classes of problems that are not captured by restrictions on the functions (such as submodularity) or the structure of the problem graph (such as bounded treewidth). Furthermore, we introduce a class of problems with convex cardinality functions on cross-free sets of assignments. We prove that while imposing only one of the two conditions renders the problem NP-hard, the conjunction of the two gives rise to a novel tractable class satisfying the cross-free convexity property, which generalises the joint-winner property to problems of unbounded arity.", "creator": "TeX"}}}