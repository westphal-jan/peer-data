{"id": "1402.2359", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Feb-2014", "title": "Machine Learner for Automated Reasoning 0.4 and 0.5", "abstract": "machine learner for applied automated reasoning ( malarea ) is a learning and reasoning system for proving statements in large formal mathematics libraries known where thousands of theorems are available when attacking a new conjecture, and a large number of related problems called and proofs hence can be used to learn specific theorem - proving knowledge. the last version of writing the system has by a large margin indeed won the 2013 casc software ltb competition. this paper describes the motivation behind the methods used formulated in malarea, discusses the general approach and the issues arising in evaluation of implementing such system, and describes the mizar @ turing100 \" and casc'24 versions of malarea.", "histories": [["v1", "Tue, 11 Feb 2014 03:42:00 GMT  (21kb)", "https://arxiv.org/abs/1402.2359v1", null], ["v2", "Wed, 28 May 2014 13:51:17 GMT  (20kb)", "http://arxiv.org/abs/1402.2359v2", null]], "reviews": [], "SUBJECTS": "cs.LG cs.AI cs.LO", "authors": ["cezary kaliszyk", "josef urban", "ji\\v{r}\\'i vysko\\v{c}il"], "accepted": false, "id": "1402.2359"}, "pdf": {"name": "1402.2359.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Cezary Kaliszyk", "Josef Urban", "Ji\u0159\u00ed Vysko\u010dil"], "emails": ["Mizar@Turing100"], "sections": [{"heading": null, "text": "ar X\niv :1\n40 2.\n23 59\nv2 [\ncs .L\nG ]\n2 8\nM ay\n2 01\n1 Introduction: MaLARea as an Experiment with Data-Driven AI/ATP Methods\nMachine Learner for Automated Reasoning (MaLARea) is a (meta-)system for automated theorem proving (ATP) in large theories consisting of thousands of formulas, symbols and proofs. The main motivation behind the system has been to develop, employ, and evaluate various kinds of heuristic guiding methods that are useful for reasoning in such large (especially complex mathematical) theories. A particular goal was to start exploring analogies with how trained mathematicians work, i.e., how they develop and accumulate problem-solving knowledge, learn it from others and re-use it for attacking more and more difficult problems. Providing at least one underlying database for developing such methods has also been one of the main motivations for translating the Mizar library to ATP formats. MaLARea started to be developed in 2007, when the translation (MPTP [15, 16]) of the whole Mizar library to first-order logic (FOF TPTP) was largely finished. An AI/ATP competition on a smaller set of related large-theory MPTP problems \u2013 the MPTP Challenge1 \u2013 was designed in 2006 to measure the strength of various large-theory AI/ATP systems and techniques limited to CASC-scale resources, and to encourage further development of such systems. Our hope has been that the more successful AI/ATP techniques developed experimentally for MaLARea on the smaller benchmarks will eventually be deployed as systems that help with mathematics done over large formal libraries.\nThe system design has been influenced by earlier experiments done over the whole translated Mizar library and its parts. The main guiding idea tried already in [15] was to use the previous Mizar library proofs to learn which of the thousands of available theorems in the library could be relevant for a new conjecture. In [16], this was for some experiments complemented by learning also from the ATP proofs of related Mizar problems. The heuristic justification behind this overall approach to large-theory ATP was that predicting relevance is in general very hard, i.e., it is intractable or undecidable (depending on one\u2019s exact assumptions) to estimate how a theorem will be proved and what previous knowledge will best serve that. So once such knowledge has\n1http://www.cs.miami.edu/~tptp/MPTPChallenge/\nbeen (often expensively) discovered for some problems, it should be re-used as much as possible, becoming an integral part of the ATP algorithms, instead of disregarding it and relying just on simpler (e.g., symbol-based) pre-programmed criteria that (at least currently) do not seem to be quite successful in emulating the reasoning processes leading to the human discovery of complicated mathematical proofs. Such an approach to algorithm design has been recently called data-driven2 [13]. This paradigm does not seem yet entirely established in the domain of Automated Reasoning (AR), despite its generally acknowledged crucial role in recent major AI (and also AR) achievements such as the IBM Watson system. We hope that the techniques and results described here will motivate further interest in such ATP methods. The paper is organized as follows. Section 2 explains the main techniques implemented in the early versions of MaLARea. Section 3 briefly discusses the various concerns and issues related to evaluating such AI/ATP systems. Section4 describes the version of MaLARea used at the Mizar@Turing100 AI/ATP competition, and Section 5 describes the version used at the CASC-24 competition."}, {"heading": "2 Basic Ideas and Techniques", "text": "The basic techniques used already by early versions of MaLARea are described in detail in [17, 20]. The metasystem relies on one or several core ATPs (originally SPASS [21] and E [12]) and one or several machine learners (originally the naive Bayes learner provided by the SNoW system [2]). The goal in benchmarks like the MPTP Challenge is to solve as many large-theory problems as possible within a global time limit. This allows systems to spend time on analyzing and solving different problems, and to transfer the knowledge obtained while solving one problem to other problems. The main way how MaLARea does this is by incremental exploration and learning of the relevance relation saying which (sets of) existing theorems are likely to be useful for proving a given conjecture. Making decisions about which of the problems to attack next, which axioms to use, and how it is going to improve the overall knowledge about the relevance relation is an instance of the general exploration vs. exploitation framework studied, e.g., on multi-armed bandits [3] in the domain of reinforcement learning [14].\nPreprocessing, Features: The system starts by several pre-processing steps done on the input set of all problems, during which the formulas in the problems are syntactically normalized (using the tptp4X tool from the TPTP distribution) and checked for duplicate names. Different names for the same formula are merged into one unique name. This typically later benefits the learning of the relevance relation, which targets the formula names. More elaborate schemes for normalization in large libraries are possible (and could benefit the knowledge re-use even more): for example, splitting of all conjunctions (and naming the conjuncts) and normalizing also the symbol names using recursive content-based hashing has been recently introduced for the whole Flyspeck [6]. The normalized formulas are then subjected to the initial extraction of suitable features that approximate the formulas for the learning systems. In the first version, only the set of (non-variable) symbols was used. In the later versions, the set of all terms in all formulas was enumerated using a tool based on E prover\u2019s shared term banks, and the serial numbers of the shared terms (or just their internal string representation) were added to the set of formula features. Overlap (measured, e.g., using the Jaccard index [5]) on such\n2\u201cMany of the most interesting problems in AI and computer science in general are extremely complex often making it difficult or even impossible to specify an explicitly programmed solution. Learning systems offer an alternative methodology for tackling these problems. By exploiting the knowledge extracted from a sample of data, they are often capable of adapting themselves to infer a solution to such tasks. [This approach] is referred to as the data driven approach, in contrast to the theory driven approach that gives rise to precise specifications of the required algorithms.\u201d [13]\nfeature sets then provides a much more detailed notion of similarity between two formulas. Since this notion of similarity can be too fine, various further modification of this idea have been considered. One that was also introduced early is the use of just one generic variable in all formulas, so that terms that differ only in variables can still give rise to similarity between formulas. Again, this idea has been in recent related systems extended in various ways [8, 10]. The number of such features can be quite high (thousands to millions, depending on the size of the data set), however for relatively simple sparse learning methods such as naive Bayes this is not an efficiency problem when compared to the times used by the ATPs. In addition to such purely syntactic features, much more semantic formula features were added in [20] (no longer during the preprocessing phase), based on the validity of the formulas in a large pool of finite models that are typically created dynamically as counter-examples during the main MaLARea loop execution. Unlike the syntactic proximity, which will make the formulas \u03c6 and \u00ac\u03c6 very close, the model-based proximity should much better correspond to the \u201ctrue semantic relation\u201d of the formulas in the Lindenbaum algebra, providing also basis for using (and learning) straightforward (counter-)model-based criteria for premise selection [20].\nMain Loop: After the preprocessing steps, the system proceeds by running the main loop which interleaves the work of the ATP systems with the work of the learning (and other premise-selection) systems. Based on the conjecture features and previous proofs, the learning systems try to select the most relevant premises for the conjectures that are still unproved. The ATP systems in turn try to (dis)prove the problems with various numbers of the most relevant premises, adding more proofs or counter-models to the common (initially empty) knowledge base. There are various options that govern this main loop, controlling mainly the premise numbers, time limits, and the speed of re-learning on the knowledge base when new proof (or counter-model) data become available. The loop ends either by solving all problems, timing out, or after trying all allowed combinations of premise numbers and time limits for the remaining conjectures without obtaining any new information (proof or counter-model) that could update the relevance relation. The main purpose behind this loop is to efficiently combine educated guessing (induction) based on the current knowledge of the world with deductive confirmation (or disproof) of such guesses, which produces further knowledge. The early versions of MaLARea outperformed other systems on (the large-theory division of) the MPTP Challenge and also on the Mizar category of the first (2008) CASC LTB (large-theory batch) competition.\n3 Large-Theory Competitions and Evaluating MaLARea\nA major issue triggered by MaLARea turned out to be the evaluation of such AI systems. Until the introduction of the LTB division in 2008 (consisting then of the Mizar, SUMO, and Cyc problems), the CASC competition largely prohibited knowledge re-use between different problems and systems that would come with pre-recorded information about the solutions of other (typically TPTP) problems.3 Good knowledge extraction and re-use is however the main research topic of data-driven AI methods. The MPTP Challenge addressed this dilemma by (i) keeping the CASC rules preventing pre-recording, (ii) allowing arbitrary recording and re-use between the problems within the competition time, (iii) providing sufficiently many \u2013 252 \u2013 related problems of varied difficulty, and (iv) allowing further knowledge re-use by letting systems return to unsolved problems. An even better solution (similar, e.g., to machine learning competitions such as the Netflix Challenge) would have been to use a public dataset for system\n3The fine point of such rules is of course construction of targetted ATP strategies and their use based on problem classification methods. The finer such methods are, the closer they are to pre-recording information about the problem solutions.\npreparation and an unknown similar dataset for evaluation. To some extent this was realized in the first (2008) CASC LTB competition, when the MPTP Challenge benchmark could be used for preparing systems, but the competition data for the Mizar category (following the same design as the MPTP Challenge) were unknown prior to the competition. The next (2009) CASC LTB however significantly decreased the number of Mizar competition problems (to 40), and focused on a query answering mode, in which systems are additionally not allowed not to return to unsolved problems (point (iv) above). This LTB setup was kept until 2012. A real-time query answering mode is in principle a valid scenario in large-theory formal mathematics [6, 19, 10], but the low number of preceding competition problems results in only a few proofs to learn from, which mostly does not correspond to reality in (formal) mathematics. Such simplification (denial of existence of great amount of useful data) obviously largely diminishes the usefulness of data-driven methods, whose development was the primary motivation behind MaLARea, MPTP, and the first large-theory benchmarks. Consequently, MaLARea did not compete in CASC LTB from 2009 to 2011.\n4 MaLARea 0.4 at Mizar@Turing100\nIn 2012, the Mizar@Turing100 competition brought back the possibility of learning from many related proofs. It was based on the larger MPTP2078 benchmark [1] and followed the MPTP Challenge rules (using 400 competition problems), modified by additionally pre-releasing 1000 training problems together with a large number (13455) of their (ATP or Mizar) proofs. The systems were allowed to preprocess these problems and proofs in an arbitrary way before the competition, and use any knowledge thus obtained in the competition.4 Three main additions were made to MaLARea, accommodating the new rules and taking into account recent largetheory research.\nUse of the training proofs to initialize the learning systems: The 13455 training proofs were analyzed in the same way as the proofs obtained during the competition (extracting the premises used), and the resulting table became part of the competition system and used for the first learning at the start of the competition. The main interesting AI issue was how to best learn the relevance relation from many different proofs (on average 13) of the same problem. The experimentally obtained best answer to this was (at that time, for Mizar and available learners) to use the shortest proof available [11, 9].\nUse of non-learning predictors and their combining with learners: The research done in [11] also motivated the second addition: using E\u2019s version of SInE [4] to produce its own relevance ordering of premises, which may then be also linearly combined with the ordering produced by the machine learner. In [11] such combination of rankers improved the final ATP performance by 10%.\nUse of ATP strategies automatically constructed on the training data: The newly developed Blind Strategymaker (BliStr) strategy evolving system [18] was used to automatically construct new ATP strategies on the training problems. Building of Blind Strategymaker itself was a response to the preliminary measurements showing that E 1.6 (used as the only ATP in MaLARea for the competition) could in 300s prove only 518 of the training problems, compared to 691 proved by Vampire 1.8.5 After 6 runs (30 hours of real time on 12-core Xeon 2.67GHz server), BliStr developed a set of E strategies that (using altogether 300s) raised the performance of E to about 650 training problems. This 25% improvement turned out to carry over also to the\n4This was broadly motivated by the presence of a large number of proofs in the ITP systems\u2019 libraries, and the possibility to often obtain different (often shorter) ATP proofs for the problems exported from such libraries.\n5Measured on pruned problems containing only the facts needed in the Mizar proofs.\n400 competition problems, probably thanks to the relatively strong guards against overfitting (versatility criterion) used in the BliStr strategy-evolution loop [18].\nThe overall MaLARea parameters have then been (manually) tuned on a random subset of 100 problems from the training dataset, restricting the training data to the remaining 900 problems. To speed up the expensive testing runs, a file-based (content-indexed) cache of solutions was added, growing in the end to about 2.5M unique solutions. The final MaLARea version solved 257 of the 400 competition problems, but lost 17 due to a bug in proof delivery and thus came second after Vampire (which solved 248 problems). The version without the new E strategies solved only 214 problems [18].\n5 MaLARea 0.5 at CADE-24\nIn 2013, CASC LTB (running for HOL, Isabelle and Mizar categories) also provided pre-training problems and solutions, however they had to be processed within the overall competition time. The competition problems (250 for Mizar) themselves had to be processed in the ordered mode, i.e, without returning to previous unsolved problems. This made the \u201cexplore vs. exploit\u201d heuristics in previous versions of MaLARea largely redundant, resulting in a 2013 re-implementation done from scratch which contains several new techniques and so far omits some of the (more complicated) old ones.\nMain loop: Instead of deciding which problem to attack next, the system only has to decide how much time it spends in learning/predicting and in proving for each problem. Solving previously unsolved problems might still be beneficial for the learning [8], but with 250 competition problems this did not seem sufficiently rewarding yet. The main loop thus consists only of (parallelized) running of predictors, followed by (parallelized) proving, which is (if successful) followed by proof pseudo-minimization [8], usually producing better data for the learning.\nPredictors, features: A family of distance weighted k-nearest neighbor (k-NN) learners complemented by the IDF (inverse document frequency) feature weighting has recently shown very good prediction properties on the Flyspeck dataset [7]. Additionally, a lot of work (measuring distances and finding the nearest neighbors) can be simply shared in such families for different values of k. The final family thus consists of 4 subfamilies run in parallel with different IDF weightings and feature normalization, each of them using 8 values of k, producing 32 k-NN rankings very fast. These rankings can then be differently sliced, easily yielding over 100 premise selections for a given conjecture. An interesting alternative to the IDF feature preprocessing is the latent semantic analysis (LSA), for which the gensim toolkit6 was used, instructed to produce 400 topics (new features). Such features were used as an input to some k-NNs.\nStrategies: The BliStr system has been extended to produce also good SInE strategies for E, and run several times on the Mizar@Turing100 training problems and the published Flyspeck data, producing further overall strengthenings [7].\nGlobal optimization: Several test runs were done on the 2012 Mizar@Turing100 competition data. The large number of premise selections produced during these runs were collected, and used as a pool of problems for finding the strongest combinations of the BliStr strategies with the predictors. The final ensemble consists of 40 combinations characterized by the selection of features, k-NN version, feature weighting, premise count, and ATP strategy.\nEvaluation and Competition Performance: The final system solved 260 of the 400 Mizar@Turing100 competition problems (used for optimization here). On the unknown CASC-\n6http://radimrehurek.com/gensim/\n24 LTB competition data the system solved 239 problems out of 750. The second best system (E 1.8-LTB) solved 135 problems. This is the largest relative distance (77% more) between the first and second system in CASC since Waldmeister\u2019s victory in the UEQ division in 2000."}, {"heading": "6 Acknowledgements", "text": "It has been a great pleasure to use Stephan Schulz\u2019s open-source E prover. We now use E as the main ground ATP, E\u2019s implementation of SInE, its API for strategy specification, and its code base for our fast shared-term enumerator."}], "references": [{"title": "Premise selection for mathematics by corpus analysis and kernel methods", "author": ["J. Alama", "T. Heskes", "D. K\u00fchlwein", "E. Tsivtsivadze", "J. Urban"], "venue": "J. Autom. Reasoning,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2014}, {"title": "The SNoW Learning Architecture", "author": ["A. Carlson", "C. Cumby", "J. Rosen", "D. Roth"], "venue": "Technical Report UIUCDCS-R-99-2101, UIUC Computer Science Department,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1999}, {"title": "Bandit processes and dynamic allocation indices", "author": ["J.C. Gittins"], "venue": "Journal of the Royal Statistical Society. Series B (Methodological),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1979}, {"title": "Sine qua non for large theory reasoning", "author": ["K. Hoder", "A. Voronkov"], "venue": "CADE, volume 6803 of LNCS,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "\u00c9tude comparative de la distribution florale dans une portion des", "author": ["P. Jaccard"], "venue": "Alpes et des Jura. Bull. del la Socie\u0301te\u0301 Vaudoise des Sciences Naturelles,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1901}, {"title": "HOL(y)Hammer: Online ATP service for HOL Light", "author": ["C. Kaliszyk", "J. Urban"], "venue": "CoRR, abs/1309.4962,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Stronger automation for Flyspeck by feature weighting and strategy evolution", "author": ["C. Kaliszyk", "J. Urban"], "venue": "PxTP 2013,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2013}, {"title": "Learning-assisted automated reasoning with Flyspeck", "author": ["C. Kaliszyk", "J. Urban"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2014}, {"title": "Learning from multiple proofs: First experiments", "author": ["D. Kuehlwein", "J. Urban"], "venue": "editors, PAAR-2012,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2013}, {"title": "MaSh: Machine learning for Sledgehammer", "author": ["D. K\u00fchlwein", "J.C. Blanchette", "C. Kaliszyk", "J. Urban"], "venue": "Proc. of the 4th International Conference on Interactive Theorem Proving (ITP\u201913),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2013}, {"title": "Overview and evaluation of premise selection techniques for large theory mathematics", "author": ["D. K\u00fchlwein", "T. van Laarhoven", "E. Tsivtsivadze", "J. Urban", "T. Heskes"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}, {"title": "E - A Brainiac Theorem Prover", "author": ["S. Schulz"], "venue": "AI Commun.,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2002}, {"title": "Kernel Methods for Pattern Analysis", "author": ["J. Shawe-Taylor", "N. Cristianini"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2004}, {"title": "Reinforcement learning: An introduction, volume 1", "author": ["R.S. Sutton", "A.G. Barto"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1998}, {"title": "MPTP - Motivation, Implementation, First Experiments", "author": ["J. Urban"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2004}, {"title": "MPTP 0.2: Design, implementation, and initial experiments", "author": ["J. Urban"], "venue": "J. Autom. Reasoning,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2006}, {"title": "MaLARea: a metasystem for automated reasoning in large theories", "author": ["J. Urban"], "venue": "editors, ESARLT,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2007}, {"title": "BliStr: The Blind Strategymaker", "author": ["J. Urban"], "venue": "CoRR, abs/1301.2683,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2014}, {"title": "ATP and presentation service for Mizar formalizations", "author": ["J. Urban", "P. Rudnicki", "G. Sutcliffe"], "venue": "J. Autom. Reasoning,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2013}, {"title": "MaLARea SG1 - Machine Learner for Automated Reasoning with Semantic Guidance", "author": ["J. Urban", "G. Sutcliffe", "P. Pudl\u00e1k", "J. Vysko\u010dil"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2008}, {"title": "SPASS Version 3.5", "author": ["C. Weidenbach", "D. Dimova", "A. Fietzke", "R. Kumar", "M. Suda", "P. Wischnewski"], "venue": "editor, CADE,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2009}], "referenceMentions": [{"referenceID": 14, "context": "MaLARea started to be developed in 2007, when the translation (MPTP [15, 16]) of the whole Mizar library to first-order logic (FOF TPTP) was largely finished.", "startOffset": 68, "endOffset": 76}, {"referenceID": 15, "context": "MaLARea started to be developed in 2007, when the translation (MPTP [15, 16]) of the whole Mizar library to first-order logic (FOF TPTP) was largely finished.", "startOffset": 68, "endOffset": 76}, {"referenceID": 14, "context": "The main guiding idea tried already in [15] was to use the previous Mizar library proofs to learn which of the thousands of available theorems in the library could be relevant for a new conjecture.", "startOffset": 39, "endOffset": 43}, {"referenceID": 15, "context": "In [16], this was for some experiments complemented by learning also from the ATP proofs of related Mizar problems.", "startOffset": 3, "endOffset": 7}, {"referenceID": 12, "context": "Such an approach to algorithm design has been recently called data-driven [13].", "startOffset": 74, "endOffset": 78}, {"referenceID": 16, "context": "The basic techniques used already by early versions of MaLARea are described in detail in [17, 20].", "startOffset": 90, "endOffset": 98}, {"referenceID": 19, "context": "The basic techniques used already by early versions of MaLARea are described in detail in [17, 20].", "startOffset": 90, "endOffset": 98}, {"referenceID": 20, "context": "The metasystem relies on one or several core ATPs (originally SPASS [21] and E [12]) and one or several machine learners (originally the naive Bayes learner provided by the SNoW system [2]).", "startOffset": 68, "endOffset": 72}, {"referenceID": 11, "context": "The metasystem relies on one or several core ATPs (originally SPASS [21] and E [12]) and one or several machine learners (originally the naive Bayes learner provided by the SNoW system [2]).", "startOffset": 79, "endOffset": 83}, {"referenceID": 1, "context": "The metasystem relies on one or several core ATPs (originally SPASS [21] and E [12]) and one or several machine learners (originally the naive Bayes learner provided by the SNoW system [2]).", "startOffset": 185, "endOffset": 188}, {"referenceID": 2, "context": ", on multi-armed bandits [3] in the domain of reinforcement learning [14].", "startOffset": 25, "endOffset": 28}, {"referenceID": 13, "context": ", on multi-armed bandits [3] in the domain of reinforcement learning [14].", "startOffset": 69, "endOffset": 73}, {"referenceID": 5, "context": "More elaborate schemes for normalization in large libraries are possible (and could benefit the knowledge re-use even more): for example, splitting of all conjunctions (and naming the conjuncts) and normalizing also the symbol names using recursive content-based hashing has been recently introduced for the whole Flyspeck [6].", "startOffset": 323, "endOffset": 326}, {"referenceID": 4, "context": ", using the Jaccard index [5]) on such", "startOffset": 26, "endOffset": 29}, {"referenceID": 12, "context": "\u201d [13]", "startOffset": 2, "endOffset": 6}, {"referenceID": 7, "context": "Again, this idea has been in recent related systems extended in various ways [8, 10].", "startOffset": 77, "endOffset": 84}, {"referenceID": 9, "context": "Again, this idea has been in recent related systems extended in various ways [8, 10].", "startOffset": 77, "endOffset": 84}, {"referenceID": 19, "context": "In addition to such purely syntactic features, much more semantic formula features were added in [20] (no longer during the preprocessing phase), based on the validity of the formulas in a large pool of finite models that are typically created dynamically as counter-examples during the main MaLARea loop execution.", "startOffset": 97, "endOffset": 101}, {"referenceID": 19, "context": "Unlike the syntactic proximity, which will make the formulas \u03c6 and \u00ac\u03c6 very close, the model-based proximity should much better correspond to the \u201ctrue semantic relation\u201d of the formulas in the Lindenbaum algebra, providing also basis for using (and learning) straightforward (counter-)model-based criteria for premise selection [20].", "startOffset": 328, "endOffset": 332}, {"referenceID": 5, "context": "A real-time query answering mode is in principle a valid scenario in large-theory formal mathematics [6, 19, 10], but the low number of preceding competition problems results in only a few proofs to learn from, which mostly does not correspond to reality in (formal) mathematics.", "startOffset": 101, "endOffset": 112}, {"referenceID": 18, "context": "A real-time query answering mode is in principle a valid scenario in large-theory formal mathematics [6, 19, 10], but the low number of preceding competition problems results in only a few proofs to learn from, which mostly does not correspond to reality in (formal) mathematics.", "startOffset": 101, "endOffset": 112}, {"referenceID": 9, "context": "A real-time query answering mode is in principle a valid scenario in large-theory formal mathematics [6, 19, 10], but the low number of preceding competition problems results in only a few proofs to learn from, which mostly does not correspond to reality in (formal) mathematics.", "startOffset": 101, "endOffset": 112}, {"referenceID": 0, "context": "It was based on the larger MPTP2078 benchmark [1] and followed the MPTP Challenge rules (using 400 competition problems), modified by additionally pre-releasing 1000 training problems together with a large number (13455) of their (ATP or Mizar) proofs.", "startOffset": 46, "endOffset": 49}, {"referenceID": 10, "context": "The experimentally obtained best answer to this was (at that time, for Mizar and available learners) to use the shortest proof available [11, 9].", "startOffset": 137, "endOffset": 144}, {"referenceID": 8, "context": "The experimentally obtained best answer to this was (at that time, for Mizar and available learners) to use the shortest proof available [11, 9].", "startOffset": 137, "endOffset": 144}, {"referenceID": 10, "context": "Use of non-learning predictors and their combining with learners: The research done in [11] also motivated the second addition: using E\u2019s version of SInE [4] to produce its own relevance ordering of premises, which may then be also linearly combined with the ordering produced by the machine learner.", "startOffset": 87, "endOffset": 91}, {"referenceID": 3, "context": "Use of non-learning predictors and their combining with learners: The research done in [11] also motivated the second addition: using E\u2019s version of SInE [4] to produce its own relevance ordering of premises, which may then be also linearly combined with the ordering produced by the machine learner.", "startOffset": 154, "endOffset": 157}, {"referenceID": 10, "context": "In [11] such combination of rankers improved the final ATP performance by 10%.", "startOffset": 3, "endOffset": 7}, {"referenceID": 17, "context": "Use of ATP strategies automatically constructed on the training data: The newly developed Blind Strategymaker (BliStr) strategy evolving system [18] was used to automatically construct new ATP strategies on the training problems.", "startOffset": 144, "endOffset": 148}, {"referenceID": 17, "context": "400 competition problems, probably thanks to the relatively strong guards against overfitting (versatility criterion) used in the BliStr strategy-evolution loop [18].", "startOffset": 161, "endOffset": 165}, {"referenceID": 17, "context": "The version without the new E strategies solved only 214 problems [18].", "startOffset": 66, "endOffset": 70}, {"referenceID": 7, "context": "Solving previously unsolved problems might still be beneficial for the learning [8], but with 250 competition problems this did not seem sufficiently rewarding yet.", "startOffset": 80, "endOffset": 83}, {"referenceID": 7, "context": "The main loop thus consists only of (parallelized) running of predictors, followed by (parallelized) proving, which is (if successful) followed by proof pseudo-minimization [8], usually producing better data for the learning.", "startOffset": 173, "endOffset": 176}, {"referenceID": 6, "context": "Predictors, features: A family of distance weighted k-nearest neighbor (k-NN) learners complemented by the IDF (inverse document frequency) feature weighting has recently shown very good prediction properties on the Flyspeck dataset [7].", "startOffset": 233, "endOffset": 236}, {"referenceID": 6, "context": "Strategies: The BliStr system has been extended to produce also good SInE strategies for E, and run several times on the Mizar@Turing100 training problems and the published Flyspeck data, producing further overall strengthenings [7].", "startOffset": 229, "endOffset": 232}], "year": 2014, "abstractText": "Machine Learner for Automated Reasoning (MaLARea) is a learning and reasoning system for proving in large formal libraries where thousands of theorems are available when attacking a new conjecture, and a large number of related problems and proofs can be used to learn specific theorem-proving knowledge. The last version of the system has by a large margin won the 2013 CASC LTB competition. This paper describes the motivation behind the methods used in MaLARea, discusses the general approach and the issues arising in evaluation of such system, and describes the Mizar@Turing100 and CASC-24 versions of MaLARea.", "creator": "easychair.cls-3.4"}}}