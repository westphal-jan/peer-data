{"id": "1402.4303", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Feb-2014", "title": "Finding Preference Profiles of Condorcet Dimension $k$ via SAT", "abstract": "condorcet winning sets are a set - valued generalization of the well - known concept of a condorcet winner. as supersets of increasing condorcet winning best sets are always containing condorcet winning sets themselves, an next interesting property concerned of preference profiles is the size of the smallest condorcet winning set sets they admit. this smallest size is called the condorcet dimension and of a preference profile. since little is known about those profiles that have a certain condorcet dimension, we show in this paper how the problem of finding a preference profile that has a given condorcet dimension can be encoded as a satisfiability problem and solved by a suitable sat probability solver. initial results include a minimal example of a preference goal profile of condorcet dimension figure 3, improving his previously known examples - both in terms of the number of agents as well as probable alternatives. due to the high complexity of such problems it remains open especially whether just a preference utility profile of condorcet dimension 4 still exists.", "histories": [["v1", "Tue, 18 Feb 2014 11:31:08 GMT  (29kb)", "http://arxiv.org/abs/1402.4303v1", null], ["v2", "Wed, 2 Mar 2016 17:01:37 GMT  (30kb)", "http://arxiv.org/abs/1402.4303v2", "Corrected typos, updated references, and added conclusion"]], "reviews": [], "SUBJECTS": "cs.MA cs.AI cs.LO", "authors": ["christian geist"], "accepted": false, "id": "1402.4303"}, "pdf": {"name": "1402.4303.pdf", "metadata": {"source": "CRF", "title": "Finding Preference Profiles of Condorcet Dimension k via SAT", "authors": ["Christian Geist"], "emails": ["geist@in.tum.de"], "sections": [{"heading": null, "text": "ar X\niv :1\n40 2.\n43 03\nv1 [\ncs .M\nA ]\n1 8\nFe b\n20 14"}, {"heading": "1. INTRODUCTION", "text": "The contribution of this paper is twofold. Firstly, we provide a practical implementation for finding a preference profile for a given Condorcet dimension by encoding the problem as a boolean satisfiability (SAT) problem [2], which is then solved by a SAT solver. This technique has proven useful for a range of other problems in social choice theory (see, e.g., [8, 6, 4, 3]) and can easily be adapted. For instance, only little needs to be altered in order answer similar questions for dominating sets rather than Condorcet winning sets. Secondly, we give an answer to an open question by Elkind et al. [5] and provide a minimal example of a preference profile of Condorcet dimension 3, which we computed using our implementation. This profile involves 6 alternatives and agents only, improving the size of previous examples both in terms of agents and alternatives.1 The formalization in SAT turns out to be efficient enough, not only to discover this particular profile of Condorcet dimension 3, but also to show its minimality."}, {"heading": "2. PRELIMINARIES", "text": "Let A be a set of m alternatives and N = {1, . . . , n} a set of agents. The preferences of agent i \u2208 N are represented by a linear (i.e., reflexive, complete, transitive, and antisymmetric) preference relation Ri \u2286 A\u00d7 A. The interpretation of (a, b) \u2208 Ri, usually denoted by a Ri b, is that agent i values alternative a at least as much as alternative b. A\n1For instance, the example in Elkind et al. [5] required 15 alternatives and agents.\npreference profile R = (R1, . . . , Rn) is an n-tuple containing a preference relation Ri for each agent i \u2208 N .\nLet R be a preference profile. As introduced by Elkind et al. [5], we now define the notion of a Condorcet winning set through an underlying covering relation between sets of alternatives and alternatives: A set of alternatives X \u03b8-covers an alternative y (short: X \u227b\u03b8R y) if\n|{i \u2208 N | \u2203x \u2208 X such that x Ri y}| > \u03b8n.\nA set of alternatives X is called a Condorcet winning set if for each alternative y /\u2208 X the set X 1\n2 -covers y. The set\nof all Condorcet winning sets of R will be denoted by C(R). The Condorcet dimension dimC(R) is defined as the size of the smallest Condorcet winning set the profile R admits, i.e.,\ndimC(R) := min{k \u2208 N | k = |S| and S \u2208 C(R)}.\nExample 1. Consider the preference profile R depicted in Figure 1. As R does not have a Condorcet winner dimC(R) \u2265 2. It can easily be checked that {a, b} (like any other two-element set in this case) is a Condorcet winning set of R and, thus, dimC(R) = 2.\nIn this work, we address the computational problem of finding a preference profile of a given Condorcet dimension. To this end, we define the problem of checking whether for a given number of agents n and alternatives m there exists a preference profile R with dimC(R) = k.\nName: Check-Condorcet-Dimension-k Instance: A pair of natural numbers n and m. Question: Does there exist a preference profile R with n agents and m alternatives that has Condorcet dimension of at least k?\nNote that the following simple observation can be used to\nObservation 1. If there is a preference profile R of Condorcet dimension dimC(R) involving m alternatives, then there is also one of the same dimension involving m + 1 alternatives.\nProof. Let R be a preference profile on a set of m alternatives A with dimC(R). We need to construct a preference profile R\u2032 on a set of m+ 1 alternatives A\u2032 = A \u222a {a\u2032} with a\u2032 /\u2208 A such that dimC(R\n\u2032) = dimC(R). For each i, define R\u2032i := Ri \u222a {(x, a\n\u2032) | x \u2208 A}, i.e., add a\u2032 in the last place of agent i\u2019s preference ordering. It is then immediately clear that C(R) \u2286 C(R\u2032), which establishes dimC(R) \u2265 dimC(R\n\u2032). On the other hand, if we assume dimC(R) > dimC(R\n\u2032), then there exist a Condorcet winning set S\u2032 for R\u2032 of size k := |S\u2032| < dimC(R). This set, however, must\u2013by the construction of R\u2032\u2013also be a Condorcet winning set for R; a contradiction."}, {"heading": "3. METHODOLOGY", "text": "The number of objects potentially involved in the CheckCondorcet-Dimension-k problem are given in Table 1 for k = 3. It is immediately clear that a na\u0308\u0131ve algorithm will not solve the problem in a satisfactory manner. This section describes our algorithmic efforts to solve this problem for reasonably large instances."}, {"heading": "3.1 Translation to propositional logic (SAT)", "text": "In order to solve the problem Check-CondorcetDimension-k for arbitrary k \u2208 N, we follow a similar approach as Tang and Lin [8], Geist and Endriss [6], and Brandt and Geist [3]: we translate the problem to propositional logic (on a computer) and use state-of-the-art SAT solvers to find a solution. At a glance, the overall solving steps are shown in Algorithm 1.\nGenerally speaking, the problem at hand can be understood as the problem of finding a preference profile that satisfies certain conditions\u2014here: having a Condorcet dimension of at least k). Thus, a satisfying instance of the propositional formula to be designed should represent a preference profile. To capture this, a formalization based on two types of variables suffices. The boolean variable ri,a,b represents a Ri b, i.e., agent i ranking alternative a at least as high as alternative b; and the variable cS,y stands for the set S covering alternative y.\nIn more detail, the following conditions/axioms need to be formalized:2\n1. All n agents have linear orders over the m alternatives as their preferences (short: linear preferences)\n2. For each set S \u2286 A with |S| = k \u2212 1, it is not the case that S is a Condorcet winning set (short: no Condorcet set)\nFor the first axiom, we encode reflexivity, completeness, transitivity, and anti-symmetry of the relation Ri for all\n2The further axiom for neutrality is not required for correctness, but speeds up the solving process. It is discussed in Section 3.2.\nInput: positive integers n and m Output: whether there exists a preference profile R with n agents and m alternatives and dimC(R) \u2265 k /* Encoding of problem in CNF */ File cnfFile; foreach agent i do\ncnfFile += Encoder.reflexivePreferences(i); cnfFile += Encoder.completePreferences(i); cnfFile += Encoder.transitivePreferences(i); cnfFile += Encoder.antisymmetricPreferences(i);\nforeach set S \u2286 A with |S| = k \u2212 1 do cnfFile += Encoder.noCondorcetWinningSet(S);\n/* Symmetry breaking */ cnfFile += Encoder.neutrality(); /* SAT solving */ satisfiable = SATsolver.solve(cnfFile); if instance is satisfiable then\nreturn true;\nelse return false\nAlgorithm 1: SAT-Check-Condorcet-Dimension-k\nagents i. The complete translation to CNF (conjunctive normal form, the established standard input format for SAT solvers) is given exemplarily for the case of transitivity; the other axioms are converted analogously.\nIn formal terms transitivity can be written as\n(\u2200i)(\u2200x, y, z) (x Ri y \u2227 y Ri z \u2192 x Ri z)\n\u2261 (\u2200i)(\u2200x, y, z) (ri,x,y \u2227 ri,y,z \u2192 ri,x,z) \u2261 \u2227\ni\n\u2227\nx,y,z\n(\u00ac (ri,x,y \u2227 ri,y,z) \u2228 ri,x,z)\n\u2261 \u2227\ni\n\u2227\nx,y,z\n(\u00acri,x,y \u2228 \u00acri,y,z \u2228 ri,x,z) ,\nwhich then translates to the pseudo code in Algorithm 2 for generating the CNF file. The key in the translation of the inherently higher order axioms to propositional logic is (as pointed out by Geist and Endriss [6] already) that because of finite domains, all quantifiers can be replaced by finite conjunctions or disjunctions, respectively.\nIn all algorithms, a subroutine r(i, x, y) takes care of the compact enumeration of variables.3\nThe axiom\u201cno Condorcet set\u201d can be formalized in a similar fashion, but requires further subroutines to avoid an exponential blow-up of the size of the formula in CNF. In\n3The DIMACS CNF format only allows for integer names of variables. But since we know in advance how many agents and alternatives there are, we can simply use a standard enumeration method for tuples of objects.\nforeach agent i do foreach alternative x do\nforeach alternative y do foreach alternative z do\nvariable not(r(i, x, y)); variable not(r(i, y, z)); variable(r(i, x, z)); newClause;\nAlgorithm 2: Encoding of transitivity of individual preferences\nshort, the axiom can be written as\n(\u2200S \u2286 A) (|S| = k \u2212 1 \u2192 S /\u2208 C(R))\n\u2261 (\u2200S \u2286 A) ( |S| = k \u2212 1 \u2192 (\u2203y /\u2208 X)S \u2281\u03b8R y )\n\u2261 \u2227\nS\u2286A |S|=k\u22121\n\u2228\ny/\u2208X\n\u00accS,y .\nIt remains as part of this axiom to define a sufficient condition for S \u227b\u03b8R y. In the following, we denote the smallest number of agents required for a strict \u03b8-majority by m(n) := \u230a\u03b8k\u230b + 1. In formal terms, we write for each set S \u2286 A with |S| = k \u2212 1 and each alternative y /\u2208 X:\nS \u227b\u03b8R y \u2190 ((\u2203M \u2286 N)|M | = m(n)\u2227\n(\u2200i \u2208 M)(\u2203x \u2208 S)x Ri y)\n\u2261 S \u227b\u03b8R y \u2228 ((\u2200M \u2286 N)|M | = m(n) \u2192\n(\u2203i \u2208 M)(\u2200x \u2208 S)\u00acx Ri y)\n\u2261 cS,y \u2228\n\n  \n\u2227\nM\u2286N |M|=m(n)\n\u2228\ni\u2208M\n\u2227\nx\u2208S\n\u00acri,x,y\n\n   .\nIn order to avoid an exponential blow-up when converting this formula to CNF, variable replacement (a standard procedure also known as Tseitin transformation) is applied. In our case, we replaced \u2227\nx\u2208S \u00acri,x,y by new variables of the\nform hS,y,i and introduced the following defining clauses: 4\n\u2227\nS\u2286A |S|=k\u22121\n\u2227\ny\u2208A\n\u2227\ni\u2208N\n(\nhS,y,i \u2192 \u2227\nx\u2208S\n\u00acri,x,y\n)\n\u2261 \u2227\nS\u2286A |S|=k\u22121\n\u2227\ny\u2208A\n\u2227\ni\u2208N\n(\n\u00achS,y,i \u2228 \u2227\nx\u2208S\n\u00acri,x,y\n)\n\u2261 \u2227\nS\u2286A |S|=k\u22121\n\u2227\ny\u2208A\n\u2227\ni\u2208N\n\u2227\nx\u2208S\n(\u00achS,y,i \u2228 \u00acri,x,y) .\nIn this case, the helper variables even have an intuitive meaning as hS,y,i enforces that for no alternative x \u2208 S it is the case that agent i prefers alternative y over alternative x, i.e., agent i does not contribute to S \u03b8-covering y.\nNote that the conditions like |S| = k \u2212 1 can easily be fulfilled during generation of the corresponding CNF formula\n4Note that one direction of the standard bi-implication suffices here.\non a computer. For enumerating all subsets of alternatives of a given size we, for instance, used Gosper\u2019s Hack [7].\nThe corresponding pseudo code for the\u201cno Condorcet set\u201d axiom can be found in Algorithm 3.\nforeach set S \u2286 A with |S| = k \u2212 1 do foreach alternative y /\u2208 S do\nvariable not(c(S, y));\nnewClause; /* Definition of variable cS,y */ foreach set M \u2286 N with |M | = m(n) do\nvariable(c(S, y)); foreach agent i \u2208 M do\nvariable(h(S, y, i));\nnewClause;\n/* Definition of auxiliary variable hS,y,i */ foreach agent i \u2208 N do\nforeach x \u2208 S do variable not(r(i, x, y)); variable not(h(S, y, i)); newClause;\nAlgorithm 3: Encoding of the axiom \u201cno Condorcet set\u201d\nWith all axioms formalized in propositional logic, we are now ready to search for preference profiles R of Condorcet dimension dimC(R) \u2265 k. Before we do so, however, we describe a (standard) optimization technique called symmetry breaking, which speeds up the solving process of the SAT solver."}, {"heading": "3.2 Optimized computation", "text": "Observe that from a given example of a preference profile R with dimC(R) \u2265 k we can always generate further examples simply by permuting the (names of the) alternatives. One could say that all positive witnesses to the SAT-CheckCondorcet-Dimension-k problem are invariant under permutations of the alternatives. Therefore, we implemented a standard technique in SAT solving called symmetry breaking; here in the form of setting agent 1\u2019s preferences to a fixed preference ordering, for instance to lexicographic preferences. This trims the search space for the SAT solver and therefore reduces the runtime of the solving process. An encoding can be achieved simply by adding a subformula of the form\n\u2227\nx<y\nr(n1, x, y),\nwhich sets the first agents preferences to lexicographic ordering."}, {"heading": "4. INITIAL RESULTS", "text": "All computations were run on a Intel Core i5, 2.66GHz (quad-core) machine with 12 GB RAM using the SAT solver plingeling [1].\nWhen called with the parameters n = m = 6, our implementation of SAT-Check-Condorcet-Dimension-k returns the preference profile Rdim3 within about one second. Rdim3 is a smallest preference profile of Condorcet dimension\n3 and is shown in Figure 2.5\nFurthermore, it turns out that this preference profile is a smallest profile of Condorcet dimension 3. All strictly smaller profiles (i.e., with less agents and at most as many alternatives, or with less alternatives and at most as many agents) can be shown to have a Condorcet dimension of at most 2 via SAT-Check-Condorcet-Dimension-3.6\nAn overview of further (preliminary) results can be found in Table 2.\n5The witnesses for all sets S \u2286 A with |S| = 2 not being Condorcet winning sets are also returned by SAT-CheckCondorcet-Dimension-3 and can be obtained from the output in Figure 3. That there is a larger set (e.g., {a, b, c}) which forms a Condorcet winning set can easily be confirmed manually (or by calling SAT-Check-CondorcetDimension-4). 6The check all cases, again the running time is only a few seconds."}, {"heading": "Acknowledgments", "text": "This material is based upon work supported by Deutsche Forschungsgemeinschaft under grant BR 2312/9-1. The author thanks Felix Brandt and Hans Georg Seedig for helpful discussions and their support."}], "references": [{"title": "Lingeling, plingeling and treengeling entering the sat competition", "author": ["A. Biere"], "venue": "Proceedings of the SAT Competition", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2013}, {"title": "Handbook of Satisfiability, volume 185 of Frontiers in Artificial Intelligence and Applications", "author": ["A. Biere", "M. Heule", "H. van Maaren", "T. Walsh", "editors"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "Finding strategyproof social choice functions via SAT solving", "author": ["F. Brandt", "C. Geist"], "venue": "In Proceedings of the 13th International Conference on Autonomous Agents and Multi-Agent Systems (AAMAS). IFAAMAS,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "Identifying kmajority digraphs via SAT solving", "author": ["F. Brandt", "C. Geist", "H.G. Seedig"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Choosing collectively optimal sets of alternatives based on the condorcet criterion", "author": ["E. Elkind", "J. Lang", "A. Saffidine"], "venue": "In IJCAI,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "Automated search for impossibility theorems in social choice theory: Ranking sets of objects", "author": ["C. Geist", "U. Endriss"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2011}, {"title": "Combinatorial Algorithms, volume 4A, part 1 of The Art of Computer Programming", "author": ["D.E. Knuth"], "venue": "Addison- Wesley,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "Computer-aided proofs of Arrow\u2019s and other impossibility theorems", "author": ["P. Tang", "F. Lin"], "venue": "Artificial Intelligence,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2009}], "referenceMentions": [{"referenceID": 1, "context": "Firstly, we provide a practical implementation for finding a preference profile for a given Condorcet dimension by encoding the problem as a boolean satisfiability (SAT) problem [2], which is then solved by a SAT solver.", "startOffset": 178, "endOffset": 181}, {"referenceID": 7, "context": ", [8, 6, 4, 3]) and can easily be adapted.", "startOffset": 2, "endOffset": 14}, {"referenceID": 5, "context": ", [8, 6, 4, 3]) and can easily be adapted.", "startOffset": 2, "endOffset": 14}, {"referenceID": 3, "context": ", [8, 6, 4, 3]) and can easily be adapted.", "startOffset": 2, "endOffset": 14}, {"referenceID": 2, "context": ", [8, 6, 4, 3]) and can easily be adapted.", "startOffset": 2, "endOffset": 14}, {"referenceID": 4, "context": "[5] and provide a minimal example of a preference profile of Condorcet dimension 3, which we computed using our implementation.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] required 15 alternatives and agents.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5], we now define the notion of a Condorcet winning set through an underlying covering relation between sets of alternatives and alternatives: A set of alternatives X \u03b8-covers an alternative y (short: X \u227bR y) if |{i \u2208 N | \u2203x \u2208 X such that x Ri y}| > \u03b8n.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "1 Translation to propositional logic (SAT) In order to solve the problem Check-CondorcetDimension-k for arbitrary k \u2208 N, we follow a similar approach as Tang and Lin [8], Geist and Endriss [6], and Brandt and Geist [3]: we translate the problem to propositional logic (on a computer) and use state-of-the-art SAT solvers to find a solution.", "startOffset": 166, "endOffset": 169}, {"referenceID": 5, "context": "1 Translation to propositional logic (SAT) In order to solve the problem Check-CondorcetDimension-k for arbitrary k \u2208 N, we follow a similar approach as Tang and Lin [8], Geist and Endriss [6], and Brandt and Geist [3]: we translate the problem to propositional logic (on a computer) and use state-of-the-art SAT solvers to find a solution.", "startOffset": 189, "endOffset": 192}, {"referenceID": 2, "context": "1 Translation to propositional logic (SAT) In order to solve the problem Check-CondorcetDimension-k for arbitrary k \u2208 N, we follow a similar approach as Tang and Lin [8], Geist and Endriss [6], and Brandt and Geist [3]: we translate the problem to propositional logic (on a computer) and use state-of-the-art SAT solvers to find a solution.", "startOffset": 215, "endOffset": 218}, {"referenceID": 5, "context": "The key in the translation of the inherently higher order axioms to propositional logic is (as pointed out by Geist and Endriss [6] already) that because of finite domains, all quantifiers can be replaced by finite conjunctions or disjunctions, respectively.", "startOffset": 128, "endOffset": 131}, {"referenceID": 6, "context": "For enumerating all subsets of alternatives of a given size we, for instance, used Gosper\u2019s Hack [7].", "startOffset": 97, "endOffset": 100}, {"referenceID": 0, "context": "66GHz (quad-core) machine with 12 GB RAM using the SAT solver plingeling [1].", "startOffset": 73, "endOffset": 76}], "year": 2017, "abstractText": "Condorcet winning sets are a set-valued generalization of the well-known concept of a Condorcet winner. As supersets of Condorcet winning sets are always Condorcet winning sets themselves, an interesting property of preference profiles is the size of the smallest Condorcet winning set they admit. This smallest size is called the Condorcet dimension of a preference profile. Since little is known about profiles that have a certain Condorcet dimension, we show in this paper how the problem of finding a preference profile that has a given Condorcet dimension can be encoded as a satisfiability problem and solved by a SAT solver. Initial results include a minimal example of a preference profile of Condorcet dimension 3, improving previously known examples both in terms of the number of agents as well as alternatives. Due to the high complexity of such problems it remains open whether a preference profile of Condorcet dimension 4 exists.", "creator": "LaTeX with hyperref package"}}}