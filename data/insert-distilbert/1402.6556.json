{"id": "1402.6556", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Feb-2014", "title": "Evolutionary solving of the debts' clearing problem", "abstract": "the debts'clearing problem is about clearing all the debts inherited in a group of sampled n entities ( persons, companies etc. ) using around a minimal computing number of money transaction operations. the problem is known to be np - hard in the strong sense. as solving for many intractable problems, techniques contributions from the empirical field of artificial intelligence are useful in finding solutions close to optimum for large inputs. occasionally an evolutionary algorithm for solving the debts'clearing problem is proposed.", "histories": [["v1", "Wed, 26 Feb 2014 14:39:57 GMT  (187kb)", "http://arxiv.org/abs/1402.6556v1", "13 pages, 5 figures"]], "COMMENTS": "13 pages, 5 figures", "reviews": [], "SUBJECTS": "cs.NE cs.AI", "authors": ["csaba patcas", "attila bartha"], "accepted": false, "id": "1402.6556"}, "pdf": {"name": "1402.6556.pdf", "metadata": {"source": "CRF", "title": "Evolutionary solving of the debts\u2019 clearing problem", "authors": ["Csaba P\u0103tca\u015f", "Attila Bartha"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n40 2.\n65 56\nv1 [\ncs .N\nE ]\n2 6\nFe b\nKeywords: debt clearing, genetic algorithm"}, {"heading": "1 Introduction", "text": "The problem of debt clearing (DC problem) is one, that arises in real life situations as well. In a group of persons that know each other it is not uncommon to borrow some amount of money to an acquaintance for a period of time. This process is also happening among different banks, or even countries. As money transactions are time and money sensitive operations, it is desirable to clear the debts in a minimal number of money transaction operations.\nThe problem of settling debts was discussed by Verhoeff in 2004 ([9]). Pa\u0306tcas\u0327 [6] later re-discovered the problem and proposed it in 2008 at the qualification contest of the Romanian national team of informatics. The solution was described in [6] and the problem conjectured to be intractable, which was earlier proved in [9]. In [7] the problem in a dynamic setting is discussed and a new algorithm given, having superior speed on some cases compared to the one described in [6]."}, {"heading": "2 Stating the problem", "text": "The problem statement is the following: Let us consider a number of n entities (persons, companies etc.), and a list of m borrowings among these entities. A borrowing can be described by three parameters: the index of the borrower entity, the index of the lender entity and the amount of money that was lent. The task is to find a minimal list of money\ntransactions that clears the debts formed among these n entities as a result of the m borrowings made.\nIt is natural to model this problem using graph theory. Consider the following definitions.\nDefinition 1 ([6]). Let G(V,A,W ) be a directed, weighted multigraph without loops, |V | = n, |A| = m, W : A \u2192 Z, where V is the set of vertices, A is the set of arcs and W is the weight function. G represents the borrowings made, so we will call it the borrowing graph.\nThe borrowing graph corresponding to the example in Figure 1 is depicted in Figure 2.\nDefinition 2 ([6]). Let us define for each vertex v \u2208 V the absolute amount of debt over the graph G: DG(v) = \u2211\nv\u2032 \u2208 V\n(v, v\u2032) \u2208 A\nW (v, v\u2032)\u2212 \u2211\nv\u2032\u2032 \u2208 V\n(v\u2032\u2032, v) \u2208 A\nW (v\u2032\u2032, v)\nSometimes for simplicity we will refer to the absolute amount of debt of a node as D value.\nTheD values corresponding to the example from Figure 1 are listed in Figure 3.\nDefinition 3 ([6]). Let G\u2032(V,A\u2032,W \u2032) be a directed, weighted multigraph without loops, with each arc (i, j) representing a transaction of W \u2032(i, j) amount of money from entity i to entity j. We call this graph a transaction graph. These transactions clear the debts formed by the borrowings modeled by graph G(V,A,W ) if and only if:\nDG(vi) = DG\u2032(vi), \u2200i = 1, n, where V = {v1, v2, . . . , vn} We will note this by: G \u223c G\u2032.\nSee Figure 4 for a transaction graph with minimal number of arcs corresponding to the example from Figure 1.\nWe are now ready to reformulate the problem mathematically: Given a borrowing graph G(V,A,W ) we are looking for a minimal transaction graph Gmin(V,Amin,Wmin), so that G \u223c Gmin and \u2200G\u2032(V,A\u2032,W \u2032) : G \u223c G\u2032, |Amin| \u2264 |A\u2032| holds."}, {"heading": "3 An equivalent problem", "text": "The following observation is crucial in all of the solutions known so far.\nTheorem 4. Any instance of the DC problem can be solved trivially by at most n\u2212 1 transactions.\nProof. We give an algorithmic proof.\n1. Let us choose two nodes i and j, such that D(i) > 0 and D(j) < 0.\n2. Add arc (i, j) to the transaction graph having weight min(D(i),\u2212D(j)).\n3. Update the D values of i and j to reflect the addition of the arc (by decreasing D(i) and increasing D(j)).\n4. Repeat steps (1) - (3) as long as possible.\nIt is clear that at least one D value becomes zero as a result of executing steps (1) - (3). Also, because we have the invariant that the sum of all D values is always zero, at the last iteration we always have D(i) = \u2212D(j). Thus two D values become zero at the last iteration, which yields to the needed upper bound.\nWe observe, that finding a minimal transaction graph is equivalent to partitioning V into a maximal number of disjoint zero-sum subsets, more formally V = P1 \u222a . . . \u222a Pmax, \u2211\nu\u2208Pi\nD(u) = 0, \u2200i = 1,max and Pi \u2229 Pj = \u2205, \u2200i, j =\n1,max, i 6= j. The reason for this is, that all the debts in a zero-sum subset Pi can be cleared by |Pi| \u2212 1 transactions by Theorem 4, thus to clear all the debts, |V | \u2212max transactions are necessary."}, {"heading": "4 Evolutionary technique for solving the DC prob-", "text": "lem\nWe use the reformulation of the problem described in Section 3.\nRepresentation A solution of the problem is represented by a permutation of the D values of V , the set of nodes. Thus a candidate solution is a vector C = (c1, c2, . . . , cn), such that ci = D(u), \u2200i \u2208 1, n for some unique u \u2208 V .\nFor instance C = (3, 0,\u22127, 4, 0) is a chromosome representing a candidate solution for the D values from Figure 3.\nThe idea of permutation representations is used intensively in solutions of the Traveling Salesman Problem ([2, 5, 10]).\nFitness assignment To evaluate the fitness of a chromosome, we iterate over the genes of the chromosome in increasing order and maintain the partial sum obtained so far, that is si = i\u2211\nj=1\ncj . For every si = 0, we have found a new zero-\nsum subset of the partition (starting after the last encountered partial sum equal to zero and ending at i), so we can add one to the fitness of the chromosome.\nFor instance if we have C = (\u22123, 2, 1,\u22125, 5), then s = (\u22123,\u22121, 0,\u22125, 0), so the fitness of C will be 2, corresponding to the partition formed by the first three elements and the last two elements.\nRecombination Various operators for permutation representations are discussed in [1, 2, 3, 5, 8, 10]. We propose new recombination operators.\nRecomb1 Let C1 and C2 be the two chromosomes, and k \u2208 [1, n] a random crossover point. Then, the first descendant C\u2032\n1 can be obtained by copying the\nfirst k genes from C1 and appending to it the elements of the permutation not used so far in the same order as they appear in C2. The second descendant C \u2032\n2\nis obtained symmetrically. For instance,\nk = 2 C1 = (\u22123,2, 1,\u22125, 5) C2 = (\u22125,2, 1,\u22123, 5) \u2193 C\u2032\n1 = (\u22123,2,\u22125, 1, 5) C\u2032 2 = (\u22125,2,\u22123, 1, 5)\nRecomb2 The problem with Recomb1 is, that the first descendant inherits most of its properties from C1 and very little from C2. Symmetrically C \u2032\n2 inherits most of its properties from C2 and very little from C1. This is undesirable, as both C1 and C2 can contain subsets from the optimal partition.\nA better recombination operator may be the following. First, determine the partitions codified by C1 and C2, as described at the evaluation of the fitness function. Let those be C1 = P1,1\u222aP1,2\u222a . . . and C2 = P2,1\u222aP2,2\u222a . . .. Initialize C\u2032\n1 := C1 and C\n\u2032 2 := C2.\nThen, iterate over every P1,i. If some P1,i is contained in some P2,j , that is P1,i \u2282 P2,j , replace P2,j in the second descendant with P1,i \u222a (P2,j \\ P1,i). Repeat the same procedure for C2 symmetrically.\nFor instance,\nC1 = (\u22123, 2, 1,\u22125, 5) = {\u22123, 2, 1} \u222a {\u22125, 5} C2 = (2, 1, 5,\u22125,\u22123) = {2, 1, 5,\u22125,\u22123} \u2193 C\u2032\n1 = {\u22123, 2, 1} \u222a {\u22125, 5} = (\u22123, 2, 1,\u22125, 5) C\u2032 2 = {\u22123, 2, 1} \u222a {5,\u22125} = (\u22123, 2, 1, 5,\u22125)\nMutation Two new mutation operators are proposed, having the property, that the fitness of the chromosome does not decrease.\nMut1 The inversion operator described by Holland ([4]) can be used without modification, on the sequence between the ith and jth elements.\nFor instance,\ni = 2, j = 5 C = (\u22123,2,1,\u22125,5) \u2193 C\u2032 = (\u22123,5,\u22125,1,2)\nMut2 Mut1 can be used on the partition C = P1 \u222a P2 \u222a . . . instead of the permutation representation. This method guarantees that the fitness of the chromosome does not decrease.\nFor instance,\ni = 1, j = 4 C = (\u22122, 2, 3, 4,\u22127, 1,\u22121, 6,\u22123, 2,\u22125) =\n{\u22122,2} \u222a {3,4,\u22127} \u222a {1,\u22121} \u222a {6,\u22123,2,\u22125} \u2193\nC\u2032 = {6,\u22123,2,\u22125} \u222a {1,\u22121} \u222a {3,4,\u22127} \u222a {\u22122,2} = (6,\u22123, 2,\u22125, 1,\u22121, 3, 4,\u22127,\u22122, 2)\nMut3 Mut1 can also be used inside some Pk without decreasing the fitness. For instance,\nk = 4, i = 1, j = 4 C = (\u22122, 2, 3, 4,\u22127, 1,\u22121, 6,\u22123, 2,\u22125) =\n{\u22122, 2} \u222a {3, 4,\u22127} \u222a {1,\u22121} \u222a {6,\u22123,2,\u22125} \u2193\nC\u2032 = {\u22122, 2} \u222a {3, 4,\u22127} \u222a {1,\u22121} \u222a {\u22125,2,\u22123,6} = (\u22122, 2, 3, 4,\u22127, 1,\u22121,\u22125, 2,\u22123, 6)"}, {"heading": "5 How to obtain large instances of the DC prob-", "text": "lem\nBecause of the strongly NP-hardness of the problem, it is challenging to generate large test cases for which information about the optimal solution is known. We describe five methods to generate large test cases.\nMethod 1 If the optimal solution for some input is known, padding the set of D values with k zeros increases the optimal solution also by k.\nMethod 2 Method 1 can be modified by padding the input with k pairs of the structure (x,\u2212x).\nMethod 3 If the number of negative (or positive) numbers is two, the problem is equivalent to the Subset Sum problem and is solvable in pseudopolynomial time by dynamic programming. Using this method we can generate inputs for which the optimal solution is unique, that is, there is a single subset of positive (negative) numbers having the sum equal to one of the two negative (positive) numbers (in absolute value). An optimal answer for such an input is expected to be difficult to find for our evolutionary approach, as in the worst case (when the cardinality of the subset is n/2) only 2 \u00b7 (n\n2 !)2 out of the n!\npossible permutations do represent an optimal solution. For n = 10, this means that the ratio of optimal solutions and all solutions is about 7.9 \u00b710\u22123, while for n = 100 the ratio is about 1.9 \u00b7 10\u221229.\nThis idea can be extended for any fixed number of negative (positive) numbers, but the running time of the dynamic programming solution raises quickly.\nMethod 4 Let n be the desired size of the input and l \u2264 \u230an/2\u230b an integer. First generate randomly a set of n\u2212l elements, containing only positiveD values and l distinct integers from the [1, n \u2212 l] range (denoted r1 < . . . < rl). Let s be the vector of partial sums, that is si = i\u2211\nj=1\nD(j), \u2200i = 1, n\u2212 l (we assume\ns0 = 0 and r0 = 0). For every ri, \u2200i = 1, l insert \u2212(sri \u2212 sri\u22121) to the set. In other words we insert with a negative sign the sum of l partial sequences, whose borders are denoted by ri\u22121 and ri. By this method we can get the optimal solution to be equal to l. As the range of the possible values of the first n \u2212 l positive elements gets bigger, we expect the optimal solution to be harder and harder to find. The reason is, that the probability to get the same sum from a different combination of positive numbers gets smaller, thus the number of genetic representations corresponding to an optimal solution decreases.\nMethod 5 It can be easily seen, that if the optimal solution for a set V is known to be max, then the solution for V \u222a V will be 2 \u00b7max, the solution for V \u222a V \u222a V will be 3 \u00b7max and so on."}, {"heading": "6 Numerical experiments", "text": "A preliminary testing phase was carried out using the same 15 test cases which were used when the problem was proposed in 2008 at the qualification contest of the Romanian national team (see [7]). These test cases all have specially crafted structures, with n \u2264 20, m \u2264 100 and the cost of an arc being a natural number no larger than 100. The optimal solution was found for each test case by using the algorithm described in [6]. Our genetic algorithm found the optimal solution for all the test cases."}, {"heading": "6.1 Combinations of operators", "text": "In the first set of experiments our goal was to determine which combinations of our recombination and mutation operators work best in practice, along with desirable values for mutation probability. We constructed three test cases (debt100a, debt100b and debt100c) with different structures, all of them having n = 100.\ndebt100a was obtained by concatenating the test case from the initial 15 that was the most difficult to solve for the genetic algorithm (case 15) five times to itself. By the observation above in Method 5, the optimal solution for this test case is max = 25.\nTo generate debt100b we used Method 3 for n = 50 and concatenated the obtained set once to itself, thus obtaining a case having max = 4 by the observation above.\nTo obtain debt100c we first generated using a dynamic programming algorithm a set having 20 elements, which can be uniquely partitioned into three zero-sum subsets (and no more). Then we concatenated this set five times to itself, yielding max = 15 for this test case.\nFor each of the three described test cases we used the following methodology. For every possible combination of recombination and mutation operators we fixed the mutation probability to every value from 0 to 1 in steps of 0.1 and executed the genetic algorithm 10 times. We recorded the best solution obtained among the 10 executions, the average of the 10 best values and the average fitness of all genomes. In each case the population size was set to 100 individuals and the number of generations to 1000. The best five individuals always survived to the next generation.\nTo assess the efficacy of our algorithm we compared it to an algorithm called RandomSearch, which works by generating an independent random solution in every generation for every chromosome. In our case this meant generating 100000 random solutions and remembering the one with the maximum fitness value among them.\nThe results of the first set of experiments were the following:\n\u2022 debt100c was the most difficult of the three test cases used, no algorithm being able to find the optimal solution max = 15. The best solution found by RandomSearch was 5, and the best solution found by the evolutionary algorithms was 13, using Recomb2 along with Mut1 with a mutation probability ranging from 0.8 to 1. The average fitness of all genomes was maximal at mutation probability 0.7.\n\u2022 debt100b was the easiest of the test cases, our genetic algorithm being able to find the optimal solution max = 4 in the majority of the cases (in about 76% of the possible combinations of recombination and mutation operators and mutation probabilities). Mutation probability 0.7 along with Recomb2 and Mut1 maximized the average fitness again. The best solution found by RandomSearch was 3.\n\u2022 For debt100a RandomSearch was able to find a solution with fitness 9. Our genetic algorithm found the optimal solution 25 in a small percentage of the cases, using the same parameters that yielded the best solutions for debt100c. Maximal average fitness was obtained with mutation probability 0.4 using Recomb2 and Mut1.\nWe can draw the conclusion, that our genetic algorithm is much more efficient than generating random solutions. The results suggest, that using Recomb2 with Mut1 works best in practice for a wide range of inputs. On the other hand we note, that Recomb2 and Mut2 is a particularly bad combination, the reason being, that it does not allow the exploration of a sufficient varied range of solutions, because neither of the operators is able to introduce new partition sets into the population. Still, Mut2 works fairly well together with Recomb1, as the latter is capable of constructing new partition sets."}, {"heading": "6.2 Convergence to optimum", "text": "In the second set of experiments we studied the convergence of the solution to the optimal value as the number of generations increases. We concatenated each of the three test cases described above ten times to itself, obtaining cases debt1000a, debt1000b and debt1000c respectively. We executed our genetic algorithm using Recomb2 and Mut1 with a mutation probability of 0.75. The population size was set to 80 and the best five individuals were always promoted to the next generation. The algorithm was executed once for 50000 generations, and the fitness of the best chromosome was recorded every 100 generations.\nThe results are depicted in Figures 5, 6 and 7. We can observe that in every case the fitness of the best individual raises sharply in the first 5000 generations, then slows down gradually. 50000 generations were enough to find a solution having fitness 244 (97.6% of the optimum) for debt1000a and a solution having fitness 39 (97.5% of the optimum) for debt1000b. Case debt1000c was significantly more difficult, the best solution having only fitness 122 (81.3% of the optimum)."}, {"heading": "6.3 Efficiency on very difficult test cases", "text": "In the third set of experiments we used Method 2 to generate test cases, which are very difficult for our evolutionary algorithm. Starting with n = 100 and going by increments of 100 we generated sets having the structure {1, 2, . . . , n/2, \u2212 1,\u22122, . . . ,\u2212n/2}. It can be easily seen, that the optimal solution for these cases is max = n/2 and it is unique. Only n\n2 ! \u00b7 2n/2 representations out of n!\ntranslate to an optimal solution, which means that the ratio of optimal solutions to all solutions is about 1.0 \u00b7 10\u22123 for n = 10 and about 3.6 \u00b7 10\u221279 for n = 100.\nFor every case we executed the genetic algorithm 10 times using Recomb2 and Mut1 with a mutation probability 0.75. The population size was set to 80 and the best five individuals were always promoted to the next generation. The algorithm was stopped after 5000 generations. For every test case we recorded\nthe best solution found by the algorithm, the average of the best solutions over the 10 executions and the summed up running time of the 10 executions. The results are presented in Figure 8.\nFor n = 100 the optimal solution was found in all of the 10 executions, but as the size of the input increased, the best solution got further and further from the optimum. We note the robustness of the algorithm, as the best solution is usually just a few percentages away from the average."}, {"heading": "7 Conclusions", "text": "The debts\u2019 clearing problem is an NP-hard problem of practical interest, as it arises in real life situations as well. The only known algorithms to solve the problem were the ones presented in [6] and [7], which are exact algorithms that provide the optimal solution always, but their running time is practical only for small inputs (n \u2264 20).\nUsing an equivalent problem we described an evolutionary algorithm to solve the problem and made extensive experiments to assess its efficacy. From the experiments we concluded, that our algorithm is much more efficient than a random search in the space of the solutions. Our algorithm is capable of finding the optimal solution for the most difficult test cases with sizes up to n = 100 in a matter of minutes. For cases as large as n = 1000 our approach remains practical, as it can obtain solutions in the range of 80% - 98% compared to the optimal solution in about an hour on a personal computer. In comparison a random search does not go above 15% even for the easiest cases of this size."}], "references": [{"title": "Applying adaptive algorithms to epistatic domains", "author": ["L. Davis"], "venue": "Proceedings of the 9th International Joint Conference on Artificial Intelligence,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1985}, {"title": "Alleles, loci, and the traveling salesman problem", "author": ["D. Goldberg", "R. Lingle", "Jr."], "venue": "Proceedings of the 1st International Conference on Genetic Algorithms and their Applications,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1985}, {"title": "Genetic algorithms and population structure - A massively parallel algorithm", "author": ["M. Gorges-Schleuter"], "venue": "Ph.D. thesis, University of Dortmund,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1990}, {"title": "Adaptation in Natural and Artificial Systems", "author": ["John H. Holland"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1975}, {"title": "A study of permutation crossover operators on the traveling salesman problem", "author": ["I. Oliver", "D. Smith", "J. Holland"], "venue": "Proceedings of the Second International Conference on Genetic Algorithms,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1987}, {"title": "On the Debts", "author": ["C. P\u0103tca\u015f"], "venue": "Clearing Problem, Studia Universitatis Babes\u0327- Bolyai Series Informatica,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2009}, {"title": "The debts\u2019 clearing problem: a new approach", "author": ["C. P\u0103tca\u015f"], "venue": "Acta Universitatis Sapientiae, Informatica,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "Schedule optimization using genetic algorithms, Handbook of Genetic Algorithms, 332\u2013349", "author": ["G. Syswerda"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1991}, {"title": "Settling Multiple Debts Efficiently: An Invitation to Computing Science, Informatics in Education, volume", "author": ["T. Verhoeff"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "Fuquay, Scheduling problems and traveling salesmen: The genetic edge recombination", "author": ["D. Whitley", "D.T. Starkwater"], "venue": "Proceedings of the Third International Conference on Genetic Algorithms,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1989}], "referenceMentions": [{"referenceID": 8, "context": "The problem of settling debts was discussed by Verhoeff in 2004 ([9]).", "startOffset": 65, "endOffset": 68}, {"referenceID": 5, "context": "P\u0103tca\u015f [6] later re-discovered the problem and proposed it in 2008 at the qualification contest of the Romanian national team of informatics.", "startOffset": 7, "endOffset": 10}, {"referenceID": 5, "context": "The solution was described in [6] and the problem conjectured to be intractable, which was earlier proved in [9].", "startOffset": 30, "endOffset": 33}, {"referenceID": 8, "context": "The solution was described in [6] and the problem conjectured to be intractable, which was earlier proved in [9].", "startOffset": 109, "endOffset": 112}, {"referenceID": 6, "context": "In [7] the problem in a dynamic setting is discussed and a new algorithm given, having superior speed on some cases compared to the one described in [6].", "startOffset": 3, "endOffset": 6}, {"referenceID": 5, "context": "In [7] the problem in a dynamic setting is discussed and a new algorithm given, having superior speed on some cases compared to the one described in [6].", "startOffset": 149, "endOffset": 152}, {"referenceID": 5, "context": "Definition 1 ([6]).", "startOffset": 14, "endOffset": 17}, {"referenceID": 5, "context": "Definition 2 ([6]).", "startOffset": 14, "endOffset": 17}, {"referenceID": 5, "context": "Definition 3 ([6]).", "startOffset": 14, "endOffset": 17}, {"referenceID": 1, "context": "The idea of permutation representations is used intensively in solutions of the Traveling Salesman Problem ([2, 5, 10]).", "startOffset": 108, "endOffset": 118}, {"referenceID": 4, "context": "The idea of permutation representations is used intensively in solutions of the Traveling Salesman Problem ([2, 5, 10]).", "startOffset": 108, "endOffset": 118}, {"referenceID": 9, "context": "The idea of permutation representations is used intensively in solutions of the Traveling Salesman Problem ([2, 5, 10]).", "startOffset": 108, "endOffset": 118}, {"referenceID": 0, "context": "Recombination Various operators for permutation representations are discussed in [1, 2, 3, 5, 8, 10].", "startOffset": 81, "endOffset": 100}, {"referenceID": 1, "context": "Recombination Various operators for permutation representations are discussed in [1, 2, 3, 5, 8, 10].", "startOffset": 81, "endOffset": 100}, {"referenceID": 2, "context": "Recombination Various operators for permutation representations are discussed in [1, 2, 3, 5, 8, 10].", "startOffset": 81, "endOffset": 100}, {"referenceID": 4, "context": "Recombination Various operators for permutation representations are discussed in [1, 2, 3, 5, 8, 10].", "startOffset": 81, "endOffset": 100}, {"referenceID": 7, "context": "Recombination Various operators for permutation representations are discussed in [1, 2, 3, 5, 8, 10].", "startOffset": 81, "endOffset": 100}, {"referenceID": 9, "context": "Recombination Various operators for permutation representations are discussed in [1, 2, 3, 5, 8, 10].", "startOffset": 81, "endOffset": 100}, {"referenceID": 3, "context": "Mut1 The inversion operator described by Holland ([4]) can be used without modification, on the sequence between the i and j elements.", "startOffset": 50, "endOffset": 53}, {"referenceID": 6, "context": "A preliminary testing phase was carried out using the same 15 test cases which were used when the problem was proposed in 2008 at the qualification contest of the Romanian national team (see [7]).", "startOffset": 191, "endOffset": 194}, {"referenceID": 5, "context": "The optimal solution was found for each test case by using the algorithm described in [6].", "startOffset": 86, "endOffset": 89}, {"referenceID": 5, "context": "The only known algorithms to solve the problem were the ones presented in [6] and [7], which are exact algorithms that provide the optimal solution always, but their running time is practical only for small inputs (n \u2264 20).", "startOffset": 74, "endOffset": 77}, {"referenceID": 6, "context": "The only known algorithms to solve the problem were the ones presented in [6] and [7], which are exact algorithms that provide the optimal solution always, but their running time is practical only for small inputs (n \u2264 20).", "startOffset": 82, "endOffset": 85}], "year": 2014, "abstractText": "The debts\u2019 clearing problem is about clearing all the debts in a group of n entities (persons, companies etc.) using a minimal number of money transaction operations. The problem is known to be NP-hard in the strong sense. As for many intractable problems, techniques from the field of artificial intelligence are useful in finding solutions close to optimum for large inputs. An evolutionary algorithm for solving the debts\u2019 clearing problem is proposed.", "creator": "LaTeX with hyperref package"}}}