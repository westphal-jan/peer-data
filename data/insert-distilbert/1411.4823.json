{"id": "1411.4823", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Nov-2014", "title": "Automated Reasoning in Deontic Logic", "abstract": "deontic logic is a very well researched branch theorem of mathematical logic logic and philosophy. various kinds of basic deontic logics are discussed for different defined application domains like argumentation theory, legal reasoning, and acts in varying multi - agent systems. in this paper, we strongly show how standard deontic logic can be stepwise transformed into description logic sets and dl - clauses, such that theoretically it can be processed by hyper, a high performance theorem prover { which uses a hypertableau calculus. two use - cases, one from multi - agent research and one from the development of normative system are investigated.", "histories": [["v1", "Tue, 18 Nov 2014 12:27:01 GMT  (77kb,D)", "http://arxiv.org/abs/1411.4823v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["ulrich furbach", "claudia schon", "frieder stolzenburg"], "accepted": false, "id": "1411.4823"}, "pdf": {"name": "1411.4823.pdf", "metadata": {"source": "CRF", "title": "Automated Reasoning in Deontic Logic", "authors": ["Ulrich Furbach", "Claudia Schon", "Frieder Stolzenburg"], "emails": ["uli@uni-koblenz.de", "schon@uni-koblenz.de", "fstolzenburg@hs-harz.de"], "sections": [{"heading": null, "text": "Keywords: Deontic Logic, Automated Theorem Proving, Description Logics"}, {"heading": "1 Introduction", "text": "Deontic logic is a very well researched branch of mathematical logic and philosophy. Various kinds of deontic logics are discussed for different application domains like argumentation theory, legal reasoning, and acts in multi-agent systems [11]. Recently there also is growing interest in modelling human reasoning and testing the models with psychological findings. Deontic logic is an obvious tool to this end, because norms and licenses in human societies can be described easily with it. For example in [9] there is a discussion of some of these problems including solutions with the help of deontic logic. There, the focus is on using deontic logic for modelling certain effects, which occur in human reasoning, e.g. the Wason selection task or Byrne\u2019s suppression task.\nThis paper concentrates on automated reasoning in standard deontic logic (SDL). Instead of implementing a reasoning system for this logic directly, we rather rely on existing methods and systems. Taking into account that SDL is just the modal logic K with a seriality axiom, we show that deontic logic can be translated into description logic ALC. The latter can be transformed into so called DL-clauses, which is a special normal form with clauses consisting of implications where the body is, as usual, a conjunction of atoms and the head is a disjunction of literals. These literals can be atoms or existential quantified expressions.\nDL-clauses can be decided by the first-order reasoning system Hyper [22], which uses the hypertableau calculus from [4]. In Sections 2 and 3 we shortly\n? Work supported by DFG grants FU 263/15-1 and STO 421/5-1 \u2019Ratiolog\u2019.\nar X\niv :1\n41 1.\n48 23\nv1 [\ncs .A\nI] 1\n8 N\nov 2\n01 4\n2 depict this workflow, and in Section 4 we demonstrate the use of our technique with the help of two problems from the literature, one from multi-agent research and the other one from testing normative systems. We choose these examples, because they hopefully document the applicability of reasoning of SDL in various areas of AI research."}, {"heading": "2 Deontic Logic as Modal Logic KD", "text": "We consider a simple modal logic which consists of propositional logic and the additional modal operators and \u2666. Semantics are given as possible world semantics, where the modal operators and \u2666 are interpreted as quantifiers over possible worlds. Such a possible world is an assignment, which assigns truth values to the propositional variables. An interpretation connects different possible worlds by a (binary) reachability relation R. The -operator states that a formula has to hold in all reachable worlds. Hence if v and w are worlds, we have\nw |= P iff \u2200v : R(w, v)\u2192 v |= P\nStandard deontic logic (SDL) is obtained from the well-known modal logic K by adding the seriality axiom D:\nD : P \u2192 \u2666P\nIn this logic, the -operator is interpreted as \u2018it is obligatory that\u2019 and the \u2666 as \u2018it is permitted that\u2019. The \u2666-operator can be defined by the following equivalence:\n\u2666P \u2261 \u00ac \u00acP\nThe additional axiom D: P \u2192 \u2666P in SDL states that, if a formula has to hold in all reachable worlds, then there exists such a world. With the deontic reading of and \u2666 this means: Whenever the formula P ought to be, then there exists a world where it holds. In consequence, there is always a world, which is ideal in the sense, that all the norms formulated by \u2018the ought to be\u2019-operator hold.\nSDL can be used in a natural way to describe knowledge about norms or licenses. The use of conditionals for expressing rules which should be considered as norms seems likely, but holds some subtle difficulties. If we want to express that if P then Q is a norm, an obvious solution would be to use\n(P \u2192 Q)\nwhich reads it is obligatory that Q holds if P holds. An alternative would be\nP \u2192 Q\nmeaning if P holds, it is obligatory that Q holds. In [21] there is a careful discussion which of these two possibilities should be used for conditional norms.\n3\nThe first one has severe disadvantages. The most obvious disadvantage is, that P together with (P \u2192 Q) does not imply Q. This is why we prefer the latter method, where the -operator is in the conclusion of the conditional. We will come back to this point in Subsection 4.1 where we consider several formalization variants of the well-known problem of contrary-to-duty-obligations. For a more detailed discussion of such aspects we refer to [10]."}, {"heading": "3 Automated Reasoning for Deontic Logic", "text": "Deontic logic is the logic of choice when formalizing knowledge about norms like the representation of legal knowledge. However, there are only few automated theorem provers specially dedicated for deontic logic and used by deontic logicians (see [1,3]). Nonetheless, numerous approaches to translate modal logics into (decidable fragments of) first-order predicate logics are stated in the literature. A nice overview including many relevant references is given in [19].\nIn this paper, we describe how to use the Hyper theorem prover [22] to handle deontic logic knowledge bases. These knowledge bases can be translated efficiently into description logic formulae. Hyper is a theorem prover for firstorder logic with equality. In addition to that, Hyper is a decision procedure for the description logic SHIQ [6].\nIn Figure 1, we depict the entire workflow from a given SDL knowledge base to the final input into the Hyper theorem prover. In the following, we describe these three steps in more detail.\n4 3.1 Transformation from Deontic Logic into ALC\nFirst, we will show how to translate SDL knowledge bases into ALC knowledge bases. An ALC knowledge base consists of a TBox and an ABox. The TBox (terminological box) gives information about concepts occurring in the domain of interest and describes concept hierarchies. The ABox (assertional box) introduces individuals and states, to which concepts the individuals belong and how they are interconnected via relations called roles . The ABox contains assertional knowledge and can be seen as the representation of a state of the world. We do not give the syntax and semantics of ALC here and refer the reader to [2].\nThere is a strong connection between modal logic and the description logic ALC. As shown in [18], the description logic ALC is a notational variant of the modal logic Kn. Therefore any formula given in the modal logic Kn can be translated into an ALC concept and vice versa. Since we are only considering a modal logic as opposed to a multimodal logic, we will omit the part of the translation handling the multimodal part of the logic. Mapping \u03d5 translating from modal logic K formulae to ALC concepts is inductively defined as follows:\n\u03d5(>) = > \u03d5(\u22a5) = \u22a5 \u03d5(b) = b\n\u03d5(\u00acc) = \u00ac\u03d5(c) \u03d5(c \u2227 d) = \u03d5(c) u \u03d5(d) \u03d5(c \u2228 d) = \u03d5(c) t \u03d5(d) \u03d5( c) = \u2200r.\u03d5(c) \u03d5(\u2666c) = \u2203r.\u03d5(c)\nNote that the mapping \u03d5 is a one-to-one mapping. Formulae given in SDL can be translated into ALC concepts using the above introduced \u03d5 mapping. For a normative system consisting of the set of deontic logic formulae N = {F1, . . . , Fn} the translation is defined as the conjunctive combination of the translation of all deontic logic formulae in N :\n\u03d5(N ) = \u03d5(F1) u . . . u \u03d5(Fn)\nNote that \u03d5(N ) does not yet contain the translation of the seriality axiom. As shown in [12] the seriality axiom can be translated into the following TBox:\nT = {> v \u2203r.>}\nwith r the atomic role introduced by the mapping \u03d5. For our application, the result of the translation of a normative systemN and the seriality axiom is an ALC knowledge base \u03a6(N ) = (T ,A), where the TBox T consists of the translation of the seriality axiom and the ABox A = {(\u03d5(N ))(a)} for a new individual a. In description logics performing a satisfiability test of a concept C w.r.t. a TBox is usually done by adding a new individual a together with the ABox assertion C(a). For the sake of simplicity, we do this construction already during the transformation of \u03a6 by adding (\u03d5(N ))(a) to the ABox.\n5 An advantage of the translation of deontic logic formulae into an ALC knowledge base is the existence of a TBox inALC. This makes it possible to add further axioms to the TBox. For example we can add certain norms that we want to be satisfied in all reachable worlds into the TBox.\n3.2 Translation from ALC into DL-Clauses\nNext we transform the ALC knowledge base into so called DL-clauses introduced in [15] which represent the input format for the Hyper theorem prover.\nDL-clauses are constructed from so called atoms. An atom is of the form b(s), r(s, t), \u2203r.b(s) or \u2203r.\u00acb(s) for b an atomic concept and s and t individuals or variables. They are universally quantified implications of the form\nm\u2227 i=1 ui \u2192 n\u2228 j=1 vj\nwhere the ui are atoms of the form b(s) or r(s, t) and the vj may be arbitrary DL-clause atoms, i.e. including existential quantification, with m,n \u2265 0.\nComparing the syntax of DL-clauses to the syntax of first order logic clauses written as implications, the first obvious difference is the absence of function symbols. The second difference is the fact, that in DL-clauses all atoms are constructed from unary or binary predicates. The most interesting difference however is the fact, that the head of a DL-clause is allowed to contain atoms of the form \u2203r.b(s).\nThe basic idea of the translation of an ALC knowledge base into DL-clauses is that the subsumption in a TBox assertion is interpreted as an implication from the left to the right side. Further concepts are translated to unary and roles to binary predicates. Depending on the structure of the assertion, auxiliary concepts are introduced. For example the TBox axiom\nd v \u2203r.b t \u2200r.c\ncorresponds to the following DL-clause\nd(x) \u2227 r(x, y)\u2192 c(y) \u2228 \u2203r.b(x)\nFor detailed definitions of both syntax and semantics of DL-clauses and the translation into DL-clauses, we refer the reader to [15]. The translation preserves equivalence, avoids an exponential blowup by using a well-known structural transformation [17] and can be computed in polynomial time. In the following, for an ALC knowledge base K = (T ,A), the corresponding set of DL-clauses is denoted by \u03c9(K)."}, {"heading": "3.3 Reasoning Tasks", "text": "With the help of Hyper, we can solve several interesting reasoning tasks:\n6 \u2013 Consistency checking of normative systems: In practice, normative systems can be very large. Therefore it is not easy to see, if a given normative system is consistent. The Hyper theorem prover can be used to check consistency of a normative system N . We first translate N into an ALC knowledge base \u03a6(N ), then translate \u03a6(N ) into the set \u03c9(\u03a6(N )) of DLclauses. Then we can check the consistency of \u03c9(\u03a6(N )) using Hyper.\n\u2013 Evaluation of normative systems: Given several normative systems, we use Hyper to find out for which normative system guarantees a desired outcome is guaranteed. \u2013 Independence checking: Given a normative system N and a formula F representing a norm, we can check whether F is independent from N . If F is independent from N , then F is not a logical consequence of N .\nIn Section 4, we will give detailed examples for those tasks. Subsection 4.1 gives an example for a consistency check of a normative system and illustrates how the independence of a formula from a normative system can be decided. In Subsection 4.2, we use an example from multi-agent systems to show how to evaluate normative systems."}, {"heading": "4 Applications", "text": "The literature on deontic logic deals with numerous small but nonetheless interesting examples. They are mostly used to show typical problems or special features of the logic under consideration (cf. [10]). In Subsection 4.1, we deal with one of these examples. In Subsection 4.2, we formalize a \u2018real-life\u2019 problem from multi-agent research."}, {"heading": "4.1 Contrary-to-duty Obligations", "text": "Let us now consider consistency testing of normative systems and independence checking. As an example, we examine the well-known problem of contrary-to-duty obligations introduced in [8]:\n(1) a ought not steal. (2) a steals. (3) If a steals, he ought to be punished for stealing. (4) If a does not steal, he ought not be punished for stealing.\nTable 1 shows three different formalizations of this problem. Those formalizations are well-known from the literature [5,14,13,21]:\nConsistency Testing of Normative Systems The contrary-to-duty obligation formalized above is a very small example. In practice, normative systems can be rather complex. This makes it difficult to see if a normative system is consistent. We will show how to use the Hyper theorem prover to check the consistency of a given normative system.\nAs an example, we consider formalization N1 given in Table 1 which, according to [21], is inconsistent. We will use Hyper to show this inconsistency. For this, we first translate normative system N1 into an ALC knowledge base \u03a6(N1). Table 2 shows \u03d5(N1).\nTo perform the satisfiability test, we transform the description logic representation \u03a6(N1) into a set of DL-clauses \u03c9(\u03a6(N1)). Hyper constructs a hypertableau for \u03c9(\u03a6(N1)). This hypertableau is closed and therefore we can conclude that N1 is inconsistent.\nIndependence Checking Normative System N2 given in Table 1 is consistent. However it has another drawback: The different formulae in this formalization are not independent from another. Formula (3) is a logical consequence of (1), because (s\u2192 p) \u2261 (\u00acs \u2228 p) (definition of \u2192) which clearly is implied by the (subsuming) formula (1) \u00acs. We can use Hyper to show this by transforming the problem into a satisfiability test. For this, we remove formula (3) from N2 and add its negation \u00ac (s \u2192 p) to N2. If the resulting normative system is inconsistent, we can conclude, that formula (3) is not independent from the other formulae in N2.\nThe problem of independence of formulae given in a normative system is interesting in practice as well. If an existing normative system is extended with some new formulae, it is interesting to know, whether the new formulae are independent from the original normative system. This can be checked automatically using Hyper as described above.\nIn the same way, we can show, that formula (4) is not independent from N3. Note that only this normative system is both consistent and represents all conditionals carefully, i.e. with formulae of the form P \u2192 Q (cf. Section 2). Only for this formalization we have: If a steals in the actual world, a will be punished in the corresponding reachable ideal world.\n8"}, {"heading": "4.2 An Example from Multi-agent Systems", "text": "In multi-agent systems, there is a relatively new area of research, namely the formalization of \u2018robot ethics\u2019. It aims at defining formal rules for the behavior of agents and to prove certain properties. As an example consider Asimov\u2019s laws, which aim at regulating the relation between robots and humans. In [7] the authors depict a small example of two surgery robots obeying ethical codes concerning their work. These codes are expressed by means of MADL, which is an extension of standard deontic logic with two operators. In [16] an axiomatization of MADL is given. Further it is asserted, that MADL is not essentially different from standard deontic logic. This is why we use SDL to model the example.\nFormalization in SDL In our example, there are two robots ag1 and ag2 in a hospital. For sake of simplicity, each robot can perform one specific action: ag1 can terminate a person\u2019s life support and ag2 can delay the delivery of pain medication. In [7] four different ethical codes J , J ?, O and O? are considered:\n\u2013 \u201cIf ethical code J holds, then robot ag1 ought to take care, that life support is terminated.\u201d This is formalized as:\nJ \u2192 act(ag1 , term)\n\u2013 \u201cIf ethical code J ? holds, then code J holds, and robot ag2 ought to take care, that the delivery of pain medication is delayed.\u201d This is formalized as:\nJ ? \u2192 J \u2227 J ? \u2192 act(ag2 , delay)\n\u2013 \u201cIf ethical code O holds, then robot ag2 ought to take care, that delivery of pain medication is not delayed.\u201d This is formalized as:\nO \u2192 \u00acact(ag2 , delay)\n\u2013 \u201cIf ethical code O? holds, then code O holds, and robot ag1 ought to take care, that life support is not terminated.\u201d This is formalized as:\nO? \u2192 O \u2227O? \u2192 \u00acact(ag1 , term)\nFurther we give a slightly modified version of the evaluation of the robot\u2019s acts given in [7], where (+!!) describes the most and (\u2212!!) the least desired outcome. Note that terms like (+!!) are just propositional atomic formulae here.\nact(ag1 , term) \u2227 act(ag2 , delay)\u2192 (\u2212!!) (1) act(ag1 , term) \u2227 \u00acact(ag2 , delay)\u2192 (\u2212!) (2) \u00acact(ag1 , term) \u2227 act(ag2 , delay)\u2192 (\u2212) (3) \u00acact(ag1 , term) \u2227 \u00acact(ag2 , delay)\u2192 (+!!) (4)\nThese formulae evaluate the outcome of the robots\u2019 actions. It makes sense to assume, that this evaluation is effective in all reachable worlds. This is why\nwe add formulae stating that formulae (1)\u2013(4) hold in all reachable worlds. For example, for (1) we add:\n(act(ag1 , term) \u2227 act(ag2 , delay)\u2192 (\u2212!!)) (5)\nSince our example does not include nested modal operators, the formulae of the form (5) are sufficient to spread the evaluation formulae to all reachable worlds. The normative system N formalizing this example consists of the formalization of the four ethical codes and the formulae for the evaluation of the robots actions.\nReduction to a Satisfiability Test A possible query would be to ask, if the most desirable outcome (+!!) will come to pass, if ethical code O? is operative. This query can be translated into a satisfiability test: If\nN \u2227O? \u2227 \u2666\u00ac(+!!)\nis unsatisfiable, then ethical code O? ensures outcome (+!!).\nTranslation into Description Logic As described in Section 3.1, we translate normative system N given in the previous section into an ALC knowledge base \u03a6(N ) = (T ,A). Table 3 shows the result of translating N into \u03d5(N ).\nWe further add the following two assertions to the ABox A:\nO?(a)\n\u2203r.\u00ac(+!!)(a)\nNext we translate the knowledge base into DL-clauses and use Hyper to test the satisfiability of the resulting set of DL-clauses. Using further satisfiability tests, we can show, that ethical codes J , J? or O are not sufficient to guarantee the most desired outcome (+!!).\nFormalization in Description Logic using a TBox In the formalization given in the previous subsection, we added formulae stating that the evaluation\n10\nof the agents\u2019 actions holds in all worlds, which are reachable in one step, see (5) for an example. In our case it is sufficient to add formulae of the form (5) because the formalization does not include nested modal operators. In general it is desirable to express that those formulae hold in all reachable worlds including worlds reachable in more than one step. However this would mean to either add infinitely many formulae or to use a universal modality, i.e. the reflexivetransitive closure of the respective simple modality.\nIn description logics we can use a more elegant way to formalize that all worlds are supposed to fulfill certain formulae. Description logic knowledge bases contain a TBox including the terminological knowledge. Every individual is supposed to fulfill the assertions given in the TBox. Hence, we can add the formulae stating the evaluation of the agents\u2019 actions into the TBox. For this, we reformulate implication (\u2192) by subsumption (v). We model the deontic logic formulae given in Table 3 by the following TBox T :\n> v \u2203r.> J v \u2200r.act(ag1 , term) J? v J J? v \u2200r.act(ag2 , delay) O v \u2200r.\u00acact(ag2 , delay) O? v O O? v \u2200r.\u00acact(ag1, term)\nact(ag1 , term) u act(ag2 , delay) v (\u2212!!) act(ag1 , term) u \u00acact(ag2 , delay) v (\u2212!) \u00acact(ag1 , term) u act(ag2 , delay) v (\u2212) \u00acact(ag1 , term) u \u00acact(ag2 , delay) v (+!!)\nReduction to a Satisfiability Test Like in the previous section, we now want to know, if the most desirable outcome (+!!) will come to pass, if ethical code O? is operative. We perform this test by checking the satisfiability of the description logic knowledge base K = (T ,A), with T as given above and A given as:\nA = {O?(a),\u2203r.\u00ac(+!!)(a)}\nIf this knowledge base is unsatisfiable, we can conclude, that (+!!) will come to pass, if O? is operative. Again we can perform this satisfiability test, by translating the TBox and the ABox into DL-clauses and using Hyper to check the satisfiability. We obtain the desired result, namely that (only) ethical code O? leads to the most desirable behavior (+!!)."}, {"heading": "4.3 Experiments", "text": "We formalized the examples introduced in this section and tested it with the Hyper theorem prover as described above. Since all formalizations are available\n11\nin ALC, we used the description logic reasoner Pellet [20] to show the unsatisfiability of the formalizations as well. Table 4 shows the results of our experiments. In the first column we see the time in seconds the two reasoners needed to show the unsatisfiability of the formalization of the example from multi-agent systems. For Hyper we give two different numbers. The first number is the time Hyper needs to show the unsatisfiability given the set of DL-clauses. In addition to that the second number contains the time needed to transform the ALC knowledge base into DL-clauses. The second column gives the runtimes for the example from multi-agent systems using the formalization with a TBox. And in the last column we present the runtimes for the consistency test of normative system N1 from the example on contrary-to-duty obligations.\nFor the examples we considered, the runtimes of Pellet and Hyper are comparable. Further investigation and comparison with other modal and/or description logic reasoning tools is required and subject of future work. In order to use Hyper to perform the satisfiability tests, we first have to translate the examples into DL-clauses. Our experiments show, that this translation is not harmful."}, {"heading": "5 Conclusion", "text": "In this paper, we have demonstrated that by means of deontic logic complex normative systems can be formalized easily. These formalizations can be checked effectively with respect to consistency and independence from additional formulae. For normative systems described with deontic logic, there is a one-to-one translation into description logic formulae. These formula can be checked automatically by automated theorem provers, which is in our case Hyper.\nWe are aware that deontic logic has several limitations. This is why future work aims at using more recent formalisms. For example we want to apply deontic logic in the context of natural-language question-answering systems. There the normative knowledge in large databases often leads to inconsistencies, which motivates us to consider combinations of deontic with defeasible logic.\n12"}], "references": [{"title": "Ked: A deontic theorem prover", "author": ["A. Artosi", "P. Cattabriga", "G. Governatori"], "venue": "In On Legal Application of Logic Programming, ICLP\u201994, pages 60\u201376,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1994}, {"title": "Basic description logics", "author": ["F. Baader", "W. Nutt"], "venue": "In F. Baader, D. Calvanese, D. McGuinness, D. Nardi, and P. F. Patel-Schneider, editors, The Description Logic Handbook: Theory, Implementation, and Applications, pages 43\u201395. Cambridge University Press,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2003}, {"title": "A modal defeasible reasoner of deontic logic for the semantic web", "author": ["N. Bassiliades", "E. Kontopoulos", "G. Governatori", "G. Antoniou"], "venue": "Int. J. Semant. Web Inf. Syst., 7(1):18\u201343, Jan.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2011}, {"title": "Hyper tableaux", "author": ["P. Baumgartner", "U. Furbach", "I. Niemel\u00e4"], "venue": "In J. J. Alferes, L. M. Pereira, and E. Orlowska, editors, JELIA, volume 1126 of Lecture Notes in Computer Science, pages 1\u201317. Springer,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1996}, {"title": "Tolerating normative conflicts in deontic logic", "author": ["M. Beirlaen"], "venue": "PhD thesis, Ghent University,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2012}, {"title": "and C", "author": ["M. Bender", "B. Pelzer"], "venue": "Schon. System description: E-KRHyper 1.4 - extensions for unique names and description logic. In M. P. Bonacina, editor, CADE-24, volume 7898 of LNCS, pages 126\u2013134. Springer,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2013}, {"title": "Toward a general logicist methodology for engineering ethically correct robots", "author": ["S. Bringsjord", "K. Arkoudas", "P. Bello"], "venue": "IEEE Intelligent Systems, 21(4):38\u201344,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2006}, {"title": "Contrary-to-duty imperatives and deontic logic", "author": ["R.M. Chisolm"], "venue": "Analysis, 23:33\u2013 36,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1963}, {"title": "Deontic logic for human reasoning", "author": ["U. Furbach", "C. Schon"], "venue": "CoRR, abs/1404.6974,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2014}, {"title": "R", "author": ["D. Gabbay", "J. Horty", "X. Parent"], "venue": "van der Meyden, and L. van der Torre, editors. Handbook of Deontic Logic and Normative Systems. College Publications,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2013}, {"title": "Agency and Deontic Logic", "author": ["J.F. Horty"], "venue": "Oxford University Press, Oxford,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2001}, {"title": "Description logics of context", "author": ["S. Klarman", "V. Guti\u00e9rrez-Basulto"], "venue": "Journal of Logic and Computation,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2013}, {"title": "Deontic logic", "author": ["P. McNamara"], "venue": "In E. N. Zalta, editor, The Stanford Encyclopedia of Philosophy. Stanford University,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2010}, {"title": "Norms, Logics and Information Systems: New Studies in Deontic Logic and Computer Science", "author": ["P. McNamara", "H. Prakken"], "venue": "Frontiers in artificial intelligence and applications. IOS Press,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1999}, {"title": "Optimized Reasoning in Description Logics using Hypertableaux", "author": ["B. Motik", "R. Shearer", "I. Horrocks"], "venue": "In F. Pfenning, editor, CADE-21, volume 4603 of LNAI. Springer,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2007}, {"title": "Utilitarian deontic logic", "author": ["Y. Murakami"], "venue": "In in \u2018Proceedings of the Fifth International Conference on Advances in Modal Logic (AiML 2004, pages 288\u2013302,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2004}, {"title": "A structure-preserving clause form translation", "author": ["D.A. Plaisted", "S. Greenbaum"], "venue": "J. Symb. Comput., 2(3):293\u2013304,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1986}, {"title": "A correspondence theory for terminological logics: Preliminary report", "author": ["K. Schild"], "venue": "In In Proc. of IJCAI-91, pages 466\u2013471,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1991}, {"title": "First-order resolution methods for modal logics", "author": ["R.A. Schmidt", "U. Hustadt"], "venue": "In A. Voronkov and C. Weidenbach, editors, Programming Logics \u2013 Essays in Memory of Harald Ganzinger, volume 7797 of LNCS, pages 345\u2013391. Springer,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2013}, {"title": "Pellet: A practical OWL-DL reasoner", "author": ["E. Sirin", "B. Parsia", "B.C. Grau", "A. Kalyanpur", "Y. Katz"], "venue": "Web Semantics: Science, Services and Agents on the World Wide Web, 5(2):51\u201353, June", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2007}, {"title": "Einf\u00fchrung in die Logik der Normen", "author": ["F. von Kutschera"], "venue": "Werte und Entscheidungen", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 1973}, {"title": "System description: E-KRHyper", "author": ["C. Wernhard", "B. Pelzer"], "venue": "In F. Pfennig, editor, CADE-21, volume 4603 of LNAI, pages 503\u2013513. Springer,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2007}], "referenceMentions": [{"referenceID": 10, "context": "Various kinds of deontic logics are discussed for different application domains like argumentation theory, legal reasoning, and acts in multi-agent systems [11].", "startOffset": 156, "endOffset": 160}, {"referenceID": 8, "context": "For example in [9] there is a discussion of some of these problems including solutions with the help of deontic logic.", "startOffset": 15, "endOffset": 18}, {"referenceID": 21, "context": "DL-clauses can be decided by the first-order reasoning system Hyper [22], which uses the hypertableau calculus from [4].", "startOffset": 68, "endOffset": 72}, {"referenceID": 3, "context": "DL-clauses can be decided by the first-order reasoning system Hyper [22], which uses the hypertableau calculus from [4].", "startOffset": 116, "endOffset": 119}, {"referenceID": 20, "context": "In [21] there is a careful discussion which of these two possibilities should be used for conditional norms.", "startOffset": 3, "endOffset": 7}, {"referenceID": 9, "context": "For a more detailed discussion of such aspects we refer to [10].", "startOffset": 59, "endOffset": 63}, {"referenceID": 0, "context": "However, there are only few automated theorem provers specially dedicated for deontic logic and used by deontic logicians (see [1,3]).", "startOffset": 127, "endOffset": 132}, {"referenceID": 2, "context": "However, there are only few automated theorem provers specially dedicated for deontic logic and used by deontic logicians (see [1,3]).", "startOffset": 127, "endOffset": 132}, {"referenceID": 18, "context": "A nice overview including many relevant references is given in [19].", "startOffset": 63, "endOffset": 67}, {"referenceID": 21, "context": "In this paper, we describe how to use the Hyper theorem prover [22] to handle deontic logic knowledge bases.", "startOffset": 63, "endOffset": 67}, {"referenceID": 5, "context": "In addition to that, Hyper is a decision procedure for the description logic SHIQ [6].", "startOffset": 82, "endOffset": 85}, {"referenceID": 1, "context": "We do not give the syntax and semantics of ALC here and refer the reader to [2].", "startOffset": 76, "endOffset": 79}, {"referenceID": 17, "context": "As shown in [18], the description logic ALC is a notational variant of the modal logic Kn.", "startOffset": 12, "endOffset": 16}, {"referenceID": 11, "context": "As shown in [12] the seriality axiom can be translated into the following TBox:", "startOffset": 12, "endOffset": 16}, {"referenceID": 14, "context": "Next we transform the ALC knowledge base into so called DL-clauses introduced in [15] which represent the input format for the Hyper theorem prover.", "startOffset": 81, "endOffset": 85}, {"referenceID": 14, "context": "For detailed definitions of both syntax and semantics of DL-clauses and the translation into DL-clauses, we refer the reader to [15].", "startOffset": 128, "endOffset": 132}, {"referenceID": 16, "context": "The translation preserves equivalence, avoids an exponential blowup by using a well-known structural transformation [17] and can be computed in polynomial time.", "startOffset": 116, "endOffset": 120}, {"referenceID": 9, "context": "[10]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "As an example, we examine the well-known problem of contrary-to-duty obligations introduced in [8]:", "startOffset": 95, "endOffset": 98}, {"referenceID": 4, "context": "Those formalizations are well-known from the literature [5,14,13,21]:", "startOffset": 56, "endOffset": 68}, {"referenceID": 13, "context": "Those formalizations are well-known from the literature [5,14,13,21]:", "startOffset": 56, "endOffset": 68}, {"referenceID": 12, "context": "Those formalizations are well-known from the literature [5,14,13,21]:", "startOffset": 56, "endOffset": 68}, {"referenceID": 20, "context": "Those formalizations are well-known from the literature [5,14,13,21]:", "startOffset": 56, "endOffset": 68}, {"referenceID": 7, "context": "Table 1: Formalizations of the contrary-to-duty obligation introduced in [8].", "startOffset": 73, "endOffset": 76}, {"referenceID": 20, "context": "As an example, we consider formalization N1 given in Table 1 which, according to [21], is inconsistent.", "startOffset": 81, "endOffset": 85}, {"referenceID": 6, "context": "In [7] the authors depict a small example of two surgery robots obeying ethical codes concerning their work.", "startOffset": 3, "endOffset": 6}, {"referenceID": 15, "context": "In [16] an axiomatization of MADL is given.", "startOffset": 3, "endOffset": 7}, {"referenceID": 6, "context": "In [7] four different ethical codes J , J , O and O are considered:", "startOffset": 3, "endOffset": 6}, {"referenceID": 6, "context": "Further we give a slightly modified version of the evaluation of the robot\u2019s acts given in [7], where (+!!) describes the most and (\u2212!!) the least desired outcome.", "startOffset": 91, "endOffset": 94}, {"referenceID": 19, "context": "in ALC, we used the description logic reasoner Pellet [20] to show the unsatisfiability of the formalizations as well.", "startOffset": 54, "endOffset": 58}], "year": 2014, "abstractText": "Deontic logic is a very well researched branch of mathematical logic and philosophy. Various kinds of deontic logics are discussed for different application domains like argumentation theory, legal reasoning, and acts in multi-agent systems. In this paper, we show how standard deontic logic can be stepwise transformed into description logic and DLclauses, such that it can be processed by Hyper, a high performance theorem prover which uses a hypertableau calculus. Two use cases, one from multi-agent research and one from the development of normative system are investigated.", "creator": "LaTeX with hyperref package"}}}