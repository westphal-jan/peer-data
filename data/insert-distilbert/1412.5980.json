{"id": "1412.5980", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Dec-2014", "title": "GraATP: A Graph Theoretic Approach for Automated Theorem Proving in Plane Geometry", "abstract": "automated theorem proving ( atp ) is an established branch of dynamic artificial intelligence. the purpose of analyzing atp is to design a system which can automatically figure out through an ax algorithm either to prove or disprove a straightforward mathematical claim, on the basis of a set of given null premises, using a set of fundamental postulates and following the method of logical inference. in this paper, we propose agile graatp, a generalized framework for automated theorem proving in plane programming geometry. our proposed method translates the geometric entities into nodes of a graph and the relations between them as edges of that graph. the automated system searches for different ways to periodically reach the wrong conclusion for a claim via graph traversal by which the validity of the geometric theorem is examined.", "histories": [["v1", "Thu, 18 Dec 2014 18:10:03 GMT  (151kb,D)", "http://arxiv.org/abs/1412.5980v1", "The 8th International Conference on Software, Knowledge, Information Management and Applications (SKIMA 2014)"]], "COMMENTS": "The 8th International Conference on Software, Knowledge, Information Management and Applications (SKIMA 2014)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["mohammad murtaza mahmud", "swakkhar shatabda", "mohammad nurul huda"], "accepted": false, "id": "1412.5980"}, "pdf": {"name": "1412.5980.pdf", "metadata": {"source": "CRF", "title": "GraATP: A Graph Theoretic Approach for Automated Theorem Proving in Plane Geometry", "authors": ["Mohammad Murtaza Mahmud", "Swakkhar Shatabda", "Mohammad Nurul Huda"], "emails": ["mohammadmurtazamahmud@gmail.com,", "swakkhar@cse.uiu.ac.bd,", "mnh@cse.uiu.ac.bd"], "sections": [{"heading": null, "text": "Automated Theorem Proving (ATP) is an established branch of Artificial Intelligence. The purpose of ATP is to design a system which can automatically figure out an algorithm either to prove or disprove a mathematical claim, on the basis of a set of given premises, using a set of fundamental postulates and following the method of logical inference. In this paper, we propose GraATP, a generalized framework for automated theorem proving in plane geometry. Our proposed method translates the geometric entities into nodes of a graph and the relations between them as edges of that graph. The automated system searches for different ways to reach the conclusion for a claim via graph traversal by which the validity of the geometric theorem is examined."}, {"heading": "1 Introduction", "text": "In a geometric theorem, basically we are given a set of hypotheses which we have either to prove or disprove. Depending on these hypotheses, we figure out the whole geometric system. A list of fundamental postulates and previously proven theorems, are known. They are used to infer the related geometric facts from the given hypotheses. These derived geometric facts which have been discovered so far are used further to derive more geometric facts until the conclusion is reached about the claim of the given theorem. Alternatively, it is possible to figure out the geometric facts which must be true if the claim is to be true. To do so, one needs to use the fundamental geometric postulates and apply the process of logical inference. Consequently, the theorem-prover infers what other geometric facts are required to be true if the previously derived geometric facts are to be remained satisfied. The process is carried on until the theorem-prover discovers that the required facts for the validity of the final claim are given as the hypotheses of the theorem. An \u2018intelligent thinker\u2019 thinks in both ways to generate a particular algorithm to prove a theorem. Automated Theorem Proving (ATP) is enabling a machine (computer) to figure out an algorithm to prove a given theorem by the mechanization of the above mentioned process.\nar X\niv :1\n41 2.\n59 80\nv1 [\ncs .A\nI] 1\n8 D\nec 2\nATP has been established as a branch of Artificial Intelligence for several decades. In 1954 Martin Davis, an American Mathematician programmed Presburgers algorithm [1]. Later Allen Newell, Herbert A. Simon and J. C. Shaw developed Logic Theory Machine around 1955-56 [2]. In 1959 they created General Problem Solver (G.P.S.) [3] which was able to solve any symbolic problem. Gelernter, J. R. Hanson and D.W. Loveland worked on geometric theorem proving implementing traditional proof method [4]. However, their method suffers difficulties of the explosion of the search space. Later Wen-Tsun Wu developed an algebraic method [5] which could prove geometric theorems more efficiently, but this method involves lots of calculations with polynomials which make the proof hardly readable. Chou, Gao and Zhang [6] developed \u2018area method\u2019 which is able to produce short and readable proofs of geometric theorems. In his paper, David A. Plaisted [7] reviewed different techniques of ATP. Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17]. In another paper, Joran Elias [5] discussed Wus method on geometric theorem proving.\nThere are two broad categories of techniques to prove a geometric theorem. They are: Euclidean Logical Inference methods [18] and Cartesian Algebraic methods [19]. The former method uses logical inference to reach at conclusion from a set of premises. On the other hand the later method converts a given set of premises into a set of algebraic equations and then solves those equations for unknown parameters. In this paper, we propose GraATP, an ATP combining both algebraic method (Cartesian Analytical Geometry) and logical inference method (Euclidian geometry) to prove geometric theorems. Our proposed method translates the geometric entities into nodes of a graph and the relations between them as edges of that graph. The automated system searches for different ways to reach the conclusion for a claim via graph traversal by which the validity of the geometric theorem is examined.\nRest of the paper is organized as follows: first we discuss the preliminaries required to figure out a geometric structure in Section 2. We describe Cartesian analytical geometry and traditional Euclidean proof using logical inference method in Section 2.1 and Section 2.2 respectively. In Section 3, we propose our method combining these two methods to prove geometric theorems. Finally, we conclude the paper with an outline of the future work in Section 4."}, {"heading": "2 Preliminaries", "text": "To define a geometric system, we use four elementary concepts of geometry: point, straight line, angle and circular arc. Usually, we choose a point and a line passing through the point as an initial reference. Position of a point is specified by a distance from another previously defined point along a particular straight line. Orientation\nof a line is specified by the angle made by it with another previously specified line and the point of intersections between the lines. A circular arc is specified by the position of its central point and it radius. For example, following steps are required to derive a parallelogram in Figure 1:\n1. A is a reference point\n2. EF passing through A is a reference line\n3. Line GH passes through A, angle 6 FAH = x\n4. C is a point on GH where AC = b\n5. Line KL passes through C, angle 6 KCG = x\n6. Line IJ passes through B, angle 6 FBJ = x\n7. D is the intersection of the line KL and IJ is determinable since KL and IJ are specified\n8. {AC,CD,DB,BA} is the parallelogram\nOnce we able to figure out a complete geometric structure, we can explore different dimensions (lengths of the lines, angles between lines, etc) of the structure. Hence, we can test whether a certain claim is true or false knowing these dimensions."}, {"heading": "2.1 Cartesian Method", "text": "In Cartesian method, geometry is combined with algebra. Two axes, perpendicular to each other and their point of intersection, i.e. origin, are specified. A point on a plane is specified by pair of coordinates which are the distances of the point from the origin along the axes. Curves and straight lines are specified by algebraic equations. Solving these equations unknown dimensions are worked out. Finally, facts to be proven are verified.\nLets consider the following example from [5]. We have to prove that diagonals of a parallelogram bisect each other. Please see Figure 2. Here, the hypotheses are - i) OACB is a parallelogram =\u21d2 OB||AC,OA||BC,\nOC and AB are diagonals, ii) D is the point of intersection of AB and OC. First, we have to decompose these statements into a couple of equations.\nAs mentioned earlier, we have to specify the points of our interest-O,A,C,B andD each with two coordinates. Let O,A and B are denoted by (0, 0), (x, 0) and (y, z) respectively. Here, x, y and z are arbitrary parameters what we have chosen. Once we choose x, y and z, the coordinates of C and D become fixed depending on (x, y, z) according to the hypotheses. Let us assume that coordinates of C and D be (u, v) and (p, q). Since OB and AC are parallel to each other, their slopes are equal too. Hence we get,\nuz \u2212 zx = vy (1)\nOn the other hand, OA and BC are parallel to each other, their slopes are equal too. Hence we get,\nv = z (2)\nWe can work out u and v in terms of x, y and z by solving Equation 1 and Equation 2. Finally, we find out the length of OD,DC,BD and AD by using Pythagoras theorem. If we can show, OD = DC and BD = AD then the theorem is proved."}, {"heading": "2.2 Euclidean Logical Inference Method", "text": "In logical inference method, a set of axioms, previously proved theorems and hypotheses are used to discover the relationship among different entities (lengths of line segments or arcs, positions of points, amount of angles and equalities or similarities of finite regions like triangles) of a geometric structure. These relationships are used to proceed further to infer relationship among different other entities from the previously derived relationships. This process continues until the relationship between two particular entities of interest is discovered. Let\u2019s think about the previous example: diagonals of a parallelogram bisect each other.\nWe have to discover the relationship between the entities (here length of two line segments): OD and CD as well as BD and AD. First of all, we will find out relations exploiting the hypotheses. Since OACB is a parallelogram, (OB,AC) and (OA,BC) are opposite sides, they are parallel and equal to each other. BA is the\ncommon sector of OB and AC. Hence the 6 OBA is equal to the 6 BAC. Here, we used a previously discovered theorem: if a line intersects two parallel lines then the alternate angles created in the points of intersection are equal. Similarly, we find out the relationship between 6 BOC and 6 OCA. Since D is a point on AB, angle 6 OBA = 6 OBD. Similarly, 6 BAC = 6 DAC. Again D is a point on OC. Hence, 6 BOC = 6 BOD and 6 OCA = 6 DCA. Now in 4BOD and 4ACD,OB = AC, 6 OBD = 6 DAC and 6 BOD = 6 ACD. Therefore, 4BOD and 4ACD are equal. Here, we used another previously discovered theorem: if two triangles have a side of equal length and two adjacent angles of equal amount each, then the triangles are equal. OD is the opposite side of the 6 OBD and CD is the opposite side of the 6 CAD. Since 4BOD and 4ACD are equal and 6 OBD = 6 CAD =\u21d2 OD = CD. Similarly, BD = AD. This is the desired relationship to prove the theorem. Our process of searching information on how different entities are related with each other throughout the geometric structure stops here."}, {"heading": "3 GraATP: Our proposed ATP Framework", "text": "In the previous section, we discussed two manual approaches for geometric theorem proving. If we compare between two ways, at a first glance, Cartesian algebraic method seems complicated than the logical inference method. Algebraic method is mechanical, all we have to do is to fix the position coordinates of some particular points, discover equations of straight lines or curves appearing in the geometric structure and find out the coordinates of other points as functions of the co-ordinates of the previously fixed points. When we know all dimensions of the structure we test whether the final claim is true or false. On the other hand, Euclidean logical inference method requires more heuristic knowledge, i.e. more \u2018intelligence\u2019 to discover the hidden relationship among different entities of the structure. Prover\u2019s skill to observe the geometric structure, and retrieve the previously discovered theorems, related to the problem, from the memory, play important role here. Moreover, whether the searching process (the process of discovering relationship among the entities) approaches towards the goal (testing the relationship which is supposed to be proven) depends on the provers intuition. By comparing the two methods, we can conclude that the automation of Cartesian method is easier than the logical inference method.\nHere, we propose a primitive approach of finding out an algorithm to prove a geometric theorem in an automated way. There are several previously proposed ways: Wus method [5], Area method [6], etc. Our goal is to build up a framework of finding an algorithm that resembles the way in which we the human or intelligent theorem prover thinks to prove a theorem. Lets discuss the previous example again in a different way. Consider the geometric system in Figure 3.\nOur hypotheses are as follows:\n1. OA = x\n2. E lies on OA\n3. BE is perpendicular to OA\n4. OE = y\n5. EB = z\n6. OB||AC\n7. OA||BC\n8. D lies on AB\n9. D lies on OC\n10. DF is perpendicular to OF\n11. A lies on OG\n12. CG is perpendicular to OG\nWe have to show that OD = CD and BD = DA. Here, we get a unique geometric structure for a unique set of the parameters (x, y, z). Our next goal is to explore the geometric structure to express all of the dimensions (length of the segments of lines) as functions of these three parameters x, y and z. When OD,CD,BD and DA can be expressed as functions of x, y and z, then the process of exploration stops. If OD = CD and BD = DA, then the claim is proved.\nA possible sequence to work out different dimensions are as follows:\n1. Find CG. CG = BE = z (exploiting the fact that BC||OA and G lies on the extension of OA)\n2. Find CGAG (= BE OE = z y ) (exploiting the fact that 4OBE is similar to the 4ACG)\n3. Find AG, since we know CG and the ratio CGAG .\n4. Find OG. OG = OA+AG\n5. Find DFOF (= CG OG) exploiting the fact that 4DFO and 4CGO are similar.\n6. Find AE. AE = OA\u2212OE\n7. Find AFDF which equals to AE BE ( 4ADF and 4ABE are similar)\n8. Express AF = OA\u2212OF\n9. Find DF and OF using the ratio DFOF and OA\u2212OF DF\n10. Find OD,OD = \u221a OF 2 +DF 2 11. Find CD : CD = \u221a (OG\u2212OF )2 + (CG\u2212DF )2\n12. Check whether OD = CD\nHere, if OD and CD are equal then the theorem is proved. In the same way we can check whether AD and\nBD are equal or not.\nNow, we present another example, more complicated than the previous one. Please see Figure 4. Let 4ABC is a triangle with 6 BCA = 90o and let D be the foot of the altitude from C. Let X be a point in the interior of the segment CD. Let K be the point on the segment AX, such that BK = BC. Similarly, let L be the point on the segment BX such that AL = AC. Let M be the point of intersection of AL and BK. We have to show that, MK = ML1.\n5. B lies on the extension of the line AD\n6. X lies on CD where XD = q\n7. A,X are added by a line segment\n8. B,X are added by a line segment\n9. K lies on AX such that BK = BC\n10. L lies on BX such that AL = AC\n11. M is the point of intersection between BK and AL\nHere, we get a unique geometric structure for a unique set of the parameters (a, h, q). Next goal is to explore the geometric structure to express all of the dimensions (length of the segments of lines) as functions of these three parameters a, h and q. When we will be able to express LM and MK in terms of (a, h, q) then the process of exploration stops. If the two functions are equal then the claim if proved.\nOur proposed method GraATP will find out a sequence of the dimensions (which need to be worked out in terms of (a, h, q) of this geometric structure starting from (AD = a,CD = h,XD = q) to (LM,KM). To locate the points K,M and L we draw KN,MR and LS perpendicular to AB. A possible sequence of working out the dimensions is:\n1. Find AC : AC = \u221a a2 + h2\n2. Find BD (exploiting the similarity between 4ABC and 4ADC)\n3. Find BC (exploiting the similarity between 4ABC and 4ADC) 4. Find AX : AX = \u221a a2 + q2 5. Find BX : BX = \u221a BD2 + q2\n6. Find KN and AN (exploiting the similarity between 4AKN and 4AXD, and applying Pythagoras\ntheorem in 4BKN)\n7. Find LS and AS (exploiting the similarity between 4BXD and 4BLS, and applying Pythagoras theorem\nin 4ALS)\n8. Find BN = AB \u2212AN\n9. Find AS = AB \u2212BS\n10. Find MR and AR (exploiting the similarity between triangles (4BMR,4BKN) and (4AMR,4ALS)\n11. Find KM (KM2 = (AR\u2212AN)2 + (KN \u2212MR)2)\n12. Find ML(ML2 = (AS \u2212AR)2 + (LS \u2212MR)2\n13. Check whether KM = ML\nBy observing the commonalities between the two above mentioned techniques we can formulate a general\nway to find a theorem proving algorithm as follows:\n1. Specify a set of parameters by means of which the geometric structure can uniquely be constructed\n2. Find out different dimensions of the structure by means of the predefined parameters [to do so we use\nbasically similarity between triangles and Pythagoras theorem]\n3. Continue step 2 until the dimensions of a set of particular elements are found\n4. Check whether the claim is true\nThe whole process can be represented as the formation of a graph and traversing through the graph. We can represent different dimensions (length of line segment, angle and circular arc-length) and the functions of dimensions (for example, ratio of two line segments) as nodes of the graph. Using the hypotheses of the theorem, we discover the relationships among the dimensions. If we can work out the node A from node B then we draw a directed edge from B to A. In the evolutionary process of the formation of the graph, we put the nodes showing the dimensions which we choose as parameters. In the parallelogram example, these dimensions are OA(= x), OE(= y) and BE(= z).\nFigure 5 (a) shows the initial step. The color gray denotes the nodes that are the chosen as parameters; no other dimensions are required to know to find out their values. Hence, edges from other nodes will not be incident on them. Now, using the hypotheses we will see which dimensions are closely connected to these three dimensions and include them in the graph. Since E lies on OA,AE = OA\u2212OE. We can find out AE from OA and OE. In the second step, we include another node AE (shown in Figure 5 (b)). Also we include two edges one from OA to AE and another from OE to AE; and we draw them with same color (red) and label them with number 1 to indicate that the set of dimensions {OA,OE} is required to be known to find out AE. A same node can be found out by knowing different sets of dimensions. In that case, we would choose different colors and labels.\nIn the next step, we exploit the similarity between 4OBE and 4ACG to discover more relations: CGAG = BE AG . Therefore, we can include another node, this time a ratio of dimensions, CGAG (Figure 5 (c)). Blue edges labeled\nwith number 2 come out from the nodes OE and BE and they are incident on the node CGAG . Next, A lies on OG. Hence OG = OA + AG. We include nodes AG and OG. We draw two edges, one from OA and another one from AG to OG. They are labeled with number 3. The dimension AG is not a parameter and still no edges are incident on it from any other node which can be represented as a function of the parameters OA,OE,BE. That\u2019s why we have made it lime colored (Figure 5 (d)) and put an asterix mark on it. It means that we have to discover more node(s) from which edge(s) will come out to meet AG and connect AG with the nodes which have already been discovered. In the next step, we use the fact that BC||OG to decide that BE = CG. Therefore, we add another node CG and draw an edge from BE to CG (Figure 5 (e)). Now, we can find out AG from CG and the ratio CGAG . So we draw two edges: one from CG AG to AG and another from CG to AG (Figure 5 (f)). The node AG is connected with the discovered nodes, so its color becomes white now and the asterix mark is dropped.\nThe process continues until:\n1. A connected graph is formed containing the parameter-nodes (OA,OE,BE) and the destination-nodes\n(CD,OD),\n2. There exists no node having no incoming edges except for the parameter-nodes. As for example in step 4\nthe node AG was included. There was no edge which is directed from other node to AG. Also AG is not one of the parameter-nodes like OA, OE and BE. Therefore the process of forming the graph continues.\nThe algorithm is given in Algorithm 2.\nAlgorithm 1: GraATP (H,R) 1 H : set of hypotheses 2 R : set of conclusions 3 D : set of dimensions 4 P = create a set of unique parameters 5 E \u2190 \u03c6 6 V \u2190 \u03c6 7 G = \u3008V,E\u3009 8 for each p \u2208 P do 9 create a node u\n10 V = V \u222a u 11 for each r \u2208 R do 12 create a node u 13 V = V \u222a u 14 while D 6= \u03c6 do 15 create node u for the next close dimension d \u2208 D 16 for each v \u2208 V that is related to u do 17 add a directed edge (u, v) or (v, u) 18 remove d from D 19 if G is not connected then 20 return null 21 else 22 return G\nFigure 6 shows the complete graph to reach OD and CD from OA,OE,BE. Now we will apply standard topological ordering algorithm to find out the sequence of steps of the theorem proving algorithm. First, we will enlist the nodes having no incoming edges. They are the parameter nodes: OA,OE and BE. Next, we delete these enlisted nodes and the edges adjacent of them as shown Figure 7.\nAfter that, we look for the nodes having no incoming edges in the new graph. They are CG/AG,CG and AE. We delete them and their adjacent edges from the graph. We proceed in this way until we reach the destination vertices CD andOD. Therefore, the topological order of the nodes is: OA,OE,BE,CG/AG,CG,AE,AF/DF,AG,OG, (OA\u2212 OF )/DF,DF/OF,DF,OF,CD,OD. The topological sorting algorithm is given in Algorithm 2."}, {"heading": "4 Conclusion", "text": "So far we have discussed how to translate a geometric structure, which is uniquely configured by setting a set of parameters, to a graph and how to traverse through the graph to find out a sequence of steps performing which the theorem can be proven. There are several mechanical methods of proving geometric theorems which have already been proposed, e.g. Wus method [5], Area method [6], and so on. The purpose of this work is to resemble the way in which human thinks, perhaps when it is in the most naive way, to prove a theorem. It can\nbe thought of as a primitive step of creating artificial thought processor. Any particular system can be thought as a geometric structure. Data which we sense by means of our sensory organs are the different \u2018dimensions\u2019. When we think we find out the relationship among different dimensions.\nHowever, there are couples of challenges which we need to face while accomplishing an automated theorem\nprover in above mentioned method. They are listed below:\n1. How the automated system would recognize which particular dimensions are required to be worked out\nto reach the goal. There are lots of dimensions possible, which we have ignored. For example, we have completely ignored the point of intersection between OD and BE, say it is G (Figure 8). More dimensions like OG,GD,BG and GE are included. Unless we fix some heuristic constraints search space may get\nAlgorithm 2: Topological Ordering (G = \u3008V,E\u3009) 1 A = \u03c6 2 L\u2190 set of all nodes with indegree = 0 3 while L 6= \u03c6 do 4 u\u2190 L.extractNode() 5 A.addToLast(u) 6 for each v \u2208 Adj[u] do 7 E = E \u2212 (u, v) 8 if E 6= \u03c6 then 9 return null\nenormously enlarged.\n2. How the theorem prover would extract relationships among different dimensions extracting from the hy-\npotheses. There should be a complete mechanism to do it.\nIn this paper, we have discussed the overview of an automated theorem proving algorithm. While proving a theorem in Euclidian Logical inference method, the theorem prover should be skilled enough to inspect different portions of the geometric structure and to correlate them with the previously proven theorem(s), to infer useful decisions about different dimensions. It requires higher level of intelligence. At the very early stage, this is hard to accomplish. On the other hand, in Cartesian method lines and curves are represented by means of algebraic equations. It is done by following limited number of rules, hence more naive than the Euclidean method, resulting complicated calculations to solve the equations for some unknown variables. This method reduces the readability of the proof by increasing the complexity of calculations. Our proposed method assumes that the automated prover can 1) apply Pythagoras theorem and 2) apply the ratio of sides rule for similar triangles and can detect the situation where to apply them- this is an aspect of Euclidean logical inference method. A set of parameters will be defined by an expert and all other dimensions will be represented as functions of them similar to the Cartesian method. This primitive theorem prover shares aspects of both methods. More research works are required to be performed to meet the requirements mentioned above to accomplish an automated geometric theorem prover resembling humane thought process."}], "references": [{"title": "A computer program for presburgers algorithm,\u201d in Summaries of talks presented at the Summer Institute for Symbolic Logic", "author": ["M. Davis"], "venue": "Cornell University,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1957}, {"title": "The logic theory machine\u2013a complex information processing system,", "author": ["A. Newell", "H.A. Simon"], "venue": "Information Theory, IRE Transactions on,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1956}, {"title": "A guide to the general problem-solver program gps-2-2,", "author": ["A. Newell"], "venue": "DTIC Document, Tech. Rep.,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1963}, {"title": "and D", "author": ["H. Gelernter", "J.R. Hansen"], "venue": "W. Loveland, \u201cEmpirical explorations of the geometry theorem machine,\u201d in Papers presented at the May 3-5, 1960, western joint IRE-AIEE-ACM computer conference. ACM", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1960}, {"title": "Automated geometric theorem proving: Wus method,", "author": ["J. Elias"], "venue": "The Montana Mathematics Enthusiast,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2006}, {"title": "Machine proofs in geometry", "author": ["S.-C. Chou", "X.-S. Gao", "J.-Z. Zhang"], "venue": "World Scientific, Singapore", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1994}, {"title": "Automated theorem proving,", "author": ["D.A. Plaisted"], "venue": "Wiley Interdisciplinary Reviews: Cognitive Science,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Boolean satisfiability from theoretical hardness to practical success,", "author": ["S. Malik", "L. Zhang"], "venue": "Communications of the ACM,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2009}, {"title": "and S", "author": ["M.W. Moskewicz", "C.F. Madigan", "Y. Zhao", "L. Zhang"], "venue": "Malik, \u201cChaff: Engineering an efficient sat solver,\u201d in Proceedings of the 38th annual Design Automation Conference. ACM", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2001}, {"title": "Possible world semantics for first-order logic of proofs,", "author": ["M. Fitting"], "venue": "Annals of Pure and Applied Logic,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Eliminating duplication with the hyper-linking strategy,", "author": ["S.-J. Lee", "D.A. Plaisted"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1992}, {"title": "Ordered semantic hyper-linking,", "author": ["D.A. Plaisted", "Y. Zhu"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2000}, {"title": "Model evolution based theorem proving,", "author": ["P. Baumgartner"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2014}, {"title": "Satisfiability modulo theories: introduction and applications,", "author": ["L. De Moura", "N. Bj\u00f8rner"], "venue": "Communications of the ACM,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2011}, {"title": "Computational logic: essays in honor of Alan Robinson", "author": ["J.-L. Lassez", "G. Plotkin"], "venue": "Mit Press", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1991}, {"title": "Case splitting in an automatic theorem prover for real-valued special functions,", "author": ["J.P. Bridge", "L.C. Paulson"], "venue": "Journal of automated reasoning,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "and S", "author": ["A. Armando", "M.P. Bonacina", "S. Ranise"], "venue": "Schulz, \u201cNew results on rewrite-based satisfiability procedures,\u201d ACM Transactions on Computational Logic (TOCL), vol. 10, no. 1, p. 4", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2009}, {"title": "and J", "author": ["H. Fu", "X. Zhong", "Q. Li", "H. Xia"], "venue": "Li, \u201cGeometry knowledge base learning from theorem proofs,\u201d in Knowledge Engineering and Management. Springer", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2014}, {"title": "A cartesian methodology for an autonomous program synthesis system,", "author": ["M. Franova"], "venue": "ICONS", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "In 1954 Martin Davis, an American Mathematician programmed Presburgers algorithm [1].", "startOffset": 81, "endOffset": 84}, {"referenceID": 1, "context": "Shaw developed Logic Theory Machine around 1955-56 [2].", "startOffset": 51, "endOffset": 54}, {"referenceID": 2, "context": ") [3] which was able to solve any symbolic problem.", "startOffset": 2, "endOffset": 5}, {"referenceID": 3, "context": "Loveland worked on geometric theorem proving implementing traditional proof method [4].", "startOffset": 83, "endOffset": 86}, {"referenceID": 4, "context": "Later Wen-Tsun Wu developed an algebraic method [5] which could prove geometric theorems more efficiently, but this method involves lots of calculations with polynomials which make the proof hardly readable.", "startOffset": 48, "endOffset": 51}, {"referenceID": 5, "context": "Chou, Gao and Zhang [6] developed \u2018area method\u2019 which is able to produce short and readable proofs of geometric theorems.", "startOffset": 20, "endOffset": 23}, {"referenceID": 6, "context": "Plaisted [7] reviewed different techniques of ATP.", "startOffset": 9, "endOffset": 12}, {"referenceID": 7, "context": "Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17].", "startOffset": 59, "endOffset": 65}, {"referenceID": 8, "context": "Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17].", "startOffset": 59, "endOffset": 65}, {"referenceID": 9, "context": "Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17].", "startOffset": 85, "endOffset": 89}, {"referenceID": 10, "context": "Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17].", "startOffset": 106, "endOffset": 110}, {"referenceID": 11, "context": "Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17].", "startOffset": 138, "endOffset": 142}, {"referenceID": 12, "context": "Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17].", "startOffset": 160, "endOffset": 164}, {"referenceID": 13, "context": "Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17].", "startOffset": 182, "endOffset": 186}, {"referenceID": 14, "context": "Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17].", "startOffset": 215, "endOffset": 219}, {"referenceID": 15, "context": "Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17].", "startOffset": 241, "endOffset": 249}, {"referenceID": 16, "context": "Among these techniques are: propositional proof procedures [8, 9], first order logic [10], clause linking [11], instance-based procedures [12], model evolution [13], modulo theories [14], unification and resolution [15] and combined systems [16, 17].", "startOffset": 241, "endOffset": 249}, {"referenceID": 4, "context": "In another paper, Joran Elias [5] discussed Wus method on geometric theorem proving.", "startOffset": 30, "endOffset": 33}, {"referenceID": 17, "context": "They are: Euclidean Logical Inference methods [18] and Cartesian Algebraic methods [19].", "startOffset": 46, "endOffset": 50}, {"referenceID": 18, "context": "They are: Euclidean Logical Inference methods [18] and Cartesian Algebraic methods [19].", "startOffset": 83, "endOffset": 87}, {"referenceID": 4, "context": "Lets consider the following example from [5].", "startOffset": 41, "endOffset": 44}, {"referenceID": 4, "context": "There are several previously proposed ways: Wus method [5], Area method [6], etc.", "startOffset": 55, "endOffset": 58}, {"referenceID": 5, "context": "There are several previously proposed ways: Wus method [5], Area method [6], etc.", "startOffset": 72, "endOffset": 75}, {"referenceID": 4, "context": "Wus method [5], Area method [6], and so on.", "startOffset": 11, "endOffset": 14}, {"referenceID": 5, "context": "Wus method [5], Area method [6], and so on.", "startOffset": 28, "endOffset": 31}], "year": 2014, "abstractText": "Automated Theorem Proving (ATP) is an established branch of Artificial Intelligence. The purpose of ATP is to design a system which can automatically figure out an algorithm either to prove or disprove a mathematical claim, on the basis of a set of given premises, using a set of fundamental postulates and following the method of logical inference. In this paper, we propose GraATP, a generalized framework for automated theorem proving in plane geometry. Our proposed method translates the geometric entities into nodes of a graph and the relations between them as edges of that graph. The automated system searches for different ways to reach the conclusion for a claim via graph traversal by which the validity of the geometric theorem is examined.", "creator": "LaTeX with hyperref package"}}}