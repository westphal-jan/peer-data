{"id": "1412.6264", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Dec-2014", "title": "Supertagging: Introduction, learning, and application", "abstract": "supertagging is an approach originally developed by bangalore and swami joshi ( 1999 ) to improve improved the arithmetic parsing efficiency. in choosing the initial beginning, the scholars used small training datasets and somewhat na \\ \" ive smoothing techniques to learn the discrete probability distributions of supertags. since its 2004 inception, the applicability function of supertags has been explored for tag ( tree - adjoining grammar ) formalism as well as other related yet, different formalisms such as ccg. presently this article will try to summarize the various reference chapters, although relevant to statistical parsing, from the most recent edited book volume ( bangalore and joshi, 2010 ). the chapters were not selected so as to blend the learning depth of supertags, inhibit its integration into full - scale logic parsing, and in semantic parsing.", "histories": [["v1", "Fri, 19 Dec 2014 09:53:57 GMT  (16kb)", "http://arxiv.org/abs/1412.6264v1", null]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["taraka rama k"], "accepted": false, "id": "1412.6264"}, "pdf": {"name": "1412.6264.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n41 2.\n62 64\nv1 [\ncs .C\nL ]\n1 9\nD ec\n2 01\n4"}, {"heading": "1 Introduction", "text": "1The main theme of supertagging is complicate locally, simplify globally (CLSG). Originally proposed for LTAG (Lexicalized TreeAdjoining Grammars) framework, supertagging aims at reducing the overall parsing complexity by disambiguating the supertags of lexical units locally which was espoused in Bangalore and Joshi (1999). The task of supertagging is likened to the task of POS tagging which is a well-defined and well-explored task in computational linguistics. In this section, I will give a brief introduction to LTAG and attempt to couch supertagging in the LTAG framework.\nCFG is a string re-write formalism whereas, LTAG is a tree re-write formalism. LTAG comes with two kinds of elementary trees: initial (\u03b2) and auxiliary (\u03b1). There are two kinds of operations namely, substitution and adjoining operation.\n1Submitted as a term paper for Statistical Parsing course given by Prof. Dr. Joakim Nivre.\nThe parse tree for a sentence is derived through a sequence of operations applied to the elementary trees anchored in the lexical items.\nA \u03b2 tree can be substituted at its frontiers whereas a \u03b1 tree undergoes adjoining operation. A \u03b1 tree is a elementary tree which has a root node X and a non-terminal node X\u2217. The non-terminal node X\u2217 can undergo adjoining operation. An adjoining operation involves detaching the tree at node X and splicing a \u03b1 tree at the node X. In the next step, the detached tree is substituted at the node marked with \u2217. As mentioned earlier, each elementary tree is lexicalized in LTAG.\nA substitution operation works towards growing a tree at the leaves and cannot operate at internal nodes whereas, a adjoining operation works at the tree internal nodes and grows the tree such that local dependencies encoded in the elementary trees can encode long distance dependencies. Object extraction construction is an example where adjoining operation increases the distance between locally dependent lexical units in an initial tree.\nLTAG works, primarily, with elementary trees and combines the elementary trees through substitution and adjoining operations to derive a sentence. If the correct elementary tree of each lexical item in a sentence is determined accurately beforehand, then a parser can be employed to derive the complete parse tree with relative ease by applying the adjoining and substitution operations. The final sequence of disambiguated elementary parses delivered by a supertagger is referred to as almost parse by the authors. The supertags for a given language is obtained by parsing a corpus through a hand-written LTAG grammar. Another method is to use a pre-annotated tree bank such as Penn treebank (Marcus et al., 1993) to extract the set of supertags to train a supertagger.\nThe original experiments (Joshi and Srinivas, 1994), to the test the efficacy of supertagging, were conducted on a Wall\nStreet Journal Corpus (WSJ). The training corpus consisted of 1 million words and the test corpus consisted of 47, 000 words. They find that the supertag ambiguity is about 15 to 20 supertags per word. In these experiments, the baseline is quite straightforward. They assign the most frequent supertag as the supertag for a word. The baseline system achieves an accuracy of 75% which means that 75% of the words are given the right supertag. Then, they train a trigram-based POS tagger on their training corpus and achieve an impressive accuracy of 92%. This work forms the foundation for the work surveyed in this article.\nThe rest of this paper is organized as follows. Section 2 focuses on the work which learns (Shen, 2010) combines parsing with supertagging (Sarkar, 2010). In tandem with the organization of the book, the section 3 surveys the place of supertagging in other grammar formalisms such as: CCG (Clark and Curran, 2010) and PCFG parsing with latent annotations (Matsuzaki et al., 2010). Section 4 surveys the application of supertagging to semantic role labeling (Chen, 2010). Finally, we conclude the paper in section 5 by summarizing few statistical parsing articles related to supertagging (since 2010)."}, {"heading": "2 Extraction and Learning of Supertags", "text": ""}, {"heading": "2.1 Supertagging and Parsing Efficiency", "text": "Sarkar (2010) attempts to combine supertagging with full-scale LTAG parsing. There are at least two arguments to claim that this idea can yield higher parsing accuracies. The first argument is motivated through parsing efficiency. Given a highly lexicalized grammar such as LTAG, the syntactic lexical ambiguity and sentence complexity might be the dominant factors that affect parsing efficiency. If these two factors play a major role in improving or decreasing the parsing efficiency, it certainly means that supertagging \u2013 which was originally designed to disambiguate locally \u2013 can be used for first purpose. Also, a POS-style tagger is much less affected by a constraint such as sentence length. Secondly, Sarkar combines the supertagger with a full-scale LTAG parser in a co-training framework where two conditionally independent parsers supplement each other by starting from a small seed list of training examples to bootstrap a LTAG parser from a large unannotated corpus.\nSarkar (2010) tests the motivations for the first\nargument by performing two sets of experiments varying two parameters: number of derivation trees and number of clauses, per sentence. The motivation for experimenting with these parameters comes from the worst case time and space complexity of the Earley-style chart parser used by Schabes (1994). The worst case time complexity of this parser is in the order of |A| \u00b7 |I \u222aA| \u00b7N \u00b7n6 and the space complexity is in the order of |I\u222aA| \u00b7 N \u00b7 n4 where, I is the set of initial trees, A is the set of auxiliary trees, N is the maximum number of nodes in an elementary trees, and n is the length of the input string. Given this complexity, Sarkar tries to determine which parameter correlates the most with parsing efficiency.\nThe process of operations in a LTAG framework can be treated as attaching and rearranging elementary trees to a root node. Hence, the parsing task breaks down into two steps:\n1. Assign a probable set of elementary trees to a lexical item. 2. Find the correct attachments between these elementary trees to arrive at all the parses for a sentence.\nIn a sentence, the number of elementary trees as well as the number of clauses might, as well, increase with the sentence length. Sarkar tests his claims by employing an automatically extracted LTAG treebank grammar and a chart-based headcorner parser. The test set consists of 2250 sentences. Also, the parser produces all the parses for a given sentence in a packed forest representation.\nOverall, Sarkar makes the following observations regarding the relation between parsing efficiency; and the number of trees and clauses:\n1. There is a correlation of 0.65 between parse times and sentence length. 2. There is a stronger correlation of 0.82 between the parse times and the number of trees in a sentence. 3. The correlation between number of deviations and the parse times is not very strong. 4. The number of clauses do not increase with sentence length. The parsing efficiency seems to be independent of the number of clauses in a sentence. 5. Finally, in an oracle experiment, when the parser is supplied with the gold-standard elementary trees, for an input string; the parsing times (< 1 sec.) drop drastically.\nThe oracle experiment shows that apriori knowl-\nedge of the right elementary trees increases the parsing efficiency. This fact can be used to substantiate the claim whether supertagging helps parsing efficiency. Sarkar also tests if a n-best supertags per word are beneficial for reducing the parsing time. Therefore, he supplies 60-best supertags per word as an input to the parser. Sarkar notes that the parsing time is reduced by more than 25 times. In the co-training experiment, the author finds that using supertagging as the other model improved the labeled precision and recall from a baseline probabilistic parser. Overall, this work shows that supertagging is useful for both improving the a full-scale parser as well as bootstrapping the same parser in a data-paucity scenario."}, {"heading": "2.2 Learning supertags", "text": "In this subsection, I summarize the work of Shen (2010) who attempts to improve the supertagging accuracies by modeling the problem in a sequence labeling framework that addresses the label bias problem inherent in a HMM-style sequence tagging.\nShen (2010) introduces a new method to learn supertags. The author models supertag learning as a sequential learning problem. In doing so, he explores the local probability dependent models such as PMMs (Projection-based Markov models) and tries to pass their limitations by using a discriminative learning model such as SNoW (Sparse Network of Winnow; Roth 1998). Shen compares the performance of his method with that of Chen (2001). Further, he applies his system at the task of NP chunking and finds that use of supertags improves the standard NP chunker\u2019s performance.\nContinuing the trend in the book, Chen explores the use of supertags to improve the performance of a baseline Transformational-based Learning NP chunker. The author begins his article by noting that the performance of NP chunker drops when supplied with supertags automatically generated by a trigram supertagger. The author hypothesises that automatically generated supertags provide more noise than information. The author reviews the previous work in data-driven supertagging scenario (Srinivas, 1997; Chen et al., 1999) and finds that a combination of lexicalized and supertag head based contextual features (mixed model) coupled with few heuristic rules improves the supertagger accuracy. Further, Chen et al. (1999) employed a pair-wise voting scheme to combine\ntheir models that yielded the highest accuracy. The accuracy of the NP chunking system increased when they used the automatically generated supertags as an input. And, they employed heuristic rules to identify the NP chunks. However, as Shen notes, it is not clear if this high accuracy is due to the supertags or due to the heuristic rules.\nShen models the task of supertagging learning as a sequential learning problem. He begins by observing that discriminative learning of supertagging can be achieved by training a classifier for the corresponding lexical item\u2019s POS tag. Although a joint learning of POS tags and supertags can be a feasible approach, the author prefers a two-step approach where, in the first step, a Brill POS tagger is used to tag the training and testing datasets. The supertag modeling is done as followed. Let W = w1 . . . wn be a sentence, Q = q1 . . . qn be the POS tags, and T = t1 . . . tn be the corresponding supertags. Then the probability of assignment of a supertag ti is modeled as:\nP (ti|t1...i\u22121,W,Q) \u2261 Pqi(ti|t1...i\u22121,W,Q) (1)\nHence, a separate classifier is built for each POS tag. This approach has the following advantages:\n1. Data sparsity problem: There are more than 400 supertags as compared to the number of POS-tags (< 100). 2. The classifier can focus on supertags belonging to each POS tag and learn the difficult cases. The author employs a five word window plus two previous head supertags as features to train the classifier. The system is bidirectional: scans the sentences in both the directions; and employs a pairwise voting to supertag a sentence. The author tests his system on section 20 of WSJ corpus. The author notes that his supertagger achieves an error reduction of 13% on automatically extracted LTAG grammar based supertags. The SNoW based supertagger beats Chen (2001) with a difference of 0.59% in terms of accuracy.\nHaving established that his supertagging system beats the previously established best systems, Shen proceeds to test its efficiency in NP chunking. In NP chunking experiments, sections 2\u201314 and 21\u201324 are used to train the supertagger. Section 19 is used to tune the supertagger and section 20 for testing purposes. The author finds that SNoW system\u2019s supertags helped improve the overall accuracy of IOB tagging as well as the precision, recall and, F-score of the NP chunker. The\nauthor also performs two oracle experiments by supplying gold standard POS tags and supertags to the NP chunker only to find that the NP chunker performs much better across all the domains. Thus, he concludes that improving the accuracy of supertagging can only benefit NP chunking task."}, {"heading": "3 Supertags in related formalisms", "text": ""}, {"heading": "3.1 Combinatory Categorial Grammar", "text": "Parsing in Combinatory Categorial Grammar, referred to as CCG (Steedman, 2000), is quite similar to LTAG and consists of two steps. The first step consists of assigning elementary syntactic structures to the words in a sentence; the second step consists of combining the elementary structures to derive the full parse tree. In a similar spirit, Clark (2002) and Clark and Curran (2004) introduce and establish supertagging in the CCG framework. This line of work is continued in Clark and Curran (2010) where, the authors develop a multi-tagger based on the MaximumEntropy based supertagger. The authors also test the importance of a tag-dictionary \u2013 a dictionary that maps supertags to words \u2013 and the n-best lists (per word) at the task of CCG parser efficiency.\nClark and Curran (2004) develop a supertagger based on an automatically extracted CCG grammar from Penn Treebank. The authors note that the CCG parser\u2019s parsing time reduces when the correct supertags are supplied to the parser. In an analogy with a zig-saw puzzle (Bangalore and Joshi, 2010), the parser is initially supplied with a small number of supertags, and the parser receives more supertags only if the parser fails to derive a full parse tree. The authors test the performance of supertagging and its importance to parsing in relation to the following three parameters:\n1. The size of tag-dictionary. 2. The purity of POS tags. 3. Multi-tags for each word within an admissi-\nble range of variation (quantified in terms of a bestness parameter \u03b2). The previous work in CCG supertagging (Clark, 2002) reports a higher accuracy in comparison to the LTAG supertagging work. The authors attempt to explain this difference in the following terms:\n1. The formalisms treat syntactic constructions differently. 2. The CCG grammar extraction process caused\nthe CCG supertag set to be much smaller in comparison with the LTAG supertag set.\nThe authors note that by restricting the size of original tag-dictionary through a frequency cut-off (at least 10), the overall size of the supertag set is reduced three-fold. This step contributes to decreasing the supertag ambiguity and also speeding the parser. The authors employ a MaximumEntropy (MaxEnt) framework to assign the right supertag to a word. The contextual features for training their MaxEnt framework are simple; and are based on word features extracted from a window-size of five, a combination of unigram and bigram POS tags, and lexical categories (supertags) of the previous two words.\nClark and Curran use a one-best category per word and gold standard POS tags to train their supertagger and find that the word accuracy is 92.6% and the sentence accuracy is 36.8%. However, automatically assigned POS tags decrease the word and sentence accuracies to 91.5% and 32.7% respectively. Hence, the scholars proceed to test if ambiguity in the assignment of categories per word influences the word and sentence accuracies of the supertagger. The number of lexical categories per word is computed using a n-best list of lexical categories computed using a forwardbackward algorithm. By allowing a large latitude in the range of \u03b2, the supertagger performs almost as well as the supertagger model trained on gold standard POS-tags. The parse times of the parser reduce drastically when the parser is tested in combination with the supertagger. In conclusion, the CCG parser assigns parses to 99.6% of the sentences as compared to the LTAG parser which assigns complete parses to 60% of the sentences."}, {"heading": "3.2 PCFG with latent annotations", "text": "The chapter by Matsuzaki et al. (2010) is not directly related to supertagging but bears on the automatic annotation of ancestor nodes in a classic PCFG parsing setting. The authors attempt to weaken the strong independence assumptions made by a PCFG parser by annotating each nonterminal node in a parse tree with a latent variable. This approach has been tried previously for PCFG parsing in different contexts.2 The novelty of the idea presented in this book chapter is that the non-\n2See Nivre (2010, 247) for a more complete list of references.\nterminal ancestor nodes in a parse tree are labeled with a latent variable.\nMatsuzaki et al. (2010) describe and develop the formulas for the estimation of the rule probabilities in an EM-style algorithm. The authors note that the task of finding the best parse tree is an NP-hard problem. Subsequently, the authors use three different approximation techniques to reduce the tree space. The first approach consists of generating n-best parse trees using a PCFG model and then selecting the best parse tree based on the PCFG-LA model. The second approximation approach consists of using a viterbi approximation to the standard PCFG model with latent annotations. The third approximation consists of approximating the original objective function with weak independence assumptions.\nThe authors test the different approximations with different parse tree binarization techniques. The nature of binarization does not effect the accuracy of the three approximations. Finally, the authors compare their approach with state-of-theart lexicalized parsers and note that their parser is comparable to the performance of unlexicalized parsers (Klein and Manning, 2003) but does not come close to the lexicalized parsers such as Charniak (Charniak, 2000)."}, {"heading": "4 Application to Semantic Labeling", "text": "Chen (2010) tests the efficiency of supertagging coupled with two different kinds of parsers (Light-weight dependency Parser [LDA]3 and a probabilistic LTAG parser (Schabes, 1992)) for the task of semantic labeling. This chapter is a continuation of the work done by Chen and Rambow (2003) on a similar task. As noted by Chen, the earlier work used a prereleased version of PropBank (Palmer et al., 2005) for the same task. The current book chapter focuses on three issues:\n1. Use of deep linguistic features improves the performance of semantic labeler. 2. A LDA parser can perform as well as a full LTAG parser at the task of semantic parsing. 3. A unified syntactic and semantic TAG parser is preferable to a pipelined TAG parser and semantic labeler.\n3Originally developed by Bangalore and Joshi (1999), LDA is a fast quadratic-time parser which takes a supertagged sentence as input and constructs a dependency tree by finding the local syntactic heads and then, links each argument to its predicate.\nThe author limits the task of semantic labeling to the identification of predicate argument labels. The author refrains from roleset labeling as well as adjunct labeling since he notes that even a majority class label assigner achieves an accuracy of 88.3% on the task of roleset labeling.\nThe PropBank is labeled on the top of PTB which is useful in extracting surface syntactic features for the task of semantic labeling. In an earlier work, Gildea and Palmer (2002) use surface syntactic features such as Head word, Phrase type, Path etc., for training their discriminative classifier-based system. These features are readily extracted from PropBank due to its origins. Except for Voice, rest of the features are surface syntactic features.\nChen hypothesizes that deep linguistic features may be useful for the task of semantic labeling. The author\u2019s methodology can be summarized as follows:\n1. Generate features for various levels of linguistic analysis. This is done by extracting different kinds of TAGs from PropBank annotations. 2. Use of the extracted TAGs for the prediction of semantic roles given: gold parse trees and raw text parsed using LDA and LTAG parser.\nFor the first task, the author extracts two kinds of TAGs: SYNT-TAG (Syntactic TAG) and SEMTAG (Semantic TAG). SYNT-TAG has two kinds of features: surface and deep syntactic features. The former consists of features which are extracted from hand-crafted rules based on the argument\u2019s position. The second features consist of extracting the trace of a transformation that yields a construction. SEM-TAG consists of SYNT-TAG\u2019s features complemented with the PropBank argument labels. The author also uses supertag based features modeled in the lines of Gildea and Palmer (2002)4. The author finds that surface, deep, and supertag features beat the GP features at the task of semantic labeling on gold standard parses.\nAs a prerequisite to parsing the raw text, the author tests the performance of the standard supertagger (Bangalore and Joshi, 1999) on SYNTTAG and SEM-TAG for various sizes of n-best list supertags. The author finds that as n \u2192 \u221e the supertaggers based on both kinds of TAGs achieve high accuracies of 97%. The author then proceeds\n4Henceforth, referred to as GP.\nto test the performance of SYNT-TAG and SEMTAG for the task of semantic argument recognition using supertagged raw text coupled with LDA or a LTAG parser. The performance of the supertagger is evaluated on boundary detection and argument\u2019s headword detection. Overall, the system\u2019s performance is best on the task of boundary detection when trained on SEM-TAG grammar coupled with full statistical parser. The system\u2019s performance is not hurt when the same system is evaluated on headword detection task. The author concludes his article by claiming that deep features in combination with a supertagged raw text and a statistical parser trained on SEM-TAG yields the best performance."}, {"heading": "5 Supertagging since 2010", "text": "Since the publication of the edited volume (Bangalore and Joshi, 2010) on supertagging, there has not been much supertagging work in (L)TAG framework. However, there has been some ongoing work in the application of supertags in CCG framework (Auli and Lopez, 2011; Ambati et al., 2013; Ambati et al., 2014).\nAuli and Lopez (2011) begin with the work of Clark and Curran (2004) who employ supertagging for building a wide-coverage CCG parser. However, they point out that the parser derived from CCG\u2019s lexical categories based supertagger is highly approximate and uses an adaptive strategy to supply more supertags to the parser if the parser fails to arrive at a parse with the current proposed supertags. The authors proceed to propose a A* based search algorithm to retrieve the right parses in an exact fashion. The authors experiment with an exhaustive CKY parser for CCG grammar and, also, with a A* parser and report that the latter performs better than the CKY parser coupled with supertagger. Ambati et al. (2013) and Ambati et al. (2014) explore ways to integrate the CCG supertags into the MALT parser (Nivre et al., 2007) for the purpose of improving Hindi and English dependency parsing. Overall, the idea of supertagging seems to be active at least in CCG parsing.\nIn this survey article, I tried to summarize chapters from supertagging relevant to statistical parsing by beginning with an introduction to TAG and supertagging; followed by survey in learning of supertags; and, its application to semantic labeling. The article also summarizes few articles\nfalling within the intersection of supertagging and statistical parsing since 2010."}], "references": [], "referenceMentions": [], "year": 2014, "abstractText": "Supertagging is an approach originally developed by Bangalore and Joshi (1999) to improve the parsing efficiency. In the beginning, the scholars used small training datasets and somewhat na\u0131\u0308ve smoothing techniques to learn the probability distributions of supertags. Since its inception, the applicability of Supertags has been explored for TAG (tree-adjoining grammar) formalism as well as other related yet, different formalisms such as CCG. This article will try to summarize the various chapters, relevant to statistical parsing, from the most recent edited book volume (Bangalore and Joshi, 2010). The chapters were selected so as to blend the learning of supertags, its integration into full-scale parsing, and in semantic parsing.", "creator": "LaTeX with hyperref package"}}}