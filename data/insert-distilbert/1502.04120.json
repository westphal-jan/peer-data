{"id": "1502.04120", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Feb-2015", "title": "About Tau-Chain", "abstract": "tau - chain is a decentralized peer - to - peer network having three unified faces : rules, proofs, databases and computer programs, all allowing a generalization of virtually any naturally centralized or openly decentralized p2p network, together with many new abilities, as we present on exactly this note.", "histories": [["v1", "Mon, 16 Feb 2015 17:01:40 GMT  (86kb)", "http://arxiv.org/abs/1502.04120v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["ohad asor"], "accepted": false, "id": "1502.04120"}, "pdf": {"name": "1502.04120.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n50 2.\n04 12\n0v 1\n[ cs\n.A I]\n1 6\nFe b\n20 15\n\u201cIf law-making is a game, then it is a game in which changing the rules is a move.\u201d - Peter Suber presenting Nomic [10].\nDocument version: 0.2 Feb 6 2015 Document version: 0.21 Feb 9 2015 Document version: 0.22 Feb 12 2015"}, {"heading": "1. Introduction", "text": "We 1 propose a network that unifies computer-readable knowledge, rules, inference, reasoning, and more equivalent aspects. The network evolves with time toward gathering more meaningfull information.\n1.1. What and Why Do We Need to Decentralize? Humanity is not wild, but engineered. It is, and always was, engineered and manipulated by relatively small groups of people. Our media, education, economy, law, politics, ethics, are all shaped mainly according to the views of small groups. Those groups tell us we are englightened, but in fact, the situation is very much of opposite nature. Immanuel Kant began his famous essay \u201cWhat is Enlightment?\u201d, and he defines:\n\u201cEnlightenment is man\u2019s emergence from his self-imposed nonage. Nonage is the inability to use one\u2019s own understanding without another\u2019s guidance. This nonage is self-imposed if its cause lies not in lack of understanding but in indecision and lack of courage to use one\u2019s own mind without another\u2019s guidance. Dare to know! (Sapere aude.) \"Have the courage to use your own understanding,\" is therefore the motto of the enlightenment.\u201d\nThose 1784 (1984?) words are in fact relevant for today more than ever: today we can break the chains of opression and let our own voice emerge.\nAbout a century later, Franz Kafka described the inability of the individual to stand against irrational and moraless bureaucratic systems. While the laws are never actually given to the citizens, they still must obey them or otherwise suffer the wrath of society acting in violence against them, while the system contradicts itself: on one hand they claim they can never define law in a closed form, and on the other hand, they always find a way to justify their actions according to the law. Today, they also blame their computers and the records or decisions it allows to\n1My Logic teacher HunterMinerCrafter https://bitcointalk.org/index.php?action= profile;u=245263, who introduced this idea and design to me, and myself, Ohad Asor.\n1\nkeep or modify. So maybe law cannot be formalized for us, but can be formalized for them?\nLaw can and should be formalized. The most important property a law system should have is a consistent ethical basis (e.g. constitution) and consistent implications from this basis to laws themselves. But who should formalize the laws?\nFormalizing laws will pose even a greater danger if done by centralized hands. It is evident that democracy is incapable of assisting: the way in which voting is done today is far from assuring a consistent, moral, and functioning system.\nUntil recent times, this was indeed an inevitable situation. Now we have mathematical and technological ways to create laws collaboratively, while preserving on frames we set for ourselves, like consistency, votes, or minimal requirements.\nCentralization of law is only one thing. What about centralization of information? Think of the following situation: Google has the most valuable information in the world, namely, \u201cwhat people want\u201d. They do not give us access to their databases. But imagine, what if we could access their data: we would not only obtain this important information, but also have the ability to perform a much more sophisticated search. We could, for example, query about topics related to a given topic, or automatically build new aggregated data from the database, and basically have endless additional uses.\nCommunication is also centralized. When communicating by electronic means, what we say is often intercepted by unintended parties. Our privacy is deeply vulnerable. We do not tend to have our own website and post our thoughts there, but we do it on centralized locations like Facebook. We do it because centralized hands give us better technology, with long term support and less bugs. We pay for it with our privacy, endless ads and marketing junk, and we even let them manipulate who our friends will be. Can we keep all benefits and have a moral high-end software?\n1.2. The Vision. \u03c4 -chain\u2019s goal is to unite, yet keeping decentralization, humanity\u2019s knowledge and thinking, know-hows and communication, laws and opinions, all into one giant shared database that is able to be coherent and consistent, to be queried meaningfully, to reuse information/code/data efficiently, to allow all kind of social operations and communications to be done with no unwanted guests, to allow every user set their own specific rules and to be part of communities sharing the same thoughts, or goals, or needs. \u03c4 -chain does not enforce anyone to subscribe or follow one or another ruleset. But it lets all mental and technological benefits to be combined for the sake of better humanity.\nObviously, not all questions are solvable, some better solved by humans and some better solved by machines, and some are solvable with many machines and a lot of knowledge. Once one is able to solve a puzzle, namely: to prove a given claim, it gets into the network. Until then, it stays out.\nThis vision is not new, and probably began with the Semantic Web as we will describe on section 5, but could not be fulfilled without the nature of decentralization, which also gives the ability to fairly incentivize participants. Moreover, this vision in its decentralized version is not new as well, but no serious attempts were made before to make it happen.\nIt is about time to begin doing to many issues bothering humanity what Satoshi Nakamoto began to do to the monetary system.\nIt should be noted that \u03c4 -chain isn\u2019t a coin as for itself, and will bootstrap as a decentralized network, where developers are just like everyone, without any kind of so-called premine or any currency in hand, since the system itself has to be bootstrapped practically without rules.\n2. Abbreviations and Definitions\n\u2022 db: Database \u2022 P2P: Peer-to-Peer \u2022 prop[s]: Proposition[s] - a claim or definition to be understood under strict logic 2 \u2022 DHT: Distributed Hash Tables \u2022 DTLC: Dependently Typed Lambda Calculus \u2022 TFPL: Totally Functional Programming Language \u2022 RDF: Resource Description Framework \u2022 N3: Notation3 Language"}, {"heading": "3. Overview", "text": "We present \u03c4 -chain, a fully decentralized P2P network being a generalization of many centralized and decentralized P2P networks, including the Blockchain. We aim to generalize the concept as much as we find, and give users the ability to implement virtually any P2P network over \u03c4 -chain. Its interpretations, uses, and consequences are far from being a P2P network only, and include software development, legal, gaming, mathematics and sciences, logic, crypto-economies, social networks, rule-making, democracy and votes, software repositories (like decentralized Github+Appstore/Google Play), decentralized storage, software approval and verification, even \u201cdoing your homework in History or Math\u201d in some sense (stronger sense that search engines), and many more aspects 3 .\n3.1. Five Equivalent Definitions. \u03c4 -chain can be defined by several equivalent definitions:\n\u2022 A shared db of rules, with a client that is able to change the rules, obey the rules, infer new rules from given rules, and make sure rules are consistent. \u2022 A shared db of computer programs\u2019 code being collaboratively composed with revision control and custom permissions (like git), with a client that is able to run code, reuse code from existing programs, and verify programs against formal specifications which are programs themselves. \u2022 A shared db of props, with a client that is able to state new props, prove props with custom derivations rules which are props themselves, and verify proofs to given props. \u2022 A shared db of ontologies, which are definitions of types (taxonomies) and their relations, with a client that is able to propose new ontologies, make sure that ontologies are consistent, and query the ontologies db various queries. \u2022 A decentralized Nomic game.\n2\"Cats are either flowers or mammals\" is a true prop under pure logical interpretation. 3Zennet Supercompter\u2019s design has now changed to work over \u03c4 -chain. BitAgoras will work\nover it as well.\n3.2. The Essence of \u03c4-chain node. At its basis, \u03c4 -chain is nothing but a db of quads being tuples of four words each, namely: context, subject, predicate, object. On this note we show how rules, programs, proofs, and ontologies are all naturally representable by a unified way, and point to some of the far-reaching uses of such a system.\nEvery node contains knowledge, at the very intelligent sense, namely the ability to make inference and implication using logic. They do not aim to represent a human intelligence, but their knowledge is first and foremost how to communicate and transfar liable information. Technically, this is can be done by formalizing with ontologies algorithms like DHT and Blockchain. But when looking at this in a unfied way as virtual creatures being able to ask rather retrieve, know rather store, talk rather comminucate, consider rather verify, having only mouth and ears and ontologies and a reasoner."}, {"heading": "4. Basic Equivalence Relations", "text": "We give an informal explanation of rules as programs as proofs. For a formal derivations, we refer the reader to the literature of Type Theory.\nBy intuition, \"running a program\" can easily be seen as equivalent to \"obeying the rules\", while the rules are the code itself. The non-triviality lies on the other direction: can all rules be formalized as programs? The answer is positive, in a sense, and we will explain it through the proofs interpretation.\n4.1. What are Proofs? From abstract logic point of view, a proof is a path taken from given hypotheses and axioms, and ends up with a result to be proved under the hypotheses, while the path has to be taken according to given derivation rules, and follows the notion of implication (a =\u21d2 b).\nExample 1. Following are examples of derivation rules:\n\u2022 Modus Ponens: if A implies B and A is true, then B is true:\n((A =\u21d2 B) \u2227A) =\u21d2 B\n\u2022 Cryptographic signature: it is impossible to generate a valid signature (up to assumed validation procedure) without access to the corresponding private keys. \u2022 A mapping from data to its hash is one-to-one and noninvertible. Obviously, this is false under pure mathematical logic, but it is valid in cryptography being a practical science. \u2022 Hilbert\u2019s formal inference rules and Gentzen\u2019s formal inference rules.\nIt should be noted that derivation rules can be stated as axioms, and axioms as hypotheses. Hence, a proof is inferring a statement from other statements, or equivalently, deriving a rule given other rules. Looking at definitions (taxonomy) as rules themselves, we see that rules are proofs and proofs are rules, and that proving is inferring.\n4.2. Proofs=Programs. This non-trivial result is the celebrated Curry-Howard isomorphism . As there are many kinds of programs and many kinds of proofs, we are interested in a space where programs always halt. Roughly speaking, such programming language fall under the class of TFPL, e.g. Idris, AGDA, coq 4, which correspond to DTLC. Such and other class are isomorphic to the classes of proofs.\nTFPL are not Turing complete. This lets us escape from many paradoxes arising from Turing machines formalism, promises us that programs always halt, and give us strong abilities to claim and prove claims about the program 5 . By this, we can prove that a given code satisfies a given unit-test 6 . We can also prove the execution of the program 7.\nIt should be noted that practiaclly, not being Turing complete at this sense gives only advantages: any application one can come up with does not require Turing completeness, but DTLC is enough. Turing completene languages can do things that DTLC cannot only at extreme (mostly infinite) theoretical cases.\nCorollary 2. Logical proposition can be interpreted as rules, and vice versa. Proofs from axioms can be interpreted as inferring rules from other rules, and vice versa. Computer programs written in a totally functional programming language can be interpreted as constructive proofs, and vice versa.\nIt should be stated that the correspondence between proofs and computer programs is so strong, that it gives rise to new foundation of mathematics, rather Cantor\u2019s/ZFC Set theory, namely: Category theory. It turns out that proofs and programs are isomorphic to category theory, at some sense. This is the CurryHoward-Lambek isomorphism, aka Computational Trinitarianism 8 .\n4Though COQ isn\u2019t really DTLC but Calculus of Constructions, yet those differenced doesn\u2019t really matter for our sake\n5Sometimes like \u201cthe program is doing X and not doing Y in Z steps\u201d. 6Being a form of formal specification. 7cf. http://amiller.github.io/lambda-auth/ 8http://ncatlab.org/nlab/show/computational+trinitarianism"}, {"heading": "5. Ontologies and the Semantic Web", "text": "5.1. Background. This is really a long story, and we\u2019re going to make it very relatively short. It all began when the inventor of the World Wide Web, Tim Berners-Lee, came up with a vision that all data online will be machine readable, and build a web of relations between objects and types. That\u2019s the Semantic Web vision in a nutshell. For this goal, a vast amount of tools has been developed and still being developed.\nNowadays there\u2019s a huge and growing amount of ontologies from all aspects of life: basic web components and logical entities and relations (OWL), legal (cf. LKIF ontologies), software, medicine, e-commerce, cyptography, social media, geography, news, and many more 910. Another notable project is dbpedia, that already formalized millions of concepts from Wikipedia with consistent ontologies. There is also a vast amount of tools to manipulate RDF data, a list can be found on the Semantic Web Wiki11 .\nThe same growth can be observed in mathematics and other sciences formalized for coq, all naturally translatable to RDF, and containing thoushands of mathematical theorems with their full proofs.\n5.2. Semantic Web\u2019s Semantics. The basic representation of concepts is standardized by RDF (Resource Description Framework). RDF is a language expressing Ontologies. An ontology contains definitions of types (taxonomy) like \u201cdog is an animal\u201d, and relations between them like \u201call dogs has four legs\u201d. Of course, a definition of Four has to make sense as well, like the definition of \u201chas\u201d.\nNotation3 (N3) is a language makes it more convenient and human-readable to write RDF ontologies. It is logically powerful enough to represent DTLC. Moreover, it can always be converted into quads and vice versa, which is the natural format for \u03c4 -chains, as mentioned at the end of the introduction.\nRDF being exactly pure logic can also be converted into English, in some limited sense, and vice versa. It is more machine-readable english than human-readable, but still very natural. We of course speak about the Attempto project.\n5.3. State-of-the-Art. EulerGUI is a veteran IDE for various reasoning engines, demonstrating the power of ontologies. Some of its supported formats are RDF, RDFS, N3, OWL, UML, SPARQL, Attempto (Controlled English), and even Java jars. It can output Java code that builds a UI according to an ontology, using Rule based SWING. It supports four different and powerful reasoning engines, logican queries, explained proofs, consistency checks, fuzzy logic, graphical visualization, and more. It can be integrated with the Deductions engine 12 which is itself written in ontologies. It is described on their website as \u201cArtificial Intelligence techniques applied to common software tasks, using First Order Logic through N3 + OWL ontologies and rules\u201d. Both EulerGUI and Deductions are compatible with the powerful reasoning engine Drools. On Drools website one can find pros and cons\n9http://www.w3.org/standards/semanticweb/ontology http://www.w3.org/wiki/Ontology_ Dowsing#Lists_of_ontologies_and_services 10Ontologies and search engines for ontologies from EulerGUI manual http://eulergui. sourceforge.net/documentation.html##Finding 11http://semanticweb.org 12http://deductions.sourceforge.net\nof ontologies based development 13 . The reader is invited to get introduced to this world from the linked materials. A more recent tool is Protege, a professional open-source ontologies IDE.\n5.4. Ontologies of Rules. Given we formalize our rules as an ontology. What are we going to do with them? We take an example tool called cwm14. We can ask it questions that are answerable from within the rules, even if not explicitly but by inference. We can also verify the consistency of rules 15 .\nThe reader is invited to take a look at its various tools16, including the reasoner and the OWL Verbalizer (OWL is RDF with some basic ontologies defined, and is a W3C standard). See appendix for demonstrative screenshots.\n5.5. Programs as Ontologies. DTLC based languages can implement almost everything, and in practical sense - everything. While Turing Complete languages suffer from undecidability, on DTLC languages we can look at the code as logic we can work with and prove various useful claims directly from the code, like that the program does not use the internet, or accesses only certain files, , show it halts, prove its execution path etc.\nThe transition from DTLC to RDF isn\u2019t trivial but two examples of how it can be done can be found at [14, 13]. The structure of the program (almost) doesn\u2019t change and namings can be preserved. The RDF format can be kept for being human readable, but for machine-proofs we do not stay on the RDF representation but use SMT solvers for reasoning."}, {"heading": "6. Peer-to-Peer", "text": "As stated above, \u03c4 -chain can generalize any P2P network. A decentralized P2P client is a state machine that decides what to do given various inputs, according to some rules.\nExample 3. DHT is an example of a P2P architecture. One of the products using it is BitTorrent. The most common flavor of DHT is Kademlia. Bitcoin\u2019s network is DHT itself, but with full replication per node, while on regular DHT the number of replicas can be controlled. A sample formal specification (namely: rules) of the Kademlia can be found at [11] . Note that this specification is given with a TFPL, hence can easily be translated into ontologies. We can see it has four primitives: Ping, Store, FindNode, and FindValue. The rules define what to do on each case.\nExample 4. Bitcoin is a decentralized P2P network having proofs as its main interpretation, while of course can be written as rules.\nOn \u03c4 -chain, every node stores three local ontologies: its routing table, its user\u2019s input, and the input from its peers. Those are combined with the ontologies this node subscribes to, from the shared db, together inferring what the client should do\n13http://docs.jboss.org/drools/release/5.4.0.Final/drools-expert-docs/html/ch01.\nhtml##d0e384 14http://www.w3.org/2000/10/swap/doc/cwm.html 15An important example for consistency check is, given a logical proof of some theorem represented as rules, verifying the proof is equivalent to veriying the rule\u2019s consistency. 16http://attempto.ifi.uzh.ch/site/tools\nnow, which can be local storage operations or sending information to peer(s). It is like: I tell you part of what I know, you think about it and tell me the conclusions you want to share with me.\nCorollary 5. Any P2P network is a ruleset defining what to send given what was received.\nA P2P network can set its own rules, and many contexts for many rules, and by this on-going implementing new networks over this one, while the user can decide on which contexts they want to participate. This is \u03c4 -chain.\n7. \u03c4-chain\n\u03c4 -chain has two stages: bootstrapping and maturity.\n7.1. Bootstrapping. The network will begin with the following \u201cbare\u201d client: it will contain an ontology that implements simple DHT, and will run actions by querying the ontology, using cwm, queries like \u201cwhat should I do now\u201d, or more precisely, \u201cwhat should I send to each of my peers\u201d and \u201cwhat should I do with my local storage\u201d. From this point we can implement everything by ontologies, in a collaborative work, over a decentralized network.\nOn this bootstrapping stage we plan to insert many readily-made and ontologies, and we plan to gather a round-table of professionals to set this network\u2019s global rules together. Here are some possible features to be implemented at the bootstrapping step:\n\u2022 Rules to avoid malicious use of the network. \u2022 Ability to create separate contexts, where each context has its own rules and they do not interfere. By this, users may create many programs and users can pick which programs they want to use. Like decentralized Appstore/Google Play. \u2022 Incentivizing every node for its work. \u2022 Implementing Bitcoin as a proof of concept17. \u2022 Distributed large-scale storage, which is essential for the system itself, since it is planned to deal with large amount of data. \u2022 Voting. \u2022 How rules are going to be set from now on.\n7.2. Maturity. Once the system is thought to have enough strength to go fully public and for everyday use, we can speak of what can be done over it then.\n\u2022 Decentralized Source Repository (e.g. decentralized github). \u2022 Decentralized Application Repository. \u2022 Safely and automatically offer coins 18 to a human or machine proving a theorem or writing a software given formal specifications. \u2022 Huge db of code fragments ready to be automatically reused by verifying formal requirements or by detecting isomorphisms 19 between ontologies.\n17Nothing intended to be used in real life. Of course, improved cryptocurrency is planned as further steps, especially at the scope of Agoras.\n18 \u03c4 -chain will not implement coins from day 1, but it is something that can and should be built upon the system. 19Those isomorphisms can connect ideas across science. It is possible that one writing some code that walks on graphs, will solve a problem that a biologist is dealing with.\n\u2022 Any kind of votes for any purpose, like development team vote for a valid and authentic release, or decentralized democracy. \u2022 Collaborative social/corporate rule-making, with the ability to find contradictions, to ask \u201cwhat is missing in order to obtain X\u201d. And voting for those rules if wanted. \u2022 Fully-customizable, safe, decentralized and private social networks, as well as private clubs (even with membership fees, entrance test, acceptance rules etc.). \u2022 Ask human-readable questions about virtually anything. Like \u201cwhere did Aristotles live\u201d. cwm is able to answer such questions from ontologies, and specify a proof for its answer. Of course, other tools are both compatible and much more powerful, e.g. coq."}, {"heading": "8. Conclusions", "text": "We have shown how \u03c4 -chain is able to generalize any collaborative work, especially peer-to-peer networks. It provides ultimate information sharing capabilities, with rich ways to query data, infer new information, and act collaboratively. Existing P2P networks can be ported into it, e.g. Bitcoin\u2019s Blockchain, and make them being controlled by additional rules that can be changed on-the-fly with any rule for changing the rules. It may serve as a universal source of trustable information, as a collaborative source of knowledge, source code, and rules, in a form that is both machine and human readable and processable. It offers a ground in which sciences can be unified, and, more importantly, people\u2019s thoughts can be met and unified cleanly."}], "references": [], "referenceMentions": [], "year": 2015, "abstractText": "\u03c4 -chain (pronounced tau-chain) is a decentralized peer-to-peer network having three unified faces: Rules, Proofs, and Computer Programs, allowing a generalization of virtually any centralized or decentralized P2P network, together with many new abilities, as we present on this note. \u201cIf law-making is a game, then it is a game in which changing the rules is a move.\u201d Peter Suber presenting Nomic [10]. Document version: 0.2 Feb 6 2015 Document version: 0.21 Feb 9 2015 Document version: 0.22 Feb 12 2015", "creator": "dvips(k) 5.991 Copyright 2011 Radical Eye Software"}}}