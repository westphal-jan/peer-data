{"id": "1503.00332", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Mar-2015", "title": "JUMP-Means: Small-Variance Asymptotics for Markov Jump Processes", "abstract": "markov jump processes ( mjps ) measurements are used to model a wide range of phenomena from disease progression to rna path folding. however, maximum likelihood estimation of parametric models leads to degenerate trajectories and inferential performance is poor in nonparametric models. we take a small - variance asymptotics ( sva ) approach to overcome these limitations. we derive the small - event variance asymptotics effect for parametric and nonparametric mjps for both directly analyzing observed and hidden state models. in processing the parametric case we obtain, a novel objective response function which leads to non - degenerate trajectories. to derive the nonparametric version we introduce the convex gamma - gamma process, a novel extension to the gamma - exponential process. we propose algorithms for each of these formulations, which we call \\ emph { : jump - means }. our experiments demonstrate that jump - means is competitive with or outperforms widely used mjp inference approaches in integer terms of both speed and reconstruction accuracy.", "histories": [["v1", "Sun, 1 Mar 2015 18:59:12 GMT  (3573kb,D)", "https://arxiv.org/abs/1503.00332v1", null], ["v2", "Sun, 31 May 2015 23:26:53 GMT  (3949kb,D)", "http://arxiv.org/abs/1503.00332v2", null], ["v3", "Fri, 5 Jun 2015 16:11:10 GMT  (3949kb,D)", "http://arxiv.org/abs/1503.00332v3", "In Proceedings of the 32nd International Conference on Machine Learning (ICML 2015)"]], "reviews": [], "SUBJECTS": "stat.ML cs.LG", "authors": ["jonathan h huggins", "karthik narasimhan", "ardavan saeedi", "vikash k mansinghka"], "accepted": true, "id": "1503.00332"}, "pdf": {"name": "1503.00332.pdf", "metadata": {"source": "META", "title": "JUMP-Means: Small-Variance Asymptotics for  Markov Jump Processes", "authors": ["Jonathan H. Huggins", "Karthik Narasimhan", "Ardavan Saeedi", "Vikash K. Mansinghka"], "emails": ["JHUGGINS@MIT.EDU", "KARTHIKN@CSAIL.MIT.EDU", "ARDAVANS@MIT.EDU", "VKM@MIT.EDU"], "sections": [{"heading": "1. Introduction", "text": "Markov jump processes (MJPs) are continuous-time, discrete-state Markov processes in which state durations are exponentially distributed according to state-specific rate parameters. A stochastic matrix controls the probability of transitioning between pairs of states. MJPs have been used to construct probabilistic models either when the state of a system is observed directly, such as with disease pro-\nProceedings of the 32nd International Conference on Machine Learning, Lille, France, 2015. JMLR: W&CP volume 37. Copyright 2015 by the author(s).\ngression (Mandel, 2010) and RNA path folding (Hajiaghayi et al., 2014), or when the state is only observed indirectly, as in corporate bond rating (Bladt & S\u00f8rensen, 2009). For example, consider the important clinical task of analyzing physiological signals of a patient in order to detect abnormalities. Such signals include heart rate, blood pressure, respiration, and blood oxygen level. For an ICU patient, an abnormal state might be the precursor to a cardiac arrest event while for an epileptic, the state might presage a seizure (Goldberger et al., 2000). How can the latent state of the patient be inferred by a Bayesian modeler, so that, for example, an attending nurse can be notified when a patient enters an abnormal state? MJPs offer one attractive approach to analyzing such physiological signals.\nApplying an MJP model to physiological signals presents a challenge: the number of states is unknown and must be inferred using, for example, Bayesian nonparametric methods. However, efficient inference in nonparametric MJP models is a challenging problem, where existing methods based on particle MCMC scale poorly and mix slowly (Saeedi & Bouchard-Co\u0302te\u0301, 2011). Current optimization-based methods such as expectation maximization (EM) are inapplicable if the state size is countably infinite; hence, they cannot be applied to Bayesian nonparametric MJP models, as we would like to do for physiological signals.\nFurthermore, although MJPs are viewed as more realistic than their discrete-time counterparts in many fields (Rao & Teh, 2013), degenerate solutions for the maximum likelihood (ML) trajectories for both directly and indirectly observed cases (Perkins, 2009), and non-existence of the ML transition matrix (obtained from EM) for some indirectly observed cases (Bladt & S\u00f8rensen, 2009) present inferential challenges. Degenerate ML trajectories occur when some of the jump times are infinitesimal, which severely undermines the practicality of such approaches. For instance, a trajectory which predicts a patient\u2019s seizure for an\nar X\niv :1\n50 3.\n00 33\n2v 3\n[ st\nat .M\nL ]\n5 J\nun 2\ninfinitesimal amount of time is of limited use to the medical staff. Fig. 3 shows an example of the degeneracy problem.\nIn this paper, we take a small-variance asymptotics (SVA) approach to develop an optimization-based framework for efficiently estimating the most probable trajectories (states) for both parametric and nonparametric MJP-based models. Small-variance asymptotics has recently proven to be useful in estimating the parameters and inferring the latent states in rich probabilistic models. SVA extends the wellknown connection between mixtures of Gaussians and kmeans: as the variances of the Gaussians approach zero, the maximum a posteriori solution to the mixture of Gaussians model degenerates to k-means solution (Kulis & Jordan, 2012). The same idea can be applied to obtain wellmotivated objective functions that correspond to a latent variable model for which scalable inference via standard methods like MCMC is challenging. SVA has been applied to (hierarchical) Dirichlet process mixture models (Kulis & Jordan, 2012; Jiang et al., 2012), Bayesian nonparametric latent feature models (Broderick et al., 2013), hidden Markov models (HMMs), and infinite-state HMMs (Roychowdhury et al., 2013).\nWe apply the SVA approach to both parametric and Bayesian nonparametric MJP models to obtain what we call the JUMP-means objective functions. In the parametric case, we derive a novel objective function which does not suffer from maximum likelihood\u2019s solution degeneracy, leading to more stable and robust inference procedures in both the directly observed and hidden state cases. Infinitestate MJPs (iMJPs) are constructed from the hierarchical gamma-exponential process (H\u0393EP) (Saeedi & BouchardCo\u0302te\u0301, 2011). In order to apply SVA to iMJPs, we generalize the H\u0393EP to obtain the first deterministic procedure (we know of) for inference in Bayesian nonparametric MJPs.\nWe evaluate JUMP-means on several synthetic and realworld datasets in both the parametric and Bayesian non-\nparametric cases. JUMP-means performs on par with or better than existing methods, offering an attractive speedaccuracy tradeoff. We obtain significant improvements in the non-parametric case, gaining up to a 20% reduction in mean error on the task of observation reconstruction. In summary, the JUMP-means approach leads to algorithms that 1) are applicable to MJPs with Bayesian nonparametric priors; 2) provide non-degenerate solutions for the most probable trajectories; and 3) are comparable to or outperform other standard methods of inference both in terms of speed and reconstruction accuracy."}, {"heading": "2. Background", "text": ""}, {"heading": "2.1. Markov Jump Processes", "text": "A Markov jump process (MJP) is defined by (a) a finite (or countable) state space, which we identify with the integers [M ] , {1, . . . ,M}; (b) an initial state probability distribution \u03c0; (c) a (stochastic) state transition matrix P with pss = 0 for all s \u2208 [M ]; and (d) a state dwell-time rate vector \u03bb , (\u03bb1, . . . , \u03bbM ). The process begins in a state s0 \u223c \u03c0. When the process enters a state s, it remains there for a dwell time that is exponentially distributed with parameter \u03bbs. When the system leaves state s, it transitions to state s\u2032 6= s with probability pss\u2032 . A trajectory of the MJP is a sequence of states and a dwell time for each state, except for the final state: U , UT , (s0, t0, s1, t1, . . . , sK\u22121, tK\u22121, sK). Implicitly, K (and thus U) is a random variable such that tK\u22121 < T and the system is in state sK at time T . Let S , ST , (s0, s1, . . . , sK) and T , TT , (t0, t1, . . . , tK\u22121) be the sequences of states and times corresponding to U . The probability of a trajectory is given by\np(U |\u03c0, P,\u03bb) = 1[t\u00b7 \u2264 T ]e\u2212\u03bbsK (T\u2212t\u00b7)\u03c0s0 (1) \u00d7\u220fKk=1 \u03bbsk\u22121e\u2212\u03bbsk\u22121 tk\u22121psk\u22121sk ,\nwhere t\u00b7 , \u2211K\u22121 k=0 tk and 1[\u00b7] is the indicator function. In many cases when the states are directly observed, the initial state and the final state are observed, in which case it is straightforward to obtain a likelihood from (1).\nA hidden state MJP (HMJP) is an MJP in which the states are observed indirectly according to a likelihood model p(x | s), s \u2208 [M ], x \u2208 X , where X is some observation space. The times of the observations \u03c4 = (\u03c41, . . . , \u03c4L) are chosen independent of U , so the probability of the observations X , (x1, . . . , xL) is given by p(X |U , \u03c4 ) =\u220fL `=1 p(x` | s\u03c4`), where, with an abuse of notation, we write s\u03c4 for the state of the MJP at time \u03c4 ."}, {"heading": "2.2. Previous Approaches to MJP Inference", "text": "There are a number of existing approaches to inference and learning in MJPs. An expectation-maximization (EM) algorithm can be derived, but it cannot be applied to models with countably infinite states, so it is not suitable for iMJPs (Lange, 2014) (iMJPs are detailed in Section 4). Moreover, with discretely observed data, the maximumlikelihood estimate with finite entries for the transition matrix obtained from EM may not exist (Bladt & S\u00f8rensen, 2005).\nMaximum likelihood inference amounts to finding maxU ln p(U |\u03c0, P,\u03bb), which can be carried out efficiently using dynamic programming (Perkins, 2009). However, maximum likelihood solutions for the trajectory are degenerate: only an infinitesimal amount of time is spent in each state, except for the state visited with the smallest rate parameter (i.e., longest expected dwell time). Such a solution is unsatisfying and unintuitive because the dwell times are far from their expected values. Thus, maximum likelihood inference produces results that are unrepresentative of the model behavior.\nMarkov chain Monte Carlo methods have also been developed, but these can be slow and their convergence is often difficult to diagnose (Rao & Teh, 2013). Recently, a more efficient Monte Carlo method was proposed in Hajiaghayi et al. (2014) which is based on particle MCMC (PMCMC) methods (Andrieu et al., 2010). This approach addresses the issue of efficiency, but since it marginalizes over the jump points, it cannot provide probable trajectories."}, {"heading": "2.3. Small-variance Asymptotics", "text": "Consider a Bayesian model p(D |Z, \u03b8, \u03c32)p(Z, \u03b8) in which the likelihood terms contain a variance parameter \u03c32. Given some data D, a point estimate for the parameters \u03b8 and latent variables Z of the model can obtained by maximizing the posterior p(Z, \u03b8 |D,\u03c32) \u221d p(D |Z, \u03b8, \u03c3)p(Z, \u03b8), resulting in a maximum a posteriori (MAP) estimate. In the SVA approach (Broderick et al.,\n2013), the MAP optimization is considered in the limit as the likelihood variance parameter is taken to zero: \u03c32 \u2192 0. Typically, the small-variance limit leads to a much simpler optimization than the MAP optimization with non-zero variance. For example, the MAP objective for a Gaussian mixture model simplifies to the k-means objective."}, {"heading": "3. Parametric MJPs", "text": ""}, {"heading": "3.1. Directly Observed MJP", "text": "Consider the task of inferring likely state/dwell-time sequences given O = {(t\u0303i, s\u0303i)}Ii=1, the times at which the system was directly observed and the states of the system at those times. For simplicity we assume that t\u03030 = 0 and that all times are in the interval [0, T ]. Let s(U , t) be the state of the system following trajectory U at time t. The likelihood of a sequence is\n`(U |O, P,\u03bb) = 1[t\u00b7 \u2264 T ] I\u220f i=1 1[s(U , t\u0303i) = s\u0303i]\n\u00d7 (\nK\u220f k=1 \u03bbsk\u22121e \u2212\u03bbsk\u22121 tk\u22121psk\u22121sk\n) e\u2212\u03bbsK (T\u2212t\u00b7) (2)\nWe also place a gamma prior on the rate parameters \u03bb (detailed below). Instead of relying on MAP estimation, we apply a small variance asymptotics analysis to obtain a more stable objective function. Following (Jiang et al., 2012), we scale the distributions by an inverse variance parameter \u03b2 and then maximize the scaled likelihood and prior in the limit \u03b2 \u2192\u221e (i.e., as the variance goes to zero). Scaling the exponential distribution f(t;\u03bb) = \u03bb exp(\u2212\u03bbt) produces the two-parameter family with\nln f(t;\u03bb, \u03b2) = \u2212 \u03b2 ( \u03bbt\u2212 ln t\u2212 ln\u03bb\u2212 \u03b2 ln\u03b2 \u2212 ln \u0393(\u03b2)\n\u03b2 +\nln t\n\u03b2\n) ,\nwhich is the density of a gamma distribution with shape parameter \u03b2 and rate parameter \u03b2\u03bb. Hence, the mean of the scaled distribution is 1\u03bb and its variance is 1 \u03bb2\u03b2 . Letting F (t;\u03bb, \u03b2) denote the CDF corresponding to f(t;\u03bb, \u03b2), we have 1 \u2212 F (t;\u03bb, \u03b2) = \u0393(\u03b2,\u03b2\u03bbt)\u0393(\u03b2) , where \u0393(\u00b7, \u00b7) is the upper incomplete gamma function.\nThe multinomial distribution is scaled by the parameter \u03b2\u0302 , \u03be\u03b2. Writing the likelihood with the scaled exponential families (and dropping indicator variables) yields:\n`(U|O, P,\u03bb) \u221d exp { \u2212\u03b2 (\nln \u0393(\u03b2)\u2212 ln \u0393(\u03b2, \u03b2\u03bbsK t\u00b7) \u03b2\n(3)\n+ K\u22121\u2211 k=0 ( \u03be ln psksk+1 + \u03bbsktk \u2212 ln\u03bbsktk )\n+ K\u22121\u2211 k=0 ( \u2212\u03b2 ln\u03b2 \u2212 ln \u0393(\u03b2) \u03b2 + ln tk \u03b2 ))} .\nThe modified likelihood is for a jump process which is no longer Markov when \u03b2 6= 1. We also place a Gam(\u03b1\u03bb, \u03b1\u03bb\u00b5\u03bb) prior on each \u03bbi and set \u03b1\u03bb = \u03be\u03bb\u03b2. It can be shown (see the Supplementary Material for details) that, when \u03b2 \u2192\u221e, the MAP estimation problem becomes\nmin U,\u03bb,P\n{ \u03be K\u22121\u2211 k=0 ln psksk+1 + K\u22121\u2211 k=0 (\u03bbsktk \u2212 ln\u03bbsktk \u2212 1)\n+ 1[\u03bbsK t\u00b7 \u2265 1](\u03bbsK t\u00b7 \u2212 ln\u03bbsK t\u00b7 \u2212 1) (4)\n+ \u03be\u03bb M\u2211 s=1 (\u00b5\u03bb\u03bbs \u2212 ln\u03bbs \u2212 1) } .\nThe optimization problem (A.4) is very natural and offers far greater stability than maximum likelihood optimization. As with maximum likelihood, the ln psksk+1 terms penalize transitions with small probability. The term h(tk) , \u03bbsktk \u2212 ln\u03bbsktk \u2212 1 is convex and minimized when tk = 1/\u03bbsk , the expected value of the dwell time for state sk. As tk \u2192 0, h(tk) approaches \u221e, while for tk 1/\u03bbsk , h(tk) grows approximately linearly. Thus, times very close to zero are heavily penalized while times close to the expected dwell time are penalized very little. The term 1[\u03bbsK t\u00b7 \u2265 1](\u03bbsK t\u00b7 \u2212 ln\u03bbsK t\u00b7 \u2212 1) penalizes the time t\u00b7 spent in state sk so far in the same manner as a regular dwell time when t\u00b7 is greater than the expected value of the dwell-time. However, when t\u00b7 is less than the expected value there is no cost, which is quite natural since the system may remain in state sk for longer than t\u00b7 \u2014 i.e., there should not be a large penalty for t\u00b7 being less than its expected value. Finally, parameters \u03be\u03bb and \u00b5\u03bb have a very natural interpretation (cf. (8) below): they correspond to a priori having \u03be\u03bb dwell times of length \u00b5\u03bb for each state.\nComparison to Maximum Likelihood MJP trajectories estimated using maximum likelihood (MLE) are usually trivial, with the system spending almost all its time in a single state (with the smallest \u03bb), with infinitesimal dwell times for the other states. This poor behavior of MLE is due to the fact that the mode of Exp(\u03bb), which is favored by the MLE, is 0, even though the mean is 1/\u03bb.1 The SVA optimization, on the other hand, does give trajectories that are representative of the true behavior because the SVA terms of the form \u03bbt\u2212 ln(\u03bbt)\u22121 are optimized at 1/\u03bb (i.e., at the mean of Exp(\u03bb)). We demonstrate the superior behavior of the SVA in the concrete example of estimating disease progression in patients in Section 5.\n1Note that placing priors on the rate parameters, as we do, does not affect the degeneracy of the ML trajectory."}, {"heading": "3.2. Hidden State MJP", "text": "For an HMJP, the likelihood of a valid trajectory is\np(U |X , \u03c4 , P,\u03bb) = (\nL\u220f `=1 p(x` | s\u03c4`) )\n\u00d7 (\nK\u220f k=1 \u03bbsk\u22121e \u2212\u03bbsk\u22121 tk\u22121psk\u22121sk\n) e\u2212\u03bbsK (T\u2212t\u00b7). (5)\nHence, the only difference between the directly observed case and the HMJP is the addition of the observation likelihood terms. Because multinomial observations are commonly used in MJP applications, that is the case we consider here. Let N denote the number of possible observations and \u03c1sn be the probability of observing x` = n when s\u03c4` = s. The observation likelihoods are scaled in the same manner as the transition probabilities, but with \u03b2\u0302 = \u03b6\u03b2. Thus, for the HMJP, we obtain:\nmin U,\u03bb,P,\u03c1\n{ \u03b6 L\u2211 `=1 ln \u03c1s\u03c4`x` + \u03be K\u22121\u2211 k=0 ln psksk+1\n+ K\u22121\u2211 k=0 (\u03bbsktk \u2212 ln\u03bbsktk \u2212 1) (6) + 1[\u03bbsK t\u00b7 \u2265 1](\u03bbsK t\u00b7 \u2212 ln\u03bbsK t\u00b7 \u2212 1)\n+ \u03be\u03bb M\u2211 s=1 (\u00b5\u03bb\u03bbs \u2212 ln\u03bbs \u2212 1) } ."}, {"heading": "3.3. Algorithm", "text": "Optimizing the JUMP-means objectives in (A.4) and (6) is non-trivial due to the fact that we do not know the number of jumps in the MJP, and the combinatorial explosion in the sequences with the number of jump points. The terms involving the continuous variables tk (dwell times) present an additional complexity.\nWe therefore resort to an alternating minimization procedure to optimize the JUMP-means objective function, similar in spirit to the one used in Roychowdhury et al. (2013). In each iteration of the optimization process, we first use a modified Viterbi algorithm to obtain the most likely state sequence. Then, we use convex optimization to distribute the jump points optimally with respect to the values from \u03bb for the current state sequence.\nDirectly Observed MJP When optimizing (A.4), there may be many sequences (O\u2019s) available, representing distinct realizations of the process. We use the following algorithm to optimize (A.4):\n1. Initialize the state transition matrix P and rate vector \u03bb with uniform values.\n2. For every observation sequence O, instantiate the jump points by adding one jump point between every pair of observations, in addition to the start and end points.\n3. For each O, use a modified Viterbi algorithm. to find the best state sequence to optimize (A.4), while keeping the jump points fixed. The modified algorithm includes the dwell time penalty terms, which are dependent upon the assignment of states to the time points.\n4. Optimize the dwell times tk with the state sequences of the trajectories fixed.\n5. Optimize P and \u03bb with the other variables fixed. The optimal values can be obtained in closed form. For example, if there is only a single observation sequence O with corresponding inferred trajectory S, then\npmj = nmj\u2211M j=1 nmj , m, j \u2208 [M ] (7)\n\u03bbm = \u03be\u03bb +\n\u2211 k 1[sk = m]\n\u03be\u03bb\u00b5\u03bb + \u2211 k 1[sk = m]tk , (8)\nwhere nmj denotes to the number of transitions from state m to state j in S.\n6. Repeat steps 3-5 until convergence.\nBeam Search Variant We note that the optimization procedure just described is restrictive since the number of jump points is fixed and the jump points are constrained by the observation boundaries. To eliminate this, we also tested a beam search variant of the algorithm to allow for the creation and removal of jump points, but found it did not have much impact in our experiments.\nHidden State MJP The algorithm to optimize the hidden state MJP JUMP-means objective (6) is similar to that for optimizing (A.4), but with three modifications. First, in place of O, we have the indirect observations of the states X . Second, observation likelihood terms containing \u03c1 are included in the objective minimized by the Viterbi optimization (step 3). Finally, an additional update is performed in step 5 for each of the observation distributions \u03c1m:\n\u03c1mn =\n\u2211 ` 1[s\u03c4` = m]1[x` = n]\u2211\n` 1[s\u03c4` = m] (9)\nfor m \u2208 [M ] and n \u2208 [N ]. If each \u03c1m , (\u03c1m1, . . . , \u03c1mN ) is initialized to be uniform, then the algorithm converges to a poor local minimum, so we add a small amount of random noise to each uniform \u03c1m."}, {"heading": "4. Bayesian Nonparametric MJPs", "text": "We now consider the Bayesian nonparametric MJP (iMJP) model. The iMJP is based on the hierarchical gammaexponential process (H\u0393EP), which is constructed from the\ngamma-exponential process (\u0393EP). We denote the Moran gamma process with base measure H and rate parameter \u03b3 by \u0393P(H, \u03b3) (Kingman, 1993). The H\u0393EP generates a state/dwell-time sequence s0, t1, s1, t2, s2, t3, s3, . . . (with s0 assumed known) according to (Saeedi & BouchardCo\u0302te\u0301, 2011):\n\u00b50 \u223c \u0393P(\u03b10H0, \u03b30), (10) \u00b5i |\u00b50 i.i.d.\u223c \u0393P(\u00b50, \u03b3), i = 1, 2, . . . , (11) sk | {\u00b5i}\u221ei=0,Uk\u22121 \u223c \u00b5\u0304sk\u22121 , (12) tk | {\u00b5i}\u221ei=0,Uk\u22121 \u223c Exp(\u2016\u00b5sk\u22121\u2016), (13)\nwhere H0 is the base probability measure, \u03b10 is a concentration parameter, Uk , (s0, t1, s1, t2, s2, . . . , tk\u22121, sk), \u00b5\u0304i , \u00b5i/\u2016\u00b5i\u2016, and \u2016\u00b5\u2016 denotes the total mass of the measure \u00b5. As in the parametric case, we must replace the exponential distribution in (13) with the scaled exponential distribution. After an appropriate scaling of the rest of the hyperparameters, we obtain the hierarchical gammagamma process (H\u0393\u0393P). The definition and properties of the H\u0393\u0393P are given in the Supplementary Material.\nLetM denote the number of used states,Km the number of transitions out of statem, and \u00b5ij the mass on the j-th component of the measure \u00b5i. For 0 \u2264 i \u2264M, 1 \u2264 j \u2264M , let \u03c0\u0304ij , \u00b5\u0304ij and for 0 \u2264 i \u2264M , let \u03c0\u0304i,M+1 , 1\u2212 \u2211M j=1 \u00b5\u0304ij . Let t\u2217m , (t \u2217 m1, . . . , t \u2217 mKm\n) be the waiting times following state m and define t\u2217m\u00b7 , \u2211Km j=1 t \u2217 mj . In order to retain the effects of the hyperparameters in the asymptotics, set \u03b10 = exp(\u2212\u03be1\u03b2) and \u03b30 = \u03ba0 = \u03be2. It can then be shown that (see the Supplementary Material for details), when \u03b2 \u2192\u221e, the iMJP MAP estimation problem becomes\nmin K,UK ,\u03c0\u0304,\u03c1 \u03b6 L\u2211 `=1 ln \u03c1s\u03c4`x` + \u03be K\u2211 k=1 ln \u03c0\u0304sk\u22121sk\n+ \u03be1M + M\u2211 m=1 \u03be2KL(\u03c0\u03040||\u03c0\u0304m) (14)\n\u2212 M\u2211 m=1 {\u2211Km j=1 ln t \u2217 mj \u2212Km ln ([\u03b3 + t\u2217m\u00b7]/Km) } .\nLike its parametric counterpart, the Bayesian nonparametric cost function penalizes dwell durations very close to zero via the ln t\u2217mj terms. In addition, there are penalties for the number of states and the state transitions. The observation likelihood term in (14) favors the creation of new states to minimize the JUMP-means objective, while the state penalty \u03be1M and the non-linear penalty term Km ln ([\u03b3 + t \u2217 m\u00b7]/Km) counteracts the formation of a long tail of states with very few data points. The \u03b3 hyperparameter introduces an additional, nonlinear cost for each additional state \u2014 if a state is occupied for \u2126(\u03b3) time, then the \u03b3 term for that state does not have much effect on the cost.\nThe KL divergence terms between \u03c0\u03040 and \u03c0\u0304m arise from the hierarchical structure of the prior, biasing the transition probabilities \u03c0\u0304m to be similar to the prior \u03c0\u03040."}, {"heading": "4.1. Algorithm", "text": "For the iMJP case, we have the extra variables M and {\u03c0\u0304m}Mm=0 to optimize. In addition, the number of variables to optimize depends on the number of states in our model. The major change in the algorithm from the parametric case is that we must propose and then accept or reject the addition of new states. We propose the following algorithm for optimizing the iMJP:\n(1) Initialize \u03c1, \u03c0\u03040 and \u03c0\u03041 with uniform values and set the number of states M = 1.\n(2) For each observation sequence, apply the Viterbi algorithm and update the times using the new objective function in (14), analogously to steps (3) and (4) in the parametric algorithm.\n(3) Perform MAP updates for \u03c1 (as in (9)) and \u03c0\u0304:\n\u03c0\u0304mj = \u03benmj + \u03be2\u03c0\u03040j \u03be \u2211M j=1 nmj + \u03be2\u03c0\u03040j , m, j \u2208 [M ] (15)\n\u03c0\u03040j \u221d M\u220f m=1 \u03c0\u0304 1/M mj , j \u2208 [M ]. (16)\n(4) For every state pair m,m\u2032 \u2208 [M ], form a new state M + 1 by considering all transitions from m to m\u2032 and reassigning all observations x` that were assigned to m\u2032 to the new state. Update \u03c0\u0304 and \u03c1 to estimate the overall objective function for every new set of M + 1 states formed in this way and accept the state set that minimizes the objective. If no such set exists, do not create a new state and revert back to the old \u03c0\u0304 and \u03c1.\n(5) Repeat steps 2-4 until convergence.\nRemark. If instead of multinomial observations we have Gaussian observations, the parameter \u03c1s is replaced with the mean parameter \u00b5s. In this case, we update the mean for each state using the data points assigned to the state, similar to the procedure for k-means clustering (see, e.g., Jiang et al. (2012); Roychowdhury et al. (2013))."}, {"heading": "5. Experiments", "text": "In this section we provide a quantitative analysis of the JUMP-means algorithm and compare its performance on synthetic and real datasets with standard inference methods for MJPs. For evaluation, we consider multiple sequences of discretely observed data and randomly hold out a subset of the data. We report reconstruction error for performance comparison."}, {"heading": "5.1. Parametric Models", "text": "For the parametric models, we compare JUMP-means to maximum likelihood estimation of the MJP parameters learned by EM (Asger & Ledet, 2005), the MCMC method proposed in Rao & Teh (2013) and a simple baseline where we ignore the sequential structure of the data. We run three sets of experiments (2 synthetic, 1 real) for our evaluation.\nSynthetic 1: Directly Observed States For evaluating the model on a directly observed process, we generate 100 different datasets randomly from various MJPs with 10 states. To generate each dataset, we first generate the rows of the transition probability matrix and transition rates independently from Dir(1) and Gam(1, 1), respectively. Next, given the rates and transition probabilities for each dataset, we sample 500 sequences of length 20. We hold out 30% of the observations at random for testing reconstruction error.\nWe run JUMP-means by initializing the algorithm with a uniform transition matrix P and set the rate vector \u03bb to be all ones. We run 300 iterations of the algorithm described in Section 3.3; each iteration is one scan through all the sequences. We set the hyperparameters \u03be, \u03be\u03bb, and \u00b5\u03bb equal to 1, 1, and .5, respectively. For MCMC, we initialize the jump points using the time points of the observations. We place independent Dir(1) priors on P and independent Gam(1, 1) priors on \u03bb. We initialize EM with a uniform P and an all-ones \u03bb. We run both MCMC and EM for 300 iterations, then reconstruct observations using the Bayes estimator approximated from the 300 posterior samples. For our baseline we use the most common observation in the dataset as an estimate of the missing observations.\nTable 1 gives the mean reconstruction error across sequences for the various methods. Note that JUMP-means performs better than MCMC, and is almost on par with EM.\nFig. 2(a) shows the average error across all the datasets for each method versus number of iterations. In terms of CPU time, each iteration of JUMP-means (Java), EM (Java), and MCMC (Python) takes 0.3, 1.61 and 42 seconds, respectively. We also ran experiments with the beam search variant described in Section 3.3; however, we did not obtain any significant improvement in results.\nSynthetic 2: Hidden States For the hidden state case, we generate 100 different datasets for MJPs with 5 hidden and 5 observed states, with varying parameters as above. In each dataset there are 500 sequences of length 20. In addition to parameters in the directly observed case, we generate observation likelihood terms for each state from Dir(1).\nWe initialize the transition probabilities and the rate vectors for JUMP-means, MCMC and EM in a fashion similar to the directly observed case. For the observation likelihood \u03c1, we use Dir(1) as a prior for MCMC, uniform distributions for EM initialization and a uniform probability matrix with a small amount of random noise for JUMP-means initialization. We set \u03be, \u03be\u03bb, \u00b5\u03bb as before and \u03be to 1.\nWe run each algorithm for 300 iterations. For JUMPmeans, we use the hidden state MJP algorithm described in Section 3.3. Table 1 and Fig. 2(b) again demonstrate that JUMP-means outperforms MCMC by a large margin and performs comparably to EM. The poor performance of MCMC is due to slow mixing over the parameters and state trajectories. The slow mixing is a result of the coupling between the latent states and the observations, which is induced by the observation likelihood.\nDisease Progression in Multiple Sclerosis (MS) Estimating disease progression and change points in patients with Multiple Sclerosis (MS) is an active research area (see, e.g., Mandel (2010)). We can cast the progression of the disease in a single patient as an MJP, with different states representing the various stages of the disease. Obtaining the most-likely trajectory for this MJP can aid in understanding the disease progression and enable better care.\nFor our experiments, we use a real-world dataset collected from a phase III clinical trial of a drug for MS. This dataset\ntracks the progression of the disease for 72 different patients over three years. We randomly hold out 50% of the observations and evaluate on the observation reconstruction task. The observations are values of a disability measure known as EDSS, recorded at different time points. Initialization and hyperparameters are the same as Synthetic 1.\nTable 1 shows that JUMP-means significantly outperforms MCMC, achieving almost a 50% relative reduction in reconstruction error. JUMP-means again achieves comparable results with EM. Fig. 3 (top panel) provides an example of the latent trajectories from JUMP-means and maximum likelihood estimate for a single patient. The MLE trajectory includes two infinitesimal dwell times, which do not reflect realistic behavior of the system (since we do not expect a patient to be in a disease state for an infinitesimal amount of time). On the other hand, the trajectory produced by JUMP-means takes into account the dwell times of the various stages of the disease and provides a more reasonable picture of its progression."}, {"heading": "5.2. Nonparametric Model", "text": "Vital Signs Monitoring (MIMIC) We now consider a version of the problem of understanding physiological signals discussed in the introduction. We use data from the MIMIC database (Goldberger et al., 2000; Moody & Mark, 1996), which contains recordings of several vital parameters of ICU patients. Specifically, we consider blood pressure readings of 69 ICU patients collected over a 24-hour period and sub-sample observation sequences of length 32 for each patient, keeping the start and end times fixed.2 For testing, we randomly hold out \u223c25% of the observations. To initialize JUMP-means, we choose uniform matrices for \u03c1, \u03c0\u03040 and \u03c0\u03041 and set M = 1. The hyperparameters \u03b3 and \u03be1 are set to 5, while \u03b6, \u03be, and \u03be2 are set to 0.005. Using a Gaussian likelihood model for the observations, we run our model for 50 iterations. We compare with particle MCMC (PMCMC) (Andrieu et al., 2010) and EM. PMCMC is a state-of-the-art inference method for iMJPs (Saeedi & Bouchard-Co\u0302te\u0301, 2011), which we run for 300 iterations with 100 particles. For PMCMC, we first categorize the readings into the standard four categories for blood pressure provided by NIH3. We run EM with a number of hidden states from 1 to 12 and report the best performance among all the results. For initializing the EM, we use the same setting as the Synthetic 2 case.\nFor evaluation, we consider the time point of a test observation and categorize the mean of the latent state at this time point (using the same categories obtained above) to compare against the actual category. Table 1 shows that JUMP-means significantly outperforms PMCMC and obtains a 21% relative reduction in average error rate. Fig. 2(c) plots the error against iterations of both algorithms. In terms of CPU time, each iteration of JUMP-means (Java) and PMCMC (Java) takes 0.17 and 1.95 seconds, respectively. Compared to EM\u2019s error rate of 25.7%, JUMPmeans reaches a rate of 24.3% without the need to separately train for different number of states. The second-best\n2We use a small dataset for testing since PMCMC cannot easily scale to larger datasets.\n3http://www.nhlbi.nih.gov/health/ health-topics/topics/hbp\nresult for the EM had an error of 45%, which shows the importance of model selection when using EM.\nFig. 3 (bottom) provides an example of the latent trajectory inferred by JUMP-means. The observations are uniquely colored by the latent state they are assigned. We note that the model captures different levels of blood pressure readings and provides a non-degenerate latent trajectory.\nHyperparameters A well-known problem when applying SVA methods is that there are a number of hyperparameters to tune. In our objective functions, some of these hyperparameters (\u03b3, \u00b5\u03bb, and \u03be\u03bb) have natural interpretations so prior knowledge and common sense can be used to set them, but others do not. Fig. 4 shows histograms over the errors we obtain for runs of JUMP-means on the MS and MIMIC datasets with different settings. We can see that a significant fraction of the runs converge to the minimum error, while some settings \u2014 in particular when the hyperparameters were of different orders of magnitude \u2014 led to larger errors. Hence, the sensitivity study indicates the robustness of JUMP-means to the choice of hyperparameters.\nScaling Fig. 5 shows the total runtime and reconstruction error of the non-parametric JUMP-means algorithm on increasingly large amounts of synthetic data. The algorithm is able to handle up to a million data points with the runtime scaling linearly with data size. Furthermore, the error rate decreases significantly as the amount of data increases. See the Supplementary Material for further details."}, {"heading": "6. Conclusion", "text": "We have presented JUMP-means, a new approach to inference in MJPs using small-variance asymptotics. We derived novel objective functions for parametric and Bayesian nonparametric models and proposed efficient algorithms to optimize them. Our experiments demonstrate that JUMPmeans can be used to obtain high-quality non-degenerate estimates of the latent trajectories. JUMP-means offers attractive speed-accuracy tradeoffs for both parametric and nonparametric problems, and achieved state-of-the-art reconstruction accuracy on nonparametric problems."}, {"heading": "ACKNOWLEDGMENTS", "text": "Thanks to Monir Hajiaghayi, Matthew Johnson, and Tejas Kulkarni for helpful comments and discussions. JHH was supported by the U.S. Government under FA9550-11C-0028 and awarded by the DoD, Air Force Office of Scientific Research, National Defense Science and Engineering Graduate (NDSEG) Fellowship, 32 CFR 168a."}, {"heading": "A. Parametric MJPs for SVA", "text": "To obtain the SVA objective from the parametric MJP model, we begin by scaling the exponential distribution f(t;\u03bb) = \u03bb exp(\u2212\u03bbt), which is an exponential family distribution with natural parameter \u03b7 = \u2212\u03bb, log-partition function \u03c8(\u03b7) = \u2212 ln(\u2212\u03b7), and base measure \u03bd(dt) = 1 (Banerjee et al., 2005). To scale the distribution, introduce the new natural parameter \u03b7\u0303 = \u03b2\u03b7 and log-partition function \u03c8\u0303(\u03b7\u0303) = \u03b2\u03c8(\u03b7\u0303/\u03b2). The new base measure \u03bd\u0303(dt) is uniquely defined by the integral equation (see Banerjee et al., 2005, Theorem 5)\u222b\nexp(\u03b7\u0303t)\u03bd\u0303(dt) = exp(\u03c8\u0303(\u03b7\u0303)) = exp(\u2212\u03b2 ln(\u03b7\u0303/\u03b2)) = \u03b2 \u03b2\n\u03b7\u0303\u03b2 .\nChoosing \u03bd\u0303(dt) = t \u03b2\u22121\u03b2\u03b2\n\u0393(\u03b2) dt satisfies the condition, so we have\nf(t;\u03bb, \u03b2) = (\u03b2\u03bb)\u03b2\n\u0393(\u03b2) t\u03b2\u22121e\u2212\u03b2\u03bbt = exp(\u2212\u03b2\u03bbt+ (\u03b2 \u2212 1) ln t+ \u03b2 ln\u03bb\u03b2 \u2212 ln \u0393(\u03b2))\n= exp { \u2212\u03b2 ( \u03bbt\u2212 ln t\u2212 ln\u03bb\u2212 \u03b2 ln\u03b2 \u2212 ln \u0393(\u03b2)\n\u03b2 +\nln t\n\u03b2\n)} .\nIt can now be seen that f(t;\u03bb, \u03b2) is the density of a gamma distribution with shape parameter \u03b2 and rate parameter \u03b2\u03bb. Hence, the mean of the scaled distribution is 1\u03bb and its variance is 1 \u03bb\u03b2 . Letting F (t;\u03bb, \u03b2) denote the CDF corresponding to f(t;\u03bb, \u03b2), we have 1\u2212 F (t;\u03bb, \u03b2) = \u0393(\u03b2,\u03b2\u03bbt)\u0393(\u03b2) , where \u0393(\u00b7, \u00b7) is the upper incomplete gamma function. For the state at the k-th jump we use a 1-of-M representation; that is, sk is an M -dimensional binary random variable which satisfies skm \u2208 {0, 1} and \u2211M m=1 skm = 1. Hence, we have:\np(sk|sk\u22121,j = 1) = M\u220f m=1 pskmjm . (A.1)\nGiven the Bregman divergence for a multinomial distribution, d\u03c6(sk,pj) = KL(sk||pj) where pj , (pj1, . . . , pjM ), this can be written in terms of exponential family notation in the following form (Banerjee et al., 2005):\np(sk|sk\u22121,j = 1) = b\u03c6(sk) exp(\u2212d\u03c6(sk,pj)) (A.2)\nwhere b\u03c6(sk) = 1. For a scaled multinomial distribution we have b\u03b2\u0302\u03c6(sk) exp(\u2212\u03b2\u0302d\u03c6(sk,pj)), where \u03b2\u0302 = \u03be\u03b2 is the scaling parameter for the multinomial distribution. Writing the trajectory probility with the scaled exponential families yields:\np(U|s0, sK , P,\u03bb) \u221d exp { \u2212\u03b2 (\nln \u0393(\u03b2)\u2212 ln \u0393(\u03b2, \u03b2\u03bbsK t\u00b7) \u03b2 + \u03be K\u22121\u2211 k=0 KL(sk+1||psk)\n+ K\u22121\u2211 k=0 ( \u03bbsktk \u2212 ln\u03bbsktk \u2212 \u03b2 ln\u03b2 \u2212 ln \u0393(\u03b2) \u03b2 + ln tk \u03b2 ))} ,\n(A.3)\n10\nSince \u03b2 \u2192 \u221e, we can apply the asymptotic expansions for \u0393(\u00b7) and \u0393(\u00b7, \u00b7). In particular, applying Stirling\u2019s formula and the facts in (DLMF) we have:\n\u03b2 ln\u03b2 \u2212 ln \u0393(\u03b2) \u03b2 = \u03b2 ln\u03b2 \u2212 \u03b2 ln\u03b2 + \u03b2 + o(\u03b2) \u03b2 \u2192 1\nln \u0393(\u03b2)\u2212 ln \u0393(\u03b2, \u03b2\u03bbt) \u03b2 =\n{ \u2212\u03b2\u2212o(\u03b2)\u2212\u03b2 ln\u03bbt+\u03b2\u03bbt\n\u03b2 \u2192 \u03bbt\u2212 ln\u03bbt\u2212 1 if t \u2265 1\u03bb \u03b2 ln \u03b2\u2212\u03b2\u2212\u03b2 ln \u03b2+\u03b2+o(\u03b2)\n\u03b2 \u2192 0 if t < 1\u03bb\nWe also place a Gam(\u03b1\u03bb, \u03b1\u03bb\u00b5\u03bb) prior on each \u03bbi. With \u03b1\u03bb = \u03be\u03bb\u03b2, we obtain\nln p(\u03bbs |\u03b1\u03bb, \u03b1\u03bb\u00b5\u03bb) = \u03b1\u03bb ln(\u03b1\u03bb\u00b5\u03bb) + (\u03b1\u03bb \u2212 1) ln\u03bbs \u2212 ln \u0393(\u03b1\u03bb)\u2212 \u03b1\u03bb\u00b5\u03bb\u03bbs = \u03be\u03bb\u03b2 ln\u03bbs \u2212 \u03be\u03bb\u00b5\u03bb\u03b2\u03bbs + \u03be\u03bb\u03b2 + o(\u03b2) = \u2212\u03b2(\u03be\u03bb\u00b5\u03bb\u03bbs \u2212 \u03be\u03bb ln\u03bbs \u2212 1) + o(\u03b2).\nHence, when \u03b2 \u2192\u221e, obtain\nmin U,\u03bb,P\n{ \u03be K\u22121\u2211 k=0 KL(sk+1||psk) + K\u22121\u2211 k=0 (\u03bbsktk \u2212 ln\u03bbsktk \u2212 1)\n+ 1[\u03bbsK t\u00b7 \u2265 1](\u03bbsK t\u00b7 \u2212 ln\u03bbsK t\u00b7 \u2212 1) + \u03be\u03bb M\u2211 s=1 (\u00b5\u03bb\u03bbs \u2212 ln\u03bbs \u2212 1) } (A.4)"}, {"heading": "B. Bayesian Nonparametric MJPs for SVA", "text": "First we recall that the Moran gamma process is a distribution over measures. If \u00b5 \u223c \u0393P(H, \u03b3) is a random measure distributed according to a Moran gamma process with base measure H on the probability space (\u2126,F) and rate parameter \u03b3, then for all measurable partitions of \u2126, (A1, . . . , A`), \u00b5 satisfies\n(\u00b5(A1), . . . , \u00b5(A`)) \u223c Gam(H(A1), \u03b3)\u00d7 \u00b7 \u00b7 \u00b7 \u00d7 Gam(H(A`), \u03b3). (B.1)\nThe hierarchical gamma-gamma process (H\u0393\u0393P) is defined to be:\n\u00b50 \u223c \u0393P(\u03b10H0, \u03b30) (B.2) \u00b5i |\u00b50 i.i.d.\u223c \u0393P(\u03b2\u00b50, \u03b3) i = 1, 2, . . . (B.3) sk | {\u00b5i}\u221ei=0,Uk\u22121 \u223c \u00b5\u0304sk\u22121 (B.4) tk | {\u00b5i}\u221ei=0,Uk\u22121 \u223c Gam(\u03b2, \u2016\u00b5sk\u22121\u2016). (B.5)\nConsider the gamma-gamma process (\u0393\u0393P), defined by (B.3)-(B.5) (with \u00b50 treated as an arbitrary fixed measure). We now show that the \u0393\u0393P retains the key properties of the \u0393EP: conjugacy and exchangeability. Let Ti , \u2211k j=1 1[sj\u22121 = i]tj\nand Fi , \u2211k j=1 1[sj\u22121 = i]\u03b4sj be the sufficient statistics of the observations. Proposition B.1. The \u0393\u0393P is a conjugate family: \u00b5i | Uk \u223c \u0393P(\u03b2\u00b5\u2032i, \u03b3\u2032i), where \u00b5\u2032i = \u00b50 + Fi and \u03b3\u2032i = \u03b3 + Ti.\nProof sketch. The proof is analogous to that for Proposition 2 in (Saeedi & Bouchard-Co\u0302te\u0301, 2011). The key additional insight is that X \u223c Gam(\u03b2a, b) and Y |X \u223c Gam(\u03b2,X) are conjugate: X |Y \u223c Gam(\u03b2(a+ 1), b+ Y ).\nIn order to give the joint distribution of the times T , TK , (t1, . . . , tK), we first derive the predictive distribution for the \u0393\u0393P, (sk+1, tk+1) | Uk. We make use of the following family of densities. Definition B.2 (Shaped Translated Pareto). Let \u03b2 > 0, \u03b1 > 0, \u03b3 > 0. A random variable S is shaped translated Pareto, denoted S \u223c STP(\u03b2, \u03b1, \u03b3), if it has density\nf(t) = \u03b3\u03b1\u03b2\nB(\u03b2, \u03b1\u03b2)\nt\u03b2\u22121\n(t+ \u03b3)(1+\u03b1)\u03b2 ,\nwhere B(a, b) = \u0393(a)\u0393(b)\u0393(a+b) is the beta function.\nProposition B.3. The predictive distribution of the \u0393\u0393P is\n(sk+1, tk+1) | Uk \u223c \u00b5\u0304\u2032sk \u00d7 STP(\u03b2, \u2016\u00b5\u0304\u2032sk\u2016, \u03b3\u2032sk). (B.6)\nProof. By Proposition B.1, it suffices to show that if \u00b5 \u223c \u0393P(\u03b2\u00b50, \u03b3), s |\u00b5 \u223c \u00b5\u0304, and t |\u00b5 \u223c Gam(\u03b2, \u2016\u00b5\u2016), then (s, t) \u223c \u00b5\u0304\u00d7 STP(\u03b2, \u03ba0, \u03b3), where \u03ba0 , \u2016\u00b50\u2016. Letting x = \u2016\u00b5\u2016, the distribution of t is\np(t) = \u222b \u221e 0 p(t |x)p(x)dx = \u222b \u221e 0 x\u03b2t\u03b2\u22121e\u2212xt \u0393(\u03b2) \u03b3\u03b2\u03ba0x\u03b2\u03ba0\u22121e\u2212\u03b3x \u0393(\u03b2\u03ba0) dx\n= \u03b3\u03b2\u03ba0t\u03b2\u22121\n\u0393(\u03b2)\u0393(\u03b2\u03ba0) \u222b \u221e 0 x\u03b2(1+\u03ba0)\u22121e\u2212(\u03b3+t)xdx = \u03b3\u03b2\u03ba0t\u03b2\u22121 \u0393(\u03b2)\u0393(\u03b2\u03ba0) \u0393(\u03b2(1 + \u03ba0)) (\u03b3 + t)\u03b2(1+\u03ba0) .\nWe can now show that the process is exchangeable by exhibiting the joint distribution of waiting times: Proposition B.4. Let t\u2217m = (t\u2217m1, . . . , t\u2217mKm) be the waiting times following statem. Then t \u2217 m is an exchangeable sequence with joint distribution\np(t\u2217m) = \u0393(\u03b2(\u03ba0 +Km))\n\u0393(\u03b2)Km\n( \u220fKm j=1 t \u2217 mj) \u03b2\u22121\n(\u03b3 + \u2211Km j=1 \u03c4mj) \u03b2(\u03ba0+Km) (B.7)\nProof sketch. Take the product of the predictive distributions of \u03c4m1, . . . , \u03c4mKm .\nThe measures {\u00b5i}\u221ei=0 and H0 can be integrated out of the H\u0393\u0393P generative model in a manner analogous to the way in the the Chinese restaurant franchise in obtained from the hierarchical Dirichlet process (Teh et al., 2006). However the mass of the measure \u00b50 cannot be integrated out. We omit details as they are essentially identical to those in case of the H\u0393EP (Saeedi & Bouchard-Co\u0302te\u0301, 2011).\nFirst, we consider the case of integrating out {\u00b5i}i\u22650. Let M denote the number of used states, Km the number of transitions out of state m, and rm the number of states that can be reached from state m in one step. The contribution to the likelihood from the H\u0393\u0393P prior is\np(U , \u03ba0 |\u03b2, \u03b30, \u03b3, \u03b10) = p(\u03ba0 |\u03b10, \u03b30)p(S |\u03b2, \u03b10, \u03ba0)p(T |\u03b2, \u03b3, \u03ba0)\n\u221d \u03ba\u03b10\u221210 e\u2212\u03b30\u03ba0\u03b1M\u221210 \u0393(\u03b10 + 1)\n\u0393(\u03b10 + r\u00b7) M\u220f m=1 (\u03b2\u03ba0) rm\u22121 \u0393(\u03b2\u03ba0 + 1) \u0393(\u03b2\u03ba0 +Km)\n\u00d7 M\u220f m=1 \u0393(\u03b2(\u03ba0 +Km)) \u0393(\u03b2)Km\n( \u220fKm j=1 t \u2217 mj) \u03b2\u22121\n(\u03b3 + \u2211Km j=1 t \u2217 mj) \u03b2(\u03ba0+Km) ,\nwhere r\u00b7 , \u2211 m rm. Taking the logarithm, using asymptotic expansions for the Gamma terms, and ignoring o(\u03b2) terms yields\n(\u03b10 \u2212 1) ln\u03ba0 \u2212 \u03b30\u03ba0 + (M \u2212 1) ln\u03b10 + M\u2211 m=1 {(rm \u2212 1) ln\u03ba0 + \u03b2(\u03ba0 +Km) ln[\u03b2(\u03ba0 +Km)]}\nM\u2211 m=1 { \u2212\u03b2(\u03ba0 +Km)\u2212Km[\u03b2 ln\u03b2 \u2212 \u03b2] + \u03b2 \u2211Km j=1 ln t \u2217 mj \u2212 \u03b2(\u03ba0 +Km) ln (\u03b3 + t\u2217m\u00b7) } ,\nwhere t\u2217m\u00b7 , \u2211Km j=1 t \u2217 mj . In order to retain the effects of the hyperparameters in the asymptotics, set \u03b10 = exp(\u2212\u03be1\u03b2) and \u03b30 = exp(\u03be2\u03b2). Thus, \u03ba0 \u2192 0 as \u03b2 \u2192 \u221e. We require that lim sup\u03b2\u2192\u221e \u03ba0\u03b30 < \u221e, so without loss of generality we can choose \u03ba0 = \u03b3\u221210 = exp(\u2212\u03be2\u03b2) to obtain\n\u2212\u03b2 ( \u03be1(M \u2212 1) +\nM\u2211 m=1 { \u03be2(rm \u2212 1)\u2212 \u2211Km j=1 ln t \u2217 mj +Km ln ([\u03b3 + t \u2217 m\u00b7]/Km) }) .\nThus, the objective function to minimize is\n\u03b6 L\u2211 `=1 KL(x`||\u03c1s\u03c4` ) + \u03be1M + M\u2211 m=1 { \u03be2(rm \u2212 1)\u2212 \u2211Km j=1 ln t \u2217 mj \u2212Km ln ([\u03b3 + t\u2217m\u00b7]/Km) } . (B.8)\nAlternatively, the small variance asymptotics can be derived in the case where {\u00b5i}i\u22650 is not integrated out. To do so, we first rewrite the H\u0393\u0393P generative model in an equivalent form, with H0 integrated out:\n\u03c00 \u223c GEM(\u03b10) (B.9) \u03ba0 \u223c Gam(\u03b10, \u03b30) (B.10) \u03c0i |\u03c00 i.i.d.\u223c DP(\u03b2\u03ba0\u03c00), i = 1, 2, . . . (B.11) \u03bai |\u03c00 i.i.d.\u223c Gam(\u03b2, \u03b3), i = 1, 2, . . . (B.12) sk | {\u03c0i}\u221ei=1,Uk\u22121 \u223c \u03c0sk\u22121 (B.13) tk | {\u03bai}\u221ei=1,Uk\u22121 \u223c Gam(\u03b2, \u03bask). (B.14)\nFor 0 \u2264 i \u2264M, 1 \u2264 j \u2264M , let \u03c0\u0304i,j , \u03c0ij and for 0 \u2264 i \u2264M , let \u03c0\u0304i,M+1 , 1\u2212 \u2211M j=1 \u03c0ij . Integrating out {\u03bai}i\u22651, the contribution to the likelihood from the H\u0393\u0393P prior is now\np(UK , \u03ba0, \u03c0\u0304 |\u03b2, \u03b30, \u03b3, \u03b10) (B.15) = p(\u03ba0 |\u03b10, \u03b30)p(\u03c0\u03040 |\u03b10)p(\u03c0\u03041:M |\u03b2\u03ba0\u03c0\u03040)p(SK | \u03c0\u03041:M )p(TK |\u03b2, \u03b3, \u03ba0) (B.16)\n\u221d \u03ba\u03b10\u221210 e\u2212\u03b30\u03ba0 M\u220f i=1 Beta\n( \u03c0\u03040i 1\u2212\u2211i\u22121j=1 \u03c00,j \u2223\u2223\u2223\u2223\u22231, \u03b10 ) Dir(\u03c0\u0304i |\u03b2\u03ba0\u03c0\u03040) ( K\u220f k=1 \u03c0\u0304sk\u22121,sk ) p(TK |\u03b2, \u03b3, \u03ba0) (B.17)\n\u221d \u03ba\u03b10\u221210 e\u2212\u03b30\u03ba0 M\u220f i=1 \u0393(1 + \u03b10)\u0393(\u03b10) ( 1\u2212\u2211ij=1 \u03c00,j 1\u2212\u2211i\u22121j=1 \u03c00,j )\u03b10\u22121 \u0393(\u03b2\u03ba0) M+1\u220f j=1 \u03c0\u0304 \u03b2\u03ba0\u03c0\u03040j\u22121 ij \u0393(\u03b2\u03ba0\u03c0\u03040j)  \u00d7\nK\u220f k=1 \u03c0\u0304\u03b2\u03besk\u22121,sk \u00d7 M\u220f m=1 \u0393(\u03b2(\u03ba0 +Km)) \u0393(\u03b2)Km\n( \u220fKm j=1 t \u2217 mj) \u03b2\u22121\n(\u03b3 + \u2211Km j=1 t \u2217 mj) \u03b2(\u03ba0+Km) .\n(B.18)\nWe use a slightly different limiting process, with \u03b30 = \u03ba0 = \u03be2, a positive constant, and scale the multinomial distributions (B.13) by \u03b2\u03be. Taking the logarithm and and ignoring o(\u03b2) terms as before yields\nM\u2211 i=1 ln\u03b10 + \u03b2\u03ba0 ln\u03b2\u03ba0 \u2212 \u03b2 + M+1\u2211 j=1 {\u2212\u03b2\u03ba0\u03c0\u03040,j ln(\u03b2\u03ba0\u03c0\u03040,j) + \u03b2\u03ba0\u03c0\u03040,j + \u03b2\u03ba0\u03c0\u03040,j ln \u03c0\u0304ij}  +\nK\u2211 k=1 \u03b2\u03be ln \u03c0\u0304sk\u22121,sk + M\u2211 m=1 {\u2211Km j=1 \u03b2 ln t \u2217 mj \u2212 \u03b2Km ln ([\u03b3 + t\u2217m\u00b7]/Km) }\n\u223c M\u2211 i=1 \u2212\u03b2\u03be1 + M+1\u2211 j=1 {\u2212\u03b2\u03ba0\u03c0\u03040,j ln(\u03c0\u03040,j) + \u03b2\u03ba0\u03c0\u03040,j ln \u03c0\u0304ij}  +\nK\u2211 k=1 \u03b2\u03be ln \u03c0\u0304sk\u22121,sk + M\u2211 m=1 {\u2211Km j=1 \u03b2 ln t \u2217 mj \u2212 \u03b2Km ln ([\u03b3 + t\u2217m\u00b7]/Km) } \u223c \u2212\u03b2 { \u03be1M + \u03be\nK\u2211 k=1 ln \u03c0\u0304sk\u22121,sk + M\u2211 m=1 { \u03be2KL(\u03c0\u03040||\u03c0\u0304m)\u2212 \u2211Km j=1 ln t \u2217 mj \u2212Km ln ([\u03b3 + t\u2217m\u00b7]/Km) }} .\nThus, the objective function to minimize is\n\u03b6 L\u2211 `=1 ln \u03c1s\u03c4`x` + \u03be K\u2211 k=1 ln \u03c0\u0304sk\u22121,sk + \u03be1M\n+ M\u2211 m=1 { \u03be2KL(\u03c0\u03040||\u03c0\u0304m)\u2212 \u2211Km j=1 ln t \u2217 mj \u2212Km ln ([\u03b3 + t\u2217m\u00b7]/Km) } .\n(B.19)"}, {"heading": "C. Time-accuracy plots for the experiments", "text": "In the main paper we include the error versus iteration as it is more objective than time-accuracy results. In Fig. C.6, we compare the time-accuracy across different methods for different datasets. EM, PMCMC, and JUMP-means are implemented in Java and MCMC is implemented in Python. To plot the MCMC results, we give a speed boost of 100x in the results to compensate for Python\u2019s slow interpreter. From our experience with scientific computing applications, we believe this is a generous adjustment. Also we note that the EM implementation used in our experiments is not the most optimized in terms of time per iteration. However, our goal is to show that JUMP-means can achieve comparable performance with a reasonable implementation of MCMC and EM."}, {"heading": "D. Scaling experiments", "text": "For the scaling experiments we generated 4 datasets consisting of 102 to 105 sequences. All datasets are sampled from a single hidden state MJP with 5 hidden states and 5 possible observations. For the 20 observations in each sequence a Gaussian likelihood is used. Finally, for the held out results, we categorized the observations in 5 bins, removed 30% of the data points and predicted their category."}], "references": [{"title": "Particle Markov chain Monte Carlo methods", "author": ["C. Andrieu", "A. Doucet", "R. Holenstein"], "venue": "Journal of the Royal Statistical Society: Series B (Statistical Methodology),", "citeRegEx": "Andrieu et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Andrieu et al\\.", "year": 2010}, {"title": "Statistical inference in evolutionary models of dna sequences via the em algorithm", "author": ["H. Asger", "J.J. Ledet"], "venue": "Statistical Applications in Genetics and Molecular Biology,", "citeRegEx": "Asger and Ledet,? \\Q2005\\E", "shortCiteRegEx": "Asger and Ledet", "year": 2005}, {"title": "Clustering with bregman divergences", "author": ["A. Banerjee", "S. Merugu", "I.S. Dhillon", "J. Ghosh"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "Banerjee et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Banerjee et al\\.", "year": 2005}, {"title": "Statistical inference for discretely observed markov jump processes", "author": ["M. Bladt", "M. S\u00f8rensen"], "venue": "Journal of the Royal Statistical Society: Series B (Statistical Methodology),", "citeRegEx": "Bladt and S\u00f8rensen,? \\Q2005\\E", "shortCiteRegEx": "Bladt and S\u00f8rensen", "year": 2005}, {"title": "Efficient estimation of transition rates between credit ratings from observations at discrete time points", "author": ["M. Bladt", "M. S\u00f8rensen"], "venue": "Quantitative Finance,", "citeRegEx": "Bladt and S\u00f8rensen,? \\Q2009\\E", "shortCiteRegEx": "Bladt and S\u00f8rensen", "year": 2009}, {"title": "MAD-Bayes: MAP-based Asymptotic Derivations from Bayes", "author": ["T. Broderick", "B. Kulis", "M.I. Jordan"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "Broderick et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Broderick et al\\.", "year": 2013}, {"title": "Efficient Continuous-Time Markov Chain Estimation", "author": ["M. Hajiaghayi", "B. Kirkpatrick", "L. Wang", "A. BouchardC\u00f4t\u00e9"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "Hajiaghayi et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Hajiaghayi et al\\.", "year": 2014}, {"title": "Small-variance asymptotics for exponential family dirichlet process mixture models", "author": ["K. Jiang", "B. Kulis", "M.I. Jordan"], "venue": "In NIPS, pp", "citeRegEx": "Jiang et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Jiang et al\\.", "year": 2012}, {"title": "Revisiting k-means: New Algorithms via Bayesian Nonparametrics", "author": ["B. Kulis", "M.I. Jordan"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "Kulis and Jordan,? \\Q2012\\E", "shortCiteRegEx": "Kulis and Jordan", "year": 2012}, {"title": "Latent Continuous Time Markov Chains for Partially-Observed Multistate Disease Processes", "author": ["J. Lange"], "venue": "PhD thesis,", "citeRegEx": "Lange,? \\Q2014\\E", "shortCiteRegEx": "Lange", "year": 2014}, {"title": "Estimating disease progression using panel", "author": ["M. Mandel"], "venue": "data. Biostatistics,", "citeRegEx": "Mandel,? \\Q2010\\E", "shortCiteRegEx": "Mandel", "year": 2010}, {"title": "A database to support development and evaluation of intelligent intensive care monitoring", "author": ["G. Moody", "R. Mark"], "venue": "In Computers in Cardiology,", "citeRegEx": "Moody and Mark,? \\Q1996\\E", "shortCiteRegEx": "Moody and Mark", "year": 1996}, {"title": "NIST Handbook of Mathematical Functions", "author": ["F.W.J. Olver", "D.W. Lozier", "R.F. Boisvert", "Clark", "C.W. (eds"], "venue": null, "citeRegEx": "Olver et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Olver et al\\.", "year": 2010}, {"title": "Maximum likelihood trajectories for continuous-time markov chains", "author": ["T.J. Perkins"], "venue": "In NIPS,", "citeRegEx": "Perkins,? \\Q2009\\E", "shortCiteRegEx": "Perkins", "year": 2009}, {"title": "Fast MCMC sampling for Markov jump processes and extensions", "author": ["V. Rao", "Y.W. Teh"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "Rao and Teh,? \\Q2013\\E", "shortCiteRegEx": "Rao and Teh", "year": 2013}, {"title": "Small-Variance Asymptotics for Hidden Markov Models", "author": ["A. Roychowdhury", "K. Jiang", "B. Kulis"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Roychowdhury et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Roychowdhury et al\\.", "year": 2013}, {"title": "Priors over recurrent continuous time processes", "author": ["A. Saeedi", "A. Bouchard-C\u00f4t\u00e9"], "venue": "In NIPS,", "citeRegEx": "Saeedi and Bouchard.C\u00f4t\u00e9,? \\Q2011\\E", "shortCiteRegEx": "Saeedi and Bouchard.C\u00f4t\u00e9", "year": 2011}, {"title": "Hierarchical Dirichlet Processes", "author": ["Y.W. Teh", "M.I. Jordan", "M.J. Beal", "D.M. Blei"], "venue": "Journal of the American Statistical Association,", "citeRegEx": "Teh et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Teh et al\\.", "year": 2006}], "referenceMentions": [{"referenceID": 10, "context": "gression (Mandel, 2010) and RNA path folding (Hajiaghayi et al.", "startOffset": 9, "endOffset": 23}, {"referenceID": 6, "context": "gression (Mandel, 2010) and RNA path folding (Hajiaghayi et al., 2014), or when the state is only observed indirectly, as in corporate bond rating (Bladt & S\u00f8rensen, 2009).", "startOffset": 45, "endOffset": 70}, {"referenceID": 13, "context": "Furthermore, although MJPs are viewed as more realistic than their discrete-time counterparts in many fields (Rao & Teh, 2013), degenerate solutions for the maximum likelihood (ML) trajectories for both directly and indirectly observed cases (Perkins, 2009), and non-existence of the ML transition matrix (obtained from EM) for some indirectly observed cases (Bladt & S\u00f8rensen, 2009) present inferential challenges.", "startOffset": 242, "endOffset": 257}, {"referenceID": 7, "context": "SVA has been applied to (hierarchical) Dirichlet process mixture models (Kulis & Jordan, 2012; Jiang et al., 2012), Bayesian nonparametric latent feature models (Broderick et al.", "startOffset": 72, "endOffset": 114}, {"referenceID": 5, "context": ", 2012), Bayesian nonparametric latent feature models (Broderick et al., 2013), hidden Markov models (HMMs), and infinite-state HMMs (Roychowdhury et al.", "startOffset": 54, "endOffset": 78}, {"referenceID": 15, "context": ", 2013), hidden Markov models (HMMs), and infinite-state HMMs (Roychowdhury et al., 2013).", "startOffset": 62, "endOffset": 89}, {"referenceID": 9, "context": "An expectation-maximization (EM) algorithm can be derived, but it cannot be applied to models with countably infinite states, so it is not suitable for iMJPs (Lange, 2014) (iMJPs are detailed in Section 4).", "startOffset": 158, "endOffset": 171}, {"referenceID": 13, "context": "Maximum likelihood inference amounts to finding maxU ln p(U |\u03c0, P,\u03bb), which can be carried out efficiently using dynamic programming (Perkins, 2009).", "startOffset": 133, "endOffset": 148}, {"referenceID": 0, "context": "(2014) which is based on particle MCMC (PMCMC) methods (Andrieu et al., 2010).", "startOffset": 55, "endOffset": 77}, {"referenceID": 5, "context": "Recently, a more efficient Monte Carlo method was proposed in Hajiaghayi et al. (2014) which is based on particle MCMC (PMCMC) methods (Andrieu et al.", "startOffset": 62, "endOffset": 87}, {"referenceID": 5, "context": "In the SVA approach (Broderick et al., 2013), the MAP optimization is considered in the limit as the likelihood variance parameter is taken to zero: \u03c3 \u2192 0.", "startOffset": 20, "endOffset": 44}, {"referenceID": 7, "context": "Following (Jiang et al., 2012), we scale the distributions by an inverse variance parameter \u03b2 and then maximize the scaled likelihood and prior in the limit \u03b2 \u2192\u221e (i.", "startOffset": 10, "endOffset": 30}, {"referenceID": 15, "context": "We therefore resort to an alternating minimization procedure to optimize the JUMP-means objective function, similar in spirit to the one used in Roychowdhury et al. (2013). In each iteration of the optimization process, we first use a modified Viterbi algorithm to obtain the most likely state sequence.", "startOffset": 145, "endOffset": 172}, {"referenceID": 7, "context": ", Jiang et al. (2012); Roychowdhury et al.", "startOffset": 2, "endOffset": 22}, {"referenceID": 7, "context": ", Jiang et al. (2012); Roychowdhury et al. (2013)).", "startOffset": 2, "endOffset": 50}, {"referenceID": 10, "context": ", Mandel (2010)).", "startOffset": 2, "endOffset": 16}, {"referenceID": 0, "context": "We compare with particle MCMC (PMCMC) (Andrieu et al., 2010) and EM.", "startOffset": 38, "endOffset": 60}], "year": 2015, "abstractText": "Markov jump processes (MJPs) are used to model a wide range of phenomena from disease progression to RNA path folding. However, maximum likelihood estimation of parametric models leads to degenerate trajectories and inferential performance is poor in nonparametric models. We take a small-variance asymptotics (SVA) approach to overcome these limitations. We derive the small-variance asymptotics for parametric and nonparametric MJPs for both directly observed and hidden state models. In the parametric case we obtain a novel objective function which leads to non-degenerate trajectories. To derive the nonparametric version we introduce the gamma-gamma process, a novel extension to the gamma-exponential process. We propose algorithms for each of these formulations, which we call JUMP-means. Our experiments demonstrate that JUMP-means is competitive with or outperforms widely used MJP inference approaches in terms of both speed and reconstruction accuracy.", "creator": "LaTeX with hyperref package"}}}