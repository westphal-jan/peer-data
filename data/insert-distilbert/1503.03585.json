{"id": "1503.03585", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Mar-2015", "title": "Deep Unsupervised Learning using Nonequilibrium Thermodynamics", "abstract": "a central unsolved problem in supervised machine learning involves modeling complex data - sets using highly flexible families of probability distributions in which learning, sampling, inference, and accuracy evaluation are still analytically stable or computationally loosely tractable. previous software approaches to this problem are subject to tradeoffs between flexibility and tractability. we develop a promising approach that simultaneously achieves both. the essential idea, inspired by non - equilibrium statistical physics, is to systematically and slowly destroy structure in a data distribution through an iterative forward diffusion process. we then learn a reverse diffusion process that restores structure in data, yielding a compact highly flexible and tractable distributed generative model of the data. this approach allows us to rapidly learn, sample from, and evaluate probabilities in nonlinear deep generative models weighted with thousands of layers or some time steps.", "histories": [["v1", "Thu, 12 Mar 2015 04:51:37 GMT  (5395kb,D)", "https://arxiv.org/abs/1503.03585v1", null], ["v2", "Thu, 2 Apr 2015 06:48:02 GMT  (5397kb,D)", "http://arxiv.org/abs/1503.03585v2", null], ["v3", "Wed, 29 Apr 2015 06:00:20 GMT  (5403kb,D)", "http://arxiv.org/abs/1503.03585v3", null], ["v4", "Wed, 13 May 2015 01:57:49 GMT  (5409kb,D)", "http://arxiv.org/abs/1503.03585v4", null], ["v5", "Wed, 20 May 2015 03:19:10 GMT  (4586kb,D)", "http://arxiv.org/abs/1503.03585v5", null], ["v6", "Thu, 9 Jul 2015 16:16:33 GMT  (6085kb,D)", "http://arxiv.org/abs/1503.03585v6", null], ["v7", "Tue, 21 Jul 2015 19:44:20 GMT  (6092kb,D)", "http://arxiv.org/abs/1503.03585v7", null], ["v8", "Wed, 18 Nov 2015 21:50:51 GMT  (6095kb,D)", "http://arxiv.org/abs/1503.03585v8", null]], "reviews": [], "SUBJECTS": "cs.LG cond-mat.dis-nn q-bio.NC stat.ML", "authors": ["jascha sohl-dickstein", "eric a weiss", "niru maheswaranathan", "surya ganguli"], "accepted": true, "id": "1503.03585"}, "pdf": {"name": "1503.03585.pdf", "metadata": {"source": "META", "title": "Deep Unsupervised Learning using Nonequilibrium Thermodynamics ", "authors": ["Jascha Sohl-Dickstein", "Eric A. Weiss", "Niru Maheswaranathan", "Surya Ganguli"], "emails": ["JASCHA@STANFORD.EDU", "EAWEISS@BERKELEY.EDU", "NIRUM@STANFORD.EDU", "SGANGULI@STANFORD.EDU"], "sections": [{"heading": "1. Introduction", "text": "Historically, probabilistic models suffer from a tradeoff between two conflicting objectives: tractability and flexibility. Models that are tractable can be analytically evaluated and easily fit to data (e.g. a Gaussian or Laplace). However,\nProceedings of the 32nd International Conference on Machine Learning, Lille, France, 2015. JMLR: W&CP volume 37. Copyright 2015 by the author(s).\nthese models are unable to aptly describe structure in rich datasets. On the other hand, models that are flexible can be molded to fit structure in arbitrary data. For example, we can define models in terms of any (non-negative) function \u03c6(x) yielding the flexible distribution p (x) = \u03c6(x)Z , where Z is a normalization constant. However, computing this normalization constant is generally intractable. Evaluating, training, or drawing samples from such flexible models typically requires a very expensive Monte Carlo process.\nA variety of analytic approximations exist which ameliorate, but do not remove, this tradeoff\u2013for instance mean field theory and its expansions (T, 1982; Tanaka, 1998), variational Bayes (Jordan et al., 1999), contrastive divergence (Welling & Hinton, 2002; Hinton, 2002), minimum probability flow (Sohl-Dickstein et al., 2011b;a), minimum KL contraction (Lyu, 2011), proper scoring rules (Gneiting & Raftery, 2007; Parry et al., 2012), score matching (Hyva\u0308rinen, 2005), pseudolikelihood (Besag, 1975), loopy belief propagation (Murphy et al., 1999), and many, many more. Non-parametric methods (Gershman & Blei, 2012) can also be very effective1."}, {"heading": "1.1. Diffusion probabilistic models", "text": "We present a novel way to define probabilistic models that allows:\n1. extreme flexibility in model structure, 2. exact sampling,\n1Non-parametric methods can be seen as transitioning smoothly between tractable and flexible models. For instance, a non-parametric Gaussian mixture model will represent a small amount of data using a single Gaussian, but may represent infinite data as a mixture of an infinite number of Gaussians.\nar X\niv :1\n50 3.\n03 58\n5v 8\n[ cs\n.L G\n] 1\n3. easy multiplication with other distributions, e.g. in order to compute a posterior, and\n4. the model log likelihood, and the probability of individual states, to be cheaply evaluated.\nOur method uses a Markov chain to gradually convert one distribution into another, an idea used in non-equilibrium statistical physics (Jarzynski, 1997) and sequential Monte Carlo (Neal, 2001). We build a generative Markov chain which converts a simple known distribution (e.g. a Gaussian) into a target (data) distribution using a diffusion process. Rather than use this Markov chain to approximately evaluate a model which has been otherwise defined, we explicitly define the probabilistic model as the endpoint of the Markov chain. Since each step in the diffusion chain has an analytically evaluable probability, the full chain can also be analytically evaluated.\nLearning in this framework involves estimating small perturbations to a diffusion process. Estimating small perturbations is more tractable than explicitly describing the full distribution with a single, non-analytically-normalizable, potential function. Furthermore, since a diffusion process exists for any smooth target distribution, this method can capture data distributions of arbitrary form.\nWe demonstrate the utility of these diffusion probabilistic models by training high log likelihood models for a twodimensional swiss roll, binary sequence, handwritten digit (MNIST), and several natural image (CIFAR-10, bark, and dead leaves) datasets."}, {"heading": "1.2. Relationship to other work", "text": "The wake-sleep algorithm (Hinton, 1995; Dayan et al., 1995) introduced the idea of training inference and generative probabilistic models against each other. This approach remained largely unexplored for nearly two decades, though with some exceptions (Sminchisescu et al., 2006; Kavukcuoglu et al., 2010). There has been a recent explosion of work developing this idea. In (Kingma & Welling, 2013; Gregor et al., 2013; Rezende et al., 2014; Ozair & Bengio, 2014) variational learning and inference algorithms were developed which allow a flexible generative model and posterior distribution over latent variables to be directly trained against each other.\nThe variational bound in these papers is similar to the one used in our training objective and in the earlier work of (Sminchisescu et al., 2006). However, our motivation and model form are both quite different, and the present work retains the following differences and advantages relative to these techniques:\n1. We develop our framework using ideas from physics, quasi-static processes, and annealed importance sampling rather than from variational Bayesian methods.\n2. We show how to easily multiply the learned distribution with another probability distribution (eg with a conditional distribution in order to compute a posterior)\n3. We address the difficulty that training the inference model can prove particularly challenging in variational inference methods, due to the asymmetry in the objective between the inference and generative models. We restrict the forward (inference) process to a simple functional form, in such a way that the reverse (generative) process will have the same functional form.\n4. We train models with thousands of layers (or time steps), rather than only a handful of layers.\n5. We provide upper and lower bounds on the entropy production in each layer (or time step)\nThere are a number of related techniques for training probabilistic models (summarized below) that develop highly flexible forms for generative models, train stochastic trajectories, or learn the reversal of a Bayesian network. Reweighted wake-sleep (Bornschein & Bengio, 2015) develops extensions and improved learning rules for the original wake-sleep algorithm. Generative stochastic networks (Bengio & Thibodeau-Laufer, 2013; Yao et al., 2014) train a Markov kernel to match its equilibrium distribution to the data distribution. Neural autoregressive distribution estimators (Larochelle & Murray, 2011) (and their recurrent (Uria et al., 2013a) and deep (Uria et al., 2013b) extensions) decompose a joint distribution into a sequence of tractable conditional distributions over each dimension. Adversarial networks (Goodfellow et al., 2014) train a generative model against a classifier which attempts to distinguish generated samples from true data. A similar objective in (Schmidhuber, 1992) learns a two-way mapping to a representation with marginally independent units. In (Rippel & Adams, 2013; Dinh et al., 2014) bijective deterministic maps are learned to a latent representation with a simple factorial density function. In (Stuhlmu\u0308ller et al., 2013) stochastic inverses are learned for Bayesian networks. Mixtures of conditional Gaussian scale mixtures (MCGSMs) (Theis et al., 2012) describe a dataset using Gaussian scale mixtures, with parameters which depend on a sequence of causal neighborhoods. There is additionally significant work learning flexible generative mappings from simple latent distributions to data distributions \u2013 early examples including (MacKay, 1995) where neural networks are introduced as generative models, and (Bishop et al., 1998) where a stochastic manifold mapping is learned from a latent space to the data space. We will compare experimentally against adversarial networks and MCGSMs.\nRelated ideas from physics include the Jarzynski equality (Jarzynski, 1997), known in machine learning as An-\nt = 0 t = T2 t = T\nq ( x(0\u00b7\u00b7\u00b7T ) ) 2 0 2 2 0\n2\n2 0 2 2\n0\n2\n2 0 2 2\n0\n2\np ( x(0\u00b7\u00b7\u00b7T ) ) 2 0 2 2 0\n2\n2 0 2 2\n0\n2\n2 0 2 2\n0\n2\nf\u00b5 ( x(t), t ) \u2212 x(t)\nFigure 1. The proposed modeling framework trained on 2-d swiss roll data. The top row shows time slices from the forward trajectory\nq\n(\nx(0\u00b7\u00b7\u00b7T )\n)\n. The data distribution (left) undergoes Gaussian diffusion, which gradually transforms it into an identity-covariance Gaus-\nsian (right). The middle row shows the corresponding time slices from the trained reverse trajectory p ( x(0\u00b7\u00b7\u00b7T ) ) . An identity-covariance\nGaussian (right) undergoes a Gaussian diffusion process with learned mean and covariance functions, and is gradually transformed back into the data distribution (left). The bottom row shows the drift term, f\u00b5 ( x(t), t ) \u2212 x(t), for the same reverse diffusion process.\nnealed Importance Sampling (AIS) (Neal, 2001), which uses a Markov chain which slowly converts one distribution into another to compute a ratio of normalizing constants. In (Burda et al., 2014) it is shown that AIS can also be performed using the reverse rather than forward trajectory. Langevin dynamics (Langevin, 1908), which are the stochastic realization of the Fokker-Planck equation, show how to define a Gaussian diffusion process which has any target distribution as its equilibrium. In (Suykens & Vandewalle, 1995) the Fokker-Planck equation is used to perform stochastic optimization. Finally, the Kolmogorov forward and backward equations (Feller, 1949) show that for many forward diffusion processes, the reverse diffusion processes can be described using the same functional form."}, {"heading": "2. Algorithm", "text": "Our goal is to define a forward (or inference) diffusion process which converts any complex data distribution into a simple, tractable, distribution, and then learn a finite-time reversal of this diffusion process which defines our generative model distribution (See Figure 1). We first describe the forward, inference diffusion process. We then show\nhow the reverse, generative diffusion process can be trained and used to evaluate probabilities. We also derive entropy bounds for the reverse process, and show how the learned distributions can be multiplied by any second distribution (e.g. as would be done to compute a posterior when inpainting or denoising an image)."}, {"heading": "2.1. Forward Trajectory", "text": "We label the data distribution q ( x(0) ) . The data distribution is gradually converted into a well behaved (analytically tractable) distribution \u03c0 (y) by repeated application of a Markov diffusion kernel T\u03c0 (y|y\u2032;\u03b2) for \u03c0 (y), where \u03b2 is the diffusion rate,\n\u03c0 (y) = \u222b dy\u2032T\u03c0 (y|y\u2032;\u03b2)\u03c0 (y\u2032) (1)\nq ( x(t)|x(t\u22121) ) = T\u03c0 ( x(t)|x(t\u22121);\u03b2t ) . (2)\nThe forward trajectory, corresponding to starting at the data distribution and performing T steps of diffusion, is thus\nq ( x(0\u00b7\u00b7\u00b7T ) ) = q ( x(0) ) T\u220f t=1 q ( x(t)|x(t\u22121) ) (3)\nFor the experiments shown below, q ( x(t)|x(t\u22121) ) corresponds to either Gaussian diffusion into a Gaussian distribution with identity-covariance, or binomial diffusion into an independent binomial distribution. Table App.1 gives the diffusion kernels for both Gaussian and binomial distributions."}, {"heading": "2.2. Reverse Trajectory", "text": "The generative distribution will be trained to describe the same trajectory, but in reverse,\np ( x(T ) ) = \u03c0 ( x(T ) ) (4)\np ( x(0\u00b7\u00b7\u00b7T ) ) = p ( x(T ) ) T\u220f t=1 p ( x(t\u22121)|x(t) ) . (5)\nFor both Gaussian and binomial diffusion, for continuous diffusion (limit of small step size \u03b2) the reversal of the diffusion process has the identical functional form as the forward process (Feller, 1949). Since q ( x(t)|x(t\u22121) ) is a Gaussian (binomial) distribution, and if \u03b2t is small, then q ( x(t\u22121)|x(t) ) will also be a Gaussian (binomial) distribution. The longer the trajectory the smaller the diffusion rate \u03b2 can be made.\nDuring learning only the mean and covariance for a Gaussian diffusion kernel, or the bit flip probability for a binomial kernel, need be estimated. As shown in Table App.1, f\u00b5 ( x(t), t ) and f\u03a3 ( x(t), t ) are functions defining the mean and covariance of the reverse Markov transitions for a Gaussian, and fb ( x(t), t ) is a function providing the bit flip probability for a binomial distribution. The computational cost of running this algorithm is the cost of these functions, times the number of time-steps. For all results in this paper, multi-layer perceptrons are used to define these functions. A wide range of regression or function fitting techniques would be applicable however, including nonparameteric methods."}, {"heading": "2.3. Model Probability", "text": "The probability the generative model assigns to the data is\np ( x(0) ) = \u222b dx(1\u00b7\u00b7\u00b7T )p ( x(0\u00b7\u00b7\u00b7T ) ) . (6)\nNaively this integral is intractable \u2013 but taking a cue from annealed importance sampling and the Jarzynski equality, we instead evaluate the relative probability of the forward and reverse trajectories, averaged over forward trajectories,\np ( x(0) ) = \u222b dx(1\u00b7\u00b7\u00b7T )p ( x(0\u00b7\u00b7\u00b7T ) ) q (x(1\u00b7\u00b7\u00b7T )|x(0)) q ( x(1\u00b7\u00b7\u00b7T )|x(0)\n) (7) = \u222b dx(1\u00b7\u00b7\u00b7T )q ( x(1\u00b7\u00b7\u00b7T )|x(0) ) p (x(0\u00b7\u00b7\u00b7T )) q ( x(1\u00b7\u00b7\u00b7T )|x(0)\n) (8)\n= \u222b dx(1\u00b7\u00b7\u00b7T )q ( x(1\u00b7\u00b7\u00b7T )|x(0) ) \u00b7\np ( x(T ) ) T\u220f t=1 p ( x(t\u22121)|x(t) ) q ( x(t)|x(t\u22121) ) . (9)\nThis can be evaluated rapidly by averaging over samples from the forward trajectory q ( x(1\u00b7\u00b7\u00b7T )|x(0) ) . For infinitesimal \u03b2 the forward and reverse distribution over trajectories can be made identical (see Section 2.2). If they are identical then only a single sample from q ( x(1\u00b7\u00b7\u00b7T )|x(0)\n) is required to exactly evaluate the above integral, as can be seen by substitution. This corresponds to the case of a quasi-static process in statistical physics (Spinney & Ford, 2013; Jarzynski, 2011)."}, {"heading": "2.4. Training", "text": "Training amounts to maximizing the model log likelihood,\nL = \u222b dx(0)q ( x(0) ) log p ( x(0) ) (10)\n= \u222b dx(0)q ( x(0) ) \u00b7\nlog  \u222b dx(1\u00b7\u00b7\u00b7T )q (x(1\u00b7\u00b7\u00b7T )|x(0)) \u00b7 p ( x(T ) )\u220fT t=1 p(x(t\u22121)|x(t)) q(x(t)|x(t\u22121))  , (11) which has a lower bound provided by Jensen\u2019s inequality,\nL \u2265 \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T ) ) \u00b7\nlog [ p ( x(T ) ) T\u220f t=1 p ( x(t\u22121)|x(t) ) q ( x(t)|x(t\u22121) )] . (12) As described in Appendix B, for our diffusion trajectories this reduces to,\nL \u2265 K (13)\nK =\u2212 T\u2211 t=2 \u222b dx(0)dx(t)q ( x(0),x(t) ) \u00b7\nDKL\n( q ( x(t\u22121)|x(t),x(0) )\u2223\u2223\u2223\u2223\u2223\u2223p(x(t\u22121)|x(t))) +Hq ( X(T )|X(0) ) \u2212Hq ( X(1)|X(0) ) \u2212Hp ( X(T ) ) .\n(14)\nwhere the entropies and KL divergences can be analytically computed. The derivation of this bound parallels the derivation of the log likelihood bound in variational Bayesian methods.\nAs in Section 2.3 if the forward and reverse trajectories are identical, corresponding to a quasi-static process, then the inequality in Equation 13 becomes an equality.\nTraining consists of finding the reverse Markov transitions which maximize this lower bound on the log likelihood,\np\u0302 ( x(t\u22121)|x(t) ) = argmax p(x(t\u22121)|x(t)) K. (15)\nThe specific targets of estimation for Gaussian and binomial diffusion are given in Table App.1.\nThus, the task of estimating a probability distribution has been reduced to the task of performing regression on the functions which set the mean and covariance of a sequence of Gaussians (or set the state flip probability for a sequence of Bernoulli trials).\n2.4.1. SETTING THE DIFFUSION RATE \u03b2t\nThe choice of \u03b2t in the forward trajectory is important for the performance of the trained model. In AIS, the right schedule of intermediate distributions can greatly improve the accuracy of the log partition function estimate (Grosse et al., 2013). In thermodynamics the schedule taken when moving between equilibrium distributions determines how much free energy is lost (Spinney & Ford, 2013; Jarzynski, 2011).\nIn the case of Gaussian diffusion, we learn2 the forward diffusion schedule \u03b22\u00b7\u00b7\u00b7T by gradient ascent on K. The variance \u03b21 of the first step is fixed to a small constant to prevent overfitting. The dependence of samples from q ( x(1\u00b7\u00b7\u00b7T )|x(0) ) on \u03b21\u00b7\u00b7\u00b7T is made explicit by using \u2018frozen noise\u2019 \u2013 as in (Kingma & Welling, 2013) the noise is treated as an additional auxiliary variable, and held constant while computing partial derivatives of K with respect to the parameters.\nFor binomial diffusion, the discrete state space makes gradient ascent with frozen noise impossible. We instead choose the forward diffusion schedule \u03b21\u00b7\u00b7\u00b7T to erase a constant fraction 1T of the original signal per diffusion step, yielding a diffusion rate of \u03b2t = (T \u2212 t+ 1)\u22121."}, {"heading": "2.5. Multiplying Distributions, and Computing Posteriors", "text": "Tasks such as computing a posterior in order to do signal denoising or inference of missing values requires multiplication of the model distribution p ( x(0) ) with a second dis-\ntribution, or bounded positive function, r ( x(0) ) , producing\na new distribution p\u0303 ( x(0) ) \u221d p ( x(0) ) r ( x(0) ) .\nMultiplying distributions is costly and difficult for many techniques, including variational autoencoders, GSNs, NADEs, and most graphical models. However, under a diffusion model it is straightforward, since the second distribution can be treated either as a small perturbation to each step in the diffusion process, or often exactly multiplied into each diffusion step. Figures 3 and 5 demonstrate the use of a diffusion model to perform denoising and inpainting of natural images. The following sections describe how\n2Recent experiments suggest that it is just as effective to instead use the same fixed \u03b2t schedule as for binomial diffusion.\nto multiply distributions in the context of diffusion probabilistic models."}, {"heading": "2.5.1. MODIFIED MARGINAL DISTRIBUTIONS", "text": "First, in order to compute p\u0303 ( x(0) ) , we multiply each of the intermediate distributions by a corresponding function r ( x(t) ) . We use a tilde above a distribution or Markov transition to denote that it belongs to a trajectory that has been modified in this way. p\u0303 ( x(0\u00b7\u00b7\u00b7T ) ) is the modified re-\nverse trajectory, which starts at the distribution p\u0303 ( x(T ) ) =\n1 Z\u0303T p ( x(T ) ) r ( x(T ) ) and proceeds through the sequence of intermediate distributions\np\u0303 ( x(t) ) = 1 Z\u0303t p ( x(t) ) r ( x(t) ) , (16)\nwhere Z\u0303t is the normalizing constant for the tth intermediate distribution."}, {"heading": "2.5.2. MODIFIED DIFFUSION STEPS", "text": "The Markov kernel p ( x(t) | x(t+1) ) for the reverse diffusion process obeys the equilibrium condition\np ( x(t ) = \u222b dx(t+1)p ( xt) | x(t+1) ) p ( xt+1) ) . (17)\nWe wish the perturbed Markov kernel p\u0303 ( x(t) | x(t+1) ) to instead obey the equilibrium condition for the perturbed distribution,\np\u0303 ( x(t) ) = \u222b dx(t+1)p\u0303 ( x(t) | x(t+1) ) p\u0303 ( xt+1) ) ,\n(18) p ( x(t) ) r ( x(t) ) Z\u0303t = \u222b dx(t+1)p\u0303 ( x(t) | x(t+1) ) \u00b7\np ( x(t+1) ) r ( x(t+1) ) Z\u0303t+1 , (19)\np ( x(t) ) = \u222b dx(t+1)p\u0303 ( x(t) | x(t+1) ) \u00b7\nZ\u0303tr ( x(t+1) ) Z\u0303t+1r ( x(t) )p(x(t+1)) . (20)\nEquation 20 will be satisfied if\np\u0303 ( x(t)|x(t+1) ) = p ( x(t)|x(t+1) ) Z\u0303t+1r (x(t)) Z\u0303tr ( x(t+1)\n) . (21) Equation 21 may not correspond to a normalized probability distribution, so we choose p\u0303 ( x(t)|x(t+1) ) to be the corresponding normalized distribution\np\u0303 ( x(t)|x(t+1) ) =\n1 Z\u0303t ( x(t+1) )p(x(t)|x(t+1)) r (x(t)) , (22)\nwhere Z\u0303t ( x(t+1) ) is the normalization constant.\nFor a Gaussian, each diffusion step is typically very sharply peaked relative to r ( x(t) ) , due to its small variance. This means that r(x(t)) r(x(t+1)) can be treated as a small perturbation\nto p ( x(t)|x(t+1) ) . A small perturbation to a Gaussian effects the mean, but not the normalization constant, so in this case Equations 21 and 22 are equivalent (see Appendix C). 2.5.3. APPLYING r ( x(t)\n) If r ( x(t) ) is sufficiently smooth, then it can be treated as a small perturbation to the reverse diffusion kernel p ( x(t)|x(t+1) ) . In this case p\u0303 ( x(t)|x(t+1) ) will have an\nidentical functional form to p ( x(t)|x(t+1) ) , but with perturbed mean for the Gaussian kernel, or with perturbed flip rate for the binomial kernel. The perturbed diffusion kernels are given in Table App.1, and are derived for the Gaussian in Appendix C.\nIf r ( x(t) ) can be multiplied with a Gaussian (or binomial) distribution in closed form, then it can be directly multiplied with the reverse diffusion kernel p ( x(t)|x(t+1) ) in\nclosed form. This applies in the case where r ( x(t) ) consists of a delta function for some subset of coordinates, as in the inpainting example in Figure 5. 2.5.4. CHOOSING r ( x(t)\n) Typically, r ( x(t) ) should be chosen to change slowly over the course of the trajectory. For the experiments in this paper we chose it to be constant,\nr ( x(t) ) = r ( x(0) ) . (23)\nAnother convenient choice is r ( x(t) ) = r ( x(0) )T\u2212t T . Un-\nder this second choice r ( x(t) ) makes no contribution to the starting distribution for the reverse trajectory. This guarantees that drawing the initial sample from p\u0303 ( x(T ) ) for the reverse trajectory remains straightforward."}, {"heading": "2.6. Entropy of Reverse Process", "text": "Since the forward process is known, we can derive upper and lower bounds on the conditional entropy of each step in the reverse trajectory, and thus on the log likelihood,\nHq\n( X(t)|X(t\u22121) ) +Hq ( X(t\u22121)|X(0) ) \u2212Hq ( X(t)|X(0) ) \u2264 Hq ( X(t\u22121)|X(t) ) \u2264 Hq ( X(t)|X(t\u22121) ) ,\n(24)\nwhere both the upper and lower bounds depend only on q ( x(1\u00b7\u00b7\u00b7T )|x(0) ) , and can be analytically computed. The derivation is provided in Appendix A."}, {"heading": "3. Experiments", "text": "We train diffusion probabilistic models on a variety of continuous datasets, and a binary dataset. We then demonstrate sampling from the trained model and inpainting of missing data, and compare model performance against other techniques. In all cases the objective function and gradient were computed using Theano (Bergstra & Breuleux, 2010). Model training was with SFO (Sohl-Dickstein et al., 2014), except for CIFAR-10. CIFAR-10 results used the\n3 An earlier version of this paper reported higher log likelihood bounds on CIFAR-10. These were the result of the model learning the 8-bit quantization of pixel values in the CIFAR-10 dataset. The log likelihood bounds reported here are instead for data that has been pre-processed by adding uniform noise to remove pixel quantization, as recommended in (Theis et al., 2015).\ninpainted using a diffusion probabilistic model trained on images of bark, by sampling from the posterior distribution over the missing region conditioned on the rest of the image. Note the long-range spatial structure, for instance in the crack entering on the left side of the inpainted region. The sample from the posterior was generated as described in Section 2.5, where r ( x(0) ) was set to a delta function\nfor known data, and a constant for missing data.\nDataset K K \u2212 Lnull Swiss Roll 2.35 bits 6.45 bits Binary Heartbeat -2.414 bits/seq. 12.024 bits/seq. Bark -0.55 bits/pixel 1.5 bits/pixel Dead Leaves 1.489 bits/pixel 3.536 bits/pixel CIFAR-103 5.4\u00b1 0.2 bits/pixel 11.5\u00b1 0.2 bits/pixel MNIST See table 2\nTable 1. The lower boundK on the log likelihood, computed on a holdout set, for each of the trained models. See Equation 12. The right column is the improvement relative to an isotropic Gaussian or independent binomial distribution. Lnull is the log likelihood of \u03c0 ( x(0) ) . All datasets except for Binary Heartbeat were scaled by a constant to give them variance 1 before computing log likelihood.\nopen source implementation of the algorithm, and RMSprop for optimization. The lower bound on the log likelihood provided by our model is reported for all datasets in Table 1. A reference implementation of the algorithm utilizing Blocks (van Merrie\u0308nboer et al., 2015) is available at https://github.com/Sohl-Dickstein/ Diffusion-Probabilistic-Models."}, {"heading": "3.1. Toy Problems", "text": ""}, {"heading": "3.1.1. SWISS ROLL", "text": "A diffusion probabilistic model was built of a two dimensional swiss roll distribution, using a radial basis function network to generate f\u00b5 ( x(t), t ) and f\u03a3 ( x(t), t ) . As illustrated in Figure 1, the swiss roll distribution was successfully learned. See Appendix Section D.1.1 for more details.\nModel Log Likelihood Dead Leaves\nMCGSM 1.244 bits/pixel Diffusion 1.489 bits/pixel\nMNIST Stacked CAE 174\u00b1 2.3 bits DBN 199\u00b1 2.9 bits Deep GSN 309\u00b1 1.6 bits Diffusion 317\u00b1 2.7 bits Adversarial net 325\u00b1 2.9 bits Perfect model 349\u00b1 3.3 bits\nTable 2. Log likelihood comparisons to other algorithms. Dead leaves images were evaluated using identical training and test data as in (Theis et al., 2012). MNIST log likelihoods were estimated using the Parzen-window code from (Goodfellow et al., 2014), with values given in bits, and show that our performance is comparable to other recent techniques. The perfect model entry was computed by applying the Parzen code to samples from the training data."}, {"heading": "3.1.2. BINARY HEARTBEAT DISTRIBUTION", "text": "A diffusion probabilistic model was trained on simple binary sequences of length 20, where a 1 occurs every 5th time bin, and the remainder of the bins are 0, using a multilayer perceptron to generate the Bernoulli rates fb ( x(t), t\n) of the reverse trajectory. The log likelihood under the true distribution is log2 ( 1 5 ) = \u22122.322 bits per sequence. As can be seen in Figure 2 and Table 1 learning was nearly perfect. See Appendix Section D.1.2 for more details."}, {"heading": "3.2. Images", "text": "We trained Gaussian diffusion probabilistic models on several image datasets. The multi-scale convolutional archi-\ntecture shared by these experiments is described in Appendix Section D.2.1, and illustrated in Figure D.1."}, {"heading": "3.2.1. DATASETS", "text": "MNIST In order to allow a direct comparison against previous work on a simple dataset, we trained on MNIST digits (LeCun & Cortes, 1998). Log likelihoods relative to (Bengio et al., 2012; Bengio & Thibodeau-Laufer, 2013; Goodfellow et al., 2014) are given in Table 2. Samples from the MNIST model are given in Appendix Figure App.1. Our training algorithm provides an asymptotically consistent lower bound on the log likelihood. However most previous reported results on continuous MNIST log likelihood rely on Parzen-window based estimates computed from model samples. For this comparison we therefore estimate MNIST log likelihood using the Parzenwindow code released with (Goodfellow et al., 2014).\nCIFAR-10 A probabilistic model was fit to the training images for the CIFAR-10 challenge dataset (Krizhevsky & Hinton, 2009). Samples from the trained model are provided in Figure 3.\nDead Leaf Images Dead leaf images (Jeulin, 1997; Lee et al., 2001) consist of layered occluding circles, drawn from a power law distribution over scales. They have an analytically tractable structure, but capture many of the statistical complexities of natural images, and therefore provide a compelling test case for natural image models. As illustrated in Table 2 and Figure 4, we achieve state of the art performance on the dead leaves dataset.\nBark Texture Images A probabilistic model was trained on bark texture images (T01-T04) from (Lazebnik et al., 2005). For this dataset we demonstrate that it is straightforward to evaluate or generate from a posterior distribution, by inpainting a large region of missing data using a sample from the model posterior in Figure 5."}, {"heading": "4. Conclusion", "text": "We have introduced a novel algorithm for modeling probability distributions that enables exact sampling and evaluation of probabilities and demonstrated its effectiveness on a variety of toy and real datasets, including challenging natural image datasets. For each of these tests we used a similar basic algorithm, showing that our method can accurately model a wide variety of distributions. Most existing density estimation techniques must sacrifice modeling power in order to stay tractable and efficient, and sampling or evaluation are often extremely expensive. The core of our algorithm consists of estimating the reversal of a Markov diffusion chain which maps data to a noise distribution; as\nthe number of steps is made large, the reversal distribution of each diffusion step becomes simple and easy to estimate. The result is an algorithm that can learn a fit to any data distribution, but which remains tractable to train, exactly sample from, and evaluate, and under which it is straightforward to manipulate conditional and posterior distributions."}, {"heading": "Acknowledgements", "text": "We thank Lucas Theis, Subhaneil Lahiri, Ben Poole, Diederik P. Kingma, Taco Cohen, Philip Bachman, and Aa\u0308ron van den Oord for extremely helpful discussion, and Ian Goodfellow for Parzen-window code. We thank Khan Academy and the Office of Naval Research for funding Jascha Sohl-Dickstein, and we thank the Office of Naval Research and the Burroughs-Wellcome, Sloan, and James S. McDonnell foundations for funding Surya Ganguli."}, {"heading": "A. Conditional Entropy Bounds Derivation", "text": "The conditional entropy Hq ( X(t\u22121)|X(t) ) of a step in the reverse trajectory is\nHq\n( X(t\u22121),X(t) ) = Hq ( X(t),X(t\u22121) ) (25)\nHq\n( X(t\u22121)|X(t) ) +Hq ( X(t) ) = Hq ( X(t)|X(t\u22121) ) +Hq ( X(t\u22121) ) (26)\nHq\n( X(t\u22121)|X(t) ) = Hq ( X(t)|X(t\u22121) ) +Hq ( X(t\u22121) ) \u2212Hq ( X(t) ) (27)\nAn upper bound on the entropy change can be constructed by observing that \u03c0 (y) is the maximum entropy distribution. This holds without qualification for the binomial distribution, and holds for variance 1 training data for the Gaussian case. For the Gaussian case, training data must therefore be scaled to have unit norm for the following equalities to hold. It need not be whitened. The upper bound is derived as follows,\nHq\n( X(t) ) \u2265 Hq ( X(t\u22121) ) (28)\nHq\n( X(t\u22121) ) \u2212Hq ( X(t) ) \u2264 0 (29)\nHq\n( X(t\u22121)|X(t) ) \u2264 Hq ( X(t)|X(t\u22121) ) . (30)\nA lower bound on the entropy difference can be established by observing that additional steps in a Markov chain do not increase the information available about the initial state in the chain, and thus do not decrease the conditional entropy of the initial state,\nHq\n( X(0)|X(t) ) \u2265 Hq ( X(0)|X(t\u22121) ) (31)\nHq\n( X(t\u22121) ) \u2212Hq ( X(t) ) \u2265 Hq ( X(0)|X(t\u22121) ) +Hq ( X(t\u22121) ) \u2212Hq ( X(0)|X(t) ) \u2212Hq ( X(t) ) (32)\nHq\n( X(t\u22121) ) \u2212Hq ( X(t) ) \u2265 Hq ( X(0),X(t\u22121) ) \u2212Hq ( X(0),X(t) ) (33)\nHq\n( X(t\u22121) ) \u2212Hq ( X(t) ) \u2265 Hq ( X(t\u22121)|X(0) ) \u2212Hq ( X(t)|X(0) ) (34)\nHq\n( X(t\u22121)|X(t) ) \u2265 Hq ( X(t)|X(t\u22121) ) +Hq ( X(t\u22121)|X(0) ) \u2212Hq ( X(t)|X(0) ) . (35)\nCombining these expressions, we bound the conditional entropy for a single step,\nHq\n( X(t)|X(t\u22121) ) \u2265 Hq ( X(t\u22121)|X(t) ) \u2265 Hq ( X(t)|X(t\u22121) ) +Hq ( X(t\u22121)|X(0) ) \u2212Hq ( X(t)|X(0) ) , (36)\nwhere both the upper and lower bounds depend only on the conditional forward trajectory q ( x(1\u00b7\u00b7\u00b7T )|x(0) ) , and can be analytically computed."}, {"heading": "B. Log Likelihood Lower Bound", "text": "The lower bound on the log likelihood is\nL \u2265 K (37)\nK = \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T ) ) log [ p ( x(T ) ) T\u220f t=1 p ( x(t\u22121)|x(t) ) q ( x(t)|x(t\u22121) )] (38) (39)\nB.1. Entropy of p ( X(T ) ) We can peel off the contribution from p ( X(T ) ) , and rewrite it as an entropy,\nK = \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T ) ) T\u2211 t=1 log [ p ( x(t\u22121)|x(t) ) q ( x(t)|x(t\u22121) )]+ \u222b dx(T )q (x(T )) log p(x(T )) (40) = \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T )\n) T\u2211 t=1 log\n[ p ( x(t\u22121)|x(t) ) q ( x(t)|x(t\u22121) )]+ \u222b dx(T )q (x(T )) log \u03c0 (xT ) (41) . (42)\nBy design, the cross entropy to \u03c0 ( x(t) ) is constant under our diffusion kernels, and equal to the entropy of p ( x(T ) ) . Therefore,\nK = T\u2211 t=1 \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T ) ) log [ p ( x(t\u22121)|x(t) ) q ( x(t)|x(t\u22121) )]\u2212Hp (X(T )) . (43) B.2. Remove the edge effect at t = 0\nIn order to avoid edge effects, we set the final step of the reverse trajectory to be identical to the corresponding forward diffusion step,\np ( x(0)|x(1) ) = q ( x(1)|x(0) ) \u03c0 (x(0)) \u03c0 ( x(1) ) = T\u03c0 (x(0)|x(1);\u03b21) . (44) We then use this equivalence to remove the contribution of the first time-step in the sum,\nK = T\u2211 t=2 \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T ) ) log [ p ( x(t\u22121)|x(t) ) q ( x(t)|x(t\u22121) )]+ \u222b dx(0)dx(1)q (x(0),x(1)) log [q (x(1)|x(0))\u03c0 (x(0)) q ( x(1)|x(0) ) \u03c0 ( x(1) )]\u2212Hp (X(T )) (45)\n= T\u2211 t=2 \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T ) ) log [ p ( x(t\u22121)|x(t) ) q ( x(t)|x(t\u22121) )]\u2212Hp (X(T )) , (46) where we again used the fact that by design \u2212 \u222b dx(t)q ( x(t) ) log \u03c0 ( x(t) ) = Hp ( X(T ) ) is a constant for all t. B.3. Rewrite in terms of posterior q ( x(t\u22121)|x(0)\n) Because the forward trajectory is a Markov process,\nK = T\u2211 t=2 \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T ) ) log [ p ( x(t\u22121)|x(t) ) q ( x(t)|x(t\u22121),x(0) )]\u2212Hp (X(T )) . (47) Using Bayes\u2019 rule we can rewrite this in terms of a posterior and marginals from the forward trajectory,\nK = T\u2211 t=2 \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T ) ) log [ p ( x(t\u22121)|x(t) ) q ( x(t\u22121)|x(t),x(0) ) q (x(t\u22121)|x(0)) q ( x(t)|x(0) ) ]\u2212Hp (X(T )) . (48)\nFigure App.1. Samples from a diffusion probabilistic model trained on MNIST digits. Note that unlike many MNIST sample figures, these are true samples rather than the mean of the Gaussian or binomial distribution from which samples would be drawn.\nB.4. Rewrite in terms of KL divergences and entropies\nWe then recognize that several terms are conditional entropies,\nK = T\u2211 t=2 \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T ) ) log [ p ( x(t\u22121)|x(t) ) q ( x(t\u22121)|x(t),x(0) )]+ T\u2211 t=2 [ Hq ( X(t)|X(0) ) \u2212Hq ( X(t\u22121)|X(0) )] \u2212Hp ( X(T ) ) (49)\n= T\u2211 t=2 \u222b dx(0\u00b7\u00b7\u00b7T )q ( x(0\u00b7\u00b7\u00b7T ) ) log [ p ( x(t\u22121)|x(t) ) q ( x(t\u22121)|x(t),x(0) )]+Hq (X(T )|X(0))\u2212Hq (X(1)|X(0))\u2212Hp (X(T )) . (50)\nFinally we transform the log ratio of probability distributions into a KL divergence,\nK = \u2212 T\u2211 t=2 \u222b dx(0)dx(t)q ( x(0),x(t) ) DKL ( q ( x(t\u22121)|x(t),x(0) )\u2223\u2223\u2223\u2223\u2223\u2223p(x(t\u22121)|x(t))) (51) +Hq ( X(T )|X(0) ) \u2212Hq ( X(1)|X(0) ) \u2212Hp ( X(T ) ) .\nNote that the entropies can be analytically computed, and the KL divergence can be analytically computed given x(0) and x(t).\nGaussian Binomial\nWell behaved (analytically tractable) distribution\n\u03c0 ( x(T ) ) = N ( x(T );0, I ) B ( x(T ); 0.5 ) Forward diffusion kernel q ( x(t)|x(t\u22121) ) = N ( x(t);x(t\u22121) \u221a 1\u2212 \u03b2t, I\u03b2t ) B ( x(t);x(t\u22121) (1\u2212 \u03b2t) + 0.5\u03b2t\n) Reverse diffusion kernel p ( x(t\u22121)|x(t) ) = N ( x(t\u22121); f\u00b5 ( x(t), t ) , f\u03a3 ( x(t), t )) B ( x(t\u22121); fb ( x(t), t\n)) Training targets f\u00b5 ( x(t), t ) , f\u03a3 ( x(t), t ) , \u03b21\u00b7\u00b7\u00b7T fb ( x(t), t\n) Forward distribution q ( x(0\u00b7\u00b7\u00b7T ) ) = q ( x(0) )\u220fT t=1 q ( x(t)|x(t\u22121)\n) Reverse distribution p ( x(0\u00b7\u00b7\u00b7T ) ) = \u03c0 ( x(T ) )\u220fT t=1 p ( x(t\u22121)|x(t)\n) Log likelihood L = \u222b dx(0)q ( x(0) ) log p ( x(0)\n) Lower bound on log likelihood K = \u2212 \u2211T t=2 Eq(x(0),x(t)) [ DKL ( q ( x(t\u22121)|x(t),x(0)\n)\u2223\u2223\u2223\u2223p (x(t\u22121)|x(t)))]+Hq (X(T )|X(0))\u2212Hq (X(1)|X(0))\u2212Hp (X(T )) Perturbed reverse diffusion kernel p\u0303 ( x(t\u22121)|x(t) ) = N ( x(t\u22121); f\u00b5 ( x(t), t ) + f\u03a3 ( x(t), t ) \u2202 log r(x(t\u22121)\u2032) \u2202x(t\u22121)\u2032 \u2223\u2223\u2223\u2223 x(t\u22121)\u2032=f\u00b5(x(t),t) , f\u03a3 ( x(t), t )) B ( x (t\u22121) i ; ct\u22121i d t\u22121 i xt\u22121i d t\u22121 i +(1\u2212c t\u22121 i )(1\u2212d t\u22121 i )\n) Table App.1. The key equations in this paper for the specific cases of Gaussian and binomial diffusion processes. N (u;\u00b5,\u03a3) is a Gaussian distribution with mean \u00b5 and covariance \u03a3. B (u; r) is the distribution for a single Bernoulli trial, with u = 1 occurring with probability r, and u = 0 occurring with probability 1 \u2212 r. Finally, for the perturbed Bernoulli trials bti = x (t\u22121) (1\u2212 \u03b2t) + 0.5\u03b2t, cti = [ fb ( x(t+1), t )] i , and dti = r ( x (t) i = 1 ) , and the distribution is given for a single bit i."}, {"heading": "C. Perturbed Gaussian Transition", "text": "We wish to compute p\u0303 ( x(t\u22121) | x(t) ) . For notational simplicity, let \u00b5 = f\u00b5 ( x(t), t ) , \u03a3 = f\u03a3 ( x(t), t ) , and y = x(t\u22121). Using this notation,\np\u0303 ( y | x(t) ) \u221d p ( y | x(t) ) r (y) (52)\n= N (y;\u00b5,\u03a3) r (y) . (53)\nWe can rewrite this in terms of energy functions, where Er (y) = \u2212 log r (y),\np\u0303 ( y | x(t) ) \u221d exp [\u2212E (y)] (54)\nE (y) = 1\n2 (y \u2212 \u00b5)T \u03a3\u22121 (y \u2212 \u00b5) + Er (y) . (55)\nIf Er (y) is smooth relative to 12 (y \u2212 \u00b5) T \u03a3\u22121 (y \u2212 \u00b5), then we can approximate it using its Taylor expansion around \u00b5. One sufficient condition is that the eigenvalues of the Hessian of Er (y) are everywhere much smaller magnitude than the eigenvalues of \u03a3\u22121. We then have\nEr (y) \u2248 Er (\u00b5) + (y \u2212 \u00b5)g (56)\nwhere g = \u2202Er(y\u2032) \u2202y\u2032 \u2223\u2223\u2223\u2223 y\u2032=\u00b5 . Plugging this in to the full energy,\nE (y) \u2248 1 2 (y \u2212 \u00b5)T \u03a3\u22121 (y \u2212 \u00b5) + (y \u2212 \u00b5)T g + constant (57)\n= 1 2 yT\u03a3\u22121y \u2212 1 2 yT\u03a3\u22121\u00b5\u2212 1 2 \u00b5T\u03a3\u22121y + 1 2 yT\u03a3\u22121\u03a3g + 1 2 gT\u03a3\u03a3\u22121y + constant (58) = 1\n2 (y \u2212 \u00b5+ \u03a3g)T \u03a3\u22121 (y \u2212 \u00b5+ \u03a3g) + constant. (59)\nThis corresponds to a Gaussian,\np\u0303 ( y | x(t) ) \u2248 N (y;\u00b5\u2212 \u03a3g,\u03a3) . (60)\nSubstituting back in the original formalism, this is,\np\u0303 ( x(t\u22121) | x(t) ) \u2248 N x(t\u22121); f\u00b5 (x(t), t)+ f\u03a3 (x(t), t) \u2202 log r ( x(t\u22121) \u2032 )\n\u2202x(t\u22121)\u2032\n\u2223\u2223\u2223\u2223\u2223 x(t\u22121)\u2032=f\u00b5(x(t),t) , f\u03a3 ( x(t), t ) . (61)"}, {"heading": "D. Experimental Details", "text": "D.1. Toy Problems\nD.1.1. SWISS ROLL\nA probabilistic model was built of a two dimensional swiss roll distribution. The generative model p ( x(0\u00b7\u00b7\u00b7T ) ) consisted of 40 time steps of Gaussian diffusion initialized at an identity-covariance Gaussian distribution. A (normalized) radial basis function network with a single hidden layer and 16 hidden units was trained to generate the mean and covariance functions f\u00b5 ( x(t), t ) and a diago-\nnal f\u03a3 ( x(t), t ) for the reverse trajectory. The top, readout, layer for each function was learned independently for each time step, but for all other layers weights were shared across all time steps and both functions. The top layer output of f\u03a3 ( x(t), t ) was passed through a sigmoid to restrict it between 0 and 1. As can be seen in Figure 1, the swiss roll distribution was successfully learned.\nD.1.2. BINARY HEARTBEAT DISTRIBUTION\nA probabilistic model was trained on simple binary sequences of length 20, where a 1 occurs every 5th time bin, and the remainder of the bins are 0. The generative model consisted of 2000 time steps of binomial diffusion initialized at an independent binomial distribution with the same mean activity as the data (p ( x\n(T ) i = 1\n) = 0.2). A\nmultilayer perceptron with sigmoid nonlinearities, 20 input units and three hidden layers with 50 units each was trained to generate the Bernoulli rates fb ( x(t), t ) of the reverse trajectory. The top, readout, layer was learned independently for each time step, but for all other layers weights were shared across all time steps. The top layer output was passed through a sigmoid to restrict it between 0 and 1. As can be seen in Figure 2, the heartbeat distribution was successfully learned. The log likelihood under the true generating process is log2 ( 1 5 ) = \u22122.322 bits per sequence. As can be seen in Figure 2 and Table 1 learning was nearly perfect.\nD.2. Images\nD.2.1. ARCHITECTURE\nReadout In all cases, a convolutional network was used to produce a vector of outputs yi \u2208 R2J for each image pixel i. The entries in yi are divided into two equal sized subsets, y\u00b5 and y\u03a3.\nTemporal Dependence The convolution output y\u00b5 is used as per-pixel weighting coefficients in a sum over timedependent \u201cbump\u201d functions, generating an output z\u00b5i \u2208 R\nfor each pixel i,\nz\u00b5i = J\u2211 j=1 y\u00b5ijgj (t) . (62)\nThe bump functions consist of\ngj (t) = exp\n( \u2212 12w2 (t\u2212 \u03c4j) 2 )\n\u2211J k=1 exp ( \u2212 12w2 (t\u2212 \u03c4k) 2 ) , (63)\nwhere \u03c4j \u2208 (0, T ) is the bump center, and w is the spacing between bump centers. z\u03a3 is generated in an identical way, but using y\u03a3.\nFor all image experiments a number of timesteps T = 1000 was used, except for the bark dataset which used T = 500.\nMean and Variance Finally, these outputs are combined to produce a diffusion mean and variance prediction for each pixel i,\n\u03a3ii = \u03c3 ( z\u03a3i + \u03c3 \u22121 (\u03b2t) ) , (64)\n\u00b5i = (xi \u2212 z\u00b5i ) (1\u2212 \u03a3ii) + z \u00b5 i . (65)\nwhere both \u03a3 and \u00b5 are parameterized as a perturbation around the forward diffusion kernel T\u03c0 ( x(t)|x(t\u22121);\u03b2t ) , and z\u00b5i is the mean of the equilibrium distribution that would result from applying p ( x(t\u22121)|x(t) ) many times. \u03a3 is restricted to be a diagonal matrix.\nMulti-Scale Convolution We wish to accomplish goals that are often achieved with pooling networks \u2013 specifically, we wish to discover and make use of long-range and multi-scale dependencies in the training data. However, since the network output is a vector of coefficients for every pixel it is important to generate a full resolution rather than down-sampled feature map. We therefore define multi-scale-convolution layers that consist of the following steps:\n1. Perform mean pooling to downsample the image to multiple scales. Downsampling is performed in powers of two.\n2. Performing convolution at each scale. 3. Upsample all scales to full resolution, and sum the re-\nsulting images. 4. Perform a pointwise nonlinear transformation, con-\nsisting of a soft relu (log [1 + exp (\u00b7)]).\nThe composition of the first three linear operations resembles convolution by a multiscale convolution kernel, up to blocking artifacts introduced by upsampling. This method of achieving multiscale convolution was described in (Barron et al., 2013).\nInput\nDense Multi-scaleconvolution\nConvolution 1x1 kernel\nTemporal coefficients Temporal coefficients\nDense Multi-scaleconvolution\nMean image\nCovariance image\nConvolution 1x1 kernel\nFigure D.1. Network architecture for mean function f\u00b5 ( x(t), t )\nand covariance function f\u03a3\n(\nx(t), t\n)\n, for experiments in Section\n3.2. The input image x(t) passes through several layers of multiscale convolution (Section D.2.1). It then passes through several convolutional layers with 1 \u00d7 1 kernels. This is equivalent to a dense transformation performed on each pixel. A linear transformation generates coefficients for readout of both mean \u00b5(t) and covariance \u03a3(t) for each pixel. Finally, a time dependent readout function converts those coefficients into mean and covariance images, as described in Section D.2.1. For CIFAR-10 a dense (or fully connected) pathway was used in parallel to the multi-scale convolutional pathway. For MNIST, the dense pathway was used to the exclusion of the multi-scale convolutional pathway.\nDense Layers Dense (acting on the full image vector) and kernel-width-1 convolutional (acting separately on the feature vector for each pixel) layers share the same form. They consist of a linear transformation, followed by a tanh nonlinearity."}], "references": [{"title": "Volumetric Semantic Segmentation Using Pyramid Context Features", "author": ["J.T. Barron", "M.D. Biggin", "P. Arbelaez", "D.W. Knowles", "S.V. Keranen", "J. Malik"], "venue": "IEEE International Conference on Computer Vision, pp. 3448\u20133455", "citeRegEx": "Barron et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Barron et al\\.", "year": 2013}, {"title": "Deep generative stochastic networks trainable by backprop", "author": ["Y. Bengio", "E. Thibodeau-Laufer"], "venue": "arXiv preprint arXiv:1306.1091,", "citeRegEx": "Bengio and Thibodeau.Laufer,? \\Q2013\\E", "shortCiteRegEx": "Bengio and Thibodeau.Laufer", "year": 2013}, {"title": "Better Mixing via Deep Representations", "author": ["Y. Bengio", "G. Mesnil", "Y. Dauphin", "S. Rifai"], "venue": "arXiv preprint arXiv:1207.4404,", "citeRegEx": "Bengio et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2012}, {"title": "Theano: a CPU and GPU math expression compiler", "author": ["J. Bergstra", "O. Breuleux"], "venue": "Proceedings of the Python for Scientific Computing Conference (SciPy),", "citeRegEx": "Bergstra and Breuleux,? \\Q2010\\E", "shortCiteRegEx": "Bergstra and Breuleux", "year": 2010}, {"title": "Statistical Analysis of Non-Lattice Data", "author": ["J. Besag"], "venue": "The Statistician,", "citeRegEx": "Besag,? \\Q1975\\E", "shortCiteRegEx": "Besag", "year": 1975}, {"title": "GTM: The generative topographic mapping", "author": ["C. Bishop", "M. Svens\u00e9n", "C. Williams"], "venue": "Neural computation,", "citeRegEx": "Bishop et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Bishop et al\\.", "year": 1998}, {"title": "Accurate and Conservative Estimates of MRF Log-likelihood using Reverse Annealing", "author": ["Y. Burda", "R.B. Grosse", "R. Salakhutdinov"], "venue": null, "citeRegEx": "Burda et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Burda et al\\.", "year": 2014}, {"title": "The helmholtz machine", "author": ["P. Dayan", "G.E. Hinton", "R.M. Neal", "R.S. Zemel"], "venue": "Neural computation,", "citeRegEx": "Dayan et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Dayan et al\\.", "year": 1995}, {"title": "NICE: Non-linear Independent Components", "author": ["L. Dinh", "D. Krueger", "Y. Bengio"], "venue": "Estimation. arXiv:1410.8516,", "citeRegEx": "Dinh et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Dinh et al\\.", "year": 2014}, {"title": "A tutorial on Bayesian nonparametric models", "author": ["S.J. Gershman", "D.M. Blei"], "venue": "Journal of Mathematical Psychology,", "citeRegEx": "Gershman and Blei,? \\Q2012\\E", "shortCiteRegEx": "Gershman and Blei", "year": 2012}, {"title": "Strictly proper scoring rules, prediction, and estimation", "author": ["T. Gneiting", "A.E. Raftery"], "venue": "Journal of the American Statistical Association,", "citeRegEx": "Gneiting and Raftery,? \\Q2007\\E", "shortCiteRegEx": "Gneiting and Raftery", "year": 2007}, {"title": "Generative Adversarial Nets", "author": ["I.J. Goodfellow", "J. Pouget-Abadie", "M. Mirza", "B. Xu", "D. Warde-Farley", "S. Ozair", "A. Courville", "Y. Bengio"], "venue": "Advances in Neural Information Processing Systems,", "citeRegEx": "Goodfellow et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Goodfellow et al\\.", "year": 2014}, {"title": "Annealing between distributions by averaging moments", "author": ["R.B. Grosse", "C.J. Maddison", "R. Salakhutdinov"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Grosse et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Grosse et al\\.", "year": 2013}, {"title": "Training products of experts by minimizing contrastive divergence", "author": ["G.E. Hinton"], "venue": "Neural Computation,", "citeRegEx": "Hinton,? \\Q2002\\E", "shortCiteRegEx": "Hinton", "year": 2002}, {"title": "The wake-sleep algorithm for unsupervised neural networks", "author": ["G.E. Hinton"], "venue": "Science,", "citeRegEx": "Hinton,? \\Q1995\\E", "shortCiteRegEx": "Hinton", "year": 1995}, {"title": "Estimation of non-normalized statistical models using score matching", "author": ["A. Hyv\u00e4rinen"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Hyv\u00e4rinen,? \\Q2005\\E", "shortCiteRegEx": "Hyv\u00e4rinen", "year": 2005}, {"title": "Equilibrium free-energy differences from nonequilibrium measurements: A master-equation approach", "author": ["C. Jarzynski"], "venue": "Physical Review E,", "citeRegEx": "Jarzynski,? \\Q1997\\E", "shortCiteRegEx": "Jarzynski", "year": 1997}, {"title": "Equalities and inequalities: irreversibility and the second law of thermodynamics at the nanoscale", "author": ["C. Jarzynski"], "venue": "Annu. Rev. Condens. Matter Phys.,", "citeRegEx": "Jarzynski,? \\Q2011\\E", "shortCiteRegEx": "Jarzynski", "year": 2011}, {"title": "Dead leaves models: from space tesselation to random functions", "author": ["D. Jeulin"], "venue": "Proc. of the Symposium on the Advances in the Theory and Applications of Random Sets,", "citeRegEx": "Jeulin,? \\Q1997\\E", "shortCiteRegEx": "Jeulin", "year": 1997}, {"title": "An introduction to variational methods for graphical models", "author": ["M.I. Jordan", "Z. Ghahramani", "T.S. Jaakkola", "L.K. Saul"], "venue": "Machine learning,", "citeRegEx": "Jordan et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Jordan et al\\.", "year": 1999}, {"title": "Fast inference in sparse coding algorithms with applications to object recognition", "author": ["K. Kavukcuoglu", "M. Ranzato", "Y. LeCun"], "venue": "arXiv preprint arXiv:1010.3467,", "citeRegEx": "Kavukcuoglu et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Kavukcuoglu et al\\.", "year": 2010}, {"title": "Auto-Encoding Variational Bayes", "author": ["D.P. Kingma", "M. Welling"], "venue": "International Conference on Learning Representations,", "citeRegEx": "Kingma and Welling,? \\Q2013\\E", "shortCiteRegEx": "Kingma and Welling", "year": 2013}, {"title": "Learning multiple layers of features from tiny images", "author": ["A. Krizhevsky", "G. Hinton"], "venue": null, "citeRegEx": "Krizhevsky and Hinton,? \\Q2009\\E", "shortCiteRegEx": "Krizhevsky and Hinton", "year": 2009}, {"title": "Sur la th\u00e9orie du mouvement brownien", "author": ["P. Langevin"], "venue": "CR Acad. Sci. Paris,", "citeRegEx": "Langevin,? \\Q1908\\E", "shortCiteRegEx": "Langevin", "year": 1908}, {"title": "The neural autoregressive distribution estimator", "author": ["H. Larochelle", "I. Murray"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Larochelle and Murray,? \\Q2011\\E", "shortCiteRegEx": "Larochelle and Murray", "year": 2011}, {"title": "A sparse texture representation using local affine regions", "author": ["S. Lazebnik", "C. Schmid", "J. Ponce"], "venue": "Pattern Analysis and Machine Intelligence, IEEE Transactions on,", "citeRegEx": "Lazebnik et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Lazebnik et al\\.", "year": 2005}, {"title": "The MNIST database of handwritten digits", "author": ["Y. LeCun", "C. Cortes"], "venue": null, "citeRegEx": "LeCun and Cortes,? \\Q1998\\E", "shortCiteRegEx": "LeCun and Cortes", "year": 1998}, {"title": "Occlusion models for natural images: A statistical study of a scale-invariant dead leaves model", "author": ["A. Lee", "D. Mumford", "J. Huang"], "venue": "International Journal of Computer Vision,", "citeRegEx": "Lee et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Lee et al\\.", "year": 2001}, {"title": "Unifying Non-Maximum Likelihood Learning Objectives with Minimum KL Contraction", "author": ["S. Lyu"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "Lyu,? \\Q2011\\E", "shortCiteRegEx": "Lyu", "year": 2011}, {"title": "Bayesian neural networks and density networks. Nuclear Instruments and Methods in Physics Research Section A: Accelerators, Spectrometers", "author": ["D. MacKay"], "venue": "Detectors and Associated Equipment,", "citeRegEx": "MacKay,? \\Q1995\\E", "shortCiteRegEx": "MacKay", "year": 1995}, {"title": "Loopy belief propagation for approximate inference: An empirical study", "author": ["K.P. Murphy", "Y. Weiss", "M.I. Jordan"], "venue": "In Proceedings of the Fifteenth conference on Uncertainty in artificial intelligence,", "citeRegEx": "Murphy et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Murphy et al\\.", "year": 1999}, {"title": "Annealed importance sampling", "author": ["R. Neal"], "venue": "Statistics and Computing,", "citeRegEx": "Neal,? \\Q2001\\E", "shortCiteRegEx": "Neal", "year": 2001}, {"title": "Stochastic Backpropagation and Approximate Inference in Deep Generative Models", "author": ["D.J. Rezende", "S. Mohamed", "D. Wierstra"], "venue": "Proceedings of the 31st International Conference on Machine Learning", "citeRegEx": "Rezende et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rezende et al\\.", "year": 2014}, {"title": "High-Dimensional Probability Estimation with Deep Density Models", "author": ["O. Rippel", "R.P. Adams"], "venue": null, "citeRegEx": "Rippel and Adams,? \\Q2013\\E", "shortCiteRegEx": "Rippel and Adams", "year": 2013}, {"title": "Learning factorial codes by predictability minimization", "author": ["J. Schmidhuber"], "venue": "Neural Computation,", "citeRegEx": "Schmidhuber,? \\Q1992\\E", "shortCiteRegEx": "Schmidhuber", "year": 1992}, {"title": "Learning joint top-down and bottom-up processes for 3D visual inference", "author": ["C. Sminchisescu", "A. Kanaujia", "D. Metaxas"], "venue": "In Computer Vision and Pattern Recognition,", "citeRegEx": "Sminchisescu et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Sminchisescu et al\\.", "year": 2006}, {"title": "New Method for Parameter Estimation in Probabilistic Models: Minimum Probability Flow", "author": ["J. Sohl-Dickstein", "P. Battaglino", "M. DeWeese"], "venue": "Physical Review Letters,", "citeRegEx": "Sohl.Dickstein et al\\.,? \\Q2206\\E", "shortCiteRegEx": "Sohl.Dickstein et al\\.", "year": 2206}, {"title": "Minimum Probability Flow Learning", "author": ["J. Sohl-Dickstein", "P.B. Battaglino", "M.R. DeWeese"], "venue": "International Conference on Machine Learning,", "citeRegEx": "Sohl.Dickstein et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Sohl.Dickstein et al\\.", "year": 2011}, {"title": "Fast largescale optimization by unifying stochastic gradient and quasi-Newton methods", "author": ["J. Sohl-Dickstein", "B. Poole", "S. Ganguli"], "venue": "In Proceedings of the 31st International Conference on Machine Learning", "citeRegEx": "Sohl.Dickstein et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Sohl.Dickstein et al\\.", "year": 2014}, {"title": "Fluctuation Relations : A Pedagogical Overview", "author": ["R. Spinney", "I. Ford"], "venue": "arXiv preprint arXiv:1201.6381,", "citeRegEx": "Spinney and Ford,? \\Q2013\\E", "shortCiteRegEx": "Spinney and Ford", "year": 2013}, {"title": "Learning stochastic inverses", "author": ["A. Stuhlm\u00fcller", "J. Taylor", "N. Goodman"], "venue": "Advances in Neural Information Processing Systems,", "citeRegEx": "Stuhlm\u00fcller et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Stuhlm\u00fcller et al\\.", "year": 2013}, {"title": "Nonconvex optimization using a Fokker-Planck learning machine", "author": ["J. Suykens", "J. Vandewalle"], "venue": "In 12th European Conference on Circuit Theory and Design,", "citeRegEx": "Suykens and Vandewalle,? \\Q1995\\E", "shortCiteRegEx": "Suykens and Vandewalle", "year": 1995}, {"title": "Convergence condition of the TAP equation for the infinite-ranged Ising spin glass model", "author": ["T P"], "venue": "J. Phys. A: Math. Gen", "citeRegEx": "P.,? \\Q1971\\E", "shortCiteRegEx": "P.", "year": 1971}, {"title": "Mean-field theory of Boltzmann machine learning", "author": ["T. Tanaka"], "venue": "Physical Review Letters E,", "citeRegEx": "Tanaka,? \\Q1998\\E", "shortCiteRegEx": "Tanaka", "year": 1998}, {"title": "Mixtures of conditional Gaussian scale mixtures applied to multiscale image representations", "author": ["L. Theis", "R. Hosseini", "M. Bethge"], "venue": "PloS one,", "citeRegEx": "Theis et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Theis et al\\.", "year": 2012}, {"title": "A note on the evaluation of generative models", "author": ["L. Theis", "A. van den Oord", "M. Bethge"], "venue": "arXiv preprint arXiv:1511.01844,", "citeRegEx": "Theis et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Theis et al\\.", "year": 2015}, {"title": "RNADE: The real-valued neural autoregressive density-estimator", "author": ["B. Uria", "I. Murray", "H. Larochelle"], "venue": "Advances in Neural Information Processing Systems,", "citeRegEx": "Uria et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Uria et al\\.", "year": 2013}, {"title": "A Deep and Tractable Density Estimator", "author": ["B. Uria", "I. Murray", "H. Larochelle"], "venue": null, "citeRegEx": "Uria et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Uria et al\\.", "year": 2013}, {"title": "A new learning algorithm for mean field Boltzmann machines", "author": ["M. Welling", "G. Hinton"], "venue": "Lecture Notes in Computer Science,", "citeRegEx": "Welling and Hinton,? \\Q2002\\E", "shortCiteRegEx": "Welling and Hinton", "year": 2002}, {"title": "On the Equivalence Between Deep NADE and Generative Stochastic Networks", "author": ["L. Yao", "S. Ozair", "K. Cho", "Y. Bengio"], "venue": "In Machine Learning and Knowledge Discovery in Databases,", "citeRegEx": "Yao et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Yao et al\\.", "year": 2014}], "referenceMentions": [{"referenceID": 43, "context": "A variety of analytic approximations exist which ameliorate, but do not remove, this tradeoff\u2013for instance mean field theory and its expansions (T, 1982; Tanaka, 1998), variational Bayes (Jordan et al.", "startOffset": 144, "endOffset": 167}, {"referenceID": 19, "context": "A variety of analytic approximations exist which ameliorate, but do not remove, this tradeoff\u2013for instance mean field theory and its expansions (T, 1982; Tanaka, 1998), variational Bayes (Jordan et al., 1999), contrastive divergence (Welling & Hinton, 2002; Hinton, 2002), minimum probability flow (Sohl-Dickstein et al.", "startOffset": 187, "endOffset": 208}, {"referenceID": 13, "context": ", 1999), contrastive divergence (Welling & Hinton, 2002; Hinton, 2002), minimum probability flow (Sohl-Dickstein et al.", "startOffset": 32, "endOffset": 70}, {"referenceID": 28, "context": ", 2011b;a), minimum KL contraction (Lyu, 2011), proper scoring rules (Gneiting & Raftery, 2007; Parry et al.", "startOffset": 35, "endOffset": 46}, {"referenceID": 15, "context": ", 2012), score matching (Hyv\u00e4rinen, 2005), pseudolikelihood (Besag, 1975), loopy belief propagation (Murphy et al.", "startOffset": 24, "endOffset": 41}, {"referenceID": 4, "context": ", 2012), score matching (Hyv\u00e4rinen, 2005), pseudolikelihood (Besag, 1975), loopy belief propagation (Murphy et al.", "startOffset": 60, "endOffset": 73}, {"referenceID": 30, "context": ", 2012), score matching (Hyv\u00e4rinen, 2005), pseudolikelihood (Besag, 1975), loopy belief propagation (Murphy et al., 1999), and many, many more.", "startOffset": 100, "endOffset": 121}, {"referenceID": 16, "context": "Our method uses a Markov chain to gradually convert one distribution into another, an idea used in non-equilibrium statistical physics (Jarzynski, 1997) and sequential Monte Carlo (Neal, 2001).", "startOffset": 135, "endOffset": 152}, {"referenceID": 31, "context": "Our method uses a Markov chain to gradually convert one distribution into another, an idea used in non-equilibrium statistical physics (Jarzynski, 1997) and sequential Monte Carlo (Neal, 2001).", "startOffset": 180, "endOffset": 192}, {"referenceID": 14, "context": "Relationship to other work The wake-sleep algorithm (Hinton, 1995; Dayan et al., 1995) introduced the idea of training inference and generative probabilistic models against each other.", "startOffset": 52, "endOffset": 86}, {"referenceID": 7, "context": "Relationship to other work The wake-sleep algorithm (Hinton, 1995; Dayan et al., 1995) introduced the idea of training inference and generative probabilistic models against each other.", "startOffset": 52, "endOffset": 86}, {"referenceID": 35, "context": "This approach remained largely unexplored for nearly two decades, though with some exceptions (Sminchisescu et al., 2006; Kavukcuoglu et al., 2010).", "startOffset": 94, "endOffset": 147}, {"referenceID": 20, "context": "This approach remained largely unexplored for nearly two decades, though with some exceptions (Sminchisescu et al., 2006; Kavukcuoglu et al., 2010).", "startOffset": 94, "endOffset": 147}, {"referenceID": 32, "context": "In (Kingma & Welling, 2013; Gregor et al., 2013; Rezende et al., 2014; Ozair & Bengio, 2014) variational learning and inference algorithms were developed which allow a flexible generative model and posterior distribution over latent variables to be directly trained against each other.", "startOffset": 3, "endOffset": 92}, {"referenceID": 35, "context": "The variational bound in these papers is similar to the one used in our training objective and in the earlier work of (Sminchisescu et al., 2006).", "startOffset": 118, "endOffset": 145}, {"referenceID": 49, "context": "Generative stochastic networks (Bengio & Thibodeau-Laufer, 2013; Yao et al., 2014) train a Markov kernel to match its equilibrium distribution to the data distribution.", "startOffset": 31, "endOffset": 82}, {"referenceID": 11, "context": "Adversarial networks (Goodfellow et al., 2014) train a generative model against a classifier which attempts to distinguish generated samples from true data.", "startOffset": 21, "endOffset": 46}, {"referenceID": 34, "context": "A similar objective in (Schmidhuber, 1992) learns a two-way mapping to a representation with marginally independent units.", "startOffset": 23, "endOffset": 42}, {"referenceID": 8, "context": "In (Rippel & Adams, 2013; Dinh et al., 2014) bijective deterministic maps are learned to a latent representation with a simple factorial density function.", "startOffset": 3, "endOffset": 44}, {"referenceID": 40, "context": "In (Stuhlm\u00fcller et al., 2013) stochastic inverses are learned for Bayesian networks.", "startOffset": 3, "endOffset": 29}, {"referenceID": 44, "context": "Mixtures of conditional Gaussian scale mixtures (MCGSMs) (Theis et al., 2012) describe a dataset using Gaussian scale mixtures, with parameters which depend on a sequence of causal neighborhoods.", "startOffset": 57, "endOffset": 77}, {"referenceID": 29, "context": "There is additionally significant work learning flexible generative mappings from simple latent distributions to data distributions \u2013 early examples including (MacKay, 1995) where neural networks are introduced as generative models, and (Bishop et al.", "startOffset": 159, "endOffset": 173}, {"referenceID": 5, "context": "There is additionally significant work learning flexible generative mappings from simple latent distributions to data distributions \u2013 early examples including (MacKay, 1995) where neural networks are introduced as generative models, and (Bishop et al., 1998) where a stochastic manifold mapping is learned from a latent space to the data space.", "startOffset": 237, "endOffset": 258}, {"referenceID": 16, "context": "Related ideas from physics include the Jarzynski equality (Jarzynski, 1997), known in machine learning as An-", "startOffset": 58, "endOffset": 75}, {"referenceID": 31, "context": "nealed Importance Sampling (AIS) (Neal, 2001), which uses a Markov chain which slowly converts one distribution into another to compute a ratio of normalizing constants.", "startOffset": 33, "endOffset": 45}, {"referenceID": 6, "context": "In (Burda et al., 2014) it is shown that AIS can also be performed using the reverse rather than forward trajectory.", "startOffset": 3, "endOffset": 23}, {"referenceID": 23, "context": "Langevin dynamics (Langevin, 1908), which are the stochastic realization of the Fokker-Planck equation, show how to define a Gaussian diffusion process which has any target distribution as its equilibrium.", "startOffset": 18, "endOffset": 34}, {"referenceID": 17, "context": "This corresponds to the case of a quasi-static process in statistical physics (Spinney & Ford, 2013; Jarzynski, 2011).", "startOffset": 78, "endOffset": 117}, {"referenceID": 12, "context": "In AIS, the right schedule of intermediate distributions can greatly improve the accuracy of the log partition function estimate (Grosse et al., 2013).", "startOffset": 129, "endOffset": 150}, {"referenceID": 17, "context": "In thermodynamics the schedule taken when moving between equilibrium distributions determines how much free energy is lost (Spinney & Ford, 2013; Jarzynski, 2011).", "startOffset": 123, "endOffset": 162}, {"referenceID": 18, "context": "The proposed framework trained on dead leaf images (Jeulin, 1997; Lee et al., 2001).", "startOffset": 51, "endOffset": 83}, {"referenceID": 27, "context": "The proposed framework trained on dead leaf images (Jeulin, 1997; Lee et al., 2001).", "startOffset": 51, "endOffset": 83}, {"referenceID": 44, "context": "(b) A sample from the previous state of the art natural image model (Theis et al., 2012) trained on identical data, reproduced here with permission.", "startOffset": 68, "endOffset": 88}, {"referenceID": 38, "context": "Model training was with SFO (Sohl-Dickstein et al., 2014), except for CIFAR-10.", "startOffset": 28, "endOffset": 57}, {"referenceID": 45, "context": "The log likelihood bounds reported here are instead for data that has been pre-processed by adding uniform noise to remove pixel quantization, as recommended in (Theis et al., 2015).", "startOffset": 161, "endOffset": 181}, {"referenceID": 25, "context": "(a) A bark image from (Lazebnik et al., 2005).", "startOffset": 22, "endOffset": 45}, {"referenceID": 44, "context": "Dead leaves images were evaluated using identical training and test data as in (Theis et al., 2012).", "startOffset": 79, "endOffset": 99}, {"referenceID": 11, "context": "MNIST log likelihoods were estimated using the Parzen-window code from (Goodfellow et al., 2014), with values given in bits, and show that our performance is comparable to other recent techniques.", "startOffset": 71, "endOffset": 96}, {"referenceID": 2, "context": "Log likelihoods relative to (Bengio et al., 2012; Bengio & Thibodeau-Laufer, 2013; Goodfellow et al., 2014) are given in Table 2.", "startOffset": 28, "endOffset": 107}, {"referenceID": 11, "context": "Log likelihoods relative to (Bengio et al., 2012; Bengio & Thibodeau-Laufer, 2013; Goodfellow et al., 2014) are given in Table 2.", "startOffset": 28, "endOffset": 107}, {"referenceID": 11, "context": "For this comparison we therefore estimate MNIST log likelihood using the Parzenwindow code released with (Goodfellow et al., 2014).", "startOffset": 105, "endOffset": 130}, {"referenceID": 18, "context": "Dead Leaf Images Dead leaf images (Jeulin, 1997; Lee et al., 2001) consist of layered occluding circles, drawn from a power law distribution over scales.", "startOffset": 34, "endOffset": 66}, {"referenceID": 27, "context": "Dead Leaf Images Dead leaf images (Jeulin, 1997; Lee et al., 2001) consist of layered occluding circles, drawn from a power law distribution over scales.", "startOffset": 34, "endOffset": 66}, {"referenceID": 25, "context": "Bark Texture Images A probabilistic model was trained on bark texture images (T01-T04) from (Lazebnik et al., 2005).", "startOffset": 92, "endOffset": 115}], "year": 2015, "abstractText": "A central problem in machine learning involves modeling complex data-sets using highly flexible families of probability distributions in which learning, sampling, inference, and evaluation are still analytically or computationally tractable. Here, we develop an approach that simultaneously achieves both flexibility and tractability. The essential idea, inspired by non-equilibrium statistical physics, is to systematically and slowly destroy structure in a data distribution through an iterative forward diffusion process. We then learn a reverse diffusion process that restores structure in data, yielding a highly flexible and tractable generative model of the data. This approach allows us to rapidly learn, sample from, and evaluate probabilities in deep generative models with thousands of layers or time steps, as well as to compute conditional and posterior probabilities under the learned model. We additionally release an open source reference implementation of the algorithm.", "creator": "LaTeX with hyperref package"}}}