{"id": "1503.04333", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Mar-2015", "title": "Dynamic Move Tables and Long Branches with Backtracking in Computer Chess", "abstract": "the idea of dynamic move chains has been described in a preceding paper [ 6 ]. it allows the search tree to be forward - pruned, which is known locally to be dangerous, because that can remove important topological moves which effectively would only be evaluated through a more exhaustive search process. this paper has added to the forward - pruning technique, through the use of'computational move tables'that can act in the same abstract way as transposition tables, but for moves than not positions.. they use an efficient memory structure and have put the design into the context of short or long - term memories. these can allow the search to be broadened, making it more reliable and are relatively independent, allowing some configuration as to how much to future use. it has advanced upon some of the future work theory of the earlier paper and made conclusions more explicit where logical plans or more knowledge - based approaches might be applied.", "histories": [["v1", "Sat, 14 Mar 2015 18:47:07 GMT  (449kb)", "http://arxiv.org/abs/1503.04333v1", null], ["v2", "Sun, 28 Jun 2015 14:23:20 GMT  (480kb)", "http://arxiv.org/abs/1503.04333v2", null], ["v3", "Tue, 16 May 2017 12:11:10 GMT  (760kb)", "http://arxiv.org/abs/1503.04333v3", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["kieran greer"], "accepted": false, "id": "1503.04333"}, "pdf": {"name": "1503.04333.pdf", "metadata": {"source": "CRF", "title": "Dynamic Move Chains and Move Tables in Computer Chess", "authors": ["Kieran Greer"], "emails": [], "sections": [{"heading": null, "text": "the search tree to be forward-pruned, which is known to be dangerous, because that can remove important moves which would only be evaluated through a more exhaustive search process. This paper has added to the forward-pruning technique, through the use of \u2018Move Tables\u2019 that can act in the same way as Transposition Tables, but for moves not positions. They use an efficient memory structure and have put the design into the context of short or long-term memories. These can allow the search to be broadened, making it more reliable and are relatively independent, allowing some configuration as to how much to use. It has advanced some of the future work theory of the earlier paper and made more explicit where logical plans or more knowledge-based approaches might be applied.\nIndex Terms\u2014 Move table, dynamic move sequence, tree searching, memory structure, knowledge."}, {"heading": "1 Introduction", "text": "The idea of dynamic move chains has been described in a preceding paper [6]. It incorporates the idea of forward-pruning the search tree, which is known to be dangerous, because it can remove important moves that would only be evaluated through a more exhaustive search process. The amount of knowledge that the chess program contains is still limited and so it must evaluate many more positions to produce reliable results. Even if evolutionary methods or machine learning is used to generate the evaluation function [5], the understanding level is still very shallow, maybe not more than a set of weight values. The computer program could therefore still be helped by a friendlier framework for generating knowledge. The intention of dynamic move chains is to store sequences of moves, rather than positions with evaluations. The move sequences can then be tried in any relevant position, where the fact that positions vary only slightly from one ply to the next is important. This means that a move sequence that gets stored has a higher probability of being relevant to the next position as well, and so on. The sequences are stored in lists\ncalled chains, that might spawn tree-like structures, but in practice so far, are mostly single moves. So this immediate evaluation result can be used to radically prune the search tree.\nAs a move chain is created from a cut-off move sequence, it does represent the better moves in a position. It is however very dynamic, constantly changing to the new circumstance that is hopefully the most relevant. If thinking about the human process, then this type of immediate situation is very relevant, but we also store all of these situations into a longer-term memory that is built-up more slowly. When we are faced with an immediate situation, we can still retrieve from the long-term memory helpful advice for what to do. It happens to be the case that the move chains can be used to build up a type of longer-term memory for the computer program. It is similar to transposition tables, but as described in the following sections, stores move sequences and not positions. This is possibly just completing the move chains idea that was reported previously and can give the search process more reliability or stability over the more radical forward-pruning technique.\nThe rest of the paper is structured as follows: section 2 gives a recap of the dynamic move sequences. Section 3 notes that same related work as the earlier paper. Section 4 describes the new Move Tables idea, while section 5 gives some results of using it. Section 6 gives a discussion, including where more knowledge-based approaches might benefit from the new structure, while section 7 gives some conclusions on the work."}, {"heading": "2 Dynamic Move Chains", "text": "Dynamic move chains [6] can be created from the cut-off move sequences of the search process. A cut-off is generated when a move sequence is found to refute a particular position and means that further search of the position is not required. This sequence can then be stored, retrieved and used to replace a full search, the next time that it is valid. Even very small changes in a position however can produce very different evaluations and so it is not possible to give definitive statements based on this type of move sequence alone. The move sequence must be played and re-evaluated again in any position that it is applied to, but the fact that positions vary only slightly from one ply to the next helps to ensure that\nthe move sequence might still be relevant. If it is found to be unreliable, it can simply be ignored and the next cut-off might produce a completely different move sequence to be played again, for example.\nThe algorithm for the dynamic move chains is also provided in the paper [6], where the new Move Tables search part would be placed at the top. The same move sequence can be stored in a more permanent structure that might be compared to a longer-term memory, for example. This structure can be built around piece types, where each piece type can be represented by a board-sized array. A weight value is incremented if a move is added and decremented if a move is not used. If the weight exceeds a threshold, then the move sequence can be retrieved and tried in the position. It is even possible to try only a particular number of stored moves, making it configurable. This is described further in section 4, but the addition to the algorithm might look like:\nSo a standard search can be performed to look at the move table paths. This can include the forward pruning cut-offs, for example, but if the number of move table paths is always played, then at least this number of first moves is explored from the position, plus then any additional other ones. This should give added stability and reliability about the returned evaluation."}, {"heading": "3 Related Work", "text": "This paper is a follow on from the earlier paper [6] that describes the new forward-pruning method in detail. It therefore does not have any new theory outside of the earlier work, where related research would still be the original Chessmaps Heuristic paper [7], the Killer Heuristic [1], the History Heuristic or Transposition Tables [8][9] for example. As described in section 6.1 however, Botvinnik\u2019s knowledge-based approaches [2][3] might now be relevant."}, {"heading": "4 Move Tables", "text": "The Move Tables are intended to replace what was previously Transposition Tables. They have been given this name so as not to confuse the idea of storing a move with storing a position. They can be considered as a long-term memory of the chess game that can span the whole game and not just a single move. This is to complement the immediate effect of the current move chains [6] produced from the cut-offs. They have some advantages and some disadvantages over Transposition Tables. For one thing, they can be encapsulated in an array that is the size of a board. They can also be stored for each piece type, for both colours requiring a total of 12 tables, but this is still a relatively small amount of memory compared to Transposition Tables. The enhancement of the table then, is paths of moves that grow from them and would also link from one table to another one. Figure 2 is an example of what the move tables might look like.\nThe large squares represent the move tables for each piece type and can literally be only 64 elements in size. They then also store any number of links between themselves. The smaller squares represent the move sequence that has just been added, resulting in incrementing those related weight values only. Consider a cut-off that has resulted in a move sequence such as: WPe2-e4, BPe7-e5, WNg1-f3: This would firstly be stored as the next move chain sequence, which is currently like a short-term memory that gets used immediately but is also changed immediately. It is then also used to update the move tables. Both the \u2018from\u2019 and \u2018to\u2019 move squares can be updated, where the related weight value can be incremented. All other moves can have the weight value decremented. There can also be a threshold value, where the weight must be above that for the move to be considered. There can also be links between the tables, where the move WPe2-e4 is stored in the e2 square that then links to Black\u2019s Pawn\u2019s table, to the e7 square. That then links to White\u2019s Knight\u2019s table, to the g1 square, and so on. Any move sequence that is returned can also be checked for legality in the position as well as weight value. As written in section 2, a typical minimised search maybe has a branching factor of only 6. The Move Tables might return more potential moves than this, so they need to be filtered again, to keep only the top \u2018x\u2019 number. But this can be set to anything and therefore tailored to the particular program that is using it. Note that the move table is not reset after each move. The next search process will add to it or modify it further, but still retain the information of the earlier searches."}, {"heading": "4.1 Best Squares and Important Squares", "text": "These move tables then produce a pattern of what the best moves for each piece type is. This could be very useful information as this type of view could provide a basis for some level of knowledge-based reasoning. It is also useful that it can be considered individually for each piece. The Chessmaps program was built from the idea of square control [7], which is central to generating the move ordering for the computer program. The new Move Tables also generate this type of information, but for pieces and not positions. It might even be used without square control, which is inefficient to calculate, whereas the tables are very quick. As it is always part of the Chessmaps heuristic however, square control will always be used as part of this research project. If trying to derive some form of knowledge from the\nmove tables, then looking at the best squares only might not be the most beneficial. Figure 3 shows the Queen and Bishop move tables for the indicated position, with only the best and positive weights displayed. It clearly agrees with that position, where the best moves for White indicate to attack Black\u2019s weakened King\u2019s side. The weighted squares however, only relate to two specific moves, where negative weight values are not displayed and this might make the table a bit sparse. If there are several moves from a square, for example, then if one of them is the best, the others will have their weight values decremented and might become very small, or they might mutually decrement each other.\nIn Figure 4 however, the accumulated weight values for all of the stored moves for the White Queen are displayed. Note that the accumulated values have made every square negative, apart from the squares with the value of 0. These are squares that no moves were stored for, whereas, even if the values are negative, those squares have been very actively considered and are therefore important. It is also interesting that the squares with the largest negative values relate to the best move for the Queen as well, shown in Figure 3. So there were many considerations around those squares and one idea might be to take the absolute value of the accumulated weight values to represent a square\u2019s \u2018importance\u2019 for a piece and the best weight value(s) to represent the \u2018best\u2019 square(s). An important square can then possibly be given priority as part of a plan, for example. To illustrate this, the\nsecond diagram of Figure 4 has coloured in the table, using the absolute weight values only. The most important squares are coloured red; then orange, yellow, green, light blue and dark blue is the least important. White squares should maybe not be considered at all."}, {"heading": "5 Testing", "text": "The chess-playing program itself and the test program are both written in the C# .Net language. Two types of test have been carried out. The first is simply some 5-minute games against the standard Chessmaps Heuristic, so show that using Move Tables with Dynamic Move Chains does not have a detrimental effect in real play. For this, the number of table moves to search first was set to a maximum of 4. A random opening for each game would be selected and there was also iterative deepening with a minimal window. The new Dynamic Move Chains with Move Tables performed well enough against the standard Chessmaps Heuristic with Transposition Tables. In ten 5-minute games, it won 7-3.\nTo see how adding the move tables changes the search size, tests adding 1, 2 and 4 moves to the start of the Move Chains search process was measured. The paper [7] shows how the forward pruning approach of using dynamic move chains by itself, can reduce the search by as much as 99% more than a standard one and so there is a lot of scope for trying to\nbroaden the search process by adding extra knowledge or moves. Table 1 gives the results of the relative search sizes for dynamic move chains with or without the additional move tables. This was measured over a full game containing 98 separate positions to a depth of 5 ply. The results are for the negamax \u03b1-\u03b2 search stage only and show the number of times the search size is less rather than the reduction percentage. Note that this result does not measure move quality, only the search reduction.\nIt is interesting that adding 1 single additional move dramatically increases the search size (98%), but adding more than 1 move does not have the same increase effect. So if using the forward pruning move chains by itself, it searches in effect, an average branching factor of 3-4. Then forcing at least 1 additional move, increases this to 6-7, which is the standard search size. Forcing more than 1 additional move does not have the same effect. So further down the search, where all of the cut-off techniques are still used, the new additions must be compensated in some way, possibly by adding accuracy to the move ordering. Another stat here suggests that move tables are used maybe only 30% of the time, as part of the \u03b1-\u03b2 search, or not used 70% of the time, when the dynamic cut-offs can still occur. But this is for a new table. If it has built up a picture from earlier searches, then it would probably be used more than that, but these are only initial results and usually, the move sequence was of length 1 as well. In practical terms, this would mean that the narrower search can search deeper, but might miss more moves than the broader and shallower one. An ideal balance of both will produce the best search result. Some games between dynamic move chains, one with and one without the move tables, was not conclusive."}, {"heading": "6 Discussion", "text": "Move Tables are similar to Transposition Tables, except that they store move sequences and not position evaluations. They might be thought of as completing the solution to using Move Chains, suggested in [6]. It can be used in any position where it is relevant and complements any immediate cut-off situation presented by a single move chain. The earlier paper [6] also suggested future work that might be tried, along the lines of adding more knowledge and some form of narrow evolutionary search. This even went back to the very beginning and the knowledge-based feature extraction processes. This new process does not solve that problem specifically, but it does provide some more information that can realistically be used to help with the knowledge-based approach. As it has been extracted from the search process, it must be considered as reliable, so the only problem is how to interpret it.\nOne nice thing is that it would be possible to retrieve any number of moves from the tables and use them in a relatively independent way. The number retrieved could even be changed by the program. Or the pattern that each table produces can be studied, to try to determine key squares, for example. At the very least, they give added information about the relative positions that a knowledge-based approach might be able to use. The earlier paper also wrote about tactical chunks, instead of the more common knowledge-based ones [4]. If there are weight concentrations in a move table, then the related position could be looked at to see what pieces or piece formations were present. Or if two or more move tables intersect somewhere, it might represent an important board feature. This could simply be used to re-order all moves to that particular area, or it might help with creating these knowledge or tactical chunks. The chunks however would then need to be made part of a plan and not one that the search process would naturally choose. It would need to change the natural search process in some way, maybe by re-ordering moves. However, if it is automatically created, then it is more in sync with the evaluation function that created it, rather than an expert saying one thing and the computer program saying another thing."}, {"heading": "6.1 Botvinnik\u2019s Computer Chess Theory", "text": "The former World Champion Botvinnik wrote a computer chess book [3] and program (Pioneer) when the chess programs were built on the theories of logic and knowledge. As\ncomputer speeds improved, the statistical brute-force approaches took over and are now standard. The expert logician suggested in his book, to measure how many moves it might take for a piece to move from where it is to where it should be. This requires specific knowledge about the position, but is a bit like narrow sequences that need to be incorporated into a main search process. This more specific knowledge represents a particular plan in the position, but if it cannot be built from a rich knowledge-base, then an experience-based approach could help to generate some low-level knowledge to start with. Looking at the patterns in each move table shows the squares that the search process has evaluated as important for each piece. Therefore some counting measure of how to move between them could be considered, in what would be a more logical and knowledge-based approach. The chess program is also described in [2], where the following quote from \u2018The Tale of a Small Tree\u2019 chapter sums up some of the relevant philosophy:\n\u2018Thus, during a game a player analyses the movements of a limited number of pieces on a limited part of the board, and analyses the movements of only those pieces which come directly into collision, and only on those squares where collisions are possible. In other words, he examines only those pieces which interact with the enemy pieces, and only those squares where this interaction is possible. But how can one check that these pieces and these squares have been correctly chosen? \u2026\u2019\nSo the move tables can maybe produce a map that can be combined or compared and show more easily what the squares or pieces might be. While a human player can simply see that, it might not be as obvious to the chess computer program. So some more elements could be in place for the knowledge-based approach now, but it is also clear that a lot more work is still required."}, {"heading": "7 Conclusions", "text": "This paper has added to the forward-pruning technique of Dynamic Move Chains, through the use of Move Tables that can act in the same way as Transposition Tables, but for moves not positions. They use an efficient memory structure and have put the design into the context of short or long-term memories. The dynamic move chains cause an immediate\nreaction, whereas the move tables build up more slowly and can be used at any time. They store a more permanent type of knowledge that can represent the whole chess game and might be compared to a long-term memory. These can allow the search to be broadened, making it more reliable and are relatively independent, allowing some configuration as to how much to use. It has advanced some of the future work theory of the earlier paper [6] and made more explicit where logical plans or more knowledge-based approaches might be tried."}, {"heading": "8 References", "text": "[1] Birmingham, J. and Kent, P. (1977). Tree searching and tree pruning techniques, Advances in\nComputer Chess, Edinburgh University Press, Ed. Clarke, M.R.B., pp. 89-107.\n[2] Botvinnik, M.M. (1981). Selected Games 1967 \u2013 1970, Pergamon Russian Chess Series, Pergamon\nPress, translated by K.P.Neat.\n[3] Botvinnik, M.M. (1970). Computers, Chess, and long range planning, New York: Springer-Verlag. [4] F\u00fcrnkranz, J., (1995), Machine Learning in Computer Chess: The Next Generation, ICCA Journal,\nVol. 19, No. 3, pp. 147-161.\n[5] F\u00fcrnkranz, J. (2007). Recent advances in machine learning and game playing. OGAI Journal, Vol.\n26, No. 2. Special Issue on Computer Game Playing.\n[6] Greer, K. (2013). Tree Pruning for New Search Techniques in Computer Games, Advances in\nArtificial Intelligence, Vol. 2013, Article ID 357068, 9 pages. doi:10.1155/2013/357068, Hindawi.\n[7] Greer, K., (2000), Computer Chess Move Ordering Schemes Using Move Influence, Artificial\nIntelligence Journal, Vol. 120, No. 2, July, pp. 235-250.\n[8] Schaeffer J., (1989), The History Heuristic and other Alpha-Beta Search enhancements in\nPractice, IEEE Transactions on Pattern Analysis and Machine Intelligence, Vol. 11, No. 11.\n[9] Schaeffer J., and Plaat A., (1996), New Advances in Alpha-Beta Searching, Proceedings of the\n25th Computer Science Conference."}], "references": [{"title": "Tree searching and tree pruning techniques, Advances in Computer", "author": ["J. Birmingham", "P. Kent"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1977}, {"title": "Pergamon Russian Chess Series, Pergamon Press, translated by K.P.Neat", "author": ["M.M. Botvinnik"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1981}, {"title": "Computers, Chess, and long range planning, New York: Springer-Verlag", "author": ["M.M. Botvinnik"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1970}, {"title": "Machine Learning in Computer Chess: The Next Generation", "author": ["J. F\u00fcrnkranz"], "venue": "ICCA Journal,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1995}, {"title": "Recent advances in machine learning and game playing", "author": ["J. F\u00fcrnkranz"], "venue": "OGAI Journal,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}, {"title": "Tree Pruning for New Search Techniques in Computer Games", "author": ["K. Greer"], "venue": "Advances in Artificial Intelligence,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Computer Chess Move Ordering Schemes Using Move Influence", "author": ["K. Greer"], "venue": "Artificial Intelligence Journal,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2000}, {"title": "The History Heuristic and other Alpha-Beta Search enhancements in Practice", "author": ["J. Schaeffer"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1989}, {"title": "New Advances in Alpha-Beta Searching", "author": ["J. Schaeffer", "A. Plaat"], "venue": "Proceedings of the 25th Computer Science Conference", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1996}], "referenceMentions": [{"referenceID": 5, "context": "Abstract\u2014The idea of dynamic move chains has been described in a preceding paper [6].", "startOffset": 81, "endOffset": 84}, {"referenceID": 5, "context": "The idea of dynamic move chains has been described in a preceding paper [6].", "startOffset": 72, "endOffset": 75}, {"referenceID": 4, "context": "Even if evolutionary methods or machine learning is used to generate the evaluation function [5], the understanding level is still very shallow, maybe not more than a set of weight values.", "startOffset": 93, "endOffset": 96}, {"referenceID": 5, "context": "Dynamic move chains [6] can be created from the cut-off move sequences of the search process.", "startOffset": 20, "endOffset": 23}, {"referenceID": 5, "context": "The algorithm for the dynamic move chains is also provided in the paper [6], where the new Move Tables search part would be placed at the top.", "startOffset": 72, "endOffset": 75}, {"referenceID": 5, "context": "Addition to the algorithm of [6], for where the Move Tables can be used.", "startOffset": 29, "endOffset": 32}, {"referenceID": 5, "context": "This paper is a follow on from the earlier paper [6] that describes the new forward-pruning method in detail.", "startOffset": 49, "endOffset": 52}, {"referenceID": 6, "context": "It therefore does not have any new theory outside of the earlier work, where related research would still be the original Chessmaps Heuristic paper [7], the Killer Heuristic [1], the History Heuristic or Transposition Tables [8][9] for example.", "startOffset": 148, "endOffset": 151}, {"referenceID": 0, "context": "It therefore does not have any new theory outside of the earlier work, where related research would still be the original Chessmaps Heuristic paper [7], the Killer Heuristic [1], the History Heuristic or Transposition Tables [8][9] for example.", "startOffset": 174, "endOffset": 177}, {"referenceID": 7, "context": "It therefore does not have any new theory outside of the earlier work, where related research would still be the original Chessmaps Heuristic paper [7], the Killer Heuristic [1], the History Heuristic or Transposition Tables [8][9] for example.", "startOffset": 225, "endOffset": 228}, {"referenceID": 8, "context": "It therefore does not have any new theory outside of the earlier work, where related research would still be the original Chessmaps Heuristic paper [7], the Killer Heuristic [1], the History Heuristic or Transposition Tables [8][9] for example.", "startOffset": 228, "endOffset": 231}, {"referenceID": 1, "context": "1 however, Botvinnik\u2019s knowledge-based approaches [2][3] might now be relevant.", "startOffset": 50, "endOffset": 53}, {"referenceID": 2, "context": "1 however, Botvinnik\u2019s knowledge-based approaches [2][3] might now be relevant.", "startOffset": 53, "endOffset": 56}, {"referenceID": 5, "context": "This is to complement the immediate effect of the current move chains [6] produced from the cut-offs.", "startOffset": 70, "endOffset": 73}, {"referenceID": 6, "context": "The Chessmaps program was built from the idea of square control [7], which is central to generating the move ordering for the computer program.", "startOffset": 64, "endOffset": 67}, {"referenceID": 6, "context": "The paper [7] shows how the", "startOffset": 10, "endOffset": 13}, {"referenceID": 5, "context": "They might be thought of as completing the solution to using Move Chains, suggested in [6].", "startOffset": 87, "endOffset": 90}, {"referenceID": 5, "context": "The earlier paper [6] also suggested future work that might be tried, along the lines of adding more knowledge and some form of narrow evolutionary search.", "startOffset": 18, "endOffset": 21}, {"referenceID": 3, "context": "The earlier paper also wrote about tactical chunks, instead of the more common knowledge-based ones [4].", "startOffset": 100, "endOffset": 103}, {"referenceID": 2, "context": "The former World Champion Botvinnik wrote a computer chess book [3] and program (Pioneer) when the chess programs were built on the theories of logic and knowledge.", "startOffset": 64, "endOffset": 67}, {"referenceID": 1, "context": "The chess program is also described in [2], where the following quote from \u2018The Tale of a Small Tree\u2019 chapter sums up some of the relevant philosophy:", "startOffset": 39, "endOffset": 42}, {"referenceID": 5, "context": "It has advanced some of the future work theory of the earlier paper [6] and made more explicit where logical plans or more knowledge-based approaches might be tried.", "startOffset": 68, "endOffset": 71}], "year": 2015, "abstractText": "The idea of dynamic move chains has been described in a preceding paper [6]. It allows the search tree to be forward-pruned, which is known to be dangerous, because that can remove important moves which would only be evaluated through a more exhaustive search process. This paper has added to the forward-pruning technique, through the use of \u2018Move Tables\u2019 that can act in the same way as Transposition Tables, but for moves not positions. They use an efficient memory structure and have put the design into the context of short or long-term memories. These can allow the search to be broadened, making it more reliable and are relatively independent, allowing some configuration as to how much to use. It has advanced some of the future work theory of the earlier paper and made more explicit where logical plans or more knowledge-based approaches might be applied.", "creator": "Microsoft\u00ae Word 2010"}}}