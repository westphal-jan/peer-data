{"id": "1505.03540", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-May-2015", "title": "Brain Tumor Segmentation with Deep Neural Networks", "abstract": "in this paper, we present completely a fully automatic brain tumor segmentation method based on deep neural networks ( dnns ). the proposed networks are tailored to glioblastomas ( both low and high grade ) pictured in mr scans images. by their very nature, these three tumors can appear anywhere in the brain tumor and to have demonstrated almost any kind of shape, size, and contrast. these reasons motivate our exploration of a machine learning solution optimization that exploits a flexible, high contrast capacity dnn while being extremely efficient. here, we give all a description picture of progressively different model choices that we've constantly found to be necessary for obtaining competitive performance. we cannot explore in particular different architectures based on specialised convolutional neural networks ( cnn ), usually i. e. dnns specifically adapted to image data.", "histories": [["v1", "Wed, 13 May 2015 20:06:21 GMT  (949kb,D)", "http://arxiv.org/abs/1505.03540v1", null], ["v2", "Mon, 5 Oct 2015 17:37:02 GMT  (1683kb,D)", "http://arxiv.org/abs/1505.03540v2", null], ["v3", "Fri, 20 May 2016 06:30:23 GMT  (2872kb,D)", "http://arxiv.org/abs/1505.03540v3", null]], "reviews": [], "SUBJECTS": "cs.CV cs.AI", "authors": ["mohammad havaei", "axel davy", "david warde-farley", "antoine biard", "aaron courville", "yoshua bengio", "chris pal", "pierre-marc jodoin", "hugo larochelle"], "accepted": false, "id": "1505.03540"}, "pdf": {"name": "1505.03540.pdf", "metadata": {"source": "CRF", "title": "Brain Tumor Segmentation with Deep Neural Networks", "authors": ["Mohammad Havaei", "Axel Davy", "David Warde-Farley", "Antoine Biard", "Aaron Courville", "Yoshua Bengio", "Chris Pal", "Pierre-Marc Jodoin", "Hugo Larochelle"], "emails": [], "sections": [{"heading": null, "text": "We present a novel CNN architecture which differs from those traditionally used in computer vision. Our CNN exploits both local features as well as more global contextual features simultaneously. Also, different from most traditional uses of CNNs, our networks use a final layer that is a convolutional implementation of a fully connected layer which allows a 40 fold speed up. We also describe a 2-phase training procedure that allows us to tackle difficulties related to the imbalance of tumor labels. Finally, we explore a cascade architecture in which\nar X\niv :1\n50 5.\n03 54\n0v 1\n[ cs\nthe output of a basic CNN is treated as an additional source of information for a subsequent CNN. Results reported on the 2013 BRATS test dataset reveal that our architecture improves over the currently published state-of-the-art while being over 30 times faster."}, {"heading": "1 Introduction", "text": "In the United States alone, it is estimated that 23,000 new cases of brain cancer will be diagnosed in 20151. While gliomas are the most common brain tumors, they can be less aggressive (i.e. low grade) in a patient with a life expectancy of several years, or more aggressive (i.e. high grade) in a patient with a life expectancy of at most 2 years.\nAlthough surgery is the most common treatment for brain tumors, radiation and chemotherapy may be used to slow the growth of tumors that cannot be physically removed. Magnetic resonance imaging (MRI) provides detailed images of the brain, and is one of the most common tests used to diagnose brain tumors. All the more, brain tumor segmentation from MR images can have great impact for improved diagnostics, growth rate prediction and treatment planning.\nWhile some tumors such as meningiomas can be easily segmented, others like gliomas and glioblastomas are much more difficult to localize. These tumors (together with their surrounding edema) are often diffused, poorly contrasted, and extend tentacle-like structures that make them difficult to segment. Another fundamental difficulty with segmenting brain tumors is that they can appear anywhere in the brain, in almost any shape and size. Furthermore, unlike images derived from X-ray computed tomography (CT) scans, the scale of voxel values in MR images is not standardized. Depending on the type of MR machine used (1.5, 3 or 7 tesla) and the acquisition protocol (field of view value, voxel resolution, gradient strength, b0 value, etc.), the same tumorous cells may end up having drastically different grayscale values when pictured in different hospitals.\nHealthy brains are typically made of 3 types of tissues: the white matter, the gray matter, and the cerebrospinal fluid. The goal of brain tumor segmentation is to detect the location and extension of the tumor regions, namely active tumorous tissue (vascularized or not), necrotic tissue, and edema (swelling near the tumor). This is done by identifying abnormal areas\n1cancer.org\nwhen compared to normal tissue. Since glioblastomas are infiltrative tumors, their borders are often fuzzy and hard to distinguish from healthy tissues. As a solution, more than one MRI modality is often employed, e.g. T1 (spinlattice relaxation), T1-contrasted (T1C), T2 (spin-spin relaxation), proton density (PD) contrast imaging, diffusion MRI (dMRI), and fluid attenuation inversion recovery (FLAIR) pulse sequences. The contrast between these modalities gives almost a unique signature to each tissue type.\nAlthough many attempts have been made at devising computational methods for brain tumor segmentation, most are based on conventional machine learning methods which use hand-designed features typical in computer vision applications such as image gradients, Gabor filters, Local Binary Patterns (LBP) and Histogram of oriented Gradients (HoG). One difficulty with methods based on hand designed features is that they often require the computation of a large number of features in order to be accurate when used with many traditional machine learning techniques. This can make them slow to compute and expensive memory-wise. More efficient techniques employ lower numbers of features, using dimensionality reduction or feature selection methods, but the reduction in the number of features is often at the cost of reduced accuracy. Such methods have proven somewhat successful in previous brain tumor segmentation challenges [32]. However, by their nature, many hand engineered features exploit only very generic edge-related information, with no specific adaptation to the domain of brain tumors. Many traditional image features have been developed through focusing on applications involving traditional photography (ex. histograms of gradients), through inspiration and insight about the human visual processing system (ex. edge filters) or through mathematical insights (ex. wavelets). Ideally, one would like to have features that are composed and refined into higher-level, task-adapted representations. Unfortunately, designing such features manually is difficult, especially when specialized medical imagery is to be used. Consequently, such representations have remained elusive.\nAn alternative approach for designing task-adapted feature representations is to learn a hierarchy of increasingly complex features directly from in-domain data. Deep neural networks have been shown to excel at learning such feature hierarchies [8]. In this work, we apply this approach to learn feature hierarchies adapted specifically to the task of brain tumor segmentation that combine information across MRI modalities.\nSpecifically, we investigate several choices for training Convolutional Neural Networks (CNNs), which are Deep Neural Networks (DNNs) adapted to\nimage data. We report their advantages, disadvantages and performance using well established metrics. Although CNNs first appeared over two decades ago [29], they have recently become a mainstay of the computer vision community due to their record-shattering performance in the ImageNet LargeScale Visual Recognition Challenge [27]. While CNNs have also been successfully applied to segmentation problems [1, 31, 21], most of the previous work has focused on non-medical tasks and many involve architectures that are not well suited to medical imagery or brain tumor segmentation in particular.\nIn this paper, we propose a number of specific CNN architectures for tackling brain tumor segmentation. Our architectures exploit the most recent advances in CNN design and training techniques, such as Maxout [17] hidden units and Dropout [41] regularization. We also investigate several architectures which take into account both the local shape of tumors as well as their context.\nOne problem with many machine learning methods is that they perform pixel classification without taking into account the local dependencies of labels (i.e. segmentation labels are conditionally independent given the input image). To account for this, one can employ structured output methods such as conditional random fields (CRFs), for which inference can be computationally expensive. Alternatively, one can model label dependencies by considering the pixel-wise probability estimates of an initial CNN as additional input to certain layers of a second DNN, forming a cascaded architecture. Since convolutions are efficient operations, this approach can be significantly faster than implementing a CRF.\nWe focus our experimental analysis on the fully-annotated MICCAI brain tumor segmentation (BRATS) challenge 2013 dataset [15] using the well defined training and testing splits, thereby allowing us to compare directly and quantitatively to a wide variety of other methods.\nOur contributions in this work are four fold:\n1. We propose a fully automatic method with results currently ranked second on the BRATS 2013 scoreboard;\n2. To segment a brain, our method takes between 25 seconds and 3 minutes, which is one order of magnitude faster than most state-of-the-art methods.\n3. Our CNN implements a novel two-pathway architecture that learns about the local details of the brain as well as the larger context. We\nalso propose a two-phase training procedure which we have found is critical to deal with imbalanced label distributions. Details of these contributions are described in Sections 3.1.1 and 3.2.\n4. We employ a novel cascaded architecture as an efficient and conceptually clean alternative to popular structured output methods. Details on those models are presented in Section 3.1.2."}, {"heading": "2 Related work", "text": "As noted by Menze et al. [32], the number of publications devoted to automated brain tumor segmentation has grown exponentially in the last several decades. This observation not only underlines the need for automatic brain tumor segmentation tools, but also shows that research in that area is still a work in progress.\nBrain tumor segmentation methods (especially those devoted to MRI) can be roughly divided in two categories: those based on generative models and those based on discriminative models [32, 6, 2].\nGenerative models rely heavily on domain-specific prior knowledge about the appearance of both healthy and tumorous tissues. Tissue appearance is challenging to characterize, and existing generative models usually identify a tumor as being a shape or a signal which deviates from a normal (or average) brain [9]. Typically, these methods rely on anatomical models obtained after aligning the 3D MR image on an atlas or a template computed from several healthy brains [12]. A typical generative model of MR brain images can be found in Prastawa et al. [37]. Given the ICBM brain atlas, the method aligns the brain to the atlas and computes posterior probabilities of healthy tissues (white matter, gray matter and cerebrospinal fluid) . Tumorous regions are then found by localizing voxels whose posterior probability is below a certain threshold. A post-processing step is then applied to ensure good spatial regularity. Prastawa et al. [38] also register brain images onto an atlas in order to get a probability map for abnormalities. An active contour is then initialized on this map and iterated until the change in posterior probability is below a certain threshold. Many other active-contour methods along the same lines have been proposed [25, 10, 36], all of which depend on left-right brain symmetry features and/or alignment-based features. Note that since aligning a brain with a large tumor onto a template can be challenging,\nsome methods perform registration and tumor segmentation at the same time [28, 34].\nOther approaches for brain tumor segmentation employ discriminative models. Unlike generative modeling approaches, these approaches exploit little prior knowledge on the brain\u2019s anatomy and instead rely mostly on the extraction of [a large number of] low level image features, directly modeling the relationship between these features and the label of a given voxel. These features may be raw input pixels values [22, 20], texture features such as Gabor filterbanks [42, 43], or alignment-based features such as inter-image gradient, region shape difference, and symmetry analysis [33]. Classical discriminative learning techniques such as SVMs [4, 40, 30] and decision forests [5] have also been used.\nResults from the 2012, 2013 and 2014 editions of the MICCAI-BRATS Challenge suggest that methods relying on random forests are among the most accurate [32, 19, 26].\nVery recently, preliminary investigations have shown that the use of deep CNNs for brain tumor segmentation makes for a very promising approach (see the BRATS 2014 challenge workshop papers of Davy et al. [11], Zikic et al. [47], Urban et al. [44]). All three methods divide the 3D MR images into 2D [11, 47] or 3D patches [44] and train a CNN to predict its center pixel class. Urban et al. [44] as well as Zikic et al. [47] implemented a fairly common CNN, consisting of a series of convolutional layers, a non-linear activation function between each layer and a softmax output layer. Our work here2 extends our preliminary results presented in Davy et al. [11] using a two-pathway architecture, which we use here as a building block.\nIn computer vision, CNN-based segmentation models have typically been applied to natural scene labeling. For these tasks, the inputs to the model are the RGB channels of a patch from a color image. The work in Pinheiro and Collobert [35] uses a basic CNN to make predictions for each pixel and further improves the predictions by using them as extra information in the input of a second CNN model. Other work [13] involves several distinct CNNs processing the image at different resolutions. The final per-pixel class prediction is made by integrating information learned from all CNNs. To produce a smooth segmentation, these predictions are regularized using a more global\n2 It is important to note that while we did participate in the BRATS 2014 challenge, we could not report complete and fair experiments for it at the time of submitting this manuscript. See Section 5 for a discussion on this point.\nsuperpixel segmentation of the image. Like our work, other recent work has exploited convolution operations in the final layer of a network to extend traditional CNN architectures for semantic scene segmentation [31]. In the medical imaging domain in general there has been comparatively less work using CNNs for segmentation. However, some notable recent work by Huang and Jain [23] has used CNNs to predict the boundaries of neural tissue in electron microscopy images. Here we explore an approach with similarities to the various approaches discussed above, but in the context of brain tumor segmentation."}, {"heading": "3 Our Convolutional Neural Network Approach", "text": "Since the brains in the BRATS dataset lack resolution in the third dimension, we consider performing the segmentation slice by slice from the axial view.\nThus, our model processes sequentially each 2D axial image (slice) where each pixel is associated with different image modalities namely; T1, T2, T1C and FLAIR. Like most CNN-based segmentation models [35, 13], our method predicts the class of a pixel by processing the M \u00d7M patch centered on that pixel. The input X of our CNN model is thus an M \u00d7M 2D patch with several modalities.\nThe main building block used to construct a CNN architecture is the convolutional layer. Several layers can be stacked on top of each other forming a hierarchy of features. Each layer can be understood as extracting features from its preceding layer into the hierarchy to which it is connected.\nA single convolutional layer takes as input a stack of input planes and produces as output some number of output planes or feature maps. Each feature map can be thought of as a topologically arranged map of responses of a particular spatially local non-linear feature extractor (the parameters of which are learned), applied identically to each spatial neighborhood of the input planes in a sliding window fashion. In the case of a first convolutional layer, the individual input planes correspond to different MRI modalities (in typical computer vision applications, the individual input planes correspond to the red, green and blue color channels). In subsequent layers, the input planes typically consist of the feature maps of the previous layer.\nComputing a feature map in a convolutional layer (see Figure 1 ) consists of the following three steps:\n1. Convolution of kernels (filters): Each feature mapOs is associated with\nmax\nMaxout, K = 2 convolution, N = 3\nmax pooling, p = 2\n5x5 4x4\n5x5 7x7\n7x7\nHsZs\nOs\nOs+1\nX\nX\nX\nfeature extractors. These parameters are adapted via stochastic gradient descent on a surrogate loss function related to the misclassification error, with gradients computed efficiently via the backpropagation algorithm [39]. Special attention must be paid to the treatment of border pixels by the convolution operation. Throughout our architecture, we employ the so-called valid-mode convolution, meaning that the filter response is not computed for pixel positions that are less than bN/2c pixels away from the image border. An N \u00d7 N filter convolved with an M \u00d7M input patch will result in a Q\u00d7Q output, where Q = M \u2212N + 1. In Figure 1, M = 7, N = 2 and thus Q = 5. Note that the size (spatial width and height) of the kernels are hyper-parameters that must be specified by the user.\n2. Non-linear activation function: To obtain features that are non-linear transformations of the input, an element-wise non-linearity is applied to the result of the kernel convolution. There are multiple choices for this non-linearity, such as the sigmoid, hyperbolic tangent and rectified linear functions [24], [16]. Recently, Goodfellow et al. [17] proposed a Maxout non-linearity, which has been shown to be particularly effective at modeling useful features. Maxout features are associated with multiple kernels Ws. This implies each Maxout map Zs is associated with K feature maps : {Os,Os+1, ...,Os+K\u22121}. Note that in Figure 1, the Maxout maps are associated with K = 2 feature maps. Maxout features correspond to taking the max over the feature maps O, individually for each spatial position:\nZs,i,j = max {Os,i,j, Os+1,i,j, ..., Os+K\u22121,i,j} (2) where i, j are spatial positions. Maxout features are thus equivalent to using a convex activation function, but whose shape is adaptive and depends on the values taken by the kernels.\n3. Max pooling: This operation consists of taking the maximum feature (neuron) value over sub-windows within each feature map. This can be formalized as follows:\nHs,i,j = max p Zs,i+p,j+p, (3)\nwhere p determines the max pooling window size. The sub-windows can be overlapping or not (Figure 1 shows an overlapping configuration). The max-pooling operation shrinks the size of the feature map. This is controlled by the pooling size p and the stride hyper-parameter, which corresponds to the horizontal and vertical increments at which pooling sub-windows are positioned. Let S be the stride value and Q\u00d7Q be the shape of the feature map before max-pooling. The output of the maxpooling operation would be of size D \u00d7D, where D = (Q\u2212 p)/S + 1. In Figure 1, since Q = 5, p = 2, S = 1, the max-pooling operation results into a D = 4 output feature map. The motivation for this operation is to introduce invariance to local translations. This subsampling procedure has been found beneficial in other applications [27].\nConvolutional networks have the ability to extract a hierarchy of increasingly complex features which makes them very appealing. This is done by treating the output feature maps of a convolutional layer as input channels to the subsequent convolutional layer.\nFrom the neural network perspective, feature maps correspond to a layer of hidden units or neurons. Specifically, each coordinate within a feature map corresponds to an individual neuron, for which the size of its receptive field corresponds to the kernel\u2019s size. A kernel\u2019s value also represents the weights of the connections between the layer\u2019s neurons and the neurons in the previous layer. It is often found in practice that the learned kernels resemble edge detectors, each kernel being tuned to a different spatial frequency, scale and orientation, as is appropriate for the statistics of the training data.\nFinally, to perform a prediction of the segmentation labels, we connect the last convolutional hidden layer to a convolutional output layer followed by a non-linearity (i.e. no pooling is performed). It is necessary to note that, for segmentation purposes, a conventional CNN will not yield an efficient test time since the output layer is typically fully connected. By using a convolution at the end, for which we have an efficient implementation, the prediction at test time for a whole brain will be 45 times faster. The convolution uses as many kernels as there are different segmentation labels (in our case five). Each kernel thus acts as the ultimate detector of tissue from one of the segmentation labels. We use the softmax non-linearity which normalizes the result of the kernel convolutions into a multinomial distribution over the labels. Specifically, let a be the vector of values at a given spatial position, it computes softmax(a) = exp(a)/Z where Z = \u2211 c exp(ac) is a normalization\nconstant. More details will be discussed in Section 4. Noting Y as the segmentation label field over the input patch X, we can thus interpret each spatial position of the convolutional output layer as providing a model for p(Yij|X), where Yij is the label at position i, j. We get the probability of all labels simply by taking the product of each conditional p(Y|X) = \u220f ij p(Yij|X)."}, {"heading": "3.1 The Architectures", "text": "Our description of CNNs so far suggests a simple architecture corresponding to a single stack of several convolutional layers. This configuration is the most commonly implemented architecture in the computer vision literature. However, one could imagine other architectures that might be more appropriate for the task at hand.\nIn this work, we explore a variety of architectures by using the concatenation of feature maps from different layers as another operation when composing CNNs. This operation allows us to construct architectures with multiple computational paths, which can each serve a different purpose. We now describe the two types of architectures that we explore in this work."}, {"heading": "3.1.1 Two-pathway architecture", "text": "This architecture is made of two streams: a pathway with smaller 7 \u00d7 7 receptive fields and another with larger 13\u00d7 13 receptive fields. We refer to these streams as the local pathway and the global pathway, respectively. The motivation for this architectural choice is that we would like the prediction of the label of a pixel to be influenced by two aspects: the visual details of the region around that pixel and its larger \u201ccontext\", i.e. roughly where the patch is in the brain.\nThe full architecture along with its details is illustrated in Figure 2. We refer to this architecture as the TwoPathCNN. To allow for the concatenation of the top hidden layers of both pathways, we use two layers for the local pathway, with 3 \u00d7 3 kernels for the second layer. While this implies that the effective receptive field of features in the top layer of each pathway is the same, the global pathway\u2019s parametrization more directly and flexibly models features in that same area. The concatenation of the feature maps of both pathways is then fed to the output layer."}, {"heading": "3.1.2 Cascaded architectures", "text": "One disadvantage of the CNNs described so far is that they predict each segmentation label separately from each other. This is unlike a large number of segmentation methods in the literature, which often propose a joint model of the segmentation labels, effectively modeling the direct dependencies between spatially close labels. One approach is to define a conditional random field (CRF) over the labels and perform mean-field message passing inference to produce a complete segmentation. In this case, the final label at a given position is effectively influenced by the models beliefs about what the label is in the vicinity of that position.\nOn the other hand, inference in such joint segmentation methods is typically more computationally expensive than a simple feed-forward pass through a CNN. This is an important aspect that one should take into account if automatic brain tumor segmentation is to be used in a day-to-day practice.\nHere, we describe CNN architectures that both exploit the efficiency of CNNs, while also more directly model the dependencies between adjacent labels in the segmentation. The idea is simple: since we\u2019d like the ultimate prediction to be influenced by the model\u2019s beliefs about the value of nearby labels, we propose to feed the output probabilities of a first CNN as additional\ninputs to the layers of a second CNN. Again, we do this by relying on the concatenation of convolutional layers. In this case, we simply concatenate the output layer of the first CNN with any of the layers in the second CNN. Moreover, we use the same two-pathway structure for both CNNs. This effectively corresponds to a cascade of two CNNs, thus we refer to such models as cascaded architectures.\nIn this work, we investigated three cascaded architectures that concatenate the first CNN\u2019s output at different levels of the second CNN:\n\u2022 Input concatenation: In this architecture, we provide the first CNN\u2019s output directly as input to the second CNN. They are thus simply treated as additional image channels of the input patch. The details are illustrated in Figure 3a. We refer to this model as InputCascadeCNN.\n\u2022 Local pathway concatenation: In this architecture, we move up one layer in the local pathway and perform concatenation to its first hidden layer, in the second CNN. The details are illustrated in Figure 3b. We refer to this model as LocalCascadeCNN.\n\u2022 Pre-output concatenation: In this last architecture, we move to the very end of the second CNN and perform concatenation right before its output layer. This architecture is interesting, as it is similar to the computations made by one pass of mean-field inference [45] in a CRF whose pairwise potential functions are the weights in the output kernels. From this view, the output of the first CNN is the first iteration of mean-field, while the output of the second CNN would be the second iteration. The difference with regular mean-field however is that our CNN allows the output at one position to be influenced by its previous value, and the convolutional kernels are not the same in the first and second CNN. The details are illustrated in Figure 3c. We refer to this model as MFCascadeCNN."}, {"heading": "3.2 Training", "text": "Gradient Descent By interpreting the output of the convolutional network as a model for the distribution over segmentation labels, a natural training criteria is to maximize the probability of all labels in our training\nset or, equivalently, to minimize the negative log-probability \u2212 log p(Y|X) =\u2211 ij \u2212 log p(Yij|X) for each labeled brain. To do this, we follow a stochastic gradient descent approach by repeatedly selecting labels Yij at a random subset of patches within each brain, computing the average negative log-probabilities for this mini-batch of patches and performing a gradient descent step on the CNNs parameters (i.e. the kernels at all layers).\nPerforming updates based only on a small subset of patches allows us to avoid having to process a whole brain for each update, while providing reliable enough updates for learning. In practice, we implement this approach by creating a dataset of mini-batches of smaller brain image patches, paired with the corresponding center segmentation label as the target.\nTo further improve optimization, we implemented a so-called momentum strategy which has been shown successful in the past [27]. The idea of momentum is to use a temporally averaged gradient in order to damp the optimization velocity:\nVi+1 = \u00b5 \u2217Vi \u2212 \u03b1 \u2217 \u2207Wi Wi+1 = Wi +Vi+1\nwhere Wi stands for the CNNs parameters at iteration i, \u2207Wi the gradient of the loss function at Wi, V is the integrated velocity initialized at zero, \u03b1 is the learning rate, and \u00b5 the momentum coefficient. We define a schedule for the momentum \u00b5 where the momentum coefficient is gradually increased during training. In our experiments the initial momentum coefficient was set to \u00b5 = 0.5 and the final value was set to \u00b5 = 0.9.\nAlso, the learning rate \u03b1 is decreased by a factor at every epoch. The initial learning rate was set to \u03b1 = 0.005 and the decay factor to 10\u22121.\nTwo-phase training Brain tumor segmentation is a highly data imbalanced problem where the healthy voxels (i.e. label 0) comprise 98% of total voxels. From the remaining 2% pathological voxels, 0.18% belongs to necrosis (label 1), 1.1% to edema (label 2), 0.12% to non-enhanced (label 3) and 0.38% to enhanced tumor (label 4). Selecting patches from the true distribution would cause the model to be overwhelmed by healthy patches and causing problem when training out CNN models. Instead, we initially construct our patches dataset such that all labels are equiprobable. This is what\nwe call the first training phase. Then, in a second phase, we account for the un-balanced nature of the data and re-train only the output layer (i.e. keeping the kernels of all other layers fixed) with a more representative distribution of the labels. This way we get the best of both worlds: most of the capacity (the lower layers) is used in a balanced way to account for the diversity in all of the classes, while the output probabilities are calibrated correctly (thanks to the re-training of the output layer with the natural frequencies of classes in the data).\nRegularization Successful CNNs tend to be models with a lot of capacity, making them vulnerable to overfitting in a setting like ours where there clearly are not enough training examples. Accordingly, we found that regularization is important in obtaining good results. Here, regularization took several forms. First, in all layers, we bounded the absolute value of the kernel weights and applied both L1 and L2 regularization to prevent overfitting. This is done by adding the regularization terms to the negative log-probability (i.e. \u2212 log p(Y|X)+\u03bb1\u2016W\u20161 +\u03bb2\u2016W\u20162, where \u03bb1 and \u03bb2 are coefficients for L1 and L2 regularization terms respectively). We also used a validation set for early stopping, i.e. stop training when the validation performance stopped improving. The validation set was also used to tune the other hyper-parameters of the model.\nMoreover, we used Dropout [41], a recent regularization method that works by stochastically adding noise in the computation of the hidden layers of the CNN. This is done by multiplying each hidden or input unit by 0 (i.e. masking) with a certain probability (e.g. 0.5), independently for each unit and training update. This encourages the neural network to learn features that are useful \u201con their own\", since each unit cannot assume that other units in the same layer won\u2019t be masked as well and co-adapt its behavior. At test time, units are instead multiplied by one minus the probability of being masked. For more details, see Srivastava et al. [41].\nCascaded Architectures To train a cascaded architecture, we start by training the TwoPathCNN with the two phase stochastic gradient descent procedure described previously. Then, we fix the parameters of the TwoPathCNN and include it in the cascaded architecture (be it the InputCascadeCNN, the LocalCascadeCNN, or the MFCascadeCNN) and move to training the remaining parameters using a similar procedure. It\nshould be noticed however that for the spatial size of the first CNN\u2019s output and the layer of the second CNN to match, we must feed to the first CNN a much larger input. Thus, training of the second CNN must be performed on larger patches. For example in the InputCascadeCNN (Figure 3a), the input size to the first model is of size 65\u00d7 65 which results into an output of size 33 \u00d7 33. Only in this case the outputs of the first CNN can be concatenated with the input channels of the second CNN."}, {"heading": "4 Implementation details", "text": "Our implementation is based on the Pylearn2 library [18]. Pylearn2 is an open-source machine learning library specializing in deep learning algorithms. It also supports the use of GPUs, which can greatly accelerate the execution of deep learning algorithms.\nSince CNN\u2019s are able to learn useful features from scratch, we applied only minimal pre-processing. We employed the same pre-processing as Tustison et al., the winner of the 2013 BRATS challenge [32]. The pre-processing follows three steps. First, the 1% highest and lowest intensities are removed. Then, we apply an N4ITK bias correction [3] to T1 and T1C modalities. The data is then normalized within each input channel by subtracting the channel\u2019s mean and dividing by the channel\u2019s standard deviation.\nAs for post-processing, a simple method based on connected components was implemented to remove flat blobs which might appear in the predictions due to bright corners of the brains close to the skull.\nThe hyper-parameters of the different architectures (kernel and max pooling size for each layer) can be seen in Figure 3. Hyper-parameters were tuned using grid search and cross-validation on a validation set (see Bengio [7]). For max pooling, we always use a stride of 1. We observed in practice that max pooling in the global path does not improve accuracy. We also found that adding additional layers to the architectures do not provide any meaningful performance improvement.\nBiases are initialized to zero except for the softmax layer for which we initialized them to the log of the label frequencies. The kernels are randomly initialized from U (\u22120.005, 0.005). Training takes about 3 minutes per epoch for the TwoPathCNN model on an NVIDIA Titan black card.\nAt test time, we run our code on a GPU in order to exploit its computational speed. Moreover, the convolutional nature of the output layer allows\nus to further accelerate computations at test time. This is done by feeding as input a full image and not individual patches. Therefore, convolutions at all layers can be extended to obtain all label probabilities p(Yij|X) for the entire image. With this implementation, we are able to produce a segmentation in 25 seconds per brain on the Titan black card with the TwoPathCNN model. This turns out to be 45 times faster than when we extracted a patch at each pixel and processed them individually for the entire brain.\nPredictions for the MFCascadeCNN model, the LocalCascadeCNN model, and InputCascadeCNN model take on average 1.5 minutes, 1.7 minutes and 3 minutes respectively."}, {"heading": "5 Experiments and Results", "text": "The experiments were carried out on real patient data obtained from the 2013 brain tumor segmentation challenge, as part of the MICCAI conference [15]. It contains 20 brains with high grade and 10 brains with low grade tumors for training and 10 brains with high grade tumors for testing. All brains in the dataset have the same orientation. For each brain there exists 4 modalities, namely T1, T1C, T2 and Flair which are co-registered. The training brains come with groundtruth for which 5 segmentation labels are provided, namely non-tumor, necrosis, edema, non-enhancing tumor and enhancing tumor. Figure 4 shows an example of the data as well as the ground truth.\nPlease note that we could not use the BRATS 2014 dataset due to problems with both the system performing the evaluation and the quality of the labeled data. For these reasons the old BRATS 2014 dataset has been removed from the official website and, at the time of submitting this manuscript, the BRATS website still showed: \u201cFinal data for BRATS 2014 to be released soon\u201d. Furthermore, we have even conducted an experiment where we trained our model with the old 2014 dataset and made predictions on the 2013 test dataset; however, the performance was worse than our results mentioned in this paper. For these reasons, we decided to focus on the BRATS 2013 data.\nAs mentioned in Section 3, we work with 2D slices due to the fact that the MRI volumes in the dataset do not posses an isotropic resolution and the spacing in the third dimension is not consistent across the data. We explored the use of 3D information (by treating the third dimension as extra input channels or by having an architecture which takes orthogonal slices\nfrom each view and makes the prediction on the intersecting center pixel), but that didn\u2019t improve performance and made our method very slow.\nNote that as suggested by Krizhevsky et al. [27], we applied data augmentation by flipping the input images. Unlike what was reported by Zeiler and Fergus [46], it did not improve the overall accuracy of our model.\nQuantitative evaluation of the models performance on the test set is achieved by uploading the segmentation results to the online BRATS evaluation system [14]. The online system provides the quantitative results as follows: The tumor structures are grouped in 3 different tumor regions. This is mainly due to practical clinical applications. As described by Menze et al. [32], tumor regions are defined as:\n1. The complete tumor region (including all four tumor structures).\n2. The core tumor region (including all tumor structures exept \u201cedema\").\n3. The enhancing tumor region (including the \u201cenhanced tumor\" structure).\nFor each tumor region, Dice (identical to F measure), Sensitivity and Specificity are computed as follows :\nDice(P, T ) = |P1 \u2227 T1|\n(|P1|+ |T1|)/2 ,\nSensitivity(P, T ) = |P1 \u2227 T1| |T1| ,\nSpecificity(P, T ) = |P0 \u2227 T0| |T0| ,\nwhere P represents the model predictions and T represents the ground truth labels. We also note as T1 and T0 the subset of voxels predicted as positives and negatives for the tumor region in question. Similarly for P1 and P0. The online evaluation system also provides a ranking for every method submitted for evaluation. This includes methods from the 2013 BRATS challenge published in [32] as well as anonymized unpublished methods for which no reference is available. In this section, we report experimental results for our different CNN architectures.\n5.1 The TwoPathCNN architecture\nAs mentioned previously, unlike conventional CNNs, the TwoPathCNN architecture has two pathways: a \u201clocal\" path focusing on details and a \u201cglobal\" path more focused on the context. To better understand how joint training of the global and local pathways benefits the performance, we report results on each pathway as well as results on averaging the outputs of each pathway when trained separately. Our method also deals with the unbalanced nature of the problem by training in two phases as discussed in Section 3.2. To see the impact of the two phase training, we report results with and without it. We refer to the CNN model consisting of only the local path (i.e. conventional CNN architecture) as LocalPathCNN, the CNN model consisting of only the global path as GlobalPathCNN, the model averaging the outputs of the local and global paths (i.e. LocalPathCNN and GlobalPathCNN) as AverageCNN and the two-pathway CNN architecture as TwoPathCNN. The second training phase is noted by appending \u2018*\u2019 to the architecture name. Since the second phase training has a substantial effect and always improves the performance, we only report results on GlobalPathCNN and AverageCNN with the second phase.\nTable 1 presents the quantitative results of these variations. This table contains results for the TwoPathCNN with one and two training phases, the common single path CNN (i.e. LocalPathCNN) with one and two training phases, the GlobalPathCNN* which is a single path CNN model following the global pathway architecture and the output average of each of the trained single-pathway models (AverageCNN*). Without much surprise, the single path with one training phase CNN was ranked last with the lowest scores on\nalmost every region. Using a second training phase gave a significant boost to that model with a rank that went from 15 to 9. Also, the table shows that joint training of the local and global paths yields better performance compared to when each pathway is trained separately and the outputs are averaged. One likely explanation is that by joint training the local and global paths, the model allows the two pathways to co-adapt. In fact, the AverageCNN* performs worse than the LocalPathCNN* due to the fact that the GlobalPathCNN* performs very badly. The top preforming method in the uncascaded models is the TwoPathCNN* with a rank of 4.\nUnfortunately, visualizing the learned mid/high level features of a CNN is still very much an open research problem. However, we can study the impact these features have on predictions by visualizing the segmentation results of different models. The segmentation results produced by different variations of the basic model can be viewed in Figure 5. As shown in the figure, the two-phase training procedure allows the model to learn from a more realistic distribution of labels and thus removes false positives produced by the model which trains with one training phase. Moreover, by having two pathways, the model can simultaneously learn the global contextual features as well as the local detailed features. This gives the advantage of correcting labels at a global scale as well as recognizing fine details of the tumor at a local scale, yielding a better segmentation as oppose to a single path architecture which results in smoother boundaries. Joint training of the two convolutional pathways and having two training phases achieves better results."}, {"heading": "5.2 Cascaded architectures", "text": "We now discuss our experiments with the three cascaded architectures namely InputCascadeCNN, LocalCascadeCNN and MFCascadeCNN. Table 2 provides the quantitative results for each architecture. Figure 5 also provides visual examples of the segmentation generated by each architecture.\nWe find that the MFCascadeCNN model yields smoother boundaries between classes. We hypothesize that, since the neurons in the softmax output layer are directly connected to the previous outputs within each receptive field, these parameters are more likely to learn that the center pixel label should have a similar label to its surroundings.\nAs for the LocalCascadeCNN architecture, while it resulted in fewer false positives in the complete tumor category, the performance in other categories (i.e. tumor core and enhanced tumor) did not improve.\nOverall, the best performance is reached by the InputCascadeCNN* model. It improves the Dice measure on all tumor regions. With this architecture, we were able to reach the second rank on the BRATS 2013 scoreboard. While MFCascadeCNN*, TwoPathCNN* and LocalCascadeCNN* are all ranked 4, the inner ranking between these three models is noted as 4a, 4b and 4c respectively.\nTable 3 shows how our implemented architectures compare with currently published state-of-the-art methods as mentioned in [32]4. The table shows that InputCascadeCNN* out performs Tustison et al. the winner of the BRATS 2013 challenge and is ranked first in the table. Moreover, Tustison\u2019s\n4Please note that the results mentioned in Table 3 are from methods competing in the BRATS 2013 challenge for which a static table is provided [https://www.virtualskeleton.ch/BRATS/StaticResults2013]. Since then, other methods have been added to the score board but for which no reference is available.\nmethod takes 100 minutes to compute predictions per brain as reported in [32], while the InputCascadeCNN* takes 3 minutes, thanks to the fully convolutional architecture and the GPU implementation, which is over 30 times faster than the winner of the challenge. The TwoPathCNN* has a performance close to the state-of-the-art. However, with a prediction time of 25 seconds, it is over 200 times faster than Tustison\u2019s method. Other top methods in the table are that of Meier et al and Reza et al with processing times of 6 and 90 minutes respectively. Recently Subbanna et al. [43] published competitive results on the BRATS 2013 dataset, reporting dice measures of 0.86, 0.86, 0.77 for Complete, Core and Enhancing tumor regions. Since they do not report Specificity and Sensitivity measures, a completely fair comparison with that method is not possible. However, as mentioned in [43], their method takes 70 minutes to process a subject, which is about 23 times slower than our method.\nRegarding other methods using CNNs, Urban et al. [44] used an average of two 3D convolutional networks with dice measures of 0.87, 0.77, 0.73 for Complete, Core and Enhancing tumor regions on BRATS 2013 test dataset with a prediction time of about 1 minute per model which makes for a total of 2 minutes. Again, since they do not report Specificity and Sensitivity measures, we can not make a full comparison. However, based on their dice scores our TwoPathCNN* more accurate than their model while taking only 25 seconds, which is four times faster. And the InputCascadeCNN* is better or equal in accuracy while having the same processing time. As for [47], they do not report results on BRATS 2013 test dataset. However, their method is very similar to the LocalPathCNN which, according to our experiments, has worse performance."}, {"heading": "6 Conclusion", "text": "In this paper, we presented an automatic brain tumor segmentation method based on deep convolutional neural networks. We considered different architectures and investigated their impact on the performance. Results from the BRATS 2013 online evaluation system confirms that with our best model we managed to improve on the currently published state-of-the-art method both on accuracy and speed as presented in MICCAI 2013. The high performance is achieved with the help of a novel two-pathway architecture (which can model both the local details and global context) as well as modeling local\nlabel dependencies by stacking two CNN\u2019s. Training is based on a two phase procedure, which we\u2019ve found allows us to train CNNs efficiently when the distribution of labels is unbalanced.\nThanks to the convolutional nature of the models and by using an efficient GPU implementation, the resulting segmentation system is very fast. The time needed to segment an entire brain with any of the these CNN architectures varies between 25 seconds and 3 minutes, making them practical segmentation methods."}], "references": [{"title": "Road scene segmentation from a single image", "author": ["Jose M. Alvarez", "Theo Gevers", "Yann LeCun", "Antonio M. Lopez"], "venue": "In Proceedings of the 12th European Conference on Computer Vision - Volume Part VII,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Glioma dynamics and computational models: A review of segmentation, registration, and in silico growth algorithms and their clinical applications", "author": ["E.D. Angelini", "E.O. Clatz", "E. Konukoglu", "L. Capelle", "H. Duffau"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2007}, {"title": "Advanced normalization tools (ants)", "author": ["Brian B Avants", "Nick Tustison", "Gang Song"], "venue": "Insight J,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2009}, {"title": "Fully automatic segmentation of brain tumor images using support vector machine classification in combination with hierarchical conditional random field regularization", "author": ["S. Bauer", "L-P Nolte", "M. Reyes"], "venue": "InMICCAI, volume 6893, pages 354\u2013361,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2011}, {"title": "segmentation of brain tumor images based on integrated hierarchical classification and regularization", "author": ["S. Bauer", "R. Wiest", "M. Reyes"], "venue": "proc of BRATS- MICCAI,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2012}, {"title": "A survey of mri-based medical image analysis for brain tumor studies", "author": ["S. Bauer", "R. Wiest", "L.P. Nolte", "M. Reyes"], "venue": "Physics in medicine and biology, 58 (13):97\u2013129,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2013}, {"title": "Practical recommendations for gradient-based training of deep architectures", "author": ["Yoshua Bengio"], "venue": "In Neural Networks: Tricks of the Trade,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "Representation learning: A review and new perspectives", "author": ["Yoshua Bengio", "Aaron Courville", "Pascal Vincent"], "venue": "Pattern Analysis and Machine Intelligence, IEEE Transactions on,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "Automatic tumor segmentation using knowledge-based clustering", "author": ["M. Clark", "L. Hall", "D. Goldgof", "R.P. Velthuizen", "F. Murtagh", "M.L. Silbiger"], "venue": "IEEE Trans. Med. Imaging, 17(2):187\u2013201,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1998}, {"title": "3d variational brain tumor segmentation using a high dimensional feature set", "author": ["D. Cobzas", "N. Birkbeck", "M. Schmidt", "M. J\u00e4gersand", "A. Murtha"], "venue": "ICCV, pages 1\u20138,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2007}, {"title": "Brain tumor segmentation with deep neural networks", "author": ["A. Davy", "M. Havaei", "D. Warde-Farley", "A. Biard", "L. Tran", "P-M. Jodoin", "A. Courville", "H. Larochelle", "C Pal", "Y. Bengio"], "venue": "proc of BRATS-MICCAI,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2014}, {"title": "Fully automatic brain tumor segmentation from multiple mr sequences using hidden markov fields and variational em", "author": ["S. Doyle", "F. Vasseur", "M. Dojat", "F. Forbes"], "venue": "proc of BRATS-MICCAI,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2013}, {"title": "Learning hierarchical features for scene labeling", "author": ["Clement Farabet", "Camille Couprie", "Laurent Najman", "Yann LeCun"], "venue": "Pattern Analysis and Machine Intelligence, IEEE Transactions on,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1915}, {"title": "Multimodal Brain Tumor Segmentation (BRATS", "author": ["Keyvan Farahani", "Bjoern Menze", "Mauricio Reyes"], "venue": "URL http://martinos.org/qtim/ miccai2013/", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2013}, {"title": "Domain adaptation for large-scale sentiment classification: A deep learning approach", "author": ["Xavier Glorot", "Antoine Bordes", "Yoshua Bengio"], "venue": "In Proceedings of the 28th International Conference on Machine Learning", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2011}, {"title": "Maxout networks", "author": ["I.J. Goodfellow", "D. Warde-Farley", "M. Mirza", "A. Courville", "Y. Bengio"], "venue": "ICML,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2013}, {"title": "Pylearn2: a machine learning research", "author": ["Ian J. Goodfellow", "David Warde-Farley", "Pascal Lamblin", "Vincent Dumoulin", "Mehdi Mirza", "Razvan Pascanu", "James Bergstra", "Fr\u00e9d\u00e9ric Bastien", "Yoshua Bengio"], "venue": "library. arXiv preprint arXiv:1308.4214,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2013}, {"title": "Extremely randomized trees based brain tumor segmentation", "author": ["M. Gotz", "C. Weber", "J. Blocher", "B. Stieltjes", "H-P Meinzer", "K. Maier-Hein"], "venue": "in proc of BRATS Challenge - MICCAI,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2014}, {"title": "Tumor-cut: Segmentation of brain tumors on contrast enhanced mr images for radiosurgery applications", "author": ["A. Hamamci", "N. Kucuk", "K. Karaman", "K. Engin", "G. Unal"], "venue": "IEEE trans. Medical Imaging, 31(3):790\u2013804,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}, {"title": "Simultaneous detection and segmentation", "author": ["Bharath Hariharan", "Pablo Arbel\u00e1ez", "Ross Girshick", "Jitendra Malik"], "venue": "In Computer Vision\u2013ECCV", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2014}, {"title": "Efficient interactive brain tumor segmentation as within-brain knn classification", "author": ["M. Havaei", "P-M Jodoin", "H. Larochelle"], "venue": "International Conference on Pattern Recognition (ICPR),", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2014}, {"title": "Deep and wide multiscale recursive networks for robust image labeling", "author": ["G.B. Huang", "V. Jain"], "venue": "arXiv preprint arXiv:1310.0354,", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2013}, {"title": "What is the best multi-stage architecture for object recognition", "author": ["Kevin Jarrett", "Koray Kavukcuoglu", "M Ranzato", "Yann LeCun"], "venue": "In Computer Vision,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2009}, {"title": "3d brain tumor segmentation in mri using fuzzy classification, symmetry analysis and spatially constrained deformable models", "author": ["H. Khotanlou", "O. Colliot", "J. Atif", "I. Bloch"], "venue": "Fuzzy Sets Syst., 160(10):1457\u20131473,", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2009}, {"title": "ilastik for multi-modal brain tumor segmentation", "author": ["J. Kleesiek", "A. Biller", "G. Urban", "U. Kothe", "M. Bendszus", "F.A. Hamprecht"], "venue": "proc of BRATS-MICCAI,", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2014}, {"title": "ImageNet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G. Hinton"], "venue": "NIPS.", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2012}, {"title": "Multimodal brain tumor image segmentation using glistr", "author": ["D. Kwon", "H. Akbari", "X. Da", "B. Gaonkar", "C. Davatzikos"], "venue": "in proc of BRATS Challenge - MICCAI,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2014}, {"title": "Gradientbased learning applied to document recognition", "author": ["Yann LeCun", "L\u00e9on Bottou", "Yoshua Bengio", "Patrick Haffner"], "venue": "Proceedings of the IEEE,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1998}, {"title": "Segmenting brain tumor with conditional random fields and support vector machines", "author": ["C-\u0307H. Lee", "M. Schmidt", "A. Murtha", "A. Bistritz", "J. S", "R. Greiner"], "venue": "In in Proc of Workshop on Computer Vision for Biomedical Image Applications,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2005}, {"title": "Fully convolutional networks for semantic segmentation", "author": ["Jonathan Long", "Evan Shelhamer", "Trevor Darrell"], "venue": "CVPR (to appear),", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2015}, {"title": "The multimodal brain tumor image segmentation benchmark (brats)", "author": ["B. Menze", "M. Reyes", "K.V. Leemput"], "venue": "IEEE Trans. on Medical Imaging (accepted), September", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2014}, {"title": "Ants and \u00e1rboles", "author": ["C. Durst N.Tustison", "M. Wintermark", "B. Avants"], "venue": "In in proc of BRATS Challenge - MICCAI,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2013}, {"title": "Joint tumor segmentation and dense deformable registration of brain mr images", "author": ["S. Parisot", "H. Duffau", "S. Chemouny", "N. Paragios"], "venue": "MICCAI, volume 7511, pages 651\u2013658,", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2012}, {"title": "Recurrent convolutional neural networks for scene labeling", "author": ["Pedro Pinheiro", "Ronan Collobert"], "venue": "In Proceedings of The 31st International Conference on Machine Learning,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2014}, {"title": "3d variational brain tumor segmentation using dirichlet priors on a clustered feature set", "author": ["K. Popuri", "D. Cobzas", "A. Murtha", "M. J\u00e4gersand"], "venue": "Int. J. Computer Assisted Radiology and Surgery, 7(4):493\u2013506,", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2012}, {"title": "A brain tumor segmentation framework based on outlier detection", "author": ["M. Prastawa", "E. Bullit", "S. Ho", "G. Gerig"], "venue": "Medical Image Anaylsis, 8(3):275\u2013283,", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2004}, {"title": "Robust estimation for brain tumor segmentation. In Medical Image Computing and Computer-Assisted Intervention-MICCAI", "author": ["Marcel Prastawa", "Elizabeth Bullitt", "Sean Ho", "Guido Gerig"], "venue": null, "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2003}, {"title": "Learning representations by back-propagating errors", "author": ["David E Rumelhart", "Geoffrey E Hinton", "Ronald J Williams"], "venue": "Cognitive modeling,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 1988}, {"title": "Segmenting brain tumors using alignment-based features", "author": ["M. Schmidt", "I. Levner", "R. Greiner", "A. Murtha", "A. Bistritz"], "venue": "Int. Conf on Machine Learning and Applications, pages 6\u2013pp,", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2005}, {"title": "Dropout: A simple way to prevent neural networks from overfitting", "author": ["N. Srivastava", "G. Hinton", "A. Krizhevsky", "I. Sutskever", "R. Salakhutdinov"], "venue": "Journal of Machine Learning Research, 15:1929\u20131958,", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2014}, {"title": "Hierarchical probabilistic gabor and mrf segmentation of brain tumours in mri volumes", "author": ["N. Subbanna", "D. Precup", "L. Collins", "T. Arbel"], "venue": "in proc of MICCAI, volume 8149, pages 751\u2013758,", "citeRegEx": "42", "shortCiteRegEx": null, "year": 2013}, {"title": "Iterative multilevel mrf leveraging context and voxel information for brain tumour segmentation in mri", "author": ["N. Subbanna", "D. Precup", "T. Arbel"], "venue": null, "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2014}, {"title": "Multi-modal brain tumor segmentation using deep convolutional neural networks", "author": ["G. Urban", "M. Bendszus", "F. Hamprecht", "J. Kleesiek"], "venue": "proc of BRATS-MICCAI,", "citeRegEx": "44", "shortCiteRegEx": null, "year": 2014}, {"title": "A generalized mean field algorithm for variational inference in exponential families", "author": ["Eric P Xing", "Michael I Jordan", "Stuart Russell"], "venue": "In Proceedings of the Nineteenth conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "45", "shortCiteRegEx": "45", "year": 2002}, {"title": "Visualizing and understanding convolutional networks", "author": ["Matthew D Zeiler", "Rob Fergus"], "venue": "In Computer Vision\u2013ECCV", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 2014}, {"title": "Segmentation of brain tumor tissues with convolutional neural networks", "author": ["D. Zikic", "Y. Ioannou", "M. Brown", "A. Criminisi"], "venue": "proc of BRATS-MICCAI,", "citeRegEx": "47", "shortCiteRegEx": null, "year": 2014}], "referenceMentions": [{"referenceID": 30, "context": "Such methods have proven somewhat successful in previous brain tumor segmentation challenges [32].", "startOffset": 93, "endOffset": 97}, {"referenceID": 7, "context": "Deep neural networks have been shown to excel at learning such feature hierarchies [8].", "startOffset": 83, "endOffset": 86}, {"referenceID": 27, "context": "Although CNNs first appeared over two decades ago [29], they have recently become a mainstay of the computer vision community due to their record-shattering performance in the ImageNet LargeScale Visual Recognition Challenge [27].", "startOffset": 50, "endOffset": 54}, {"referenceID": 25, "context": "Although CNNs first appeared over two decades ago [29], they have recently become a mainstay of the computer vision community due to their record-shattering performance in the ImageNet LargeScale Visual Recognition Challenge [27].", "startOffset": 225, "endOffset": 229}, {"referenceID": 0, "context": "While CNNs have also been successfully applied to segmentation problems [1, 31, 21], most of the previous work has focused on non-medical tasks and many involve architectures that are not well suited to medical imagery or brain tumor segmentation in particular.", "startOffset": 72, "endOffset": 83}, {"referenceID": 29, "context": "While CNNs have also been successfully applied to segmentation problems [1, 31, 21], most of the previous work has focused on non-medical tasks and many involve architectures that are not well suited to medical imagery or brain tumor segmentation in particular.", "startOffset": 72, "endOffset": 83}, {"referenceID": 19, "context": "While CNNs have also been successfully applied to segmentation problems [1, 31, 21], most of the previous work has focused on non-medical tasks and many involve architectures that are not well suited to medical imagery or brain tumor segmentation in particular.", "startOffset": 72, "endOffset": 83}, {"referenceID": 15, "context": "Our architectures exploit the most recent advances in CNN design and training techniques, such as Maxout [17] hidden units and Dropout [41] regularization.", "startOffset": 105, "endOffset": 109}, {"referenceID": 39, "context": "Our architectures exploit the most recent advances in CNN design and training techniques, such as Maxout [17] hidden units and Dropout [41] regularization.", "startOffset": 135, "endOffset": 139}, {"referenceID": 30, "context": "[32], the number of publications devoted to automated brain tumor segmentation has grown exponentially in the last several decades.", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": "Brain tumor segmentation methods (especially those devoted to MRI) can be roughly divided in two categories: those based on generative models and those based on discriminative models [32, 6, 2].", "startOffset": 183, "endOffset": 193}, {"referenceID": 5, "context": "Brain tumor segmentation methods (especially those devoted to MRI) can be roughly divided in two categories: those based on generative models and those based on discriminative models [32, 6, 2].", "startOffset": 183, "endOffset": 193}, {"referenceID": 1, "context": "Brain tumor segmentation methods (especially those devoted to MRI) can be roughly divided in two categories: those based on generative models and those based on discriminative models [32, 6, 2].", "startOffset": 183, "endOffset": 193}, {"referenceID": 8, "context": "Tissue appearance is challenging to characterize, and existing generative models usually identify a tumor as being a shape or a signal which deviates from a normal (or average) brain [9].", "startOffset": 183, "endOffset": 186}, {"referenceID": 11, "context": "Typically, these methods rely on anatomical models obtained after aligning the 3D MR image on an atlas or a template computed from several healthy brains [12].", "startOffset": 154, "endOffset": 158}, {"referenceID": 35, "context": "[37].", "startOffset": 0, "endOffset": 4}, {"referenceID": 36, "context": "[38] also register brain images onto an atlas in order to get a probability map for abnormalities.", "startOffset": 0, "endOffset": 4}, {"referenceID": 23, "context": "Many other active-contour methods along the same lines have been proposed [25, 10, 36], all of which depend on left-right brain symmetry features and/or alignment-based features.", "startOffset": 74, "endOffset": 86}, {"referenceID": 9, "context": "Many other active-contour methods along the same lines have been proposed [25, 10, 36], all of which depend on left-right brain symmetry features and/or alignment-based features.", "startOffset": 74, "endOffset": 86}, {"referenceID": 34, "context": "Many other active-contour methods along the same lines have been proposed [25, 10, 36], all of which depend on left-right brain symmetry features and/or alignment-based features.", "startOffset": 74, "endOffset": 86}, {"referenceID": 26, "context": "some methods perform registration and tumor segmentation at the same time [28, 34].", "startOffset": 74, "endOffset": 82}, {"referenceID": 32, "context": "some methods perform registration and tumor segmentation at the same time [28, 34].", "startOffset": 74, "endOffset": 82}, {"referenceID": 20, "context": "These features may be raw input pixels values [22, 20], texture features such as Gabor filterbanks [42, 43], or alignment-based features such as inter-image gradient, region shape difference, and symmetry analysis [33].", "startOffset": 46, "endOffset": 54}, {"referenceID": 18, "context": "These features may be raw input pixels values [22, 20], texture features such as Gabor filterbanks [42, 43], or alignment-based features such as inter-image gradient, region shape difference, and symmetry analysis [33].", "startOffset": 46, "endOffset": 54}, {"referenceID": 40, "context": "These features may be raw input pixels values [22, 20], texture features such as Gabor filterbanks [42, 43], or alignment-based features such as inter-image gradient, region shape difference, and symmetry analysis [33].", "startOffset": 99, "endOffset": 107}, {"referenceID": 41, "context": "These features may be raw input pixels values [22, 20], texture features such as Gabor filterbanks [42, 43], or alignment-based features such as inter-image gradient, region shape difference, and symmetry analysis [33].", "startOffset": 99, "endOffset": 107}, {"referenceID": 31, "context": "These features may be raw input pixels values [22, 20], texture features such as Gabor filterbanks [42, 43], or alignment-based features such as inter-image gradient, region shape difference, and symmetry analysis [33].", "startOffset": 214, "endOffset": 218}, {"referenceID": 3, "context": "Classical discriminative learning techniques such as SVMs [4, 40, 30] and decision forests [5] have also been used.", "startOffset": 58, "endOffset": 69}, {"referenceID": 38, "context": "Classical discriminative learning techniques such as SVMs [4, 40, 30] and decision forests [5] have also been used.", "startOffset": 58, "endOffset": 69}, {"referenceID": 28, "context": "Classical discriminative learning techniques such as SVMs [4, 40, 30] and decision forests [5] have also been used.", "startOffset": 58, "endOffset": 69}, {"referenceID": 4, "context": "Classical discriminative learning techniques such as SVMs [4, 40, 30] and decision forests [5] have also been used.", "startOffset": 91, "endOffset": 94}, {"referenceID": 30, "context": "Results from the 2012, 2013 and 2014 editions of the MICCAI-BRATS Challenge suggest that methods relying on random forests are among the most accurate [32, 19, 26].", "startOffset": 151, "endOffset": 163}, {"referenceID": 17, "context": "Results from the 2012, 2013 and 2014 editions of the MICCAI-BRATS Challenge suggest that methods relying on random forests are among the most accurate [32, 19, 26].", "startOffset": 151, "endOffset": 163}, {"referenceID": 24, "context": "Results from the 2012, 2013 and 2014 editions of the MICCAI-BRATS Challenge suggest that methods relying on random forests are among the most accurate [32, 19, 26].", "startOffset": 151, "endOffset": 163}, {"referenceID": 10, "context": "[11], Zikic et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 45, "context": "[47], Urban et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 42, "context": "[44]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "All three methods divide the 3D MR images into 2D [11, 47] or 3D patches [44] and train a CNN to predict its center pixel class.", "startOffset": 50, "endOffset": 58}, {"referenceID": 45, "context": "All three methods divide the 3D MR images into 2D [11, 47] or 3D patches [44] and train a CNN to predict its center pixel class.", "startOffset": 50, "endOffset": 58}, {"referenceID": 42, "context": "All three methods divide the 3D MR images into 2D [11, 47] or 3D patches [44] and train a CNN to predict its center pixel class.", "startOffset": 73, "endOffset": 77}, {"referenceID": 42, "context": "[44] as well as Zikic et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 45, "context": "[47] implemented a fairly common CNN, consisting of a series of convolutional layers, a non-linear activation function between each layer and a softmax output layer.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "[11] using a two-pathway architecture, which we use here as a building block.", "startOffset": 0, "endOffset": 4}, {"referenceID": 33, "context": "The work in Pinheiro and Collobert [35] uses a basic CNN to make predictions for each pixel and further improves the predictions by using them as extra information in the input of a second CNN model.", "startOffset": 35, "endOffset": 39}, {"referenceID": 12, "context": "Other work [13] involves several distinct CNNs processing the image at different resolutions.", "startOffset": 11, "endOffset": 15}, {"referenceID": 29, "context": "Like our work, other recent work has exploited convolution operations in the final layer of a network to extend traditional CNN architectures for semantic scene segmentation [31].", "startOffset": 174, "endOffset": 178}, {"referenceID": 21, "context": "However, some notable recent work by Huang and Jain [23] has used CNNs to predict the boundaries of neural tissue in electron microscopy images.", "startOffset": 52, "endOffset": 56}, {"referenceID": 33, "context": "Like most CNN-based segmentation models [35, 13], our method predicts the class of a pixel by processing the M \u00d7M patch centered on that pixel.", "startOffset": 40, "endOffset": 48}, {"referenceID": 12, "context": "Like most CNN-based segmentation models [35, 13], our method predicts the class of a pixel by processing the M \u00d7M patch centered on that pixel.", "startOffset": 40, "endOffset": 48}, {"referenceID": 37, "context": "These parameters are adapted via stochastic gradient descent on a surrogate loss function related to the misclassification error, with gradients computed efficiently via the backpropagation algorithm [39].", "startOffset": 200, "endOffset": 204}, {"referenceID": 22, "context": "There are multiple choices for this non-linearity, such as the sigmoid, hyperbolic tangent and rectified linear functions [24], [16].", "startOffset": 122, "endOffset": 126}, {"referenceID": 14, "context": "There are multiple choices for this non-linearity, such as the sigmoid, hyperbolic tangent and rectified linear functions [24], [16].", "startOffset": 128, "endOffset": 132}, {"referenceID": 15, "context": "[17] proposed a Maxout non-linearity, which has been shown to be particularly effective at modeling useful features.", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "This subsampling procedure has been found beneficial in other applications [27].", "startOffset": 75, "endOffset": 79}, {"referenceID": 43, "context": "This architecture is interesting, as it is similar to the computations made by one pass of mean-field inference [45] in a CRF whose pairwise potential functions are the weights in the output kernels.", "startOffset": 112, "endOffset": 116}, {"referenceID": 25, "context": "To further improve optimization, we implemented a so-called momentum strategy which has been shown successful in the past [27].", "startOffset": 122, "endOffset": 126}, {"referenceID": 39, "context": "Moreover, we used Dropout [41], a recent regularization method that works by stochastically adding noise in the computation of the hidden layers of the CNN.", "startOffset": 26, "endOffset": 30}, {"referenceID": 39, "context": "[41].", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "Our implementation is based on the Pylearn2 library [18].", "startOffset": 52, "endOffset": 56}, {"referenceID": 30, "context": ", the winner of the 2013 BRATS challenge [32].", "startOffset": 41, "endOffset": 45}, {"referenceID": 2, "context": "Then, we apply an N4ITK bias correction [3] to T1 and T1C modalities.", "startOffset": 40, "endOffset": 43}, {"referenceID": 6, "context": "Hyper-parameters were tuned using grid search and cross-validation on a validation set (see Bengio [7]).", "startOffset": 99, "endOffset": 102}, {"referenceID": 25, "context": "[27], we applied data augmentation by flipping the input images.", "startOffset": 0, "endOffset": 4}, {"referenceID": 44, "context": "Unlike what was reported by Zeiler and Fergus [46], it did not improve the overall accuracy of our model.", "startOffset": 46, "endOffset": 50}, {"referenceID": 13, "context": "Quantitative evaluation of the models performance on the test set is achieved by uploading the segmentation results to the online BRATS evaluation system [14].", "startOffset": 154, "endOffset": 158}, {"referenceID": 30, "context": "[32], tumor regions are defined as:", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": "This includes methods from the 2013 BRATS challenge published in [32] as well as anonymized unpublished methods for which no reference is available.", "startOffset": 65, "endOffset": 69}, {"referenceID": 30, "context": "Table 3 shows how our implemented architectures compare with currently published state-of-the-art methods as mentioned in [32]4.", "startOffset": 122, "endOffset": 126}, {"referenceID": 30, "context": "method takes 100 minutes to compute predictions per brain as reported in [32], while the InputCascadeCNN* takes 3 minutes, thanks to the fully convolutional architecture and the GPU implementation, which is over 30 times faster than the winner of the challenge.", "startOffset": 73, "endOffset": 77}, {"referenceID": 41, "context": "[43] published competitive results on the BRATS 2013 dataset, reporting dice measures of 0.", "startOffset": 0, "endOffset": 4}, {"referenceID": 41, "context": "However, as mentioned in [43], their method takes 70 minutes to process a subject, which is about 23 times slower than our method.", "startOffset": 25, "endOffset": 29}, {"referenceID": 42, "context": "[44] used an average of two 3D convolutional networks with dice measures of 0.", "startOffset": 0, "endOffset": 4}, {"referenceID": 45, "context": "As for [47], they do not report results on BRATS 2013 test dataset.", "startOffset": 7, "endOffset": 11}], "year": 2015, "abstractText": "In this paper, we present a fully automatic brain tumor segmentation method based on Deep Neural Networks (DNNs). The proposed networks are tailored to glioblastomas (both low and high grade) pictured in MR images. By their very nature, these tumors can appear anywhere in the brain and have almost any kind of shape, size, and contrast. These reasons motivate our exploration of a machine learning solution that exploits a flexible, high capacity DNN while being extremely efficient. Here, we give a description of different model choices that we\u2019ve found to be necessary for obtaining competitive performance. We explore in particular different architectures based on Convolutional Neural Networks (CNN), i.e. DNNs specifically adapted to image data. We present a novel CNN architecture which differs from those traditionally used in computer vision. Our CNN exploits both local features as well as more global contextual features simultaneously. Also, different from most traditional uses of CNNs, our networks use a final layer that is a convolutional implementation of a fully connected layer which allows a 40 fold speed up. We also describe a 2-phase training procedure that allows us to tackle difficulties related to the imbalance of tumor labels. Finally, we explore a cascade architecture in which 1 ar X iv :1 50 5. 03 54 0v 1 [ cs .C V ] 1 3 M ay 2 01 5 the output of a basic CNN is treated as an additional source of information for a subsequent CNN. Results reported on the 2013 BRATS test dataset reveal that our architecture improves over the currently published state-of-the-art while being over 30 times faster.", "creator": "LaTeX with hyperref package"}}}