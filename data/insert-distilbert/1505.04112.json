{"id": "1505.04112", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-May-2015", "title": "How, What and Why to test an ontology", "abstract": "ontology development relates to software development in that they both involve the production of formal computational knowledge. suppose it is possible, therefore, saying that very some of the techniques used in software engineering could also be commercially used for the ontologies ; for example, in software engineering and testing is a well - established process, and part of many different methodologies.", "histories": [["v1", "Fri, 15 May 2015 16:30:17 GMT  (23kb)", "http://arxiv.org/abs/1505.04112v1", "4 pages, accepted at Bio-Ontologies 2015"]], "COMMENTS": "4 pages, accepted at Bio-Ontologies 2015", "reviews": [], "SUBJECTS": "cs.AI cs.CE", "authors": ["jennifer d warrender", "phillip lord"], "accepted": false, "id": "1505.04112"}, "pdf": {"name": "1505.04112.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Jennifer D. Warrender", "Phillip Lord"], "emails": ["phillip.lord@newcastle.ac.uk"], "sections": [{"heading": null, "text": "ar X\niv :1\n50 5.\n04 11\n2v 1\n[ cs\n.A I]\n1 5\nM ay\n2 01\n5\nboth involve the production of formal computational knowledge. It is possible, therefore, that some of the techniques used in software engineering could also be used for ontologies; for example, in software engineering testing is a well-established process, and part of many different methodologies.\nThe application of testing to ontologies, therefore, seems attractive. The Karyotype Ontology is developed using the novel Tawny-OWL library. This provides a fully programmatic environment for ontology development, which includes a complete test harness.\nIn this paper, we describe how we have used this harness to build an extensive series of tests as well as used a commodity continuous integration system to link testing deeply into our development process; this environment, is applicable to any OWL ontology whether written using Tawny-OWL or not. Moreover, we present a novel analysis of our tests, introducing a new classification of what our different tests are. For each class of test, we describe why we use these tests, also by comparison to software tests. We believe that this systematic comparison between ontology and software development will help us move to a more agile form of ontology development."}, {"heading": "1 INTRODUCTION", "text": "Karyotypes have a long history in biology, being used to assess chromosome rearrangement in many different organisms. In humans, this knowledge is used diagnostically for many genetic abnormalities. The use of cytogenetic analysis is cheap, noninvasive and simple, so remains useful. The representation of karyotypes though, is not simple. The specification in humans is a hundred-page book, with no computational definition (Shaffer et al., 2012). The representation is a string with no formal grammar which is difficult to manage computationally.\nTo address this problem, we have developed the Karyotype Ontology, which provides a fully computational representation in the form of an OWL ontology (Warrender and Lord, 2013b).\nOntology development bears many similarities to software development; both involve taking complex knowledge and producing a computational amenable representation of that knowledge. For the Karyotype Ontology, we have extended this similarity further. It has been developed using Tawny-OWL (Lord, 2013), a fully programmatic ontology development environment.\nTawny-OWL is a library, implemented in Clojure which is an implementation of the Lisp programming language, running on the Java Virtual Machine. It uses the OWL API (Horridge and Bechhofer, 2011), which is the same library underlying Prote\u0301ge\u0301 4 and upward. It allows constructions of ontologies programmatically, so rather than adding classes and\n\u2217To whom correspondence should be addressed: phillip.lord@newcastle.ac.uk\nproperties individually, a large number of entities can be generated according to patterns defined in Clojure (Warrender and Lord, 2013a). The Karyotype Ontology defines a number of these patterns, which are used to generate a large number of classes \u2013 in one case, a single pattern is used to generate 1248 classes. In essence, Tawny-OWL allows us to recast ontology development as a form of software development, through the use of functional abstraction.\nTawny-OWL also allows us to use other parts of the software engineering process; more specifically testing in order to apply quality control. Historically, ontology testing has been achieved through the use of DL queries, SPARQL queries and reasoners to ensure the internal consistency and satisfiability of an ontology. These have been encapsulated in bespoke tools such as the efovalidator1 that can only be used for the validation and unit testing of EFO (Malone et al., 2010). More recently, ontology testing has evolved by incorporating the use of continuous integration systems, as it enables tests to be run frequently and in a clean environment (Mungall et al., 2012). Here, the authors support integration testing while providing releases of OBO ontologies that are internally consist as well as consistent with external ontologies and information sources. This tool2 was initially used to help with the development and maintenance of GO (Ashburner et al., 2000) and Human Phenotype Ontology (Ko\u0308hler et al., 2014), but is not specific to those domains.\nWhile testing and continuous integration are not novel in the ontological community, Tawny-OWL has the advantage of not requiring any specialist installation. Clojure comes with a full test harness, a build tool for running the tests and is supported by various continuous integration testing services. In addition, we can use Tawny-OWL to interact with external ontologies such as GO and OBI. As tests are simple to use within Tawny-OWL, this has meant that we have produced a very large test library for the Karyotype Ontology (currently containing 3088 tests).\nIn this paper, we describe how we have developed this test suite, including our use of a spreadsheet to define tests rapidly. We analyse the different kinds of test and present a novel test classification, describing the purpose of each form of test. Taken together, this work represents a systematic attempt to re-purpose software engineering testing for use within ontology development."}, {"heading": "2 THE KARYOTYPE ONTOLOGY", "text": "A karyotype describes the number of chromosomes and any alterations from the normal. These are visible under the light microscope, and when stained have a characteristic banding pattern which can be used to distinguish between different chromosomes and the positions on these chromosomes."}, {"heading": "1 http://www.ebi.ac.uk/fgpt/sw/efovalidator/index.html", "text": "2 https://github.com/owlcollab/owltools/tree/master/OWLTools-"}, {"heading": "J. D. Warrender and P. Lord", "text": "Alterations are described by their type, such as inversions, deletions or duplications and by their location, specified by a chromosome number and band number. So, 46,XY,t(1;3)(p22;q13.1) describes a male with a translocation from chromosome 1p22 to chromosome 3q13.1. To describe a karyotype adequately, a unique class needs to be defined for each band, of which there are 1224.\nThe Karyotype Ontology is developed by specifying the bands in a literal Clojure data structure, and then using this to generate the appropriate classes. For example, the following data structure,:\n[ \u201dp10 \u201d [ \u201d p11 \u201d \u201d p11 . 1 \u201d \u201dp11 . 2 \u201d ] ]\ndescribes part of Chromosome 1 which has bands p10, and p11 in turn has two sub-bands p11.1 and p11.2. The representation was chosen for ease of legibility/typing. We then use TawnyOWL to programmatically expand this data structure into 4 classes, coerced into a tree, and a set of relationships using code specific to the Karyotype Ontology."}, {"heading": "3 THE KARYOTYPE TEST HARNESS", "text": "Of course, programmers have always tested their code, but test-driven development methodologies emphasise the importance of writing large numbers of test. A key feature has been the development of a tests harness. This provides a method for defining tests separate from the main body of code and a mechanism for running all of the tests regularly in batch. This enables a more agile form of development, since tests can be run after any change, detecting if any unexpected changes have occurred.\nClojure provides a test harness which can be used directly with the Karyotype Ontology. For example, the following statements define two tests3 which will succeed if the ontology human is both consistent and coherent according to the reasoner. That is we are asserting that (r/consistent? human) returns a value which is true4.\n( d e f t e s t B a s i c ( i s ( r / c o n s i s t e n t ? human ) ) ( i s ( r / c o h e r e n t ? human ) ) )\nThese tests can be run either individually or in batch using a single command. In total, Tawny-OWL itself contains over 3000 individual assertions. Next, we discuss the kinds of tests that we are running."}, {"heading": "4 THE ONTOLOGY OF ONTOLOGY TESTS", "text": "In this section, we use the following terminology to distinguish between:\n\u2022 tawny-karyotype5: the programmatic code written in Clojure, which uses the Tawny-OWL library.\n3 Actually, one test with two assertions; the distinction is not important in this paper. 4 The r/ part of the statement is the use of a namespace, or namespace alias 5 https://github.com/jaydchan/tawny-karyotype\n\u2022 the Karyotype Ontology: the ontology in OWL, either as a set of in-memory Java objects, or as a serialisation as an OWLXML file, which is generated by tawny-karyotype.\nThe first kind of test in tawny-karyotype we describe as softwarebound tests and consists of traditional unit tests. These are tests where neither the test nor the code that it tests makes a direct reference to any ontology object. For example, during the construction of the Karyotype Ontology, it is useful to be able to determine whether a string, used as a label for a band, is either on the long (p) or short (q) arm of a chromosome. For this purpose, we have defined a predicate function as follows:\n( de fn s tr\u2212pband? [ band ] ( re\u2212 f ind # \u201dp \u201d band )\nHere defn introduces a function with name str-pband? and formal parameter band. This returns true if we re-find the regular expression #\"p\" in band. This function is tested against a number of different band labels. The following examples test that the function returns both true and false correctly.\n( i s ( h / s t r\u2212pband? \u201dHumanChromosome1Bandp10 \u201d ) ) ( i s ( n o t ( h / s t r\u2212pband? \u201dHumanChromosome1Bandq10 \u201d ) ) )\nThere are 53 of this kind of test. In this case, representative examples have been generated by hand, and the tests have been directly written in Clojure.\nThe second kind of test we call an ontology-bound test, as it refers to one or more ontology classes or properties. Most of these use predicates provided by Tawny-OWL or tawny-karyotype. For this reason, ontology-bound tests are also software-bound. For example, the following predicate function is defined as part of tawny-karyotype; this function depends on the superclass? function (defined in Tawny-OWL) and checks to see if x is a subclass of HumanChromosomeBand. In this example, HumanChromosomeBand is a term of the Karyotype Ontology, as would be the value passed into x.\n( de fn band? [ x ] ( o r\n( = x HumanChromosomeBand) ( s u p e r c l a s s ? human x HumanChromosomeBand ) ) )\nThis predicate function can then be used to test that the Karyotype Ontology correctly asserts that the class representing 1p10 is in fact a chromosome band.\n( i s ( h / band? h / HumanChromosome1Bandp10 ) )\nThere are 759 of this kind of test. As with software-bound tests, these tests have been written by hand.\nThe third kind of test, we call a reasoner-bound test as it uses computational reasoning to determine whether the test passes or not. All reasoner-bound tests are also ontology-bound. These tests determine whether the asserted conditions are fulfilled or not6. As an example, we might make this assertion, which says that 46,XY should be a male karyotype.\n( i s ( r / i s u p e r c l a s s ? i / k46 XY n / MaleKaryotype ) )\n6 Strictly speaking, the band? function is performing a limited, structural form of reasoning by checking superclasses recursively.\nThere are 2273 of this kind of test. The majority of these tests are not directly asserted in Clojure source; we describe how these are generated in Section 5.\nFinally, there is one final type of test which we call probebound. This form of test first changes the ontology in some way, tests assertions using this changed ontology, and lastly reverts these changes. Probe-bound tests are also reasoner-bound. In the following example, we assert a subclass of both HumanAutosome and HumanSexChromosome, then define a test assertion that states the ontology should now be incoherent. Tawny-OWL provides specific support for this form of test (with-probe-entities), as it is critical that any entities created during the tests are removed again to ensure independence.\n( i s ( n o t\n( w i t h\u2212p r o b e\u2212 e n t i t i e s [ ( owl\u2212class \u201d \u201d\n: s u p e r HumanAutosome HumanSexChromosome ) ]\n( r / c o h e r e n t ? ) )\nWe describe this form of test for completeness, as there are currently only three of these tests in the Karyotype Ontology."}, {"heading": "5 SPECIFYING REASONER-BOUND TESTS WITH FACETS", "text": "While Tawny-OWL and Clojure provide a reasonably convenient syntax for specifying most of our tests, it is not ideal for all of them. A large number of tests for the Karyotype Ontology test the behaviour of a set of classes which are, effectively, competency questions for our ontology (Ren et al., 2014). The International System for human Cytogenetic Nomenclature (ISCN) contains a large number of examples often describing well known conditions or syndromes. These have been encoded as an ontology as part of tawny-karyotype. The informal nature of the ISCN as a specification means that these examples are the best mechanism to ensure that the Karyotype Ontology fulfils the ISCN specification.\n( d e f c l a s s k45 X : s u p e r ISCNExampleKaryotype\n( owl\u2212some b / de r ivedFrom ( owl\u2212and\n( owl\u2212some b / de r ivedFrom b / k46 XN ) ( e / d e l e t i o n 1 h / HumanSexChromosome ) ) ) )\nHaving defined these example classes it is, of course, useful to test that they perform as expected when reasoning. We have achieved this by defining a set of defined classes, which should result in a complex polyhierarchy after reasoning. We use these classes as facets in a spreadsheet. Currently, we define 18 facets, with a true/false/unknown value. For example, 45,X is defined as NOT male, female or haploid, but IS diploid, as shown in Table 1.\nThis spreadsheet is read at test time7 using the Incanter library8. For example, two of the facets for 45,X are interpreted as these assertions:\n( i s ( n o t ( r / i s u p e r c l a s s ? i / k45 X n / MaleKaryotype ) ) ) ( i s ( r / i s u p e r c l a s s ? i / k45 X n / D i p l o i d K a r y o t y p e ) )\n7 Actually, it is translated to a Clojure and is automatically updated when necessary, which is a usability and performance enhancement. 8 https://github.com/incanter/incanter\nThe use of a spreadsheet in this way provides a clean and consistent user interface for specifying facet values. As TawnyOWL is fully programmatic, it is straight-forward to store this spreadsheet as part of the source code of tawny-karyotype which simplifies future updates, and has allowed us to specify a large number of tests for the Karyotype Ontology. In addition, this simplifies continuous integration, which we describe next."}, {"heading": "6 CONTINUOUS INTEGRATION", "text": "Continuous integration (CI) is a software development process where code is tested against its dependencies (and code that depends on it) regularly; in most cases, developers now test their code after every commit to their version control system. CI provides two key features in addition to \u201cnormal\u201d testing. Firstly, it is responsive to changes in any dependencies, allowing problems to be detected very early. Secondly, it is normally performed in a \u201cclean\u201d environment, supporting reproducibility.\nAs tawny-karyotype is using a standard test environment, it is very easy to set up CI. In our case, we are using TravisCI9. By design the Karyotype Ontology has no dependencies; the CI in this case, tests against changes in the software dependencies (Tawny-OWL, the OWL API, HermiT (Shearer et al., 2008), and Clojure)."}, {"heading": "7 DISCUSSION", "text": "In this paper, we have described our approach to testing the Karyotype Ontology. The four different kinds of tests that we describe all have different purposes. The first of these, softwarebound is strictly not a form of ontology testing at all, but unit testing for the software involved in ontology development. It is, however, an essential part of our test suite, as it helps to isolate errors which occur purely as a result of our ontology development software. Ontology-bound tests directly test our ontology, and ensure it describes the world correctly \u2013 in essence, they are the ontological equivalent of unit tests. The final two forms of tests are equivalent to functional tests, ensuring the ontology reasons as we expect. Our taxonomy and test usage differs from previous work by Garca-Ramos et al. (2009), as we test only T-Box (class) reasoning while they test the A-Box. In addition, we introduce tests for parts of the infrastructure outside of the base ontology.\nThe use of Tawny-OWL has also allowed us to specify tests as facets in a spreadsheet. Defining a test assertion by filling a cell, means we can test the karyotype ontology extensively (see Table 2). Although, in our case, we have built the tests using Tawny-OWL with an ontology written in Tawny-OWL, it is important to note that the test environment is de-coupled from the ontology development.\n9 https://travis-ci.org/"}, {"heading": "J. D. Warrender and P. Lord", "text": "Tawny-OWL can use ontologies written in OWL (by Prote\u0301ge\u0301, for instance) and then test them.\nWe have also briefly described our use of TravisCI, which performs integration testing. The Karyotype Ontology itself has no ontology dependencies, but we have generated an example ontology which is a dependency of the Karyotype Ontology and helps to form a test suite for it. We believe, that the Karyotype Ontology is rather unusual in having no ontological dependencies. Integration testing is likely to bear even more fruit for ontologies with a large or complex dependency graph.\nContinuing the metaphor to software engineering, there are currently several forms of testing that we do not perform on the Karyotype Ontology. One common problem with ontology development is understanding reasoner performance, especially the overall reasoning time. The use of Tawny-OWL does allow performance testing; for instance, we have extensively compared several different axiomatisations for parts of the Karyotype Ontology10. This form of testing is a non-functional test. We do not currently check overall reasoning performance as part of our automated test suite, but this is possible and is likely to be included in tawny-karyotype in the future.\nWe would also like to test aspects of the ontology other than the class hierarchy, including extra-logical aspects such as labels or definitions. Historically, this form of testing is quite difficult in Tawny-OWL because we lacked a good mechanism for querying an ontology syntactically; however, an initial implementation for such a mechanism (called, prosaically, tawny.query) is now in place.\nThere are a number of tools available for software testing which an equivalent is not currently available for ontology development within Tawny-OWL, but which would be extremely useful. We currently, for instance, cannot assess the state of coverage for the Karyotype Ontology as we have neither a tool nor a clear understanding of how it should assessed for ontologies.\nDespite these limitations, the use of Tawny-OWL has allowed us to recast testing of the Karyotype Ontology as a form of software testing. We have reused many standard tools to enable this process, and they perform well. In addition, we have made use of programmatic nature of Tawny-OWL to allow specification of tests using spreadsheets as source code, using the extensibility of Tawny-OWL, something we have also found useful for ontology development. As Tawny-OWL is built on the OWL API, it can"}, {"heading": "10 https://github.com/jaydchan/tawny-karyotype-scaling", "text": "offer these capabilities to any ontology, whatever the development environment. So while the work reported on here is specific to the Karyotype Ontology, we believe that the classification of ontology tests and the tooling is generic, and we look forward the application of these forms of tests to many other ontologies."}, {"heading": "ACKNOWLEDGEMENTS", "text": "This work was supported by Newcastle University."}], "references": [{"title": "Gene ontology: tool for the unification of biology", "author": ["M Ashburner"], "venue": "The Gene Ontology Consortium. Nature Genetics,", "citeRegEx": "Ashburner,? \\Q2000\\E", "shortCiteRegEx": "Ashburner", "year": 2000}, {"title": "Ontologytest: A tool to evaluate ontologies through tests defined by the user", "author": ["S. Garca-Ramos", "A. Otero", "M. Fernndez-Lpez"], "venue": "In S. Omatu et al., editors,", "citeRegEx": "Garca.Ramos et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Garca.Ramos et al\\.", "year": 2009}, {"title": "The OWL API: A Java API for OWL ontologies", "author": ["M. Horridge", "S. Bechhofer"], "venue": "Semant. web,", "citeRegEx": "Horridge and Bechhofer,? \\Q2011\\E", "shortCiteRegEx": "Horridge and Bechhofer", "year": 2011}, {"title": "The human phenotype ontology project: linking molecular biology and disease through phenotype data", "author": ["S K\u00f6hler"], "venue": "Nucleic Acids Research,", "citeRegEx": "K\u00f6hler,? \\Q2014\\E", "shortCiteRegEx": "K\u00f6hler", "year": 2014}, {"title": "The Semantic Web takes Wing: Programming Ontologies with Tawny-OWL", "author": ["P. Lord"], "venue": null, "citeRegEx": "Lord,? \\Q2013\\E", "shortCiteRegEx": "Lord", "year": 2013}, {"title": "Modeling Sample Variables with an Experimental Factor Ontology", "author": ["J. Malone", "E. Holloway", "T. Adamusiak", "M. Kapushesky", "J. Zheng", "N. Kolesnikov", "A. Zhukova", "A. Brazma", "H. Parkinson"], "venue": "Bioinformatics (Oxford,", "citeRegEx": "Malone et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Malone et al\\.", "year": 2010}, {"title": "Continuous integration of open biological ontology libraries. http://bio-ontologies.knowledgeblog.org/405", "author": ["C. Mungall", "H. Dietze", "S. Carbon", "A. Ireland", "S. Bauer", "S. Lewis"], "venue": null, "citeRegEx": "Mungall et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Mungall et al\\.", "year": 2012}, {"title": "Towards competency question-driven ontology authoring", "author": ["Y. Ren", "A. Parvizi", "C. Mellish", "J. Pan", "K. van Deemter", "R. Stevens"], "venue": "The Semantic Web: Trends and Challenges,", "citeRegEx": "Ren et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Ren et al\\.", "year": 2014}, {"title": "HermiT: A HighlyEfficient OWL Reasoner", "author": ["R. Shearer", "B. Motik", "I. Horrocks"], "venue": "Proc. of the 5th Int. Workshop on OWL: Experiences and Directions (OWLED", "citeRegEx": "Shearer et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Shearer et al\\.", "year": 2008}, {"title": "A pattern-driven approach to biomedical ontology engineering", "author": ["J.D. Warrender", "P. Lord"], "venue": null, "citeRegEx": "Warrender and Lord,? \\Q2013\\E", "shortCiteRegEx": "Warrender and Lord", "year": 2013}, {"title": "The Karyotype Ontology: a computational representation for human cytogenetic patterns", "author": ["J.D. Warrender", "P. Lord"], "venue": "Bio-Ontologies", "citeRegEx": "Warrender and Lord,? \\Q2013\\E", "shortCiteRegEx": "Warrender and Lord", "year": 2013}], "referenceMentions": [{"referenceID": 4, "context": "It has been developed using Tawny-OWL (Lord, 2013), a fully programmatic ontology development environment.", "startOffset": 38, "endOffset": 50}, {"referenceID": 2, "context": "It uses the OWL API (Horridge and Bechhofer, 2011), which is the same library underlying Prot\u00e9g\u00e9 4 and upward.", "startOffset": 20, "endOffset": 50}, {"referenceID": 5, "context": "These have been encapsulated in bespoke tools such as the efovalidator that can only be used for the validation and unit testing of EFO (Malone et al., 2010).", "startOffset": 136, "endOffset": 157}, {"referenceID": 6, "context": "More recently, ontology testing has evolved by incorporating the use of continuous integration systems, as it enables tests to be run frequently and in a clean environment (Mungall et al., 2012).", "startOffset": 172, "endOffset": 194}, {"referenceID": 7, "context": "A large number of tests for the Karyotype Ontology test the behaviour of a set of classes which are, effectively, competency questions for our ontology (Ren et al., 2014).", "startOffset": 152, "endOffset": 170}, {"referenceID": 8, "context": "By design the Karyotype Ontology has no dependencies; the CI in this case, tests against changes in the software dependencies (Tawny-OWL, the OWL API, HermiT (Shearer et al., 2008), and Clojure).", "startOffset": 158, "endOffset": 180}, {"referenceID": 1, "context": "Our taxonomy and test usage differs from previous work by Garca-Ramos et al. (2009), as we test only T-Box (class) reasoning while they test the A-Box.", "startOffset": 58, "endOffset": 84}], "year": 2015, "abstractText": "Ontology development relates to software development in that they both involve the production of formal computational knowledge. It is possible, therefore, that some of the techniques used in software engineering could also be used for ontologies; for example, in software engineering testing is a well-established process, and part of many different methodologies. The application of testing to ontologies, therefore, seems attractive. The Karyotype Ontology is developed using the novel Tawny-OWL library. This provides a fully programmatic environment for ontology development, which includes a complete test harness. In this paper, we describe how we have used this harness to build an extensive series of tests as well as used a commodity continuous integration system to link testing deeply into our development process; this environment, is applicable to any OWL ontology whether written using Tawny-OWL or not. Moreover, we present a novel analysis of our tests, introducing a new classification of what our different tests are. For each class of test, we describe why we use these tests, also by comparison to software tests. We believe that this systematic comparison between ontology and software development will help us move to a more agile form of ontology development.", "creator": "LaTeX with hyperref package"}}}