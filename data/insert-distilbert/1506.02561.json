{"id": "1506.02561", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Jun-2015", "title": "On SAT Models Enumeration in Itemset Mining", "abstract": "frequent itemset mining is an essential part up of linear data analysis and data data mining. recent works together propose interesting sat - based encodings for the problem of discovering frequent itemsets. our aim in this work is to define strategies for adapting sat solvers to such encodings in order to improve models enumeration. in computing this context, we both deeply study the effects of restart, branching heuristics and clauses learning. we then conduct recently an experimental evaluation on sat - based unreliable itemset mining instances to to show exactly how sat solvers can be adapted to obtain an efficient sat model enumerator.", "histories": [["v1", "Mon, 8 Jun 2015 15:50:57 GMT  (658kb,D)", "http://arxiv.org/abs/1506.02561v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["said jabbour", "lakhdar sais", "yakoub salhi"], "accepted": false, "id": "1506.02561"}, "pdf": {"name": "1506.02561.pdf", "metadata": {"source": "CRF", "title": "On SAT Models Enumeration in Itemset Mining", "authors": ["Said Jabbour", "Yakoub Salhi"], "emails": ["salhi}@univ-orleans.fr"], "sections": [{"heading": "1 Introduction", "text": "Frequent itemset mining is a keystone in several data analysis and data mining tasks. Since the first article of Agrawal [1] on association rules and itemset mining, the huge number of works, challenges, datasets and projects show the actual interest in this problem (see [21] for a survey of works addressing this problem). In [18], De Raedt et al initiate a research trend on constraint programming and data mining. The authors proposed a framework for itemset mining offering a declarative and flexible representation with several generic and efficient CP solving techniques. Encouraged by the promising results of this framework, several contributions addressed other data mining problems using either constraint programming (CP) or propositional satisfiability (SAT) (e.g. [18,8,?,5,12,11]). In this work, we focus on the SAT-based encoding of itemset mining problems [12]. In this new SAT application, the goal is to enumerate all the models of the propositional formula.\nToday, propositional satisfiability has gained a considerable audience with the advent of a new generation of solvers able to solve large instances encoding real-world problems. In addition to the traditional applications of SAT to hardware and software formal verification, this impressive progress led to increasing use of SAT technology to solve new real-world applications such as planning, bioinformatics, cryptography. In the majority of these applications, we are mainly interested in the decision problem and some of its optimisation variants (e.g. Max-SAT). Compared to other issues in SAT, the SAT model enumeration problem has received much less attention. Most of the recent proposed model enumeration approaches are built on the top of SAT solvers. Usually, these implementations are based on the use of additional clauses, called blocking clauses, to avoid producing repeated models [16,4,17,14]. Improvements have been proposed to this blocking clause based enumeration solvers (e.g. [14,17]). In particular, ar X iv :1\n50 6.\n02 56\n1v 1\n[ cs\n.A I]\n8 J\nun 2\n01 5\nthe authors in [17] proposed several optimizations obtained through learning and simplification of blocked clauses. However, these kind of approaches are clearly impractical. Indeed, in addition to clauses learned form conflicts, one might add an exponential number of blocked clauses in the worst case. In [7], the authors elaborate an interesting approach for enumerating answer sets of a logic program (ASP), centered around First-UIP learning and backjumping.\nIn [10], we proposed an approach based on a combination of a DPLL-like procedure with CDCL-based SAT solvers in order to mainly avoid the limitation that concerns the space complexity induced by blocking clauses addition. In this work, we focus on the SAT encoding of the problem of frequent itemset mining that we introduced in [12]. In such encoding, there is a one-to-one mapping between the models of the propositional formula and the set of interesting patterns of the transaction database. Additionally, even for condensed representation such as closed or maximal itemsets, the size of the output might be exponential in the worst case.\nThe work presented in this paper is mainly motivated by this interesting SAT application to data mining and by the lack of efficient model enumerator.\nOur aim is to study through an extensive empirical evaluation, the effects on model enumeration of the main components of CDCL based SAT solvers including restarts, branching heuristics and clauses learning."}, {"heading": "2 Background", "text": "Let us first introduce the propositional satisfiability problem (SAT) and some necessary notations. We consider the conjunctive normal form (CNF) representation for the propositional formulas. A CNF formula \u03a6 is a conjunction (\u2227) of clauses, where a clause is a disjunction (\u2228) of literals. A literal is a positive (p) or negated (\u00acp) propositional variable. The two literals p and \u00acp are called complementary. A CNF formula can also be seen as a set of clauses, and a clause as a set of literals. Let us mention that any propositional formula can be translated to CNF using linear Tseitin\u2019s encoding [22]. We denote by V ar(\u03a6) the set of propositional variables occurring in \u03a6.\nA Boolean interpretation B of a propositional formula \u03a6 is a function which associates a value B(p) \u2208 {0, 1} (0 corresponds to false and 1 to true) to the propositional variables p \u2208 V ar(\u03a6). It is extended to CNF formulas as usual. A model of a formula \u03a6 is a Boolean interpretation B that satisfies the formula, i.e., B(\u03a6) = 1. We noteM(\u03a6) the set of models of \u03a6. SAT problem consists in deciding if a given formula admits a model or not.\nLet us informally describe the most important components of modern SAT solvers. They are based on a reincarnation of the historical Davis, Putnam, Logemann and Loveland procedure, commonly called DPLL [6]. It performs a backtrack search; selecting at each level of the search tree, a decision variable which is set to a Boolean value. This assignment is followed by an inference step that deduces and propagates some forced unit literal assignments. This is recorded in the implication graph, a central datastructure, which encodes the decision literals together with there implications. This branching process is repeated until finding a model or a conflict. In the first case, the formula is answered satisfiable, and the model is reported, whereas in the second case,\na conflict clause (called learnt clause) is generated by resolution following a bottomup traversal of the implication graph [15,24]. The learning or conflict analysis process stops when a conflict clause containing only one literal from the current decision level is generated. Such a conflict clause asserts that the unique literal with the current level (called asserting literal) is implied at a previous level, called assertion level, identified as the maximum level of the other literals of the clause. The solver backtracks to the assertion level and assigns that asserting literal to true. When an empty conflict clause is generated, the literal is implied at level 0, and the original formula can be reported unsatisfiable. In addition to this basic scheme, modern SAT solvers use other components such as activity based heuristics and restart policies. An extensive overview can be found in [3]."}, {"heading": "3 Frequent Itemset Mining", "text": "Formally, we define the problem of mining frequent itemsets (FMI for short) in the following way. Let \u2126 be a finite set of items. A transaction is defined as a couple (tid, I) where tid is the transaction identifier and I is an itemset, i.e., I \u2286 \u2126. A transaction database is a finite set of transactions where the attribute tid refers to a unique itemset. We say that a transaction (tid, I) supports an itemset J if J \u2286 I .\nThe cover of an itemset I in a transaction database D is the set of transactions in D supporting I: C(I,D) = {(tid, J) \u2208 D | I \u2286 J}. The support of an itemset I in D is defined as the size of its cover: S(I,D) =| C(I,D) |.\nLet D be a transaction database over \u2126 and n a minimum support threshold. The frequent itemset mining problem consists in computing the following set:\nFIM(D, n) = {I \u2286 \u2126 | S(I,D) \u2265 n}.\nDefinition 1 (Closed Frequent Itemset). Let D be a transaction database (over \u2126) and I an itemset (I \u2286 \u2126) such that S(I,D) \u2265 1. The itemset I is closed if, for all itemset J \u2286 \u2126 with I \u2282 J , we have that S(J,D) < S(I,D).\nOne can see that all the elements of FIM(D, n) can be obtained from the closed itemsets by computing their subsets. Enumerating all closed itemsets allows us to reduce the size of the output. We denote by CFIM(D, n) the subset of all closed itemsets in FIM(D, n).\nFor instance, consider the transaction database described in Table 1. The closed frequent itemsets with the minimal support threshold equal to 2 are: CFIM(D, 2) = {A,D,G,AB,AC,AF,ABC,ACD}."}, {"heading": "4 A SAT Encoding of Frequent Itemset Mining", "text": "In this section, we describe SAT encodings for itemset mining which are mainly based on the encodings proposed in [12]. In order to do this, we fix, without loss of generality, a transaction database D = {(1, I1), . . . , (m, Im)} and a minimal support threshold n.\nThe SAT encoding of itemset mining that we consider is based on the use of propositional variables representing the items and the transaction identifiers in D. More precisely, for each item a (resp. transaction identifier i), we associate a propositional variable, denoted pa (resp. qi). These propositional variables are used to capture all possible itemsets and their covers. Formally, given a model B of the considered encoding, the candidate itemset is {a \u2208 \u2126 | B(pa) = 1} and its cover is {i \u2208 N | B(qi) = 1}.\nThe first propositional formula that we describe allows us to obtain the cover of the candidate itemset:\nm\u2227 i=1 (\u00acqi \u2194 \u2228\na\u2208\u2126\\Ii\npa) (1)\nThis formula expresses that qi is true if and only if the candidate itemset is supported by the ith transaction. In other words, the candidate itemset is not supported by the ith transaction (qi is false), when there exists an item a (pa is true) that does not belong to the transaction (a \u2208 \u2126 \\ Ii).\nThe following propositional formula allows us to consider the itemsets having a support greater than or equal to the minimal support threshold:\nm\u2211 i=1 qi \u2265 n (2)\nThis formula corresponds to 0/1 linear inequalities, usually called cardinality constraints. The first linear encoding of general 0/1 linear inequalities to CNF have been proposed by J. P. Warners in [23]. Several authors have addressed the issue of finding an efficient encoding of cardinality (e.g. [20,19,2]) as a CNF formula. Efficiency refers to both the compactness of the representation (size of the CNF formula) and to the ability to achieve the same level of constraint propagation (generalized arc consistency) on the CNF formula.\nWe use EFIM (D, n) to denote the encoding corresponding to the conjunction of the two formul\u00e6 (1) and (2). Then, we have the following property: B is a model of EFIM (D, n) iff I = {a \u2208 \u2126 | B(pa) = 1} is a frequent itemset where C(I,D) = {i \u2208 N | B(qi) = 1}.\nWe now describe the propositional formula allowing to force the candidate itemset to be closed: \u2227\na\u2208\u2126 ( m\u2227 i=1 qi \u2192 a \u2208 Ii)\u2192 pa (3)\nThis formula means that if we have S(I,D) = S(I \u222a {a},D) then a \u2208 I holds. This condition is necessary and sufficient to force the candidate itemset to be closed. Let us note that the expressions of the form a \u2208 Ii correspond to constants, i.e., a \u2208 Ii corresponds to > if the item a is in Ii, to \u22a5 otherwise.\nNote that the formula (3) can be simply reformulated as a conjunction of clauses as follows: \u2227\na\u2208\u2126 (( \u2228 1\u2264i\u2264m,a6\u2208Ii, qi) \u2228 pa) (4)\nThis reformulation is obtained using the equivalence A\u2192 B \u2261 \u00acA \u2228B. We use ECFIM (D, n) to denote the encoding corresponding to the conjunction of the formul\u00e6 (1), (2) and (4). Then, we have the following property: B is a model of ECFIM (D, n) iff I = {a \u2208 \u2126 | B(pa) = 1} is a closed frequent itemset where C(I,D) = {i \u2208 N | B(qi) = 1}.\nExample 1. Let us consider the transaction database of Table 1. The Problem encoding the enumeration of frequent closed itemsets with a threshold 4 can be written as:\n{\u00acq1 \u2194 (pE \u2228 pF \u2228 pG), \u00acq2 \u2194 (pC \u2228 pD \u2228 pG), \u00acq3 \u2194 (pD \u2228 pE \u2228 pF \u2228 pG), \u00acq4 \u2194 (pB \u2228 pE \u2228 pG), \u00acq5 \u2194 (pA \u2228 pB \u2228 pC \u2228 pD \u2228 pE \u2228 pF ), \u00acq6 \u2194 (pA \u2228 pB \u2228 pC \u2228 pE \u2228 pF \u2228 pG), \u00acq5 \u2194 (pA \u2228 pB \u2228 pC \u2228 pE \u2228 pF ), (q5 \u2228 q6 \u2228 q7 \u2228 pA), (q4 \u2228 q5 \u2228 q6 \u2228 q7 \u2228 pB), (q2 \u2228 q5 \u2228 q6 \u2228 q7 \u2228 pC), (q2 \u2228 q3 \u2228 q5 \u2228 pD), (q2 \u2228 q3 \u2228 q4 \u2228 q5 \u2228 q6 \u2228 q7 \u2228 pE), (q1 \u2228 q3 \u2228 q4 \u2228 q5 \u2228 q6 \u2228 q7 \u2228 pF ), (q1 \u2228 q2 \u2228 q3 \u2228 q4 \u2228 q6 \u2228 pG), q1 + q2 + q3 + q4 + q5 + q6 + q7 \u2265 4}"}, {"heading": "5 Enumerating all Models of CNF Formulae", "text": "A naive way to extend modern SAT solvers for the problem of enumerating all models of a CNF formula consists in adding a blocking clause to prevent the search to return the same model again. This approach is used in the majority of the model enumeration methods in the literature. The main limitation of this approach concerns the space complexity, since the number of blocking clauses may be exponential in the worst case. Indeed, in addition to the clauses learned at each conflict by the CDCL-based SAT\nsolver, the number of added blocking clauses is very important on problems with a huge number of models. This explains why it is necessary to design methods avoiding the need to keep all blocking clauses. It is particularly the case for encodings of data mining tasks where the number of interesting patterns is often significant, even when using condensed representations such as closed patterns.\nOur main aim is to experimentally study the effects of each component of modern SAT solvers on the efficiency of the model enumeration, in the case of the encoding described in Section 4. As the number of frequent closed itemsets is usually huge, this results in a huge number of models for the considered encoding. Consequently, it is not suitable to store the found models using blocking clauses during the enumeration process.\nWe proceed by removing incrementally some components of modern SAT solvers in order to evaluate their effects on the efficiency of model enumeration. The first removed component is the restart policy. Indeed, we inhibit the restart in order to allow solvers to avoid the use of blocking clauses. Thus, our procedure performs a simple backtracking at each found model. The second removed component is that of clause learning, which leads to a DPLL-like procedure. Considering a DPLL-like procedure, we pursue our analysis by considering the branching heuristics. Indeed, our goal is to find the heuristics suitable to the considered SAT encoding. To this end, we consider three branching heuristics. We first study the performance of the well-known VSIDS (Variable State Independent, Decaying Sum) branching heuristic. In this case, at each conflict an analysis is only performed to weight variables (no learnt clause is added). The second considered branching heuristic is based on the maximum number of occurrences of the the variables. The third one consists in selecting the variables randomly."}, {"heading": "6 Experiments", "text": "We carried out an experimental evaluation to analyze the effects of adding blocking clauses, adding learned clauses and branching heuristics. To this end, we implemented a DPLL-like procedure, denoted DPLL-Enum, without adding blocking and learned clauses. We also implemented a procedure on the top of the state-of-the-art CDCL SAT solver MiniSAT 2.2, denoted CDCL-Enum. In this procedure, each time a model is found, we add a no-good and perform a restart. We considered a variety of datasets taken from the FIMI1 and CP4IM2 repositories. All the experiments were done on Intel Xeon quad-core machines with 32GB of RAM running at 2.66 Ghz. For each instance, we used a timeout of 15 minutes of CPU time.\nIn our experiments, we compare the performances of CDCL-Enum to three variants of DPLL-Enum, with different branching heuristics, in enumerating all the models corresponding to the closed frequent itemsets. The considered variants of DPLL-Enum are the following:\n\u2013 DPLL-Enum+VSIDS: DPLL-Enum with the VSIDS branching heuristic;\n1 FIMI: http://fimi.ua.ac.be/data/ 2 CP4IM: http://dtai.cs.kuleuven.be/CP4IM/datasets/\n\u2013 DPLL-Enum+JW: DPLL-Enum with a branching heuristic based on the maximum number of occurrences of the variables [13]; \u2013 DPLL-Enum+RAND: DPLL-Enum with a random variable selection.\nOur comparison is depicted by the the cactus plots of Figure 1. Each dots (x, y) represents an instance with a fixed minimal support threshold n. Each cactus plot represents an instance and the evolution of CPU time needed to enumerate all models with the different algorithms while varying the quorum. For each instance, we tested different values of n. The x-axis (respectively y-axis) represents the CPU time (in seconds) needed for the enumeration of all closed frequent itemsets.\nUnsurprisingly, the DPLL-like procedures outperform CDCL-Enum on the majority of instances. This shows that a DPLL based approach is more suitable for SATbased itemset mining. Part of explanation lies in the significant number of models. Furthermore, DPLL-Enum+RAND is clearly less efficient than DPLL-Enum+VSIDS and DPLL-Enum+JW, which shows that the branching heuristic plays a key role in model enumeration algorithms. Moreover, our experiments show that DPLL-Enum+JW is better than DPLL-Enum+VSIDS, even if DPLL-Enum+VSIDS compete with the procedure DPLL-Enum+JW on datasets such as anneal and mushroom. Indeed, DPLL-Enum+JW clearly outperforms DPLL-Enum+VSIDS on several datasets, such as chess, kr-vs-kp and splice-1. Note that for theses two data, the solvers DPLL-Enum+RAND and CDCL-Enum are not able to enumerate completely the set of all models of all considered quorums.\nAs a summary, our experimental evaluation suggests that a DPLL-like procedure is a more suitable approach when the number of models of a propositional formula is significant. It also suggests that the branching heuristic is a key point in such a procedure to improve the performance."}, {"heading": "7 Conclusion", "text": "In this paper, we investigated the impact of modern SAT solvers on the problem of enumerating all the models of CNF formulas encoding frequent closed itemsets mining problem. Our goal is to measure the impact of the classical components of CDCL-based SAT solvers on the efficiency of model enumeration. Our results suggest that on formula with a huge number of models, SAT solvers must be adapted to efficiently enumerate all the models. We showed that the simple DPLL solver augmented with the classical Jeroslow-Wang heuristic achieve better performance.\nAs a future work, we plan to pursue our investigation in order to find the best heuristics for enumerating models encoding data mining problems. Finding how to efficiently integrate clauses learning for model enumeration is another interesting issue."}], "references": [{"title": "Rodriguez-Carbonell. Cardinality networks: a theoretical and empirical study", "author": ["Roberto Asin", "Robert Nieuwenhuis", "Albert Oliveras", "Enric"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "Handbook of Satisfiability, volume 185 of Frontiers in AI and Applications", "author": ["Armin Biere", "Marijn J.H. Heule", "Hans van Maaren", "Toby Walsh", "editors"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2009}, {"title": "Using sat based image computation for reachability analysis", "author": ["Pankaj Chauhan", "Edmund M. Clarke", "Daniel Kroening"], "venue": "Technical report, Technical Report CMU-CS-03-151,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2003}, {"title": "A sat-based approach for discovering frequent, closed and maximal patterns in a sequence", "author": ["Emmanuel Coquery", "Sa\u0131\u0308d Jabbour", "Lakhdar Sa\u0131\u0308s", "Yakoub Salhi"], "venue": "In Proceedings of the 20th European Conference on Artificial Intelligence", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "A machine program for theorem-proving", "author": ["M. Davis", "G. Logemann", "D.W. Loveland"], "venue": "Comm. of the ACM,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1962}, {"title": "Conflict-driven answer set enumeration", "author": ["Martin Gebser", "Benjamin Kaufmann", "Andr\u00e9 Neumann", "Torsten Schaub"], "venue": "Logic Programming and Nonmonotonic Reasoning,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "Itemset mining: A constraint programming perspective", "author": ["T. Guns", "S. Nijssen", "L. De Raedt"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1951}, {"title": "On when and how to use sat to mine frequent itemsets", "author": ["Rui Henriques", "In\u00eas Lynce", "Vasco M. Manquinho"], "venue": "CoRR, abs/1207.6253,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "Extending modern SAT solvers for models enumeration", "author": ["Sa\u0131\u0308d Jabbour", "Jerry Lonlac", "Lakhdar Sais", "Yakoub Salhi"], "venue": "In Proceedings of the 15th IEEE International Conference on Information Reuse and Integration,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Boolean satisfiability for sequence mining", "author": ["Sa\u0131\u0308d Jabbour", "Lakhdar Sais", "Yakoub Salhi"], "venue": "In 22nd ACM International Conference on Information and Knowledge Management", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2013}, {"title": "The top-k frequent closed itemset mining using top-k sat problem", "author": ["Sa\u0131\u0308d Jabbour", "Lakhdar Sais", "Yakoub Salhi"], "venue": "In European Conference on Machine Learning and Knowledge Discovery in Databases", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2013}, {"title": "Solving propositional satisfiability problems", "author": ["R.G. Jeroslow", "J. Wang"], "venue": "Annals of Mathematics and Artificial Intelligence,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1990}, {"title": "Efficient conflict analysis for finding all satisfying assignments of a boolean circuit", "author": ["Hoonsang Jin", "Hyojung Han", "Fabio Somenzi"], "venue": "In In TACAS\u201905,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2005}, {"title": "GRASP - A New Search Algorithm for Satisfiability", "author": ["J.P. Marques-Silva", "K.A. Sakallah"], "venue": "In Proceedings of IEEE/ACM CAD,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1996}, {"title": "Applying sat methods in unbounded symbolic model checking", "author": ["Kenneth L. McMillan"], "venue": "In Proceedings of the 14th International Conference on Computer Aided Verification", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2002}, {"title": "Good Learning and Implicit Model Enumeration", "author": ["Ant\u00f3nio R. Morgado", "Jo\u00e3o P. Marques-Silva"], "venue": "In International Conference on Tools with Artificial Intelligence", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2005}, {"title": "Constraint programming for itemset mining", "author": ["L. De Raedt", "T. Guns", "S. Nijssen"], "venue": "In ACM SIGKDD,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2008}, {"title": "Towards robust cnf encodings of cardinality constraints", "author": ["J.P. Marques Silva", "I. Lynce"], "venue": "In CP,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2007}, {"title": "Towards an optimal cnf encoding of boolean cardinality constraints", "author": ["C. Sinz"], "venue": "In CP\u201905,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2005}, {"title": "A survey on frequent pattern mining: Current status and challenging issues", "author": ["A. Tiwari", "R.K. Gupta", "D.P. Agrawal"], "venue": "Inform. Technol. J,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2010}, {"title": "On the complexity of derivations in the propositional calculus", "author": ["G.S. Tseitin"], "venue": "In H.A.O. Slesenko, editor, Structures in Constructives Mathematics and Mathematical Logic, Part II,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1968}, {"title": "A linear-time transformation of linear inequalities into conjunctive normal form", "author": ["J.P. Warners"], "venue": "Information Processing Letters,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1996}, {"title": "Efficient conflict driven learning in Boolean satisfiability solver", "author": ["L. Zhang", "C.F. Madigan", "M.W. Moskewicz", "S. Malik"], "venue": "In IEEE/ACM", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2001}], "referenceMentions": [{"referenceID": 19, "context": "Since the first article of Agrawal [1] on association rules and itemset mining, the huge number of works, challenges, datasets and projects show the actual interest in this problem (see [21] for a survey of works addressing this problem).", "startOffset": 186, "endOffset": 190}, {"referenceID": 16, "context": "In [18], De Raedt et al initiate a research trend on constraint programming and data mining.", "startOffset": 3, "endOffset": 7}, {"referenceID": 10, "context": "In this work, we focus on the SAT-based encoding of itemset mining problems [12].", "startOffset": 76, "endOffset": 80}, {"referenceID": 14, "context": "Usually, these implementations are based on the use of additional clauses, called blocking clauses, to avoid producing repeated models [16,4,17,14].", "startOffset": 135, "endOffset": 147}, {"referenceID": 2, "context": "Usually, these implementations are based on the use of additional clauses, called blocking clauses, to avoid producing repeated models [16,4,17,14].", "startOffset": 135, "endOffset": 147}, {"referenceID": 15, "context": "Usually, these implementations are based on the use of additional clauses, called blocking clauses, to avoid producing repeated models [16,4,17,14].", "startOffset": 135, "endOffset": 147}, {"referenceID": 12, "context": "Usually, these implementations are based on the use of additional clauses, called blocking clauses, to avoid producing repeated models [16,4,17,14].", "startOffset": 135, "endOffset": 147}, {"referenceID": 12, "context": "[14,17]).", "startOffset": 0, "endOffset": 7}, {"referenceID": 15, "context": "[14,17]).", "startOffset": 0, "endOffset": 7}, {"referenceID": 15, "context": "the authors in [17] proposed several optimizations obtained through learning and simplification of blocked clauses.", "startOffset": 15, "endOffset": 19}, {"referenceID": 5, "context": "In [7], the authors elaborate an interesting approach for enumerating answer sets of a logic program (ASP), centered around First-UIP learning and backjumping.", "startOffset": 3, "endOffset": 6}, {"referenceID": 8, "context": "In [10], we proposed an approach based on a combination of a DPLL-like procedure with CDCL-based SAT solvers in order to mainly avoid the limitation that concerns the space complexity induced by blocking clauses addition.", "startOffset": 3, "endOffset": 7}, {"referenceID": 10, "context": "In this work, we focus on the SAT encoding of the problem of frequent itemset mining that we introduced in [12].", "startOffset": 107, "endOffset": 111}, {"referenceID": 20, "context": "Let us mention that any propositional formula can be translated to CNF using linear Tseitin\u2019s encoding [22].", "startOffset": 103, "endOffset": 107}, {"referenceID": 4, "context": "They are based on a reincarnation of the historical Davis, Putnam, Logemann and Loveland procedure, commonly called DPLL [6].", "startOffset": 121, "endOffset": 124}, {"referenceID": 13, "context": "a conflict clause (called learnt clause) is generated by resolution following a bottomup traversal of the implication graph [15,24].", "startOffset": 124, "endOffset": 131}, {"referenceID": 22, "context": "a conflict clause (called learnt clause) is generated by resolution following a bottomup traversal of the implication graph [15,24].", "startOffset": 124, "endOffset": 131}, {"referenceID": 1, "context": "An extensive overview can be found in [3].", "startOffset": 38, "endOffset": 41}, {"referenceID": 10, "context": "In this section, we describe SAT encodings for itemset mining which are mainly based on the encodings proposed in [12].", "startOffset": 114, "endOffset": 118}, {"referenceID": 21, "context": "Warners in [23].", "startOffset": 11, "endOffset": 15}, {"referenceID": 18, "context": "[20,19,2]) as a CNF formula.", "startOffset": 0, "endOffset": 9}, {"referenceID": 17, "context": "[20,19,2]) as a CNF formula.", "startOffset": 0, "endOffset": 9}, {"referenceID": 0, "context": "[20,19,2]) as a CNF formula.", "startOffset": 0, "endOffset": 9}, {"referenceID": 11, "context": "\u2013 DPLL-Enum+JW: DPLL-Enum with a branching heuristic based on the maximum number of occurrences of the variables [13]; \u2013 DPLL-Enum+RAND: DPLL-Enum with a random variable selection.", "startOffset": 113, "endOffset": 117}], "year": 2015, "abstractText": "Frequent itemset mining is an essential part of data analysis and data mining. Recent works propose interesting SAT-based encodings for the problem of discovering frequent itemsets. Our aim in this work is to define strategies for adapting SAT solvers to such encodings in order to improve models enumeration. In this context, we deeply study the effects of restart, branching heuristics and clauses learning. We then conduct an experimental evaluation on SAT-Based itemset mining instances to show how SAT solvers can be adapted to obtain an efficient SAT model enumerator.", "creator": "LaTeX with hyperref package"}}}