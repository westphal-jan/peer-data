{"id": "1506.02617", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Jun-2015", "title": "Path-SGD: Path-Normalized Optimization in Deep Neural Networks", "abstract": "we revisit examine the choice of sgd for training deep neural optimization networks by reconsidering the ideal appropriate geometry in which to optimize the constraint weights. we argue for a geometry invariant dedicated to rescaling of weights that does not actively affect the output of the network, and suggest path - sgd, which probably is an approximate even steepest descent method with respect to a path - wise regularizer possibly related theoretically to max - norm regularization. path - sgd is easy and efficient to implement and leads to empirical gains over sgd and adagrad.", "histories": [["v1", "Mon, 8 Jun 2015 19:01:33 GMT  (452kb,D)", "http://arxiv.org/abs/1506.02617v1", "12 pages, 5 figures"]], "COMMENTS": "12 pages, 5 figures", "reviews": [], "SUBJECTS": "cs.LG cs.CV cs.NE stat.ML", "authors": ["behnam neyshabur", "ruslan salakhutdinov", "nathan srebro"], "accepted": true, "id": "1506.02617"}, "pdf": {"name": "1506.02617.pdf", "metadata": {"source": "CRF", "title": "Path-SGD: Path-Normalized Optimization in Deep Neural Networks", "authors": ["Behnam Neyshabur", "Ruslan Salakhutdinov", "Nathan Srebro"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Training deep networks is a challenging problem [16, 2] and various heuristics and optimization algorithms have been suggested in order to improve the efficiency of the training [5, 9, 4]. However, training deep architectures is still considerably slow and the problem has remained open. Many of the current training methods rely on good initialization and then performing Stochastic Gradient Descent (SGD), sometimes together with an adaptive stepsize or momentum term [16, 1, 6].\nRevisiting the choice of gradient descent, we recall that optimization is inherently tied to a choice of geometry or measure of distance, norm or divergence. Gradient descent for example is tied to the `2 norm as it is the steepest descent with respect to `2 norm in the parameter space, while coordinate descent corresponds to steepest descent with respect to the `1 norm and exp-gradient (multiplicative weight) updates is tied to an entropic divergence. Moreover, at least when the objective function is convex, convergence behavior is tied to the corresponding norms or potentials. For example, with gradient descent, or SGD, convergence speeds depend on the `2 norm of the optimum. The norm or divergence can be viewed as a regularizer for the updates. There is therefore also a strong link between regularization for optimization and regularization for learning: optimization may provide implicit regularization in terms of its corresponding geometry, and for ideal optimization performance the optimization geometry should be aligned with inductive bias driving the learning [14].\nIs the `2 geometry on the weights the appropriate geometry for the space of deep networks? Or can we suggest a geometry with more desirable properties that would enable faster optimization and perhaps also better implicit regularization? As suggested above, this question is also linked to the choice of an appropriate regularizer for deep networks.\nFocusing on networks with RELU activations, we observe that scaling down the incoming edges to a hidden unit and scaling up the outgoing edges by the same factor yields an equivalent network computing the same function. Since predictions are invariant to such rescalings, it is natural to seek a geometry, and corresponding optimization method, that is similarly invariant.\nar X\niv :1\n50 6.\n02 61\n7v 1\n[ cs\n.L G\n] 8\nJ un\nWe consider here a geometry inspired by max-norm regularization (regularizing the maximum norm of incoming weights into any unit) which seems to provide a better inductive bias compared to the `2 norm (weight decay) [3, 15]. But to achieve rescaling invariance, we use not the max-norm itself, but rather the minimum max-norm over all rescalings of the weights. We discuss how this measure can be expressed as a \u201cpath regularizer\u201d and can be computed efficiently.\nWe therefore suggest a novel optimization method, Path-SGD , that is an approximate steepest descent method with respect to path regularization. Path-SGD is rescaling-invariant and we demonstrate that PathSGD outperforms gradient descent and AdaGrad for classifications tasks on several benchmark datasets.\nNotations A feedforward neural network that computes a function f : RD \u2192 RC can be represented by a directed acyclic graph (DAG) G(V,E) with D input nodes vin[1], . . . , vin[D] \u2208 V , C output nodes vout[1], . . . , vout[C] \u2208 V , weights w : E \u2192 R and an activation function \u03c3 : R \u2192 R that is applied on the internal nodes (hidden units). We denote the function computed by this network as fG,w,\u03c3. In this paper we focus on RELU (REctified Linear Unit) activation function \u03c3RELU(x) = max{0, x}. We refer to the depth d of the network which is the length of the longest directed path in G. For any 0 \u2264 i \u2264 d, we define V iin to be the set of vertices with longest path of length i to an input unit and V iout is defined similarly for paths to output units. In layered networks V iin = V d\u2212i out is the set of hidden units in a hidden layer i."}, {"heading": "2 Rescaling and Unbalanceness", "text": "One of the special properties of RELU activation function is non-negative homogeneity. That is, for any scalar c \u2265 0 and any x \u2208 R, we have \u03c3RELU(c \u00b7 x) = c \u00b7 \u03c3RELU(x). This interesting property allows the network to be rescaled without changing the function computed by the network. We define the rescaling function \u03c1c,v(w), such that given the weights of the network w : E \u2192 R, a constant c > 0, and a node v, the rescaling function multiplies the incoming edges and divides the outgoing edges of v by c. That is, \u03c1c,v(w) maps w to the weights w\u0303 for the rescaled network, where for any (u1 \u2192 u2) \u2208 E:\nw\u0303(u1\u2192u2) =  c.w(u1\u2192u2) u2 = v, 1 cw(u1\u2192u2) u1 = v,\nw(u1\u2192u2) otherwise.\n(1)\nIt is easy to see that the rescaled network computes the same function, i.e. fG,w,\u03c3RELU = fG,\u03c1c,v(w),\u03c3RELU . We say that the two networks with weights w and w\u0303 are rescaling equivalent denoted by w \u223c w\u0303 if and only if one of them can be transformed to another by applying a sequence of rescaling functions \u03c1c,v.\nGiven a training set S = {(x1, yn), . . . , (xn, yn)}, our goal is to minimize the following objective function:\nL(w) = 1\nn n\u2211 i=1 `(fw(xi), yi). (2)\nLetw(t) be the weights at step t of the optimization. We consider update step of the following formw(t+1) = w(t) + \u2206w(t+1). For example, for gradient descent, we have \u2206w(t+1) = \u2212\u03b7\u2207L(w(t)), where \u03b7 is the stepsize. In the stochastic setting, such as SGD or mini-batch gradient descent, we calculate the gradient on a small subset of the training set.\nSince rescaling equivalent networks compute the same function, it is desirable to have an update rule that is not affected by rescaling. We call an optimization method rescaling invariant if the updates of rescaling equivalent networks are rescaling equivalent. That is, if we start at either one of the two rescaling equivalent weight vectors w\u0303(0) \u223c w(0), after applying t update steps separately on w\u0303(0) and w(0), they will remain rescaling equivalent and we have w\u0303(t) \u223c w(t).\nUnfortunately, gradient descent is not rescaling invariant. The main problem with the gradient updates is that scaling down the weights of an edge will also scale up the gradient which, as we see later, is exactly the opposite of what is expected from a rescaling invariant update.\nFurthermore, gradient descent performs very poorly on \u201cunbalanced\u201d networks. We say that a network is balanced if the norm of incoming weights to different units are roughly the same or within a small range. For example, Figure 1(a) shows a huge gap in the performance of SGD initialized with a randomly generated balanced network w(0), when training on MNIST, compared to a network initialized with unbalanced weights w\u0303(0). Here w\u0303(0) is generated by applying a sequence of random rescaling functions on w(0) (and therefore w(0) \u223c w\u0303(0)).\nIn an unbalanced network, gradient descent updates could blow up the smaller weights, while keeping the larger weights almost unchanged. This is illustrated in Figure 1(b). If this were the only issue, one could scale down all the weights after each update. However, in an unbalanced network, the relative changes in the weights are also very different compared to a balanced network. For example, Figure 1(c) shows how two rescaling equivalent networks could end up computing a very different function after only a single update."}, {"heading": "3 Magnitude/Scale measures for deep networks", "text": "Following [12], we consider the grouping of weights going into each node of the network. This forms the following generic group-norm type regularizer, parametrized by 1 \u2264 p, q \u2264 \u221e:\n\u00b5p,q(w) = \u2211 v\u2208V  \u2211 (u\u2192v)\u2208E \u2223\u2223w(u\u2192v)\u2223\u2223p q/p  1/q . (3)\nTwo simple cases of above group-norm are p = q = 1 and p = q = 2 that correspond to overall `1 regularization and weight decay respectively. Another form of regularization that is shown to be very effective in RELU networks is the max-norm regularization, which is the maximum over all units of norm of incoming edge to the unit1 [3, 15]. The max-norm correspond to \u201cper-unit\u201d regularization when we set q = \u221e in equation (4) and can be written in the following form:\n\u00b5p,\u221e(w) = sup v\u2208V  \u2211 (u\u2192v)\u2208E \u2223\u2223w(u\u2192v)\u2223\u2223p 1/p (4)\nWeight decay is probably the most commonly used regularizer. On the other hand, per-unit regularization might not seem ideal as it is very extreme in the sense that the value of regularizer corresponds to the highest value among all nodes. However, the situation is very different for networks with RELU activations (and other activation functions with non-negative homogeneity property). In these cases, per-unit `2 regularization has shown to be very effective [15]. The main reason could be because RELU networks can be rebalanced in such a way that all hidden units have the same norm. Hence, per-unit regularization will not be a crude measure anymore.\nSince \u00b5p,\u221e is not rescaling invariant and the values of the scale measure are different for rescaling equivalent networks, it is desirable to look for the minimum value of a regularizer among all rescaling equivalent networks. Surprisingly, for a feed-forward network, the minimum `p per-unit regularizer among all rescaling equivalent networks can be efficiently computed by a single forward step. To see this, we consider the vector \u03c0(w), the path vector, where the number of coordinates of \u03c0(w) is equal to the total number of paths from the input to output units and each coordinate of \u03c0(w) is the equal to the product of weights along a path from an input nodes to an output node. The `p-path regularizer is then defined as the `p norm of \u03c0(w) [12]:\n\u03c6p(w) = \u2016\u03c0(w)\u2016p =  \u2211 vin[i] e1\u2192v1 e2\u2192v2... ed\u2192vout[j] \u2223\u2223\u2223\u2223\u2223 d\u220f k=1 wek \u2223\u2223\u2223\u2223\u2223 p  1/p\n(5)\nThe following Lemma establishes that the `p-path regularizer corresponds to the minimum over all equivalent networks of the per-unit `p norm:\nLemma 3.1 ([12]). \u03c6p(w) = min w\u0303\u223cw\n( \u00b5p,\u221e(w\u0303) )d 1This definition of max-norm is a bit different than the one used in the context of matrix factorization [13]. The later is similar to the minimum upper bound over `2 norm of both outgoing edges from the input units and incoming edges to the output units in a two layer feed-forward network.\nThe definition (5) of the `p-path regularizer involves an exponential number of terms. But it can be computed efficiently by dynamic programming in a single forward step using the following equivalent form as nested sums:\n\u03c6p(w) =  \u2211 (vd\u22121\u2192vout[j])\u2208E \u2223\u2223w(vd\u22121\u2192vout[j])\u2223\u2223p \u2211 (vd\u22122\u2192vd\u22121)\u2208E . . . \u2211 (vin[i]\u2192v1)\u2208E \u2223\u2223w(vin[i]\u2192v1)\u2223\u2223p 1/p\nA straightforward consequence of Lemma 3.1 is that the `p path-regularizer \u03c6p is invariant to rescaling, i.e. for any w\u0303 \u223c w, \u03c6p(w\u0303) = \u03c6p(w)."}, {"heading": "4 Path-SGD : An Approximate Path-Regularized Steepest Descent", "text": "Motivated by empirical performance of max-norm regularization and the fact that path-regularizer is invariant to rescaling, we are interested in deriving the steepest descent direction with respect to the path regularizer \u03c6p(w):\nw(t+1) = arg min w\n\u03b7 \u2329 \u2207L(w(t)), w \u232a + 1\n2 \u2225\u2225\u2225\u03c0(w)\u2212 \u03c0(w(t))\u2225\u2225\u22252 p\n(6)\n= arg min w\n\u03b7 \u2329 \u2207L(w(t)), w \u232a +  \u2211 vin[i] e1\u2192v1 e2\u2192v2... ed\u2192vout[j] ( d\u220f k=1 wek \u2212 d\u220f k=1 w(t)ek ) )p 2/p\n= arg min w J (t)(w)\nThe steepest descent step (6) is hard to calculate exactly. Instead, we will update each coordinate we independently (and synchronously) based on (6). That is:\nw(t+1)e = arg minwe J (t)(w) s.t. \u2200e\u2032 6=e we\u2032 = w (t) e\u2032 (7)\nTaking the partial derivative with respect to we and setting it to zero we obtain:\n0 = \u03b7 \u2202L\n\u2202we (w(t))\u2212\n( we \u2212 w(t)e ) \u2211 vin[i]\u00b7\u00b7\u00b7 e\u2192...vout[j] \u220f ek 6=e \u2223\u2223\u2223w(t)e \u2223\u2223\u2223p  2/p\nwhere vin[i] \u00b7 \u00b7 \u00b7 e\u2192 . . . vout[j] denotes the paths from any input unit i to any output unit j that includes e. Solving for we gives us the following update rule:\nw\u0302(t+1)e = w (t) e \u2212\n\u03b7\n\u03b3p(w(t), e)\n\u2202L \u2202w (w(t)) (8)\nwhere \u03b3p(w, e) is given as\n\u03b3p(w, e) =  \u2211 vin[i]\u00b7\u00b7\u00b7 e\u2192...vout[j] \u220f ek 6=e |wek | p  2/p\n(9)\nWe call the optimization using the update rule (8) path-normalized gradient descent. When used in stochastic settings, we refer to it as Path-SGD .\nNow that we know Path-SGD is an approximate steepest descent with respect to the path-regularizer, we can ask whether or not this makes Path-SGD a rescaling invariant optimization method. The next theorem proves that Path-SGD is indeed rescaling invariant.\nAlgorithm 1 Path-SGD update rule 1: \u2200v\u2208V 0in \u03b3in(v) = 1 . Initialization 2: \u2200v\u2208V 0out \u03b3out(v) = 1 3: for i = 1 to d do 4: \u2200v\u2208V iin\u03b3in(v) = \u2211 (u\u2192v)\u2208E \u03b3in(u)\n\u2223\u2223w(u,v)\u2223\u2223p 5: \u2200v\u2208V iout\u03b3out(v) = \u2211 (v\u2192u)\u2208E\n\u2223\u2223w(v,u)\u2223\u2223p \u03b3out(u) 6: end for 7: \u2200(u\u2192v)\u2208E \u03b3(w(t), (u, v)) = \u03b3in(u)2/p\u03b3out(v)2/p 8: \u2200e\u2208Ew(t+1)e = w(t)e \u2212 \u03b7\u03b3(w(t),e) \u2202L \u2202we (w(t)) . Update Rule\nTheorem 4.1. Path-SGD is rescaling invariant.\nProof. It is sufficient to prove that using the update rule (8), for any c > 0 and any v \u2208 E, if w\u0303(t) = \u03c1c,v(w\n(t)), then w\u0303(t+1) = \u03c1c,v(w(t+1)). For any edge e in the network, if e is neither incoming nor outgoing edge of the node v, then w\u0303(e) = w(e), and since the gradient is also the same for edge e we have w\u0303 (t+1) e = w (t+1) e . However, if e is an incoming edge to v, we have that w\u0303(t)(e) = cw(t)(e). Moreover, since the outgoing edges of v are divided by c, we get \u03b3p(w\u0303(t), e) = \u03b3p(w(t),e)\nc2 and \u2202L\u2202we (w\u0303 (t)) = \u2202Lc\u2202we (w (t)).\nTherefore,\nw\u0303(t+1)e = cw (t) e \u2212\nc2\u03b7\n\u03b3p(w(t), e)\n\u2202L\nc\u2202we (w(t))\n= c ( w(t) \u2212 \u03b7\n\u03b3p(w(t), e)\n\u2202L\n\u2202we (w(t))\n) = cw(t+1)e .\nA similar argument proves the invariance of Path-SGD update rule for outgoing edges of v. Therefore, Path-SGD is rescaling invariant.\nEfficient Implementation: The Path-SGD update rule (8), in the way it is written, needs to consider all the paths, which is exponential in the depth of the network. However, it can be calculated in a time that is no more than a forward-backward step on a single data point. That is, in a mini-batch setting with batch sizeB, if the backpropagation on the mini-batch can be done in time BT , the running time of the Path-SGD on the mini-batch will be roughly (B + 1)T \u2013 a very moderate runtime increase with typical mini-batch sizes of hundreds or thousands of points. Algorithm 1 shows an efficient implementation of the Path-SGD update rule.\nWe next compare Path-SGD to other optimization methods in both balanced and unbalanced settings."}, {"heading": "5 Experiments", "text": "In this section, we compare `2-Path-SGD to two commonly used optimization methods in deep learning, SGD and AdaGrad. We conduct our experiments on four common benchmark datasets: the standard MNIST dataset of handwritten digits [8]; CIFAR-10 and CIFAR-100 datasets of tiny images of natural scenes [7]; and Street View House Numbers (SVHN) dataset containing color images of house numbers collected by Google Street View [10]. Details of the datasets are shown in Table 1.\nIn all of our experiments, we trained feed-forward networks with two hidden layers, each containing 4000 hidden units. We used mini-batches of size 100 and the step-size of 10\u2212\u03b1, where \u03b1 is an integer between 0 and 10. To choose \u03b1, for each dataset, we considered the validation errors over the validation set\n(10000 randomly chosen points that are kept out during the initial training) and picked the one that reaches the minimum error faster. We then trained the network over the entire training set. All the networks were trained both with and without dropout. When training with dropout, at each update step, we retained each\nunit with probability 0.5. We tried both balanced and unbalanced initializations. In balanced initialization, incoming weights to each unit v are initialized to i.i.d samples from a Gaussian distribution with standard deviation 1/ \u221a\nfan-in(v). In the unbalanced setting, we first initialized the weights to be the same as the balanced weights. We then picked 2000 hidden units randomly with replacement. For each unit, we multiplied its incoming edge and divided its outgoing edge by 10c, where c was chosen randomly from log-normal distribution.\nThe optimization results without dropout are shown in Figure 2. For each of the four datasets, the plots for objective function (cross-entropy), the training error and the test error are shown from left to right where in each plot the values are reported on different epochs during the optimization. Although we proved that Path-SGD updates are the same for balanced and unbalanced initializations, to verify that despite numerical issues they are indeed identical, we trained Path-SGD with both balanced and unbalanced initializations. Since the curves were exactly the same we only show a single curve.\nWe can see that as expected, the unbalanced initialization considerably hurts the performance of SGD\nand AdaGrad (in many cases their training and test errors are not even in the range of the plot to be displayed), while Path-SGD performs essentially the same. Another interesting observation is that even in the balanced settings, not only does Path-SGD often get to the same value of objective function, training and test error faster, but also the final generalization error for Path-SGD is sometimes considerably lower than SGD and AdaGrad (except CIFAR-100 where the generalization error for SGD is slightly better compared to Path-SGD ). The plots for test errors could also imply that implicit regularization due to steepest descent with respect to path-regularizer leads to a solution that generalizes better. This view is similar to observations in [11] on the role of implicit regularization in deep learning.\nThe results for training with dropout are shown in Figure 3, where here we suppressed the (very poor) results on unbalanced initializations. We observe that except for MNIST, Path-SGD convergences much faster than SGD or AdaGrad. It also generalizes better to the test set, which again shows the effectiveness of path-normalized updates.\nThe results suggest that Path-SGD outperforms SGD and AdaGrad in two different ways. First, it can achieve the same accuracy much faster and second, the implicit regularization by Path-SGD leads to a local minima that can generalize better even when the training error is zero. This can be better analyzed by looking at the plots for more number of epochs which we have provided in Figures 4 and 5. We should also point that Path-SGD can be easily combined with AdaGrad to take advantage of the adaptive stepsize or used together with a momentum term. This could potentially perform even better compare to Path-SGD ."}, {"heading": "6 Discussion", "text": "We revisited the choice of the Euclidean geometry on the weights of RELU networks, suggested an alternative optimization method approximately corresponding to a different geometry, and showed that using such an alternative geometry can be beneficial. In this work we show proof-of-concept success, and we expect Path-SGD to be beneficial also in large-scale training for very deep convolutional networks. Combining Path-SGD with AdaGrad, with momentum or with other optimization heuristics might further enhance results.\nAlthough we do believe Path-SGD is a very good optimization method, and is an easy plug-in for SGD, we hope this work will also inspire others to consider other geometries, other regularizers and perhaps better, update rules. A particular property of Path-SGD is its rescaling invariance, which we argue is appropriate for RELU networks. But Path-SGD is certainly not the only rescaling invariant update possible, and other invariant geometries might be even better.\nFinally, we choose to use steepest descent because of its simplicity of implementation. A better choice might be mirror descent with respect to an appropriate potential function, but such a construction seems particularly challenging considering the non-convexity of neural networks."}, {"heading": "Acknowledgments", "text": "Research was partially funded by NSF award IIS-1302662 and Intel ICRI-CI. We thank Hao Tang for insightful discussions."}], "references": [{"title": "Adaptive subgradient methods for online learning and stochastic optimization", "author": ["John Duchi", "Elad Hazan", "Yoram Singer"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["Xavier Glorot", "Yoshua Bengio"], "venue": "In AISTATS,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Delving deep into rectifiers: Surpassing human-level performance on imagenet classification", "author": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun"], "venue": "arXiv preprint arXiv:1502.01852,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["Sergey Ioffe", "Christian Szegedy"], "venue": "In arXiv,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "Adam: A method for stochastic optimization", "author": ["D.P. Kingma", "J. Ba"], "venue": "CoRR, abs/1412.6980", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2014}, {"title": "Learning multiple layers of features from tiny images", "author": ["Alex Krizhevsky", "Geoffrey Hinton"], "venue": "Computer Science Department,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2009}, {"title": "Gradient-based learning applied to document recognition", "author": ["Yann LeCun", "L\u00e9on Bottou", "Yoshua Bengio", "Patrick Haffner"], "venue": "Proceedings of the IEEE,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1998}, {"title": "Optimizing neural networks with kronecker-factored approximate curvature", "author": ["James Martens", "Roger Grosse"], "venue": "In ICML,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Reading digits in natural images with unsupervised feature learning", "author": ["Yuval Netzer", "Tao Wang", "Adam Coates", "Alessandro Bissacco", "Bo Wu", "Andrew Y Ng"], "venue": "In NIPS workshop on deep learning and unsupervised feature learning,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2011}, {"title": "In search of the real inductive bias: On the role of implicit regularization in deep learning", "author": ["Behnam Neyshabur", "Ryota Tomioka", "Nathan Srebro"], "venue": "International Conference on Learning Representations (ICLR) workshop track,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "Norm-based capacity control in neural networks", "author": ["Behnam Neyshabur", "Ryota Tomioka", "Nathan Srebro"], "venue": "COLT,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Rank, trace-norm and max-norm", "author": ["Nathan Srebro", "Adi Shraibman"], "venue": "In Learning Theory,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2005}, {"title": "On the universality of online mirror descent", "author": ["Nathan Srebro", "Karthik Sridharan", "Ambuj Tewari"], "venue": "In Advances in neural information processing systems,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2011}, {"title": "Dropout: A simple way to prevent neural networks from overfitting", "author": ["Nitish Srivastava", "Geoffrey Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1929}, {"title": "George Dahl", "author": ["I. Sutskever", "J. Martens"], "venue": "and Geoffery Hinton. On the importance of momentum and initialization in deep learning. In ICML", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2013}], "referenceMentions": [{"referenceID": 14, "context": "1 Introduction Training deep networks is a challenging problem [16, 2] and various heuristics and optimization algorithms have been suggested in order to improve the efficiency of the training [5, 9, 4].", "startOffset": 63, "endOffset": 70}, {"referenceID": 1, "context": "1 Introduction Training deep networks is a challenging problem [16, 2] and various heuristics and optimization algorithms have been suggested in order to improve the efficiency of the training [5, 9, 4].", "startOffset": 63, "endOffset": 70}, {"referenceID": 3, "context": "1 Introduction Training deep networks is a challenging problem [16, 2] and various heuristics and optimization algorithms have been suggested in order to improve the efficiency of the training [5, 9, 4].", "startOffset": 193, "endOffset": 202}, {"referenceID": 7, "context": "1 Introduction Training deep networks is a challenging problem [16, 2] and various heuristics and optimization algorithms have been suggested in order to improve the efficiency of the training [5, 9, 4].", "startOffset": 193, "endOffset": 202}, {"referenceID": 2, "context": "1 Introduction Training deep networks is a challenging problem [16, 2] and various heuristics and optimization algorithms have been suggested in order to improve the efficiency of the training [5, 9, 4].", "startOffset": 193, "endOffset": 202}, {"referenceID": 14, "context": "Many of the current training methods rely on good initialization and then performing Stochastic Gradient Descent (SGD), sometimes together with an adaptive stepsize or momentum term [16, 1, 6].", "startOffset": 182, "endOffset": 192}, {"referenceID": 0, "context": "Many of the current training methods rely on good initialization and then performing Stochastic Gradient Descent (SGD), sometimes together with an adaptive stepsize or momentum term [16, 1, 6].", "startOffset": 182, "endOffset": 192}, {"referenceID": 4, "context": "Many of the current training methods rely on good initialization and then performing Stochastic Gradient Descent (SGD), sometimes together with an adaptive stepsize or momentum term [16, 1, 6].", "startOffset": 182, "endOffset": 192}, {"referenceID": 12, "context": "There is therefore also a strong link between regularization for optimization and regularization for learning: optimization may provide implicit regularization in terms of its corresponding geometry, and for ideal optimization performance the optimization geometry should be aligned with inductive bias driving the learning [14].", "startOffset": 324, "endOffset": 328}, {"referenceID": 13, "context": "We consider here a geometry inspired by max-norm regularization (regularizing the maximum norm of incoming weights into any unit) which seems to provide a better inductive bias compared to the `2 norm (weight decay) [3, 15].", "startOffset": 216, "endOffset": 223}, {"referenceID": 0, "context": "Notations A feedforward neural network that computes a function f : RD \u2192 RC can be represented by a directed acyclic graph (DAG) G(V,E) with D input nodes vin[1], .", "startOffset": 158, "endOffset": 161}, {"referenceID": 0, "context": ", vin[D] \u2208 V , C output nodes vout[1], .", "startOffset": 34, "endOffset": 37}, {"referenceID": 10, "context": "3 Magnitude/Scale measures for deep networks Following [12], we consider the grouping of weights going into each node of the network.", "startOffset": 55, "endOffset": 59}, {"referenceID": 13, "context": "Another form of regularization that is shown to be very effective in RELU networks is the max-norm regularization, which is the maximum over all units of norm of incoming edge to the unit1 [3, 15].", "startOffset": 189, "endOffset": 196}, {"referenceID": 13, "context": "In these cases, per-unit `2 regularization has shown to be very effective [15].", "startOffset": 74, "endOffset": 78}, {"referenceID": 10, "context": "The `p-path regularizer is then defined as the `p norm of \u03c0(w) [12]: \u03c6p(w) = \u2016\u03c0(w)\u2016p = \uf8ec\uf8ed \u2211 vin[i] e1 \u2192v1 e2 \u2192v2.", "startOffset": 63, "endOffset": 67}, {"referenceID": 10, "context": "1 ([12]).", "startOffset": 3, "endOffset": 7}, {"referenceID": 11, "context": "\u03c6p(w) = min w\u0303\u223cw ( \u03bcp,\u221e(w\u0303) )d This definition of max-norm is a bit different than the one used in the context of matrix factorization [13].", "startOffset": 135, "endOffset": 139}, {"referenceID": 6, "context": "We conduct our experiments on four common benchmark datasets: the standard MNIST dataset of handwritten digits [8]; CIFAR-10 and CIFAR-100 datasets of tiny images of natural scenes [7]; and Street View House Numbers (SVHN) dataset containing color images of house numbers collected by Google Street View [10].", "startOffset": 111, "endOffset": 114}, {"referenceID": 5, "context": "We conduct our experiments on four common benchmark datasets: the standard MNIST dataset of handwritten digits [8]; CIFAR-10 and CIFAR-100 datasets of tiny images of natural scenes [7]; and Street View House Numbers (SVHN) dataset containing color images of house numbers collected by Google Street View [10].", "startOffset": 181, "endOffset": 184}, {"referenceID": 8, "context": "We conduct our experiments on four common benchmark datasets: the standard MNIST dataset of handwritten digits [8]; CIFAR-10 and CIFAR-100 datasets of tiny images of natural scenes [7]; and Street View House Numbers (SVHN) dataset containing color images of house numbers collected by Google Street View [10].", "startOffset": 304, "endOffset": 308}], "year": 2015, "abstractText": "We revisit the choice of SGD for training deep neural networks by reconsidering the appropriate geometry in which to optimize the weights. We argue for a geometry invariant to rescaling of weights that does not affect the output of the network, and suggest Path-SGD, which is an approximate steepest descent method with respect to a path-wise regularizer related to max-norm regularization. Path-SGD is easy and efficient to implement and leads to empirical gains over SGD and AdaGrad.", "creator": "LaTeX with hyperref package"}}}