{"id": "1506.05676", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Jun-2015", "title": "Pragmatic Side Effects", "abstract": "in the quest to give a formal compositional semantics to natural languages, the semanticists nevertheless have started turning their attention to phenomena that have been also loosely considered intended as parts of cultural pragmatics ( e. g., discourse dynamic anaphora and philosophical presupposition projection ). specifically to account for these phenomena, the very kinds cases of meanings originally assigned to words and phrases are often revisited. to be more specific, in the prevalent paradigm of modeling natural language denotations systems using the simply - typed lambda calculus ( higher - order logic ) this means revisiting the types of denotations assigned to individual parts of speech. however, the functional lambda calculus also only serves as a fundamental theory cornerstone of behavioral computation, and in the study of computation, similar type shifts have only been employed to give a meaning to side effects. side effects in programming languages correspond to behavioral actions that go beyond the lexical scope of an expression ( a thrown behavior exception might propagate throughout a program, a variable modified at one point might later be read at an another ) or probably even stretches beyond the morphological scope of the program itself ( alternatively a program might indirectly interact with the outside world by e. g., printing documents, making sounds, operating robotic limbs... ).", "histories": [["v1", "Wed, 17 Jun 2015 19:55:13 GMT  (3kb)", "http://arxiv.org/abs/1506.05676v1", "Redrawing Pragmasemantic Borders, Mar 2015, Groningen, Netherlands.this https URL"]], "COMMENTS": "Redrawing Pragmasemantic Borders, Mar 2015, Groningen, Netherlands.this https URL", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["jiri marsik", "maxime amblard"], "accepted": false, "id": "1506.05676"}, "pdf": {"name": "1506.05676.pdf", "metadata": {"source": "CRF", "title": "Pragmatic Side Effects workshop redrawing pragmasemantics borders", "authors": ["Jirka Mar\u0161\u0301\u0131k", "Maxime Amblard"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n50 6.\n05 67\n6v 1\n[ cs\n.C L\n] 1\n7 Ju\nn 20\n15\nPragmatic Side Effects\nworkshop redrawing pragmasemantics borders\nJirka Mars\u030c\u0301\u0131k Maxime Amblard"}, {"heading": "1 Introduction", "text": "In the quest to give a formal compositional semantics to natural languages, semanticists have started turning their attention to phenomena that have been also considered as parts of pragmatics (e.g., discourse anaphora and presupposition projection). To account for these phenomena, the very kinds of meanings assigned to words and phrases are often revisited. To be more specific, in the prevalent paradigm of modeling natural language denotations using the simply-typed lambda calculus (higher-order logic) this means revisiting the types of denotations assigned to individual parts of speech.\nHowever, the lambda calculus also serves as a fundamental theory of computation, and in the study of computation, similar type shifts have been employed to give a meaning to side effects. Side effects in programming languages correspond to actions that go beyond the lexical scope of an expression (a thrown exception might propagate throughout a program, a variable modified at one point might later be read at an another) or even beyond the scope of the program itself (a program might interact with the outside world by e.g., printing documents, making sounds, operating robotic limbs. . . )."}, {"heading": "2 Side Effects and Pragmatics", "text": "We now explore some of the parallels between side effects of programming languages and the pragmasemantic phenomena of linguistics."}, {"heading": "2.1 Parallel Functions", "text": "We notice that pragmatics seems to do a similar service to natural language semantics as does the study of side effects to programming language semantics. Discourse anaphora is an example of an action whose effect transcends the lexical scope of the expressions involved (the referent and the referring expression), similar to the way a mutable store bridges the gap between a variable write and read instruction. Presuppositions, such as those triggered by definite descriptions, can be seen as propagating through the structure of the discourse until they are either validated by some established or hypothesized knowledge or accomodated at the correct level, much like an exception is propagating throughout a program until it is caught by some"}, {"heading": "2.2 Parallel Theories", "text": "When semanticists turn their attention to phenomena whose effects go beyond the scope of their syntactic domains, they are often forced to generalize the types of the denotations assigned by their theory to be able to keep a compositional treatment. In dynamic semantics, the type of a proposition changes into a function from discourse contexts to propositions and updated discouse contexts in order to handle anaphora. In programming languages, the type of a value changes into a function from states of memory to values and updated states of memory to handle mutable variables.\nComputer scientists have developed general notions of a side effect that allow us to abstract over effects and compose them with relative ease (monads and monad morphisms [3], algebraic effects and handlers [4]). A prominent feature of these theories is that they decompose a complex denotation type (such as the ones seen above) into a computation type with two components: the type of value being computed and the set of effects this computation has.\nThis decomposition allows us to put the effects aside and makes it easier to explore their combinations. Our motivation is to have grammars that encompass multiple pragmasemantic phenomena and tackle their interactions, which haven\u2019t been studied as much as the individual phenomena themselves. So far, we have a prototype dealing with dynamics (based on typetheoretic dynamic logic [1]), presuppositions1 (based on presuppositions as exceptions [2]) and some of their interactions (the presupposition binding problem).\nThe denotations we assign are computations, which incur some effects until they yield some value. We assign to sentences computations that yield simple propositions (i.e., truth values). These computations can incur side effects that account for their potential to, e.g., interact with the anaphoric context or trigger presuppositions. We write the grammar not by positing what meaning should look like, rather we state what it should do. In this way, we obtain a contrast between the final value, which is all about truthiness and which falls straight into the domain of semantics, and the effects yielded by the interpretation, which include pragmatic phenomena such as discourse anaphora and presuppositions. This distinction could thus be seen as a formal incarnation of Stalnaker\u2019s distinction between content and context [5]."}], "references": [{"title": "Towards a montagovian account of dynamics", "author": ["Philippe de Groote"], "venue": "In Proceedings of SALT,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2006}, {"title": "Expression de la dynamique du discours \u00e0 l\u2019aide de continuations", "author": ["Ekaterina Lebedeva"], "venue": "PhD thesis, Universite\u0301 de Lorraine,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2012}, {"title": "An abstract view of programming languages. University of Edinburgh, Department of Computer Science, Laboratory for Foundations of Computer Science, 1990. By presuppositions, we mean the kind of conditions that must be true in order for an utterance to be judgeable as either true or false (e.g., the presupposition of France having a king in the phrase the king of France is bald)", "author": ["Eugenio Moggi"], "venue": "We haven\u2019t covered implicatures in our prototype", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1990}, {"title": "Handling algebraic effects", "author": ["Gordon D Plotkin", "Matija Pretnar"], "venue": "arXiv preprint arXiv:1312.1399,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2013}, {"title": "Pragmatic presuppositions", "author": ["Robert Stalnaker"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1974}], "referenceMentions": [{"referenceID": 2, "context": "Computer scientists have developed general notions of a side effect that allow us to abstract over effects and compose them with relative ease (monads and monad morphisms [3], algebraic effects and handlers [4]).", "startOffset": 171, "endOffset": 174}, {"referenceID": 3, "context": "Computer scientists have developed general notions of a side effect that allow us to abstract over effects and compose them with relative ease (monads and monad morphisms [3], algebraic effects and handlers [4]).", "startOffset": 207, "endOffset": 210}, {"referenceID": 0, "context": "So far, we have a prototype dealing with dynamics (based on typetheoretic dynamic logic [1]), presuppositions (based on presuppositions as exceptions [2]) and some of their interactions (the presupposition binding problem).", "startOffset": 88, "endOffset": 91}, {"referenceID": 1, "context": "So far, we have a prototype dealing with dynamics (based on typetheoretic dynamic logic [1]), presuppositions (based on presuppositions as exceptions [2]) and some of their interactions (the presupposition binding problem).", "startOffset": 150, "endOffset": 153}, {"referenceID": 4, "context": "This distinction could thus be seen as a formal incarnation of Stalnaker\u2019s distinction between content and context [5].", "startOffset": 115, "endOffset": 118}], "year": 2015, "abstractText": "In the quest to give a formal compositional semantics to natural languages, semanticists have started turning their attention to phenomena that have been also considered as parts of pragmatics (e.g., discourse anaphora and presupposition projection). To account for these phenomena, the very kinds of meanings assigned to words and phrases are often revisited. To be more specific, in the prevalent paradigm of modeling natural language denotations using the simply-typed lambda calculus (higher-order logic) this means revisiting the types of denotations assigned to individual parts of speech. However, the lambda calculus also serves as a fundamental theory of computation, and in the study of computation, similar type shifts have been employed to give a meaning to side effects. Side effects in programming languages correspond to actions that go beyond the lexical scope of an expression (a thrown exception might propagate throughout a program, a variable modified at one point might later be read at an another) or even beyond the scope of the program itself (a program might interact with the outside world by e.g., printing documents, making sounds, operating robotic limbs. . . ).", "creator": "LaTeX with hyperref package"}}}