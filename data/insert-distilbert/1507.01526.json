{"id": "1507.01526", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Jul-2015", "title": "Grid Long Short-Term Memory", "abstract": "this paper introduces grid long spatial short - term memory, a proprietary network of lstm cells arranged in a multidimensional grid that can be applied to vectors, sequences or higher dimensional data such as images. the network differs from existing layered deep lstm architectures in claiming that the cells are connected between network layers as well as along individually the spatiotemporal dimensions of the data. it therefore provides a unified way of using lstm for both deep and sequential computation. we apply the model to algorithmic tasks such as integer addition and determining the parity of random binary vectors. it is able to solve these problems for 15 - digit integers and 250 - bit vectors respectively. we then give results for three empirical tasks. we find that 2d grid lstm achieves 1. 47 bits per character level on the wikipedia character prediction benchmark, which is state - of - the - art among neural approaches. we also observe that a two - dimensional translation model based on grid lstm repeatedly outperforms a phrase - based reference system on a chinese - to - english translation task, and that 3d block grid lstm yields a near state - \u2013 of - the - art error extraction rate of 0. 32 % on mnist.", "histories": [["v1", "Mon, 6 Jul 2015 16:30:05 GMT  (442kb,D)", "http://arxiv.org/abs/1507.01526v1", "14 pages"], ["v2", "Fri, 20 Nov 2015 17:40:17 GMT  (444kb,D)", "http://arxiv.org/abs/1507.01526v2", "15 pages"], ["v3", "Thu, 7 Jan 2016 18:39:48 GMT  (444kb,D)", "http://arxiv.org/abs/1507.01526v3", "15 pages"]], "COMMENTS": "14 pages", "reviews": [], "SUBJECTS": "cs.NE cs.CL cs.LG", "authors": ["nal kalchbrenner", "ivo danihelka", "alex graves"], "accepted": true, "id": "1507.01526"}, "pdf": {"name": "1507.01526.pdf", "metadata": {"source": "CRF", "title": "Grid Long Short-Term Memory", "authors": ["Nal Kalchbrenner", "Ivo Danihelka", "Google DeepMind", "Alex Graves"], "emails": [], "sections": [{"heading": null, "text": "This paper introduces Grid Long Short-Term Memory, a network of LSTM cells arranged in a multidimensional grid that can be applied to vectors, sequences or higher dimensional data such as images. The network differs from existing deep LSTM architectures in that the cells are connected between network layers as well as along the spatiotemporal dimensions of the data. It therefore provides a unified way of using LSTM for both deep and sequential computation. We apply the model to algorithmic tasks such as integer addition and determining the parity of random binary vectors. It is able to solve these problems for 15-digit integers and 250-bit vectors respectively. We then give results for three empirical tasks. We find that 2D Grid LSTM achieves 1.47 bits per character on the Wikipedia character prediction benchmark, which is state-of-the-art among neural approaches. We also observe that a two-dimensional translation model based on Grid LSTM outperforms a phrase-based reference system on a Chinese-to-English translation task, and that 3D Grid LSTM yields a near state-of-the-art error rate of 0.32% on MNIST."}, {"heading": "1 Introduction", "text": "Long Short-Term Memory (LSTM) networks are recurrent neural networks equipped with a special gating mechanism that controls access to memory cells [20]. Since the gates can prevent the rest of the network from modifying the contents of the memory cells for multiple time steps, LSTM networks preserve signals and propagate errors for much longer than ordinary recurrent neural networks. By independently reading, writing and erasing content from the memory cells, the gates can also learn to attend to specific parts of the input signals and ignore other parts. These properties allow LSTM networks to process data with complex and separated interdependencies and to excel in a range of sequence learning domains such as speech recognition [14], offline hand-writing recognition [15], machine translation [35] and image-to-caption generation [36, 25].\nEven for non-sequential data, the recent success of deep networks has shown that long chains of sequential computation are key to finding and exploiting complex patterns. Deep networks suffer from exactly the same problems as recurrent networks applied to long sequences: namely that information from past computations rapidly attenuates as it progresses through the chain \u2013 the vanishing gradient problem [18] \u2013 and that each layer cannot dynamically select or ignore its inputs. It therefore seems attractive to generalise the advantages of LSTM to deep computation.\nWe extend LSTM cells to deep networks within a unified architecture. We introduce Grid LSTM, a network that is arranged in a grid of one or more dimensions. The network has LSTM cells along any or all of the dimensions of the grid. The depth dimension is treated like the other dimensions and also uses LSTM cells to communicate directly from one layer to the next. Since the number N of dimensions in the grid can easily be 2 or more, we propose a novel, robust way for modulating the N-way communication across the LSTM cells.\nar X\niv :1\n50 7.\n01 52\n6v 1\n[ cs\n.N E\n] 6\nJ ul\n2 01\nN-dimensional Grid LSTM (N-LSTM for short) can naturally be applied as feed-forward networks as well as recurrent ones. One-dimensional Grid LSTM corresponds to a feed-forward network that uses LSTM cells in place of transfer functions such as tanh and ReLU [31]. These networks are related to Highway Networks [33] where a gated transfer function is used to successfully train feedforward networks with up to 900 layers of depth. Grid LSTM with two dimensions is analogous to the Stacked LSTM, but it adds cells along the depth dimension too. Grid LSTM with three or more dimensions is analogous to Multidimensional LSTM [14, 35, 13, 12], but differs from it not just by having the cells along the depth dimension, but also by using the proposed mechanism for modulating the N-way interaction that is not prone to the instability present in Multidimesional LSTM.\nWe study some of the learning properties of Grid LSTM in three algorithmic tasks. When trained on the highly non-linear parity function of k-bit strings [30, 6], one-dimensional Grid LSTM networks find solutions for up to k = 250 input bits, whereas feed-forward networks equipped with other transfer functions find solutions only up to k = 30 bits. We compare the performance of two-dimensional Grid LSTM to Stacked LSTM on computing the addition of two 15-digit integers without curriculum learning and on memorizing sequences of numbers [39]. We find that in these settings having cells along the depth dimension is more effective than not having them; similarly, tying the weights across the layers is also more effective than untying the weights, despite the reduced number of parameters.\nWe also apply Grid LSTM to three empirical tasks. The architecture achieves 1.47 bits-per-character in the 100M characters Wikipedia dataset [22] outperforming other neural networks. Secondly, we use Grid LSTM to define a novel neural translation model that views translation as a two-dimensional mapping. The network outperforms the reference phrase-based CDEC system [8] on the IWSLT BTEC Chinese-to-Ensligh translation task. Thirdly, we apply three-dimensional Grid LSTM to classifying MNIST digits and achieve near state-of-the-art test set error of 0.32%.\nThe outline of the paper is as follows. In Sect. 2 we describe standard LSTM networks that comprise the background. In Sect. 3 we define the Grid LSTM architecture. In Sect. 4 we consider the six experiments and we conclude in Sect. 5."}, {"heading": "2 Background", "text": "We begin by describing the standard LSTM recurrent neural network and the derived Stacked and Multidimensional LSTM networks; some aspects of the networks motivate the Grid LSTM."}, {"heading": "2.1 Long Short-Term Memory", "text": "The LSTM network processes a sequence of input and target pairs (x1, y1), ..., (xm, ym). For each pair (xi, yi) the LSTM network takes the new input xi and produces an estimate for the target yi given all the previous inputs x1, ..., xi. The past inputs x1, ..., xi\u22121 determine the state of the network that comprises a hidden vector h \u2208 Rd and a memory vector m \u2208 Rd. The computation at"}, {"heading": "2d Grid LSTMStacked LSTM", "text": "each step is defined as follows [14]: gu = \u03c3(Wu \u2217H) gf = \u03c3(Wf \u2217H) go = \u03c3(Wo \u2217H) gc = tanh(Wc \u2217H) m\u2032 = gf m+ gu gc\nh\u2032 = tanh(go m\u2032)\n(1)\nwhere \u03c3 is the logistic sigmoid function, Wu,Wf ,Wo,Wc in Rd\u00d72d are the recurrent weight matrices of the network and H \u2208 R2d is the concatenation of the new input xi, transformed by a projection matrix I , and the previous hidden vector h:\nH = [ I \u2217 xi h ] (2)\nThe computation outputs new hidden and memory vectors h\u2032 and m\u2032 that comprise the next state of the network. The estimate for the target is then computed in terms of the hidden vector h\u2032. We use the functional LSTM(\u00b7, \u00b7, \u00b7) as shorthand for Eq. 1 as follows: (h\u2032,m\u2032) = LSTM(H,m,W) (3) where W concatenates the four weight matrices Wu,Wf ,Wo,Wc.\nOne aspect of LSTM networks is the role of the gates gu,gf ,go and gc. The forget gate gf can delete parts of the previous memory vector mi\u22121 whereas the gate gc can write new content to the new memory mi modulated by the input gate gu. The output gate controls what is then read from the new memory mi onto the hidden vector hi. The mechanism has two important learning properties. Each memory vector is obtained by a linear transformation of the previous memory vector and the gates; this ensures that the forward signals from one step to the other are not repeatedly squashed by a non-linearity such as tanh and that the backward error signals do not decay sharply at each step, an issue known as the vanishing gradient problem [19]. The mechanism also acts as a memory and implicit attention system, whereby the signal from some input xi can be written to the memory vector and attended to in parts across multiple steps by being retrieved one part at a time."}, {"heading": "2.2 Stacked LSTM", "text": "A model that is closely related to the standard LSTM network is Stacked LSTM [14, 35]. Stacked LSTM adds capacity by stacking LSTM layers on top of each other. The output hidden vector hi in\nEq. 1 from the LSTM below is taken as the input to the LSTM above in place of I \u2217xi. The Stacked LSTM is depicted in Fig. 2. Note that although the LSTM cells are present along the sequential computation of each LSTM network, they are not present in the vertical computation from one layer to the next."}, {"heading": "2.3 Multidimensional LSTM", "text": "Another related model is Multidimensional LSTM [13]. Here the inputs are not arranged in a sequence, but in a N -dimensional grid, such as the two-dimensional grid of pixels in an image. At each input x in the array the network receives N hidden vectors h1, ...,hN and N memory vectors m1, ...,mN and computes a hidden vector h and a memory vector m that are passed as the next state for each of the N dimensions. The network concatenates the transformed input I \u2217 x and the N hidden vectors h1, ...,hN into a vector H and as in Eq. 1 computes gu,go and gc, as well as N forget gates gfi . These gates are then used to compute the memory vector as follows:\nm = N\u2211 i gfi mi + gu gc (4)\nAs the number of paths in a grid grows combinatorially with the size of each dimension and the total number of dimensions N , the values in m can grow at the same rate due to the unconstrained summation in Eq. 4. This can cause instability for large grids, and adding cells along the depth dimension increases N and exacerbates the problem. This motivates the simple alternate way of computing the output memory vectors in the Grid LSTM."}, {"heading": "3 Architecture", "text": "Grid LSTM deploys cells along any or all of the dimensions including the depth of the network. In the context of predicting a sequence, the Grid LSTM has cells along two dimensions, the temporal one of the sequence itself and the vertical one along the depth. To modulate the interaction of the cells in the two dimensions, the Grid LSTM proposes a simple mechanism where the values in the cells cannot grow combinatorially as in Eq. 4. In this section we describe the multidimensional blocks and the way in which they are combined to form a Grid LSTM."}, {"heading": "3.1 Grid LSTM Blocks", "text": "As in multidimensional LSTM, a N-dimensional block in a Grid LSTM receives as input N hidden vectors h1, ...,hN andN memory vectors m1, ...,mN . Unlike the multidimensional case, the block outputs N hidden vectors h\u20321, ...,h \u2032 N and N memory vectors m \u2032 1, ...,m \u2032 N that are all distinct.\nThe computation is simple and proceeds as follows. The model first concatenates the input hidden vectors from the N dimensions:\nH = h1... hN  (5) Then the block computes N transforms LSTM(\u00b7, \u00b7, \u00b7), one for each dimension, obtaining the desired output hidden and memory vectors:\n(h\u20321,m \u2032 1) = LSTM(H,m1,W1)\n...\n(h\u2032N ,m \u2032 N ) = LSTM(H,mN ,WN )\n(6)\nEach transform has distinct weight matrices Wui ,W f i ,W o i ,W c i in Rd\u00d7Nd and applies the standard LSTM mechanism across the respective dimension. Note how the vector H that contains all the input hidden vectors is shared across the transforms, whereas the input memory vectors affect the N -way interaction but are not directly combined. N-dimensional blocks can naturally be arranged in a N-dimensional grid forming a Grid LSTM. As for a block, the grid has N sides with incoming hidden and memory vectors and N sides with outgoing hidden and memory vectors. Note that a block does not receive a separate data representation. A data point is projected into the network via a pair of input hidden and memory vectors along one of the sides of the grid."}, {"heading": "3.2 Priority Dimensions", "text": "In a N-dimensional block the transforms for all dimensions are computed in parallel. But it can be useful for a dimension to know the outputs of the transforms from the other dimensions, especially if the outgoing vectors from that dimension will be used to estimate the target. For instance, to prioritize the first dimension of the network, the block first computes the N \u2212 1 transforms for the other dimensions obtaining the output hidden vectors h\u20322, ...,h \u2032 N . Then the block concatenates these output hidden vectors and the input hidden vector h1 for the first dimension into a new vector H\u2032 as follows:\nH\u2032 =  h1 h\u20322 ...\nh\u2032N  (7) The vector is then used in the final transform to obtain the prioritized output hidden and memory vectors h\u20321 and m \u2032 1."}, {"heading": "3.3 Non-LSTM Dimensions", "text": "In Grid LSTM networks that have only a few blocks along a given dimension in the grid, it can be useful to just have regular connections along that dimension without the use of cells. This can be naturally accomplished inside the block by using for that dimension in Eq. 6 a simple transformation with a nonlinear activation function instead of the transform LSTM(\u00b7, \u00b7, \u00b7). Given a weight matrix V \u2208 Rd\u00d7Nd, for the first dimension this looks as follows:\nh\u20321 = \u03b1(V \u2217H) (8) where \u03b1 is a standard nonlinear transfer function or simply the identity. This allows us to see how, modulo the differences in the mechanism inside the blocks, Grid LSTM networks generalize the models in Sect. 2. A 2d Grid LSTM applied to temporal sequences with cells in the temporal dimension but not in the vertical depth dimension, corresponds to the Stacked LSTM. Likewise, the 3d Grid LSTM without cells along the depth corresponds to Multidimensional LSTM, stacked with one or more layers."}, {"heading": "3.4 Inputs from Multiple Sides", "text": "If we picture a N-dimensional block as in Fig. 1, we see that N of the sides of the block have input vectors associated with them and the other N sides have output vectors. As the blocks are arranged in\na grid, this separation extends to the grid as a whole; each side of the grid has either input or output vectors associated with it. In certain tasks that have inputs of different types, a model can exploit this separation by projecting each type of input on a different side of the grid. The mechanism inside the blocks ensures that the hidden and memory vectors from the different sides will interact closely without being conflated. This is the case in the neural translation model introduced in Sect. 4 where source words and target words are projected on two different sides of a Grid LSTM."}, {"heading": "3.5 Weight Sharing", "text": "Sharing of weight matrices can be specified along any dimension in a Grid LSTM and it can be useful to induce invariance in the computation along that dimension. As in the translation and image models, if multiple sides of a grid need to share weights, capacity can be added to the model by introducing into the grid a new dimension without sharing of weights."}, {"heading": "4 Experiments", "text": "We first report the results on the three algorithmic tasks and then we focus on the three empirical tasks, involving character prediction, translation and digit image classification."}, {"heading": "4.1 Parity", "text": "We apply one-dimensional Grid LSTM to learning parity. Given a string b1, ..., bk of k bits 0 or 1, the parity or generalized XOR of the string is defined to be 1 if the sum of the bits is odd, and 0 if the sum of the bits is even. Although manually crafted neural networks for the problem have been devised [21], training a generic neural network from a finite number of examples and a generic\nrandom initialization of the weights to successfully learn to compute the parity of k-bit strings for significant values of k is a longstanding problem [30, 6]. It is core to the problem that the k-bit string is given to the neural network as a whole through a single projection; considering one bit at a time and remembering the previous partial result in a recurrent or multi-step architecture reduces the problem of learning k-bit parity to the simple one of learning just 2-bit parity. Learning parity is difficult because a change in a single bit in the input changes the target value and the decision boundaries in the resulting space are highly non-linear.\nWe train 1-LSTM networks with tied weights and we compare them with fully-connected feedforward networks with ReLU or tanh activation functions and with either tied or untied weights. We search the space of hyper-parameters as follows. The 1-LSTM networks are trained with either 500 or 1500 hidden units and having from 1 to 150 hidden layers. The 1-LSTM networks are trained on input strings that have from k = 20 to k = 250 bits in increments of 10. The feed-forward ReLU and tanh networks are trained with 500, 1500 or 3000 units and also having from 1 to 150 hidden layers. The latter networks are trained on input bit strings that have between k = 20 and k = 60 bits in increments of 5. Each network is trained with a maximum of 10 million samples or four days of computation on a Tesla K40m GPU. For the optimization we use mini-batches of size 20 and the AdaGrad rule with a learning rate of 0.06 [7]. A network is considered to have found the solution if the network correctly computes the parity of 100 randomly sampled unseen k-bit strings. Due to the nature of the problem, during training the predicted accuracy is never better than random guessing and when the network finds a solution the accuracy suddenly spikes to 100%.\nFigure 4 depicts the results of the experiments with 1-LSTM networks and Figure 5 relates the best performing networks of each type. For the feed-forward ReLU and tanh networks with either tied or untied weights, we find that these networks fail to find solutions for k = 35 bits and beyond. Some networks in the search space find solutions for k = 30 input bits. By contrast, as represented in Fig. 4, tied 1-LSTM networks find solutions for up to k = 250 bits.\nThere appears to be a correlation between the length k of the input bit strings and the minimum depth of the 1-LSTM networks. The minimum depth of the networks increases with k suggesting that longer bit strings need more operations to be applied to them; however, the rate of growth is sublinear suggesting that more than a single bit of the input is considered at every step. We visualized the activations of the memory vectors obtained via a feed-forward pass through one of the 1-LSTM networks using selected input bit strings (Fig. 5). This revealed the prominent presence of counting neurons that keep a counter for the number of layers processed so far. These two aspects seem to suggest that the networks are using the cells to process the bit string sequentially by attending to parts of it at each step in the computation, a seemingly crucial feature that is not available in ReLU or tanh transfer functions."}, {"heading": "4.2 Addition", "text": "We next experiment with 2-LSTM networks on learning to sum two 15-digit integers. The problem formulation is similar to that in [39], where each number is given to the network one digit at a time and the result is also predicted one digit at a time. The input numbers are separated by delimiter\nsymbols and an end-of-result symbol is predicted by the network; these symbols as well as input and target padding are indicated by \u2212. An example is as follows:\n\u2212 1 2 3 \u2212 8 9 9 \u2212 \u2212 \u2212 \u2212 \u2212w \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 1 0 2 2 \u2212\nContrary to the work in [39] that uses from 4 to 9 digits for the input integers, we fix the number of digits to 15, we do not use curriculum learning strategies and we do not put digits from the partially predicted output back into the network, forcing the network to remember its partial predictions and making the task more challenging. The predicted output numbers have either 15 or 16 digits.\nWe compare the performance of 2-LSTM networks with that of standard Stacked LSTM (Fig. 2). We train the two types of networks with either tied or untied weights, with 400 hidden units each and with between 1 and 50 layers. We train the network with stochastic gradient descent using minibatches of size 15 and the Adam optimizer with a learning rate of 0.001 [24]. We train the networks for up to 5 million samples or until they reach 100% accuracy on a random sample of 100 unseen addition problems. Note that since during training all samples are randomly generated, training and test accuracy agree closely.\nFigure 6 relates the results of the experiments on the addition problem. The best performing tied 2-LSTM is 18 layers deep and learns to perfectly solve the task in less than 550K training samples. We find that tied 2-LSTM networks generally perform better than untied 2-LSTM networks, which is likely due to the repetitive nature of the steps involved in the addition algorithm. The best untied 2-LSTM network has 5 layers, learns more slowly and achieves a per-digit accuracy of 67% after 5 million examples. 2-LSTM networks in turn perform better than either tied or untied Stacked LSTM networks, where more stacked layers do not improve over the single-layer models. We see that the cells present a clear advantage for the deep 2-LSTM networks by helping to mitigate the vanishing of gradients along the depth dimension."}, {"heading": "4.3 Memorization", "text": "For our third algorithmic task, we analyze the performance of 2-LSTM networks on the task of memorizing a random sequence of symbols. The sequences are 20 symbols long and we use a vocabulary of 64 symbols encoded as one-hot vectors and given to the network one symbol per step. The setup is similar to the one for addition above. The network is tasked with reading the input\nsequence and outputting the same sequence unchanged:\n\u2212 \u03b1 \u03b2 \u03b3 \u2212 \u2212 \u2212 \u2212w \u2212 \u2212 \u2212 \u2212 \u03b1 \u03b2 \u03b3 \u2212\nSince the sequences are randomly generated, there is no correlation between successive symbols and the network must memorize the whole sequence without compression.\nWe train 2-LSTM and Stacked LSTM with either tied or untied weights on the memorization task. All networks have 100 hidden units and have between 1 and 50 layers. We use mini-batches of size 15 and optimize the network using Adam and a learning rate of 0.001. As above, we train each network for up to 5 million samples or until they reach 100% accuracy on 100 unseen samples. Accuracy is measured per individual symbol, not per sequence. We do not use curriculum learning or other training strategies.\nFigure 7 reports the performance of the networks. The small number of hidden units contributes to making the training of the networks difficult. But we see that tied 2-LSTM networks are most successful and learn to solve the task with the smallest number of samples. The 43-layer tied 2- LSTM network learns a solution with less than 150K samples. Although there is fairly high variance amid the solving networks, deeper networks tend to learn faster. In addition, there is large difference in the performance of tied 2-LSTM networks and tied Stacked LSTM networks. The latter perform with much lower accuracy and Stacked LSTM networks with more than 16 layers do not reach an accuracy of more than 50%. Here we see that the optimization property of the cells in the depth dimension delivers a large gain. Similarly to the case of the addition problem, both the untied 2- LSTM networks and the untied Stacked LSTM networks take significantly longer to learn than the respective counterparts with tied weights, but the advantage of the cells in the depth direction clearly emerges for untied 2-LSTM networks too."}, {"heading": "4.4 Character-Level Language Modelling", "text": "We next test the 2-LSTM network on the Hutter challenge Wikipedia dataset [22]. The aim is to successively predict the next character in the corpus. The dataset has 100 million characters. We follow the splitting procedure of [4], where the last 5 million characters are used for testing. The alphabet has 205 characters in total.\nWe use a tied 2-LSTM with 1000 hidden units and 6 layers of depth. As in Fig. 2 and in the previous tasks, the characters are projected both to form the initial input hidden and cell vectors and the top softmax layer is connected to the topmost output hidden and cell vectors. The model has a total of 2000 \u00d7 4000 + 205 \u00d7 4 \u00d7 1000 = 8.82 \u00d7 106 parameters. As usual the objective is to minimize the negative log-likelihood of the character sequence under the model. Training is performed by sampling sequences of 10000 characters and processing them in order. We back propagate the errors every 50 characters. The initial cell and hidden vectors in the temporal direction are initialized to zero only at the beginning of each sequence; they maintain their forward propagated values after each update in order to simulate full back propagation. We use mini-batches of 100, thereby processing 100 sequences of 10000 characters each in parallel. The network is trained with Adam with a learning rate of 0.001 and training proceeds for approximately 20 epochs.\nFigure 8 reports the bits-per-character performance together with the number of parameters of various recently proposed models on the dataset. The tied 2-LSTM significantly outperforms other models despite having fewer parameters. More layers of depth and adding capacity by untying some of the weights are likely to further enhance the 2-LSTM."}, {"heading": "4.5 Translation", "text": "We next use the flexibility of Grid LSTM to define a novel neural translation model. In the neural approach to machine translation one trains a neural network end-to-end to map the source sentence to the target sentence [23, 35, 3]. The mapping is usually performed within the encoder-decoder framework. A neural network, that can be convolutional or recurrent, first encodes the source sentence and then the computed representation of the source conditions a recurrent neural network to generate the target sentence. This approach has yielded strong empirical results, but it can suffer from a bottleneck. The encoding of the source sentence must contain information about all the words and their order; the decoder network in turn cannot easily revisit the unencoded source sentence to make decisions based on partially produced translations. This issue can be alleviated by a soft attention mechanism in the decoder neural network that uses gates to focus on specific parts of the source sentence [1].\nWe use Grid LSTM to view translation in a novel fashion as a two-dimensional mapping. One dimension processes the source sentence whereas the other dimension produces the target sentence. The size of the representation of the source sentence varies with length and the source sentence is repeatedly scanned based on each generated target word. As represented in Fig. 9, for each target word, beginning with the start-of-target-sentence symbol, the network scans the source sentence one\nway in the first layer and the other way in the second layer; the scan depends on all the target words that have been generated so far and at each block the two layers communicate directly. Note that, like the attention-based model [1], the two-dimensional translation model has complexity O(nm), where n andm are respectively the length of the source and target; by contrast the recurrent encoderdecoder model only has complexity O(m+ n). This gives additional computational capacity to the former models.\nBesides addressing the bottleneck, the two-dimensional setup aims at explicitly capturing the invariance present in translation. Translation patterns between two languages are invariant above all to position and scale of the pattern. For instance, reordering patterns - such as the one that maps the English \u201cdo not \u3008verb\u3009\u201d to the French \u201cne \u3008verb\u3009 pas\u201d, or the one that sends a part of an English verb to the end of a German sentence - should be detected and applied independently of where they occur in the source sentence or of the number of words involved in that instance of the pattern. To capture this, the Grid LSTM translation model shares the weights across the source and target dimensions. In addition, a hierarchy of stacked two-dimensional grids in opposite directions is used to both increase capacity and help with learning longer scale translation patterns. The resulting model is a three-dimensional Grid LSTM where hierarchy grows along the third dimension. The model is depicted in Fig. 9.\nWe evaluate the Grid LSTM translation model on the IWSLT BTEC Chinese-to-English corpus that consists of 44016 pairs of source and target sentences for training, 1006 for development and 503 for testing. The corpus has about 0.5M words in each language, a source vocabulary of 7055 Chinese words and a target vocabulary of 5646 English words (after replacing words that occur only once with the UNK symbol). Target sentences are on average around 12 words long. The development and test corpora come with 15 reference translations. The 3-LSTM uses two two-dimensional grids of 3-LSTM blocks for the hierarchy. Since the network has just two layers in the third dimension, we use regular identity connections without nonlinear transfer function along the third dimension, as defined in Sect. 3.3; the source and target dimensions have tied weights and LSTM cells. The processing is bidirectional, in that the first grid processes the source sentence from beginning to end and the second one from end to beginning. This allows for the shortest distance that the signal travels between input and output target words to be constant and independent of the length of the source. Note that the second grid receives an input coming from the grid below at each 3-LSTM block. We train seven models with vectors of size 450 and apply dropout with probability 0.5 to the hidden vectors within the blocks. For the optimization we use Adam with a learning rate of 0.001. At decoding the output probabilities are averaged across the models. The beam search has size 20 and we discard all candidates that are shorter than half of the length of the source sentence. The results are shown in Fig. 9. Our best model reaches a perplexity of 4.54 on the test data. We use as baseline the state-of-the-art hierarchical phrase-based system CDEC [8]. We see that the Grid LSTM significantly outperforms the baseline system on both the validation and test data sets."}, {"heading": "4.6 MNIST Digit Recognition", "text": "In our last experiment we apply a 3-LSTM network to images. We consider non-overlapping patches of pixels in an image as forming a two-dimensional grid of inputs. The 3-LSTM performs computations with LSTM cells along three different dimensions. Two of the dimensions correspond to the two spatial dimensions of the grid, whereas the remaining dimension is the depth of the network. Like in a convolutional neural network [26], the same three-way transform of the 3-LSTM is applied at all parts of the grid, ensuring that the same features can be extracted across all parts of the input image. Due to the unbounded context size of the 3-LSTM, the computations of features at one end of the image can be influenced by the features computed at the other end of the image within the same layer. Due to the cells along the depth direction, features from the present patch can be passed onto the next layer either unprocessed or as processed by the layer itself as a function of neighboring patches.\nWe construct the network as depicted in Fig. 11. We divide the 28\u00d728 MNIST image into p\u00d7p pixel patches, where p is a small number such as 2 or 4. The patches are then linearized and projected into two vectors of the size of the hidden layer of the 3-LSTM; the projected vectors are the input hidden and memory vectors at the first layer in the depth direction of the 3-LSTM. At each layer the computation of the 3-LSTM starts from one corner of the image, follows the two spatial dimensions and ends in the opposite corner of the image. The network has a few layers of depth, each layer\nstarting the computation at one of the corners of the image. In the current form there is no pooling between successive layers of the 3-LSTM. The topmost layer concatenates all the output hidden and memory vectors at all parts of the grid. These are then passed through a layer of ReLUs and a final softmax layer.\nThe setup has some similarity with the original application of Multidimensional LSTM to images [12] and with the recently described ReNet architecture [37]. The difference with the former is that we apply multiple layers of depth to the image, use three-dimensional blocks and concatenate the top output vectors before classification. The difference with the ReNet architecture is that the 3-LSTM processes the image according to the two inherent spatial dimensions; instead of stacking hidden layers as in the ReNet, the block also modulates directly what information is passed along the depth dimension.\nThe training details are as follows. The MNIST dataset consists of 50000 training images, 10000 validation images and 10000 test images. The pixel values are normalized by dividing them by 255. Data augmentation is performed by shifting training images from 0 to 4 pixels in the horizontal and vertical directions and padding with zero values. The shift in the two directions is chosen uniformly at random. Validation samples are used for retraining the best model settings found during the grid search. We train the 3-LSTM both with and without cells in the depth dimension. The 3-LSTM with the cells uses patches of 2 \u00d7 2 pixels, has four LSTM layers with 100 hidden units and one ReLU layer with 4096 units. The 3-LSTM without the cells in the depth dimension has input patches of size 3\u00d7 3 obtained by cropping the image to a size of 27\u00d7 27, it also has four LSTM layers of 100 units and has a ReLU layer of 2048 units. For the latter model we use ReLU as transfer function for the depth direction as in Eq. 6. We use mini-batches of size 128 and train the models using Adam and a learning rate of 0.001.\nFigure 12 reports test set errors of our models and that of competing approaches. We can see that even in the absence of pooling the 3-LSTM with the cells performs near the state-of-the-art. The 3-LSTM without the cells also performs quite well; the cells in the depth direction likely help with the feature extraction at the higher layers. The other approaches, with the exception of ReNet, are convolutional neural networks."}, {"heading": "5 Conclusion", "text": "We have introduced Grid LSTM, a network that uses LSTM cells along all of the dimensions and modulates in a novel fashion the multi-way interaction. We have seen the advantages of the cells compared to regular connections in solving tasks such as parity, addition and memorization. We\nhave described powerful and flexible ways of applying the model to character prediction, machine translation and image classification, showing strong performance across the board."}, {"heading": "Acknowledgements", "text": "We thank Koray Kavukcuoglu, Razvan Pascanu, Ilya Sutskever and Oriol Vinyals for helpful comments and discussions."}], "references": [{"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "CoRR, abs/1409.0473,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2014}, {"title": "Learning long-term dependencies with gradient descent is difficult", "author": ["Yoshua Bengio", "Patrice Simard", "Paolo Frasconi"], "venue": "IEEE Transactions on Neural Networks,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1994}, {"title": "Learning phrase representations using RNN encoder-decoder for statistical machine", "author": ["Kyunghyun Cho", "Bart van Merrienboer", "\u00c7aglar G\u00fcl\u00e7ehre", "Fethi Bougares", "Holger Schwenk", "Yoshua Bengio"], "venue": "translation. CoRR,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "Gated feedback recurrent neural networks", "author": ["Junyoung Chung", "\u00c7aglar G\u00fcl\u00e7ehre", "KyungHyun Cho", "Yoshua Bengio"], "venue": "CoRR, abs/1502.02367,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Multi-column deep neural networks for image classification", "author": ["Dan Claudiu Ciresan", "Ueli Meier", "J\u00fcrgen Schmidhuber"], "venue": "In arXiv:1202.2745v1 [cs.CV],", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Adaptive subgradient methods for online learning and stochastic optimization", "author": ["John Duchi", "Elad Hazan", "Yoram Singer"], "venue": "Technical Report UCB/EECS-2010-24, EECS Department,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2010}, {"title": "cdec: A decoder, alignment, and learning framework for finite-state and context-free translation models", "author": ["Chris Dyer", "Adam Lopez", "Juri Ganitkevitch", "Johnathan Weese", "Ferhan Ture", "Phil Blunsom", "Hendra Setiawan", "Vladimir Eidelman", "Philip Resnik"], "venue": "In Proceedings of the Association for Computational Linguistics (ACL),", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "Fractional max-pooling", "author": ["Benjamin Graham"], "venue": "CoRR, abs/1412.6071,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Spatially-sparse convolutional neural networks", "author": ["Benjamin Graham"], "venue": "CoRR, abs/1409.6070,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "Supervised sequence labelling with recurrent neural networks, volume 385", "author": ["A. Graves"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2012}, {"title": "Multi-dimensional recurrent neural networks", "author": ["A. Graves", "S. Fern\u00e1ndez", "J. Schmidhuber"], "venue": "In Proceedings of the 2007 International Conference on Artificial Neural Networks,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2007}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["A. Graves", "A. Mohamed", "G. Hinton"], "venue": "In Proc ICASSP", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2013}, {"title": "Offline handwriting recognition with multidimensional recurrent neural networks", "author": ["A. Graves", "J. Schmidhuber"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2008}, {"title": "Generating sequences with recurrent neural networks", "author": ["Alex Graves"], "venue": "CoRR, abs/1308.0850,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "LSTM: A search space odyssey", "author": ["Klaus Greff", "Rupesh Kumar Srivastava", "Jan Koutn\u0131\u0301k", "Bas R. Steunebrink", "J\u00fcrgen Schmidhuber"], "venue": "CoRR, abs/1503.04069,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2015}, {"title": "Untersuchungen zu dynamischen neuronalen Netzen", "author": ["S. Hochreiter"], "venue": "Diploma thesis, Institut fu\u0308r Informatik, Lehrstuhl Prof. Brauer, Technische Universita\u0308t Mu\u0308nchen,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1991}, {"title": "Gradient flow in recurrent nets: the difficulty of learning long-term dependencies", "author": ["S. Hochreiter", "Y. Bengio", "P. Frasconi", "J. Schmidhuber"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2001}, {"title": "Long Short-Term Memory", "author": ["S. Hochreiter", "J. Schmidhuber"], "venue": "Neural Computation,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1997}, {"title": "Solving the n-bit parity problem using neural networks", "author": ["Myron E. Hohil", "Derong Liu", "Stanley H. Smith"], "venue": "Neural Networks,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 1999}, {"title": "The human knowledge compression", "author": ["Marcus Hutter"], "venue": null, "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2012}, {"title": "Recurrent continuous translation models", "author": ["Nal Kalchbrenner", "Phil Blunsom"], "venue": "Seattle, October", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2013}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik P. Kingma", "Jimmy Ba"], "venue": "CoRR, abs/1412.6980,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2014}, {"title": "Unifying visual-semantic embeddings with multimodal neural language models", "author": ["Ryan Kiros", "Ruslan Salakhutdinov", "Richard S. Zemel"], "venue": "CoRR, abs/1411.2539,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2014}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 1998}, {"title": "Deeply-supervised nets", "author": ["Chen-Yu Lee", "Saining Xie", "Patrick Gallagher", "Zhengyou Zhang", "Zhuowen Tu"], "venue": "In Proceedings of the Eighteenth International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2015}, {"title": "Convolutional kernel networks", "author": ["Julien Mairal", "Piotr Koniusz", "Za\u0131\u0308d Harchaoui", "Cordelia Schmid"], "venue": "Neural Information Processing Systems,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2014}, {"title": "Perceptrons: An Introduction to Computational Geometry", "author": ["Seymour Papert Marvin Minsky"], "venue": null, "citeRegEx": "30", "shortCiteRegEx": "30", "year": 1972}, {"title": "Rectified linear units improve restricted boltzmann machines", "author": ["Vinod Nair", "Geoffrey E. Hinton"], "venue": "In Proceedings of the 27th International Conference on Machine Learning", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2010}, {"title": "Best practices for convolutional neural networks applied to visual document analysis", "author": ["Patrice Y. Simard", "David Steinkraus", "John C. Platt"], "venue": "In 7th International Conference on Document Analysis and Recognition (ICDAR", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2003}, {"title": "Generating text with recurrent neural networks", "author": ["I. Sutskever", "J. Martens", "G. Hinton"], "venue": "In ICML,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2011}, {"title": "Sequence to sequence learning with neural networks", "author": ["Ilya Sutskever", "Oriol Vinyals", "Quoc VV Le"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2014}, {"title": "Show and tell: A neural image caption generator", "author": ["Oriol Vinyals", "Alexander Toshev", "Samy Bengio", "Dumitru Erhan"], "venue": "arXiv preprint arXiv:1411.4555,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2014}, {"title": "Renet: A recurrent neural network based alternative to convolutional networks", "author": ["Francesco Visin", "Kyle Kastner", "Kyunghyun Cho", "Matteo Matteucci", "Aaron C. Courville", "Yoshua Bengio"], "venue": "CoRR, abs/1505.00393,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2015}, {"title": "Regularization of neural networks using dropconnect", "author": ["Li Wan", "Matthew D. Zeiler", "Sixin Zhang", "Yann LeCun", "Rob Fergus"], "venue": "In ICML (3),", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2013}, {"title": "Learning to execute", "author": ["Wojciech Zaremba", "Ilya Sutskever"], "venue": "CoRR, abs/1410.4615,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2014}], "referenceMentions": [{"referenceID": 17, "context": "Long Short-Term Memory (LSTM) networks are recurrent neural networks equipped with a special gating mechanism that controls access to memory cells [20].", "startOffset": 147, "endOffset": 151}, {"referenceID": 11, "context": "These properties allow LSTM networks to process data with complex and separated interdependencies and to excel in a range of sequence learning domains such as speech recognition [14], offline hand-writing recognition [15], machine translation [35] and image-to-caption generation [36, 25].", "startOffset": 178, "endOffset": 182}, {"referenceID": 12, "context": "These properties allow LSTM networks to process data with complex and separated interdependencies and to excel in a range of sequence learning domains such as speech recognition [14], offline hand-writing recognition [15], machine translation [35] and image-to-caption generation [36, 25].", "startOffset": 217, "endOffset": 221}, {"referenceID": 30, "context": "These properties allow LSTM networks to process data with complex and separated interdependencies and to excel in a range of sequence learning domains such as speech recognition [14], offline hand-writing recognition [15], machine translation [35] and image-to-caption generation [36, 25].", "startOffset": 243, "endOffset": 247}, {"referenceID": 31, "context": "These properties allow LSTM networks to process data with complex and separated interdependencies and to excel in a range of sequence learning domains such as speech recognition [14], offline hand-writing recognition [15], machine translation [35] and image-to-caption generation [36, 25].", "startOffset": 280, "endOffset": 288}, {"referenceID": 22, "context": "These properties allow LSTM networks to process data with complex and separated interdependencies and to excel in a range of sequence learning domains such as speech recognition [14], offline hand-writing recognition [15], machine translation [35] and image-to-caption generation [36, 25].", "startOffset": 280, "endOffset": 288}, {"referenceID": 15, "context": "Deep networks suffer from exactly the same problems as recurrent networks applied to long sequences: namely that information from past computations rapidly attenuates as it progresses through the chain \u2013 the vanishing gradient problem [18] \u2013 and that each layer cannot dynamically select or ignore its inputs.", "startOffset": 235, "endOffset": 239}, {"referenceID": 27, "context": "One-dimensional Grid LSTM corresponds to a feed-forward network that uses LSTM cells in place of transfer functions such as tanh and ReLU [31].", "startOffset": 138, "endOffset": 142}, {"referenceID": 11, "context": "Grid LSTM with three or more dimensions is analogous to Multidimensional LSTM [14, 35, 13, 12], but differs from it not just by having the cells along the depth dimension, but also by using the proposed mechanism for modulating the N-way interaction that is not prone to the instability present in Multidimesional LSTM.", "startOffset": 78, "endOffset": 94}, {"referenceID": 30, "context": "Grid LSTM with three or more dimensions is analogous to Multidimensional LSTM [14, 35, 13, 12], but differs from it not just by having the cells along the depth dimension, but also by using the proposed mechanism for modulating the N-way interaction that is not prone to the instability present in Multidimesional LSTM.", "startOffset": 78, "endOffset": 94}, {"referenceID": 10, "context": "Grid LSTM with three or more dimensions is analogous to Multidimensional LSTM [14, 35, 13, 12], but differs from it not just by having the cells along the depth dimension, but also by using the proposed mechanism for modulating the N-way interaction that is not prone to the instability present in Multidimesional LSTM.", "startOffset": 78, "endOffset": 94}, {"referenceID": 9, "context": "Grid LSTM with three or more dimensions is analogous to Multidimensional LSTM [14, 35, 13, 12], but differs from it not just by having the cells along the depth dimension, but also by using the proposed mechanism for modulating the N-way interaction that is not prone to the instability present in Multidimesional LSTM.", "startOffset": 78, "endOffset": 94}, {"referenceID": 26, "context": "When trained on the highly non-linear parity function of k-bit strings [30, 6], one-dimensional Grid LSTM networks find solutions for up to k = 250 input bits, whereas feed-forward networks equipped with other transfer functions find solutions only up to k = 30 bits.", "startOffset": 71, "endOffset": 78}, {"referenceID": 34, "context": "We compare the performance of two-dimensional Grid LSTM to Stacked LSTM on computing the addition of two 15-digit integers without curriculum learning and on memorizing sequences of numbers [39].", "startOffset": 190, "endOffset": 194}, {"referenceID": 19, "context": "47 bits-per-character in the 100M characters Wikipedia dataset [22] outperforming other neural networks.", "startOffset": 63, "endOffset": 67}, {"referenceID": 6, "context": "The network outperforms the reference phrase-based CDEC system [8] on the IWSLT BTEC Chinese-to-Ensligh translation task.", "startOffset": 63, "endOffset": 66}, {"referenceID": 11, "context": "each step is defined as follows [14]: g = \u03c3(W \u2217H) g = \u03c3(W \u2217H) g = \u03c3(W \u2217H) g = tanh(W \u2217H) m\u2032 = g m+ g g h\u2032 = tanh(g m\u2032) (1)", "startOffset": 32, "endOffset": 36}, {"referenceID": 16, "context": "Each memory vector is obtained by a linear transformation of the previous memory vector and the gates; this ensures that the forward signals from one step to the other are not repeatedly squashed by a non-linearity such as tanh and that the backward error signals do not decay sharply at each step, an issue known as the vanishing gradient problem [19].", "startOffset": 348, "endOffset": 352}, {"referenceID": 11, "context": "A model that is closely related to the standard LSTM network is Stacked LSTM [14, 35].", "startOffset": 77, "endOffset": 85}, {"referenceID": 30, "context": "A model that is closely related to the standard LSTM network is Stacked LSTM [14, 35].", "startOffset": 77, "endOffset": 85}, {"referenceID": 10, "context": "Another related model is Multidimensional LSTM [13].", "startOffset": 47, "endOffset": 51}, {"referenceID": 18, "context": "Although manually crafted neural networks for the problem have been devised [21], training a generic neural network from a finite number of examples and a generic", "startOffset": 76, "endOffset": 80}, {"referenceID": 26, "context": "random initialization of the weights to successfully learn to compute the parity of k-bit strings for significant values of k is a longstanding problem [30, 6].", "startOffset": 152, "endOffset": 159}, {"referenceID": 5, "context": "06 [7].", "startOffset": 3, "endOffset": 6}, {"referenceID": 34, "context": "The problem formulation is similar to that in [39], where each number is given to the network one digit at a time and the result is also predicted one digit at a time.", "startOffset": 46, "endOffset": 50}, {"referenceID": 34, "context": "Contrary to the work in [39] that uses from 4 to 9 digits for the input integers, we fix the number of digits to 15, we do not use curriculum learning strategies and we do not put digits from the partially predicted output back into the network, forcing the network to remember its partial predictions and making the task more challenging.", "startOffset": 24, "endOffset": 28}, {"referenceID": 21, "context": "001 [24].", "startOffset": 4, "endOffset": 8}, {"referenceID": 13, "context": "BPC Parameters Alphabet Size Test data Stacked LSTM [16] 1.", "startOffset": 52, "endOffset": 56}, {"referenceID": 29, "context": "67 27M 205 last 4MB MRNN [34] 1.", "startOffset": 25, "endOffset": 29}, {"referenceID": 3, "context": "9M 86 last 10MB GFRNN [4] 1.", "startOffset": 22, "endOffset": 25}, {"referenceID": 19, "context": "We next test the 2-LSTM network on the Hutter challenge Wikipedia dataset [22].", "startOffset": 74, "endOffset": 78}, {"referenceID": 3, "context": "We follow the splitting procedure of [4], where the last 5 million characters are used for testing.", "startOffset": 37, "endOffset": 40}, {"referenceID": 6, "context": "Test CDEC [8] 50.", "startOffset": 10, "endOffset": 13}, {"referenceID": 20, "context": "In the neural approach to machine translation one trains a neural network end-to-end to map the source sentence to the target sentence [23, 35, 3].", "startOffset": 135, "endOffset": 146}, {"referenceID": 30, "context": "In the neural approach to machine translation one trains a neural network end-to-end to map the source sentence to the target sentence [23, 35, 3].", "startOffset": 135, "endOffset": 146}, {"referenceID": 2, "context": "In the neural approach to machine translation one trains a neural network end-to-end to map the source sentence to the target sentence [23, 35, 3].", "startOffset": 135, "endOffset": 146}, {"referenceID": 0, "context": "This issue can be alleviated by a soft attention mechanism in the decoder neural network that uses gates to focus on specific parts of the source sentence [1].", "startOffset": 155, "endOffset": 158}, {"referenceID": 0, "context": "Note that, like the attention-based model [1], the two-dimensional translation model has complexity O(nm), where n andm are respectively the length of the source and target; by contrast the recurrent encoderdecoder model only has complexity O(m+ n).", "startOffset": 42, "endOffset": 45}, {"referenceID": 6, "context": "We use as baseline the state-of-the-art hierarchical phrase-based system CDEC [8].", "startOffset": 78, "endOffset": 81}, {"referenceID": 23, "context": "Like in a convolutional neural network [26], the same three-way transform of the 3-LSTM is applied at all parts of the grid, ensuring that the same features can be extracted across all parts of the input image.", "startOffset": 39, "endOffset": 43}, {"referenceID": 9, "context": "The setup has some similarity with the original application of Multidimensional LSTM to images [12] and with the recently described ReNet architecture [37].", "startOffset": 95, "endOffset": 99}, {"referenceID": 32, "context": "The setup has some similarity with the original application of Multidimensional LSTM to images [12] and with the recently described ReNet architecture [37].", "startOffset": 151, "endOffset": 155}, {"referenceID": 33, "context": "[38] 0.", "startOffset": 0, "endOffset": 4}, {"referenceID": 8, "context": "28 Graham [11] 0.", "startOffset": 10, "endOffset": 14}, {"referenceID": 4, "context": "[5] 0.", "startOffset": 0, "endOffset": 3}, {"referenceID": 25, "context": "[29] 0.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "[27] 0.", "startOffset": 0, "endOffset": 4}, {"referenceID": 28, "context": "[32] 0.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "4 Graham [10] 0.", "startOffset": 9, "endOffset": 13}, {"referenceID": 32, "context": "[37] 0.", "startOffset": 0, "endOffset": 4}], "year": 2015, "abstractText": "This paper introduces Grid Long Short-Term Memory, a network of LSTM cells arranged in a multidimensional grid that can be applied to vectors, sequences or higher dimensional data such as images. The network differs from existing deep LSTM architectures in that the cells are connected between network layers as well as along the spatiotemporal dimensions of the data. It therefore provides a unified way of using LSTM for both deep and sequential computation. We apply the model to algorithmic tasks such as integer addition and determining the parity of random binary vectors. It is able to solve these problems for 15-digit integers and 250-bit vectors respectively. We then give results for three empirical tasks. We find that 2D Grid LSTM achieves 1.47 bits per character on the Wikipedia character prediction benchmark, which is state-of-the-art among neural approaches. We also observe that a two-dimensional translation model based on Grid LSTM outperforms a phrase-based reference system on a Chinese-to-English translation task, and that 3D Grid LSTM yields a near state-of-the-art error rate of 0.32% on MNIST.", "creator": "LaTeX with hyperref package"}}}