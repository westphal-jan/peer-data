{"id": "1507.06228", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Jul-2015", "title": "Training Very Deep Networks", "abstract": "theoretical and empirical evidence indicates that the depth of neural networks is crucial for their success. however, training becomes more difficult thereafter as depth increases, and training of very very deep networks remains an open problem. since here we introduce a new mapping architecture designed originally to overcome this. our so - called highway networks allow unimpeded information flow flexibility across with many layers on information highways. they are inspired by long short - temporal term memory recurrent networks and use adaptive gating units to regulate the information flow. even with hundreds of layers, highway complex networks can be sufficiently trained directly through simple gradient descent. this enables the study of extremely deep and efficient architectures.", "histories": [["v1", "Wed, 22 Jul 2015 15:29:14 GMT  (444kb,D)", "http://arxiv.org/abs/1507.06228v1", "9 pages, 4 figures. ExtendsarXiv:1505.00387. Project webpage is atthis http URL"], ["v2", "Mon, 23 Nov 2015 16:25:30 GMT  (638kb,D)", "http://arxiv.org/abs/1507.06228v2", "11 pages. ExtendsarXiv:1505.00387. Project webpage is atthis http URLin Advances in Neural Information Processing Systems 2015"]], "COMMENTS": "9 pages, 4 figures. ExtendsarXiv:1505.00387. Project webpage is atthis http URL", "reviews": [], "SUBJECTS": "cs.LG cs.NE", "authors": ["rupesh kumar srivastava", "klaus greff", "j\u00fcrgen schmidhuber"], "accepted": true, "id": "1507.06228"}, "pdf": {"name": "1507.06228.pdf", "metadata": {"source": "CRF", "title": "Training Very Deep Networks", "authors": ["Rupesh Kumar Srivastava", "Klaus Greff", "J\u00fcrgen Schmidhuber"], "emails": ["juergen}@idsia.ch"], "sections": [{"heading": null, "text": "Theoretical and empirical evidence indicates that the depth of neural networks is crucial for their success. However, training becomes more difficult as depth increases, and training of very deep networks remains an open problem. Here we introduce a new architecture designed to overcome this. Our so-called highway networks allow unimpeded information flow across many layers on information highways. They are inspired by Long Short-Term Memory recurrent networks and use adaptive gating units to regulate the information flow. Even with hundreds of layers, highway networks can be trained directly through simple gradient descent. This enables the study of extremely deep and efficient architectures."}, {"heading": "1 Introduction & Previous Work", "text": "Many recent empirical breakthroughs in supervised machine learning have been achieved through large and deep neural networks. Network depth (the number of successive computational layers) has played perhaps the most important role in these successes. For instance, within just a few years, the top-5 image classification accuracy on the 1000-class ImageNet dataset has increased from \u223c84% [1] to \u223c95% [2, 3] using deeper networks with rather small receptive fields [4, 5]. Other results on practical machine learning problems have also underscored the superiority of deeper networks [6] in terms of accuracy and/or performance.\nIn fact, deep networks can represent certain function classes far more efficiently than shallow ones. This is perhaps most obvious for recurrent nets, the deepest of them all. For example, the n bit parity problem can in principle be learned by a large feedforward net with n binary input units, 1 output unit, and a single but large hidden layer. But the natural solution for arbitrary n is a recurrent net with only 3 units and 5 weights, reading the input bit string one bit at a time, making a single recurrent hidden unit flip its state whenever a new 1 is observed [7]. Related observations hold for Boolean circuits [8, 9] and modern neural networks [10, 11, 12].\nTo deal with the difficulties of training deep networks, some researchers have focused on developing better optimizers (e.g. [13, 14, 15]). Well-designed initialization strategies, in particular the normalized variance-preserving initialization for certain activation functions [16, 17], have been widely adopted for training moderately deep networks. Experiments showed [18] that certain activation functions based on local competition [18, 19] may help to train deeper networks. Skip connections between layers or to output layers (where error is \u201cinjected\u201d) have long been used in neural networks, more recently with the explicit aim to improve the flow of information [20, 21, 2, 22]. A related recent technique is based on using soft targets from a shallow teacher network to aid in training deeper student networks in multiple stages [23], similar to the neural history compressor for sequences, where a slowly ticking teacher recurrent net is \u201cdistilled\u201d into a quickly ticking student recurrent net by forcing the latter to predict the hidden units of the former [24]. Finally, deep networks can be trained layer-wise to help in credit assignment [24, 25], although this approach is less attractive compared to direct training.\nar X\niv :1\n50 7.\n06 22\n8v 1\n[ cs\n.L G\n] 2\n2 Ju\nl 2 01\nTraining deep networks, however, still faces problems, albeit perhaps less fundamental ones than the problem of vanishing gradients in standard recurrent networks [26]. The stacking of several nonlinear transformations in conventional feed-forward network architectures typically results in poor propagation of activations and gradients. Hence it remains hard to investigate the benefits of very deep networks for a variety of problems.\nTo overcome this, we take inspiration from Long Short Term Memory (LSTM) recurrent networks [27, 28]. We propose to modify the architecture of very deep feedforward networks such that information flow across layers becomes much easier. This is accomplished through an LSTM-inspired adaptive gating mechanism that allows for paths along which information can flow across many layers without attenuation. We call such paths information highways. They yield highway networks, as opposed to traditional \u2018plain\u2019 networks.1\nOur primary contribution is to show that extremely deep highway networks can be trained directly using stochastic gradient descent (SGD), in contrast to plain networks which become hard to optimize as depth increases (Section 3.1). Deep networks with limited computational budget (for which a two-stage training procedure mentioned above was recently proposed [23]) can also be directly trained in a single stage when converted to highway networks. Their ease of training is supported by experimental results demonstrating that highway networks also generalize well to unseen data."}, {"heading": "2 Highway Networks", "text": "Notation We use boldface letters for vectors and matrices, and italicized capital letters to denote transformation functions. 0 and 1 denote vectors of zeros and ones respectively, and I denotes an identity matrix. The function \u03c3(x) is defined as \u03c3(x) = 11+e\u2212x , x \u2208 R. The dot operator (\u00b7) is used to denote element-wise multiplication.\nA plain feedforward neural network typically consists of L layers where the lth layer (l \u2208 {1, 2, ..., L}) applies a non-linear transformation H (parameterized by WH,l) on its input xl to produce its output yl. Thus, x1 is the input to the network and yL is the network\u2019s output. Omitting the layer index and biases for clarity,\ny = H(x,WH). (1)\nH is usually an affine transform followed by a non-linear activation function, but in general it may take other forms, possibly convolutional or recurrent. For a highway network, we additionally define two non-linear transforms T (x,WT) and C(x,WC) such that\ny = H(x,WH)\u00b7T (x,WT) + x \u00b7 C(x,WC). (2)\nWe refer to T as the transform gate and C as the carry gate, since they express how much of the output is produced by transforming the input and carrying it, respectively. For simplicity, in this paper we set C = 1\u2212 T , giving\ny = H(x,WH)\u00b7T (x,WT) + x \u00b7 (1\u2212 T (x,WT)). (3)\nThe dimensionality of x,y, H(x,WH) and T (x,WT) must be the same for Equation 3 to be valid. Note that this layer transformation is much more flexible than Equation 1. In particular, observe that for particular values of T ,\ny = { x, if T (x,WT) = 0, H(x,WH), if T (x,WT) = 1.\n(4)\nSimilarly, for the Jacobian of the layer transform,\n1This paper expands upon a shorter report on Highway Networks [29]. More recently, a similar LSTMinspired model was also proposed [30].\ndy dx = { I, if T (x,WT) = 0, H \u2032(x,WH), if T (x,WT) = 1.\n(5)\nThus, depending on the output of the transform gates, a highway layer can smoothly vary its behavior between that of H and that of a layer which simply passes its inputs through. Just as a plain layer consists of multiple computing units such that the ith unit computes yi = Hi(x), a highway network consists of multiple blocks such that the ith block computes a block state Hi(x) and transform gate output Ti(x). Finally, it produces the block output yi = Hi(x) \u2217 Ti(x) + xi \u2217 (1 \u2212 Ti(x)), which is connected to the next layer.2"}, {"heading": "2.1 Constructing Highway Networks", "text": "As mentioned earlier, Equation 3 requires that the dimensionality of x,y, H(x,WH) and T (x,WT) be the same. To change the size of the intermediate representation, one can replace x with x\u0302 obtained by suitably sub-sampling or zero-padding x. Another alternative is to use a plain layer (without highways) to change dimensionality, which is the strategy we use in this study.\nConvolutional highway layers utilize weight-sharing and local receptive fields for both H and T transforms. We used the same sized receptive fields for both, and zero-padding to ensure that the block state and transform gate feature maps match the input size."}, {"heading": "2.2 Training Deep Highway Networks", "text": "We use the transform gate defined as T (x) = \u03c3(WTTx + bT), where WT is the weight matrix and bT the bias vector for the transform gates. This suggests a simple initialization scheme which is independent of the nature of H: bT can be initialized with a negative value (e.g. -1, -3 etc.) such that the network is initially biased towards carry behavior. This scheme is strongly inspired by the proposal [28] to initially bias the gates in an LSTM network, to help bridge long-term temporal dependencies early in learning. Note that \u03c3(x) \u2208 (0, 1),\u2200x \u2208 R, so the conditions in Equation 4 can never be met exactly.\nIn our experiments, we found that a negative bias initialization for the transform gates was sufficient for training to proceed in very deep networks for various zero-mean initial distributions of WH and different activation functions used by H . In pilot experiments, SGD did not stall for networks with more than 1000 layers. Although the initial bias is best treated as a hyperparameter, as a general guideline we suggest values of -1, -2 and -3 for convolutional highway networks of depth approximately 10, 20 and 30.\n2Our pilot experiments on training very deep networks were successful with a more complex block design closely resembling an LSTM block \u201cunrolled in time\u201d. Here we report results only for a much simplified form."}, {"heading": "3 Experiments", "text": "Training for all experiments was performed using SGD with momentum. An exponentially decaying learning rate was used in Section 3.1. For the rest of the experiments, a simpler commonly used strategy was employed where the learning rate starts at a value \u03bb and decays according to a fixed schedule by a factor \u03b3. The value of \u03bb, \u03b3 and the schedule were selected based on validation set performance on the CIFAR-10 dataset, and kept fixed for all experiments. All convolutional highway networks utilize the rectified linear activation function [16] to compute the block stateH . To provide a better estimate of the variability of classification results due to random initialization, we report our results in the format Best (mean \u00b1 std.dev.) based on 5 runs wherever available. Some experiments were conducted using the Caffe [31] library. Source code and network configurations used in this paper will be made publicly available.3"}, {"heading": "3.1 Optimization", "text": "To support the hypothesis that highway networks do not suffer from increasing depth, we conducted a series of rigorous optimization experiments, comparing them to plain networks with normalized initialization [16, 17]. Although there are other initialization methods, this is the only one we are aware of that has been used in recent work to obtain good performance on real world data using deep networks of up to 19 layers [17].\nWe trained both plain and highway networks of varying varying depths on the MNIST digit classification dataset. In all networks, the first layer is a fully connected plain layer followed by 9, 19, 49, or 99 fully connected plain or highway layers. Finally, the network output is produced by a softmax layer. All networks are thin: each layer has 50 blocks for highway networks and 71 units for plain networks, yielding roughly identical numbers of parameters (\u224850) per layer. For fair comparison we ran a random search of 80 runs for both plain and highway networks to find good settings for the following hyperparameters: initial learning rate, momentum, learning rate exponential decay factor & activation function (either rectified linear or tanh). For highway networks, an additional hyperparameter was the initial value for the transform gate bias (between -1 and -10). Other weights were initialized using the same normalized initialization as plain networks, although this does not have a theoretical justification for highway layers.\nThe training curves for the best performing networks for each depth are shown in Figure 1. As expected, 10-layer plain networks exhibit very good performance, which significantly degrades as\n3http://people.idsia.ch/\u02dcrupesh/very_deep_learning/\ndepth increases, even though network capacity increases. Highway networks do not suffer from an increase in depth. The 100 layer highway network performs an order of magnitude better than the 10 layer one, and is on par with the 10 layer plain network. It was also observed that highway networks consistently converged significantly faster than the plain ones."}, {"heading": "3.2 Pilot Experiments on MNIST Digit Classification", "text": "As a sanity check for the generalization capability of highway networks, we trained 10-layer convolutional highway networks on MNIST, using two architectures, each with 9 convolutional layers followed by a softmax output. The number of filter maps (width) was set to 16 and 32 for all the layers. We obtained test set performance competitive with state-of-the-art methods with much fewer parameters, as show in Table 1."}, {"heading": "3.3 Experiments on CIFAR-10 and CIFAR-100 Object Recognition", "text": ""}, {"heading": "3.3.1 Comparison to Fitnets", "text": "Fitnet training Maxout networks can cope much better with increased depth than those with traditional activation functions [18]. However, Romero et. al. [23] recently reported that training on CIFAR-10 through plain backpropogation was only possible for maxout networks with a depth up to 5 layers when the number of parameters was limited to\u223c250K and the number of multiplications to \u223c30M. Similar limitations were observed for higher computational budgets. Training of deeper networks was only possible through the use of a two-stage training procedure and addition of soft targets produced from a pre-trained shallow teacher network (hint-based training).\nWe found that it was easy to train highway networks with numbers of parameters and operations comparable to those of fitnets in a single stage using SGD. As shown in Table 2, Highway A and Highway B, which are based on the architectures of Fitnet A and Fitnet B, respectively, obtain similar or higher accuracy on the test set. We were also able to train thinner and deeper networks: for example a 32-layer highway network consisting of alternating receptive fields of size 3x3 and 1x1 with \u223c1.25M parameters performs better than the earlier teacher network [18]."}, {"heading": "3.3.2 Comparison to State-of-the-art Methods", "text": "It is possible to obtain high performance on the CIFAR-10 and CIFAR-100 datasets by utilizing very large networks and extensive data augmentation. This approach was popularized by Ciresan et. al. [5] and recently extended by Graham [32]. Since our aim is only to demonstrate that deeper networks can be trained without sacrificing ease of training or generalization ability, we only performed experiments in the more common setting of global contrast normalization, small translations and mirroring of images. Following Lin et. al. [33], we replaced the fully connected layer used in the networks in the previous section with a convolutional layer with a receptive field of size one and a global average pooling layer. The hyperparameters from the last section were re-used for both CIFAR-10 and CIFAR-100, therefore it is quite possible to obtain much better results with better architectures/hyperparameters. The results are tabulated in Table 3."}, {"heading": "4 Analysis", "text": "Figure 2 illustrates the inner workings of the best4 50 hidden layer fully-connected highway networks trained on MNIST (top row) and CIFAR-100 (bottom row). The first three columns show the bias, the mean activity over all training samples, and the activity for a single random sample for each transform gate respectively. Block outputs for the same single sample are displayed in the last column.\nThe transform gate biases of the two networks were initialized to -2 and -4 respectively. It is interesting to note that contrary to our expectations most biases decreased further during training. For the CIFAR-100 network the biases increase with depth forming a gradient. Curiously this gradient is inversely correlated with the average activity of the transform gates, as seen in the second column. This indicates that the strong negative biases at low depths are not used to shut down the gates, but to make them more selective. This behavior is also suggested by the fact that the transform gate activity for a single example (column 3) is very sparse. The effect is more pronounced for the CIFAR-100 network, but can also be observed to a lesser extent in the MNIST network.\nThe last column of Figure 2 displays the block outputs and visualizes the concept of \u201cinformation highways\u201d. Most of the outputs stay constant over many layers forming a pattern of stripes. Most of the change in outputs happens in the early layers (\u2248 15 for MNIST and \u2248 40 for CIFAR-100)."}, {"heading": "4.1 Routing of Information", "text": "One possible advantage of the highway architecture over hard-wired shortcut connections is that the network can learn to dynamically adjust the routing of the information based on the current input. This begs the question: does this behaviour manifest itself in trained networks or do they just learn a static routing that applies to all inputs similarly. A partial answer can be found by looking at the mean transform gate activity (second column) and the single example transform gate outputs (third\n4obtained via random search over hyperparameters to minimize the best training set error achieved using each configuration\ncolumn) in Figure 2. Especially for the CIFAR-100 case, most transform gates are active on average, while they show very selective activity for the single example. This implies that for each sample only a few blocks perform transformation but different blocks are utilized by different samples.\nThis data-dependent routing mechanism is further investigated in Figure 3. In each of the columns we show how the average over all samples of one specific class differs from the total average shown in the second column of Figure 2. For MNIST digits 0 and 7 substantial differences can be seen within the first 15 layers, while for CIFAR class numbers 0 and 1 the differences are sparser and spread out over all layers. In both cases it is clear that the mean activity pattern differs between classes. The gating system acts not just as a mechanism to ease training, but also as an important part of the computation in a trained network."}, {"heading": "4.2 Layer Importance", "text": "Because we bias all the transform gates towards being closed, in the beginning every layer just copies the activations of the previous layer. Does training indeed change this behaviour, or is the final network still essentially equivalent to a network with a much fewer layers? To shed light on this issue, we investigated the extent to which lesioning a single layer affects the total performance of trained networks from Section 3.1. By lesioning, we mean manually setting all the transform gates of a layer to 0 forcing it to simpy copy its inputs. For each layer, we evaluated the network on the full training set with the gates of that layer closed. The resulting performance as a function of the lesioned layer is shown in Figure 4.\nFor MNIST (left) it can be seen that the error rises significantly if any one of the early layers is removed, but layers 15\u2212 45 seem to have close to no effect on the final performance. About 60% of the layers don\u2019t learn to contribute to the final result, likely because MNIST is a simple dataset that doesn\u2019t require much depth.\nWe see a different picture for the CIFAR-100 dataset (right) with performance degrading noticeably when removing any of the first \u2248 40 layers. This suggests that for complex problems a highway network can learn to utilize all of its layers, while for simpler problems like MNIST it will keep many of the unneeded layers idle. Such behavior is desirable in deep networks in general, but appears difficult to obtain using plain networks."}, {"heading": "5 Discussion", "text": "Alternative approaches to counter the difficulties posed by depth mentioned in Section 1 often have several limitations. Learning to route information through neural networks with the help of competitive interactions has helped to scale up their application to challenging problems by improving credit assignment [36], but they still suffer when depth increases beyond \u224820 even with careful initialization [17]. Effective initialization methods can be difficult to derive for a variety of activation functions. Deep supervision [22] has been shown to hurt performance of deep narrow networks [23].\nVery deep highway networks, on the other hand, can directly be trained with simple gradient descent methods due to their specific architecture. This property does not rely on specific non-linear transformations, which may be complex convolutional or recurrent transforms, and derivation of a suitable initialization scheme is not essential. The additional parameters required by the gating mechanism help in routing information through the use of multiplicative connections, responding differently to different inputs, unlike fixed \u201cskip\u201d connections.\nA possible objection is that many layers might remain unused if the transform gates stay closed. Our experiments show that this possibility does not affect networks adversely\u2014deep and narrow highway networks can match/exceed the accuracy of wide and shallow maxout networks, which would not be possible if layers did not perform useful computations. Additionally, we can exploit the structure of highways to directly evaluate the contribution of each layer as shown in Figure 4. In this way, highway networks allow us to understand how much depth is needed for a given problem, which can not be easily done with plain networks."}, {"heading": "Acknowledgments", "text": "We thank NVIDIA Corporation for their donation of GPUs and acknowledge funding from the EU project NASCENCE (FP7-ICT-317662). We are grateful to Sepp Hochreiter and Thomas Unterthiner for helpful comments and Jan Koutn\u0131\u0301k for help in conducting experiments."}], "references": [{"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E. Hinton"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Going deeper with convolutions", "author": ["Christian Szegedy", "Wei Liu", "Yangqing Jia", "Pierre Sermanet", "Scott Reed", "Dragomir Anguelov", "Dumitru Erhan", "Vincent Vanhoucke", "Andrew Rabinovich"], "venue": "[cs],", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Very deep convolutional networks for large-scale image recognition", "author": ["Karen Simonyan", "Andrew Zisserman"], "venue": "[cs],", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "Flexible, high performance convolutional neural networks for image classification", "author": ["DC Ciresan", "Ueli Meier", "Jonathan Masci", "Luca M Gambardella", "J\u00fcrgen Schmidhuber"], "venue": "In International Joint Conference on Artificial Intelligence,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Multi-column deep neural networks for image classification", "author": ["Dan Ciresan", "Ueli Meier", "J\u00fcrgen Schmidhuber"], "venue": "In IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Feature learning in deep neural networks-studies on speech recognition", "author": ["Dong Yu", "Michael L. Seltzer", "Jinyu Li", "Jui-Ting Huang", "Frank Seide"], "venue": "tasks. arXiv preprint arXiv:1301.3605,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Bridging long time lags by weight guessing and \u201clong shortterm memory", "author": ["Sepp Hochreiter", "Jurgen Schmidhuber"], "venue": "Spatiotemporal models in biological and artificial systems,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1996}, {"title": "Computational limitations of small-depth circuits", "author": ["Johan H\u00e5stad"], "venue": "MIT press,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1987}, {"title": "On the power of small-depth threshold circuits", "author": ["Johan H\u00e5stad", "Mikael Goldmann"], "venue": "Computational Complexity,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1991}, {"title": "On the complexity of neural network classifiers: A comparison between shallow and deep architectures", "author": ["Monica Bianchini", "Franco Scarselli"], "venue": "IEEE Transactions on Neural Networks,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "On the number of linear regions of deep neural networks", "author": ["Guido F Montufar", "Razvan Pascanu", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "On the expressive efficiency of sum product networks", "author": ["James Martens", "Venkatesh Medabalimi"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}, {"title": "Training deep and recurrent networks with hessian-free optimization", "author": ["James Martens", "Ilya Sutskever"], "venue": "Neural Networks: Tricks of the Trade,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2012}, {"title": "On the importance of initialization and momentum in deep learning", "author": ["Ilya Sutskever", "James Martens", "George Dahl", "Geoffrey Hinton"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2013}, {"title": "Identifying and attacking the saddle point problem in high-dimensional non-convex optimization", "author": ["Yann N Dauphin", "Razvan Pascanu", "Caglar Gulcehre", "Kyunghyun Cho", "Surya Ganguli", "Yoshua Bengio"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2014}, {"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["Xavier Glorot", "Yoshua Bengio"], "venue": "In International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2010}, {"title": "Delving deep into rectifiers: Surpassing human-level performance on ImageNet classification", "author": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun"], "venue": "[cs],", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2015}, {"title": "Compete to compute", "author": ["Rupesh K. Srivastava", "Jonathan Masci", "Sohrob Kazerounian", "Faustino Gomez", "J\u00fcrgen Schmidhuber"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2013}, {"title": "Deep learning made easier by linear transformations in perceptrons", "author": ["Tapani Raiko", "Harri Valpola", "Yann LeCun"], "venue": "In International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2012}, {"title": "Generating sequences with recurrent neural networks", "author": ["Alex Graves"], "venue": null, "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2013}, {"title": "FitNets: Hints for thin deep nets", "author": ["Adriana Romero", "Nicolas Ballas", "Samira Ebrahimi Kahou", "Antoine Chassang", "Carlo Gatta", "Yoshua Bengio"], "venue": "[cs],", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2014}, {"title": "Learning complex, extended sequences using the principle of history compression", "author": ["J\u00fcrgen Schmidhuber"], "venue": "Neural Computation,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 1992}, {"title": "A fast learning algorithm for deep belief nets", "author": ["Geoffrey E. Hinton", "Simon Osindero", "Yee-Whye Teh"], "venue": "Neural computation,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2006}, {"title": "Untersuchungen zu dynamischen neuronalen Netzen", "author": ["Sepp Hochreiter"], "venue": "Masters thesis, Technische Universita\u0308t Mu\u0308nchen, Mu\u0308nchen,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 1991}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural Computation,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 1997}, {"title": "Learning to forget: Continual prediction with LSTM", "author": ["Felix A. Gers", "J\u00fcrgen Schmidhuber", "Fred Cummins"], "venue": "In ICANN,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 1999}, {"title": "Grid long Short-Term memory", "author": ["Nal Kalchbrenner", "Ivo Danihelka", "Alex Graves"], "venue": "[cs],", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2015}, {"title": "Caffe: Convolutional architecture for fast feature embedding", "author": ["Yangqing Jia", "Evan Shelhamer", "Jeff Donahue", "Sergey Karayev", "Jonathan Long", "Ross Girshick", "Sergio Guadarrama", "Trevor Darrell"], "venue": "[cs],", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2014}, {"title": "Spatially-sparse convolutional neural networks", "author": ["Benjamin Graham"], "venue": null, "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2014}, {"title": "Deep networks with internal selective attention through feedback connections", "author": ["Marijn F Stollenga", "Jonathan Masci", "Faustino Gomez", "J\u00fcrgen Schmidhuber"], "venue": "In NIPS", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2014}, {"title": "Striving for simplicity: The all convolutional net", "author": ["Jost Tobias Springenberg", "Alexey Dosovitskiy", "Thomas Brox", "Martin Riedmiller"], "venue": "[cs],", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2014}, {"title": "Understanding locally competitive networks", "author": ["Rupesh Kumar Srivastava", "Jonathan Masci", "Faustino Gomez", "J\u00fcrgen Schmidhuber"], "venue": "In International Conference on Learning Representations,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2015}], "referenceMentions": [{"referenceID": 0, "context": "For instance, within just a few years, the top-5 image classification accuracy on the 1000-class ImageNet dataset has increased from \u223c84% [1] to \u223c95% [2, 3] using deeper networks with rather small receptive fields [4, 5].", "startOffset": 138, "endOffset": 141}, {"referenceID": 1, "context": "For instance, within just a few years, the top-5 image classification accuracy on the 1000-class ImageNet dataset has increased from \u223c84% [1] to \u223c95% [2, 3] using deeper networks with rather small receptive fields [4, 5].", "startOffset": 150, "endOffset": 156}, {"referenceID": 2, "context": "For instance, within just a few years, the top-5 image classification accuracy on the 1000-class ImageNet dataset has increased from \u223c84% [1] to \u223c95% [2, 3] using deeper networks with rather small receptive fields [4, 5].", "startOffset": 150, "endOffset": 156}, {"referenceID": 3, "context": "For instance, within just a few years, the top-5 image classification accuracy on the 1000-class ImageNet dataset has increased from \u223c84% [1] to \u223c95% [2, 3] using deeper networks with rather small receptive fields [4, 5].", "startOffset": 214, "endOffset": 220}, {"referenceID": 4, "context": "For instance, within just a few years, the top-5 image classification accuracy on the 1000-class ImageNet dataset has increased from \u223c84% [1] to \u223c95% [2, 3] using deeper networks with rather small receptive fields [4, 5].", "startOffset": 214, "endOffset": 220}, {"referenceID": 5, "context": "Other results on practical machine learning problems have also underscored the superiority of deeper networks [6] in terms of accuracy and/or performance.", "startOffset": 110, "endOffset": 113}, {"referenceID": 6, "context": "But the natural solution for arbitrary n is a recurrent net with only 3 units and 5 weights, reading the input bit string one bit at a time, making a single recurrent hidden unit flip its state whenever a new 1 is observed [7].", "startOffset": 223, "endOffset": 226}, {"referenceID": 7, "context": "Related observations hold for Boolean circuits [8, 9] and modern neural networks [10, 11, 12].", "startOffset": 47, "endOffset": 53}, {"referenceID": 8, "context": "Related observations hold for Boolean circuits [8, 9] and modern neural networks [10, 11, 12].", "startOffset": 47, "endOffset": 53}, {"referenceID": 9, "context": "Related observations hold for Boolean circuits [8, 9] and modern neural networks [10, 11, 12].", "startOffset": 81, "endOffset": 93}, {"referenceID": 10, "context": "Related observations hold for Boolean circuits [8, 9] and modern neural networks [10, 11, 12].", "startOffset": 81, "endOffset": 93}, {"referenceID": 11, "context": "Related observations hold for Boolean circuits [8, 9] and modern neural networks [10, 11, 12].", "startOffset": 81, "endOffset": 93}, {"referenceID": 12, "context": "[13, 14, 15]).", "startOffset": 0, "endOffset": 12}, {"referenceID": 13, "context": "[13, 14, 15]).", "startOffset": 0, "endOffset": 12}, {"referenceID": 14, "context": "[13, 14, 15]).", "startOffset": 0, "endOffset": 12}, {"referenceID": 15, "context": "Well-designed initialization strategies, in particular the normalized variance-preserving initialization for certain activation functions [16, 17], have been widely adopted for training moderately deep networks.", "startOffset": 138, "endOffset": 146}, {"referenceID": 16, "context": "Well-designed initialization strategies, in particular the normalized variance-preserving initialization for certain activation functions [16, 17], have been widely adopted for training moderately deep networks.", "startOffset": 138, "endOffset": 146}, {"referenceID": 17, "context": "Experiments showed [18] that certain activation functions based on local competition [18, 19] may help to train deeper networks.", "startOffset": 85, "endOffset": 93}, {"referenceID": 18, "context": "Skip connections between layers or to output layers (where error is \u201cinjected\u201d) have long been used in neural networks, more recently with the explicit aim to improve the flow of information [20, 21, 2, 22].", "startOffset": 191, "endOffset": 206}, {"referenceID": 19, "context": "Skip connections between layers or to output layers (where error is \u201cinjected\u201d) have long been used in neural networks, more recently with the explicit aim to improve the flow of information [20, 21, 2, 22].", "startOffset": 191, "endOffset": 206}, {"referenceID": 1, "context": "Skip connections between layers or to output layers (where error is \u201cinjected\u201d) have long been used in neural networks, more recently with the explicit aim to improve the flow of information [20, 21, 2, 22].", "startOffset": 191, "endOffset": 206}, {"referenceID": 20, "context": "A related recent technique is based on using soft targets from a shallow teacher network to aid in training deeper student networks in multiple stages [23], similar to the neural history compressor for sequences, where a slowly ticking teacher recurrent net is \u201cdistilled\u201d into a quickly ticking student recurrent net by forcing the latter to predict the hidden units of the former [24].", "startOffset": 151, "endOffset": 155}, {"referenceID": 21, "context": "A related recent technique is based on using soft targets from a shallow teacher network to aid in training deeper student networks in multiple stages [23], similar to the neural history compressor for sequences, where a slowly ticking teacher recurrent net is \u201cdistilled\u201d into a quickly ticking student recurrent net by forcing the latter to predict the hidden units of the former [24].", "startOffset": 382, "endOffset": 386}, {"referenceID": 21, "context": "Finally, deep networks can be trained layer-wise to help in credit assignment [24, 25], although this approach is less attractive compared to direct training.", "startOffset": 78, "endOffset": 86}, {"referenceID": 22, "context": "Finally, deep networks can be trained layer-wise to help in credit assignment [24, 25], although this approach is less attractive compared to direct training.", "startOffset": 78, "endOffset": 86}, {"referenceID": 23, "context": "Training deep networks, however, still faces problems, albeit perhaps less fundamental ones than the problem of vanishing gradients in standard recurrent networks [26].", "startOffset": 163, "endOffset": 167}, {"referenceID": 24, "context": "To overcome this, we take inspiration from Long Short Term Memory (LSTM) recurrent networks [27, 28].", "startOffset": 92, "endOffset": 100}, {"referenceID": 25, "context": "To overcome this, we take inspiration from Long Short Term Memory (LSTM) recurrent networks [27, 28].", "startOffset": 92, "endOffset": 100}, {"referenceID": 20, "context": "Deep networks with limited computational budget (for which a two-stage training procedure mentioned above was recently proposed [23]) can also be directly trained in a single stage when converted to highway networks.", "startOffset": 128, "endOffset": 132}, {"referenceID": 26, "context": "More recently, a similar LSTMinspired model was also proposed [30].", "startOffset": 62, "endOffset": 66}, {"referenceID": 25, "context": "This scheme is strongly inspired by the proposal [28] to initially bias the gates in an LSTM network, to help bridge long-term temporal dependencies early in learning.", "startOffset": 49, "endOffset": 53}, {"referenceID": 20, "context": "[23]) Teacher 5 \u223c9M 90.", "startOffset": 0, "endOffset": 4}, {"referenceID": 20, "context": "[23] using two-stage hint based training.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "All convolutional highway networks utilize the rectified linear activation function [16] to compute the block stateH .", "startOffset": 84, "endOffset": 88}, {"referenceID": 27, "context": "Some experiments were conducted using the Caffe [31] library.", "startOffset": 48, "endOffset": 52}, {"referenceID": 15, "context": "1 Optimization To support the hypothesis that highway networks do not suffer from increasing depth, we conducted a series of rigorous optimization experiments, comparing them to plain networks with normalized initialization [16, 17].", "startOffset": 224, "endOffset": 232}, {"referenceID": 16, "context": "1 Optimization To support the hypothesis that highway networks do not suffer from increasing depth, we conducted a series of rigorous optimization experiments, comparing them to plain networks with normalized initialization [16, 17].", "startOffset": 224, "endOffset": 232}, {"referenceID": 16, "context": "Although there are other initialization methods, this is the only one we are aware of that has been used in recent work to obtain good performance on real world data using deep networks of up to 19 layers [17].", "startOffset": 205, "endOffset": 209}, {"referenceID": 29, "context": "42 dasNet [34] 90.", "startOffset": 10, "endOffset": 14}, {"referenceID": 30, "context": "43 All-CNN [35] 92.", "startOffset": 11, "endOffset": 15}, {"referenceID": 20, "context": "[23] recently reported that training on CIFAR-10 through plain backpropogation was only possible for maxout networks with a depth up to 5 layers when the number of parameters was limited to\u223c250K and the number of multiplications to \u223c30M.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "[5] and recently extended by Graham [32].", "startOffset": 0, "endOffset": 3}, {"referenceID": 28, "context": "[5] and recently extended by Graham [32].", "startOffset": 36, "endOffset": 40}, {"referenceID": 31, "context": "Learning to route information through neural networks with the help of competitive interactions has helped to scale up their application to challenging problems by improving credit assignment [36], but they still suffer when depth increases beyond \u224820 even with careful initialization [17].", "startOffset": 192, "endOffset": 196}, {"referenceID": 16, "context": "Learning to route information through neural networks with the help of competitive interactions has helped to scale up their application to challenging problems by improving credit assignment [36], but they still suffer when depth increases beyond \u224820 even with careful initialization [17].", "startOffset": 285, "endOffset": 289}, {"referenceID": 20, "context": "Deep supervision [22] has been shown to hurt performance of deep narrow networks [23].", "startOffset": 81, "endOffset": 85}], "year": 2015, "abstractText": "Theoretical and empirical evidence indicates that the depth of neural networks is crucial for their success. However, training becomes more difficult as depth increases, and training of very deep networks remains an open problem. Here we introduce a new architecture designed to overcome this. Our so-called highway networks allow unimpeded information flow across many layers on information highways. They are inspired by Long Short-Term Memory recurrent networks and use adaptive gating units to regulate the information flow. Even with hundreds of layers, highway networks can be trained directly through simple gradient descent. This enables the study of extremely deep and efficient architectures.", "creator": "LaTeX with hyperref package"}}}