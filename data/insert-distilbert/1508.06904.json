{"id": "1508.06904", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-Aug-2015", "title": "Rapid Exact Signal Scanning with Deep Convolutional Neural Networks", "abstract": "we introduce and analyze a rigorous formulation of modelling the dynamics of a signal processing scheme that aims at dense scanning of large input signals. recently proposed methodologies lack a satisfactory discussion of proof whether they actually produce the algorithms correct results according to their definition, especially in the context of convolutional neural networks. we improve on discussing this through an exact characterization of the requirements for a sound sliding front window approach. the tools developed in this paper are especially beneficial if convolutional neural networks are employed, but generally can ideally also be used as a more general framework to validate related approaches to signal carrier scanning. the recent contributed theory helps to eliminate redundant computations and renders special case treatment unnecessary, resulting in a particularly dramatic boost in efficiency particularly on massively parallel processors.", "histories": [["v1", "Thu, 27 Aug 2015 15:50:26 GMT  (1818kb,D)", "http://arxiv.org/abs/1508.06904v1", null], ["v2", "Wed, 23 Mar 2016 18:49:52 GMT  (1864kb,D)", "http://arxiv.org/abs/1508.06904v2", null], ["v3", "Sat, 5 Nov 2016 12:18:13 GMT  (2070kb,D)", "http://arxiv.org/abs/1508.06904v3", "Pages 1-16 only: Copyright (c) 2015 IEEE. Personal use of this material is permitted. However, permission to use this material for any other purposes must be obtained from the IEEE by sending a request to pubs-permissions@ieee.org"], ["v4", "Fri, 3 Mar 2017 17:38:00 GMT  (2162kb,D)", "http://arxiv.org/abs/1508.06904v4", "Pages 1-16 only: Copyright (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission"], ["v5", "Wed, 2 Aug 2017 13:23:54 GMT  (2323kb,D)", "http://arxiv.org/abs/1508.06904v5", "Pages 1-16 only: Copyright (c) 2016 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission"]], "reviews": [], "SUBJECTS": "cs.LG cs.CV cs.NE", "authors": ["markus thom", "franz gritschneder"], "accepted": false, "id": "1508.06904"}, "pdf": {"name": "1508.06904.pdf", "metadata": {"source": "CRF", "title": "A Theory for Rapid Exact Signal Scanning with Deep Multi-Scale Convolutional Neural Networks", "authors": ["Markus Thom", "Franz Gritschneder"], "emails": ["markus.thom@uni-ulm.de)."], "sections": [{"heading": null, "text": "I. INTRODUCTION\nInspired by findings on the structure of mammalian visual cortex [1], the concept of spatial weight sharing has been integrated into artificial neural networks to achieve an architecture nowadays broadly known as Convolutional Neural Network (CNN) [2], [3]. This particular architecture has proven highly successful in a large variety of pattern recognition tasks, setting the state of the art in handwritten digit recognition [4], [5], traffic sign recognition [4], [6], house number recognition from street view [5], [7], and large-scale object category classification [8], [9], [10] to name just a few.\nDetection of objects in images can, for example, be realized by application of an object classifier at each image position that may contain an object of interest. If this is carried out for each feasible image position, it is possible to assign class membership estimations to all the pixels in an image resulting in a dense description of all objects in a scene [11], [12], [13]. While the computational complexity of a sophisticated classification system used in conjunction with a sliding window approach may seem excessive at first glance, the special structure of a CNN can be exploited so that intermediate computation results can be shared among adjacent image windows, resulting in a speed-up of several orders of magnitude compared to the naive approach. Although this was already realized for CNNs without pooling layers more than two decades ago [14], approaches that also support pooling layers emerged only recently [15], [16], [17], [18]. However, all these methods have in common that it is not inherently clear that they actually produce the desired results, since instead of a satisfactory proof of correctness only toy examples are presented.\nM. Thom and F. Gritschneder are with driveU / Institute of Measurement, Control and Microtechnology, Ulm University, 89081 Ulm, Germany (e-mail: markus.thom@uni-ulm.de).\nThis paper improves upon previous work by establishing a comprehensive theory of subsignal compatible transformations: these form a family of functions that exactly fulfill the invariants required for a sound sliding window approach. We provide a characterization of such transformations, show that their compositions fulfill the same invariants and demonstrate how the developed theory connects with CNNs. Further, we analyze under which circumstances the information from a multi-scale image representation can be incorporated. Our results are proven rigorously and can be used directly for an efficient implementation on massively parallel processing systems.\nThe remainder of this paper is structured as follows. In Sect. II, we give an introduction to the CNN structure, fix the notation and introduce what we mean by subsignals. Section III establishes the basics of our theory on subsignal compatible transformations and shows how the major building blocks of CNNs fit into the theory. In the following Sect. IV we extend the theory to functions applied in a strided fashion, which is particularly important for pooling operators evaluated on non-overlapping blocks. Section V considers multiscale transformations, that is functions that depend on signals made available in different spatial resolutions. The paper is concluded with a discussion of our results in Sect. VI."}, {"heading": "II. PREREQUISITES", "text": "In this section, we start by formally introducing the building blocks of a CNN. Next, we fix the notation used throughout the paper. The section is concluded by the formal definition of the subsignal extraction operator and a few statements on its properties."}, {"heading": "A. Convolutional Neural Networks", "text": "Ordinary CNNs process input data by means of specialized layers [19]. Convolutional layers respect the weight sharing principle: they convolve their input with a filter bank which is learned during an adaptation process and add a trainable scalar bias to form the layer output. A mathematical definition is given in Sect. III-C.\nPooling layers strengthen a network\u2019s invariance to small translations of the input data by evaluation of a fixed pooling kernel followed by a downsampling operation. Effectively, this is the same as the application of a function in a strided fashion, that is, merely certain equidistant subsignals are considered which are not required to start at exactly neighboring samples. This is discussed in greater detail in Sect. IV.\nBesides these layers, there are also fully-connected layers and non-linearity layers. The former are just a special case\nar X\niv :1\n50 8.\n06 90\n4v 1\n[ cs\n.L G\n] 2\n7 A\nug 2\n01 5\n2 of convolutional layers in that they carry out a convolution with unit kernel size. The latter send each sample of a larger signal through a scalar transfer function independently, which may for example be a hyperbolic tangent or a rectification nonlinearity [20].\nIt is further possible to improve performance through incorporation of context information using multi-scale analysis so that the network sees image regions in different spatial resolutions [13]. We will elaborately consider this approach in Sect. V."}, {"heading": "B. Notation", "text": "For the sake of simplicity, we restrict our analysis to vector-shaped signals. The generalization of our results to more complex signals like images with pixels arranged on a two-dimensional grid is straightforward by application of the theory to appropriate indices of the images.\nWe write N1 := N \\ { 0 } for the positive natural numbers and Z for the integers. The ceiling function that rounds up its argument to the next larger natural number is denoted by d\u00b7e. If M is a set and q \u2208 N1, then Mq denotes the set of all q-tuples with entries from M . The elements of Mq are called signals, their q entries are called samples. If \u03be = (\u03be1, . . . , \u03beq) \u2208 Mq and I \u2208 {1, . . . , q}r is an index list with r entries, we use the formal sum \u03c9 := \u2211r \u03bd=1 \u03beI\u03bd \u00b7 er\u03bd for the element \u03c9 \u2208 Mr with \u03c9\u03bd = \u03beI\u03bd for all \u03bd \u2208 {1, . . . , r}. For example, when M = R and hence Mr is the r-dimensional Euclidean space, then the formal sum \u03c9 corresponds to the linear combination of canonical basis vectors er\u03bd weighted with selected coordinates of the signal \u03be.\nFor \u03be \u2208Mq we write dimM (\u03be) = q for the dimensionality of \u03be. This does not need to correspond exactly with the concept of dimensionality in the sense of linear algebra. If for example M = Nc for categorical data with c \u2208 N1 features, then Mq is not a vector space over M . The theory presented in this paper requires algebraic structures such as vector spaces or analytic structures such as the real numbers only for certain specialized statements. The bulk of our results hold for all signals from arbitrary sets.\nIf M is a set and c \u2208 N1 is a natural number, we write \u222ac(M) := \u222a\u221eq=cMq for the set that contains all the tuples of length greater than or equal to c with entries from M . For example, if \u03be \u2208 \u222ac(M) then there is a natural number q \u2265 c so that \u03be = (\u03be1, . . . , \u03beq) with \u03be\u03bd \u2208 M for all \u03bd \u2208 {1, . . . , q}. Note that \u222a1(M) puts no restriction on tuple length except for positivity."}, {"heading": "C. Division of a Signal into Subsignals", "text": "A subsignal is a contiguous list of samples contained in a larger signal. Let us first formalize the concept of extracting subsignals with a fixed number of samples from a given signal:\n\u03be1\n\u03be2\n\u03be3\n\u03be4\n\u03be5\n\u03be6\n\u03be7\n\u03be8\nSubsignal4(\u03be, 1)\nSubsignal4(\u03be, 5)\n\u03be1\n\u03be2\n\u03be3\n\u03be4\n\u03be5\n\u03be6\n\u03be7\n\u03be8\nFig. 1. Illustration of the subsignal extraction operator applied to a signal \u03be with eight samples for extraction of subsignals with four samples each.\nDefinition 1. Let M be a set and let d \u2208 N1 denote a fixed subsignal dimensionality. Then\nSubsignald : \u221e\u22c3 D=d ( MD \u00d7 {1, . . . , D \u2212 d+ 1} ) \u2192Md,\n(\u03be, i) 7\u2192 d\u2211 \u03bd=1 \u03bei+\u03bd\u22121 \u00b7 ed\u03bd ,\nis called the subsignal extraction operator.\nIt is straightforward to verify that Subsignald is welldefined and actually returns all possible D\u2212d+ 1 contiguous subsignals of length d from a given signal with D samples (see Fig. 1). Note that for application of this operator it has always to be ensured that the requested subsignal index i is within bounds.\nIterated extraction of subsignals can be collapsed into one operator evaluation:\nLemma 2. Let M be a set and c, d \u2208 N1, c \u2264 d, be two subsignal dimensionalities. Then\nSubsignalc(Subsignald(\u03be, i), j) = Subsignalc(\u03be, i+ j \u2212 1)\nfor all \u03be \u2208 \u222ac(M), for all i \u2208 {1, . . . ,dimM (\u03be)\u2212 d+ 1} and for all j \u2208 {1, . . . , d\u2212 c+ 1}.\nProof. The subsignal indices of the left-hand side are well within bounds. Since i + j \u2212 1 \u2208 {1, . . . ,dimM (\u03be) \u2212 c + 1} this also holds for the right-hand side. We find that\nSubsignalc(Subsignald(\u03be, i), j)\nD. 1 = c\u2211 \u03bb=1 Subsignald(\u03be, i)j+\u03bb\u22121 \u00b7 ec\u03bb\nD. 1 = c\u2211 \u03bb=1 ( d\u2211 \u03bd=1 \u03bei+\u03bd\u22121 \u00b7 ed\u03bd ) j+\u03bb\u22121 \u00b7 ec\u03bb\n(\u2666) = c\u2211 \u03bb=1 \u03be(i+j\u22121)+\u03bb\u22121 \u00b7 ec\u03bb D. 1 = Subsignalc(\u03be, i+ j \u2212 1),\nwhere in the (\u2666) step we have substituted \u03bd = j + \u03bb\u2212 1.\n3"}, {"heading": "III. SUBSIGNAL COMPATIBLE TRANSFORMATIONS", "text": "This section introduces the concept of subsignal compatible transformations. These are functions that can be applied to an entire signal at once and then yield the same result as if they were applied to each subsignal independently. We show that functions applied in a sliding fashion can be grasped as subsignal compatible transformations, and that the composition of subsignal compatible transformations is again a subsignal compatible transformation.\nIn the end of this section, we consider Convolutional Neural Networks without pooling layers and demonstrate that these satisfy the requirements of subsignal compatible transformations. As a consequence, CNNs without pooling layers can be applied to the whole input signal at once without having to handle individual subsignals.\nWe begin with the major definition of this section:\nDefinition 3. Let M and N be sets, let c \u2208 N1 be a positive natural number, and let T : \u222ac (M)\u2192 \u222a1(N) be a function. We then call T a subsignal compatible transformation with dimensionality reduction constant c if and only if these two properties hold:\n(i) Dimensionality reduction property (DRP): dimN (T (\u03be)) = dimM (\u03be)\u2212 c+ 1 for all \u03be \u2208 \u222ac(M).\n(ii) Exchange property (XP): For all subsignal dimensionalities d \u2208 N1, d \u2265 c, it holds that T (Subsignald(\u03be, i)) = Subsignald\u2212c+1(T (\u03be), i) for all \u03be \u2208 \u222ad(M) and all i \u2208 {1, . . . ,dimM (\u03be)\u2212d+1}.\nThe first property guarantees that T reduces the dimensionality of its argument always by the same amount regardless of the input dimensionality. The second property states that if T was applied to a subsignal, then this is the same as applying T to the entire signal and afterwards extracting the appropriate samples from the resulting signal. Figure 2 gives an example for these concepts.\nWe note that the exchange property is well-defined: The dimensionality reduction property guarantees that the dimensionalities on both sides of the equation match. Further, the subsignal index i is within bounds on both sides. This is trivial for the left-hand side, and can be seen for the right-hand side since dimM (\u03be)\u2212d+1 = (dimM (\u03be)\u2212c+1)\u2212 (d\u2212c+1)+1.\nWe immediately have an identity theorem for subsignal compatible transformations:\nTheorem 4. Let M,N be sets and T1, T2 : \u222ac (M)\u2192 \u222a1(N) two subsignal compatible transformations with dimensionality reduction constant c \u2208 N1. If T1(\u03c1) = T2(\u03c1) holds for all \u03c1 \u2208M c, then already T1 = T2.\nProof. Let \u03be \u2208 \u222ac(M). For \u00b5 \u2208 {1, . . . ,dimM (\u03be)\u2212c+1} we yield with the precondition (PC) and the exchange property where the subsignal dimensionality is set to c:\nT1(\u03be)\u00b5 XP = T1 (Subsignalc(\u03be, \u00b5)) PC = T2 (Subsignalc(\u03be, \u00b5)) XP = T2(\u03be)\u00b5.\nHence all the samples of the transformed signals are equal, thus T1(\u03be) = T2(\u03be) for all \u03be in the domain of T1 and T2."}, {"heading": "A. Relationship between Functions Applied in a Sliding Fashion and Subsignal Compatible Transformations", "text": "We now investigate functions which are applied to a signal in a sliding fashion. Let us first define what is meant hereby:\nDefinition 5. Let M and N be sets, let c \u2208 N1 be a positive natural number and let f : M c \u2192 N be a function. Then\nSlidef : \u222ac (M)\u2192 \u222a1(N),\n\u03be 7\u2192 dimM (\u03be)\u2212c+1\u2211\ni=1\nf (Subsignalc(\u03be, i)) \u00b7 e dimM (\u03be)\u2212c+1 i ,\nis the operator that applies f in a sliding fashion to arbitrary signals.\nThe next result states that functions applied in a sliding fashion are essentially the same as subsignal compatible transformations, and that the exchange property could be weakened to hold only for the case where the dimensionality reduction constant equals the subsignal dimensionality:\nTheorem 6. Let M and N be sets, let c \u2208 N1 and let T : \u222ac (M) \u2192 \u222a1(N) be a function. Then the following are equivalent:\n(a) T is a subsignal compatible transformation with dimensionality reduction constant c. (b) T fulfills the dimensionality reduction property, and for all \u03be \u2208 \u222ac(M) and all i \u2208 {1, . . . ,dimM (\u03be) \u2212 c + 1} it holds that T (Subsignalc(\u03be, i)) = T (\u03be)i. (c) There exists a function f : M c \u2192 N with T = Slidef .\nProof. (a) \u21d2 (b): Trivial, since the dimensionality reduction property is fulfilled by definition, and the claimed condition is only the special case of the exchange property where d = c.\n4 (b) \u21d2 (c): Define f : M c \u2192 N , \u03be 7\u2192 T (\u03be). For \u03be \u2208M c we have dimN (T (\u03be)) = 1 due to the dimensionality reduction property, therefore f is well-defined. Now let \u03be \u2208 \u222ac(M) and define D := dimM (\u03be). It is clear that dimN (T (\u03be)) = dimN (Slidef (\u03be)) = D \u2212 c + 1. Let i \u2208 {1, . . . , D \u2212 c + 1}, then the precondition (PC) implies\nSlidef (\u03be)i D. 5 = f (Subsignalc(\u03be, i))\n= T (Subsignalc(\u03be, i)) PC = T (\u03be)i,\nhence T = Slidef . (c) \u21d2 (a): Let us suppose that T = Slidef for a function f : M c \u2192 N . Slidef inherently fulfills the dimensionality reduction property. Let d \u2208 N1, d \u2265 c, be an arbitrary subsignal dimensionality and let \u03be \u2208 \u222ad(M) be a signal. Further, let i \u2208 {1, . . . ,dimM (\u03be)\u2212d+1} be an arbitrary subsignal index. Remembering that dimM (Subsignald(\u03be, i)) = d and using Lemma 2 we have\nSlidef (Subsignald(\u03be, i))\nD. 5 = d\u2212c+1\u2211 j=1 f (Subsignalc(Subsignald(\u03be, i), j)) \u00b7 ed\u2212c+1j\nL. 2 = d\u2212c+1\u2211 j=1 f (Subsignalc(\u03be, i+ j \u2212 1)) \u00b7 ed\u2212c+1j\nD. 5 = d\u2212c+1\u2211 j=1 Slidef (\u03be)i+j\u22121 \u00b7 ed\u2212c+1j\nD. 1 = Subsignald\u2212c+1(Slidef (\u03be), i),\nthus the exchange property is satisfied as well.\nThe set of subsignal compatible transformations is vast. There are, however, transformations that are not subsignal compatible:\nExample 7. As a counterexample, let c \u2208 N1 be arbitrary and consider the function T : \u222ac (M)\u2192 \u222a1(N),\n\u03be 7\u2192 dimM (\u03be)\u2212c+1\u2211\n\u03bd=1\n\u03bedimM (\u03be)\u2212\u03bd+1 \u00b7 e dimM (\u03be)\u2212c+1 \u03bd ,\nwhich just reverses the final entries of its argument. The dimensionality reduction property is clearly satisfied by T . Let \u03be \u2208 \u222ac(M) and i \u2208 {1, . . . ,dimM (\u03be)\u2212 c+ 1}, then we have T (Subsignalc(\u03be, i)) = \u03bec+i\u22121 but T (\u03be)i = \u03bedimM (\u03be)\u2212i+1. As these two expressions cannot be equal for all \u03be \u2208 \u222ac(M) unless M is a singleton, T cannot be a subsignal compatible transformation by Theorem 6."}, {"heading": "B. Composition of Subsignal Compatible Transformations", "text": "The composition of subsignal compatible transformations is again a subsignal compatible transformation:\nTheorem 8. Let M , N and P be sets and let c1, c2 \u2208 N1. Suppose T1 : \u222ac1 (M) \u2192 \u222a1(N) is a subsignal compatible transformation with dimensionality reduction constant c1, and T2 : \u222ac2 (N)\u2192 \u222a1(P ) is a subsignal compatible transformation with dimensionality reduction constant c2.\nDefine c := c1 + c2 \u2212 1 \u2208 N1. Then T : \u222ac (M)\u2192 \u222a1(P ), \u03be 7\u2192 T2(T1(\u03be)), is a subsignal compatible transformation with dimensionality reduction constant c.\nProof. We first note that c \u2265 1 since c1 \u2265 1 and c2 \u2265 1, hence indeed c \u2208 N1. Let \u03be \u2208 \u222ac(M) be arbitrary for demonstrating that T is well-defined. As c \u2265 c1 because of c2 \u2265 1, we yield \u222ac(M) \u2286 \u222ac1(M) and hence T1(\u03be) is well-defined. Further, we yield dimN (T1(\u03be)) = dimM (\u03be)\u2212c1 +1 \u2265 c\u2212c1 +1 = c2 using the dimensionality reduction property of T1, therefore T1(\u03be) \u2208 \u222ac2(N). Thus T2(T1(\u03be)) is well-defined, and so is T .\nFor all \u03be \u2208 \u222ac(M), the dimensionality reduction property of T1 and T2 now implies\ndimP (T (\u03be)) = dimP (T2(T1(\u03be))) DRP = dimN (T1(\u03be))\u2212 c2 + 1\nDRP = dimM (\u03be)\u2212 c1 + 1\u2212 c2 + 1 = dimM (\u03be)\u2212 c+ 1,\ntherefore T fulfills the dimensionality reduction property. Let d \u2208 N1, d \u2265 c, be arbitrary, and let \u03be \u2208 \u222ad(M) and i \u2208 {1, . . . ,dimM (\u03be) \u2212 d + 1}. Since T1 and T2 satisfy the exchange property we find\nT (Subsignald(\u03be, i))\n= T2(T1(Subsignald(\u03be, i))) XP = T2(Subsignald\u2212c1+1(T1(\u03be, i))) XP = Subsignald\u2212c1+1\u2212c2+1(T2(T1(\u03be)), i) = Subsignald\u2212c+1(T (\u03be), i),\nwhere d \u2265 c1 and d \u2212 c1 + 1 \u2265 c2 hold during the two respective applications of the exchange property. Therefore, T also fulfills the exchange property.\nThis result can be generalized immediately to compositions of more than two subsignal compatible transformations:\nCorollary 9. Let n \u2208 N, n \u2265 2, and let M1, . . . ,Mn+1 be sets. For each \u03bb \u2208 {1, . . . , n} let T\u03bb : \u222ac\u03bb (M\u03bb)\u2192 \u222a1(M\u03bb+1) be a subsignal compatible transformation with dimensionality reduction constant c\u03bb \u2208 N1. Then the composed function T : \u222ac (M1) \u2192 \u222a1(Mn+1), \u03be 7\u2192 ( \u25e6\u03bb=n1 T\u03bb ) (\u03be), is a subsignal compatible transformation with dimensionality reduction constant c := \u2211n \u00b5=1 c\u00b5 \u2212 n+ 1 \u2208 N1.\nProof. Define S1 := T1, and for each \u03bb \u2208 {2, . . . , n} let S\u03bb : \u222a\u2211\u03bb\n\u00b5=1 c\u00b5\u2212\u03bb+1 (M1) \u2192 \u222a1(M\u03bb+1), \u03be 7\u2192 T\u03bb(S\u03bb\u22121(\u03be)),\nbe a function. Since T = Sn, the claim follows when it is shown with induction for \u03bb that S\u03bb is a subsignal compatible transformation with dimensionality reduction constant\u2211\u03bb \u00b5=1 c\u00b5 \u2212 \u03bb + 1. While the situation \u03bb = 1 is trivial, the induction step follows with Theorem 8."}, {"heading": "C. CNNs without Pooling Layers", "text": "The previous parts of this section were quite abstract. We now demonstrate how Convolutional Neural Networks without any pooling layers fit in the theory developed so far. Pooling layers require more preparations and are detailed in Sect. IV.\n5 The convolution operation is the substance of a CNN. Here, multi-channel input feature maps are convolved channelwise with previously learned filter banks, and the result is accumulated and a trainable bias added to yield the output feature map.\nWe start with introducing indexing rules for iterated structures to account for the multi-channel nature of the occurring signals. Let M be a set, a, b \u2208 N1 positive natural numbers and \u03be \u2208 (Ma)b a multi-channel signal. It is then \u03bej \u2208Ma for indices j \u2208 {1, . . . , b}, and moreover (\u03bej)i \u2208 M for indices j \u2208 {1, . . . , b} and i \u2208 {1, . . . , a}. This rule is extended in the natural way for sets written explicitly as products with more than two factors. Therefore, if \u03be \u2208 ((Ma)b)c for another number c \u2208 N1, then for example (\u03bek)j \u2208 Ma for indices k \u2208 {1, . . . , c} and j \u2208 {1, . . . , b}.\nThese rules will become more clear if we consider the multi-channel convolution operation \u2217. Suppose the samples are members of a ring R, m \u2208 N1 denotes the number of input channels, n \u2208 N1 is the number of output channels, and c \u2208 N1 equals the number of samples considered at any one time during convolution with the filter bank. Then input signals or feature maps with D \u2208 N1 samples are of the form \u03be \u2208 (Rm)D, and filter banks can be represented by a tensor w \u2208 ((Rn)m)c. We must have that D \u2265 c, that is the filter kernel should be smaller than the input signal.\nThe output feature map (\u03be \u2217 w) \u2208 (Rn)D\u2212c+1 is then\n(\u03be \u2217 w)i := m\u2211 \u03bb=1 c\u2211 \u00b5=1 (w\u00b5)\u03bb \u00b7 (\u03bec+i\u2212\u00b5)\u03bb \u2208 Rn\nfor indices i \u2208 {1, . . . , D\u2212 c+1}. Note that (w\u00b5)\u03bb \u2208 Rn and (\u03bec+i\u2212\u00b5)\u03bb \u2208 R, so that the result of their product is understood here as scalar product. The operation is well-defined since c + i \u2212 \u00b5 \u2208 {1, . . . , D}, which follows immediately through substitution of the extreme values of i and \u00b5.\nExample 10. The multi-channel convolution operation is a subsignal compatible transformation: Define M := Rm and N := Rn and consider\nfconv : M c \u2192 N ,\n\u03be 7\u2192 m\u2211 \u03bb=1 c\u2211 \u00b5=1 (w\u00b5)\u03bb \u00b7 (\u03bec\u2212\u00b5+1)\u03bb.\nSince \u00b5 \u2208 {1, . . . , c} it is c\u2212\u00b5+1 \u2208 {1, . . . , c}, hence fconv is well-defined. For all \u03be \u2208MD and any i \u2208 {1, . . . , D\u2212 c+ 1} follows\nSlidefconv(\u03be)i D. 5 = fconv(Subsignalc(\u03be, i))\nD. 1 = fconv\n( c\u2211\n\u03bd=1\n\u03bei+\u03bd\u22121 \u00b7 ec\u03bd\n)\n= m\u2211 \u03bb=1 c\u2211 \u00b5=1 (w\u00b5)\u03bb \u00b7 ( c\u2211 \u03bd=1 \u03bei+\u03bd\u22121 \u00b7 ec\u03bd ) c\u2212\u00b5+1  \u03bb\n(\u2666) = m\u2211 \u03bb=1 c\u2211 \u00b5=1 (w\u00b5)\u03bb \u00b7 (\u03bei+c\u2212\u00b5+1\u22121)\u03bb\n= (\u03be \u2217 w)i,\nwhere \u03bd = c \u2212 \u00b5 + 1 was substituted in the (\u2666) step. The convolution operation as defined above is hence in fact the application of fconv in a sliding fashion. Therefore, Theorem 6 guarantees that \u2217 is a subsignal compatible transformation with dimensionality reduction constant c.\nSince fully-connected layers are merely a special case of convolutional layers, these do not need any special treatment here. Addition of biases does not require any knowledge on the spatial structure of the convolution\u2019s result and is therefore a subsignal compatible transformations with dimensionality reduction constant 1. Non-linearity layers are nothing but the application of a scalar-valued function to all the samples of an input signal. Hence these layers form also subsignal compatible transformations with dimensionality reduction constant 1 for all non-empty subsignals due to Theorem 6.\nFurthermore, compositions of these operations can also be understood as subsignal compatible transformation with Corollary 9. As a consequence, the exchange property facilitates application of a Convolutional Neural Networks without pooling layers to an entire signal at once instead of each subsignal independently without changing the actual output. The next section will extend this result to CNNs that also feature pooling layers."}, {"heading": "IV. POOLING LAYERS AND FUNCTIONS APPLIED IN A STRIDED FASHION", "text": "So far we have shown how convolutional layers and nonlinearity layers of a Convolutional Neural Network fit in the framework of subsignal compatible transformations. In this section, we analyze pooling layers which apply pooling kernels in a strided fashion. This is equivalent to functions applied in a sliding fashion followed by a downsampling operation. The theory developed herein can of course also be applied to other functions than pooling kernels, for example to strided multichannel convolutions using the results from Sect. III-C.\nWe will demonstrate how these functions can be turned into subsignal compatible transformations using a data structure recently introduced as fragmentation [15]. Here, we will greatly generalize the method proposed by [15] and rigorously prove the correctness of the approach. As a side effect of our results, we are able to accurately describe the dynamics of the entire execution chain, which also includes the possibility of tracking down the position of each processed subsignal in the fragmentation data structure.\nMoreover, we analyze under which circumstances the fragment dimensionalities are guaranteed to always be homogeneous. This is a desirable property as it facilitates the application of subsequent operations to signals which all have the same number of samples, rendering cumbersome handling of special cases obsolete and thus resulting in accelerated execution on massively parallel processors.\nWe first state more precisely what the application of a function in a strided fashion means (see Fig. 3 for orientation):\n6 \u03be1\n\u03be2\n\u03be3\n\u03be4\n\u03be5\n\u03be6\ng\ng\nStrideg(\u03be)1 = g(\u03be1, \u03be2, \u03be3)\nStrideg(\u03be)2 = g(\u03be4, \u03be5, \u03be6)\nFig. 3. Illustration of the application of a function in a strided fashion to a signal with six samples. The function g maps three samples to one, it is here evaluated on non-overlapping subsignals extracted from the original signal \u03be.\nDefinition 11. Let M and N be sets, let k \u2208 N1 be a positive natural number and let g : Mk \u2192 N be a function. Then\nStrideg : \u222a\u221eq=1 Mkq \u2192 \u222a1(N), \u03be 7\u2192 dimM (\u03be)/k\u2211\ni=1\ng (Subsignalk(\u03be, k(i\u2212 1) + 1)) \u00b7 e dimM (\u03be)/k i ,\nis the operator that applies g in a strided fashion to signals where the number of samples is a multiple of k.\nSince it is k(i \u2212 1) + 1 \u2208 {1, . . . ,dimM (\u03be) \u2212 k + 1} for all i \u2208 {1, . . . ,dimM (\u03be)/k}, Strideg is well-defined. We further have dimM (\u03be)/dimN (Strideg(\u03be)) = k for all \u03be in the domain of Strideg . Since the input dimensionality is here reduced through division with a natural number rather than a subtraction, the dimensionality reduction property cannot be fulfilled unless k = 1. The situation in which k = 1 is, however, not interesting since then Strideg = Slideg which was already handled in Sect. III.\nBefore continuing with the fragmentation data structure, let us discuss an example:\nExample 12. Suppose we want to process real-valued signals with m \u2208 N1 channels, that is M = N = Rm, where each channel should be processed independently of the others. Average pooling is then realized by the pooling kernel gavg(\u03be) := 1k \u2211k \u03bd=1 \u03be\u03bd , which determines the channelwise empirical mean value of the samples. Another example is max-pooling, where the maximum entry in each channel is sought. This can be computed with the pooling kernel gmax(\u03be) := \u2211m \u03bb=1 ( maxk\u03bd=1(\u03be\u03bd)\u03bb ) \u00b7 em\u03bb . Finally, assume nonunit stride convolutions should be carried out. This is equivalent to performing a conventional convolution followed by strided application of the pooling kernel gproj(\u03be) := \u03be1, which just projects a given signal onto its first sample."}, {"heading": "A. Fragmentation", "text": "The fragmentation operator performs a special reordering operation. For its precise analysis, we need to recap some elementary number theory. For all numbers a \u2208 N and b \u2208 N1, Euclidean division guarantees that there are unique numbers div(a, b) \u2208 N and rem(a, b) \u2208 {0, . . . , b\u2212 1} so that\na = div(a, b) \u00b7 b+ rem(a, b).\nHere is a small collection of results on these operators for further reference:\nProposition 13. It is div(a, 1) = a and rem(a, 1) = 0 for all a \u2208 N. Moreover, div(a + bc, c) = div(a, c) + b and rem(a+ bc, c) = rem(a, c) for all a, b \u2208 N and c \u2208 N1.\nIf the fragmentation operator is applied to a signal, it puts certain samples into individual fragments, which can be grasped as signals themselves. If a collection of fragments is again fragmented, a larger collection of fragments results. The total number of samples is, however, left unchanged after these operations. For the sake of convenience, we will here use matrices as data structure for fragmented signals, where columns correspond to fragments and rows correspond to signal samples, see Fig. 4.\nLet us fix some notation. If M is a set and a, b \u2208 N1, then Ma\u00d7b denotes the set of all matrices with a rows and b columns with entries from M . For \u03be \u2208 Ma\u00d7b we write rdimM (\u03be) = a and cdimM (\u03be) = b. Further, \u03bei, j is the entry in the i-th row and j-th column of \u03be where i \u2208 {1, . . . , a} and j \u2208 {1, . . . , b}. The transpose of \u03be is written as \u03beT .\nThe vectorization operator [21] stacks all the columns of a matrix on top of another:\nDefinition 14. Let M be a set and a, b \u2208 N1. The vectorization operator veca\u00d7b : Ma\u00d7b \u2192 Mab is characterized by veca\u00d7b(\u03be)j = \u03berem(j\u22121, a)+1, div(j\u22121, a)+1 for all indices j \u2208 {1, . . . , ab} and all matrices \u03be \u2208 Ma\u00d7b. The inverse vectorization operator vec\u22121a\u00d7b : M\nab \u2192 Ma\u00d7b is given by vec\u22121a\u00d7b(\u03be)i, j = \u03be(j\u22121)a+i for all indices i \u2208 {1, . . . , a}, j \u2208 {1, . . . , b} and all vectors \u03be \u2208Mab.\nIt is straightforward to verify that these two operators are well-defined and inversely related to one another. With their help we may now define the fragmentation operator:\nDefinition 15. Let M be a set and k \u2208 N1. For arbitrary vector dimensionalities q \u2208 N1 and numbers of input fragments s \u2208 N1 we write\nFragk : M kq\u00d7s \u2192Mq\u00d7ks, \u03be 7\u2192 ( vec\u22121ks\u00d7q ( vecs\u00d7kq ( \u03beT )))T ,\nfor the fragmentation operator.\nHere, k equals the corresponding parameter from the application of a function in a strided fashion. Fragk is clearly well-defined, and the number of output fragments is ks. An illustration of the operations performed during fragmentation is depicted in Fig. 4. We note that fragmentation is merely a certain reordering operation:\nLemma 16. Let M be a set, k, q, s \u2208 N1 and \u03be \u2208Mkq\u00d7s. It is then rdimM (Fragk(\u03be)) = 1 k \u00b7rdimM (\u03be), cdimM (Fragk(\u03be)) = k \u00b7 cdimM (\u03be), and\nFragk(\u03be)\u00b5, \u03bd = \u03bediv((\u00b5\u22121)ks+\u03bd\u22121, s)+1, rem((\u00b5\u22121)ks+\u03bd\u22121, s)+1\nfor all indices \u00b5 \u2208 {1, . . . , q} and \u03bd \u2208 {1, . . . , ks}.\nProof. The dimensionality statements are obvious by the definition of Fragk. To prove the identity, let \u00b5 \u2208 {1, . . . , q}\n7 \u03be1\n\u03be2\n\u03be3\n\u03be4\n\u03be5\n\u03be6\n\u03be7\n\u03be8\n\u03be9\n\u03be10\n\u03be11\n\u03be12\n\u03be1\n\u03be4\n\u03be7\n\u03be10\n\u03be2\n\u03be5\n\u03be8\n\u03be11\n\u03be3\n\u03be6\n\u03be9\n\u03be12\n\u03be1\n\u03be7\n\u03be2\n\u03be8\n\u03be3\n\u03be9\n\u03be4\n\u03be10\n\u03be5\n\u03be11\n\u03be6\n\u03be12\nFrag3\nFrag2\nDefrag6\nFig. 4. Fragmentation operator with size three is applied to a signal with 12 = 2 \u00b7 2 \u00b7 3 samples, followed by another fragmentation with size two. Defragmentation with size 6 = 3 \u00b7 2 ultimately yields the original signal.\nand \u03bd \u2208 {1, . . . , ks}. Using the definition of the vectorization operator we yield\nFragk(\u03be)\u00b5, \u03bd = vec\u22121ks\u00d7q ( vecs\u00d7kq ( \u03beT )) \u03bd, \u00b5 = vecs\u00d7kq ( \u03beT ) (\u00b5\u22121)ks+\u03bd\n= ( \u03beT ) rem((\u00b5\u22121)ks+\u03bd\u22121, s)+1, div((\u00b5\u22121)ks+\u03bd\u22121, s)+1 ,\nand the claim follows.\nNext consider this operator that undoes the ordering of the fragmentation operator:\nDefinition 17. Let M be a set, let k \u2208 N1, and let q \u2208 N1 denote a vector dimensionality and s \u2208 N1 a number of output fragments. Then\nDefragk : M q\u00d7ks \u2192Mkq\u00d7s, \u03be 7\u2192 ( vec\u22121s\u00d7kq ( vecks\u00d7q ( \u03beT )))T ,\nis called the defragmentation operator.\nWe note that Defragk is well-defined and the number of input fragments must equal ks. Fragmentation and defragmentation are inversely related, that is Defragk \u25e6Fragk = idMkq\u00d7s and Fragk \u25e6Defragk = idMq\u00d7ks, see also Fig. 4. These properties of the defragmentation operator will be used later:\nLemma 18. Let M be a set. Let k, q, s \u2208 N1 be positive natural numbers and \u03be \u2208Mq\u00d7ks a fragmented signal. We have that rdimM (Defragk(\u03be)) = k \u00b7 rdimM (\u03be), cdimM (Defragk(\u03be)) = 1 k \u00b7 cdimM (\u03be), and\nDefragk(\u03be)\u00b5, \u03bd\n= \u03bediv((\u00b5\u22121)s+\u03bd\u22121, ks)+1, rem((\u00b5\u22121)s+\u03bd\u22121, ks)+1\nfor all indices \u00b5 \u2208 {1, . . . , kq}, \u03bd \u2208 {1, . . . , s}.\nProof. Completely analogous to Lemma 16.\nAs already outlined in Fig. 4, compositions of the fragmentation operator are equivalent to a single fragmentation operator with an adjusted parameterization:\nRemark 19. Let M be a set and k1, k2, q, s \u2208 N1. Then Fragk2(Fragk1(\u03be)) = Fragk1k2(\u03be) for all \u03be \u2208M k1k2q\u00d7s.\nProof. Let \u03be \u2208 Mk1k2q\u00d7s be a fragmented signal. We define A := Fragk1(\u03be) \u2208 M k2q\u00d7k1s, B := Fragk2(A) \u2208 M q\u00d7k1k2s, and C := Fragk1k2(\u03be) \u2208 M q\u00d7k1k2s. Since B and C are of equal size, it is enough to show entry-wise equivalence. Let \u00b5 \u2208 {1, . . . , q} and \u03bd \u2208 {1, . . . , k1k2s}. With Lemma 16 we have that C\u00b5, \u03bd = \u03be\u00b5C , \u03bdC and B\u00b5, \u03bd = A\u00b5B , \u03bdB = \u03be\u00b5A, \u03bdA using the indices\n\u00b5C := div((\u00b5\u2212 1)k1k2s+ \u03bd \u2212 1, s) + 1, \u03bdC := rem((\u00b5\u2212 1)k1k2s+ \u03bd \u2212 1, s) + 1, \u00b5B := div((\u00b5\u2212 1)k1k2s+ \u03bd \u2212 1, k1s) + 1, \u03bdB := rem((\u00b5\u2212 1)k1k2s+ \u03bd \u2212 1, k1s) + 1, \u00b5A := div((\u00b5B \u2212 1)k1s+ \u03bdB \u2212 1, s) + 1, \u03bdA := rem((\u00b5B \u2212 1)k1s+ \u03bdB \u2212 1, s) + 1.\nWe thus only have to show that \u00b5C = \u00b5A and \u03bdC = \u03bdA. It is\n\u00b5A = div( div((\u00b5\u2212 1)k1k2s+ \u03bd \u2212 1, k1s) \u00b7 k1s + rem((\u00b5\u2212 1)k1k2s+ \u03bd \u2212 1, k1s), s) + 1,\nwhich equals \u00b5C since div(a, b) \u00b7 b + rem(a, b) = a for all a, b. Completely analogous follows \u03bdA = \u03bdC .\nIt follows immediately that fragmentation is a commutative operation:\nRemark 20. If M denotes a set, k1, k2, q, s \u2208 N1 are natural numbers and \u03be \u2208 Mk1k2q\u00d7s is a fragmented signal, then Fragk2(Fragk1(\u03be)) = Fragk1(Fragk2(\u03be)).\nProof. Obvious with Remark 19 as multiplication in N1 is commutative."}, {"heading": "B. Relationship between Fragmentation, Functions Applied in a Strided Fashion and Subsignal Compatible Transformations", "text": "We are almost ready for analyzing how functions applied in a strided fashion fit into the theory developed so far. The outcome of a subsignal compatible transformation applied to a fragmented signal is defined in the natural way:\nDefinition 21. Let M,N be sets and T : \u222ac (M) \u2192 \u222a1(N) a subsignal compatible transformation with dimensionality reduction constant c \u2208 N1. Let \u03be \u2208 MD\u00d7s be a fragmented signal with D \u2208 N1 samples in each of the s \u2208 N1 fragments, where D \u2265 c. For \u03bb \u2208 {1, . . . , s} we write \u03be(\u03bb) := \u2211D \u03bd=1 \u03be\u03bd, \u03bb \u00b7 eD\u03bd \u2208 MD for the individual fragments. The output of T applied to \u03be is then defined as\nT (\u03be) := [T (\u03be(1)) , . . . , T (\u03be(s))] \u2208 N (D\u2212c+1)\u00d7s,\nthat is T is applied to all the fragments independently.\n8 Let us now formally introduce the concept of a processing chain, which captures and generalizes all the dynamics of a Convolutional Neural Network:\nDefinition 22. We call a collection of the following objects a processing chain: A fixed subsignal dimensionality B \u2208 N1, a number of layers L \u2208 N1, a sequence of sets M0, . . . ,ML, N1, . . . , NL, and for each j \u2208 {1, . . . , L} subsignal compatible transformations Tj : \u222acj (Mj\u22121)\u2192 \u222a1(Nj) with dimensionality reduction constant cj \u2208 N1 and functions gj : N kj j \u2192Mj where kj \u2208 N1. For j \u2208 {0, . . . , L} we define EvalStridej : M B 0 \u2192 \u222a1(Mj),\n\u03c1 7\u2192 { \u03c1, if j = 0, Stridegj (Tj(EvalStridej\u22121(\u03c1))), if j > 0,\nas the function that applies the processing chain in a strided fashion, and EvalSlidej : \u222aB (M0)\u2192 \u222a1(Mj),\n\u03be 7\u2192 { \u03be, if j = 0, Fragkj (Slidegj (Tj(EvalSlidej\u22121(\u03be)))), if j > 0,\nas the function that applies the processing chain in a sliding fashion. We note that these two chains of functions are not well-defined unless additional divisibility conditions are fulfilled, detailed below.\nThe number B here represents the extent of the region of interest that is fed into a Convolutional Neural Network. The functions Tj can be substituted with the types of layers discussed earlier, like convolutions or non-linearities. Pooling layers and other functions applied in a strided fashion can be plugged into a processing chain via the gj functions.\nThe EvalStride operator corresponds to the ordinary application of a CNN to an individual sample until an arbitrary layer. It is defined recursively, where in the recursion step the output of the previous layer is fed through a subsignal compatible transformation and then through a function applied in a strided fashion. The EvalSlide operator differs from this approach in that multiple overlapping samples are processed in one go. Here, the gj functions are applied in a sliding rather than a strided fashion, followed by a fragmentation operation.\nThis is much more efficient than the extraction of individual subsignals followed by ordinary CNN application since redundant computations are effectively prevented. An example of the concepts just introduced is given in Fig. 5. It remains, however, to be shown that this method actually produces the desired results, or in other words the correctness of the approach has to be proved.\nThe next result states under which circumstances the application of a processing chain is well-defined, and connects the two flavors of processing chain application with another:\nLemma 23. Suppose we are given a processing chain with the same notation as in Definition 22. Assume kj divides dimNj (Tj(EvalStridej\u22121(\u03c1))) for all j \u2208 {1, . . . , L} and all \u03c1 \u2208 MB0 , that is the application of the processing chain in a strided fashion should be well-defined.\nLet k\u2217j := \u220fj \u03bd=1 k\u03bd for j \u2208 {0, . . . , L} denote the stride products, which implies that k\u22170 = 1. Let D \u2208 N1, D \u2265 B,\nbe a signal dimensionality so that the number of subsignals D\u2212B+ 1 of length B is divisible by k\u2217L, and let \u03be \u2208MD0 be the considered signal. Then the application of the processing chain in a sliding fashion to \u03be is well-defined, and we can yield additional statements:\nWrite uj := dimMj (EvalStridej(SubsignalB(\u03be, i))) \u2208 N1 for all j \u2208 {0, . . . , L} as an abbreviation and note that this number actually does not depend on any subsignal index i. We further define U colj := cdimMj (EvalSlidej(\u03be)) \u2208 N1 and U rowj := rdimMj (EvalSlidej(\u03be)) \u2208 N1 for j \u2208 {0, . . . , L} as abbreviations. Then for all i \u2208 {1, . . . , D \u2212 B + 1} and all j \u2208 {0, . . . , L} the following holds: (a) uj = 1k\u2217j ( B \u2212 \u2211j \u00b5=1 k \u2217 \u00b5\u22121(c\u00b5 \u2212 1) ) .\n(b) U rowj = 1 k\u2217j\n( D \u2212 k\u2217j + 1\u2212 \u2211j \u00b5=1 k \u2217 \u00b5\u22121(c\u00b5 \u2212 1) ) , and\nthe number of fragments is U colj = k \u2217 j .\n(c) U rowj \u2212 uj + 1 = 1k\u2217j (D \u2212B + 1), that is the number of distinct subsignals with uj samples in each fragment of the fragmented signals equals the original number of distinct subsignals divided by the corresponding number of fragments.\n(d) For all \u00b5 \u2208 {1, . . . , uj} we have that\nEvalStridej(SubsignalB(\u03be, i))\u00b5\n= EvalSlidej(\u03be)div(i\u22121, k\u2217j )+\u00b5, rem(i\u22121, k\u2217j )+1,\nwhere the latter can also be understood as one sample of the Subsignaluj operator applied to a certain fragment of EvalSlidej(\u03be).\nProof. (a) Let i \u2208 {1, . . . , D\u2212B+ 1} be arbitrary and define \u03c1 := SubsignalB(\u03be, i) \u2208MB0 as an abbreviation. It is\nu0 = dimM0(EvalStride0(\u03c1)) = dimM0(\u03c1) = B,\nand the right-hand side of the claim trivially equals B for j = 0. Carrying out induction we yield for j \u2212 1\u2192 j:\nuj D. 22 = dimMj (Stridegj (Tj(EvalStridej\u22121(\u03c1))))\nD. 11 = 1kj dimNj (Tj(EvalStridej\u22121(\u03c1))) DRP = 1kj ( dimMj\u22121(EvalStridej\u22121(\u03c1))\u2212 cj + 1 ) IH = 1kj ( 1 k\u2217j\u22121 ( B \u2212 j\u22121\u2211 \u00b5=1 k\u2217\u00b5\u22121(c\u00b5 \u2212 1) ) \u2212 (cj \u2212 1) )\n= 1kjk\u2217j\u22121\n( B \u2212\nj\u22121\u2211 \u00b5=1 k\u2217\u00b5\u22121(c\u00b5 \u2212 1)\u2212 k\u2217j\u22121(cj \u2212 1)\n) ,\nwhere IH denotes substitution of the induction hypothesis. Hence, the claimed expression follows since k\u2217j = kjk \u2217 j\u22121. We note that uj is indeed a natural number because kj divides dimNj (Tj(EvalStridej\u22121(\u03c1))) by requirement.\n(b) Besides the statements on U rowj and U col j we here show that the application of the processing chain in a sliding fashion is well-defined using induction for j. Considering j = 0, EvalStride0(\u03be) = \u03be is trivially well-defined and by definition it is \u03be \u2208 MD0 = MD\u00d710 . Therefore, U row0 = D and U col0 = 1 which equals the claimed expressions since k\u22170 = 1.\n9 \u03be1\n\u03be2\n\u03be3\n\u03be4\n\u03be5\n\u03be6\n\u03be7\n\u03be8\n\u03be1 \u03be2\n\u03be2 \u03be3\n\u03be3 \u03be4\n\u03be4 \u03be5\n\u03be5 \u03be6\n\u03be6 \u03be7\n\u03be7 \u03be8\nmax\n{\n\u03be1 \u03be2 , \u03be2 \u03be3\n}\nmax\n{\n\u03be2 \u03be3 , \u03be3 \u03be4\n}\nmax\n{\n\u03be3 \u03be4 , \u03be4 \u03be5\n}\nmax\n{\n\u03be4 \u03be5 , \u03be5 \u03be6\n}\nmax\n{\n\u03be5 \u03be6 , \u03be6 \u03be7\n}\nmax\n{\n\u03be6 \u03be7 , \u03be7 \u03be8\n}\nmax\n{\n\u03be1 \u03be2 , \u03be2 \u03be3\n}\nmax\n{\n\u03be3 \u03be4 , \u03be4 \u03be5\n}\nmax\n{\n\u03be5 \u03be6 , \u03be6 \u03be7\n}\nmax\n{\n\u03be2 \u03be3 , \u03be3 \u03be4\n}\nmax\n{\n\u03be4 \u03be5 , \u03be5 \u03be6\n}\nmax\n{\n\u03be6 \u03be7 , \u03be7 \u03be8\n}\n\u03be1\n\u03be2\n\u03be3\n\u03be4\n\u03be5\n\u03be1 \u03be2\n\u03be2 \u03be3\n\u03be3 \u03be4\n\u03be4 \u03be5\nmax\n{\n\u03be1 \u03be2 , \u03be2 \u03be3\n}\nmax\n{\n\u03be3 \u03be4 , \u03be4 \u03be5\n}\n\u03be2\n\u03be3\n\u03be4\n\u03be5\n\u03be6\n\u03be2 \u03be3\n\u03be3 \u03be4\n\u03be4 \u03be5\n\u03be5 \u03be6\nmax\n{\n\u03be2 \u03be3 , \u03be3 \u03be4\n}\nmax\n{\n\u03be4 \u03be5 , \u03be5 \u03be6\n}\nQuot Slidemax Frag2\nSubsignal5(\u03be, 1)\nQuot Stridemax\nSubsignal5(\u03be, 2)\nQuot Stridemax\nFig. 5. Example for the two notions of application of a processing chain to an input signal: The upper part shows the dynamics of the EvalSlide approach which processes all possible subsignals in one go. The lower part shows the results of the EvalStride approach applied to two different subsignals. Here, Quot is a sub-signal compatible transformation that computes the quotient of two samples, and max is applied in a strided fashion to determine the maximum of two samples. The outcome of the EvalStride functions can be located in the results of the EvalSlide function, where the appropriate positions can be determined with Lemma 23. The graphics also emphasizes why the output of EvalStride should consist of only one sample in Theorem 25: If there is more than one sample, the defragmented version of the EvalSlide result will contain the result of the EvalStride function applied to subsignals in an interleaved fashion, which violates the exchange property of subsignal compatible transformations.\nFor j \u2212 1 \u2192 j, we first demonstrate that kj divides \u03c7 := rdimMj (Slidegj (Tj(EvalSlidej\u22121(\u03be)))) which implies well-definedness since the fragmentation operator can then indeed be applied. We find that\n\u03c7 D. 5 = rdimNj (Tj(EvalSlidej\u22121(\u03be)))\u2212 kj + 1\nDRP = rdimMj\u22121(EvalSlidej\u22121(\u03be))\u2212 cj + 1\u2212 kj + 1 = U rowj\u22121 \u2212 cj + 1\u2212 kj + 1\nIH = 1k\u2217j\u22121\n( D \u2212 k\u2217j\u22121 + 1\u2212 j\u22121\u2211 \u00b5=1 k\u2217\u00b5\u22121(c\u00b5 \u2212 1) ) + 1k\u2217j\u22121 ( \u2212k\u2217j\u22121(cj \u2212 1)\u2212 k\u2217j + k\u2217j\u22121\n) = 1k\u2217j\u22121 ( D \u2212 k\u2217j + 1\u2212 j\u2211 \u00b5=1 k\u2217\u00b5\u22121(c\u00b5 \u2212 1) ) .\nBy requirement on the signal length D there exists a number t \u2208 N1 so that D \u2212B + 1 = k\u2217Lt. Substitution yields\n\u03c7 = 1k\u2217j\u22121\n( B \u2212\nj\u2211 \u00b5=1 k\u2217\u00b5\u22121(c\u00b5 \u2212 1) + k\u2217Lt\u2212 k\u2217j ) = kjuj + kj \u00b7 \u00b7 \u00b7 kL \u00b7 t\u2212 kj .\nProposition 13 implies that kj divides \u03c7 since uj \u2208 N1 as we have seen in (a), hence the processing chain can be applied until the j-th layer. With Lemma 16 one sees that U rowj = 1 kj \u03c7 which immediately yields the claimed expression. As only the fragmentation operator changes the number of columns in the entire processing chain, it follows that U colj = kjU col j\u22121 with Lemma 16, which shows the claimed identity. (c) Using (a) and (b) we obtain\nU rowj \u2212 uj + 1 = 1k\u2217j ( D \u2212 k\u2217j + 1\u2212B ) + 1 = D\u2212B+1k\u2217j ,\nwhich is a natural number as the number of subsignals was required to be divisible by k\u2217L, was implies divisibility by k \u2217 j .\n(d) We prove this by induction for j. For j = 0, the left-hand side equals SubsignalB(\u03be, i)\u00b5 = \u03bei+\u00b5\u22121 using Definition 1 for all i \u2208 {1, . . . , D\u2212B + 1} and all \u00b5 \u2208 {1, . . . , B}. Since k\u22170 = 1 we find with Proposition 13 that the right-hand side is \u03bediv(i\u22121, 1)+\u00b5, rem(i\u22121, 1)+1 = \u03bei\u22121+\u00b5, 1, hence both sides are equal.\nLet us now turn to j \u2212 1 \u2192 j. Let \u00b5 \u2208 {1, . . . , uj} be arbitrary, let i \u2208 {1, . . . , D\u2212B+1} be a fixed subsignal index and write \u03c4 := EvalStridej\u22121(SubsignalB(\u03be, i)) \u2208 M uj\u22121 j\u22121 as an abbreviation. Considering the left-hand side of the claim\n10\nwe obtain\nEvalStridej(SubsignalB(\u03be, i))\u00b5 D. 22 = Stridegj (Tj(\u03c4))\u00b5\nD. 11 = gj  kj\u2211 \u03bd=1 Tj(\u03c4)kj(\u00b5\u22121)+\u03bd \u00b7 e kj \u03bd  T. 6 = gj\n kj\u2211 \u03bd=1 Tj ( cj\u2211 \u03bb=1 \u03c4kj(\u00b5\u22121)+\u03bd+\u03bb\u22121 \u00b7 e cj \u03bb ) \u00b7 ekj\u03bd  IH = gj\n kj\u2211 \u03bd=1 Tj ( cj\u2211 \u03bb=1 EvalSlidej\u22121(\u03be)\u03c8, \u03c9 \u00b7 e cj \u03bb ) \u00b7 ekj\u03bd  , where \u03c8 := div(i\u2212 1, k\u2217j\u22121) + kj(\u00b5\u2212 1) + \u03bd + \u03bb\u2212 1 \u2208 N1 and \u03c9 := rem(i\u2212 1, k\u2217j\u22121) + 1 \u2208 N1.\nLet \u03c0 := EvalSlidej\u22121(\u03be) \u2208 M Urowj\u22121\u00d7U col j\u22121\nj\u22121 be an abbreviation for the analysis of the right-hand side of the claim. We have that\nEvalSlidej(\u03be)div(i\u22121, k\u2217j )+\u00b5, rem(i\u22121, k\u2217j )+1 D. 22 = Fragkj (Slidegj (Tj(\u03c0))div(i\u22121, k\u2217j )+\u00b5, rem(i\u22121, k\u2217j )+1 L. 16 = Slidegj (Tj(\u03c0))div(\u03c6, k\u2217j\u22121)+1, rem(\u03c6, k\u2217j\u22121)+1,\nwhere the number of input fragments to Fragkj was k \u2217 j\u22121 as shown in (b) and where we have defined \u03c6 := ( div(i\u2212 1, k\u2217j ) + \u00b5\u2212 1 ) kjk \u2217 j\u22121 + rem(i\u2212 1, k\u2217j ) \u2208 N.\nBy the definition of the operators from Euclidean division follows that \u03c6 = i\u22121+(\u00b5\u2212 1) kjk\u2217j\u22121. Using Proposition 13 one yields\ndiv(\u03c6, k\u2217j\u22121) = div(i\u2212 1, k\u2217j\u22121) + kj(\u00b5\u2212 1), and rem(\u03c6, k\u2217j\u22121) + 1 = rem(i\u2212 1, k\u2217j\u22121) + 1 = \u03c9.\nTherefore\nEvalSlidej(\u03be)div(i\u22121, k\u2217j )+\u00b5, rem(i\u22121, k\u2217j )+1\nD. 5 = gj  kj\u2211 \u03bd=1 Tj(\u03c0)div(i\u22121, k\u2217j\u22121)+kj(\u00b5\u22121)+\u03bd, \u03c9 \u00b7 e kj \u03bd  T. 6 = gj\n kj\u2211 \u03bd=1 Tj ( cj\u2211 \u03bb=1 \u03c0\u03c8, \u03c9 \u00b7 e cj \u03bb ) \u00b7 ekj\u03bd  , which equals the left-hand side of the claim as we have seen earlier and thus the proof is finished.\nTherefore, the result of the EvalStride operator applied to arbitrary subsignals of an input signal emerge in the result of the EvalSlide operator which processes the entire signal in one go. Lemma 23 requires the length of the input signal to satisfy certain divisibility constraints. For extension of its statements to signals of arbitrary length we need two more operators:\nDefinition 24. Let r \u2208 N be a natural number, let M be a set and \u03b6 \u2208M be an arbitrary dummy element from M . Then\nStuffr : \u222a1 (M)\u2192 \u222ar+1(M),\n(\u03be1, . . . , \u03beq) 7\u2192 q\u2211\n\u03bd=1\n\u03be\u03bd \u00b7 eq+r\u03bd + r\u2211\n\u03bd=1\n\u03b6 \u00b7 eq+rq+\u03bd ,\nis called the stuffing operator that appends r copies of \u03b6 to its argument, and we further call\nTrimr : \u222ar+1 (M)\u2192 \u222a1(M),\n(\u03be1, . . . , \u03beq, \u03beq+1, . . . , \u03beq+r) 7\u2192 q\u2211\n\u03bd=1\n\u03be\u03bd \u00b7 eq\u03bd ,\nthe trimming operator that removes the final r entries from its argument.\nThe concrete choice of the dummy element \u03b6 does not matter in the following considerations since all output entries which are affected by its choice are trimmed away in the end. We are now in the position to state the main result of this section:\nTheorem 25. Suppose we are given a processing chain with the same notation as in Definition 22, where kj divides dimNj (Tj(EvalStridej\u22121(\u03c1))) for all j \u2208 {1, . . . , L} and all \u03c1 \u2208 MB0 , and where dimML(EvalStrideL(\u03c1)) = 1 for all \u03c1 \u2208 MB0 , that is the output of the entire processing chain applied in a strided fashion consists of exactly one sample.\nLet k\u2217L := \u220fL \u03bd=1 k\u03bd denote the stride product of the L-th\nlayer, and let r\u0303 : N1 \u2192 {0, . . . , k\u2217L \u2212 1},\n\u03b4 7\u2192 { 0, if k\u2217L divides \u03b4 \u2212B + 1, k\u2217L \u2212 rem(\u03b4 \u2212B + 1, k\u2217L), otherwise,\ndenote the number of dummy samples that have to be padded to an original signal with \u03b4 samples to satisfy divisibility requirements. Further define r : \u222a1 (M0)\u2192 {0, . . . , k\u2217L \u2212 1}, \u03be 7\u2192 r\u0303(dimM0(\u03be)), as an abbreviation that computes the required number of dummy samples in dependence on an original signal \u03be.\nConsider the function\nT : \u222aB (M0)\u2192 \u222a1(ML), \u03be 7\u2192 Trimr(\u03be)(Defragk\u2217L(EvalSlideL(Stuffr(\u03be)(\u03be)))),\nwhich first pads the input signal with as many dummy entries such that each fragmentation operation during application of the processing chain in a sliding fashion comes out even, applies the processing chain in a sliding fashion, defragments the outcome and and eventually removes all superfluous entries that emerged from the initial stuffing.\nThen T is a subsignal compatible transformation with dimensionality reduction constant B. Furthermore, T (\u03c1) = EvalStrideL(\u03c1) for all \u03c1 \u2208MB0 and T = SlideEvalStrideL .\nProof. We note that r\u0303(\u03b4) is well-defined if k\u2217L does not divide \u03b4\u2212B+ 1, since then rem(\u03b4\u2212B+ 1, k\u2217L) \u2208 {1, . . . , k\u2217L\u2212 1} and thus k\u2217L \u2212 rem(\u03b4 \u2212B + 1, k\u2217L) \u2208 {1, . . . , k\u2217L \u2212 1}.\nLet \u03be \u2208 \u222aB(M0) and write D\u0303 := dimM0(\u03be). We have D := dimM0(Stuffr(\u03be)(\u03be)) = D\u0303+r(\u03be). If k \u2217 L divides D\u0303\u2212B+1 it is\n11\nr(\u03be) = 0, so rem(dimM0(Stuffr(\u03be)(\u03be))\u2212B + 1, k\u2217L) = 0. If on the other hand k\u2217L does not divide D\u0303\u2212B+1, then r(\u03be) > 0 and furthermore\ndimM0(Stuffr(\u03be)(\u03be))\u2212B + 1 = D\u0303 + k\u2217L \u2212 rem(D\u0303 \u2212B + 1, k\u2217L)\u2212B + 1.\nHence rem(dimM0(Stuffr(\u03be)(\u03be)) \u2212 B + 1, k\u2217L) = 0 due to the idempotence of the rem operator. Therefore, in every case is the number of subsignals of Stuffr(\u03be)(\u03be) with B samples divisible by k\u2217L, as required for application of Lemma 23.\nLemma 23 guarantees that \u03c0 := EvalSlideL(Stuffr(\u03be)(\u03be)) is well-defined. With Lemma 23(b) follows cdimML(\u03c0) = k \u2217 L. We demanded dimML(EvalStrideL(\u03c1)) = 1 for all \u03c1 \u2208MB0 , hence rdimML(\u03c0) =\n1 k\u2217L (D \u2212 B + 1) with Lemma 23(c). Therefore, Defragk\u2217L(\u03c0) is well-defined with exactly one output fragment, which has the same number of samples as we have subsignals of length B in the stuffed input signal: dimML(Defragk\u2217L(\u03c0)) = D \u2212B + 1.\nWe have that dimML(Defragk\u2217L(\u03c0)) \u2265 r(\u03be) + 1 because D = D\u0303+ r(\u03be) where D\u0303 \u2265 B, thus Trimr(\u03be)(Defragk\u2217L(\u03c0)) is well-defined. Since the trimming operator reduces dimensionality by r(\u03be) we find\ndimM0(\u03be)\u2212dimML(T (\u03be)) = D\u0303\u2212(D\u2212B+1\u2212r(\u03be)) = B\u22121.\nTherefore, T fulfills the dimensionality reduction property with dimensionality reduction constant B.\nWith Theorem 6 it is thus enough to demonstrate that\nT (SubsignalB(\u03be, i)) = T (\u03be)i \u2208ML\nfor all i \u2208 {1, . . . , D\u0303\u2212B+1} for T to be subsignal compatible. We first show that T (\u03c1) = EvalStrideL(\u03c1) for all \u03c1 \u2208 MB0 , which we will then use to show the weakened exchange property.\nLet \u03c1 \u2208 MB0 , then SubsignalB(Stuffr(\u03c1)(\u03c1), 1) = \u03c1 by the definition of the stuffing operator. We know that T (\u03c1) consists of a single sample as the dimensionality reduction constant of T is B, hence T (\u03c1) = T (\u03c1)1. Extraction of the very first sample of the result of the trimming operator is here equal to the extraction of the very first sample of the trimming operator\u2019s argument. Therefore,\nT (\u03c1)\n= Defragk\u2217L(EvalSlideL(Stuffr(\u03c1)(\u03c1)))1, 1 L. 18 = EvalSlideL(Stuffr(\u03c1)(\u03c1))div(0, k\u2217L)+1, rem(0, k\u2217L)+1\nL. 23(d) = EvalStrideL(SubsignalB(Stuffr(\u03c1)(\u03c1), 1))1\n= EvalStrideL(\u03c1).\nLet us now return to the exchange property. As before let \u03be \u2208 M D\u03030 , and let i \u2208 {1, . . . , D\u0303 \u2212 B + 1} be an arbitrary\nsubsignal index. We can omit the trimming operator as before and yield\nT (\u03be)i\n= Defragk\u2217L(EvalSlideL(Stuffr(\u03be)(\u03be)))i, 1 L. 18 = EvalSlideL(Stuffr(\u03be)(\u03be))div(i\u22121, k\u2217L)+1, rem(i\u22121, k\u2217L)+1\nL. 23(d) = EvalStrideL(SubsignalB(Stuffr(\u03be)(\u03be), i))1\nD. 24 = EvalStrideL(SubsignalB(\u03be, i))\n= T (SubsignalB(\u03be, i)) .\nHence T is a subsignal compatible transformation due to Theorem 6. Theorem 4 finally implies T = SlideEvalStrideL .\nWe can thus conclude that Convolutional Neural Networks can be turned into effectively computable subsignal compatible transformations using the EvalSlide operator. One could suspect that stuffing the input signal with dummy samples might have a negative effect on the computing time. However, the number of stuffed samples is always less than the stride product of the final layer and hence very small for reasonably sized CNNs.\nMoreover, stuffing guarantees that all fragments encountered during evaluation are homogeneous. This facilitates usage of simple parallelized implementations which can rely on fragmented signals where each fragment has the same number of samples, which is especially efficient on massively parallel processors."}, {"heading": "V. MULTI-SCALE TRANSFORMATIONS", "text": "The previous sections have shown how Convolutional Neural Networks can be efficiently evaluated on entire images through the theory of subsignal compatible transformations. We now consider functions that take multiple spatial resolutions of a single signal as input. Since here the context of local regions is incorporated as well, this approach has proven highly effective in classification tasks [13]. We here assume that the number of samples considered at any one time is fixed for all scale levels. This facilitates the design of scale-invariant representations, for example by using the same classifier for all scales of the input [13].\nA signal is downscaled by application of a lowpass filter to reduce aliasing artifacts, followed by a downsampling operator which returns a subset of equidistant samples. When a subsignal is extracted from a downscaled input signal, it should contain a downscaled copy of the corresponding subsignal from the original input signal. This requires boundary-handling of the input signal, since for example the very first subsignal cannot be extended to allow for a larger context by means of only the original samples. Let us first formalize the concepts of boundary handling and subsignal extraction subject to boundary handling:\nDefinition 26. Let M be a set, let d \u2208 N1 denote a subsignal dimensionality and let R \u2208 N be a boundary size. (a) A function \u03d1 : \u222a1 (M) \u00d7 Z \u2192 M is called boundary-\nhandling function if and only if \u03d1(\u03be, \u03bd) = \u03be\u03bd for all \u03be \u2208 \u222a1(M) and all \u03bd \u2208 {1, . . . ,dimM (\u03be)}.\n12\n(b) We call the function\nPad\u03d1R : \u222a1 (M)\u2192 \u222a1+2R(M),\n\u03be 7\u2192 dimM (\u03be)+2R\u2211\n\u03bd=1\n\u03d1(\u03be, \u03bd \u2212R) \u00b7 edimM (\u03be)+2R\u03bd ,\nwhich extends signals at both ends with R samples subject to the boundary-handling function \u03d1 the padding operator.\n(c) The function\nSubsignalPad\u03d1(d,R) : \u221e\u22c3 D=d ( MD \u00d7 {1, . . . , D \u2212 d+ 1} ) \u2192Md+2R,\n(\u03be, i) 7\u2192 d+2R\u2211 \u03bd=1 \u03d1(\u03be, i+ \u03bd \u2212R\u2212 1) \u00b7 ed+2R\u03bd ,\nthat extracts subsignals subject to the boundary-handling function \u03d1 and implicitly pads R samples at both ends is called the padded subsignal extraction operator.\nNext, we define how we extract downscaled subsignals using the concepts just introduced:\nDefinition 27. Let M be a set and let k \u2208 N1 denote a downsampling step size. (a) We call\nDownk : \u222a1 (M)\u2192 \u222a1(M),\n\u03be 7\u2192 ddimM (\u03be)/ke\u2211\n\u03bd=1\n\u03bek(\u00b5\u22121)+1 \u00b7 eddimM (\u03be)/ke\u03bd ,\nthe downsampling operator, which extracts samples from equidistant locations.\n(b) The function\nMultiScaleIndexk : N1 \u2192 N1 i 7\u2192 k \u00b7 div(i\u2212 1, k) + 1,\nis called the multi-scale subsignal index transformation. (c) Suppose H : Mh \u2192M is a lowpass filter kernel of size\nh \u2208 N1, where h \u2265 k should hold to avoid aliasing artifacts. Further, let d \u2208 N1 be a subsignal dimensionality, R \u2208 N a boundary size and \u03d1 : \u222a1 (M) \u00d7 Z \u2192 M a boundary-handling function. Then\nMultiScaleSubsignal (\u03d1,H) (d,R,k) :\n\u221e\u22c3 D=d ( MD \u00d7 {1, . . . , D \u2212 d+ 1} ) \u2192 \u222a1(M), (\u03be, i) 7\u2192 Downk(SlideH(SubsignalPad\u03d1(d,R)(\u03be, i))),\nis called the multi-scale subsignal extraction operator.\nThere are a few requirements so that extraction of downscaled subsignals makes sense. Most importantly is the correct determination of the boundary size R in the definition of the MultiScaleSubsignal operator. It should be chosen so that the extracted subsignals from each scale level are always exactly centered around the corresponding subsignals from the original scale level. It is moreover beneficial if the entire input signal can be downscaled in one go, so that the output of the MultiScaleSubsignal operator equals simple extraction of subsignals from that downscaled signal.\n13\nHowever, if this approach is pursued there are subsignals in the original signal which do not possess a downscaled counterpart in this representation. The MultiScaleIndex function alleviates this problem through computation of an appropriate subsignal index which is guaranteed to possess a downscaled counterpart. Although this is merely an approximation, it is assured that the correct subsignal index in the downscaled signal is always less than one sample off. The next result formalizes these thoughts, an illustration of its statements is given in Fig. 6.\nLemma 28. Let M be a set, and let k \u2208 N be a downsampling step size where we require that k \u2265 2. Moreover, let H : Mh \u2192 M be a lowpass filter kernel of size h \u2208 N1, h \u2265 k, and let B \u2208 N1 be a subsignal dimensionality and suppose \u03d1 : \u222a1(M)\u00d7Z\u2192M is a boundary-handling function.\nDefine R\u0303 := (k\u22121)B+h\u2212k \u2208 N and R := \u2308 R\u0303/2 \u2309 \u2208 N as the boundary size. Assume we are given a signal \u03be \u2208 \u222aB(M) and let us write D := dimM (\u03be) as an abbreviation. Ultimately, let \u03c0 := Downk(SlideH(Pad\u03d1R(\u03be))) \u2208 \u222a1(M) denote the downscaled signal. Then the following holds:\n(a) SubsignalB(\u03be, i)\u00b5 = SubsignalPad \u03d1 (B,R)(\u03be, i)\u00b5+R for\nall \u00b5 \u2208 {1, . . . , B} and all i \u2208 {1, . . . , D \u2212B + 1}, that is the padded subsignals are centered around the original subsignals.\n(b) dimM (\u03c0) = \u2308D\u2212B+1+rem(R\u0303, 2)\nk\n\u2309 + B \u2212 1, hence there\nare at least \u2308 D\u2212B+1\nk\n\u2309 subsignals with B samples in \u03c0,\nand at most one additional subsignal. (c) Let i \u2208 {1, . . . , D \u2212 B + 1} be a subsignal index and\nwrite j := MultiScaleIndexk(i) as the result of the index transformation. Then j \u2208 {1, . . . , D \u2212 B + 1}, j \u2264 i and i \u2212 j < k. The index adjustment hence decreases subsignal indices by at most k \u2212 1 samples with respect to the original scale level.\n(d) It is\nSubsignalB(\u03c0, div(i\u2212 1, k) + 1) = MultiScaleSubsignal\n(\u03d1,H) (B,R,k)(\u03be, MultiScaleIndexk(i))\nfor all i \u2208 {1, . . . , D \u2212 B + 1}. In other words, the subsignals from \u03c0 equal downscaled subsignals from the original signal \u03be where the subsignal index was adjusted through MultiScaleIndexk.\nProof. (a) If \u00b5 \u2208 {1, . . . , B} and i \u2208 {1, . . . , D \u2212 B + 1}, then\nSubsignalPad\u03d1(B,R)(\u03be, i)\u00b5+R D. 26 = \u03d1(\u03be, i+ \u00b5\u2212 1) (\u2666)= \u03bei+\u00b5\u22121 D. 1 = SubsignalB(\u03be, i)\u00b5,\nwhere in the (\u2666) step we have used that i+\u00b5\u22121 \u2208 {1, . . . , D}. Here, the boundary handling function evaluates to an original sample of the input signal. Hence all the samples in the middle of SubsignalPad\u03d1(B,R)(\u03be, i) stem from the input signal \u03be and are not subject to boundary conditions.\n(b) We first note that\n2R = R\u0303+ rem(R\u0303, 2) = (k \u2212 1)B + h\u2212 k + rem(R\u0303, 2)\nby the definition of the ceiling function, which is marked with (\u2666) in the following. Therefore\ndimM (\u03c0) = dimM (Downk(SlideH(Pad \u03d1 R(\u03be))))\nD. 27 = \u2308 1 k \u00b7 dimM (SlideH(Pad \u03d1 R(\u03be))) \u2309 D. 5 = \u2308 1 k ( dimM (Pad \u03d1 R(\u03be))\u2212 h+ 1\n)\u2309 D. 26 = \u2308 1 k (dimM (\u03be) + 2R\u2212 h+ 1)\n\u2309 (\u2666) = \u2308 D\u2212B+1+rem(R\u0303, 2) k +B \u2212 1 \u2309\n= \u2308 D\u2212B+1+rem(R\u0303, 2)\nk\n\u2309 +B \u2212 1,\nwhere we have used that B \u2212 1 \u2208 N in the final step so that this term could be moved outside of the ceiling function. Since rem(R\u0303, 2) \u2208 { 0, 1 } there is at most one superfluous subsignal of length B in \u03c0, which is irrelevant in the following discussion.\n(c) Let i and j := k \u00b7 div(i \u2212 1, k) + 1 be given as in the claim. We clearly have j \u2208 N. Since div(i \u2212 1, k) \u2265 0 follows j \u2265 1. On the other hand, using Euclidean division we obtain k \u00b7 div(i \u2212 1, k) + 1 = i \u2212 rem(i \u2212 1, k) \u2264 i \u2264 D \u2212B + 1 because rem(i\u2212 1, k) \u2265 0. Analogously follows i \u2212 j = rem(i \u2212 1, k) \u2208 {0, . . . , k \u2212 1}, which proves the claimed inequalities.\n(d) Let i \u2208 {1, . . . , D \u2212 B + 1} be an arbitrary subsignal index. We start by proving that the right-hand side of the claimed identity is indeed of dimensionality B. Let us define\nj := MultiScaleIndexk(i) and\n\u03c1 := MultiScaleSubsignal (\u03d1,H) (B,R,k)(\u03be, j)\nas abbreviations. Analogously to (b) where we deduced an expression for 2R, marked with (\u2666), one obtains\ndimM (\u03c1) D. 27 = \u2308 1 k \u00b7 dimM (SlideH(SubsignalPad \u03d1 (B,R)(\u03be, j))) \u2309 D. 5 = \u2308 1 k ( dimM (SubsignalPad \u03d1 (B,R)(\u03be, j))\u2212 h+ 1\n)\u2309 D. 26 = \u2308 1 k (B + 2R\u2212 h+ 1)\n\u2309 (\u2666) = B \u2212 1 + \u2308 1+rem(R\u0303, 2)\nk\n\u2309 .\nAs 1 + rem(R\u0303, 2) \u2208 { 1, 2 } and k \u2265 2 by requirement, we find 0 < 1k ( 1 + rem(R\u0303, 2) ) \u2264 1 and hence dimM (\u03c1) = B.\nNow let \u00b5 \u2208 {1, . . . , B} for comparing both sides of the claim sample-wise. We have\n\u03c1\u00b5 D. 27 = SlideH(SubsignalPad \u03d1 (B,R)(\u03be, j))k(\u00b5\u22121)+1\nD. 5 = H ( h\u2211 \u03bd=1 SubsignalPad\u03d1(B,R)(\u03be, j)k(\u00b5\u22121)+\u03bd \u00b7 eh\u03bd ) D. 26 = H\n( h\u2211 \u03bd=1 \u03d1(\u03be, j + k(\u00b5\u2212 1) + \u03bd \u2212R\u2212 1) \u00b7 eh\u03bd ) .\n14\nThe corresponding sample of the left-hand side equals\nSubsignalB(\u03c0, div(i\u2212 1, k) + 1)\u00b5 D. 1 = Downk(SlideH(Pad \u03d1 R(\u03be)))div(i\u22121, k)+\u00b5 D. 27 = SlideH(Pad \u03d1 R(\u03be))k\u00b7div(i\u22121, k)+k(\u00b5\u22121)+1\nD. 5 = H ( h\u2211 \u03bd=1 Pad\u03d1R(\u03be)j+k(\u00b5\u22121)+\u03bd\u22121 \u00b7 eh\u03bd ) D. 26 = H\n( h\u2211 \u03bd=1 \u03d1(\u03be, j + k(\u00b5\u2212 1) + \u03bd \u2212R\u2212 1) \u00b7 eh\u03bd ) ,\nwhich is the same as \u03c1\u00b5, which proves the claimed identity.\nThe ultimate goal of this section is to analyze functions applied to different scale levels of a signal and propose an efficient evaluation scheme. We have already taken the first step by analyzing the connection between downscaled subsignal extraction and subsignal extraction from a downscaled signal in Lemma 28. The complement of downscaling in this course of action is to repeat samples as many times as samples were omitted during downsampling. This leads to the following definition:\nDefinition 29. Let M be a set and k \u2208 N1. Then\nUpk : \u222a1 (M)\u2192 \u222ak(M),\n\u03be 7\u2192 dimM (\u03be)\u2211 \u00b5=1\n( \u03be\u00b5 \u00b7\nk\u2211 \u03bb=1 e k\u00b7dimM (\u03be) k(\u00b5\u22121)+\u03bb\n) ,\nis called the upsampling operator with zero-order hold.\nWe can immediately provide a statement on which samples go where during upsampling:\nLemma 30. Let M be a set, q \u2208 N1 and \u03be \u2208Mq . Then it is Upk(\u03be)\u03bd = \u03bediv(\u03bd\u22121, k)+1 for all \u03bd \u2208 {1, . . . , kq}.\nProof. With Definition 29 there exists \u00b5 \u2208 {1, . . . , q} with Upk(\u03be)\u03bd = \u03be\u00b5, where \u03bd = k(\u00b5\u2212 1) + \u03bb and \u03bb \u2208 {1, . . . , k}. One obtains\nk \u00b7 (\u00b5\u2212 1) + (\u03bb\u2212 1) + 1 = (\u03bd \u2212 1) + 1 = k \u00b7 div(\u03bd \u2212 1, k) + rem(\u03bd \u2212 1, k) + 1.\nHere, \u03bb\u2212 1 \u2208 {0, . . . , k \u2212 1}, hence uniqueness of Euclidean division implies \u00b5\u22121 = div(\u03bd\u22121, k), and the claim follows.\nWe are almost ready for the main result of this section, that states under which circumstances a function that accepts inputs in both the original scale and in a downscaled version can be evaluated efficiently.\nIndexing rules are here as follows. Suppose P and Q are sets and \u03c7 \u2208 \u222a1(P \u00d7Q) is a signal with paired samples from P \u00d7 Q. Then there exists a dimensionality d \u2208 N1 so that \u03c7 \u2208 (P \u00d7 Q)d. Since (P \u00d7 Q)d \u223c= P d \u00d7 Qd we can also write \u03c7 as pair of signals, say \u03c7 = (\u03c8, \u03c9) where \u03c8 \u2208 P d and \u03c9 \u2208 Qd. If \u03bd \u2208 {1, . . . , d} is an index, then we define \u03c7i := (\u03c8i, \u03c9i) \u2208 P \u00d7Q as an individual sample.\nTheorem 31. Let M,N be sets and let B \u2208 N1 be a fixed subsignal dimensionality. Let f : MB \u00d7 MB \u2192 N be a\nfunction that accepts signals in the original scale and in a downscaled version. Suppose f can be factorized into functions gOrg : MB \u2192 P , gDown : MB \u2192 Q and g : P\u00d7Q\u2192 N , so that\nf(\u03c1, \u03c4) = g (gOrg(\u03c1), gDown(\u03c4)) for all \u03c1, \u03c4 \u2208MB ,\nwhere P and Q are sets. As in Lemma 28, let k \u2208 N, k \u2265 2, be a downsampling step size. Further, let h \u2208 N1, h \u2265 k, and H : Mh \u2192 M a lowpass filter kernel and \u03d1 : \u222a1 (M) \u00d7 Z \u2192 M a boundaryhandling function. Let R\u0303 := (k \u2212 1)B + h \u2212 k \u2208 N and let R := \u2308 R\u0303/2 \u2309 \u2208 N denote the required boundary size. Considering a signal \u03be \u2208 \u222aB(M), we write D := dimM (\u03be), \u03c0 := Downk(SlideH(Pad \u03d1 R(\u03be))) \u2208 \u222a1(M), and moreover\nr := rem(R\u0303, 2)\u2212 rem(D \u2212B + 1 + rem(R\u0303, 2), k)\n+ { 0, if k divides D \u2212B + 1 + rem(R\u0303, 2), k, otherwise.\nThen r \u2208 N and f (\nSubsignalB(\u03be, i),\nMultiScaleSubsignal (\u03d1,H) (B,R,k)(\u03be, MultiScaleIndexk(i)) ) = Slideg ( SlidegOrg(\u03be), Trimr(Upk(SlidegDown(\u03c0))) ) i\nfor all i \u2208 {1, . . . , D \u2212 B + 1}, that is f applied to the subsignals of \u03be and certain multi-scale subsignals of \u03be equals the samples of g, gOrg and gDown applied in a sliding fashion to signals derived from \u03be. After gDown has been applied to the downscaled signal \u03c0, the result has to be upsampled and the superfluous r trailing entries have to be trimmed away.\nProof. Through application of Lemma 28(b) we have that dimM (\u03c0) = \u2308D\u2212B+1+rem(R\u0303, 2) k \u2309 +B\u22121. As dimM (\u03c0) \u2265 B, SlidegDown(\u03c0) is well-defined and one obtains\ndimQ(SlidegDown(\u03c0)) D. 5 = dimM (\u03c0)\u2212B + 1 = \u2308 D\u2212B+1+rem(R\u0303, 2)\nk\n\u2309 .\nTherefore one obtains\ndimQ(Upk(SlidegDown(\u03c0))) D. 29 = k \u00b7\n\u2308 D\u2212B+1+rem(R\u0303, 2)\nk\n\u2309 .\nIn the case of k dividing D \u2212B + 1 + rem(R\u0303, 2) follows dimQ(Upk(SlidegDown(\u03c0))) = D \u2212 B + 1 + rem(R\u0303, 2) and by definition it is r = rem(R\u0303, 2) \u2208 N, hence\ndimQ(Trimr(Upk(SlidegDown(\u03c0)))) = D \u2212B + 1.\nIn the other case of k not dividing D\u2212B+ 1 + rem(R\u0303, 2) follows\u2308 D\u2212B+1+rem(R\u0303, 2)\nk\n\u2309 = div(D\u2212B + 1 + rem(R\u0303, 2), k) + 1.\nFrom the definition of Euclidean division one yields\ndimQ(Upk(SlidegDown(\u03c0)))\n= D \u2212B + 1 + rem(R\u0303, 2) \u2212 rem(D \u2212B + 1 + rem(R\u0303, 2), k) + k.\n15\nWe further have by definition\nr = rem(R\u0303, 2)\u2212 rem(D \u2212B + 1 + rem(R\u0303, 2), k) + k.\nAs rem(D\u2212B+1+rem(R\u0303, 2), k) \u2208 {0, . . . , k\u22121} follows r \u2265 1. Thus r \u2208 N and Trimr(Upk(SlidegDown(\u03c0))) is welldefined. We have that dimQ(Trimr(Upk(SlidegDown(\u03c0)))) = D \u2212B + 1 in this case as well.\nWe find that the number of samples in SlidegOrg(\u03be) equals the number of samples in Trimr(Upk(SlidegDown(\u03c0))) in both cases. Since g works on individual samples we yield that\nSlideg ( SlidegOrg(\u03be), Trimr(Upk(SlidegDown(\u03c0))) )\nconsists of D \u2212B + 1 samples from N . Let i \u2208 {1, . . . , D \u2212B + 1} be arbitrary and define\n\u03c4 := MultiScaleSubsignal (\u03d1,H) (B,R,k)(\u03be, MultiScaleIndexk(i))\nas an abbreviation. From Definition 5 follows immediately that SlidegOrg(\u03be)i = gOrg(SubsignalB(\u03be, i)). Considering the second argument to Slideg , we have\nTrimr(Upk(SlidegDown(\u03c0)))i\n= Upk(SlidegDown(\u03c0))i L. 30 = SlidegDown(\u03c0)div(i\u22121, k)+1 D. 5 = gDown(SubsignalB(\u03c0, div(i\u2212 1, k) + 1))\nL. 28(d) = gDown(\u03c4),\nwhere we have used i \u2264 D \u2212 B + 1 in the first step so we could eliminate the trimming operator.\nCombining these results and using the precondition (PC) that f can be factorized one finds\nSlideg ( SlidegOrg(\u03be), Trimr(Upk(SlidegDown(\u03c0))) ) i\nD. 5 = g ( SlidegOrg(\u03be)i, Trimr(Upk(SlidegDown(\u03c0)))i ) = g ( gOrg(SubsignalB(\u03be, i)), gDown(\u03c4)\n) PC = f ( SubsignalB(\u03be, i), \u03c4 ) ,\nwhich equals the claimed expression.\nTheorem 31 directly provides an algorithm for efficient multi-scale analysis. The functional part operating on the original input signal should be applied in a sliding fashion. If this function can be cast as processing chain, which was discussed in Sect. IV, the there proposed theory can be used for efficient evaluation. The multi-scale subsignal index approximation proved in Lemma 28 facilitates application of the functional part operating on downscaled subsignals in a sliding fashion as well. Therefore, the theory from Sect. IV can be applied here also. We finally note that the generalization of the statements of Theorem 31 to functions that process several different downscaled signals is straightforward provided a proper factorization can be given."}, {"heading": "VI. CONCLUSIONS", "text": "This paper introduced and analyzed the concept of subsignal compatible transformations, functions that allow exchanging subsignal extraction with function evaluation without any\neffect on the outcome. In doing so, it was demonstrated rigorously how Convolutional Neural Networks can be applied efficiently to large signals in a sliding fashion while eliminating redundant computations and special case treatment. The final part demonstrated the versatility of the developed theory by considering multi-scale transformations in great detail. All results have been shown explicitly to be correct. The arguments given in the proofs can be used to verify whether a given implementation is correct, or they can serve as basis for algorithmic realizations. In either case is an extensive mathematical framework available that facilitates analysis of rapid exact signal scanning schemes."}, {"heading": "ACKNOWLEDGMENT", "text": "This work was supported by Daimler AG, Germany."}], "references": [{"title": "Receptive Fields, Binocular Interaction and Functional Architecture in the Cat\u2019s Visual Cortex", "author": ["D.H. Hubel", "T.N. Wiesel"], "venue": "Journal of Physiology, vol. 160, no. 1, pp. 106\u2013154, 1962.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1962}, {"title": "Neocognitron: A Self-Organizing Neural Network Model for a Mechanism of Pattern Recognition Unaffected by Shift in Position", "author": ["K. Fukushima"], "venue": "Biological Cybernetics, vol. 36, no. 4, pp. 193\u2013202, 1980.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1980}, {"title": "Handwritten Digit Recognition with a Back- Propagation Network", "author": ["Y. LeCun", "B. Boser", "J.S. Denker", "D. Henderson", "R.E. Howard", "W. Hubbard", "L.D. Jackel"], "venue": "Advances in Neural Information Processing Systems, vol. 2, 1990, pp. 396\u2013404.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1990}, {"title": "Multi-Column Deep Neural Networks for Image Classification", "author": ["D.C. Cire\u015fan", "U. Meier", "J. Schmidhuber"], "venue": "Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2012, pp. 3642\u20133649.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2012}, {"title": "Regularization of Neural Networks using DropConnect", "author": ["L. Wan", "M. Zeiler", "S. Zhang", "Y. LeCun", "R. Fergus"], "venue": "Proceedings of the International Conference on Machine Learning, 2013, pp. 1058\u20131066.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "Multi-Column Deep Neural Network for Traffic Sign Classification", "author": ["D. Cire\u015fan", "U. Meier", "J. Masci", "J. Schmidhuber"], "venue": "Neural Networks, vol. 32, pp. 333\u2013338, 2012.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "Deeply- Supervised Nets", "author": ["C.-Y. Lee", "S. Xie", "P.W. Gallagher", "Z. Zhang", "Z. Tu"], "venue": "Proceedings of the International Conference on Artificial Intelligence and Statistics, 2015, pp. 562\u2013570.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2015}, {"title": "ImageNet Classification with Deep Convolutional Neural Networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "Advances in Neural Information Processing Systems, vol. 25, 2013, pp. 1097\u20131105.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2013}, {"title": "Going Deeper with Convolutions", "author": ["C. Szegedy", "W. Liu", "Y. Jia", "P. Sermanet", "S. Reed", "D. Anguelov", "D. Erhan", "V. Vanhoucke", "A. Rabinovich"], "venue": "Tech. Rep. arXiv:1409.4842v1, 2014.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2014}, {"title": "ImageNet Large Scale Visual Recognition Challenge", "author": ["O. Russakovsky", "J. Deng", "H. Su", "J. Krause", "S. Satheesh", "S. Ma", "Z. Huang", "A. Karpathy", "A. Khosla", "M. Bernstein", "A.C. Berg", "L. Fei- Fei"], "venue": "Tech. Rep. arXiv:1409.0575v3, 2015.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2015}, {"title": "Toward Automatic Phenotyping of Developing Embryos From Videos", "author": ["F. Ning", "D. Delhomme", "Y. LeCun", "F. Piano", "L. Bottou", "P.E. Barbano"], "venue": "IEEE Transactions on Image Processing, vol. 14, no. 9, pp. 1360\u20131371, 2005.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2005}, {"title": "Deep Convolutional Networks for Scene Parsing", "author": ["D. Grangier", "L. Bottou", "R. Collobert"], "venue": "International Conference on Machine Learning, Workshop on Learning Feature Hierarchies, 2009.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2009}, {"title": "Learning Hierarchical Features for Scene Labeling", "author": ["C. Farabet", "C. Couprie", "L. Najman", "Y. LeCun"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 35, no. 8, pp. 1915\u20131929, 2013.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1915}, {"title": "An Original Approach for the Localization of Objects in Images", "author": ["R. Vaillant", "C. Monrocq", "Y. LeCun"], "venue": "Proceedings of the International Conference on Artificial Neural Networks, 1993, pp. 26\u201330.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1993}, {"title": "Fast Image Scanning with Deep Max-Pooling Convolutional Neural Networks", "author": ["A. Giusti", "D.C. Cire\u015fan", "J. Masci", "L.M. Gambardella", "J. Schmidhuber"], "venue": "IEEE International Conference on Image Processing, 2013, pp. 4034\u20134038.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2013}, {"title": "Highly Efficient Forward and Backward Propagation of Convolutional Neural Networks for Pixelwise Classification", "author": ["H. Li", "R. Zhao", "X. Wang"], "venue": "Tech. Rep. arXiv:1412.4526v2, 2014.  16", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2014}, {"title": "OverFeat: Integrated Recognition, Localization and Detection using Convolutional Networks", "author": ["P. Sermanet", "D. Eigen", "X. Zhang", "M. Mathieu", "R. Fergus", "Y. LeCun"], "venue": "Proceedings of the International Conference on Learning Representations. arXiv:1312.6229v4, 2014.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2014}, {"title": "DenseNet: Implementing Efficient ConvNet Descriptor Pyramids", "author": ["F. Iandola", "M. Moskewicz", "S. Karayev", "R. Girshick", "T. Darrell", "K. Keutzer"], "venue": "Tech. Rep. arXiv:1404.1869v1, 2014.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1869}, {"title": "Gradient-Based Learning Applied to Document Recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE, vol. 86, no. 11, pp. 2278\u20132324, 1998.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1998}, {"title": "Optimal Unsupervised Learning in Feedforward Neural Networks", "author": ["T.D. Sanger"], "venue": "Master\u2019s thesis, Massachusetts Institute of Technology, 1989.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 1989}, {"title": "Some Theorems on Matrix Differentiation with Special Reference to Kronecker Matrix Products", "author": ["H. Neudecker"], "venue": "Journal of the American Statistical Association, vol. 64, no. 327, pp. 953\u2013963, 1969.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1969}], "referenceMentions": [{"referenceID": 0, "context": "Inspired by findings on the structure of mammalian visual cortex [1], the concept of spatial weight sharing has been integrated into artificial neural networks to achieve an architecture nowadays broadly known as Convolutional Neural Network (CNN) [2], [3].", "startOffset": 65, "endOffset": 68}, {"referenceID": 1, "context": "Inspired by findings on the structure of mammalian visual cortex [1], the concept of spatial weight sharing has been integrated into artificial neural networks to achieve an architecture nowadays broadly known as Convolutional Neural Network (CNN) [2], [3].", "startOffset": 248, "endOffset": 251}, {"referenceID": 2, "context": "Inspired by findings on the structure of mammalian visual cortex [1], the concept of spatial weight sharing has been integrated into artificial neural networks to achieve an architecture nowadays broadly known as Convolutional Neural Network (CNN) [2], [3].", "startOffset": 253, "endOffset": 256}, {"referenceID": 3, "context": "This particular architecture has proven highly successful in a large variety of pattern recognition tasks, setting the state of the art in handwritten digit recognition [4], [5], traffic sign recognition [4], [6], house number recognition from street view [5], [7], and large-scale object category classification [8], [9], [10] to name just a few.", "startOffset": 169, "endOffset": 172}, {"referenceID": 4, "context": "This particular architecture has proven highly successful in a large variety of pattern recognition tasks, setting the state of the art in handwritten digit recognition [4], [5], traffic sign recognition [4], [6], house number recognition from street view [5], [7], and large-scale object category classification [8], [9], [10] to name just a few.", "startOffset": 174, "endOffset": 177}, {"referenceID": 3, "context": "This particular architecture has proven highly successful in a large variety of pattern recognition tasks, setting the state of the art in handwritten digit recognition [4], [5], traffic sign recognition [4], [6], house number recognition from street view [5], [7], and large-scale object category classification [8], [9], [10] to name just a few.", "startOffset": 204, "endOffset": 207}, {"referenceID": 5, "context": "This particular architecture has proven highly successful in a large variety of pattern recognition tasks, setting the state of the art in handwritten digit recognition [4], [5], traffic sign recognition [4], [6], house number recognition from street view [5], [7], and large-scale object category classification [8], [9], [10] to name just a few.", "startOffset": 209, "endOffset": 212}, {"referenceID": 4, "context": "This particular architecture has proven highly successful in a large variety of pattern recognition tasks, setting the state of the art in handwritten digit recognition [4], [5], traffic sign recognition [4], [6], house number recognition from street view [5], [7], and large-scale object category classification [8], [9], [10] to name just a few.", "startOffset": 256, "endOffset": 259}, {"referenceID": 6, "context": "This particular architecture has proven highly successful in a large variety of pattern recognition tasks, setting the state of the art in handwritten digit recognition [4], [5], traffic sign recognition [4], [6], house number recognition from street view [5], [7], and large-scale object category classification [8], [9], [10] to name just a few.", "startOffset": 261, "endOffset": 264}, {"referenceID": 7, "context": "This particular architecture has proven highly successful in a large variety of pattern recognition tasks, setting the state of the art in handwritten digit recognition [4], [5], traffic sign recognition [4], [6], house number recognition from street view [5], [7], and large-scale object category classification [8], [9], [10] to name just a few.", "startOffset": 313, "endOffset": 316}, {"referenceID": 8, "context": "This particular architecture has proven highly successful in a large variety of pattern recognition tasks, setting the state of the art in handwritten digit recognition [4], [5], traffic sign recognition [4], [6], house number recognition from street view [5], [7], and large-scale object category classification [8], [9], [10] to name just a few.", "startOffset": 318, "endOffset": 321}, {"referenceID": 9, "context": "This particular architecture has proven highly successful in a large variety of pattern recognition tasks, setting the state of the art in handwritten digit recognition [4], [5], traffic sign recognition [4], [6], house number recognition from street view [5], [7], and large-scale object category classification [8], [9], [10] to name just a few.", "startOffset": 323, "endOffset": 327}, {"referenceID": 10, "context": "If this is carried out for each feasible image position, it is possible to assign class membership estimations to all the pixels in an image resulting in a dense description of all objects in a scene [11], [12], [13].", "startOffset": 200, "endOffset": 204}, {"referenceID": 11, "context": "If this is carried out for each feasible image position, it is possible to assign class membership estimations to all the pixels in an image resulting in a dense description of all objects in a scene [11], [12], [13].", "startOffset": 206, "endOffset": 210}, {"referenceID": 12, "context": "If this is carried out for each feasible image position, it is possible to assign class membership estimations to all the pixels in an image resulting in a dense description of all objects in a scene [11], [12], [13].", "startOffset": 212, "endOffset": 216}, {"referenceID": 13, "context": "Although this was already realized for CNNs without pooling layers more than two decades ago [14], approaches that also support pooling layers emerged only recently [15], [16], [17], [18].", "startOffset": 93, "endOffset": 97}, {"referenceID": 14, "context": "Although this was already realized for CNNs without pooling layers more than two decades ago [14], approaches that also support pooling layers emerged only recently [15], [16], [17], [18].", "startOffset": 165, "endOffset": 169}, {"referenceID": 15, "context": "Although this was already realized for CNNs without pooling layers more than two decades ago [14], approaches that also support pooling layers emerged only recently [15], [16], [17], [18].", "startOffset": 171, "endOffset": 175}, {"referenceID": 16, "context": "Although this was already realized for CNNs without pooling layers more than two decades ago [14], approaches that also support pooling layers emerged only recently [15], [16], [17], [18].", "startOffset": 177, "endOffset": 181}, {"referenceID": 17, "context": "Although this was already realized for CNNs without pooling layers more than two decades ago [14], approaches that also support pooling layers emerged only recently [15], [16], [17], [18].", "startOffset": 183, "endOffset": 187}, {"referenceID": 18, "context": "Convolutional Neural Networks Ordinary CNNs process input data by means of specialized layers [19].", "startOffset": 94, "endOffset": 98}, {"referenceID": 19, "context": "The latter send each sample of a larger signal through a scalar transfer function independently, which may for example be a hyperbolic tangent or a rectification nonlinearity [20].", "startOffset": 175, "endOffset": 179}, {"referenceID": 12, "context": "It is further possible to improve performance through incorporation of context information using multi-scale analysis so that the network sees image regions in different spatial resolutions [13].", "startOffset": 190, "endOffset": 194}, {"referenceID": 14, "context": "We will demonstrate how these functions can be turned into subsignal compatible transformations using a data structure recently introduced as fragmentation [15].", "startOffset": 156, "endOffset": 160}, {"referenceID": 14, "context": "Here, we will greatly generalize the method proposed by [15] and rigorously prove the correctness of the approach.", "startOffset": 56, "endOffset": 60}, {"referenceID": 20, "context": "The vectorization operator [21] stacks all the columns of a matrix on top of another: Definition 14.", "startOffset": 27, "endOffset": 31}, {"referenceID": 12, "context": "Since here the context of local regions is incorporated as well, this approach has proven highly effective in classification tasks [13].", "startOffset": 131, "endOffset": 135}, {"referenceID": 12, "context": "This facilitates the design of scale-invariant representations, for example by using the same classifier for all scales of the input [13].", "startOffset": 133, "endOffset": 137}], "year": 2017, "abstractText": "We introduce and analyze a rigorous formulation of the dynamics of a signal processing scheme that aims at dense scanning of large input signals. Recently proposed methodologies lack a satisfactory discussion of whether they actually produce the correct results according to their definition, especially in the context of Convolutional Neural Networks. We improve on this through an exact characterization of the requirements for a sound sliding window approach. The tools developed in this paper are especially beneficial if Convolutional Neural Networks are employed, but can also be used as a more general framework to validate related approaches to signal scanning. The contributed theory helps to eliminate redundant computations and renders special case treatment unnecessary, resulting in a dramatic boost in efficiency particularly on massively parallel processors.", "creator": "LaTeX with hyperref package"}}}