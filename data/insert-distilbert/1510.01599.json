{"id": "1510.01599", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Oct-2015", "title": "Disjunctive Answer Set Solvers via Templates", "abstract": "answer set programming is a declarative formal programming paradigm oriented towards processing difficult combinatorial search problems. a fundamental task in various answer riddle set programming algorithms is to compute stable models, i. e., stability solutions of logic programs. answer set solvers are the programs that perform this required task. the problem of deciding whether a disjunctive program has a stable model capability is $ \\ sigma ^ 15 p _ ap 2 $ - complete. the high complexity level of reasoning within disjunctive logic programming is responsible for employing few solvers capable of dealing with such programs, namely mb dlv, gnt, cmodels, clasp and wasp. in this paper we show shows that transition systems introduced by nieuwenhuis, alexandre oliveras, and tinelli to model and analyze satisfiability solvers can be adapted for disjunctive sequential answer set solvers. transition systems give applications a unifying perspective and bring clarity inherent in the description and comparison of solvers. they eventually can be effectively used for analyzing, comparing and proving correctness of search algorithms as well as inspiring new ideas in the conceptual design of disjunctive answer set solvers. in this light, we introduce a general capability template, which accounts for major techniques formally implemented in disjunctive infinite solvers. we then therefore illustrate again how this general template captures solvers merging dlv, gnt and cmodels. we also show how this flexibility framework provides a convenient tool for further designing new solving algorithms by means of combinations of techniques employed in comparing different solvers.", "histories": [["v1", "Tue, 6 Oct 2015 14:42:38 GMT  (68kb)", "http://arxiv.org/abs/1510.01599v1", "To appear in Theory and Practice of Logic Programming (TPLP)"]], "COMMENTS": "To appear in Theory and Practice of Logic Programming (TPLP)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["remi brochenin", "yuliya lierler", "marco maratea"], "accepted": false, "id": "1510.01599"}, "pdf": {"name": "1510.01599.pdf", "metadata": {"source": "CRF", "title": "Disjunctive Answer Set Solvers via Templates", "authors": ["REMI BROCHENIN"], "emails": ["remi.brochenin@unige.it)", "ylierler@unomaha.edu)", "marco@dibris.unige.it)"], "sections": [{"heading": null, "text": "ar X\niv :1\n51 0.\n01 59\n9v 1\nKEYWORDS: Answer Set Programming, Abstract Solvers"}, {"heading": "1 Introduction", "text": "Answer set programming (Marek and Truszczyn\u0301ski 1999; Niemela\u0308 1999; Baral 2003; Eiter et al. 1997; Gelfond and Lifschitz 1988; Gelfond and Lifschitz 1991) is a declarative programming paradigm oriented towards difficult combinatorial search problems. The idea of answer set programming (ASP) is to represent a given problem\nwith a logic program, whose answer sets correspond to solutions of the problem (see e.g., Lifschitz 1999). ASP has been applied to solve problems in various areas of science and technology including graph-theoretic problems arising in zoology and linguistics (Brooks et al. 2007), team building problems in container terminal (Ricca et al. 2012), and product configuration tasks (Soininen and Niemela\u0308 1999). A fundamental task in ASP is to compute stable models of logic programs. Answer set solvers are the programs that perform this task. There were sixteen answer set solvers participating in the recent Fifth Answer Set Programming Competition1.\nGelfond and Lifschitz introduced logic programs with disjunctive rules (Gelfond and Lifschitz 1991). The problem of deciding whether a disjunctive program has a stable model is \u03a3P2 -complete (Eiter and Gottlob 1993). The problem of deciding whether a non-disjunctive program has a stable model is NP-complete. The high complexity of reasoning within disjunctive logic programming stems from two sources: first, there is a potentially exponential number of candidate models, and, second, the hardness of checking whether a candidate model is a stable model of a propositional disjunctive logic program is co-NP-complete. Only five answer set systems can solve disjunctive programs: dlv (Leone et al. 2006), gnt (Janhunen et al. 2006), cmodels (Lierler 2005), clasp (Gebser et al. 2013) andwasp (Alviano et al. 2013).\nSeveral formal approaches have been used to describe and compare search procedures implemented in answer set solvers. These approaches range from a pseudocode representation of the procedures (Giunchiglia and Maratea 2005; Giunchiglia et al. 2008), to tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013), to abstract frameworks via transition systems (Lierler 2008; Lierler 2011; Lierler and Truszczynski 2011). The latter method originates from the work by Nieuwenhuis et al. (2006), where authors propose to use transition systems to describe the Davis-Putnam-Logemann-Loveland (dpll) procedure (Davis et al. 1962). Nieuwenhuis et al. introduce an abstract framework called dpll graph, that captures what states of computation are, and what transitions between states are allowed. Every execution of the dpll procedure corresponds to a path in the dpll graph. Some edges may correspond to unit propagation steps, some to branching, some to backtracking.\nSuch an abstract way of presenting algorithms simplifies their analysis. This approach has been adapted (Lierler 2011; Lierler and Truszczynski 2011) to describing answer set solvers for non-disjunctive programs including smodels, cmodels, and clasp. This type of graphs has been used to relate algorithms in precise mathematical terms. Indeed, once we represent algorithms via graphs, comparing the graphs translates into studying the relationships of underlying algorithms. More generally, the unifying perspective of transition systems brings clarity in the description and comparison of solvers. Practically, such graph representations may serve as an effective tool for analyzing, comparing, proving correctness of, and reasoning formally\n1 https://www.mat.unical.it/aspcomp2014/FrontPage#Participant_Teams\nabout the underlying search algorithms. It may also inspire new ideas in the design of solvers.\nIn this paper we present transition systems that suit multiple disjunctive answer set solvers. We define a general framework, a graph template, which accounts for major techniques implemented in disjunctive answer set solvers excluding backjumping and learning. We study formal properties of this template and we use the template to describe gnt, cmodels and dlv implementing plain backtracking. We then show how a graph template facilitates a design of new solving algorithms by means of combinations of techniques employed in different solvers. For instance, we present a new abstract solver that can be seen as a hybrid between cmodels and gnt. We also present how different solvers may be compared by means of transition systems. In particular, we illustrate a close relationship between answer set solvers dlv and cmodels through the related graphs. The fact that proposed framework does not account for backjumping and learning is one of the reasons that prevents us from capturing such advanced disjunctive answer set solvers as clasp and wasp. It is a direction of future work to investigate how the proposed framework can be adjusted to accommodate these solvers in full generality.\nThe paper is structured as follows. Section 2 introduces required preliminaries. Section 3 presents a first abstract solver related to cmodels. Section 4 defines our general template that accounts for techniques implemented in disjunctive solvers, and Section 5 uses this template to define abstract frameworks for disjunctive solvers. Proofs are presented in Section 6. Section 7 discusses related work and concludes with the final remarks.\nThe current paper builds on the content presented by Brochenin et al. (2014). It enhances the earlier work by introducing notions of a graph template, \u201cpropagator conditions\u201d, and \u201capproximating pairs\u201c that allow to more uniformly account for major techniques implemented in disjunctive answer set solvers. Complete proofs of the formal results are also provided."}, {"heading": "2 Preliminaries", "text": ""}, {"heading": "2.1 Formulas, Logic Programs, and Program\u2019s Completion", "text": "Formulas. Atoms are Boolean variables over {true, false}. The symbols \u22a5 and \u22a4 are the false and the true constants, respectively. The letter l denotes a literal, that is an atom a or its negation \u00aca, and l is the complement of l, i.e., literal a for \u00aca and literal \u00aca for a. Propositional formulas are logical expressions defined over atoms and symbols \u22a5, \u22a4 in usual way. A finite disjunction of literals is a clause. We identify an empty clause with the symbol \u22a5. A conjunction (resp. a disjunction) of literals will sometimes be seen as a set, containing each of its literals. Since a clause is identified with a set of its literals, there are no repetition of literals in a clause. A CNF formula is a finite conjunction (alternatively, a set) of clauses. Since a CNF formula is identified with a set of clauses, there are no repetition of clauses in a CNF formula.\nFor a conjunction (resp. a disjunction) D of literals, by D we denote the disjunc-\ntion (resp. the conjunction) of the complements of the elements of D. For example, a \u2228 \u00acb denotes \u00aca\u2227 b, while a \u2227 \u00acb denotes \u00aca\u2228 b. For a set L of literals, by L\u2228 we denote the disjunction of its elements and L\u2227 the conjunction of its elements; by atoms(L) we denote the set of atoms occurring in L. For a set N of sets of literals by atoms(N) we denote the set of atoms occurring in the elements of N . For example, atoms({a,\u00acb}) = {a, b} and atoms({{a}, {\u00acb}}) = {a, b}. For a set L of literals, by L+ we denote atoms that occur positively in L. For instance, {a,\u00acb}+ = {a}. For a set X of atoms and a set L of literals, by L|X we denote the maximal subset of L over X . For example, {a,\u00acb, c}|{a,b} = {a,\u00acb}.\nA (truth) assignment to a setX of atoms is a function from X to {false, true}. An assignment satisfies a formula F if F evaluates to true under this assignment. We call an assignment that satisfies formula F a satisfying assignment or a (classical) model for F . If F evaluates to false under an assignment, we say that this assignment contradicts F . If F has no model we say that F is unsatisfiable. For sets X and Y of atoms such that X \u2286 Y , we identify X with an assignment to Y as follows: if a \u2208 X then a maps to true, while if a \u2208 Y \\X then a maps to false. We also identify a consistent set L of literals (i.e., a set that does not contain both a literal and its complement) with an assignment to atoms(L) as follows: if a \u2208 L then a maps to true, while if \u00aca \u2208 L then a maps to false. The set M is a complete set of literals over the set of atoms X if atoms(M) = X ; hence a consistent and complete set of literals over X represents an assignment to X .\nLogic Programs. A head is a (possibly empty) disjunction of atoms. A body is an expression of the form\na1, . . . , aj , not aj+1, . . . , not ak (1)\nwhere a1, . . . , ak are atoms, and not is the negation-as-failure operator. We identify body (1) with the following conjunction of literals\na1 \u2227 . . . \u2227 aj \u2227 \u00acaj+1 \u2227 . . . \u2227 \u00acak.\nExpressions a1, . . . , aj and not aj+1, . . . , not ak are called positive and negative parts of the body, respectively. Recall that we sometimes view a conjunction of literals as a set containing all of its literals. Thus, given body B we may write an expression b \u2208 B, which means that atom b occurs in the positive part of the body. Similarly, an expression \u00acb \u2208 B means that the atom b (or, in other words, expression not b) occurs in the negative part of the body.\nA disjunctive rule is an expression of the form A \u2190 B, where A is a head and B is a body. If A is empty we drop it from the expression. A disjunctive logic program is a finite set of disjunctive rules. We call a rule non-disjunctive if its head contains no more than one atom. A program is non-disjunctive if it consists of non-disjunctive rules. By atoms(\u03a0 ) we denote the set of atoms occurring in a logic program \u03a0 . If we understand A \u2190 B as a classical logic implication, we can see any rule A \u2190 B as logically equivalent to clause A \u2228 B (if A is an empty clause then we view the rule as the clause B). This allows us to view a program \u03a0 as a CNF formula when useful. Conversely, we identify CNF formulas with logic programs: syntactically,\nevery clause C in a given formula is seen as a rule \u2190 C. For instance a1 \u2228 \u00aca2 is seen as a rule \u2190 not a1, a2.\nThe presented definition of a logic program accounts for propositional programs only. Indeed, all modern disjunctive answer set solvers consider propositional programs only. In practice, answer set programmers devise programs with variables. Software systems called grounders (Syrja\u0308nen 2001; Perri et al. 2007) are used to take a logic program with variables as its input and produce a propositional program as its output so that the resulting propositional program has the same answer sets as the input program.\nReduct and Supporting Rules. In the following definition we write rules in the form A \u2190 B1, B2 where B1 denotes the positive part of the body, whereas B2 denotes the negative part of the body. The reduct \u03a0X of a disjunctive program \u03a0 with respect to a set X of atoms is obtained from \u03a0 by deleting each rule A \u2190 B1, B2 such that X \u2229 atoms(B2) 6= \u2205 and replacing each remaining rule A \u2190 B1, B2 with A \u2190 B1. A set X of atoms is an answer set of a program \u03a0 if X is minimal among the sets of atoms that satisfy \u03a0X .\nFor a program \u03a0 , an atom a, and a set L of literals, we call any rule A\u2228 a \u2190 B\nin \u03a0 a supporting rule for a with respect to L when L \u2229 (B \u222a A) = \u2205.\nA consistent and complete set L of literals over atoms(\u03a0 ) is\n1. a classical model of \u03a0 if L satisfies every rule in \u03a0 ; 2. a supported model of \u03a0 if L is a classical model of \u03a0 and for every atom\na \u2208 L+ there is a supporting rule for a with respect to L;\n3. a stable model of program \u03a0 if L+ is an answer set of \u03a0.\nCompletion. The completion comp(\u03a0 ) of a program \u03a0 is the formula that consists of \u03a0 and the formulas\n{\u00aca \u2228 \u2228\nA\u2228a\u2190B\u2208\u03a0\n(B \u2227 A) | a \u2208 atoms(\u03a0 )}. (2)\nThis formula has the property that any stable model of \u03a0 is a classical model of comp(\u03a0 ). The converse does not hold in general.\nFor a program \u03a0 and a consistent set L of literals over atoms(\u03a0 ), a set X of atoms over atoms(\u03a0 ) is said to be unfounded (Leone et al. 1997) on L with respect to the program \u03a0 when for each atom a \u2208 X and each rule A \u2190 B \u2208 \u03a0 such that a \u2208 A, either of the following conditions hold\n1. L \u2229B 6= \u2205, 2. X \u2229B 6= \u2205, or 3. (A \\X) \u2229 L 6= \u2205.\nWe restate Theorem 4.6 from Leone et al. (1997) that relates the notions of\nunfounded set and stable model.\nTheorem 1 For a program \u03a0 and a consistent and complete set L of literals over atoms(\u03a0 ), L\nis a stable model of \u03a0 if and only if L is a classical model of \u03a0 and no non-empty subset of L+ is an unfounded set on L with respect to \u03a0 .\nThis theorem is crucial for understanding key computational ideas behind modern answer set solvers.\n2.2 Abstract dpll\nThe Davis\u2013Putnam\u2013Logemann\u2013Loveland (dpll) algorithm from Davis et al. (1962) is a well-known method that exhaustively explores sets of literals to generate classical models of a propositional formula. Most satisfiability and non-disjunctive answer set solvers are based on variations of the dpll procedure that is a classical backtrack search-based algorithm. We now review the abstract transition system for dpll proposed by Nieuwenhuis et al. (2006), which is an alternative to common pseudo-code descriptions of backtrack search-based algorithms. For our purposes it is convenient to state dpll as the procedure applied to a logic program in order to find its classical models.\nFor a set X of atoms, a record relative to X is a string L composed of literals over X or the symbol \u22a5 so that there are no repetitions, and some literals l may be annotated as l\u2206. The annotated literals are called decision literals. Figure 1 presents the set of all records relative to the singleton set {a}. We say that a record L is inconsistent if it contains both a literal l and its complement l, or if it contains \u22a5, and consistent otherwise. For instance, only five records in Figure 1, namely \u2205, a, \u00aca, a\u2206 and \u00aca\u2206, are consistent. We will sometime view a record as the set containing all its elements disregarding their annotations. For example, a record b\u2206 \u00aca is identified with the set {\u00aca, b}. A basic state relative to X is either\n1. a record relative to X , 2. Ok(L) where L is a record relative to X , or 3. the distinguished state Failstate.\nEach program \u03a0 determines its dpll graph DP\u03a0 . The set of nodes of DP\u03a0 consists of the basic states relative to atoms(\u03a0 ). A node in the graph is terminal if no edge originates from it. The state \u2205 is called initial. The edges of the graph DP\u03a0 are specified by the transition rules presented in Figure 2.\nIntuitively, every state of the dpll graph represents some hypothetical state of the dpll computation whereas a path in the graph is a description of a process of search for a classical model of a given program. The rule Unit asserts that we can add a literal that is a logical consequence of our previous decisions and the\n{\ngiven program. The rule Decide asserts that we make an arbitrary decision to add a literal or, in other words, to assign a value to an atom. Since this decision is arbitrary, we are allowed to backtrack at a later point. The rule Backtrack asserts that the present state of computation is inconsistent but can be fixed: at some point in the past we added a decision literal whose value we can now reverse. The rule Conclude asserts that the current state of computation has failed and cannot be fixed. The rule Success asserts that the current state of computation corresponds to a successful outcome.\nWe say that a graph G checks a set N of sets of literals when all the following\nconditions hold:\n1. G is finite and acyclic; 2. Any terminal state in G is either Failstate or of the form Ok(L); 3. If a state Ok(L) is reachable from the initial state in G then L|atoms(N) \u2208 N ; 4. Failstate is reachable from the initial state in G if and only if N is empty.\nProposition 1\nFor any program \u03a0 , the graph DP\u03a0 checks the classical models of \u03a0 .\nThus, to decide the satisfiability of a program \u03a0 it is enough to find a path leading from node \u2205 to a terminal node. If it is Failstate, then \u03a0 has no classical models. Otherwise, \u03a0 has classical models. For instance, let \u03a01 be\n\u2190 not a, not b \u2190 a, not c.\nFigure 3 presents two paths in DP\u03a01 from the node \u2205 to the node Ok(a \u2206 c b\u2206). Every edge is annotated on the left by the name of the transition rule that gives rise to this edge in DP\u03a01 . The node Ok(a \u2206 c b\u2206) is terminal. Thus, Proposition 1 asserts that \u03a01 is satisfiable and {a, c, b} is a classical model of \u03a01.\nA path in the graph DP\u03a0 is a description of a process of search for a classical\nmodel of a program \u03a0 . The process is captured via applications of transition rules. Therefore, we can characterize the algorithm of a solver that utilizes the transition rules of DP\u03a0 by describing a strategy for choosing a path. A strategy can be based on assigning priorities to transition rules of DP\u03a0 so that a solver never applies a rule in a node if a rule with higher priority is applicable to the same node. The dpll procedure is captured by the priorities ordered as we stated rules in Figure 2. For instance, transition rule Conclude has the highest priority. In Figure 3, the path on the left complies with the dpll priorities: Thus, it corresponds to an execution of the dpll procedure. The path on the right does not: it uses Decide when Unit is applicable. The proof of Proposition 1 follows the lines of the proof of Theorem 2.13 in Nieuwenhuis et al. (2006)2.\nAbstract Answer Set Solver for Non-disjunctive Programs. Lierler (2011) illustrated that extending DP\u03a0 by a transition rule\nUnfounded : L =\u21d2 L \u00aca if\n  \n  \u00aca does not occur in L and L is consistent and there is a set X of atoms containing a such that X is unfounded on L w.r.t. \u03a0\ncaptures a backtrack-search procedure for finding answer sets of non-disjunctive programs. Many answer set solvers for such programs can be seen as extensions of this procedure (Lierler and Truszczynski 2011)."}, {"heading": "3 A Two-Layer Abstract Solver", "text": "The problem of deciding whether a disjunctive program has a stable model is \u03a3P2 - complete (Eiter and Gottlob 1993). This translates into the following: (i) there is an exponential number of possible candidate models, and (ii) the problem of deciding whether a candidate model is an answer set of a disjunctive logic program is coNP-complete. The latter condition differentiates algorithms of answer set solvers for disjunctive programs from the procedures for non-disjunctive programs. Indeed, the problem of deciding whether a candidate model is an answer set of a non-disjunctive program is tractable.\n2 This work defines a different dpll graph, avoiding the reference to the transition rule Success. The presence of this rule in this presentation is important for the generalizations of the dpll graph we introduce in the sequel.\nA common architecture of a disjunctive answer set solver is composed of two layers corresponding to the two above conditions: a generate layer and a test layer, each typically based on dpll-like procedures. In particular:\n\u2022 The generate layer is used to obtain a set of candidates that are potentially\nstable models.\n\u2022 The test layer is used to verify whether a candidate (produced by the generate\nlayer) is a stable model of the given program.\nWe now proceed to present a graph DP 2g,t(\u03a0 ) that captures such two-layer architecture. It is based on instances of the dpll procedure for both its generating task and its testing task. We then illustrate how the DP 2g,t(\u03a0 ) transition system can be used to capture the disjunctive answer set solver cmodels in its basic form.\n3.1 A Two-Layer Abstract Solver via dpll\nWe start by extending the notion of a basic state to accommodate for generate and test layers. We call symbols L and R labels. A state relative to sets X and X \u2032 of atoms is either\n1. a pair (L,R)s, where L and R are records relative to X and X \u2032, respectively,\nand s is a label (either symbol L or R),\n2. Ok(L), where L is a record relative to X , or 3. the distinguished state Failstate.\nWe say that a set M of literals covers a program\u03a0 if atoms(\u03a0 ) \u2286 atoms(M). We say that a function g from a program to another program is a generating (program) function if for any program \u03a0 , atoms(\u03a0 ) \u2286 atoms(g(\u03a0 )). We call a function from a program \u03a0 and a consistent set M of literals covering \u03a0 to a non-disjunctive program \u03a0 \u2032 a witness (program) function. Intuitively, a program \u03a0 \u2032 resulting from a witness function is a witness (program) with respect to \u03a0 andM . For a program\u03a0 and a witness function t, by atoms(t,\u03a0 , X) we denote the union of atoms(t(\u03a0 , L)) for all possible consistent and complete sets L of literals over X .\nWe are now ready to define a graph DP 2g,t(\u03a0 ) for a generating function g, a witness function t and a program \u03a0 . The set of nodes of DP 2g,t(\u03a0 ) consists of the states relative to sets atoms(g(\u03a0 )) and atoms(t,\u03a0 , atoms(g(\u03a0 ))). The state (\u2205, \u2205)L is called initial. The edges of the graph DP 2g,t(\u03a0 ) are specified by the transition rules presented in Figure 4. The graph DP 2g,t(\u03a0 ) can be used for deciding whether a program g(\u03a0 ) has a classical model M such that the witness t(\u03a0 ,M) is unsatisfiable.\nProposition 2\nFor any generating function g, any witness function t and any program\u03a0 , the graph\nDP 2g,t(\u03a0 ) checks the classical models M of g(\u03a0 ) such that t(\u03a0 ,M) is unsatisfiable.\nInformal Account of the Two-Layer Abstract Solver. Each of the rules of the graph DP 2g,t(\u03a0 ) is placed into one of the three groups Left, Right, and Crossing. The leftrules of DP 2g,t(\u03a0 ) capture the generate layer that applies the dpll procedure to the program g(\u03a0 ) produced by the generating function. The right-rules of DP 2g,t(\u03a0 ) capture the test layer that applies the dpll procedure to the computed witness program. The label L (resp. R) suggests that currently the computation is within the generate (resp. test) layer. The left-hand-side L (resp. right-hand-side R) of the state (L,R)L records the computation state due to the generate (resp. test) layer. The crossing rules form a bridge between the two layers.\nIt turns out that the left-rules no longer apply to a state of the form (L,R)L only when L is a classical model of g(\u03a0 ). Thus, when a classical model L of g(\u03a0 )\nis found, then the CrossLR is used and a witness program with respect to L is computed. If no classical model is found for the witness program, then ConcludeR rule applies, which brings us to a terminal state Ok(L), suggesting that L represents a solution to a given search problem. It turns out that no right-rules applies in a state of the form (L,R)R only when R is a classical model for the witness program. Thus, the set L of literals is not such that t(\u03a0 ,M) is unsatisfiable and the dpll procedure of the generate layer, embodied by the left-rules, proceeds with the search, after backtracking through BacktrackRL. In the case when BacktrackRL cannot be applied, it follows that no other candidate can be found by the generate layer, so the transition ConcludeRL leading to Failstate is the only available one from such a state.\n3.2 Abstract basic cmodels\nWe now relate the graph DP 2g,t(\u03a0 ) to the procedure dp-assat-proc from Lierler (2005). This procedure forms the basis of the answer set solver cmodels. Yet, it does not account for backjumping and learning techniques, implemented in cmodels.\nGiven a disjunctive program \u03a0 , the answer set solver cmodels starts its computation by computing a CNF formula gC(\u03a0 ) that corresponds to the clausified program completion of \u03a0 . The dpll procedure is then applied to gC(\u03a0 ). The test layer of the cmodels computation relies on the programs produced by a witness program function called tC that intuitively tests minimality of found models of completion.\nTo be complete in our presentation, we now review the details of gC and tC functions (Lierler 2010). To construct gC(\u03a0 ), cmodels introduces an auxiliary atom \u03b1B for every body B occurring in \u03a0 . The atom \u03b1B is an explicit definition for B, it is true if and only if B is true. Also every disjunctive rule gives rise to as many auxiliary variables as there are atoms in the head of the rule: for a disjunctive rule A \u2190 B and every atom a \u2208 A, an auxiliary atom \u03b1a,B is equivalent to a conjunction B \u2227 A\u2032, where A\u2032 is (A \\ {a})\u2228. Formulas (3) and (4) present the definitions of gC and tC for a program \u03a0. The first four lines of the definition of the CNF formula gC(\u03a0 ) concern clausification of the introduced explicit definitions, namely \u03b1B and \u03b1a,B. The last two lines encode clausified completion with the use of \u03b1B and \u03b1a,B.\ngC(\u03a0 ) = {\u03b1B \u2228B | B \u2208 Bodies(\u03a0 )}\n{\u00ac\u03b1B \u2228 a | B \u2208 Bodies(\u03a0 ), a \u2208 B} {\u03b1a,B \u2228 \u00ac\u03b1B \u2228 A | A \u2228 a \u2190 B \u2208 \u03a0 } {\u00ac\u03b1a,B \u2228 b | A \u2228 a \u2190 B \u2208 \u03a0 , b \u2208 A \u222a {\u03b1B}} {\u00ac\u03b1B \u2228 A | A \u2190 B \u2208 \u03a0 } {\u00aca \u2228\na\u2190B\u2208\u03a0\n\u03b1B \u2228\nA\u2228a\u2190B\u2208\u03a0\n\u03b1a,B}\n(3)\ntC(\u03a0 ,M) = {M+|atoms(\u03a0 ) \u2228 }\u222a\n{\u00aca | \u00aca \u2208 M|atoms(\u03a0 )}\u222a {B \u2228 A | A \u2190 B \u2208 \u03a0M + , B \u2286 M},\n(4)\nIntuitively, cmodels uses the program gC(\u03a0 ) as an approximation of \u03a0 during the generate-layer computation. Indeed, any stable model of \u03a0 is also a classical model of gC(\u03a0 ). The converse does not always hold. Thus, classical models of gC(\u03a0 ) must be checked. For a classical model M of gC(\u03a0 ), a program produced by tC(\u03a0 ,M) has no classical models iff M is a stable model of \u03a0 . In fact, any model N of tC(\u03a0 ,M) is such that it satisfies the reduct \u03a0M +\n, while N+ \u2282 M+|atoms(\u03a0 ). In\nsuch case, M+|atoms(\u03a0 ) is not an answer set of \u03a0 by definition and, consequently, M is not a stable model of \u03a0.\nBy DP 2\u03a0 we denote the graph DP 2 gC ,tC (\u03a0 ). Proposition 3 below illustrates that the graph DP 2\u03a0 can be used for deciding whether a given program \u03a0 has a stable model, similarly as the graph DP\u03a0 can be used for deciding whether \u03a0 has a classical model.\nProposition 3\nFor any program \u03a0 , the graph DP 2\u03a0 checks the stable models of \u03a0 .\nThe graph DP 2\u03a0 captures the search procedure of dp-assat-proc of cmodels. The dp-assat-proc algorithm follows the priorities on its transition rules as they are ordered in Figure 4. We often use this convention when describing other procedures in the sequel."}, {"heading": "4 Graph Templates", "text": "The differences in design choices of disjunctive answer set solvers obscure the understanding of their similarities. In Brochenin et al. (2014), transition systems exemplified by the graph DP 2\u03a0 were used to capture several disjunctive solvers, namely, cmodels, gnt and dlv implementing backtracking. The transitions systems made the similarities that these solvers share explicit. For example, all solvers are based on a two-layer approach in the spirit of the dp-assat-proc algorithm. In this work, we make an additional move towards a unifying framework for capturing two-layer methods. We introduce a graph template that we then use to encompass disjunctive solvers cmodels, gnt and dlv."}, {"heading": "4.1 A Single Layer Graph Template", "text": "In the next section we will define a graph template suitable for capturing twolayer computation of disjunctive answer set solvers. As a step in this direction, we describe here a simpler graph template that can be used to capture the dpll procedure by encapsulating the dpll graph. We also show that this template can encapsulate a graph capturing the computation underlying the algorithm of answer set solver smodels for non-disjunctive programs.\nTemplate. A function from a program \u03a0 and a set of literals over atoms(\u03a0 ) to a set of literals over atoms(\u03a0 ) is called a propagator condition or, shortly, p-condition. Figure 5 presents four p-conditions, namely, UnitPropagate, AllRulesCancelled, BackchainT rue, and Unfounded . For a set P of p-conditions, a program \u03a0 and a set M of literals, by P(\u03a0 ,M) we denote the set of literals \u22c3\np\u2208P p(\u03a0 ,M). Intu-\nitively, if each image through a p-condition is a set of possible outcomes, this set represents the union of the possible outcomes through P .\nDefinition 1 Given a a program \u03a0 and a set P of p-conditions, a dpll graph template DPTP,\u03a0 is a graph of which nodes are the basic states relative to atoms(\u03a0 ) and edges are specified by the transition rules Conclude, Backtrack, Decide, Success presented in Figure 2 and the transition rule\nPropagate L =\u21d2 Ll if l \u2208 P(\u03a0 , L). (5)\nFor instance, the instantiation DPT{UnitPropagate},\u03a0 of the dpll graph template results in the dpll graph DP\u03a0 . Indeed, by definition these graphs share the same nodes as well as their rules Conclude, Backtrack, Decide, and Success coincide. Then, one can see that l \u2208 UnitPropagate(\u03a0 , L) if and only if the transition rule Unit in DP\u03a0 is applicable in L and supports the transition to a state Ll, which shows that the Unit rule and the Propagate rule coincide when P = {UnitPropagate}.\nInstantiation. We call types the elements of the set T = {cla, sup, sta}. In the following, by cla-model, sup-model and sta-model we denote classical, supported, and stable models, respectively. We also use letter w to denote a variable over set T of types. We say that a set P of p-conditions is w-sound if for any program \u03a0 , for\nany set M of literals, and for any w-model M1 of \u03a0 such that M \u2286 M1, it also holds that P(\u03a0 ,M) \u2286 M1. Note that any cla-sound set of p-conditions is sup-sound, and any sup-sound set of p-conditions is sta-sound. We say that a set P of p-conditions is w-complete when for any program \u03a0 and any consistent and complete set M of literals over atoms(\u03a0 ), set M is a w-model of \u03a0 if and only if P(\u03a0 ,M) = \u2205. For a type w, we say that a set P of p-conditions is w-enforcing if P is both w-sound and w-complete.\nNext theorem summarizes properties of several sets of p-conditions:\nup = {UnitPropagate} sd = {UnitPropagate, AllRulesCancelled,BackchainTrue}\nsm = {UnitPropagate, AllRulesCancelled,BackchainTrue,Unfounded}\nTheorem 2 The following statements hold:\n1. The set up is cla-enforcing; 2. All the subsets of sd that contain {UnitPropagate, AllRulesCancelled} are\nsup-enforcing; and\n3. All the subsets of sm that contain {UnitPropagate,Unfounded} are sta\u2013\nenforcing.\nWe are now ready to state the main result of this section.\nTheorem 3 For any program \u03a0 , any type w, and any w-enforcing set of p-conditions P , the graph DPTP,\u03a0 checks the w-models of \u03a0 .\nTheorems 2 and 3 give rise to families of valid solvers for deciding where classical, supported, or stable models exist for a program. For instance, for a non-disjunctive program \u03a0 , the graph DPTsm,\u03a0 coincides with the graph sm\u03a0 (Lierler 2011) that captures computation of answer set solver smodels (Simons et al. 2002). The graph DPTsd,\u03a0 coincides with the graph atleast\u03a0 (Lierler 2011) that provides a procedure for deciding whether a non-disjunctive program has supported models. For a disjunctive program \u03a0 the same single layer graph DPTsm,\u03a0 forms a procedure for deciding whether \u03a0 has a stable model. Note, however, that generally the problem of deciding whether l \u2208 Unfounded(\u03a0 , L) is np-complete for the case when \u03a0 is disjunctive."}, {"heading": "4.2 A Two-Layer Graph Template", "text": "We extend here the approach of Section 4.1 to capture two-layer methodology of disjunctive solvers.\nDefinition 2 Given a program \u03a0 , sets PL and PR of p-conditions, a generating function g, and a witness function t, a two-layer template graph STTPL,gPR,t (\u03a0 ) is a graph defined as follows:\n\u2022 The set of nodes is, as in the previous two-layer graphs, the set of states relative to\natoms(g(\u03a0 )) and atoms(t,\u03a0 , atoms(g(\u03a0 ))); and\n\u2022 The transition rules are the rules presented in Figure 4 except the rules UnitL and\nUnitR, that are replaced by the rules PropagateL and PropagateR presented in Figure 6.\nDescription of the Template. We call the state (\u2205, \u2205)L initial. Note how the rules PropagateL and PropagateR in STT PL,g PR,t (\u03a0 ) refer to the parameters PL, PR, g and t of the graph template. Varying these parameters will allow us to specify transition systems that capture different disjunctive answer set solvers. Intuitively, the parameters PL and PR are sets of p-conditions defining a propagation rule on generate and test side of computation, respectively.\nThe instantiation STT up,g C\nup,tC (\u03a0 ) of the two-layer graph template results in DP 2\u03a0 .\nIndeed, the graphs share the same nodes. Also their rules ConcludeL, ConcludeR, DecideL, DecideR, BacktrackL, BacktrackR and ConcludeRL coincide. It is easy to see that a literal l is in up(gC(\u03a0 ), L) if and only if the transition rule UnitL in DP 2\u03a0 is applicable in (L, \u2205)L and supports the transition to a state (Ll, \u2205)L. Thus, the transition rule PropagateL supports the transition from (L, \u2205)L to (Ll, \u2205)L if and only if the transition rule UnitL supports the same transition. A similar statement holds for the case of PropagateR and UnitR.\nRecall that in Section 3.2 we showed that cmodels implementing backtracking\ncan be defined using the graph DP 2\u03a0 . The fact that instantiation STT up,gC up,tC (\u03a0 ) coincides with DP 2\u03a0 illustrates that the introduced template is sufficient for capturing existing solvers. Next section demonstrates that the proposed template is suitable for capturing gnt and dlv.\nInstantiation: Approximating and Ensuring Pairs. In the definition of the two-layer template graph STTPL,gPR,t (\u03a0 ) we pose no restrictions on its four key parameters: sets PL, PR of p-conditions, and generating and witness functions g, t. In practice, when this template is utilized to model, characterize, and elicit disjunctive solvers these four parameters exhibit specific properties. We now introduce terminology that allows us to specify essential properties of these parameters that will translate into correctness of solvers captured by properly instantiated template. On the one hand, we introduce the conditions on generating and witness functions under which we call these functions \u201dapproximating\u201c and \u201densuring\u201c, respectively. On the other hand, we couple these conditions with restrictions on sets of p-conditions so that we can speak of (i) approximating-pair (Pg, g) for a set Pg of p-conditions and a generating function g, and (ii) ensuring-pair (Pt, t) for a set Pt of p-conditions and\na witness function t. For such pairs, the template instantiation STT Pg,g Pt,t (\u03a0 ) results in a graph that checks stable models of \u03a0 . As a result, when we characterize such solvers as gnt and dlv by means of the two-layer template we focus on (i) specifying their generating and witness function as well as their sets of p-conditions, and (ii) illustrating that they form proper approximating and ensuring pairs. This also brings us to the realization that an inception of a novel solver can be triggered by a creation of a novel approximation and ensuring pairs or their combinations. We now make these ideas precise.\nFor types w and w1, we say that a generating function g is w1-approximating\nwith respect to type w if for any program \u03a0 :\n1. For any stable model L of \u03a0 there is a w1-model L1 of g(\u03a0 ) such that\nL = L1|atoms(\u03a0 ); and\n2. For any w1-model M of g(\u03a0 ), M|atoms(\u03a0 ) is a w-model of \u03a0 .\nConsider the generating function cnfcomp(\u03a0 ) that returns a CNF formula, which stands for the completion comp(\u03a0 ) converted to CNF using straightforward equivalent transformations. In other words, cnfcomp(\u03a0 ) consists of clauses of two kinds\n1. the rules A \u2190 B of the program written as clauses A \u2228B, and 2. formulas of cnfcomp(\u03a0 ) from (2) converted to CNF using the distributivity\nof disjunction over conjunction.3\nThe function cnfcomp is cla-approximating with respect to sup. Indeed,\n1. any stable model of a program \u03a0 is also a cla-model of cnfcomp(\u03a0 ), and 2. any cla-model of cnfcomp(\u03a0 ) is a sup-model of \u03a0 .\nSince any supported model is also a classical model, the cnfcomp function is also cla-approximating with respect to cla. Note that when a generating function g is w1-approximating with respect to w, then enumerating all w1-models of g(\u03a0 ) results in enumerating some w-models of \u03a0 modulo a restriction to atoms(\u03a0 ).\nFor types w and w1, and a witness function t, we say that t is w1-ensuring with respect to w when for any set M of literals covering \u03a0 such that M|atoms(\u03a0 ) is w-model of \u03a0 , M|atoms(\u03a0 ) is a stable model of \u03a0 if and only if t(\u03a0 ,M) results in a program that has no w1-model.\nFor instance, the witness function tC is cla-ensuring with respect to cla. Since any sup-model is also a cla-model, the function tC is also cla-ensuring with respect to sup. It is easy to see that when a witness function t is w1-ensuring with respect to w, then given any w-model L of a program \u03a0 we may use the function t to test that L is also a stable model of \u03a0 . Indeed, an application of t resulting in a program that has no w1-models translates into the statement that L is a stable model of \u03a0 .\nThese newly defined concepts of approximating and ensuring functions provide\nthe following characterization for the set of stable models of a program \u03a0 .\n3 It is essential that repetitions are not removed in the process of clausification. For instance, cnfcomp(a\u2190 not a) = (a \u2228 a) \u2227 (\u00aca \u2228 \u00aca).\nProposition 4 For any types w, w1 and w2, generating function g that is w1-approximating with respect to w, witness function t that is w2-ensuring with respect to w, and program \u03a0 , the set of all stable models of \u03a0 is\n{L|atoms(\u03a0 ) | L is a w1-model of g(\u03a0 ) and t(\u03a0 , L) has no w2-models}.\nWe now introduce the notion of ensuring and approximating pairs that permit an operational use of generating and witness functions, by matching them with a relevant set of propagators. We call a pair (P , g) of a set of p-conditions and a generating function an approximating-pair with respect to w if for some type w1, the set P is w1-enforcing and the function g is w1-approximating with respect to w. For example, the pair (up, cnfcomp) is an approximating-pair with respect to sup as well as to cla. The (up, gC) is also an approximating-pair with respect to sup as well as to cla.\nWe call a pair (P , t) of a set of p-conditions and a witness function an ensuringpair with respect to w if for some type w1, the set P is w1-enforcing and the function t is w1-ensuring with respect to w. For example, the pair (up, t C) is an ensuring-pair with respect to any defined type.\nWe are now ready to state the main result of this section.\nTheorem 4\nFor any program \u03a0 , any type w, any (Pg, g) approximating-pair with respect to w,\nand any (Pt, t) ensuring-pair with respect to w, the graph STT Pg,g Pt,t (\u03a0 ) checks the stable models of \u03a0 .\nTheorem 4 illustrates how the template STT Pg,g Pt,t (\u03a0 ) can serve as a framework for defining transitions systems that result in correct algorithms for deciding whether a program \u03a0 has a stable model. The facts that (up, gC) is an approximating-pair with respect to cla and that (up, tC) is an ensuring-pair with respect to cla, together with Theorem 4, subsume the result of Proposition 3.\nWe now state propositions that capture interesting properties about states of the\ngraph STT Pg,g Pt,t (\u03a0 ). The former proposition concerns states with the label L, the latter concerns states with the label R.\nProposition 5\nFor any type w, generating function g, witness function t, w-enforcing set of pconditions Pg, set of p-conditions Pt, and program \u03a0 , if no left-rule is applicable in some state (l1. \u00b7 \u00b7 \u00b7 .lk1 , r1. \u00b7 \u00b7 \u00b7 .rk2)L in STT Pg,g Pt,t (\u03a0 ) reachable from the initial state, then l1. \u00b7 \u00b7 \u00b7 .lk1 is a w-model of g(\u03a0 ).\nProposition 6\nFor any types w1 and w2, generating function g witness function t, w1-enforcing set of p-conditions Pg, w2-enforcing set of p-conditions Pt, program \u03a0 , and a state (l1. \u00b7 \u00b7 \u00b7 .lk1 , r1. \u00b7 \u00b7 \u00b7 .rk2)R in STT Pg,g Pt,t (\u03a0 ) reachable from the initial state, the following conditions hold:\n(a) t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1) is defined,\n(b) r1. \u00b7 \u00b7 \u00b7 .rk2 is a set of literals over t(\u03a0 , L), (c) l1. \u00b7 \u00b7 \u00b7 .lk1 is a w1-model of g(\u03a0 ), and (d) If no right-rule is applicable to (l1. \u00b7 \u00b7 \u00b7 .lk1 , r1. \u00b7 \u00b7 \u00b7 .rk2)R then r1. \u00b7 \u00b7 \u00b7 .rk2 is a\nw2-model of t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1)."}, {"heading": "5 Applications of the Template", "text": "Section 3.2 illustrates how cmodels implementing backtracking can be defined using the graph DP 2\u03a0 , while the previous section states that the instantiation STT up,gC\nup,tC (\u03a0 ) of the two-layer graph template results in DP 2\u03a0 . Thus, this template is suitable for capturing computations of cmodels. In this section, we show how the template also captures the solvers gnt and dlv without backjumping. Then, we discuss how the framework facilitates the design of new abstract solvers and their comparison, by means of inspecting the structures of the related graphs.\nAbstract gnt. We now show how the procedure underlying disjunctive solver gnt can be captured by the two-layer template. Unlike solver cmodels that uses the dpll procedure for generating and testing, system gnt uses the smodels procedure for respective tasks. Recall that the smodels procedure finds stable models for nondisjunctive logic programs, while the dpll procedure finds classical models. The graph sm\u03a0 (Section 4.1) captures the computation underlying smodels just as the graphDP\u03a0 captures the computation underlying dpll. It forms a basis for devising the transition system suitable to describe gnt. The graph describing the general structure of gnt is obtained from the graph template STT sm,gsm,t (\u03a0 ) that rely on the set sm of p-contitions.4\nJanhunen et al. (2006) define the generating function gG and the witness function tG used in gnt. We present these definitions in (6) and (7).5 For a disjunctive program \u03a0 , by \u03a0N we denote the set of non-disjunctive rules of \u03a0 , by \u03a0D we denote the set of disjunctive rules \u03a0 \\\u03a0N . For each atom a in atoms(\u03a0 ) let a r and as be new atoms.\ngG(\u03a0 ) = {a \u2190 B, not ar | A \u2228 a \u2190 B \u2208 \u03a0D}\u222a\n{ar \u2190 not a | A \u2228 a \u2190 B \u2208 \u03a0D}\u222a {\u2190 A,B | A \u2190 B \u2208 \u03a0D}\u222a \u03a0N\u222a {as \u2190 A \\ {a}, B | A \u2228 a \u2190 B \u2208 \u03a0D}\u222a {\u2190 a, not as | a \u2228 A \u2190 B \u2208 \u03a0D}\n(6)\n4 The graph template STT sm,gsm,t (\u03a0 ) corresponds to the graph SM 2 g(\u03a0),t defined in (Brochenin\net al. 2014). 5 The presented functions gG and tG capture the essence of functions Gen and Test defined by Janhunen et al., but they are not identical. Our language of disjunctive programs includes rules with empty heads. This allows us a more concise description.\ntG(\u03a0 ,M) = {a \u2190 B, not ar | A \u2228 a \u2190 B \u2208 \u03a0MD , a \u2208 M,B \u2286 M}\u222a\n{ar \u2190 not a | A \u2228 a \u2190 B \u2208 \u03a0 }\u222a {\u2190 A,B | A \u2190 B \u2208 \u03a0MD , B \u2286 M}\u222a {a \u2190 B | a \u2190 B \u2208 \u03a0MN , a \u2208 M,B \u2286 M}\u222a {\u2190 M|atoms(\u03a0 )}\n(7)\nBy SM2\u03a0 we denote the graph STT sm,gG sm,tG (\u03a0 ). The graph SM2\u03a0 captures the gnt procedure by Janhunen et al. (2006) in a similar way as the graph DP 2\u03a0 captures the cmodels procedure of dp-assat-proc in Section 3.2. Figure 7 presents an example of a path in a graph SM2{a\u2190c;b\u2190c;c\u2190a,b;a\u2228b\u2190}. From the formal results by Janhunen et al. (2006) it immediately follows that gG is sta-approximating with respect to cla and tG is sta-ensuring with respect to cla. The pair (sm, gG) is an approximating-pair with respect to cla, while (sm, tG) is an ensuring-pair with respect to cla. The following result immediately follows from Theorem 4.6\nCorollary 1\nFor any \u03a0 the graph SM2\u03a0 checks the stable models of \u03a0 .\n6 Corollary 1 corresponds to Theorem 5 in (Brochenin et al. 2014).\nAbstract dlv without Backjumping. This section introduces graphs that capture the answer set solver dlv without backjumping. The generate layer, i.e., the left-rule layer, is reminiscent to the smodels algorithm except it does not use Unfounded . The test layer applies the dpll procedure to a witness formula.\nThe graph templates STT sd,gup,t (\u03a0 ) describes the general structure of dlv. The generating function gD is the identity function as in (8), and the witness function tD follows in (9).\ngD(\u03a0 ) = \u03a0 (8)\ntD(\u03a0 ,M) = {(B \u2229M+) \u2228 \u2228 A\u2032 \u2228 | A \u2190 B \u2208 \u03a0M + , B \u2286 M,A\u2032 = A \u2229M+}\u222a\n{(M|atoms(\u03a0 )) \u2228}\n(9)\nFollowing the results from Faber (2002) and Koch et al. (2003), the generating function gD is sup-approximating with respect to cla while the witness function tD is cla-ensuring with respect to cla. The pair (sd, gD) is an approximating-pair with respect to cla, while (up, tD) is an ensuring-pair with respect to cla. The result below immediately follows from Theorem 4.7\nCorollary 2\nFor any \u03a0 the graph STT sd,g D\nup,tD (\u03a0 ) checks the stable models of \u03a0 .\n7 Corollary 2 corresponds to Theorem 6 in (Brochenin et al. 2014).\nThis corollary is an alternative proof of correctness for the dlv algorithm previously stated by Faber (2002) and Koch et al. (2003) in terms of pseudo-code. Figure 8 presents an example of a path through one of the graph describing abstract dlv.\nDesigning new Graphs and Comparing Graphs. The two-layer graph template can be conveniently used to define new abstract solvers. For instance, one may choose to combine (up, gC) with (sm, tG) to obtain a solver captured by the graph template STT up,g C\nsm,tG (\u03a0 ). Theorem 4 provides a proof of correctness for the procedure\nsummarized by this family of graphs. More generally, to obtain a new solver one can combine any approximating-pair on the left side of the graphs with any ensuringpair on the right side with respect to the same type. For instance, for any pair (P , t) that is ensuring with respect to cla, the family of graphs STT up,cnfcompP,t (\u03a0 ) captures a correct procedure for a disjunctive answer set solver.\nIn the following, we illustrate how abstract solvers can serve also as a convenient tool for comparing search procedures from an abstract point of view, by means of comparison to the related graphs. In this respect we now state the result that illustrates a strong relation between cmodels and dlv. Indeed, their generate layer:\nTheorem 5\nFor any (P , t) ensuring-pair with respect to cla, and any program \u03a0 , the graphs\nSTT up,cnfcomp P,t (\u03a0 ) and STT\nsd,gD P,t (\u03a0 ) are identical graphs."}, {"heading": "6 Proofs", "text": ""}, {"heading": "6.1 Proof of Theorem 2", "text": "We start by stating several lemmas that will be instrumental in constructing arguments for Theorem 2. Recall that up = {UnitPropagate}.\nLemma 1 The set up is cla-complete.\nIn other words, for any program \u03a0 and any complete and consistent set M of literals over atoms(\u03a0 ), the set M is a cla-model of \u03a0 iff UnitPropagate(\u03a0 ,M) = \u2205."}, {"heading": "Proof", "text": "Left-to-right: Let M be a cla-model of \u03a0 . Our proof is by contradiction. Assume that UnitPropagate(\u03a0 ,M) 6= \u2205. Take any literal l from this set. Then, the literal l is such that it does not belong to M . Also, there is a rule in \u03a0 that is equivalent to a clause C \u2228 l so that all the literals of C occur in M . Since M is a cla-model of \u03a0 , we conclude that l \u2208 M . We derive a contradiction.\nRight-to-left: Let UnitPropagate(\u03a0 ,M) = \u2205. By contradiction. Assume that M is not a cla-model of \u03a0 . Then there is a rule in \u03a0 that is equivalent to a clause C\u2228 l so that all the literals of C as well as l occur in M (indeed, M is a complete set of literals over atoms(\u03a0 ) that does not satisfy some rule in \u03a0 ). Since M is consistent, l 6\u2208 M . It follows that l \u2208 UnitPropagate(\u03a0 ,M). We derive a contradiction.\nLemma 2 For any program \u03a0 , any atom a, and any sets M and M \u2032 of literals such that M \u2286 M \u2032, if a rule in \u03a0 is not a supporting rule for a with respect to M then this rule is also not a supporting rule for a with respect to M \u2032."}, {"heading": "Proof", "text": "By contradiction. Assume that there is a rule A \u2228 a \u2190 B in \u03a0 such that it is not a supporting rule for a with respect to M but it is a supporting rule for a with respect to M \u2032. It follows that M \u2229 (B \u222a A) 6= \u2205, while M \u2032 \u2229 (B \u222a A) = \u2205. This contradicts the fact that M \u2286 M \u2032.\nWe now generalize Lemma 4 from Lierler (2008) to the case of disjunctive pro-\ngrams.\nLemma 3 For any unfounded set U on a consistent set L of literals w.r.t. a program \u03a0 and any consistent and complete set M of literals over atoms(\u03a0 ), if L \u2286 M and M \u2229U 6= \u2205, then M is not a stable model of \u03a0 ."}, {"heading": "Proof", "text": "By contradiction. Assume that M is a stable model of \u03a0 . Then, M is a classic model of \u03a0 also. By Theorem 1, M is such that there is no non-empty subset of M+ such that it is an unfounded set on M w.r.t. \u03a0 . Since M \u2229 U 6= \u2205, it follows that M \u2229 U is not an unfounded set on M w.r.t. \u03a0 . It follows that for some rule a \u2228 A \u2190 B \u2208 \u03a0 such that a \u2208 M \u2229 U all of the following conditions hold\n1. M \u2229B = \u2205, 2. M \u2229 U \u2229B = \u2205, and 3. (A \\ (M \u2229 U)) \u2229M = \u2205.\nSince M \u2229 B = \u2205 and L \u2286 M it follows that L \u2229 B = \u2205. Since M \u2229 B = \u2205 and the fact that M is consistent and complete set of literals over atoms(\u03a0 ), B+ \u2286 M . Consequently U \u2229B+ = M \u2229U \u2229B+ = \u2205. Since L \u2286 M and (A\\ (M \u2229U))\u2229M = \u2205, it follows that (A \\ U) \u2229 L = \u2205. Consequently, the set U is not an unfounded set on L.\nWe are now ready to introduce the proof of Theorem 2."}, {"heading": "Proof of Theorem 2", "text": "Statement 1. We have to show that the set up is cla-enforcing. Lemma 1 states that the set up is cla-complete. Thus, we only ought to illustrate that up is cla-sound. Let \u03a0 be any program, M be any set of literals, M \u2032 be any cla-model of \u03a0 such that M \u2286 M \u2032. We have to show that up(\u03a0 ,M) \u2286 M \u2032. Let l be any literal in up(\u03a0 ,M). We now show that l \u2208 M \u2032. The p-condition UnitPropagate is the only member of the set up. Thus, up(\u03a0 ,M) = UnitPropagate(\u03a0 ,M). It follows that l \u2208 UnitPropagate(\u03a0 ,M). By the conditions of UnitPropagate definition, there is a rule in \u03a0 that is equivalent to a clause C \u2228 l so that all the literals of C occur in\nM . Since M \u2286 M \u2032, it follows that all the literals of C occur in M \u2032. From the fact that M \u2032 is cla-model of \u03a0 it follows that M \u2032 |= C \u2228 l. Consequently, l \u2208 M \u2032.\nStatement 2. We have to show that the subsets of sd containing {UnitPropagate, AllRulesCancelled} are sup-enforcing. We first illustrate this property for the set {UnitPropagate, AllRulesCancelled}. We call this set ua. We start by showing that the set ua is sup-sound. Let \u03a0 be any program, M be any set of literals, M \u2032 be any sup-model of \u03a0 such that M \u2286 M \u2032. We have to illustrate that the set ua(\u03a0 ,M) is a subset of M \u2032. Consider any literal l in the set ua(\u03a0 ,M). We now show that l is also in M \u2032.\nCase 1. l \u2208 UnitPropagate(\u03a0 ,M). Since M \u2032 is a sup-model, M \u2032 is also a clamodel. The rest of the argument follows the lines of proof in Statement 1, which illustrates that up is cla-sound.\nCase 2. l \u2208 AllRulesCancelled(\u03a0 ,M). l has the form \u00aca. By the conditions of AllRulesCancelled definition, it follows that there is no rule in \u03a0 supporting a with respect to M . By Lemma 2, we derive that there is no rule in \u03a0 supporting a with respect to M \u2032. From the fact that M \u2032 is sup-model of \u03a0 it follows that \u00aca \u2208 M \u2032. (Indeed, a may not be a member of M \u2032, while M \u2032 is a complete set of literals over atoms(\u03a0 ).)\nSecond, we show that the set ua is sup-complete. Let \u03a0 be any program, M be any complete and consistent set of literals over atoms(\u03a0 ). We now show that M is sup-model of \u03a0 iff ua(\u03a0 ,M) = \u2205.\nLeft-to-right: Let M be a sup-model of \u03a0 . By contradiction. Assume that the\nset ua(\u03a0 ,M) is not empty. Then there is a literal l in this set.\nCase 1. l \u2208 UnitPropagate(\u03a0 ,M). Since M is also cla-model of \u03a0 , by Lemma 1\nwe derive a contradiction.\nCase 2. l \u2208 AllRulesCancelled(\u03a0 ,M). l has the form \u00aca. By the conditions of AllRulesCancelled definition, it follows that (i) literal \u00aca is such that it does not belong to M , and (ii) there is no supporting rule in \u03a0 for a with respect to M . Since M is a sup-model of \u03a0 , we conclude from (ii) that \u00aca \u2208 M . This contradicts (i).\nRight-to-left: Assume ua(\u03a0 ,M) = \u2205. By contradiction. Assume that M is not a sup-model of \u03a0 . Then either M is not a cla-model of \u03a0 or there is an atom a \u2208 M+ such that there is no supporting rule in \u03a0 for a with respect to M . In the former case, when M is not a cla-model of \u03a0 , by Lemma 1 we derive a contradiction. In the latter case, it follows that \u00aca \u2208 AllRulesCancelled(\u03a0 ,M) by the conditions of the AllRulesCancelled definition. We derive a contradiction.\nWe now show that the set sd is sup-enforcing. We start by claiming that the set sd is sup-sound. Let \u03a0 be any program, M be any set of literals, M \u2032 be any sup-model of \u03a0 such that M \u2286 M \u2032. We have to illustrate that the set sd(\u03a0 ,M) is a subset of M \u2032. Consider any literal l in the set sd(\u03a0 ,M). We show that l is also in M \u2032. Given a proof that ua is sup-sound, it is only left to be proved that for any literal l that is in BackchainT rue(\u03a0 ,M), it also holds that l \u2208 M \u2032. Consider literal l \u2208 BackchainT rue(\u03a0 ,M). By the definition of BackchainT rue it follows that there is a rule r = A \u2228 a \u2190 B in \u03a0 so that (i) a \u2208 M , and (ii) either l \u2208 A or l \u2208 B and, (iii) no other rule in \u03a0 is supporting a with respect to M . By Lemma 2\nand (iii), we derive that every rule other than r is such that it is not a supporting rule for a with respect to M \u2032. By (i) and the fact that M \u2286 M \u2032, a \u2208 M \u2032. Since M \u2032 is a sup-model of \u03a0 , it follows that M \u2229 (B \u222a A) = \u2205. By the fact that M \u2032 is a consistent and complete set of literals over atoms(\u03a0 ) we conclude that B\u222aA \u2286 M . By (ii), l \u2208 M \u2032.\nStatement 3. We have to show that the subsets of sm containing {UnitPropagate, Unfounded} are sta-enforcing. We only illustrate this for the set {UnitPropagate, Unfounded}. We call this set uu. The proof for other sets (i) relies on the fact that any sta-model is also a cla and sup-model and (ii) follows the ideas presented in the proof of Statement 2.\nWe start by showing that the set uu is sta-sound. Let \u03a0 be any program, M be any set of literals, M \u2032 be any sta-model of \u03a0 such that M \u2286 M \u2032. We have to illustrate that the set uu(\u03a0 ,M) is a subset of M \u2032. Consider any literal l in the set uu(\u03a0 ,M). We now show that l is also in M \u2032.\nCase 1. l \u2208 UnitPropagate(\u03a0 ,M). Since M \u2032 is a sta-model, M \u2032 is also a clamodel. The rest of the argument follows the lines of proof in Statement 1, which illustrates that up is cla-sound.\nCase 2. l \u2208 Unfounded(\u03a0 ,M). Literal l has the form \u00aca. By the conditions of Unfounded definition, it follows that there is a set X containing a such that X is unfounded with respect to \u03a0 . By Lemma 3 and the fact that M \u2032 is sta-model of \u03a0 it follows that \u00aca \u2208 M \u2032. (Indeed, consider a simple argument by contradiction.)\nSecond, we show that the set uu is sta-complete. Let \u03a0 be any program, M be any complete and consistent set of literals over atoms(\u03a0 ). We now show that M is sta-model of \u03a0 iff uu(\u03a0 ,M) = \u2205.\nLeft-to-right: Let M be a sta-model of \u03a0 . By contradiction. Assume that the set\nuu(\u03a0 ,M) is not empty. Then there is a literal l in this set.\nCase 1. l \u2208 UnitPropagate(\u03a0 ,M). Since M is also cla-model of \u03a0 , by Lemma 1\nwe derive a contradiction.\nCase 2. l \u2208 Unfounded(\u03a0 ,M). Literal l has the form \u00aca. By the conditions of Unfounded definition, it follows that (i) literal \u00aca is such that it does not belong to M , and (ii) there is a set X containing a such that X is unfounded with respect to \u03a0 . Since M is a sta-model of \u03a0 , we conclude from (ii) that \u00aca \u2208 M . This contradicts (i).\nRight-to-left: Assume that uu(\u03a0 ,M) = \u2205. By contradiction. Assume that M is not a sta-model of \u03a0 . By Theorem 1, either M is not a cla-model of \u03a0 or there is a non-empty subset of L+ that is an unfounded set on L with respect to \u03a0 . In the former case, when M is not a cla-model of \u03a0 , by Lemma 1 we derive a contradiction. In the latter case, it follows that there is some atom a in an existing unfounded set so that \u00aca \u2208 Unfounded(\u03a0 ,M) by the conditions of the Unfounded definition. We derive a contradiction."}, {"heading": "6.2 Proofs of Theorems 3, 4, Propositions 2, 4, 5, 6", "text": "We start by the proof of Theorem 4. We skip the proof of Theorem 3 as it relies on the same proof techniques that proof of Theorem 4 exhibits. The proof of Theorem 4 relies on auxiliary lemmas as well as proofs of Propositions 4, 5, 6 that follow. We conclude this section with the proof of Proposition 2.\nLemma 4\nLet g be a generating function and t be a witness function.\nLet Pg and Pt be sets of p-conditions. Then for any \u03a0 , the graph STT Pg,g Pt,t (\u03a0 ) is finite and acyclic."}, {"heading": "Proof", "text": "Consider the states of the graph STT Pg,g Pt,t (\u03a0 ). The string L of states of the form (L,R)s or of the type Ok(L) is built over a set of atoms which is bounded by the size of \u03a0 . Also, L does not allow repetitions. Thus, there is a finite number of possible strings L in the states (L,R)s or Ok(L). It immediately follows that there is a finite number of states Ok(L) in STT Pg,g Pt,t (\u03a0 ).\nConsider the right side of a state of the form (L,R)s. Since t(\u03a0 , L) has a finite number of atoms and there is a finite number of possible L, the set of atoms over which R is built is finite. Consequently, there is a finite number of possible R. We conclude that there is a finite number of possible states (L,R)s. Thus the set of states is finite in STT Pg,g Pt,t (\u03a0 ).\nFor any string L of literals, by |L| we denote the length of this string. Any\nstring L of literals can be written L0l \u2206 1 L1 . . . l \u2206 k Lk, where (l \u2206 i )1\u2264i\u2264k contains all the decision literals of L. Let us call v(L) the sequence |L0|, |L1| . . . |Lk|. We then write L \u2264 L\u2032 iff v(L) \u2264lex v(L \u2032) where \u2264lex is the lexicographic order. Since the length of the sequence v(L) is bounded by the finite number of possible decision literals, this is a well-founded order. Finally, we say that (L,R)s \u2264 (L\u2032, R\u2032)s\u2032 iff (L,R, s) \u2264lex (L\u2032, R\u2032, s\u2032) where \u2264lex is the lexicographic order and L < R. This is clearly well-founded as it is the lexicographic composition of well-founded orders.\nIf there is a transition from (L,R)s to (L \u2032, R\u2032)s\u2032 then (L,R)s \u2264 (L\u2032, R\u2032)s\u2032 and (L,R)s 6= (L\u2032, R\u2032)s\u2032 . This can be checked simply for each of the rules. Since the order is well-founded, there is no infinite path in the graph. Consequently, the graph is acyclic."}, {"heading": "Proof of Proposition 5", "text": "We first show that l1. \u00b7 \u00b7 \u00b7 .lk1 is consistent. By contradiction. Assume that l1. \u00b7 \u00b7 \u00b7 .lk1 is inconsistent. Then since ConcludeL is not applicable l1. \u00b7 \u00b7 \u00b7 .lk1 contains at least one decision literal. We now define i as l1. \u00b7 \u00b7 \u00b7 .lk1 = l1. \u00b7 \u00b7 \u00b7 .li\u22121.l \u2206 i .li+1. \u00b7 \u00b7 \u00b7 .lk1 where l\u2206i is the rightmost decision literal. Since BacktrackL is not applicable l1. \u00b7 \u00b7 \u00b7 .lk1 contains no decision literal. We derive a contradiction.\nSince DecideL is not applicable and l1. \u00b7 \u00b7 \u00b7 .lk1 is consistent, l1. \u00b7 \u00b7 \u00b7 .lk1 assigns all the atoms of atoms(g(\u03a0 )). As a consequence l1. \u00b7 \u00b7 \u00b7 .lk1 is a consistent and complete set of literals that covers atoms(g(\u03a0 )). Finally, PropagateL is not applicable. So\nPg(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1) is the empty set. Since Pg is w-enforcing and hence w-complete, l1. \u00b7 \u00b7 \u00b7 .lk1 is a w-model of g(\u03a0 )."}, {"heading": "Proof of Proposition 6", "text": "Statements (a\u2212 c) We prove these statements by induction on the length of a path in the graph STT Pg,g Pt,t (\u03a0 ) from the initial state. Since the statements trivially hold in the initial state of the graph, we only have to prove that all transition rules of"}, {"heading": "STT", "text": "Pg,g Pt,t (\u03a0 ) preserve the properties.\nStatement (c) trivially holds for all transitions but Crossing-rules RL. Statements (a) and (b) trivially hold for transitions due to Left rules, Crossing-rules RL, ConcludeR, ConcludeRL.\nConsider an edge due to one of the Right rules or Crossing-rules LR from state\nS = (l01. \u00b7 \u00b7 \u00b7 .l 0 k0 1 , r01 . \u00b7 \u00b7 \u00b7 .r 0 k0 2 )s0 to state S \u2032 = (l1. \u00b7 \u00b7 \u00b7 .lk1 , r1. \u00b7 \u00b7 \u00b7 .rk2)R so that the statements (a) and (b) hold on S (an inductive hypothesis). For the Right rules (excluding ConcludeR), the left side of the state remains unchanged. Thus, by induction hypothesis (a) immediately follows. Similarly, it is easy to see from the conditions of these rules that they also preserve property (b). We now illustrate that the CrossLR preserves (a\u2212 c).\nCase CrossLR: It follows that (i) s0 = L, (ii) l1. \u00b7 \u00b7 \u00b7 .lk1 = l 0 1. \u00b7 \u00b7 \u00b7 .l 0 k0 1 , (iii) no\nleft rule applies to S, (iv) r1. \u00b7 \u00b7 \u00b7 .rk1 = r 0 1 . \u00b7 \u00b7 \u00b7 .r 0 k0 1 = \u2205. By Proposition 5, (i), and (iii) we conclude that l01. \u00b7 \u00b7 \u00b7 .l 0 k0 1 is a w1-model of g(\u03a0 ). By (ii), it follows that l1. \u00b7 \u00b7 \u00b7 .lk1 is also a w1-model of g(\u03a0 ). Thus, (c) holds. From the definition of g(\u03a0 ) it follows that the set {l1. \u00b7 \u00b7 \u00b7 .lk1} of literals covers \u03a0. It follows that t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1) is defined. Thus (a) holds. From (iv), (b) trivially follows as the right side of the state is empty.\nStatement (d) We first show that r1. \u00b7 \u00b7 \u00b7 .rk2 is consistent. By contradiction. Assume that r1. \u00b7 \u00b7 \u00b7 .rk2 is inconsistent. Then since ConcludeR is not applicable, r1. \u00b7 \u00b7 \u00b7 .rk2 contains at least one decision literal. We now define i as r1. \u00b7 \u00b7 \u00b7 .rk2 = r1. \u00b7 \u00b7 \u00b7 .ri\u22121.r \u2206 i .ri+1. \u00b7 \u00b7 \u00b7 .rk2 where r \u2206 i is the rightmost decision literal. Since the rule BacktrackR is not applicable r1. \u00b7 \u00b7 \u00b7 .rk2 contains no decision literal. We derive a contradiction.\nSince DecideR is not applicable and r1. \u00b7 \u00b7 \u00b7 .rk2 is consistent, by (b) r1. \u00b7 \u00b7 \u00b7 .rk2 assigns all the atoms of atoms(t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1)). Thus, r1. \u00b7 \u00b7 \u00b7 .rk2 is a consistent and complete set of literals over atoms(t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1)). Finally, PropagateR is not applicable. So Pt(t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1), r1. \u00b7 \u00b7 \u00b7 .rk2 ) is the empty set. Since Pt is w2enforcing and hence w2-complete, r1. \u00b7 \u00b7 \u00b7 .rk2 is a w2-model of t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1).\nLemma 5\nLet w1 and w2 be some types in {cla, sup, sta}.\nLet g be a generating function and t be a witness function. Let Pg be a w1-enforcing set of p-conditions and Pt be a w2-enforcing set of\np-conditions.\nLet \u03a0 be a program.\nLet (l1. \u00b7 \u00b7 \u00b7 .lk1 , r1. \u00b7 \u00b7 \u00b7 .rk2)s be a state of STT Pg,g Pt,t (\u03a0 ) reachable from the initial\nstate.\nThen:\n(a) any w2-model of t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1) satisfies ri if it satisfies all decision literals\n(rj) \u2206 with j \u2264 i.\n(b) Any w1-model L of g(\u03a0 ) such that t(\u03a0 , L) has no w2-model satisfies li if it\nsatisfies all decision literals l\u2206j with j \u2264 i."}, {"heading": "Proof", "text": "We prove statements (a) and (b) by induction on the length of a path in the graph"}, {"heading": "STT", "text": "Pg,g Pt,t (\u03a0 ) from the initial state. Since the statements trivially hold in the initial state of the graph, we only have to prove that all transition rules of STT Pg,g Pt,t (\u03a0 ) preserve the properties.\nConsider an edge from the state S = (l01. \u00b7 \u00b7 \u00b7 .l 0 k0 1 , r01 . \u00b7 \u00b7 \u00b7 .r 0 k0 2 )s0 to the state S \u2032 = (l1. \u00b7 \u00b7 \u00b7 .lk1 , r1. \u00b7 \u00b7 \u00b7 .rk2)s so that the statements (a) and (b) hold on S (an inductive hypothesis).\nThe statements (a) and (b) trivially hold for the case of transitions due to\nConcludeL, ConcludeR, ConcludeRL.\nFor the case of transition rules CrossLR, BacktrackR, DecideR, PropagateR it holds that l1. \u00b7 \u00b7 \u00b7 .lk1 = l 0 1. \u00b7 \u00b7 \u00b7 .l\n0 k0 1 . So by the induction hypothesis, (b) triv-\nially holds on (l1. \u00b7 \u00b7 \u00b7 .lk1 , r1. \u00b7 \u00b7 \u00b7 .rk2 )s. For these rules, we are left to show that (a) holds on (l1. \u00b7 \u00b7 \u00b7 .lk1 , r1. \u00b7 \u00b7 \u00b7 .rk2 )s. Note that for the case of BacktrackR, DecideR, PropagateR, by Proposition 6 (a) it follows that t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1) is defined.\nCase CrossLR: It follows that r1. \u00b7 \u00b7 \u00b7 .rk1 = r 0 1 . \u00b7 \u00b7 \u00b7 .r 0 k0 1 = \u2205. Consequently, (a)\nholds as right side of the state is empty.\nCase BacktrackR. In this case, there is an index i such that r 0 1 . \u00b7 \u00b7 \u00b7 .r 0 k0 2 =\nr01 . \u00b7 \u00b7 \u00b7 .r 0 i\u22121.(r 0 i ) \u2206.r0i+1. \u00b7 \u00b7 \u00b7 .r 0 k0 2 and r1. \u00b7 \u00b7 \u00b7 .rk2\u22121 = r 0 1 . \u00b7 \u00b7 \u00b7 .r 0 i\u22121. Also, by the conditions of BacktrackR, the string of literals r 0 1 . \u00b7 \u00b7 \u00b7 .r\n0 k0 2 is inconsistent. Let M be a\nw2-model of t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1). Let rj be a literal of r1. \u00b7 \u00b7 \u00b7 .rk1 . Assume M satisfies all decision literals (rj\u2032 ) \u2206 with j\u2032 \u2264 j. By the induction hypothesis, if j 6= k2 then M satisfies rj . It remains to prove that this is also true when j = k2. Assume M satisfies all the decision literals of r1. \u00b7 \u00b7 \u00b7 .rk2 . They include all the decision literals of r1. \u00b7 \u00b7 \u00b7 .rk2\u22121. Then M satisfies all the literals of r1. \u00b7 \u00b7 \u00b7 .rk2\u22121 by the induction hypothesis. We now show that M also satisfies rk2 .\nNone of the literals r0i+1 \u00b7 \u00b7 \u00b7 r 0 k0 2 is a decision literal. Additionally, r1. \u00b7 \u00b7 \u00b7 .rk2 =\nr01 . \u00b7 \u00b7 \u00b7 .r 0 i\u22121.r 0 i . Since M satisfies all the literals of r1. \u00b7 \u00b7 \u00b7 .rk2\u22121, it satisfies all the literals of r01 . \u00b7 \u00b7 \u00b7 .r 0 i\u22121. Since r 0 1 . \u00b7 \u00b7 \u00b7 .r\n0 k0 2 is inconsistent, M cannot satisfy all of its\nliterals, so M does not satisfy at least one literal of r0i \u00b7 \u00b7 \u00b7 r 0 k0 2 . By the contraposition of the induction hypothesis (a), and since none of the literals r0i+1 \u00b7 \u00b7 \u00b7 r 0 k0 2 is a decision literal, one of the literals not satisfied by M has to be r0i . So M must satisfy r 0 i , that is rk2 .\nCase DecideR. Obvious.\nCase PropagateR. Let M be a w2-model of t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1). Assume M satisfies all the decision literals of r1. \u00b7 \u00b7 \u00b7 .rk2 . Since for any propagator condition rk2 is not a decision literal, they are the decision literals of r1. \u00b7 \u00b7 \u00b7 .rk2\u22121. So M satisfies all the literals of r1. \u00b7 \u00b7 \u00b7 .rk2\u22121 by the induction hypothesis. In other words {r1. \u00b7 \u00b7 \u00b7 .rk2\u22121} \u2286 M . Proving that M satisfies rk2 will complete the proof. We are given that Pt is w2-enforcing and hence w2-sound. By definition of w2-soundness and the fact that {r1. \u00b7 \u00b7 \u00b7 .rk2\u22121} \u2286 M , it follows that Pt(\u03a0 , {r1. \u00b7 \u00b7 \u00b7 .rk2\u22121}) \u2286 M . Since rk2 \u2208 Pt(\u03a0 , {r1. \u00b7 \u00b7 \u00b7 .rk2\u22121}), also rk2 \u2208 M . In other words, M satisfies rk2 .\nWe are left to illustrate that transition rulesBacktrackRL, BacktrackL,DecideL, PropagateL preserve properties (a) and (b). Since all of these rules are such that the right side of the resulting state is \u2205, clearly (a) is preserved. We will only illustrate that BacktrackRL preserves (b) as the remaining cases for (b) are similar to the arguments constructed above for the respective right rules and property (a).\nCase BacktrackRL. There is an index i such that l1. \u00b7 \u00b7 \u00b7 .lk1\u22121 = r 0 1 . \u00b7 \u00b7 \u00b7 .r 0 i\u22121\nand l01. \u00b7 \u00b7 \u00b7 .l 0 k0 1 = l01. \u00b7 \u00b7 \u00b7 .l 0 i\u22121.(l 0 i ) \u2206.l0i+1. \u00b7 \u00b7 \u00b7 .l 0 k0 1 . Let M be a w1-model of g(\u03a0 ) such that t(\u03a0 ,M) has no w2-model. Assume that M satisfies all the decision literals of l1. \u00b7 \u00b7 \u00b7 .lk1 . Since lk1 is not a decision literal, they are the decision literals of l1. \u00b7 \u00b7 \u00b7 .lk1\u22121. So M satisfies all the literals of l1. \u00b7 \u00b7 \u00b7 .lk1\u22121 by the induction hypothesis. Showing that M satisfies lk1 will complete the proof.\nSince the transition is justified by BacktrackRL, by Proposition 6 (c), l 0 1. \u00b7 \u00b7 \u00b7 .l 0 k0 1 is a w1-model of g(\u03a0 ). By Proposition 6 (d) and the fact that no right-rule applies, r01 . \u00b7 \u00b7 \u00b7 .r 0 k0 2 is a w2-model of t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1). So t(\u03a0 , l1. \u00b7 \u00b7 \u00b7 .lk1) has a w2-model, henceM does not satisfy all the literals of l01. \u00b7 \u00b7 \u00b7 .l 0 k0 1 . Consequently, sinceM satisfies all the literals of l1. \u00b7 \u00b7 \u00b7 .lk1\u22121, at least one literal from (li 0)\u2206.l0i+1. \u00b7 \u00b7 \u00b7 .l\n0 k0 1 is not\nsatisfied by M , which by the contraposition of the induction hypothesis (b) proves that l0i = lk1 is not satisfied by M . This means that M satisfies lk1 .\nLemma 6\nLet w1 and w2 be some types in {cla, sup, sta}.\nLet Pg be a w1-enforcing set of p-conditions. Let g be a generating function. Let Pt be a w2-enforcing set of p-conditions. Let t be a witness function. Let \u03a0 be a program. Then:\n1. any terminal state of STT Pg,g Pt,t (\u03a0 ) reachable from the initial state and other\nthan Failstate is Ok(L), with L being a w1-model of g(\u03a0 ) such that t(\u03a0 , L) has no w2-model, 2. Failstate is reachable from the initial state iff g(\u03a0 ) has no w1-model L such\nthat t(\u03a0 , L) has no w2-model."}, {"heading": "Proof", "text": "We first illustrate that any terminal state is either Failstate or of the form Ok(L) for some L. By contradiction. Assume there is a terminal state of the form (L,R)s. Case 1. s = L. Then either a left rule or CrossLR applies, so (L,R)s is not terminal. We derive a contradiction. Case 2. s = R. Since ConcludeRL does not apply while\nno right-rule applies and no left-rule applies, L contains at least one decision literal. Since BacktrackRL is not applicable, L contains no decision literal. We derive a contradiction.\nStatement 1. Let Ok(L) be a terminal state reachable from the initial state. As it is different from the initial state there is a transition leading to it. This transition can only be ConcludeR. Let us call (L,R)s a state from which a transition ConcludeR leads to Ok(L). By the definition of ConcludeR, we know that: s = R, that R is inconsistent and that R contains no decision literal. By Lemma 5 item (c), the consistent set of literals obtained from L is a w1-model of g(\u03a0 ).\nBy Lemma 5 item (a), and as R contains no decision literal, any w2-model of t(\u03a0 , L) satisfies all the literals of R. Since R is inconsistent, any w2-model of t(\u03a0 , L) is inconsistent. So t(\u03a0 , L) has no w2-model.\nWe have just proved that L is a w1-model of g(\u03a0 ) such that t(\u03a0 , L) has no\nw2-model.\nStatement 2. Assume Failstate is not reachable from the initial state. Then, since the graph is acyclic, there is a terminal state different from Failstate. By Claim 1, this state is Ok(L), and L is a w1-model of g(\u03a0 ) such that t(\u03a0 , L) has no w2-model.\nAssume Failstate is reachable from the initial state. As it is different from the initial state there is a transition leading to it. This transition can only be ConcludeL or ConcludeRL. Let us call (L,R)s a state from which a transition leads to Failstate. In either of these cases, L does not contain any decision literal; so by Lemma 5, any w1-model M of g(\u03a0 ) such that t(\u03a0 ,M) has no w2-model satisfies all the literals of L. In other words, L is the only possible candidate for a w1-model of g(\u03a0 ) such that t(\u03a0 , L) has no w2-model.\nCase ConcludeL. It follows that L is inconsistent. Consequently, it is not a w1-\nmodel M of g(\u03a0 ) such that t(\u03a0 , L) has no w2-model.\nCase ConcludeRL. By Proposition 5 (d), the set of literals R is a w2-model of\nt(\u03a0 , L). Thus L is not a w1-model of g(\u03a0 ) such that t(\u03a0 , L) has no w2-model."}, {"heading": "Proof of Proposition 4", "text": "We first illustrate that any set M of literals that is a w1-model of g(\u03a0 ) such that t(\u03a0 ,M) has no w2-model is such that M|atoms(\u03a0 ) is a stable model of \u03a0 . Indeed, by the definition of w1-approximating functions w.r.t. w, M|atoms(\u03a0 ) is a w-model of \u03a0 . Also, by the definition of w2-ensuring functions w.r.t. w, M|atoms(\u03a0 ) is a stable model of \u03a0 .\nSecond, consider any stable model L of \u03a0 . By the definitions of w1-approximating and w2-ensuring functions w.r.t. w, it follows there isM \u2032 such that M \u2032|atoms(\u03a0 ) = L and M \u2032 is a w1-model of g(\u03a0 ) such that t(\u03a0 ,M \u2032) has no w2-model."}, {"heading": "Proof of Theorem 4", "text": "Let w1 denote a type such that Pg is w1-enforcing and the function g is w1approximating w.r.t. w. Let w2 denote a type such that Pt is w2-enforcing and function t is w2-ensuring w.r.t. w. We now proceed to prove the four conditions of the definition of \u2018checks\u2019 one by one.\n1. By Lemma 4, the graph STT Pg,g Pt,t (\u03a0 ) is acyclic and finite. 2. By Lemma 6 item 1, any terminal state is either Failstate or Ok(L). 3. By Lemma 6 item 1, any terminal state of STT Pg,g Pt,t (\u03a0 ) reachable from the\ninitial state and other than Failstate is Ok(L), with L being a w1-model of g(\u03a0 ) such that t(\u03a0 , L) has no w2-model. By Proposition 4, L|atoms(\u03a0 ) is a stable model of \u03a0 . 4. By Lemma 6 item 2, Failstate is reachable from the initial state iff g(\u03a0 ) has\nno w1-model L such that t(\u03a0 , L) has no w2-model. By Proposition 4, \u03a0 has no stable models."}, {"heading": "Proof of Proposition 2", "text": "Recall how we argued DP 2\u03a0 is STT up,gC up,tC (\u03a0 ). Similarly, DP 2g,t(\u03a0 ) is STT up,g up,t (\u03a0 ). By Theorem 2, up is cla-enforcing.\n1. By Lemma 4, DP 2g,t(\u03a0 ) is finite and acyclic. 2. By Lemma 6 item 1, any terminal state is either Failstate or Ok(L). 3. By Lemma 6 item 1, any terminal state of STT Pg,g Pt,t (\u03a0 ) reachable from the\ninitial state and other than Failstate is Ok(L), with L being a cla-model of g(\u03a0 ) such that t(\u03a0 , L) has no cla-model. 4. By Lemma 6 item 2, Failstate is reachable from the initial state iff g(\u03a0 ) has\nno cla-model L such that t(\u03a0 , L) has no cla-model."}, {"heading": "6.3 Proof of Theorem 5", "text": "First we prove an auxiliary lemma that will help handling CNF conversions of DNF formulas.\nFor a DNF formula F , we define CNF (F ) as the conversion of F to CNF using straightforward equivalent transformations: the distributivity of disjunction over conjunction.\nLemma 7\nLet F be a DNF formula. Let l be a literal of F . Let M be a set of literals.\nThe two following statements are equivalent:\n1. there is a conjunctive clause D of F such that for every conjunctive clause\nD\u2032 \u2208 F different from D, D\u2032 is contradicted by M ,\n2. there is a clause C of CNF (F ) such that l \u2208 C and M contradicts C \\ {l}."}, {"heading": "Proof", "text": "Formula F has the form \u2228n\ni=1 \u2227k j=1 lij (when necessary the true constant \u22a4 is added\nmultiple times to ensure that the conjunctive clauses of F are of equal length). Also CNF (F ) = \u2227 (k1...kn)\u2208{1...k}n \u2228n i=1 liki .\nFrom Statement 1 to Statement 2: Assume that there is a conjunctive clause D of F such that for any other conjunctive clause D\u2032 of F , this clause is contradicted by M . Let l be a literal of D. Let D be \u2227k\nj=1 li0j for some i0. As any other con-\njunctive clause is contradicted by M , and as these clauses are conjunctions, there is least one literal of each of these clauses that is contradicted by M . Let us call r1 . . . ri0\u22121ri0+1 . . . rn these literals. Then for each i \u2208 {1, . . . , i0 \u2212 1, i0 + 1, . . . , n}, there is k0i \u2208 {1, . . . k} such that li,k0i = ri. Also, there is some k 0 i0 such that li,k0\ni0\n= l.\nThen the clause \u2228n\ni=1 lik0i of CNF (F ) contains l while each of the other literals it\ncontains is contradicted by M .\nFrom Statement 2 to Statement 1: Assume that for some clause of CNF (F ), all\nliterals but one are known to be contradicted byM . Then let this clause be \u2228n\ni=1 liki for some i and let li0ki0 be the literal that is not contradicted by M . Then liki is contradicted by M for any i other than i0. So \u2227k j=1 lij is contradicted by M for any i other than i0. So D = \u2227k j=1 li0j is a conjunctive clause of F such that for any other conjunctive clause D\u2032 of F , this clause is contradicted by M ."}, {"heading": "Proof of Theorem 5", "text": "We must prove that for any edge in the graph STT sd,g D\nPt,t (\u03a0 ) there is an edge in\nSTT up,cnfcomp Pt,t (\u03a0 ) linking two identical vertexes, and for any edge in the graph STT up,cnfcomp Pt,t (\u03a0 ) there is an edge in STT sd,g D Pt,t (\u03a0 ) linking two identical vertexes.\nIf the edge is justified by a right-rule then this is obvious as these two graphs have the same witness function and the same set of conditions for the PropagateR rule. If the edge is DecideL, ConcludeL, BacktrackL, BacktrackRL or ConcludeRL then obviously there is the same edge in the other graph, bearing the same name, as these edges do not depend on the generating program or set of conditions for the PropagateR rule.\nIt remains to study the case of an edge justified by PropagateL or CrossLR. Assume we also have proved that PropagateL rules are identical in both graphs. Then if an edge is justified by CrossLR in one of the graphs, which means that no left-rule applies in this graph, equivalently no left-rule applies in the other graph, and CrossLR also applies in that graph. We now show that PropagateL rules are identical in both graphs, which will complete the proof.\nAssume that an edge is justified by PropagateL in one of the graphs, let us prove\nit also exists in the other graph.\nA transition in STT sd,g D\nPt,t (\u03a0 ) is justified by PropagateL with UnitPropagate as\ncondition. Then also there is an edge in STT up,cnfcompPt,t (\u03a0 ) with the same effect, and justified by PropagateL with the UnitPropagate condition. Indeed, \u03a0 is part of cnfcomp(\u03a0 ).\nA transition in STT sd,g D\nPt,t (\u03a0 ) is justified by PropagateL with AllRulesCancelled\nas condition. Then the edge is turning (L, \u2205)L into (L\u00aca, \u2205)L, and each rule A \u2228 a \u2190 B \u2208 \u03a0 is not a supporting rule for a w.r.t. L. In other words, for each rule A\u2228a \u2190 B \u2208 \u03a0 the following holds L\u2229 (B \u222aA) 6= \u2205. Consequently, the conjunction B\u2227A is contradicted by L. As a consequence \u2228\nA\u2228a\u2190B\u2208\u03a0 (B\u2227A) is contradicted by\nL. From Lemma 7, the fact that the DNF formula \u00aca\u2228 \u2228\nA\u2228a\u2190B\u2208\u03a0 (B\u2227A) belongs\nto comp(\u03a0 ), and the cnfcomp construction, it follows that there is a clause C in cnfcomp(\u03a0 ) such that \u00aca \u2208 C and L contradicts C \\ {\u00aca}. So the rule PropagateL with condition UnitPropagate of STT up,cnfcompPt,t (\u03a0 ) can be applied to C to add \u00aca, providing the edge we needed.\nA transition in STT sd,g D\nPt,t (\u03a0 ) is justified by PropagateL with BackchainT rue as\ncondition. The proof of this case is similar to the proof of previous case.\nA transition in STT up,cnfcompPt,t (\u03a0 ) is justified by PropagateL with the condition\nUnitPropagate. Let us call F0 the DNF formula \u00aca\u2228 \u2228 A\u2228a\u2190B\u2208\u03a0 (B\u2227A) of comp(\u03a0 ) for some atom a in \u03a0 .\nCase 1: UnitL is applied to a clause of \u03a0 in cnfcomp(\u03a0 ). Then PropagateL with\nthe condition UnitPropagate itself provides the desired edge in STT sd,g D\nPt,t (\u03a0 ).\nCase 2: UnitL is applied to a clause obtained from F0 by the cnfcomp conversion. Then by Lemma 7, the cnfcomp construction, and the UnitL condition there is a conjunctive clause D of F0 such that for every conjunctive clause D \u2032 in F0 that is different from D the current L contradicts D\u2032.\nCase 2.1: This conjunctive clause is \u00aca. Then L contradicts \u2228\nA\u2228a\u2190B\u2208\u03a0 (B\u2227A).\nIt is easy to see that AllRulesCancelled provides the desired edge.\nCase 2.2: This conjunctive clause is some B \u2227 A. Then L contradicts \u00aca so a belongs to L. Also L contradicts all of {B\u2032 \u2227 A\u2032|A\u2032 \u2228 a \u2190 B\u2032 \u2208 \u03a0 \\ {A \u2228 a \u2190 B}}. As a consequence BackchainT rue provides the desired edge."}, {"heading": "7 Conclusions, Future and Related Work", "text": "Transition systems for describing dpll-based solving procedures have been introduced by Nieuwenhuis et al. (2006). Lierler (2008) introduced and compared the transition systems for the answer set solvers smodels and cmodels for nondisjunctive programs. In this paper, we continue this direction of work by presenting a two-layer framework suitable to capture disjunctive answer set solvers. We argue that this framework allows simpler analysis and comparison of these systems. We first introduce a general template that includes the techniques implemented in such solvers, and then define specific solvers by instantiating appropriate techniques using this template. Formal results about the correctness of the abstract representations are given. We believe that this work is a stepping stone towards clear, comprehensive articulation of main design features of current disjunctive answer set solvers that will inspire new solving algorithms. Section 5 hints at some of\nthe possibilities. Indeed, to obtain a new solver one can combine any appropriately chosen approximating-pair and ensuring-pair.\nNieuwenhuis et al. (2006) considered another extension of the graphs by introducing transition rules that capture backjumping and learning techniques common in design of modern solvers, that later allowed Lierler (2011) to design, e.g., abstract clasp. It is a direction of future work to extend the two-layer template graph to model such advances solving techniques. This extension will allow us to model disjunctive answer set solvers that rely heavily on backjumping and learning such as clasp and wasp.\nRelated work. The approach based on transition systems for describing and comparing ASP procedures is one of the three main alternatives studied in the ASP literature. Other methods include pseudo-code presentation of algorithms (Giunchiglia and Maratea 2005; Giunchiglia et al. 2008) and tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013). Giunchiglia et al. (2008) presented pseudo-code descriptions of cmodels without backjumping and learning, smodels and dlv without backjumping restricted to non-disjunctive programs. They study relationships to the solving algorithms by analyzing the correspondence about the search spaces they explore, focusing on tight programs: in particular, they note a tight relation between solvers cmodels and dlv. Gebser and Schaub (2013) considered formal proof systems based on tableau methods for characterizing the operations and the strategies of ASP procedures for disjunctive programs. These proof systems also allow cardinality constraints in the language of logic programs."}], "references": [{"title": "WASP: A native ASP solver based on constraint learning", "author": ["M. Alviano", "C. Dodaro", "W. Faber", "N. Leone", "F. Ricca"], "venue": "Proceedings of the 12th International Conference of Logic Programming and Nonmonotonic Reasoning (LPNMR 2013), P. Cabalar and T. C. Son, Eds. Lecture Notes in Computer Science, vol. 8148. Springer, 54\u201366.", "citeRegEx": "Alviano et al\\.,? 2013", "shortCiteRegEx": "Alviano et al\\.", "year": 2013}, {"title": "Knowledge Representation, Reasoning and Declarative Problem Solving", "author": ["C. Baral"], "venue": "Cambridge University Press.", "citeRegEx": "Baral,? 2003", "shortCiteRegEx": "Baral", "year": 2003}, {"title": "Abstract disjunctive answer set solvers", "author": ["R. Brochenin", "Y. Lierler", "M. Maratea"], "venue": "Proceedings of the 21st European Conference on Artificial Intelligence (ECAI 2014). Frontiers in Artificial Intelligence and Applications, vol. 263. IOS Press, 165\u2013170.", "citeRegEx": "Brochenin et al\\.,? 2014", "shortCiteRegEx": "Brochenin et al\\.", "year": 2014}, {"title": "Inferring phylogenetic trees using answer set programming", "author": ["D.R. Brooks", "E. Erdem", "S.T. Erdo\u011fan", "J.W. Minett", "D. Ringe"], "venue": "Journal of Automated Reasoning 39, 471\u2013511.", "citeRegEx": "Brooks et al\\.,? 2007", "shortCiteRegEx": "Brooks et al\\.", "year": 2007}, {"title": "A machine program for theorem proving", "author": ["M. Davis", "G. Logemann", "D. Loveland"], "venue": "Communications of the ACM 5(7), 394\u2013397.", "citeRegEx": "Davis et al\\.,? 1962", "shortCiteRegEx": "Davis et al\\.", "year": 1962}, {"title": "Complexity results for disjunctive logic programming and application to nonmonotonic logics", "author": ["T. Eiter", "G. Gottlob"], "venue": "Proceedings of the 1993 International Logic Programming Symposium (ILPS), D. Miller, Ed. 266\u2013278.", "citeRegEx": "Eiter and Gottlob,? 1993", "shortCiteRegEx": "Eiter and Gottlob", "year": 1993}, {"title": "Disjunctive Datalog", "author": ["T. Eiter", "G. Gottlob", "H. Mannila"], "venue": "ACM Transactions on Database Systems 22, 3 (Sept.), 364\u2013418.", "citeRegEx": "Eiter et al\\.,? 1997", "shortCiteRegEx": "Eiter et al\\.", "year": 1997}, {"title": "Enhancing efficiency and expressiveness in answer set programming systems", "author": ["W. Faber"], "venue": "Ph.D. thesis, Ph.D. dissertation, Vienna University of Technology.", "citeRegEx": "Faber,? 2002", "shortCiteRegEx": "Faber", "year": 2002}, {"title": "Advanced conflict-driven disjunctive answer set solving", "author": ["M. Gebser", "B. Kaufmann", "T. Schaub"], "venue": "Proceedings of the 23rd International Joint Conference on Artificial Intelligence (IJCAI 2013), F. Rossi, Ed. IJCAI/AAAI.", "citeRegEx": "Gebser et al\\.,? 2013", "shortCiteRegEx": "Gebser et al\\.", "year": 2013}, {"title": "Tableau calculi for answer set programming", "author": ["M. Gebser", "T. Schaub"], "venue": "Proceedings of the 22nd International Conference on Logic Programming (ICLP 2006), S. Etalle and M. Truszczynski, Eds. Lecture Notes in Computer Science, vol. 4079. Springer, 11\u201325.", "citeRegEx": "Gebser and Schaub,? 2006", "shortCiteRegEx": "Gebser and Schaub", "year": 2006}, {"title": "Tableau calculi for logic programs under answer set semantics", "author": ["M. Gebser", "T. Schaub"], "venue": "ACM Transaction on Computational Logic 14, 2, 15.", "citeRegEx": "Gebser and Schaub,? 2013", "shortCiteRegEx": "Gebser and Schaub", "year": 2013}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Proceedings of the 5th International Conference and Symposium on Logic Programming (ICLP/SLP 1988), R. Kowalski and K. Bowen, Eds. MIT Press, 1070\u2013 1080.", "citeRegEx": "Gelfond and Lifschitz,? 1988", "shortCiteRegEx": "Gelfond and Lifschitz", "year": 1988}, {"title": "Classical negation in logic programs and disjunctive databases", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "New Generation Computing 9, 365\u2013385.", "citeRegEx": "Gelfond and Lifschitz,? 1991", "shortCiteRegEx": "Gelfond and Lifschitz", "year": 1991}, {"title": "On the relation among answer set solvers", "author": ["E. Giunchiglia", "N. Leone", "M. Maratea"], "venue": "Annals of Mathematics and Artificial Intelligence 53, 1-4, 169\u2013204.", "citeRegEx": "Giunchiglia et al\\.,? 2008", "shortCiteRegEx": "Giunchiglia et al\\.", "year": 2008}, {"title": "On the relation between answer set and SAT procedures (or, between smodels and cmodels)", "author": ["E. Giunchiglia", "M. Maratea"], "venue": "Proceedings of the 21st International Conference on Logic Programming (ICLP 2005), M. Gabbrielli and G. Gupta, Eds. Lecture Notes in Computer Science, vol. 3668. Springer, 37\u201351.", "citeRegEx": "Giunchiglia and Maratea,? 2005", "shortCiteRegEx": "Giunchiglia and Maratea", "year": 2005}, {"title": "Unfolding partiality and disjunctions in stable model semantics", "author": ["T. Janhunen", "I. Niemel\u00e4", "D. Seipel", "P. Simons", "You", "J.-H."], "venue": "ACM Transactions on Computunational Logic 7, 1, 1\u201337.", "citeRegEx": "Janhunen et al\\.,? 2006", "shortCiteRegEx": "Janhunen et al\\.", "year": 2006}, {"title": "Enhancing disjunctive logic programming systems by sat checkers", "author": ["C. Koch", "N. Leone", "G. Pfeifer"], "venue": "Artificial Intelligence 151, 1-2, 177\u2013212.", "citeRegEx": "Koch et al\\.,? 2003", "shortCiteRegEx": "Koch et al\\.", "year": 2003}, {"title": "The DLV system for knowledge representation and reasoning", "author": ["N. Leone", "W. Faber", "G. Pfeifer", "T. Eiter", "G. Gottlob", "S. Perri", "F. Scarcello"], "venue": "ACM Transactions on Computational Logic 7, 3, 499\u2013562.", "citeRegEx": "Leone et al\\.,? 2006", "shortCiteRegEx": "Leone et al\\.", "year": 2006}, {"title": "Disjunctive stable models: Unfounded sets, fixpoint semantics, and computation", "author": ["N. Leone", "P. Rullo", "F. Scarcello"], "venue": "Information and Computation 135(2), 69\u2013 112.", "citeRegEx": "Leone et al\\.,? 1997", "shortCiteRegEx": "Leone et al\\.", "year": 1997}, {"title": "Cmodels: SAT-based disjunctive answer set solver", "author": ["Y. Lierler"], "venue": "Proceedings of the 8th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2005), C. Baral, G. Greco, N. Leone, and G. Terracina, Eds. Lecture Notes in Computer Science, vol. 3662. Springer, 447\u2013452.", "citeRegEx": "Lierler,? 2005", "shortCiteRegEx": "Lierler", "year": 2005}, {"title": "Abstract answer set solvers", "author": ["Y. Lierler"], "venue": "Proceedings of the 24th International Conference on Logic Programming (ICLP 2008), M. G. de la Banda and E. Pontelli, Eds. Lecture Notes in Computer Science, vol. 5366. Springer, 377\u2013391.", "citeRegEx": "Lierler,? 2008", "shortCiteRegEx": "Lierler", "year": 2008}, {"title": "SAT-based answer set programming", "author": ["Y. Lierler"], "venue": "Ph.D. thesis, University of Texas at Austin.", "citeRegEx": "Lierler,? 2010", "shortCiteRegEx": "Lierler", "year": 2010}, {"title": "Abstract answer set solvers with backjumping and learning", "author": ["Y. Lierler"], "venue": "Theory and Practice of Logic Programming 11, 135\u2013169.", "citeRegEx": "Lierler,? 2011", "shortCiteRegEx": "Lierler", "year": 2011}, {"title": "Transition systems for model generators - a unifying approach", "author": ["Y. Lierler", "M. Truszczynski"], "venue": "Theory and Practice of Logic Programming 11, 4-5, 629\u2013646.", "citeRegEx": "Lierler and Truszczynski,? 2011", "shortCiteRegEx": "Lierler and Truszczynski", "year": 2011}, {"title": "Answer Set Planning", "author": ["V. Lifschitz"], "venue": "Proceedings of the 16th International Conference on Logic Programming (ICLP 1999), D. D. Schreye, Ed. The MIT Press, Las Cruces, New Mexico, USA, 23\u201337.", "citeRegEx": "Lifschitz,? 1999", "shortCiteRegEx": "Lifschitz", "year": 1999}, {"title": "Stable models and an alternative logic programming paradigm", "author": ["V. Marek", "M. Truszczy\u0144ski"], "venue": "The Logic Programming Paradigm: a 25-Year Perspective. Springer Verlag, 375\u2013398.", "citeRegEx": "Marek and Truszczy\u0144ski,? 1999", "shortCiteRegEx": "Marek and Truszczy\u0144ski", "year": 1999}, {"title": "Logic programs with stable model semantics as a constraint programming paradigm", "author": ["I. Niemel\u00e4"], "venue": "Annals of Mathematics and Artificial Intelligence 25, 241\u2013273.", "citeRegEx": "Niemel\u00e4,? 1999", "shortCiteRegEx": "Niemel\u00e4", "year": 1999}, {"title": "Solving SAT and SAT modulo theories: From an abstract Davis-Putnam-Logemann-Loveland procedure to DPLL(T)", "author": ["R. Nieuwenhuis", "A. Oliveras", "C. Tinelli"], "venue": "Journal of the ACM 53(6), 937\u2013977.", "citeRegEx": "Nieuwenhuis et al\\.,? 2006", "shortCiteRegEx": "Nieuwenhuis et al\\.", "year": 2006}, {"title": "Enhancing DLV instantiator by backjumping techniques", "author": ["S. Perri", "F. Scarcello", "G. Catalano", "N. Leone"], "venue": "Annals of Mathematics and Artificial Intelligence 51, 2-4, 195\u2013228.", "citeRegEx": "Perri et al\\.,? 2007", "shortCiteRegEx": "Perri et al\\.", "year": 2007}, {"title": "Team-building with answer set programming in the gioia-tauro seaport", "author": ["F. Ricca", "G. Grasso", "M. Alviano", "M. Manna", "V. Lio", "S. Iiritano", "N. Leone"], "venue": "Theory and Practice of Logic Programming 12, 3, 361\u2013381.", "citeRegEx": "Ricca et al\\.,? 2012", "shortCiteRegEx": "Ricca et al\\.", "year": 2012}, {"title": "Extending and implementing the stable model semantics", "author": ["P. Simons", "I. Niemel\u00e4", "T. Soininen"], "venue": "Artificial Intelligence 138, 181\u2013234.", "citeRegEx": "Simons et al\\.,? 2002", "shortCiteRegEx": "Simons et al\\.", "year": 2002}, {"title": "Developing a Declarative Rule Language for Applications in Product Configuration", "author": ["T. Soininen", "I. Niemel\u00e4"], "venue": "Proceedings of the 1st International Workshop on Practical Aspects of Declarative Languages (PADL 1999), G. Gupta, Ed. Lecture Notes in Computer Science, vol. 1551. Springer, 305\u2013319.", "citeRegEx": "Soininen and Niemel\u00e4,? 1999", "shortCiteRegEx": "Soininen and Niemel\u00e4", "year": 1999}, {"title": "Omega-restricted logic programs", "author": ["T. Syrj\u00e4nen"], "venue": "Proceedings of the 6th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2001), T. Eiter, W. Faber, and M. Truszczynski, Eds. Lecture Notes in Computer Science, vol. 2173. Springer, 267\u2013279.", "citeRegEx": "Syrj\u00e4nen,? 2001", "shortCiteRegEx": "Syrj\u00e4nen", "year": 2001}], "referenceMentions": [{"referenceID": 25, "context": "Answer set programming (Marek and Truszczy\u0144ski 1999; Niemel\u00e4 1999; Baral 2003; Eiter et al. 1997; Gelfond and Lifschitz 1988; Gelfond and Lifschitz 1991) is a declarative programming paradigm oriented towards difficult combinatorial search problems.", "startOffset": 23, "endOffset": 153}, {"referenceID": 26, "context": "Answer set programming (Marek and Truszczy\u0144ski 1999; Niemel\u00e4 1999; Baral 2003; Eiter et al. 1997; Gelfond and Lifschitz 1988; Gelfond and Lifschitz 1991) is a declarative programming paradigm oriented towards difficult combinatorial search problems.", "startOffset": 23, "endOffset": 153}, {"referenceID": 1, "context": "Answer set programming (Marek and Truszczy\u0144ski 1999; Niemel\u00e4 1999; Baral 2003; Eiter et al. 1997; Gelfond and Lifschitz 1988; Gelfond and Lifschitz 1991) is a declarative programming paradigm oriented towards difficult combinatorial search problems.", "startOffset": 23, "endOffset": 153}, {"referenceID": 6, "context": "Answer set programming (Marek and Truszczy\u0144ski 1999; Niemel\u00e4 1999; Baral 2003; Eiter et al. 1997; Gelfond and Lifschitz 1988; Gelfond and Lifschitz 1991) is a declarative programming paradigm oriented towards difficult combinatorial search problems.", "startOffset": 23, "endOffset": 153}, {"referenceID": 11, "context": "Answer set programming (Marek and Truszczy\u0144ski 1999; Niemel\u00e4 1999; Baral 2003; Eiter et al. 1997; Gelfond and Lifschitz 1988; Gelfond and Lifschitz 1991) is a declarative programming paradigm oriented towards difficult combinatorial search problems.", "startOffset": 23, "endOffset": 153}, {"referenceID": 12, "context": "Answer set programming (Marek and Truszczy\u0144ski 1999; Niemel\u00e4 1999; Baral 2003; Eiter et al. 1997; Gelfond and Lifschitz 1988; Gelfond and Lifschitz 1991) is a declarative programming paradigm oriented towards difficult combinatorial search problems.", "startOffset": 23, "endOffset": 153}, {"referenceID": 3, "context": "ASP has been applied to solve problems in various areas of science and technology including graph-theoretic problems arising in zoology and linguistics (Brooks et al. 2007), team building problems in container terminal (Ricca et al.", "startOffset": 152, "endOffset": 172}, {"referenceID": 29, "context": "2007), team building problems in container terminal (Ricca et al. 2012), and product configuration tasks (Soininen and Niemel\u00e4 1999).", "startOffset": 52, "endOffset": 71}, {"referenceID": 31, "context": "2012), and product configuration tasks (Soininen and Niemel\u00e4 1999).", "startOffset": 39, "endOffset": 66}, {"referenceID": 12, "context": "Gelfond and Lifschitz introduced logic programs with disjunctive rules (Gelfond and Lifschitz 1991).", "startOffset": 71, "endOffset": 99}, {"referenceID": 5, "context": "The problem of deciding whether a disjunctive program has a stable model is \u03a32 -complete (Eiter and Gottlob 1993).", "startOffset": 89, "endOffset": 113}, {"referenceID": 17, "context": "Only five answer set systems can solve disjunctive programs: dlv (Leone et al. 2006), gnt (Janhunen et al.", "startOffset": 65, "endOffset": 84}, {"referenceID": 15, "context": "2006), gnt (Janhunen et al. 2006), cmodels (Lierler 2005), clasp (Gebser et al.", "startOffset": 11, "endOffset": 33}, {"referenceID": 19, "context": "2006), cmodels (Lierler 2005), clasp (Gebser et al.", "startOffset": 15, "endOffset": 29}, {"referenceID": 8, "context": "2006), cmodels (Lierler 2005), clasp (Gebser et al. 2013) andwasp (Alviano et al.", "startOffset": 37, "endOffset": 57}, {"referenceID": 0, "context": "2013) andwasp (Alviano et al. 2013).", "startOffset": 14, "endOffset": 35}, {"referenceID": 14, "context": "These approaches range from a pseudocode representation of the procedures (Giunchiglia and Maratea 2005; Giunchiglia et al. 2008), to tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013), to abstract frameworks via transition systems (Lierler 2008; Lierler 2011; Lierler and Truszczynski 2011).", "startOffset": 74, "endOffset": 129}, {"referenceID": 13, "context": "These approaches range from a pseudocode representation of the procedures (Giunchiglia and Maratea 2005; Giunchiglia et al. 2008), to tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013), to abstract frameworks via transition systems (Lierler 2008; Lierler 2011; Lierler and Truszczynski 2011).", "startOffset": 74, "endOffset": 129}, {"referenceID": 9, "context": "2008), to tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013), to abstract frameworks via transition systems (Lierler 2008; Lierler 2011; Lierler and Truszczynski 2011).", "startOffset": 26, "endOffset": 74}, {"referenceID": 10, "context": "2008), to tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013), to abstract frameworks via transition systems (Lierler 2008; Lierler 2011; Lierler and Truszczynski 2011).", "startOffset": 26, "endOffset": 74}, {"referenceID": 20, "context": "2008), to tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013), to abstract frameworks via transition systems (Lierler 2008; Lierler 2011; Lierler and Truszczynski 2011).", "startOffset": 122, "endOffset": 181}, {"referenceID": 22, "context": "2008), to tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013), to abstract frameworks via transition systems (Lierler 2008; Lierler 2011; Lierler and Truszczynski 2011).", "startOffset": 122, "endOffset": 181}, {"referenceID": 23, "context": "2008), to tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013), to abstract frameworks via transition systems (Lierler 2008; Lierler 2011; Lierler and Truszczynski 2011).", "startOffset": 122, "endOffset": 181}, {"referenceID": 4, "context": "(2006), where authors propose to use transition systems to describe the Davis-Putnam-Logemann-Loveland (dpll) procedure (Davis et al. 1962).", "startOffset": 120, "endOffset": 139}, {"referenceID": 22, "context": "This approach has been adapted (Lierler 2011; Lierler and Truszczynski 2011) to describing answer set solvers for non-disjunctive programs including smodels, cmodels, and clasp.", "startOffset": 31, "endOffset": 76}, {"referenceID": 23, "context": "This approach has been adapted (Lierler 2011; Lierler and Truszczynski 2011) to describing answer set solvers for non-disjunctive programs including smodels, cmodels, and clasp.", "startOffset": 31, "endOffset": 76}, {"referenceID": 0, "context": "2013) andwasp (Alviano et al. 2013). Several formal approaches have been used to describe and compare search procedures implemented in answer set solvers. These approaches range from a pseudocode representation of the procedures (Giunchiglia and Maratea 2005; Giunchiglia et al. 2008), to tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013), to abstract frameworks via transition systems (Lierler 2008; Lierler 2011; Lierler and Truszczynski 2011). The latter method originates from the work by Nieuwenhuis et al. (2006), where authors propose to use transition systems to describe the Davis-Putnam-Logemann-Loveland (dpll) procedure (Davis et al.", "startOffset": 15, "endOffset": 534}, {"referenceID": 2, "context": "The current paper builds on the content presented by Brochenin et al. (2014). It enhances the earlier work by introducing notions of a graph template, \u201cpropagator conditions\u201d, and \u201capproximating pairs\u201c that allow to more uniformly account for major techniques implemented in disjunctive answer set solvers.", "startOffset": 53, "endOffset": 77}, {"referenceID": 32, "context": "Software systems called grounders (Syrj\u00e4nen 2001; Perri et al. 2007) are used to take a logic program with variables as its input and produce a propositional program as its output so that the resulting propositional program has the same answer sets as the input program.", "startOffset": 34, "endOffset": 68}, {"referenceID": 28, "context": "Software systems called grounders (Syrj\u00e4nen 2001; Perri et al. 2007) are used to take a logic program with variables as its input and produce a propositional program as its output so that the resulting propositional program has the same answer sets as the input program.", "startOffset": 34, "endOffset": 68}, {"referenceID": 18, "context": "For a program \u03a0 and a consistent set L of literals over atoms(\u03a0 ), a set X of atoms over atoms(\u03a0 ) is said to be unfounded (Leone et al. 1997) on L with respect to the program \u03a0 when for each atom a \u2208 X and each rule A \u2190 B \u2208 \u03a0 such that a \u2208 A, either of the following conditions hold", "startOffset": 123, "endOffset": 142}, {"referenceID": 17, "context": "6 from Leone et al. (1997) that relates the notions of unfounded set and stable model.", "startOffset": 7, "endOffset": 27}, {"referenceID": 4, "context": "The Davis\u2013Putnam\u2013Logemann\u2013Loveland (dpll) algorithm from Davis et al. (1962) is a well-known method that exhaustively explores sets of literals to generate classical models of a propositional formula.", "startOffset": 57, "endOffset": 77}, {"referenceID": 4, "context": "The Davis\u2013Putnam\u2013Logemann\u2013Loveland (dpll) algorithm from Davis et al. (1962) is a well-known method that exhaustively explores sets of literals to generate classical models of a propositional formula. Most satisfiability and non-disjunctive answer set solvers are based on variations of the dpll procedure that is a classical backtrack search-based algorithm. We now review the abstract transition system for dpll proposed by Nieuwenhuis et al. (2006), which is an alternative to common pseudo-code descriptions of backtrack search-based algorithms.", "startOffset": 57, "endOffset": 452}, {"referenceID": 27, "context": "13 in Nieuwenhuis et al. (2006).", "startOffset": 6, "endOffset": 32}, {"referenceID": 19, "context": "Lierler (2011) illustrated that extending DP\u03a0 by a transition rule", "startOffset": 0, "endOffset": 15}, {"referenceID": 23, "context": "Many answer set solvers for such programs can be seen as extensions of this procedure (Lierler and Truszczynski 2011).", "startOffset": 86, "endOffset": 117}, {"referenceID": 5, "context": "The problem of deciding whether a disjunctive program has a stable model is \u03a32 complete (Eiter and Gottlob 1993).", "startOffset": 88, "endOffset": 112}, {"referenceID": 19, "context": "We now relate the graph DP 2 g,t(\u03a0 ) to the procedure dp-assat-proc from Lierler (2005). This procedure forms the basis of the answer set solver cmodels.", "startOffset": 73, "endOffset": 88}, {"referenceID": 21, "context": "To be complete in our presentation, we now review the details of g and t functions (Lierler 2010).", "startOffset": 83, "endOffset": 97}, {"referenceID": 2, "context": "In Brochenin et al. (2014), transition systems exemplified by the graph DP 2 \u03a0 were used to capture several disjunctive solvers, namely, cmodels, gnt and dlv implementing backtracking.", "startOffset": 3, "endOffset": 27}, {"referenceID": 22, "context": "For instance, for a non-disjunctive program \u03a0 , the graph DPTsm,\u03a0 coincides with the graph sm\u03a0 (Lierler 2011) that captures computation of answer set solver smodels (Simons et al.", "startOffset": 95, "endOffset": 109}, {"referenceID": 30, "context": "For instance, for a non-disjunctive program \u03a0 , the graph DPTsm,\u03a0 coincides with the graph sm\u03a0 (Lierler 2011) that captures computation of answer set solver smodels (Simons et al. 2002).", "startOffset": 165, "endOffset": 185}, {"referenceID": 22, "context": "The graph DPTsd,\u03a0 coincides with the graph atleast\u03a0 (Lierler 2011) that provides a procedure for deciding whether a non-disjunctive program has supported models.", "startOffset": 52, "endOffset": 66}, {"referenceID": 15, "context": "Janhunen et al. (2006) define the generating function g and the witness function t used in gnt.", "startOffset": 0, "endOffset": 23}, {"referenceID": 15, "context": "The graph SM \u03a0 captures the gnt procedure by Janhunen et al. (2006) in a similar way as the graph DP 2 \u03a0 captures the cmodels procedure of dp-assat-proc in Section 3.", "startOffset": 45, "endOffset": 68}, {"referenceID": 15, "context": "The graph SM \u03a0 captures the gnt procedure by Janhunen et al. (2006) in a similar way as the graph DP 2 \u03a0 captures the cmodels procedure of dp-assat-proc in Section 3.2. Figure 7 presents an example of a path in a graph SM {a\u2190c;b\u2190c;c\u2190a,b;a\u2228b\u2190}. From the formal results by Janhunen et al. (2006) it immediately follows that g is sta-approximating with respect to cla and t is sta-ensuring with respect to cla.", "startOffset": 45, "endOffset": 294}, {"referenceID": 2, "context": "6 Corollary 1 corresponds to Theorem 5 in (Brochenin et al. 2014).", "startOffset": 42, "endOffset": 65}, {"referenceID": 7, "context": "t(\u03a0 ,M) = {(B \u2229M) \u2228 \u2228 A\u2032 \u2228 | A \u2190 B \u2208 \u03a0 + , B \u2286 M,A = A \u2229M}\u222a {(M|atoms(\u03a0 )) } (9) Following the results from Faber (2002) and Koch et al.", "startOffset": 108, "endOffset": 121}, {"referenceID": 7, "context": "t(\u03a0 ,M) = {(B \u2229M) \u2228 \u2228 A\u2032 \u2228 | A \u2190 B \u2208 \u03a0 + , B \u2286 M,A = A \u2229M}\u222a {(M|atoms(\u03a0 )) } (9) Following the results from Faber (2002) and Koch et al. (2003), the generating function g is sup-approximating with respect to cla while the witness function t is cla-ensuring with respect to cla.", "startOffset": 108, "endOffset": 144}, {"referenceID": 2, "context": "7 Corollary 2 corresponds to Theorem 6 in (Brochenin et al. 2014).", "startOffset": 42, "endOffset": 65}, {"referenceID": 7, "context": "This corollary is an alternative proof of correctness for the dlv algorithm previously stated by Faber (2002) and Koch et al.", "startOffset": 97, "endOffset": 110}, {"referenceID": 7, "context": "This corollary is an alternative proof of correctness for the dlv algorithm previously stated by Faber (2002) and Koch et al. (2003) in terms of pseudo-code.", "startOffset": 97, "endOffset": 133}, {"referenceID": 19, "context": "We now generalize Lemma 4 from Lierler (2008) to the case of disjunctive programs.", "startOffset": 31, "endOffset": 46}, {"referenceID": 23, "context": "Transition systems for describing dpll-based solving procedures have been introduced by Nieuwenhuis et al. (2006). Lierler (2008) introduced and compared the transition systems for the answer set solvers smodels and cmodels for nondisjunctive programs.", "startOffset": 88, "endOffset": 114}, {"referenceID": 19, "context": "Lierler (2008) introduced and compared the transition systems for the answer set solvers smodels and cmodels for nondisjunctive programs.", "startOffset": 0, "endOffset": 15}, {"referenceID": 23, "context": "Nieuwenhuis et al. (2006) considered another extension of the graphs by introducing transition rules that capture backjumping and learning techniques common in design of modern solvers, that later allowed Lierler (2011) to design, e.", "startOffset": 0, "endOffset": 26}, {"referenceID": 19, "context": "(2006) considered another extension of the graphs by introducing transition rules that capture backjumping and learning techniques common in design of modern solvers, that later allowed Lierler (2011) to design, e.", "startOffset": 186, "endOffset": 201}, {"referenceID": 14, "context": "Other methods include pseudo-code presentation of algorithms (Giunchiglia and Maratea 2005; Giunchiglia et al. 2008) and tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013).", "startOffset": 61, "endOffset": 116}, {"referenceID": 13, "context": "Other methods include pseudo-code presentation of algorithms (Giunchiglia and Maratea 2005; Giunchiglia et al. 2008) and tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013).", "startOffset": 61, "endOffset": 116}, {"referenceID": 9, "context": "2008) and tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013).", "startOffset": 26, "endOffset": 74}, {"referenceID": 10, "context": "2008) and tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013).", "startOffset": 26, "endOffset": 74}, {"referenceID": 9, "context": "2008) and tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013). Giunchiglia et al. (2008) presented pseudo-code descriptions of cmodels without backjumping and learning, smodels and dlv without backjumping restricted to non-disjunctive programs.", "startOffset": 27, "endOffset": 102}, {"referenceID": 9, "context": "2008) and tableau calculi (Gebser and Schaub 2006; Gebser and Schaub 2013). Giunchiglia et al. (2008) presented pseudo-code descriptions of cmodels without backjumping and learning, smodels and dlv without backjumping restricted to non-disjunctive programs. They study relationships to the solving algorithms by analyzing the correspondence about the search spaces they explore, focusing on tight programs: in particular, they note a tight relation between solvers cmodels and dlv. Gebser and Schaub (2013) considered formal proof systems based on tableau methods for characterizing the operations and the strategies of ASP procedures for disjunctive programs.", "startOffset": 27, "endOffset": 507}], "year": 2015, "abstractText": "Answer set programming is a declarative programming paradigm oriented towards difficult combinatorial search problems. A fundamental task in answer set programming is to compute stable models, i.e., solutions of logic programs. Answer set solvers are the programs that perform this task. The problem of deciding whether a disjunctive program has a stable model is \u03a32 -complete. The high complexity of reasoning within disjunctive logic programming is responsible for few solvers capable of dealing with such programs, namely dlv, gnt, cmodels, clasp and wasp. In this paper we show that transition systems introduced by Nieuwenhuis, Oliveras, and Tinelli to model and analyze satisfiability solvers can be adapted for disjunctive answer set solvers. Transition systems give a unifying perspective and bring clarity in the description and comparison of solvers. They can be effectively used for analyzing, comparing and proving correctness of search algorithms as well as inspiring new ideas in the design of disjunctive answer set solvers. In this light, we introduce a general template, which accounts for major techniques implemented in disjunctive solvers. We then illustrate how this general template captures solvers dlv, gnt, and cmodels. We also show how this framework provides a convenient tool for designing new solving algorithms by means of combinations of techniques employed in different solvers. To appear in Theory and Practice of Logic Programming (TPLP).", "creator": "dvips(k) 5.991 Copyright 2011 Radical Eye Software"}}}