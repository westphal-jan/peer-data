{"id": "1511.06018", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Nov-2015", "title": "Segmental Recurrent Neural Networks", "abstract": "we introduce segmental recurrent sequence neural networks ( srnns ) which define, given an input sequence, a joint probability distribution over neighboring segmentations of approximately the input and labelings of the segments. representations parameters of the input segments ( i. e., contiguous subsequences of the input ) are computed by firstly encoding their constituent tokens using bidirectional recurrent neural nets, packets and these \" segment embeddings \" are used to manually define group compatibility scores with output state labels. these local compatibility scores are integrated using a global semi - markov conditional random field. both fully supervised training - - in determining which segment boundaries and labels are observed - - as well as partially supervised training - - in which segment boundaries are latent - - are straightforward. experiments on handwriting recognition and joint chinese word segmentation / pos tagging show that, compared to models that don't explicitly represent segments such as bio tagging schemes and connectionist temporal classification ( ctc ), srnns obtain substantially higher accuracies.", "histories": [["v1", "Wed, 18 Nov 2015 23:02:45 GMT  (398kb,D)", "https://arxiv.org/abs/1511.06018v1", "9 pages"], ["v2", "Tue, 1 Mar 2016 22:46:37 GMT  (405kb,D)", "http://arxiv.org/abs/1511.06018v2", "10 pages, published as a conference paper at ICLR 2016"]], "COMMENTS": "9 pages", "reviews": [], "SUBJECTS": "cs.CL cs.LG", "authors": ["lingpeng kong", "chris dyer", "noah a smith"], "accepted": true, "id": "1511.06018"}, "pdf": {"name": "1511.06018.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["cdyer}@cs.cmu.edu", "nasmith@cs.washington.edu"], "sections": [{"heading": null, "text": "We introduce segmental recurrent neural networks (SRNNs) which define, given an input sequence, a joint probability distribution over segmentations of the input and labelings of the segments. Representations of the input segments (i.e., contiguous subsequences of the input) are computed by encoding their constituent tokens using bidirectional recurrent neural nets, and these \u201csegment embeddings\u201d are used to define compatibility scores with output labels. These local compatibility scores are integrated using a global semi-Markov conditional random field. Both fully supervised training\u2014in which segment boundaries and labels are observed\u2014as well as partially supervised training\u2014in which segment boundaries are latent\u2014are straightforward. Experiments on handwriting recognition and joint Chinese word segmentation/POS tagging show that, compared to models that do not explicitly represent segments such as BIO tagging schemes and connectionist temporal classification (CTC), SRNNs obtain substantially higher accuracies."}, {"heading": "1 INTRODUCTION", "text": "For sequential data like speech, handwriting, and DNA, segmentation and segment-labeling are abstractions that capture many common data analysis challenges. We consider the joint task of breaking an input sequence into contiguous, arbitrary-length segments while labeling each segment.\nOur new approach to this problem is the segmental recursive neural network (SRNN). SRNNs combine two powerful machine learning tools: representation learning and structured prediction. First, bidirectional recurrent neural networks (RNNs) embed every feasible segment of the input in a continuous space, and these embeddings are then used to calculate the compatibility of each candidate segment with a label. Unlike past RNN-based approaches (e.g., connectionist temporal classification or CTC; Graves et al., 2006) each candidate segment is represented explicitly, allowing application in settings where an alignment between segments and labels is desired as part of the output (e.g., protein secondary structure prediction or information extraction from text).\nAt the same time, SRNNs are a variant of semi-Markov conditional random fields (Sarawagi & Cohen, 2004), in that they define a conditional probability distribution over the output space (segmentation and labeling) given the input sequence (\u00a72). This allows explicit modeling of statistical dependencies, such as those between adjacent labels, and also of segment lengths (unlike widely used symbolic approaches based on \u201cBIO\u201d tagging; Ramshaw & Marcus, 1995). Because the probability score decomposes into chain-structured clique potentials, polynomial-time dynamic programming algorithms exist for prediction and parameter estimation (\u00a73).\nar X\niv :1\n51 1.\n06 01\n8v 2\n[ cs\n.C L\n] 1\nM ar\nParameters can be learned with either a fully supervised objective\u2014where both segment boundaries and segment labels are provided at training time\u2014and partially supervised training objectives\u2014 where segment boundaries are latent (\u00a74). We compare SRNNs to strong models that do not explicitly represent segments on handwriting recognition and joint word segmentation and part-of-speech tagging for Chinese text, showing significant accuracy improvements in both, demonstrating the value of models that explicitly model segmentation even when segmentation is not necessary for downstream tasks (\u00a75)."}, {"heading": "2 MODEL", "text": "Given a sequence of input observations x = \u3008x1,x2, . . . ,x|x|\u3009 with length |x|, a segmental recurrent neural network (SRNN) defines a joint distribution p(y, z | x) over a sequence of labeled segments each of which is characterized by a duration (zi \u2208 Z+) and label (yi \u2208 Y ). The segment durations constrained such that \u2211|z| i=1 zi = |x|. The length of the output sequence |y| = |z| is a random variable, and |y| \u2264 |x| with probability 1. We write the starting time of segment i as si = 1 + \u2211 j<i zj .\nTo motivate our model form, we state several desiderata. First, we are interested in the following prediction problem,\ny\u2217 = arg max y p(y | x) = arg max y\n\u2211\nz\np(y, z | x) \u2248 arg max y max z p(y, z | x). (1)\nNote the use of joint maximization over y and z as a computationally tractable substitute for marginalizing out z; this is commonly done in natural language processing.\nSecond, for problems where the explicit durations observations are unavailable at training time and are inferred as a latent variable, we must be able to use a marginal likelihood training criterion,\nL = \u2212 log p(y | x) = \u2212 log \u2211\nz\np(y, z | x). (2)\nIn Eqs. 1 and 2, the conditional probability of the labeled segment sequence is (assuming kth order dependencies on y):\np(y, z | x) = 1 Z(x)\n|y|\u220f\ni=1\nexp f(yi\u2212k:i, zi,x) (3)\nwhere Z(x) is an appropriate normalization function. To ensure the expressiveness of f and the computational efficiency of the maximization and marginalization problems in Eqs. 1 and 2, we use the following definition of f ,\nf(yi\u2212k:i, zi,xsi:si+zi\u22121) = w >\u03c6(V[gy(yi\u2212k); . . . ;gy(yi);gz(zi);\n\u2212\u2212\u2192 RNN(csi:si+zi\u22121); \u2190\u2212\u2212 RNN(csi:si+zi\u22121)] + a) + b (4)\nwhere \u2212\u2212\u2192 RNN(csi:si+zi\u22121) is a recurrent neural network that computes the forward segment embedding by \u201cencoding\u201d the zi-length subsequence of x starting at index si,1 and \u2190\u2212\u2212 RNN computes the reverse segment embedding (i.e., traversing the sequence in reverse order), and gy and gz are functions which map the label candidate y and segmentation duration z into a vector representation. The notation [a;b; c] denotes vector concatenation. Finally, the concatenated segment duration, label candidates and segment embedding are passed through a affine transformation layer parameterized by V and a and a nonlinear activation function \u03c6 (e.g., tanh), and a dot product with a vector w and addition by scalar b computes the log potential for the clique. Our proposed model is equivalent to a semi-Markov conditional random field with local features computed using neural networks. Figure 1 shows the model graphically.\n1Rather than directly reading the xi\u2019s, each token is represented as the concatenation, ci, of a forward and backward over the sequence of raw inputs. This permits tokens to be sensitive to the contexts they occur in, and this is standardly used with neural net sequence labeling models (Graves et al., 2006).\nWe chose bidirectional LSTMs (Graves & Schmidhuber, 2005) as the implementation of the RNNs in Eq. 4. LSTMs (Hochreiter & Schmidhuber, 1997) are a popular variant of RNNs which have been seen successful in many representation learning problems (Graves & Jaitly, 2014; Karpathy & Fei-Fei, 2015). Bidirectional LSTMs enable effective computation for embedings in both directions and are known to be good at preserving long distance dependencies, and hence are well-suited for our task."}, {"heading": "3 INFERENCE WITH DYNAMIC PROGRAMMING", "text": "We are interested in three inference problems: (i) finding the most probable segmentation/labeling for a model given a sequence x; (ii) evaluating the partition function Z(x); and (iii) computing the posterior marginal Z(x,y), which sums over all segmentations compatible with a reference sequence y. These can all be solved using dynamic programming. For simplicity, we will assume zeroth order Markov dependencies between the yis. Extensions to the kth order Markov dependencies should be straightforward. Since each of these algorithms relies on the forward and reverse segment embeddings, we first discuss how these can be computed before going on to the inference algorithms."}, {"heading": "3.1 COMPUTING SEGMENT EMBEDDINGS", "text": "Let the \u2212\u2192 h i,j designate the \u2212\u2212\u2212\u2192 RNN encoding of the input span (i, j), traversing from left to right, and let \u2190\u2212 h i,j designate the reverse direction encoding using \u2190\u2212\u2212\u2212 RNN. There are thus O(|x|2) vectors that must be computed, each of length O(|x|). Naively this can be computed in time O(|x|3), but the\nfollowing dynamic program reduces this to O(|x|2): \u2212\u2192 h i,i = \u2212\u2212\u2212\u2192 RNN( \u2212\u2192 h 0, ci)\n\u2212\u2192 h i,j = \u2212\u2212\u2212\u2192 RNN( \u2212\u2192 h i,j\u22121, cj) \u2190\u2212 h i,i = \u2190\u2212\u2212\u2212 RNN( \u2190\u2212 h 0, ci) \u2190\u2212 h i,j = \u2190\u2212\u2212\u2212 RNN( \u2190\u2212 h i+1,j , ci)\nThe algorithm is executed by initializing in the values on the diagonal (representing segments of length 1) and then inductively filling out the rest of the matrix. In practice, we often can put a upper bound for the length of a eligible segment thus reducing the complexity of runtime to O(|x|). This savings can be substantial for very long sequences (e.g., those encountered in speech recognition).\n3.2 COMPUTING THE MOST PROBABLE SEGMENTATION/LABELING AND Z(x)\nFor the input sequence x, there are 2|x|\u22121 possible segmentations and O(|Y ||x|) different labelings of these segments, making exhaustive computation entirely infeasible. Fortunately, the partition function Z(x) may be computed in polynomial time with the following dynamic program:\n\u03b10 = 1 \u03b1j = \u2211\ni<j\n\u03b1i\u00d7\n\u2211\ny\u2208Y\n( expw>\u03c6(V[gy(y); gz(zi); \u2212\u2212\u2192 RNN(csi:si+zi\u22121); \u2190\u2212\u2212 RNN(csi:si+zi\u22121)] + a) + b ) .\nAfter computing these values, Z(x) = \u03b1|x|. By changing the summations to a max operators (and storing the corresponding arg max values), the maximal a posteriori segmentation/labeling can be computed.\nBoth the partition function evaluation and the search for the MAP outputs run in time O(|x|2 \u00b7 |Y |) with this dynamic program. Adding nth order Markov dependencies between the yis adds requires additional information in each state and increases the time and space requirements by a factor of O(|Y |n). However, this may be tractable for small |Y | and n.\nAvoiding overflow. Since this dynamic program sums over exponentially many segmentations and labelings, the values in the \u03b1i chart can become very large. Thus, to avoid issues with overflow, computations of the \u03b1i\u2019s must be carried out in log space.2\n3.3 COMPUTING Z(x,y)\nTo compute the posterior marginal Z(x,y), it is necessary to sum over all segmentations that are compatible with a label sequence y given an input sequence x. To do so requires only a minor modification of the previous dynamic program to track how much of the reference label sequence y has been consumed. We introduce the variable m as the index into y for this purpose. The modified recurrences are:\n\u03b30(0) = 1\n\u03b3j(m) = \u2211\ni<j \u03b3i(m\u2212 1)\u00d7 (\nexpw>\u03c6(V[gy(yi); gz(zi); \u2212\u2212\u2192 RNN(csi:si+zi\u22121); \u2190\u2212\u2212 RNN(csi:si+zi\u22121)] + a) + b ) .\nThe value Z(x,y) is \u03b3|x|(|y|). 2An alternative strategy for avoiding overflow in similar dynamic programs is to rescale the forward summations at each time step (Rabiner, 1989; Graves et al., 2006). Unfortunately, in a semi-Markov architecture each term in \u03b1i sums over different segmentations (e.g., the summation for \u03b12 will have contain some terms that include \u03b11 and some terms that include only \u03b10), which means there are no common factors, making this strategy inapplicable."}, {"heading": "4 PARAMETER LEARNING", "text": "We consider two different learning objectives."}, {"heading": "4.1 SUPERVISED LEARNING", "text": "In the supervised case, both the segment durations (z) and their labels (y) are observed.\nL = \u2211\n(x,y,z)\u2208D\n\u2212 log p(y, z | x)\n= \u2211\n(x,y,z)\u2208D\nlogZ(x)\u2212 logZ(x,y, z)\nIn this expression, the unnormalized conditional probability of the reference segmentation/labeling, given the input x is written as Z(x,y, z)."}, {"heading": "4.2 PARTIALLY SUPERVISED LEARNING", "text": "In the partially supervised case, only the labels are observed and the segments (the z) are unobserved and marginalized.\nL = \u2211\n(x,y)\u2208D\n\u2212 log p(y | x)\n= \u2211\n(x,y)\u2208D\n\u2211\nz\u2208Z(x,y)\n\u2212 log p(y, z | x)\n= \u2211\n(x,y)\u2208D\nlogZ(x)\u2212 logZ(x,y)\nFor both the fully and partially supervised scenarios, the necessary derivatives can be computed using automatic differentiation or (equivalently) with backward variants of the above dynamic programs (Sarawagi & Cohen, 2004)."}, {"heading": "5 EXPERIMENTS", "text": "We present two sets of experiments to compare segmental recurrent neural networks against models that do not include explicit representations of segmentation. For the handwriting recognition task, we consider connectionist temporal classification (CTC) (Graves et al., 2006); for Chinese word segmentation, we consider BIO tagging. In these experiments, we do not include Markovian dependencies between adjacent labels for our models or the baselines."}, {"heading": "5.1 ONLINE HANDWRITING RECOGNITION", "text": "Dataset We use the handwriting dataset from Kassel (1995). This dataset is an online collection of hand-written words from 150 writers. It is recorded as the coordinates (x, y) at time t plus special pen-down/pen-up notations. We break the coordinates into strokes using the pen-down and pen-up notations. One character typically consists one or more contiguous strokes.3\nThe dataset is split into train, development and test set following Kassel (1995). Table 1 presents the statistics for the dataset.\nA well-know variant of this dataset was introduced by Taskar et al. (2004). Taskar et al. (2004) selected a \u201cclean\u201d subset of about 6,100 words and rasterized and normalized the images of each letter. Then, the uppercased letters (since they are usually the first character in a word) are removed and only the lowercase letters are used. The main difference between our dataset and theirs is that their dataset is \u201coffline\u201d \u2014 Taskar et al. (2004) mapped each character into a bitmap and treated the segmentation of characters as a preprocessing step. We use the richer representation of the sequence of strokes as input.\n3There are infrequent cases where one stroke can go across multiple characters or the strokes which form the character can be not contiguous. We leave those cases for future work.\nImplementation We trained two versions of our model on this dataset, namely, the fully supervised model (\u00a74.1), which takes advantage of the gold segmentations on training data, and the partially supervised model (\u00a74.2) in which the gold segmentations are only used in the evaluation. A CTC model reimplemented on the top of our Encoder BiRNNs layer (Figure 1) is used as a baseline so that we can see the effect of explicitly representing the segmentation.4 For the decoding of the CTC model, we simply use the best path decoding, where we assume that the most probable path will correspond to the most probable labeling, although it is known that prefix search decoding can slightly improve the results (Graves et al., 2006).\nAs a preprocessing step, we first represented each point in the dataset using a 4 dimensional vector, p = (px, py,\u2206px,\u2206py), where px and py are the normalized coordinates of the point and \u2206px and \u2206py are the corresponding changes in the coordinates with respect to the previous point. \u2206px and \u2206py are meant to capture basic direction information. Then we map the points inside one stroke into a fixed-length vector using a bi-direction LSTM. Specifically, we concatenated the last position\u2019s hidden states in both directions and use it as the input vector x for the stroke.\nIn all the experiments, we use Adam (Kingma & Ba, 2014) with \u03bb = 1 \u00d7 10\u22126 to optimize the parameters in the models. We train these models until convergence and picked the best model over the iterations based on development set performance then report performance on the test set.\nWe used 5 as the hidden state dimension in the bidirectional RNNs, which map the points into fixedlength stroke embeddings (hence the input vector size 5\u00d72 = 10). We set the hidden dimensions of c in our model and CTC model to 24 and segment embedding h in our model as 18. These dimensions were chosen based on intuitively reasonable values, and it was confirmed on development data that they performed well. We tried to experiment with larger hidden dimensions and we found the performance did not vary much. Future work might more carefully optimize these parameters.\nAs for speed, the partially supervised SRNNs run at \u223c40 instances per second and the fully supervised SRNNs run at \u223c53 instances during training using a single CPU. Results The results of the online handwriting recognition task are presented in Table 2. We see that both of our models outperform the baseline CTC model, which does not carry an explicit representation for the segments being labeled, by a significant margin. An interesting finding is, although the partially supervised model performs slightly worse in the development set, it actually outperforms the fully supervised model in the test set. Because the test set is written by different people from the train and development set, they exhibit different styles in their handwriting; our results suggest that the partially supervised model may generalize better across different writing styles."}, {"heading": "5.2 JOINT CHINESE WORD SEGMENTATION AND POS TAGGING", "text": "In this section, we will look into two related tasks. The first task is joint Chinese word segmentation and POS tagging, where the z variables will group the Chinese characters into words and the y variables assign POS tags as labels to these words. We also tested our model on pure Chinese word segmentation task, where the assignments of z is the only thing we care about (simulated using a single label for all segments).\n4The CTC interpretation rules specify that repeated symbols, e.g. aa will be interpreted as a single token of a. However since the segments in the handwriting recognition problem are extremely short, we use different rules and interpret this as aa. That is, only the blank symbol may be used to represent extended durations. Our experiments indicate this has little effect, and Graves (p.c.) reports that this change does not harm performance in general.\nDataset We used standard benchmark datasets for these two tasks. For the joint Chinese word segmentation and POS tagging task, we use the Penn Chinese Treebank 5 (Xue et al., 2005), following the standard train/dev/test splits. For the pure Chinese word segmentation task, we used the SIGHAN 2005 dataset5. This dataset contains four portions, covering both simplified and traditional Chinese. Since there is no pre-assigned dev set in this dataset (only train and test set are provided), we manually split the original train set into two, one of which (roughly the same size as the test set) is used as the dev set. For both tasks, we use Wang2Vec (Ling et al., 2015) to generate the pre-trained character embeddings from the Chinese Gigaword (Graff & Chen, 2005).\nImplementation Only supervised version SRNNs (\u00a74.1) is tested in these tasks. The baseline model is a bi-directional LSTM tagger (basically the same structure as our Encoder BiRNNs in Figure 1). It takes the c at each time step and pushes it through an element-wise non-linear transformation (tanh) followed by an affine transformation to map it to the same dimension as the number of labels. The total loss is therefore the sum of negative log probabilities over the sequence. Greedy decoding is applied in the baseline model, making it a zeroth order model like our SRNNs.\nIn order to perform segmentation and POS tagging jointly, we composed the POS tags with \u201cB\u201d or \u201cI\u201d to represent the segmentation point. For the segmentation-only task, in the SRNNs we simply used same dummy tag for all y and only care about the z assignments. In the BiRNN case, we used \u201cB\u201d and \u201cI\u201d tags.\nFor both tasks, the dimension for the input character embedding is 64. For our model, the dimension for c and the segment embedding h is set to 24. For the baseline bi-directional LSTM tagger, we set the hidden dimension (the c equivalent) size to 128. Here we deliberately chose a larger size than in our model hoping to make the number of parameters in the bi-directional LSTM tagger roughly the same as our model. We trained these models until convergence and picked the best model over iterations based on its performance on the development set.\nAs for speed, the SRNNs run at \u223c3.7 sentence per second during training on the CTB dataset using a single CPU.\nResults Table 3 presents the results for the joint Chinese word segmentation task. We can see that in both segmentation and POS tagging, the SRNNs achieve higher F -scores than the BiRNNs.\nTable 4 presents the results for the pure Chinese word segmentation task. The SRNNs perform better than the BiRNNs with the exception of the PKU portion of the dataset. The reason for this is probably because the training set in this portion is the smallest among the four. Thus leads to high variance in the test results.\n5http://www.sighan.org/bakeoff2005/"}, {"heading": "6 RELATED WORK", "text": "Segmental labeling problems have been widely studied. A widely used approach to a segmental labeling problems with neural networks is the connectionist temporal classification (CTC) objective and decoding rule of Graves et al. (2006). CTC reduces the \u201csegmental\u201d sequence label problem to a classical sequence labeling problem in which every position in an input sequence x is explicitly labeled by interpreting repetitions of input labels\u2014or input labels followed by a special \u201cblank\u201d output symbol\u2014as being a single label with a longer duration. During training, the marginal likelihood of the set of labelings compatible (according to the CTC interpretation rules) with the reference label y is maximized. CTC has demonstrated impressive success in various fully discriminative end-toend speech recognition models (Graves & Jaitly, 2014; Maas et al., 2015; Hannun et al., 2014, inter alia).\nAlthough CTC has been used successfully and its reuse of conventional sequence labeling architectures is appealing, it has several potentially serious limitations. First, it is not possible to model interlabel dependencies explicitly\u2014these must instead be captured indirectly by the underlying RNNs. Second, CTC has no explicit segmentation model. Although this is most serious in applications where segmentation is a necessary/desired output (e.g., information extraction, protein secondary structure prediction), we argue that explicit segmentation is potentially valuable even when the segmentation is not required. To illustrate the value of explicit segments, consider the problem of phone recognition. For this task, segmental duration is strongly correlated with label identity (e.g., while an [o] phone token might last 300ms, it is unlikely that a [t] would) and thus modeling it explicitly may be useful. Finally, making an explicit labeling decision for every position (and introducing a special blank symbol) in an input sequence is conceptually unappealing.\nSeveral alternatives to CTC have been approached, such as using various attention mechanisms in place of marginalization (Chan et al., 2015; Bahdanau et al., 2015). These have been applied to endto-end discriminative speech recognition problem. A more direct alternative to our method\u2014indeed it was proposed to solve several of the same problems we identified\u2014is due to Graves (2012). However, a crucial difference is that our model explicitly constructs representations of segments which are used to label the segment while that model relies on a marginalized frame-level labeling with a null symbol.\nThe work of Abdel-Hamid (2013) also seeks to construct embeddings of multi-frame segments. Their approach is quite different than the one taken here. First, they compute representations of variable-sized segments by uniformly sampling a fixed number of frames and using these to construct a representation of the segment with a simple feedforward network. Second, they do not consider them problem of latent segmentation.\nFinally, using neural networks to provide local features in conditional random field models has also been proposed for sequential models (Peng et al., 2009) and tree-structured models (Durrett & Klein, 2015). To our knowledge, this is the first application to semi-Markov structures."}, {"heading": "7 CONCLUSION", "text": "We have proposed a new model for segment labeling problems that learns representations of segments of an input sequence and then labels these. We outperform existing alternatives both when segmental information should be recovered and when it is only latent. We have not trained the segmental representations to be of any use beyond making good labeling (or segmentation) decisions, but an intriguing avenue for future work would be to construct representations that are useful for other tasks."}, {"heading": "ACKNOWLEDGMENTS", "text": "The authors thank the anonymous reviewers, Yanchuan Sim, and Hao Tang for their helpful feedback. This work was sponsored in part by the Defense Advanced Research Projects Agency (DARPA) Information Innovation Office (I2O) under the Low Resource Languages for Emergent Incidents (LORELEI) program issued by DARPA/I2O under Contract No. HR0011-15-C-0114."}], "references": [{"title": "Structural-Functional Analysis of Plant Cyclic Nucleotide Gated Ion Channels", "author": ["Abdel-Hamid", "Huda"], "venue": "PhD thesis, University of Toronto,", "citeRegEx": "Abdel.Hamid and Huda.,? \\Q2013\\E", "shortCiteRegEx": "Abdel.Hamid and Huda.", "year": 2013}, {"title": "End-to-end attention-based large vocabulary speech recognition", "author": ["Bahdanau", "Dzmitry", "Chorowski", "Jan", "Serdyuk", "Dmitriy", "Brakel", "Phil\u00e9mon", "Bengio", "Yoshua"], "venue": "CoRR, abs/1508.04395,", "citeRegEx": "Bahdanau et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2015}, {"title": "Listen, attend, and spell", "author": ["Chan", "William", "Jaitly", "Navdeep", "Le", "Quoc V", "Vinyals", "Oriol"], "venue": "CoRR, abs/1508.01211,", "citeRegEx": "Chan et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Chan et al\\.", "year": 2015}, {"title": "Neural CRF parsing", "author": ["Durrett", "Greg", "Klein", "Dan"], "venue": "In Proc. ACL,", "citeRegEx": "Durrett et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Durrett et al\\.", "year": 2015}, {"title": "Chinese gigaword", "author": ["Graff", "David", "Chen", "Ke"], "venue": "LDC Catalog No.: LDC2003T09,", "citeRegEx": "Graff et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Graff et al\\.", "year": 2005}, {"title": "Sequence transduction with recurrent neural networks", "author": ["Graves", "Alex"], "venue": "In Proc. ICML,", "citeRegEx": "Graves and Alex.,? \\Q2012\\E", "shortCiteRegEx": "Graves and Alex.", "year": 2012}, {"title": "Towards end-to-end speech recognition with recurrent neural networks", "author": ["Graves", "Alex", "Jaitly", "Navdeep"], "venue": "In Proc. ICML,", "citeRegEx": "Graves et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2014}, {"title": "Framewise phoneme classification with bidirectional LSTM and other neural network architectures", "author": ["Graves", "Alex", "Schmidhuber", "J\u00fcrgen"], "venue": "Neural Networks,", "citeRegEx": "Graves et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2005}, {"title": "Connectionist temporal classification: Labelling unsegmented sequence data with recurrent neural networks", "author": ["Graves", "Alex", "Fern\u00e1ndez", "Santiago", "Gomez", "Faustino", "Schmidhuber", "J\u00fcrgen"], "venue": "In Proc. ICML,", "citeRegEx": "Graves et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2006}, {"title": "Deep speech: Scaling up end-to-end speech recognition", "author": ["Hannun", "Awni Y", "Case", "Carl", "Casper", "Jared", "Catanzaro", "Bryan C", "Diamos", "Greg", "Elsen", "Erich", "Prenger", "Ryan", "Satheesh", "Sanjeev", "Sengupta", "Shubho", "Coates", "Adam", "Ng", "Andrew Y"], "venue": "CoRR, abs/1412.5567,", "citeRegEx": "Hannun et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Hannun et al\\.", "year": 2014}, {"title": "Long short-term memory", "author": ["Hochreiter", "Sepp", "Schmidhuber", "J\u00fcrgen"], "venue": "Neural computation,", "citeRegEx": "Hochreiter et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter et al\\.", "year": 1997}, {"title": "Deep visual-semantic alignments for generating image descriptions", "author": ["Karpathy", "Andrej", "Fei-Fei", "Li"], "venue": "In Proc. CVPR,", "citeRegEx": "Karpathy et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Karpathy et al\\.", "year": 2015}, {"title": "A comparison of approaches to on-line handwritten character recognition", "author": ["Kassel", "Robert H"], "venue": "PhD thesis, Massachusetts Institute of Technology,", "citeRegEx": "Kassel and H.,? \\Q1995\\E", "shortCiteRegEx": "Kassel and H.", "year": 1995}, {"title": "Adam: A method for stochastic optimization", "author": ["Kingma", "Diederik", "Ba", "Jimmy"], "venue": "arXiv preprint arXiv:1412.6980,", "citeRegEx": "Kingma et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2014}, {"title": "Two/too simple adaptations of word2vec for syntax problems", "author": ["Ling", "Wang", "Dyer", "Chris", "Black", "Alan W", "Trancoso", "Isabel"], "venue": "In Proc. NAACL,", "citeRegEx": "Ling et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ling et al\\.", "year": 2015}, {"title": "Lexicon-free conversational speech recognition with neural networks", "author": ["Maas", "Andrew L", "Xie", "Ziang", "Jurafsky", "Dan", "Ng", "Andrew Y"], "venue": "In Proc. NAACL,", "citeRegEx": "Maas et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Maas et al\\.", "year": 2015}, {"title": "Conditional neural fields", "author": ["Peng", "Jian", "Bo", "Liefeng", "Xu", "Jinbo"], "venue": "In Proc. NIPS,", "citeRegEx": "Peng et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Peng et al\\.", "year": 2009}, {"title": "A tutorion on hidden Markov models and selected applications in speech recognition", "author": ["Rabiner", "Lawrence R"], "venue": "Proc. IEEE,", "citeRegEx": "Rabiner and R.,? \\Q1989\\E", "shortCiteRegEx": "Rabiner and R.", "year": 1989}, {"title": "Text chunking using transformation-based learning", "author": ["Ramshaw", "Lance A", "Marcus", "Mitchell P"], "venue": "In Proceedings of the Workshop on Very Large Corpora,", "citeRegEx": "Ramshaw et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Ramshaw et al\\.", "year": 1995}, {"title": "Semi-Markov conditional random fields for information extraction", "author": ["Sarawagi", "Sunita", "Cohen", "William W"], "venue": "In Proc. NIPS,", "citeRegEx": "Sarawagi et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Sarawagi et al\\.", "year": 2004}, {"title": "The Penn Chinese TreeBank: Phrase structure annotation of a large corpus", "author": ["Xue", "Naiwen", "Xia", "Fei", "Chiou", "Fu-Dong", "Palmer", "Martha"], "venue": "Natural Language Engineering,", "citeRegEx": "Xue et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Xue et al\\.", "year": 2005}], "referenceMentions": [{"referenceID": 8, "context": "Unlike past RNN-based approaches (e.g., connectionist temporal classification or CTC; Graves et al., 2006) each candidate segment is represented explicitly, allowing application in settings where an alignment between segments and labels is desired as part of the output (e.", "startOffset": 33, "endOffset": 106}, {"referenceID": 8, "context": "This permits tokens to be sensitive to the contexts they occur in, and this is standardly used with neural net sequence labeling models (Graves et al., 2006).", "startOffset": 136, "endOffset": 157}, {"referenceID": 8, "context": "An alternative strategy for avoiding overflow in similar dynamic programs is to rescale the forward summations at each time step (Rabiner, 1989; Graves et al., 2006).", "startOffset": 129, "endOffset": 165}, {"referenceID": 8, "context": "For the handwriting recognition task, we consider connectionist temporal classification (CTC) (Graves et al., 2006); for Chinese word segmentation, we consider BIO tagging.", "startOffset": 94, "endOffset": 115}, {"referenceID": 8, "context": "4 For the decoding of the CTC model, we simply use the best path decoding, where we assume that the most probable path will correspond to the most probable labeling, although it is known that prefix search decoding can slightly improve the results (Graves et al., 2006).", "startOffset": 248, "endOffset": 269}, {"referenceID": 20, "context": "For the joint Chinese word segmentation and POS tagging task, we use the Penn Chinese Treebank 5 (Xue et al., 2005), following the standard train/dev/test splits.", "startOffset": 97, "endOffset": 115}, {"referenceID": 14, "context": "For both tasks, we use Wang2Vec (Ling et al., 2015) to generate the pre-trained character embeddings from the Chinese Gigaword (Graff & Chen, 2005).", "startOffset": 32, "endOffset": 51}, {"referenceID": 2, "context": "Several alternatives to CTC have been approached, such as using various attention mechanisms in place of marginalization (Chan et al., 2015; Bahdanau et al., 2015).", "startOffset": 121, "endOffset": 163}, {"referenceID": 1, "context": "Several alternatives to CTC have been approached, such as using various attention mechanisms in place of marginalization (Chan et al., 2015; Bahdanau et al., 2015).", "startOffset": 121, "endOffset": 163}, {"referenceID": 16, "context": "Finally, using neural networks to provide local features in conditional random field models has also been proposed for sequential models (Peng et al., 2009) and tree-structured models (Durrett & Klein, 2015).", "startOffset": 137, "endOffset": 156}, {"referenceID": 4, "context": "A widely used approach to a segmental labeling problems with neural networks is the connectionist temporal classification (CTC) objective and decoding rule of Graves et al. (2006). CTC reduces the \u201csegmental\u201d sequence label problem to a classical sequence labeling problem in which every position in an input sequence x is explicitly labeled by interpreting repetitions of input labels\u2014or input labels followed by a special \u201cblank\u201d output symbol\u2014as being a single label with a longer duration.", "startOffset": 159, "endOffset": 180}, {"referenceID": 1, "context": ", 2015; Bahdanau et al., 2015). These have been applied to endto-end discriminative speech recognition problem. A more direct alternative to our method\u2014indeed it was proposed to solve several of the same problems we identified\u2014is due to Graves (2012). However, a crucial difference is that our model explicitly constructs representations of segments which are used to label the segment while that model relies on a marginalized frame-level labeling with a null symbol.", "startOffset": 8, "endOffset": 251}, {"referenceID": 1, "context": ", 2015; Bahdanau et al., 2015). These have been applied to endto-end discriminative speech recognition problem. A more direct alternative to our method\u2014indeed it was proposed to solve several of the same problems we identified\u2014is due to Graves (2012). However, a crucial difference is that our model explicitly constructs representations of segments which are used to label the segment while that model relies on a marginalized frame-level labeling with a null symbol. The work of Abdel-Hamid (2013) also seeks to construct embeddings of multi-frame segments.", "startOffset": 8, "endOffset": 500}], "year": 2016, "abstractText": "We introduce segmental recurrent neural networks (SRNNs) which define, given an input sequence, a joint probability distribution over segmentations of the input and labelings of the segments. Representations of the input segments (i.e., contiguous subsequences of the input) are computed by encoding their constituent tokens using bidirectional recurrent neural nets, and these \u201csegment embeddings\u201d are used to define compatibility scores with output labels. These local compatibility scores are integrated using a global semi-Markov conditional random field. Both fully supervised training\u2014in which segment boundaries and labels are observed\u2014as well as partially supervised training\u2014in which segment boundaries are latent\u2014are straightforward. Experiments on handwriting recognition and joint Chinese word segmentation/POS tagging show that, compared to models that do not explicitly represent segments such as BIO tagging schemes and connectionist temporal classification (CTC), SRNNs obtain substantially higher accuracies.", "creator": "LaTeX with hyperref package"}}}