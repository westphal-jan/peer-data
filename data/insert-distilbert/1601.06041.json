{"id": "1601.06041", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Jan-2016", "title": "Online Event Recognition from Moving Vessel Trajectories", "abstract": "we present a system for online monitoring of maritime activity over streaming geographical positions from quite numerous unidentified vessels sailing at beaufort sea. usually it employs an underlying online tracking module for detecting important changes in the evolving trajectory of each vessel across time, and thus can incrementally retain concise, yet reliable summaries of its recent movement. in modern addition, thanks to its complex event recognition module, this system can also offer instant notification to marine authorities regarding emergency situations, such as risk of collisions, suspicious moves in protected zones, or package tracking picking searches at open out sea. not only did our multiple extensive tests validate the performance, efficiency, and robustness of the system against fully scalable data volumes of real - world and synthetically enlarged datasets, but its deployment against overwhelming online feeds from vessels has also confirmed its capabilities for potentially effective, quickly real - time maritime surveillance.", "histories": [["v1", "Fri, 22 Jan 2016 15:24:41 GMT  (3828kb,D)", "http://arxiv.org/abs/1601.06041v1", null]], "reviews": [], "SUBJECTS": "cs.CV cs.AI", "authors": ["kostas patroumpas", "elias alevizos", "alexander artikis", "marios vodas", "nikos pelekis", "yannis theodoridis"], "accepted": false, "id": "1601.06041"}, "pdf": {"name": "1601.06041.pdf", "metadata": {"source": "CRF", "title": "Online Event Recognition from Moving Vessel Trajectories", "authors": ["Kostas Patroumpas", "Marios Vodas", "Yannis Theodoridis"], "emails": ["kpatro@dblab.ece.ntua.gr", "alevizos.elias@iit.demokritos.gr", "a.artikis@unipi.gr", "mvodas@unipi.gr", "npelekis@unipi.gr", "ytheod@unipi.gr"], "sections": [{"heading": null, "text": "Keywords AIS \u00b7 event recognition \u00b7 geostreaming \u00b7 moving objects \u00b7 trajectory\nK. Patroumpas School of Electrical & Computer Engineering, National Technical University of Athens, Greece E-mail: kpatro@dblab.ece.ntua.gr\nE. Alevizos Institute of Informatics & Telecommunications, NCSR Demokritos, Athens, Greece E-mail: alevizos.elias@iit.demokritos.gr\nA. Artikis Department of Maritime Studies, University of Piraeus, Greece Institute of Informatics & Telecommunications, NCSR Demokritos, Athens, Greece E-mail: a.artikis@unipi.gr\nM. Vodas Department of Informatics, University of Piraeus, Greece E-mail: mvodas@unipi.gr\nN. Pelekis Department of Statistics & Insurance Science, University of Piraeus, Greece E-mail: npelekis@unipi.gr\nY. Theodoridis Department of Informatics, University of Piraeus, Greece E-mail: ytheod@unipi.gr\nar X\niv :1\n60 1.\n06 04\n1v 1\n[ cs\n.C V\n] 2\n2 Ja\nn 20\n16"}, {"heading": "1 Introduction", "text": "Maritime surveillance systems have been attracting considerable attention for economic as well as environmental reasons [17, 40, 39]. For instance, accidents at sea may cause ecological disasters (e.g., oil spill) and shipping companies may be fined to pay billions of dollars. In the past decade, monitoring vessel activity has emerged as a precious tool for preventing such risks, thanks to the Automatic Identification System (AIS)1. By integrating a VHF transceiver with positioning and navigational devices (e.g., GPS, gyrocompass), AIS can be used to track vessels at sea in real-time through data exchange with other ships nearby, coastal stations, or even satellites. The initial purpose of AIS was to prevent collisions; yet, the amount and precision of the collected data and its real-time availability can be used by a broader spectrum of maritime monitoring applications. International regulations require AIS to be aboard cargo ships of at least 300 gross tonnage, as well as all passenger ships, regardless of size. Considering that AIS data is continuously emitted from over 580,000 vessels worldwide2, maritime surveillance systems certainly demand capabilities of highly scalable, continuous, spatiotemporal processing over massive data streams.\nTo address this requirement, we have been developing a maritime surveillance system that consists of two main components. A trajectory detection component accepts a positional stream of AIS messages and tracks major changes along each vessel\u2019s movement. Given that vessels normally follow planned routes (except for accidents, storms, etc.), this process can instantly identify \u201ccritical points\u201d along its trajectory, such as a stop, a sudden turn, or slow motion. Therefore, we may discard redundant locations along a \u201cnormal\u201d course, and approximately reconstruct each vessel\u2019s trajectory from the sequence of its critical points only. This online summarization achieves data compression close to 98%, with negligible loss in approximation quality. But, apart from archiving or displaying it on maps, this derived stream of critical points is mostly useful in recognizing complex maritime phenomena that involve interaction among vessels or spatiotemporal relationships between vessels and geographical areas of interest. This is handled by our complex event recognition component, which can efficiently detect suspicious or potentially dangerous situations, such as fast approaching vessels or package picking at open sea, and accordingly issue alert notifications to marine authorities.\nOf course, several platforms and monitoring applications have been proposed for managing and analyzing data streams. For instance, the system in [10] focuses on recency-probing pattern queries against both live and archived streams. UpStream platform [28] offers low latency response to continuous queries over massively updated data, but it lacks support for the specific demands of trajectory detection. Besides, automating ingestion of streaming data feeds from various sources into a data warehouse is also important [16], but does not pay attention to complex event recognition. Our particular interest is on geostreaming data [20] from sailing vessels acquired continuously over time, which must be processed on-the-fly in order to recognize important phenomena regarding their movement and their interaction with the maritime\n1 http://www.imo.org/OurWork/Safety/Navigation/Pages/AIS.aspx 2 https://www.vesselfinder.com\nenvironment. In [37] an approach for anomaly detection and classification of vessel interactions is presented. Patterns of interest are expressed as left-to-right Hidden Markov Models and classified using Support Vector Machines, also taking into account contextual information via first-order logic rules. However, this work focuses more on predictive accuracy rather than real-time performance in a streaming scenario. To the best of our knowledge, no streaming framework has been specifically tailored for maritime surveillance over fluctuating, noisy, intermittent, geostreaming AIS messages from large fleets, as the one we present in this work.\nThis paper is an extended and revised version of previous works presented in [33, 2], and developed in the context of the AMINESS project3. It now offers heuristics for coping with noisy situations, improved algorithms for better capturing important events related to vessel mobility and interaction, as well as a more thorough empirical validation. In particular, our contributions are:\n\u2013 We introduce single-pass heuristics to drastically reduce noisy AIS positions, much to the benefit of the resulting trajectory synopses (in size and quality). \u2013 We provide a detailed account of online spatiotemporal filters that can detect important changes in each vessel\u2019s mobility and also incrementally maintain succinct, reliable representations of their evolving trajectories. \u2013 We analyze in depth several rules and conditions for efficiently recognizing complex maritime events, which may also involve topological relationships between vessels and geographical zones of interest. \u2013 We empirically validate our methodology in terms of performance and quality of results against a large AIS dataset of real vessel traces. Moreover, we extensively investigate the robustness, efficiency, and timeliness of the system against scalable volumes of synthetically enlarged datasets, as well as its capacity to recognize complex events related to sensitive environmental zones. \u2013 Finally, we outline a deployment of the system in a real-world scenario, against streaming AIS data feeds that are being collected across the Aegean Sea.\nThe remainder of the paper is organized as follows. In Section 2, we present the architecture of the proposed maritime surveillance system. Sections 3 and 4 respectively present the two main components for online trajectory detection and complex event recognition, respectively. Experimental results are reported in Section 5. In Section 6, we discuss a deployment of this system against real-time AIS data. Finally, in Section 7 we summarize our approach and outline directions for future work."}, {"heading": "2 System Architecture", "text": "Next, we outline the processing flow of the proposed maritime surveillance system. As illustrated in Figure 1, this system consumes a geospatial stream of AIS tracking messages from vessels, continuously detects important features that characterize their movement and recognizes complex events such as suspicious vessel activity.\nIn order to meet the real-time requirements of the geostreaming paradigm [20], this online process necessitates the use of a sliding window [22, 34]. Typically, such\n3 http://www.aminess.eu/\na window abstracts the time period of interest by focusing only on phenomena that occurred in a recent range \u03c9 (e.g., positions received during past 10 minutes). This window slides forward to keep in pace with newly arrived stream tuples, so it gets refreshed at a specific slide step every \u03b2 units (e.g., each minute). For instance, an aggregate query could report at every minute (\u03b2) the distance traveled by a ship over the past 10 minutes (\u03c9). Typically, \u03b2 < \u03c9, hence successive window instantiations may share positional tuples over their partially overlapping ranges across time.\nAs input, we consider particular AIS messages (specifically, of types 1, 2, 3, 18, or 19 according to AIS regulations) and extract position updates. Each message specifies the MMSI (Maritime Mobile Service Identity) of the reporting vessel. For a given MMSI , each of its successive positional samples p consists of geographical coordinates (Lon,Lat) observed at discrete, totally ordered timestamps \u03c4 (e.g., at the granularity of seconds). Without loss of generality, we abstract vessels as 2-dimensional point entities moving across time, because our primary concern is to capture their motion features. By monitoring the timestamped locations from a large fleet of N vessels, the system must deal with a positional stream of tuples \u3008MMSI , Lon, Lat, \u03c4\u3009. A Data Scanner decodes each AIS message, identifies those four attributes (the rest are ignored in our analysis), and cleans them from distortions caused during transmission (e.g., discard corrupt messages with bad checksum). This constitutes an append-only data stream, as no deletions or updates are allowed to already received locations.\nBut it is the sequential nature of each vessel\u2019s trace that mostly matters for capturing movement patterns en route (e.g., a slow turn), as well as spatiotemporal interactions (e.g., ships traveling together). Such a trajectory is approximated as an evolving sequence of successive point samples that locate this vessel at distinct timestamps (e.g., every few seconds). Our system accounts for stream imperfections, i.e., the noise inherent in vessel positions due to sea drift, delayed arrival of messages, or discrepancies in GPS signals. Indeed, prior to any processing, all incoming AIS positions are filtered through the Noise Reduction module by applying heuristics against a velocity vector maintained per vessel4. Afterwards, the Mobility Tracker module accepts clean data and checks when and how velocity changes with time. Working en-\n4 Typically for trajectories [7], linear interpolation is applied between each pair of successive measurements (pi, \u03c4i) and (pi+1, \u03c4i+1). For simplicity, we assume that this also holds in the case of vessels. With the exception of intermittent signals, their course between any two consecutive positions practically evolves in a very small area, which can be locally approximated with a Euclidean plane using Haversine distances.\ntirely in main memory and without any index support, it can detect trajectory events, either instantaneous (e.g., a sudden turn) or of longer duration (e.g., a smooth turn). At each window slide, those events are compiled by a Compressor and a sequence of \u201ccritical\u201d points (such as a stop) are emitted, which are much fewer compared to the originally relayed positions. Accordingly, the current vessel motion can be characterized in real time with particular annotations (e.g., stop, turn). Once new trajectory events are detected per vessel upon each window slide, the annotated critical points can be readily emitted and visualized on maps through a Trajectory Exporter, e.g., as KML polylines (for trajectories) and placemarks (for vessel locations).\nNot surprisingly, detecting trajectory events from positional streams essentially performs a kind of path simplification. In the literature, some strategies like [7, 24, 26] specify an error tolerance for the resulting approximation. The memory footprint occupied by the compressed trajectory may also be a constraint in a single-pass evaluation [35]. Mainly focusing on savings in communication cost, dead-reckoning policies like [41] may be employed on board of the moving objects to relay positional updates only upon significant deviation from the course already known to a centralized server. However, this does not hold for AIS data, as maritime control centers wish to locate ships as frequently as possible. Most importantly, a major advantage of our proposed scheme is that it annotates the simplified representations according to particular trajectory events (turn, stop, etc.), thus adding rich semantic information all along each compressed trace.\nMoreover, the derived critical points are propagated to the Complex Event Recognition module, which combines this event stream with static geographical data, such as protected areas. The objective of this process is to detect potentially suspicious or dangerous situations, such as loitering and vessel pursuit. The recognized complex events are pushed in real-time to the marine authorities for decision-making."}, {"heading": "3 Detecting Trajectory Events", "text": "As illustrated in Figure 1, the system accepts fresh AIS messages from ships and extracts positional tuples \u3008MMSI , Lon, Lat, \u03c4\u3009. With the possible exception of local manoeuvres near ports, marine regulations, or harsh weather conditions, vessels are normally expected to follow almost straight, predictable routes. In terms of vessel mobility, what matters most is to detect when and how the general course has changed, e.g., identify a stop, a turning point, or slow motion. Such trajectory movement events (ME) suffice to indicate \u201ccritical points\u201d along the trace of each vessel and thus offer a concise, yet quite reliable representation of its course.\nIn order to identify significant changes in movement, we employ an instantaneous velocity vector \u2212\u2192v now computed from the two most recent positions reported by each vessel MMSI . In addition, we maintain the mean velocity \u2212\u2192vm per ship over its previous m positions (m is a small integer) so as to abstract its short-term course. With our heuristics, it turns out that a large portion of the raw positional reports can be suppressed with minimal loss in accuracy, as they hardly contribute any additional knowledge. We distinguish two kinds of trajectory events:\n\u2013 Instantaneous trajectory events involve individual time points per route, by simply checking potentially important changes with respect to the previously reported location (e.g., a sharp change in heading). \u2013 Long-lasting trajectory events are deduced after examining a sequence of instantaneous events over a longer (yet bounded) time period in order to identify evolving motion changes. For example, a few consecutive changes in heading may be very small if each is examined in isolation from the rest, but cumulatively they could signify a notable change in the overall direction.\nIn this Section, we first present simple, yet quite effective filters as a means of eliminating noise inherent in the streaming AIS data. Next, we describe how the sequence of vessel positions can be processed online in order to detect trajectory movement events and thus maintain a lightweight synopsis of each vessel\u2019s course.\n3.1 Online Noise Reduction\nDespite its high value in maritime surveillance, AIS data is not error-free. In fact, there are several sources of error that render a portion of this data noisy and inadequate for monitoring. First, no precise timestamp value is present in AIS messages relayed by the transponders on board; instead, they only report a lag value (in seconds) from the previously transmitted message. Obviously, this value cannot be used for establishing a temporal order, since positional updates from a single vessel may come from a series of base stations (those within range of its antenna along the route).\nTherefore, a transaction timestamp marking the arrival of each AIS message at a station has to be used instead. Inevitably, transmission delays may frequently occur between the original message and its arrival. Successive positional messages from a single vessel may often arrive intermingled at a distorted order. Figure 2(a) illustrates such out-of-sequence messages, where numbers signify timestamp values since the beginning of this trajectory. Had those positions been retained according to their order of arrival, the vessel would occasionally appear in a state of sudden agility, moving back and forth very rapidly at a quite unusual speed. To make matters worse, AIS networks do not have synchronized clocks. Hence, if a vessel is within range of two stations, then a broadcasted message may be received by each one and possibly assigned with a different transaction timestamp. It may also happen that the same timestamp is assigned to different locations (maybe of considerable distance) of the same vessel. Therefore, duplicate or contradicting positions of a vessel may be present in the collected data. Noise might not always be caused by technical issues or the inherent errors and discrepancies in the GPS positions. It may be also due to deliberate, suspicious actions, e.g., switching off the transponder or emitting \u201cspoofed\u201d coordinates in order to avoid surveillance in a sensitive area. To the extent possible, such intermittent or falsified positions should be detected and cleared.\nCoping with noisy situations over AIS data is particularly challenging and has attracted significant research interest. As argued in [30], noise reduction should not be confused with anomaly detection, because data must be cleaned in advance, before performing any analysis. In that particular work, the well-known DBSCAN clustering algorithm [14] was used to identify outlier positions, which could then be re-\nmoved from the dataset. With respect to time delays, an adaptive filtering strategy was suggested in [27], which employed Kalman filters and Monte-Carlo simulations to sequentially detect such delays and probabilistically rearrange a \u201ccorrect\u201d timestamp order. Besides, a stochastic method can be used to cope with position spoofing [18] by exploiting auxiliary data from radars or comparing it with previously tracked information. A common characteristic of all such methods is that they work in offline fashion employing expensive, iterative filters over archived AIS datasets.\nIn contrast, in this work we wish to apply online, single-pass filters over the incoming stream of AIS positions. Besides, given that trajectory compression is one of our principal objectives, we can afford to lose garbled, out-of-sequence positions and not consider correcting their timestamps. After all, unless in cases of malicious activity, a fresh noise-free location will be soon received from a vessel, effectively compensating for the removal of any erroneous preceding one(s). In order to effectively and efficiently eliminate noise in timestamped AIS positions, we resort to applying a series of simple heuristics that examine the instantaneous velocity vector \u2212\u2192v now of each vessel as computed by its two most recent observations. A noisy situation is identified if at least one of the following conditions apply:\n\u2013 Off-course positions incur an abrupt change both in speed and heading of velocity \u2212\u2192v now. Such an outlier can be easily detected since it signifies an abnormal, yet only temporary, deviation from the known course as abstracted by mean velocity \u2212\u2192vm of the ship over its previous m positions. Figure 2(b) illustrates such a case with a vessel that is unexpectedly located far away from its anticipated route. \u2013 When vessels are on the move, they normally take their turns very smoothly (especially larger ships), so a series of AIS locations are transmitted, each marking a small change in heading as in Figure 3(f). However, if the latest position update indicates that a vessel has suddenly made a very abrupt turn (e.g., over 60o) with respect to its known course (even though its speed may not be altered significantly), then this message should better be ignored altogether. Note that in case of adverse weather conditions (e.g., a storm) a vessel\u2019s route may appear as a \u2018zigzag\u2019 polyline with a series of such abrupt turns as shown in Figure 2(c). Dropping those consecutive points as noise is not typically correct; yet, in terms of data reduction this is quite desirable, as the vessel does not make any intentional turn and generally follows its planned course.\n\u2013 When a vessel appears to accelerate too much, i.e., at a rate that it is not usual for a ship, this is another indication of noise. This is typical for out-of-sequence messages with twisted timestamps, as the three red spots in Figure 2(a). Each of these three locations is along the course of the ship, but due to their late arrival to the base station, the vessel is seen as retracting backwards suddenly. The location at timestamp t = 438 seconds is 270 meters back from the position at t = 433 seconds, resulting in a speed of 105 knots, quite unrealistic for any vessel. \u2013 If an identical location from the same vessel has been already recorded before, then this might be a sign of error. Note that even if a vessel remains anchored, its successive GPS measurements usually differ by a few meters. In that case, instantaneous velocity\u2212\u2192v now is infinitesimal, but not exactly zero; instead, coincidental coordinates in succession should be deemed as almost certain duplicates. \u2013 A similar problem occurs with conflicts in timestamping, when the same timestamp is assigned to two distinct messages from a given vessel, even though they may be probably reporting different coordinates. In this case, instantaneous velocity \u2212\u2192v now cannot be computed, signifying that these messages are contradictory (if not violating previous rules, we arbitrarily retain the latest one).\nAs we experimentally verified (cf. Section 5), as much as 20% of the raw AIS positions may be qualifying as noise, falling in one of the aforementioned cases. Most importantly, accepting noisy positions would drastically distort the resulting trajectory synopsis, as the red dashed line in Figure 2(b) illustrates. Even worse, noise may affect proper detection of movement events, as we will discuss next. Hence, although based in empirical heuristics, such noise reduction has proven certainly beneficial in terms of performance without sacrificing accuracy in the resulting approximation.\n3.2 Online Tracking of Moving Vessels\nOnce potentially noisy positions are cleared, the mobility tracker can instantly deduce a variety of instantaneous events by examining the trace of each vessel alone:\ni) Pause indicates that a vessel is temporarily halted, once its instantaneous speed vnow is below a suitable threshold vmin. For example, if vnow is currently less than vmin = 1 knot, then the ship seems idle. For the vessel shown in Figure 3(a), the red bullets indicate several pause events; apparently, the ship is anchored at the port and such small displacements may be due to GPS errors or sea drift.\nii) Speed change occurs once current vnow deviates by more than \u03b1% from the previously observed speed vprev . Given a threshold \u03b1, the formula |vnow\u2212vprevvnow | > \u03b1 100\nindicates whether the vessel has just decelerated or accelerated. This normally happens when approaching to or departing from a port, as depicted in Figure 3(b). iii) Turn is spotted when heading in \u2212\u2192v now has just changed by more than a given angle \u2206\u03b8; e.g., there is a difference of \u2265 15o from the previous direction.\nNo critical point gets immediately issued upon detection of any such simple events. An instantaneous pause or turn may be serendipitous and is not meaningful out of context, because a series of such events may signify that the ship is stopped\nfor some time. To avoid iteratively probing these locations later, we simply attach a bitmap to each stream tuple, using one bit for each particular instantaneous event. Note that multiple bits may be set at each location; e.g., the vessel may have just taken a sudden turn and also changed its speed above the respective thresholds, hence two distinct bits must be set to 1.\nBy buffering these instantaneous events within the window, we then can detect spatiotemporal phenomena of some duration. Examination of such long-lasting trajectory events is carried out in the following order. Note that if a certain long-lasting event has just been detected at a location, then checking if it also qualifies for another event is skipped altogether.\n1. Gap in reporting is examined first. This event is spotted when a vessel has not emitted a message for a time period \u2206T , e.g., over the past 10 minutes. This may occur when the vessel sails in an area with no AIS receiving station nearby, or because the transmission power of its transponder allows broadcasting in a shorter range. Then, its course is unknown during this period, as it occurs between the two red bullets in Figure 3(c). Reporting that contact was lost is important not only for online monitoring, but also for safety reasons, e.g., a suspicious move near maritime boundaries, or a potential intrusion of a tanker into a marine park. A pair of critical points signify when contact was lost (gapStart annotates the previously reported location) and when it was restored (gapEnd for current location). 2. Checking for a long-term stop is only fired if the vessel is noticed to move (vnow > vmin) just after a pause. If current location is preceded by at leastm consecutive instantaneous pause or turn events in the buffer, and they are all within\na predefined radius r (e.g., 250 meters), then a long-term stop is identified. In Figure 3(d), the red points inside the circle succeed one another and indicate such immobility, so they are collectively approximated by a single critical point (their centroid) annotated as stopped with their total duration. 3. Slow motion means that a vessel consistently moves at very low speed (\u2264 vmin) over its m most recent messages, as in Figure 3(e). If those buffered positions have not already qualified as a long-term stop by the previous rule (because they did not fall inside a small circle), then they probably succeed each other slowly along a path. The first and the last of these positions are both reported as critical, respectively annotated as lowSpeedStart and lowSpeedEnd. 4. Smooth turns are examined last. Due to their large size and maritime regulations, vessels normally report a series of locations when they change course. By checking whether the cumulative change in heading over buffered previous positions exceeds a given angle \u2206\u03b8, a series of such critical turning points may be emitted, as illustrated with the red points in Figure 3(f).\nThus, critical points are emitted from each detected long-lasting trajectory event, and this relies heavily on efficient noise reduction (cf. Section 3.1. For instance, an outlier breaking the subsequence of instantaneous pause events could prevent characterization of a long-term stop, and instead yield two successive such stops very close to each other. Moreover, in case that no long-lasting trajectory event was identified at this location, we check its associated bitmap with these additional rules:\n5. If the bit for \u2018turn\u2019 is set, we check whether the current heading in \u2212\u2192v now also deviates more than \u2206\u03b8 from mean velocity \u2212\u2192v m of the vessel. If true, we emit a critical turning point. Note that this could possibly affect only raw AIS locations that are not qualified as erroneous. In fact, noisy positions as those in Figure 2(c) have already been discarded by the Noise Reduction module. 6. If the bit for \u2018speed change\u2019 is set (Figure 3(b)) and current speed vnow also deviates by more than \u03b1% from the mean speed vm of this vessel, then a critical point must be emitted and annotated as speedChange. It signifies that this instantaneous event was not caused by fluctuations in the measured speed due to delayed messages, but that such change in speed is probably valid.\nClearly, this detection process can only lead to a single annotation for each critical point. For instance, if a vessel disappeared for long and is suddenly found anchored somewhere, this event will be spotted either as a gap or a stop, but not both. We have deliberately chosen such a \u2018crisp\u2019 classification allowing a single characterization per detected point, as our goal is to achieve a concise trajectory representation, by dropping superfluous locations. In future work, we plan to introduce a fuzzy, probabilistic scheme of multiple annotations per critical point at diverse confidence margins.\nEach critical point is issued along with a velocity vector (comprising instantaneous speed and heading), as an indicator of the short-term course of that particular vessel. This measurement may be useful for further analysis, e.g., in order to identify complex maritime events as explained in Section 4.\nThe example trajectory in Figure 4 illustrates the data compression gains achieved when retaining critical points only. Obviously, such filtering greatly depends on proper\nchoice of parameter values, which is a trade-off between reduction efficiency and approximation accuracy. For a suitable calibration of these parameters, apart from consulting maritime domain experts (our partners in the AMINESS project), we have also conducted several exploratory tests on randomly chosen vessels from AIS data in the Aegean Sea. For instance, setting\u2206\u03b8 = 5o instead of\u2206\u03b8 = 15o may even double the amount of critical points, because more raw AIS locations would qualify as turning points due to sea drift and discrepancies in GPS signals. Since our analysis is mostly geared towards data reduction, for our empirical study (Section 5.1) we have chosen an aggressive parametrization (values listed in bold in Table 3), which yields quite tolerable accuracy. With more relaxed parameter values, additional events can be detected, capturing slighter changes along each trajectory.\nThe complexity for detecting instantaneous events and communication gaps is O(1) per incoming positional tuple, since only the two latest locations are examined per vessel. The cost for the remaining long-lasting events is O(b), where b is the number of buffered positions that need inspection by each such rule. This may involve just a few points in case of smooth turns, but b may be higher (sometimes, a few hundred) if a series of positions qualify for a stop or slow motion. However, we stress that checks for stop of slow motion are fired rather infrequently, only once a vessel starts moving after a certain period of idleness. Thus, the overall cost is more than affordable and detection is near real-time, as we empirically verified (Section 5.1).\nBy taking advantage of those online annotations at critical points along trajectories, lightweight, succinct synopses can be retained per vessel over the recent past. Then, the compressor module simply evicts point locations that have not been detected as critical. Instead of resorting to a costly simplification algorithm, we opt to reconstruct vessel traces approximately from already available critical points. This summarization depends on the annotation of detected trajectory events (stop, turn, gap, etc.), so as to refresh each trajectory accordingly. This main-memory process affects trajectory portions currently within the sliding window. Of course, resulting synopses may be also archived via the Trajectory Exporter module for offline use as\nfiles (e.g., KML, CSV) or in a database by incrementally emitting \u201cdelta\u201d batches of critical points as they get identified at each slide of the window.\nThe aforementioned rules for detecting trajectory events are suitably defined in the mobility tracker, which allows fast, in-memory maintenance of movement features. Note that additional events can be detected by simply enhancing the mobility tracker with extra conditions. In future work, we plan to complement this methodology so as to capture more features, such as traveled distance from a given origin (e.g., a port). Nonetheless, even with this set of filters, we can figure out the mutability in each trajectory and distinctly characterize its course across time. Most importantly, these spatiotemporal features can serve as a basis to recognize more complex maritime events, as we discuss next."}, {"heading": "4 Complex Event Recognition", "text": "The trajectory detection module compresses a vessel position stream to a stream of critical events, including the instantaneous events gapStart and gapEnd , indicating communication gaps, lowSpeedStart , lowSpeedEnd , speedChange and turn , and the durative event stopped . Each such event is accompanied by the coordinates and velocity (speed and heading) of the corresponding vessel. This data stream, hereafter Movement Event (ME) stream, is transmitted to the complex event (CE) recognition module, which combines it with the locations of ports and protected areas, in order to recognize potentially suspicious or dangerous maritime situations, for the benefit of marine authorities.\nThe CE recognition module is based on the \u2018Event Calculus for Run-Time reasoning\u2019 (RTEC) [4]. The Event Calculus [21] is a logic programming action language. RTEC has a formal, declarative semantics\u2014CE patterns in RTEC are (locally) stratified logic programs [36]. In contrast, almost all complex event processing languages, including [6, 25, 1], and several data stream processing languages, such as ESL [5] that extends CQL [3], lack a rigorous, formal semantics [9]. Reliance on informal semantics constitutes a serious limitation for maritime monitoring, where validation and traceability of the effects of events are crucial. Moreover, the semantics of event query languages and production rule languages often have an algebraic and less declarative flavor [13, 32]. In the following sections we present RTEC and illustrate its use for maritime monitoring.\n4.1 Event Calculus for Run-Time reasoning\nRTEC has a linear temporal model including integer time-points. Following Prolog\u2019s convention, variables start with an upper-case letter, while predicates and constants start with a lower-case letter. For a fluent F\u2014a property that is allowed to have different values at different points in time\u2014the term F =V denotes that fluent F has value V . holdsFor(F =V, I) denotes that I is the list of the maximal intervals for which F =V holds continuously. RTEC is interval-based and thus avoids the related logical problems of time-point-based event processing approaches (see [31] for a discussion\nof these problems). holdsAt(F =V, T ) represents that fluent F has value V at some time-point T . holdsAt and holdsFor are defined in such a way that, for any fluent F , holdsAt(F =V, T ) if and only if T belongs to one of the maximal intervals of I for which holdsFor(F =V, I).\nAn event description in RTEC includes rules that define the event instances with the use of the happensAt predicate, the effects of events with the use of the initiatedAt and terminatedAt predicates, and the fluent values with the use of the holdsAt and holdsFor predicates, as well as other, possibly atemporal, constraints. Table 1 presents a fragment of the predicates available to the event description developer.\nFor a fluent F , F =V holds at a particular time-point T if F =V has been initiated by an event that has occurred at some time-point earlier than T , and has not been terminated at some other time-point in the meantime. This is an implementation of the law of inertia. To compute the intervals I for which F =V , i.e. holdsFor(F =V, I), we find all time-points Ts at which F =V is initiated, and then, for each Ts, we compute the first time-point Tf after Ts at which F =V is terminated. As an example, consider the formulation below:\ninitiatedAt(gap(Vessel)= true, T )\u2190 happensAt(gapStart(Vessel), T ), holdsAt(coord(Vessel)=(Lon,Lat), T ), not nearPorts(Lon,Lat) terminatedAt(gap(Vessel)= true, T )\u2190 happensAt(gapEnd(Vessel), T )\n(1)\ngap(Vessel) is a Boolean fluent denoting a communication gap for some Vessel , i.e. the Vessel stops transmitting AIS messages. In some cases, the absence of AIS messages is suspicious and thus we need to record it. gapStart(Vessel) and gapEnd(Vessel) are instantaneous MEs indicating, respectively, the time-points in which a Vessel stops and resumes sending AIS messages. coord is a fluent reporting the coordinates of a vessel. Like MEs, this type of information is provided by the trajectory detection module. nearPorts(Lon,Lat) is an atemporal predicate that becomes true when the point (Lon,Lat) is close to a port. \u2018not\u2019 is negation-by-failure [8]. Rule-set (1) states that gap(Vessel)= true is initiated if the trajectory detection module reports a gapStart ME for the Vessel , and the Vessel is far from the ports of the area under surveillance. Given rule-set (1), RTEC computes the list of maximal intervals during which gap(Vessel)= true holds continuously.\n4.2 Spatial Indexing\nCE recognition for maritime surveillance requires various types of spatial operation [15, 23]. For instance, we need to determine whether a point\u2014a vessel\u2019s location\u2014 lies inside a polygon indicating an area of interest, such as a protected area, or whether it is near another point, such as a port. Moreover, we need to detect the vessels that are in close proximity (heading towards each other). In our approach to CE recognition, the availability of the full power of logic programming is one of the main attractions of employing RTEC as the temporal formalism. It allows CE patterns to include not only temporal constraints but also (complex) atemporal constraints. Recall e.g. the use of the atemporal predicate nearPorts in the specification of communication gap in rule-set (1). This is in contrast to various state-of-the-art CE recognition approaches, such as [11, 22, 9, 42], which support very limited atemporal reasoning, thus being unsuitable for maritime monitoring.\nFor efficient spatial reasoning, we adopt a grid partitioning scheme which divides the surveillance area into equally sized cells (see Figure 5). Each area of interest and port is assigned only to those cells with which it overlaps. This assignment is performed off-line and provided as background knowledge to RTEC. The use of a grid enables us to quickly determine, through a simple calculation on the coordinates, the cell inside which a vessel is located. The task of determining each vessel\u2019s cell is performed before each CE recognition query. This way, we can efficiently compute the number of vessels in close proximity and check whether a vessel is inside an area of interest, by performing calculations (e.g. using the ray crossings algorithm [29] for determining whether a point lies inside a polygon) only for those vessels/areas in the same or adjacent cells.\n4.3 Specifying Complex Maritime Events\nGiven the critical ME stream produced by the trajectory detection module, and a set of protected areas, RTEC recognizes a set of CEs for the benefit of maritime authorities. The choice of CEs and their patterns were specified in collaboration with the domain\nexperts of the AMINESS project. Below we present a fragment of our CE patterns. The complete list may be found in [2].\nSuspicious Vessel Delay. Some vessels, such as those passing through protected areas in order to minimize trip length and fuel consumption, switch off their transmitters and stop sending position signals. But sailing through a protected area is not the only reason for switching off an AIS transmitter. To investigate the behavior of vessels during a communication gap, we formulated the CE below:\nholdsFor(suspiciousDelay(Vessel)= true, I )\u2190 holdsFor(gap(Vessel)= true, Igap), extendedDelays(Vessel , Igap , I )\n(2)\nRecall that I in holdsFor(F =V, I) is the list of the maximal intervals for which F =V holds continuously (see Table 1). Igap in holdsFor(gap(Vessel)= true, Igap), therefore, is the list of maximal intervals during which a Vessel stops transmitting AIS signals while at open sea (see rule-set (1) for the gap fluent). extendedDelays(Vessel , I \u2032, I ) selects the maximal intervals I of the list I \u2032 for which the highest possible speed of the Vessel is below a threshold. We estimate the highest possible speed of a vessel in a simplified way: we assume that the vessel moved along a straight line from the point of gapStart to that of gapEnd . Under this assumption, its speed cannot have been greater than the one determined by dividing this shortest path by the time spent to travel it. Rule (2) thus states that a very low vessel speed combined with a communication gap occurring at open sea is to be treated as a suspicious delay.\nA more refined implementation would estimate the highest possible speed of a vessel during a communication gap even when it is impossible (due to e.g. terrestrial areas) or unlikely (due to weather conditions) to sail along a straight line.\nVessel Rendezvous. \u2018Suspicious delay\u2019 allows us to define additional types of suspicious activity; consider the rule below:\nholdsFor(possibleRendezvous(Vessel1 ,Vessel2 )= true, I )\u2190 holdsFor(in(Vessel1 ,Cell)= true, I1 ), holdsFor(in(Vessel2 ,Cell)= true, I2 ), holdsFor(suspiciousDelay(Vessel1 )= true, I3 ), holdsFor(suspiciousDelay(Vessel2 )= true, I4 ), intersect all([I1 , I2 , I3 , I4 ], I )\n(3)\nin(Vessel ,Cell) indicates the Cell of the grid in which the Vessel is located. The value of this fluent is set prior to each CE recognition query, as described in Section 4.2. intersect all is a built-in RTEC predicate which calculates the intersection of a list of lists of maximal intervals (see Table 1). According to rule (3), if two vessels simultaneously exhibit a suspiciousDelay and are located in the same area, then this could indicate that they had arranged for a rendezvous. Note that, since we do not have information about the vessels\u2019 locations during communication gaps, the above rule cannot capture the precise place and time of the rendezvous, if any.\nMaritime activities form hierarchies, in the sense that the formulation of one activity is also used to define other, higher-level activities. E.g. vessel rendezvous is specified in terms of suspicious vessel delay. In contrast to many state-of-the-art CE\nrecognition systems, such as Esper5 and SASE6, RTEC can naturally express hierarchical knowledge by means of well-structured specifications.\nFast Approach. Another dangerous situation may arise when a vessel is rapidly moving towards some other vessel(s). Such a behavior could indicate a vessel pursuit or even imminent collision. Consider the formalization below:\nhappensAt(fastApproach(Vessel), T )\u2190 happensAt(speedChange(Vessel), T ), holdsAt(velocity(Vessel)=Speed , T ), Speed > 20 knots, holdsAt(coord(Vessel)=(Lon,Lat), T ), not nearPorts(Lon,Lat), holdsAt(headingToVessels(Vessel)= true, T )\n(4)\nfastApproach(Vessel) and speedChange(Vessel) are instantaneous CE and ME respectively. velocity is a fluent indicating the speed of a vessel. This information, as well as a vessel\u2019s heading, is provided by the trajectory detection module and accompanies every detected ME. headingToVessels(Vessel) is a fluent that becomes true whenever a Vessel \u2019s direction of movement is towards at least one nearby vessel. According to rule (4), a \u2018fast approach\u2019 is recognized when a Vessel changes its speed at open sea, the new speed is above 20 knots, and there is at least one other nearby vessel towards which it is heading. The value of 20 knots was chosen by domain experts.\nPackage Picking. Another possible interaction between two vessels is when one of them drops a package at some area and another vessel appears later in order to pick it up. One way of formulating this type of interaction is the following:\nhappensAt(possiblePicking(Vessel1 ,Vessel2 ), Tpick )\u2190 happensAt(end(stopped(Vessel1 )= true),Tdrop), holdsAt(in(Vessel1 )=Cell , Tdrop), happensAt(start(stopped(Vessel2 )= true),Tpick ), holdsAt(in(Vessel2 )=Cell , Tpick ), Tpick \u2212 Tdrop < 1 hour , holdsAt(coord(Vessel1 )=(Lon1 ,Lat1 ), Tdrop), holdsAt(coord(Vessel2 )=(Lon2 ,Lat2 ), Tpick ), distance((Lon1 ,Lat1 ), (Lon2 ,Lat2 ), Dist), Dist < 0 .5 km\n(5)\nstopped(Vessel) is a Boolean fluent indicating that a Vessel has stopped at open sea. The definition of this fluent is based on the information provided by the trajectory detection module, which reports the list of maximal intervals during which a vessel has stopped. From this list, we keep only those intervals where the vessel is not in any port. start(F =V ) (respectively end(F =V )) is a built-in RTEC event taking place at each starting (ending) point of each maximal interval for which F =V holds continuously. Thus e.g. start(stopped(Vessel)= true) takes place at the starting point\n5 http://www.espertech.com/esper/ 6 http://sase.cs.umass.edu/\nof each maximal interval for which the Vessel has stopped at at open sea. Rule (5) describes a scenario where a vessel had stopped at some area and started moving at time Tdrop , then, after no more than an hour, another vessel arrived and stopped at the same area, and the Haversine distance between the two stop locations, as calculated by the distance predicate, was no more than half a kilometer.\n4.4 Recognizing Complex Maritime Events\nRTEC performs CE recognition by means of continuous query computation. At each query time Qi, the MEs that fall within a specified sliding window \u03c9 are taken into consideration. All MEs that took place before or at Qi\u2212\u03c9 are discarded. At Qi, the CE intervals computed by RTEC are those that can be derived from MEs that occurred in the interval (Qi\u2212\u03c9,Qi], as recorded at time Qi. When the range \u03c9 is longer than the slide step \u03b2, it is possible that an ME occurs in the interval (Qi\u2212\u03c9,Qi\u22121] but arrives at RTEC only after Qi\u22121; its effects are taken into account at query time Qi. This is illustrated in Figure 6. Occurrences of MEs are displayed as dots line segments. For CE recognition at Q138, only the events marked in black are considered, whereas the greyed out events are neglected. Assume that all events marked in bold arrived only after Q137. Then, we observe that two MEs were delayed, i.e., they occurred before Q137, but arrived only after Q137. In our setting, the window range \u03c9 is larger than the slide step. Hence, these events are not lost but considered as part of the recognition process at Q138. Further details about the reasoning engine of RTEC may be found at [4]."}, {"heading": "5 Empirical Evaluation", "text": "Our maritime surveillance system has a modular design with loosely coupled components. The mobility tracker for online trajectory detection7 is developed in GNU C++ and runs entirely on main memory for efficiently coping with massive, volatile, streaming locations. RTEC8, the complex event (CE) recognition component, is implemented in Prolog9.\nWe conducted experiments against a real AIS dataset containing 23GB of AIS messages spanning from 1 June 2009 to 31 August 2009 for N = 6,425 vessels in the Aegean, the Ionian, and part of the Mediterranean Sea. Not all vessels were actually\n7 Source code is publicly available at http://www.dblab.ece.ntua.gr/\u02dckpatro/tools/streamAIS/. 8 https://github.com/aartikis/RTEC. 9 The patterns of the complex maritime events are available at http://users.iit.demokritos.gr/\u02dca.\nartikis/aminess.tar.gz.\non the move at all times, since a considerable part (chiefly cargo ships) were just passing by, and thus tracked for a limited period (days or even hours). But most vessels were frequently sailing, e.g., passenger ships or ferries to the islands. When decoded and cleaned from corrupt messages, the dataset yielded 168,240,595 raw timestamped positions10.\nWe simulated a streaming behavior by consuming this positional data little by little, i.e., reading small chunks periodically according to window specifications. We examine sliding windows with varying ranges \u03c9 and slide steps \u03b2 based on timestamps from the original AIS messages. Thus, we replay this stream and the window keeps in pace with the reported timestamps and not the actual time of each simulation. The arrival rate of positions is fluctuating throughout this 3-month period and varies widely among vessels; none of them reports at a fixed frequency, whereas there are ships inactive for large intervals. If we only consider the activity period of each vessel (i.e., when it actually relays positions, either moving or not), then it reports every two minutes on average, which translates into a mean arrival rate \u03c1 \u224850 positions/sec from the entire fleet. For consistency with the real-world scenario, we consume the original stream \u201cas is\u201d in some simulations, even though this is a very low rate for a streaming application. Moreover, we performed additional experiments at artificially increased rates so as to stress test our system and verify its efficiency and robustness. For the CE recognition component, the artificially enlarged datasets include 1,2M vessels and 3,2B MEs. The simulation settings are listed in Table 2, whereas the calibrated settings for online mobility tracking are given in Table 3; default values are shown in bold.\nNext, we report indicative results from these experiments. The trajectory event detection component operated on a server running Debian Linux \u201cWheezy\u201d 7.5 amd64 with 48GB of RAM and two Intel Xeon X5675 processors at 3.07GHz. The CE recognition component RTEC operated on a computer with Intel Xeon CPU E5-2630\n10 This anonymized dataset (for privacy, each original MMSI has been replaced by a sequence number) is publicly available at http://chorochronos.datastories.org/?q=content/imis-3months\nv2@2.60GHz\u00d712 processors and 256GB RAM, running Ubuntu Linux 14.04 and SWI Prolog 7.2.1.\n5.1 Assessment of Trajectory Detection"}, {"heading": "5.1.1 Performance of online mobility tracking", "text": "First, we examine performance of online detection concerning trajectory movement events using simulations at the original arrival rate. These experiments have been performed employing window specifications with varying ranges \u03c9 and slide steps \u03b2, and we measure the total time it takes to update a window with a fresh batch of raw AIS locations, evict expired ones, detect trajectory events, and report critical points. Then, we calculate averages of these time values over the total count of window instantiations, hence obtaining the per slide cost for window maintenance and identification of any trajectory events therein. Figure 7 plots this average execution cost per window for monitoring the entire fleet.\nFrom Figure 7(a) it turns out that our mobility tracker provides results instantly for smaller \u03c9 up to 2 hours. In the worst case, it takes less than 150ms to track down any critical points per incoming batch of raw positional tuples. Quite expectedly, the cost grows linearly with an increasing slide \u03b2, as the window slides forward less often and thus each batch contains more input locations (illustrated with bars in this plot) directly proportional to the sliding step \u03b2.\nFor larger windows with range \u03c9 up to 24 hours shown in Figure 7(b), the cost is greater. Increased by almost an order of magnitude compared to the execution times in Figure 7(a), the cost still remains linear with the size of wider sliding steps. Again, this is due to the larger amount of accumulated raw locations per batch (depicted with the bar plots). For the larger window tested (\u03c9 = 24 hours and \u03b2 = 4 hours), critical points can be reported in less than 2 seconds per batch, even though the mobility tracker has to validate almost 30,000 fresh raw positions each time. This clearly testifies the robustness and timeliness of the online tracking process.\n1 2 6 24 0\n1\n2\n3\n4\n5\n6 x 10\n4\nrange \u03c9 (hours)\n# c\nri ti c a l p o in\nts i n w\nin d o w\ncritical points\nFig. 8 Window states for varying ranges. 1 2 5 10\n0\n5\n10\n15\n\u03c1 (K positions/sec)\nO n lin\ne t ra\nc k in\ng t im\ne (\ns e c )\n\u03c9=10min \u03b2=1min 1 thread 2 threads 5 threads 11 threads 23 threads\nFig. 9 Parallelized online detection.\nWe should also stress that these execution costs are drastically reduced compared to our previous performance study in [33]. Apart from better memory management in the implementation of the method, this improvement should be also attributed to the extra module for noise reduction. Since each position qualified as noise is filtered out without further processing, this incurs no more checks against the rest of the positions reported per vessel. Moreover, it reduces the size of the trajectory synopsis (i.e., critical points retained out of the raw positions per vessel), since such erroneous deviations from the known course are suppressed. Figure 8 plots the average amount of critical points retained per window state for several window ranges \u03c9. It is no wonder that the number of critical points in window are proportional to its range, as this is actually the memory footprint of the maintained trajectory synopses. Space consumption is provably lightweight, since the trajectories of all vessels within the latest \u03c9 = 24 hours can be approximately reconstructed from the almost 52,000 critical point locations maintained in the respective window state."}, {"heading": "5.1.2 Performance under varying arrival rates", "text": "Admittedly, such swift processing of raw positions is largely due to the low arrival rate of the original AIS stream (on average \u03c1 \u224850 positions/sec). Hence, for a more stringent assessment of the online mobility tracking module, we performed some extra simulations, by admitting bigger chunks of data for processing at considerably increased arrival rates up to \u03c1 =10,000 positions/sec. Then, given the fleet size N , every ship appears as reporting almost twice per second; although quite improbable in practice, this makes sense as a stress test.\nAs our objective is timeliness, the window for the simulations in Figure 9 was set with range \u03c9 = 10 minutes and slide \u03b2 = 1 minute. We first discuss performance when employing a single processor to tackle the entire trajectory detection process. Observe that critical points are still issued promptly for \u03c1 = 1, 000 positions/sec, but the latency grows with increasing rates. Note that this cost includes reporting time for the resulting critical points (i.e., after detection), and this adds a significant overhead at higher arrival rates, as greater chunks of AIS updates inevitably generate more critical points. In the worst case tested with \u03c1 = 10, 000 positions/sec, the online\nmobility tracker accepts 600,000 fresh raw positions every minute; yet, it can output results in less than 13 seconds, well before the next window slide.\nThe fact that the mobility tracker updates and maintains each trajectory in isolation from the rest, offers great opportunities for more advanced scalability. Indeed, the trajectory detection process can be parallelized by using multiple processors: each one is responsible to monitor a distinct subset of vessels. In future work, we plan to study advanced parallelization schemes for trajectory detection. However, as a proof of concept, we implemented a simple scheme with a varying number of concurrent threads for the mobility tracker. Each thread consumes a substream of the incoming raw positions that correspond to the particular vessels it has been assigned to monitor. For simplicity, this subdivision is based on simple hashing over the MMSI identifier of the vessel, such that its positions are always propagated to the same thread to establish consistency in trajectory maintenance. The system load may not be evenly balanced among the threads and cannot account to fluctuations in the arrival rate, but still the burden of processing can be shared and thus boost performance. In this case, the overall tracking cost per window is considered the maximum of costs incurred by each of the concurrent threads in order to emit results. Obviously, this cost differs depending on the size of the incoming batch consumed by a thread in each window instantiation. Figure 9 plots the average tracking cost per window slide when multiple threads are used (due to hashing, a prime number of threads was specified). There are significant savings even when employing two threads only; the original stream is halved into two substreams, but the cost drops by almost two thirds as each thread exploits better the available system resources. With more threads the cost still drops, although at a lower pace due to the overhead from context switching and contention for system resources. Overall, even this simplified approach confirms that the trajectory detection process is capable of handling scalable volumes of streaming vessel positions and has great potential for parallelization and advanced load balancing."}, {"heading": "5.1.3 Approximation error", "text": "Preserving only critical points incurs a lossy approximation in trajectory representations. To assess the quality of those compressed trajectories, we estimated their deviation from the original ones (i.e., without discarding any raw positions except for those qualified as noise). Deviation can be computed from the pairwise distance between synchronized locations from the original and the compressed trajectory. If an original AIS point pi at time ti has been evicted as non-critical, then its corresponding time-aligned p\u2032i in the compressed trace can be estimated using linear interpolation along the path that connects the two critical points before and after ti. For each vessel that has reported M raw positions, we estimated the root mean square error (RMSE ) between its original and synchronized sequences of its locations as:\nRMSE = \u221a\u221a\u221a\u221a 1 M \u00b7 M\u2211 i=1 (H(pi, p \u2032 i)) 2\nwhich returns one RMSE estimate (in meters) per vessel trajectory and employs Haversine distanceH between geographic coordinates. Figure 10 illustrates the num-\n10 25 50 100 150 0\n500\n1000\n1500\n2000\n2500\n3000\n3500\nRMSE (meters)\n# V\nes se\nls\n\u03c9=6h \u03b2=1h \u2206\u03b8=15o\nFig. 10 Breakdown of RMSE for \u2206\u03b8 = 15o. 2 3 5 10 15 20\n25\n50\n75\n100\n125\n150\n\u2206\u03b8 (degrees)\nR M\nS E\n( m\net er\ns)\nmaxRMSE\navgRMSE\nFig. 11 Trajectory approximation quality.\nber of vessel trajectories for certain intervals of these RMSE estimates. For example, RMSE is between 10 and 25 meters for trajectories of 3093 vessels (almost half of the fleet), whereas RMSE less than 10 meters occurs for another 1428 vessels. In contrast, only 3 vessels were found with RMSE above 100 meters. Although parametrization of the mobility tracker is common for all vessels, this result proves that it can offer a correct (or at least fairly trustful) approximation in almost all cases.\nFigure 11 plots the average and maximum RMSE over the entire fleet for several values of turn threshold \u2206\u03b8, which is used to recognize significant changes in heading. As discussed in Section 3.2, the degree of trajectory approximation is mostly sensitive to parameter \u2206\u03b8 compared to the rest in Table 3 and this is reflected on the plot. Both error estimates escalate as this angle tolerance gets more relaxed. In the worst case for\u2206\u03b8 = 20o, average RMSE is only 22 meters and the maximum RMSE ever observed is 133 meters, which are negligible compared to the much larger size of open-sea vessels, and also considering the discrepancies inherent in GPS positioning and AIS transmissions. In practice, a moderate threshold of 10o or 15o may be adequate for balancing compression efficiency without losing important details in vessel mobility. Therefore, the suggested method can provide quite acceptable accuracy and can capture most, if not all, critical changes along each vessel\u2019s course."}, {"heading": "5.1.4 Compression efficiency", "text": "In this experiment, we examine the efficiency of our prototype in keeping only major trajectory characteristics as critical points and discard the rest. In order to measure the compression ratio accomplished by online trajectory tracking, we compared the amount of discarded points against the originally relayed locations per vessel. A compression ratio close to 1 signifies stronger data reduction, as the vast majority of original locations are dropped. The red line plot in Figure 12 depicts measurements of this ratio with varying tolerance angles for detecting changes in heading. With a lower \u2206\u03b8, even slight deviations in vessel direction can be spotted, and thus extra critical points get reported. Bar charts in Figure 12 illustrate the amount of critical points in each class (gap, low speed, speed change, stop, turn) retained from the en-\n2 3 5 10 15 20 0\n2\n4\n6\n8\n10\n12\n14\nx 10 6\n\u2206\u03b8 (degrees)\n# cr\niti ca\nl p oi\nnt s\n\u03c9=6h \u03b2=1h \u2206T=10min\n0.75\n0.9\n0.95\n0.98\n1\nC om\npr es\nsi on\nr at\nio\ncompression ratio gap low speed speed change stop turn\nFig. 12 Compression for varying \u2206\u03b8. 5 10 15 30 60 0\n2\n4\n6\nx 10 6\n\u2206T (minutes)\n# cr\niti ca\nl p oi\nnt s\n\u03c9=6h \u03b2=1h \u2206\u03b8=15o\n0.75\n0.9\n0.95\n0.98\n1\nC om\npr es\nsi on\nr at\nio\ncompression ratio gap low speed speed change stop turn\nFig. 13 Compression for varying period \u2206T .\ntire dataset. Clearly, every further increase in threshold\u2206\u03b8 suppresses more and more turning points and only marginally affects the share of other classes, incurring extra reduction in the total amount of emitted critical points. Hence, relaxing this parameter value leads to a more intense compression. Most importantly, compression ratio always remains above 92%, and with a more relaxed \u2206\u03b8 it reaches as much as 98%. In this latter case, only 2% of the original locations survive as critical, mostly by eliminating local manoeuvres of little impact on vessel\u2019s course. Eliminating noise also plays an important role in data reduction, as erroneous deviations are dropped and no points need be retained.\nA similar pattern regarding reduction efficiency can be observed in Figure 13 with respect to varying periods\u2206T for detecting gaps in communication. Not surprisingly, it is the amount of critical points marking those gap periods that gets reduced with increasing thresholds\u2206T . This time, reduction ratio is never below 96%, even though many more points are required to keep track that contact was lost even for 5 minutes. In a streaming context, such high compression ratios may lead to reduced system load in subsequent stages of the analysis, without sacrificing quality, as discussed earlier."}, {"heading": "5.1.5 Quality of synopses", "text": "As raw AIS locations pass through the trajectory detection module in successive window instantiations, they get characterized according to their significance on vessel mobility. Figure 14 illustrates a breakdown of the resulting classifications after the input stream was exhausted and all critical points were detected for the entire 3-month period. More than half of the relayed raw positions indicate a \u201cnormal\u201d course, i.e., a vessel moves according to its known velocity vector with a steady speed and heading. Thus, apart from notifying on the current position of each vessel, such points practically do not alter its trajectory and can be safely discarded without any further consideration. In addition, almost one out of five original positions is classified as noise for reasons explained in Section 3.1. It must be stressed that the vast majority of such points are not really \u201coff-course\u201d positions from the reporting vessel, but they actually fall along its route. However, due to their delayed arrival, these locations\nnormal: 51.3%\ngap: 0.8%stopped: 27%\nspeed change: 0.1%\nturn: 1.5%\nnoise: 19.3%\nlow speed: < 0.01%\nFig. 14 Classified raw locations of all vessels.\nturn: 60%\nspeed change: 3.5% stopped: 4.5%\nlow speed: < 0.1%\ngap: 32%\nFig. 15 Characterization of critical points.\nfalsely indicate the vessel as moving back and forth in an agitating manner with no obvious reason, hence they should be purged altogether.\nBut it is the remaining vessel locations, after eliminating redundancy and noise, which get actually classified as critical points and can be used in trajectory summarization. As Figure 14 testifies, there are relatively very few cases (about 0.1% of the raw data) in which vessels either move at low speed or they change their speed considerably. This is to be expected, since vessels usually follow their planned course and they typically manoeuvre when arriving to or departing from ports. Gaps in communication account for about 0.8% of the raw data. Although we observed that this phenomenon is rather frequent in practice, we note that at most two points are used to delimit this period and thus indicate the loss of contact with the respective vessel. Locations indicating turns are very important and must be certainly considered in trajectory representation. In fact, these points are roughly 1.5% of the total, since only significant deviations (over 15o) from the known course qualify for a turn, even though possibly emitting a series of such critical points in case of smooth turns as depicted in Figure 3(b). Finally, about 27% of the raw positions are emitted when vessels are idle, most usually when anchored in a port. As discussed in Section 3, instead of keeping all these points, we collect successive \u201cpause\u201d events occurring within a small distance and merge them into a collective \u201cstop\u201d event located at their centroid. This incurs huge savings in the resulting synopses, leading into much more concise trajectory representations that can be highly usable in subsequent query processing and offline analytics.\nThis dramatic effect on summarization is much more evident in Figure 15, which plots a breakdown of the accumulated critical points after processing the entire dataset. The resulting trajectories mainly consist of turning points between stops with some occasional changes in speed, but rather frequent communication gaps. Indeed, 60% of critical points are turning points, which are only 1.5% of the original AIS locations (Fig. 14). Points indicating gap periods are almost 32% of the critical points, testifying the frequent loss of contact with vessels on the move. In contrast, long-term stops comprise a meagre 4.5% in the resulting trajectory synopses, since locations that belong to the same stop event are compressed into a single centroid that suffices to designate that the vessel is idle during this period. Apart from redundant \u201cnormal\u201d points and eliminating the inherent noise, condensing these stops really adds much to the reduction efficacy of the trajectory detection module, offering a valuable semantic interpretation of the motion features.\nAs an offline, post-processing step, we have reconstructed trajectories from the entire sequence of critical points accumulated per vessel. In effect, the long motion history of a ship can be broken up into shorter \u201ctrips\u201d between identified stop points, which usually indicate anchorage at ports. Table 4 lists representative statistics from these approximate trajectories, and offers insight on a possible offline usage of the results from trajectory summarization. It turns out that a typical trip spanning several hours over a long distance (more than 131km) can be approximated with 48 points only; once more, this confirms the strong reduction effect of the method. Note that almost 5% of the detected critical points belong to \u201copen-ended\u201d trips, as certain vessels were only spotted while traversing the Aegean without anchoring there.\n5.2 Assessment of Complex Event Recognition\nThe trajectory detection module compresses a vessel position stream to a stream of critical movement events (ME)s. Each such event is represented by predicates expressing the activity of the vessel, its coordinates and its velocity (see Section 4). This way, the ME stream given to RTEC includes 15,884,253 predicates. In addition to this stream, RTEC makes use of real data consisting of protected areas, such as NATURA areas, represented as polygons, and ports, represented as points, across the Greek seas. The dataset has 3,966 protected areas with a total of 78,418 edges, and 64 ports. The size of the grid is 720\u00d7900 km2. Given this combination of event stream and static geographical information, RTEC recognizes the following CEs: illegal shipping, suspicious vessel delay, vessel rendezvous, suspicious areas, vessel pursuit, and package picking."}, {"heading": "5.2.1 Grid partitioning", "text": "Figure 16 shows the results from a first set of experiments in which we attempted to determine the optimal grid granularity/cell size. Starting with a grid having 5\u00d75=25 cells (with a cell size of 138\u00d7170 km2), we increased the number of cells along each dimension, up to 90\u00d790= 8,100 cells (each cell being 9\u00d711 km2 wide). Figure 16(a) shows the average CE recognition times in CPU seconds for each different grid. Both the window \u03c9 and the slide \u03b2 are set to 1 hour. The worst grid configuration (90\u00d790) is almost two times slower than the best (10\u00d710), but in all cases the average time is within the same order of magnitude (and less than 3 seconds). Figure 16(b) shows the average number of recognized CEs for each different grid as a stack plot. The number of recognized CEs shows a decreasing trend initially, with a tendency to stabilize after grid configuration 30\u00d730. The reason for\nthe difference in the number of detected CEs lies in the way the respective patterns are defined. Most of the CE patterns are grid-independent. Therefore, the number of recognized CEs remains stable across all grid configurations. On the other hand, possibleRendezvous , as defined by rule (3), depends on the size of the grid cells. Recall that the place of vessel rendezvous cannot be determined precisely, since vessels stop transmitting AIS signals during the time of the meeting. Therefore, we can only define possibleRendezvous in terms of the cells in which the vessels in question stopped (respectively resumed) transmitting AIS signals. As a result, when the size of the cells increases, more possibleRendezvous CEs are being recognized. For this reason, instead of choosing the 10\u00d710 grid for the remaining experiments, we opted for the 30\u00d730 one, which has comparable time performance and a stable number of detected CEs."}, {"heading": "5.2.2 Performance under varying window sizes and distributed configurations", "text": "Next, we proceed with a more thorough analysis of the performance of RTEC. Figure 17 shows the results of experiments under various window sizes and distributed configurations. First, we used a single processor to perform CE recognition for all 6,425 vessels, 3,966 areas and 64 ports. We subsequently employed multiple processors on which RTEC operated in parallel, by following a data partitioning scheme. We divided the grid covering the surveillance area into multiple sub-grids (groups of adjacent cells) whose number was equal to that of the processors used in parallel. Each processor was responsible for the areas and ports located in, and the vessels passing through its assigned sub-grid. We used three distributed settings: performing CE recognition on two, four and twelve processors. We made an attempt to evenly distribute the load of MEs among the different processors, by exhaustively searching for the best configuration. The different sub-grids were required to be compact rectangles without dispersed cells. As a result, we did not take into account solutions with sub-grids of arbitrary shapes and the load distribution was thus not the best possible. This is an off-line process that takes place only once.\nFigure 17(a) shows the average CE recognition times, including the time taken for spatial indexing (see Section 4.2). The slide \u03b2 is 1 hour while the window \u03c9 ranges from 1 hour to 24 hours. Figure 17(b) shows the average number of MEs for each setting. In the case of a single processor, the window ranges from \u22487,200 MEs (1 hour) to 175,000 MEs (24 hours). In the distributed settings\u2014two, four and twelve processors for CE recognition\u2014 the input MEs are forwarded to the appropriate processor according to vessel location. For instance, when twelve processors are used in parallel, each one of them processes \u2248700 MEs for the 1 hour window, and 17,000 MEs for the 24 hour window. Figure 17(c) shows the average number of CEs for each setting. This number also depends on the window size. In the case of a single processor, e.g., for 1 hour windows approximately 150 CEs are recognized, while for 24 hour windows RTEC recognizes around 2,900 CEs. We do not show memory consumption figures because memory usage is negligible and stable.\nFigure 17(a) shows that we can achieve a significant performance gain by running RTEC in parallel. As the window size increases, the gain becomes more pronounced. Furthermore, Figure 17(a) shows that RTEC supports real-time CE recognition. E.g. for a window of 6 hours, RTEC recognizes all CEs in 14 sec when a single processor is used, and in 0.4 sec when twelve processors are used in parallel."}, {"heading": "5.2.3 Tolerance to irrelevant events", "text": "In the experiments presented so far, the input stream consisted of critical MEs, i.e. all events of the input stream were part of the CE patterns and thus activated the recognition process. In several applications, however, the CE recognition module has to deal with input streams including several events that are irrelevant to CE pattern matching. To test the tolerance of RTEC to irrelevant input events, we performed experiments in which, in addition to the critical MEs, we retained a percentage of the normal events, i.e. the ones not annotated as critical by the trajectory detection module. In these experiments, RTEC has to skip over the normal events in order to find the critical MEs expressing the CE patterns. Figures 18 and 19 shows the results from this set of ex-\nperiments; the percentage of normal events ranges from 0% (the input stream consists only of the 16M critical MEs) to 100% (the input stream consists of all 262M normal events and the 16M critical MEs). Both the window \u03c9 and the slide \u03b2 are set to 1 hour. The system performance, both with respect to CE recognition times and memory usage is quite robust (see Figure 18(a)), even though the average number of input events, as shown in Figure 18(b), increases linearly. Predictably, the average number of recognized CEs remains the same. These experiments were run on twelve cores.\nFigures 19(a)\u2013(b) show the actual number of input events and recognized CEs respectively, for four of the twelve cores. As already mentioned, the grid partitioning is not perfectly balanced, and thus some cores have a higher load in terms of input events. Figure 19(b) shows that the number of recognized CEs does not depend only on the number of input events. For example, the top right core produces consistently more CEs, although it accepts more or less the same number of critical MEs as the top left and the bottom left cores. More importantly, Figure 19(a) illustrates the effect of the compression achieved by the trajectory detection module. Without this compression, RTEC would have to treat each incoming event as potentially critical, thus taking into consideration all input events shown in this figure (see the 100% setting), as opposed to just considering the events annotated as critical by the trajectory detection module (see the 0% setting)."}, {"heading": "5.2.4 Artificially enlarged data streams", "text": "To test further the performance of RTEC, we created enlarged data streams by inserting extra critical MEs to the real dataset. No normal events were added for these experiments. For each vessel, we replicated its trajectories by a specified number of times (increase factor). The replicated trajectories were assigned to new vessels which do not exist in the original dataset, thus adding more vessels as well. An increase factor X implies that we have exactly X times as many critical MEs and X times as many vessels, compared to the original dataset of\u224816,000,000 MEs and\u22486,500 vessels. We varied the increase factor from 20, producing datasets of \u2248128,000 vessels\nand 320,000,000 MEs, to 200, creating data of\u22481,280,000 vessels and 3,200,000,000 MEs. To the best of our knowledge, this is the most comprehensive evaluation of CE recognition techniques in the maritime domain. Compared to e.g. [40], our surveillance area, number of vessels and data volume are substantially larger. Moreover, CE recognition needs to consider (a large number of) protected areas.\nFigure 20 displays the experimental results. Twelve processors are used in parallel, the slide \u03b2 is set to 1 min, and the window sizes \u03c9 are 60 min (1 hour) and 10 min. We set two \u2018response limits\u2019 to 10 sec and 60 sec\u2014we stopped performing tests once the response limit of 60 sec was exceeded.\nFigure 20(a) shows the average CE recognition times while Figure 20(b) the average memory usage. As expected, a smaller window produces both lower recognition times and lower memory usage. Figures 20(c) and 20(d) display respectively the average number of MEs and CEs. We also show how RTEC performs with respect to the two response limits of 10 and 60 sec. Assume, e.g. that we want to guarantee that RTEC responds within 60 sec. In this case, for a window of 60 min, RTEC can handle data streams that are \u224870 times larger (\u2248450,000 vessels) than the original one (see Figure 20(a)). This means that a window may include up to approximately 400,000 MEs, while recognizing around 105,000 CEs (see the 60 sec response limit markers on the 60 min window lines in Figures 20(c) and 20(d) respectively). Memory consumption is 4,9 GB (see the 60 sec response limit marker on the 60 min window line in Figure 20(b)). Similarly, for a window of 10 min, RTEC is guaranteed to respond within 60 sec even in data streams that are 160 times larger than the original (\u22481,000,000 vessels).\nComparing the 60 min window/80 increase factor setting against the 10 min window/200 increase factor setting, we see that the latter has fewer MEs and CEs (see the right-most marks of the window lines in Figures 20(c) and 20(d)). However, both the CE recognition times and memory usage are higher (see the right-most marks of the window lines in Figures 20(a) and 20(b)). One reason for this behavior is that the complexity of the recognition task is higher in the 10 min window/200 increase factor setting. A simple measure of complexity in CE recognition is the ratio of CEs to MEs. This ratio is depicted in Figure 20(e).\nAs a further step towards understanding RTEC\u2019s behavior, we investigated how it stores some of its internal structures. During CE recognition, RTEC maintains several lists of time intervals for different types of event and fluent. In Figure 20(f), we plot the average number of instances of these lists. The results show that these lists are mostly responsible for the increased recognition times and memory usage, as the increase factor grows. More specifically, the lists concerning possibleRendezvous and possiblePicking event (see rules (3) and (5) respectively), require that all combinations of vessels within some area are checked. Therefore, when the number of vessels increases, as is the case with replicated trajectories, the number of possible combinations is increased by the square of the number of vessels, hence the parabolic lines in Figure 20(f). On the other hand, a window increase does not result in many more vessels being considered. Many of the added MEs may refer to extra messages transmitted by the same vessel over the longer duration of a larger window. Note that this is a different kind of complexity than the one reflected in the ratio of CEs to MEs. In the case where we have more combinations to check, this does not necessarily imply that proportionally more CEs will be recognized, since their definitions might not be satisfied. RTEC has to check all possible combinations though, thus incurring a higher latency and memory consumption."}, {"heading": "6 System Deployment", "text": "In order to verify its operational capabilities, we have set up our system to monitor live AIS feeds from vessels across the Aegean Sea. Fresh positions are periodically\nfetched from a database (maintained by the University of the Aegean) that receives any transmitted AIS messages. Each retrieved record only includes vessel identification, geographic position, and a timestamp. Currently, fresh input is fetched every hour (the sliding step \u03b2 of the window employed in this instance), although a different period may be chosen. Typically, we observed that up to 40,000 fresh records can be fetched per hour, which is a rather moderate amount of geostreaming data compared with the arrival rates simulated in our empirical validation (cf. Section 5).\nOnce each batch of fresh data arrives, it is being consumed by the online mobility tracker in order to identify any critical points in each vessel\u2019s course. The resulting points with their annotations (turn, stop, etc.) are then archived into a PostgreSQL database. But the Trajectory Exporter module also converts them into KML files for map visualization in a web application, as illustrated in Figure 21. Critical points may be exported upon detection, but in order to avoid duplication of data across the modules, we opt to export them once they get evicted from the sliding window (currently set to a range of \u03c9 =6 hours). Hence, exported results currently have a lag of 6 hours from the current time, but this is only a configuration parameter.\nThis deployment against real-time AIS messages collected across the Aegean has been activated since April 2015. This confirms that our system can integrate with a precious source of online data, offering to marine experts and authorities the means to instantly locate, recognize, and correlate events from real-time vessel traces."}, {"heading": "7 Summary & Future Work", "text": "In this paper, we introduced a system that monitors activity of thousands of vessels and can instantly recognize events with a potentially serious impact on the environment and on safe navigation at sea. The system can sustain massive streaming messages from vessels and can filter out noise and redundant positions along their course. Hence, it can retain only succinct synopses of vessel trajectories, drastically reducing the original path into few critical points that convey major motion features. As empirically validated, with a proper parametrization our suggested trajectory summarization may incur a compression ratio of almost 98%, with tolerable error in the resulting approximation. Moreover, trajectory detection is highly scalable and can be easily parallelized in order to sustain very high arrival rates in the input stream. Furthermore, this reduced information may be readily analyzed online for Complex Event (CE) recognition. Equipped with efficient pattern matching algorithms, this module correlates critical trajectory positions with static geographical data, and detects suspicious or dangerous situations, such as illegal shipping, suspicious vessel delay, vessel rendezvous, suspicious area, vessel pursuit and package picking. We showed that the CE recognition module performs in real-time using real data as well as synthetically enlarged datasets that include up to 1,28M vessels and 3,2B critical positions.\nWe plan further extensions and improvements in the existing implementation. First, since trajectory detection may be sensitive to parameters, we intend to study advanced methods for adaptive, auto-calibrated parameterization depending on the size, the type, and the motion patterns of vessels. Also, creating CE patterns manually is painstaking and error-prone. To facilitate the process of CE pattern construction, we plan to employ a recent framework for incremental structure learning that takes advantage of Big Data in order to construct Event Calculus programs [19]. Besides, maritime surveillance exhibits various types of uncertainty [39]. AIS messages are often corrupt, with incorrect or missing fields. Furthermore, maritime CE patterns do not account for all possible situations. To deal with these issues, we have been developing an Event Calculus dialect for Markov Logic Networks [38]. This way, we can use weight learning techniques [12] for estimating the confidence values of CE patterns, and subsequently perform probabilistic inference. Maritime surveillance may also benefit from combining multiple data sources. For example, the use of heterogeneous data sources, as in [40], can help in constructing more refined CE patterns. We aim to increase our data sources in order to improve monitoring quality and possibly recognize additional events. Last, but not least, it would be challenging to apply ideas from our methodology against other sources of big geostreaming mobility data, e.g., traces of aircrafts or vehicles. Although the particular definitions of events may differ, as well as their configurations, we expect that our methodology may still be valid.\nAcknowledgements This work was funded partly by the \u201cAMINESS: Analysis of Marine INformation for Environmentally Safe Shipping\u201d project, which was co-financed by the European Fund for Regional Development and from Greek National funds, and partly by the EU-funded H2020 datACRON project. We wish to thank IMIS Hellas, our partner in AMINESS, for providing the AIS dataset used in the experiments."}], "references": [{"title": "Efficient pattern matching over event streams", "author": ["J. Agrawal", "Y. Diao", "D. Gyllstrom", "N. Immerman"], "venue": "SIGMOD", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2008}, {"title": "How not to drown in a sea of information: An event recognition approach", "author": ["E. Alevizos", "A. Artikis", "K. Patroumpas", "M. Vodas", "Y. Theodoridis", "N. Pelekis"], "venue": "IEEE International Conference on Big Data", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "The CQL continuous query language: semantic foundations and query execution", "author": ["A. Arasu", "S. Babu", "J. Widom"], "venue": "The VLDB Journal 15(2), 121\u2013142", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2006}, {"title": "An event calculus for event recognition", "author": ["A. Artikis", "M.J. Sergot", "G. Paliouras"], "venue": "IEEE Trans. Knowl. Data Eng. 27(4), 895\u2013908", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "A data stream language and system designed for power and extensibility", "author": ["Y. Bai", "H. Thakkar", "H. Wang", "C. Luo", "C. Zaniolo"], "venue": "CIKM, pp. 337\u2013346", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2006}, {"title": "Cayuga: a high-performance event processing engine", "author": ["L. Brenna", "A.J. Demers", "J. Gehrke", "M. Hong", "J. Ossher", "B. Panda", "M. Riedewald", "M. Thatte", "W.M. White"], "venue": "SIGMOD, pp. 1100\u20131102", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2007}, {"title": "Spatio-temporal data reduction with deterministic error bounds", "author": ["H. Cao", "O. Wolfson", "G. Trajcevski"], "venue": "VLDB Journal 15(3), 211\u2013228", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2006}, {"title": "Negation as failure", "author": ["K. Clark"], "venue": "H. Gallaire, J. Minker (eds.) Logic and Databases, pp. 293\u2013322. Plenum Press", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1978}, {"title": "TESLA: a formally defined event specification language", "author": ["G. Cugola", "A. Margara"], "venue": "DEBS, pp. 50\u201361", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2010}, {"title": "Efficiently correlating complex events over live and archived data streams", "author": ["N. Dindar", "P.M. Fischer", "M. Soner", "N. Tatbul"], "venue": "DEBS, pp. 243\u2013254", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2011}, {"title": "Chronicle recognition improvement using temporal focusing and hierarchisation", "author": ["C. Dousson", "P.L. Maigat"], "venue": "IJCAI, pp. 324\u2013329", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2007}, {"title": "Adaptive subgradient methods for online learning and stochastic optimization", "author": ["J. Duchi", "E. Hazan", "Y. Singer"], "venue": "J. Mach. Learn. Res. 12, 2121\u20132159", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2011}, {"title": "Rule-based composite event queries: the language xchangeeq and its semantics", "author": ["M. Eckert", "F. Bry"], "venue": "Knowledge Information Systems 25(3), 551\u2013573", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2010}, {"title": "A density-based algorithm for discovering clusters in large spatial databases with noise", "author": ["M. Ester", "H. Kriegel", "J. Sander", "X. Xu"], "venue": "KDD, pp. 226\u2013231", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1996}, {"title": "On the representation and exploitation of context knowledge in a harbor surveillance scenario", "author": ["J. Garcia", "J. Gomez-Romero", "M. Patricio", "J. Molina", "G. Rogova"], "venue": "FUSION, pp. 1\u20138", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2011}, {"title": "Data stream warehousing (tutorial)", "author": ["L. Golab", "T. Johnson"], "venue": "ACM SIGMOD, pp. 949\u2013952", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2013}, {"title": "The automatic identification system of maritime accident risk using rule-based reasoning", "author": ["B. Idiri", "A. Napoli"], "venue": "SoSE, pp. 125\u2013130", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2012}, {"title": "Detection of malicious AIS position spoofing by exploiting radar information", "author": ["F. Katsilieris", "P. Braca", "S. Coraluppi"], "venue": "FUSION, pp. 1196\u20131203", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2013}, {"title": "Incremental learning of event definitions with inductive logic programming", "author": ["N. Katzouris", "A. Artikis", "G. Paliouras"], "venue": "Machine Learning 100(2\u20133), 555\u2013585", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2015}, {"title": "Geospatial stream query processing using Microsoft SQL Server Streaminsight", "author": ["S.J. Kazemitabar", "U. Demiryurek", "M.H. Ali", "A. Akdogan", "C. Shahabi"], "venue": "PVLDB 3(2), 1537\u20131540", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2010}, {"title": "A logic-based calculus of events", "author": ["R. Kowalski", "M. Sergot"], "venue": "New Generation Computing 4(1)", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1986}, {"title": "Semantics and implementation of continuous sliding window queries over data streams", "author": ["J. Kr\u00e4mer", "B. Seeger"], "venue": "ACM Transactions on Database Systems 34(1)", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2009}, {"title": "Evaluation of a workshop to capture knowledge from subject matter experts in maritime surveillance", "author": ["J. van Laere", "M. Nilsson"], "venue": "FUSION, pp. 171\u2013178", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2009}, {"title": "Efficient real-time trajectory tracking", "author": ["R. Lange", "F. D\u00fcrr", "K. Rothermel"], "venue": "VLDB Journal 20(5), 671\u2013 694", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2011}, {"title": "Composite subscriptions in content-based publish/subscribe systems", "author": ["G. Li", "H.A. Jacobsen"], "venue": "Middleware", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2005}, {"title": "Spatiotemporal compression techniques for moving point objects", "author": ["N. Meratnia", "R. de By"], "venue": "EDBT, pp. 765\u2013782", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2004}, {"title": "Adaptive filtering of imprecisely time-stamped measurements with application to AIS networks", "author": ["L.M. Millefiori", "P. Braca", "K. Bryan", "P. Willett"], "venue": "FUSION, pp. 359\u2013365", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2015}, {"title": "UpStream: A storage-centric load management system for real-time update streams", "author": ["A. Moga", "N. Tatbul"], "venue": "PVLDB 4(12), 1442\u20131445", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2011}, {"title": "Computational Geometry in C", "author": ["J. O\u2019Rourke"], "venue": "Cambridge University Press", "citeRegEx": "29", "shortCiteRegEx": null, "year": 1998}, {"title": "Vessel pattern knowledge discovery from AIS data: A framework for anomaly detection and route prediction", "author": ["G. Pallotta", "M. Vespe", "K. Bryan"], "venue": "Entropy 15(6), 2218\u20132245", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2013}, {"title": "ECA-RuleML: An approach combining ECA rules with temporal interval-based KR event/action logics and transactional update logics", "author": ["A. Paschke"], "venue": "Tech. Rep. 11, TU M\u00fcnchen", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2005}, {"title": "Rule-based event processing and reaction rules", "author": ["A. Paschke", "A. Kozlenkov"], "venue": "RuleML, LNCS 5858", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2009}, {"title": "Event recognition for maritime surveillance", "author": ["K. Patroumpas", "A. Artikis", "N. Katzouris", "M. Vodas", "Y. Theodoridis", "N. Pelekis"], "venue": "EDBT, pp. 629\u2013640", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2015}, {"title": "Maintaining consistent results of continuous queries under diverse window specifications", "author": ["K. Patroumpas", "T. Sellis"], "venue": "Information Systems 36(1), 42\u201361", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2011}, {"title": "Online amnesic summarization of streaming locations", "author": ["M. Potamias", "K. Patroumpas", "T. Sellis"], "venue": "SSTD, pp. 148\u2013165", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2007}, {"title": "On the declarative semantics of stratified deductive databases and logic programs", "author": ["T. Przymusinski"], "venue": "Found. of Deductive Databases and Logic Programming. Morgan", "citeRegEx": "36", "shortCiteRegEx": null, "year": 1987}, {"title": "Maritime situation analysis framework: Vessel interaction classification and anomaly detection", "author": ["H.Y. Shahir", "U. Glasser", "A.Y. Shahir", "H. Wehn"], "venue": "Big Data, pp. 1279\u20131289", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2015}, {"title": "Probabilistic event calculus for event recognition", "author": ["A. Skarlatidis", "G. Paliouras", "A. Artikis", "G. Vouros"], "venue": "ACM Transactions on Computational Logic 16(2)", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2015}, {"title": "Fusing uncertain knowledge and evidence for maritime situational awareness via markov logic networks", "author": ["L. Snidaro", "I. Visentini", "K. Bryan"], "venue": "Information Fusion 21, 159\u2013172", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2015}, {"title": "A complex event processing approach to detect abnormal behaviours in the marine environment", "author": ["F. Terroso-Saenz", "M. Valdes-Vela", "A.F. Skarmeta-Gomez"], "venue": "Information Systems Frontiers pp. 1\u201316", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2015}, {"title": "Updating and querying databases that track mobile units", "author": ["O. Wolfson", "A. Sistla", "S. Chamberlain", "Y. Yesha"], "venue": "Distributed & Parallel Databases 7(3), 257\u2013287", "citeRegEx": "41", "shortCiteRegEx": null, "year": 1999}, {"title": "On complexity and optimization of expensive queries in complex event processing", "author": ["H. Zhang", "Y. Diao", "N. Immerman"], "venue": "SIGMOD, pp. 217\u2013228", "citeRegEx": "42", "shortCiteRegEx": null, "year": 2014}], "referenceMentions": [{"referenceID": 16, "context": "Maritime surveillance systems have been attracting considerable attention for economic as well as environmental reasons [17, 40, 39].", "startOffset": 120, "endOffset": 132}, {"referenceID": 39, "context": "Maritime surveillance systems have been attracting considerable attention for economic as well as environmental reasons [17, 40, 39].", "startOffset": 120, "endOffset": 132}, {"referenceID": 38, "context": "Maritime surveillance systems have been attracting considerable attention for economic as well as environmental reasons [17, 40, 39].", "startOffset": 120, "endOffset": 132}, {"referenceID": 9, "context": "For instance, the system in [10] focuses on recency-probing pattern queries against both live and archived streams.", "startOffset": 28, "endOffset": 32}, {"referenceID": 27, "context": "UpStream platform [28] offers low latency response to continuous queries over massively updated data, but it lacks support for the specific demands of trajectory detection.", "startOffset": 18, "endOffset": 22}, {"referenceID": 15, "context": "Besides, automating ingestion of streaming data feeds from various sources into a data warehouse is also important [16], but does not pay attention to complex event recognition.", "startOffset": 115, "endOffset": 119}, {"referenceID": 19, "context": "Our particular interest is on geostreaming data [20] from sailing vessels acquired continuously over time, which must be processed on-the-fly in order to recognize important phenomena regarding their movement and their interaction with the maritime", "startOffset": 48, "endOffset": 52}, {"referenceID": 36, "context": "In [37] an approach for anomaly detection and classification of vessel interactions is presented.", "startOffset": 3, "endOffset": 7}, {"referenceID": 32, "context": "This paper is an extended and revised version of previous works presented in [33, 2], and developed in the context of the AMINESS project3.", "startOffset": 77, "endOffset": 84}, {"referenceID": 1, "context": "This paper is an extended and revised version of previous works presented in [33, 2], and developed in the context of the AMINESS project3.", "startOffset": 77, "endOffset": 84}, {"referenceID": 19, "context": "In order to meet the real-time requirements of the geostreaming paradigm [20], this online process necessitates the use of a sliding window [22, 34].", "startOffset": 73, "endOffset": 77}, {"referenceID": 21, "context": "In order to meet the real-time requirements of the geostreaming paradigm [20], this online process necessitates the use of a sliding window [22, 34].", "startOffset": 140, "endOffset": 148}, {"referenceID": 33, "context": "In order to meet the real-time requirements of the geostreaming paradigm [20], this online process necessitates the use of a sliding window [22, 34].", "startOffset": 140, "endOffset": 148}, {"referenceID": 6, "context": "4 Typically for trajectories [7], linear interpolation is applied between each pair of successive measurements (pi, \u03c4i) and (pi+1, \u03c4i+1).", "startOffset": 29, "endOffset": 32}, {"referenceID": 6, "context": "In the literature, some strategies like [7, 24, 26] specify an error tolerance for the resulting approximation.", "startOffset": 40, "endOffset": 51}, {"referenceID": 23, "context": "In the literature, some strategies like [7, 24, 26] specify an error tolerance for the resulting approximation.", "startOffset": 40, "endOffset": 51}, {"referenceID": 25, "context": "In the literature, some strategies like [7, 24, 26] specify an error tolerance for the resulting approximation.", "startOffset": 40, "endOffset": 51}, {"referenceID": 34, "context": "The memory footprint occupied by the compressed trajectory may also be a constraint in a single-pass evaluation [35].", "startOffset": 112, "endOffset": 116}, {"referenceID": 40, "context": "Mainly focusing on savings in communication cost, dead-reckoning policies like [41] may be employed on board of the moving objects to relay positional updates only upon significant deviation from the course already known to a centralized server.", "startOffset": 79, "endOffset": 83}, {"referenceID": 29, "context": "As argued in [30], noise reduction should not be confused with anomaly detection, because data must be cleaned in advance, before performing any analysis.", "startOffset": 13, "endOffset": 17}, {"referenceID": 13, "context": "In that particular work, the well-known DBSCAN clustering algorithm [14] was used to identify outlier positions, which could then be re-", "startOffset": 68, "endOffset": 72}, {"referenceID": 26, "context": "With respect to time delays, an adaptive filtering strategy was suggested in [27], which employed Kalman filters and Monte-Carlo simulations to sequentially detect such delays and probabilistically rearrange a \u201ccorrect\u201d timestamp order.", "startOffset": 77, "endOffset": 81}, {"referenceID": 17, "context": "Besides, a stochastic method can be used to cope with position spoofing [18] by exploiting auxiliary data from radars or comparing it with previously tracked information.", "startOffset": 72, "endOffset": 76}, {"referenceID": 3, "context": "The CE recognition module is based on the \u2018Event Calculus for Run-Time reasoning\u2019 (RTEC) [4].", "startOffset": 89, "endOffset": 92}, {"referenceID": 20, "context": "The Event Calculus [21] is a logic programming action language.", "startOffset": 19, "endOffset": 23}, {"referenceID": 35, "context": "RTEC has a formal, declarative semantics\u2014CE patterns in RTEC are (locally) stratified logic programs [36].", "startOffset": 101, "endOffset": 105}, {"referenceID": 5, "context": "In contrast, almost all complex event processing languages, including [6, 25, 1], and several data stream processing languages, such as ESL [5] that extends CQL [3], lack a rigorous, formal semantics [9].", "startOffset": 70, "endOffset": 80}, {"referenceID": 24, "context": "In contrast, almost all complex event processing languages, including [6, 25, 1], and several data stream processing languages, such as ESL [5] that extends CQL [3], lack a rigorous, formal semantics [9].", "startOffset": 70, "endOffset": 80}, {"referenceID": 0, "context": "In contrast, almost all complex event processing languages, including [6, 25, 1], and several data stream processing languages, such as ESL [5] that extends CQL [3], lack a rigorous, formal semantics [9].", "startOffset": 70, "endOffset": 80}, {"referenceID": 4, "context": "In contrast, almost all complex event processing languages, including [6, 25, 1], and several data stream processing languages, such as ESL [5] that extends CQL [3], lack a rigorous, formal semantics [9].", "startOffset": 140, "endOffset": 143}, {"referenceID": 2, "context": "In contrast, almost all complex event processing languages, including [6, 25, 1], and several data stream processing languages, such as ESL [5] that extends CQL [3], lack a rigorous, formal semantics [9].", "startOffset": 161, "endOffset": 164}, {"referenceID": 8, "context": "In contrast, almost all complex event processing languages, including [6, 25, 1], and several data stream processing languages, such as ESL [5] that extends CQL [3], lack a rigorous, formal semantics [9].", "startOffset": 200, "endOffset": 203}, {"referenceID": 12, "context": "Moreover, the semantics of event query languages and production rule languages often have an algebraic and less declarative flavor [13, 32].", "startOffset": 131, "endOffset": 139}, {"referenceID": 31, "context": "Moreover, the semantics of event query languages and production rule languages often have an algebraic and less declarative flavor [13, 32].", "startOffset": 131, "endOffset": 139}, {"referenceID": 30, "context": "RTEC is interval-based and thus avoids the related logical problems of time-point-based event processing approaches (see [31] for a discussion", "startOffset": 121, "endOffset": 125}, {"referenceID": 7, "context": "\u2018not\u2019 is negation-by-failure [8].", "startOffset": 29, "endOffset": 32}, {"referenceID": 14, "context": "CE recognition for maritime surveillance requires various types of spatial operation [15, 23].", "startOffset": 85, "endOffset": 93}, {"referenceID": 22, "context": "CE recognition for maritime surveillance requires various types of spatial operation [15, 23].", "startOffset": 85, "endOffset": 93}, {"referenceID": 10, "context": "This is in contrast to various state-of-the-art CE recognition approaches, such as [11, 22, 9, 42], which support very limited atemporal reasoning, thus being unsuitable for maritime monitoring.", "startOffset": 83, "endOffset": 98}, {"referenceID": 21, "context": "This is in contrast to various state-of-the-art CE recognition approaches, such as [11, 22, 9, 42], which support very limited atemporal reasoning, thus being unsuitable for maritime monitoring.", "startOffset": 83, "endOffset": 98}, {"referenceID": 8, "context": "This is in contrast to various state-of-the-art CE recognition approaches, such as [11, 22, 9, 42], which support very limited atemporal reasoning, thus being unsuitable for maritime monitoring.", "startOffset": 83, "endOffset": 98}, {"referenceID": 41, "context": "This is in contrast to various state-of-the-art CE recognition approaches, such as [11, 22, 9, 42], which support very limited atemporal reasoning, thus being unsuitable for maritime monitoring.", "startOffset": 83, "endOffset": 98}, {"referenceID": 28, "context": "using the ray crossings algorithm [29] for determining whether a point lies inside a polygon) only for those vessels/areas in the same or adjacent cells.", "startOffset": 34, "endOffset": 38}, {"referenceID": 1, "context": "The complete list may be found in [2].", "startOffset": 34, "endOffset": 37}, {"referenceID": 3, "context": "Further details about the reasoning engine of RTEC may be found at [4].", "startOffset": 67, "endOffset": 70}, {"referenceID": 32, "context": "We should also stress that these execution costs are drastically reduced compared to our previous performance study in [33].", "startOffset": 119, "endOffset": 123}, {"referenceID": 39, "context": "[40], our surveillance area, number of vessels and data volume are substantially larger.", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "To facilitate the process of CE pattern construction, we plan to employ a recent framework for incremental structure learning that takes advantage of Big Data in order to construct Event Calculus programs [19].", "startOffset": 205, "endOffset": 209}, {"referenceID": 38, "context": "Besides, maritime surveillance exhibits various types of uncertainty [39].", "startOffset": 69, "endOffset": 73}, {"referenceID": 37, "context": "To deal with these issues, we have been developing an Event Calculus dialect for Markov Logic Networks [38].", "startOffset": 103, "endOffset": 107}, {"referenceID": 11, "context": "This way, we can use weight learning techniques [12] for estimating the confidence values of CE patterns, and subsequently perform probabilistic inference.", "startOffset": 48, "endOffset": 52}, {"referenceID": 39, "context": "For example, the use of heterogeneous data sources, as in [40], can help in constructing more refined CE patterns.", "startOffset": 58, "endOffset": 62}], "year": 2016, "abstractText": "We present a system for online monitoring of maritime activity over streaming positions from numerous vessels sailing at sea. It employs an online tracking module for detecting important changes in the evolving trajectory of each vessel across time, and thus can incrementally retain concise, yet reliable summaries of its recent movement. In addition, thanks to its complex event recognition module, this system can also offer instant notification to marine authorities regarding emergency situations, such as risk of collisions, suspicious moves in protected zones, or package picking at open sea. Not only did our extensive tests validate the performance, efficiency, and robustness of the system against scalable volumes of real-world and synthetically enlarged datasets, but its deployment against online feeds from vessels has also confirmed its capabilities for effective, real-time maritime surveillance.", "creator": "LaTeX with hyperref package"}}}