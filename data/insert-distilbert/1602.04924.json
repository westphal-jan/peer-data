{"id": "1602.04924", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Feb-2016", "title": "Personalized Federated Search at LinkedIn", "abstract": "linkedin has grown momentum to become a platform hosting multiple diverse sources of information ranging from customer member group profiles, jobs, professional groups, slideshows etc. commonly given the existence of multiple sources, when a member issues a query like \" software engineer \", the member could look for software engineer status profiles, membership jobs or professional groups. to tackle this problem, we exploit a robust data - driven approach that extracts searcher intents from their profile data and recent activities at a large scale. the intents such as job seeking, hiring, automated content consuming are strategically used to construct features to personalize within federated search experience. we tested the approach on the linkedin oracle homepage and oracle a / b tests show significant improvements in member engagement. as of writing off this paper, the approach powers all profiles of federated search on linkedin homepage.", "histories": [["v1", "Tue, 16 Feb 2016 07:10:42 GMT  (283kb,D)", "http://arxiv.org/abs/1602.04924v1", "in Proceedings of the 24th ACM International on Conference on Information and Knowledge Management (CIKM 2015)"]], "COMMENTS": "in Proceedings of the 24th ACM International on Conference on Information and Knowledge Management (CIKM 2015)", "reviews": [], "SUBJECTS": "cs.IR cs.LG", "authors": ["dhruv arya", "viet ha-thuc", "shakti sinha"], "accepted": false, "id": "1602.04924"}, "pdf": {"name": "1602.04924.pdf", "metadata": {"source": "CRF", "title": "Personalized Federated Search at LinkedIn", "authors": ["Dhruv Arya", "Viet Ha-Thuc", "Shakti Sinha"], "emails": ["darya@linkedin.com", "vhathuc@linkedin.com", "ssinha@linkedin.com", "Permissions@acm.org."], "sections": [{"heading": null, "text": "Categories and Subject Descriptors H.4 [Information Systems Applications]: Miscellaneous\nGeneral Terms Theory\nKeywords Federated search, social network, ranking, machine learning, information retrieval"}, {"heading": "1. INTRODUCTION", "text": "LinkedIn has grown over the years from a professional networking site to becoming a platform containing multiple professional information sources such as member profiles, jobs, professional groups, member posts and slideshows. At the same time, the member base has also increased quickly and currently has more than 350 million members. The members visit the site for various reasons ranging from searching and recruiting candidates to looking for jobs or finding\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from Permissions@acm.org. CIKM\u201915, October 19\u201323, 2015, Melbourne, Australia. Copyright is held by the owner/author(s). Publication rights licensed to ACM. ACM 978-1-4503-3794-6/15/10 ...$15.00. DOI: http://dx.doi.org/10.1145/2806416.2806615 .\nprofessional content etc. As the number of information verticals and member base increase, the problem of serving the right information to fulfill each individual member\u2019s information need becomes more and more critical. This problem contains two subtasks including selecting the right verticals and aggregating the vertical results into a single ranking (See Figure 1) and typically is referred as federated search.\nThe area of federated search originated from meta search and has been actively researched in the field of information retrieval [5] and particularly in the context of Web search. Diaz [2] addresses the problem of vertical selection, i.e., whether or not to show a specific item above the Web results given a query. Ponnuswami et. al. [4] and Arguello et. al. [1] propose machine learning approaches for aggregating vertical results into single search result pages. They demonstrate effectiveness of the approaches on Bing search. More recently, Lefortier et. al. [3] present a way to blend individual vertical results and individual Web results with a case study on Yandex video search.\nHowever, the problem of federated search on LinkedIn presents unique challenges. First, the level of personalization in a platform like LinkedIn is much deeper than general Web search. For instance, if a member enters a\nar X\niv :1\n60 2.\n04 92\n4v 1\n[ cs\n.I R\n] 1\n6 Fe\nb 20\n16\nquery like \u201csoftware engineer\u201d, depending on if he or she is a recruiter, job seeker or professional content consumer, the member could expect to see software engineers\u2019 profiles, jobs or slideshows on the topic. Second, individual results and blocks of results from different verticals are often associated with different features. Moreover, even if a feature is common, it is not equally important to them. This challenge is similar to federated Web search. Nonetheless, unlike Web search which typically blends either blocks of results [1][4] or individual results [3] from different verticals, our system aggregates both individual results (e.g. jobs as shown in Figure 1) and blocks of vertical results (e.g. people and professional group verticals). Thus, the system has to normalize features and eventually make relevance scores comparable across result verticals and result types (individual vs. block). Third, in Web search, Web results are typically the primary vertical thus they can be used as a \u201cpivot\u201d to normalize scores of the other verticals [4]. In our problem, the primary verticals vary depending on queries and other search context which could includes searcher\u2019s data, past activities, location etc.\nTo overcome these challenges, we propose a data-driven approach to personalize federated search. Specifically, we mine members\u2019 data and their recent activities at a large scale to understand whether or not they currently have intent of hiring, job seeking or content consuming etc. This insight coupled with other signals are used to select verticals and aggregate vertical results into a single search result page personally relevant to each of our members. To make these signals comparable across different result categories, including verticals and result types (block vs. individual), we construct composite features combining the signals for each of the categories. Then, we let learning algorithms estimate different weights for all of the combinations (i.e., normalize the signals across the result categories) from training data.\nA/B tests done on the LinkedIn homepage shows improvements in member engagement and downstream traffic to the verticals. At the time of this writing, the work currently powers all of the federated search on the LinkedIn homepage. We organize the rest of the paper as follows. Section 2 details how we formulate federated search problem and our proposed approach. Section 3 describes searcher intent features and other signals used in the system. We discuss experimental results in Section 4. Finally, concluding remarks can be found in Section 5."}, {"heading": "2. OVERALL APPROACH", "text": ""}, {"heading": "2.1 Problem Statement and Overall Framework", "text": "Given a pair of (query, searcher), our task is to select from a list of all possible verticals including people (members), jobs, companies, professional groups, member posts, slideshows etc. a primary vertical and a set of secondary verticals, then rank the primary individual results and the secondary vertical blocks in a single ranked list as shown in Figure 1, without changing the order in the primary vertical. The reason for this constraint is two fold. First, we believe the base ranker of each vertical is the best one to rank results within its domain. Second, this keeps member experience consistent between federated search and vertical search.\nThe overall framework is described in Figure 2. When a member issues a query q, the query is passed to verticals and triggers the corresponding vertical search engines to get\nthe top K results for each. In preliminary vertical selection phase, the federated scorer extracts features (which are described later in Section 3) and computes a relevance score for each of the verticals. The top vertical is selected as the primary one and the rest are selected as candidates for secondary verticals. Then, in aggregation phase, these candidates compete with individual results in the primary vertical to form the final ranking. Note that these candidates are not guaranteed to show up in the ranking. Instead, depending on queries, searchers and vertical results, all, some or none of these candidates could be selected. The aggregation algorithm and the process of training the federated scorer are described in the next subsections."}, {"heading": "2.2 Aggregation Algorithm", "text": "In this section we discuss how our aggregation algorithm works. Input to the algorithm includes results from the primary vertical P along with all the candidate secondary vertical clusters C and a federated scorer fs. We go through each of primary vertical result Pi computing the relevance score for this result using the federated scorer (the second loop in Algorithm 1). We compare this score with the relevance scores of all candidate secondary vertical clusters. If the former is higher, we pick the primary vertical result for ith position. If on the other hand there exists a candidate secondary vertical cluster that has a higher relevance score than the primary result, we add the secondary vertical cluster to the aggregated rank list and move on to the next primary result. We repeat this process till we position all the primary results. Any secondary vertical results left are dropped."}, {"heading": "2.3 Federated Scorer Training", "text": "As presented above, the purpose of federated scorer is to provide a universal relevance score for each vertical block as well as each vertical individual result. The scores have to be comparable across verticals (for preliminary vertical\nAlgorithm 1: Federated Search Aggregation Algorithm\nInput : Individual results from primary vertical P Secondary vertical clusters C Federated scorer fs Output: Aggregated result ranked list sortedSecondaryV erticals\u2192 []; rankList\u2192 []; for i=1 to len(C) do\n// data structure sorted based on fs(Ci) sortedSecondaryVerticals.add(Ci)\nend j \u2190 1; for i=1 to len(P) do\nif fs(Pi) > fs(sortedSecondaryVerticals.get(j)) then\nrankList[i] = Pi i\u2190 i + 1\nelse rankList[i] = sortedSecondaryVerticals.get(j) sortedSecondaryVerticals.remove(j) j \u2190 j + 1 end\nend return rankList\nselection) and between vertical blocks and vertical individual results (for result aggregation). In this work, we train a federated scorer predicting probability that a vertical block or vertical individual result gets clicked if it appears on a search result page (SERP) shown to the member.\nTraditionally, ground truth data is labeled by human judges. However, this approach is expensive and not scalable. Moreover, it is very hard for the judges to judge the relevance on behalf of some other member, making it challenging to apply the approach for personalized settings. Thus, in this work the training data is collected from click logs via a randomization experiment exposed to a small random fraction of LinkedIn search traffic. In this experiment, given a query we apply some business rules to come up with a few eligible verticals. We randomly pick one as a primary vertical and leave the others as secondary ones. Then, we randomly insert the secondary verticals (as blocks of results) into the primary ranking without re-ordering the primary individual results. Clicked results (either primary individual results or secondary vertical blocks) are labeled positive and skipped results (unclicked ones ranked above the last clicked result in a ranking) are labeled as negative. The results ranked below the last clicked one are dropped since it is unknown if the member ignored these results or simply did not see them. The benefit of randomization is that it avoids the bias towards the original vertical selection and ranking. Given the training data, we apply logistic regression to train a federated scorer. The features used to train the scorer are described in the next section."}, {"heading": "3. FEATURES", "text": ""}, {"heading": "3.1 Searcher Intent", "text": "A query can be ambiguous in the light of all information that exists in multiple verticals. For example, if a member enters a query like \u201cmachine learning\u201d, he or she could be interested in recruiting machine learning people, looking for\njobs related to machine learning, finding professional groups on the topic to join, discovering content on the topic or some of the use cases. To tackle this issue, we take a data-driven approach to personalize search results. For instance, if we know that the member is currently looking for a job, he or she is likely to be more interested in job results than the other verticals. Similarly, if the member is hiring machine learning scientists, people results should be more important to him or her.\nIntents of searchers such as job seeking, hiring, content consuming etc. are inferred from their profiles and past behaviors. At a high level, if a user\u2019s title is recruiter, he or she is likely to have hiring intent. Similarly, if a user is a final year student, he or she could have job seeking intent. Another source of data used to infer user intents is their recent activities. For example, if users recently searched or applied for jobs, they tend to have job seeking intent. We train a machine-learned model combining all of the signals to predict intents for all of the member base. The model is run on a daily basic to update members\u2019 intents dynamically. It is worth noting that a member could have multiple intents at the same time.\nA remaining challenge is that some evidence such as knowing a searcher has job seeking intent might be associated one or a few verticals (e.g. job vertical), but not all of them. Some evidence might be related to multiple verticals but with different levels of importance. To overcome this issue, we construct composite features, capturing both searcher intents and result categories including both verticals and result types (individual or block). For instance, the feature below only fires if the searcher has job seeking intent and the result is a block of jobs. Otherwise, it has value of zero. We create all of the combinations of intents and result categories and learn different weights for them. In essence, we let the learning algorithm associate each of the evidence with the categories and normalize them across the categories from training data.\nf =  1 if searcher has job seeking intentand the result is job vertical block0 otherwise"}, {"heading": "3.2 Keyword Intent", "text": "The feature category aims to capture the intents (result categories) of queries. Specifically, we mine historical click logs to estimate p(result category| query), for instance the probability that members click on professional group vertical block for the query \u201cleadership\u201d. These probabilities are computed offline for every head query and use this insight to construct the features online. One issue of this approach is that the probabilities are biased towards the previous vertical selection and ranking algorithms. Resolving this is a future direction of this work."}, {"heading": "3.3 Base Ranking Features", "text": "We also exploit information provided by vertical first pass rankers (base rankers) to construct features. One example could be relevance scores from the first pass rankers. These features also have an effect of minimizing the inconsistency between the federated scorer and the first pass rankers (recall that the order in the primary vertical is kept unchanged). One issue with this kind of information is that the relevance scores might not be calibrated well across ver-\nticals. To resolve this issue, we again construct composite features like relevance score if result is an individual job or a slideshow vertical block. For the later, we compute relevance score for each block by averaging scores of the top results in the block. Then, we let the learning algorithm normalize the scores across result categories by learning different weights for the features from the training data."}, {"heading": "4. EXPERIMENTAL RESULTS", "text": "Baseline is a legacy federated search algorithm at LinkedIn. It uses a set of business rules based on past member interaction with verticals associated with keywords and relevance scores returned by vertical ranking functions. It can be viewed as a function on the feature sets described in Sections 3.2 and 3.3. Although the function is manually defined, it has been running on live traffic for a relatively long time and have been iteratively refined. The key difference between the baseline and the new approach is that the later is highly personalized by using searcher intent as a key signal.\nWe conducted A/B test for sufficient duration of time (6 weeks) to account for any novelty effect. A query is first tagged for existence of entities like names, job titles, skills etc. As we are interested in exploratory search, we only experimented with non-name queries. Based on this condition, a random portion of LinkedIn federated search traffic from our world-wide member base is used for A/B testing. The federated search combines results from all of seven verticals available on LinkedIn including people, job, company, university, group, slideshow and members\u2019 posts. The traffic is then randomly split into control and treatment buckets. Each bucket ends up with several hundreds of thousand searches. Searches in the control bucket are processed by the baseline and the treatment bucket uses the proposed approach. We look at three metrics including primary vertical click-throught-rate (CTR), secondary vertical CTR and secondary vertical switches. The difference between the second and the third metrics is that the former is defined on clicks on individual results within secondary clusters while the later is based on clicks on cluster headers that take users to vertical search pages.\nTable 1 shows that the proposed approach is better than the baseline on all of the metrics (all of the improvements are statistically significant). Specifically, the proposed approach is 0.62% better than the baseline on primary vertical CTR. In terms of secondary vertical engagement, the proposed approach largely improves over the baseline: 4.31% and 10.66% improvements on secondary vertical CTR and secondary vertical switches. It is somewhat surprising that the improvement on primary vertical CTR is much lower than on secondary vertical CTR. It is probably because the proposed approach shows more relevant secondary verticals, members are more likely to switch to secondary vertical search result pages (10.66% higher). Thus, they have less chance to engage in the primary results. A deep dive into log data also reveals that the baseline tends to overemphasize primary results and on average ranks secondary vertical clusters lower in result pages. Fully understanding and modeling the trade-off between member engagement on primary and secondary results is another future direction of this work."}, {"heading": "5. CONCLUSIONS", "text": "In this paper, we present the problem of personalized federated search at LinkedIn and propose a data-driven approach for this problem. Our approach takes into account members\u2019 data and activities to infer their intents such as hiring and job seeking. This insight combined with other signals are used to select primary and candidate secondary verticals and then to aggregate primary individual results and the secondary clusters into a personalized ranking. Though presented in LinkedIn federated search context, the approach is applicable other domains where vertical selection and aggregation are highly personalized. Our A/B tests show that the approach could significantly improve user engagement. The approach is currently serving all of federated search on LinkedIn homepage.\nOne future direction of this work is to remove the bias towards the previous vertical selection and ranking algorithms in the current keyword intent features. Another direction is to understand and model the trade-off between member engagement on primary verticals and engagement on secondary verticals. Given the insight, we will determine the best balance in terms of member experience."}, {"heading": "6. REFERENCES", "text": "[1] J. Arguello, F. Diaz, and J. Callan. Learning to\naggregate vertical results into web search results. In Proceedings of the 20th Conference on Information and Knowledge Management, pages 201\u2013210, 2011.\n[2] F. Diaz. Integration of news content into web results. In Proceedings of the Second International Conference on Web Search and Web Data Mining, pages 182\u2013191, 2009.\n[3] D. Lefortier, P. Serdyukov, F. Romanenko, and M. de Rijke. Blending vertical and web results - A case study using video intent. In Proceedings of the 36th European Conference on IR Research, pages 184\u2013196, 2014.\n[4] A. K. Ponnuswami, K. Pattabiraman, D. Brand, and T. Kanungo. Model characterization curves for federated search using click-logs: predicting user engagement metrics for the span of feasible operating points. In Proceedings of the 20th International Conference on World Wide Web, pages 67\u201376, 2011.\n[5] M. Shokouhi and L. Si. Federated search. Foundations and Trends in Information Retrieval, 5(1):1\u2013102, 2011."}], "references": [{"title": "Learning to aggregate vertical results into web search results", "author": ["J. Arguello", "F. Diaz", "J. Callan"], "venue": "Proceedings of the 20th Conference on Information and Knowledge Management, pages 201\u2013210", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2011}, {"title": "Integration of news content into web results", "author": ["F. Diaz"], "venue": "Proceedings of the Second International Conference on Web Search and Web Data Mining, pages 182\u2013191", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2009}, {"title": "and M", "author": ["D. Lefortier", "P. Serdyukov", "F. Romanenko"], "venue": "de Rijke. Blending vertical and web results - A case study using video intent. In Proceedings of the 36th European Conference on IR Research, pages 184\u2013196", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "Model characterization curves for federated search using click-logs: predicting user engagement metrics for the span of feasible operating points", "author": ["A.K. Ponnuswami", "K. Pattabiraman", "D. Brand", "T. Kanungo"], "venue": "Proceedings of the 20th International Conference on World Wide Web, pages 67\u201376", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2011}, {"title": "Federated search", "author": ["M. Shokouhi", "L. Si"], "venue": "Foundations and Trends in Information Retrieval, 5(1):1\u2013102", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2011}], "referenceMentions": [{"referenceID": 4, "context": "The area of federated search originated from meta search and has been actively researched in the field of information retrieval [5] and particularly in the context of Web search.", "startOffset": 128, "endOffset": 131}, {"referenceID": 1, "context": "Diaz [2] addresses the problem of vertical selection, i.", "startOffset": 5, "endOffset": 8}, {"referenceID": 3, "context": "[4] and Arguello et.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "[1] propose machine learning approaches for aggregating vertical results into single search result pages.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "[3] present a way to blend individual vertical results and individual Web results with a case study on Yandex video search.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "Nonetheless, unlike Web search which typically blends either blocks of results [1][4] or individual results [3] from different verticals, our system aggregates both individual results (e.", "startOffset": 79, "endOffset": 82}, {"referenceID": 3, "context": "Nonetheless, unlike Web search which typically blends either blocks of results [1][4] or individual results [3] from different verticals, our system aggregates both individual results (e.", "startOffset": 82, "endOffset": 85}, {"referenceID": 2, "context": "Nonetheless, unlike Web search which typically blends either blocks of results [1][4] or individual results [3] from different verticals, our system aggregates both individual results (e.", "startOffset": 108, "endOffset": 111}, {"referenceID": 3, "context": "Third, in Web search, Web results are typically the primary vertical thus they can be used as a \u201cpivot\u201d to normalize scores of the other verticals [4].", "startOffset": 147, "endOffset": 150}], "year": 2016, "abstractText": "LinkedIn has grown to become a platform hosting diverse sources of information ranging from member profiles, jobs, professional groups, slideshows etc. Given the existence of multiple sources, when a member issues a query like \u201csoftware engineer\u201d, the member could look for software engineer profiles, jobs or professional groups. To tackle this problem, we exploit a data-driven approach that extracts searcher intents from their profile data and recent activities at a large scale. The intents such as job seeking, hiring, content consuming are used to construct features to personalize federated search experience. We tested the approach on the LinkedIn homepage and A/B tests show significant improvements in member engagement. As of writing this paper, the approach powers all of federated search on LinkedIn homepage.", "creator": "LaTeX with hyperref package"}}}