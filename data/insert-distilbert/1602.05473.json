{"id": "1602.05473", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Feb-2016", "title": "Auxiliary Deep Generative Models", "abstract": "deep generative models parameterized by neural networks have recently achieved great state - of - the - art performance in mutual unsupervised and semi - supervised learning. we extend very deep generative models with continuous auxiliary variables along which improves the variational approximation. the auxiliary reserve variables leave the generative model unchanged but make the finite variational distribution more expressive. maybe inspired by the uniform structure studies of applying the auxiliary variable we also propose a model with two stochastic layers and skip connections. our findings suggest that more broadly expressive and properly specified deep generative models converge faster with better results. we show state - of - the - art performance within semi - supervised learning settings on mnist ( 0. 96 % ), svhn ( globally 16. 61 % ) and norb ( with 9. 40 % ) datasets.", "histories": [["v1", "Wed, 17 Feb 2016 16:24:50 GMT  (3490kb,D)", "http://arxiv.org/abs/1602.05473v1", "Under review"], ["v2", "Thu, 26 May 2016 10:21:34 GMT  (3912kb,D)", "http://arxiv.org/abs/1602.05473v2", "Proceedings of the 33rd International Conference on Machine Learning, New York, NY, USA, 2016. JMLR: Workshop and Conference Proceedings volume 48, Proceedings of the 33rd International Conference on Machine Learning, New York, NY, USA, 2016"], ["v3", "Fri, 3 Jun 2016 09:19:21 GMT  (4071kb,D)", "http://arxiv.org/abs/1602.05473v3", "Proceedings of the 33rd International Conference on Machine Learning, New York, NY, USA, 2016"], ["v4", "Thu, 16 Jun 2016 06:39:08 GMT  (4071kb,D)", "http://arxiv.org/abs/1602.05473v4", "Proceedings of the 33rd International Conference on Machine Learning, New York, NY, USA, 2016, JMLR: Workshop and Conference Proceedings volume 48, Proceedings of the 33rd International Conference on Machine Learning, New York, NY, USA, 2016"]], "COMMENTS": "Under review", "reviews": [], "SUBJECTS": "stat.ML cs.AI cs.LG", "authors": ["lars maal\u00f8e", "casper kaae s\u00f8nderby", "s\u00f8ren kaae s\u00f8nderby", "ole winther"], "accepted": true, "id": "1602.05473"}, "pdf": {"name": "1602.05473.pdf", "metadata": {"source": "META", "title": "Auxiliary Deep Generative Models", "authors": ["Lars Maal\u00f8e", "Casper Kaae S\u00f8nderby", "S\u00f8ren Kaae S\u00f8nderby", "Ole Winther"], "emails": ["LARSMA@DTU.DK", "CASPERKAAE@GMAIL.COM", "SKAAESONDERBY@GMAIL.COM", "OLWI@DTU.DK"], "sections": [{"heading": "1. Introduction", "text": "Stochastic backpropagation, deep neural networks and approximate Bayesian inference has made deep generative models practical for large scale problems (Kingma, 2013; Rezende et al., 2014), but typically they assume a mean field latent distribution where all latent variables are independent. This assumption might result in models that are incapable of capturing all dependencies in the data. In this paper we show that deep generative models with more expressive variational distributions are easier to optimize and have better performance. We increase the flexibility of the model by introducing auxiliary variables (Agakov and Barber, 2004) allowing more complex latent distributions. We demonstrate the benefits of the increased flexibility by achieving state-of-the-art performance in the semisupervised setting for the MNIST (LeCun et al., 1998),\nPreliminary work. Under review.\nSVHN (Netzer et al., 2011) and NORB (LeCun et al., 2004) datasets.\nRecently there have been significant improvements within the semi-supervised classification tasks. Kingma et al. (2014) introduced a deep generative model for semisupervised learning by modeling the joint distribution over data and labels. This model is difficult to train end-to-end with more than one layer of stochastic latent variables, but coupled with a pretrained feature extractor it performs well. Lately the Ladder network (Rasmus et al., 2015; Valpola, 2014) and virtual adversarial training (VAT) (Miyato et al., 2015) has improved the performance further with end-toend training.\nIn this paper we train deep generative models with multiple stochastic layers. The Auxiliary Deep Generative Models (ADGM) utilize an extra set of auxiliary latent variables to increase the flexibility of the variational distribution (cf. Sec. 2.2). We also introduce a slight change to the ADGM, a 2-layered stochastic model with skip connections, the Skip Deep Generative Model (SDGM). Both models are trainable end-to-end and offers state-of-theart performance when compared to other semi-supervised methods. In the paper we first introduce toy data to demonstrate that:\n(i) The auxiliary variable models can fit complex latent distributions and thereby improve the variational lower bound (cf. Sec. 4.1).\n(ii) By fitting a complex half-moon dataset using only six labeled data points we demonstrate that the ADGM utilizes the data manifold for semi-supervised classification (cf. Sec 4.2).\nFor the benchmark datasets we show (cf. Sec. 4.3):\n(iii) State-of-the-art results on several semi-supervised classification tasks.\n(iv) That multi-layered deep generative models for semisupervised learning are trainable end-to-end without pre-training or feature engineering.\nar X\niv :1\n60 2.\n05 47\n3v 1\n[ st\nat .M\nL ]\n1 7\nFe b\n20 16"}, {"heading": "2. Auxiliary deep generative models", "text": "Recently Kingma (2013); Rezende et al. (2014) have coupled the approach of variational inference with deep learning giving rise to powerful probabilistic models constructed by an inference neural network q(z|x) and a generative neural network p(x|z). This approach can be perceived as a variational equivalent to the deep auto-encoder, in which q(z|x) acts as the encoder and p(x|z) the decoder. However, the difference is that these models ensures efficient inference over various continuous distributions in the latent space z and complex input datasets x, where the posterior distribution p(x|z) is intractable. Furthermore, the gradients of the variational upper bound are easily defined by backpropagation through the network(s). To keep the computational requirements low the variational distribution q(z|x) is usually chosen to be a diagonal Gaussian, limiting the expressive power of the inference model.\nIn this paper we propose a variational auxiliary variable approach (Agakov and Barber, 2004) to improve the variational distribution: The generative model is extended with variables a to p(x, z, a) such that the original model is invariant to marginalization over a: p(x, z, a) = p(a|x, z)p(x, z). In the variational distribution, on the other hand, a is used such that marginal q(z|x) =\u222b q(z|a, x)p(a|x)da is a general non-Gaussian distribution. This hierarchical specification allows the latent variables to be correlated through a, while maintaining the computational efficiency of fully factorized models (cf. Fig. 1). In Sec. 4.1 we demonstrate the expressive power of the inference model by fitting a complex multimodal distribution."}, {"heading": "2.1. Variational auto-encoder", "text": "The variational auto-encoder (VAE) has recently been introduced as a powerful method for unsupervised learning. Here a latent variable generative model p\u03b8(x|z) for data x is parameterized by a deep neural network with parameters \u03b8. The parameters is inferred by maximizing the variational lower bound of the likelihood \u2212 \u2211 i UVAE(xi) with\nlog p\u03b8(x) = log \u222b z p(x, z)dz\n\u2265 Eq\u03c6(z|x) [ log\np\u03b8(x|z)p\u03b8(z) q\u03c6(z|x)\n] (1)\n\u2261 \u2212UVAE(x) .\nThe inference model q\u03c6(z|x) is parameterized as a second deep neural network. The inference and generative parameters, \u03b8 and \u03c6, are jointly trained by optimizing Eq. 1 with an optimization framework (e.g. stochastic gradient descent), where we use the reparameterization trick for backpropagation through the Gaussian latent variables (Kingma, 2013; Rezende et al., 2014)."}, {"heading": "2.2. Auxiliary variables", "text": "We propose to extend the variational distribution with auxiliary variables a: q(a, z|x) = q(z|a, x)q(a|x) such that the marginal distribution q(z|x) can fit more complicated posteriors p(z|x). In order to have an unchanged generative model, p(x|z), it is required that the joint mode p(x, z, a) gives back the original p(x, z) under marginalization over a, thus p(x, z, a) = p(a|x, z)p(x, z). Auxiliary variables are used in the EM algorithm and Gibbs sampling and has previously been considered for variational learning by Agakov and Barber (2004). Recently, Ranganath et al. (2015) has proposed to make the parameters of the variational distribution stochastic, which leads to a similar model. It is important to note that in order not to fall back to the original VAE model one has to require p(a|x, z) 6= p(a), see Agakov and Barber (2004) and App. B. The auxiliary VAE lower bound becomes\nlog p\u03b8(x) = log \u222b a \u222b z p(x, a, z)dadz (2)\n\u2265 Eq\u03c6(a,z|x) [ log\np\u03b8(a|z, x)p\u03b8(x|z)p(z) q\u03c6(a|x)q\u03c6(z|a, x)\n] (3)\n\u2261 \u2212UAVAE(x) . (4)\nwith p\u03b8(a|z, x) and q\u03c6(a|x) diagonal Gaussian distributions parameterized by deep neural networks."}, {"heading": "2.3. Semi-supervised learning", "text": "The main focus of this paper is to use the auxiliary approach to build semi-supervised models that learn classifiers from labeled and unlabeled data. To encompass the class information we introduce an extra latent variable y. The generative model P is defined as\np(y)p(z)p\u03b8(a|z, y, x)p\u03b8(x|y, z) (cf. Fig. 1a):\np(z) = N (z|0, I), (5) p(y) = Cat(y|\u03c0), (6)\np\u03b8(a|z, y, x) = f(a; z, y, x, \u03b8), (7) p\u03b8(x|z, y) = f(x; z, y, \u03b8) , (8)\nwhere a, y, z are the auxiliary variable, class label, and latent features, respectively. Cat(\u00b7) is a multinomial distribution, where y is treated as a latent variable for the unlabeled data points. In this study we only experimented with categorical labels, however the method applies to other distributions for the latent variable y. f(x; z, y, \u03b8) is iid categorical or Gaussian for discrete and continuous observations x. p\u03b8(\u00b7) are deep neural networks with parameters \u03b8. The inference model is defined as q\u03c6(a|x)q\u03c6(z|a, y, x)q\u03c6(y|a, x) (cf. Fig. 1b):\nq\u03c6(a|x) = N (a|\u00b5\u03c6(x), diag(\u03c32\u03c6(x))), (9) q\u03c6(y|a, x) = Cat(y|\u03c0\u03c6(a, x)), (10)\nq\u03c6(z|a, y, x) = N (z|\u00b5\u03c6(a, y, x), diag(\u03c32\u03c6(a, y, x))) . (11)\nIn order to model Gaussian distributions p\u03b8(a|z, y, x), p\u03b8(x|z, y), q\u03c6(a|x) and q\u03c6(z|a, y, x) we define two separate outputs from the top deterministic layer in each deep neural network, \u00b5\u03c6\u2228\u03b8(\u00b7) and log \u03c32\u03c6\u2228\u03b8(\u00b7). From these outputs we are able to approximate the expectations E by applying the reparameterization trick.\nThe key point of the ADGM is that the auxiliary unit a introduce a latent feature extractor to the inference model giving a richer mapping between x and y. We can use the classifier (11) to compute probabilities for unlabeled data xu being part of each class and to retrieve a cross-entropy error estimate on the labeled data xl. This can be used in cohesion with the variational lower bound to define a good objective function in order to train the model end-to-end.\nVARIATIONAL LOWER BOUND\nWe optimize the model by maximizing the lower bound on the likelihood (cf. App. A for more details). The variational lower bound on the marginal likelihood for a single labeled data point is\nlog p\u03b8(x, y) = log \u222b a \u222b z p(x, y, a, z)dzda\n\u2265 Eq\u03c6(a,z|x,y) [ log\np\u03b8(x, y, a, z)\nq\u03c6(a|x)q\u03c6(z|a, y, x) ] \u2261 \u2212L(x, y) (12)\nwith q\u03c6(a, z|x, y) = q\u03c6(a|x)q\u03c6(z|a, y, x). For unlabeled data we further introduce the variational distribution for y,\nq\u03c6(y|a, x):\nlog p\u03b8(x) = log \u222b a \u222b y \u222b z p(x, y, a, z)dzdyda\n\u2265 Eq\u03c6(a,y,z|x) [ log\np\u03b8(x, y, a, z)\nq\u03c6(y|a, x)q\u03c6(a|x)q\u03c6(z|a, y, x) ] \u2261 \u2212U(x) (13)\nwith q\u03c6(a, y, z|x) = q\u03c6(z|a, y, x)q\u03c6(y|a, x)q\u03c6(a|x).\nThe classifier (11) appears in \u2212U(x), but not in \u2212L(x, y). The classification accuracy can be improved by introducing an explicit classification loss for labeled data:\nLl(xl, yl) = L(xl, yl) + \u03b1 \u00b7 logEq\u03c6(a|xl)[q\u03c6(yl|a, xl)] , (14)\nwhere \u03b1 is a weight between generative and discriminative learning. The \u03b1 parameter is set to \u03b2 \u00b7 Nl+NuNl , where \u03b2 is a scaling constant, Nl is the number of labeled data points and Nu is the number of unlabeled datapoints. The objective function for labeled data xl, yl and unlabeled data xu is\nJ = \u2211\n(xl,yl) Ll(xl, yl) + \u2211 (xu) U(xu) . (15)"}, {"heading": "2.4. Two stochastic layers with skip connections", "text": "Kingma et al. (2014) proposed a model with two stochastic layers and trained it one layer at a time. In our preliminary analysis we also found that this model: p\u03b8(x|z1)p\u03b8(z1|z2, y)p(z2)p(y) failed to converge when trained end-to-end. On the other hand, the auxiliary model can be made into a two-layered stochastic model by simply reversing the arrow between a and x in Fig. 1a. We would expect that if the auxiliary model works well in terms of convergence and performance then this two-layered model (a is now part of the generative model): p\u03b8(x|y, a, z)p\u03b8(a|z, y)p(z)p(y) should work even better because it is a more flexible generative model. The variational distribution is unchanged: q\u03c6(z|y, x, a)q\u03c6(y|a, x)q\u03c6(a|x). We call this the Skip Deep Generative Model (SDGM) and test it alongside the auxiliary model in the benchmarks (cf. Sec. 4.3)."}, {"heading": "3. Experiments", "text": "The SDGM and ADGM are each parameterized by 5 neural networks (NN): (1) auxiliary inference model q\u03c6(a|x), (2) latent inference model q\u03c6(z|a, y, x), (3) classification model q\u03c6(y|a, x), (4) generative model p\u03b8(a|\u00b7), and (5) the generative model p\u03b8(x|\u00b7).\nThe neural networks consists of M fully connected hidden layers with hj denoting the output of a layer j = 1, ...,M .\nAll hidden layers use rectified linear activation functions. To retrieve the approximations of the stochastic variables we place two independent output layers after hM , \u00b5 and log \u03c32. In a forward-pass we are propagating the input x through the neural network by:\nhM =NN(x) (16) \u00b5 =Linear(hM ) (17)\nlog \u03c32 =Linear(hM ) , (18)\nwith Linear denoting a linear activation function. We then approximate the stochastic variables by applying the reparameterization trick using the \u00b5 and log \u03c32 outputs.\nIn the unsupervised toy example (cf. Sec. 4.1) we applied 3 hidden layers with dim(h) = 20, dim(a) = 4 and dim(z) = 2. For the semi-supervised toy example (cf. Sec. 4.2) we used two hidden layers of dim(h) = 100 and dim(a, z) = 10.\nFor all the benchmark experiments (cf. Sec. 4.3) we parameterized the deep neural networks with two fully connected hidden layers. Each pair of hidden layers was of size dim(h) = 500 or dim(h) = 1000 with dim(a, z) = 100 or dim(a, z) = 300. The generative model was p(y)p(z)p\u03b8(a|z, y)p\u03b8(x|z, y) for the ADGM and the SDGM had the augmented p\u03b8(x|a, z, y). Both have unchanged inference models (cf. Fig. 1b).\nAll parameters are initialized using the Glorot and Bengio (2010) scheme. The expectation over the a and z variables were performed by Monte Carlo sampling using the reparameterization trick (Kingma, 2013; Rezende et al., 2014) and the average over y by exact enumeration so\nEq\u03c6(a,y,z|x) [f(a, x, y, z)] \u2248 (19)\n1\nNsamp Nsamp\u2211 i \u2211 y q(y|ai, x)f(ai, x, y, zyi),\nwith ai \u223c q(a|x) and zyi \u223c q(z|a, y, x).\nFor training, we have used the Adam (Kingma and Ba, 2014) optimization framework with a learning rate of 3e4, exponential decay rate for the 1st and 2nd moment at 0.9 and 0.999, respectively. We scaled the \u03b2 constant from 0.1 to 2 throughout the experiments.\nThe models are implemented in Python using Theano (Bastien et al., 2012), Lasagne (Dieleman et al., 2015) and Parmesan libraries1.\nFor the MNIST dataset we have combined the training set of 50000 examples with the validation set of 10000 examples. The test set remained as is. We used a batch size\n1Implementation will be available in a variational extension framework to the Lasagne library named Parmesan on https://github.com.\nof 200 with half of the batch always being the 100 labeled samples. The labeled data are chosen randomly, but distributed evenly across classes. To speed up training, we removed the columns with a standard deviation below 0.1 resulting in an input size of dim(x) = 444. Before each epoch the normalized MNIST images were binarized by sampling Bernoulli distributions.\nFor the SVHN dataset we used the vectorized and cropped training set dim(x) = 3072 with classes from 0 to 9, combined with the extra set resulting in 604388 data points. The test set is of size 26032. We trained on the small NORB dataset consisting of 24300 training samples and an equal amount of test samples distributed across 5 classes: animal, human, plane, truck, car. We normalized all NORB images following Miyato et al. (2015) using image pairs of 32x32 resulting in a vectorized input of dim(x) = 2048. The labeled subsets consisted of 1000 evenly distributed labeled samples. The batch size for SVHN was 2000 and for NORB 200, where half of the batch was labeled samples. To avoid the phenomenon on modeling discretized values with a real-valued estimation (Uria et al., 2013), we added uniform noise between 0 and 1 to each pixel value. We normalized the NORB dataset by 256 and the SVHN dataset by the standard deviation on each color channel. Both datasets were assumed Gaussian distributed for the generative models p(x|\u00b7)."}, {"heading": "4. Results", "text": "In this section we present two toy examples that shed light on how the auxiliary variables improve the distribution fit. Thereafter we investigate the semi-supervised classification performance in several benchmark datasets. We demonstrate state-of-the-art performance and show that adding auxiliary variables increase both classification performance and convergence speed (cf. Sec. 3 for details)."}, {"heading": "4.1. Beyond Gaussian latent distributions", "text": "In variational auto-encoders the inference model q\u03c6(z|x) is parameterized as a fully factorized Gaussian. We demonstrate that the auxiliary model can fit complicated posterior distributions for the latent space. To do this we consider the 2D potential model p(z) = exp(U(z))/Z (Rezende and Mohamed, 2015) that leads to the bound\nlogZ \u2265 Eq\u03c6(a,z) [ log\nexp(U(z))p\u03b8(a|z) q\u03c6(a)q\u03c6(z|a)\n] . (20)\nFig. 2a shows the true posterior and Fig. 2b shows a density plot of z samples from a \u223c q\u03c6(a) and z \u223c q\u03c6(z|a) from a trained ADGM. This is similar to the findings of Rezende and Mohamed (2015) in which they demonstrate that by using normalizing flows they can fit complicated posterior distributions. The most frequent solution found\nin optimization is not the one shown, but one where q fits only one of the two equivalent modes. The one and two mode solution will have identical values of the bound so it is to be expected that the simpler single mode solution will be easier to infer."}, {"heading": "4.2. Two half-moons semi-supervised learning", "text": "To exemplify the power of the ADGM for semi-supervised learning we have generated a 2D synthetic dataset consisting of two half-moons (top and bottom):\n(xtop, ytop) = (cos([0, \u03c0]), sin([0, \u03c0]))\n(xbottom, ybottom) = (1\u2212 cos([0, \u03c0]), 1\u2212 sin([0, \u03c0])\u2212 0.5) ,\nwith added Gaussian noise. The training set contains 1e4 samples divided into batches of 1e2 with 3 labeled data points in each class and the test set contains 1e4 samples. A good semi-supervised model will be able to learn the data manifold for each of the half-moons and use this together with the limited labeled information to build the classifier.\nThe ADGM is powerful in learning this problem (cf. Fig. 2c). The model converges close to 0% classification error in 10 epochs, which is much faster then an equivalent model without the auxiliary variable that converges in more than 100 epochs. When investigating the auxiliary variable (cf. Fig. 2d) we see that it finds a discriminating internal representation of the data manifold and thereby aids the classifier."}, {"heading": "4.3. Semi-supervised benchmarks", "text": "We benchmark our models on MNIST, SVHN and NORB datasets. The experimental details on model training and dataset preparations are found in Sec. 3.\nMNIST EXPERIMENTS\nTable 1 shows the performance of the ADGM and SDGM on the MNIST dataset. The ADGM\u2019s convergence to around 1.5% is fast (around 200 epochs), and from that point the convergence speed declines (cf. Fig. 5). The\nSDGM shows close to similar performance and proves more stable by speeding up convergence, due to its more advanced generative model. We achieved the best results on MNIST by performing 10 Monte Carlo samples for a \u223c q\u03c6(a|x) and z \u223c q\u03c6(z|a, y, x).\nA good explorative estimate of the models ability to comprehend the data manifold, or in other words be as close to the posterior distribution as possible, is to evaluate the generative model. In Fig. 3a we show how the SDGM, trained on only 100 labeled data points, has learned to separate style and class information. Fig 3b shows random samples from the generative model.\nFig. 4a demonstrate the information contribution from the stochastic unit ai and zj (subscripts i and j denotes a unit) in the SDGM as measured by the average over the test set of the KL-divergence between the variational distribution and the prior. Units with little information content will be close to the prior distribution and the KL term will thus be close to 0. The number of clearly activated units in z and a is quite low \u223c 20, but there is a tail of slightly active units, similar results have been reported by Burda et al. (2015). It is still evident that we have information flowing through\nboth variables though. Like in Fig. 2d for the ADGM in the 2D toy example, Fig. 4b demonstrates good clustering in a PCA of variable a for the SDGM.\nIn order to investigate whether the stochasticity of the auxiliary variable a or the network depth is essential to the models performance, we constructed an ADGM with a deterministic auxiliary variable. Furthermore we also implemented the M2 model of Kingma et al. (2014) using the exact same hyperparameters as for learning the ADGM. Fig. 5 shows how the ADGM outperforms both the M2 model and the ADGM with deterministic auxiliary variables. We found that the convergence of the M2 model was highly unstable; the one shown is the best obtained.\nSVHN & NORB EXPERIMENTS\nFrom Table 1 we see how the SDGM outperforms VAT with a relative reduction in error rate of more than 30% on the SVHN dataset. We also tested the model performance, when we omitted the SVHN extra set from training. Here we achieved a classification error of 29.82%. The improvements on the NORB dataset was not as significant as for SVHN with the ADGM being slightly worse than VAT and the SDGM being slightly better than VAT.\nOn SVHN the model trains to around 19% classification error in 100 epochs followed by a decline in convergence speed. The NORB dataset is a significantly smaller dataset and the SDGM converges to around 12% in 100 epochs. We also trained the NORB dataset on single images as opposed to image pairs (half the dataset) and achieved a classification error around 13% in 100 epochs.\nFor Gaussian input distributions, like the image data of SVHN and NORB, we found the SDGM to be more stable than the ADGM."}, {"heading": "5. Discussion", "text": "The ADGM and SDGM are powerful deep generative models with relatively simple neural network architectures. They are trainable end-to-end and since they follow the principles of variational inference there are multiple improvements to consider for optimizing the models.\nWe may use the importance weighting bound and add more layers of stochastic variables. Both have recently shown to be beneficial in generative models (Burda et al., 2015). Furthermore we have only proposed the models using a Gaussian latent distribution, but the model can easily be extended to other distributions (Ranganath et al., 2014; 2015).\nOne way of approaching the stability issues of the ADGM, when training on Gaussian input distributions x is to add a temperature weighting between discriminative and stochastic learning on the KL-divergence for a and z when estimating the variational lower bound (Kaae S\u00f8nderby et al., 2016). We find similar problems for the Gaussian input distributions in van den Oord et al. (2016), where they restrict the dataset to ordinal values, so that they can apply a softmax function for the output of the generative model p(x|\u00b7). This discretization of data is also a possible solution. Another potential stabilizer is to add batch normalization (Ioffe and Szegedy, 2015) that will ensure normalization of each output batch of a fully connected hidden layer.\nA downside to the semi-supervised variational framework is that we are summing over all classes in order to evaluate the variational bound for unlabeled data. This is a com-\nputationally costly operation when the number of classes grow. In this sense, the Ladder network has an advantage. A possible extension is to sample y when calculating the unlabeled lower bound U(xu), but this may result in gradients with high variance. We found that the number of samples is important for convergence speed so there may be an issue also with sampling discrete variables.\nThe framework is implemented with fully connected layers. VAEs have proven to work well with convolutional layers so this could be a promising step to get even better performance. Finally, since we expect that the variational bound found by the auxiliary variable method is quite tight, it could be of interest to see whether the bound for p(x, y) may be used for classification in the Bayes classifier manner p(y|x) \u221d p(x, y)."}, {"heading": "6. Conclusion", "text": "We have introduced a novel framework for making the variational distributions used in deep generative models more expressive. In two toy examples and the benchmarks we investigated how the framework uses the auxiliary variables to learn better variational approximations. Finally we have demonstrated that the framework gives state-of-the-art performance in a number of semi-supervised benchmarks and is trainable end-to-end."}, {"heading": "Acknowledgements", "text": "We thank Durk P. Kingma and Shakir Mohamed for helpful discussions. This research was supported by the Novo Nordisk Foundation, Danish Innovation Foundation and the NVIDIA Corporation with the donation of TITAN X and Tesla K40 GPUs.\nA. Variational bounds In this appendix we give an overview of the variational objectives used. The generative models P are for the Auxiliary Deep Generative Model and the Skip Deep Generative Model defined as follows:\nADGM : p\u03b8(x, a, y, z) = p\u03b8(x|y, z)p\u03b8(a|x, y, z)p(y)p(z) (21)\nSDGM : p\u03b8(x, a, y, z) = p\u03b8(x|a, y, z)p\u03b8(a|y, z)p(y)p(z) . (22)\nOur objectives \u2212L(x, y) and \u2212U(x) are lower bounds of the likelihoods for labeled and unlabeled data:\nlog p(x, y) = log \u222b a \u222b z p\u03b8(x, y, a, z)dadz (23)\nlog p(x) = log \u2211 y \u222b a \u222b z p\u03b8(x, a, y, z)dzda . (24)\nWe use the standard Jensen\u2019s inequality variational bound: log p(x, y) \u2265 Eq\u03c6(a,z|x,y) [ log p\u03b8(x, y, a, z)\nq\u03c6(a, z|x, y)\n] (25)\n\u2261 \u2212L(x, y) , (26)\nwhere q\u03c6(a, z|x, y) = q\u03c6(a|x)q\u03c6(z|a, y, x) and\nEq\u03c6(a,z|x,y) [f (x, y, a, z) ] (27) \u2261 \u222b q\u03c6(a, z|x, y) f(x, y, a, z) dadz . (28)\nWe use the same approach for the unlabeled data. The difference is that the discrete y is also treated as a latent variable:\nlog p(x) \u2265 Eq\u03c6(a,y,z|x) [ p\u03b8(x, y, a, z)\nq\u03c6(a, y, z|x)\n] (29)\n\u2261 \u2212U(x) (30)\nwith\nEq\u03c6(a,y,z|x) [f (x, y, a, z) ] \u2261 \u2211 y \u222b q\u03c6(a, y, z|x, y) f(x, y, a, z) dadz .\n(31)\nand q\u03c6(a, y, z|x) = q\u03c6(a|x)q\u03c6(z|a, y, x)q\u03c6(y|a, x)."}, {"heading": "B. Auxiliary model specification", "text": "In this appendix we study the theoretical optimum of the auxiliary variational bound found by functional derivatives of the variational objective. In practice we will resort to restricted deep network parameterized distributions. But this analysis nevertheless shed some light on the properties of the optimum. Without loss of generality we consider only auxiliary a and latent z: p(a, z) = p(z)p(a|z), p(z) = f(z)/Z and q(a, z) = q(z|a)q(a). The results can be extended to the full semi-supervised setting without changing the overall conclusion. The variational bound for the auxiliary model is\nlogZ \u2265 Eq(a,z) [ log\nf(z)p(a|z) q(z|a)q(a)\n] . (32)\nWe can now take the functional derivative of the bound with respect to p(a|z). This gives the optimum p(a|z) = q(a, z)/q(z), which in general is intractable because it requires marginalization: q(z) = \u222b q(z|a)q(a)da.\nOne may also restrict the generative model to an uninformed a-model: p(a, z) = p(z)p(a). Optimizing with respect to p(a) we find p(a) = q(a). When we insert this solution into the variational bound we get\u222b\nq(a)Eq(z|a) [ log f(z)\nq(z|a)\n] da . (33)\nThe solution to the optimization with respect to q(a) will simply be a \u03b4-function at the value of y that optimizes the variational bound for the z-model. So we fall back to a model for z without the auxiliary as also noted by Agakov and Barber (2004).\nWe have tested the uninformed auxiliary model in semisupervised learning for the benchmarks and we got competitive results for MNIST but not for the two other benchmarks. We attribute this to two factors: in semi-supervised learning we add an additional classification cost so that the generic form of the objective is\nlogZ \u2265 Eq(a,z) [ log f(z)p(a)\nq(z|a)q(a) + g(a)\n] , (34)\nwe keep p(a) fixed to a zero mean unit variance Gaussian and we use deep iid models for f(z), q(z|a) and q(a). This taken together can lead to at least a local optimum which is different from the collapse to the pure z-model."}], "references": [{"title": "An Auxiliary Variational Method", "author": ["F. Agakov", "D. Barber"], "venue": null, "citeRegEx": "Agakov and Barber,? \\Q2004\\E", "shortCiteRegEx": "Agakov and Barber", "year": 2004}, {"title": "Theano: new features and speed improvements", "author": ["F. Bastien", "P. Lamblin", "R. Pascanu", "J. Bergstra", "I.J. Goodfellow", "A. Bergeron", "N. Bouchard", "Y. Bengio"], "venue": "In Deep Learning and Unsupervised Feature", "citeRegEx": "Bastien et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Bastien et al\\.", "year": 2012}, {"title": "Importance Weighted Autoencoders", "author": ["Y. Burda", "R. Grosse", "R. Salakhutdinov"], "venue": "arXiv preprint arXiv:1509.00519", "citeRegEx": "Burda et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Burda et al\\.", "year": 2015}, {"title": "Lasagne: First release", "author": ["S. Dieleman", "J. Schlter", "C. Raffel", "E. Olson", "S.K. S\u00f8nderby", "D. Nouri", "A. van den Oord", "E. B"], "venue": null, "citeRegEx": "Dieleman et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Dieleman et al\\.", "year": 2015}, {"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["X. Glorot", "Y. Bengio"], "venue": "In Proceedings of the International Conference on Artificial Intelligence and Statistics", "citeRegEx": "Glorot and Bengio,? \\Q2010\\E", "shortCiteRegEx": "Glorot and Bengio", "year": 2010}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["S. Ioffe", "C. Szegedy"], "venue": "In Proceedings of International Conference of Machine Learning,", "citeRegEx": "Ioffe and Szegedy,? \\Q2015\\E", "shortCiteRegEx": "Ioffe and Szegedy", "year": 2015}, {"title": "How to train deep variational autoencoders and probabilistic ladder networks. arXiv preprint arXiv:1602.02282", "author": ["C. Kaae S\u00f8nderby", "T. Raiko", "L. Maal\u00f8e", "S. Kaae S\u00f8nderby", "O. Winther"], "venue": null, "citeRegEx": "S\u00f8nderby et al\\.,? \\Q2016\\E", "shortCiteRegEx": "S\u00f8nderby et al\\.", "year": 2016}, {"title": "Adam: A Method for Stochastic Optimization", "author": ["D. Kingma", "J. Ba"], "venue": "arXiv preprint arXiv:1412.6980", "citeRegEx": "Kingma and Ba,? \\Q2014\\E", "shortCiteRegEx": "Kingma and Ba", "year": 2014}, {"title": "Semi-Supervised Learning with Deep Generative Models", "author": ["D.P. Kingma", "D.J. Rezende", "S. Mohamed", "M. Welling"], "venue": "In Proceedings of the International Conference on Machine Learning,", "citeRegEx": "Kingma et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2014}, {"title": "Auto-Encoding Variational Bayes", "author": ["Diederik P Kingma", "M. Welling"], "venue": "arXiv preprint arXiv:1312.6114", "citeRegEx": "Kingma and Welling,? \\Q2013\\E", "shortCiteRegEx": "Kingma and Welling", "year": 2013}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "In Proceedings of the IEEE Computer Society Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Learning methods for generic object recognition with invariance to pose and lighting", "author": ["Y. LeCun", "F.J. Huang", "L. Bottou"], "venue": "In Proceedings of the IEEE Computer Society Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "LeCun et al\\.,? \\Q2004\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 2004}, {"title": "Distributional Smoothing with Virtual Adversarial Training", "author": ["T. Miyato", "Maeda", "S.-i", "M. Koyama", "K. Nakae", "S. Ishii"], "venue": "arXiv preprint arXiv:1507.00677", "citeRegEx": "Miyato et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Miyato et al\\.", "year": 2015}, {"title": "Reading digits in natural images with unsupervised feature learning", "author": ["Y. Netzer", "T. Wang", "A. Coates", "A. Bissacco", "B. Wu", "A.Y. Ng"], "venue": "In Deep Learning and Unsupervised Feature Learning, workshop at Neural Information Processing Systems", "citeRegEx": "Netzer et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Netzer et al\\.", "year": 2011}, {"title": "Deep exponential families", "author": ["R. Ranganath", "L. Tang", "L. Charlin", "D.M. Blei"], "venue": "arXiv preprint arXiv:1411.2581", "citeRegEx": "Ranganath et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Ranganath et al\\.", "year": 2014}, {"title": "Hierarchical variational models. arXiv preprint arXiv:1511.02386", "author": ["R. Ranganath", "D. Tran", "D.M. Blei"], "venue": null, "citeRegEx": "Ranganath et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ranganath et al\\.", "year": 2015}, {"title": "Semi-supervised learning with ladder networks", "author": ["A. Rasmus", "M. Berglund", "M. Honkala", "H. Valpola", "T. Raiko"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Rasmus et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Rasmus et al\\.", "year": 2015}, {"title": "Variational Inference with Normalizing Flows", "author": ["D.J. Rezende", "S. Mohamed"], "venue": "In Proceedings of the International Conference on Machine Learning,", "citeRegEx": "Rezende and Mohamed,? \\Q2015\\E", "shortCiteRegEx": "Rezende and Mohamed", "year": 2015}, {"title": "Stochastic Backpropagation and Approximate Inference in Deep Generative Models. arXiv preprint arXiv:1401.4082", "author": ["D.J. Rezende", "S. Mohamed", "D. Wierstra"], "venue": null, "citeRegEx": "Rezende et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rezende et al\\.", "year": 2014}, {"title": "Rnade: The real-valued neural autoregressive density-estimator", "author": ["B. Uria", "I. Murray", "H. Larochelle"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Uria et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Uria et al\\.", "year": 2013}, {"title": "From neural pca to deep unsupervised learning. arXiv preprint arXiv:1411.7783", "author": ["H. Valpola"], "venue": null, "citeRegEx": "Valpola,? \\Q2014\\E", "shortCiteRegEx": "Valpola", "year": 2014}, {"title": "Pixel recurrent neural networks. arXiv preprint arXiv:1601.06759", "author": ["A. van den Oord", "K. Nal", "K. Kavukcuoglu"], "venue": null, "citeRegEx": "Oord et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Oord et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 18, "context": "Stochastic backpropagation, deep neural networks and approximate Bayesian inference has made deep generative models practical for large scale problems (Kingma, 2013; Rezende et al., 2014), but typically they assume a mean field latent distribution where all latent variables are independent.", "startOffset": 151, "endOffset": 187}, {"referenceID": 0, "context": "We increase the flexibility of the model by introducing auxiliary variables (Agakov and Barber, 2004) allowing more complex latent distributions.", "startOffset": 76, "endOffset": 101}, {"referenceID": 10, "context": "We demonstrate the benefits of the increased flexibility by achieving state-of-the-art performance in the semisupervised setting for the MNIST (LeCun et al., 1998),", "startOffset": 143, "endOffset": 163}, {"referenceID": 13, "context": "SVHN (Netzer et al., 2011) and NORB (LeCun et al.", "startOffset": 5, "endOffset": 26}, {"referenceID": 11, "context": ", 2011) and NORB (LeCun et al., 2004) datasets.", "startOffset": 17, "endOffset": 37}, {"referenceID": 16, "context": "Lately the Ladder network (Rasmus et al., 2015; Valpola, 2014) and virtual adversarial training (VAT) (Miyato et al.", "startOffset": 26, "endOffset": 62}, {"referenceID": 20, "context": "Lately the Ladder network (Rasmus et al., 2015; Valpola, 2014) and virtual adversarial training (VAT) (Miyato et al.", "startOffset": 26, "endOffset": 62}, {"referenceID": 12, "context": ", 2015; Valpola, 2014) and virtual adversarial training (VAT) (Miyato et al., 2015) has improved the performance further with end-toend training.", "startOffset": 62, "endOffset": 83}, {"referenceID": 8, "context": "Kingma et al. (2014) introduced a deep generative model for semisupervised learning by modeling the joint distribution over data and labels.", "startOffset": 0, "endOffset": 21}, {"referenceID": 18, "context": "Recently Kingma (2013); Rezende et al. (2014) have coupled the approach of variational inference with deep learning giving rise to powerful probabilistic models constructed by an inference neural network q(z|x) and a generative neural network p(x|z).", "startOffset": 24, "endOffset": 46}, {"referenceID": 0, "context": "In this paper we propose a variational auxiliary variable approach (Agakov and Barber, 2004) to improve the variational distribution: The generative model is extended with variables a to p(x, z, a) such that the original model is invariant to marginalization over a: p(x, z, a) = p(a|x, z)p(x, z).", "startOffset": 67, "endOffset": 92}, {"referenceID": 18, "context": "stochastic gradient descent), where we use the reparameterization trick for backpropagation through the Gaussian latent variables (Kingma, 2013; Rezende et al., 2014).", "startOffset": 130, "endOffset": 166}, {"referenceID": 0, "context": "Auxiliary variables are used in the EM algorithm and Gibbs sampling and has previously been considered for variational learning by Agakov and Barber (2004). Recently, Ranganath et al.", "startOffset": 131, "endOffset": 156}, {"referenceID": 0, "context": "Auxiliary variables are used in the EM algorithm and Gibbs sampling and has previously been considered for variational learning by Agakov and Barber (2004). Recently, Ranganath et al. (2015) has proposed to make the parameters of the variational distribution stochastic, which leads to a similar model.", "startOffset": 131, "endOffset": 191}, {"referenceID": 0, "context": "Auxiliary variables are used in the EM algorithm and Gibbs sampling and has previously been considered for variational learning by Agakov and Barber (2004). Recently, Ranganath et al. (2015) has proposed to make the parameters of the variational distribution stochastic, which leads to a similar model. It is important to note that in order not to fall back to the original VAE model one has to require p(a|x, z) 6= p(a), see Agakov and Barber (2004) and App.", "startOffset": 131, "endOffset": 451}, {"referenceID": 18, "context": "The expectation over the a and z variables were performed by Monte Carlo sampling using the reparameterization trick (Kingma, 2013; Rezende et al., 2014) and the average over y by exact enumeration so", "startOffset": 117, "endOffset": 153}, {"referenceID": 4, "context": "All parameters are initialized using the Glorot and Bengio (2010) scheme.", "startOffset": 41, "endOffset": 66}, {"referenceID": 7, "context": "For training, we have used the Adam (Kingma and Ba, 2014) optimization framework with a learning rate of 3e4, exponential decay rate for the 1st and 2nd moment at 0.", "startOffset": 36, "endOffset": 57}, {"referenceID": 1, "context": "The models are implemented in Python using Theano (Bastien et al., 2012), Lasagne (Dieleman et al.", "startOffset": 50, "endOffset": 72}, {"referenceID": 3, "context": ", 2012), Lasagne (Dieleman et al., 2015) and Parmesan libraries1.", "startOffset": 17, "endOffset": 40}, {"referenceID": 19, "context": "To avoid the phenomenon on modeling discretized values with a real-valued estimation (Uria et al., 2013), we added uniform noise between 0 and 1 to each pixel value.", "startOffset": 85, "endOffset": 104}, {"referenceID": 1, "context": "The models are implemented in Python using Theano (Bastien et al., 2012), Lasagne (Dieleman et al., 2015) and Parmesan libraries1. For the MNIST dataset we have combined the training set of 50000 examples with the validation set of 10000 examples. The test set remained as is. We used a batch size Implementation will be available in a variational extension framework to the Lasagne library named Parmesan on https://github.com. of 200 with half of the batch always being the 100 labeled samples. The labeled data are chosen randomly, but distributed evenly across classes. To speed up training, we removed the columns with a standard deviation below 0.1 resulting in an input size of dim(x) = 444. Before each epoch the normalized MNIST images were binarized by sampling Bernoulli distributions. For the SVHN dataset we used the vectorized and cropped training set dim(x) = 3072 with classes from 0 to 9, combined with the extra set resulting in 604388 data points. The test set is of size 26032. We trained on the small NORB dataset consisting of 24300 training samples and an equal amount of test samples distributed across 5 classes: animal, human, plane, truck, car. We normalized all NORB images following Miyato et al. (2015) using image pairs of 32x32 resulting in a vectorized input of dim(x) = 2048.", "startOffset": 51, "endOffset": 1233}, {"referenceID": 17, "context": "To do this we consider the 2D potential model p(z) = exp(U(z))/Z (Rezende and Mohamed, 2015) that leads to the bound", "startOffset": 65, "endOffset": 92}, {"referenceID": 17, "context": "This is similar to the findings of Rezende and Mohamed (2015) in which they demonstrate that by using normalizing flows they can fit complicated posterior distributions.", "startOffset": 35, "endOffset": 62}, {"referenceID": 2, "context": "The number of clearly activated units in z and a is quite low \u223c 20, but there is a tail of slightly active units, similar results have been reported by Burda et al. (2015). It is still evident that we have information flowing through", "startOffset": 152, "endOffset": 172}, {"referenceID": 8, "context": "Furthermore we also implemented the M2 model of Kingma et al. (2014) using the exact same hyperparameters as for learning the ADGM.", "startOffset": 48, "endOffset": 69}, {"referenceID": 2, "context": "Both have recently shown to be beneficial in generative models (Burda et al., 2015).", "startOffset": 63, "endOffset": 83}, {"referenceID": 14, "context": "Furthermore we have only proposed the models using a Gaussian latent distribution, but the model can easily be extended to other distributions (Ranganath et al., 2014; 2015).", "startOffset": 143, "endOffset": 173}, {"referenceID": 5, "context": "Another potential stabilizer is to add batch normalization (Ioffe and Szegedy, 2015) that will ensure normalization of each output batch of a fully connected hidden layer.", "startOffset": 59, "endOffset": 84}, {"referenceID": 2, "context": "Both have recently shown to be beneficial in generative models (Burda et al., 2015). Furthermore we have only proposed the models using a Gaussian latent distribution, but the model can easily be extended to other distributions (Ranganath et al., 2014; 2015). One way of approaching the stability issues of the ADGM, when training on Gaussian input distributions x is to add a temperature weighting between discriminative and stochastic learning on the KL-divergence for a and z when estimating the variational lower bound (Kaae S\u00f8nderby et al., 2016). We find similar problems for the Gaussian input distributions in van den Oord et al. (2016), where they restrict the dataset to ordinal values, so that they can apply a softmax function for the output of the generative model p(x|\u00b7).", "startOffset": 64, "endOffset": 645}, {"referenceID": 0, "context": "So we fall back to a model for z without the auxiliary as also noted by Agakov and Barber (2004). We have tested the uninformed auxiliary model in semisupervised learning for the benchmarks and we got competitive results for MNIST but not for the two other benchmarks.", "startOffset": 72, "endOffset": 97}], "year": 2016, "abstractText": "Deep generative models parameterized by neural networks have recently achieved state-ofthe-art performance in unsupervised and semisupervised learning. We extend deep generative models with auxiliary variables which improves the variational approximation. The auxiliary variables leave the generative model unchanged but make the variational distribution more expressive. Inspired by the structure of the auxiliary variable we also propose a model with two stochastic layers and skip connections. Our findings suggest that more expressive and properly specified deep generative models converge faster with better results. We show state-of-theart performance within semi-supervised learning on MNIST (0.96%), SVHN (16.61%) and NORB (9.40%) datasets.", "creator": "LaTeX with hyperref package"}}}