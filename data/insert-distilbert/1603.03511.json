{"id": "1603.03511", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Mar-2016", "title": "A Set Theoretic Approach for Knowledge Representation: the Representation Part", "abstract": "in this paper, we propose a set theoretic approach for knowledge representation. while the syntax of an application domain is captured by set theoretic statement constructs including individuals, concepts and operators, knowledge is formalized by equality assertions. we first present a primitive form that uses minimal assumed knowledge and constructs. then, assuming naive arbitrary set theory, technically we extend it by definitions, which are special kinds of knowledge. interestingly, therefore we show furthermore that the primitive argument form analysis is expressive enough to truly define logic operators, not really only propositional connectives but also automatic quantifiers.", "histories": [["v1", "Fri, 11 Mar 2016 03:22:12 GMT  (18kb)", "http://arxiv.org/abs/1603.03511v1", "This paper targets an ambitious goal to rebuild a foundation of knowledge representation based on set theory rather than classical logic. Any comments are welcome"]], "COMMENTS": "This paper targets an ambitious goal to rebuild a foundation of knowledge representation based on set theory rather than classical logic. Any comments are welcome", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["yi zhou"], "accepted": false, "id": "1603.03511"}, "pdf": {"name": "1603.03511.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n60 3.\n03 51\n1v 1\n[ cs\n.A I]"}, {"heading": "1 Introduction", "text": "Knowledge representation and reasoning (KR) is one of the central focuses of Artificial Intelligence (AI) [Baral, 2003; Brachman and Levesque, 2004; van Harmelen et al., 2008]. KR intends to syntactically formalize information in an application domain as knowledge. Then, complex problems in the domain can be solved by reasoning about the knowledge. KR is not only of its own interests but also highly influential to many other subfields in AI, including expert systems, multi-agent systems, planning, uncertainty, cognitive robotics and semantic Web [Brachman and Levesque, 2004; van Harmelen et al., 2008].\nNevertheless, KR has encountered huge difficulties. One issue is that there are too many features and building blocks to be considered [van Harmelen et al., 2008], for instance, propositions, variables, connectives, rules, actions, common sense, time/space, uncertainty, mental states and so on. In fact, KR has made huge successes on formalizing these building blocks separately. However, combing them together, even several of them, seems an extremely difficult task. On the other side, many application domains, e.g. robotics, need multiple building blocks at the same time.\nAnother critical related issue is about the balance between expressiveness and efficiency. It is widely believe that the more expressive, the less efficient, and vice versa [Levesque and Brachman, 1987]. However, in many application domains, e.g., robotics, we need both. Yet this is a very difficult task for KR formalisms. Consider\npropositional logic, a fundamental KR formalism that only takes propositions and natural propositional connectives into account. The inference problem is coNP complete, which means that, most likely, it takes exponential time in worst case.\nAgainst this backdrop, we argue that KR needs a simple, extensible, expressive and efficient approach. \u201cExtensible\u201d means that this approach should allow a current system in it to be easily extended with more building blocks. \u201cExpressive\u201d means that this approach should be able to represent different types of knowledge for a given set of building blocks.\u201cEfficient\u201d means that this approach can efficiently reason about and derive new knowledge in order to solve problems. Nevertheless, \u201csimple\u201d is an ambiguous term, which can be further elaborated into three aspects: primitive \u2014 using minimal primitive constructs, succinct \u2013 able to represent knowledge in various application domains with relatively small knowledge bases and user-friendly \u2014 easy to be understood and used by knowledge engineers.\nTowards this goal, we propose a set theoretic knowledge representation approach for syntactically representing knowledge in application domains. While the syntax of an application domain is captured by a set of individuals, concepts and operators, knowledge is simply formalized by equality assertions of the form a = b, where a and b are either atomic individuals or compound individuals. Semantically, individuals, concepts and operators are interpreted as elements, sets and functions respectively in naive set theory and knowledge of the form a = b means that the two individuals a and b are referring to the same element.\nWe separate representation and reasoning. This paper is mainly concerned with the basic ideas and the representation part, and we leave the reasoning part to another paper. In this paper, we first present the primitive form that uses minimal assumed knowledge and primitive constructs. Then, assuming naive set theory, we extend it with more building blocks by definitions that use assertions to define new syntactic objects, including individuals, concepts and operators. Once these new objects are defined, they can be used as a basis to define more. As an example, we show that we can define multi-assertions by using Cartesian product, and nested assertions by using multi-assertions. Interestingly, we show that this method, i.e., extending the primitive form by definitions based on native set theory, is powerful enough to syntactically capture logic operators, including both propositional connectives and quantifiers."}, {"heading": "2 The Primitive Form", "text": "In this section, we present the primitive form of our set theoretic knowledge representation approach. As the goal is to syntactically represent knowledge in application domains, there are two essential tasks, i.e., how to capture the syntax of the domain and how to represent knowledge in it.\nWe assume naive set theory [Halmos, 1960], including the basic concepts such as elements, sets and functions, Cartesian product, the built-in relationships \u2208 and \u2286, the built-in operators \u222a, \u2229 and \\, the Boolean set {\u22a4,\u22a5} and the set N of natural numbers, cardinality and set specifications."}, {"heading": "2.1 Capturing the syntax", "text": "Given an application domain, a syntactic structure (structure for short if clear from the context) of the domain is a triple \u3008I, C,O\u3009, where I is a collection of individuals, representing objects in the domain, C \u2286 2I a collection of concepts, representing groups of objects sharing something in common and O a collection of operators, representing relationships and connections among individuals and concepts.\nConcepts and operators can be considered as individuals as well. If needed, we can have concepts of concepts, concepts of operators, concepts of concepts of operators and so on.\nAn operator could be multi-ary, that is, it maps a tuple of individuals into a single individual.1 Each multi-ary operator O is associated with a domain of the form (C1, . . . , Cn), representing all possible values that the operator O can operate on, where Ci, 1 \u2264 i \u2264 n, is a concept. We call n the arity of O. For a tuple (a1, . . . , an) matching the domain of an operator O, i.e., ai \u2208 Ci, 1 \u2264 i \u2264 n, O maps (a1, . . . , an) into an individual, denoted by O(a1, . . . , an). We also use O(C1, . . . , Cn) to denote the set {O(a1, . . . , an) | ai \u2208 Ci}, called the range of the operator O.\nOperators are similar to functions in first-order logic but differs in two essential ways. First, operators are many-sorted as C1, . . . , Cn could be different concepts. More importantly,C1, . . . , Cn could be high-order constructs, e.g., assertions, concepts of concepts, concepts of operators and so on.\nFor instance, consider the arithmetic domain, in which 0, 1, 2, etc., are individuals; the set N of natural numbers is a concept; the successor operator Succ and the add operators Add are operators.\nFor convenience, if O is unary, we sometimes use a.O (C.O) to denote O(a) (O(C)), where a \u2208 I and C \u2208 C. If O is binary, we sometimes use a O b (AO B) to denote O(a, b) (O(A,B)), where a, b \u2208 I and A,B \u2208 C. If the range of an operator O is Boolean, we sometimes use O(a1, . . . , an) to denote O(a1, . . . , an) = \u22a4."}, {"heading": "2.2 Representing knowledge", "text": "Let \u3008I, C,O\u3009 be a syntactic structure. A term is an individual, either an atomic individual a \u2208 I or the result O(a1, . . . , an) of an operator O operating on some individuals a1, . . . , an. We also call the latter compound individuals.\nAn assertion is of the form a = b, (1)\nwhere a and b are two terms. Intuitively, an assertion of the form (1) is a piece of knowledge in the application domain, claiming that the left and right side are referring to the same objects. Here, = is the the built-in equality relation in naive set theory. Hence, a = b can be understood in alternative way that = (a, b) is true. A knowledge base is a set of assertions. Terms and assertions can be considered as individuals as well.\nFor instance, in arithmetic, 0 = Succ(1) and 2 + 3 = 5 are two typical assertions.\n1Note that in naive set theory, a tuple of sets is a Cartesian product of some sets, which itself is a set as well. Therefore, multi-ary operators can essentially be viewed as single-ary.\nSimilar to concepts that group individuals, we use schemas to group terms and assertions. A schema term is either an atomic concept C \u2208 C or the collection of results O(C1, . . . , Cn). Essentially, a schema term represents a set of terms, in which every concept is grounded by a corresponding individual. Then, a schema assertion is of the same form as form (1) except that terms can be replaced by schema terms. Similarly, a schema assertion represents a set of assertions.\nNote that it could be the case that two or more different individuals are referring to the same concept C in schema terms and assertions. In this case, we need to use different copies ofC, denoted by C1, C2, . . . , to distinguish among them. For instance, all assertions x = y, where x and y are numbers, are captured by the schema assertion N\n1 = N2. On the other side, in a schema, the same copy of a concept C can only refer to the same individual. For instance, N = N is the set of all assertions of the form x = x, where x \u2208 N."}, {"heading": "2.3 The semantics", "text": "We introduce a set theoretic semantics to define the meanings of syntactic structures and knowledge. An interpretation is a pair \u3008\u2206, .I\u3009, where \u2206 is a domain of elements that admits naive set theory and .I is a mapping function that maps individuals into domain elements in \u2206, concepts into sets in \u2206 and operators into functions in \u2206. The mapping functions .I can be generalized into mapping from terms to elements.\nLet I be an interpretation and a = b an assertion. We say that I is a model of a = b, denoted by I |= a = b iff .I(a) = .I(b), also written aI = bI . Let KB be a knowledge base. We say that I is a model of KB, denoted by I |= KB, iff I is a model of every assertion in KB. We say that an assertion A is a property of KB, denoted by KB |= A, iff for all interpretations I such that I |= KB, we have I |= A. In particular, we say that an assertion A is a tautology iff it is modeled by all interpretations.\nSince we assume naive set theory, we directly borrow some set theoretic constructs on individuals, concepts and operators. For instance, we can use \u222a(C1, C2) (also written as C1\u222aC2) to denote a new concept that unions two concepts C1 and C2. Applying this to assertions, we can see that assertions of the form (1) can indeed represent many important features in knowledge representation. For instance, the membership assertion, stating that an individual a is an instance of a concept C is the following assertion \u2208 (a, C) = \u22a4 (also written as a \u2208 C). The containment assertion, stating that a concept C1 is contained by another concept C2, is the following assertion \u2286 (C1, C2) = \u22a4 (also written as C1 \u2286 C2). The range declaration, stating that the range of an operator O operating on some concept C1 equals to another concept C2 is the following assertion O(C1) = C2."}, {"heading": "3 Definitions for Extensibility", "text": "The primitive form is a foundation that uses minimal assumed knowledge and primitive constructs. Nevertheless, sometimes it is not convenient to use it for formalizing an application domain, e.g., to represent logic expressions. Hence, we extend it with more\nbuilding blocks. As discussed in the introduction section, extensibility is a critical issue for KR approaches.\nFor this purpose, we introduce definitions in our approach. Definitions use (schema) assertions to define new syntactic objects (individuals, concepts and operators) based on existing ones. Note that definitions are nothing extra but special kinds of knowledge."}, {"heading": "3.1 Defining individuals, operators and concepts", "text": "We start with defining new individuals. An individual definition is a special kind of assertion of the form\na = t, (2)\nwhere a is an atomic individual and t is a term. Here, a is the individual to be defined. This assertion claims that the left side a is defined as the right side t. For instance, 0 = \u2205 means that the individual 0 is defined as the empty set.\nDefining new operators is similar to defining new individuals except that we use schema assertions for this purpose. LetO be an operator to be defined and (C1, . . . , Cn) its domain. An operator definition is a schema assertion of the form\nO(C1, . . . , Cn) = T, (3)\nwhere T is a schema term that mentions concepts only from C1, . . . , Cn. It could be the case that T only mentions some of C1, . . . , Cn. Note that if C1, . . . , Cn refer to the same concept, we need to use different copies respectively.\nSince a schema assertion represents a set of assertions, essentially, an operator definition of the form (3) defines the operator O by defining the value of O(a1, . . . , an) one-by-one, where ai \u2208 Ci, 1 \u2264 i \u2264 n. Sometimes we also define operators in this way. For instance, for defining the successor operator Succ, we can use the schema assertion Succ(N) = {N, {N}}. This is equivalent to an alternative definition stating that, for every natural number n, the successor of n, is defined as {n, {n}}, i.e., Succ(n) = {n, {n}}. For instance, Succ(0) is defined as {\u2205, {\u2205}}.\nDefining new concepts is different. As concepts are essentially sets, they are defined through set theoretic constructions. We directly borrow set theory notations to define concepts as follows: Enumeration Let a1, . . . , an be n individuals. Then, the collection {a1, . . . , an} is a concept, written as\nC = {a1, . . . , an}. (4)\nFor instance, we can define the concept Digits by Digits = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}. Operation Let C1 and C2 be two concepts. Then, C1 \u222a C2 (the union of C1 and C2), C1 \u2229 C2 (the intersection of C1 and C2), C1 \\ C2 (the difference of C1 and C2), C1 \u00d7C2 (the Cartesian product of C1 and C2), 2C1 (the power set of C1) are concepts. Operation can be written by assertions as well. For instance, the following assertion\nC = C1 \u222a C2 (5)\nstates that the concept C is defined as the union of C1 and C2. As an example, one can define the concept Man by Man = Human \u2229Male.\nComprehension Let C be a concept and A(C) a schema assertion that only mentions concept C. Then, individuals in C satisfying A, denoted by {x \u2208 C|A(x)} (or simply C|A(C)), form a concept, written as\nC\u2032 = C|A(C). (6)\nFor instance, we can define the conceptMale by Male = {Animal |Sex(Animal) = male}, meaning that Male consists of all animals whose sex are male. Replacement Let O be an operator and C a concept on which O is well defined. Then, the individuals mapped from C by O, denoted by {O(x) | x \u2208 C} (or simply O(C)), form a concept, written as\nC\u2032 = O(C). (7)\nFor instance, we can define the conceptParents byParents = ParentOf(Human), meaning that it consists of all individuals who is a ParentOf some human.\nDefinitions can be incremental. We may define some syntactic objects first. Once defined, they can be used to define more. One can always continue with this incremental process to extend the current system. For instance, in arithmetic, we define the successor operator first. Once defined, it can be used to define the add operator, which is further served as a basis to define more and more useful syntactic objects.\nFor clarity, we use the symbol \u201c::=\u201d to replace \u201c=\u201d for definitions. We force uniqueness of definitions. That is, each syntactic object can only be defined at most once.\nAnother critical issue is about recursiveness. Clearly, a definition such as a ::= a+ 1 is invalid and meaningless. Hence, we need to restrict our definitions. However, sometimes we do use recursion to define concepts. For instance, in arithmetic, natural numbers are define as N ::= {0} \u222a Succ(N), meaning that if n is a natural number, then the successor of n, i.e. Succ(n), is also a natural number.\nWe require that recursion can only be used in replacement definition of concepts. When a recursive replacement is used, we interpret it as an infinite process. At the beginning, all concepts contain and only contain those individuals defined by nonreplacement definitions. Then, we apply the replacement definitions to obtain new versions of concepts. This finishes the first step. We continue with the process. At each step, we first use those non-replacement definitions to expand the concepts. Then, again, we apply the replacement definitions to obtain new versions of concepts. This could be an infinite process. For instance, consider the definition of natural numbers. Initially, we have {0}. Then, applying the replacement definition, we expand it to {0, Succ(0)}. We continue with this process to obtain the infinite set of natural numbers {0, Succ(0), Succ(Succ(0)), . . .}.\nWe require that all other definitions are non-recursive. Formally, the definition dependency graph over a set of definitions (without replacements) is a directed graph < V,E >, where V consists of all syntactic objects appeared in these definitions and E is the set of all pairs (a, b) such that there exists a definition whose left side is a and whose right side mentions b.2 A set of definitions is said to be non-recursive if its corresponding definition dependency graph is acyclic.\n2For operator definitions, we ignore the concepts that are arguments in the operator and in the schema term since they are essentially grounded into individuals.\nIn fact, one can observe that the Backus-Naur form (BNF), widely used in computer science to define syntax, can be considered as a special case of our concept definitions over strings. More precisely, BNF only uses three features, enumeration (of a single element), union operation and recursive replacement by using the pre-assumed concatenation operator. Comprehension and other set operations are not used."}, {"heading": "3.2 Multi-assertions", "text": "As a case study of extending the primitive form by definitions, we extend assertions of the form (1) into multi-assertions.\nGiven a number n, we define a new operator Mn for multi-assertions with arity n by the following schema assertion:\nMn(C1 = D1, . . . , Cn = Dn) ::= (C1, . . . , Cn) = (D1, . . . , Dn),\nwhere Ci, Di, 1 \u2264 i \u2264 n, are concepts of terms. This assertion states that for n assertions, Assertioni, 1 \u2264 i \u2264 n, of the form (1), namely ai = bi, Mn(a1 = b1, . . . , an = bn) is (a1, . . . , an) = (b1, . . . , bn). Hence, Mn(a1 = b1, . . . , an = bn) holds if and only if for all i, 1 \u2264 i \u2264 n, ai = bi, that is, Assertioni holds. In this sense, this single assertion can be used to represent n assertions Assertioni, 1 \u2264 i \u2264 n.\nThen, we define the concept of multi-assertions as follows:\nMulti\u2212Assertion ::= \u22c3\n1\u2264i\u2264\u221e\nMi(A 1, . . . ,Ai),\nwhereA1, . . . ,Ai are i copies of standard assertions. For convenience, we useAssertion1, . . . , Assertionn to denote a n-ary multi-assertion.\nNote that multiple assertions are just syntactic sugar of the primitive form as they can be defined in the primitive form by using ordered pairs and Cartesian products. In this sense, they do not increase the expressive power of the primitive form. Nevertheless, using them can make the representation task more convenient in some cases. Multi-assertions are not only of interests themselves. Once defined, they can be used to define more syntactic building blocks. Note that finite knowledge bases are finite sets of assertions, i.e., multi-assertions, which can essentially be viewed as single assertions."}, {"heading": "3.3 Nested terms and assertions", "text": "We continue with our extensions for the primitive form by introducing nested terms and nested assertions. Note that terms defined in Section 2 cannot be nested in the sense that individuals used inside an operator must be atomic. This can be generalized to nested terms, where operators can use compound individuals inside.\nNested terms are defined by the following definition:\nNested\u2212 Term ::= Term \u222aN \u2212 Term\nN \u2212 Term ::= Op(Nested\u2212 Term),\nwhere Term is the concept of standard term defined in Section 2, Op is an arbitrary operator and Op(Nest \u2212 Term) is a replacement definition such that individuals in Nest\u2212 Term are in the domain of Op.\nThe above definition is a recursive definition. In fact, it can be simplified as\nNested\u2212 Term ::= Term \u222aOp(Nested\u2212 Term).\nHowever, this definition itself uses nested terms as well since Op(Nested\u2212 Term) is not atomic. Hence, before formally defining the meaning of nested terms, we use the former.\nNevertheless, from this example, we can see how to interpret nested terms. That is, whenever a nested term is used, we introduce a new atomic individual to replace it, and claim that this atomic individual defines the nested term. To formalize this idea, we also need nested assertions, in which terms used on both sides of the assertion can be nested.\nNested\u2212Assertion ::= Nested\u2212 Term = Nested\u2212 Term.\nAs mentioned, nested assertions can be represented by non-nested multi-assertions by introducing new individuals. Whenever a result of nested term is used, we introduce a new individual to replace it and claim that this new individual is defined as the nested term. That is, for every nested term Op(a1, . . . , Op\u2032(b1, . . . , bm), . . . , am) occurred in a nested assertion, we introduce a new atomic individual a\u2032; replace the above term with Op(a1, . . . , a\u2032, . . . , am) and add a new assertion a\u2032 = Op\u2032(b1, . . . , bm). F(or instance, the nested assertionOp(a,Op(b, Op\u2032(c))) = Op\u2032(d) is defined as Op(a, x) = Op\u2032(d), x = Op(b, y), y = Op\u2032(c), where x and y are new individuals. In this sense, nested assertion is essentially a multi-assertion, which can be represented as a single assertion. Therefore, nested assertion is a syntactic sugar of the primitive form as well.\nUsing nested assertions can simplify the representation task. However, one cannot overuse nested assertions since, essentially, every use of a nested term introduces a new individual. For instance, one can easily get lost with a nested assertion like Op(a,Op(b, Op\u2032(c))) = Op\u2032(d)."}, {"heading": "4 Logic Operators over Assertions", "text": "In this section, we continue to extend the primitive form with logic operators over assertions. Interestingly, we can define not only propositional connectives but also quantifiers based on naive set theory. This, on one side, provides another case study how to extend the primitive form, and on the other side, shows that, assuming naive set theory, the primitive form is expressive enough to capture logic."}, {"heading": "4.1 Propositional operators over assertions", "text": "We start with the propositional case. Let A be the concept of nested assertions. We introduce a number of operators over A, including \u00ac(A) (for negation), \u2227(A1,A2) (for conjunction), \u2228(A1,A2) (for disjunction), \u2192 (A1,A2) (for implication) and \u2261 (A1,A2) (for equivalence).\nThere could be different ways to define those operators, depending on which operators are defined directly and which are defined based on the previous ones. Here, we\ndirectly define negation, conjunction, disjunction and implication and indirectly define equivalence.\nLet a = a\u2032 and b = b\u2032 be two (nested) assertions. The propositional connectives are defined as follows:\n\u00ac(a = a\u2032) ::= {a} \u2229 {a\u2032} = \u2205\n\u2227(a = a\u2032, b = b\u2032) ::= ({a} \u2229 {a\u2032}) \u222a ({b} \u2229 {b\u2032}) = {a, a\u2032, b, b\u2032}\n\u2228(a = a\u2032, b = b\u2032) ::= ({a} \u2229 {a\u2032}) \u222a ({b} \u2229 {b\u2032}) 6= \u2205\n\u2192 (a = a\u2032, b = b\u2032) ::= ({a, a\u2032} \\ {a} \u2229 {a\u2032}) \u222a ({b} \u2229 {b\u2032}) 6= \u2205\n\u2261 (a = a\u2032, b = b\u2032) ::= \u2227 (\u2192 (a = a\u2032, b = b\u2032),\u2192 (b = b\u2032, a = a\u2032)).\nWe also use a 6= a\u2032 to denote \u00ac(a = a\u2032). One can observe that the ranges of all logic operators are nested assertions. Hence, similar to multi- and nested assertions, propositional logic operators are syntactic sugar as well.\nNow we consider some properties. For instance, according to the definitions, DeMorgan\u2019s laws are tautologies.\nTheorem 1. Let A1 and A2 be two (nested) assertions. Then, for all interpretations I ,\nI |= \u00ac(A1 \u2228 A2) \u2261 \u00ac(A1) \u2227 \u00ac(A2).\nI |= \u00ac(A1 \u2227 A2) \u2261 \u00ac(A1) \u2228 \u00ac(A2).\nAlso, the relationship between implication and disjunction, i.e., A1 \u2192 A2 \u2261 \u00acA1\u2228 A2, is a tautology as well.\nIn fact, all tautologies in propositional logic are tautologies under our context, i.e., modeled by all interpretations, and vice versa. This, actually follows from the following theorem, stating that the syntactic definitions above defines the semantics of logic operators.\nTheorem 2. Let A1 and A2 be two nested assertions. Then, for all interpretations I ,\n\u2022 I |= \u00ac(A1) iff I is not a model of A1.\n\u2022 I |= \u2227(A1, A2) iff I is a model of both A1 and A2.\n\u2022 I |= \u2228(A1, A2) iff I is a model of either A1 or A2.\n\u2022 I |=\u2192 (A1, A2) iff I is a model of A1 implies that I is a model of A2.\n\u2022 I |=\u2261 (A1, A2) iff I is a model of A1 if and only if I is a model of A2."}, {"heading": "4.2 Quantifiers over assertions", "text": "Now we consider quantifiers, including \u2200 (for the universal quantifier) and \u2203 (for the existential quantifier). The domain of quantifiers is a pair (C,A(C)), where C is a concept and A(C) is a schema assertion that only mentions C.\nThe quantifiers are defines as follows:\n\u2200(C,A(C)) ::= C|A(C) = C\n\u2203(C,A(C)) ::= C|A(C) 6= \u2205\nIntuitively, \u2200(C,A(C)) is true iff those individuals x in C such that A(x) holds equals to the concept C itself, that is, for all individuals x in C, A(x) holds; \u2203(C,A(C)) is true iff those individuals x in C such that A(x) holds does not equal to the empty set, that is, there exists at least one individual x in C such that A(x) holds. We can see that the ranges of quantifiers are nested assertions as well. Thus, quantifiers are also syntactic sugar of the primitive form.\nSimilarly, the syntactic definitions of quantifiers based on naive set theory capture their semantics.\nTheorem 3. Let C be a concept and A(C) a schema assertion that only mentions C. For all interpretations I ,\n\u2022 I |= \u2200(C,A(C)) iff for all individuals a in C, I |= A(a).\n\u2022 I |= \u2203(C,A(C)) iff there exists at least one individual a in C such that I |= A(a).\nAs a consequence, one can prove some properties about quantifiers. For instance, the universal quantifiers and the existential quantifiers are dual under negation.\nNote that quantifiers defined here are ranging from an arbitrary concept C. If C is a concept of all atomic individuals and all quantifiers range from the same concept C, then these quantifiers are first-order. Nevertheless, the concepts could be different. In this case, we have many-sorted first-order logic. Moreover, C could be complex concepts, e.g., a concept of all possible concepts. In this case, we have monadic secondorder logic. Yet C could be many more, e.g., a concept of assertions, a concept of concepts of terms etc. In this sense, the quantifiers become high-order."}, {"heading": "5 Conclusions, Discussions and Related Work", "text": "In this paper, we have proposed a set theoretic approach to syntactically represent knowledge in application domains. The syntax of a domain is captured by individuals (i.e., objects in the domain), concepts (i.e., groups of objects sharing something in common) and operators (i.e., connections and relationships among objects). From a set theory point of view, individuals, concepts and operators are interpreted as elements, sets and functions respectively. In the primitive form, knowledge in the domain is simply captured by equality assertions of the form a = b, where a and b are terms.\nWe have shown how to extend a system by definitions, which are special kinds of knowledge used to define new individuals, concepts and operators. For instance, we have extended the primitive form with multi-assertions and nested assertions, which are just syntactic sugar of the primitive form as they can be expressed in it. Extensibility is a critical issue for KR. A KR approach should be able to define new syntactic objects based on exiting ones. Once defined, these objects can be further used to define more.\nInterestingly, we have shown that logic operators, not only propositional connectives but also quantifiers, can be defined in the primitive form based on naive set theory. This, on one side, shows that we can define the semantics of logic operators syntactically, and on the other side, shows the expressiveness of our approach.\nAs discussed in the introduction section, our motivation is to propose a simple, extensible, expressive and efficient KR approach. While extensibility and expressiveness are discussed in the above two paragraphs, simplicity is difficult to justify. We argue that our approach indeed satisfy the three aspects of simplicity. For primitiveness, our approach only uses naive set theory, syntax including individuals, concepts and operators and knowledge of the form a = b. For succinctness, the primitive form only needs at most double length to simulate logic, which is an arguably succinct KR formalism. For user-friendliness, we believe that knowledge of the form a = b, similar to the assignment statement in programming, can be easily understood and used by knowledge engineers.\nCertainly, one can define multi-assertion, nested assertion and logic operators directly. Nevertheless, our motivation is to provide a simple foundation for knowledge representation so that all other features and building blocks in KR can be defined as extensions of it. We believe that our primitive form is such a candidate, evident from the fact that it is able to capture high-order logic expressions.\nThis work has two philosophical implications. First, for answering the question \u201cwhat is knowledge\u201d, our approach defines it as equality assertions between two terms. Again, evident from the fact that single equality assertions can capture high-order logic expressions based on naive set theory, we believe that it provides a uniformed view of what knowledge is. Such a uniformed view is critical for not only understanding and representing knowledge but also utilizing and reasoning about knowledge. Second, we have shown that we can define the semantics of logic syntactically based on naive set theory. We believe that the same thing can be done for the semantics of other features in KR, e.g., nonmonotonic reasoning. This is useful as most operations done by machines are syntax based.\nThis paper is mainly focused on the representation part. We leave the reasoning part and the efficiency discussions to another paper. Nevertheless, it is worth mentioning a little here. Roughly speaking, reasoning is about how to derive properties from a knowledge base. We distinguish between querying and reasoning. The former is to check whether an assertion is a property of a knowledge base, while the latter is to find some properties of a given knowledge base. Clearly, reasoning can serve as a means for querying, but they are not the same. Querying is generally difficult of our approach as it can express logic. Nevertheless, reasoning could be efficient, and that is exactly the focus of our reasoning paper.\nAlthough querying the full language is generally undecidable, there could be some meaningful and useful tractable subclasses. An important case is database. Note again that, in the primitive form, knowledge is simply formalized by equality assertions of the form a = b. Nevertheless, this can be indeed expressive as a and b could be complex nested terms. A database under our context only contains two kinds of equality assertions, i.e., data of the form Op(a1, . . . , an) = b, where ai, 1 \u2264 i \u2264 n, and b are atomic individuals and membership statements a \u2208 C, where a is an atomic individual and C is an atomic concept. In this sense, data is a special kind of knowledge. Querying on such a database is tractable. We leave the detailed discussions to another work.\nOur set theoretic KR approach is deeply inspired by and rooted in many other KR formalisms, including propositional and first-order logic, semantic network and description logic. The dynamic version of this approach (will be presented in another\npaper) is deeply related to rule based formalisms including Hoare logic and answer set programming. Interestingly, although originated from a different motivation, our approach shares many basic ideas and borrows many notations from description logic [Baader et al., 2003]. In fact, we can rewrite all building blocks in description logic to our approach since the primitive form can capture first-order logic. Table 1 depicts some of them. Here, R\u0302 is defined to transform a binary Boolean relationship R to a\nunary operator, i.e., R\u0302(C) ::= D|R(C,D), and (D)C denotes the cardinality of D. Nevertheless, our approach differs from description logic in several essential ways. The most important difference is that, for the purpose of forming new concepts by operators/roles, our approach directly uses set theoretic constructs including comprehension and replacement, while description logics use role restrictions. As an example, suppose that we want to specify a concept including all human having female children. In our approach, this is formalized by Human | Children(Human)\u2229Female 6= \u2205, while in description logic, it is formalized by \u2203Parentof.(Female). Secondly, we use multi-ary operators, e.g., the Add operator, instead of binary Boolean relationships to connect individuals/concepts. Thirdly, all knowledge in our approach are essentially formalized in the same form, i.e., equality assertions. Fourthly, we allow complex assertions including high-order constructs. Last but not least, we particularly highlight the importance of extensibility in our approach.\nWe shall present a series of papers to propose the set theoretic knowledge representation approach. This paper is a foundation that is mainly concerned with the basic ideas and the representation part. As mentioned, there are a number of things to present in the future. One critical task is to present the reasoning part. Another one is to formalize dynamics, including how to represent basic and compound actions, how to describe the effects of actions and the interactions among knowledge and actions."}], "references": [{"title": "editors", "author": ["Franz Baader", "Diego Calvanese", "Deborah L. McGuinness", "Daniele Nardi", "Peter F. Patel-Schneider"], "venue": "The Description Logic Handbook: Theory, Implementation, and Applications. Cambridge University Press, New York, NY, USA,", "citeRegEx": "Baader et al.. 2003", "shortCiteRegEx": null, "year": 2003}, {"title": "NY", "author": ["Chitta Baral. Knowledge Representation", "Reasoning", "Declarative Problem Solving. Cambridge University Press", "New York"], "venue": "USA,", "citeRegEx": "Baral. 2003", "shortCiteRegEx": null, "year": 2003}, {"title": "Knowledge Representation and Reasoning", "author": ["Ronald J. Brachman", "Hector J. Levesque"], "venue": "Elsevier,", "citeRegEx": "Brachman and Levesque. 2004", "shortCiteRegEx": null, "year": 2004}, {"title": "1960", "author": ["Paul Halmos. Naive Set Theory. Van Nostrand"], "venue": "Reprinted by Springer-Verlag, Undergraduate Texts in Mathematics,", "citeRegEx": "Halmos. 1960", "shortCiteRegEx": null, "year": 1974}, {"title": "Computational Intelligence", "author": ["Hector J. Levesque", "Ronald J. Brachman. Expressiveness", "tractability in knowledge representation", "reasoning"], "venue": "3:78\u201393,", "citeRegEx": "Levesque and Brachman. 1987", "shortCiteRegEx": null, "year": 1987}, {"title": "editors", "author": ["Frank van Harmelen", "Vladimir Lifschitz", "Bruce W. Porter"], "venue": "Handbook of Knowledge Representation, volume 3 of Foundations of Artificial Intelligence. Elsevier,", "citeRegEx": "van Harmelen et al.. 2008", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [{"referenceID": 1, "context": "Knowledge representation and reasoning (KR) is one of the central focuses of Artificial Intelligence (AI) [Baral, 2003; Brachman and Levesque, 2004; van Harmelen et al., 2008].", "startOffset": 106, "endOffset": 175}, {"referenceID": 2, "context": "Knowledge representation and reasoning (KR) is one of the central focuses of Artificial Intelligence (AI) [Baral, 2003; Brachman and Levesque, 2004; van Harmelen et al., 2008].", "startOffset": 106, "endOffset": 175}, {"referenceID": 5, "context": "Knowledge representation and reasoning (KR) is one of the central focuses of Artificial Intelligence (AI) [Baral, 2003; Brachman and Levesque, 2004; van Harmelen et al., 2008].", "startOffset": 106, "endOffset": 175}, {"referenceID": 2, "context": "KR is not only of its own interests but also highly influential to many other subfields in AI, including expert systems, multi-agent systems, planning, uncertainty, cognitive robotics and semantic Web [Brachman and Levesque, 2004; van Harmelen et al., 2008].", "startOffset": 201, "endOffset": 257}, {"referenceID": 5, "context": "KR is not only of its own interests but also highly influential to many other subfields in AI, including expert systems, multi-agent systems, planning, uncertainty, cognitive robotics and semantic Web [Brachman and Levesque, 2004; van Harmelen et al., 2008].", "startOffset": 201, "endOffset": 257}, {"referenceID": 5, "context": "One issue is that there are too many features and building blocks to be considered [van Harmelen et al., 2008], for instance, propositions, variables, connectives, rules, actions, common sense, time/space, uncertainty, mental states and so on.", "startOffset": 83, "endOffset": 110}, {"referenceID": 4, "context": "It is widely believe that the more expressive, the less efficient, and vice versa [Levesque and Brachman, 1987].", "startOffset": 82, "endOffset": 111}, {"referenceID": 3, "context": "We assume naive set theory [Halmos, 1960], including the basic concepts such as elements, sets and functions, Cartesian product, the built-in relationships \u2208 and \u2286, the built-in operators \u222a, \u2229 and \\, the Boolean set {\u22a4,\u22a5} and the set N of natural numbers, cardinality and set specifications.", "startOffset": 27, "endOffset": 41}, {"referenceID": 0, "context": "Interestingly, although originated from a different motivation, our approach shares many basic ideas and borrows many notations from description logic [Baader et al., 2003].", "startOffset": 151, "endOffset": 172}], "year": 2016, "abstractText": "In this paper, we propose a set theoretic approach for knowledge representation. While the syntax of an application domain is captured by set theoretic constructs including individuals, concepts and operators, knowledge is formalized by equality assertions. We first present a primitive form that uses minimal assumed knowledge and constructs. Then, assuming naive set theory, we extend it by definitions, which are special kinds of knowledge. Interestingly, we show that the primitive form is expressive enough to define logic operators, not only propositional connectives but also quantifiers.", "creator": "LaTeX with hyperref package"}}}