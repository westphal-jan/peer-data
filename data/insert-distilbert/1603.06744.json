{"id": "1603.06744", "review": {"conference": "acl", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Mar-2016", "title": "Latent Predictor Networks for Code Generation", "abstract": "many language generation tasks require the production of text conditioned on both structured conditioning and unstructured inputs. we present a notably novel neural temporal network architecture which generates an output sequence conditioned on an even arbitrary number of input functions. crucially, our approach allows both the choice of conditioning context and the granularity of generation, for example characters or tokens, to be marginalised, thus permitting scalable and effective training. precisely using this framework, we address already the problem faced of generating programming code from a partially mixed natural language and structured specification. therefore we create two new data complexity sets for this paradigm derived from the collectible doom trading card fantasy games magic city the gathering and hearthstone. on these, and a third preexisting corpus, we demonstrate that marginalising multiple predictors allows creating our model to usually outperform strong benchmarks.", "histories": [["v1", "Tue, 22 Mar 2016 11:41:51 GMT  (1701kb,D)", "http://arxiv.org/abs/1603.06744v1", null], ["v2", "Wed, 8 Jun 2016 14:46:00 GMT  (2543kb,D)", "http://arxiv.org/abs/1603.06744v2", null]], "reviews": [], "SUBJECTS": "cs.CL cs.NE", "authors": ["wang ling", "edward grefenstette", "karl moritz hermann", "tom\\'a\\v{s} ko\\v{c}isk\\'y", "rew senior", "fumin wang", "phil blunsom"], "accepted": true, "id": "1603.06744"}, "pdf": {"name": "1603.06744.pdf", "metadata": {"source": "CRF", "title": "Latent Predictor Networks for Code Generation", "authors": ["Wang Ling", "Edward Grefenstette", "Karl Moritz Hermann", "Tomas Kocisky", "Andrew Senior", "Fumin Wang", "Phil Blunsom"], "emails": ["lingwang@google.com", "etg@google.com", "kmh@google.com", "tkocisky@google.com", "andrewsenior@google.com", "awaw@google.com", "pblunsom@google.com"], "sections": [{"heading": "1 Introduction", "text": "The generation of both natural and formal languages often requires models conditioned on diverse predictors [1, 2]. Most models take the restrictive approach of employing a single predictor, such as a word softmax, to predict all tokens of the output sequence. To illustrate its limitation, suppose we wish to generate the answer to the question \u201cWho wrote The Foundation?\u201d as \u201cThe Foundation was written by Issac Asimov\u201d. The generation of the words \u201cIssac Asimov\u201d and \u201cThe Foundation\u201d from a word softmax trained on annotated data is unlikely to succeed as these words are sparse. A robust model might, for example, employ one predictor to copy \u201cThe Foundation\u201d from the input, and a another one to find the answer \u201cIssac Asimov\u201d by searching through a database. However, training multiple predictors is in itself a challenging task, as no annotation exists regarding the predictor used to generate each output token. Furthermore, predictors generate segments of different granularity, as database queries can generate multiple tokens while a word softmax generates a single token. In this work we introduce Latent Predictor Networks (LPNs), a novel neural architecture that fulfills these desiderata: at the core of the architecture is the exact computation of the marginal likelihood over latent predictors and generated segments allowing for scalable training.\nWe introduce a new corpus for the automatic generation of code for cards in Trading Card Games (TCGs), on which we validate our model. TCGs, such as Magic the Gathering (MTG) and Hearthstone (HS), are games played between two players that build decks from an ever expanding pool of cards. Examples of such cards are shown in Figure 1. Each card is identified by its attributes (e.g., name and cost) and has an effect that is described in a text box. Digital implementations of these games implement the game logic, which includes the card effects. This is attractive from a data extraction perspective as not only are the data annotations naturally generated, but we can also view the card as a specification communicated from a designer to a software engineer.\nThis dataset presents additional challenges to prior work in code generation [2, 3, 4, 5, 6], including the handling of structured input\u2014i.e. cards are composed by multiple sequences (e.g., name and\nar X\niv :1\n60 3.\n06 74\n4v 1\n[ cs\n.C L\n] 2\n2 M\nar 2\ndescription)\u2014and attributes (e.g., attack and cost), and the longevity of the generated sequences. Thus, we propose an extension to attention-based neural models [7] to attend over structured inputs. Finally, we propose a code compression method to reduce the size of the code without impacting the quality of the predictions.\nExperiments performed on our new datasets, and a further pre-existing one, suggest that our extensions outperform strong benchmarks.\nThe paper is structured as follows: We first describe the data collection process (Section 2) and formally define our problem and our baseline method (Section 3). Then, we propose our extensions, namely, the structured attention mechanism (Section 4) and the LPN architecture (Section 5). We follow with the description of our code compression algorithm (Section 6). Our model is validated by comparing with multiple benchmarks (Section 7). Finally, we contextualize our findings with related work (Section 8) and present the conclusions of this work (Section 9)."}, {"heading": "2 Dataset Extraction", "text": "We obtain data from open source implementations of two different TCGs, MTG in Java1 and HS in Python.2 The statistics of the corpora are illustrated in Table 1. In both corpora, each card is implemented in a separate class file, which we strip of imports and comments. We categorize the content of each card into two different groups: singular fields that contain only one value; and text fields, which contain multiple words representing different units of meaning. In MTG, there are six singular fields (attack, defense, rarity, set, id, and health) and four text fields (cost, type, name, and description), whereas HS cards have eight singular fields (attack, health, cost and durability, rarity, type, race and class) and two text fields (name and description). Text fields are tokenized by splitting on whitespace and punctuation, with exceptions accounting for domain specific artifacts (e.g., Green mana is described as \u201c{G}\u201d in MTG). Empty fields are replaced with a \u201cNIL\u201d token. The code for the HS card in Figure 1 is shown in Figure 2. The effect of \u201cdrawing cards until the player has as many cards as the opponent\u201d is implemented by computing the difference between the\n1github.com/magefree/mage/ 2github.com/danielyule/hearthbreaker/\nplayers\u2019 hands and invoking the draw method that number of times. This illustrates that the mapping between the description and the code is non-linear, as no information is given in the text regarding the specifics of the implementation."}, {"heading": "3 Problem Definition", "text": "Given the description of a card x, our decoding problem is to find the code y\u0302 so that:\ny\u0302 = argmax y\nlogP (y | x) (1)\nHere logP (y | x) is estimated by a given model. We define y = y1..y|y| as the sequence of characters of the code with length |y|. We index each input field with k = 1..|x|, where |x| quantifies the number of input fields. |xk| denotes the number of tokens in xk and xki selects the i-th token."}, {"heading": "4 Structured Attention", "text": "Background When |x| = 1, the attention model of [7] applies. Following the chain rule, logP (y|x) = \u2211 t=1..|y| logP (yt|y1..yt\u22121, x), each token yt is predicted conditioned on the previously generated sequence y1..yt\u22121 and input sequence x1 = x11..x1|x1|. Probability are estimated with a softmax over the vocabulary Y :\np(yt|y1..yt\u22121, x1) = softmax yt\u2208Y (ht) (2)\nwhere ht is the Recurrent Neural Network (RNN) state at time stamp t, which is modeled as g(yt\u22121,ht\u22121, zt). g(\u00b7) is a recurrent update function for generating the new state ht based on the previous token yt\u22121, the previous state ht\u22121, and the input text representation zt. We implement g using a Long Short-Term Memory (LSTM) RNNs [8].\nThe attention mechanism generates the representation of the input sequence x = x11..x1|x1|, and zt is computed as the weighted sum zt = \u2211 i=1..|x1| aih(x1i), where ai is the attention coefficient\nobtained for token x1i and h is a function that maps each x1i to a continuous vector. In general, h is a function that projects x1i by learning a lookup table, and then embedding contextual words by defining an RNN. Coefficients ai are computed with a softmax over input tokens x11..x1|x1|:\nai = softmax x1i\u2208x (v(h(x1i),ht\u22121)) (3)\nFunction v computes the affinity of each token x1i and the current output context ht\u22121. A common implementation of v is to apply a linear projection from h(x1i) : ht\u22121 (where : is the concatenation operation) into a fixed size vector, followed by a tanh and another linear projection.\nOur Approach We extend the computation of zt for cases when x corresponds to multiple fields. Figure 3 illustrates how the MTG card \u201cSerra Angel\u201d is encoded, assuming that there are two singular fields and one text field. We first encode each token xki using the C2W model described in [9], which is a replacement for lookup tables where word representations are learned at the character level (cf. C2W row). A context-aware representation is built for words in the text fields using a bidirectional LSTM (cf. Bi-LSTM row). Computing attention over multiple input fields is problematic as each input field\u2019s vectors have different sizes and value ranges. Thus, we learn a linear projection mapping each input token xki to a vector with a common dimensionality and value range (cf. Linear row). Denoting this process as f(xki), we extend Equation 3 as:\naki = softmax xki\u2208x (v(f(xki),ht\u22121)) (4)\nHere a scalar coefficient aki is computed for each input token xki (cf. \u201cTanh\u201d, \u201cLinear\u201d, and \u201cSoftmax\u201d rows). Thus, the overall input representation zt is computed as:\nzt = \u2211\nk=1..|x|,i=1..|xk|\naijf(xki) (5)"}, {"heading": "5 Latent Predictor Networks", "text": "Background In order to decode from x to y, many words must be copied into the code, such as the name of the card, the attack and the cost values. If we observe the HS card in Figure 1 and the respective code in Figure 2, we observe that the name \u201cDivine Favor\u201d must be copied into the class name and in the constructor, along with the cost of the card \u201c3\u201d. As explained earlier, this problem is not specific to our task: for instance, in the dataset of [10], a model must learn to map from timeout = int ( timeout ) to \u201cconvert timeout into an integer.\u201d, where the name of\nthe variable \u201ctimeout\u201d must be copied into the output sequence. The same issue exists for proper nouns in machine translation which are typically copied from one language to the other. Pointer networks [11] address this by defining a probability distribution over a set of units that can be copied c = c1..c|c|. The probability of copying a unit ci is modeled as:\np(ci) = softmax ci\u2208c (v(h(ci),q)) (6)\nAs in the attention model (Equation 3), v is a function that computes the affinity between an embedded copyable unit h(ci) and an arbitrary vector q.\nOur Approach Combining pointer networks with a character-based softmax is in itself difficult as these generate segments of different granularity and there is no ground truth of which predictor to use at each time stamp. We now describe Latent Predictor Networks, which model the conditional probability logP (y|x) over the latent sequence of predictors used to generate y. We assume that our model uses multiple predictors r \u2208 R, where each r can generate multiple segments st = yt..yt+|st|\u22121 with arbitrary length |st| at time stamp t. An example is illustrated in Figure 4, where we observe that to generate the code init(\u2018Tirion Fordring\u2019,8,6,6), a pointer network can be used to generate the sequences y137 =Tirion and y 22 14=Fordring (cf. \u201cCopy From Name\u201d row). These sequences can also be generated using a character softmax (cf. \u201cGenerate Characters\u201d row). The same applies to the generation of the attack, health and cost values as each of these predictors is an element in R. Thus, we define our objective function as a marginal log likelihood function over a latent variable \u03c9:\nlogP (y | x) = log \u2211 \u03c9\u2208\u03c9\u0304 P (y, \u03c9 | x) (7)\nFormally, \u03c9 is a sequence of pairs rt, st, where rt \u2208 R denotes the predictor that is used at timestamp t and st the generated string. We decompose P (y, \u03c9 | x) as the product of the probabilities of segments st and predictors rt:\nP (y, \u03c9 | x) = \u220f\nrt,st\u2208\u03c9 P (st, rt | y1..yt\u22121, x) =\u220f\nrt,st\u2208\u03c9 P (st | y1..yt\u22121, x, rt)P (rt | y1..yt\u22121, x) (8)\nwhere the generation of each segment is performed in two steps: select the predictor rt with probability P (rt | y1..yt\u22121, x) and then generate st conditioned on predictor rt with probability\nlogP (st | y1..yt\u22121, x, rt). The probability of each predictor is computed using a softmax over all predictors in R conditioned on the previous state ht\u22121 and the input representation zt (cf. \u201cSelect Predictor\u201d box). Then, the probability of generating the segment st depends on the predictor type. We define three types of predictors:\nCharacter Generation Generate a single character from observed characters from the training data. Only one character is generated at each time stamp with probability given by Equation 2.\nCopy Singular Field For singular fields only the field itself can be copied, for instance, the value of the attack and cost attributes or the type of card. The size of the generated segment is the number of characters in the copied field and the segment is generated with probability 1.\nCopy Text Field For text fields, we allow each of the words xki within the field to be copied. The probability of copying a word is learned with a pointer network (cf. \u201cCopy From Name\u201d box), where h(ci) is set to the representation of the word f(xki) and q is the concatenation ht\u22121 : zt of the state and input vectors. This predictor generates a segment with the size of the copied word.\nIt is important to note that the state vector ht\u22121 is generated by building an RNN over the sequence of characters up until the time stamp t\u2212 1, i.e. the previous context yt\u22121 is encoded at the character level. This allows the number of possible states to remain tractable at training time."}, {"heading": "5.1 Inference", "text": "At training time we use back-propagation to maximize the probability of observed code, according to Equation 7. Gradient computation must be performed with respect to each computed probability P (rt | y1..yt\u22121, x) and P (st | y1..yt\u22121, x, rt). The derivative \u2202 log P (y|x)\u2202P (rt|y1..yt\u22121,x) yields:\n\u2202\u03b1tP (rt | y1..yt\u22121, x)\u03b2t,rt + \u03bert P (y | x)\u2202P (rt | y1..yt\u22121, x) = \u03b1t\u03b2t,rt \u03b1|y|+1\n(9)\nHere \u03b1t denotes the cumulative probability of all values of \u03c9 up until time stamp t and \u03b2t,rt denotes the cumulative probability starting from predictor rt at time stamp t, exclusive. \u03b1|y|+1 yields the marginal probability P (y | x). For completeness, \u03ber denotes the cumulative probabilities of all \u03c9 that do not include rt. \u03b1 and \u03b2 can be computed efficiently using the forward-backward algorithm for Semi-Markov models [12], where we associate P (rt | y1..yt\u22121, x) to edges and P (st | y1..yt\u22121, x, rt) to nodes in the Markov chain. The derivative \u2202 log P (y|x)\u2202P (st|y1..yt\u22121,x,rt) can be computed using the same logic."}, {"heading": "5.2 Decoding", "text": "Decoding is performed using a stack-based decoder with beam search. Each state S corresponds to a choice of predictor rt and segment st at a given time stamp t. This state is scored as V (S) = logP (st | y1..yt\u22121, x, rt) + logP (rt | y1..yt\u22121, x) + V (prev(S)), where prev(S) denotes the predecessor state of S. At each time stamp, the n states with the highest scores V are expanded, where n is the size of the beam. For each predictor rt, each output st generates a new state. Finally, at each timestamp t, all states which produce the same output up to that point are merged by summing their probabilities."}, {"heading": "6 Code Compression", "text": "As the attention-based model traverses all input units at each generation step, generation becomes quite expensive for datasets such as MTG where the average card code contains 1,080 characters. While this is not the essential contribution in our paper, we propose a simple method to compress the code while maintaining the structure of the code, allowing us to train on datasets with longer code (e.g., MTG).\nThe idea behind that method is that many keywords in the programming language (e.g., public and return) as well as frequently used functions and classes (e.g., Card) can be learned without\ncharacter level information. We exploit this by mapping such strings onto additional symbols Xi (e.g., public class copy() \u2192 \u201cX1 X2 X3()\u201d). Formally, we seek the string v\u0302 among all strings V (max) up to length max that maximally reduces the size of the corpus:\nv\u0302 = argmax v\u2208V (max)\n(len(v)\u2212 1)C(v) (10)\nwhere C(v) is the number of occurrences of v in the training corpus and len(v) its length. (len(v)\u2212 1)C(v) can be seen as the number of characters reduced by replacing v with a non-terminal symbol. To find q(v) efficiently, we leverage the fact that C(v) \u2264 C(v\u2032) if v contains v\u2032. It follows that (max\u2212 1)C(v) \u2264 (max\u2212 1)C(v\u2032), which means that the maximum compression obtainable for v at size max is always lower than that of v\u2032. Thus, if we can find a v\u0304 such that (len(v\u0304)\u2212 1)C(v\u0304) > (max \u2212 1)C(v\u2032), that is v\u0304 at the current size achieves a better compression rate than v\u2032 at the maximum length, then it follows that all sequences that contain v can be discarded as candidates. Based on this idea, our iterative search starts by obtaining the counts C(v) for all segments of size s = 2, and computing the best scoring segment v\u0304. Then, we build a list L(s) of all segments that achieve a better compression rate than v\u0304 at their maximum size. At size s + 1, only segments that contain a element in L(s \u2212 1) need to be considered, making the number of substrings to be tested to be tractable as s increases. The algorithm stops once s reaches max or the newly generated list L(s) contains no elements.\nOnce v\u0302 is obtained, we replace all occurrences of v\u0302 with a new non-terminal symbol. This process is repeated until a desired average size for the code is reached. While training is performed on the compressed code, the decoding will undergo an additional step, where the compressed code is restored by expanding the all Xi. Table 2 shows the first 10 replacements from the MTG dataset, reducing its average size from 1080 to 794."}, {"heading": "7 Experiments", "text": "Datasets Tests are performed on the two datasets provided in this paper, described in Table 1. Additionally, to test the model\u2019s ability of generalize to other domains, we report results in the Django dataset [10], comprising of 16000 training, 1000 development and 1805 test annotations. Each data point consists of a line of Python code together with a manually created natural language description.\nNeural Benchmarks We implement two standard neural networks, namely a sequence-tosequence model [13] and an attention-based model [7]. The former is adapted to work with multiple input fields by concatenating them, while the latter uses our proposed attention model. These models are denoted as \u201cSequence\u201d and \u201cAttention\u201d.\nMachine Translation Baselines Our problem can also be viewed in the framework of semantic parsing [2, 14, 3, 5]. Unfortunately, these approaches define strong assumptions regarding the grammar and structure of the output, which makes it difficult to generalize for other domains [15]. However, the work in [16] provides evidence that using machine translation systems without committing\nto such assumptions can lead to results competitive with the systems described above. We follow the same approach and create a phrase-based [1] model and a hierarchical model (or PCFG) [17] as benchmarks for the work presented here. As these models are optimized to generate words, not characters, we implement a tokenizer that splits on all punctuation characters, except for the \u201c \u201d character. We also facilitate the task by splitting CamelCase words (e.g., class TirionFordring \u2192 class Tirion Fordring). Otherwise all class names would not be generated correctly by these methods. We used the models implemented in Moses to generate these baselines using standard parameters, using IBM Alignment Model 4 for word alignments [18], MERT for tuning [19] and a 4-gram Kenser-Ney Smoothed language model [20]. These models will be denoted as \u201cPhrase\u201d and \u201cHierarchical\u201d, respectively.\nRetrieval Baseline It was reported in [6] that a simple retrieval method that outputs the most similar input for each sample, measured using Levenshtein Distance, leads to good results. We implement this baseline by computing the average Levenshtein Distance for each input field. This baseline is denoted \u201cRetrieval\u201d.\nEvaluation A typical metric is to compute the accuracy of whether the generated code exactly matches the reference code. This is informative as it gives an intuition of how many samples can be used without further human post-editing. However, it does not provide an illustration on the degree of closeness to achieving the correct code. Thus, we also test using BLEU-4 [21] at the token level.\nSetup The multiple input types (Figure 3) are hyper-parametrized as follows: The C2W model (cf. \u201cC2W\u201d row) used to obtain continuous vectors for word types uses character embeddings of size 100 and LSTM states of size 300, and generates vectors of size 300. We also report on results using word lookup tables of size 300, where we replace singletons with a special unknown token with probability 0.5 during training, which is then used for out-of-vocabulary words. For text fields, the context (cf. \u201cBi-LSTM\u201d row) is encoded with a Bi-LSTM of size 300 for the forward and backward states. Finally, a linear layer maps the different input tokens into a common space with of size 300 (cf. \u201cLinear\u201d row). As for the attention model, we used an hidden layer of size 200 before applying the non-linearity (row \u201cTanh\u201d). As for the decoder (Figure 4), we encode output characters with size 100 (cf. \u201coutput (y)\u201d row), and an LSTM state of size 300 and an input representation of size 300 (cf. \u201cState(h+z)\u201d row). For each pointer network (e.g., \u201cCopy From Name\u201d box), the intersection between the input units and the state units are performed with a vector of size 200. Training is performed using mini-batches of 20 samples using AdaDelta [22] and we report results using the iteration with the highest BLEU score on the validation set (tested at intervals of 5000 mini-batches). Decoding is performed with a beam of 1000. As for compression, we performed a grid search over compressing the code from 0% to 80% of the original average length over intervals of 20% for the HS and Django datasets. On the MTG dataset, we are forced to compress the code up to 80% due to performance issues when training with extremely long sequences."}, {"heading": "7.1 Results", "text": "Baseline Comparison Results are reported in Table 3. Regarding the retrieval results (cf. \u201cRetrieval\u201d row), we observe the best BLEU scores among the baselines in the card datasets (cf. \u201cMTG\u201d and \u201cHS\u201d columns). A key advantage of this method is that retrieving existing entities guarantees that the output is well formed, with no syntactic errors such as producing a non-existent function call or generating incomplete code. As BLEU penalizes length mismatches, generating code that matches the length of the reference provides a large boost. The phrase-based translation model (cf. \u201cPhrase\u201d row) performs well in the Django (cf. \u201cDjango\u201d column), where mapping from the input to the output is mostly monotonic, while the hierarchical model (cf. \u201cHierarchical\u201d row) yields better performance on the card datasets as the concatenation of the input fields needs to be reordered extensively into the output sequence. Finally, the sequence-to-sequence model (cf. \u201cSequence\u201d row) yields extremely low results, mainly due to the lack of capacity needed to memorize whole input and output sequences, while the attention based model (cf. \u201cAttention\u201d row) produces results on par with phrase-based systems. Finally, we observe that by including all the proposed components (cf. \u201cOur System\u201d row), we obtain significant improvements over all baselines in the three datasets and is the only one that obtains non-zero accuracies in the card datasets.\nComponent Comparison We present ablation results in order to analyze the contribution of each of our modifications. Removing the C2W model (cf. \u201c\u2013 C2W\u201d row) yields a small deterioration, as word lookup tables are more susceptible to sparsity. The only exception is in the HS dataset, where lookup tables perform better. We believe that this is because the small size of the training set does not provide enough evidence for the character model to scale to unknown words. Surprisingly, running our model compression code (cf. \u201c\u2013 Compress\u201d row) actually yields worse results. Table 4 provides an illustration of the results for different compression rates. We obtain the best results with an 80% compression rate (cf. \u201cBLEU Scores\u201d block), while maximising the time each card is processed (cf. \u201cSeconds Per Card\u201d block). While the reason for this is uncertain, it is similar to the finding that language models that output characters tend to under-perform those that output words [23]. This applies when using the regular optimization process with a character softmax (cf. \u201cSoftmax\u201d rows), but also when using the LPN (cf. \u201cLPN\u201d rows). We also note that the training speed of LPNs is not significantly lower as marginalization is performed with a dynamic program. Finally, a significant decrease is observed if we remove the pointer networks (cf. \u201c\u2013 LPN\u201d row). These improvements also generalize to sequence-to-sequence models (cf. \u201c\u2013 Attention\u201d row), as the scores are superior to the sequence-to-sequence benchmark (cf. \u201cSequence\u201d row).\nResult Analysis Examples of the code generated for two cards are illustrated in Figure 5. We obtain the segments that were copied by the pointer networks by computing the most likely predictor for those segments. We observe from the marked segments that the model effectively copies the attributes that match in the output, including the name of the card that must be collapsed. As expected, the majority of the errors originate from inaccuracies in the generation of the effect of the card. While it is encouraging to observe that a small percentage of the cards are generated correctly, it is worth mentioning that these are the result of many cards possessing similar effects. The \u201cMadder Bomber\u201d card is generated correctly as there is a similar card \u201cMad Bomber\u201d in the training set, which implements the same effect, except that it deals 3 damage instead of 6. Yet, it is a promising result that the model was able to capture this difference. However, in many cases, effects that radi-\ncally differ from seen ones tend to be generated incorrectly. In the card \u201cPreparation\u201d, we observe that while the properties of the card are generated correctly, the effect implements a unrelated one, with the exception of the value 3, which is correctly copied. Yet, interestingly, it still generates a valid effect, which sets a minion\u2019s attack to 3. Investigating better methods to accurately generate these effects will be object of further studies."}, {"heading": "8 Related Work", "text": "While we target widely used programming languages, namely, Java and Python, our work is related to studies on the generation of any executable code. These include generating regular expressions [24], and the code for parsing input documents [4]. Much research has also been invested in generating formal languages, such as database queries [25, 26], agent specific language [27] or smart phone instructions [28]. Finally, mapping natural language into a sequence of actions for the generation of executable code [29]. Finally, a considerable effort in this task has focused on semantic parsing [2, 3, 4, 5, 6]. Recently proposed models focus on Combinatory Categorical Grammars [24, 5], Bayesian Tree Transducers [3, 4] and Probabilistic Context Free Grammars [16]. The work in natural language programming [30, 31], where users write lines of code from natural language, is also related to our work. Finally, the reverse mapping from code into natural language is explored in [10].\nCharacter-based sequence-to-sequence models have previously been used to generate code from natural language in [32]. Inspired by these works, LPNs provide a richer framework by employing attention models [7], pointer networks [11] and character-based embeddings [9]. Our formulation can also be seen as a generalization of [33], who implement a special case where two predictors have the same granularity (a sub-token softmax and a pointer network). Finally, HMMs have been employed in neural models to marginalize over label sequences in [34, 35] by modeling transitions between labels."}, {"heading": "9 Conclusion", "text": "We introduced a neural network architecture named Latent Prediction Network, which allows efficient marginalization over multiple predictors. Under this architecture, we propose a generative model for code generation that combines a character level softmax to generate language-specific tokens and multiple pointer networks to copy keywords from the input. Along with other extensions, namely structured attention and code compression, our model is applied on on both existing datasets and also on a newly created one with implementations of TCG game cards. Our experiments show that our model out-performs multiple benchmarks, which demonstrate the importance of combining different types of predictors."}], "references": [{"title": "Open source toolkit for statistical machine translation", "author": ["Philipp Koehn", "Hieu Hoang", "Alexandra Birch", "Chris Callison-Burch", "Marcello Federico", "Nicola Bertoldi", "Brooke Cowan", "Wade Shen", "Christine Moran", "Richard Zens", "Chris Dyer", "Ond\u0159ej Bojar", "Alexandra Constantin", "Evan Herbst. Moses"], "venue": "In Proceedings of the 45th Annual Meeting of the ACL on Interactive Poster and Demonstration Sessions,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2007}, {"title": "Learning for semantic parsing with statistical machine translation", "author": ["Yuk Wah Wong", "Raymond J. Mooney"], "venue": "In Proceedings of the Main Conference on Human Language Technology Conference of the North American Chapter of the Association of Computational Linguistics,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2006}, {"title": "Semantic parsing with bayesian tree transducers", "author": ["Bevan Keeley Jones", "Mark Johnson", "Sharon Goldwater"], "venue": "In Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "From natural language specifications to program input parsers", "author": ["Tao Lei", "Fan Long", "Regina Barzilay", "Martin Rinard"], "venue": "In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2013}, {"title": "Broad-coverage ccg semantic parsing with amr", "author": ["Yoav Artzi", "Kenton Lee", "Luke Zettlemoyer"], "venue": "In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "Language to code: Learning semantic parsers for if-this-then-that recipes", "author": ["Chris Quirk", "Raymond Mooney", "Michel Galley"], "venue": "In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "CoRR, abs/1409.0473,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural Comput.,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1997}, {"title": "Finding function in form: Compositional character models for open vocabulary word representation", "author": ["Wang Ling", "Tiago Lu\u0131\u0301s", "Lu\u0131\u0301s Marujo", "R\u00e1mon Fernandez Astudillo", "Silvio Amir", "Chris Dyer", "Alan W Black", "Isabel Trancoso"], "venue": "In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Learning to generate pseudo-code from source code using statistical machine translation", "author": ["Yusuke Oda", "Hiroyuki Fudaba", "Graham Neubig", "Hideaki Hata", "Sakriani Sakti", "Tomoki Toda", "Satoshi Nakamura"], "venue": "In 30th IEEE/ACM International Conference on Automated Software Engineering", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "Semi-markov conditional random fields for information extraction", "author": ["Sunita Sarawagi", "William W. Cohen"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2005}, {"title": "Sequence to sequence learning with neural networks", "author": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V. Le"], "venue": "CoRR, abs/1409.3215,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2014}, {"title": "A generative model for parsing natural language to meaning representations", "author": ["Wei Lu", "Hwee Tou Ng", "Wee Sun Lee", "Luke S. Zettlemoyer"], "venue": "In Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2008}, {"title": "Inducing probabilistic ccg grammars from logical form with higher-order unification", "author": ["Tom Kwiatkowski", "Luke Zettlemoyer", "Sharon Goldwater", "Mark Steedman"], "venue": "In Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2010}, {"title": "Semantic parsing as machine translation", "author": ["Jacob Andreas", "Andreas Vlachos", "Stephen Clark"], "venue": "In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "Hierarchical phrase-based translation", "author": ["David Chiang"], "venue": "Comput. Linguist.,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2007}, {"title": "A systematic comparison of various statistical alignment models", "author": ["Franz Josef Och", "Hermann Ney"], "venue": "Comput. Linguist.,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2003}, {"title": "Minimum Error Rate Semi-Ring", "author": ["Artem Sokolov", "Fran\u00e7ois Yvon"], "venue": "Proceedings of the European Conference on Machine Translation,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2011}, {"title": "Scalable modified Kneser-Ney language model estimation", "author": ["Kenneth Heafield", "Ivan Pouzyrevsky", "Jonathan H. Clark", "Philipp Koehn"], "venue": "In Proceedings of the 51th Annual Meeting on Association for Computational Linguistics,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2013}, {"title": "Bleu: A method for automatic evaluation of machine translation", "author": ["Kishore Papineni", "Salim Roukos", "Todd Ward", "Wei-Jing Zhu"], "venue": "In Proceedings of the 40th Annual Meeting on Association for Computational Linguistics,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2002}, {"title": "ADADELTA: an adaptive learning rate method", "author": ["Matthew D. Zeiler"], "venue": "CoRR, abs/1212.5701,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2012}, {"title": "Exploring the limits of language modeling", "author": ["Rafal J\u00f3zefowicz", "Oriol Vinyals", "Mike Schuster", "Noam Shazeer", "Yonghui Wu"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2016}, {"title": "Using semantic unification to generate regular expressions from natural language", "author": ["Nate Kushman", "Regina Barzilay"], "venue": "In Proceedings of the 2013 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2013}, {"title": "Learning to parse database queries using inductive logic programming", "author": ["John M. Zelle", "Raymond J. Mooney"], "venue": "In AAAI/IAAI,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1996}, {"title": "Semantic parsing on freebase from question-answer pairs", "author": ["Jonathan Berant", "Andrew Chou", "Roy Frostig", "Percy Liang"], "venue": "In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2013}, {"title": "Learning to transform natural to formal languages", "author": ["Rohit J. Kate", "Yuk Wah Wong", "Raymond J. Mooney"], "venue": "In Proceedings of the Twentieth National Conference on Artificial Intelligence", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2005}, {"title": "Smartsynth: Synthesizing smartphone automation scripts from natural language", "author": ["Vu Le", "Sumit Gulwani", "Zhendong Su"], "venue": "In Proceeding of the 11th Annual International Conference on Mobile Systems, Applications, and Services,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2013}, {"title": "Reinforcement learning for mapping instructions to actions", "author": ["S.R.K. Branavan", "Harr Chen", "Luke S. Zettlemoyer", "Regina Barzilay"], "venue": "In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2009}, {"title": "Programming with unrestricted natural language", "author": ["David Vadas", "James R. Curran"], "venue": "In Proceedings of the Australasian Language Technology Workshop", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2005}, {"title": "Integrating programming by example and natural language programming", "author": ["Mehdi Hafezi Manshadi", "Daniel Gildea", "James F. Allen"], "venue": null, "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2013}, {"title": "On end-to-end program generation from user intention by deep neural networks", "author": ["Lili Mou", "Rui Men", "Ge Li", "Lu Zhang", "Zhi Jin"], "venue": "CoRR, abs/1510.07211,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2015}, {"title": "A Convolutional Attention Network for Extreme Summarization of Source Code", "author": ["M. Allamanis", "H. Peng", "C. Sutton"], "venue": "ArXiv e-prints,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2016}, {"title": "Natural language processing (almost) from scratch", "author": ["Ronan Collobert", "Jason Weston", "L\u00e9on Bottou", "Michael Karlen", "Koray Kavukcuoglu", "Pavel Kuksa"], "venue": "J. Mach. Learn. Res.,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2011}, {"title": "Neural Architectures for Named Entity Recognition", "author": ["G. Lample", "M. Ballesteros", "S. Subramanian", "K. Kawakami", "C. Dyer"], "venue": "ArXiv e-prints, March 2016", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2016}], "referenceMentions": [{"referenceID": 0, "context": "The generation of both natural and formal languages often requires models conditioned on diverse predictors [1, 2].", "startOffset": 108, "endOffset": 114}, {"referenceID": 1, "context": "The generation of both natural and formal languages often requires models conditioned on diverse predictors [1, 2].", "startOffset": 108, "endOffset": 114}, {"referenceID": 1, "context": "This dataset presents additional challenges to prior work in code generation [2, 3, 4, 5, 6], including the handling of structured input\u2014i.", "startOffset": 77, "endOffset": 92}, {"referenceID": 2, "context": "This dataset presents additional challenges to prior work in code generation [2, 3, 4, 5, 6], including the handling of structured input\u2014i.", "startOffset": 77, "endOffset": 92}, {"referenceID": 3, "context": "This dataset presents additional challenges to prior work in code generation [2, 3, 4, 5, 6], including the handling of structured input\u2014i.", "startOffset": 77, "endOffset": 92}, {"referenceID": 4, "context": "This dataset presents additional challenges to prior work in code generation [2, 3, 4, 5, 6], including the handling of structured input\u2014i.", "startOffset": 77, "endOffset": 92}, {"referenceID": 5, "context": "This dataset presents additional challenges to prior work in code generation [2, 3, 4, 5, 6], including the handling of structured input\u2014i.", "startOffset": 77, "endOffset": 92}, {"referenceID": 6, "context": "Thus, we propose an extension to attention-based neural models [7] to attend over structured inputs.", "startOffset": 63, "endOffset": 66}, {"referenceID": 6, "context": "Background When |x| = 1, the attention model of [7] applies.", "startOffset": 48, "endOffset": 51}, {"referenceID": 7, "context": "We implement g using a Long Short-Term Memory (LSTM) RNNs [8].", "startOffset": 58, "endOffset": 61}, {"referenceID": 8, "context": "We first encode each token xki using the C2W model described in [9], which is a replacement for lookup tables where word representations are learned at the character level (cf.", "startOffset": 64, "endOffset": 67}, {"referenceID": 9, "context": "As explained earlier, this problem is not specific to our task: for instance, in the dataset of [10], a model must learn to map from timeout = int ( timeout ) to \u201cconvert timeout into an integer.", "startOffset": 96, "endOffset": 100}, {"referenceID": 10, "context": "\u03b1 and \u03b2 can be computed efficiently using the forward-backward algorithm for Semi-Markov models [12], where we associate P (rt | y1.", "startOffset": 96, "endOffset": 100}, {"referenceID": 9, "context": "Additionally, to test the model\u2019s ability of generalize to other domains, we report results in the Django dataset [10], comprising of 16000 training, 1000 development and 1805 test annotations.", "startOffset": 114, "endOffset": 118}, {"referenceID": 11, "context": "Neural Benchmarks We implement two standard neural networks, namely a sequence-tosequence model [13] and an attention-based model [7].", "startOffset": 96, "endOffset": 100}, {"referenceID": 6, "context": "Neural Benchmarks We implement two standard neural networks, namely a sequence-tosequence model [13] and an attention-based model [7].", "startOffset": 130, "endOffset": 133}, {"referenceID": 1, "context": "Machine Translation Baselines Our problem can also be viewed in the framework of semantic parsing [2, 14, 3, 5].", "startOffset": 98, "endOffset": 111}, {"referenceID": 12, "context": "Machine Translation Baselines Our problem can also be viewed in the framework of semantic parsing [2, 14, 3, 5].", "startOffset": 98, "endOffset": 111}, {"referenceID": 2, "context": "Machine Translation Baselines Our problem can also be viewed in the framework of semantic parsing [2, 14, 3, 5].", "startOffset": 98, "endOffset": 111}, {"referenceID": 4, "context": "Machine Translation Baselines Our problem can also be viewed in the framework of semantic parsing [2, 14, 3, 5].", "startOffset": 98, "endOffset": 111}, {"referenceID": 13, "context": "Unfortunately, these approaches define strong assumptions regarding the grammar and structure of the output, which makes it difficult to generalize for other domains [15].", "startOffset": 166, "endOffset": 170}, {"referenceID": 14, "context": "However, the work in [16] provides evidence that using machine translation systems without committing", "startOffset": 21, "endOffset": 25}, {"referenceID": 0, "context": "We follow the same approach and create a phrase-based [1] model and a hierarchical model (or PCFG) [17] as benchmarks for the work presented here.", "startOffset": 54, "endOffset": 57}, {"referenceID": 15, "context": "We follow the same approach and create a phrase-based [1] model and a hierarchical model (or PCFG) [17] as benchmarks for the work presented here.", "startOffset": 99, "endOffset": 103}, {"referenceID": 16, "context": "We used the models implemented in Moses to generate these baselines using standard parameters, using IBM Alignment Model 4 for word alignments [18], MERT for tuning [19] and a 4-gram Kenser-Ney Smoothed language model [20].", "startOffset": 143, "endOffset": 147}, {"referenceID": 17, "context": "We used the models implemented in Moses to generate these baselines using standard parameters, using IBM Alignment Model 4 for word alignments [18], MERT for tuning [19] and a 4-gram Kenser-Ney Smoothed language model [20].", "startOffset": 165, "endOffset": 169}, {"referenceID": 18, "context": "We used the models implemented in Moses to generate these baselines using standard parameters, using IBM Alignment Model 4 for word alignments [18], MERT for tuning [19] and a 4-gram Kenser-Ney Smoothed language model [20].", "startOffset": 218, "endOffset": 222}, {"referenceID": 5, "context": "Retrieval Baseline It was reported in [6] that a simple retrieval method that outputs the most similar input for each sample, measured using Levenshtein Distance, leads to good results.", "startOffset": 38, "endOffset": 41}, {"referenceID": 19, "context": "Thus, we also test using BLEU-4 [21] at the token level.", "startOffset": 32, "endOffset": 36}, {"referenceID": 20, "context": "Training is performed using mini-batches of 20 samples using AdaDelta [22] and we report results using the iteration with the highest BLEU score on the validation set (tested at intervals of 5000 mini-batches).", "startOffset": 70, "endOffset": 74}, {"referenceID": 21, "context": "While the reason for this is uncertain, it is similar to the finding that language models that output characters tend to under-perform those that output words [23].", "startOffset": 159, "endOffset": 163}, {"referenceID": 22, "context": "These include generating regular expressions [24], and the code for parsing input documents [4].", "startOffset": 45, "endOffset": 49}, {"referenceID": 3, "context": "These include generating regular expressions [24], and the code for parsing input documents [4].", "startOffset": 92, "endOffset": 95}, {"referenceID": 23, "context": "Much research has also been invested in generating formal languages, such as database queries [25, 26], agent specific language [27] or smart phone instructions [28].", "startOffset": 94, "endOffset": 102}, {"referenceID": 24, "context": "Much research has also been invested in generating formal languages, such as database queries [25, 26], agent specific language [27] or smart phone instructions [28].", "startOffset": 94, "endOffset": 102}, {"referenceID": 25, "context": "Much research has also been invested in generating formal languages, such as database queries [25, 26], agent specific language [27] or smart phone instructions [28].", "startOffset": 128, "endOffset": 132}, {"referenceID": 26, "context": "Much research has also been invested in generating formal languages, such as database queries [25, 26], agent specific language [27] or smart phone instructions [28].", "startOffset": 161, "endOffset": 165}, {"referenceID": 27, "context": "Finally, mapping natural language into a sequence of actions for the generation of executable code [29].", "startOffset": 99, "endOffset": 103}, {"referenceID": 1, "context": "Finally, a considerable effort in this task has focused on semantic parsing [2, 3, 4, 5, 6].", "startOffset": 76, "endOffset": 91}, {"referenceID": 2, "context": "Finally, a considerable effort in this task has focused on semantic parsing [2, 3, 4, 5, 6].", "startOffset": 76, "endOffset": 91}, {"referenceID": 3, "context": "Finally, a considerable effort in this task has focused on semantic parsing [2, 3, 4, 5, 6].", "startOffset": 76, "endOffset": 91}, {"referenceID": 4, "context": "Finally, a considerable effort in this task has focused on semantic parsing [2, 3, 4, 5, 6].", "startOffset": 76, "endOffset": 91}, {"referenceID": 5, "context": "Finally, a considerable effort in this task has focused on semantic parsing [2, 3, 4, 5, 6].", "startOffset": 76, "endOffset": 91}, {"referenceID": 22, "context": "Recently proposed models focus on Combinatory Categorical Grammars [24, 5], Bayesian Tree Transducers [3, 4] and Probabilistic Context Free Grammars [16].", "startOffset": 67, "endOffset": 74}, {"referenceID": 4, "context": "Recently proposed models focus on Combinatory Categorical Grammars [24, 5], Bayesian Tree Transducers [3, 4] and Probabilistic Context Free Grammars [16].", "startOffset": 67, "endOffset": 74}, {"referenceID": 2, "context": "Recently proposed models focus on Combinatory Categorical Grammars [24, 5], Bayesian Tree Transducers [3, 4] and Probabilistic Context Free Grammars [16].", "startOffset": 102, "endOffset": 108}, {"referenceID": 3, "context": "Recently proposed models focus on Combinatory Categorical Grammars [24, 5], Bayesian Tree Transducers [3, 4] and Probabilistic Context Free Grammars [16].", "startOffset": 102, "endOffset": 108}, {"referenceID": 14, "context": "Recently proposed models focus on Combinatory Categorical Grammars [24, 5], Bayesian Tree Transducers [3, 4] and Probabilistic Context Free Grammars [16].", "startOffset": 149, "endOffset": 153}, {"referenceID": 28, "context": "The work in natural language programming [30, 31], where users write lines of code from natural language, is also related to our work.", "startOffset": 41, "endOffset": 49}, {"referenceID": 29, "context": "The work in natural language programming [30, 31], where users write lines of code from natural language, is also related to our work.", "startOffset": 41, "endOffset": 49}, {"referenceID": 9, "context": "Finally, the reverse mapping from code into natural language is explored in [10].", "startOffset": 76, "endOffset": 80}, {"referenceID": 30, "context": "Character-based sequence-to-sequence models have previously been used to generate code from natural language in [32].", "startOffset": 112, "endOffset": 116}, {"referenceID": 6, "context": "Inspired by these works, LPNs provide a richer framework by employing attention models [7], pointer networks [11] and character-based embeddings [9].", "startOffset": 87, "endOffset": 90}, {"referenceID": 8, "context": "Inspired by these works, LPNs provide a richer framework by employing attention models [7], pointer networks [11] and character-based embeddings [9].", "startOffset": 145, "endOffset": 148}, {"referenceID": 31, "context": "Our formulation can also be seen as a generalization of [33], who implement a special case where two predictors have the same granularity (a sub-token softmax and a pointer network).", "startOffset": 56, "endOffset": 60}, {"referenceID": 32, "context": "Finally, HMMs have been employed in neural models to marginalize over label sequences in [34, 35] by modeling transitions between labels.", "startOffset": 89, "endOffset": 97}, {"referenceID": 33, "context": "Finally, HMMs have been employed in neural models to marginalize over label sequences in [34, 35] by modeling transitions between labels.", "startOffset": 89, "endOffset": 97}], "year": 2016, "abstractText": "Many language generation tasks require the production of text conditioned on both structured and unstructured inputs. We present a novel neural network architecture which generates an output sequence conditioned on an arbitrary number of input functions. Crucially, our approach allows both the choice of conditioning context and the granularity of generation, for example characters or tokens, to be marginalised, thus permitting scalable and effective training. Using this framework, we address the problem of generating programming code from a mixed natural language and structured specification. We create two new data sets for this paradigm derived from the collectible trading card games Magic the Gathering and Hearthstone. On these, and a third preexisting corpus, we demonstrate that marginalising multiple predictors allows our model to outperform strong benchmarks.", "creator": "LaTeX with hyperref package"}}}