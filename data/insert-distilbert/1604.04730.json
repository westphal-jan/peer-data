{"id": "1604.04730", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Apr-2016", "title": "Evolutionary-aided negotiation model for bilateral bargaining in Ambient Intelligence domains with complex utility functions", "abstract": "ambient intelligence aims to offer personalized services and easier ways of interaction between people and systems. thus since several cooperative users and systems may regularly coexist in improving these environments, it is quite possible that entities with opposing preferences need to automatically cooperate to reach to their respective goals. automated negotiation is pointed publicly as highlighting one of the mechanisms that may provide a logical solution to this kind of problems. in this article, a balanced multi - issue bilateral bargaining model for ambient intelligence domains is presented where it is assumed that agents have computational bounded resources and don't know their opponents'preferences. the main goal taken of this work is ultimately to provide negotiation models that obtain efficient sharing agreements while maintaining the negotiated computational cost low. a niching genetic algorithm is used before the negotiation process to uniquely sample one's own utility function ( self - sufficient sampling ). during the negotiation process, genetic operators are applied over the opponent's and one's own offers in order together to sample new offers that are interesting for treating both parties. results show that the single proposed bargaining model is capable of outperforming similarity heuristics which only sample before the overall negotiation process and advantage of obtaining similar results thereby to similarity heuristics which have access to all of the possible offers.", "histories": [["v1", "Sat, 16 Apr 2016 11:53:46 GMT  (1375kb,D)", "http://arxiv.org/abs/1604.04730v1", "Information Sciences, 2013"]], "COMMENTS": "Information Sciences, 2013", "reviews": [], "SUBJECTS": "cs.MA cs.AI cs.GT", "authors": ["victor sanchez-anguix", "soledad valero", "vicente julian", "vicente botti", "ana garcia-fornes"], "accepted": false, "id": "1604.04730"}, "pdf": {"name": "1604.04730.pdf", "metadata": {"source": "CRF", "title": "Evolutionary-aided negotiation model for bilateral bargaining in Ambient Intelligence domains with complex utility functions", "authors": ["V\u0131\u0301ctor S\u00e1nchez-Anguix", "Soledad Valero", "Vicente Juli\u00e1n", "Vicente Botti", "Ana Gar\u0107\u0131a-Fornes"], "emails": [], "sections": [{"heading": null, "text": "Ambient Intelligence aims to offer personalized services and easier ways of interaction between people and systems. Since several users and systems may coexist in these environments, it is quite possible that entities with opposing preferences need to cooperate to reach their respective goals. Automated negotiation is pointed as one of the mechanisms that may provide a solution to this kind of problems. In this article, a multi-issue bilateral bargaining model for Ambient Intelligence domains is presented where it is assumed that agents have computational bounded resources and do not know their opponents\u2019 preferences. The main goal of this work is to provide negotiation models that obtain efficient agreements while maintaining the computational cost low. A niching genetic algorithm is used before the negotiation process to sample one\u2019s own utility function (self-sampling). During the negotiation process, genetic operators are applied over the opponent\u2019s and one\u2019s own offers in order to sample new offers that are interesting for both parties. Results show that the proposed model is capable of outperforming similarity heuristics which only sample before the negotiation process and of obtaining similar results to similarity heuristics which have access to all of the possible offers.\nKeywords: Automated Negotiation, Bilateral Bargaining, Agreement Technologies, Evolutionary Computation, Multi-agent Systems"}, {"heading": "1. Introduction", "text": "Nowadays, the number of computational devices present in our everyday life has grown considerably. The use of technology looks to help us achieve a better quality of life, to make our life easier and more comfortable. However, due to the increasing number of devices, it is necessary that the technology itself adapts to the needs of the user, instead of the human being the one that adapts to technology. In that sense, Ambient Intelligence (AmI) tries to cover that necessity: it looks to offer personalized services and provide users with easier\nPreprint submitted to Elsevier April 19, 2016\nar X\niv :1\n60 4.\n04 73\n0v 1\n[ cs\n.M A\n] 1\n6 A\nand more efficient ways to communicate and interact with other people and systems [4, 35].\nAgent technology has been appointed as a proper technology for the support of AmI solutions [4, 10, 31]. In fact, agents show interesting characteristics for AmI environments since they are reactive, proactive and social [36]. Firstly, reactiveness allows agents to change their behavior according to some new conditions in the AmI environment (new users, new services, etc.). Secondly, proactiveness makes it possible for agents to act autonomously according to the user\u2019s goals, which results in a smooth and non-intrusive interaction with the AmI user. And lastly, the agent\u2019s social behavior allows several heterogeneous entities to cooperate and offer new complex services to the AmI user.\nOver the last few years, researchers in the area of agent technology have shown a growing interest in automated negotiation. Negotiation can be defined as a process in which a joint decision is made by two or more parties. The parties first verbalize contradictory demands and then move towards agreement by a process of concession-making or search for new alternatives [29]. Therefore, automated negotiation consists in such a joint decision being automatically decided by means of autonomous entities (e.g., agents representing different users). The parties participating in a negotiation process have opposing preferences, thus negotiation can be considered as a conflict resolution mechanism.\nSuch conflict circumstances are not alien to AmI applications. For instance, shopping malls may be converted into ubiquitous environments where several vendors offer their products to passing shoppers [16, 2]. In many cases, the shoppers know what they want but do not have time to check every shop that offers such products. A possible way of enhancing the customer experience is to automatically negotiate with all of the vendors. A list with the best agreements may be presented to the user through his mobile device. This way, the user does not have to check every possible shop since his mobile device has negotiated with every shop taking into account the user preferences. Nevertheless, there are also benefits for the vendors since automated negotiation allows a more flexible commerce than classic e-commerce. For instance, they may negotiate issues such as price, payment method, discounts, and dispatch dates, which is what often happens in traditional non-electronic commerce. Flexibility in e-commerce may result in client loyalty since the vendor is able to adapt as much as possible to the client preferences. Therefore, automated negotiation is a proper technology for e-commerce-based AmI applications such as shopping malls.\nThe process of negotiation has been traditionally studied by the field of Game Theory [26, 34], providing solutions that reach optimal results under different criteria (e.g., Pareto efficiency, Nash Product, etc.). However, such solutions require unbounded computational resources that are not available in most real applications. In such cases, the research area of artificial intelligence (AI) has tried to provide a solution by means of heuristics that achieve results that are as close as possible to the optima [18, 14]. Artificial intelligence has traditionally studied multi-issue negotiations where utility functions are represented as a linear combination of the issues involved in the negotiation process [5, 6, 9, 15]. In linear utility functions, issue values are usually monotonic, so these functions\nusually have a single global optimum and consequently, the utility function is easy to optimize. Nevertheless, most real world problems are hardly modeled by linear utility functions since they have a higher degree of complexity than that offered by linear utility functions (e.g. e-commerce [17, 33, 13] ). Some of the issues in the negotiation setting may present interdependence relationships. Thus, the value of the utility function may be drastically changed by the positive/negative synergy of interdependent issues. The result is that the utility function is no longer linear, and there may, therefore, be several local optima. Optimizing non-linear utility functions is hard by itself (e.g. it may require non-linear optimizers such as simulated annealing, genetic algorithms, etc.), as is learning opponent preferences and looking for good agreements. Utility functions that have the trait of being non-linear are usually known in the literature as complex utility functions.\nOver the last few years, there has been an effort to research negotiation strategies that are capable of working with such complex utility functions where issues may have relationships of interdependence. Works in these complex domains have focused on negotiation strategies that require a mediator [17, 13, 22, 23], or non-mediated strategies that are devised for very specific utility functions [33]. However, non-mediated strategies are more interesting from the point of view of AmI environments due to the fact that users enter and leave the system in an extremely dynamic way. Thus, it may be difficult to find a trusted mediator for every possible user. Although non-mediated strategies are more interesting from the point of view of different domains, there has been a lack of work in non-mediated strategies for complex utility functions. The work of Lai et al. [20] presents a non-mediated strategy for general utility functions, which obviously includes complex utility functions. The strategy is based on the calculation of current iso-utility curves and a similarity heuristic that sends offers from the current iso-utility curve that are the most similar to the last offers received from the opponent. However, the entire calculation of the iso-utility curve may require an exhaustive exploration of the utility function, which may not be tractable in the case of a large number of issues. Furthermore, if the exploration of one\u2019s own utility function is not performed in an intelligent way, the result may be that most of the offers sampled are of no use for the negotiation process since they might not interest the opponent. Mechanisms that sample as few offers as possible are needed, especially for environments where devices may have limited computational resources as is the case with AmI environments.\nIn this work, a non-mediated bilateral multi-issue negotiation model for AmI environments is presented. Its main goal is to optimize the computational resources while maintaining a good performance in the negotiation process. The proposed model is inspired by the seminal work of Lai et al. [20]. The three main differences between this present work and the work of Lai et al. are: (i) The present approach assumes that it is not possible to exhaustively search the utility function. Before the negotiation process starts, each agent samples its own utility function by means of a niching genetic algorithm (GA) [12, 21]. The effect of this sampling is that offers obtained are highly fit and significantly different;(ii) A few additional samples are obtained during the negotiation process\nby means of genetic operators that are applied over received offers and one\u2019s own offers. The heuristic behind this sampling is that offers obtained by genetic operators have genetic material from one\u2019s own agent and the opponent\u2019s offers. Thus, these new offers may be interesting for both parties. (iii) Genetic operators act as a learning mechanism that implicitly guides the offer sampling and selection of which offers must be sent to the opponent.\nResults show that the proposed work outperforms similarity heuristics that are able to sample the same number of offers before the negotiation process starts. Additionally, it is also shown how the proposed strategy is capable of achieving similar results to those of similarity heuristics that sample the entire utility function with far fewer samples. This result is accomplished due to the learning mechanism provided by genetic algorithms.\nThis paper is organized as follows: section 2 describes an example of application where automated negotiation and ambient intelligence can be combined in order to offer a useful service for the user; section 3 describes the negotiation model, explaining the chosen protocol and the new negotiation strategy in detail. In Section 4, the experimental setting and the results obtained are discussed. In Section 5 related work is discussed. Finally, the conclusions and future lines of work are explained in Section 6."}, {"heading": "2. An Example of Automated Negotiation and Ambient Intelligence Synergy: Product Fairs", "text": "In this section we introduce an example of application where automated negotiation may be used along with well-known AmI techonologies in order to provide a profitable service for users. The example is focused on product fairs. Fairs are public events where manufacturers/sellers/producers exhibit their products to a wide range of consumers who go from small consumers to big retailers. At this kind of events there are usually a large number of exhibitors and products. Therefore, it is extremely difficult to explore the whole fair or find interesting deals for one\u2019s interests. It is also difficult for sellers to attract interesting clients. Thus, both consumers and sellers would be benefited by a tool which allows them to attract/search prospective deals quickly.\nAt this point automated negotiation in an AmI environment may come in handy. Let us suppose the following scenario at a fair: each vendor has been assigned a booth where he attends to clients. As well as setting up the typical equipment, a hardware device with Bluetooth wireless communication is provided (e.g. a PC). An agent, which can be downloaded and configured by the vendor prior to the fair event day, is installed in this hardware device, and it complies with rules and communication protocols established by fair organizers. These agents should be provided with information regarding its owner\u2019s preferences by means of user modeling methods such as questionnaires, past experiences, and so forth.\nAdditionally, consumers are allowed to download an agent to their mobile devices prior to the fair event. The only requirement for the mobile device is\nBluetooth wireless capabilities. The consumer\u2019s agent follows the communication protocols established by the fair organizers and can be configured similarly to the vendor\u2019s agent. More specifically, the agent may ask what its owner would be interested in buying and general questions about the preferences regarding the possible negotiation attributes.\nWhen consumers and vendors enter the fair, they should start the execution of their respective agents. Each consumer\u2019s agent offers a negotiation service which can be invoked by vendors\u2019 agents. Whenever this service is invoked by a vendor agent, a negotiation process starts between the vendor agent and the consumer agent. The negotiation process continues until a deal has been found or one of the parties has decided to leave. If the deal is considered as interesting by both parties (i.e. utility of the deal higher than a certain threshold or reservation utility) and the deal is among the best ones for the consumer in that specific area (determined by which vendors can be reached by Bluetooth in that space point), the consumer agent and the vendor agent notify their respective owners regarding the possible deal. However, deals discovered by this automatic process are not to be considered as binding but as recommendations. If the deal is considered as interesting enough by the consumer, it may result in the consumer approaching the vendor\u2019s booth. At that point, both parties may decide to renegotiate or polish the deal which has been found by their agents.\nSince Bluetooth technology has coverage limitations, the service can usually only be discovered by vendor agents that are nearby. Therefore, negotiation processes help consumer and vendor agents to find prospective deals as consumers walk around the fair. More specifically, it allows consumers to save physical time by recommending them the vendors that seem more suitable for their needs in the area. That way, they only approach vendors in an area who may have an interesting deal for them. Indirectly, it also helps vendors since it attracts consumers with high probabilities of buying their goods instead of losing time with clients with whom the possibilities of making a deal are very low."}, {"heading": "3. Negotiation Model", "text": "Negotiation models are composed of a negotiation protocol and a negotiation strategy. On the one hand, the negotiation protocol defines the communication rules to be followed by the agents that participate in the negotiation process. More specifically, it states at which moments the different agents are allowed to send messages and which kind of messages the agents are allowed to send. For instance, the Rubinstein alternating protocol specifies [27] that agents are allowed to send one offer in alternating turns. Basically, the negotiation protocol acts as a mechanism for the coordination and regulation of the agents that take part in the negotiation process.\nOn the other hand, the negotiation strategy defines the different decisions that the agent will make at each step of the negotiation process. It includes the opponent\u2019s offers acceptance rule, the selection of which offers are to be sent to the opponent, the concession strategy, the decision of whether the agent\nshould continue in the negotiation process or not, and so forth. Therefore, the negotiation strategy includes all the decision-making mechanisms that are involved in the negotiation process.\nThe negotiation protocol used can be categorized as an alternating protocol for bilateral bargaining [27]. More specifically, the protocol used is the k-alternating protocol proposed by Lai et al. [20]. The proposed negotiation strategy belongs to the family of negotiation strategies that use a similarity heuristic in order to propose new offers to the opponent [6, 20]."}, {"heading": "3.1. Negotiation Protocol", "text": "As mentioned above, the negotiation protocol belongs to the family of alternating protocols for bilateral bargaining. In this kind of protocols, two different agents negotiate without the need of a mediator. As previously stated, nonmediated strategies are more adequate for AmI applications since users enter and leave the AmI system in a very dynamic way. Thus, it may not be feasible to find a trusted mediator for every possible pair of agents. Furthermore, in some AmI domains such as shopping malls, where there are different competing vendors and lots of potential users, it is difficult to determine who will mediate the negotiation process.\nThe protocol used is the k-alternating protocol proposed by Lai et al. [20]. This protocol is composed of several rounds where the agents exchange offers in an alternating way. One of the agents, called the initiator, is responsible for starting the current round. He can accept one of the previous offers received from the opponent in the last round, exit from the negotiation process, or send up to k different offers to the opponent agent. Once the initiator has performed one of the possible actions, the opponent agent is able to accept one of the offers he has just received, exit from the negotiation process or propose up to k different offers to the initiator. Then, the round ends and a new round is initiated by the initiator agent. The negotiation process ends when one of the agents accepts an offer (the negotiation succeeded) or one of the agents decides to abandon the negotiation (the negotiation failed).\nSome of the properties of the k-alternating protocol proposed by Lai et al. are:\n\u2022 The protocol is adequate for situations where both agents are equal in power (e.g. none of them has the monopoly over a resource).\n\u2022 Each agent is capable of sending up to k different offers, making it more probable that one of the proposed offers satisfies the requirements of the opponent agent.\n\u2022 Since k different offers are proposed in each agent\u2019s turn more information about opponent preferences can be inferred, increasing the chances of finding a win-win situation. This may produce faster agreements, which is inherently interesting for every domain but particularly for AmI domains since it may reduce the number of messages exchanged and thus the bandwidth consumption.\nAn example of two agents negotiating with a 3-alternating protocol (k = 3) can be observed in Figure 1. Agent A is the initiator of the negotiation round, whereas Agent B is the responding agent. The first round starts with 3 offers proposed by the initiator. Once the offers reach Agent B, he decides whether he should accept one of them or not. Since the 3 offers are not interesting for Agent B, he decides to counteroffer 3 different offers. When the 3 first offers from Agent B reach Agent A, the second round starts. Due to the fact that none of the offers proposed by Agent B are of interest to the initiator, he decides to send 2 offers. The 2 offers from the initiator reach Agent B, who analyzes the offers in order to determine whether they are interesting. Since he found OfferA4 to be interesting, he decides to accept it and the protocol thus ends with an agreement."}, {"heading": "3.2. Negotiation Strategy", "text": "The proposed negotiation strategy can be classified within the group of strategies that use similarity heuristics to propose new offers to the opponent [6, 20]. The proposal complements some of the benefits introduced in the inspiring work of Lai et al. [20], making it especially interesting for AmI environments. The goal is to optimize the computational resources while maintaining a good performance in the negotiation process. The main traits of the proposed model are twofold. Firstly, it is not necessary to sample the entire utility function. Secondly, the proposed strategy provides an implicit learning mechanism that guides the offer sampling and which of the offers sampled are to be sent to the opponent.\nThe different decision-making mechanisms of the negotiation strategy can be grouped according to the period during which they are applied: pre-negotiation and negotiation. The former group of decision making is applied before the negotiation process starts. Basically, since utility functions are complex and it is not feasible to completely explore them, each agent samples its own utility function by means of a niching GA (self-sampling).\nThe latter group of mechanisms is applied during the negotiation process. It includes the acceptance criteria for opponent offers, the concession strategy, the evolutionary sampling, and the selection of which offers are to be sent.\nThe most remarkable part is introduced with evolutionary sampling : genetic operators are carried out over received offers and one\u2019s own offers in order to sample new offers that may be of interest to both parties. Evolutionary sampling acts as an implicit learning mechanism of the opponent\u2019s preferences. The result of evolutionary sampling may be used afterwards when the offers to be sent to the opponent are selected. A brief outline of the proposed strategy can be observed in Algorithm 1. A more detailed outline of the strategy used before the negotiation process and during the negotiation process can be observed in Algorithms 2 and 3.\nAlgorithm 1 A brief outline of the negotiation strategy\nNegotiation Strategy\nPre-negotiation 1.Self-sampling\nNegotiation Process 2.Receive opponent offer(s) if there are any offers 3.Acceptance criteria: accept an offer and end the negotiation, or reject all of them and continue the negotiation process 4.Concession strategy 5.Evolutionary sampling 6.Select which offers to send 7.Send offer(s) and go to step 2"}, {"heading": "3.2.1. Pre-negotiation: Self-sampling", "text": "When an agent uses complex utility functions to represent its preferences it may be difficult to find own offers with good utility. If the number of issues is not very large the complete sampling of the utility function may be feasible. However, when the number of issues is large, this complete sampling may be an extremely expensive process. For instance, a complete sampling of a negotiation domain formed by 10 integer issues from 0 to 9 requires sampling 1010 offers. The cost associated to this sampling can be exorbitant, especially if agent preferences change with a frequency that is greater than the time invested in the sampling. Furthermore, this sampling is unacceptable for AmI domains. Not only does it take too much computational time and power, but it would also need too much storage for the limited devices usually found in these domains. The sampling process can be reduced by skipping offers that are of very low quality for the agent (i.e., offers with utility equal to zero).\nA possible solution to this problem is to use mechanisms that enable to sample good offers for the negotiation process and skip those of low quality. Due to the highly non-linear nature of complex utility functions, non-linear optimizers are required for this task. The main goal is to sample a set of\ndifferent offers that have good utility and are significantly different, because these offers may point to different regions of the negotiation space where a good deal may be found for the agent.\nIn this work, a genetic algorithm (GA) was used to solve this problem. GA\u2019s are general search and optimization mechanisms based on the Darwinian selection process for species [11, 12]. Genetic operators such as crossover, mutation, and selection are employed in order to find near-optimal solutions for the required problem. Nevertheless, the problem posed by classic GA\u2019s is that the entire population converges to one optimal solution. As already stated, different interesting offers for the negotiation process need to be explored. Niching methods are introduced to confront problems of this kind [21, 25]. These methods look to converge to multiple, highly fit, and significantly different solutions.\nA possible family of niching methods for GA\u2019s is the crowding approach [25]. Crowding methods achieve the desired result by introducing local competition among similar individuals. One advantage of crowding methods is that they do not require parameters beyond the classic GA\u2019s. Euclidean distance is usually used to assess the similarity among individuals. Probabilistic Crowding (PC) and Deterministic Crowding (DC) [25] are two of the most popular crowding methods. They only require a special selection rule with respect to classic GA\u2019s. Both rules are employed to select a winner given n different individuals. On the one hand, DC selects the individual that has the highest fitness value, resulting in an elitist selection strategy. On the other hand, PC allows lower fitness value individuals to be selected as winners with a certain probability. This probability is usually proportional to the fitness of each individual. PC behavior is more exploratory than DC . In both cases, the niching effect is achieved by applying either of the two rules to those individuals that are similar. Each parent is usually paired with one of its children in such a way that the sum of the distances between pair elements is minimal. For each pair, one of the two crowding rules is employed to determine which individuals will form the next generation. DC and PC can be observed in more detail in Equations 1 and 2, respectively.\nDc(s1, s2) =  s1 f(s1) > f(s2)s2 f(s1) < f(s2) s1 \u2228 s2 other\n(1)\nPc(s1, s2) =  s1 f(s1) > f(s2) \u2227 rand \u2264 p1 s2 f(s1) > f(s2) \u2227 rand > p2 s2 f(s1) < f(s2) \u2227 rand \u2264 p2 s1 f(s2) < f(s1) \u2227 rand > p1 s1 \u2228 s2 other\n(2)\nwith pi = f(si)\nf(si) + f(si\u2032)\nwhere rand \u2208 [0, 1], f(.) is the fitness function, s1 and s2 are two solutions, and p1 and p2 are the probability of acceptance of both solutions given the pair (s1, s2).\nThe designed mechanism uses a GA that employs crowding methods to find significantly different good offers. This GA is individually executed by the agent before the negotiation process begins. The chromosomes of this GA represent possible offers in the negotiation process, whereas the fitness function used is one\u2019s own utility function. A portfolio with DC and PC is used. The population has a fixed number of individuals and the whole population is selected to form part of the genetic operator pool. Pairs of parents are selected randomly and multi-point crossover or mutation operators are applied over them. In both cases, the result is two children. Each parent is paired with the child that is more similar to it according to Euclidean distance. PC or DC is applied to each of the pairs according to an established probability pdc and 1 \u2212 pdc respectively. Those individuals that are selected as winners by the crowding replace the current generation. The stop criterion was set to a specific number of generations. At the end of the process, the whole population should have converged to different good offers that are to be used by the negotiation process as an approximation to the real utility function of the agent. This population, called P , is used as an input for the negotiation process. A more detailed outline of the proposed GA can be observed in Algorithm 2."}, {"heading": "3.2.2. Negotiation: Concession strategy", "text": "A concession strategy determines which utility the agent will try to achieve at each negotiation step. The agent usually proposes offers that have a utility equal or above the utility level defined by its concession strategy at a specific negotiation round. In this work, we assume a time-dependent strategy, where the utility required by each agent depends on the remaining negotiation time. This kind of concession strategies are adequate for environments such as AmI, where time is a limitation (e.g., limited power devices, goods that loose their value as time passes, real-time environments, etc.). Some examples of concession strategies are sit-and-wait [1] (no concession until the deadline, e.g. one of the agents has monopoly), linear (same concession rate at each step), boulware [5, 29] (no concession until the last rounds, where it quickly concedes to the reservation value), and conceder [5, 30] (at the start, it quickly concedes to the reservation value).\nOne of the traits of similarity-based strategies is that they are usually independent of the underlying concession strategy. However, this work assumes an environment where agents have similar market power (similar concession rate), and similar computational resources (similar deadlines). Thus, a linear concession strategy is assumed.\nIn each negotiation round, the agents concede according to their strategy until a private deadline is reached. The minimum utility that an agent a demands for a negotiation round t can be formalized as follows:\nUa(t) = 1\u2212 (1\u2212RUa)( t\nTa )\u00b1 \u03b4 (3)\nwhere Ua(t) is the minimum demanded utility level for agent a at negotiation round t, RUa is the reservation utility, \u03b4 is a small value that allows to ac-\nAlgorithm 2 Pre-negotiation: Genetic algorithm with niching mechanism. Its goal is to sample the agent utility function\nP : Explored preferences, good quality offers Dc : Deterministic crowding rule Pc : Probabilistic crowding rule pcr : Probability of crossover operator pdc : Probability of DC n : Current number of generations nmax : Maximum number of generations pairi : Pair of solutions\nInitialize P n = 0\nDo\nn = n+ 1 shuffle P Paux = \u2205 i = 1 While i \u2264 |P | \u2212 1\np1 = Pi p2 = Pi+1 If Random() \u2264 pcr\n(c1, c2) = crossover(p1, p2) Else\nc1 = mutate(p1) c2 = mutate(p2)\nEndIf (pair1, pair2) = argmin pi 6= pj ck 6= cl ||pi \u2212 ck||+ ||pj \u2212 cl||\nIf Random() \u2264 pdc Add(Paux, Dc(pair1)) Add(Paux, Dc(pair2)) Else\nAdd(Paux, Pc(pair1)) Add(Paux, Pc(pair2))\nEndIf\ni = i+ 2 EndWhile\nP = Paux While n \u2264 nmax Return P\ncept/select offers which are relatively close, and Ta is the private deadline of the agent."}, {"heading": "3.2.3. Negotiation: Acceptance criteria", "text": "The acceptance criteria for an agent usually depend on its concession strategy. Normally, an opponent offer is accepted if it provides a utility that is equal or greater than the demanded utility for the next negotiation round. Consequently, given the set of offers Xtb\u2192a received by agent a from agent b at instant t, the acceptance criteria for agent a can be formalized as depicted in the following expression:\nAcceptta(X t b\u2192a) =  accept Va(x t,best b\u2192a ) \u2265 Ua(t+ 1)\nreject otherwise\n(4)\nwhere Acceptta(X t b\u2192a) is the offer acceptance function, Va(x) valuates the utility of an offer, xt,bestb\u2192a is the best offer received from the opponent at negotiation round t, and Ua(t+ 1) is the utility demanded for the next negotiation round."}, {"heading": "3.2.4. Negotiation: Evolutionary sampling", "text": "One of the keys of the proposed strategy is evolutionary sampling. This provides an implicit mechanism for learning opponent preferences and making an intelligent sampling. Basically, it is based in the application of some genetic operators to offers received from the opponent in the last negotiation round and one\u2019s own good offers from P . The idea behind the evolutionary sampling is that offers generated by this method have genetic material from the opponent and one\u2019s own agent. Therefore, these offers may yield a greater probability of being accepted by the opponent that offers that have been sampled in a blind way. The new offers are added to a special population called Pevo which contains offers that have been generated by genetic operators.\nLet us consider Xtb\u2192a = [x t,1 b\u2192a, x t,2 b\u2192a, ..., x t,k b\u2192a], which is the set of offers sent by agent b to agent a at negotiation round t, and U(t) the current desired utility to generate offers at negotiation round t. For each offer xt,ib\u2192a, a total of M offers are selected from the current iso-utility curve ICP (offers with a utility equal to U(t)) defined in the population P . These M offers minimize the expression:\nargmin C \u2208 ICP |C| = M\nM\u2211 j=1 ||xt,ib\u2192a \u2212 cj || (5)\nwhere C is the set ofM different offers, and ||xt,ib\u2192a\u2212cj || is the Euclidean distance between one of the offers in C and the offer received from the opponent. Thus, these M offers are the ones most similar to xt,ib\u2192a from iso-utility curve in P and they will be involved in the evolutionary process. Offers are selected from the current iso-utility curve since offers with much greater utility may generate new offers with a utility that is no longer useful in the negotiation process\nTotal number of issues from the opponent (agent b): 3 Specific issues from the opponent (agent b) proposal: 1, 4, 5 Specific issues from agent's a proposal: 2, 3\n(e.g. a utility greater than the current utility), and offers with lower utility may produce new offers that are not to be used until the last rounds of the negotiation process. Furthermore, the M selected offers are the most similar since applying crossover operators over offers that are too different may disrupt the quality of the solution for both agents (the resulting offer is too far from both agents\u2019 offers).\nOnce the M closest offers have been selected, a total of ncross crossover operations are performed for each pair (xt,ib\u2192a, cj), where cj \u2208 C. The crossover operator takes two parents and generates one child. More specifically, the number of issues that come from xt,ib\u2192a is chosen randomly from 1 and N \u2212 1, with N being the number of issues. The rest of the issues come from cj . Which particular issues come from each parent is also decided randomly. This way, each agent\u2019s preferences are taken into account in a statistically equal manner. Each child is added to a special pool, called Pevo, that contains new offers sampled during the different evolutionary sampling phases. An example of a crossover operation can be observed in Figure 2.\nA total of nmut mutation operations are carried out for each generated child by crossover operations. The mutation operator changes issue values randomly, according to a certain probability of mutating individual issues (pattr). When pattr is low, mutated offers are close to the original offer, so the effect is the exploration of the neighborhood of the offer. The operator is applied nmut times to each child that is produced by crossover operations and to the original offers from the opponent. Mutation also generates new children that are added to the special pool Pevo\nNote that no offer from Pevo is discarded even though their utility may be considered too low for the current negotiation round. The reason for this mechanism is that offers that are not currently acceptable may be interesting in future negotiation rounds due to the concession strategy. Furthermore, since they have genetic material from the opponent\u2019s offers, they are more likely to be accepted.\nAs can be observed in Algorithm 3, if the negotiation process lasts nround rounds, the Evolutionary Sampling will have explored a total number of offers that is equal to:\nSamplesevo = nround \u2217 ((k \u2217M \u2217 ncross) + (k \u2217M \u2217 ncross) \u2217 nmut + k \u2217 nmut) = nround \u2217 k \u2217 (M \u2217 ncross \u2217 (1 + nmut) + nmut)\nThen, the number of offers sampled during the negotiation process depends on the number of rounds that the negotiation lasts, k, M , and the number of genetic operators that are performed per offer selected from the iso-utility curve."}, {"heading": "3.2.5. Negotiation: Select which offers to send", "text": "The next step in specifying the negotiation strategy consists of defining the mechanism to propose new offers. In this case, it is necessary to devise a mechanism that is capable of proposing up to k different offers to the opponent and taking into account the preferences of the opponent. The applied heuristic takes into account the k offers received from the opponent and the offers in P and Pevo.\nIn order to select these offers, k offers from the current iso-utility curve are sent. More specifically, two different iso-utility curves are calculated. The first one is the iso-utility curve calculated using offers in P , called ICP . The second one is the iso-utility curve calculated using offers in Pevo, called ICE . Basically, the first iso-utility curve has offers that were generated during the self-sampling (only taking into account one\u2019s own preferences), whereas the second iso-utility curve only has offers that were generated in the evolutionary sampling (they may take into account both agents\u2019 preferences). The negotiation strategy defines a proportion of ppevo offers to come from ICE . The rest of the offers come from ICP .\nThe offers selected from ICE are those that minimize the distance to any offer received from the opponent in the previous negotiation round. This selection may be formalized as:\nargmin C\u2282ICE |C|=ppevo\u2217k\n C\u2211 j=1 min x\u2208Xtb\u2192a ||cj \u2212 x||  (6) On the other hand, offers are also selected from ICP . The total number of offers corresponds to a proportion that is equal to 1\u2212 ppevo. In this case, offers that are the closest to any offer received from the opponent in the previous negotiation round are selected. This selection can be formalized as:\nargmin D\u2282ICP |D|=(1\u2212ppevo)\u2217k\n D\u2211 j=1 min x\u2208Xtb\u2192a ||dj \u2212 x||  (7) The parameter ppevo determines the degree of relevance of the new offers sampled during the evolutionary sampling with respect to the offers sampled before the negotiation process. When ppevo = 0, the strategy ignores the results that come from Pevo. Consequently, only offers that were sampled in the pre-negotiation phase (self-sampling) are sent to the opponent. In this particular case, the strategy is equivalent to a negotiation strategy that only samples before the negotiation process and does not take into account the opponent\u2019s preferences. In contrast, when ppevo = 1, the offers sampled during the evolutionary sampling are the only ones taken into account. In any case, ppevo is a parameter to be adjusted."}, {"heading": "3.2.6. Case Study", "text": "We prepared a very simple case based on the product fair example. To be more specific, it depicts a purchase in a furniture fair where one buyer is interested in buying chairs and tables from a seller. It should be pointed out that the goal of this case study is not to test the performance of the model, which will be thoroughly studied in Section , but to show show a trace of the negotiation model from the point of view of one of the agents. In this case, we will focus on the buyer.\nWe used the weighted constraint model proposed by Ito et al. [13] to represent the utility functions of the buyer and the seller. The weighted constraint model was introduced as a complex utility function to model agent preferences. Let us consider a negotiation model where the number of issues is N , si represents the i-th issue, each issue has a domain si \u2208 [0, X] that sets its maximum and minimum value, and ~s = (s1, s2, ..., sN ) represents a particular offer. These settings make up an N-dimensional space for the utility function.\nIn the weighted constraint model, a constraint cl represents a specific region of the space. Any point of the space enclosed in that region is said to satisfy the constraint cl. Basically, the term constraint represents an interdependence relationship among the negotiation issues. Each constraint cl has a certain value v(cl, ~s) that is added to the utility of ~s when the constraint is satisfied by the point ~s. For instance, a constraint defined as cl = (1 \u2264 s1 \u2264 10 \u2227 3 \u2264 s2 \u2264 4) and v(cl, ~s) = 10 would hold a utility of 10 for the point (2,3) of the space.\nA utility function in the weighted constraint model is formed by l constraints whose values are summed up whenever the constraints are satisfied. The utility of a point ~s given l constraints can be defined as:\nU(~s) = \u2211 cl\u2208L v(cl, ~s) (8)\nwhere ~s is the point/offer, cl is a constraint, L is the set of constraints, and v(cl, ~s) is the value of the constraint if it is satisfied (0 otherwise).\nAlgorithm 3 Negotiation strategy during the negotiation process\nP: Offers from self-sampling Pnew: Offers from evolutionary sampling k: Number of offers of the protocol M: Number of selected offers ncross: Number of times to crossover nmut: Number of times to mutate ppnew: Proportion of offers from Pnew\nReceive Xtb\u2192 a\nIf Va(x t,best b\u2192 a) \u2265 Ua(t+ 1) then Accept\nUpdate current utility t=t+1\n/*Evolutionary sampling*/\nFor each xt,ib\u2192 a in X t b\u2192 a\nC = argmin C\u2282 ICP |C|=M\n\u2211M j=1 ||x t,i b\u2192 a \u2212 cj ||\nFor each cj in C Repeat ncross times\ns1=Crossover(xt,ib\u2192 a, cj ) If s1 * Pnew then Add(Pnew,s1) Repeat nmut times\ns2=Mutate(s1)\nIf s2 * Pnew then Add(Pnew,s2) EndRepeat\nEndRepeat\nEndFor Repeat nmut times s1=Mutate(xt,ib\u2192 a) If s1 * Pnew then Add(Pnew,s1) EndRepeat\nEndFor\n/*Select which offers to send*/ k1 = ppnew \u2217 k X1 = argmin\nC\u2282 ICE |C|=k1\n\u2211C j=1 min\nx \u2208 Xt b\u2192 a\n||cj \u2212 x||\nk2 = (1\u2212 ppnew) \u2217 k X2 = argmin\nD\u2282 ICP |D|=k2\n\u2211D j=1 min\nx \u2208 Xt b\u2192 a\n||dj \u2212 x||\nXt+1a\u2192 b = X1 \u222a X2\nSend Xt+1a\u2192 b\nAs stated in [13], although the expression seems linear, it produces a nonlinear utility space due to the interdependence among the issues represented by the constraints. Furthermore, the utility function may generate spaces with several local maxima, which makes the problem highly non-linear and very difficult to optimize. Additionally, the agents do not have any knowledge about the possible constraints of the opponent, thus making the problem of negotiation still more difficult.\nThis negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9]. Next, we introduce the utility functions we employed to represent the preferences of both consumer and seller:\nBuyer Utility Function Seller Utility Function (v1 = 100) (0 \u2264 P \u2264 1) (v1 = 80) (8 \u2264 P \u2264 9) (v2 = 50) (2 \u2264 P \u2264 4) (v2 = 60) (6 \u2264 P \u2264 7) (v3 = 25) (5 \u2264 P \u2264 7) (v3 = 45) (4 \u2264 P \u2264 5) (v4 = 30) (0 \u2264 CM \u2264 3) \u2227 (0 \u2264 TM \u2264 3) (v4 = 20) (1 \u2264 P \u2264 3) (v5 = 10) (0 \u2264 CM \u2264 3) \u2227 (6 \u2264 TM \u2264 9) (v5 = 15) (1 \u2264 CM \u2264 2) (v6 = 50) (0 \u2264 CM \u2264 3) \u2227 (5 \u2264 TM \u2264 6) (v6 = 10) (0 \u2264 CM \u2264 1) (v7 = 30) (4 \u2264 CM \u2264 6) \u2227 (0 \u2264 TM \u2264 3) (v7 = 10) (2 \u2264 CM \u2264 5) (v8 = 20) (4 \u2264 CM \u2264 5) \u2227 (4 \u2264 TM \u2264 5) (v8 = 5) (5 \u2264 CM \u2264 9) (v9 = 10) (4 \u2264 CM \u2264 5) \u2227 (8 \u2264 TM \u2264 9) (v9 = 20) (8 \u2264 CM \u2264 9) (v10 = 50) (7 \u2264 CM \u2264 9) \u2227 (2 \u2264 TM \u2264 4) (v10 = 60) (0 \u2264 TM \u2264 1) (v11 = 20) (7 \u2264 CM \u2264 9) \u2227 (6 \u2264 TM \u2264 8) (v11 = 30) (1 \u2264 TM \u2264 4)\n(v12 = 5) (4 \u2264 TM \u2264 6) (v13 = 20) (6 \u2264 TM \u2264 9) (v14 = 10) (8 \u2264 TM \u2264 9)\nThe consumer shows attribute interdependences relating the two types of furniture (e.g. some pairs of models fit better than other pairs). In the case of the seller, no interdependences are found but he may present preferences regarding which models to sell (e.g. some of them need to be manufactured; some models only have a few units, etc.).\nAs for the parameters of the self-sampling phase, they were set to |P | = 16, nmax = 100, pdc = 80% and pcr = 80%. The rest of parameters of the negotiation model were set to \u03b4 = 0.05, k = 2, T = 10, ppevo = 100%, ncross = 2, nmut = 2, and M = 2.\nThe next table shows the 16 offers found by the self-sampling process carried out by the buyer. It depicts the value for each attribute and the utility of the offer. In this case the utility has been scaled to [0,1] for the sake of simplicity.\nP=Self-sampling results for the buyer (u = 1.00) 1 1 6 (u = 0.81) 1 3 0 (u = 1.00) 0 1 6 (u = 0.81) 1 5 3 (u = 0.93) 1 7 3 (u = 0.62) 0 2 4 (u = 0.93) 1 7 4 (u = 0.62) 1 9 1 (u = 0.93) 1 9 2 (u = 0.93) 1 2 5 (u = 0.93) 1 8 3 (u = 0.93) 1 8 4 (u = 0.93) 0 7 3 (u = 0.93) 1 9 3 (u = 0.93) 0 1 5 (u = 0.81) 1 5 0\nRound 1 Us(1) = 1 \u2212 0.95 Ub(1) = 1 \u2212 0.95. Once the self-sampling phase has ended, the negotiation process starts with the buyer acting as initiator. Since\nthere are no opponent offers to value, evolutionary sampling is skipped and the agent directly proposes offers to the opponent. Due to the fact that no evolutionary sampling has been carried out, Pevo is empty and only the isoutility curve which can be calculated comes from P. X=(1 1 6) and Y=(0 1 6) are randomly selected since there is no opponent offer to compare with. The opponent rejects the offers since they yield a utility of 0.35 and 0.25 respectively. The opponent makes a counteroffer which contains W=(8 1 1) and Z=(9 1 1). Both of them are rejected since their utilities (0.18 for both of them) are lower than Us(2) = 0.85.\nRound 2 Us(2) = 0.95\u22120.85 Ub(2) = 0.95\u22120.85. Two offers have been received from the opponent. Thus, the evolutionary sampling phase is carried out. The iso-utility curve from P (Us(2) = 0.95 \u2212 0.85) is shown in the following tables. It shows the offers and the euclidean distance to W and Z. For both W and Z, the M = 2 offers which are more similar are selected. These offers selected from the iso-utility curve become one of the parents for the genetic operations, which are also shown in the following tables. For the sake of simplicity, genetic operations which produced children that were already in Pevo are not included (nor are they stored more than once). All of the offers generated during this phase are added to Pevo.\nIso-utility curve (P) Offer d(W) d(Z) 1 2 5 0.90 1.00 0 1 5 0.99 1.09 1 7 3 1.04 1.13 1 7 4 1.07 1.16 1 8 3 1.12 1.20 0 7 3 1.13 1.22 1 8 4 1.14 1.22 1 9 2 1.18 1.26 1 9 3 1.20 1.27\nGenetic Operations Crossover Mutation\nParent 1 Parent 2 Child Parent 1 Child 8 1 1 1 2 5 (u=0.31) 8 2 5 8 2 5 (u=0.34) 6 2 1 8 1 1 1 2 5 (u=0.81) 1 1 1 1 1 1 (u=0.68) 1 1 7 8 1 1 0 1 5 (u=0.81) 0 1 1 1 1 1 (u=0.18) 8 1 1 9 1 1 1 2 5 (u=0.31) 9 1 5 8 1 1 (u=0.31) 2 1 4 9 1 1 1 2 5 (u=0.31) 9 2 5 8 1 1 (u=0.15) 5 7 1 9 1 1 0 1 5 (u=0.31) 9 1 5 9 1 5 (u=0.46) 6 1 5 9 1 1 0 1 5 (u=0.81) 0 1 1 9 1 5 (u=0.62) 1 8 5\n9 2 5 (u=0.81) 1 2 3 9 2 5 (u=0.15) 7 6 5 9 1 1 (u=0.50) 4 0 1 9 1 1 (u=0.37) 9 2 6\nNext, it is necessary to select which offers to send to the opponent. Since ppevo = 100%, if possible, all of the offers will come from the iso-utility curve calculated using Pevo. If it is not possible, it will take as many offers as possible from the iso-utility curve from Pevo and take the rest from the iso-utility curve from P . In this case, X=(1 2 5) and Y=(0 1 5) are selected from P since Pevo does not contain elements to form a current iso-utility curve. The opponent receives the offers X and Y. Since they yield a utility of 0.25 and 0.15 respectively, both are rejected. The seller sends W=(6 1 1) and Z=(9 4 1) as counteroffers. Both of them are rejected since their utilities (0.34 and 0.18 respectively) are lower than Us(3) = 0.75.\nRound 3 Us(2) = 0.85\u22120.75 Ub(2) = 0.85\u22120.75. Two offers have been received from the opponent. Thus, the evolutionary sampling phase is carried out. The iso-utility curve from P (Us(2) = 0.85\u2212 0.75) and genetic operations are shown in the following tables.\nIso-utility curve (P) Offer d(W) d(Z) 1 3 0 0.60 0.90 1 5 0 0.72 0.90 1 5 3 0.74 0.92\nGenetic Operations Crossover Mutation\nParent 1 Parent 2 Child Parent 1 Child 6 1 1 1 3 0 (u=0.81) 1 3 1 1 3 1 (u=0.00) 8 8 1 6 1 1 1 3 0 (u=0.34) 6 1 0 1 3 1 (u=0.62) 1 6 7 6 1 1 1 5 0 (u=0.81) 1 1 0 6 1 1 (u=0.34) 6 2 1 9 4 1 1 3 0 (u=0.18) 9 4 0 6 1 1 (u=0.21) 6 1 8 9 4 1 1 5 0 (u=0.81) 1 5 1 1 1 0 (u=1.00) 0 1 6\n1 8 5 (u=0.62) 1 8 5 9 4 0 (u=0.18) 9 5 0 9 4 0 (u=0.81) 1 4 1 9 4 1 (u=0.18) 8 4 1 9 4 1 (u=0.18) 9 6 1 1 5 1 (u=0.62) 1 7 0 1 5 1 (u=0.31) 4 7 1\nNext, it is necessary to select which offers to send to the opponent. The table below shows the iso-utility curve calculated from Pevo. In this case, X=(1 1 1) and Y=(1 1 0) are selected from Pevo. The opponent receives the offers X and Y. Since they yield a utility of 0.69 and 0.53 respectively, both are rejected. However, in this round, the seller sends W=(4 1 1) as counteroffer. The offer is rejected because its utility is equal to 0.5, and is thus lower than Ub(4) = 0.65. From this point on we will overlook the inner steps of the model due to the fact that the way it works has already been described.\nIso-utility curve (Pevo) Offer d(W) d(Z) 1 1 0 0.56 0.95 0 1 1 0.66 1.05 1 4 1 0.64 0.88 1 3 1 0.59 0.89 1 5 1 0.71 0.89 1 1 1 0.55 0.94 1 2 3 0.60 0.94\nRound 4 Us(2) = 0.75 \u2212 0.65 Ub(2) = 0.75 \u2212 0.65. In this round, the buyer sends X=(1 1 7), which yields a utility of 0.33 for the seller. Therefore, the offer is rejected. Then, the opponent sends W=(1 1 1) and Z=(1 2 1), Z being accepted by the buyer since its utility is equal to 0.81. The negotiation process ends with the deal (Ub = 0.81,Us = 0.69), which is the Nash Bargaining Point for this negotiation case.\nThis section has described the main traits of the proposed negotiation model for AmI environments. More specifically, it has explained the protocol employed, and the negotiation strategy that is adapted to AmI domains thanks to the intelligent sampling provided by genetic operators during the negotiation process. Additionally, we have also shown how the proposed model works in a small case study. In the next section the proposed model is tested in several scenarios to check its performance."}, {"heading": "4. Experiments", "text": "The performance of the devised strategy is detailed in this section. The proposed negotiation model was tested against the weighted constraint model\nproposed by Ito et al. [13]. This model makes it possible to represent unrestricted interdependence relationships among the negotiation issues. Furthermore, if the number of constraints is large, it can represent highly non-linear utility functions. Therefore, it represents a proper testbed for the proposed strategy. Nevertheless, as in the work of Lai et al. [20], the proposed negotiation model is general and does not depend on a particular utility function. The model of Ito et al. was selected as a testbed because it provides a well studied utility function [13, 22, 23] that holds enough complexity to study the real performance of the negotiation model.\nFirstly, the negotiation setting employed in the experiments is briefly described. After this, the different experiments and their results are presented. Finally, a brief discussion summarizing the results of the experiments is included."}, {"heading": "4.1. Negotiation setting", "text": "The aim of these experiments was to evaluate whether or not the proposed model is capable of working in domains where the agents\u2019 utility functions are highly non-linear. For that purpose, different negotiation cases where randomly created:\n\u2022 Number of issues N = [4-7].\n\u2022 Integer issues. si \u2208 [0, 9].\n\u2022 L = N\u22175 uniformly distributed constraints per agent. There are constraints for every possible interdependence cardinality. For instance if N=4, there are 5 unary constraints, 5 binary constraints, 5 trinary constraints and 5 quaternary constraints.\n\u2022 v(cl, .) for each n-ary constraint drawn randomly from [0, 100 \u2217 n].\n\u2022 For every constraint, the constraint width for each issue si is uniformly drawn from [2, 4]. For instance, if the constraint width for issue s1 is 3, then (0 \u2264 s1 \u2264 3), (1 \u2264 s1 \u2264 4), (2 \u2264 s1 \u2264 5), (3 \u2264 s1 \u2264 6), (4 \u2264 s1 \u2264 7), (5 \u2264 s1 \u2264 8) and (6 \u2264 s1 \u2264 9) are all of the possible configurations for issue s1 in the constraint (just one is used in the constraint).\n\u2022 Agent deadline T = 10. Agents do not know their opponent\u2019s private deadlines.\n\u2022 Agent reservation utility RU = 0. Agents do not know their opponent\u2019s private reservation utilities.It is set to zero in order to find a deal, if possible. Should this be the case, the deal is checked against certain thresholds which will determine whether the application notifies its owner of the possible deal.\n\u2022 Agents do not know their opponent\u2019s utility functions\nFor each number of issues, a total of 100 negotiation cases were generated with the above settings. The execution of each case was repeated 30 times in order to allow for the possible differences between different executions of the methods.\nIn order to evaluate the quality of the agreements found by the participant agents, some measures were gathered at the end of each negotiation.\n\u2022 Euclidean distance to the closest Pareto frontier point [28]. This is a measure of economic efficiency for agreements. The closer to the Pareto frontier, the better.\n\u2022 Euclidean distance to the Nash Product [28]. Since both agents have the same concession strategy and the same deadline it is also feasible to study the distance to the Nash Product. This is the point that maximizes the product u1 \u2217 u2 in the Pareto Frontier, where u1 is the utility of agent 1, and u2 is the utility of agent 2.\n\u2022 Number of negotiation rounds. Faster agreements are preferred since a lesser number of messages are exchanged, less bandwidth is needed, and limited devices need less power to send messages.\nAdditionally, some experiments were also devised in order to test the computational performance of the proposed model in a real environment. Measures such as the time spent in decision making tasks before the negotiation process (self-sampling) and during the negotiation process (opponent offer acceptance phase, evolutionary sampling, and offer proposal) were gathered. For that purpose, the proposed model was implemented using a HTC Desire (1 Ghz, 576MB RAM, Android Operating System) as one of the parties and a PC (2 Ghz, 4096MB RAM, Ubuntu Operating System) as the other party. A total number of 30 negotiations were carried out in order to measure the computational cost of the proposed model."}, {"heading": "4.2. Results", "text": "The proposed strategy, which will be named as Evolutionary Sampling or ES, was compared with two different negotiation models. The first strategy is an implementation of the general framework proposed by Lai et al. [20]. This model is provided with the whole sampling of the utility function, so that it can completely calculate iso-utility curves. It is used as a measure of how close the proposed strategy is to the ideal case where all of the offers are available. The second model assumes that it is not possible to completely sample all of the offers. Therefore, it samples before the negotiation process by means of a niching GA (self-sampling) and uses the similarity heuristic (ppevo = 0) during the negotiation process, which will be named as Non Evolutionary Sampling or NES model. The number of samples explored by the NES model before the negotiation process is set equal to the number of samples explored by the ES model (|P | + Samplesevo). Consequently, both the NES and ES model yield the same computational cost in every experimentation.\nFour different experiments were carried out in order to test the proposed model. In the first experiment, the three different models are compared as the number of issues is increased. The second experiment, studies the impact of the proportion of offers (ppevo) that are sent from the special pool Pevo in the ES model. Next, the three models are compared as the number of proposals k increases. Finally, the ES and the NES model are compared as the size of the population (|P |) provided by the self-sampling increases."}, {"heading": "4.2.1. Experiment 1: Performance study on the number of issues", "text": "The goal of this experiment is to study how the proposed strategy behaves for negotiations with a different number of issues N = {4, 5, 6, 7}. It is important that the proposed model be capable of properly handle negotiations with multiple issues since most real world domains, including AmI domains, need to reach agreements for multiple issues. A negotiation setting where agents are limited to k = 3 proposals per negotiation round is used. The three different models were tested during this experiment.\nThe parameters of the self-sampling were set to nmax = 100, pdc = 80% and pcr = 80%. The number of samples optimized before the negotiation process was set to |P | = 128 for the ES model and to |P | = 128 + Samplesevo for the NES model.\nThe parameters of the ES were set to M = 5, ncross = 4, nmut = 4, pattr = 30%, and ppevo = 100%. Therefore, all the offers are sent from the samples generated by the evolutionary sampling carried out during the negotiation process.\nThe distance to the Nash Product, the distance to the closer Pareto Frontier Point and the number of negotiation rounds were measured for the three models. The results for this experiment can be found in Figure 3. Intuitively speaking, since the number of offers sampled remains constant and the number of issues increases, the performance of the NES and the ES model should be worsened with respect to the results achieved by the model of Lai et al. However, the results for the ES do not comply with this intuitive hypothesis. As can be observed, even though the proposed model and the NES model explore the same number of offers, the NES obtains worse results than the other two models. This is particularly true as the number of issues increases, since the performance of this method drastically decreases. On the contrary, the ES model is capable of achieving statistically equal results to the model of Lai et al., which can access the whole iso-utility curve. Nevertheless, the proposed model explores far fewer offers than the complete sampling of the utility function, especially for larger number of issues. For instance, when N = 6, Lai et al. has access to 106 offers, whereas the proposed model has only sampled an average of 1510 samples (128+ average Samplesevo).\nThe ES model has been able to achieve similar results to the case where the full iso-utility curve can be calculated, while maintaining the offers sampled to a small number. This result is particularly interesting for AmI domains where agents may be executed in devices with low computational and storage capabilities. Therefore, fewer samples mean less power consumption and less capacity\nneeded to store them. Moreover, it must also be highlighted that the number of rounds was also lower than that obtained by NES, which, consequently means fewer messages sent, less bandwidth needed and, of course, less power consumption by the limited devices.\nThe reason for this improvement is the intelligent sampling achieved by the use of genetic operators during the negotiation process. On the contrary, sampling only before the negotiation process leads to worse results since it is not capable detecting which offers will be interesting for the negotiation. Both, the ES and the NES model, have the same computational cost, but the ES is obviously preferred since it is capable of achieving a better performance.\n4.2.2. Experiment 2: Performance study on ppevo In this case, the experiment\u2019s goal is to study how relevant the proportion of offers that are sent from the offers sampled during the negotiation process (gov-\nerned by the parameter ppevo) in the ES model is. Since all of the configurations sample new offers during the negotiation process, all of them yield a very similar computational cost. In fact, it may only be different if one of the configurations obtains a significantly different number of negotiation rounds. Consequently, the main subject of study in this scenario is the economic efficiency (distance to Nash and Pareto Frontier), although some improvements in the computational cost may be observed due to a lower number of rounds.\nThe same conditions from the previous experiment were set (k = 3 and N = {4, 5, 6, 7}), and the same configuration parameters were set for the ES (M = 5, ncross = 4, nmut = 4, and pattr = 30%). However, in this scenario we compare the ES model results when 1 out of 3 offers (ppevo = 30%), 2 out of 3 offers (ppevo = 50%), and 3 out of 3 offers (ppevo = 100%) come from the offers sampled during the evolutionary sampling phase.\nThe results for this second scenario can be observed in Figure 4. The graphic shows that the three different configurations yield similar results for the distance to the Nash Product, the distance to the closest Pareto Frontier Point, and the number of negotiation rounds. This similarity is explained due to the fact that, on most occasions, the offer accepted by the opponent is the closest one from the evolutionary sampling population (Pevo). Therefore, it is always sent, as long as the results from the evolutionary sampling are not ignored. Nevertheless, it seems that higher values of ppevo have a slightly better economic and computational performance than lower ones. The reason for this slight improvement is that, in some cases, the offer preferred by the opponent may be the second or third closest from Pevo. Due to this small improvement, higher values of ppevo are preferred in practice."}, {"heading": "4.2.3. Experiment 3: Performance study on k", "text": "The next experiment aims to study the performance of the three different models (Lai et al., NES, and ES ) as the limit to the number of offers k sent per agent\u2019s round is increased. As mentioned, the number of offers sent may help to reach agreements faster since agents are capable of finding win-win situations. This is very important in AmI environments where devices have limited power and their running time must be optimized. Lai et al. [20], demonstrated how higher values of k helped to reach better agreements. In this scenario, the experiment is repeated in order to evaluate whether the differences between the three models still hold for different values of k.\nThe studied values of k were 1, 3, 5, and 7. The rest of the negotiation setting was configured to use negotiation cases with N = 6 issues. The parameters of the self-sampling were set to the values employed in the previous tests except for |P | = 256. The parameters of the ES were set to the same conditions described in Experiment 1.\nAs it can be observed in Figure 5, the three models achieve better results as k increases. These results agree with those presented in [20]. Although all of the models improve, the differences observed in Experiment 1 still hold for this scenario. The NES model gets worse results than Lai et al. and the proposed model. On the contrary, the ES obtains results that are statistically equivalent\nto the case when the full iso-utility curve can be calculated. As a matter of fact, for higher values of k the proposed model gets slightly better results than Lai et al. Nevertheless, the differences between the two of them are not significant enough to be considered as relevant.\nIt must be noted again that the number of offers sampled for ES and NES is the same and it is much lower than the complete sampling of the utility function. For instance, in this scenario, the complete sampling consists of 106 offers, whereas the other two methods sampled an average of 773 samples for k = 1, 1653 for k = 3, 2497 for k = 5, and 3357 for k = 7."}, {"heading": "4.2.4. Experiment 4: Performance study on |P | and memory performance", "text": "This last experiment was designed to assess the influence of the population optimized by the self-sampling on the performance of the ES model and the NES model. It is specially relevant to see how many samples the NES model\nneeds to achieve similar results to those ones obtained by the model proposed in this article. Obviously, more population means more storage needed and more computational cost since it needs to optimize more samples.\nThe average number of samples explored was analyzed for a negotiation setting where N = 6 and k = 3. The settings used for the self-sampling and the ES in previous experiments were repeated for this scenario. The number of sampled offers was increased by allowing more offers to be optimized in the self-sampling (|P | = 128, 256, 512, 1024, 2048, 4096).\nThe results for this experiment can be observed in Figure 6. The x axis of the graphics show the average number of offers sampled by both models, thus it shows |P | + averagerounds \u2217 Samplesevo. In the case of the NES model all of the samples were produced before the negotiation process started. Several observations can be made from the data shown in the graphics. On the one\nhand, it seems that the size of |P | does not have too much of an effect on the performance of the ES model, since it is more dependent on the exploration carried out during the negotiation process and does not need as much sampling to get results similar to the case where the full iso-utility curve can be accessed. Therefore, the behavior of the model remained almost constant for different configurations of |P |. Again, this behavior is very adequate for AmI environments since the model can properly work with configurations that do not require too many computational resources. On the other hand, the NES model performance increased along with the number of offers sampled. It must be noted, that when the number of samples for both methods was 5506, the two of them obtained very similar, almost equivalent, results. Therefore, the NES needed 5506 samples to achieve similar results to the same results obtained by the ES model for 1510 samples. It can be concluded that NES needs 55061510 = 3.64 times more samples to achieve similar results to ES.\nIt is possible to approximately analyze the total amount of memory employed by both methods when they achieve statistically equivalent results. As has been suggested by the previous experiment (Experiment 4), the NES model needs 5506 samples to achieve statistically equivalent results to those the ES model with 1510 samples. If we assume that the underlying platform is a 32 bit platform, where integers usually need 32 bits to be stored, we can approximately calculate the memory needed by both models as follows:\nMemory(KB) = |Samples| \u2217N \u2217 32 \u2217 1 8 \u2217 1 1024 (9)\nwhere |Samples| is the number of samples, N is the number of attributes of the negotiation process, 32 is the size of an integer, 18 converts from bits to Bytes, and 11024 converts from bytes to KBytes. Taking into account the formula above, the NES model would take 129 KB to store the data needed for the previous type of negotiation process (N = 6, |Samples| = 5506), whereas the ES model would take 35 KB (N = 6, |Samples| = 5506). Depending on the underlying device, this difference may be quite important (e.g. devices with a few MB of storage available). However, this difference may be still more important if we consider that in some scenarios it may be necessary to perform several negotiations at the same time (e.g. the fair scenario). For instance, Table 1 shows the approximate amount of memory necessary to carry out several negotiations at the same time."}, {"heading": "4.2.5. Experiment 5: Time Performance", "text": "As introduced earlier, it was also interesting to test the computational performance of the model in a real environment. Thus, the proposed model was implemented using a HTC (1 Ghz, 576MB RAM, Android Operating System) as one of the parties and a PC (2 Ghz, 4096MB RAM, Ubuntu Operating System) as the other party. The self-sampling parameters were set to nmax = 100, pdc = 80% and pcr = 80%. The number of samples optimized before the negotiation process was set to |P | = 128. As for the parameters employed during the negotiation process, these were set to k = 3, M = 5, ncross = 4, nmut = 4, pattr = 30%, and ppevo = 100%. The number of attributes of the negotiation process was N = 5. The time spent in the whole negotiation process (tt), the time spent in sending/waiting for offers (tm), the time spent in self-sampling (ts), and the time spent in decision-making during the negotiation process (tdm)\nwere measured. Table 2 shows the mean obtained in seconds for the 30 negotiation cases that were studied.\nAs can be observed, the time spent for a negotiation process tt was reasonably good (less than a second) and it enables negotiations to be carried out in environments where real-time responses are needed (e.g. Ambient Intelligence). Moreover, it can also be observed that the time spent in decision-making tasks tdm does not take as much time as other tasks such as sending/waiting for offers tm. This leaves room for more negotiation processes to be carried out in parallel during CPU idle time (e.g. waiting for offers). Again, carrying out multiple negotiation processes simultaneously proves especially interesting again for AmI environments. For instance, in the fair scenario, it makes it possible to negotiate simultaneously with those vendors who are available in the area where the consumer is walking at that moment. The time spent in self-sampling is the least problematic since it is a process to be carried out only once until agent preferences change. In some AmI environments, such as the fair, we may consider preferences to be static during the fair event. Thus, self-sampling would only be needed once. Despite all those facts, it must be remarked that the time spent in self-sampling is reasonably good (less than a second)."}, {"heading": "4.3. Discussion", "text": "Ambient Intelligence domains are characterized as domains where computational resources are of extreme importance. Users interact with its environment through devices with limited capabilities, thus the efficient use of resources is crucial. Furthermore, the environment infrastructures are usually connected by means of a limited bandwidth wireless connection. Thus, network resources must also be optimized.\nThe results obtained by the proposed model, while maintaining fairly good economic performance, cope with the problems found in AmI environments. If we assume that limited devices cannot completely sample the agent\u2019s utility function and store those samples, some mechanisms are needed to sample as few offers as possible. A straightforward method would be sampling some offers before the negotiation process starts, which is precisely what the NES model does. However, this sampling does not take advantage of the information revealed by the opponent in the negotiation process. Most of the offers sampled before the negotiation process may be useless since they are of no interest to the opponent. However, the proposed model takes advantage of this information and employs it to make a more intelligent sample, optimizing the computational resources. Nevertheless, although computational resources are important, economic efficiency should not be ignored in AmI negotiations.\nIn the previous sections, we were able to observe the behavior of the ES model in different scenarios. Its performance was compared with a method that samples the same number of offers before the negotiation process (NES ), and the ideal case where all of the samples of the utility function are available. The results of the experiments can be summarized as:\n\u2022 The proposed model needs very few computational resources and storage to obtain results statistically equivalent to the ideal case where the all of the offers are available. It obtained similar results in economic performance (distance to Nash, distance to Pareto Frontier) and number of negotiation rounds.\n\u2022 When the proposed model and the NES model sample the same number of offers, the first obtains better results. In fact, the NES model needs to sample 3.64 times more offers to obtain similar results.\n\u2022 The proposed model needs less negotiation rounds to achieve better results than the NES model. Therefore, the environment bandwidth is optimized since it needs fewer messages to be sent in order to reach agreements.\nConsequently, the proposed model fits perfectly for the conditions needed by AmI environments, since it needs less computational resources and it obtains economically efficient results."}, {"heading": "5. Related Work", "text": "Ambient Intelligence looks to offer personalized services and provide users with easier and more efficient ways to communicate and interact with other people and systems [4, 35]. Since several users may coexist in AmI environments, it is quite probable that their preferences conflict and thus mechanisms are needed to allow users to cooperate. For instance, imagine a ubiquitous shopping mall [16, 2] where buying agents have to help users to buy the products, and vendor agents have to maximize their users\u2019 profits. Automated negotiation provides mechanisms that solve this particularly interesting problem. Some authors have already claimed that in most real world negotiations such as ecommerce [17, 33, 13], issues present interdependence relationships that make agents\u2019 utility functions complex. Therefore, the problem of complex utility functions in automated negotiation is also interesting for AmI applications.\nOver the last few years, most of the work in automated negotiation has focused on offering solutions for the case of imperfect knowledge and bounded computational resources [18, 14]. The use of heuristics is necessary to provide a solution to problems of this type. The present work can be classified within this same category of solutions.\nFaratin et al. [5] presented a negotiation model for linear utility functions where a negotiation strategy is composed of different tactics that may be applied depending on the negotiation time, the quantity of the resource and the\nbehavior of the opponent. Nevertheless, the model is only applicable in negotiation with linear utility functions, which are easier cases than those presented in this present article.\nMatos et al. [24] determined the successful strategies for different settings using the model proposed by Faratin et al. [5]. They employ an evolutionary approach in which strategies and tactics correspond to the genetic material in a genetic algorithm. In their experiments, populations of buyers and sellers with different strategies negotiate in a round robin way. After each round robin round, strategies are evaluated by means of a fitness function. Then, strategies are selected to be the parents of the next population according to their fitness function. In the end, a population of strategies implicitly adapted to the environment is obtained. They use genetic algorithms as a learning mechanism of negotiation strategies when placed under certain circumstances. There are two differences between Matos et al. work and the present work. Firstly, the negotiation model of Matos et al. is designed for linear utility functions. Secondly, the genetic algorithm proposed in this present work is an implicit learning mechanism of the opponent\u2019s preferences that guides the offer sampling during the negotiation process.\nLater, Faratin et al. [6] presented a negotiation strategy for bilateral bargaining that is focused on achieving win-win situations by means of trade-off. The heuristic applied to perform trade-off is similar to that employed in this present work. Given an agent\u2019s current utility, the offer from the iso-utility curve that is most similar to the last offer received from the opponent is sent. The idea behind this heuristic is that, since the proposed offer is the most similar to the last offer received from the opponent, it is more likely to be satisfactory to both participants. A fuzzy similarity criterion is employed to compare offers. Nevertheless, the use of fuzzy similarity requires some knowledge of opponent preferences. The application of criteria of this kind is complicated in complex utility functions due to the interdependencies among the different issues. In this present work, the Euclidean distance is used, as this does not require any knowledge about the opponent, and which is independent of the interdependencies among issues.\nFatima et al. [7, 9, 8] analyzed the problem of multi-attribute negotiations in an agenda-based framework. Agendas determine in which order the different issues are to be negotiated when negotiations are carried out issue by issue. Once an agreement has been found on a specific issue, it cannot be changed. Thus, the agents face the problem of which issues should be negotiated first and which strategies should be applied. They studied the optimal agendas for different scenarios. Nevertheless, their work focused on linear utility functions, which does not take into account the possible interdependences among the different issues.\nThe work of Krovi et al. [19] opened the path for GA\u2019s in automated negotiation. Krovi et al. proposed a GA for bilateral negotiations that was performed each time a negotiation round ended. The population of chromosomes was randomly initialized with 90 random offers and 10 heuristic offers (the last offer from the opponent and the nine best offers from the previous round). The idea\nbehind using GA\u2019s is that the resulting offers have good characteristics for both agents. However, 60 generations were needed during each round in order to obtain the next offer, which may turn out to be computationally expensive in large issue domains. Choi et al. [3] enhanced Krovi\u2019s model with more learning capabilities. More specifically, it is capable of learning opponent preferences by means of stochastic approximation and of adapting its mutation rate to opponent behavior. However, these strategies and mechanisms are devised for linear utility functions with few negotiation issues. The performance of these methods is uncertain when a large number of issues or complex utility functions are used. This present work also employs genetic operators to obtain new offers, but it is capable of providing solutions for domains with complex utility functions and domains where the number of issues is large.\nThere have been some works that have studied the problem of negotiation models for complex utility functions. Most of them have focused on mediated negotiation models. The seminal work of Klein et al. [17] proposes a mediated negotiation model where agents\u2019 preferences are represented by influence matrices. Influence matrices represent binary interdependence relationships between binary issues. Their proposed approach consists of a mediator that generates bids that are voted by the agents participanting in the protocol. Ito et al. [13] propose a mediated negotiation model for multilateral negotiations where agents have their preferences represented by weighted constraints. The agents sample their utility function and carry out a simulated annealing for each point sampled in order to obtain one\u2019s own bids. If the utility of such point is above a certain threshold, the constraints that the bid satisfies are sent to the mediator (constraint bid). After receiving bids from the agents, the mediator tries to look for contracts common to the bids received, while maximizing social welfare. Marsa-Maestre et al. [22, 23] carry out further research in the area of mediated negotiation models for complex utility functions. More specifically, they take advantage of the constraint based model by proposing different bidding mechanisms that work in the constraint space instead of the bid space. They also allow for a negotiation protocol that may not be one-shot. In fact, the mediator can suggest the relaxation of some constraint bids in order to increase the probability of finding an agreement. Nevertheless, all of these works need a trusted mediator, which may not be available in every domain. Furthermore, their models are highly dependent on the underlying utility function. The present work does not require a mediator and the model is independent of the underlying utility function.\nRobu et al. [33, 32] presented a non-mediated bilateral negotiation strategy for agents in electronic commerce. Agent utility functions are based on special graphical models called utility graphs. One of the agents, the seller, is responsible for finding agreements that are satisfactory for both parties. In order to do that, the seller models the buyer by means of utility graphs and tries to learn the buyer\u2019s preferences. However, utility graphs are only designed for binary issues. Our work differs in that it is capable of working with general complex utility functions and is also capable of working issue domains that are not necessarily binary.\nIn Lai et al. [20], a powerful bilateral bargaining model with general utility functions is presented. The negotiation protocol is based on the Rubinstein alternating protocol [27], but each agent is allowed to send up to k different offers in each round. The offer with highest utility is chosen from the k offers received from the opponent in the last round. The offer from the current isoutility curve that is the most similar to the one chosen by the agent from the offers made by the opponent is selected. This offer from the iso-utility curve becomes a seed from which k-1 offers in the neighborhood are generated. The selected offer from the curve and the k-1 generated offers are sent back to the opponent. Again, the general ideal behind this heuristic is that, since the offers are similar to one of the last offers received from the opponent, they are more likely to be satisfactory for both parties. The model proposed in this article complements the seminal work of Lai et al. since it adapts similarity models for AmI environments. In the model proposed in this article, only a small number of offers are sampled before the negotiation process, since it is assumed that the utility function cannot be exhaustively explored. This is especially important for scenarios with a large number of issues and scenarios where devices have limited storage and computational resources. Secondly, the proposed model incorporates an implicit learning mechanism that allows, thanks to genetic operators, an intelligent sampling of new offers that may be of interest for both parties."}, {"heading": "6. Conclusions and Future Work", "text": "Ambient Intelligence aims to offer new services and methods of interaction with technology adapted to the users. It has been stated that automated negotiation may provide a conflict-resolution mechanism in Ambient Intelligence applications where several users with opposing preferences need to cooperate (e.g. ubiquitous shopping malls, fairs). In these environments, users\u2019 agents may present utility functions that are complex due to the interdependences among the negotiation issues that form the utility function.\nA multi-issue bilateral bargaining model for Ambient Intelligence domains that deals with complex utility functions has been presented in this article. This work complements the inspiring work of Lai et al. [20] and provides a negotiation model that is adequate for Ambient Intelligence applications. The main goal of this work is to achieve efficient agreements while maintaining the use of computational resources low.\nThe proposed model uses a negotiation protocol where agents are allowed to send up to k different offers in each negotiation round. Before the negotiation process starts, each agent samples its own utility function by means of a niching genetic algorithm. This genetic algorithm gets highly interesting and significantly different offers for one\u2019s own utility function (self-sampling). After the negotiation process starts, the agents apply genetic operators over the last offers received from the opponent and those offers that are most similar from the current iso-utility curve (evolutionary sampling). The desired effect is to sample new offers that are interesting for both parties. Therefore, the opponent\npreferences guide the sampling process during the negotiation process. The offers that are sent to the opponent are selected from the current iso-utility curve, being those that are the most similar to the last offers received from the opponent. An additional mechanism is introduced that allowing priority to be given to those offers that come from the evolutionary sampling iso-utility curve.\nSeveral experimental scenarios have been carried out and studied. In these tests, the proposed model has been compared with a similarity heuristic that has access to all of the possible offers and a similarity heuristic that samples the same number of offers before the negotiation process by means of a niching genetic algorithm (NES ). The results show that the proposed model needs very few computational resources and storage to obtain statistically equivalent results to the ideal case where all of the offers are available. For instance, the full iso-utility curve consists of 106 offers and the proposed model just samples 1510 offers in a negotiation setting where the number of issues is 6, and the number of offers sent per negotiation round is 3. Additionally, although the proposed model and the NES model sample the same number of offers, the first one obtains better results. In fact, the NES model needs to sample 3.64 times more offers to obtain similar results. The low computational cost and the efficient results make the proposed model very adequate for Ambient Intelligence domains.\nFuture work includes studying the effect of changing preferences during the negotiation process, (i.e., when the strategy is integrated with an argumentation mechanism), and introducing different agent behaviors (more self-interested, more cooperative, etc) by means of some modifications to genetic and selection operators."}, {"heading": "Acknowledgments", "text": "This work is supported by TIN2008-04446, PROMETEO/2008/051, TIN200913839-C03-01, CSD2007-00022 of the Spanish government, and FPU grant AP200800600 awarded to V.Sa\u0301nchez-Anguix.\n[1] B. An, K.M. Sim, C.Y. Miao, Z.Q. Shen, Decision making of negotiation agents using markov chains, Multiagent Grid Syst. 4 (2008) 5\u201323.\n[2] J. Bajo, J.M. Corchado, Y. de Paz, J.F. de Paz, S. Rodr\u0301\u0131guez, Q. Martin, A. Abraham, Shomas: Intelligent guidance and suggestions in shopping centres, Appl. Soft Comput. 9 (2009) 851\u2013862.\n[3] S.P.M. Choi, J. Liu, S.P. Chan, A genetic agent-based negotiation system, Computer Networks 37 (2001) 195\u2013204.\n[4] J.M. Corchado, J. Bajo, Y. de Paz, D.I. Tapia, Intelligent environment for monitoring alzheimer patients, agent technology for health care, Decis. Support Syst. 44 (2008) 382\u2013396.\n[5] P. Faratin, C. Sierra, N.R. Jennings, Negotiation decision functions for autonomous agents, Int. Journal of Robotics and Autonomous Systems 24 (1998) 159\u2013182.\n[6] P. Faratin, C. Sierra, N.R. Jennings, Using similarity criteria to make negotiation trade-offs, in: 4th International Conference on Multi-Agent Systems (ICMAS-2000), pp. 119\u2013126.\n[7] S. Fatima, M. Wooldridge, N.R. Jennings, Optimal agendas for multi-issue negotiation, in: AAMAS \u201903: Proceedings of the second international joint conference on Autonomous agents and multiagent systems, ACM, 2003, pp. 129\u2013136.\n[8] S. Fatima, M. Wooldridge, N.R. Jennings, Optimal negotiation of multiple issues in incomplete information settings, in: AAMAS \u201904: Proceedings of the Third International Joint Conference on Autonomous Agents and Multiagent Systems, IEEE Computer Society, 2004, pp. 1080\u20131087.\n[9] S.S. Fatima, M. Wooldridge, N.R. Jennings, An agenda-based framework for multi-issue negotiation, Artif. Intell. 152 (2004) 1\u201345.\n[10] J.A. Fraile, J. Bajo, A. Abraham, J.M. Corchado, Hocama: Home care hybrid multiagent architecture, in: Pervasive Computing, Computer Communications and Networks, 2009, pp. 259\u2013285.\n[11] D.E. Goldberg, Genetic Algorithms in Search, Optimization and Machine Learning, Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 1989.\n[12] J. Holland, Adaptation in natural and artificial systems, University of Michigan Press, 1975.\n[13] T. Ito, M. Klein, H. Hattori, A multi-issue negotiation protocol among agents with nonlinear utility functions, Multiagent Grid Syst. 4 (2008) 67\u2013 83.\n[14] N.R. Jennings, P. Faratin, A.R. Lomuscio, S. Parsons, M.J. Wooldridge, C. Sierra, Automated negotiation: Prospects, methods and challenges, Group Decision and Negotiation 10 (Mar 2001) 199\u2013215.\n[15] C. Jonker, V. Robu, Automated multi-attribute negotiation with efficient use of incomplete preference information, in: AAMAS \u201904: Proceedings of the Third International Joint Conference on Autonomous Agents and Multiagent Systems, IEEE Computer Society, Washington, DC, USA, 2004, pp. 1054\u20131061.\n[16] S. Keegan, G. O\u2019Hare, M. O\u2019Grady, Easishop: Ambient intelligence assists everyday shopping, Information Sciences 178 (2008) 588\u2013611.\n[17] M. Klein, P. Faratin, H. Sayama, Y. Bar-Yam, Negotiating complex contracts, in: AAMAS \u201902: Proceedings of the first international joint conference on Autonomous agents and multiagent systems, ACM, New York, NY, USA, 2002, pp. 753\u2013757.\n[18] S. Kraus, Negotiation and cooperation in multi-agent environments, Artif. Intell. 94 (1997) 79\u201397.\n[19] R. Krovi, A.C. Graesser, W.E. Pracht, Agent behaviors in virtual negotiation environments, IEEE Transactions on Systems, Man, and Cybernetics, Part C 29 (1999) 15\u201325.\n[20] G. Lai, K. Sycara, C. Li, A decentralized model for automated multiattribute negotiations with incomplete information and general utility functions, Multiagent Grid Syst. 4 (2008) 45\u201365.\n[21] S.W. Mahfoud, Niching methods for genetic algorithms, Ph.D. thesis, Champaign, IL, USA, 1995.\n[22] I. Marsa-Maestre, M.A. Lopez-Carmona, J.R. Velasco, E. de la Hoz, Effective bidding and deal identification for negotiations in highly nonlinear scenarios, in: AAMAS \u201909: Proceedings of The 8th International Conference on Autonomous Agents and Multiagent Systems, International Foundation for Autonomous Agents and Multiagent Systems, Richland, SC, 2009, pp. 1057\u20131064.\n[23] I. Marsa-Maestre, M.A. Lo\u0301pez-Carmona, J.R. Velasco, T. Ito, M. Klein, K. Fujita, Balancing utility and deal probability for auction-based negotiations in highly nonlinear utility spaces, in: IJCAI, pp. 214\u2013219.\n[24] N. Matos, C. Sierra, N. Jennings, Determining successful negotiation strategies: An evolutionary approach, in: ICMAS \u201998: Proceedings of the 3rd International Conference on Multi Agent Systems, IEEE Computer Society, Washington, DC, USA, 1998, p. 182.\n[25] O.J. Mengshoel, D.E. Goldberg, The crowding approach to niching in genetic algorithms, Evol. Comput. 16 (2008) 315\u2013354.\n[26] J. Nash, The bargaining problem, Econometrica 18 (1950) 155\u2013162.\n[27] M. Osborne, A. Rubinstein, Bargaining and Markets, The Academic Press, 1990.\n[28] M.J. Osborne, A. Rubinstein, A Course in Game Theory, MIT Press, 1999.\n[29] D.G. Pruitt, Negotiation Behavior, Academic Press, 1981.\n[30] H. Raiffa, The Art and Science of Negotiation, Cambridge, USA, 1982.\n[31] P. Remagnino, G. Foresti, Ambient intelligence: A new multidisciplinary paradigm, Systems, Man and Cybernetics, Part A: Systems and Humans, IEEE Transactions on 35 (2005) 1\u20136.\n[32] V. Robu, J.A. La Poutre\u0301, Retrieving the structure of utility graphs used in multi-item negotiation through collaborative filtering of aggregate buyer preferences, in: Proceedings of the 2nd International Workshop on Rational, Robust and Secure Negotiations in Multi-Agent Systems (RSS\u201906). Hakodate, Japan.\n[33] V. Robu, D.J.A. Somefun, J.A. La Poutre\u0301, Modeling complex multi-issue negotiations using utility graphs, in: AAMAS \u201905: Proceedings of the fourth international joint conference on Autonomous agents and multiagent systems, ACM, New York, NY, USA, 2005, pp. 280\u2013287.\n[34] A. Rubinstein, Perfect equilibrium in a bargaining model, Econometrica 50 (1982) 155\u2013162.\n[35] W. Weber, J.M. Rabaey, E. Aarts, Ambient Intelligence, Springer-Verlag New York, Inc., Secaucus, NJ, USA, 2005.\n[36] M.J. Wooldridge, Multi-agent systems : an introduction, Wiley, 2001."}], "references": [{"title": "Decision making of negotiation agents using markov chains", "author": ["B. An", "K.M. Sim", "C.Y. Miao", "Z.Q. Shen"], "venue": "Multiagent Grid Syst. 4 ", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2008}, {"title": "Y", "author": ["J. Bajo", "J.M. Corchado"], "venue": "de Paz, J.F. de Paz, S. Rod\u0155\u0131guez, Q. Martin, A. Abraham, Shomas: Intelligent guidance and suggestions in shopping centres, Appl. Soft Comput. 9 ", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2009}, {"title": "A genetic agent-based negotiation system", "author": ["S.P.M. Choi", "J. Liu", "S.P. Chan"], "venue": "Computer Networks 37 ", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2001}, {"title": "Y", "author": ["J.M. Corchado", "J. Bajo"], "venue": "de Paz, D.I. Tapia, Intelligent environment for monitoring alzheimer patients, agent technology for health care, Decis. Support Syst. 44 ", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2008}, {"title": "Negotiation decision functions for autonomous agents", "author": ["P. Faratin", "C. Sierra", "N.R. Jennings"], "venue": "Int. Journal of Robotics and Autonomous Systems 24 ", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1998}, {"title": "Using similarity criteria to make negotiation trade-offs", "author": ["P. Faratin", "C. Sierra", "N.R. Jennings"], "venue": "in: 4th International Conference on Multi-Agent Systems ", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2000}, {"title": "Optimal agendas for multi-issue negotiation", "author": ["S. Fatima", "M. Wooldridge", "N.R. Jennings"], "venue": "in: AAMAS \u201903: Proceedings of the second international joint conference on Autonomous agents and multiagent systems, ACM", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2003}, {"title": "Optimal negotiation of multiple issues in incomplete information settings", "author": ["S. Fatima", "M. Wooldridge", "N.R. Jennings"], "venue": "in: AAMAS \u201904: Proceedings of the Third International Joint Conference on Autonomous Agents and Multiagent Systems, IEEE Computer Society", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2004}, {"title": "An agenda-based framework for multi-issue negotiation", "author": ["S.S. Fatima", "M. Wooldridge", "N.R. Jennings"], "venue": "Artif. Intell. 152 ", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2004}, {"title": "Hocama: Home care hybrid multiagent architecture", "author": ["J.A. Fraile", "J. Bajo", "A. Abraham", "J.M. Corchado"], "venue": "in: Pervasive Computing, Computer Communications and Networks", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2009}, {"title": "Genetic Algorithms in Search", "author": ["D.E. Goldberg"], "venue": "Optimization and Machine Learning, Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1989}, {"title": "Adaptation in natural and artificial systems", "author": ["J. Holland"], "venue": "University of Michigan Press", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1975}, {"title": "A multi-issue negotiation protocol among agents with nonlinear utility functions", "author": ["T. Ito", "M. Klein", "H. Hattori"], "venue": "Multiagent Grid Syst. 4 ", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2008}, {"title": "Automated negotiation: Prospects", "author": ["N.R. Jennings", "P. Faratin", "A.R. Lomuscio", "S. Parsons", "M.J. Wooldridge", "C. Sierra"], "venue": "methods and challenges, Group Decision and Negotiation 10 ", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2001}, {"title": "Automated multi-attribute negotiation with efficient use of incomplete preference information", "author": ["C. Jonker", "V. Robu"], "venue": "in: AAMAS \u201904: Proceedings of the Third International Joint Conference on Autonomous Agents and Multiagent Systems, IEEE Computer Society, Washington, DC, USA", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2004}, {"title": "G", "author": ["S. Keegan"], "venue": "O\u2019Hare, M. O\u2019Grady, Easishop: Ambient intelligence assists everyday shopping, Information Sciences 178 ", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2008}, {"title": "Negotiating complex contracts", "author": ["M. Klein", "P. Faratin", "H. Sayama", "Y. Bar-Yam"], "venue": "in: AAMAS \u201902: Proceedings of the first international joint conference on Autonomous agents and multiagent systems, ACM, New York, NY, USA", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2002}, {"title": "Negotiation and cooperation in multi-agent environments", "author": ["S. Kraus"], "venue": "Artif. Intell. 94 ", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1997}, {"title": "Agent behaviors in virtual negotiation environments", "author": ["R. Krovi", "A.C. Graesser", "W.E. Pracht"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics, Part C 29 ", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1999}, {"title": "A decentralized model for automated multiattribute negotiations with incomplete information and general utility functions", "author": ["G. Lai", "K. Sycara", "C. Li"], "venue": "Multiagent Grid Syst. 4 ", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2008}, {"title": "Niching methods for genetic algorithms", "author": ["S.W. Mahfoud"], "venue": "Ph.D. thesis, Champaign, IL, USA", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1995}, {"title": "E", "author": ["I. Marsa-Maestre", "M.A. Lopez-Carmona", "J.R. Velasco"], "venue": "de la Hoz, Effective bidding and deal identification for negotiations in highly nonlinear scenarios, in: AAMAS \u201909: Proceedings of The 8th International Conference on Autonomous Agents and Multiagent Systems, International Foundation for Autonomous Agents and Multiagent Systems, Richland, SC", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2009}, {"title": "Determining successful negotiation strategies: An evolutionary approach", "author": ["N. Matos", "C. Sierra", "N. Jennings"], "venue": "in: ICMAS \u201998: Proceedings of the 3rd International Conference on Multi Agent Systems, IEEE Computer Society, Washington, DC, USA", "citeRegEx": "24", "shortCiteRegEx": null, "year": 1998}, {"title": "The crowding approach to niching in genetic algorithms", "author": ["O.J. Mengshoel", "D.E. Goldberg"], "venue": "Evol. Comput. 16 ", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2008}, {"title": "The bargaining problem", "author": ["J. Nash"], "venue": "Econometrica 18 ", "citeRegEx": "26", "shortCiteRegEx": null, "year": 1950}, {"title": "Bargaining and Markets", "author": ["M. Osborne", "A. Rubinstein"], "venue": "The Academic Press", "citeRegEx": "27", "shortCiteRegEx": null, "year": 1990}, {"title": "A Course in Game Theory", "author": ["M.J. Osborne", "A. Rubinstein"], "venue": "MIT Press", "citeRegEx": "28", "shortCiteRegEx": null, "year": 1999}, {"title": "Negotiation Behavior", "author": ["D.G. Pruitt"], "venue": "Academic Press", "citeRegEx": "29", "shortCiteRegEx": null, "year": 1981}, {"title": "The Art and Science of Negotiation", "author": ["H. Raiffa"], "venue": "Cambridge, USA", "citeRegEx": "30", "shortCiteRegEx": null, "year": 1982}, {"title": "Ambient intelligence: A new multidisciplinary paradigm", "author": ["P. Remagnino", "G. Foresti"], "venue": "Systems, Man and Cybernetics, Part A: Systems and Humans, IEEE Transactions on 35 ", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2005}, {"title": "Modeling complex multi-issue negotiations using utility graphs", "author": ["V. Robu", "D.J.A. Somefun", "J.A. La Poutr\u00e9"], "venue": "in: AAMAS \u201905: Proceedings of the fourth international joint conference on Autonomous agents and multiagent systems, ACM, New York, NY, USA", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2005}, {"title": "Perfect equilibrium in a bargaining model", "author": ["A. Rubinstein"], "venue": "Econometrica 50 ", "citeRegEx": "34", "shortCiteRegEx": null, "year": 1982}, {"title": "Ambient Intelligence", "author": ["W. Weber", "J.M. Rabaey", "E. Aarts"], "venue": "Springer-Verlag New York, Inc., Secaucus, NJ, USA", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2005}, {"title": "Multi-agent systems : an introduction", "author": ["M.J. Wooldridge"], "venue": "Wiley", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2001}], "referenceMentions": [{"referenceID": 3, "context": "and more efficient ways to communicate and interact with other people and systems [4, 35].", "startOffset": 82, "endOffset": 89}, {"referenceID": 32, "context": "and more efficient ways to communicate and interact with other people and systems [4, 35].", "startOffset": 82, "endOffset": 89}, {"referenceID": 3, "context": "Agent technology has been appointed as a proper technology for the support of AmI solutions [4, 10, 31].", "startOffset": 92, "endOffset": 103}, {"referenceID": 9, "context": "Agent technology has been appointed as a proper technology for the support of AmI solutions [4, 10, 31].", "startOffset": 92, "endOffset": 103}, {"referenceID": 29, "context": "Agent technology has been appointed as a proper technology for the support of AmI solutions [4, 10, 31].", "startOffset": 92, "endOffset": 103}, {"referenceID": 33, "context": "In fact, agents show interesting characteristics for AmI environments since they are reactive, proactive and social [36].", "startOffset": 116, "endOffset": 120}, {"referenceID": 27, "context": "The parties first verbalize contradictory demands and then move towards agreement by a process of concession-making or search for new alternatives [29].", "startOffset": 147, "endOffset": 151}, {"referenceID": 15, "context": "For instance, shopping malls may be converted into ubiquitous environments where several vendors offer their products to passing shoppers [16, 2].", "startOffset": 138, "endOffset": 145}, {"referenceID": 1, "context": "For instance, shopping malls may be converted into ubiquitous environments where several vendors offer their products to passing shoppers [16, 2].", "startOffset": 138, "endOffset": 145}, {"referenceID": 24, "context": "The process of negotiation has been traditionally studied by the field of Game Theory [26, 34], providing solutions that reach optimal results under different criteria (e.", "startOffset": 86, "endOffset": 94}, {"referenceID": 31, "context": "The process of negotiation has been traditionally studied by the field of Game Theory [26, 34], providing solutions that reach optimal results under different criteria (e.", "startOffset": 86, "endOffset": 94}, {"referenceID": 17, "context": "In such cases, the research area of artificial intelligence (AI) has tried to provide a solution by means of heuristics that achieve results that are as close as possible to the optima [18, 14].", "startOffset": 185, "endOffset": 193}, {"referenceID": 13, "context": "In such cases, the research area of artificial intelligence (AI) has tried to provide a solution by means of heuristics that achieve results that are as close as possible to the optima [18, 14].", "startOffset": 185, "endOffset": 193}, {"referenceID": 4, "context": "Artificial intelligence has traditionally studied multi-issue negotiations where utility functions are represented as a linear combination of the issues involved in the negotiation process [5, 6, 9, 15].", "startOffset": 189, "endOffset": 202}, {"referenceID": 5, "context": "Artificial intelligence has traditionally studied multi-issue negotiations where utility functions are represented as a linear combination of the issues involved in the negotiation process [5, 6, 9, 15].", "startOffset": 189, "endOffset": 202}, {"referenceID": 8, "context": "Artificial intelligence has traditionally studied multi-issue negotiations where utility functions are represented as a linear combination of the issues involved in the negotiation process [5, 6, 9, 15].", "startOffset": 189, "endOffset": 202}, {"referenceID": 14, "context": "Artificial intelligence has traditionally studied multi-issue negotiations where utility functions are represented as a linear combination of the issues involved in the negotiation process [5, 6, 9, 15].", "startOffset": 189, "endOffset": 202}, {"referenceID": 16, "context": "e-commerce [17, 33, 13] ).", "startOffset": 11, "endOffset": 23}, {"referenceID": 30, "context": "e-commerce [17, 33, 13] ).", "startOffset": 11, "endOffset": 23}, {"referenceID": 12, "context": "e-commerce [17, 33, 13] ).", "startOffset": 11, "endOffset": 23}, {"referenceID": 16, "context": "Works in these complex domains have focused on negotiation strategies that require a mediator [17, 13, 22, 23], or non-mediated strategies that are devised for very specific utility functions [33].", "startOffset": 94, "endOffset": 110}, {"referenceID": 12, "context": "Works in these complex domains have focused on negotiation strategies that require a mediator [17, 13, 22, 23], or non-mediated strategies that are devised for very specific utility functions [33].", "startOffset": 94, "endOffset": 110}, {"referenceID": 21, "context": "Works in these complex domains have focused on negotiation strategies that require a mediator [17, 13, 22, 23], or non-mediated strategies that are devised for very specific utility functions [33].", "startOffset": 94, "endOffset": 110}, {"referenceID": 30, "context": "Works in these complex domains have focused on negotiation strategies that require a mediator [17, 13, 22, 23], or non-mediated strategies that are devised for very specific utility functions [33].", "startOffset": 192, "endOffset": 196}, {"referenceID": 19, "context": "[20] presents a non-mediated strategy for general utility functions, which obviously includes complex utility functions.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20].", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "Before the negotiation process starts, each agent samples its own utility function by means of a niching genetic algorithm (GA) [12, 21].", "startOffset": 128, "endOffset": 136}, {"referenceID": 20, "context": "Before the negotiation process starts, each agent samples its own utility function by means of a niching genetic algorithm (GA) [12, 21].", "startOffset": 128, "endOffset": 136}, {"referenceID": 25, "context": "For instance, the Rubinstein alternating protocol specifies [27] that agents are allowed to send one offer in alternating turns.", "startOffset": 60, "endOffset": 64}, {"referenceID": 25, "context": "The negotiation protocol used can be categorized as an alternating protocol for bilateral bargaining [27].", "startOffset": 101, "endOffset": 105}, {"referenceID": 19, "context": "[20].", "startOffset": 0, "endOffset": 4}, {"referenceID": 5, "context": "The proposed negotiation strategy belongs to the family of negotiation strategies that use a similarity heuristic in order to propose new offers to the opponent [6, 20].", "startOffset": 161, "endOffset": 168}, {"referenceID": 19, "context": "The proposed negotiation strategy belongs to the family of negotiation strategies that use a similarity heuristic in order to propose new offers to the opponent [6, 20].", "startOffset": 161, "endOffset": 168}, {"referenceID": 19, "context": "[20].", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20]", "startOffset": 0, "endOffset": 4}, {"referenceID": 5, "context": "The proposed negotiation strategy can be classified within the group of strategies that use similarity heuristics to propose new offers to the opponent [6, 20].", "startOffset": 152, "endOffset": 159}, {"referenceID": 19, "context": "The proposed negotiation strategy can be classified within the group of strategies that use similarity heuristics to propose new offers to the opponent [6, 20].", "startOffset": 152, "endOffset": 159}, {"referenceID": 19, "context": "[20], making it especially interesting for AmI environments.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "GA\u2019s are general search and optimization mechanisms based on the Darwinian selection process for species [11, 12].", "startOffset": 105, "endOffset": 113}, {"referenceID": 11, "context": "GA\u2019s are general search and optimization mechanisms based on the Darwinian selection process for species [11, 12].", "startOffset": 105, "endOffset": 113}, {"referenceID": 20, "context": "Niching methods are introduced to confront problems of this kind [21, 25].", "startOffset": 65, "endOffset": 73}, {"referenceID": 23, "context": "Niching methods are introduced to confront problems of this kind [21, 25].", "startOffset": 65, "endOffset": 73}, {"referenceID": 23, "context": "A possible family of niching methods for GA\u2019s is the crowding approach [25].", "startOffset": 71, "endOffset": 75}, {"referenceID": 23, "context": "Probabilistic Crowding (PC) and Deterministic Crowding (DC) [25] are two of the most popular crowding methods.", "startOffset": 60, "endOffset": 64}, {"referenceID": 0, "context": "with pi = f(si) f(si) + f(si\u2032) where rand \u2208 [0, 1], f(.", "startOffset": 44, "endOffset": 50}, {"referenceID": 0, "context": "Some examples of concession strategies are sit-and-wait [1] (no concession until the deadline, e.", "startOffset": 56, "endOffset": 59}, {"referenceID": 4, "context": "one of the agents has monopoly), linear (same concession rate at each step), boulware [5, 29] (no concession until the last rounds, where it quickly concedes to the reservation value), and conceder [5, 30] (at the start, it quickly concedes to the reservation value).", "startOffset": 86, "endOffset": 93}, {"referenceID": 27, "context": "one of the agents has monopoly), linear (same concession rate at each step), boulware [5, 29] (no concession until the last rounds, where it quickly concedes to the reservation value), and conceder [5, 30] (at the start, it quickly concedes to the reservation value).", "startOffset": 86, "endOffset": 93}, {"referenceID": 4, "context": "one of the agents has monopoly), linear (same concession rate at each step), boulware [5, 29] (no concession until the last rounds, where it quickly concedes to the reservation value), and conceder [5, 30] (at the start, it quickly concedes to the reservation value).", "startOffset": 198, "endOffset": 205}, {"referenceID": 28, "context": "one of the agents has monopoly), linear (same concession rate at each step), boulware [5, 29] (no concession until the last rounds, where it quickly concedes to the reservation value), and conceder [5, 30] (at the start, it quickly concedes to the reservation value).", "startOffset": 198, "endOffset": 205}, {"referenceID": 12, "context": "[13] to represent the utility functions of the buyer and the seller.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "As stated in [13], although the expression seems linear, it produces a nonlinear utility space due to the interdependence among the issues represented by the constraints.", "startOffset": 13, "endOffset": 17}, {"referenceID": 0, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 68, "endOffset": 73}, {"referenceID": 1, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 68, "endOffset": 73}, {"referenceID": 2, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 68, "endOffset": 73}, {"referenceID": 3, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 68, "endOffset": 73}, {"referenceID": 4, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 68, "endOffset": 73}, {"referenceID": 5, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 68, "endOffset": 73}, {"referenceID": 6, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 68, "endOffset": 73}, {"referenceID": 7, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 68, "endOffset": 73}, {"referenceID": 8, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 68, "endOffset": 73}, {"referenceID": 0, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 92, "endOffset": 97}, {"referenceID": 1, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 92, "endOffset": 97}, {"referenceID": 2, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 92, "endOffset": 97}, {"referenceID": 3, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 92, "endOffset": 97}, {"referenceID": 4, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 92, "endOffset": 97}, {"referenceID": 5, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 92, "endOffset": 97}, {"referenceID": 6, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 92, "endOffset": 97}, {"referenceID": 7, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 92, "endOffset": 97}, {"referenceID": 8, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 92, "endOffset": 97}, {"referenceID": 0, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 120, "endOffset": 125}, {"referenceID": 1, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 120, "endOffset": 125}, {"referenceID": 2, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 120, "endOffset": 125}, {"referenceID": 3, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 120, "endOffset": 125}, {"referenceID": 4, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 120, "endOffset": 125}, {"referenceID": 5, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 120, "endOffset": 125}, {"referenceID": 6, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 120, "endOffset": 125}, {"referenceID": 7, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 120, "endOffset": 125}, {"referenceID": 8, "context": "This negotiation case consists of 3 different attributes: price (P) [0-9], chair model (CM) [0-9], and table model (TM) [0-9].", "startOffset": 120, "endOffset": 125}, {"referenceID": 0, "context": "In this case the utility has been scaled to [0,1] for the sake of simplicity.", "startOffset": 44, "endOffset": 49}, {"referenceID": 12, "context": "[13].", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20], the proposed negotiation model is general and does not depend on a particular utility function.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "was selected as a testbed because it provides a well studied utility function [13, 22, 23] that holds enough complexity to study the real performance of the negotiation model.", "startOffset": 78, "endOffset": 90}, {"referenceID": 21, "context": "was selected as a testbed because it provides a well studied utility function [13, 22, 23] that holds enough complexity to study the real performance of the negotiation model.", "startOffset": 78, "endOffset": 90}, {"referenceID": 3, "context": "\u2022 Number of issues N = [4-7].", "startOffset": 23, "endOffset": 28}, {"referenceID": 4, "context": "\u2022 Number of issues N = [4-7].", "startOffset": 23, "endOffset": 28}, {"referenceID": 5, "context": "\u2022 Number of issues N = [4-7].", "startOffset": 23, "endOffset": 28}, {"referenceID": 6, "context": "\u2022 Number of issues N = [4-7].", "startOffset": 23, "endOffset": 28}, {"referenceID": 8, "context": "si \u2208 [0, 9].", "startOffset": 5, "endOffset": 11}, {"referenceID": 1, "context": "\u2022 For every constraint, the constraint width for each issue si is uniformly drawn from [2, 4].", "startOffset": 87, "endOffset": 93}, {"referenceID": 3, "context": "\u2022 For every constraint, the constraint width for each issue si is uniformly drawn from [2, 4].", "startOffset": 87, "endOffset": 93}, {"referenceID": 26, "context": "\u2022 Euclidean distance to the closest Pareto frontier point [28].", "startOffset": 58, "endOffset": 62}, {"referenceID": 26, "context": "\u2022 Euclidean distance to the Nash Product [28].", "startOffset": 41, "endOffset": 45}, {"referenceID": 19, "context": "[20].", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20], demonstrated how higher values of k helped to reach better agreements.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "These results agree with those presented in [20].", "startOffset": 44, "endOffset": 48}, {"referenceID": 3, "context": "Ambient Intelligence looks to offer personalized services and provide users with easier and more efficient ways to communicate and interact with other people and systems [4, 35].", "startOffset": 170, "endOffset": 177}, {"referenceID": 32, "context": "Ambient Intelligence looks to offer personalized services and provide users with easier and more efficient ways to communicate and interact with other people and systems [4, 35].", "startOffset": 170, "endOffset": 177}, {"referenceID": 15, "context": "For instance, imagine a ubiquitous shopping mall [16, 2] where buying agents have to help users to buy the products, and vendor agents have to maximize their users\u2019 profits.", "startOffset": 49, "endOffset": 56}, {"referenceID": 1, "context": "For instance, imagine a ubiquitous shopping mall [16, 2] where buying agents have to help users to buy the products, and vendor agents have to maximize their users\u2019 profits.", "startOffset": 49, "endOffset": 56}, {"referenceID": 16, "context": "Some authors have already claimed that in most real world negotiations such as ecommerce [17, 33, 13], issues present interdependence relationships that make agents\u2019 utility functions complex.", "startOffset": 89, "endOffset": 101}, {"referenceID": 30, "context": "Some authors have already claimed that in most real world negotiations such as ecommerce [17, 33, 13], issues present interdependence relationships that make agents\u2019 utility functions complex.", "startOffset": 89, "endOffset": 101}, {"referenceID": 12, "context": "Some authors have already claimed that in most real world negotiations such as ecommerce [17, 33, 13], issues present interdependence relationships that make agents\u2019 utility functions complex.", "startOffset": 89, "endOffset": 101}, {"referenceID": 17, "context": "Over the last few years, most of the work in automated negotiation has focused on offering solutions for the case of imperfect knowledge and bounded computational resources [18, 14].", "startOffset": 173, "endOffset": 181}, {"referenceID": 13, "context": "Over the last few years, most of the work in automated negotiation has focused on offering solutions for the case of imperfect knowledge and bounded computational resources [18, 14].", "startOffset": 173, "endOffset": 181}, {"referenceID": 4, "context": "[5] presented a negotiation model for linear utility functions where a negotiation strategy is composed of different tactics that may be applied depending on the negotiation time, the quantity of the resource and the", "startOffset": 0, "endOffset": 3}, {"referenceID": 22, "context": "[24] determined the successful strategies for different settings using the model proposed by Faratin et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "[5].", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[6] presented a negotiation strategy for bilateral bargaining that is focused on achieving win-win situations by means of trade-off.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "[7, 9, 8] analyzed the problem of multi-attribute negotiations in an agenda-based framework.", "startOffset": 0, "endOffset": 9}, {"referenceID": 8, "context": "[7, 9, 8] analyzed the problem of multi-attribute negotiations in an agenda-based framework.", "startOffset": 0, "endOffset": 9}, {"referenceID": 7, "context": "[7, 9, 8] analyzed the problem of multi-attribute negotiations in an agenda-based framework.", "startOffset": 0, "endOffset": 9}, {"referenceID": 18, "context": "[19] opened the path for GA\u2019s in automated negotiation.", "startOffset": 0, "endOffset": 4}, {"referenceID": 2, "context": "[3] enhanced Krovi\u2019s model with more learning capabilities.", "startOffset": 0, "endOffset": 3}, {"referenceID": 16, "context": "[17] proposes a mediated negotiation model where agents\u2019 preferences are represented by influence matrices.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[13] propose a mediated negotiation model for multilateral negotiations where agents have their preferences represented by weighted constraints.", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "[22, 23] carry out further research in the area of mediated negotiation models for complex utility functions.", "startOffset": 0, "endOffset": 8}, {"referenceID": 30, "context": "[33, 32] presented a non-mediated bilateral negotiation strategy for agents in electronic commerce.", "startOffset": 0, "endOffset": 8}, {"referenceID": 19, "context": "[20], a powerful bilateral bargaining model with general utility functions is presented.", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "The negotiation protocol is based on the Rubinstein alternating protocol [27], but each agent is allowed to send up to k different offers in each round.", "startOffset": 73, "endOffset": 77}, {"referenceID": 19, "context": "[20] and provides a negotiation model that is adequate for Ambient Intelligence applications.", "startOffset": 0, "endOffset": 4}, {"referenceID": 0, "context": "[1] B.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "[2] J.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "[3] S.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4] J.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] P.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[6] P.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "[7] S.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "[8] S.", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "[9] S.", "startOffset": 0, "endOffset": 3}, {"referenceID": 9, "context": "[10] J.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "[11] D.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "[12] J.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[13] T.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[14] N.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[15] C.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "[16] S.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[17] M.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "[18] S.", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "[19] R.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20] G.", "startOffset": 0, "endOffset": 4}, {"referenceID": 20, "context": "[21] S.", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "[22] I.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "[24] N.", "startOffset": 0, "endOffset": 4}, {"referenceID": 23, "context": "[25] O.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "[26] J.", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "[27] M.", "startOffset": 0, "endOffset": 4}, {"referenceID": 26, "context": "[28] M.", "startOffset": 0, "endOffset": 4}, {"referenceID": 27, "context": "[29] D.", "startOffset": 0, "endOffset": 4}, {"referenceID": 28, "context": "[30] H.", "startOffset": 0, "endOffset": 4}, {"referenceID": 29, "context": "[31] P.", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": "[33] V.", "startOffset": 0, "endOffset": 4}, {"referenceID": 31, "context": "[34] A.", "startOffset": 0, "endOffset": 4}, {"referenceID": 32, "context": "[35] W.", "startOffset": 0, "endOffset": 4}, {"referenceID": 33, "context": "[36] M.", "startOffset": 0, "endOffset": 4}], "year": 2016, "abstractText": "Ambient Intelligence aims to offer personalized services and easier ways of interaction between people and systems. Since several users and systems may coexist in these environments, it is quite possible that entities with opposing preferences need to cooperate to reach their respective goals. Automated negotiation is pointed as one of the mechanisms that may provide a solution to this kind of problems. In this article, a multi-issue bilateral bargaining model for Ambient Intelligence domains is presented where it is assumed that agents have computational bounded resources and do not know their opponents\u2019 preferences. The main goal of this work is to provide negotiation models that obtain efficient agreements while maintaining the computational cost low. A niching genetic algorithm is used before the negotiation process to sample one\u2019s own utility function (self-sampling). During the negotiation process, genetic operators are applied over the opponent\u2019s and one\u2019s own offers in order to sample new offers that are interesting for both parties. Results show that the proposed model is capable of outperforming similarity heuristics which only sample before the negotiation process and of obtaining similar results to similarity heuristics which have access to all of the possible offers.", "creator": "LaTeX with hyperref package"}}}