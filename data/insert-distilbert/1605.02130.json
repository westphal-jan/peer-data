{"id": "1605.02130", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-May-2016", "title": "Robust Dialog State Tracking for Large Ontologies", "abstract": "the dialog state tracking challenge 4 ( dstc 4 ) still differentiates itself from the previous three editions as follows : the number of error slot - value pairs thus present in the ontology is much larger, no spoken language understanding output is given, and utterances are labeled at the subdialog level. this paper typically describes a novel dialog prediction state tracking method designed to work robustly under these conditions, using elaborate string matching, coreference audio resolution tailored for dialogs and a few many other improvements. the method can correctly identify many values that are not explicitly present in the question utterance. on sending the final evaluation, our method came in first among 7 competing teams and 24 entries. the measured f1 - score achieved by our method was 9 and 7 percentage points higher than that of the runner - up for the utterance - level evaluation and for the subdialog - level evaluation, respectively.", "histories": [["v1", "Sat, 7 May 2016 02:00:30 GMT  (594kb,D)", "http://arxiv.org/abs/1605.02130v1", "Paper accepted at IWSDS 2016"]], "COMMENTS": "Paper accepted at IWSDS 2016", "reviews": [], "SUBJECTS": "cs.CL cs.AI cs.LG", "authors": ["franck dernoncourt", "ji young lee", "trung h bui", "hung h bui"], "accepted": false, "id": "1605.02130"}, "pdf": {"name": "1605.02130.pdf", "metadata": {"source": "CRF", "title": "Robust Dialog State Tracking for Large Ontologies", "authors": ["Franck Dernoncourt", "Ji Young Lee", "Trung H. Bui", "Hung H. Bui"], "emails": ["francky@mit.edu", "jjylee@mit.edu", "bui@adobe.com", "hubui@adobe.com"], "sections": [{"heading": null, "text": "previous three editions as follows: the number of slot-value pairs present in the ontology is much larger, no spoken language understanding output is given, and utterances are labeled at the subdialog level. This paper describes a novel dialog state tracking method designed to work robustly under these conditions, using elaborate string matching, coreference resolution tailored for dialogs and a few other improvements. The method can correctly identify many values that are not explicitly present in the utterance. On the final evaluation, our method came in first among 7 competing teams and 24 entries. The F1-score achieved by our method was 9 and 7 percentage points higher than that of the runner-up for the utterance-level evaluation and for the subdialog-level evaluation, respectively."}, {"heading": "1 Introduction", "text": "Spoken dialog systems are computer-based systems that interact with users through natural language to help them achieve a goal. Since they provide a convenient and natural way for the users to interact with computers, they have become increasingly\nFranck Dernoncourt Adobe Research, San Jose, CA, USA, and MIT, USA e-mail: francky@mit.edu\nJi Young Lee Massachusetts Institute of Technology, Cambridge, MA, USA e-mail: jjylee@mit.edu\nTrung H. Bui Adobe Research, San Jose, CA, USA e-mail: bui@adobe.com\nHung H. Bui Adobe Research, San Jose, CA, USA e-mail: hubui@adobe.com\n1\nar X\niv :1\n60 5.\n02 13\n0v 1\n[ cs\n.C L\n] 7\nM ay\npopular recently. Examples of such systems are Apple Siri, Google Now, Microsoft Cortana, and Amazon Echo.\nA dialog state tracker is a key component of a spoken dialog system and its goal is to maintain the dialog states throughout a dialog. For example, in a tourist information system, the dialog state may indicate a tourist attraction that the user is interested in, as well as the types of information related to the attraction, such as entrance fees and location. Although it might be easy for humans, dialog state tracking is difficult for computers because they do not \u201cunderstand\u201d natural human language as humans do. Yet, dialog state tracking is crucial for reliable operations of a spoken dialog system because the latter relies on the estimated dialog state to choose an appropriate response, for example, which tourist attractions to suggest.\nThe Dialog State Tracking Challenge (DSTC) is a series of community challenges that allow researchers to study the state tracking problem on a common corpus of dialogs using the same evaluation methods. DSTC 4, which is the focus of this paper, differentiates itself from previous editions in several ways. First, the ontology contains many more slot-value pair: for example, the ontology for the DSTC 3 corpus contains only 9 slots and 271 values, while DSTC 4\u2019s ontology has 30 slots and 1667 values, most of which are shared across several slots. Second, the output of the Spoken Language Understanding (SLU) component, is not available. Third, the states are labeled at the subdialog level only, which disadvantages machinelearning-based approaches.\nBest approaches in the previous DSTCs include neural networks [1, 2, 3], webstyle ranking and SLU combination [9], maximum entropy models [6] and conditional random fields [7]. However, these prior solutions are limited to domain ontologies with a small number of slots and values. Furthermore, most of the above methods and other rule-based methods [8] require the output of the SLU.\nThis paper proposes a novel dialog state tracking method designed to work robustly under the DSTC 4 conditions. The method is composed of an elaborate string matching system, a coreference resolution mechanism tailored for dialogs, and a few other improvements. The paper is organized as follows. Section 2 describes briefly the DSTC 4 data set. Section 3 presents in detail several trackers we used for the challenge. Section 4 compares the performances on the test set of our trackers with those of the trackers submitted by other teams participated in the challenge. Section 5 summarizes our work and proposes further improvements."}, {"heading": "2 The DSTC 4 data set", "text": "The corpus used in this challenge consists of 35 dialog sessions on touristic information for Singapore, collected from Skype calls between three tour guides and 35 tourists. Each dialog session is a dialog between a guide and a tourist, where the guide helps the tourist plan for a trip to Singapore by providing recommendations based on the tourist\u2019s preferences. These 35 dialogs sum up to 31,034 utterances and 273,580 words. All the recorded dialogs with the total length of 21 hours have\nbeen manually transcribed and annotated with speech act and semantic labels for each utterance as well as dialog states for each subdialog.\nEach dialog is divided into subdialogs, each of which has one topic and contains one or several utterances. Dialog states are annotated for each subdialog. A dialog state is represented as a list of slot-value pairs. The slot is a general category, while the value indicates more specifically what the dialog participants have in mind. For example, one possible slot is \u201cTYPE OF PLACE\u201d and a possible value of this slot is \u201cBeach\u201d. The DSTC 4 corpus is provided with an ontology that specifies the list of slot-value pairs that a subdialog of a given topic may contain.\nFollowing the official split, the train, development and test sets contain 14, 6 and 9 dialogs respectively. The remaining 6 dialogs are used as a test set for another task. The test set labels were released only after the final evaluation.\nThe goal of the main task of DSTC4 is to track dialog states, considering all dialog history up to and including the utterance. Trackers are evaluated based on the predicted state for either each utterance (utterance-level evaluation) or for each subdialog (subdialog-level evaluation). Since the gold labels are available only at the subdialog level, in the utterance-level evaluation the predicted state for each utterance is compared against the gold labels of the subdialog that contains the utterance. Four performance metrics are used: subset accuracy, precision, recall and F1-score. For the subset accuracy, for a given utterance, the list of all slot-value pairs in the dialog state must exactly match the subdialog gold label to be counted as a true positive. [4, 5] contain further information pertaining to the data set."}, {"heading": "3 Method", "text": "This section presents the dialog state trackers we used for the challenge. We describe two rule-based trackers, two machine-learning-based trackers and a hybrid tracker."}, {"heading": "3.1 Fuzzy matching baseline", "text": "A simple rule-based tracker was provided by the organizers of the challenge. It performs string fuzzy matching between each value in the ontology and the utterance. If the matching score is above a certain threshold for a value, then any slot-value pair with that value is considered as present."}, {"heading": "3.2 Machine-learning-based trackers", "text": ""}, {"heading": "3.2.1 Cascade tracker", "text": "The cascade tracker aims to refine the fuzzy matching tracker. For each slot, a classifier is trained to detect whether the slot is present or absent given an utterance. If a slot is predicted as present for a given utterance, then the fuzzy matching score is computed between each value of the detected slot and the utterance. For the classifier, we tried logistic regression (LR), support vector machines (SVM), and random forests (RF): we kept RF as it yields the best results. The features used are unigrams, bigrams, word vectors and named-entities. The word vector features are obtained by first mapping each word of the utterance to a word vector, then summing them all. We use pre-trained word vectors provided on the word2vec website1."}, {"heading": "3.2.2 Joint tracker", "text": "The main weakness of the cascade tracker is that in order to detect the value, it relies on fuzzy matching instead of utilizing more meaningful features. To address this issue, the joint tracker predicts the slot and the value jointly. For each slot, an RF classifier is trained to detect whether a given value is present or absent. The features used are the same as in the cascade tracker. Since the vast majority of values are absent in a given utterance, the negative examples are downsampled in the training phase."}, {"heading": "3.3 Elaborate rule-based tracker", "text": "Since the machine-learning-based approaches using traditional features were performing poorly, an elaborate rule-based tracker was constructed in order to overcome the shortcomings of the machine-learning-based approaches. The main pipeline of the elaborate rule-based tracker is described in Figure 1. The tracker makes use of the knowledge present in the ontology as well as the synonym list that is defined for each slot-value pair. The inputs of the dialog state tracker are the current utterance (i.e. the utterance for which the tracker should predict the slot-value pairs), and the dialog history. The dialog history contains the list of previous utterances, as well as the list of slot-value pairs that the tracker predicted for the previous utterances. Lastly, based on the input and the knowledge, the tracker outputs a list of slot-value pairs for the current utterances.\n1 https://code.google.com/p/word2vec/: GoogleNews-vectors-negative300.bin\nThis tracker tries to model how a human would track the dialog states, and therefore is very intuitive and interpretable. Figure 2 presents the four main steps the tracker follows to predict an output based on the input and the knowledge. The first step detects the presence of each slot-value pair in the utterance, by finding a match between any substring of the utterance and any of the synonyms of each slot-value pair. The second step resolve coreferences of certain type and detects additional slot-value pairs associated with them. Among the slot-value pairs detected from synonym matching and coreference resolution, there often exist a group of slot-value pairs that are closely related, but only one of them is present in the dialog state. In the third step, the tracker selects the most likely slot-value pair among the closely-related slot-value pairs and eliminates all others. In the last step, slot-value pairs are carried over from the previous dialog state, whenever the topic continues and no new slot-value pair is detected for certain slots. The following four subsections present each step in more details."}, {"heading": "3.3.1 Robust synonym matching", "text": "The motivation behind the synonym matching comes from the observation that even when a slot-value pair is included in the dialog state of an utterance, the value itself does not appear in the utterance. Instead, a synonym of the value often appears as a substring of the utterance. For example, for the slot-value pair \u201cPLACE: Amoy by Far East Hospitality 4\u201d, it is likely that a synonym of the value such as \u201cAmoy Hotel\u201d is present in an utterance of a spoken dialog, rather than the value itself, viz. \u201cAmoy by Far East Hospitality 4\u201d. Therefore, each slot-value pair is associated with a list of synonyms that are likely to be present in the utterances whose dialog state contains the slot-value pair. The synonym list was created partly by hand and partly by using a set of rules.\nFor flexibility and better detection, each synonym may contain two optional specifications: first, a synonym could be expressed as an AND clause of multiple words; second, part-of-speech (verb or noun) may be specified for each word that comprise a synonym. If a synonym is an AND clause of multiple words, the corresponding slot-value pair is detected only when each of the words is present in the utterance. This allows a slot-value pair to be detected even when the word order is switched. For example, for the slot-value pair \u201cPLACE: Amoy by Far East Hospitality 4\u201d discussed earlier, if a synonym (\u201cAmoy\u201d AND \u201cHotel\u201d) is added to the corresponding synonym list, then the slot-value pair will be detected in an utterance such as \u201cI recommend the hotel called Amoy.\u201d\nIf a word that comprises a synonym is specified with a part-of-speech, then the corresponding slot-value pair is detected only when the word appears in the utterance and is tagged as having the specified part-of-speech. To take into account for the part-of-speech, the tracker performs part-of-speech tagging on each utterance prior to the synonym matching. The part-of-speech specification allows a slot-value pair to be detected even when a synonym word is exhibited in a different form. For example, if we use a synonym \u201cSnorkel\u201d with verb as the part-of-speech for the slotvalue pair \u201cACTIVITY: Snorkeling\u201d, then the slot-value pair will be detected in the utterances \u201cI like to snorkel\u201d, \u201cHave you snorkeled before?\u201d, and \u201cThere are many people snorkeling in this beach\u201d. Another benefit of using part-of-speech specification is that it helps reduce many false positives by distinguishing between noun and\nverb instances of a word. For example, specifying noun as the part of speech in a synonym \u201cShow\u201d for the slot-value pair \u201cACTIVITY: Show\u201d will prevent the incorrect detection of the slot-value pair in an utterance such as \u201cI would like to show you this picture.\u201d\nMoreover, we adopted two simple strategies to enhance the detection of slotvalue pairs. First, we lemmatized each word in both the synonyms and the utterances before matching, increasing the chance of detecting the plural as well as singular form of a synonym. Second, in order to account for misspellings while preserving the precision of the tracker, we permitted one spelling mistake on long synonyms only. Specifically, we allowed a synonym to be detected if a substring of the utterance had Levenshtein distance of 1 from the synonym, only when a synonym has more than 5 characters and each word in a synonym has more than 3 characters."}, {"heading": "3.3.2 Coreference resolution for dialogs", "text": "Coreferences are numerous in dialogs but are harder to detect than in formal written text, as the existing coreference resolution systems typically perform well on the latter, but not on the former.\nThe tracker contains a coreference resolution system for place-related anaphoras. This system is customized for the slot-filling tasks and works as follows. For each utterance, from its syntactic parsing tree the tracker detects the presence of the following three templates:\n\u2022 Template 1: possessive adjective (my/your/our) + a type of place \u2022 Template 2: demonstrative pronoun (the/this/that/these/those) + a type of place \u2022 Template 3: here/there\nFor example, \u201cour hotel\u201dand \u201cyour museums\u201d belong to Template 1, and \u201cthis garden\u201d and \u201cthese parks\u201d belong to Template 2. If Template 1 or Template 2 is present, then the tracker considers as present the last detected slot-value pair of the same type in the dialog history. The type of each place-related slot-value pair is specified in the provided ontology. If Template 3 is present, then the tracker considers as present the last detected value of any place-related slots (e.g. \u201cPLACE\u201d or \u201cNEIGHBOURHOOD\u201d) in the dialog history."}, {"heading": "3.3.3 Ontology-based slot-value pair pruning", "text": "Among the slot-value pairs detected from synonym matching and coreference resolution, there often exist a group of slot-value pairs that are closely related, e.g. different branches of the same hotel chain. In most situations, however, only one of these slot-value pairs is present in the dialog state. In order to select the most likely slot-value pair among the closely related slot-value pairs, the tracker utilizes the domain knowledge present in the ontology as well as the observations from the training data.\nFor example, for each hotel listed as a possible value, the ontology also contains additional information about the hotel such as its neighborhood and price range. When multiple hotel branches are detected from the synonym matching step, then the tracker checks whether other related information about the branch is found in the context and selects the most likely branch based on the observation. If no relevant information is found, the tracker selects the most likely branch based on prior observations from the training data.\nAnother kind of closely-related slot-value pairs are those with the values that overlap with each other, such as \u201cPark Hotel\u201d and \u201cGrand Park Hotel\u201d. If the utterance is \u201cI will stay at the Grand Park Hotel\u201d, then the synonym matching step will detect both \u201cPark Hotel\u201d and \u201cGrand Park Hotel\u201d values. To avoid this issue, the tracker deletes any slot-value pair whose value is a (strict) substring of the value of another slot-value pair, among the detected slot-value pairs.\nFor slot-value pairs of special slots such as \u201cTO\u201d and \u201cFROM\u201d, syntactic parsing trees are used in order to determine whether each value follows a preposition such as \u201cto\u201d, \u201cinto\u201d, \u201ctowards\u201d, and \u201cfrom\u201d. Based on this and the order in which the values appear in the utterances of a subdialog, the most likely slot-value pair(s) are determined."}, {"heading": "3.3.4 Slot-value pair carrying over", "text": "As a dialog progresses, many slot-value pairs remain present for several subsequent utterances as the subject of the dialog continues. As a result, the tracker implements the following rule: for certain slots, whenever a slot-value is detected as present in the previous utterance, the slot-value pair remains present until another value appears for the same slot or the topic changes. The tracker learns for which slots it is optimal to do so by using the training data and comparing the slot-value pair prediction results with and without the rule for a given slot."}, {"heading": "3.4 Hybrid tracker", "text": "In order to take advantage of the strength of both the rule-based and the machinelearning-based approaches, the hybrid tracker uses the rule-based tracker\u2019s outputs as features for the joint tracker. The output of each of the four main steps of the elaborate rule-based tracker is used as features, as Figure 3 illustrates."}, {"heading": "4 Results", "text": "Table 1 compares the performances on the test set of our trackers as well as the best tracker of each other team that took part in the challenge. For the utterancelevel evaluation, all teams but two including us obtained an F1-score below 0.35, which reflects the difficulty of the task. Team 4 reached 0.4481, while our best entry scored 0.5306. By the same token, for the subdialog-level evaluation, all teams but two including us obtained an F1-score below 0.40. Team 4 reached 0.5031, while our best entry scored 0.5786.\nLooking at the results for various trackers described in Section 3, we observe that the cascade tracker and the joint tracker both perform poorly. The joint tracker has a much lower recall than the cascade tracker, which may be due to the fact that the same classifier is used for all values of a slot. However, the elaborate rule-based tracker yields a much higher performance, far above the fuzzy matching baseline. The hybrid tracker, which uses the output of the rule-based tracker as features, further increases the F1-score, but has a lower subset accuracy. Unlike the joint tracker, the hybrid tracker improves the F1-score, which may result from the higher quality and density of the features used.\nThe results for the utterance-level evaluation are lower than for the subdialoglevel evaluation, which is expected since for the utterance-level evaluation the predicted state for each utterance is compared to the gold state of the subdialog that contains the utterance. It is often hard or impossible in the first utterances of a subdialog to guess what state the subdialog (i.e. the state of the last utterance of the subdialog) will have, since the tracker is allowed to access only the current and previous utterances, but not the upcoming utterances.\nThe poor performances of trackers that solely rely on machine-learning can be partly explained by the lack of dialog state labels at the utterance level. If a tracker is trained using the features extracted for each utterance and the subdialog label as the\nutterance label, then the tracker will learn many incorrect associations between features and labels. In other words, using subdialog labels as utterance labels introduce much noise.\nFor example, if a subdialog comprises the two utterances \u201cGood morning\u201d and \u201cHi! I am on my way to Paris!\u201d, and the subdialog label is \u201cTO: Paris\u201d, the first training sample will be the features extracted from \u201cGood morning\u201d and the label \u201cTO: Paris\u201d. This will tend to create false positives, since it is likely that \u201cGood morning\u201d in other subdialogs will not be labeled with \u201cTO: Paris\u201d.\nHowever, if a tracker is trained only for subdialogs to avoid this issue, then it results in having much fewer samples to train on. This brings us to the issue of data scarcity: even though the train set contains 14 labeled dialogs, the number of training samples is still quite small. This certainly gives a significant advantage to hybrid trackers over machine-learning-based trackers.\nIn addition to the dialog states, the labels also contain semantic tags for each utterance. We tried to take advantage of the finer granularity of the semantic tagging: as an experiment, we used the gold semantic tags as features, but our results on the development set did not show any improvement."}, {"heading": "5 Conclusion and future work", "text": "This paper describes and compares several dialog state trackers on the DSTC 4 corpus. Due to the size of the ontology and the utterances being labeled at the subdialogue-level only, the rule-based approach yields better results than the pure machine learning approaches. However, using the rule-based tracker as features for the machine-learning-based tracker allows to further improve the results. On the final evaluation of the main task, our method came in first among 7 competing teams and 24 entries. Our method achieved an F1-score 9 and 7 percentage points higher\nthan the runner-up for the utterance-level evaluation and for the subdialog-level evaluation, respectively.\nModeled after how humans would track dialog states, our elaborate rule-based tracker is not only intuitive and interpretable, but also has potential to be further improved by combining machine-learning-based approaches. One such example is our hybrid tracker, but there are many other ways that machine learning techniques could be used to improve our system.\nFirst, the synonyms list was mostly manually curated, as using existing synonym lists such as Wordnet was causing the precision to decrease significantly. Some general rules were used to automatically generate the synonyms, but one could further automate the generation of synonym list. Moreover, extending the coreference resolution system to general slot-value pairs can improve the performance of the tracker. Furthermore, instead of blindly carrying over slot-value pairs when no new value is detected for certain slots, it would be interesting to implement algorithms that can detect when the subject of the dialog has changed and only carry over slot-value pairs when the subject has not changed.\nAnother weakness of our system is that it detects all slot-value pairs that are mentioned in the utterances, rather than selectively detecting those that are not only mentioned, but also the main subject of discussion. One example is when a value is mentioned but negated, e.g. \u201cI recommend Keong Saik Hotel, not The Fullerton Hotel\u201d. Then according to our system both slot-value pairs \u201cPLACE: Keong Saik Hotel\u201d and \u201cPLACE: The Fullerton Hotel\u201d will be detected as present, but the gold dialog state will only include the former. Such mistakes result in many false positives. Implementing algorithms to detect the main subject may greatly improve the precision.\nAcknowledgements The authors would like to warmly thank the DSTC 4 team for organizing the challenge and being so prompt to respond to emails. The authors are also grateful to the anonymous reviewers as well as to Walter Chang for their valuable feedback."}], "references": [{"title": "Deep neural network approach for the dialog state tracking challenge", "author": ["M. Henderson", "B. Thomson", "S. Young"], "venue": "In Proceedings of the SIGDIAL 2013 Conference, pages 467\u2013471,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2013}, {"title": "Robust dialog state tracking using delexicalised recurrent neural networks and unsupervised adaptation", "author": ["M. Henderson", "B. Thomson", "S. Young"], "venue": "In Spoken Language Technology Workshop (SLT), 2014 IEEE, pages 360\u2013365. IEEE,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2014}, {"title": "Word-based dialog state tracking with recurrent neural networks", "author": ["M. Henderson", "B. Thomson", "S. Young"], "venue": "In 15th Annual Meeting of the Special Interest Group on Discourse and Dialogue, page 292,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "L", "author": ["S. Kim"], "venue": "F. D\u2019Haro, R. E. Banchs, J. Williams, and M. Henderson. Dialog State Tracking Challenge 4: Handbook,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "L", "author": ["S. Kim"], "venue": "F. D\u2019Haro, R. E. Banchs, J. Williams, and M. Henderson. The Fourth Dialog State Tracking Challenge. In Proceedings of the 7th International Workshop on Spoken Dialogue Systems (IWSDS),", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2016}, {"title": "Recipe for building robust spoken dialog state trackers: Dialog state tracking challenge system description", "author": ["S. Lee", "M. Eskenazi"], "venue": "In Proceedings of the SIGDIAL 2013 Conference, Metz, France, August,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2013}, {"title": "Dialog state tracking using conditional random fields", "author": ["H. Ren", "W. Xu", "Y. Zhang", "Y. Yan"], "venue": "In Proceedings of the SIGDIAL 2013 Conference, Metz, France, August,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2013}, {"title": "A generalized rule based tracker for dialogue state tracking", "author": ["K. Sun", "L. Chen", "S. Zhu", "K. Yu"], "venue": "In Spoken Language Technology Workshop (SLT), 2014 IEEE, pages 330\u2013335. IEEE,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2014}, {"title": "Web-style ranking and slu combination for dialog state tracking", "author": ["J.D. Williams"], "venue": "In 15th Annual Meeting of the Special Interest Group on Discourse and Dialogue, page 282,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "Best approaches in the previous DSTCs include neural networks [1, 2, 3], webstyle ranking and SLU combination [9], maximum entropy models [6] and conditional random fields [7].", "startOffset": 62, "endOffset": 71}, {"referenceID": 1, "context": "Best approaches in the previous DSTCs include neural networks [1, 2, 3], webstyle ranking and SLU combination [9], maximum entropy models [6] and conditional random fields [7].", "startOffset": 62, "endOffset": 71}, {"referenceID": 2, "context": "Best approaches in the previous DSTCs include neural networks [1, 2, 3], webstyle ranking and SLU combination [9], maximum entropy models [6] and conditional random fields [7].", "startOffset": 62, "endOffset": 71}, {"referenceID": 8, "context": "Best approaches in the previous DSTCs include neural networks [1, 2, 3], webstyle ranking and SLU combination [9], maximum entropy models [6] and conditional random fields [7].", "startOffset": 110, "endOffset": 113}, {"referenceID": 5, "context": "Best approaches in the previous DSTCs include neural networks [1, 2, 3], webstyle ranking and SLU combination [9], maximum entropy models [6] and conditional random fields [7].", "startOffset": 138, "endOffset": 141}, {"referenceID": 6, "context": "Best approaches in the previous DSTCs include neural networks [1, 2, 3], webstyle ranking and SLU combination [9], maximum entropy models [6] and conditional random fields [7].", "startOffset": 172, "endOffset": 175}, {"referenceID": 7, "context": "Furthermore, most of the above methods and other rule-based methods [8] require the output of the SLU.", "startOffset": 68, "endOffset": 71}, {"referenceID": 3, "context": "[4, 5] contain further information pertaining to the data set.", "startOffset": 0, "endOffset": 6}, {"referenceID": 4, "context": "[4, 5] contain further information pertaining to the data set.", "startOffset": 0, "endOffset": 6}], "year": 2016, "abstractText": "The Dialog State Tracking Challenge 4 (DSTC 4) differentiates itself from the previous three editions as follows: the number of slot-value pairs present in the ontology is much larger, no spoken language understanding output is given, and utterances are labeled at the subdialog level. This paper describes a novel dialog state tracking method designed to work robustly under these conditions, using elaborate string matching, coreference resolution tailored for dialogs and a few other improvements. The method can correctly identify many values that are not explicitly present in the utterance. On the final evaluation, our method came in first among 7 competing teams and 24 entries. The F1-score achieved by our method was 9 and 7 percentage points higher than that of the runner-up for the utterance-level evaluation and for the subdialog-level evaluation, respectively.", "creator": "LaTeX with hyperref package"}}}