{"id": "1605.04715", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-May-2016", "title": "On the Complexity of Connection Games", "abstract": "in this paper, we we study three connection games among selecting the most widely played : havannah, twixt, and slither. we show that determining the outcome of an arbitrary input position is pspace - complete in all three cases. our reductions are based on using the popular graph problem generalized geography and on generic hex itself. we, also consider the complexity of generalizations of hex parameterized by the length of the solution and establish that while short generalized hex is w [ 1 ] - hard, short hex is fpt. proceeding finally, we prove that playing the initial ultra - nearly weak solution to the empty starting position in hex cannot themselves be fully adapted to any of these three games.", "histories": [["v1", "Mon, 16 May 2016 10:26:38 GMT  (50kb,D)", "http://arxiv.org/abs/1605.04715v1", "Subsumes and extendsthis https URLsignificantly"]], "COMMENTS": "Subsumes and extendsthis https URLsignificantly", "reviews": [], "SUBJECTS": "cs.CC cs.AI", "authors": ["\\'edouard bonnet", "florian jamain", "abdallah saffidine"], "accepted": false, "id": "1605.04715"}, "pdf": {"name": "1605.04715.pdf", "metadata": {"source": "CRF", "title": "On the Complexity of Connection Games", "authors": ["\u00c9douard Bonnet", "Florian Jamain", "Abdallah Saffidine"], "emails": ["edouard.bonnet@lamsade.dauphine.fr", "florian.jamain@lamsade.dauphine.fr", "abdallahs@cse.unsw.edu.au"], "sections": [{"heading": null, "text": "In this paper, we study three connection games among the most widely played: havannah, twixt, and slither. We show that determining the outcome of an arbitrary input position is PSPACE-complete in all three cases. Our reductions are based on the popular graph problem generalized geography and on hex itself. We also consider the complexity of generalizations of hex parameterized by the length of the solution and establish that while short generalized hex is W[1]-hard, short hex is FPT. Finally, we prove that the ultra-weak solution to the empty starting position in hex cannot be fully adapted to any of these three games.\nKeywords: Complexity, Havannah, Twixt, Hex, Slither, PSPACE"}, {"heading": "1. Introduction", "text": "Since its independent inventions in 1942 and 1948 by the poet and mathematician Piet Hein and the economist and mathematician John Nash, the game of hex has acquired a special spot in the heart of abstract game aficionados. Its purity and depth has lead Jack van Rijswijck to conclude his PhD thesis with the following hyperbole [1].\nHex has a Platonic existence, independent of human thought. If ever we find an extraterrestrial civilization at all, they will know hex, without any doubt.\nHex not only exerts a fascination on players, but it is the root of the field of connection games which is being actively explored by game designers and researchers alike [2].\nPreprint submitted to Elsevier May 17, 2016\nar X\niv :1\n60 5.\n04 71\n5v 1\n[ cs\n.C C\nA connection game is a kind of abstract strategy game in which players try to make a specific type of connection with their pieces [2]. In many connection games, the goal is to connect two opposite sides of a board. In these games, players take turns placing and/or moving pieces until they connect the two sides of the board. Hex, y, and twixt are typical examples of this type of game. However, a connection game can also involve completing a loop (havannah), connecting all the pieces of a color (lines of action), or forbidden patterns (slither).\nThe focus of research on abstract strategy games, and on connection games in particular, includes the design and programming of strong artificial players and solvers [3, 4], as well as theoretical considerations on aspects specific to connection games such a virtual connections and inferior cells [1, 5, 6, 7].\nDeveloping an artificial player for a strategy game typically involves adapting standard techniques from the game search literature, in particular the classical Alpha-Beta algorithm [8] or the more recent Monte Carlo Tree Search paradigm [9, 3]. These algorithms which explore an exponentially large game tree are meaningful when optimal polynomial time algorithms are impossible or unlikely. For instance, tree search algorithms would not be used for nim and Shannon\u2019s edge switching game which can be played optimally and solved in polynomial time [10].\nComputational complexity is a theoretical tool used to gain formal intuition on families of problems. It can indicate that a problem is unlikely to be solvable in polynomial time and that exponential algorithms might be the best bet. The complexity class PSPACE comprises those problems that can be solved on a Turing machine using an amount of space polynomial in the size of the input. The prototypical example of a PSPACE-complete problem is the Quantified Boolean Formula problem (qbf) which can be seen as a generalization of sat allowing for variables to be both existentially and universally quantified. Proving that a game is PSPACE-hard shows that a variety of intricate problems can be encoded via positions of this game. Additionally, it is widely believed in complexity theory that if a problem is PSPACE-hard, then it admits no polynomial time algorithms.\nFor this reason, studying the computational complexity of games is also a popular research topic. The complexity class of chess and go was determined shortly after the very definition of the appropriate classes and other popular games have been classified since then [11, 12]. More recently, we studied the complexity of trick-taking card games which notably include bridge, skat, tarot, and whist [13].\nConnection games have received less attention. Besides Even and Tarjan\u2019s proof that Shannon\u2019s vertex switching game is PSPACE-complete [14] and Reisch\u2019s proof that hex is PSPACE-complete [15], the only complexity results on connection games that we know of are the PSPACE-completeness of virtual connection detection [16] in hex, the NP-completeness of dominated cell detection in Shannon\u2019s vertex switching game [17], as well as an unpublished note\nshowing that a problem related to twixt is NP-complete [18].1\nThe games that we study in this paper rank among the most notable connection games. The game of twixt by Alex Randolph [20] was first commercialized in the 1960s and was short-listed for the prestigious Spiel des Jahres award in 1979. Notwithstanding hex, Christian Freeling\u2019s havannah is the connection game that has attracted the most interest from researchers and programmers. This may be attributed to Freeling challenging programmers to build an AI able to beat him in at least one game in a ten-game match before 2012. Of course, Christian Freeling could not have foreseen the advent of the Monte Carlo Tree Search algorithm and the prize money of the Havannah Challenge 2012 was awarded after a man-machine match in October 2012.2 Slither is a more recent addition to the connection game family as it was designed by Corey Clark in 2010. Nevertheless, the introduction of forbidden patterns mechanics in this game has already proved quite influential in connection game design.3 The two-player game slither that we study in this article should not be confused with the Japanese single-player puzzle slither link which has been the object of independent papers [21, 22].\nThe first two games were the main topic of multiple master\u2019s theses and research articles [23, 18, 24, 25, 26, 27, 4] and all three gave rise to competitive play. High-level online competitive play takes place on www.littlegolem.net. Finally, live competitive play can also be observed between human players at the Mind Sports Olympiads where an international twixt championship has taken place every year since 1997, as well as between havannah computer players at the ICGA Computer Olympiad since 2009.4\nOur main contributions in this paper are diverse.5\n1. We establish that havannah, twixt, and slither are PSPACE-complete.\n2. We study the parameterized complexity of hex with the length of a solution as parameter and we show that while short generalized hex is W[1]-hard, short hex is FPT.\n3. We provide a formal proof that planar slither does not admit draws, as claimed by its designer, but that it heavily depends on the topology of the board.\n4. We demonstrate that John Nash\u2019s ultra-weak solution approach for hex can only be adapted to twixt, havannah, and slither to a limited extent.\n1For a summary in English of Reisch\u2019s reduction, see Maarup\u2019s thesis [19]. 2See the press release at http://mindsports.nl/index.php/arena/havannah/641. 3See for example the discussion at https://www.boardgamegeek.com/thread/1081423/ new-connection-games-slither-restriction. 4See www.boardability.com/game.php?id=twixt and www.grappa.univ-lille3.fr/icga/ game.php?id=37 for details. 5This article is based on two conference papers but improves upon them and extends our previous work significantly [28, 29]. The PSPACE-completeness proof for havannah has been simplified greatly. The parameterized complexity results are new. The discussion on ultra-weak solutions has been detailed and extended to twixt and havannah.\nTo the best of our knowledge, our result on short hex constitute the first tractability result in the field of Connection Games since Bruno and Weinberg\u2019s result on the Shannon Switching Game in 1970 [10]. The other games we focus on each add to or change important mechanics of hex, the quintessential connection game. Indeed, from a connection perspective, twixt is played on a non-planar graph6; havannah adds non-edge related winning conditions; and slither allows moving previously placed pieces. Together, these contributions make for a better understanding of the design decisions in connection games and their theoretical implications.\nThe paper is organized as follows. After describing the rules of gg and hex, we prove that twixt and slither are PSPACE-complete in Section 3 and that havannah is PSPACE-complete in Section 4. We then address the parameterized complexity of generalized hex and hex (Section 5). After having extensively considered the computational complexity of solving arbitrary positions of these games, Section 6 moves on to the problem of solving their starting (empty) positions. A discussion and final remarks conclude the paper."}, {"heading": "2. Previous Work", "text": "A staple in proofs of PSPACE-hardness for two-player games, generalized geography (gg) is one of the first two-player games to have been proved PSPACE-complete [30]. This problem has been used to show the intractability of games as different as hex [15], othello [31], amazons [32], bridge [13], and many more [12]. Our PSPACE-hardness proof for havannah is a reduction from gg and the results for twixt and slither also rely on generalized geography, albeit indirectly since we reduce from hex.\ngg is a game played on a graph. In this section, we recall the rules of gg and some of the assumptions that can be made on the input graph while preserving PSPACE-completeness. We also present the rules of hex."}, {"heading": "2.1. Generalized Geography", "text": "In gg, players take turns moving a token from vertex to vertex in a given graph. If the token is on a vertex v, then it can be moved to a vertex v\u2032 neighboring v provided v\u2032 has not been visited yet. A player wins when it is their opponent\u2019s turn and the opponent has no legal moves. An instance of gg is a graph G and an initial vertex v0, and asks whether the first player has a winning strategy in the corresponding game.\nWe denote by P (v) the set of predecessors of the vertex v in G, and S(v) the set of successors of v. A vertex with in-degree i and out-degree o is called (i, o)vertex. The degree of a vertex is the sum of the in-degree and the out-degree, and the degree of G is the maximal degree among all vertices of G. If V is the\n6Indeed, planar graphs have average degree smaller than 6, whereas a large board of twixt has average degree close to 8.\nset of vertices of G and V \u2032 is a subset of vertices, then G[V \\ V \u2032] is the induced subgraph of G where vertices belonging to V \u2032 have been removed.\nLichtenstein and Sipser have proved that the game remained PSPACE-hard even if G was assumed to be bipartite, planar, and of degree at most 3 [33]. We will reduce from such a restriction of gg to show that havannah is PSPACE-hard. To limit the number of gadgets7 we need to create, we will also assume a few simplifications detailed below. Naturally, these simplifications do not impact PSPACE-hardness. An example of a simplified instance of gg can be found in Figure 1.\nLet (G, v0) be an instance of gg with G bipartite, planar, and of degree at most 3. We can assume that there is no vertex v with out-degree 0 in G. Indeed, if v0 \u2208 P (v) then (G, v0) is trivially winning for Player 1. Else, (G[V \\ ({v} \u222a P (v))], v0) is an equivalent instance, since playing in a predecessor of v is losing.\nAll edges coming to the initial vertex v0 can be removed to form an equivalent instance. So, v0 is a (0, 1)-, a (0, 2)-, or a (0, 3)-vertex. If S(v0) = {v\u2032}, then (G[V \\ {v0}], v\u2032) is a strictly smaller instance such that Player 1 is winning in (G, v0) if and only if Player 1 is losing in (G[V \\{v0}], v\u2032). If S(v0) = {v\u2032, v\u2032\u2032, v\u2032\u2032\u2032}, then Player 1 is winning in (G, v0) if and only if Player 1 is losing in at least one of the three instances (G[V \\ {v0}], v\u2032), (G[V \\ {v0}], v\u2032\u2032), and (G[V \\ {v0}], v\u2032\u2032\u2032). In those three instances v\u2032, v\u2032\u2032, and v\u2032\u2032 are not (0, 3)-vertices since they had in-degree at least 1 in G. Thus, solving instances with an initial (0, 2)-vertex is as hard as solving instances with an initial (0, 3)-vertex. We can therefore also assume that v0 is a (0, 2)-vertex.\nFinally, we may assume that there exists a bipartition G1, G2 of the graph such that both G1 and G2 contain a (1, 2) choice vertex. Indeed, such vertices can always be added to a new component of the graph disconnected from the initial vertex without changing the outcome of the instance.\nWe call a gg instance with an initial (0, 2)-vertex, at least one (1, 2)-vertex per partition and then only (1, 1)-, (1, 2)-, and (2, 1)-vertices a simplified instance."}, {"heading": "2.2. Hex", "text": "In hex, two players alternate placing a stone of their color (black or white) in an unoccupied cell of a parallelogram board paved by hexagons. Stones cannot\n7In designing a reduction from \u03a0A to \u03a0B , a gadget is a portion of a \u03a0B-instance that encodes a meaningful component of \u03a0A, be it a vertex, an edge, a variable, a clause etc.\nbe taken or moved, so the length of any game is bounded by the number of cells. To win, one player must connect together a specified pair of opposite sides of the parallelogram. The other player must connect the other pair of opposite sides. As an example, Figure 2 reproduces a hex puzzle from the graph theorist Claude Berge, as cited by Hayward and van Rijswijck [34].\nIn Section 6.1, we will see that a game cannot be drawn. We now formalize what it means to connect two (opposite) sides of the board. Two cells are said neighbors if they share an edge. In a parallelogram-shaped hexagonal paving, cells have 6 neighbors if they are not on an edge of the parallelogram. On an edge, they may have 2, 3, or 4 neighbors. A black (resp. white) group is a maximal connected component in the graph whose vertices are black (resp. white) stones, and edges represent the neighbor relation. Then, connecting two sides mean having a group with at least one stone on each side."}, {"heading": "3. Complexity of Twixt and Slither", "text": ""}, {"heading": "3.1. Twixt", "text": "Alex Randolph\u2019s twixt is one of the most popular connection games. It was invented around 1960 and was marketed as soon as in 1962 [23]. In his book devoted to connection games, Cameron Browne describes twixt as one of the most popular and widely marketed of all connection games [2]. We now briefly describe the rules of twixt and refer to Moesker\u2019s master\u2019s thesis for an introduction and a mathematical approach to the strategy, and the description of a possible implementation [24].\ntwixt is a 2-player connection game played on a go-like board. At their turn, player White and Black place a pawn of their color in an unoccupied place. Just as in havannah and hex, pawns cannot be taken, moved, nor removed. When 2 pawns of the same color are spaced by a knight\u2019s move, they are linked by an edge of their color, unless this edge would cross another edge. At each turn, a player can remove some of their edges to allow for new links. The goal for player White (resp. Black) is to link top and bottom (resp. left and right) sides of the board. Note that sometimes, a player could have to choose between two\npossible edges that intersect each other. The pencil and paper version twixtpp where the edges of a same color are allowed to cross is also famous and played online.\nAs an illustration of the game rules, we reproduce here one of the original twixt puzzles invented by Alex Randolph. A complete list of puzzles by Randolph supplemented by new puzzles by Alan Hensel can be found on http: //www.ibiblio.org/twixtpuzzles/. Figure 3 displays puzzle 18 in which White is to play and win. Observe that only White (resp. Black) can play beyond the two horizontal white (resp. vertical black) strips. The first natural observation, in this puzzle, is that White has three groups of stones, two of which are virtually connected to the top side (White move K1, connecting both groups simultaneously, needs two Black moves to be partially parried), and one is connected to the bottom side (via B13 or F13). A tentative approach could be to play F5, bringing the top left group closer to the bottom group. Unfortunately that attempt fails when Black answers F6, shutting the top group completely, and the F5 move is wasted. The solution to the puzzle is, instead, for White to start with move G7, which is connected to the bottom group. White threatens both to connect the bottom group to the top left one via F5 and to connect the bottom group to the top right group via I6. There is no way for Black to prevent both threats at once and White wins the game.\nAs the length of a game of twixt is polynomially bounded, exploring the whole tree can be done with polynomial space using a minimax algorithm. Therefore twixt is in PSPACE.\nMazzoni and Watkins have shown that 3-sat could be reduced to singleplayer twixt, thus showing NP-completeness of the variant [18]. While it might be possible to try and adapt their work and obtain a reduction from 3-qbf to standard two-player twixt, we propose a simpler approach based on hex. The PSPACE-completeness of hex [15] has already been used to show the\nPSPACE-completeness of amazons, a well-known territory game [32]. We now present how we construct from an instance G of hex an instance \u03c6(G) of twixt. We can represent a cell of hex by the 9 \u00d7 9 twixt gadgets displayed in Figure 4. Let n be the size of a side of G, Figure 5 shows how a twixt board can be paved by n2 twixt cell gadgets to create a hex board.\nIt is not hard to see from Figure 4a that in each gadget of Figure 5, move w (resp. b) is dominating for White (resp. Black). That is, playing w is as good for White as any other move of the gadget. We can also see that the moves that are not part of any gadget in Figure 5 are dominated for both players. As a result, if player Black (resp. White) has a winning strategy in G, then player Black has a winning strategy in \u03c6(G). Thus, G is won by Black if and only if \u03c6(G) is won by Black. Therefore determining the winner in twixt is at least as hard as in hex, leading to the desired result.\nTheorem 1. Twixt is PSPACE-complete.\nObserve that the proposed reduction holds both for the classic version of twixt as well as for the pencil and paper version twixtpp. Indeed, the reduction does not require the losing player to remove any edge, so it also proves that twixtpp is PSPACE-hard."}, {"heading": "3.2. Slither", "text": "Invented in 2010 by Corey Clark, slither is relatively new connection game with an increasing popularity among online board game players. Unlike hex and havannah which are played on a hexagonally-paved board, slither is played on a grid and each player is trying to connect a pair of opposite edges corresponding to their color by constructing connected groups of stones. Whereas moves in most other connection games only involve putting down a new element on the board, moves in slither also allow relocating previously played stones. Another important difference between usual connections games and slither is that some stone configurations are forbidden in the latter. Namely, a player is not allowed to play a stone diagonally adjacent to a pre-existing stone of their color unless one of their already placed stones would be mutually adjacent."}, {"heading": "3.2.1. Rules", "text": "Slither is a two-player game starting on an empty n by n grid (or board). Let us call the players Black (or B) and White (or W ). Black and White alternate moves. Before stating what a move consists of, and what the winning conditions are, we introduce some useful definitions.\nAs the game proceeds, squares of the board can be empty, or contain a black stone, or contain a white stone. We refer to black (resp. white) stones as the stones of player B (resp. W ). We say that two squares of the board are adjacent if they are in the same row and adjacent columns, or in the same column and adjacent rows. They are king-adjacent if a chess king can move from one square to the other, and diagonally-adjacent if they are king-adjacent but not adjacent. Two stones are adjacent (resp. king-adjacent, diagonally-adjacent) if they are in adjacent (resp. king-adjacent, diagonally-adjacent) squares. For P \u2208 {W,B}, let GP be the graph whose vertices are the stones of player P placed in the board, and the edges encode the adjacent relation. That is, two vertices are linked by an edge if and only if they represent adjacent stones. Like in the game of go, a group for player P is a maximal connected component in GP .\nA move for player P consists of an optional relocation of an existing stone of P on a king-adjacent empty grid square, followed by a mandatory placement a stone of P into an empty grid square (Figure 7). For a move to be legal, the resulting position may not have two diagonally-adjacent stones of P that do not also have an orthogonally-adjacent stone in common (Figure 6). In what follows, we refer to this restrictive rule as the diagonal rule.\nBlack wins if they form a group with at least one stone in the first and in the last column. White wins if they form a group with at least one stone in the first and in the last row. Informally, Black wants to connect left-right and White wants to connect top-bottom (Figure 7b).\nAs in most connection games, a swap rule is usually implemented. That is, after the first move, the second player can decide either to play themself a move and the game goes on normally, or to become first player with that very same move."}, {"heading": "3.2.2. Computational complexity", "text": "Here, we show that deciding if one player has a winning strategy from a given position is intractable. Again, we present a reduction from hex. A hexagonal cell of hex is encoded by the gadgets depicted in Figure 8. More precisely, an empty cell (resp. a cell containing a black stone, resp. containing a white stone) is transformed into the portion of position of Figure 8a (resp. Figure 8b, resp. Figure 8c).\nObservation 1. When a player only places a stone in any empty square of the empty cell gadget, they create a configuration which is forbidden by the diagonal rule. Therefore, they need to also move one of their stones in the same cell gadget.\nLemma 1. In a black cell C (Figure 8b), White cannot prevent Black from having a group containing stones in x, y, and z.\nProof. Black stones on x and y are already in the same group. Because of the diagonal rule, White cannot place a stone in cell C and move a stone in another\ncell gadget. By Observation 1 and the previous remark, if White moves a stone in cell C, but decides to place a stone in another cell gadget, they can only do so in a white cell, which turns out to be useless. Thus, White might as well place a stone and move in cell C. After their move, White should occupy square C4; otherwise, Black places a stone on C4 and thereby connects their group containing z to their group containing x and y.\nThere are three ways for W to occupy square C4: (1) move stone on B4 to C4, (2) move stone on D3 to C4, or (3) place a new stone on C4. The first option cannot be extended into a legal move. Indeed, the diagonal rule would impose that a stone is placed on D4, to connect the two diagonally-adjacent white stones on C4 and D3. But then white stones on D4 and E5 would form a forbidden configuration. In the second option, White cannot place a stone on D3 nor on D4, because of the diagonal rule. And Black\u2019s next move would consist of moving the stone on C2 to D3, and placing a stone on D4, which connects z to x and y. Finally, in the third option, White is forced to move their stone in D3 to a square other than D4. And Black connects in the same manner.\nIf one disregards the eight stones in A6, A7, B6, B7, G0, G1, H0, and H1, the diagonal A7-H0 is an axis of anti-symmetry for the empty cell gadget, in the sense that the image of a black (resp. white) stone is a white (resp. black) stone. Due to this likeness, the following holds similarly.\nLemma 2. In a white cell (Figure 8c), Black cannot prevent White from having a group containing stones on x\u2032, y\u2032, and z\u2032.\nThe cell gadgets are glued together and attached to the edges of the board as described in Figure 9. The empty squares that do not belong to any gadgets can be filled with stones of any color without affecting neither player\u2019s optimal strategy. For convenience, we do not represent these stones.\nThe following observation is outlined by Figure 9.\nObservation 2. When playing in a empty cell gadget, the best Black can do is to connect x, y, and z, and the best White can do is to connect x\u2032, y\u2032, and z\u2032.\nFrom the empty cell gadget, Black can move stone E4 to D5 and place a stone on C5, resulting in the black cell configuration. By Lemma 1 and Observation 2, it is the optimal play within this cell. Similarly, the optimal play for White in a given empty cell, is to move stone D3 to C4 and place a stone on C5, yielding the white cell. Thus, having chosen the cell gadget where to play, the optimal move is to connect six paths going from this cell to the six adjacent cells in a hexagonal paving (Figure 9). Hence, the built slither position simulates a game of hex, and so, slither is as hard as hex.\nTheorem 2. It is PSPACE-complete to decide which player has a winning strategy from a given slither position.\nProof. The membership of this problem to PSPACE boils down to noticing that the length of a game is bounded from above by the number of empty squares.\nIndeed, at each move, one stone is added to the board. Thus, a minimax depth-first search uses a polynomial amount of space.\nThe gadgets in Figure 8 and their assembly as in Figure 9 provide a reduction from hex, a PSPACE-hard problem."}, {"heading": "4. Complexity of Havannah", "text": "havannah is a 2-player connection game played on a hexagonal board paved by hexagons. White and Black place a stone of their color in turn in an unoccupied cell. Stones cannot be taken, moved nor removed. Two cells are neighbors if they share an edge. A group is a connected component of stones of the same color via the neighbor relation. A player wins if they realize one of the three following different structures: a circular group, called ring, with at least one cell, possibly empty, inside; a group linking two corners of the board, called bridge; or a group linking three edges of the board, called fork. With respect to the fork winning condition, corner cells are not considered part of any edge. Figure 10 presents a board in which all three winning conditions are met by different groups of stones."}, {"heading": "4.1. Preliminary results", "text": "As the length of a game of havannah is polynomially bounded, exploring the whole game tree with Depth-First Search can be done in polynomial space, so havannah is in PSPACE.\nIn our reduction, the havannah board is large enough that the gadgets are far from the edges and the corners. Additionally, the gadgets feature ring threats that are short enough that the bridges and forks winning conditions do not have any influence. Before starting the reduction, we define threats and make two observations that will prove useful in the course of the reduction.\nWe call simple threat a move which threatens to realize a ring on the next move. There are only two kinds of answers to a simple threat: either win on the spot or defend by placing a stone in the cell creating this very threat.\nLemma 3. If a player is not threatened, playing a simple threat forces the opponent to answer on the cell of the threat.\nProof. Placing a stone on the cell of the threat wins the game against any other move of the opponent.\nA double threat is a move which threatens to realize a ring on the next move on at least two different cells. We will use threat as a generic term to encompass both simple and double threats. To be more concise, we will denote by a1; a2; . . . ; ap a sequence of moves starting with one player playing move a1, the opponent answering a2, and so on. We will specify which player starts the sequence if it is not clear from the context.\nLemma 4. If a player is not threatened, playing a double threat is winning.\nProof. The player is not threatened, so their opponent cannot win next turn. Let u and v be two cells of the double threat. If the opponent plays in u, the player wins by playing in v. If the opponent plays anywhere else, the player wins by playing in u.\nA second-order threat, or 2-threat, is a move which threatens to realize a double threat on the next move. That is, after a 2-threat is played by a player P , there is a set of cells {x, a, b} such that both P playing {x, a} as well as P playing {x, b} would complete a ring. We call the three cells involved in a 2-threat the carrier of the threat, and in particular the cell x is called the exit of the threat. For example, in Figure 11a, move n is a 2-threat for Black with carrier x, a, and b. Indeed, if Black follows up with x, then Black obtains a ring by playing a or by playing b.\nLemma 5. If a player makes a 2-threat, then any opponent move that does not belong to the following list is losing. 1) Immediately winning move 2) Simple threat 3) Move inside the carrier of the threat.\nIn the following subsections we propose gadgets that encode the different parts of a simplified instance of gg, as defined in Section 2.1. These gadgets have starting points and ending points. The gadgets are assembled so that the ending point of a gadget coincides with the starting point of the next one. The resulting instance of havannah is such that both players must enter in the gadgets by a starting point and leave it by an ending point otherwise they lose. Wires and curves will enable us to encode the edges of the input graph. While\nfigures and lemmas are mostly presented from White\u2019s point of view, all the gadgets and lemmas work exactly the same way with colors reversed."}, {"heading": "4.2. Vertex gadgets", "text": "Recall from Section 2.1 that simplified gg instances only feature four types of vertices: (1, 1)-, (2, 1), (0, 2)-, and (1, 2)-vertices. Figure 11 depicts how these four types of vertices are mapped into havannah gadgets. The diagrams illustrate the White version of the gadgets, corresponding to vertices belonging to the first player in gg. Each gadget can naturally by rotated by multiples of 60\u25e6 and the colors can be swapped to obtain the Black gadgets.\nIn Figure 11d and 11c, after Black plays n, White can elect to play c1 or c2. In the former case, Black is forced to reply c2 which forces White to ex it the gadget via x1. In the latter case, Black replies c1 and then White exits the gadget via x2.\nLet (G, v0) be a simplified instance of gg. G being bipartite, we denote by V1 the side of the partition containing v0, and V2 the other side. Player 1 moves the token from vertices of V1 to vertices of V2 and player 2 moves the token from V2 to V1. We denote by \u03c6 the reduction from gg to havannah. Each of Player 1\u2019s vertices is encoded by an instance of the corresponding gadget of Figure 11, and each of Player 2\u2019s vertices is encoded similarly with colors reversed. Wires and curves are used to connect the gadgets. As an example, we provide the reduction from the gg instance from Figure 1 in Figure 12."}, {"heading": "4.3. Properties", "text": "We now establish a few properties that will help us prove that Player 1 wins the gg instance if and only if White wins the corresponding havannah position. The main idea of the reduction is that optimal play in the havannah position consists of a sequence of White defending a 2-threat by making a 2-threat which Black defends by making their own 2-threat and so on and so forth. Under optimal play, the current 2-threat is in the gadget that corresponds to the token vertex in the gg instance.\nLemma 6. If White plays the 2-threat in one of their (2, 1)-vertex gadgets (Figure 13a) and Black has no winning sequence of simple threats elsewhere on the board, then White can force a win.\nProof. With move 1 in Figure 13a, Player White makes four distinct 2-threats with respective carriers: {k, l,m}, {k, l, n}, {k,m, n}, and {l,m, n}. The intersection of all these carriers is empty, so no single Black move is inside the carrier of all threats. By Lemma 5, the only non-losing Black moves would be those satisfying criterion 1) or 2). Since we assumed that Black had no winning sequence of simple threats, no move satisfies criterion 1) nor criterion 2). Therefore, White can force a win.\nThis 2-threat network remains valid even if the (2, 1) gadget has been entered and exited before move 1 is played. Note also that there is no preemptive way for\nBlack to \u201cbreak\u201d the network: If Black were to play in 1, then White could play the cell just beneath 1 and create a winning 2-threat network. Similarly, move k to n from Black before 1 is played would let White create another 2-threat network in the same gadget.\nThe dual result is true for Black\u2019s (2, 1) gadget.\nCorollary 1. A move by a player P that does maintain the existence of a sequence of winning threats for P is a losing move.\nProof. Because we are reducing from a simplified gg instance, we know that each player has at least one (2, 1)-vertex. Suppose that a player makes a move that leaves the board without a potential sequence of winning threat for them, then the opponent can make the winning 2-threat network in one of their (2, 1)-vertices and force a win by Lemma 6.\nCorollary 1 ensures that not only should the players defend against the opponent\u2019s 2-threats, but that their defense should create 2-threats for the opponent to defend.\nBefore showing that all the gadgets behave as expected, let us notice that the exchange 3; 4; 5; 6 in Figure 13b can be played in any (2, 1) vertex previously entered from n1, using Figure 11b\u2019s notation. This exchange (or the symmetrical one 9; 10; 11; 12 when the gadget has been entered from n2) does not harm Black and the White moves are forced, so we will assume that the exchange always takes place as soon as available, even if White correctly exits the gadget in x.\nLemma 7. If Black enters a White (2, 1)-vertex gadget via n1 or n2 (Figure 11b), and White does not have a threat, then White is forced to play in the exit point x.\nProof. When Black plays in n1, it creates a 2-threat with carrier {x, n2, n\u20322}. Suppose that White plays in n2, then Black has a winning sequence of simple threats as displayed in Figure 13b. If instead White plays in n\u20322, then the same winning sequence is available for Black, simply swapping White move 2 for White move 8 in Figure 13b. Invoking Lemma 5, we know that White needs to play in the carrier, so we can conclude that White needs to play in x.\nThe proof when Black plays in n2 is symmetrical.\nLemma 8. If Black enters a White (1, 1)-vertex gadget in n (Figure 11a), and White does not have a threat, then White is forced to play in the exit point x.\nProof. When Black plays in n1, it creates a 2-threat with carrier {x, a, b}. White playing in a or in b does not create any new threat for Black, so by Corollary 1 these moves are losing. Invoking Lemma 5, we know that White needs to play in the carrier, so we can conclude that White needs to play in x.\nLemma 9. If Black enters a White (1, 2)-vertex gadget in n (Figure 11d), and neither player has a threat available elsewhere on the board, then optimal play dictates that at most two sequences of moves are possible, c1; c2;x1 and c2; c1;x2, up to White\u2019s choice.\nProof. Let us first show that after Black n and White c1, the sequence c2;x1 is forced. White\u2019s c1 creates a 2-threat with carrier {c2, e, f}. Black playing in e or in f does not create any new threat for White, so by Corollary 1 these moves are losing. Invoking Lemma 5, we know that Black needs to play in the carrier, so we can conclude that Black needs to play in c2. Black\u2019s c2 creates a 2-threat with carrier {x1, a1, b1}. White\u2019s playing a1 or b1 does not create any new threat for Black, so by the same reasoning, we obtain that White is forced to play x1.\nThe same style of argumentation shows that if White starts with c2, then Black needs to reply c1 and x2 is forced for White.\nNow suppose that after Black n, White plays a non-threat elsewhere on the board. Black plays in c1, forcing White c2. Black then plays x2 creating a double threat in a2 and b2 and White has lost.\nLemma 10. When Black initiates in a White (0, 2)-vertex gadget in n (Figure 11c), if neither player has a threat available elsewhere on the board, then optimal play dictates that at most two sequences of moves are possible, c1; c2;x1 and c2; c1;x2, up to White\u2019s choice.\nProof. The proof is virtually identical to that of Lemma 9.\nFrom now on, whenever we consider choice gadgets, we simply write that after Black enters in n, White plays in x1 or x2 to exit. That is, we omit the intermediate sequences c1; c2 or c2; c1 and leave them implicit.\nLemma 11. If Black has no threat, then Black re-entering a White (2, 1) gadget after it was visited before is a losing move (Figure 14).\nProof. When Black re-enters the gadget, the only new threat it creates is the winning sequence for Black starting with a; b; c; d; 2. This sequence can be defended against by White playing 2 in this gadget and creating the network of 2-threats seen in Lemma 6.\nTheorem 3. Havannah is PSPACE-complete.\nProof. We have already mentioned that havannah \u2208 PSPACE and the gadgets presented in this Section constitute a polynomial time reduction from a PSPACEcomplete problem. We shall now prove that the reduction is sound, that is: player 1 is winning in (G, v0) if and only if White is winning in \u03c6((G, v0)) when Black starts.\nThe simulation of gg on havannah proceeds as follows. The initial position has a single 2-threat, in the unique (0, 2) gadget and no potential simple threats otherwise. Optimal play according to the prescription of Lemmas 7 through 10, that is, entering a gadget with n (or n1 or n2) and exiting it with x (or x1 or x2) maintains the invariant that the position has a single 2-threat up until a (2, 1) gadget is re-entered, at which point the game ends.\nBlack\u2019s first move is forced and is entering White\u2019s (0, 2) gadget with n. On the one hand, the havannah gadget containing the current 2-threat, i.e., the one having most recently been entered, corresponds to the token vertex in gg.\nOn the other hand, a player re-entering a (2, 1) gadget in havannah loses, so it cannot be part of a winning strategy for that player.\nAs a result, we can map any havannah winning strategy for White to a gg winning strategy for Player 1 and any havannah winning strategy for Black to a gg winning strategy for Player 2. Lemmas 7 through 10 together with the \u201cno threat elsewhere invariant\u201d guarantee that exiting the most recently entered gadget is the optimal havannah play for both players. Since the number of vertices is finite, one player will be forced to re-enter a (2, 1) gadget under optimal play. This means that the theoretical outcome of the translated instance is not a draw, so one player has indeed a winning strategy in havannah and finding it solves gg."}, {"heading": "5. Parameterized Complexity of Short Generalized Hex", "text": "Generalized Hex. Shannon\u2019s vertex switching game is more commonly called generalized hex since it generalizes hex played on a hexagonal tiling to any (potentially non planar) graphs. A generalized hex-instance is a graph G with two specified vertices s and t, each containing a white pebble. White (Player 1) and Black (Player 2) alternate in playing pebbles of their color in unoccupied vertices of the graph. White wins if they manage to create an (s, t)-path where each vertex contains a white pebble. Black wins if they prevent White from doing so. When a black pebble is played in a vertex, one can equivalently imagine that this vertex has been removed from the graph. Any edge having a white pebble at its two endpoints can be equivalently contracted to a single vertex containing a white pebble. That way, White wins if s and t end up within the same vertex. In all generality, one can assume that the initial instance already contains white pebbles in some other vertices than s and t.\nParameterized complexity. In a nutshell, parameterized complexity aims at solving hard problems (be it NP-hard, PSPACE-hard, etc.) in time f(k)nO(1), called FPT time, (for fixed-parameter tractable), where n is the size of the instance, f is a computable function, and k is a parameter of the problem. The parameter can take various forms: size of the solution for optimization problems, treewidth or maximum degree for graph problems, size of the alphabet for word problems, to name a few. Assuming the problem we are trying to solve is NPhard, function f has to be superpolynomial, unless P = NP. When such an FPT algorithm exists, f is usually exponential. However, if our parameter k is small compared to the size of the instance n, what we obtain is that the exponential blow-up is limited to the small value k. Some problems, like finding a clique of size k in a graph having n vertices, does not admit an algorithm running in time f(k)nO(1) for any computable function f , unless 3-sat can be solved in subexponential-time which is believed unlikely. Phrased with the terminology of parameterized complexity, clique is unlikely to be FPT parameterized by the size of the solution. There is a whole hierarchy of problems beyond FPT: W [1] \u2286 W [2] \u2286 . . . \u2286 W [SAT ] \u2286 W [P ] \u2286 AW [\u2217]. For our purpose here, we do not need to define formally any of those classes. Instead, we just mention that clique is W [1]-complete for FPT reductions, where an FPT reduction may blow-up the size of the instance n only polynomially but the new parameter can be any computable function of the old parameter. A problem \u03a0 is W [1]-hard with respect to \u03ba if there is an FPT reduction from clique parameterized by the size of a solution k to \u03a0 parameterized by \u03ba. It is highly suspected that FPT 6= W [1]. Therefore, showing that a problem is W [1]-hard with respect to some parameter gives a strong evidence that there is no FPT algorithm. The class AW [\u2217] is a superset of W [1] which encompasses hard parameterized problems with alternation. We now describe the basic AW [\u2217]-complete problem (again, \u03a0 is AW [\u2217]-hard if there is an FPT reduction from this problem to \u03a0). Given a Boolean formula \u03c6 and a partition V1, V2, . . . , Vk of its variables, two players Existential and Universal alternate in choosing which single variable of Vi is set to true (all the other variables of Vi are set to false). Existential chooses in V1, then Universal chooses in V2, and so on. Existential wins iff \u03c6 is satisfied by the resulting assignment. This problem is AW [\u2217]-complete parameterized by the number k of partite sets.\nAs an easy exercise, one can check that if there is an FPT reduction from a problem A to a problem B and B admits an FPT algorithm, then so does A. Two recent and extensive textbooks on parameterized complexity present these concepts in far greater detail [35, 36].\nShort games. In their introductory book to parameterized complexity [37], Downey and Fellows devote a small section to k-move games. The k-move (or short) variant of a two-player game consists of deciding if Player 1 can win in at most k moves. More formally, if one identifies a strategy to a decision tree, one needs to determine if Player 1 has a winning strategy of depth at most k. The problem is parameterized by k. The PhD thesis of Allan Scott [38] is dedicated to short games. The problem short chess was shown AW [\u2217]-complete [39].\nPursuit-evasion games (also known as cops and robber games) have been studied within the framework of short games [40] as well as infinite two-player games on graphs [41].\nThe parameterized complexity of short generalized hex was first asked in the book of Downey and Fellows [37] and is still open [42, 36]. We answer partially this question by showing that short generalized hex is unlikely to be FPT. More precisely, we prove that short generalized hex is W [1]-hard. Nevertheless, this problem could be higher on the intractability hierarchy. It is conjectured AW [\u2217]-complete and Scott proved that it belongs to AW [\u2217]. From a purely practical perspective, our partial answer is already satisfactory in asserting that we should not expect to find an FPT algorithm solving short generalized hex.\nMulticolored clique. In multicolored clique, one is given a graph where the vertices are partitioned into k sets called color classes and the goal is to find a clique of size k that intersects each color class exactly once. The multicolored clique is also W [1]-complete and it is often more convenient to design FPT reductions from this variant than from clique.\nTheorem 4. Short generalized hex is W [1]-hard.\nProof. From an instance G = (V = V1 ] V2 ] . . . ] Vk, E) of the W [1]-hard multicolored clique, we build an equivalent instance (H, s, t) of short generalized hex in the following way. For each vertex v \u2208 V , we add four vertices v0, v1, v2, v3 to H and a path sv0v1v2v3t. For every i \u2208 [k], we add a vertex ti, and we link ti to t and to all the vertices v\n2 such that v \u2208 Vi. Similarly, we add a vertex si that we link to s and to all the vertices v\n1 such that v \u2208 Vi. That finishes the construction of the selector gadgets (see Figure 15).\nThen, we add two copies of an almost complete binary tree (i.e., all levels except the last are completely filled) with ( k 2 ) leaves, and link both of their roots to a new vertex r, itself linked to t. For each leaf of the second to last level, we replace the edge incident to it by two parallel paths of length 2. This has the same effect of weighting the edge by 2 (see Figure 16), so that each leaf is at the same distance from the root. We make the slight abuse of still calling the whole structure a tree. Within the b-th copy of the two binary trees, each leaf represents a distinct set Eij := E(Vi, Vj) with i 6= j, and is denoted by li,j(b).\nFor each edge e = uv \u2208 E and a, b \u2208 [2], we add three vertices we(a, b), we,u(a, b) and we,v(a, b). We link we(a, b) to we,u(a, b) and we,v(a, b). We also link we,u(a, b) to u 1 and we,v(a, b) to v 1. Finally, for any b \u2208 [2], we link li,j(b) to all the vertices we(a, b) such that e \u2208 Eij and a \u2208 [2] (see Figure 16). For each b \u2208 [2], we denote by Tb the b-th binary tree together with all the vertices we(a, b) and we,u(a, b), for a \u2208 [2], e \u2208 E and u \u2208 V . We observe that T1 and T2 are disjoint trees. The tree induced by T1, T2, and r is denoted by T , and is seen as rooted in r.\nThis ends the construction of H which has O(|V (G)|+ |E(G)|+ k2) vertices. We ask if there is a winning strategy for White whose depth is at most q := 2(2k + dlog ( k 2 ) e+ 4)\u2212 1 = O(k). First, if there is a multicolored clique in G, we\nwill exhibit a strategy for White that forces a win in at most q moves. Second, if there is no multicolored clique, we will give a winning strategy for Black.\nNormal play. If there is a multicolored clique C in G, then White can win in q moves in H. Here, move corresponds to what is usually called a ply or a half-move in games such as chess (where a move is actually a \u201dmove\u201d from White plus a \u201dmove\u201d from Black). Let C = {c1, c2, . . . , ck} with ci \u2208 Vi for each i \u2208 [k]. The first 4k moves are the following. For each i \u2208 [k], White plays in c1i . If Black does not answer in {si, ti, c0i , c2i , c3i }, White plays in c2i and wins in four more moves; indeed, s and c1i can be connected via c 0 i or si, while c 2 i and ti can be connected via c3i or ti. Black plays in si and White answers in c 0 i . Then Black is forced to play in {c2i , c3i , ti}. On move 4k + 1, White plays in r and will play the child in T of their last move in a subtree where Black has not played until they play in li,j(b) for some i 6= j \u2208 [k] and b \u2208 [2]. As C is a clique, there is an edge e between ci and cj . By construction, the six vertices we(1, b), we(2, b), we,ci(1, b), we,ci(2, b), we,cj (1, b), and we,cj (2, b) are still empty. White\u2019s next move is we(a, b) where a is such that Black has not played in {we(a, b), we,ci(a, b), we,cj (a, b)}. Then, White\u2019s final move is either we,ci(a, b) or we,cj (a, b), finishing a white path from t all across T to a vertex of the clique to s. Following this strategy, the total number of moves is at most 4k in the selector gadgets, plus twice the height of T minus 1, i.e.,\n2(dlog ( k 2 ) e+ 4)\u2212 1. This corresponds exactly to q moves.\nProper defense. If there is no multicolored clique in G, we give a winning strategy for Black: not only White cannot force a win in at most q moves but he cannot win at all. A (y, z)-cut S of a graph J is a set of edges of J whose removal makes that y and z are in two different connected components. We say that S separates y and z. The following lemma presents a situation where Black can easily block their opponent.\nLemma 12. If there is an (s, t)-cut M of H such that no vertex of M contains a white pebble and M is an induced matching, then Black wins, even if it is White to play.\nProof. Whenever White plays a vertex u in M , Black answers the other endpoint of the unique edge of M which touches u.\nIf White plays in some vertex v2, then Black plays in v1 and White has not achieved anything. If White plays in some vertex v0, v3, si, or ti, then Black plays r and wins by Lemma 12, since the induced matching \u22c3 v\u2208V {v1v2} separates s from t. If White plays in a vertex v1 such that v \u2208 Vi, Black plays in si. Then, White should play in v\n0 (indeed, it is pointless for White to play in ud for some d \u2208 {0, 1} and u \u2208 Vi, since Black can answer in u1\u2212d) and Black plays in ti. Now, if White plays in another vertex u 1 with u \u2208 Vi\n(for the same i), then Black plays r and wins by Lemma 12 with the (s, t)-cut\u22c3 v\u2208V \\{u}{v1v2} \u222a {u2u3}.\nSo far, we showed that, for each i \u2208 [k], White can play in at most one vertex of the form v1 with v \u2208 Vi, and then has to play in r. We distinguish two cases: (a) for each i \u2208 [k], White has played in a vertex v1 with v \u2208 Vi when they play in r (b) there is some i \u2208 [k] such that White has not yet played in a vertex v1 with v \u2208 Vi when they play in r.\nWe start with case (a). Let A = {d11, d12, . . . , d1k} be the vertices which now contain a white pebble, with d1i \u2208 Vi for each i \u2208 [k]. As, S := {d1, d2, . . . , dk} is not a clique in G, there are two vertices di and dj such that didj /\u2208 E. Black plays in the root of T2, forcing White to play in the root of T1. Then, Black will systematically block the path which does not go to the leaf li,j(1). At this point, M\n\u2032 :=\u22c3 v\u2208V \\S{v0v1} \u222a \u22c3 v\u2208S{v2v3} \u222a \u22c3 a\u2208[2],xy\u2208Eij ,x\u2208{di,dj}{wxy(a, 1)wxy,x(a, 1)} separates s and t. Also, there is no white pebble in any of the endpoints of M \u2032. Finally, M \u2032 is an induced matching. That observation is based on the key argument that \u22c3 a\u2208[2],xy\u2208Eij ,x\u2208{di,dj}{wxy(a, 1)wxy,x(a, 1)} cannot contain both wxy(a, 1)wxy,x(a, 1) and wxy(a, 1)wxy,y(a, 1) since that would imply that {x, y} = {di, dj}, contradicting that didj /\u2208 E. Therefore, Black wins by Lemma 12.\nNow, we consider case (b). Black plays si where i is such that White has not played in any vertex v1 with v \u2208 Vi yet. Now, whenever White plays in u1 \u2208 Vi, Black plays in u0. This way, White cannot connect any vertices of Vi to s. When White goes back to playing in T , Black forces him to the leaves li,j(1) (and/or li,j(2)) for some arbitrary j \u2208 [k] and wins by Lemma 12 similarly to case (a).\nUnder the Exponential Time Hypothesis (ETH) that asserts that 3-sat has no subexponential algorithm, multicolored clique cannot be solved in time f(k)(n + m)o(k) for any computable function f [43]. As our reduction linearly preserves the parameter, we have shown that short generalized hex cannot be solved in the same running time f(k)(n + m)o(k) unless the ETH fails, where n and m are the number of vertices and edges of the graph. A simple procedure solving short generalized hex in time O\u2217(nk) (where O\u2217 suppresses polynomial factors) would consist of expanding all the continuations of length up to k and decide if Player 1 wins in this game subtree.\nA class C of graphs has bounded local treewidth if there is a function FC such that for any G \u2208 C, tw(G) 6 FC(diam(G)) where tw(G) is the treewidth of G and diam(G) its diameter.\nTheorem 5. Short generalized hex is FPT in every class of graphs with bounded local treewidth and closed by edge contractions.\nProof. As we said above, we can contract the maximal connected components of vertices containing white pebbles (white connected components) into a single vertex containing a white pebble. Indeed, the condition there is an (s, t)path in which each vertex contains a white pebble is equivalent to s and t are in the same supervertex in the graph obtained by contracting every edge\nwhose two endpoints contain a white pebble. Thus, we can now assume that, initially, the white connected components have all size 1. Let W be the set of vertices containing initially a white pebble in this new graph. After at most k moves, the length of a potential (s, t)-path with white pebbles is bounded by 2dk2 e + 1 6 k + 2. Indeed, White plays at most d k 2 e new pebbles and the path can contain at most dk2 e + 1 initially placed white pebbles (every other two). It implies that the problem is expressible in first-order logic by the formula \u2228 k\u20326k[\u2203v1\u2200v2\u2203v3\u2200v4 . . . \u2203vk\u2032 \u2227 i6=j\u2208[k\u2032] vi 6= vj \u2227 \u2228 l6k+2[\u2203u1, u2, . . . , ul \u2208 W \u222a {v1, v3, . . . , vk\u2032} u1 = s\u2227 ul = t\u2227E(u1, u2)\u2227E(u2, u3)\u2227 . . .\u2227E(ul\u22121, ul)]]. Frick and Grohe showed that any graph problem expressible in first-order logic can be solved in linear time in classes of graph with local bounded treewidth [44]. Yet, this algorithm is far from practical since its dependence in the formula is an exponential tower of height the number of quantifier alternations, so in our case height \u0398(k).\nCorollary 2. Short generalized hex is FPT in planar graphs.\nProof. Planar graphs are closed by edge contractions and have bounded local treewidth [45].\nCorollary 3. Short hex is FPT.\nProof. The underlying graph of hex is planar."}, {"heading": "6. Ultra-weak Solutions of Connection games", "text": "In Allis\u2019s game solving hierarchy [46, Section 1.5], a game is said to be ultra-weakly solved if the game-theoretic value of the initial position has been determined. Hex is unusual among strategy games in that an ultra-weak solution is known for any board size.\nIn this section, we first recall how hex can be ultra-weakly solved to prove that the starting position is a theoretical first-player win. We then consider twixt, havannah, and slither, and show that although some of the arguments carry over, it is impossible to ultra-weakly solve these games with the same method."}, {"heading": "6.1. Hex", "text": "When John Nash discovered/invented the game hex, one of his motivations was to find a non-trivial game with a non-constructive proof that the first player has a winning strategy in the initial position. The proof has two steps, prove that the initial position is not a draw, then prove that the initial position is not a second-player win.\nThe outcome of the initial position is not a game-theoretical draw because no hex position can end in a draw. This is a well-known fact but the proof is non-trivial. We refer to Bogomolny [47] for a discussion of the issue and further references.\nLemma 13. Draws cannot occur in hex.\nTo derive the second step, Nash developed a strategy-stealing argument which can be summed up as follows [1]. Suppose for a contradiction that the second player has a winning strategy \u03c3 in the initial position. Then a winning strategy for the first player can be obtained as: start with a random move, then apply \u03c3 pretending that the initial move did not occur. If \u03c3 ever recommends to play on the location of the initial move, then play another random move and carry on. Given that having an additional random stone on the board cannot hurt the first player, then we have developed a winning strategy for the first player too. Since the second and first player cannot both have a winning strategy at the same time, we can conclude that our hypothesis does not hold. Therefore the initial hex position is not a second-player win when the swap rule is not used.\nLemma 14. Hex is not a theoretical second-player win.\nThe strategy-stealing argument applies to hex for two reasons. First, it is a symmetrical game, i.e., for any position, there is a map from moves that are legal for the second player to moves that are legal for the first player. Second, there are no zugzwangs: having an additional move never hurts.\nThis leads to the ultra-weak solution for hex.\nTheorem 6. On any board size, the initial position in hex is a theoretical first-player win.\nProof. Hex is a turn-taking finite two-person game of perfect information with no chance. Zermelo\u2019s Theorem states that any such game is either a first-player win, a second-player win, or a draw. Lemma 13 and 14 rule out two possibilities and hex can thus only be a first-player win.\n6.2. Twixt and havannah\nTwixt and havannah admit draws in theory but they occur very rarely in practice. The fact is relatively well-known in the game community, for instance Ewalds [4, Section 3.4.5] states that draws are possible for havannah sizes above 3 [4, Section 3.4.5]. Yet, to the best of our knowledge, a proof for arbitrary sizes has not appeared in the related literature. We give here a general construction for both games illustrated in Figure 17.\nProposition 1. It is possible to reach a drawn position from an empty twixt board of any size, and from an empty havannah board of any size strictly larger than 3.\nProof. For twixt, any position on size 3 and 4 is a draw, and an example of draw for size 5 is given in Figure 17a. For larger sizes, if both players keep placing pegs in a checkered layout, no connection can ever go past two rows away from any border. This construction ensures a draw on board from size 6. Figure 17b and Figure 17d display the pattern for size 6 and 12 respectively.\nIn case of havannah, if both players keep placing pegs in a striped layout, no winning condition is ever met. Figure 17c and 17e displays the pattern for size 4 and 6.\nLemma 15. Twixt (resp. havannah) is not a theoretical second-player win.\nProof. Zugzwangs are not possible in twixt (resp. havannah), and the game is symmetrical, therefore, the strategy-stealing argument applies to twixt (resp. havannah).\nAlthough the initial positions of twixt or havannah are not second-player wins, draws are possible for boards sufficiently large, and so we cannot conclude that either is a first-player win."}, {"heading": "6.3. Slither", "text": "We now present some observations on and properties of slither. Some of the observations made in this section have independently been pointed out earlier in the abstract game community, especially on BoardGameGeek.8 However, we prove for the first time that the standard slither variant cannot end in a draw, thereby settling an open-problem often raised in this community.\nThe concept of zugzwang appears in chess and denotes a position in which the current player has no desirable move and would rather pass and have the opponent act. A mutual zugzwang is a position in which both players would rather have the opponent play. Although zugzwangs are virtually unheard of in typical connection games, where additional moves can never hurt you, things are different in slither.\nProposition 2. Zugzwangs and mutual zugzwangs can occur in slither.\nProof. In Figure 18a, if it is White (resp. Black) to play, only one move is available, moving stone on C2 (resp. C4) to a and placing a stone on c or equivalently moving to c and placing on a. Then Black (resp. White) wins by placing a stone on C2 (resp. moving stone B5 to C4 and placing a stone on b).\nAs we have seen, the strategy-stealing argument can be applied to many other games including twixt, havannah, and games of the connect(m,n, k) family [48]. Unfortunately, the argument cannot be applied to slither.\nProposition 3. Nash\u2019s strategy-stealing argument does not apply in slither.\nProof. Consider the White zugzwang position in Figure 18a. Had the A4 square not been occupied with a White stone, White would have a winning move: move B4 to b and place a stone on c. Since there are positions where having one too many stones on the board can make a player lose the game, Nash\u2019s strategy-stealing argument does not apply.\nTherefore, there is no theoretical indication yet that slither is not a secondplayer win on an empty board. However, in practice it is a huge advantage to play first, so much that if the swap rule is used, it is recommended to swap no matter\n8http://boardgamegeek.com/thread/692652/what-if-there-no-legal-move\nwhere the first move is played, including corner locations. The slither-specific intuition behind this practical advice is that the game is dynamic and a player can bring back a stone from a corner towards the center, moving it closer every turn.\nDraws would occur in slither if there were positions where no player has a legal move and yet no player connects their own sides. The slither community had indeed identified non-terminal positions in which one of the players had no legal moves, but the opponent always had at least one move possible. In that case, the player with no legal moves would simply skip their turn.\nProposition 4. There exist positions in which a player has no legal moves.\nProof. For instance, Black has no legal move in the position Figure 18b.\nThe designer of slither has long claimed that the game did not admit any draw. Since there were no formal proofs, many members of the community were left unconvinced and attempted to find counter-examples. They would submit positions on forums dedicated to slither, and Corey Clark or some slither players would point out that the counter-example was not valid, usually because the diagonal rule was not respected or because a legal move actually existed for one of the players. Before settling this question formally, let us point out that draws can actually occur when the board topology is not restricted to be rectangular.\nProposition 5. Draws are possible when slither is played on a cylinder or on a torus.\nProof. In Figure 19a (resp. Figure 19b), if black (resp. black and white) sides are connected, then both players have no legal moves.\nDraws are possible on some exotic boards. So, there is probably no fundamental reasons why the following result is true, and the proof, which we defer to the appendix, consists of a large case analysis on the consequences of forbidding diagonal configurations and the possibility of moving stones.\nTheorem 7. Draws are not possible in slither on rectangular boards.\nProof. This theorem relies on two properties of slither. First, if a slither board is filled, then at least one player has a winning group. Second, if a board is not filled, then at least one player has a legal move. As as a result, the game always continues, possibly with a player passing, until one player has a winning group Since each move adds a stone to an empty intersection, these properties ensure that the game is bound to end after a finite number of turns with a winner. The Appendix proves the two essential properties mentioned above."}, {"heading": "7. Discussion and Conclusion", "text": "Unlike chess, checkers, and go, the game of hex is not played on a grid board but uses a hexagonal paving. The simplest connection game on a grid, using hex rules on a checkered board where each cell is connected to the 4 vertically and horizontally adjacent ones, easily leads to draws in almost all cases and is not interesting for players. Designing an interesting connection game played on the usual grid board is challenging and twixt and slither can be seen as two different solutions. Other solutions include Joa\u0303o Pedro Neto\u2019s gonnect and Mark Steere\u2019s crossway, and Browne\u2019s book provides many more examples [2]. Each comes with its own set of mechanics and trade-offs.\nTwixt eschews adjacent connections in favor of Knight\u2019s move connections. In a sense, this changes the topology of the board fundamentally as, contrary to hex and most other connection games, the graph of all possible direct connections is not planar anymore. Another consequence is that twixt allows draws, but this difference is mainly of theoretical interest as draws remain extremely rare in competitive play.\nSlither keeps the grid topology intact but addresses draws by adding forbidden patterns and stone movement. Forbidding patterns alone would not be sufficient to prevent draws: for instance Figure 18a, 18b, and 9 would all be drawn if it was not for the possibility of moving existing pieces. Not only does moving pieces significantly changes the dynamics of the game, but it also\nadds the theoretical possibility of zugzwangs. Again, this remains mainly of theoretical interest as zugzwangs virtually never seem to happen in practice.\nHavannah keeps the convenient hexagonal paving of hex but explores a new dimension in the realm of connection game design by adding the ring winning condition. A board could in principle support a ring or more from both players, except for the fact that the game ends as soon as the first one is completed. This leads to winning races where both players attempt to satisfy their own ring patterns, possibly non-intersecting, while disrupting the opponent\u2019s strategy by more immediate threats.\nThe hexagonal versus grid paving issue is of some importance in game design. It could seem, at first sight, that this difference would make reductions from hex easier for havannah than for twixt and slither. On the contrary, we only presented a hex-based reduction for twixt and slither, and in both reductions, the size of the resulting game is only linearly larger than the size of the input instance.\nAs a matter of fact, the ring winning condition in havannah makes obtaining a PSPACE-hardness proof by direct reduction from hex quite difficult. Attempts by other authors and ourselves at finding a Hex-based reduction centered around the bridge or the fork winning conditions proved unfruitful.9 Instead, disregarding bridges and forks, a sequence of ring threats allowed us to reduce from generalized geography, the problem used in Reisch\u2019s proof for hex. On the other hand, if the havannah rules were changed to drop the ring winning condition, a direct simulation of hex on the havannah board would be possible, just like it is for y, and PSPACE-completeness of this new game would be straightforward.\nIn terms of future work, settling the complexity of other notable connection games remains a natural direction. In particular, gonnect and lines of action are good candidates. In lines of action, each player starts with two groups of pieces and tries to connect all their pieces by moving these pieces and possibly capturing opponent pieces [50]. While the goal of lines of action clearly makes it a connection game, the mechanics distinguishes it from more classical connection games as no pieces are added to the board and existing pieces can be moved or removed. Gonnect is best described as a mix between hex and go. Each player is trying to connect the opposite sides of a grid board, but captures are possible following the rules of go. Both these games are quite different from the usual connection games and from the games studied in this paper in that the game length is not polynomially bounded. As a result, these games may very well not be PSPACE-complete.\nFuture work could also examine havannah, slither, and twixt under a closer eye with the goal of obtaining theoretical results of practical relevance. For instance, a seemingly reasonable heuristic in slither consists of playing the first move of a shortest sequence leading to victory, assuming the opponent passes. We leave as an open question whether such a shortest sequence can\n9Fabien and Olivier Teytaud, personal communication and [49].\nbe efficiently computed. In fact, determining if such a sequence exists at all might not necessarily be easy and is reminiscent of Mazzoni and Watkins [18] NP-completeness result on single-player twixt. Another possible bridge towards actual game playing and solving is provided by parameterized complexity. Our FPT result on short hex indicates that solving algorithms need not depend exponentially on the board size, but only on the search depth. Could this result be turned into a practical algorithm for solving hex endgames on large board sizes?\nWe find it remarkable that both twixt and slither PSPACE-hardness proofs are direct reductions from hex. It is quite rare indeed that an actually played game constitutes the basis of a computational complexity reduction. This is a new testimony to the special place that hex occupies among strategy games, it combines being a relatively popular abstract game and a theoretical problem fundamental enough to reduce from."}, {"heading": "Acknowledgments", "text": "The authors wish to thank Da\u0301niel Marx and Radu Curticapean for useful discussions and pointing out the paper [44]. The first author was supported by the ERC grant PARAMTIGHT: \u201cParameterized complexity and the search for tight complexity results\u201d (no. 280152). The third author was supported by the Australian Research Council (project DE 150101351)."}, {"heading": "Appendix A. Draws are impossible in slither", "text": "Stating that slither does not feature any draw actually corresponds to the following three more elementary statements: each filled slither board has winning groups for at least one player, each filled slither board has winning groups for no more than one player, and each non-filled slither board has at least one legal move for one of the two players. The first two statements can be obtained rather directly from the equivalent ones in hex, thanks to the diagonal rule. The third statement is much more involved and requires a careful case analysis on non-filled boards.\nLemma 16. If a slither board is filled, then exactly one of the two players wins.\nProof. Recall that hex can be played on a rectangular board provided we add a link between each pair of king-adjacent squares along one specified diagonal direction, as in Figure A.20. The forbidden configuration rule ensures that this king-adjacent diagonal connection is respected in slither, although it is indirect. Therefore, any filled m\u00d7 n slither board can be mapped onto an equivalent m\u00d7n hex board such that any pair of slither squares is connected if and only if the corresponding pair of hex cells is connected. Since any filled hex board is won by exactly one player, we have the desired slither result.\nTheorem 8. On a rectangular board, as long as there is at least one empty square, at least one of the two players has a legal move.\nProof. We adopt the following proof technique.10 We assume for a contradiction that we have a non-filled position with no legal moves for any players. We start from an empty square and make deductions concerning its surrounding so as to constrain the occupancy of the nearby squares. Each constraint is deduced based on the established occupancies and from the no legal moves assumption or from the diagonal rule. We may perform a split case analysis on squares that are not constrained enough to have a definite status. In each case, however, we finally arrive at a position with a legal move that cannot be prevented by adding any further constraints.\n10No part of the argument will rely upon the color of the board edge.\nAs we add constraints to forbid legal moves by either player, we liberally extend the size of the pattern around the empty square. If any such extension was not possible because we would have reached the limit of the board, then it would not be possible to forbid the desired legal move and our case would be proved. We can therefore disregard the possibility of inadvertently meeting an edge of the board as we extend our patterns, at least for the sake of this argument.\nIn addition to the regular three types of squares, white stone, black stone, and empty, we add the following ones: no constraints yet, cannot hold a white stone, and cannot hold a black stone.\nConsider a rectangular board. If there is at least an empty square on the board, then there is at least an empty square s such that one of the following 4 conditions on the bottom and left neighbors of s is satisfied. Either s is in the bottom-left corner (Figure A.21a), or s is on the bottom edge and its left neighbor is occupied (Figure A.21b), or s has three neighboring stones of different colors (Figure A.21c), or these stones are all of the same color (Figure A.21d). We can assume w.l.o.g. that a majority of the bottom-left neighboring stones are white.\nThe first two cases are treated in Section Appendix B, the third case is treated in Section Appendix C, and the last case in Section Appendix D. In each case, we arrive to the conclusion that at least one player can move."}, {"heading": "Appendix B. A square in a corner or on the edge of the board", "text": "If there is an empty square in a corner, as depicted in Figure A.21a, then placing a stone on that very square is a legal move for at least one player.\nIf there is an empty square on an edge, we start from the situation in Figure A.21b and use the following reasoning to constrain the surrounding and obtain Figure B.22. C2 needs a white stone to forbid White\u2019s move B1, and C1 cannot be white. A2 needs a black stone to forbid Black\u2019s move B1. B2 needs to be empty to forbid White\u2019s and Black\u2019s move B1. C1 cannot be empty to forbid White\u2019s move C1. A3 needs a white stone to forbid White\u2019s move A1B1-B2, and B3 cannot be white. C3 needs a black stone to forbid Black\u2019s move C1B1-B2, and B3 cannot be black. Similarly, A4 needs a black stone, C4 needs a white\nstone, and B4 needs to be empty, so as to forbid White\u2019s move A1B2-B3 and Black\u2019s move C1B2-B3.\nBut then, C3B2-B1 is a legal move for Black."}, {"heading": "Appendix C. A square with two white stones and a black stone", "text": "We start from the situation in Figure A.21c and use the following reasoning to constrain the surrounding and obtain Figure C.23. The C2 square cannot contain a white stone, otherwise B2 is a legal move for White. Similarly, B3 cannot contain a black stone, otherwise B2 is a legal move for Black. To forbid White\u2019s move B2, there should be a white stone on C1 or on C3 (Figure C.24)."}, {"heading": "Appendix C.1. Figure C.24a", "text": "C2 cannot contain a black stone due to the diagonal rule (since B2 is empty by assumption), and has to be empty. Now, we distinguish two subcases: either B3 is white, or it is empty (Figure C.25)."}, {"heading": "Appendix C.1.1. Figure C.25a", "text": "A3 contains a white stone, by the diagonal rule. C3 needs a black stone to forbid Black\u2019s move B2. D1 needs a black stone to forbid Black\u2019s move B1B2-C2. D3 needs a white stone to forbid White\u2019s move C1B2-C2. D2 needs to be empty, by the diagonal rule on stones C1 and C3. E3 needs a black stone to forbid Black\u2019s move B1C2-D2.\nBut, in that situation, D3C2-B2 is a legal move for White."}, {"heading": "Appendix C.1.2. Figure C.25b", "text": "To forbid White\u2019s move C2, D3 needs a white stone and C3 and D2 cannot contain a white stone. To forbid White\u2019s move D3C2-B2, there should be white stones on E3 and D4 and E4 should not contain a white stone. Now, we distinguish two subcases: either C3 is black, or it is empty (Figure C.26).\nAppendix C.1.2.1. Figure C.26a. A3 cannot contain a black stone to forbid Black\u2019s move B3. D1 needs a black stone to forbid Black\u2019s move C3B2-C2. D2 cannot contain a black stone by the diagonal rule, and has to be empty.\nBut then, move B1C2-D2 is legal for Black.\nAppendix C.1.2.2. Figure C.26b. B4 needs a white stone to forbid White\u2019s move C3. D2 needs a black stone to forbid Black\u2019s move C3.\nBut then, B1C2-C3 is legal for Black."}, {"heading": "Appendix C.2. Figure C.24b", "text": "A3 needs a black stone to forbid Black\u2019s move B2. B3 cannot contain a white stone by the diagonal rule (with A2) and has to be empty. Now, we distinguish two subcases: either C2 is black, or it is empty (Figure C.27)."}, {"heading": "Appendix C.2.1. Figure C.27a", "text": "To forbid White\u2019s move C3B2-B3 and Black\u2019s move A3B2-B3, there should be at least one white stone and one black stone in {A4, C4}. So, we distinguish further between {A4 black, C4 white} and {A4 white, C4 black} (Figure C.28).\nAppendix C.2.1.1. Figure C.28a.. D2 needs a black stone to forbid Black\u2019s move C2B2-B3, and C0 needs a black stone to forbid Black\u2019s move C1B2-B3.\nBut then, B1B2-B3 is a legal move for Black.\nAppendix C.2.1.2. Figure C.28b.. By the diagonal rule, square B4 has to be empty. C5 (as well as D4) needs a black stone to forbid Black\u2019s move C4B3-B2. Symmetrically, A5 needs a white stone to forbid White\u2019s move A4B3-B2.\nBut then, C3B2-B4 is a legal move for White."}, {"heading": "Appendix C.2.2. Figure C.27b.", "text": "To forbid White\u2019s move C2, there should be a white stone on D1 but no white stones on C1 nor D2. We distinguish two subcases: C1 contains a black stone, or it is empty (Figure C.29).\nAppendix C.2.2.1. Figure C.29a.. D3 needs a black stone to forbid Black\u2019s move C2 (since B3 is empty). Then, by the diagonal rule, square D2 can only be empty. E3 needs a white stone to forbid White\u2019s move C3D2-C2. E1 needs a black stone to forbid Black\u2019s move D3C2-D2.\nBut then, D1C2-B2 is a legal move for White.\nAppendix C.2.2.2. Figure C.29b.. The only way to forbid White\u2019s move D1C2B2 is to add two white stones on D0 and on E1. To forbid White\u2019s move C1, there should be a white stone on B0 (and a white stone on A0, by the diagonal rule), and no white stones on C0. C0 cannot contain a black stone because of the diagonal rule\nBut then, C0 is a legal move for White."}, {"heading": "Appendix D. A square with three white stones", "text": "We start from the situation in Figure A.21d. To forbid White\u2019s move B2, there should be a white stone on C3, but no white stones on B3 nor C2. To forbid Black\u2019s move B2, there should be a black stone on C1 or A3, say C1 w.l.o.g. (see Figure D.30).\nTherefore, B3 and C2 are empty or contain a black stone. They cannot both contain a black stone since B2 is empty. We thus distinguish three cases: B3 and C2 are empty, B3 contains a black stone, and C2 contains a black stone (Figure D.31)."}, {"heading": "Appendix D.1. Figure D.31a", "text": "D3 needs a black stone to forbid Black\u2019s move C2. D1 needs a white stone to forbid White\u2019s move C3B2-C2. E3 needs a white stone to forbid White\u2019s move\nC3B2-D2. E1 needs a black stone to forbid Black\u2019s move D3C2-D2. But then, D1C2-B2 is legal for White."}, {"heading": "Appendix D.2. Figure D.31b", "text": "A3 needs a black stone to forbid Black\u2019s move B2. This case is equivalent to the case of Figure C.27a under color and spatial symmetry."}, {"heading": "Appendix D.3. Figure D.31c", "text": "Let us consider cases for the contents of A3. If A3 contains a black stone, then we obtain a position equivalent to Figure C.27a under color and spatial symmetry.\nIf A3 is empty or white, then a similar proof to Figure D.31a still holds. Indeed, D3 needs a black stone to forbid Black\u2019s move B3B2-C2 and D1 needs a white stone to forbid White\u2019s move C3B2-C2. The same way, E3 needs a white stone to forbid White\u2019s move C3B2-D2, and then E1 needs a black stone to forbid Black\u2019s move C1B2-D2.\nBut then, D1C2-B2 is legal for White."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "<lb>In this paper, we study three connection games among the most widely played:<lb>havannah, twixt, and slither. We show that determining the outcome of an<lb>arbitrary input position is PSPACE-complete in all three cases. Our reductions<lb>are based on the popular graph problem generalized geography and on hex<lb>itself. We also consider the complexity of generalizations of hex parameterized<lb>by the length of the solution and establish that while short generalized hex<lb>is W[1]-hard, short hex is FPT. Finally, we prove that the ultra-weak solution<lb>to the empty starting position in hex cannot be fully adapted to any of these<lb>three games.", "creator": "LaTeX with hyperref package"}}}