{"id": "1606.01275", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Jun-2016", "title": "Predicting with Distributions", "abstract": "we consider a new pac - style continuum learning model in which a joint distribution over vector real pairs ( x, y ) is determined by an unknown function c ( x ) that maps input vectors x not mainly to individual outputs, but to entire distributions over output vectors x y. whereas our main results take the form of rather general reductions from our model dynamics to algorithms needed for pac learning the function class and the distribution class separately, and show that virtually every such combination yields an efficient algorithm in our model. our core methods include considering a randomized reduction to detect classification noise that partially and resolves an open problem in [ rdm06 ], and an application sort of preserving the neyman - pearson lemma to obtain robust learning algorithms.", "histories": [["v1", "Fri, 3 Jun 2016 20:56:51 GMT  (171kb)", "https://arxiv.org/abs/1606.01275v1", null], ["v2", "Wed, 16 Nov 2016 01:02:06 GMT  (142kb)", "http://arxiv.org/abs/1606.01275v2", null], ["v3", "Fri, 9 Jun 2017 15:06:49 GMT  (134kb)", "http://arxiv.org/abs/1606.01275v3", null]], "reviews": [], "SUBJECTS": "cs.DS cs.LG", "authors": ["michael kearns", "zhiwei steven wu"], "accepted": false, "id": "1606.01275"}, "pdf": {"name": "1606.01275.pdf", "metadata": {"source": "CRF", "title": "Predicting with Distributions", "authors": ["Michael Kearns", "Zhiwei Steven Wu"], "emails": ["mkearns@cis.upenn.edu", "wuzhiwei@cis.upenn.edu"], "sections": [{"heading": null, "text": "ar X\niv :1\n60 6.\n01 27\n5v 3\n[ cs\n.D S]\n9 J\nun 2"}, {"heading": "1 Introduction", "text": "We consider a new variant of the Probably Approximately Correct (PAC) learning framework. In our model, a joint distribution over vector pairs (x,y) is determined by an unknown target function c(x) that maps input vectors x not to individual outputs, but to entire distributions over output vectors y in some large space. This model generalizes settings such as learning with classification noise or errors, probablistic concepts (where y is a probabilistic but scalar function of x), multiclass learning (where y is a multi- or vector-valued but deterministic function of x), and settings in which the output space associated with a classification may be large and complex. It is an instance of a more general framework in which the distribution of multiple hidden variables\u2014with unknown but parametric structural dependencies on observable inputs \u2014 determines the distribution of observable outputs. For the special case of a single binary hidden variable, we provide the first formal learning guarantees in a PAC framework.\nAs in the standard PAC model, we begin with an unknown binary function or concept c chosen from a known class C,1 whose inputs x are distributed according to an unknown and arbitrary distribution. Now, however, the value c(x) determines which of two unknown probability distributions Pc(x) govern the distribution of y, where P0 and P1 are chosen from a known class of distributions P . Thus y is distributed according to a mixture model, but the mixture component is given by a hidden classifier c. The learner does not see explicit labels c(x), but only the resulting (x,y) pairs. The goal is to learn a hypothesis model that consists of a hypothesis h that is a {0,1}-valued function, and two probability distributions P\u03020 and P\u03021 from the class P . Given any input x, the model will predict the vector y to be drawn from the distribution P\u0302h(x) (and hence\n*Dept. of Computer and Information Sciences, University of Pennsylvania. Email: mkearns@cis.upenn.edu \u2020Dept. of Computer and Information Sciences, University of Pennsylvania. Email: wuzhiwei@cis.upenn.edu 1We leave the consideration of multi- or real-valued functions c(x) to future work.\npredict with distribution P\u0302h(x)). Our objective is to minimize the conditional Kullback-Leibler (KL) divergence Ex [ KL(Pc(x)||P\u0302h(x)) ]\n, rather than simply the KL divergence to the mixture. We thus refer to our model as Predicting with Distributions (PwD).\nOne of our primary motivations is composition and reducibility across different learning models \u2014 in this case, models for classification and models for distribution learning. Within the standard PAC (classification) model, there is a rich theory of reducibility between specific learning problems (Pitt and Warmuth, 1990; Kearns and Valiant, 1994), between classes of learning problems (Schapire, 1990; Kearns, 1998), as well as composition theorems allowing the creation of more complex learning algorithm from simpler ones (Kearns et al., 1994). Less common are results allowing one to assemble algorithms with provable performance guarantees from constituents that are solving different types of learning problems. A natural starting point for such an investigation is with the standard PAC supervised learning model, and its distributional analogue (Kearns et al., 1994), since these models are each already populated with a number of algorithms with strong theoretical guarantees.\nOur main technical interest is thus in conditions permitting computationally efficient learning algorithms composed of extant classification and distribution learning algorithms. Informally, our results imply that for every concept class C known to be PAC learnable with classification noise (Angluin and Laird, 1987), and almost every class P known to be PAC learnable in the distributional sense of Kearns et al. (1994), PwD problems given by (C,P ) are learnable in our framework."}, {"heading": "1.1 Our Results and Techniques", "text": "Our results take the form of reductions from ourmodel to algorithms for PAC learning the concept class C and the distribution class P separately.2 The primary conceptual step is in identifying the natural technical conditions that connect these two different classes of learning problems. The centerpiece in this \u201cbridge\u201d is the notion of a distinguishing event for two probability distributions P0,P1 \u2208 P , which is an event whose probability is \u201csignficantly\u201d (inverse polynomially) different under P0 and P1, provided these distributions are themselves sufficiently different.\nOur first result shows that a distinguishing event can be used, via a particular randomized mapping, to turn the observed y into a noisy binary label for the unknown concept c. This will serve as a building block for us to combine efficient PAC learners from classification and distribution learning.\nWe then use distinguishing events to provide two different reductions of our model to PAC classification and distribution learning algorithms. In the \u201cforward\u201d reduction, we assume the distribution class P admits a small set of candidate distinguishing events. We show that such candidate events exist and can be efficiently constructed for the class of spherical Gaussians and product distributions over any discrete domain. By searching and verifying this set for such an event, we first PAC learn c from noisy examples, then use the resulting hypothesis to \u201cseparate\u201d P0 and P1 for a distributional PAC algorithm for the class P . This gives:\n2Throughout the paper, all PAC learning algorithms (for both concept class C and distribution class P ) in our reduction runs in polynomial time, since we are primarily concerned with computational efficiency (as opposed to sample complexity).\nTheorem 1 (Informal Statement, Forward Reduction). Suppose that the concept class C is PAC learnable under classification noise, and the distribution class P is PAC learnable and admits a polynomial-sized set of distinguishing events. Then the joint class (C,P ) is PwD-learnable.\nIn the \u201creverse\u201d reduction, we instead first separate the distributions, then use their approximations to learn c. Here we need a stronger distribution-learning assumption, but no assumption on distinguishing events. More precisely, we assume that mixtures of two distributions from P (which is exactly what the unconditioned y is) are PAC learnable. Once we have identified the (approximate) mixture components, we show they can be used to explicitly construct a specialized distinguishing event, which in turn lets us create a noisy label for c. This leads our result in the reverse reduction:\nTheorem 2 (Informal Statement, Reverse Reduction). Suppose that the concept class C is PAC learnable under classification noise, and any mixture of two distributions from P is PAC learnable. Then the joint class (C,P ) is PwD-learnable.\nIn both reductions, we make central use of Le Cam\u2019s method to show that any PAC concept or distribution learning algorithm must have a certain \u201crobustness\u201d to corrupted data. Thus in both the forward and reverse directions, by controlling the accuracy of the model learned in the first step, we ensure the second step of learning will succeed.\nSince practically every C known to be PAC learnable can also be learned with classification noise (either directly or via the statistical query framework (Kearns, 1998), with parity-based constructions being the only known exceptions), and the distribution classes P known to be PAC learnable have small sets of distinguishing events (such as product distributions), and/or have mixture learning algorithms (such as Gaussians), our results yield efficient PwD algorithms for almost all combinations of PAC classification and distribution learning algorithms known to date."}, {"heading": "1.2 Related Works", "text": "At the highest level, our model falls under the framework of Haussler (1992), which gives a decision-theoretic treatment of PAC-style learning (Valiant, 1984) for very general loss functions; our model can be viewed as a special case in which the loss function is conditional log-loss given the value of a classifier. Whereas Haussler (1992) is primarily concerned with sample complexity, our focus here is on computational complexity and composition of learning models.\nAt a more technical level, our results nicely connect two well-studied models under the PAC learning literature. First, our work is related to the results in PAC learning under classification noise (Angluin and Laird, 1987; Decatur, 1997; Kearns, 1998), and makes use of a result by Ralaivola et al. (2006) that established the equivalence of learning under (standard) classification noise (CN) and under class-conditional classification noise (CCCN). Our work also relies on the PAC model for distribution learning (Kearns et al., 1994), including a long line of works on learning mixtures of distributions (see e.g. Dasgupta (1999); Arora and Kannan (2001); Vempala and Wang (2004); Feldman et al. (2008)). Our newmodel of PwD learning, in particular, can be viewed as a composition of these two models.\nOur model is also technically related to the one of co-training (Blum and Mitchell, 1998) in that the input x and the output y give two different views on the data, and they are conditionally independent given the unknown label z = c(x), which is also a crucial assumption for co-training (as well as various other latent variable models for inference and learning). However, our model\nis also fundamentally different from co-training in two ways. First, in our model, there is not a natural target Boolean function that maps y to the label z. For example, any outcome y can be generated from both distributions P0 and P1. In other words, just using y is not sufficient for identifying the label z. Second, our learning goal is to predict what distribution the outcome y is drawn from given the input x, as opposed to predicting the unknown label z."}, {"heading": "2 Preliminaries", "text": ""}, {"heading": "2.1 Model: PwD-Learning", "text": "Let X denote the space of all possible contexts, and Y denote the space of all possible outcomes. We assume that all contexts x \u2208 X are of some common length n, and all outcomes y \u2208 Y are of some common length k. Here the lengths are typically measured by the dimension; the most common examples for X are the boolean hypercube {0,1}n and subsets of Rn ({0,1}k and Rk for Y ).\nLet C be a class of {0,1}-valued functions (also called concepts) over the context space X , and P be a class of probability distributions over the outcome space Y . We assume an underlying distribution D over X , a target concept c \u2208 C, and target distributions P0 and P1 in P . Together, we will call the tuple (c,P0,P1) the target model.\nGiven any target model (c,P0,P1) and underlying distributionD, our learning algorithm is then given sample access to the following generative example oracle Gen(D, c,P0,P1) (or simply Gen). On each call, the oracle does the following (see Figure 1 for an illustration):\n1. Draws a context x randomly according to D;\n2. Evaluates the concept c on x, and draws an outcome y randomly from Pc(x);\n3. Returns the context-outcome pair (x,y).\nA hypothesis model is a triple T = (h, P\u03020, P\u03021) that consists of a hypothesis h \u2208 C and two hypothesis distributions P\u03020 and P\u03021 \u2208 P . Given any context x, the hypothesis model predicts the outcome y to be drawn from the distribution P\u0302h(x) (or simply predicts with distribution P\u0302h(x)). The goal of our learning algorithm is to output a hypothesis model with high accuracy with respect to the target model, and the error of any model T is defined as\nerr(T ) = E x\u223cD\n[ KL(Pc(x)||P\u0302h(x)) ]\nwhere KL denotes Kullback-Leibler divergence (KL divergence). Our model of Predicting with Distributions learning (PwD-learning) is thus defined as follows.\nDefinition 1 (PwD-Learnable). Let C be a concept class over X , and P be a class of distributions over Y . We say that the joint class (C,P ) is PwD-learnable if there exists an algorithm L such that for any target concept c \u2208 C, any distribution D over X , and target distributions P0,P1 \u2208 P over Y , and for any \u03b5 > 0 and 0 < \u03b4 \u2264 1, the following holds: if L is given inputs \u03b5,\u03b4 as inputs and sample access from Gen(D, c,P0,P1), then L will halt in time bounded by poly(1/\u03b5,1/\u03b4,n,k) and output a triple T = (h, P\u03020, P\u03021) \u2208 C \u00d7P \u00d7P that with probability at least 1\u2212 \u03b4 satisfies err(T ) \u2264 \u03b5.\nObserve that the unconditional distribution over y is a mixture of the target distributions P0 and P1. In our model, it is not enough to learn the mixture distribution (which is a standard\nproblem in learningmixtures of distributions). Our learning objective is to minimize the expected conditional KL divergence, which is more demanding and in general requires a good approximation to the target concept c over X .\nAlso note that we have stated the definition for the \u201cproper\u201d learning case in which the hypothesis models lie in the target classes C and P . However, all of our results hold for the more general case in which they lie in potentially richer classes C\u2032 and P \u2032."}, {"heading": "2.2 Related Learning Models", "text": "We now discuss two learning models related to our setting (see the appendix for formal definitions).\nCNLearning Wefirst introduce PAC learning under classification noise (CN) (Angluin and Laird, 1987). For any noise rate 0 \u2264 \u03b7 < 1/2, consider the example oracle EX\u03b7CN(c,D) that on each call draws an example (x,c(x)) randomly according to D, then with probability 1\u2212\u03b7 returns the uncorrupted example (x,c(x)), and with probability \u03b7 returns the erroneous example (x,\u00acc(x)). The concept class C is CN learnable if there exists a polynomial-time algorithm that given sample access to EX\n\u03b7 CN finds a hypothesis h \u2208 C that approximately minimizes the classification error:\nerr(h) = Prx\u223cD[c(x) , h(x)].\nCCCNLearning In amore general noisemodel calledClass-Conditional Classification Noise (CCCN) proposed by Ralaivola et al. (2006), the example oracle EX\n\u03b7 CCCN has class-dependent noise rates\u2014\nthat is, the noise rate \u03b70 for the negative examples (c(x) = 0) and the noise rate \u03b71 for the positive examples (c(x) = 1) may be different, and both below 1/2. Moreover, Ralaivola et al. (2006) show that any class that is learnable under CN is also learnable under CCCN. (See the appendix for a formal statement).\nDistribution Learning We also make use of results from for PAC learning probability distributions (Kearns et al., 1994). A distribution class P is efficiently learnable if there exists a polynomialtime algorithm that, given sample access to an unknown target distribution P, outputs an accurate distribution P\u0302 such that KL(P ||P\u0302) \u2264 \u03b5 for some target accuracy \u03b5. For any distribution P \u2208 P and any point y \u2208 Y , we assume that we can evaluate the probability (density) of y assigned by P (referred to as learning with an evaluator in Kearns et al. (1994); see the appendix for the formal\ndefinition). We will write P(y) to denote the probability (or density) of point y, and write P(E) to denote Pry\u223cP [y \u2208 E] for any measurable set E \u2282 Y .\nTo simplify our analysis, for the remainder of the paper wewill make the following assumption on the class P to ensure that the log-likelihood loss (or log-loss) is bounded in the domain Y . While this condition may not hold for some natural classes of distributions (e.g. Gaussians), it can be obtained using standard procedures (for instance, by truncating, or mixing with a small amount of the uniform distribution; see Feldman et al. (2006) for an example).\nAssumption 1 (Boundedness Assumption). There exists a quantity M that is upper bounded by poly(k) such that for any distribution P \u2208 P and any point y \u2208 Y , we have log(1/P(y)) \u2264M ."}, {"heading": "3 CN Learning with Identified Distinguishing Events", "text": "In this section, we will introduce a central concept to our framework\u2014distinguishing events. Informally, an event E \u2282 Y is distinguishing for distributions P0 and P1 if it occurs with different probabilities under the measures of P0 and P1. As a consequence, these events are informative about target concept c that determines which distribution the outcome y is drawn from. We will rely on such events to create a CCCN learning instance for the target concept c. Thus, whenever the class C is learnable under CN (and hence learnable under CCCN by Ralaivola et al. (2006)), we can learn the target concept c under the PwD model using a distinguishing event.\nDefinition 2 (Distinguishing Event). Let P and Q be distributions over the outcome space Y , and let \u03be > 0. An event E \u2286 Y is \u03be-distinguishing for distributions P and Q if |P(E)\u2212Q(E)| \u2265 \u03be. We will call \u03be the separation parameter for such an event.\nWe will now show that the knowledge of a distinguishing event between P0 and P1 allows us to simulate an example oracle EX\n\u03b7 CCCN, and therefore we can learn the concept c with a CCCN\nlearner. The main technical problem here is to assign noisy labels based on the distinguishing event so that noise rates \u03b70 and \u03b71 of the oracle are strictly less than 1/2.\nOur solution is to construct a randomized mapping from the event to the labels.3 Let us first introduce some parameters. Let E \u2286 Y be a \u03be-distinguishing event for the distributions P0 and P1 for some \u03be \u2208 (0,1]. We will write p = P0(E) and q = P1(E). Consider the following algorithm Lab(p\u0302, q\u0302,\u03be) that takes parameters p\u0302, q\u0302 that are estimates for p and q, and the separation parameter \u03be as inputs, and randomly creates noisy labels for (x,y) pair drawn from Gen:\n\u2022 Draw an example (x,y) from the oracle Gen.\n\u2022 If y \u2208 E, assign label \u2113 = 1 with probability a1 and \u2113 = 0 with probability a0 = 1\u2212 a1; Otherwise, assign label \u2113 = 1 with probability b1 and \u2113 = 0 with probability b0 = 1\u2212 b1, where\na0 = 1/2+ \u03be(p\u0302 + q\u0302 \u2212 2) 4(q\u0302 \u2212 p\u0302) and b0 = 1/2+ \u03be(p\u0302 + q\u0302) 4(q\u0302 \u2212 p\u0302) (1)\n\u2022 Output the labeled example (x,\u2113).\n3In the work of Blum and Mitchell (1998), the authors showed that any CN learnable class is also learnable when the class-conditional noise rates satisfy \u03b70 + \u03b71 < 1. Our construction here will imply a more general result\u2014the class remains learnable when the noise rates satisfy \u03b70 + \u03b71 , 1.\nIt\u2019s easy to check that both vectors (a0,a1) and (b0,b1) form valid probabilities over {0,1} (see the appendix for a proof).\nAs mentioned, we need to ensure the class-conditional noise rates to be below 1/2. As a first step, we work out the noise rates of Lab in terms of the true probabilities p and q, and show that the \u201cestimated\u201d noise rates based on p\u0302 and q\u0302 are below (1/2\u2212 \u03be/4). Lemma 1. Given a fixed \u03be-distinguishing event E, the class-conditional noise rates of Lab are\n\u03b71 = Pr[\u2113 = 0 | c(x) = 1] = qa0 + (1\u2212 q)b0 and \u03b70 = Pr[\u2113 = 1 | c(x) = 0] = pa1 + (1\u2212 p)b1. Moreover, given any input estimates (p\u0302, q\u0302) for (p,q), the parameters a0,a1,b0 and b1 satisfy:\nq\u0302a0 + (1\u2212 q\u0302)b0 = p\u0302a1 + (1\u2212 p\u0302)b1 \u2264 1/2\u2212 \u03be/4. By Lemma 1, we know that as long as the input estimates p\u0302 and q\u0302 are sufficiently close to p and q, the noise rates will be less than 1/2. To obtain such estimates, we will guess the values of p and q on a grid of size \u23081/\u2206\u23092 in the range of [0,1]2, where \u2206 \u2208 [0,1] is some discretization parameter. Note that for some pair of values i, j \u2208 [\u23081/\u2206\u2309] and i , j such that the guesses (p\u0302, q\u0302) = (i\u2206, j\u2206) satisfies p\u0302 \u2208 [p \u2212\u2206,p +\u2206] and q\u0302 \u2208 [q \u2212\u2206,q +\u2206] Given such accurate guesses p\u0302 and q\u0302, we can then guarantee low noise rates as derived below:\nLemma 2. Fix any \u2206 \u2208 [0,1]. Suppose that the estimates p\u0302 and q\u0302 satisfy |p\u2212 p\u0302| \u2264 \u2206 and |q\u2212 q\u0302| \u2264 \u2206, then the class-conditional noise rates \u03b70 and \u03b71 for Lab(p\u0302, q\u0302,\u03be) are upper bounded by 1/2\u2212 \u03be/4+\u2206.\nThus, if we choose the discretization parameter \u2206 to be below \u03be/4, then the algorithm Lab(p\u0302, q\u0302) is a valid example oracle EX\n\u03b7 CCCN for some pair of guess estimates. Furthermore, if we apply the\ncorresponding CCCN learning algorithm to the instantiations of Lab(p\u0302, q\u0302) over all guesses (p\u0302, q\u0302), the output list of hypotheses is then guaranteed to contain an accurate one.\nLemma 3. Let \u03b5,\u03b4 \u2208 (0,1). Suppose that the concept class C is CN learnable, and there exists an identified \u03be-distinguishing event E for the two target distributions P0 and P1. Then there exists an algorithm L1 such that when given \u03b5,\u03b4,\u03be and E as inputs, it will halt in time bounded by poly(1/\u03b5,1/\u03b4,1/\u03be,n), and with probability at least 1\u2212 \u03b4, output a list of hypotheses that contains some h such that err(h) \u2264 \u03b5.\nIn the next two sections, we will use the algorithm in Lemma 3 as a subroutine for learning the target concept c in the PwD framework."}, {"heading": "4 Forward Reduction", "text": "Now we will give our forward algorithmic reduction: first use a CN learner to approximate the target concept c sufficiently well to separate the distributions P0 and P1, then learn each distribution using a distribution learner.4 We will rely on the result in Section 3 to learn c with a CCCN learner, but we do not assume the learner has a priori identified a distinguishing event. Instead, we will assume that the distribution class P admits a parametric class of distinguishing events of polynomial size, which allows us to distinguish any two distributions in P with large KL-divergence.\n4We use the term \u201cforward\u201d to indicate that the reduction decomposes the learning process into the steps suggested by the generative model depicted in Figure 1.\nAssumption 2 (Parametric Class of Distinguishing Events). There exists a parametric class of events E(\u00b7) for the distribution class P such that for any \u03b3 > 0 and for any two probability distributions P and Q in P with KL(P ||Q) \u2265 \u03b3 , the class of events E(\u03b3 ) contains a \u03be-distinguishing event E for P and Q, where \u03be \u2265 1/ poly(k,1/\u03b3 ). Furthermore, E(\u03b3 ) can be computed in time poly(k,1/\u03b3 ) and the cardinality |E(\u03b3 )| \u2264 poly(k,1/\u03b3 ).\nTo illustrate the intuition of how to construct such class of distinguishing events, we will give a simple example here. In the appendix, we will extend the construction to work for the class of spherical Gaussian distributions and product distributions over discrete domains.\nSimple Example Consider the outcome space Y = {0,1}k and the class of full-support product distributions P over Y . Let P,Q \u2208 P be two distribution such that KL(P ||Q) \u2265 \u03b3 . Under the boundedness condition in Assumption 1, it can be shown that there exists some coordinate l such that |P l \u2212Ql | \u2265 1/poly(k,1/\u03b3 ), where P l = Pry\u223cP [yl = 1] and Ql = Pry\u223cQ[yl = 1]. Therefore, for each coordinate l, the event that the coordinate yj is 1 is a candidate distinguishing event, so the class of events is simply E = {1[yl = 1] | l \u2208 [k]}.\nHere is our main result in the forward reduction.\nTheorem 3 ((Formal version of Theorem 1)). Under the Assumption 2 that P admits a parametric class of events E , the joint class (C,P ) is PwD-learnable as long as the concept class C is CN learnable, and the distribution class P is efficiently learnable.\nWe will present our reduction in three key steps.\n1. First, as a simple extension to Section 3, we can learn a hypothesis h with sufficiently small error assuming the class of events E contains a distinguishing event for the distributions P0 and P1.\n2. Suppose we have learned an accurate hypothesis h from the first step, we can then use h to separate outcomes y drawn from P0 and P1, and apply the distribution learner to learn accurate distributions P\u03020 and P\u03021. This creates an accurate hypothesis model T\u0302 = (h, P\u03020, P\u03021).\n3. Finally, we need to handle the case where the distributions P0 and P1 are arbitrarily close, and there is no distinguishing event for us to learn the concept c. We will show in this case it is not necessary to learn the target concept, and we can directly learn the distributions without relying on an accurate hypothesis h.\nThe main technical challenge lies in the second and third steps, where we will apply the distribution learner (for single distributions in P ) on samples drawn from a mixture of P0 and P1. To tackle this issue, we will prove a robustness result for any distribution learner \u2014 as long as the input distribution is sufficiently close to the target distribution, the output distribution by the learner remains accurate. 5"}, {"heading": "4.1 CN Learning with a Class of Events", "text": "As a first step in our reduction, we will simply extend Lemma 3: for each event E in the event class E , run the CCCN learner using E as a candidate distinguishing event. If the two target\n5Our result actually extends to any PAC learning algorithm, and we omit the simple details.\ndistributions P0 and P1 have large KL divergence, then one of the output hypotheses h will be accurate with respect to c:\nLemma 4. Let \u03b5,\u03b4 \u2208 (0,1) and \u03b3 > 0. Suppose that the class C is CN learnable, the class P admits a parametric class of events E (as in Assumption 2). If the two distributions P0 and P1 satisfy max{KL(P0||P1),KL(P1||P0)} \u2265 \u03b3 , then there exists an algorithm L2 that given sample access to Gen and \u03b5,\u03b4,\u03b3 as inputs, runs in time poly(1/\u03b5,1/\u03b4,1/\u03b3,n), and with probability at least 1\u2212 \u03b4 outputs a list of hypotheses H that contains a hypothesis h with error err(h) \u2264 \u03b5."}, {"heading": "4.2 Robustness of Distribution Learner", "text": "Before we proceed to the next two steps of the reduction, we will briefly digress to give a useful robustness result showing that the class P remains efficiently learnable even if the input distribution is slightly perturbed. Our result relies on the well-known Le Cam\u2019s method, which is a powerful tool for giving lower bounds in hypothesis testing. We state the following version for our purpose.6\nLemma 5. [Le Cam\u2019s method (see e.g. Le Cam (1986); Yu (1997))] Let Q0 and Q1 be two probability distributions over Y , and let A : Ym \u2192 {0,1} be a mapping from m observations in Y to either 0 or 1. Then\nPr A,Ym\u223cQm0 [A(Ym) , 0] + Pr A,Ym\u223cQm1 [A(Ym) , 1] \u2265 1\u2212 \u221a mKL(Q0||Q1)/2\nwhere Ym \u223cQm\u03b8 denotes an i.i.d. sample of size m drawn from the distribution Q\u03b8 . The lemma above shows that any statistical procedure that determines whether the underlying distribution is Q0 or Q1 based on m independent observations must have high error if the two distributions are too close. In particular, if their KL divergence satisfies KL(Q0||Q1) \u2264 1/m, then the procedure has at least constant error probability under measureQ0 or Q1. Now let\u2019s construct such a procedure A using any distribution learner L for the class P . Suppose the learner is \u03b5accurate with high probability when given sample of sizem, and the distributionQ0 is in the class P . Consider the following procedure A:\n\u2022 Run the learning algorithm L on sample S of size m. If the algorithm fails to output a hypothesis distribution, output 1. Otherwise, let Q\u0302 be the output distribution by L.\n\u2022 If KL(Q0||Q\u0302) \u2264 \u03b5, output 0; otherwise output 1. Note that if the sample S is drawn from the distribution Q0, then A will correctly output 0 with high probability based on the accuracy guarantee of L. This means the procedure has to err when S is drawn from the slightly perturbed distributionQ1, and so the learner will with constant probability output an accurate distribution Q\u0302 such that KL(Q0||Q\u0302) \u2264 \u03b5. More formally: Lemma 6. Let \u03b5 > 0, \u03b4 \u2208 (0,1/2) and m \u2208 N. Suppose there exists a distribution learner L such that for any unknown target distribution P \u2208 P , when L inputs m random draws from P , it with probability at least 1\u2212 \u03b4 outputs a distribution P\u0302 such that KL(P ||P\u0302) \u2264 \u03b5. Then for any Q0 \u2208 P and any distribution Q1 over the same range Y , if the learner L inputs a sample of size m drawn independently from Q1, it will with probability at least 1 \u2212 \u03b4\u2032 output a distribution Q\u0302 such that KL(Q0||Q\u0302) \u2264 \u03b5, where \u03b4\u2032 = \u03b4 + \u221a\nmKL(Q0||Q1)/2. 6In the usual statement of Le Cam\u2019s method, the right-hand side of the inequality is in fact 1\u2212 \u2016Qm0 \u2212Qm1 \u2016tv , where\n\u2016 \u00b7 \u2016tv denotes total variation distance. We obtain the current bound by a simple application of Pinsker inequality.\nProof. Consider the procedure A constructed above that uses the learner L as a subroutine. By the guarantee of the algorithm, we know that PrL,Ym\u223cQm0 [KL(Q0||Q\u0302) \u2264 \u03b5] \u2265 1\u2212 \u03b4. This means\nPr A,Ym\u223cQm0\n[A(Ym) ,Q0] \u2264 \u03b4.\nBy Lemma 5, we have\nPr A,Ym\u223cQm1\n[A(Ym) ,Q1] \u2265 1\u2212 \u221a m\n2 KL(Q0||Q1)\u2212 \u03b4.\nThis in turn implies that with probability at least (1\u2212\u03b4\u2212 \u221a m 2KL(Q0||Q1)) over the draws of Ym \u223cQm1 and the internal randomness of L, the output distribution Q\u0302 satisfies KL(P ||Q\u0302) \u2264 \u03b5.\nTherefore, if the KL divergence between the target distribution and the input distribution is smaller than inverse of the (polynomial) sample size, the output distribution by the learner is accurate with constant probability. By using a standard amplification technique, we can guarantee the accuracy with high probability:\nLemma 7. Suppose that the distribution class P is PAC learnable. There exist an algorithm L2 and a polynomial mP (\u00b7, \u00b7, \u00b7) such that that for any target unknown distribution P, when given any \u03b5 > 0 and 0 < \u03b4 \u2264 1/4 as inputs and sample access from a distributionQ such thatKL(P ||Q) \u2264 1/(2mP (1/\u03b5,1/\u03b4,k)), runs in time poly(1/\u03b5,1/\u03b4,k) and outputs a list of distributions P \u2032 that with probability at least 1 \u2212 \u03b4 contains some P\u0302 \u2208 P \u2032 with KL(P ||P\u0302) \u2264 \u03b5.\nAs a consequence, even when input sample distribution is slightly \u201cpolluted\u201d, we can still learn the target distribution accurately with a small blow-up in the computational and sample complexity."}, {"heading": "4.3 Learning the Distributions with an Accurate Hypothesis", "text": "Now we will return to the second step of our reduction: use an accurate hypothesis h and distribution learner for P to learn the two distributions P0 and P1. For any observation (x,y) drawn from the example oracle Gen, we can use the hypothesis h to determine whether the outcome y is drawn from P0 or P1, which allows us to create independent samples from both distributions. However, because of the small error of h with respect to the target concept c, the input sample is in fact drawn from a mixture between P0 and P1. To remedy this problem, we will choose a sufficiently small error rate for hypothesis h (but still an inverse polynomial in the learning parameters), which guarantees that the mixture is close enough to either one of single target distributions. We can then apply the result in Lemma 7 to learn each distribution, which together gives us a hypothesis model (h, P\u03020, P\u03021).\nLemma 8. Suppose that the distribution class P is efficiently learnable. Let \u03b5 > 0,0 < \u03b4 \u2264 1 and h \u2208 C be an hypothesis. Then there exists an algorithm L3 and a polynomial r(\u00b7, \u00b7, \u00b7) such that when given \u03b5, \u03b4 and h as inputs, L3 runs in time bounded by poly(1/\u03b5,1/\u03b4,k), and outputs a list of probability models T such that with probability at least 1 \u2212 \u03b4 there exists some T\u0302 \u2208 T such that err(T\u0302 ) \u2264 \u03b5, as long as the hypothesis h satisfies err(h) \u2264 1/r(1/\u03b5,1/\u03b4,k)."}, {"heading": "4.4 Directly Applying the Distribution Learner", "text": "In the last step of our forward reduction, we will consider the case where the two target distributions P0 and P1 are too close to admit a distinguishing event, and so we will not be able to learn the target concept c as in the first step. We show that in this case learning c is not necessary for obtaining an accurate probability model \u2014 we can simply run the robust distribution learner developed in Lemma 7 over the samples drawn from the mixture to learn single distribution.\nWe will first define the following notion of healthy mixture, which captures the mixture distributions with non-trivial weights on two sufficiently different components. This will also facilitate our discussion in the reverse reduction.\nDefinition 3 (Healthy Mixture). Let Q be mixture of two distributions Q0 and Q1 from the class P , and let w0 and w1 be the weights on the two components respectively. Then Q is an \u03b7-healthy mixture if both min{w0,w1} \u2265 \u03b7 and max{KL(P0||P1),KL(P1||P0)} \u2265 \u03b7 hold. If one of the two conditions does not hold, we will call Q an \u03b7-unhealthy mixture.\nWe now show that whenever the mixture distribution P is unhealthy, we can use the robust learner in Lemma 7 to directly learn a distribution P\u0302 for our prediction purpose (simply always predict with P\u0302 regardless of the context x). Note that this not only includes the case where P0 and P1 are arbitrarily close, but also the one where the weight on one component is close to 0, which will be useful in Section 5.\nLemma 9. Suppose that the distribution class P is PAC learnable. Let P be the unconditional mixture distribution over the outcomes Y under the distribution Gen. Let \u03b5 > 0 and \u03b4 \u2208 (0,1). Then there exists an algorithm L4 and a polynomial g(\u00b7, \u00b7, \u00b7) such that when L4 is given sample access to Gen and \u03b5,\u03b4 as inputs, it runs in time bounded by poly(1/\u03b5,1/\u03b4,k) and it will with probability at least 1 \u2212 \u03b4, output a list of distributions P \u2032 that contains P\u0302 with Ex\u223cD [ KL(Pc(x)||P\u0302) ]\n\u2264 \u03b5, as long as P is an \u03b7-unhealthy mixture for some \u03b7 \u2264 1/g(k,1/\u03b5,1/\u03b4).\nWe will now combine the all the tools to provide a proof sketch for Theorem 3 (see the appendix for details).\nProof Sketch for Theorem 3. Our algorithm for PwD learning the joint class (C,P ) is roughly the following. First, we will make use of Assumption 2 and obtain a set of candidate distinguishing events for the target distributions P0 and P1. We will run the CCCN learner to learn c using each candidate event E to generate noisy labels. This generates a list of hypotheses. We will use the hypotheses h to separate the two distributions P0 and P1 and apply the algorithm in Lemma 8 to learn each distribution individually. This will give polynomially many hypothesis models T\u0302 = (h, P\u03020, P\u03021). By Lemma 4 and Lemma 8, we know at least one of the models is accurate when P0 and P1 are sufficiently different.\nTo cover the case where the two distributions are too close, we will use the algorithm in Lemma 9 to learn a list of distributions over Y . In particular, the model (h\u2032 , P\u0302 , P\u0302) is accurate for at least one of the output distribution P\u0302.\nTogether, the two procedures above will give a list of polynomially many hypothesis models, at least one of which is guaranteed to be accurate. We will use the standard maximum likehood method to output the model that minimizes empirical log-loss, and with high probability, this will be an accurate model.7\n7See the appendix for the details and analysis of the maximum likelihood method in the PwD model.\nWe previously gave examples (such as product distributions and special cases of multivariate Gaussians) that admit small classes of distinguishing events, and to which Theorem 3 can be applied. There are other important cases \u2014 such as general multivariate Gaussians \u2014 for which we do not know such classes.8 However, we now describe a different, \u201creverse\u201d reduction that instead assumes learnability of mixtures, and thus is applicable to more general Gaussians via known mixture learning algorithms (Dasgupta, 1999; Arora and Kannan, 2001; Feldman et al., 2006)."}, {"heading": "5 Reverse Reduction", "text": "In our reverse reduction, our strategy is to first learn the two distributions P0 and P1 sufficiently well, and then construct a specialized distinguishing event to learn the target concept c with a CCCN learner.9 We will make a stronger learnability assumption on the distribution class P \u2014 we assume a parametrically correct learner for any healthy mixture of two distributions in P .\nAssumption 3 (Parametrically Correct Mixture Learning). There exists a mixture learner LM and a polynomial \u03c1 such that for any \u03b5 > 0,0 < \u03b4 \u2264 1, and for any Z that is an \u03b7-healthy mixture of two distributions Y0 and Y1 from P , the following holds: if LM is given sample access to Z and \u03b5,\u03b4 > 0 as inputs, LM runs in time poly(k,1/\u03b5,1/\u03b4) and with probability at least 1 \u2212 \u03b4, outputs a mixture Z\u0302 of distributions Y\u03020 and Y\u03021 such that max{KL(Y0||Y\u03020),KL(Y1||Y\u03021)} \u2264 \u03b5.\nWe remark that the assumption of parametric correctness is a mild condition, and is satisfied by almost all mixture learning algorithms in the literature (see e.g. Dasgupta (1999); Feldman et al. (2006, 2008); Hsu and Kakade (2013)). Also note that we only require this condition when the healthy mixture condition in Definition 3 is met. If the two either the two distributions Y0 and Y1 are arbitrarily close or the mixture is extremely unbalanced, we are not supposed to learn both components correctly.\nTheorem 4 (Formal Version of Theorem 2). Suppose the class C is CN learnable, the distribution class P is efficiently learnable and satisfies the parametrically correct mixture learning assumption (Assumption 3). Then the joint class (C,P ) is PwD-learnable.\nWith the tools we develop for the forward reduction, the proof for reverse reduction is straightforward. There are essentially two cases we need to deal with. In the first case where the mixture distribution over Y is healthy, we can use the parametrically correct mixture learner to learn the two target distributions, we can then use the accurate approximations P\u03020 and P\u03021 to find a distinguishing event for P0 and P1, which allows us to learn the concept c with a CCCN learner. In the case where the mixture distribution is unhealthy and we cannot learn the components accurately, we can again appeal to the robustness result we show using Le Cam\u2019s method \u2014 we can directly apply the learner for single distributions and learn P0 or P1.\n8We conjecture that Gaussians do indeed have a small set of distinguishing events, but have not been able to prove it.\n9We use the term \u201creverse\u201d to indicate that the reduction decomposes the learning process into the steps suggested by the inverted generative model depicted in Figure 2."}, {"heading": "5.1 CN Learning with a Mixture Learner", "text": "Given any two distributions P , Q over Y and a parameter \u03c4, consider the event (or subset)\nE(P,Q,\u03c4) = {y \u2208 Y | P(y) \u2265 2\u03c4Q(y)}\nWe will first show that such subset is a distinguishing event for the input distributions P and Q as long as the distributions P and Q are sufficiently different.\nLemma 10. Fix any \u03b3 \u2208 (0,1]. Suppose thatKL(P ||Q) \u2265 \u03b3 , then E(P,Q,\u03b3/2) is a (\u03b32/(8M))-distinguishing event for the distributions P and Q.\nNext, we show that even if we only have access to the approximate distributions P\u0302 and Q\u0302, we can still identify a distinguishing event for P and Q, as long as the approximations are accurate.\nLemma 11. Suppose that the distributions P, P\u0302,Q,Q\u0302 over Y satisfy that KL(P ||P\u0302) \u2264 \u03b1, KL(Q||Q\u0302) \u2264 \u03b1, and KL(P ||Q) \u2265 \u03b3 for some \u03b1,\u03b3 \u2208 (0,1]. Then the event E(P\u0302, Q\u0302, (\u03b32/(8M)\u2212 \u221a 2\u03b1)2) is a \u03be-distinguishing\nevent with \u03be \u2265 1/ poly(1/\u03b3,1/\u03b1,k) as long as \u03b3 > 8M( \u221a 2\u03b1 + (8M2\u03b1)1/8).\nGiven these structural lemmas, we now know a way to construct a distinguishing event based on approximations to the target distributions P0 and P1. We can then create a and use the algorithm in Lemma 3 to learn the concept c, and in turn compute a list of hypothesis models, one of which is guaranteed to be accurate when the mixture distribution is healthy.\nLemma 12. Suppose the class P satisfies the parametric mixture learning assumption (Assumption 3), the class C is CN learnable, and mixture distribution over Y is \u03b3-healthy for some \u03b3 > 0. Then there exists an algorithm L that given \u03b5,\u03b4 and \u03b3 as inputs and sample access from Gen, halts in time bounded by poly(1/\u03b5,1/\u03b4,1/\u03b3,n,k), and with probability at least 1\u2212\u03b4, outputs a list of probability models T that contains some T\u0302 with err(T\u0302 ) \u2264 \u03b5.\nFinally, to wrap up and prove Theorem 4, we also need to handle the case where healthy mixture condition in Definition 3 does not hold. We will again appeal to the robust distribution learner in Lemma 9 to learn the distributions directly, and construct hypothesis models based on the output distributions. To guarantee that the output hypothesis model is accurate, we will again use the maximum likelihood method to select the model with the minimum empirical log-loss (formal proof deferred to the appendix)."}, {"heading": "6 Future Work", "text": "Despite the generality of our results and reductions, there remain some appealing directions for further research. These include allowing the conditioning event to be richer than a simple binary function c(x), for instance multi- or even real-valued. This might first entail the development of theories for noisy learning in such models, which is well-understood primarily in the binary setting.\nWe also note that our study has suggested an interesting problem in pure probability theory, namely whether general Gaussians permit a small class of distinguishing events.\nAcknowledgments We thank We thank Akshay Krishnamurthy and Shahin Jabbari for helpful discussions."}, {"heading": "A Missing Details and Proofs", "text": "A.1 Missing Details in Section 2\nDefinition 4 (CN Learnability (Angluin and Laird, 1987)). Let C be a concept class over X . We say that C is efficiently learnable with noise (CN learnable) if there exists a learning algorithm L such that for any c \u2208 C, any distribution D over X , any noise rate 0 \u2264 \u03b7 < 1/2, and for any 0 < \u03b5 \u2264 1 and 0 < \u03b4 \u2264 1, the following holds: if L is given inputs \u03b7b (where 1/2 > \u03b7b \u2265 \u03b7), \u03b5,\u03b4,n, and is given access to EX\n\u03b7 CN(c,D), then L will halt in time bounded by poly(1/(1\u2212 2\u03b7b),1/\u03b5,1/\u03b4,n) and output a hypothesis\nh \u2208 C that with probability at least 1\u2212 \u03b4 satisfies err(h) \u2264 \u03b5.\nLemma 13 (CN = CCCN (Ralaivola et al., 2006)). Suppose that the concept class C is CN learnable. Then there exists an algorithm LC and a polynomial mC(\u00b7, \u00b7, \u00b7, \u00b7) such that for every target concept c \u2208 C, any \u03b5,\u03b4 \u2208 (0,1], for any noise rates \u03b70,\u03b71 \u2264 \u03b7b < 1/2, if L is given inputs \u03b5,\u03b4,\u03b7b and access to EX\n\u03b7 CCCN(c,D), then L will halt in time bounded by mC(1/(1 \u2212 2\u03b7b),1/\u03b5,1/\u03b4,n), and output with probability at least 1 \u2212 \u03b4 a hypothesis h with error err(h) \u2264 \u03b5. We will say that LC is an (efficient) CCCN learner for C with sample complexity mC .\nDefinition 5 (Evaluator (Kearns et al., 1994)). Let P be a class of distributions over the outcome space Y . We say that P has a efficient evaluator if there exists a polynomial p such that for any n \u2265 1, and for any distribution P \u2208 P , there exists an algorithm EP with runtime bounded by poly(k) that given an input y \u2208 Y outputs the probability (density) assigned to y by P. Thus, if y \u2208 Y , then EP (y) is the weight of y under P . We call EP an evaluator for P .\nA.2 Missing Proofs in Section 3\nClaim 1. The values of a0 and b0 satisfy a0,b0 \u2208 [0,1].\nProof. Without loss of generality, let\u2019s assume that q \u2265 p + \u03be. Since p + q \u2208 [0,2], we know that a0 \u2264 1/2 and we can write\na0 = 1/2+ \u03be(p + q \u2212 2) 4(q \u2212 p) \u2265 1/2\u2212\n\u03be\n2(q \u2212 p) \u2265 1/2\u2212 1/2 \u2265 0\nSimilarly, we know that b0 \u2265 1/2 and we can write\nb0 = 1/2+ \u03be(p + q) 4(q \u2212 p) \u2264 1/2+ \u03be/2 \u03be = 1\nThis proves our claim.\nLemma 1. Given a fixed \u03be-distinguishing event E, the class-conditional noise rates of Lab are\n\u03b71 = Pr[\u2113 = 0 | c(x) = 1] = qa0 + (1\u2212 q)b0 and \u03b70 = Pr[\u2113 = 1 | c(x) = 0] = pa1 + (1\u2212 p)b1.\nMoreover, given any input estimates (p\u0302, q\u0302) for (p,q), the parameters a0,a1,b0 and b1 satisfy:\nq\u0302a0 + (1\u2212 q\u0302)b0 = p\u0302a1 + (1\u2212 p\u0302)b1 \u2264 1/2\u2212 \u03be/4.\nProof. We can derive the probabilities as follows\nPr[\u2113 = 0 | c(x) = 1] = Pr[(\u2113 = 0)\u2227 (y \u2208 E) | c(x) = 1] +Pr[(\u2113 = 0)\u2227 (y < E) | c(x) = 1] = Pr\nGen [y \u2208 E | c(x) = 1] Pr Lab [\u2113 = 0 | (y \u2208 E)\u2227 (c(x) = 1)]\n+ Pr Gen [y < E | c(x) = 1] Pr Lab [\u2113 = 0 | (y < E)\u2227 (c(x) = 1)]\n= Pr Gen [y \u2208 E | c(x) = 1]a0 + Pr Gen [y < E | c(x) = 1]b0 = qa0 + (1\u2212 q)b0\nSimilarly, we can also show that Pr[\u2113 = 1 | c(x) = 0] = pa1 + (1 \u2212 p)b1. For the second part of the statement, we can show\nq\u0302a0 + (1\u2212 q\u0302)b0 = q\u0302 2 + \u03be(p\u0302 + q\u0302 \u2212 2)q\u0302 4(q\u0302 \u2212 p\u0302) + (1\u2212 q\u0302) 2 + \u03be(p\u0302 + q\u0302)(1\u2212 q\u0302) 4(q\u0302 \u2212 p\u0302) = 1/2\u2212 \u03be/4\np\u0302a1 + (1\u2212 p\u0302)b1 = p\u0302 2 \u2212 \u03be(p\u0302 + q\u0302 \u2212 2)p\u0302 4(q\u0302 \u2212 p\u0302) + (1\u2212 p\u0302) 2 \u2212 \u03be(p\u0302 + q\u0302)(1\u2212 p\u0302) 4(q\u0302 \u2212 p\u0302) = 1/2\u2212 \u03be/4\nwhich recovers our claim.\nLemma 2. Fix any \u2206 \u2208 [0,1]. Suppose that the estimates p\u0302 and q\u0302 satisfy |p\u2212 p\u0302| \u2264 \u2206 and |q\u2212 q\u0302| \u2264 \u2206, then the class-conditional noise rates \u03b70 and \u03b71 for Lab(p\u0302, q\u0302,\u03be) are upper bounded by 1/2\u2212 \u03be/4+\u2206. Proof. Since a0,a1,b0,b1 \u2208 [0,1], and by our assumption on the accuracy of p\u0302 and q\u0302, we have\n\u03b71 \u2212 (q\u0302a0 + (1\u2212 q\u0302)b0) = (qa0 + (1\u2212 q)b0)\u2212 (q\u0302a0 + (1\u2212 q\u0302)b0) = (q \u2212 q\u0302)(a0 \u2212 b0) \u2264 \u2206 \u03b70 \u2212 (q\u0302a1 + (1\u2212 q\u0302)b1) = (qa1 + (1\u2212 q)b1)\u2212 (q\u0302a1 + (1\u2212 q\u0302)b1) = (q \u2212 q\u0302)(a1 \u2212 b1) \u2264 \u2206\nThe result of Lemma 1 tells us that\nq\u0302a0 + (1\u2212 q\u0302)b0 = p\u0302a1 + (1\u2212 p\u0302)b1 \u2264 1/2\u2212 \u03be/4 Therefore, we must also have \u03b70,\u03b71 \u2264 1/2\u2212 \u03be/4+\u2206.\nLemma 3. Let \u03b5,\u03b4 \u2208 (0,1). Suppose that the concept class C is CN learnable, and there exists an identified \u03be-distinguishing event E for the two target distributions P0 and P1. Then there exists an algorithm L1 such that when given \u03b5,\u03b4,\u03be and E as inputs, it will halt in time bounded by poly(1/\u03b5,1/\u03b4,1/\u03be,n), and with probability at least 1\u2212 \u03b4, output a list of hypotheses that contains some h such that err(h) \u2264 \u03b5. Proof. Since the concept class C is CN learnable, by the result of Ralaivola et al. (2006) we know there exists an efficient algorithm A that when given access to some example oracle EX\u03b7CCCN with \u03b70,\u03b71 \u2264 1/2\u2212\u03be/8, outputs a hypothesis h with error bounded \u03b5 with probability at least 1\u2212\u03b4, halts in time poly(1/\u03b5,1/\u03b4,1/\u03be,n).\nNow let parameter \u2206 = \u03be/8, and consider the algorithm: for each pair of values (p\u0302, q\u0302) = (i\u2206, j\u2206) such that i, j \u2208 [\u23081/\u2206\u2309] and i , j, use the Lab(p\u0302, q\u0302,\u03be) to generate labeled examples, and run the algorithmA with sample access to Lab; if the algorithm halts in time p and outputs an hypothesis h\u0302, store the hypothesis in a the list H. In the end, output the hypothesis list.\nBy Lemma 2, we know for some guessed values of p\u2032 and q\u2032, the algorithm Lab(p\u2032 ,q\u2032 ,\u03be) is an CCCN oracle with noise rates \u03b70,\u03b71 \u2264 1/2\u2212 \u03be/8. Then by the guarantee of the learning algorithm, we know with probability at least 1\u2212 \u03b4, the algorithm will output an \u03b5-accurate hypothesis under these guesses.\nA.3 Missing Proofs in Section 4\nLemma 4. Let \u03b5,\u03b4 \u2208 (0,1) and \u03b3 > 0. Suppose that the class C is CN learnable, the class P admits a parametric class of events E (as in Assumption 2). If the two distributions P0 and P1 satisfy max{KL(P0||P1),KL(P1||P0)} \u2265 \u03b3 , then there exists an algorithm L2 that given sample access to Gen and \u03b5,\u03b4,\u03b3 as inputs, runs in time poly(1/\u03b5,1/\u03b4,1/\u03b3,n), and with probability at least 1\u2212 \u03b4 outputs a list of hypotheses H that contains a hypothesis h with error err(h) \u2264 \u03b5. Proof. Consider the following algorithm. We will first use the oracle E with input parameter \u03b3 to obtain a class of events E(\u03b3 ) that contains a \u03be-distinguishing event E\u2217 with \u03be \u2265 poly(\u03b3,1/n). Then for each event E \u2208 E(\u03b3 ), we will run the algorithm A in Lemma 3 with accuracy parameters \u03b5, \u03b4, separation parameter \u03be, and E as an hypothetical distinguishing event as input. For each event, the instantiation of algorithm A will halt in polynomial time. Furthermore, when the input event is E\u2217 it will with probability at least 1\u2212\u03b4 outputs a list of hypotheses H that contains a hypothesis h such that err(h) \u2264 \u03b5 by the guarantee of Lemma 3.\nLemma 7. Suppose that the distribution class P is PAC learnable. There exist an algorithm L2 and a polynomial mP (\u00b7, \u00b7, \u00b7) such that that for any target unknown distribution P, when given any \u03b5 > 0 and 0 < \u03b4 \u2264 1/4 as inputs and sample access from a distributionQ such thatKL(P ||Q) \u2264 1/(2mP (1/\u03b5,1/\u03b4,k)), runs in time poly(1/\u03b5,1/\u03b4,k) and outputs a list of distributions P \u2032 that with probability at least 1 \u2212 \u03b4 contains some P\u0302 \u2208 P \u2032 with KL(P ||P\u0302) \u2264 \u03b5. Proof. Let L be a distribution learner that given a independent sample of size m drawn from the unknown target distribution P, runs in time bounded by poly(1/\u03b5,1/\u03b4,n) with probability at least 1\u2212\u03b4, outputs a distribution P \u2032 such that KL(P ||P \u2032) \u2264 \u03b5. By Lemma 6, we know that with probability at least (1/2\u2212 \u03b4) \u2265 1/4, the algorithm can also output a distribution P \u2032\u2032 such that KL(P ||P \u2032\u2032) \u2264 \u03b5 if the algorithm is given a sample of size m drawn from the distribution Q.\nLet r = log3/4(1/\u03b4). Now we will run the algorithm r times on r independent samples, each of size m. Let P \u2032 be the list of output hypothesis distributions in these runs. We know that with probability at least 1\u2212(1\u22121/4)r = 1\u2212\u03b4, there exists a distribution P\u0302 \u2208 P \u2032 such that KL(P ||P\u0302) \u2264 \u03b5.\nThe following is a technical lemma that allows us to bound the KL divergence between between a mixture distribution and one of its component.\nLemma 14. Let P and Q be two distributions over Y and R be a mixture of P and Q with weights wp and wq respectively. Then we have KL(P ||R) \u2264 wqKL(P ||Q). Proof. Let wp and wq be the weights associated with P and Q respectively in the mixture R.\nKL(P ||R) = \u222b\ny P(y) log\n(\nP(y)\nR(y)\n)\ndy\n=\n\u222b\ny (wpP(y) +wqP(y)) log\n(\nwpP(y) +wqP(y)\nwpP(y) +wqQ(y)\n)\ndy\n(by the log-sum inequality) \u2264 \u222b\ny\n(\nwpP(y) log\n(\nwpP(y)\nwpP(y)\n))\ndy +\n\u222b\ny\n(\nwqP(y) log\n(\nwqP(y)\nwqQ(y)\n))\ndy\n=wqKL(P ||Q)\nwhich proves our claim.\nLemma 8. Suppose that the distribution class P is efficiently learnable. Let \u03b5 > 0,0 < \u03b4 \u2264 1 and h \u2208 C be an hypothesis. Then there exists an algorithm L3 and a polynomial r(\u00b7, \u00b7, \u00b7) such that when given \u03b5, \u03b4 and h as inputs, L3 runs in time bounded by poly(1/\u03b5,1/\u03b4,k), and outputs a list of probability models T such that with probability at least 1 \u2212 \u03b4 there exists some T\u0302 \u2208 T such that err(T\u0302 ) \u2264 \u03b5, as long as the hypothesis h satisfies err(h) \u2264 1/r(1/\u03b5,1/\u03b4,k).\nProof. Our algorithm will first call the oracle Gen for N = Cm2(2/\u03b5,4/\u03b4,k) ( M2\n\u03b52 log(1/\u03b4)\n)\ntimes,\nwhere C is some constant (to be determined in the following analysis) and m2 is the polynomial upper bound for the runtime of the algorithm defined in Lemma 7. Then the algorithm will separate these data points (x,y)\u2019s into two samples, one for h(x) = 0 and the other for h(x) = 1. For each sample corresponding to h(x) = j, if the sample size is at least m = m2(2/\u03b5,4/\u03b4), the run the learning algorithm L2 in Lemma 7 to the sample with target accuracy \u03b5/2 and failure probability \u03b4/4 and obtain a polynomial list of distributions Pj ; otherwise, simply output a singleton list containing any arbitrary distribution in P .\nLet j \u2208 {0,1} and \u03c0j = Prx\u223cD[h(x) = j]. Let us first consider the case where \u03c0j \u2265 \u03b5/(2M). In order to invoke Lemma 14, we will upper bound the quantity wjKL(Pj ||P\u0302j ), where wj = Prx\u223cD[c(x) = j]. We know that for some large enough constantC, we can guarantee with probability at least 1\u2212\u03b4/4, we will collect at least m observations with h(x) = j. Let \u03b5h = err(h), note that when we instantiate the learner L2 on the sample with h(x) = j, the input distribution Ij is a (\u03b5h,1\u2212 \u03b5h)-mixture of the distributions P1\u2212j and Pj . Then there exists a polynomial r such that if err(h) \u2264 1/r(1/\u03b5,1/\u03b4,k), we can have the following based on Lemma 14\nKL(Pj ||Ij ) \u2264 \u03b5hKL(P ||Q) \u2264 1/mP (2/\u03b5,4/\u03b4,k)\nwheremP is the polynomial defined in Lemma 7. This means, the learning algorithm L2 will with probability at least 1\u2212\u03b4/4, returns some distribution P\u0302j in the output list such that KL(Pj ||P\u0302j ) \u2264 \u03b5/2, which implies that wjKL(Pj ||P\u0302j ) \u2264 \u03b5/2.\nSuppose that \u03c0j < \u03b5/(2M), then we know that no matter what the distribution P\u0302j is, we have wjKL(Pj ||P\u0302j ) \u2264 \u03b52M M = \u03b5/2 by Assumption 1. Finally, our algorithm will output a list of probability models T = {(h, P\u03020, P\u03021) | P\u03020 \u2208 P0, P\u03021 \u2208 P1}, such that with probability at least 1\u2212 \u03b4, there exists some model T\u0302 = (h, P\u03020, P\u03021) \u2208 T such that\nerr(T ) = w0KL(P0||P\u03020) +w1KL(P1||P\u03021) \u2264 \u03b5,\nwhich recovers our claim.\nLemma 9. Suppose that the distribution class P is PAC learnable. Let P be the unconditional mixture distribution over the outcomes Y under the distribution Gen. Let \u03b5 > 0 and \u03b4 \u2208 (0,1). Then there exists an algorithm L4 and a polynomial g(\u00b7, \u00b7, \u00b7) such that when L4 is given sample access to Gen and \u03b5,\u03b4 as inputs, it runs in time bounded by poly(1/\u03b5,1/\u03b4,k) and it will with probability at least 1 \u2212 \u03b4, output a list of distributions P \u2032 that contains P\u0302 with Ex\u223cD [ KL(Pc(x)||P\u0302) ]\n\u2264 \u03b5, as long as P is an \u03b7-unhealthy mixture for some \u03b7 \u2264 1/g(k,1/\u03b5,1/\u03b4). Proof. We first consider the case where the weight on one component is small, and without loss of generality assume that w1 \u2264 \u03b5/(4Mm). By Lemma 14 and Assumption 1, we know that\nKL(P0||R) \u2264 w1KL(P0||P1) \u2264 \u03b5\n2Mm M \u2264 1/(2m).\nBy instantiating the algorithm in Lemma 7 with parameters (\u03b5/2,\u03b4), we know with probability 1\u2212\u03b4, there exists a hypothesis distribution P\u0302 in the output list such that KL(P0||P\u0302) \u2264 \u03b5/2. Again by our Assumption 1, we know KL(P1||P\u0302) \u2264M , so it follows that\nE x\u223cD\n[ KL(Pc(x)||P\u0302) ] = w0KL(P0||P\u0302) +w1KL(P1||P\u0302) \u2264 \u03b5 2 + \u03b5KL(P1||P\u0302) 2Mm \u2264 \u03b5.\nNext suppose that we are in the second case where KL(P0||P1),KL(P1||P0) \u2264 1/(2m). We know from Lemma 14 that\nKL(P0||R) \u2264 w1KL(P0||P1) \u2264 1/(2m) and, KL(P1||R) \u2264 w0KL(P1||P0) \u2264 1/(2m)\nWe will also apply the algorithm in Lemma 7 which guarantees with probability at least 1\u2212 \u03b4 that there exists a hypothesis distribution P\u0302 in the output list P \u2032 such that KL(P0||P\u0302),KL(P1||P\u0302) \u2264 \u03b5/2, which implies that\nE x\u223cD\n[ KL(Pc(x)||P\u0302) ] = w0KL(P0||P\u0302) +w1KL(P1||P\u0302) \u2264 \u03b5.\nTherefore, there exists a distribution P\u0302 in the output list that satisfies our claim as long as we choose the polynomial g such that g(1/\u03b5,1/\u03b4,k) \u2265max{2Mm/\u03b5,2m} for all \u03b5,\u03b4 and m.\nProof of Theorem 3 We will now combine the all the tools to prove Theorem 3. First, consider the class of events E(\u03b3 ) with \u03b3 = 1/g(1/\u03b5,1/\u03b4,k) (specified in Lemma 9). Then we will apply the CN algorithm L2 in Lemma 4 to obtain a list H of polynomially many hypotheses. For each h \u2208 H, run the algorithm L3 with h as a candidate hypothesis. This will generate a list of a list of probability models T . If max{KL(P0||P1),KL(P1||P0)} \u2265 \u03b3 , then T is guaranteed to contain an \u03b5-accurate model with high probability (based on Lemma 4 and Lemma 8). Next, apply the distribution learner in Lemma 9 over the mixture distribution over Y . If the algorithm outputs a distribution P\u0302, create a model T \u2032 = (h0, P\u0302 , P\u0302), where hypothesis h0 labels every example as negative. If max{KL(P0||P1),KL(P1||P0)} < \u03b3 , we know T \u2032 is \u03b5-accurate with high probability (based on Lemma 9). Finally, apply the maximum likelihood method to the list of models T \u222a {T \u2032}: draw a sample of polynomial size from Gen, then for each model T \u2208 T \u222a{T \u2032}, compute the empirical logloss over the sample, and output the model with the minimum log loss. By standard argument, we can show that the output model is accurate with high probability.\nA.4 Missing Proofs in Section 5\nLemma 10. Fix any \u03b3 \u2208 (0,1]. Suppose thatKL(P ||Q) \u2265 \u03b3 , then E(P,Q,\u03b3/2) is a (\u03b32/(8M))-distinguishing event for the distributions P and Q.\nProof. Note that for any y \u2208 E such that P(E) > 0, we have log P(y) Q(y) \u2264M by Assumption 1, and for any y < E, we also have log (\nP(y) Q(y)\n)\n< \u03b3/2.\nKL(P ||Q) = \u222b\ny\u2208Y P(y) log\nP(y) Q(y) dy\n=\n\u222b\ny\u2208E P(y) log\nP(y) Q(y) dy +\n\u222b\ny<E P(y) log\nP(y) Q(y) dy\n< P(E)M + (1\u2212P(E))\u03b3 2 = \u03b3\n2 + (M \u2212\u03b3/2)P(E) < \u03b3 2 +MP(E)\nSince we know that KL(P ||Q) \u2265 \u03b3 , it follows that P(E) > \u03b32M . Furthermore,\nP(E)\u2212Q(E) = P(E) (\n1\u2212 Q(E) P(E)\n)\n\u2265 P(E)    \n  1\u2212 sup y\u2208E\nQ(y)\nP(y)\n     \n\u2265 P(E) ( 1\u2212 2\u2212\u03b3/2 ) \u2265 \u03b3 P(E) 4\nwhere the last step follows from the fact that 1\u2212 2\u2212a \u2265 a/2 for any a \u2208 [0,1]. It follows that\nP(E)\u2212Q(E) > \u03b3 P(E) 4 > \u03b3 2M \u03b3 4 =\n\u03b32\n8M ,\nwhich proves our statement.\nLemma 11. Suppose that the distributions P, P\u0302,Q,Q\u0302 over Y satisfy that KL(P ||P\u0302) \u2264 \u03b1, KL(Q||Q\u0302) \u2264 \u03b1, and KL(P ||Q) \u2265 \u03b3 for some \u03b1,\u03b3 \u2208 (0,1]. Then the event E(P\u0302, Q\u0302, (\u03b32/(8M)\u2212 \u221a 2\u03b1)2) is a \u03be-distinguishing\nevent with \u03be \u2265 1/ poly(1/\u03b3,1/\u03b1,k) as long as \u03b3 > 8M( \u221a 2\u03b1 + (8M2\u03b1)1/8).\nProof. Since we have both KL(P ||P\u0302),KL(Q||Q\u0302) \u2264 \u03b1, by Pinsker\u2019s inequality, we can bound the total variation distances\n\u2016P \u2212 P\u0302\u2016tv \u2264 \u221a \u03b1/2 and, \u2016Q \u2212 Q\u0302\u2016tv \u2264 \u221a \u03b1/2.\nBy Lemma 10 and the definition of total variation distance, we know that\n\u2016P \u2212Q\u2016tv = sup E\u2282Y |P(E)\u2212Q(E)| \u2265 \u03b32/(8M)\nBy triangle inequality, the above implies\n\u2016P\u0302 \u2212 Q\u0302\u2016tv \u2265 \u03b32 8M \u2212 \u221a 2\u03b1 \u2261 b\nBy Pinsker\u2019s inequality, we know that \u2016P\u0302 \u2212 Q\u0302\u2016tv \u2264 \u221a\nKL(P\u0302 ||Q\u0302)/2. It follows that KL(P\u0302 ||Q\u0302) \u2265 2b2. Consider the event E = E(P\u0302, Q\u0302,b2). We know by Lemma 10 that E is a (b4/(2M))-distinguishing event for distributions P\u0302 and Q\u0302. Since both KL(P ||P\u0302),KL(Q||Q\u0302) \u2264 \u03b1, we have\n|P(E)\u2212 P\u0302(E)| \u2264 \u2016P(E\u2032)\u2212 P\u0302(E\u2032)\u2016tv \u2264 \u221a \u03b1/2 and, |Q(E)\u2212 Q\u0302(E)| \u2264 \u2016Q(E\u2032)\u2212 P\u0302(E\u2032)\u2016tv \u2264 \u221a \u03b1/2.\nSince E is a (b4/(2M))-distinguishing event for the distributions P\u0302 and Q\u0302, this means |P\u0302(E)\u2212Q\u0302(E)| \u2265 (b4/(2M)), and by triangle inequality, we have\n|P(E)\u2212Q(E)| = |(P(E)\u2212 P\u0302(E)) + (P\u0302(E)\u2212 Q\u0302(E)) + (Q\u0302(E)\u2212Q(E))| \u2265 |P\u0302(E)\u2212 Q\u0302(E)| \u2212 |P(E)\u2212 P\u0302(E)| \u2212 |Q\u0302(E)\u2212Q(E)| \u2265 (b4/(2M))\u2212 \u221a 2\u03b1\nNote that if we have \u03b3 > 8M( \u221a 2\u03b1 + (8M2\u03b1)1/8), then we can guarantee both b > 0 and (b4/(2M))\u2212\u221a\n2\u03b1 > 0.\nLemma 12. Suppose the class P satisfies the parametric mixture learning assumption (Assumption 3), the class C is CN learnable, and mixture distribution over Y is \u03b3-healthy for some \u03b3 > 0. Then there exists an algorithm L that given \u03b5,\u03b4 and \u03b3 as inputs and sample access from Gen, halts in time bounded by poly(1/\u03b5,1/\u03b4,1/\u03b3,n,k), and with probability at least 1\u2212\u03b4, outputs a list of probability models T that contains some T\u0302 with err(T\u0302 ) \u2264 \u03b5. Proof. We will first invoke the algorithm LM in Assumption 3 so that with probability at least 1\u2212\u03b4/2, the output approximations for the two components satisfy KL(P0||P\u03020) \u2264 \u03b1 andKL(P1||P\u03021) \u2264 \u03b1 for some\u03b1 that satisfies \u03b3 > 8M( \u221a 2\u03b1+(8M2\u03b1)1/8). This process will halt in time poly(1/\u03b1,1/\u03b4,1/\u03b3,k).\nBy Lemma 10, we know that the either event E(P\u03020, P\u03021,\u03b3/2) is a \u03be-distinguishing event for P0 and P1 for some \u03be \u2265 1/ poly(1/\u03b3,n,k). Then we can use the CN learning algorithm L1 in Lemma 3 with the distinguishing event E to learn a list of hypotheses H under polynomial time, and there exists some h \u2208 H that is \u03b51 accurate, with \u03b51 = 1/r(1/\u03b5,1/\u03b4,k) (specified in Lemma 8). For each hypothesis h\u2032 \u2208H, run the algorithm L3 with h\u2032 as the candidate hypothesis and \u03b5 as the target accuracy parameter. By Lemma 8, this will halt in polynomial time, and outputs a list of probability models T such that one of which has error err(T\u0302 ) \u2264 \u03b5.\nProof of Theorem 4 The algorithm consists of three steps. First, we will run the algorithm in Lemma 12 by setting \u03b3 = 1/g(1/\u03b5,\u03b4,k) (specified in Lemma 8) and other parameters in a way to guarantee that whenever max{KL(P0||P\u03020),KL(P1||P\u03021)} \u2265 \u03b3 and min{w0,w1} \u2265 \u03b3 both hold, the output list of models T contains some T that has error at most \u03b5. Next, we will directly apply the distribution learner in Lemma 9 so that when the healthy mixture condition is not met, the algorithm outputs a distribution P\u0302 such that Ex\u223cD [ KL(Pc(x)||P\u0302) ]\n. Lastly, similar to the final step in the forward reduction, we run the maximum likelihood algorithm to output the model in T \u222a {(h0, P\u0302 , P\u0302)} with the smallest empirical log-loss."}, {"heading": "B Maximum Likelihood Algorithm", "text": "In this section, we will formally define the maximum likelihood algorithm, which is a useful subroutine to select an accurate probability model from a list of candidate models. First, to give some intuition, we show that the objective of minimizing Ex\u223cD [ KL(Pc(x)||P\u0302h(x)) ] is equivalent to minimizing the expected log-losses. For any distribution P\u0302 over Y and a point r \u2208 Y , the log likelihood loss (or simply log-loss) is defined as loss(y, P\u0302) = \u2212 log P\u0302(y). The entropy of a distribution P over range Y , denoted H(P), is defined as\nH(P) =\n\u222b\ny\u2208Y P(y) log\n1\nP(y) dy\nFor any two distributions P and P\u0302 over Y , we could write KL-divergence as\nKL(P ||P\u0302) = \u222b\ny\u2208Y P(y) log\n1\nP\u0302(y) dy \u2212H(P) = E y\u223cP\n[ \u2212 log P\u0302(y) ] \u2212H(P) (2)\nwhich will be useful for proving the next lemma.\nLemma 15. Given any hypothesis h : X \u2192 {0,1}, and hypothesis distributions P\u03020 and P\u03021, we have\nE x\u223cD\n[ KL(Pc(x)||P\u0302h(x)) ]\n= E x\u223cD\n[ H(Pc(x)) ] \u2212 E (x,y)\u223cGen [ log(P\u0302h(x)(y)) ]\nProof. We can write the following\nE x\u223cD\n[ KL(Pc(x)||Ph(x)) ] = Pr D [c(x) = 1,h(x) = 1]KL(P1||P\u03021) + PrD [c(x) = 1,h(x) = 0]KL(P1||P\u03020)\n+ Pr D [c(x) = 0,h(x) = 1]KL(P0||P\u03021) + PrD [c(x) = 0,h(x) = 0]KL(P0||P\u03020)\n(apply Equation (2)) = E x\u223cD\n[ H(Pc(x)) ] \u2212 \u2211\n(i,j)\u2208{0,1}2 Pr D [c(x) = i,h(x) = j] E y\u223cPi\n[ log(P\u0302j(y)) ]\n= E x\u223cD\n[ H(Pc(x)) ] \u2212 E (x,y)\u223cGen [ log(P\u0302h(x)(y)) ]\nwhich proves our claim.\nTherefore, we could write err(T ) = Ex\u223cD [ H(Pc(x)) ] \u2212E(x,y)\u223cGen [ log(P\u0302h(x)(y)) ] for any model T =\n(h, P\u03020, P\u03021). Observe that Ex\u223cD [ H(Pc(x)) ] is independent of the choices of (h, P\u03020, P\u03021), so our goal can also be formulated as minimizing the expected log-loss E(x,y)\u223cGen [ log(P\u0302h(x)(y)) ]\n. To do that, we will use the following maximum likelihood algorithm: given a list of probability models T as input, draw a set of S of samples (x,y)\u2019s from Gen, and for each T = (h, P\u03020, P\u03021) \u2208 T , compute the log-loss on the sample\nloss(S,T ) = \u2211\n(x,y)\u2208S loss(y,Ph(x)),\nand lastly output the probability model T\u0302 \u2208 T with the smallest loss(S,T ). Our goal is to show that if the list of models T contains an accurate model T , the maximum likelihood algorithm will then output an accurate model with high probability.\nTheorem 5. Let \u03b5 > 0. Let T be a set of probability models such that at least one model T \u2217 \u2208 T has error err(T \u2217) \u2264 \u03b5. Suppose that the class P also satisfies bounded assumption (in Assumption 1).\nIf we run the maximum likelihood algorithm on the list T using a set S of independent samples drawn from Gen. Then, with probability at least 1 \u2212 \u03b4, the algorithm outputs some model T\u0302 \u2208 T such that err(T\u0302 ) \u2264 4\u03b5 with\n\u03b4 \u2264 (|T |+1)exp (\u22122m\u03b52\nM2\n)\n.\nTo prove this result, we rely on the Hoeffding concentration bound.\nTheorem 6. Let x1, . . . ,xn be independent bounded random variables such that each xi falls into the interval [a,b] almost surely. Let X = \u2211\ni xi . Then for any t > 0 we have\nPr[X \u2212E [X] \u2265 t] \u2264 exp ( \u22122t2 n(b \u2212 a)2 ) and Pr[X \u2212E [X] \u2264 \u2212t] \u2264 exp ( \u22122t2 n(b \u2212 a)2 )\nProof. Our proof essentially follows from the same analysis of Feldman et al. (2008) (Theorem 17). We say that a probability model T is good if err(T ) \u2264 4\u03b5, and bad otherwise. We know that T is guaranteed to contain at least one good model. In the following, we will writeH(Gen) to denote Ex\u223cD [ H(Pc(x)) ]\n. The probability \u03b4 that the algorithm fails to output some good model is at most the probability the best model T \u2217 has loss(S,T ) \u2265 m (H(Gen) + 2\u03b5) or some bad model T \u2032 has loss(S,T \u2032) \u2264 m (H(Gen) + 3\u03b5). Applying union bound, we get\n\u03b4 \u2264 |T | Pr[loss(S,T \u2032) \u2264m (H(Gen) + 3\u03b5) | err(T ) \u2265 4\u03b5] + Pr[loss(S,T \u2217) \u2265m (H(Gen) + 2\u03b5)]\nFor each bad model T \u2032 with err(T \u2032) > 4\u03b5, we can write\nPr[loss(S,T \u2032) \u2264m(H(Gen) + 3\u03b5)] = Pr[loss(S,T \u2032) \u2264m(H(Gen) + 4\u03b5)\u2212 \u03b5m] (because err(T \u2032) \u2265 0) \u2264 Pr[loss(S,T \u2032) \u2264m(H(Gen) + err(T \u2032))\u2212 \u03b5m]\n= Pr[loss(S,T \u2032) \u2264 E S\u223cGenm [ loss(S,T \u2032)\u2212 \u03b5]] \u2264 exp (\u22122m\u03b52\nM2\n)\nwhere the last step follows from Theorem 6. Similarly, for the best model T \u2217 with err(T \u2217) \u2264 \u03b5, we have the following derivation:\nPr[loss(S,T \u2217) \u2265m (H(Gen) + 2\u03b5)] = Pr[loss(S,T \u2217) \u2265m (H(Gen) + \u03b5) +m\u03b5] \u2264 Pr[loss(S,T \u2217) \u2265m (H(Gen) + err(T \u2217) +m\u03b5)] = Pr[loss(S,T \u2217) \u2265 E\nS\u223cGenm [loss(S,T \u2217)] +m\u03b5]\n\u2264 exp (\u22122m\u03b52\nM2\n)\nCombining these two probabilities recovers the stated bound.\nIn other words, as long as we have an \u03b5-accurate model in the list, we can guarantee with probability at least 1\u2212\u03b4 that the output model has error O(\u03b5) using a sample of size no more than poly(k/\u03b5) \u00b7 log(1/\u03b4)."}, {"heading": "C Examples of Distinguishing Events", "text": "In this section, we give two distribution classes that admit distinguishing event class of polynomial size.\nC.1 Spherical Gaussian\nWe consider the class of spherical Gaussian in Rk with fixed covariance and bounded means. In particular, let P = {N (\u00b5,\u03a3) | \u00b5 \u2208 [0,1]k} where \u03a3 is some diagonal covariance matrix in Rk\u00d7k such that the variance in each coordinate satisfy 0 < \u03c32j \u2264 \u03c32 for some constant \u03c3 > 1. Theorem 7. There exists a parametric class of events E(\u00b7) for the distribution class P of k-dimensional Spherical Gaussian such that for any \u03b3 > 0 and for any two probability distributions P and Q in the class P such that KL(P ||Q) \u2265 \u03b3 , the class of events E(\u03b3 ) contains an event E that is an \u03be-distinguishing event, where max{1/\u03be, |E(\u03b3 )|} \u2264 poly(k,1/\u03b3 ). Proof. Recall that the KL divergence of two multivariate Gaussian distributions P and Q with means \u00b5,\u00b5\u2032 and covariance matrices \u03a3p ,\u03a3q can be written as\nKL(P ||Q) = 1 2\n(\ntr(\u03a3\u22121q \u03a3p) + (\u00b5 \u2032 \u2212\u00b5)\u22ba\u03a3q(\u00b5\u2032 \u2212\u00b5)\u2212 k + log\n(\ndet\u03a3q\ndet\u03a3p\n))\n.\nFor any two distributions P and Q in our class P , we can simplify the KL divergence as\nKL(P ||Q) \u2264 \u03c3 2\n2 \u2016\u00b5\u2212\u00b5\u2032\u201622.\nThen KL(P ||Q) \u2265 \u03b3 implies that there exists some coordinate j \u2208 [k] such that |\u00b5j \u2212\u00b5\u2032j | \u2265 \u221a 2\u03b3/(k\u03c32). Note that the marginal distributions of Pj and Qj over the j-the coordinate are N (\u00b5j ,\u03c32j ) and N (\u00b5\u2032j ,\u03c32j ) respectively. Without loss of generality, assume that \u00b5\u2032j < \u00b5j . Then for any value t \u2208 [\u00b5\u2032j ,\u00b5j ], we have\nPj [y \u2265 t]\u2212Qj [y \u2265 t] \u2265 Pj [y \u2208 [t,\u00b5j ]]. (3) Let \u2206 = \u221a\n2\u03b3/(k\u03c32), and consider the discretized set L(\u03b3 ) = {0,\u2206, . . . ,\u230a1/\u2206\u230b\u2206}. Then we know there exists a value t\u2032 \u2208 L such that t\u2032 \u2208 L(\u03b3 ) such that t\u2032 \u2208 [\u00b5\u2032j ,\u00b5j ] and \u00b5j \u2212 t\u2032 \u2265 \u2206. By Equation (3), we can write\nPj [y \u2265 t\u2032]\u2212Qj [y \u2265 t\u2032] \u2265 1\n2 erf(\u2206/(\n\u221a 2\u03c3j )) \u2265 1\n2 erf(\u2206/(\n\u221a 2\u03c3))\nwhere erf denotes the Gauss error function with erf(x) = 2\u221a \u03c0\n\u222b x 0 e\u2212a 2 da for every x \u2208 R. The Taylor\nexpansion of the function is\nerf(x) = 2\u221a \u03c0\n\u221e \u2211\ni=0\n(\u22121)ix2i+1 n!(2i +1) = 2\u221a \u03c0\n(\nx \u2212 x 3 3 + x5 10 \u2212 x 7 42 . . .\n)\nTherefore, for any x \u2208 [0,1), there exists a constant C such that erf(x/( \u221a 2\u03c3))/2 \u2265 C x. It follows that Pj [y \u2265 t\u2032]\u2212Qj [y \u2265 t\u2032] \u2265 C\u2206. This means that the event of (yj \u2265 t\u2032) is a (C\u2206)-distinguishing event for the two distributions P and Q. Therefore, for any \u03b3 > 0, we can construct the following class of distinguishing events E(\u03b3 ) = {1[yj \u2265 t\u2032] | j \u2208 [k], t\u2032 \u2208 L(\u03b3 )}. Note that both 1/(C\u2206) and |E(\u03b3 )| is upper bounded by poly(1/\u03b3,k), which recovers our claim.\nC.2 Product Distributions over Discrete Domains\nConsider the space of b-ary cube Y = {0, . . . ,b \u2212 1}k , and the class of full-support product distributions P over Y : distributions whose k coordinates are mutually independent distributions over {0, . . . ,b \u2212 1}. In particular, we assume that there exists some quantity M \u2264 poly(k,b) such that for each P \u2208 P and each coordinate j and yj \u2208 {0,1, . . . b\u22121}, we have log(1/Pj(yj )) \u2264M . Now let\u2019s show that this class of distributions admits a small class of distinguishing events as well.\nTheorem 8. There exists a parametric class of events E(\u00b7) for the production distribution class over the b-ary cube such that for any \u03b3 > 0 and for any two probability distributions P and Q in the class P such that KL(P ||Q) \u2265 \u03b3 , the class of events E(\u03b3 ) contains an event E that is an \u03be-distinguishing event, where max{1/\u03be, |E(\u03b3 )|} \u2264 poly(k,b,1/\u03b3 ).\nProof. In the following, we will write P = P1 \u00d7 . . .\u00d7Pk and Q =Q1 \u00d7 . . .\u00d7Qk . Note that\nKL(P ||Q) = \u2211\nj \u2032\u2208[k] KL(Pj \u2032 ||Qj \u2032 ).\nTherefore KL(P ||Q) \u2265 \u03b3 implies that there exists some coordinate j such that KL(Pj ||Qj ) \u2265 \u03b3/k. This means\n\u2211\ny\u2032j\u2208{0,...,b\u22121} Pj(y\n\u2032 j ) log\n      Pj(y \u2032 j )\nQj (y \u2032 j )\n      \u2265 \u03b3/k.\nThis means there exists some t \u2208 {0, . . . ,b \u2212 1} such that Pj (t) log(Pj (t)/Qj(t)) \u2265 \u03b3/(kb). Recall that log ( Pj(t)/Qj (t) )\n\u2264 M , then we must have Pj(t) \u2265 \u03b3/(kbM). Furthermore, since Pj (t) \u2264 1, we must also have log(Pj(t)/Qj (t)) \u2265 \u03b3/(kb). It follows that\nPj(t)\u2212Qj(t) \u2265 Pj (t) ( 1\u2212 Qj (t)\nPj(t)\n)\n\u2265 \u03b3 kbM ( 1\u2212 2\u2212\u03b3/(kb) ) \u2265 \u03b3 kbM \u03b3 2kb =\n\u03b32\n2(kb)2M\nwhere the last inequality follows from the fact that 1 \u2212 2\u2212z \u2265 z/2 for any z \u2208 [0,1]. Therefore, for any \u03b3 > 0, the following class of events\nE(\u03b3 ) = {1[yj = t] | t \u2208 {0,1, . . . ,b \u2212 1}, j \u2208 [k]}\nwould contain a \u03be-distinguishing event, and max{1/\u03be, |E(\u03b3 )|} \u2264 poly(k,b,1/\u03b3 )."}], "references": [{"title": "Learning from noisy examples", "author": ["D. Angluin", "P.D. Laird"], "venue": "Machine Learning 2, 4, 343\u2013 370.", "citeRegEx": "Angluin and Laird,? 1987", "shortCiteRegEx": "Angluin and Laird", "year": 1987}, {"title": "Learning mixtures of arbitrary gaussians", "author": ["S. Arora", "R. Kannan"], "venue": "Proceedings of the Thirty-third Annual ACM Symposium on Theory of Computing. STOC \u201901. ACM, New York, NY, USA, 247\u2013257.", "citeRegEx": "Arora and Kannan,? 2001", "shortCiteRegEx": "Arora and Kannan", "year": 2001}, {"title": "Combining labeled and unlabeled data with co-training", "author": ["A. Blum", "T.M. Mitchell"], "venue": "Proceedings of the Eleventh Annual Conference on Computational Learning Theory, COLT 1998, Madison, Wisconsin, USA, July 24-26, 1998. 92\u2013100.", "citeRegEx": "Blum and Mitchell,? 1998", "shortCiteRegEx": "Blum and Mitchell", "year": 1998}, {"title": "Learning mixtures of gaussians", "author": ["S. Dasgupta"], "venue": "40th Annual Symposium on Foundations of Computer Science, FOCS \u201999, 17-18 October, 1999, New York, NY, USA. 634\u2013644.", "citeRegEx": "Dasgupta,? 1999", "shortCiteRegEx": "Dasgupta", "year": 1999}, {"title": "PAC learning with constant-partition classification noise and applications to decision tree induction", "author": ["S.E. Decatur"], "venue": "Proceedings of the Fourteenth International Conference on Machine Learning. ICML \u201997. Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 83\u201391.", "citeRegEx": "Decatur,? 1997", "shortCiteRegEx": "Decatur", "year": 1997}, {"title": "Learningmixtures of product distributions over discrete domains", "author": ["J. Feldman", "R. O\u2019Donnell", "R.A. Servedio"], "venue": "SIAM J. Comput", "citeRegEx": "Feldman et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Feldman et al\\.", "year": 2008}, {"title": "PAC learning axis-aligned mixtures of Gaussians with no separation assumption", "author": ["J. Feldman", "R.A. Servedio", "R. O\u2019Donnell"], "venue": "In Learning Theory, 19th Annual Conference on Learning Theory, COLT", "citeRegEx": "Feldman et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Feldman et al\\.", "year": 2006}, {"title": "Decision theoretic generalizations of the PAC model for neural net and other learning applications", "author": ["D. Haussler"], "venue": "Inf. Comput. 100, 1, 78\u2013150.", "citeRegEx": "Haussler,? 1992", "shortCiteRegEx": "Haussler", "year": 1992}, {"title": "Learning mixtures of spherical gaussians: moment methods and spectral decompositions", "author": ["D.J. Hsu", "S.M. Kakade"], "venue": "Innovations in Theoretical Computer Science, ITCS \u201913, Berkeley, CA, USA, January 9-12, 2013. 11\u201320.", "citeRegEx": "Hsu and Kakade,? 2013", "shortCiteRegEx": "Hsu and Kakade", "year": 2013}, {"title": "Learning boolean formulas", "author": ["M. Kearns", "M. Li", "L. Valiant"], "venue": "J. ACM 41, 6 (Nov.), 1298\u2013 1328.", "citeRegEx": "Kearns et al\\.,? 1994", "shortCiteRegEx": "Kearns et al\\.", "year": 1994}, {"title": "Cryptographic limitations on learning boolean formulae and finite automata", "author": ["M. Kearns", "L. Valiant"], "venue": "J. ACM 41, 1 (Jan.), 67\u201395.", "citeRegEx": "Kearns and Valiant,? 1994", "shortCiteRegEx": "Kearns and Valiant", "year": 1994}, {"title": "Efficient noise-tolerant learning from statistical queries", "author": ["M.J. Kearns"], "venue": "J. ACM 45, 6, 983\u2013 1006.", "citeRegEx": "Kearns,? 1998", "shortCiteRegEx": "Kearns", "year": 1998}, {"title": "On the learnability of discrete distributions", "author": ["M.J. Kearns", "Y. Mansour", "D. Ron", "R. Rubinfeld", "R.E. Schapire", "L. Sellie"], "venue": "Proceedings of the Twenty-Sixth Annual ACM Symposium on Theory of Computing, 23-25 May 1994, Montr\u00e9al, Qu\u00e9bec, Canada. 273\u2013282.", "citeRegEx": "Kearns et al\\.,? 1994", "shortCiteRegEx": "Kearns et al\\.", "year": 1994}, {"title": "Asymptotic methods in statistical decision theory", "author": ["L.M. Le Cam"], "venue": "Springer series in statistics. Springer-Verlag, New York.", "citeRegEx": "Cam,? 1986", "shortCiteRegEx": "Cam", "year": 1986}, {"title": "Prediction-preserving reducibility", "author": ["L. Pitt", "M.K. Warmuth"], "venue": "J. Comput. Syst. Sci. 41, 3 (Dec.), 430\u2013467.", "citeRegEx": "Pitt and Warmuth,? 1990", "shortCiteRegEx": "Pitt and Warmuth", "year": 1990}, {"title": "CN = CPCN", "author": ["L. Ralaivola", "F. Denis", "C.N. Magnan"], "venue": "InMachine Learning, Proceedings of the Twenty-Third International Conference (ICML 2006), Pittsburgh, Pennsylvania, USA, June 25-29, 2006. 721\u2013728.", "citeRegEx": "Ralaivola et al\\.,? 2006", "shortCiteRegEx": "Ralaivola et al\\.", "year": 2006}, {"title": "The strength of weak learnability", "author": ["R.E. Schapire"], "venue": "Mach. Learn. 5, 2 (July), 197\u2013227.", "citeRegEx": "Schapire,? 1990", "shortCiteRegEx": "Schapire", "year": 1990}, {"title": "A theory of the learnable", "author": ["L.G. Valiant"], "venue": "Proceedings of the 16th Annual ACM Symposium on Theory of Computing, April 30 - May 2, 1984, Washington, DC, USA. 436\u2013445.", "citeRegEx": "Valiant,? 1984", "shortCiteRegEx": "Valiant", "year": 1984}, {"title": "A spectral algorithm for learning mixture models", "author": ["S. Vempala", "G. Wang"], "venue": "J. Comput. Syst. Sci. 68, 4, 841\u2013860.", "citeRegEx": "Vempala and Wang,? 2004", "shortCiteRegEx": "Vempala and Wang", "year": 2004}, {"title": "Assouad, fano, and le cam", "author": ["B. Yu"], "venue": "Festschrift for Lucien Le Cam. Springer New York, 423\u2013435. 15", "citeRegEx": "Yu,? 1997", "shortCiteRegEx": "Yu", "year": 1997}, {"title": "We say that a probability model T is good if err(T ) \u2264 4\u03b5, and bad otherwise. We know that T is guaranteed to contain at least one good model", "author": ["Feldman"], "venue": null, "citeRegEx": "Feldman,? \\Q2008\\E", "shortCiteRegEx": "Feldman", "year": 2008}], "referenceMentions": [{"referenceID": 14, "context": "Within the standard PAC (classification) model, there is a rich theory of reducibility between specific learning problems (Pitt and Warmuth, 1990; Kearns and Valiant, 1994), between classes of learning problems (Schapire, 1990; Kearns, 1998), as well as composition theorems allowing the creation of more complex learning algorithm from simpler ones (Kearns et al.", "startOffset": 122, "endOffset": 172}, {"referenceID": 10, "context": "Within the standard PAC (classification) model, there is a rich theory of reducibility between specific learning problems (Pitt and Warmuth, 1990; Kearns and Valiant, 1994), between classes of learning problems (Schapire, 1990; Kearns, 1998), as well as composition theorems allowing the creation of more complex learning algorithm from simpler ones (Kearns et al.", "startOffset": 122, "endOffset": 172}, {"referenceID": 16, "context": "Within the standard PAC (classification) model, there is a rich theory of reducibility between specific learning problems (Pitt and Warmuth, 1990; Kearns and Valiant, 1994), between classes of learning problems (Schapire, 1990; Kearns, 1998), as well as composition theorems allowing the creation of more complex learning algorithm from simpler ones (Kearns et al.", "startOffset": 211, "endOffset": 241}, {"referenceID": 11, "context": "Within the standard PAC (classification) model, there is a rich theory of reducibility between specific learning problems (Pitt and Warmuth, 1990; Kearns and Valiant, 1994), between classes of learning problems (Schapire, 1990; Kearns, 1998), as well as composition theorems allowing the creation of more complex learning algorithm from simpler ones (Kearns et al.", "startOffset": 211, "endOffset": 241}, {"referenceID": 9, "context": "Within the standard PAC (classification) model, there is a rich theory of reducibility between specific learning problems (Pitt and Warmuth, 1990; Kearns and Valiant, 1994), between classes of learning problems (Schapire, 1990; Kearns, 1998), as well as composition theorems allowing the creation of more complex learning algorithm from simpler ones (Kearns et al., 1994).", "startOffset": 350, "endOffset": 371}, {"referenceID": 9, "context": "A natural starting point for such an investigation is with the standard PAC supervised learning model, and its distributional analogue (Kearns et al., 1994), since these models are each already populated with a number of algorithms with strong theoretical guarantees.", "startOffset": 135, "endOffset": 156}, {"referenceID": 0, "context": "Informally, our results imply that for every concept class C known to be PAC learnable with classification noise (Angluin and Laird, 1987), and almost every class P known to be PAC learnable in the distributional sense of Kearns et al.", "startOffset": 113, "endOffset": 138}, {"referenceID": 0, "context": "Informally, our results imply that for every concept class C known to be PAC learnable with classification noise (Angluin and Laird, 1987), and almost every class P known to be PAC learnable in the distributional sense of Kearns et al. (1994), PwD problems given by (C,P ) are learnable in our framework.", "startOffset": 114, "endOffset": 243}, {"referenceID": 11, "context": "Since practically every C known to be PAC learnable can also be learned with classification noise (either directly or via the statistical query framework (Kearns, 1998), with parity-based constructions being the only known exceptions), and the distribution classes P known to be PAC learnable have small sets of distinguishing events (such as product distributions), and/or have mixture learning algorithms (such as Gaussians), our results yield efficient PwD algorithms for almost all combinations of PAC classification and distribution learning algorithms known to date.", "startOffset": 154, "endOffset": 168}, {"referenceID": 17, "context": "At the highest level, our model falls under the framework of Haussler (1992), which gives a decision-theoretic treatment of PAC-style learning (Valiant, 1984) for very general loss functions; our model can be viewed as a special case in which the loss function is conditional log-loss given the value of a classifier.", "startOffset": 143, "endOffset": 158}, {"referenceID": 0, "context": "First, our work is related to the results in PAC learning under classification noise (Angluin and Laird, 1987; Decatur, 1997; Kearns, 1998), and makes use of a result by Ralaivola et al.", "startOffset": 85, "endOffset": 139}, {"referenceID": 4, "context": "First, our work is related to the results in PAC learning under classification noise (Angluin and Laird, 1987; Decatur, 1997; Kearns, 1998), and makes use of a result by Ralaivola et al.", "startOffset": 85, "endOffset": 139}, {"referenceID": 11, "context": "First, our work is related to the results in PAC learning under classification noise (Angluin and Laird, 1987; Decatur, 1997; Kearns, 1998), and makes use of a result by Ralaivola et al.", "startOffset": 85, "endOffset": 139}, {"referenceID": 9, "context": "Our work also relies on the PAC model for distribution learning (Kearns et al., 1994), including a long line of works on learning mixtures of distributions (see e.", "startOffset": 64, "endOffset": 85}, {"referenceID": 2, "context": "Our model is also technically related to the one of co-training (Blum and Mitchell, 1998) in that the input x and the output y give two different views on the data, and they are conditionally independent given the unknown label z = c(x), which is also a crucial assumption for co-training (as well as various other latent variable models for inference and learning).", "startOffset": 64, "endOffset": 89}, {"referenceID": 0, "context": "At the highest level, our model falls under the framework of Haussler (1992), which gives a decision-theoretic treatment of PAC-style learning (Valiant, 1984) for very general loss functions; our model can be viewed as a special case in which the loss function is conditional log-loss given the value of a classifier.", "startOffset": 61, "endOffset": 77}, {"referenceID": 0, "context": "At the highest level, our model falls under the framework of Haussler (1992), which gives a decision-theoretic treatment of PAC-style learning (Valiant, 1984) for very general loss functions; our model can be viewed as a special case in which the loss function is conditional log-loss given the value of a classifier. Whereas Haussler (1992) is primarily concerned with sample complexity, our focus here is on computational complexity and composition of learning models.", "startOffset": 61, "endOffset": 342}, {"referenceID": 0, "context": "First, our work is related to the results in PAC learning under classification noise (Angluin and Laird, 1987; Decatur, 1997; Kearns, 1998), and makes use of a result by Ralaivola et al. (2006) that established the equivalence of learning under (standard) classification noise (CN) and under class-conditional classification noise (CCCN).", "startOffset": 86, "endOffset": 194}, {"referenceID": 0, "context": "First, our work is related to the results in PAC learning under classification noise (Angluin and Laird, 1987; Decatur, 1997; Kearns, 1998), and makes use of a result by Ralaivola et al. (2006) that established the equivalence of learning under (standard) classification noise (CN) and under class-conditional classification noise (CCCN). Our work also relies on the PAC model for distribution learning (Kearns et al., 1994), including a long line of works on learning mixtures of distributions (see e.g. Dasgupta (1999); Arora and Kannan (2001); Vempala and Wang (2004); Feldman et al.", "startOffset": 86, "endOffset": 521}, {"referenceID": 0, "context": "First, our work is related to the results in PAC learning under classification noise (Angluin and Laird, 1987; Decatur, 1997; Kearns, 1998), and makes use of a result by Ralaivola et al. (2006) that established the equivalence of learning under (standard) classification noise (CN) and under class-conditional classification noise (CCCN). Our work also relies on the PAC model for distribution learning (Kearns et al., 1994), including a long line of works on learning mixtures of distributions (see e.g. Dasgupta (1999); Arora and Kannan (2001); Vempala and Wang (2004); Feldman et al.", "startOffset": 86, "endOffset": 546}, {"referenceID": 0, "context": "First, our work is related to the results in PAC learning under classification noise (Angluin and Laird, 1987; Decatur, 1997; Kearns, 1998), and makes use of a result by Ralaivola et al. (2006) that established the equivalence of learning under (standard) classification noise (CN) and under class-conditional classification noise (CCCN). Our work also relies on the PAC model for distribution learning (Kearns et al., 1994), including a long line of works on learning mixtures of distributions (see e.g. Dasgupta (1999); Arora and Kannan (2001); Vempala and Wang (2004); Feldman et al.", "startOffset": 86, "endOffset": 571}, {"referenceID": 0, "context": "First, our work is related to the results in PAC learning under classification noise (Angluin and Laird, 1987; Decatur, 1997; Kearns, 1998), and makes use of a result by Ralaivola et al. (2006) that established the equivalence of learning under (standard) classification noise (CN) and under class-conditional classification noise (CCCN). Our work also relies on the PAC model for distribution learning (Kearns et al., 1994), including a long line of works on learning mixtures of distributions (see e.g. Dasgupta (1999); Arora and Kannan (2001); Vempala and Wang (2004); Feldman et al. (2008)).", "startOffset": 86, "endOffset": 594}, {"referenceID": 0, "context": "CNLearning Wefirst introduce PAC learning under classification noise (CN) (Angluin and Laird, 1987).", "startOffset": 74, "endOffset": 99}, {"referenceID": 15, "context": "CCCNLearning In amore general noisemodel calledClass-Conditional Classification Noise (CCCN) proposed by Ralaivola et al. (2006), the example oracle EX \u03b7 CCCN has class-dependent noise rates\u2014 that is, the noise rate \u03b70 for the negative examples (c(x) = 0) and the noise rate \u03b71 for the positive examples (c(x) = 1) may be different, and both below 1/2.", "startOffset": 105, "endOffset": 129}, {"referenceID": 15, "context": "CCCNLearning In amore general noisemodel calledClass-Conditional Classification Noise (CCCN) proposed by Ralaivola et al. (2006), the example oracle EX \u03b7 CCCN has class-dependent noise rates\u2014 that is, the noise rate \u03b70 for the negative examples (c(x) = 0) and the noise rate \u03b71 for the positive examples (c(x) = 1) may be different, and both below 1/2. Moreover, Ralaivola et al. (2006) show that any class that is learnable under CN is also learnable under CCCN.", "startOffset": 105, "endOffset": 387}, {"referenceID": 9, "context": "Distribution Learning We also make use of results from for PAC learning probability distributions (Kearns et al., 1994).", "startOffset": 98, "endOffset": 119}, {"referenceID": 9, "context": "Distribution Learning We also make use of results from for PAC learning probability distributions (Kearns et al., 1994). A distribution class P is efficiently learnable if there exists a polynomialtime algorithm that, given sample access to an unknown target distribution P, outputs an accurate distribution P\u0302 such that KL(P ||P\u0302) \u2264 \u03b5 for some target accuracy \u03b5. For any distribution P \u2208 P and any point y \u2208 Y , we assume that we can evaluate the probability (density) of y assigned by P (referred to as learning with an evaluator in Kearns et al. (1994); see the appendix for the formal", "startOffset": 99, "endOffset": 556}, {"referenceID": 5, "context": "Gaussians), it can be obtained using standard procedures (for instance, by truncating, or mixing with a small amount of the uniform distribution; see Feldman et al. (2006) for an example).", "startOffset": 150, "endOffset": 172}, {"referenceID": 15, "context": "Thus, whenever the class C is learnable under CN (and hence learnable under CCCN by Ralaivola et al. (2006)), we can learn the target concept c under the PwD model using a distinguishing event.", "startOffset": 84, "endOffset": 108}, {"referenceID": 2, "context": "3In the work of Blum and Mitchell (1998), the authors showed that any CN learnable class is also learnable when the class-conditional noise rates satisfy \u03b70 + \u03b71 < 1.", "startOffset": 16, "endOffset": 41}, {"referenceID": 13, "context": "Our result relies on the well-known Le Cam\u2019s method, which is a powerful tool for giving lower bounds in hypothesis testing. We state the following version for our purpose.6 Lemma 5. [Le Cam\u2019s method (see e.g. Le Cam (1986); Yu (1997))] Let Q0 and Q1 be two probability distributions over Y , and let A : Ym \u2192 {0,1} be a mapping from m observations in Y to either 0 or 1.", "startOffset": 39, "endOffset": 224}, {"referenceID": 13, "context": "Our result relies on the well-known Le Cam\u2019s method, which is a powerful tool for giving lower bounds in hypothesis testing. We state the following version for our purpose.6 Lemma 5. [Le Cam\u2019s method (see e.g. Le Cam (1986); Yu (1997))] Let Q0 and Q1 be two probability distributions over Y , and let A : Ym \u2192 {0,1} be a mapping from m observations in Y to either 0 or 1.", "startOffset": 39, "endOffset": 235}, {"referenceID": 3, "context": "8 However, we now describe a different, \u201creverse\u201d reduction that instead assumes learnability of mixtures, and thus is applicable to more general Gaussians via known mixture learning algorithms (Dasgupta, 1999; Arora and Kannan, 2001; Feldman et al., 2006).", "startOffset": 194, "endOffset": 256}, {"referenceID": 1, "context": "8 However, we now describe a different, \u201creverse\u201d reduction that instead assumes learnability of mixtures, and thus is applicable to more general Gaussians via known mixture learning algorithms (Dasgupta, 1999; Arora and Kannan, 2001; Feldman et al., 2006).", "startOffset": 194, "endOffset": 256}, {"referenceID": 6, "context": "8 However, we now describe a different, \u201creverse\u201d reduction that instead assumes learnability of mixtures, and thus is applicable to more general Gaussians via known mixture learning algorithms (Dasgupta, 1999; Arora and Kannan, 2001; Feldman et al., 2006).", "startOffset": 194, "endOffset": 256}, {"referenceID": 3, "context": "Dasgupta (1999); Feldman et al.", "startOffset": 0, "endOffset": 16}, {"referenceID": 3, "context": "Dasgupta (1999); Feldman et al. (2006, 2008); Hsu and Kakade (2013)).", "startOffset": 0, "endOffset": 68}], "year": 2017, "abstractText": "We consider a new learning model in which a joint distribution over vector pairs (x,y) is determined by an unknown function c(x) that maps input vectors x not to individual outputs, but to entire distributions over output vectors y. Our main results take the form of rather general reductions from our model to algorithms for PAC learning the function class and the distribution class separately, and show that virtually every such combination yields an efficient algorithm in our model. Our methods include a randomized reduction to classification noise and an application of Le Cam\u2019s method to obtain robust learning algorithms.", "creator": "LaTeX with hyperref package"}}}