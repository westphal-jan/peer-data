{"id": "1606.02825", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Jun-2016", "title": "Arbitrage-Free Combinatorial Market Making via Integer Programming", "abstract": "we cannot present a new combinatorial market maker that operates arbitrage - free combinatorial prediction markets specified by integer programs. although the problem of arbitrage - free pricing, while maintaining a bound on the subsidy provided by the market maker, is # p - \u2190 hard in the approximate worst case, we posit that the typical case might be amenable to modern balanced integer programming ( technically ip ) solvers. at which the crux of our method is invented the frank - wolfe ( conditional gradient ) algorithm which is used to implement a bregman projection aligned by with finding the market maker's cost function, using an ip solver as an oracle. we demonstrate the tractability and improved accuracy of our approach on real - world prediction market data from combinatorial bets placed on the 2010 ncaa men's division i basketball tournament, where the outcome space is of size $ 2 ^ { 63 } $. to our knowledge, this is the first implementation and empirical evaluation of an arbitrage - free combinatorial prediction card market on this scale.", "histories": [["v1", "Thu, 9 Jun 2016 04:59:50 GMT  (86kb,D)", "https://arxiv.org/abs/1606.02825v1", null], ["v2", "Fri, 10 Jun 2016 13:48:30 GMT  (86kb,D)", "http://arxiv.org/abs/1606.02825v2", null]], "reviews": [], "SUBJECTS": "cs.GT cs.AI", "authors": ["christian kroer", "miroslav dud\\'ik", "s\\'ebastien lahaie", "sivaraman balakrishnan"], "accepted": false, "id": "1606.02825"}, "pdf": {"name": "1606.02825.pdf", "metadata": {"source": "CRF", "title": "Arbitrage-Free Combinatorial Market Making via Integer Programming", "authors": ["CHRISTIAN KROER", "SIVARAMAN BALAKRISHNAN"], "emails": ["ckroer@cs.cmu.edu;", "mdudik@microsoft.com;", "slahaie@microsoft.com;", "siva@stat."], "sections": [{"heading": null, "text": "Arbitrage-Free Combinatorial Market Making via Integer Programming\nCHRISTIAN KROER, Carnegie Mellon University MIROSLAV DUDI\u0301K, Microsoft Research SE\u0301BASTIEN LAHAIE, Microsoft Research SIVARAMAN BALAKRISHNAN, Carnegie Mellon University\nWe present a new combinatorial market maker that operates arbitrage-free combinatorial prediction markets specified by integer programs. Although the problem of arbitrage-free pricing, while maintaining a bound on the subsidy provided by the market maker, is #P-hard in the worst case, we posit that the typical case might be amenable to modern integer programming (IP) solvers. At the crux of our method is the Frank-Wolfe (conditional gradient) algorithm which is used to implement a Bregman projection aligned with the market maker\u2019s cost function, using an IP solver as an oracle. We demonstrate the tractability and improved accuracy of our approach on real-world prediction market data from combinatorial bets placed on the 2010 NCAA Men\u2019s Division I Basketball Tournament, where the outcome space is of size 263. To our knowledge, this is the first implementation and empirical evaluation of an arbitrage-free combinatorial prediction market on this scale."}, {"heading": "1. INTRODUCTION", "text": "Prediction markets have been successfully used to elicit and aggregate forecasts in a variety of domains, including business [Charette 2007; Spann and Skiera 2003], politics [Berg et al. 2008], and entertainment [Pennock et al. 2002]. In a prediction market, traders buy and sell securities with values that depend on some unknown future outcome. For instance, a play-money prediction market that Yahoo! ran for the 2010 NCAA Men\u2019s Division I Basketball Tournament included a security that paid out 1 point if the team from Duke were to win the championship and 0 points otherwise. Thus, when the price of the security was 0.15, traders who believed that Duke\u2019s probability of winning was larger than 0.15 were incentivized to buy shares of the security, and those that believed it was lower were incentivized to sell. The market price can be interpreted as an aggregate belief and used as a forecast.\nWe study prediction markets implemented by a centralized algorithm called a costbased market maker [Abernethy et al. 2011; Chen and Pennock 2007]. All shares are bought from and sold to the market maker, rather than between traders, and the market maker uses a convex potential function to determine current security prices. Compared with an exchange, which matches buyers and sellers, a market-maker mechanism is particularly desirable in combinatorial markets, which offer securities on interrelated propositions. For instance, the NCAA 2010 market included securities on events \u201cDuke wins more games than Cornell\u201d and \u201ca team from the Big East conference wins the championship\u201d as well as many others. Because of the large number of securities in combinatorial markets, there may be no sellers interested in trading with a given buyer,\nAuthor addresses: C. Kroer, Computer Science Dept, CMU; ckroer@cs.cmu.edu; M. Dud\u0131\u0301k and S. Lahaie, Microsoft Research; {mdudik,slahaie}@microsoft.com; S. Balakrishnan, Dept of Statistics, CMU; siva@stat. cmu.edu. This work was done while C. Kroer and S. Balakrishnan were at Microsoft Research. Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. EC\u201916, July 24\u201328, 2016, Maastricht, The Netherlands. ACM 978-1-4503-3936-0/16/07 ...$15.00. Copyright is held by the owner/author(s). Publication rights licensed to ACM. http://dx.doi.org/10.1145/2940716.2940767\nar X\niv :1\n60 6.\n02 82\n5v 2\n[ cs\n.G T\n] 1\n0 Ju\nn 20\n16\na problem known as low liquidity. In contrast, a market maker is always available to trade, thus providing liquidity and allowing incorporation of information in the market.\nDesigners of cost-based markets aim to meet several desirable properties, including boundedness of loss suffered by the market maker and absence of arbitrage, that is, risk-free profitable trades. Bounded loss is a necessity for money markets, otherwise the market operator risks bankruptcy. Lack of arbitrage is also highly desirable. First, we would like to attract traders that provide information rather than computation. Second, arbitrage-free markets produce more accurate forecasts. While Abernethy et al. [2011] provide a complete theoretical characterization of cost-based markets with bounded loss and no arbitrage, pricing in such markets is NP-hard or #P-hard for even the simplest combinatorial settings [Chen et al. 2008]. Previous solutions restrict the betting language to allow polynomial time algorithms [e.g., Chen et al. 2007, 2008; Xia and Pennock 2011] or devise approximations [Dud\u0131\u0301k et al. 2012].\nIn this paper we move beyond the hardness barrier. We hypothesize that while the pricing may be difficult in the worst case, a typical case is amenable to modern integer programming solvers. Guided by this hypothesis, we propose a fully general, bounded-loss, arbitrage-free market maker based on integer programming (IP) methods. Our market maker is guaranteed to maintain bounded loss, and attempts to remove arbitrage by making calls to the IP solver.\nOur mechanism begins with any bounded-loss cost function and adds two ingredients. First, we use an integer program to specify the set of valid payoff vectors, each of which enumerates the security payoffs in a single outcome. Arbitrage-free prices are exactly the convex combinations of valid payoff vectors. Second, as we run the costbased market, we periodically remove arbitrage by projecting the market state onto the set of arbitrage-free prices, using the IP solver as an oracle within the projection algorithm. The integer program for payoff vectors is typically compact in size and easy to specify based on security definitions. For instance, when securities correspond to logical propositions, outcomes correspond to truth-assignment of literals, and each valid payoff vector enumerates 0 for false and 1 for true propositions in a given outcome. Conjunctions and disjunctions are easily expressed within an IP, so we have a compact representation for all problems in NP. To implement projection, we use the Frank-Wolfe algorithm [Frank and Wolfe 1956; Jaggi 2013], also known as the conditional gradient algorithm, which is well-suited to our setting because it only accesses the target set (in our case, the set of valid payoff vectors) through the operation of linear optimization, which can be handled by an IP solver. The projection that we consider is the Bregman projection, which generalizes the Euclidean projection to arbitrary convex potentials.\nThere are two specific issues in applying the Frank-Wolfe (FW) algorithm within cost-based markets. First, while all iterates of the FW algorithm are within the convex hull of valid payoff vectors, and therefore arbitrage-free, we need to ensure that bounded loss is maintained. In Sec. 4.2, we show how to achieve this by a suitable modification of the stopping condition of FW. The second, seemingly more serious concern, is that the projection problems that arise for common cost functions, such as Hanson\u2019s [2003; 2007] logarithmic market scoring rule (LMSR), exhibit derivatives that go to infinity at the border of the set of arbitrage-free prices, which violates the assumptions of the FW algorithm. Fortunately, we can adapt a recently developed variant of FW [Krishnan et al. 2015], designed for the case when the derivative might grow to infinity, but its growth is suitably controlled, which is the case for LMSR.\nOur approach, which we call the Frank-Wolfe market maker (FWMM), is related to Dud\u0131\u0301k et al.\u2019s [2012] linearly-constrained market maker (LCMM), which also alternates trades and (partial) arbitrage removal. While FWMM uses linear constraints in the IP to define valid payoff vectors, the arbitrage removal in LCMM is driven by a set of linear constraints on the arbitrage-free prices (i.e., the convex hull of valid payoff vectors). The\nIP constraints of FWMM can be used directly in LCMM, as linear-programming relaxations, but they are usually too loose, so tighter constraints need to be derived ad hoc for each new security type, sometimes using involved combinatorial reasoning [Dud\u0131\u0301k et al. 2012, 2013]. Since LCMM updates are usually substantially faster than solving an IP, the arbitrage-removal steps of LCMM and FWMM can be interleaved, and the more expensive projection step of FWMM should be invoked only after LCMM cannot remove much arbitrage.\nWe evaluate the efficacy of FWMM on Yahoo!\u2019s NCAA 2010 basketball tournament prediction market data, from which we extracted 88k trades on 5k securities in a combinatorial market with 263 outcomes. Once the projections become practically fast, FWMM achieves superior accuracy to LCMM. Our experiments also show that the initial phase of the projection algorithm, which involves calls to the IP solver to decide which securities can be logically settled given the games completed so far, is fast even for the largest problem sizes. The results from this initial phase can be propagated as a partial outcome into the cost function, which yields an improvement over LCMM even when the overall projection algorithm is too slow.\nTournaments have previously been considered by Chen et al. [2008] and Xia and Pennock [2011]. Both focus on restricted (but non-trivial) tournament betting languages that yield tractability, but cannot, for instance, handle comparisons. In contrast, our approach works for general outcome spaces that can be represented by an IP, rather than only tournaments. Our work is closely related to the applications of Frank-Wolfe and integer programming to inference in graphical models [Belanger et al. 2013; Krishnan et al. 2015], but needs to address several issues specific to incentives and information revelation in prediction markets."}, {"heading": "2. PRELIMINARIES", "text": "We begin with an overview of cost-based market making [Abernethy et al. 2011; Chen and Pennock 2007] and then provide a high-level outline of our approach. As a running example we use the NCAA 2010 Tournament: a single-elimination tournament with 64 teams playing over 6 rounds, meaning that in each round, half of the remaining teams are eliminated."}, {"heading": "2.1. Cost-based market making", "text": "Let \u2126 denote a finite set of outcomes, corresponding to mutually exclusive and exhaustive states of the world. We are interested in eliciting expectations of binary random variables \u03c6i : \u2126 \u2192 {0, 1}, indexed by i \u2208 I, which model the occurrence of various events such as \u201cDuke wins the NCAA championship.\u201d Each variable \u03c6i is associated with a security, which is a contract that pays out \u03c6i(\u03c9) dollars when the outcome \u03c9 occurs. Therefore, the random variable \u03c6i is also called the payoff function. Binary securities pay out $1 if the specified event occurs and $0 otherwise. The vector (\u03c6i)i\u2208I is denoted \u03c6. Traders buy bundles \u03b4 \u2208 RI of security shares issued by a central market maker; negative entries in \u03b4 are permitted and correspond to short-selling. A trader holding a bundle \u03b4 receives a (possibly negative) payoff \u03b4 \u00b7 \u03c6(\u03c9) when \u03c9 \u2208 \u2126 occurs.\nFollowing Chen and Pennock [2007] and Abernethy et al. [2011], we assume that the market maker determines security prices using a convex and differentiable potential function C : RI \u2192 R called a cost function. The state of the market is specified by a vector \u03b8 \u2208 RI listing the number of shares of each security sold so far by the market maker. A trader wishing to buy a bundle \u03b4 in the market state \u03b8 must pay C(\u03b8+\u03b4)\u2212C(\u03b8) to the market maker, after which the new state becomes \u03b8 + \u03b4. Thus, the vector of instantaneous prices in the state \u03b8 is p(\u03b8) := \u2207C(\u03b8). Its entries can be interpreted as market estimates of E[\u03c6i]: a trader can make an expected profit by buying (at least a small amount) of the security i if she believes that E[\u03c6i] is larger than the instantaneous\nprice pi(\u03b8) = \u2202C(\u03b8)/\u2202\u03b8i, and by selling if she believes that E[\u03c6i] is lower than pi(\u03b8); therefore, risk neutral traders with sufficient budgets maximize their expected profits by moving the price vector to match their expectation of \u03c6.\nExample 2.1. Logarithmic market-scoring rule (LMSR). Hanson\u2019s [2003; 2007] logarithmic market scoring rule (LMSR) is a cost function for a complete market. In a complete market, I = \u2126 and securities are indicators of individual outcomes, \u03c6i(\u03c9) = 1{\u03c9 = i}, where 1{\u00b7} denotes the binary indicator, equal to 1 if true and 0 if false. Thus, traders can express arbitrary probability distributions over \u2126. For instance, to set up a complete market for the number of wins of Duke in the six-round NCAA tournament, we would set I = \u2126 = {0, 1, . . . , 6}. LMSR has the form C(\u03b8) = log( \u2211 i\u2208I e \u03b8i)\nand prices pi(\u03b8) = e\u03b8i/( \u2211 j\u2208I e \u03b8j ).\nExample 2.2. Sum of independent markets. Now consider a market with 7 securities for the number of wins of Duke and an additional 7 securities for the number of wins of Cornell. The outcome space consists of pairs of numbers between 0 and 6, but not all pairs are possible, because if Duke and Cornell win rounds 1\u20134, they meet in round 5 and only one advances. Thus, \u2126 = {(\u03c91, \u03c92) \u2208 {0, . . . , 6}2 : min{\u03c91, \u03c92} \u2264 4}. Securities are indexed by pairs I = {1, 2} \u00d7 {0, . . . , 6}, with the first entry indicating the school and the second the number of wins, yielding the payoff functions \u03c6j,x(\u03c9) = 1{\u03c9j = x}. A natural cost function is the sum of LMSRs, C(\u03b8) = \u22112 j=1 log( \u22116 x=0 e\n\u03b8j,x), which yields prices pj,x(\u03b8) = e\u03b8j,x/( \u22116 y=0 e\n\u03b8j,y ). Thus, prices vary independently for each school, as if we ran two separate markets."}, {"heading": "2.2. Arbitrage, marginal polytope and Bregman projection", "text": "We consider two standard desiderata for cost-based markets. The first is the bounded loss property: there should be a constant which bounds the ultimate loss of the market maker once the outcome is determined, regardless of how many shares of each security are sold. The second is the no arbitrage property: there should be no trade that guarantees a positive profit, regardless of the outcome. Following Abernethy et al. [2011], we next relate bounded loss to properties of the convex conjugate of C, and review equivalence between optimal arbitrage removal and Bregman projection.\nGiven a cost function C, let R denote its convex conjugate,\nR(\u00b5) := sup \u03b8\u2032\u2208RI\n[ \u03b8\u2032 \u00b7 \u00b5\u2212 C(\u03b8\u2032) ] , (1)\nwhich is itself a convex function on RI , allowed to take on the value\u221e. If the market is in a state \u03b8 = 0 and a trader believes that E[\u03c6] = \u00b5, then her expected profit for the bundle \u03b8\u2032 is \u03b8\u2032 \u00b7\u00b5\u2212 ( C(\u03b8\u2032)\u2212C(0) ) , which is maximized by Eq. (1), omitting the constant\nterm C(0). More generally, the maximum expected profit of a trader with a belief \u00b5 in a market state \u03b8 can be shown to equal the mixed Bregman divergence, defined as\nD(\u00b5\u2016\u03b8) := R(\u00b5) + C(\u03b8)\u2212 \u03b8 \u00b7 \u00b5 .\nConvex conjugacy implies that D(\u00b5\u2016\u03b8) \u2265 0, with equality if and only if \u00b5 = p(\u03b8), which is equivalent to \u03b8 \u2208 \u2202R(\u00b5), where \u2202R is the subdifferential of R.\nExample 2.3. For the LMSR, R(\u00b5) is equal to negative entropy whenever \u00b5 is a probability distribution and\u221e otherwise, i.e., R(\u00b5) = I{\u00b5 \u2208 \u2206}+ \u2211 i\u2208I \u00b5i ln\u00b5i, where \u2206 is the set of probability distributions on \u2126 and I{\u00b7} denotes the convex indicator, equal to 0 if true and\u221e if false. Bregman divergence is the Kullback-Leibler (KL) divergence, D(\u00b5\u2016\u03b8) = I{\u00b5 \u2208 \u2206}+ \u2211 i\u2208I \u00b5i ln (\u00b5i/pi(\u03b8)), which is an information-theoretic measure of the difference between two probability distributions.\nLet Z := {\u03c6(\u03c9) : \u03c9 \u2208 \u2126} denote the (finite) set of all valid payoff vectors, andM be its convex hull, called the marginal polytope. The marginal polytope is exactly the set of vectors \u00b5 that can be written as expectations E[\u03c6] under some probability distribution over \u2126, so we refer to elements ofM as coherent beliefs or coherent prices. Abernethy et al. [2011] show that a cost-based market maker has the bounded loss property if and only if maxz\u2208Z R(z) <\u221e. We assume that this is the case for the conjugate of our cost C. Note that this assumption is satisfied for LMSR, because negative entropy equals zero at the vertices of the simplex. It is also satisfied in Example 2.2, where R(\u00b5) is the sum of negative entropies of the two markets.\nGiven a state \u03b8, we define the Bregman projection of \u03b8 onM as the point \u00b5? := argmin\n\u00b5\u2208M D(\u00b5\u2016\u03b8) .\nThe Bregman projection is related to an optimal arbitraging trade by the following standard result (the proof is in Appendix A for completeness):\nPROPOSITION 2.4. If the market is in a state \u03b8, the guaranteed profit of any trader is at most D(\u00b5?\u2016\u03b8) where \u00b5? is the Bregman projection of \u03b8 onM. Furthermore, this profit is achieved by any trade \u03b4? moving the market to a state \u03b8? with p(\u03b8?) = \u00b5?.\nThis means that an arbitrage opportunity exists whenever the prices are incoherent, since p(\u03b8) 6\u2208 M implies that D(\u00b5?\u2016\u03b8) > 0. After the trade \u03b4?, we have p(\u03b8?) = \u00b5? \u2208M and thus there is no arbitrage opportunity in the market."}, {"heading": "2.3. The outline of Frank-Wolfe market maker (FWMM)", "text": "The mechanism proposed in this paper, called Frank-Wolfe market maker, alternates between processing trades according to the cost C and removing arbitrage. In the arbitrage removal step, our goal is to find the state \u03b8? from Proposition 2.4. We do this by solving the Bregman projection problem using the Frank-Wolfe (FW) algorithm, which reduces the Bregman projection problem to a sequence of linear programs of the form\nmin \u00b5\u2208M\nc \u00b7 \u00b5 ,\nfor suitably chosen vectors c. Since the optimum of a linear program occurs at a vertex, reducing the Bregman projection problem to a sequence of linear programs results in an important simplification. Instead of specifying the marginal polytope M, whose description can be exponentially large in the number of securities, it suffices to describe its vertices Z, which we show can be done via a compact set of linear inequalities together with integer constraints. More precisely, we assume that the set Z is described by a matrix A and a vector b such that\nZ = { z \u2208 {0, 1}I : A>z \u2265 b } . (2)\nViewed in this way, the FW algorithm solves the Bregman projection problem by solving a sequence of integer programs. We refer to the linear constraints describing the set Z as IP constraints.\nExample 2.5. We next derive IP constraints for the market for the number of wins of Duke and Cornell from Example 2.2. First, there are exclusivity and exhaustivity constraints of the form \u22116 x=0 zj,x = 1 for j \u2208 {1, 2}, corresponding to the fact that in any outcome \u03c9, for each j, exactly one of the securities \u03c6j,x(\u03c9) will equal 1 across x \u2208 {0, . . . , 6}. However, these two constraints do not capture the fact that at most one of the teams can have exactly 5 or 6 wins. Specifically, in any outcome \u03c9, we have\n\u03c61,5(\u03c9) + \u03c62,5(\u03c9) + \u03c61,6(\u03c9) + \u03c62,6(\u03c9) \u2264 1 .\nThus, we also include the third constraint: z1,5 + z2,5 + z1,6 + z2,6 \u2264 1. Our reasoning so far shows that any valid payoff vector satisfies the three mentioned constraints. It can be verified that any vector z satisfying these constraints is valid, i.e., it corresponds to \u03c6(\u03c9) for some \u03c9 \u2208 \u2126, so these three constraints correctly specify Z."}, {"heading": "2.4. Linearly-constrained market maker (LCMM)", "text": "The FW algorithm relies on the ability to solve integer programs (IPs), which can take exponential time in the worst case. Therefore, our mechanism also incorporates fast (poly-time) partial arbitrage removal similar to Dud\u0131\u0301k et al.\u2019s [2012] linearly-constrained market maker (LCMM).\nIn LCMM, arbitrage is partly removed by considering a set of linear constraints that must be satisfied by coherent prices. Namely, an LCMM takes as an input a relaxation M\u0303 \u2287M described by linear constraints called LCMM constraints:\nM\u0303 = {\u00b5 \u2208 RI : A\u0303>\u00b5 \u2265 b\u0303} . When any LCMM constraint is violated, there is an arbitrage opportunity in the market, with an easy-to-compute arbitraging trade. LCMM acts as an arbitrager until none of the constraints are violated. Since M\u0303 is a relaxation ofM, the resulting state is not necessarily arbitrage-free.\nAssuming we have a description of Z using IP constraints specified by a matrix A and a vector b, one simple strategy is to construct M\u0303 as a linear-program (LP) relaxation of Z, i.e.,\nM\u0303 = {\u00b5 \u2208 RI : \u00b5i \u2208 [0, 1] for all i \u2208 I and A>\u00b5 \u2265 b} . (3) These constraints are satisfied by all z \u2208 Z and hence also by their convex combinations \u00b5 \u2208 M. Generally, this relaxation is only a loose superset of M, so various ad hoc strategies are required to obtain a tighter M\u0303 [Dud\u0131\u0301k et al. 2012, 2013]. We present one example of such a strategy in Sec. 3, for the class of comparison securities."}, {"heading": "3. MARKET DESIGN", "text": "We next show how to instantiate the market design elements of Sec. 2 in real-world combinatorial markets, including the NCAA 2010 tournament evaluated in Sec. 5. Namely, we need to define: (i) the payoff function\u03c6, (ii) the cost functionC, (iii) the initial market state \u03b8, (iv) the IP constraints describing Z, and (v) the LCMM constraints describing M\u0303. We also need to consider how the cost and market state should be updated as the true outcome is gradually revealed over time. For example, in the NCAA tournament, 63 games play out over the course of several weeks and we would like to fix prices of securities whose payoff has already been determined."}, {"heading": "3.1. Compositional market design", "text": "We use a compositional market design along the lines of Dud\u0131\u0301k et al. [2013], which is a generalization of the sum of LMSRs structure of Example 2.2. The market construction begins with a collection of random variables Xj : \u2126 \u2192 Xj , indexed by j \u2208 J , whose marginal distributions we wish to elicit, such as the number of wins of Duke and Cornell in Example 2.2. Securities are indexed by i = (j, x), with j \u2208 J and x \u2208 Xj , and correspond to indicators of the events Xj = x, i.e.,\n\u03c6j,x(\u03c9) = 1{Xj(\u03c9) = x} . The cost function is the sum of LMSRs across the random variables Xj :\nC(\u03b8) = b \u2211 j\u2208J ln (\u2211 x\u2208Xj e \u03b8j,x/b ) , (4)\nwhere b > 0 is the liquidity parameter controlling how fast the prices change in response to trading. A smaller value of b (lower liquidity) means prices rise faster as shares are purchased; a larger value of b (higher liquidity) yields slower changes. As in Example 2.2, Eq. (4) implies that we effectively run an independent LMSR market for each Xj . Thus, in the absence of arbitrage removal steps, we say that C implements the independent markets cost function.\nInitially, our market contains no random variables and hence no securities. The market operator can create new random variables and specify their relationship to any existing variables. At the time of creation of a new variable Xj , the operator specifies (i) its domain Xj , (ii) the mapping Xj(\u03c9), (iii) initial prices \u00b5j,x across x \u2208 Xj (these prices determine the initial-state coordinates \u03b8j,x), (iv) IP constraints to restrict zj,x across x \u2208 Xj , and (v) LCMM constraints to restrict \u00b5j,x across x \u2208 Xj . Due to the additive structure of the cost C, new variables Xj can be added at any time during the run of the market without affecting prices of existing securities.\nBelow we specify the items (i)\u2013(v) for different types of random variables in our market. When describing the IP constraints on z and LCMM constraints on \u00b5, we use the notation z{Xj = x} and \u00b5{Xj = x} for the entries zj,x and \u00b5j,x, respectively. We also allow random variables with names other than Xj , e.g., X or Gr,t, and use the notation such as z{X = x} and \u00b5{X = x} for the corresponding entries of z and \u00b5.\nWhen adding a new random variable X, the initial prices \u00b5{X = x} can be chosen based on the prices of the random variables present in the market. New IP constraints always include the exclusivity and exhaustivity constraint, \u2211 x\u2208X z{X = x} = 1, but additional constraints may be needed to correctly describe the mapping X(\u03c9). We add LCMM constraints using the simple strategy mentioned in Sec. 2.4, as an LP relaxation of IP constraints, with an exception of one variable type (comparison variables).\nOur market contains random variables of the following types:\nAtomic tournament variables. These random variables model outcomes in a singleelimination tournament with k rounds and 2k teams. Teams are numbered 1 through 2k. In the first round, there are 2k\u22121 games, between teams 2i\u2212 1 and 2i, and the resulting 2k\u22121 winners advance to the second round, where again teams are matched in the order of increasing indices and the winners advance to the next round etc. The team t is associated with the random variable Xt whose outcome is the total number of wins of team t, i.e., Xt = {0, . . . , k}.\nWe also have random variables corresponding to the games played, with the outcome of each variable being the winner of the corresponding game. For a team t and round r, let Gr,t denote the game that the team t will play in the r-th round if it advances to that point. We are slightly abusing notation, because Gr,t and Gr,t\u2032 can refer to the same game (and hence the same random variable) for distinct t and t\u2032 (see Fig. 1). For instance Gk,t \u2261 Gk,t\u2032 for all t, t\u2032, as there is only one game (the finals) in round k. With this notation in hand, we can introduce the IP constraints relating the entries of z\nrepresenting game and team variables:\nz{Xt = r} = z{Gr,t = t} \u2212 z{Gr+1,t = t} for all t and r < k, z{Xt = k} = z{Gk,t = t} for all t.\nLCMM constraints are just LP relaxations of the above, i.e., they are the same as the IP constraints, with z{\u00b7} replaced with \u00b5{\u00b7}. The market operator needs to specify initial prices \u00b5{Xt = r} and \u00b5{Gk,t = t} explicitly, based for instance on the past performance of teams.\nSums. Given a set of existing random variables X1, . . . , Xn taking on integer values with the minimum and maximum values mj := minXj and Mj := maxXj , we define a new random variable X to represent their sum,\nX(\u03c9) := X1(\u03c9) + \u00b7 \u00b7 \u00b7+Xn(\u03c9) , with the domain X = {m,m + 1, . . . ,M} where m = \u2211n j=1mj and M = \u2211n j=1Mj . The initial prices are set proportional to a discretized Gaussian distribution with the mean and variance equal to the sum of means and variances of X1 through Xn, under the distribution described by the current prices \u00b5{Xj = x}.\nWe introduce the following IP constraint:\u2211 x\u2208X x \u00b7 z{X = x} = \u2211n j=1 \u2211 xj\u2208Xj xj \u00b7 z{Xj = xj} .\nAs before, the added LCMM constraint is an LP relaxation of the added IP constraint.\nComparisons. Given two existing random variables X1 and X2 taking on integer values with the minimum and maximum values mj := minXj and Mj := maxXj , we define a new random variable X with the domain {lt, eq, gt} to represent the result of their comparison:\nX(\u03c9) :=  lt if X1(\u03c9) < X2(\u03c9), eq if X1(\u03c9) = X2(\u03c9), gt if X1(\u03c9) > X2(\u03c9).\nThe initialization prices are determined by first considering an integer-valued variable Y = X2 \u2212X1, and initializing its distribution to the discrete Gaussian with the mean equal to the difference of means and the variance initialized to the sum of variances of X2 and X1 under current prices. The initial prices of X = lt, X = eq and X = gt are obtained as probabilities that Y < 0, Y = 0 and Y > 0. The variable Y is discarded and is not part of the market.\nThe IP constraints for the new entries of z are based on the following four identities:\nX1 \u2212X2 \u2265 (m1 \u2212M2)1{X1 < X2} , X1 \u2212X2 \u2212 1 \u2265 (m1 \u2212M2 \u2212 1)1{X1 \u2264 X2} , X1 \u2212X2 \u2264 (M1 \u2212m2)1{X1 > X2} , X1 \u2212X2 + 1 \u2264 (M1 \u2212m2 + 1)1{X1 \u2265 X2} .\nTo obtain IP constraints, we replace each Xj with \u2211 x\u2208Xj x \u00b7 z{Xj = x} on the left-hand side, and replace the comparison indicators on the right-hand side by z{X = lt} for 1{X1 < X2}, and z{X= lt}+ z{X= eq} for 1{X1 \u2264 X2}, and similarly for X1 > X2 and X1 \u2265 X2.\nLCMM constraints in this case are not simply an LP relaxation of IP constraints, but instead they yield a tighter set M\u0303. They are based on the following identities, which can be derived from the transitivity of the comparison and the union bound:\nP{X1 \u2264 x} \u2264 P{X1 < X2}+ P{X2 \u2264 x} for all x \u2265 m1 and x \u2264M2, P{X1 \u2264 x} \u2264 P{X1 \u2264 X2}+ P{X2 < x} for all x \u2265 m1 and x \u2264M2.\nFor instance, the first inequality follows because X1 \u2264 x implies that either X1 < X2 or X2 \u2264 x. Otherwise we would have a contradiction: X1 \u2265 X2 > x. The resulting LCMM constraints are\n\u00b5{X1 \u2264 x} \u2264 \u00b5{X = lt}+ \u00b5{X2 \u2264 x} for all m1 \u2264 x \u2264M2, \u00b5{X1 \u2264 x} \u2264 \u00b5 { X \u2208 {lt, eq} } + \u00b5{X2 < x} for all m1 \u2264 x \u2264M2,\nwith analogous constraints with X1 and X2 swapped (and gt swapped for lt). We use the shorthand \u00b5{X \u2208 E} for \u2211 x\u2208E \u00b5{X = x}."}, {"heading": "3.2. Partial outcomes", "text": "In a typical combinatorial market, outcomes are gradually revealed over time. For example, in the NCAA tournament, 63 games play out over the course of several weeks. Thus, the market evolves through a sequence of partial outcomes defined as follows:\nDefinition 3.1. A subset \u03c3 \u2286 I \u00d7 {0, 1} is called a partial outcome if there exists a valid payoff vector z \u2208 Z such that zi = b for all (i, b) \u2208 \u03c3.\nWe write I\u03c3 := {i : (i, b) \u2208 \u03c3 for some b} for the set of securities whose payoffs have been determined, or settled, by \u03c3. As securities get settled, we would like to fix their prices to 0 or 1. This is not possible by simply updating the state, but instead we need to switch to a different cost function while maintaining the information state of the market. We adapt the construction of Dud\u0131\u0301k et al. [2014] to our setting.\nFirst, we say that a vector u \u2208 RI is compatible with \u03c3 if ui = b for all (i, b) \u2208 \u03c3. We write V\u03c3 for the set of vectors compatible with \u03c3\u2014note that V\u03c3 is an axis-aligned affine space of dimension |I\\I\u03c3|. Given a partial outcome \u03c3, we define the set of associated valid payoffs Z\u03c3 := Z \u2229 V\u03c3, and the associated marginal polytopeM\u03c3 := conv(Z\u03c3). We assume that given a partial outcome \u03c3, the market maker uses the cost function\nC\u03c3(\u03b8) = sup\u00b5\u2208V\u03c3 [\u03b8 \u00b7 \u00b5\u2212R(\u00b5)] , (5)\nwhose conjugate is, by definition, R\u03c3(\u00b5) = R(\u00b5) + I{\u00b5 \u2208 V\u03c3}, which coincides with R onM\u03c3. The corresponding price map and Bregman divergence are denoted p\u03c3 and D\u03c3. The transformation of C to C\u03c3 maintains the loss bound of the original market maker (see Appendix B) and also maintains the information state of the market analogously to conditioning, as our next example shows.\nExample 3.2. Partially settled LMSR. Recall that in a complete market, I = \u2126 and payoff vectors \u03c6(\u03c9) have exactly one entry equal to 1: the entry corresponding to the realized outcome. Therefore, the partial outcome \u03c3 can have at most one security settled to 1. If there is such a security i? then the market is fully settled and, by Eq. (5), we obtain C\u03c3(\u03b8) = \u03b8i? , p\u03c3,i(\u03b8) = 1{i = i?}. If \u03c3 only contains securities settled to zero, i.e., the corresponding outcomes have been excluded, the cost function obtained by Eq. (5) is an LMSR over the remaining outcomes, C\u03c3(\u03b8) = log( \u2211 i 6\u2208I\u03c3 e\n\u03b8i). The prices are p\u03c3,i(\u03b8) = 0 for i \u2208 I\u03c3 and p\u03c3,i(\u03b8) = e\u03b8i/( \u2211 j 6\u2208I\u03c3 e\n\u03b8j ) for i 6\u2208 I\u03c3, so the probability distribution over \u2126 described by p\u03c3(\u03b8) corresponds to p(\u03b8) conditioned on the event \u03c9 6\u2208 I\u03c3."}, {"heading": "4. FRANK-WOLFE MARKET MAKER", "text": "In this section we fully describe and analyze the Frank-Wolfe market maker (FWMM) outlined in Sec. 2.3.\nAt a high level, FWMM interleaves rapid pricing according to C with arbitrage removal, while also updating the partial outcome\u2014see Mechanism 1. There are two kinds of arbitrage removal: fast but only partial arbitrage removal via an LCMM\nMECHANISM 1: Frank-Wolfe Market Maker (FWMM) Input: cost function C, initial state \u03b80, initial partial outcome \u03c30,\nLCMM constraints specified by A\u0303, b\u0303, IP constraints specified by A, b, FW algorithm parameters \u03b1 \u2208 (0, 1), \u03b50 \u2208 (0, 1), \u03b5D > 0\nInitialize the market state and partial outcome: \u03b8 \u2190 \u03b80, \u03c3 \u2190 \u03c30 For t = 1, . . . , T (where T is an a priori unknown number of trades):\nreceive a request for a bundle \u03b4t sell the bundle \u03b4t for the cost C\u03c3(\u03b8 + \u03b4t)\u2212 C\u03c3(\u03b8) \u03b8 \u2190 \u03b8 + \u03b4t \u03c3 \u2190 \u03c3 \u222a {newly settled securities if any} perform an LCMM step:\nchoose \u03b7 \u2265 0 such that C\u03c3(\u03b8 + A\u0303\u03b7)\u2212 C\u03c3(\u03b8) \u2264 b\u0303 \u00b7 \u03b7 \u03b8 \u2190 \u03b8 + A\u0303\u03b7\nperform a projection step: (\u03c3,\u03b8)\u2190 ProjectFW(\u03b8; C, \u03c3,A,b, \u03b1, \u03b50, \u03b5D)\nObserve \u03c9, consistent with \u03c3 Pay traders \u03b41 \u00b7 \u03c6(\u03c9), \u03b42 \u00b7 \u03c6(\u03c9), . . . , \u03b4T \u00b7 \u03c6(\u03c9)\nstep, and a complete removal of the remaining arbitrage via Bregman projection. For LCMM steps we use the fast algorithm of Dud\u0131\u0301k et al. [2012]. Bregman projection is implemented via a variant of the Frank-Wolfe (FW) algorithm, which we refer to as ProjectFW and describe later in this section. ProjectFW does not only return a new state \u03b8 such that p\u03c3(\u03b8) is the Bregman projection of the previous state onM\u03c3. It also extends the partial outcome to securities that can be logically settled based on all other settled securities. This permanently removes the specific arbitrage opportunities associated with such securities since their prices become fixed to 0 or 1.\nBoth arbitrage-removal steps correspond to trades that yield a non-negative profit regardless of the outcome, which means that the loss bound of the original cost C is only improved by the value of this profit. The non-negative profit of LCMM steps follows from Dud\u0131\u0301k et al. [2012]. For ProjectFW, which is an iterative algorithm, we guarantee non-negative profit by designing a suitable stopping condition.\nAs we mention earlier, while we hope that the IPs created during the run of the FW algorithm are easy to solve, they are NP-hard in general, and so the IP solver can get stuck in a brute-force search. Therefore, we need the ability to interrupt the projection step, for instance, when a new trade arrives. When our implementation, ProjectFW, is interrupted in early stages, it yields no update. In later stages, it returns an arbitragefree market state corresponding to a trade with a non-negative but possibly suboptimal profit. Thus, the loss bound is always maintained, even when ProjectFW is interrupted."}, {"heading": "4.1. Fully-corrective Frank-Wolfe algorithm", "text": "Recall that the FW algorithm reduces the problem of Bregman projection, i.e., a convex minimization over the setM, into a sequence of linear optimization problems over the set Z. Our version, presented as Algorithm 2, is based on the fully-corrective variant of the Frank-Wolfe algorithm [Jaggi 2013], also known as the simplicial decomposition method [Bertsekas 2015], which we overview next.\nThe FW algorithm solves problems of the form\nmin \u00b5\u2208M\nF (\u00b5) , (6)\nwhereM is a compact convex set (in our case a polytope) and F is a convex function. Over the course of iterations t = 1, 2, . . . , the algorithm maintains an active set Zt of the vertices of the polytopeM that have been discovered so far, and repeatedly:\n(1) solves the minimization over the convex hull of Zt\u22121 to obtain a new iterate \u00b5t := argmin\n\u00b5\u2208conv(Zt\u22121) F (\u00b5) ,\n(2) finds a new descent vertex zt in the direction of the (negative) gradient of F ,\nzt := argmin z\u2208Z\n[ \u2207F (\u00b5t) \u00b7 z ] ,\n(3) and adds zt to the set of active vertices, so Zt = Zt\u22121 \u222a {zt}. Note that while the set Z of valid payoffs can be exponentially large, the set of active\nvertices Zt grows by only one vertex per iteration (and is initialized with only a small number of vertices). Therefore, Step (1), which is a convex optimization problem of dimension |Zt|, can be solved efficiently by standard algorithms. We use accelerated projected gradient [Nesterov 2007].\nStep (2), the linear optimization over the set Z, is the computationally expensive step. As discussed in Sec. 2.3, in our case it can be implemented by a call to an IP solver. In all of our experiments, the running time of Step (2) substantially dominated the running time of Step (1).\nThe convergence of the FW algorithm is analyzed via the FW gap, defined as\ng(\u00b5) := max z\u2208Z\n[ \u2207F (\u00b5) \u00b7 (\u00b5\u2212 z) ] ,\nwhich bounds the suboptimality of \u00b5. Specifically, g(\u00b5) \u2265 F (\u00b5)\u2212 F (\u00b5?), where \u00b5? is a solution to Eq. (6). Thus, we can just monitor the gap g(\u00b5t) = \u2207F (\u00b5t) \u00b7 (\u00b5t \u2212 zt), and return the iterate \u00b5t when the gap becomes sufficiently small. The gap converges to zero at the rate of O(Ldiam(M)/t) where L is the Lipschitz constant of \u2207F under an arbitrary norm and diam(M) is the diameter ofM under the same norm [Jaggi 2013].\nTo apply the FW algorithm to the problem of Bregman projection, we set its objective to the Bregman divergence: F (\u00b5) = D(\u00b5\u2016\u03b8) = R(\u00b5) +C(\u03b8)\u2212 \u03b8 \u00b7 \u00b5. One formal problem arises due to the fact that the function R is not necessarily differentiable only subdifferentiable. To overcome this, we assume existence of a differentiable extension R\u0304. For LMSR, this is R\u0304(\u00b5) = I{\u00b5 \u2265 0} + \u2211 i\u2208I \u00b5i ln\u00b5i, and similarly for the sum of LMSRs. The key point is that R\u0304 coincides with R overM, so we can optimize the (differentiable) function F (\u00b5) = R\u0304(\u00b5) + C(\u03b8)\u2212 \u03b8 \u00b7 \u00b5. (More details in Appendix C.)\nApart from differentiability, there are two additional challenges in applying the FW algorithm within Mechanism 1. First, we need to choose a stopping condition for the FW algorithm that would yield a state update with a guaranteed profit, since such updates maintain the worst-case loss bound of the market maker. Second, even though we have achieved the differentiability of F for our case of interest (the sum of LMSRs), the resulting derivative is unbounded, so the standard convergence analysis of FW does not apply. Fortunately, the growth of the derivative at the boundary is sufficiently controlled to obtain convergence of a modified version of FW, which is what we use in Algorithm 2. (The precise statement of the controlled growth condition is in Appendix C.)\nThe modified version of FW, due to Krishnan et al. [2015], performs FW iterations over a contracted version of the polytope M, or, more precisely, over a contracted version of M\u03c3\u0302, which reflects already settled securities. The contracted polytope is defined as M\u2032 := (1 \u2212 \u03b5)M\u03c3\u0302 + \u03b5u, where u \u2208 M\u03c3\u0302 is a coherent price vector whose coordinates are neither 0 nor 1, except for those already settled by \u03c3\u0302. In other words, M\u2032 is a version of M\u03c3\u0302 shrunk towards the point u, which we call an interior point.\nALGORITHM 2: ProjectFW. Bregman Projection via Adaptive Fully-Corrective Frank-Wolfe. Input: cost function C, state \u03b8, partial outcome \u03c3,\nIP constraints specified by A, b, approx. ratio \u03b1 \u2208 (0, 1), initial contraction \u03b50 \u2208 (0, 1), convergence threshold \u03b5D > 0\nOutput: extended partial outcome \u03c3\u0302 \u2287 \u03c3 state \u03b8\u0302, whose price vector is an approx. Bregman projection of \u03b8 onM\u03c3\u0302 in the sense that one of the following holds:\n1. p\u03c3\u0302(\u03b8\u0302) \u2208M\u03c3\u0302 and moving from \u03b8 to \u03b8\u0302 guarantees the profit of \u03b1D\u03c3\u0302(\u00b5?\u2016\u03b8) 2. \u03b8\u0302 = \u03b8 and D\u03c3\u0302(\u00b5?\u2016\u03b8) \u2264 \u03b5D 3. algorithm was interrupted; moving from \u03b8 to \u03b8\u0302 guarantees a non-negative profit\nwhere \u00b5? = argmin\u00b5\u2208M\u03c3\u0302 D\u03c3\u0302(\u00b5\u2016\u03b8) Initialize the interior point, active vertex set, and extend the partial outcome:\n(u,Z0, \u03c3\u0302)\u2190 InitFW(\u03c3,A,b) Define the objective function: F (\u00b5) := R\u0304\u03c3\u0302(\u00b5)\u2212 \u03b8 \u00b7 \u00b5+ C\u03c3\u0302(\u03b8)\nFor t = 1, 2, . . . perform a FW iteration on the contracted polytope:\nlet Z \u2032 = (1\u2212 \u03b5t\u22121)Zt\u22121 + \u03b5t\u22121u denote the contracted active set \u00b5t \u2190 argmin\u00b5\u2208conv(Z\u2032) F (\u00b5) \u03b8t \u2190 \u2207R\u0304\u03c3\u0302(\u00b5t) call IP solver to find the descent vertex (note that \u2207F (\u00b5t) = \u03b8t \u2212 \u03b8): zt \u2190 argminz\u2208Z\u03c3\u0302 (\u03b8t \u2212 \u03b8) \u00b7 z Zt = Zt\u22121 \u222a {zt}\ncompute the FW gap g(\u00b5t) = (\u03b8t \u2212 \u03b8) \u00b7 (\u00b5t \u2212 zt) update the best-iterate-so-far t? \u2190 argmax\u03c4\u2264t [ F (\u00b5\u03c4 )\u2212 g(\u00b5\u03c4 ) ] check stopping conditions:\nif g(\u00b5t) \u2264 (1\u2212 \u03b1)F (\u00b5t), or F (\u00b5t) \u2264 \u03b5D, or termination requested\nreturn \u03c3\u0302 and \u03b8\u0302 = { \u03b8t\u2217 if g(\u00b5t\u2217) \u2264 F (\u00b5t\u2217) \u03b8 otherwise\nadapt contraction if necessary: let gu = (\u03b8t \u2212 \u03b8) \u00b7 (\u00b5t \u2212 u) if gu < 0 and g(\u00b5t)/(\u22124gu) < \u03b5t\u22121 \u03b5t \u2190 min { g(\u00b5t)/(\u22124gu), \u03b5t\u22121/2\n} else \u03b5t \u2190 \u03b5t\u22121\nSince coordinates of u are bounded away from 0 and 1, the vertices of the contracted polytopeM\u2032 have their coordinates also bounded away from 0 and 1 (except for I\u03c3\u0302). The controlled growth property then gives a bound on the Lipschitz constant of the gradient and guarantees convergence for any fixed \u03b5, for the problem of projecting ontoM\u2032. To obtain the convergence to the projection ontoM\u03c3\u0302, we adaptively decrease \u03b5 according to the rule of Krishnan et al. [2015]. Their analysis shows that this adaptive version of FW drives the duality gap g(\u00b5t) to zero and thus indeed solves the non-contracted problem. Two missing pieces that we describe in the remainder of this section are the stopping condition and the construction of the interior point u."}, {"heading": "4.2. Stopping condition for the FW algorithm", "text": "The stopping condition needs to ensure that moving the market from a state \u03b8 to \u03b8\u0302 constitutes a trade with a non-negative profit. We start with a lower bound on the\nALGORITHM 3: InitFW. Initialization for ProjectFW. Input: partial outcome \u03c3, IP constraints specified by A, b Output: extended partial outcome \u03c3\u0302 \u2287 \u03c3\npoint u \u2208M\u03c3\u0302 such that ui \u2208 (0, 1) for i 6\u2208 I\u03c3\u0302 non-empty set Z0 of vertices ofM\u03c3\u0302\nInitialize Z0 \u2190 \u2205, \u03c3\u0302 \u2190 \u03c3, C \u2190 \u2205 For each i \u2208 I\\I\u03c3 and each b \u2208 {0, 1}\nif (i, b) 6\u2208 C call IP solver to find z\u0302 = argmaxz\u2208Z\u03c3 (2b\u2212 1)zi if z\u0302i = b Z0 \u2190 Z0 \u222a {z\u0302} C \u2190 C \u222a {(j, z\u0302j) : j \u2208 I}\nelse \u03c3\u0302 \u2190 \u03c3\u0302 \u222a {(i, 1\u2212 b)}\nIf Z0 = \u2205 Z0 \u2190 {the unique point compatible with \u03c3\u0302} Return \u03c3\u0302, Z0, and u = 1|Z0| \u2211 z\u2208Z0 z\nguaranteed profit of any iterate of the FW algorithm, and then use it to derive the stopping condition. We omit the conditioning on \u03c3\u0302 from the exposition here.\nPROPOSITION 4.1. Consider a purchase that moves the market from a state \u03b8 to a new state \u03b8\u0302 = \u2207R\u0304(\u00b5\u0302). The resulting profit is guaranteed to be at least D(\u00b5\u0302\u2016\u03b8)\u2212 g(\u00b5\u0302).\nThus, it is \u201csafe\u201d to move the market to \u03b8\u0302 whenever D(\u00b5\u0302\u2016\u03b8) \u2265 g(\u00b5\u0302) (for proof see Appendix D). To maximize the profit guarantee, we should return the iterate that maximizes the difference D(\u00b5\u0302\u2016\u03b8)\u2212 g(\u00b5\u0302), which is what we do in Algorithm 2.\nApart from a forced interruption (e.g., because of the arrival of a new trade or exceeding of the time limit), the stopping conditions of Algorithm 2 concern two separate cases. First, recall that the algorithm is minimizing F (\u00b5) = D(\u00b5\u2016\u03b8) via a sequence of iterates \u00b5t \u2208M that satisfy D(\u00b5t\u2016\u03b8)\u2192 D(\u00b5?\u2016\u03b8) and g(\u00b5t)\u2192 0 as t\u2192\u221e. Therefore, if prices p(\u03b8) are incoherent, i.e., D(\u00b5?\u2016\u03b8) > 0, eventually we will have g(\u00b5t) < D(\u00b5t\u2016\u03b8). In fact, we can guarantee something stronger. Namely, given a fixed \u03b1 \u2208 (0, 1), we will reach an iteration when\ng(\u00b5t) \u2264 (1\u2212 \u03b1)D(\u00b5t\u2016\u03b8) . At this point, our profit guarantee is at least\nD(\u00b5t\u2016\u03b8)\u2212 g(\u00b5t) \u2265 \u03b1D(\u00b5t\u2016\u03b8) \u2265 \u03b1D(\u00b5?\u2016\u03b8) thanks to the optimality of \u00b5?. This means that we are extracting at least an \u03b1-fraction of the available arbitrager profits; this covers the first stopping condition and the first output case of Algorithm 2. On the other hand, if the prices p(\u03b8) are coherent or closeto-coherent, then D(\u00b5t\u2016\u03b8) will eventually drop below our convergence threshold \u03b5D, which we can set arbitrarily small. Since D(\u00b5?\u2016\u03b8) \u2264 D(\u00b5t\u2016\u03b8), this covers the second stopping condition and the second output case of Algorithm 2. The final case follows directly from Proposition 4.1."}, {"heading": "4.3. Finding the interior point", "text": "The goal here is to find a point u \u2208 M where coordinates corresponding to unsettled securities are strictly between 0 and 1. In the process, we also obtain the initial set of active vertices and an extended partial outcome \u03c3\u0302. To construct u, Algorithm 3 iterates\nthrough coordinates i that have not been settled in the provided partial outcome \u03c3, and calls the IP solver to find a valid vector z\u0302 that is consistent with \u03c3, but also has the i-th coordinate equal to b = 0 or b = 1. If the IP solver fails to find such z\u0302 for either value b, it means that the i-th coordinate can be settled to 1\u2212 b. Otherwise the found z\u0302 is added to the set of active vertices. This guarantees that each coordinate i is either present in \u03c3\u0302, or the active set contains some valid vertices with both the value 0 and 1 at the i-th coordinate. Therefore, the average of the active vertices satisfies the requirement for u. If the active set is empty, it means that all of the securities have been settled and the unique valid vector consistent with \u03c3\u0302 satisfies the requirement."}, {"heading": "5. EXPERIMENTS", "text": ""}, {"heading": "5.1. Data description", "text": "Our data consists of bets made in Predictalot, a combinatorial prediction market run by Yahoo! in 2010 for the NCAA Men\u2019s Division I Basketball Tournament, commonly known as March Madness.1 The tournament lasted from March 18th to April 5th, 2010. It consisted of 64 teams playing a single-elimination tournament over 6 rounds. In each round, half of the remaining teams were eliminated. Traders were allowed to buy securities at any point in time throughout the tournament; the first bets were placed four days prior to the tournament start and the last bets were placed towards the end of the final match. Many bets referred to groupings of teams, known as conferences, brackets or seeds (e.g., there are sixteen seed levels and four teams to each seed).\nThere were 93 036 bets placed altogether on many different securities in Predictalot. Our experiments focus on a large subset of these, which we briefly describe here. The largest group of bets (56%) can be expressed as bundles over atomic tournament variables (winners of individual games, and the number of wins of individual teams). These include bets such as \u201cDuke wins exactly 3 games\u201d, \u201cCornell exits in round 2 or later\u201d, \u201ca team from the Big Ten conference wins the championship\u201d. In addition to these bets, we also supported combinatorial bets for comparisons of the number of wins of single teams, e.g., \u201cDuke wins more games than Cornell\u201d, and comparisons of the number of wins by teams from different conferences, e.g., \u201cteams from Big Ten win more games than teams from Big East\u201d. These were implemented as comparison variables derived from pairs of atoms, and pairs of sums, respectively. The two comparison types encompass 12% of original bets.\nOur resulting dataset contains 63 689 bets, constituting 68% of all bets in the original market. Combinatorial bets (comparisons) make up 17% of our final dataset. The three largest groups of bets we did not include were: \u201cteam t1 wins more games than t2, and t3 wins more games than t4\u201d (6%); \u201cthe number of upsets in round r will be less than/equal to/greater than c\u201d (3%); and \u201cthe sum of seeds in round r will be less than/equal to/greater than c\u201d (3%).\nPrice initialization. Our dataset contains realized trades, but we have no other price data from the run of the market. In particular, the initial Predictalot prices were not available, so we used the following scheme to initialize atomic tournament variables Xt (the number of wins of team t) and Gr,t (the outcome of a game). We considered bets within the 6 hour time window starting at 27 hours and ending at 21 hours before the\n1 Securities in the Predictalot market were priced using the Monte Carlo method with importance sampling against a dynamic proposal distribution. One of the larger issues, which we do not expect with the optimization methods presented in this work, was substantial price volatility as the tournament progressed, due to an increasing mismatch between the market belief and the proposal distribution. In order to avoid trivial arbitrage, independent samples were drawn to form the prices quoted to the traders, and the actual prices imposed on trade executions. As a result, some trades transacted at prices significantly different than quoted. [D. Pennock, personal communication, Feb. 22, 2016]\nfirst match of the tournament. Let \u00b5\u2032 denote the price at which securities were sold in this window (we use last such price if multiple exist). To initialize the game variables Gr,t, we use the prices of bets on the champion of the tournament (i.e., Xt = k):\n\u00b5{Gr,t = t} = \u00b5\u2032{Xt = k}\u2211\nt\u2032\u2208T \u00b5 \u2032{Xt\u2032 = k}\n,\nwhere T is the set of all teams that can reach the game Gr,t; if the denominator equals zero, we initialize prices \u00b5{Gr,t = t\u2032} across t\u2032 \u2208 T to a uniform distribution. To initialize securities Xt = x, we proceeded as follows. If \u00b5\u2032{Xt = x} is present, we use that as the initialization price, otherwise we use the difference between \u00b5\u2032{Gx,t = t} and \u00b5\u2032{Gx+1,t = t}, where we replace one or both of these terms by our already calculated prices according to \u00b5 whenever the \u00b5\u2032 prices are not present. The resulting prices are then normalized to sum to one for each Xt. The team and game prices are then projected on the polytope described by LCMM constraints to obtain market initialization.\nSettling outcomes. Similar to initialization prices, the times when the individual games were settled were not available, so we handcrafted a dataset consisting of all game start times2 (to the best of our knowledge, end times are not listed anywhere) and settled each game 100 minutes after the game start. The choice of 100 minutes is conservative, based on the anecdotal observation that the shortest NCAA games last about 120 minutes, including the time for commercials and timeouts."}, {"heading": "5.2. Evaluation", "text": "We compare three market treatments: independent markets (IND), the linearly contrained market maker (LCMM), and a market maker with both linear constraints and Bregman projections for arbitrage removal (FWMM). Each market maker builds upon and extends the previous one. Recall that in IND, we use LMSR to price the securities associated with each random variable, but prices for separate variables vary independently, even if the underlying events are related. LCMM enforces price relationships across random variables using linear constraints, and FWMM adds projection steps onto the marginal polytope. The market makers were implemented in Java, using Gurobi Optimizer 5.53 to solve the integer programs in the FW algorithm. We refer to our implementation as the (market) engine.\nWe evaluate the three market makers by a counterfactual replay of the trades placed in Predictalot. All the market makers depend on the liquidity parameter b (see Eq. 4). Rather than optimizing b, we used a fixed liquidity of 150 and varied each trader\u2019s budget. (The effect is equivalent, as increasing the budget increases price responsiveness to the trade orders.) Each trade order is viewed as a new agent, so the budget is constant for each trade. We used budget levels 0.1, 1, 10, 100, and 1000.\nFor each trade, the Predictalot dataset contains the number of shares purchased and the total cost paid. By taking the average price per share p\u0304, we obtain a lower bound on the trader\u2019s probability estimate when the trade was placed. From this we create a limit order for our market engine by drawing a limit price uniformly from [p\u0304, 1], and providing the constant budget level mentioned previously. A limit order states that the trader wishes to purchase shares until either the market price reaches the limit price, or the budget is exhausted, whichever occurs first. Any sell orders with average price p\u0304 were transformed into buy orders of the complementary bundle, at price 1\u2212 p\u0304, and then converted into limit orders. By using three different seeds for the randomization, we generated three input files for the market engine. All market makers were run on all\n2Source: espn.com, e.g., http://scores.espn.go.com/ncb/boxscore?gameId=300950150 3www.gurobi.com\nthree input files. As the results were highly consistent across the randomization seeds, we found three replicates to be sufficient.\nTo summarize, we ran the three different market makers (IND, LCMM, FWMM) at five budget levels (0.1, 1, 10, 100, 1000) over the three randomly generated input files. During a market run, the engine records summaries of security prices and prices of all purchased bundles. These summaries are generated at regular intervals, including every hour and every 100 trades. We use the log likelihood to assess the accuracy of the security prices, viewed as probability forecasts, at a given point in time. Let \u00b5 be the price vector. We consider log likelihoods associated with two different kinds of events. First is the log likelihood assigned to the final realized value x? of a variable X, which equals log\u00b5{X = x?}. Second is the log likelihood corresponding to the bundle of the form X \u2208 E , viewed as a binary variable (the event occurs or not), which is defined as\n1{x? \u2208 E} log\u00b5{X \u2208 E}+ 1{x? 6\u2208 E} log\u00b5{X 6\u2208 E} . A larger log likelihood indicates a better forecast. We report the average log likelihood over all variables, and the average log likelihood over all purchased bundles. The former can be viewed as an average accuracy of the market, the latter is weighted towards the part of the market that sees more trading.\nEffect of liquidity. We first examine the effect of varying the budget level (equivalently, liquidity) on the overall performance of the three market makers. Fig. 2 provides the average prediction accuracy of the three market makers over variables and bundles, where the average is taken over all hourly summaries. The plots show the expected trends: when budget is too low, traders cannot incorporate their information into the market, while when budget is too high, prices are too sensitive to individual trades. The optimal budget setting is 10 for IND and LCMM, and 100 for FWMM. However, both LCMM and FWMM are far less sensitive to the budget level than IND, because information propagation (via constraints) can correct wrong bets.\nThe improvement of FWMM over LCMM for variables ranges from 2.1% to 5.6%, with a median of 3.3% over all budget levels and random seeds. For bundles, the improvement ranges from 0.9% to 3.2%, with a median of 2.2%. For the time period covering the first 16 games, LCMM and FWMM are very similar (see the next section), bringing their average performance closer together; excluding these games, the median improvement increases from 3.3% to 12.4% for securities, and from 2.2% to 5.6% for bundles. Because accuracy here is averaged over all hourly summaries, it is implictly weighed by duration, which is hard to interpret. To obtain a more fine-grained view, we next consider the evolution of market accuracy over time.\nAccuracy over time. Fig. 3 plots the prediction accuracy of the three markets as time progresses. We set a time limit of 30 minutes for Bregman projection. The first time it successfully completes is only at time stamp \u20182010-03-21 13:58:50\u2019, after 45 games are already settled. We therefore begin the plot at time stamp \u20182010-03-19 00:00:00\u2019, corresponding to 16 settled games, as there is very little difference between LCMM and FWMM before that point. The reason FWMM still exceeds LCMM on occasion before the first projection is due to the extension of the partial outcome afforded by the IP, as explained in Sec. 4.\nEach point of the time series represents an average over all variables or bundles defined at that time, including those whose outcomes have been settled. This explains the upwards trends of the plots, culminating at accuracy 0 (a perfect score). The trend is not entirely monotonic, as we see from the bundle log likelihood in the stretch after March 22. The dotted vertical lines indicate the beginning of days on which games are played. On such days, we see that accuracy is initially stable, then sharply increases as the games take course and their outcomes are settled.\nIn Fig. 3, we see that once Bregman projections successfully complete, the improvement of FWMM over LCMM becomes sustained. The accuracy improvements from this point onwards range from 0% to 80% for variables, with a median of 38% over all hourly summaries. The improvements range from 0% to 44% for bundles, with a median of 9%."}, {"heading": "6. DISCUSSION AND CONCLUSION", "text": "In our experiments, FWMM outperformed LCMM once the outcome space was sufficiently reduced, via settled securities, to allow computing of Bregman projections within 30 minutes on a standard workstation. This time limit yielded a manageable\nexperimental turnaround, with about 5 hours to execute the trades that originally spanned 22 days. In practice, a market designer can allow longer computation and use more powerful hardware, and expect improvements for larger problem sizes.\nSeveral approaches could further speed up our framework. For instance, FW can be used to construct separating hyperplanes to tighten the outer LCMM approximation, and thereby contribute to arbitrage removal even when there is no time to compute the projection. Also, instead of solving IPs to optimality in each iteration, it may be possible to interleave IP with local search to obtain additional descent vertices. Since IP is by far the most time-consuming part of FW, this could yield substantial speedups."}, {"heading": "A. PROOF OF PROPOSITION 2.4", "text": "We first calculate the largest possible guaranteed profit:\nsup \u03b4\u2208RI min z\u2208Z\n[ \u03b4 \u00b7 z \u2212 C(\u03b8 + \u03b4) + C(\u03b8) ] = sup \u03b8\u2032\u2208RI min \u00b5\u2208M [ (\u03b8\u2032 \u2212 \u03b8) \u00b7 \u00b5\u2212 C(\u03b8\u2032) + C(\u03b8) ] = min \u00b5\u2208M sup \u03b8\u2032\u2208RI [ (\u03b8\u2032 \u2212 \u03b8) \u00b7 \u00b5\u2212 C(\u03b8\u2032) + C(\u03b8) ] (7)\n= min \u00b5\u2208M\n[ R(\u00b5)\u2212 \u03b8 \u00b7 \u00b5+ C(\u03b8) ] (8)\n= min \u00b5\u2208M\nD(\u00b5\u2016\u03b8) = D(\u00b5?\u2016\u03b8) , (9)\nwhere Eq. (7) follows by Sion\u2019s minimax theorem and Eqs. (8) and (9) from definitions of the convex conjugate and Bregman divergence, respectively. This shows that from the state \u03b8 the guaranteed profit is at most D(\u00b5?\u2016\u03b8).\nRecall that \u03b4? is any trade that moves the market to a state \u03b8? such that p(\u03b8?) = \u00b5?. We next show that \u03b4? is an optimal trade, i.e., that this trade gives a profit that is at least D(\u00b5?\u2016\u03b8). Let F (\u00b5) := D(\u00b5\u2016\u03b8). Since \u00b5? optimizes F onM, by the first order optimality, we have for any u \u2208 \u2202F (\u00b5?) and z \u2208 Z that u\u00b7(z\u2212\u00b5?) \u2265 0. Since p(\u03b8?) = \u00b5?, the conjugacy implies that \u03b8? \u2208 \u2202R(\u00b5?) and thus (\u03b8? \u2212 \u03b8) \u2208 \u2202F (\u00b5?), so the first order optimality yields\n0 \u2264 (\u03b8? \u2212 \u03b8) \u00b7 (z \u2212 \u00b5?) , which rearranges to\n(\u03b8? \u2212 \u03b8) \u00b7 z \u2265 (\u03b8? \u2212 \u03b8) \u00b7 \u00b5? . (10) The profit from the trade \u03b4? given any outcome \u03c9 is therefore at least\n(\u03b8? \u2212 \u03b8) \u00b7 \u03c6(\u03c9)\u2212 C(\u03b8?) + C(\u03b8) \u2265 (\u03b8? \u2212 \u03b8) \u00b7 \u00b5? \u2212 C(\u03b8?) + C(\u03b8) = R(\u00b5?)\u2212 \u03b8 \u00b7 \u00b5? + C(\u03b8) = D(\u00b5?\u2016\u03b8) ,\nwhere the first line follows by substituting \u03c6(\u03c9) for z in Eq. (10), the second line follows from the conjugacy of R and C, and the third line from the definition of D, completing the proof."}, {"heading": "B. BOUNDED LOSS PROPERTY UNDER GRADUAL REVELATION OF OUTCOME", "text": "We show that the bound on the worst-case loss of the cost C is maintained if we update the cost function using a sequence of partial outcomes, gradually revealing the final outcome \u03c9. We begin with the worst-case bound on the loss under cost C:\nPROPOSITION B.1. If the initial market state is \u03b80 then the worst-case loss of a market-maker using C is max\u03c9\u2208\u2126D(\u03c6(\u03c9)\u2016\u03b80).\nPROOF. Let \u03b8 denote the final state before the outcome \u03c9 is revealed. Then the market maker has collected C(\u03b8)\u2212 C(\u03b80) as the revenue for the sold shares, and needs\nto pay out (\u03b8 \u2212 \u03b80) \u00b7 \u03c6(\u03c9) as a payoff to the traders. The worst-case loss is therefore\nmax \u03c9\u2208\u2126 sup \u03b8\n[ (\u03b8 \u2212 \u03b80) \u00b7 \u03c6(\u03c9)\u2212 ( C(\u03b8)\u2212 C(\u03b80) )] = max\n\u03c9\u2208\u2126 sup \u03b8\n[( \u03b8 \u00b7 \u03c6(\u03c9)\u2212 C(\u03b8) ) \u2212 \u03b80 \u00b7 \u03c6(\u03c9) + C(\u03b80) ] = max\n\u03c9\u2208\u2126\n[ R ( \u03c6(\u03c9) ) \u2212 \u03b80 \u00b7 \u03c6(\u03c9) + C(\u03b80) ] = max\n\u03c9\u2208\u2126 D(\u03c6(\u03c9)\u2016\u03b80) .\nNow, we will analyze the case with partial outcomes. We assume that the initial partial outcome \u03c30 = \u2205, and that the market goes through a sequence of partial outcomes \u03c30 \u2286 \u03c31 \u2286 \u00b7 \u00b7 \u00b7 \u2286 \u03c3T until finally an outcome \u03c9 is revealed, consistent with \u03c3T . After the revelation of each \u03c3t, the market-maker switches to the cost function C\u03c3t . The initial market state is denoted \u03b80 and the market state in which the market switches to C\u03c3t is denoted \u03b8t.\nPROPOSITION B.2. If the initial market state is \u03b80 then, regardless of the sequence of partial outcomes \u03c31, . . . , \u03c3T , the worst-case loss of the market-maker using the sequence of costs C\u03c3t is max\u03c9\u2208\u2126D(\u03c6(\u03c9)\u2016\u03b80), i.e., the same as that of the market-maker using C without incorporating partial outcomes.\nPROOF. Recall that the market state at the time of switch from C\u03c3t\u22121 to C\u03c3t is \u03b8t. We first show that the value of the cost at the time of switch decreases:\nC\u03c3t(\u03b8t) = sup \u00b5\u2208V\u03c3t [\u03b8 \u00b7 \u00b5\u2212R(\u00b5)] \u2264 sup \u00b5\u2208V\u03c3t\u22121 [\u03b8 \u00b7 \u00b5\u2212R(\u00b5)] = C\u03c3t\u22121(\u03b8t) (11)\nwhere the middle inequality follows because V\u03c3t \u2286 V\u03c3t\u22121 . We are now ready to prove the bound on the worst-case loss. Let \u2126(\u03c3T ) denote the set of outcomes compatible with \u03c3T , and recall that \u03c30 = \u2205, so C\u03c30 \u2261 C. Recall that \u03b8t for t = 1, . . . , T are the states of the market when the cost becomes C\u03c3t . Finally, let \u03b8T+1 denote the final state. Then the worst-case loss of the market maker can be bounded as follows\nmax \u03c31\u2286\u03c32\u2286...\u2286\u03c3T max \u03c9\u2208\u2126(\u03c3T ) sup \u03b81,...,\u03b8T+1\n[ (\u03b8T+1 \u2212 \u03b80) \u00b7 \u03c6(\u03c9)\u2212\nT\u2211 t=0 ( C\u03c3t(\u03b8t+1)\u2212 C\u03c3t(\u03b8t)\n)]\n= max \u03c31\u2286\u03c32\u2286...\u2286\u03c3T max \u03c9\u2208\u2126(\u03c3T ) sup \u03b81,...,\u03b8T+1\n[ (\u03b8T+1 \u2212 \u03b80) \u00b7 \u03c6(\u03c9)\u2212 ( C\u03c3T (\u03b8T+1)\u2212 C\u03c30(\u03b80) ) \u2212\nT\u2211 t=1 ( C\u03c3t\u22121(\u03b8t)\u2212 C\u03c3t(\u03b8t) )] (12)\n\u2264 max \u03c3T max \u03c9\u2208\u2126(\u03c3T ) sup \u03b8T+1\n[ (\u03b8T+1 \u2212 \u03b80) \u00b7 \u03c6(\u03c9)\u2212 C\u03c3T (\u03b8T+1) + C\u03c30(\u03b80) ] (13)\n= max \u03c3T max \u03c9\u2208\u2126(\u03c3T )\n[ R ( \u03c6(\u03c9) ) \u2212 \u03b80 \u00b7 \u03c6(\u03c9) + C(\u03b80) ] (14)\n= max \u03c9\u2208\u2126\nD(\u03c6(\u03c9)\u2016\u03b80) . (15)\nEq. (12) follows by rearranging the terms. Eq. (13) follows by Eq. (11). Eq. (14) follows because the convex conjugate of C\u03c3T is R\u03c3T (\u00b5) = I{\u00b5 \u2208 V\u03c3T }+R(\u00b5), and R\u03c3T ( \u03c6(\u03c9) ) =\nR ( \u03c6(\u03c9) ) thanks to the compatibility of \u03c9 with \u03c3T . Finally, Eq. (15) follows from the definition of Bregman divergence, completing the proof."}, {"heading": "C. DIFFERENTIABILITY AND CONTROLLED GROWTH OF R", "text": "The algorithm used by our market maker requires a differentiable objective whose gradient does not grow too fast as it approaches the boundary ofM. Note that for LMSR, the Bregman divergence is formally not even differentiable in its first argument (it is subdifferentiable). So, in addition to requiring the controlled growth of the gradient, we also need to assume that R can be extended into a differentiable function. Specifically, we say that R\u0304 : RI \u2192 (\u2212\u221e,\u221e] is a convex extension of R if R\u0304 is convex and coincides with R wherever R < \u221e. We require existence of an extension with the controlled growth property in the following sense:\nDefinition C.1. Let S \u2286 [0, 1]n be a compact convex set. We say that a convex function F exhibits controlled growth on S if it is differentiable on S \u2229 (0, 1)n and if there exists a fixed p \u2265 0 and L \u2265 0 such that for any \u03b5 > 0, the gradient \u2207F has a bounded Lipschitz constant L\u03b5 \u2264 L\u03b5\u2212p over S \u2229 [\u03b5, 1\u2212 \u03b5]n.\nAssumption C.2. R has a convex extension R\u0304 such that for all partial outcomes \u03c3, when R\u0304 is viewed as a function on V\u03c3, it exhibits controlled growth onM\u03c3. We write R\u0304\u03c3 for the restriction of R\u0304 to V\u03c3. Note that this restriction is formally a function defined on a space of dimension |I\\I\u03c3| and thus, formally, \u2207R\u0304\u03c3 has the dimension |I\\I\u03c3|. We extend \u2207R\u0304\u03c3 into a vector in RI by inserting zeros at coordinates i \u2208 I\u03c3. A key consequence of this construction is that for any partial outcome \u03c3 and all \u00b5 \u2208M\u03c3 such that \u00b5i \u2208 (0, 1) for i 6\u2208 I\u03c3, the gradient \u2207R\u0304\u03c3(\u00b5) is defined, and \u2207R\u0304\u03c3(\u00b5) \u2208 \u2202R\u03c3(\u00b5). As a result, we have that \u03b8 = \u2207R\u0304\u03c3(\u00b5) implies that \u2207C\u03c3(\u03b8) = \u00b5 (but not vice versa). Assumption C.2 can be verified for instance by upper-bounding the operator norm of the Hessian, which directly upper-bounds the Lipschitz constant of the gradient.\nExample C.3. Controlled growth for LMSR. We define the extension of negative entropy over the non-negative orthant, R\u0304(\u00b5) = I{\u00b5 \u2265 0}+ \u2211 i\u2208I \u00b5i log\u00b5i, which yields\nR\u0304\u03c3(\u00b5) = I{\u00b5i \u2265 0 for all i 6\u2208 I\u03c3}+ \u2211 i 6\u2208I\u03c3 \u00b5i log\u00b5i. The Hessian is a diagonal matrix with entries 1/\u00b5i, so its operator norm is maxi6\u2208I\u03c3 1/\u00b5i, and thus L\u03b5 = O(1/\u03b5), which satisfies the controlled growth condition with p = 1."}, {"heading": "D. PROOF OF PROPOSITION 4.1", "text": "The guaranteed profit when moving from \u03b8 to \u03b8\u0302 is\nmin \u03c9\u2208\u2126\n[ (\u03b8\u0302 \u2212 \u03b8) \u00b7 \u03c6(\u03c9)\u2212 C(\u03b8\u0302) + C(\u03b8) ] = min \u00b5\u2208M [ (\u03b8\u0302 \u2212 \u03b8) \u00b7 \u00b5\u2212 C(\u03b8\u0302) + C(\u03b8) ] (16)\n= min \u00b5\u2208M\n[ (\u03b8\u0302 \u2212 \u03b8) \u00b7 (\u00b5\u2212 \u00b5\u0302) + \u03b8\u0302 \u00b7 \u00b5\u0302\u2212 C(\u03b8\u0302)\u2212 \u03b8 \u00b7 \u00b5\u0302+ C(\u03b8) ] = min \u00b5\u2208M [ (\u03b8\u0302 \u2212 \u03b8) \u00b7 (\u00b5\u2212 \u00b5\u0302) +R(\u00b5\u0302)\u2212 \u03b8 \u00b7 \u00b5\u0302+ C(\u03b8) ] (17)\n= D(\u00b5\u0302\u2016\u03b8)\u2212 g(\u00b5\u0302) . (18) Eq. (16) follows because the minimized objective is linear in \u03c6(\u03c9). Eq. (17) follows from the definition of R. Finally, Eq. (18) follows because \u2207F (\u00b5\u0302) = \u2207R\u0304(\u00b5\u0302)\u2212 \u03b8 = \u03b8\u0302 \u2212 \u03b8, and hence\ng(\u00b5\u0302) = max \u00b5\u2208M\n[ (\u03b8\u0302 \u2212 \u03b8) \u00b7 (\u00b5\u0302\u2212 \u00b5) ] ."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "We present a new combinatorial market maker that operates arbitrage-free combinatorial prediction markets specified by integer programs. Although the problem of arbitrage-free pricing, while maintaining a bound on the subsidy provided by the market maker, is #P-hard in the worst case, we posit that the typical case might be amenable to modern integer programming (IP) solvers. At the crux of our method is the Frank-Wolfe (conditional gradient) algorithm which is used to implement a Bregman projection aligned with the market maker\u2019s cost function, using an IP solver as an oracle. We demonstrate the tractability and improved accuracy of our approach on real-world prediction market data from combinatorial bets placed on the 2010 NCAA Men\u2019s Division I Basketball Tournament, where the outcome space is of size 263. To our knowledge, this is the first implementation and empirical evaluation of an arbitrage-free combinatorial prediction market on this scale.", "creator": "LaTeX with hyperref package"}}}