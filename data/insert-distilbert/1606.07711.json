{"id": "1606.07711", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Jun-2016", "title": "A Game-Theoretic Approach to Word Sense Disambiguation", "abstract": "this paper presents a new model for word sense disambiguation formulated in terms of parallel evolutionary game theory, where each word to be disambiguated is represented as a node on a graph whose edges represent word relations and senses are represented as classes. the words simultaneously update their class membership preferences slightly according to the senses that neighboring words are likely to choose. we use distributional information to weigh the influence that each unfamiliar word has on the decisions of the others and semantic similarity information to measure the strength of compatibility among the choices. with this information we therefore can formulate the word sense disambiguation problem as a constraint satisfaction problem and positively solve it using tools strongly derived from game theory, maintaining the textual coherence. the model is based on two ideas : similar words should often be assigned to similar classes and the meaning of a word does not depend on all the words in a text but just on some of them. the paper actually provides an in - depth motivation of the idea of modeling the word sense disambiguation problem in terms of game theory, which is illustrated by an example. the conclusion presents an extensive analysis on the combination of similarity measures to use in the framework tests and a comparison with state - of - the - art systems. the results should show that our model outperforms state - of - the - art algorithms and can be applied to different tasks and in different scenarios.", "histories": [["v1", "Fri, 24 Jun 2016 14:45:27 GMT  (1336kb,D)", "http://arxiv.org/abs/1606.07711v1", null], ["v2", "Tue, 28 Jun 2016 05:31:31 GMT  (1336kb,D)", "http://arxiv.org/abs/1606.07711v2", "To be published in Computational Linguistics either the 42-4 issue (December 2016) or the 43-1 issue (March 2017)"], ["v3", "Fri, 1 Jul 2016 12:19:13 GMT  (2756kb,D)", "http://arxiv.org/abs/1606.07711v3", "To be published in Computational Linguistics"], ["v4", "Mon, 4 Jul 2016 13:19:29 GMT  (1756kb,D)", "http://arxiv.org/abs/1606.07711v4", "To be published in Computational Linguistics"]], "reviews": [], "SUBJECTS": "cs.AI cs.CL cs.GT", "authors": ["rocco tripodi", "marcello pelillo"], "accepted": false, "id": "1606.07711"}, "pdf": {"name": "1606.07711.pdf", "metadata": {"source": "CRF", "title": "A Game-Theoretic Approach to Word Sense Disambiguation", "authors": ["Rocco Tripodi", "Marcello Pelillo"], "emails": ["rocco.tripodi@unive.it", "pelillo@unive.it"], "sections": [{"heading": "A Game-Theoretic Approach to Word Sense", "text": "Disambiguation\nRocco Tripodi \u2217 Ca\u2019 Foscari University of Venice\nMarcello Pelillo\u2217,\u2217\u2217 Ca\u2019 Foscari University of Venice\nThis paper presents a new model for word sense disambiguation formulated in terms of evolutionary game theory, where each word to be disambiguated is represented as a node on a graph whose edges represent word relations and senses are represented as classes. The words simultaneously update their class membership preferences according to the senses that neighboring words are likely to choose. We use distributional information to weigh the influence that each word has on the decisions of the others and semantic similarity information to measure the strength of compatibility among the choices. With this information we can formulate the word sense disambiguation problem as a constraint satisfaction problem and solve it using tools derived from game theory, maintaining the textual coherence. The model is based on two ideas: similar words should be assigned to similar classes and the meaning of a word does not depend on all the words in a text but just on some of them. The paper provides an in-depth motivation of the idea of modeling the word sense disambiguation problem in terms of game theory, which is illustrated by an example. The conclusion presents an extensive analysis on the combination of similarity measures to use in the framework and a comparison with state-of-the-art systems. The results show that our model outperforms state-of-the-art algorithms and can be applied to different tasks and in different scenarios."}, {"heading": "1. Introduction", "text": "Word Sense Disambiguation (WSD) is the task of identifying the intended meaning of a word based on the context in which it appears (Navigli 2009). It has been studied since the beginnings of Natural Language Processing (NLP) (Weaver 1955) and today it is still a central topic of this discipline. This because it is important for many NLP tasks such as text understanding (Kilgarriff 1997), text entailment (Dagan and Glickman 2004), machine translation (Vickrey et al. 2005), opinion mining (Smr\u017e 2006), sentiment analysis (Rentoumi et al. 2009) and information extraction (Zhong and Ng 2012). All these applications can benefit from the disambiguation of ambiguous words, as a preliminary process; otherwise they remain on the surface of the word, compromising the coherence of the data to be analyzed (Pantel and Lin 2002).\nTo solve this problem, over the past few years, the research community has proposed several algorithms during the years, based on supervised (Zhong and Ng 2010;\n\u2217 European Centre for Living Technology, Ca\u2019 Minich, S. Marco 2940 30124 Venezia, Italy. E-mail: rocco.tripodi@unive.it\n\u2217\u2217 Dipartimento di Scienze Ambientali, Informatica e Statistica, Via Torino 155 - 30172 Venezia, Italy. E-mail: pelillo@unive.it\nSubmission received: 8th June, 2015; Revised submission received: 25th January, 2016;Accepted for publication: 24th March, 2016; will appear in either the 42-4 issue (December 2016) or the 43-1 issue (March 2017)\n\u00a9 - Association for Computational Linguistics\nar X\niv :1\n60 6.\n07 71\n1v 1\n[ cs\n.A I]\n2 4\nJu n\n20 16\nTratz et al. 2007), semi-supervised (Pham, Ng, and Lee 2005; Navigli and Velardi 2005) and unsupervised (Mihalcea 2005; McCarthy et al. 2007) learning models. Nowadays, although supervised methods perform better in general domains, unsupervised and semi-supervised models are receiving increasing attention from the research community with performances close to the state of the art of supervised systems (Ponzetto and Navigli 2010). In particular knowledge-based and graph-based algorithms are emerging as promising approaches to solve the problem (Agirre et al. 2009; Sinha and Mihalcea 2007). The peculiarities of these algorithms are that they do not require any corpus evidence and use only the structural properties of a lexical database to perform the disambiguation task. In fact, unsupervised methods are able to overcome a common problem in supervised learning: the knowledge acquisition problem, which consists in the production of large-scale resources, manually annotated with word senses.\nKnowledge-based approaches exploit the information from knowledge resources such as dictionaries, thesauri or ontologies and compute sense similarity scores to disambiguate words in context (Mihalcea 2006). Graph-based approaches model the relations among words and senses in a text with graphs, representing words and senses as nodes and the relations among them as edges. From this representation the structural properties of the graph can be extracted and the most relevant concepts in the network can be computeds (Navigli and Lapata 2007; Agirre et al. 2006).\nOur approach falls into these two lines of research; it uses a graph structure to model the geometry of the data points (the words in a text) and a knowledge base to extract the senses of each word and to compute the similarity among them. The most important difference between our approach and state-of-the-art graph-based approaches (Moro, Raganato, and Navigli 2014; Agirre, de Lacalle, and Soroa 2014; Navigli and Lapata 2010; Sinha and Mihalcea 2007; V\u00e9ronis 2004) is that in our method the graph contains only words and not senses. This graph is used to model the pairwise interaction among words and not to rank the senses in the graph according to their relative importance.\nThe starting point of our research is based on two fundamental assumptions:\n1. the meaning of a sentence emerges from the interaction of the components which are involved in it; 2. these interactions are different and must be weighted in order to supply the right amount of information.\nWe interpret language as a complex adaptive system, composed of linguistic units and their interactions (Cong and Liu 2014; Larsen-Freeman and Cameron 2008). The interactions among units give rise to the emergence of properties, which in our case, by problem definition, can be interpreted as meanings. In our model the relations between the words are weighted by a similarity measure with a distributional approach, increasing the weights among words which share a proximity relation. Weighting the interaction of the nodes in the graph is helpful in situations in which the indiscriminate use of contextual information can deceive. Furthermore, it models the idea that the meaning of a word does not depend on all the words in a text but just on some of them (Chaplot, Bhattacharyya, and Paranjape 2015).\nThis problem is illustrated in the sentences below:\n\u2022 There is a financial institution near the river bank. \u2022 They were troubled by insects while playing cricket.\nIn these two sentences1 the meaning of the words bank and cricket can be misinterpreted by a centrality algorithm that tries to find the most important node in the graph composed of all the possible senses of the words in the sentence. This because the meanings of the words financial and institution tend to shift the meaning of the word bank toward its financial meaning and not toward its naturalistic meaning. The same behavior can be observed for the word cricket, which is shifted by the word insect toward its insect meaning and not toward its game meaning. In our work the disambiguation task is performed imposing a stronger importance on the relations between the words bank and river for the first sentence and between cricket and play for the second; exploiting proximity relations.\nOur approach is based on the principle that the senses of the words that share a strong relation must be similar. The idea of assigning a similar class to similar objects has been implemented in a different way by Kleinberg and Tardos (2002), within a Markow random field framework. They have shown that it is beneficial in combinatorial optimization problems. In our case, this idea can preserve the textual coherence; a characteristic that is missing in many state-of-the-art systems. In particular, it is missing in systems in which the words are disambiguated independently. On the contrary, our approach disambiguates all the words in a text concurrently, using an underlying structure of interconnected links, which models the interdependence between the words. In so doing, we model the idea that the meaning for any word depends at least implicitly on the combined meaning of all the interacting words.\nIn our study, we model these interactions by developing a system in which it is possible to map lexical items onto concepts exploiting contextual information in a way in which collocated words influence each other simultaneously, imposing constraints in order to preserve the textual coherence. For this reason, we have decided to use a powerful tool, derived from game theory: the non-cooperative games (see Section 4). In our system, the nodes of the graph are interpreted as players, in the game theoretic sense (see Section 4), which play a game with the other words in the graph, in order to maximize their utility; constraints are defined as similarity measures among the senses of two words that are playing a game. The concept of utility has been used in different ways in the game theory literature, in general, it refers to the satisfaction that a player derives from the outcome of a game (Szab\u00f3 and Fath 2007). From our point of view, increasing the utility of a word means increasing the textual coherence, in a distributional semantics perspective (Firth 1957). In fact, it has been shown that collocated words tend to have a determined meaning (Gale, Church, and Yarowsky 1992; Yarowsky 1993).\nGame theoretic frameworks have been used in different ways to study the language use (Pietarinen 2007; Skyrms 2010) and evolution (Nowak, Komarova, and Niyogi 2001), but to the best of our knowledge, our method is the first attempt to use it in a specific NLP task. This choice is motivated by the fact that game theoretic models are able to perform a consistent labeling of the data (Hummel and Zucker 1983; Pelillo 1997), taking into account contextual information. These features are of great importance for an unsupervised or semi-supervised algorithm, which tries to perform a WSD task, because, by assumption, the sense of a word is given by the context in which it appears. Within a game theoretic framework we are able to cast the WSD problem as a continuous optimization problem, exploiting contextual information in a dynamic way.\n1 A complete example of the disambiguation of the first sentence is given in Section 5.3\nFurthermore, no supervision is required and the system can adapt easily to different contextual domains, which is exactly what is required for a WSD algorithm.\nThe additional reason for the use of a consistent labeling system relies on the fact that it is able to deal with semantic drifts (Curran, Murphy, and Scholz 2007). In fact, as shown in the above two sentences, concentrating the disambiguation task of a word on highly collocated words, taking into account proximity (or even syntactic) information allows the meaning interpretation to be guided only towards senses which are strongly related to the word which has to be disambiguated.\nIn this article, we provide a detailed discussion about the motivation behind our approach and a full evaluation of our algorithm comparing it with state-of-the-art systems, in WSD tasks. In a previous work we used a similar algorithm in a semisupervised scenario (Tripodi, Pelillo, and Delmonte 2015), casting the WSD task as a graph transduction problem. Now we have extended that work making the algorithm fully unsupervised. Furthermore, in this article we provide a complete evaluation of the algorithm extending our previous works (Tripodi and Pelillo 2015), exploiting proximity relations among words.\nAn important feature of our approach is that it is versatile. In fact, the method can adapt to different scenarios and to different tasks and it is possible to use it as unsupervised or semi-supervised. The semi-supervised approach, presented in (Tripodi, Pelillo, and Delmonte 2015), is a bootstrapping graph based method, which propagates, over the graph, the information from labeled nodes to unlabeled. In this article, we also provide a new semi-supervised version of the approach, which can exploit the evidence from sense tagged corpora or the most frequent sense heuristic and does not require labeled nodes to propagate the labeling information.\nWe tested our approach on different datasets, from WSD and entity linking tasks, in order to find the similarity measures, which perform better and evaluated it against unsupervised, semi-supervised and supervised state-of-the-art systems. The results of this evaluation shows that our method performs well and can be considered as a valid alternative to current models."}, {"heading": "2. Related Works", "text": "There are two major paradigms in WSD: supervised and knowledge-based. Supervised algorithms learn, from sense-labeled corpora, a computational model of the words of interest. Then, the obtained model is used to classify new instances of the same words. Knowledge-based algorithms perform the disambiguation task by using an existing lexical knowledge base, which usually is structured as a semantic network. Then, these approaches use graph algorithms to disambiguate the words of interests, based on the relations that these words\u2019 senses have in the network (Pilehvar and Navigli 2014).\nA popular supervised WSD system, which has shown good performances in different WSD tasks, is It Makes Sense (IMS) (Zhong and Ng 2010). It takes as input a text and for each content word (noun, verb, adjective, or adverb) outputs a list of possible senses ranked according to the likelihood of appearing in a determined context and extracted from a knowledge base. The training data used by this system are derived from SemCor (Miller et al. 1993), DSO (Ng and Lee 1996) and collected automatically exploiting parallel corpora (Chan and Ng 2005). Its default classifier is LIBLINEAR2 with a linear kernel and its default parameters.\n2 http://liblinear.bwaldvogel.de\nUnsupervised and knowledge-based algorithms for WSD are attracting great attention from the research community. This because, supervised systems require training data, which are difficult to obtain. In fact, producing sense tagged data is a timeconsuming process, which has to be carried out separately for each language of interest. Furthermore, as investigated by Yarowsky and Florian (2002), the performances of a supervised algorithm degrade substantially with the increasing of sense entropy. Sense entropy refers to the distribution over the possible senses of a word, as seen in training data. Additionally, a supervised system has problems to adapt to different contexts, because it depends on prior knowledge, which makes the algorithm rigid, therefore can not efficiently adapt to domain specific cases, when other optimal solution may be available (Yarowsky and Florian 2002).\nOne of the most common heuristics that allows to exploit sense tagged data such as SemCor (Miller et al. 1993) is the most frequent sense. It exploits the overall sense distribution for each word to be disambiguated, choosing the sense with the highest probability regardless of any other information. This simple procedure is very powerful in general domains but can not handle senses with a low distribution, which could be found in specific domains.\nWith these observations in mind Koeling et al. (2005) created three domain specific corpora to evaluate WSD systems. They tested whether WSD algorithms are able to adapt to different contexts, comparing their results with the most frequent sense heuristic, computed on general domains corpora. They used an unsupervised approach to obtain the most frequent sense for a specific domain (McCarthy et al. 2007) and demonstrated that their approach outperforms the most frequent sense heuristic derived from general domain and labeled data.\nThis heuristics, for the unsupervised acquisition of the predominant sense of a word, consists in collecting all the possible senses of a word and then in ranking these senses. The ranking is computed according to the information derived from a distributional thesaurus automatically produced from a large corpus and a semantic similarity measure derived from the sense inventory. Although the authors have demonstrated that this approach is able to outperform the most frequent sense heuristic computed on sense tagged data on general domains, it is not easy to use it on real world applications, especially when the domain of the text to be disambiguated is not known in advance.\nOther unsupervised and semi-supervised approaches, instead of computing the prevalent sense of a word, try to identify the actual sense of a word in a determined phrase, exploiting the information derived from its context. This is the case of traditional algorithms, which exploit the pairwise semantic similarity among a target word and the words in its context (Lesk 1986; Resnik 1995; Patwardhan, Banerjee, and Pedersen 2003). Our work could be considered as a continuation of this tradition, which tries to identify the intended meaning of a word given its context, using a new approach for the computation of the sense combinations.\nGraph-based algorithms for WSD are gaining much attention in the NLP community. This is because graph theory is a powerful tool that can be employed both for the organization of the contextual information and for the computation of the relations among word senses. It allows to extract the structural properties of a text. Examples of this kind of approaches construct a graph from all the senses of the words in a text and then use connectivity measures in order to identify the most relevant word senses in the graph (Sinha and Mihalcea 2007; Navigli and Lapata 2007). Navigli and Lapata (2007) conducted an extensive analysis of graph connectivity measures for unsupervised WSD. Their approach uses a knowledge base, such as WordNet, to collect and organize all the possible senses of the words to be disambiguated in a graph structure, then uses the\nsame resource to search for a path (of predefined length) between each pair of senses in the graph and if it exists, it adds all the nodes and edges on this path to the graph. These measures analyze local and global properties of the graph. Local measures, such as degree centrality and eigenvector centrality, determine the degree of relevance of a single vertex. Global properties, such as compactness, graph entropy and edge density, analyze the structure of the graph as a whole. The results of the study show that local measures outperform global measure and in particular, degree centrality and PageRank (Page et al. 1999) (which is a variant of the eigenvector centrality measure) achieve the best results.\nPageRank (Page et al. 1999) is one of the most popular algorithms for WSD, in fact, it was implemented in different ways by the research community (Mihalcea, Tarau, and\nFiga 2004; Haveliwala 2002; Agirre, de Lacalle, and Soroa 2014; De Cao et al. 2010). It represents the senses of the words in a text as nodes of a graph. It uses a knowledge base to collect the senses of the words in a text and represents them as nodes of a graph. The structure of this resource is used to connect each node with its related senses in a directed graph. The main idea of this algorithm is that whenever a link from a node to another exists, a vote is produced, increasing the rank of the voted node. It works by counting the number and quality of links to a node in order to determine an estimation of how important the node is in the network. The underlying assumption is that more important nodes are likely to receive more links from other nodes (Page et al. 1999). Exploiting this idea the ranking of the nodes in the graph can be computed iteratively with the following equation:\nPr = cMPr + (1\u2212 c)v (1)\nwhere M is the transition matrix of the graph, v is a N \u00d7 1 vector representing a probability distribution and c is the so-called damping factor that represents the chance that the process stops, restarting from a random node. At the end of the process each word is associated with the most important concept related to it. One problem of this framework is that the labeling process is not assumed to be consistent.\nAn algorithm, which tries to improve centrality algorithms, is SUDOKU, introduced by Minion and Sainudiin (2014). It is an iterative approach, which simultaneously constructs the graph and disambiguates the words using a centrality function. It starts inserting the nodes corresponding to the senses of the words with low polysemy and and iteratively inserting the more ambiguous words. The advantages of this method are that the use of small graphs, at the beginning of the process, reduces the complexity of the problem and that it can be used with different centrality measures.\nRecently a new model for WSD has been introduced, based on an undirected graphical model (Chaplot, Bhattacharyya, and Paranjape 2015). It approaches the WSD problem as a maximum a posteriori query on a Markov random field (Jordan and Weiss 2002). The graph is constructed using the content words of a sentence as nodes and connecting them with edges if they share a relation, determined using a dependency parser. The values that each node in the graphical model can take include the senses of the corresponding word. The senses are collected using a knowledge base and weighted using a probability distribution based on the frequency of the senses in the knowledge base. Furthermore, the senses between two related words are weighted using a similarity measure. The goal of this approach is to maximize the joint probability of the senses of all the words in the sentence, given dependency structure of the sentence, the frequency of the senses and the similarity among them.\nA new graph based, semi-supervised approach, introduced to deal with multilingual WSD (Navigli and Ponzetto 2012b) and entity inking problems, is Babelfy (Moro, Raganato, and Navigli 2014). Multilingual WSD is an important task because traditional WSD algorithms and resources are focused on English language. It exploits the information from large multilingual knowledge, such as BabelNet (Navigli and Ponzetto 2012a) to perform this task. Entity linking consists in disambiguating the named entities in a text and in finding the appropriate resources in an ontology, which correspond to the specific entities mentioned in a text. Babelfy creates the semantic signature of each word to be disambiguated, that consists in collecting, from a semantic network, all the nodes related to a particular concepts, exploiting the global structure of the network. This process leads to the construction of a graph-based representation of the whole text. Then, it applies Random Walk with Restart (Tong, Faloutsos, and Pan 2006) to find the most important nodes in the network, solving the WSD problem.\nApproaches which are more similar to ours in the formulation of the problem have been described by Araujo (2007). The author reviewed the literature devoted to the application of different evolutionary algorithm to several aspects of NLP: syntactical analysis, grammar induction, machine translation, text summarization, semantic analysis, document clustering and classification. Basically these approaches are search and optimization methods inspired by biological evolution principles. A specific evolutionary approach for WSD has been introduced by Menai (2014). It uses genetic algorithms (Holland 1975) and memetic algorithms (Moscato 1989) in order to improve the performances of a gloss-based method. It assumes that there is a population of individuals, represented by all the senses of the words to be disambiguated, and that there is a selection process, which selects the best candidates in the population. The selection process is defined as a sense similarity function, which gives a higher score to candidates with specific features, increasing their fitness to the detriment of the other population members. This process is repeated until the fitness level of the population regularizes and at the end the candidates with higher fitness are selected as solutions of the problem. Another approach, which address the disambiguation problem in terms of space search is GETALP (Schwab et al. 2013), it uses an Ant Colony algorithm to find the best path in the weighted graph constructed measuring the similarity of all the senses in a text and assigning to each word to be disambiguated the sense corresponding to the node in this path.\nThese methods are similar to our study in the formulation of the problem; the main difference is that our approach is defined in terms of evolutionary game theory. As it is shown in the next section, this approach ensures that the final labeling of the data is consistent and that the solution of the problem is always found. In fact, our system always converges to the nearest Nash equilibrium from where the dynamics have been started."}, {"heading": "3. Word Sense Disambiguation as a Consistent Labeling Problem", "text": "WSD can be interpreted as a sense-labeling task (Navigli 2009), which consists in assigning a sense label to a target word. As a labeling problem we need an algorithm, which performs this task in a consistent way, taking into account the context in which the target word occurs. Following this observation we can formulate the WSD task as a constraint satisfaction problem (Tsang 1995) in which the labeling process has to satisfy some constraints in order to be consistent. This approach gives us the possibility not only to exploit the contextual information of a word but also to find the most appropriate sense association for the target word and the words in its context. This is the most important\ncontribution of our work, which distinguishes it from existing WSD algorithms. In fact, in some cases using only contextual information without the imposition of constraints can lead to inconsistencies in the assignment of senses to related words.\nAs an illustrative example we can consider a binary CSP, which is defined by a set of variables representing the elements of the problem and a set of binary constraints representing the relationships among variables. The problem is considered solved if there is a solution, which satisfies all the constraints. This setting can be described in a formal manner as a triple (V,D,R), where V = {v1, ..., vn} is the set of variables, D = {Dv1 , ..., Dvn} is the set of domains for each variable, each Dvi denoting a finite set of possible values for variable vi; and R = {Rij |Rij \u2286 Dvi \u00d7Dvj} is a set of binary constraints whereRij describe a set of compatible pairs of values for the variables vi and vj . R can be defined as a binary matrix of size p\u00d7 q where p and q are the cardinalities of domains and variables respectively. Each element of the binary matrix Rij(\u03bb, \u03bb \u2032 ) = 1 indicates if the assignment vi = \u03bb is compatible with the assignment vj = \u03bb\u2032i. R is used to impose constraints on the labeling so that each label assignment is consistent.\nThe binary case described above assumes that the constraints are completely violated or completely respected, which is restrictive; it is more appropriate, in many realword cases, to have a weight, which expresses the level of confidence about a particular assignment (Hummel and Zucker 1983). This notion of consistency has been shown to be related to the Nash equilibrium concept in game theory (Miller and Zucker 1991). We have adopted this method to approach the WSD task in order to perform a consistent labeling of the data. In our case, we can consider variables as words, labels as word senses and compatibility coefficients as similarity values among two word senses. To explain how the Nash equilibria are computed we need to introduce basic notions of game theory in the following sections."}, {"heading": "4. Game Theory", "text": "In this section, we briefly introduce the basic concepts of classical game theory and evolutionary game theory that we used in our framework; for a more detailed analysis of these topics the reader is referred to (Weibull 1997; Leyton-Brown and Shoham 2008; Sandholm 2010)."}, {"heading": "4.1 Classical Game Theory", "text": "Game theory provides predictive power in interactive decision situations. It has been introduced by Von Neumann and Morgenstern (1944) in order to develop a mathematical framework able to model the essentials of decision making in interactive situations. In its normal form representation (which is the one we use in this article) it consists of a finite set of players I = {1, .., n}, a set of pure strategies for each player Si = {s1, ..., sm}, and a utility function ui : S1 \u00d7 ...\u00d7 Sn \u2192 R, which associates strategies to payoffs. Each player can adopt a strategy in order to play a game and the utility function depends on the combination of strategies played at the same time by the players involved in the game, not just on the strategy chosen by a single player. An important assumption in game theory is that the players are rational and try to maximize the value of ui; Furthermore, in non-cooperative games the players choose their strategies independently, considering what the other players can play and try to find the best strategy profile to employ in a game.\nA strategy s\u2217i is said to be dominant if and only if:\nui(s \u2217 i , s\u2212i) > ui(si, s\u2212i),\u2200s\u2212i \u2208 S\u2212i (2)\nwhere S\u2212i represents all strategy sets other than player i\u2019s. As an example, we can consider the famous Prisoner\u2019s Dilemma, whose payoff matrix is shown in Table 1. Each cell of the matrix represents a strategy profile, where the first number represents the payoff of Player 1 (P1) and the second is the payoff of Player 2 (P2), when both players employ the strategy associated with a specific cell. P1 is called the row player because it selects its strategy according to the rows of the payoff matrix, P2 is called the column player because it selects its strategy according to the columns of the payoff matrix. In this game the strategy confess is a dominant strategy for both players and this strategy combination is the Nash equilibrium of the game.\nNash equilibria represent the key concept of game theory and can be defined as those strategy profiles in which each strategy is a best response to the strategy of the coplayer and no player has the incentive to unilaterally deviate from his decision, because there is no way to do better.\nIn many games, the players can also play mixed strategies, which are probability distributions over their pure strategies. Within this setting, the players choose a strategy with a certain pre-assigned probability. A mixed strategy set can be defined as a vector x = (x1, . . . , xm), where m is the number of pure strategies and each component xh denotes the probability that player i chooses its hth pure strategy. For each player its strategy set is defined as a standard simplex:\n\u2206 = { x \u2208 Rn : m\u2211 h=1 xh = 1, and xh \u2265 0 for all h \u2208 x }\n(3)\nEach mixed strategy corresponds to a point on the simplex and its corners correspond to pure strategies.\nIn a two-players game we can define a strategy profile as a pair (p, q) where p \u2208 \u2206i and q \u2208 \u2206j . The expected payoff for this strategy profile is computed as follows: ui(p, q) = p \u00b7Aiq and uj(p, q) = q \u00b7Ajp, where Ai and Aj are the payoff matrices of player i and player j, respectively. The Nash equilibrium is computed in mixed strategies in the same way of pure strategies. It is represented by a pair of strategies such that each is a best response to the other. The only difference is that, in this setting, the strategies are probabilities and must be computed considering the payoff matrix of each player.\nA game theoretic framework can be considered as a solid tool in decision making situations since a fundamental theorem by Nash (1951) states that any normal-form game has at least one mixed Nash equilibrium, which can be employed as the solution of the decision problem."}, {"heading": "4.2 Evolutionary Game Theory", "text": "Evolutionary game theory has been introduced by Smith and Price (1973) overcoming some limitations of traditional game theory, such as the hyper-rationality imposed on the players. In fact, in real life situations the players choose a strategy according to heuristics or social norms (Szab\u00f3 and Fath 2007). It has been introduced in biology to explain the evolution of species. In this context, strategies correspond to phenotypes\n(traits or behaviors), payoffs correspond to offsprings, allowing players with a high actual payoff (obtained thanks to their phenotype) to be more prevalent in the population. This formulation explains natural selection choices among alternative phenotypes based on their utility function. This aspect can be linked to rational choice theory, in which players make a choice that maximizes their utility, balancing cost against benefits (Okasha and Binmore 2012).\nThis intuition introduces an inductive learning process, in which we have a population of agents which play games repeatedly with their neighbors. The players, at each iteration, update their beliefs on the state of the game and choose their strategy according to what has been effective and what has not in previous games. The strategy space of each player i is defined as a mixed strategy profile xi, as defined in the previous section, which lives in the mixed strategy space of the game, given by the Cartesian product:\n\u0398 = \u00d7i\u2208I\u2206i (4)\nThe expected payoff of a pure strategy eh in a single game is calculated as in mixed strategies. The difference in evolutionary game theory is that a player can play the game with all other players, obtaining a final payoff, which is the sum of all the partial payoff obtained during the single games. We have that the payoff relatives to a single strategy is: ui(ehi ) = \u2211n j=1(Aijxj)h and the average payoff ui(x) = \u2211n j=1 x T i Aijxj , where n is the number of players with whom the games are played and Aij is the payoff matrix between player i and j. Another important characteristic of evolutionary game theory is that the games are played repeatedly. In fact, at each iteration a player can update its strategy space according to the payoffs gained during the games. He can allocate more probability to the strategies with high payoff until an equilibrium is reached. In order to find those states that correspond to the Nash equilibria of the games, the replicator dynamic equation is used (Taylor and Jonker 1978):\nx\u0307 = [u(eh, x)\u2212 u(x, x)] \u00b7 xh \u2200h \u2208 x (5)\nwhich allows better than average strategies (best replies) to grow at each iteration. The following theorem states that with equation 5 it is always possible to find the Nash equilibria of the games (see (Weibull 1997) for the proof).\nTheorem 1 A point x \u2208 \u0398 is the limit of a trajectory of equation 5 starting from the interior of \u0398 if and only if x is a Nash equilibrium. Further, if point x \u2208 \u0398 is a strict Nash equilibrium, then it is asymptotically stable, additionally implying that the trajectories starting from all nearby states converge to x.\nAs in (Erdem and Pelillo 2012) we used the discrete time version of the replicator dynamic equation for the experiments of this paper:\nxh(t+ 1) = xh(t) u(eh, x)\nu(x, x) \u2200h \u2208 S (6)\nwhere, at each time step t, the players update their strategies according to the strategic environment, until the system converges and the Nash equilibria are met. In classical evolutionary game theory these dynamics describe a stochastic evolutionary process in which the agents adapt their behaviors to the environment.\nFor example, if we analyze the prisoner\u2019s dilemma within the evolutionary game theory framework we can see that the cooperative strategy (do not confess) tends to emerge as an equilibrium of the game and this is the best situation for both players, because this strategy gives an higher payoff than the defect strategy (confess), which is the equilibrium in the classical game theory framework. In fact, if the players play the game shown in Table 1 repeatedly and randomize their decisions in each game, assigning at the beginning a normal distribution to their strategies, their payoffs u(xpi) can be computed as follows:\nu(xp1) = Ap1xp2 = ( \u22125, 0 \u22126, \u22121 )( 0.5 0.5 ) = ( \u22122.5 \u22123.5 ) u(xp2) = A T p2xp1 = ( \u22125, \u22126 0, \u22121 )T ( 0.5 0.5 ) = ( \u22122.5 \u22123.5\n) where T is the transpose operator, required for P2, which chooses its strategies according to the columns of the matrix in Table 1. This operation makes the matrices Ap1 and Ap2 identical and for this reason in this case the distinction among the two players is not required since they get the same payoffs. Now we can compute the strategy space of a player at time t+ 1 according to equation (5):\nx1: \u22121.25/\u2212 3 = 0.42 x2: \u22121.75/\u2212 3 = 0.58\nThe game is played with the new strategy spaces until the system converges, that is when the difference among the payoffs at time tn and tn\u22121 is under a small threshold. In Figure 1 we can see how the cooperate strategy increases over time, reaching a stationary point, which corresponds to the equilibrium of the game."}, {"heading": "5. WSD Games", "text": "In this section we describe how the WSD games are formulated. We assume that each player i \u2208 I , which participates in the games is a particular word in a text and that each strategy is a particular word sense. The players can choose a determined strategy among the set of strategies Si = {1, ..., c}, each expressing a certain hypothesis about its membership in a class and c being the total number of classes available. We consider Si as the mixed strategy for player i as described in Section 4. The games are played between two similar words, i and j, imposing only pairwise interaction between them. The payoff matrix Zij of a single game is defined as a sense similarity matrix between the senses of word i and word j. The payoff function for each word is additively separable and is computed as described in Section 4.2.\nFormulating the problem in this way we can apply equation (6) to compute the equilibrium state of the system, which corresponds to a consistent labeling of the data. In fact, once stability is reached, all players play the strategy with the highest payoff. Each player arrives to this state not only considering its own strategies but also the strategies that its co-players are playing. For each player i \u2208 I is chosen the strategy with the highest probability when the system converges (see equation below).\n\u03c6i = arg max h=1,...,c xih (7)\nIn our framework a word is not disambiguated only if it is not able to update its strategy space. This can happen when the player\u2019s strategy space is initialized with a uniform distribution and either its payoff matrices have only zero entries, that is when its senses are not similar to the senses of the co-players, or it is not connected with other nodes in the graph. The former assumption depends on the semantic measures used to calculate the payoffs (see section 5.2.2), experimentally we noticed that it does not happen frequently. The latter assumption can happen when a word is not present in a determined corpus. It can be avoided using query expansion techniques or connecting the disconnected node with nodes in its neighborhood, exploiting proximity relations (see section 5.1.1). With equation 7 it is guaranteed that at the end of the process each word is mapped to exactly one sense. Experimentally, we noticed that when a word is able to update its strategy space, it is not the case that two strategies in it have the same probability."}, {"heading": "5.1 Implementation of the WSD Games", "text": "In order to run our algorithm we need the network that models the interactions among the players, the strategy space of the game and the payoff matrices. We adopted the following steps in order to model the data required by our framework and specifically, for each text to be disambiguated, we:\n\u2022 extract from the text the list of words I , which have an entry in a lexical database,\n\u2022 compute, from I , the word similarity matrix W in which are stored the pairwise similarities among each word with the others and represents the players\u2019 interactions, \u2022 increase the weights between two words, which share a proximity relation, \u2022 extract, from I , the list C of all the possible senses, which represents the strategy\nspace of the system, \u2022 assign, for each word in I , a probability distribution over the senses in C creating\nfor each player a probability distribution over the possible strategies, \u2022 compute the sense similarity matrix Z among each pair of senses in C, which is\nthen used to compute the partial payoff matrices of each games, \u2022 apply the replicator dynamics equation in order to compute the Nash equilibria\nof the games, and \u2022 assign to each word i \u2208 I a strategy s \u2208 C.\nThese steps are described in the following section. In Section 5.1.1 we describe the graph construction procedure, which we employed in order to model the geometry of the data. In Section 5.1.2 we explain how we implement the strategy space of the game, which allows each player to choose over a predetermined number of strategies. In Section 5.1.3 we describe how we compute the sense similarity matrix and how it is used to create the partial payoff matrices of the games. Finally in Section 5.1.4 we describe the system dynamics.\n5.1.1 Graph Construction. In our study, we modeled the geometry of the data as a graph. The nodes of the graph correspond to the words of a text, which have an entry in a lexical database. We denote the words by I = {ij}Nj=1, where ij is the j-th word and N is the total number of words retrieved. From I we construct a N \u00d7N similarity matrix W where each element wij is the similarity value assigned by a similarity function to the words i and j.W can be exploited as an useful tool for graph-based algorithms since it is treatable as weighted adjacency matrix of a weighted graph.\nA crucial factor for the graph construction is the choice of the similarity measure, sim(\u00b7, \u00b7)\u2192 R to weight the edges of the graph. In our experiments, we used similarity measures, which compute the strength of co-occurrence between any two words ii and ij .\nwij = sim(ii, ij) \u2200i, j \u2208 I : i 6= j (8)\nThis choice is motivated by the fact that collocated words tend to have determined meanings (Gale, Church, and Yarowsky 1992; Yarowsky 1993), and also because the computation of these similarities can be obtained easily. In fact, it only required a corpus in order to compute a vast range of similarity measures. Furthermore, large corpora such as the BNC corpus (Leech 1992) and the Google Web 1T corpus (Brants and Franz 2006) are freely available and extensively used by the research community.\nIn some cases, it is possible that some target words are not present in the reference corpus, due to different text segmentation techniques or spelling differences. In this case we use query expansion techniques in order to find an appropriate substitute (Carpineto and Romano 2012). Specifically, we use WordNet to find alternative lexicalizations of a lemma, choosing the one that co-occurs more frequently with the words in its context.\nThe information obtained from an association measure can be enriched taking into account the proximity of the words in the text (or the syntactic structure of the sentence). The first task can be achieved augmenting the similarities among a target word and\nthe n words that appear on its right and on its left, where n is a parameter that with small values can capture fixed expressions and with large values can detect semantic concepts (Fkih and Omri 2012). The second task can be achieved using a dependency parser to obtain the syntactical relations among the words in the target sentence, but this approach is not used in this paper. In this way, the system is able to exploit local and global cues, mixing together the one sense per discourse (Kelly and Stone 1975) and the one sense per collocation (Yarowsky 1993) hypotheses.\nWe are not interested in all the relations in the sentence but we focus only on relations among target words. The use of a dependency/proximity structure makes the graph reflect the structure of the sentence while the use of a distributional approach allows us to exploit the relations of semantically correlated words. This is particularly useful when the proximity information is poor; for example when it connects words to auxiliary or modal verbs. Furthermore, these operations ensure that there are no disconnected nodes in the graph.\n5.1.2 Strategy Space Implementation. The strategy space of the game is created using a knowledge base to collect the sense inventories Mi = {1, . . . ,mi} of each word in a text, where mi is the number of senses associated to word i. Then is created the list C = (1, . . . , c) of all the unique concepts in the sense inventories, which correspond to the space of the game.\nWith this information we can define the strategy space S of the game in matrix form as:\nsi1 si2 \u00b7 \u00b7 \u00b7 sic ... ... \u00b7 \u00b7 \u00b7 ... sn1 sn2 \u00b7 \u00b7 \u00b7 snc\nwhere each row correspond to the mixed strategy space of a player and each column correspond to a specific sense. Each component sih denotes the probability that the player chooses to play its hth pure strategy among all the strategies in its strategy profile, as described in Section 4. The initialization of each mixed strategy space can either be uniform or take into account information from sense-labeled corpora.\n5.1.3 The Payoff Matrices. We encoded the payoff matrix of a WSD game as a sense similarity matrix among all the senses in the strategy spaces of the game. In this, way the higher the similarity among the senses of two words, the higher the incentive for a word to chose that sense, and play the strategy associated with it.\nThe c\u00d7 c sense similarity matrix Z is defined in equation (9).\nzij = ssim(si, sj) \u2200i, j \u2208 C : i 6= j (9)\nThis similarity matrix can be obtained using the information derived by the same knowledge base used to construct the strategy space of the game. It is used to extract the partial payoff matrix Zij for all the single games played between two players i and j. This operation is done extracting from Z the entries relative to the indices of the senses in the sense inventories Mi and Mj . It produces an mi \u00d7mj payoff matrix, where mi and mj are the numbers of senses in Mi and Mj , respectively.\n5.1.4 System Dynamics. Now that we have the topology of the data W , the strategy space of the game S and the payoff matrix Z we can compute the Nash equilibria of the\ngame according to equation (6). In each iteration of the system each player plays a game with its neighbors Ni according to the co-occurrence graph W . The payoffs of the h-th strategy is calculated as:\nui(e h, x) = \u2211 j\u2208Ni (wijZijxj)h (10)\nand the player\u2019s payoff as:\nui(x) = \u2211 j\u2208Ni xTi (wijZijxj) (11)\nIn this way we can weight the influence that each word has on the choices that a particular word has to make on its meaning. We assume that the payoff of word i depends on the similarity that it has with word j, wij , the similarities among its senses and those of word j, Zij , and the sense preference of word j, (xj). During each phase of the dynamics a process of selection allows strategies with higher payoff to emerge and at the end of the process each player chooses its sense according to these constraints.\nThe complexity of each step of the replicator dynamics is quadratic but there are different dynamics that can be used with our framework to solve the problem more efficiently, such as the recently introduced infection and immunization dynamics (Rota Bul\u00f3, Pelillo, and Bomze 2011) that has a linear-time/space complexity per step and it is known to be much faster then, and as accurate as, the replicator dynamics."}, {"heading": "5.2 Implementation Details", "text": "In this section we describe the association measures used to weight the graphW (Section 5.2.1), the semantic and relatedness measures used to compare the synsets (Section 5.2.2), the computation of the payoff matrices of the games (Section 5.2.3) and the different implementations of the system strategy space (5.2.4), in case of unsupervised, semi-supervised and coarse-grained WSD.\n5.2.1 Association Measures. We evaluated our algorithm with different similarity measures in order to find the measure that performs better. The results of this evaluation are presented in Section 6.2.1. Specifically for our experiments we used eight different measures: the Dice coefficient (dice) (Dice 1945), the modified Dice coefficient (mDice) (Kitamura and Matsumoto 1996), the pointwise mutual information (pmi) (Church and Hanks 1990), the t-score measure (t-score) (Church and Hanks 1990), the z-score measure (z-score) (Burrows 2002), the odds ration (odds-r) (Blaheta and Johnson 2001), the chisquared test (chi-s) (Rao 2002) and the chi-squared correct (chi-s-c) (DeGroot et al. 1986).\nThe measures that we used are presented in Figure 3 where the notation refers to the standard contingency tables (Evert 2008) used to display the observed and expected frequency distribution of the variables, respectively on the left and on the right of Figure 2. All the measures for the experiments in this article have been calculated using the BNC corpus (Leech 1992), since it is a well balanced general domain corpus.\n5.2.2 Semantic and Relatedness Measures. We used WordNet (Miller 1995) and BabelNet (Navigli and Ponzetto 2012a) as knowledge bases to collect the sense inventories of each word to be disambiguated.\nSemantic and Relatedness Measures Calculated with WordNet. WordNet (Miller 1995) is a lexical database where the lexicon is organized according to a psycholinguistic theory of the human lexical memory, in which the vocabulary is organized conceptually rather than alphabetically, giving a prominence to word meanings rather than to lexical forms. The database is divided in five parts: nouns, verbs, adjectives, adverbs and functional words. In each part the lexical forms are mapped to the senses related to them, in this way it is possible to cluster words, which share a particular meaning (synonyms) and to create the basic component of the resource: the synset. Each synset is connected in a network to other synsets, which have a semantic relation with it.\nThe relations in WordNet are: hyponymy, hypernymy, antonymy, meronymy and holonymy. Hyponymy gives the relations from more general concepts to more specific; hypernymy gives the relations from particular concepts to more general; antonymy relates two concepts, which have an opposite meaning; meronymy connects the concept that is part of a given concept with it; and holonymy relates a concept with its constituents. Furthermore, each synset is associated to a definition and gives the morphological relations of the word forms related to it. Given the popularity of the resource many parallel projects have been developed. One of them is eXtended WordNet (Mihalcea and Moldovan 2001), which gives a parsed version of the glosses together with their logical form and the disambiguation of the term in it.\nWe have used this resource to compute similarity and relatedness measures in order to construct the payoff matrices of the games. The computation of the sense similarity measures is generally conducted using relations of likeness such as the is-a relation in a taxonomy; on the other hand the relatedness measures are more general and take in account a wider range of relations such as the is-a-part-of or is-the-opposite-of.\nThe semantic similarity measure which we used are the wup similarity (Wu and Palmer 1994) and the jcn measure (Jiang and Conrath 1997). These measure are based on the structural organization of WordNet and compute the similarity among two senses si, sj according to the depth of the two sense in the lexical database and that of the most specific ancestor node, msa, of the two senses. The wup similarity, described in equation (12), takes into account only the path length among two concepts. The jcn measure combines corpus statistics and structural properties of a knowledge base. It is computed as presented in equation (13), where IC is the information content of a concept c derived from a corpus3 and computed as IC(c) = log\u22121P (c).\nssimwup(si, sj) = 2 \u2217 depth(msa)/(depth(si) + depth(sj)) (12)\nssimjcn(si, sj) = IC(s1) + IC(s2)\u2212 2IC(msa) (13)\nThe semantic relatedness measures, which we used, are based on the computation of the similarity among the definitions of two concepts in a lexical database. These definitions are derived from the glosses of the synsets in WordNet. They are used to construct a co-occurrence vector vi = (w1,i, w2,i...wn,i) for each concept i, with a bag-ofwords approach where w represents the number of times word w occur in the gloss and n is the total number of different words (types) in the corpus4. This representation allows to project each vector into a vector space where it is possible to conduct different kind of computations. For our experiments, we decided to calculate the similarity among two glosses using the cosine distance among two vectors as shown in equation (14), where the nominator is the intersection of the words in the two glosses and ||v|| is the norm of the vectors, which is calculated as: \u221a\u2211n i=1 w 2 i .\ncos \u03b8 vi \u00b7 vj ||vi||||vj ||\n(14)\nThis measure gives the cosine of the angle between the two vectors and in our case returns values ranging from 0 to 1 because the values in the co-occurrence vectors are all positive. Given the fact that small cosine distances indicate a high similarity we transform this distance measure into a similarity measure with 1\u2212 cos(vi, vj).\nThe procedure to compute the semantic relatedness of two synsets has been introduced by Patwardhan and Pedersen (2006) as Gloss Vector measure and we used it with four different variations for our experiments. The four variations are named: tf \u2212 idf , tfidfext, vec and vecext. The difference among them relies on the way the gloss vectors are constructed. Since the synset gloss is usually short we used the concept of supergloss as in (Patwardhan and Pedersen 2006) to construct the vector of each synset. A super-gloss is the concatenation of the gloss of the synset plus the glosses of the synsets, which are connected to it via some WordNet relations (Pedersen 2012). We employed, the WordNet version that has been used to to label each dataset. Specifically the different implementations of the vector construction vary on: the way in which the co-occurrence\n3 We used the IC files computed on SemCor (Miller et al. 1993) for the experiments in this article. They are available at http://wn-similarity.sourceforge.net and are mapped to the corresponding version of WordNet of each dataset. 4 In our case the corpus is composed of all the WordNet glosses.\nis calculated, the corpus used and the source of the relations. tf-idf constructs the cooccurrence vectors exploiting the term frequency - inverse document frequency weighting schema (tf-idf ). tf \u2212 idfext uses the same information of tf-idf plus the relations derived from eXtended WordNet (Mihalcea and Moldovan 2001). vec uses a standard BoW approach to compute the co-occurrences. vecext uses the same information of vec plus the relations from eXtended WordNet.\nInstead of considering only the raw frequency of terms in documents, the tf-idf method, scales the importance of less informative terms taking into account the number of documents in which a term occur. Formally, it is the product of two statistics: the term frequency and the inverse document frequency. The former is computed as the number of times a term occur in a document (gloss in our case), the latter is computed as idft = log\nN dft , where N is the number of documents in the corpus and dft is the number of documents in which the term occurs.\nRelatedness Measure Calculated with BabelNet and NASARI. BabelNet (Navigli and Ponzetto 2012a) is a wide-coverage multilingual semantic network. It integrates lexicographic and encyclopedic knowledge from WordNet and Wikipedia, automatically mapping the concepts shared by the two knowledge bases. This mapping generates a semantic network where millions of concepts are lexicalized in different languages. Furthermore, it allows to link named entities, such as Johann Sebastian Bach and concepts, such as composer and organist.\nBabelNet can be represented as a labeled direct graph G = (V,E) where V is the set of nodes (concepts or named entities) and E \u2286 V \u00d7R\u00d7 V is the set of edges connecting pairs of concepts or named entities. The edges are labeled with a semantic relation fromR, such as: is-a, given name or occupation. Each node v \u2208 V contains a set of lexicalizations of the concept for different languages, which forms a BabelNet synset.\nThe semantic measure, which we developed using BabelNet, is based on NASARI5 (Camacho-Collados, Pilehvar, and Navigli 2015), a semantic representation of the concepts and named entities in BabelNet. This approach first exploits the BabelNet network to find the set of related concepts in WordNet and Wikipedia and then constructs two vectors to obtain a semantic representation of a concept b. These representations are projected in two different semantic spaces, one based on words and the other on synsets. They use lexical specificity6 (Lafon 1980) to extract the most representative words to use in the first vector and the most representative synsets to use in the second vector.\nIn this article, we computed the similarity between two senses using the vectors (of the word-based semantic space) provided by NASARI. These semantic representations provide for each sense the set of words, which best represent e particular concept and the score of representativeness of each word. From this representation we computed the pairwise cosine similarity between each concept as described in the previous section for the semantic relatedness measures.\nThe use of NASARI is particularly useful in case of named entity disambiguation, since it includes many entities, which are not included in WordNet. On the other hand, it is difficult to use it in all-words sense disambiguation tasks, since it includes only WordNet synsets that are mapped to Wikipedia pages in BabelNet. For this reason it is not possible to find the semantic representation for many verbs, adjectives and adverbs, which is common to find in all-words sense disambiguation tasks.\n5 The resource is available at http://lcl.uniroma1.it/nasari/ 6 A statistical measure based on the hypergeometric distribution over word frequencies.\nWe used the SPARQL endpoint7 provided by BabelNet to collect the sense inventories of each word in the texts of each dataset. For this task we filtered the first 100 resources whose label contains the lexicalization of to word to be disambiguated. This operation is required because in many cases it is possible to have indirect references to entities.\n5.2.3 From similarities to payoffs. The similarity and relatedness measures are computed for all the senses of the words to be disambiguated. From this computation it is possible to obtain a similarity matrix Z, which incorporates the pairwise similarity among all the possible senses. This computation could have heavy computational cost, if there are many words to be disambiguated. To overcome this issue, the pairwise similarities can be computed just one time on the entire knowledge base and used in actual situations, reducing the computational cost of the algorithm. From this matrix we can obtain the partial semantic similarity matrix for each pair of player, Zij = m\u00d7 n, where m and n are the senses of i and j in Z.\n5.2.4 Strategy space implementation. Once the pairwise similarities between the words and their senses, stored in the two matrices W and Z, are calculated, we can pass to the description of the strategy space of each player. It can be initialized with equation (15), which follows the constraints described in Section 4.2 and assigns to each sense an equal probability.\nsij = { |Mi|\u22121, if sense j is in Mi. 0, otherwise.\n(15)\nThis initialization is used in the case of unsupervised WSD since it does not use any prior knowledge about the senses distribution. In case we want to exploit information from prior knowledge, obtained from sense-labeled data, we can assign to each sense a probability according with its rank, concentrating a higher probability on senses that have a high frequency. To model this kind of scenario we used a geometric distribution that gives us a decreasing probability distribution. This new initialization is defined as follows,\nsij = { p(1\u2212 p)rj , if sense j is in Mi. 0, otherwise.\n(16)\nwhere p is the parameter of the geometric distribution and determines the scale or statistical dispersion of the probability distribution, and rj is the rank of sense j, which ranges from 1, the rank of the most common sense, to m, the rank of the least frequent sense. Finally, the vector obtained from equation (16) is divided by \u2211 j\u2208Si pj in order to make the probabilities add up to 1. In our experiments, we used the ranked system provided by the Natural Language Toolkit (version 3.0) (Bird 2006) to rank the senses associated to each word to be disambiguated. Natural Language Toolkit is a suite of modules and data sets, covering symbolic and statistical NLP. It includes a WordNet reader that can be queried with a lemma and a part of speech to obtain the list of possible sysnets associated to the specified lemma and a part of speech. The returned synsets\n7 http://babelnet.org/sparql/\nare listed in decreasing order of frequency and can be used as ranking system by our algorithm.\nWe used the method proposed by Navigli (2006) for the experiments on coarsegrained WSD. With this approach it is possible to cluster the senses of a given word, according to the similarity that the senses share. In this way it is possible to obtain a set of disjoint clusters O = {o1, ..., ot}, which is ranked according to the information obtained with the ranking system described above, for each sense inventory M . The initialization of the strategy space, in this case, is defined as follows,\nsij = { p(1\u2212 p)ro , if sense j is in cluster o. 0, otherwise.\n(17)\nWith this initialization it is possible to assign an equal probability to the senses belonging to a determined cluster and to rank the clusters according to the ranking of the senses in each of them."}, {"heading": "5.3 An example", "text": "As an example we can consider the following sentence, which we encountered before:\n\u2022 There is a financial institution near the river bank.\nWe first tokenize, lemmatize and tag the sentence, then we extract the content words that have an entry in WordNet 3.0 (Miller 1995), constructing the list of words to be disambiguated: {is, financial, institution, river, bank}. Once we identified the target words we computed the pairwise similarity for each target word. For this task we used the Google Web 1T 5-Gram Database (Brants and Franz 2006) to compute the modified Dice coefficient8 (Kitamura and Matsumoto 1996). With the information derived by this process we can construct a co-occurrence graph (Figure 4(a)), which indicates the strength of association between the words in the text. This information can be augmented taking into account other sources of information such that the dependency structure of the syntactic relations between the words9 or the proximity information derived by a simple n-gram model (Figure 4(b), n = 1).\nThe operation to increment the weights of structurally related words is important because it prevents the system to rely only on distributional information, which could lead to a sense shift for the ambiguous word bank. In fact, its association with the words financial and institution would have the effect to interpret it as a financial institution and not as sloping land as defined in WordNet. Furthermore, using only distributional information could exclude associations between words that do not appear in the corpus in use.\nIn Figure 4(c) it is represented the final form of the graph for our target sentence, in which we have combined the information from the co-occurrence graph and from the n-gram graph. The weights in the co-occurrence graph are increased by the mean\n8 Specifically we used the service provided by the Corpus Linguistics group at FAU Erlangen-N\u00fcrnberg, with a collocation span of 4 words on the left and on the right and collocates with minimum frequency: 100. 9 This aspect is not treated in this article.\nweight of the graph if a corresponding edge exists in the n-gram graph and not include stop-word10.\nAfter the pairwise similarities between the words are computed we access a lexical database in order to get the sense inventories of each word so that each word can be associated to a predefined number of senses. For this task, we use WordNet 3.0 (Miller 1995). Then for each unique sense in all the sense inventories we compute the pairwise semantic similarity, in order to identify the affinity among all the pairwise sense combination. This task can be done using a semantic similarity or relatedness measure 11. For this example, we used a variant of the gloss vector measure (Patwardhan and Pedersen 2006), the tf-idf, described in Section 5.2.2.\nHaving obtained the similarity information we can initialize the strategy space of each player with a uniform distribution, given the fact that we are not considering any prior information about the senses distributions. Now the system dynamics can be started. In each iteration of the dynamics each player play a game with its neighbors obtaining a payoff for each of its strategies according to equation (10) and once the players have played the games with their neighbors in W , the strategy space of each player is updated at time t+ 1 according to equation (6).\nWe present the dynamics of the system created for the example sentence in Figure 5. The dynamics are shown only for the ambiguous words at time steps t1, t2, t3 and t12 (when the system converges). As we can see at time step 1 the senses of each word are equiprobable, but as soon as the games are played some sense starts to emerge. In fact at time step 2 many senses are discarded, and this in virtue of two principles,a) the\n10 A more accurate representation of the data can be obtained using the dependency structure of the sentence, instead of the n-gram graph; but in this case the results would not have changed, since in both cases there is an edge between river and bank. In fact, in many cases a simple n-gram model can implicitly detect syntactical relations. We used the stop-word list available in the Python Natural Language Toolkit, described above. 11 Semantic similarity and relatedness measures are discussed in Section 5.2.1 and 5.2.2.\nwords in the text push the senses of the other words toward a specific sense; and b) the sense similarity values for certain senses are very low.Regarding the first principle, we can consider the word institution, which is playing the games with the words financial and bank, is immediately driven toward a specific sense, as an organization founded and united for a specific purpose as defined in WordNet 3.0; thus discarding the other senses. Regarding the second principle, we can consider many senses of the word bank\nthat are not compatible with the senses of the other words in the text and therefore their values decrease rapidly.\nThe most interesting phenomenon that can be appreciated from the example is the behavior of the strategy space of the word bank. It has ten senses, according to WordNet 3.0 (Miller 1995), and can be used in different context and domains, to indicate, among the other things, a financial institution (s22 in Figure 5) or a sloping land (s20 in Figure 5). When it plays a game with the words financial and institution it is directed toward its financial sense; when it plays a game with the word river, it is directed toward its naturalistic meaning. As we can see in Figure 5 at time step 2 the two meanings (s20 and s22) have almost the same value and at time step 3 the word starts to define a precise meaning to the detriment of s21 but not of s22. The balancing of these forces toward a specific meaning is given by the similarity value wij , which allows bank in this case to chose its naturalistic meaning. Furthermore, we can see that the inclination to a particular sense is given by the payoff matrix Zij and by the strategy distribution Sj , which indicates what sense word j is going to choose, ensuring that word i\u2019s is coherent with this choice."}, {"heading": "6. Experimental Evaluation", "text": "In this Section we describe how the parameters of the presented method have been found and how it has been tested and compared with state-of-the-art systems12, in Section 6.1 and Section 6.2, respectively. We describe the datasets used for the tuning and for the evaluation of our model and the different settings used to test it. The results of our experiments using WordNet as knowledge base are described in Section 6.2.1, where two different implementations of the system are proposed, the unsupervised and the supervised. In Section 6.2.1 we compare our results with state-of-the-art systems. Finally, the results of the experiments using BabelNet as knowledge base, related to WSD and entity disambiguation, are described in Section 6.2.2. The results are provided as F1, computed according to the following equation,\nF1 = 2 \u00b7 precision \u00b7 recall precision+ recall \u00b7 100. (18)\nF1 is a measure that determines the weighted harmonic mean of precision and recall. Precision is defined as the number of correct answers divided by the number of provided answers and recall is defined as the number of correct answers divided by the total number of answers to be provided."}, {"heading": "6.1 Parameter Tuning", "text": "We used two datasets to tune the parameters of our approach, SemEval-2010 task 17 (S10) (Agirre et al. 2009) and SemEval-2015 Task 13 (S15) (Moro and Navigli 2015). The first dataset is composed of three English texts from the ecology domain, for a total of 1398 words to be disambiguated (1032 nouns/named entities and 366 verbs). The second dataset is composed of four English documents, from different domains: medical, drug, math and social issues, for a total of 1261 instances, including nouns/named entities, verbs, adjectives and adverbs. Both datasets have been manually labeled\n12 The code of the algorithm and the datasets used are available at http://www.dsi.unive.it/\u223ctripodi/wsd\ndice mdice pmi t-score z-score odds-r chi-s chi-s-c tfidf 55.5 56.3 50.6 45.4 50.1 49.8 39.1 54.4 tfidfext 56.5 55.9 50.1 45.0 49.9 49.5 39.1 54.2 vec 54.7 54.3 49.3 44.1 49.4 53.6 39.3 50.5 vecext 55.0 54.3 48.8 43.8 48.6 53.6 39.1 49.9 jcn 51.3 50.6 40.1 50.1 47.6 52.6* 50.1 50.6 wup 37.2 36.9 35.6 32.2 37.9 36.8 38.4 35.4\nTable 2 Results as F1 for S10. The first result with a statistically significant difference from the best (bold result) is marked with * (\u03c72, p < 0.05).\nusing WordNet 3.0. The only difference between these datasets is that the target words of the first dataset belong to a specific domain, whereas all the content words of the second dataset have to be disambiguated. We used these two typologies of dataset to evaluate our algorithm in different scenarios, furthermore we created, from each dataset, 50 different datasets, selecting from each text a random number of sentences and evaluating our approach on each of these datasets to identify the parameters that on average perform better than others. In this way it is possible to simulate a situation in which the system has to work on texts of different sizes and on different domains. This because as demonstrated by S\u00f8gaard et. al (2014) the results of a determined algorithm are very sensitive to sample size. The number of target words for each text in the random datasets ranges from 12 to 571. The parameters which will be tuned are: the association and semantic measure to use to weight the similarity among words and senses (Section 6.1.1), the n of the n-gram graph used to increase the weights of near words (Section 6.1.2) and the p of the geometric distribution useed by our semi-supervised system (Section 6.1.3)\n6.1.1 Association and Semantic Measures. The first experiment that we present is aimed at finding the semantic and distributional measures with the highest performances. We recall that we used WordNet 3.0 as knowledge base and the BNC corpus (Leech 1992) to compute the association measures. In Table 2 and 3 we report the average results on the S10 and S15 datasets, respectively. From these tables it is possible to see that the performances of the system are highly influenced by the combination of measures used.\nAs an example of the different representations generated by the measures described in Section 5.2 we can observe Figure 6 and 7, which depict the matrices Z and the adjacency matrix of the graph W , respectively and are computed on the following three sentences from the second text of S10,\nThe rivers Trent and Ouse, which provide the main fresh water flow into the Humber, drain large industrial and urban areas to the south and west (River Trent), and less densely populated agricultural areas to the north and west (River Ouse). The Trent/Ouse confluence is known as Trent Falls. On the north bank of the Humber estuary the principal river is the river Hull, which flows through the city of Kingston-upon-Hull, and has a tidal length of 32 km, up to the Hempholme Weir. resulting in 35 content words (names and verbs) listed below and 131 senses.\ndice mdice pmi t-score z-score odds-r chi-s chi-s-c tfidf 64.1 64.2 63.1 59.0 61.8 65.3 63.3* 62.4 tfidfext 62.9 63.1 62.4 58.7 60.9 63.0 62.0 61.1 vec 62.8 62.3 62.8 59.8 62.3 62.9 61.1 60.3 vecext 60.5 59.9 61.2 57.8 59.7 60.6 60.1 59.4 jcn 57.2 57.6 56.7 57.9 57.0 56.9 57.5 57.6 wup 46.2 45.4 43.8 45.4 45.9 47.4 46.1 45.5\nThe first observation that can be done on the results is related to the semantic measures; in fact, the relatedness measures perform significantly better than the semantic similarity measures. This is due to the fact that wup and jcn can be computed only on synsets, which have the same part of speech. This limitation affects the results of the algorithm because the games played between two words with different parts of speech have no effect on the dynamics of the system, since the values of the resulting payoff matrices are all zeros. This affects the performances of the system in terms of recall, because, in this situation, these words tend to remain on the central point of the simplex\nand also in terms of precision, because the choice of the meaning of a word is computed only taking into account the influence of words with the same part of speech. In fact, from Figure 6 we can see that the representations provided by wup and jcn, for the text described above, have many uniform areas, this means that these approaches are not able to provide a clear representation of the data. To the contrary, the representations provided by the relatedness measures show a block structure on the main diagonal of the matrix, which is exactly what is required for a similarity measure. The use of the tf-idf weighting schema seems to be able to reduce the noise in the data representation, in fact the weights on the left part of the matrix are reduced by tfidf and tfidf-ext whereas they have high values in vec and vec-ext. The representations obtained with eXtended WordNet are very similar to those obtained with WordNet and also their performances are very close, although on average WordNet outperform eXtended WordNet.\nIf we observe the performances of the association measures we can notice that on average the best measures are dice, mdice, chi-s-c and also odds-r on S15, to the contrary the other measures perform almost always under the statistical significance. Observing the representations in Figure 7 we can see that dice and mdice have a similar structure, the difference between these two measures are that mdice has values on a different range and\ntends to differentiate better the weights, whereas in dice the values are almost uniform. Pmi tends to take high values when one word in the collocation has low frequency but this does not imply high dependency and therefore compromise the results of the games. From its representation we can observe that its structure is different from the previous two, in fact it concentrate its values on collocations such as river Trent and river Ouse and this has the effect to unbalance the data representation. In fact the dice and mdice concentrate their values on collocations such as river flow and bank estuary. T-score and z-score have a similar structure, the only difference is in the range of the values. For these measures we can see that the distribution of the values is quite homogeneous meaning that these measures are not able to balance well the weights. On odds-r we can recognize a structure similar to that of pmi, the main difference is that it works on a different range. The values obtained with chi-s are on a wide range, which compromises the data representation; in fact its results are always under the statistical significance. Chi-s-c works on a narrower range than chi-s and its structure resample that of dice, in fact its results are often high.\n6.1.2 N-gram Graph. The association measures are able to give a good representation of the text but in many cases it is possible that a word in a specific text is not present in the corpus on which these measures are calculated, furthermore, it is possible that these words are used with different lexicalizations. A way to overcome these problems is to increase the values of the nodes near a determined word, in this way it is possible to ensure that the nodes in W are always connected. Furthermore, it allows to exploit local information, increasing the importance of the words, which share a proximity relation with a determined word, in this way it is possible to give more importance to (possibly syntactically) related words, as described in Section 5.1.1. To test the influence\nthat the parameter of the n-gram graph has on the performances of the algorithm we selected the association and relatedness measures with the highest results and conduct a series of experiments on the same datasets presented above, with increasing values of n. The results of these experiments on S10 and S15 are presented in Figure 8(a) and\n8(b), respectively. From the plots we can see that this approach is always beneficial for S15 and that the results increased substantially with values of n greater than 2. To the contrary on S10 this approach is not always beneficial but in many cases it is possible to notice an improvement. In particular we can notice that the pair of measures with highest results on both datasets is tfidf-mdice with n = 5. This confirms also our earlier experiments in which we have seen that these two measures are particularly suited for our algorithm.\n6.1.3 Geometric Distribution. Once we have identified the measures to use in our unsupervised system we can test what is the best parameter to use in case we want to exploit information from sense labeled corpora. To tune the parameter of the geometric distribution (described in Section 5.2.4) we used the pair of measures and the value of n detected with the previous experiments and ran the algorithm on S10 and S15 with increasing values of p, in the interval [0.05, 0.95].\nThe results of this experiment are presented in Figure 9(a), where we can see that the performances of the semi-supervised system on S15 are always better those obtained with the unsupervised system (p = 0). To the contrary, the performances on S10 are always lower than those obtained with the unsupervised system. This behavior is not surprising because the target words of S10 belong to a specific semantic domain. We used SemCor to obtain the information about the sense distributions and this resource is a general domain corpus, which is not tailored for this specific task. In fact, as pointed out by McCarthy et. al (2007) the distribution of word senses on specific domains is highly skewed and for this reason the most frequent sense heuristic calculated on general domains corpora, such as SemCor, is not beneficial for this kind of texts.\nFrom the plot we can see that on S15 the highest results are obtained with values of p ranging from 0.4 to 0.7 and for the evaluation of our model we decided to use p = 0.4 as parameter for the geometric distribution, since with this value we obtained the highest result.\n6.1.4 Error Analysis. The main problems that we noticed analyzing the results of previous experiments are related to the semantic measures. As we pointed out in Section 6.1.1, these measures can be computed only on synsets with the same part of speech and this influences the results in terms of recall. The adverbs and adjectives are not disambiguated with these measures, because of the lack of payoffs. This does not happen only in case of function words with low semantic content but also for verbs with a rich semantic content, such as generate, prevent and obtain. The use of the relatedness measures reduces substantially the number of words that are not disambiguated. With these measures a word is not disambiguated only in cases in which the concepts denoted by it are not covered enough by the reference corpus, for example in our experiments we have that words such as drawn-out, dribble and catchment are not disambiguated.\nTo overcome this problem we have used the n-gram graph to increase the weights among neighboring words. Experimentally we noticed that when this approach is used with the relatedness measures it leads to the disambiguation of all the target words and with n \u2265 1 we have precision = recall. The use of this approach influences the results also in terms of precision, in fact if we consider the performances of the system on the word actor, we pass from F1 = 0 (n = 0) to F1 = 71.4 (n = 5). This is because the number of relations of the two senses (synsets) of the word actor are not balanced in WordNet 3.0, in fact actor as theatrical performer has 21 relations whereas actor as person who acts and gets things done has only 8 relations and this can compromise the computation of the semantic relatedness measures. It is possible to overcome this limitation using the local information given by the n-gram graph, which allows to balance the influence of words in the text.\nAnother aspect to consider is if the polysemy of the words influences the results of the system. Analyzing the results we noticed that the majority of the errors are made on words such as make-v, give-v, play-v, better-a, work-v, follow-v, see-v, come-v, which have more that 20 different senses and are very frequent words difficult to disambiguate in fine-grained tasks. As we can see from Figure10 this problem can be partially solved using the semi-supervised system. In fact, the use of information from sense-labeled corpora is particularly useful when the polysemy of the words is particularly high."}, {"heading": "6.2 Evaluation Setup", "text": "We evaluated our algorithm with three fine-grained datasets: Senseval-2 english allwords (S2) (Palmer et al. 2001), Senseval-3 english all-words (S3) (Snyder and Palmer\n2004), SemEval-2007 all-words (S7) (Pradhan et al. 2007), and one coarse-grained dataset, SemEval-2007 english all-words (S7CG) (Navigli, Litkowski, and Hargraves 2007)13, using as knowledge base WordNet. Furthermore we evaluated our approach on two datasets, SemEval-2013 task 12 (S13) (Navigli, Jurgens, and Vannella 2013) and KORE50 (Hoffart et al. 2012)14, using as knowledge base BabeNet.\nWe describe the evaluation using as knowledge base WordNet in the next sections and in Section 6.2.2 we present the evaluation conducted using as knowledge base BabelNet. We recall that for all the next experiments we used mdice to weight the graph W , tfidf to compute the payoffs, n = 5 for the n-gram graph and p = 0.4 in case of semisupervised learning. The results are provided as F1 for all the datasets except KORE50, for this dataset the results are provided as accuracy, as it is common in the literature.\n6.2.1 Experiments Using WordNet as Knowledge Base. Table 4 shows the results as F1 for the four datasets that we used for the experiments with WordNet. The table includes the results for the two implementations of our system: the unsupervised and the semisupervised and the results obtained using the most frequent sense heuristic. For the computation of the most frequent sense we assigned to each word to be disambiguated the first sense returned by the WordNet reader provided by the Natural Language Toolkit (version 3.0) (Bird 2006). As we can see the best performances of our system are obtained on nouns, on all the datasets. This is in line with state of the art systems because in general the nouns have lower polysemy and higher inter-annotator agreement (Palmer et al. 2001). Furthermore, our method is particularly suited for nouns. In fact, the disambiguation of nouns benefits from a wide context and local collocations (Agirre and Edmonds 2007).\nWe obtained low results on verbs, on all datasets. This, as pointed out by Dang (1975), is a common problem not only for supervised and unsupervised WSD systems but also for humans which in many cases disagree about what constitutes a different sense for a polysemous verb, compromising the sense tagging procedure.\nAs we have anticipated in Section 6.1.3, the use of prior knowledge is beneficial for this kind of dataset. As we can see in Table 4 using a semi-supervised setting improves the results of 5% on S2 and S3 and of 12% on S7. The big improvement obtained on S7 can be explained by the fact that the results of the unsupervised system are well below the most frequent sense heuristic, so exploiting the evidence from sense-labeled dataset is beneficial. For the same reason, the results obtained on S7CG with a semi-supervised setting are less impressive than those obtained with the unsupervised systems; in fact, the structure of the datasets is different and the results obtained with the unsupervised setting are well above the most frequent sense. These series of experiments confirm that the use of prior knowledge is beneficial in general domain datasets and that when it is used the system performs better than the most common sense heuristic computed on the same corpus.\nComparison to State-of-the-Art Algorithms. Table 5 shows the results of our system and the results obtained by state-of-the-art systems on the same datasets. We compared our\n13 We downloaded S2 from www.hipposmond.com/senseval2, S3 from http://www.senseval.org/senseval3, S7 from http://nlp.cs.swarthmore.edu/semeval/tasks/index.php and S7CG from http://lcl.uniroma1.it/coarse-grained-aw 14 We downloaded S13 from https://www.cs.york.ac.uk/semeval-2013/task12/index.html and KORE50 from http://www.mpi-inf.mpg.de/departments/databases-and-information-systems/research/yagonaga/aida/downloads/\nSemEval 2007 coarse-grained - S7CG Method All N V A R WSDunsgames 80.4 85.5 71.2 81.5 76.0 WSDssupgames 82.8 85.4 77.2 82.9 84.6 MFS 76.3 76.0 70.1 82.0 86.0\nSemEval 2007 fine-grained - S7 Method All N V A R WSDunsgames 43.3 49.7 39.9 \u2212 \u2212 WSDssupgames 56.5 62.9 53.0 \u2212 \u2212 MFS 54.7 60.4 51.7 \u2212 \u2212\nSenseval 3 fine-grained - S3 Method All N V A R WSDunsgames 59.1 63.3 50.7 64.5 71.4 WSDssupgames 64.7 70.3 54.1 70.7 85.7 MFS 62.8 69.3 51.4 68.2 100.0\nSenseval 2 fine-grained - S2 Method All N V A R WSDunsgames 61.2 69.8 41.7 61.9 65.1 WSDssupgames 66.0 72.4 43.5 71.8 75.7 MFS 65.6 72.1 42.4 71.6 76.1\nTable 4 Detailed results as F1 for the four datasets studied with tf-idf and mdice as measures. The results show the performances of our unsupervised (uns) and semi-supervised (ssup) system and the results obtained employing the most frequent sense heuristic (MFS). Detailed information about the performances of the systems on different part of speech are provided: nouns (N), verbs (V), adjectives (A), adverbs (R).\nmethod with supervised, unsupervised and semi-supervised system on four datasets. The supervised systems are It makes sense (Zhong and Ng 2010) (Zhong10), an open source WSD system based on support vector machines (Steinwart and Christmann 2008); and the best system that participated to each competition (Best). The semisupervised systems are: IRST-DDD-00 (Strapparava, Gliozzo, and Giuliano 2004), based on WordNet domains and on manually annotated domain corpora; MFS, which corresponds to the most frequent sense heuristic implemented using the WordNet corpus reader of the natural language toolkit; MRF-LP based on Markov random field (Chaplot, Bhattacharyya, and Paranjape 2015); Nav05 (Navigli and Velardi 2005) a knowledge based method that exploits manually disambiguated word senses to enrich the knowledge base relations; PPRw2w (Agirre, de Lacalle, and Soroa 2014) a random walk method that uses contextual information and prior knowledge about senses distribution to compute the most important sense in a network given a specific word and its context. The unsupervised systems are: Nav10, a graph based WSD algorithm that exploits\nS7CG S7CG (N) S7 S3 S2\nun su p. Nav10 \u2212 \u2212 43.1 52.9 \u2212 PPRw2w 80.1 83.6 41.7 57.9 59.7 WSDgames 80.4* 85.5 43.3 59.1 61.2\nse m\nis up\n. IRST-DDD-00 \u2212 \u2212 \u2212 58.3 \u2212 MFS 76.3 77.4 54.7 62.8 65.6* MRF-LP \u2212 \u2212 50.6* 58.6 60.5 Nav05 83.2 84.1 \u2212 60.4 \u2212 PPRw2w 81.4 82.1 48.6 63.0 62.6 WSDgames 82.8 85.4 56.5 64.7* 66.0\nsu p. Best 82.5 82.3* 59.1 65.2 68.6\nZhong10 82.6 \u2212 58.3 67.6 68.2\nTable 5 Comparison with state-of-the-art algorithms: unsupervised (unsup.), semisupervised (semi sup.) and supervised (sup.). MFS refers to the MFS heuristic computed on SemCor on each dataset and BEST refers to the best supervised system for each competition. The results are provided as F1 and the first result with a statistically significant difference from the best of each dataset is marked with * (\u03c72, p < 0.05).\nconnectivity measures to determine the most important node in the graph composed by all the senses of the words in a sentence; and a version of the PPRw2w algorithm that does not use sense tagged resources.\nThe results show that our unsupervised system performs better than any other unsupervised algorithm in all datasets. In S7CG and S7 the difference is minimal compared with PPRw2w and Nav10, respectively; in S3 and S2 the difference is more substantial compared to both unsupervised systems. Furthermore, the performances of our system is more stable on the four datasets, showing a constant improvement on the state-ofthe-art.\nThe comparison with semi supervised systems shows that our system performs always better than the most frequent sense heuristic when we use information from sense-labeled corpora. We can note a strange behavior on S7CG, when we use prior knowledge the performances of our semi-supervised system are lower than our unsupervised system and state-of-the-art. This is because on this dataset the performances of our unsupervised system are better than the results than can be achieved by using labeled data to initialize the strategy space of the semi supervised system. On the other three datasets we can note a substantial improvement in the performances of our system, with stable results higher than state-of-the-art systems.\nFinally we can note that the results of our semi supervised system, on the finegrained datasets, are close to the performances of state-of-the-art supervised systems, with values that are statistically relevant only on S3. We can also note that the performances of our system on the nouns of the S7CG dataset are higher than the results of the supervised systems.\n6.2.2 Experiments with BabelNet. BabelNet is particularly useful when the number of named entities to disambiguate is high. In fact it is not possible to perform this task using only WordNet, because its coverage on named entities is limited. For the experi-\nS13 KORE50 WSDgames 70.8 75.7 Babelfy 69.2 71.5 SUDOKU 66.3 \u2212 MFS 66.5* \u2212 PPRw2w 60.8 \u2212 KORE \u2212 63.9* GETALP 58.3 \u2212\nTable 6 Comparison with state-of-the-art algorithms on WSD and entity linking. The results are provided as F1 for S13 and as accuracy for KORE50. The first result with a statistically significant difference from the best (bold result) is marked with * (\u03c72, p < 0.05).\nments on this section we used BabelNet to collect the sense inventories of each word to be disambiguated, the mdice measure to weight the graph W and NASARI to obtain the semantic representation of each sense. The similarity among the representation obtained with this resource are computed using the cosine similarity measure, described in Section 5.2.2. The only differences with the experiments presented in Section 6.2.1 are that we used BabelNet as knowledge base and NASARI as resource to collect the sense representations instead of WordNet.\nS13 consists of 13 documents in different domains, available in 5 languages (we used only English). All the nouns in these texts are annotated using BabelNet, with a total number of 1931 words to be disambiguated (English dataset). KORE50 consists of 50 short English sentences with a total number of 146 mentions manually annotated using YAGO2 (Hoffart et al. 2013). We used the mapping between YAGO2 and Wikipedia to obtain for each mention the corresponding BabelNet concept, since there exists a mapping between Wikipedia and BabelNet. This dataset contains highly ambiguous mentions, which are difficult to capture without the use of a large and well organized knowledge base. In fact, the mentions are not explicit and require the use of common knowledge to identify their intended meaning.\nWe used the SPARQL endpoint15 provided by BabelNet to collect the sense inventories of the words in the texts of each dataset. For this task we filtered the first 100 resources whose label contains the lexicalization of to word to be disambiguated. This operation can increase the dimensionality of the strategy space, but it is required because especially in KORE50 there are many indirect references, such as Tiger to refer to Tiger Woods (the famous golf player) or Jones to refer to John Paul Jones (the Led Zeppelin bassist).\nComparison to State-of-the-Art Algorithms. The results of these experiments are shown in Table 6, where it is possible to see that the performances of our system are close to the results obtained with Babelfy on S13 and substantially higher on KORE50. This is because with our approach it is necessary to respect the textual coherence, which is required when a sentence contains a high level of ambiguity, such as those proposed by KORE50. To the contrary, PPRw2w performs poorly on this dataset. This because, as\n15 http://babelnet.org/sparql/\nattested in (Moro, Raganato, and Navigli 2014), it disambiguates the words independently, without imposing any consistency requirements.\nThe good performances of our approach are also due to the good semantic representations provided by NASARI, in fact, it is able to exploit a richer source of information, Wikipedia, which provides a larger coverage and a wider source of information than WordNet alone.\nThe results on KORE50 are presented as accuracy, following the custom of previous work on this dataset. As we have anticipated it contains decontextualized sentences, which require common knowledge to be disambiguated. This common knowledge is obtained exploiting the relations in BabelNet that connect related entities but in many cases this is not enough because the references to entities are too general and in this case the system is not able to provide an answer. It is also difficult to exploit distributional information on this dataset, since the sentences are short and in many cases cryptic. For these reasons the recall on this dataset is well below the precision: 55.5%. The system does not provide answers for the entities in sentences such as: Jobs and Baez dated in the late 1970s, and she performed at his Stanford memorial, but it is able to disambiguate correctly the same entities in sentences where there is more contextual information."}, {"heading": "7. Conclusions", "text": "In this article we have introduced a new method for WSD based on game theory. We have provided an extensive introduction on the WSD task and explained the motivations behind the choice to model the WSD problem as a constraint satisfaction problem. We conducted an extensive series of experiments to find out the similarity measures that perform better in our framework. We have also evaluated our system with two different implementations and compared our results with state-of-the-art systems, on different WSD tasks.\nOur method can be considered as a continuation of knowledge based, graph based and similarity based approaches. We used the methodologies of these three approaches combined in a game theoretic framework. This model is used to perform a consistent labeling of senses. In our model we try to maximize the textual coherence imposing that the meaning of each word in a text must be related to the meaning of the other words in the text. To do this we exploited distributional and proximity information to weight the influence that each word has on the others. We exploited also semantic similarity information to weight the strengths of compatibility among two senses. This is of great importance because it imposes constraints on the labeling process, developing a contextual coherence on the assignment of senses. The application of a game theoretic framework guarantees that these assumptions are met. Furthermore, the use of the replicator dynamics equation allows to always find the best labeling assignment.\nOur system in addition to have a solid mathematical and linguistic foundation, has demonstrated to perform well compared with state-of-the-art systems and to be extremely flexible. In fact, it is possible to implement new similarity measures, graph constructions and strategy space initializations to test it in different scenarios. It is also possible to use it as completely unsupervised or to use information from sense-labeled corpora.\nThe features that make our system competitive, compared with state-of-the-art systems, are that instead of finding the most important sense in a network to be associated to the meaning of a single word, our system disambiguates all the words at the same time taking into account the influence that each word has on the others and imposes to respect the sense compatibility among each sense before to assign a meaning. We have\ndemonstrated how our system can deal with sense shifts, where a centrality algorithm, which tries to find the most important sense in a network can be deceived by the context. In our case, the weighting of the context ensures to respect the proximity structure of a sentence and to disambiguate each word according to the context in which it appears. This is because the meaning of a word in a sentence does not depend on all the words contained in the sentence but only on those that share a proximity (or syntactical) relation and those with which enjoy a high distributional similarity."}, {"heading": "Acknowledgments", "text": "This work was supported by Samsung Global Research Outreach Program. We are deeply grateful to Rodolfo Delmonte for his insights on the preliminary phase of this work and to Bernadette Sharp for her help during the final part of it. We would also like to thanks Phil Edmonds for providing us the correct version of the Senseval 2 dataset."}], "references": [], "referenceMentions": [], "year": 2017, "abstractText": "This paper presents a new model for word sense disambiguation formulated in terms of evolutionary game theory, where each word to be disambiguated is represented as a node on a graph whose edges represent word relations and senses are represented as classes. The words simultaneously update their class membership preferences according to the senses that neighboring words are likely to choose. We use distributional information to weigh the influence that each word has on the decisions of the others and semantic similarity information to measure the strength of compatibility among the choices. With this information we can formulate the word sense disambiguation problem as a constraint satisfaction problem and solve it using tools derived from game theory, maintaining the textual coherence. The model is based on two ideas: similar words should be assigned to similar classes and the meaning of a word does not depend on all the words in a text but just on some of them. The paper provides an in-depth motivation of the idea of modeling the word sense disambiguation problem in terms of game theory, which is illustrated by an example. The conclusion presents an extensive analysis on the combination of similarity measures to use in the framework and a comparison with state-of-the-art systems. The results show that our model outperforms state-of-the-art algorithms and can be applied to different tasks and in different scenarios.", "creator": "LaTeX with hyperref package"}}}