{"id": "1610.01733", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Oct-2016", "title": "Towards Cognitive Exploration through Deep Reinforcement Learning for Mobile Robots", "abstract": "exploration in an unknown environment is definitely the core functionality for mobile robots. learning - based exploration methods, including convolutional neural networks, provide excellent strategies without human - designed logic for the feature processing extraction. but perhaps the fewer conventional supervised system learning algorithms cost lots of efforts on the labeling work of datasets working inevitably. scenes not included in the training set are mostly unrecognized either. however we propose a deep reinforcement learning method for the exploration of mobile robots in an indoor environment with the depth observation information from an rgb - d sensor design only. based on presenting the deep q - network framework, the raw depth image index is taken as perhaps the only input data to exactly estimate the q values corresponding to all moving dog commands. the training function of the network weights is strictly end - best to - end. in arbitrarily constructed simulation environments, we show that the robot can be quickly adapted appropriately to unfamiliar scenes without any man - made labeling. additionally besides, through analysis of receptive fields of feature representations, deep reinforcement learning motivates the convolutional networks to precisely estimate the traversability of the scenes. the test results only are compared with the robotics exploration strategies set separately based on deep learning or reinforcement learning. even trained only in the simulated environment, experimental results in real - world environment demonstrate repeatedly that the cognitive ability of robot this controller is dramatically improved compared with the supervised method. we believe indeed it is the first time that these raw sensor information is used to build cognitive exploration strategy for small mobile robots through end - to - end deep reinforcement learning.", "histories": [["v1", "Thu, 6 Oct 2016 05:08:21 GMT  (2212kb,D)", "http://arxiv.org/abs/1610.01733v1", null]], "reviews": [], "SUBJECTS": "cs.RO cs.AI", "authors": ["lei tai", "ming liu"], "accepted": false, "id": "1610.01733"}, "pdf": {"name": "1610.01733.pdf", "metadata": {"source": "CRF", "title": "Towards cognitive exploration through deep reinforcement learning for mobile robots", "authors": ["Lei Tai", "Ming Liu"], "emails": ["lei.tai@my.cityu.edu.hk", "eelium@ust.hk"], "sections": [{"heading": null, "text": "I. INTRODUCTION"}, {"heading": "A. Motivation", "text": "Exploration in an unknown environment is fundamental for mobile robots for tasks like cleaning, mining, and rescue, etc. By this work, we deal with a classic task for a mobile robot equipped with a depth sensor: attempt to explore as much area as possible in an unknown environment while avoiding collisions with obstacles. Conventional exploration methods require heuristic control logic such as the front-wave exploration [4] and additional processes to deal with obstacles [5]. Aided by stereo vision systems or radar sensors, researchers often build the geometry or topological mapping of environments [6] [7] to make navigation decisions based on a global representation. These methods look at the environment as a geometrical world and decisions are only made with preliminary features without a cognitive process. Specific logic has to be particularly designed for different\n\u2217This work was supported by the Research Grant Council of Hong Kong SAR Government, China, under project No. 16206014 and No. 16212815; National Natural Science Foundation of China No. 6140021318, awarded to Prof. Ming Liu\n1Lei Tai and Ming Liu are with MBE, City University of Hong Kong. lei.tai@my.cityu.edu.hk\n2Ming Liu is with ECE, Hong Kong University of Science and Technology. eelium@ust.hk\nenvironments. It is still a challenge to rapidly adapt to a new environment for mobile robots.\nConvolutional neural networks (CNN), a typical model for deep-learning and cognitive recognition, have taken the stateof-the-art place in computer vision tasks. Successes of this hierarchical model also motivate robotic scientists to apply deep learning algorithms in conventional robotics problems like recognition [8] and obstacle avoidance [1] [9] [10].\nAs the same as most of the supervised learning algorithms, CNN extracts feature representations through training with a huge amount of labeled samples. Nevertheless, unlike typical computer vision tasks, robotics exploration usually happens in dynamical environments with higher probability and uncertainty. The overfitting problem of supervised learning limits the perception ability of hierarchical models for the untrained inputs, and it is unrealistic for mobile robots to collect datasets covering all of the possible conditions. Besides, the time-consuming work of datasets collection and labeling seriously influences the application of CNN-based learning methods. Another commonly recognizable problem is that the robotic research usually considers the mechanism of CNN as a black box. It lacks a proper metric to validate the efficiency of the network and let alone the improvement. We will use the receptive fields to visually show the salient regions that determine the output. It provides the ground for structure selection and performance justification.\nReinforcement learning is such an efficient way to learn control policies without referencing the ground-truth. Through combining reinforcement learning and hierarchical sensory processing, deep reinforcement learning (DRL) [2] can learn optimal policies directly from high-dimensional sensory inputs. And it outperformed all of the previous artificial control algorithms in Atari games [11].\nIn our previous work, we have proved the feasibility of the CNN-based supervised learning method for obstacle avoidance in the indoor environment [1] and the effectiveness of the conventional reinforcement learning method in the exploration policy estimation [3] through the feature representations extracted from the pre-trained CNN model in [1]. In this paper, we propose an end-to-end deep reinforcement learning method towards cognitive exploration in an unfamiliar environment by taking depth image as the input and control commands as the output. Not like conventional learning methods, the training of deep reinforcement learning is a cognitive process. The optimization of this exploration policy is incremental with the training going for mobile robots.\nar X\niv :1\n61 0.\n01 73\n3v 1\n[ cs\n.R O\n] 6\nO ct\n2 01\n6"}, {"heading": "B. Contributions", "text": "We stress the following contributions and features of this work: \u2022 By deep reinforcement learning, we show the developed\nexploration capability of a mobile robot in unknown environments. We initialize the weights from the previous CNN model trained with real-world sensory samples and continually train it in an end-to-end manner. The performance is evaluated in both simulated and realworld environments. \u2022 The deep reinforcement learning model can quickly achieve obstacle avoidance ability in an indoor environment with several thousands of training iterations, without additional man-made collection or labeling work for datasets. \u2022 For evaluations of CNN, we use receptive fields in origin inputs to reason the feasibility of the trained model. The receptive fields activated by the final feature representations are presented through bilinear upsampling. The activation characters prove the cognitive ability improvement of hierarchical convolutional structures for traversability estimation."}, {"heading": "II. RELATED WORK", "text": "Conventional robot exploration strategies mainly depended on complicated control logics, with hand-crafted features extracted from environments [12]. Benefiting from the development of large-scale computing hardware like GPU, deep learning related methods have been considered to address robotics related problems including robot exploration."}, {"heading": "A. Deep learning in robotics exploration", "text": "Convolutional neural networks (CNNs) have been applied to recognize off-road obstacles [10] by taking stereo images as input. It also helped aerial robotics to navigate along forest trails with a single monocular camera [9]. In our previous work, a three-layer convolutional framework [1] was used to perceive an indoor corridor environment for mobile robots. By taking raw images or depth images as inputs, and taking the moving commands or steering angles as outputs, weights of CNN-based models can be trained through back-propagation and stochastic gradient descent. Except for robotics exploration, grasping locations can be regarded as an object detection problem [13] and CNN is the state-of-the-art solution for this problem.\nNotice that all of these supervised learning methods mentioned above require a large amount of efforts on collecting and labeling of datasets. Kim et al. [14] achieved the labeling result by using other sensors with higher resolution. Tao et al. [15] labeled the center sample of the clustering result for object classification as a semi-supervised method. Considering the requirement for auxiliary judgments, unsupervised learning methods didn\u2019t eliminate the labeling work essentially.\nThe huge potential of deep learning in raw image processing has shown great probability to solve visual-based robot control problems. However, even though CNN related\nmethods accomplished lots of breakthroughs and challenging benchmarks for vision perception tasks like object detection and image recognition, applications in robotics control are still less prevalent."}, {"heading": "B. Reinforcement learning in robotics", "text": "Reinforcement learning is a useful way for robotics to learn control policies. The main advantage of reinforcement learning is the completed independence from humanlabeling. Motivated by the trial-and-error interaction with the environment, the estimation of the action-value function is self-driven by taking the robot states as the input of the model. Conventional reinforcement learning methods improved the controller performances in path-planning of robot-arms [16] and controlling of helicopters [17].\nThrough regarding RGB or RGB-D images as the states of robots, reinforcement learning can be directly used to achieve visual control policies. In our previous work [3], a Q-learning based reinforcement learning controller was used to help a turtlebot navigate in the simulation environment."}, {"heading": "C. Deep reinforcement learning", "text": "Due to the potential of automating the design of data representations, deep reinforcement learning abstracted considerable attentions recently [18]. Deep reinforcement learning was firstly applied on playing 2600 Atari games [2]. The typical model-free Q-learning method was combined with convolutional feature extraction structures as Deep Qnetwork (DQN). The learned policies beat human players and previous algorithms in most of Atari games. Based on the success of DQN [2], revised deep reinforcement learning methods appeared to improve the performance on various of applications. Not like DQN taking three continues images as input, DRQN [19] replaced several normal convolutional layers with recurrent neural networks (RNN) and long short term memory (LSTM) layers. Taking only one frame as the input, the trained model performed as well as DQN in Atari games. Dueling network [20] separated the Q-value estimator to two independent network structures, one for the state value function and one for the advantage function. Now, it is the state-of-art method on the Atari 2600 domain.\nFor robotics control, deep reinforcement learning also accomplished various simulated robotics control tasks [21]. In the continues control domain [22], the same model-free algorithm robustly solved more than 20 simulated physics tasks. Control policies are learned directly from raw pixel inputs. Considering the complexity of control problems, model-based reinforcement learning algorithm was proved to be able to accelerate the learning procedure [21] so that the deep reinforcement learning framework could handle more challenging problems.\nNo matter Atari games or the control tasks mentioned above, deep reinforcement learning has been keeping showing the advantage in simulated environments. However, it is rarely used to address robotics problems in real world environment. As in [23], the motion control of a Baxter robot motivated by deep reinforcement learning could make sense\nonly with simulated semantic images but not raw images taken by real cameras. Thus, we consider the feasibility of deep reinforcement learning in real world tasks to be the primary contribution of our work.\nIII. IMPLEMENTATION OF DEEP REINFORCEMENT LEARNING\nOne of the main limitations of applying deep reinforcement learning in real world environment is that the repeated actor-critic learning procedure of reinforcement learning is quite difficult to be implemented in the actual world. As in Atari games, the controller must repeat the games thousands of times after each attempt episode. But in a real physical world, it is unrealistic for robotics to repeat the same task with the same beginning state again and again. In this paper, we implement the same model-free deep reinforcement learning framework like DQN [2] in the simulation environment as well. To help the convergence, the weights of convolutional neural networks are initialized from a supervised learning model with data collected from the actual environments. In the end-to-end training procedure, we set a small learning rate for the gradient descent of data representation structure compared with the learning rate used in the training of the supervised learning model [1]. Finally, the learned model can both keep the navigation ability in the origin world and build the adaptation for an unknown world."}, {"heading": "A. Simulated environment", "text": "In our previous work [1], the training datasets were collected in structured corridor environments. Depth images in these datasets were labeled with real-time moving commands from human decisions. In this work, to extend the exploration ability of the mobile robot, we set up a more complicated indoor environment as shown in Fig. 1 in the Gazebo1 simulator. Besides the corridor-like traversable areas, there are much more complicated scenes like cylinders, sharp edges and multiple obstacles with different perceptive depths. These newly created scenes have never been used in the training of our previous supervised learning model [1].\nWe use a turtlebot as the main agent in the simulated environment. A kinect RGBD camera is mounted on top\n1http://gazebosim.org/\nof the robot. We can receive the real-time RGB-D raw image from the field of view (FOV) of the robot. All of the requested information and communications between agents are achieved through ROS 2 interfaces."}, {"heading": "B. Deep reinforcement learning implementation", "text": "As a standard reinforcement learning structure, we set the environment mentioned in Section III-A as e. At each discrete time step, the agent selects an action at from the defined action set. In this paper, the action set consists of five moving commands, namely left, half-left, straight, halfright and right. Detailed assignments of speeds related to the moving commands are introduced in Section IV. The only perception by the robot is the depth image xt taken from the kinect camera after every execution of the action. Unlike that the reward rt in Atari games is the change of the game\u2019s score, the only feedback used as the reward is a binary state, indicating whether the collision occurs or not. It is decided by checking the minimum distance lt through the depth image taken by the kinect camera. Once the collision occurs, we set a negative reward tter to represent the termination. Conversely, we grant a positive reward tmove to encourage the collision-free movement.\nThe exploration sequences st in the simulated environment is regarded as a Markov Decision Process (MDP). It is an alternate combination of moving commands and depthimage states where st = {x1, a1, x2, a2, . . . , at\u22121, xt}. The sequence terminates once the collision happens. As the assumption of MDP, xt+1 is completely decided by (xt, at) without any references with the former states or actions in st. The sum of the future rewards until the termination is Rt. With a discounted factor \u03b3 for future rewards, the sum of future estimated rewards is Rt = \u2211T t\u2032=t \u03b3\nt\u2032\u2212trt\u2032 , where T means the termination time-step. The target of reinforcement learning is to find the optimal strategy \u03c0 for the action decision through maximizing the action-value function Q\u2217(x, a) = max\u03c0E[Rt|xt = x, at = a, \u03c0]. The essential assumption in DQN [2] is the Bellman equation, which\n2http://www.ros.org\ntransfers the target to maximize the value of r+\u03b3Q\u2217(x\u2032, a\u2032) as\nQ\u2217(x, a) = Ex\u2032\u223ce[r + \u03b3max a\u2032 Q\u2217(x\u2032, a\u2032)|x, a]\nHere x\u2032 is the state after acting action a in state x. DQN estimated the action-value equation by convolutional neural networks with weights \u03b8, so that Q(s, a, \u03b8) \u2248 Q\u2217(s, a).\nAlgorithm 1 Deep reinforcement learning algorithm 1: Initialize the weights of evaluation networks as \u03b8\u2212\nInitialize the memory D to store experience replay Set the collision distance threshold ls\n2: for episode = 1,M do 3: Randomly set the turtlebot to a start position Get the minimum intensity of depth image as lt 4: while lt > ls do 5: Capture the depth image xt 6: With probability \u03b5 select a random action at\nOtherwise select at = argmaxaQ(xt, a; \u03b8 \u2212)\n7: Move with the selected moving command at Update lt with new depth information 8: if lt < ls then 9: rt = rter\nxt+1 = Null 10: else 11: rt = rmove Capture the new depth image xt+1 12: end if 13: Store the transition (xt, at, rt, xt+1) in D\nSelect a batch of transitions (xk, ak, rk, xk+1) randomly from D\n14: if rk = rter then 15: yk = rk 16: else 17: yk = rk + \u03b3maxa\u2032 Q(xk+1, a\n\u2032; \u03b8\u2212) 18: end if\nUpdate \u03b8 through a gradient descent procedure on the batch of (yk \u2212Q(\u03c6k, ak; \u03b8\u2212))2\n19: end while 20: end for\nIn this paper, we use three convolutional layers for feature extractions of the depth image and use additional three fully-connected layers for exploration policy learning. The structure is depicted as red and green cubes shown in Fig. 2. To increase the non-linearity for better data fitting, each Conv or Fully-connected layer is followed by a Rectified Linear Unit (ReLU) activation function layer. The number under each Conv+ReLU or FullyConnected+ReLU cube is the number of channels of the output data related to this cube. The network takes a single depth raw image as the input. The five channels of the final fully-connected layer fc3 are the values of the five moving commands. Besides, to avoid the overfitting in the training procedure, both of the first two fully-connected layers fc1 and fc2 are followed with a dropout layer. Note that dropout layers are eliminated in test procedure [24].\nAlgorithm 1 shows the workflow of our revised deep reinforcement learning process. Similar as [2], we use the memory replay method and the \u03b5-greedy training strategy to control the dynamic distribution of training samples. After the initialization of the weights for convolutional networks shown in Fig. 2, set a distance threshold ls to check if the turtlebot collides with any obstacles. At the beginning of every repeated exploration loop, the turtlebot is randomly set to a start point among the 12 pre-defined start points shown in Fig. 1. That extends the randomization of the turtlebot locations from the whole simulation world and keeps the diversity of the data distribution saved in memory replay for training.\nFor the update of weights \u03b8, yk is the target for the evaluation network to output. It is calculated by summing the instant reward and the future expectation estimated by the networks with the former weights as mentioned before in the Bellman equation. If the sampled transition is a collision sample, the evaluation for this (xk, ak) pair is directly set as the termination reward rter. Setting the training batch size to be n, the loss function is\nL(\u03b8i) = 1\nn n\u2211 k [(yk \u2212Q(xk, ak; \u03b8i))2]\nAfter the estimation of Q(xk, ak) and maxa\u2032 Q(xk+1, a\u2032) with the former \u03b8\u2212, the weights \u03b8 of the network will be updated through back-propagation and stochastic gradient descent."}, {"heading": "IV. EXPERIMENTS AND RESULTS", "text": ""}, {"heading": "A. Training", "text": "At the beginning of the training, Convolutional layers are initialized by copying the weights trained in [1] for the same layer structure. A simple policy learning networks structure was also separately proved in [3] with three moving commands as output.\nCompared with the step-decreasing learning rate in the training of the supervised learning model [1], here we use a much smaller fixed learning rate in the end-to-end training for the deep reinforcement learning model. As the only feedback to motivate the network convergence, the negative reward for the collision between the robot and obstacles must be very large as in [3]. The training parameters are shown in Table I in detail. All models are trained and tested with Caffe [25] on a single NVIDIA GeForce GTX 690.\nTable II lists the assignments of speeds for the five output moving commands both in training and testing procedures. All of the training or testing commands have the same line velocity. The various moving directions are declared with different angular velocities. The speeds for training procedure are a little larger than the speeds for testing. With a higher training speed, the robot is motivated to collide aggressively and there would be more samples with negative rewards in the replay memory. In the testing procedure, a small speed can keep the robot to make decisions more frequently.\nFig. 3 presents the loss reduction along training iterations. At each iteration step, a batch including 32 depth images is randomly chosen from the replay memory. Not like the training of conventional supervised learning methods, the loss of deep reinforcement learning may not converge to zero. It depends on the declaration of the negative reward extremely. Among the estimation Q-values for state-action pairs, the maximal represents the optimal action. The value\nitself can limited present the sum of the future gains [2]. Seen in the figure, the loss converges after 4000 iterations. Test results of several trained models after 4000 iterations are compared in Section IV-B."}, {"heading": "B. Analysis of exploration tests", "text": "We firstly look at the obstacle avoidance capability of the trained model. The trained deep reinforcement learning (DRL) models after 500, 4000, 7500, and 40000 iterations are chosen to test in the simulated environment. The trained supervised learning (SL) model from [1] and the reinforcement learning (RL) model from [3] are compared directly without any revising for the model structure or tuning for the weights. In all the 12 start points shown in Fig. 1, every model starts 10 exploration episodes with the test speeds listed in Table II for five moving commands. Besides, every test episode will stop automatically after 200 moving steps, so that the robot will not explore freely forever. With the same CNN structure for all trained models, the forward prediction takes 48(\u00b15)ms for each raw depth input. After the forward calculation for the real-time depth image received, the robot chooses the moving command with the highest evaluation. The average counts of moving steps for each start point are listed in Table III. The more of the moving steps, the longer time the robot has been freely moving in the simulated environment without collisions.\nMoving trajectory points of each model starting from all 12 positions are recorded. Fig. 4 depicts the trajectory after normalizing the counts of trajectory points to [0, 1] in each map grid of the training environment. The trained model may choose the left or right command to rotate in place so that there would not be any collisions happening, like the circles in the left-bottom corner of Fig. 4(b) and the middle of Fig. 4(c). The very large moving count number of RL model in column 2 presented in Table III corresponds to this trajectory circle in Fig. 4(b). To avoid the appearance of this local minimal, the distances between the start and the end point are recorded as an additional evaluation metric. Notice that, after a long time exploration, the robot may move back to the area near the start point. So the distance may not be equal to the exploration ability of the trained model perfectly.\nFrom these heat maps, the supervised learning model cannot be adapted to the simulated environment especially\nin the scenes with multiple obstacles at different depths. The reinforcement learning model is the worst of the results. In the training of RL model [3], only the weights of the fully-connected network for policy iterations were updated iteratively. DRL model shows significant improvement compared with RL model because the training of DRL model is end-to-end. Thus, not only the policy network (fc layers in Fig. 2), but also the CNN model for feature representations is developed for complicated scenes.\nSeen in Fig. 4(c-f), the training for the exploration ability of DRL model is an online-learning process. In the 500- iteration case, the robot always chooses the same moving direction for any scenes. After 4000 iterations, it can be adapted to parts of the environment. In the 7500-iteration case, the robot can almost move freely in this whole simulated word. Furthermore, the robot usually chooses the optimal moving direction after 40000 iterations like the more efficient trajectories in Fig. 4(f). Not like the fixed training datasets of RL model, newly collected training samples of DRL model are saved to replay memory increasingly. The evaluations of training scenes are calculated by the current model which is updated with the increasing of training iterations. Thus, the robot exploration ability will be increased over time.\nComprehensively, the 40000-iteration case can almost explore in the trained environment completely. Considering the very long time training (12 hours) for 40000 iterations, we choose the model after 7500 iterations to analyze further. The training time for 7500 iterations is 2.5 hours. It confirms that the mobile robot can be adapted to an unfamiliar environment by transferring the weights of the pre-trained SL model to the DRL framework with a very short-time and end-to-end DRL training."}, {"heading": "C. Analysis of receptive fields in the cognitive process", "text": "Convolutional neural networks are usually considered to be black-box models. The internal activation mechanism of\nCNN is rarely analyzed. In [26], the strongest activation areas of the feature representations are presented by backtracking the receptive field in the source input. We propose a backtracking method by multiplying the last layer of feature representations (pool3 in Fig. 2) with a single channel convolutional filter. The dimension of pool3 is 64\u00d7 20\u00d7 15 in this paper. Multiply it with a convolutional kernel sizing 1\u00d7 15\u00d7 15, which is fixed with bilinear weights as the one used for upsampling of semantic segmentation in [27]. After that, a 120 \u00d7 160 matrix is reproduced as the same size as the input image.\nWe focus on the strongest activation area of the receptive matrix. Fig. 5(a) shows the highest 10% values of this matrix marked on the related raw depth images in five specific simulated training samples. The receptive fields of 7500- iteration DRL model are compared with the ones extracted\nfrom the SL model [1]. As mentioned above, these two models consist of the same convolutional structures. We choose five specific samples located in the fallible area based on the trajectory heat map of SL model shown in Fig. 4(a). Before transported to Softmax layer, feature representations of supervised learning model were firstly transformed to five values related to the five commands in [1]. These values are listed with the action-evaluations estimated by the 7500- iteration DRL model in Table IV. For both of the models, the highest value responds to the optimal moving command.\nNotice that the area beyond the detection range of the kinect camera is labeled as zero in the raw depth images. From Fig. 5(a) and Table IV, for the SL model, the moving command towards the deepest area in range receives the highest output value naturally. It obviously motivates the convolutional model to activate the further area of the scenes, especially the junction part with the white untracked fields. In S1, the furthest reflection can help the robot avoid the close obstacles. But when there are multiple level obstacles like in S2 and S3, simply choosing the furthest part as the moving direction leads to collisions with nearby obstacles. Except for the furthest part, the DRL model also perceives the width of the route both in the nearby area and the\nfurthest area as the several horizontal cognitive stripes in the figure. That means the end-to-end deep reinforcement learning dramatically tunes the initial CNN weights from the SL mode. As the evaluations listed in Table IV, the DRL model not only helps the robot avoid the instant obstacles, but also improves the traversable detection ability like in S4 and S5. When the route in S4 is not wide enough to pass through, the DRL model chooses the fully turning moving command. However, the SL model always chooses the furthest part.\nTo prove the robustness of the trained model, five samples collected from real world environment by a kinect camera mounted on a real turtlebot are also tested as shown in Fig. 5(b). The related command evaluations for SL model and the DRL model as mentioned above are listed in Table IV as well. Notice that, these real world scenes are not included in the training datasets for the SL model [1] either. The receptive fields of the SL model are still mainly focusing on the furthest area. Output values in Table IV present the limited exploration ability of the SL model for theses untrained samples. For the DRL model, even though only trained in the simulated environment, it keeps showing the ability to track the width of the route for real world samples. In R1 and R2, the trained DRL model successfully detects the\ntraversable direction. In R3, it avoids the narrow space which is not enough to pass. In R4, it chooses the optimal moving direction to fully turn left. However, in R5, when suffering irregular nearby obstacles which are not implemented in the training environment, it keeps tracking the width of the furthest area and failed to avoid this irregular obstacle.\nAnother fact for real world tests is that the estimation of the action-value can reflect the future expectation to some extends. Estimation values of R3 and R4 listed in Table. IV for all moving commands are obviously less than values of other scenes. It corresponds to the higher probability of collision when there are nearby obstacles."}, {"heading": "V. CONCLUSION", "text": "In this paper, the utility of the deep reinforcement learning framework for robot exploration is proved under end-toend training. The framework comprises two parts, convolutional neural networks for feature representations and fullyconnected networks for decision making. We initialized the weights of convolutional networks by a previously trained model based on our previous work [1]. The deep reinforcement learning model extends the cognitive ability of mobile robots for more complicated indoor environments in an efficient online-learning process continuously. Analysis of receptive fields indicates the crucial promotion of end-toend deep reinforcement learning: feature representations extracted by convolutional networks are motivated substantially for the traversability of the mobile robots both in simulated and real environments.\nThere are many aspects to be developed in the future like building a more complicated unstructured environment. To navigate in more complicated even outdoor environments, the continues raw RGB images should also be considered as inputs like in [2] but not single depth image. The state-of-theart CNN structures for RGB images like VGG and ResNet can substitute the CNN framework in our deep reinforcement learning model. The semantic extraction ability of CNN for RGB images has been fully proved [27]. That may be very helpful for not only exploration but also the mapping capability of mobile robots. The revised deep reinforcement learning algorithms for continued control [22] should also be considered to improve the learning efficiency."}], "references": [{"title": "A Deep-network Solution Towords Modelless Obstacle Avoidence", "author": ["L. Tai", "S. Li", "M. Liu"], "venue": "IEEE/RSJ International Conference on Intelligent Robots and Systems, IROS 2016, 2016.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2016}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "A.K. Fidjeland", "G. Ostrovski"], "venue": "Nature, vol. 518, no. 7540, pp. 529\u2013533, 2015.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "A robot exploration strategy based on q-learning network", "author": ["L. Tai", "M. Liu"], "venue": "Real-time Computing and Robotics (RCAR) 2016 IEEE International Conference on, Angkor Wat, Cambodia, June 2016.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2016}, {"title": "Integrating behavioral, perceptual, and world knowledge in reactive navigation", "author": ["R.C. Arkin"], "venue": "Robotics and autonomous systems, vol. 6, no. 1, pp. 105\u2013122, 1990.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1990}, {"title": "The vector field histogram-fast obstacle avoidance for mobile robots", "author": ["J. Borenstein", "Y. Koren"], "venue": "IEEE Transactions on Robotics and Automation, vol. 7, no. 3, pp. 278\u2013288, 1991.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1991}, {"title": "Incremental topological segmentation for semi-structured environments using discretized gvg", "author": ["M. Liu", "F. Colas", "L. Oth", "R. Siegwart"], "venue": "Autonomous Robots, vol. 38, no. 2, pp. 143\u2013160, 2015.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "A markov semisupervised clustering approach and its application in topological map extraction", "author": ["M. Liu", "F. Colas", "F. Pomerleau", "R. Siegwart"], "venue": "2012 IEEE/RSJ International Conference on Intelligent Robots and Systems. IEEE, 2012, pp. 4743\u20134748.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2012}, {"title": "Convolutional neural network-based image representation for visual loop closure detection", "author": ["Y. Hou", "H. Zhang", "S. Zhou"], "venue": "Information and Automation, 2015 IEEE International Conference on. IEEE, 2015, pp. 2238\u20132245.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "A machine learning approach to visual perception of forest trails for mobile robots", "author": ["A. Giusti", "J. Guzzi", "D.C. Cire\u015fan", "F.-L. He", "J.P. Rodr\u0131\u0301guez", "F. Fontana", "M. Faessler", "C. Forster", "J. Schmidhuber", "G. Di Caro"], "venue": "IEEE Robotics and Automation Letters, vol. 1, no. 2, pp. 661\u2013667, 2016.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2016}, {"title": "Offroad obstacle avoidance through end-to-end learning", "author": ["U. Muller", "J. Ben", "E. Cosatto", "B. Flepp", "Y.L. Cun"], "venue": "Advances in neural information processing systems, 2005, pp. 739\u2013746.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2005}, {"title": "Playing atari with deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A. Graves", "I. Antonoglou", "D. Wierstra", "M. Riedmiller"], "venue": "arXiv preprint arXiv:1312.5602, 2013.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2013}, {"title": "A robot exploration and mapping strategy based on a semantic hierarchy of spatial representations", "author": ["B. Kuipers", "Y.-T. Byun"], "venue": "Robotics and autonomous systems, vol. 8, no. 1, pp. 47\u201363, 1991.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1991}, {"title": "Deep learning for detecting robotic grasps", "author": ["I. Lenz", "H. Lee", "A. Saxena"], "venue": "The International Journal of Robotics Research, vol. 34, no. 4-5, pp. 705\u2013724, 2015.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2015}, {"title": "Traversability classification using unsupervised on-line visual learning for outdoor robot navigation", "author": ["D. Kim", "J. Sun", "S.M. Oh", "J.M. Rehg", "A.F. Bobick"], "venue": "Proceedings 2006 IEEE International Conference on Robotics and Automation, 2006. ICRA 2006. IEEE, 2006, pp. 518\u2013525.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2006}, {"title": "Semi-supervised online learning for efficient classification of objects in 3d data streams", "author": ["Y. Tao", "R. Triebel", "D. Cremers"], "venue": "Intelligent Robots and Systems (IROS), 2015 IEEE/RSJ International Conference on. IEEE, 2015, pp. 2904\u20132910.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2015}, {"title": "Modelbased reinforcement learning with parametrized physical models and optimism-driven exploration", "author": ["C. Xie", "S. Patil", "T. Moldovan", "S. Levine", "P. Abbeel"], "venue": "arXiv preprint arXiv:1509.06824, 2015.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2015}, {"title": "Autonomous inverted helicopter flight via reinforcement learning", "author": ["A.Y. Ng", "A. Coates", "M. Diel", "V. Ganapathi", "J. Schulte", "B. Tse", "E. Berger", "E. Liang"], "venue": "Experimental Robotics IX. Springer, 2006, pp. 363\u2013372.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2006}, {"title": "Benchmarking deep reinforcement learning for continuous control", "author": ["Y. Duan", "X. Chen", "R. Houthooft", "J. Schulman", "P. Abbeel"], "venue": "arXiv preprint arXiv:1604.06778, 2016.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2016}, {"title": "Deep recurrent q-learning for partially observable mdps", "author": ["M. Hausknecht", "P. Stone"], "venue": "arXiv preprint arXiv:1507.06527, 2015.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2015}, {"title": "Dueling network architectures for deep reinforcement learning", "author": ["Z. Wang", "N. de Freitas", "M. Lanctot"], "venue": "arXiv preprint arXiv:1511.06581, 2015.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2015}, {"title": "Continuous control with deep reinforcement learning", "author": ["T.P. Lillicrap", "J.J. Hunt", "A. Pritzel", "N. Heess", "T. Erez", "Y. Tassa", "D. Silver", "D. Wierstra"], "venue": "arXiv preprint arXiv:1509.02971, 2015.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2015}, {"title": "Continuous deep q-learning with model-based acceleration", "author": ["S. Gu", "T. Lillicrap", "I. Sutskever", "S. Levine"], "venue": "arXiv preprint arXiv:1603.00748, 2016.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2016}, {"title": "Towards vision-based deep reinforcement learning for robotic motion control", "author": ["F. Zhang", "J. Leitner", "M. Milford", "B. Upcroft", "P. Corke"], "venue": "arXiv preprint arXiv:1511.03791, 2015.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2015}, {"title": "Dropout: a simple way to prevent neural networks from overfitting.", "author": ["N. Srivastava", "G.E. Hinton", "A. Krizhevsky", "I. Sutskever", "R. Salakhutdinov"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2014}, {"title": "Caffe: Convolutional architecture for fast feature embedding", "author": ["Y. Jia", "E. Shelhamer", "J. Donahue", "S. Karayev", "J. Long", "R. Girshick", "S. Guadarrama", "T. Darrell"], "venue": "Proceedings of the 22nd ACM international conference on Multimedia. ACM, 2014, pp. 675\u2013678.", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2014}, {"title": "Visualizing and understanding convolutional networks", "author": ["M.D. Zeiler", "R. Fergus"], "venue": "European Conference on Computer Vision. Springer, 2014, pp. 818\u2013833.", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2014}, {"title": "Fully convolutional networks for semantic segmentation", "author": ["J. Long", "E. Shelhamer", "T. Darrell"], "venue": "Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2015, pp. 3431\u20133440.", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [{"referenceID": 0, "context": "Learning-based exploration methods, including convolutional neural networks, provide excellent strategies without human-designed logic for the feature extraction [1].", "startOffset": 162, "endOffset": 165}, {"referenceID": 1, "context": "Based on the Deep Q-Network framework [2], the raw depth image is taken as the only input to estimate the Q values corresponding to all moving commands.", "startOffset": 38, "endOffset": 41}, {"referenceID": 0, "context": "The test results are compared with the exploration strategies separately based on deep learning [1] or reinforcement learning [3].", "startOffset": 96, "endOffset": 99}, {"referenceID": 2, "context": "The test results are compared with the exploration strategies separately based on deep learning [1] or reinforcement learning [3].", "startOffset": 126, "endOffset": 129}, {"referenceID": 3, "context": "Conventional exploration methods require heuristic control logic such as the front-wave exploration [4] and additional processes to deal with obstacles [5].", "startOffset": 100, "endOffset": 103}, {"referenceID": 4, "context": "Conventional exploration methods require heuristic control logic such as the front-wave exploration [4] and additional processes to deal with obstacles [5].", "startOffset": 152, "endOffset": 155}, {"referenceID": 5, "context": "Aided by stereo vision systems or radar sensors, researchers often build the geometry or topological mapping of environments [6] [7] to make navigation decisions based", "startOffset": 125, "endOffset": 128}, {"referenceID": 6, "context": "Aided by stereo vision systems or radar sensors, researchers often build the geometry or topological mapping of environments [6] [7] to make navigation decisions based", "startOffset": 129, "endOffset": 132}, {"referenceID": 7, "context": "Successes of this hierarchical model also motivate robotic scientists to apply deep learning algorithms in conventional robotics problems like recognition [8] and obstacle avoidance [1] [9] [10].", "startOffset": 155, "endOffset": 158}, {"referenceID": 0, "context": "Successes of this hierarchical model also motivate robotic scientists to apply deep learning algorithms in conventional robotics problems like recognition [8] and obstacle avoidance [1] [9] [10].", "startOffset": 182, "endOffset": 185}, {"referenceID": 8, "context": "Successes of this hierarchical model also motivate robotic scientists to apply deep learning algorithms in conventional robotics problems like recognition [8] and obstacle avoidance [1] [9] [10].", "startOffset": 186, "endOffset": 189}, {"referenceID": 9, "context": "Successes of this hierarchical model also motivate robotic scientists to apply deep learning algorithms in conventional robotics problems like recognition [8] and obstacle avoidance [1] [9] [10].", "startOffset": 190, "endOffset": 194}, {"referenceID": 1, "context": "Through combining reinforcement learning and hierarchical sensory processing, deep reinforcement learning (DRL) [2]", "startOffset": 112, "endOffset": 115}, {"referenceID": 10, "context": "And it outperformed all of the previous artificial control algorithms in Atari games [11].", "startOffset": 85, "endOffset": 89}, {"referenceID": 0, "context": "In our previous work, we have proved the feasibility of the CNN-based supervised learning method for obstacle avoidance in the indoor environment [1] and the effectiveness of the conventional reinforcement learning method in the", "startOffset": 146, "endOffset": 149}, {"referenceID": 2, "context": "exploration policy estimation [3] through the feature representations extracted from the pre-trained CNN model in [1].", "startOffset": 30, "endOffset": 33}, {"referenceID": 0, "context": "exploration policy estimation [3] through the feature representations extracted from the pre-trained CNN model in [1].", "startOffset": 114, "endOffset": 117}, {"referenceID": 11, "context": "Conventional robot exploration strategies mainly depended on complicated control logics, with hand-crafted features extracted from environments [12].", "startOffset": 144, "endOffset": 148}, {"referenceID": 9, "context": "Convolutional neural networks (CNNs) have been applied to recognize off-road obstacles [10] by taking stereo images as input.", "startOffset": 87, "endOffset": 91}, {"referenceID": 8, "context": "It also helped aerial robotics to navigate along forest trails with a single monocular camera [9].", "startOffset": 94, "endOffset": 97}, {"referenceID": 0, "context": "In our previous work, a three-layer convolutional framework [1] was used to perceive an indoor corridor environment for mobile robots.", "startOffset": 60, "endOffset": 63}, {"referenceID": 12, "context": "Except for robotics exploration, grasping locations can be regarded as an object detection problem [13] and CNN is the state-of-the-art solution for this problem.", "startOffset": 99, "endOffset": 103}, {"referenceID": 13, "context": "[14] achieved the labeling result by using other sensors with higher resolution.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[15] labeled the center sample of the clustering result for object classification as a semi-supervised method.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "Conventional reinforcement learning methods improved the controller performances in path-planning of robot-arms [16] and controlling of helicopters [17].", "startOffset": 112, "endOffset": 116}, {"referenceID": 16, "context": "Conventional reinforcement learning methods improved the controller performances in path-planning of robot-arms [16] and controlling of helicopters [17].", "startOffset": 148, "endOffset": 152}, {"referenceID": 2, "context": "In our previous work [3], a Q-learning based reinforcement learning controller was used to help a turtlebot navigate in the simulation environment.", "startOffset": 21, "endOffset": 24}, {"referenceID": 17, "context": "Due to the potential of automating the design of data representations, deep reinforcement learning abstracted considerable attentions recently [18].", "startOffset": 143, "endOffset": 147}, {"referenceID": 1, "context": "Deep reinforcement learning was firstly applied on playing 2600 Atari games [2].", "startOffset": 76, "endOffset": 79}, {"referenceID": 1, "context": "Based on the success of DQN [2], revised deep reinforcement learning methods appeared to improve the performance on various of applications.", "startOffset": 28, "endOffset": 31}, {"referenceID": 18, "context": "Not like DQN taking three continues images as input, DRQN [19] replaced several normal convolutional layers with recurrent neural networks (RNN) and long short term memory (LSTM) layers.", "startOffset": 58, "endOffset": 62}, {"referenceID": 19, "context": "Dueling network [20] separated the Q-value estimator to two independent network structures, one for the state value function and one for the advantage function.", "startOffset": 16, "endOffset": 20}, {"referenceID": 20, "context": "For robotics control, deep reinforcement learning also accomplished various simulated robotics control tasks [21].", "startOffset": 109, "endOffset": 113}, {"referenceID": 21, "context": "In the continues control domain [22], the same model-free algorithm robustly solved more than 20 simulated physics tasks.", "startOffset": 32, "endOffset": 36}, {"referenceID": 20, "context": "Considering the complexity of control problems, model-based reinforcement learning algorithm was proved to be able to accelerate the learning procedure [21] so that the deep reinforcement learning framework could handle more challenging problems.", "startOffset": 152, "endOffset": 156}, {"referenceID": 22, "context": "As in [23], the motion control of a Baxter robot motivated by deep reinforcement learning could make sense", "startOffset": 6, "endOffset": 10}, {"referenceID": 1, "context": "In this paper, we implement the same model-free deep reinforcement learning framework like DQN [2] in the simulation environment as well.", "startOffset": 95, "endOffset": 98}, {"referenceID": 0, "context": "In the end-to-end training procedure, we set a small learning rate for the gradient descent of data representation structure compared with the learning rate used in the training of the supervised learning model [1].", "startOffset": 211, "endOffset": 214}, {"referenceID": 0, "context": "In our previous work [1], the training datasets were collected in structured corridor environments.", "startOffset": 21, "endOffset": 24}, {"referenceID": 0, "context": "These newly created scenes have never been used in the training of our previous supervised learning model [1].", "startOffset": 106, "endOffset": 109}, {"referenceID": 0, "context": "They have been separately proven to be effective in our previous work [1] [3].", "startOffset": 70, "endOffset": 73}, {"referenceID": 2, "context": "They have been separately proven to be effective in our previous work [1] [3].", "startOffset": 74, "endOffset": 77}, {"referenceID": 1, "context": "The essential assumption in DQN [2] is the Bellman equation, which", "startOffset": 32, "endOffset": 35}, {"referenceID": 23, "context": "Note that dropout layers are eliminated in test procedure [24].", "startOffset": 58, "endOffset": 62}, {"referenceID": 1, "context": "Similar as [2], we use the memory replay method and the \u03b5-greedy training strategy to control the dynamic distribution of training samples.", "startOffset": 11, "endOffset": 14}, {"referenceID": 0, "context": "At the beginning of the training, Convolutional layers are initialized by copying the weights trained in [1] for the same layer structure.", "startOffset": 105, "endOffset": 108}, {"referenceID": 2, "context": "A simple policy learning networks structure was also separately proved in [3] with three moving commands as output.", "startOffset": 74, "endOffset": 77}, {"referenceID": 0, "context": "training of the supervised learning model [1], here we use a much smaller fixed learning rate in the end-to-end training for the deep reinforcement learning model.", "startOffset": 42, "endOffset": 45}, {"referenceID": 2, "context": "As the only feedback to motivate the network convergence, the negative reward for the collision between the robot and obstacles must be very large as in [3].", "startOffset": 153, "endOffset": 156}, {"referenceID": 24, "context": "All models are trained and tested with Caffe [25] on a single NVIDIA GeForce GTX 690.", "startOffset": 45, "endOffset": 49}, {"referenceID": 1, "context": "The value itself can limited present the sum of the future gains [2].", "startOffset": 65, "endOffset": 68}, {"referenceID": 0, "context": "The trained supervised learning (SL) model from [1] and the reinforcement learning (RL) model from [3] are compared directly without any revising for the model structure or tuning for the weights.", "startOffset": 48, "endOffset": 51}, {"referenceID": 2, "context": "The trained supervised learning (SL) model from [1] and the reinforcement learning (RL) model from [3] are compared directly without any revising for the model structure or tuning for the weights.", "startOffset": 99, "endOffset": 102}, {"referenceID": 0, "context": "4 depicts the trajectory after normalizing the counts of trajectory points to [0, 1] in each map grid of the training environment.", "startOffset": 78, "endOffset": 84}, {"referenceID": 0, "context": "The counts of points in every map grid is normalized to [0,1].", "startOffset": 56, "endOffset": 61}, {"referenceID": 2, "context": "In the training of RL model [3], only the weights of the fully-connected network for policy iterations were updated iteratively.", "startOffset": 28, "endOffset": 31}, {"referenceID": 25, "context": "In [26], the strongest activation areas of the feature representations are presented by backtracking the receptive field in the source input.", "startOffset": 3, "endOffset": 7}, {"referenceID": 26, "context": "Multiply it with a convolutional kernel sizing 1\u00d7 15\u00d7 15, which is fixed with bilinear weights as the one used for upsampling of semantic segmentation in [27].", "startOffset": 154, "endOffset": 158}, {"referenceID": 0, "context": "from the SL model [1].", "startOffset": 18, "endOffset": 21}, {"referenceID": 0, "context": "Before transported to Softmax layer, feature representations of supervised learning model were firstly transformed to five values related to the five commands in [1].", "startOffset": 162, "endOffset": 165}, {"referenceID": 0, "context": "Notice that, these real world scenes are not included in the training datasets for the SL model [1] either.", "startOffset": 96, "endOffset": 99}, {"referenceID": 0, "context": "We initialized the weights of convolutional networks by a previously trained model based on our previous work [1].", "startOffset": 110, "endOffset": 113}, {"referenceID": 1, "context": "To navigate in more complicated even outdoor environments, the continues raw RGB images should also be considered as inputs like in [2] but not single depth image.", "startOffset": 132, "endOffset": 135}, {"referenceID": 26, "context": "The semantic extraction ability of CNN for RGB images has been fully proved [27].", "startOffset": 76, "endOffset": 80}, {"referenceID": 21, "context": "The revised deep reinforcement learning algorithms for continued control [22] should also be considered to improve the learning efficiency.", "startOffset": 73, "endOffset": 77}], "year": 2016, "abstractText": "Exploration in an unknown environment is the core functionality for mobile robots. Learning-based exploration methods, including convolutional neural networks, provide excellent strategies without human-designed logic for the feature extraction [1]. But the conventional supervised learning algorithms cost lots of efforts on the labeling work of datasets inevitably. Scenes not included in the training set are mostly unrecognized either. We propose a deep reinforcement learning method for the exploration of mobile robots in an indoor environment with the depth information from an RGB-D sensor only. Based on the Deep Q-Network framework [2], the raw depth image is taken as the only input to estimate the Q values corresponding to all moving commands. The training of the network weights is end-to-end. In arbitrarily constructed simulation environments, we show that the robot can be quickly adapted to unfamiliar scenes without any man-made labeling. Besides, through analysis of receptive fields of feature representations, deep reinforcement learning motivates the convolutional networks to estimate the traversability of the scenes. The test results are compared with the exploration strategies separately based on deep learning [1] or reinforcement learning [3]. Even trained only in the simulated environment, experimental results in real-world environment demonstrate that the cognitive ability of robot controller is dramatically improved compared with the supervised method. We believe it is the first time that raw sensor information is used to build cognitive exploration strategy for mobile robots through end-to-end deep reinforcement learning.", "creator": "LaTeX with hyperref package"}}}