{"id": "1610.01922", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Oct-2016", "title": "Adaptive Online Sequential ELM for Concept Drift Tackling", "abstract": "a machine tested learning method needs to safely adapt to over time and changes in playing the environment. such changes are known such as concept drift. in this proposed paper, we propose concept drift tackling method as an enhancement of online sequential prediction extreme learning machine ( os - elm ) and constructive enhancement os - elm ( ceos - elm ) by adding adaptive capability for classification strategy and regression problem. the scheme is incorrectly named as adaptive os - elm ( aos - elm ). it is similarly a single classifier scheme that works well to handle real drift, virtual drift, and mixed hybrid serial drift. the aos - elm also works well for sudden drift and its recurrent context change type. the scheme is a simple unified method implemented in simple static lines of code. we evaluated aos - elm on regression and classification problem by using balanced concept drift public data set ( sea and stagger ) and compare other weighted public data sets such as mnist, usps, and ids. two experiments show that our method gives higher kappa value compared to the multiclassifier elm ensemble. even though aos - elm in practice does not need hidden row nodes as increase, we address to some issues related than to the increasing of comparing the hidden nodes such as error condition and rank values. we propose taking the rank variables of the pseudoinverse matrix as an indicator parameter to detect maximum underfitting condition.", "histories": [["v1", "Thu, 6 Oct 2016 16:08:52 GMT  (766kb,D)", "http://arxiv.org/abs/1610.01922v1", "Hindawi Publishing. Computational Intelligence and Neuroscience Volume 2016 (2016), Article ID 8091267, 17 pages Received 29 January 2016, Accepted 17 May 2016. Special Issue on \"Advances in Neural Networks and Hybrid-Metaheuristics: Theory, Algorithms, and Novel Engineering Applications\". Academic Editor: Stefan Haufe"]], "COMMENTS": "Hindawi Publishing. Computational Intelligence and Neuroscience Volume 2016 (2016), Article ID 8091267, 17 pages Received 29 January 2016, Accepted 17 May 2016. Special Issue on \"Advances in Neural Networks and Hybrid-Metaheuristics: Theory, Algorithms, and Novel Engineering Applications\". Academic Editor: Stefan Haufe", "reviews": [], "SUBJECTS": "cs.AI cs.LG cs.NE", "authors": ["arif budiman", "mohamad ivan fanany", "chan basaruddin"], "accepted": false, "id": "1610.01922"}, "pdf": {"name": "1610.01922.pdf", "metadata": {"source": "CRF", "title": "Adaptive Online Sequential ELM for Concept Drift Tackling", "authors": ["Arif Budiman", "Mohamad Ivan Fanany", "Chan Basaruddin"], "emails": ["arif.budiman21@ui.ac.id"], "sections": [{"heading": null, "text": "A machine learning method needs to adapt to over time changes in the environment. Such changes are known as concept drift. One approach to concept drift handling is by feeding the whole training data set once again into a learning machine for retraining. Another approach is by rebuilding an ensemble classifiers to adapt to a new training data set. In either approach, retraining or rebuilding classifiers are expensive and not practical. In this paper, we propose an enhancement of Online-Sequential Extreme Learning Machine (OS-ELM) and its variant Constructive Enhancement OS-ELM (CEOS-ELM) by adding an adaptive capability for classification and regression problem. The scheme is named as Adaptive OS-ELM (AOS-ELM). It is a single classifier scheme that works well to handle real drift, virtual drift, and both drifts occurred at the same time (hybrid drift). The AOS-ELM also works well for sudden drift as well as recurrent context change type. The scheme is a simple unified method implemented in simple lines of code. We evaluated AOS-ELM on regression and classification problem by using various public dataset widely used for concept drift verification from SEA and STAGGER; and other public datasets such as MNIST and USPS. Experiments show that our method gives higher kappa value compared to the multi-classifier ELM ensemble. Even though AOS-ELM in practice does not need hidden nodes increase, we address some issues related to the increasing of the hidden nodes such as error condition and rank values. We propose to take the rank of the pseudo inverse matrix as an indicator parameter to detect \u2019under-fitting\u2019 condition.\nKeywords\u2014 adaptive, concept drift, extreme learning machine, online sequential.\nIntroduction\nData stream mining is a data mining technique, in which the trained model is updated whenever new data arrive. However, the trained model must work in dynamic environments, where a vast amount of data is not only continuously generated but also keep changing. This challenging issue is known as concept drift [12], in which the statistical properties of the input attributes and target classes shifted over time. Such shifts can make the trained model becoming less accurate. These methods pursue an accurate, simple, fast and flexible way to retain classification performance when the drift occurs. Ensemble classifier is a well-known way to retain the classification performance. The combined decision of many single classifiers (mainly using ensemble members diversification) is more accurate than single classifier [9]. However, it has higher complexity when handling multiple (consecutive) concept drifts.\n1/26\nar X\niv :1\n61 0.\n01 92\n2v 1\n[ cs\n.A I]\n6 O\nct 2\n01 6\nOne of the popular machine learning methods is Extreme Learning Machine (ELM) introduced by Huang, et. al. [21] [20] [18], [17] [19]. The ELM is a Single Layer Feedforward Neural Network (SLFN) with fast learning speed and good generalization capability.\nIn this paper, we focused on the learning adaptation method as an enhancement to Online Sequential Extreme Learning Machine (OS-ELM) [28] and Constructive Enhancement OS-ELM (CEOS-ELM) [26]. We named it as Adaptive OS-ELM (AOS-ELM). The AOS-ELM has capability to handle multiple concept drift problems either changes in the number of attributes (virtual drift/VD) or the number of target classes (real drift/RD) or both at the same time (hybrid drift/HD), also for recurrent context (all concepts occur alternately) or sudden drift (new concept substitutes previous concepts) [25]. Our scope of attribute changes discussed in this paper is on the feature space concatenation that widely used in data fusion, kernel fusion, and ensemble learning [8] and not on the feature selection (irrelevant features removal) methods [5]. We compared the performance with nonadaptive sequential ELM: OS-ELM and CEOS-ELM. We also compared the performance with ELM classifier ensembles as the common adaptive approach for concept drift solution. In the present study, although we focus on the adaptation aspect, we address some possible change detection mechanisms that are suitable for our method.\nA preliminary version of RD and its early results appeared in conference proceedings [3]. In this paper, we introduced the new scenarios in VD, HD, and consecutive drifts either recurrent or sudden drift scenarios as well as theoretical background explanation. Our main contributions in this research area can be summarized as follows:\n1. We proposed simple adaptive method as enhancement to OS-ELM and CEOS-ELM for addressing concept drifts issue. Unlike ensemble systems [17,41] that need to manage the complex combination of a vast number of classifiers, we pursue a single classifier for simple implementation while retaining comparable performance for handling multiple (consecutive) drifts.\n2. We denote the training data from different S concepts (sources or contexts), using the symbol Xs for training data and Ts for target data. We used the subscript font without parenthesis to show the source number.\n3. We denote the drift event using the symbol \u226bV D , where the subscript font shows the drift type. E.g., the Concept 1 has virtual drift event to be replaced by Concept 2 (Sudden drift) : C1 \u226b V DC2. The Concept 1 has real drift event to be\nreplaced by Concept 1 and Concept 2 recurrently (Recurrent context) in the shuffled composition : C1 \u226b RD shuffled(C1,C2).\n4. We introduced a simple unified platform to handle a hybrid drift (HD) when changes in the number of attributes and the number of target classes occurred at the same time.\n5. We elaborated how the AOS-ELM for transfer learning using hybrid drift strategy. Transfer learning focuses on extracting the knowledge from one or more source task domains and applies the knowledge to a different target task domain [32]. Concept drift focuses on the time-varying domain with a small number of current data available. In contrast, transfer learn\n6. We denote the training data from different S concepts (sources or contexts), using the symbol Xs for training data and Ts for target data. We used the subscript font without parenthesis to show the source number.\n2/26\n7. We denote the drift event using the symbol \u226bV D , where the subscript font shows the drift type. E.g., the Concept 1 has virtual drift event to be replaced by Concept 2 (Sudden drift) : C1 \u226b V DC2. The Concept 1 has real drift event to be\nreplaced by Concept 1 and Concept 2 recurrently (Recurrent context) in the shuffled composition : C1 \u226b RD shuffled(C1,C2). ing is not associated with time and requires the entire training and testing data set [38]. The example of transfer learning by using HD strategy is the transition from different data set sources but still related and has the same purpose. In this paper, we discussed the transfer learning on numeric handwritten MNIST [27] to alpha-numeric handwritten USPS [33] recognition.\n8. Naturally, the AOS-ELM handling strategy was based on recurrent context. We devised an AOS-ELM strategy to handle sudden drift scenario by introducing output marginalization method. This method is also applicable for concept drift in a regression problem.\n9. We studied the effect of increasing the number of hidden nodes, which is treated as one of learning parameters, to improve the accuracy (other learning parameters are input weight, bias, activation function, and regularization factor). We proposed the evaluation parameter to predict the accuracy before the training completed. We applied this assessment parameter actually to prevent \u2019under-fitting\u2019 or nonconvergence condition (the model does not fit the data well enough that makes accuracy performance dropped) when any learning parameter changes such as hidden nodes increased.\nThis paper is organized as follows. Section 1 explains some issues and challenges in concept drift, the background of ELM, and ELM in sequential learning. Section 2 presents the background theory and algorithm derivation of the proposed method. In section 3, we focus on the empirical experiments to prove the methods and research questions in regression and classification problem. We use artificial and real data set. The artificial data sets are streaming ensemble algorithm (SEA) [35] and STAGGER [23], which are commonly used as benchmark in sequential learning. The real data sets are handwritten recognition data: MNIST for numeric [27] and USPS for alpha-numeric classes [33]. We studied the effect of hidden nodes increase as one of important learning parameter in section 3.5. Section 6 discusses research challenges and future directions. The conclusion presents some highlights in Section 7."}, {"heading": "1 Related Works", "text": ""}, {"heading": "1.1 Notations", "text": "We specify the notations used throughout this article for easier understanding:\n\u2022 Matrix is written in uppercase bold (e.g., X).\n\u2022 Vector is written in lowercase bold (e.g., x).\n\u2022 The transpose of a matrix X is written as XT . The pseudo-inverse of a matrix H is written as H\u2020.\n\u2022 f , g will be used as non linear differentiable function (activation function), e.g., sigmoid or tanh function.\n\u2022 The amount of training data is N . Each input data x contains some d attributes. The target has m number of classes.An input matrix X can be denoted as Xd\u00d7N and the target matrix T as TN \u00d7m.\n3/26\n\u2022 The hidden layer matrix is H. The input weight matrix is A. The output weight matrix is \u03b2. The matrix \u2206H is the additional block portion of the matrix H. The matrix K is the auto correlation matrix of HTH. The inverse of matrix K is P.\n\u2022 H can be denoted as HN \u00d7 L. A can be denoted as Ad\u00d7 L and \u03b2 can be denoted as \u03b2L\u00d7m. \u03b4L denotes the additional nodes number of L.\n\u2022 When the number of training data N \u2192\u221e, we employed the online sequential learning method by updating model every time each new training pairs (x, t) are seen. X(0) is the subset of input data at time k = 0 as the initialization stage. X(1),X(2),...,X(k) are the subset of input data at the next sequential time. Each subset may have different number of quantity. The corresponding label data is presented as T = [ T(0),T(1),T(2), ...,T(k) ] . We used the subscript font with\nparenthesis to show the sequence number.\n\u2022 We denote the training data from different S concepts (sources or contexts), using the symbol Xs for training data and Ts for target data. We used the subscript font without parenthesis to show the source number.\n\u2022 We denote the drift event using the symbol \u226bV D , where the subscript font shows the drift type. E.g., the Concept 1 has virtual drift event to be replaced by Concept 2 (Sudden drift) : C1 \u226b V DC2. The Concept 1 has real drift event to be\nreplaced by Concept 1 and Concept 2 recurrently (Recurrent context) in the shuffled composition : C1 \u226b RD shuffled(C1,C2)."}, {"heading": "1.2 Concept Drift Strategies", "text": "In this section, we briefly explained the various concept drift solution strategies. Gama, et. al. [12] explained many concept drift methods have been developed, but the terminologies are not well established. According to Gama, et. al., the basic concept drift based on Bayesian decision theory in the classification problem for class output c and incoming data X as:\nP (c|X) = P (c)P (X|c) P (X)\n(1)\nConcept drift occurred when P (c|X) has changed; e.g., \u2203X : P(0)(X, c) 6= P(1)(X, c), where P(0) and P(1) are respectively the joint distribution at time t(0) and t(1). Gama, et. al. categorized the concept drift types as following:\n1. Real Drift (RD) refers to changes in P (c|X). The change in P (c|X) may be caused by a change in the class boundary (the number of classes) or the class conditional probabilities (likelihood) P (X|c). The number of classes expanded and different class of data may come alternately, known as recurrent context. A drift, where a new conditional probabilities replaces the previous conditional probabilities while the number of class remained the same, is known as sudden drift. Other terms are concept shift or conditional change [13].\n2. Virtual Drift (VD) refers to the changes in the distribution of the incoming data (e.g. P (X) changes). These changes may be due to incomplete or partial feature representation of the current data distribution. The trained model is built with additional data from the same environment without overlapping the true class boundaries. Other terms are feature change [13], temporary drift, or sampling shift.\n4/26\nKuncheva [24,25] explained the various configuration patterns of data sources over time as random noise, random trends (gradual changes), random substitutions (abrupt or sudden changes), and systematic trends (recurring context). The random noise will simply be filtered out. A gradual drift occurs when many concepts may re-occur alternately in the gradual stage for a certain period. A consecutive drift takes place when many previously active concepts might keep on changing alternately (recurring context) after some time. The sudden drift (abrupt changes or concept substitutions) is the type that at one time, one concept is suddenly replaced by another concept.\nZ\u030cliobaite\u0307 [41] proposed a taxonomy of concept drift tackling methods as shown in Fig. 1. It describes the methods based on when the model is switched on (the \u2019when\u2019 axis) and how the learners adapt to training set formation or design and parametrization of the base learner (The \u2019how\u2019 axis). The \u2019when\u2019 axis spans drift handling from trigger based to evolving based methods. The \u2019how\u2019 axis spans drift handling from training set formation to model manipulation (or parametrization) methods.\nZ\u030cliobaite\u0307 [41] explained that most attention on the concept drift tackling methods are drawn to multi-classifier model selection and fusion rules, but little attention on the model construction of base classifier.\nGama, et. al. [12] proposed a complete online adaptive learning scheme that organized four modules: memory, change detection, learning, and loss estimation (See Fig. 2). These modular components can be integrated, permuted and combined with each other. The key modules are the learning and the change detection modules. Most methods focused on some subset or often mixtures of many types within certain concept drifts.\nThe learning module refers to the methods for the adaptation strategies of the predictive model. The learning module is categorized based on i) How the model is updated when new data points are available (learning mode): retraining or incremental (online) modes. ii) The behavior of predictive models on time-evolving data (model adaptation): a blind (evolving or implicit) based module or an informed (trigger or explicit) based module. iii) The techniques for maintaining active predictive models (model management): a single model or ensemble model. The change detection module refers to drift detection. The change detection identifies change points or small time intervals when changes occur.\nEach drift employed different solution strategies. The solution for RD is entirely different from VD. If the systematic changes are likely to reappear, we may want to keep past successful classifiers and simply reuse them. If the changes are gradual, we\n5/26\nmay use a moving window strategy on the training data. If the changes are abrupt, we can pause the existing static classifiers then retrain the classifier using the new training data. Thus, it is hard to combine simultaneously many strategies at one time to solve many types of concept drift in just a simple platform."}, {"heading": "1.3 ELM in Sequential Learning", "text": "In this section, we briefly explained the previous related works of ELM in sequential learning and adaptive environments.\nELM is getting popularity thanks to its learning speed, generalization capability, and simplicity. Huang [18] explained the term \u2019Extreme\u2019 meant to move beyond conventional artificial neural network learning that required iterative tuning. The ELM moves toward brain like learning in which hidden neurons need not be tuned.\nThe output function of an SLFN with single hidden layer matrix H can be presented as the function of:\nfL(x) = L\u2211 i=1 \u03b2iH(ai,bi,x) (2)\nwhere H\u2020 is the pseudo inverse of H. H\u2020 can be approximated by left pseudoinverse of H as:\n\u03b2\u0302 = (H T H)\u22121H T T (3) We can use ridge regression or regularized least squares to be: \u03b2\u0302 = ( H T H + Ic )\u22121 H T\nT. Based on [3], Liang et.al. [28] proposed online learning for ELM named OS-ELM.\nIf we have \u03b2\u0302(0) from H(0) filled by the N0 number of training data and N1\nincremental batch of data filled H(1) , the output weights \u03b2\u0302(1) are approximated by:\n\u03b2\u0302(1) = ([ H(0)\nH(1) ]T [ H(0) H(1) ])\u22121 [ H(0) H(1) ]T [ T(0) T(1) ] (4)\nBoth H0 and H1 have a different number of training data but have the same L number of hidden nodes.\nIf K = H T H, then we can rewrite:\n\u03b2\u0302(1) = K \u22121 (1) [ H(0) H(1) ]T [ T(0) T(1) ] (5)\nThe OS-ELM assumes no changes in the number of hidden nodes. However, increasing the number of hidden nodes is required to improve the performance. A\n6/26\nCEOS-ELM [26] has addressed this problem by adding hidden nodes in the sequential\nlearning stage. So H = [ H(0) \u2206H(0) H(1) \u2206H(1) ] .\nThe sub-matrix \u2206H(0) is set to a zero block matrix to simplify the computation in accordance with the fact that the previous data is not related to the new hidden nodes. The additional hidden nodes block matrix \u2206H(1) for N1 data, has relation to the additional hidden nodes \u03b4L(1). Then, we can rewrite K(1) with \u2206H(1) as:\nK\u0302(1) = [ H(0) 0 H(1) \u2206H(1) ]T [ H(0) 0 H(1) \u2206H(1) ] (6)\nIf P\u0302 = K\u0302\u22121 can be solved using block matrix inversion and Schur complement, then:\n\u03b2\u0302(1) = P\u0302(1) [ H(0) 0 H(1) \u2206H(1) ]T [ T(0) T(1) ] (7)\nIt is important to note that both OS-ELM and CEOS-ELM did not address the concept drift issue; e.g., when the number of attributes d in Xd\u00d7N or the number of classes m in TN \u00d7m in data set has added. In this paper, we categorized OS-ELM and CEOS-ELM as non-adaptive sequential ELM.\nTo the best of our knowledge, no previous single base ELM approach specifically addresses many concept drifts learning [17]. However, some papers [4, 36] already discussed how the ELM implementation in adaptive environment.\nSchaik, et.al. [36] proposed Online Pseudo Inverse Update Method (OPIUM). OPIUM is based on Greville\u2019s method as the incremental solutions to compute the pseudo inverse of matrix. The pseudo inverse computation can be solved incrementally as linear regression problems and can be adaptive which allows for non stationary data. The derivation of OPIUM is equivalent to the OS-ELM if the condition c(k) def = (I\u2212H(k\u22121)H\u22121(k\u22121))H(k) = 0 met at each iteration. This condition implies H(k) is a linear combination of the previous hidden layer H(k\u22121) and the simpler derivation of (2) with right pseudo inverse become:\n\u03b2\u0302 = TH\u2020 = TH T (H T H)\u22121 (8)\nSchaik, et.al. defined \u03c8 as the cross correlation matrix between T and H (TH T )\nand \u03b8 as the inverse of the auto correlation H (H T H)\u22121), so \u03b2 = \u03c8\u03b8. According to Greville\u2019s method, the solution for \u03c8(k) = \u03c8(k\u22121) + T(k)H T (k). And the solution for\n\u03b8(k) = ( H(k\u22121)H T (k\u22121) + H(k)H T (k) )\u22121 , or in short writing as \u03b8(k) = f(\u03b8(k\u22121),H(k)).\nSchaik, et.al. proposed a simplified version named OPIUM light by computing only the on-diagonal element of \u03b8(k). Schaik, et.al. applied the OPIUM light for non-stationary data by using different weight \u03b1 in determining \u03b2(k) for the most recent pair (T(k),H(k)) that appropriate for non-stationary mapping, which are: \u03c8(k) = (2\u2212 \u03b1)\u03c8(k\u22121) + \u03b1T(k)H T (k), and for\n\u03b8(k) = ( (2\u2212 \u03b1)H(k\u22121)H T (k\u22121) + \u03b1H(k)H T (k) )\u22121 .\nIn our opinion, OPIUM only tackled the real drift case with discriminant function boundary shift in the streaming data (e.g. the frequency shift of sine wave). They implemented the weighting \u03b1 as a non-stationary mapping parameter between input and output vectors.\nCao, et. al. [4] proposed two-phase classification algorithm: First, weighted ensemble classifier based on ELM (WEC-ELM) algorithm, which can dynamically adjust classifier\n7/26\nand the weight of training uncertain data to solve the problem of concept drift. Second, an uncertainty classifier based on ELM (UC-ELM) algorithm is designed for the classification of unknown data streams, which considers attribute (tuple) value and its uncertainty, thus improving the efficiency and accuracy. When concept drift occurs, WEC-ELM will dynamically adjust the classifiers and the weight of training data, thus a new classifier will be added to the ensemble until it reached a preset maximum then removed the worst-performing classifier. UC-ELM is designed for the classification of uncertain data streams, which has attributes (tuples) and its uncertainty values. The UC-ELM evaluated uncertainty value for every newly arrived attribute and decided based on the probability of the new attributes belonging to each class, thus improving the efficiency and accuracy. In our opinion, WEC-ELM is categorized as evolving based method by selecting the best-performing classifier, and UC-ELM addressed virtual drift problem by using uncertainty attributes selection."}, {"heading": "2 Proposed Method", "text": ""}, {"heading": "2.1 Theoritical Background of AOS-ELM", "text": "In sequential learning, some partial training data arrives in time sequential fashion:{ (x(0), t(0)), (x(1), t(1)), \u00b7 \u00b7 \u00b7 , (x(k), t(k)) } . Learning is the process of constructing function \u03b2\u0302 to map between observation and its nature called (class) [7]. When the number of training data N \u2192\u221e, we need to address the expected value of \u03b2(\u221e) = \u03b2\u0302. Learning from the data Dn is the process to select a function \u03b2n from a class of B by minimizing of the empirical squared error en(\u03b2) = 1 n \u2211n i=1(Hi\u03b2 \u2212Ti)2 with the\nerror probability L(\u03b2n) = P { I{H\u03b2n} 6= T|Dn } of the resulting classifier. According to [7], the empirical squared error minimization is consistent under general conditions.\nTheorem 2.1 Assume that B is a totally bounded class of functions. If \u03b2n \u2208 B, then the classification rule obtained by minimizing the empirical squared error over B is strongly consistent, that is,\nP {\nlim n\u2192\u221e\nL(\u03b2n) = L \u2217}\u2192 1 (9)\nBased on Law of Large Numbers (LLN) theorem [15] and Theorem 2.1, in sequential learning with the number of training data N \u2192\u221e, we can make sure the consistency of expected value of learning model is \u03b2\u0302 = H\u2020T.\nThe Concept drift refers to an online supervised learning model when the relation between the input data and the target variable changes over time [12]. If the learning model from Concept 1 \u03b2\u03021 \u2208 B1 is bounded by hypothesis space Rm1 and feature space Rd1 . And the learning model from Concept 2 \u03b2\u03022 \u2208 B2 is bounded by hypothesis space Rm2 and feature space Rd2 . We defined the real drift as when the hypothesis space Rm1 has changed to Rm2 . We scoped the definition for m2 > m1 dimension changes. The virtual drift is when the feature space Rd1 has changed to Rd2 . We scoped the definition for d2 > d1 dimension changes.\nTo achieve the consistency of minimized square error in the new hypothesis space or new feature space, the learning model needs a transition map from the former space to the new space. The learning model \u03b2\u03021 needs a transition space before it converges to the new learning model \u03b2\u03022 \u2208 B2 \u2282 Rm2 . Our transition space idea was inspired by geometric approach for solving many problems in the fields of pattern recognition and machine learning [6, 34].\nFor transition space, we propose two approaches: i) Assign the random coordinates in the new concept space. ii) Assign the equivalent projection coordinates in the new\n8/26\ndesign space. The first approach is suitable for VD scenario, in which we assigned the new random coordinates as the new input weight parameters. The second approach is suitable for RD situation, by setting the equivalent projection coordinates in the new space (e.g. The (X1) in 1-D coordinate has corresponding 2-D projection coordinates as (X1, 0)).\nHere, we relate the ELM theory to the context of AOS-ELM concept drift scenarios as follows:\n1. Scenario 1: virtual drift (VD).\nHuang, et. al. [17] explained interpolation theory from ELM point of view as stated by the following description:\nTheorem 2.2 Given any small positive value > 0, any activation function which is infinitely differentiable in any interval, and N arbitrary distinct samples (xi, ti) \u2208 Rd \u00d7 Rm, there exists L < N such that for any input weight and bias pair {ai,bi}Li=1 randomly generated from any interval of Rd \u00d7R, according to any continuous probability distribution, then with probability one, \u2016H\u03b2 \u2212T\u2016 < . Furthermore, if L = N , then with probability one, \u2016H\u03b2 \u2212T\u2016 = 0.\nAccording to Theorem 2.2 and Learning Principle I of ELM Theory [18], the input weight and bias as hidden nodes H parameters are independent of training samples and their learning environment through randomization. Their independence is not only in initial training but also in any sequential training stages. Thus, we can adjust the input weight and bias pair {ai,bi}Li=1 on any sequential stages and still make sure with probability one that \u2016H\u03b2 \u2212T\u2016 < .\n2. Scenario 2: real drift (RD).\nHuang, et. al. [17] explained universal approximation capability of ELM as described by the following theorem:\nTheorem 2.3 Given any nonconstant piecewise continuous function g : Rd \u2192 R, if span {g(a,b,x) : (a,b)Rd \u00d7 R} is dense in L2, for any continuous target function f and any function sequence {g(ai,bi,x)}Li=1 randomly generated according to any continuous sampling distribution, limL\u2192\u221e \u2016f\u2212fL\u2016 = 0 holds with probability one if the output weights \u03b2i are determined by ordinary least square to minimize \u2016fx)\u2212\u03a3Li=1\u03b2ig(ai,bi,x)\u2016.\nBased on Theorem 2.3 and inspired by the related works [3, 26], we devised the AOS-ELM real drift capability by modifying the output matrix with zero block matrix concatenation to change the size dimension of the matrix without changing the value. Zero block matrix has meant the previous \u03b2(k\u22121) has no knowledge about the new concept. ELM can approximate any complex decision boundary, as long as the output weights \u03b2i are determined by ordinary least square to keep the minimum."}, {"heading": "2.2 AOS-ELM Algorithms", "text": "In this section, we presented the AOS-ELM pseudo codes 1 in the kth sequential with X(k) training input and T(k) target to update Model(k).\nBasically, we have three pseudo codes, namely OSELMSeq (Algorithm 1) as OS-ELM and CEOS-ELM pseudo codes; the AOSELMVDSeq (Algorithm 1 as AOS-ELM pseudo\n1The Matlab source code, data set and demo file implementation are available at https://github.com/abudiman250172/adaptive-OS-ELM.\n9/26\ncodes tackling virtual drift; and AOSELMRDSeq (Algorithm 2 as AOS-ELM pseudo codes for addressing real drift. We can combine each pseudo code together to form a hybrid drift Algorithm. We can increase the hidden nodes using CEOS-ELM in Algorithm 3 after AOSELMVDSeq or AOSELMRDSeq. For initialization, basically we can use any ordinary ELM initialization in offline learning mode.\nFor sudden drift scenario, we proposed output marginalization method by adding the new output nodes when the new concept presented (See Fig. 3) and marginalized the output result by defining the Ys class of concept S is = arg max\nys\nT(ys). We scoped the\nnew concept has the same output nodes quantity with the previous concept. Output marginalization is by shifting the ELM output to the output nodes that belonging to the new concept and ignoring the previous concept output nodes. This strategy is similar with classifier pruning in ELM ensemble. However, in output marginalization, we can reactivate the previous concepts by shifting back to the previous output nodes. If we want to forget the last concept totally, we can quickly delete the previous output nodes without impacting the generalization performance, or we can increase the hidden nodes at the same time with the drift event.\nIn regression, because we have only one output node, then we can employ sudden drift scenario by amplifying the related output node of the concept with a constant value that makes the maximum output Ys approximated to 1.\nThe systematic rules make AOS-ELM more flexibe to handle complex consecutive drifts scenario. The AOS-ELM only stored the previous output weight \u03b2L\u00d7m and auto correlation KL\u00d7L. The auto correlation K did not keep the training data. This makes AOS-ELM scalable for big streaming data without impacting the computation performance.\nTo improve the accuracy, we define the target values \u2208 {0, 1}, so that Y class is = arg max\ny T(y). According to [22], the target values \u2208 {0, 1} is equivalent with\n\u2208 {\u22121, 1}.\nAlgorithm 1 Algorithm OSELMSeq {OS-ELM Sequential }\nRequire: X(k) \u2208 [\u22121, 1]Rd\u00d7N , T(k) \u2208 [0, 1]RN\u00d7m, A(k), bL, K(k\u22121), \u03b2(k\u22121) Ensure: \u03b2(k),K(k) 1: Compute H(k) = g(A(k) \u00b7X(k) + bL) 2: if IncreaseHiddenNodes == true then 3: \u2206Ad\u00d7\u03b4L = RandomNumbers([\u22121, 1] ,Rd\u00d7\u03b4L) 4: \u2206b\u03b4L = RandomNumbers([\u22121, 1] ,R\u03b4L) 5: A(k) = [ A(k)\u2206Ad\u00d7\u03b4L\n] 6: bL = [ b(L)\u2206b\u03b4L\n] 7: Compute \u2206H(k) = g(\u2206Ad\u00d7\u03b4L \u00b7X(k) + \u2206b\u03b4L) 8: Compute K(k) = f ( K(k\u22121),H(k),\u2206H(k)\n) 9: Compute \u03b2(k) = f ( \u03b2(k\u22121),K(k),H(k),\u2206H(k),T(k)\n) {Using CEOS-ELM Method}\n10: else 11: Compute K(k) = K(k\u22121) + H T (k)H(k)\n12: Compute \u03b2(k) = f ( \u03b2(k\u22121),K(k),H(k),T(k) ) 13: end if 14: return \u03b2(k),K(k)\n10/26"}, {"heading": "3 Experiments", "text": ""}, {"heading": "3.1 Experiments Design in Classification", "text": "To verify our method, we designed some experiments with the following purposes:\n\u2022 To investigate the effectiveness of AOS-ELM on tackling three concept drift scenarios (VD, RD, HD) in two sequential patterns (sudden changes, recurring context). We used various data set starting with synthetic data set (SEA, STAGGER) then with real data set in handwritten recognition (MNIST, USPS). Each data set has different drift characteristics. This experiment is presented in Section 3.2 and 3.4. We also demonstrated the AOS-ELM capability as drift detection role in section 3.3 using SEA data set.\n\u2022 To investigate the effectiveness of AOS-ELM on transfer learning to combine different data set sources. This experiment is presented in Section 3.4 using two data set sources (MNIST, and USPS) in handwritten recognition problem.\n\u2022 To investigate the effect of hidden nodes increase in the drift events and how it impacts performance. This experiment is presented in section 3.5.\nWe used Matlab TM running on Microsoft Windows TM Computer with 4 cores 2.5 GHz processor and 8 GB memory.\nOur experiments are organized as follows:\n1. Simulation benchmark tests on the datasets that commonly used in concept drift handling of stream data, e.g. SEA [35] and STAGGER [23] (See Table 2a). Both datasets are binary classification problem. SEA has 3 inputs with random integer values from 0 to 9. STAGGER has three inputs with multiple category values from 1 to 3 (Total inputs are 9). SEA and STAGGER are the examples of concept drift that caused by discriminant function changes while the number of attributes and classes from all concepts are still same. The change type is sudden drift. The expected result is the classifier has good performance for the newest concept [24].\n2. We tested our algorithm with real-world public data sets from MNIST numeric (0 to 9) [27] and the USPS alphanumeric (A to Z, 0 to 9) handwritten dataset [33].\n11/26\nWe used original grey-level image attributes [Xgrey] of MNIST data set and the combination of [Xgrey] with additional attributes from the 9x9 bins histogram of orientated gradients (XHOG) of grey-level image features [29]. For USPS, we added more data with Gaussian random and salt-pepper noises. Refer to Table 2a for detail data set information.\n3. We designed the initial input weights and bias based on robust OS-ELM with regularization scalar c (ROS) [16] and then based on initial random from the normal distribution (NORM). The activation function is sigmoid. The pseudo inverse function is the orthogonal projection using ridge regularization.\n4. Let\u2019s define the following concept as :\n\u2022 C1 is MNIST[Xgrey] class (1-6); \u2022 C2 is MNIST[Xgrey] class (7-10); \u2022 C3 is MNIST[XgreyXHOG] class (1-6); \u2022 C4 is MNIST[XgreyXHOG] class (7-10); \u2022 C5 is MNIST[XgreyXHOG] class (1-10); \u2022 C6 is USPS[XgreyXHOG] class (1-10, A-Z);\nWe followed the simulated concept drift methods in Dries, et.al [10]. We simulated sudden drift by splitting the composition into two groups, e.g., C1 and C2 and recurring context by shuffled the composition of C1 and C2. We set the sequential training flow to be the following drift equation:\nWe followed the simulated concept drift methods in Dries, et.al [10]. We simulated sudden drift by splitting the composition into two groups, e.g., C1 and C2 and recurring context by shuffled the composition of C1 and C2. We set the sequential training flow to be the following drift equation:\n(a) Experiment 1 - Virtual drift:\nMNIST[Xgrey] \u226b V D MNIST[XgreyXHOG]\n(b) Experiment 2 - Real Drift:\nFor recurring context: C1 \u226b RD shuffled(C1,C2) For sudden drift: C1 \u226b RDC2\n(c) Experiment 3 - Hybrid Drift:\nC1 \u226b HD shuffled(C3,C4)\n(d) Experiment 4 - MNIST+USPS Transfer Learning:\nC5 \u226b RDC6\n5. We measured the performance based on Table 2c. The testing accuracy and Cohen\u2019s Kappa are to show the quantitative measurement. The predictive accuracy is to demonstrate the trend in a line chart. The sudden drift performance is based on the forgetting capability that compared the testing accuracy of the latest concept against all the previous concepts.\n6. We compared the AOS-ELM performance with non-adaptive online sequential and offline version of ELM classifier. The performance expectation of sequential version classifier is to approximate the offline version of the classifier (desiderata for online classifiers [24]). We also compared with adaptive ELM ensemble method (See Fig. 4). We designed the hierarchical ensemble using two models of ELM classifier with different roles (See Fig. 4). The first role is a binary classifier\n12/26\nthat acts as a director based on one against all (OAA) classification. The binary classifier needs all sequential training data to be recalled (full memory). Another role is the data classifier. This ensemble requires total 2S \u2212 1 classifiers for S concepts, thus not effective for consecutive concept drift case e.g. SEA concepts. The ensemble also applied outdated classifier pruning when the ensemble detects the previous attributes need to be replaced."}, {"heading": "3.2 SEA and STAGGER Concepts Result", "text": "We addressed the question whether non-adaptive OS-ELM and CEOS-ELM with \u03b4L increase could handle the concept drift situation. We compared between AOS-ELM with no \u03b4L increase (AOS-ELM1) and with \u03b4L increase (AOS-ELM2). We used 5-fold cross-validation and compared between NORM and ROS parameter. For SEA, parameters: L0 = 3000 and \u03b4L = 500 increase per drift. For STAGGER, parameters: L0 = 9 and \u03b4L = 5 hidden nodes increase per drift.\n13/26\nThe AOS-ELM has better accuracy with better recovery time (See Table 3a,3b) than CEOS-ELM, whereas non-adaptive OS-ELM fails (See Fig. 5). The AOS-ELM2 improved the forgetting capability better than AOS-ELM1. In comparison with Kolter, et.al result using dynamically weighted majority (DWM) of naive Bayes (DWM-NB) for SEA, AOS-ELM result is near to the DWM result. Comparison with inducing decision trees (DWM-ITI) for STAGGER [23], AOS-ELM outperformed DWM. (See Table 3a and 3b)."}, {"heading": "3.3 Concept Drift Detection", "text": "The drift detection works based on loss estimation (See Fig. 2) that compared current prediction accuracy with the previous feedback. Using similar method on [1, 31], we can\n14/26\nevaluate the intersection point between accuracy decrease and increase in Fig. 6. If the consecutive loss performance exceeded a certain threshold, then drift warning status triggered. We measured the output performance from the new concept output and compared with the previous output. If met certain criteria, then the new AOS-ELM is committed. Otherwise, the previous AOS-ELM is rolled back."}, {"heading": "3.4 MNIST and MNIST+USPS Result", "text": "We measured the testing accuracy based on holdout test data by 10\u00d7 experiment trials. The results are as follows:\n1. Experiment 1 - Virtual drift.\nThe AOS-ELM of [XgreyXHOG] has Cohen\u2019s kappa of testing accuracy 95.72 (0.21) % approximated to its non-adaptive ELM and offline ELM of [XgreyXHOG] version with the same hidden nodes number L = 2000. It has better accuracy than single attribute [Xgrey] or [XHOG] only (See Table 4b). It proves our explanation in the theoretical background on Section 2.1.\nNote: We set L0 = 200 for [XHOG] ELM based on the same ratio between number of input nodes with hidden nodes of [Xgrey] ELM.\n2. Experiment 2 - Real drift\nThe final result as showed in Table 5b, the AOS-ELM has better Cohen\u2019s kappa performance for all concepts than ELM ensemble and little exceed to its non-adaptive and offline ELM. (Table 5b).\n15/26\nAs well as in the split composition, the AOS-ELM with \u03b4L increase has better performance in forgetting capability than the AOS-ELM with no \u03b4L increase (See Table 8b).\n3. Experiment 3 - Hybrid drift\nThe final result in Table 5c, the AOS-ELM has better Cohen\u2019s kappa performance for HD than ELM ensemble and approximate to its non-adaptive and offline ELM.\n16/26\n4. Experiment 4 - MNIST+USPS Transfer Learning\nThe AOS-ELM has better Cohen\u2019s kappa performance for both numeric and alphabet concepts than ELM ensemble (See Table 5d) and approximate to its non-adaptive and offline ELM. The AOS-ELM shows better recovery time than ELM ensemble in Fig. 7."}, {"heading": "3.5 The effect of hidden nodes increase", "text": "The initial size of hidden nodes L0 selection is important to have good generalization performance. Some studies [17,21] suggested for hidden node size to be equal at least to the rank value of training data. However, in a data stream, it is hard to determine a fixed number of hidden nodes following that suggestion. The larger L0 requires more computation resources and processing time, and probably not giving a significant result at the end. Thus, we have a requirement to increase \u03b4L in sequential stage [26].\nThe experiment result in Table 6 shows the performance improved when certain hidden nodes size increase. We have different L0 conditions: 2000, the rank of initial training data (666), and rank of total training data (713) and multiple conditions of \u03b4L\n17/26\non the drift event: No increase, 500, 1000 and 2000 using ROS parameters. However, the larger L0 has better influence than \u03b4L increase.\n1. \u2019Under-fitting\u2019 condition.\n\u2019Under-fitting\u2019 is the condition when the model does not fit the data well enough that makes unconvergence. Based on an empirical experiment with \u03b4L increase in\n18/26\nthe sequential phase on Table 7, we investigated particular condition when the AOS-ELM classifier has a bad result. We realized the ELM performance is dependent upon finding general matrix inverse of H. Based on orthogonal projection method in CEOS-ELM, we can employ the rank value of P\u0302 as evaluation parameter to detect \u2019under-fitting\u2019. The P\u0302 is approximation to matrix (H T\nH)\u22121. The full rank of PL\u00d7L is ideally equal with L. However, certain condition in the sequential training, e.g. poor training data or poor learning parameter selection may cause the diagonal squared matrix P has less diagonalizable [14], thus not full rank anymore.\nIn the sequential learning, we can compare the Rank(P\u0302) before and after hidden nodes increase. The expected result is positive increment. If the rank value becomes lower after hidden nodes increase, then it has a higher probability of \u2019under-fitting\u2019 condition to occur. The Rank(P\u0302) is determined by the block size of training data, the number of hidden nodes increment, the c scalar selection in ROS parameter, the activation function, input weight, and bias random assignment method. In this experiment, we focused on the block size, the number of hidden nodes and c scalar selection. Using Rank(P\u0302) as evaluation parameter is more efficient because we do not need to compute \u03b2.\n2. Sudden drift.\nOn Table 8a and 8b, the hidden nodes increase can improve the forgetting capability on sudden drift (it reduced the accuracy of the outdated concept).\n19/26\nIn CEOS-ELM, when \u03b4L increase in the same time with drift, it makes[ H1 0 H2 \u2206H2 ] and the new concept target [ 0 t2 ] \u2208 T2 in split composition,\nwhile previous concept [ t1 0 ] \u2208 T1. Thus, in the process of finding \u03b2\u0302 become simplified because [H2\u2206H2] is partially trained by t2 only and not by t1. Thus, it reduced the generalization capability of [H2\u2206H2] to recognize T1 problem."}, {"heading": "4 AOS-ELM in Regression", "text": "We can use the similar real drift scenario with output marginalization and output amplification to solve concept drift problem in regression. In this experiment, we used AOS-ELM with single input node and single output node per concept. We defined the following concept as:\n\u2022 C1 is sinc function with 50000 training/5000 testing;\n\u2022 C2 is sinus function with 50000 training/5000 testing;\n\u2022 C3 is gaussian function with 50000 training/5000 testing.\nThe sequential experiments are following drift equations :\n1. Experiment 1 : C1 \u226b RD C2 2. Experiment 2 : C1 \u226b RD C2 \u226b RD C3\nWe presented the result on the following figures to compare the performance of each concept at the end of each training experiment. Our objective is to show the AOS-ELM regression capability to keep the previous regression concept knowledge. We select the constant value that giving the best regression result of each concept. The AOS-ELM has L0 = 100, \u03b4L = 0, and sigmoid function. More drifts occurred will weaken the older concepts. Thus, it needs larger amplifier constant value.\n20/26"}, {"heading": "5 Simulation in Big Data stream : Intrusion", "text": "Detection System (IDS) KDD Cup 1999\nIDS is a network security technology that scans any network packet traffic to detect any potential exploits then sending the alarm or taking some active action to Intrusion Prevention System. Some machine learning methods have been applied with the hope of improving detection rates and adaptive capability [37].\nIn this experiment, we used KDD Cup 1999 Competition data set. The full dataset had 4898431 network packets and grouped to be 23 classes (One Normal class and 22\n21/26\nattack names based on a signature-based detection) [11]. The dataset has a control information (CI) header for delivering the data in numerical and multi-categorical values as features. We focused on service names (IP ports) attributes because they are specific differentiators for applications. The CI and the number of attack classes are not stationary. We analyzed the data set for the growing of service names and the number of class attack in the whole dataset on Fig. 11. The challenge in IDS dataset is imbalanced data between the classes. The highest number of data is for \u2019normal\u2019 class, and the lowest number is for \u2019spy\u2019 class (only 2 packets). To simplify the experiment, we use oversampling by adding more data based on the random normal distribution of packet signatures and under sampling approaches by dropping some samples randomly.\nBased on the growing of service names and the number of classes analysis (See Fig. 11), we designed one drift scenarios based on two concepts (Table 9b). C1 has ten classes, and 37 service names, and C2 has 23 classes and 70 service names. Total training data for each concept is 920000 packets. No data repetition from the previous event, except at the end of C2 sequential training. The composition between C1/C2 on HD event is 230000/690000.\nThe validation data set of C2 is selected from all packets from minority classes and randomly selected original majority classes (10422 packets). We used holdout method with 5\u00d7 trials. We used AOS-ELM1 for \u03b4L = 0 and AOS-ELM2 for \u03b4L = 500 (Other ELM parameters are same:L0 = 1000, NORM, sig). The AOS-ELM result in this experiment can approximate the non-adaptive OS-ELM on C2 (See Table 9b).\n22/26"}, {"heading": "6 Challenges and Future Research", "text": "\u2022 We need to investigate the optimum transition space that minimize the gap to the new concept learning model. In certain case, the AOS-ELM may have the \u2019under-fitting\u2019 condition and require larger training data to achieve the new convergence.\n\u2022 We need to check the consistency of AOS-ELM for different pseudo-inverse methods (E.g., Greville\u2019s method [36]).\nWe think some ideas for AOS-ELM future researches:\n\u2022 The need for transfer learning to solve big data problem when the distribution data changes.\n\u2022 The AOS-ELM integration with another ELM methods, e.g., Weighted OS-ELM for imbalanced learning [30], ELM Autoencoder (ELM-AE) [39], Stacked ELM [40], etc.\n\u2022 A detail systematic explanation based on rule extraction [2] for AOS-ELM in handling adaptive environment."}, {"heading": "7 Conclusion", "text": "The proposed method gives better adaptive capability than non adaptive OS-ELM and CEOS-ELM in term of retaining the recognition performance when handling concept drifts. It uses a simple line of code and easy to deploy especially for consecutive drifts, compared with adaptive ensemble methods. While most adaptive classifiers work differently for each virtual, real drift, and hybrid drift scenarios, the AOS-ELM tackles those drifts through simple block matrix reconstruction and rank evaluation.\nAOS-ELM satisfied the requirement criteria in term of accuracy, simplicity, fast and flexible. However, in certain VD and HD cases, the AOS-ELM accuracy may not exceed the non adaptive sequential ELM, which include the future training data. In RD cases, the AOS-ELM has better accuracy. In a real data implementation, the non-adaptive ELM is better and preferred when we know exactly the future behavior of data. However, we can not predict it precisely. We believe using larger training data, the AOS-ELM performance will approximate the expected value of non-adaptive sequential ELM or offline ELM, which use the future training data. The AOS-ELM can also add learning adaptation function to the previous offline learning model. It makes AOS-ELM an excellent choice for the unpredictable situation.\nThe AOS-ELM tackles sudden drift change type as well as recurrent context change type. The output marginalization strategy is implemented by simply shifting the output nodes that belonging to the latest concept. The AOS-ELM does need to increase the hidden nodes to improve the forgetting capability for sudden drift change type. To make sure the convergence to the expected learning model, we proposed the rank value of the pseudo inverse autocorrelation hidden nodes matrix as evaluation parameter to prevent \u2019under-fitting\u2019 condition that makes the accuracy performance dropped.\nWe can consider the AOS-ELM as another type of ELM ensemble formation using shared and interconnected hidden nodes between ensemble members. We can implement the AOS-ELM in similar fashion compared to the ELM ensemble for adaptive learning scheme, but with better performance, simpler and more resource efficient. However, the AOS-ELM does have some drawbacks. Any hidden node changes could impact all notions.\n23/26"}], "references": [{"title": "Just-in-time classifiers for recurrent concepts", "author": ["C. Alippi", "G. Boracchi", "M. Roveri"], "venue": "Neural Networks and Learning Systems, IEEE Transactions on, 24(4):620\u2013634, April", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2013}, {"title": "Rule extraction from support vector machines: A review", "author": ["N.H. Barakat", "A.P. Bradley"], "venue": "Neurocomputing, 74(1-3):178\u2013190,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2010}, {"title": "Constructive, robust and adaptive os-elm in human action recognition", "author": ["A. Budiman", "M. Fanany", "C. Basaruddin"], "venue": "In Industrial Automation, Information and Communications Technology (IAICT), 2014 International Conference on, pages 39\u201345, Aug", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "Classification of uncertain data streams based on extreme learning machine", "author": ["K. Cao", "G. Wang", "D. Han", "J. Ning", "X. Zhang"], "venue": "Cognitive Computation, pages 1\u201311,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "A survey on feature selection methods", "author": ["G. Chandrashekar", "F. Sahin"], "venue": "Computers & Electrical Engineering, 40(1):16 \u2013 28,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2014}, {"title": "Statistical methods: The geometric approach (david j", "author": ["L.C.A. Corsten"], "venue": "saville and graham r. wood). SIAM Review, 34(3):506\u2013508,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1992}, {"title": "A Probabilistic Theory of Pattern Recognition", "author": ["L. Devroye", "L. Gy\u00f6rfi", "G. Lugosi"], "venue": "Springer,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1996}, {"title": "Ensemble methods in machine learning", "author": ["T.G. Dietterich"], "venue": "In Proceedings of the First International Workshop on Multiple Classifier Systems, MCS \u201900, pages 1\u201315, London, UK, UK,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2000}, {"title": "A review on real time data stream classification and adapting to various concept drift scenarios", "author": ["P. Dongre", "L. Malik"], "venue": "In Advance Computing Conference (IACC), 2014 IEEE International, pages 533\u2013537, Feb", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2014}, {"title": "Adaptive concept drift detection", "author": ["A. Dries", "U. R\u00fcckert"], "venue": "Statistical Analysis and Data Mining, 2(5-6):311\u2013327, Dec.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2009}, {"title": "A survey on concept drift adaptation", "author": ["J. a. Gama", "I. \u017dliobait\u0117", "A. Bifet", "M. Pechenizkiy", "A. Bouchachia"], "venue": "ACM Comput. Surv.,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}, {"title": "A general framework for mining concept-drifting data streams with skewed distributions", "author": ["J. Gao", "W. Fan", "J. Han", "P.S. Yu"], "venue": "In In Proc. SDM\u201907,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2007}, {"title": "Loan", "author": ["G.H. Golub", "C.F. Va"], "venue": "Matrix Computations (3rd Ed.). Johns Hopkins University Press, Baltimore, MD, USA,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1996}, {"title": "Introduction to Probability", "author": ["C.M. Grinstead", "J.L. Snell"], "venue": "AMS,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2003}, {"title": "A robust online sequential extreme learning machine", "author": ["M.-T.T. Hoang", "H.T. Huynh", "N.H. Vo", "Y. Won"], "venue": "In Proceedings of the 4th International Symposium on Neural Networks: Advances in Neural Networks, pages 1077\u20131086, Berlin, Heidelberg,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2007}, {"title": "Trends in extreme learning machines: A review", "author": ["G. Huang", "G.-B. Huang", "S. Song", "K. You"], "venue": "Neural Networks, 61(0):32 \u2013 48,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2015}, {"title": "An insight into extreme learning machines: Random neurons, random features and kernels", "author": ["G.-B. Huang"], "venue": "Cognitive Computation, 6(3),", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2014}, {"title": "What are extreme learning machines? filling the gap between frank rosenblatt\u2019s dream and john von neumann\u2019s puzzle", "author": ["G.-B. Huang"], "venue": "Cognitive Computation, 7:263\u2013278, June", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2015}, {"title": "Extreme learning machine for regression and multiclass classification", "author": ["G.-B. Huang", "H. Zhou", "X. Ding", "R. Zhang"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics, Part B, 42(2):513\u2013529,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}, {"title": "Extreme learning machine: theory and applications", "author": ["G.-B. Huang", "Q.Y. Zhu", "C.K. Siew"], "venue": "Neurocomputing, 70(1-3):489\u2013501,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2006}, {"title": "Extreme learning machine based supervised subspace learning", "author": ["A. Iosifidis"], "venue": "Neurocomputing, 167:158 \u2013 164,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2015}, {"title": "Dynamic weighted majority: An ensemble method for drifting concepts", "author": ["J.Z. Kolter", "M.A. Maloof"], "venue": "J. Mach. Learn. Res., 8:2755\u20132790, Dec.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2007}, {"title": "Classifier ensembles for changing environments", "author": ["L. Kuncheva"], "venue": "In Multiple Classifier Systems, volume 3077 of Lecture Notes in Computer Science, pages 1\u201315. Springer Berlin Heidelberg,", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2004}, {"title": "Classifier ensembles for detecting concept change in streaming data: Overview and perspectives", "author": ["L.I. Kuncheva"], "venue": "In 2nd Workshop SUEMA 2008 (ECAI 2008), pages 5\u201310,", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2008}, {"title": "A constructive enhancement for online sequential extreme learning machine", "author": ["Y. Lan", "Y.C. Soh", "G.-B. Huang"], "venue": "In Neural Networks, 2009. IJCNN 2009. International Joint Conference on, pages 1708\u20131713, June", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2009}, {"title": "and C", "author": ["Y. LeCu"], "venue": "Cortes. MNIST handwritten digit database,", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2010}, {"title": "A fast and accurate online sequential learning algorithm for feedforward networks", "author": ["N.-Y. Liang", "G.-B. Huang", "P. Saratchandran", "N. Sundararajan"], "venue": "Neural Networks, IEEE Transactions on, 17(6):1411\u20131423, Nov", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2006}, {"title": "Trainable classifier-fusion schemes: An application to pedestrian detection", "author": ["O. Ludwig", "D. Delgado", "V. Goncalves", "U. Nunes"], "venue": "In Intelligent Transportation Systems, 2009. ITSC \u201909. 12th International IEEE Conference on, pages 1\u20136, Oct", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2009}, {"title": "Weighted online sequential extreme learning machine for class imbalance learning", "author": ["B. Mirza", "Z. Lin", "K.-A. Toh"], "venue": "Neural Processing Letters, 38(3):465\u2013486,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2013}, {"title": "Adaptive classifiers-ensemble system for tracking concept drift", "author": ["K. Nishida", "K. Yamauchi"], "venue": "In Machine Learning and Cybernetics, 2007 International Conference on, volume 6, pages 3607\u20133612, Aug", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2007}, {"title": "A survey on transfer learning", "author": ["S.J. Pan", "Q. Yang"], "venue": "IEEE Transactions on Knowledge and Data Engineering, 22(10):1345\u20131359,", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2010}, {"title": "Geometric Approach to Support Vector Machines Learning for Large Datasets", "author": ["R. Strack"], "venue": "PhD thesis, Richmond, VA, USA,", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2013}, {"title": "A streaming ensemble algorithm (sea) for large-scale classification", "author": ["W.N. Street", "Y. Kim"], "venue": "pages 377\u2013382. ACM,", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2001}, {"title": "Online and adaptive pseudoinverse solutions for {ELM} weights", "author": ["A. van Schaik", "J. Tapson"], "venue": null, "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2015}, {"title": "Article: Survey on intrusion detection system using machine learning techniques", "author": ["S.K. Wagh", "V.K. Pachghare", "S.R. Kolhe"], "venue": "International Journal of Computer Applications, 78(16):30\u201337, September", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2013}, {"title": "Transfer learning beyond text classification", "author": ["Q. Yang"], "venue": "In Proceedings of the 1st Asian Conference on Machine Learning: Advances in Machine Learning, ACML \u201909, pages 10\u201322, Berlin, Heidelberg,", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2009}, {"title": "Denoising laplacian multi-layer extreme learning machine", "author": ["N. Zhang", "S. Ding", "Z. Shi"], "venue": "Neurocomputing, 171:1066 \u2013 1074,", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2016}, {"title": "Stacked extreme learning machines", "author": ["H. Zhou", "G.-B. Huang", "Z. Lin", "H. Wang", "Y.C. Soh"], "venue": "Cybernetics, IEEE Transactions on, 45(9):2013\u20132025,", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2015}, {"title": "Learning under Concept Drift: an Overview", "author": ["I. Zliobaite"], "venue": "Computing Research Repository, abs/1010.4,", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 10, "context": "This challenging issue is known as concept drift [12], in which the statistical properties of the input attributes and target classes shifted over time.", "startOffset": 49, "endOffset": 53}, {"referenceID": 8, "context": "The combined decision of many single classifiers (mainly using ensemble members diversification) is more accurate than single classifier [9].", "startOffset": 137, "endOffset": 140}, {"referenceID": 19, "context": "[21] [20] [18], [17] [19].", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "[21] [20] [18], [17] [19].", "startOffset": 5, "endOffset": 9}, {"referenceID": 16, "context": "[21] [20] [18], [17] [19].", "startOffset": 10, "endOffset": 14}, {"referenceID": 15, "context": "[21] [20] [18], [17] [19].", "startOffset": 16, "endOffset": 20}, {"referenceID": 17, "context": "[21] [20] [18], [17] [19].", "startOffset": 21, "endOffset": 25}, {"referenceID": 26, "context": "In this paper, we focused on the learning adaptation method as an enhancement to Online Sequential Extreme Learning Machine (OS-ELM) [28] and Constructive Enhancement OS-ELM (CEOS-ELM) [26].", "startOffset": 133, "endOffset": 137}, {"referenceID": 24, "context": "In this paper, we focused on the learning adaptation method as an enhancement to Online Sequential Extreme Learning Machine (OS-ELM) [28] and Constructive Enhancement OS-ELM (CEOS-ELM) [26].", "startOffset": 185, "endOffset": 189}, {"referenceID": 23, "context": "The AOS-ELM has capability to handle multiple concept drift problems either changes in the number of attributes (virtual drift/VD) or the number of target classes (real drift/RD) or both at the same time (hybrid drift/HD), also for recurrent context (all concepts occur alternately) or sudden drift (new concept substitutes previous concepts) [25].", "startOffset": 343, "endOffset": 347}, {"referenceID": 7, "context": "Our scope of attribute changes discussed in this paper is on the feature space concatenation that widely used in data fusion, kernel fusion, and ensemble learning [8] and not on the feature selection (irrelevant features removal) methods [5].", "startOffset": 163, "endOffset": 166}, {"referenceID": 4, "context": "Our scope of attribute changes discussed in this paper is on the feature space concatenation that widely used in data fusion, kernel fusion, and ensemble learning [8] and not on the feature selection (irrelevant features removal) methods [5].", "startOffset": 238, "endOffset": 241}, {"referenceID": 2, "context": "A preliminary version of RD and its early results appeared in conference proceedings [3].", "startOffset": 85, "endOffset": 88}, {"referenceID": 15, "context": "Unlike ensemble systems [17,41] that need to manage the complex combination of a vast number of classifiers, we pursue a single classifier for simple implementation while retaining comparable performance for handling multiple (consecutive) drifts.", "startOffset": 24, "endOffset": 31}, {"referenceID": 38, "context": "Unlike ensemble systems [17,41] that need to manage the complex combination of a vast number of classifiers, we pursue a single classifier for simple implementation while retaining comparable performance for handling multiple (consecutive) drifts.", "startOffset": 24, "endOffset": 31}, {"referenceID": 30, "context": "Transfer learning focuses on extracting the knowledge from one or more source task domains and applies the knowledge to a different target task domain [32].", "startOffset": 151, "endOffset": 155}, {"referenceID": 35, "context": "ing is not associated with time and requires the entire training and testing data set [38].", "startOffset": 86, "endOffset": 90}, {"referenceID": 25, "context": "In this paper, we discussed the transfer learning on numeric handwritten MNIST [27] to alpha-numeric handwritten USPS [33] recognition.", "startOffset": 79, "endOffset": 83}, {"referenceID": 32, "context": "The artificial data sets are streaming ensemble algorithm (SEA) [35] and STAGGER [23], which are commonly used as benchmark in sequential learning.", "startOffset": 64, "endOffset": 68}, {"referenceID": 21, "context": "The artificial data sets are streaming ensemble algorithm (SEA) [35] and STAGGER [23], which are commonly used as benchmark in sequential learning.", "startOffset": 81, "endOffset": 85}, {"referenceID": 25, "context": "The real data sets are handwritten recognition data: MNIST for numeric [27] and USPS for alpha-numeric classes [33].", "startOffset": 71, "endOffset": 75}, {"referenceID": 10, "context": "[12] explained many concept drift methods have been developed, but the terminologies are not well established.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "Other terms are concept shift or conditional change [13].", "startOffset": 52, "endOffset": 56}, {"referenceID": 11, "context": "Other terms are feature change [13], temporary drift, or sampling shift.", "startOffset": 31, "endOffset": 35}, {"referenceID": 38, "context": "Popular concept drift handling methods are indicated by ellipses [41].", "startOffset": 65, "endOffset": 69}, {"referenceID": 22, "context": "Kuncheva [24,25] explained the various configuration patterns of data sources over time as random noise, random trends (gradual changes), random substitutions (abrupt or sudden changes), and systematic trends (recurring context).", "startOffset": 9, "endOffset": 16}, {"referenceID": 23, "context": "Kuncheva [24,25] explained the various configuration patterns of data sources over time as random noise, random trends (gradual changes), random substitutions (abrupt or sudden changes), and systematic trends (recurring context).", "startOffset": 9, "endOffset": 16}, {"referenceID": 38, "context": "\u017dliobait\u0117 [41] proposed a taxonomy of concept drift tackling methods as shown in Fig.", "startOffset": 10, "endOffset": 14}, {"referenceID": 38, "context": "\u017dliobait\u0117 [41] explained that most attention on the concept drift tackling methods are drawn to multi-classifier model selection and fusion rules, but little attention on the model construction of base classifier.", "startOffset": 10, "endOffset": 14}, {"referenceID": 10, "context": "[12] proposed a complete online adaptive learning scheme that organized four modules: memory, change detection, learning, and loss estimation (See Fig.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "[12].", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "Huang [18] explained the term \u2019Extreme\u2019 meant to move beyond conventional artificial neural network learning that required iterative tuning.", "startOffset": 6, "endOffset": 10}, {"referenceID": 2, "context": "Based on [3], Liang et.", "startOffset": 9, "endOffset": 12}, {"referenceID": 26, "context": "[28] proposed online learning for ELM named OS-ELM.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "CEOS-ELM [26] has addressed this problem by adding hidden nodes in the sequential", "startOffset": 9, "endOffset": 13}, {"referenceID": 15, "context": "To the best of our knowledge, no previous single base ELM approach specifically addresses many concept drifts learning [17].", "startOffset": 119, "endOffset": 123}, {"referenceID": 3, "context": "However, some papers [4, 36] already discussed how the ELM implementation in adaptive environment.", "startOffset": 21, "endOffset": 28}, {"referenceID": 33, "context": "However, some papers [4, 36] already discussed how the ELM implementation in adaptive environment.", "startOffset": 21, "endOffset": 28}, {"referenceID": 33, "context": "[36] proposed Online Pseudo Inverse Update Method (OPIUM).", "startOffset": 0, "endOffset": 4}, {"referenceID": 3, "context": "[4] proposed two-phase classification algorithm: First, weighted ensemble classifier based on ELM (WEC-ELM) algorithm, which can dynamically adjust classifier", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "Learning is the process of constructing function \u03b2\u0302 to map between observation and its nature called (class) [7].", "startOffset": 109, "endOffset": 112}, {"referenceID": 6, "context": "According to [7], the empirical squared error minimization is consistent under general conditions.", "startOffset": 13, "endOffset": 16}, {"referenceID": 13, "context": "Based on Law of Large Numbers (LLN) theorem [15] and Theorem 2.", "startOffset": 44, "endOffset": 48}, {"referenceID": 10, "context": "The Concept drift refers to an online supervised learning model when the relation between the input data and the target variable changes over time [12].", "startOffset": 147, "endOffset": 151}, {"referenceID": 5, "context": "Our transition space idea was inspired by geometric approach for solving many problems in the fields of pattern recognition and machine learning [6, 34].", "startOffset": 145, "endOffset": 152}, {"referenceID": 31, "context": "Our transition space idea was inspired by geometric approach for solving many problems in the fields of pattern recognition and machine learning [6, 34].", "startOffset": 145, "endOffset": 152}, {"referenceID": 15, "context": "[17] explained interpolation theory from ELM point of view as stated by the following description:", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "2 and Learning Principle I of ELM Theory [18], the input weight and bias as hidden nodes H parameters are independent of training samples and their learning environment through randomization.", "startOffset": 41, "endOffset": 45}, {"referenceID": 15, "context": "[17] explained universal approximation capability of ELM as described by the following theorem:", "startOffset": 0, "endOffset": 4}, {"referenceID": 2, "context": "3 and inspired by the related works [3, 26], we devised the AOS-ELM real drift capability by modifying the output matrix with zero block matrix concatenation to change the size dimension of the matrix without changing the value.", "startOffset": 36, "endOffset": 43}, {"referenceID": 24, "context": "3 and inspired by the related works [3, 26], we devised the AOS-ELM real drift capability by modifying the output matrix with zero block matrix concatenation to change the size dimension of the matrix without changing the value.", "startOffset": 36, "endOffset": 43}, {"referenceID": 20, "context": "According to [22], the target values \u2208 {0, 1} is equivalent with \u2208 {\u22121, 1}.", "startOffset": 13, "endOffset": 17}, {"referenceID": 0, "context": "Algorithm 1 Algorithm OSELMSeq {OS-ELM Sequential } Require: X(k) \u2208 [\u22121, 1]Rd\u00d7N , T(k) \u2208 [0, 1]RN\u00d7m, A(k), bL, K(k\u22121), \u03b2(k\u22121) Ensure: \u03b2(k),K(k) 1: Compute H(k) = g(A(k) \u00b7X(k) + bL) 2: if IncreaseHiddenNodes == true then 3: \u2206Ad\u00d7\u03b4L = RandomNumbers([\u22121, 1] ,Rd\u00d7\u03b4L) 4: \u2206b\u03b4L = RandomNumbers([\u22121, 1] ,R) 5: A(k) = [ A(k)\u2206Ad\u00d7\u03b4L ]", "startOffset": 89, "endOffset": 95}, {"referenceID": 32, "context": "SEA [35] and STAGGER [23] (See Table 2a).", "startOffset": 4, "endOffset": 8}, {"referenceID": 21, "context": "SEA [35] and STAGGER [23] (See Table 2a).", "startOffset": 21, "endOffset": 25}, {"referenceID": 22, "context": "The expected result is the classifier has good performance for the newest concept [24].", "startOffset": 82, "endOffset": 86}, {"referenceID": 25, "context": "We tested our algorithm with real-world public data sets from MNIST numeric (0 to 9) [27] and the USPS alphanumeric (A to Z, 0 to 9) handwritten dataset [33].", "startOffset": 85, "endOffset": 89}, {"referenceID": 27, "context": "We used original grey-level image attributes [Xgrey] of MNIST data set and the combination of [Xgrey] with additional attributes from the 9x9 bins histogram of orientated gradients (XHOG) of grey-level image features [29].", "startOffset": 217, "endOffset": 221}, {"referenceID": 14, "context": "We designed the initial input weights and bias based on robust OS-ELM with regularization scalar c (ROS) [16] and then based on initial random from the normal distribution (NORM).", "startOffset": 105, "endOffset": 109}, {"referenceID": 9, "context": "al [10].", "startOffset": 3, "endOffset": 7}, {"referenceID": 9, "context": "al [10].", "startOffset": 3, "endOffset": 7}, {"referenceID": 22, "context": "The performance expectation of sequential version classifier is to approximate the offline version of the classifier (desiderata for online classifiers [24]).", "startOffset": 152, "endOffset": 156}, {"referenceID": 21, "context": "SEA - X - OS-ELM, CEOS-ELM, Kolter [23]", "startOffset": 35, "endOffset": 39}, {"referenceID": 21, "context": "STAGGER - X - OS-ELM, CEOS-ELM, Kolter [23]", "startOffset": 39, "endOffset": 43}, {"referenceID": 21, "context": "Predictive Accuracy The accuracy measurement of the future sequential training data [23].", "startOffset": 84, "endOffset": 88}, {"referenceID": 21, "context": "Comparison with inducing decision trees (DWM-ITI) for STAGGER [23], AOS-ELM outperformed DWM.", "startOffset": 62, "endOffset": 66}, {"referenceID": 0, "context": "Using similar method on [1, 31], we can", "startOffset": 24, "endOffset": 31}, {"referenceID": 29, "context": "Using similar method on [1, 31], we can", "startOffset": 24, "endOffset": 31}, {"referenceID": 15, "context": "Some studies [17,21] suggested for hidden node size to be equal at least to the rank value of training data.", "startOffset": 13, "endOffset": 20}, {"referenceID": 19, "context": "Some studies [17,21] suggested for hidden node size to be equal at least to the rank value of training data.", "startOffset": 13, "endOffset": 20}, {"referenceID": 24, "context": "Thus, we have a requirement to increase \u03b4L in sequential stage [26].", "startOffset": 63, "endOffset": 67}, {"referenceID": 12, "context": "poor training data or poor learning parameter selection may cause the diagonal squared matrix P has less diagonalizable [14], thus not full rank anymore.", "startOffset": 120, "endOffset": 124}, {"referenceID": 34, "context": "Some machine learning methods have been applied with the hope of improving detection rates and adaptive capability [37].", "startOffset": 115, "endOffset": 119}, {"referenceID": 33, "context": ", Greville\u2019s method [36]).", "startOffset": 20, "endOffset": 24}, {"referenceID": 28, "context": ", Weighted OS-ELM for imbalanced learning [30], ELM Autoencoder (ELM-AE) [39], Stacked ELM [40], etc.", "startOffset": 42, "endOffset": 46}, {"referenceID": 36, "context": ", Weighted OS-ELM for imbalanced learning [30], ELM Autoencoder (ELM-AE) [39], Stacked ELM [40], etc.", "startOffset": 73, "endOffset": 77}, {"referenceID": 37, "context": ", Weighted OS-ELM for imbalanced learning [30], ELM Autoencoder (ELM-AE) [39], Stacked ELM [40], etc.", "startOffset": 91, "endOffset": 95}, {"referenceID": 1, "context": "\u2022 A detail systematic explanation based on rule extraction [2] for AOS-ELM in handling adaptive environment.", "startOffset": 59, "endOffset": 62}], "year": 2016, "abstractText": "A machine learning method needs to adapt to over time changes in the environment. Such changes are known as concept drift. One approach to concept drift handling is by feeding the whole training data set once again into a learning machine for retraining. Another approach is by rebuilding an ensemble classifiers to adapt to a new training data set. In either approach, retraining or rebuilding classifiers are expensive and not practical. In this paper, we propose an enhancement of Online-Sequential Extreme Learning Machine (OS-ELM) and its variant Constructive Enhancement OS-ELM (CEOS-ELM) by adding an adaptive capability for classification and regression problem. The scheme is named as Adaptive OS-ELM (AOS-ELM). It is a single classifier scheme that works well to handle real drift, virtual drift, and both drifts occurred at the same time (hybrid drift). The AOS-ELM also works well for sudden drift as well as recurrent context change type. The scheme is a simple unified method implemented in simple lines of code. We evaluated AOS-ELM on regression and classification problem by using various public dataset widely used for concept drift verification from SEA and STAGGER; and other public datasets such as MNIST and USPS. Experiments show that our method gives higher kappa value compared to the multi-classifier ELM ensemble. Even though AOS-ELM in practice does not need hidden nodes increase, we address some issues related to the increasing of the hidden nodes such as error condition and rank values. We propose to take the rank of the pseudo inverse matrix as an indicator parameter to detect \u2019under-fitting\u2019 condition. Keywords\u2014 adaptive, concept drift, extreme learning machine, online sequential.", "creator": "LaTeX with hyperref package"}}}