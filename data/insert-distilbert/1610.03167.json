{"id": "1610.03167", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Oct-2016", "title": "An Empirical Exploration of Skip Connections for Sequential Tagging", "abstract": "in finishing this paper, we empirically explore the effects result of various kinds of skip connections in stacked bidirectional lstms for sequential tagging. we investigate three kinds of skip connections connecting to standard lstm capture cells : ( a ) skip connections to the gates, ( b ) skip connections to the internal states and ( 3rd c ) skip connections to the cell outputs. we present at comprehensive experiments showing that skip connections to cell outputs outperform the remaining two. furthermore, we observe that using layered gated identity functions as skip mappings works pretty well. based instead on this novel skip connections, we successfully train deep stacked bidirectional lstm communication models and obtain state - of - the - art results favorably on ccg supertagging and comparable results on pos tagging.", "histories": [["v1", "Tue, 11 Oct 2016 03:02:38 GMT  (159kb)", "http://arxiv.org/abs/1610.03167v1", "Accepted at COLING 2016"]], "COMMENTS": "Accepted at COLING 2016", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["huijia wu", "jiajun zhang", "chengqing zong"], "accepted": false, "id": "1610.03167"}, "pdf": {"name": "1610.03167.pdf", "metadata": {"source": "CRF", "title": "An Empirical Exploration of Skip Connections for Sequential Tagging", "authors": ["Huijia Wu", "Jiajun Zhang", "Chengqing Zong"], "emails": ["huijia.wu@nlpr.ia.ac.cn", "jjzhang@nlpr.ia.ac.cn", "cqzong@nlpr.ia.ac.cn"], "sections": [{"heading": null, "text": "ar X\niv :1\n61 0.\n03 16\n7v 1\n[ cs\n.C L\n] 1\n1 O\nct 2\n01 6\nIn this paper, we empirically explore the effects of various kinds of skip connections in stacked bidirectional LSTMs for sequential tagging. We investigate three kinds of skip connections connecting to LSTM cells: (a) skip connections to the gates, (b) skip connections to the internal states and (c) skip connections to the cell outputs. We present comprehensive experiments showing that skip connections to cell outputs outperform the remaining two. Furthermore, we observe that using gated identity functions as skip mappings works pretty well. Based on this novel skip connections, we successfully train deep stacked bidirectional LSTM models and obtain state-ofthe-art results on CCG supertagging and comparable results on POS tagging."}, {"heading": "1 Introduction", "text": "In natural language processing, sequential tagging mainly refers to the tasks of assigning discrete labels to each token in a sequence. Typical examples include part-of-speech (POS) tagging and combinatory category grammar (CCG) supertagging. A regular feature of sequential tagging is that the input tokens in a sequence cannot be assumed to be independent since the same token in different contexts can be assigned to different tags. Therefore, the classifier should have memories to remember the contexts to make a correct prediction.\nBidirectional LSTMs (Graves and Schmidhuber, 2005) become dominant in sequential tagging problems due to the superior performance (Wang et al., 2015; Vaswani et al., 2016; Lample et al., 2016). The horizontal hierarchy of LSTMs with bidirectional processing can remember the long-range dependencies without affecting the short-term storage. Although the models have a deep horizontal hierarchy (the depth is the same as the sequence length), the vertical hierarchy is often shallow, which may not be efficient at representing each token. Stacked LSTMs are deep in both directions, but become harder to train due to the feed-forward structure of stacked layers.\nSkip connections (or shortcut connections) enable unimpeded information flow by adding direct connections across different layers (Raiko et al., 2012; Graves, 2013; Hermans and Schrauwen, 2013). However, there is a lack of exploration and analyzing various kinds of skip connections in stacked LSTMs. There are two issues to handle skip connections in stacked LSTMs: One is where to add the skip connections, the other is what kind of skip connections should be used to pass the information. To answer the first question, we empirically analyze three positions of LSTM blocks to receive the previous layer\u2019s output. For the second one, we present an identity mapping to receive the previous layer\u2019s outputs. Furthermore, following the gate design of LSTM (Hochreiter and Schmidhuber, 1997; Gers et al., 2000) and highway networks (Srivastava et al., 2015a; Srivastava et al., 2015b), we observe that adding a multiplicative gate to the identity function will help to improve performance.\nIn this paper, we present a neural architecture for sequential tagging. The input of the network are token representations. We concatenate word embeddings to character embeddings to represent the word and morphemes. A deep stacked bidirectional LSTM with well-designed skip connections is then used\nThis work is licensed under a Creative Commons Attribution 4.0 International License. License details: http://creativecommons.org/licenses/by/4.0/\nto extract the features needed for classification from the inputs. The output layer uses softmax function to output the tag distribution for each token.\nOur main contribution is that we empirically evaluated the effects of various kinds of skip connections within stacked LSTMs. We present comprehensive experiments on the supertagging task showing that skip connections to the cell outputs using identity function multiplied with an exclusive gate can help to improve the network performance. Our model is evaluated on two sequential tagging tasks, obtaining state-of-the-art results on CCG supertagging and comparable results on POS tagging."}, {"heading": "2 Related Work", "text": "Skip connections have been widely used for training deep neural networks. For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper.\nThe works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al. (2015), Zhang et al. (2016), and Zilly et al. (2016). These works are all based on the design of extra connections between different layers. Srivastava et al. (2015b) and He et al. (2015) mainly focus on feed-forward neural network, using well-designed skip connections across different layers to make the information pass more easily. The Grid LSTM proposed by Kalchbrenner et al. (2015) extends the one dimensional LSTMs to many dimensional LSTMs, which provides a more general framework to construct deep LSTMs.\nYao et al. (2015) and Zhang et al. (2016) propose highway LSTMs by introducing gated direct connections between internal states in adjacent layers and do not use skip connections, while we propose gated skip connections across cell outputs. Zilly et al. (2016) introduce recurrent highway networks (RHN) which use a single recurrent layer to make RNN deep in a vertical direction, in contrast to our stacked models."}, {"heading": "3 Recurrent Neural Networks for Sequential Tagging", "text": "Consider a recurrent neural network applied to sequential tagging: Given a sequence x = (x1, . . . , xT ), the RNN computes the hidden state h = (h1, . . . , hT ) and the output y = (y1, . . . , yT ) by iterating the following equations:\nht = f(xt, ht\u22121; \u03b8h) (1)\nyt = g(ht; \u03b8o) (2)\nwhere t \u2208 {1, . . . , T} represents the time. xt represents the input at time t, ht\u22121 and ht are the previous and the current hidden state, respectively. f and g are the transition function and the output function, respectively. \u03b8h and \u03b8o are network parameters.\nWe use a negative log-likelihood cost to evaluate the performance, which can be written as:\nC = \u2212 1\nN\nN \u2211\nn=1\nlog ytn (3)\nwhere tn \u2208 N is the true target for sample n, and ytn is the t-th output in the softmax layer given the inputs xn.\nThe core idea of Long Short-Term Memory networks is to replace (1) with the following equation:\nct = f(xt, ht\u22121) + ct\u22121 (4)\nwhere ct is the internal state of the memory cell, which is designed to store the information for much longer time. Besides this, LSTM uses gates to avoid weight update conflicts.\nStandard LSTMs process sequences in temporal order, which will ignore future context. Bidirectional LSTMs solve this problem by combining both the forward and the backward processing of the input sequences using two separate recurrent hidden layers:\n\u2212\u2192 ht = LSTM( \u2212\u2192xt , \u2212\u2212\u2192 ht\u22121, \u2212\u2212\u2192ct\u22121) (5) \u2190\u2212 ht = LSTM( \u2190\u2212xt , \u2190\u2212\u2212 ht\u22121, \u2190\u2212\u2212ct\u22121) (6) yt = g( \u2212\u2192 ht , \u2190\u2212 ht) (7)\nwhere LSTM(\u00b7) is the LSTM computation. \u2212\u2192xt and \u2190\u2212xt are the forward and the backward input sequence, respectively. The output of the two hidden layers \u2212\u2192 ht and \u2190\u2212 ht in a birectional LSTM are connected to the output layer. Stacked RNN is one type of deep RNNs, which refers to the hidden layers are stacked on top of each other, each feeding up to the layer above:\nhlt = f l(hl\u22121t , h l t\u22121) (8)\nwhere hlt is the t-th hidden state of the l-th layer."}, {"heading": "4 Various kinds of Skip Connections", "text": "Skip connections in simple RNNs are trivial since there is only one position to connect to the hidden units. But for stacked LSTMs, the skip connections need to be carefully treated to train the network successfully. In this section, we analyze and compare various types of skip connections. At first, we give a detailed definition of stacked LSTMs, which can help us to describe skip connections. Then we start our construction of skip connections in stacked LSTMs. At last, we formulate various kinds of skip connections.\nStacked LSTMs without skip connections can be defined as: \n   ilt f lt olt slt\n\n   =\n\n   sigm sigm sigm tanh\n\n  \nW l ( hl\u22121t hlt\u22121 )\nclt = f l t \u2299 c l t\u22121 + i l t \u2299 s l t hlt = o l t \u2299 tanh(c l t)\n(9)\nDuring forward pass, LSTM needs to calculate clt and h l t, which is the cell\u2019s internal state and the cell outputs state, respectively. To get clt, s l t needs to be computed to store the current input. Then this result is multiplied by the input gate ilt, which decides when to keep or override information in memory cell c l t. The cell is designed to store the previous information clt\u22121, which can be reset by a forget gate f l t . The new cell state is then obtained by adding the result to the current input. The cell outputs hlt are computed by multiplying the activated cell state by the output gate olt, which learns when to access memory cell and when to block it. \u201csigm\u201d and \u201ctanh\u201d are the sigmoid and tanh activation function, respectively. W l \u2208 R4n\u00d72n is the weight matrix needs to be learned.\nThe hidden units in stacked LSTMs have two forms. One is the hidden units in the same layer {hlt, t \u2208 1, . . . , T}, which are connected through an LSTM. The other is the hidden units at the same time step {hlt, l \u2208 1, . . . , L}, which are connected through a feed-forward network. LSTM can keep the short-term memory for a long time, thus the error signals can be easily passed through {1, . . . , T}. However, when the number of stacked layers is large, the feed-forward network will suffer the gradient vanishing/exploding problems, which make the gradients hard to pass through {1, . . . , L}.\nThe core idea of LSTM is to use an identity function to make the constant error carrosel. He et al. (2015) also use an identity mapping to train a very deep convolution neural network with improved performance. All these inspired us to use an identity function for the skip connections. Rather, the gates of LSTM are essential parts to avoid weight update conflicts, which are also invoked by skip connections. Following highway gating, we use a gate multiplied with identity mapping to avoid the conflicts.\nSkip connections are cross-layer connections, which means that the output of layer l\u22122 is not only connected to the layer l\u22121, but also connected to layer l. For stacked LSTMs, hl\u22122t can be connected to the gates, the internal states, and the cell outputs in layer l\u2019s LSTM blocks. We formalize these below:\nSkip connections to the gates. We can connect hl\u22122t to the gates through an identity mapping: \n   ilt f lt olt slt\n\n   =\n\n   sigm sigm sigm tanh\n\n   ( W l I l )\n\n hl\u22121t hlt\u22121 hl\u22122t   (10)\nwhere I l \u2208 R4n\u00d7n is the identity mapping.\nSkip connections to the internal states. Another kind of skip connections is to connect hl\u22122t to the cell\u2019s internal state clt:\nclt = f l t \u2299 c l t\u22121 + i l t \u2299 s l t + h l\u22122 t (11) hlt = o l t \u2299 tanh(c l t) (12)\nSkip connections to the cell outputs. We can also connect hl\u22122t to cell outputs:\nclt = f l t \u2299 c l t\u22121 + i l t \u2299 s l t (13) hlt = o l t \u2299 tanh(c l t) + h l\u22122 t (14)\nSkip connections using gates. Consider the case of skip connections to the cell outputs. The cell outputs grow linearly during the presentation of network depth, which makes the hlt\u2019s derivative vanish and hard to convergence. Inspired by the introduction of LSTM gates, we add a gate to control the skip connections through retrieving or blocking them:\n\n     ilt f lt olt glt slt\n\n     =\n\n     sigm sigm sigm sigm tanh\n\n     W l ( hl\u22121t hlt\u22121 )\nclt = f l t \u2299 c l t\u22121 + i l t \u2299 s l t hlt = o l t \u2299 tanh(c l t) + g l t \u2299 h l\u22122 t\n(15)\nwhere glt is the gate which can be used to access the skipped output h l\u22122 t or block it. When g l t equals 0, no skipped output can be passed through skip connections, which is equivalent to traditional stacked LSTMs. Otherwise, it behaves like a feed-forward LSTM using gated identity connections. Here we omit the case of adding gates to skip connections to the internal state, which is similar to the above case.\nSkip connections in bidirectional LSTM. Using skip connections in bidirectional LSTM is similar to the one used in LSTM, with a bidirectional processing:\n\u2212\u2192 clt = \u2212\u2192 f \u2299 \u2212\u2212\u2192 clt\u22121 + \u2212\u2192 i \u2299 \u2212\u2192 slt \u2212\u2192 hlt = \u2212\u2192o \u2299 tanh( \u2212\u2192 clt ) + \u2212\u2192g \u2299 \u2212\u2212\u2192 hl\u22122t\n\u2190\u2212 clt = \u2190\u2212 f \u2299 \u2190\u2212\u2212 clt\u22121 + \u2190\u2212 i \u2299 \u2190\u2212 slt \u2190\u2212 hlt = \u2190\u2212o \u2299 tanh( \u2190\u2212 clt ) + \u2190\u2212g \u2299 \u2190\u2212\u2212 hl\u22122t\n(16)"}, {"heading": "5 Neural Architecture for Sequential Tagging", "text": "Sequential tagging can be formulated as P (t|w; \u03b8), where w = [w1, . . . , wT ] indicates the T words in a sentence, and t = [t1, . . . , tT ] indicates the corresponding T tags. In this section we introduce an neural architecture for P (\u00b7), which includes an input layer, a stacked hidden layers and an output layer. Since the stacked hidden layers have already been introduced, we only introduce the input and the output layer here."}, {"heading": "5.1 Network Inputs", "text": "Network inputs are the representation of each token in a sequence. There are many kinds of token representations, such as using a single word embedding, using a local window approach, or a combination of word and character-level representation. Here our inputs contain the concatenation of word representations, character representations, and capitalization representations.\nWord representations. All words in the vocabulary share a common look-up table, which is initialized with random initializations or pre-trained embeddings. Each word in a sentence can be mapped to an embedding vector wt. The whole sentence is then represented by a matrix with columns vector [w1, w2, . . . , wT ]. We use a context window of size d surrounding with a word wt to get its context information. Following Wu et al. (2016), we add logistic gates to each token in the context window. The word representation is computed as wt = [rt\u2212\u230ad/2\u230bwt\u2212\u230ad/2\u230b; . . . ; rt+\u230ad/2\u230bwt+\u230ad/2\u230b], where rt := [rt\u2212\u230ad/2\u230b, . . . , rt+\u230ad/2\u230b] \u2208 R\nd is a logistic gate to filter the unnecessary contexts, wt\u2212\u230ad/2\u230b, . . . , wt+\u230ad/2\u230b is the word embeddings in the local window.\nCharacter representations. Prefix and suffix information about words are important features in sequential tagging. Inspired by Fonseca et al. (2015) et al, which uses a character prefix and suffix with length from 1 to 5 for part-of-speech tagging, we concatenate character embeddings in a word to get the character-level representation. Concretely, given a word w consisting of a sequence of characters [c1, c2, . . . , clw ], where lw is the length of the word and L(\u00b7) is the look-up table for characters. We concatenate the leftmost most 5 character embeddings L(c1), . . . , L(c5) with its rightmost 5 character embeddings L(clw\u22124), . . . , L(clw). When a word is less than five characters, we pad the remaining characters with the same special symbol.\nCapitalization representations. We lowercase the words to decrease the size of word vocabulary to reduce sparsity, but we need an extra capitalization embeddings to store the capitalization features, which represent whether or not a word is capitalized."}, {"heading": "5.2 Network Outputs", "text": "For sequential tagging, we use a softmax activation function g(\u00b7) in the output layer:\nyt = g(W hy[ \u2212\u2192 ht ; \u2190\u2212 ht ]) (17)\nwhere yt is a probability distribution over all possible tags. yk(t) = exp(hk)\u2211 k\u2032 exp(h k\u2032 ) is the k-th dimension of yt, which corresponds to the k-th tags in the tag set. W hy is the hidden-to-output weight."}, {"heading": "6 Experiments", "text": ""}, {"heading": "6.1 Combinatory Category Grammar Supertagging", "text": "Combinatory Category Grammar (CCG) supertagging is a sequential tagging problem in natural language processing. The task is to assign supertags to each word in a sentence. In CCG the supertags stand for the lexical categories, which are composed of the basic categories such as N , NP and PP , and complex categories, which are the combination of the basic categories based on a set of rules. Detailed explanations of CCG refers to (Steedman, 2000; Steedman and Baldridge, 2011).\nThe training set of this task only contains 39604 sentences, which is too small to train a deep model, and may cause over-parametrization. But we choose it since it has been already proved that a bidirectional recurrent net fits the task by many authors (Lewis et al., 2016; Vaswani et al., 2016)."}, {"heading": "6.1.1 Dataset and Pre-processing", "text": "Our experiments are performed on CCGBank (Hockenmaier and Steedman, 2007), which is a translation from Penn Treebank (Marcus et al., 1993) to CCG with a coverage 99.4%. We follow the standard splits, using sections 02-21 for training, section 00 for development and section 23 for the test. We use a full category set containing 1285 tags. All digits are mapped into the same digit \u20189\u2019, and all words are lowercased."}, {"heading": "6.1.2 Network Configuration", "text": "Initialization. There are two types of weights in our experiments: recurrent and non-recurrent weights. For non-recurrent weights, we initialize word embeddings with the pre-trained 200-dimensional GolVe vectors (Pennington et al., 2014). Other weights are initialized with the Gaussian distribution\nN (0, 1\u221a fan-in ) scaled by a factor of 0.1, where fan-in is the number of units in the input layer. For recurrent weight matrices, following Saxe et al. (2013) we initialize with random orthogonal matrices through SVD to avoid unstable gradients. Orthogonal initialization for recurrent weights is important in our experiments, which takes about 2% relative performance enhancement than other methods such as Xavier initialization (Glorot and Bengio, 2010).\nHyperparameters. For the word representations, we use a small window size of 3 for the convolutional layer. The dimension of the word representation after the convolutional operation is 600. The size of character embedding and capitalization embeddings are set to 5. The number of cells of the stacked bidirectional LSTM is set to 512. We also tried 400 cells or 600 cells and found this number did not impact performance so much. All stacked hidden layers have the same number of cells. The output layer has 1286 neurons, which equals to the number of tags in the training set with a RARE symbol.\nTraining. We train the networks using the back-propagation algorithm, using stochastic gradient descent (SGD) algorithm with an equal learning rate 0.02 for all layers. We also tried other optimization methods, such as momentum (Plaut and others, 1986), Adadelta (Zeiler, 2012), or Adam (Kingma and Ba, 2014), but none of them perform as well as SGD. Gradient clipping is not used. We use on-line learning in our experiments, which means the parameters will be updated on every training sequences, one at a time. We trained the 7-layer network for roughly 2 to 3 days on one NVIDIA TITAN X GPU using Theano 1 (Team et al., 2016).\nRegularization. Dropout (Srivastava et al., 2014) is the only regularizer in our model to avoid overfitting. Other regularization methods such as weight decay and batch normalization do not work in our experiments. We add a binary dropout mask to the local context windows on the embedding layer, with a drop rate p of 0.25. We also apply dropout to the output of the first hidden layer and the last hidden layer, with a 0.5 drop rate. At test time, weights are scaled with a factor 1\u2212 p."}, {"heading": "6.1.3 Results", "text": "Table 1 shows the comparisons with other models for supertagging. The comparisons do not include any externally labeled data and POS labels. We use stacked bidirectional LSTMs with gated skip connections for the comparisons, and report the highest 1-best supertagging accuracy on the development set for final testing. Our model presents state-of-the-art results compared to the existing systems. The character-level information (+ 3% relative accuracy) and dropout (+ 8% relative accuracy) are necessary to improve the performance.\n1http://deeplearning.net/software/theano/"}, {"heading": "6.1.4 Experiments on Skip Connections", "text": "We experiment with a 7-layer model on CCGbank to compare different kinds of skip connections introduced in Section 4. Our analysis mainly focuses on the identity function and the gating mechanism. The comparisons (Table 2) are summarized as follows:\nNo skip connections. When the number of stacked layers is large, the performance will degrade without skip connections. The accuracy in a 7-layer stacked model without skip connections is 93.94% (Table 2), which is lower than the one using skip connections.\nVarious kinds of skip connections. We experiment with the gated identity connections between internal states introduced in Zhang et al.(2016), but the network performs not good (Table 2, 93.14%). We also implement the method proposed in Zilly et al. (2016), which we use a single bidirectional RNH layer with a recurrent depth of 3 with a slightly modification2. Skip connections to the cell outputs with identity function and multiplicative gating achieves the highest accuracy (Table 2, 94.51%) on the development set. We also observe that skip to the internal states without gate get a slightly better performance (Table 2, 94.33%) than the one with gate (94.24%) on the development set. Here we recommend to set the forget bias to 0 to get a better development accuracy.\nIdentity mapping. We use the sigmoid function to the previous outputs to break the identity link, in which we replace gt \u2299 h l\u22121 t in Eq. (15) with gt \u2299 \u03c3(h l\u22121 t ), where \u03c3(x) = 1 1+e\u2212x . The result of the sigmoid function is 94.02% (Table 2), which is poor than the identity function. We can infer that the identity function is more suitable than other scaled functions such as sigmoid or tanh to transmit information.\nExclusive gating. Following the gating mechanism adopted in highway networks, we consider adding a gate gt to make a flexible control to the skip connections. Our gating function is glt = \u03c3(W lgh l t\u22121 + U l gh l\u22122 t ). Gated identity connections are essential to achieving state-of-the-art result on CCGbank."}, {"heading": "6.1.5 Experiments on Number of Layers", "text": "Table 3 compares the effect of the depth in the stacked models. We can observe that the performance is getting better with the increased number of layers. But when the number of layers exceeds 9, the performance will be hurt. In the experiments, we found that the number of stacked layers between 7 and 9 are the best choice using skip connections. Notice that we do not use layer-wise pretraining\n2Our original implementation of Zilly et a. (2016) with a recurrent depth of 3 fails to converge. The reason might be due to the explosion of stL under addition. To avoid this, we replace s t L with ot \u2217 tanh(s t L) in the last recurrent step.\n(Bengio et al., 2007; Simonyan and Zisserman, 2014), which is an important technique in training deep networks. Further improvements might be obtained with this method to build a deeper network with improved performance."}, {"heading": "3 94.21 94.35", "text": ""}, {"heading": "5 94.51 94.57", "text": ""}, {"heading": "7 94.51 94.67", "text": ""}, {"heading": "6.2 Part-of-speech Tagging", "text": "Part-of-speech tagging is another sequential tagging task, which is to assign POS tags to each word in a sentence. It is very similar to the supertagging task. Therefore, these two tasks can be solved in a unified architecture. For POS tagging, we use the same network configurations as supertagging, except the word vocabulary size and the tag set size. We conduct experiments on the Wall Street Journal of the Penn Treebank dataset, adopting the standard splits (sections 0-18 for the train, sections 19-21 for validation and sections 22-24 for testing).\nAlthough the POS tagging result presented in Table 4 is slightly below the state-of-the-art, we neither do any parameter tunings nor change the network architectures, just use the one getting the best development accuracy on the supertagging task. This proves the generalization of the model and avoids heavy work of model re-designing."}, {"heading": "7 Conclusions", "text": "This paper investigates various kinds of skip connections in stacked bidirectional LSTM models. We present a deep stacked network (7 or 9 layers) that can be easily trained and get improved accuracy on CCG supertagging and POS tagging. Our experiments show that skip connections to the cell outputs with the gated identity function performs the best. Our explorations could easily be applied to other sequential processing problems, which can be modelled with RNN architectures."}, {"heading": "Acknowledgements", "text": "The research work has been funded by the Natural Science Foundation of China under Grant No. 61333018. We thank the anonymous reviewers for their useful comments that greatly improved the manuscript."}], "references": [{"title": "Greedy layer-wise training of deep networks. Advances in neural information processing", "author": ["Yoshua Bengio", "Pascal Lamblin", "Dan Popovici", "Hugo Larochelle"], "venue": null, "citeRegEx": "Bengio et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2007}, {"title": "Wide-coverage efficient statistical parsing with ccg and log-linear models", "author": ["Stephen Clark", "James R Curran."], "venue": "Computational Linguistics, 33(4):493\u2013552.", "citeRegEx": "Clark and Curran.,? 2007", "shortCiteRegEx": "Clark and Curran.", "year": 2007}, {"title": "Hierarchical recurrent neural networks for long-term dependencies", "author": ["Salah El Hihi", "Yoshua Bengio."], "venue": "NIPS, volume 400, page 409. Citeseer.", "citeRegEx": "Hihi and Bengio.,? 1995", "shortCiteRegEx": "Hihi and Bengio.", "year": 1995}, {"title": "Evaluating word embeddings and a revised corpus for part-of-speech tagging in portuguese", "author": ["Erick R Fonseca", "Jo\u00e3o Lu\u0131\u0301s G Rosa", "Sandra Maria Alu\u0131\u0301sio"], "venue": "Journal of the Brazilian Computer Society,", "citeRegEx": "Fonseca et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Fonseca et al\\.", "year": 2015}, {"title": "Learning to forget: Continual prediction with lstm", "author": ["Felix A Gers", "J\u00fcrgen Schmidhuber", "Fred Cummins."], "venue": "Neural computation, 12(10):2451\u20132471.", "citeRegEx": "Gers et al\\.,? 2000", "shortCiteRegEx": "Gers et al\\.", "year": 2000}, {"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["Xavier Glorot", "Yoshua Bengio."], "venue": "Aistats, volume 9, pages 249\u2013256.", "citeRegEx": "Glorot and Bengio.,? 2010", "shortCiteRegEx": "Glorot and Bengio.", "year": 2010}, {"title": "Framewise phoneme classification with bidirectional lstm and other neural network architectures", "author": ["Alex Graves", "J\u00fcrgen Schmidhuber."], "venue": "Neural Networks, 18(5):602\u2013610.", "citeRegEx": "Graves and Schmidhuber.,? 2005", "shortCiteRegEx": "Graves and Schmidhuber.", "year": 2005}, {"title": "Generating sequences with recurrent neural networks", "author": ["Alex Graves."], "venue": "arXiv preprint arXiv:1308.0850.", "citeRegEx": "Graves.,? 2013", "shortCiteRegEx": "Graves.", "year": 2013}, {"title": "Deep residual learning for image recognition", "author": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun."], "venue": "arXiv preprint arXiv:1512.03385.", "citeRegEx": "He et al\\.,? 2015", "shortCiteRegEx": "He et al\\.", "year": 2015}, {"title": "Training and analysing deep recurrent neural networks", "author": ["Michiel Hermans", "Benjamin Schrauwen."], "venue": "Advances in Neural Information Processing Systems, pages 190\u2013198.", "citeRegEx": "Hermans and Schrauwen.,? 2013", "shortCiteRegEx": "Hermans and Schrauwen.", "year": 2013}, {"title": "Lstm can solve hard long time lag problems", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber."], "venue": "Advances in neural information processing systems, pages 473\u2013479.", "citeRegEx": "Hochreiter and Schmidhuber.,? 1997", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "Ccgbank: a corpus of CCG derivations and dependency structures extracted from the penn treebank", "author": ["Julia Hockenmaier", "Mark Steedman."], "venue": "Computational Linguistics, 33(3):355\u2013396.", "citeRegEx": "Hockenmaier and Steedman.,? 2007", "shortCiteRegEx": "Hockenmaier and Steedman.", "year": 2007}, {"title": "Grid long short-term memory", "author": ["Nal Kalchbrenner", "Ivo Danihelka", "Alex Graves."], "venue": "arXiv preprint arXiv:1507.01526.", "citeRegEx": "Kalchbrenner et al\\.,? 2015", "shortCiteRegEx": "Kalchbrenner et al\\.", "year": 2015}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba."], "venue": "arXiv preprint arXiv:1412.6980.", "citeRegEx": "Kingma and Ba.,? 2014", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "Neural architectures for named entity recognition", "author": ["Guillaume Lample", "Miguel Ballesteros", "Sandeep Subramanian", "Kazuya Kawakami", "Chris Dyer."], "venue": "arXiv preprint arXiv:1603.01360.", "citeRegEx": "Lample et al\\.,? 2016", "shortCiteRegEx": "Lample et al\\.", "year": 2016}, {"title": "Improved CCG parsing with semi-supervised supertagging", "author": ["Mike Lewis", "Mark Steedman."], "venue": "Transactions of the Association for Computational Linguistics, 2:327\u2013338.", "citeRegEx": "Lewis and Steedman.,? 2014", "shortCiteRegEx": "Lewis and Steedman.", "year": 2014}, {"title": "Lstm ccg parsing", "author": ["Mike Lewis", "Kenton Lee", "Luke Zettlemoyer."], "venue": "Proceedings of the 15th Annual Conference of the North American Chapter of the Association for Computational Linguistics.", "citeRegEx": "Lewis et al\\.,? 2016", "shortCiteRegEx": "Lewis et al\\.", "year": 2016}, {"title": "Finding function in form: Compositional character models for open vocabulary word representation. arXiv preprint arXiv:1508.02096", "author": ["Wang Ling", "Tiago Lu\u0131\u0301s", "Lu\u0131\u0301s Marujo", "Ram\u00f3n Fernandez Astudillo", "Silvio Amir", "Chris Dyer", "Alan W Black", "Isabel Trancoso"], "venue": null, "citeRegEx": "Ling et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ling et al\\.", "year": 2015}, {"title": "Building a large annotated corpus of english: The penn treebank", "author": ["Mitchell P Marcus", "Mary Ann Marcinkiewicz", "Beatrice Santorini."], "venue": "Computational linguistics, 19(2):313\u2013330.", "citeRegEx": "Marcus et al\\.,? 1993", "shortCiteRegEx": "Marcus et al\\.", "year": 1993}, {"title": "Glove: Global vectors for word representation", "author": ["Jeffrey Pennington", "Richard Socher", "Christopher D Manning."], "venue": "EMNLP, volume 14, pages 1532\u201343.", "citeRegEx": "Pennington et al\\.,? 2014", "shortCiteRegEx": "Pennington et al\\.", "year": 2014}, {"title": "Experiments on learning by back propagation", "author": ["David C Plaut"], "venue": null, "citeRegEx": "Plaut,? \\Q1986\\E", "shortCiteRegEx": "Plaut", "year": 1986}, {"title": "Deep learning made easier by linear transformations in perceptrons", "author": ["Tapani Raiko", "Harri Valpola", "Yann LeCun."], "venue": "AISTATS, volume 22, pages 924\u2013932.", "citeRegEx": "Raiko et al\\.,? 2012", "shortCiteRegEx": "Raiko et al\\.", "year": 2012}, {"title": "Exact solutions to the nonlinear dynamics of learning in deep linear neural networks", "author": ["Andrew M Saxe", "James L McClelland", "Surya Ganguli."], "venue": "arXiv preprint arXiv:1312.6120.", "citeRegEx": "Saxe et al\\.,? 2013", "shortCiteRegEx": "Saxe et al\\.", "year": 2013}, {"title": "Learning complex, extended sequences using the principle of history compression", "author": ["J\u00fcrgen Schmidhuber."], "venue": "Neural Computation, 4(2):234\u2013242.", "citeRegEx": "Schmidhuber.,? 1992", "shortCiteRegEx": "Schmidhuber.", "year": 1992}, {"title": "Very deep convolutional networks for large-scale image recognition", "author": ["Karen Simonyan", "Andrew Zisserman."], "venue": "arXiv preprint arXiv:1409.1556.", "citeRegEx": "Simonyan and Zisserman.,? 2014", "shortCiteRegEx": "Simonyan and Zisserman.", "year": 2014}, {"title": "Semisupervised condensed nearest neighbor for part-of-speech tagging", "author": ["Anders S\u00f8gaard."], "venue": "Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies: short papers-Volume 2, pages 48\u201352. Association for Computational Linguistics.", "citeRegEx": "S\u00f8gaard.,? 2011", "shortCiteRegEx": "S\u00f8gaard.", "year": 2011}, {"title": "Dropout: A simple way to prevent neural networks from overfitting", "author": ["Nitish Srivastava", "Geoffrey Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov."], "venue": "The Journal of Machine Learning Research, 15(1):1929\u20131958.", "citeRegEx": "Srivastava et al\\.,? 2014", "shortCiteRegEx": "Srivastava et al\\.", "year": 2014}, {"title": "Training very deep networks", "author": ["Rupesh K Srivastava", "Klaus Greff", "J\u00fcrgen Schmidhuber."], "venue": "Advances in neural information processing systems, pages 2377\u20132385.", "citeRegEx": "Srivastava et al\\.,? 2015a", "shortCiteRegEx": "Srivastava et al\\.", "year": 2015}, {"title": "Highway networks", "author": ["Rupesh Kumar Srivastava", "Klaus Greff", "J\u00fcrgen Schmidhuber."], "venue": "arXiv preprint arXiv:1505.00387.", "citeRegEx": "Srivastava et al\\.,? 2015b", "shortCiteRegEx": "Srivastava et al\\.", "year": 2015}, {"title": "Combinatory categorial grammar", "author": ["Mark Steedman", "Jason Baldridge."], "venue": "Non-Transformational Syntax: Formal and Explicit Models of Grammar. Wiley-Blackwell.", "citeRegEx": "Steedman and Baldridge.,? 2011", "shortCiteRegEx": "Steedman and Baldridge.", "year": 2011}, {"title": "The syntactic process, volume 24", "author": ["Mark Steedman."], "venue": "MIT Press.", "citeRegEx": "Steedman.,? 2000", "shortCiteRegEx": "Steedman.", "year": 2000}, {"title": "Theano: A python framework for fast computation of mathematical expressions", "author": ["Theano Development Team", "Rami Alrfou", "Guillaume Alain", "Amjad Almahairi", "Christof Angermueller", "Dzmitry Bahdanau", "Nicolas Ballas", "Frdric Bastien", "Justin Bayer", "Anatoly Belikov"], "venue": null, "citeRegEx": "Team et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Team et al\\.", "year": 2016}, {"title": "Supertagging with lstms", "author": ["Ashish Vaswani", "Yonatan Bisk", "Kenji Sagae", "Ryan Musa."], "venue": "Proceedings of the Human Language Technology Conference of the NAACL.", "citeRegEx": "Vaswani et al\\.,? 2016", "shortCiteRegEx": "Vaswani et al\\.", "year": 2016}, {"title": "Part-of-speech tagging with bidirectional long short-term memory recurrent neural network", "author": ["Peilu Wang", "Yao Qian", "Frank K Soong", "Lei He", "Hai Zhao."], "venue": "arXiv preprint arXiv:1510.06168.", "citeRegEx": "Wang et al\\.,? 2015", "shortCiteRegEx": "Wang et al\\.", "year": 2015}, {"title": "A dynamic window neural network for ccg supertagging", "author": ["Huijia Wu", "Jiajun Zhang", "Chengqing Zong."], "venue": "arXiv preprint arXiv:1610.02749.", "citeRegEx": "Wu et al\\.,? 2016", "shortCiteRegEx": "Wu et al\\.", "year": 2016}, {"title": "CCG supertagging with a recurrent neural network", "author": ["Wenduan Xu", "Michael Auli", "Stephen Clark."], "venue": "Volume 2: Short Papers, page 250.", "citeRegEx": "Xu et al\\.,? 2015", "shortCiteRegEx": "Xu et al\\.", "year": 2015}, {"title": "Expected f-measure training for shift-reduce parsing with recurrent neural networks", "author": ["Wenduan Xu", "Michael Auli", "Stephen Clark."], "venue": "Proceedings of NAACL-HLT, pages 210\u2013220.", "citeRegEx": "Xu et al\\.,? 2016", "shortCiteRegEx": "Xu et al\\.", "year": 2016}, {"title": "Depth-gated lstm", "author": ["Kaisheng Yao", "Trevor Cohn", "Katerina Vylomova", "Kevin Duh", "Chris Dyer."], "venue": "Presented at Jelinek Summer Workshop on August, volume 14, page 1.", "citeRegEx": "Yao et al\\.,? 2015", "shortCiteRegEx": "Yao et al\\.", "year": 2015}, {"title": "Adadelta: an adaptive learning rate method", "author": ["Matthew D Zeiler."], "venue": "arXiv preprint arXiv:1212.5701.", "citeRegEx": "Zeiler.,? 2012", "shortCiteRegEx": "Zeiler.", "year": 2012}, {"title": "Highway long short-term memory rnns for distant speech recognition", "author": ["Yu Zhang", "Guoguo Chen", "Dong Yu", "Kaisheng Yaco", "Sanjeev Khudanpur", "James Glass."], "venue": "2016 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), pages 5755\u20135759. IEEE.", "citeRegEx": "Zhang et al\\.,? 2016", "shortCiteRegEx": "Zhang et al\\.", "year": 2016}, {"title": "Recurrent highway networks. arXiv preprint arXiv:1607.03474", "author": ["Julian Georg Zilly", "Rupesh Kumar Srivastava", "Jan Koutn\u0131\u0301k", "J\u00fcrgen Schmidhuber"], "venue": null, "citeRegEx": "Zilly et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Zilly et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 6, "context": "Bidirectional LSTMs (Graves and Schmidhuber, 2005) become dominant in sequential tagging problems due to the superior performance (Wang et al.", "startOffset": 20, "endOffset": 50}, {"referenceID": 33, "context": "Bidirectional LSTMs (Graves and Schmidhuber, 2005) become dominant in sequential tagging problems due to the superior performance (Wang et al., 2015; Vaswani et al., 2016; Lample et al., 2016).", "startOffset": 130, "endOffset": 192}, {"referenceID": 32, "context": "Bidirectional LSTMs (Graves and Schmidhuber, 2005) become dominant in sequential tagging problems due to the superior performance (Wang et al., 2015; Vaswani et al., 2016; Lample et al., 2016).", "startOffset": 130, "endOffset": 192}, {"referenceID": 14, "context": "Bidirectional LSTMs (Graves and Schmidhuber, 2005) become dominant in sequential tagging problems due to the superior performance (Wang et al., 2015; Vaswani et al., 2016; Lample et al., 2016).", "startOffset": 130, "endOffset": 192}, {"referenceID": 21, "context": "Skip connections (or shortcut connections) enable unimpeded information flow by adding direct connections across different layers (Raiko et al., 2012; Graves, 2013; Hermans and Schrauwen, 2013).", "startOffset": 130, "endOffset": 193}, {"referenceID": 7, "context": "Skip connections (or shortcut connections) enable unimpeded information flow by adding direct connections across different layers (Raiko et al., 2012; Graves, 2013; Hermans and Schrauwen, 2013).", "startOffset": 130, "endOffset": 193}, {"referenceID": 9, "context": "Skip connections (or shortcut connections) enable unimpeded information flow by adding direct connections across different layers (Raiko et al., 2012; Graves, 2013; Hermans and Schrauwen, 2013).", "startOffset": 130, "endOffset": 193}, {"referenceID": 10, "context": "Furthermore, following the gate design of LSTM (Hochreiter and Schmidhuber, 1997; Gers et al., 2000) and highway networks (Srivastava et al.", "startOffset": 47, "endOffset": 100}, {"referenceID": 4, "context": "Furthermore, following the gate design of LSTM (Hochreiter and Schmidhuber, 1997; Gers et al., 2000) and highway networks (Srivastava et al.", "startOffset": 47, "endOffset": 100}, {"referenceID": 27, "context": ", 2000) and highway networks (Srivastava et al., 2015a; Srivastava et al., 2015b), we observe that adding a multiplicative gate to the identity function will help to improve performance.", "startOffset": 29, "endOffset": 81}, {"referenceID": 28, "context": ", 2000) and highway networks (Srivastava et al., 2015a; Srivastava et al., 2015b), we observe that adding a multiplicative gate to the identity function will help to improve performance.", "startOffset": 29, "endOffset": 81}, {"referenceID": 17, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other.", "startOffset": 31, "endOffset": 50}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other.", "startOffset": 54, "endOffset": 77}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs.", "startOffset": 54, "endOffset": 166}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs.", "startOffset": 54, "endOffset": 181}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs.", "startOffset": 54, "endOffset": 211}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al.", "startOffset": 54, "endOffset": 468}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al.", "startOffset": 54, "endOffset": 486}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al.", "startOffset": 54, "endOffset": 514}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al. (2015), Zhang et al.", "startOffset": 54, "endOffset": 533}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al. (2015), Zhang et al. (2016), and Zilly et al.", "startOffset": 54, "endOffset": 554}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al. (2015), Zhang et al. (2016), and Zilly et al. (2016). These works are all based on the design of extra connections between different layers.", "startOffset": 54, "endOffset": 579}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al. (2015), Zhang et al. (2016), and Zilly et al. (2016). These works are all based on the design of extra connections between different layers. Srivastava et al. (2015b) and He et al.", "startOffset": 54, "endOffset": 693}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al. (2015), Zhang et al. (2016), and Zilly et al. (2016). These works are all based on the design of extra connections between different layers. Srivastava et al. (2015b) and He et al. (2015) mainly focus on feed-forward neural network, using well-designed skip connections across different layers to make the information pass more easily.", "startOffset": 54, "endOffset": 714}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al. (2015), Zhang et al. (2016), and Zilly et al. (2016). These works are all based on the design of extra connections between different layers. Srivastava et al. (2015b) and He et al. (2015) mainly focus on feed-forward neural network, using well-designed skip connections across different layers to make the information pass more easily. The Grid LSTM proposed by Kalchbrenner et al. (2015) extends the one dimensional LSTMs to many dimensional LSTMs, which provides a more general framework to construct deep LSTMs.", "startOffset": 54, "endOffset": 915}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al. (2015), Zhang et al. (2016), and Zilly et al. (2016). These works are all based on the design of extra connections between different layers. Srivastava et al. (2015b) and He et al. (2015) mainly focus on feed-forward neural network, using well-designed skip connections across different layers to make the information pass more easily. The Grid LSTM proposed by Kalchbrenner et al. (2015) extends the one dimensional LSTMs to many dimensional LSTMs, which provides a more general framework to construct deep LSTMs. Yao et al. (2015) and Zhang et al.", "startOffset": 54, "endOffset": 1059}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al. (2015), Zhang et al. (2016), and Zilly et al. (2016). These works are all based on the design of extra connections between different layers. Srivastava et al. (2015b) and He et al. (2015) mainly focus on feed-forward neural network, using well-designed skip connections across different layers to make the information pass more easily. The Grid LSTM proposed by Kalchbrenner et al. (2015) extends the one dimensional LSTMs to many dimensional LSTMs, which provides a more general framework to construct deep LSTMs. Yao et al. (2015) and Zhang et al. (2016) propose highway LSTMs by introducing gated direct connections between internal states in adjacent layers and do not use skip connections, while we propose gated skip connections across cell outputs.", "startOffset": 54, "endOffset": 1083}, {"referenceID": 2, "context": "For recurrent neural networks, Schmidhuber (1992); El Hihi and Bengio (1995) introduced deep RNNs by stacking hidden layers on top of each other. Raiko et al. (2012); Graves (2013); Hermans and Schrauwen (2013) proposed the use of skip connections in stacked RNNs. However, the researchers have paid less attention to the analyzing of various kinds of skip connections, which is our focus in this paper. The works closely related to ours are Srivastava et al. (2015b), He et al. (2015), Kalchbrenner et al. (2015), Yao et al. (2015), Zhang et al. (2016), and Zilly et al. (2016). These works are all based on the design of extra connections between different layers. Srivastava et al. (2015b) and He et al. (2015) mainly focus on feed-forward neural network, using well-designed skip connections across different layers to make the information pass more easily. The Grid LSTM proposed by Kalchbrenner et al. (2015) extends the one dimensional LSTMs to many dimensional LSTMs, which provides a more general framework to construct deep LSTMs. Yao et al. (2015) and Zhang et al. (2016) propose highway LSTMs by introducing gated direct connections between internal states in adjacent layers and do not use skip connections, while we propose gated skip connections across cell outputs. Zilly et al. (2016) introduce recurrent highway networks (RHN) which use a single recurrent layer to make RNN deep in a vertical direction, in contrast to our stacked models.", "startOffset": 54, "endOffset": 1302}, {"referenceID": 8, "context": "He et al. (2015) also use an identity mapping to train a very deep convolution neural network with improved performance.", "startOffset": 0, "endOffset": 17}, {"referenceID": 33, "context": "Following Wu et al. (2016), we add logistic gates to each token in the context window.", "startOffset": 10, "endOffset": 27}, {"referenceID": 3, "context": "Inspired by Fonseca et al. (2015) et al, which uses a character prefix and suffix with length from 1 to 5 for part-of-speech tagging, we concatenate character embeddings in a word to get the character-level representation.", "startOffset": 12, "endOffset": 34}, {"referenceID": 30, "context": "Detailed explanations of CCG refers to (Steedman, 2000; Steedman and Baldridge, 2011).", "startOffset": 39, "endOffset": 85}, {"referenceID": 29, "context": "Detailed explanations of CCG refers to (Steedman, 2000; Steedman and Baldridge, 2011).", "startOffset": 39, "endOffset": 85}, {"referenceID": 16, "context": "But we choose it since it has been already proved that a bidirectional recurrent net fits the task by many authors (Lewis et al., 2016; Vaswani et al., 2016).", "startOffset": 115, "endOffset": 157}, {"referenceID": 32, "context": "But we choose it since it has been already proved that a bidirectional recurrent net fits the task by many authors (Lewis et al., 2016; Vaswani et al., 2016).", "startOffset": 115, "endOffset": 157}, {"referenceID": 11, "context": "1 Dataset and Pre-processing Our experiments are performed on CCGBank (Hockenmaier and Steedman, 2007), which is a translation from Penn Treebank (Marcus et al.", "startOffset": 70, "endOffset": 102}, {"referenceID": 18, "context": "1 Dataset and Pre-processing Our experiments are performed on CCGBank (Hockenmaier and Steedman, 2007), which is a translation from Penn Treebank (Marcus et al., 1993) to CCG with a coverage 99.", "startOffset": 146, "endOffset": 167}, {"referenceID": 19, "context": "For non-recurrent weights, we initialize word embeddings with the pre-trained 200-dimensional GolVe vectors (Pennington et al., 2014).", "startOffset": 108, "endOffset": 133}, {"referenceID": 1, "context": "Model Dev Test Clark and Curran (2007) 91.", "startOffset": 15, "endOffset": 39}, {"referenceID": 1, "context": "Model Dev Test Clark and Curran (2007) 91.5 92.0 Lewis et al. (2014) 91.", "startOffset": 15, "endOffset": 69}, {"referenceID": 1, "context": "Model Dev Test Clark and Curran (2007) 91.5 92.0 Lewis et al. (2014) 91.3 91.6 Lewis et al. (2016) 94.", "startOffset": 15, "endOffset": 99}, {"referenceID": 1, "context": "Model Dev Test Clark and Curran (2007) 91.5 92.0 Lewis et al. (2014) 91.3 91.6 Lewis et al. (2016) 94.1 94.3 Xu et al. (2015) 93.", "startOffset": 15, "endOffset": 126}, {"referenceID": 1, "context": "Model Dev Test Clark and Curran (2007) 91.5 92.0 Lewis et al. (2014) 91.3 91.6 Lewis et al. (2016) 94.1 94.3 Xu et al. (2015) 93.1 93.0 Xu et al. (2016) 93.", "startOffset": 15, "endOffset": 153}, {"referenceID": 1, "context": "Model Dev Test Clark and Curran (2007) 91.5 92.0 Lewis et al. (2014) 91.3 91.6 Lewis et al. (2016) 94.1 94.3 Xu et al. (2015) 93.1 93.0 Xu et al. (2016) 93.49 93.52 Vaswani et al. (2016) 94.", "startOffset": 15, "endOffset": 187}, {"referenceID": 5, "context": "Orthogonal initialization for recurrent weights is important in our experiments, which takes about 2% relative performance enhancement than other methods such as Xavier initialization (Glorot and Bengio, 2010).", "startOffset": 184, "endOffset": 209}, {"referenceID": 21, "context": "For recurrent weight matrices, following Saxe et al. (2013) we initialize with random orthogonal matrices through SVD to avoid unstable gradients.", "startOffset": 41, "endOffset": 60}, {"referenceID": 38, "context": "We also tried other optimization methods, such as momentum (Plaut and others, 1986), Adadelta (Zeiler, 2012), or Adam (Kingma and Ba, 2014), but none of them perform as well as SGD.", "startOffset": 94, "endOffset": 108}, {"referenceID": 13, "context": "We also tried other optimization methods, such as momentum (Plaut and others, 1986), Adadelta (Zeiler, 2012), or Adam (Kingma and Ba, 2014), but none of them perform as well as SGD.", "startOffset": 118, "endOffset": 139}, {"referenceID": 31, "context": "We trained the 7-layer network for roughly 2 to 3 days on one NVIDIA TITAN X GPU using Theano 1 (Team et al., 2016).", "startOffset": 96, "endOffset": 115}, {"referenceID": 26, "context": "Dropout (Srivastava et al., 2014) is the only regularizer in our model to avoid overfitting.", "startOffset": 8, "endOffset": 33}, {"referenceID": 39, "context": "We experiment with the gated identity connections between internal states introduced in Zhang et al.(2016), but the network performs not good (Table 2, 93.", "startOffset": 88, "endOffset": 107}, {"referenceID": 39, "context": "We experiment with the gated identity connections between internal states introduced in Zhang et al.(2016), but the network performs not good (Table 2, 93.14%). We also implement the method proposed in Zilly et al. (2016), which we use a single bidirectional RNH layer with a recurrent depth of 3 with a slightly modification2.", "startOffset": 88, "endOffset": 222}, {"referenceID": 39, "context": "Case Variant Dev Test H-LSTM, Zhang et al.(2016) 93.", "startOffset": 30, "endOffset": 49}, {"referenceID": 39, "context": "Case Variant Dev Test H-LSTM, Zhang et al.(2016) 93.14 93.52 RHN, Zilly et al. (2016) L = 3, with output gates 94.", "startOffset": 30, "endOffset": 86}, {"referenceID": 0, "context": "(Bengio et al., 2007; Simonyan and Zisserman, 2014), which is an important technique in training deep networks.", "startOffset": 0, "endOffset": 51}, {"referenceID": 24, "context": "(Bengio et al., 2007; Simonyan and Zisserman, 2014), which is an important technique in training deep networks.", "startOffset": 0, "endOffset": 51}, {"referenceID": 24, "context": "Model Test S\u00f8gaard (2011) 97.", "startOffset": 11, "endOffset": 26}, {"referenceID": 17, "context": "5 Ling et al. (2015) 97.", "startOffset": 2, "endOffset": 21}, {"referenceID": 17, "context": "5 Ling et al. (2015) 97.36 Wang et al. (2015) 97.", "startOffset": 2, "endOffset": 46}, {"referenceID": 17, "context": "5 Ling et al. (2015) 97.36 Wang et al. (2015) 97.78 Vaswani et al. (2016) 97.", "startOffset": 2, "endOffset": 74}], "year": 2016, "abstractText": "In this paper, we empirically explore the effects of various kinds of skip connections in stacked bidirectional LSTMs for sequential tagging. We investigate three kinds of skip connections connecting to LSTM cells: (a) skip connections to the gates, (b) skip connections to the internal states and (c) skip connections to the cell outputs. We present comprehensive experiments showing that skip connections to cell outputs outperform the remaining two. Furthermore, we observe that using gated identity functions as skip mappings works pretty well. Based on this novel skip connections, we successfully train deep stacked bidirectional LSTM models and obtain state-ofthe-art results on CCG supertagging and comparable results on POS tagging.", "creator": "LaTeX with hyperref package"}}}