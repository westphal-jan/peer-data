{"id": "1610.03518", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Oct-2016", "title": "Transfer from Simulation to Real World through Learning Deep Inverse Dynamics Model", "abstract": "developing control policies in simulation is often more practical and safer than directly running experiments in the real world. usually this applies routinely to policies obtained from planning and optimization, and even more so to procedural policies obtained from reinforcement learning, which is often very data demanding. however, a policy that succeeds in simulation work often just doesn'x t work when deployed on a real robot. nevertheless, without often the overall gist of what the policy does in simulation remains valid in the real world. first in this paper we again investigate such settings, where the sequence of states traversed in simulation remains reasonable for the real world, even if the details of the controls that are not, - as could be avoided the case when determining the key differences thereof lie in detailed friction, contact, mass and geometry acquisition properties. during execution, at each initial time step making our approach computes basically what the simulation - based control policy would do, but then, rather than executing these controls on the real robot, our approach computes what the simulation expects determines the resulting closest next state ( s ) will be, and then relies on a learned deep inverse dynamics model to decide which real - world action is most suitable to achieve those next states. deep models are only as good as their training data, and we also independently propose an approach for data collection used to ( incrementally ) learn the deep inverse dynamics model. our experiments shows our approach compares favorably with various neural baselines that which have never been developed for dealing with simulation compared to real world model discrepancy, including output simulation error likelihood control and gaussian reverse dynamics adaptation.", "histories": [["v1", "Tue, 11 Oct 2016 20:24:31 GMT  (1151kb,D)", "http://arxiv.org/abs/1610.03518v1", null]], "reviews": [], "SUBJECTS": "cs.RO cs.AI cs.LG cs.SY", "authors": ["paul christiano", "zain shah", "igor mordatch", "jonas schneider", "trevor blackwell", "joshua tobin", "pieter abbeel", "wojciech zaremba"], "accepted": false, "id": "1610.03518"}, "pdf": {"name": "1610.03518.pdf", "metadata": {"source": "CRF", "title": "Transfer from Simulation to Real World through Learning Deep Inverse Dynamics Model", "authors": ["Paul Christiano", "Zain Shah", "Igor Mordatch", "Jonas Schneider", "Trevor Blackwell", "Joshua Tobin", "Pieter Abbeel", "Wojciech Zaremba"], "emails": [], "sections": [{"heading": null, "text": "I. INTRODUCTION\nMany methods exist for generating control policies in simulated environments, including methods based on motion planning, optimization, control, and learning. However, an important practical challenge is that often there are discrepancies between simulation and the real world, which results in policies that work well in simulation yet perform poorly in the real world.\nSignificant bodies of work exist that strive to address this challenge. One important line of work studies how to improve simulators to better match reality, which involves improving simulation of contact, non-rigidity, friction, as well as improving identification of physical quantities needed for accurate simulation such as mass, geometry, friction coefficients, elasticity. However, despite significant progress, discrepancies continue to exist, and more accurate simulation can have the downside of being slower.\nAnother important line of work studies robustness of control policies, which could be measured through, for example, gain and phase margins, and robust control methods exist that can optimize for these. Optimizing for robustness means finding control policies that apply across a wide range of\npossible real worlds, but unfortunately tends to come at the expense of performance in the one specific real world the system is faced with.\nAdaptive methods, which is the topic of this paper, do not use the same policy for the entire family of possible environments, but rather try to learn about the specific real world the system is faced with. In principle, such methods can exploit the physics of the real world and behave in the optimal way.\nConcretely, our work considers the following problem setting: We assume to be given a simulator and a method for generating policies that perform well in simulation. The goal is to leverage this to perform well in new real-world situations. To achieve this, a training period exists during which an adaptation mechanism can be trained to learn to adapt from simulation to real world by collecting experience on the real system, but without having access to the new real-world situations that the system will be evaluated on later.\nWe leverage the following intuition: Often policies found from simulation capture the high-level gist well (e.g., overall trajectory), but fail to accurately capture some of the lowerlevel details, such as friction, stiction, backlash, hysteresis, precise measurements, precise deformation, etc. Indeed, this is the type of situation that motivates the work in this paper and in which we will be evaluating our approach (as well as baselines).\nNote that while we assume that a method exists for generating policies in simulation, our approach is agnostic to the details of this method, which could be based on any techniques from motion planning, optimization, control, learning, and others, which return a policy, which could be a model-predictive policy which uses the simulator in its inner loop.\nOur approach proceeds as follows: During execution on a test trajectory, at each time step it computes what the simulation-based control policy would do, but then, rather than executing these controls on the real robot, our approach computes what the simulation expects the next state(s) will be, and then relies on a learned deep inverse dynamics model to decide which real-world action is most suitable to achieve those next states. As our experiments show, when these inverse dynamics models are trained on sufficient data, this results in compelling transfer from simulation to real world, in particular with challenging dynamics involving\nar X\niv :1\n61 0.\n03 51\n8v 1\n[ cs\n.R O\n] 1\n1 O\nct 2\n01 6\ncontact and collision. To collect the training data, there is a training phase which proceeds the same way, but only has access to a poor inverse dynamics model, and then uses the collected data to improve the model. Our experiments show that having the training data collection be similar to the test time conditions improves results significantly compared to data collection based on just applying random controls. To maximize data collection efficiency, target trajectories for training are initially short (or cut short once significantly deviating from the target).\nOur experiments validate the applicability of our approach through two families of experiments: (i) Sim1 to Sim2 Transfer: To better understand the transfer capabilities, we first study transfer from one simulation (Sim1) to another simulation (Sim2). We consider several standard tasks: Reacher, Hopper, Cheetah, Humanoid from MuJoCo / OpenAI Gym [38] [3]. For each experiment Sim2 has the same type of robot as Sim1, but the physical properties are different (change in mass, link lengths, friction coefficients, torque scale and limits). (ii) Sim to Real Transfer with Fetch: In this family of experiments we study transfer of policies that work well for a simulated Fetch robot onto a real Fetch robot. To calibrate performance, we consider as a baseline a PD controller tuned for our Fetch robot.\nWe compare our approach with output error control [24] and Gaussian Dynamics Adaptation [11], two established approaches to handle mismatch between simulation and real world."}, {"heading": "II. RELATED WORK", "text": "Simulation has been an invaluable tool in advancing the development of robotics and many simulation techniques have been developed over the years. Reduced coordinate rigid multibody dynamics are especially suited for simulating articulated robots [9]. Unfortunately, many significant physical effects may not be possible to model with such simulation approaches. Flexible or inflatable bodies [35] [13], area contact [12], interaction with fluids [34] [31] are just a few of such examples. More accurate simulators, such as those based on Finite Element Method [14] can be used to more closely match such real world effects, but they can be extremely computationally intensive (requiring days to compute seconds of simulation) and furthermore can be numerically ill-conditioned, which makes them difficult to use within numerical trajectory or policy optimization methods. Our method allows the use of simple, high-performance, and numerically smooth rigid body simulators (we use MuJoCo [38]) for policy or trajectory optimization, while still being able to adapt to complex effects present in the real world.\nEven if a simulator were capable of modeling all the physical effects of interest, it would still require detailed and accurate model parameters (such as mass distributions, material properties, etc.). A significant body of research has focused on identifying these parameters from observations of robots\u2019 behavior in the real world, but tend to require separate specialized identification approaches and models for different robot platforms, such as legged robots [23], helicopters [26],\nor fixed-wing UAVs [18]. Furthermore, individual physical effects also require specialized expert-designed models and parameter identification methods, such as motor backlash [17], hydraulic actuation [6], series elastic actuation [30], or pneumatic actuation [36]. Our learned deep inverse dynamics models are based on past histories of observed states and in principle have the ability to model the above effects and platforms in one simple unified method without requiring any domain-specific manual model design and identification.\nTo remove the need for explicit dynamics, learning of dynamics models has received much attention in recent years. A number of approaches learn forward dynamics models - functions mapping current state and action to a next state [24] [32]. Such functions can then be used to solve for actions that lead to desired next state. Alternatively, inverse dynamics models learn a mapping from current and next state to an action that achieves the transition between the two [29], [4], [25]. Such models are appealing because their output can be directly used for control, and is the model type we use in this work. The data for model learning is typically gathered in a batch fashion, either from random trajectories, or from representative demonstrations. This can be problematic if the robot state trajectories resulting from policy execution do not match the model training trajectories. An alternative is to learn dynamics models in an on-line fashion, constantly adapting the model based on an incoming stream of observed states and actions [11] [28] [43] [22]. These approaches however are slow to adapt to rapidly-changing dynamics modes (such as those arising when making or breaking contact) and may be problematic when applied on robots performing rapid motions. Another alternative is to iteratively intertwine data collection and dynamics model learning [7] [10]. Such approaches concentrate training data in the regions of the state space that are relevant for task completion and inspire the data collection procedure in our work.\nA number of options are available for representation of learned dynamics functions, from linear functions [28] [43], to Gaussian processes [2] [19] [7], to deep neural networks [32] [11]. Linear functions are very efficient to evaluate and solve controls for, but have limited expressive power. Gaussian Processes are able to provide model uncertainty estimates, but are problematic to scale to large dataset sizes. Deep neural networks are an expressive class of functions independent of dataset size and are what we use in this work.\nOur approach to transfer between simulator and the real world is based on adapting actions. There is a rich body of work focusing on adapting policies, rather than actions in the context of reinforcement learning [37] [1] [5]. Another alternative is to consider robust control methods in simulation that produce policies that are robust to mismatch between simulator and the real world [44] [27]. In addition to actions, adaptation of states and observations between simulation and the real world is another challenging problem [41] [16] [40] [8]. In the current work, we choose to focus solely on adaptation of actions and leave other types of adaptation for future work.\nIII. METHOD"}, {"heading": "A. Setting", "text": "We study transfer from a source environment to a target environment. Typically the source environment would be a simulator, and the target environment would be a physical robot. However, in order to validate our method we start by having simulator both in the source and in the target domain. This setup has merit in developing an experimental understanding of our approach, as we can control the degree of variation between source and target environments. Our final experiments are in transfer from a simulator to the physical robot.\nFor each environment we denote the state space by S, the action space by A and the observation space by O. Points s \u2208 S, a \u2208 A, o \u2208 O are states, actions, and observations. The state is not assumed observed. Overloading notation slightly, the agent makes noisy and incomplete observations of the underlying system, o = o(s) \u2208 O, which typically don\u2019t expose some latent factors (e.g., fluctuating temperature or motor backlash). The special situation where the state is observed is readily captured by having the observation function o(s) = s. The system forward dynamics are given by a function from state-action pair to a new state: T (s, a) = s\u2032.\nWe use subscripts to explicitly distinguish between the source environment and the target environment. For example, Asource denotes the action space in the source environment, and Atarget denotes the action space in the target environment.\nA trajectory \u03c4 is a sequence of observations and actions: (o1, a1, o2, a2, . . . ). We write \u03c4H:H+k to refer to the subsequence (oH , aH , . . . , oH+k\u22121, aH+k\u22121, oH+k). We write \u03c4\u2212k: to refer to the most recent k observations and k \u2212 1 actions in a trajectory, and \u03c4\u22121 to refer to the most recent observation.\nA policy \u03c0 is a mapping from observations to actions, that depends on the last k observations, prescribing a = \u03c0(\u03c4\u2212k:). Our goal is to find a policy \u03c0target that performs well in the\ntarget environment. Rather than learning a policy for the target environment from scratch, we assume that we have access to a competent policy \u03c0source in the source environment. Such policy could be obtained through any of a variety of methods, including motion planning, model-predictive or optimization-based control, reinforcement learning, etc. Our approach is agnostic to how the policy \u03c0source was obtained."}, {"heading": "B. Transfer to the target environment", "text": "Rather than directly executing \u03c0source in the target environment, we seek to transfer the high-level properties of \u03c0source to be re-used in the target environment, but not its lower-level specifics. Our approach is illustrated in Figure 1. During execution, we repeat the following at every time instant: consider the recent history of observations \u03c4\u2212k:, compute the action asource = \u03c0source(\u03c4\u2212k:) which our source policy prescribes for the source environment. Simulate what observation o\u0302next = o(Tsource(\u03c4\u2212k:, asource)) would be attained at the next time step in the source environment, and then compute atarget = \u03c6(\u03c4\u2212k:, o\u0302next). \u03c6 is a learned inverse dynamics model for the target environment, which takes in the recent history of actions and observations, as well as the desired next observations, and produces the action in the target domain that leads as close as possible to the desired observation o\u0302next.\nPutting this all together, we have:\n\u03c0target(\u03c4\u2212k:) = \u03c6(\u03c4\u2212k:, o(Tsource(\u03c4\u2212k:, \u03c0source(\u03c4\u2212k:)))).\nTo be able to execute this approach, we assume that the simulator provides a forward dynamics model Tsource that allows us to compute a reasonable estimate of the next state s\u2032 and observation o(s\u2032).\nIf the learned inverse dynamics model is sufficiently accurate, then the next observation otarget after taking action \u03c0target(\u03c4\u2212k:) will be similar to o\u0302next.\nFor this approach to be meaningful, it is assumed that source and target environments have the same actuated degrees of freedom. However, the actions taken by policies\n\u03c0source and \u03c0target may be very different from each other. For example, the actuators may be calibrated differently, or realistic actuators may have complex dynamics like fluctuating temperature or gear backlash, which are not modeled in simulation. The dimensionality of the action space may even be different, for example when the target domain actions may be over biarticular pairs of antagonistic cables or muscle tendons, as in [21]. We have such flexibility in our method because the actions generated by the policy \u03c0source are never directly used in the target space, but only through mediation of the simulator and the anticipated next observation."}, {"heading": "C. Training of the inverse dynamics model", "text": "We propose to collect trajectories in the physical environment, and to train a neural network that represents the inverse dynamics model, i.e., that can (approximately) predict the action that will lead to the next observation. For a snippet of a trajectory: \u03c4H:H+k and next observation oH+k+1, we train a neural network \u03c6 to predict the preceding action aH+k:\n\u03c6 : (oH , aH , oH+1, . . . , ak+H\u22121, ok+H , ok+H+1) 7\u2192 ak+H\nWe incorporate history in our model and pick the history window parameter H to be large enough that \u03c6 can (implicitly) infer any important latent factors or temporal dependencies present in the dynamics."}, {"heading": "D. Data collection / Exploration", "text": "At each point during training we have a preliminary inverse dynamics model \u03c6, which we can use to implement a preliminary policy \u03c0target. In order to collect training data for our model, we execute this preliminary policy \u03c0target. We add noise to the prescribed actions for exploration, i.e., in order to ensure that we have sufficiently diverse training data. Adding too much noise will result in data collected too far from the target trajectories, adding too little noise will result in insufficient exploration and the inverse dynamics model will improve very slowly. In our experiments we describe our noise settings. We found it helpful to not add noise at every time step. Adding noise too frequently steers the data collection too far away from the relevant parts of the space for the task at hand. In simulation we can collect training samples very efficiently by setting the simulator to the states that occur along a trajectory; in a physical system, the efficiency of collecting training data depends on the amount of noise that can be injected into the controls before the robot moves far enough from the target trajectories that its behavior is no longer useful for training. We also found it more efficient to reset once the target execution starts deviating very far from what would have happened in the source environment.\nE. Inverse dynamics neural network architecture\nAll of our inverse dynamics models \u03c6 take as input a sequence of k previous observations, k \u2212 1 previous actions, and a target observation. Observations and actions are concatenated into one large input vector for the neural net. As is common in current neural net learning practice,\nthe neural network inputs are normalized to have mean 0 and variance 1 [20]. We then apply a sequence of two fullyconnected hidden layers with ReLU activations and 256 units each, followed by a fully-connected output layer, which gives the action a = \u03c6(\u03c4\u2212k:, o)."}, {"heading": "IV. EXPERIMENTS", "text": "The purpose of our method is to adapt a policy from a source environment to a target environment, with the key application being adaptation from simulation to real world. First, we measure adaptation capability between two simulators IV-A as this allows us to quantify most directly the differences between source environment and target environment. Then, we present results for adaptation from a simulation to a physical environment."}, {"heading": "A. Simulated Environments \u2013 Sim1 to Sim2 transfer", "text": "We test our method on several simulated models in the robotics simulator MuJoCo [38] using OpenAI Gym environment [3]. Therefore, both source and target environments are in simulation. We perform experiments on the following standard OpenAI Gym environments (Figure 2). In each case, observation space consists of positions and velocities of all degrees of freedom.\n\u2022 Reacher. Two-link arm aiming toward a target location, with a 11-dimensional observation space and 2 actuators. Arm end effector and target are included in the observation.1 \u2022 Hopper. Two-dimensional model of a robot with a single \u201cfoot\u201d that moves by hopping, with a 12-dimensional observation space and 3 actuators. \u2022 Half-Cheetah. Two-dimensional model of a bipedal robot with a 17-dimensional observation space and 6 actuators. \u2022 Humanoid. Three-dimensional model of a humanoid robot with a 376-dimensional observation space and 17 actuators.\nIn each environment, we train our models to imitate an \u201cexpert policy\u201d. The expert policies are obtained from Trust Region Policy Optimization [33] (source code by Ho et. al [15]). We measure the performance of policies using\n1We modify the Gym environment by increasing the mass of the arm to be 34 kilograms, roughly in line with the physical Fetch robot. This has a minimal effect on the original task, but it becomes relevant when we try to adapt to a modified version of the task with different gravity.\na reward given by OpenAI gym [3].2 We normalize the performance measurement so that the performance of the expert policy is 1.\nNote that our algorithm never observes the performance of the adapted policy. This is important for our intended application; evaluating the performance of adapted policies operating in the real world is typically more expensive than executing those policies, as it might, for example, require instrumentation of the physical world with ground truth sensors. We only use the performance measures to determine whether our method has successfully adapted the critical features of the expert policy.\nTo produce training data, we interleave learning with execution in the target domain, executing the previous estimate of the inverse dynamics model \u03c6 to generate trajectories to\n2These reward functions feature penalties for applying large torques; we remove these penalties, because they make it more difficult to interpret results which require gravity compensation or for which there is motor noise.\nbe used for further training. We interrupt trajectories at a random point in order to take a random action, and train the model to predict the random action from the resulting state (as well as the history of recent states and actions). We report all of our training times in terms of the number of training samples that we collect. In the case when inverse dynamics model includes history (as described in III-C), we use a window size H = 2 for all the experiments.\nWe compare our approach to several popular methods that have been developed to deal with simulation to real world model discrepancy. The baselines we use are: \u2022 Expert Policy. We perform no adaptation and directly\nuse the actions of the policy obtained from source domain in the new target domain. atarget = \u03c0source. \u2022 Output Error Control. We perform Model Predictive Control in the target domain using an adapted version of a dynamics model Tsource transferred from the source domain. At each timestep, we use the current observation and previous action to update the dynamics model, and\nuse the updated dynamics model to compute a policy using iterative LQR [39]. Output Error Control dynamics adaptation scheme adjusts the source dynamics model\nT ttarget = Tsource + et\nby an error term\net = (1\u2212 \u03b3)et\u22121 + \u03b3(ot \u2212 Tsource(ot\u22121, at\u22121))\nrepresenting a decayed version of the error in Tsource in the target domain. \u2022 Gaussian Dynamics Adaptation. As the previous baseline, we perform Model Predictive Control using iterative LQR on an adjusted dynamics model. The adjustment scheme in this case uses the source dynamics model to form a local Gaussian prior p(ot, at, ot+1). We update this prior according to the empirical mean and covariance of the data observed in target domain, and condition it to form\nT ttarget = p(ot+1 | ot, at).\nThis is the approach proposed and described in more detail in [11].\nTo test the capability of our method compared to the baseline methods, we consider two following challenging differences between domains: \u2022 Variation in Gravity. Target environment has a differ-\nence in gravity from the source environment. Gravity differs in magnitude by 20% for locomotion tasks. The Reacher task occurs in a plane; the expert policy is trained in a horizontal plane and essentially unaffected by gravity, and we test on planes that are rotated from 0\u25e6 to 90\u25e6. On the Reacher task, our method is able to adapt successfully to this significant dynamics change. \u2022 Motor Noise. Before an action a is sent to the robot, it is perturbed by adding a noise term to obtain a\u2032 = a + t. We experiment with two variants, where this noise is independent on each time step, as well as where this noise varies slowly and is correlated over time. Such noise is more representative of fluctuating environmental conditions, or latent physical effects like temperature changes.\nIn many cases, only small corrections to the source domain actions are necessary to adapt to target domain. In such a setting, it may be beneficial for \u03c6 to output a correction term rather than an action directly:\natarget = asource + \u03c6(\u03c4\u2212k:, o\u0302next).\nThis has the downside of directly requiring actions from the source domain, but tends to result in better performance when the domains are similar. We use such a correction formulation for motor noise standard deviations below 0.3 and for all locomotion experiments with varying gravity. In such cases, we also found it most helpful to pre-train the model on trajectories produced by the expert policy.\nFigure 3 summarizes our results, and Table 5 presents sample complexity of our method.\nAs expected, simply applying actions from an expert policy from a source domain results in poor performance on the target domain. Baselines that perform planning using a locally Gaussian forward dynamics model that is adapted online performed well with no additional training on the target domain in environments with simple dynamics (e.g., no contacts) such as Reacher and relatively slowly changing variation between the source and target domain. However, we found these methods to be ineffective in contact-rich environments such as Hopper, Cheetah, and Humanoid, even in the source domain. Contacts induce discontinuities that cause methods using locally linear dynamics approximations to perform poorly. Unstable tasks like Hopper and Humanoid are particularly poorly suited for these methods because small errors propogate over long trajectories, leading to episode termination.\nOur method is also able to correct for slowly-varying noise and small changes to system dynamics. Moreover, it is able to adapt even in the presence of contact discontinuities that are extermeley challenging for approaches based Model Predictive Control. Such approaches require solving an optimization problem (iterative LQG) that can exploit the learned forward dynamics model and take it outside the regime it was trained on. By learning an inverse dynamics model, we simply take the output of such models and avoid performing potentially unstable numerical optimization."}, {"heading": "B. Physical interaction \u2013 Sim to Real transfer", "text": "We test our method on transferring trajectories from a simulated source domain to the target domain, which is physical Fetch robot [42]. We control the robot using position control and stock firmware based on ROS in 10Hz frequency.\nThe tasks consider control of the arm, and our metric measures normalized distance between observations achieved in the simulator by the trajectory and observations achieved on the physical robot. The task is an agile back-and-forth swing of an arm where middle of the arm is pulled by a bungee cord. Our action adaptation method is able to adjust\nto this condition by adapting and exerting the necessary about of torque. As a baseline we use PD controller with targets being states experienced in the simulator. Table 5 summarizes our results."}, {"heading": "V. DISCUSSION AND FUTURE WORK", "text": "We have presented a general method to adapt actions of policies developed in one domain such as simulation to a different domain such as the physical world. We achieve this by learning a deep inverse dynamics model that is trained on the behavior of the physical robot. Our method is successfully able to adapt complex control policies for aggressive reaching and locomotion on scenarios involving contact, hysteresis effects in the form of time-correlated noise, and significant differences between environments. However to bring about robots that truly generalize in the physical world, in addition to action adaptation it is necessary to also adapt states and observations between simulation and physical world. We currently assume observations generated by our simulator match closely to physical observations, which is reasonable when considering sensors such as joint positions, but is it not reasonable to expect simulated visual or depth sensors to match the high fidelity of the real world. This work only focused on action adaptation. In the future we plan to experiment with observation adaptation methods, such as [41] for instance. Additionally, our approach can be applied to a setting where we do not even observe the actions taken in the source domain. This presents exciting future opportunities to apply our method to use solely observations in the source domain (such as driving dashboard camera recording, for example) to recover and adapt actions for a corresponding driving policy."}], "references": [{"title": "Transfer learning for reinforcement learning on a physical robot", "author": ["Samuel Barrett", "Matt E. Taylor", "Peter Stone"], "venue": "In Ninth International Conference on Autonomous Agents and Multiagent Systems - Adaptive Learning Agents Workshop (ALA),", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2010}, {"title": "Approximate real-time optimal control based on sparse gaussian process models", "author": ["Joschka Boedecker", "Jost Tobias Springenberg", "Jan Wlfing", "Martin Riedmiller"], "venue": "In Adaptive Dynamic Programming and Reinforcement Learning (ADPRL),", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Learning inverse dynamics models with contacts", "author": ["R. Calandra", "S. Ivaldi", "M. Deisenroth", "E. R\u00fcckert", "J. Peters"], "venue": "In IEEE International Conference on Robotics and Automation,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Real-world reinforcement learning via multifidelity simulators", "author": ["Mark Cutler", "Thomas J Walsh", "Jonathan P How"], "venue": "IEEE Transactions on Robotics,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "System identification and modelling of a high performance hydraulic actuator. In Eds.), Lecture Notes in Control and Information Sciences", "author": ["Benoit Boulet Laeeque Daneshmend"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1992}, {"title": "Pilco: A modelbased and data-efficient approach to policy search", "author": ["Marc Peter Deisenroth", "Carl Edward Rasmussen"], "venue": "Proceedings of the International Conference on Machine Learning,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "Decaf: A deep convolutional activation feature for generic visual recognition", "author": ["Jeff Donahue", "Yangqing Jia", "Oriol Vinyals", "Judy Hoffman", "Ning Zhang", "Eric Tzeng", "Trevor Darrell"], "venue": "In ICML,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2014}, {"title": "Rigid Body Dynamics Algorithms", "author": ["Roy Featherstone"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2007}, {"title": "Guided cost learning: Deep inverse optimal control via policy optimization", "author": ["Chelsea Finn", "Sergey Levine", "Pieter Abbeel"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2016}, {"title": "One-shot learning of manipulation skills with online dynamics adaptation and neural network", "author": ["Justin Fu", "Sergey Levine", "Pieter Abbeel"], "venue": "priors. CoRR,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "Literature survey of contact dynamics modelling", "author": ["G. Gilardi", "I. Sharf"], "venue": "Mechanism and Machine Theory,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2002}, {"title": "Learning dexterous manipulation for a soft robotic hand from human", "author": ["Abhishek Gupta", "Clemens Eppner", "Sergey Levine", "Pieter Abbeel"], "venue": "demonstration. CoRR,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2016}, {"title": "ABAQUS/CAE User\u2019s Manual", "author": ["Karlsson Hibbitt", "Sorensen"], "venue": "Hibbitt, Karlsson & Sorensen, Incorporated,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2002}, {"title": "Generative adversarial imitation learning", "author": ["Jonathan Ho", "Stefano Ermon"], "venue": "arXiv preprint arXiv:1606.03476,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2016}, {"title": "Efficient learning of domain-invariant image representations", "author": ["Judy Hoffman", "Erik Rodner", "Jeff Donahue", "Trevor Darrell", "Kate Saenko"], "venue": "arXiv preprint arXiv:1301.3224,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "Nonlinear identification of backlash in robot transmissions", "author": ["GE Hovland", "S Hanssen", "E Gallestey", "S Moberg", "T Brogardh", "S Gunnarsson", "M Isaksson"], "venue": "In Proceedings of the 33rd ISR (International Symposium on Robotics),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2002}, {"title": "System identification of unmanned aerial vehicles", "author": ["Thomas Ingebretsen"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2012}, {"title": "Gp-bayesfilters: Bayesian filtering using gaussian process prediction and observation models", "author": ["Jonathan Ko", "Dieter Fox"], "venue": "Auton. Robots,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2009}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E. Hinton"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2012}, {"title": "Locomotion control for many-muscle humanoids", "author": ["Yoonsang Lee", "Moon Seok Park", "Taesoo Kwon", "Jehee Lee"], "venue": "ACM Trans. Graph.,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2014}, {"title": "Deepmpc: Learning deep latent features for model predictive control", "author": ["Ian Lenz", "Ross Knepper", "Ashutosh Saxena"], "venue": "In RSS,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2015}, {"title": "Modeling, System Identification, and Control for Dynamic Locomotion of the LittleDog Robot on Rough Terrain", "author": ["Michael Yurievich Levashov"], "venue": "PhD thesis, Citeseer,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2012}, {"title": "System Identification: Theory for the User. Prentice Hall information and system sciences series", "author": ["L. Ljung"], "venue": null, "citeRegEx": "24", "shortCiteRegEx": "24", "year": 1999}, {"title": "Towards robust online inverse dynamics learning", "author": ["Franziska Meier", "Daniel Kappler", "Nathan Ratliff", "Stefan Schaal"], "venue": "In Proceedings of the IEEE/RSJ Conference on Intelligent Robots and Systems", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2016}, {"title": "System identification of small-size unmanned helicopter dynamics", "author": ["Bernard Mettler", "Mark B. Tischler", "Takeo Kanade"], "venue": "In Presented at the American Helicopter Society 55th Forum,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 1999}, {"title": "Ensemblecio: Full-body dynamic motion planning that transfers to physical humanoids", "author": ["Igor Mordatch", "Kendall Lowrey", "Emanuel Todorov"], "venue": "In Intelligent Robots and Systems (IROS),", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2015}, {"title": "Combining model-based policy search with online model learning for control of physical humanoids", "author": ["Igor Mordatch", "Nikhil Mishra", "Clemens Eppner", "Pieter Abbeel"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2016}, {"title": "Using model knowledge for learning inverse dynamics", "author": ["D. Nguyen-Tuong", "J. Peters"], "venue": null, "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2010}, {"title": "Actuator control for the nasa-jsc valkyrie humanoid robot: A decoupled dynamics approach for torque control of series elastic robots", "author": ["Nicholas Paine", "Joshua S. Mehling", "James Holley", "Nicolaus A. Radford", "Gwendolyn Johnson", "Chien-Liang Fok", "Luis Sentis"], "venue": "Journal of Field Robotics,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2015}, {"title": "Robot motion planning for pouring liquids", "author": ["Zherong Pan", "Chonhyon Park", "Dinesh Manocha"], "venue": "In Proceedings of the Twenty-Sixth International Conference on Automated Planning and Scheduling,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2016}, {"title": "Deep learning helicopter dynamics models", "author": ["Ali Punjani", "Pieter Abbeel"], "venue": "IEEE International Conference on Robotics and Automation (ICRA),", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2015}, {"title": "Trust region policy optimization", "author": ["John Schulman", "Sergey Levine", "Philipp Moritz", "Michael I Jordan", "Pieter Abbeel"], "venue": "CoRR, abs/1502.05477,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2015}, {"title": "Articulated swimming creatures", "author": ["Jie Tan", "Yuting Gu", "Greg Turk", "C. Karen Liu"], "venue": "In ACM SIGGRAPH 2011 papers,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2011}, {"title": "Soft body locomotion", "author": ["Jie Tan", "Greg Turk", "C. Karen Liu"], "venue": "ACM Trans. Graph.,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2012}, {"title": "Modeling and identification of pneumatic actuators", "author": ["Yuval Tassa", "Tingfan Wu", "Javier Movellan", "Emanuel Todorov"], "venue": "IEEE International Conference on Mechatronics and Automation,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2013}, {"title": "Transfer learning for reinforcement learning domains: A survey", "author": ["Matthew E Taylor", "Peter Stone"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2009}, {"title": "Mujoco: A physics engine for model-based control", "author": ["Emanuel Todorov", "Tom Erez", "Yuval Tassa"], "venue": "In 2012 IEEE/RSJ International Conference on Intelligent Robots and Systems,", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2012}, {"title": "A generalized iterative LQG method for locally-optimal feedback control of constrained nonlinear stochastic systems", "author": ["Emmanuel Todorov", "Weiwei Li"], "venue": "In American Control Conference,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2005}, {"title": "Towards adapting deep visuomotor representations from simulated to real environments", "author": ["Eric Tzeng", "Coline Devin", "Judy Hoffman", "Chelsea Finn", "Xingchao Peng", "Sergey Levine", "Kate Saenko", "Trevor Darrell"], "venue": "CoRR, abs/1511.07111,", "citeRegEx": "40", "shortCiteRegEx": "40", "year": 2015}, {"title": "Simultaneous deep transfer across domains and tasks", "author": ["Eric Tzeng", "Judy Hoffman", "Trevor Darrell", "Kate Saenko"], "venue": "CoRR, abs/1510.02192,", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2015}, {"title": "Model-Less Feedback Control of Continuum Manipulators in Constrained Environments", "author": ["Michael C. Yip", "David B. Camarillo"], "venue": "IEEE Transactions on Robotics,", "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2014}, {"title": "Essentials of robust control, volume 104", "author": ["Kemin Zhou", "John Comstock Doyle"], "venue": "Prentice hall Upper Saddle River, NJ,", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 1998}], "referenceMentions": [{"referenceID": 36, "context": "Hopper, Cheetah, Humanoid from MuJoCo / OpenAI Gym [38] [3].", "startOffset": 51, "endOffset": 55}, {"referenceID": 22, "context": "We compare our approach with output error control [24] and Gaussian Dynamics Adaptation [11], two established approaches to handle mismatch between simulation and real world.", "startOffset": 50, "endOffset": 54}, {"referenceID": 9, "context": "We compare our approach with output error control [24] and Gaussian Dynamics Adaptation [11], two established approaches to handle mismatch between simulation and real world.", "startOffset": 88, "endOffset": 92}, {"referenceID": 7, "context": "rigid multibody dynamics are especially suited for simulating articulated robots [9].", "startOffset": 81, "endOffset": 84}, {"referenceID": 33, "context": "Flexible or inflatable bodies [35] [13], area contact [12], interaction with fluids [34] [31] are just a few of such examples.", "startOffset": 30, "endOffset": 34}, {"referenceID": 11, "context": "Flexible or inflatable bodies [35] [13], area contact [12], interaction with fluids [34] [31] are just a few of such examples.", "startOffset": 35, "endOffset": 39}, {"referenceID": 10, "context": "Flexible or inflatable bodies [35] [13], area contact [12], interaction with fluids [34] [31] are just a few of such examples.", "startOffset": 54, "endOffset": 58}, {"referenceID": 32, "context": "Flexible or inflatable bodies [35] [13], area contact [12], interaction with fluids [34] [31] are just a few of such examples.", "startOffset": 84, "endOffset": 88}, {"referenceID": 29, "context": "Flexible or inflatable bodies [35] [13], area contact [12], interaction with fluids [34] [31] are just a few of such examples.", "startOffset": 89, "endOffset": 93}, {"referenceID": 12, "context": "as those based on Finite Element Method [14] can be used to more closely match such real world effects, but they can be extremely computationally intensive (requiring days to compute seconds of simulation) and furthermore can be numerically ill-conditioned, which makes them difficult to use within numerical trajectory or policy optimization methods.", "startOffset": 40, "endOffset": 44}, {"referenceID": 36, "context": "Our method allows the use of simple, high-performance, and numerically smooth rigid body simulators (we use MuJoCo [38]) for policy or trajectory optimization, while still being able to adapt to complex effects present in the real world.", "startOffset": 115, "endOffset": 119}, {"referenceID": 21, "context": "focused on identifying these parameters from observations of robots\u2019 behavior in the real world, but tend to require separate specialized identification approaches and models for different robot platforms, such as legged robots [23], helicopters [26], or fixed-wing UAVs [18].", "startOffset": 228, "endOffset": 232}, {"referenceID": 24, "context": "focused on identifying these parameters from observations of robots\u2019 behavior in the real world, but tend to require separate specialized identification approaches and models for different robot platforms, such as legged robots [23], helicopters [26], or fixed-wing UAVs [18].", "startOffset": 246, "endOffset": 250}, {"referenceID": 16, "context": "focused on identifying these parameters from observations of robots\u2019 behavior in the real world, but tend to require separate specialized identification approaches and models for different robot platforms, such as legged robots [23], helicopters [26], or fixed-wing UAVs [18].", "startOffset": 271, "endOffset": 275}, {"referenceID": 15, "context": "Furthermore, individual physical effects also require specialized expert-designed models and parameter identification methods, such as motor backlash [17], hydraulic actuation [6], series elastic actuation [30], or pneumatic actuation [36].", "startOffset": 150, "endOffset": 154}, {"referenceID": 4, "context": "Furthermore, individual physical effects also require specialized expert-designed models and parameter identification methods, such as motor backlash [17], hydraulic actuation [6], series elastic actuation [30], or pneumatic actuation [36].", "startOffset": 176, "endOffset": 179}, {"referenceID": 28, "context": "Furthermore, individual physical effects also require specialized expert-designed models and parameter identification methods, such as motor backlash [17], hydraulic actuation [6], series elastic actuation [30], or pneumatic actuation [36].", "startOffset": 206, "endOffset": 210}, {"referenceID": 34, "context": "Furthermore, individual physical effects also require specialized expert-designed models and parameter identification methods, such as motor backlash [17], hydraulic actuation [6], series elastic actuation [30], or pneumatic actuation [36].", "startOffset": 235, "endOffset": 239}, {"referenceID": 22, "context": "A number of approaches learn forward dynamics models functions mapping current state and action to a next state [24] [32].", "startOffset": 112, "endOffset": 116}, {"referenceID": 30, "context": "A number of approaches learn forward dynamics models functions mapping current state and action to a next state [24] [32].", "startOffset": 117, "endOffset": 121}, {"referenceID": 27, "context": "action that achieves the transition between the two [29], [4], [25].", "startOffset": 52, "endOffset": 56}, {"referenceID": 2, "context": "action that achieves the transition between the two [29], [4], [25].", "startOffset": 58, "endOffset": 61}, {"referenceID": 23, "context": "action that achieves the transition between the two [29], [4], [25].", "startOffset": 63, "endOffset": 67}, {"referenceID": 9, "context": "An alternative is to learn dynamics models in an on-line fashion, constantly adapting the model based on an incoming stream of observed states and actions [11] [28] [43] [22].", "startOffset": 155, "endOffset": 159}, {"referenceID": 26, "context": "An alternative is to learn dynamics models in an on-line fashion, constantly adapting the model based on an incoming stream of observed states and actions [11] [28] [43] [22].", "startOffset": 160, "endOffset": 164}, {"referenceID": 40, "context": "An alternative is to learn dynamics models in an on-line fashion, constantly adapting the model based on an incoming stream of observed states and actions [11] [28] [43] [22].", "startOffset": 165, "endOffset": 169}, {"referenceID": 20, "context": "An alternative is to learn dynamics models in an on-line fashion, constantly adapting the model based on an incoming stream of observed states and actions [11] [28] [43] [22].", "startOffset": 170, "endOffset": 174}, {"referenceID": 5, "context": "Another alternative is to iteratively intertwine data collection and dynamics model learning [7] [10].", "startOffset": 93, "endOffset": 96}, {"referenceID": 8, "context": "Another alternative is to iteratively intertwine data collection and dynamics model learning [7] [10].", "startOffset": 97, "endOffset": 101}, {"referenceID": 26, "context": "A number of options are available for representation of learned dynamics functions, from linear functions [28] [43], to Gaussian processes [2] [19] [7], to deep neural networks [32] [11].", "startOffset": 106, "endOffset": 110}, {"referenceID": 40, "context": "A number of options are available for representation of learned dynamics functions, from linear functions [28] [43], to Gaussian processes [2] [19] [7], to deep neural networks [32] [11].", "startOffset": 111, "endOffset": 115}, {"referenceID": 1, "context": "A number of options are available for representation of learned dynamics functions, from linear functions [28] [43], to Gaussian processes [2] [19] [7], to deep neural networks [32] [11].", "startOffset": 139, "endOffset": 142}, {"referenceID": 17, "context": "A number of options are available for representation of learned dynamics functions, from linear functions [28] [43], to Gaussian processes [2] [19] [7], to deep neural networks [32] [11].", "startOffset": 143, "endOffset": 147}, {"referenceID": 5, "context": "A number of options are available for representation of learned dynamics functions, from linear functions [28] [43], to Gaussian processes [2] [19] [7], to deep neural networks [32] [11].", "startOffset": 148, "endOffset": 151}, {"referenceID": 30, "context": "A number of options are available for representation of learned dynamics functions, from linear functions [28] [43], to Gaussian processes [2] [19] [7], to deep neural networks [32] [11].", "startOffset": 177, "endOffset": 181}, {"referenceID": 9, "context": "A number of options are available for representation of learned dynamics functions, from linear functions [28] [43], to Gaussian processes [2] [19] [7], to deep neural networks [32] [11].", "startOffset": 182, "endOffset": 186}, {"referenceID": 35, "context": "There is a rich body of work focusing on adapting policies, rather than actions in the context of reinforcement learning [37] [1] [5].", "startOffset": 121, "endOffset": 125}, {"referenceID": 0, "context": "There is a rich body of work focusing on adapting policies, rather than actions in the context of reinforcement learning [37] [1] [5].", "startOffset": 126, "endOffset": 129}, {"referenceID": 3, "context": "There is a rich body of work focusing on adapting policies, rather than actions in the context of reinforcement learning [37] [1] [5].", "startOffset": 130, "endOffset": 133}, {"referenceID": 41, "context": "simulator and the real world [44] [27].", "startOffset": 29, "endOffset": 33}, {"referenceID": 25, "context": "simulator and the real world [44] [27].", "startOffset": 34, "endOffset": 38}, {"referenceID": 39, "context": "In addition to actions, adaptation of states and observations between simulation and the real world is another challenging problem [41] [16] [40] [8].", "startOffset": 131, "endOffset": 135}, {"referenceID": 14, "context": "In addition to actions, adaptation of states and observations between simulation and the real world is another challenging problem [41] [16] [40] [8].", "startOffset": 136, "endOffset": 140}, {"referenceID": 38, "context": "In addition to actions, adaptation of states and observations between simulation and the real world is another challenging problem [41] [16] [40] [8].", "startOffset": 141, "endOffset": 145}, {"referenceID": 6, "context": "In addition to actions, adaptation of states and observations between simulation and the real world is another challenging problem [41] [16] [40] [8].", "startOffset": 146, "endOffset": 149}, {"referenceID": 19, "context": "tendons, as in [21].", "startOffset": 15, "endOffset": 19}, {"referenceID": 18, "context": "and variance 1 [20].", "startOffset": 15, "endOffset": 19}, {"referenceID": 36, "context": "We test our method on several simulated models in the robotics simulator MuJoCo [38] using OpenAI Gym environment [3].", "startOffset": 80, "endOffset": 84}, {"referenceID": 31, "context": "The expert policies are obtained from Trust Region Policy Optimization [33] (source code by Ho et.", "startOffset": 71, "endOffset": 75}, {"referenceID": 13, "context": "al [15]).", "startOffset": 3, "endOffset": 7}, {"referenceID": 37, "context": "ing iterative LQR [39].", "startOffset": 18, "endOffset": 22}, {"referenceID": 9, "context": "This is the approach proposed and described in more detail in [11].", "startOffset": 62, "endOffset": 66}, {"referenceID": 39, "context": "we plan to experiment with observation adaptation methods, such as [41] for instance.", "startOffset": 67, "endOffset": 71}], "year": 2016, "abstractText": "Developing control policies in simulation is often more practical and safer than directly running experiments in the real world. This applies to policies obtained from planning and optimization, and even more so to policies obtained from reinforcement learning, which is often very data demanding. However, a policy that succeeds in simulation often doesnt work when deployed on a real robot. Nevertheless, often the overall gist of what the policy does in simulation remains valid in the real world. In this paper we investigate such settings, where the sequence of states traversed in simulation remains reasonable for the real world, even if the details of the controls are not, as could be the case when the key differences lie in detailed friction, contact, mass and geometry properties. During execution, at each time step our approach computes what the simulation-based control policy would do, but then, rather than executing these controls on the real robot, our approach computes what the simulation expects the resulting next state(s) will be, and then relies on a learned deep inverse dynamics model to decide which real-world action is most suitable to achieve those next states. Deep models are only as good as their training data, and we also propose an approach for data collection to (incrementally) learn the deep inverse dynamics model. Our experiments shows our approach compares favorably with various baselines that have been developed for dealing with simulation to real world model discrepancy, including output error control and Gaussian dynamics adaptation.", "creator": "LaTeX with hyperref package"}}}