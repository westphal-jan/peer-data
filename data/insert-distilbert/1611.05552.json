{"id": "1611.05552", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Nov-2016", "title": "DelugeNets: Deep Networks with Efficient and Flexible Cross-layer Information Inflows", "abstract": "human brains are adept theoretically at dealing with the deluge of information they continuously receive, predominantly by suppressing the non - essential inputs and focusing on the important ones. inspired by such capability, we propose deluge networks ( delugenets ), a further novel class of neural networks then facilitating massive cross - layer information inflows from preceding layers to succeeding layers. the connections between layers in delugenets are efficiently established through cross - protocol layer dependent depthwise convolutional layers aligned with perfectly learnable filters, automatically acting as a flexible selection inhibition mechanism. by virtue of the successive massive cross - layer information inflows, delugenets can propagate information across many layers with substantially greater flexibility and utilize network parameters more effectively, compared to existing resnet models. simulations experiments show the superior performances of delugenets in terms of observing both classification slope accuracies and parameter efficiencies. remarkably, having a smaller delugenet model with just 20. 2m parameters achieve state - of - the the - art threshold accuracy of 19. 0 02 % on cifar - 100 dataset, outperforming densenet - model with 27. 2m parameters.", "histories": [["v1", "Thu, 17 Nov 2016 03:45:48 GMT  (118kb,D)", "http://arxiv.org/abs/1611.05552v1", null], ["v2", "Mon, 12 Dec 2016 07:41:33 GMT  (118kb,D)", "http://arxiv.org/abs/1611.05552v2", "Code:this https URL"], ["v3", "Wed, 28 Dec 2016 02:08:45 GMT  (119kb,D)", "http://arxiv.org/abs/1611.05552v3", "Code:this https URL"], ["v4", "Fri, 30 Dec 2016 04:56:02 GMT  (119kb,D)", "http://arxiv.org/abs/1611.05552v4", "Code:this https URL"], ["v5", "Wed, 23 Aug 2017 14:09:55 GMT  (419kb,D)", "http://arxiv.org/abs/1611.05552v5", "Code:this https URL"]], "reviews": [], "SUBJECTS": "cs.CV cs.LG cs.NE", "authors": ["jason kuen", "xiangfei kong", "gang wang", "yap-peng tan"], "accepted": false, "id": "1611.05552"}, "pdf": {"name": "1611.05552.pdf", "metadata": {"source": "CRF", "title": "DelugeNets: Deep Networks with Massive and Flexible Cross-layer Information Inflows", "authors": ["Jason Kuen", "Xiangfei Kong", "Gang Wang"], "emails": ["jkuen001@ntu.edu.sg", "xfkong@ntu.edu.sg", "wanggang@ntu.edu.sg"], "sections": [{"heading": "1. Introduction", "text": "Deep learning methods [1][26], particularly convolutional neural networks (CNN) [22] have revolutionized the field of computer vision. CNNs are integral components of many recent computer vision techniques which spread across a diverse range of vision application areas [10]. Hence, developing more sophisticated CNNs has been a prime research focus. Over the years, many variants of CNN architectures have been proposed. Some works focus on improving the activation functions [11][37], and some focus on increasing the heterogeneity of convolutional filters within the same layers [33][34]. Lately, the idea of improving CNNs by greatly deepening them has gained much traction, following the immense successes of Residual Networks (ResNets) [12][13] in image classification.\n\u2217corresponding author\nResNets make use of residual connections to support relatively unobstructed information flows (shortcut) between layers1. Each succeeding layer receives the sum of all its preceding layers outputs as input. Compared to traditional non-residual deep networks, outputs of preceding layers in ResNets can reach succeeding layers with minimal obstructions, even if the preceding layer and succeeding layer is separated by a very long layer-distance. However, the crosslayer connections between preceding and succeeding layers of ResNet are fixed and not \u201cselective\u201d, and therefore the succeeding layers are not able to prioritize or deprioritize output channels of certain preceding layers. Instead, the outputs of preceding layers are lumped together via simplistic additive operation, making it very tough for succeeding layers to perform layer-wise information selection. The inflexibility of residual connections also hinders the ability of ResNets to learn cross-layer interactions and correlations.\nDensely connected networks (DenseNets) [16] aim to overcome this drawback of ResNets, by having convolutional layers to consider an extra dimension - the depth/layer dimension, in addition to the spatial and feature channel dimensions used in regular convolutions. In DenseNets, the input feature maps to succeeding layers are concatenations of preceding layers outputs, rather than simple summations. Hence, when applying convolution operations on the concatenated feature maps, the convolutional filters have to learn spatial, cross-channel, and cross-layer correlations altogether, entailing heavy amounts of parameters (filter width \u00d7 filter height \u00d7 # input channels \u00d7 # output channels \u00d7 # preceding layers). To deal with excessive parameter growth, DenseNet models are specifically configured to have much lower output width (between 12 and 24 output channels) at each layer, compared to typical CNNs. However, it is crucial to have considerable network width as contended by [39], and decreasing output width too much is harmful to networks representational power. We argue that it is unnecessary to decrease output width for the sake of having cross-layer connections. Thus, in this paper, we pro-\n1The unit layer in ResNet, ResNet-like, and DenseNet models refers to a composite layer formed by several basic layers. See Section 3.1.\n1\nar X\niv :1\n61 1.\n05 55\n2v 1\n[ cs\n.C V\n] 1\n7 N\nov 2\n01 6\npose a new class of CNNs called Deluge Networks (DelugeNets) which enable cross-layer connections yet have regular output width. As a result of using regular output width, the information inflows from preceding layers to succeeding layers in DelugeNets are massive, in contrast to the lesser information inflows in DenseNets.\nOur proposed DelugeNets are inspired by separable convolutions [18][3]. The efficiency of convolutions can be improved by separating the combined dimensions involved, resulting in separable convolutions. The most prevalent type is spatially separable convolution which separates spatial dimension into vertical and horizontal spatial dimensions, as done by [18]. Alternatively, the work in [3] separates combined channel-spatial dimension into channel and spatial dimensions, demonstrating that the tasks of convolution filters to learn cross-channel correlations and spatial correlations can be decoupled. The decoupling [3] leads to considerable performance gains for an Inception-like [34] network.\nMotivated by [3], DelugeNets are designed such that the depth/layer dimension is processed independently from the rest (channel and spatial dimensions), using a novel variant of convolutional layer called cross-layer depthwise convolutional layer (see Figure 2) as described in Section 3.2. Cross-layer depthwise convolutional layers handle only cross-layer interactions and correlations, without getting burdened by other dimensions. They facilitate cross-layer connections in DelugeNets in a very parameter-efficient and effective manner. Experiments show the superior performances of DelugeNets in terms of both classification accuracies and parameter efficiencies. Remarkably, a DelugeNet model with just 20.2M parameters achieve state-of-the-art accuracy on CIFAR-100 dataset, outperforming DenseNet model with 27.2M parameters."}, {"heading": "2. Related Work", "text": "Developing methods for training very deep neural networks is a rather significant research topic that has received much attention over the years. Lee et al. [23] incorporate classification losses into intermediate hidden layers, allowing unimpeded supervised signals to reach the layers. In a similar spirit as [23], GoogleNets [33] and Inception [34] models attach auxiliary classifiers to a few intermediate layers to encourage feature discriminativeness in lower network layers. Unlike these architectures which have multiple losses at different layers, our proposed DelugeNets, have only a single loss at the final classification layer. Because the connections support massive information inflows from preceding to succeeding layers, DelugeNets can readily backpropagate the supervised signals to earlier layers without relying on additional losses.\nThere is another stream of works focusing on improving the information flows between layers of very deep networks, which is also the focus of our work. Highway Networks [31] make use of a Long-Short-Term-Memory (LSTM [14])-inspired gating mechanism to control information flow from linear and nonlinear pathways. Through appropriately learned gating functions, information can flow unimpededly across many layers. He et al. [12] propose Residual Networks (ResNets) which compute the residual (additive) functions of the outputs of linear and nonlinear pathways, without complex gating mechanisms. ResNets have shown to tackle well the vanishing gradient and network degradation problems that occur in very deep networks. Later, a pre-activation variant of residual building block [13] (ResNet-v2) is proposed to significantly enhance information flow and regularization of ResNet models. Instead of going deeper, Wide-ResNets [39] improve upon originally proposed ResNets by having more convolutional filters/channels (width) and less numbers of layers (depth). Motivated by the high model complexity of ResNets in terms of depths and parameter\nnumbers, several \u201cdropping\u201d-based regularization methods [17][29] have been developed for regularizing large ResNet models. ResNets can be seen as a less flexible special case of DelugeNets, in which the cross-layer connection weights are not learnable and fixed as ones. Densely connected networks (DenseNets) [16] which we discuss extensively in Section 1 belong to the same stream of works.\nOur proposed DelugeNets are also related to neural networks with attention mechanisms such as [9][38][2]. An attention mechanism usually has scalar attention weights, one for each basic unit of the data dimension it operates on. For example, the work in [2] learns attention weights for the speech hidden representations, one for every timestep. Similarly, for every spatial location in the image feature map, the image captioning model in [38] learns a separate attention weight. A DelugeNet learns a separate weight for each feature channel at each preceding layer, operating on the channel and depth dimensions, rather than the temporal and spatial dimensions. Hence, the weighting mechanism in DelugeNets can somehow be thought of as attention over layers and channels, in contrast to the conventional attention over input states (e.g., phonemes, words). The attention weights in attention mechanisms generally undergo softmax normalization such that the weights sum to one, but our work does not consider this. Our proposed weighting mechanism (cross-layer depthwise convolutional layers) works a lot more like convolution/filtering, specifically the depthwise convolution introduced in [3]. Depthwise convolutional layers treat different input channels as separate groups, and these groups have distinct and unshared sets of convolutional filters. Our work extends depthwise convolutional layers by grouping the same input channel across many preceding layers into one."}, {"heading": "3. Deluge Networks", "text": "Similar to existing CNNs (ResNet [12][13], VGGNet [28], and AlexNet [20]), DelugeNets gradually decrease spatial sizes and increase feature channels of feature maps from bottom to top layers, with a linear classification layer attached to the end. The layers operating on the same feature map dimensions can be grouped to form a block.\nIn DelugeNets, the input to a particular layer comes from all of its preceding layers of the same block. There is no information directly flowing from other blocks. Within any block, the cross-layer information flows through connections established by the cross-layer depthwise convolutions (see Section 3.2). For transition to the next block as described in Section 3.3, we perform cross-layer depthwise convolution followed by strided spatial convolution to obtain feature map of matching dimensions. The structure of block in DelugeNets is illustrated in Figure 1(c), with individual layers separated by vertical dashed lines."}, {"heading": "3.1. Composite Layer", "text": "In CNNs, a layer often refers to a composite layer of several basic layers such as Rectified Linear Unit (ReLU), Convolutional (Conv), Batch Normalization (BN) layers. Inspired by [13], we use the bottleneck-kind of composite layer BN-ReLU-Conv-BN-ReLU-Conv-BN-ReLU-Conv in DelugeNets, as illustrated in Figure 1(a). This kind of composite layer is designed to improve parameter efficiency in deep networks, by employing 1 \u00d7 1 spatial convolutional layers at the beginning to reduce channel dimension, and at the end to increase channel dimension. In the ResNet models proposed by [13], the base channel dimensions are increased by 4 times. We however only increase them by 2 times in this paper, for the reason that we can allocate more computational and parameter budgets to train deeper DelugeNets.\nSuch a composite layer has also shown to work very well for very deep neural networks which combine information from multiple sources, such as ResNets and the proposed DelugeNets. The primary reason that it works well is that combined multi-source information is normalized via BN layers before it is passed into the upcoming weight (convolutional) layers. This reduces internal covariate shift and regularizes the model more effectively [13] than just passing unnormalized multi-source information to the weight layers."}, {"heading": "3.2. Cross-layer Depthwise Convolutional Layers", "text": "To facilitate massive and flexible cross-layer information inflows, in this paper, we develop a cross-layer depthwise convolution method. A cross-layer depthwise convolutional layer concatenates the channels of feature map outputs of many layers, and then applies (channel,spatial)-independent filters to the concatenated channels. Equipped with such filters, DelugeNets are able to process the depth/layer dimension independently of the rest (channel and spatial dimensions), as mentioned in Section 1. Figure 2 gives a graphical illustration of cross-layer depthwise convolution operation.\nCross-layer depthwise convolutional layers facilitate the inflows of information from preceding composite layers to succeeding composite layers. Before being passed to crosslayer depthwise convolutional layers, outputs of preceding composite layers are first normalized via batch normalization. Suppose that ` denotes the layer of an arbitrary composite layer, and hc`\u2212i \u2208 R denotes the c-th channel of the preceding (` \u2212 i)-th composite layer\u2019s output. And, there are N number of preceding composite layers, as well as one preceding block transition output h0. The c-th channel of the input x` to composite layer ` is:\nxc` = N+1\u2211 i=1 wc`\u2212ih c `\u2212i + b c ` (1)\n1x1 conv\n1x1 conv 1x1 conv 1x1 conv 1x1 conv 1x1 conv\nConcat\nCross-layer Depthwise Convolution\n{ { { { { {\nInput to Composite Layer\nwhere wc`\u2212i \u2208 R and bc` \u2208 R are the filter weights and bias respectively, for each channel. We streamline the equations by not having spatial location-related notations, and the weights and biases are assumed to be shared across all 1\u00d71 spatial locations (spatially independent) in the input feature maps as mentioned earlier. The parameter cost of adding cross-layer depthwise convolutional layer to any existing network architecture is relatively low compared to other network parameters. For an arbitrary composite layer in the network, the number of additional parameters is merely N\u00d7M+1, where M is the number of feature channels. Experimentally, we find that these extra parameters on average make up about 3% of entire model parameters. DenseNets [16], on the other hand, require heavy amounts of parameters to connect to preceding layers, through cross-layer output concatenations followed by 3\u00d7 3 spatial convolutions.\nInitialization: Similar to the filters and biases in spatial convolutional layers, the filters and biases in cross-layer depthwise convolutional layers have to be properly initialized before training. One can initialize them just like how they are done for spatial convolutional layers. However, in practice, we uniformly initialize the filter weights as 1/N to give equal importance to all preceding composite layers, and set the biases to zero.\nAdvantages: Cross-layer depthwise convolutional layers are beneficial because they encourage features generated by a preceding composite layers to be taken as inputs for many times by the succeeding layers (feature reuse). This naturally leads to parameter efficiency because there is no need to redundantly learn filters which generate the same features in succeeding layers, in case those features are needed again later. Furthermore, in traditional ReLUbased convolutional networks, features that get turned off by ReLU functions (at the beginnings of blocks) cannot be recovered by other network parts or layers. In DelugeNets,\nthe use of cross-layer depthwise convolutional layers, output of a preceding composite layer can be transformed differently for each succeeding composite layer to serve as input. Consequently, input features that get turned off at the beginning of certain succeeding composite layers may be active in others.\nBesides encouraging feature reuse, cross-layer depthwise convolutional layers are advantageous from the perspective of gradient flow. The gradient flows in DelugeNets are regulated by multiplicative interactions with the filter weights in cross-layer depthwise convolutional layers, such that the composite layers all receive unique backpropagated gradient signals even if they come from the same block. This is not true for ResNet models, in which the composite layers within the same block receive identical backpropagated gradient signals, due to simple addition (residual) operation."}, {"heading": "3.3. Block Transition", "text": "Different network blocks operate on feature maps of different spatial and channel dimensions. For block transition, there is a need to transform the feature map to match the spatial and channel dimensions of next block. In ResNetlike models, block transition can be done with either 1 \u00d7 1 strided convolution, or strided average pooling with channel padding. These block transition designs aim to preserve the information from previous block by having only minimal transformation as well as dismissing any non-linear activation function. Such block transition designs are suboptimal for DelugeNets because they allow direct information flow from just the last composite layer of the previous block, and they conceivably hinder the information flows from other composite layers.\nTo this end, we propose a new block transition component which has a cross-layer depthwise convolutional layer followed by 3 \u00d7 3 spatial convolutional layer. The crosslayer depthwise convolutional layer allows direct information inflow from all composite layers from the previous block, therefore summarizing the outputs of all composite layers of previous block. Then, the 3 \u00d7 3 strided spatial convolutional layer (see Figure 1(b)) transforms the summarized feature map to have matching spatial and channel dimensions. 3\u00d73 strided convolutional layer is chosen over 1 \u00d7 1 strided convolutional layer as the latter wastes the features it receives, for many of the feature map\u2019s spatial locations, while the former does not. Similar to the block transition designs in ResNets, we do not add non-linear activation functions after the spatial convolutional layer."}, {"heading": "4. Experiments", "text": "To rigorously validate the effectiveness of DelugeNets, we evaluate DelugeNets on 3 image classification datasets with varied degrees of complexity: CIFAR-10 [19], CIFAR-\n100 [19], ImageNet [25]. The experimental codes are written in Torch [5], and made available at https:// github.com/xternalz/DelugeNets."}, {"heading": "4.1. CIFAR-10 and CIFAR-100", "text": "Datasets: CIFAR-10 and CIFAR-100 are 2 subsets of the Tiny Images dataset [35] annotated to serve as image classification datasets. There are 50,000 training images and 10,000 testing images for each of the 2 CIFAR datasets. CIFAR-10 consists of 10 object classes, while CIFAR-100 is more complex dataset consisting of 100 object classes. The images in these datasets are encoded as 3-channel RGB images, and they all have spatial dimensions of 32 \u00d7 32. For pre-processing, we subtract channel-wise means from the images, and divide them by channel-wise standard deviations. During training, data augmentation is carried out moderately as in [39][16], with horizontal flipping and random crops taken from images padded by 4 pixels on each side.\nImplementation: A total of 3 different DelugeNet models are implemented and evaluated on CIFAR datasets. Similar to [13][39], all the 3 DelugeNet models have 3 blocks - the first block works on spatially 32\u00d7 32 feature maps, followed by 16\u00d716 and 8\u00d78 feature maps for second and third\nblocks respectively. They vary only in terms of numbers of composite layers and feature channel dimensions for the 3 blocks. To minimize manual tuning of architectural hyperparameters, we design different DelugeNet models based on a simple principle - the second block has 2 times the numbers of composite layers and feature channel dimension (width) of the first block, the third block has 3 times of the first\u2019s, and so on:\nDelugeNet-146 has base feature channel dimensions (widths) of {32,64,128}, and composite layer counts of {8,16,24}, for its 3 blocks (in sequential ordering) respectively.\nDelugeNet-218 shares the same base widths as DelugeNet-146, but it comes with larger composite layer counts of {12,24,36} which make it a much deeper model.\nWide-DelugeNet-146 is a 1.75\u00d7 wider variant of DelugeNet-146, having base widths of {56,112,224}, while the composite layer counts remain the same.\nThe proposed models (DelugeNet-146, DelugeNet-218, and Wide-DelugeNet-146) for the 2 CIFAR datasets differ only in the numbers of output labels (10 and 100). To train the models, we run Stochastic Gradient Descent (SGD) over a total of 300 training epochs, with Nestorov Momentum [32] and weight decay rate of 1e\u22124. As most of the exist-\ning models we compare with in this paper do not use any dropout-like regularization, we do not use any either, for fairer comparison. The starting learning rate is 0.1, and it is decayed by factor of 0.1 at epoch 150 and 225. We set the mini-batch size as 64. All DelugeNet models are initialized using He\u2019s initialization method [11], and they are trained using the same settings. The training settings are in fact identical to the settings employed in [16] to train DenseNets.\nResults: The top-1 classification errors achieved by the DelugeNets and existing models on both CIFAR datasets are presented in Table 1. The results of existing models are obtained directly from their respective papers. As shown in Table 1, DelugeNets can benefit from \u201cdeepening\u201d (DelugeNet-218) and \u201cwidening\u201d (Wide-DelugeNet-146). Notably, our largest model Wide-DelugeNet-146 outperforms all existing works on CIFAR-100, and achieves top-1 error comparable to current state-of-the model, DenseNet [16] on CIFAR-10. The performance difference between Wide-DelugeNet-146 and DenseNet is more significant (+0.23%) on CIFAR-100, than it is (-0.02%) on CIFAR10. This highlights the ability of DelugeNets to deal with a more complex image classification dataset better than DenseNets, while still being competitive on the less complex dataset.\nParameter efficiency: DelugeNets are able to perform well despite having much lower numbers of learnable parameters compared to existing models. DelugeNet-146 and DelugeNet-218 both outperform all non-DelugeNet models except DenseNet(k = 24) on both CIFAR-10 and CIFAR100 datasets, with merely 6.7M and 10M parameters respectively. These numbers are tremendously lower than the numbers of parameters required by FractalNets (38.6M) and Wide-ResNets (36.5M) to achieve their best results. Furthermore, although the classification performances of our best model Wide-DelugeNet-146 and DenseNet(k = 24) are neck-to-neck, the former saves 7M parameters compared to latter. DelugeNets\u2019 strong parameter efficiencies are attributed to the cross-layer depthwise convolutional layers, which effectively establish cross-layer connections and thereby encouraging feature reuse, at the cost of relatively small number of learnable parameters.\nBaseline comparison: In this work, we propose crosslayer depthwise convolutional layer and a new kind of block transition design with 3\u00d7 3 spatial convolution, which differentiate DelugeNets from existing networks. To better understand the contributions of these components, we construct ResNet-like baselines on the 3 proposed DelugeNet models. There are 2 types of baselines for each of the DelugeNet models: The first baseline has all of its crosslayer depthwise convolutions replaced by residual connections. Alternatively, the residual connections can be seen as cross-layer depthwise convolutional layers, whose weights\nare fixed as ones as pointed in Section 2. The second baseline is similar to the first one except that it is equipped with 3 \u00d7 3 convolutional shortcuts for block transitions, similar to our proposed block transition design. Other than those mentioned, all aspects of the baselines and their corresponding DelugeNets are the same, including training settings. We evaluate the baselines on CIFAR-100. The results are shown in Table 2.\nBlock transitions with 3\u00d7 3 convolutional shortcuts can mildly improve the performances of DelugeNet-146\u2019s and DelugeNet-218\u2019s baselines. However, there is slight overfitting (19.79% \u2192 19.98%) from adding 3\u00d7 3 convolutional shortcuts to Wide-DelugeNet-146\u2019s baseline. The overfitting issue is greatly eased by having cross-layer depthwise convolutions in Wide-DelugeNet-146. As evidenced by the significant performance improvements (about 1%) of DelugeNets over the baselines, the biggest contributor is crosslayer depthwise convolutional layer. Yet, the parameter costs incurred by adding these layers are very marginal. The smallest DelugeNet model, DelugeNet-146 (19.72%) with just 6.69M parameters suprisingly outperforms the biggest ResNet-like baseline (19.79%) with 18.76M parameters. These findings reaffirm the advantages of the proposed cross-layer depthwise convolutional layer for deep networks.\nCross-layer connections: For better understanding of cross-layer depthwise convolutional layers, we compute layer-wise L2-norms of the cross-layer depthwise convolutional filter weights, and provide visualizations in Figure 3. The weight\u2019s L2-norms are normalized2 by dividing them with the maximum layer-wise L2-norms of every block. We consider only cross-layer depthwise convolutional layers in the Block Transition 1 (from Block 1 to Block 2), Block Transition 2 (from Block 2 to Block 3), and the cross-layer\n2The relative (as opposed to absolute) L2-norm values are sufficient, since BN layers follow cross-layer depthwise convolutional layers.\nBlock 1 to Block 2 Block 2 to Block 3 Block 3 to Classification CIFAR-100\ndepthwise convolutional layer (from Block 3 to classification) before classification layer. These are the cross-layer depthwise convolutional layers with the highest numbers cross-layer connections in the networks.\nGenerally, all of the preceding composite layers contribute reasonably, with a few dominating. The weights (initialized uniformly) are no longer uniform for all layers in\nthe trained models, departing from the connection rigidity exhibited by ResNets. For first and second block transitions, the last composite layers always contribute the most, somehow approximating the behaviors of conventional neural networks where all incoming information comes solely from the layer just before the current layer. On the other hand, for the cross-layer depthwise convolutional layer (be-\nfore classification layer) connected to the third network block, the early composite layers generally contribute the most, and the final composite layer contributes moderately. We reckon that the features computed by the earlier composite layers are fairly ready for classification, and the subsequent composite layers just refine them further. Such phenomenon has also been observed in ResNets [36], where upper layers could be deleted without hurting performance much. In addition, we notice that some composite layers in the first block of DelugeNet-218 (CIFAR-100) hardly have any contributions to Block Transition 1. This observation may suggest that layer sparsity can be potentially exploited for training DelugeNets."}, {"heading": "4.2. ImageNet", "text": "Dataset: ImageNet dataset [25] is the most widely used large-scale image classification dataset in recent years. It is a 1000-class subset of the much larger full-ImageNet dataset. There are 1.2 million training images, 100,000 test images, and 50,000 validation images in the dataset. As the labels for testing images are kept private for competition purpose, we report the results for validation images. We follow the data augmentation scheme adopted in GoogleNet/Inception [33][34] and ResNet-v2 [13] with the following augmentation techniques: scale [20] & aspect ratio [33] augmentation, PCA-based lighting augmentation [20], photometric distortions [15], and horizontal flipping. The images are normalized by subtracting them from channel-wise means and dividing them by channel-wise standard deviations.\nImplementation: We implement and evaluate 2 different DelugeNet models on ImageNet dataset. Compared to the CIFAR models, each of these ImageNet models has one extra block, taking into account the larger spatial dimensions of ImageNet images. Similar to ResNet models [13], before being passed to the first block, the feature map (after first layer) is downsampled to spatial dimensions of 56\u00d756 via max-pooling. In view of the strong parameter efficiencies of DelugeNets, we set the base feature channel dimensions (widths) of ImageNet-based DelugeNet models to be three-quarters of ResNets - {64,128,256,512}. The specifications of the models are as follows:\nDelugeNet-143 has base widths of {48,96,192,384}, and composite layer counts of {6,11,14,16}, for its 4 blocks (in sequential ordering) respectively. It has a total of 43.6M learnable parameters and is specifically designed to match the parameter number of ResNet-101 which has 44.6M parameters.\nDelugeNet-152 is a deeper DelugeNet model, with composite layer counts of {5,10,15,20}, while its base widths follow those of DelugeNet-143. Its network depth is intentionally made identical to that of ResNet-152, but it has much less numbers of learnable parameters (51.7M) com-\npared to ResNet-152 (60.3M).\nThe ImageNet-based models are initialized similarly to the CIFAR models. Training is carried out with SGD over a total of 100 training epochs, with Nestorov Momentum [32] and weight decay rate of 1e\u22124. We start with learning rate of 0.1, and decay it by factor of 0.1 at epoch 31, 61, and 81. The training mini-batch size is 256. Due to large model and image sizes, we train the models in multi-GPU mode with 8 NVIDIA Titan X cards, splitting each mini-batch into 8 portions. These are standard training settings and similar to those [6] used to train ImageNet-based ResNets.\nResults: The top-1 and top-5 classification errors achieved by DelugeNets on ImageNet validation dataset are presented in Table 3. For comparison, we include the results of ResNet models (ResNet-101 & ResNet-152) with similar model sizes as our DelugeNets, in terms of model depths and numbers of parameters. DelugeNet-143 performs considerably better than ResNet-101 in terms of top-1 errors (+0.4%), and they are comparable in terms of top-5 errors. Suprisingly, DelugeNet-143s top-1 error is a slightly better (+0.12%) than ResNet-152 which has 16.7M more parameters than DelugeNet-143. DelugeNet-152 which shares the same network depth as ResNet-152, outperforms its ResNet counterpart in terms of top-5 errors (+0.12%), while being competitive on top-1 errors. Given similar or lower model budgets (network depth, number of parameters), DelugeNets are able to somehow surpass ResNets. This is by virtue of cross-layer depthwise convolutional layers which encourage feature reuse."}, {"heading": "5. Conclusion", "text": "We extend depthwise convolutional layers to cross-layer depthwise convolutional layers, which facilitate cross-layer connections in our proposed DelugeNets. The cross-layer information inflows in DelugeNets are flexible (cross-layer depthwise convolutional filters are learned) yet massive (output widths of composite layers are regular). In future, we would like to investigate regularization techniques (e.g., layer dropout [17]) in the context of cross-layer connectivity, as well as applying DelugeNets to other vision applications."}], "references": [{"title": "Learning deep architectures for ai", "author": ["Y. Bengio"], "venue": "Foundations and Trends in Machine Learning, 2(1):1\u2013127", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2009}, {"title": "Listen", "author": ["W. Chan", "N. Jaitly", "Q.V. Le", "O. Vinyals"], "venue": "attend and spell: A neural network for large vocabulary conversational speech recognition. In ICASSP, pages 4960\u20134964", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2016}, {"title": "Xception: Deep learning with depthwise separable convolutions", "author": ["F. Chollet"], "venue": "arXiv preprint arXiv:1610.02357", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2016}, {"title": "Fast and accurate deep network learning by exponential linear units (elus)", "author": ["D.-A. Clevert", "T. Unterthiner", "S. Hochreiter"], "venue": "ICLR", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "Torch7: A matlab-like environment for machine learning", "author": ["R. Collobert", "K. Kavukcuoglu", "C. Farabet"], "venue": "BigLearn, NIPS Workshop, number EPFL-CONF-192376", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2011}, {"title": "Maxout networks", "author": ["I.J. Goodfellow", "D. Warde-Farley", "M. Mirza", "A.C. Courville", "Y. Bengio"], "venue": "ICML", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2013}, {"title": "Fractional max-pooling", "author": ["B. Graham"], "venue": "arXiv preprint arXiv:1412.6071", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2014}, {"title": "Neural turing machines", "author": ["A. Graves", "G. Wayne", "I. Danihelka"], "venue": "arXiv preprint arXiv:1410.5401", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2014}, {"title": "Recent advances in convolutional neural networks", "author": ["J. Gu", "Z. Wang", "J. Kuen", "L. Ma", "A. Shahroudy", "B. Shuai", "T. Liu", "X. Wang", "G. Wang"], "venue": "arXiv preprint arXiv:1512.07108", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2015}, {"title": "Delving deep into rectifiers: Surpassing human-level performance on imagenet classification", "author": ["K. He", "X. Zhang", "S. Ren", "J. Sun"], "venue": "CVPR, pages 1026\u20131034", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep residual learning for image recognition", "author": ["K. He", "X. Zhang", "S. Ren", "J. Sun"], "venue": "In CVPR, June 2016", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2016}, {"title": "Identity mappings in deep residual networks", "author": ["K. He", "X. Zhang", "S. Ren", "J. Sun"], "venue": "ECCV", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2016}, {"title": "Long short-term memory", "author": ["S. Hochreiter", "J. Schmidhuber"], "venue": "Neural computation, 9(8):1735\u20131780", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1997}, {"title": "Some improvements on deep convolutional neural network based image classification", "author": ["A.G. Howard"], "venue": "arXiv preprint arXiv:1312.5402", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2013}, {"title": "Densely connected convolutional networks", "author": ["G. Huang", "Z. Liu", "K.Q. Weinberger"], "venue": "arXiv preprint arXiv:1608.06993", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2016}, {"title": "Deep networks with stochastic depth", "author": ["G. Huang", "Y. Sun", "Z. Liu", "D. Sedra", "K. Weinberger"], "venue": "ECCV", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2016}, {"title": "Flattened convolutional neural networks for feedforward acceleration", "author": ["J. Jin", "A. Dundar", "E. Culurciello"], "venue": "ICLR", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2015}, {"title": "Learning multiple layers of features from tiny images", "author": ["A. Krizhevsky"], "venue": "Technical report", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2009}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "NIPS, pages 1097\u20131105", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}, {"title": "Fractalnet: Ultra-deep neural networks without residuals", "author": ["G. Larsson", "M. Maire", "G. Shakhnarovich"], "venue": "arXiv preprint arXiv:1605.07648", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2016}, {"title": "Gradientbased learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE, 86(11):2278\u20132324", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1998}, {"title": "Deeplysupervised nets", "author": ["C.-Y. Lee", "S. Xie", "P. Gallagher", "Z. Zhang", "Z. Tu"], "venue": "AISTATS, volume 2, page 6", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2015}, {"title": "Network in network", "author": ["M. Lin", "Q. Chen", "S. Yan"], "venue": "ICLR", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2014}, {"title": "Imagenet large scale visual recognition challenge", "author": ["O. Russakovsky", "J. Deng", "H. Su", "J. Krause", "S. Satheesh", "S. Ma", "Z. Huang", "A. Karpathy", "A. Khosla", "M. Bernstein", "A.C. Berg", "L. Fei-Fei"], "venue": "IJCV, 115(3):211\u2013252", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep learning in neural networks: An overview", "author": ["J. Schmidhuber"], "venue": "Neural Networks, 61:85 \u2013 117", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep residual networks with exponential linear unit", "author": ["A. Shah", "E. Kadam", "H. Shah", "S. Shinde", "S. Shingade"], "venue": "VisionNet, pages 59\u201365", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2016}, {"title": "Very deep convolutional networks for large-scale image recognition", "author": ["K. Simonyan", "A. Zisserman"], "venue": "ICLR", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2015}, {"title": "Swapout: Learning an ensemble of deep architectures", "author": ["S. Singh", "D. Hoiem", "D. Forsyth"], "venue": "In NIPS. 2016", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2016}, {"title": "Striving for simplicity: The all convolutional net", "author": ["J. Springenberg", "A. Dosovitskiy", "T. Brox", "M. Riedmiller"], "venue": "ICLR Workshop", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2015}, {"title": "Training very deep networks", "author": ["R.K. Srivastava", "K. Greff", "J. Schmidhuber"], "venue": "In NIPS. 2015", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2015}, {"title": "On the importance of initialization and momentum in deep learning", "author": ["I. Sutskever", "J. Martens", "G.E. Dahl", "G.E. Hinton"], "venue": "ICML", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2013}, {"title": "Going deeper with convolutions", "author": ["C. Szegedy", "W. Liu", "Y. Jia", "P. Sermanet", "S. Reed", "D. Anguelov", "D. Erhan", "V. Vanhoucke", "A. Rabinovich"], "venue": "CVPR, pages 1\u20139", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2015}, {"title": "Rethinking the inception architecture for computer vision", "author": ["C. Szegedy", "V. Vanhoucke", "S. Ioffe", "J. Shlens", "Z. Wojna"], "venue": "CVPR", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2016}, {"title": "80 million tiny images: A large data set for nonparametric object and scene recognition", "author": ["A. Torralba", "R. Fergus", "W.T. Freeman"], "venue": "IEEE TPAMI,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2008}, {"title": "Residual networks are exponential ensembles of relatively shallow networks", "author": ["A. Veit", "M. Wilber", "S. Belongie"], "venue": "NIPS", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2016}, {"title": "Empirical evaluation of rectified activations in convolutional network", "author": ["B. Xu", "N. Wang", "T. Chen", "M. Li"], "venue": "ICML Deep Learning Workshop", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2015}, {"title": "Show", "author": ["K. Xu", "J. Ba", "R. Kiros", "K. Cho", "A. Courville", "R. Salakhudinov", "R. Zemel", "Y. Bengio"], "venue": "attend and tell: Neural image caption generation with visual attention. In ICML, pages 2048\u20132057", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2015}, {"title": "Wide residual networks", "author": ["S. Zagoruyko", "N. Komodakis"], "venue": "BMVC", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2016}], "referenceMentions": [{"referenceID": 0, "context": "Deep learning methods [1][26], particularly convolutional neural networks (CNN) [22] have revolutionized the field of computer vision.", "startOffset": 22, "endOffset": 25}, {"referenceID": 24, "context": "Deep learning methods [1][26], particularly convolutional neural networks (CNN) [22] have revolutionized the field of computer vision.", "startOffset": 25, "endOffset": 29}, {"referenceID": 20, "context": "Deep learning methods [1][26], particularly convolutional neural networks (CNN) [22] have revolutionized the field of computer vision.", "startOffset": 80, "endOffset": 84}, {"referenceID": 8, "context": "CNNs are integral components of many recent computer vision techniques which spread across a diverse range of vision application areas [10].", "startOffset": 135, "endOffset": 139}, {"referenceID": 9, "context": "Some works focus on improving the activation functions [11][37], and some focus on increasing the heterogeneity of convolutional filters within the same layers [33][34].", "startOffset": 55, "endOffset": 59}, {"referenceID": 35, "context": "Some works focus on improving the activation functions [11][37], and some focus on increasing the heterogeneity of convolutional filters within the same layers [33][34].", "startOffset": 59, "endOffset": 63}, {"referenceID": 31, "context": "Some works focus on improving the activation functions [11][37], and some focus on increasing the heterogeneity of convolutional filters within the same layers [33][34].", "startOffset": 160, "endOffset": 164}, {"referenceID": 32, "context": "Some works focus on improving the activation functions [11][37], and some focus on increasing the heterogeneity of convolutional filters within the same layers [33][34].", "startOffset": 164, "endOffset": 168}, {"referenceID": 10, "context": "Lately, the idea of improving CNNs by greatly deepening them has gained much traction, following the immense successes of Residual Networks (ResNets) [12][13] in image classification.", "startOffset": 150, "endOffset": 154}, {"referenceID": 11, "context": "Lately, the idea of improving CNNs by greatly deepening them has gained much traction, following the immense successes of Residual Networks (ResNets) [12][13] in image classification.", "startOffset": 154, "endOffset": 158}, {"referenceID": 14, "context": "Densely connected networks (DenseNets) [16] aim to overcome this drawback of ResNets, by having convolutional layers to consider an extra dimension - the depth/layer dimension, in addition to the spatial and feature channel dimensions used in regular convolutions.", "startOffset": 39, "endOffset": 43}, {"referenceID": 37, "context": "However, it is crucial to have considerable network width as contended by [39], and decreasing output width too much is harmful to networks representational power.", "startOffset": 74, "endOffset": 78}, {"referenceID": 16, "context": "Our proposed DelugeNets are inspired by separable convolutions [18][3].", "startOffset": 63, "endOffset": 67}, {"referenceID": 2, "context": "Our proposed DelugeNets are inspired by separable convolutions [18][3].", "startOffset": 67, "endOffset": 70}, {"referenceID": 16, "context": "The most prevalent type is spatially separable convolution which separates spatial dimension into vertical and horizontal spatial dimensions, as done by [18].", "startOffset": 153, "endOffset": 157}, {"referenceID": 2, "context": "Alternatively, the work in [3] separates combined channel-spatial dimension into channel and spatial dimensions, demonstrating that the tasks of convolution filters to learn cross-channel correlations and spatial correlations can be decoupled.", "startOffset": 27, "endOffset": 30}, {"referenceID": 2, "context": "The decoupling [3] leads to considerable performance gains for an Inception-like [34] network.", "startOffset": 15, "endOffset": 18}, {"referenceID": 32, "context": "The decoupling [3] leads to considerable performance gains for an Inception-like [34] network.", "startOffset": 81, "endOffset": 85}, {"referenceID": 2, "context": "Motivated by [3], DelugeNets are designed such that the depth/layer dimension is processed independently from the rest (channel and spatial dimensions), using a novel variant of convolutional layer called cross-layer depthwise convolutional layer (see Figure 2) as described in Section 3.", "startOffset": 13, "endOffset": 16}, {"referenceID": 21, "context": "[23] incorporate classification losses into intermediate hidden layers, allowing unimpeded supervised signals to reach the layers.", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "In a similar spirit as [23], GoogleNets [33] and Inception [34] models attach auxiliary classifiers to a few intermediate layers to encourage feature discriminativeness in lower network layers.", "startOffset": 23, "endOffset": 27}, {"referenceID": 31, "context": "In a similar spirit as [23], GoogleNets [33] and Inception [34] models attach auxiliary classifiers to a few intermediate layers to encourage feature discriminativeness in lower network layers.", "startOffset": 40, "endOffset": 44}, {"referenceID": 32, "context": "In a similar spirit as [23], GoogleNets [33] and Inception [34] models attach auxiliary classifiers to a few intermediate layers to encourage feature discriminativeness in lower network layers.", "startOffset": 59, "endOffset": 63}, {"referenceID": 29, "context": "Highway Networks [31] make use of a Long-Short-Term-Memory (LSTM [14])-inspired gating mechanism to control information flow from linear and nonlinear pathways.", "startOffset": 17, "endOffset": 21}, {"referenceID": 12, "context": "Highway Networks [31] make use of a Long-Short-Term-Memory (LSTM [14])-inspired gating mechanism to control information flow from linear and nonlinear pathways.", "startOffset": 65, "endOffset": 69}, {"referenceID": 10, "context": "[12] propose Residual Networks (ResNets) which compute the residual (additive) functions of the outputs of linear and nonlinear pathways, without complex gating mechanisms.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "Later, a pre-activation variant of residual building block [13] (ResNet-v2) is proposed to significantly enhance information flow and regularization of ResNet models.", "startOffset": 59, "endOffset": 63}, {"referenceID": 37, "context": "Instead of going deeper, Wide-ResNets [39] improve upon originally proposed ResNets by having more convolutional filters/channels (width) and less numbers of layers (depth).", "startOffset": 38, "endOffset": 42}, {"referenceID": 15, "context": "numbers, several \u201cdropping\u201d-based regularization methods [17][29] have been developed for regularizing large ResNet models.", "startOffset": 57, "endOffset": 61}, {"referenceID": 27, "context": "numbers, several \u201cdropping\u201d-based regularization methods [17][29] have been developed for regularizing large ResNet models.", "startOffset": 61, "endOffset": 65}, {"referenceID": 14, "context": "Densely connected networks (DenseNets) [16] which we discuss extensively in Section 1 belong to the same stream of works.", "startOffset": 39, "endOffset": 43}, {"referenceID": 7, "context": "Our proposed DelugeNets are also related to neural networks with attention mechanisms such as [9][38][2].", "startOffset": 94, "endOffset": 97}, {"referenceID": 36, "context": "Our proposed DelugeNets are also related to neural networks with attention mechanisms such as [9][38][2].", "startOffset": 97, "endOffset": 101}, {"referenceID": 1, "context": "Our proposed DelugeNets are also related to neural networks with attention mechanisms such as [9][38][2].", "startOffset": 101, "endOffset": 104}, {"referenceID": 1, "context": "For example, the work in [2] learns attention weights for the speech hidden representations, one for every timestep.", "startOffset": 25, "endOffset": 28}, {"referenceID": 36, "context": "Similarly, for every spatial location in the image feature map, the image captioning model in [38] learns a separate attention weight.", "startOffset": 94, "endOffset": 98}, {"referenceID": 2, "context": "Our proposed weighting mechanism (cross-layer depthwise convolutional layers) works a lot more like convolution/filtering, specifically the depthwise convolution introduced in [3].", "startOffset": 176, "endOffset": 179}, {"referenceID": 10, "context": "Similar to existing CNNs (ResNet [12][13], VGGNet [28], and AlexNet [20]), DelugeNets gradually decrease spatial sizes and increase feature channels of feature maps from bottom to top layers, with a linear classification layer attached to the end.", "startOffset": 33, "endOffset": 37}, {"referenceID": 11, "context": "Similar to existing CNNs (ResNet [12][13], VGGNet [28], and AlexNet [20]), DelugeNets gradually decrease spatial sizes and increase feature channels of feature maps from bottom to top layers, with a linear classification layer attached to the end.", "startOffset": 37, "endOffset": 41}, {"referenceID": 26, "context": "Similar to existing CNNs (ResNet [12][13], VGGNet [28], and AlexNet [20]), DelugeNets gradually decrease spatial sizes and increase feature channels of feature maps from bottom to top layers, with a linear classification layer attached to the end.", "startOffset": 50, "endOffset": 54}, {"referenceID": 18, "context": "Similar to existing CNNs (ResNet [12][13], VGGNet [28], and AlexNet [20]), DelugeNets gradually decrease spatial sizes and increase feature channels of feature maps from bottom to top layers, with a linear classification layer attached to the end.", "startOffset": 68, "endOffset": 72}, {"referenceID": 11, "context": "Inspired by [13], we use the bottleneck-kind of composite layer BN-ReLU-Conv-BN-ReLU-Conv-BN-ReLU-Conv in DelugeNets, as illustrated in Figure 1(a).", "startOffset": 12, "endOffset": 16}, {"referenceID": 11, "context": "In the ResNet models proposed by [13], the base channel dimensions are increased by 4 times.", "startOffset": 33, "endOffset": 37}, {"referenceID": 11, "context": "This reduces internal covariate shift and regularizes the model more effectively [13] than just passing unnormalized multi-source information to the weight layers.", "startOffset": 81, "endOffset": 85}, {"referenceID": 14, "context": "DenseNets [16], on the other hand, require heavy amounts of parameters to connect to preceding layers, through cross-layer output concatenations followed by 3\u00d7 3 spatial convolutions.", "startOffset": 10, "endOffset": 14}, {"referenceID": 17, "context": "To rigorously validate the effectiveness of DelugeNets, we evaluate DelugeNets on 3 image classification datasets with varied degrees of complexity: CIFAR-10 [19], CIFAR-", "startOffset": 158, "endOffset": 162}, {"referenceID": 5, "context": "Maxout Network [7] - 9.", "startOffset": 15, "endOffset": 18}, {"referenceID": 22, "context": "57 Network-in-Network [24] - 8.", "startOffset": 22, "endOffset": 26}, {"referenceID": 21, "context": "68 Deeply Supervised Net [23] - 7.", "startOffset": 25, "endOffset": 29}, {"referenceID": 28, "context": "57 All-CNN [30] - 7.", "startOffset": 11, "endOffset": 15}, {"referenceID": 6, "context": "71 Fractional Max-Pooling [8] - 4.", "startOffset": 26, "endOffset": 29}, {"referenceID": 3, "context": "62 ELU-Net [4] - 6.", "startOffset": 11, "endOffset": 14}, {"referenceID": 29, "context": "28 Highway Network [31] - 7.", "startOffset": 19, "endOffset": 23}, {"referenceID": 19, "context": "FractalNet [21] 38.", "startOffset": 11, "endOffset": 15}, {"referenceID": 10, "context": "ResNet [12] 1.", "startOffset": 7, "endOffset": 11}, {"referenceID": 10, "context": "16 ResNet [12] 10.", "startOffset": 10, "endOffset": 14}, {"referenceID": 25, "context": "ResNet with ELU [27] - 110 5.", "startOffset": 16, "endOffset": 20}, {"referenceID": 11, "context": "ResNet with Identity Mappings [13] 1.", "startOffset": 30, "endOffset": 34}, {"referenceID": 11, "context": "33 ResNet with Identity Mappings [13] 10.", "startOffset": 33, "endOffset": 37}, {"referenceID": 27, "context": "ResNet with Swapout [29] 7.", "startOffset": 20, "endOffset": 24}, {"referenceID": 15, "context": "ResNet with Stochastic Depth [17] 1.", "startOffset": 29, "endOffset": 33}, {"referenceID": 15, "context": "98 ResNet with Stochastic Depth [17] 10.", "startOffset": 32, "endOffset": 36}, {"referenceID": 37, "context": "91 Wide-ResNet (04\u00d7width) [39] 8.", "startOffset": 26, "endOffset": 30}, {"referenceID": 37, "context": "89 Wide-ResNet (08\u00d7width) [39] 11.", "startOffset": 26, "endOffset": 30}, {"referenceID": 37, "context": "07 Wide-ResNet (10\u00d7width) [39] 36.", "startOffset": 26, "endOffset": 30}, {"referenceID": 14, "context": "DenseNet (k = 12) [16] 7.", "startOffset": 18, "endOffset": 22}, {"referenceID": 14, "context": "20 DenseNet (k = 24) [16] 27.", "startOffset": 21, "endOffset": 25}, {"referenceID": 17, "context": "100 [19], ImageNet [25].", "startOffset": 4, "endOffset": 8}, {"referenceID": 23, "context": "100 [19], ImageNet [25].", "startOffset": 19, "endOffset": 23}, {"referenceID": 4, "context": "The experimental codes are written in Torch [5], and made available at https:// github.", "startOffset": 44, "endOffset": 47}, {"referenceID": 33, "context": "Datasets: CIFAR-10 and CIFAR-100 are 2 subsets of the Tiny Images dataset [35] annotated to serve as image classification datasets.", "startOffset": 74, "endOffset": 78}, {"referenceID": 37, "context": "During training, data augmentation is carried out moderately as in [39][16], with horizontal flipping and random crops taken from images padded by 4 pixels on each side.", "startOffset": 67, "endOffset": 71}, {"referenceID": 14, "context": "During training, data augmentation is carried out moderately as in [39][16], with horizontal flipping and random crops taken from images padded by 4 pixels on each side.", "startOffset": 71, "endOffset": 75}, {"referenceID": 11, "context": "Similar to [13][39], all the 3 DelugeNet models have 3 blocks the first block works on spatially 32\u00d7 32 feature maps, followed by 16\u00d716 and 8\u00d78 feature maps for second and third blocks respectively.", "startOffset": 11, "endOffset": 15}, {"referenceID": 37, "context": "Similar to [13][39], all the 3 DelugeNet models have 3 blocks the first block works on spatially 32\u00d7 32 feature maps, followed by 16\u00d716 and 8\u00d78 feature maps for second and third blocks respectively.", "startOffset": 15, "endOffset": 19}, {"referenceID": 30, "context": "To train the models, we run Stochastic Gradient Descent (SGD) over a total of 300 training epochs, with Nestorov Momentum [32] and weight decay rate of 1e\u22124.", "startOffset": 122, "endOffset": 126}, {"referenceID": 9, "context": "All DelugeNet models are initialized using He\u2019s initialization method [11], and they are trained using the same settings.", "startOffset": 70, "endOffset": 74}, {"referenceID": 14, "context": "The training settings are in fact identical to the settings employed in [16] to train DenseNets.", "startOffset": 72, "endOffset": 76}, {"referenceID": 14, "context": "Notably, our largest model Wide-DelugeNet-146 outperforms all existing works on CIFAR-100, and achieves top-1 error comparable to current state-of-the model, DenseNet [16] on CIFAR-10.", "startOffset": 167, "endOffset": 171}, {"referenceID": 34, "context": "Such phenomenon has also been observed in ResNets [36], where upper layers could be deleted without hurting performance much.", "startOffset": 50, "endOffset": 54}, {"referenceID": 23, "context": "Dataset: ImageNet dataset [25] is the most widely used large-scale image classification dataset in recent years.", "startOffset": 26, "endOffset": 30}, {"referenceID": 31, "context": "We follow the data augmentation scheme adopted in GoogleNet/Inception [33][34] and ResNet-v2 [13] with the following augmentation techniques: scale [20] & aspect ratio [33] augmentation, PCA-based lighting augmentation [20], photometric distortions [15], and horizontal flipping.", "startOffset": 70, "endOffset": 74}, {"referenceID": 32, "context": "We follow the data augmentation scheme adopted in GoogleNet/Inception [33][34] and ResNet-v2 [13] with the following augmentation techniques: scale [20] & aspect ratio [33] augmentation, PCA-based lighting augmentation [20], photometric distortions [15], and horizontal flipping.", "startOffset": 74, "endOffset": 78}, {"referenceID": 11, "context": "We follow the data augmentation scheme adopted in GoogleNet/Inception [33][34] and ResNet-v2 [13] with the following augmentation techniques: scale [20] & aspect ratio [33] augmentation, PCA-based lighting augmentation [20], photometric distortions [15], and horizontal flipping.", "startOffset": 93, "endOffset": 97}, {"referenceID": 18, "context": "We follow the data augmentation scheme adopted in GoogleNet/Inception [33][34] and ResNet-v2 [13] with the following augmentation techniques: scale [20] & aspect ratio [33] augmentation, PCA-based lighting augmentation [20], photometric distortions [15], and horizontal flipping.", "startOffset": 148, "endOffset": 152}, {"referenceID": 31, "context": "We follow the data augmentation scheme adopted in GoogleNet/Inception [33][34] and ResNet-v2 [13] with the following augmentation techniques: scale [20] & aspect ratio [33] augmentation, PCA-based lighting augmentation [20], photometric distortions [15], and horizontal flipping.", "startOffset": 168, "endOffset": 172}, {"referenceID": 18, "context": "We follow the data augmentation scheme adopted in GoogleNet/Inception [33][34] and ResNet-v2 [13] with the following augmentation techniques: scale [20] & aspect ratio [33] augmentation, PCA-based lighting augmentation [20], photometric distortions [15], and horizontal flipping.", "startOffset": 219, "endOffset": 223}, {"referenceID": 13, "context": "We follow the data augmentation scheme adopted in GoogleNet/Inception [33][34] and ResNet-v2 [13] with the following augmentation techniques: scale [20] & aspect ratio [33] augmentation, PCA-based lighting augmentation [20], photometric distortions [15], and horizontal flipping.", "startOffset": 249, "endOffset": 253}, {"referenceID": 11, "context": "Similar to ResNet models [13], before being passed to the first block, the feature map (after first layer) is downsampled to spatial dimensions of 56\u00d756 via max-pooling.", "startOffset": 25, "endOffset": 29}, {"referenceID": 11, "context": "ResNet-101 [13] 44.", "startOffset": 11, "endOffset": 15}, {"referenceID": 11, "context": "21 ResNet-152 [13] 60.", "startOffset": 14, "endOffset": 18}, {"referenceID": 30, "context": "Training is carried out with SGD over a total of 100 training epochs, with Nestorov Momentum [32] and weight decay rate of 1e\u22124.", "startOffset": 93, "endOffset": 97}, {"referenceID": 15, "context": ", layer dropout [17]) in the context of cross-layer connectivity, as well as applying DelugeNets to other vision applications.", "startOffset": 16, "endOffset": 20}], "year": 2017, "abstractText": "Human brains are adept at dealing with the deluge of information they continuously receive, by suppressing the non-essential inputs and focusing on the important ones. Inspired by such capability, we propose Deluge Networks (DelugeNets), a novel class of neural networks facilitating massive cross-layer information inflows from preceding layers to succeeding layers. The connections between layers in DelugeNets are efficiently established through cross-layer depthwise convolutional layers with learnable filters, acting as a flexible selection mechanism. By virtue of the massive cross-layer information inflows, DelugeNets can propagate information across many layers with greater flexibility and utilize network parameters more effectively, compared to existing ResNet models. Experiments show the superior performances of DelugeNets in terms of both classification accuracies and parameter efficiencies. Remarkably, a DelugeNet model with just 20.2M parameters achieve state-ofthe-art accuracy of 19.02% on CIFAR-100 dataset, outperforming DenseNet model with 27.2M parameters.", "creator": "LaTeX with hyperref package"}}}