{"id": "1611.06652", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Nov-2016", "title": "Scalable Adaptive Stochastic Optimization Using Random Projections", "abstract": "adaptive stochastic computer gradient methods such as adagrad have gained popularity in particular for training deep neural networks. the most commonly used original and studied variant maintains a diagonal matching matrix approximation to second order information by accumulating past coordinate gradients which are used to tune only the step size adaptively. though in certain situations the full - matrix variant of rectangular adagrad is expected to attain better performance, however in high dimensions it is computationally impractical. we present ada - lr and radagrad variant two computationally efficient approximations to full - matrix adagrad based on randomized dimensionality scaling reduction. technically they are able to capture dependencies between features and achieve similar performance to full - sequence matrix adagrad but at a strictly much smaller intermediate computational cost. we show that the regret of ada - lr is as close to the regret of full - memory matrix adagrad which can have an up - to exponentially smaller dependence on the dimension used than the first diagonal linear variant. empirically, we show that ada - db lr and radagrad perform them similarly to existing full - matrix adagrad. when on the task of training convolutional neural networks as well as recurrent neural networks, radagrad technique achieves faster convergence than diagonal adagrad.", "histories": [["v1", "Mon, 21 Nov 2016 05:15:50 GMT  (437kb,D)", "http://arxiv.org/abs/1611.06652v1", "To appear in Advances in Neural Information Processing Systems 29 (NIPS 2016)"]], "COMMENTS": "To appear in Advances in Neural Information Processing Systems 29 (NIPS 2016)", "reviews": [], "SUBJECTS": "stat.ML cs.LG", "authors": ["gabriel krummenacher", "brian mcwilliams", "yannic kilcher", "joachim m buhmann", "nicolai meinshausen"], "accepted": true, "id": "1611.06652"}, "pdf": {"name": "1611.06652.pdf", "metadata": {"source": "CRF", "title": "Scalable Adaptive Stochastic Optimization Using Random Projections", "authors": ["Gabriel Krummenacher", "Brian McWilliams", "Yannic Kilcher", "Joachim M. Buhmann"], "emails": ["gabriel.krummenacher@inf.ethz.ch", "brian@disneyresearch.com", "yannic.kilcher@inf.ethz.ch", "jbuhmann@inf.ethz.ch", "meinshausen@stat.math.ethz.ch"], "sections": [{"heading": "1 Introduction", "text": "Recently, adaptive stochastic optimization algorithms have gained popularity for large-scale convex and non-convex optimization problems. Among these, ADAGRAD [10] and its variants [22] have received particular attention and have proven among the most successful algorithms for training deep networks. Although these problems are inherently highly non-convex, recent work has begun to explain the success of such algorithms [3, 5].\nADAGRAD adaptively sets the learning rate for each dimension by means of a time-varying proximal regularizer. The most commonly studied and utilised version considers only a diagonal matrix proximal term. As such it incurs almost no additional computational cost over standard stochastic\n\u2217Authors contributed equally.\n30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nar X\niv :1\n61 1.\n06 65\n2v 1\n[ st\nat .M\ngradient descent (SGD). However, when the data has low effective rank the regret of ADAGRAD may have a much worse dependence on the dimensionality of the problem than its full-matrix variant (which we refer to as ADA-FULL). Such settings are common in high dimensional data where there are many correlations between features and can also be observed in the convolutional layers of neural networks. The computational cost of ADA-FULL is substantially higher than that of ADAGRAD\u2013 it requires computing the inverse square root of the matrix of gradient outer products to evaluate the proximal term which grows with the cube of the dimension. As such it is rarely used in practise.\nIn this work we propose two methods that approximate the proximal term used in ADA-FULL drastically reducing computational and storage complexity with little adverse affect on optimization performance. First, in Section 3.1 we develop ADA-LR, a simple approximation using random projections. This procedure reduces the computational complexity of ADA-FULL by a factor of p but retains similar theoretical guarantees. In Section 3.2 we systematically profile the most computationally expensive parts of ADA-LR and introduce further randomized approximations resulting in a truly scalable algorithm, RADAGRAD. In Section 3.3 we outline a simple modification to RADAGRAD\u2013 reducing the variance of the stochastic gradients \u2013 which greatly improves practical performance. Finally we perform an extensive comparison between the performance of RADAGRAD with several widely used optimization algorithms on a variety of deep learning tasks. For image recognition with convolutional networks and language modeling with recurrent neural networks we find that RADAGRAD and in particular its variance-reduced variant achieves faster convergence."}, {"heading": "1.1 Related work", "text": "Motivated by the problem of training deep neural networks, very recently many new adaptive optimization methods have been proposed. Most computationally efficient among these are first order methods similar in spirit to ADAGRAD, which suggest alternative normalization factors [22, 29, 7]. Several authors propose efficient stochastic variants of classical second order methods such as LBFGS [6, 21]. Efficient algorithms exist to update the inverse of the Hessian approximation by applying the matrix-inversion lemma or directly updating the Hessian-vector product using the \u201cdouble-loop\u201d algorithm but these are not applicable to ADAGRAD style algorithms. In the convex setting these methods can show great theoretical and practical benefit over first order methods but have yet to be extensively applied to training deep networks.\nOn a different note, the growing zoo of variance reduced SGD algorithms [20, 8, 19] has shown vastly superior performance to ADAGRAD-style methods for standard empirical risk minimization and convex optimization. Recent work has aimed to move these methods into the non-convex setting [1]. Notably, [23] combine variance reduction with second order methods.\nMost similar to RADAGRAD are those which propose factorized approximations of second order information. Several methods focus on the natural gradient method [2] which leverages second order information through the Fisher information matrix. [15] approximate the inverse Fisher matrix using a sparse graphical model. [9] use low-rank approximations whereas [27] propose an efficient Kronecker product based factorization. Concurrently with this work, [13] propose a randomized preconditioner for SGD. However, their approach requires access to all of the data at once in order to compute the preconditioning matrix which is impractical for training deep networks. [24] propose a theoretically motivated algorithm similar to ADA-LR and a faster alternative based on Oja\u2019s rule to update the SVD.\nFast random projections. Random projections are low-dimensional embeddings \u03a0 : Rp \u2192 R\u03c4 which preserve \u2013 up to a small distortion \u2013 the geometry of a subspace of vectors. We concentrate on the class of structured random projections, among which the Subsampled Randomized Fourier Transform (SRFT) has particularly attractive properties [16]. The SRFT consists of a preconditioning step after which \u03c4 columns of the new matrix are subsampled uniformly at random as \u03a0 = \u221a p/\u03c4S\u0398D with the definitions: (i) S \u2208 R\u03c4\u00d7p is a subsampling matrix. (ii) D \u2208 Rp\u00d7p is a diagonal matrix whose entries are drawn independently from {\u22121, 1}. (iii) \u0398 \u2208 Rp\u00d7p is a unitary discrete Fourier tranansform (DFT) matrix. This formulations allows very fast implementations using the fast Fourier transform (FFT), for example using the popular FFTW package2. Applying the FFT to a p\u2212dimensional vector can be achieved in O (p log \u03c4) time. Similar structured random projections\n2http://www.fftw.org/\nhave gained popularity as a way to speed up [25] and robustify [28] large-scale linear regression and for distributed estimation [18, 17]."}, {"heading": "1.2 Problem setting", "text": "The problem considered by [10] is online stochastic optimization where the goal is, at each step, to predict a point \u03b2t \u2208 Rp which achieves low regret with respect to a fixed optimal predictor, \u03b2opt, for a sequence of (convex) functions Ft(\u03b2). After T rounds, the regret can be defined as R(T ) = \u2211T t=1 Ft(\u03b2t)\u2212 \u2211T t=1 Ft(\u03b2 opt).\nInitially, we will consider functions Ft of the form Ft(\u03b2) := ft(\u03b2) + \u03d5(\u03b2) where ft and \u03d5 are convex loss and regularization functions respectively. Throughout, the vector gt \u2208 \u2207ft(\u03b2t) refers to a particular subgradient of the loss function. Standard first order methods update \u03b2t at each step by moving in the opposite direction of gt according to a step-size parameter, \u03b7. The ADAGRAD family of algorithms [10] instead use an adaptive learning rate which can be different for each feature. This is controlled using a time-varying proximal term which we briefly review. Defining Gt = \u2211t i=1 gig > i and Ht = \u03b4Ip + (Gt\u22121 + gtg > t )\n1/2, the ADA-FULL proximal term is given by \u03c8t(\u03b2) = 1 2 \u3008\u03b2,Ht\u03b2\u3009.\nClearly when p is large, constructing G and finding its root and inverse at each iteration is impractical. In practice, rather than the full outer product matrix, ADAGRAD uses a proximal function consisting of the diagonal of Gt, \u03c8t(\u03b2) = 12 \u2329 \u03b2, ( \u03b4Ip + diag(Gt)1/2 ) \u03b2 \u232a . Although the diagonal proximal term is computationally cheaper, it is unable to capture dependencies between coordinates in the gradient terms. Despite this, ADAGRAD has been found to perform very well empirically. One reason for this is modern high-dimensional datasets are typically also very sparse. Under these conditions, coordinates in the gradient are approximately independent."}, {"heading": "2 Stochastic optimization in high dimensions", "text": "ADAGRAD has attractive theoretical and empirical properties and adds essentially no overhead above a standard first order method such as SGD. It begs the question, what we might hope to gain by introducing additional computational complexity. In order to motivate our contribution, we first present an analogue of the discussion in [11] focussing on when data is high-dimensional and dense. We argue that if the data has low-rank (rather than sparse) structure ADA-FULL can effectively adapt to the intrinsic dimensionality. We also show in Section 3.1 that ADA-LR has the same property.\nFirst, we review the theoretical properties of ADAGRAD algorithms, borrowing the g1:T,j notation[10].\nProposition 1. ADAGRAD and ADA-FULL achieve the following regret (Corollaries 6 & 11 from [10]) respectively:\nRD(T ) \u2264 2\u2016\u03b2opt\u2016\u221e p\u2211\nj=1\n\u2016g1:T,j\u2016+ \u03b4\u2016\u03b2opt\u20161 , RF (T ) \u2264 2\u2016\u03b2opt\u2016 \u00b7 tr(G1/2T ) + \u03b4\u2016\u03b2opt\u2016. (1)\nThe major difference betweenRD(T ) andRF (T ) is the inclusion of the final full-matrix and diagonal proximal term, respectively. Under a sparse data generating distribution ADAGRAD achieves an up-to exponential improvement over SGD which is optimal in a minimax sense [11]. While data sparsity is often observed in practise in high-dimensional datasets (particularly web/text data) many other problems are dense. Furthermore, in practise applying ADAGRAD to dense data results in a learning rate which tends to decay too rapidly. It is therefore natural to ask how dense data affects the performance of ADA-FULL.\nFor illustration, consider when the data points xi are sampled i.i.d. from a Gaussian distribution PX = N (0,\u03a3). The resulting variable will clearly be dense. A common feature of high dimensional data is low effective rank defined for a matrix \u03a3 as r(\u03a3) = tr(\u03a3)/\u2016\u03a3\u2016 \u2264 rank(\u03a3) \u2264 p. Low effective rank implies that r p and therefore the eigenvalues of the covariance matrix decay quickly. We will consider distributions parameterised by covariance matrices \u03a3 with eigenvalues \u03bbj(\u03a3) = \u03bb0j \u2212\u03b1 for j = 1, . . . , p.\nFunctions of the form Ft(\u03b2) = Ft(\u03b2>xt) have gradients \u2016gt\u2016 \u2264 M \u2016xt\u2016. For example, the least squares loss Ft(\u03b2>xt) = 12 (yt \u2212 \u03b2\n>xt)2 has gradient gt = xt(yt \u2212 x>t \u03b2t) = xt\u03b5t, such that \u2016\u03b5t\u2016 \u2264M . Let us consider the effect of distributions parametrised by \u03a3 on the proximal terms of full, and diagonal ADAGRAD. Plugging X into the proximal terms of (1) and taking expectations with respect to PX we obtain for ADAGRAD and ADA-FULL respectively:\nE p\u2211\nj=1\n\u2016g1:T,j\u2016 \u2264 p\u2211\nj=1\n\u221a\u221a\u221a\u221aM2E T\u2211\nt=1\nx2t,j \u2264 pM \u221a T , E tr(( T\u2211\nt=1\ngtg > t ) 1/2) \u2264M \u221a T\u03bb0 p\u2211\nj=1\nj\u2212\u03b1/2,\n(2)\nwhere the first inequality is from Jensen and the second is from noticing the sum of T squared Gaussian random variables is a \u03c72 random variable. We can consider the effect of fast-decaying spectrum: for \u03b1 \u2265 2,\u2211pj=1 j\u2212\u03b1/2 = O (log p) and for \u03b1 \u2208 (1, 2), \u2211p j=1 j \u2212\u03b1/2 = O ( p1\u2212\u03b1/2 ) .\nWhen the data (and thus the gradients) are dense, yet have low effective rank, ADA-FULL is able to adapt to this structure. On the contrary, although ADAGRAD is computationally practical, in the worst case it may have exponentially worse dependence on the data dimension (p compared with log p). In fact, the discrepancy between the regret of ADA-FULL and that of ADAGRAD is analogous to the discrepancy between ADAGRAD and SGD for sparse data.\nAlgorithm 1 ADA-LR\nInput: \u03b7 > 0, \u03b4 \u2265 0, \u03c4 1: for t = 1 . . . T do 2: Receive gt = \u2207ft(\u03b2t). 3: Gt = Gt\u22121 + gtg>t 4: Project: G\u0303t = Gt\u03a0 5: QR = G\u0303t {QR-decomposition} 6: B = Q>Gt 7: U,\u03a3,V = B {SVD} 8: 9: 10: \u03b2t+1 = \u03b2t \u2212 \u03b7V(\u03a31/2 + \u03b4I)\u22121V>gt 11: end for Output: \u03b2T\nAlgorithm 2 RADAGRAD\nInput: \u03b7 > 0, \u03b4 \u2265 0, \u03c4 1: for t = 1 . . . T do 2: Receive gt = \u2207ft(\u03b2t). 3: Project: g\u0303t = \u03a0gt 4: G\u0303t = G\u0303t\u22121 + gtg\u0303>t 5: Qt,Rt\u2190 qr_update(Qt\u22121,Rt\u22121,gt, g\u0303t) 6: B = G\u0303>t Qt 7: U,\u03a3,W = B {SVD} 8: V = WQ>\n9: \u03b3t = \u03b7(gt \u2212VV>gt) 10: \u03b2t+1 = \u03b2t\u2212\u03b7V(\u03a31/2+\u03b4I)\u22121V>gt\u2212\u03b3t 11: end for Output: \u03b2T\n3 Approximating ADA-FULL using random projections\nIt is clear that in certain regimes, ADA-FULL provides stark optimization advantages over ADAGRAD in terms of the dependence on p. However, ADA-FULL requires maintaining a p\u00d7 p matrix, G and computing its square root and inverse. Therefore, computationally the dependence of ADA-FULL on p scales with the cube which is impractical in high dimensions.\nA na\u00efve approach would be to simply reduce the dimensionality of the gradient vector, g\u0303t \u2208 R\u03c4 = \u03a0gt. ADA-FULL is now directly applicable in this low-dimensional space, returning a solution vector \u03b2\u0303t \u2208 R\u03c4 at each iteration. However, for many problems, the original coordinates may have some intrinsic meaning or in the case of deep networks, may be parameters in a model. In which case it is important to return a solution in the original space. Unfortunately in general it is not possible to recover such a solution from \u03b2\u0303t [31].\nInstead, we consider a different approach to maintaining and updating an approximation of the ADAGRAD matrix while retaining the original dimensionality of the parameter updates \u03b2 and gradients g."}, {"heading": "3.1 Randomized low-rank approximation", "text": "As a first approach we approximate the inverse square root of Gt using a fast randomized singular value decomposition (SVD) [16]. We proceed in two stages: First we compute an approximate basis Q for the range of Gt. Then we use Q to compute an approximate SVD of Gt by forming the smaller dimensional matrix B = Q>Gt and then compute the low-rank SVD U\u03a3V> = B. This is faster than computing the SVD of Gt directly if Q has few columns.\nAn approximate basis Q can be computed efficiently by forming the matrix G\u0303t = Gt\u03a0 by means of a structured random projection and then constructing an orthonormal basis for the range of G\u0303t by QR-decomposition. The randomized SVD allows us to quickly compute the square root and pseudo-inverse of the proximal term Ht by setting H\u0303\u22121t = V(\u03a3\n1/2 + \u03b4I)\u22121V>. We call this approximation ADA-LR and describe the steps in full in Algorithm 1.\nIn practice, using a structured random projection such as the SRFT leads to an approximation of the original matrix, Gt of the following form \u2225\u2225Gt \u2212QQ>Gt \u2225\u2225 \u2264 , with high probability [16] where\ndepends on \u03c4 , the number of columns of Q; p and the \u03c4 th singular value of Gt. Briefly, if the singular values of Gt decay quickly and \u03c4 is chosen appropriately, will be small (this is stated more formally in Proposition 2). We leverage this result to derive the following regret bound for ADA-LR (see C.1 for proof).\nProposition 2. Let \u03c3k+1 be the kth largest singular value of Gt. Setting the projection dimension as 4 (\u221a k + \u221a 8 log(kn) )2 \u2264 \u03c4 \u2264 p and defining = \u221a 1 + 7p/\u03c4 \u00b7 \u03c3k+1. With failure probability at most O ( k\u22121 ) ADA-LR achieves regret RLR(T ) \u2264 2\u2016\u03b2opt\u2016tr(G1/2T ) + (2\u03c4 \u221a + \u03b4)\u2016\u03b2opt\u2016 . Due to the randomized approximation we incur an additional 2\u03c4 \u221a \u2016\u03b2opt\u2016 compared with the regret of ADA-FULL (eq. 1). So, under the earlier stated assumption of fast decaying eigenvalues we can use an identical argument as in eq. (2) to similarly obtain a dimension dependence of O (log p+ \u03c4). Approximating the inverse square root decreases the complexity of each iteration from O ( p3 ) to O ( \u03c4p2 ) . We summarize the cost of each step in Algorithm 1 and contrast it with the cost of ADA-FULL in Table A.1 in Section A. Even though ADA-LR removes one factor of p form the runtime of ADA-FULL it still needs to store the large matrix Gt. This prevents ADA-LR from being a truly practical algorithm. In the following section we propose a second algorithm which directly stores a low dimensional approximation to Gt that can be updated cheaply. This allows for an improvement in runtime to O ( \u03c42p ) .\n3.2 RADAGRAD: A faster approximation\nFrom Table A.1, the expensive steps in Algorithm 1 are the update of Gt (line 3), the random projection (line 4) and the projection onto the approximate range of Gt (line 6). In the following we propose RADAGRAD, an algorithm that reduces the complexity to O ( \u03c42p )\nby only approximately solving some of the expensive steps in ADA-LR while maintaining similar performance in practice.\nTo compute the approximate range Q, we do not need to store the full matrix Gt. Instead we only require the low dimensional matrix G\u0303t = Gt\u03a0. This matrix can be computed iteratively by setting G\u0303t \u2208 Rp\u00d7\u03c4 = G\u0303t\u22121 + gt(\u03a0gt)>. This directly reduces the cost of the random projection to O (p log \u03c4) since we only project the vector gt instead of the matrix Gt, it also makes the update of G\u0303t faster and saves storage.\nWe then project G\u0303t on the approximate range of Gt and use the SVD to compute the inverse square root. Since Gt is symmetric its row and column space are identical so little information is lost by projecting G\u0303t instead of Gt on the approximate range of Gt.3 The advantage is that we can now compute the SVD in O ( \u03c43 ) and the matrix-matrix product on line 6 in O ( \u03c42p ) . See Algorithm 2 for the full procedure.\nThe most expensive steps are now the QR decomposition and the matrix multiplications in steps 6 and 8 (see Algorithm 2 and Table A.1). Since at each iteration we only update the matrix G\u0303t with\n3This idea is similar to bilinear random projections [14].\nthe rank-one matrix gtg\u0303>t we can use faster rank-1 QR-updates [12] instead of recomputing the full QR decomposition. To speed up the matrix-matrix product G\u0303>t Q for very large problems (e.g. backpropagation in convolutional neural networks), a multithreaded BLAS implementation can be used."}, {"heading": "3.3 Practical algorithms", "text": "Here we outline several simple modifications to the RADAGRAD algorithm to improve practical performance.\nCorrected update. The random projection step only retains at most \u03c4 eigenvalues of Gt. If the assumption of low effective rank does not hold, important information from the p \u2212 \u03c4 smallest eigenvalues might be discarded. RADAGRAD therefore makes use of the corrected update\n\u03b2t+1 = \u03b2t \u2212 \u03b7V(\u03a31/2 + \u03b4I)\u22121V>gt \u2212 \u03b3t, where \u03b3t = \u03b7(I\u2212VV>)gt. \u03b3t is the projection of the current gradient onto the space orthogonal to the one captured by the random projection of Gt. This ensures that important variation in the gradient which is poorly approximated by the random projection is not completely lost. Consequently, if the data has rank less than \u03c4 , \u2016\u03b3\u2016 \u2248 0. This correction only requires quantities which have already been computed but greatly improves practical performance.\nVariance reduction. Variance reduction methods based on SVRG [20] obtain lower-variance gradient estimates by means of computing a \u201cpivot point\u201d over larger batches of data. Recent work has shown improved theoretical and empirical convergence in non-convex problems [1] in particular in combination with ADAGRAD.\nWe modify RADAGRAD to use the variance reduction scheme of SVRG. The full procedure is given in Algorithm 3 in Section B. The majority of the algorithm is as RADAGRAD except for the outer loop which computes the pivot point, \u00b5 every epoch which is used to reduce the variance of the stochastic gradient (line 4). The important additional parameter is m, the update frequency for \u00b5. As in [1] we set this to m = 5n. Practically, as is standard practise we initialise RADA-VR by running ADAGRAD for several epochs.\nWe study the empirical behaviour of ADA-LR, RADAGRAD and its variance reduced variant in the next section."}, {"heading": "4 Experiments", "text": ""}, {"heading": "4.1 Low effective rank data", "text": "We compare the performance of our proposed algorithms against both the diagonal and full-matrix ADAGRAD variants in the idealised setting where the data is dense but has low effective rank. We generate binary classification data with n = 1000 and p = 125. The data is sampled i.i.d. from a Gaussian distribution N (\u00b5c,\u03a3) where \u03a3 has with rapidly decaying eigenvalues \u03bbj(\u03a3) = \u03bb0j\n\u2212\u03b1 with \u03b1 = 1.3, \u03bb0 = 30. Each of the two classes has a different mean, \u00b5c.\nFor each algorithm learning rates are tuned using cross validation. The results for 5 epochs are averaged over 5 runs with different permutations of the data set and instantiations of the random projection for ADA-LR and RADAGRAD. For the random projection we use an oversampling factor so \u03a0 \u2208 R(10+\u03c4)\u00d7p to ensure accurate recovery of the top \u03c4 singular values and then set the values of \u03bb[\u03c4 :p] to zero [16].\nFigure 1a shows the mean loss on the training set. The performance of ADA-LR and RADAGRAD match that of ADA-FULL. On the other hand, ADAGRAD converges to the optimum much more slowly. Figure 1b shows the largest eigenvalues (normalized by their sum) of the proximal matrix for each method at the end of training. The spectrum of Gt decays rapidly which is matched by the randomized approximation. This illustrates the dependencies between the coordinates in the gradients and suggests Gt can be well approximated by a low-dimensional matrix which considers these dependencies. On the other hand the spectrum of ADAGRAD (equivalent to the diagonal of G) decays much more slowly. The learning rate, \u03b7 chosen by RADAGRAD and ADA-FULL are roughly one order of magnitude higher than for ADAGRAD."}, {"heading": "4.2 Non-convex optimization in neural networks", "text": "Here we compare RADAGRAD and RADA-VR against ADAGRAD and the combination of ADAGRAD+SVRG on the task of optimizing several different neural network architectures.\nConvolutional Neural Networks. We used modified variants of standard convolutional network architectures for image classification on the MNIST, CIFAR-10 and SVHN datasets. These consist of three 5\u00d7 5 convolutional layers generating 32 channels with ReLU non-linearities, each followed by 2\u00d7 2 max-pooling. The final layer was a dense softmax layer and the objevtive was to minimize the categorical cross entropy.\nWe used a batch size of 8 and trained the networks without momentum or weight decay, in order to eliminate confounding factors. Instead, we used dropout regularization (p = 0.5) in the dense layers during training. Step sizes were determined by coarsely searching a log scale of possible values and evaluating performance on a validation set. We found RADAGRAD to have a higher impact with convolutional layers than with dense layers, due to the higher correlations between weights. Therefore, for computational reasons, RADAGRAD was only applied on the convolutional layers. The last dense classification layer was trained with ADAGRAD. In this setting ADA-FULL is computationally infeasible. The number of parameters in the convolutional layers is between 50-80k. Simply storing the full G matrix using double precision would require more memory than is available on top-of-the-line GPUs.\nThe results of our experiments can be seen in Figure 2, where we show the objective value during training and the test accuracy. We find that both RADAGRAD variants consistently outperform both ADAGRAD and the combination of ADAGRAD+SVRG on these tasks. In particular combining RADAGRAD with variance reduction results in the largest improvement for training although both RADAGRAD variants quickly converge to very similar values for test accuracy.\nFor all models, the learning rate selected by RADAGRAD is approximately an order of magnitude larger than the one selected by ADAGRAD. This suggests that RADAGRAD can make more aggressive steps than ADAGRAD, which results in the relative success of RADAGRAD over ADAGRAD, especially at the beginning of the experiments.\nWe observed that RADAGRAD performed 5-10\u00d7 slower than ADAGRAD per iteration. This can be attributed to the lack of GPU-optimized SVD and QR routines. These numbers are comparable with other similar recently proposed techniques [24]. However, due to the faster convergence we found that the overall optimization time of RADAGRAD was lower than for ADAGRAD.\nRecurrent Neural Networks. We trained the strongly-typed variant of the long short-term memory network (T-LSTM, [4]) for language modelling, which consists of the following task: Given a sequence of words from an original text, predict the next word. We used pre-trained GLOVE embedding vectors [30] as input to the T-LSTM layer and a softmax over the vocabulary (10k words) as output. The loss is the mean categorical crossentropy. The memory size of the T-LSTM units was set to 256. We trained and evaluated our network on the Penn Tree-\nbank dataset [26]. We subsampled strings of length 20 from the dataset and asked the network to predict each word in the string, given the words up to that point. Learning rates were selected by searching over a log scale of possible values and measuring performance on a validation set.\nWe compared RADAGRAD with ADAGRAD without variance reduction. The results of this experiment can be seen in Figure 3. During training, we found that RADAGRAD consistently outperforms ADAGRAD: RADAGRAD is able to both quicker reduce the training loss and also reaches a smaller value (5.62 \u00d7 10\u22124 vs. 1.52 \u00d7 10\u22123, a 2.7\u00d7 reduction in loss). Again, we found that the selected learning rate is an order of magnitude higher for RADAGRAD than for ADAGRAD. RADAGRAD is able to exploit the fact that T-LSTMs perform type-preserving update steps which should preserve any low-rank structure present in the weight matrices. The relative improvement of RADAGRAD over ADAGRAD in training is also reflected in the test loss (1.15 \u00d7 10\u22122 vs. 3.23 \u00d7 10\u22122, a 2.8\u00d7 reduction)."}, {"heading": "5 Discussion", "text": "We have presented ADA-LR and RADAGRAD which approximate the full proximal term of ADAGRAD using fast, structured random projections. ADA-LR enjoys similar regret to ADA-FULL and both methods achieve similar empirical performance at a fraction of the computational cost. Importantly, RADAGRAD can easily be modified to make use of standard improvements such as variance reduction. Using variance reduction in combination in particular has stark benefits for non-convex optimization in convolutional and recurrent neural networks. We observe a marked improvement over widely-used techniques such as ADAGRAD and SVRG, the combination of which has recently been proven to be an excellent choice for non-convex optimization [1].\nFurthermore, we tried to incorporate exponential forgetting schemes similar to RMSPROP and ADAM into the RADAGRAD framework but found that these methods degraded performance. A downside of such methods is that they require additional parameters to control the rate of forgetting.\nOptimization for deep networks has understandably been a very active research area. Recent work has concentrated on either improving estimates of second order information or investigating the effect of variance reduction on the gradient estimates. It is clear from our experimental results that a thorough\nstudy of the combination provides an important avenue for further investigation, particularly where parts of the underlying model might have low effective rank. Acknowledgements. We are grateful to David Balduzzi, Christina Heinze-Deml, Martin Jaggi, Aurelien Lucchi, Nishant Mehta and Cheng Soon Ong for valuable discussions and suggestions."}, {"heading": "A Computational Complexity", "text": "B RADA-VR: RADAGRAD with variance reduction.\nAlgorithm 3 RADA-VR\nInput: \u03b7 > 0, \u03b4 \u2265 0, \u03c4 , S number of epochs, m iterations per epoch, initial \u03b210 1: for s = 1 . . . S do 2: \u00b5 = \u2207\u2211ni=1 fi(\u03b2s0) 3: for t = 1 . . .m\u2212 1 do 4: Compute VR gradient: gt = \u2207ft(\u03b2st )\u2212\u2207ft(\u03b2s0) + \u00b5 5: Project: g\u0303t = \u03a0gt 6: G\u0303t = G\u0303t\u22121 + gtg\u0303>t 7: Qt,Rt\u2190 qr_update(Qt\u22121,Rt\u22121,gt, g\u0303t) 8: B = G\u0303>t Q 9: U,\u03a3,W = B {SVD} 10: V = WQ\u0303> 11: \u03b2st+1 = \u03b2 s t \u2212 \u03b7V(\u03a31/2 + \u03b4I)\u22121V>gt \u2212 \u03b3t 12: end for 13: \u03b2s+10 = \u03b2 s t+1 14: end for Output: \u03b2Sm"}, {"heading": "C Analysis", "text": "C.1 Regret bound for ADA-LR\nThe following proof is based on the proof for Theorem 7 in [10]. The key difference is that instead of having the square root and (pseudo-)inverse of the full matrix Gt : G 1/2 t and S \u2020 t we have the approximate square root and inverse based on the randomized SVD [16]): S\u0303t = (QQ>Gt)1/2 and S\u0303\u2020t = (QQ\n>Gt)\u22121/2. Essentially we use the proximal function \u03c8t = \u3008x, S\u0303tx\u3009 or \u03c8t = \u3008x, H\u0303tx\u3009 where we set H\u0303t = \u03b4I + S\u0303t. Here Q is the approximate basis for the range of the matrix Gt [16].\nWe first state the following facts about the relationship between G and G\u0303\u22121/2.\nLemma 3. Defining G\u0303\u22121/2 = (QQ>G)\u22121/2 we have\n(I) G\u0303\u22121/2G = (G\u22121(QQ>)G2)1/2 ,\n(II) tr((G\u22121(QQ>)G2)1/2) = tr(G\u03031/2) .\nWe also require the following Lemma which bounds the sequence of proximal terms by the trace of the final G\u0303\u22121/2.\nLemma 4 (Based on Lemma 10 in [10]).\nT\u2211\nt=1\n\u3008gt, G\u0303\u22121/2t gt\u3009 \u2264 2 T\u2211\nt=1\n\u3008gt, G\u0303\u22121/2T gt\u3009 = 2tr(G\u0303 1/2 T ). (3)\nWe are now ready to prove Proposition 2.\nProof of Proposition 2. Inspecting Lemma 6:\nR(T ) \u2264 1 \u03b7 \u03c8T (\u03b2 opt) + \u03b7 2\nT\u2211\nt=1\n\u2016f \u2032t(\u03b2t)\u20162\u03c8\u2217T\u22121 ,\nwe first bound the term \u2211T t=1 \u2016f \u2032t(\u03b2t)\u20162\u03c8\u2217T\u22121 .\nFrom [10, Proof of Theorem 7] we have that the squared dual norm associated with \u03c8t is\n\u2016x\u20162\u03c8\u2217t = \u3008x, (\u03b4I + (QQ >Gt) 1/2)\u22121x\u3009\nand thus it is clear that \u2016gt\u20162\u03c8\u2217t \u2264 \u3008gt, (QQ >Gt)\u22121/2gt\u3009. Lemma 8 shows that \u2016gt\u20162\u03c8\u2217t\u22121 \u2264 \u3008gt, S\u0303tgt\u3009 as long as \u03b4 \u2265 \u2016gt\u20162. Lemma 4 then implies that T\u2211\nt=1\n\u2016f \u2032t(\u03b2t)\u20162\u03c8\u2217T\u22121 \u2264 2tr(G\u0303 1/2 T ).\nWe now bound 2tr(G\u03031/2T ) by 2(tr(G 1/2 T ) + \u03c4\n\u221a ):\ntr(G\u0303 1/2 T )\u2212 tr(G 1/2 T ) = tr(G\u0303 1/2 T \u2212G 1/2 T ) (4)\n=\n\u03c4\u2211\nj=1\n( \u03bbj(G\u0303 1/2 T )\u2212 \u03bbj(G 1/2 T ) ) \u2212 p\u2211\nj=\u03c4+1\n\u03bbj(G 1/2 T ) (5)\n\u2264 \u03c4\u2211\nj=1\n( \u03bb1(G\u0303 1/2 T )\u2212 \u03bb1(G 1/2 T ) ) (6)\nsince \u03bbj(G\u0303T ) = 0, \u2200j > \u03c4 . Now, using the reverse triangle inequality and Theorem 5 we obtain\n\u03c4\u2211\nj=1\n( \u03bb1(G\u0303 1/2 T )\u2212 \u03bb1(G 1/2 T ) ) \u2264 \u03c4\u2211\nj=1\n\u2016G\u03031/2T \u2212G 1/2 T \u20162 (7)\n\u2264 \u03c4\u2211\nj=1\n\u221a (8)\n\u2264 \u03c4\u221a . (9)\nIt remains to show that \u03c8T (\u03b2opt) in Lemma 6 is bounded by ( \u03b4 + \u221a + tr(G 1/2 T ) ) \u2016\u03b2opt\u20162 to get the statement of Theorem 2: \u03c8T (\u03b2\nopt) = \u3008\u03b2opt, \u03b4I + (QQ>GT )1/2\u03b2opt\u3009 \u2264 \u2016\u03b2opt\u20162\u2016(QQ>GT )1/2\u20162 + \u03b4\u2016\u03b2opt\u20162\n\u2264 \u2016\u03b2opt\u20162 (\u221a + \u2016G1/2T \u2016 ) + \u03b4\u2016\u03b2opt\u20162 \u2264 \u2016\u03b2opt\u20162 (\u221a\n+ tr(G 1/2 T )\n) + \u03b4\u2016\u03b2opt\u20162\nwhere we again use the reverse triangle inequality and Theorem 5 as above.\nFinally, plugging this into the statement of Lemma 6 and setting \u03b7 = \u2016\u03b2opt\u20162 (as in Corollary 11 in [10]) we get the expression for the regret of ADA-LR as stated in Theorem 2.\nC.2 Proofs of supporting results\nProof of Lemma 3. By direct computation we have for (I) G\u0303\u22121/2G = (QQ>G)\u22121/2G\n= ((QQ>G)\u22121G2)1/2\n= (G\u22121(QQ>)\u22121G2)1/2\n= (G\u22121(QQ>)G2)1/2. and for (II)\ntr((G\u22121(QQ>)G2)1/2) = tr((Q>GQ)1/2)\n= tr((QQ>G)1/2)\n= tr(G\u03031/2).\nProof of Lemma 4. We set up the following proof by induction. In the base case:\n\u3008g1, G\u0303\u22121/21 ,g1\u3009 = tr(G\u0303 \u22121/2 1 g1g > 1 ) = tr(G\u0303 1/2 1 ) \u2264 2tr(G\u0303 1/2 1 ),\nwhere we have used (II).\nNow, assuming that the lemma is true for T \u2212 1, we get: T\u2211\nt=1\n\u3008gt, G\u0303\u22121/2t , gt\u3009 \u2264 2 T\u2211\nt=1\n\u3008gt, G\u0303\u22121/2T\u22121 gt\u3009+ \u3008gT , G\u0303 \u22121/2 T gT \u3009.\nNow using that G\u0303\u22121/2T\u22121 does not depend on t and (II): T\u22121\u2211\nt=1\n\u3008gt, G\u0303\u22121/2T\u22121 gt\u3009 = tr(G\u0303 \u22121/2 T\u22121 GT\u22121) = tr(G\u0303 1/2 T\u22121).\nTherefore we get T\u2211\nt=1\n\u3008gt, G\u0303\u22121/2t gt\u3009 \u2264 2tr(G\u03031/2T\u22121) + \u3008gT , G\u0303 \u22121/2 T gT \u3009. (10)\nWe can rewrite\ntr(G\u0303 1/2 T\u22121) = tr( ( QT\u22121Q > T\u22121GT \u2212QT\u22121Q>T\u22121gTg>T )1/2 ) (11)\nNow since range(QT\u22121) \u2282 range(QT ) and Proposition 8.5 in [16] we can use Lemma 7 with \u03bd = 1 and g = gt to obtain:\n2tr(G\u0303 1/2 T\u22121) + \u3008gT , G\u0303 \u22121/2 T ,gT \u3009 \u2264 2tr(G\u0303 1/2 T ) (12)"}, {"heading": "D Supporting Results", "text": "Theorem 5 (SRFT approximation error (Theorem 11.2 in [16])). Defining = \u221a\n1 + 7p/\u03c4 \u00b7 \u03c3k+1 the following holds with failure probability at most O ( k\u22121 )\n\u2225\u2225Gt \u2212QQ>Gt \u2225\u2225 2 \u2264 , (13)\nwhere \u03c3k+1 is the kth largest singular value of Gt, and 4 [\u221a k + \u221a 8 log(kn) ]2 \u2264 \u03c4 \u2264 p.\nLemma 6 (Proposition 2 from [10]).\nR(T ) :=\nT\u2211\nt=1\nft(\u03b2t) + \u03d5(\u03b2t)\u2212 ft(\u03b2opt)\u2212 \u03d5(\u03b2opt) \u2264 1\n\u03b7 \u03c8T (\u03b2\nopt) + \u03b7\n2\nT\u2211\nt=1\n\u2016f \u2032t(\u03b2t)\u20162\u03c8\u2217T\u22121\nLemma 7 (Lemma 8 from [10]). Let B 0. For any \u03bd such that B\u2212 \u03bdgg> 0 the following holds\n2tr((B\u2212 \u03bdgg>)1/2) \u2264 2tr(B1/2)\u2212 \u03bdtr(B1/2gg>) Lemma 8 (Lemma 9 from [10]). Let \u03b4 \u2265 \u2016g\u20162 and A 0, then\n\u3008g, (\u03b4I + A1/2)\u22121g\u3009 \u2264 \u3008g, ((A + gg>)\u2020)1/2g\u3009"}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "Adaptive stochastic gradient methods such as ADAGRAD have gained popularity in<lb>particular for training deep neural networks. The most commonly used and studied<lb>variant maintains a diagonal matrix approximation to second order information<lb>by accumulating past gradients which are used to tune the step size adaptively. In<lb>certain situations the full-matrix variant of ADAGRAD is expected to attain better<lb>performance, however in high dimensions it is computationally impractical. We<lb>present ADA-LR and RADAGRAD two computationally efficient approximations<lb>to full-matrix ADAGRAD based on randomized dimensionality reduction. They are<lb>able to capture dependencies between features and achieve similar performance to<lb>full-matrix ADAGRAD but at a much smaller computational cost. We show that the<lb>regret of ADA-LR is close to the regret of full-matrix ADAGRAD which can have<lb>an up-to exponentially smaller dependence on the dimension than the diagonal<lb>variant. Empirically, we show that ADA-LR and RADAGRAD perform similarly to<lb>full-matrix ADAGRAD. On the task of training convolutional neural networks as<lb>well as recurrent neural networks, RADAGRAD achieves faster convergence than<lb>diagonal ADAGRAD.", "creator": "LaTeX with hyperref package"}}}