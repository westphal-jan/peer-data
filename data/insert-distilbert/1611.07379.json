{"id": "1611.07379", "review": {"conference": "aaai", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Nov-2016", "title": "Randomized Mechanisms for Selling Reserved Instances in Cloud", "abstract": "selling reserved instances ( or virtual machines ) is a certain basic service in cloud computing. in this paper, we consider a more conventional flexible pricing model underlying for instance reservation, in which a customer can propose the time length relationships and number of resources of her request, while and in practice today's broadband industry, customers can currently only choose from several predefined or reservation packages. under this model, we design randomized mechanisms for customers coming online to optimize social welfare and providers'revenue.", "histories": [["v1", "Tue, 22 Nov 2016 16:03:58 GMT  (26kb)", "http://arxiv.org/abs/1611.07379v1", "Already accepted by AAAI'17"]], "COMMENTS": "Already accepted by AAAI'17", "reviews": [], "SUBJECTS": "cs.GT cs.AI", "authors": ["jia zhang", "weidong ma", "tao qin", "xiaoming sun", "tie-yan liu"], "accepted": true, "id": "1611.07379"}, "pdf": {"name": "1611.07379.pdf", "metadata": {"source": "CRF", "title": "Randomized Mechanisms for Selling Reserved Instances in Cloud", "authors": ["Jia Zhang", "Weidong Ma", "Tao Qin", "Xiaoming Sun", "Tie-Yan Liu"], "emails": ["sunxiaoming}@ict.ac.cn,", "weima@microsoft.com", "taoqin@microsoft.com", "tyliu@microsoft.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n61 1.\n07 37\n9v 1\n[ cs\n.G T\n] 2\n2 N\nov 2\nWe first consider a simple case, where the requests from the customers do not vary too much in terms of both length and value density. We design a randomized mechanism that achieves a competitive ratio 1\n42 for both social welfare and\nrevenue, which is a improvement as there is usually no revenue guarantee in previous works such as (Azar et al. 2015; Wang et al. 2015). This ratio can be improved up to 1\n11 when\nwe impose a realistic constraint on the maximum number of resources used by each request. On the hardness side, we show an upper bound 1\n3 on competitive ratio for any ran-\ndomized mechanism. We then extend our mechanism to the general case and achieve a competitive ratio 1\n42\u2308log k\u2309\u2308logT\u2309\nfor both social welfare and revenue, where T is the ratio of the maximum request length to the minimum request length and k is the ratio of the maximum request value density to the minimum request value density. This result outperforms the previous upper bound 1\nCkT for deterministic mechanisms\n(Wang et al. 2015). We also prove an upper bound 2 log 8kT for any randomized mechanism. All the mechanisms we provide are in a greedy style. They are truthful and easy to be integrated into practical cloud systems."}, {"heading": "Introduction", "text": "Cloud computing is transforming today\u2019s IT industry and more and more enterprise customers and personal customers have moved their computational tasks from local devices to cloud. Among all kinds of cloud service models, infrastructure as a service (IaaS) is the most basic one; among many\n\u2217This work was supported in part by the National Natural Science Foundation of China Grant 61222202, 61433014, 61502449, 61602440 and the China National Program for support of Topnotch Young Professionals. Copyright c\u00a9 2017, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\nIaaS services, virtual machines/instances are the most basic ones. Two pricing models1 are adopted to sell virtual instances, the pay-as-you-go model for on-demand instances and the subscription model for reserved instances. The first model charges customers a fixed per-instance-hour rate for their utilization of instance hours. Compared with the first model, the subscription model offers two benefits to customers: (1) Customers enjoy a much lower per-instance-hour price by reserving instances in advance; (2) it is more reliable to reserve some instances before hands for expected future usage, since there may be no on-demand instances available if one goes to the cloud to request on-demand instances in the last minute.\nA limitation of the current subscription model in practice is that there are only a few reservation options available to customers. For example, Amazon\u2019s EC2 only provides 1-year and 3-year reservations for customers2. However, many cloud customers demand short-term and flexible reservations. For example, a researcher needs to run many experiments in the last week before the paper deadline of an academic conference and wants to reserve 100 virtual instances for that week. Certainly, she does not want to reserve for 1 or 3 years3. In this work, we study a more flexible pricing model in which the customers can define the reservation option by themselves."}, {"heading": "Model", "text": "We first formally define the model studied in this work and introduce some notations for further use.\nConsider a cloud provider with C reserved instances to be sold to customers. Each customer has a request to reserve some instances. We denote this request as a reservation or a job. Each reservation j is characterized by a 5-tuple (aj , dj , tj , cj, vj), where aj and dj are earliest start time4\n1There is another one, the spot pricing, which is not widely adopted by cloud providers.\n2This business model is still used when this paper is composed. 3Actually, this leads to the formation of (AWS) Reserved Instance Marketplace where users sell their redundant instances. http://goo.gl/hwzXx9.\n4aj is not the submission time of the reservation. Since we consider reservation, the submission time of the reservation is assumed to be no later than aj .\nand deadline respectively, tj is the reservation length (certainly, tj \u2264 dj \u2212 aj), cj is the number of resources needed by j, and vj is the value that the customer can obtain if j is finished on time. For convenience, let \u03c1j be the value density of reservation j, i.e., \u03c1j =\nvj cjtj .\nConsidering that the length and value density of a reservation cannot be arbitrary large/small in practice, we assume \u03c1j \u2208 [\u03c1min, \u03c1max] and tj \u2208 [tmin, tmax] for any reservation j. We also denote k = \u03c1max\u03c1min and T = tmax tmin\n. Without loss of generality we assume \u03c1min = tmin = 1. For any reservation set S, we denote v(S) as \u2211\nj\u2208S vj . We consider the online setting, in which customers come one by one in online style and the cloud provider does not have knowledge about future customers (or reservations). When a customer comes and submits a reservation j, the cloud provider needs to immediately and irrevocably decide whether to accept this reservation or not and return a price pj for this reservation if it is accepted. Immediate response is necessary as customers usually do not have patience to wait for response. Waiting for a long time will affect the user experience. More seriously, a delayed rejection may be a disaster for some tasks if their deadlines are approaching.\nWe assume all customers are rational, i.e., they are selfinterested and always trying to maximize their utilities. For any customer, if her reservation j is rejected, her utility is 0; otherwise, the utility is vj \u2212 pj . The customer may cheat the provider and misreport her reservation if doing so can increase her utility. Suppose the reported information of j is (a\u0302j , d\u0302j , t\u0302j, c\u0302j , v\u0302j). For a rational customer, we can safely assume a\u0302j \u2265 aj , d\u0302j \u2264 dj , t\u0302j \u2265 tj and c\u0302j \u2265 cj; otherwise, the reservation j may terminate unexpectedly and be charged even if it is not completed. We notice that these assumptions are also adopted in (Hajiaghayi 2005) and (Wang et al. 2015).\nTo avoid the strategic manipulations by the customers, we consider truthful (or strategyproof) mechanisms in this work. A mechanism is truthful if for any customer, she will truthfully disclose her reservation, no matter how other customers behave. This implies that truthful report will maximize the customer\u2019s utility.\nWe focus on designing truthful mechanisms to optimize both the social welfare and the provider\u2019s revenue. For any mechanism M , let J(M) stand for the reservations that M accepts. The social welfare gained by M is denoted as v(M), which equals the total value of reservations in J(M). We use r(M) to stand for the revenue obtained from M , where r(M) equals \u2211\nj\u2208J(M) pj ."}, {"heading": "Our Contributions", "text": "To measure the performance of our mechanisms, we employ the concept of competitive ratio. Given any input instance I (a sequence of reservations and corresponding information), suppose OPT (I) is the optimal mechanism. Let E(v(M(I))) stand for the expected social welfare gained by a randomized mechanism M . We say M achieves a competitive ratio c for social welfare if and only if minI E(v(M(I))) v(OPT (I)) \u2265 c. Similarly, we can define competitive\nratio for revenue. In this work, we design randomized mechanisms for selling reserved instances. Our results are summarized as follows. 5\n(i) We first consider a simple case, in which k \u2264 2 and T \u2264 2. Although the constraint is strong, this case is useful when reservations are not varying too much. For this case, we design a truthful randomized mechanism that achieves a constant ratio 142 for both social welfare and revenue. When we impose a realistic constraint on the number of resources used by each reservation j, i.e., cjC \u2264 \u03b1 \u2264 1 2 ,\nthe ratio can be improved to 1\u2212\u03b111\u2212\u03b1 . On the hardness side, we prove an upper bound 13 on competitive ratio for all randomized mechanisms.\n(ii) We then extend our mechanism to general k and T , and design a truthful mechanism whose competitive ratio is\n1 42 log\u2308k\u2309 log\u2308T\u2309 while the upper bound of deterministic mechanism is 1CkT (Wang et al. 2015). The ratio works for both social welfare and revenue. We also show an upper bound for the general case: no randomized mechanism can achieve a competitive ratio better than 2log 8kT .\nThe mechanisms proposed in this work have two advantages.\n\u2022 They can be easily integrated into real system. It is always a concern that randomized mechanisms are hard to be implemented in practice. This is not a problem for our mechanisms. After generating several random parameters, our mechanisms calculate a threshold price for every reservation using the submitted parameters and accept it if its value is larger than the price and we have enough resources for it.\n\u2022 They achieve the same performance guarantee for both social welfare and revenue. Previous works in related fields, such as (Azar et al. 2015; Wang et al. 2015; Ghodsi, Haghpanah, and Hajiaghayi ), usually only care about social welfare, and there is no guarantee for revenue. Although social welfare is an important measurement for mechanism design, clearly revenue is much more important for cloud providers."}, {"heading": "Related Work", "text": "Our work is related to both online mechanism design (Witkowski 2011; Chandra et al. 2015) and cloud computing (Wang et al. 2015; Zhang et al. 2015). We only review the most related ones in this part.\nIn (Wang et al. 2015), the authors study the same model as us. Truthful deterministic mechanisms are designed under the condition that the number of resources used by each reservation is constrained. For general case, an upper bound\n1 CkT for deterministic algorithms is provided. As aforementioned, their mechanisms do not provide any guarantee to provider\u2019s revenue.\nTruthful online mechanisms for reusable or time sensitivity goods have been well studied (Friedman and Parkes 2003; Porter 2004;\n5Note that the base of all log terms in this work is 2 by default.\nLavi and Nisan 2005; Hajiaghayi 2005; Gerding et al. 2011; Robu et al. 2013; Wu et al. 2014). Among these works, auction based models are adopted in (Friedman and Parkes 2003; Lavi and Nisan 2005; Hajiaghayi 2005). In their models, the seller does not need to make immediate responses to buyers: a buyer needs to wait until the deadline of her reservation, and payment is determined when the deadline passed. In (Porter 2004), the author only considers the one resource case. Except (Hajiaghayi 2005), the other three works only care about the social welfare and there is no guarantee for revenue. Compared to these models, our setting (immediate response with both social welfare and revenue guarantee) is more appropriate for cloud computing.\nThere are many works that concern online resource allocation for cloud computing (Zaman and Grosu 2012; Zhang et al. 2013; Shi et al. 2014; Mashayekhy et al. 2015; Zhang et al. 2015; Wang, Liang, and Li 2015). Among these works, the pay-as-you-go model is considered in (Mashayekhy et al. 2015), and authors in (Zhang et al. 2013) propose a framework for cloud resource allocation when agents\u2019 value functions are continuous and concave. In (Zhang et al. 2015), a more general scheduling problem is studied. The authors also take both social welfare and revenue into consideration. However, the their competitive ratios are related to the total amount of resources. In (Wang, Liang, and Li 2015), the authors propose online strategies to reserve instances without any a priori knowledge of future demands. Those strategies are optimal when considering cost management.\nIn (Lucier et al. 2013; Jain et al. 2015; Azar et al. 2015), mechanisms design for scheduling problem with commitments is studied. Those mechanisms proposed either complete a reservation or reject it when there is enough time for this reservation to be completed before deadline. In (Jain et al. 2015), the authors study offline settings and design a near-optimal mechanism with commitments. In (Lucier et al. 2013), a heuristic truthful mechanism for online scheduling is proposed, but no formal bound of competitive ratio is given. In (Azar et al. 2015), the authors follow (Lucier et al. 2013) and design truthful online mechanisms with a constant competitive when reservations are slack enough.\nIn this work, the number of resources requested by a reservation is fixed and determined by the customer. However, in some scenarios, the customer only provides the total size (number of resources times length) of her reservation, and it is the cloud scheduler that determines how many resources are allocated to process this reservation. Those reservations are called malleable reservations. There are some works in this fields, such as (Carroll and Grosu 2010; Kell and Havill 2014).\nAll upper bounds in this work are proved by employing Yao\u2019s Min-Max Principle (Yao 1977). This method is adopted in many works to show upper bounds of randomized algorithms, such as (Karp, Vazirani, and Vazirani 1990; Mehta et al. 2007)."}, {"heading": "Warmup: A Simple Case", "text": "In this section, as a warmup, we investigate a simple case, in which k = T = 2. That is, the reservations do not vary too much in terms of their value densities and lengths: the maximal length (value density) is twice of the minimal length (value density). We present a randomized mechanism that is truthful and achieves a competitive ratio 142 for both social welfare and revenue. The mechanism is shown in Algorithm 1 and we call it RANDOM-PRICING.\nAlgorithm 1: RANDOM-PRICING Input : A sequence of reservations. 1 Uniformly choose a number from {0, 1}, and let it be i. 2 while a reservation l comes online do 3 Set pl = \u03c1mintl \u00b7max { ( C 2 )i , cl }\n4 if vl \u2265 pl and there are enough instances and time for reservation l in [al, dl] then 5 Accept l and schedule it as early as possible. 6 Charge the price pl.\n7 else Reject l.\nAs we can see, this mechanism is simple and clean. The mechanism first generates a random bit, and for each reservation, it sets a threshold price pl based on the random bit and the information submitted. The reservation will be filtered and rejected if its value is less than the threshold price. It will be accepted if and only if it passes the filtration and its requested resources are available during the reservation period.\nNote that the filtration by setting a random threshold price is critical to guarantee the performance of the mechanism in the worst case. Without the filtration, since the number of resources requested by a reservation can vary from 1 to C, accepting a low-value reservation may exclude a reservation with much more value, which leads to a low utilization rate of the cloud and consequently, a bad performance in the worst case. With the filtration, we can ensure the good utilization of the cloud, which can be intuitively explained as follows.\n\u2022 When i = 1, we consider the case that all reservations need more than C/2 machines. If a reservation l passes the filtration but is rejected, this must be because another accepted reservation has already occupied l\u2019s time interval. Because only reservation j with value no less than \u03c1mintj \u00b7 max{C/2, cj} can pass filtration, the accepted reservation has a relatively large value. Thus, the cloud is well utilized.\n\u2022 When i = 0, we consider the case that all reservations need no more than C/2 machines. If a reservation l passes the filtration but is rejected, since cl \u2264 C/2, at least half of the total resources has been occupied by other reservations. Thus, the cloud is well utilized.\nTo formally analyze the mechanism, we first define some notations. Let OPT0 stand for the optimal allocation when\nonly those reservations needing no more than C/2 resources are taken into consideration, and OPT1 denote the optimal allocation when only those reservations needing more than C/2 resources are considered. It is easy to see that v(OPT0) + v(OPT1) \u2265 v(OPT ). Let M be the allocation of reservations accepted by RANDOM-PRICING and let M0 (resp. M1) denote the allocation of reservations when i = 0 (resp. i = 1). Let E(v(M)) denote the expectation of the total value of reservations accepted by RANDOMPRICING. Clearly, E(v(M)) = 12 (v(M0) + v(M1)). Let Li = J(OPTi) \\ J(Mi), for i \u2208 {0, 1}.\nTheorem 1. For k = 2 and T = 2, the mechanism RANDOM-PRICING\n(i) is truthful; (ii) achieves a competitive ratio 142 for social welfare, i.e.,\nE(v(M)) \u2265 142v(OPT ) and\n(iii) achieves a competitive ratio 142 for revenue.\nProof. Recall that we have assumed \u03c1min = tmin = 1 without loss of generality, thus \u03c1max = tmax = 2. (i) Truthfulness. Since in our model we assume for any reservation j, a\u0302j \u2265 aj , d\u0302j \u2264 dj , t\u0302j \u2265 tj and c\u0302j \u2265 cj (see the model formulation part). We only need to show that j has no incentive to report information with a\u0302j > aj , d\u0302j < dj , t\u0302j > tj or c\u0302j > cj . Setting a\u0302j > aj or d\u0302j < dj cannot improve her utility; instead, it increases the risk that j will be rejected, since RANDOM-PRICING will try to find an feasible interval to schedule in [a\u0302j , d\u0302j ]. Besides, because the price is set as \u03c1mintj \u00b7max { ( C 2 )i , cj } , a larger value for tj and cj can only decrease the utility. At last, since the price does not depend on vj , the customer also has no incentive to cheat on vj . Thus RANDOM-PRICING is a truthful mechanism. (ii) Social Welfare. The following analysis is based on the fact that if a reservation j is accepted by RANDOMPRICING, the corresponding customer will always choose to pay the fee and j will be scheduled, as pj is always no more than vj .\nWhen analyzing the competitive ratio, we only need to consider the worst case of the mechanism. Thus we can assume6 all reservations accepted by the mechanism have value density \u03c1min, and reservations accepted by OPT have value density 2.\nFirst, we consider the case of i = 1 in RANDOMPRICING. For any reservation l in L1, there must be at least one reservation (denoted as j) accepted by RANDOMPRICING that is in conflict with l. Here the conflict means the reservation j (accepted by RANDOM-PRICING) occupies at least one resource that is allocated to l in OPT1 in corresponding period. We know the value vj is at least tj \u00b7 max {C/2, cj}. There may be multiple reservations in L1 that are in conflict with j; denote them as a set Fj .\n6 If OPT accepts a reservation (e.g., j) with value density less than 2, we can construct another allocation OPT \u2032 which accepts exactly the same reservations as OPT except changing the value density of reservation j to 2. Clearly, v(OPT \u2032) > v(OPT ), and then we can conduct analysis based on OPT \u2032.\nLet [r, r+tj ] be the time interval that RANDOM-PRICING allocates to reservation j. All reservations in Fj must be allocated in the interval [r\u22122, r+ tj+2] by OPT1, otherwise they can\u2019t conflict with j. In addition, those reservations in Fj are compatible with each other, i.e., they are not in conflict with each other. Thus, the total value of Fj is at most 2C(4 + tj), and then\nvj v(Fj) \u2265 tj \u00b7max {C/2, cj} 2C(4 + tj) \u2265 1 20 . (1)\nThe last inequality is obtained as tj4+tj \u2265 1 5 . We further have\nv(M1) = \u2211\nj\u2208J(M1)\nvj \u2265 1\n20\n\u2211\nj\u2208J(M1)\nv(Fj) \u2265 1\n20 v(L1). (2)\nThis also implies v(L1) \u2264 2021v(OPT1), as OPT1 = L1 \u222a M1. Thus we have v(M1) = v(OPT1) \u2212 v(L1) \u2265 1 21v(OPT1).\nSecond, we consider the case of i = 0. Similar to the case of i = 1, if we can show v(M0) \u2265 120v(L0), there must be v(M0) \u2265 1 21v(OPT0).\nFor any l \u2208 L0, suppose it is allocated in time interval [r, r + tl] by OPT0. Since it cannot be accepted by RANDOM-PRICING, at least C \u2212 cl + 1 resources are occupied by some reservations in the interval [r, r + tl] (maybe not the full interval). Denote those reservations as Jr+tlr and those occupied resources as M r+tlr . Now we distribute vl evenly onto the resources in M r+tlr . As we can see, each reservation j \u2208 Jr+tlr gets a distributed value no more than vlcj C/2 . Do the same operation on all the reservations in L0. Consider an arbitrary reservation j in J(M0). Suppose it is allocated in the interval [s, s+tj]. As we can see, only reservations allocated in interval [s\u22122, s+ tj+2] by OPT0 have the chance to distribute a value to reservation j. As these reservations are compatible with each other, they have a total value of at most 2C(tj + 4). Thus the value distributed on j is at most 2C(tj+4)cjC/2 = 4(tj + 4)cj . Denote this value as Dj . We have\nvj Dj \u2265 tj \u00b7max {1, cj} 4(tj + 4)cj \u2265 1 20 . (3)\nThus,\nv(M0) = \u2211\nj\u2208J(M0)\nvj \u2265 1\n20\n\u2211\nj\u2208J(M0)\nDj \u2265 1\n20 v(L0). (4)\nConsequently, v(M0) \u2265 121v(OPT0). In summary, we have\nE(v(M)) = 1\n2 v(M0) +\n1 2 v(M1)\n\u2265 1\n42 (v(OPT0) + v(OPT1)) \u2265\nv(OPT )\n42 .\n(5)\n(iii) Revenue. Similar to the above proof for social welfare, we assume all the reservations accepted by RANDOMPRICING have value density \u03c1min for the worst case analysis. Under this assumption, we have E(v(M)) \u2265 v(OPT )\n42 . On the other hand, \u03c1min is the value density that\nused by RANDOM-PRICING to calculate price. This means E(r(M)) \u2265 v(OPT )42 . It is clear that the optimal revenue will never exceed the optimal social welfare as all customers are rational and the price of a reservation is no larger than its value. Thus, when considering revenue, RANDOM-PRICING also achieves a competitive ratio 142 .\nRemark 1. Actually, the mechanism RANDOM-PRICING works for any k, T and can achieve a competitive ratio\n1 8Tk+4k+2 for social welfare and revenue. This can be shown by slight modifications on above proof: when i = 1, Equation (1) changes to vjv(Fj) \u2265 tj \u00b7max{C/2,cj} kC(2T+tj) \u2265 14Tk+2k , and similarly, Equation (3) changes to vjDj \u2265 1\n4Tk+2k when i = 0. Clearly, the RANDOM-PRICING has a better competitive ratio than 142 when k, T \u2264 2. Remark 2. In (Wang et al. 2015), the authors consider the case when cjC is bounded. Actually, if we impose a similar constraint that cjC \u2264 \u03b1 \u2264 1 2 , we can design a truthful mechanism to improve the competitive ratio. Consider the following mechanism. When a reservation l comes, we accept it if there are enough time and resources available, and charge the customer pl = \u03c1mincltl. We call this mechanism GREEDY. Although GREEDY is very simple, its performance is guaranteed, as shown in the following theorem. Due to the space limitation, we put the proof in the supplemental material. Theorem 2. If k = T = 2 and cjC \u2264 \u03b1 \u2264 0.5 for any reservation j, the mechanism GREEDY is truthful and achieves a competitive ratio 1\u2212\u03b111\u2212\u03b1 for both social welfare and revenue."}, {"heading": "Hardness Analysis", "text": "In this subsection we show an upper bound on competitive ratio for any (randomized) mechanism when k = T = 2. We first review a powerful tool - Yao\u2019s Min-Max Principle, which is usually adopted to analyze the performance of randomized algorithms. Yao\u2019s Min-Max Principle Given a problem P , A is the set of all the deterministic algorithms to solve P . Suppose I is an input distribution. For any I \u2208 I, let R(I) (resp. A(I)) stand for the competitive ratio of a randomized (resp. deterministic) algorithm R (resp. A). Then we have minI\u2208I R(I) \u2264 maxA\u2208A EI\u223cI(A(I)).\nLeveraging Yao\u2019s Min-Max Principle, we can get the following result. Theorem 3. For k = T = 2, no (randomized) mechanism can achieve a competitive ratio better than 13 for social welfare.\nProof. Consider the following 6 bundles of reservations: B1 = {(2\u2212 \u03b5, 3 + \u03b5, 1 + 2\u03b5, C/2 + 1, (1 + 2\u03b5)(C/2 + 1))},\nB2 = {(1.5, 3.5, 2, C/2 + 1, 2(C/2 + 1))},\nB3 = {(1.5, 3.5, 2, C/2 + 1, 4(C/2 + 1))},\nB4 = {(0.5, 2.5, 2, C/2 + 1, 4(C/2 + 1)),\n(2.5, 4.5, 2, C/2 + 1, 4(C/2 + 1))},\nB5 = {(0.5, 2.5, 2, C, 4C), (2.5, 4.5, 2, C, 4C)},\nB6 = {(0, 2, 2, C, 4C), (3, 5, 2, C, 4C),\n(2, 3, 1, C, 2C)}.\nIt is easy to check that the reservations in the same bundle are compatible to each other. Now we construct the input distribution I which contains six input instance I1, \u00b7 \u00b7 \u00b7 , I6. In Ii, the reservations are submitted exactly in the order B1 \u2192 B2 \u2192 \u00b7 \u00b7 \u00b7 \u2192 Bi and their submission time is earlier than time 0. Jobs in the same bundle come at the same time. The input distribution I is constructed by uniformly choosing one instance from I1 to I6. Any valid deterministic mechanism must belong to one of following patterns.\n1. Accept all reservations in only one bundle from B1 to B6; 2. Choose 2 compatible reservations from B4, B5 and B6 to\naccept.\nBesides, we can find that the optimal allocation on input Ii is to accept all reservations in Bi. Enumerating all deterministic mechanisms, we can easily conclude that the best one is to accept the reservation in B1 for any input instance. Thus, when \u03b5 \u2192 0 and C is large enough, the expected competitive ratio of the optimal deterministic algorithm is\nlim \u03b5\u21920,C\u2192\u221e\n1\n6\n6 \u2211\ni=1\nv(B1)\nOPT (Ii)\n= 1\n6\n(\n1 + 1\n2 +\n1 4 + 1 8 + 1 16 + 1 20\n)\n= 1\n3 \u2212\n1\n480 .\n(6)\nAccording to Yao\u2019s Min-Max Principle, 13 \u2212 1 480 is an upper bound for any randomized mechanism.\nMechanism for General k and T In this section, we consider the general case in which k and T can be arbitrary large. We first present a truthful randomized mechanism with competitive ratio 142\u2308log k\u2309\u2308log T\u2309 for both social welfare and revenue. We then show that no randomized mechanism can achieve a ratio better than 2log 8kT . Note that the base of all log terms is 2 in this section.\nThe mechanism, named as BINARY-FILTER, is shown in Algorithm 2. It randomly chooses three integers u, v and i, and sets a price for each reservation based on these three values. Reservations whose values are less than corresponding prices are filtered out. Then rest reservations are scheduled greedily.\nAlgorithm 2: BINARY-FILTER Input : A sequence of reservations. 1 Uniformly choose an integer u from [1, \u2308log k\u2309], and an integer v from [1, \u2308logT \u2309]. 2 Uniformly choose an integer i from {0, 1}. 3 while a reservation l comes online do 4 Set pl = 2u\u22121 \u00b7max { ( C 2 )i , cl } \u00b7max{2v\u22121, tl}.\n5 if l can be scheduled in [al, dl] and vl \u2265 pl then 6 Accept l and schedule it as early as possible.\n7 else Reject l.\nLet Juv denote the set of reservations whose value densities are located in [2u\u22121, 2u] and lengths are located in\n[2v\u22121, 2v]. Denote the optimal allocation on Juv as OPTuv and denote Muv as the allocation obtained by BINARYFILTER when u and v are sampled. We can prove a relationship between E(v(Muv)) and v(OPTuv) which is shown in Lemma 1. As the proof is constructed based on that of Theorem 1, we omit it to avoid duplication. Full proof can be found in the supplemental material. Lemma 1. For any 1 \u2264 u \u2264 \u2308log k\u2309 and 1 \u2264 v \u2264 \u2308logT \u2309, E(v(Muv)) \u2265 1 42v(OPTuv)\nTheorem 4. The mechanism BINARY-FILTER (i) is truthful;\n(ii) achieves a competitive ratio 142\u2308log k\u2309\u2308log T\u2309 for social welfare and\n(iii) achieves a competitive ratio 142\u2308log k\u2309\u2308log T\u2309 for revenue.\nProof. (i) Truthfulness. Similar to that of Theorem 1, for a customer with jobs l will not cheat on al, dl, cl and vl, thus we only need to show that she will not misreport with t\u0302l > tl. When tl < 2j\u22121, pl is independent of tl; when tl \u2265 2\nj\u22121, a larger value for t\u0302l will increase pl. Thus in either case, the customer will truthfully report tl. (ii) Social Welfare. According to Lemma 1,\nE(v(M)) = 1\n\u2308log k\u2309\u2308log T \u2309\n\u2308log k\u2309 \u2211\ni=1\n\u2308log T\u2309 \u2211\nj=1\nE(v(Muv))\n\u2265 1\n42\u2308log k\u2309\u2308log T \u2309\n\u2308log k\u2309 \u2211\ni=1\n\u2308logT\u2309 \u2211\nj=1\nv(OPTuv)\n\u2265 v(OPT )\n42\u2308log k\u2309\u2308log T \u2309 .\n(7)\n(iii) Revenue. The proof is similar to that of Theorem 1.\nRemark 3. It has showed that no deterministic algorithm could achieve a competitive ratio better than 1kCT (Wang et al. 2015). Clearly, in terms of the worst case, BINARY-FILTER achieves much better performance than any deterministic algorithms for large k, C and T . Remark 4. If cjC \u2264 \u03b1 \u2264 1 2 for all j, we can modify the BINARY-FILTER mechanism by removing line 2 in Algorithm 2 and setting pl = 2u\u22121cl max{2v\u22121, tl}. This modified mechanism achieves a competitive ratio 1\u2212\u03b1 (11\u2212\u03b1)\u2308log k\u2309\u2308log T\u2309 for social welfare and revenue."}, {"heading": "Hardness Analysis", "text": "Theorem 5. For general k and T , no (randomized) mechanism can achieve a competitive ratio better than 2log 8kT for social welfare.\nProof. We prove this theorem by using Yao\u2019s Min-Max Principle as for the 2-bounded case. To use the Yao\u2019s MinMax Principle, we should construct an input distribution I. Without loss of generality, we assume that C is an even integer. Given two positive integers m and n, we first construct m+ n+ 2 bundles of reservations B1, \u00b7 \u00b7 \u00b7 , Bm+n+2:\nBi =\n    \n   \n{(2 n \u2212 2 i\u22121 , 2 n + 2 i\u22121 , 2 i , C/2 + 1, 2 i\u22121 (C + 2))}, 1 \u2264 i \u2264 n,\n{(2 n\u22121 , 2 n + 2 n\u22121 , 2 n , C/2 + 1, 2 i\u22121 (C + 2))}, n + 1 \u2264 i \u2264 n + m,\n{(2 n\u22121 , 2 n + 2 n\u22121 , 2 n , C, 2 i\u22121 C)}, i = m + n + 1,\n{(0, 2 n , 2 n , C, 2 i\u22122 C), (2 n , 2 2n , 2 n , C, 2 i\u22122 C)}, i = m + n + 2.\nWe can find that for the first n bundles, each reservation has a value density 1 and the running time changes w.r.t. i. For Bn+1 to Bn+m, the running time of each reservation keeps unchanged, i.e., 2n, but the value density increases w.r.t. i. Furthermore, only the reservations in the last two bundles use C resources. It is easy to check that T = 2n\u22121 and k = 2m for the reservations in these bundles. Most importantly, we can find that reservations in different bundles are conflict with each other, as all reservations are tight and valid time intervals of reservations in different bundles overlap with each other. These properties are the preliminary of following analysis.\nThe input distribution I containsn+m+2 input instances I1, \u00b7 \u00b7 \u00b7 , In+m+2. In the input instance Ii, reservations come exactly as the order B1 \u2192 B2 \u2192 \u00b7 \u00b7 \u00b7 \u2192 Bi. All reservations are submitted before time 0 and reservations in the same bundle have the same submission time. Each input instance is drawn uniformly from the distribution I.\nSupposeA is an arbitrary deterministic algorithm. For any input instance I , if A accepts a reservation in Bj , it cannot accept any reservation in other bundles as reservations in different bundles are conflict with each other. As A is deterministic, we can conclude that A will always accept the reservations in Bj (if the input instance contains Bj) or accept nothing (if the input instance does not contain Bj) for any input instance.\nClearly, when C is large enough, the competitive ratio of A on input instance Ii is\nA(Ii) =\n\n\n\n0, i < j\n2j\u22121 2i\u22121 . j \u2264 i \u2264 m+ n+ 2\n(8)\nThus we have\nEI\u223cI(A(I)) = 1\nn+m+ 2\nn+m+2 \u2211\ni=1\nA(Ii)\n= 1\nn+m+ 2\nn+m+2 \u2211\ni=j\n1\n2i\u2212j =\n1\nn+m+ 2\n(\n2\u2212 1\n2n+m+2\u2212j\n)\n.\n(9)\nAs we can see, when A selects the reservation in B1, that is j = 1, EI\u223cI(A(I)) is maximized. That is to say\nmax A\u2208A\nEi\u223cI(A(I)) = 1\nn+m+ 2\n(\n2\u2212 1\n2n+m+1\n)\n\u2264 2\nn+m+ 2 =\n2\nlog 8kT .\n(10)\nThe last equality is obtained as n = logT + 1 and m = log k.\nApplying the Yao\u2019s Min-Max Principle, we finish the proof.\nRemark 5. Theorem 5 does not imply Theorem 3, as the input distribution constructed in the proof of Theorem 5 can only produce an upper bound at least 0.3875 for k = T = 2, which is weaker than 13 in Theorem 3."}, {"heading": "Future Work", "text": "In this work, we have designed randomized mechanisms for instance reservation in cloud. Our mechanisms are simple and truthful, and have performance guarantee for both social welfare and revenue. There are several directions to explore in the future.\nFirst, the competitive ratios of our mechanisms do not match the upper bound we provided. It is interesting to study whether there exist some methods to narrow down this gap between the upper bound and the lower bound.\nSecond, as mentioned in the introduction, malleable reservations, which allow the mechanism to decide the number of resources to allocate to a reservation, have been studied in other settings. It is interesting to introduce malleable reservations into instance reservation in cloud and design mechanisms to optimize social welfare and revenue."}, {"heading": "IEEE.", "text": "[Chandra et al. 2015] Chandra, P.; Narahari, Y.; Mandal, D.; and Dey, P. 2015. Novel mechanisms for online crowdsourcing with unreliable, strategic agents. In Twenty-Ninth AAAI Conference on Artificial Intelligence.\n[Friedman and Parkes 2003] Friedman, E. J., and Parkes, D. C. 2003. Pricing wifi at starbucks: issues in online mechanism design. In Proceedings of the 4th ACM conference on Electronic commerce, 240\u2013241. ACM.\n[Gerding et al. 2011] Gerding, E. H.; Robu, V.; Stein, S.; Parkes, D. C.; Rogers, A.; and Jennings, N. R. 2011. Online mechanism design for electric vehicle charging. In Proc. 10th Int. Conf. Aut. Agents and Multi-Agent Systems (AAMAS11 2:1\u20138.\n[Ghodsi, Haghpanah, and Hajiaghayi ] Ghodsi, M.; Haghpanah, N.; and Hajiaghayi, M. Online job scheduling mechanisms: How bad are restarts?\n[Hajiaghayi 2005] Hajiaghayi, M. T. 2005. Online auctions with re-usable goods. In Proceedings of the 6th ACM conference on Electronic commerce, 165\u2013174. ACM.\n[Jain et al. 2015] Jain, N.; Menache, I.; Naor, J. S.; and Yaniv, J. 2015. Near-optimal scheduling mechanisms for deadline-sensitive jobs in large computing clusters. ACM Transactions on Parallel Computing 2(1):3.\n[Karp, Vazirani, and Vazirani 1990] Karp, R. M.; Vazirani, U. V.; and Vazirani, V. V. 1990. An optimal algorithm for online bipartite matching. In Proceedings of the twenty-second annual ACM symposium on Theory of computing, 352\u2013358.\n[Kell and Havill 2014] Kell, N., and Havill, J. 2014. Improved upper bounds for online malleable job scheduling."}, {"heading": "Journal of Scheduling 1\u201318.", "text": "[Lavi and Nisan 2005] Lavi, R., and Nisan, N. 2005. Online ascending auctions for gradually expiring items. In Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, 1146\u20131155. Society for Industrial and Applied Mathematics.\n[Lucier et al. 2013] Lucier, B.; Menache, I.; Naor, J. S.; and Yaniv, J. 2013. Efficient online scheduling for deadlinesensitive jobs. In Proceedings of the twenty-fifth annual ACM symposium on Parallelism in algorithms and architectures, 305\u2013314. ACM.\n[Mashayekhy et al. 2015] Mashayekhy, L.; Nejad, M. M.; Grosu, D.; and Vasilakos, A. 2015. An online mechanism for resource allocation and pricing in clouds. Computers, IEEE Transactions on PP(99):1\u20131.\n[Mehta et al. 2007] Mehta, A.; Saberi, A.; Vazirani, U.; and Vazirani, V. 2007. Adwords and generalized online matching. Journal of the ACM (JACM) 54(5):22.\n[Porter 2004] Porter, R. 2004. Mechanism design for online real-time scheduling. In Proceedings of the 5th ACM conference on Electronic commerce, 61\u201370. ACM.\n[Robu et al. 2013] Robu, V.; Gerding, E. H.; Stein, S.; Parkes, D. C.; Rogers, A.; and Jennings, N. R. 2013. An online mechanism for multi-unit demand and its application to plug-in hybrid electric vehicle charging. Journal of Artificial Intelligence Research 48(1):175\u2013230.\n[Shi et al. 2014] Shi, W.; Zhang, L.; Wu, C.; Li, Z.; and Lau, F. C. 2014. An online auction framework for dynamic resource provisioning in cloud computing. In The 2014 ACM"}, {"heading": "International Conference on Measurement and Modeling of", "text": "Computer Systems, 71\u201383. ACM.\n[Wang et al. 2015] Wang, C.; Ma, W.; Qin, T.; Chen, X.; Hu, X.; and Liu, T.-Y. 2015. Selling reserved instances in cloud computing. In Proceedings of the 24th International Conference on Artificial Intelligence, 224\u2013230. AAAI Press.\n[Wang, Liang, and Li 2015] Wang, W.; Liang, B.; and Li, B. 2015. Optimal online multi-instance acquisition in iaas clouds. IEEE Transactions on Parallel & Distributed Systems 26(12):1\u20131.\n[Witkowski 2011] Witkowski, J. 2011. Trust mechanisms for online systems. In Proceedings of the International Joint Conference on Artificial Intelligence, Barcelona, Catalonia, Spain, July, 2866\u20132867.\n[Wu et al. 2014] Wu, F.; Liu, J.; Zheng, Z.; and Chen, G. 2014. A strategy-proof online auction with time discounting values. In AAAI Conference on Artificial Intelligence.\n[Yao 1977] Yao, A. C.-C. 1977. Probabilistic computations: Toward a unified measure of complexity. In 18th Annual Symposium on Foundations of Computer Science, 222\u2013227.\n[Zaman and Grosu 2012] Zaman, S., and Grosu, D. 2012. An online mechanism for dynamic vm provisioning and allocation in clouds. In 2012 IEEE Fifth International Conference on Cloud Computing, 253\u2013260.\n[Zhang et al. 2013] Zhang, H.; Li, B.; Jiang, H.; Liu, F.; Vasilakos, A. V.; and Liu, J. 2013. A framework for truthful online auctions in cloud computing with heterogeneous user demands. In INFOCOM, 2013 Proceedings IEEE, 1510\u2013 1518. IEEE.\n[Zhang et al. 2015] Zhang, X.; Huang, Z.; Wu, C.; Li, Z.; and Lau, F. C. 2015. Online auctions in iaas clouds: Welfare and profit maximization with server costs. In Proceedings of the 2015 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems, 3\u201315. ACM."}, {"heading": "Supplemental Material", "text": ""}, {"heading": "Omitted Proofs", "text": "Theorem 2. If k = T = 2 and cjC \u2264 \u03b1 \u2264 0.5 for any reservation j, the mechanism GREEDY is truthful and achieves a competitive ratio 1\u2212\u03b111\u2212\u03b1 for both social welfare and revenue.\nProof. (Sketch ) The competitive ratio can be proved by slightly modifying the proof of the case i = 0 in Theorem 1. Here we only provide a proof sketch. Let M denote the allocation of GREEDY and L denote the set of jobs accepted by the optimal allocation OPT but not accepted by the GREEDY. For a job l \u2208 L, vl is evenly distributed on machines in M r+tlr . As cl/C \u2264 \u03b1, we know |M r+tlr | \u2265 C\u2212cl \u2265 C(1\u2212\u03b1). Thus, for any job j \u2208 J r+tl r , it gets a value no larger than vlcjC(1\u2212\u03b1) from l. Similar to the proof of Theorem 1 for the remaining part, we have vj Dj\n\u2265 1\u2212\u03b110 for j \u2208 M . Consequently, it can be obtained that\nv(M) \u2265 1\u2212 \u03b1\n10 v(L).\nIf v(L) \u2264 1011\u2212\u03b1v(OPT ), we get this theorem. If v(L) > 10\n11\u2212\u03b1v(OPT ), we have\nv(M)) \u2265 1\u2212 \u03b1\n10 v(L) \u2265\n1\u2212 \u03b1\n11\u2212 \u03b1 v(OPT ).\nSimilarly, one can prove the competitive ratio 1\u2212\u03b111\u2212\u03b1 for revenue. The truthfulness of GREEDY can be proved similarly to RANDOM-PRICING.\nLemma 1. For any 1 \u2264 u \u2264 \u2308log k\u2309 and 1 \u2264 v \u2264 \u2308logT \u2309, E(v(Muv)) \u2265 1 42v(OPTuv)\nProof. For jobs in Juv , define OPT0 as the optimal allocation when we only consider those jobs need no more than C/2 machines, and define OPT1 as that when we only consider jobs need more than C/2 machines. We define and M0 (resp. M1) as the allocation obtained by our mechanism when i = 0 (reps. i = 1) given u and v are sampled. We also define Li = J(OPTi)\\J(Mi) for i \u2208 {0, 1}. Now we have the same notations with the proof of Theorem 1. In fact, we can show that Equation (1) and (3) are still held, if we can show v(Muv) \u2265 142v(OPTuv) by the proof of Theorem 1, we can show this lemma by simple following the proof of Theorem 1. Firstly we consider Equation (1). As any job in\nJuv, its length is at most 2v and its value density is at most 2u, Equation 1 becomes\nvj v(Fj) \u2265 2u\u22121 max{C/2, cj}max{2 v\u22121, tv} 2uC(2v+1 + tj) \u2265 1 20 .\nThe last inequality is obtained as cj > C/2 and the term max{2v\u22121,tj}\n2v+1+tj is minimized when tj = 2v\u22121. Similarly, when considering Equation 3, we also have vjDj \u2265 1 20 . Thus follow the proof of Theorem 1, we have E(v(Muv)) \u2265 1 42v(OPTuv)."}], "references": [{"title": "J", "author": ["Y. Azar", "I. Kalp-Shaltiel", "B. Lucier", "I. Menache", "Naor"], "venue": "S.; and Yaniv, J.", "citeRegEx": "Azar et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "and Grosu", "author": ["T.E. Carroll"], "venue": "D.", "citeRegEx": "Carroll and Grosu 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "Novel mechanisms for online crowdsourcing with unreliable, strategic agents", "author": ["Chandra"], "venue": "In Twenty-Ninth AAAI Conference on Artificial Intelligence", "citeRegEx": "Chandra,? \\Q2015\\E", "shortCiteRegEx": "Chandra", "year": 2015}, {"title": "D", "author": ["E.J. Friedman", "Parkes"], "venue": "C.", "citeRegEx": "Friedman and Parkes 2003", "shortCiteRegEx": null, "year": 2003}, {"title": "N", "author": ["E.H. Gerding", "V. Robu", "S. Stein", "D.C. Parkes", "A. Rogers", "Jennings"], "venue": "R.", "citeRegEx": "Gerding et al. 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "M", "author": ["Hajiaghayi"], "venue": "T.", "citeRegEx": "Hajiaghayi 2005", "shortCiteRegEx": null, "year": 2005}, {"title": "J", "author": ["N. Jain", "I. Menache", "Naor"], "venue": "S.; and Yaniv, J.", "citeRegEx": "Jain et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "V", "author": ["R.M. Karp", "U.V. Vazirani", "Vazirani"], "venue": "V.", "citeRegEx": "Karp. Vazirani. and Vazirani 1990", "shortCiteRegEx": null, "year": 1990}, {"title": "and Havill", "author": ["N. Kell"], "venue": "J.", "citeRegEx": "Kell and Havill 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "and Nisan", "author": ["R. Lavi"], "venue": "N.", "citeRegEx": "Lavi and Nisan 2005", "shortCiteRegEx": null, "year": 2005}, {"title": "J", "author": ["B. Lucier", "I. Menache", "Naor"], "venue": "S.; and Yaniv, J.", "citeRegEx": "Lucier et al. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "M", "author": ["Mashayekhy, L.", "Nejad"], "venue": "M.; Grosu, D.; and Vasilakos, A.", "citeRegEx": "Mashayekhy et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Adwords and generalized online matching", "author": ["Mehta"], "venue": "Journal of the ACM (JACM)", "citeRegEx": "Mehta,? \\Q2007\\E", "shortCiteRegEx": "Mehta", "year": 2007}, {"title": "N", "author": ["V. Robu", "E.H. Gerding", "S. Stein", "D.C. Parkes", "A. Rogers", "Jennings"], "venue": "R.", "citeRegEx": "Robu et al. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "F", "author": ["W. Shi", "L. Zhang", "C. Wu", "Z. Li", "Lau"], "venue": "C.", "citeRegEx": "Shi et al. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Selling reserved instances in cloud computing", "author": ["Wang"], "venue": "In Proceedings of the 24th International Conference on Artificial Intelligence,", "citeRegEx": "Wang,? \\Q2015\\E", "shortCiteRegEx": "Wang", "year": 2015}, {"title": "Optimal online multi-instance acquisition in iaas clouds", "author": ["Liang Wang", "W. Li 2015] Wang", "B. Liang", "B. Li"], "venue": "IEEE Transactions on Parallel & Distributed Systems", "citeRegEx": "Wang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2015}, {"title": "A strategy-proof online auction with time discounting values", "author": ["Wu"], "venue": "In AAAI Conference on Artificial Intelligence", "citeRegEx": "Wu,? \\Q2014\\E", "shortCiteRegEx": "Wu", "year": 2014}, {"title": "A", "author": ["Yao"], "venue": "C.-C.", "citeRegEx": "Yao 1977", "shortCiteRegEx": null, "year": 1977}, {"title": "and Grosu", "author": ["S. Zaman"], "venue": "D.", "citeRegEx": "Zaman and Grosu 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "J", "author": ["H. Zhang", "B. Li", "H. Jiang", "F. Liu", "A.V. Vasilakos", "Liu"], "venue": "2013. A framework for truthful online auctions in cloud computing with heterogeneous user demands. In INFOCOM, 2013 Proceedings IEEE, 1510\u2013", "citeRegEx": "Zhang et al. 2013", "shortCiteRegEx": null, "year": 1518}, {"title": "F", "author": ["X. Zhang", "Z. Huang", "C. Wu", "Z. Li", "Lau"], "venue": "C.", "citeRegEx": "Zhang et al. 2015", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [], "year": 2016, "abstractText": "Selling reserved instances (or virtual machines) is a basic service in cloud computing. In this paper, we consider a more flexible pricing model for instance reservation, in which a customer can propose the time length and number of resources of her request, while in today\u2019s industry, customers can only choose from several predefined reservation packages. Under this model, we design randomized mechanisms for customers coming online to optimize social welfare and providers\u2019 revenue. We first consider a simple case, where the requests from the customers do not vary too much in terms of both length and value density. We design a randomized mechanism that achieves a competitive ratio 1 42 for both social welfare and revenue, which is a improvement as there is usually no revenue guarantee in previous works such as (Azar et al. 2015; Wang et al. 2015). This ratio can be improved up to 1 11 when we impose a realistic constraint on the maximum number of resources used by each request. On the hardness side, we show an upper bound 1 3 on competitive ratio for any randomized mechanism. We then extend our mechanism to the general case and achieve a competitive ratio 1 42\u2308log k\u2309\u2308logT\u2309 for both social welfare and revenue, where T is the ratio of the maximum request length to the minimum request length and k is the ratio of the maximum request value density to the minimum request value density. This result outperforms the previous upper bound 1 CkT for deterministic mechanisms (Wang et al. 2015). We also prove an upper bound 2 log 8kT for any randomized mechanism. All the mechanisms we provide are in a greedy style. They are truthful and easy to be integrated into practical cloud systems.", "creator": "LaTeX with hyperref package"}}}