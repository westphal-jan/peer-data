{"id": "1611.08037", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Nov-2016", "title": "A Spatio-Temporal Representation for the Orienteering Problem with Time-Varying Profits", "abstract": "we consider an orienteering problem ( op ) where an agent needs to uniquely visit a series ( possibly a subset ) of depots, from which the maximal incurred accumulated profits are desired within given limited time budget. different from similarly most existing works where the profits are assumed to be static, in this work we investigate a variant routing that has time - dependent profits. specifically, the profits to be collected change over time and they follow several different ( presumably e. g., independent ) time - varying functions. the problem is essentially np - hard. to tackle the challenge, we successively present a simple and effective framework that incorporates time - variations into the fundamental planning process. both specifically, we propose propose a deterministic spatio - temporal representation where its both spatial description and temporal logic are unified into one routing topology. by employing existing basic sorting and searching algorithms, the routing solutions can be computed in an extremely efficient way. the proposed method is easy to implement and extensive numerical results show that our approach is time efficient and generates near - optimal solutions.", "histories": [["v1", "Thu, 24 Nov 2016 00:07:56 GMT  (1055kb,D)", "https://arxiv.org/abs/1611.08037v1", null], ["v2", "Sun, 2 Jul 2017 04:56:41 GMT  (1765kb,D)", "http://arxiv.org/abs/1611.08037v2", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["zhibei ma", "kai yin", "lantao liu", "gaurav s sukhatme"], "accepted": false, "id": "1611.08037"}, "pdf": {"name": "1611.08037.pdf", "metadata": {"source": "CRF", "title": "A Spatio-Temporal Representation for the Orienteering Problem with Time-Varying Profits", "authors": ["Zhibei Ma", "Kai Yin", "Lantao Liu", "Gaurav S. Sukhatme"], "emails": ["gaurav}@usc.edu.", "yinkai1000@gmail.com."], "sections": [{"heading": null, "text": "I. INTRODUCTION\nThe rapid progress of smart vehicle technologies allows us to envision that, in the future autonomous vehicles are able to carry out various tasks with little or even no human effort. We are interested in designing an efficient routing method to navigate a vehicle (agent) among a number of known and fixed depots, where each depot has some profit (e.g., score, benefit, utility, load) to be collected. If the travel time is limited, it is likely that the agent is not able to traverse all depots due to the limited time budget. This variant of routing problems is called the orienteering problem (OP) [11]. In a nutshell, an OP aims to find a tour traversing a subset of depots so that the accumulated profit collected from those traversed depots are maximized.\nDifferent from many existing vehicle routing problems which focus on analyzing path properties in the static context (i.e., unchanging environment or topology with stationary cost metrics) [17], [12], in this work we are intrigued to investigate a time-varying variant of OPs, i.e., each depot has a time-varying profit.\nHere are a few motivational examples: \u2022 As illustrated in Fig. 1, an autonomous truck needs to\npick up goods from a number of fixed depots where manufacturing factories are located. The goods are produced consistently and accumulated as time goes by \u2014 so they are time-varying. The growth rate of goods at different factories may be nonidentical: larger factories\nZ. Ma, L. Liu and G.S. Sukhatme are with the Department of Computer Science at the University of Southern California, Los Angeles, CA 90089, USA. {zhibeima, lantao.liu, gaurav}@usc.edu. K. Yin is with HomeAway, Inc., yinkai1000@gmail.com.\ngrow faster and smaller ones grow slower. Assume the truck has sufficiently large capacity and it empties all goods from a depot when it arrives there. The objective is to find a route so that the truck will load the most goods in a given time window. \u2022 In environmental monitoring, autonomous robots are deployed to collect environment data in order to estimate an underlying environment state. However, the environment attributes at different locations can be timevarying (e.g., dissolved chemical compounds and algae blooms in the water vary both spatially and temporally.) An important objective of environment monitoring is to plan so-called \u201cinformative paths\u201d [5] that navigate the robots to acquire data from those most information-rich spots which best help estimate the environment.\nIn this paper, we present our initial study for the timevarying OP. We start our analysis from the single agent planning case, and attempt to establish a new framework that is different from traditional modeling and solving routines. We will show that, a big challenge of the time-varying OP (even for single agent case) lies in the requirement of a special treatment in an extra dimension \u2014 the time dimension, which inevitably introduces extra complexity as we need to model, predict, and integrate future dynamics."}, {"heading": "II. RELATED WORKS", "text": "The routing problems have been well studied in many research domains including operations research, theoretical computer science, and transportation systems [3], [4], [7]. Typical routing problems involve incorporation of constraints expressed from the nature of the target problems, which also narrow the space of searching for solutions [19]. We are interested in a variant of routing problems called the orienteering problems (OPs) [11], [22]. An OP considers both travel cost (e.g., travel time) and scores collected along the travel. The goal of the OP is to determine which subset of vertices to visit and in which order so that the collected scores within a given period is maximized. The OPs integrate\nar X\niv :1\n61 1.\n08 03\n7v 2\n[ cs\n.A I]\n2 J\nul 2\n01 7\ncharacteristics of both knapsack problems (KPs) [15] and travelling salesman problems (TSPs) [19], and OPs are NPhard as well. In contrast to the TSP, not all vertices of an OP need to be visited due to the limited time budget. During the past few decades, several variants of OPs have been studied, such as time-dependent OPs, Team OPs, (Team) OPs with Time Windows and OPs with stochastic profits. Recent survey papers [22], [12] have profoundly discussed state-of-the-art techniques of these variants as well as their applications.\nWhile OPs can be formulated as mixed integer programs (MIPs), the problem size typically is too large to directly use commercial solvers. A wide range of decomposition methods such as branch-and-price algorithms have been developed so that a large-scale MIP can be decomposed into smaller problems (e.g., a master problem and a series of sub-problems) which can then be iteratively solved by commercial solvers [13], [16]. In order to reduce the heavy computational burden in decomposition methods, heuristics and metaheuristics have been extensively studied, typically including tabu-based or neighborhood search based procedures [6], [21], [24].\nAlthough in general OPs have been well researched, the time-dependent OPs (TOPs) have received relatively less attention comparing with other variants [10], [12]. Even so, most of existing TOPs discuss the time-varying properties that are associated with the real travel time between pairwise nodes, and assume that travel time between two nodes depends on the departure time at the first (or an earlier) node [18], [9], [8], [23]. Very rarely we could find the works that discuss about time-varying scores of OPs. One work that share certain similarity with this proposed problem is [2], where multiple vehicles need to serve a number of clients and the profit of each client follows a decreasing function of time. The work analyzed a lower bound and upper bound based on a classic MIP formulation.\nInstead of employing conventional techniques such as the column generation approach used in [2], in this work we present our first study that models and tackles the problem from a different perspective: we start from establishing a representation built from the spatial and temporal constraints, so that the time dependence attribute is transferred from the bulk MIP to a separate and intuitive representation. With that, fast approximate OP solutions can be found by employing and extending order-sensitive topological algorithms."}, {"heading": "III. PROBLEM DESCRIPTION AND FORMULATION", "text": "A routing problem can be represented with a graph G = (V,E), where V is the set of vertices and E denotes the set of edges. Let us denote the number of vertices as |V | = n+1, and suppose every edge takes time to traverse. Although the travel time, in many situations, depends on the states and properties of the network such as congestion and capacity, we assume that the travel time \u03c4ij between two vertices vi and vj is time-invariant for simplicity\u2217. We associate each\n\u2217It is relatively straightforward to incorporate time-dependent travel times in our proposed model described in the following section.\nvertex vi with a time-varying value, called profit, which is denoted by fi(t) \u2265 0 at time t \u2265 0. Here fi(\u00b7) is of arbitrary nonlinear function form. We assume that function fi(\u00b7) is known or can be predicted or approximated.\nSuppose that the agent (vehicle) starting from a dummy node v0 at time 0 travels across a subset of vertices on the graph G. When the agent visits vertex vi at time ti, it will collect the profit fi(ti). The remaining profit at the vertex vi right after the agent leaves becomes 0 and accumulates again. Additionally, the profit at v0 is assumed to be 0, i.e., f0(t) = 0. Assuming the agent visits each vertex once, the objective is to determine the order of a subset of vertices to visit so that total profits collected by the agent is maximized within a given planning period T . Note that we do not assign a specific destination to the agent, as the problem with a fixed end vertex is a special case for our problem.\nLet xij = 1 if the agent travels from vi to vj , and 0 otherwise. Let t0 = 0. We also introduce extra variables ui with u0 = 0 to eliminate the subtours. Then the problem in this study can be formulated as the following mixed-integer program.\nmax xij n\u2211 i=1 fi(ti) \u00b7 \u2211 j xji, (1)\nn\u2211 j=1 x0j = n\u2211 i=1 xi0 = 1, (2)\nn\u2211 i=0 xik = n\u2211 j=0 xkj 6 1, \u2200k 6= 0, (3)\ntj 6 T \u00b7 n\u2211\ni=0\nxij , \u2200j, (4)\nti + xij (\u03c4ij + T ) 6 T + tj , \u2200i, j, (5) 1 6 ui 6 n, \u2200i 6= 0, (6) ui \u2212 uj + 1 6 n(1\u2212 xij), \u2200i 6= 0, j 6= 0, (7) xij \u2208 {0, 1}, \u2200i, j. (8)\nEq. (1) is to maximize the total collected profits. Constraint (2) guarantees that the path starts and ends at dummy node v0. Note that our setup allows a path to end at any node by discarding the inward edge. Constraints (3) ensure the connectivity of the path and guarantee that every vertex is visited at most once. The limited time budget is ensured by Constraint (4), while Constraint (5) determines the visiting time ti along the path. Constraints (6) and (7), so called Miller-Tucker-Zemlin (MTZ) formulation in the traveling sales problem[19], are used to prevent subtours."}, {"heading": "IV. A SPATIO-TEMPORAL REPRESENTATION", "text": "It appears a daunting task to solve the problem (1)-(8) due to the complexity of objective function. Most of existing literature in OPs either lumps all constraints together and solves it by conventional solvers of MIPs [20], [22], or decouples the constraints into master-subproblem modules such as column generation [2], or use certain heuristics such as center-of-gravity heuristic [11]. In contrast, we\ndesire to develop a framework starting from a constraintincluded representation that is intuitive to understand, easy to implement from scratch, and flexible to modify and extend. In this section, we present a means for embedding constraints into a spatio-temporal representation built on which the original routing problem can be tackled by efficient methods (though it is still a NP-hard problem).\nAs the problem essentially aims to determine the visiting time and order of vertices, it inspires us to incorporate a time dimension to extend the 2-dimensional graph on a spatial plane to a 3-dimensional graph (topology). To make the model implementable, the time range [0, T ] is discretized into a sequence of time intervals \u2206t of equal length, and the interval \u2206t is used as a time unit that specifies discrete time resolution. Thus, the travel time \u03c4ij can be expressed as multiple times of the time unit. For example, \u03c4ij = nij\u2206t and T = nT \u2206t, where nij and nT are integers.\nFigure 2 shows two examples that describe the basic idea. Intuitively, one can imagine that each spatial graph vertex (Fig. 2(a)) is extended to a sequence of vertices expanding in the time dimension, where each vertex is on an unique time layer corresponding to a future time moment (Fig. 2(b)). Then edges are added by concatenating vertices of different time layers, constrained by the real travel time. Formally, two vertices on different time layers form an edge if and only if the two vertices are spatially traversable and the time difference between the two time layers is exactly equal to the anticipated real travel time between the two vertices.\nEach vertex contains a profit and the profit is time-varying. In other words, the profits at different time layers are not the same. Therefore, the problem is equivalent to finding a path from the given start vertex at time 0 such that the path transits other vertices within time T and the total collected profits are maximized. It is worth mentioning that, the spatiotempral edges are \u201cdirected\u201d since each edge must start from a vertex at an earlier time layer and ends at one at a later moment; Because the time is uni-directional and cannot travel backwards, it is impossible to form a loop or cycle on the spatio-temporal graph. As a result, such a spatio-temporal representation is equivalent to a vertex-weighted Directed Acyclic Graph (DAG) [18]. This allows us to conveniently develop our own routing algorithm built on many existing efficient DAG algorithms.\nMore formally, the spatio-temporal representation is a vertex-weighted DAG, denoted by G\u2032 = (V \u2032, E\u2032,W \u2032), where\nV \u2032 = V \u00d7 T , T = {0,\u2206t, ..., nT \u2206t}; eijus is a directed edge from vertex v\u2032iu = (vi, u) to v \u2032 js = (vj , s), and eijus \u2208 G\u2032 if and only if the edge e(vi, vj) \u2208 E in G and \u03c4ij = ns\u2206t \u2212 nu\u2206t; the weight w\u2032iu \u2208 W \u2032 for vertex v\u2032iu has value w\u2032iu = fi(u). Keep in mind that u = nu\u2206t and a similar equation holds for s.\nAs an example, suppose that we have a complete graph G with 3 vertices, \u2206t = 1, and T = 5. In the spatiotemporal representation G\u2032 shown in Fig. 2(b), there are 18 vertices v\u20320,0, v \u2032 0,1, ..., v \u2032 2,5, each vertex in the original graph G is duplicated at the discrete time in T = {0, 1, 2, 3, 4, 5}. If \u03c401 = 3 and \u03c421 = 5, then vertex v\u20320,0 is directed to v \u2032 1,3 and v\u20322,0 is directed to v \u2032 1,5. In this example, we have 9 directed edges in total. With graph G = (V,E) and given time limit T , the spatiotemporal graph G\u2032 = (V \u2032, E\u2032,W \u2032) can be constructed by Alg. 1. Assume there are n vertices in G, the time complexity of Alg. 1 is O(n2T/\u2206t) because there are three for loops each of which is associated with either n or T . Also there are n(T/\u2206t + 1) vertices in G\u2032, so the space complexity is O(nT/\u2206t) .\nAlgorithm 1: SpatioTemporalGraph (G,T, v0,\u2206t) Input:\n1: Graph G = (V,E), time limit T , start vertex v0, time interval \u2206t Output: 2: for each vertex vi in graph G do 3: for each t in time period [0, T ], time step is \u2206t do 4: v\u2032it.id = i 5: v\u2032it.weight = fi(t), put w \u2032 it into the weight set W \u2032\n6: v\u2032it.position = vi.position 7: v\u2032it.profit = fi(t) 8: v\u2032it.sum = \u2212\u221e 9: v\u2032it.parent = \u22121\n10: for each vi\u2019s neighbor vj do 11: if t+ \u03c4ij is equal to t\u2032 AND t\u2032 <= T then 12: put edge eijtt\u2032 into the edge set E\u2032 13: push v\u2032jt\u2032 into vector v \u2032 it\u2032 .successors 14: update indegree of v\u2032it. 15: put v\u2032it into the vertex set V \u2032 16: set the v\u20320,0.sum to 0 17: return graph G\u2032 = (V \u2032, E\u2032,W \u2032)\nNote: fi(t) is the time-varying profit function of vertex vi at time t. v\u20320,0 is the start vertex in G\u2032, and .sum is used to store accumulated profit from prior\ntraversal along a path. The label .parent points to the predecessor vertex."}, {"heading": "V. ROUTING ALGORITHM", "text": "An important advantage of the spatio-temporal graph lies in that, the time related constraints have been incorporated into this spatio-temporal representation, so that temporal related constraints can be decoupled and eliminated from the process of optimizing the profits. Thus, the problem (1)-(8) is equivalent to finding a path P from vertex v\u20320,0 = (v0, 0) to v\u2032ks on G \u2032 where s \u2264 T such that \u2211 (v\u2032iu)\u2208P w\u2032iu is maximum.\nSince the spatio-temporal graph is essentially a DAG, we develop our routing solution via extending classic DAG algorithms. Specifically, we found that the profit maximization can be transformed to a longest path problem by accumulating the profits collected from vertices instead of summing up edge lengths along a path. We manipulate the DAG so that vertices are sorted in a topological order along the temporal dimension, and then employ a dynamic programming paradigm to compute the maximal profit path.\nIt is also noteworthy that, while developing a solution to the time-varying OP, we take two concerns that are related to applications into account. \u2022 Specification of a Routing Destination: Many routing\nproblems, including classic OPs, require to specify a routing destination. The destination can be the original depot where the agent departures (e.g., a mail truck needs to return a central processing office); the destination can also be an arbitrary depot located somewhere else (e.g., a freight truck needs to pick up goods and unload them into some specified processing location that is different from the starting depot). \u2022 Persistent Task: Many long-term missions need repetitive and persistent routing, for which specifying a routing destination is not necessary or even inappropriate. For instance, in the persistent environmental monitoring task, we do not need the robot to stop at some specified location, as the robot will need to resume to next round of routing after the completion of current one. Thus, the routing destination should be computed on the fly based on the profit optimization constrained by time T , instead of being manually specified.\nWe will show that the proposed framework works for both specified and unspecified routing destinations."}, {"heading": "A. Topological Sorting of DAG in Temporal Dimension", "text": "The main purpose of topological sorting of the DAG is that, the vertices are \u201cplaced\u201d onto different \u201cstages\u201d according to their temporal constraints, so that a dynamic programming structure (discussed in the following subsection) can be applied.\nFormally, a topological sort of a directed graph is a linear ordering of its vertices such that for every directed edge euv from vertex u to vertex v, u comes before v in ordering. A topological sort of a graph requires that the graph must be a DAG. We employ a well-known algorithm developed by Kahn [14] to sort our spatial-temporal graph G\u2032, with main steps shown in Alg. 2. Briefly, we first find a list of vertices that have no incoming edges (with deg\u2212(v) = 0), and insert\nthem into a set S. Note, at least one such vertex must exist in a non-empty graph. Then we traverse the set S. Each time we remove a vertex v from S, and add it to the tail of the list L. After removing v, the indegree of its successors should be decreased by 1. Then we insert those vertices with updated indegree equal to 0 in the set S.\nTo analyze the time complexity, assume there are n vertices in G, so there will be n(T/\u2206t + 1) vertices in G\u2032. For each vertex v\u2032it, there will be at most n\u22121 directed edges. Therefore |E\u2032| = O(n2T/\u2206t), and the time complexity of Alg. 2 is O(|V \u2032|+ |E\u2032|) = O(n2T/\u2206t).\nAlgorithm 2: TopologicalSort (G\u2032) 1: L: an empty list that will contain the sorted elements 2: S: a set of all nodes with no incoming edges 3: while S is not empty do 4: remove a vertex v from S 5: add v to the end of L 6: for each successor u of v do 7: deg\u2212(u) = deg\u2212(u)\u2212 1 8: if deg\u2212(u) equals to 0 then 9: insert u into S\n10: return L (a topologically sorted order)\nNote: G\u2032 is a DAG, the indegree of v is denoted as deg\u2212(v)."}, {"heading": "B. Computing Maximal Profit Path", "text": "We transfer the time-varying OP to a longest path problem in a DAG. The classic longest path problem is the problem of finding a simple path of maximum length in a given graph. We employ a dynamic programming structure to memorize incumbent maximal accumulated profit at each vertex of topologically sorted stages. Note that, in our problem, we need to optimize profits collected from vertices, instead of adding up length of edges. Therefore, instead of using the longest path update function between two successive stages:\nl[w] = l[v] + \u03c4vw, if l[v] + \u03c4vw > l[w], (9)\nwhere l[w] is the largest distance from start vertex to w, we utilize an update function:\nw.sum = v.sum+w.profit, if v.sum+w.profit > w.sum. (10)\nThe computation of the maximal profit path is described in Alg. 3. Briefly, the topologically sorted vertices V \u2032 of the spatio-temporal graph G\u2032 are used as an input. Then vertices from different stages form dynamic programming subproblems and they are updated with accumulated profits recursively, starting from v\u20320,0. Here we use v \u2032 it.path to store vertices along the path from start v\u20320 to v \u2032 i (Note, only spatial information is recorded). To prevent from forming routing subtours, we check and discard those already visited vertices before each value update.\nAfter the completion of dynamic programming, each vertex contains information of the maximal profit path that routes from v\u20320,0 to it. Since the graph G\n\u2032 has incorporated the time limit T , every vertex is feasible to the time\nconstraint. To find a maximal profit path to a specified vertex (destination) vi \u2208 G, one simply needs to enumerate all states v\u2032ij \u2208 G\u2032,\u2200j of vertex vi and retrieve the path with the largest value. If a destination is not specified, one needs to enumerate all states of all vertices and find out the maximal one among them. The time complexity of Alg. 3 is O(n2T/\u2206t) due to its two for loops.\nAlgorithm 3: MaximalProfitPath(L) 1: vit.sum = 0, i = 0, t = 0 2: for each vertex v\u2032it in topologically sorted order L do 3: for each vertex v\u2032jt\u2032 in v \u2032 it.successors do\n4: if vertex vj is not in the v\u2032it.path then 5: if v\u2032it.sum+ v\u2032jt\u2032 .profit > v \u2032 jt\u2032 .sum then 6: v\u2032jt\u2032 .sum = v \u2032 it.sum+ v \u2032 jt\u2032 .profit 7: update the v\u2032jt\u2032 .parent to v \u2032 it 8: v\u2032jt\u2032 .path = v \u2032 it.path+ vj\n9: for each vertex v\u2032it in G\u2032 do 10: find the maximal sum 11: retrieve a path P by backtracking from end to start 12: return P\nNote: The label .path is a vector that stores all visited vertices from start to vi"}, {"heading": "C. Main Routing Algorithm", "text": "With the components descried above, the main algorithm is shown in Alg. 4. According to the analysis of each part, the overall time complexity of our algorithm is n2T/\u2206t, and the space complexity is n2T/\u2206t as well.\nAlgorithm 4: Time-Varying OP Input:\n1: 2D graph G = (V,E), start vertex v0, time limit T , time interval \u2206t\nOutput: 2: construct a spatio-temporal graph G\u2032 = SpatioTemporalGraph(G,T, v0,\u2206t)\n3: L = TopologicalSort(G\u2032) 4: path = MaximalProfitPath(L) 5: return path\nOur algorithm has a polynomial time complexity given a fixed \u2206t, but cannot guarantee to find the optimal solution to this NP-hard problem. The main reason for possibly reaching at sub-optimality lies in that, we added a non-subtour constraint in order to (1) prevent the path from traversing back and forth among a small subset of adjacent vertices and (2) comply with the structure of dynamic programming. Such a constraint eliminates certain feasible searching space which possibly contains the optimal solution. One may regard this as a trade-off between solution quality and practical runtime. Nevertheless, our evaluation results with extensive trials show that on average our algorithm produces near-optimal solutions."}, {"heading": "D. Discussion: Effects of Discretization", "text": "The time interval \u2206t plays a critical role in our framework as the total profits are actually evaluated at travel time steps\nequal to multiple \u2206t. Yet it may be impractical to select a small enough time interval because it would result in an extremely large size of DAG. One possible implementation is to round the travel time to a value closet to some integer times of \u2206t. Hence, it is important to analyze the impact of errors due to such rounding procedure.\nAssume that the profit function fi(t) satisfies the following Lipschitz condition:\n|fi(t)\u2212 fi(s)| \u2264 K|t\u2212 s|, \u2200t, s \u2208 [0, T ],\u2200i \u2208 {0, ..., n}, (11) where K is a constant independent of i. Suppose that the optimal objective value for the problem (1)-(8) is z, and the optimal objective value by the proposed framework is z\u2032. Then we have the result as follows.\nProposition 1: Under the condition (11), we have the upper bound for the difference in two objective values:\n|z \u2212 z\u2032| \u2264 [n(n+ 1)/2] \u00b7K \u00b7\u2206t. (12) proof: Let P be the optimal path in the graph G for the problem (1)-(8) and let P \u2032 be the optimal path in the proposed spatio-temporal DAG G\u2032. By the construction of G\u2032, P must correspond to a path P\u0303 in the graph G\u2032. Let z\u0303 be the total profits (i.e. the value of objective (1) on this path) for the path P\u0303 . Since the difference between the discrete time in our framework and the original real-valued time is within \u2206t, the fact that any path contains no more than n vertices and the condition (11) lead to |z \u2212 z\u0303| \u2264 [n(n + 1)/2]K\u2206t. As P \u2032 rather than P\u0303 is the optimal path in G\u2032, we have z\u0303 \u2264 z\u2032. By combining these results, we should have z\u2212z\u2032 \u2264 [n(n+ 1)/2]K\u2206t. Conversely, by construction any feasible path on the graph G\u2032 must correspond to a feasible path on G. Using similar arguments, we have z\u2032\u2212z \u2264 [n(n+1)/2]K\u2206t. Therefore, the result (12) holds. It is worthwhile noting that the constraint that the path in G or G\u2032 contains no subtours is critical to the result (12)."}, {"heading": "VI. RESULTS", "text": "We conducted numerical evaluations to validate the proposed algorithm. We compared our algorithm with other algorithms, all of which were implemented in C++. The experiments were performed on a system with an Intel i5 2.2GHz processor and 4GB RAM. In our experiments, vertices are randomly generated in the area [\u221250, 50]\u00d7 [\u221250, 50] on the x-y plane, and each vertex has a profit (weight) following certain time-varying functions. The distance between two vertices is Euclidean distance."}, {"heading": "A. Routing Feature of \u201cOrienteering\u201d", "text": "First, we demonstrate that our solution has the basic orienteering property: given limited time, the path always goes through those vertices with large profits. Fig. 3(a) shows an example. We purposely manipulate the profit distribution among the vertices, such that in the upper right corner, there are more vertices with larger profits. For better visualization, in the figure the size of a vertex is proportional to the profit on it. Additionally, we purposely put the starting vertex on the left and do not specify a destination. From Fig. 3(a) we\ncan see that, in order to obtain more profits, the route goes to the upper-right corner almost directly from the start vertex. In this way, a big part of time is used among traversing those vertices with large profits."}, {"heading": "B. Routing Properties under Temporal Variations", "text": "To examine the effects caused by temporal variations, we manipulate the profit functions. Specifically, we divide the space into four regions (quadrants) I,II,III and IV, as shown in Fig. 3(b). The profits are the same if the vertices are in the same region, but different if not. For example, in region I, the profit function for each v\u2032it is\nfi(t)I = { 5wi if t 6 T/2 0 if t > T/2\nwhere wi is the weight of vertex vi in graph G. (Keep in mind that, wi is different from w\u2032it which is time-varying. Here the weight wi refers to a fixed parameter for profit function.) Similarly, the profit functions in regions II, III and IV are\nfi(t)II = { 10wi if t 6 T/2 0 if t > T/2\nfi(t)III = { 0 if t 6 T/2 5wi if t > T/2\nfi(t)IV = { 0 if t 6 T/2 10wi if t > T/2\nFigure 3(b) reveals that, the path first transits the vertices in region II, because during the first half T , vertices in region II have larger profits than those in region III. After the path enters region I and after the time passes T/2, vertices in region IV contain larger profits. Such variations attract the path to go through vertices in region IV. This example indicates that our algorithm is sensitive to the time-varying profit functions."}, {"heading": "C. Comparison with Optimal Solution", "text": "We compare the result of our algorithm with the optimal solution that is obtained by enumerating all solutions in a brute-force way. Because of the prohibitive time complexity O(n!) for searching for the optimal solution, the practical\nruntime for 13 vertices requires more than 10 minutes. Thus, we tested up to 12 vertices to compare with the optimal solutions. We investigated three representative profit functions in the form of linear, quadratic and logarithmic, respectively. The results are shown in Fig. 4. We can see that the results of our algorithm are very close to those of the optimal solutions, for all the three functions.\nFigure 5 shows a group of paths produced from our algorithm and the optimal solution. We use a linear profit fi(t) = wit/T for this example. In many cases, our algorithm get the same results as those of the optimal solution, as shown in Fig. 5(a) and Fig. 5(b). Sometimes the paths are different, such as Fig. 5(c) and Fig. 5(d), but the collected profits are quite similar (in this example, ours obtains 183.5 whereas the optimal is 185.0). Fig. 5(e) and Fig. 5(f) show another example."}, {"heading": "D. Comparison with Classic OP Algorithm", "text": "We also compared our algorithm with the classic OP algorithms. We implemented a well-known heuristic called center-of-gravity [11], and tested with both time-invariant and time-variant profits. Fig. 6 demonstrates the differences between the results of our approach and those of the OP.\nFig. 7 show statistics of numerical evaluations with 200 vertices. We can see that, our algorithm outperforms the OP for both the time-invariant and time-varying profits. Particularly, the difference margin is larger for the timevarying profits. Actually, the classic OP cannot handle timevarying profits and the total profit curve quickly converges (with fixed given time T , the overall profit of OP stops growing along with the increment of the number of vertices). The running time is compared in Fig. 7(c), from which we can observe that, in practice our algorithm costs less time than that of the OP using the center-of-gravity heuristic."}, {"heading": "E. Path Quality under Different Time Intervals", "text": "Time interval \u2206t determines time discretization resolution, and therefore affacts the optimality as well. Table I shows statistics of the route\u2019s quality under different time intervals. In the table, numbers in the first row are interval values, and numbers in the first column are the number of vertices. The remaining values are the collected profits from our algorithm. We can see that, in general the route\u2019s quality is better when the time interval is smaller. However, obviously a smaller time interval will inevitably lead to a larger graph and thus require a larger running time."}, {"heading": "F. Demonstration with New York Taxi Data", "text": "We demonstrate that the proposed algorithm can be used for (autonomous) taxi routing. Fig. 8 shows real data of taxi calls in New York city. The data is obtained from NYC Taxi and Limousine Commission [1]. We use the kmeans clustering algorithm to cluster the whole New York taxi calls into 50 local regions, as shown in Fig. 9(a). The clustering centers are shown in Fig. 9(b). We assume that each pick-up and the subsequent drop-off occur in the same local region, and each pick-up and drop-off is counted as\na completion of one service. Then a taxi driver aims at maximizing the profit by providing more services during a fixed period. In each region, we calculate the total number of taxi calls in every predefined time unit (e.g., minute). An example is shown in Fig. 10. We regard the total number of taxi calls in a region as a time-varying profit, and more calls indicate higher chance of getting profits (note, there are\nNote: T = 150, graph within [\u221250, 50]\u00d7 [\u221250, 50] on x-y plane, profit fi(t) = wit/T. 50,100,150 and 200 are the numbers of vertices. other taxis too). Therefore, this problem can be formulated as an orienteering problem with time-varying profits, where we need to treat those clustered regions as super routing depots that offer different profits at different times of a day. Fig. 11 demonstrates a result generated from running our algorithm, from which we can observe that the taxi is routed across those regions with the most taxi calls, even though we set the starting point at a distant location with sparse requests."}, {"heading": "VII. CONCLUSION AND FUTURE WORK", "text": "We presented a framework for addressing the orienteering problem with time-varying profits. Instead of following traditional mixed integer program solution routines, we develop an intuitive and effective framework that incorporates timevariations into the fundamental planning process. Specifically, we first construct a deterministic spatio-temporal\nrepresentation where both spatial description and temporal logic are unified into one routing topology, and then we extend existing sorting and searching algorithms, so that the routing solutions can be computed in an extremely efficient way. Finally, we validated our algorithm with numerical evaluations and the results show that our framework produces near-optimal solutions in a very efficient way."}], "references": [{"title": "Team orienteering problem with decreasing profits", "author": ["H.M. Afsar", "N. Labadie"], "venue": "Electronic Notes in Discrete Mathematics,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "On a routing problem", "author": ["R. Bellman"], "venue": "Quarterly of applied mathematics,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1958}, {"title": "The Traveling Salesman Problem: A Survey", "author": ["M. Bellmore", "G.L. Nemhauser"], "venue": "Operations Research,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1968}, {"title": "Optimizing waypoints for monitoring spatiotemporal phenomena", "author": ["J. Binney", "A. Krause", "G.S. Sukhatme"], "venue": "The International Journal of Robotics Research,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "The team orienteering problem", "author": ["I.-M. Chao", "B.L. Golden", "E.A. Wasil"], "venue": "European journal of operational research,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1996}, {"title": "The vehicle routing problem. Revue fran\u00e7aise d\u2019automatique, d\u2019informatique et de recherche op\u00e9rationnelle", "author": ["N. Christofides"], "venue": "Recherche ope\u0301rationnelle,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1976}, {"title": "A hybrid search method for the vehicle routing problem with time windows", "author": ["H.C.B. de Oliveira", "G.C. Vasconcelos"], "venue": "Annals of Operations Research,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "Approximation algorithms for timedependent orienteering", "author": ["F.V. Fomin", "A. Lingas"], "venue": "Information Processing Letters,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2002}, {"title": "Hybrid approach for the public transportation time dependent orienteering problem with time windows", "author": ["A. Garcia", "O. Arbelaitz", "P. Vansteenwegen", "W. Souffriau", "M.T. Linaza"], "venue": "In International Conference on Hybrid Artificial Intelligence Systems,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2010}, {"title": "The orienteering problem", "author": ["B.L. Golden", "L. Levy", "R. Vohra"], "venue": "Naval research logistics,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1987}, {"title": "Orienteering problem: A survey of recent variants, solution approaches and applications", "author": ["A. Gunawan", "H.C. Lau", "P. Vansteenwegen"], "venue": "European Journal of Operational Research,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2016}, {"title": "A branch-and-price algorithm for the vehicle routing problem with deliveries, selective pickups and time windows", "author": ["G. Guti\u00e9rrez-Jarpa", "G. Desaulniers", "G. Laporte", "V. Marianov"], "venue": "European Journal of Operational Research,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2010}, {"title": "Topological sorting of large networks", "author": ["A.B. Kahn"], "venue": "Commun. ACM,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1962}, {"title": "Introduction to NP- Completeness of knapsack problems", "author": ["H. Kellerer", "U. Pferschy", "D. Pisinger"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2004}, {"title": "Enhanced exact solution methods for the team orienteering problem", "author": ["M. Keshtkaran", "K. Ziarati", "A. Bettinelli", "D. Vigo"], "venue": "International Journal of Production Research,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2016}, {"title": "The traveling salesman problem: An overview of exact and approximate algorithms", "author": ["G. Laporte"], "venue": "European Journal of Operational Research,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1992}, {"title": "Finding optimal solutions for vehicle routing problem with pickup and delivery services with time windows: A dynamic programming approach based on state\u2013space\u2013time network representations", "author": ["M. Mahmoudi", "X. Zhou"], "venue": "Transportation Research Part B: Methodological,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2016}, {"title": "Integer programming formulation of traveling salesman problems", "author": ["C.E. Miller", "A.W. Tucker", "R.A. Zemlin"], "venue": "Journal of the ACM (JACM),", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1960}, {"title": "Integer and Combinatorial Optimization", "author": ["G.L. Nemhauser", "L.A. Wolsey"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1988}, {"title": "A tabu search heuristic for the team orienteering problem", "author": ["H. Tang", "E. Miller-Hooks"], "venue": "Computers & Operations Research,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2005}, {"title": "The orienteering problem: A survey", "author": ["P. Vansteenwegen", "W. Souffriau", "D. Van Oudheusden"], "venue": "European Journal of Operational Research,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2011}, {"title": "A fast solution method for the time-dependent orienteering problem", "author": ["C. Verbeeck", "K. S\u00f6rensen", "E.-H. Aghezzaf", "P. Vansteenwegen"], "venue": "European Journal of Operational Research,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2014}, {"title": "Large neighborhoods with implicit customer selection for vehicle routing problems with profits", "author": ["T. Vidal", "N. Maculan", "L.S. Ochi", "P.H. Vaz Penna"], "venue": "Transportation Science,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2015}], "referenceMentions": [{"referenceID": 9, "context": "This variant of routing problems is called the orienteering problem (OP) [11].", "startOffset": 73, "endOffset": 77}, {"referenceID": 15, "context": ", unchanging environment or topology with stationary cost metrics) [17], [12], in this work we are intrigued to investigate a time-varying variant of OPs, i.", "startOffset": 67, "endOffset": 71}, {"referenceID": 10, "context": ", unchanging environment or topology with stationary cost metrics) [17], [12], in this work we are intrigued to investigate a time-varying variant of OPs, i.", "startOffset": 73, "endOffset": 77}, {"referenceID": 3, "context": ") An important objective of environment monitoring is to plan so-called \u201cinformative paths\u201d [5] that navigate the robots to acquire data from those most information-rich spots which best help estimate the environment.", "startOffset": 92, "endOffset": 95}, {"referenceID": 1, "context": "The routing problems have been well studied in many research domains including operations research, theoretical computer science, and transportation systems [3], [4], [7].", "startOffset": 157, "endOffset": 160}, {"referenceID": 2, "context": "The routing problems have been well studied in many research domains including operations research, theoretical computer science, and transportation systems [3], [4], [7].", "startOffset": 162, "endOffset": 165}, {"referenceID": 5, "context": "The routing problems have been well studied in many research domains including operations research, theoretical computer science, and transportation systems [3], [4], [7].", "startOffset": 167, "endOffset": 170}, {"referenceID": 17, "context": "Typical routing problems involve incorporation of constraints expressed from the nature of the target problems, which also narrow the space of searching for solutions [19].", "startOffset": 167, "endOffset": 171}, {"referenceID": 9, "context": "We are interested in a variant of routing problems called the orienteering problems (OPs) [11], [22].", "startOffset": 90, "endOffset": 94}, {"referenceID": 20, "context": "We are interested in a variant of routing problems called the orienteering problems (OPs) [11], [22].", "startOffset": 96, "endOffset": 100}, {"referenceID": 13, "context": "characteristics of both knapsack problems (KPs) [15] and travelling salesman problems (TSPs) [19], and OPs are NPhard as well.", "startOffset": 48, "endOffset": 52}, {"referenceID": 17, "context": "characteristics of both knapsack problems (KPs) [15] and travelling salesman problems (TSPs) [19], and OPs are NPhard as well.", "startOffset": 93, "endOffset": 97}, {"referenceID": 20, "context": "Recent survey papers [22], [12] have profoundly discussed state-of-the-art techniques of these variants as well as their applications.", "startOffset": 21, "endOffset": 25}, {"referenceID": 10, "context": "Recent survey papers [22], [12] have profoundly discussed state-of-the-art techniques of these variants as well as their applications.", "startOffset": 27, "endOffset": 31}, {"referenceID": 11, "context": ", a master problem and a series of sub-problems) which can then be iteratively solved by commercial solvers [13], [16].", "startOffset": 108, "endOffset": 112}, {"referenceID": 14, "context": ", a master problem and a series of sub-problems) which can then be iteratively solved by commercial solvers [13], [16].", "startOffset": 114, "endOffset": 118}, {"referenceID": 4, "context": "In order to reduce the heavy computational burden in decomposition methods, heuristics and metaheuristics have been extensively studied, typically including tabu-based or neighborhood search based procedures [6], [21], [24].", "startOffset": 208, "endOffset": 211}, {"referenceID": 19, "context": "In order to reduce the heavy computational burden in decomposition methods, heuristics and metaheuristics have been extensively studied, typically including tabu-based or neighborhood search based procedures [6], [21], [24].", "startOffset": 213, "endOffset": 217}, {"referenceID": 22, "context": "In order to reduce the heavy computational burden in decomposition methods, heuristics and metaheuristics have been extensively studied, typically including tabu-based or neighborhood search based procedures [6], [21], [24].", "startOffset": 219, "endOffset": 223}, {"referenceID": 8, "context": "Although in general OPs have been well researched, the time-dependent OPs (TOPs) have received relatively less attention comparing with other variants [10], [12].", "startOffset": 151, "endOffset": 155}, {"referenceID": 10, "context": "Although in general OPs have been well researched, the time-dependent OPs (TOPs) have received relatively less attention comparing with other variants [10], [12].", "startOffset": 157, "endOffset": 161}, {"referenceID": 16, "context": "Even so, most of existing TOPs discuss the time-varying properties that are associated with the real travel time between pairwise nodes, and assume that travel time between two nodes depends on the departure time at the first (or an earlier) node [18], [9], [8], [23].", "startOffset": 247, "endOffset": 251}, {"referenceID": 7, "context": "Even so, most of existing TOPs discuss the time-varying properties that are associated with the real travel time between pairwise nodes, and assume that travel time between two nodes depends on the departure time at the first (or an earlier) node [18], [9], [8], [23].", "startOffset": 253, "endOffset": 256}, {"referenceID": 6, "context": "Even so, most of existing TOPs discuss the time-varying properties that are associated with the real travel time between pairwise nodes, and assume that travel time between two nodes depends on the departure time at the first (or an earlier) node [18], [9], [8], [23].", "startOffset": 258, "endOffset": 261}, {"referenceID": 21, "context": "Even so, most of existing TOPs discuss the time-varying properties that are associated with the real travel time between pairwise nodes, and assume that travel time between two nodes depends on the departure time at the first (or an earlier) node [18], [9], [8], [23].", "startOffset": 263, "endOffset": 267}, {"referenceID": 0, "context": "One work that share certain similarity with this proposed problem is [2], where multiple vehicles need to serve a number of clients and the profit of each client follows a decreasing function of time.", "startOffset": 69, "endOffset": 72}, {"referenceID": 0, "context": "Instead of employing conventional techniques such as the column generation approach used in [2], in this work we present our first study that models and tackles the problem from a different perspective: we start from establishing a representation built from the spatial and temporal constraints, so that the time dependence attribute is transferred from the", "startOffset": 92, "endOffset": 95}, {"referenceID": 17, "context": "Constraints (6) and (7), so called Miller-Tucker-Zemlin (MTZ) formulation in the traveling sales problem[19], are used to prevent subtours.", "startOffset": 104, "endOffset": 108}, {"referenceID": 18, "context": "Most of existing literature in OPs either lumps all constraints together and solves it by conventional solvers of MIPs [20], [22], or decouples the constraints into master-subproblem modules such as column generation [2], or use certain heuristics such as center-of-gravity heuristic [11].", "startOffset": 119, "endOffset": 123}, {"referenceID": 20, "context": "Most of existing literature in OPs either lumps all constraints together and solves it by conventional solvers of MIPs [20], [22], or decouples the constraints into master-subproblem modules such as column generation [2], or use certain heuristics such as center-of-gravity heuristic [11].", "startOffset": 125, "endOffset": 129}, {"referenceID": 0, "context": "Most of existing literature in OPs either lumps all constraints together and solves it by conventional solvers of MIPs [20], [22], or decouples the constraints into master-subproblem modules such as column generation [2], or use certain heuristics such as center-of-gravity heuristic [11].", "startOffset": 217, "endOffset": 220}, {"referenceID": 9, "context": "Most of existing literature in OPs either lumps all constraints together and solves it by conventional solvers of MIPs [20], [22], or decouples the constraints into master-subproblem modules such as column generation [2], or use certain heuristics such as center-of-gravity heuristic [11].", "startOffset": 284, "endOffset": 288}, {"referenceID": 16, "context": "As a result, such a spatio-temporal representation is equivalent to a vertex-weighted Directed Acyclic Graph (DAG) [18].", "startOffset": 115, "endOffset": 119}, {"referenceID": 12, "context": "We employ a well-known algorithm developed by Kahn [14] to sort our spatial-temporal graph G\u2032, with main steps shown in Alg.", "startOffset": 51, "endOffset": 55}, {"referenceID": 9, "context": "We implemented a well-known heuristic called center-of-gravity [11], and tested with both time-invariant and time-variant profits.", "startOffset": 63, "endOffset": 67}], "year": 2017, "abstractText": "We consider an orienteering problem (OP) where an agent needs to visit a series (possibly a subset) of depots, from which the maximal accumulated profits are desired within given limited time budget. Different from most existing works where the profits are assumed to be static, in this work we investigate a variant that has arbitrary time-dependent profits. Specifically, the profits to be collected change over time and they follow different (e.g., independent) time-varying functions. The problem is of inherent nonlinearity and difficult to solve by existing methods. To tackle the challenge, we present a simple and effective framework that incorporates time-variations into the fundamental planning process. Specifically, we propose a deterministic spatio-temporal representation where both spatial description and temporal logic are unified into one routing topology. By employing existing basic sorting and searching algorithms, the routing solutions can be computed in an extremely efficient way. The proposed method is easy to implement and extensive numerical results show that our approach is time efficient and generates near-optimal solutions.", "creator": "LaTeX with hyperref package"}}}