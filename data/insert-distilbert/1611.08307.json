{"id": "1611.08307", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Nov-2016", "title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "to enhance developer productivity, all modern integrated development environments ( ides ) include code suggestion functionality that proposes likely next tokens at the cursor. while current ides work well for statically - typed languages, their reliance on type annotations means that they don't provide the same level of support for dynamic programming languages as for statically - typed languages. moreover, suggestion engines in modern binary ides don't propose expressions or multi - statement idiomatic code. recent work has shown that language models can improve code suggestion systems by learning from software repositories. this paper introduces a neural language model with a sparse pointer network aimed at capturing very long - range dependencies. we release a large - scale code suggestion corpus of 41m lines of python code crawled from github. on this corpus, we found standard neural language models to perform well at suggesting local phenomena, ostensibly but struggle to refer to identifiers that are introduced many tokens in their the past. by augmenting a neural language model with a pointer network specialized in referring to predefined word classes of identifiers, accordingly we obtain a much lower perplexity and a 5 percentage decimal points increase in accuracy for code suggestion compared to an lstm calculation baseline. in fact, this meaningful increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. furthermore, a qualitative analysis shows this model arguably indeed captures interesting long - range dependencies, quite like referring to a class member defined over 60 tokens in the past.", "histories": [["v1", "Thu, 24 Nov 2016 21:01:46 GMT  (741kb,D)", "http://arxiv.org/abs/1611.08307v1", "Under review as a conference paper at ICLR 2017"]], "COMMENTS": "Under review as a conference paper at ICLR 2017", "reviews": [], "SUBJECTS": "cs.NE cs.AI cs.CL cs.SE", "authors": ["avishkar bhoopchand", "tim rockt\\\"aschel", "earl barr", "sebastian riedel"], "accepted": false, "id": "1611.08307"}, "pdf": {"name": "1611.08307.pdf", "metadata": {"source": "CRF", "title": "LEARNING PYTHON CODE SUGGESTION WITH A SPARSE POINTER NETWORK", "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "emails": ["avishkar.bhoopchand.15@ucl.ac.uk,", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"], "sections": [{"heading": "1 INTRODUCTION", "text": "Integrated development environments (IDEs) are essential tools for programmers. Especially when a developer is new to a codebase, one of their most useful features is code suggestion: given a piece of code as context, suggest a likely sequence of next tokens. Typically, the IDE suggests an identifier or a function call, including API calls. While extensive support exists for statically-typed languages such as Java, code suggestion for dynamic languages like Python is harder and less well supported because of the lack of type annotations. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code.\nRecently, methods from statistical natural language processing (NLP) have been used to train code suggestion systems from code usage in large code repositories (Hindle et al., 2012; Allamanis & Sutton, 2013; Tu et al., 2014). To this end, usually an n-gram language model is trained to score possible completions. Neural language models for code suggestion (White et al., 2015; Das & Shah, 2015) have extended this line of work to capture more long-range dependencies. Yet, these standard neural language models are limited by the so-called hidden state bottleneck, i.e., all context information has to be stored in a fixed-dimensional internal vector representation. This limitation restricts such models to local phenomena and does not capture very long-range semantic relationships like suggesting calling a function that has been defined many tokens before.\nTo address these issues, we create a large corpus of 41M lines of Python code by using a heuristic for crawling high-quality code repositories from GitHub. We investigate, for the first time, the use of attention (Bahdanau et al., 2014) for code suggestion and find that, despite a substantial improvement\nar X\niv :1\n61 1.\n08 30\n7v 1\n[ cs\n.N E\n] 2\n4 N\nov 2\n01 6\nin accuracy, it still makes avoidable mistakes. Hence, we introduce a model that leverages long-range Python dependencies by selectively attending over the introduction of identifiers as determined by examining the Abstract Syntax Tree. The model is a form of pointer network (Vinyals et al., 2015a), and learns to dynamically choose between syntax-aware pointing for modeling long-range dependencies and free form generation to deal with local phenomena, based on the current context.\nOur contributions are threefold: (i) We release a code suggestion corpus of 41M lines of Python code crawled from GitHub, (ii) We introduce a sparse attention mechanism that captures very long-range dependencies for code suggestion of this dynamic programming language efficiently, and (iii) We provide a qualitative analysis demonstrating that this model is indeed able to learn such long-range dependencies."}, {"heading": "2 METHODS", "text": "We first revisit neural language models, before briefly describing how to extend such a language model with an attention mechanism. Then we introduce a sparse attention mechanism for a pointer network that can exploit the Python abstract syntax tree of the current context for code suggestion."}, {"heading": "2.1 NEURAL LANGUAGE MODEL", "text": "Code suggestion can be approached by a language model that measures the probability of observing a sequence of tokens in a Python program. For example, for the sequence S = a1, . . . , aN , the joint probability of S factorizes according to\nP\u03b8(S) = P\u03b8(a1) \u00b7 N\u220f t=2 P\u03b8(at | at\u22121, . . . , a1) (1)\nwhere the parameters \u03b8 are estimated from a training corpus. Given a sequence of Python tokens, we seek to predict the next M tokens at+1, . . . , at+M that maximize Equation 1\nargmax at+1, ..., at+M P\u03b8(a1, . . . , at, at+1, . . . , at+M ). (2)\nIn this work, we build upon neural language models using Recurrent Neural Networks (RNNs) and Long Short-Term Memory (LSTM, Hochreiter & Schmidhuber, 1997). This neural language model estimates the probabilities in Equation 1 using the output vector of an LSTM at time step t (denoted ht here) according to\nP\u03b8(at = \u03c4 | at\u22121, . . . , a1) = exp (vT\u03c4 ht + b\u03c4 )\u2211 \u03c4 \u2032 exp (v T \u03c4 \u2032ht + b\u03c4 \u2032)\n(3)\nwhere v\u03c4 is a parameter vector associated with token \u03c4 in the vocabulary.\nNeural language models can, in theory, capture long-term dependencies in token sequences through their internal memory. However, as this internal memory has fixed dimension and can be updated at every time step, such models often only capture local phenomena. In contrast, we are interested in very long-range dependencies like referring to a function identifier introduced many tokens in the past. For example, a function identifier may be introduced at the top of a file and only used near the bottom. In the following, we investigate various external memory architectures for neural code suggestion."}, {"heading": "2.2 ATTENTION", "text": "A straight-forward approach to capturing long-range dependencies is to use a neural attention mechanism (Bahdanau et al., 2014) on the previous K output vectors of the language model. Attention mechanisms have been successfully applied to sequence-to-sequence tasks such as machine translation (Bahdanau et al., 2014), question-answering (Hermann et al., 2015), syntactic parsing (Vinyals et al., 2015b), as well as dual-sequence modeling like recognizing textual entailment (Rockta\u0308schel et al., 2016). The idea is to overcome the hidden-state bottleneck by allowing referral back to previous output vectors. Recently, these mechanisms were applied to language modelling by Cheng et al. (2016) and Tran et al. (2016).\nFormally, an attention mechanism with a fixed memory Mt \u2208 Rk\u00d7K of K vectors mi \u2208 Rk for i \u2208 [1,K], produces an attention distribution \u03b1t \u2208 RK and context vector ct \u2208 Rk at each time step t according to Equations 4 to 7. Furthermore, WM ,W h \u2208 Rk\u00d7k and w \u2208 Rk are trainable parameters. Finally, note that 1K represents a K-dimensional vector of ones.\nMt = [m1 . . . mK ] \u2208 Rk\u00d7K (4) Gt = tanh(WMMt + 1TK(W\nhht)) \u2208 Rk\u00d7K (5) \u03b1t = softmax(wTGt) \u2208 R1\u00d7K (6) ct =Mt\u03b1 T t \u2208 Rk (7)\nFor language modeling, we populate Mt with a fixed window of the previous K LSTM output vectors. To obtain a distribution over the next token we combine the context vector ct of the attention mechanism with the output vector ht of the LSTM using a trainable projection matrixWA \u2208 Rk\u00d72k. The resulting final output vector nt \u2208 Rk encodes the next-word distribution and is projected to the size of the vocabulary |V |. Subsequently, we apply a softmax to arrive at a probability distribution yt \u2208 R|V | over the next token. This process is presented in Equation 9 where WV \u2208 R|V |\u00d7k and bV \u2208 R|V | are trainable parameters.\nnt = tanh ( WA [ ht ct ]) \u2208 Rk (8)\nyt = softmax(W V nt + b V ) \u2208 R|V | (9)\nThe problem of the attention mechanism above is that it quickly becomes computationally expensive for large K. Moreover, attending over many memories can make training hard as a lot of noise is introduced in early stages of optimization where the LSTM outputs (and thus the memoryMt) are more or less random. To alleviate these problems we now turn to pointer networks and a simple heuristic for populating Mt that permits the efficient retrieval of identifiers in a large history of Python code."}, {"heading": "2.3 SPARSE POINTER NETWORK", "text": "We develop an attention mechanism that provides a filtered view of a large history of Python tokens. At any given time step, the memory consists of context representations of the previous K identifiers introduced in the history. This allows us to model long-range dependencies found in identifier usage. For instance, a class identifier may be declared hundreds of lines of code before it is used. Given a history of Python tokens, we obtain a next-word distribution from a weighed average of the sparse pointer network for identifier reference and a standard neural language model. The weighting of the two is determined by a controller.\nFormally, at time-step t, the sparse pointer network operates on a memoryMt \u2208 Rk\u00d7K of only the K previous identifier representations (e.g. function identifiers, class identifiers and so on). In addition, we maintain a vectormt = [id1, . . . , idK ] \u2208 NK of symbol ids for these identifier representations (i.e. pointers into the large global vocabulary).\nAs before, we calculate a context vector ct using the attention mechanism (Equation 7), but on a memoryMt only containing representations of identifiers that were declared in the history. Next, we obtain a pseudo-sparse distribution over the global vocabulary from\nst[i] = { \u03b1t[j] ifmt[j] = i \u2212C otherwise (10)\nit = softmax(st) \u2208 R|V | (11)\nwhere\u2212C is a large negative constant (e.g. \u22121000). In addition, we calculate a next-word distribution from a standard neural language model\nyt = softmax(W V ht + bV ) \u2208 R|V | (12)\nand we use a controller to calculate a distribution \u03bbt \u2208 R2 over the language model and pointer network for the final weighted next-word distribution y\u2217t via\nh\u03bbt = [ ht xt ct ] \u2208 R3k (13)\n\u03bbt = softmax(W \u03bbh\u03bbt + b \u03bb) \u2208 R2 (14) y\u2217t = [yt it]\u03bbt \u2208 R|V | (15)\nHere, xt is the representation of the input token, and W \u03bb \u2208 R2\u00d73k and b\u03bb \u2208 R2 a trainable weight matrix and bias respectively. This controller is conditioned on the input, output and context representations. This means for deciding whether to refer to an identifier or generate from the global vocabulary, the controller has access to information from the encoded next-word distribution ht of the standard neural language model, as well as the attention-weighted identifier representations ct from the current history.\nFigure 1 overviews this process. In it, the identifier base_path appears twice, once as an argument to a function and once as a member of a class (denoted by *). Each appearance has a different id in the vocabulary and obtains a different probability from the model. In the example, the model correctly chooses to refer to the member of the class instead of the out-of-scope function argument, although, from a user point-of-view, the suggestion would be the same in both cases."}, {"heading": "3 LARGE-SCALE PYTHON CORPUS", "text": "Previous work on code suggestion either focused on statically-typed languages (particularly Java) or trained on very small corpora. Thus, we decided to collect a new large-scale corpus of the dynamic programming language Python. According to the programming language popularity website Pypl (Carbonnelle, 2016), Python is the second most popular language after Java. It is also the 3rd most common language in terms of number of repositories on the open-source code repository GitHub, after JavaScript and Java (Zapponi, 2016).\nWe collected a corpus of 41M lines of Python code from GitHub projects. Ideally, we would like this corpus to only contain high-quality Python code, as our language model learns to suggest code from how users write code. However, it is difficult to automatically assess what constitutes high-quality code. Thus, we resort to the heuristic that popular code projects tend to be of good quality, There are\ntwo metrics on GitHub that we can use for this purpose, namely stars (similar to bookmarks) and forks (copies of a repository that allow users to freely experiment with changes without affecting the original repository). Similar to Allamanis & Sutton (2013) and Allamanis et al. (2014), we select Python projects with more than 100 stars, sort by the number of forks descending, and take the top 1000 projects. We then removed projects that did not compile with Python3, leaving us with 949 projects. We split the corpus on the project level into train, dev, and test. Table 1 presents the corpus statistics."}, {"heading": "3.1 NORMALIZATION OF IDENTIFIERS", "text": "Unsurprisingly, the long tail of words in the vocabulary consists of rare identifiers. To improve generalization, we normalize identifiers before feeding the resulting token stream to our models. That is, we replace every identifier name with an anonymous identifier indicating the identifier group (class, variable, argument, attribute or function) concatenated with a random number that makes the identifier unique in its scope. Note that we only replace novel identifiers defined within a file. Identifier references to external APIs and libraries are left untouched. Consistent with previous corpus creation for code suggestion (e.g. Khanh Dam et al., 2016; White et al., 2015), we replace numerical constant tokens with $NUM$, remove comments, reformat the code, and replace tokens appearing less than five times with an $OOV$ (out of vocabulary) token."}, {"heading": "4 EXPERIMENTS", "text": "Although previous work by White et al. (2015) already established that a simple neural language model outperforms an n-gram model for code suggestion, we include a number of n-gram baselines to confirm this observation. Specifically, we use n-gram models for n \u2208 {3, 4, 5, 6} with Modified Kneser-Ney smoothing (Kneser & Ney, 1995) from the Kyoto Language Modelling Toolkit (Neubig, 2012).\nWe train the sparse pointer network using mini-batch SGD with a batch size of 30 and truncated backpropagation through time (Werbos, 1990) with a history of 20 identifier representations. We use\nan initial learning rate of 0.7 and decay it by 0.9 after every epoch. As additional baselines, we test a neural language model with LSTM units with and without attention. For the attention language models, we experiment with a fixed-window attention memory of the previous 20 and 50 tokens respectively, and a batch size of 75.\nAll neural language models were developed in TensorFlow (Abadi et al., 2016) and trained using cross-entropy loss. While processing a Python source code file, the last recurrent state of the RNN is fed as the initial state of the subsequent sequence of the same file and reset between files. All models use an input and hidden size of 200, an LSTM forget gate bias of 1 (Jozefowicz et al., 2015), gradient norm clipping of 5 (Pascanu et al., 2013), and randomly initialized parameters in the interval (\u22120.05, 0.05). As regularizer, we use a dropout of 0.1 on the input representations. Furthermore, we use a sampled softmax (Jean et al., 2015) with a log-uniform sampling distribution and a sample size of 1000."}, {"heading": "5 RESULTS", "text": "We evaluate all models using perplexity (PP), as well as accuracy of the top prediction (Acc) and the top five predictions (Acc@5). The results are summarized in Table 2.\nWe can confirm that for code suggestion neural models outperform n-gram language models by a large margin. Furthermore, adding attention improves the results substantially (2.3 lower perplexity and 3.4 percentage points increased accuracy). Interestingly, this increase can be attributed to a superior prediction of identifiers, which increased from an accuracy of 2.1% to 21.4%. An LSTM with an attention window of 50 gives us the best accuracy for the top prediction. We achieve further improvements for perplexity and accuracy of the top five predictions by using a sparse pointer network that uses a smaller memory of the past 20 identifier representations."}, {"heading": "5.1 QUALITATIVE ANALYSIS", "text": "Figures 3a-d show a code suggestion example involving an identifier usage. While the LSTM baseline is uncertain about the next token, we get a sensible prediction by using attention or the sparse pointer network. The sparse pointer network provides more reasonable alternative suggestions beyond the correct top suggestion.\nFigures 3e-h show the use-case referring to a class attribute declared 67 tokens in the past. Only the Sparse Pointer Network makes a good suggestion. Furthermore, the attention weights in 3i demonstrate that this model distinguished attributes from other groups of identifiers. We give a full example of a token-by-token suggestion of the Sparse Pointer Network in Figure 4 in the Appendix."}, {"heading": "6 RELATED WORK", "text": "Previous code suggestion work using methods from statistical NLP has mostly focused on n-gram models. Much of this work is inspired by Hindle et al. (2012) who argued that real programs fall\n(a) Code snippet for referencing variable.\n(b) LSTM Model. (c) LSTM w/ Attention 50. (d) Sparse Pointer Network.\ninto a much smaller space than the flexibility of programming languages allows. They were able to capture the repetitiveness and predictable statistical properties of real programs using language models. Subsequently, Tu et al. (2014) improved upon Hindle et al.\u2019s work by adding a cache mechanism that allowed them to exploit locality stemming from the specialisation and decoupling of program modules. Tu et al.\u2019s idea of adding a cache mechanism to the language model is specifically designed to exploit the properties of source code, and thus follows the same aim as the sparse attention mechanism introduced in this paper.\nWhile the majority of preceding work trained on small corpora, Allamanis & Sutton (2013) created a corpus of 352M lines of Java code which they analysed with n-gram language models. The size of the corpus allowed them to train a single language model that was effective across multiple different project domains. White et al. (2015) later demonstrated that neural language models outperform n-gram models for code suggestion. They compared various n-gram models (up to nine grams), including Tu et al.\u2019s cache model, with a basic RNN neural language model. Khanh Dam et al. (2016) compared White et al.\u2019s basic RNN with LSTMs and found that the latter are better at code suggestion due to their improved ability to learn long-range dependencies found in source code. Our paper extends this line of work by introducing a sparse attention model that captures even longer dependencies.\nThe combination of lagged attention mechanisms with language modelling is inspired by Cheng et al. (2016) who equipped LSTM cells with a fixed-length memory tape rather than a single memory cell. They achieved promising results on the standard Penn Treebank benchmark corpus (Marcus et al., 1993). Similarly, Tran et al. added a memory block to LSTMs for language modelling of English, German and Italian and outperformed both n-gram and neural language models. Their memory encompasses representations of all possible words in the vocabulary rather than providing a sparse view as we do.\nAn alternative to our purely lexical approach to code suggestion involves the use of probabilistic context-free grammars (PCFGs) which exploit the formal grammar specifications and well-defined, deterministic parsers available for source code. These were used by Allamanis & Sutton (2014) to extract idiomatic patterns from source code. A weakness of PCFGs is their inability to model context-dependent rules of programming languages such as that variables need to be declared before\nbeing used. Maddison & Tarlow (2014) added context-aware variables to their PCFG model in order to capture such rules.\nLing et al. (2016) recently used a pointer network to generate code from natural language descriptions. Our use of a controller for deciding whether to generate from a language model or copy an identifier using a sparse pointer network is inspired by their latent code predictor. However, their inputs (textual descriptions) are short whereas code suggestion requires capturing very long-range dependencies that we addressed by a filtered view on the memory of previous identifier representations."}, {"heading": "7 CONCLUSIONS AND FUTURE WORK", "text": "In this paper, we investigated neural language models for code suggestion of the dynamically-typed programming language Python. We released a corpus of 41M lines of Python crawled from GitHub and compared n-gram, standard neural language models, and attention. By using attention, we observed an order of magnitude more accurate prediction of identifiers. Furthermore, we proposed a sparse pointer network that can efficiently capture long-range dependencies by only operating on a filtered view of a memory of previous identifier representations. This model achieves the lowest perplexity and best accuracy among the top five predictions. The Python corpus and code for replicating our experiment is released at https://github.com/uclmr/pycodesuggest.\nThe presented methods were only tested for code suggestion within the same Python file. We are interested in scaling the approach to the level of entire code projects and collections thereof, as well as integrating a trained code suggestion model into an existing IDE. Furthermore, we plan to work on code completion, i.e., models that provide a likely continuation of a partial token, using character language models (Graves, 2013)."}, {"heading": "ACKNOWLEDGMENTS", "text": "This work was supported by Microsoft Research through its PhD Scholarship Programme, an Allen Distinguished Investigator Award, and a Marie Curie Career Integration Award."}], "references": [{"title": "Tensorflow: A system for large-scale machine learning", "author": ["Mart\u0131\u0301n Abadi", "Paul Barham", "Jianmin Chen", "Zhifeng Chen", "Andy Davis", "Jeffrey Dean", "Matthieu Devin", "Sanjay Ghemawat", "Geoffrey Irving", "Michael Isard", "Manjunath Kudlur", "Josh Levenberg", "Rajat Monga", "Sherry Moore", "Derek Gordon Murray", "Benoit Steiner", "Paul A. Tucker", "Vijay Vasudevan", "Pete Warden", "Martin Wicke", "Yuan Yu", "Xiaoqiang Zhang"], "venue": "CoRR, abs/1605.08695,", "citeRegEx": "Abadi et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Abadi et al\\.", "year": 2016}, {"title": "Mining idioms from source code", "author": ["Miltiadis Allamanis", "Charles Sutton"], "venue": "In Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering,", "citeRegEx": "Allamanis and Sutton.,? \\Q2014\\E", "shortCiteRegEx": "Allamanis and Sutton.", "year": 2014}, {"title": "Mining source code repositories at massive scale using language modeling", "author": ["Miltiadis Allamanis", "Charles A. Sutton"], "venue": "MSR, pp. 207\u2013216. IEEE Computer Society,", "citeRegEx": "Allamanis and Sutton.,? \\Q2013\\E", "shortCiteRegEx": "Allamanis and Sutton.", "year": 2013}, {"title": "Learning natural coding conventions", "author": ["Miltiadis Allamanis", "Earl T. Barr", "Christian Bird", "Charles Sutton"], "venue": "In Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering,", "citeRegEx": "Allamanis et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Allamanis et al\\.", "year": 2014}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "CoRR, abs/1409.0473,", "citeRegEx": "Bahdanau et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2014}, {"title": "Pypl popularity of programming language. http://pypl.github.io/ PYPL.html, 2016", "author": ["Pierre Carbonnelle"], "venue": "URL http://pypl.github.io/PYPL.html. [Online; accessed 30August-2016]", "citeRegEx": "Carbonnelle.,? \\Q2016\\E", "shortCiteRegEx": "Carbonnelle.", "year": 2016}, {"title": "Long short-term memory-networks for machine reading", "author": ["Jianpeng Cheng", "Li Dong", "Mirella Lapata"], "venue": "In Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "Cheng et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Cheng et al\\.", "year": 2016}, {"title": "Contextual code completion using machine learning", "author": ["Subhasis Das", "Chinmayee Shah"], "venue": null, "citeRegEx": "Das and Shah.,? \\Q2015\\E", "shortCiteRegEx": "Das and Shah.", "year": 2015}, {"title": "Generating sequences with recurrent neural networks", "author": ["Alex Graves"], "venue": "CoRR, abs/1308.0850,", "citeRegEx": "Graves.,? \\Q2013\\E", "shortCiteRegEx": "Graves.", "year": 2013}, {"title": "Teaching machines to read and comprehend", "author": ["Karl Moritz Hermann", "Tom\u00e1s Kocisk\u00fd", "Edward Grefenstette", "Lasse Espeholt", "Will Kay", "Mustafa Suleyman", "Phil Blunsom"], "venue": "In Advances in Neural Information Processing Systems 28: Annual Conference on Neural Information Processing Systems", "citeRegEx": "Hermann et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Hermann et al\\.", "year": 2015}, {"title": "On the naturalness of software", "author": ["Abram Hindle", "Earl T. Barr", "Zhendong Su", "Mark Gabel", "Premkumar Devanbu"], "venue": "In Proceedings of the 34th International Conference on Software Engineering,", "citeRegEx": "Hindle et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hindle et al\\.", "year": 2012}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural Comput.,", "citeRegEx": "Hochreiter and Schmidhuber.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "On using very large target vocabulary for neural machine translation", "author": ["S\u00e9bastien Jean", "Kyunghyun Cho", "Roland Memisevic", "Yoshua Bengio"], "venue": "In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Volume 1: Long Papers),", "citeRegEx": "Jean et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Jean et al\\.", "year": 2015}, {"title": "An empirical exploration of recurrent network architectures", "author": ["Rafal Jozefowicz", "Wojciech Zaremba", "Ilya Sutskever"], "venue": "Proceedings of the 32nd International Conference on Machine Learning", "citeRegEx": "Jozefowicz et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Jozefowicz et al\\.", "year": 2015}, {"title": "A deep language model for software code", "author": ["H. Khanh Dam", "T. Tran", "T. Pham"], "venue": "ArXiv e-prints,", "citeRegEx": "Dam et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Dam et al\\.", "year": 2016}, {"title": "Improved backing-off for m-gram language modeling", "author": ["R. Kneser", "H. Ney"], "venue": "In Acoustics, Speech, and Signal Processing,", "citeRegEx": "Kneser and Ney.,? \\Q1995\\E", "shortCiteRegEx": "Kneser and Ney.", "year": 1995}, {"title": "Latent predictor networks for code generation", "author": ["Wang Ling", "Edward Grefenstette", "Karl Moritz Hermann", "Tomas Kocisky", "Andrew Senior", "Fumin Wang", "Phil Blunsom"], "venue": "arXiv preprint arXiv:1603.06744,", "citeRegEx": "Ling et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Ling et al\\.", "year": 2016}, {"title": "Structured generative models of natural source code", "author": ["Chris J Maddison", "Daniel Tarlow"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "Maddison and Tarlow.,? \\Q2014\\E", "shortCiteRegEx": "Maddison and Tarlow.", "year": 2014}, {"title": "Building a large annotated corpus of english: The penn treebank", "author": ["Mitchell P. Marcus", "Beatrice Santorini", "Mary Ann Marcinkiewicz"], "venue": "COMPUTATIONAL LINGUISTICS,", "citeRegEx": "Marcus et al\\.,? \\Q1993\\E", "shortCiteRegEx": "Marcus et al\\.", "year": 1993}, {"title": "Kylm - the kyoto language modeling toolkit", "author": ["Graham Neubig"], "venue": "http://www.phontron.com/ kylm/,", "citeRegEx": "Neubig.,? \\Q2012\\E", "shortCiteRegEx": "Neubig.", "year": 2012}, {"title": "On the difficulty of training recurrent neural networks", "author": ["Razvan Pascanu", "Tomas Mikolov", "Yoshua Bengio"], "venue": "In Proceedings of the 30th International Conference on Machine Learning,", "citeRegEx": "Pascanu et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Pascanu et al\\.", "year": 2013}, {"title": "Reasoning about entailment with neural attention", "author": ["Tim Rockt\u00e4schel", "Edward Grefenstette", "Karl Moritz Hermann", "Tomas Kocisky", "Phil Blunsom"], "venue": "In ICLR,", "citeRegEx": "Rockt\u00e4schel et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Rockt\u00e4schel et al\\.", "year": 2016}, {"title": "Recurrent memory networks for language modeling", "author": ["Ke M. Tran", "Arianna Bisazza", "Christof Monz"], "venue": "In NAACL HLT", "citeRegEx": "Tran et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Tran et al\\.", "year": 2016}, {"title": "On the localness of software", "author": ["Zhaopeng Tu", "Zhendong Su", "Premkumar Devanbu"], "venue": "In Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering,", "citeRegEx": "Tu et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Tu et al\\.", "year": 2014}, {"title": "Grammar as a foreign language", "author": ["Oriol Vinyals", "Lukasz Kaiser", "Terry Koo", "Slav Petrov", "Ilya Sutskever", "Geoffrey E. Hinton"], "venue": "In Advances in Neural Information Processing Systems 28: Annual Conference on Neural Information Processing Systems", "citeRegEx": "Vinyals et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Vinyals et al\\.", "year": 2015}, {"title": "Backpropagation through time: what it does and how to do it", "author": ["Paul J Werbos"], "venue": "Proceedings of the IEEE,", "citeRegEx": "Werbos.,? \\Q1990\\E", "shortCiteRegEx": "Werbos.", "year": 1990}, {"title": "Toward deep learning software repositories", "author": ["Martin White", "Christopher Vendome", "Mario Linares-V\u00e1squez", "Denys Poshyvanyk"], "venue": "In Proceedings of the 12th Working Conference on Mining Software Repositories,", "citeRegEx": "White et al\\.,? \\Q2015\\E", "shortCiteRegEx": "White et al\\.", "year": 2015}, {"title": "Githut - programming languages and github. http://githut.info/, 2016", "author": ["Carlo Zapponi"], "venue": "URL http://githut.info/. [Online; accessed 19-August-2016]", "citeRegEx": "Zapponi.,? \\Q2016\\E", "shortCiteRegEx": "Zapponi.", "year": 2016}], "referenceMentions": [{"referenceID": 10, "context": "Recently, methods from statistical natural language processing (NLP) have been used to train code suggestion systems from code usage in large code repositories (Hindle et al., 2012; Allamanis & Sutton, 2013; Tu et al., 2014).", "startOffset": 160, "endOffset": 224}, {"referenceID": 23, "context": "Recently, methods from statistical natural language processing (NLP) have been used to train code suggestion systems from code usage in large code repositories (Hindle et al., 2012; Allamanis & Sutton, 2013; Tu et al., 2014).", "startOffset": 160, "endOffset": 224}, {"referenceID": 26, "context": "Neural language models for code suggestion (White et al., 2015; Das & Shah, 2015) have extended this line of work to capture more long-range dependencies.", "startOffset": 43, "endOffset": 81}, {"referenceID": 4, "context": "We investigate, for the first time, the use of attention (Bahdanau et al., 2014) for code suggestion and find that, despite a substantial improvement", "startOffset": 57, "endOffset": 80}, {"referenceID": 4, "context": "A straight-forward approach to capturing long-range dependencies is to use a neural attention mechanism (Bahdanau et al., 2014) on the previous K output vectors of the language model.", "startOffset": 104, "endOffset": 127}, {"referenceID": 4, "context": "Attention mechanisms have been successfully applied to sequence-to-sequence tasks such as machine translation (Bahdanau et al., 2014), question-answering (Hermann et al.", "startOffset": 110, "endOffset": 133}, {"referenceID": 9, "context": ", 2014), question-answering (Hermann et al., 2015), syntactic parsing (Vinyals et al.", "startOffset": 28, "endOffset": 50}, {"referenceID": 21, "context": ", 2015b), as well as dual-sequence modeling like recognizing textual entailment (Rockt\u00e4schel et al., 2016).", "startOffset": 80, "endOffset": 106}, {"referenceID": 4, "context": "A straight-forward approach to capturing long-range dependencies is to use a neural attention mechanism (Bahdanau et al., 2014) on the previous K output vectors of the language model. Attention mechanisms have been successfully applied to sequence-to-sequence tasks such as machine translation (Bahdanau et al., 2014), question-answering (Hermann et al., 2015), syntactic parsing (Vinyals et al., 2015b), as well as dual-sequence modeling like recognizing textual entailment (Rockt\u00e4schel et al., 2016). The idea is to overcome the hidden-state bottleneck by allowing referral back to previous output vectors. Recently, these mechanisms were applied to language modelling by Cheng et al. (2016) and Tran et al.", "startOffset": 105, "endOffset": 694}, {"referenceID": 4, "context": "A straight-forward approach to capturing long-range dependencies is to use a neural attention mechanism (Bahdanau et al., 2014) on the previous K output vectors of the language model. Attention mechanisms have been successfully applied to sequence-to-sequence tasks such as machine translation (Bahdanau et al., 2014), question-answering (Hermann et al., 2015), syntactic parsing (Vinyals et al., 2015b), as well as dual-sequence modeling like recognizing textual entailment (Rockt\u00e4schel et al., 2016). The idea is to overcome the hidden-state bottleneck by allowing referral back to previous output vectors. Recently, these mechanisms were applied to language modelling by Cheng et al. (2016) and Tran et al. (2016).", "startOffset": 105, "endOffset": 717}, {"referenceID": 5, "context": "According to the programming language popularity website Pypl (Carbonnelle, 2016), Python is the second most popular language after Java.", "startOffset": 62, "endOffset": 81}, {"referenceID": 27, "context": "It is also the 3rd most common language in terms of number of repositories on the open-source code repository GitHub, after JavaScript and Java (Zapponi, 2016).", "startOffset": 144, "endOffset": 159}, {"referenceID": 3, "context": "Similar to Allamanis & Sutton (2013) and Allamanis et al. (2014), we select Python projects with more than 100 stars, sort by the number of forks descending, and take the top 1000 projects.", "startOffset": 41, "endOffset": 65}, {"referenceID": 26, "context": "Consistent with previous corpus creation for code suggestion (e.g. Khanh Dam et al., 2016; White et al., 2015), we replace numerical constant tokens with $NUM$, remove comments, reformat the code, and replace tokens appearing less than five times with an $OOV$ (out of vocabulary) token.", "startOffset": 61, "endOffset": 110}, {"referenceID": 19, "context": "Specifically, we use n-gram models for n \u2208 {3, 4, 5, 6} with Modified Kneser-Ney smoothing (Kneser & Ney, 1995) from the Kyoto Language Modelling Toolkit (Neubig, 2012).", "startOffset": 154, "endOffset": 168}, {"referenceID": 25, "context": "We train the sparse pointer network using mini-batch SGD with a batch size of 30 and truncated backpropagation through time (Werbos, 1990) with a history of 20 identifier representations.", "startOffset": 124, "endOffset": 138}, {"referenceID": 24, "context": "Although previous work by White et al. (2015) already established that a simple neural language model outperforms an n-gram model for code suggestion, we include a number of n-gram baselines to confirm this observation.", "startOffset": 26, "endOffset": 46}, {"referenceID": 0, "context": "All neural language models were developed in TensorFlow (Abadi et al., 2016) and trained using cross-entropy loss.", "startOffset": 56, "endOffset": 76}, {"referenceID": 13, "context": "All models use an input and hidden size of 200, an LSTM forget gate bias of 1 (Jozefowicz et al., 2015), gradient norm clipping of 5 (Pascanu et al.", "startOffset": 78, "endOffset": 103}, {"referenceID": 20, "context": ", 2015), gradient norm clipping of 5 (Pascanu et al., 2013), and randomly initialized parameters in the interval (\u22120.", "startOffset": 37, "endOffset": 59}, {"referenceID": 12, "context": "Furthermore, we use a sampled softmax (Jean et al., 2015) with a log-uniform sampling distribution and a sample size of 1000.", "startOffset": 38, "endOffset": 57}, {"referenceID": 10, "context": "Much of this work is inspired by Hindle et al. (2012) who argued that real programs fall", "startOffset": 33, "endOffset": 54}, {"referenceID": 18, "context": "They achieved promising results on the standard Penn Treebank benchmark corpus (Marcus et al., 1993).", "startOffset": 79, "endOffset": 100}, {"referenceID": 18, "context": "Subsequently, Tu et al. (2014) improved upon Hindle et al.", "startOffset": 14, "endOffset": 31}, {"referenceID": 9, "context": "(2014) improved upon Hindle et al.\u2019s work by adding a cache mechanism that allowed them to exploit locality stemming from the specialisation and decoupling of program modules. Tu et al.\u2019s idea of adding a cache mechanism to the language model is specifically designed to exploit the properties of source code, and thus follows the same aim as the sparse attention mechanism introduced in this paper. While the majority of preceding work trained on small corpora, Allamanis & Sutton (2013) created a corpus of 352M lines of Java code which they analysed with n-gram language models.", "startOffset": 21, "endOffset": 489}, {"referenceID": 9, "context": "(2014) improved upon Hindle et al.\u2019s work by adding a cache mechanism that allowed them to exploit locality stemming from the specialisation and decoupling of program modules. Tu et al.\u2019s idea of adding a cache mechanism to the language model is specifically designed to exploit the properties of source code, and thus follows the same aim as the sparse attention mechanism introduced in this paper. While the majority of preceding work trained on small corpora, Allamanis & Sutton (2013) created a corpus of 352M lines of Java code which they analysed with n-gram language models. The size of the corpus allowed them to train a single language model that was effective across multiple different project domains. White et al. (2015) later demonstrated that neural language models outperform n-gram models for code suggestion.", "startOffset": 21, "endOffset": 733}, {"referenceID": 9, "context": "(2014) improved upon Hindle et al.\u2019s work by adding a cache mechanism that allowed them to exploit locality stemming from the specialisation and decoupling of program modules. Tu et al.\u2019s idea of adding a cache mechanism to the language model is specifically designed to exploit the properties of source code, and thus follows the same aim as the sparse attention mechanism introduced in this paper. While the majority of preceding work trained on small corpora, Allamanis & Sutton (2013) created a corpus of 352M lines of Java code which they analysed with n-gram language models. The size of the corpus allowed them to train a single language model that was effective across multiple different project domains. White et al. (2015) later demonstrated that neural language models outperform n-gram models for code suggestion. They compared various n-gram models (up to nine grams), including Tu et al.\u2019s cache model, with a basic RNN neural language model. Khanh Dam et al. (2016) compared White et al.", "startOffset": 21, "endOffset": 981}, {"referenceID": 6, "context": "The combination of lagged attention mechanisms with language modelling is inspired by Cheng et al. (2016) who equipped LSTM cells with a fixed-length memory tape rather than a single memory cell.", "startOffset": 86, "endOffset": 106}, {"referenceID": 6, "context": "The combination of lagged attention mechanisms with language modelling is inspired by Cheng et al. (2016) who equipped LSTM cells with a fixed-length memory tape rather than a single memory cell. They achieved promising results on the standard Penn Treebank benchmark corpus (Marcus et al., 1993). Similarly, Tran et al. added a memory block to LSTMs for language modelling of English, German and Italian and outperformed both n-gram and neural language models. Their memory encompasses representations of all possible words in the vocabulary rather than providing a sparse view as we do. An alternative to our purely lexical approach to code suggestion involves the use of probabilistic context-free grammars (PCFGs) which exploit the formal grammar specifications and well-defined, deterministic parsers available for source code. These were used by Allamanis & Sutton (2014) to extract idiomatic patterns from source code.", "startOffset": 86, "endOffset": 878}, {"referenceID": 16, "context": "Ling et al. (2016) recently used a pointer network to generate code from natural language descriptions.", "startOffset": 0, "endOffset": 19}, {"referenceID": 8, "context": ", models that provide a likely continuation of a partial token, using character language models (Graves, 2013).", "startOffset": 96, "endOffset": 110}], "year": 2016, "abstractText": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very longrange dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "creator": "LaTeX with hyperref package"}}}