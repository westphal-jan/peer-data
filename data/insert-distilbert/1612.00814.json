{"id": "1612.00814", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Dec-2016", "title": "Perspective Transformer Nets: Learning Single-View 3D Object Reconstruction without 3D Supervision", "abstract": "understanding the 3d world is a fundamental problem in computer vision. however, 3d learning a good representation of 3d objects is still an open problem due to the high dimensionality of the data and many factors of variation involved. in this work, we investigate the task of single - view 3d object reconstruction from a learning agent's perspective. we formulate the learning process as choosing an interaction sequence between 3d and 2d representations and propose locating an encoder - decoder network with a significant novel projection loss defined by the perspective transformation. here more importantly, the projection loss enables the unsupervised learning using 2d dimensional observation without explicit 3d supervision. we demonstrate the ability of the model in generating 3d volume functions from a single 2d image with three sets of experiments : ( 1 ) learning from single - class objects ; ( no 2 ) learning from multi - class objects and ( 3 ) testing on novel object classes. results show superior performance and better generalization ability for 3d local object reconstruction when the projection loss is involved.", "histories": [["v1", "Thu, 1 Dec 2016 05:51:37 GMT  (8835kb,D)", "http://arxiv.org/abs/1612.00814v1", "published at NIPS 2016"], ["v2", "Thu, 16 Mar 2017 07:08:48 GMT  (8834kb,D)", "http://arxiv.org/abs/1612.00814v2", "published at NIPS 2016"], ["v3", "Sun, 13 Aug 2017 02:40:50 GMT  (8834kb,D)", "http://arxiv.org/abs/1612.00814v3", "published at NIPS 2016"]], "COMMENTS": "published at NIPS 2016", "reviews": [], "SUBJECTS": "cs.CV cs.GR cs.LG", "authors": ["xinchen yan", "jimei yang", "ersin yumer", "yijie guo", "honglak lee"], "accepted": true, "id": "1612.00814"}, "pdf": {"name": "1612.00814.pdf", "metadata": {"source": "CRF", "title": "Perspective Transformer Nets: Learning Single-View 3D Object Reconstruction without 3D Supervision", "authors": ["Xinchen Yan", "Jimei Yang", "Ersin Yumer", "Yijie Guo", "Honglak Lee"], "emails": ["glak}@umich.edu,", "jimyang@adobe.com", "yumer@adobe.com"], "sections": [{"heading": "1 Introduction", "text": "Understanding the 3D world is at the heart of successful computer vision applications in robotics, rendering and modeling [19]. It is especially important to solve this problem using the most convenient visual sensory data: 2D images. In this paper, we propose an end-to-end solution to the challenging problem of predicting the underlying true shape of an object given an arbitrary single image observation of it. This problem definition embodies a fundamental challenge: Imagery observations of 3D shapes are interleaved representations of intrinsic properties of the shape itself (e.g., geometry, material), as well as its extrinsic properties that depend on its interaction with the observer and the environment (e.g., orientation, position, and illumination). Physically principled shape understanding should be able to efficiently disentangle such interleaved factors.\nThis observation leads to insight that an end-to-end solution to this problem from the perspective of learning agents (neural networks) should involve the following properties: 1) the agent should understand the physical meaning of how a 2D observation is generated from the 3D shape, and 2) the agent should be conscious about the outcome of its interaction with the object; more specifically, by moving around the object, the agent should be able to correspond the observations to the viewpoint change. If such properties are embodied in a learning agent, it will be able to disentangle the shape from the extrinsic factors because these factors are trivial to understand in the 3D world. To enable the agent with these capabilities, we introduce a built-in camera system that can transform the 3D object into 2D images in-network. Additionally, we architect the network such that the latent representation disentangles the shape from view changes. More specifically, our network takes as input an object image and predicts its volumetric 3D shape so that the perspective transformations of predicted shape match well with corresponding 2D observations.\nWe implement this neural network based on a combination of image encoder, volume decoder and perspective transformer (similar to spatial transformer as introduced by Jaderberg et al. [6]). During training, the volumetric 3D shape is gradually learned from single-view input and the feedback of other views through back-propagation. Thus at test time, the 3D shape can be directly\n30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nar X\niv :1\n61 2.\n00 81\n4v 1\n[ cs\n.C V\n] 1\nD ec\n2 01\ngenerated from a single image. We conduct experimental evaluations using a subset of 3D models from ShapeNetCore [1]. Results from single-class and multi-class training demonstrate excellent performance of our network for volumetric 3D reconstruction. Our main contributions are summarized below.\n\u2022 We show that neural networks are able to predict 3D shape from single-view without using the ground truth 3D volumetric data for training. This is made possible by introducing a 2D silhouette loss function based on perspective transformations.\n\u2022 We train a single network for multi-class 3D object volumetric reconstruction and show its generalization potential to unseen categories.\n\u2022 Compared to training with full azimuth angles, we demonstrate comparatively similar results when training with partial views."}, {"heading": "2 Related Work", "text": "Representation learning for 3D objects. Recently, advances have been made in learning deep neural networks for 3D objects using large-scale CAD databases [22, 1]. Wu et al. [22] proposed a deep generative model that extends the convolutional deep belief network [11] to model volumetric 3D shapes. Different from [22] that uses volumetric 3D representation, Su et al. [18] proposed a multi-view convolutional network for 3D shape categorization with a view-pooling mechanism. These methods focus more on 3D shape recognition instead of 3D shape reconstruction. Recent work [20, 14, 4, 2] attempt to learn a joint representation for both 2D images and 3D shapes. Tatarchenko et al. [20] developed a convolutional network to synthesize unseen 3D views from a single image and demonstrated the synthesized images can be used them to reconstruct 3D shape. Qi et al. [14] introduced a joint embedding by combining volumetric representation and multi-view representation together to improve 3D shape recognition performance. Girdhar et al. [4] proposed a generative model for 3D volumetric data and combined it with a 2D image embedding network for single-view 3D shape generation. Choy et al. [2] introduce a 3D recurrent neural network (3D-R2N2) based on long-short term memory (LSTM) to predict the 3D shape of an object from a single view or multiple views. Compared to these single-view methods, our 3D reconstruction network is learned end-to-end and the network can be even trained without ground truth volumes.\nConcurrent to our work, Renzede et al. [16] introduced a general framework to learn 3D structures from 2D observations with 3D-2D projection mechanism. Their 3D-2D projection mechanism either has learnable parameters or adopts non-differentiable component using MCMC, while our perspective projection network is both differentiable and parameter-free.\nRepresentation learning by transformations. Learning from transformed sensory data has gained attention [12, 5, 15, 13, 23, 6, 24] in recent years. Memisevic and Hinton [12] introduced a gated Boltzmann machine that models the transformations between image pairs using multiplicative interaction. Reed et al. [15] showed that a disentangled hidden unit representations of Boltzmann Machines (disBM) could be learned based on the transformations on data manifold. Yang et al. [23] learned out-of-plane rotation of rendered images to obtain disentangled identity and viewpoint units by curriculum learning. Kulkarni et al. [9] proposed to learn a semantically interpretable latent representation from 3D rendered images using variational auto-encoders [8] by including specific transformations in mini-batches. Complimentary to convolutional networks, Jaderberg et al. [6] introduced a differentiable sampling layer that directly incorporates geometric transformations into representation learning. Concurrent to our work, Wu et al. [21] proposed a 3D-2D projection layer that enables the learning of 3D object structures using 2D keypoints as annotation."}, {"heading": "3 Problem Formulation", "text": "In this section, we develop neural networks for reconstructing 3D objects. From the perspective of a learning agent (e.g., neural network), a natural way to understand one 3D object X is from its 2D views by transformations. By moving around the 3D object, the agent should be able to recognize its unique features and eventually build a 3D mental model of it as illustrated in Figure 1(a). Assume that I(k) is the 2D image from the k-th viewpoint \u03b1(k) by projection I(k) = P (X;\u03b1(k)), or rendering in graphics. An object X in a certain scene is the entanglement of shape, color and texture (its intrinsic properties) and the image I(k) is the further entanglement with viewpoint and illumination (extrinsic parameters). The general goal of understanding 3D objects can be viewed as disentangling intrinsic properties and extrinsic parameters from a single image.\nIn this paper, we focus on the 3D shape learning by ignoring the color and texture factors, and we further simplify the problem by making the following assumptions: 1) the scene is clean white background; 2) the illumination is constant natural lighting. We use the volumetric representation of 3d shape V where each voxel Vi is a binary unit. In other words, the voxel equals to one, i.e., Vi = 1, if the i-th voxel sapce is occupied by the shape; otherwise Vi = 0. Assuming the 2D silhouette S(k) is obtained from the k-th image I(k), we can specify the 3D-2D projection S(k) = P (V;\u03b1(k)). Note that 2D silhouette estimation is typically solved by object segmentation in real-world but it becomes trivial in our case due to the white background.\nIn the following sub-sections, we propose a formulation for learning to predict the volumetric 3D shape V from an image I(k) with and without the 3D volume supervision."}, {"heading": "3.1 Learning to Reconstruct Volumetric 3D Shape from Single-View", "text": "We consider single-view volumetric 3D reconstruction as a dense prediction problem and develop a convolutional encoder-decoder network for this learning task denoted by V\u0302 = f(I(k)). The encoder network h(\u00b7) learns a viewpoint-invariant latent representation h(I(k)) which is then used by the decoder g(\u00b7) to generate the volume V\u0302 = g(h(I(k))). In case the ground truth volumetric shapes V are available, the problem can be easily considered as learning volumetric 3D shapes with a regular reconstruction objective in 3D space: Lvol(I(k)) = ||f(I(k))\u2212V||22. In practice, however, the ground truth volumetric 3D shapes may not be available for training. For example, the agent observes the 2D silhouette via its built-in camera without accessing the volumetric 3D shape. Inspired by the space carving theory [10], we propose a silhouette-based volumetric loss function. In particular, we build on the premise that a 2D silhouette S\u0302(j) projected from the generated volume V\u0302 under certain camera viewpoint \u03b1(j) should match the ground truth 2D silhouette S(j)\nfrom image observations. In other words, if all the generated silhouettes S\u0302(j) match well with their corresponding ground truth silhouettes S(j) for all j\u2019s, then we hypothesize that the generated volume V\u0302 should be as good as one instance of visual hull equivalent class of the ground truth volume V [10]. Therefore, we formulate the learning objective for the k-th image as\nLproj(I(k)) = n\u2211\nj=1\nL(j)proj(I (k);S(j), \u03b1(j)) =\n1\nn n\u2211 j=1 ||P (f(I(k));\u03b1(j))\u2212 S(j)||22, (1)\nwhere j is the index of output 2D silhouettes, n is the number of silhouettes used for each input image and P (\u00b7) is the 3D-2D projection function. Note that the above training objective Eq. (1) enables training without using ground-truth volumes. The network diagram is illustrated in Figure 1(b). A more general learning objective is given by a combination of both objectives:\nLcomb(I(k)) = \u03bbprojLproj(I(k)) + \u03bbvolLvol(I(k)), (2) where \u03bbproj and \u03bbvol are constants that control the tradeoff between the two losses."}, {"heading": "3.2 Perspective Transformer Networks", "text": "As defined previously, 2D silhouette S(k) is obtained via perspective projection given input 3D volume V and specific camera viewpoint \u03b1(k). In this work, we implement the perspective projection\n(see Figure 1(c)) with a 4-by-4 transformation matrix \u03984\u00d74, where K is camera calibration matrix and (R, t) is extrinsic parameters.\n\u03984\u00d74 = [ K 0 0T 1 ] [ R t 0T 1 ] (3)\nFor each point psi = (x s i , y s i , z s i , 1) in 3D world coordinates, we compute the corresponding point pti = (x t i, y t i , 1, d t i) in screen coordinates (plus disparity d t i) using the perspective transformation: psi \u223c \u03984\u00d74pti. Similar to the spatial transformer network introduced in [6], we propose a 2-step procedure: (1) performing dense sampling from input volume (in 3D world coordinates) to output volume (in screen coordinates), and (2) flattening the 3D spatial output across disparity dimension. In the experiment, we assume that transformation matrix is always given as input, parametrized by the viewpoint \u03b1. Again, the 3D point (xsi , y s i , z s i ) in input volume V \u2208 RH\u00d7W\u00d7D and corresponding point (xti, yti , dti) in output volume U \u2208 RH\u2032\u00d7W \u2032\u00d7D\u2032 is linked by perspective transformation matrix \u03984\u00d74. Here, (W,H,D) and (W \u2032, H \u2032, D\u2032) are the width, height and depth of input and output volume, respectively.\nWe summarize the dense sampling step and channel-wise flattening step as follows.\nUi = H\u2211 n W\u2211 m D\u2211 l Vnml max(0, 1\u2212 |xsi \u2212m|) max(0, 1\u2212 |ysi \u2212 n|) max(0, 1\u2212 |zsi \u2212 l|)\nSn\u2032m\u2032 = max l\u2032 Un\u2032m\u2032l\u2032\n(4)\nHere, Ui is the i-th voxel value corresponding to the point (xti, y t i , d t i) (where i \u2208 {1, ...,W \u2032 \u00d7H \u2032 \u00d7 D\u2032}). Note that we use the max operator for projection instead of summation along one dimension since the volume is represented as a binary cube where the solid voxels have value 1 and empty voxels have value 0. Intuitively, we have the following two observations: (1) each empty voxel will not contribute to the foreground pixel of S from any viewpoint; (2) each solid voxel can contribute to the foreground pixel of S only if it is visible from a specific viewpoint."}, {"heading": "3.3 Training", "text": "As the same volumetric 3D shape is expected to be generated from different images of the object, the encoder network is required to learn a 3D view-invariant latent representation\nh(I(1)) = h(I(2)) = \u00b7 \u00b7 \u00b7 = h(I(k)) (5)\nThis sub-problem itself is a challenging task in computer vision [23, 9]. Thus, we adopt a two-stage training procedure: first, we learn the encoder network for a 3D view-invariant latent representation h(I) and then train the volumetric decoder with perspective transformer networks. As shown in [23], a disentangled representation of 2D synthetic images can be learned from consecutive rotations with a recurrent network, we pre-train the encoder of our network using a similar curriculum strategy so that the latent representation only contains 3D view-invariant identity information of the object. Once we obtain an encoder network that recognizes the identity of single-view images, we next learn the volume generator regularized by the perspective transformer networks. To encourage the volume decoder to learn a consistent 3D volume from different viewpoints, we include the projections from neighboring viewpoints in each mini-batch so that the network has relatively sufficient information to reconstruct the 3D shape."}, {"heading": "4 Experiments", "text": "ShapeNetCore. This dataset contains about 51,300 unique 3D models from 55 common object categories [1]. Each 3D model is rendered from 24 azimuth angles (with steps of 15\u25e6) with fixed elevation angles (30\u25e6) under the same camera and lighting setup. We then crop and rescale the centering region of each image to 64\u00d7 64\u00d7 3 pixels. For each ground truth 3D shape, we create a volume of 32\u00d7 32\u00d7 32 voxels from its canonical orientation (0\u25e6). Network Architecture. As shown in Figure 2, our encoder-decoder network has three components: a 2D convolutional encoder, a 3D up-convolutional decoder and a perspective transformer networks. The 2D convolutional encoder consists of 3 convolution layers, followed by 3 fully-connected layers (convolution layers have 64, 128 and 256 channels with fixed filter size of 5 \u00d7 5; the three fullyconnected layers have 1024, 1024 and 512 neurons, respectively). The 3D convolutional decoder\nconsists of one fully-connected layer, followed by 3 convolution layers (the fully-connected layer have 3 \u00d7 3 \u00d7 3 \u00d7 512 neurons; convolution layers have 256, 96 and 1 channels with filter size of 4 \u00d7 4 \u00d7 4, 5 \u00d7 5 \u00d7 5 and 6 \u00d7 6 \u00d7 6). For perspective transformer networks, we used perspective transformation to project 3D volume to 2D silhouette where the transformation matrix is parametrized by 16 variables and sampling grid is set to 32\u00d7 32\u00d7 32. We use the same network architecture for all the experiments.\nImplementation Details. We used the ADAM [7] solver for stochastic optimization in all the experiments. During the pre-training stage (for encoder), we used mini-batch of size 32, 32, 8, 4, 3 and 2 for training the RNN-1, RNN-2, RNN-4, RNN-8, RNN-12 and RNN-16 as used in Yang et al. [23]. We used the learning rate 10\u22124 for RNN-1, and 10\u22125 for the rest of recurrent neural networks. During the fine-tuning stage (for volume decoder), we used mini-batch of size 6 and learning rate 10\u22124. For each object in a mini-batch, we include projections from all 24 views as supervision. The models including the perspective transformer nets are implemented using Torch [3]. To download the code, please refer to the project webpage: http://goo.gl/YEJ2H6.\nExperimental Design. As mentioned in the formulation, there are several variants of the model depending on the hyper-parameters of learning objectives \u03bbproj and \u03bbvol. In the experimental section, we denote the model trained with projection loss only, volume loss only, and combined loss as PTN-Proj (PR), CNN-Vol (VO), and PTN-Comb (CO), respectively.\nIn the experiments, we address the following questions: (1) Will the model trained with combined loss achieve better single-view 3D reconstruction performance over model trained on volume loss only (PTN-Comb vs. CNN-Vol)? (2) What is the performance gap between the models with and without ground-truth volumes (PTN-Comb vs. PTN-Proj)? (3) How do the three models generalize to instances from unseen categories which are not present in the training set? To answer the questions, we trained the three models under two experimental settings: single category and multiple categories."}, {"heading": "4.1 Training on a single category", "text": "We select chair category as the training set for single category experiment. For model comparisons, we first conduct quantitative evaluations on the generated 3D volumes from the test set single-view images. For each instance in the test set, we generate one volume per view image (24 volumes generated in total). Given a pair of ground-truth volume and our generated volume (threshold is 0.5), we computed its intersection-over-union (IU) score and the average IU score is calculated over 24 volumes of all the instances in the test set. In addition, we provide a baseline method based on nearest neighbor (NN) search. Specifically, for each of the test image, we extract VGG feature from fc6 layer (4096-dim vector) [17] and retrieve the nearest training example using Euclidean distance in the feature space. The ground-truth 3D volume corresponds to the nearest training example is naturally regarded as the retrieval result.\nAs shown in Table 1, the model trained without volume supervision (projection loss) performs as good as model trained with volume supervision (volume loss) on the chair category (testing set). In addition to the comparisons of overall IU, we measured the view-dependent IU for each model. As shown in Figure 4, the average prediction error (mean IU) changes as we gradually move from the first view to the last view (15\u25e6 to 360\u25e6). For visual comparisons, we provide a side-by-side analysis for each of the three models we trained. As shown in Figure 3, each row shows an independent comparison. The first column is the 2D image we used as input of the model. The second and third column show the ground-truth 3D volume (same volume rendered from two views for better visualization purpose). Similarly, we list the model trained with projection loss only (PTN-Proj), combined loss (PTN-Comb) and volume loss only (CNN-Vol) from the fourth column up to the ninth column. The volumes predicted by PTN-Proj and PTN-Comb faithfully represent the shape. However, the volumes predicted by CNN-Vol do not form a solid chair shape in some cases.\nTraining with partial views. We also conduct control experiments where each object is only observable from a narrow range of azimuth angles (e.g., 8 out of 24 views such as 0\u25e6, 15\u25e6, \u00b7 \u00b7 \u00b7 , 105\u25e6). We include the detailed description in the supplementary materials. As shown in Table 1 (last two columns), performances of all three models drop a little bit but the conclusion is similar: the proposed network (1) learns better 3D shape with projection regularization and (2) is capable of learning the 3D shape by providing 2D observations only."}, {"heading": "4.2 Training on multiple categories", "text": "We conducted multiclass experiment using the same setup in the single-class experiment. For multicategory experiment, the training set includes 13 major categories: airplane, bench, dresser, car, chair, display, lamp, loudspeaker, rifle, sofa, table, telephone and vessel. We preserved 20% of instances from each category as testing data. As shown in Table 2, the quantitative results demonstrate (1) model trained with combined loss is superior to volume loss in most cases and (2) model trained with projection loss perform as good as volume/combined loss. From the\nvisualization results shown in Figure 5, all three models predict volumes reasonably well. There is only subtle performance difference in object part such as the wing of airplane."}, {"heading": "4.3 Out-of-Category Tests", "text": "Ideally, an intelligent agent should have the ability to generalize the knowledge learned from previously seen categories to unseen categories. To this end, we design out-of-category tests for both models trained on a single category and multiple categories, as described in Section 4.1 and Section 4.2, respectively. We select 5 unseen categories from ShapeNetCore: bed, bookshelf, cabinet, motorbike and train for out-of-category tests. Here, the two categories cabinet and train are relatively easier than other categories since there might be instances in the training set with similar shapes (e.g., dresser, vessel, and airplane). But the bed,bookshelf and motorbike can be considered as completely novel categories in terms of shape.\nWe summarized the quantitative results in Table 3. Surprisingly, the model trained on multiple categories still achieves reasonably good overall IU. As shown in Figure 6, the proposed projection loss generalizes better than model trained using combined loss or volume loss on train, motorbike and cabinet. The observations from the out-of-category tests suggest that (1) generalization from a single category is very challenging, but training from multiple categories can significantly improve generalization, and (2) the projection regularization can help learning a robust representation for better generalization on unseen categories."}, {"heading": "5 Conclusions", "text": "In this paper, we investigate the problem of single-view 3D shape reconstruction from a learning agent\u2019s perspective. By formulating the learning procedure as the interaction between 3D shape and 2D observation, we propose to learn an encoder-decoder network which takes advantage of\nthe projection transformation as regularization. Experimental results demonstrate (1) excellent performance of the proposed model in reconstructing the object even without ground-truth 3D volume as supervision and (2) the generalization potential of the proposed model to unseen categories."}, {"heading": "Acknowledgments", "text": "This work was supported in part by NSF CAREER IIS-1453651, ONR N00014-13-1-0762, Sloan Research Fellowship, and a gift from Adobe. We acknowledge NVIDIA for the donation of GPUs. We also thank Yuting Zhang, Scott Reed, Junhyuk Oh, Ruben Villegas, Seunghoon Hong, Wenling Shang, Kibok Lee, Lajanugen Logeswaran, Rui Zhang and Yi Zhang for helpful comments and discussions."}, {"heading": "A Details regarding perspective transformer network", "text": "As defined in the main text, 2D silhouette S(k) is obtained via perspective transformation given input 3D volume V and specific camera viewpoint \u03b1(k).\nPerspective Projection. In this work, we implement the perspective projection (see Figure 7) with a 4-by-4 transformation matrix \u03984\u00d74, where K is camera calibration matrix and (R, t) is extrinsic parameters.\n\u03984\u00d74 = [ K 0 0T 1 ] [ R t 0T 1 ] (6)\nFor each point psi = (x s i , y s i , z s i , 1) in 3D world coordinates, we compute the corresponding point pti = (x t i, y t i , 1, d t i) in screen coordinates (plus disparity d t i) using the perspective transformation: psi \u223c \u03984\u00d74pti.\nSimilar to the spatial transformer network introduced in [6], we propose a 2-step procedure: (1) performing dense sampling from input volume (in 3D world coordinates) to output volume (in screen coordinates), and (2) flattening the 3D spatial output across disparity dimension. In the experiment, we assume that transformation matrix is always given as input, parametrized by the viewpoint \u03b1. Again, the 3D point (xsi , y s i , z s i ) in input volume V \u2208 RH\u00d7W\u00d7D and corresponding point (xti, yti , dti) in output volume U \u2208 RH\u2032\u00d7W \u2032\u00d7D\u2032 is linked by perspective transformation matrix \u03984\u00d74. Here, (W,H,D) and (W \u2032, H \u2032, D\u2032) are the width, height and depth of input and output volume, respectively.\nx s i ysi zsi 1  = \u03b811 \u03b812 \u03b813 \u03b814\u03b821 \u03b822 \u03b823 \u03b824\u03b831 \u03b832 \u03b833 \u03b834 \u03b841 \u03b842 \u03b843 \u03b844  x\u0303i t y\u0303i t z\u0303i t 1  (7) In addition, we compute the normalized coordinates by xti = x\u0303i t z\u0303it , yti = y\u0303i t z\u0303it and dti = 1 z\u0303it\n, where di is the disparity.\nDifferentiable Volume Sampling. To perform transformation from input volume to output volume, we adopt the similar sampling strategy as proposed in [6]. That is, each point (xsi , y s i , z s i ) defines a spatial location where a sampling kernel k(\u00b7) is applied to get the value at a particular voxel in the output volume U .\nUi = H\u2211 n W\u2211 m D\u2211 l Vnmlk(x s i \u2212m; \u03a6x)k(ysi \u2212 n; \u03a6y)k(zsi \u2212 l; \u03a6z) \u2200i \u2208 {1, ...,H \u2032W \u2032D\u2032} (8)\nHere, \u03a6x, \u03a6y and \u03a6z are parameters of a generic sampling kernel k(\u00b7) which defines the interpolation method. We implement bilinear sampling kernel k(x) = max(0, 1\u2212 |x|) in this work. Finally, we summarize the dense sampling step and channel-wise flattening step as follows.\nUi = H\u2211 n W\u2211 m D\u2211 l Vnml max(0, 1\u2212 |xsi \u2212m|) max(0, 1\u2212 |ysi \u2212 n|) max(0, 1\u2212 |zsi \u2212 l|)\nSn\u2032m\u2032 = max l\u2032 Un\u2032m\u2032l\u2032\n(9)\nNote that we use the max operator for projection instead of summation along one dimension since the volume is represented as a binary cube where the solid voxels have value 1 and empty voxels have value 0. Intuitively, we have the following two observations: (1) each empty voxel will not contribute to the foreground pixel of S from any viewpoint; (2) each solid voxel can contribute to the foreground pixel of S only if it is visible from specific viewpoint."}, {"heading": "B Details regarding learning from partial views", "text": "In our experiments, we have access to 2D projections from the entire 24 azimuth angles for each object in the training set. A natural but more challenging setting is to learn 3D reconstruction given only partial views for each object. To evaluate the performance gap of using partial views during training, we train the model in two different ways: 1) using a narrow range of azimuths and 2) using sparse azimuths. For the first one, we constrain the azimuth range of 105\u25e6 (8 out of 24 views). For the second one, we provide 8 views which form full 360\u25e6 rotation but with a larger stepsize of 45\u25e6.\nFor both tasks, we conduct the training based on the new constraints. More specifically, we pre-train the encoder using the method proposed by Yang et al. [23] with similar curriculum learning strategy: RNN-1, RNN-2, RNN-4 and finally RNN-7 (since only 8 views are available during training). For fine-tuning step, we limit the number of input views based on the constraint. For evaluation in the test set, we use all the views so that the numbers are comparable with original setting. As shown in Table 4, performances of all three models drop a little bit. Overall, the proposed network (1) learns better 3D shape with projection regularization and (2) is capable of learning the 3D shape by providing 2D observations only. Note that the partial view experiments are conducted on single category only, but we believe the results will be consistent in multiple categories."}, {"heading": "C Additional visualization results on 3D volumetric shape reconstruction", "text": "As shown in Figure 8, Figure 9, Figure 10 and Figure 11, we provide additional side-by-side analysis for each of the three models we trained. In each figure, each row is an independent comparison. The first column is the 2D image we used as input of the model. The second and third column show the ground-truth 3D volume (same volume rendered from two views for better visualization purpose). Similarly, we list the model trained with projection loss only (PTN-Proj), combined loss (PTN-Comb) and volume loss only (CNN-Vol) from the fourth column up to the ninth column."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "<lb>Understanding the 3D world is a fundamental problem in computer vision. How-<lb>ever, learning a good representation of 3D objects is still an open problem due<lb>to the high dimensionality of the data and many factors of variation involved. In<lb>this work, we investigate the task of single-view 3D object reconstruction from a<lb>learning agent\u2019s perspective. We formulate the learning process as an interaction<lb>between 3D and 2D representations and propose an encoder-decoder network with<lb>a novel projection loss defined by the perspective transformation. More importantly,<lb>the projection loss enables the unsupervised learning using 2D observation without<lb>explicit 3D supervision. We demonstrate the ability of the model in generating 3D<lb>volume from a single 2D image with three sets of experiments: (1) learning from<lb>single-class objects; (2) learning from multi-class objects and (3) testing on novel<lb>object classes. Results show superior performance and better generalization ability<lb>for 3D object reconstruction when the projection loss is involved.", "creator": "LaTeX with hyperref package"}}}