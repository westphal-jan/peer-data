{"id": "1612.01627", "review": {"conference": "ACL", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Dec-2016", "title": "Sequential Matching Network: A New Architecture for Multi-turn Response Selection in Retrieval-Based Chatbots", "abstract": "we study response selection for multi - turn conversation in retrieval based chatbots. existing works either ignores relationships among utterances, recognizes or misses important information in context when matching a response with a highly abstract context vector finally. we propose programming a new session based matching matrix model to address both problems. the model first perfectly matches executing a response with setting each utterance on multiple granularities, and distills important matching information from each pair as a vector with convolution and pooling operations. the vectors are then accumulated in a chronological order through a recurrent neural network ( rnn ) which thus models the relationships among the utterances. the final matching score data is calculated with the hidden transition states of the rnn. empirical study on two public data sets shows that our model can significantly outperform the state - of - the - art methods chosen for response selection in multi - turn conversation.", "histories": [["v1", "Tue, 6 Dec 2016 01:57:39 GMT  (608kb,D)", "http://arxiv.org/abs/1612.01627v1", null], ["v2", "Mon, 15 May 2017 01:50:55 GMT  (600kb,D)", "http://arxiv.org/abs/1612.01627v2", "ACL 2017"]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["yu wu", "wei wu", "chen xing", "ming zhou", "zhoujun li"], "accepted": true, "id": "1612.01627"}, "pdf": {"name": "1612.01627.pdf", "metadata": {"source": "CRF", "title": "Sequential Match Network: A New Architecture for Multi-turn Response Selection in Retrieval-based Chatbots", "authors": ["Yu Wu", "Wei Wu", "Zhoujun Li", "Ming Zhou"], "emails": ["wuyu@buaa.edu.cn", "lizj@buaa.edu.cn", "wuwei@microsoft.com", "mingzhou@microsoft.com"], "sections": [{"heading": "1 Introduction", "text": "Traditional research in human-computer conversation focused on building task-oriented dialog systems in vertical domains to help people complete specific tasks such as ordering and tutoring etc (Boden, 2006; Wallace, 2009; Young et al., 2010). Recently, with the large amount of conversation data available on Internet, there has been a surge of interest in building non-task-oriented chatbots that can naturally and meaningfully converse with humans on open domain topics (Jafarpour et al., 2010; Ritter et al., 2011). Existing work on building chatbots includes generation based methods\n\u2217The work was done when the first author was an intern in Microsoft Research Asia.\nand retrieval based methods. In this work, we study retrieval based chatbots, because they select responses from an index of existing conversation and thus can leverage the existing search power and always return fluent responses. While most existing work on retrieval based chatbots studies response selection for single-turn conversation (Wang et al., 2013; Wang et al., 2015), we consider the problem in a multi-turn scenario which is the nature of conversation but has not been well explored yet.\nDifferent from response selection in single-turn conversation in which one only needs to match a response with a single input message, response selection in multi-turn conversation requires matching between a response and a conversation session in which one needs to consider not only the matching between the response and the input message but also the matching between the response and the utterances in previous turns as context. The challenges of the task include (1) how to identify important information (words, phrases, and sentences) in context that is crucial to selecting a proper response for the session and how to leverage the information in matching; and (2) how to model relationships among the utterances. Table 1 illustrates the challenges with an example. First, \u201chold a drum class\u201d and \u201cdrum\u201d in the context are very important. Without them, one may find responses relevant to the message but nonsense in the session (e.g., \u201cwhat lessons do you ar X iv :1 61 2.\n01 62\n7v 1\n[ cs\n.C L\n] 6\nD ec\n2 01\n6\nwant?\u201d). On the other hand, although \u201cShanghai\u201d, \u201cthe Bund\u201d, and \u201ccoaches\u201d are also keywords in their utterances, they are useless and even noise to response selection. It is crucial yet non-trivial to extract the important information from the context and leverage them in matching while circumvent the noise. Second, the message highly depends on Context 1, and the order of the utterances matters in response selection: exchanging Context 2 and the message may lead to different responses. Existing work, however, either ignores relationships among utterances (Lowe et al., 2015; Yan et al., 2016), or loses important information in context in the process of converting the whole session to a vector without enough supervision from responses (Lowe et al., 2015; Zhou et al., 2016).\nWe propose a new session based matching model which can tackle both challenges in an endto-end way. One major problem suffered by the existing models is that responses in matching cannot meet the session until the final step, which results in information loss. To overcome this drawback, our model matches a response with each utterance in the session (message and context) at the very beginning. For each utterance-response pair, the model constructs a word-word similarity matrix and a sequence-sequence similarity matrix by the embedding of words and the hidden states of a recurrent neural network with gated unites (GRU) (Chung et al., 2014) respectively. The two matrices capture important matching information in the pair on a word level and a segment level respectively, and the information is distilled and fused as a matching vector through an alternation of convolution and pooling operations on the matrices. By this means, important information in context is recognized under sufficient supervision from the response and carried into matching with minimal loss. The matching vectors are then uploaded to a GRU to form a matching score for the session and the response. The GRU accumulates the pair matching in its hidden states in the chronological order of the utterances in the session. It models the relationships and the dependencies among the utterances in a matching fashion and has the utterance order supervise the accumulation of pair matching. The gate mechanism of the GRU helps select important pairs and filter out noise. The matching degree of the session and the response is computed by a logit model with the hidden states of the GRU. Our model extends the pow-\nerful \u201c2D\u201d matching paradigm in text pair matching for single-turn conversation to session based matching for multi-turn conversation, and enjoys the advantage that both important information in utterance-response pairs and relationships among utterances are sufficiently preserved and leveraged in matching.\nWe test our model on the Ubuntu dialogue corpus (Lowe et al., 2015) which is a large public English data set for research in multi-turn conversation. The results show that our model can significantly outperform the state-of-the-art methods, and improvement to the best baseline model on R10@1 is over 6%. One problem with the Ubuntu data is that negative examples are randomly sampled which might oversimplify the multi-turn problem in a real retrieval based chatbot. To further verify the efficacy of the proposed model in a real situation, we simulate the procedure of a retrieval based chatbot and create a large scale Chinese test set. Instead of negative sampling, labels in the data are generated by 3 human judges. On this data, our model improves the best baseline model over 4% on P@1 (equivalent to R10@1). We published the data at https://github.com/MarkWuNLP/ MultiTurnResponseSelection.\nOur contributions in this paper are three-folds: (1) proposal of a new session based matching model for multi-turn response selection in retrieval based chatbots; (2) empirical verification of the effectiveness of the model on public data sets; (3) publication of a large human labeled data set to research communities."}, {"heading": "2 Related Work", "text": "Early work (Weizenbaum, 1966) on chatbots exploits hand crafted templates to generate responses, which requires huge human effort and is not scalable. Recently, data driven approaches (Ritter et al., 2011; Higashinaka et al., 2014) have drawn a lot of attention. Existing work along this line includes retrieval based methods and generation based methods. The former selects a proper response from an index based on matching between the response and an input message with or without context (Hu et al., 2014; Ji et al., 2014; Wang et al., 2015; Yan et al., 2016; Wu et al., 2016; Zhou et al., 2016), while the latter employs statistical machine translation techniques (Ritter et al., 2011) or the sequence to sequence framework\n(Shang et al., 2015; Serban et al., 2015; Vinyals and Le, 2015; Li et al., 2015; Li et al., 2016; Xing et al., 2016; Serban et al., 2016) to generate responses. Our work belongs to retrieval based methods, and we study response selection with context information.\nEarly studies of retrieval based chatbots focus on response selection for single-turn conversation (Wang et al., 2013; Ji et al., 2014; Wang et al., 2015; Wu et al., 2016). Recently, researchers begin to pay attention to multi-turn conversation. For example, Lowe et al. (Lowe et al., 2015) match a response with the literal concatenation of context utterances. Yan et al. (Yan et al., 2016) concatenate context utterances with the input message as reformulated queries and perform matching with a deep neural network architecture. Zhou et al. (Zhou et al., 2016) improve multi-turn response selection with a multi-view model including an utterance view and a word view. The stark difference between our model and the existing models is that our model matches a response with each utterance at the very first and matching information instead of sentences is accumulated in a temporal manner through a GRU."}, {"heading": "3 Matching Approach", "text": ""}, {"heading": "3.1 Problem Formalization", "text": "Suppose that we have a data set D = {(yi, si, ri)}Ni=1, where si = {ui,1, . . . , ui,ni} represents a conversation session with {ui1, . . . , ui,ni\u22121} utterances in context and ui,ni an input message. ri is a response candidate and yi \u2208 {0, 1} denotes a label. yi = 1 means ri is a proper response for si, otherwise yi = 0. Our goal is to learn a matching model g(\u00b7, \u00b7) with D. For any session-response pair (s, r), g(s, r) measures the matching degree between s and r."}, {"heading": "3.2 Model Overview", "text": "Figure 1 gives the architecture of our model. The model first decomposes session-response matching into several utterance-response pair matching and then all pair matching are accumulated as a session based matching through a recurrent neural network. Specifically, the model consists of two layers. The first layer matches a response candidate with each utterance (context and message) in the session on a word level and a segment level. An utterance-response pair is transformed to a word-word similarity matrix and a sequence-\nsequence similarity matrix, and important matching information in the pair is distilled from the two matrices and encoded in a matching vector. The matching vectors are then fed to the second layer where they are accumulated in the hidden states of a recurrent neural network with gated unites (GRU) following the chronological order of the utterances in the session. The matching degree of the session and the response is calculated with the hidden states of the GRU.\nOur model enjoys several advantages over the existing models. First, a response candidate can meet each utterance in the session at the very beginning of the whole matching procedure, thus matching information in every utterance-response pair can be sufficiently extracted and carried to the final matching score with minimal loss. Second, information extraction from each utterance is conducted on different granularities and under sufficient supervision from the response, thus semantic structures that are useful to response selection in each utterance can be well identified and extracted. Third, matching and utterance relationships are coupled rather than separately modeled, thus utterance relationships (e.g., order), as a kind of knowledge, can supervise the formation of the matching score.\nBy taking utterance relationships into consideration, our model extends the \u201c2D\u201d matching which has proven effective in text pair matching for single-turn response selection to sequential \u201c2D\u201d matching for session based matching in response selection for multi-turn conversation. We name our model \u201cSequential Match Network\u201d (SMN). In the following sections, we will describe details of the two layers."}, {"heading": "3.3 Utterance-Response Matching", "text": "At the first layer, given an utterance u in a session s and a response candidate r, the model looks up an embedding table and represents u and r as U = [eu,1, . . . , eu,nu ] and R = [er,1, . . . , er,nr ] respectively, where eu,i, er,i \u2208 Rd are the embeddings of the i-th word of u and r respectively. U \u2208 Rd\u00d7nu and R \u2208 Rd\u00d7nr are then used to construct a word-word similarity matrix M1 \u2208 Rnu\u00d7nr and a sequence-sequence similarity matrix M2 \u2208 Rnu\u00d7nr which are two input channels of a convolutional neural network (CNN). The CNN distills important matching information from the matrices and encodes the information into a\nmatching vector v. Specifically, \u2200i, j, the (i, j)-th element of M1 is defined by\ne1,i,j = e > u,i \u00b7 er,j . (1)\nM1 models the matching between u and r on a word level.\nTo construct M2, we first employ a recurrent neural network with gated units (GRU) (Chung et al., 2014) to transform U and R to hidden vectors. Suppose that Hu = [hu,1, . . . , hu,nu ] is the hidden vectors of U, then \u2200i, hu,i \u2208 Rm is defined by\nzi = \u03c3(Wzeu,i + Uzhu,i\u22121)\nri = \u03c3(Wreu,i + Urhu,i\u22121)\nh\u0303u,i = tanh(Wheu,i + Uh(ri hu,i\u22121)) hu,i = zi h\u0303u,i + (1\u2212 zi) hu,i\u22121, (2)\nwhere hu,0 = 0, zi and ri are an update gate and a reset gate respectively, \u03c3(\u00b7) is a sigmoid function, and Wz, Wh, Wr, Uz, Ur,Uh are parameters. Similarly, we have Hr = [hr,1, . . . , hr,nr ] as the hidden vectors of R. Then, \u2200i, j, the (i, j)-th element of M2 is defined by\ne2,i,j = h > u,iW1hr,j , (3)\nwhere W1 \u2208 Rm\u00d7m is a linear transformation. \u2200i, GRU models the sequential relationship and the dependency among words up to position i and encodes the text segment until the i-th word to a hidden vector. Therefore, M2 models the matching between u and r on a segment level. M1 and M2 are then processed by a CNN to form v. \u2200i = 1, 2, CNN regards Mi as\nan input channel, and alternates convolution and max-pooling operations. Suppose that z(l,f) =[ z (l,f) i,j ] I(l,f)\u00d7J(l,f) denotes the output of feature maps of type-f on layer-l, where z(0,f) = Mf , \u2200f = 1, 2. On the convolution layer, we employ a 2D convolution operation with a window size r (l,f) w \u00d7 r(l,f)h , and define z (l,f) i,j as\nz (l,f) i,j = \u03c3( Fl\u22121\u2211 f \u2032=0 r (l,f) w\u2211 s=0 r (l,f) h\u2211 t=0 W (l,f) s,t \u00b7 z (l\u22121,f \u2032) i+s,j+t + b l,k), (4)\nwhere \u03c3(\u00b7) is a ReLU, W(l,f) \u2208 Rr (l,f) w \u00d7r (l,f) h and bl,k are parameters, and Fl\u22121 is the number of feature maps on the (l\u2212 1)-th layer. An max pooling operation follows a convolution operation and can be formulated as\nz (l,f) i,j = max\np (l,f) w >s\u22650 max p (l,f) h >t\u22650 zi+s,j+t, (5)\nwhere p(l,f)w and p (l,f) h are the width and the height of the 2D pooling respectively. The output of the final feature maps are concatenated and mapped to a low dimensional space with a linear transformation as the matching vector v \u2208 Rq.\nFrom Equation (1), (3), (4), and (5), we can see that by learning word embedding and parameters of GRU from training data, words or segments in an utterance that are useful to recognize the appropriateness of a response may have high similarity with some words or segments in the response and result in high value areas in the similarity matrices. These areas will be transformed and selected by convolution and pooling operations and carry\nthe important information in the utterance to the matching vector. This is how our model identifies important information in context and leverage it in matching under the supervision of the response. We consider multiple channels because we want to capture important matching information on multiple granularities of text."}, {"heading": "3.4 Matching Accumulation", "text": "Suppose that [v1, . . . , vn] is the output of the first layer (corresponding to n pairs), at the second layer, a GRU takes [v1, . . . , vn] as an input and encodes the matching sequence into its hidden states Hm = [h1, . . . , hn] \u2208 Rq\u00d7n with a detailed parameterization similar to Equation (2). This layer has two functions: (1) it models the dependency and the temporal relationship of utterances in the session; (2) it leverages the temporal relationship to supervise the accumulation of the pair matching as a session based matching. Moreover, from Equation (2), we can see that the reset gate (i.e., ri) and the update gate (i.e., zi) control how much information from the previous hidden state and the current input flows to the current hidden state, thus important matching vectors (corresponding to important utterances) can be accumulated while noise in the vectors can be filtered out.\nWith Hm, we define g(s, r) as\ng(s, r) = softmax(W2L[h1, . . . , hn] + b2), (6) where W2 and b2 are parameters. We consider three parameterizations for L[h1, . . . , hn]: (1) only the last hidden state is used. Then L[h1, . . . , hn] = hn. (2) the hidden states are linearly combined. Then, L[h1, . . . , hn] =\u2211n\ni=1wihi, where wi \u2208 R. (3) we follow (Yang et al., 2016) and employ an attention mechanism to combine the hidden states. Then, L[h1, . . . , hn] is defined as\nti = tanh(W3hi + b3), \u03b1i = exp(t>i ts)\u2211 i(exp(t > i ts)) ,\nL[h1, . . . , hn] = n\u2211\ni=1\n\u03b1ihi,\nwhere W3 \u2208 Rq\u00d7q and b3 \u2208 Rq are parameters. ts \u2208 Rq is a high level virtual context vector which is randomly initialized and jointly learned in training.\nBoth (2) and (3) aim to learn weights for {h1, . . . , hn} from training data and dynamically highlight the effect of important matching vectors in the final matching score. The difference is that weights in (2) are nonparametric and unnormalized, while in (3) they are parametric and normalized. We denote our model with the three parameterizations of L[h1, . . . , hn] as SMNlast, SMNnon\u2212para, and SMNpara respectively, and empirically compare them in experiments.\nWe learn g(\u00b7, \u00b7) by minimizing cross entropy withD. Let \u0398 denote the parameters of our model, then the objective function L(D,\u0398) of learning can be formulated as\n\u2212 N\u2211 i=1 [yilog(g(si, ri)) + (1\u2212 yi)log(1\u2212 g(si, ri))] , (7)\nwhere N in the number of instances in D."}, {"heading": "4 Response Candidate Retrieval", "text": "In practice of a retrieval based chatbot, to apply the matching approach to response selection, one needs to retrieve a bunch of response candidates from an index beforehand. While candidate retrieval is not the focus of the paper, it is an important step in a real system. In this work, we exploit a heuristic method to obtain response candidates from index. Given a message un with {u1, . . . , un\u22121} utterances in its previous turns, we extract top 5 keywords based on their tf-idf values1 and expand un with the keywords. Then we send the expanded message to the index and retrieve response candidates using the inline retrieval algorithm of the index. Finally, we use g(s, r) to re-rank the candidates and return the top one as a response to the session."}, {"heading": "5 Experiment", "text": "We tested our model on a public English data set and a Chinese data set we publish with this paper."}, {"heading": "5.1 Experiment setup", "text": "The English data set is the Ubuntu Corpus (Lowe et al., 2015) which contains large scale multi-turn dialogues collected from chat logs of Ubuntu Forum. The data set consists of 1 million sessionresponse pairs for training, 0.5 million pairs for validation, and 0.5 million pairs for test. Positive responses are true responses from human, and\n1Tf is word frequency in the session, while idf is calculated using the entire index.\nnegative ones are randomly sampled. The ratio of the positive and the negative is 1:1 in training, and 1:9 in validation and test. We used the copy shared by Xu et al. (2016)2 in which numbers, urls, and paths are replaced by special placeholders.\nOne problem with the Ubuntu data is that negative examples is much easier to identify than those in a real chatbot, because they are randomly sampled and most of them are far from the semantics of the context. A better data set that can simulate the real scenario of a retrieval based chatbot must have responses generated following the procedure of information retrieval and labels annotated by humans. As far as we know, however, there are no such data sets publicly available. To test our model in a setting closer to the real case and facilitate the research of multi-turn response selection, we created a new data set and publish it to research communities with the paper. We crawled 15 million post-reply pairs from Sina Weibo3 which is the largest microblogging service in China and indexed the pairs with an open source Lucene4. We then crawled 1.1 million dyadic dialogues (conversation between two people) longer than 2 turns from Douban group5 which is a popular forum in China. From the data, we randomly sampled 0.5 million dialogues for creating a training set, 25 thousand dialouges for creating a validation set, and 1, 000 dialogues for creating a test set, and made sure that there is no overlap among the three sets. For each dialogue in training and validation, we took the last turn as a positive response for the previous turns as a session and randomly sampled another response from the 1.1 million data as a negative response. In total, there are 1 million session-response pairs in the training set and 50 thousand pairs in the validation set. To create the test set, we took the last turn of each dialogue as a message, retrieved 10 response candidates from the index following the method in Section 4, and finally formed a test set with 10, 000 session-response pairs. We recruited three labelers to judge if a candidate is a proper response to the session. A proper response means the response can naturally reply to the message given the context. Each pair received three labels and the majority of the labels was taken as the final decision.\n2https://www.dropbox.com/s/ 2fdn26rj6h9bpvl/ubuntudata.zip?dl=0\n3http://weibo.com/ 4https://lucenenet.apache.org/ 5https://www.douban.com/group\nTable 2 gives the statistics of the three sets. Note that the Fleiss\u2019 kappa (Fleiss, 1971) of the labeling is 0.41, which indicates that the three labelers reached a relatively high agreement.\nOn the Ubuntu data, we followed (Lowe et al., 2015) and employed recall at position k in n candidates (Rn@k) as evaluation metrics, and on the human labeled data, we followed the convention of information retrieval and employed mean average precision (MAP) (Baeza-Yates et al., 1999), mean reciprocal rank (MRR) (Voorhees and others, 1999), and precision at position 1 (P@1) as metrics. Note that when using the labeled set, we removed sessions with all negative responses or all positive responses, as models make no difference on them. After that there are 6, 670 sessionresponse pairs left in test."}, {"heading": "5.2 Baseline", "text": "We considered the following baselines:\nBasic models: models in (Lowe et al., 2015) and (Kadlec et al., 2015) including TF-IDF, RNN, CNN, LSTM and BiLSTM.\nMulti-view: the model proposed by Zhou et al. (2016) who utilize a hierarchical recurrent neural network to model utterance relationships.\nDeep learning to respond (DL2R): the model proposed by Yan et al. (2016).\nAdvanced single-turn matching models: since LSTM and BiLSTM do not represent the state-of-the-art matching models, we concatenated the utterances in a session and matched the long text with a response candidate using more powerful models including MV-LSTM (Wan et al., 2016), Match-LSTM (Wang and Jiang, 2015), and Multi-Channel which is described in Section 3.3. Multi-Channel is a simple version of our model without considering utterance relationships."}, {"heading": "5.3 Parameter Tuning", "text": "For baseline models, if their results are available in the existing literatures (e.g., those on Ubuntu Corpus), we just copied the numbers, otherwise\nwe implemented the models following the settings in the literatures. All models were implemented using Theano (Theano Development Team, 2016). Word embeddings were initialized by the results of word2vec 6 run on the training data, and the dimension of word vectors is 200. For MultiChannel and layer one of our model, we set the dimension of the hidden states of GRU as 200. We tuned the window size in convolution and pooling in {(2, 2), (3, 3)(4, 4)} and chose (3, 3) finally. The number of feature maps is 8. In layer two,\n6https://code.google.com/archive/p/ word2vec/\nwe set the dimensions of matching vectors and the hidden states of GRU as 50. We optimized the objective function using back-propagation and the parameters were updated by stochastic gradient descent with Adam algorithm (Kingma and Ba, 2014) on a single Tesla K80 GPU. The initial learning rate is 0.001, and the parameters of Adam, \u03b21 and \u03b22, that control exponential decay are 0.9 and 0.999 respectively. We employed early-stopping (Lawrence and Giles, 2000) as a regularization strategy. Models were trained in mini-batches with a batch size 200, and we padded zeros if the length of an utterance exceeds 50."}, {"heading": "5.4 Evaluation Results", "text": "Table 3 shows the evaluation results on the two data sets. Our models outperform baselines greatly in terms of all metrics on both data sets, and the improvements are statistically significant (t-test with p-value \u2264 0.01). Even the state-ofthe-art single-turn matching models perform much worse than our models. The results demonstrate that one cannot neglect utterance relationships and simply perform multi-turn response selection by transforming it to a single-turn problem. Our models achieve significant improvements over MultiView, which justified our \u201cmatching first\u201d strategy. DL2R is also worse than our models, indicating that utterance reformulation with heuristic rules is not a good method to utilize context information. Numbers on the Ubuntu data are much higher than those on the Chinese data (R10@1 and P@1 are equivalent). The results showed the merit of our new data and supported our claim that the Ubuntu data oversimplified the problem of multi-turn response selection. There is no significant difference among our three models. The reason might be GRU has already selected useful signals from the matching sequence and accumulated them in the final state with its gate mechanism, especially when the sequence is not long, and there is no need to equip another attention mechanism on top of it."}, {"heading": "5.5 Further Analysis", "text": "Visualization: we visualize the similarity matrices and the gates of GRU in layer two using an example from the Ubuntu Corpus to further clarify how our model identifies important information in context and how it selects important matching vectors with the gate mechanism of GRU as described in Section 3.3 and Section 3.4. The example is {u1: how can unzip many rar ( number for example ) files at once; u2: sure you can do that in bash; u3: okay how? u4: are the files all in the same directory? u5: yes they all are; r: then the command glebihan should extract them all from/to that directory}. It is from the test set and our model successfully ranked the correct response to the top position. Due to space limitation, we only visualized M1 of u1 and r in Figure 2(a), M1 of u3 and r in Figure 2(b), and the update gate (i.e. z) in Figure 2(c). They are already enough to support our analysis. In all pictures, darker areas mean larger values. We can see that in u1 important words including \u201cunzip\u201d, \u201crar\u201d, \u201cfiles\u201d\nare recognized and carried to matching by \u201ccommand\u201d, \u201cextract\u201d, and \u201cdirectory\u201d in r, while u3 is almost useless and thus little information is extracted from it. u1 is crucial to response selection and nearly all information from u1 and r flows to the hidden state of GRU, while other utterances are less informative and the corresponding gates are almost \u201cclosed\u201d to keep the information from u1 and r until the final state.\nSession length: we finally study how our model (SMNlast) performs with respect to the length of sessions. Figure 3 shows the comparison on MAP in different length intervals on the Chinese data. We can see that our model consistently performs better than the baselines, and when sessions become longer, the gap becomes larger. The results demonstrate that our model can well capture the dependencies, especially long dependencies, among utterances in sessions."}, {"heading": "6 Conclusion", "text": "We present a new model for multi-turn response selection in retrieval-based chatbots. Experiment results on public data sets show that the model can significantly outperform the state-of-the-art methods."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "We study response selection for multi-turn conversation in retrieval based chatbots. Existing works either ignores relationships among utterances, or misses important information in context when matching a response with a highly abstract context vector finally. We propose a new session based matching model to address both problems. The model first matches a response with each utterance on multiple granularities, and distills important matching information from each pair as a vector with convolution and pooling operations. The vectors are then accumulated in a chronological order through a recurrent neural network (RNN) which models the relationships among the utterances. The final matching score is calculated with the hidden states of the RNN. Empirical study on two public data sets shows that our model can significantly outperform the state-of-the-art methods for response selection in multi-turn conversation.", "creator": "LaTeX with hyperref package"}}}