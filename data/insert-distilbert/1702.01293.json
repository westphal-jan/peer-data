{"id": "1702.01293", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Feb-2017", "title": "Latent Hinge-Minimax Risk Minimization for Inference from a Small Number of Training Samples", "abstract": "deep learning ( | dl ) scaled methods show very weakly good performance when trained on large, balanced data piece sets. however, many practical problems involve imbalanced data sets, samples or / and classes with a small sheer number of training samples. the performance of dl scaling methods as well as more than traditional classifiers drops significantly in such settings. most of the existing solutions for imbalanced problems focus on customizing the data for training. a more easily principled solution is to use symmetric mixed hinge - minimax risk [ 19 ] specifically designed to solve binary problems with imbalanced spatial training sets. consider here we propose successively a latent hinge minimax ( lhm ) risk and a training decomposition algorithm that generalizes this paradigm to an ensemble of hyperplanes that can partially form arbitrary complex, piecewise linear boundaries. to extract good measurement features, we combine lhm model with vector cnn via transfer learning. to solve generalized multi - class problem we map pre - trained category - specific lhm classifiers to a multi - class neural reward network and adjust the weights with very easy fast tuning. lhm classifier stability enables the use of unlabeled data frames in its training and the mapping allows for precise multi - class inference, resulting in a classifier that performs better than alternatives when trained on observing a small number of training samples.", "histories": [["v1", "Sat, 4 Feb 2017 14:33:16 GMT  (399kb,D)", "http://arxiv.org/abs/1702.01293v1", null]], "reviews": [], "SUBJECTS": "cs.LG cs.CV", "authors": ["dolev raviv", "margarita osadchy"], "accepted": false, "id": "1702.01293"}, "pdf": {"name": "1702.01293.pdf", "metadata": {"source": "CRF", "title": "Latent Hinge-Minimax Risk Minimization for Inference from a Small Number of Training Samples", "authors": ["Dolev Raviv", "Margarita Osadchy"], "emails": ["dolev.raviv@gmail.com", "rita@cs.haifa.ac.il"], "sections": [{"heading": "1. Introduction", "text": "Many real binary classification problems involve imbalanced classes, for example object detection in vision and fraud detection in security. In such problems it is easy to collect background data, while data representing the target class is rare or hard (expensive) to obtain. The majority of existing powerful classifiers (e.g., SVM, Neural Networks, including deep ones) assume balanced training sets and when trained on imbalanced sets show degraded classification performance.\nDeep Neural Networks have recently shown very impressive performance in large-scale multi-class problems [14, 25, 23, 24]. However, these models require very large\nnumber of labeled training samples and their performance drops rapidly when the training set size gets smaller. Note that the requirement of large labeled sets is expensive in terms of data collection and training time. In practice, many learning problems require rapid inference from small amounts of data.\nThe aim of this work is to develop powerful and fast classifiers that improve in both tasks: 1) training in imbalanced setting that involve a small number of positive training samples and a large number of negative data points; 2) multiclass problems with a small number of labeled samples.\nWe follow the paradigm introduced in [20] that combines hinge risk for the smaller class and minimax risk [16, 10] for the larger class to address imbalanced classification problems. The mixed risk was used to train linear and kernel hybrid classifiers in [20]. Unfortunately, while being well understood and fast, linear classifiers do not solve all machine learning problems. Kernel methods show good classification results for highly non-linear problems, but they suffer from long running time and are not scalable to large tasks. To address these issues, [19] derived a hinge-minimax risk and an efficient training algorithm for intersection ofK positive halfspaces. Such an intersection forms a convex set which limits the applicability of the classifier.\nIn this work, we generalize the hinge-minimax risk for an ensemble of linear classifiers, that can form arbitrary, piece-wise linear boundaries. We propose a training algorithm that minimizes this risk by simultaneously discovering the convex components in the positive class and building K-hyperplane models to separate each component from the negative class. The learning is done by alternating between finding the best partition of the data into hidden components and updating the model over this partition. We call our novel classifier the Latent Hinge Minimax (LHM) classifier, as it discovers the latent structure in the data and employs the Hinge-Minimax paradigm.\nWe show that in imbalanced setting the proposed LHM classifier outperforms other combinations of hyperplanes, including Neural Network (NN) with an equivalent architecture (NN can be viewed as a combination of hyper-\n1\nar X\niv :1\n70 2.\n01 29\n3v 1\n[ cs\n.L G\n] 4\nF eb\n2 01\nplanes). The robustness of LHM to imbalanced problems can be explained by the use of the minimax risk [16, 10], that serves as a regularizer in training (since it utilizes the statistics of the entire class, as opposed to learning from small batches of examples).\nThe LHM training procedure is designed for binary problems. To apply it in a multi-class setting, we build one-against-all classifiers for all classes and combine them in a single model by mapping class specific LHM models to a multi-class NN with a matching architecture (see Section 4.2). We then use the cross-entropy loss to adjust the weights in the resulting LHM-NN combination.\nTo solve classification problems with a small number of training examples, it was suggested (e.g.,[5, 7, 17]) to combine a pre-trained CNN (trained on a much larger training set for a related classification problem) for feature extraction, with a classifier for the target problem. Such an approach was also referred to as transfer learning. If the classifier is implemented as a neural network, it enables an end-to-end training, which usually improves the results. We show that using LHM-NN in the transfer learning settings has significant benefits compared to NN, in both classification accuracy and training efficiency. The improved accuracy stems from the ability of LHM model to learn from unlabeled data. The fast convergence of the LHM-NN (just a handful of epochs) is due to a very good initialization of the upper layers with class specific LHM classifiers. Note that class specific LHM models can be trained in parallel while a distributed training of fully connected layers in NN is far from being trivial. Moreover, adding a new class to LHM-NN is fast and easy: train a classifier for the new class, map it to the corresponding LHM-NN architecture and run a very fast fine-tuning. Similarly to [15], which considered the transfer learning for the n+ 1 category from a fully trained n-category classifier, we use only a handful of training samples for tuning it. In contrast to [15], we do not restrict the new classifier to belong to the span of the previously learned n classifiers. This allows us greater flexibility in adding a new, non-related class to the multi-class model.\nThe method proposed here is different from the one-shot learning approach [12, 22], which attempts to find a mapping between target and source examples and apply it to the examples or to the model. LHM classifier learns the target concept from its examples, leveraging from unlabeled data in modeling the background statistics."}, {"heading": "2. Background", "text": "We first address the settings in which the positive labeled class is much smaller then the negative class. It was shown that hinge loss [26, 29, 1, 2, 11] is computationally appealing when there are fairly small number of training samples, thus it could be used to measure the positive class\nrisk within imbalanced problem settings. Alternatively, the minimax risk [16, 10] upper bounds the distribution that generates the instances-labels examples in the world. This approach is computationally appealing when there are (infinitely) many training examples, since it only utilizes their statistical properties, such as mean and covariance. Consequently, it could be employed as the negative class risk.\nIn this work we derive a mixed risk and an efficient training algorithm for a more general ensemble of hyperplanes. Our approach builds upon the mixed risk for the intersection of K-hyperplanes [19] which is briefly summarized in section 2.1."}, {"heading": "2.1. K-hyperplane Hinge-Minmax Classifier", "text": "Let (x, y)\u223cD be a joint distribution of samples x \u2208 Rn and labels y \u2208 {\u22121, 1}. Let Dneg be a marginal distribution of samples over the negative labels, and \u00b5 and \u03a3 be its mean and covariance respectively. For simplicity, unless stated otherwise, for a linear classifier w which predicts y = sign(wTx), we assume that b = 0 (or absorbed by w).\nLet wj , j = 1, ..,K denote K hyperplanes. Let W be a K \u00d7 d matrix with wj as its jth column. A K-hyperplane Hinge-Minmax classifier (KHHM) is an intersection of positive half-spaces defined by these K hyperplanes.\nLet X+ , {x \u2208 X : y = 1}, and X\u2212 , {x \u2208 X : y = \u22121} denote the positive and negative training sets correspondingly and let m+ be the size of X+ and m\u2212 be the size of X\u2212. Let \u00b5\u0302 and \u03a3\u0302 be the mean and covariance of Dneg , estimated using X\u2212. The KHHM training algorithm in [19] minimizes the empirical risk:\nL(WKHHM ) = L M,\u22121 X\u2212 (W ) + L H,1 X+ (W ) (1)\nwhere LM,\u22121X\u2212 (W ) = supz\u223cZ(\u00b5\u0302,\u03a3\u0302) Pr(z \u2208 Q) is the minimax risk over the negative labels inside the intersection Q , {x : WTx \u2265 ~0 (the zero vector)}. It was shown in [19] that\nsup z\u223cZ(\u00b5,\u03a3)\nPr(WT z > ~0) = 1\n1 + d2\nwith d2 = \u00b5T W\u0303 (W\u0303T\u03a3W\u0303 )\u22121W\u0303T\u00b5, where W\u0303 is a submatrix ofW containing hyperplanes that intersect in a point closest to \u00b5 scaled by \u03a3\u22121.\nThe hinge part of the risk in Eq. 1 is defined as LHX+(W ) = \u2211 x\u2208X+ `(W ;x, 1), where\n`(W ;x, y) = \u2211 j max {0, 1\u2212 ywTj x} is the K-hyperplane hinge loss [19]."}, {"heading": "3. Latent Hinge-Minmax Classifier", "text": "To accommodate classes that form non-convex or disjoint sets, we propose a new model, Latent Hinge-Minmax (LHM) classifier, and a training scheme that simultaneously\ndiscovers the convex components in the positive class and learns the K-hyperlane models separating each convex component from the negative class.\nWe define the LHM classifier as a union of intersections of positive half-spaces. We assume that each intersection is composed of K hyperplanes: W i = [wi1, ..., w i K ] and there are C components in the union. Let WLHM , (W 1, . . . ,WC) denote the LHM model. Equivalently, we can define the LHM classifier as\nfLHM(x,WLHM ) = sign( max i\u2208{1..C} { min j\u2208{1..K}\nwij T x})."}, {"heading": "3.1. Latent Hinge-Minimax Risk", "text": "We extend the hinge-minimax risk in Eq. 1, to contain multiple latent components and a hidden assignment variable. Specifically, we define a latent variable\u03d5(x) = i, i \u2208 {0, . . . , C} for each sample (x, y) \u2208 D. We set \u03d5(x) = 0 for all samples with the negative label. Since the assignment of negative training samples is constant during the training, we reduce the set of latent values to {1, . . . , C} for the simplicity of notation. We define the LHM risk function as follows:\nLD(WLHM ;\u03d5) = L M \u00b5,\u03a3(WLHM ;\u03d5) + L H D(WLHM ;\u03d5), (2)\nwhere\nLM\u00b5,\u03a3(WLHM ;\u03d5) = Pr z\u223cZ(\u00b5,\u03a3)\n(z \u2208 \u22c3\ni\u2208{1..C}\nQi) (3)\nis the minimax part of the LHM risk and\nLHD(WLHM ;\u03d5) = (4)\nE(x,y)\u2208D [ C\u2211 i=1 `(W i;x, y)1 [\u03d5(x) = i] ]\nis the hinge part, where\n`(W ;x, y) = max j\u2208{1..K}\n{max{0, \u03b1\u2212 ywTj x}}\nis the modified K-hyperplane hinge loss. This change is required to accommodate comparison between the different norms of the hyperplanes."}, {"heading": "3.2. Empirical Risk", "text": "Each sample with positive label encounters a loss only in a single latent component, specified by its latent variable \u03d5(x) as per Eq. 4. Thus,we define a single positive sample loss as follows,\nL(W\u03d5(x);x, 1, \u03d5(x))\n= 1\nm+\u03d5(x) LMX - (W \u03d5(x)) + \u03bbLHX+ (W \u03d5(x);x)\nwhere LMX - (W\u03d5(x)) = supz\u223cZ(\u00b5\u0302,\u03a3\u0302) Pr(z \u2208 Q i) is constant for all positive examples with the same assignment (the mean and covariance are estimated from X\u2212) and LHX+ (W \u03d5(x);x) = `(W\u03d5(x);x, 1).\nLet Xi , {x \u2208 X+ : \u03d5(x) = i} define a subset of X+. The empirical risk of a latent component i aggregates the sample loss over all samples in Xi: L(W i) = \u2211 x\u2208Xi [ 1 m+i LMX - (W i) + \u03bbLHX+ (W i;x)] (5)\n= LMX - (W i) + \u03bb \u2211 x\u2208Xi [ LHX+ (W i;x) ]\nFinally, we define the empirical risk of the LHM model as the sum of empirical risks of all its latent components: L(WLHM ;\u03d5) = C\u2211 i=1 L(W i) (6)\n= C\u2211 i=1 ( LMX - (W i) ) + \u03bb C\u2211 i=1 (\u2211 x\u2208Xi LHX+ (W i;x) )\nBy summing the risk of the components in Eq. 6, we upper bounded the expected minimax risk in Eq. 3 with\u2211C i=1 Prz\u223cZ(\u00b5,\u03a3)(z \u2208 Qi)."}, {"heading": "3.3. LHM Training", "text": "The training aims to minimize the empirical risk in Eq. 6 over the parameters WLHM and the hidden variables \u03d5. Similarly to latent SVM [28], the complexity of the optimal assignment of samples to latent components is exponential. We propose an iterative algorithm, which reaches fast convergence and shows good results in practice. The algorithm iterates between two steps: First, given an assignment it produces a model WLHM , second, it updates the latent variables \u03d5(x),\u2200x \u2208 X+ to better represent the latent structure of the data.\nThe first step updates the LHM model W tLHM in iteration t given the latent variables \u03d5 from iteration t \u2212 1. Namely, for each hidden component i = 1, ..., C, we find the hyperplanes W i separating the training samples in Xi from Dneg by minimizing the empirical risk in Eq. 5. This risk is minimized by the training algorithm proposed in [19].\nThe second step updates the latent variable assignment, given the current W tLHM . For each positive sample, it finds the best component w.r.t. the risk in Eq 6. Specifically, the hinge risk for x is simply `(W i, x, 1). The minimax part of the assignment function for x /\u2208 Qi should consider the probability that this point adds when it is included in the component i (as shown in Figure 1, left). For x \u2208 Qi, the minimax part should consider the amount of probability released when the component shrinks as a result of change in\nthe assignment of x (as shown in Figure 1, right). The optimal assignment should take both cases into consideration for all components. We define the assignment as follows,\n\u03d5(x) = (7)\nargmin i\u2208{1..C}\n[ Pr\nz\u223cZ(\u00b5\u0302,\u03a3\u0302) (z \u2208 Qix) + \u03bb`(W i;x, 1)\n]\nwhere Qix , {x : W ix T x \u2265 ~0} and\nW ix , { W def if x \u2208 Q W inf if x /\u2208 Q\nW def is a deflated model derived fromW i by parallel translation of the hyperplane closest to x such thatwT\u2217 x+b\u2217 = 0. W inf is an inflated model derived from W i by parallel translation of the hyperplanes for which wTk x + bk < 0, until they intersect in x, namely, wTk x+ b \u2032 k = 0. The rest of the hyperplanes remain unchanged. The full training algorithm is summarized in Algorithm 1.\nAlgorithm 1 LHM Training. KHHM-train refers to the training of intersection of hyperplanes from [19]. T is the threshold on the empirical risk change. Input: C, K, X+, X\u2212,T Output: WLHM , \u03d5\n1: t\u2190 1 2: L(W t=0LHM ;\u03d5\nt=0)\u2190\u221e 3: \u03d5t \u2190 Init(X+, C) {initial assignment} 4: do 5: for all i = 1, ..., C do{Model Step} 6: W i,t=KHHM-training(X\u2212,Xi) 7: for all x \u2208 X+ do{Assignment Step} 8: \u03d5t+1(x) as defined in Eq. 7 9: t\u2190 t+ 1\n10: while L(W tLHM ;\u03d5t)\u2212 L(W t\u22121LHM ;\u03d5t\u22121) \u2265 T\nLemma 1. Algorithm 1 minimizes the empirical risk L(WLHM ;\u03d5).\nProof. Since LHM risk is a sum of risks over the latent components (Eq. 6), it is minimized by minimizing the empirical risk of each component. In step (5) of the Algorithm 1, we train W i,t model for each latent component i = 1, ..., C using the iterative algorithm from [19] (the convergence of which was shown in [19]). It is easy to see that L(W i) = L(WKHHM ), thus step (5) of the Algorithm 1 minimizes the component\u2019s risk in Eq. 5.\nIt is now left to show that the assignment \u03d5t in iteration t, will cause the reduction in the empirical risk in iteration t + 1. Since the empirical risk is aggregated over positive samples, it is enough to prove the claim for a single sample. We consider two cases: 1. The assignment of sample x does not change, formally \u03d5t(x) = \u03d5t+1(x). In this case L(W t+1LHM ;\u03d5\nt+1(x)) will only be affected by the W i,t+1 training, thus\nL ( W tLHM ;\u03d5 t(x) ) \u2265 L ( W t+1LHM ;\u03d5 t+1(x) )\n2. The assignment of sample x is changed. Formally in iteration t: \u03d5t(x) = i and in interation t + 1 exists j 6= i, such that\n\u03d5t+1(x) = j = argmin k\u2208{1..C}\nLMX - ( W k,tx ) + \u03bbLHX+ ( W k,t;x ) .\nSince x \u2208 Qi, reassigning it to a different component will cause the Prz\u223cZ(\u00b5\u0302,\u03a3\u0302)(z \u2208 Qix) to decrease (or stay the same), thus\nLMX - (W i,t x )\u2212 LMX - (W i,t) \u2264 0.\nHence, the sample loss in component i is larger than the sample loss in the deflated component:\nL ( W i,t;x ) \u2265 LMX - ( W i,tx ) + \u03bbLHX+ ( W i,t;x ) . (8)\nAt the same time, j is the optimal assignment, thus LMX - ( W i,tx ) + \u03bbLHX+ ( W i,t;x ) \u2265 (9)\nLMX - ( W j,tx ) + \u03bbLHX+ ( W j,t;x ) .\nSince W j,tx is a naive inflation of W j,t to include x, the solution W j,t+1, provided by KHHM training, would have lower (or same) empirical risk, thus\nLMX - ( W j,tx ) \u2265 LMX - (W j,t+1). (10)\nIn iteration t + 1, x is included in Xj for training the j\u2019th latent component, consequently\nLHX+ ( W j,t;x ) \u2265 LHX+ (W j,t+1;x). (11)\n(as we assume that x \u2208 Xj leads to x \u2208 Qj,t+1). Finally, by combining the inequalities in Eq. 8\u201311, we obtain:\nL ( W i,t;x ) \u2265 L ( W j,t+1;x ) ."}, {"heading": "4. Mapping LHM Classifier to a Neural Network", "text": "We propose to map LHM Classifier to a Neural Network. This enables 1) end-to-end training of the CNN features and LHM classifier for imbalanced problems and 2) LHM generalization to multi-class that enables using a smaller number of labeled training samples than NN."}, {"heading": "4.1. Binary NN", "text": "A union of the intersections of positive half spaces can be implemented by a NN with three hidden layers. The first fully connected hidden layer has K \u00d7 H neurons, where K is the number of hyperplanes in an intersection and H is the number of components. The second hidden layer has H nodes, connected only to the neurons associated with hyperplanes forming the corresponding intersection. The weights on these connections and the biases are fixed and mimic AND operation, namely, all weights of this layer are equal to 1/K and the biases are equal to \u22121 + 1/(2K). The last hidden layer has two neurons, which are fully connected to the previous layer with the fixed weights and biases that mimic OR operation, namely, the fist neuron has weights equal to 1/H and the bias of \u22121/(2H). The second output has weights equal to \u22121/H and the bias of 1/(2H). The network has two outputs. An example of such network for H = 2 and K = 3 is depicted in Figure 2."}, {"heading": "4.2. Multi-Class NN", "text": "For a multi-class setting, we suggest to train LHM model for each class using an additional unlabeled data for estimating the statistics of the negative class. We then map these models to a multi-class NN with the following architecture. The first hidden layer is a fully connected layer with H \u00d7K neurons per class, H \u00d7K \u00d7 C neurons in total, where C is the number of classes. These are equivalent to H \u00d7 K \u00d7 C hyperplanes in the LHM model. For each hidden component, all hyperplanes in the intersection are connected to their corresponding node in the AND layer (as detailed in Section 4.1). The AND layer comprises H \u00d7 C\nneurons. The next layer is a fully connected layer, comprising C nodes. The weights on the connections to the H components of the corresponding class are initialized with 1\u2019s, and the weights on the remaining connections are initialized with very small values from a Gaussian distribution. The network has C outputs and is trained using the crossentropy loss.\nTo provide an end-to-end training, one can consider stacking the feature extraction layers of CNN (up to fully connected layers) with one of the above networks."}, {"heading": "5. Experiments", "text": "We start by an illustrative example in 2D (Section 5.1) that shows the ability of the LHM classifier to discover the hidden components in the positive class and to separate each of them from the negative class using a K-hyperplane model.\nNext, we compare LHM model to alternative ensembles of hyperplanes on the PASCAL-VOC 2007 dataset [6] (Section 5.2), and show its advantage over those methods and its robustness to the choice of the number of latent components. In these experiments we use simple HOG features and shallow architecture.\nFinally, we show (Section 5.3) that LHM classifier can be combined with CNN via transfer learning. We address two settings: 1) binary problems with imbalanced sets, 2) multi-class tasks with a small number of labeled training samples. In both cases, LHM-based models show significantly better performance than NNs. The experiments are performed on images from cifar-10 and cifar-100 [13] and using LeNet CNN for features extraction."}, {"heading": "5.1. Synthetic Data", "text": "A simpler alternative to the LHM model is a two-step algorithm which first finds the structure of the target class by applying some kind of unsupervised learning (e.g, k-means clustering) and then builds a model for each component. Such a simple approach was employed in [8] with LDA [9] classifier trained per cluster. Unless the clusters are very small (as in exemplar-based approach, which is time con-\nsuming [18]), it relies heavily on the results of the clustering. If an initial clustering is incorrect (as in Figure 3, right), LDA (or any other convex classifier) cannot separate the resulting components from the background without including many false positives. The LHM training finds the underlying structure of the data and the model iteratively, improving both (Figure 3, left). Furthermore, LHM is quite robust to the initial assignment. Figure 4 shows a few iterations and the corresponding loss convergence when the initial assignment of the positive samples to components is chosen at random. Note the LHM training discovers the underlying structure in a 3-4 iterations."}, {"heading": "5.2. Ensembles of Hyperplanes", "text": "Next, we compared the LHM classifier to alternative ensembles of linear classifiers on PASCAL VOC 2007 dataset [6] using Dalal-Triggs variant of the HOG features [3] with a fixed number of cells. LHM model: We set the number of hyperplanes in each component to 2 and varied the number of components from 2 to 5. An initial assignment to the components was done using k-means with the Euclidian distance. LDA Union (as a baseline model): We applied k-means clustering on whitened features to find the partition. We then learned an LDA classifier for each cluster in that partition. We varied the number of clusters from 2 to 5. NN with an architecture equivalent to LHM: We used the model described in Section 4.1 with K = 2 and H = 2, .., 5, but the weights were initialized at random. KHHM model [19]: This is essentially an LHM model with a single component, thus it is theoretically inferior to LHM. However, we ran this experiment to test the benefits of modeling the hidden structure of the positive class. We"}, {"heading": "71.48% 65.17% 67.19% 69.45%", "text": "varied the number of hyperplanes from 2 to 5. All ensembles were trained in one-against-all manner. Similarly to [8, 21], we learned the background mean and covariance using bounding boxes from all classes and used them to represent the negative class in LDA union, KHHM, and LHM training.\nWe tested all ensemble classifiers on all windows from the test set. Table 1 summarizes the results ((1\u2212EER)\u00b7100)) for all tested ensembles averaged over classes and different parameters. It shows that LHM model outperforms all other classifiers. Figure 5 compares LHM to NN on 20 categories (as one-against-all binary classifiers) for varying number of hidden components. The plot shows that LHM outperforms NN independently of the number of components."}, {"heading": "5.3. Deep Architecture", "text": "Next, we tested the LHM classifier on top of the pretrained CNN feature extraction in imbalanced binary problems and in multi-class tasks with a small number of labeled examples. We explored the following transfer learning settings. The first setting refers to the best case scenario in which the source and the target classification tasks operate on the same set of features but differ in the classification problem. The second setting refers to the worst case scenario for the transfer learning where the source and the target classification problems share very little similarity. The \u201cworst case\u201d scenario is very common in practice, as many classification tasks do not have a large, comprehensive training set (such as ImageNet [4] in object recognition) to be used in transfer learning. No good solution currently exists for such problems.\nWe used the CIFAR-10, composed of 10 categories (airplane, automobile, bird, cat, deer, dog, frog, horse, ship, and truck) as the source problem. Specifically, we trained the LeNet model implemented in MatConvNet [27] on CIFAR10. Then we removed the last fully-connected layer and the soft-max and used this trimmed network as a feature extractor which converts images to a 64-dimensional feature vectors.\nFor the best case transfer learning, we defined a new set of classes by coupling i and i + 5 indexes of CIFAR10 classes. CNN trained on CIFAR-10 maps individual classes to linearly separable sub-spaces, thus using pairs of classes as a target classification problem makes it nonlinear. Consequently, we get a new classification problem over the same space of features.\nFor the worst case transfer learning, we picked a subset\nof 5 classes (train, bottle, cattle, forest, and sweet peppers) from the CIFAR-100, which do not overlap (in their visual appearance) with the CIFAR-10 categories, to be the target classification task. CIFAR-10 data set is not rich enough to enable learning of features that can be used for an arbitrary category, thus we believe that such setting is especially difficult.\nWe tested the LHM binary and multi-class classifiers in the best and the worst case transfer learning scenarios and compared their performance to two baselines. One is an NN with a single fully connected layer and the cross-entropy loss (NN linear) and the other is the NN with the architecture matching the LHM model (NN matching). We repeated each experiment 50 times over different random subsets of training samples and random initialization of NN and averaged the results."}, {"heading": "5.3.1 Binary Imbalanced Problem", "text": "The \u201cBest Case\u201d Transfer Learning: We trained binary classifiers for pairs of classes from CIFAR-10 using imbalanced training sets, in which the negative class included all samples from all other classes (40,000 examples) and the positive class included a varying number of samples (140, 300, 600, 1400, 2000, 5000-all). This resulted in imbalance ratios from 1:256 to 1:4.\nLHM model was trained with 2 hidden components and 3 hyperplanes per component. The matching NN mimicked the configuration of LHM model, but the weights were allowed to change in training. Figure 6-left shows the 1-EER (averaged over 5 classification problem) of the LHM classifier and the two NN baselines as a function of the positive training sample size. The \u201cWorst Case\u201d Transfer Learning: Since the number of samples per class in CIFAR-100 is significantly smaller, this experiment tests the robustness to imbalanced training data and to a small number of examples. We varied the size of the positive training set between 20, 50, 100, 250, 500(all) samples and we used all 2,000 samples of other classes as the negative training set. We compared the LHM model trained with 2 hidden components and 2 hyperplanes per component to NN baselines. Figure 6-right shows the 1-EER of the classifiers averaged over 5 classification problems as a function of the positive training set size."}, {"heading": "5.3.2 Multi-Class Problem", "text": "The \u201cBest Case\u201d Transfer Learning: We mapped the LHM binary classifiers trained for 5 pairs of categories to a multi-class NN as described in Section 4.2. We finetuned the weights with a very fast training (just a handful of epochs, while training from scratch requires two orders of magnitude more training epochs). Figure 7-left shows the accuracy of the LHM models mapped to a multi-class\nNN (LHM-NN) with the two baseline NNs as a function of the size of the training set. The \u201cWorst Case\u201d Transfer Learning: We mapped the LHM binary classifiers trained for the 5 categories from CIFAR-100 (using CIFAR-10 features) to a multi-class NN and fine-tuned the weights with a small number of epochs.\nTo test the complexity of the transfer learning problem we also trained a CNN (LeNet model implemented in MatConvNet [27]) on the target problem. We hoped that due to the small size of the target classification problem, 500 training examples per class would yield relatively good accuracy. Figure 7-right compares the accuracy of LHM-NN, two baseline NNs, and CNN (trained from scratch) as a function of the training sample size. It shows that CNN trained on the target problem is indeed the best as it succeeds to learn features specific for the task, but its accuracy drops very abruptly when the number of training samples becomes smaller. This suggests that when the number of training examples is small, using transfer learning even in a such difficult setting is a better solution than training a CNN from scratch.\nThe results in Figures 6 and 7 show that the NN models either heavily overfit when the number of training samples is small (NN matching) or they are not expressive enough when the number of training samples increases (NN linear). LHM classifiers are expressive enough to learn from a large set of examples and are more robust to overfitting when the number of examples is small."}, {"heading": "6. Training Efficiency", "text": "Another advantage of LHM-NN is its training efficiency. A class-specific LHM model converges in 5-10 iterations. Its training time primarily depends on the number of positive samples and the dimension. The negative samples are used to estimate the mean and covariance of the background. The initial estimation (which involves a large number of samples) can be done only once and used for all classes. Since the probability of the negative class is evaluated inside the positive region using false positives [19], the number of which drops very fast, the estimation time of the mean and covariance during the training is negligible. Training of a binary classifier per class is independent of other classes, thus their training can be done in parallel. Finally, the fine-tuning of the multi-class network after mapping is very fast, due to the initialization of all layers (using supervized learning): feature extraction layers with pre-trained CNN and classifier\u2019s layers with LHM models.\nThe LHM-NN is also beneficial for the problems in which classes are dynamically added or removed from the classification task. Adding a class requires training a single binary classifier and fast fine-tuning; removing a class requires only fine-tuning."}, {"heading": "7. Conclusions", "text": "We proposed a novel Latent Hinge-Minimax classifier for binary problems that discovers the hidden components in the positive class and separates them from the negative class with the intersections of positive half spaces. The main advantage of this classifier is its ability to incorporate unlabeled data in training. This results in a better robustness to imbalanced problems. We showed that for multiclass tasks, class-specific LHM models can be mapped to a multi-class NN with matching architecture requiring only a few iterations of fine-tuning. Finally, the proposed LHM architecture can be integrated with CNN features via transfer learning. The entire training procedure is very efficient. Our experiments showed that such classifiers are much more robust to the number of labeled training samples than the equivalent NNs.\nWe plan to incorporate multi-class loss into the HingeMinimax paradigm and design an efficient algorithm for minimizing this risk. We also plan to tain NNs using HingeMinimax like loss. It would be interesting to compare the results of this model with the binary-to-multiclass mapping scheme proposed here."}], "references": [{"title": "Rademacher and gaussian complexities: Risk bounds and structural results", "author": ["P.L. Bartlett", "S. Mendelson"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2002}, {"title": "Introduction to statistical learning theory", "author": ["O. Bousquet", "S. Boucheron", "G. Lugosi"], "venue": "In Advanced lectures on machine learning,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2004}, {"title": "Histograms of oriented gradients for human detection", "author": ["N. Dalal", "B. Triggs"], "venue": "In CVPR,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2005}, {"title": "ImageNet: A Large-Scale Hierarchical Image Database", "author": ["J. Deng", "W. Dong", "R. Socher", "L.-J. Li", "K. Li", "L. Fei-Fei"], "venue": "In CVPR09,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2009}, {"title": "Decaf: A deep convolutional activation feature for generic visual recognition", "author": ["J. Donahue", "Y. Jia", "O. Vinyals", "J. Hoffman", "N. Zhang", "E. Tzeng", "T. Darrell"], "venue": "In Proceedings of the 31th International Conference on Machine Learning,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "The pascal visual object classes (voc) challenge", "author": ["M. Everingham", "L. Van Gool", "C.K.I. Williams", "J. Winn", "A. Zisserman"], "venue": "International Journal of Computer Vision,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "Rich feature hierarchies for accurate object detection and semantic segmentation", "author": ["R.B. Girshick", "J. Donahue", "T. Darrell", "J. Malik"], "venue": "IEEE Conference on Computer Vision and Pattern Recognition,CVPR", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Discriminative decorrelation for clustering and classification", "author": ["B. Hariharan", "J. Malik", "D. Ramanan"], "venue": "In Computer Vision - ECCV 2012 - 12th European Conference on Computer", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2012}, {"title": "The Elements of Statistical Learning", "author": ["T. Hastie", "R. Tibshirani", "J. Friedman"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2001}, {"title": "Tight Bounds for the Expected Risk of Linear Classifiers and PAC-Bayes Finite- Sample Guarantees", "author": ["J. Honorio", "T. Jaakkola"], "venue": "In Proceedings of the Seventeenth International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "On the complexity of linear prediction: Risk bounds, margin bounds, and regularization", "author": ["S.M. Kakade", "K. Sridharan", "A. Tewari"], "venue": "In Advances in neural information processing systems,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2009}, {"title": "Siamese neural networks for one-shot image recognition", "author": ["G. Koch", "R. Zemel", "R. Salakhutdinov"], "venue": "ICML Deep Learning workshop,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Learning Multiple Layers of Features from Tiny Images", "author": ["A. Krizhevsky"], "venue": "Master\u2019s thesis,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2009}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "In Advances in neural information processing systems,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "From N to N+1: multiclass transfer incremental learning", "author": ["I. Kuzborskij", "F. Orabona", "B. Caputo"], "venue": "IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2013}, {"title": "A robust minimax approach to classification", "author": ["G.R. Lanckriet", "L.E. Ghaoui", "C. Bhattacharyya", "M.I. Jordan"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2002}, {"title": "The multiverse loss for robust transfer learning", "author": ["E. Littwin", "L. Wolf"], "venue": "In The IEEE Conference on Computer Vision and Pattern Recognition (CVPR),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2016}, {"title": "Ensemble of exemplar-svms for object detection and beyond", "author": ["T. Malisiewicz", "A. Gupta", "A.A. Efros"], "venue": "In IEEE International Conference on Computer Vision,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2011}, {"title": "K-hyperplane hingeminimax classifier", "author": ["M. Osadchy", "T. Hazan", "D. Keren"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2015}, {"title": "Hybrid classifiers for object classification with a rich background", "author": ["M. Osadchy", "D. Keren", "B. Fadida-Specktor"], "venue": "In European Conference on Computer Vision,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2012}, {"title": "Recognition using hybrid classifiers", "author": ["M. Osadchy", "D. Keren", "D. Raviv"], "venue": "IEEE transactions on pattern analysis and machine intelligence,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2016}, {"title": "Meta-learning with memory-augmented neural networks", "author": ["A. Santoro", "S. Bartunov", "M. Botvinick", "D. Wierstra", "T.P. Lillicrap"], "venue": "In Proceedings of the 33nd International Conference on Machine Learning,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2016}, {"title": "Very deep convolutional networks for large-scale image recognition", "author": ["K. Simonyan", "A. Zisserman"], "venue": "CoRR, abs/1409.1556,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2014}, {"title": "Going deeper with convolutions", "author": ["C. Szegedy", "W. Liu", "Y. Jia", "P. Sermanet", "S.E. Reed", "D. Anguelov", "D. Erhan", "V. Vanhoucke", "A. Rabinovich"], "venue": "In IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2015}, {"title": "Deepface: Closing the gap to human-level performance in face verification", "author": ["Y. Taigman", "M. Yang", "M. Ranzato", "L. Wolf"], "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2014}, {"title": "The nature of statistical learning theory, ser. statistics for engineering and information science", "author": ["V.N. Vapnik"], "venue": "New York: Springer,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2000}, {"title": "MatConvNet: Convolutional Neural Networks for MATLAB", "author": ["A. Vedaldi", "K. Lenc"], "venue": "In Proc. of the 23rd Annual ACM Conference on Multimedia Conference,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2015}, {"title": "Learning structural svms with latent variables", "author": ["C.-N.J. Yu", "T. Joachims"], "venue": "In Proceedings of the 26th Annual International Conference on Machine Learning,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2009}, {"title": "Covering number bounds of certain regularized linear function classes", "author": ["T. Zhang"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2002}], "referenceMentions": [{"referenceID": 18, "context": "A more principled solution is to use mixed Hinge-Minimax risk [19] specifically designed to solve binary problems with imbalanced training sets.", "startOffset": 62, "endOffset": 66}, {"referenceID": 13, "context": "Deep Neural Networks have recently shown very impressive performance in large-scale multi-class problems [14, 25, 23, 24].", "startOffset": 105, "endOffset": 121}, {"referenceID": 24, "context": "Deep Neural Networks have recently shown very impressive performance in large-scale multi-class problems [14, 25, 23, 24].", "startOffset": 105, "endOffset": 121}, {"referenceID": 22, "context": "Deep Neural Networks have recently shown very impressive performance in large-scale multi-class problems [14, 25, 23, 24].", "startOffset": 105, "endOffset": 121}, {"referenceID": 23, "context": "Deep Neural Networks have recently shown very impressive performance in large-scale multi-class problems [14, 25, 23, 24].", "startOffset": 105, "endOffset": 121}, {"referenceID": 19, "context": "We follow the paradigm introduced in [20] that combines hinge risk for the smaller class and minimax risk [16, 10] for the larger class to address imbalanced classification problems.", "startOffset": 37, "endOffset": 41}, {"referenceID": 15, "context": "We follow the paradigm introduced in [20] that combines hinge risk for the smaller class and minimax risk [16, 10] for the larger class to address imbalanced classification problems.", "startOffset": 106, "endOffset": 114}, {"referenceID": 9, "context": "We follow the paradigm introduced in [20] that combines hinge risk for the smaller class and minimax risk [16, 10] for the larger class to address imbalanced classification problems.", "startOffset": 106, "endOffset": 114}, {"referenceID": 19, "context": "The mixed risk was used to train linear and kernel hybrid classifiers in [20].", "startOffset": 73, "endOffset": 77}, {"referenceID": 18, "context": "To address these issues, [19] derived a hinge-minimax risk and an efficient training algorithm for intersection ofK positive halfspaces.", "startOffset": 25, "endOffset": 29}, {"referenceID": 15, "context": "The robustness of LHM to imbalanced problems can be explained by the use of the minimax risk [16, 10], that serves as a regularizer in training (since it utilizes the statistics of the entire class, as opposed to learning from small batches of examples).", "startOffset": 93, "endOffset": 101}, {"referenceID": 9, "context": "The robustness of LHM to imbalanced problems can be explained by the use of the minimax risk [16, 10], that serves as a regularizer in training (since it utilizes the statistics of the entire class, as opposed to learning from small batches of examples).", "startOffset": 93, "endOffset": 101}, {"referenceID": 4, "context": ",[5, 7, 17]) to combine a pre-trained CNN (trained on a much larger training set for a related classification problem) for feature extraction, with a classifier for the target problem.", "startOffset": 1, "endOffset": 11}, {"referenceID": 6, "context": ",[5, 7, 17]) to combine a pre-trained CNN (trained on a much larger training set for a related classification problem) for feature extraction, with a classifier for the target problem.", "startOffset": 1, "endOffset": 11}, {"referenceID": 16, "context": ",[5, 7, 17]) to combine a pre-trained CNN (trained on a much larger training set for a related classification problem) for feature extraction, with a classifier for the target problem.", "startOffset": 1, "endOffset": 11}, {"referenceID": 14, "context": "Similarly to [15], which considered the transfer learning for the n+ 1 category from a fully trained n-category classifier, we use only a handful of training samples for tuning it.", "startOffset": 13, "endOffset": 17}, {"referenceID": 14, "context": "In contrast to [15], we do not restrict the new classifier to belong to the span of the previously learned n classifiers.", "startOffset": 15, "endOffset": 19}, {"referenceID": 11, "context": "The method proposed here is different from the one-shot learning approach [12, 22], which attempts to find a mapping between target and source examples and apply it to the examples or to the model.", "startOffset": 74, "endOffset": 82}, {"referenceID": 21, "context": "The method proposed here is different from the one-shot learning approach [12, 22], which attempts to find a mapping between target and source examples and apply it to the examples or to the model.", "startOffset": 74, "endOffset": 82}, {"referenceID": 25, "context": "It was shown that hinge loss [26, 29, 1, 2, 11] is computationally appealing when there are fairly small number of training samples, thus it could be used to measure the positive class risk within imbalanced problem settings.", "startOffset": 29, "endOffset": 47}, {"referenceID": 28, "context": "It was shown that hinge loss [26, 29, 1, 2, 11] is computationally appealing when there are fairly small number of training samples, thus it could be used to measure the positive class risk within imbalanced problem settings.", "startOffset": 29, "endOffset": 47}, {"referenceID": 0, "context": "It was shown that hinge loss [26, 29, 1, 2, 11] is computationally appealing when there are fairly small number of training samples, thus it could be used to measure the positive class risk within imbalanced problem settings.", "startOffset": 29, "endOffset": 47}, {"referenceID": 1, "context": "It was shown that hinge loss [26, 29, 1, 2, 11] is computationally appealing when there are fairly small number of training samples, thus it could be used to measure the positive class risk within imbalanced problem settings.", "startOffset": 29, "endOffset": 47}, {"referenceID": 10, "context": "It was shown that hinge loss [26, 29, 1, 2, 11] is computationally appealing when there are fairly small number of training samples, thus it could be used to measure the positive class risk within imbalanced problem settings.", "startOffset": 29, "endOffset": 47}, {"referenceID": 15, "context": "Alternatively, the minimax risk [16, 10] upper bounds the distribution that generates the instances-labels examples in the world.", "startOffset": 32, "endOffset": 40}, {"referenceID": 9, "context": "Alternatively, the minimax risk [16, 10] upper bounds the distribution that generates the instances-labels examples in the world.", "startOffset": 32, "endOffset": 40}, {"referenceID": 18, "context": "Our approach builds upon the mixed risk for the intersection of K-hyperplanes [19] which is briefly summarized in section 2.", "startOffset": 78, "endOffset": 82}, {"referenceID": 18, "context": "The KHHM training algorithm in [19] minimizes the empirical risk:", "startOffset": 31, "endOffset": 35}, {"referenceID": 18, "context": "It was shown in [19] that", "startOffset": 16, "endOffset": 20}, {"referenceID": 18, "context": "1 is defined as LX+(W ) = \u2211 x\u2208X+ `(W ;x, 1), where `(W ;x, y) = \u2211 j max {0, 1\u2212 yw j x} is the K-hyperplane hinge loss [19].", "startOffset": 118, "endOffset": 122}, {"referenceID": 27, "context": "Similarly to latent SVM [28], the complexity of the optimal assignment of samples to latent components is exponential.", "startOffset": 24, "endOffset": 28}, {"referenceID": 18, "context": "This risk is minimized by the training algorithm proposed in [19].", "startOffset": 61, "endOffset": 65}, {"referenceID": 18, "context": "KHHM-train refers to the training of intersection of hyperplanes from [19].", "startOffset": 70, "endOffset": 74}, {"referenceID": 18, "context": ", C using the iterative algorithm from [19] (the convergence of which was shown in [19]).", "startOffset": 39, "endOffset": 43}, {"referenceID": 18, "context": ", C using the iterative algorithm from [19] (the convergence of which was shown in [19]).", "startOffset": 83, "endOffset": 87}, {"referenceID": 5, "context": "Next, we compare LHM model to alternative ensembles of hyperplanes on the PASCAL-VOC 2007 dataset [6] (Section 5.", "startOffset": 98, "endOffset": 101}, {"referenceID": 12, "context": "The experiments are performed on images from cifar-10 and cifar-100 [13] and using LeNet CNN for features extraction.", "startOffset": 68, "endOffset": 72}, {"referenceID": 7, "context": "Such a simple approach was employed in [8] with LDA [9] classifier trained per cluster.", "startOffset": 39, "endOffset": 42}, {"referenceID": 8, "context": "Such a simple approach was employed in [8] with LDA [9] classifier trained per cluster.", "startOffset": 52, "endOffset": 55}, {"referenceID": 17, "context": "suming [18]), it relies heavily on the results of the clustering.", "startOffset": 7, "endOffset": 11}, {"referenceID": 5, "context": "Next, we compared the LHM classifier to alternative ensembles of linear classifiers on PASCAL VOC 2007 dataset [6] using Dalal-Triggs variant of the HOG features [3] with a fixed number of cells.", "startOffset": 111, "endOffset": 114}, {"referenceID": 2, "context": "Next, we compared the LHM classifier to alternative ensembles of linear classifiers on PASCAL VOC 2007 dataset [6] using Dalal-Triggs variant of the HOG features [3] with a fixed number of cells.", "startOffset": 162, "endOffset": 165}, {"referenceID": 18, "context": "KHHM model [19]: This is essentially an LHM model with a single component, thus it is theoretically inferior to LHM.", "startOffset": 11, "endOffset": 15}, {"referenceID": 7, "context": "Similarly to [8, 21], we learned the background mean and covariance using bounding boxes from all classes and used them to represent the negative class in LDA union, KHHM, and LHM training.", "startOffset": 13, "endOffset": 20}, {"referenceID": 20, "context": "Similarly to [8, 21], we learned the background mean and covariance using bounding boxes from all classes and used them to represent the negative class in LDA union, KHHM, and LHM training.", "startOffset": 13, "endOffset": 20}, {"referenceID": 3, "context": "The \u201cworst case\u201d scenario is very common in practice, as many classification tasks do not have a large, comprehensive training set (such as ImageNet [4] in object recognition) to be used in transfer learning.", "startOffset": 149, "endOffset": 152}, {"referenceID": 26, "context": "Specifically, we trained the LeNet model implemented in MatConvNet [27] on CIFAR10.", "startOffset": 67, "endOffset": 71}, {"referenceID": 26, "context": "To test the complexity of the transfer learning problem we also trained a CNN (LeNet model implemented in MatConvNet [27]) on the target problem.", "startOffset": 117, "endOffset": 121}, {"referenceID": 18, "context": "Since the probability of the negative class is evaluated inside the positive region using false positives [19], the number of which drops very fast, the estimation time of the mean and covariance during the training is negligible.", "startOffset": 106, "endOffset": 110}], "year": 2017, "abstractText": "Deep Learning (DL) methods show very good performance when trained on large, balanced data sets. However, many practical problems involve imbalanced data sets, or/and classes with a small number of training samples. The performance of DL methods as well as more traditional classifiers drops significantly in such settings. Most of the existing solutions for imbalanced problems focus on customizing the data for training. A more principled solution is to use mixed Hinge-Minimax risk [19] specifically designed to solve binary problems with imbalanced training sets. Here we propose a Latent Hinge Minimax (LHM) risk and a training algorithm that generalizes this paradigm to an ensemble of hyperplanes that can form arbitrary complex, piecewise linear boundaries. To extract good features, we combine LHM model with CNN via transfer learning. To solve multi-class problem we map pre-trained categoryspecific LHM classifiers to a multi-class neural network and adjust the weights with very fast tuning. LHM classifier enables the use of unlabeled data in its training and the mapping allows for multi-class inference, resulting in a classifier that performs better than alternatives when trained on a small number of training samples.", "creator": "LaTeX with hyperref package"}}}