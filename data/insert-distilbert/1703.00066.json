{"id": "1703.00066", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "28-Feb-2017", "title": "On the Power of Learning from $k$-Wise Queries", "abstract": "several well - studied models of access to data samples, including statistical queries, local differential privacy operations and low - communication algorithms could rely automatically on queries that provide information about a function of a distributed single sample. ( for example, a statistical query ( sq ) gives an estimate of $ ex _ { x \\ math sim d } [ q ( x ) ] $ for detecting any choice of the query function $ q $ mapping $ x $ to the reals, where $ { d $ is an unknown data distribution over $ x $. ) ) yet - some data analysis algorithms rely on properties of functions that depend on multiple samples. such these algorithms would be naturally manually implemented using $ and k $ - wise queries each of { which point is specified by a function $ q $ mapping $ x ^ or k $ to the reals. hence it is slightly natural to ask whether algorithms using $ k $ - wise queries can solve learning problems more adequately efficiently and by sampling how much.", "histories": [["v1", "Tue, 28 Feb 2017 21:41:09 GMT  (35kb)", "http://arxiv.org/abs/1703.00066v1", "32 pages, Appeared in Innovations in Theoretical Computer Science (ITCS) 2017"]], "COMMENTS": "32 pages, Appeared in Innovations in Theoretical Computer Science (ITCS) 2017", "reviews": [], "SUBJECTS": "cs.LG cs.DS", "authors": ["vitaly feldman", "badih ghazi"], "accepted": false, "id": "1703.00066"}, "pdf": {"name": "1703.00066.pdf", "metadata": {"source": "CRF", "title": "On the Power of Learning from k-Wise Queries", "authors": ["Vitaly Feldman"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n70 3.\n00 06\n6v 1\n[ cs\n.L G\n] 2\n8 Fe\nBlum, Kalai, Wasserman [BKW03] showed that for any weak PAC learning problem over a fixed distribution, the complexity of learning with k-wise SQs is smaller than the (unary) SQ complexity by a factor of at most 2k. We show that for more general problems over distributions the picture is substantially richer. For every k, the complexity of distribution-independent PAC learning with k-wise queries can be exponentially larger than learning with (k + 1)-wise queries. We then give two approaches for simulating a k-wise query using unary queries. The first approach exploits the structure of the problem that needs to be solved. It generalizes and strengthens (exponentially) the results of Blum et al. [BKW03]. It allows us to derive strong lower bounds for learning DNF formulas and stochastic constraint satisfaction problems that hold against algorithms using k-wise queries. The second approach exploits the k-party communication complexity of the k-wise query function.\n\u2217Work done while at IBM Research - Almaden.\nContents"}, {"heading": "1 Introduction 3", "text": "1.1 Previous work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 1.2 Our results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4"}, {"heading": "2 Preliminaries 6", "text": "3 Separation of (k + 1)-wise from k-wise queries 7 3.1 Upper bound . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 3.2 Lower bound . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n3.2.1 Preliminaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 3.2.2 Proof of Lemma 3.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14"}, {"heading": "4 Reduction for flat distributions 16", "text": "4.1 Decision problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 4.2 General problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 4.3 Applications to solving CSPs and learning DNF . . . . . . . . . . . . . . . . . . . 21"}, {"heading": "5 Reduction for low-communication queries 22", "text": ""}, {"heading": "6 Corollaries for other models 24", "text": "6.1 k-local differential privacy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 6.2 k-wise b-bit sampling model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25"}, {"heading": "A Omitted proofs 28", "text": "A.1 Proof of Lemma 3.6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 A.2 Proof of Proposition 3.14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 A.3 Proof of Proposition 3.15 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 A.4 Proof of Proposition 3.16 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32"}, {"heading": "1 Introduction", "text": "In this paper, we consider several well-studied models of learning from i.i.d. samples that restrict the algorithm\u2019s access to samples to evaluation of functions of an individual sample. The primary model of interest is the statistical query model introduced by Kearns [Kea98] as a restriction of Valiant\u2019s PAC learning model [Val84]. The SQ model allows the learning algorithm to access the data only via statistical queries, which are estimates of the expectation of any function of labeled examples with respect to the input distribution D. More precisely, if the domain of the functions is Z, then a statistical query is specified by a function \u03c6 : Z \u00d7 {\u00b11} \u2192 [\u22121, 1] and by a tolerance parameter \u03c4 . Given \u03c6 and \u03c4 , the statistical query oracle returns a value v which satisfies |v \u2212 E(z,b)\u223cD[\u03c6(z, b)]| \u2264 \u03c4 .\nThe SQ model is known to be closely-related to several other models and concepts: linear statistical functionals [Was13], learning with a distance oracle [BIK90], approximate counting (or linear) queries extensively studied in differential privacy (e.g., [DN03, BDMN05, DMNS06, RR10]), local differential privacy [KLN+11], evolvability [Val09, Fel08], and algorithms that extract a small amount of information from each sample [BD98, FGR+12, FPV13, SVW16]. This allows to easily extend the discussion in the context of the SQ model to these related models and we will formally state several such corollaries.\nMost standard algorithmic approaches used in learning theory are known to be implementable using SQs (e.g., [BFKV98, DV04, BDMN05, CKL+07, FPV13, BF15, FGV15]) leading to numerous theoretical (e.g., [BBFM12, DDS15, DFH+15b]) and practical (e.g., [CKL+07, RSK+10, SLB+11, DFH+15a]) applications. SQ algorithms have also been recently studied outside the context of learning theory [FGR+12, FPV13, FGV15]. In this case we denote the domain of data samples by X .\nAnother reason for the study of SQ algorithms is that it is possible to prove informationtheoretic lower bounds on the complexity of any SQ algorithm that solves a given problem. Given that a large number of algorithmic approaches to problems defined over data sampled i.i.d. from some distribution can be implemented using statistical queries, this provides a strong and unconditional evidence of the problem\u2019s hardness. For a number of central problems in learning theory and complexity theory, unconditional lower bounds for SQ algorithms are known that closely match the known computational complexity upper bounds for those problems (e.g. [BFJ+94, FGR+12, FPV13, DSFT+15, DKS16]).\nA natural strengthening of the SQ model (and other related models) is to allow function over k-tuples of samples instead of a single sample. That is, for a k-ary query function \u03c6 : Xk \u2192 [\u22121, 1], the algorithm can obtain an estimate of Ex1,...,xk\u223cD[\u03c6(x1, . . . , xk)]. It can be seen as interpolating between the power of algorithms that can see all the samples at once and those that process a single sample at a time. While most algorithms can be implemented using standard unary queries, some algorithms are known to require such more powerful queries. The most well-known example is Gaussian elimination over Fn2 that is used for learning parity functions. Standard hardness amplification techniques rely on mapping examples of a function f(z) to examples of a function g(f(z1), . . . , f(zk)) (for example [BL93, FLS11]). Implementing such reduction requires k-wise queries and, consequently, to obtain a lower bound for solving an amplified problem with unary queries one needs a lower bound against solving the original problem with k-wise queries. A simple example of 2-wise statistical query is collision probability Prx1,x2\u223cD[x1 = x2] that is used in several distribution property testing algorithms."}, {"heading": "1.1 Previous work", "text": "Blum, Kalai and Wasserman [BKW03] introduced and studied the power of k-wise SQs in the context of weak distribution-specific PAC learning: that is the learning algorithm observes pairs (z, b), where z is chosen randomly from some fixed and known distribution P over Z and b = f(z) for some unknown function f from a class of functions C. They showed that if a class of functions\nC can be learned with error 1/2\u2212 \u03bb relative to distribution P using q k-wise SQs of tolerance \u03c4 then it can be learned with error max{1/2\u2212\u03bb, 1/2\u2212\u03c4/2k} using O(q \u00b72k) unary SQs of tolerance \u03c4/2k.\nMore recently, Steinhardt et al. [SVW16] considered k-wise queries in the b-bit sampling model in which for any query function \u03c6 : Xk \u2192 {0, 1}b an algorithm get the value \u03c6(x1, . . . , xk) for x1, . . . , xk drawn randomly and independently from D (it is referred to as one-way communication model in their work). They give a general technique for proving lower bounds on the number of such queries that are required to solve a given problem."}, {"heading": "1.2 Our results", "text": "In this work, we study the relationship between the power of k-wise queries and unary queries for arbitrary problems in which the input is determined by some unknown input distribution D that belongs a (known) family of distributions D over domain X .\nSeparation for distribution-independent learning: We first demonstrate that for distribution-independent PAC learning (k + 1)-wise queries are exponentially stronger than kwise queries. We say that the k-wise SQ complexity of a certain problem is m if m is the smallest such that there exists an algorithm that solves the problem using m k-wise SQs of tolerance 1/m.\nTheorem 1.1. (Informal) For every positive integer k and any prime number p, there is a concept class C of Boolean functions defined over a domain of size pk+1 such that the (k + 1)- wise SQ complexity of distribution-independent PAC learning C with is Ok(log p) whereas the k-wise SQ complexity of distribution-independent PAC learning of C is \u2126k(p1/4).\nThe class of functions we use consists of all indicator functions of k-dimensional affine subspaces of Fk+1p . Our lower bound is a generalization of the lower bound for unary SQs in [Fel16b] (that corresponds to k = 1 case of the lower bound). A simple but important observation that allows us to easily adapt the techniques from earlier works on SQs to the k-wise case is that a k-wise SQ for an input distribution D \u2208 D are equivalent to unary SQ for a product distribution Dk.\nThe upper bound relies on the ability to find the affine subspace given k+1 positively labeled and linearly independent points in Fk+1p . Unfortunately, for general distributions the probability of observing such a set of points can be arbitrarily small. Nevertheless, we argue that there will exist a unique lower-dimensional affine subspace that contains enough probability mass of all the positive points in this case. This upper bound essentially implies that given k-wise queries one can solve problems that require Gaussian elimination over a system of k equations.\nReduction for flat D: The separation in Theorem 1.1 relies on using an unrestricted class of distributions D. We now prove that if D is \u201cflat\u201d relative to some \u201ccentral\u201d distribution D\u0304 then one can upper bound the power of k-wise queries in terms of unary queries.\nDefinition 1.2 (Flat class of distributions). Let D be a set of distributions over X, and D\u0304 a distribution over X. For \u03b3 \u2265 1 we say that D is \u03b3-flat if there exists some distribution D\u0304 over X such that for all D \u2208 D and all measurable subsets E \u2286 X, we have that Prx\u223cD[x \u2208 E] \u2264 \u03b3 \u00b7 Prx\u223cD\u0304[x \u2208 E].\nWe now state our upper bound for flat classes of distributions, where we use STAT (k) D (\u03c4) to\nrefer to the oracle that answers k-wise SQs for D with tolerance \u03c4 .\nTheorem 1.3. Let \u03b3 \u2265 1, \u03c4 > 0 and k be any positive integer. Let X be a domain and D a \u03b3-flat class of distributions over X. There exists a randomized algorithm that given any \u03b4 > 0\nand a k-ary function \u03c6 : Xk \u2192 [\u22121, 1] estimates Dk[\u03c6] within \u03c4 for every (unknown) D \u2208 D with success probability at least 1\u2212 \u03b4 using\nO\u0303\n( \u03b3k\u22121 \u00b7 k3\n\u03c43 \u00b7 log(1/\u03b4)\n)\nqueries to STAT (1) D (\u03c4/(6 \u00b7 k)).\nTo prove this result, we use a recent general characterization of SQ complexity [Fel16b]. This characterization reduces the problem of estimating Dk[\u03c6] to the problem of distinguishing between Dk and Dk1 for every D \u2208 D and some fixed D1. We show that when solving this problem, any k-wise query can be replaced by a randomly chosen set of unary queries. Finding these queries requires drawing samples from Dk\u22121. As we do not know D, we use D\u0304 instead incurring the \u03b3k\u22121 overhead in sampling. In Section 4 we show that weaker notions of \u201cflatness\u201d based on different notions of divergence between distributions can also be used in this reduction.\nIt is easy to see that, when PAC learning C with respect to a fixed distribution P over Z, the set of input distributions is 2-flat (relative to the distribution that is equal to P on Z and gives equal weight 1/2 to each label). Therefore, our result generalizes the results in [BKW03]. More importantly, the tolerance in our upper bound scales linearly with k rather than exponentially (namely, \u03c4/2k).\nThis result can be used to obtain lower bounds against k-wise SQs algorithms from lower bounds against unary SQ algorithms. In particular, it can be used to rule out reductions that require looking at k points of the original problem instance to obtain each point of the new problem instance. As an application, we obtain exponential lower bounds for solving constraint stochastic satisfaction problems and DNF learning by k-wise SQ algorithm with k = n1\u2212\u03b1 for any constant \u03b1 > 0 from lower bounds for CSPs given in [FPV13]. We state the result for learning DNF here. Definitions and the lower bound for CSPs can be found in Section 4.3.\nTheorem 1.4. For any constant \u03b1 > 0 (independent of n), there exists a constant \u03b2 > 0 such that any algorithm that learns DNF formulas of size n with error < 1/2\u2212 n\u2212\u03b2 logn and success probability at least 2/3 requires at least 2n 1\u2212\u03b1\ncalls to STAT (n1\u2212\u03b1) D (n \u2212\u03b2 logn).\nThis lower bound is based on a simple and direct reduction from solving the stochastic CSP that arises in Goldreich\u2019s proposed PRG [Gol00] to learning DNF that is of independent interest (see Lemma 4.18). For comparison, the standard SQ lower bound for learning polynomial size DNF [BFJ+94] relies on hardness of learning parities of size logn over the uniform distribution. Yet, parities of size logn can be easily learned from (log2 n)-wise statistical queries (since solving a system of log2 n linear equations will uniquely identify a logn-sparse parity function). Hence our lower bound holds against qualitatively stronger algorithms. Our lower bound is also exponential in the number of queries whereas the known argument implies only a quasipolynomial lower bound1.\nReduction for low-communication queries: Finally, we point out that k-wise queries that require little information about each of the inputs can also be simulated using unary queries. This result is a simple corollary of the recent work of Steinhardt et al. [SVW16] who show that any computation that extracts at most b bits from each of the samples (not necessarily at once) can be simulated using unary SQs.\nTheorem 1.5. Let \u03c6 : Xk \u2192 {\u00b11} be a function, and assume that \u03c6 has k-party public-coin randomized communication complexity of b bits per party with success probability 2/3. Then, there exists a randomized algorithm that, with probability at least 1 \u2212 \u03b4, estimates Ex\u223cDk [\u03c6(x)] within \u03c4 using O(b \u00b7 k \u00b7 log(1/\u03b4)/\u03c42) queries to STAT(1)D (\u03c4 \u2032) for some \u03c4 \u2032 = \u03c4O(b)/k.\n1We remark that an exponential lower bound on the number of queries has not been previously stated even for\nunary SQs. The unary version can be derived from known results as explained in Section 4.3.\nAs a simple application of Theorem 1.5, we show a unary SQ algorithm that estimates the\ncollision probability of an unknown distribution D within \u03c4 using 1/\u03c42 queries STAT (1) D (\u03c4 O(1)). The details appear in Section 5.\nCorollaries for related models: Our separation result and reductions imply similar results for k-wise versions of two well-studied learning models: local differential privacy and the b-bit sampling model.\nLocal differentially private algorithms [KLN+11] (also referred to as randomized response) are differentially private algorithms in which each sample goes through a differentially private transformation chosen by the analyst. This model is the focus of recent privacy preserving industrial applications by Google [EPK14] and Apple. We define a k-wise version of this model in which analyst\u2019s differentially private transformations are applied to k-tuples of samples. This model interpolates naturally between the usual (or global) differential privacy and the local model.\nKasiviswanathan et al. [KLN+11] showed that a concept class is learnable by a local differentially private algorithm if and only if it is learnable in the SQ model. Hence up to polynomial factors the models are equivalent (naturally, such polynomial factors are important for applications but here we focus only on the high-level relationships between the models). This result also implies that k-local differentially private algorithms (formally defined in Section 6.1) are equivalent to k-wise SQ algorithms (up to a polynomial blow-up in the complexity). Theorem 1.1 then implies an exponential separation between k-wise and (k + 1)-wise local differentially private algorithms (see Corollary 6.6 for details). It can be seen as a substantial strengthening of a separation between the local model and the global one also given in [KLN+11]. The reductions in Theorem 1.3 and Theorem 1.5 imply two approaches for simulating k-local differentially private algorithms using 1-local algorithms.\nThe SQ model is also known to be equivalent (up to a factor polynomial in 2b) to the b-bit sampling model introduced by Ben-David and Dichterman [BD98] and studied more recently in [FGR+12, FPV13, ZDJW13, SD15, SVW16]. Lower bounds for the k-wise version of this model are given in [ZDJW13, SVW16]. Our results can be easily translated to this model as well. We provide additional details in Section 6."}, {"heading": "2 Preliminaries", "text": "For any distribution D over a domain X and any positive integer k, we denote by Dk the distribution over Xk obtained by drawing k i.i.d. samples from D. For a distribution D over a domain X and a function \u03c6 : X \u2192 R, we denote D[\u03c6] .= Ex\u223cD[\u03c6(x)].\nNext, we formally define the k-wise SQ oracle.\nDefinition 2.1. Let D be a distribution over a domain X and \u03c4 > 0. A k-wise statistical query oracle STAT (k) D (\u03c4) is an oracle that given as input any function \u03c6 : X\nk \u2192 [\u22121,+1], returns some value v such that |v \u2212 Ex\u223cDk [\u03c6(x)]| \u2264 \u03c4 .\nWe say that a k-wise SQ algorithm is given access to STAT(k)(\u03c4), if for every when the algorithm is given access to STAT (k) D (\u03c4), where D is the input distribution. We note that for k = 1, Definition 2.1 reduces to the usual definition of an SQ oracle that was first introduced by Kearns [Kea98]. The k-wise SQ complexity of solving a problem with access to STAT(k)(\u03c4) is the minimum number of queries q for which exists a k-wise SQ algorithm with access to STAT(k)(\u03c4) that solves the problem using at most q queries. Our discussion and results can also be easily extended to the stronger VSTAT oracle defined in [FGR+12] and to more general real-valued queries using the reductions in [Fel16a].\nThe PAC learning [Val84] is defined as follows.\nDefinition 2.2. For a class C of Boolean-valued functions over a domain Z, a PAC learning algorithm for C is an algorithm that for every P distribution over Z and f \u2208 C, given an error parameter \u01eb > 0, failure probability \u03b4 > 0 and access to i.i.d. labeled examples of the form (x, f(x)) where x \u223c P , outputs a hypothesis function h that, with probability at least 1 \u2212 \u03b4, satisfies Prx\u223cP [h(x) 6= f(x)] \u2264 \u01eb.\nWe next define one-vs-many decision problems, which will be used in the proofs in our Section 3 and Section 4.\nDefinition 2.3 (Decision problem B(D, D0)). Let D be a set of distributions and D0 a reference distribution over a set X. We denote by B(D, D0) the decision problem where we are given access to a distribution D \u2208 D \u222a {D0} and wish to distinguish whether D \u2208 D or D = D0.\n3 Separation of (k + 1)-wise from k-wise queries\nWe start by describing the concept class C that we use to prove Theorem 1.1. Let \u2113 and k be positive integers with \u2113 \u2265 k + 1. The domain will be F\u2113p. For every a = (a1, . . . , a\u2113) \u2208 F\u2113p, we consider the hyperplane\nHypa . = {z = (z1, . . . , z\u2113) \u2208 F\u2113p : z\u2113 = a1z1 + \u00b7 \u00b7 \u00b7+ a\u2113\u22121z\u2113\u22121 + a\u2113}.\nWe then define the Boolean-valued function fa : F \u2113 p \u2192 {\u00b11} to be the indicator function of the subset Hypa \u2286 F\u2113p, i.e., for every z \u2208 F\u2113p,\nfa(z) = { +1 if z \u2208 Hypa, \u22121 otherwise.\nThen, we will consider the concept classes C\u2113 .= {fa : a \u2208 F\u2113p}. We denote C . = Ck+1. We start by stating our upper bound on the (k + 1)-wise SQ complexity of the distribution-independent PAC learning of Ck+1. Lemma 3.1 ((k + 1)-wise upper bound). Let p be a prime number and k be a positive integer. There exists a distribution-independent PAC learning algorithm for Ck+1 that makes at most t \u00b7 log(1/\u01eb) queries to STAT(k+1)(\u01eb/t), for some t = Ok(log p).\nWe next state our lower bound on the k-wise SQ complexity of the same tasks considered in Lemma 3.1.\nLemma 3.2 (k-wise lower bound). Let p be a prime number and \u2113, k be positive integers with \u2113 \u2265 k + 1 and k = O(p). There exists t = \u2126 ( p(\u2113\u2212k)/4 ) such that any distribution-independent PAC learning alogrithm for C\u2113 with error at most 1/2\u2212 2/t that is given access to STAT(k)(1/t) needs at least t queries.\nNote that Lemma 3.1 and Lemma 3.2 imply Theorem 1.1."}, {"heading": "3.1 Upper bound", "text": "Notation We first introduce some notation that will be useful in the description of our algorithm. For any matrix M with entries in the finite field Fp, we denote by rk(M) the rank of M over Fp. Let (a1, . . . , ak+1) \u2208 Fk+1p be the unknown vector that defines fa and P be the unknown distribution over tuples (z1, . . . , zk+1) \u2208 Fk+1p .\nNote that Hypa is an affine subspace of F k+1 p . To simplify our treatment of affine subspaces, we embed the points of Fk+1p into F k+2 p by mapping each z \u2208 Fk+1p to (z, 1). This embedding maps every affine subspace V of Fk+1p to a linear subspace W of F k+2 p , namely the span of the\nimage of V under our embedding. Note that this mapping is one-to-one and allows us to easily recover V from W as V = {z \u2208 Fk+1p | (z, 1) \u2208 W}. Hence given k + 1 examples\n( (z1,1, . . . , z1,k+1), b1 ) , ( (z2,1, . . . , z2,k+1), b2 ) , . . . , ( (zk+1,1, . . . , zk+1,k+1), bk+1 )\nwe define the matrix:\nZ . =   z1,1 z1,2 \u00b7 z1,k+1 1 z2,1 z2,2 \u00b7 z2,k+1 1 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7\nzk+1,1 zk+1,2 \u00b7 zk+1,k+1 1\n  . (1)\nFor \u2113 \u2208 [k + 1] we also denote by Z\u2113 the matrix that consists of the top \u2113 rows of Z. Further, for a (k + 1)-wise query function \u03c6 ( (z1, b1), . . . , (zk+1, bk+1) ) , we use Z to refer to the matrix obtained from the inputs to the function. Let Q be the distribution defined by sampling a random example ( (z1, . . . , zk+1), b ) , conditioning on the event that b = 1 and outputting (z1, . . . , zk+1, 1). Note that if the examples from which Z is built are positively labeled i.i.d. examples then each row of Z is sampled i.i.d. from Q and hence Z\u2113 is distributed according to Q\n\u2113. We denote by 1k+1 the all +1\u2019s vector of length k + 1.\nLearning algorithm We start by explaining the main ideas behind the algorithm. On a high level, in order to be able to use (k + 1)-wise SQs to learn the unknown subspace, we need to make sure that there exists an affine subspace that contains most of the probability mass of the positively-labeled points and that is spanned by k + 1 random positively-labeled points with noticeable probability. Here, the probability is with respect to the unknown distribution over labeled examples. Thus, for positively labeled tuples (z1,1, . . . , z1,k+1), (z2,1, . . . , z2,k+1), . . . , (zk+1,1, . . . , zk+1,k+1), we consider the (k + 1)\u00d7 (k + 2) matrix Z defined in Equation (1). If W is the row-span of Z, then the desired (unknown) affine subspace is the set V of all points (z1, . . . , zk+1) such that (z1, . . . , zk+1, 1) \u2208 W .\nIf the (unknown) distribution over labeled examples is such that with noticeable probability, k + 1 random positively-labeled points form a full-rank linear system (i.e., the matrix Z has full-rank with noticeable probability conditioned on (b1, . . . , bk+1) = 1\nk+1), we can use (k + 1)- wise SQs to find, one bit at a time, the (k + 1)-dimensional row-span W of Z, and we can then output the set V of all points (z1, . . . , zk+1) such that (z1, . . . , zk+1, 1) \u2208 W as the desired affine subspace (below, we refer to this step as the Recovery Procedure).\nWe now turn to the (more challenging) case where the system is not full-rank with noticeable probability (i.e., the matrix Z is rank-deficient with high probability conditioned on (b1, . . . , bk+1) = 1\nk+1). Then, the system has rank at most i with high probability, for some i < k + 1. There is a large number of possible i-dimensional subspaces and therefore it is no longer clear that there exists a single i-dimensional subspace that contains most of the mass of the positively-labeled points. However, we demonstrate that for every i, if the rank of Z is at most i with sufficiently high probability, then there exists a fixed subspace W of dimension at most i that contains a large fraction of the probability under the row-distribution of Z (it turns out that if this subspace has rank equal to i, then it should be unique). We can then use (k+1)-wise SQs to output the affine subspace V consisting of all points (z1, . . . , zk+1) such that (z1, . . . , zk+1, 1) \u2208 W (via the Recovery Procedure).\nThe general description of the algorithm is given in Algorithm 1, and the Recovery Procedure (allowing the reconstruction of the affine subspace V ) is separately described in Algorithm 2. We denote the indicator function of event E by 1(E). Note that the statistical query corresponding to the event 1(E) gives an estimate of the probability of E.\nAlgorithm 1 (k + 1)-wise SQ Algorithm Inputs. k \u2208 N, error probability \u01eb > 0. Output. Function f : Fk+1p \u2192 {\u00b11}. 1: Set tolerance of each SQ to \u03c4 = (\u01eb/2c\u00b7(k+2))(k+1) k+3\n, where c > 0 is a large enough absolute constant.\n2: Define the threshold \u03c4i = 2 c\u00b7(k+2\u2212i) \u00b7 k \u00b7 \u03c41/(k+1)k+2\u2212i for every i \u2208 [k + 1]. 3: Ask the SQ \u03c6(z, b) . = 1(b = 1) and let w be the response. 4: if w \u2264 \u01eb\u2212 \u03c4 then 5: Output the all \u22121\u2019s function. 6: end if 7: Let \u03c6\u0303 ( (z1, b1), . . . , (zk+1, bk+1) ) . = 1((b1, . . . , bk+1) = 1 k+1).\n8: Ask the SQ \u03c6\u0303 and let v be the response. 9: for i = k + 1 down to 1 do\n10: Let \u03c6i ( (z1, b1), . . . , (zk+1, bk+1) ) . = 1((b1, . . . , bk+1) = 1\nk+1 and rk(Z) = i). 11: Ask the SQ \u03c6i and let vi be the response. 12: if vi/v \u2265 \u03c4i then 13: Run Recovery Algorithm on input (i, vi) and let V\u0302 be the subspace of F k+1 p it outputs. 14: Define function f : Fk+1p \u2192 {\u22121, 1} by: 15: f(z1, . . . , zk+1) = +1 if (z1, . . . , zk+1) \u2208 V\u0302 . 16: f(z1, . . . , zk+1) = \u22121 otherwise. 17: Return f . 18: end if\n19: end for\nAlgorithm 2 Recovery Procedure Input. Integer i \u2208 [k + 1]. Output. Subspace V\u0302 of Fk+1p of dimension i.\n1: Let mi = (k + 2) \u00b7 i \u00b7 \u2308log p\u2309 2: for each bit j \u2264 mi do 3: Define event Ej(Z) = 1(bit j of row span of Z is 1). 4: Let \u03c6i,j ( (z1, b1), . . . , (zk+1, bk+1) ) . = 1(Ej(Z) and (b1, . . . , bk+1) = 1\nk+1 and rk(Z) = i). 5: Ask the SQ \u03c6i,j and let ui,j be the response. 6: if ui,j/vi \u2265 (9/10) then 7: Set bit j in binary representation of W\u0302 to 1. 8: else\n9: Set bit j in binary representation of W\u0302 to 0. 10: end if\n11: end for 12: Let V\u0302 be the set all points (z1, . . . , zk+1) such that (z1, . . . , zk+1, 1) \u2208 W\u0302 .\nAnalysis We now turn to the analysis of Algorithm 1 and the proof of Lemma 3.1. We will need the following lemma, which shows that if the rank of Z is at most i with high probability, then there is a fixed subspace of dimension at most i containing most of the probability mass\nunder the row-distribution of Z.\nLemma 3.3. Let i \u2208 [k + 1]. If PrQk+1 [rk(Z) \u2264 i] \u2265 1 \u2212 \u03be, then there exists a subspace W of F k+2 p of dimension at most i such that Prz\u223cQ[z /\u2208 W ] \u2264 \u03be1/k.\nRemark 3.4. We point out that the exponential dependence on 1/k in the probability upper bound in Lemma 3.3 is tight. To see this, let p = 2, and {e1, . . . , ek} be the standard basis in Fk2. Consider the base distribution P on Fk2 that puts probability mass 1 \u2212 \u03b1 on e1, and probability mass \u03b1/(k \u2212 1) on each of e2, e3, . . . , ek. Then, a Chernoff bound implies that if we draw k i.i.d. samples from P , then the dimension of their span is at most 2 \u00b7 \u03b1 \u00b7 k with probability at least 1 \u2212 exp(\u2212k). On the other hand, for any subspace W of Fk2 of dimension 2 \u00b7 \u03b1 \u00b7 k, the probability that a random sample from P lies inside W is only 1\u2212\u0398(\u03b1).\nTo prove Lemma 3.3, we will use the following proposition.\nProposition 3.5. Let \u2113 \u2208 [k+1], i \u2208 [\u2113\u22121] and \u03b7 > 0. If PrQ\u2113 [rk(Z\u2113) \u2264 i] \u2265 1\u2212\u03b7, then for every \u03bd \u2208 (0, 1], either there exists a subspace W of Fk+2p of dimension i such that Prz\u223cQ[z /\u2208 W ] \u2264 \u03bd or PrQi [rk(Zi) \u2264 i\u2212 1] \u2265 1\u2212 \u03b7/\u03bd.\nProof. Let p . = PrQi [rk(Zi) \u2264 i\u2212 1]. For every (fixed) matrix Ai \u2208 Fi\u00d7(k+2)p , define\n\u00b5(Ai) . = Pr\nQ\u2113 [rk(Z\u2113) \u2264 i | Zi = Ai].\nThen,\nPr Q\u2113 [rk(Z\u2113) \u2264 i] = p+ (1\u2212 p) \u00b7 Pr Q\u2113 [rk(Z\u2113) \u2264 i | rk(Zi) = i]\n= p+ (1\u2212 p) \u00b7 EQi [ \u00b5(Zi) \u2223\u2223\u2223\u2223 rk(Zi) = i ] .\nSince PrQ\u2113 [rk(Z\u2113) \u2264 i] \u2265 1\u2212 \u03b7, we have that\nEQi [ \u00b5(Zi) \u2223\u2223\u2223\u2223 rk(Zi) = i ] \u2265 1\u2212 \u03b7/(1\u2212 p).\nHence, there exists a setting Ai \u2208 Fi\u00d7(k+2)p of Zi such that rk(Ai) = i and\nPr[rk(Z\u2113) \u2264 i | Zi = Ai] \u2265 1\u2212 \u03b7/(1\u2212 p).\nWe let W be the Fp-span of the rows of Ai. Note that the dimension of W is equal to i and that Prz\u223cQ[z /\u2208 W ] \u2264 \u03b7/(1\u2212 p). Thus, we conclude that for every \u03bd \u2208 (0, 1], either p \u2265 1\u2212 \u03b7/\u03bd or Prz\u223cQ[z /\u2208 W ] \u2264 \u03bd, as desired.\nWe now complete the proof of Lemma 3.3.\nProof of Lemma 3.3. Starting with \u2113 = k + 1 and \u03b7 = \u03be, we inductively apply Proposition 3.5 with \u03bd = \u03be1/k until we either get the desired subspace W or we get to the case where i = 1. In this case, we have that PrQ\u2113 [rk(Z\u2113) \u2264 1] \u2265 1\u2212 \u03be1/k for \u2113 \u2265 2. Since the last column of Z\u2113 is the all 1\u2019s vector, we conclude that there exists z\u2217 \u2208 Fk+1p such that Prz\u223cQ[z 6= (z\u2217, 1)] \u2264 \u03be1/k. We can then set our subspace W to be the Fp-span of the vector (z \u2217, 1).\nFor the proof of Lemma 3.1 we will also need the following lemma, which states sufficient conditions under which the Recovery Procedure (Algorithm 2) succeeds.\nLemma 3.6. Let i \u2208 [k + 1]. Assume that in Algorithm 1, v > \u01ebk+1/2 and vi/v \u2265 \u03c4i. If there exists a subspace W of Fk+2p of dimension equal to i such that\nPr z\u223cQ [z /\u2208 W ] < \u03c4i 4 \u00b7 (k + 1) , (2)\nthen the affine subspace V\u0302 output by Algorithm 2 (i.e., the Recovery Procedure) consists of all points (z1, . . . , zk+1) such that (z1, . . . , zk+1, 1) \u2208 W .\nWe note that Lemma 3.6 would still hold under quantitatively weaker assumptions on v, vi/v and Prz\u223cQ[z /\u2208 W ] in Equation (2). In order to keep the expressions simple, we however choose to state the above version which will be sufficient to prove Lemma 3.1. The proof of Lemma 3.6 appears in Appendix A.1. We are now ready to complete the proof of Lemma 3.1.\nProof of Lemma 3.1. If Algorithm 1 terminates at Step 5, then the error of the output hypothesis is at most \u01eb, as desired. Henceforth, we assume that Algorithm 1 does not terminate at Step 5. Then, we have that Pr[b = 1] > \u01eb, and hence Pr[(b1, . . . , bk+1) = 1\nk+1] > \u01ebk+1. Thus, the value v obtained in Step 8 of Algorithm 1 satisfies v > \u01ebk+1 \u2212 \u03c4 \u2265 \u01ebk+1/2, where the last inequality follows from the setting of \u03c4 . Let i\u2217 be the first (i.e., largest) value of i \u2208 [k + 1] for which vi/v \u2265 \u03c4i. To prove that such an i\u2217 exists, we proceed by contradiction, and assume that for all i \u2208 [k+1], it is the case that vi/v < \u03c4i. Note that Z has an all 1\u2019s column, so it has rank at least 1. Moreover, it has rank at most k + 1. Therefore, we have that\n1 = Pr[1 \u2264 rk(Z) \u2264 k + 1 | (b1, . . . , bk+1) = 1k+1]\n=\nk+1\u2211\ni=1\nPr[rk(Z) = i | (b1, . . . , bk+1) = 1k+1]\n\u2264 k+1\u2211\ni=1\nvi + \u03c4 v \u2212 \u03c4\n\u2264 2 \u00b7 k+1\u2211\ni=1\nvi + \u03c4\nv\n\u2264 2 \u00b7 k+1\u2211\ni=1\n( vi v + 2\u03c4 \u01ebk+1 )\n< 2 \u00b7 k+1\u2211\ni=1\n\u03c4i + 4 \u00b7 (k + 1) \u00b7 \u03c4\n\u01ebk+1 .\nUsing the fact that \u03c4i is monotonically non-increasing in i and the settings of \u03c41 and \u03c4 , the last inequality gives\n1 \u2264 2 \u00b7 (k + 1) \u00b7 \u03c41 + 4 \u00b7 (k + 1) \u00b7 \u03c4\n\u01ebk+1 < 1,\na contradiction.\nWe now fix i\u2217 as above. We have that\nPr[rk(Z) \u2264 i\u2217 | (b1, . . . , bk+1) = 1k+1] = 1\u2212 k+1\u2211\ni=i\u2217+1\nPr[rk(Z) = i | (b1, . . . , bk+1) = 1k+1]\n\u2265 1\u2212 k+1\u2211\ni=i\u2217+1\nvi + \u03c4 v \u2212 \u03c4\n\u2265 1\u2212 2 \u00b7 k+1\u2211\ni=i\u2217+1\n( vi v + 2\u03c4 \u01ebk+1 )\n> 1\u2212 2 \u00b7 k+1\u2211\ni=i\u2217+1\n(\u03c4i + 2 \u00b7 \u03c4\n\u01ebk+1 )\n\u2265 1\u2212 4 \u00b7 k+1\u2211\ni=i\u2217+1\n\u03c4i\n\u2265 1\u2212 4 \u00b7 k \u00b7 \u03c4i\u2217+1.\nBy Lemma 3.3, there exists a subspace W of Fk+2p of dimension at most i \u2217 such that\nPr z\u223cQ\n[z /\u2208 W ] \u2264 (4 \u00b7 k)1/k \u00b7 \u03c41/ki\u2217+1. (3)\nProposition 3.7. For every i \u2208 [k], we have that (k + 1) \u00b7 (4 \u00b7 k)1/k \u00b7 \u03c41/ki+1 \u2264 \u03c4i/4. We note that Proposition 3.7 follows immediately from the definitions of \u03c4i and \u03c4 (and by letting c by a sufficiently large positive absolute constant). Moreover, Proposition 3.7 (applied with i = i\u2217) along with Equation (3) imply that Prz\u223cQ[z /\u2208 W ] is at most \u03c4i\u2217/(4(k + 1)).\nBy a union bound, we get that with probability at least\n1\u2212 (k + 1) \u00b7 Pr z\u223cQ [z /\u2208 W ] \u2265 1\u2212 \u03c4i\u2217 4 , (4)\nall the rows of Z belong to W . Since vi\u2217/v \u2265 \u03c4i\u2217, we also have that:\nPr[rk(Z) = i\u2217 | (b1, . . . , bk+1) = 1k+1] \u2265 vi\u2217 \u2212 \u03c4 v + \u03c4\n\u2265 1 2 \u00b7 (vi\u2217 \u2212 \u03c4) v \u2265 1 2 \u00b7 (\u03c4i\u2217 \u2212 2 \u00b7 \u03c4 \u01ebk+1 ) \u2265 \u03c4i\u2217 3\n(5)\nCombining Equation (4) and Equation (5), we get that the rank of W is equal to i\u2217. Let V be the affine subspace consisting of all points (z1, . . . , zk+1) such that (z1, . . . , zk+1, 1) \u2208 W . By Lemma 3.6, we get that Algorithm 2 (and hence Algorithm 1) correctly recovers the affine subspace V .\nWe note that the function f output by Algorithm 1 is the \u00b11 indicator of a subspace of the true hyperplane Hypa. To see this, note that f is the \u00b11 indicator function of the subspace V , and by Equations (3) and (5), we have that with probability at least \u03c4i\u2217/12 over Z \u223c Qk+1, all the columns of Z belong to W and rk(Z) = i\u2217. Since the dimension of W is equal to i\u2217 and since we are conditioning on (b1, . . . , bk+1) = 1 k+1, this implies that the correct label of all the\npoints in V is +1. Hence, f only possibly errs on positively-labeled points (by wrongly giving them the label \u22121). Moreover, Algorithm 1 ensures that the output function f gives the label +1 to every (z1, . . . , zk+1) \u2208 Fk+1p for which (z1, . . . , zk+1, 1) \u2208 W . Therefore, the function f that is output by Algorithm 1 (when it does not terminate at Step 5) has error at most the right hand side of (3). So to upper-bound the error probability, it suffices for us to verify that the right-hand side of (3) is at most \u01eb. This is obtained by applying the next proposition with i = i\u2217 + 1.\nProposition 3.8. For every i \u2208 [k + 1], we have that (4 \u00b7 k)1/k \u00b7 \u03c41/ki \u2264 \u01ebk. The proof of Proposition 3.8 follows immediately from the definitions of \u03c4i and \u03c4 and by letting c be a sufficiently large positive absolute constant. The number of queries performed by the (k+1)-wise algorithm is at most O(k2 \u00b7 log p), and their tolerance is \u03c4 \u2265 (\u01eb/2c\u00b7(k+2))(k+1)k+3 , where c is a positive absolute constant. Finally, we remark that the dependence of the SQ complexity of the above algorithm on the error parameter \u01eb is \u01eb\u2212k O(k)\n. It can be improved to a linear dependence on 1/\u01eb by learning with error 1/3 and then using boosting in the standard way (boosting in the SQ model works essentially as in the regular PAC model [AD93])."}, {"heading": "3.2 Lower bound", "text": "Our proof of lower bound is a generalization of the lower bound in [Fel16b] (for \u2113 = 2 and k = 1). It relies on a notion of combined randomized statistical dimension (\u201ccombined\u201d refers to the fact that it examines a single parameter that lower bounds both the number of queries and the inverse of the tolerance). In order to apply this approach we need to extend it to k-wise queries. This extension follows immediately from a simple observation. If we define the domain to be X \u2032 . = Xk and the input distribution to be D\u2032 . = Dk then asking a k-wise query \u03c6 : Xk \u2192 [\u22121, 1] to STAT (k) D (\u03c4) is equivalent to asking a unary query \u03c6 : X\n\u2032 \u2192 [\u22121, 1] to STAT(k)D\u2032 (\u03c4). Using this observation we define the k-wise versions of the notions from [Fel16b] and give their properties that are needed for the proof of Lemma 3.2."}, {"heading": "3.2.1 Preliminaries", "text": "Combined randomized statistical dimension is based on the following notion of average discrimination.\nDefinition 3.9 (k-wise average \u03ba1-discrimination). Let k be any positive integer. Let \u00b5 be a probability measure over distributions over X and D0 be a reference distribution over X. Then,\n\u03ba\u0304 (k) 1 (\u00b5,D0) . = sup\n\u03c6:Xk\u2192[\u22121,+1]\n{ ED\u223c\u00b5[|Dk[\u03c6]\u2212Dk0 [\u03c6]|] } .\nWe denote the problem of PAC learning a concept class C of Boolean functions up to error \u01eb by LPAC(C, \u01eb). Let Z be the domain of the Boolean functions in C. For any distribution D0 over labeled examples (i.e., over Z \u00d7 {\u00b11}), we define the Bayes error rate of D0 to be\nerr(D0) = \u2211\nz\u2208Z\nmin{D0(z, 1), D0(z,\u22121)} = min h:Z\u2192{\u00b11} Pr (z,b)\u223cD0 [h(z) 6= b].\nDefinition 3.10 (k-wise combined randomized statistical dimension). Let k be any positive integer. Let D be a set of distributions and D0 a reference distribution over X. The k-wise combined randomized statistical dimension of the decision problem B(D, D0) is then defined as\ncRSD (k) \u03ba\u03041 (B(D, D0)) . = sup\n\u00b5\u2208SD (\u03ba\u0304\n(k) 1 (\u00b5,D0)) \u22121,\nwhere SD denotes the set of all probability distributions over D. Further, for any concept class C of Boolean functions over a domain Z, and for any \u01eb > 0, the k-wise combined randomized statistical dimension of LPAC(C, \u01eb) is defined as\ncRSD (k) \u03ba\u03041 (LPAC(C, \u01eb)) . = sup\nD0\u2208SZ\u00d7{\u00b11}:err(D0)>\u01eb\ncRSD (k) \u03ba\u03041 (B(DC , D0)),\nwhere DC .= {P f : P \u2208 SZ , f \u2208 C} with P f denoting the distribution on labeled examples (x, f(x)) with x \u223c P .\nThe next theorem lower bounds the randomized k-wise SQ complexity of PAC learning a concept class in terms of its k-wise combined randomized statistical dimension.\nTheorem 3.11 ([Fel16b]). Let C be a concept class of Boolean functions over a domain Z, k be a positive integer and \u01eb, \u03b4 > 0. Let d . = cRSD\n(k) \u03ba\u03041 (LPAC(C, \u01eb)). Then, the randomized k-wise SQ\ncomplexity of solving LPAC(C, \u01eb \u2212 1/ \u221a d) with access to STAT(k)(1/ \u221a d) and success probability\n1\u2212 \u03b4 is at least (1\u2212 \u03b4) \u00b7 \u221a d\u2212 1.\nTo lower bound the statistical dimension we will use the following \u201caverage correlation\u201d parameter introduced in [FGR+12].\nDefinition 3.12 (k-wise average correlation). Let k be any positive integer. Let D be a set of distributions and D0 a reference distribution over X. Assume that the support of every distribution D \u2208 D is a subset of the support of D0. Then, for every x \u2208 Xk, define D\u0302(x) .= Dk(x) Dk0 (x) \u2212 1. Then, the k-wise average correlation is defined as\n\u03c1(k)(D, D0) .= 1 |D|2 \u00b7 \u2211\nD,D\u2032\u2208D\n|Dk0 [D\u0302 \u00b7 D\u0302\u2032]|.\nLemma 3.13 relates the average correlation to the average discrimination (from Definition 3.9).\nLemma 3.13 ([Fel16b]). Let k be any positive integer. Let D be a set of distributions and D0 a reference distribution over X. Let \u00b5 be the uniform distribution over D. Then,\n\u03ba\u0304 (k) 1 (\u00b5,D0) \u2264 4 \u00b7 \u221a \u03c1(k)(D, D0)."}, {"heading": "3.2.2 Proof of Lemma 3.2", "text": "Denote X . = F\u2113p \u00d7 {\u00b11}. Let D be the set of all distributions over Xk that are obtained by sampling from any given distribution over (F\u2113p) k and labeling the k samples according to any given hyperplane indicator function fa. Let D0 be the uniform distribution over X k. We now\nshow that cRSD\u03ba\u03041(B(D, D0)) = \u2126 ( p(\u2113\u2212k)/2 ) . By definition,\ncRSD\u03ba\u03041(B(D, D0)) . = sup\n\u00b5\u2208SD (\u03ba\u03041(\u00b5,D0))\n\u22121.\nWe now choose the distribution \u00b5. For a \u2208 F\u2113p, we define Pa to be the distribution over F\u2113p that has density \u03b1 = 1/(2(p\u2113 \u2212 p\u2113\u22121)) on each of the p\u2113 \u2212 p\u2113\u22121 points outside Hypa, and density \u03b2 = 1/p\u2113\u22121 \u2212\u03b1p+\u03b1 = 1/(2p\u2113\u22121) on each of the p\u2113\u22121 points inside Hypa. We then define Da to be the distribution obtained by sampling k i.i.d. random examples of Hypa, the marginal of each over F\u2113p being Pa. Let D\u2032 . = {Da | a \u2208 F\u2113p}, and let \u00b5 be the uniform distribution over D\u2032. By\nLemma 3.13, we have that \u03ba\u03041(\u00b5,D0) \u2264 4 \u00b7 \u221a \u03c1(D, D0), so it is enough to upper bound \u03c1(D, D0).\nWe first note that for a, a\u2032 \u2208 F\u2113p, we have\nD0[D\u0302a \u00b7 D\u0302a\u2032 ] = E(z,b)\u223cD0 [D\u0302a(z, b) \u00b7 D\u0302a\u2032(z, b)]\n= E(z,b)\u223cD0\n[( Da(z, b)\nD0(z, b) \u2212 1\n) \u00b7 ( Da\u2032(z, b)\nD0(z, b) \u2212 1\n)]\n= E(z,b)\u223cD0\n[ Da(z, b) \u00b7Da\u2032(z, b)\nD20(z, b) \u2212 Da(z, b) D0(z, b) \u2212 Da\u2032(z, b) D0(z, b) + 1\n]\n= E(z,b)\u223cD0\n[ Da(z, b) \u00b7Da\u2032(z, b)\nD20(z, b)\n] \u2212 2 \u00b7 E(z,b)\u223cD0 [ Da(z, b)\nD0(z, b)\n] + 1\n= 22k \u00b7 p2k\u2113 \u00b7 E(z,b)\u223cD0 [Da(z, b) \u00b7Da\u2032(z, b)]\u2212 2k+1 \u00b7 pk\u2113 \u00b7 E(z,b)\u223cD0 [Da(z, b)] + 1 We now compute each of the two expectations that appear in the last equation above.\nProposition 3.14. For every a \u2208 F\u2113p,\nE(z,b)\u223cD0 [Da(z, b)] = 1 2k \u00b7 ( 1 p \u00b7 \u03b2 + ( 1\u2212 1 p ) \u00b7 \u03b1 )k =\n1\n2k \u00b7 pk\u00b7\u2113 .\nThe proof of Proposition 3.14 appears in the appendix.\nProposition 3.15. For every a, a\u2032 \u2208 F\u2113p,\nE(z,b)\u223cD0 [Da(z, b) \u00b7Da\u2032(z, b)] =    1 2k \u00b7 ( 1p \u00b7 \u03b22 + (1\u2212 1p ) \u00b7 \u03b12)k if Hypa = Hypa\u2032 , 1 2k \u00b7 (\u03b12 \u00b7 (1\u2212 2p ))k if Hypa \u2229 Hypa\u2032 = \u2205, 1 2k \u00b7 ( \u03b22 p2 + \u03b1 2 \u00b7 (1\u2212 2p + 1p2 ))k otherwise.\nThe proof of Proposition 3.15 appears in the appendix. Using Proposition 3.14 and Proposition 3.15, we now compute D0[D\u0302a \u00b7 D\u0302a\u2032 ]. Proposition 3.16. For every a, a\u2032 \u2208 F\u2113p,\nD0[D\u0302a \u00b7 D\u0302a\u2032 ] =    (p+ 1\u2212 1p\u22121 )k \u2212 1 if Hypa = Hypa\u2032 , 1 2k \u00b7 (1\u2212 2 p )k (1\u2212 1 p )2k \u2212 1 if Hypa \u2229 Hypa\u2032 = \u2205,\n0 otherwise.\nThe proof of Proposition 3.16 appears in the appendix. When computing \u03c1(D, D0), we will also use the following simple proposition.\nProposition 3.17. 1. The number of pairs (a, a\u2032) \u2208 (F\u2113p)2 such that Hypa = Hypa\u2032 is equal to p\u2113.\n2. The number of pairs (a, a\u2032) \u2208 (F\u2113p)2 such that Hypa and Hypa\u2032 are distinct and parallel is equal to p\u2113 \u00b7 (p\u2212 1). 3. The number of pairs (a, a\u2032) \u2208 (F\u2113p)2 such that Hypa and Hypa\u2032 are distinct and intersecting is equal to p2\u00b7\u2113 \u2212 p\u2113+1.\nUsing Proposition 3.16 and Proposition 3.17, we are now ready to compute \u03c1(D, D0) as follows\n\u03c1(D, D0) \u2264 1 p2\u00b7\u2113 \u00b7 [ p\u2113 \u00b7 (p+ 1\u2212 1 p\u2212 1) k + p\u2113 \u00b7 (p\u2212 1) + p2\u00b7\u2113 \u00b7 0 ]\n\u2264 O ( 1\np\u2113\u2212k\n) + 1\np\u2113\u22121\n= O\n( 1\np\u2113\u2212k\n) ,\nwhere we used above the assumption that k = O(p). We deduce that \u03ba\u03041(\u00b5,D0) = O\n( 1/p(\u2113\u2212k)/2 ) ,\nand hence cRSD\u03ba\u03041(B(D, D0)) = \u2126 ( p(\u2113\u2212k)/2 ) . This lower bound on cRSD\u03ba\u03041(B(D, D0)), along\nwith Definition 3.10, Theorem 3.11 and the fact that D0 has Bayes error rate equal to 1/2, imply Lemma 3.2."}, {"heading": "4 Reduction for flat distributions", "text": "To prove Theorem 1.3 we use the characterization of the SQ complexity of the problem of estimating Dk[\u03c6] for D \u2208 D using a notion of statistical dimension from [Fel16b]. Specifically, we use the characterization of the complexity of solving this problem using unary SQs and also the generalization of this characterization that characterizes the complexity of solving a problem using k-wise SQs. The latter is equal to 1 (since a single k-wise SQ suffices to estimate Dk[\u03c6]). Hence the k-wise statistical dimension is also equal to 1. We then upper bound the unary statistical dimension by the k-wise statistical dimension. The characterization then implies that an upper bound on the unary statistical dimension gives an upper bound on the SQ complexity of estimating Dk[\u03c6].\nWe also give a slightly different way to define flatness that makes it easier to extend our results to other notions of divergence.\nDefinition 4.1. Let D be a set of distributions over X. Define R\u221e(D) .= inf\nD\u0304\u2208SX sup D\u2208D\nD\u221e(D\u2016D\u0304),\nwhere SX denotes the set of all probability distributions over X and\nD\u221e(D\u2016D\u0304) .= sup y\u2208X ln Prx\u223cD[x = y] Prx\u223cD\u0304[x = y]\ndenotes the max-divergence. We say that D is \u03b3-flat if R\u221e(D) \u2264 ln \u03b3. For simplicity, we will start by relating the k-wise SQ complexity to unary SQ complexity for decision problems. The statistical dimension for this type of problems is substantially simpler than for the general problems but is sufficient to demonstrate the reduction. We then build on the results for decision problems to obtain the proof of Theorem 1.3."}, {"heading": "4.1 Decision problems", "text": "The k-wise generalization of the statistical dimension for decision problems from [Fel16b] is defined as follows.\nDefinition 4.2. Let k be any positive integer. Consider a set of distributions D and a reference distribution D0 over X. Let \u00b5 be a probability measure over D and let \u03c4 > 0. The k-wise maximum covered \u00b5-fraction is defined as\n\u03ba1-frac (k)(\u00b5,D0, \u03c4) . = sup\n\u03c6:Xk\u2192[\u22121,+1]\n{ Pr\nD\u223c\u00b5 [|Dk[\u03c6]\u2212Dk0 [\u03c6]| > \u03c4 ]\n} .\nDefinition 4.3 (k-wise randomized statistical dimension of decision problems). Let k be any positive integer. For any set of distributions D, a reference distribution D0 over X and \u03c4 > 0, we define\nRSD(k)\u03ba1 (B(D, D0), \u03c4) . = sup\n\u00b5\u2208SD (\u03ba1-frac\n(k)(\u00b5,D0, \u03c4)) \u22121,\nwhere SD denotes the set of all probability distributions over D.\nAs shown in [Fel16b], RSD tightly characterizes the randomized statistical query complexity of solving the problem using k-wise queries. As observed before, the k-wise versions below are implied by the unary version in [Fel16b] simply by defining the domain to be X \u2032 . = Xk and the set of input distributions to be D\u2032 .= {Dk | D \u2208 D}. Theorem 4.4 ([Fel16b]). Let B(D, D0) be a decision problem, \u03c4 > 0, \u03b4 \u2208 (0, 1/2), k \u2208 N and d = RSD(k)\u03ba1 (B(D, D0), \u03c4). Then there exists a randomized algorithm that solves B(D, D0) with success probability \u2265 1\u2212 \u03b4 using d \u00b7 ln(1/\u03b4) queries to STAT(k)D (\u03c4/2). Conversely, any algorithm that solves B(D, D0) with success probability \u2265 1 \u2212 \u03b4 requires at least d \u00b7 (1 \u2212 2\u03b4) queries to STAT\n(k) D (\u03c4).\nWe will also need the following dual formulation of the statistical dimension given in Theorem 4.3.\nLemma 4.5 ([Fel16b]). Let k be any positive integer. For any set of distributions D, a reference distribution D0 over X and \u03c4 > 0, the statistical dimension RSD (k) \u03ba1 (B(D, D0), \u03c4) is equal to the smallest d for which there exists a distribution P over functions from Xk to [\u22121,+1] such that for every D \u2208 D,\nPr \u03c6\u223cP\n[|Dk[\u03c6]\u2212Dk0 [\u03c6]| > \u03c4 ] \u2265 1\nd .\nWe can now state the relationship between RSD(k)\u03ba1 and RSD (1) \u03ba1 for any \u03b3-flat D.\nLemma 4.6. Let \u03b3 \u2265 1, \u03c4 > 0 and k \u2208 N. Let X be a domain, D be a \u03b3-flat class of distributions over X and D0 be any distribution over X. Then\nRSD(1)\u03ba1 (B(D, D0), \u03c4/(2k)) \u2264 4k \u00b7 \u03b3k\u22121\n\u03c4 \u00b7 RSD(k)\u03ba1 (B(D, D0), \u03c4).\nProof. Let d . = RSD(k)\u03ba1 (B(D, D0), \u03c4). Fact 4.5 implies the existence of a distribution P over k-wise functions such that for every D \u2208 D,\nPr \u03c6\u223cP\n[|Dk[\u03c6]\u2212Dk0 [\u03c6]| > \u03c4 ] \u2265 1\nd .\nWe now fix D and let \u03c6 be such that |Dk[\u03c6]\u2212Dk0 [\u03c6]| > \u03c4 . By the standard hybrid argument,\nEj\u223c[k] [\u2223\u2223\u2223DjDk\u2212j0 [\u03c6]\u2212Dj\u22121Dk\u2212j+10 [\u03c6] \u2223\u2223\u2223 ] > \u03c4\nk , (6)\nwhere j \u223c [k] denotes a random and uniform choice of j from [k]. This implies that\nEj\u223c[k]Ex<j\u223cDj\u22121Ex>j\u223cD k\u2212j 0\n[\u2223\u2223\u2223\u2223D[\u03c6(x<j , \u00b7, x>j)]\u2212D0[\u03c6(x<j , \u00b7, x>j)] \u2223\u2223\u2223\u2223 ] > \u03c4\nk .\nBy an averaging argument (and using the fact that \u03c6 takes values between \u22121 and +1), we get that with probability at least \u03c4/(4 \u00b7 k) over the choice of j \u223c [k], x<j \u223c Dj\u22121 and x>j \u223c Dk\u2212j0 , we have that \u2223\u2223\u2223\u2223D[\u03c6(x<j , \u00b7, x>j)]\u2212D0[\u03c6(x<j , \u00b7, x>j)] \u2223\u2223\u2223\u2223 > \u03c4\n2 \u00b7 k .\nSince D is a \u03b3-flat class of distributions, there exists a (fixed) distribution D\u0304 over X such that for every measurable event E \u2282 X , Prx\u223cD[x \u2208 E] \u2264 \u03b3 \u00b7 Prx\u223cD\u0304[x \u2208 E]. Thus, we can replace the unknown input distribution D by the distribution D\u0304 and get that, with probability at least \u03c4/(4 \u00b7 k \u00b7 \u03b3k\u22121) over the choice of j \u223c [k], x<j \u223c D\u0304j\u22121 and x>j \u223c Dk\u2212j0 , we have\n\u2223\u2223\u2223\u2223D[\u03c6(x<j , \u00b7, x>j)]\u2212D0[\u03c6(x<j , \u00b7, x>j)] \u2223\u2223\u2223\u2223 > \u03c4\n2 \u00b7 k . (7)\nWe now consider the following distribution P \u2032 over unary SQ functions (i.e., over [\u22121,+1]X): Independently sample \u03c6 from P , j uniformly from [k], x<j \u223c D\u0304j\u22121 and x>j \u223c Dk\u2212j0 , and output the (unary) function \u03c6\u2032(x) = \u03c6(x<j , x, x>j). Then, for every D \u2208 D, we have that with probability at least 1d \u00b7 \u03c44k \u00b7 1\u03b3k\u22121 over the choice of \u03c6\u2032 from P \u2032, we have that |D[\u03c6\u2032]\u2212D0[\u03c6\u2032]| > \u03c4/(2 \u00b7 k). Thus, by Fact 4.5\nRSD(1)\u03ba1 ( B(D, D0), \u03c4 2 \u00b7 k ) \u2264 4d \u00b7 \u03b3 k\u22121 \u00b7 k \u03c4 .\nLemma 4.6 together with the characterization in Theorem 4.4 imply the following upper bound on the SQ complexity of a decision problem in terms of its k-wise SQ complexity.\nTheorem 4.7. Let \u03b3 \u2265 1, \u03c4 > 0 and k \u2208 N. Let X be a domain, D be a \u03b3-flat class of distributions over X and D0 be any distribution over X. If there exists an algorithm that, with probability at least 2/3 solves B(D, D0) using t queries to STAT(k)D (\u03c4), then for every \u03b4 > 0, there exists an algorithm that, with probability at least 1\u2212\u03b4 solves B(D, D0) using t\u00b712k\u00b7\u03b3k\u22121\u00b7ln(1/\u03b4)/\u03c4 queries to STAT\n(1) D (\u03c4/(4k))."}, {"heading": "4.2 General problems", "text": "We now define the general class of problems over sets of distributions and a notion of statistical dimension for these types of problems.\nDefinition 4.8 (Search problems). A search problem Z over a class D of distributions and a set F of solutions is a mapping Z : D \u2192 2F \\ {\u2205}, where 2F denotes the set of all subsets of F . Specifically, for every distribution D \u2208 D, Z(D) \u2286 F is the (non-empty) set of valid solutions for D. For a solution f \u2208 F , we denote by Zf the set of all distributions for which f is a valid solution.\nDefinition 4.9 (Statistical dimension for search problems [Fel16b]). For \u03c4 > 0, k \u2208 N, a domain X and a search problem Z over a class of distributions D over X and a set of solutions F , we define the k-wise statistical dimension with \u03ba1-discrimination \u03c4 of Z as\nSD(k)\u03ba1 (Z, \u03c4) . = sup\nD0\u2208SX inf f\u2208F\nRSD(k)\u03ba1 (B(D \\ Zf , D0), \u03c4),\nwhere SX denotes the set of all probability distributions over X.\nLemma 4.10 lower-bounds the deterministic k-wise SQ complexity of a search problem in terms of its (k-wise) statistical dimension.\nTheorem 4.10 ([Fel16b]). Let Z be a search problem, \u03c4 > 0 and k \u2208 N. The deterministic k-wise SQ complexity of solving Z with access to STAT(k)(\u03c4) is at least SD(k)\u03ba1 (Z, \u03c4).\nThe following theorem from [Fel16b] gives an upper bound on the SQ complexity of a search problem in terms of its statistical dimension. It relies on the multiplicative weights update method to reconstruct the unknown distribution sufficiently well for solving the problem. The use of this algorithm introduces dependence on KL-radius of D. Namely, we define\nRKL(D) .= inf D\u0304\u2208SX sup D\u2208D KL(D\u2016D\u0304),\nwhere KL(\u00b7\u2016\u00b7) denotes the KL-divergence.\nTheorem 4.11 ([Fel16b]). Let Z be a search problem, \u03c4, \u03b4 > 0 and k \u2208 N. There is a randomized k-wise SQ algorithm that solves Z with success probability 1\u2212 \u03b4 using\nO ( SD(k)\u03ba1 (Z, \u03c4) \u00b7 RKL(D) \u03c42 \u00b7 log ( RKL(D) \u03c4 \u00b7 \u03b4 ))\nqueries to STAT(k)(\u03c4/3).\nNote that KL-divergence between two distributions is upper-bounded (and is usually much smaller) than the max-divergence we used in the definition of \u03b3-flatness. Specifically, if D is \u03b3-flat then RKL(D) \u2264 ln \u03b3. We are now ready to prove Theorem 1.3 which we restate here for convenience.\nTheorem 1.3 (restated). Let \u03b3 \u2265 1, \u03c4 > 0 and k be any positive integer. Let X be a domain and D be a \u03b3-flat class of distributions over X. There exists a randomized algorithm that given any \u03b4 > 0 and a k-ary function \u03c6 : Xk \u2192 [\u22121, 1], estimates Dk[\u03c6] within \u03c4 for every (unknown) D \u2208 D with success probability at least 1\u2212 \u03b4 using\nO\u0303\n( \u03b3k\u22121 \u00b7 k3\n\u03c43 \u00b7 log(1/\u03b4)\n)\nqueries to STAT (1) D (\u03c4/(6 \u00b7 k)).\nProof. We first observe that the task of estimating Dk[\u03c6] up to additive \u03c4 can be viewed as a search problem Z over the set D of distributions and over the class F of solutions that corresponds to the interval [\u22121,+1]. Next, observe that one can easily estimate Dk[\u03c6] up to additive \u03c4 using a single query to STAT\n(k) D (\u03c4). Lemma 4.10 implies that SD (k) \u03ba1 (Z, \u03c4) = 1. By\nDefinition 4.9, for every D1 \u2208 SX , there exists f \u2208 F , such that RSD(k)\u03ba1 (B(D \\ Zf , D1), \u03c4) = 1. By Lemma 4.6,\nRSD(1)\u03ba1 ( B(D \\ Zf , D1), \u03c4 2 \u00b7 k ) \u2264 4 \u00b7 \u03b3 k\u22121 \u00b7 k \u03c4 .\nThus, Fact 4.5 and Definition 4.9 imply that\nSD(1)\u03ba1 (Z, \u03c4 2 \u00b7 k ) \u2264 4 \u00b7 \u03b3k\u22121 \u00b7 k \u03c4 .\nApplying Lemma 4.11, we conclude that there exists a randomized unary SQ algorithm that solves Z with probability at least 1\u2212 \u03b4 using at most\nO ( \u03b3k\u22121 \u00b7 k3 \u00b7 RKL(D)\n\u03c43 \u00b7 log\n( k \u00b7RKL(D)\n\u03c4 \u00b7 \u03b4\n))\nqueries to STAT(1)(\u03c4/(6 \u00b7 k)). This \u2013 along with the fact that RKL(D) \u2264 ln(\u03b3) whenever D is a \u03b3-flat set of distributions \u2013 concludes the proof of Theorem 1.3.\nOther divergences: While the max-divergence that we used for measuring flatness suffices for the applications we give in this paper (and is relatively simple), it might be too conservative in other problems. For example, such divergence is infinite even for two Gaussian distributions with the same standard deviation but different means. A simple way to obtain a more robust version of our reduction is to use approximate max-divergence. For \u03b4 \u2208 [0, 1) it is defined as:\nD\u03b4\u221e(D\u2016D\u0304) . = ln sup\nE\u2286X Prx\u223cD[x \u2208 E]\u2212 \u03b4 Prx\u223cD\u0304[x \u2208 E] .\nNote that D0\u221e(D\u2016D\u0304) = D\u221e(D\u2016D\u0304). Similarly, we can define a radius of D in this divergence\nR\u03b4\u221e(D) . = inf\nD\u0304\u2208SX sup D\u2208D\nD\u03b4\u221e(D\u2016D\u0304).\nNow, it is easy to see that, if D\u03b4\u221e(D\u2016D\u0304) \u2264 r then Dk\u03b4\u221e(Dk\u2016D\u0304k) \u2264 kr. This means that if in the proof of Lemma 4.6 we use the condition R \u03c4/(8k2) \u221e (D) \u2264 ln \u03b3 instead of \u03b3-flatness then we will obtain that the event in Equation (7) holds with probability at least\n( \u03c4 4k \u2212 (k \u2212 1) \u00b7 \u03c4 8k2 ) /\u03b3k\u22121 \u2265 \u03c4 \u03b3k\u22121 \u00b7 8k\nover the same random choices. This implies the following generalization of Theorem 1.3.\nTheorem 4.12. Let \u03c4 > 0 and k be any positive integer. Let D be a class of distributions over a domain X and \u03b3 = exp(R \u03c4/(8k2) \u221e (D)). There exists a randomized algorithm that given any \u03b4 > 0 and a k-ary function \u03c6 : Xk \u2192 [\u22121, 1], estimates Dk[\u03c6] within \u03c4 for every (unknown) D \u2208 D with success probability at least 1\u2212 \u03b4 using\nO\u0303\n( \u03b3k\u22121 \u00b7 k3 \u00b7 RKL(D)\n\u03c43 \u00b7 log(1/\u03b4)\n)\nqueries to STAT (1) D (\u03c4/(6 \u00b7 k)).\nAn alternative approach is to use Renyi divergence of order \u03b1 > 1 defined as follows:\nD\u03b1(D\u2016D\u0304) .= 1 1\u2212 \u03b1 \u00b7 ln ( Ey\u223cD [( Prx\u223cD[x = y]\nPrx\u223cD\u0304[x = y]\n)\u03b1\u22121]) .\nThe corresponding radius is defined as\nR\u03b1(D) .= inf D\u0304\u2208SX sup D\u2208D D\u03b1(D\u2016D\u0304).\nTo use it in our application we need the standard property of the Renyi divergence for product distributions D\u03b1(D\nk\u2016D\u0304k) = k \u00b7 D\u03b1(D\u2016D\u0304) and also the following simple lemma from [MMR09, Lemma 1]:\nLemma 4.13. For \u03b1 > 1, any two distributions D, D\u0304 over X and an event E \u2286 X:\nPr x\u223cD\n[x \u2208 E] \u2264 ( exp(D\u03b1(D\u2016D\u0304)) \u00b7 Pr\nx\u223cD\u0304 [x \u2208 E]\n)\u03b1\u22121 \u03b1\n.\nWe will need the inverted version of this lemma:\nPr x\u223cD\u0304\n[x \u2208 E] \u2265 (Prx\u223cD[x \u2208 E]) \u03b1 \u03b1\u22121\nexp(D\u03b1(D\u2016D\u0304)) .\nApplying this in the proof of Lemma 4.6 for \u03b3 = exp(R\u03b1(D)), we obtain that the event in Equation (7) holds with probability at least\n( \u03c4 4k ) \u03b1 \u03b1\u22121 /\u03b3k\u22121.\nThis gives the following generalization of Theorem 1.3.\nTheorem 4.14. Let \u03c4 > 0, \u03b1 > 1 and k be any positive integer. Let D be a class of distributions over a domain X and \u03b3 = exp(R\u03b1(D)). There exists a randomized algorithm that given any \u03b4 > 0 and a k-ary function \u03c6 : Xk \u2192 [\u22121, 1], estimates Dk[\u03c6] within \u03c4 for every (unknown) D \u2208 D with success probability at least 1\u2212 \u03b4 using\nO\u0303 ( \u03b3k\u22121 \u00b7 ( k\n\u03c4\n)2+ \u03b1 \u03b1\u22121 \u00b7 log(1/\u03b4) )\nqueries to STAT (1) D (\u03c4/(6 \u00b7 k))."}, {"heading": "4.3 Applications to solving CSPs and learning DNF", "text": "We now give some examples of the application of our reduction to obtain lower bounds against k-wise SQ algorithms. Our applications for stochastic constraint satisfaction problems (CSPs) and DNF learning. We start with the definition of a stochastic CSP with a planted solution which is a pseudo-random generator based on Goldreich\u2019s proposed one-way function [Gol00].\nDefinition 4.15. Let t \u2208 N and P : {\u00b11}t \u2192 {\u00b11} be a fixed predicate. We are given access to samples from a distribution P\u03c3, corresponding to a (\u201cplanted\u201d) assignment \u03c3 \u2208 {\u00b11}n. A sample from this distribution is a uniform-random t-tuple (i1, . . . , it) of distinct variable indices along with the value P (\u03c3i1 , . . . , \u03c3it). The goal is to recover the assignment \u03c3 when given m independent samples from P\u03c3. A (potentially) easier problem is to distinguish any such planted distribution from the distribution Ut in which the value is an independent uniform-random coin flip (instead of P (\u03c3i1 , . . . , \u03c3it)).\nWe say that a predicate P : {\u00b11}t \u2192 {\u00b11} has complexity r if r is the degree of the lowestdegree non-zero Fourier coefficient of P . It can be as large as t (for the parity function). A lower bound on the (unary) SQ complexity of solving such CSPs was shown by [FPV13] (their result is for the stronger VSTAT oracle but here we state the version for the STAT oracle).\nTheorem 4.16 ([FPV13]). Let t, q \u2208 N and P : {\u00b11}t \u2192 {\u00b11} be a fixed predicate of complexity r. Then for any q > 0, any algorithm that, given access to a distribution D \u2208 {P\u03c3 | \u03c3 \u2208 {\u00b11}n} \u222a {Ut} decides correctly whether D = P\u03c3 or D = Ut with probability at least 2/3 needs q/2O(t) queries to STAT\n(1) D (( log q n )r/2) .\nThe set of input distributions in this problem is 2-flat relative to Ut and it is one-to-many decision problem. Hence Theorem 4.7 implies2 the following lower bound for k-wise SQ algorithms.\nTheorem 4.17. Let t \u2208 N and P : {\u00b11}t \u2192 {\u00b11} be a fixed predicate of complexity r. Then for any \u03b1 > 0, any algorithm that, given access to a distribution D \u2208 {P\u03c3 | \u03c3 \u2208 {\u00b11}n} \u222a {Ut} decides correctly whether D = P\u03c3 or D = Ut with probability at least 2/3 needs 2 n1\u2212\u03b1\u2212O(t) queries to STAT (n1\u2212\u03b1) D ( (2/n\u03b1)r/2 \u00b7 n1\u2212\u03b1/4 ) .\nProof. Let A be a k-wise SQ algorithm using q\u2032 queries to STAT(n 1\u2212\u03b1)\nD\n( (2/n\u03b1)r/2 \u00b7 n1\u2212\u03b1/6 )\nwhich solves the problem with success probability 2/3. We let k = n1\u2212\u03b1 and apply Theorem 4.7 to obtain an algorithm that uses unary SQs and solves the problem with success probability 2/3. This algorithm uses q0 = q \u2032 \u00b7 2n1\u2212\u03b1 \u00b7 nO(r) queries to STAT(1)D ( (2/n\u03b1)r/2 ) . Now choosing q = 22n 1\u2212\u03b1 we get that (\nlog q n )r/2 \u2264 (2/n\u03b1)r/2. This means that q0 \u2265 q/2O(t) = 22n 1\u2212\u03b1\u2212O(t).\nHence q\u2032 = 22n 1\u2212\u03b1\u2212O(t)\u2212n1\u2212\u03b1\u2212O(r) = 2n 1\u2212\u03b1\u2212O(t).\n2We can also get essentially the same result by applying the simulation of a k-wise SQ using unary SQs from\nTheorem 1.3.\nSimilar lower bounds can be obtained for other problems considered in [FPV13], namely, planted satisfiability and t-SAT refutation.\nTo obtain a lower bound for learning DNF formulas we can use a simple reduction from the Goldreich\u2019s PRG defined above to learning DNF formulas of polynomial size. It is based on ideas implicit in the reduction from t-SAT refutation to DNF learning from [DS16].\nLemma 4.18. P : {\u00b11}t \u2192 {\u00b11} be a fixed predicate. There exists a mapping M from t-tuples of indices in [n] to {0, 1}tn such that for every \u03c3 \u2208 {\u00b11}n there exists a DNF formula f\u03c3 of size 2t satisfying P (\u03c3i1 , . . . , \u03c3it) = f\u03c3(M(i1, . . . , it)).\nProof. The mapping M maps (i1, . . . , it) to the concatenation of the indicator vectors of each of the indices. Namely, for j \u2208 [t] and \u2113 \u2208 [n], M(i1, . . . , it)j,\u2113 = 1 if and only if ij = \u2113, where we use the double index j, \u2113 to refer to element n(j \u2212 1) + \u2113 of the vector. Let vj,\u2113 denote the variable with the index j, \u2113. Let \u03c3 be any assignment and we denote by z\u03c3j the j-th variable of our predicate P when the assignment is equal to \u03c3. We first observe that z\u03c3j \u2261 \u2227 \u2113\u2208[n],\u03c3\u2113=0\nv\u0304j,\u2113. This is true since, by definition, the value of the j-th variable of our predicate is \u03c3ij . This value is 1 if and only if ij 6\u2208 {\u2113 \u2208 [n] | \u03c3\u2113 = 0}. This is equivalent to vj,\u2113 being equal to 0 for all \u2113 \u2208 [n] such that \u03c3\u2113 = 0. Analogously, z\u0304 \u03c3 j \u2261 \u2227 \u2113\u2208[n],\u03c3\u2113=1\nv\u0304j,\u2113. This implies that any conjunction of variables z\u03c31 , z\u0304 \u03c3 1 , . . . , z \u03c3 t , z\u0304 \u03c3 t can be expressed as a conjunction over variables v\u0304j,\u2113. Any predicate P can be expressed as a disjunction of at most 2t conjunctions and hence there exists a DNF formula f\u03c3 of size at most 2 t whose value on M(i1, . . . , it) is equal to P (\u03c3i1 , . . . , \u03c3it)\nThis reduction implies that by converting a sample ((i1, . . . , it), b) to a sample (M(i1, . . . , it), b) we can transform the Goldreich\u2019s PRG problem into a problem in which our goal is to distinguish examples of some DNF formula f\u03c3 from randomly labeled examples. Naturally, an algorithm that can learn DNF formulas can output a hypothesis which predicts the label (with some nontrivial accuracy), whereas such hypothesis cannot exist for predicting random labels. Hence known SQ lower bounds on planted CSPs [FPV13] immediately imply lower bounds for learning DNF. Further, by applying Lemma 4.18 together with Thm. 4.17 for t = r = logn we obtain the first lower bounds for learning DNF against n1\u2212\u03b1-wise SQ algorithms.\nTheorem 4.19. For any constant (independent of n) \u03b1 > 0, there exists a constant \u03b2 > 0 such that any algorithm that PAC learns DNF formulas of size n with error < 1/2 \u2212 n\u2212\u03b2 log n and success probability at least 2/3 needs at least 2n 1\u2212\u03b1\nqueries to STAT (n1\u2212\u03b1) D (n \u2212\u03b2 logn).\nWe remark that this is a lower bound for PAC learning polynomial size DNF formulas with respect to some fixed (albeit non-uniform) distribution over {0, 1}n. The approach for relating k-wise SQ complexity to unary SQ complexity given in [BKW03] applies to this setting. Yet, in their proof the tolerance needed for the unary SQ algorithm is \u03c4/2k and therefore it would not give a non-trivial lower bounds beyond k = O(log n)."}, {"heading": "5 Reduction for low-communication queries", "text": "In this section, we prove Theorem 1.5 using a recent result of Steinhardt, Valiant and Wager [SVW16]. Their result can be seen giving a SQ algorithm that simulates a communication protocol between n parties. Each party is holding a sample drawn i.i.d. from distribution D and broadcasts at most b bits about its sample (to all the other parties). The bits can be sent over multiple rounds. This is essentially the standard model of multi-party communication complexity (e.g. [KN97]) but with the goal of solving some problem about the unknown distribution D rather than computing a specific function of the inputs. Alternatively, one can also see this model as a single algorithm that extracts at most b-bits of information about each random sample from D and is allowed to extract the bits in an arbitrary order (generalizing the b-bit sampling model that we discuss in Section 6.2 and in which b-bits are extracted from each\nsample at once). We refer to this model simply as algorithms that extract at most b bits per sample.\nTheorem 5.1 ([SVW16]). Let A be an algorithm that uses n samples drawn i.i.d. from a distribution D and extracts at most b bits per sample. Then, for every \u03b2 > 0, there is an algorithm B that makes at most 2\u00b7b\u00b7n queries to STAT(1)D (\u03b2/(2b+1\u00b7k)) and the output distributions of A and B are within total variation distance \u03b2.\nWe will use this simulation to estimate the expectation of k-wise functions that have low communication complexity. Specifically, we recall the following standard model of public-coin randomized k-party communication complexity.\nDefinition 5.2. For a function \u03c6 : Xk \u2192 {\u00b11} we say that \u03c6 has a k-party public-coin randomized communication complexity of at most b bits per party with success probability 1\u2212 \u03b4 if there exist a protocol satisfying the following conditions. Each of the parties is given xi \u2208 X and access to shared random bits. In each round one of the parties can compute one or more bits using its input, random bits and all the previous communication and then broadcast it to all the other parties. In the last round one of the parties computes a bit that is the output of the protocol. Each of the parties communicates at most b bits in total. For every x1, . . . , xk \u2208 X, with probability at least 1 \u2212 \u03b4 over the choice of the random bits the output of the protocol is equal to \u03c6(x1, . . . , xk).\nWe are now ready to prove Theorem 1.5 which we restate here for convenience.\nTheorem 1.5 (restated). Let \u03c6 : Xk \u2192 {\u00b11} be a function, and assume that \u03c6 has k-party public-coin randomized communication complexity of b bits per party with success probability 2/3. Then, there exists a randomized algorithm that, with probability at least 1 \u2212 \u03b4, estimates Ex\u223cDk [\u03c6(x)] within \u03c4 using O(b \u00b7 k \u00b7 log(1/\u03b4)/\u03c42) queries to STAT(1)D (\u03c4 \u2032) for some \u03c4 \u2032 = \u03c4O(b)/k. Proof. We first amplify the success probability of the protocol for computing \u03c6 to \u03b4\u2032 . = \u03c4/8 using the majority vote of O(log(1/\u03b4\u2032)) repetitions. By Yao\u2019s minimax theorem [Yao77] there exists a deterministic protocol \u03a0\u2032 that succeeds with probability at least 1\u2212 \u03b4\u2032 for (x1, . . . , xk) \u223c Dk. Applying Theorem 5.1, we obtain a unary SQ algorithmA whose output is within total variation distance at most \u03b2 . = \u03c4/8 from \u03a0\u2032(x1, . . . , xk) (and we can assume that the output of A is in {\u00b11}). Therefore:\n|E[A]\u2212Dk[\u03c6]| \u2264 |E[A] \u2212 EDk [\u03a0\u2032(x1, . . . , xk)]|+ |EDk [\u03a0\u2032(x1, . . . , xk)]\u2212Dk[\u03c6]| \u2264 2\u03c4\n8 +\n2\u03c4\n8 =\n\u03c4 2 .\nRepeating A O(log(1/\u03b4)/\u03c42) times and taking the mean, we get an estimate of Dk[\u03c6] within \u03c4 with probability at least 1\u2212 \u03b4. This algorithm uses O(b \u00b7 k \u00b7 log(1/\u03b4)/\u03c42) queries to STAT(1)D (\u03c4 \u2032) for \u03c4 \u2032 = \u03c48/(2 O(log(8/\u03c4)\u00b7b) \u00b7 k) = \u03c4O(b)/k.\nThe collision probability for a distribution D is defined as Pr(x1,x2)\u223cD2 [x1 = x2]. This corresponds to \u03c6(x1, x2) being the Equality function which, as is well-known, has randomized 2-party communication complexity of O(1) bits per party with success probability 2/3 (see, e.g., [KN97]). Applying Theorem 1.5 with k = 2 we get the following corollary.\nCorollary 5.3. For any \u03c4, \u03b4 > 0, there is a SQ algorithm that estimates the collision probability of an unknown distribution D within \u03c4 with success probability 1\u2212\u03b4 using O(log(1/\u03b4)/\u03c42) queries to STAT\n(1) D (\u03c4 O(1))."}, {"heading": "6 Corollaries for other models", "text": "6.1 k-local differential privacy\nWe start by formally defining the k-wise version of the local differentially privacy model from [KLN+11].\nDefinition 6.1 (k-local randomizer). A k-local \u01eb-differentially private (DP) randomizer is a randomized map R : Xk \u2192 W such that for all u, u\u2032 \u2208 Xk and all w \u2208 W , we have that Pr[R(u) = w] \u2264 e\u01eb \u00b7 Pr[R(u\u2032) = w] where the probabilities are taken over the coins of R.\nThe following definition gives a k-wise generalization of the local randomizer (LR) oracle which was used in [KLN+11].\nDefinition 6.2 (k-local Randomizer Oracle). Let z = (z1, . . . , zn) \u2208 Xn be a database. A k-LR oracle LRz(\u00b7, \u00b7) gets a k-tuple of indices i\u0304 \u2208 [n]k and a k-local \u01eb-DP randomizer as inputs, and outputs an element w \u2208 W which is sampled from the distribution R(zi1 , . . . , zik).\nWe are now ready to give the definition of k-local differential privacy.\nDefinition 6.3 (k-local differentially private algorithm). A k-local \u01eb-differentially private algorithm is an algorithm that accesses a database z \u2208 Xn via a k-LR oracle LRz with the restriction that for all i \u2208 [n], if LRz (\u0304i1, R1), . . . , LRz (\u0304it, Rt) are the algorithm\u2019s invocations of LRz on ktuples of indices that include index i, where for each j \u2208 [t] Rj is a k-local \u01ebj-DP randomizer, then \u01eb1 + \u00b7 \u00b7 \u00b7+ \u01ebt \u2264 \u01eb.\nThe following two theorems \u2013 which follow from Theorem 5.7 and Lemma 5.8 of [KLN+11] \u2013 show that k-local differentially private algorithms are equivalent (up to polynomial factors) to k-wise statistical query algorithms.\nTheorem 6.4. Let ASQ be a k-wise SQ algorithm that makes at most t queries to STAT(k)D (\u03c4). Then, for every \u03b2 > 0, there exists a k-local \u01eb-DP algorithm ADP such that if the database z has n \u2265 n0 = O(k \u00b7 t \u00b7 log(t/\u03b2)/(\u01eb2 \u00b7\u03c42)) entries sampled i.i.d. from the distribution D, then ADP makes n0/k queries and the total variation between ADP \u2019s and ASQ\u2019s output distributions is at most \u03b2.\nTheorem 6.5. Let z \u2208 Xn be a database with entries drawn i.i.d. from a distribution D. For every k-local \u01eb-DP algorithm ADP making t queries to LRz and \u03b2 > 0, there exists a k-wise statistical query algorithm ASQ that in expectation makes O(t \u00b7 e\u01eb) queries to STAT(k)D (\u03c4) for \u03c4 = \u0398(\u03b2/(e2\u01eb \u00b7 t)) such that the total variation between ASQ\u2019s and ADP \u2019s output distributions is at most \u03b2.\nBy combining Theorem 1.1, Theorem 6.4 and Theorem 6.5 we then obtain the following corollary.\nCorollary 6.6. For every positive integer k and any prime number p, there is a concept class C of Boolean functions defined over a domain of size pk+1 for which there exists a (k + 1)-local 1-DP distribution-independent PAC learning algorithm using a database consisting of O\u0303k(log p) i.i.d. samples, whereas any k-local 1-DP distribution-independent PAC learning algorithm requires \u2126k(p 1/4) samples.\nThe reduction in Theorem 1.3 then implies that for \u03b3-flat classes of distributions a k-local DP algorithm can be simulated by a 1-local DP algorithm with an overhead that is linear in \u03b3k\u22121 and polynomial in other parameters.\nTheorem 6.7. Let \u03b3 \u2265 1, k be any positive integer. Let X be a domain and D a \u03b3-flat class of distributions over X. Let z \u2208 Xn be a database with entries drawn i.i.d. from a distribution D \u2208 D. For every k-local \u01eb-DP algorithm A making t queries to a k-LR oracle LRz and \u03b2 > 0,\nthere exists a 1-local \u01eb-DP algorithm B such that if n \u2265 n0 = O\u0303 ( \u03b3k\u22121\u00b7t6\u00b7k6\u00b7e11\u01eb\n\u03b23\u01eb2\n) then for every\nD \u2208 D, B makes n0/k queries to 1-LR oracle LR\u2032z and the total variation distance between B\u2019s and A\u2019s output distributions is at most \u03b2.\nThe reduction from Theorem 1.5 can be translated to this model analogously.\n6.2 k-wise b-bit sampling model\nFor an integer b > 0, a b-bit sampling oracle BSD(b) is defined as follows: Given any function \u03c6 : X \u2192 {0, 1}b, BSD(b) returns \u03c6(x) for x drawn randomly and independently from D, where D is the unknown input distribution. This oracle was first studied by Ben-David and Dichterman [BD98] as a weak Restricted Focus of Attention model. They showed that algorithms in this model can be simulated efficiently using statistical queries and vice versa. Lower bounds against algorithms that use such an oracle have been studied in [FGR+12, FPV13]. More recently, motivated by communication constraints in distributed systems, the sample complexity of several basic problems in statistical estimation has been studied in this and related models [ZDJW13, SD15, SVW16]. These works also study the natural k-wise generalization of this model. Specifically, BS (k) D (b) is the oracle that given any function \u03c6 : X\nk \u2192 {0, 1}b, returns \u03c6(x) for x drawn randomly and independently from Dk.\nThe following two theorems \u2013 which follow from Theorem 5.2 in [BD98] and Proposition 3 in [SVW16] (that strengthens a similar result in [BD98]) \u2013 show that k-wise algorithms in the b-bit sampling model are equivalent (up to polynomial and 2b factors) to k-wise statistical query algorithms.\nTheorem 6.8. Let ASQ be a k-wise SQ algorithm that makes at most t Boolean queries to STAT\n(k) D (\u03c4). Then, for every \u03b2 > 0, there exists a k-wise 1-bit sampling algorithm A1-bit that\nuses O( t\u03c42 \u00b7 log(t/\u03b2)) queries to BS (k) D (b) and the total variation distance between ASQ\u2019s and A1-bit\u2019s output distributions is at most \u03b2. Theorem 6.9. Let Ab-bit be a k-wise b-bit sampling algorithm that makes at most t queries to BS\n(k) D (b). Then, for every \u03b2 > 0, there exists a k-wise SQ algorithm ASQ that makes 2bt\nqueries to STAT (k) D (\u03b2/(2 b+1t)) and the total variation distance between ASQ\u2019s and Ab-bit\u2019s output distributions is at most \u03b2.\nFeldman et al. [FGR+12] give a tighter correspondence between the BS oracle and the slightly stronger VSTAT oracle. Their simulations can be extended to the k-wise case in a similar way.\nThe following corollary now follows by combining Theorem 1.1, Theorem 6.8 and Theorem 6.9.\nCorollary 6.10. Let b = O(1). For every positive integer k and any prime number p, there is a concept class C of Boolean functions defined over a domain of size pk+1 for which there exists a (k+1)-wise b-bit sampling distribution-independent PAC learning algorithm making O\u0303k(log p) queries, whereas any k-wise b-bit sampling distribution-independent PAC learning algorithm requires \u2126\u0303k(p 1/12) queries.\nThe reduction in Theorem 1.3 then implies that for \u03b3-flat classes of distributions a k-wise 1-bit sampling algorithm can be simulated by a 1-wise 1-bit sampling algorithm.\nTheorem 6.11. Let \u03b3 \u2265 1, k be any positive integer. Let X be a domain and D a \u03b3-flat class of distributions over X. For every algorithm A making t queries to BS(k)D (1) and every \u03b2 > 0, there exists a 1-bit sampling algorithm B that for every D \u2208 D, uses O\u0303 ( \u03b3k\u22121\u00b7t6\u00b7k5\n\u03b23\n) queries to\nBSD(1) and the total variation distance between B\u2019s and A\u2019s output distributions is at most \u03b2."}, {"heading": "A Omitted proofs", "text": "A.1 Proof of Lemma 3.6\nIn the following, we denote by oc(\u00b7) and \u03c9c(\u00b7) asymptotic functions obtained by taking the limit as the parameter c goes to infinity. In particular, oc(1) can be made arbitrarily close to 0 by letting c be large enough.\nLet W be as in the statement of Lemma 3.6. To prove the lemma, it suffices to show that each bit j in the binary representation of the subspace W\u0302 constructed by Algorithm 2 is equal to the corresponding bit of W . Henceforth, we fix j. We consider the two cases where bit j of W is equal to 1, and where it is equal to 0.\nFirst, we assume that bit j ofW is equal to 1, and prove that in the execution of Algorithm 2, it will be the case that ui,j/vi \u2265 1 \u2212 oc(1). We can then set c to be sufficiently large to ensure that ui,j/vi \u2265 (9/10). Note that for any positive real numbers N , D and \u03c4 such that \u03c4 = o(N) and \u03c4 = o(D), we have that\nN \u2212 \u03c4 D + \u03c4 \u2265 N D \u00b7 (1\u2212 o(1)).\nThus, it is enough to show that the next three statements hold:\n(i) \u03c4 = oc(vi),\n(ii) if bit j of W is 1, then (ui,j/vi) \u2265 1\u2212 oc(1), (iii) if bit j of W is 1, then \u03c4 = oc(ui,j),\nwhere ui,j , E[\u03c6i,j ] and vi , E[\u03c6i]. To show (i) above, note that\nvi = Pr [ (b1, . . . , bk+1) = 1 k+1 and rk(Z) = i ]\n\u2265 vi \u2212 \u03c4 \u2265 v \u00b7 \u03c4i \u2212 \u03c4 \u2265 \u03c9c(\u03c4),\nwhere the first inequality follows from the definition of vi and the SQ guarantee, the second inequality follows from the given assumption (in the statement of Lemma 3.6) that (vi/v) \u2265 \u03c4i, and the last inequality follows from the fact that since v > \u01ebk+1/2, for every i \u2208 [k+1], we have that\n\u03c4 = oc ( (v \u00b7 \u03c4i \u2212 \u03c4) \u00b7 (1\u2212 \u03c4i/4) ) .\n. Recall the definition of the event Ej(Z) from the description of Algorithm 2. To show (ii) above, note that\nui,j vi = Pr\n[ Ej(Z) | (b1, . . . , bk+1) = 1k+1 and rk(Z) = i ]\n\u2265 Pr [ all rows of Z belong to W | (b1, . . . , bk+1) = 1k+1 and rk(Z) = i ] = 1\u2212 Pr [ \u2203 a row of Z that /\u2208 W | (b1, . . . , bk+1) = 1k+1 and rk(Z) = i ]\n\u2265 1\u2212 (k + 1) \u00b7 Pr z\u223cQ [z /\u2208 W ] \u2265 1\u2212 \u03c4i 4 \u2265 1\u2212 oc(1),\nwhere the first inequality uses the assumption that bit j in the binary representation of W is 1 and the facts that the dimension of W is equal to i and that we are conditioning on rk[Z] = i. The second inequality follows from the union bound, the third inequality follows from the assumption given in Equation (2), and the last inequality follows from the fact that for every i \u2208 [k + 1], we have that \u03c4i = oc(1).\nTo show (iii) above, note that\nui,j = vi \u00b7 ui,j vi\n\u2265 \u03c9c(\u03c4) \u00b7 (1\u2212 oc(1)) \u2265 \u03c9c(\u03c4),\nwhere the first inequality follows from (i) and (ii) above. We now turn to the (slightly different) case where bit j of W is equal to 0, and prove that in the execution of Algorithm 2, we will have that ui,j/vi = oc(1). Note that for any positive\nreal numbers N , D and \u03c4 such that \u03c4 = o(D), we have that\nN + \u03c4 D \u2212 \u03c4 \u2264 N D \u00b7 (1 + o(1)) + o(1).\nThus, it is enough to use the fact that \u03c4 = oc(vi) (proven in (i) above) and to show the next statement:\n(iv) if bit j of W is 0, then (ui,j/vi) = oc(1).\nTo prove (iv), note that since bit j of W is 0, we have that\nui,j vi\n\u2264 Pr [ \u2203 a row of Z that /\u2208 W | (b1, . . . , bk+1) = 1k+1 and rk(Z) = i ]\n\u2264 \u03c4i 4 \u2264 oc(1),\nwhere the first inequality above follows from the assumption that bit j in the binary representation of W is 0 and the facts that the dimension of W is equal to i and that we are conditioning on rk[Z] = i. The second inequality above follows from the union bound and the assumption given in Equation (2), and the last inequality follows from the fact that for every i \u2208 [k + 1], we have that \u03c4i = oc(1). As before, we choose c to be sufficiently large to ensure that this last probability is smaller than (1/10).\nA.2 Proof of Proposition 3.14\nLet a \u2208 F\u2113p. We have that:\nE(z,b)\u223cD0 [Da(z, b)] = E(z,b)\u223cD0\n[ k\u220f\ni=1\nE(zi,bi)\u223cD0 [Da(zi, bi)\n]\n=\nk\u220f\ni=1\nE(zi,bi)\u223cD0\n[ Da(zi, bi) ]\n=\nk\u220f\ni=1\nE(zi,bi)\u223cD0\n[ Da(zi) \u00b7 1(bi = fa(zi)) ]\n= k\u220f\ni=1\nEzi\u223cD0 [ Da(zi) \u00b7 Ebi\u2208R{\u00b11}[1(bi = fa(zi))] ]\n= 1\n2k \u00b7\nk\u220f\ni=1\nEzi\u223cD0 [ Da(zi) ]\n= 1 2k \u00b7 ( 1 p \u00b7 \u03b2 + ( 1\u2212 1 p ) \u00b7 \u03b1 )k .\nA.3 Proof of Proposition 3.15\nLet a, a\u2032 \u2208 F\u2113p. First, assume that Hypa = Hypa\u2032 , i.e., that a = a\u2032. Then,\nE(z,b)\u223cD0 [Da(z, b) \u00b7Da\u2032(z, b)] = E(z,b)\u223cD0 [Da(z, b)2]\n= E(z,b)\u223cD0\n[ k\u220f\ni=1\nDa(zi, bi) 2\n]\n=\nk\u220f\ni=1\nE(zi,bi)\u223cD0 [Da(zi, bi) 2]\n=\nk\u220f\ni=1\nE(zi,bi)\u223cD0 [Da(zi) 2 \u00b7 1(bi = fa(zi))]\n=\nk\u220f\ni=1\nEzi [ Da(zi) 2 \u00b7 Ebi [1(bi = fa(zi))] ]\nThus,\nE(z,b)\u223cD0 [Da(z, b) \u00b7Da\u2032(z, b)] = 1\n2k \u00b7\nk\u220f\ni=1\nEzi [Da(zi) 2]\n= 1\n2k \u00b7\nk\u220f\ni=1\n( 1\np \u00b7 \u03b22 +\n( 1\u2212 1\np\n) \u00b7 \u03b12 )\n= 1 2k \u00b7 ( 1 p \u00b7 \u03b22 + ( 1\u2212 1 p ) \u00b7 \u03b12 )k .\nNow we assume that Hypa \u2229 Hypa\u2032 = \u2205. Then,\nE(z,b)\u223cD0 [Da(z, b) \u00b7Da\u2032(z, b)] = E(z,b)\u223cD0 [ k\u220f\ni=1\nDa(zi, bi) \u00b7Da\u2032(zi, bi) ]\n=\nk\u220f\ni=1\nE(zi,bi)\u223cD0 [Da(zi, bi) \u00b7Da\u2032(zi, bi)]\n=\nk\u220f\ni=1\nE(zi,bi)\u223cD0 [Da(zi) \u00b7 1(bi = fa(zi)) \u00b7Da\u2032(zi) \u00b7 1(bi = fa\u2032(zi))]\n=\nk\u220f\ni=1\nEzi [ Da(zi) \u00b7Da\u2032(zi) \u00b7 1(fa(zi) = fa\u2032(zi)) \u00b7 Ebi [1(bi = fa(zi))] ]\n= 1\n2k \u00b7\nk\u220f\ni=1\nEzi [ Da(zi) \u00b7Da\u2032(zi) \u00b7 1(fa(zi) = fa\u2032(zi)) ]\n= 1\n2k \u00b7\nk\u220f\ni=1\n( \u03b12 \u00b7 ( 1\u2212 2\np\n))\n= 1 2k \u00b7 ( \u03b12 \u00b7 ( 1\u2212 2 p ))k .\nFinally, we assume that Hypa 6= Hypa\u2032 and Hypa \u2229 Hypa\u2032 6= \u2205. Then,\nE(z,b)\u223cD0 [Da(z, b) \u00b7Da\u2032(z, b)] = 1\n2k \u00b7\nk\u220f\ni=1\nEzi [ Da(zi) \u00b7Da\u2032(zi) \u00b7 1(fa(zi) = fa\u2032(zi)) ]\n= 1\n2k \u00b7\nk\u220f\ni=1\n( \u03b22 p2 + \u03b12 \u00b7 (1\u2212 2 p + 1 p2 ))\n= 1 2k \u00b7 (\u03b2\n2\np2 + \u03b12 \u00b7 (1\u2212 2 p + 1 p2 ))k.\nA.4 Proof of Proposition 3.16\nFirst, we assume that a, a\u2032 \u2208 F\u2113p are such that Hypa = Hypa\u2032 , i.e., a = a\u2032. Then, by Proposition 3.15 and by our settings of \u03b1 and \u03b2, we have that\nE(z,b)\u223cD0 [Da(z, b) \u00b7Da\u2032(z, b)] = 1 2k \u00b7 (1 p \u00b7 \u03b22 + (1\u2212 1 p ) \u00b7 \u03b12)k\n= 1 22k \u00b7 p(2\u2113\u22121)\u00b7k \u00b7 (1 + 1 p\u2212 1) k.\nHence, D0[D\u0302a \u00b7 D\u0302a\u2032 ] = (p+ 1\u2212 1p\u22121 )k \u2212 1, as desired. Next, we assume that a, a\u2032 \u2208 F\u2113p are such that Hypa \u2229 Hypa\u2032 = \u2205. Then, by Proposition 3.15 and by our setting of \u03b1, we have that\nE(z,b)\u223cD0 [Da(z, b) \u00b7Da\u2032(z, b)] = 1 2k \u00b7 (\u03b12 \u00b7 (1\u2212 2 p ))k\n= 1 23k \u00b7 p2k\u2113 \u00b7 (1\u2212 2p )k\n(1 \u2212 1p )2k .\nHence, D0[D\u0302a \u00b7 D\u0302a\u2032 ] = 12k \u00b7 (1\u2212 2 p )k\n(1\u2212 1 p )2k \u2212 1, as desired. Finally, we assume that a, a\u2032 \u2208 F\u2113p are such that Hypa 6= Hypa\u2032 and Hypa \u2229Hypa\u2032 6= \u2205. Then,\nby Proposition 3.15 and by our settings of \u03b1 and \u03b2, we have that\nE(z,b)\u223cD0 [Da(z, b) \u00b7Da\u2032(z, b)] = 1 2k \u00b7 (\u03b2\n2\np2 + \u03b12 \u00b7 (1\u2212 2 p + 1 p2 ))k\n= 1\n22k \u00b7 p2k\u2113 .\nHence, D0[D\u0302a \u00b7 D\u0302a\u2032 ] = 0, as desired."}], "references": [{"title": "General bounds on statistical query learning and pac learning with noise via hypothesis boosting", "author": ["Javed A Aslam", "Scott E Decatur"], "venue": "In Foundations of Computer Science,", "citeRegEx": "Aslam and Decatur.,? \\Q1993\\E", "shortCiteRegEx": "Aslam and Decatur.", "year": 1993}, {"title": "Distributed learning, communication complexity and privacy", "author": ["Maria-Florina Balcan", "Avrim Blum", "Shai Fine", "Yishay Mansour"], "venue": "In COLT 2012 - The 25th Annual Conference on Learning Theory, June 25-27,", "citeRegEx": "Balcan et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Balcan et al\\.", "year": 2012}, {"title": "Learning with restricted focus of attention", "author": ["Shai Ben-David", "Eli Dichterman"], "venue": "J. Comput. Syst. Sci.,", "citeRegEx": "Ben.David and Dichterman.,? \\Q1998\\E", "shortCiteRegEx": "Ben.David and Dichterman.", "year": 1998}, {"title": "Practical privacy: the sulq framework", "author": ["Avrim Blum", "Cynthia Dwork", "Frank McSherry", "Kobbi Nissim"], "venue": "In Proceedings of the Twenty-fourth ACM SIGACTSIGMOD-SIGART Symposium on Principles of Database Systems, June 13-15,", "citeRegEx": "Blum et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Blum et al\\.", "year": 2005}, {"title": "Statistical active learning algorithms for noise tolerance and differential privacy", "author": ["Maria-Florina Balcan", "Vitaly Feldman"], "venue": null, "citeRegEx": "Balcan and Feldman.,? \\Q2015\\E", "shortCiteRegEx": "Balcan and Feldman.", "year": 2015}, {"title": "Weakly learning DNF and characterizing statistical query learning using Fourier analysis", "author": ["A. Blum", "M. Furst", "J. Jackson", "M. Kearns", "Y. Mansour", "S. Rudich"], "venue": "In Proceedings of STOC,", "citeRegEx": "Blum et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Blum et al\\.", "year": 1994}, {"title": "A polynomial-time algorithm for learning noisy linear threshold functions", "author": ["Avrim Blum", "Alan Frieze", "Ravi Kannan", "Santosh Vempala"], "venue": null, "citeRegEx": "Blum et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Blum et al\\.", "year": 1998}, {"title": "Learning by distances", "author": ["Shai Ben-David", "Alon Itai", "Eyal Kushilevitz"], "venue": "In Proceedings of the Third Annual Workshop on Computational Learning Theory, COLT 1990,", "citeRegEx": "Ben.David et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Ben.David et al\\.", "year": 1990}, {"title": "Noise-tolerant learning, the parity problem, and the statistical query model", "author": ["Avrim Blum", "Adam Kalai", "Hal Wasserman"], "venue": "Journal of the ACM (JACM),", "citeRegEx": "Blum et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Blum et al\\.", "year": 2003}, {"title": "Amplification of weak learning over the uniform distribution", "author": ["D. Boneh", "R. Lipton"], "venue": "In Proceedings of the Sixth Annual Workshop on Computational Learning Theory,", "citeRegEx": "Boneh and Lipton.,? \\Q1993\\E", "shortCiteRegEx": "Boneh and Lipton.", "year": 1993}, {"title": "Map-reduce for machine learning on multicore", "author": ["Cheng Chu", "Sang Kyun Kim", "Yi-An Lin", "YuanYuan Yu", "Gary Bradski", "Andrew Y Ng", "Kunle Olukotun"], "venue": "Advances in neural information processing systems,", "citeRegEx": "Chu et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Chu et al\\.", "year": 2007}, {"title": "Learning from satisfying assignments", "author": ["Anindya De", "Ilias Diakonikolas", "Rocco A Servedio"], "venue": "In Proceedings of the Twenty-Sixth Annual ACM-SIAM Symposium on Discrete Algorithms,", "citeRegEx": "De et al\\.,? \\Q2015\\E", "shortCiteRegEx": "De et al\\.", "year": 2015}, {"title": "Generalization in adaptive data analysis and holdout reuse", "author": ["Cynthia Dwork", "Vitaly Feldman", "Moritz Hardt", "Toni Pitassi", "Omer Reingold", "Aaron Roth"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Dwork et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Dwork et al\\.", "year": 2015}, {"title": "Preserving statistical validity in adaptive data analysis", "author": ["Cynthia Dwork", "Vitaly Feldman", "Moritz Hardt", "Toniann Pitassi", "Omer Reingold", "Aaron Leon Roth"], "venue": "In Proceedings of the Forty-Seventh Annual ACM on Symposium on Theory of Computing,", "citeRegEx": "Dwork et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Dwork et al\\.", "year": 2015}, {"title": "Statistical query lower bounds for robust estimation of high-dimensional gaussians and gaussian mixtures", "author": ["Ilias Diakonikolas", "Daniel M. Kane", "Alistair Stewart"], "venue": "CoRR, abs/1611.03473,", "citeRegEx": "Diakonikolas et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Diakonikolas et al\\.", "year": 2016}, {"title": "Calibrating noise to sensitivity in private data analysis", "author": ["Cynthia Dwork", "Frank McSherry", "Kobbi Nissim", "Adam D. Smith"], "venue": "In Theory of Cryptography, Third Theory of Cryptography Conference,", "citeRegEx": "Dwork et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Dwork et al\\.", "year": 2006}, {"title": "Revealing information while preserving privacy", "author": ["Irit Dinur", "Kobbi Nissim"], "venue": "In Proceedings of the Twenty-Second ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, June 9-12,", "citeRegEx": "Dinur and Nissim.,? \\Q2003\\E", "shortCiteRegEx": "Dinur and Nissim.", "year": 2003}, {"title": "Complexity theoretic limitations on learning dnf\u2019s", "author": ["Amit Daniely", "Shai Shalev-Shwartz"], "venue": "In COLT,", "citeRegEx": "Daniely and Shalev.Shwartz.,? \\Q2016\\E", "shortCiteRegEx": "Daniely and Shalev.Shwartz.", "year": 2016}, {"title": "Approximate resilience, monotonicity, and the complexity of agnostic learning", "author": ["Dana Dachman-Soled", "Vitaly Feldman", "Li-Yang Tan", "Andrew Wan", "Karl Wimmer"], "venue": "In Proceedings of SODA,", "citeRegEx": "Dachman.Soled et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Dachman.Soled et al\\.", "year": 2015}, {"title": "A simple polynomial-time rescaling algorithm for solving linear programs", "author": ["John Dunagan", "Santosh Vempala"], "venue": "In Proceedings of the 36th Annual ACM Symposium on Theory of Computing,", "citeRegEx": "Dunagan and Vempala.,? \\Q2004\\E", "shortCiteRegEx": "Dunagan and Vempala.", "year": 2004}, {"title": "RAPPOR: randomized aggregatable privacy-preserving ordinal response", "author": ["\u00dalfar Erlingsson", "Vasyl Pihur", "Aleksandra Korolova"], "venue": "In ACM SIGSAC Conference on Computer and Communications Security,", "citeRegEx": "Erlingsson et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Erlingsson et al\\.", "year": 2014}, {"title": "Evolvability from learning algorithms", "author": ["Vitaly Feldman"], "venue": "In Proceedings of the fortieth annual ACM symposium on Theory of computing,", "citeRegEx": "Feldman.,? \\Q2008\\E", "shortCiteRegEx": "Feldman.", "year": 2008}, {"title": "Dealing with range anxiety in mean estimation via statistical queries", "author": ["Vitaly Feldman"], "venue": "arXiv, abs/1611.06475,", "citeRegEx": "Feldman.,? \\Q2016\\E", "shortCiteRegEx": "Feldman.", "year": 2016}, {"title": "A general characterization of the statistical query complexity", "author": ["Vitaly Feldman"], "venue": "CoRR, abs/1608.02198,", "citeRegEx": "Feldman.,? \\Q2016\\E", "shortCiteRegEx": "Feldman.", "year": 2016}, {"title": "Statistical algorithms and a lower bound for detecting planted cliques", "author": ["Vitaly Feldman", "Elena Grigorescu", "Lev Reyzin", "Santosh Vempala", "Ying Xiao"], "venue": "arXiv, CoRR,", "citeRegEx": "Feldman et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Feldman et al\\.", "year": 2012}, {"title": "Statistical query algorithms for mean vector estimation and stochastic convex optimization", "author": ["Vitaly Feldman", "Cristobal Guzman", "Santosh Vempala"], "venue": "CoRR, abs/1512.09170,", "citeRegEx": "Feldman et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Feldman et al\\.", "year": 2015}, {"title": "Lower bounds and hardness amplification for learning shallow monotone formulas", "author": ["V. Feldman", "H. Lee", "R. Servedio"], "venue": "In COLT,", "citeRegEx": "Feldman et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Feldman et al\\.", "year": 2011}, {"title": "On the complexity of random satisfiability problems with planted solutions", "author": ["Vitaly Feldman", "Will Perkins", "Santosh Vempala"], "venue": "CoRR, abs/1311.4821,", "citeRegEx": "Feldman et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Feldman et al\\.", "year": 2013}, {"title": "Candidate one-way functions based on expander graphs", "author": ["Oded Goldreich"], "venue": "IACR Cryptology ePrint Archive,", "citeRegEx": "Goldreich.,? \\Q2000\\E", "shortCiteRegEx": "Goldreich.", "year": 2000}, {"title": "Efficient noise-tolerant learning from statistical queries", "author": ["Michael Kearns"], "venue": "Journal of the ACM (JACM),", "citeRegEx": "Kearns.,? \\Q1998\\E", "shortCiteRegEx": "Kearns.", "year": 1998}, {"title": "What can we learn privately", "author": ["Shiva Prasad Kasiviswanathan", "Homin K Lee", "Kobbi Nissim", "Sofya Raskhodnikova", "Adam Smith"], "venue": "SIAM Journal on Computing,", "citeRegEx": "Kasiviswanathan et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Kasiviswanathan et al\\.", "year": 2011}, {"title": "Communication complexity", "author": ["Eyal Kushilevitz", "Noam Nisan"], "venue": null, "citeRegEx": "Kushilevitz and Nisan.,? \\Q1997\\E", "shortCiteRegEx": "Kushilevitz and Nisan.", "year": 1997}, {"title": "Multiple source adaptation and the r\u00e9nyi divergence", "author": ["Yishay Mansour", "Mehryar Mohri", "Afshin Rostamizadeh"], "venue": "In UAI,", "citeRegEx": "Mansour et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Mansour et al\\.", "year": 2009}, {"title": "Interactive privacy via the median mechanism", "author": ["Aaron Roth", "Tim Roughgarden"], "venue": "In Proceedings of the forty-second ACM symposium on Theory of computing,", "citeRegEx": "Roth and Roughgarden.,? \\Q2010\\E", "shortCiteRegEx": "Roth and Roughgarden.", "year": 2010}, {"title": "Airavat: Security and privacy for mapreduce", "author": ["Indrajit Roy", "Srinath TV Setty", "Ann Kilzer", "Vitaly Shmatikov", "Emmett Witchel"], "venue": "In NSDI,", "citeRegEx": "Roy et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Roy et al\\.", "year": 2010}, {"title": "Minimax rates for memory-bounded sparse linear regression", "author": ["Jacob Steinhardt", "John C. Duchi"], "venue": "In COLT,", "citeRegEx": "Steinhardt and Duchi.,? \\Q2015\\E", "shortCiteRegEx": "Steinhardt and Duchi.", "year": 2015}, {"title": "Optiml: an implicitly parallel domain-specific language for machine learning", "author": ["Arvind Sujeeth", "HyoukJoong Lee", "Kevin Brown", "Tiark Rompf", "Hassan Chafi", "Michael Wu", "Anand Atreya", "Martin Odersky", "Kunle Olukotun"], "venue": "In Proceedings of the 28th International Conference on Machine Learning", "citeRegEx": "Sujeeth et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Sujeeth et al\\.", "year": 2011}, {"title": "Memory, communication, and statistical queries", "author": ["J. Steinhardt", "G. Valiant", "S. Wager"], "venue": "In COLT,", "citeRegEx": "Steinhardt et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Steinhardt et al\\.", "year": 2016}, {"title": "A theory of the learnable", "author": ["Leslie G Valiant"], "venue": "Communications of the ACM,", "citeRegEx": "Valiant.,? \\Q1984\\E", "shortCiteRegEx": "Valiant.", "year": 1984}, {"title": "All of statistics: a concise course in statistical inference", "author": ["Larry Wasserman"], "venue": "Springer Science & Business Media,", "citeRegEx": "Wasserman.,? \\Q2013\\E", "shortCiteRegEx": "Wasserman.", "year": 2013}, {"title": "Probabilistic computations: Toward a unified measure of complexity", "author": ["Andrew Yao"], "venue": "In FOCS,", "citeRegEx": "Yao.,? \\Q1977\\E", "shortCiteRegEx": "Yao.", "year": 1977}, {"title": "Information-theoretic lower bounds for distributed statistical estimation with communication constraints", "author": ["Yuchen Zhang", "John C. Duchi", "Michael I. Jordan", "Martin J. Wainwright"], "venue": "In Proceedings of NIPS,", "citeRegEx": "Zhang et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2013}], "referenceMentions": [], "year": 2017, "abstractText": "Several well-studied models of access to data samples, including statistical queries, local differential privacy and low-communication algorithms rely on queries that provide information about a function of a single sample. (For example, a statistical query (SQ) gives an estimate of Ex\u223cD[q(x)] for any choice of the query function q : X \u2192 R, where D is an unknown data distribution.) Yet some data analysis algorithms rely on properties of functions that depend on multiple samples. Such algorithms would be naturally implemented using k-wise queries each of which is specified by a function q : X \u2192 R. Hence it is natural to ask whether algorithms using k-wise queries can solve learning problems more efficiently and by how much. Blum, Kalai, Wasserman [BKW03] showed that for any weak PAC learning problem over a fixed distribution, the complexity of learning with k-wise SQs is smaller than the (unary) SQ complexity by a factor of at most 2. We show that for more general problems over distributions the picture is substantially richer. For every k, the complexity of distribution-independent PAC learning with k-wise queries can be exponentially larger than learning with (k + 1)-wise queries. We then give two approaches for simulating a k-wise query using unary queries. The first approach exploits the structure of the problem that needs to be solved. It generalizes and strengthens (exponentially) the results of Blum et al. [BKW03]. It allows us to derive strong lower bounds for learning DNF formulas and stochastic constraint satisfaction problems that hold against algorithms using k-wise queries. The second approach exploits the k-party communication complexity of the k-wise query function. \u2217Work done while at IBM Research Almaden.", "creator": "LaTeX with hyperref package"}}}