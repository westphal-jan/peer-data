{"id": "1703.07115", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Mar-2017", "title": "Layer-wise training of deep networks using kernel similarity", "abstract": "deep information learning has shown promising results in many simulation machine learning applications. the linear hierarchical discrete feature representation built by deep networks enable compact and precise encoding of the data. a kernel analysis of the trained deep networks demonstrated that with deeper layers, more simple and more accurate data representations are obtained. in this paper, we propose investigating an approach for layer - wise training of a deep network for the supervised classification task. a transformation matrix of each layer is obtained by solving an optimization aimed at a better representation where a subsequent layer builds its representation on the top of processing the features produced by a previous layer. we compared the dynamic performance of our functional approach with a possible dnn trained using back - propagation which has same architecture as ours. experimental results on the real image datasets demonstrate efficacy of our approach. we also demonstrate performed kernel analysis of layer representations to validate the claim of better feature encoding.", "histories": [["v1", "Tue, 21 Mar 2017 09:53:51 GMT  (2632kb,D)", "http://arxiv.org/abs/1703.07115v1", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["mandar kulkarni", "shirish karande"], "accepted": false, "id": "1703.07115"}, "pdf": {"name": "1703.07115.pdf", "metadata": {"source": "CRF", "title": "Layer-wise training of deep networks using kernel similarity", "authors": ["Mandar Kulkarni", "Shirish Karande"], "emails": ["shirish.karande)@tcs.com"], "sections": [{"heading": null, "text": "I. INTRODUCTION Deep learning has shown promising results in many machine learning applications. In computer vision, it has been successfully applied to problems such as object detection [4], English character recognition [10]. It also showed promising results for speech data where it has been applied for speech recognition [6] and spoken keyword spotting [5]. It has been studied that the effectiveness of deep networks lies in the layered representation [7]. A deep learning architecture automatically learns the hierarchy of feature representations where complex features are built on the top of the simple encodings. Higher layers construct more abstract representation of the input data enabling well-generalizing representations.\nRecently, there has been an attempt to analyze the layered representation built by a trained deep network for the classification task. Montavon et. al. [11] performed the kernel analysis of the data representations at each layer of the network trained for a supervised classification task. The representation is analyzed with the kernel Principal Component Analysis (kPCA) [3] using a RBF kernel. At each layer, a kernel matrix is computed on the feature representation of the training data. The kernel space representation of the features is computed by projecting data onto leading v Eigen vectors of the kernel matrix. The dimensionality v controls the simplicity of the model. A smaller v corresponds to a simpler model while large value of v indicates relatively complex model. A linear classifier is then trained to this low rank representation to compute the training error rates. Interestingly, it has been observed that as deeper and deeper kernels are built, simpler and more accurate representations of the learning problem are obtained\n[11]. In other words, as representation evolves layer by layer, more energy gets concentrated in fewer and fewer leading Eigen vectors. The trend is observed in representations built by a Multi-Layer Perceptron (MLP) as well as Convolutional Neural Networks (CNN).\nFor a classification task, MLPs compute the complex mapping from input to output using the multiple fully connected layers. The weights in the network are updated using the backpropagation algorithm. Due to the large number of trainable parameters, MLPs often suffer from issues such as slow training process, over-fitting and large computation resources.\nIn this paper, we propose a novel layer-wise training approach for deep networks aimed at supervised classification. For each layer, we aim to find a transformation which enables a better representation of the data. A kernel matrix is defined through the transformation matrix of the layer. We setup an optimization problem to compute a desired layer transformation. Our optimization attempts to render a kernel increasingly more similar to the ideal kernel matrix. In an ideal kernel matrix, data points from a same class have kernel value equal to one while data points from different classes have zero similarity.\nTo evaluate a goodness of representations obtained layer after layer, we compared our results with a standard DNN trained with back-propagation which has exactly same architecture as ours. We observe that classification accuracies obtained with our approach are comparable to DNN accuracies. In addition to this, we also perform a kernel PCA analysis similar to [11],[12]. Experimental evaluation demonstrate that our layerwise training method indeed produce better representations layer by layer.\nWe performed extensive experiments on the publicly available image recognition (classification) datasets. Experimental results demonstrate that, instead of fixing an architecture a priori, there is a possibility of selectively adding layers to the network with guaranteed improved performance. It hints towards the feasibility of a modular approach for deep learning."}, {"heading": "II. RELATED WORKS", "text": "Layer wise training of deep networks in an unsupervised manner is a well known technique in the literature. Bengio et. al. [2] proposed greedy layer-wise unsupervised training strategy for training a multi-layer deep network. It was demonstrated that the unsupervised training leads to a good generalization performance by appropriately initializing weights\nar X\niv :1\n70 3.\n07 11\n5v 1\n[ cs\n.L G\n] 2\n1 M\nar 2\n01 7\nin a region near a good local minimum which provides feature representations that are high-level abstractions of the input. Larochelle et. al. [9] confirmed the hypothesis that the greedy layer-wise unsupervised training strategy indeed helps the optimization by initializing weights near a good local minimum. Also, it implicitly acts as a regularization that brings better generalization and produces good internal data representations.\nAutoencoders play an important role in unsupervised learning for deep architectures. Baldi et. al. [1] thoroughly studied the linear and non-linear auto encoders in the aspects such as their learning complexity, their horizontal and vertical composability in deep architectures and their fundamental connections to clustering, Hebbian learning, and information theory. Using a different aspect, Xu et.al. [13] demonstrated how information potential can be used to train a MLP (multilayer perceptron) layer-by-layer. It was demonstrated that the hidden layer of a MLP serves as an information filter which tries to best represent the desired output in that layer in the statistical sense of mutual information.\nThere has been efforts to analyze the hierarchical feature representation built by deep networks. Montavon et. al. [11],[12] performed a kernel analysis of a deep networks such as Convolution Neural Network (CNN), Multi-layer Perceptron (MLP) and Pretrained Multi-layer Perceptron (PMLP) trained for a supervised multi-class classification task. Feature representation at each layer is analyzed for its complexity and accuracy with kernel PCA using a Gaussian kernel. It was observed that all deep networks create increasingly better representations of the learning problem layer by layer. Also, the structure (or type) of a deep network has an impact on the way representations are built. It was demonstrated that a layer wise representation built by CNN differs from that of MLP. Also, MLP starts the discrimination from a first layer itself while CNN postpones the discrimination task to later layers."}, {"heading": "III. METHODOLOGY", "text": "In this section, we describe an approach used for training MLP layer by layer. We use image datasets to validate the proposed approach. However, our training procedure is quite generic in nature and should work with other datasets as well."}, {"heading": "A. Data pre-processing", "text": "We perform pre-processing on the input features prior to using them for training a layer. Each feature vector is normalized independently by subtracting its mean value and dividing by its norm. We observe that this process is required to avoid the saturation of neurons due to non-linarity."}, {"heading": "B. Layer training", "text": "A MLP build a hierarchy of feature representation where a subsequent layer build a representation on the top of the features computed by previous layers. An input to our first layer is the set of n labeled images [(t1, l1), ..., (tn, ln)] where t denotes a vectorized training image and l denotes the corresponding label. If M and N denotes the dimension of an input\nimage, t \u2208 Rd where for a color image, d = MN \u00d7 3 while for a grayscale image, d = MN . Input data is projected onto a p dimensional space where p indicates the layer dimension. Fig. 1 shows our network architecture.\nAn operation at the kth layer of a MLP can be represented as follows\nXk = tanh(Dk\u22121Wk) Dk\u22121 \u2208 Rn\u00d7d Wk \u2208 Rd\u00d7p (1)\nwhere Dk\u22121 denotes the training data matrix, Wk denotes the weight matrix for the kth layer. Feature vectors of the training data matrix Dk\u22121 are appended with one to account for the bias term.\nSince the first layer directly interacts with the input data, D0 indicates the preprocessed input image data. At the start, our attempt is to calculate an appropriate transformation matrix W1 such that the feature representation at the output of the first layer is more favorable for the classification task. Since we are performing the multi-class classification task, in the ideal kernel matrix, points from the same class should depict the maximum similarity while points from different classes should have least similarity. Therefore, we specify a target kernel function as follows\nT (i, j) = { 1, if li = lj 0, otherwise\nwhere li and lj denotes the labels of the ith and jth training points, respectively.\nThe kernel function to be aligned with a target function is defined through the layer transformation matrix W1 as follows. Let K denotes the kernel matrix computed on the output of the layer. We use a Gaussian kernel defined as follows\nK(i, j) = exp \u2212||xi \u2212 xj ||2\n2\u03c32 1 \u2264 i \u2264 n 1 \u2264 j \u2264 n (2)\nwhere xi and xj denotes the feature representation for ith and jth data sample at the output of the first layer. Each feature vector is made unit norm as follows\nxi = xi/||xi||2 (3)\nThe squared Euclidean norm between any two vectors can be expanded as follows\n||xi \u2212 xj ||22 = ||xi||22 + ||xj ||22 \u2212 2xTi xj (4)\nUsing Eq. 2,3 and 4, a similarity between two vectors can be obtained as\nK(i, j) = exp \u22122(1\u2212 xTi xj)\n2\u03c32 (5)\nA kernel matrix K can thus be calculated as\nK = exp \u2212(1\u2212XTX)\n\u03c32 (6)\nNow, we solve a following optimization problem\nmin W1\n1\nn2 ||K \u2212 T ||2F + \u03bb||W1||22 (7)\nHere, ||W1||22 denotes the L2 regularization term where \u03bb controls the degree of regularization.\nThe optimization is solved using a gradient descent where the weight matrix W1 is initialized with values from a normal distribution with zero mean and unit standard deviation N (0, 1). The optimal solution obtained is used as the transformation matrix for the first layer. Input data is transformed as described in Eq. 1 which provides the feature representation at the first layer.\nThe subsequent layers are trained using the same procedure as described above where the feature representation provided by the previous layer is considered as an input to the current layer. Data pre-processing is done prior to the calculation of each layer transformation. The training procedure for a layer is described in Algorithm Block 1.\nAlgorithm 1 Training procedure for a kth layer of a MLP given previously trained (k \u2212 1) layers\nprocedure TRAINING A kth LAYER Wk \u2190 Random initilization ( 10\u22123 \u00d7 N (0, 1)) Until convergence: Xk = tanh(Dk\u22121Wk) Make feature representations zero mean and unit norm K = exp\n\u2212(1\u2212XTk Xk) \u03c32\ncost = 1n2 ||K \u2212 T || 2 F + \u03bb||Wk||22 gW = ddWij cost Wk = Wk \u2212 \u00b5 \u2217 gW\nSince the transformation which minimizes the error between current kernel and an ideal kernel is sought, the kernel distance between points from the same class decrease while distance between points from different classes increase. Therefore, the transformation matrix computed at each layer projects data onto the space which is more favorable for the classification.\nTo perform the classification, any off-the-shelf non-linear classifier can be trained on the features at the output of a layer. To speed-up the computations at the test time, we train a fully connected layer (of dimension 100) and a softmax unit on these features. Note that the fully connected layer is trained directly on the features learned by a layer and training does NOT involve updation of previously calculated features. We will denote this fully connected layer as FC100."}, {"heading": "IV. NETWORK EVALUATION", "text": "To validate the efficacy of our approach, we designed two evaluation procedures as described below."}, {"heading": "A. Kernel PCA analysis procedure", "text": "Let Xk denotes the feature representation of training data at kth layer. Let [(xk1, l1), (xk2, l2), ..., (xkn, ln)] denote individual feature vectors and corresponding labels of the training data. xli denotes the feature representation of ith data point and li denotes the training label for the data point (image). The feature representation at each layer is analyzed similar to the procedure as described in [12].\nThe kernel matrix K is computed on the feature set Xk as described in Eq. 2. Eigen value decomposition of the kernel matrix is obtained as\nK = U\u039bUT (8)\nwhere Eigenvectors (columns of U ) have unit length and eigenvalues (diagonal entries in \u039b) are sorted by decreasing magnitude.\nLet Ud and \u039bd denotes the d dimensional approximation of Eigen decomposition. Ud denotes the kernel representation of the data points. A logistic regression classifier is trained on this low dimension representation. The optimal parameters \u03b2\u2217 of the logistic regression are learned as follows\n\u03b2\u2217 = arg min \u03b2 n\u220f i=1 softmax([Ud\u03b2]i)li (9)\nwhere \u03b2\u2217, Y \u2208 Rn\u00d7c where c denotes number of classes. The softmax is defined as follows\nsoftmax(z) = ez\u2211 j e zj\n(10)\nThe class for the ith test points is then estimated as\nl\u0302i = arg max([Ud\u03b2 \u2217]i) (11)\nThe classification error for the d dimensional representation is then calculated as follows\ne(d) = 1\u2212 1 n \u2211 1l\u0302==l (12)\nwhere l and l\u0302 denote ground truth and estimated labels respectively."}, {"heading": "B. Comparison with DNN", "text": "To evaluate the classification performance of our approach, we compared our results with a DNN. To have a valid comparison, we train a DNN keeping exactly the same architecture as ours e.g. if we only train a single layer, the DNN will have a fully connected layer of dimension p, FC100 layer and a softmax unit. We also included the L2 regularization while training the DNN. The whole network is trained in the supervised fashion using back-propagation. In the experimental results, we demonstrate the classification accuracy comparison on multiple datasets with varying sizes of training samples."}, {"heading": "V. EXPERIMENTAL RESULTS", "text": "To validate the efficacy of our method, we performed experiments with real world image datasets such as MNIST handwritten digit dataset [10], CIFAR - 10 image dataset [8]."}, {"heading": "A. MNIST handwritten digit dataset", "text": "MNIST dataset consist of grayscale images of handwritten digits. Each image is of dimension 28\u00d728. The dataset consist of 60k training images and 10k testing images.\nIn order to perform kernel PCA analysis on layer representations, we sequentially trained two layers, on the 5k training samples of the MNIST dataset. The layer dimension p is set to 784 for each layer. \u03c3 value was set to 1 for all the experiments. Fig. 3 shows the training and testing errors obtained at three layers through the kernel analysis. From Fig. 3(a), it can be seen that, as deeper representations are built, more energy is getting concentrated in fewer Eigen vectors with better training accuracy (lower training error). Fig. 3(b) shows the graph of the testing error. It can be seen that, our representation agrees with the kernel analysis results reported in [12].\nFig. 2(a) shows filters obtained at the first layer. Fig. 2(b) shows the filters obtained in the first layer of MLP and Pretrained MLP (PMLP) when an architecture of four layers is trained [12]. Note that, unlike the MLP filters displayed in Fig. 2(b), our approach produce rich features. Interestingly, our first layer features visually look similar to those of PMLP.\nWe also compared the classification performance of our approach with the DNN. Initially, we trained a layer using the proposed optimization and calculated the classification test accuracy by subsequently training a FC100 and softmax layer. We then trained a DNN with fully connected layer of dimension 784, FC100 and a softmax layer. The FC100 + softmax layer in our approach and a DNN used for comparison are trained until convergence. Fig. 4(a) shows the test accuracy comparison for varying sizes of training set. Subsequently, we trained an another layer on top of the features exacted from first layer. We also trained a DNN with same architecture. Fig. 4(b) shows the comparison plot. From these plots, it can observed that our approach indeed computes discriminative features which are suitable for classification. This underlines the efficacy of our layer-wise training and it effectiveness for object recognition."}, {"heading": "B. CIFAR-10", "text": "CIFAR- 10 dataset consist of color images of dimension 32 \u00d7 32 corresponding to 10 object classes. It contains 50K training samples and 10k testing samples. We performed an experiment similar to the MNIST dataset where layers are learned sequentially. The layer dimension was set to 1500 and \u03c3 value was set to 1 for the experimentation. Using the proposed optimization, we trained two layers, one after the\nother. The kernel PCA analysis was performed on the layered representation built with 5k training samples. Fig. 5 shows the training and testing error pattern with different number of kernel PCA components. Note that, here as well, simpler and more accurate representations of the input are obtained using our approach. Fig. 2(c) shows the first layer filters. Note that, our approach learns rich features which enable better discrimination.\nNext, we compared the results with a DNN for varying sizes of the training set. Fig. 6 shows the test accuracy comparison with a DNN trained in the supervised setup. Note that, even with less amount of training data, our approach outperforms the DNN. This underlines the effectiveness of layer-wise training where the effect of overfitting can be minimized since the number of parameters to be tuned at a time are small."}, {"heading": "VI. CONCLUSION", "text": "In this paper, we proposed a kernel similarity based optimization for layer-wise training of deep networks. The optimization attempts to compute a linear transformation followed by non-linearity which renders kernel at each layer increasing more similar to the ideal kernel. The kernel analysis of the layer-wise training demonstrate that with each layer, better representation of the input data are obtained. Since we train a layer at a time, the number of parameters to be tuned are relatively small. Hence, the effect of overfitting is minimized which is clearly evident from the result on CIFAR-10 dataset. We also compared our classification accuracies with the DNN\ntrained in the supervised fashion. Experimental results show that our approach produce comparable results with that of DNN."}], "references": [{"title": "Autoencoders, unsupervised learning, and deep architectures. Unsupervised and Transfer Learning Challenges in Machine Learning, Volume 7 p", "author": ["P. Baldi"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Greedy layer-wise training of deep networks. Advances in neural information processing systems", "author": ["Y. Bengio", "P. Lamblin", "D. Popovici", "H Larochelle"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2007}, {"title": "Deep neural networks for object detection", "author": ["A.T. Christian Szegedy", "D. Erhan"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2013}, {"title": "Small-footprint keyword spotting using deep neural networks", "author": ["P.C. Guoguo Chen", "H. G"], "venue": "IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups", "author": ["G. Hinton", "L. Deng", "D. Yu", "G.E. Dahl", "Mohamed", "A.r", "N. Jaitly", "A. Senior", "V. Vanhoucke", "P. Nguyen", "Sainath", "T.N"], "venue": "Signal Processing Magazine,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "Learning multiple layers of representation", "author": ["G.E. Hinton"], "venue": "Trends in cognitive sciences 11(10),", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "Learning multiple layers of features from tiny images", "author": ["A. Krizhevsky", "G. Hinton"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2009}, {"title": "Exploring strategies for training deep neural networks", "author": ["H. Larochelle", "Y. Bengio", "J. Louradour", "P. Lamblin"], "venue": "The Journal of Machine Learning Research 10,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2009}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. Lecun", "L.B.Y. Bottou", "P. H"], "venue": "Proceedings of IEEE", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1998}, {"title": "Kernel analysis of deep networks", "author": ["G. Montavon", "M.L. Braun", "K.R. M\u00fcller"], "venue": "The Journal of Machine Learning Research", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2011}, {"title": "Layer-wise analysis of deep networks with gaussian kernels", "author": ["G. Montavon", "K.R. M\u00fcller", "M.L. Braun"], "venue": "Advances in Neural Information Processing Systems. pp", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2010}, {"title": "Training mlps layer-by-layer with the information potential", "author": ["D. Xu", "J.C. Principe"], "venue": "Neural Networks,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1999}], "referenceMentions": [{"referenceID": 2, "context": "In computer vision, it has been successfully applied to problems such as object detection [4], English character recognition [10].", "startOffset": 90, "endOffset": 93}, {"referenceID": 8, "context": "In computer vision, it has been successfully applied to problems such as object detection [4], English character recognition [10].", "startOffset": 125, "endOffset": 129}, {"referenceID": 4, "context": "It also showed promising results for speech data where it has been applied for speech recognition [6] and spoken keyword spotting [5].", "startOffset": 98, "endOffset": 101}, {"referenceID": 3, "context": "It also showed promising results for speech data where it has been applied for speech recognition [6] and spoken keyword spotting [5].", "startOffset": 130, "endOffset": 133}, {"referenceID": 5, "context": "It has been studied that the effectiveness of deep networks lies in the layered representation [7].", "startOffset": 95, "endOffset": 98}, {"referenceID": 9, "context": "[11] performed the kernel analysis of the data representations at each layer of the network trained for a supervised classification task.", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "Interestingly, it has been observed that as deeper and deeper kernels are built, simpler and more accurate representations of the learning problem are obtained [11].", "startOffset": 160, "endOffset": 164}, {"referenceID": 9, "context": "In addition to this, we also perform a kernel PCA analysis similar to [11],[12].", "startOffset": 70, "endOffset": 74}, {"referenceID": 10, "context": "In addition to this, we also perform a kernel PCA analysis similar to [11],[12].", "startOffset": 75, "endOffset": 79}, {"referenceID": 1, "context": "[2] proposed greedy layer-wise unsupervised training strategy for training a multi-layer deep network.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "[9] confirmed the hypothesis that the greedy layer-wise unsupervised training strategy indeed helps the optimization by initializing weights near a good local minimum.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "[1] thoroughly studied the linear and non-linear auto encoders in the aspects such as their learning complexity, their horizontal and vertical composability in deep architectures and their fundamental connections to clustering, Hebbian learning, and information theory.", "startOffset": 0, "endOffset": 3}, {"referenceID": 11, "context": "[13] demonstrated how information potential can be used to train a MLP (multilayer perceptron) layer-by-layer.", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "[11],[12] performed a kernel analysis of a deep networks such as Convolution Neural Network (CNN), Multi-layer Perceptron (MLP) and Pretrained Multi-layer Perceptron (PMLP) trained for a supervised multi-class classification task.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "[11],[12] performed a kernel analysis of a deep networks such as Convolution Neural Network (CNN), Multi-layer Perceptron (MLP) and Pretrained Multi-layer Perceptron (PMLP) trained for a supervised multi-class classification task.", "startOffset": 5, "endOffset": 9}, {"referenceID": 10, "context": "The feature representation at each layer is analyzed similar to the procedure as described in [12].", "startOffset": 94, "endOffset": 98}, {"referenceID": 10, "context": "(a) first layer 210 features of MNIST dataset using our approach, (b) first layer features for MLP and Pre-trained MLP (PMLP) trained on target and alternate tasks as explained in [12].", "startOffset": 180, "endOffset": 184}, {"referenceID": 8, "context": "To validate the efficacy of our method, we performed experiments with real world image datasets such as MNIST handwritten digit dataset [10], CIFAR - 10 image dataset [8].", "startOffset": 136, "endOffset": 140}, {"referenceID": 6, "context": "To validate the efficacy of our method, we performed experiments with real world image datasets such as MNIST handwritten digit dataset [10], CIFAR - 10 image dataset [8].", "startOffset": 167, "endOffset": 170}, {"referenceID": 10, "context": "It can be seen that, our representation agrees with the kernel analysis results reported in [12].", "startOffset": 92, "endOffset": 96}, {"referenceID": 10, "context": "2(b) shows the filters obtained in the first layer of MLP and Pretrained MLP (PMLP) when an architecture of four layers is trained [12].", "startOffset": 131, "endOffset": 135}], "year": 2017, "abstractText": "Deep learning has shown promising results in many machine learning applications. The hierarchical feature representation built by deep networks enable compact and precise encoding of the data. A kernel analysis of the trained deep networks demonstrated that with deeper layers, more simple and more accurate data representations are obtained. In this paper, we propose an approach for layer-wise training of a deep network for the supervised classification task. A transformation matrix of each layer is obtained by solving an optimization aimed at a better representation where a subsequent layer builds its representation on the top of the features produced by a previous layer. We compared the performance of our approach with a DNN trained using back-propagation which has same architecture as ours. Experimental results on the real image datasets demonstrate efficacy of our approach. We also performed kernel analysis of layer representations to validate the claim of better feature encoding.", "creator": "LaTeX with hyperref package"}}}