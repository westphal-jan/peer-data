{"id": "1703.09439", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "28-Mar-2017", "title": "A practical approach to dialogue response generation in closed domains", "abstract": "we describe a prototype dialogue network response generation model for the customer service domain at their amazon. therefore the model, which is trained in a weakly supervised human fashion, measures assessing the similarity between customer questions and agent answers using a dual encoder network, a siamese - like neural network architecture. answer templates directly are extracted from embeddings as derived from past agent answers, without turn - by - turn annotations. solution responses to customer inquiries are generated by selecting the best template from the final set of templates. we show that, normally in conducting a closed domain web like customer service, the selected templates cover $ & gt ; $ 70 \\ % of past customer inquiries. furthermore, the relevance of assuming the model - selected templates result is only significantly higher than templates selected by a standard tf - idf composite baseline.", "histories": [["v1", "Tue, 28 Mar 2017 07:47:27 GMT  (142kb,D)", "http://arxiv.org/abs/1703.09439v1", null]], "reviews": [], "SUBJECTS": "cs.CL cs.NE", "authors": ["yichao lu", "phillip keung", "shaonan zhang", "jason sun", "vikas bhardwaj"], "accepted": false, "id": "1703.09439"}, "pdf": {"name": "1703.09439.pdf", "metadata": {"source": "CRF", "title": "A practical approach to dialogue response generation in closed domains", "authors": ["Yichao Lu", "Phillip Keung", "Shaonan Zhang", "Jason Sun", "Vikas Bhardwaj"], "emails": ["yichaolu@amazon.com,", "keung@amazon.com"], "sections": [{"heading": null, "text": "model for the customer service domain at Amazon. The model, which is trained in a weakly supervised fashion, measures the similarity between customer questions and agent answers using a dual encoder network, a Siamese-like neural network architecture. Answer templates are extracted from embeddings derived from past agent answers, without turn-by-turn annotations. Responses to customer inquiries are generated by selecting the best template from the final set of templates. We show that, in a closed domain like customer service, the selected templates cover >70% of past customer inquiries. Furthermore, the relevance of the model-selected templates is significantly higher than templates selected by a standard tf-idf baseline. Index Terms: dialogue response generation, human-computer interaction, conversational agents"}, {"heading": "1. Introduction", "text": "Millions of shoppers contact Amazon\u2019s customer service department every year, where customers may choose between telephone, online chat, or email channels. Most customers will contact Amazon via telephone, which is an especially laborintensive form of communication. The need for agent labor is highly seasonal, and hiring more agents requires significant ramp-up time for training. Furthermore, Amazon\u2019s order volume increases significantly year-over-year, which makes scaling customer service sub-linearly with order volume especially crucial.\nMachine learning and dialogue generation provide an opportunity to make existing agents more efficient, and may allow for the total automation of issue resolution (at least for a select subset of issues.) To that end, we present the first steps towards a practical dialogue system for the customer service domain at Amazon. In this work, we focus solely on the response generation module of such a system: given a customer inquiry, generate the text of the response that most likely answers the question asked. An effective dialogue system would automate the handling of a large percentage of customer interactions, potentially generating significant savings in labor costs, reducing the perceived response times for customers, and allowing customer service to scale better with increasing demand.\nFor well-established domains like customer service, large human-generated corpuses already exist. Indeed, Amazon\u2019s internal online chat corpus is a rich source of data for building a response generation model, independently of transcribed speech from past phone calls. Amazon\u2019s chat corpus also contains customer-selected issue labels, order-related entities, etc. We will use this corpus for model training and experiments.\nWhile open domain dialogue generation remains a topic of ongoing research, we hypothesize that in closed domains like our own, a finite set of response templates would cover the vast majority of interactions. In fact, customer service agents across\nAmazon already use a collection of \u2018blurbs\u2019 which they copy and paste as replies. However, these blurbs are not centrally managed, can be particular to each agent, are unannotated, and number in the thousands. In practice, due to the overhead of searching for the right blurb, each agent only uses a handful of blurbs regularly.\nTherefore, we approach response generation as a two-fold problem: determining the templates that should be created based on past agent replies to customer questions, and choosing the correct template as the response to an inquiry.\nA template-based approach addresses some issues that affect existing dialogue generation systems, namely relevance, text quality, diversity, and (for goal-oriented systems) the need for annotated customer intents. The templates that we extract can be filtered for high relevance and specificity, corrected for consistency of tone, and enriched with the addition of slots for customer profile metadata and other forms of context. Furthermore, the use of fixed templates allows us to better tune text-tospeech systems to produce more natural-sounding speech.\nWe built a prototype response generation model based on online chats between customers and agents, and evaluated it against an random sample of past chat conversations. We showed that the selected templates cover a large portion of past customer inquiries, and that human evaluators (who are customer service agents) preferred the model-selected templates to the templates retrieved by a tf-idf baseline. The system is not yet customer-facing, and we conclude by discussing some of the work remaining."}, {"heading": "2. Related Work", "text": "Recently, deep learning-based systems for question answering and dialogue have been the focus of both academic and industrial research. In dialogue systems, Vinyals et al [1] and Serban et al [2] demonstrated that encoder-decoder networks with LSTM units can generate dialogue based on IT help desk and movie script corpuses. For question answering problems, Sukhbaatar et al [3] are able to achieve competitive performance on the so-called bAbI tasks [4] with memory networks and limited supervision [5]. Last year, Google launched Smart Reply, an email response recommendation system that recommends short replies for 10% of Gmail volume in their Inbox mobile application [6]. Google\u2019s new messaging app Allo also uses same technology to recommend responses for mobile chats.\nIn this paper, we applied a Siamese-like network [7] with 2 encoders to build a response generation system for a subset of customer service chats related to item delivery problems. (In particular, we selected chat contacts where the customer indicated a \u201cWhere\u2019s My Stuff?\u201d issue.) In the context of information retrieval, Lowe et al [8] also used a similar network to retrieve the next reply from a corpus of Ubuntu technical help IRC chats.\nOur approach is most similar to that described in Smart Reply, but with certain differences. Firstly, while Smart Reply\nar X\niv :1\n70 3.\n09 43\n9v 1\n[ cs\n.C L\n] 2\n8 M\nar 2\n01 7\nand our system both generate replies from a fixed set of templates, we do not need to perform beam search or generate the text directly. This simplifies the engineering effort required for deployment and speeds up response generation, since our responses can be longer than the 10 token limit that the Inbox UI suggests. Secondly, while we both use clustering techniques and manual inspection to extract an initial set of templates, we perform the clustering in a fully automatic fashion, without the need for intent clusters initialized with human expertise. Clustering around pre-specified intents is important for an open domain corpus like emails, since there would be a huge number of topic clusters in the dataset, whereas in closed domains this is less important.\nThe paper is organized as follows: Section 3.2 provides details about the dual encoder network model. Section 3.3 discusses how we create the pool of template answers that our dual encoder network model selects from. Section 4 presents evaluations of our system and Section 5 discusses future improvements."}, {"heading": "3. Models for Response Generation", "text": ""}, {"heading": "3.1. Dataset", "text": "We used one year of Amazon customer service chat transcripts on item delivery issues from 09/2015 - 09/2016 for creating training data. The raw text is split into agent and customer turns, tokenized, filtered for sensitive customer information (e.g. names, credit card numbers, etc.), and converted to lowercase.\nThe data needed for training the dual encoder network are pairs of customer questions and agent responses with binary labels of whether or not they are a match.\nTo extract meaningful question-answer pairs, we select every customer turn in the conversation that ends with a question mark; the agent turn after it is considered the correct reply. These matching pairs constitute our positive samples.\nTo create non-matching pairs (i.e. negative samples), we use the same set of customer questions, but for each question, we randomly select an agent turn that follows some other customer question in the corpus. We created 3.3 million training samples with a positive to negative ratio of 1:2 in our training dataset. This dataset was extracted from a small fraction of the total contact volume we handled that year. Table 1 shows some positive and negative examples from our training data."}, {"heading": "3.2. Dual Encoder Network", "text": "Figure 1 shows the schematic for the network.\nOur dual encoder network takes a customer question (e.g. \u201cWill I receive a new tracking number?\u201d) and an answer (e.g. \u201cYes we\u2019ll have it emailed to you.\u201d) as input. The question\nand answer are fed into two separate LSTM [9] encoders. The encoders generate low dimensional embeddings for the question and the answer. The embeddings are then concatenated and passed to a multi-layer perceptron (MLP) which outputs the probability that the question and answer match.\nLSTM networks have been widely used for encoding sentences into low dimensional embeddings for various NLPrelated tasks. [10] showed that LSTM\u2019s achieved state-ofthe-art performance on various sequential classification tasks. Presently, LSTM-based classifiers are standard baselines for text classification tasks. [11] applied LSTM\u2019s to create sentence embeddings for machine translation. [12] and [13] showed that LSTM-based embeddings can be used for transfer learning across diverse tasks, including semantic relatedness, paraphrase extraction, and information retrieval. In this work, we used LSTM\u2019s for encoding question and answer sentences, as shown in Figure 1. At time t, the word wt is mapped to a embedding vt and then fed into the LSTM one at a time, updating the hidden state ht of the LSTM. The hidden state of the LSTM at the last time step is used as the embedding of the entire sentence.\nWe trained the dual encoder model with Keras and Theano [14]. Among the hyperparameter combinations we tried, the optimal error on the development set was obtained with the hyperparameters listed in Table 2. We used Adam [15] to perform the stochastic optimization of the network parameters. The network has a total of 5 million parameters.\nThis model achieves 81% accuracy on the development set, where the positive to negative ratio is also 1:2."}, {"heading": "3.3. Response Template Extraction and Prediction", "text": "The other key idea of the system is the pool of pre-constructed answer templates. An ideal pool would contain all of the common agent responses on item delivery issues; if the appropriate answers are not in the pool, then the system cannot recommend a reasonable answer. On the other hand, the pool size can\u2019t be too large due to the computational cost. While a pool of 10k randomly sampled agent answers will cover almost all common questions on item delivery issues at prediction time, the dual encoder network would have to score 10k question-answer pairs for each input customer question.\nAs the first step, we randomly sampled 400k agent answers from historical item delivery-related chats, and generated embeddings for them by using the trained answer encoder (Figure 1). Our analysis shows the embeddings are able to capture semantic similarity beyond simple vocabulary overlap (Table 3). The answer templates are selected with the help of K-means clustering. We applied mini-batch k-means with k-means++ initializations [16, 17] to cluster the 400k answer embeddings into 500 clusters. To form the template for each cluster, we take the text of the agent answer with embedding closest to the cluster center. Finally, we created a pool of 200 answer templates by human review.\nAt prediction time, the system will pair the customer question with every pre-constructed answer template, and use the trained dual encoder network to produce a measure of how well each answer matches the question. The system will then recommend the top-k answers to the agents ranked by this probability. Note that the answer embeddings for the full set of the answer templates are precomputed and stored for computational efficiency.\nA more straightforward approach to performing dialogue response generation would essentially be a supervised text clas-\nsification task. Based on the customer intent predicted by the model, the system can present the customer with some predetermined response. A common example of this would be prewritten dialogue combined with state tracking, which is used in IVR systems in travel and restaurant reservation applications [18]. However, even for something as simple as item delivery issues, the total number of possible types of customer questions can be close to 100-200, and extending such an approach to all of the domains in customer service (e.g. Kindle content, Amazon Instant Video issues, Prime subscription issues, etc.) would be impractical. In contrast, our approach has the benefit of not needing annotated data. The only data needed to train our model are customer questions and the agent answers after them, which already exist in our historical chat transcripts."}, {"heading": "4. Experiments", "text": ""}, {"heading": "4.1. Selected Examples", "text": "The dual encoder produces 2 sets of embeddings: one for customer questions and another for agent answers. Table 3 shows the 5 nearest neighbors for a few selected questions in this embedding space. We also present the 5 nearest neighbors for some selected answers. In contrast to the nearest neighbors found with tf-idf vectorization, LSTM embeddings seem to capture more semantic similarity, since tf-idf is essentially based on search term overlap. For example, LSTM embeddings find various kinds of responses to customer greetings even when the search terms do not overlap very much (e.g. the model finds both \u201cA pleasure to meet you too!\u201d and \u201cGlad to hear that!\u201d), while tf-idf only finds ones that share tokens in common."}, {"heading": "4.2. Answer Ranking", "text": "We compare the dual encoder network with the tf-idf baseline on an answer ranking task. For this task, we paired 10k randomly sampled customer questions with the correct answer and 9 randomly sampled incorrect answers. In this task, the \u201ccorrect answer\u201d is simply the agent response, which is not templatized. For each question, the 10 answers were ranked based on the probabilistic output of the dual encoder network. This ranking was compared to the one produced by the sum of the tf-idf\nterm weights. We compare the mean reciprocal rank and precision@3 for both algorithms in Table 5. On all metrics, the dual encoder network significantly outperforms the tf-idf baseline. We also present examples of customer questions and the matching answers in Table 4.\nThe tf-idf baseline does not perform well on this task because even when the vocabulary overlap contains signal for retrieving the answer given the question (e.g. both the question and answer contain \u201cgift card\u201d), there are many cases where the answer to a question will not have any overlap at all (e.g. yes or no-type questions)."}, {"heading": "4.3. End-to-end Human Evaluation", "text": "We recruited a rotating pool of agents to evaluate how well the system works end-to-end. We randomly selected 100 questions, and used our system and the tf-idf baseline to each recommend 3 answers (e.g. top 3 most probable answers from the 200 answer templates). The agent is asked to go through the questionanswer pairs and assign a relevance score from 1 to 3 to each answer, with 3 being very relevant, 2 being somewhat relevant, and 1 being irrelevant. The evaluations are done on the same 100 questions for both algorithms.\nNote that given a question there maybe more than one appropriate answer. For example, answers like \u201cI\u2019m sorry you can\u2019t\u201d and \u201cYes, you can cancel it from your order page\u201d are both very relevant answers to the question \u201cCan I cancel the order since it\u2019s late?\u201d. Table 4 shows sample model-based answers to questions, and Figure 2 shows the human evaluation relevance score distribution for both our system and tf-idf. In general, our system shows more high relevance recommendations compared with the tf-idf baseline, where >70% of the model-\nselected templates are relevant to the question being asked. Another metric we examined is within the top three answers, how often is there at least one \u201cvery relevant\u201d answer. Among the 100 randomly sampled questions, our system is able to recommend at least one very relevant answer (score = 3) among the top 3 for 48 questions, while the tf-idf baseline does so for only 31 questions.\nThe average relevance score for the tf-idf model is 1.66 (\u00b1 0.10, 95% CI), whereas the average relevance score for the dual encoder baseline is 2.08 (\u00b1 0.09, 95% CI)."}, {"heading": "5. Conclusion and Future Work", "text": "We have shown that a template-based approach to dialogue response generation works well in the customer service domain. We demonstrate that even in the absence of a fully automated dialogue system, it is nonetheless possible to select highly relevant answers to customer questions, which can translate into a reduction in the time spent per customer contact. Though we are currently testing this system for online chats, we believe that the template-based approach would extend naturally to a speech-driven system for telephone conversations.\nThere are a number of future directions we will pursue to make the system more complete. We would like to determine the correct polarity for a given template based on the state of a customer\u2019s orders. For example, if a customer is inquiring about a shipment that has not yet arrived, we can reply either\nthat the shipment is expected to be on-time or late from internal shipment data. We would also like to rerank the list of suggested templates using customer context, and expand the set of slots in our templates that can be filled automatically by internal systems."}, {"heading": "6. Acknowledgments", "text": "The authors would like to thank Kevin Small for the helpful discussions and assistance in reviewing the drafts. We would also like to thank the customer service associates who helped us evaluate our system and provided domain-specific feedback on its design."}, {"heading": "7. References", "text": "[1] O. Vinyals and Q. Le, \u201cA neural conversational model,\u201d ICML\nDeep Learning Workshop, 2015.\n[2] I. Serban, A. Sordoni, Y. Bengio, A. Courville, and J. Pineau, \u201cHierarchical neural network generative models for movie dialogues,\u201d arXiv, 2015.\n[3] S. Sukhbaatar, A. Szlam, J. Weston, and R. Fergus, \u201cWeakly supervised memory networks,\u201d arXiv, 2015.\n[4] J. Weston, A. Bordes, S. Chopra, A. M. Rush, B. van Merrie\u0308nboer, A. Joulin, and T. Mikolov, \u201cTowards ai-complete question answering: A set of prerequisite toy tasks,\u201d arXiv, 2015.\n[5] J. Weston, S. Chopra, and A. Bordes, \u201cMemory networks,\u201d arXiv, 2014.\n[6] A. Kannan, K. Kurach, S. Ravi, T. Kaufmann, A. Tomkins, B. Miklos, G. Corrado, L. Luka\u0301cs, M. Ganea, P. Young et al., \u201cSmart reply: Automated response suggestion for email,\u201d KDD, 2016.\n[7] J. Bromley, J. W. Bentz, L. Bottou, I. Guyon, Y. LeCun, C. Moore, E. Sa\u0308ckinger, and R. Shah, \u201cSignature verification using a \u201dsiamese\u201d time delay neural network,\u201d IJPRAI, 1993.\n[8] R. Lowe, N. Pow, I. Serban, and J. Pineau, \u201cThe ubuntu dialogue corpus: A large dataset for research in unstructure multi-turn dialogue systems,\u201d SIGDial, 2015.\n[9] S. Hochreiter and J. Schmidhuber, \u201cLong short-term memory,\u201d Neural computation, 1997.\n[10] A. Graves, Supervised Sequence Labelling with Recurrent Neural Networks, ser. Studies in Computational Intelligence. Springer, 2012.\n[11] I. Sutskever, O. Vinyals, and Q. V. Le, \u201cSequence to sequence learning with neural networks,\u201d NIPS, 2014.\n[12] R. Kiros, Y. Zhu, R. R. Salakhutdinov, R. Zemel, R. Urtasun, A. Torralba, and S. Fidler, \u201cSkip-thought vectors,\u201d NIPS, 2015.\n[13] J. Wieting, M. Bansal, K. Gimpel, and K. Livescu, \u201cTowards universal paraphrastic sentence embeddings,\u201d ICLR, 2015.\n[14] J. Bergstra, O. Breuleux, F. Bastien, P. Lamblin, R. Pascanu, G. Desjardins, J. Turian, D. Warde-Farley, and Y. Bengio, \u201cTheano: A cpu and gpu math compiler in python,\u201d Proc. 9th Python in Science Conf, 2010.\n[15] D. Kingma and J. Ba, \u201cAdam: A method for stochastic optimization,\u201d ICLR, 2015.\n[16] D. Sculley, \u201cWeb-scale k-means clustering,\u201d WWW, 2010.\n[17] D. Arthur and S. Vassilvitskii, \u201ck-means++: The advantages of careful seeding,\u201d Proceedings of the eighteenth annual ACMSIAM symposium on Discrete algorithms, 2007.\n[18] J. Williams, A. Raux, D. Ramachandran, and A. Black, \u201cThe dialog state tracking challenge,\u201d SIGDIAL, 2013."}], "references": [{"title": "A neural conversational model", "author": ["O. Vinyals", "Q. Le"], "venue": "ICML Deep Learning Workshop, 2015.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2015}, {"title": "Hierarchical neural network generative models for movie dialogues", "author": ["I. Serban", "A. Sordoni", "Y. Bengio", "A. Courville", "J. Pineau"], "venue": "arXiv, 2015.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "Weakly supervised memory networks", "author": ["S. Sukhbaatar", "A. Szlam", "J. Weston", "R. Fergus"], "venue": "arXiv, 2015.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2015}, {"title": "Towards ai-complete question answering: A set of prerequisite toy tasks", "author": ["J. Weston", "A. Bordes", "S. Chopra", "A.M. Rush", "B. van Merri\u00ebnboer", "A. Joulin", "T. Mikolov"], "venue": "arXiv, 2015.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "Memory networks", "author": ["J. Weston", "S. Chopra", "A. Bordes"], "venue": "arXiv, 2014.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2014}, {"title": "Smart reply: Automated response suggestion for email", "author": ["A. Kannan", "K. Kurach", "S. Ravi", "T. Kaufmann", "A. Tomkins", "B. Miklos", "G. Corrado", "L. Luk\u00e1cs", "M. Ganea", "P. Young"], "venue": "KDD, 2016.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2016}, {"title": "Signature verification using a \u201dsiamese\u201d time delay neural network", "author": ["J. Bromley", "J.W. Bentz", "L. Bottou", "I. Guyon", "Y. LeCun", "C. Moore", "E. S\u00e4ckinger", "R. Shah"], "venue": "IJPRAI, 1993.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1993}, {"title": "The ubuntu dialogue corpus: A large dataset for research in unstructure multi-turn dialogue systems", "author": ["R. Lowe", "N. Pow", "I. Serban", "J. Pineau"], "venue": "SIGDial, 2015.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "Long short-term memory", "author": ["S. Hochreiter", "J. Schmidhuber"], "venue": "Neural computation, 1997.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1997}, {"title": "Supervised Sequence Labelling with Recurrent Neural Networks, ser", "author": ["A. Graves"], "venue": "Studies in Computational Intelligence. Springer,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2012}, {"title": "Sequence to sequence learning with neural networks", "author": ["I. Sutskever", "O. Vinyals", "Q.V. Le"], "venue": "NIPS, 2014.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2014}, {"title": "Skip-thought vectors", "author": ["R. Kiros", "Y. Zhu", "R.R. Salakhutdinov", "R. Zemel", "R. Urtasun", "A. Torralba", "S. Fidler"], "venue": "NIPS, 2015.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2015}, {"title": "Towards universal paraphrastic sentence embeddings", "author": ["J. Wieting", "M. Bansal", "K. Gimpel", "K. Livescu"], "venue": "ICLR, 2015.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2015}, {"title": "Theano: A cpu and gpu math compiler in python", "author": ["J. Bergstra", "O. Breuleux", "F. Bastien", "P. Lamblin", "R. Pascanu", "G. Desjardins", "J. Turian", "D. Warde-Farley", "Y. Bengio"], "venue": "Proc. 9th Python in Science Conf, 2010.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2010}, {"title": "Adam: A method for stochastic optimization", "author": ["D. Kingma", "J. Ba"], "venue": "ICLR, 2015.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2015}, {"title": "Web-scale k-means clustering", "author": ["D. Sculley"], "venue": "WWW, 2010.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2010}, {"title": "k-means++: The advantages of careful seeding", "author": ["D. Arthur", "S. Vassilvitskii"], "venue": "Proceedings of the eighteenth annual ACM- SIAM symposium on Discrete algorithms, 2007.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2007}, {"title": "The dialog state tracking challenge", "author": ["J. Williams", "A. Raux", "D. Ramachandran", "A. Black"], "venue": "SIGDIAL, 2013.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2013}], "referenceMentions": [{"referenceID": 0, "context": "In dialogue systems, Vinyals et al [1] and Serban et al [2] demonstrated that encoder-decoder networks with LSTM units can generate dialogue based on IT help desk and movie script corpuses.", "startOffset": 35, "endOffset": 38}, {"referenceID": 1, "context": "In dialogue systems, Vinyals et al [1] and Serban et al [2] demonstrated that encoder-decoder networks with LSTM units can generate dialogue based on IT help desk and movie script corpuses.", "startOffset": 56, "endOffset": 59}, {"referenceID": 2, "context": "For question answering problems, Sukhbaatar et al [3] are able to achieve competitive performance on the so-called bAbI tasks [4] with memory networks and limited supervision [5].", "startOffset": 50, "endOffset": 53}, {"referenceID": 3, "context": "For question answering problems, Sukhbaatar et al [3] are able to achieve competitive performance on the so-called bAbI tasks [4] with memory networks and limited supervision [5].", "startOffset": 126, "endOffset": 129}, {"referenceID": 4, "context": "For question answering problems, Sukhbaatar et al [3] are able to achieve competitive performance on the so-called bAbI tasks [4] with memory networks and limited supervision [5].", "startOffset": 175, "endOffset": 178}, {"referenceID": 5, "context": "Last year, Google launched Smart Reply, an email response recommendation system that recommends short replies for 10% of Gmail volume in their Inbox mobile application [6].", "startOffset": 168, "endOffset": 171}, {"referenceID": 6, "context": "In this paper, we applied a Siamese-like network [7] with 2 encoders to build a response generation system for a subset of customer service chats related to item delivery problems.", "startOffset": 49, "endOffset": 52}, {"referenceID": 7, "context": ") In the context of information retrieval, Lowe et al [8] also used a similar network to retrieve the next reply from a corpus of Ubuntu technical help IRC chats.", "startOffset": 54, "endOffset": 57}, {"referenceID": 8, "context": "The question and answer are fed into two separate LSTM [9] encoders.", "startOffset": 55, "endOffset": 58}, {"referenceID": 9, "context": "[10] showed that LSTM\u2019s achieved state-ofthe-art performance on various sequential classification tasks.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "[11] applied LSTM\u2019s to create sentence embeddings for machine translation.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "[12] and [13] showed that LSTM-based embeddings can be used for transfer learning across diverse tasks, including semantic relatedness, paraphrase extraction, and information retrieval.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[12] and [13] showed that LSTM-based embeddings can be used for transfer learning across diverse tasks, including semantic relatedness, paraphrase extraction, and information retrieval.", "startOffset": 9, "endOffset": 13}, {"referenceID": 13, "context": "We trained the dual encoder model with Keras and Theano [14].", "startOffset": 56, "endOffset": 60}, {"referenceID": 14, "context": "We used Adam [15] to perform the stochastic optimization of the network parameters.", "startOffset": 13, "endOffset": 17}, {"referenceID": 15, "context": "We applied mini-batch k-means with k-means++ initializations [16, 17] to cluster the 400k answer embeddings into 500 clusters.", "startOffset": 61, "endOffset": 69}, {"referenceID": 16, "context": "We applied mini-batch k-means with k-means++ initializations [16, 17] to cluster the 400k answer embeddings into 500 clusters.", "startOffset": 61, "endOffset": 69}, {"referenceID": 17, "context": "A common example of this would be prewritten dialogue combined with state tracking, which is used in IVR systems in travel and restaurant reservation applications [18].", "startOffset": 163, "endOffset": 167}], "year": 2017, "abstractText": "We describe a prototype dialogue response generation model for the customer service domain at Amazon. The model, which is trained in a weakly supervised fashion, measures the similarity between customer questions and agent answers using a dual encoder network, a Siamese-like neural network architecture. Answer templates are extracted from embeddings derived from past agent answers, without turn-by-turn annotations. Responses to customer inquiries are generated by selecting the best template from the final set of templates. We show that, in a closed domain like customer service, the selected templates cover >70% of past customer inquiries. Furthermore, the relevance of the model-selected templates is significantly higher than templates selected by a standard tf-idf baseline.", "creator": "LaTeX with hyperref package"}}}