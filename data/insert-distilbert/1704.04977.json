{"id": "1704.04977", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Apr-2017", "title": "Probabilistic programs for inferring the goals of autonomous agents", "abstract": "intelligent systems programmers sometimes need to infer the absolute probable safety goals of people, cars, and robots, based on partial observations of their motion. this paper introduces a class of probabilistic programs for formulating and solving these problems. the formulation uses randomized path planning algorithms as the basis for probabilistic behavior models of the process by which autonomous computing agents plan to achieve their goals. because these path planning algorithms don't have tractable likelihood functions, new inference algorithms are needed. this paper proposes two specific monte carlo techniques for these \" automated likelihood - free \" models, one of which can use likelihood estimates emitted from neural networks to accelerate inference. the paper demonstrates efficacy on three simple robot examples, each using under two 50 lines of probabilistic code.", "histories": [["v1", "Mon, 17 Apr 2017 14:34:02 GMT  (3995kb,D)", "http://arxiv.org/abs/1704.04977v1", null], ["v2", "Tue, 18 Apr 2017 14:40:03 GMT  (3995kb,D)", "http://arxiv.org/abs/1704.04977v2", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["marco f cusumano-towner", "alexey radul", "david wingate", "vikash k mansinghka"], "accepted": false, "id": "1704.04977"}, "pdf": {"name": "1704.04977.pdf", "metadata": {"source": "CRF", "title": "Probabilistic programs for inferring the goals of autonomous agents", "authors": ["Marco F. Cusumano-Towner", "Alexey Radul", "David Wingate", "Vikash K. Mansinghka"], "emails": [], "sections": [{"heading": null, "text": "Intelligent systems sometimes need to infer the probable goals of people, cars, and robots, based on partial observations of their motion. This paper introduces a class of probabilistic programs for formulating and solving these problems. The formulation uses randomized path planning algorithms as the basis for probabilistic models of the process by which autonomous agents plan to achieve their goals. Because these path planning algorithms do not have tractable likelihood functions, new inference algorithms are needed. This paper proposes two Monte Carlo techniques for these \u201clikelihood-free\u201d models, one of which can use likelihood estimates from neural networks to accelerate inference. The paper demonstrates efficacy on three simple examples, each using under 50 lines of probabilistic code."}, {"heading": "1 INTRODUCTION", "text": "Intelligent systems sometimes need to infer the probable goals of people, cars, and robots, based on partial observations of their motion. These problems are central to autonomous driving and driver assistance [Franke et al., 1998; Urmson et al., 2008; Aufr\u00e8re et al., 2003], but also arise in aerial robotics, reconnaissance, and security applications [Kumar and Michael, 2012; Liao et al., 2006; Tran and Davis, 2008]. In these settings, knowledge of the beliefs and goals of an agent makes it possible to infer their probable future actions.\nBecause the mental state of another agent is inherently unobservable and uncertain, it is natural to take a Bayesian approach to inferring it. Probabilistic models can be used to describe how an agent\u2019s latent high-level goals and beliefs about the environment interact to yield its probable actions. Most existing work along these\nlines has focused on modeling goal-directed behavior using Markov decision processes and related approaches from stochastic control [Baker et al., 2007; Ziebart et al., 2009]. While promising, these approaches involve significant task-specific engineering. They also calculate policies that prescribe actions for every possible state of the world, sometimes in the inner loop of an inference algorithm. This leads to fundamental scaling challenges, even for simple environments and goal priors.\nThis paper introduces a class of probabilistic programs that formulate goal inference problems as approximate inference in generative models of goal-directed behavior. The proposed approach reflects three contributions: First, agents are assumed to follow paths generated by fast randomized path planning code that can incorporate heuristics drawn from video game engines and robotics. This can scale to larger environments than approaches based on optimal control. Second, hierarchical models for goals and paths are represented as probabilistic programs. This allows one to formulate a broad class of single- and multi-agent problems with common modeling and inference machinery. Ordinary probabilistic programming constructs can handle complex maps, hierarchical goal priors, and partially observed environments. Third, this paper proposes an approach to real-time approximate inference, using neural networks to learn proposals for the internal choices made by any path planners. Together, these contributions lead to a practical proposal for goal inference that has the potential to scale to a broad class of real-world problems and real-time applications. We demonstrate the efficacy of prototype implementations of these algorithms on three simple examples, each written in under 50 lines of probabilistic code.\nNote that this proposal does not require planning algorithms to be rewritten as probabilistic programs, but instead allows optimized, low-level, or legacy planning codes to be treated as black boxes. This avoids the implementation and performance cost of rewriting an existing path planner in a high-level probabilistic programming\nar X\niv :1\n70 4.\n04 97\n7v 1\n[ cs\n.A I]\n1 7\nA pr\n2 01\nlanguage, and exposing the thousands of random choices it might make to generic inference algorithms. One difficulty is that such optimized black-box planners may well make too many internal random choices to have tractable input-output likelihoods. This paper proposes two novel Monte Carlo techniques for these \u201clikelihood-free\u201d models, each extending Metropolis-Hastings: (i) a cascading resimulation algorithm that makes joint proposals to ensure cancellation of the unknown likelihoods, and (ii) a nested inference algorithm that uses estimated likelihoods derived from inference over the internal random choices of the planner. Cascading resimulation is simple to implement, but nested inference enables use of a broad class of Monte Carlo, variational, and neural network mechanisms to handle the intractable likelihoods."}, {"heading": "2 MODELING GOAL-DIRECTED BEHAVIOR USING RANDOMIZED PATH PLANNERS", "text": "This paper defines probabilistic models of goal-directed behavior using randomized path-planning algorithms. Algorithm 1 describes one such planner, called AGENTPATH. This planner can be applied to a broad class of environments with complex obstacles. The planner assumes a bounded two-dimensional space (e.g., the square [0, 1]2) and a world map M that is a set of polygonal obstacles. The planner takes as input a start location s \u2208 [0, 1]2, a goal location g \u2208 [0, 1]2, the map M , and a sequence of T time points t = (t1, . . . , tT ), and returns either a sequence of locations z \u2208 [0, 1]2T on a path from s to g at each time ti, or \u2018no-path-found\u2019. The planner operates by growing a rapidly-exploring random tree (RRT) [LaValle, 1998] from the start location s to fill the space, searching for a clear line of sight between the tree and the goal. If a path is found, it is then refined to minimize its length using local optimization. Finally, the agent walks the path at a constant speed, producing the output locations z. See Appendix A for more details.\nMany variations of this planner are possible, including\nversions that take into account costs other than path length, and spaces encoding configurations other than geographic position (e.g., configuration spaces of an articulated robot). The planner parameters N and R trade off the cost of planning with the (probable) optimality of the paths (see Figure 1). Figure 2 and Figure 4 show this planner being used as a modeling primitive in the Venture probabilistic programming platform [Mansinghka et al., 2014]. The planner was implemented in C and imported as a foreign modeling primitive into Venture. Venture supports likelihood-free primitives and design of custom inference strategies, including those of Section 3.\nAlgorithm 1 Model of an agent\u2019s path given destination\nRequire:  World map M ; Start, goal s, g \u2208 [0, 1]2 Time points t \u2208 RT+ Refinement amount N ; Restarts R Max. # tree nodes J ;Min. # tree nodes S\n1: procedure RRT(M , s, g) 2: V \u2190 {s} . Initialize tree with start s 3: for j \u2190 1 to J do . J tree growth iterations 4: a \u223c Uniform([0, 1]\u00d7 [0, 1]) . Random point 5: if M.VALID-STATE(a) then 6: b\u2190 NEAREST-VERTEX(V, a) 7: \u223c Uniform([0, 1]) 8: c\u2190 a+ (1\u2212 )b . Propose new vertex 9: if M.CLEAR-LINE(b, c) then 10: V.ADD-EDGE(b\u2192 c) . Extend tree 11: if M.CLEAR-LINE(c, g) \u2227 j > S then 12: V.ADD-EDGE(c\u2192 g) 13: return PATH-IN-TREE(V, s, g) 14: return \u2018no-path-found\u2019 15: procedure PLAN-PATH(M , s, g; R, N ) 16: for r \u2190 1 to R do . Generate R paths 17: p(r) \u223c RRT(M, s, g) 18: p(r) \u2190 SIMPLIFY-PATH(p(r)) 19: p(r) \u223c REFINE-PATH(M, s, g,p(r)) 20: d(r) \u2190 PATH-LENGTH(p(r), s, g) 21: r\u2217 \u2190 ARGMIN(d) . Select best of R paths 22: return p(r \u2217) 23: procedure AGENT-PATH(M , s, g, t; R, N ) 24: p \u223c PLAN-PATH(M, s, g;R,N) . Abstract path 25: z\u2190 WALK-PATH(p, t) . Locations at times t 26: return z"}, {"heading": "3 INFERENCE IN PROBABILISTIC PROGRAMS WITH LIKELIHOOD-FREE PRIMITIVES", "text": "The path planner AGENT-PATH of Algorithm 1 can be used in a probabilistic program either by implementing the planner in a probabilistic programming language, or by treating the planner as a primitive random choice. We treat the planner as a random choice, as this allows use of an optimized C implementation of the planner. However, probabilistic programming languages such as Church, Stan, BLOG, and Figaro all require random choices to have tractable marginal likelihoods [Goodman et al., 2012; Carpenter et al., 2016; Milch et al., 2007; Pfeffer, 2009]. Computing the marginal likelihood of AGENT-PATH for outputs z and inputs M , s, g, and t would involve an intractable intregral over the (thousands of) internal random choices made in AGENT-PATH.\nThis section introduces two Monte Carlo strategies for inference in probabilistic programs that include random choices with intractable marginal likelihoods, referred to as \u201clikelihood-free\u201d primitives. The first strategy, shown in Algorithm 2, is called Cascading Resimulation Metropolis-Hastings; it makes block proposals to likelihood-free random choices, exploiting cancellation of the unknown likelihoods. The second, shown in Algorithm 3, is called Nested Inference Metropolis-Hastings; it uses Monte Carlo estimates of the unknown likelihoods in place of the likelihoods themselves. Although sim-\nple techniques like likelihood-weighting can also be used in the presence of likelihood-free primitives, they tend to work well only when a global proposal that is wellmatched to the posterior is available. The algorithms we introduce do not have this limitation.\nWe first introduce notation. Let T be the set of primitive random choices available to a probabilistic program (e.g. {FLIP, UNIFORM_CONTINUOUS, AGENT-PATH}). For t \u2208 T , let Xt denote the set of valid arguments for the primitive, let Zt denote the set of possible outputs, and let pt(z;x) denote the marginal likelihood of output z \u2208 Zt given arguments x \u2208 Xt, where \u222b pt(z;x)dz = 1 for all x \u2208 Xt. We do not require evaluation of pt(z;x) to be computationally tractable.\nFollowing Wingate et al. [2011], for a probabilistic program P , we assume there is a name i \u2208 I assigned to every possible random choice, for some countable I. We assume that distinct random choices are assigned unique names within every execution of P . The set of names used in an execution is some finite set I \u2286 I. We require that all random choices with name i are of the same type ti \u2208 T . Each unique completed execution of P can therefore be represented as the finite set of names I \u2286 I of those random choices made in the execution, together with the result values. We denote these results z \u2208\u00d7i\u2208I Zti , and denote this complete package \u03c1 = (I, z). The tuple \u03c1 is called an execution trace of the probabilistic program P .\nThis paper focuses on probabilistic programs where I is the same for all executions \u2014 that is, the set of random choices made is not affected by any of those choices. Relaxations of this are left for future work; more general formalizations of probabilistic programs can be found in [Wingate et al., 2011; Mansinghka et al., 2014].\nWe consider random choice j to depend on random choice i if changing the result zi of i can lead to a change in the inputs xj of j, even if all other results zI\\{i} are held fixed. We assume that it is possible to construct a directed acyclic dependency graph G = (I, E) among random choices I , where an edge (i, j) \u2208 E \u2282 I \u00d7 I exists if and only if random choice j depends on random choice i in the above sense. The parents of a random choice j are denoted by \u03c0G(j) := {i \u2208 I : (i, j) \u2208 E}. The arguments xj of each random choice j are then a (deterministic) function fj of the results of random choices in \u03c0G(j), which are denoted z\u03c0G(j); we write xj = fj(\u03c0G(j)). Let cG(i) := {j \u2208 I : (i, j) \u2208 E} denote the \u2018children\u2019 of choice i. Also, let F \u2286 I denote the random choices with intractable likelihoods (the \u201clikelihood-free\u201d choices). Let C \u2286 (I \\ F ) denote the random choices that are constrained based on data, which must have tractable likelihoods. Let zC \u2208\u00d7i\u2208C Zi denote the values we are constraining those random choices to. The joint probability density of an execution trace \u03c1 = (I, z) is:\np(z) := \u220f i\u2208I pti(zi; fi(z\u03c0G(i))) (1)\nwhere we have omitted the dependence on I because it is the same for all executions."}, {"heading": "3.1 CASCADING RESIMULATION METROPOLIS-HASTINGS", "text": "How can a probabilistic program cope with complex, likelihood-free primitives? Our core insight is that if the proposal distribution m(z\u2032i; \u00b7) for a random choice zi is equal to the prior pti(z \u2032 i; fi(z\u03c0G(i))), then the likelihoods will cancel in a Metropolis-Hastings (MH) acceptance ratio and therefore do not need to be explicitly computed. Sampling from the prior is achieved simply by simulating the random choice. A (prototypical) acceptance ratio looks like this:\n\u03b1 = pti (z\n\u2032 i;\u00b7)\npti (zi;\u00b7) \u00b7 m(zi;\u00b7)m(z\u2032i;\u00b7) =\npti (z \u2032 i;\u00b7) pti (zi;\u00b7) \u00b7 pti (zi;\u00b7)pti (z\u2032i;\u00b7) = 1\ntarget proposal target proposal\nWe use blocked proposals in which a change to a likelihood-free choice is proposed from the prior whenever a proposal is made to any of its parents. A likelihood-free choice that is proposed may itself have\nlikelihood-free choices as children, in which case these children are also proposed, generating a cascade of proposals. Algorithm 2 shows the Cascading Resimulation MH transition operator, which extends an initial custom proposalm(z\u2032i; z) to random choice i (which must not be likelihood-free) to also include any likelihood-free random choices H in the cascade, such that the intractable likelihoods cancel.\nAlgorithm 2 Single-site Cascading Resimulation Metropolis-Hastings transition\nRequire:  Prob. program with dep. graph G = (I, E) Likelihood-free random choices F \u2286 I Proposed-to random-choice i \u2208 (I \\ F ) Custom proposal density m(z\u2032i; z) for choice i Previous values z for all random choices\n1: z\u2032i \u223c m(\u00b7; z) . Propose a new value for choice i 2: z\u2032I\\{i} \u2190 zI\\{i} . Initially, no change to other choices 3: `\u2190 1 . Unnormalized target density for previous values 4: `\u2032 \u2190 1 . Unnormalized target density for proposed values 5: B \u2190 {i} \u222a cG(i) . Ask for likelihoods from j \u2208 B 6: H \u2190 {} . Likelihood-free cascade participants 7: A\u2190 {i} . Visited choices with tractable likelihoods 8: while |B| > 0 do 9: j \u2190 POP(B) . Pop in topological order 10: if j \u2208 F then . Choice j is likelihood-free 11: z\u2032j \u223c ptj (\u00b7; fj(z\u2032\u03c0G(j))) . Propose from prior 12: INSERT(B, cG(j)) . Ask for child likelihoods 13: H \u2190 H \u222a {j} 14: else . Choice j has tractable likelihood 15: `\u2190 ` \u00b7 ptj (zj ; fj(z\u03c0G(j))) 16: `\u2032 \u2190 `\u2032 \u00b7 ptj (z\u2032j ; fj(z\u2032\u03c0G(j))) 17: A\u2190 A \u222a {j} 18: \u03b1\u2190 (`\u2032/`) \u00b7 (m(zi; z\u2032)/m(z\u2032i; z)) . MH ratio 19: s \u223c Uniform(0, 1) 20: if s \u2264 \u03b1 then 21: z \u2190 z\u2032 . Accept\nAlgorithm 2 is a Metropolis-Hastings transition over the random choices {i} \u222a H with target density equal to the local posterior p ( z{i}\u222aH |zI\\{{i}\u222aH} ) , and with proposal density:\nm(z\u2032i; z) \u220f j\u2208H ptj (z \u2032 j ; fj(z \u2032 \u03c0G(j) )) (2)\nThe Metropolis-Hastings acceptance ratio is:\n\u03b1 =\n(\u220f j\u2208H\u222aA ptj (z \u2032 j ; fj(z \u2032 \u03c0G(j)\n))\u220f j\u2208H\u222aA ptj (zj ; fj(z\u03c0G(j)))\n\u00b7 m(zi; z\n\u2032) \u220f j\u2208H ptj (zj ; fj(z\u03c0G(j)))\nm(z\u2032i; z) \u220f j\u2208H ptj (z \u2032 j ; fj(z \u2032 \u03c0G(j) ))\n)\n= m(zi; z\n\u2032) \u220f j\u2208A ptj (z \u2032 j ; fj(z \u2032 \u03c0G(j) ))\nm(z\u2032i; z) \u220f j\u2208A ptj (zj ; fj(z\u03c0G(j)))\n(3)\nWe illustrate Cascading Resimulation MH in Figure 2, on the task of inferring the goal of a simulated drone in an observed environment."}, {"heading": "3.2 NESTED INFERENCE METROPOLIS-HASTINGS", "text": "In some problems, Cascading Resimulation MH will generate many expensive simulations of likelihood-free choices, most of which will be rejected. For these problems, and for real-time applications, we propose an alternative Metropolis-Hastings algorithm, called Nested Inference MH, that uses Monte Carlo estimates of the intractable likelihoods in the acceptance ratio. The likelihood estimates are obtained using auxiliary \u201cnested inference\u201d algorithms, which sample probable values for the internal random choices made by a likelihood-free choice (e.g. a randomized planning algorithm) given its inputs and outputs, and calculate a weight that can be used to form an importance sampling estimate of the unknown likelihood.\nNested Inference MH is based on an interpretation of likelihood-free random choices like AGENT-PATH as probabilistic programs in their own right. Let u \u2208 Ut be an execution trace of a likelihood-free random choice of type t. We denote the joint density on execution traces u and return values z of the random choice, given input arguments x, by pt(u, z;x). The marginal likelihood of the random choice is given by the (intractable) integral pt(z;x) = \u222b pt(u, z;x)du. We denote the conditional trace density for arguments x and output z by pt(u|z;x) := pt(u, z;x)/pt(z;x).\nNested inference assumes the existence of a nested inference algorithm that samples execution traces u according to some density qt(u;x, z) that approximates the conditional density on traces of the likelihood-free choice, i.e., qt(u;x, z) \u2248 pt(u|z;x). We require that qt(u;x, z) > 0 for all u where pt(u|z;x) > 0. Using the nested inference algorithm as an importance sampler, we produce an unbiased importance sampling estimate p\u0302t(z;x) of the random choice\u2019s intractable likelihood for arguments x and output z by sampling K times uk \u223c qt(\u00b7;x, z) from the inference algorithm, as follows:\np\u0302t(z;x) := 1\nK K\u2211 k=1 pt(uk, z;x) qt(uk;x, z) for uk \u223c qt(\u00b7;x, z).\n(4)\nNested inference also assumes that the ratio pt(u, z;x)/qt(u;x, z) can be evaluated. While in principle the nested inference algorithm can be produced by recoding the likelihood-free primitive in a high-level probabilistic programming language, this is by no means required, nor do we expect it to be the common case. In this paper, we focus on nested inference algorithms that use learned neural networks.\nThe accuracy of the likelihood estimate is determined by\nthe accuracy of the nested inference algorithm. Specifically, for K = 1 the variance of the estimate is:\nVaru\u223cq(\u00b7;x,z)\n[ pt(u, z;x)\nqt(u;x, z) ] \u221d D\u03c72 (pt(u|z;x)||qt(u;x, z)) , (5)\nwhere D\u03c72 denotes the chi-square divergence [Nielsen and Nock, 2014], and where pt(u|z;x) and qt(u;x, z) on the right-hand side represent density functions over u, not specific density values. Similarly, we can view log(pt(u, z;x)/qt(u;x, z)) for u \u223c q(\u00b7;x, z) as a (biased) estimator of log pt(z;x), where the bias is:\nEu\u223cqt(\u00b7;x,z)\n[ log pt(u, z;x)\nqt(u;x, z)\n] \u2212 log pt(z;x)\n= \u2212DKL(qt(u;x, z)||pt(u|z;x)), (6)\nwhere DKL denotes the Kullback-Leibler (KL) divergence [Kullback and Leibler, 1951]."}, {"heading": "3.2.1 Nested Inference Metropolis-Hastings", "text": "Algorithm 3 describes a Nested Inference MH transition in which a custom proposal is made to a likelihood-free random choice i that uses estimated likelihoods produced using a nested inference algorithm. It assumes that all children of i also have nested inference algorithms themselves. Heterogeneous configurations are also possible.\nAlgorithm 3 Single-site Nested Inference MetropolisHastings transition\nRequire:  Prob. program with dep. graph G = (I, E) Proposed-to random choice i Custom proposal density m(z\u2032i; z) Previous values z for all random choices Previous likelihood estimates ` for all choices\n1: z\u2032i \u223c m(\u00b7; z) . Propose a new value for choice i 2: z\u2032I\\{i} \u2190 zI\\{i} . No change to other choices 3: for k \u2190 1 to K do 4: u\u2032i,k \u223c qti(\u00b7;xi, z\u2032i) . Choice i nested inference 5: `\u2032i \u2190 1K \u2211K k=1 pti (u \u2032 i,k,z \u2032 i;xi)\nqti (u \u2032 i,k ;xi,z \u2032 i)\n. Estimate pti(z \u2032 i;xi)\n6: for j \u2208 cG(i) do 7: for k \u2190 1 to K do 8: u\u2032j,k \u223c qtj (\u00b7;x\u2032j , zj) . Choice j nested inference\n9: `\u2032j \u2190 1K \u2211K k=1 ptj (u \u2032 j,k,zj ;x \u2032 j)\nqtj (u \u2032 j,k ;x\u2032j ,zj) . Estimate ptj (zj ;x\n\u2032 j) 10: \u03b1\u2190 (\u220f\nj\u2208{i}\u222acG(i) `\u2032j `j\n) \u00b7 ( m(zi;z\n\u2032) m(z\u2032i;z) ) 11: s \u223c Uniform(0, 1) 12: if s \u2264 \u03b1 then 13: zi \u2190 z\u2032i . Accept 14: for j \u2208 {i} \u222a cG(i) do 15: `j \u2190 `\u2032j . Update density estimates\nAlthough this transition uses Monte Carlo estimates of likelihoods in the acceptance ratio, it is a standard Metropolis-Hastings transition on an extended state\nspace that includes the result zi of the proposed-to random choice i, K traces ui,k of the proposed-to random choice, andK traces uj,k of each child j of the proposedto random choice. The target density on the extended space is:\np(zi|zI\\{i}) \u220f\nj\u2208{i}\u222acG(i)\n1\nK K\u2211 k=1 ptj (uj,k|zj ;xj) K\u220f r=1 r 6=k qtj (uj,r;xj , zj)\n(7) The proposal density on the extended space is:\nm(z\u2032i; z) \u220f\nj\u2208{i}\u222acG(i)\nK\u220f k=1 qtj (u \u2032 j,k;xj , zj) (8)\nThe values zj of other random choices j 6\u2208 {i}\u222acG(i) are constant. See Appendix C for derivation. The marginal density of zi in the extended target density is the local posterior p(zi|zI\\{i}) for the result of random choice i given the values of all other random choices. Single-site Nested Inference MH transitions that propose to different random choices i but use the same database of nestedinference likelihood estimates ` can be composed to form Markov chains that converge to the posterior p(zI\\C |zC).\nOur use of unbiased likelihood estimates in place of the true likelihoods when computing the MetropolisHastings acceptance ratio in Algorithm 3 is closely related to pseudo-marginal MCMC [Andrieu and Roberts, 2009] and particle MCMC [Andrieu et al., 2010]. Indeed, each single-site Nested Inference MH transition can be seen as a compositional variant of a \u2018grouped independence MH\u2019 transition [Beaumont, 2003] in which several pseudo-marginal likelihoods (one for each random choice j \u2208 {i} \u222a cG(i)) are used in the same update. The database of nested-inference likelihood estimates ` stores the \u2018recycled\u2019 pseudo-marginal likelihood estimates from previous transitions.\nThe convergence rate of a Markov chain based on Nested Inference MH transition operators depends on the accuracy of the nested inference algorithm and K. In the limit of exact nested inference algorithm (qt(u;x, z) = pt(u|z;x)) the likelihood estimates are exact, and the algorithm is identical to standard Metropolis-Hastings. If the nested inference algorithm is very inaccurate, it may routinely propose traces u that are incompatible with the output z of the random choice, resulting in low acceptance rates. Better characterizing how the convergence rate depends on the accuracy of the nested inference algorithms and on K is an important area for future work."}, {"heading": "3.2.2 Learning a nested inference algorithm", "text": "It is possible to learn a nested inference algorithm qt(u;x, z) that approximates pt(u|z;x). The idea of\nlearned inference for probabilistic generative models goes back at least to Morris [2001] and has also been used in Stuhlm\u00fcller et al. [2013] and Kingma and Welling [2013]. We apply this idea to nested inference as follows. Let qt,\u03b8(u;x, z) denote a nested inference algorithm that is parameterized by \u03b8 \u2014 for example, \u03b8 might be the weights of a neural network used as part of the inference algorithm. We establish a training distribution dt(x) over the arguments to the primitive t, and approximately solve the following optimization problem:\nmin \u03b8 { Ex\u223cdt(\u00b7) z|x\u223cpt(\u00b7;x) [DKL(pt(u|z;x)||qt,\u03b8(u;x, z))] }\n= min \u03b8 Ex\u223cdt(\u00b7)z|x\u223cpt(\u00b7;x) u|x,z\u223cpt(\u00b7|z;x) [ log pt(u|z;x) qt,\u03b8(u;x, z) ] The goal is for qt,\u03b8(u;x, z) to approximate pt(u|z;x) well (i.e., have small KL divergence) for typical input arguments x \u223c dt(\u00b7). We approximate this objective function by drawing M independent sets of input arguments x(i) from the training distribution, and running a traced execution of the likelihood-free random choice (e.g. planner) on each set of arguments, recording1 the trace u(i) and output z(i):\nx(i) \u223c dt(\u00b7) Sample planner arguments\nu(i), z(i) \u223c pt(\u00b7, \u00b7;x(i)) Run likelihood-free planner, record trace u(i), output z(i)\nWe use the resulting dataset D = {(x(i), z(i), u(i)) : i = 1 . . .M} to define an approximate objective function JD(\u03b8) that is an unbiased estimate of the original objective function:\nJD(\u03b8) := 1\nM M\u2211 i=1 log pt(u (i)|z(i), x(i)) qt,\u03b8(u(i);x(i), z(i))\n(9)\n= C \u2212 1 M M\u2211 i=1 log qt,\u03b8(u (i);x(i), z(i)) (10)\nwhere C does not depend on \u03b8. Note that minimizing JD(\u03b8) over \u03b8 is equivalent to maximizing the loglikelihood of the data D. Because we use forward simulations to produce u(i), z(i) jointly from pt(\u00b7, \u00b7;x(i)), we have one exact conditional sample u(i)|z(i) \u223c pt(\u00b7|z(i);x(i)) for each training example.\n1This training regime cannot be applied to a true black-box path planner, since a recording of its internal randomness is now necessary. However, such recordings can be produced from a straightforwardly instrumented version of the algorithm. The likelihood estimator for the planner can still be treated as a black-box by the Nested Inference MH transition."}, {"heading": "4 EXAMPLE APPLICATIONS", "text": "We have implemented four example applications, designed to illustrate the flexibility of our framework:\n1. Inferring the probable goal of a simulated drone. This example shows that small changes to the environment, such as including an additional doorway, can yield large changes in the inferred goals.\n2. Inferring the probable goal of a simulated drone with a more complex planner. Specifically, we model the drone as following a multi-part path produced by a planner that first chooses a waypoint uniformly at random and then recursively solves the two path planning problems induced by the choice of waypoint. This example shows (a) applicability of the framework to more complex models of goaldirected behavior, and (b) that Nested Inference MH with a learned neural network can outperform Cascading Resimulation MH.\n3. Inferring whether or not two people walking around tables in a room are headed for the same goal or different goals. This example demonstrates applicability to simple hierarchical models for goals and also demonstrates applicability to real-world (as opposed to synthetic) data.\n4. Jointly inferring a simulated agent\u2019s goals and its beliefs about an obstacle in the map whose location, size, and orientation is unknown to the probabilistic program. This example is described in the appendix due to space constraints."}, {"heading": "4.1 EXAMPLE 1: SENSITIVITY OF GOAL INFERENCE TO SMALL MAP CHANGES", "text": "Figure 2 shows a comparison of goal inference in two different maps given the same observations. The map for the scenario on the left has an enclosure with two openings, one on the top and one on the bottom, while the map for the scenario on the right has a single opening. In the map on the left, the inferred goal samples fall outside the enclosure, because if the drone intended to go inside the enclosure, it could have taken a much shorter path. In the map on the right, a significant fraction of goal samples fall inside the enclosure, as relatively efficient paths into the enclosure go through the partial trajectory that has been observed so far. Samples shown are the final states of 480 independent replicates of a Markov chain initialized from the prior, with 1000 Cascading Resimulation MH transitions (Algorithm 2) using the prior as the proposal. Planner parameters are R = 10, N = 1000, = 0.01, v = 0.5, J = 10000, S = 2000."}, {"heading": "4.2 EXAMPLE 2: HANDLING PATH PLANNERS WITH WAYPOINTS VIA", "text": "NESTED INFERENCE\nNext, we used a model where the agent may choose a waypoint and separately plan a path to the waypoint and a path from the waypoint to the goal (AGENTWAYPOINT-PATH, Algorithm 4). Unlike the simpler AGENT-PATH model, which typically samples from a small number of modes concentrated at efficient routes from the start to the goal, AGENT-WAYPOINT-PATH yields paths that are unpredictable without knowledge of the waypoint. Parameters R and N of PLAN-PATH are omitted for simplicity. We consider the same goal inference task as in Example 1 but with the alternative planner. Cascading Resimulation MH performs poorly on this task, because the prior is a poor proposal for the internal random choices of AGENT-WAYPOINT-PATH.\nAlgorithm 4 Pseudo-code for a likelihood-free primitive that models observed motion of an agent with known goal but optional unknown waypoint\nRequire: {\nWorld map M ; Start, goal s, g \u2208 [0, 1]2 Time points t \u2208 RT+\n1: procedure AGENT-WAYPOINT-PATH(M , s, g, t) 2: g\u2032 \u223c Uniform([0, 1]\u00d7 [0, 1]) . Pick waypoint 3: w \u223c Bernoulli(0.5) . Use waypoint? 4: if w then 5: p1 \u223c PLAN-PATH(M, s, g\u2032) . Start-waypoint 6: p2 \u223c PLAN-PATH(M, g\u2032, g) . Waypoint-goal 7: p = (p1,p2) . Concatenate paths 8: else 9: p \u223c PLAN-PATH(M, s, g) . Start to goal 10: z\u0303\u2190 WALK-PATH(p, t) . Locations at times t 11: z \u223c ADD-NOISE(z\u0303) . Add noise to locations 12: return z . Return noisy agent locations\nAlgorithm 5 shows a nested inference algorithm for AGENT-WAYPOINT-PATH that uses a neural network to propose the waypoint (g\u2032) and whether the waypoint is used (w), given the goal and observations, and then executes the rest of the planner, conditioned on w and g\u2032. The network was trained on 10,000 runs of AGENT-WAYPOINT-PATH with random goal input g \u223c Uniform([0, 1]2) and fixed world mapM and start s. The nested inference algorithm splits the trace u of AGENTWAYPOINT-PATH into u1 = (w, g\u2032) and u2 (the random choices made within executions of PLAN-PATH), so that u = (u1, u2). The density of the nested inference algorithm is then qt(u;x, z) = q\u03b8(u1;x, z)pt(u2;x), and the density ratio pt(u, x, z)/qt(u;x, z), which is used by Nested Inference MH when estimating the planner likelihoods, simplifies to pt(z|u;x)/q\u03b8(u1;x, z). To evaluate this ratio, we separately evaluate the density pt(z|u; , x) of ADD-NOISE and the density q\u03b8(u1;x, z) of the neural network\u2019s stochastic outputs.\nSource: https://github.com/probcomp/mimh-2017/commit/68d9079c5ef7b34d0bf7c6a1d1ddcfc3f 26aaf3e python run_experiment.py python render_results.py\nAlgorithm 5 Using a neural network for nested inference in the AGENT-WAYPOINT-PATH path planner\nRequire: {\nArguments to planner x = (M, s, g, t) Hypothetical output of planner z\n1: w, g\u2032 \u223c q\u03b8(\u00b7;x, z) . Sample waypoint from neural net. 2: if w then 3: p1 \u223c PLAN-PATH(M, s, g\u2032) . Start to waypoint 4: p2 \u223c PLAN-PATH(M, g\u2032, g) . Waypoint to goal 5: return (p1,p2) 6: else 7: return PLAN-PATH(M, s, g) . Start to goal\nWe compared three strategies for goal inference: Nested Inference MH using Algorithm 5 and K = 1, Cascading Resimulation MH, and Nested Inference MH using a \u201cresimulation\u201d nested inference algorithm (qt(u;x, z) = pt(u;x)) and K = 2, 10. Figure 3 shows that neural Nested Inference MH converges faster than the other strategies. Planner parameters were the same as in Example 1. All inference strategies were implemented using a custom Python inference library. Integration of Nested Inference MH with Venture is left for future work."}, {"heading": "4.3 EXAMPLE 3: MODELING REAL-WORLD HUMAN MOTION", "text": "The Venture program of Figure 4(c) defines a model with two agents whose destinations may or may not be the same. The environment (world) and the start locations of the agents are known. The is_common_goal flag determines whether the agents share the same goal destination. The paths of both agents are modeled using AGENT-PATH. The corresponding Bayesian network is shown in Figure 4(e). We collected video of two col-\nlaborators walking in a scene containing tables, for two conditions\u2014one in which the they meet at a common location, and one where they diverge. For the commongoal condition we constructed short and extended sequences of observed locations (Figure 4(a) and (b)). We used Cascading Resimulation MH for inference, initialized from the prior, with a joint prior proposal over all latent variables. We ran 60 chains of 200 transitions each, and rendered the final states in Figures 4(a-b). The speed for each individual was set to their average speed along the observed path. The estimated probabilities of is_common_goal=True for the short and extended sequences are 0.63 and 0.82 respectively. This trend qualitatively matches human judgments, shown in Figure 4(d) (the model was not calibrated to match human judgments). See Appendix B for additional results."}, {"heading": "5 DISCUSSION", "text": "This paper introduced a class of probabilistic programs for formulating goal inference as approximate inference in probabilistic generative models of goal-directed behavior. The technical contributions are (i) a probabilistic programming formulation that makes complex goal and map priors easy to specify; (ii) the use of randomized path planning algorithms as the backbone of generative models; and (iii) the introduction of Monte Carlo techniques that can handle the intractable likelihoods of these path planners. The experiments showed that it is possible for short probabilistic programs to make meaningful inferences about goal-directed behavior.\nFrom the standpoint of robotics, autonomous driving, or reconnaissance, the examples in this paper are quite pre-\nliminary. More experiments are needed to explore the accuracy of approximate inference in these models, as well as the accuracy of the models themselves, especially on real-world problems. The probabilistic programming formulation makes it easy to explore variations of models, environments, and inference strategies.\nThe problem of inferring the mental states of autonomous agents is central to probabilistic artificial intelligence. It may also be a natural application for structured generative models and for probabilistic programming, but only if sufficiently fast and flexible inference schemes can be developed. We hope this paper helps to encourage the use of probabilistic programming for building intelligent software that can draw meaningful inferences about goal-directed behavior."}, {"heading": "Acknowledgements", "text": "The authors would like to thank Feras Saad for obtaining human judgment data. Tree and car 3D models in figures are from http://www.f-lohmueller.de/ [Lohm\u00fcller, 2016]. This research was supported by DARPA (PPAML program, contract number FA875014-2-0004), IARPA (under research contract 2015- 15061000003), the Office of Naval Research (under research contract N000141310333), the Army Research Office (under agreement number W911NF-13-1-0212), and gifts from Analog Devices and Google. Marco Cusumano-Towner is supported by the Department of Defense (DoD) through the National Defense Science & Engineering Graduate Fellowship (NDSEG) Program."}, {"heading": "A PLANNER DETAILS", "text": "We now describe details of the planner omitted from the main text, including the procedures SIMPLIFY-PATH, REFINE-PATH, and WALK-PATH, which are defined in Algorithm 6. Paths p are represented as sequences of points, with lines connecting the points. The path p begins with start s and ends with goal g. To be a valid path with respect to map M , no point in the path may lie within an obstacle (polygon) of M (i.e. M.IS-VALID(pi)), and no line between two adjacent path points may intersect an obstacle of M (i.e. M.CLEAR-LINE(pi,pi+1)).\nAlgorithm 6 Additional details of the AGENT-PATH model of goal-directed behavior.\nRequire:  World map M ; Start, goal s, g \u2208 [0, 1]2 Time points t \u2208 RT+ Refinement amount N ; Restarts R Agent speed v \u2208 R+\n1: procedure SIMPLIFY-PATH(M , p, s, g) 2: p\u20321 \u2190 s . Initialize simplified path 3: j \u2190 2 4: for i\u2190 2 to NUM-POINTS(p)\u2212 1 do 5: if not M.CLEAR-LINE(pi\u22121,pi+1) then 6: p\u2032j \u2190 pi . Point pi is needed, keep it 7: j \u2190 j + 1 8: else 9: pass . Point pi is not needed, skip it 10: p\u2032j \u2190 g . Add goal g to simplified path 11: return p\u2032 12: procedure REFINE-PATH(M , s, g, p) 13: for i\u2190 1 to N do 14: d\u2190 PATH-LENGTH(p, s, g) 15: for l\u2190 1 to L do . Iterate over L path dims. 16: \u223c N (0, \u03c32) 17: p\u2032 \u2190 p+ \u00b7 el . Change path dim. l 18: d\u2032 \u2190 PATH-LENGTH(p\u2032, s, g) 19: if d\u2032 < d \u2227M.CLEAR-PATH(p\u2032, s, g) then 20: (d,p)\u2190 (p\u2032, d\u2032) . Accept 21: return p 22: procedure WALK-TO(p, t, v) 23: d\u2190 0.0 . Path dist. from s traveled so far 24: d\u2217 \u2190 tv . Desired path distance from s 25: for j \u2190 1 to NUM-POINTS(p)\u2212 1 do 26: \u03b4 \u2190 ||pj \u2212 pj+1||2 . Dist. to next point 27: if d+ \u03b4 > d\u2217 then 28: e\u2190 d\u2217 \u2212 d 29: return \u03b4\u2212e\n\u03b4 pj +\n( 1\u2212 \u03b4\u2212e\n\u03b4\n) pj+1"}, {"heading": "30: d\u2190 d+ \u03b4", "text": "31: return g . Once reached goal, stay forever 32: procedure WALK-PATH(p, t, v) 33: for i\u2190 1 to T do 34: zi \u2190 WALK-TO(p, ti, v) 35: return z"}, {"heading": "B ADDITIONAL EXPERIMENTS", "text": "B.1 JOINTLY INFERRING THE BELIEF AND GOAL OF AN AGENT\nThe Venture program of Figure 6(a) defines a model in which the belief of an agent about its environment, upon which the agent\u2019s motion plan depends, is uncertain. The environment contains two, static objects (known_objects): a tree and a central divider wall that divides the [0, 1] \u00d7 [0, 1] square into a left and right side. There are passageways between the left and right side that go above and below the divider. However, the agent has knowledge of (or belief in) an additional obstacle wall (obstacle), and the agent plans their path to the destination (goal) taking this additional obstacle into account. Figure 6(a) also shows a Bayesian network representation of this model. We seek to infer both the agent\u2019s goal and the agent\u2019s beliefs about the location, orientation, and size of the obstacle.\nWe used Cascading Resimulation Metropolis-Hastings (Algorithm 2) with a single repeated transition operator based on an independent joint proposal to goal (Uniform([0, 1]2)) and to the unknown parameters of obstacle (start post location, orientation, and length, proposed from the prior). We initialized from the prior. Parameters of the planner AGENT-PATH were R = 10, N = 1000, = 0.01, v = 0.5, J = 10000, S = 2000. We ran several independent Markov chains of 1000 iterations each, on a synthetic dataset in which the agent takes a path from the right to the left of the map by going below the divider. The final state of four such chains are visualized in Figure 6(b). For this dataset, the goal destination of the agent is revealed with certainty because the agent reaches and stops in the upper left corner. The obstacle inferences indicate that agent believes the upper route to its goal is blocked, because otherwise the agent would have taken the shorter, upper route, to its goal. However, the specific details of how the obstacle blocks the upper passageway remain uncertain.\nB.2 GOAL INFERENCE IN A DRIVING SCENARIO\nFigure 7 shows an application of the multi-agent common-goal model of Figure 4 to a driving scenario. We show 60 independent replicates of 3000 iterations of Cascading Resimulation Metropolis-Hastings each. The results illustrate that this model can be used with varied environments.\nB.3 REAL-WORLD HUMAN MOTION, ALTERNATE SEQUENCE\nWe extended the experiment described in Section 4.3 and shown in Figure 4 by running Cascading Resimulation Metropolis-Hastings on an alternate sequence of observed person locations in which the individals diverge to separate individual goal destination. The inferences, shown in Figure 5, confirm the expectations, with all samples indicating is_common_goal = False. Samples were obtained from the final state of 120 independent Markov chains, with initialization from the prior, followed by 1200 iterations of Cascading Resimulation Metropolis-Hastings.\nB.4 INFERENCE WITH WAYPOINT PLANNER\nFigure 8 compares waypoints and paths proposed by Nested Inference MH with a neural nested inference algorithm with waypoints and paths proposed by Cascading Resimulation MH on an illustrative example data set. The poor quality of the prior as the proposal, as used by Cascading Resimulation, results in unecessary rejections, and slow convergence. The neural network proposes waypoints near the bend in the path.\nThe KL divergence estimates of Figure 3(d) were obtained by binning 960 independent reference samples (30,000 transitions of Cascading Resimulation MH, initialized from the prior) and binning 960 independent approximate inference samples for each inference algorithm evaluated. The world unit square was binned into 25 squares (5-by-5), and a discrete distribution was estimated for each sampler by counting the number of samples falling into each bin, adding a pseudocount of 0.1 to each bin, and normalizing. The KL divergence from the resulting reference sampler histogram was computed to each resulting approximate inference algorithm histogram. For each inference strategy (Cascading Resimu-\nlation MH, Neural Nested Inference MH with K = 1, Resimulation Nested Inference MH with K = 2 and Resimulation Nested Inference MH with K = 10), the number of MH transitions was varied over several orders of magnitude, and the final state in each chain was recorded, to obtain samples for each inference algorithm evaluated. The number of MH transitions used to obtain samples shown in Figures 3(a,b,c) are 10, 1, and 10, respectively. Figure 9 shows additional samples comparing Nested Inference Metropolis-Hastings with a neural nested inference algorithm with Cascading Resimulation Metropolis-Hastings.\n(c) Rendered approximate posterior inference samples for inference over common_goal, goal, and goal_a, and goal_b in the model of (a), given known start locations for two argents (start_a and start_b), a known world, and observed path locations for the two agents. E\nSource: https://github.com/probcomp/mimh-2017/commit/392598f910bf47db 17ef4d8f00722e906060d647 python run_experiment.py python render_results.py"}, {"heading": "C NESTED INFERENCE DERIVATIONS", "text": "The variance of the likelihood estimate with K = 1 is:\nVaru\u223cq(\u00b7;x,z)\n[ pt(u, z;x)\nqt(u;x, z) ] = pt(x; z) 2 \u00b7 \u222b (\npt(u|z;x) qt(u;x, z)\n\u2212 1 )2 q(u;x, z)du\n\u221d \u222b (\npt(u|z;x) qt(u;x, z)\n\u2212 1 )2 q(u;x, z)du\n= D\u03c72(pt(u|z;x)||qt(u;x, z))\nThe bias of the log likelihood estimate with K = 1 is:\nEu\u223cqt(\u00b7;x,z)\n[ log pt(u, z;x)\nqt(u;x, z)\n] \u2212 log pt(z;x)\n= Eu\u223cqt(\u00b7;x,z)\n[ log\npt(u|z;x) qt(u;x, z) ] = \u2212DKL(qt(u;x, z)||pt(u|z;x))\nAlgorithm 3 can be intuitively understood as an approximation to a single-site MH update where a single value zi is being updated with proposal m(z\u2032i; z) and target density p(zi|zI\\{i}), and where estimates of likelihoods are used in place of actual likelihoods when computing the\nMH acceptance ratio. However, Algorithm 3 is theoretically justified by recognizing that it is a standard joint MH transition on an extended state space that consists of zi (the value of the proposed-to random choice), ui,k for k = 1 . . .K (a set of K traces for the proposed-to random choice), and uj,k for j \u2208 cG(i) and k = 1 . . .K (a set ofK traces for each of the children of the proposed-to random choice). The extended target density is:\np(zi|zI\\{i}) \u220f\nj\u2208{i}\u222acG(i)\n1\nK K\u2211 k=1 ptj (uj,k|zj ;xj) K\u220f r=1 r 6=k qtj (uj,r;xj , zj)\n(11) Note that the marginal target density of zi is the original target density p(zi|zI\\{i}), which is proportional to pti(zi;xi) \u220f j\u2208cG(i) ptj (zj ;xj). Substituting\npti(zi;xi) \u220f j\u2208cG(i) ptj (zj ;xj) for p(zi|zI\\{i}) in the extended target density expression and simplifying gives the following unnormalized extended target density:\n\u220f j\u2208{i}\u222acG(i) 1 K K\u2211 k=1 ptj (uj,k, zj ;xj) K\u220f r=1 r 6=k qtj (uj,r;xj , zj)\n(12)\nThe extended proposal density is:\nm(z\u2032i; z) \u220f\nj\u2208{i}\u222acG(i)\nK\u220f k=1 qtj (u \u2032 j,k;xj , zj) (13)\nThe ratio of the unnormalized extended target density over the extended proposal density, for proposed values z\u2032i and u \u2032 j,k for all j \u2208 {i} \u222a cG(i) and k = 1 . . .K, with all other z\u2032I\\{i}\u222acG(i) = zI\\{i}\u222acG(i) is:\n1\nm(z\u2032i; z) \u220f j\u2208{i}\u222acG(i) 1 K K\u2211 k=1 ptj (u \u2032 j,k, z \u2032 j ;x \u2032 j) qtj (u \u2032 j,k;x \u2032 j , z \u2032 j)\n(14)\nNote that each factor 1K \u2211K k=1 ptj (uj,k,zj ;xj)\nqtj (uj,k;xj ,zj) within this\nratio takes the form of a nested inference likelihood estimate. Composing the full MH acceptance ratio for the extended target and proposal densities gives the acceptance ratio used in Algorithm 3. Note that Algorithm 3 samples the proposed joint state zi, ui,k for k = 1 . . .K, and uj,k for j \u2208 cG(i) and k = 1 . . .K precisely according to the extended proposal density. Finally, note that the nested-inference likelihood estimates ` for accepted proposals are retained between updates in Algorithm 3. These estimate values serve as summaries of the previous iterates for the traces ui,k and uj,k. Although the transition is an MH transition on the extended space including the traces, the previous estimates ` are sufficient for evaluating the extended MH acceptance ratio and retaining the previous trace iterates themselves is not necessary."}], "references": [{"title": "The pseudomarginal approach for efficient monte carlo computations", "author": ["Christophe Andrieu", "Gareth O Roberts"], "venue": "The Annals of Statistics,", "citeRegEx": "Andrieu and Roberts.,? \\Q2009\\E", "shortCiteRegEx": "Andrieu and Roberts.", "year": 2009}, {"title": "Particle markov chain monte carlo methods", "author": ["Christophe Andrieu", "Arnaud Doucet", "Roman Holenstein"], "venue": "Journal of the Royal Statistical Society: Series B (Statistical Methodology),", "citeRegEx": "Andrieu et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Andrieu et al\\.", "year": 2010}, {"title": "Perception for collision avoidance and autonomous driving", "author": ["Romuald Aufr\u00e8re", "Jay Gowdy", "Christoph Mertz", "Chuck Thorpe", "Chieh-Chih Wang", "Teruko Yata"], "venue": null, "citeRegEx": "Aufr\u00e8re et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Aufr\u00e8re et al\\.", "year": 2003}, {"title": "Goal inference as inverse planning", "author": ["Chris L Baker", "Joshua B Tenenbaum", "Rebecca R Saxe"], "venue": "In Proceedings of the Cognitive Science Society,", "citeRegEx": "Baker et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Baker et al\\.", "year": 2007}, {"title": "Estimation of population growth or decline in genetically monitored populations", "author": ["Mark A Beaumont"], "venue": "Genetics, 164(3):1139\u20131160,", "citeRegEx": "Beaumont.,? \\Q2003\\E", "shortCiteRegEx": "Beaumont.", "year": 2003}, {"title": "Stan: A probabilistic programming language", "author": ["Bob Carpenter", "Andrew Gelman", "Matt Hoffman", "Daniel Lee", "Ben Goodrich", "Michael Betancourt", "Michael A Brubaker", "Jiqiang Guo", "Peter Li", "Allen Riddell"], "venue": "Journal of Statistical Software,", "citeRegEx": "Carpenter et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Carpenter et al\\.", "year": 2016}, {"title": "Autonomous driving goes downtown", "author": ["Uwe Franke", "Dariu Gavrila", "Steffen Gorzig", "Frank Lindner", "F Puetzold", "Christian Wohler"], "venue": "IEEE Intelligent Systems and Their Applications,", "citeRegEx": "Franke et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Franke et al\\.", "year": 1998}, {"title": "Church: a language for generative models", "author": ["Noah Goodman", "Vikash Mansinghka", "Daniel M Roy", "Keith Bonawitz", "Joshua B Tenenbaum"], "venue": "arXiv preprint arXiv:1206.3255,", "citeRegEx": "Goodman et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Goodman et al\\.", "year": 2012}, {"title": "Auto-encoding variational bayes", "author": ["Diederik P Kingma", "Max Welling"], "venue": "arXiv preprint arXiv:1312.6114,", "citeRegEx": "Kingma and Welling.,? \\Q2013\\E", "shortCiteRegEx": "Kingma and Welling.", "year": 2013}, {"title": "On information and sufficiency", "author": ["Solomon Kullback", "Richard A Leibler"], "venue": "The annals of mathematical statistics,", "citeRegEx": "Kullback and Leibler.,? \\Q1951\\E", "shortCiteRegEx": "Kullback and Leibler.", "year": 1951}, {"title": "Opportunities and challenges with autonomous micro aerial vehicles", "author": ["Vijay Kumar", "Nathan Michael"], "venue": "The International Journal of Robotics Research,", "citeRegEx": "Kumar and Michael.,? \\Q2012\\E", "shortCiteRegEx": "Kumar and Michael.", "year": 2012}, {"title": "Rapidly-exploring random trees: A new tool for path planning", "author": ["Steven M LaValle"], "venue": null, "citeRegEx": "LaValle.,? \\Q1998\\E", "shortCiteRegEx": "LaValle.", "year": 1998}, {"title": "Location-based activity recognition", "author": ["Lin Liao", "Dieter Fox", "Henry Kautz"], "venue": null, "citeRegEx": "Liao et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Liao et al\\.", "year": 2006}, {"title": "Venture: a higher-order probabilistic programming platform with programmable inference", "author": ["Vikash Mansinghka", "Daniel Selsam", "Yura Perov"], "venue": "arXiv preprint arXiv:1404.0099,", "citeRegEx": "Mansinghka et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Mansinghka et al\\.", "year": 2014}, {"title": "blog: Probabilistic models with unknown objects", "author": ["Brian Milch", "Bhaskara Marthi", "Stuart Russell", "David Sontag", "Daniel L Ong", "Andrey Kolobov"], "venue": "Statistical relational learning,", "citeRegEx": "Milch et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Milch et al\\.", "year": 2007}, {"title": "Recognition networks for approximate inference in bn20 networks. In Proceedings of the Seventeenth conference on Uncertainty in artificial intelligence, pages 370\u2013377", "author": ["Quaid Morris"], "venue": null, "citeRegEx": "Morris.,? \\Q2001\\E", "shortCiteRegEx": "Morris.", "year": 2001}, {"title": "On the chi square and higher-order chi distances for approximating fdivergences", "author": ["Frank Nielsen", "Richard Nock"], "venue": "IEEE Signal Processing Letters,", "citeRegEx": "Nielsen and Nock.,? \\Q2014\\E", "shortCiteRegEx": "Nielsen and Nock.", "year": 2014}, {"title": "Figaro: An object-oriented probabilistic programming language. Charles River Analytics", "author": ["Avi Pfeffer"], "venue": "Technical Report,", "citeRegEx": "Pfeffer.,? \\Q2009\\E", "shortCiteRegEx": "Pfeffer.", "year": 2009}, {"title": "Learning stochastic inverses", "author": ["Andreas Stuhlm\u00fcller", "Jacob Taylor", "Noah Goodman"], "venue": "In Advances in neural information processing systems,", "citeRegEx": "Stuhlm\u00fcller et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Stuhlm\u00fcller et al\\.", "year": 2013}, {"title": "Event modeling and recognition using markov logic networks", "author": ["Son Tran", "Larry Davis"], "venue": "Computer vision\u2013 ECCV", "citeRegEx": "Tran and Davis.,? \\Q2008\\E", "shortCiteRegEx": "Tran and Davis.", "year": 2008}, {"title": "Lightweight implementations of probabilistic programming languages via transformational compilation", "author": ["David Wingate", "Andreas Stuhlm\u00fcller", "Noah D Goodman"], "venue": "In AISTATS,", "citeRegEx": "Wingate et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Wingate et al\\.", "year": 2011}, {"title": "Planning-based prediction for pedestrians", "author": ["Brian D Ziebart", "Nathan Ratliff", "Garratt Gallagher", "Christoph Mertz", "Kevin Peterson", "J Andrew Bagnell", "Martial Hebert", "Anind K Dey", "Siddhartha Srinivasa"], "venue": "In Intelligent Robots and Systems,", "citeRegEx": "Ziebart et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Ziebart et al\\.", "year": 2009}], "referenceMentions": [{"referenceID": 6, "context": "These problems are central to autonomous driving and driver assistance [Franke et al., 1998; Urmson et al., 2008; Aufr\u00e8re et al., 2003], but also arise in aerial robotics, reconnaissance, and security applications [Kumar and Michael, 2012; Liao et al.", "startOffset": 71, "endOffset": 135}, {"referenceID": 2, "context": "These problems are central to autonomous driving and driver assistance [Franke et al., 1998; Urmson et al., 2008; Aufr\u00e8re et al., 2003], but also arise in aerial robotics, reconnaissance, and security applications [Kumar and Michael, 2012; Liao et al.", "startOffset": 71, "endOffset": 135}, {"referenceID": 10, "context": ", 2003], but also arise in aerial robotics, reconnaissance, and security applications [Kumar and Michael, 2012; Liao et al., 2006; Tran and Davis, 2008].", "startOffset": 86, "endOffset": 152}, {"referenceID": 12, "context": ", 2003], but also arise in aerial robotics, reconnaissance, and security applications [Kumar and Michael, 2012; Liao et al., 2006; Tran and Davis, 2008].", "startOffset": 86, "endOffset": 152}, {"referenceID": 19, "context": ", 2003], but also arise in aerial robotics, reconnaissance, and security applications [Kumar and Michael, 2012; Liao et al., 2006; Tran and Davis, 2008].", "startOffset": 86, "endOffset": 152}, {"referenceID": 3, "context": "Most existing work along these lines has focused on modeling goal-directed behavior using Markov decision processes and related approaches from stochastic control [Baker et al., 2007; Ziebart et al., 2009].", "startOffset": 163, "endOffset": 205}, {"referenceID": 21, "context": "Most existing work along these lines has focused on modeling goal-directed behavior using Markov decision processes and related approaches from stochastic control [Baker et al., 2007; Ziebart et al., 2009].", "startOffset": 163, "endOffset": 205}, {"referenceID": 11, "context": "The planner operates by growing a rapidly-exploring random tree (RRT) [LaValle, 1998] from the start location s to fill the space, searching for a clear line of sight between the tree and the goal.", "startOffset": 70, "endOffset": 85}, {"referenceID": 13, "context": "Figure 2 and Figure 4 show this planner being used as a modeling primitive in the Venture probabilistic programming platform [Mansinghka et al., 2014].", "startOffset": 125, "endOffset": 150}, {"referenceID": 7, "context": "However, probabilistic programming languages such as Church, Stan, BLOG, and Figaro all require random choices to have tractable marginal likelihoods [Goodman et al., 2012; Carpenter et al., 2016; Milch et al., 2007; Pfeffer, 2009].", "startOffset": 150, "endOffset": 231}, {"referenceID": 5, "context": "However, probabilistic programming languages such as Church, Stan, BLOG, and Figaro all require random choices to have tractable marginal likelihoods [Goodman et al., 2012; Carpenter et al., 2016; Milch et al., 2007; Pfeffer, 2009].", "startOffset": 150, "endOffset": 231}, {"referenceID": 14, "context": "However, probabilistic programming languages such as Church, Stan, BLOG, and Figaro all require random choices to have tractable marginal likelihoods [Goodman et al., 2012; Carpenter et al., 2016; Milch et al., 2007; Pfeffer, 2009].", "startOffset": 150, "endOffset": 231}, {"referenceID": 17, "context": "However, probabilistic programming languages such as Church, Stan, BLOG, and Figaro all require random choices to have tractable marginal likelihoods [Goodman et al., 2012; Carpenter et al., 2016; Milch et al., 2007; Pfeffer, 2009].", "startOffset": 150, "endOffset": 231}, {"referenceID": 20, "context": "Following Wingate et al. [2011], for a probabilistic program P , we assume there is a name i \u2208 I assigned to every possible random choice, for some countable I.", "startOffset": 10, "endOffset": 32}, {"referenceID": 20, "context": "Relaxations of this are left for future work; more general formalizations of probabilistic programs can be found in [Wingate et al., 2011; Mansinghka et al., 2014].", "startOffset": 116, "endOffset": 163}, {"referenceID": 13, "context": "Relaxations of this are left for future work; more general formalizations of probabilistic programs can be found in [Wingate et al., 2011; Mansinghka et al., 2014].", "startOffset": 116, "endOffset": 163}, {"referenceID": 16, "context": "where D\u03c72 denotes the chi-square divergence [Nielsen and Nock, 2014], and where pt(u|z;x) and qt(u;x, z) on the right-hand side represent density functions over u, not specific density values.", "startOffset": 44, "endOffset": 68}, {"referenceID": 9, "context": "where DKL denotes the Kullback-Leibler (KL) divergence [Kullback and Leibler, 1951].", "startOffset": 55, "endOffset": 83}, {"referenceID": 0, "context": "Our use of unbiased likelihood estimates in place of the true likelihoods when computing the MetropolisHastings acceptance ratio in Algorithm 3 is closely related to pseudo-marginal MCMC [Andrieu and Roberts, 2009] and particle MCMC [Andrieu et al.", "startOffset": 187, "endOffset": 214}, {"referenceID": 1, "context": "Our use of unbiased likelihood estimates in place of the true likelihoods when computing the MetropolisHastings acceptance ratio in Algorithm 3 is closely related to pseudo-marginal MCMC [Andrieu and Roberts, 2009] and particle MCMC [Andrieu et al., 2010].", "startOffset": 233, "endOffset": 255}, {"referenceID": 4, "context": "Indeed, each single-site Nested Inference MH transition can be seen as a compositional variant of a \u2018grouped independence MH\u2019 transition [Beaumont, 2003] in which several pseudo-marginal likelihoods (one for each random choice j \u2208 {i} \u222a cG(i)) are used in the same update.", "startOffset": 137, "endOffset": 153}, {"referenceID": 14, "context": "The idea of learned inference for probabilistic generative models goes back at least to Morris [2001] and has also been used in Stuhlm\u00fcller et al.", "startOffset": 88, "endOffset": 102}, {"referenceID": 14, "context": "The idea of learned inference for probabilistic generative models goes back at least to Morris [2001] and has also been used in Stuhlm\u00fcller et al. [2013] and Kingma and Welling [2013].", "startOffset": 88, "endOffset": 154}, {"referenceID": 8, "context": "[2013] and Kingma and Welling [2013]. We apply this idea to nested inference as follows.", "startOffset": 11, "endOffset": 37}], "year": 2017, "abstractText": "Intelligent systems sometimes need to infer the probable goals of people, cars, and robots, based on partial observations of their motion. This paper introduces a class of probabilistic programs for formulating and solving these problems. The formulation uses randomized path planning algorithms as the basis for probabilistic models of the process by which autonomous agents plan to achieve their goals. Because these path planning algorithms do not have tractable likelihood functions, new inference algorithms are needed. This paper proposes two Monte Carlo techniques for these \u201clikelihood-free\u201d models, one of which can use likelihood estimates from neural networks to accelerate inference. The paper demonstrates efficacy on three simple examples, each using under 50 lines of probabilistic code.", "creator": "LaTeX with hyperref package"}}}