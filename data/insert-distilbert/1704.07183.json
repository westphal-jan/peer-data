{"id": "1704.07183", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Apr-2017", "title": "Stochastic Constraint Programming as Reinforcement Learning", "abstract": "continuous stochastic constraint programming ( scp ) is an extension of constraint programming ( cp ) presently used for modelling and concurrent solving problems involving constraints and uncertainty. scp inherits excellent modelling abilities and filtering algorithms from cp, but so far it has not been applied to large problems. reinforcement learning ( rl ) extends dynamic programming to large stochastic problems, but there is not problem - specific generic and has no objective generic solvers. we propose a hybrid combining the scalability of rl with the simulated modelling and constraint filtering methods of simulated cp. we implement a prototype in class a cp system instance and demonstrate its intrinsic usefulness on scp problems.", "histories": [["v1", "Mon, 24 Apr 2017 12:44:38 GMT  (17kb)", "http://arxiv.org/abs/1704.07183v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["steven prestwich", "roberto rossi", "armagan tarim"], "accepted": false, "id": "1704.07183"}, "pdf": {"name": "1704.07183.pdf", "metadata": {"source": "CRF", "title": "Stochastic Constraint Programming as Reinforcement Learning", "authors": ["S. D. Prestwich", "R. Rossi", "S. A. Tarim"], "emails": ["s.prestwich@cs.ucc.ie,", "roberto.rossi@ed.ac.uk,", "at@cankaya.edu.tr"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 4.\n07 18\n3v 1\n[ cs\n.A I]\n2 4\nstraint Programming (CP) used for modelling and solving problems involving constraints and uncertainty. SCP inherits excellent modelling abilities and filtering algorithms from CP, but so far it has not been applied to large problems. Reinforcement Learning (RL) extends Dynamic Programming to large stochastic problems, but is problem-specific and has no generic solvers. We propose a hybrid combining the scalability of RL with the modelling and constraint filtering methods of CP. We implement a prototype in a CP system and demonstrate its usefulness on SCP problems."}, {"heading": "1 Introduction", "text": "Stochastic Constraint Programming (SCP) is an extension of Constraint Programming (CP) designed to model and solve complex problems involving uncertainty and probability, a direction of research first proposed in [2,22]. SCP problems are in a higher complexity class than CP problems and can be much harder to solve, but many real-world problems contain elements of uncertainty so this is an important class of problems. They are traditionally tackled by Stochastic Programming [5], but a motivation for SCP is that it should be able to exploit the richer choice of variables and constraints used in CP, leading to more compact models and the use of powerful filtering algorithms.\nHowever, so far SCP has not been applied to very large problems. If a problem has many decision variables we can apply metaheuristics [11,12,14,22] but we must still check all scenarios to obtain an exact solution, though in special cases a subset is sufficient [13]. If we are content with an approximate solution we can apply scenario reduction by sampling [8] or approximation [4], but scenario reduction methods can be nontrivial to analyse and apply. Confidence intervals can be applied to control approximations [16] but this does not address the issue of scaling up to a huge number of scenarios. In summary, to solve large real-world problems via SCP one must think carefully about scenario reduction, and to do so can require significant mathematical expertise. Moreover, the number of scenarios required might turn out to be unmanageable.\nIn contrast, many large stochastic and adversarial problems have been successfully solved by methods from Reinforcement Learning (RL) [18], which is related to Neuro-\nDynamic Programming [3] and Approximate Dynamic Programming [10]. RL algorithms are designed for problems in which rewards may be delayed, so that the consequences of making a decision are not known until a later time. RL algorithms such as SARSA and Q-Learning can be used to find high-quality solutions to large-scale problems. In RL researchers are less concerned with sample sizes, confidence intervals or other statistical issues. Typically they model their problem, choose an RL algorithm and tune it to their application. These methods have been successfully applied to problems in robotics, control, game playing, trading and human-computer interfaces, for example. Perhaps most famously, RL was used to learn how to play the game of Backgammon [20] by trial-and-error self-play and without human intervention, leading to a world-class player. Related methods developed in Operations Research to handle exponentially-many actions are able to handle far larger problems, for example the scheduling of tens of thousands of trucks [10]. Such applications show that the solutions found by RL can be good enough for practical purposes.\nSuch applications are far beyond the scope of current SCP techniques. Our aim is to boost the scalability of SCP so that it can tackle similar problems to RL, while retaining its modelling power and constraint filtering techniques. From the RL point of view, this is of interest because it provides a generic RL solver for a significant class of problems, which uses constraint filtering to reduce the size of the state space. Section 2 provides background on SCP, Section 3 describes our method, Section 4 presents experimental results using an implementation in a CP system, and Section 5 draws conclusions and discusses future work."}, {"heading": "2 Stochastic Constraint Programming", "text": "Anm-stage SCSP is defined as a tuple (V, S,D, P,C, \u03b8, L) where V is a set of decision variables, S a set of stochastic variables, D a function mapping each element of V \u222a S to a domain of values, P a function mapping each variable in S to a probability distribution, C a set of constraints on V \u222a S, \u03b8 a function mapping each constraint in C to a threshold value \u03b8 \u2208 (0, 1], and L = [\u3008V1, S1\u3009, . . . , \u3008Vm, Sm\u3009] a list of decision stages such that the Vi partition V and the Si partition S. Each constraint must contain at least one V variable, a constraint with threshold \u03b8(h) = 1 is a hard constraint, and one with \u03b8(h) < 1 is a chance constraint. To solve an m-stage SCSP an assignment to the variables in V1 must be found such that, given random values for S1, assignments can be found for V2 such that, given random values for S2, . . . assignments can be found for Vm such that, given random values for Sm, the hard constraints are each satisfied and the chance constraints (containing both decision and stochastic variables) are satisfied in the specified fraction of all possible scenarios (set of values for the stochastic variables).\nAn SCSP solution is a policy tree of decisions, in which each node represents a value chosen for a decision variable, and each arc from a node represents the value assigned to a stochastic variable. Each path in the tree represents a different possible scenario and the values assigned to decision variables in that scenario. A satisfying policy tree is a policy tree in which each chance constraint is satisfied with respect to the tree. A\nchance constraint h \u2208 C is satisfied with respect to a policy tree if it is satisfied under some fraction \u03c6 \u2265 \u03b8(h) of all possible paths in the tree."}, {"heading": "3 SCP as RL", "text": "In this section we describe our hybrid approach to solving SCP problems."}, {"heading": "3.1 Reinforcement Learning", "text": "RL is an area of machine learning with roots in dynamic programming, Monte Carlo methods, optimal control and behavioural psychology. It is one of the three main classes of machine learning, the other two being supervised and unsupervised learning. RL involves the interaction between a decision-making agent and its environment. The agent seeks to optimise an expected total reward under uncertainty about its environment. The agent can take actions which may affect the future state of the environment, which in turn may affect the agent\u2019s later options.\nRewards might be random, which is why the agent maximises their expectation. Rewards may also be delayed in time, so that choosing actions involves taking into account their later consequences. For example when playing a game the only reward might occur at the end of the game: 1 for a win and 0 for a loss. Thus the agent must learn how to react to any possible game state in order to maximise its probability of a win.\nAny state might have an associated reward. The agent must learn a policy (a function from states to actions) that maximises the total expected reward, under the assumption that it follows an optimal path. To do this it estimates the total expected reward starting from each state, typically storing the estimates in a table of state values (or in some algorithms state-action values). The agent learns these estimates by performing a large number of Monte Carlo-style simulations called episodes, and updating the values at each state encountered."}, {"heading": "3.2 Modelling", "text": "Wemodel an SCP problem as an RL problem as shown in Table 3.2. In this approachwe can benefit from constraint filtering methods: stronger filtering restricts our choice of actions (domain values), so we avoid visiting more states, which may enable a simpler state aggregation method to emulate a more complex one. But it is possible to reach a dead-end state in which no actions remain, because of SCP domain wipe-out. We need RL to learn to take decisions that will avoid dead-ends, so we reward each (decision or random) variable assignment with a constant K , which will typically be greater than the greatest possible objective value. Instead we could relax sufficient constraints to prevent dead-ends then penalise any violations, but this loses the advantage of constraint filtering.\nFrom the RL point of view, the CP solver is now part of the policy. For example, suppose we have an SCP problem containing an alldifferent global constraint\nsuch as that in [15], and we solve it, obtaining a policy. If we then try to use that policy to choose a sequence of actions, but with a different CP solver that implements alldifferent as a set of pairwise disequality constraints, the different level of filtering leads to a different state space, we will follow a different policy, and the results will be unpredictable. We must therefore use exactly the same CP solver when finding a policy and using it.\nThis framework can handle a single chance constraint, plus any number of hard constraints, by attempting to maximise the probability that the constraint is satisfied: if this is greater than the threshold then we have a solution. However, it does not handle multiple chance constraints. It might be possible to extend it to chance constraints but we do not see this as vital. Most SP problems do not use chance constraints, instead penalising constraint violations and minimising the total penalty as part of the objective. For a recent discussion on penalty functions versus chance constraints see [7].\nA potential problem with this scheme is that domain values for a random variable might be filtered because of earlier decision variable assignments, or assigning a value to a random variable might fail because of domain wipe-out. This would artificially rule out some scenarios and make the solver incorrect, but it can be avoided by a cheap runtime check: on encountering a random variable, check that it still has its original domain; and after selecting a domain value, check that the assignment is successful. If the check fails, the probe halts at the random variable."}, {"heading": "3.3 Solving", "text": "The RL algorithm we shall use is a form of tabular TD(0) [18] with a reward computed at the end of each episode. However, many problems have far too many possible states to use RL in tabular form. To extend RL to cope with such problems researchers have applied function approximation, also referred to as state generalisation or state aggregation. This is key to the success of RL on real-world problems and we shall use it below. To apply our algorithm a user must provide an SCP model, including a real-valued function on total assignments defining a reward."}, {"heading": "4 Experiments", "text": "We now perform experiments to evaluate our approach, which we refer to as TDCP, on stochastic problems. It is implemented in the Eclipse constraint logic programming system [1] and all experiments are performed on a 2.8 GHz Pentium 4 with 512 MB RAM."}, {"heading": "4.1 An artificial single-stage problem", "text": "As a first experiment we design an artificial single-stage problem with known optimum solution. The problem has N decision variables di and N random variables ri all with domain {1, . . . , N}. We post an alldifferent constraint on the decision variables: there are N variables with N values, so the solution must be a permutation of {1, . . . , N}. All random variable domains have the same uniform probability distribution: each value has probability 1/N . The objective is to maximise the sum of the probabilities that each decision variable di is no greater than each random variable ri+1 . . . rN : see Figure 1, where reify(c) is 1 if condition c is true and 0 if it is false. The sum of the reified terms (without expectation) is the TDL reward. The optimal solution is known to be {d1 = 1, d2 = 2 . . . , dN = N} with objective value N(2N \u2212 1)/6. There are NN scenarios so this problem cannot be solved by SCP methods without some form of scenario reduction.\nTo handle the exponentially large number of states we use a form of state aggregation based on Zobrist hashing [23] withH hash table entries for some integerH , which works as follows. To each (decision or random) variable-value pair \u3008v, i\u3009 we assign a random integer rvi which remains fixed. At any point during an episode we have some set S of assignments \u3008v, i\u3009, and we take the exclusive-or of the rvi values associated with these assignments:\nXS = \u2295\n\u3008v,i\u3009\u2208S\nrvi\nFinally, we use XS modH as an index to an array V with H entries. So at any point during an episode we are in an RL state with variables S assigned, and we use array\nelement V [XS modH ] as the state value estimate. If H is sufficiently large then hash collisions are unlikely, and we will have a unique array element for each state encountered. In practice some hash collisions will occur, leading to multiple states sharing value estimates, and less exact results. Nevertheless, we shall show empirically that good results can be obtained. Our hash-based state aggregation can also be applied to other single-stage SCP problems, or multi-stage problems in which recourse actions are computed by an algorithm other than RL (as in the problem of Section 4.2). However, we do not expect it to be successful on all multi-stage problems.\nThe scatter plot in Figure 2 shows the results for N = 10 using H = 105. For several numbers of episodes (all far less than the full ten billion) we run TD(0) ten times with different random seeds. The graph shows that as more episodes are used for learning, the estimated objective function value converges to the known optimum value."}, {"heading": "4.2 Pre-disaster planning", "text": "In this section we tackle a pre-disaster planning problem introduced by Peeta et al. [9] who solved it approximately using a Monte Carlo method with function approximation. The six problem instances were later solved exactly in [13]. A detailed description of the problem can be found in those papers, and here we state only its main features.\nThis is a two-stage problem in which the recourse action is determined by solving a shortest path problem. The first stage has 30 binary decision variables representing investment in links of a transportation network, and 30 binary random variables representing the survival or failure of those links in a hypothetical earthquake, according to given survival probabilities. The probabilities are assumed to be independent of each other, but they depend on the investment decisions: decision-dependent probabilities are a non-standard feature of SP and SCP called endogenous uncertainty. (This can make problems harder to solve by some methods, but not for a simulation-based approach such as ours.) We can choose to invest in any subset of the links subject to a budget constraint, and three alternative budget levels B1 < B2 < B3 are chosen. The objective is to minimise the expected total path length between five pairs of nodes in the\nnetwork, where a penalty M is imposed when no path exists between a pair of nodes. Two alternative penalty schemes are used, which we shall refer to as low-M and high-M, giving a total of six problem instances.\nAn SCP model is shown in Figure 3. For each link e \u2208 E (whereE is the set of links in the network) we define a binary decision variable ye which is 1 if we invest in that link and 0 otherwise. We define a binary stochastic variable re which is 1 if link e survives and 0 if it fails. We define a single second-stage decision variable z to be computed by a shortest-path algorithm. Following Peeta et al. we denote the survival (non-failure) probability of link e by pe without investment and qe with, the investment required for link e by ce, the length of link e by te, the budget by B, and the penalty for no path from source to sink by M . shortest path cost(M, {te|e \u2208 E}, {re|e \u2208 E}, z) is a global constraint that constructs a representation of the graph from the re values, uses Dijkstra\u2019s algorithm to find a shortest path between source and sink, and computes its length z; if source and sink are unconnected then z = M . We implemented this constraint via an Eclipse suspended goal whose execution is delayed until the second stage. To model failure probabilities we define real auxiliary decision variables fe. The fe are constrained to be 1 \u2212 pe if link e is invested in (ye = 1) and 1 \u2212 qe otherwise. Because they are auxiliary variables and functionally dependent on the ye we do not include them in the stage structure.\nThe problem is hard to solve exactly by standard SP and SCP methods, partly because of its endogenous uncertainty, but mainly because it has approximately a billion (230) scenarios. Peeta et al. therefore used function approximation and Monte Carlo simulation to find good solutions. However, a symmetry-based technique called scenario bundling was later applied to find exact solutions [13].\nThis is an ideal test problem for our approach: it is an interesting stochastic optimisation problem based on real-world data; it is a large, hard problem (unless we use scenario bundling); unusually for such a problem we know the exact answer (via sce-\nnario bundling); again unusually we can exactly evaluate new solutions (via scenario bundling); and we can compare our approximate results with those found by another approximate approach (that of Peeta et al.). We again use our Zobrist hashing technique from Section 4.1. Though this problem is two-stage because it has recourse actions, in a sense it is only a one-stage problem because the recourse actions are computed by a shortest path algorithm: RL need not learn how to react to different scenarios. This makes the problem appropriate for our hashing technique. In a true multi-stage problem TDCP will never learn how to react to any given scenario because it is unlikely ever to encounter the same scenario twice.\nIn experiments we found quite different solution quality in different runs, so for each problem instance we performed ten runs of TDCP and report the best results in Table 2. We show the optimum objective values from [13], the exact evaluation of the plans found by Peeta et al., the TDCP plans (a list of the links invested in), their TDCPestimated objective values and their exact values. Each run of Peeta et al. took approximately 380 seconds on a PC with 2 \u00d7 2.8 GHz Xeon processor and 5 GB RAM implemented in Matlab 7.0, while ours took approximately 1000 seconds each on a roughly comparable machine: we are unable to compare execution times directly but ours seem reasonably efficient.\nThe TDCP objective estimates turn out to be quite accurate, with at most 0.5% deviance from the actual objective value. Our approach required multiple runs of 106 episodes instead of one run, so it appears to be less efficient than that of Peeta et al., but the results are competitive and in two cases were closer to optimal. It is perhaps surprising that TDCP, a general-purpose SCP algorithm with random state aggregation, gives comparable results to the more sophisticated and problem-specific approximation of Peeta et al.\nAs an illustration of an advantage of using a generic CP-based solver, we experimented further with the model. In principle we can apply many standard CP techniques to improve the SCP model: add implied constraints, change the filtering algorithm for a constraint (for example by using a global constraint), break symmetries, exploit dominances, experiment with different variable orderings, and so on. For this problem we found improved results by making two changes. Firstly, we added constraints to limit the search to maximal solutions:\nBye + z + ce > B (\u2200e \u2208 E)\nThese constraints exclude non-maximal investment plans in which we do not invest in a link despite there being enough unspent money to do so. Secondly we randomly permute the ye before starting the search: we did not find a good deterministic variable ordering, but by randomising we hope to find a better ordering (if one exists) over multiple runs. We obtained some improved results: for B=2M=low we found the plan (1 4 10 15 17 20 21 22 25 23) with estimated objective value 67.271 and actual value 67.334, and for B=1 M=high plan (10 17 21 22 23 25) with estimated value 211.492 and actual value 212.413 (this is the optimal plan from [13]), both better than the plans of Peeta et al. However, the use of a random variable permutation caused a greater variability in plan quality. Clearly the variable ordering has a strong effect on the search, and more research might find a good heuristic. But the main point of this experiment was to show that it is very easy to experimentwith alternative SCPmodels and heuristics to obtain new RL algorithms for SCP."}, {"heading": "5 Conclusion", "text": "We implemented a simple RL algorithm in a CP solver, and obtained a novel algorithm for solving SCP problems. We showed that this RL/CP hybrid can find high-quality solutions to hard problems. We believe that exploiting Machine Learning methods is a good direction for SCP research, to make it a practical tool for real-world problems. In future work we shall show that our approach extends to multistage SCP problems using different state aggregation techniques (we have preliminary results on an inventory control problem).\nThis work should also be of interest from an RL perspective. Firstly, implementing RL algorithms in a CP solver enables the user to perform rapid prototyping of RL methods for new problems. For example, simply by specifying a different filtering algorithm for a global constraint we obtain a new RL solver. Secondly, we now have an RL solver for an interesting class of problem (SCP problems). There are no general-purpose RL solvers available because, like Dynamic Programming, RL is a problem-specific approach. Thirdly, allowing the use of constraint filtering methods in RL potentially boosts its ability to solve tightly-constrained problems.\nAcknowledgments This publication has emanated from research supported in part by a research grant from Science Foundation Ireland (SFI) underGrant Number SFI/12/RC/2289."}], "references": [{"title": "Constraint Logic Programming Using Eclipse", "author": ["K.R. Apt", "M. Wallace"], "venue": "Cambridge University Press,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2007}, {"title": "Towards Stochastic Constraint Programming: A Study of On-Line Multi-Choice Knapsack with Deadlines", "author": ["T. Benoist", "E. Bourreau", "Y. Caseau", "B. Rottembourg"], "venue": "7th International Conference on Principles and Practice of Constraint Programming, Lecture Notes in Computer Science vol. 2239, Springer,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2001}, {"title": "Neuro-Dynamic Programming", "author": ["D.P. Bertsekas", "J.N. Tsitsiklis"], "venue": "Athena Scientific,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1996}, {"title": "A Survey on Metaheuristics for Stochastic Combinatorial Optimization", "author": ["L. Bianchi", "M. Dorigo", "L.M. Gambardella", "W.J. Gutjahr"], "venue": "Natural Computing 8(2):239\u2013287,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2009}, {"title": "Introduction to Stochastic Programming", "author": ["J. Birge", "F. Louveaux"], "venue": "Springer Series in Operations Research,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1997}, {"title": "On the Stochastic Constraint Satisfaction Framework", "author": ["L. Bordeaux", "H. Samulowitz"], "venue": "ACM Symposium on Applied Computing,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2007}, {"title": "On Relations Between Chance Constrained and Penalty Function Problems Under Discrete Distributions", "author": ["M. Branda"], "venue": "Mathematical Methods of Operations Research 77:265\u2013277,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2013}, {"title": "W", "author": ["J. Dup\u01cecov\u00e1", "N. Gr\u00f6we-Kuska"], "venue": "R\u00f6misch. Scenario Reduction in Stochastic Programming: an Approach Using Probability Metrics.Mathematical Programming Series A 95:493\u2013 511,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2003}, {"title": "K", "author": ["S. Peeta", "F.S. Salman", "D. Gunnec"], "venue": "Viswanath. Pre-Disaster Investment Decisions for Strengthening a Highway Network.Computers &Operations Research 37:1708\u20131719,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2010}, {"title": "Approximate Dynamic Programming", "author": ["W.B. Powell"], "venue": "John Wiley & Sons,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2007}, {"title": "Evolving Parameterised Policies for Stochastic Constraint Programming", "author": ["S.D. Prestwich", "S.A. Tarim", "R. Rossi", "B. Hnich"], "venue": "15th International Conference on Principles and Practice of Constraint Programming, Lecture Notes in Computer Science vol. 5732,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2009}, {"title": "Stochastic Constraint Programming by Neuroevolution With Filtering", "author": ["S.D. Prestwich", "S.A. Tarim", "R. Rossi", "B. Hnich"], "venue": "7th International Conference on Integration of Artificial Intelligence and Operations Research Techniques in Constraint Programming, Lecture Notes in Computer Science vol. 6140, Springer,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2010}, {"title": "Value Interchangeability in Scenario Generation", "author": ["S.D. Prestwich", "M. Laumanns", "B. Kawas"], "venue": "19th International Conference on Principles and Practice of Constraint Programming, Lecture Notes in Computer Science Vol. 8124, Springer,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2013}, {"title": "Hybrid Metaheuristics for Stochastic Constraint Programming", "author": ["S.D. Prestwich", "S.A. Tarim", "R. Rossi", "B. Hnich"], "venue": "Constraints,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2014}, {"title": "Generalized Arc Consistency for Global Cardinality Constraint", "author": ["J.-C. R\u00e9gin"], "venue": "14th National Conference on Artificial Intelligence pp. 209\u2013215,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1996}, {"title": "Confidence-Based Reasoning in Stochastic Constraint Programming", "author": ["R. Rossi", "B. Hnich", "S.A. Tarim", "S. Prestwich"], "venue": "Artificial Intelligence, 228(1):129\u2013152, Elsevier,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2015}, {"title": "Using Connectionist Systems", "author": ["G.A. Rummery", "M. Niranjan", "M. On-Line Q-Learnin"], "venue": "Technical Report CUED/F-INFENG/TR 166, Cambridge University Engineering Department,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1994}, {"title": "Reinforcement Learning: An Introduction", "author": ["R.S. Sutton", "A.G. Barto"], "venue": "MIT Press, Cambridge, MA,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1998}, {"title": "A Hybrid Bender\u2019s Decomposition Method for Solving Stochastic Constraint Programs with Linear Recourse", "author": ["S.A. Tarim", "I. Miguel"], "venue": "Lecture Notes in Computer Science vol. 3978, Springer,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2006}, {"title": "Practical Issues in Temporal Difference Learning.Machine Learning 8:257\u2013277", "author": ["G. Tesauro"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1992}, {"title": "Commentary \u2014 Perspectives on Stochastic Optimization Over Time", "author": ["J.N. Tsitsiklis"], "venue": "INFORMS Journal on Computing 22(1):18\u201319,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2010}, {"title": "Stochastic Constraint Programming", "author": ["T. Walsh"], "venue": "15th European Conference on Artificial Intelligence,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2002}, {"title": "A New Hashing Method with Application for Game Playing", "author": ["A.L. Zobrist"], "venue": "Technical Report 88, Computer Sciences Department, University of Wisconsin, Madison, Wisconsin, 1969. Also: International Computer Chess Association Journal 13(2):69\u201373,", "citeRegEx": "23", "shortCiteRegEx": null, "year": 1990}], "referenceMentions": [{"referenceID": 1, "context": "Stochastic Constraint Programming (SCP) is an extension of Constraint Programming (CP) designed to model and solve complex problems involving uncertainty and probability, a direction of research first proposed in [2,22].", "startOffset": 213, "endOffset": 219}, {"referenceID": 21, "context": "Stochastic Constraint Programming (SCP) is an extension of Constraint Programming (CP) designed to model and solve complex problems involving uncertainty and probability, a direction of research first proposed in [2,22].", "startOffset": 213, "endOffset": 219}, {"referenceID": 4, "context": "They are traditionally tackled by Stochastic Programming [5], but a motivation for SCP is that it should be able to exploit the richer choice of variables and constraints used in CP, leading to more compact models and the use of powerful filtering algorithms.", "startOffset": 57, "endOffset": 60}, {"referenceID": 10, "context": "If a problem has many decision variables we can apply metaheuristics [11,12,14,22] but we must still check all scenarios to obtain an exact solution, though in special cases a subset is sufficient [13].", "startOffset": 69, "endOffset": 82}, {"referenceID": 11, "context": "If a problem has many decision variables we can apply metaheuristics [11,12,14,22] but we must still check all scenarios to obtain an exact solution, though in special cases a subset is sufficient [13].", "startOffset": 69, "endOffset": 82}, {"referenceID": 13, "context": "If a problem has many decision variables we can apply metaheuristics [11,12,14,22] but we must still check all scenarios to obtain an exact solution, though in special cases a subset is sufficient [13].", "startOffset": 69, "endOffset": 82}, {"referenceID": 21, "context": "If a problem has many decision variables we can apply metaheuristics [11,12,14,22] but we must still check all scenarios to obtain an exact solution, though in special cases a subset is sufficient [13].", "startOffset": 69, "endOffset": 82}, {"referenceID": 12, "context": "If a problem has many decision variables we can apply metaheuristics [11,12,14,22] but we must still check all scenarios to obtain an exact solution, though in special cases a subset is sufficient [13].", "startOffset": 197, "endOffset": 201}, {"referenceID": 7, "context": "If we are content with an approximate solution we can apply scenario reduction by sampling [8] or approximation [4], but scenario reduction methods can be nontrivial to analyse and apply.", "startOffset": 91, "endOffset": 94}, {"referenceID": 3, "context": "If we are content with an approximate solution we can apply scenario reduction by sampling [8] or approximation [4], but scenario reduction methods can be nontrivial to analyse and apply.", "startOffset": 112, "endOffset": 115}, {"referenceID": 15, "context": "Confidence intervals can be applied to control approximations [16] but this does not address the issue of scaling up to a huge number of scenarios.", "startOffset": 62, "endOffset": 66}, {"referenceID": 17, "context": "In contrast, many large stochastic and adversarial problems have been successfully solved by methods from Reinforcement Learning (RL) [18], which is related to Neuro-", "startOffset": 134, "endOffset": 138}, {"referenceID": 2, "context": "Dynamic Programming [3] and Approximate Dynamic Programming [10].", "startOffset": 20, "endOffset": 23}, {"referenceID": 9, "context": "Dynamic Programming [3] and Approximate Dynamic Programming [10].", "startOffset": 60, "endOffset": 64}, {"referenceID": 19, "context": "Perhaps most famously, RL was used to learn how to play the game of Backgammon [20] by trial-and-error self-play and without human intervention, leading to a world-class player.", "startOffset": 79, "endOffset": 83}, {"referenceID": 9, "context": "Related methods developed in Operations Research to handle exponentially-many actions are able to handle far larger problems, for example the scheduling of tens of thousands of trucks [10].", "startOffset": 184, "endOffset": 188}, {"referenceID": 14, "context": "such as that in [15], and we solve it, obtaining a policy.", "startOffset": 16, "endOffset": 20}, {"referenceID": 6, "context": "For a recent discussion on penalty functions versus chance constraints see [7].", "startOffset": 75, "endOffset": 78}, {"referenceID": 17, "context": "The RL algorithm we shall use is a form of tabular TD(0) [18] with a reward computed at the end of each episode.", "startOffset": 57, "endOffset": 61}, {"referenceID": 0, "context": "It is implemented in the Eclipse constraint logic programming system [1] and all experiments are performed on a 2.", "startOffset": 69, "endOffset": 72}, {"referenceID": 22, "context": "To handle the exponentially large number of states we use a form of state aggregation based on Zobrist hashing [23] withH hash table entries for some integerH , which works as follows.", "startOffset": 111, "endOffset": 115}, {"referenceID": 8, "context": "[9] who solved it approximately using a Monte Carlo method with function approximation.", "startOffset": 0, "endOffset": 3}, {"referenceID": 12, "context": "The six problem instances were later solved exactly in [13].", "startOffset": 55, "endOffset": 59}, {"referenceID": 12, "context": "However, a symmetry-based technique called scenario bundling was later applied to find exact solutions [13].", "startOffset": 103, "endOffset": 107}, {"referenceID": 12, "context": "We show the optimum objective values from [13], the exact evaluation of the plans found by Peeta et al.", "startOffset": 42, "endOffset": 46}, {"referenceID": 8, "context": "B M optimum [9] TDCP plan estimated actual", "startOffset": 12, "endOffset": 15}, {"referenceID": 12, "context": "413 (this is the optimal plan from [13]), both better than the plans of Peeta et al.", "startOffset": 35, "endOffset": 39}], "year": 2014, "abstractText": "Stochastic Constraint Programming (SCP) is an extension of Constraint Programming (CP) used for modelling and solving problems involving constraints and uncertainty. SCP inherits excellent modelling abilities and filtering algorithms from CP, but so far it has not been applied to large problems. Reinforcement Learning (RL) extends Dynamic Programming to large stochastic problems, but is problem-specific and has no generic solvers. We propose a hybrid combining the scalability of RL with the modelling and constraint filtering methods of CP. We implement a prototype in a CP system and demonstrate its usefulness on SCP problems.", "creator": "gnuplot 4.4 patchlevel 0"}}}