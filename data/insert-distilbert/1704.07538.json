{"id": "1704.07538", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "25-Apr-2017", "title": "Path Planning with Kinematic Constraints for Robot Groups", "abstract": "path planning for multiple robots and is well now studied in comparing the ai and robotics communities. for a ideally given discretized environment, robots need to find collision - free paths to a set size of specified goal locations. robots can be fully anonymous, non - anonymous, chained or organized in groups. although powerful solvers for this abstract problem exist, they make simplifying evolutionary assumptions by ignoring kinematic constraints, making it difficult to use the resulting plans on actual humanoid robots. in this paper, we firmly present a solution which takes kinematic constraints, such conditions as maximum velocities, entirely into account, while guaranteeing a user - specified minimum safety distance range between robots. we demonstrate our particular approach theoretically in simulation and on real robots in 2d and 3d environments.", "histories": [["v1", "Tue, 25 Apr 2017 04:52:09 GMT  (492kb,D)", "http://arxiv.org/abs/1704.07538v1", "Published in Southern California Robotics Symposium 2016"]], "COMMENTS": "Published in Southern California Robotics Symposium 2016", "reviews": [], "SUBJECTS": "cs.AI cs.RO", "authors": ["wolfgang h\\\"onig", "t k satish kumar", "liron cohen", "hang ma", "sven koenig", "nora ayanian"], "accepted": false, "id": "1704.07538"}, "pdf": {"name": "1704.07538.pdf", "metadata": {"source": "CRF", "title": "Path Planning With Kinematic Constraints For Robot Groups", "authors": ["Wolfgang H\u00f6nig", "T. K. Satish Kumar", "Liron Cohen", "Hang Ma", "Sven Koenig", "Nora Ayanian"], "emails": ["whoenig@usc.edu,", "tkskwork@gmail.com,", "hangma@usc.edu.", "lcohen@usc.edu.", "skoenig@usc.edu.", "ayanian@usc.edu."], "sections": [{"heading": null, "text": "I. INTRODUCTION\nPath planning for multiple robots has many applications, including improving traffic at intersections, search and rescue, formation control, warehouse management, airport scheduling, and assembly planning. There are two existing major approaches: The first one works in continuous environments and can take kinematic constraints into account but does not perform well in highly cluttered, puzzle-like scenes, and the second one works in discrete environments with artificial agents without motion constraints.\nHence, it is desirable to combine the two approaches by providing a planner which can deal with highly cluttered, puzzle-like scenes even under kinematic constraints. We tackle this challenge by introducing a postprocessing step that works on the output of a discrete solver. While the solver itself is allowed to make simplifying assumptions in order to run faster, our postprocessing step reinstates the adherence to real-world kinematic constraints.\nSolvers from the AI community for Multi-Agent PathFinding (MAPF) problems and Target-Allocation and PathFinding (TAPF) problems are able to solve instances with hundreds of agents [1]. For the MAPF problem, each agent has an assigned start- and goal location. The objective is to find a set of synchronized paths, one path per agent, such that each agent reaches its goal location without colliding with other agents while minimizing the number of actions required. Each agent can either move to an adjacent location in one timestep or wait. The TAPF problem is a generalization in which the agents are partitioned into K groups. A set of goal locations is assinged to each group. A solver\nThe authors are with the Department of Computer Science at the University of Southern California, USA. whoenig@usc.edu, tkskwork@gmail.com, {hangma,lcohen,skoenig,ayanian}@usc.edu. Our research was supported by ARL under grant number W911NF-14-D-0005, ONR under grant numbers N00014-14-1-0734 and N00014-09-1-1031, NASA via Stinger Ghaffarian Technologies, and NSF under grant numbers 1409987 and 1319966.\nallocates a specific goal location to each agent and reports a set of synchronized paths for all agents. If K = 1, all agents are anonymous, and, if K equals the number of agents, TAPF is the same as MAPF. Therefore, we will focus on TAPF in the remainder of this paper.\nUsing a TAPF solution on real robots has several limitations: (a) robots have kinematic constraints, such as maximum velocities and accelerations; and (b) the generated solution\u2019s timing is inflexible, necessitating costly replanning when robots execute the solution imperfectly. A framework that does not explicitly address faulty execution can cause undesirable robot-robot collisions or repeated replanning. To overcome these limitations while still being able to make use of powerful solvers developed in the AI community, we propose the use of a postprocessing step based on the algorithmic framework of Simple Temporal Networks (STNs)."}, {"heading": "II. TAPF", "text": "We are given an undirected graph G1 = (V1, E1) and K multi-agent groups {group1, group2, . . . , groupK}, where groupi consists of Ki interchangeable robots {ai1, ai2, . . . , aiKi} for all i \u2208 {1, 2, . . . ,K}. Each robot a i j has a unique start location sij \u2208 V1, and the i-th group has a set of unique target locations {gi1, gi2, . . . , giKi}. A solution to the TAPF problem finds K permutations, one for each group, to uniquely assign a target location to each robot and a collision-free path for each robot to navigate from its start location to the assigned goal location. A more rigorous mathematical description is given in [1].\nThe makespan is the total time until the last robot reached its goal location. A solution is optimal if the makespan is minimal. For the case of a single group, the problem can be solved in polynomial time. However, in general, it is NPhard to approximate an optimal solution within any constant factor less than 4/3 [2].\nThe Conflict-Based Min-Cost-Flow (CBM) algorithm uses a hierarchical approach, where the lower level uses a maxflow algorithm and the higher level uses a best-first search, which tries to resolve conflicts as they occur [1]. It has been\nar X\niv :1\n70 4.\n07 53\n8v 1\n[ cs\n.A I]\n2 5\nA pr\n2 01\n7\nshown empirically that this method works well in warehouse domains with dozens of teams and hundreds of agents.\nAn example of a TAPF instance is shown in Fig. 1. Here, there are two groups, that each contain a single robot. The robots are holonomic and move in a discretized environment. One optimal solution of the given TAPF problem is \u3008A,B,C,D,E\u3009 for one robot and \u3008B,C, F,C,D\u3009 for the other robot."}, {"heading": "III. STN", "text": "The output of the TAPF solver is a set of synchronized paths, assuming that robots can traverse the unit-length edges in unit time. We call the change of location of an agent event. In order to include kinematic constraints, such as maximum velocities of the different robots, we use a Temporal Plan Graph (TPG). The TPG captures the partial order of the events determined by the TAPF solver. More formally, the TPG is an acyclic graph G2 = (V2, E2), where each vertex v \u2208 V2 represents an event and each edge \u3008u, v\u3009 \u2208 E2 indicates that u should be scheduled before v.\nIn the TAPF case, there are two kinds of temporal precedences. First, the precedence which captures the location visit order for each robot individually. Second, the TAPF solution synchronizes the paths between robots to avoid conflicts. This happens if robot 1 visits a location at timestep t1 and robot 2 visits the same location at timestep t2 > t1.\nMoreover, we can add safety markers as additional events to ensure a minimum safety distance between robots at any time. There are several methods to do so. An LP-solver can be used to optimize for maximum throughput or minimum makespan [3]. If the desired safety distance divides the edge length, the problem can be solved with a user-specified edgelength in strongly polynomial time by using a shortest path algorithm [4]. One example of a TPG with safety markers is shown in Fig. 2.\nThe TPG captures only the necessary partial order on events. In order to include kinematic constraints such as maximum velocities for robots or certain parts of the environment, we can extend it to a simple temporal network (STN). An STN can be encoded as directed graph G3 = (V3, E3), where V3 = {X0, X1, . . . , XN} and E3 are the sets of events and edges, respectively. Each edge e = \u3008Xi, Xj\u3009 \u2208 E3 has lower and upper bounds [LB(e), UB(e)], indicating that Xj has to be scheduled between LB(e) and UB(e) time units after Xi."}, {"heading": "IV. EXPERIMENTS", "text": "We implement TAPF and MAPF solvers as well as various variants of the STN framework in C++. For performance evaluation, we randomly generate 10 \u00d7 10 \u00d7 5 maps with\nvarying numbers of robots, groups, and obstacles and measure how long the TAPF solver takes to find an optimal solution. For example, a scenario with 150 obstacles and 100 robots in 5 groups can be solved in about 5 s on commodity hardware. The time the STN requires to compute a solution varies by method and desired safety distance. Interestingly, its runtime is smaller in the common case of a large safety distance, because fewer markers are required in that case. In a warehouse-like domain with 100 robots, it takes 4 s to compute a solution.\nWe verified our approach in simulation using the VREP robotics simulator for differential drive robots, 6-legged robots, and quadcopters. Furthermore, we performed experiments with up to 8 iRobot Create2 robots, verifying that actual robots are actually able to follow the computed trajectories. An example is shown in Fig. 3."}, {"heading": "V. CONCLUSION", "text": "We presented an approach for using powerful solvers from the AI community for multi-agent path finding on actual robots, which obey kinematic constraints. Although not shown here, our approach is optimal with respect to the makespan under some conditions. We demonstrate the applicability of our approach through simulation and on actual robots. In the future, we would like to test our framework on physical quadcopters and add an execution monitoring framework which makes use of the \u201cslack\u201d of the STN to avoid costly replanning in case of inaccurate execution."}], "references": [{"title": "Optimal target assignment and path finding for teams of agents", "author": ["H. Ma", "S. Koenig"], "venue": "International Conference on Autonomous Agents and Multiagent Systems, 2016.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2016}, {"title": "Multiagent path finding with payload transfers and the package-exchange robot-routing problem", "author": ["H. Ma", "C. Tovey", "G. Sharon", "T.K.S. Kumar", "S. Koenig"], "venue": "AAAI Conference on Artificial Intelligence, 2016.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2016}, {"title": "Multi-agent path finding with kinematic constraints", "author": ["W. H\u00f6nig", "T.K.S. Kumar", "L. Cohen", "H. Ma", "H. Xu", "N. Ayanian", "S. Koenig"], "venue": "International Conference on Automated Planning and Scheduling, 2016.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2016}, {"title": "Formation change for robot groups in occluded environments", "author": ["W. H\u00f6nig", "T.K.S. Kumar", "H. Ma", "S. Koenig", "N. Ayanian"], "venue": "IEEE/RSJ International Conference on Intelligent Robots and Systems, 2016.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2016}], "referenceMentions": [{"referenceID": 0, "context": "Solvers from the AI community for Multi-Agent PathFinding (MAPF) problems and Target-Allocation and PathFinding (TAPF) problems are able to solve instances with hundreds of agents [1].", "startOffset": 180, "endOffset": 183}, {"referenceID": 0, "context": "A more rigorous mathematical description is given in [1].", "startOffset": 53, "endOffset": 56}, {"referenceID": 1, "context": "However, in general, it is NPhard to approximate an optimal solution within any constant factor less than 4/3 [2].", "startOffset": 110, "endOffset": 113}, {"referenceID": 0, "context": "a hierarchical approach, where the lower level uses a maxflow algorithm and the higher level uses a best-first search, which tries to resolve conflicts as they occur [1].", "startOffset": 166, "endOffset": 169}, {"referenceID": 2, "context": "An LP-solver can be used to optimize for maximum throughput or minimum makespan [3].", "startOffset": 80, "endOffset": 83}, {"referenceID": 3, "context": "If the desired safety distance divides the edge length, the problem can be solved with a user-specified edgelength in strongly polynomial time by using a shortest path algorithm [4].", "startOffset": 178, "endOffset": 181}], "year": 2017, "abstractText": "Path planning for multiple robots is well studied in the AI and robotics communities. For a given discretized environment, robots need to find collision-free paths to a set of specified goal locations. Robots can be fully anonymous, non-anonymous, or organized in groups. Although powerful solvers for this abstract problem exist, they make simplifying assumptions by ignoring kinematic constraints, making it difficult to use the resulting plans on actual robots. In this paper, we present a solution which takes kinematic constraints, such as maximum velocities, into account, while guaranteeing a user-specified minimum safety distance between robots. We demonstrate our approach in simulation and on real robots in 2D and 3D environments.", "creator": "LaTeX with hyperref package"}}}