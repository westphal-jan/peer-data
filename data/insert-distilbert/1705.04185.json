{"id": "1705.04185", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-May-2017", "title": "A First Empirical Study of Emphatic Temporal Difference Learning", "abstract": "speaking in this paper ii we present the first empirical study of the emphatic temporal - difference learning algorithm ( etd ), comparing it with conventional dynamic temporal - difference learning, in particular, specifically with linear td ( 0 ), imposed on on - policy and off - party policy variations of the mountain car problem. the initial motivation for developing prototype etd was that someday it has good convergence ability properties under \\ emph { off } - policy training ( sutton, mahmood \\ & amp ; white 2016 ), but it is also adapting a new algorithm for the \\ emph { on } - policy case. in both our on - policy and in off - road policy experiments, we found that throughout each method converged to a characteristic asymptotic level of error, with etd better than td ( averaging 0 ). td ( 0 ) achieved a momentary still lower error level temporarily earlier before apparently falling back to its higher asymptote, whereas etd never showed this negative kind condition of \" bounce \". presented in the off - slope policy case ( in which td ( 0 ) is not guaranteed to converge ), etd was significantly slower.", "histories": [["v1", "Thu, 11 May 2017 13:52:52 GMT  (2609kb,D)", "https://arxiv.org/abs/1705.04185v1", "5 pages, Accepted to NIPS Continual Learning and Deep Networks workshop, 2016"], ["v2", "Fri, 12 May 2017 16:49:38 GMT  (2609kb,D)", "http://arxiv.org/abs/1705.04185v2", "5 pages, Accepted to NIPS Continual Learning and Deep Networks workshop, 2016"]], "COMMENTS": "5 pages, Accepted to NIPS Continual Learning and Deep Networks workshop, 2016", "reviews": [], "SUBJECTS": "cs.AI cs.LG", "authors": ["sina ghiassian", "banafsheh rafiee", "richard s sutton"], "accepted": false, "id": "1705.04185"}, "pdf": {"name": "1705.04185.pdf", "metadata": {"source": "CRF", "title": "A First Empirical Study of Emphatic Temporal Difference Learning", "authors": ["Sina Ghiassian", "Banafsheh Rafiee"], "emails": ["ghiassia@ualberta.ca", "rafiee@ualberta.ca", "rsutton@ualberta.ca"], "sections": [{"heading": null, "text": "In this paper we present the first empirical study of the emphatic temporaldifference learning algorithm (ETD), comparing it with conventional temporaldifference learning, in particular, with linear TD(0), on on-policy and off-policy variations of the Mountain Car problem. The initial motivation for developing ETD was that it has good convergence properties under off -policy training (Sutton, Mahmood & White 2016), but it is also a new algorithm for the on-policy case. In both our on-policy and off-policy experiments, we found that each method converged to a characteristic asymptotic level of error, with ETD better than TD(0). TD(0) achieved a still lower error level temporarily before falling back to its higher asymptote, whereas ETD never showed this kind of \u201cbounce\u201d. In the off-policy case (in which TD(0) is not guaranteed to converge), ETD was significantly slower."}, {"heading": "1 Emphatic Temporal Difference Learning", "text": "We consider the problem of learning the value function for a Markov decision process and a given policy. An agent and environment interact at discrete time steps, t = 0, 1, 2, . . ., at each of which the environment is in a state St, the agent selects an action At and as a result the environment emits a reward Rt+1 and a next state St+1. States are represented to the agent as feature vectors \u03c6t = \u03c6(St) \u2208 Rn. We seek to find a parameter vector, \u03b8t \u2208 Rn such that the inner product \u03b8>t \u03c6t approximates the expected return E [ Rt+1 + \u03b3Rt+2 + \u03b3 2Rt+3 + \u00b7 \u00b7 \u00b7 | At:\u221e \u223c \u03c0 ] , where \u03c0 : A \u00d7 S \u2192 [0, 1] is a policy for selecting the future actions. In fact, all actions are selected by an alternate policy \u00b5. If \u03c0 = \u00b5, then the training is called on-policy, whereas if the two policies are different the training is called off-policy.\nWe consider the special case of the emphatic temporal difference learning algorithm (ETD) in which bootstrapping is complete (\u03bb(s) = 0,\u2200s) and there is no discounting (\u03b3(s) = 1,\u2200s). Studying TD and ETD methods with complete bootstrapping is suitable because in this case the differences between them are maximized. As \u03bb approaches 1, the methods behave more similarly up to the point where they become equivalent when \u03bb = 1. By setting \u03bb = 0 and \u03b3 = 1, the ETD algorithm can be\n30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nar X\niv :1\n70 5.\n04 18\n5v 2\n[ cs\n.A I]\n1 2\ncompletely described by:\n\u03b8t+1 . = \u03b8t + \u03b1\u03c1tFt ( Rt+1 + \u03b8 T t \u03c6t+1 \u2212 \u03b8Tt \u03c6t ) \u03c6t,\nFt . = \u03c1t\u22121Ft\u22121 + 1, with F0 . = 1,\n\u03c1t . = \u03c0(At|St) \u00b5(At|St) ,\nwhere \u03b1 > 0 is a step size parameter. F is the followon trace according to which the update at each time step is emphasized or de-emphasized. TD is obtained by removing the F from the first equation. Because of F , ETD is different from TD even in the on-policy case in which \u03c1 is always 1. For a thorough explanation of ETD see (Sutton, Mahmood & White 2016)."}, {"heading": "2 Stability of On-policy TD with Variable \u03bb: A Counterexample", "text": "In this section we show that although the initial motivation for developing ETD was that it has good convergence properties under off-policy training (Yu 2015), it is also a different algorithm under on-policy training. To emphasize the difference between the two, we present a simple example for which TD(\u03bb) is not convergent under on-policy training but ETD is.\nIt has long been known that TD(\u03bb) converges with any constant value of \u03bb under on-policy training (Tsitsiklis & Van Roy 1997). Surprisingly, TD(\u03bb) is not assured to converge with varying \u03bb even under on-policy training. Yu has recently presented a counterexample (personal communication) with state dependent \u03bb for which on-policy TD(\u03bb) is not convergent. The example is a simple Markov decision process consisting of two states in which the system simply moves from one state to another in a cycle. The process starts in each of the states with equal probability. Let \u03bb(S1) = 0 and \u03bb(S2) = 1, \u03c6(S1) = (3, 1) and \u03c6(S2) = (1, 1) and \u03b3 = 0.95. As shown below, the TD(\u03bb) key matrix for this problem is not positive definite. Moreover, both eigenvalues of the key matrix have negative real parts and thus TD(\u03bb) diverges in this case.\nS1 S2 Key matrix = ( \u22120.4862 0.1713 \u22120.7787 0.0738 )\nThis is while ETD is convergent under both off-policy and on-policy training with variable \u03bb. This example appears in more detail in the supplementary material."}, {"heading": "3 Fixed-policy Mountain Car Testbed", "text": "For our experimental study, we used a new variation of the mountain car control problem (Sutton & Barto 1998) to form a prediction problem. The original mountain car problem has a 2-dimensional space, position (between -1.2 and 0.6), and velocity (between -0.07 and 0.07) with three actions, full throttle forward, full throttle backward, and 0 throttle. Each episode starts around the bottom of a hill (a uniform random number between -0.4 and -0.6). The reward is -1 on all time steps until the car pasts its goal at the top of the hill, which ends the episode. The task is undiscounted. Our variation of the mountain car problem has a fixed target policy which is to always push towards the direction of the velocity and not to push in any direction when the velocity is 0. We call the new variation of the mountain car problem, the fixed-policy mountain car testbed.\nThe performance measure we used is an estimation of the mean squared value error (MSVE) which reflects the mean squared difference between the true value function and the estimated value function, weighted according to how often each state is visited in the state space following the behavior policy:\nM\u0302SV E(\u03b8) = 1 |S| \u2211 s\u2208S [v\u0302(s,\u03b8)\u2212 v\u03c0(s)]2\nS included 500 sample states gathered by following the behaviour policy for 10,000,000 steps and randomly choosing 500 states from the last 5,000,000. We did not use the first 5,000,000 because\nthe state distribution may change as more steps are taken and the stationary distribution is achieved in the limit. The agent started from each state s \u2208 S and followed the target policy to termination 1,000 times, each time the return was computed and recorded. All 1,000 returns were averaged and the result was used as the true value of the state value function, v\u03c0(s). The learning algorithm\u2019s estimation of the value function for state s is shown by v\u0302(s,\u03b8) = \u03b8>\u03c6(s)."}, {"heading": "4 On-Policy Experiments", "text": "We applied on-policy TD and on-policy ETD methods to the fixed-policy mountain car testbed. We created many instances of each method by changing the step size parameter. To approximate a value function for this problem, we used tile coding (Sutton 1996) with 5 tilings, 4\u00d74 tiles each. Each algorithm instance was initialized with a 0 weight vector, and then run for 500,000 episodes. The whole process was repeated for 50 runs.\nTo produce learning curves for each instance of the two methods we computed the error measure at the end of each episode and averaged over runs. See Figure 1a. We also performed a parameter study of the asymptotic performance for both methods. To do so, we averaged the error of the last 1% of the episodes for each run, and then computed the average and standard error over all 50 runs. See Figure 1b.\nTo compare the performance of on-policy TD and on-policy ETD, we first need to understand how their errors changed as the number of episodes increased. ETD\u2019s error was a decreasing function of the number of episodes for sufficiently small values of \u03b1. However, TD showed a bounce, reaching a low error temporarily before falling back to its higher asymptotic error. The depth and the asymptotic level of the bounce did not depend on \u03b1, but its duration did. The smaller the \u03b1, the later the bounce and as a result, it took more than 500,000 episodes for TD to converge for smaller values of \u03b1. See Figure 1a.\nETD outperformed TD in terms of asymptotic performance. TD instances with smaller values of the step size (\u03b1 < 10\u22124) did not converge within 500,000 episodes. See Figure 1b. To confirm that TD has not converged for smaller values of \u03b1, we repeated the TD experiments for 1,000,000 episodes and computed the error measure. The error measure changed only for the instances that did not converged within 500,000 episodes. The light and the dark blue curves in Figure 1b show the performance of different instances of the TD method after 500,000 and 1,000,000 episodes respectively. It is obvious that TD instances with \u03b1 < 10\u22124 did not converge while the instances with larger values of the step size did."}, {"heading": "5 Off-Policy Experiments", "text": "We also applied off-policy TD and off-policy ETD to the fixed-policy mountain car testbed. In this case, the target policy was the same as the policy in the on-policy case and the behavior policy was to choose a random action 10% of the time and act according to the target policy 90% of the time. Again different instances of each method was created with different step size parameters. Each instance of the method was run for 500,000 episodes and the whole process was repeated for 50 runs. The learning curves for the off-policy case are presented in Figure 2a. The parameter study results are in Figure 2b.\nAnalogous to the on-policy case, each method had its advantages and disadvantages. ETD achieved a better asymptotic performance whenever it converged. This is while TD, compared to ETD, could take advantage of using larger values of step size and thus converged significantly faster (Figure 2a). ETD\u2019s step size values had to be set small (in the order of 10\u22127) to control the method\u2019s high variance (Figure 2b). TD had a larger step size range with which it converged; however, ETD converged only for a short range of step size (Figure 2b). Similar to the on-policy study, TD showed a bounce for every value of step size while ETD did not (Figure 2a)."}, {"heading": "6 Conclusion", "text": "We performed the first systematic empirical study of the emphatic temporal difference learning method and showed that it can be used in a problem with a relatively large state space with promising results. Although ETD is originally proposed as an off-policy method, it can also be used as a reliable on-policy algorithm. According to our results, ETD seems to be slow in the off-policy case; however, it achieves a better asymptotic performance in both on-policy and off-policy cases. In spite of the fact that our experiments are limited to a variation of the mountain car problem, we believe that our observations can lead to a better understanding of both TD and ETD methods. Yu\u2019s counter example along with our experimental results motivate further study of ETD as an on-policy or off-policy method."}, {"heading": "Acknowledgments", "text": "The authors thank Huizhen Yu for insights and specifically for providing the counterexample. We gratefully acknowledge funding from Alberta Innovates Technology Futures and from the Natural Sciences and Engineering Research Council of Canada."}, {"heading": "7 Supplementary Material", "text": ""}, {"heading": "7.1 Stability of On-policy TD with Variable \u03bb: A Counterexample", "text": "Suppose the policy induces an irreducible Markov chain with transition matrix P\u03c0 and a unique invariant probability distribution \u00b5 (i.e., \u00b5>P\u03c0 = \u00b5>). Let D = diag(\u00b5) and let \u03a6 be a feature matrix with linearly independent columns. The key matrix associated with the TD(\u03bb) algorithm is A = \u03a6>D(I \u2212 P\u03bb\u03c0 )\u03a6, where P\u03bb\u03c0 is a substochastic matrix determined by P\u03c0, \u03bb and the discount factor \u03b3. For a constant \u03bb \u2208 [0, 1], the matrix A is positive definite (see e.g., Tsitsiklis and Van Roy 1997), ensuring the stability of the algorithm. This positive definiteness property relies critically on the fact that \u00b5>P\u03bb\u03c0 < \u00b5\n>, which does not hold in general when \u03bb is a function of states. Thus, with state-dependent \u03bb, the positive definiteness of the matrix A and the stability of the TD(\u03bb) algorithm are no longer guaranteed.\nIn our example \u03bb(S1) = 0, \u03bb(S2) = 1, \u00b5> = (0.5, 0.5) and P\u03bb\u03c0 = ( \u03b32 0 \u03b3 0 ) . For \u03b3 near 1, e.g.,\n\u03b3 = 0.95, and for \u03a6 as given below, we can calculate the matrix A associated with TD(\u03bb):\n\u03a6 = ( 3 1 1 1 ) , A = \u03a6>D(I \u2212 P\u03bb\u03c0 )\u03a6 = ( \u22120.4862 0.1713 \u22120.7787 0.0738 ) .\nThe matrix A is not positive definite. Moreover, both eigenvalues of A have negative real parts, and hence \u2212A is not a Hurwitz matrix and TD(\u03bb) diverges in general in this case."}], "references": [{"title": "Learning to Predict by the Methods of Temporal Differences", "author": ["R.S. Sutton"], "venue": "Machine learning 3(1):9-44.", "citeRegEx": "Sutton,? 1988", "shortCiteRegEx": "Sutton", "year": 1988}, {"title": "Generalization in Reinforcement Learning: Successful Examples Using Sparse Coarse Coding", "author": ["Sutton", "R .S."], "venue": "Advances in Neural Information Processing Systems:1038-1044.", "citeRegEx": "Sutton and .S.,? 1996", "shortCiteRegEx": "Sutton and .S.", "year": 1996}, {"title": "Reinforcement Learning: An Introduction", "author": ["R.S. Sutton", "A.G. Barto"], "venue": "MIT Press.", "citeRegEx": "Sutton and Barto,? 1998", "shortCiteRegEx": "Sutton and Barto", "year": 1998}, {"title": "An Emphatic Approach to the Problem of Off-policy Temporal-difference Learning", "author": ["R.S. Sutton", "A.R. Mahmood", "M. White"], "venue": "The Journal of Machine Learning Research.", "citeRegEx": "Sutton et al\\.,? 2015", "shortCiteRegEx": "Sutton et al\\.", "year": 2015}, {"title": "An Analysis of Temporal-difference Learning with Function Approximation", "author": ["Tsitsiklis", "J .N.", "B. Van Roy"], "venue": "IEEE Transactions on Automatic Control 42(5):674-690.", "citeRegEx": "Tsitsiklis et al\\.,? 1997", "shortCiteRegEx": "Tsitsiklis et al\\.", "year": 1997}, {"title": "On convergence of emphatic temporal-difference learning", "author": ["H. Yu"], "venue": "Proceedings of the Conference on Computational Learning Theory.", "citeRegEx": "Yu,? 2015", "shortCiteRegEx": "Yu", "year": 2015}], "referenceMentions": [{"referenceID": 5, "context": "In this section we show that although the initial motivation for developing ETD was that it has good convergence properties under off-policy training (Yu 2015), it is also a different algorithm under on-policy training.", "startOffset": 150, "endOffset": 159}], "year": 2017, "abstractText": "In this paper we present the first empirical study of the emphatic temporaldifference learning algorithm (ETD), comparing it with conventional temporaldifference learning, in particular, with linear TD(0), on on-policy and off-policy variations of the Mountain Car problem. The initial motivation for developing ETD was that it has good convergence properties under off -policy training (Sutton, Mahmood & White 2016), but it is also a new algorithm for the on-policy case. In both our on-policy and off-policy experiments, we found that each method converged to a characteristic asymptotic level of error, with ETD better than TD(0). TD(0) achieved a still lower error level temporarily before falling back to its higher asymptote, whereas ETD never showed this kind of \u201cbounce\u201d. In the off-policy case (in which TD(0) is not guaranteed to converge), ETD was significantly slower. 1 Emphatic Temporal Difference Learning We consider the problem of learning the value function for a Markov decision process and a given policy. An agent and environment interact at discrete time steps, t = 0, 1, 2, . . ., at each of which the environment is in a state St, the agent selects an action At and as a result the environment emits a reward Rt+1 and a next state St+1. States are represented to the agent as feature vectors \u03c6t = \u03c6(St) \u2208 R. We seek to find a parameter vector, \u03b8t \u2208 R such that the inner product \u03b8> t \u03c6t approximates the expected return E [ Rt+1 + \u03b3Rt+2 + \u03b3 Rt+3 + \u00b7 \u00b7 \u00b7 | At:\u221e \u223c \u03c0 ] , where \u03c0 : A \u00d7 S \u2192 [0, 1] is a policy for selecting the future actions. In fact, all actions are selected by an alternate policy \u03bc. If \u03c0 = \u03bc, then the training is called on-policy, whereas if the two policies are different the training is called off-policy. We consider the special case of the emphatic temporal difference learning algorithm (ETD) in which bootstrapping is complete (\u03bb(s) = 0,\u2200s) and there is no discounting (\u03b3(s) = 1,\u2200s). Studying TD and ETD methods with complete bootstrapping is suitable because in this case the differences between them are maximized. As \u03bb approaches 1, the methods behave more similarly up to the point where they become equivalent when \u03bb = 1. By setting \u03bb = 0 and \u03b3 = 1, the ETD algorithm can be 30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain. ar X iv :1 70 5. 04 18 5v 2 [ cs .A I] 1 2 M ay 2 01 7 completely described by: \u03b8t+1 . = \u03b8t + \u03b1\u03c1tFt ( Rt+1 + \u03b8 T t \u03c6t+1 \u2212 \u03b8 t \u03c6t ) \u03c6t, Ft . = \u03c1t\u22121Ft\u22121 + 1, with F0 . = 1, \u03c1t . = \u03c0(At|St) \u03bc(At|St) , where \u03b1 > 0 is a step size parameter. F is the followon trace according to which the update at each time step is emphasized or de-emphasized. TD is obtained by removing the F from the first equation. Because of F , ETD is different from TD even in the on-policy case in which \u03c1 is always 1. For a thorough explanation of ETD see (Sutton, Mahmood & White 2016). 2 Stability of On-policy TD with Variable \u03bb: A Counterexample In this section we show that although the initial motivation for developing ETD was that it has good convergence properties under off-policy training (Yu 2015), it is also a different algorithm under on-policy training. To emphasize the difference between the two, we present a simple example for which TD(\u03bb) is not convergent under on-policy training but ETD is. It has long been known that TD(\u03bb) converges with any constant value of \u03bb under on-policy training (Tsitsiklis & Van Roy 1997). Surprisingly, TD(\u03bb) is not assured to converge with varying \u03bb even under on-policy training. Yu has recently presented a counterexample (personal communication) with state dependent \u03bb for which on-policy TD(\u03bb) is not convergent. The example is a simple Markov decision process consisting of two states in which the system simply moves from one state to another in a cycle. The process starts in each of the states with equal probability. Let \u03bb(S1) = 0 and \u03bb(S2) = 1, \u03c6(S1) = (3, 1) and \u03c6(S2) = (1, 1) and \u03b3 = 0.95. As shown below, the TD(\u03bb) key matrix for this problem is not positive definite. Moreover, both eigenvalues of the key matrix have negative real parts and thus TD(\u03bb) diverges in this case. S1 S2 Key matrix = ( \u22120.4862 0.1713 \u22120.7787 0.0738 ) This is while ETD is convergent under both off-policy and on-policy training with variable \u03bb. This example appears in more detail in the supplementary material. 3 Fixed-policy Mountain Car Testbed For our experimental study, we used a new variation of the mountain car control problem (Sutton & Barto 1998) to form a prediction problem. The original mountain car problem has a 2-dimensional space, position (between -1.2 and 0.6), and velocity (between -0.07 and 0.07) with three actions, full throttle forward, full throttle backward, and 0 throttle. Each episode starts around the bottom of a hill (a uniform random number between -0.4 and -0.6). The reward is -1 on all time steps until the car pasts its goal at the top of the hill, which ends the episode. The task is undiscounted. Our variation of the mountain car problem has a fixed target policy which is to always push towards the direction of the velocity and not to push in any direction when the velocity is 0. We call the new variation of the mountain car problem, the fixed-policy mountain car testbed. The performance measure we used is an estimation of the mean squared value error (MSVE) which reflects the mean squared difference between the true value function and the estimated value function, weighted according to how often each state is visited in the state space following the behavior policy:", "creator": "LaTeX with hyperref package"}}}