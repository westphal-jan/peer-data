{"id": "1705.04304", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-May-2017", "title": "A Deep Reinforced Model for Abstractive Summarization", "abstract": "attentional, rnn - based encoder - decoder synthetic models for abstractive summarization have achieved good performance on short input and output sequences. however, for longer documents and summaries, instead these models often include repetitive and incoherent phrases. therefore we introduce a neural network model with intra - attention and a new training method. this method combines standard software supervised word prediction and reinforcement learning ( rl ). models trained only with the former often exhibit \" exposure bias \" - - they assume ground truth is provided at each step during training. however, when standard word prediction is combined with the global sequence prediction training of rl the resulting summaries become immensely more readable. we evaluate this model on the cnn / daily mail and new york times datasets. our model obtains a 41. 16 rouge - 1 grade score received on the 1993 cnn / daily mail dataset, a 5. 7 absolute 60 points improvement over previous state - of - the - art models. it also performs well as the first continuous abstractive model on the new york times corpus. human evaluation also shows that our model produces higher quality summaries.", "histories": [["v1", "Thu, 11 May 2017 17:39:35 GMT  (30kb)", "http://arxiv.org/abs/1705.04304v1", null], ["v2", "Fri, 19 May 2017 04:11:32 GMT  (156kb,D)", "http://arxiv.org/abs/1705.04304v2", null]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["romain paulus", "caiming xiong", "richard socher"], "accepted": false, "id": "1705.04304"}, "pdf": {"name": "1705.04304.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["rpaulus@salesforce.com", "cxiong@salesforce.com", "rsocher@salesforce.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 5.\n04 30\n4v 1\n[ cs\n.C L\n] 1\n1 M\nay 2\n01 7\nAttentional, RNN-based encoder-decoder models for abstractive summarization have achieved good performance on short input and output sequences. However, for longer documents and summaries, these models often include repetitive and incoherent phrases. We introduce a neural network model with intra-attention and a new training method. This method combines standard supervised word prediction and reinforcement learning (RL). Models trained only with the former often exhibit \u201cexposure bias\u201d \u2013 they assume ground truth is provided at each step during training. However, when standard word prediction is combined with the global sequence prediction training of RL the resulting summaries become more readable. We evaluate this model on the CNN/Daily Mail and New York Times datasets. Our model obtains a 41.16 ROUGE-1 score on the CNN/Daily Mail dataset, a 5.7 absolute points improvement over previous state-of-the-art models. It also performs well as the first abstractive model on the New York Times corpus. Human evaluation also shows that our model produces higher quality summaries."}, {"heading": "1 Introduction", "text": "Text summarization is the process of automatically generating natural language summaries from an input document while retaining the important points.\nBy condensing large quantities of information into short, informative summaries, summarization can aid many downstream applications such as\ncreating news digests, search, and report generation.\nThere are two prominent types of summarization algorithms. First, extractive summarization systems form summaries by copying parts of the input (Neto et al., 2002; Dorr et al., 2003). Second, abstractive summarization systems generate new phrases, possibly rephrasing or using words that were not in the original text (Chopra et al., 2016; Nallapati et al., 2016; Zeng et al., 2016).\nRecently, neural network models (Nallapati et al., 2016; Zeng et al., 2016), based on the attentional encoder-decoder model for machine translation (Bahdanau et al., 2014), were able to generate abstractive summaries with high ROUGE scores. However, these systems have typically focused on summarizing short input sequences (one or two sentences) to generate even shorter summaries. For example, the summaries on the DUC-2004 dataset generated by the state-of-the-art system by Zeng et al. (2016) are limited to 75 characters.\nNallapati et al. (2016) also applied their abstractive summarization model on the CNN/Daily Mail dataset (Hermann et al., 2015), which contains input sequences of up to 800 tokens and multi-sentence summaries of up to 100 tokens. The analysis by Nallapati et al. (2016) illustrate a key problem with attentional encoder-decoder models: they often generate unnatural summaries consisting of repeated phrases.\nWe present a new abstractive summarization model that achieves state-of-the-art results on the CNN/Daily Mail and similarly good results on the New York Times dataset (NYT) (Sandhaus, 2008). To our knowledge, this is the first model for abstractive summarization on the NYT dataset. We introduce a key attention mechanism and a new learning objective to address the repeating phrase problem: (i) we use an intra-temporal attention in\nthe encoder that records previous attention weights for each of the input tokens while a sequential intra-attention model in the decoder takes into account which words have already been generated by the decoder. (ii) we propose a new objective function by combining the maximum-likelihood cross-entropy loss used in prior work with rewards from policy gradient reinforcement learning to reduce exposure bias. We show that our model achieves 41.16 ROUGE-1 on the CNN/Daily Mail dataset, an absolute improvement of 5.70 to the previous state-of-the-art result. Moreover, we show, through human evaluation of generated outputs, that our model generates more readable summaries compared to other techniques."}, {"heading": "2 Neural Intra-attention Model", "text": "In this section, we present our intra-attention model based on the encoder-decoder network (Sutskever et al., 2014). In all our equations, x = {x1, x2, . . . , xn} represents the sequence of input (article) tokens, y = {y1, y2, . . . , yn\u2032} the sequence of output (summary) tokens, and \u2016 denotes the vector concatenation operator.\nOur model reads the input sequence with a bi-directional LSTM encoder {RNNe fwd,RNNe bwd} computing hidden states hei = [h e fwd i \u2016h e bwd i ] from the embedding vectors of xi. We use a single LSTM decoder RNNd, computing hidden states hdt from the embedding vectors of yt. Both input and output embeddings are taken from the same matrix Wemb. We initialize the decoder hidden state with hd0 = h e n."}, {"heading": "2.1 Intra-temporal attention on input sequence", "text": "At each decoding step t, we use an intra-temporal attention function to attend over specific parts of the encoded input sequence in addition to the decoder\u2019s own hidden state and the previouslygenerated word (Sankaran et al., 2016). This kind of attention prevents the model from attending over the sames parts of the input on different decoding steps. Nallapati et al. (2016) have shown that such an intra-temporal attention can reduce the amount of repetitions when attending over long documents.\nWe define eti as the attention score of the hidden\ninput state hei at decoding time step t:\neti = f(h d t , h e i ), (1)\nwhere f can be any function returning a scalar eti from the hdt and h e i vectors. While some attention models use functions as simple as the dot-product between the two vectors, we choose to use a bilinear function:\nf(hdt , h e i ) = h d t T W eattnh e i . (2)\nWe normalize the attention weights with the following temporal attention function, penalizing input tokens that have obtained high attention scores in past decoding steps. We define new temporal scores e\u2032ti:\ne\u2032ti =\n\n\n exp(eti) if t = 1 exp(eti)\u2211t\u22121\nj=1 exp(eji)\notherwise. (3)\nFinally, we compute the normalized attention scores \u03b1eti across the inputs and use these weights to obtain the input context vector cet :\n\u03b1eti = e\u2032ti\n\u2211n j=1 e \u2032 tj\n(4)\ncet =\nn \u2211\ni=1\n\u03b1etih e i . (5)"}, {"heading": "2.2 Intra-decoder attention", "text": "While this intra-temporal attention function ensures that different parts of the encoded input sequence are used, our decoder can still generate repeated phrases based on its own hidden states, especially when generating long sequences. To prevent that, we want to incorporate more information about the previously decoded sequence into the decoder. Looking back at previous decoding steps will allow our model to make more structured predictions and avoid repeating the same information, even if that information was generated many steps away. To achieve this, we introduce an intra-decoder attention mechanism. This mechanism is not present in current encoder-decoder models.\nFor each decoding step t, our model computes a new decoder context vector cdt . We set c d 1 to a vector of zeros since the generated sequence is empty on the first decoding step. For t > 1, we use the following equations:\nedtt\u2032 = h d t T W dattnh d t\u2032 (6)\n\u03b1dtt\u2032 = exp(edtt\u2032)\n\u2211t\u22121 j=1 exp(e d tj)\n(7)\ncdt =\nt\u22121 \u2211\nj=1\n\u03b1dtjh d j (8)\nA closely-related intra-RNN attention function has been introduced by Cheng et al. (2016) but their implementation works by modifying the underlying LSTM function, and they do not apply it to long sequence generation problems. This is a major difference with our method, which makes no assumptions about the type of decoder RNN, thus is more simple and widely applicable to other types of recurrent networks."}, {"heading": "2.3 Token generation and pointer", "text": "To generate a token, our decoder uses either a token-generation softmax layer or a pointer mechanism to copy rare or unseen from the input sequence. We use a switch function that decides at each decoding step whether to use the token generation or the pointer (Gulcehre et al., 2016; Nallapati et al., 2016). We define ut as a binary value, equal to 1 if the pointer mechanism is used to output yt, and 0 otherwise. In the following equations, all probabilities are conditioned on yt, . . . , yt\u22121, x, even when not explicitly stated.\nOur token-generation layer generates the fol-\nlowing probability distribution:\np(yt|ut = 0) =\nsoftmax(Wout[h d t \u2016c e t\u2016c d t ] + bout)\n(9)\nOn the other hand, the pointer mechanism uses the temporal attention weights \u03b1eti as the probability distribution to copy the input token xi.\np(yt = xi|ut = 1) = \u03b1 e ti (10)\nWe also compute the probability of using the\ncopy mechanism for the decoding step t:\np(ut = 1) = \u03c3(Wu[h d t \u2016c e t\u2016c d t ] + bu), (11)\nwhere \u03c3 is the sigmoid activation function.\nPutting Equations 9 , 10 and 11 together, we obtain our final probability distribution for the output token yt:\np(yt) = p(ut = 1)p(yt|ut = 1)\n+p(ut = 0)p(yt|ut = 0). (12)\nThe ground-truth value for ut and the corresponding i index of the target input token when\nut = 1 are provided at every decoding step during training. We set ut = 1 either when yt is an out-of-vocabulary token or when it is a pre-defined named entity (see Section 5)."}, {"heading": "2.4 Sharing decoder weights", "text": "In addition to using the same embedding matrix Wemb for the encoder and the decoder sequences, we introduce some weight-sharing between this embedding matrix and the Wout matrix of the token-generation layer:\nWout = tanh(WembWproj) (13)\nThe goal of this weight-sharing is to use the syntactic and semantic information contained in the embedding matrix to improve the tokengeneration function. Similar weight-sharing methods have been applied to language modeling (Inan et al., 2016; Press and Wolf, 2016). We believe this method is even more applicable to sequence-to-sequence tasks like summarization where the input and output sequences are tightly related, sharing the same vocabulary and a similar syntax. In practice, we found that a summarization model using such shared weights converges much faster than when using separate Wout and Wemb matrices."}, {"heading": "2.5 Repetition avoidance at test time", "text": "Another way to avoid repetitions comes from our observation that in both the CNN/Daily Mail and NYT datasets, ground-truth summaries almost never contain the same trigram twice. Based on this observation, we force our decoder to never output the same trigram more than once during testing. We do this by setting p(yt) = 0 during beam search, when outputting yt would create a trigram that already exists in the previously decoded sequence of the current beam. Even though this method makes assumptions about the output format and the dataset at hand, we believe that the majority of abstractive summarization tasks would benefit from this hard constraint. We apply this method to all our models in the experiments section."}, {"heading": "3 Hybrid Learning Objective", "text": "In this section, we explore different ways of training our encoder-decoder model. In particular, we propose reinforcement learning-based algorithms and their application to our summarization task."}, {"heading": "3.1 Supervised learning with teacher forcing", "text": "The most widely used method to train a decoder RNN for sequence generation, called the teacher forcing\u201d algorithm (Williams and Zipser, 1989), minimizes a maximum-likelihood loss at each decoding step. We define y\u2217 = {y\u22171 , y \u2217 2, . . . , y \u2217\nn\u2032} as the ground-truth output sequence for a given input sequence x. The maximum-likelihood training objective is the minimization of the following loss:\nLml = \u2212\nn\u2032 \u2211\nt=1\nlog p(y\u2217t |y \u2217 1, . . . , y \u2217 t\u22121, x) (14)\nHowever, minimizing Lml does not always produce the best results on discrete evaluation metrics such as ROUGE (Lin, 2004). This phenomenon has been observed with similar sequence generation tasks like image captioning with CIDEr (Rennie et al., 2016) and machine translation with BLEU (Wu et al., 2016; Norouzi et al., 2016).\nThere are twomain reasons for this discrepancy. The first one, called exposure bias (Ranzato et al., 2015), comes from the fact that the network is fully supervised at each output token during training, always knowing the ground truth sequence up to the next token to predict, but does not have such supervision when testing, hence accumulating errors as it predicts the sequence. The second reason is more specific to our summarization task: while we only have one ground truth sequence per example during training, a summary can still be considered valid by a human even if it is not equal to the reference summary word for word. The number of potentially valid summaries increases as sequences get longer, since there are more ways to arrange tokens to produce paraphrases or different sentence orders. The ROUGE metrics take some of this flexibility into account, but the maximumlikelihood objective does not."}, {"heading": "3.2 Policy learning", "text": "One way to remedy this is to learn a policy that maximizes a specific discrete metric instead of minimizing the maximum-likelihood loss, which is made possible with reinforcement learning. In our model, we use the self-critical policy gradient training algorithm (Rennie et al., 2016).\nFor this training algorithm, we produce two separate output sequences at each training iteration: ys, which is obtained by sampling from\nthe p(yst |y s 1, . . . , y s t\u22121, x) probability distribution at each decoding time step, and y\u0302, the baseline output, obtained by maximizing the output probability distribution at each time step, essentially performing a greedy search. We define r(y) as the reward function for an output sequence y, comparing it with the ground truth sequence y\u2217 with the evaluation metric of our choice.\nLrl = (r(y\u0302)\u2212r(y s))\nn\u2032 \u2211\nt=1\nlog p(yst |y s 1, . . . , y s t\u22121, x)\n(15)\nWe can see that minimizing Lrl is equivalent to maximizing the conditional likelihood of the sampled sequence ys if it obtains a higher reward than the baseline y\u0302, thus increasing the reward expectation of our model."}, {"heading": "3.3 Mixed training objective function", "text": "One potential issue of this reinforcement training objective is that optimizing for a specific discrete metric like ROUGE does not guarantee an increase in quality and readability of the output. It is possible to game such discrete metrics and increase their score without an actual increase in readability or relevance (Liu et al., 2016). While ROUGE measures the n-gram overlap between our generated summary and a reference sequence, humanreadability is better captured by a language model, which is usually measured by perplexity.\nSince our maximum-likelihood training objective (Equation 14) is essentially a conditional language model, calculating the probability of a token yt based on the previously predicted sequence {y1, . . . , yt\u22121} and the input sequence x, we hypothesize that it can assist our policy learning algorithm to generate more natural summaries. This motivates us to define a mixed learning objective function that combines equations 14 and 15:\nLmixed = \u03b3Lrl + (1\u2212 \u03b3)Lml, (16)\nwhere \u03b3 is a scaling factor accounting for the difference in magnitude between Lrl and Lml. A similar mixed-objective learning function has been used by Wu et al. (2016) for machine translation on short sequences, but this is its first use in combination with self-critical policy learning for long summarization to explicitly improve readability in addition to evaluation metrics."}, {"heading": "4 Related Work", "text": ""}, {"heading": "4.1 Neural encoder-decoder sequence models", "text": "Neural encoder-decoder models are widely used in NLP applications such as machine translation (Sutskever et al., 2014), summarization (Chopra et al., 2016; Nallapati et al., 2016), and question answering (Hermann et al., 2015). These models use recurrent neural networks (RNN), such as long-short term memory network (LSTM) (Hochreiter and Schmidhuber, 1997) to encode an input sentence into a fixed vector, and create a new output sequence from that vector using another RNN. To apply this sequence-to-sequence approach to natural language, word embeddings (Mikolov et al., 2013; Pennington et al., 2014) are used to convert language tokens to vectors that can be used as inputs for these networks. Attention mechanisms (Bahdanau et al., 2014) make these models more performant and scalable, allowing them to look back at parts of the encoded input sequence while the output is generated. These models often use a fixed input and output vocabulary, which prevents them from learning representations for new words. One way to fix this is to allow the decoder network to point back to some specific words or subsequences of the input and copy them onto the output sequence (Vinyals et al., 2015; Ling et al., 2016). Gulcehre et al. (2016) and Merity et al. (2016) combine this pointer mechanism with the original word generation layer in the decoder to allow the model to use either method at each decoding step."}, {"heading": "4.2 Reinforcement learning for sequence generation", "text": "Reinforcement learning (RL) is a way of training an agent to interact with a given environment in order to maximize a reward. RL has been used to solve a wide variety of problems, usually when an agent has to perform discrete actions before obtaining a reward, or when the metric to optimize is not differentiable and traditional supervised learning methods cannot be used. This is applicable to sequence generation tasks, because many of the metrics used to evaluate these tasks (like BLEU, ROUGE or METEOR) are not differentiable.\nIn order to optimize that metric directly, Ranzato et al. (2015) have applied the REINFORCE algorithm (Williams, 1992) to train various RNN-based models for sequence generation\ntasks, leading to significant improvements compared to previous supervised learning methods. While their method requires an additional neural network, called a critic model, to predict the expected reward and stabilize the objective function gradients, Rennie et al. (2016) designed a selfcritical sequence training method that does not require this critic model and lead to further improvements on image captioning tasks."}, {"heading": "4.3 Text summarization", "text": "Most summarization models studied in the past are extractive in nature (Neto et al., 2002; Dorr et al., 2003; Filippova and Altun, 2013; Colmenares et al., 2015), which usually work by identifying the most important phrases of an input document and re-arranging them into a new summary sequence. The more recent abstractive summarization models have more degrees of freedom and can create more novel sequences. Many abstractive models such as Rush et al. (2015), Chopra et al. (2016), Zeng et al. (2016) and Nallapati et al. (2016) are all based on the neural encoder-decoder architecture (Section 4.1).\nA well-studied set of summarization tasks is the Document Understanding Conference (DUC) 1. These summarization tasks are varied, including short summaries of a single document and long summaries of multiple documents categorized by subject. Most abstractive summarization models have been evaluated on the DUC-2004 dataset, and outperform extractive models on that task (Dorr et al., 2003). However, models trained on the DUC-2004 task can only generate very short summaries up to 75 characters, and are usually used with one or two input sentences. Only Nallapati et al. (2016) have tried to apply abstractive summarization techniques to longer input and outputs with the CNN/Daily Mail dataset."}, {"heading": "5 Datasets", "text": ""}, {"heading": "5.1 CNN/Daily Mail", "text": "We evaluate our model on a modified version of the CNN/Daily Mail dataset (Hermann et al., 2015), following the same pre-processing steps described in Nallapati et al. (2016). We refer the reader to that paper for a detailed description. The final dataset contains 286,817 training examples, 13,368 validation examples and 11,487 testing examples. After limiting the input length to 800 to-\n1 http://duc.nist.gov/\nkens and output length to 100 tokens, the average input and output lengths are respectively 632 and 53 tokens."}, {"heading": "5.2 New York Times", "text": "The New York Times (NYT) dataset (Sandhaus, 2008) is a large collection of articles published between 1996 and 2007. Even though this dataset has been used to train extractive summarization systems (Hong and Nenkova, 2014; Li et al., 2016) or closely-related models for predicting the importance of a phrase in an article (Yang and Nenkova, 2014; Nye and Nenkova, 2015; Hong et al., 2015), we are the first group to run an end-to-end abstractive summarization model on the article-abstract pairs of this dataset. While CNN/Daily Mail summaries have a similar wording to their corresponding articles, NYT abstracts are more varied, are shorter and can use a higher level of abstraction and paraphrase. We believe that these two formats are a great complement to each other for abstractive summarization models.\nPreprocessing: We remove all documents that do not have a full article text, abstract or headline. We concatenate the headline, byline and full article text, separated by special tokens, to produce a single input sequence for each example. We tokenize the input and abstract pairs with the Stanford tokenizer (Manning et al., 2014). We convert all tokens to lower-case and replace all numbers with \u201c0\u201d, remove \u201c(s)\u201d and \u201c(m)\u201d marks in the abstracts and all occurrences of the following words, singular or plural, if they are surrounded by semicolons or at the end of the abstract: \u201cphoto\u201d, \u201cgraph\u201d, \u201cchart\u201d, \u201cmap\u201d, \u201ctable\u201d and \u201cdrawing\u201d. Since the NYT abstracts almost never contain periods, we consider themmulti-sentence summaries if we split sentences based on semicolons. This allows us to make the summary format and evaluation procedure similar to the CNN/Daily Mail dataset. These pre-processing steps give us an average of 549 input tokens and 40 output tokens per example, after limiting the input and output lengths to 800 and 100 tokens.\nPointer supervision: We run each input and abstract sequence through the Stanford named entity recognizer (NER) (Manning et al., 2014). For all named entity tokens in the abstract if the type \u201cPERSON\u201d, \u201cLOCATION\u201d, \u201cORGANIZATION\u201d or \u201cMISC\u201d, we find their first occurrence in the in-\nput sequence. We use this information to supervise p(ut) (Equation 11) and \u03b1 e ti (Equation 4) during training. Note that the NER tagger is only used to create the dataset and is no longer needed during testing, thus we\u2019re not adding any dependencies to our model. We also add pointer supervision for out-of-vocabulary output tokens if they are present in the input. Dataset splits: We created our own training,validation, and testing splits for this dataset. Instead of producing random splits, we sorted the documents by their publication date in chronological order and used the first 90% (589,284 examples) for training, the next 5% (32,736) for validation, and the remaining 5% (32,739) for testing. This makes our dataset splits easily reproducible and follows the intuition that if used in a production environment, such a summarization model would be used on recent articles rather than random ones."}, {"heading": "6 Results", "text": ""}, {"heading": "6.1 Experiments", "text": "Setup: We evaluate the intra-decoder attention mechanism and the mixed-objective learning by running the following experiments on both datasets. We first run maximum-likelihood (ML) training with and without intra-decoder attention (removing cdt from Equations 9 and 11 to disable intra-attention) and select the best performing architecture. Next, we initialize our model with the best ML parameters and we compare reinforcement learning (RL) with our mixed-objective learning (ML+RL), following our objective functions in Equation 15 and 16. For ML training, we use the teacher forcing algorithm with the only difference that at each decoding step, we choose with a 25% probability the previously generated token instead of the ground-truth token as the decoder input token yt\u22121, which reduces exposure bias (Venkatraman et al., 2015). We use a \u03b3 = 0.9984 for the ML+RL loss function. Implementation details: We use two 200- dimensional LSTMs for the bidirectional encoder and one 400-dimensional LSTM for the decoder. We limit the input vocabulary size to 150,000 tokens, and the output vocabulary to 50,000 tokens by selecting the most frequent tokens in the training set. Input word embeddings are 100-dimensional and are initialized with GloVe (Pennington et al., 2014). We train all our models\nwith Adam (Kingma and Ba, 2014) with a batch size of 50 and a learning rate \u03b1 of 0.001 for ML training and 0.0001 for RL and ML+RL training. At test time, we use beam search of width 5 on all our models to generate our final predictions.\nROUGE metrics and options: We report the fulllength F-1 score of the ROUGE-1, ROUGE-2 and ROUGE-L metrics with the Porter stemmer option. For RL and ML+RL training, we use the ROUGE-L score as a reinforcement reward. We also tried ROUGE-2 but we found that it created summaries that almost always reached the maximum length, often ending sentences abruptly."}, {"heading": "6.2 Quantitative analysis", "text": "Our results for the CNN/Daily Mail dataset are shown in Table 1, and for the NYT dataset in Table 2. We observe that the intra-decoder attention function helps our model achieve better ROUGE scores on the CNN/Daily Mail but not on the NYT dataset. We believe that the difference in summary lengths between the CNN/Daily Mail and NYT datasets is one of the main reason for this difference in outcome, given that our intra-decoder was designed to improve performance over long output sequences. Further differences in the nature of the summaries and the level of complexity and abstraction between these datasets could also explain these intra-attention results, as well as the absolute ROUGE score differences between CNN/Daily Mail and NYT results.\nIn addition, we can see that on all datasets, both the RL and ML+RL models obtain much higher scores than the ML model. In particular, these methods clearly surpass the state-of-the-art model from Nallapati et al. (2016) on the CNN/Daily Mail dataset."}, {"heading": "6.3 Qualitative analysis", "text": "We perform human evaluation to ensure that our increase in ROUGE scores is also followed by an increase in human readability and quality. In\nparticular, we want to know whether the ML+RL training objective did improve readability compared to RL.\nEvaluation setup: To perform this evaluation, we randomly select 100 test examples from the CNN/Daily Mail dataset. For each example, we show the ground truth summary as well as summaries generated by different models side by side to a human evaluator. The human evaluator does not know which summaries come from which model or which one is the ground truth. A score from 1 to 10 is then assigned to each summary, 1 corresponding to the lower level of readability and 10 the highest.\nResults: Our human evaluation results are shown in Table 4. We can see that even though RL has the highest ROUGE-1 and ROUGE-L scores, it produces the least readable summaries among our experiments. The most common readability issue observed in our RL results, as shown in the example of Table 3, is the presence of short and truncated sentences towards the end of sequences. This confirms that optimizing for single discrete evaluation metric such as ROUGE with RL can be detrimental to the model quality.\nOn the other hand, our RL+ML summaries obtain the highest readability scores among our models, hence solving the readability issues of the RL model while also having a higher ROUGE score than ML. This demonstrates the usefulness and value of our RL+ML training method for abstractive summarization."}, {"heading": "7 Conclusion", "text": "We presented a new model and training procedure that obtains state-of-the-art results in text summarization for the CNN/Daily Mail, improves the readability of the generated summaries and is better suited to long output sequences. We also run our abstractive model on the NYT dataset for the first time. We saw that despite their common use for evaluation, ROUGE scores have their shortcomings and should not be the only metric to optimize on summarization model for long sequences. We believe that our intra-attention decoder and combined training objective could be applied to other sequence-to-sequence tasks with long inputs and outputs, which is an interesting direction for further research."}], "references": [{"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "KyunghyunCho", "Yoshua Bengio."], "venue": "arXiv preprint arXiv:1409.0473 .", "citeRegEx": "Bahdanau et al\\.,? 2014", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2014}, {"title": "Long short-term memory-networks for machine reading", "author": ["Jianpeng Cheng", "Li Dong", "Mirella Lapata."], "venue": "arXiv preprint arXiv:1601.06733 .", "citeRegEx": "Cheng et al\\.,? 2016", "shortCiteRegEx": "Cheng et al\\.", "year": 2016}, {"title": "Abstractive sentence summarization with attentive recurrent neural networks", "author": ["Sumit Chopra", "Michael Auli", "Alexander M Rush", "SEAS Harvard."], "venue": "Proceedings of NAACL-HLT16 pages 93\u201398.", "citeRegEx": "Chopra et al\\.,? 2016", "shortCiteRegEx": "Chopra et al\\.", "year": 2016}, {"title": "Heads: Headline generation as sequence prediction using an abstract feature-rich space", "author": ["Carlos A Colmenares", "Marina Litvak", "Amin Mantrach", "Fabrizio Silvestri."], "venue": "HLT-NAACL. pages 133\u2013142.", "citeRegEx": "Colmenares et al\\.,? 2015", "shortCiteRegEx": "Colmenares et al\\.", "year": 2015}, {"title": "Hedge trimmer: A parse-and-trim approach to headline generation", "author": ["Bonnie Dorr", "David Zajic", "Richard Schwartz."], "venue": "Proceedings of the HLT-NAACL 03 on Text summarization workshop-Volume 5. Association for Computational Linguistics, pages 1\u20138.", "citeRegEx": "Dorr et al\\.,? 2003", "shortCiteRegEx": "Dorr et al\\.", "year": 2003}, {"title": "Overcoming the lack of parallel data in sentence compression", "author": ["Katja Filippova", "Yasemin Altun."], "venue": "EMNLP. Citeseer, pages 1481\u20131491.", "citeRegEx": "Filippova and Altun.,? 2013", "shortCiteRegEx": "Filippova and Altun.", "year": 2013}, {"title": "Pointing the unknown words", "author": ["Caglar Gulcehre", "Sungjin Ahn", "Ramesh Nallapati", "Bowen Zhou", "Yoshua Bengio."], "venue": "arXiv preprint arXiv:1603.08148 .", "citeRegEx": "Gulcehre et al\\.,? 2016", "shortCiteRegEx": "Gulcehre et al\\.", "year": 2016}, {"title": "Teaching machines to read and comprehend", "author": ["Karl Moritz Hermann", "Tomas Kocisky", "Edward Grefenstette", "Lasse Espeholt", "Will Kay", "Mustafa Suleyman", "Phil Blunsom."], "venue": "Advances in Neural Information Processing Systems. pages 1693\u2013", "citeRegEx": "Hermann et al\\.,? 2015", "shortCiteRegEx": "Hermann et al\\.", "year": 2015}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber."], "venue": "Neural computation 9(8):1735\u20131780.", "citeRegEx": "Hochreiter and Schmidhuber.,? 1997", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "System combination for multi-document summarization", "author": ["Kai Hong", "Mitchell Marcus", "Ani Nenkova."], "venue": "EMNLP. pages 107\u2013117.", "citeRegEx": "Hong et al\\.,? 2015", "shortCiteRegEx": "Hong et al\\.", "year": 2015}, {"title": "Improving the estimation of word importance for news multidocument summarization-extended technical report", "author": ["Kai Hong", "Ani Nenkova"], "venue": null, "citeRegEx": "Hong and Nenkova.,? \\Q2014\\E", "shortCiteRegEx": "Hong and Nenkova.", "year": 2014}, {"title": "Tying word vectors and word classifiers: A loss framework for language modeling", "author": ["Hakan Inan", "Khashayar Khosravi", "Richard Socher."], "venue": "arXiv preprint arXiv:1611.01462 .", "citeRegEx": "Inan et al\\.,? 2016", "shortCiteRegEx": "Inan et al\\.", "year": 2016}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba."], "venue": "arXiv preprint arXiv:1412.6980 .", "citeRegEx": "Kingma and Ba.,? 2014", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "The role of discourse units in near-extractive summarization", "author": ["Junyi Jessy Li", "Kapil Thadani", "Amanda Stent."], "venue": "17th Annual Meeting of the Special Interest Group on Discourse andDialogue. page 137.", "citeRegEx": "Li et al\\.,? 2016", "shortCiteRegEx": "Li et al\\.", "year": 2016}, {"title": "Rouge: A package for automatic evaluation of summaries", "author": ["Chin-Yew Lin."], "venue": "Text summarization branches out: Proceedings of the ACL-04 workshop. Barcelona, Spain, volume 8.", "citeRegEx": "Lin.,? 2004", "shortCiteRegEx": "Lin.", "year": 2004}, {"title": "Latent predictor networks for code generation", "author": ["Wang Ling", "Edward Grefenstette", "Karl Moritz Hermann", "Tom\u00e1\u0161 Ko\u010disk\u1ef3", "Andrew Senior", "Fumin Wang", "Phil Blunsom."], "venue": "arXiv preprint arXiv:1603.06744 .", "citeRegEx": "Ling et al\\.,? 2016", "shortCiteRegEx": "Ling et al\\.", "year": 2016}, {"title": "How not to evaluate your dialogue system: An empirical study of unsupervised evaluation metrics for dialogue response generation", "author": ["Chia-Wei Liu", "Ryan Lowe", "Iulian V Serban", "Michael Noseworthy", "Laurent Charlin", "Joelle Pineau."], "venue": "arXiv preprint", "citeRegEx": "Liu et al\\.,? 2016", "shortCiteRegEx": "Liu et al\\.", "year": 2016}, {"title": "The stanford corenlp natural language processing toolkit", "author": ["Christopher D Manning", "Mihai Surdeanu", "John Bauer", "Jenny Rose Finkel", "Steven Bethard", "David McClosky."], "venue": "ACL (System Demonstrations). pages 55\u201360.", "citeRegEx": "Manning et al\\.,? 2014", "shortCiteRegEx": "Manning et al\\.", "year": 2014}, {"title": "Pointer sentinel mixture models", "author": ["Stephen Merity", "Caiming Xiong", "James Bradbury", "Richard Socher."], "venue": "arXiv preprint arXiv:1609.07843 .", "citeRegEx": "Merity et al\\.,? 2016", "shortCiteRegEx": "Merity et al\\.", "year": 2016}, {"title": "Distributed representations of words and phrases and their compositionality", "author": ["Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean."], "venue": "Advances in neural information processing systems. pages 3111\u20133119.", "citeRegEx": "Mikolov et al\\.,? 2013", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "Abstractive text summarization using sequence-to-sequence rnns and beyond", "author": ["Ramesh Nallapati", "Bowen Zhou", "\u00c7a\u011flar G\u00fcl\u00e7ehre", "Bing Xiang"], "venue": null, "citeRegEx": "Nallapati et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Nallapati et al\\.", "year": 2016}, {"title": "Automatic text summarization using a machine learning approach", "author": ["Joel Larocca Neto", "Alex A Freitas", "Celso AA Kaestner."], "venue": "Brazilian Symposium on Artificial Intelligence. Springer, pages 205\u2013215.", "citeRegEx": "Neto et al\\.,? 2002", "shortCiteRegEx": "Neto et al\\.", "year": 2002}, {"title": "Reward augmented maximum likelihood for neural structured prediction", "author": ["Mohammad Norouzi", "Samy Bengio", "Navdeep Jaitly", "Mike Schuster", "Yonghui Wu", "Dale Schuurmans"], "venue": null, "citeRegEx": "Norouzi et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Norouzi et al\\.", "year": 2016}, {"title": "Identification and characterization of newsworthy verbs in world news", "author": ["Benjamin Nye", "Ani Nenkova."], "venue": "HLT-NAACL. pages 1440\u20131445.", "citeRegEx": "Nye and Nenkova.,? 2015", "shortCiteRegEx": "Nye and Nenkova.", "year": 2015}, {"title": "Glove: Global vectors for word representation", "author": ["Jeffrey Pennington", "Richard Socher", "Christopher D Manning."], "venue": "EMNLP. volume 14, pages 1532\u2013 1543.", "citeRegEx": "Pennington et al\\.,? 2014", "shortCiteRegEx": "Pennington et al\\.", "year": 2014}, {"title": "Using the output embedding to improve language models", "author": ["Ofir Press", "Lior Wolf."], "venue": "arXiv preprint arXiv:1608.05859 .", "citeRegEx": "Press and Wolf.,? 2016", "shortCiteRegEx": "Press and Wolf.", "year": 2016}, {"title": "Sequence level training with recurrent neural networks", "author": ["Marc\u2019Aurelio Ranzato", "Sumit Chopra", "Michael Auli", "Wojciech Zaremba"], "venue": null, "citeRegEx": "Ranzato et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ranzato et al\\.", "year": 2015}, {"title": "Self-critical sequence training for image captioning", "author": ["Steven J Rennie", "Etienne Marcheret", "Youssef Mroueh", "Jarret Ross", "Vaibhava Goel."], "venue": "arXiv preprint arXiv:1612.00563 .", "citeRegEx": "Rennie et al\\.,? 2016", "shortCiteRegEx": "Rennie et al\\.", "year": 2016}, {"title": "A neural attention model for abstractive sentence summarization", "author": ["Alexander M Rush", "Sumit Chopra", "Jason Weston."], "venue": "arXiv preprint arXiv:1509.00685 .", "citeRegEx": "Rush et al\\.,? 2015", "shortCiteRegEx": "Rush et al\\.", "year": 2015}, {"title": "The new york times annotated corpus", "author": ["Evan Sandhaus."], "venue": "Linguistic Data Consortium, Philadelphia 6(12):e26752.", "citeRegEx": "Sandhaus.,? 2008", "shortCiteRegEx": "Sandhaus.", "year": 2008}, {"title": "Temporal attention model for neural machine translation", "author": ["Baskaran Sankaran", "Haitao Mi", "Yaser Al-Onaizan", "Abe Ittycheriah."], "venue": "arXiv preprint arXiv:1608.02927 .", "citeRegEx": "Sankaran et al\\.,? 2016", "shortCiteRegEx": "Sankaran et al\\.", "year": 2016}, {"title": "Sequence to sequence learning with neural networks", "author": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V Le."], "venue": "Advances in neural information processing systems. pages 3104\u20133112.", "citeRegEx": "Sutskever et al\\.,? 2014", "shortCiteRegEx": "Sutskever et al\\.", "year": 2014}, {"title": "Improving multi-step prediction of learned time series models", "author": ["Arun Venkatraman", "Martial Hebert", "J Andrew Bagnell."], "venue": "AAAI. pages 3024\u2013 3030.", "citeRegEx": "Venkatraman et al\\.,? 2015", "shortCiteRegEx": "Venkatraman et al\\.", "year": 2015}, {"title": "Pointer networks", "author": ["Oriol Vinyals", "Meire Fortunato", "Navdeep Jaitly."], "venue": "Advances in Neural Information Processing Systems. pages 2692\u20132700.", "citeRegEx": "Vinyals et al\\.,? 2015", "shortCiteRegEx": "Vinyals et al\\.", "year": 2015}, {"title": "Simple statistical gradientfollowing algorithms for connectionist reinforcement learning", "author": ["Ronald J Williams."], "venue": "Machine learning 8(3-4):229\u2013256.", "citeRegEx": "Williams.,? 1992", "shortCiteRegEx": "Williams.", "year": 1992}, {"title": "A learning algorithm for continually running fully recurrent neural networks", "author": ["Ronald J Williams", "David Zipser."], "venue": "Neural computation 1(2):270\u2013280.", "citeRegEx": "Williams and Zipser.,? 1989", "shortCiteRegEx": "Williams and Zipser.", "year": 1989}, {"title": "Detecting information-dense texts in multiple news domains", "author": ["Yinfei Yang", "Ani Nenkova."], "venue": "AAAI. pages 1650\u20131656.", "citeRegEx": "Yang and Nenkova.,? 2014", "shortCiteRegEx": "Yang and Nenkova.", "year": 2014}, {"title": "Efficient summarization with read-again and copy mechanism", "author": ["Wenyuan Zeng", "Wenjie Luo", "Sanja Fidler", "Raquel Urtasun."], "venue": "arXiv preprint arXiv:1611.03382 .", "citeRegEx": "Zeng et al\\.,? 2016", "shortCiteRegEx": "Zeng et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 21, "context": "First, extractive summarization systems form summaries by copying parts of the input (Neto et al., 2002; Dorr et al., 2003).", "startOffset": 85, "endOffset": 123}, {"referenceID": 4, "context": "First, extractive summarization systems form summaries by copying parts of the input (Neto et al., 2002; Dorr et al., 2003).", "startOffset": 85, "endOffset": 123}, {"referenceID": 2, "context": "Second, abstractive summarization systems generate new phrases, possibly rephrasing or using words that were not in the original text (Chopra et al., 2016; Nallapati et al., 2016; Zeng et al., 2016).", "startOffset": 134, "endOffset": 198}, {"referenceID": 20, "context": "Second, abstractive summarization systems generate new phrases, possibly rephrasing or using words that were not in the original text (Chopra et al., 2016; Nallapati et al., 2016; Zeng et al., 2016).", "startOffset": 134, "endOffset": 198}, {"referenceID": 37, "context": "Second, abstractive summarization systems generate new phrases, possibly rephrasing or using words that were not in the original text (Chopra et al., 2016; Nallapati et al., 2016; Zeng et al., 2016).", "startOffset": 134, "endOffset": 198}, {"referenceID": 20, "context": "Recently, neural network models (Nallapati et al., 2016; Zeng et al., 2016), based on the attentional encoder-decoder model for machine translation (Bahdanau et al.", "startOffset": 32, "endOffset": 75}, {"referenceID": 37, "context": "Recently, neural network models (Nallapati et al., 2016; Zeng et al., 2016), based on the attentional encoder-decoder model for machine translation (Bahdanau et al.", "startOffset": 32, "endOffset": 75}, {"referenceID": 0, "context": ", 2016), based on the attentional encoder-decoder model for machine translation (Bahdanau et al., 2014), were able to generate abstractive summaries with high ROUGE scores.", "startOffset": 80, "endOffset": 103}, {"referenceID": 0, "context": ", 2016), based on the attentional encoder-decoder model for machine translation (Bahdanau et al., 2014), were able to generate abstractive summaries with high ROUGE scores. However, these systems have typically focused on summarizing short input sequences (one or two sentences) to generate even shorter summaries. For example, the summaries on the DUC-2004 dataset generated by the state-of-the-art system by Zeng et al. (2016) are limited to 75 characters.", "startOffset": 81, "endOffset": 429}, {"referenceID": 7, "context": "(2016) also applied their abstractive summarization model on the CNN/Daily Mail dataset (Hermann et al., 2015), which contains input sequences of up to 800 tokens and multi-sentence summaries of up to 100 tokens.", "startOffset": 88, "endOffset": 110}, {"referenceID": 7, "context": "(2016) also applied their abstractive summarization model on the CNN/Daily Mail dataset (Hermann et al., 2015), which contains input sequences of up to 800 tokens and multi-sentence summaries of up to 100 tokens. The analysis by Nallapati et al. (2016) illustrate", "startOffset": 89, "endOffset": 253}, {"referenceID": 29, "context": "We present a new abstractive summarization model that achieves state-of-the-art results on the CNN/Daily Mail and similarly good results on the New York Times dataset (NYT) (Sandhaus, 2008).", "startOffset": 173, "endOffset": 189}, {"referenceID": 31, "context": "In this section, we present our intra-attention model based on the encoder-decoder network (Sutskever et al., 2014).", "startOffset": 91, "endOffset": 115}, {"referenceID": 30, "context": "At each decoding step t, we use an intra-temporal attention function to attend over specific parts of the encoded input sequence in addition to the decoder\u2019s own hidden state and the previouslygenerated word (Sankaran et al., 2016).", "startOffset": 208, "endOffset": 231}, {"referenceID": 20, "context": "Nallapati et al. (2016) have shown that such an intra-temporal attention can reduce the amount of repetitions when attending over long documents.", "startOffset": 0, "endOffset": 24}, {"referenceID": 1, "context": "A closely-related intra-RNN attention function has been introduced by Cheng et al. (2016) but their implementation works by modifying the underlying LSTM function, and they do not apply it to long sequence generation problems.", "startOffset": 70, "endOffset": 90}, {"referenceID": 6, "context": "We use a switch function that decides at each decoding step whether to use the token generation or the pointer (Gulcehre et al., 2016; Nallapati et al., 2016).", "startOffset": 111, "endOffset": 158}, {"referenceID": 20, "context": "We use a switch function that decides at each decoding step whether to use the token generation or the pointer (Gulcehre et al., 2016; Nallapati et al., 2016).", "startOffset": 111, "endOffset": 158}, {"referenceID": 11, "context": "Similar weight-sharing methods have been applied to language modeling (Inan et al., 2016; Press and Wolf, 2016).", "startOffset": 70, "endOffset": 111}, {"referenceID": 25, "context": "Similar weight-sharing methods have been applied to language modeling (Inan et al., 2016; Press and Wolf, 2016).", "startOffset": 70, "endOffset": 111}, {"referenceID": 35, "context": "The most widely used method to train a decoder RNN for sequence generation, called the teacher forcing\u201d algorithm (Williams and Zipser, 1989), minimizes a maximum-likelihood loss at each decoding step.", "startOffset": 114, "endOffset": 141}, {"referenceID": 14, "context": "However, minimizing Lml does not always produce the best results on discrete evaluation metrics such as ROUGE (Lin, 2004).", "startOffset": 110, "endOffset": 121}, {"referenceID": 27, "context": "This phenomenon has been observed with similar sequence generation tasks like image captioning with CIDEr (Rennie et al., 2016) and machine translation with BLEU (Wu et al.", "startOffset": 106, "endOffset": 127}, {"referenceID": 22, "context": ", 2016) and machine translation with BLEU (Wu et al., 2016; Norouzi et al., 2016).", "startOffset": 42, "endOffset": 81}, {"referenceID": 26, "context": "The first one, called exposure bias (Ranzato et al., 2015), comes from the fact that the network is fully supervised at each output token during training, always knowing the ground truth sequence up to the next token to predict, but does not have such supervision when testing, hence accumulating errors as it predicts the sequence.", "startOffset": 36, "endOffset": 58}, {"referenceID": 27, "context": "In our model, we use the self-critical policy gradient training algorithm (Rennie et al., 2016).", "startOffset": 74, "endOffset": 95}, {"referenceID": 16, "context": "It is possible to game such discrete metrics and increase their score without an actual increase in readability or relevance (Liu et al., 2016).", "startOffset": 125, "endOffset": 143}, {"referenceID": 31, "context": "Neural encoder-decoder models are widely used in NLP applications such as machine translation (Sutskever et al., 2014), summarization (Chopra et al.", "startOffset": 94, "endOffset": 118}, {"referenceID": 2, "context": ", 2014), summarization (Chopra et al., 2016; Nallapati et al., 2016), and question answering (Hermann et al.", "startOffset": 23, "endOffset": 68}, {"referenceID": 20, "context": ", 2014), summarization (Chopra et al., 2016; Nallapati et al., 2016), and question answering (Hermann et al.", "startOffset": 23, "endOffset": 68}, {"referenceID": 7, "context": ", 2016), and question answering (Hermann et al., 2015).", "startOffset": 32, "endOffset": 54}, {"referenceID": 8, "context": "These models use recurrent neural networks (RNN), such as long-short term memory network (LSTM) (Hochreiter and Schmidhuber, 1997) to encode an input sentence into a fixed vector, and create a new output sequence from that vector using another RNN.", "startOffset": 96, "endOffset": 130}, {"referenceID": 19, "context": "To apply this sequence-to-sequence approach to natural language, word embeddings (Mikolov et al., 2013; Pennington et al., 2014) are used to convert language tokens to vectors that can be used as inputs for these networks.", "startOffset": 81, "endOffset": 128}, {"referenceID": 24, "context": "To apply this sequence-to-sequence approach to natural language, word embeddings (Mikolov et al., 2013; Pennington et al., 2014) are used to convert language tokens to vectors that can be used as inputs for these networks.", "startOffset": 81, "endOffset": 128}, {"referenceID": 0, "context": "Attention mechanisms (Bahdanau et al., 2014) make these models more performant and scalable, allowing them to look back at parts of the encoded input sequence while the output is generated.", "startOffset": 21, "endOffset": 44}, {"referenceID": 33, "context": "One way to fix this is to allow the decoder network to point back to some specific words or subsequences of the input and copy them onto the output sequence (Vinyals et al., 2015; Ling et al., 2016).", "startOffset": 157, "endOffset": 198}, {"referenceID": 15, "context": "One way to fix this is to allow the decoder network to point back to some specific words or subsequences of the input and copy them onto the output sequence (Vinyals et al., 2015; Ling et al., 2016).", "startOffset": 157, "endOffset": 198}, {"referenceID": 0, "context": "Attention mechanisms (Bahdanau et al., 2014) make these models more performant and scalable, allowing them to look back at parts of the encoded input sequence while the output is generated. These models often use a fixed input and output vocabulary, which prevents them from learning representations for new words. One way to fix this is to allow the decoder network to point back to some specific words or subsequences of the input and copy them onto the output sequence (Vinyals et al., 2015; Ling et al., 2016). Gulcehre et al. (2016) and Merity et al.", "startOffset": 22, "endOffset": 538}, {"referenceID": 0, "context": "Attention mechanisms (Bahdanau et al., 2014) make these models more performant and scalable, allowing them to look back at parts of the encoded input sequence while the output is generated. These models often use a fixed input and output vocabulary, which prevents them from learning representations for new words. One way to fix this is to allow the decoder network to point back to some specific words or subsequences of the input and copy them onto the output sequence (Vinyals et al., 2015; Ling et al., 2016). Gulcehre et al. (2016) and Merity et al. (2016) combine this pointer mechanism with the original word generation layer in the decoder to allow the model to use either method at each decoding step.", "startOffset": 22, "endOffset": 563}, {"referenceID": 34, "context": "(2015) have applied the REINFORCE algorithm (Williams, 1992) to train various RNN-based models for sequence generation tasks, leading to significant improvements compared to previous supervised learning methods.", "startOffset": 44, "endOffset": 60}, {"referenceID": 26, "context": "In order to optimize that metric directly, Ranzato et al. (2015) have applied the REINFORCE algorithm (Williams, 1992) to train various RNN-based models for sequence generation tasks, leading to significant improvements compared to previous supervised learning methods.", "startOffset": 43, "endOffset": 65}, {"referenceID": 26, "context": "In order to optimize that metric directly, Ranzato et al. (2015) have applied the REINFORCE algorithm (Williams, 1992) to train various RNN-based models for sequence generation tasks, leading to significant improvements compared to previous supervised learning methods. While their method requires an additional neural network, called a critic model, to predict the expected reward and stabilize the objective function gradients, Rennie et al. (2016) designed a selfcritical sequence training method that does not require this critic model and lead to further improvements on image captioning tasks.", "startOffset": 43, "endOffset": 451}, {"referenceID": 21, "context": "Most summarization models studied in the past are extractive in nature (Neto et al., 2002; Dorr et al., 2003; Filippova and Altun, 2013; Colmenares et al., 2015), which usually work by identifying the most important phrases of an input document and re-arranging them into a new summary sequence.", "startOffset": 71, "endOffset": 161}, {"referenceID": 4, "context": "Most summarization models studied in the past are extractive in nature (Neto et al., 2002; Dorr et al., 2003; Filippova and Altun, 2013; Colmenares et al., 2015), which usually work by identifying the most important phrases of an input document and re-arranging them into a new summary sequence.", "startOffset": 71, "endOffset": 161}, {"referenceID": 5, "context": "Most summarization models studied in the past are extractive in nature (Neto et al., 2002; Dorr et al., 2003; Filippova and Altun, 2013; Colmenares et al., 2015), which usually work by identifying the most important phrases of an input document and re-arranging them into a new summary sequence.", "startOffset": 71, "endOffset": 161}, {"referenceID": 3, "context": "Most summarization models studied in the past are extractive in nature (Neto et al., 2002; Dorr et al., 2003; Filippova and Altun, 2013; Colmenares et al., 2015), which usually work by identifying the most important phrases of an input document and re-arranging them into a new summary sequence.", "startOffset": 71, "endOffset": 161}, {"referenceID": 4, "context": "Most abstractive summarization models have been evaluated on the DUC-2004 dataset, and outperform extractive models on that task (Dorr et al., 2003).", "startOffset": 129, "endOffset": 148}, {"referenceID": 2, "context": ", 2003; Filippova and Altun, 2013; Colmenares et al., 2015), which usually work by identifying the most important phrases of an input document and re-arranging them into a new summary sequence. The more recent abstractive summarization models have more degrees of freedom and can create more novel sequences. Many abstractive models such as Rush et al. (2015), Chopra et al.", "startOffset": 35, "endOffset": 360}, {"referenceID": 2, "context": "(2015), Chopra et al. (2016), Zeng et al.", "startOffset": 8, "endOffset": 29}, {"referenceID": 2, "context": "(2015), Chopra et al. (2016), Zeng et al. (2016) and Nallapati et al.", "startOffset": 8, "endOffset": 49}, {"referenceID": 2, "context": "(2015), Chopra et al. (2016), Zeng et al. (2016) and Nallapati et al. (2016) are all based on the neural encoder-decoder architecture (Section 4.", "startOffset": 8, "endOffset": 77}, {"referenceID": 20, "context": "Only Nallapati et al. (2016) have tried to apply abstractive summarization techniques to longer input and outputs with the CNN/Daily Mail dataset.", "startOffset": 5, "endOffset": 29}, {"referenceID": 7, "context": "We evaluate our model on a modified version of the CNN/Daily Mail dataset (Hermann et al., 2015), following the same pre-processing steps described in Nallapati et al.", "startOffset": 74, "endOffset": 96}, {"referenceID": 7, "context": "We evaluate our model on a modified version of the CNN/Daily Mail dataset (Hermann et al., 2015), following the same pre-processing steps described in Nallapati et al. (2016). We refer the reader to that paper for a detailed description.", "startOffset": 75, "endOffset": 175}, {"referenceID": 29, "context": "The New York Times (NYT) dataset (Sandhaus, 2008) is a large collection of articles published between 1996 and 2007.", "startOffset": 33, "endOffset": 49}, {"referenceID": 10, "context": "Even though this dataset has been used to train extractive summarization systems (Hong and Nenkova, 2014; Li et al., 2016) or closely-related models for predicting the importance of a phrase in an article (Yang and Nenkova, 2014; Nye and Nenkova, 2015; Hong et al.", "startOffset": 81, "endOffset": 122}, {"referenceID": 13, "context": "Even though this dataset has been used to train extractive summarization systems (Hong and Nenkova, 2014; Li et al., 2016) or closely-related models for predicting the importance of a phrase in an article (Yang and Nenkova, 2014; Nye and Nenkova, 2015; Hong et al.", "startOffset": 81, "endOffset": 122}, {"referenceID": 36, "context": ", 2016) or closely-related models for predicting the importance of a phrase in an article (Yang and Nenkova, 2014; Nye and Nenkova, 2015; Hong et al., 2015), we are the first group to run an end-to-end abstractive summarization model on the article-abstract pairs of this dataset.", "startOffset": 90, "endOffset": 156}, {"referenceID": 23, "context": ", 2016) or closely-related models for predicting the importance of a phrase in an article (Yang and Nenkova, 2014; Nye and Nenkova, 2015; Hong et al., 2015), we are the first group to run an end-to-end abstractive summarization model on the article-abstract pairs of this dataset.", "startOffset": 90, "endOffset": 156}, {"referenceID": 9, "context": ", 2016) or closely-related models for predicting the importance of a phrase in an article (Yang and Nenkova, 2014; Nye and Nenkova, 2015; Hong et al., 2015), we are the first group to run an end-to-end abstractive summarization model on the article-abstract pairs of this dataset.", "startOffset": 90, "endOffset": 156}, {"referenceID": 17, "context": "We tokenize the input and abstract pairs with the Stanford tokenizer (Manning et al., 2014).", "startOffset": 69, "endOffset": 91}, {"referenceID": 17, "context": "Pointer supervision: We run each input and abstract sequence through the Stanford named entity recognizer (NER) (Manning et al., 2014).", "startOffset": 112, "endOffset": 134}, {"referenceID": 32, "context": "instead of the ground-truth token as the decoder input token yt\u22121, which reduces exposure bias (Venkatraman et al., 2015).", "startOffset": 95, "endOffset": 121}, {"referenceID": 24, "context": "Input word embeddings are 100-dimensional and are initialized with GloVe (Pennington et al., 2014).", "startOffset": 73, "endOffset": 98}, {"referenceID": 20, "context": "words-lvt2k-temp-att (Nallapati et al., 2016) 35.", "startOffset": 21, "endOffset": 45}, {"referenceID": 12, "context": "with Adam (Kingma and Ba, 2014) with a batch size of 50 and a learning rate \u03b1 of 0.", "startOffset": 10, "endOffset": 31}, {"referenceID": 20, "context": "In particular, these methods clearly surpass the state-of-the-art model from Nallapati et al. (2016) on the CNN/Daily Mail dataset.", "startOffset": 77, "endOffset": 101}], "year": 2017, "abstractText": "Attentional, RNN-based encoder-decoder models for abstractive summarization have achieved good performance on short input and output sequences. However, for longer documents and summaries, these models often include repetitive and incoherent phrases. We introduce a neural network model with intra-attention and a new training method. This method combines standard supervised word prediction and reinforcement learning (RL). Models trained only with the former often exhibit \u201cexposure bias\u201d \u2013 they assume ground truth is provided at each step during training. However, when standard word prediction is combined with the global sequence prediction training of RL the resulting summaries become more readable. We evaluate this model on the CNN/Daily Mail and New York Times datasets. Our model obtains a 41.16 ROUGE-1 score on the CNN/Daily Mail dataset, a 5.7 absolute points improvement over previous state-of-the-art models. It also performs well as the first abstractive model on the New York Times corpus. Human evaluation also shows that our model produces higher quality summaries.", "creator": "LaTeX with hyperref package"}}}