{"id": "1706.00468", "review": {"conference": "acl", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Jun-2017", "title": "Function Assistant: A Tool for NL Querying of APIs", "abstract": "in this paper, we describe function assistant, a lightweight collaborative python - based toolkit for smoothly querying and exploring source code repositories using natural language. the toolkit is designed to help end - users of a target api quickly find information about functions through high - level natural language queries and descriptions. for a given text data query and background scan api, the tool finds candidate functions by performing a translation from the text to known representations in the api using the semantic parsing approach characteristic of richardson richardson and kuhn ( in 2017 ). translations are automatically learned from translating example text - code pairs in example apis. the toolkit includes features capable for building translation pipelines and query engines for arbitrary source code projects. to explore this last feature, we perform new experiments on 27 well - known python specific projects hosted on github.", "histories": [["v1", "Thu, 1 Jun 2017 19:26:32 GMT  (1049kb,D)", "http://arxiv.org/abs/1706.00468v1", "In submission for EMNLP-2017 (demo track)"], ["v2", "Fri, 15 Sep 2017 11:57:36 GMT  (867kb,D)", "http://arxiv.org/abs/1706.00468v2", "in Proceedings of EMNLP-2017 (system demonstrations)"]], "COMMENTS": "In submission for EMNLP-2017 (demo track)", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["kyle richardson", "jonas kuhn"], "accepted": true, "id": "1706.00468"}, "pdf": {"name": "1706.00468.pdf", "metadata": {"source": "CRF", "title": "Function Assistant: A Tool for NL Querying of APIs", "authors": ["Kyle Richardson", "Jonas Kuhn"], "emails": ["kyle@ims.uni-stuttgart.de"], "sections": [{"heading": null, "text": "In this paper, we describe Function Assistant, a lightweight Python-based toolkit for querying and exploring source code repositories using natural language. The toolkit is designed to help end-users of a target API quickly find information about functions through high-level natural language queries and descriptions. For a given text query and background API, the tool finds candidate functions by performing a translation from the text to known representations in the API using the semantic parsing approach of Richardson and Kuhn (2017). Translations are automatically learned from example textcode pairs in example APIs. The toolkit includes features for building translation pipelines and query engines for arbitrary source code projects. To explore this last feature, we perform new experiments on 27 well-known Python projects hosted on Github1."}, {"heading": "1 Introduction", "text": "Software developers frequently shift between using different third-party software libraries, or APIs, when developing new applications. Much of the development time is dedicated to understanding the structure of these APIs, figuring out where the target functionality lies, and learning about the peculiarities of how such software is structured or how naming conventions work. When the target API is large, finding the desired functionality can be a formidable and time consuming task. Often developers resort to resources like Google or\n1Our toolkit, along with all data, will be released as a GPL-licensed, public Github project upon publication.\nStackOverflow to find (usually indirect) answers to questions.\nWe illustrate these issues in Figure 1 using two example functions from the well-known NLTK toolkit. Each function is paired with a short docstring, i.e., the quoted description under each function, which provides a user of the software a description of what the function does. While understanding the documentation and code requires technical knowledge of dependency parsing and graphs, even with such knowledge, the function naming conventions are rather arbitrary. The function add arc could just as well be called create arc. A end-user expecting another naming convention might be left astray when searching for this functionality. Similarly, the available description might deviate from how an end-user would describe such functionality.\nUnderstanding the remove by address function, in contrast, requires knowing the details of the particular DependencyGraph implementation being used. Nonetheless, the function corresponds to the standard operation of removing a node from a dependency graph. Here, the technical details of how this removal is specific\nar X\niv :1\n70 6.\n00 46\n8v 1\n[ cs\n.C L\n] 1\nJ un\n2 01\n7\nto a given address might obfuscate the overall purpose of the function, making it hard to find or understand.\nAt a first approximation, navigating a given API requires knowing correspondences between textual descriptions and source code representations. For example, knowing that the English expression Adds an arc in Figure 1 translates (somewhat arbitrarily) to add arc, or that given address translates to address. One must also know how to detect paraphrases of certain target entities or actions, for example that adding an arc means the same as creating an arc in this context. Other technical correspondences, such as the relation between an address and the target dependency graph implementation, must be learned.\nIn our previous work (Richardson and Kuhn (2017), henceforth RK), we look at learning these types of correspondences from example API collections in a variety of programming languages and source natural languages. We treat each given API, consisting of text and function representation pairs, as a parallel corpus for training a simple semantic parsing model. In addition to learning translational correspondences, of the type described above, we achieve improvements by adding document-level features that help to learn other technical correspondences.\nIn this paper, we focus on using our models as a tool for querying API collections. Given a target API, our model learns an MT-based semantic parser that translates text to code representations in the API. End-users can formulate natural language queries to the background API, which our model will translate into candidate function representations with the goal of finding the desired functionality. Our tool, called Function Assistant can be used in two ways: as a blackbox pipeline for building models directly from arbitrary API collections. As well, it can be customized and integrated with other outside components using the tool\u2019s internal Python API.\nIn this paper, we focus on the first usage of our tool. To explore building models for new API collections, we run our pipeline on 27 open source Python projects from the well-known Awesome Python project list.2 As in previous work, we perform synthetic experiments on these datasets, which measure how well our models can generate function representations for unseen API descrip-\n2github.com/vinta/awesome-python\ntions, which mimic user queries."}, {"heading": "2 Related Work", "text": "Natural language querying of APIs has long been a goal in software engineering, related to the general problem of software reuse (Krueger, 1992). To date, a number of industrial scale products are available in this area.3To our knowledge, most implementations use shallow term matching and/or information-extraction techniques (Lv et al., 2015), differing from our methods that use more conventional NLP components and techniques. As we show in this paper and in RK, term matching and related techniques can sometimes serve as a competitive baseline, but are almost always outperformed by our translation approach.\nMore recently, there has been increased interest in machine learning on learning code representations from APIs, especially using resources such as GitHub or StackOverflow. However, this work tends to look at learning from many API collections (Gu et al., 2016), making such systems hard to evaluate and to apply to querying specific APIs. Other work looks at learning to generate longer code from source code annotations for natural language programming (Allamanis et al., 2015), often focusing narrowly on a specific programming language (e.g., Java) or set of APIs. To our knowledge, none of these approaches include companion software that facilitate building custom pipelines for specific APIs and querying.\nTechnically, our approach is related to work on semantic parsing, which looks at generating formal representations from text input for natural language understanding applications, notably question-answering. Many existing methods take direct inspiration from work on MT (Wong and Mooney, 2006) and parsing (Zettlemoyer and Collins, 2009). Please see RK for more discussion and pointers to related work."}, {"heading": "3 Technical Approach", "text": "In this paper, we focus on learning to generate function representations from textual descriptions inside of source code collections, or APIs. We will refer to these target function representations as API components. Each component specifies a function name, a list of arguments, and other optional information such as a namespace.\n3e.g., www.krugle.com,www.searchcode.com\nGiven a set of example text-component pairs from an example API,D = {(xi, zi)}ni=1, the goal is to learn how to generate correct, well-formed components z \u2208 C for each text x. When viewed as a semantic parsing problem, we can view each z as analogous to a target logical form. In this paper, we focus narrowly on Python source code projects, and thus Python functions z, however our methods are agnostic to the input natural language and output programming language as shown in RK.\nWhen used for querying, our model takes a text input and attempts to generate the desired function representation. Technically, our approach follows our previous work and has two components: a simple and lightweight word-based translation model that generates candidate API components, and a discriminative model that reranks the translation model output using additional phrase and document-level features. All of these models are implemented natively in our tool, and we describe each part in turn."}, {"heading": "3.1 Translation Model", "text": "Given an input text (or query) sequence x = w1, .., w|x|, the goal is to generate an output API component z = ui, .., u|z|, which involves learning a conditional distribution p(z | x). We pursue a noisy-channel approach, where\np(z | x) \u221d p(x | z)p(z)\nBy assuming a uniform prior p(z) on output components, the model therefore involves computing p(x | z), which under a word-based translation model can be expressed as:\np(x | z) = \u2211 a p(x, a | z)\nwhere the summation ranges over the set of all many-to-one (word) alignments a from x\u2192 z.\nWhile many different formulations of wordbased models exist, we previously found that the simplest lexical translation model, or IBM Model 1 (Brown et al., 1993), outperforms even higherorder alignment models with location parameters. This model computes all alignments exactly using the following equation:\np(x | z) \u2248 |x|\u220f j=1 |z|\u2211 i=0 pt(wj | ui) (1)\nwhere pt defines a multinomial distribution over a given component term uj for all words wj .\nWhile many parameter estimation strategies exists for training word-based models, we similarly found that the simplest EM procedure of Brown et al. (1993) works the best. In RK, we describe a linear-time decoding strategy (i.e., for generating components from input) over the number of components C, which we use in this paper. Our tool also implements our types of conventional MT decoding strategies that are better suited for large APIs and more complex semantic languages."}, {"heading": "3.2 Discriminative Reranking", "text": "Following most semantic parsing approaches (Zettlemoyer and Collins, 2009), we use a discriminative log-linear model to rerank the components generated from the underlying translation model. Such a model defines a conditional distribution: p( z|x; \u03b8) \u221d e\u03b8\u00b7\u03c6(x,z), for a parameter vector \u03b8 \u2208 Rb, and a set of feature functions \u03c6(x, z).\nOur tool implements several different training and optimization methods. For the purpose of this paper, we train our models using an online, stochastic gradient ascent algorithm under a maximum conditional log-likelihood objective."}, {"heading": "3.2.1 Features", "text": "For a given text input x and output component z, \u03c6(x, z) defines a set of features between these two items. By default, our pipeline implementation uses three classes of features, identical to the feature set used in RK. The first class includes additional word-level features, such as word/component match, overlap, component syntax information, and so on. The second includes phrase and hierarchical phrase features between text and component candidates, which are extracted standardly from symmetric word-level alignment heuristics.\nThe other category of features includes document-level features. This includes information about the underlying API class hierarchy, and relations between words/phrases and abstract classes within this hierarchy. Also, we use additional textual description of parameters in the docstrings to indicate whether word-components candidate pairs overlap in these descriptions."}, {"heading": "4 Implementation and Usage", "text": "All of the functionality above is implemented in the Function Assistant toolkit. The tool is part of the companion software release for our previous work called Zubr. For efficiency, the core\nfunctionality is written in Cython 4, which is a compiled superset of the Python language that facilitates native C/C++ integration.\nThe tool is designed to be used in two ways: first, as a black-box pipeline to build custom translation pipelines and API query engines. The tool can also be integrated with other components using our Cython and Python API. We focus on the first type of functionality."}, {"heading": "4.1 Library Design and Pipelines", "text": "Our library uses dependency-injection OOP design principles. All of the core components are implemented as wholly independent classes, each of which has a number of associated configuration values. These components interact via a class called Pipeline, which glues together various user-specified components and dependencies, and builds a global configuration from these components. Subsequent instantiation and sharing of objects is dictated, or injected, by these global configurations settings, which can change dynamically throughout a pipeline run.\nPipelines are created by writing pipeline scripts, such as the one shown in Figure 2. This file is an ordinary Python file, with two mandatory variables. The first params variable specifies various high-level configuration parameters associated with the pipeline. In this case, there is a set-\n4http://cython.org/\nting --baseline, which can be evoked to run a baseline experiment, and will effect the subsequent processing pipeline.\nThe second, and most important, variable is called tasks, and this specifies an ordering of subprocesses that should be executed. The fields in this list are pointers to either core utilities in the underlying Zubr toolkit (each with the prefix zubr.), or user defined functions. This particular pipeline starts by building a dataset from a user specified source code repository, using DocExtractor, then builds a symmetric translation model SymmetricAlignment, a feature extractor FeatureExtractor, a discriminative reranker Optimizer, all via various intermediate steps. It finishes by building a query interface and query server, QueryInterface and QueryServer, which can then be used for querying the input API.\nAs noted already, each subprocesses has a number of associated configuration settings, which are joined into a global configuration object by the Pipeline instance. For the translation model, settings include, for example, the type of translation model to use, the number of iterations to use when training models, and so on. All of these settings can be specified on the terminal, or in a separate configuration file. As well, the user is free to define custom functions, such as process data, which can be used to modified the default data representations."}, {"heading": "4.2 Web Server", "text": "The last step in this pipeline builds an HTTP web server that can be used to query the input API. Internally, the server makes calls to the trained translation model and discriminative reranker, which takes user queries and attempts to translate them into API function representations. These candidate translations are then returned to the user as potential answers to the query. Depending on the outcome, the user can either rephrase his/her question if the target function is not found, or look closer at the implementation by linking to the function\u2019s source code.\nAn example screen shot of the query server is shown in Figure 3. Here, the background API is the NLTK toolkit, and the query is Train a sequence tagger model. While not mentioned explicitly, the model returns training functions for the HiddenMarkovModelTagger. The right\nside of the image shows the hyperlink path to the original source in Github for the train function."}, {"heading": "5 Experiments", "text": "Our current DocExtractor implementation supports building parallel datasets from raw Python source code collections. Internally, the tool reads source code using the abstract syntax tree utility, ast, in the Python standard library, and extracts sets of function and description pairs. In addition, the tool also extracts class descriptions, parameter and return value descriptions, and\ninformation about the API\u2019s internal class hierarchy. This last type of information is then used to define document-level features.\nTo experiment with this feature, we built pipelines and ran experiments for 27 popular Python projects. The goal of these experiments is to test the robustness of our extractor, and see how well our models answer unseen queries for these resources using our previous experimental setup."}, {"heading": "5.1 Datasets", "text": "The example projects are shown in Table 1. Each datasets is quantified in terms of # Pairs, or the number of parallel function-component representations, the # Symbols in the component output language, the # (NL) Words and Vocab size."}, {"heading": "5.2 Experimental Setup", "text": "Each dataset is randomly split into train, test, and development sets using a 70%-30% split. We can think of the held-out sets as mimicking queries that users might ask the model. Standardly, all models are trained on the training sets, and hyperparameters are tuned to the development sets.\nFor a unseen text input during testing, the model generates a candidate list of component outputs. An output is considered correct if it matches exactly the gold function representation. As before, we measure the Accuracy @1, accuracy within top ten (Accuracy @10), and the MRR.\nAs in our previous work, three additional baselines are used. The first is a simple bag-of-words\n(BoW) model, which uses word-component pairs as features. The second is a Term Match baseline, which ranks candidates according to the number of matches between input words and component words. We also compare the results of the Translation (model) without the reranker."}, {"heading": "6 Results and Discussion", "text": "Test results are shown in Table 2, and largely conform to our previous findings. The BoW and Term Match baselines are outperformed by all other models, which again shows that API querying is more complicated than simple wordcomponent matching. The Reranker model leads to improvements on all datasets as compared with only using the Translation model, indicating that document-level and phrase features can help.\nWe note that these experiments are synthetic, in the sense that it\u2019s unclear whether the heldout examples bear any resemblance to actual user queries. Assuming, however, that each held-out set is a representative sample of the queries that real users would ask, we can then interpret the results as indicating how well our models answer queries.\nWhether or not these held-out examples reflect real queries, we believe that they still provide a good benchmark for model construction. All code and data will be released to facilitate further experimentation and application building. Future work will look at eliciting more naturalistic queries, and doing usage studies via a permanent web demo5."}, {"heading": "7 Conclusion", "text": "We introduce Function Assistant, a lightweight tool for querying API collections using uncon-\n5see demo here: http://zubr.ims.uni-stuttgart.de/\nstrained natural language. Users can supply our tool with target source code projects and built custom translation pipelines and query servers from scratch. In addition to the tool, we also created new resources for studying API querying, in the form of datasets built from 27 popular Github projects. We hope will that our tool and resources will serve as a benchmark for future work in this area, and ultimately help to solve everyday software search and reusability issues."}], "references": [{"title": "Bimodal modelling of source code and natural language", "author": ["Miltiadis Allamanis", "Daniel Tarlow", "Andrew D Gordon", "Yi Wei."], "venue": "Proceedings of ICML.", "citeRegEx": "Allamanis et al\\.,? 2015", "shortCiteRegEx": "Allamanis et al\\.", "year": 2015}, {"title": "The mathematics of SMT", "author": ["Peter F Brown", "Vincent J Della Pietra", "Stephen A Della Pietra", "Robert L Mercer."], "venue": "Computational linguistics 19(2).", "citeRegEx": "Brown et al\\.,? 1993", "shortCiteRegEx": "Brown et al\\.", "year": 1993}, {"title": "Deep API Learning", "author": ["Xiaodong Gu", "Hongyu Zhang", "Dongmei Zhang", "Sunghun Kim."], "venue": "arXiv preprint arXiv:1605.08535 .", "citeRegEx": "Gu et al\\.,? 2016", "shortCiteRegEx": "Gu et al\\.", "year": 2016}, {"title": "Software reuse", "author": ["Charles W. Krueger."], "venue": "ACM Comput. Surv. 24(2).", "citeRegEx": "Krueger.,? 1992", "shortCiteRegEx": "Krueger.", "year": 1992}, {"title": "Codehow: Effective code search based on api understanding and extended boolean model (e)", "author": ["Fei Lv", "Hongyu Zhang", "Jian-guang Lou", "Shaowei Wang", "Dongmei Zhang", "Jianjun Zhao."], "venue": "Proceedings of ASE.", "citeRegEx": "Lv et al\\.,? 2015", "shortCiteRegEx": "Lv et al\\.", "year": 2015}, {"title": "Learning semantic correspondences in technical documentation", "author": ["Kyle Richardson", "Jonas Kuhn."], "venue": "arXiv preprint arXiv:1705.04815 .", "citeRegEx": "Richardson and Kuhn.,? 2017", "shortCiteRegEx": "Richardson and Kuhn.", "year": 2017}, {"title": "Learning for Semantic Parsing with Statistical Machine Translation", "author": ["Yuk Wah Wong", "Raymond J. Mooney."], "venue": "Proceedings of HLT-NAACL-2006.", "citeRegEx": "Wong and Mooney.,? 2006", "shortCiteRegEx": "Wong and Mooney.", "year": 2006}, {"title": "Learning context-dependent mappings from sentences to logical form", "author": ["Luke S. Zettlemoyer", "Michael Collins."], "venue": "Proceedings of ACL-2009.", "citeRegEx": "Zettlemoyer and Collins.,? 2009", "shortCiteRegEx": "Zettlemoyer and Collins.", "year": 2009}], "referenceMentions": [{"referenceID": 5, "context": "For a given text query and background API, the tool finds candidate functions by performing a translation from the text to known representations in the API using the semantic parsing approach of Richardson and Kuhn (2017). Translations are automatically learned from example textcode pairs in example APIs.", "startOffset": 195, "endOffset": 222}, {"referenceID": 5, "context": "In our previous work (Richardson and Kuhn (2017), henceforth RK), we look at learning these types of correspondences from example API collections in a variety of programming languages and source natural languages.", "startOffset": 22, "endOffset": 49}, {"referenceID": 3, "context": "Natural language querying of APIs has long been a goal in software engineering, related to the general problem of software reuse (Krueger, 1992).", "startOffset": 129, "endOffset": 144}, {"referenceID": 4, "context": "3To our knowledge, most implementations use shallow term matching and/or information-extraction techniques (Lv et al., 2015), differing from our methods that use more conventional NLP components and techniques.", "startOffset": 107, "endOffset": 124}, {"referenceID": 2, "context": "However, this work tends to look at learning from many API collections (Gu et al., 2016), making such systems hard to evaluate and to apply to querying specific APIs.", "startOffset": 71, "endOffset": 88}, {"referenceID": 0, "context": "Other work looks at learning to generate longer code from source code annotations for natural language programming (Allamanis et al., 2015), often focusing narrowly on a specific programming language (e.", "startOffset": 115, "endOffset": 139}, {"referenceID": 6, "context": "Many existing methods take direct inspiration from work on MT (Wong and Mooney, 2006) and parsing (Zettlemoyer and Collins, 2009).", "startOffset": 62, "endOffset": 85}, {"referenceID": 7, "context": "Many existing methods take direct inspiration from work on MT (Wong and Mooney, 2006) and parsing (Zettlemoyer and Collins, 2009).", "startOffset": 98, "endOffset": 129}, {"referenceID": 1, "context": "While many different formulations of wordbased models exist, we previously found that the simplest lexical translation model, or IBM Model 1 (Brown et al., 1993), outperforms even higherorder alignment models with location parameters.", "startOffset": 141, "endOffset": 161}, {"referenceID": 1, "context": "While many parameter estimation strategies exists for training word-based models, we similarly found that the simplest EM procedure of Brown et al. (1993) works the best.", "startOffset": 135, "endOffset": 155}, {"referenceID": 7, "context": "Following most semantic parsing approaches (Zettlemoyer and Collins, 2009), we use a discriminative log-linear model to rerank the components generated from the underlying translation model.", "startOffset": 43, "endOffset": 74}], "year": 2017, "abstractText": "In this paper, we describe Function Assistant, a lightweight Python-based toolkit for querying and exploring source code repositories using natural language. The toolkit is designed to help end-users of a target API quickly find information about functions through high-level natural language queries and descriptions. For a given text query and background API, the tool finds candidate functions by performing a translation from the text to known representations in the API using the semantic parsing approach of Richardson and Kuhn (2017). Translations are automatically learned from example textcode pairs in example APIs. The toolkit includes features for building translation pipelines and query engines for arbitrary source code projects. To explore this last feature, we perform new experiments on 27 well-known Python projects hosted on Github1.", "creator": "LaTeX with hyperref package"}}}