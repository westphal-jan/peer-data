{"id": "1706.01320", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-Jun-2017", "title": "3D Pathfinding and Collision Avoidance Using Uneven Search-space Quantization and Visual Cone Search", "abstract": "pathfinding is a historically very popular area in computer game development. while two - dimensional ( 2d ) pathfinding is widely are applied in most of the popular game engines, little implementation of real three - dimensional ( 3d ) pathfinding can be found. this research presents a dynamic search space optimization algorithm which can be applied to tessellate 3d search space unevenly, significantly reducing the total number of resulting nodes. the algorithm can be used with moderately popular pathfinding algorithms in 3d game exploration engines. furthermore, a simplified standalone 3d pathfinding algorithm is proposed in for this paper. the proposed parallel algorithm relies on ray - casting or line shadow vision to generate a feasible path during runtime without requiring division of slices the search space into a 3d grid. both of the proposed proposed algorithms are simulated on unreal engine to show innerworkings and resultant efficient path comparison with a *. the advantages and shortcomings of the proposed algorithms are also discussed along with future directions.", "histories": [["v1", "Mon, 5 Jun 2017 13:49:49 GMT  (1040kb)", "http://arxiv.org/abs/1706.01320v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["diptangshu pandit"], "accepted": false, "id": "1706.01320"}, "pdf": {"name": "1706.01320.pdf", "metadata": {"source": "CRF", "title": "3D Pathfinding and Collision Avoidance Using Uneven Search-space Quantization and Visual Cone Search", "authors": ["Diptangshu Pandit"], "emails": ["diptangshu.pandit@nortumbria.ac.uk"], "sections": [{"heading": null, "text": "game development. While two-dimensional (2D) pathfinding is widely applied in most of the popular game engines, little implementation of real three-dimensional (3D) pathfinding can be found. This research presents a dynamic search space optimization algorithm which can be applied to tessellate 3D search space unevenly, significantly reducing the total number of resulting nodes. The algorithm can be used with popular pathfinding algorithms in 3D game engines. Furthermore, a simplified standalone 3D pathfinding algorithm is proposed in this paper. The proposed algorithm relies on ray-casting or line vision to generate a feasible path during runtime without requiring division of the search space into a 3D grid. Both of the proposed algorithms are simulated on Unreal Engine to show innerworkings and resultant path comparison with A*. The advantages and shortcomings of the proposed algorithms are also discussed along with future directions.\nKeywords\u20143D, pathfinding, computer game, artificial\nintelligence, simulation.\nI. INTRODUCTION\nThe application artificial intelligence (AI) in computer games is gaining popularity rapidly[1]\u2013[3]. Pathfinding and graph traversal are widely used application areas of AI in games [4]. Graph traversal is broadly used when the game can be divided into multiple states (or nodes) and the game is progressed by traversing from one state to another. This is very common for board games and some puzzle games where the player is competing against a computer controlled opponent. On the other hand, for 3D video games, AI is used to generate intelligent behaviours for computer controlled characters (often called non-playable characters or NPCs). The main goal of using AI in this case is to simulate human like behaviour around decision making such as navigating, shooting etc."}, {"heading": "1. Pathfinding", "text": "One of the important aspects of these games is navigation which includes how an NPC moves from one point to another\non the map within the game. Popular pathfinding algorithms include Depth-First Search, Breadth-First Search, Iterative Deepening algorithm, Best First Search, Dijkstra's algorithm, A* etc. These algorithms work well for flat surfaces. An example implementation along with pseudocode can be found in the work by Khammapun et.al [5]. Recently, Monte Carlo Tree Search Methods are also gaining recognition [6].\nComplications can arise when the map surface is not flat and continuous. For example, an NPC might need to jump and avoid obstacles occasionally to reach the final destination. Popular game engines such as Unreal Engine 4 (UE4) [7], Unity 3D [8] and CryEngine[9] use navigational mesh which converts the 3D search space into virtual 2D plain to solve this issue. Figure 1 illustrates the navigation components used in some popular game engines to solve NPC navigation on non-flat surfaces. A virtually connected plain consisting of triangles of mesh are generated on top of reachable surfaces which is used by the navigation algorithm. This is shown in Figure 1; (A) sky-blue surface in Unity 3D scene, (B) green surface in the UE4 scene and, (C) blue surface in\nCryEngine scene. CryEngine\u2019s pathfinder uses A* search algorithm with distance to destination as a heuristic. Disconnected edges of the navigation surfaces are generally used as constraints while calculating paths. For example, while calculating paths the algorithm checks whether the NPC can jump the distance between two corresponding surface edges or not. Pathfinding algorithms only find feasible paths between the current location and the target destination. However, making the movement or navigation appear human-like presents an additional issue.\nPlayer behaviour is imitated by NPCs using state machines in major game engines such as in UE4. Behaviour can be predefined based on state, for example, a patrolling NPC will follow some predefined path until it sees an enemy which would change its state from patrolling to attacking. Vehicle navigation is different to human character navigation, for example consider racing games. Optimal path calculation not only relies on the shortest distance to the destination but also on other parameters. After the path is calculated, it can be followed by the vehicle if the optimal speed and turning angles are calculated and applied properly. Although most of these pseudo 3D navigation strategies are already practiced in many game engines and some related work has been conducted [5], [10]\u2013[14], they lack true 3D pathfinding."}, {"heading": "2. 2D vs 3D Pathfinding", "text": "A true 3D pathfinding algorithm can provide six degrees of freedom (6DoF) which could be useful for flying NPCs such as animals, aeroplanes, spaceships etc. For this purpose, the whole search space must be divided into connected nodes before an algorithm can be applied. For example, 2D space is generally divided using triangular, square, or hexagonal shapes and each of these shapes are considered as a node as shown in Figure 2. The connected nodes create a network of search space which is traversed by the pathfinding algorithm.\nWhile having more sides in node shape (e.g. hexagon) gives directional freedom, it complicates the search space by adding more connection. Having smaller size nodes provides a more precise path while compromising performance as the size of search space (i.e. no. of nodes in the network) grows. Similarly, 3D space can be divided using space filling polygons.\nSimilar ideas can be used in 3D pathfinding algorithms. A space-filling polyhedron can be used to generate tessellation of 3D space. Each of these can be considered as nodes. Attached polyhedrons are connected nodes in search network. Figure 3 shows five polyhedrons which could be used for space filling; (A) Triangular Prism, (B) Cube, (C) Hexagonal prism, (D) Truncated octahedron and, (E) Gyrobifastigium. 3D space filling is also illustrated in the same figure using cube (F) and using truncated octahedron (G).\nAs discussed earlier with regards to 2D space filling, the size\nof the nodes and number of sides (faces in 3D shapes) play a similar role in compromise between directional freedom and search space complexity. When the 3D space is converted into a network of connected nodes any search algorithm can be used to find feasible/optimal path between two nodes. For the sake of simplicity and performance, only cubical 3D space tessellation will be used in this research.\nThere could be various problems while calculating the path to a destination. The search algorithms can be used proactively and reactively. In a proactive strategy, the possible paths are pre-calculated and saved. The pre-\ncalculated paths are queried by AI when needed. On the other\nhand, in reactive strategy, the navigation path is calculated in the runtime.\nBoth strategies have their own advantages and disadvantages. Proactive strategy does not take other moving objects into consideration, resulting in possible collisions with other objects and blockage of the pathway. In this case, a collation avoidance algorithm must be implemented for runtime usage. The main advantage of a proactive strategy is that it does not use much computation in the runtime resulting faster calculation. The reactive algorithm works in an opposite way. As the path is calculated on the go, separate collation detection is not needed. The moving objects are considered obstacles and the path is adjusted accordingly. But the calculation is heavy as it is done in runtime and might slow down performance if a number of NPCs are large in the corresponding game.\nAn efficient pathfinding algorithm is proposed in the next section which uses a mix of proactive and reactive strategy to compute path to destination. The proposed algorithm uses dynamic search space quantization to optimize performance.\nII. METHODOLOGY\nIn this section, the methods and algorithms used in this work are discussed. While finding path in a virtual game world the algorithm is always aware of the actual location and distances between nodes in the search space. This makes A* very efficient to be used as base algorithm. However, the main problem in simply using A* on 3D virtual game world is that it takes a huge amount of computation for traversing the whole search space toward the target location. The proposed solution contains two main strategies to deal with this problem which are discussed in the following."}, {"heading": "1. Uneven Search-space Quantization Algorithm", "text": "There are several ways to reduce the search space. Increasing the size of unit space filling the polygon can make the search\ntree significantly small, however, this produces inaccurate results. An example is shown in Figure 4 where a large grid is shown on the left and smaller grid is shown on the right. There are three objects; X, Y, and, Z each of which are surrounded by its wrongly blocked volume due to grid scaling (marked as yellow). The proposed algorithm uses a localized dynamic compromise between higher and lower scales based on where required. The algorithm is discussed further in the following.\nAlgorithm 1. Uneven Search-space Quantization (USQ)\nInput: l //Minimum grid length\nd //Maximum division depth\nOutput: Grid of connected cubes\nMethod:\n1: Place a bounding box (cube) around the search area.\nInitialize l=0;\n2: for every cube c do\n3: if c is colliding with any object then\n4: if length of c l\u2019 >= 2*l and depth of c d\u2019<d then\n5: Divide cube c into 8 cubes length l\u2019/2. Create 8\nchild nodes (for each cube) under node c.\n6: Adjust the child connections according to\nadjacency.\n7: end if\n8: end if\n9: end for\n10: l: =l+1;\n11: if l <= d then\n12: go to step 2\n13: end if\nUSQ depends on two parameters; maximum division depth (d) and, minimum grid length (l). The maximum number of division. Both are optimization parameters. \u2018l\u2019 should be more than the size of collision box of the object to be moved through the path. Whereas \u2018d\u2019 makes sure that the algorithm does not create a substantial number of nodes regardless of the size of the obstacle. USQ is not a pathfinding algorithm, however, it helps optimizing search space for the pathfinding algorithms by reducing total number of search nodes."}, {"heading": "2. View Cone Search Algorithm", "text": "A 3D pathfinding algorithm View Cone Search (VCS) is proposed in this subsection. The idea behind VCS is the aim of making pathfinding simpler by utilizing orthogonal view of the obstacle to the NPC. A view cone is a cone created from the position of NPC to the obstacle placing apex on NPC and the circular base on the slicing the till the end of the obstacle. VCS finds a near optimal outer path by increasing\nand decreasing the view cone radius accordingly. The algorithm is further explained as follows.\nAlgorithm 2. View Cone Search (VCS)\nInput: r //Maximum cone radius\nI //Maximum iterations\ns //Starting point\nc //First collision object\nd //Destination point\nOutput: P //Path toward destination\nMethod:\n1: Create a view cone placing apex in s and base at k with radius r. k is calculated as the intersection point of the straight line from d to s. (as shown in Figure 5)\n2: for i = 1 to I do\n3: if there exist a point p on circumference of the base of the cone such that straight line from s to p is not colliding with the object then\n4: r = r/2;\n5: else\n6: r = r + r/2;\n8: end if\n9: end for\n10: Return path P as straight line from s to p.\nVCS is a very simple pathfinding algorithm which generates a path toward a destination while avoiding the first obstacle. The algorithm can be repeated when the NPC avoids the first obstacle and progresses toward the next. Maximum cone radius r should be initialised as half the maximum possible side of the obstacle. Binary search is used for finding the minimal (near optimal) radius of the view cone for lower complexity. The number of points in the base (circle) of the cone is theoretically infinite, however, in this case, a certain number of points uniformly distributed over the circumference are considered. In the next section, comparison experiments are conducted using both algorithms on UE4 to show the differences.\nIII. EXPERIMENTS\nUE4 is selected for experimentation as it is freely available and highly used by AAA 3D games. Three sets of experiments were conducted showing USQ and VCS in action. The first experiment demonstrates USQ in action. Next, the USQ is combined with A* for path finding.\nFigure 6 shows an example result of USQ. In the figure, the\nsearch grid is unevenly divided using the proposed algorithm using depth (d) = 4 division. It can be clearly seen that the number of nodes (cubes) present in search space is considerably reduced (unlike in the normal scenario in Figure 4).\nFurthermore, A* algorithm is simulated on the resulting search space to find a path between two points. As the UE4 provides the bounds of an actor (UE4 term for an object) only the corresponding bound volume is tessellated using USQ.\nFigure 7 illustrates the simulated result. A simple ray-cast (UE4 term for drawing straight line) is used from starting object A to target object B. The first object intersects on the collision points C and D. A* is used to find a path between C and D. Similarly, the next obstacle path between E and F is calculated by A*. The final resulting path is marked in yellow.\nAdditionally, another set of experiments were conducted to compare results of VCS with that of A*. In the first example scenario, as shown in Figure 8 (I), there are two objects, X and Y. X is a simple object having one solid body while Y is a hollow object. After using USQ, a combination of localized A* and ray-cast is used for finding path from A to B. In Figure 8 (II), series of VCS is used two times after applying\nUSQ to generate a path from A to B. Finally, in Figure 8 (III) the same scenario is used while applying VCS without the help of USQ, resulting slightly different results than in the previous case. This is because, in the last case, VCS is only aware of a single collision bound around composite object Y provided by the game engine.\nIt can be clearly seen in Figure 8 that A* algorithm produces optimal path between point A and B in the experiments (as in Figure 8) while VCS uses a simpler approach to find near optimal feasible solutions. In game engines, cones are represented by prisms with a polygon as the base (a polygon with 20 vertices in the conducted experiment as shown in Figure 9). This significantly reduces collision checking VCS (as in 3rd step in Algorithm 2) because of a limited number of points in the base polygon. Increasing the number of vertices in the base polygon will produce more accurate result while reducing performance.\nIV. CONCLUSIONS\nIn this research, two algorithms have been proposed. The first algorithm, USQ, reduces the size of the search space to make path finding faster while the second algorithm, VCS, tries to mimic NPC view cone to quickly find a possible path. Both algorithms are simulated using UE4 and combined for comparison. The main advantage of USQ is that it can be used with any pathfinding algorithm to reduce overall search complexity. On the other hand, VCS provides an efficient way to avoid obstructions. The algorithm does not require any search grid, instead, it uses line-of-sight (ray-cast) data for collision avoidance. It could be very useful in games such as those using airborne vehicles or drones since NPC moves towards a target while avoiding obstacles.\nThe proposed algorithms have some limitations which can be improved upon. For example, VCS tries to find a path to avoid only the first obstacle. If the NPC finds multiple\nobstacles close together, the VCS algorithm might fail to find a feasible path. Furthermore, the algorithm certainly fails when the NPC is inside a concave mesh. The proposed algorithm can be further enhanced by adding a mechanism to deal with the mentioned exceptional cases. Another future improvement can be done by setting dynamic parameter initialization based on the obstacle bound and corresponding situation."}, {"heading": "Acknowledgement", "text": "I would like to thank Melissa Skinner for her helpful feedback on a draft of the paper."}], "references": [{"title": "Game {AI}: The State of the Industry", "author": ["D.C. Pottinger", "J.E. Laird"], "venue": "Part Two\u2019, Gamasutra", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2000}, {"title": "Computational intelligence and AI in games: A New IEEE transactions", "author": ["S.M. Lucas"], "venue": "IEEE Trans. Comput. Intell. AI Games, vol. 1, no. 1, pp. 1\u20133", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2009}, {"title": "AI in Computer Games", "author": ["A. Nareyek"], "venue": "Queue, vol. 1, no. February, pp. 58\u201365", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2004}, {"title": "Game AI: artificial intelligence for 3D path finding", "author": ["Y.C. Hui", "E.C. Prakash", "N.S. Chaudhari"], "venue": "2004 IEEE Reg. 10 Conf. TENCON 2004., vol. B, pp. 306\u2013 309", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2004}, {"title": "Pathfinding of 2D & 3D game real-time strategy with Depth Direction A* algorithm for multi-layer", "author": ["K. Khantanapoka", "K. Chinnasarn"], "venue": "2009 8th International Symposium on Natural Language Processing, SNLP \u201909", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2009}, {"title": "A survey of Monte Carlo tree search methods", "author": ["C.B. Browne"], "venue": "IEEE Transactions on Computational Intelligence and AI in Games,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "Using a genetic algorithm to explore A*-like pathfinding algorithms", "author": ["R. Leigh", "S.J. Louis", "C. Miles"], "venue": "Proc. 2007 IEEE Symp. Comput. Intell. Games, CIG 2007, no. Cig, pp. 72\u201379", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2007}, {"title": "Pathfinder Programmes", "author": ["F.M. J\u00f6nsson"], "venue": "Probat. J., vol. 49, no. 3, pp. 241\u2013242", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2002}, {"title": "Multi-agent pathfinding system implemented on XNA", "author": ["H. Jin", "W. Wu", "Z. Ling"], "venue": "Proceedings - 4th International Conference on Computational Intelligence and Communication Networks, CICN 2012", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2012}, {"title": "GPU accelerated pathfinding", "author": ["A. Bleiweiss"], "venue": "Proc. 23rd ACM SIGGRAPH/ ..., pp. 65\u201374", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2008}, {"title": "Pathfinding in Games", "author": ["A. Botea", "B. Bouzy", "M. Buro", "C. Bauckhage", "D. Nau"], "venue": "Artif. Comput. Intell. Games,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "The application artificial intelligence (AI) in computer games is gaining popularity rapidly[1]\u2013[3].", "startOffset": 92, "endOffset": 95}, {"referenceID": 2, "context": "The application artificial intelligence (AI) in computer games is gaining popularity rapidly[1]\u2013[3].", "startOffset": 96, "endOffset": 99}, {"referenceID": 3, "context": "Pathfinding and graph traversal are widely used application areas of AI in games [4].", "startOffset": 81, "endOffset": 84}, {"referenceID": 4, "context": "al [5].", "startOffset": 3, "endOffset": 6}, {"referenceID": 5, "context": "Recently, Monte Carlo Tree Search Methods are also gaining recognition [6].", "startOffset": 71, "endOffset": 74}, {"referenceID": 4, "context": "Although most of these pseudo 3D navigation strategies are already practiced in many game engines and some related work has been conducted [5], [10]\u2013[14], they lack true 3D pathfinding.", "startOffset": 139, "endOffset": 142}, {"referenceID": 6, "context": "Although most of these pseudo 3D navigation strategies are already practiced in many game engines and some related work has been conducted [5], [10]\u2013[14], they lack true 3D pathfinding.", "startOffset": 144, "endOffset": 148}, {"referenceID": 10, "context": "Although most of these pseudo 3D navigation strategies are already practiced in many game engines and some related work has been conducted [5], [10]\u2013[14], they lack true 3D pathfinding.", "startOffset": 149, "endOffset": 153}], "year": 2017, "abstractText": "Pathfinding is a very popular area in computer game development. While two-dimensional (2D) pathfinding is widely applied in most of the popular game engines, little implementation of real three-dimensional (3D) pathfinding can be found. This research presents a dynamic search space optimization algorithm which can be applied to tessellate 3D search space unevenly, significantly reducing the total number of resulting nodes. The algorithm can be used with popular pathfinding algorithms in 3D game engines. Furthermore, a simplified standalone 3D pathfinding algorithm is proposed in this paper. The proposed algorithm relies on ray-casting or line vision to generate a feasible path during runtime without requiring division of the search space into a 3D grid. Both of the proposed algorithms are simulated on Unreal Engine to show innerworkings and resultant path comparison with A*. The advantages and shortcomings of the proposed algorithms are also discussed along with future directions. Keywords\u20143D, pathfinding, computer game, artificial intelligence, simulation.", "creator": "Microsoft\u00ae Word 2016"}}}