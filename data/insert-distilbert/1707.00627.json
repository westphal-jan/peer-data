{"id": "1707.00627", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Apr-2017", "title": "A Reverse Hex Solver", "abstract": "we present solrex, an automated solver simulation for the game of reverse hex. reverse / hex, also known as imperfect rex, or misere hex, normally is the variant of the game scenario of hex in which the third player returns who joins all her two sides instead loses the game. solrex performs a mini - max consistency search of the state space using scalable parallel depth first generation proof number system search, enhanced by the pruning of inferior moves and the early detection of certain winning strategies. solrex is implemented on the same code base as the hex program solver, modular and can solve arbitrary positions on board sizes up to 6x6, with the hardest drawing position taking less than four hours on four threads.", "histories": [["v1", "Wed, 26 Apr 2017 17:51:08 GMT  (1058kb)", "http://arxiv.org/abs/1707.00627v1", "Presented at Computers and Games 2016 Leiden, International Conference on Computers and Games. Springer International Publishing, 2016"]], "COMMENTS": "Presented at Computers and Games 2016 Leiden, International Conference on Computers and Games. Springer International Publishing, 2016", "reviews": [], "SUBJECTS": "cs.AI cs.GT", "authors": ["kenny young", "ryan b hayward"], "accepted": false, "id": "1707.00627"}, "pdf": {"name": "1707.00627.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Ryan B. Hayward", "Ronald J. Evans"], "emails": ["hayward@ualberta.ca,"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 7.\n00 62\n7v 1\n[ cs\n.A I]\n2 6\nA pr\n2 01\nKeywords: Hex, Reverse Hex, mise\u0300re, Rex, solver, combinatorial game theory, proof number search"}, {"heading": "1 Introduction", "text": "In 1942 Piet Hein invented the two-player board game now called Hex [10]. The board is covered with a four-sided array of hexagonal cells. Each player is assigned two opposite sides of the board. Players move in alternating turns. For each turn, a player places one of their stones on an empty cell. Whoever connects their two sides with a path of their stones is the winner.\nIn his 1957 Scientific American Mathematical Games column, Concerning the game of Hex, which may be played on the tiles of the bathroom floor, Martin Gardner mentions the mise\u0300re version of Hex known as Reverse Hex, or Rex, or Mise\u0301re Hex: whoever joins their two sides loses [5]. See Figure 1.\na b c d\n1\n2\n3\n4\nFig. 1. Left: the end of a Rex game. White has joined both White sides, so loses. Right: a Rex puzzle by Ronald J. Evans. White to play and win.[7]\nSo, for positive integers n, who wins Rex on n\u00d7n boards? Using a strategystealing argument, Robert O. Winder showed that the first (resp. second) wins\n\u22c6 The authors gratefully acknowledge the support of NSERC.\nwhen n is even (odd) [5]. Lagarias and Sleator further showed that, for all n, each player has a strategy that can avoid defeat until the board is completely covered [13].\nWhich opening (i.e. first) moves wins? Ronald J. Evans showed that for n even, opening in an acute corner wins [4]. Hayward et al. further showed that, for n even and at least 4, opening in a cell that touches an acute corner cell and one\u2019s own side also wins [9].\nThe results mentioned so far prove the existence of winning strategies. But how hard is it to find such strategies? In his 1988 book Gardner commented that \u201c4\u00d74 [Rex] is so complex that a winning line of play for the first player remains unknown. [7,8]. In 2012, based on easily detected pairing strategies, Hayward et al. explained how to find winning strategies for all but one (up to symmetry) opening move on the 4\u00d74 board [9].\nIn this paper, we present Solrex, an automated Rex solver that solves arbitrary Rex positions on boards up to 6\u00d76. With four threads, solving the hardest 6\u00d76 opening takes under 4 hours; solving all 18 (up to symmetry) 6\u00d76 openings takes about 7 hours.\nThe design of Solrex is similar to the design of the Hex program Solver. So, Solrex searches the minimax space of gamestates using Scalable Parallel Depth-First Proof Number Search, the enhanced parallel version by Pawlewicz and Hayward [14] of Focussed Depth-First Proof Number Search of Arneson, Hayward, and Henderson [2]. Like Solver, Solrex enhances the search by inferior move pruning and early win detection. The inferior move pruning is based on Rex-specific theorems. The win detection is based on Rex-specific virtual connections based on pairing strategies.\nIn the next sections we explain pairing strategies, inferior cell analysis, win detection, the details of Solrex, and then present experimental results."}, {"heading": "2 Death, pairing, capture, joining", "text": "Roughly, a dead cell is a cell that is useless to both players, as it cannot contribute to joining either player\u2019s two sides. Dead cells can be pruned from the Rex search tree. Related to dead cells are captured cells, roughly cells that are useless to just one player and so can be colored for the other player. In Hex, each player wants to capture cells; in Rex, each player wants to force the opponent to capture cells. In Rex, such opponent-forced capture can be brought about by pairing strategies. As we will see in a later section, pairing strategies can also be used to force the opponent to join their two sides.\nBefore elaborating on these ideas, we give some basic terminology. Let X denote the opponent of player X .\nFor a given position, player X colors cell c means that player X moves to cell c, i.e. places a stone of her color on cell c. A cell is uncolored if it is unoccupied. To X-fill a set of cells is to X-color each cell in the set; to fill a set is either to X-fill or X-fill the set.\nA state S = PX is a position P together with the specified player X to move next. The winner of S is whoever has a winning strategy from S.\nFor a position P and a player X , a X-joinset is a minimal set of uncolored cells which when X-colored joins X\u2019s two sides; a joinset is an X-joinset or an Xjoinset; an uncolored cell is live if it is in a joinset, otherwise it is dead; a colored cell is dead if uncoloring it would make it dead.\nFor an even size subset C of uncolored cells of a position or associated state, a pairing \u03a0 is a partition of C into pairs, i.e. subsets of size two. For a cell c in a pair {c, d}, cell d is c\u2019s mate. For a state S, a player Y , and a pairing \u03a0 , a pairing strategy is a strategy for Y that guarantees that, in each terminal position reachable from S, at most one cell of each pair of \u03a0 will be Y -colored.\nFor a state S = PX , Last is that player who plays last if the game ends with all cells colored, and Notlast is the other player, i.e. she who plays second-last if the game ends with all cells uncolored. So, Last (Notlast) is whoever plays next if and only if the number of uncolored cells is odd (even). For example, for S = PX with P the empty 6\u00d76 board, Last is X and Notlast is X , since X plays next and P has 36 uncolored cells.\nTheorem 1. For state S and pairing \u03a0, each player has a pairing strategy for S.\nProof. It suffices to follow these rules. Proving that this is always possible is left to the reader.\nFirst assume Y is Last. In response to Y coloring a cell in \u03a0 , Y colors the mate. Otherwise, Y colors some uncolored cell not in\u03a0 . Next assume Y is Notlast. In response to Y coloring a cell in \u03a0 with uncolored mate, Y colors the mate; otherwise, Y colors a cell not in \u03a0 ; otherwise (all uncolored cells are in \u03a0 , and\neach pair of \u03a0 has both or neither cell colored), Y colors any uncolored cell of \u03a0 . \u2293\u2294\nFor a player X and a pairing \u03a0 with cell set C of a position P or associated state S = P Y , we say \u03a0 X-captures C if X-coloring at least one cell of each pair of \u03a0 leaves the remaining uncolored cells of C dead; and we say \u03a0 X-joins P if X-coloring at least one cell of each pair of \u03a0 joins X \u2019s two sides.\nNotice that every captured set (as defined here, i.e. for Rex) comes from a pairing and so has an even number of cells, as does every X-join set."}, {"heading": "3 Inferior cell pruning and early win detection", "text": "We now present the Rex theorems that allow our solver to prune inferior moves and detect wins early.\nFor a position P , a player X , and a set of cells C, P + CX is the position obtained from P by X-coloring all cells of C, and P \u2212C is the position obtained from P by uncoloring all colored cells of C. For clarity, we may also write P \u2212CX in this case where X is the player who originally controlled all the cells of C. Similarly, for a state S = P Y , where Y = X or X , S+CX is the state (P +CX)\nY . Also, in this context, when C has only one cell c, we will sometimes write cX instead of {c}X .\nFor states S and T and player X , we write S \u2265X T if X wins T whenever X wins S, and we write S \u2261 T if the winner of S is the winner of T , i.e. if S \u2265X T and T \u2265X S for either player X .\nAn X-strategy is a strategy for player X .\nTheorem 2. For an even size set C of uncolored cells of a state S, S \u2265X S+CX .\nProof. Assume \u03c0+ is a winning X-strategy for S+ = S + CX . Let \u03c0 be the Xstrategy for S obtained from \u03c0+ by moving anywhere in C whenever X moves in\nC. For any terminal position reachable from S, the set of cells occupied by X will be a superset of the cells occupied by X in the corresponding position reachable from S+, so X wins S. \u2293\u2294\nTheorem 3. For a position P with uncolored cell c, (P + c X )Y \u2265X P Y .\nProof. First assume Y = X . Assume X wins S = PX . Then, for every possible move from S by X , X can win. In particular, X can win after X colors c. So X wins (P + c\nX )X .\nNext assume Y = X . Assume X wins S = PX . We want to show X wins S \u2032 = (P + c\nX )X . Let c\u2032 a cell to which X moves from S \u2032, let C = {c, c\u2032}, and let\nS \u2032\u2032 be the resulting state (P +C X )X . X wins S so, by Theorem 2, X wins S \u2032\u2032. So, for every possible move from S \u2032, X wins. So X wins S \u2032. \u2293\u2294\nTheorem 4. For an X-captured set C of a state S, S + CX \u2265X S.\nProof. Assume X wins S+ = S +CX with strategy \u03c0 +. We want to show that X wins S. Let \u03a0 be an X-capture pairing for C, and modify \u03c0+ by adding to it the \u03a0 pairing strategy for X.\nLet Z be a terminal state reachable from S by following \u03c0. Assume by way of contradiction that Z has an X-colored set of cells joining X \u2019s two sides. If such a set Q\u2217 exists, then such a set Q exists in which no cell is in C. (On C X follows a \u03a0 pairing, so in Z at most one cell of each pair of \u03a0 is X-colored. Now X-color any uncolored cells of C. Now at least one cell of each pair is X-colored, and C is X-captured, so each X-colored cell of C is dead, and these cells can be removed one at a time from Q\u2217 while still leaving a set of cells that joins X\u2019s two sides. Thus we have our set Q.) But then the corresponding state Z+ reachable from S+ by following \u03c0+ has the same set Q, contradicting the fact that X wins S+. \u2293\u2294\nCorollary 1. For an X-captured set C of a state S, S \u2261 S + CX .\nProof. By Theorem 4 and Theorem 2. \u2293\u2294\nTheorem 5. For a player X and a position P with uncolored dead cell d, (P + dX) X \u2265X P X . A move to a dead cell is at least as good as any other move.\nProof. Coloring a dead cell is equivalent to opponent-coloring the cell. So this theorem follows by Theorem 3. \u2293\u2294\nTheorem 6. For a position P with uncolored cells c, k with c dead in P + kX , (P + cX) X \u2265X (P + kX) X . Prefer victim to killer.\nProof. (P + kX) X \u2261 (P + kX + cX) X \u2265X (P + cX) X . \u2293\u2294\nTheorem 7. For a position P with uncolored cells c, k with c dead in P + k X , (P + cX) X \u2265X (P + kX) X . Prefer vulnerable to opponent killer.\nProof. Assume k is a winning move for X from PX , i.e. assume X wins S = (P + kX) X . Consider any such winning strategy \u03c0. We want to show c is also a winning move for X from PX , i.e. that X wins S \u2032 = (P + cX) X .\nTo obtain a winning X-strategy \u03c0\u2032 for S \u2032, modify \u03c0 by replacing c with k: whenever X (resp. X) colors c in \u03c0, X (X) colors k in \u03c0\u2032. In P , X-coloring k kills c: so in P , if some X-joinset J contains c, then J must also contain k. But a continuation of \u03c0\u2032 has both k and c X-colored if and only if the corresponding continuation of \u03c0 has them both X-colored. So, since X wins S following \u03c0, X wins S \u2032 following \u03c0\u2032. \u2293\u2294\nTheorem 8. For a position P with uncolored cell d and set C that is X-captured in (P + dx) X , for all c \u2208 C, (P + cx) X \u2265X (P + dx) X . Prefer capturee to capturer.\nProof. (P + cX) X \u2265X (P + CX + dX) X \u2261 (P + dX) X . \u2293\u2294\nOur next results concern mutual fillin, namely when there are two cells a,b such that X-coloring a X-captures b and X-coloring b X-captures a.\nTheorem 9. Let P be a position with sets A,B containing cells a, b respectively, such that A is X-captured in (P + b\nX ), and B is X-captured in (P + aX). Then\nP \u2261 P + aX + bX .\nProof. By if necessary relabelling {X, a, A} and {X, b, B}, we can assume X plays next. We claim that a X-dominates each cell in A+B. Before proving the claim, observe that it implies the theorem, since after X colors a, all of B is Y -captured, so Y can then color any cell of B, in particular, b.\nTo prove the claim, consider a strategy that X-captures A in P + b X . Now,\nfor all \u03b1 in A +B,\n(P + \u03b1X) X \u2264X (P + bX) X (Theorem 3 twice: remove \u03b1X , add bX)\n\u2261 (P + AX + bX) X (capture)\n\u2264X (P + aX +BX) X (Theorem 3, repeatedly for X and then X)\n\u2264X (P + aX) X (capture)\nSo the claim holds, and so the theorem. \u2293\u2294\nTheorem 10. Let c be any X-colored cell in a position P as described in Theorem 9. Then (P \u2212 c+ aX) X\u0304 \u2265X P X\u0304 . Prefer filled to mutual fillin creator.\nProof. Define b\u2032 to be the mate of b in the X-capture strategy for B in (P + aX).\nFinally, we mention join pairing strategies.\nTheorem 11. For a state S = PX with an X-join pairing \u03a0, X wins PX .\nProof. It suffices for X to follow the \u03a0 strategy. In each terminal state Z player X will have colored at most one cell of \u03a0 . From Z obtain Z \u2032 by X-coloring any uncolored cells: this will not change the winner. But in Z \u2032 at least one cell of each pair of \u03a0 is X-colored, and \u03a0 is an X-join pairing. So in Z \u2032 X \u2019s two sides are joined, so in Z X \u2019s two sides are joined. So X wins. \u2293\u2294"}, {"heading": "4 Early win detection", "text": "For a position P , a X-join-pairing strategy is a pairing strategy that joins X \u2019s two sides, and an X-pre-join-pairing strategy is an uncolored cell k together with an\nX-join-pairing strategy of P+kX ; here k is the key of this strategy. The key to our algorithm is to find opponent (pre)-join-pairing strategies. When it is clear from context that the strategies join a player\u2019s sides, we call these simply (pre)-pairing strategies.\nTheorem 12. Let P be a position with an X-join-pairing strategy. Then X wins PX and also PX .\nProof. This follows from Theorem 7 in [9]: X can force X to follow the X-joinpairing strategy.\nTheorem 13. Let P be a position with an X-pre-join-pairing strategy and with X = Last. Then X wins PX and also PX .\nProof. This follows from Theorem 6 in [9]. X can avoid playing the key of the pre-pairing strategy, forcing X to eventually play it."}, {"heading": "5 Solrex", "text": "Solrex is based on Solhex, the Hex solver of the Benzene code repository [3]. The challenge in developing Solrex was to identify and remove any Hex-specific, or Rex-unnecessary, aspects of Solhex \u2014 e.g. permanently inferior cells apply to Hex but not Rex \u2014 and then add any Rex-necessary pieces. E.g., it was necessary to replace the methods for finding Hex virtual connections with methods that find Rex (pre-) pairing strategies.\nSearch follows the Scalable Parallel Depth First variant of Proof Number Search, with the search focusing only on a limited number of children (as ranked by the usual electric resistance model) at one time [14].\nWhen reaching a leaf node, using a database of fillin and inferior cell patterns, we apply the theorems of \u00a73. We find dead cells by applying local patterns and\nby searching for any empty cells whose neighbourhood of empty cells, after stone groups have been removed and neighbouring empty cells contracted, is a clique. We iteratively fillin captured cells and even numbers of dead cells until no more fillin patterns are found. We also apply any inferior cell domination that comes from virtual connection decompositions [2,11].\nWe then look into the transposition table to see if the resulting state win/loss value is known, either because we previously solved, or because of color symmetry (a state which looks the same for each player is a win for Notlast). Then inferior cells are pruned. Then, using H-search [1] in which the or-rule is limited to combining only 2 semi-connections, we find (pre)-join-pairing strategies. Then, for X the player to move, we prune each key of every X-pre-join-strategy.\nH-search is augmented by observing that semi-connections that overlap on a captured set of endpoints do not conflict and so can be combined into a full connection [2,11]. Notice that augmented H-search is not complete: some pairing strategies (e.g. the mirror pairing strategy for the n\u00d7(n\u2212 1) board [6]) cannot be found in this way.\nFigure 7 shows the start of Solrex\u2019s solution of 1.Bd1, the only unsolved 4\u00d74 opening from [9]. First, inferior cells are found: White b1 captures a1,a2; a2 kills a1; b2 captures a2,a3; c2 leaves c1 dominated by b2; d2 captures d3,d4; etc. See Figure 6. Only 5 White moves remain: a1,c1,a4,b4,d4. After trying 2.Wa4, a White pre-join-pairing strategy is found, so this loses. Similarly, 2.Wb4 and 2.Wd4 also lose. Now 2 White moves remain: a1,a3. From 2.Wa1, search eventually reveals that 3.Bc1 wins (a2 also wins). From 2.Wc1, search reveals that 3.Ba1 wins (b2 and d4 also win). The deepest line in solving this position is 1.Bd1 2.Wc1 3.Bd4 4.Wc4 5.Bb2 6.Wa3 7.Ba4 8.Wb4."}, {"heading": "6 Experiments", "text": "We ran our experiments on Torrington, a quad-core i7-860 2.8GHz CPU with hyper-threading, so 8 pseudo-cores. For 5\u00d75 Rex, our test suite is all 24 replies\nto opening in the acute corner:1 this takes Solrex 13.2s. For 6\u00d76 Rex, our test suite is all 18 (up to symmetry) 1-move opening states: this takes Solrex 25900s. To measure speedup, we also ran the 18 1-move 6\u00d76 openings on a single thread, taking 134635s.\nTo show the impact of Solrex\u2019s various features, we ran a features knockout test on the 5\u00d75 test suite. For features which showed negligible or negative contribution, we ran a further knockout test on the hardest 6\u00d76 position, 1.White[d2], color-symmetric to 1.Black[e3]. The principle variation for this hardest opening is shown in Figure 8. The results are shown below. Figure 9 shows all losing moves after the best opening move on 5\u00d75 (all opening 5\u00d75 moves lose), and all losing opening moves on 6\u00d76.\nFigure 10 shows three new Rex puzzles we discovered by using Solrex. The middle puzzle was the only previously unsolved 4\u00d74 position. The other two were found by using Solrex to search for positions with few winning moves.\n5\u00d75 knockout tests version time ratio\nall features on 1.0 (13.9s) no dead clique cutset .97 unaugmented H-search .99\nno mutual fillin 1.00 no color symmetry pruning 1.01\nno VC decomp 1.06 no dead fillin 1.07\nno resistance move ordering 1.62 no capture fillin 2.02\nno inferior pruning 2.30 no H-search 89.83\n6\u00d76 knockout test version time ratio\nall features on 1.0 (13646 s) unaugmented H-search 1.10\nno color symmetry pruning 1.13 no dead clique cutset 1.37\nno mutual fillin 1.44 no VC decomp 1.95\n1 All opening 5\u00d75 Rex moves lose, so we picked all possible replies to the presumably strongest opening move."}, {"heading": "7 Conclusions", "text": "All features listed in the knockout tests contributed significantly to shortening search time: the four features that contributed no improvement on 5\u00d75 boards all contributed significantly on 6\u00d76 boards. The effectiveness of these pruning methods \u2013 which exploit pruning via local patterns in a search space that grows exponentially with board size \u2014 explained by Henderson for Hex, is clearly also valid for Rex [11]:\nIn almost all cases, we see that feature contributions improved with board size. We believe this is partly because the computational complexity of most of our algorithmic improvements is polynomial in the board size, while the corresponding increase in search space pruning grows exponentially. Furthermore, as the average game length increases, more weak moves are no longer immediately losing nor easily detectable via previous methods, and so these features become more likely to save significant search time.\nOf these features, by far the most critical was H-search, which yielded a time ratio of about 90 on 5\u00d75 Rex when omitted. The enormous time savings resulting from H-search is presumably because our general search method does not learn\nto recognize the redundant transpositions that correspond to the discovery of a (pre-) pairing strategy. So H-search avoids some combinatorial explosion.\nSolrex takes about 7 hours to solve all 18 (up to symmetry) 6\u00d76 boardstates; by contrast, Solhex takes only 301 hours to solve all 32 (up to symmetry) 8\u00d78 boardstates [12]. So why is Solhex faster than Solrex?\nOne reason is because Hex games tend to be shorter than Rex games: in a balanced Rex game, the loser can often force the winner to play until the board is nearly full. Another reason is there are Hex-specific pruning features that do not apply to Rex: for example, the only easily-found virtual connections for Rex that we know of are pairing strategies, and there seem to be far fewer of these than there are easily-found virtual connections in Hex. Also, in Hex, if the opponent can on the next move create more than one winning virtual connection, then the player must make a move which interferes with each such connection or lose the game; we know of no analogous property for Rex.\nThe general approach of Solhex worked well for Solrex, so this approach might work for other games, for example connection games such as Havannah or Twixt.\nSolutions to puzzles. Evans\u2019 puzzle: b1 (unique). Three new puzzles: Left: a2 (unique). Middle: Black wins; best move for White is a1, which leaves Black with only 2 winning replies (a2, c1); all other White moves leave Black with at least 3 winning replies (e.g. c1 leaves a1, b2, d4). Right: e3 (unique).\nAcknowledgments. We thank Jakub Pawlewicz for helpful comments."}], "references": [{"title": "The game of Hex: An automatic theorem proving approach to game programming", "author": ["Vadim V. Anshelevich"], "venue": "In AAAI/IAAI,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2000}, {"title": "Solving Hex: Beyond humans", "author": ["Broderick Arneson", "Ryan B. Hayward", "Philip Henderson"], "venue": "Computers and Games 2010,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "A winning opening in reverse Hex", "author": ["Ronald J. Evans"], "venue": "Journal of Recreational Mathematics,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1974}, {"title": "Mathematical games: Concerning the game of hex, which may be played on the tiles of the bathroom floor", "author": ["Martin Gardner"], "venue": "Scientific American,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1957}, {"title": "Mathematical games: Four mathematical diversions involving concepts of topology", "author": ["Martin Gardner"], "venue": "Scientific American,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1958}, {"title": "Mathematical games: Games of strategy for two players: star nim, meander, dodgem, and rex", "author": ["Martin Gardner"], "venue": "Scientific American,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1975}, {"title": "Hexaflexagons and Other Mathematical Diversions: The First Scientific American Book of Puzzles and Games, chapter 8, pages 73\u201383", "author": ["Martin Gardner"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1988}, {"title": "How to play reverse hex", "author": ["Ryan B. Hayward", "Bjarne Toft", "Philip Henderson"], "venue": "Discrete Mathematics,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "Vil de laere Polygon? Politiken, December 1942", "author": ["Piet Hein"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1942}, {"title": "Playing and solving Hex", "author": ["Philip Henderson"], "venue": "PhD thesis, UAlberta,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2010}, {"title": "Solving 8x8 Hex", "author": ["Philip Henderson", "Broderick Arneson", "Ryan B. Hayward"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2009}, {"title": "The Mathemagician and Pied Puzzler: A Collection in Tribute to Martin Gardner, editors", "author": ["Jeffrey Lagarias", "Daniel Sleator"], "venue": "Elwyn Berlekamp and Tom Rodgers,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1999}, {"title": "Scalable parallel dfpn search", "author": ["Jakub Pawlewicz", "Ryan B. Hayward"], "venue": "In Computer and Games, Springer LNCS", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2013}], "referenceMentions": [{"referenceID": 8, "context": "In 1942 Piet Hein invented the two-player board game now called Hex [10].", "startOffset": 68, "endOffset": 72}, {"referenceID": 3, "context": "In his 1957 Scientific American Mathematical Games column, Concerning the game of Hex, which may be played on the tiles of the bathroom floor, Martin Gardner mentions the mis\u00e8re version of Hex known as Reverse Hex, or Rex, or Mis\u00e9re Hex: whoever joins their two sides loses [5].", "startOffset": 274, "endOffset": 277}, {"referenceID": 5, "context": "[7]", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "when n is even (odd) [5].", "startOffset": 21, "endOffset": 24}, {"referenceID": 11, "context": "Lagarias and Sleator further showed that, for all n, each player has a strategy that can avoid defeat until the board is completely covered [13].", "startOffset": 140, "endOffset": 144}, {"referenceID": 2, "context": "Evans showed that for n even, opening in an acute corner wins [4].", "startOffset": 62, "endOffset": 65}, {"referenceID": 7, "context": "further showed that, for n even and at least 4, opening in a cell that touches an acute corner cell and one\u2019s own side also wins [9].", "startOffset": 129, "endOffset": 132}, {"referenceID": 5, "context": "[7,8].", "startOffset": 0, "endOffset": 5}, {"referenceID": 6, "context": "[7,8].", "startOffset": 0, "endOffset": 5}, {"referenceID": 7, "context": "explained how to find winning strategies for all but one (up to symmetry) opening move on the 4\u00d74 board [9].", "startOffset": 104, "endOffset": 107}, {"referenceID": 12, "context": "So, Solrex searches the minimax space of gamestates using Scalable Parallel Depth-First Proof Number Search, the enhanced parallel version by Pawlewicz and Hayward [14] of Focussed Depth-First Proof Number Search of Arneson, Hayward, and Henderson [2].", "startOffset": 164, "endOffset": 168}, {"referenceID": 1, "context": "So, Solrex searches the minimax space of gamestates using Scalable Parallel Depth-First Proof Number Search, the enhanced parallel version by Pawlewicz and Hayward [14] of Focussed Depth-First Proof Number Search of Arneson, Hayward, and Henderson [2].", "startOffset": 248, "endOffset": 251}, {"referenceID": 7, "context": "This follows from Theorem 7 in [9]: X can force X to follow the X-joinpairing strategy.", "startOffset": 31, "endOffset": 34}, {"referenceID": 7, "context": "This follows from Theorem 6 in [9].", "startOffset": 31, "endOffset": 34}, {"referenceID": 12, "context": "Search follows the Scalable Parallel Depth First variant of Proof Number Search, with the search focusing only on a limited number of children (as ranked by the usual electric resistance model) at one time [14].", "startOffset": 206, "endOffset": 210}, {"referenceID": 1, "context": "We also apply any inferior cell domination that comes from virtual connection decompositions [2,11].", "startOffset": 93, "endOffset": 99}, {"referenceID": 9, "context": "We also apply any inferior cell domination that comes from virtual connection decompositions [2,11].", "startOffset": 93, "endOffset": 99}, {"referenceID": 0, "context": "Then, using H-search [1] in which the or-rule is limited to combining only 2 semi-connections, we find (pre)-join-pairing strategies.", "startOffset": 21, "endOffset": 24}, {"referenceID": 1, "context": "H-search is augmented by observing that semi-connections that overlap on a captured set of endpoints do not conflict and so can be combined into a full connection [2,11].", "startOffset": 163, "endOffset": 169}, {"referenceID": 9, "context": "H-search is augmented by observing that semi-connections that overlap on a captured set of endpoints do not conflict and so can be combined into a full connection [2,11].", "startOffset": 163, "endOffset": 169}, {"referenceID": 4, "context": "the mirror pairing strategy for the n\u00d7(n\u2212 1) board [6]) cannot be found in this way.", "startOffset": 51, "endOffset": 54}, {"referenceID": 7, "context": "Bd1, the only unsolved 4\u00d74 opening from [9].", "startOffset": 40, "endOffset": 43}, {"referenceID": 9, "context": "The effectiveness of these pruning methods \u2013 which exploit pruning via local patterns in a search space that grows exponentially with board size \u2014 explained by Henderson for Hex, is clearly also valid for Rex [11]:", "startOffset": 209, "endOffset": 213}, {"referenceID": 10, "context": "Solrex takes about 7 hours to solve all 18 (up to symmetry) 6\u00d76 boardstates; by contrast, Solhex takes only 301 hours to solve all 32 (up to symmetry) 8\u00d78 boardstates [12].", "startOffset": 167, "endOffset": 171}], "year": 2017, "abstractText": "We present Solrex, an automated solver for the game of Reverse Hex. Reverse Hex, also known as Rex, or Mis\u00e8re Hex, is the variant of the game of Hex in which the player who joins her two sides loses the game. Solrex performs a mini-max search of the state space using Scalable Parallel Depth First Proof Number Search, enhanced by the pruning of inferior moves and the early detection of certain winning strategies. Solrex is implemented on the same code base as the Hex program Solver, and can solve arbitrary positions on board sizes up to 6\u00d76, with the hardest position taking less than four hours on four threads.", "creator": "LaTeX with hyperref package"}}}