{"id": "1707.06690", "review": {"conference": "EMNLP", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Jul-2017", "title": "DeepPath: A Reinforcement Learning Method for Knowledge Graph Reasoning", "abstract": "we study the additional problem of enhancing learning to reason in large scale relational knowledge graphs ( kgs ). a more specifically, we describe a novel reinforcement learning framework for learning multi - hop relational paths : we use a policy - based programming agent with weak continuous states networks based on knowledge graph embeddings, which reasons in a kg vector space by freely sampling the most promising relation to extend after its path. in contrast to prior work, our approach includes a reward function that takes whole the accuracy, diversity, and efficiency into consideration. shown experimentally, we show that our proposed method outperforms a path - ranking coefficient based algorithm graph and knowledge graph embedding methods on freebase and never - ending language learning datasets.", "histories": [["v1", "Thu, 20 Jul 2017 19:39:23 GMT  (215kb,D)", "http://arxiv.org/abs/1707.06690v1", null]], "reviews": [], "SUBJECTS": "cs.CL cs.AI", "authors": ["wenhan xiong", "thien hoang", "william yang wang"], "accepted": true, "id": "1707.06690"}, "pdf": {"name": "1707.06690.pdf", "metadata": {"source": "CRF", "title": "DeepPath: A Reinforcement Learning Method for Knowledge Graph Reasoning", "authors": ["Wenhan Xiong", "Thien Hoang", "William Yang Wang"], "emails": ["xwhan@cs.ucsb.edu,", "william@cs.ucsb.edu,", "thienhoang@umail.ucsb.edu"], "sections": [{"heading": "1 Introduction", "text": "In recent years, deep learning techniques have obtained many state-of-the-art results in various classification and recognition problems (Krizhevsky et al., 2012; Hinton et al., 2012; Kim, 2014). However, complex natural language processing problems often require multiple inter-related decisions, and empowering deep learning models with the ability of learning to reason is still a challenging issue. To handle complex queries where there are no obvious answers, intelligent machines must be able to reason with existing resources, and learn to infer an unknown answer.\nMore specifically, we situate our study in the context of multi-hop reasoning, which is the task of learning explicit inference formulas, given a large KG. For example, if the KG includes the\n1Code and the NELL dataset are available at https:// github.com/xwhan/DeepPath.\nbeliefs such as Neymar plays for Barcelona, and Barcelona are in the La Liga league, then machines should be able to learn the following formula: playerPlaysForTeam(P,T) \u2227 teamPlaysInLeague(T,L) \u21d2 playerPlaysInLeague(P,L). In the testing time, by plugging in the learned formulas, the system should be able to automatically infer the missing link between a pair of entities. This kind of reasoning machine will potentially serve as an essential components of complex QA systems.\nIn recent years, the Path-Ranking Algorithm (PRA) (Lao et al., 2010, 2011a) emerges as a promising method for learning inference paths in large KGs. PRA uses a random-walk with restarts based inference mechanism to perform multiple bounded depth-first search processes to find relational paths. Coupled with elastic-net based learning, PRA then picks more plausible paths using supervised learning. However, PRA operates in a fully discrete space, which makes it difficult to evaluate and compare similar entities and relations in a KG.\nIn this work, we propose a novel approach for controllable multi-hop reasoning: we frame the path learning process as reinforcement learning (RL). In contrast to PRA, we use translationbased knowledge based embedding method (Bordes et al., 2013) to encode the continuous state of our RL agent, which reasons in the vector space environment of the knowledge graph. The agent takes incremental steps by sampling a relation to extend its path. To better guide the RL agent for learning relational paths, we use policy gradient training (Mnih et al., 2015) with a novel reward function that jointly encourages accuracy, diversity, and efficiency. Empirically, we show that our method outperforms PRA and embedding based methods on a Freebase and a Never-Ending Language Learning (Carlson et al., 2010a) dataset. ar X iv :1\n70 7.\n06 69\n0v 1\n[ cs\n.C L\n] 2\n0 Ju\nl 2 01\n7\nOur contributions are three-fold:\n\u2022 We are the first to consider reinforcement learning (RL) methods for learning relational paths in knowledge graphs;\n\u2022 Our learning method uses a complex reward function that considers accuracy, efficiency, and path diversity simultaneously, offering better control and more flexibility in the pathfinding process;\n\u2022 We show that our method can scale up to large scale knowledge graphs, outperforming PRA and KG embedding methods in two tasks.\nIn the next section, we outline related work in path-finding and embedding methods in KGs. We describe the proposed method in Section 3. We show experimental results in Section 4. Finally, we conclude in Section 5."}, {"heading": "2 Related Work", "text": "The Path-Ranking Algorithm (PRA) method (Lao et al., 2011b) is a primary path-finding approach that uses random walk with restart strategies for multi-hop reasoning. Gardner et al. (2013; 2014) propose a modification to PRA that computes feature similarity in the vector space. Wang and Cohen (2015) introduce a recursive random walk approach for integrating the background KG and text\u2014the method performs structure learning of logic programs and information extraction from text at the same time. A potential bottleneck for random walk inference is that supernodes connecting to large amount of formulas will create huge fan-out areas that significantly slow down the inference and affect the accuracy.\nToutanova et al. (2015) provide a convolutional neural network solution to multi-hop reasoning. They build a CNN model based on lexicalized dependency paths, which suffers from the error propagation issue due to parse errors. Guu et al. (2015) uses KG embeddings to answer path queries. Zeng et al. (2014) described a CNN model for relational extraction, but it does not explicitly model the relational paths. Neelakantan et al. (2015) propose a recurrent neural networks model for modeling relational paths in knowledge base completion (KBC), but it trains too many separate models, and therefore it does not scale. Note that many of the recent KG reasoning methods (Neelakantan et al.,\n2015; Das et al., 2017) still rely on first learning the PRA paths, which only operates in a discrete space. Comparing to PRA, our method reasons in a continuous space, and by incorporating various criteria in the reward function, our reinforcement learning (RL) framework has better control and more flexibility over the path-finding process.\nNeural symbolic machine (Liang et al., 2016) is a more recent work on KG reasoning, which also applies reinforcement learning but has a different flavor from our work. NSM learns to compose programs that can find answers to natural language questions, while our RL model tries to add new facts to knowledge graph (KG) by reasoning on existing KG triples. In order to get answers, NSM learns to generate a sequence of actions that can be combined as a executable program. The action space in NSM is a set of predefined tokens. In our framework, the goal is to find reasoning paths, thus the action space is relation space in the KG. A similar framework (Johnson et al., 2017) has also been applied to visual reasoning tasks."}, {"heading": "3 Methodology", "text": "In this section, we describe in detail our RL-based framework for multi-hop relation reasoning. The specific task of relation reasoning is to find reliable predictive paths between entity pairs. We formulate the path finding problem as a sequential decision making problem which can be solved with a RL agent. We first describe the environment and the policy-based RL agent. By interacting with the environment designed around the KG, the agent learns to pick the promising reasoning paths. Then we describe the training procedure of our RL model. After that, we describe an efficient path-constrained search algorithm for relation reasoning with the paths found by the RL agent."}, {"heading": "3.1 Reinforcement Learning for Relation Reasoning", "text": "The RL system consists of two parts (see Figure 1). The first part is the external environment E which specifies the dynamics of the interaction between the agent and the KG. This environment is modeled as a Markov devision process (MDP). A tuple < S,A,P,R > is defined to represent the MDP, where S is the continuous state space, A = {a1, a2, ..., an} is the set of all available actions, P(St+1 = s\n\u2032 |St = s,At = a) is the transition probability matrix, and R(s, a) is the reward\nfunction of every (s, a) pairs.\nThe second part of the system, the RL agent, is represented as a policy network \u03c0\u03b8(s, a) = p(a|s; \u03b8) which maps the state vector to a stochastic policy. The neural network parameters \u03b8 are updated using stochastic gradient descent. Compared to Deep Q Network (DQN) (Mnih et al., 2013), policy-based RL methods turn out to be more appropriate for our knowledge graph scenario. One reason is that for the path finding problem in KG, the action space can be very large due to complexity of the relation graph. This can lead to poor convergence properties for DQN. Besides, instead of learning a greedy policy which is common in value-based methods like DQN, the policy network is able to learn a stochastic policy which prevent the agent from getting stuck at an intermediate state. Before we describe the structure of our policy network, we first describe the components (actions, states, rewards) of the RL environment.\nActions Given the entity pairs (es, et) with relation r, we want the agent to find the most informative paths linking these entity pairs. Beginning with the source entity es, the agent use the policy network to pick the most promising\nrelation to extend its path at each step until it reaches the target entity et. To keep the output dimension of the policy network consistent, the action space is defined as all the relations in the KG.\nStates The entities and relations in a KG are naturally discrete atomic symbols. Since existing practical KGs like Freebase (Bollacker et al., 2008) and NELL (Carlson et al., 2010b) often have huge amounts of triples. It is impossible to directly model all the symbolic atoms in states. To capture the semantic information of these symbols, we use translation-based embeddings such as TransE (Bordes et al., 2013) and TransH (Wang et al., 2014) to represent the entities and relations. These embeddings map all the symbols to a lowdimensional vector space. In our framework, each state captures the agent\u2019s position in the KG. After taking an action, the agent will move from one entity to another. These two are linked by the action (relation) just taken by the agent. The state vector at step t is given as follows:\nst = (et, etarget \u2212 et)\nwhere et denotes the embeddings of the current entity node and etarget denotes the embeddings of\nthe target entity. At the initial state, et = esource. We do not incorporate the reasoning relation in the state, because the embedding of the reasoning relation remain constant during path finding, which is not helpful in training. However, we find out that by training the RL agent using a set of positive samples for one particular relation, the agent can successfully discover the relation semantics.\nRewards There are a few factors that contribute to the quality of the paths found by the RL agent. To encourage the agent to find predictive paths, our reward functions include the following scoring criteria: Global accuracy: For our environment settings, the number of actions that can be taken by the agent can be very large. In other words, there are much more incorrect sequential decisions than the correct ones. The number of these incorrect decision sequences can increase exponentially with the length of the path. In view of this challenge, the first reward function we add to the RL model is defined as follows:\nrGLOBAL = { +1, if the path reaches etarget \u22121, otherwise\nthe agent is given an offline positive reward +1 if it reaches the target after a sequence of actions. Path efficiency: For the relation reasoning task, we observe that short paths tend to provide more reliable reasoning evidence than longer paths. Shorter chains of relations can also improve the efficiency of the reasoning by limiting the length of the RL\u2019s interactions with the environment. The efficiency reward is defined as follows:\nrEFFICIENCY = 1\nlength(p)\nwhere path p is defined as a sequence of relations r1 \u2192 r2 \u2192 ...\u2192 rn. Path diversity: We train the agent to find paths using positive samples for each relation. These training sample (esource, etarget) have similar state representations in the vector space. The agent tends to find paths with similar syntax and semantics. These paths often contains redundant information since some of them may be correlated. To encourage the agent to find diverse paths, we define a diversity reward function using the cosine similarity\nbetween the current path and the existing ones:\nrDIVERSITY = \u2212 1\n|F | |F |\u2211 i=1 cos(p,pi)\nwhere p = \u2211n\ni=1 ri represents the path embedding for the relation chain r1 \u2192 r2 \u2192 ...\u2192 rn. Policy Network We use a fully-connected neural network to parameterize the policy function \u03c0(s; \u03b8) that maps the state vector s to a probability distribution over all possible actions. The neural network consists of two hidden layers, each followed by a rectifier nonlinearity layer (ReLU). The output layer is normalized using a softmax function (see Figure 1)."}, {"heading": "3.2 Training Pipeline", "text": "In practice, one big challenge of KG reasoning is that the relation set can be quite large. For a typical KG, the RL agent is often faced with hundreds (thousands) of possible actions. In other words, the output layer of the policy network often has a large dimension. Due to the complexity of the relation graph and the large action space, if we directly train the RL model by trial and errors, which is typical for RL algorithms, the RL model will show very poor convergence properties. After a long-time training, the agents fails to find any valuable path. To tackle this problem, we start our training with a supervised policy which is inspired by the imitation learning pipeline used by AlphaGo (Silver et al., 2016). In the Go game, the player is facing nearly 250 possible legal moves at each step. Directly training the agent to pick actions from the original action space can be a difficult task. AlphaGo first train a supervised policy network using experts moves. In our case, the supervised policy is trained with a randomized breadth-first search (BFS).\nSupervised Policy Learning For each relation, we use a subset of all the positive samples (entity pairs) to learn the supervised policy. For each positive sample (esource, etarget), a two-side BFS is conducted to find same correct paths between the entities. For each path p with a sequence of relations r1 \u2192 r2 \u2192 ... \u2192 rn, we update the parameters \u03b8 to maximize the expected cumulative reward using Monte-Carlo Policy Gradient (RE-\nINFORCE) (Williams, 1992): J(\u03b8) = Ea\u223c\u03c0(a|s;\u03b8)( \u2211 t Rst,at)\n= \u2211 t \u2211 a\u2208A \u03c0(a|st; \u03b8)Rst,at (1)\nwhere J(\u03b8) is the expected total rewards for one episode. For supervised learning, we give a reward of +1 for each step of a successful episode. By plugging in the paths found by the BFS, the approximated gradient used to update the policy network is shown below:\n\u2207\u03b8J(\u03b8) = \u2211 t \u2211 a\u2208A \u03c0(a|st; \u03b8)\u2207\u03b8 log \u03c0(a|st; \u03b8)\n\u2248 \u2207\u03b8 \u2211 t log \u03c0(a = rt|st; \u03b8) (2)\nwhere rt belongs to the path p. However, the vanilla BFS is a biased search algorithm which prefers short paths. When plugging in these biased paths, it becomes difficult for the agent to find longer paths which may potentially be useful. We want the paths to be controlled only by the defined reward functions. To prevent the biased search, we adopt a simple trick to add some random mechanisms to the BFS. Instead of directly searching the path between esource and etarget, we randomly pick a intermediate node einter and then conduct two BFS between (esource, einter) and (einter, etarget). The concatenated paths are used to train the agent. The supervised learning saves the agent great efforts learning from failed actions. With the learned experience, we then train the agent to find desirable paths. Retraining with Rewards To find the reasoning paths controlled by the reward functions, we use reward functions to retrain the supervised policy network. For each relation, the reasoning with one entity pair is treated as one episode. Starting with the source node esource, the agent picks a relation according to the stochastic policy \u03c0(a|s), which is a probability distribution over all relations, to extend its reasoning path. This relation link may lead to a new entity, or it may lead to nothing. These failed steps will cause the agent to receive negative rewards. The agent will stay at the same state after these failed steps. Since the agent is following a stochastic policy, the agent will not get stuck by repeating a wrong step. To improve the training efficiency, we limit the episode length with an upper\nAlgorithm 1: Retraining Procedure with reward functions\n1 Restore parameters \u03b8 from supervised policy; 2 for episode\u2190 1 to N do 3 Initialize state vector st \u2190 s0 4 Initialize episode length steps\u2190 0 5 while num steps < max length do 6 Randomly sample action a \u223c \u03c0(a|st) 7 Observe rewardRt, next state st+1 // if the step fails 8 ifRt = \u22121 then 9 Save < st, a > toMneg\n10 if success or steps = max length then 11 break 12 Increment num steps\n// penalize failed steps 13 Update \u03b8 using\ng \u221d \u2207\u03b8 \u2211 Mneg log \u03c0(a = rt|st; \u03b8)(\u22121)\nif success then 14 Rtotal \u2190 \u03bb1rGLOBAL + \u03bb2rEFFICIENCY + \u03bb3rDIVERSITY 15 Update \u03b8 using\ng \u221d \u2207\u03b8 \u2211 t log \u03c0(a = rt|st; \u03b8)Rtotal\nboundmax length. The episode ends if the agent fails to reach the target entity within max length steps. After each episode, the policy network is updated using the following gradient:\n\u2207\u03b8J(\u03b8) = \u2207\u03b8 \u2211 t log \u03c0(a = rt|st; \u03b8)Rtotal (3)\nwhere Rtotal is the linear combination of the defined reward functions. The detail of the retrain process is shown in Algorithm 1. In practice, \u03b8 is updated using the Adam Optimizer (Kingma and Ba, 2014) with L2 regularization."}, {"heading": "3.3 Bi-directional Path-constrained Search", "text": "Given an entity pair, the reasoning paths learned by the RL agent can be used as logical formulas to predict the relation link. Each formula is verified using a bi-directional search. In a typical KG, one entity node can be linked to a large number of neighbors with the same relation link. A simple example is the relation personNationality\u22121, which denotes the inverse of personNationality. Following this link, the entity United States can reach numerous neighboring entities. If the for-\nAlgorithm 2: Bi-directional search for path verification\n1 Given a reasoning path p : r1 \u2192 r2 \u2192 ...\u2192 rn 2 for (ei, ej) in test set D do 3 start\u2190 0; end\u2190 n 4 left\u2190 \u2205; right\u2190 \u2205 5 while start < end do 6 leftEx\u2190 \u2205; rightEx\u2190 \u2205 7 if len(left) < len(right) then 8 Extend path on the left side 9 Add connected nodes to leftEx\n10 left\u2190 leftEx 11 else 12 Extend path on the right side 13 Add connected nodes to rightEx 14 right\u2190 rightEx\n15 if left \u2229 right 6= \u2205 then 16 return True 17 else 18 return False\nmula consists of such links, the number of intermediate entities can exponentially increase as we follow the reasoning formula. However, we observe that for these formulas, if we verify the formula from the inverse direction. The number of intermediate nodes can be tremendously decreased. Algorithm 2 shows a detailed description of the proposed bi-directional search."}, {"heading": "4 Experiments", "text": "To evaluate the reasoning formulas found by our RL agent, we explore two standard KG reasoning tasks: link prediction (predicting target entities) and fact prediction (predicting whether an unknown fact holds or not). We compare our method with both path-based methods and embedding based methods. After that, we further analyze the reasoning paths found by our RL agent. These highly predictive paths validate the effectiveness of the reward functions. Finally, we conduct a experiment to investigate the effect of the supervised learning procedure."}, {"heading": "4.1 Dataset and Settings", "text": "Table 1 shows the statistics of the two datasets we conduct our experiments on. Both of them\nare subsets of larger datasets. The triples in FB15K-237 (Toutanova et al., 2015) are sampled from FB15K (Bordes et al., 2013) with redundant relations removed. We perform the reasoning tasks on 20 relations which have enough reasoning paths. These tasks consists of relations from different domains like Sports, People, Locations, Film, etc. Besides, we present a new NELL subset that is suitable for multi-hop reasoning from the 995th iteration of the NELL system. We first remove the triples with relation generalizations or haswikipediaurl. These two relations appear more than 2M times in the NELL dataset, but they have no reasoning values. After this step, we only select the triples with Top-200 relations. To facilitate path finding, we also add the inverse triples. For each triple (h, r, t), we append (t, r\u22121, h) to the datasets. With these inverse triples, the agent is able to step backward in the KG.\nFor each reasoning task ri, we remove all the triples with ri or r\u22121i from the KG. These removed triples are split into train and test samples. For the link prediction task, each h in the test triples {(h, r, t)} is considered as one query. A set of candidate target entities are ranked using different methods. For fact prediction, the true test triples are ranked with some generated false triples."}, {"heading": "4.2 Baselines and Implementation Details", "text": "Most KG reasoning methods are based on either path formulas or KG embeddings. we explore methods from both of these two classes in our experiments. For path based methods, we compare our RL model with the PRA (Lao et al., 2011a) algorithm, which has been used in a couple of reasoning methods (Gardner et al., 2013; Neelakantan et al., 2015). PRA is a data-driven algorithm using random walks (RW) to find paths and obtain path features. For embedding based methods, we evaluate several state-of-the-art embeddings designed for knowledge base completion, such as TransE (Bordes et al., 2013), TransH (Wang et al., 2014), TransR (Lin et al., 2015) and TransD (Ji et al., 2015) .\nThe implementation of PRA is based on the\ncode released by (Lao et al., 2011a). We use the TopK negative mode to generate negative samples for both train and test samples. For each positive samples, there are approximately 10 corresponding negative samples. Each negative sample is generated by replacing the true target entity t with a faked one t \u2032 in each triple (h, r, t). These positive and negative test pairs generated by PRA make up the test set for all methods evaluated in this paper. For TransE,R,H,D, we learn a separate embedding matrix for each reasoning task using the positive training entity pairs. All these embeddings are trained for 1,000 epochs. 2\nOur RL model make use of TransE to get the continuous representation of the entities and relations. We use the same dimension as TransE, R to embed the entities. Specifically, the state vector we use has a dimension of 200, which is also the input size of the policy network. To reason using the path formulas, we adopt a similar linear regression approach as in PRA to re-rank the paths. However, instead of using the random walk probabilities as path features, which can be computationally expensive, we simply use binary path features obtained by the bi-directional search. We observe that with only a few mined path formulas, our method can achieve better results than PRA\u2019s data-driven approach."}, {"heading": "4.3 Results", "text": ""}, {"heading": "4.3.1 Quantitative Results", "text": "Link Prediction This task is to rank the target entities given a query entity. Table 2 shows the mean average precision (MAP) results on two datasets.\n2The implementation we used can be found at https: //github.com/thunlp/Fast-TransX"}, {"heading": "RL 0.311 0.493", "text": "Since path-based methods generally work better than embedding methods for this task, we do not include the other two embedding baselines in this table. Instead, we spare the room to show the detailed results on each relation reasoning task.\nFor the overall MAP shown in the last row of the table, our approach significantly outperforms both the path-based method and embedding methods on two datasets, which validates the strong reasoning ability of our RL model. For most relations, since the embedding methods fail to use the path infor-\nmation in the KG, they generally perform worse than our RL model or PRA. However, when there are not enough paths between entities, our model and PRA can give poor results. For example, for the relation filmWrittenBy, our RL model only finds 4 unique reasoning paths, which means there is actually not enough reasoning evidence existing in the KG. Another observation is that we always get better performance on the NELL dataset. By analyzing the paths found from the KGs, we believe the potential reason is that the NELL dataset has more short paths than FB15K-237 and some of them are simply synonyms of the reasoning relations. Fact Prediction Instead of ranking the target entities, this task directly ranks all the positive and negative samples for a particular relation. The PRA is not included as a baseline here, since the PRA code only gives a target entity ranking for each query node instead of a ranking of all triples. Table 3 shows the overall results of all the methods. Our RL model gets even better results on this task. We also observe that the RL model beats all the embedding baselines on most reasoning tasks."}, {"heading": "4.3.2 Qualitative Analysis of Reasoning Paths", "text": "To analyze the properties of reasoning paths, we show a few reasoning paths found by the agent in Table 5. To illustrate the effect of the efficiency reward function, we show the path length distributions in Figure 2. To interpret these paths, take the personNationality relation for example, the first reasoning path indicates that if we know facts placeOfBirth(x,y) and locationContains(z,y) then it is highly possible that person x has nationality z. These short but predictive paths indicate the effectiveness of the RL model. Another important observation is that our model use much\nfewer reasoning paths than PRA, which indicates that our model can actually extract the most reliable reasoning evidence from KG. Table 4 shows some comparisons about the number of reasoning paths. We can see that, with the pre-defined reward functions, the RL agent is capable of picking the strong ones and filter out similar or irrelevant ones."}, {"heading": "4.3.3 Effect of Supervised Learning", "text": "As mentioned in Section 3.2, one major challenge for applying RL to KG reasoning is the large action space. We address this issue by applying supervised learning before the reward retraining step. To show the effect of the supervised training, we evaluate the agent\u2019s success ratio of reaching the target within 10 steps (succ10) after different number of training episodes. For each training episode, one pair of entities (esource, etarget) in the train set is used to find paths. All the correct paths linking the entities will get a +1 global reward. We then plug in some true paths for training. The succ10 is calculated on a held-out test set that consists of 100 entity pairs. For the NELL995 dataset, since we have 200 unique relations, the dimension of the action space will be 400 after we add the backward actions. This means that random walks will get very low succ10 since there may be nearly 40010 invalid paths. Figure 3 shows the succ10 during training. We see that even the agent has not seen the entity before, it can actually pick the promising relation to extend its path. This also validates the effectiveness of our state representations.\n3The confidence band is generated using 50 different runs."}, {"heading": "5 Conclusion and Future Work", "text": "In this paper, we propose a reinforcement learning framework to improve the performance of relation reasoning in KGs. Specifically, we train a RL agent to find reasoning paths in the knowledge base. Unlike previous path finding models that are based on random walks, the RL model allows us to control the properties of the found paths. These effective paths can also be used as an alternative to PRA in many path-based reasoning methods. For two standard reasoning tasks, using the RL paths as reasoning formulas, our approach generally outperforms two classes of baselines.\nFor future studies, we plan to investigate the possibility of incorporating adversarial learning (Goodfellow et al., 2014) to give better rewards than the human-defined reward functions used in this work. Instead of designing rewards according to path characteristics, a discriminative model can be trained to give rewards. Also, to address the problematic scenario when the KG does not have enough reasoning paths, we are interested in applying our RL framework to joint reasoning with KG triples and text mentions."}], "references": [{"title": "Freebase: a collaboratively created graph database for structuring human knowledge", "author": ["Kurt Bollacker", "Colin Evans", "Praveen Paritosh", "Tim Sturge", "Jamie Taylor."], "venue": "Proceedings of the 2008 ACM SIGMOD international conference on Management", "citeRegEx": "Bollacker et al\\.,? 2008", "shortCiteRegEx": "Bollacker et al\\.", "year": 2008}, {"title": "Translating embeddings for modeling multirelational data", "author": ["Antoine Bordes", "Nicolas Usunier", "Alberto GarciaDuran", "Jason Weston", "Oksana Yakhnenko."], "venue": "Advances in neural information processing systems, pages 2787\u20132795.", "citeRegEx": "Bordes et al\\.,? 2013", "shortCiteRegEx": "Bordes et al\\.", "year": 2013}, {"title": "Toward an architecture for neverending language learning", "author": ["Andrew Carlson", "Justin Betteridge", "Bryan Kisiel", "Burr Settles", "Estevam R. Hruschka Jr.", "Tom M. Mitchell."], "venue": "AAAI.", "citeRegEx": "Carlson et al\\.,? 2010a", "shortCiteRegEx": "Carlson et al\\.", "year": 2010}, {"title": "Toward an architecture for neverending language learning", "author": ["Andrew Carlson", "Justin Betteridge", "Bryan Kisiel", "Burr Settles", "Estevam R. Hruschka Jr.", "Tom M. Mitchell."], "venue": "Proceedings of the Twenty-Fourth Conference on Artificial Intelligence", "citeRegEx": "Carlson et al\\.,? 2010b", "shortCiteRegEx": "Carlson et al\\.", "year": 2010}, {"title": "Chains of reasoning over entities, relations, and text using recurrent neural networks", "author": ["Rajarshi Das", "Arvind Neelakantan", "David Belanger", "Andrew McCallum."], "venue": "EACL.", "citeRegEx": "Das et al\\.,? 2017", "shortCiteRegEx": "Das et al\\.", "year": 2017}, {"title": "Improving learning", "author": ["Matt Gardner", "Partha Pratim Talukdar", "Bryan Kisiel", "Tom M Mitchell"], "venue": null, "citeRegEx": "Gardner et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Gardner et al\\.", "year": 2013}, {"title": "Incorporating vector space similarity in random walk inference over knowledge bases", "author": ["Matt Gardner", "Partha Pratim Talukdar", "Jayant Krishnamurthy", "Tom Mitchell"], "venue": null, "citeRegEx": "Gardner et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Gardner et al\\.", "year": 2014}, {"title": "Generative adversarial nets", "author": ["Ian Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza", "Bing Xu", "David Warde-Farley", "Sherjil Ozair", "Aaron Courville", "Yoshua Bengio."], "venue": "Advances in Neural Information Processing Systems, pages 2672\u20132680.", "citeRegEx": "Goodfellow et al\\.,? 2014", "shortCiteRegEx": "Goodfellow et al\\.", "year": 2014}, {"title": "Traversing knowledge graphs in vector space", "author": ["Kelvin Guu", "John Miller", "Percy Liang."], "venue": "EMNLP.", "citeRegEx": "Guu et al\\.,? 2015", "shortCiteRegEx": "Guu et al\\.", "year": 2015}, {"title": "Deep neural networks for acoustic modeling in speech recognition: The shared", "author": ["Geoffrey Hinton", "Li Deng", "Dong Yu", "George E Dahl", "Abdel-rahman Mohamed", "Navdeep Jaitly", "Andrew Senior", "Vincent Vanhoucke", "Patrick Nguyen", "Tara N Sainath"], "venue": null, "citeRegEx": "Hinton et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2012}, {"title": "Knowledge graph embedding via dynamic mapping matrix", "author": ["Guoliang Ji", "Shizhu He", "Liheng Xu", "Kang Liu", "Jun Zhao."], "venue": "ACL (1), pages 687\u2013696.", "citeRegEx": "Ji et al\\.,? 2015", "shortCiteRegEx": "Ji et al\\.", "year": 2015}, {"title": "Inferring and executing programs for visual reasoning", "author": ["Justin Johnson", "Bharath Hariharan", "Laurens van der Maaten", "Judy Hoffman", "Li Fei-Fei", "C Lawrence Zitnick", "Ross Girshick."], "venue": "arXiv preprint arXiv:1705.03633.", "citeRegEx": "Johnson et al\\.,? 2017", "shortCiteRegEx": "Johnson et al\\.", "year": 2017}, {"title": "Convolutional neural networks for sentence classification", "author": ["Yoon Kim."], "venue": "arXiv preprint arXiv:1408.5882.", "citeRegEx": "Kim.,? 2014", "shortCiteRegEx": "Kim.", "year": 2014}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba."], "venue": "arXiv preprint arXiv:1412.6980.", "citeRegEx": "Kingma and Ba.,? 2014", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E Hinton."], "venue": "Advances in neural information processing systems, pages 1097\u20131105.", "citeRegEx": "Krizhevsky et al\\.,? 2012", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Random walk inference and learning in a large scale knowledge base", "author": ["Ni Lao", "Tom Mitchell", "William W Cohen."], "venue": "Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages 529\u2013539. Association for Computa-", "citeRegEx": "Lao et al\\.,? 2011a", "shortCiteRegEx": "Lao et al\\.", "year": 2011}, {"title": "Random walk inference and learning in a large scale knowledge base", "author": ["Ni Lao", "Tom M. Mitchell", "William W. Cohen."], "venue": "EMNLP, pages 529\u2013 539. ACL.", "citeRegEx": "Lao et al\\.,? 2011b", "shortCiteRegEx": "Lao et al\\.", "year": 2011}, {"title": "Efficient relational learning with hidden variable detection", "author": ["Ni Lao", "Jun Zhu", "Xinwang Liu", "Yandong Liu", "William W Cohen."], "venue": "NIPS, pages 1234\u20131242.", "citeRegEx": "Lao et al\\.,? 2010", "shortCiteRegEx": "Lao et al\\.", "year": 2010}, {"title": "Neural symbolic machines: Learning semantic parsers on freebase with weak supervision", "author": ["Chen Liang", "Jonathan Berant", "Quoc Le", "Kenneth D Forbus", "Ni Lao."], "venue": "arXiv preprint arXiv:1611.00020.", "citeRegEx": "Liang et al\\.,? 2016", "shortCiteRegEx": "Liang et al\\.", "year": 2016}, {"title": "Learning entity and relation embeddings for knowledge graph completion", "author": ["Yankai Lin", "Zhiyuan Liu", "Maosong Sun", "Yang Liu", "Xuan Zhu."], "venue": "AAAI, pages 2181\u20132187.", "citeRegEx": "Lin et al\\.,? 2015", "shortCiteRegEx": "Lin et al\\.", "year": 2015}, {"title": "Playing atari with deep reinforcement learning", "author": ["Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Alex Graves", "Ioannis Antonoglou", "Daan Wierstra", "Martin Riedmiller."], "venue": "arXiv preprint arXiv:1312.5602.", "citeRegEx": "Mnih et al\\.,? 2013", "shortCiteRegEx": "Mnih et al\\.", "year": 2013}, {"title": "Human-level control through deep reinforcement learning", "author": ["Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Andrei A Rusu", "Joel Veness", "Marc G Bellemare", "Alex Graves", "Martin Riedmiller", "Andreas K Fidjeland", "Georg Ostrovski"], "venue": null, "citeRegEx": "Mnih et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2015}, {"title": "Compositional vector space models for knowledge base completion", "author": ["Arvind Neelakantan", "Benjamin Roth", "Andrew McCallum."], "venue": "arXiv preprint arXiv:1504.06662.", "citeRegEx": "Neelakantan et al\\.,? 2015", "shortCiteRegEx": "Neelakantan et al\\.", "year": 2015}, {"title": "Mastering the game of go with deep neural networks and tree", "author": ["David Silver", "Aja Huang", "Chris J Maddison", "Arthur Guez", "Laurent Sifre", "George Van Den Driessche", "Julian Schrittwieser", "Ioannis Antonoglou", "Veda Panneershelvam", "Marc Lanctot"], "venue": null, "citeRegEx": "Silver et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Silver et al\\.", "year": 2016}, {"title": "Representing text for joint embedding of text and knowledge bases", "author": ["Kristina Toutanova", "Danqi Chen", "Patrick Pantel", "Hoifung Poon", "Pallavi Choudhury", "Michael Gamon."], "venue": "EMNLP, volume 15, pages 1499\u20131509. Citeseer.", "citeRegEx": "Toutanova et al\\.,? 2015", "shortCiteRegEx": "Toutanova et al\\.", "year": 2015}, {"title": "Joint information extraction and reasoning: A scalable statistical relational learning approach", "author": ["William Yang Wang", "William W Cohen."], "venue": "ACL.", "citeRegEx": "Wang and Cohen.,? 2015", "shortCiteRegEx": "Wang and Cohen.", "year": 2015}, {"title": "Knowledge graph embedding by translating on hyperplanes", "author": ["Zhen Wang", "Jianwen Zhang", "Jianlin Feng", "Zheng Chen."], "venue": "AAAI, pages 1112\u20131119. Citeseer.", "citeRegEx": "Wang et al\\.,? 2014", "shortCiteRegEx": "Wang et al\\.", "year": 2014}, {"title": "Simple statistical gradientfollowing algorithms for connectionist reinforcement learning", "author": ["Ronald J Williams."], "venue": "Machine learning, 8(3-4):229\u2013256.", "citeRegEx": "Williams.,? 1992", "shortCiteRegEx": "Williams.", "year": 1992}, {"title": "Relation classification via convolutional deep neural network", "author": ["Daojian Zeng", "Kang Liu", "Siwei Lai", "Guangyou Zhou", "Jun Zhao"], "venue": "In COLING,", "citeRegEx": "Zeng et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Zeng et al\\.", "year": 2014}], "referenceMentions": [{"referenceID": 14, "context": "In recent years, deep learning techniques have obtained many state-of-the-art results in various classification and recognition problems (Krizhevsky et al., 2012; Hinton et al., 2012; Kim, 2014).", "startOffset": 137, "endOffset": 194}, {"referenceID": 9, "context": "In recent years, deep learning techniques have obtained many state-of-the-art results in various classification and recognition problems (Krizhevsky et al., 2012; Hinton et al., 2012; Kim, 2014).", "startOffset": 137, "endOffset": 194}, {"referenceID": 12, "context": "In recent years, deep learning techniques have obtained many state-of-the-art results in various classification and recognition problems (Krizhevsky et al., 2012; Hinton et al., 2012; Kim, 2014).", "startOffset": 137, "endOffset": 194}, {"referenceID": 1, "context": "In contrast to PRA, we use translationbased knowledge based embedding method (Bordes et al., 2013) to encode the continuous state of our RL agent, which reasons in the vector space environment of the knowledge graph.", "startOffset": 77, "endOffset": 98}, {"referenceID": 21, "context": "To better guide the RL agent for learning relational paths, we use policy gradient training (Mnih et al., 2015) with a novel reward function that jointly encourages accuracy, diversity, and efficiency.", "startOffset": 92, "endOffset": 111}, {"referenceID": 2, "context": "Empirically, we show that our method outperforms PRA and embedding based methods on a Freebase and a Never-Ending Language Learning (Carlson et al., 2010a) dataset.", "startOffset": 132, "endOffset": 155}, {"referenceID": 16, "context": "The Path-Ranking Algorithm (PRA) method (Lao et al., 2011b) is a primary path-finding approach that uses random walk with restart strategies for multi-hop reasoning.", "startOffset": 40, "endOffset": 59}, {"referenceID": 22, "context": "Note that many of the recent KG reasoning methods (Neelakantan et al., 2015; Das et al., 2017) still rely on first learning the PRA paths, which only operates in a discrete space.", "startOffset": 50, "endOffset": 94}, {"referenceID": 4, "context": "Note that many of the recent KG reasoning methods (Neelakantan et al., 2015; Das et al., 2017) still rely on first learning the PRA paths, which only operates in a discrete space.", "startOffset": 50, "endOffset": 94}, {"referenceID": 4, "context": "Gardner et al. (2013; 2014) propose a modification to PRA that computes feature similarity in the vector space. Wang and Cohen (2015) introduce a recursive random walk approach for integrating the background KG and text\u2014the method performs structure learning of logic programs and information extraction from text at the same time.", "startOffset": 0, "endOffset": 134}, {"referenceID": 4, "context": "Gardner et al. (2013; 2014) propose a modification to PRA that computes feature similarity in the vector space. Wang and Cohen (2015) introduce a recursive random walk approach for integrating the background KG and text\u2014the method performs structure learning of logic programs and information extraction from text at the same time. A potential bottleneck for random walk inference is that supernodes connecting to large amount of formulas will create huge fan-out areas that significantly slow down the inference and affect the accuracy. Toutanova et al. (2015) provide a convolutional neural network solution to multi-hop reasoning.", "startOffset": 0, "endOffset": 562}, {"referenceID": 4, "context": "Gardner et al. (2013; 2014) propose a modification to PRA that computes feature similarity in the vector space. Wang and Cohen (2015) introduce a recursive random walk approach for integrating the background KG and text\u2014the method performs structure learning of logic programs and information extraction from text at the same time. A potential bottleneck for random walk inference is that supernodes connecting to large amount of formulas will create huge fan-out areas that significantly slow down the inference and affect the accuracy. Toutanova et al. (2015) provide a convolutional neural network solution to multi-hop reasoning. They build a CNN model based on lexicalized dependency paths, which suffers from the error propagation issue due to parse errors. Guu et al. (2015) uses KG embeddings to answer path queries.", "startOffset": 0, "endOffset": 782}, {"referenceID": 4, "context": "Gardner et al. (2013; 2014) propose a modification to PRA that computes feature similarity in the vector space. Wang and Cohen (2015) introduce a recursive random walk approach for integrating the background KG and text\u2014the method performs structure learning of logic programs and information extraction from text at the same time. A potential bottleneck for random walk inference is that supernodes connecting to large amount of formulas will create huge fan-out areas that significantly slow down the inference and affect the accuracy. Toutanova et al. (2015) provide a convolutional neural network solution to multi-hop reasoning. They build a CNN model based on lexicalized dependency paths, which suffers from the error propagation issue due to parse errors. Guu et al. (2015) uses KG embeddings to answer path queries. Zeng et al. (2014) described a CNN model for relational extraction, but it does not explicitly model the relational paths.", "startOffset": 0, "endOffset": 844}, {"referenceID": 4, "context": "Gardner et al. (2013; 2014) propose a modification to PRA that computes feature similarity in the vector space. Wang and Cohen (2015) introduce a recursive random walk approach for integrating the background KG and text\u2014the method performs structure learning of logic programs and information extraction from text at the same time. A potential bottleneck for random walk inference is that supernodes connecting to large amount of formulas will create huge fan-out areas that significantly slow down the inference and affect the accuracy. Toutanova et al. (2015) provide a convolutional neural network solution to multi-hop reasoning. They build a CNN model based on lexicalized dependency paths, which suffers from the error propagation issue due to parse errors. Guu et al. (2015) uses KG embeddings to answer path queries. Zeng et al. (2014) described a CNN model for relational extraction, but it does not explicitly model the relational paths. Neelakantan et al. (2015) propose a recurrent neural networks model for modeling relational paths in knowledge base completion (KBC), but it trains too many separate models, and therefore it does not scale.", "startOffset": 0, "endOffset": 974}, {"referenceID": 18, "context": "Neural symbolic machine (Liang et al., 2016) is a more recent work on KG reasoning, which also applies reinforcement learning but has a different flavor from our work.", "startOffset": 24, "endOffset": 44}, {"referenceID": 11, "context": "A similar framework (Johnson et al., 2017) has also been applied to visual reasoning tasks.", "startOffset": 20, "endOffset": 42}, {"referenceID": 20, "context": "Compared to Deep Q Network (DQN) (Mnih et al., 2013), policy-based RL methods turn out to be more appropriate for our knowledge graph scenario.", "startOffset": 33, "endOffset": 52}, {"referenceID": 0, "context": "Since existing practical KGs like Freebase (Bollacker et al., 2008) and NELL (Carlson et al.", "startOffset": 43, "endOffset": 67}, {"referenceID": 3, "context": ", 2008) and NELL (Carlson et al., 2010b) often have huge amounts of triples.", "startOffset": 17, "endOffset": 40}, {"referenceID": 1, "context": "To capture the semantic information of these symbols, we use translation-based embeddings such as TransE (Bordes et al., 2013) and TransH (Wang et al.", "startOffset": 105, "endOffset": 126}, {"referenceID": 26, "context": ", 2013) and TransH (Wang et al., 2014) to represent the entities and relations.", "startOffset": 19, "endOffset": 38}, {"referenceID": 23, "context": "To tackle this problem, we start our training with a supervised policy which is inspired by the imitation learning pipeline used by AlphaGo (Silver et al., 2016).", "startOffset": 140, "endOffset": 161}, {"referenceID": 27, "context": "INFORCE) (Williams, 1992):", "startOffset": 9, "endOffset": 25}, {"referenceID": 13, "context": "In practice, \u03b8 is updated using the Adam Optimizer (Kingma and Ba, 2014) with L2 regularization.", "startOffset": 51, "endOffset": 72}, {"referenceID": 24, "context": "The triples in FB15K-237 (Toutanova et al., 2015) are sampled from FB15K (Bordes et al.", "startOffset": 25, "endOffset": 49}, {"referenceID": 1, "context": ", 2015) are sampled from FB15K (Bordes et al., 2013) with redundant relations removed.", "startOffset": 31, "endOffset": 52}, {"referenceID": 15, "context": "For path based methods, we compare our RL model with the PRA (Lao et al., 2011a) algorithm, which has been used in a couple of reasoning methods (Gardner et al.", "startOffset": 61, "endOffset": 80}, {"referenceID": 5, "context": ", 2011a) algorithm, which has been used in a couple of reasoning methods (Gardner et al., 2013; Neelakantan et al., 2015).", "startOffset": 73, "endOffset": 121}, {"referenceID": 22, "context": ", 2011a) algorithm, which has been used in a couple of reasoning methods (Gardner et al., 2013; Neelakantan et al., 2015).", "startOffset": 73, "endOffset": 121}, {"referenceID": 1, "context": "For embedding based methods, we evaluate several state-of-the-art embeddings designed for knowledge base completion, such as TransE (Bordes et al., 2013), TransH (Wang et al.", "startOffset": 132, "endOffset": 153}, {"referenceID": 26, "context": ", 2013), TransH (Wang et al., 2014), TransR (Lin et al.", "startOffset": 16, "endOffset": 35}, {"referenceID": 19, "context": ", 2014), TransR (Lin et al., 2015) and TransD (Ji et al.", "startOffset": 16, "endOffset": 34}, {"referenceID": 10, "context": ", 2015) and TransD (Ji et al., 2015) .", "startOffset": 19, "endOffset": 36}, {"referenceID": 15, "context": "code released by (Lao et al., 2011a).", "startOffset": 17, "endOffset": 36}], "year": 2017, "abstractText": "We study the problem of learning to reason in large scale knowledge graphs (KGs). More specifically, we describe a novel reinforcement learning framework for learning multi-hop relational paths: we use a policy-based agent with continuous states based on knowledge graph embeddings, which reasons in a KG vector space by sampling the most promising relation to extend its path. In contrast to prior work, our approach includes a reward function that takes the accuracy, diversity, and efficiency into consideration. Experimentally, we show that our proposed method outperforms a path-ranking based algorithm and knowledge graph embedding methods on Freebase and Never-Ending Language Learning datasets.1", "creator": "LaTeX with hyperref package"}}}