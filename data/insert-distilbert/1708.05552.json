{"id": "1708.05552", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Aug-2017", "title": "Practical Network Blocks Design with Q-Learning", "abstract": "convolutional neural network behavior provides an end - to - end solution to train many critical computer vision tasks and has gained great successes. however, the design of network architectures usually relies heavily on expert knowledge and is hand - crafted. in this paper, we provide a solution to automatically and efficiently design global high performance network networking architectures. to reduce the intensive search space of network design, we focus on regularly constructing network blocks, teams which can be stacked to hopefully generate the exact whole network. tracking blocks are generally generated through an agent, which is individually trained professionally with q - hop learning to maximize the expected accuracy of the searching blocks on the learning motor task. distributed asynchronous framework and early stop strategy are used to dramatically accelerate the training process. our experimental results demonstrate that the network code architectures designed by our approach perform competitively compared with hand - crafted state - of - the - art networks. we trained the algorithms q - learning on cifar - 100, and evaluated on cifar10 and imagenet, the designed overall block structure achieved 3. 60 % error on cifar - 10 and competitive result on direct imagenet. the q - code learning process can be efficiently randomly trained only on 32 successive gpus in 3 days.", "histories": [["v1", "Fri, 18 Aug 2017 10:12:43 GMT  (2715kb,D)", "http://arxiv.org/abs/1708.05552v1", "11 pages, 8 figures"]], "COMMENTS": "11 pages, 8 figures", "reviews": [], "SUBJECTS": "cs.CV cs.LG", "authors": ["zhao zhong", "junjie yan", "cheng-lin liu"], "accepted": false, "id": "1708.05552"}, "pdf": {"name": "1708.05552.pdf", "metadata": {"source": "CRF", "title": "Practical Network Blocks Design with Q-Learning", "authors": ["Zhao Zhong", "Junjie Yan", "Cheng-Lin"], "emails": ["liucl}@nlpr.ia.ac.cn,", "yanjunjie@sensetime.com"], "sections": [{"heading": "Introduction", "text": "Convolutional neural network (CNN) (LeCun et al. 1989) have become the first choice for most computer vision tasks in the past few years. It first achieved successes in image classification (Krizhevsky, Sutskever, and Hinton 2012; Simonyan and Zisserman 2014; Szegedy et al. 2015a; He et al. 2016a), and then be applied to object detection (Girshick 2015; Ren et al. 2015), semantic segmentation (Long, Shelhamer, and Darrell 2015; Chen et al. 2016) and tracking (Nam and Han 2016; Bertinetto et al. 2016).\nOne key problem in convolutional neural network design is in finding better network architecture. The importance of network architecture has been manifested by the increasing performance due to the improvement of network architecture in the past years. For example, the ILSVRC ImageNet classification top-5 error rate was decreased from 16.4% to 3.57% progressively, from AlexNet to Inception and Inception. While a main advantage of convolutional neural network is that it makes traditional computer vision solutions end-to-end, the network architecture itself is hand-crafted. While the hand-crafted network architecture heavily relies\n\u2217The work was done when the first author interns at SenseTime.\nexpert knowledge and intuition, in this paper we want to explore an alternative solution that can design network architectures automatically from data and transfer the designed architecture to different datasets.\nModern neural networks can have hundreds of layers and each layer can have many options in layer type and parameters, which makes the network design space huge. To exploit the network design space more efficiently, we only design blocks in network architecture, instead of the whole network. Actually, most CNN architectures can be viewed as the stack of several basic sub-structures usually called \u2019block\u2019. The blocks are applied repeatedly to build a deep network. For example, the popular CNN models like VGG (Simonyan and Zisserman 2014), Inception (Szegedy et al. 2015a; Szegedy et al. 2015b) and Resnet (He et al. 2016a) all have their own unique blocks. Due to the blockconstructive architecture, these networks have powerful generalization ability can transfer to different datasets and application domains.\nIn this paper, we propose a novel distributed asynchronous Q-learning framework we called BlockQNN to automatic generate block for convolutional networks (see Figure 1). The framework contains an agent, a block list controller and many child training environments. The agent samples layers of network block structures sequentially as actions in reinforcement learning by Q-value it learns, then the block list controller stores a batch of blocks and assign training task to different child environments. The environment constructs networks based on block structure codes it gets from the list controller, and train the network on classification task with early stop strategy for speeding up. With all blocks finished training, block list controller backward the early stop accuracy with redefined reward to the agent for updating Q-value. we also use experience replay (Lin 1993) and epsilon-greedy strategy (Mnih et al. 2015) to help the agent choose higher performing blocks.\nOur experiments show that our framework can get good block structure starting from random exploration without any human knowledge to achieve a state-of-the-art performance of error rate 3.60% on CIFAR-10 dataset, and the learned block structure can be transferred to other big datasets easily. On ImageNet task, the model gives competitive results compared with other human designed state-ofthe-art models. More importantly, we only need 32 GPUs\nar X\niv :1\n70 8.\n05 55\n2v 1\n[ cs\n.C V\n] 1\n8 A\nug 2\n01 7\nin 3 days for searching process that is affordable for most laboratories, which is much less than the Google brain\u2019s work (Zoph and Le 2016) which used 800 GPUs.\nThe primary contributions of this work can be summarized as follows. \u2022 We propose a novel automatic block search strategy to\ndesign convolutional neural networks. It explores the network space efficiently and the designed block structures can transfer to other datasets and tasks easily.\n\u2022 We prove that the automatically designed network blocks work even better than networks designed by human from many expert knowledges.\n\u2022 We find that distributed asynchronous Q-learning with mini-batch strategy can work as well as non-batch Qlearning. We also find an early stop strategy for speeding up the training process with redefined Q-learning reward to correct the early stop accuracy. The two strategies ensure that the efficient training with 32 GPUs in 3 days."}, {"heading": "Related Work", "text": "In early research on automating neural network architecture design, most works relied on the genetic algorithm or other evolutionary algorithms (Schaffer, Whitley, and Eshelman 1992; Stanley and Miikkulainen 2002; Stanley, D\u2019Ambrosio, and Gauci 2009; Suganuma, Shirakawa, and Nagao 2017). There are some other works which focus on automatic selection of network architectures (Saxena and Verbeek 2016; Domhan, Springenberg, and Hutter 2015; Miconi 2016). These works can find suitable network architectures but do not perform competitively compared with hand-crafted networks. The recent work MetaQNN (Baker et al. 2016) and Neural Architecture Search (NAS) (Zoph and Le 2016) with reinforcement learning reported surprisingly good results and can beat the state-of-the-art handcrafted networks. However, the network designed by reinforcement agent is constrained to particular dataset, and can\u2019t transfer to different input size datasets or tasks very well. Hence, this approach can hardly be applied to network design for large scaled problems like ImageNet classification task.\nOur work is also related to the hyper-parameter optimization (Bergstra et al. 2011) , meta-learning (Vilalta and Drissi 2002) and learning to learn methods (Hochreiter, Younger, and Conwell 2001; Andrychowicz et al. 2016). The goal for these methods is to use meta-data for improving the performance of existing learning algorithms. For examples, to learn the learning rate of optimization methods or the number of hidden layers in network. In this paper, we focus on learning good blocks\u2019 topology for deep neural networks to improve classification task.\nThe block design conception follows the modern modular convolutional network such as VGG (Simonyan and Zisserman 2014), Inception (Szegedy et al. 2015a; Szegedy et al. 2015b) and Resnet (He et al. 2016a). They all achieve stateof-the-art performance on classification tasks and become the basal part in other task at that time. The VGG uses only 3x3 convolutional layers stacked on top of each other in increasing depth as a simple block and reduce the volume size\nby using max pooling. The inception network uses a multilevel feature extractor strategy by computing 1x1, 3x3, and 5x5 convolutions within the same module of the network to construct the block structure. The Resnet uses blocks with short cut connection that make it easy for network layers to represent the identity mapping, thus, the Resnet can be stacked very deeply with a lot of layers. The blocks generated by our approach have some similar features with the modern hand-crafted convolutional network, for example, some blocks contain short cut connection, but our blocks are all generated automatically without expert knowledge.\nOur approach is motivated by the recently proposed MetaQNN (Baker et al. 2016), which uses a Qlearning (Watkins and Dayan 1992) based meta-modeling to search architecture configurations. Although MetaQNN can yield good performance on small datasets such as CIFAR10, CIFAR-100 (Krizhevsky and Hinton 2009) in a small search space, the direct use of MetaQNN for architecture design on big datasets like ImageNet (Deng et al. 2009) is computationally expensive and the designed architecture is hard to generalize, because they search the whole neural network architecture space directly without block design. Instead, our approach is aimed to design convolution block structure by efficient search using a novel distributed asynchronous Qlearning framework and other acceleration strategy.\nA few weeks ago, in preparing the paper, Google proposed their second version of NAS (Zoph et al. 2017). In this paper, they also design blocks and use more sophisticated layers. But their work still need 450 GPUs, which is not affordable for many researchers. They follow the design con-\ncept of RNN cell\u2019s instead of modern CNN blocks, and the RNN controller is used to recursively predict the structure parameters for repeating 5 times to construct one CNN cell but we use Q-learning to design the complete CNN blocks directly with connection codes."}, {"heading": "The Proposed Method", "text": "Our method is based on Q-learning, which consists of an agent, states and a set of actions per state. The agent generates block structure by selecting the action with the highest value in each state. In our work, state represents the current layer in block, and action represents next layer the agent chosen. The last action in block is always terminal layer. Each state or action is defined as a tuple of structure codes, for example {layer number, layer type, kernel size, connection1, connection2} in our framework. The training environment receives the network architecture sampled from agent and then train the network on target dataset and backward the validation accuracy as the reward to agent for updating. With finite iteration, the agent can get an optimal policy to generate block structure."}, {"heading": "Distributed Asynchronous Framework", "text": "The first problem we met is that it is very time consuming to complete searching process, usually take more than a week. Most of the time is spent in training environment, so we consider using multi-machine to accelerate training. Original MetaQNN only sampled one network architecture\nat a time for update, but we need many networks training in parallel for multi-machine framework, thus we sampled 64 network codes as a minibatch, and when the batch is finished training, the agent update 64 times successively.\nIn our work, we propose a distributed asynchronous framework and minibatch strategy to speed up the learning of agent. The agent sampled a batch of structure codes at a time and store in a list controller, N child environments share the structure codes. Each environment trained in parallel, and when the minibatch is finished, list controller backward results of that minibatch to update the agent\u2019s weights. It\u2019s like a simplified version of parameter-server (Dean et al. 2012; Li et al. 2013). With this framework, we can train our model in multi-machine and multi-GPUs, in this work we use 32 GPUs, it\u2019s 10 times faster than use only 2 GPUs . This framework is shown in Figure 1.\nThe modern CNN design rule is to stack same neural block with different weights and feature map to construct the network. Following this rule, we constrict the searching space only in block level. So, we can consist different network use a series of block to deal with arbitrary inputs and different task.\nOur strategy to construct a complete network is very simple, we just stack the block straightforwardly. All blocks have the same feature maps size between the pooling layers, and after pooling layer with a stride of two, feature map will be reduced by two but the block weights will be doubled. Figure 2 shows our network for CIFAR and ImageNet. Because the input image size is different for these two datasets, we set more pooling layer with a stride of two in the bottom layers in ImageNet network. More important, we can change the repeat times N of blocks for different demands, and even place the block in nonlinear manner."}, {"heading": "Block Design", "text": "Architectural codes in previous works can only describe plain nets (that simply stack layers) that resulting in low performance. Powerful network like ResNet and Inception have shortcut connections or multi-branch connection in their block, it\u2019s more complex than plain nets. Unlike MetaQNN, our structure codes include connection parameters which can perform complexity neural network architectural like modern models. Our block structure codes are summarized in Table 1, it contains six different types of layers: convolution, max pooling, average pooling, identity, elemental add and concat. Only Computation layers have the kernel size parameters. Connection parameters means the in-layer\u2019s number, it should be less than the number of current layer. Only elemental add and concat layer have two connection parameters, and with the identity layer, we can transform multi-branch connection to two-branch connection, so our structure codes can describe nearly any network block topology.\nIn our work, we start block with the identity layer, and end with a terminal layer. All layers without out-connection are concatenated together to provide the final output. In elemental add layers, if two in-layers have different channel, we use 1x1 convolutions to match dimensions just like (He et al. 2016a). There is no down sampling operation in block.\nFigure 3: Q-learning result with different experiment setting on CIFAR-100. The blue line means the searching with ReLU and batch normalization layer code for 178 minibatch and the red line is searching with small pre-activation cell for 178 minibatch. The green one means searching with ReLU and batch normalization layer code for 89 minibatch.\nIn experiment, we set the layers up to 23, which ensures the enough block structure space we can search.\nAll convolution layers in block is a small preactivation(He et al. 2016b) cell that contain: ReLU, conventional convolution and batch normalization (Ioffe and Szegedy 2015). In the early experiment, we search ReLU and batch normalization directly, but it cost a low performance. As shown in Figure 3, the blue line is the searching with ReLU and batch normalization layer code, and red line is searching with small pre-activation cell, other experiment settings are same, we can find that there is a big gap between blue and red start from random exploration period. Because the block with searching with ReLU and batch normalization layer directly is more random than searching with pre-activation cell, so it\u2019s more likely to get \u201dbad\u201d blocks and need more searching space to find a good block structure.With the pre-activation cell, we can get better initialization for Q-learning and generate good block structure in limited update."}, {"heading": "Training Speed Up", "text": "The time is the biggest problem in this work as said above. With distributed asynchronous framework, we can train the agent on multi-machine and multi-GPUs, but we have limited computing resources with only 32 GPUs for this experiment. Child environment take a lot of time to train network until convergence, but what we need is a reward to distinguish good or bad block instead of the exact result.\nFigure 4: Top-100 blocks searching result on CIFAR-10 with ReLU and batch normalization layer code. The yellow line represents the early stop result and blue one is the train until convergence result. The red line is the redefined reward according to formula 1.\nTo deal with the trouble, we propose early stop strategy to speed up training process. Every child environment only train the generated network for a fixed 12 epochs on CIFAR100 dataset during the architecture search process. It can save a lot of time compared with training for complete process. The reason why we searching on CIFAR-100 dataset is that we believe the result from CIFAR-100 is more discriminatory to find good block compare to CIFAR-10, which the result is very closed.\nThere is new trouble that this method will cause some mistakes because the early stop result is not the exact accuracy which can make an agent learn wrong block structures. So, we redefine the reward function.\nWe sampled 50 block structures from top-200, because we only concerned the good one in top blocks, to find a relation between real and early stop accuracy. Thus, we trained these 50 networks until convergence to get the exact result first, and we list FLOPs, parameters, dot, edge and density of the block structures. We discover that the FLOPs (He and Sun 2015) and density of the block structures\u2019 topology ( edge divided by dot ) are inversely proportional to the final exact accuracy, so we revised the validation accuracy reward with the formula 1.\nreward = accuracy \u2212 1 2 log(FLOPs)\u2212 1 2 log(density) (1)\nAs shown in Figure 4, the yellow line is the early stop result and blue line is the exact result of top 100 blocks in one experiment, we can find there are many mistakes that some\ngood blocks perform worse than bad blocks in early stop result line. The red line is the redefined reward formula 1, it\u2019s much more relevant to the blue line than yellow. The early stop strategy and new reward can help nearly 30 times faster than training until convergence in searching procedure.\nWith distributed asynchronous Q-learning framework, block structure codes and early stop strategy, we just cost 3 days to complete the searing process with only 32 GPUs. This is a huge benefit, since Google has used 800 GPUs to finish this task."}, {"heading": "Experiments and Results", "text": "In this section, we describe our experiments with BlockQNN using the framework and search space described above to generate a good block structure. All searching experiments are conduct on CIFAR-100 dataset for Classification network. The agent was trained using Q-learning with experience replay and epsilon-greedy strategy.\nWe can get several candidate block structures generated by agent after searching. In our work, we choose the top 100 architectures to train until convergence on CIFAR-10 to verify the best architecture. Figure 5 shows the top-2 performing block from the CIFAR-10 verify process. We call them block-QNN-A and block-QNN-B. With the block structure, we can construct the network easily, the only hyper-parameters we need to decide is the repeating times of blocks. In subsection, we will show details of the searching experiment, verify experiment and transfer experiment on ImageNet task respectively.\nExperiment Details In the Q-learning updates process for searching blocks, the Q-learning rate is set to 0.01 and the minibatch size is 64. The agent samples 64 block structure codes at a time to compose a minibatch. Additionally, we find the iterative update\napproximation of Bellmans Equation (Watkins 1989) MetaQNN used doesn\u2019t work well in our experiment, maybe the different coding strategy or searching space caused. So, we do a little modification on the Equation.\nQt+1(si, u) = (1\u2212 \u03b1)Qt(si, u) + \u03b1[accuracy +maxu\u2032\u2208U(sj))Qt(sj , u \u2032))] (2)\nEquation 2 is a variant form, the only difference is that we add the accuracy reward at every layer\u2019s update, it can create faster convergence in our experiment. As shown in Figure 6, the red line is the result with original formula and blue one is Equation 2, two experiment start with same setting and initialization blocks, we can find that blue one Convergence faster than red one.\nWe decrease epsilon from 1.0 to 0.1, and we have tried different epsilon schedules and found that with a longer ex-\nTable 2: Epsilon Schedules. The number of minibatch sampled by agent at each epsilon state.\nepsilon 1.0 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1\nMinibatch Trained 95 7 7 7 10 10 10 10 10 12\nFigure 7: Q-learning Result.The accuracy goes up with the epsilon decrease and the top models are all found in the final stage, show that our agent can learn to search better block structures instead of random searching.\nploration and exploitation process, the result will get better as shown in Figure 3, green line with a shorter exploration and exploitation process but blue with longer, any other setting is same. This is because the searching space will be larger and the agent can see more block structures in the random exploration period.\nTable 2 shows that the number of unique minibatch we trained at different epsilon. We maintain a replay memory same as (Baker et al. 2016) , after each minibatch is sampled and trained, the agent randomly samples 128 blocks from the memory dictionary and applies the Q-value update for 64 times.\nDuring the block searching phase, the child environment trained each block topology for a fixed 12 epochs on CIFAR100 as described above. CIFAR-100 is a dataset has 50,000 training samples and 10,000 testing samples in 100 classes. We trained without any data augmentation procedure. The batch size was set to 256 for saving times.\nWe use Adam optimizer (Kingma and Ba 2014) with \u03b21 = 0.9, \u03b22 = 0.999, \u03b5 = 10\u22128, and the initial learning rate was set to 0.001. If the model failed to perform better than a random predictor after the first epoch, we reduced the learning rate by a factor of 0.4 and restarted training, with a maximum of 3 restarts. For models that started learning we reduced the learning rate by a factor of 0.2 every 5 epochs. All weights were initialized as in (He et al. 2015). Our model is implemented under the pytorch scientific computing platform. We use the CUDA backend and\ncuDnn accelerated library in our implementation for highperformance GPU acceleration. Our experiments are carried out on 32 NVIDIA TitanX GPUs and took about 3 days to complete searching."}, {"heading": "Block Searching Analysis", "text": "In Figure 7, we plot the mean prediction of early stop accuracy over 64 models (every minibatch) for CIFAR-100 searching experiments. After random exploration, the early stop accuracy begins to grow slowly, and achieves convergence in the end. The mean accuracy of models in random exploration stage is 56% and in stage of epsilon = 0.1 at the last the mean accuracy is nearly 65%.\nAs the Figure 7 shows, the Top models are all found in the final stage of the Q-learning process. It proves that our framework learns the way to generate better block structures rather than random searching a lot of models."}, {"heading": "Experiment on CIFAR", "text": "The CIFAR-10 dataset consists of 60000 32x32 color images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images. We use the common data augmentation process that randomly crop 32x32 patches from padded images of size 40x40 and apply random horizontal flips for training. All models use the SGD optimizer with momentum rate set to 0.9 and weight decay set to 0.0005. We start with a learning rate of 0.1 and train the models for 300 epochs, reducing the learning rate at\nthe 150-th and 225-th epoch. The batch size is set to 128 and all weights were initialized with MSRA initialization(He et al. 2015).\nFor the CIFAR-10 task, we set N=4. After top-100 models trained until convergence, we can find some good block structures. We compare our best architecture by automatic searching with different typical methods using the same dataset. The experimental results are shown in Table 3. It is shown that the searching models can achieve best performance which is very competitive to some of the best models design by human experts. The DenseNet-BC (Huang et al. 2017) model which achieves 3.46% error rate uses additional 1x1 convolutions in each composite function and\ncompressive transition layers to reduce parameters and improve performance, this strategy is not used in our framework, and our performance can be further improved by using it. Additionally, we do not introduce extra knowledge during the agent training procedure.\nOur approach improves a lot compared with the original MetaQNN. More important, our best model is better than the NAS\u2019s best model NASv3 + more filters proposed by Google brain which training the whole system on 800 GPUs. We only need 32 GPUs to get the state of art performance in automatic designing network methods in 3 days.\nWe transfer the top blocks learned from CIFAR-10 to CIFAR-100 dataset, all experiment settings are same as\nabove. As summarized in Table 3, the blocks can also achieve state of art result on CIFAR-100 dataset that proved Block-QNN networks have powerful transfer learning ability."}, {"heading": "Experiment on ImageNet", "text": "We transfer the block structure learned from CIFAR-10 to ImageNet dataset. ImageNet is a 1000-class image database for large scale image classification that consists of approximately 1.2M images.\nWe use SGD with a mini-batch size of 256 on 8 GPUs. The weight decay is 0.0001 and the momentum is 0.9. We start from a learning rate of 0.1, and divide it by 10 two times, at the 30-th and 60-th epochs. For the training images, we use a simple data augmentation that randomly cropped 224x224 patches from a resized image with its shorter side randomly sampled in [256, 480] with random horizontal flips. For the testing images, we evaluate the accuracy on single 224x224 center crop from an image shorter side resize to 256.\nFor the ImageNet task, we set N=3 and add more pooling operation before blocks. We use the best block structure learned from CIFAR-10 directly without any fine-tuning, and initialized with MSRA initialization same as above. The experimental results are shown in Table 4. The model generated by our framework can get competitive result compared with other human designed models. The recently proposed methods such as Xception (Chollet 2016) and ResNext(Xie et al. 2016) use special depth-wise convolution operation to reduce its total number of parameters and to improve performance, in our work, we do not use this new convolution operation, so it can\u2019t be compared fairly, and we will consider this in our future work to further improve the performance.\nFor automatic designing network methods, all previous works did not conduct the experiment on large scale image classification datasets. With the conception of block learning, we can transfer our architecture learned in small datasets to ImageNet task easily. In the future experiments, we will try the new models to improve the performance further.\nConclusion In this paper, we show how to efficiently design high performance network blocks with Q-learning. we propose a distributed asynchronous Q-learning framework and early stop strategy focus on fast variable-length block structures searching. The result proves that we can automatic design block to construct good convolutional network for the classification task. Our Block-QNN networks outperform modern man-made networks as well as other automatic searching models. The best block which achieved a state-of-theart performance in CIFAR-10 can transfer to the large-scale dataset ImageNet easily, and can get a competitive performance compared with best hand-crafted networks. We show that searching with the block design strategy can get more generalized network architecture. In the future, we will continue to improve the proposed framework from different aspects, such as using more powerful convolution layers and\nmaking the searching process faster. We will also try to search blocks with limited parameters and FLOPs, and try to conduct experiments on other tasks such as detection or segmentation."}, {"heading": "Acknowledgments", "text": "The authors thank Yucong Zhou, Wei Wu, Boyang Deng, Xu-Yao Zhang, and many others at SenseTime Research for discussions and feedbacks within this work."}], "references": [{"title": "M", "author": ["M. Andrychowicz", "M. Denil", "S. Gomez", "Hoffman"], "venue": "W.; Pfau, D.; Schaul, T.; and de Freitas, N.", "citeRegEx": "Andrychowicz et al. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Designing neural network architectures using reinforcement learning", "author": ["Baker"], "venue": "arXiv preprint arXiv:1611.02167", "citeRegEx": "Baker,? \\Q2016\\E", "shortCiteRegEx": "Baker", "year": 2016}, {"title": "J", "author": ["Bergstra"], "venue": "S.; Bardenet, R.; Bengio, Y.; and K\u00e9gl, B.", "citeRegEx": "Bergstra et al. 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "P", "author": ["L. Bertinetto", "J. Valmadre", "J.F. Henriques", "A. Vedaldi", "Torr"], "venue": "H.", "citeRegEx": "Bertinetto et al. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "A", "author": ["L.-C. Chen", "G. Papandreou", "I. Kokkinos", "K. Murphy", "Yuille"], "venue": "L.", "citeRegEx": "Chen et al. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Q", "author": ["J. Dean", "G. Corrado", "R. Monga", "K. Chen", "M. Devin", "M. Mao", "A. Senior", "P. Tucker", "K. Yang", "Le"], "venue": "V.; et al. 2012. Large scale distributed deep networks. In Advances in neural information processing systems, 1223\u2013", "citeRegEx": "Dean et al. 2012", "shortCiteRegEx": null, "year": 1231}, {"title": "L", "author": ["J. Deng", "W. Dong", "R. Socher", "L.-J. Li", "K. Li", "Fei-Fei"], "venue": "2009. Imagenet: A large-scale hierarchical image database. In Computer Vision and Pattern Recognition, 2009. CVPR", "citeRegEx": "Deng et al. 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "J", "author": ["Domhan, T.", "Springenberg"], "venue": "T.; and Hutter, F.", "citeRegEx": "Domhan. Springenberg. and Hutter 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "and Sun", "author": ["K. He"], "venue": "J.", "citeRegEx": "He and Sun 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "J", "author": ["K. He", "X. Zhang", "S. Ren", "Sun"], "venue": "2015. Delving deep into rectifiers: Surpassing human-level performance on imagenet classification. In Proceedings of the IEEE international conference on computer vision, 1026\u2013", "citeRegEx": "He et al. 2015", "shortCiteRegEx": null, "year": 1034}, {"title": "2016a. Deep residual learning for image recognition", "author": ["He"], "venue": "In Proceedings of the IEEE conference on computer vision and pattern recognition,", "citeRegEx": "He,? \\Q2016\\E", "shortCiteRegEx": "He", "year": 2016}, {"title": "2016b. Identity mappings in deep residual networks", "author": ["He"], "venue": "In European Conference on Computer Vision,", "citeRegEx": "He,? \\Q2016\\E", "shortCiteRegEx": "He", "year": 2016}, {"title": "P", "author": ["S. Hochreiter", "A.S. Younger", "Conwell"], "venue": "R.", "citeRegEx": "Hochreiter. Younger. and Conwell 2001", "shortCiteRegEx": null, "year": 2001}, {"title": "K", "author": ["G. Huang", "Z. Liu", "Weinberger"], "venue": "Q.; and van der Maaten, L.", "citeRegEx": "Huang et al. 2017", "shortCiteRegEx": null, "year": 2017}, {"title": "and Szegedy", "author": ["S. Ioffe"], "venue": "C.", "citeRegEx": "Ioffe and Szegedy 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "and Ba", "author": ["D. Kingma"], "venue": "J.", "citeRegEx": "Kingma and Ba 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "and Hinton", "author": ["A. Krizhevsky"], "venue": "G.", "citeRegEx": "Krizhevsky and Hinton 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "G", "author": ["A. Krizhevsky", "I. Sutskever", "Hinton"], "venue": "E.", "citeRegEx": "Krizhevsky. Sutskever. and Hinton 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "L", "author": ["Y. LeCun", "B. Boser", "J.S. Denker", "D. Henderson", "R.E. Howard", "W. Hubbard", "Jackel"], "venue": "D.", "citeRegEx": "LeCun et al. 1989", "shortCiteRegEx": null, "year": 1989}, {"title": "D", "author": ["M. Li", "L. Zhou", "Z. Yang", "A. Li", "F. Xia", "Andersen"], "venue": "G.; and Smola, A.", "citeRegEx": "Li et al. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Reinforcement learning for robots using neural networks", "author": ["Lin", "L.-J"], "venue": "Technical report,", "citeRegEx": "Lin and L..J.,? \\Q1993\\E", "shortCiteRegEx": "Lin and L..J.", "year": 1993}, {"title": "Fully convolutional networks for semantic segmentation", "author": ["Shelhamer Long", "J. Darrell 2015] Long", "E. Shelhamer", "T. Darrell"], "venue": "In Proc. IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "Long et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Long et al\\.", "year": 2015}, {"title": "A", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "Fidjeland"], "venue": "K.; Ostrovski, G.; et al.", "citeRegEx": "Mnih et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "and Han", "author": ["H. Nam"], "venue": "B.", "citeRegEx": "Nam and Han 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Faster r-cnn: Towards real-time object detection with region proposal networks. In Advances in neural information processing", "author": ["Ren"], "venue": null, "citeRegEx": "Ren,? \\Q2015\\E", "shortCiteRegEx": "Ren", "year": 2015}, {"title": "and Verbeek", "author": ["S. Saxena"], "venue": "J.", "citeRegEx": "Saxena and Verbeek 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "1992", "author": ["J.D. Schaffer", "D. Whitley", "L. J Eshelman"], "venue": "Combinations of genetic algorithms and neural networks: A survey of the state of the art. In Combinations of Genetic Algorithms and Neural Networks,", "citeRegEx": "Schaffer. Whitley. and Eshelman 1992", "shortCiteRegEx": null, "year": 1992}, {"title": "and Zisserman", "author": ["K. Simonyan"], "venue": "A.", "citeRegEx": "Simonyan and Zisserman 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "J", "author": ["Springenberg"], "venue": "T.; Dosovitskiy, A.; Brox, T.; and Riedmiller, M.", "citeRegEx": "Springenberg et al. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "R", "author": ["Srivastava"], "venue": "K.; Greff, K.; and Schmidhuber, J.", "citeRegEx": "Srivastava. Greff. and Schmidhuber 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "and Miikkulainen", "author": ["K.O. Stanley"], "venue": "R.", "citeRegEx": "Stanley and Miikkulainen 2002", "shortCiteRegEx": null, "year": 2002}, {"title": "K", "author": ["Stanley"], "venue": "O.; D\u2019Ambrosio, D. B.; and Gauci, J.", "citeRegEx": "Stanley. D.Ambrosio. and Gauci 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "A genetic programming approach to designing convolutional neural network architectures. arXiv preprint arXiv:1704.00764", "author": ["Shirakawa Suganuma", "M. Nagao 2017] Suganuma", "S. Shirakawa", "T. Nagao"], "venue": null, "citeRegEx": "Suganuma et al\\.,? \\Q2017\\E", "shortCiteRegEx": "Suganuma et al\\.", "year": 2017}, {"title": "2015a. Going deeper with convolutions", "author": ["Szegedy"], "venue": "In Proc. IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "Szegedy,? \\Q2015\\E", "shortCiteRegEx": "Szegedy", "year": 2015}, {"title": "Rethinking the inception architecture for computer", "author": ["Szegedy"], "venue": null, "citeRegEx": "Szegedy,? \\Q2015\\E", "shortCiteRegEx": "Szegedy", "year": 2015}, {"title": "and Drissi", "author": ["R. Vilalta"], "venue": "Y.", "citeRegEx": "Vilalta and Drissi 2002", "shortCiteRegEx": null, "year": 2002}, {"title": "and Dayan", "author": ["C.J. Watkins"], "venue": "P.", "citeRegEx": "Watkins and Dayan 1992", "shortCiteRegEx": null, "year": 1992}, {"title": "C", "author": ["Watkins", "C. J"], "venue": "H.", "citeRegEx": "Watkins 1989", "shortCiteRegEx": null, "year": 1989}, {"title": "Aggregated residual transformations for deep neural networks. arXiv preprint arXiv:1611.05431", "author": ["Xie"], "venue": null, "citeRegEx": "Xie,? \\Q2016\\E", "shortCiteRegEx": "Xie", "year": 2016}, {"title": "and Komodakis", "author": ["S. Zagoruyko"], "venue": "N.", "citeRegEx": "Zagoruyko and Komodakis 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Q", "author": ["B. Zoph", "Le"], "venue": "V.", "citeRegEx": "Zoph and Le 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Q", "author": ["B. Zoph", "V. Vasudevan", "J. Shlens", "Le"], "venue": "V.", "citeRegEx": "Zoph et al. 2017", "shortCiteRegEx": null, "year": 2017}], "referenceMentions": [], "year": 2017, "abstractText": "Convolutional neural network provides an end-to-end solution to train many computer vision tasks and has gained great successes. However, the design of network architectures usually relies heavily on expert knowledge and is hand-crafted. In this paper, we provide a solution to automatically and efficiently design high performance network architectures. To reduce the search space of network design, we focus on constructing network blocks, which can be stacked to generate the whole network. Blocks are generated through an agent, which is trained with Q-learning to maximize the expected accuracy of the searching blocks on the learning task. Distributed asynchronous framework and early stop strategy are used to accelerate the training process. Our experimental results demonstrate that the network architectures designed by our approach perform competitively compared with handcrafted state-of-the-art networks. We trained the Q-learning on CIFAR-100, and evaluated on CIFAR10 and ImageNet, the designed block structure achieved 3.60% error on CIFAR10 and competitive result on ImageNet. The Q-learning process can be efficiently trained only on 32 GPUs in 3 days.", "creator": "LaTeX with hyperref package"}}}