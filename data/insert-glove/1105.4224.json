{"id": "1105.4224", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-May-2011", "title": "On A Semi-Automatic Method for Generating Composition Tables", "abstract": "kabat Originating aronsohn from ratzon Allen ' s Interval Algebra, seaborgium composition - mandolins based reasoning elderflower has 80186 been 52.92 widely hoerr acknowledged 3-putt as eleventh-century the most popular highclere reasoning technique unwerth in qualitative spatial friedly and dangal temporal mcalmont reasoning. voima Given a pre-cursor qualitative calculus (i. moston e. scud a relation model ), the cross-cutting first suey thing permissive we should do is stephanos to 3,290 establish duaik its 49.07 composition koester table (CT ). winford In europaeum the past three decades, securom such enderle work gambela is usually intersect done 5566 manually. highbrows This dfa is climatologist undesirable hostile and cedrus error - prone, airings given batagram that the amc calculus kempsville may contain pnl tens lakeport or katkov hundreds of ballivi\u00e1n basic khachaturian relations. Computing the 25-10 correct CT minurso has growling been identified 1,200-mile by boons Tony ceriani Cohn as mrs a challenge sumu for milanes computer 18,900 scientists zachry in 7.76 1995. This paper 18.54 addresses this problem hamilton-gordon and introduces a malfa semi - automatic method to compute iradio the CT armstong by randomly generating amidei triples of elements. pel For several important poruchik qualitative makovich calculi, noella our coletti method can kutsher establish 75.57 the correct CT in a fithian reasonable schuyler short otopeni time. nappes This is illustrated by wordings applications 1.51 to intel-based the Interval Algebra, the Region kobrin Connection chop Calculus RCC - 8, the INDU 117.83 calculus, lizette and syndicating the breitenbach Oriented Point noxzema Relation Algebras. Our boatbuilder method cubby can also koston be used przemys\u0142 to generate glencorse CTs angelou for vcrs customised qualitative myrick calculi ulker defined 3-and-1 on raydah restricted aremissoft domains.", "histories": [["v1", "Sat, 21 May 2011 07:37:47 GMT  (206kb,D)", "http://arxiv.org/abs/1105.4224v1", "15 pages"]], "COMMENTS": "15 pages", "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["weiming liu", "sanjiang li"], "accepted": false, "id": "1105.4224"}, "pdf": {"name": "1105.4224.pdf", "metadata": {"source": "CRF", "title": "On A Semi-Automatic Method for Generating Composition Tables", "authors": ["Weiming Liu", "Sanjiang Li"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Since Allen\u2019s seminal work of Interval Algebra (IA) [1,2], qualitative calculi have been widely used to represent and reason about temporal and spatial knowledge. In the past decades, dozens of qualitative calculi have been proposed in the artificial intelligence area \u201cQualitative Spatial & Temporal Reasoning\u201d and Geographic Information Science. Except IA, other well known binary qualitative calculi include the Point Algebra [3], the Region Connection Calculi RCC-5 and RCC-8 [4], the INDU calculus [5], the Oriented Point Relation Algebras OPRA [6], and the Cardinal Direction Calculus (CDC) [7], etc.\nRelations in each particular qualitative calculus are used to represent temporal or spatial information at a certain granularity. For example, The Netherlands is west of Germany, The Alps partially overlaps Italy, I have today an appointment with my doctor followed by a check-up.\nGiven a set of qualitative knowledge, new knowledge can be derived by using constraint propagation. Consider an example in RCC-5. Given that The Alps partially overlaps Italy and Switzerland, and Italy is a proper part of the European Union (EU), and Switzerland is discrete from the EU, we may infer that The Alps partially overlaps the EU. The above inference can be obtained by using composition-based reasoning. The composition-based reasoning technique has been extensively used in qualitative\nar X\niv :1\n10 5.\n42 24\nv1 [\ncs .A\nI] 2\n1 M\nay 2\n01 1\n2 spatial and temporal reasoning, and, when combined with backtracking methods, has been shown to be complete in determining the consistency problem for several important qualitative calculi, including IA, Point Algebra, Rectangle Algebra, RCC-5, and RCC-8. Moreover, qualitative constraint solvers have been developed to facilitate composition-based reasoning [8,9].\nWe here give a short introduction of the composition-based reasoning technique. SupposeM is a qualitative calculus, and \u0393 = {vi\u03b3ijvj}ni,j=1 is a constraint network overM. The composition-based reasoning technique uses a variant of the well-known Path Consistency Algorithm,1 which applies the following updating rule until the constraint network becomes stable or an empty relation appears:\n\u03b3ij \u2190 \u03b3ij \u2229 \u03b3ik \u25e6w \u03b3kj , (1)\nwhere \u03b1 \u25e6w \u03b2 is the weak composition (cf. [10,11]) of two relations \u03b1, \u03b2 inM, namely the smallest relation inM which contains the usual composition of \u03b1 and \u03b2. Although for OPRA and some other calculi the composition-based reasoning is incomplete to decide the consistency problem, it remains a very efficient method to approximately solve the consistency problem.\nThe weak composition in a qualitative calculusM is determined by its weak composition table (CT for short). Usually, the CT ofM is obtained by manually checking the consistency of {x\u03b1y, y\u03b2z, x\u03b3z} for each triple of basic relations \u3008\u03b1, \u03b3, \u03b2\u3009. When M contains dozens or even hundreds of basic relations, this consistency-based method is undesirable and error-prone. [12] first noticed this problem and identified it as a challenge for computer scientists.\nThis problem remains a challenge today. We here consider several examples. The Interval Algebra and the RCC-8 algebra contain, respectively, 13 and 8 basic relations. Their CTs were established manually. But if a calculus contains a hundred basic relations, we need to determine the consistency of one million such basic networks. This is manually impossible. The OPRA calculi and the CDC are large qualitative spatial calculi that have drawn increasing interests. OPRAm contains 4m \u00d7 (4m + 1) (i.e. 72, 156, 272 for m = 2, 3, 4, respectively) basic relations [6], while the CDC contains 218 basic relations [7]. Sometimes we need ingenious and special methods to establish CT for such a calculus. For the OPRA calculi, the algorithm presented in the original paper [6] contains gaps and errors. Later, [13] presented the second algorithm, which is quite lengthy and cumbersome. Another simple algorithm has also been proposed recently [14]. Given the huge number of basic relations of OPRAm, the validity of these algorithms need further verification. As for the CDC, [7] first studied the weak composition. Later, [15] noticed errors in Goyal\u2019s method and gave a new algorithm to compute the weak composition. Unfortunately, in several cases, their algorithm does not generate the correct weak composition (see [16]).\nIn this paper, we respond to this challenge and propose a semi-automatic approach to generate CT for general qualitative calculi. In the remainder of this paper, we first recall basic notions and results about qualitative calculi and weak composition tables in Section 2, and then apply our method to IA, INDU, RCC-8, andOPRA1 andOPRA2\n1 The notion of Path Consistency is usually defined for constraints on finite domains, and not always appropriate for general qualitative constraints, which are defined on infinite domains.\n3 in Section 3. An analysis of the strength and weakness of our approach is given in Section 4. Section 5 then concludes the paper."}, {"heading": "2 Preliminaries", "text": "In this section we recall the notions of qualitative calculi and their weak composition tables. Interested readers may consult e.g. [17,11] for more information.\nDefinition 1. Suppose U is a universe of spatial or temporal entities, and B is a set of jointly exhaustive and pairwise disjoint (JEPD) binary relations on U . We call the Boolean algebra generated by B a qualitative calculus, and call relations in B the basic relations of this qualitative calculus.\nWe consider a simple example.\nExample 1 (Point Algebra). Suppose U = R. For two points a, b in U , we have either a < b, or a = b, or a > b. Let B = {<,=, >}. Then B is a JEPD set of relations on U . We call the Boolean Algebra generated by B the Point Algebra.\nWe next recall the central notion of weak composition.\nDefinition 2. SupposeM is a qualitative calculus on U , and B is the set of its basic relations. The weak composition of two basic relations \u03b1 and \u03b2 inM, denoted as \u03b1 \u25e6w \u03b2, is defined as the smallest relation inM which contains \u03b1 \u25e6 \u03b2, the usual composition of \u03b1 and \u03b2.\nUsually, a qualitative calculus has a finite set of relations. The weak composition operation ofM can be summarised in an n\u00d7n table, where n is the cardinality of B, and the cell specified by \u03b1 and \u03b2 contains all basic relations \u03b3 in B such that \u03b3\u2229\u03b1\u25e6\u03b2 6= \u2205. The CT of the Point Algebra is given in Table 1.\nDefinition 3. SupposeM is a qualitative calculus on U with basic relation set B. For basic relations \u03b1, \u03b2, \u03b3, we call \u3008\u03b1, \u03b3, \u03b2\u3009 a composition triad, or c-triad, if \u03b3 \u2286 \u03b1 \u25e6w \u03b2. We can determine if a 3-tuple is a c-triad as follows (cf. Fig. 1).\nProposition 1. A 3-tuple \u3008\u03b1, \u03b3, \u03b2\u3009 of basic relations inM is a c-triad iff \u03b3\u2229\u03b1\u25e6\u03b2 6= \u2205, which is equivalent to saying that the basic constraint network\n{x\u03b1y, y\u03b2z, x\u03b3z} (2)\nis consistent, i.e. it has a solution in U .\nTo compute the weak composition of \u03b1 and \u03b2, one straightforward method is to find all basic relations \u03b3 such that \u3008\u03b1, \u03b3, \u03b2\u3009 is a c-triad.\n4"}, {"heading": "3 A General Method for Computing CT", "text": "In this section, we propose a general approach to compute the composition table of a qualitative calculusM with domain U and basic relation set B. The approach is based on the observation that each triple of objects in U derives a valid c-triad.\nProposition 2. Suppose a, b, c are three objects in U . Then \u3008\u03c1(a, b), \u03c1(a, c), \u03c1(b, c)\u3009 is a c-triad, where \u03c1(x, y) is the basic relation inM that relates x to y.\nIt is clear that six (different or not) c-triads can be generated if we consider all permutations of a, b, c.\nTo compute the CT of M, the idea is to choose randomly a triple of elements in U and then compute and record the c-triads related to these objects in a dynamic table. Continuing in this way, we will get more and more c-triads until the dynamic table becomes stable after sufficient large loops. The basic algorithm is given in Algorithm 1, where D is a subdomain of U , \u03a8 decides when the procedure terminates, TRIAD records the number of c-triads obtained when the procedure terminates, and LASTFOUND records the time when the last triad is first recorded. For a calculus with unknown CT, the condition may be assigned with the form LOOP \u2264 1, 000, 000 (i.e., the algorithm loops one million times), or LOOP \u2264 LASTFOUND +100, 000 (i.e., until no new c-triad is found in the last one hundred thousand loops), or their conjunction. If the CT is known and we want to double-check it, then the boundary condition could be set to TRIAD < N to save time, where N is the number of c-triads of the calculus.\nWe make further explanations here. SupposeM is a qualitative calculus on U . Recall U is often an infinite set. We need first to decide a finite subdomain D of U , as computers only deal with numbers with finite precision. Once D is chosen, we run the loop, say, one million times. Therefore, one million instances of triples of elements in D are generated. We then record all computed c-triads in a dynamic table. It is reasonable to claim that the table is stable if no new entry has been recorded after a long time (e.g. as long as the time has past to get all recorded c-triads). Because D is finite, Algorithm 1 will generate a stable table after a sufficient large number of iterations.\nWe observe that a finite subdomain D may restrict the possible c-triads if it is selected inappropriately. We introduce a notion to characterise the appropriateness of a subdomain.\nDefinition 4. SupposeM is a qualitative calculus defined on the universeU . A nonempty subset D of U is called a 3-complete subdomain ofM if each consistent basic network as specified in Eq. 2 has a solution in D.\n5 Algorithm 1: Computing the Composition Table ofM Input: A subdomain D ofM, and a boundary condition \u03a8 related toM Output: The Composition Table CT ofM Initialise CT ; LOOP \u2190 0; TRIAD \u2190 0; LASTFOUND \u2190 0; while \u03a8 do\nLOOP \u2190 LOOP + 1; Generate triple of objects (a, b, c) \u2208 D3 randomly; \u03b1\u2190 the basic relation between a and b; \u03b2 \u2190 the basic relation between b and c; \u03b3 \u2190 the basic relation between a and c; \u03b1\u2032 \u2190 the basic relation between b and a; \u03b2\u2032 \u2190 the basic relation between c and b; \u03b3\u2032 \u2190 the basic relation between c and a; for \u3008r, s, t\u3009 \u2208 {\u3008\u03b1, \u03b3, \u03b2\u3009, \u3008\u03b1\u2032, \u03b2, \u03b3\u3009, \u3008\u03b3, \u03b1, \u03b2\u2032\u3009, \u3008\u03b2, \u03b1\u2032, \u03b3\u2032\u3009, \u3008\u03b2\u2032, \u03b3\u2032, \u03b1\u2032\u3009, \u3008\u03b3\u2032, \u03b2\u2032, \u03b1\u3009} do\nif \u3008r, s, t\u3009 is not in CT then Record triad \u3008r, s, t\u3009 to CT ; TRIAD \u2190 TRIAD + 1; LASTFOUND \u2190 LOOP;\nend end end return CT .\nIf D is a 3-complete subdomain, then, for each c-triad \u3008\u03b1, \u03b3, \u03b2\u3009, there are a, b, c in D such that (a, b) \u2208 \u03b1, (b, c) \u2208 \u03b2, and (a, c) \u2208 \u03b3. Therefore, to determine the CT ofM, we need only consider instances of triples in D.\nNote that no matter whether the subdomain D is 3-complete, the algorithm always generates \u2018valid\u2019 triads, in the sense that any 3-tuple \u3008\u03b1, \u03b3, \u03b2\u3009 in the CT generated is indeed a c-triad of the calculus. However, the algorithm only converges to the correct CT when the subdomain D is 3-complete.\nIt is of course important questions to find 3-complete subdomains or to decide if a particular subdomain is 3-complete. However, it seems that there is no general answer for arbitrary qualitative calculi, since the questions are closely related to the semantics of the calculi. For a particular calculus, e.g. IA, this can be verified by formal analysis. Note that a superset of a 3-complete subdomain is also 3-complete. To make sure a chosen subdomain D is 3-complete, we often apply the algorithm on several of its supersets at the same time. If the same number is generated for all subdomains, we tend to believe that D is 3-complete and the generated table is the CT ofM. Note a formal proof is necessary to guarantee the 3-completeness of D.\nEven if a CT ofM has been somehow obtained, our method can be used to verify its correctness. Double-checking is necessary since computing the CT is error-prone (see the last paragraph of page 1). If there is a c-triad that does not appear in the previously\n6 given table, something must be wrong with the table, because the c-triads computed by Algorithm 1 are always valid. It is also possible that the algorithm terminates with a fragment of given composition table. We then can make theoretical analysis to see if the missing c-triads are caused by the incompleteness of the subdomain. If so, we modify the subdomain and run the algorithm again, otherwise, the missing c-triads are likely to be invalid c-triads.\nAnother thing we should keep in mind is how to generate a triple of elements (a, b, c) from D. Note that if D is small (e.g. in the cases of PA and IA), we can generate all possible triples. If D contains more than 1000 elements, then it will be necessary to generate the triples randomly as there are over a billion different triples. The distribution over D may affect the efficiency of the algorithm. Assuming that we have very limited knowledge of the calculusM, it is natural to take a, b and c independently with respect to the uniform distribution. We note that the better we understand the calculus, the more appropriate the distribution we may choose.\nTo increase the efficiency of the algorithm, we sometimes use the algebraic properties of the calculus. For example, if the identity relation id is a basic relation, then by \u03b1 \u25e6w id = \u03b1 = id \u25e6w \u03b1 and id \u2286 \u03b1 \u25e6w \u03b1\u223c, we need not compute the c-triads involving id, where \u03b1\u223c is the converse of \u03b1. This is to say, the algorithm only needs to generate pairwise different elements. As another example, suppose that the calculus is closed under converse, i.e. the converse of a basic relation is still a basic relation. Then in Algorithm 1 we need only compute \u03b1, \u03b2, \u03b3. The other relations and c-triads can be obtained by replacing \u03b1\u2032, \u03b2\u2032, \u03b3\u2032 in the algorithm by, respectively, \u03b1\u223c, \u03b2\u223c, \u03b3\u223c. Similar results have been reported in [18].\nIn the following we examine three important examples. All experiments were conducted on a 3.16 GHZ Intel Core 2 Duo CPU with 3.25 GB RAM running Windows XP. Note the results rely on the random number generator. As our aim is to show the feasibility of the algorithm rather than investigating the efficiency issues, we only provide one group of the results and do not make any statistical analysis."}, {"heading": "3.1 The Interval Algebra and the INDU Calculus", "text": "We start with the best known qualitative calculus.\nExample 2 (Interval Algebra). Let U be the set of closed intervals on the real line. Thirteen binary relations between two intervals x = [x\u2212, x+] and y = [y\u2212, y+] are defined in Table 2. The Interval Algebra [2] is the Boolean algebra generated by these thirteen JEPD relations.\nThe CT for IA has been computed in 1983 in Allen\u2019s famous work. When applying Algorithm 1 to IA, we do not consider all intervals. Instead, we restrict the domain to the set of all intervals contained in [0,M) that have integer nodes\nDM = {[p, q]|p, q \u2208 Z, 0 \u2264 p < q < M},\nand use uniform distribution to choose random intervals. It is easy to see that the size of the domain isM(M\u22121)/2. Note that to converge fast and generate all entries, we need to choose an appropriate M . If M is too small, then it is possible that some c-triads can\n7\nnot be instantiated. On the other hand, ifM is too big, relations that require one or more exact matches (such as m in IA and m= in the INDU calculus to be introduced in the next example) is very hard to generate, i.e. the probability of generating such an instance is very small. For a new qualitative calculus, there is no general rules for choosing M . Usually, pilot experiments are necessary to better understand the characteristics of the calculus.\nTable 3 summarises the results for M = 4 to M = 20. In the experiment, we generate one million instances of triples of elements for each domain DM . In all cases the dynamic table becomes stable in less than 50,000 loops. When the table becomes stable, the numbers of triads computed are not always the correct one (that is 409). This is mainly because the domain is too small. ForM bigger than or equal to six, we always get the correct number of triads.2 The loops needed (i.e. LASTFOUND) vary from less than a thousand to more than 43 thousand (see Table 3). In general, the smaller the domain is the more efficient the algorithm is.\nExample 3 (INDU calculus). The INDU calculus [5] is a refinement of IA. For each pair of intervals a, b, INDU allows us to compare the durations of a, b. This means, some IA relations may be split into three sub-relations. For example, b is split into three relations b<,b=,b>. Similar situations apply to m,o,oi,mi, and bi. The other seven relations have no proper sub-relations. Therefore, INDU has 25 basic relations.\nINDU is quite unlike IA. For example, it is not closed under composition, and a path-consistent basic network is not necessarily consistent [19].\n2 The 3-completeness of D6 follows from the fact that each consistent IA network involving three variables has a solution in D6.\n8\nApplying our algorithm to INDU, we use the same subdomain DM as for IA. From Table 4 we can see that D6 is no longer 3-complete: more than 1000 c-triads do not appear in the stable table. The table becomes complete inD11, which has 2053 c-triads. The 3-completeness of D11 is confirmed by the following proposition.\nProposition 3. The INDU calculus has at most 2053 c-triads.\nProof (Sketch). For any three INDU relations \u03b1?1 , \u03b2?2 , \u03b3?3 (?1, ?2, ?3 \u2208 {<,=, >}), it is easy to see that \u3008\u03b1?1 , \u03b3?2 , \u03b2?3\u3009 is a valid c-triad of INDU only if \u3008\u03b1, \u03b3, \u03b2\u3009 is a valid c-triad of IA and \u3008?1, ?2, ?3\u3009 is a valid c-triad of PA. We note that for IA relations in {d, s, f,eq, si, fi,di}, only d<, s<, f<,eq=, si>, fi>,di> are valid INDU relations. It is routine to check that there are only 2053 triples of INDU relations that satisfy the above two constraints. We recall that IA has 409 c-triads (see Table 3), and PA has 13 c-triads (see Table 1). ut\nSince 2053 valid c-triads are recorded by running the algorithm on D11 for INDU, we know INDU has precisely 2053 c-triads, and D11 is 3-complete for INDU. Moreover, we have that \u3008\u03b1?1 , \u03b3?2 , \u03b2?3\u3009 is a valid c-triad of INDU if and only if \u3008\u03b1, \u03b3, \u03b2\u3009 is a valid c-triad of IA and \u3008?1, ?2, ?3\u3009 is a valid c-triad of PA.\nIt seems that this is the first time that the CT of INDU has been computed."}, {"heading": "3.2 The Oriented Point Relation Algebra", "text": "In the OPRAm calculus, where m is a parameter characterizing its granularity, each object is represented as an oriented point (o-point for short) in the plane. Each o-point has an orientation. Based on which, 2m \u2212 1 other directions are introduced according to the chosen granularity. Any other o-point is located on either a ray or in a section between two consecutive rays. Each of these rays and sections is assigned an integer from 0 to 4m\u2212 1. The relative directional information of two o-points A,B is uniquely encoded in a pair of integer numbers (s, t), where s is the ray or section of A in which B is located, and t is the ray or section of B in which A is located. Such a relation is also written as Am\u2220tsB. In the case that the locations of A and B coincide, the relation between A and B is written as m\u2220sB, where s is the ray or section of A in which the orientation of B is located. Therefore, there are 4m(4m + 1) basic relations in OPRAm.\nThere are two natural ways to represent o-points. One uses the Cartesian coordinate system, the other use polar coordinate system. We next show the choice of coordinate system will significantly affect the experimental results, which are compared with that of [14].\nIn the Cartesian coordinate system, an o-point P is represented by its coordination (x, y) and its orientation \u03c6.\nDefinition 5. Let M1 and M2 be two positive integers. We define a Cartesian based subdomain of OPRAm as\nDc(M1,M2) = {((x, y), \u03c6) : x, y \u2208 [\u2212M1,M1] \u2229 Z, \u03c6 \u2208 \u03a6M2},\nwhere \u03a6M2 \u2261 {0, 2\u03c0/M2, \u00b7 \u00b7 \u00b7 , (M2 \u2212 1)/M2 \u00d7 2\u03c0}.\nOur experimental results show that, forOPRA1, the algorithm converges and generates the correct CT for subdomains with M1 \u2265 2 and M2 \u2208 {8, 16}. That is, the smallest 3-complete subdomain is Dc(2, 8).\nFor OPRA2, however, the algorithm does not compute the desired CT in ten million loops. Actually, it is impossible to compute the desired CT if we use Cartesian coordination. Consider the following example. Suppose A,B,C are three o-points, such\n10\nthat 4ABC is an acute triangle, and the orientation of A is the same as the direction from A to B, the orientations of B and C are similar. In this configuration, we have A2\u222010B, B2\u2220 1 0C, and A2\u2220 0 1C. This configuration, however, cannot be realised in a Cartesian based subdomain.3\nBased on the above observation, we turn to the polar coordinated representation. In the polar coordinate system, an o-point P is represented by its polar coordination (\u03c1, \u03b8) and its orientation \u03c6.\nDefinition 6. Let M1 and M2 be two positive integers. We define a polar coordinated subdomain of OPRAm as\nDp(M1,M2) = {((\u03c1, \u03b8), \u03c6) : \u03c1 \u2208 [0,M1] \u2229 Z, \u03b8, \u03c6 \u2208 \u03a6M2},\nwhere \u03a6M2 \u2261 {0, 2\u03c0/M2, \u00b7 \u00b7 \u00b7 , (M2 \u2212 1)/M2 \u00d7 2\u03c0}. As in Cartesian based subdomains, the parameter M2 determines if a domain is complete, while M1 determines the efficiency of the algorithm. For OPRA1, we have D(M1,M2) is a 3-complete subdomain if M1 \u2265 2 and M2 = 6, 8, 10, 12, 16 (see Table 7); for OPRA2, we have D(M1,M2) is 3-complete if M1 \u2265 4 and M2 = 6, 10, 12, 16 (see Table 8)."}, {"heading": "3.3 The Region Connection Calculus", "text": "Our algorithm works very well for simple objects like points and intervals. We next consider a region-based topological calculus RCC-8. It is worth noting that an auto-\n3 The proof of this statement is much involved and omitted in this paper.\n11\nmated derivation of the composition table was reported in [20] for a similar calculus (the 9-intersection model).\nExample 4 (RCC-8 algebra). Let U be the set of bounded plane regions (i.e. nonempty regular closed sets in the plane). Five binary relations are defined in Table 9. The RCC-8 algebra [4] is the Boolean algebra generated by these five relations, the identity relation EQ, and the converses of TPP and NTPP.\nPlane regions are much more complicated to represent than intervals or o-points. In most cases they are approximated by polygons or digital regions (i.e., a subset of Z2). Furthermore, it is natural to take a shot on simple objects at the beginning, since they are easy to deal with and important in applications. For RCC-8, we make experiments over two subdomains: rectangles and disks. The experiments show that these subdomains are good enough for our purpose, but when necessary, we could also consider general polygons or bounded digital regions.\nWe first consider subdomains whose elements are rectangles sides of which are parallel to the two axes. We introduce one parameter M , and require the four nodes be points in [0,M) \u00d7 [0,M) \u2229 Z2. The complete RCC-8 CT has 193 table entries.\n12\nSince EQ \u25e6 EQ = EQ, we know \u3008EQ,EQ,EQ\u3009 is a c-triad. The other 192 c-triads can be confirmed using our algorithm. In Table 10, we show the results of running the algorithm 10 million times and require M vary from 4 to 20. We can see from the table that DM is a 3-complete subdomain only if M \u2265 6.\nWe next consider subdomains consisting of disks (see Table 11). We introduce one parameter M , and require x, y \u2208 [0,M ] \u2229 Z, r \u2208 [1,M ] \u2229 Z, where (x, y) and r are, respectively, the centre and the radius of the closed diskB((x, y), r)). In this case,M = 5 is good enough to generate all c-triads. We notice that the number of loops needed (i.e. LASTFOUND) increases quickly as M increases. For example, when M = 20, the dynamic table becomes stable after nearly 3 million loops. This is mainly due to that an instance of the c-triad \u3008NTPP,NTPP,NTPP\u3009 is very hard to generate. The \u2018hard\u2019 c-triad is, however, easy to prove."}, {"heading": "4 Further Discussions", "text": "In the last section, we have applied our algorithm to generate the CTs of IA, INDU, OPRA1, OPRA2, and RCC-8. In this section, we discuss the advantages and disadvantages of our method. The algorithm works very well for simple objects like points, intervals, rectangles, and disks, especially in a small subdomain. For a qualitative calculus with less than 100 basic relations, it can compute the CT in a few minutes.\nWe also considered larger calculi. The Oriented Point Relation Algebras OPRA3 and OPRA4 have, respectively, 156 and 272 basic relations. Applying our algorithm to an appropriate polar coordinated subdomain Dp(M1,M2), 261,576 and 1,082,752 c-triads, respectively, have been found in a few hours, which coincide with those computed in [14]. This implies that the corresponding subdomains are 3-complete.\nFor calculi defined over regions, the main obstacle of using our approach is the cost of generating random regions. For RCC-8, we circumvent this obstacle by taking rectangles and disks. But this circumvention does not work for the Cardinal Direction Calculus (CDC) [7], as the shape of the region matters in this calculus. The CDC contains 218 basic relations. We run our algorithm for the CDC on the subdomain containing digital regions in [0, 5]\u00d7 [0, 5]4, using normal distribution. The result is not ideal. After one day, we have computed about 60% of the total 2.2 million c-triads of the CDC. Improvements will be made later, adopting more appropriate or heuristic distribution.\n4 The 3-completeness of this subdomain is confirmed by results reported in [16].\n13\nIn many applications of qualitative calculi, the objects used are often restricted. TakeOPRA2 as example. In many real world applications, e.g. the Interstate Highway System of the USA, oriented objects are all taken from a underlying graph. In these cases, each o-point has only a few possible directions. To support reasoning with this domain, we had better have a customised OPRA2 calculus, together with a customised CT. Our algorithm works perfect to this end. For example, consider the restriction of OPRA2 calculus on Z2. Each o-point in this calculus has integer coordinations and has one of the four orientations from {0, \u03c0/2, \u03c0, 3\u03c0/2}. Using our algorithm, the CT for this customised calculus has been generated in a few minutes. Experiment result shows that this customised calculus has 2704 c-triads.\nEven for the well-known Interval Algebra, our algorithm suggests a new viewpoint for efficient reasoning. We note that, based on our method, we can easily compute the probability of each basic relation in the weak composition of any two basic IA relations. This may be used in approximate temporal reasoning, especially when the application domain has a different structure than the universe of IA. Work towards this direction will be reported in another paper."}, {"heading": "5 Conclusion", "text": "In this paper, we introduced a general and simple semi-automatic method for computing the composition tables of qualitative calculi. The described method is a very natural approach, and similar idea was used to derive composition tables for an elaboration of RCC with convexity [21], and for a ternary directional calculus [22]. The table computed in [21] was acknowledged there as incomplete. The table computed in [22] is complete, but its completeness was guaranteed by manually checking all geometric configurations that satisfy the table. Except these two works, very little attention has been given to this natural approach in the literature on composition tables. We think a systematic examination is necessary to discover both the strong and weak points of this approach.\nWe implemented the basic algorithm for several well-known qualitative calculi, including the Interval Algebra, INDU,OPRAm for m = 1 \u223c 4, and RCC-8. Our experiments suggest that the proposed method works very well for point-based calculi, but not so well for region-based calculi. In particular, we established, as far as we know, for the first time the correct CT for INDU, and confirmed the validity of the algorithm reported for the OPRA calculi [14]. Our method can be easily integrated into existing qualitative solvers e.g. SparQ [8] or GQR [9]. This provides a partial answer to the challenge proposed in [12].\nRecently, Wolter proposes (in an upcoming article [23]) to derive composition tables by solving systems of polynomial (in)equations over the reals. This approach works well for several point-based calculi, but not always generates the complete composition table.\nOur method relies on the assumption that the qualitative calculus has a small \u2018discretised\u2019 3-complete subdomain. All calculi considered in this paper satisfy this property. It is still open whether all interesting calculi appeared in the literature satisfy this prop-\n14\nerty. Future work will also discuss the applications of our method for reasoning with a customised composition table."}], "references": [{"title": "An interval-based representation of temporal knowledge", "author": ["J.F. Allen"], "venue": "In Hayes, P.J., ed.: IJCAI, William Kaufmann", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1981}, {"title": "Maintaining knowledge about temporal intervals", "author": ["J.F. Allen"], "venue": "Commun. ACM 26(11)", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1983}, {"title": "Constraint propagation algorithms for temporal reasoning", "author": ["M.B. Vilain", "H.A. Kautz"], "venue": "AAAI.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1986}, {"title": "A spatial logic based on regions and connection", "author": ["D.A. Randell", "Z. Cui", "A.G. Cohn"], "venue": "KR.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1992}, {"title": "INDU: An interval and duration network", "author": ["A.K. Pujari", "G.V. Kumari", "A. Sattar"], "venue": "In Foo, N.Y., ed.: Australian Joint Conference on Artificial Intelligence. Volume 1747 of Lecture Notes in Computer Science., Springer", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1999}, {"title": "Representing relative direction as a binary relation of oriented points", "author": ["R. Moratz"], "venue": "In Brewka, G., Coradeschi, S., Perini, A., Traverso, P., eds.: ECAI. Volume 141 of Frontiers in Artificial Intelligence and Applications., IOS Press", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2006}, {"title": "Similarity assessment for cardinal directions between extended spatial objects", "author": ["R.K. Goyal"], "venue": "PhD thesis", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2000}, {"title": "Qualitative spatial representation and reasoning in the sparq-toolbox", "author": ["J.O. Wallgr\u00fcn", "L. Frommberger", "D. Wolter", "F. Dylla", "C. Freksa"], "venue": "In Barkowsky, T., Knauff, M., Ligozat, G., Montello, D.R., eds.: Spatial Cognition. Volume 4387 of Lecture Notes in Computer Science., Springer", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2006}, {"title": "GQR: A fast solver for binary qualitative constraint networks", "author": ["M. Westphal", "S. W\u00f6lfl", "Z. Gantner"], "venue": "AAAI Spring Symposium on Benchmarking of Qualitative Spatial and Temporal Reasoning Systems.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2009}, {"title": "Region connection calculus: Its models and composition table", "author": ["S. Li", "M. Ying"], "venue": "Artif. Intell. 145(1-2)", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2003}, {"title": "Weak composition for qualitative spatial and temporal reasoning", "author": ["J. Renz", "G. Ligozat"], "venue": "In van Beek, P., ed.: CP. Volume 3709 of Lecture Notes in Computer Science., Springer", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2005}, {"title": "The challenge of qualitative spatial reasoning", "author": ["A.G. Cohn"], "venue": "ACM Comput. Surv. 27(3)", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1995}, {"title": "Composition  inOPRAm", "author": ["L. Frommberger", "J.H. Lee", "J.O. Wallgr\u00fcn", "F. Dylla"], "venue": "Technical report, SFB/TR 8, University of Bremen", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2007}, {"title": "Qualitative reasoning about relative direction on adjustable levels of granularity", "author": ["T. Mossakowski", "R. Moratz"], "venue": "CoRR abs/1011.0098", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2010}, {"title": "Composing cardinal direction relations", "author": ["S. Skiadopoulos", "M. Koubarakis"], "venue": "Artif. Intell. 152(2)", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2004}, {"title": "Reasoning about cardinal directions between extended objects", "author": ["W. Liu", "X. Zhang", "S. Li", "M. Ying"], "venue": "Artif. Intell. 174(12-13)", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2010}, {"title": "What is a qualitative calculus? a general framework", "author": ["G. Ligozat", "J. Renz"], "venue": "In Zhang, C., Guesgen, H.W., Yeap, W.K., eds.: PRICAI. Volume 3157 of Lecture Notes in Computer Science., Springer", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2004}, {"title": "Some observations and puzzles about composing spatial and temporal relations", "author": ["B. Bennett"], "venue": "in R. Rodr\u0131\u0301guez (ed.), Proceedings ECAI-94 Workshop on Spatial and Temporal Reasoning.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1994}, {"title": "On the consistency problem for the INDU calculus", "author": ["P. Balbiani", "J.F. Condotta", "G. Ligozat"], "venue": "J. Applied Logic 4(2)", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2006}, {"title": "Deriving the composition of binary topological relations", "author": ["M.J. Egenhofer"], "venue": "J. Vis. Lang. Comput. 5(2)", "citeRegEx": "20", "shortCiteRegEx": null, "year": 1994}, {"title": "Qualitative spatial reasoning and representation", "author": ["A.G. Cohn", "D.A. Randell", "Z. Cui", "B. Bennett"], "venue": "In Carret\u00e9, N.P., Singh, M.G., eds.: Qualitative Reasoning and Decision Technologies, Barcelona, CIMNE", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1993}, {"title": "A reasoning system of ternary projective relations", "author": ["E. Clementini", "S. Skiadopoulos", "R. Billen", "F. Tarquini"], "venue": "IEEE Trans. on Knowl. and Data Eng. 22", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": "Since Allen\u2019s seminal work of Interval Algebra (IA) [1,2], qualitative calculi have been widely used to represent and reason about temporal and spatial knowledge.", "startOffset": 52, "endOffset": 57}, {"referenceID": 1, "context": "Since Allen\u2019s seminal work of Interval Algebra (IA) [1,2], qualitative calculi have been widely used to represent and reason about temporal and spatial knowledge.", "startOffset": 52, "endOffset": 57}, {"referenceID": 2, "context": "Except IA, other well known binary qualitative calculi include the Point Algebra [3], the Region Connection Calculi RCC-5 and RCC-8 [4], the INDU calculus [5], the Oriented Point Relation Algebras OPRA [6], and the Cardinal Direction Calculus (CDC) [7], etc.", "startOffset": 81, "endOffset": 84}, {"referenceID": 3, "context": "Except IA, other well known binary qualitative calculi include the Point Algebra [3], the Region Connection Calculi RCC-5 and RCC-8 [4], the INDU calculus [5], the Oriented Point Relation Algebras OPRA [6], and the Cardinal Direction Calculus (CDC) [7], etc.", "startOffset": 132, "endOffset": 135}, {"referenceID": 4, "context": "Except IA, other well known binary qualitative calculi include the Point Algebra [3], the Region Connection Calculi RCC-5 and RCC-8 [4], the INDU calculus [5], the Oriented Point Relation Algebras OPRA [6], and the Cardinal Direction Calculus (CDC) [7], etc.", "startOffset": 155, "endOffset": 158}, {"referenceID": 5, "context": "Except IA, other well known binary qualitative calculi include the Point Algebra [3], the Region Connection Calculi RCC-5 and RCC-8 [4], the INDU calculus [5], the Oriented Point Relation Algebras OPRA [6], and the Cardinal Direction Calculus (CDC) [7], etc.", "startOffset": 202, "endOffset": 205}, {"referenceID": 6, "context": "Except IA, other well known binary qualitative calculi include the Point Algebra [3], the Region Connection Calculi RCC-5 and RCC-8 [4], the INDU calculus [5], the Oriented Point Relation Algebras OPRA [6], and the Cardinal Direction Calculus (CDC) [7], etc.", "startOffset": 249, "endOffset": 252}, {"referenceID": 7, "context": "Moreover, qualitative constraint solvers have been developed to facilitate composition-based reasoning [8,9].", "startOffset": 103, "endOffset": 108}, {"referenceID": 8, "context": "Moreover, qualitative constraint solvers have been developed to facilitate composition-based reasoning [8,9].", "startOffset": 103, "endOffset": 108}, {"referenceID": 9, "context": "[10,11]) of two relations \u03b1, \u03b2 inM, namely the smallest relation inM which contains the usual composition of \u03b1 and \u03b2.", "startOffset": 0, "endOffset": 7}, {"referenceID": 10, "context": "[10,11]) of two relations \u03b1, \u03b2 inM, namely the smallest relation inM which contains the usual composition of \u03b1 and \u03b2.", "startOffset": 0, "endOffset": 7}, {"referenceID": 11, "context": "[12] first noticed this problem and identified it as a challenge for computer scientists.", "startOffset": 0, "endOffset": 4}, {"referenceID": 5, "context": "72, 156, 272 for m = 2, 3, 4, respectively) basic relations [6], while the CDC contains 218 basic relations [7].", "startOffset": 60, "endOffset": 63}, {"referenceID": 6, "context": "72, 156, 272 for m = 2, 3, 4, respectively) basic relations [6], while the CDC contains 218 basic relations [7].", "startOffset": 108, "endOffset": 111}, {"referenceID": 5, "context": "For the OPRA calculi, the algorithm presented in the original paper [6] contains gaps and errors.", "startOffset": 68, "endOffset": 71}, {"referenceID": 12, "context": "Later, [13] presented the second algorithm, which is quite lengthy and cumbersome.", "startOffset": 7, "endOffset": 11}, {"referenceID": 13, "context": "Another simple algorithm has also been proposed recently [14].", "startOffset": 57, "endOffset": 61}, {"referenceID": 6, "context": "As for the CDC, [7] first studied the weak composition.", "startOffset": 16, "endOffset": 19}, {"referenceID": 14, "context": "Later, [15] noticed errors in Goyal\u2019s method and gave a new algorithm to compute the weak composition.", "startOffset": 7, "endOffset": 11}, {"referenceID": 15, "context": "Unfortunately, in several cases, their algorithm does not generate the correct weak composition (see [16]).", "startOffset": 101, "endOffset": 105}, {"referenceID": 16, "context": "[17,11] for more information.", "startOffset": 0, "endOffset": 7}, {"referenceID": 10, "context": "[17,11] for more information.", "startOffset": 0, "endOffset": 7}, {"referenceID": 17, "context": "Similar results have been reported in [18].", "startOffset": 38, "endOffset": 42}, {"referenceID": 1, "context": "The Interval Algebra [2] is the Boolean algebra generated by these thirteen JEPD relations.", "startOffset": 21, "endOffset": 24}, {"referenceID": 4, "context": "The INDU calculus [5] is a refinement of IA.", "startOffset": 18, "endOffset": 21}, {"referenceID": 18, "context": "For example, it is not closed under composition, and a path-consistent basic network is not necessarily consistent [19].", "startOffset": 115, "endOffset": 119}, {"referenceID": 13, "context": "We next show the choice of coordinate system will significantly affect the experimental results, which are compared with that of [14].", "startOffset": 129, "endOffset": 133}, {"referenceID": 19, "context": "mated derivation of the composition table was reported in [20] for a similar calculus (the 9-intersection model).", "startOffset": 58, "endOffset": 62}, {"referenceID": 3, "context": "The RCC-8 algebra [4] is the Boolean algebra generated by these five relations, the identity relation EQ, and the converses of TPP and NTPP.", "startOffset": 18, "endOffset": 21}, {"referenceID": 13, "context": "Applying our algorithm to an appropriate polar coordinated subdomain Dp(M1,M2), 261,576 and 1,082,752 c-triads, respectively, have been found in a few hours, which coincide with those computed in [14].", "startOffset": 196, "endOffset": 200}, {"referenceID": 6, "context": "But this circumvention does not work for the Cardinal Direction Calculus (CDC) [7], as the shape of the region matters in this calculus.", "startOffset": 79, "endOffset": 82}, {"referenceID": 4, "context": "We run our algorithm for the CDC on the subdomain containing digital regions in [0, 5]\u00d7 [0, 5]4, using normal distribution.", "startOffset": 80, "endOffset": 86}, {"referenceID": 4, "context": "We run our algorithm for the CDC on the subdomain containing digital regions in [0, 5]\u00d7 [0, 5]4, using normal distribution.", "startOffset": 88, "endOffset": 94}, {"referenceID": 15, "context": "4 The 3-completeness of this subdomain is confirmed by results reported in [16].", "startOffset": 75, "endOffset": 79}, {"referenceID": 20, "context": "The described method is a very natural approach, and similar idea was used to derive composition tables for an elaboration of RCC with convexity [21], and for a ternary directional calculus [22].", "startOffset": 145, "endOffset": 149}, {"referenceID": 21, "context": "The described method is a very natural approach, and similar idea was used to derive composition tables for an elaboration of RCC with convexity [21], and for a ternary directional calculus [22].", "startOffset": 190, "endOffset": 194}, {"referenceID": 20, "context": "The table computed in [21] was acknowledged there as incomplete.", "startOffset": 22, "endOffset": 26}, {"referenceID": 21, "context": "The table computed in [22] is complete, but its completeness was guaranteed by manually checking all geometric configurations that satisfy the table.", "startOffset": 22, "endOffset": 26}, {"referenceID": 13, "context": "In particular, we established, as far as we know, for the first time the correct CT for INDU, and confirmed the validity of the algorithm reported for the OPRA calculi [14].", "startOffset": 168, "endOffset": 172}, {"referenceID": 7, "context": "SparQ [8] or GQR [9].", "startOffset": 6, "endOffset": 9}, {"referenceID": 8, "context": "SparQ [8] or GQR [9].", "startOffset": 17, "endOffset": 20}, {"referenceID": 11, "context": "This provides a partial answer to the challenge proposed in [12].", "startOffset": 60, "endOffset": 64}], "year": 2011, "abstractText": "Originating from Allen\u2019s Interval Algebra, composition-based reasoning has been widely acknowledged as the most popular reasoning technique in qualitative spatial and temporal reasoning. Given a qualitative calculus (i.e. a relation model), the first thing we should do is to establish its composition table (CT). In the past three decades, such work is usually done manually. This is undesirable and error-prone, given that the calculus may contain tens or hundreds of basic relations. Computing the correct CT has been identified by Tony Cohn as a challenge for computer scientists in 1995. This paper addresses this problem and introduces a semi-automatic method to compute the CT by randomly generating triples of elements. For several important qualitative calculi, our method can establish the correct CT in a reasonable short time. This is illustrated by applications to the Interval Algebra, the Region Connection Calculus RCC-8, the INDU calculus, and the Oriented Point Relation Algebras. Our method can also be used to generate CTs for customised qualitative calculi defined on restricted domains.", "creator": "LaTeX with hyperref package"}}}