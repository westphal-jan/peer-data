{"id": "1105.5443", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-May-2011", "title": "The Gn,m Phase Transition is Not Hard for the Hamiltonian Cycle Problem", "abstract": "unobtainable Using suddle an tasho improved qveras backtrack ahs algorithm 700-page with ghost sophisticated pruning 50.83 techniques, tbq we revise previous 24-18 observations correlating clades a 22-metre high unbreachable frequency fratta of hard to solve Hamiltonian Cycle instances 750s with the greenbaum Gn, kunani m boromir phase transition between tantely Hamiltonicity and morlan non - Hamiltonicity. Instead all tested graphs aural of groundout 100 pulsate to 1500 sukalo vertices are easily breadwinners solved. turanj When ivb we severiano artificially plattenbau restrict the degree klos sequence with a bounded maximum 1983-1990 degree, although there is backstroke some increase mou in cob\u00e1n difficulty, al-rabi the fulford frequency 2,106 of hard prebaked graphs rendimiento is still waghef low. 108.16 When koprivica we cauterization consider b-q more briganti regular graphs partaken based taillamps on fivethirtyeight a generalization of knight ' s cherifi tours, abdulwahed we observe katto frequent instances girth of really sprite hard graphs, motorbike but infra on virtue these the average ketuvim degree is 737-200s bounded mawson by ldt a coppersmith constant. bagler We design repco a 24-hectare set oppewall of graphs with y.p. a feature kawwaz our algorithm is unable imeri to detect christic and 12000 so piezas are very canak hard for kombinat our algorithm, environment but in these schwalm we can servalan vary sideshow the mongalla average bejbl degree from alexandroni O (1) to O (palmolive n ). noodle We have so closeout far self-inflicted found no hbu class baldrige of greenspond graphs correlated s1p with the mellowing Gn, jenufa m phase transition perles which bia\u0142ystok asymptotically produces a life-like high cus frequency of hard brickey instances.", "histories": [["v1", "Fri, 27 May 2011 01:45:52 GMT  (127kb)", "http://arxiv.org/abs/1105.5443v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["j culberson", "b vandegriend"], "accepted": false, "id": "1105.5443"}, "pdf": {"name": "1105.5443.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["basil@cs.ualberta.ca", "joe@cs.ualberta.ca"], "sections": [{"heading": null, "text": "Journal of Arti cial Intelligence Research 9 (1998) 219-245 Submitted 3/98; published 11/98 The Gn;m Phase Transition is Not Hard for the HamiltonianCycle ProblemBasil Vandegriend basil@cs.ualberta.caJoseph Culberson joe@cs.ualberta.caDepartment of Computing Science, University of Alberta,Edmonton, Alberta, Canada, T6G 2H1 AbstractUsing an improved backtrack algorithm with sophisticated pruning techniques, we re-vise previous observations correlating a high frequency of hard to solve Hamiltonian cycleinstances with the Gn;m phase transition between Hamiltonicity and non-Hamiltonicity.Instead all tested graphs of 100 to 1500 vertices are easily solved.When we arti cially restrict the degree sequence with a bounded maximum degree,although there is some increase in di culty, the frequency of hard graphs is still low. Whenwe consider more regular graphs based on a generalization of knight's tours, we observefrequent instances of really hard graphs, but on these the average degree is bounded by aconstant. We design a set of graphs with a feature our algorithm is unable to detect and soare very hard for our algorithm, but in these we can vary the average degree from O(1) toO(n). We have so far found no class of graphs correlated with the Gn;m phase transitionwhich asymptotically produces a high frequency of hard instances.1. IntroductionGiven a graph G = (V;E); jV j = n; jEj = m, the Hamiltonian cycle problem is to nd acycle C = (v1; v2; : : : ; vn) such that vi 6= vj for i 6= j, (vi; vi+1) 2 E and (vn; v1) 2 E. Asfor any NP-C problem, we expect solving it to require exponential time in the worst caseon arbitrary graphs (assuming P 6= NP). However, in recent years researchers examiningvarious NP-C problems such as SAT and graph coloring have discovered that the majorityof graphs are easy for their algorithms to solve. Only graphs with speci c characteristics orgraphs which lie within a narrow band (according to some parameter) seem to be hard tosolve for these problems.It is known (P osa, 1976; Koml os & Szemer edi, 1983) that under a random graph model(Gn;m) as the edge density increases there is a sharp threshold (the phase transition) suchthat below that edge density the probability of a Hamiltonian cycle is 0, while above it theprobability is 1. Previous research (Section 2.1) suggested that there is a high correlationof di cult problems with instances generated with edge density near the phase transition.Using an improved Hamiltonian cycle backtrack algorithm (Section 3) that employs variouspruning operators and an iterated restart technique, we observe no hard instances at thetransition for large n. Section 4 describes our results on Gn;m and related random graphs.In an attempt to nd a higher frequency of hard graphs, in Section 5 we examine a lowdegree random graph class we call Degreebound graphs. However, these graphs are alsousually easy for our backtrack algorithm, although we do nd a few hard graphs. Analysisof these graphs indicates a test for non-Hamiltonian instances discussed in Section 5.3. Inc 1998 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.\nVandegriend & CulbersonSection 6 we examine a graph class based on a generalization of the knight's tour problem.These graphs are signi cantly harder for our algorithm in general. In Section 7 we present aconstructed graph class which produces exponential behavior for our backtrack algorithm.Our experimental results provide evidence that the average degree of a graph is not asu cient indicator for hard graphs for the Hamiltonian cycle problem. With our backtrackalgorithm, the phase transition regions of the Gn;m and Degreebound graph models aregenerally asymptotically easy.2. A Discussion of Hardness and Previous WorkThe concept of hardness of instances and hard regions within graph classes, considered froman empirical basis, is not easy to de ne. In order to clarify what we mean, in this sectionwe present our notions of hardness, relating this to previous work.2.1 What is Hardness?A problem of size n is a set n of instances. For the Hamiltonian cycle problem, n isthe set of undirected graphs on n vertices. Any discussion of the hardness of a particularinstance of a problem is always with respect to an algorithm (or set of algorithms). Ingeneral, di erent algorithms will perform di erently on the instance. Furthermore, for eachparticular instance of Hamiltonian cycle there is an associated algorithm that either cor-rectly answers NO or outputs a cycle in O(n) time. To meaningfully talk about the hardnessof an instance, we must assume a xed algorithm (or a nite class of algorithms) that isappropriate for a large (in nite) class of instances, and then consider how the algorithmperforms on the instance. Hardness of an instance is always a measure of performancerelative to an algorithm.We are left with the question of how much work an algorithm must do before we considerthe instance hard for it. Note that for a single instance the distinction between polynomialand exponential time is moot. Ideally, we would like to require the algorithm to take anexponential (i.e. an for some a > 1) number of steps as size n increases. Note that empiricalcorroboration of such is practically impossible for sets of large instances. In practice, wemust be content with evidence such as failure to complete within a reasonable time forlarger instances.We would also like an instance to exhibit some robustness before we consider it hard fora given algorithm. Ideally, for graph problems we would at a minimum require the instanceto remain hard with high probability under a random relabeling of the vertices. Relabelingthe vertices produces an isomorphic copy of the graph, preserving structural properties suchas degree, connectivity, Hamiltonicity, cut sets, etc. The design of algorithms is typicallybased on identifying and using such properties, and as far as possible e ciency should beindependent of the arbitrary assignment of labels.Let us refer to a (probabilistic) problem class as a pair ( n;Pn), where Pn(x) is theprobability of the instance x given that we are selecting from n. Problem classes aresometimes called ensembles in the Arti cial Intelligence literature (Hogg, 1998). The usualclasses for graph problems are Gn;p, where to generate an n vertex graph, each pair ofvertices is included as an edge with probability p, and Gn;m where m distinct edges are220\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle Problemselected at random and placed in the graph. These two models are related (Palmer 1985).For this paper we use the Gn;m model.We do not consider mean or average run times in our de nitions. The primary reasonis that for exponentially small sets of exponentially hard instances, it is impractical todetermine the average with any reasonable assurance. For example, if 1=2n of the instancesrequire (n22n) time and the remainder are solved in O(n2) time then the average time isquadratic, while if the frequency increases to 1=20:9n the average time is exponential. Evenfor n = 100 it would be utterly impractical to distinguish between these two frequencieswith empirical studies.Furthermore, and for similar reasons, if we want to promote a class as a benchmark classfor testing and comparing algorithms, low frequencies of hard instances are not generallysu cient. We will say that a problem class is maximally hard (with respect to an algorithmor set of algorithms) if the instances generated according to the distribution are hard withprobability going to one as n goes to in nity.As an example of maximally hard classes, empirical evidence suggests that a variety ofhidden coloring graph generators based on the Gn;p model are maximally hard for a largevariety of graph coloring algorithms (Culberson and Luo, 1993). These hard classes areall closely related to a coloring phase transition in random graphs. In general, a phasetransition is de ned by some parameterized probability distribution on the set of instances.As the parameter is varied past a certain threshold value, the asymptotic probability of theexistence of a solution switches sharply from zero to one.Phase transitions are commonly considered to be identi ed with hard subsets of a par-ticular problem (Cheeseman, Kanefsky, & Taylor, 1991). Many NP-C problems can becharacterized by a `constraint' parameter which measures how constrained an instance is.Evaluation of a problem using this constraint parameter typically divides instances intotwo classes: those that are solvable, and those that are unsolvable, with a sharp transitionoccurring between them. When the problem is highly constrained, it is easily determinedthat no solution exists. As constraints are removed, a solution is easily found.Di erent researchers (Cheeseman et al., 1991; Frank & Martel, 1995; Frank, Gent, &Walsh, 1998) have examined phase transitions on random graphs for the Hamiltonian cycleproblem. The obvious constraint parameter is the average degree (or average connectivity)of the graph. As the degree increases, the graph becomes less constrained: it becomes easierboth for a Hamiltonian cycle to exist and for an algorithm to nd one. These researchershave examined how Hamiltonicity changes with respect to the average degree. Frank etal. (1998) and Frank and Martel (1995) experimentally veri ed that when using the Gn;mmodel the phase transition for Hamiltonicity is very close to the phase transition for bicon-nectivity, which occurs when the average degree is approximately lnn (or m = n lnn=2) 1.Cheeseman et al. (1991) experimentally con rmed theoretical predictions by Koml os andSzemer edi (1983) that the phase transition (for the Hamiltonian cycle problem) occurs whenthe average degree is lnn + ln lnn. The papers also provided empirical evidence that thetime required by their backtrack algorithms increased in the region of the phase transitionand noted that the existence of very hard instances appeared to be associated with thistransition.1. Note that the average degree equals 2m=n. 221\nVandegriend & CulbersonAs mentioned above, the k-colorable Gn;p class appears maximally hard for all knownalgorithms with respect to a phase transition de ned by n; p and k, where k n= logb nand b = 1=(1 p). The Hamiltonian cycle Gn;m class on the other hand does not appearmaximally hard for any value of m. In fact, for large n our algorithm almost never takesmore than O(n) backtrack nodes and O(nm) running time.We will use a much weaker requirement and say an instance is quadratically hard if itrequires at least n2 search nodes by the backtrack algorithm described in section 3. Notethat (n2) search nodes would take our algorithm (n3) time. For practical reasons, we willalso use a weaker de nition for robustness, and say that an instance is robustly quadraticallyhard if our algorithm uses at least n2 search nodes when the iterated restart feature is usedwith a multiplying factor of 2. (See section 3 for program details). We say a class isminimally hard if there is some constant > 0 such that the probability of a hard instanceis at least as n!1.In Section 4 we examine Gn;m random graphs using our backtrack algorithm on graphsof up to 1500 vertices. The empirical evidence we collect suggests that in contrast to thegraph coloring situation, the Hamiltonian cycle Gn;m class is not minimally quadraticallyhard, even for m at or near the phase transition, and even if we drop our minimal robustnessrequirement.Note that we do not dispute the claim that hard instances are more likely at the phasetransition than at other values of m, but rather claim that even at the transition theprobability of generating a hard instance rapidly goes to zero with increasing n.2.2 Random Graph Theory and the Phase TransitionThese results are not unexpected when one reviews the theoretical work on this graph class.Since asymptotically the graph becomes Hamiltonian when an edge is added to the lastdegree 1 vertex (Bollob as, 1984), any algorithm that checks for a minimum degree 2will detect almost all non-Hamiltonian graphs. When the graph is Hamiltonian, variousresearchers (Angluin & Valiant, 1979; Bollob as, Fenner, & Frieze, 1987) have proven theexistence of randomized heuristic algorithms which can almost always nd a Hamiltoniancycle in low-order polynomial time. In particular, it is shown (Bollob as et al., 1987) thatthere is a polynomial time algorithm HAM such thatlimn!1Pr (HAM nds a Hamilton cycle) = 8><>: 0 if cn ! 1e e 2c if cn ! c1 if cn !1where m = n=2(lnn+ ln lnn+ cn).Furthermore, as the authors point out, this is the best possible result in the sensethat this is also the asymptotic probability that a Gn;m graph is Hamiltonian, and is theprobability that it has a minimum degree of 2. In other words, the probability of ndinga cycle is the same as the probability of one existing. Given that it is trivial to check theminimum vertex degree of a graph, this does not leave much room for the existence of hardinstances (for HAM and similar algorithms).Another relevant theoretical result is that there is a polynomial time algorithm whichwith probability going to one, nds some Hamiltonian cycle when a graph has a hidden222\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle ProblemHamiltonian cycle together with extra randomly added edges(Broder, Frieze, & Shamir,1994). For the algorithm to work, the average degree of a vertex needs only be a constant.They claim the result can be easily extended to the case that the average degree is a growingfunction of n. This is another indication that Hamiltonian graphs near the phase transitionwill be easy to solve by some algorithm.For a non-Hamiltonian graph to be hard for an algorithm it must contain a featurepreventing the formation of a Hamiltonian cycle which the algorithm cannot easily detect.Suppose a backtrack algorithm does not check for vertices of degree one. The algorithm maythen require exponential backtrack before determining the non-Hamiltonicity of the graph,since the only way it can detect this is by trying all possible paths and failing. However,degree one vertices are easily detectable, and so are not good indicators of hard instances.They also disappear at the phase transition.Similarly, an algorithm might not check for articulation points, and as a result wasteexponential time on what should be easy instances. As n ! 1, the probability of anarticulation point existing (in Gn;m) goes to zero as fast as the probability of the existenceof a vertex of degree less than two. Other features can lead to non-Hamiltonicity of course,such as k-cuts that leave k+1 or more components (Bondy & Murty, 1976), and these couldrequire time proportional to nk to detect. Under the assumption that NP6=CO-NP theremust also exist a set of non-Hamiltonian instances which have no polynomial proof of theirstatus.However, it seems that at the phase transition the larger the feature the less likely itis to occur. In fact, the theoretical results summarized above indicate this must happen.Although we know hard graphs exist, and we may expect these localized types of hardgraphs to be more frequent near the phase transition than elsewhere when using Gn;m togenerate instances, we also expect the probability of such instances to go to zero as nincreases.3. An Overview of our Backtrack AlgorithmOur backtrack algorithm comes from Vandegriend (1998), and is based upon prior work onbacktrack Hamiltonian cycle algorithms (Kocay, 1992; Martello, 1983; Shufelt & Berliner,1994). It has three signi cant features which we will discuss. First, it employs a variety ofpruning techniques during the search that delete edges that cannot be in any Hamiltoniancycle. This pruning is usually based upon local degree information. Second, before thestart of the search the algorithm performs initial pruning and identi es easily detectablenon-Hamiltonian graphs. The third feature is the use of an iterated restart technique.Additionally, the program provides the opportunity to order the selection of the next vertexduring path extension using either a low degree rst ordering, a high degree rst ordering,or a random ordering. We normally use the low degree rst ordering.At each level of the search, after adding a new vertex to the current path, search pruningis used. The pruning identi es edges that cannot be in any Hamiltonian cycle and removesthem from the graph. (Note that if the algorithm backtracks, it adds the edges deletedat the current level of the search back to the graph.) The rst graph con guration thatthe pruning looks for is a vertex x with 2 neighbours a; b of degree 2. Since the edgesincident on a and b must be used in any Hamiltonian cycle, the other edges incident on223\nVandegriend & Culbersonx can be deleted. The second graph con guration that the pruning looks for is a pathP = (v1; : : : ; vk) of forced edges (so v2 : : : vk 1 are of degree 2). If k < n then the edge v1; vkcannot be in any Hamiltonian cycle and can be deleted. If as a result of pruning, the degreeof any vertex drops below 2, then no Hamiltonian cycle is possible and the algorithm mustbacktrack. The use of these operators may yield new vertices of degree 2 and therefore thepruning is iterated until no further changes occur.A pruning iteration takes O(n) time to scan the vertices to check for vertices with twodegree 2 neighbors, and O(n) time to extend all forced degree two paths. Since the iterationsterminate unless a new vertex of degree two is created, at most n iterations can occur. Atmost O(m) edges can be deleted. On backing up from a descendant, the edges are replaced(O(m)) and the next branch is taken. Thus, an easy upper bound on the pruning time fora node searching from a vertex of degree d is O(d(n2 +m)), but this is overly pessimistic.Note that along any branch from the root of the search tree to a leaf, at most n verticescan be converted to degree 2. Also note that along each branch each edge can be deleted atmost once. If the degree is high we seldom take more than a few branches before success.The implementation is such that when several vertices have two neighbors of degree two atthe beginning of an iteration, all redundant edges are removed in a single pass taking timeproportional to n plus the number of edges removed and checked. In practice, on Gn;mgraphs it typically takes O(n+m) time per search node on very easy Hamiltonian instancesas evidenced by CPU measurements, with harder instances taking at most twice as longper search node.Before the start of the recursive search, our algorithm prunes the graph as describedabove. Then the algorithm checks to see if the graph has minimum degree 2, is connected,and has no cut-points. If any of these conditions are not true, then the graph is non-Hamiltonian and the algorithm is nished.Some non-Hamiltonian instances may be very easy or very hard to detect, dependingon which vertex the algorithm chooses as a starting point. In these cases local featuresexist that could be detected if the algorithm starts near them, but otherwise the algorithmmay backtrack many times into the same feature without recognizing that only the featurematters. The seemingly hard instance on Gn for n = 100 discussed in Section 4.2 is such acase. This is one type of \\thrashing,\" and is a common problem in backtracking algorithms.For example, Hogg andWilliams (1994) noticed a sparse set of very hard 3-coloring problemsthat were not at the phase transition. Baker (1995) showed that these instances were mostoften hard as a result of thrashing, and that they could be made easy by backjumping ordependency-directed backtracking.To improve our algorithm's average performance we use an iterated restart technique.The idea is to have a maximum limit M on the number of nodes searched. When themaximum is reached, the search is terminated and a new one started with the maximumincreased by a multiple k (so Mi+1 = kMi). Initially, M = kn. In our experiments, weused k = 2. By incrementing the search interval in this way, the algorithm will eventuallyobtain a search size large enough to do an exhaustive search and thus guarantee eventualcompletion. The total search will never be more than double the largest size allocated.Although random restarts are sometimes e ective on non-Hamiltonian graphs, they aremore frequently e ective on Hamiltonian instances. During search, as edges are addedto the set of Hamiltonian edges, the net e ect is to prune edges from the graph. For a224\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle ProblemHamiltonian graph to be hard, the algorithm must select some set of edges which causes thereduced graph to become non-Hamiltonian, and this non-Hamiltonian subgraph must itselfbe hard to solve. With iterated restart, for the instance to remain hard the algorithm mustmake such mistakes with high probability. As a result, we expect fewer hard Hamiltonianinstances.Random restarts are an integral part of randomized algorithms (Motwani & Raghavan,1995) and are used frequently in local search and other techniques to escape from localoptima (Johnson, Aragon, McGeoch, & Schevon, 1991; Langley, 1992; Selman, Levesque,& Mitchell, 1992; Gomes, Selman, & Kautz, 1998). Further discussion of the impact ofrestarts can be found in the analysis of the experiments on Gn;m graphs in Section 4.The algorithm also provides for the possibility of checking for components and cutvertices during recursive search after the pruning is completed at each search node. Theoverhead of this extra work is O(n+m) per search node and rarely seems to pay o . Exceptwhere noted these checks were not used in this study.The experimental results reported in the remaining sections were run on a variety ofmachines, the fastest of which is a 300 MHZ Pentium II. All CPU times reported areeither from this machine, or adjusted to it using observed speed ratios on similar tests.Our algorithm terminated execution after 30 minutes2. Experimental results are frequentlyreported as the ratio of the number of search nodes over the number of vertices. This noderatio is used because we feel it provides a better basis for comparing results across di erentgraph sizes, since many of our results are O(n). Note that the number of search nodes iscalculated as the number of recursive calls performed.We used several di erent methods of verifying the correctness of our algorithm and ourexperimental results. The algorithm was independently implemented twice, and performsautomatic veri cation of all Hamiltonian cycles found. We performed multiple sets of exper-iments on generalized knight's circuit graphs and compared the results (graph Hamiltonianor not) to our theoretical predictions. Initial sets of experiments on Gn;m graphs and De-greebound graphs were executed using two di erent pseudo-random number generators, andwere repeated multiple times. Our source code is available as an appendix.4. Gn;m Random GraphsWe consider random graphs of 16 to 1500 vertices with m = dn=2. From previous work(Cheeseman et al., 1991; Koml os & Szemer edi, 1983) we expect the phase transition to occurwhen d lnn+ ln lnn. Thus we specify the constraint parameter (or degree parameter)k = d =(lnn+ ln lnn).4.1 Gn;m Using RestartFor the premiere experiment, we generate Gn;m graphs with number of vertices n = 16 : : : 96in steps of 4, n = 100 : : : 500 in steps of 100, n = 1000 and n = 1500. For each size n, thedegree parameter k ranges from 0:5 : : : 2:0 (step size 0.01 from k = 1:00 : : : 1:20, step size2. Since the time limit of 30 minutes is at least two orders of magnitude greater than the typical runningtime, the limit is rarely used. On slower machines this limit was increased. The Knight's tour graphsreported in Section 6 were run on a slower machine with a 30 minute time limit, although some instanceswere run much longer. 225\nVandegriend & Culberson\n0\n20\n40\n60\n80\n100\n0.6 0.8 1 1.2 1.4 1.6 1.8 2\n% H\nam ilt\non ia\nn\nDegree Parameter k\n100 200 300 400 500 1000 1500\nFigure 1: % of Hamiltonian graphs as a function of graph size and degree parameter forGn;m graphs.0.10 for other ranges of k). We generate 5000 graphs for each data point and execute ourbacktrack algorithm once on each graph. This is a grand total of 4.76 million graphs, ofwhich 1.19 million are of 100 or more vertices.We use the pruning described in section 3, check for components and articulation pointsafter the initial pruning, and use iterated restart with a multiplicative factor of 2. We donot check for components or articulation points during the recursive search.We expect the phase transition for biconnectivity to be very similar to the phase tran-sition for Hamiltonicity (Cheeseman et al., 1991) and we expect the phase transition forminimum degree greater than 1 to be almost identical to the phase transition for Hamil-tonicity (Bollob as, 1984; Koml os & Szemer edi, 1983). Our experimental results matchedthese expectations very closely. For the larger graphs of 100 to 1500 vertices, the percentageof Hamiltonian graphs is plotted against the degree parameter in Figure 1. We found thatthe 50% point at which half the graphs are Hamiltonian occurs when the degree parameterk 1:08 1:10. More interestingly, all the curves pass close to a xed point near k = 1,and it seems they are approaching a vertical line at this point. That is, they appear to beconverging on k 1 as a phase transition, precisely as theory predicts.226\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle Problemn 100 200 300 400 500 1000 1500Nodes 7:5n 7:0n 3:3n 7:0n 3:4n 3:3n 7:0nTable 1: Maximum Search Nodes on Gn;m for Large nAll graphs were solved, that is were either determined to be non-Hamiltonian, or aHamiltonian cycle was found. We are primarily interested in asymptotic behavior, sincetheories concerning the relation of the phase transition to hard regions are necessarilyasymptotic in nature. For graphs of 100 vertices or more, the longest running time wasunder 11 seconds, on a graph of 1500 vertices using 10,500 (or 7:0n) search nodes to nd aHamiltonian cycle.All of the 549,873 non-Hamiltonian graphs in this range were detected during the initialpruning of the graph, and thus no search nodes were expanded. Of the 640,127 HamiltonianGn;m graphs, the vast majority ( 629,806 or 98:3%) used only n search nodes, which meansthat the algorithm did not need to backtrack at all3. No quadratically hard graphs werefound in this range. Table 4.1 lists the maximum number of search nodes expressed as afactor of n to illustrate the linearity of the search tree.These results appear to di er from those of Frank et al. (1998), who found graphswhich took orders of magnitude more search nodes to solve. (Their hardest graph tookover 1 million nodes.) We believe this is due to two factors. Firstly, the algorithm used togenerate the results in their paper did not do an initial check for biconnectivity nor did ituse all of the pruning techniques used in our algorithm. Secondly and more importantly, onthe small random graphs they used ( 30 vertices) the probability of obtaining certain hardcon gurations (such as biconnected and non-Hamiltonian or non-biconnected and minimumdegree 2) is much higher than when n is larger, as we discussed in section 2.2.The experiments on small Gn;m graphs (between 16 and 96 vertices) con rm this con-jecture. In this case we do nd a small number of quadratically hard graphs, and a fewvery hard graphs. We consider for purposes of this paper, that a very hard graph on lessthan 100 vertices is any that takes at least 100,000 search nodes to solve. The very hardgraphs from this set of runs are given in Table 4.1.Note that the very hardest took less than two minutes to solve, making our designationof \\very hard\" questionable. Also, note that the smallest graph in this set has 36 vertices,somewhat larger than the 30 vertex examples found by Frank et al. (1998). This is likelybecause we do articulation point checking initially and better pruning. Finally, all of thesevery hard graphs are non-Hamiltonian, and all occur in classes that produce less than 50%Hamiltonian graphs. The hardest Hamiltonian graph in contrast required only 19,318 searchnodes, on a graph of 68 vertices with degree parameter 0.9.In Figure 2 we plot the number of graphs that are quadratically hard for these smallgraphs. For n from 68 to 92, all non-Hamiltonian graphs were detected during initialpruning. One non-Hamiltonian graph at n = 96 required search (254:1n nodes). Noticethat the number of quadratically hard Hamiltonian graphs is far less than the number ofquadratically hard non-Hamiltonian graphs, and peaks for larger n. This is in accordancewith the discussion of random restarts in Section 3.3. With 5% error in this measurement, this means that the algorithm might have backtracked over amaximum of 0:05n search nodes. 227\n228\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle ProblemWe ran additional tests for n from 32 to 54 in steps of 2, with the degree parameterranging from 0.96 to 1.16 with step size 0.01, generating 5000 graphs at each point. Inthis case, we invoked articulation point checking at each search node. Again all graphswere solved without timing out, and some very hard graphs were found, all of them non-Hamiltonian. One 50 vertex graph required 9,844,402 search nodes, and required close to20 minutes to solve. It is unclear whether the extra checking helped; the smallest graphrequiring at least 100,000 nodes had 32 vertices, while the smallest requiring over a millionhad 40 vertices. Overall, the results were very similar to the rst set of experiments onsmall graphs.4.2 Gn Using RestartClearly, the more edges we add to a graph, the more likely it is to be Hamiltonian. Italso seems that once a graph is Hamiltonian, adding more edges makes it less likely to behard. In an attempt to nd hard graphs for larger n, we modi ed the Gn;m generator sothat instead of adding a xed number of edges, it instead added edges until every vertexhas degree at least two, and then stops. In a sense this produces graphs exactly on theGn;m phase transition, since a minimum degree of two is the condition that asymptoticallydistinguishes Hamiltonian from non-Hamiltonian graphs with high probability. We refer tothis distribution as the Gn model.Initially we ran 1000 graphs with this generator for n from 100 to 500, but no hardinstances were found. We increased the search to 10,000 graphs at each n, and included asearch at n = 1000. Out of all these graphs, we found one very hard graph on 100 vertices.Even after a second attempt using more than 26 million search nodes, it was still unsolved.Doing post-mortem analysis, we checked for cut sets of size 2 and 3 that would leave 3or 4 (or more) components and found none. We also checked the pruned graph using theodd degree test mentioned in Section 5.3, but this too failed to show it is non-Hamiltonian.Finally, we set up our fast machine with unlimited time and no restarts. Three search nodesand less than 0.1 seconds later it was proven non-Hamiltonian.Detailed analysis (see the appendix) shows that the graph has a small feature that iseasily detected when one of a few starting points is selected. Because we use an exponentiallygrowing sequence of searches, we only use a few restarts. In a test of 100 random startswith a 3 second time limit 7 trials succeeded, using from 2 to 5 search nodes each to provethe graph non-Hamiltonian.We also ran 10,000 Gn graphs at each even value of n from 16 to 98. The smallestinstances requiring at least 100,000 search nodes were at n = 50. Only 5 graphs requiringmore than a million nodes were found for n < 100, two at n = 62, one at n = 70 and two atn = 98. Two of these (one at 62, one at 98) initially timed out, but were solved in secondattempts in about 1/2 hour. Neither was susceptible to an attack by 100 restarts as on the100 vertex graph.Table 4.2 shows the number of non-Hamiltonian graphs for each n 100. All of theseexcept the one mentioned above were detected during initial pruning. The remaining graphswere all easily shown to be Hamiltonian, with a maximum search ratio of 7.0.Clearly the probability of non-Hamiltonian graphs drawn from Gn is decreasing withn. It seems likely that the probability of hard instances is also going to zero.229\nVandegriend & Culbersonn 100 200 300 400 500 1000Non-Ham 154 56 29 20 15 3Table 3: Number of Non-Hamiltonian Graphs from Gn n k = 1:00 k = 1:50 k = 2:00500 0.20 0.20 0.211000 0.43 0.50 0.601500 0.68 0.80 0.87Table 4: CPU Seconds per 1000 Search Nodes for Gn;m Graphs4.3 Gn;m Without Using RestartWe wanted to know how important the restart feature is asymptotically. We ran 1000 Gn;mgraphs for n from 100 to 1500, for each of the parameter settings in the premiere experiment,but this time using the backtrack algorithm without the iterated restart feature. As before,all non-Hamiltonian instances were detected during initial pruning. One quadratically hardHamiltonian graph was found at n = 300, with degree parameter 1.20, which required163,888, or 1:82n2 search nodes and took 28.5 seconds. A few other graphs were nearlyquadratic, for example on n = 1500 there were 4 graphs that required 0:15n2, 0:19n2,0:36n2 and 0:47n2 search nodes. It seems that asymptotically, even in the absence ofiterated restarts, the Gn;m class does not provide hard instances with high probability.4.4 Gn;m SummaryBased on a set of timing runs, we present in Table 4.4 an indication of how running time persearch node increases with the number of vertices n and degree parameter k. Because thetimes are usually so short, we cannot get reliable numbers for n < 500. The times shownare for the evaluation of 1000 search nodes, and are averaged (total CPU divided by totalnodes searched) over graphs that were solved in less than 1:1n search nodes. For instancesthat require signi cantly more search nodes, the time per 1000 nodes seems to increasesomewhat, but there are so few examples for large n that we are unable to provide exactestimates. For n = 15004, the average time per 1000 nodes for instances requiring morethan 2n search nodes is 0.89 seconds at k = 1:00, 1.04 at k = 1:50 and 1.31 at k = 2:00.Note that this includes at least one instance that took 7n search nodes. This table indicatesthat the growth is approximately linear in n+m.The experimental evidence clearly indicates thatGn;m random graphs are asymptoticallyextremely easy everywhere, despite the existence of a phase transition. Our results temperthe ndings of the various researchers (Cheeseman et al., 1991; Frank et al., 1998; Frank& Martel, 1995) studying phase transitions and the Hamiltonian cycle problem. Cheese-man et al.'s explanation of their observed increase in di culty near the phase transitionwas that \\on the border [between the regions of low and high connectivity] there are many4. n = 1500 is the only value of n for which we have at least one instance requiring 2n search nodes ateach of the three values of k. The times for 1000 and 1500 come from separate runs on 1000 graphs persample point. 230\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle Problemalmost Hamiltonian cycles that are quite di erent from each other . . . and these numerouslocal minima make it hard to nd a Hamiltonian cycle (if there is one). Any search pro-cedure based on local information will have the same di culty.\" (Cheeseman et al., 1991).Unfortunately, while their observations were accurate, their observed hardness was due totheir algorithms and the limited size of the graphs tested, not to intrinsic properties of theHamiltonian cycle problem with respect to the phase transition on Gn;m graphs. We haveshown that an e cient backtrack algorithm nds the phase transition region of Gn;m graphseasy in general.5. Degreebound GraphsIntuitively, the reason that it is so hard to generate a hard instance from Gn;m is that bythe time we add enough edges to make the minimum degree two, the rest of the graph isso dense that nding a Hamiltonian cycle is easy. Alternatively, we see that to create anon-Hamiltonian property or feature, we must have regions of low degree, while at the sametime meeting the minimal requirements that make the instance hard to solve. This problemcan be characterized as one of high variance of vertex degrees. The only region where weget even a few hard graphs from Gn;m is when n is small enough that the average degree isalso low.To avoid the consequences of this degree variation, in this section we use a di erentrandom graph model Gn(d2 = p2; d3 = p3; : : :) for which n is the number of vertices anddi = pi is the percentage of vertices of degree i. As an example G100(d2 = 50%; d3 = 50%)represents the set of graphs of 100 vertices in which 50 are of degree 2 and 50 are of degree3. We refer to a graph generated under this model as a Degreebound graph. In this paperwe only consider graphs whose vertices are of degree 2 or 3.It is quite di cult to generate all graphs with a given degree sequence with equal proba-bility (Wormald, 1984). Instead, we adopt two variations which generate graphs by selectingavailable edges. In each case each vertex is assigned a free valence equal to the desired naldegree. In version 1 pairs of vertices are selected in random order, and added as edgesif the two vertices have at least one free valence each. This continues until either all freevalences are lled (a successful generation) or all vertex pairs are exhausted (a failure). Iffailure occurs, the process is repeated from scratch. Initial tests indicate about 1/3 of theattempts fail in general. For e ciency reasons, in the implementation an array of verticesholds each vertex once. Pairs of vertices, v; w are selected at random from the array andif v 6= w, and (v; w) is not already an edge, then (v; w) is added as an edge, and the freevalence of each of v and w is reduced by one. When the free valence of a vertex is zero, thevertex is deleted from the array. This step is repeated until only a small number (twice themaximum degree) of vertices remains, and then all possible pairs of the remaining verticesare generated and tested in random order.In version 2 an array initially holds each vertex v deg[v] times. Pairs of vertices arerandomly selected, and if not equal and the edge does not exist, then the edge is added, andthe copies of the two vertices are deleted from the array. This is repeated until the array isempty, or 100 successive attempts have failed to add an edge. The latter case is taken asfailure, and the process is repeated from scratch. This method seldom fails.231\nVandegriend & CulbersonNeither of these two methods guarantees a uniform distribution over the graphs of thegiven degree sequence. For example, given the degree sequence on ve vertices f1; 1; 2; 2; 2g,there are seven possible (labeled) graphs. One consists of two components, an edge and atriangle. The other six are all four paths; thus all six are isomorphic to one another. Of the10! permutations of the pairs of vertices, 564,480 generate the graph on two components,while for each four path there are 322,560 distinct permutations. The remaining permuta-tions (31.2 %) do not yield a legal graph. Thus, the rst graph is 1.75 times as likely asany of the other six. Of course, a four path (counting all isomorphic graphs) is 3.428 timesas likely as the two-component graph.On the other hand, a version 2 test program (not our generator which prohibits degreeone vertices) consistently generated the rst graph about 8%{10% more often than any ofthe others, based on several million random trials.5.1 Experimental Results on Degreebound GraphsWe test graphs of 100 : : : 500 vertices (step size 100) 1000 and 1500 vertices with the meandegree varying from 2:6 : : : 3:0 (step size of 0.01 from 2.75 to 2.95, step size of 0.05 elsewhere).We generate 1000 graphs for each data point, execute our algorithm once on each graph,and collect the results. This test was repeated for each of the two versions.Figure 3 shows the percentage of graphs which are Hamiltonian as the mean degree andgraph size varies5. There is a clear transition from a mean degree of 2.6 (near 0% chance ofa Hamiltonian cycle) to a mean degree of 3 (for which Robinson and Wormald, 1994 predictan almost 100% chance of a Hamiltonian cycle on uniformly distributed graphs). For aphase transition, we would expect the slope to grow steeper as the graph size increases.Figure 3 shows this increase in steepness.Note that the double points on the curve for n = 100 are due to unavoidable discretiza-tion. Since the total degree of a graph must be even, when the generators detect that thetotal degree speci ed is odd, one of the minimum degree vertices is selected and its degreeincremented. Thus, for example, whether the fraction of degree 3 vertices speci ed is 0.81 or0.82, the number of degree three vertices is 82. Discretization e ects also occur for n = 300,500 and 1500, but with lessened impact.In Table 5.1 we summarize the observed hard instances from these graphs. We notethat several instances exceeded our time bounds, and although these are certainly at leastquadratically hard, they are not included in the quadratically hard instances. The frequencyof hard instances appears to be decreasing with n on these graphs. In particular there areno quadratically hard non-Hamiltonian instances over 1000 vertices, except those that aretoo hard to solve with our program.Interestingly, there turns out to be an O(n +m) time test which shows that most ofthe unresolved instances are non-Hamiltonian. This test is described brie y in Section 5.3.We implemented the test as a separate program and tested each of the unresolved graphs,with the results indicated in the last column of Table 5.1. The remaining ve graphsremain unresolved. If this test were included in the initial pruning of our program, thenthe instances enumerated in the last column of Table 5.1 would all be solved (proven non-Hamiltonian) without search.5. For these graphs, the mean degree is 2.0 plus the fraction of degree 3 vertices.232\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle Problem\nVandegriend & CulbersonVersion 1Number of Quadratically Hard Timed OutVertices No HC HC Total No HC100 5 0 0 0200 18 0 3 3300 8 0 11 10400 1 0 14 14500 0 0 14 141000 0 0 7 71500 0 1 6 6Version 2Number of Quadratically Hard Timed OutVertices No HC HC Total No HC100 5 0 0 0200 9 0 6 5300 10 0 13 13400 3 0 11 11500 1 1 10 91000 0 1 6 41500 0 0 6 6Table 5: Number of Hard Graphs for Degreebound GraphsThus, although these classes may provide a small rate of hard instances for our currentprogram, it is not clear they are even minimally hard. Furthermore, it appears there existsimple improvements to our program that would eliminate most of these hard instances.In Figure 4 we illustrate the distribution of the graphs that timed out. The otherquadratically hard graphs had similar distributions. About all that can be concluded isthat the hard instances seem to be distributed over a mean degree range from 2.78 to 2.94.The backtrack program is a little faster on Degreebound graphs than on Gn;m graphs,as we would expect given fewer total edges. For 1500 vertices, the times per 1000 searchnodes ranged from 0.27 seconds for the easiest (no backtrack) instances to 0.56 seconds forthe harder ones.5.2 Analysis of Degreebound GraphsAn analysis of the Degreebound graph class led us to conjecture that the prime factordetermining the Hamiltonicity of a graph was whether or not the graph had a degree 3vertex with 3 neighbours of degree 2. We label this a 3D2 con guration (or a 3D2 event).A graph with a 3D2 con guration is non-Hamiltonian. The following informal analysisprovides evidence for our conjecture.Let E(n; ) represent the expected number of 3D2 con gurations in a graph with nvertices. Let D2 = n be the number of degree 2 vertices and D3 = (1 )n the number ofdegree 3 vertices. Note that the mean degree d = 2D2+3D3n = 2 n+3n(1 )n = 3 . Assumingequal probability of all combinations, 234\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle Problem\nNumber Failed\nVandegriend & Culberson# of Mean Degree for 50% HC PointVertices Experimental Theoretical100 2.78 2.78200 2.81 2.82300 2.83 2.85400 2.84 2.86500 2.85 2.871000 2.88 2.901500 2.90 2.91Table 6: Experimental and approximate theoretical values for the location of the 50%Hamiltonian point for Degreebound graphs of various sizes. E(n; ) = D3 D23 n 13 = n(1 ) n3 n 13 = n(1 )( n)( n 1)( n 2)(n 1)(n 2)(n 3)We restrict ourselves to the asymptotic case (n!1) which gives usE(n; ) n(1 )( n)3n3 n(1 ) 3When E(n; ) ! 0, the probability of having con guration 3D2 approaches 0. Wewant to nd for which n(1 ) 3 ! 0 as n ! 1. This occurs when = o(n 1=3).Since a Hamiltonian cycle cannot exist if E(3D2) > 0, this tells us that the phase transitionasymptotically occurs when the mean degree equals 3. Asymptotically, Degreebound graphswith d < 3 are expected to be non-Hamiltonian while Degreebound graphs with d > 3are expected to be Hamiltonian (ignoring other conditions). This agrees with results ofRobinson andWormald (1994) who proved that almost all 3-regular graphs are Hamiltonian.If we let = n 1=3 this gives us E(n; ) 1. Substituting this equation in our expressionfor mean degree gives us d = 3 n 1=3. Table 5.2 lists mean degrees for di erent values of nusing this formula along with our experimentally determined values for the point where 50%of the graphs are Hamiltonian. They are remarkably similar. This suggests that the 3D2con guration is the major determinator of whether a Degreebound graph will be Hamilto-nian or not. Minor e ects (which we have ignored) come from propagation of deleted edgeswhile pruning and other less probable cases such as those mentioned in Section 5.3. Sincethe 3D2 con guration is detected by our algorithm before the search is started, this alsoimplies that the phase transition will be easy for our algorithm, since most non-Hamiltoniangraphs are instantly detected. This matches our experimental observations.5.3 A Non-Hamiltonicity Test for Sparse GraphsWhile preparing the nal version of this paper, we observed that in the 3D2 con gurationwe could replace the vertex of degree three with a component of several vertices. In general,236\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle Problemif there are three vertices of degree two that form a minimal cut then the graph is non-Hamiltonian. In fact, we can replace the three vertices by a minimal cut of any odd numberc of degree 2 vertices, and the claim of non-Hamiltonicity remains true.Checking all possible subsets of size c would be very expensive, but fortunately there isan even more general condition that includes all of these as special cases and can be tested inlinear (i.e O(n+m)) time. Let F be a set of edges that are forced to be in any Hamiltoniancycle if one exists. For example, edges incident on a vertex of degree two are forced. LetG0 = G F be the graph formed by deleting the forced edges from G. Let C1 : : : Ch becomponents of G0, and de ne the forced degree of component Ci to be the number of endpoints of forced edges (from F ) in Ci. If any component has an odd forced degree, then Gis non-Hamiltonian.The proof of correctness of this test is simple. Observe that if there is a Hamiltoniancycle in G then while traversing the cycle each time we enter a component, there must be acorresponding exit. Since the forced edges act as a cut set (that separates the components),they are the only edges available to act as entries and exits to a component. All forced edgesmust be used. Therefore, if there is a Hamiltonian cycle there must be an even number offorced edges connecting any component to other components, each contributing one to theforced degree of the component. Each forced edge internal to (with both end points in) acomponent contributes two to the forced degree, so if there is a Hamiltonian cycle the totalforced degree of each component must be even.To obtain the results in the last column of Table 5.1, we rst did the initial pruning, andthen applied the test to the pruned graphs, using only the forced edges incident on degreetwo vertices.6. Generalized Knight's Circuit GraphsIn this section we examine a graph class based upon the generalized knight's circuit problemin which the size of the knight's move is allowed to vary along with the size of the (rectan-gular) board. An instance of the generalized knight's circuit problem is a graph de ned bythe 4-tuple (A;B) n m where A;B is the size of the knight's move and n;m is the sizeof the board. The vertices of the graph correspond to the cells, and thus jV j = nm. Twovertices are connected by an edge if and only if it is possible to move from one vertex tothe other by moving A steps along one axis and B along the other. (See Vandegriend, 1998for more information about this problem.)For this graph class there is no easy way to de ne phase transitions since there isno clear parameter which separates the Hamiltonian graphs from the non-Hamiltoniangraphs (although Vandegriend, 1998 shows that there are ways of identifying groups ofnon-Hamiltonian graphs). Thus to nd hard graphs, we look for graphs which take a signif-icant amount of time to solve relative to their size. We perform 1 trial per graph (probleminstance) and report the ratio of search nodes to number of vertices.We examined a total of 300 generalized knight's circuit graphs over ranges of A;B; n;m(Speci c A;B; n triplets with m allowed to vary, for A + B 9, n 13, m 60.) Theyranged in size from 80 to 390 vertices. Of the 300 instances examined, 121 graphs (40 %)were found to be Hamiltonian and 141 graphs (47 %) were found to be non-Hamiltonian.237\nVandegriend & Culbersonsearch nodes # of trials % of trials 2n 1 0.85n 43 35.510n 37 30.620n 11 9.150n 8 6.6100n 8 6.6200n 2 1.7500n 5 4.11000n 2 1.72000n 1 0.85000n 1 0.810000n 1 0.820000n 0 0.050000n 1 0.8Table 7: Histogram of the search node ratio of our backtrack algorithm on 121 Hamiltoniangeneralized knight's circuit instances.For the remaining 38 graphs (13 %) our backtrack algorithm failed (reached the 30 minutetime limit), which implies these graphs are very hard for our backtrack algorithm.A majority (91%) of the non-Hamiltonian graphs were solved without any search. How-ever, a signi cant number of the remaining graphs took many search nodes to solve. 9graphs (6.4%) took more than 10n nodes and 7 graphs (5.0%) took more than 100n nodes.The hardest graph took 11276n search nodes (n = 324). So while the majority of thenon-Hamiltonian graphs were easy, a signi cant percentage of these generalized knight'scircuit graphs were quite hard for our algorithm.A larger variance in hardness was observed with the Hamiltonian graphs. Table 6 showsthe distribution with respect to the number of search nodes required. Unlike Gn;m andDegreebound graphs, these graphs could not be solved in only n search nodes. Almostall the graphs required at least 2n search nodes. 33% of the graphs required at least 10nnodes, 11% required at least 100n nodes and the hardest graph required 34208n nodes(n = 198).7. A Hard Constructed Graph ClassIt is worthwhile when designing an algorithm to determine under what conditions and howfrequently it might fail to perform and just how badly it might do. The measure can bein terms of how bad an approximation is, or how long an exact algorithm may take in theworst case. There is a long tradition of designing instance sets that foil speci c combinato-rial algorithms (Johnson, 1974; Mitchem, 1976; Olariu & Randall, 1989; Spinrad & Vijayan,1985). Other special classes are intended to be more general, and are frequently based oncertain features or constructs together with some randomization to hide the features (Cul-berson & Luo, 1996; Brockington & Culberson, 1996; Kask & Dechter, 1995; Bayardo Jr. &238\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle ProblemSchrag, 1996). The Gn;m class is frequently used to study graph algorithms over all possiblegraphs.In this section we consider a special construction for a Hamiltonian graph which isextremely hard (exponential increase in di culty with size) for our backtrack algorithm.It consists mostly of special constructs tied together with some randomly chosen edges. Itbears some resemblance to graphs such as the Meredith graph (Bondy & Murty, 1976) usedto disprove certain theoretical conjectures. This graph remains di cult when we vary theneighbour selection heuristic or pruning techniques used by our backtrack algorithm. Thegraph we construct we refer to as the Interconnected-Cutset (ICCS ) graph.Our class is intended merely to show that exponentially hard classes clearly exist forour algorithm, and many other backtrack algorithms using similar approaches. We do notclaim our graphs are intrinsically hard, as there is a polynomial time algorithm that willsolve this particular class.The basic concept we use in constructing these graphs is the non-Hamiltonian edge,which we de ne as an edge which cannot be in any possible Hamiltonian cycle. Note thatsince the graphs are Hamiltonian, each vertex must be incident on at least two edges whichare not non-Hamiltonian. Our goal is to force the algorithm to choose a non-Hamiltonianedge at some point. The key observation is that once such an edge is chosen, the algorithmmust backtrack to x that choice. With multiples of these bad choices, after backtrackingto x the most recent bad choice, the algorithm must eventually backtrack to an earlierpoint to x a less recent bad choice, which means the more recent choice must be redone,with the algorithm making the bad choice again. The amount of work performed by thealgorithm is at least exponential in the number of bad choices. See Vandegriend (1998) formore details.The ICCS graph is composed of k identical subgraphs ICCSS arranged in a circle.To force the desired cycle we have a degree 2 vertex between each subgraph. Since eachsubgraph has a Hamiltonian path between the connecting vertices, the ICCS graph isHamiltonian. Due to the construction of the ICCS subgraph, extra non-Hamiltonian edgescan be added between di erent subgraphs. These edges help prevent components fromforming during the search, which greatly reduces the e ectiveness of the component checkingsearch pruning. See Figure 5. Heavy lines are forced edges that must be in any Hamiltoniancycle.Figure 6 contains a sample ICCS subgraph. Non-Hamiltonian edges are denoted bydashed lines, and forced edges are denoted by heavy lines.To see that the dashed lines cannot be part of any Hamiltonian cycle observe thatany path through the ICCSS must enter and exit on an SC vertex, and between any twoSC vertices in sequence the path can visit at most one SI vertex. Thus, each such pathuses at least one more vertex from SC than from SI . Since initially jSC j = jSI j + 1, anyHamiltonian cycle can enter and exit the ICCSS only once, and must alternate betweenSC and SI vertices. Since the ST vertices only have one edge leading to an SI vertex,these edges are forced. This also allows us to interconnect subgraphs without adding newHamiltonian cycles by connecting vertices of SC of two di erent subgraphs (since theseadditional edges are all non-Hamiltonian edges). By interconnecting the subgraphs in thisfashion, we strongly reduce the e ectiveness of checking for components or cut-points duringthe search. In the current implementation, for each vertex in each SC we randomly choose a239\nVandegriend & Culberson ICCSS\nICCSS\nICCSS ICCSS\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle Problemvertex in another SC and add the edge. Thus, the average number of such edges per vertexis a little less than two, since some edges may be repeated.One additional design element was added to handle various degree selection heuristicsthat our algorithm could use. At each stage in the search, the neighbours of the currentendpoint of the partial path are arranged in a list to determine the order in which they willbe chosen by our backtrack algorithm. There are 3 main heuristics: sorting the list to visitlower degree neighbours rst, sorting to visit higher degree neighbours rst, and visiting inrandom order. (Our backtrack algorithm normally uses the lower degree rst heuristic.)The SD vertex in the ICCS subgraph is used to fool the low degree rst heuristic. TheSD vertex is only incident to the two ST vertices and to two vertices in SI , which makesit degree 4. When the algorithm enters a subgraph from the degree 2 connecting vertex, itreaches one of the ST vertices. From the ST vertex, the choices are the SD vertex (degree4) and the one SI vertex (degree jSC j 2, because it is not connected to the SD vertex andthe other ST vertex). If jSC j > 6 then the SD vertex will have a lower degree and thus willbe chosen rst.The high degree rst heuristic avoids following the edge from the ST vertex to the SDvertex, and instead goes to the SI vertex. From there it chooses one of the SC vertices (notincluding SD or the other ST vertex, which are not adjacent). From this point, its choice isone of the SI vertices (maximum degree = jSC j 2) or one of the SC vertices in a di erentsubgraph (degree jSC j if that subgraph has not yet been visited). Since the SC vertexnormally will have a higher degree, the algorithm will follow the non-Hamiltonian edge tothat vertex.If the next neighbour is chosen at random, then from a ST vertex, the algorithm has a50% chance of making the wrong choice. Similarly, at each SC vertex the algorithm has asmall chance of following a non-Hamiltonian edge. As the number of subgraphs is increased,the probability of the algorithm making all the right choices rapidly approaches 0.Another reason why the ICCS subgraph is expected to be hard for a backtrack algorithmis that there are many possible paths between the two ST vertices. If a non-Hamiltonianedge has previously been chosen, then the backtrack algorithm will try all the di erentcombinations of paths (and fail to form a Hamiltonian cycle) before it backtracks to thebad choice.We performed experiments on various ICCS graphs. We varied the number of subgraphsfrom 1 to 4, and varied the independent set size (jSI j) from 6 to 8. We used our backtrackalgorithm as speci ed in Section 3 with the addition of checking for components and cut-points during the search. We executed our algorithm 5 times per graph. Our results arelisted in Table 7 for the low degree rst heuristic. Our experiments using the other degreeselection heuristics exhibited similar results.We have also performed similar experiments using a randomized heuristic algorithm(Frieze, 1988; P osa, 1976). Due to the signi cant di erence in operation between thisalgorithm and backtrack algorithms, it easily solved these small ICCS graphs. However itsperformance rapidly decreased as the graphs were increased in size.The average degree of ICCS graphs with more than one subgraph lies within the fol-lowing range: jSI j 2:5 + 9:5jSI j+ 1 d jSI j 2 + 8jSI j+ 1241\nVandegriend & Culbersonn #S jSI j Min Median Max14 1 6 14 14 21028 2 6 606 616 3,77742 3 6 10,467 47,328 112,79556 4 6 6,538,842 32,578,160 36,300,82716 1 7 16 48 11232 2 7 13,056 21,797 70,94948 3 7 1,350,084 5,247,287 8,027,52018 1 8 18 54 27036 2 8 283,164 430,620 750,21154 3 8 > 1:2 108Table 8: Search nodes required by our backtrack algorithm on ICCS graphs.From this formula we see that as the size of each independent set is increased, the meandegree increases linearly. However, as the number of subgraphs is increased, the meandegree remains constant. The ICCS graphs remain hard over a very wide range of meandegrees (from O(1) to O(n)). Therefore the average degree in this case is not a relevantparameter for determining hardness.8. Conclusions and Future WorkOur backtrack Hamiltonian cycle algorithm found Gn;m graphs easy to solve, along witha majority of Degreebound graphs. We have also performed similar experiments (Vande-griend, 1998) using a randomized heuristic algorithm (Frieze, 1988; P osa, 1976) which hada high success rate on Gn;m graphs, less so on Degreebound graphs. More interestingly, theexistence of a phase transition for both problems did not clearly correspond to a high fre-quency of di cult instances. We suspect that other properties play a more important rolethan does the average degree. This is supported by our results on generalized knight's circuitgraphs, which are all highly regular (with many symmetries), and for which the majorityhave average degrees between 4 and 8, compared to a mean degree 3 on Degreeboundgraphs.These results should not be surprising, since it has been shown that asymptotically forrandomly generated graphs, when the edge is added that makes the last vertex degree 2,then with high probability the graph is Hamiltonian (Bollob as, 1984). In addition, e cientalgorithms have been shown to solve these instances in polynomial time with high proba-bility (Bollob as et al., 1987). Since vertices of degree less than 2 are a trivially detectablecounter-indicator, it is hardly surprising that asymptotically determining Hamiltonicity ofgraphs in Gn;m is easy.We also observe that the performance of our backtrack algorithm can widely vary fora single graph due to the selection of the initial vertex. Multiple restarts of our backtrackalgorithm after a time limit was reached often resulted in superior performance. We suggesta little randomization of the algorithm be used while empirically identifying intrinsicallyhard random instances of any problem. 242\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle ProblemAcknowledgementsThis research was supported by Natural Sciences and Engineering Research Council GrantNo. OGP8053.ReferencesAngluin, D., & Valiant, L. G. (1979). Fast probabilistic algorithms for Hamiltonian circuitsand matchings. J. Comput. System Sci., 18 (2), 155{193.Baker, A. (1995). Intelligent Backtracking on Constraint Satisfaction Problems. Ph.D.thesis, University of Oregon.Bayardo Jr., R. J., & Schrag, R. (1996). Using csp look-back techniques to solve exception-ally hard sat instances. In Proc. of the Second Int'l Conf. on Principles and Practice ofConstraint Programming, Vol. 1118 of Lecture Notes in Computer Science, pp. 46{60.Bollob as, B., Fenner, T. I., & Frieze, A. M. (1987). An algorithm for nding Hamiltonpaths and cycles in random graphs. Combinatorica, 7 (4), 327{341.Bollob as, B. (1984). The evolution of sparse graphs. In Bollob as, B. (Ed.), Graph Theoryand Combinatorics, pp. 35{57. Academic Press, Toronto.Bondy, J. A., & Murty, U. S. R. (1976). Graph Theory with Applications. Elsevier, Ams-terdam.Brockington, M., & Culberson, J. C. (1996). Camou aging independent sets in quasi-random graphs.. In Johnson, & Trick (Johnson & Trick, 1996), pp. 75{88.Broder, A. Z., Frieze, A. M., & Shamir, E. (1994). Finding hidden Hamiltonian cycles.Random Structures and Algorithms, 5 (3), 395{410.Cheeseman, P., Kanefsky, B., & Taylor, W. M. (1991). Where the really hard problems are.In Mylopoulos, J., & Reiter, R. (Eds.), IJCAI-91: Proceedings of the Twelfth Inter-national Conference on Arti cial Intelligence, pp. 331{337 San Mateo, CA. MorganKaufmann.Culberson, J. C., & Luo, F. (1996). Exploring the k{colorable landscape with iteratedgreedy.. In Johnson, & Trick (Johnson & Trick, 1996), pp. 245{284.Frank, J., Gent, I. P., & Walsh, T. (1998). Asymptotic and nite size parameters for phasetransitions: Hamiltonian circuit as a case study. Information Processing Letters, Inpress.Frank, J., & Martel, C. (1995). Phase transitions in the properties of random graphs. InCP'95 Workshop: Studying and Solving Really Hard Problems, pp. 62{69.Frieze, A. M. (1988). Finding Hamilton cycles in sparse random graphs. Journal of Com-binational Theory, Series B, 44, 230{250.243\nVandegriend & CulbersonGomes, C. P., Selman, B., & Kautz, H. (1998). Boosting combinatorial search throughrandomization. In Proceedings of the Fifteenth National Conference on Arti cial In-telligence (AAAI-98), pp. 431{437. AAAI Press/ The MIT Press.Hogg, T. (1998). Which search problems are random?. In Proceedings of the FifteenthNational Conference on Arti cial Intelligence (AAAI-98), pp. 438{443. AAAI Press/The MIT Press.Hogg, T., & Williams, C. P. (1994). The hardest constraint problems: A double phasetransition. Arti cial Intelligence, 69, 359{377.Johnson, D. S. (1974). Approximation algorithms for combinatorial problems. Journal ofComputer and System Sciences, 9, 256{278.Johnson, D. S., Aragon, C. R., McGeoch, L. A., & Schevon, C. (1991). Optimization bysimulated annealing: An experimental evaluation; part II, graph coloring and numberpartitioning. Operations Research, 39 (3), 378{406.Johnson, D. S., & Trick, M. A. (Eds.). (1996). Cliques, Coloring, and Satis ability: SecondDIMACS Implementation Challenge (1993), Vol. 26. American Mathematical Society.Kask, K., & Dechter, R. (1995). GSAT and local consistency. In Mellish, C. S. (Ed.),IJCAI-95 : Proceedings of the Fourteenth International Joint Conference on Arti cialIntelligence, pp. 616{622 San Mateo, CA. Morgan Kaufmann.Kocay, W. (1992). An extension of the multi-path algorithm for nding Hamilton cycles.Discrete Mathematics, 101, 171{188.Koml os, M., & Szemer edi, E. (1983). Limit distribution for the existence of a Hamiltoncycle in a random graph. Discrete Mathematics, 43, 55{63.Langley, P. (1992). Systematic and nonsystematic search strategies. In Arti cial IntelligentPlanning Systems: Proceedings of the First International Conference, pp. 145{152.Martello, S. (1983). Algorithm 595: An enumerative algorithm for nding Hamiltoniancircuits in a directed graph. ACM Transactions on Mathematical Software, 9 (1),131{138.Mitchem, J. (1976). On various algorithms for estimating the chromatic number of a graph.The Computer Journal, 19, 182{183.Motwani, R., & Raghavan, P. (1995). Randomized Algorithms. Cambridge University Press,New York.Olariu, S., & Randall, J. (1989). Welsh-Powell opposition graphs. Information ProcessingLetters, 31 (1), 43{46.Palmer, E. M. (1985). Graphical Evolution: an introduction to the theory of random graphs.John Wiley & Sons, Toronto.P osa, L. (1976). Hamiltonian circuits in random graphs. Discrete Mathematics, 14, 359{364.244\nThe Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle ProblemRobinson, R. W., & Wormald, N. C. (1994). Almost all regular graphs are Hamiltonian.Random Structures and Algorithms, 5 (2), 363{374.Selman, B., Levesque, H., &Mitchell, D. (1992). A new method for solving hard satis abilityproblems. In Proceedings of the Tenth National Conference on Arti cial Intelligence(AAAI-92), San Jose, CA, pp. 440{446.Shufelt, J. A., & Berliner, H. J. (1994). Generating Hamiltonian circuits without backtrack-ing from errors. Theoretical Computer Science, 132, 347{375.Spinrad, J. P., & Vijayan, G. (1985). Worst case analysis of a graph coloring algorithm.Discrete Applied Mathematics, 12 (1), 89{92.Vandegriend, B. (1998). Finding Hamiltonian cycles: Algorithms, graphs and performance.Master's thesis, Department of Computing Science, University of Alberta. Online at\\http://www.cs.ualberta.ca/~basil/\".Wormald, N. C. (1984). Generating random regular graphs. Journal of Algorithms, 5,247{280.\n245"}], "references": [{"title": "Fast probabilistic algorithms for Hamiltonian circuits", "author": ["D. Angluin", "L.G. Valiant"], "venue": null, "citeRegEx": "Angluin and Valiant,? \\Q1979\\E", "shortCiteRegEx": "Angluin and Valiant", "year": 1979}, {"title": "Intelligent Backtracking on Constraint Satisfaction Problems", "author": ["A. Baker"], "venue": null, "citeRegEx": "Baker,? \\Q1995\\E", "shortCiteRegEx": "Baker", "year": 1995}, {"title": "Using csp look-back techniques to solve exception", "author": ["R.J. Bayardo Jr.", "R. Schrag"], "venue": null, "citeRegEx": "Jr. and Schrag,? \\Q1996\\E", "shortCiteRegEx": "Jr. and Schrag", "year": 1996}, {"title": "An algorithm for nding Hamilton", "author": ["B. as", "T.I. Fenner", "A.M. Frieze"], "venue": null, "citeRegEx": "as et al\\.,? \\Q1987\\E", "shortCiteRegEx": "as et al\\.", "year": 1987}, {"title": "Camou aging independent sets in quasi", "author": ["M. Brockington", "J.C. Culberson"], "venue": null, "citeRegEx": "Brockington and Culberson,? \\Q1996\\E", "shortCiteRegEx": "Brockington and Culberson", "year": 1996}, {"title": "Finding hidden Hamiltonian cycles", "author": ["A.Z. Broder", "A.M. Frieze", "E. Shamir"], "venue": null, "citeRegEx": "Broder et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Broder et al\\.", "year": 1994}, {"title": "Where the really hard problems are", "author": ["P. Cheeseman", "B. Kanefsky", "W.M. Taylor"], "venue": null, "citeRegEx": "Cheeseman et al\\.,? \\Q1991\\E", "shortCiteRegEx": "Cheeseman et al\\.", "year": 1991}, {"title": "Exploring the k{colorable landscape with iterated", "author": ["J.C. Culberson", "F. Luo"], "venue": null, "citeRegEx": "Culberson and Luo,? \\Q1996\\E", "shortCiteRegEx": "Culberson and Luo", "year": 1996}, {"title": "Asymptotic and nite size parameters for phase", "author": ["J. Frank", "I.P. Gent", "T. Walsh"], "venue": null, "citeRegEx": "Frank et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Frank et al\\.", "year": 1998}, {"title": "Phase transitions in the properties of random graphs", "author": ["J. Frank", "C. Martel"], "venue": null, "citeRegEx": "Frank and Martel,? \\Q1995\\E", "shortCiteRegEx": "Frank and Martel", "year": 1995}, {"title": "Finding Hamilton cycles in sparse random graphs", "author": ["A.M. Frieze"], "venue": null, "citeRegEx": "Frieze,? \\Q1988\\E", "shortCiteRegEx": "Frieze", "year": 1988}, {"title": "Boosting combinatorial search through", "author": ["C.P. Gomes", "B. Selman", "H. Kautz"], "venue": null, "citeRegEx": "Gomes et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Gomes et al\\.", "year": 1998}, {"title": "Which search problems are random", "author": ["T. Hogg"], "venue": "In Proceedings of the Fifteenth", "citeRegEx": "Hogg,? \\Q1998\\E", "shortCiteRegEx": "Hogg", "year": 1998}, {"title": "The hardest constraint problems: A double phase", "author": ["T. Hogg", "C.P. Williams"], "venue": null, "citeRegEx": "Hogg and Williams,? \\Q1994\\E", "shortCiteRegEx": "Hogg and Williams", "year": 1994}, {"title": "Approximation algorithms for combinatorial problems", "author": ["D.S. Johnson"], "venue": null, "citeRegEx": "Johnson,? \\Q1974\\E", "shortCiteRegEx": "Johnson", "year": 1974}, {"title": "Cliques, Coloring, and Satis ability", "author": ["D.S. Johnson", "M.A. Trick"], "venue": null, "citeRegEx": "Johnson and Trick,? \\Q1996\\E", "shortCiteRegEx": "Johnson and Trick", "year": 1996}, {"title": "GSAT and local consistency", "author": ["K. Kask", "R. Dechter"], "venue": null, "citeRegEx": "Kask and Dechter,? \\Q1995\\E", "shortCiteRegEx": "Kask and Dechter", "year": 1995}, {"title": "An extension of the multi-path algorithm for nding Hamilton cycles", "author": ["W. Kocay"], "venue": null, "citeRegEx": "Kocay,? \\Q1992\\E", "shortCiteRegEx": "Kocay", "year": 1992}, {"title": "Limit distribution for the existence of a Hamilton", "author": ["E. edi"], "venue": null, "citeRegEx": "edi,? \\Q1983\\E", "shortCiteRegEx": "edi", "year": 1983}, {"title": "Systematic and nonsystematic search strategies", "author": ["P. Langley"], "venue": "In Arti cial Intelligent", "citeRegEx": "Langley,? \\Q1992\\E", "shortCiteRegEx": "Langley", "year": 1992}, {"title": "Algorithm 595: An enumerative algorithm for nding Hamiltonian", "author": ["S. Martello"], "venue": null, "citeRegEx": "Martello,? \\Q1983\\E", "shortCiteRegEx": "Martello", "year": 1983}, {"title": "On various algorithms for estimating the chromatic number of a graph", "author": ["J. Mitchem"], "venue": null, "citeRegEx": "Mitchem,? \\Q1976\\E", "shortCiteRegEx": "Mitchem", "year": 1976}, {"title": "Randomized Algorithms", "author": ["R. Motwani", "P. Raghavan"], "venue": null, "citeRegEx": "Motwani and Raghavan,? \\Q1995\\E", "shortCiteRegEx": "Motwani and Raghavan", "year": 1995}, {"title": "Welsh-Powell opposition graphs. Information Processing", "author": ["S. Olariu", "J. Randall"], "venue": null, "citeRegEx": "Olariu and Randall,? \\Q1989\\E", "shortCiteRegEx": "Olariu and Randall", "year": 1989}, {"title": "Graphical Evolution: an introduction to the theory of random graphs", "author": ["E.M. Palmer"], "venue": null, "citeRegEx": "Palmer,? \\Q1985\\E", "shortCiteRegEx": "Palmer", "year": 1985}, {"title": "Hamiltonian circuits in random graphs", "author": ["L. osa"], "venue": "Discrete Mathematics,", "citeRegEx": "osa,? \\Q1976\\E", "shortCiteRegEx": "osa", "year": 1976}, {"title": "Almost all regular graphs are Hamiltonian", "author": ["R.W. Robinson", "N.C. Wormald"], "venue": null, "citeRegEx": "Robinson and Wormald,? \\Q1994\\E", "shortCiteRegEx": "Robinson and Wormald", "year": 1994}, {"title": "A new method for solving hard satis ability", "author": ["B. Selman", "H. Levesque", "D. Mitchell"], "venue": null, "citeRegEx": "Selman et al\\.,? \\Q1992\\E", "shortCiteRegEx": "Selman et al\\.", "year": 1992}, {"title": "Generating Hamiltonian circuits without backtrack", "author": ["J.A. Shufelt", "H.J. Berliner"], "venue": null, "citeRegEx": "Shufelt and Berliner,? \\Q1994\\E", "shortCiteRegEx": "Shufelt and Berliner", "year": 1994}, {"title": "Worst case analysis of a graph coloring algorithm", "author": ["J.P. Spinrad", "G. Vijayan"], "venue": null, "citeRegEx": "Spinrad and Vijayan,? \\Q1985\\E", "shortCiteRegEx": "Spinrad and Vijayan", "year": 1985}, {"title": "Finding Hamiltonian cycles: Algorithms, graphs and performance", "author": ["B. Vandegriend"], "venue": null, "citeRegEx": "Vandegriend,? \\Q1998\\E", "shortCiteRegEx": "Vandegriend", "year": 1998}, {"title": "Generating random regular graphs", "author": ["N.C. Wormald"], "venue": "Journal of Algorithms,", "citeRegEx": "Wormald,? \\Q1984\\E", "shortCiteRegEx": "Wormald", "year": 1984}], "referenceMentions": [{"referenceID": 12, "context": "Problem classes are sometimes called ensembles in the Arti cial Intelligence literature (Hogg, 1998).", "startOffset": 88, "endOffset": 100}, {"referenceID": 24, "context": "These two models are related (Palmer 1985).", "startOffset": 29, "endOffset": 42}, {"referenceID": 6, "context": "Di erent researchers (Cheeseman et al., 1991; Frank & Martel, 1995; Frank, Gent, & Walsh, 1998) have examined phase transitions on random graphs for the Hamiltonian cycle problem.", "startOffset": 21, "endOffset": 95}, {"referenceID": 6, "context": "Di erent researchers (Cheeseman et al., 1991; Frank & Martel, 1995; Frank, Gent, & Walsh, 1998) have examined phase transitions on random graphs for the Hamiltonian cycle problem. The obvious constraint parameter is the average degree (or average connectivity) of the graph. As the degree increases, the graph becomes less constrained: it becomes easier both for a Hamiltonian cycle to exist and for an algorithm to nd one. These researchers have examined how Hamiltonicity changes with respect to the average degree. Frank et al. (1998) and Frank and Martel (1995) experimentally veri ed that when using the Gn;m model the phase transition for Hamiltonicity is very close to the phase transition for biconnectivity, which occurs when the average degree is approximately lnn (or m = n lnn=2) 1.", "startOffset": 22, "endOffset": 538}, {"referenceID": 6, "context": "Di erent researchers (Cheeseman et al., 1991; Frank & Martel, 1995; Frank, Gent, & Walsh, 1998) have examined phase transitions on random graphs for the Hamiltonian cycle problem. The obvious constraint parameter is the average degree (or average connectivity) of the graph. As the degree increases, the graph becomes less constrained: it becomes easier both for a Hamiltonian cycle to exist and for an algorithm to nd one. These researchers have examined how Hamiltonicity changes with respect to the average degree. Frank et al. (1998) and Frank and Martel (1995) experimentally veri ed that when using the Gn;m model the phase transition for Hamiltonicity is very close to the phase transition for biconnectivity, which occurs when the average degree is approximately lnn (or m = n lnn=2) 1.", "startOffset": 22, "endOffset": 566}, {"referenceID": 6, "context": "Di erent researchers (Cheeseman et al., 1991; Frank & Martel, 1995; Frank, Gent, & Walsh, 1998) have examined phase transitions on random graphs for the Hamiltonian cycle problem. The obvious constraint parameter is the average degree (or average connectivity) of the graph. As the degree increases, the graph becomes less constrained: it becomes easier both for a Hamiltonian cycle to exist and for an algorithm to nd one. These researchers have examined how Hamiltonicity changes with respect to the average degree. Frank et al. (1998) and Frank and Martel (1995) experimentally veri ed that when using the Gn;m model the phase transition for Hamiltonicity is very close to the phase transition for biconnectivity, which occurs when the average degree is approximately lnn (or m = n lnn=2) 1. Cheeseman et al. (1991) experimentally con rmed theoretical predictions by Koml os and Szemer edi (1983) that the phase transition (for the Hamiltonian cycle problem) occurs when the average degree is lnn + ln lnn.", "startOffset": 22, "endOffset": 819}, {"referenceID": 6, "context": "Di erent researchers (Cheeseman et al., 1991; Frank & Martel, 1995; Frank, Gent, & Walsh, 1998) have examined phase transitions on random graphs for the Hamiltonian cycle problem. The obvious constraint parameter is the average degree (or average connectivity) of the graph. As the degree increases, the graph becomes less constrained: it becomes easier both for a Hamiltonian cycle to exist and for an algorithm to nd one. These researchers have examined how Hamiltonicity changes with respect to the average degree. Frank et al. (1998) and Frank and Martel (1995) experimentally veri ed that when using the Gn;m model the phase transition for Hamiltonicity is very close to the phase transition for biconnectivity, which occurs when the average degree is approximately lnn (or m = n lnn=2) 1. Cheeseman et al. (1991) experimentally con rmed theoretical predictions by Koml os and Szemer edi (1983) that the phase transition (for the Hamiltonian cycle problem) occurs when the average degree is lnn + ln lnn.", "startOffset": 22, "endOffset": 900}, {"referenceID": 17, "context": "An Overview of our Backtrack Algorithm Our backtrack algorithm comes from Vandegriend (1998), and is based upon prior work on backtrack Hamiltonian cycle algorithms (Kocay, 1992; Martello, 1983; Shufelt & Berliner, 1994).", "startOffset": 165, "endOffset": 220}, {"referenceID": 20, "context": "An Overview of our Backtrack Algorithm Our backtrack algorithm comes from Vandegriend (1998), and is based upon prior work on backtrack Hamiltonian cycle algorithms (Kocay, 1992; Martello, 1983; Shufelt & Berliner, 1994).", "startOffset": 165, "endOffset": 220}, {"referenceID": 10, "context": "The Gn;m Phase Transition is Not Hard for the Hamiltonian Cycle Problem Hamiltonian cycle together with extra randomly added edges(Broder, Frieze, & Shamir, 1994). For the algorithm to work, the average degree of a vertex needs only be a constant. They claim the result can be easily extended to the case that the average degree is a growing function of n. This is another indication that Hamiltonian graphs near the phase transition will be easy to solve by some algorithm. For a non-Hamiltonian graph to be hard for an algorithm it must contain a feature preventing the formation of a Hamiltonian cycle which the algorithm cannot easily detect. Suppose a backtrack algorithm does not check for vertices of degree one. The algorithm may then require exponential backtrack before determining the non-Hamiltonicity of the graph, since the only way it can detect this is by trying all possible paths and failing. However, degree one vertices are easily detectable, and so are not good indicators of hard instances. They also disappear at the phase transition. Similarly, an algorithm might not check for articulation points, and as a result waste exponential time on what should be easy instances. As n ! 1, the probability of an articulation point existing (in Gn;m) goes to zero as fast as the probability of the existence of a vertex of degree less than two. Other features can lead to non-Hamiltonicity of course, such as k-cuts that leave k+1 or more components (Bondy & Murty, 1976), and these could require time proportional to nk to detect. Under the assumption that NP6=CO-NP there must also exist a set of non-Hamiltonian instances which have no polynomial proof of their status. However, it seems that at the phase transition the larger the feature the less likely it is to occur. In fact, the theoretical results summarized above indicate this must happen. Although we know hard graphs exist, and we may expect these localized types of hard graphs to be more frequent near the phase transition than elsewhere when using Gn;m to generate instances, we also expect the probability of such instances to go to zero as n increases. 3. An Overview of our Backtrack Algorithm Our backtrack algorithm comes from Vandegriend (1998), and is based upon prior work on backtrack Hamiltonian cycle algorithms (Kocay, 1992; Martello, 1983; Shufelt & Berliner, 1994).", "startOffset": 139, "endOffset": 2233}, {"referenceID": 11, "context": "For example, Hogg andWilliams (1994) noticed a sparse set of very hard 3-coloring problems that were not at the phase transition.", "startOffset": 13, "endOffset": 37}, {"referenceID": 1, "context": "Baker (1995) showed that these instances were most often hard as a result of thrashing, and that they could be made easy by backjumping or dependency-directed backtracking.", "startOffset": 0, "endOffset": 13}, {"referenceID": 19, "context": "Random restarts are an integral part of randomized algorithms (Motwani & Raghavan, 1995) and are used frequently in local search and other techniques to escape from local optima (Johnson, Aragon, McGeoch, & Schevon, 1991; Langley, 1992; Selman, Levesque, & Mitchell, 1992; Gomes, Selman, & Kautz, 1998).", "startOffset": 178, "endOffset": 302}, {"referenceID": 6, "context": "From previous work (Cheeseman et al., 1991; Koml os & Szemer edi, 1983) we expect the phase transition to occur when d lnn+ ln lnn.", "startOffset": 19, "endOffset": 71}, {"referenceID": 6, "context": "We expect the phase transition for biconnectivity to be very similar to the phase transition for Hamiltonicity (Cheeseman et al., 1991) and we expect the phase transition for minimum degree greater than 1 to be almost identical to the phase transition for Hamiltonicity (Bollob as, 1984; Koml os & Szemer edi, 1983).", "startOffset": 111, "endOffset": 135}, {"referenceID": 8, "context": "These results appear to di er from those of Frank et al. (1998), who found graphs which took orders of magnitude more search nodes to solve.", "startOffset": 44, "endOffset": 64}, {"referenceID": 8, "context": "These results appear to di er from those of Frank et al. (1998), who found graphs which took orders of magnitude more search nodes to solve. (Their hardest graph took over 1 million nodes.) We believe this is due to two factors. Firstly, the algorithm used to generate the results in their paper did not do an initial check for biconnectivity nor did it use all of the pruning techniques used in our algorithm. Secondly and more importantly, on the small random graphs they used ( 30 vertices) the probability of obtaining certain hard con gurations (such as biconnected and non-Hamiltonian or non-biconnected and minimum degree 2) is much higher than when n is larger, as we discussed in section 2.2. The experiments on small Gn;m graphs (between 16 and 96 vertices) con rm this conjecture. In this case we do nd a small number of quadratically hard graphs, and a few very hard graphs. We consider for purposes of this paper, that a very hard graph on less than 100 vertices is any that takes at least 100,000 search nodes to solve. The very hard graphs from this set of runs are given in Table 4.1. Note that the very hardest took less than two minutes to solve, making our designation of \\very hard\" questionable. Also, note that the smallest graph in this set has 36 vertices, somewhat larger than the 30 vertex examples found by Frank et al. (1998). This is likely because we do articulation point checking initially and better pruning.", "startOffset": 44, "endOffset": 1354}, {"referenceID": 6, "context": "Our results temper the ndings of the various researchers (Cheeseman et al., 1991; Frank et al., 1998; Frank & Martel, 1995) studying phase transitions and the Hamiltonian cycle problem.", "startOffset": 57, "endOffset": 123}, {"referenceID": 8, "context": "Our results temper the ndings of the various researchers (Cheeseman et al., 1991; Frank et al., 1998; Frank & Martel, 1995) studying phase transitions and the Hamiltonian cycle problem.", "startOffset": 57, "endOffset": 123}, {"referenceID": 6, "context": "\" (Cheeseman et al., 1991).", "startOffset": 2, "endOffset": 26}, {"referenceID": 31, "context": "It is quite di cult to generate all graphs with a given degree sequence with equal probability (Wormald, 1984).", "startOffset": 95, "endOffset": 110}, {"referenceID": 14, "context": "There is a long tradition of designing instance sets that foil speci c combinatorial algorithms (Johnson, 1974; Mitchem, 1976; Olariu & Randall, 1989; Spinrad & Vijayan, 1985).", "startOffset": 96, "endOffset": 175}, {"referenceID": 21, "context": "There is a long tradition of designing instance sets that foil speci c combinatorial algorithms (Johnson, 1974; Mitchem, 1976; Olariu & Randall, 1989; Spinrad & Vijayan, 1985).", "startOffset": 96, "endOffset": 175}, {"referenceID": 18, "context": "It bears some resemblance to graphs such as the Meredith graph (Bondy & Murty, 1976) used to disprove certain theoretical conjectures. This graph remains di cult when we vary the neighbour selection heuristic or pruning techniques used by our backtrack algorithm. The graph we construct we refer to as the Interconnected-Cutset (ICCS ) graph. Our class is intended merely to show that exponentially hard classes clearly exist for our algorithm, and many other backtrack algorithms using similar approaches. We do not claim our graphs are intrinsically hard, as there is a polynomial time algorithm that will solve this particular class. The basic concept we use in constructing these graphs is the non-Hamiltonian edge, which we de ne as an edge which cannot be in any possible Hamiltonian cycle. Note that since the graphs are Hamiltonian, each vertex must be incident on at least two edges which are not non-Hamiltonian. Our goal is to force the algorithm to choose a non-Hamiltonian edge at some point. The key observation is that once such an edge is chosen, the algorithm must backtrack to x that choice. With multiples of these bad choices, after backtracking to x the most recent bad choice, the algorithm must eventually backtrack to an earlier point to x a less recent bad choice, which means the more recent choice must be redone, with the algorithm making the bad choice again. The amount of work performed by the algorithm is at least exponential in the number of bad choices. See Vandegriend (1998) for more details.", "startOffset": 51, "endOffset": 1512}, {"referenceID": 10, "context": "We have also performed similar experiments using a randomized heuristic algorithm (Frieze, 1988; P osa, 1976).", "startOffset": 82, "endOffset": 109}], "year": 2011, "abstractText": null, "creator": "dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software"}}}