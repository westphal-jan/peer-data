{"id": "1107.0035", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Jun-2011", "title": "Compositional Model Repositories via Dynamic Constraint Satisfaction with Order-of-Magnitude Preferences", "abstract": "tanusevci The kingo predominant anti-asian knowledge - based barny approach extendible to montand automated payin model pyrophoric construction, kastrioti compositional 11.21 modelling, employs a set of models of particular functional intertribal components. proton-proton Its si\u00e8ge inference mechanism grusendorf takes delchamps a henault scenario belching describing the hathaway constituent interacting components of a yeronga system and translates re-designing it into eitzmann a imbruglia useful mosquitos mathematical basora model. This paper presents savelli a novel pbn compositional modelling bonneau approach kuu aimed iof at building 56-35 model disgorged repositories. It 42.74 furthers 78.10 the fresne field hover in tomorrowland two 66.07 respects. idd Firstly, it monoplacophora expands the application mannina domain of guerrino compositional modelling to provocative systems umax that bryant can delve not be easily described sohna in terms .005 of interacting 59-14 functional ringaskiddy components, feting such as ecological systems. Secondly, it enables the feherty incorporation dredge of brainless user offficials preferences into the model selection process. These features couvrette are achieved volksgrenadier by casting the jofa compositional modelling problem 17-article as bange an activity - aptheker based midmajor dynamic bev preference larba constraint ratiwatana satisfaction problem, jorrin where kanyakumari the dynamic synaesthesia constraints tuft describe nejc the raag restrictions imposed 400-foot over the ergo composition 13-seeded of partial models starworld and the dirigir preferences kulkarni correspond bratcher to those of the user bankshares of the impish automated mordellina modeller. cast-iron In addition, encrustation the congresspersons preference levels are wahdat represented through the 19.23 use bichler of bourr\u00e9e symbolic values ehrenstein that pmma differ in rubasinghe orders sartono of majcon magnitude.", "histories": [["v1", "Thu, 30 Jun 2011 20:35:37 GMT  (649kb)", "http://arxiv.org/abs/1107.0035v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["j keppens", "q shen"], "accepted": false, "id": "1107.0035"}, "pdf": {"name": "1107.0035.pdf", "metadata": {"source": "CRF", "title": "Compositional Model Repositories via Dynamic Constraint Satisfaction with Order-of-Magnitude Preferences", "authors": ["Jeroen Keppens", "Qiang Shen"], "emails": ["JEROEN@INF.ED.AC.UK", "QIANGS@INF.ED.AC.UK"], "sections": [{"heading": "1. Introduction", "text": "Mathematical models form an important aid in understanding complex systems. They also help problem solvers to capture and reason about the essential features and dynamics of such systems. Constructing mathematical models is not an easy task, however, and many disciplines have contributed approaches to automate it. Compositional modelling (Falkenhainer & Forbus, 1991; Keppens & Shen, 2001b) is an important class of approaches to automated model construction. It uses predominantly knowledge-based techniques to translate a high level scenario into a mathematical model. The knowledge base usually consists of generic fragments of models that provide one of the possible mathematical representation of a process that occurs in one or more components. The inference mechanisms instantiate this knowledge base, search for the most appropriate selection of model fragments, and compose them into a mathematical model. Compositional modelling has been successfully applied to a variety of application domains ranging from simple physics, over various engineering problems to biological systems.\nThe present work aims at a compositional modelling approach for building model repositories of ecological systems. In the ecological modelling literature, a range of models have been devised to formally characterise the various phenomena that occur in ecological systems. For example, the logistic growth (Verhulst, 1838) and the Holling predation (Holling, 1959) models describe the changes in the size of a population. The former expresses changes due to births and deaths and the latter changes due to one population feeding on another. A compositional model repository aims\nc\u00a92004 AI Access Foundation. All rights reserved.\nKEPPENS & SHEN\nto make such (partial) models more generally usable by providing a mechanism to instantiate and compose them into larger models for more complex systems involving many interacting phenomena.\nThus, the input to a compositional model repository is a scenario describing the configuration of a system to be modelled. A sample scenario may include a number of populations and various predation and competition relations between them. The output is a mathematical model, called a scenario model, representing the behaviour of the system specified in the given scenario. A set of differential equations describing the changes in the population sizes in the aforementioned scenario due to births, natural deaths, deaths because of predation, available food supply or competition would constitute such a scenario model.\nThis application domain poses three important new challenges to compositional modelling. Firstly, the processes and components of an ecological system that are to be represented in the resulting composed model depend on one another and on the ways they are described. In population dynamics for example, models describing the predation or competition phenomena between two populations rely on the existence of a population growth model for each of the populations involved in the phenomenon. This inhibits the conventional approach of searching for a consistent and adequate combination of partial models, one for each component in the scenario. This approach provides an adequate solution for physical systems because these are comprised of components implementing a particular functionality that can be described by one or multiple partial models. Although the seminal work on compositional modelling (Falkenhainer & Forbus, 1991) recognised the existence of more complex interdependencies in model construction in general, it provided only a partial solution for it: all the conditions under which certain modelling choices were relevant had to be specified manually in the knowledge base.\nSecondly, the domain of ecology lacks a complete theory of what constitutes an adequate model. Most existing compositional modellers are based on a predefined concept of model adequacy. They employ inference mechanisms that are guaranteed to find a model that meets such adequacy criteria. However, criteria to determine how adequate an ecological model may be vary between ecological domains and even between the ecologists that require the model within the same domain. Therefore, the compositional modeller requires a facility to define the properties that the generated ecological models must satisfy.\nThirdly, it is not possible to express all the criteria imposed on the scenario model in terms of hard requirements. Often, ecological models that describe mechanisms and behaviours are only partially understood. In such cases, the choice of one model over another becomes a matter of expert opinion rather than pure theory. Therefore, in the ecological domain, modelling approaches and presumptions are, to some extent, selected based on preferences. Existing compositional modellers are not equipped to deal with such user preferences and this paper presents the very first compositional modeller that incorporates them.\nGenerally speaking, the above three issues are tackled in this paper by means of a method to translate the compositional modelling problem into an activity-based dynamic preference constraint satisfaction problem (aDPCSP) (Keppens & Shen, 2002). An aDPCSP integrates the concept of activity-based dynamic constraint satisfaction problem (aDCSP) (Miguel & Shen, 1999; Mittal & Falkenhainer, 1990) with that of order-of-magnitude preferences (Keppens & Shen, 2002). The attributes and domains of this aDPCSP correspond to model design decisions, with constraints describing the restrictions imposed by consistency requirements and properties and order-of-magnitude preferences describing the user\u2019s preferences on modelling choices. The translation method brings the additional advantage that compositional modelling problems can now be solved by means of\n500\nCOMPOSITIONAL MODEL REPOSITORIES\nefficient aDCSP techniques. As such, compositional modellers can benefit from recent and future advances in constraint satisfaction research.\nThe remainder of this paper is organised as follows. Section 2 introduces the concept of an aDPCSP, a preference calculus that is suitable to express subjective user preferences for model design decisions and to be integrated with the general framework of aDPCSPs. It also gives a solution algorithm for aDPCSPs. Next, section 3 presents the compositional model repository and shows how such an aDPCSP is employed for automated model construction. These theoretical ideas are then illustrated by means of a large example in section 4, applying the compositional model repository to population dynamics problems. Section 5 concludes this paper with a summary and an outline of further research."}, {"heading": "2. Dynamic Constraint Satisfaction with Order-of-Magnitude Preferences", "text": "In this section, a preference calculus based on order-of-magnitude reasoning is introduced and integrated into the activity-based dynamic constraint satisfaction problem (aDCSP) to form an aDCSP with order-of-magnitude preferences (aDPCSP). Then, a solution algorithm for such aDPCSPs is presented. The theory is illustrated with examples from the compositional modelling domain."}, {"heading": "2.1 Background: Activity-based dynamic preference constraint satisfaction", "text": "A hard constraint satisfaction problem (CSP) is a tuple \u3008X,D,C\u3009, where\n\u2022 X = {x1, . . . , xn} is a vector of n attributes,\n\u2022 D = {Dx1 , . . . , Dxn} is a vector containing exactly one domain for each attribute in X. Each domain Dx \u2208 D is a set of values {di1, . . . , dini} that may be assigned to the attribute corresponding to the domain.\n\u2022 C is a set of compatibility constraints. A compatibility constraint c{xi,...,xj} \u2208 C defines a relation over a subset of the domains Dxi , ..., Dxj , and hence c{xi,...,xj} \u2286 Dxi \u00d7 . . .\u00d7Dxj .\nA solution to a hard constraint satisfaction problem is any tuple \u3008x1 : dx1 , . . . , xn : dxn\u3009 such that\n\u2022 each attribute is assigned a value from its domain: \u2200xi \u2208 X, dxi \u2208 Dxi , and\n\u2022 all compatibility constraints are satisfied: \u2200x{xi,...,xj} \u2208 C, \u3008dxi , . . . , dxj \u3009 \u2208 c{xi,...,xj}.\nAn activity-based dynamic CSP (aDCSP), originally proposed in by Mittal and Falkenhainer (1990), extends conventional CSPs with the notion of activity of attributes. In an aDCSP, not all attributes are necessarily assigned in a solution, but only the active ones. As such, each attribute is either active and assigned a value or inactive:\n\u2200xi \u2208 X, ( \u2203dxi \u2208 Dxi , xi : dxi ) \u2194 active(xi)\nThe activity of attributes in an aDCSP is governed by activity constraints that enforce under which assignments of attributes, an assignment to another attribute is relevant or possible. This information is important because it not only dictates for which attributes a value must be searched, but also the set of compatibility constraints that must be satisfied. Clearly, only the compatibility constraints\n501\nKEPPENS & SHEN\nc{xi,...,xj} \u2208 C for which all attributes xi, . . . , xj are active must be satisfied, and a hard CSP is a sub-type of aDCSP in which all attributes are always active.\nIn summary, an activity-based dynamic constraint satisfaction problem (aDCSP) is a tuple \u3008X,D,C,A\u3009, where\n\u2022 \u3008X,D,C\u3009 is a hard CSP, and\n\u2022 A is a set of activity constraints. An activity constraint restricts the sets of attribute-value assignments under which an attribute is active or inactive:\naxi,{xj ,...,xk} \u2286 Dxj \u00d7 . . .\u00d7Dxk \u00d7 {active(xi),\u00acactive(xi)}\nwhere xi 6\u2208 {xj , . . . , xk}.\nA solution to an activity-based dynamic constraint satisfaction problem is any tuple \u3008x1 : dx1 , . . . , xl : dxl\u3009 such that\n\u2022 the attributes that are part of the solution are assigned a value from their domain: \u2200xi \u2208 {x1, . . . , xl}, dxi \u2208 Dxi ,\n\u2022 all activity constraints are satisfied:\n\u2200axi,{xj ,...,xk} \u2208 A, ( xj 6\u2208 {x1, . . . , xl} ) \u2228 . . . \u2228 ( xk 6\u2208 {x1, . . . , xl} )\n\u2228 (\nxi \u2208 {x1, . . . , xl} \u2227 \u3008dxj , . . . , dxk , active(xi)\u3009 \u2208 axi,{xj ,...,xk} )\n\u2228 (\nxi 6\u2208 {x1, . . . , xl} \u2227 \u3008dxj , . . . , dxk ,\u00acactive(xi)\u3009 \u2208 axi,{xj ,...,xk} )\nand\n\u2022 all compatibility constraints are satisfied:\n\u2200c{xi,...,xj} \u2208 C,\u00acactive(xi) \u2228 . . . \u2228 \u00acactive(xj) \u2228 \u3008dxi , . . . , dxj \u3009 \u2208 c{xi,...,xj}"}, {"heading": "2.2 Order-of-magnitude preferences (OMPs)", "text": "Although an aDCSP can capture the hard constraints over decisions in a given problem as well as their dynamically changing solution space (as described by the activity constraints), the representation scheme it employs does not take into account any preferences users may have over possible alternative value assignments. Therefore, this work is extended to allow preference information to be attached to attribute-value assignments. The way in which this can be achieved depends on the representation and reasoning mechanisms underlying the preference calculus. In general, a preference calculus can be defined as a tuple \u3008P,\u2295,4\u3009 where:\n\u2022 P is the set of preferences, \u2022 \u2295 is a commutative, associative operator that is closed in P, and \u2022 4 forms a partial order, that is, reflexive, anti-symmetric and transitive relation defined overP\u00d7 P. Because 4 is reflexive, antisymmetric and transitive, comparing preferences with the 4 relation\nyields one of four possible results:\n502\nCOMPOSITIONAL MODEL REPOSITORIES\n\u2022 Two preferences P1, P2 \u2208 P are equal to one another (denoted P1 = P2) iff P1 4 P2 and P2 4 P1.\n\u2022 A preference P1 \u2208 P is strictly greater than a preference P2 \u2208 P (denoted P1 \u227b P2) iff P1 64 P2 and P2 4 P1.\n\u2022 A preference P1 \u2208 P is strictly smaller than a preference P2 \u2208 P (denoted P1 \u227a P2) iff P1 4 P2 and P2 64 P1.\n\u2022 Two preferences P1, P2 \u2208 P are incomparable with one another (denoted P1?P2) iff P1 64 P2 and P2 64 P1.\nThus, an activity-based dynamic preference constraint satisfaction problem (aDPCSP) is a tuple \u3008X,D,C,A, \u3008P,\u2295,4\u3009, P \u3009 where\n\u2022 \u3008X,D,C,A\u3009 is an aDCSP,\n\u2022 \u3008P,\u2295,4\u3009 is a preference calculus, and \u2022 P is a mapping Dx1 \u222a . . . \u222aDxn 7\u2192 P from the individual attribute-value assignments to the\npreferences.\nThe preferences attached to attribute-value assignments express the relative desirability of these assignments. The aim of the aDPCSP is to find a solution with the highest combined preference. That is, given an aDPCSP \u3008X,D,C,A, \u3008P,\u2295,4\u3009, P \u3009, any solution \u3008xi : dxi , . . . , xj : dxj \u3009 of the aDCSP \u3008X,D,C,A\u3009 such that no other solution \u3008xk : dxk , . . . , xl : dxl\u3009 of \u3008X,D,C,A\u3009 exists with P (xi : dxi)\u2295 . . .\u2295P (xj : dxj ) \u227a P (xk : dxk)\u2295 . . .\u2295P (xl : dxl) is a solution to the aDPCSP.\nIn this section, a preference calculus is introduced to extend an aDCSP into an aDPCSP. The calculus will be illustrated with examples from the compositional modelling domain."}, {"heading": "2.2.1 REPRESENTATION OF OMPS", "text": "Technically, OMPs are combinations of so-called basic preference quantities (BPQs), which are the primitive units of preference or utility valuation associated with possible design decisions. Because it is often difficult to evaluate these BPQs numerically, they are ordered relative to one another employing similar ordering relations as those employed by relative order-of-magnitude calculi (Dague, 1993a, 1993b).\nLet B be the set of all BPQs with respect to a particular decision problem. The BPQs in B are ordered with respect to one another at two levels of granularity, by two relations \u226a and <. First, B is partitioned into orders of magnitude, which are ordered by \u226a. Then, the BPQs within each order of magnitude are ordered by <. Formally, an order-of-magnitude ordering over BPQs B is a tuple \u3008O,\u226a\u3009, where O = {O1, . . . , Oq} is a partition of B and \u226a is an irreflexive and transitive binary relation over O. Any subset of BPQs O \u2208 O is said to be an order of magnitude in B. Similarly, a within-magnitude ordering over a set of BPQs is a tuple \u3008O,<\u3009, where O is an order of magnitude in B and < is an irreflexive and transitive binary relation over O.\nTo illustrate these ideas, consider the problem of constructing an ecological model describing a scenario containing a number of populations. Let some of the populations be parasites and others be hosts for these parasites. Also, assume that certain populations compete with others for scarce resources. In order to construct a scenario model, the compositional modeller must make a number\n503\nKEPPENS & SHEN\nof model design decisions: which population growth, host-parasitoid and competition phenomena are relevant, and which types of model best describe these phenomena.\nFigure 1 shows a sample space of BPQs that correspond to the selection of types of model. For the sake of illustration, the presumption is made that the quality of a scenario model depends on the inclusion of types of model, rather than on the inclusion or exclusion of phenomena. Apart from b23 and b31, all BPQs correspond to standard textbook ecological models1. BPQ b23 stands for the use of a population growth model that is implicit in another population growth model (the LotkaVolterra model, for instance, implicitly includes its own concept of growth). Finally, BPQ b31 is the preference associated with a competition model (say, the only one included in the knowledge base).\nThe 9 BPQs in this sample space are partitioned over 3 orders of magnitude. The \u226a relation orders the orders of magnitude: O2 \u226a O1 and O2 \u226a O3. The binary < relation orders individual BPQs within an order of magnitude. In the BPQ ordering within O1, for instance, Rogers\u2019 host-parasitoid model (b11) is preferred over that by Nicholson and Bailey (b12) and the Holling predation model (b13). The latter two models can not be compared with one another, but they both are preferred over the Lotka-Volterra model. Furthermore, Thompson\u2019s host-parasitoid model is less preferred than that of Nicholson and Bailey, but it can not be compared with the Lotka-Volterra and Holling models."}, {"heading": "2.2.2 COMBINATIONS OF OMPS", "text": "By definition, OMPs are combinations of BPQs. The implicit value of an OMP p equals the combination b1 \u2295 . . .\u2295 bn of its constituent BPQs b1, . . . , bn. This property allows OMPs to be defined as functions such that an OMP P = b1 \u2295 . . .\u2295 bn is a function fP : B 7\u2192 N : b \u2192 fP (b) where B\n1. To be precise, the BPQs b11, b12, b13, b14, b15, b21 and b22 respectively correspond to the inclusion of Rogers\u2019 host-parasitoid model (1972), the host-parasitoid model by Nicholson and Bailey (1935), Holling\u2019s predation model (1959), Thompson\u2019s host-parasitoid model (1929), the predation model by Lotka and Volterra (1925, 1926), a logistic population growth model (Verhulst, 1838) and an exponential population growth model (Malthus, 1798).\n504\nCOMPOSITIONAL MODEL REPOSITORIES\nis the set of BPQs,N is the set of natural numbers and fP (b) equals the number of occurrences of b in b1, . . . , bn.\nFor example, let Pmodel denote the OMP associated with the scenario model that contains three logistic population growth models (b21), two Holling predation model (b13) and one competition model (b31). Therefore,\nPmodel = b21 \u2295 b21 \u2295 b21 \u2295 b13 \u2295 b13 \u2295 b31\nand hence:\nfPmodel(b) =\n\n    \n     3 if b = b21 2 if b = b13 1 if b = b31 0 otherwise\nBy describing OMPs as functions, the concept of combinations of OMPs becomes clear. For two OMPs P1 and P2, the combined preference P1 \u2295 P2 is defined as:\nfP1\u2295P2 : B 7\u2192 N : b \u2192 fP1\u2295P2(b) = fP1(b) + fP2(b) Note that the combination operator \u2295 is assumed to be commutative, associative and strictly monotonic (P \u227a P \u2295 P ). The latter assumption is made to better reflect the ideas underpinning conventional utility calculi (Binger & Hoffman, 1998)."}, {"heading": "2.2.3 PARTIAL ORDERING OF OMPS", "text": "Based on the combinations of OMPs, a partial order 4 over the OMPs can be computed by exploiting the constituent BPQs of the OMPs considered. This partial order implies that a comparison of any pair of OMPs either returns equal preference (=), smaller preference (\u227a), greater preference (\u227b) or incomparable preference (?). This calculus is developed assuming the following:\n\u2022 Prioritisation: A combination of BPQs is never an order of magnitude greater than its constituent BPQs. That is, given the set of BPQs belonging to the same order of magnitude {b1, b2, . . . , bn} \u2286 O1 and a BPQ b \u2208 O2 belonging to a higher order of magnitude, i.e. O1 \u226a O2, then\nb1 \u2295 b2 \u2295 . . .\u2295 bn \u227a b\nWith respect to the ongoing example, this means that any BPQ taken from the order of magnitude O1 is preferred over any combination of BPQs taken from O2. In other words, the choice of a model to describe a host-parasitoid phenomenon is considered more important than the choice of population growth model (see Figure 1).\nPrioritisation also means that distinctions at higher orders of magnitude are considered to be more significant than those at lower orders of magnitude. Consider a number of BPQs b1, . . . , bm\u22121, bm, . . . , bn taken from one order of magnitude O1 and a pair of BPQs {b, b\u2032} taken from an order of magnitude that is higher than O1. If b < b\u2032, then (irrespective of the ordering of the BPQs taken from O1)\nb1 \u2295 . . .\u2295 bm\u22121 \u2295 b \u227a bm \u2295 . . .\u2295 bn \u2295 b \u2032\n505\nKEPPENS & SHEN\n\u2022 Strict monotonicity: Even though distinctions at higher orders of magnitude are more significant, distinctions at lower orders of magnitude are not negligible. That is, given an OMP P and two BPQs b1 and b2 taken from the same order of magnitude with b1 < b2, then (irrespective of the orders of magnitude of the BPQs that constitute P )\nb1 \u2295 P \u227a b2 \u2295 P\nFor instance, the preference ordering depicted in Figure 1 shows that a scenario model with a Roger\u2019s host-parasitoid model and two logistic predation models is preferred over one with a Roger\u2019s host-parasitoid model and two exponential predation models:\nb11 \u2295 b22 \u2295 b22 \u227a b11 \u2295 b21 \u2295 b21\nNote that this is a departure from conventional order-of-magnitude reasoning. If the OMPs associated with two (partial) outcomes contain equal BPQs at a higher order of magnitude, it is usually desirable to compare both solutions further in terms of the (less important) constituent BPQs at lower orders of magnitude, as the example illustrated. However, conventional orderof-magnitude reasoning techniques can not handle this.\n\u2022 Partial ordering maintenance: Conventional order-of-magnitude reasoning is motivated by the need for abstract descriptions of real-world behaviour, whereas the OMP calculus is motivated by incomplete knowledge for decision making. As opposed to conventional orderof-magnitude reasoning and real numbers, OMPs are not necessarily totally ordered. This implies that, when the user states, for example, that b1 < b2 < b and that b3 < b4 < b, the explicit absence of ordering information between the BPQs in {b1, b2} and those in {b3, b4} means that the user is unable to compare them (e.g. because they are entirely different things). Consequently, b1\u2295 b2 would be deemed incomparable to b3\u2295 b4 (i.e. b1\u2295 b2?b3\u2295 b4), rather than roughly equivalent.\nFrom the above, it can be derived that given two OMPs P1 and P2 and an order of magnitude O, P1 is less or equally preferred to P2 with respect to the order of magnitude O (denoted P1 4O P2) provided that\n\u2200bi \u2208 O, ( fP1(bi) + \u2211\nbj\u2208O,bi<bj\nfP1(bj) ) \u2264 ( fP2(bi) + \u2211\nbj\u2208O,bi<bj\nfP2(bj) )\nThus, comparing two OMPs within an order of magnitude can yield four possible results:\n\u2022 P1 is less preferred than P2 with respect to O (P1 \u227aO P2) iff (P1 4O P2) \u2227 \u00ac(P2 4 P1),\n\u2022 P1 is more preferred than P2 with respect to O (P1 \u227bO P2) iff \u00ac(P1 4O P2) \u2227 (P2 4 P1),\n\u2022 P1 is equally preferred than P2 with respect to O (P1 =O P2) iff (P1 4O P2) \u2227 (P2 4 P1), and\n\u2022 P1 is incomparable to P2 with respect to O (P1?OP2) iff \u00ac(P1 4O P2) \u2227 \u00ac(P2 4 P1).\n506\nCOMPOSITIONAL MODEL REPOSITORIES\nIn the ongoing example of Figure 1, for instance, the preference of a scenario model with a Roger\u2019s host-parasitoid model and a Holling predation model is P1 = b11 \u2295 b13 and the preference of a scenario model with a Roger\u2019s host-parasitoid model and a Lotka-Volterra predation model is P2 = b11 \u2295 b15. The latter model is less than or equally preferred to the former within the \u201chost-parasitoid\u201d order of magnitude (O1), i.e. P2 4O1 P1, because\nfP2(b11) = 1 \u2264 1 = fP1(b11),\nfP2(b11)\u2295 fP2(b12) = 1 \u2264 1 = fP1(b11)\u2295 fP1(b12),\nfP2(b11)\u2295 fP2(b13) = 1 \u2264 2 = fP1(b11)\u2295 fP1(b13),\nfP2(b11)\u2295 fP2(b12)\u2295 fP2(b14) = 1 \u2264 1 = fP1(b11)\u2295 fP1(b12)\u2295 fP1(b14),\nfP2(b11)\u2295 fP2(b12)\u2295 fP2(b13)\u2295 fP2(b14) = 2 \u2264 2 = fP1(b11)\u2295 fP1(b12)\u2295 fP1(b13)\u2295 fP1(b14).\nSimilarly, it can be established that the reverse, i.e. P1 4O1 P2, is not true. Therefore, the latter scenario model is less preferred than the former within O1, i.e. P2 \u227aO1 P1.\nThe above result can be further generalised such that given two OMPs P1 and P2, P1 is less or equally preferred to P2 (denoted P1 4 P2) if\n\u2200Oi \u2208 O, (P1 4Oi P2) \u2228 (\u2203Oj \u2208 O, Oi \u226a Oj \u2227 P1 \u227aOj P2)\nMore generally, the relations \u227a, \u227b, = and ? can be derived in the same manner as with the relation 4 where \u227aO, \u227bO, =O and ?O with 4O.\nTo illustrate the utility of such orderings, consider the scenario of one predator population that feeds on two prey populations while the two prey populations compete for scarce resources. The following are two plausible scenario models for this scenario:\n\u2022 Model 1 contains two Holling predation models and three logistic population growth models, and has preference P1 = b13 \u2295 b13 \u2295 b21 \u2295 b21 \u2295 b21.\n\u2022 Model 2 contains one competition model, two Holling predation models, two logistic population growth models and an exponential population growth model, and has preference P2 = b13 \u2295 b13 \u2295 b21 \u2295 b21 \u2295 b22 \u2295 b31.\nAs demonstrated earlier, it can be shown that P1 =O1 P2, P1 \u227bO2 P2, and P1 \u227aO3 P2. From these relations it follows that P1 4 P2 because\n\u2022 for O1: P1 4O1 P2 since P1 =O1 P2,\n\u2022 for O2: there exists an order of magnitude O3 where O3 \u226b O2 and P1 \u227aO3 P2,\n\u2022 for O3: P1 4O3 P2 since P1 \u227aO3 P2.\nAs the reverse is not true, it can be concluded that scenario model 2 is preferred over scenario model 1."}, {"heading": "2.3 Solving aDPCSPs", "text": "This section presents a basic algorithm for solving aDPCSPs. Although OMPs are used in this work, this algorithm can take any aDPCSP provided that it employs a preference calculus with a\n507\nKEPPENS & SHEN\ncommutative, associative and monotonic combination operator. However, the use of OMPs provides a convenient way of specifying incomplete preference information.\nAn aDPCSP is similar to valued CSPs as presented by Schiex, Fargier and Verfaillie (1995) and also to semiring based CSPs (Bistarelli, Montanari, & Rossi, 1997). However, it extends both approaches with activity constraints and involves different underlying presumptions in its valuation structure. The preference valuations in this work are allowed to be ordered partially, as opposed to the valued CSPs.\nAn aDPCSP represents an important type of constraint satisfaction optimisation problem (Tsang, 1993). In order to tackle the optimisation of preferences an A* type algorithm is employed (Hart, Nilsson, & Raphael, 1968; Raphael, 1990). A* algorithms are known to be efficient in terms of the total number of nodes explored in an effort to find optimal solutions, with a given amount of information. On the downside, they have an exponential space complexity. Naturally, a number of alternative approaches could have been explored, including conventional constraint-based solving methods such as depth first branch and bound search. However, the use of an A*-like algorithm is sufficient for solving the aDPCSPs in the domain of the present interest. In particular, algorithm 1 implements an A* search strategy that is capable of handling activity constraints, which involves the use of basic CSP techniques such as constraint propagation and backtracking.\nAn A* algorithm maintains the explored attribute-value assignments by means of a priority queue Q of nodes. Each node n in Q corresponds to a set of attribute-value assignments: solution(n). The search proceeds through a number of iterations. At each iteration, a node n is taken from Q, and replaced by nodes that extend solution(n) with an additional attribute-value assignment. More specifically, for each node n in Q, a set Xu(n) of remaining active but unassigned attributes is maintained. At each iteration, the possible assignments of the first attribute x \u2208 Xu(n), where n is the node taken from Q at the current iteration, are processed. For every assignment x : d that is consistent with solution(n) (i.e. solution(n) \u222a {x : d},C 0 \u22a5), a new child node n\u2032, with solution(n\u2032) = solution(n) \u222a {x : d} and Xu(n\u2032) = Xu(n)\u2212 {x}, is created and added to Q.\nThe activity constraints are processed via propagation rather than constraint satisfaction. Whenever a node n is taken from Q such that Xu(n) is empty, the activity constraints are fired in order to obtain a new set of active but unassigned attributes. That is, Xu(n) is assigned\n{xi | solution(n),A \u22a2 active(xi)} \u2212Xa(n)\nwhere Xa(n) represents the active, but already assigned attributes in node n. In the priority queue Q, nodes are maintained by means of two heuristics: committed preference CP (n) and potential preference PP (n). Here, given a node n,\nCP (n) = \u2295x:d\u2208solution(n)P (x : d)\nPP (n) = CP (n)\u2295 (\u2295x\u2208Xnd(n) max d\u2208Dx P (x : d))\nwhere Xnd(n) is the set of unassigned attributes that can still be activated given the partial assignment solution(n) (as indicated previously, the actual implementation employs an assumption-based truth maintenance system (de Kleer, 1986) to efficiently determine which attribute\u2019s activity can no longer be supported). In other words, CP (n) is the preference associated with the partial attributevalue assignment in node n and PP (n) is CP (n) combined with the highest possible preference assignments taken from all the values of the domains of those attributes in Xnd(n). Thus, PP (n)\n508\nCOMPOSITIONAL MODEL REPOSITORIES\nAlgorithm 1: SOLVE(X,D,C,A, P )\nn \u2190 new node; solution(n) \u2190 {}; Xu(n) \u2190 {xi | {},A \u22a2 active(xi)}; Xa(n) \u2190 {}; CP (n) \u2190 0; PP (n) \u2190 \u2295x\u2208X maxd\u2208D(x) P (x : d); Q \u2190 createOrderedQueue(); enqueue(Q,n, PP (n), CP (n));while Q 6= \u2205\ndo\n                     \n                    \nn \u2190 dequeue(Q); if Xu(n) 6= \u2205\nthen { x \u2190 first(Xu(n)); PROCESS(x, n,C,A, P,Q);\nelse\n             \n            \nXu(n) \u2190 {xi | solution(n),A \u22a2 active(xi)} \u2212Xa(n); if Xu(n) = \u2205\nthen\n     \n    \nnnext \u2190 first(Q); if CP (n) \u2280 PP (nfirst)\nthen return (solution(n)); else {\nPP (n) \u2190 CP (n); enqueue(Q,n, PP (n), CP (n));\nelse { x \u2190 first(Xu(n)); PROCESS(x, n,C,A, P,Q);\nprocedure PROCESS(x, nparent,C,A, P,Q) for d \u2208 D(x)\ndo\n               \n              \nif solution(nparent) \u222a {x : d},C 0 \u22a5\nthen\n             \n             nchild \u2190 new node; solution(nchild) \u2190 solution(nparent) \u222a {x : d}; Xd \u2190 deactivated(solution(nchild), X(nparent)); Xnd(nchild) \u2190 Xnd(nparent)\u2212 {x} \u2212Xd; Xa(nchild) \u2190 Xa(nparent) \u222a {x}; Xu(nchild) \u2190 Xu(nparent)\u2212 {x}; CP (nchild) \u2190 CP (nparent)\u2295 P (x : d); PP (nchild) \u2190 CP (nchild)\u2295\u2295x\u2208Xnd(n) maxd\u2208D(x) P (x : d); enqueue(Q,nchild, PP (nchild), CP (nchild));\ncomputes an upper boundary on the preference of an aDPCSP solution that includes the partial attribute-value assignments corresponding to n.\nThe following theorem shows that algorithm 1 is guaranteed to find the set of attribute-value pairs with the highest combined preferences, within the set of solutions that satisfy the constraints.\nTheorem 1 SOLVE(X,D,C,A, P ) is admissible Proof: SOLVE(X,D,C,A, P ) is an A* algorithm guided by a heuristic function PP (n) = CP (n)\u2295 h(n), where CP (n) is the actual preference of node n and h(n) = \u2295x\u2208Xnd(n)maxd\u2208Dx P (x : d). It follows from the previous discussion that h(n) is greater than or equal to the combined preference of any value-assignment of unassigned attributes that is consistent with the partial solution of n. In this algorithm, the nodes n are maintained in a priority queue in descending order of PP (n). Let \u03b4 be a distance function that reverses the preference ordering such that \u03b4(P1) \u227a \u03b4(P2) \u2194 P1 \u227b P2. SOLVE(X,D,C,A, P ) can then be described as an A* algorithm, where the nodes n in the priority\n509\nKEPPENS & SHEN\nqueue Q are ordered in ascending order of \u03b4(PP (n)), such that \u03b4(PP (n)) = \u03b4(CP (n))\u2295\u03b4(h(n)) and \u03b4(h(n)) is a lower bound on the distance between n and the optimal solution. Therefore, following the work by Hart, Nilsson and Raphael (1968), SOLVE(X,D,C,A, P ) is an admissible algorithm, guaranteed to find a solution S with a minimal \u03b4(P (S)) or a maximal P (S).\nTo illustrate algorithm 1, consider the problem of finding an ecological model that describes the behaviour of two populations, one of which predates on the other. An aDPCSP is constructed for the compositional modelling problem with the following attributes and domains. Note that section 3 demonstrates how the attributes, domains and constraints of this problem can be constructed automatically and that section 4 illustrates these ideas in the context of a larger example.\nX = {x1, x2, x3, x4, x5, x6}\nDx1 = {yes, no} Dx2 = {yes, no} Dx3 = {yes, no} Dx4 = {other, logistic} Dx5 = {other, logistic} Dx6 = {Holling,Lotka-Volterra}\nThe attributes x1, x2 and x3 respectvely describe the relevance of the following phenomena: the change in size of the predator population, the change in size of the prey population and the predation of the prey by the predator. The attributes x4 and x5 represent the choice of type of population growth model. Two types of such models are incorporated in the problem: the logistic one and the \u201cother\u201d. Finally, attribute x6 is associated with the choice of model type of the predation phenomenon. Here, two types of model, the Holling model and the Lotka-Volterra model, are included.\nBecause the Holling predation model presumes that logistic models are employed to describe population growth, and because the Lotka-Volterra Model incorporates its own population growth model, the combinations of assignments to x4, x5, and x6 are restricted. Hence, the aDPCSP contains a set C = {c{x4,x6}, c{x5,x6}} of compatibility constraints, with:\nc{x4,x6} = {\u3008x4 : other, x6 : Lotka-Volterra\u3009, \u3008x4 : logistic, x6 : Holling\u3009}\nc{x5,x6} = {\u3008x5 : other, x6 : Lotka-Volterra\u3009, \u3008x5 : logistic, x6 : Holling\u3009}\nFurthermore, a model type of predator/prey growth must be selected if and only if the corresponding population growth phenomenon is deemed relevant. Also, a model type of predation must be selected if and only if both population growth phenomena and the predation phenomenon are deemed relevant (because ecological models describing predation rely on submodels describing population growth of the predator and the prey). Hence, the aDPCSP contains a set A = {ax4,{x1}, ax5,{x2}, ax6,{x1,x2,x3}} of activity constraints, with:\n510\nCOMPOSITIONAL MODEL REPOSITORIES\nax4,{x1} = {\u3008x1 : yes, active(x4)\u3009, \u3008x1 : no,\u00acactive(x4)\u3009}\nax5,{x2} = {\u3008x2 : yes, active(x5)\u3009, \u3008x2 : no,\u00acactive(x5)\u3009}\nax6,{x1,x2,x3} = {\u3008x1 : yes, x2 : yes, x3 : yes, active(x4)\u3009, \u3008x1 : yes, x2 : yes, x3 : no,\u00acactive(x4)\u3009,\n\u3008x1 : yes, x2 : no, x3 : yes,\u00acactive(x4)\u3009, \u3008x1 : yes, x2 : no, x3 : no,\u00acactive(x4)\u3009,\n\u3008x1 : no, x2 : yes, x3 : yes,\u00acactive(x4)\u3009, \u3008x1 : no, x2 : yes, x3 : no,\u00acactive(x4)\u3009,\n\u3008x1 : no, x2 : no, x3 : yes,\u00acactive(x4)\u3009, \u3008x1 : no, x2 : no, x3 : no,\u00acactive(x4)\u3009}\nFinally, let the preference calculus consist of two orders of magnitude Ogrowth and Opredation, with Ogrowth \u226a Opredation, where\nOgrowth ={pother, plogistic} with plogistic < pother Opredation ={pHolling, pLotka-Volterra} with pLotka-Volterra < pHolling\nThe OMP assignments are as follows:\nP (x4 : other) = P (x5 : other) =pother P (x4 : logistic) = P (x5 : logistic) =plogistic\nP (x6 : Holling) =pHolling P (x6 : Lotka-Volterra) =pLotka-Volterra\nWhen applied to this problem, algorithm 1 initialises the search by creating a node n0, where:\n\u2022 Xu(n0), the set of currently active attributes, is initialised to {x1, x2, x3}, because the activity of these attributes does not depend on other attribute-value assignments.\n\u2022 Xa(n0) and CP (n0) are initialised to the empty set and to 0 respectively, since no attributes have been assigned yet.\n\u2022 Finally, PP (n0) equals pother \u2295 pother \u2295 pHolling because this is the combination of highest OMPs associated with each domain.\nThis initial node is enqueued in Q. Next, the algorithm proceeds through a number of iterations. At each iteration, the node with most potential (as measured by PP and CP ) is dequeued, and its children are generated and enqueued in Q. The nodes that are created in this way are depicted in Figure 2. The number i in the subscript of each node ni indicates the order of node generation, and the thick arrows show the order in which the search space is explored.\nNote that there are three important features of the algorithm that could not be clearly demonstrated within Figure 2. Firstly, at node n5, the initial set of unassigned attributes is exhausted: Xu(n5) = {}. Therefore, the activity constraints are fired when n5 is explored. Because n5 corresponds to the assignment {x1 : yes, x2 : yes, x3 : yes}, the remaining attributes are activated and Xu(n5) is reset to {x4, x5, x6}.\nSecondly, node n12 corresponds to an assignment of all (active) attributes that is consistent with the activity and compatibility constraints:\n{x1 : yes, x2 : yes, x3 : yes, x4 : other, x5 : other, x6 : Lotka-Volterra}\n511\nK E\nP P\nE N\nS &\nS H\nE N\nyes\nx1\nno\nn1\nn2\n51 2\nCOMPOSITIONAL MODEL REPOSITORIES\nThis assignment is not a solution to the aDPCSP, because the corresponding preference is not guaranteed to be maximal (and, the assignment is, in fact, not optimal). After the creation of n12, the priority queue Q looks as follows (the ordering between n2 and n4 may vary since PP (n2) = PP (n4) and CP (n2) = CP (n4)):\n{n10, n8, n12, n6, n2, n4}\nTherefore, the next node to be explored (after n9 and the subsequent creation of n12) is n10. Thirdly, node n19 does correspond with an optimal solution. After its creation, Q equals:\n{n19, n12, n6, n2, n4}\nAs a consequence, n19 is dequeued in the next iteration. Because no children of n19 can be created (Xu(n19) = \u2205 and the activity constraints activate no more attributes), n19 is retained as a solution.\nIf the user is interested in finding multiple alternative solutions, the search may proceed until Q contains no more nodes with a PP value that is not smaller than the maximum preference of the first solution. In this case, PP (n12) \u227a CP (n19) and hence, there is only one solution to this aDPCSP."}, {"heading": "3. Compositional Model Repositories", "text": "The aDPCSPs discussed in the previous section provide the foundation for the development of the compositional model repositories. This section specifies the problem that a compositional model repository is built to solve and shows how it can be translated into an aDPCSP, and hence be resolved using the proposed aDPCSP solution algorithm."}, {"heading": "3.1 Background: assumption based truth maintenance", "text": "An ATMS is a mechanism that keeps track of how each piece of inferred information depends on presumed information and facts and of how inconsistencies arise. In an ATMS, each piece of information used or derived by the problem solver is stored as a node. Certain pieces of information are not known to be true and cannot be inferred from other pieces of information, yet plausible inference may be drawn from them. Such nodes are categorised by a special type and referred to as assumptions.\nInferences between pieces of information are maintained within the ATMS as dependencies between the corresponding nodes. In its extended form (see de Kleer, 1988; or Keppens, 2002), the ATMS can take inferences, called justifications of the form ni \u2227 . . .\u2227 nj \u2227\u00acnk \u2227 . . .\u2227\u00acnl \u2192 nm, where ni, . . . , nj , nk, . . . , nl, nm are nodes that the problem solver is interested in. An ATMS can also take a specific type of justification, called nogood, that leads to an inconsistency, of the form ni \u2227 . . . \u2227 nj \u2227 \u00acnk \u2227 . . . \u2227 \u00acnl \u2192 \u22a5 (meaning that at least one of the statements in {ni, . . . , nj ,\u00acnk, . . . ,\u00acnl} must be false). In the ATMS, these nogoods are represented as justifications of a special node, called the nogood node.\nBased on the given justifications and nogoods, the ATMS computes a label for each (nonassumption) node. A label is a set of environments and an environment is a set of assumptions. In particular, an environment E depicts a possible world where all the assumptions in E are true. Thus, the label L(n) of a node n describes all possible worlds in which n can be true. The label computation algorithm of the ATMS guarantees that each label is:\n513\nKEPPENS & SHEN\n\u2022 Sound - All assumptions in any environment within the label of a node being true is a sufficient condition to derive that node:\n\u2200E \u2208 L(n), [(\u2227ni\u2208Eni) \u2227 (\u2227\u00acni\u2208E\u00acni)] \u22a2 n\n\u2022 Consistent - No environment in the label of a node, other than the nogood node, describes an impossible world:\n\u2200E \u2208 L(n), [(\u2227ni\u2208Eni) \u2227 (\u2227\u00acni\u2208E\u00acni)] 0 \u22a5\n\u2022 Minimal - The label does not contain possible worlds that are less general than one of the other possible worlds it contains (i.e. environments that are supersets of other environments in the label):\n\u2200E \u2208 L(n)\u2204E\u2032 \u2208 L(n), E\u2032 \u2282 E\n\u2022 Complete - The label of each node, other than the nogood node, describes all possible worlds in which that node can be inferred:\n\u2200E,[(\u2227ni\u2208Eni) \u2227 (\u2227\u00acni\u2208E\u00acni) \u22a2 n]\n\u2203E\u2032 \u2208 L(n), [(\u2227ni\u2208E\u2032ni) \u2227 (\u2227\u00acni\u2208E\u2032\u00acni) \u22a2 n]"}, {"heading": "3.2 Knowledge Representation", "text": "As with any other knowledge-based approach, building a compositional modeller requires a formalism for the specification of its inputs, its outputs and its knowledge base. The work developed here is loosely based on the compositional modelling language (Bobrow, Falkenhainer, Farquhar, Fikes, Forbus, Gruber, Iwasaki, & Kuipers, 1996), a proposed standard knowledge representation formalism for compositional modellers, but adapted to meet the challenges of the ecological compositional modelling problems identified in the introduction."}, {"heading": "3.2.1 PRELIMINARY CONCEPTS", "text": "The most primitive constructs in a compositional modeller are participants, relations and assumptions. This subsection summarises these concepts and explains how they are represented herein.\nParticipants2 refer to the objects of interest, which are involved in the scenario or its model. These participants may be real-world objects or conceptual objects, such as variables that express features of real-world objects in a mathematical model. For instance, a population of a species is a typical example of a real-world object, and a variable that expresses the number of individuals of this species forms an example of a conceptual object. It is natural to group objects that share something in common into classes. Participants are herein grouped into participant classes, with each representing a set of participants that share certain common features. Each class will be given a name for easy reference.\nRelations describe how the participants are related to one another. As with participants, some relations represent a real-world relationship, such as:\n2. Some of the previous work in compositional modelling refers to these as individuals and quantities, but such names would not suit the present application. Ecological models typically describe the behaviour of populations rather than that of individuals and it is often hard to distinguish between quantities.\n514\nCOMPOSITIONAL MODEL REPOSITORIES\npredation(frog, insect) (1)\nOther relations may be conceptual in nature, such as equation (2), which describes an important textbook model of logistic population growth (Ford, 1999):\nd dt change = parameter \u00d7 size \u00d7 (1\u2212 size capacity ) (2)\nTo be consistent with other compositional modelling approaches, this paper employs a LISPstyle notation for relations. As such, the above two sample relations become:\n(predation frog insect) (1)\n(d/dt change (* change-rate size (- 1 (/ size capacity)))) (2)\nAssumptions form a special type of relation that are employed to distinguish between alternative model design decisions. Internally, assumptions will be stored in the form of assumption nodes in the ATMS (see section 3.3.1), but in the knowledge base, assumptions appear as relations with a specific syntax and semantics.\nTwo types of assumptions are employed in this article. Relevance assumptions state what phenomena are to be included in or excluded from the scenario model. Typical examples of phenomena are the population growth and predation phenomena. The general format of a relevance assumption is shown in (3). The phenomenon that is incorporated in the scenario model when describing a relevance assumption is identified by \u3008name\u3009 and is specific to the subsequent participants or relations. For example, relevance assumption (4) states that the growth of participant ?population is to be included in the model.\n(relevant \u3008name\u3009 [{\u3008participant\u3009} | \u3008relation\u3009]) (3)\n(relevant growth ?population) (4)\nModel assumptions specify which type of model is utilised to describe the behaviour of a certain participant or relation. Typical examples of model types include the exponential (Malthus, 1798) and the logistic (Verhulst, 1838) model types of population growth. The formal specification of a model assumption is given in (5). Often the \u3008name\u3009 in (5) corresponds to the name of a known (partial) model of the phenomenon or process being described. The example in (6) states that the population ?population is being modelled using the logistic approach.\n(model [\u3008participant\u3009 | \u3008relation\u3009] \u3008name\u3009) (5)\n(model ?population logistic) (6)\n515\nKEPPENS & SHEN"}, {"heading": "3.2.2 SCENARIOS AND SCENARIO MODELS", "text": "As formalised by Keppens and Shen (2001b), a compositional modeller takes two inputs and produces one output. The first input is a representation (which is itself a model) that describes the system of interest by means of an accessible formalism. This model, which normally consists of (mainly) real-world participants and their interrelationships, is called the scenario. The second input is the task description. It is a formal description of the criteria by which the adequacy of the output is evaluated. The output is a new model that describes the scenario in a more detailed formalism, usually a set of variables and equations, which the model-based reasoner can employ readily. Such a model, which normally contains conceptual participants and interrelationships, is called a scenario model. The aim of any compositional modeller is to translate the scenario into a scenario model, by means of the task description.\nIn this work, a model is formally defined by a tuple \u3008P,R\u3009, where P is a set of participants and R is a set of relations over the participants in P . This definition applies to both the scenario and the scenario model. A typical example of a scenario is a description of a predator population, a prey population and a predation relation between the predator and the prey. This scenario is a model \u3008P,R\u3009 with:\nP = {predator,prey}\nR = {(predation predator prey)}\nThe aim of the compositional model repository is to translate a scenario into a scenario model. Within this work, both systems dynamics stock-flow formalism (Forrester, 1968) and ordinary differential equations (ODEs) will be employed as the modelling formalisms. For example, a scenario model that corresponds to the above scenario is depicted in Figure 3. Formally, a scenario model is another model \u3008P,R\u3009 and in this case\nP = {Npredator, Bpredator, Dpredator, Nprey, Bprey, Dprey, Pprey,\nbpredator, bprey, dpredator, dprey, Cpredator, Cprey,\ns(prey,predator), t(prey,predator), r(predator,prey)}\n516\nCOMPOSITIONAL MODEL REPOSITORIES\nR = { d\ndt Npredator = Bpredator \u2212Dpredator, d dt Nprey = Bprey \u2212Dprey \u2212 Pprey, Bpredator = bpredator \u00d7Npredator,\nBprey = bprey \u00d7Nprey,\nDpredator = dpredator \u00d7Npredator \u00d7 Npredator Cpredator , Dprey = dprey \u00d7Nprey \u00d7 Nprey Cprey , Pprey = s(prey,predator) \u00d7Nprey \u00d7Npredator\n1 + s(prey,predator) \u00d7Nprey \u00d7 t(prey,predator) ,\nCpredator = r(predator,prey) \u00d7Nprey,\nCprey = Nprey}\nThe relation between the variables of the mathematical model and those used in the stock-flow diagram is given in table 1. Generally speaking, stock-flow diagrams are graphical representations of systems of (ordinary or qualitative) differential equations. In the automated modelling literature in general, and engineering and physical systems modelling in particular, more sophisticated representational formalisms have been developed to enable the identification of mathematical models of the behaviour of dynamic systems from observations. Examples include bond graphs (Karnopp, Margolis, & Rosenberg, 1990) and generalised physical networks (Easley & Bradley, 1999). However, the potential benefits of these more advanced formalisms are not exploited here, but remain as an interesting future work. Instead, stock-flow diagrams are employed throughout this paper as they are far more commonly used in ecological modelling (Ford, 1999).\nIt is often possible to construct multiple scenario models from a single given scenario, and the task specification is employed to guide the search for the most appropriate one(s). In this work, scenario models are selected on the basis of hard constraints and user preferences. The hard constraints stem from restrictions imposed on compositionality by the representational framework (see section 3.2.3) and from properties the scenario model is required to satisfy (see section 3.2.3). The\n517\nKEPPENS & SHEN\nuser preferences express the user\u2019s subjective view as to which modelling approaches are more appropriate in the context of the current scenario (see section 2.2)."}, {"heading": "3.2.3 THE KNOWLEDGE BASE", "text": "To construct scenario models from a given scenario, a compositional modeller relies on the use of a knowledge base that is particular to the problem domain. To illustrate the ideas, this section presents the constructs employed in the compositional modeller that is developed to synthesise scenario models in the ecological domain.\nComposable relations The knowledge base in this approach consists of partial models that can be instantiated and composed into more complex scenario models. The composition of partial models into a scenario model may involve the composition of partial relations (coming from different partial models) in compounded relations. In the sample scenario model of section 3.2.2, the following relation describes the changes of population size of the prey population\nd dt Nprey = Bprey \u2212Dprey \u2212 Pprey (7)\nIn (7), Nprey is the population size, Bprey the number of births, Dprey the number of natural deaths and Pprey the number of prey who died due to predation. Thus, relation (7) actually describes two phenomena that affect the population size Nprey: natural population growth (Bprey \u2212 Dprey) and predation related deaths (Pprey). When constructing the knowledge base, it is desirable to represent these two phenomena in isolation because they do not always occur in combination. For example, some species do not have predators, and it is therefore unnecessary to always include predation as a cause of death. From this viewpoint, relation (7) can be seen as composed from different composable relations in the knowledge base:\nd dt Nprey = C +(Bprey) d dt Nprey = C \u2212(Dprey) d dt Nprey = C \u2212(Pprey)\nThe use of composable relations enables the knowledge base to cover as many combinations of the phenomena that may affect a relation as possible, by representing each phenomenon individually rather than precompiling everything together. Because only the component parts (i.e. the composable relations) of relations need to be represented, instead of all possible, and however complex, combinations of them, the knowledge base can be smaller and more effective. This section describes how such composable relations are represented in the knowledge base, as well as whether and how they can be composed to form compounded relations.\n518\nCOMPOSITIONAL MODEL REPOSITORIES\nComposable relations are those containing composable functors and for which a method of composition exists (that describes how a complete set of composable relations can be composed). The composable functors employed are those proposed by Bobrow et al. (1996) with a new addition: composable selection. A summary of such composable relations is presented in table 2.\nThe composable relations introduced by Bobrow et al. (1996) are easy to understand. The formulae f in v = C+(f) and v = C\u2212(f) represent terms (respectively f and \u2212f ) of a sum, and the formulae f in v = C\u00d7(f) and v = C\u00f7(f) represent factors (respectively f and 1\nf ) of a product.\nHowever, ecological models in use typically contain selection statements which declare that one certain equation must be employed when a condition is satisfied and some other one otherwise. Formally, a selection is a relation of the form\nif c1 then v = r1 else if c2 . . . else v = rn (8)\nwhere v is a participant, each ci (with i = 1, . . . , n\u22121) is a relation describing a condition statement and each rj (with j = 1, . . . , n) is a relation. This selection relation consists of the partial relations:\nif ci then v = ri with i = 1, . . . , n\u2212 1\nelse v = rn\nTherefore, a selection relation can be composed from two types of composable relation. The first is a composable \u201cif\u201d relation, which has the form v = C if,p(a, f), where v is a participant, p is an element taken from a total order, such as the set of natural numbersN, which denotes the priority of the composable \u201cif\u201d relation in the sequence, and a and f are two given relations. The second type of composable relation is a composable \u201celse\u201d relation, which has the form v = Celse(felse), where felse is a given relation assigned to v if none of the antecedents in the composable \u201cif\u201d relations is true.\nTo illustrate this notation, the selection relation (8) can be composed from the following composable relations:\nv = C if,p1(c1, r1)\n...\nv = C if,pn\u22121(cn\u22121, rn\u22121) v = Celse(rn)\nwith p1 > . . . > pn\u22121. To combine the composable relations, a number of rules are defined to implement the semantics of the representational formalism. In theory, a set of rules can be generated that enables the aggregation of any set of composable relations. In practice, however, a trade-off must be made between flexibility (the ability to combine many different types of composable relation) and comprehensibility (the use of a set of rules that is easily understood by the knowledge engineer who employs composable relations). Thus, the types of composable relations that can be combined has to be restricted.\nTable 3 summarises what composable relations can be joined to form compounded relations. The principle guiding the construction of this table is to allow only the composition of relations of certain types for which a resulting compound relation is intuitively obvious. For example, according\n519\nKEPPENS & SHEN\nto Table 3, a composable addition relation x = C+(y) can be combined with a composable subtraction relation x = C\u2212(z) because their combination is clearly x = y\u2212 z. However, according to Table 3, a composable addition relation x = C+(y) can not be combined with a composable multiplication relation x = C\u00d7(z), because an arbitrary and non-intuitive rule would otherwise have to be defined to decide whether the compound relation would be x = y + z or x = y \u00d7 z.\nThe order in which the composable selections must be considered is defined by the priorities (or is implicit in the case of Celse). Therefore, composable selections can be combined with one another provided no two composable \u201cif\u201d relations have the same priority.\nIn order to derive the actual rules of composition, the sets of all composable relations with the same functor for a given model \u3008P,R\u3009 are defined first:\nR(v, C+) = {v = C+(fi) | (v = C +(fi)) \u2208 R} R(v, C\u2212) = {v = C\u2212(fi) | (v = C \u2212(fi)) \u2208 R} R(v, C\u00d7) = {v = C\u00d7(fi) | (v = C \u00d7(fi)) \u2208 R} R(v, C\u00f7) = {v = C\u00f7(fi) | (v = C \u00f7(fi)) \u2208 R}\nR(v, C if) = {v = C if,pi(ai, fi) | (v = C if,pi(ai, fi)) \u2208 R}\nR(v, Celse) = {v = Celse(fi) | (v = C else(fi)) \u2208 R}\nFrom this, the rules of composition can be built as given in the expressions (9), (10) and (11). They jointly state how a given set of composable relations can be rewritten as a single compound relation. Each of these rules contains a complete set of all composable relations in the antecedent. In particular, the antecedent of rule (9) contains the set of all composable addition and subtraction relations with the same participant v in the left-hand side.\nSimilarly, the antecedent rule (10) contains the complete set of composable multiplication relations. Finally, the antecedent of rule (11) is satisfied for the complete set of composable if and else relations with the same left-hand participant v, provided that the priorities are strictly ordered (i.e. no two priorities are equal) and that there is only a single composable else relation. The latter two conditions are added because two composable if relations with the same priority or two composable else relations can not be compounded. The consequents of the rules of composition explain how these complete sets of composable relations can be joined. This is simply a matter of applying the appropriate mathematical operation to the provided terms.\n520\nCOMPOSITIONAL MODEL REPOSITORIES\nR(v, C+) = {v = C+(f1+), . . . , v = C +(fm+)}\u2227\nR(v, C\u2212) = {v = C\u2212(f1\u2212), . . . , v = C \u2212(fn\u2212)} \u2192\nv = f1+ + . . .+ fm+ \u2212 (f1\u2212 + . . .+ fn\u2212)\n(9)\nR(v, C\u00d7) = {v = C\u00d7(f1\u00d7), . . . , v = C \u00d7(fm\u00d7)}\u2227\nR(v, C\u00f7) = {v = C\u00f7(f1\u00f7), . . . , v = C \u00f7(fn\u00f7)} \u2192\nv = 1\u00d7 f1\u00d7 \u00d7 . . .\u00d7 fm\u00d7 f1\u00f7 \u00d7 . . .\u00d7 fn\u00f7\n(10)\nR(v, C if) ={v = C if,p1(a1, f1), . . . , v = C if,pm(am, fm)}\u2227\nR(v, Celse) ={v = Celse(felse)} \u2227 p1 > . . . > pm \u2192\nv =if a1 then f1, else . . . , if am then fm, else felse\n(11)\nProperty definitions Property definitions describe features of interest to the application requiring a scenario model. A property definition \u03a0 is a tuple \u3008P s,\u03a6, \u03c0\u3009 where P s = {ps1, . . . p s m} is a set of source-participants, a predicate calculus sentence \u03a6 whose free variables are elements of P s, and \u03c0 is a relation, whose free variables are also elements of P s, such that\n\u2200ps1, . . . ,\u2200p s m\u03a6 \u2192 \u03c0\nA typical example of a feature of interest is the requirement that a certain variable in the model is endogenous or exogenous. To be more specific, the property definitions below describe when a variable ?v is endogenous and exogenous respectively.\n(defproperty endogenous :source-participants ((?v :type variable)) :structural-condition ((or (== ?v *) (d/dt ?v *))) :property (endogenous ?v))\n(defproperty exogenous :source-participants ((?v :type variable)) :structural-condition ((not (endogenous ?v))) :property (exogenous ?v))\nThe first definition states that whenever either ?v = * or d dt ?v = * is true (where * matches any constant or formula), ?v is deemed to be endogenous. The second property definition indicates that a variable is said to be exogenous if such an object exists and it is not endogenous.\nBy describing such features formally in the knowledge base, property definitions enable them to be imposed as criteria on the selection of scenario models. In this way, the variable describing the size of a particular population in an eco-system, for instance, can be forced to be endogenous.\nNote that required properties can be specified in two different ways: either globally as goals for the scenario model construction or locally as a required purpose of a certain model fragment. The latter use of model properties will be illustrated later.\n521\nKEPPENS & SHEN\nModel fragments Model fragments are the building blocks with which scenario models are constructed. A model fragment \u00b5 is a tuple \u3008P s, P t,\u03a6s,\u03a6t, A,\u03a0\u3009 where P s = {ps1, . . . p s m} is a set of variables called source-participants, P t = {pt1, . . . , p t n} is a set of variables called targetparticipants, \u03a6s = {\u03c6s1, . . . , \u03c6 s v} is a set of relations, called structural conditions, whose free variables are elements of P s, \u03a6t = {\u03c6t1, . . . , \u03c6 t x} is a set of relations, called postconditions, whose free variables are elements of P s \u222a P t, A = {a1, . . . , ay} is a set of relations, called assumptions, and \u03a0 = is a set of relations, called purpose-required properties, such that:\n\u2200\u03c6ti \u2208 \u03a6 t,\u2200ps1, . . . ,\u2200p s m,\u2203p t 1, . . . ,\u2203p t n, \u03c6 s 1 \u2227 . . . \u2227 \u03c6 s v \u2192 (a1 \u2227 . . . \u2227 ay \u2192 \u03c6 t i) (12)\n\u2200\u03c0 \u2208 \u03a0,\u2200ps1, . . . ,\u2200p s m,\u2200p t 1, . . . ,\u2200p t n, \u03c6 s 1 \u2227 . . . \u2227 \u03c6 s v \u2227 a1 \u2227 . . . \u2227 ax \u2227 \u00ac\u03c0 \u2192 \u22a5 (13)\nNote that, in this work, each property definition \u3008P s,\u03a6, \u03c0\u3009 is equivalent to a model fragment \u3008P s, {},\u03a6, {\u03c0}, {}, {}\u3009.\nFor example, the model fragment below states that a population ?p can be described by two variables ?p-size (describing the size of ?p) and ?p-change (describing the rate of change in population size) and a differential equation\nd dt ?p-size = ?p-change\nThe usage of this partial scenario model is subject to two conditions: (1) the growth phenomenon is relevant with regard to ?p, and (2) the variable ?p-change is endogenous in the eventual scenario model. The former requirement is indicated by the relevance assumption and the latter by the purpose-required property:\n(defModelFragment population-growth :source-participants ((?p :type population)) :assumptions ((relevant growth ?p)) :target-participants ((?p-size :type variable)\n(?p-change :type variable)) :postconditions ((size-of ?p-size ?p)\n(change-of ?p-change ?p) (d/dt ?p-size ?p-change))\n:purpose-required ((endogenous ?p-change)))\nThe purpose-required property is usually satisfied by additional model fragments, such as the one below:\n(defModelFragment logistic-population-growth :source-participants ((?p :type population)\n(?p-size :type variable) (?p-change :type variable))\n:structural-conditions ((size-of ?p-size ?p) (change-of ?p-births ?p)) :assumptions ((model ?p-size logistic)) :target-participants ((?r :type parameter)\n(?k :type variable) (?d :type variable))\n:postconditions ((capacity-of ?k ?p) (density-of ?d ?p-size) (== ?d (C-add (/ ?p-size ?k)))\n(== ?p-change (- (* ?r ?p-size (- 1 ?d))))))\n522\nCOMPOSITIONAL MODEL REPOSITORIES\nModel fragments are rules of inference that describe how new knowledge can be derived from existing knowledge by committing the emerging model to certain assumptions. They are used to generate a space of possible models. Model fragments are instantiated by matching sourceparticipants to existing participants in the scenario or an emerging model, and by matching the structural conditions to corresponding relations. For each possible instantiation, a new instance is generated for each of the target-participants, and where necessary, new instances are also created for the postconditions and assumptions. Such instances, as well as the inferential relationships between the instances of the source-participants, structural conditions and assumptions on the one hand, and those of the target-participants and postconditions on the other, are stored in an ATMS, forming the model space. This is to be further explained in section 3.3.1.\nA model fragment is said to be applied if it is instantiated and the underlying assumptions hold. If a model fragment is applied, the instances of the target-participants and postconditions corresponding to the instantiation of that model fragment must be added to the resulting model. With respect to the above example, the model fragment that implements the logistic population growth model is instantiated whenever variables exist that describe the size and change in a population, and it is applied if the logistic model for population size has also been selected.\nNote that in most compositional modellers, such as the ones devised by Heller and Struss (1998, 2001); Levy, Iwasaki and Fikes (1997); Nayak and Joskowicz (1996); and Rickel and Porter (1997), model fragments represent direct translations of components of physical systems into influences between variables. Because the compositional modeller presented herein aims to serve as an ecological model repository, the contents of the model fragments employed differs from that of conventional compositional modellers in two important regards:\nFirstly, model fragments contain partial models describing certain phenomena instead of influences. These partial models normally correspond to those developed in ecological modelling research. Typical examples include the logistic population growth model (Verhulst, 1838) and the Holling predation model (Holling, 1959) devised in the population dynamics literature.\nSecondly, the partial models contained in the model fragments often need to be composed incrementally. For example, the aforementioned sample model fragment logistic-populationgrowth requires an emerging scenario model, which may be generated by the other sample model fragment population-growth. Thus, one model fragment, e.g. logistic-populationgrowth, can expand on the partial model contained in another, e.g. population-growth. Because of this feature, it is (correctly) presumed that no model fragment \u00b5 generates new relations that are preconditions of model fragments that \u00b5 expands on. Violating this presumption would make little sense in the context of the present application as it would imply a recursive extension of an emerging scenario model with the same set of variables and equations."}, {"heading": "3.2.4 PARTICIPANT CLASS DECLARATION AND PARTICIPANT TYPE HIERARCHIES", "text": "In general, participant classes need not be defined. However, certain types of participant may be described in terms of other interesting participants, irrespective of the modelling choices. This feature provides syntactic sugar for describing important relations between participants, making it easier to declare required properties of a scenario model in terms of the participants of the scenario. For example, the behaviour of a population may be described in terms of population size and growth rate variables:\n(defEntity population :participants (size growth-rate))\n523\nKEPPENS & SHEN\nParticipant class declarations may also be employed within model fragments to provide a more specific definition of the meaning of the source-participants and the target-participants. In this way, participant specifications are constrained to be a feature of another participant by means of the :entity statement, as the following example illustrates:\n(defModelFragment define-population-growth-phenomenon :source-participants ((?p :type population)) :target-participants ((?ps :type stock :entity (size ?p)) (?pg :type variable :entity (growth-rate ?p)) (?pb :type flow) (?pd :type flow))\n:assumptions ((relevant growth ?p)) :postconditions ((== ?pg (- ?pb ?pd))\n(flow ?pb source ?pl) (flow ?pd ?pl sink)))\nFurthermore, participant class declarations may define one class to be an immediate subclass of another. For example, the population participant class of holometabolous insects (e.g. butterflies) may be defined as a subclass of the population participant class:\n(defEntity holometabolous-insect-population :subclass-of (population) :participants (larva-number pupa-number adult-number))\nIn this way, a participant type hierarchy is defined. Each subclass inherits all participants of its superclasses (i.e. its immediate superclass and superclasses of superclasses).\nIn summary, a participant class declaration is a tuple \u03a0 = \u3008\u03a0S , P \u3009 where \u03a0S is a participant class, called the immediate superclass of the participant class and P is a set of participants classes that describe important features of the participant class."}, {"heading": "3.3 Inference", "text": "The compositional modelling method presented herein employs a four step inference procedure:\n1. Model space construction. The model space is an ATMS that efficiently stores all the participants, relations and model design decisions (represented in the form of relevance and model assumptions) that may be part of the final scenario model, as well as the conditions under which each of these participants and relations must or must not be part of the scenario model.\n2. aDCSP construction. The model space contains a number of hard constraints on the participants and relations that may be combined. This inference step extracts such restrictions and translates them into an aDCSP.\n3. Inclusion of order-of-magnitude preferences. Preferences are associated with relevance and model assumptions in the scenario space as they reflect the relative appropriateness of these assumptions, resulting in an aDPCSP.\n4. Scenario model selection. This inference step solves the aDPCSP. The resulting solutions correspond to scenario models that are consistent according to the domain knowledge and optimise the overall preference with respect to the order-of-magnitude preference calculus.\n524\nCOMPOSITIONAL MODEL REPOSITORIES\n525\nKEPPENS & SHEN\nThese four steps correspond to the four squares of the compositional model repository in Figure 4 In this section, each of these inference steps is discussed in detail and illustrated by means of simple examples. The next section contains a more detailed example and shows how this procedure can be applied to a non-trivial ecological modelling domain."}, {"heading": "3.3.1 SCENARIO + KNOWLEDGE BASE = MODEL SPACE", "text": "As previously stated, the aim of a compositional modeller is to translate a scenario into a scenario model. Both are representations of the system of interest though they model the system at a different level of detail. The knowledge base provides the foundation for translation. All the scenario models that can be constructed from the given scenario, with regard to the knowledge base, are stored in the model space.\nA model space is an ATMS (de Kleer, 1986) containing all the participants, relations and assumptions that can be instantiated from a given scenario. In this work, the generalised version of the ATMS, as introduced by de Kleer (1988), is employed as it allows the use of negations of nodes in the justifications. The algorithm GENERATEMODELSPACE(\u3008O,R\u3009) describes how such a model space can be created from a scenario \u3008O,R\u3009. It first initialises the model space \u03b8 with the participant instances (O) and the relation instances (R) from the scenario. Then, for each model fragment whose source-participants and structural conditions match participants and relations already in \u03b8, new instances of its target-participants, assumptions and postconditions are added to \u03b8. Because each property definition \u3008P s,\u03a6, \u03c0\u3009 is equivalent to a model fragment \u3008P s, {},\u03a6, {\u03c0}, {}, {}\u3009, this procedure applies to property definitions as well as model fragments. Matching the sourceparticipants and structural conditions of a model fragment \u00b5 to the emerging model space is performed by the function match(\u00b5, \u03b8, \u03c3) as specified below, where \u00b5 is the model fragment being matched, and \u03c3 is a substitution from the source-participants of \u00b5 to participant instances.\nmatch(\u00b5, \u03b8, \u03c3) =\n\n      \n      \ntrue if \u03c3 = {ps1/o1, . . . , p s m/om}\u2227\nP s(\u00b5) = {ps1, . . . , p s m}\u2227 o1 \u2208 \u03b8 \u2227 . . . \u2227 om \u2208 \u03b8\u2227 \u2200\u03c6 \u2208 \u03a6s(\u00b5), \u03c3\u03c6 \u2208 \u03b8\nfalse otherwise\nEach match, specified by a model fragment \u00b5 and a substitution \u03c3, is processed as follows:\n\u2022 For each assumption a \u2208 A(\u00b5), a new node, denoting the assumption instance \u03c3a, is created and added to \u03b8.\n\u2022 Then, a new node n(\u03c3,\u00b5), denoting the instantiation of \u00b5 via substitution \u03c3, is created, added to \u03b8 and justified by the implication:\n(\u2227a\u2208A(\u00b5)\u03c3a) \u2227 (\u2227p\u2208P s(\u00b5)\u03c3p) \u2227 (\u2227\u03c6\u2208\u03a6s(\u00b5)\u03c3\u03c6) \u2192 n(\u03c3,\u00b5)\n\u2022 Finally, a new instance for each target-participant p \u2208 P t(\u00b5) and for each postcondition \u03c6 \u2208 \u03a6t(\u00b5), provided \u03c3\u03c6 does not already exist in the model space \u03b8, is created. For the target-participants, this involves creating a new symbol for each new participant instance with the function gensym() and extending \u03c3 with the substitution {p/gensym()}. A new node n\n526\nCOMPOSITIONAL MODEL REPOSITORIES\nAlgorithm 1: GENERATEMODELSPACE(\u3008O,R\u3009)\n\u03b8 \u2190 new ATMS; for each o \u2208 O, add-node(\u03b8, o); for each r \u2208 R, add-node(\u03b8, r); for each \u00b5, \u03c3,match(\u00b5, \u03b8, \u03c3)\ndo\n                                 \n                                \njustification \u2190 \u2205; for each a \u2208 A(\u00b5)\ndo { newnode \u2190 add-node(\u03b8, (\u03c3a)); justification \u2190 justification \u222a {newnode};\nfor each p \u2208 P s(\u00b5) do justification \u2190 justification \u222a {find-node(\u03b8, (\u03c3p))}; for each \u03c6 \u2208 \u03a6s(\u00b5) do justification \u2190 justification \u222a {find-node(\u03b8, (\u03c3\u03c6))}; add-node(\u03b8, n(\u03c3,\u00b5)); add-justification(\u03b8, n(\u03c3,\u00b5),\u2227n\u2208justificationn); for each p \u2208 P t(\u00b5)\ndo\n \n \u03c3 \u2190 \u03c3 \u222a {p/gensym()}; o \u2190 add-node(\u03b8, (\u03c3p)); add-justification(\u03b8, o, n(\u03c3,\u00b5));\nfor each \u03c6 \u2208 \u03a6t(\u00b5)\ndo\n   \n  \nif (\u03c3\u03c6 \u2208 \u03b8) then o \u2190 get-node(\u03b8, (\u03c3\u03c6)); else o \u2190 add-node(\u03b8, (\u03c3\u03c6));\nadd-justification(\u03b8, o, n(\u03c3,\u00b5)); for each n1, . . . , nm, inconsistent({n1, . . . , nm)\ndo add-justification(\u03b8, n\u22a5, n1 \u2227 . . . \u2227 nm);\nis created and added to \u03b8 for each new participant instance \u03c3p and for each new instantiated relation \u03c3\u03c6. Each of these nodes is justified by the implication n(\u03c3,\u00b5) \u2192 n.\n527\nKEPPENS & SHEN\nTo illustrate this procedure, Figure 5 shows a graphical representation of the inferences that are constructed by applying a model fragment \u00b5 = \u3008P s, P t,\u03a6s,\u03a6t, A, {}\u3009 with respect to a substitution \u03c3.\nOnce all possible applications of model fragments have been exhausted, the inconsistencies in the model space are identified and recorded in the ATMS. In the algorithm, nogoods are generated for each set {n1, . . . , nm} of inconsistent nodes, denoted inconsistent({n1, . . . , nm}). There are three sources of inconsistencies that are each reported to the ATMS in a different way:\n\u2022 Global properties: Let \u03c0 be an instance of a global property that any scenario model must satisfy. Then, any combination of assumptions and negations of assumptions that prevents \u03c0 from being satisfied is inconsistent. Therefore, inconsistent({\u00ac\u03c0}) must be reported for any required global property \u03c0. This type of inconsistency is depicted in Figure 6(a).\n\u2022 Purpose-required properties: Any application of a model fragment \u00b5 without satisfying its purpose-required properties \u03a0(\u00b5) yields an inconsistency (see (13)). Hence, for each node n(\u03c3,\u00b5) denoting the instantiation of \u00b5 via substitution \u03c3, and for each node n\u03c3\u03c0 describing the appropriate instance of a purpose-required property \u03c0 \u2208 \u03a0(\u00b5), inconsistent({n(\u03c3,\u00b5),\u00acn\u03c3\u03c0}) is reported. This type of inconsistency is depicted in Figure 6(b).\n\u2022 Non-composable relations: In any mathematical formalism designed to describe simulation models of dynamic systems, certain combinations of relations may over-constrain the model, and hence, be unsuitable for generating the behaviour of a system of interest. Within the system dynamics and ODE formalisms used in this paper, assignments of relations to the same variable are only composable if those relations are explicitly deemed composable. In other words, two relations v = ri and v = rj can only be combined with one another if ri and rj are composable. Examples of pairs of non-composable relations include\nx = C+(y) and x = C\u00d7(z) because C+ and C\u00d7 relations are not composable, and\na = C+(b) and a = c+ d because c+ d is not a composable relation.\nCombinations of such non-composable relations must be reported as an inconsistency as well. This type of inconsistency is depicted in Figure 6(c).\n528\nCOMPOSITIONAL MODEL REPOSITORIES\nTo illustrate the model space construction algorithm, Figure 7 presents a small sample model space. It results from the application of the population-growth and logistic-population-growth model fragments and the endogenous property definition, which were described earlier, for a single population \u201cfrog\u201d. If a larger scenario involving multiple populations and relations between these populations were specified, a similar partial model space would be generated for each individual population."}, {"heading": "3.3.2 FROM MODEL SPACE TO ADCSP", "text": "Once the model space has been constructed, it can be translated into an aDCSP. The translation procedure, summarised as algorithm CREATEADCSP(), consists of three steps as described below:\nAlgorithm 2: CREATEADCSP()\ncomment: \u03c3 is the set of substitutions\n\u03c3 \u2190 {}; comment: Generate attributes and domains\nfor each A, assumption-class(A)\ndo\n         \n        \nx \u2190 create-attribute(); D(x) \u2190 {}; \u03c3 \u2190 \u03c3 \u222a {A/x}; for each a \u2208 A\ndo\n \n v \u2190 create-value(); D(x) \u2190 D(x) \u222a {v}; \u03c3 \u2190 \u03c3 \u222a {a/x : v};\ncomment: Generate activity constraints\nfor each A, assumption-class(A)\ndo\n \n\ns \u2190 subject(A); for each {a1\u22a4, . . . , ap\u22a4,\u00aca1\u22a5, . . . ,\u00acaq\u22a5} \u2208 L(s)\ndo add(\u03c3a1\u22a4 \u2227 . . . \u2227 \u03c3ap\u22a4 \u2227 \u03c3\u00aca1\u22a5 \u2227 . . . \u2227 \u03c3\u00acaq\u22a5 \u2192 active(\u03c3A)); comment: Generate compatibility constraints\nfor each {a1\u22a4, . . . , ap\u22a4,\u00aca1\u22a5, . . . ,\u00acaq\u22a5} \u2208 L(n\u22a5) do add(\u03c3a1\u22a4 \u2227 . . . \u2227 \u03c3ap\u22a4 \u2227 \u03c3\u00aca1\u22a5 \u2227 . . . \u2227 \u03c3\u00acaq\u22a5 \u2192 \u22a5);\n529\nKEPPENS & SHEN\n1. Generate the attributes and domain values from the assumptions. The aDCSP attributes correspond to the underlying assumption classes (i.e. groups of assumptions indicating alternative choices with regards to the same model construction decision). A relevance assumption and its negation jointly form an assumption class. For example, A1 ={(relevant growth frog), \u00ac(relevant growth frog)} specifies such an assumption class. The set of model assumptions involving the same participants/relations, but with different model names and hence different descriptions, also form an assumption class. For instance, A2 ={(model nfrog exponential), (model nfrog logistic), (model nfrog other)}, where nfrog is a variable denoting the size of a population, specifies such an assumption class. Running this step of the algorithm, an attribute is created for each assumption class, with the domain of such an attribute consisting of all assumption instances in the assumption class.\n2. Create activity constraints. The attributes and domain values generated in the previous step are only meaningful in situations where the participant and/or relation instances contained in the arguments of the corresponding assumptions exist. For example, the assumption (model nfrog logistic) is only relevant if the participant instance nfrog exists. Clearly, all assumptions within one assumption class have the same participant and/or relation instances as their arguments. Because each assumption class corresponds to one attribute, the attribute can be activated if and only if the participant and/or relation instances associated with the related assumption class are active. Therefore, this step creates activity constraints that activate an attribute based on the conjunction of the environments contained within the labels of the participants/relations of the assumption class. For instance, as can be deduced from Figure 7, nfrog is activated when (relevant growth frog) is committed. Thus, the attribute corresponding to assumption class A2, defined in step 1, is activated under the attribute value assignment associated with the (relevant growth frog) assumption.\n3. Create compatibility constraints. In the ATMS (or model space), all sources of inconsistencies are contained in the label of the nogood node. Therefore, the compatibility constraints are created directly by translating the environments in the label L(\u22a5) into the corresponding conjunctions of attribute-value assignments."}, {"heading": "3.3.3 ADCSP + PREFERENCES = ADPCSP", "text": "The aDCSP produced as above formalises the hard requirements imposed upon the scenario models. Among the scenario models that meet these requirements, some may be better than others, because the underlying model design decisions may be deemed more appropriate by the user. Preferences that express this (relative) level of appropriateness are attached to the assumptions that describe the model design decisions, and by extension, to the attribute-value pairs in the aDCSP. As discussed in section 2, such an extension to the aDCSP constitutes an aDPCSP.\nMore specifically, it is worth recalling that in section 2.2 an order-of-magnitude preference calculus is presented that enables representation and reasoning with subjective user preferences for different relevance and modelling assumption. Next, section 2.3 introduces a solution algorithm for aDPCSPs that include an aDCSP, such as the ones constructed with the approach of section 3.3.2, and are extended with subjective user preferences for alternative design decisions.\n530\nCOMPOSITIONAL MODEL REPOSITORIES"}, {"heading": "3.4 Outline analysis of complexity", "text": "The complexity of the work arises from four major sources: 1) model space construction, 2) label propagation in the ATMS, 3) model space to aDCSP translation, and 4) aDPCSP solution.\nGENERATEMODELSPACE(\u3008O,R\u3009) essentially performs a fixed sequence of instructions and produces a small set of nodes and inferences for each match of a model fragment. Therefore, its time and space complexity are linear with respect to the number of possible matches of model fragments. CREATEADCSP() extracts certain information from the model space and rewrites it in a different formalism without further manipulations. Therefore, its time and space complexity are linear with respect to the size of the model space.\nThe label propagation algorithm of an ATMS is known to have an exponential time complexity. However, because the model space is built up incrementally (by GENERATEMODELSPACE(\u3008O,R\u3009)) from the root nodes of the ATMS network (i.e. those that correspond to facts and have no antecedents) to the leaf nodes (i.e. those that have have no consequents, other than the nogood node) and because the inconsistencies are added at the end, this complexity only increases exponentially with the depth of the network and the number of participants and relations in individual model fragments, rather than with the size of the model space. This fact significantly limits the complexity impact of label propagation. Firstly, the depth of the ATMS network is restricted by the domain. In many conventional compositional modellers, where model fragments are direct translations from scenario components to scenario model equations, this depth would be only one. Empirically, constructing the model space for sophisticated eco-systems, the depth of a model space never exceeded 8. Secondly, the size of the individual model fragments does not change significantly with the size of the knowledge base.\nThe fourth and final source of complexity is driven by the fact that the constraint satisfaction algorithm must determine a consistent combination of assumptions in the model space. The space of attribute value assignments increases exponentially with the size of the number of assumptions and hence, with the model space. Thus, the overall complexity of the present approach is largely dominated by the constraint satisfaction algorithm employed.\nIf the user does not specify any preference, the CSP is an aDCSP. Recently, a number of efficient methods have been devised for solving aDCSPs as presented by Minton et al. (1992); Mittal and Falkenhainer (1990); and Verfaillie and Schiex (1994). This helps minimise the overhead incurred for compositional modelling.\nWith preferences, the CSP becomes an aDPCSP. As argued in section 2, this presents a new problem that has not yet been studied in detail. In this work, an A* algorithm has been proposed to implement the CSP solution method. This approach is known to be the most efficient in terms of the proportion of the search space the algorithm needs to explore before finding an optimal solution, when compared to other search methods that are based on the same heuristic (Hart et al., 1968). A disadvantage is that it incurs an exponential space complexity. As explained by Miguel and Shen (2001a, 2001b); and Tsang (1993), a wide range of alternative solution techniques exist for ordinary CSPs and many of these could also be extended to solve aDPCSPs. A detailed examination of these techniques is a topic of future research."}, {"heading": "3.5 Automated modelling and scientific discovery", "text": "As mentioned previously, a compositional model repository is designed in order to compose models from a system\u2019s structure and relevant domain knowledge. As such, this approach gives rise to a po-\n531\nKEPPENS & SHEN\ntentially beneficial means to operationalise the outcomes of scientific discovery. More specifically, the resultant compositional model repositories will allow existing knowledge on model construction to be applied to unexperienced scenarios and to support investigation into situations which may be physically difficult to replicate or create but which may be synthesised in computational representations.\nThe present work has been applied to the vegetation component of the MODMED n-species model (Legg, Muetzelfeldt, & Heathfield, 1995). This n-species model offers a system dynamics representation of populations of Mediterranean vegetations and of how they are affected by populations of farm animals, climate and environmental management. The purpose of the model is to be instantiated with respect to various Mediterranean communities, and to serve as a component of a very large scale simulation that is designed to simulate the effects of various environmental policies on the Mediterranean landscape. A knowledge base containing approximately 60 model fragments and 4 property definitions has been constructed, on the basis of the most complex parts of the n-species model in about two man-weeks. This knowledge base can be employed to reconstruct variations of the n-species model to accommodate a variety of possible scenarios, as well as to examine simplifications of the original n-species model which exclude certain phenomena.\nThe compositional model repository is most closely related to the seminal work on compositional modelling (Falkenhainer & Forbus, 1991). That approach has a similar functionality but it is devised specifically for physical systems and relies on a component-connection formalism to represent scenarios.\nAnother approach which has recently been developed and applied to the ecological domain by Heller and Struss (1998, 2001). This work derives a system\u2019s structure from observations of its behaviour and domain knowledge. Therefore, it is able to perform diagnosis of ecological systems and therapy suggestion. Another important distinction of this work from the present study is that it presumes that each process can only be described in just one way instead of allowing multiple alternative models.\nIn the machine learning community, a number of approaches have been devised by Bradley, Easley and Stolle (2001); Langley et al. (2002); and Todorovski and Dz\u0306eroski (1997, 2001) to induce sets of differential equations from a) observations of behaviour, b) domain knowledge represented in the form of hypothetical equations, and c) a description of the structure of the system. These approaches aim at scientific discovery by generalising observed behaviour into mathematical models. The specifications of the scenario and the domain knowledge in these methods are similar to those used in this article. This is especially true for the work by Langley et al. (2002); and Todorovski and Dz\u0306eroski (1997, 2001), because that work has also been applied to population dynamics. However, the internal mechanisms of these approaches are very different as they essentially rely on exhaustive search procedures instead of constraint satisfaction techniques."}, {"heading": "4. A Population Dynamics Example", "text": "The examples used throughout the previous sections were taken from a more extensive application study of the present work. The application was aimed to construct a repository of basic population dynamic models, describing the phenomena of growth, predation and competition. This section presents an overview of how the proposed approach is employed in this application to show the ability of the work to scale to larger problems.\n532\nCOMPOSITIONAL MODEL REPOSITORIES"}, {"heading": "4.1 Knowledge base", "text": "This subsection illustrates how a set of model fragments can be constructed. The challenge of this task lies in the fact that model fragments must encompass a sufficiently general and reusable component part of the ecological models. In instances of models found in the literature on ecological modelling, the boundaries of the recurring component parts are hidden, and it is therefore up to the knowledge engineer to identify them.\nFirst, a hierarchy of entity types is set up. The system dynamics models shown earlier contain only three types of participant: variables, stocks and flows. Here, stocks and flows are a special type of variable with a predetermined meaning. That is, a flow f into a stock s corresponds to the equation d\ndt s = C+(f) and a flow f out of a stock s denotes d dt s = C\u2212(f). Hence, stocks and\nflows are defined as subclasses of the participant class variable:\n(defEntity variable) (defEntity stock\n:subclass-of (variable)) (defEntity flow\n:subclass-of (variable))\nThe sample properties defined in section 3.2.3, which describe the condition under which a variable is endogenous or exogenous, are employed in this knowledge base:\n(defproperty endogenous-1 :source-participants ((?v :type variable)) :structural-conditions ((== ?v *)) :property (endogenous ?v))\n(defproperty endogenous-2 :source-participants ((?v :type variable)) :structural-conditions ((d/dt ?v *)) :property (endogenous ?v))\n(defproperty exogenous :source-participants ((?v :type variable)) :structural-conditions ((not (endogenous ?v))) :property (exogenous ?v))\nThe next three model fragments contain the rules of the stock-flow diagrams employed by systems dynamics models. They respectively describe that:\n\u2022 A flow ?flow into a stock ?stock corresponds to the composable differential equation:\nd dt ?stock = C+(?flow)\n\u2022 A flow ?flow out of a stock ?stock corresponds to the composable differential equation:\nd dt ?stock = C\u2212(?flow)\n\u2022 A flow ?flow from one stock ?stock1 to another stock ?stock2 corresponds to the composable differential equations:\nd dt ?stock1 = C\u2212(?flow) and d dt ?stock2 = C+(?flow)\n533\nKEPPENS & SHEN\n(defModelFragment inflow :source-participants ((?stock :type stock) (?flow :type flow))\n:structural-conditions ((flow ?flow source ?stock)) :postconditions ((d/dt ?stock (C-add ?flow))))\n(defModelFragment outflow :source-participants ((?stock :type stock) (?flow :type flow))\n:structural-conditions ((flow ?flow ?stock sink)) :postconditions ((d/dt ?stock (C-sub ?flow))))\n(defModelFragment inflow :source-participants ((?stock1 :type stock) (?stock2 :type stock) (?flow :type flow))\n:structural-conditions ((flow ?flow ?stock1 ?stock2)) :postconditions ((d/dt ?stock1 (C-sub ?flow)) (d/dt ?stock2 (C-add ?flow))))\nOnce the above declarations are in place, the knowledge base of model fragments can be defined. The first model fragment describes the population growth phenomenon. Note that all of the aforementioned growth, predation and competition models contain a stock representing population size and two flows, one flow of births into the stock and another flow of deaths out of the stock. This common feature of models on population dynamics is contained in a single model fragment.\n(defModelFragment population-growth :source-participants ((?population :type population))\n:assumptions ((relevant growth ?population)) :target-participants ((?size :type stock :name size) (?birth-flow :type flow :name births) (?death-flow :type flow :name deaths)) :postconditions ((flow ?birth-flow source ?size) (flow ?death-flow ?size sink) (size-of ?size ?population) (births-of ?birth-flow ?population) (deaths-of ?death-flow ?population)) :purpose-required ((endogenous ?birth-flow) (endogenous ?death-flow)))\nThe variables ?birth-flow and ?death-flow become endogenous if the model contains an equation describing birth flow and death flow. These equations differ between population growth models. Two types of population growth model are the exponential growth model (Malthus, 1798), which is shown in Figure 8(a), and the logistic growth model (Verhulst, 1838), which is shown in Figure 8(b). The following two model fragments formally describe these component models:\n534\nCOMPOSITIONAL MODEL REPOSITORIES\n(defModelFragment exponential-population-growth :source-participants ((?population :type population) (?size :type variable) (?birth-flow :type variable) (?death-flow :type variable))\n:structural-conditions ((size-of ?size ?population) (births-of ?birth-flow ?population) (deaths-of ?death-flow ?population)) :assumptions ((model ?size exponential)) :target-participants ((?birth-rate :type variable :name birth-rate) (?death-rate :type variable :name death-rate)) :postconditions ((== ?birth-flow (* ?birth-rate ?size)) (== ?death-flow (* ?death-rate ?size))))\n(defModelFragment logistic-population-growth :source-participants ((?population :type population) (?size :type variable) (?birth-flow :type variable) (?death-flow :type variable))\n:structural-conditions ((size-of ?size ?population) (births-of ?birth-flow ?population) (deaths-of ?death-flow ?population)) :assumptions ((model ?size logistic)) :target-participants ((?birth-rate :type variable :name birth-rate) (?death-rate :type variable :name death-rate) (?density :type variable :name total-population) (?capacity :type variable :name capacity)) :postconditions ((== ?birth-flow (* ?birth-rate ?size)) (== ?death-flow (* ?death-rate ?size ?density)) (== ?density (C-add (/ ?size ?capacity))) (density-of ?density ?population) (capacity-of ?capacity ?population)))\nThere is one twist in compositional modelling of population growth. Sometimes, the actual growth model is implicitly contained within another type of model. In such cases, the growth phenomenon and the corresponding differential equations are still relevant, but none of the dedicated growth models can be employed. For example, as will be shown later, the Lotka-Volterra predation model comes with its own equations describing growth.\n535\nKEPPENS & SHEN\nThe model fragment other-growth allows for an empty growth model, named other, to be selected. However, due to the purpose-required property that any instance of ?p-change must be endogenous, this empty model can only be selected if a growth model is implicitly included elsewhere.\n(defModelFragment other-growth :source-participants ((?population :type population) (?size :type variable) (?birth-flow :type variable) (?death-flow :type variable))\n:structural-conditions ((size-of ?size ?population) (births-of ?birth-flow ?population) (deaths-of ?death-flow ?population)) :assumptions ((model ?population other)))\nIn addition to population growth, two other phenomena are included in the knowledge base: predation and competition. Predation and competition relations between species are represented by predicates over the populations: e.g. (predation foxes rabbits) and (competition sheep cows). However the existence of a phenomenon does not necessarily mean that it must be contained within the model. It would make little sense to model predation and competition without modelling the size of the populations, because models of these phenomena relate population sizes to one another. Therefore, the incorporation of the predation phenomenon is made dependent upon the existence of variables representing population size. Also, human expert modellers may prefer to leave a phenomenon out of the resulting model. To keep this choice open, the following two model fragments construct a participant representing the phenomena of predation and competition, and make it dependent upon a relevance assumption:\n(defModelFragment predation-phenomenon :source-participants ((?predator :type population) (?prey :type population) (?predator-size :type variable) (?prey-size :type variable))\n:structural-conditions ((predation ?predator ?prey) (size-of ?predator-size ?predator) (size-of ?prey-size ?prey)) :assumptions ((relevant predation ?predator ?prey)) :target-participant ((?predation-phenomenon :type phenomenon :name predation-phenomenon)) :postconditions ((predation-phenomenon ?predation-phenomenon ?predator ?prey)) :purpose-required ((has-model ?predation-phenomenon)))\n(defModelFragment competition-phenomenon :source-participants ((?population1 :type population) (?population2 :type population) (?size1 :type variable) (?size2 :type variable))\n:structural-conditions ((competition ?population1 ?population2) (size-of ?size1 ?population1) (size-of ?size2 ?population2))\n536\nCOMPOSITIONAL MODEL REPOSITORIES\n:assumptions ((relevant competition ?population1 ?population2)) :target-participant ((?competition-phenomenon :type phenomenon :name competition-phenomenon)) :postconditions ((competition-phenomenon ?competition-phenomenon ?population1 ?population2)) :purpose-required ((has-model ?competition-phenomenon)))\nBoth model fragments have a purpose-required property of the form (has-model ?phen). This property expresses the condition that a model must exist with respect to a phenomenon:\n(defproperty has-model :source-participants ((?p :type phenomenon)) :structural-conditions ((is-model-of ?p *)) :property (has-model ?p))\nThe next two model fragments implement such models (thereby satisfying the above has-model purpose-required property) for the predation phenomenon between two populations. They describe two well-known predation models: the Lotka-Volterra model (1925, 1926), which is shown in Figure 9(a), and the Holling model (1959), which is shown graphically in Figure 9(b).\n(defModelFragment Lotka-Volterra :source-participants ((?predation-phenomenon :type phenomenon) (?predator :type population) (?predator-size :type stock) (?predator-birth-flow :type flow) (?predator-death-flow :type flow) (?prey :type population) (?prey-size :type stock) (?prey-birth-flow :type flow) (?prey-death-flow :type flow))\n:structural-conditions ((predation-phenomenon ?predation-phenomenon ?predator ?prey)\n537\nKEPPENS & SHEN\n(size-of ?predator-size ?predator) (births-of ?predator-birth-flow ?predator) (deaths-of ?predator-death-flow ?predator) (size-of ?prey-size ?prey) (births-of ?prey-birth-flow ?prey) (deaths-of ?prey-death-flow ?prey))\n:assumptions ((model ?predation-phenomenon lotka-volterra)) :target-participants ((?prey-birth-rate :type variable :name birth-rate) (?predator-factor :type variable :name predator-factor) (?prey-factor :type variable :name prey-factor) (?predator-death-rate :type variable :name death-rate)) :postconditions ((== ?prey-birth-flow (* ?prey-birth-rate ?prey-size)) (== ?predator-birth-flow (* ?predator-factor ?prey-size ?predator-size)) (== ?prey-death-flow (* ?prey-factor ?prey-size ?predator-size)) (== ?predator-death-flow (* ?predator-death-rate ?predator-size)) (is-model-of lotka-volterra ?predation-phenomenon)))\nAs mentioned earlier, the Lotka-Volterra model introduces its own growth model for the prey and predator populations by assigning specific equations to the variables, which describe changes in the sizes of the predator and prey populations, ?pred-change and ?prey-change respectively. Thus, it satisfies the purpose-required property in the application of the population-growth model fragment for the ?prey and ?pred populations.\n(defModelFragment Holling :source-participants ((?predation-phenomenon :type phenomenon) (?predator :type population) (?predator-size :type stock) (?capacity :type variable) (?prey :type population) (?prey-size :type stock))\n:structural-conditions ((predation-phenomenon ?predation-phenomenon ?predator ?prey) (size-of ?predator-size ?predator) (size-of ?prey-size ?prey) (capacity-of ?capacity ?predator)) :assumptions ((model ?predation-phenomenon holling)) :target-participants ((?search-rate :type variable :name search-rate) (?handling-time :type variable :name handling-time) (?prey-requirement :type variable :name prey-requirement) (?predation :type flow :name predation)) :postconditions ((flow ?predation ?prey-size sink) (== ?predation\n(/ (* ?search-rate ?prey-size ?predator-size) (+ 1 (* ?search-rate ?prey-size ?handling-time))))\n(== ?capacity (C-add (* ?prey-requirement ?prey))) (is-model-of holling ?predation-phenomenon)))\nThe Holling model employs a variable denoting the capacity of a population. Such a variable may be introduced by a logistic growth model. In practice, logistic growth models and Holling predation models are often used in conjunction. The compositional modeller need not be aware of such combinations of models, however. All it needs to know is the prerequisites of the individual component models contained within each model fragment.\n538\nCOMPOSITIONAL MODEL REPOSITORIES\nThe final model fragment in the knowledge base implements a model of competition between two species. It formally describes the competition model type depicted in Figure 10. As this model fragment contains the only population competition model in the knowledge base, it does not contain a model assumption to represent the model.\n(defModelFragment competition :source-participants ((?competition-phenomenon :type phenomenon) (?population-1 :type population) (?size-1 :type stock) (?density-1 :type variable) (?capacity-1 :type variable) (?population-2 :type population) (?size-2 :type stock) (?density-2 :type variable) (?capacity-2 :type variable))\n:structural-conditions ((competition-phenomenon ?competition-phenomenon ?population-1 ?population-2) (density-of ?density-1 ?size-1) (capacity-of ?capacity-1 ?size-1) (density-of ?density-2 ?size-2) (capacity-of ?capacity-2 ?size-2)) :assumptions ((relevant competition ?population-1 ?population-2)) :target-participants ((?weight-12 :type variable :name weight) (?weight-21 :type variable :name weight)) :postconditions ((== ?density-1 (C-add (/ (* ?weight-12 ?size-2) ?capacity-1))) (== ?density-2 (C-add (/ (* ?weight-21 ?size-1) ?capacity-2)))))\n539\nKEPPENS & SHEN"}, {"heading": "4.2 Model space", "text": "A model space is constructed when the knowledge base is instantiated with respect to a given scenario. Consider for example the following scenario, which describes a predator population that preys on two other populations, prey1 and prey2, whilst the two prey populations compete with one another:\n(defScenario pred-prey-prey-scenario :entities ((predator :type population)\n(prey1 :type population) (prey2 :type population))\n:relations ((predation predator prey1) (predation predator prey2) (competition prey1 prey2)))\nThe full specification of the model space is too unwieldy to present here but an abstract graphical representation of the model space for this scenario is shown in Figure 11. This model space contains the following knowledge:\n\u2022 From each of the three populations in the scenario, a set of three population growth models (i.e. exponential, logistic and other) is derived. This inference is dependent upon a relevance assumption of the population growth phenomenon, and a model assumption that corresponds to one of the three population growth models.\n540\nCOMPOSITIONAL MODEL REPOSITORIES\n\u2022 From both predation relations (i.e. (predation predator prey1) and (predation predator prey2)), and the populations related by them, a set of two predation models (i.e. Lotka-Volterra and Holling) is derived. This inference is dependent upon a relevance assumption of the predation phenomenon and a model assumption that corresponds to one of the two predation models.\n\u2022 From the competition relation (competition prey1 prey2), and the populations related by it, a competition model is derived. Because there is only one competition model, the inference of the competition model is only dependent upon a relevance assumption that corresponds to the competition phenomenon.\nIn addition to the hypergraph of Figure 11, the model space also contains a number of constraints on the conjunctions of assumptions that are consistent. As explained earlier, these stem from two sources: 1) non-composable relations and 2) purpose-required properties. An example will be given of each type.\nLet predation-phen-1 be the predation phenomenon between predator and prey1, and prey1-size be the variable representing the size of the prey1 population. In this example, the model fragments exponential-population-growth and Lotka-Volterra will each generate an equation for computing the value of a variable representing the change in prey1-size. Because both equations can not be composed, the following inconsistency is generated:\n(relevant growth prey1) \u2227 (model prey1-size exponential)\u2227\n(relevant growth predator) \u2227 (relevant predation predator prey1)\u2227\n(model predation-phen-1 lotka-volterra) \u2192 \u22a5\nInconsistencies also arise from purpose-required properties. For example, if the model fragment predation-phenomenon is applicable and the predation relation is deemed relevant, then the purpose-required property (has-model ?pred-phen) will become a condition for consistency. Under certain combinations of assumptions, this property may not be satisfied. Say, when the Holling predation and exponential growth models are both selected, the Holling model is not generated because there is no ?capacity for which (capacity ?capacity ?pred) is true. No predation model is created in this case (because the Holling model fragment can not be instantiated), even though the predation phenomenon is deemed relevant under this set of assumptions. This is inconsistent with the has-model purpose-required property in the predation-phenomenon model fragment, and the responsible combination of assumptions is therefore marked as nogood.\n(relevant growth predator) \u2227 (model predator-size exponential)\u2227\n(relevant growth prey1) \u2227 (model prey1-size exponential)\u2227\n(relevant predation predator prey1) \u2227 (model predation-phen-1 holling) \u2192 \u22a5"}, {"heading": "4.3 aDPCSP and solution", "text": "The resultant model space is translated into an aDCSP to enable the selection of a consistent set of assumptions, using advanced CSP solution techniques. The aDCSP derived from the above model space is depicted in Figure 12.\n541\nKEPPENS & SHEN\nThis aDCSP contains 11 attributes. They are listed with the corresponding assumption classes in table 4. The first 6 attributes correspond to the notion of relevance phenomenon: 3 population growth phenomena, 2 predation phenomena and 1 competition phenomenon to be precise. The other 5 attributes correspond to 5 sets of model types: 3 sets of population growth models and 2 sets of predation models.\nThe assumptions from which the attributes were generated form domains of values. The resulting domains of the aforementioned attributes are summarised in table 5.\nThe activity constraints in the aDCSP describe the conditions that instantiate the subject of the assumptions that correspond to an attribute. Since each participant or relation has a label in the model space, a minimal set of assumptions under which it becomes part of the emerging model is available. When a participant or relation is the subject of an assumption, this label explicitly describes the sets of assumptions under which the attribute that corresponds to that subject should\n542\nCOMPOSITIONAL MODEL REPOSITORIES\nbe activated. By translating the label of a subject into sets of attribute-value assignments, the antecedents of the activity constraints are constructed.\nIn this example, the relevance assumptions (attributes x1, . . . , x6) take their subjects from the scenario, and hence, they are always active. The attributes related to the model assumptions for population growth are active if the corresponding assumptions denoting relevance of population growth are true. That is,\nx1 : d1,y \u2192 active(x7)\nx2 : d2,y \u2192 active(x8)\nx3 : d3,y \u2192 active(x9)\nThe attributes related to the assumptions about the predation models are active if the corresponding assumptions denoting relevance of predation, and the assumptions describing relevance of population growth, are true for the populations involved in the predation relation. That is,\nx1 : d1,y \u2227 x3 : d3,y \u2227 x4 : d4,y \u2192 active(x10)\nx2 : d2,y \u2227 x3 : d3,y \u2227 x5 : d5,y \u2192 active(x11)\nFigure 12 shows a graphical representation of these activity constraints. The compatibility constraints correspond directly to the inconsistencies in the nogood node. These inconsistencies have been discussed in the previous section and are depicted in Figure 12. Once the aDCSP is constructed, preferences may be attached to attribute-value assignments. Suppose that preferences are only assigned to the standard population modelling choices, i.e. expo-\n543\nKEPPENS & SHEN\nnential growth, logistic growth, lotka-volterra predation and holling predation, and to the relevance of competition (because only one type model has been implemented for this phenomenon). For example, the following BPQs could be employed:\npexponential < plogistic\nplotka-volterra < pholling\npcompetition\nThe logistic and Holling models are preferred over the exponential and Lotka-Volterra models because the former are generally regarded as being more accurate. Note that the preferences have been ordered in such a way that those corresponding to different phenomena are not related to one another. The justification for this ordering is that, even though the models are structurally connected (there are restrictions over which models can combined with one another), models of different phenomena inherently describe behaviours that can not be compared with one another. The preference assignments for attribute value assignments are summarised in table 6.\nSolving this aDPCSP is simple. First, the attributes x1, . . . , x6 are activated. Each of these attributes is assigned xi : di,y because that assignment maximises the potential preference. Then, the attributes x7, . . . , x11 are activated. Here, attributes x7, . . . , x9 are assigned xi : di,l because the logistic growth model has the highest preference. Finally, x10 and x11 are assigned x10 : d10,h and x11 : d11,h because the Holling models have the highest preference and are not inconsistent with the logistic model committed earlier. The resulting solution satisfies the following set of assumptions:\n{(relevant growth prey1),\n(relevant growth prey2),\n(relevant growth predator),\n(relevant competition prey1 prey2),\n(relevant predation predator prey1),\n(relevant predation predator prey2),\n(model size-1 logistic),\n(model size-2 logistic),\n(model size-3 logistic),\n(model predation-phen-1 holling),\n(model predation-phen-2 holling)}\n544\nCOMPOSITIONAL MODEL REPOSITORIES"}, {"heading": "4.4 Sample scenario model", "text": "Figure 13 shows how a scenario model can be deduced from the above set of assumptions by exploiting the model space. The nodes corresponding to the aforementioned assumptions and those that logically follow from the assumption set are indicated in the Figure.\nWhen combining the participants and relations in the resulting scenario model, the model given in Figure 14 can be drawn. This model corresponds to the one that an ecologist would draw if the logistic growth and Holling predation models were regarded to be appropriate for the task at hand."}, {"heading": "5. Conclusion and Future Work", "text": "This article has presented a novel approach to compositional modelling that enables the construction of models of ecological systems. This work differs from existing approaches in that it automatically translates the compositional modelling problem into an aDCSP with (order-of-magnitude) preference valuations. There are several benefits to this method.\nThe use of a translation algorithm that converts the compositional modelling problem into an aDCSP allows criteria to be formalised. More importantly, it also enables efficient, existing and future, aDCSP solution techniques to be effectively applied to solving compositional modelling problems.\n545\nK E\nP P\nE N\nS &\nS H\nE N\nGrowth Growth\nB2 = b2 \u00d7N2\nD2 = d2 \u00d7N2 \u00d7 \u03b42\nB1 = b1 \u00d7N1\nD1 = d1 \u00d7N1 \u00d7 \u03b41\n54 6\nCOMPOSITIONAL MODEL REPOSITORIES\nThe extension of the aDCSPs with (order-of-magnitude) preferences (to form aDPCSPs) also permits the incorporation of softer requirements in the compositional modelling problem. In this paper, order-of-magnitude preferences have been employed to express the appropriateness of alternative model types for certain phenomena. While such considerations may be described by hard constraints in the physical systems domain3, they are more subjective in less understood problem domains, such as the ecological modelling domain. The approach presented herein provides a means to capture and represent the subtlety of the flexible model design decisions.\nThe theoretical ideas presented in this article have been applied to real-world ecological modelling problems. In this paper, it has been demonstrated how the resultant compositional modeller can be employed to create a repository of population dynamics models. The approach has also been applied to automated model construction of large and complex ecosystems such as the MODMED model of Mediterranean vegetation (Legg et al., 1995), as reported by Keppens (2002).\nThere are some practical and theoretical issues that need to be addressed, however. On the practical side, the types of ecological model design decisions, as represented by the assumptions and assumption classes, and as supported by the inference mechanisms, should be extended. Ecological systems tend to involve interrelated populations of individuals, instead of functional compositions of individual components as with physical systems. One particularly important type of design decision in ecological modelling is therefore granularity. This requires the introduction of novel representation formalisms and inference mechanisms such as aggregation and disaggregation. Initial work for considering populations as single entities and for dividing such entities into sub-populations when necessary has been carried out (Keppens & Shen, 2001a). Integration of such work into the present aDPCSP framework requires further investigation.\nOn the theoretical side, the analysis of the complexity of the present approach is rather informal. Much remains to be done in this regard, especially when comparing to the complexity of existing compositional modellers. For this comparison, additional work will be required to adapt the current translation procedure to suit existing compositional modelling problems. Most compositional modellers are of exponential complexity, however. As they employ problem-specific solution algorithms, little is known about opportunities for improving their efficiency. This work hopes to be a first step toward further understanding this important issue."}, {"heading": "Acknowledgments", "text": "This work is partly supported by the UK-EPSRC grant GR/S63267. The first author has also been supported by a College of Science and Engineering scholarship at the University of Edinburgh. We are very grateful to Robert Muetzelfeldt for helpful discussions and assistance in the research reported, whilst taking the full responsibility of the views expressed here. Thanks also go to the anonymous referees for their constructive comments which are very useful in revising the earlier version of this paper."}], "references": [{"title": "Microeconomics with Calculus", "author": ["B. Binger", "E. Hoffman"], "venue": null, "citeRegEx": "Binger and Hoffman,? \\Q1998\\E", "shortCiteRegEx": "Binger and Hoffman", "year": 1998}, {"title": "Semiring-based constraint satisfaction and optimization", "author": ["S. Bistarelli", "U. Montanari", "F. Rossi"], "venue": "Journal of the ACM,", "citeRegEx": "Bistarelli et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Bistarelli et al\\.", "year": 1997}, {"title": "A compositional modeling language", "author": ["D. Bobrow", "B. Falkenhainer", "A. Farquhar", "R. Fikes", "K. Forbus", "T. Gruber", "Y. Iwasaki", "B. Kuipers"], "venue": "In Proceedings of the 10th International Workshop on Qualitative Reasoning about Physical Systems,", "citeRegEx": "Bobrow et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Bobrow et al\\.", "year": 1996}, {"title": "Reasoning about nonlinear system identification", "author": ["E. Bradley", "M. Easley", "R. Stolle"], "venue": "Artificial Intelligence,", "citeRegEx": "Bradley et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Bradley et al\\.", "year": 2001}, {"title": "Numeric reasoning with relative orders of magnitude", "author": ["P. Dague"], "venue": "Proceedings of the National Conference on Artificial Intelligence, pp. 541\u2013547.", "citeRegEx": "Dague,? 1993a", "shortCiteRegEx": "Dague", "year": 1993}, {"title": "Symbolic reasoning with relative orders of magnitude", "author": ["P. Dague"], "venue": "Proceedings of the 13th International Joint Conference on Artificial Intelligence, pp. 1509\u20131514.", "citeRegEx": "Dague,? 1993b", "shortCiteRegEx": "Dague", "year": 1993}, {"title": "An assumption-based TMS", "author": ["J. de Kleer"], "venue": "Artificial Intelligence,", "citeRegEx": "Kleer,? \\Q1986\\E", "shortCiteRegEx": "Kleer", "year": 1986}, {"title": "A general labeling algorithm for assumption-based truth maintenance", "author": ["J. de Kleer"], "venue": "In Proceedings of the 7th National Conference on Artificial Intelligence,", "citeRegEx": "Kleer,? \\Q1988\\E", "shortCiteRegEx": "Kleer", "year": 1988}, {"title": "Generalized physical networks for automated model building", "author": ["M. Easley", "E. Bradley"], "venue": "In Proceedings of the 16th International Joint Conference on Artificial Intelligence,", "citeRegEx": "Easley and Bradley,? \\Q1999\\E", "shortCiteRegEx": "Easley and Bradley", "year": 1999}, {"title": "Compositional modeling: finding the right model for the job", "author": ["B. Falkenhainer", "K. Forbus"], "venue": "Artificial Intelligence,", "citeRegEx": "Falkenhainer and Forbus,? \\Q1991\\E", "shortCiteRegEx": "Falkenhainer and Forbus", "year": 1991}, {"title": "Modeling the Environment - An Introduction to System Dynamics Modeling of Environmental Systems", "author": ["A. Ford"], "venue": "Island Press.", "citeRegEx": "Ford,? 1999", "shortCiteRegEx": "Ford", "year": 1999}, {"title": "Principles of Systems", "author": ["J. Forrester"], "venue": "Wright-Allen Press, Cambridge, MA, USA.", "citeRegEx": "Forrester,? 1968", "shortCiteRegEx": "Forrester", "year": 1968}, {"title": "A formal basis for the heuristic determination of minimal cost paths", "author": ["P. Hart", "N. Nilsson", "B. Raphael"], "venue": "IEEE Transactions on Systems, Science and Cybernetics,", "citeRegEx": "Hart et al\\.,? \\Q1968\\E", "shortCiteRegEx": "Hart et al\\.", "year": 1968}, {"title": "Diagnosis and therapy recognition for ecosystems - usage of modelbased diagnosis techniques", "author": ["U. Heller", "P. Struss"], "venue": "In Proceedings of the 12th International Symposium \u201dComputer Science for Environment Protection\u201d", "citeRegEx": "Heller and Struss,? \\Q1998\\E", "shortCiteRegEx": "Heller and Struss", "year": 1998}, {"title": "Transformation of qualitative dynamic models - application in hydroecology", "author": ["U. Heller", "P. Struss"], "venue": "Intelligent Diagnosis in Industrial Applications,", "citeRegEx": "Heller and Struss,? \\Q2001\\E", "shortCiteRegEx": "Heller and Struss", "year": 2001}, {"title": "Some characteristics of simple types of predation and parasitism", "author": ["C. Holling"], "venue": "Canadian Entomologist, 91, 385\u2013398.", "citeRegEx": "Holling,? 1959", "shortCiteRegEx": "Holling", "year": 1959}, {"title": "System Dynamics: A United Approach (Second Edition edition)", "author": ["D. Karnopp", "D. Margolis", "R. Rosenberg"], "venue": null, "citeRegEx": "Karnopp et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Karnopp et al\\.", "year": 1990}, {"title": "Compositional Ecological Modelling via Dynamic Constraint Satisfaction with Order-of-Magnitude Preferences", "author": ["J. Keppens"], "venue": "Ph.D. thesis, The University of Edinburgh.", "citeRegEx": "Keppens,? 2002", "shortCiteRegEx": "Keppens", "year": 2002}, {"title": "Disaggregation in compositional modelling of ecological systems via dynamic constraint satisfaction", "author": ["J. Keppens", "Q. Shen"], "venue": "In Proceedings of the 15th International Workshop on Qualitative Reasoning about Physical Systems,", "citeRegEx": "Keppens and Shen,? \\Q2001\\E", "shortCiteRegEx": "Keppens and Shen", "year": 2001}, {"title": "On compositional modelling", "author": ["J. Keppens", "Q. Shen"], "venue": "Knowledge Engineering Review,", "citeRegEx": "Keppens and Shen,? \\Q2001\\E", "shortCiteRegEx": "Keppens and Shen", "year": 2001}, {"title": "On supporting dynamic constraint satisfaction with order of magnitude preferences", "author": ["J. Keppens", "Q. Shen"], "venue": "In Proceedings of the 16th International Workshop on Qualitative Reasoning about Physical Systems,", "citeRegEx": "Keppens and Shen,? \\Q2002\\E", "shortCiteRegEx": "Keppens and Shen", "year": 2002}, {"title": "Inducing process models from continuous data", "author": ["P. Langley", "J. Sanchez", "L. Todorovski", "S. Dz\u0306eroski"], "venue": "In Proceedings of the 19th International Conference on Machine Learning,", "citeRegEx": "Langley et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Langley et al\\.", "year": 2002}, {"title": "Modelling vegetation dynamics in mediterranean ecosystems: Issues of scale", "author": ["C. Legg", "R. Muetzelfeldt", "D. Heathfield"], "venue": "In Proceedings of the 39th Symposium of the International Association for Vegetation Science", "citeRegEx": "Legg et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Legg et al\\.", "year": 1995}, {"title": "Automated model selection for simulation based on relevance reasoning", "author": ["A. Levy", "Y. Iwasaki", "R. Fikes"], "venue": "Artificial Intelligence,", "citeRegEx": "Levy et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Levy et al\\.", "year": 1997}, {"title": "Elements of physical biology", "author": ["A. Lotka"], "venue": "Williams & Wilkins Co., Baltimore.", "citeRegEx": "Lotka,? 1925", "shortCiteRegEx": "Lotka", "year": 1925}, {"title": "An essay on the principle of population", "author": ["T. Malthus"], "venue": "Printed for J. Johnson in St. Paul\u2019s Church Yard, London, England.", "citeRegEx": "Malthus,? 1798", "shortCiteRegEx": "Malthus", "year": 1798}, {"title": "Hard, flexible and dynamic constraint satisfaction", "author": ["I. Miguel", "Q. Shen"], "venue": "Knowledge Engineering Review,", "citeRegEx": "Miguel and Shen,? \\Q1999\\E", "shortCiteRegEx": "Miguel and Shen", "year": 1999}, {"title": "Solution techniques for constraint satisfaction problems: Advanced approaches", "author": ["I. Miguel", "Q. Shen"], "venue": "Artificial Intelligence Review,", "citeRegEx": "Miguel and Shen,? \\Q2001\\E", "shortCiteRegEx": "Miguel and Shen", "year": 2001}, {"title": "Solution techniques for constraint satisfaction problems: Foundations", "author": ["I. Miguel", "Q. Shen"], "venue": "Artificial Intelligence Review,", "citeRegEx": "Miguel and Shen,? \\Q2001\\E", "shortCiteRegEx": "Miguel and Shen", "year": 2001}, {"title": "Minimizing conflicts: A heuristic repair method for constraint satisfaction and scheduling problems", "author": ["S. Minton", "M. Johnston", "A. Philips", "P. Laird"], "venue": "Artificial Intelligence,", "citeRegEx": "Minton et al\\.,? \\Q1992\\E", "shortCiteRegEx": "Minton et al\\.", "year": 1992}, {"title": "Dynamic constraint satisfaction problems", "author": ["S. Mittal", "B. Falkenhainer"], "venue": "In Proceedings of the 8th National Conference on Artificial Intelligence,", "citeRegEx": "Mittal and Falkenhainer,? \\Q1990\\E", "shortCiteRegEx": "Mittal and Falkenhainer", "year": 1990}, {"title": "Efficient compositional modeling for generating causal explanations", "author": ["P. Nayak", "L. Joskowicz"], "venue": "Artificial Intelligence,", "citeRegEx": "Nayak and Joskowicz,? \\Q1996\\E", "shortCiteRegEx": "Nayak and Joskowicz", "year": 1996}, {"title": "The balance of animal populations", "author": ["A. Nicholson", "V. Bailey"], "venue": "Proceedings of the Zoological Society of London,", "citeRegEx": "Nicholson and Bailey,? \\Q1935\\E", "shortCiteRegEx": "Nicholson and Bailey", "year": 1935}, {"title": "A* algorithm", "author": ["B. Raphael"], "venue": "Shapiro, S.C. (Ed.), Encyclopedia of Artificial Intelligence, Vol. 1, pp. 1\u20133. John Wiley & Sons.", "citeRegEx": "Raphael,? 1990", "shortCiteRegEx": "Raphael", "year": 1990}, {"title": "Automated modeling of complex systems to answer prediction questions", "author": ["J. Rickel", "B. Porter"], "venue": "Artificial Intelligence,", "citeRegEx": "Rickel and Porter,? \\Q1997\\E", "shortCiteRegEx": "Rickel and Porter", "year": 1997}, {"title": "Random search and insect population models", "author": ["D. Rogers"], "venue": "Journal of Animal Ecology, 41, 369\u2013383.", "citeRegEx": "Rogers,? 1972", "shortCiteRegEx": "Rogers", "year": 1972}, {"title": "Valued constraint satisfaction problems: Hard and easy problems", "author": ["T. Schiex", "H. Fargier", "G. Verfaillie"], "venue": "In Proceedings of the 14th International Joint Conference on Artificial Intelligence,", "citeRegEx": "Schiex et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Schiex et al\\.", "year": 1995}, {"title": "On the relative value of parasites and predators in the biological control of insect pests", "author": ["W. Thompson"], "venue": "Bull. Etnomol. Res., 19, 343\u2013350.", "citeRegEx": "Thompson,? 1929", "shortCiteRegEx": "Thompson", "year": 1929}, {"title": "Declarative bias in equation discovery", "author": ["L. Todorovski", "S. Dz\u0306eroski"], "venue": "In Proceedings of the 14th International Conference on Machine Learning,", "citeRegEx": "Todorovski and Dz\u0306eroski,? \\Q1997\\E", "shortCiteRegEx": "Todorovski and Dz\u0306eroski", "year": 1997}, {"title": "Using domain knowledge on population dynamics modeling for equation discovery", "author": ["L. Todorovski", "S. Dz\u0306eroski"], "venue": "In Proceedings of the 12th European Conference on Machine Learning,", "citeRegEx": "Todorovski and Dz\u0306eroski,? \\Q2001\\E", "shortCiteRegEx": "Todorovski and Dz\u0306eroski", "year": 2001}, {"title": "Foundations of Constraint Satisfaction", "author": ["E. Tsang"], "venue": "Academic Press, London and San Diego.", "citeRegEx": "Tsang,? 1993", "shortCiteRegEx": "Tsang", "year": 1993}, {"title": "Solution reuse in dynamic constraint satisfaction problems", "author": ["G. Verfaillie", "T. Schiex"], "venue": "In Proceedings of the 12th National Conference on Artificial Intelligence,", "citeRegEx": "Verfaillie and Schiex,? \\Q1994\\E", "shortCiteRegEx": "Verfaillie and Schiex", "year": 1994}, {"title": "Recherches math\u00e9matiques sur la loi d\u2019accroissement de la population", "author": ["P. Verhulst"], "venue": "Nouveaux m\u00e9moires de l\u2019acad\u00e9mie royale des sciences et belles-lettres de Bruxelles, 18, 1\u201338.", "citeRegEx": "Verhulst,? 1838", "shortCiteRegEx": "Verhulst", "year": 1838}, {"title": "Fluctuations in the abundance of a species considered mathematically", "author": ["V. Volterra"], "venue": "Nature, 118, 558\u2013560.", "citeRegEx": "Volterra,? 1926", "shortCiteRegEx": "Volterra", "year": 1926}], "referenceMentions": [{"referenceID": 42, "context": "For example, the logistic growth (Verhulst, 1838) and the Holling predation (Holling, 1959) models describe the changes in the size of a population.", "startOffset": 33, "endOffset": 49}, {"referenceID": 15, "context": "For example, the logistic growth (Verhulst, 1838) and the Holling predation (Holling, 1959) models describe the changes in the size of a population.", "startOffset": 76, "endOffset": 91}, {"referenceID": 30, "context": "An activity-based dynamic CSP (aDCSP), originally proposed in by Mittal and Falkenhainer (1990), extends conventional CSPs with the notion of activity of attributes.", "startOffset": 65, "endOffset": 96}, {"referenceID": 42, "context": "To be precise, the BPQs b11, b12, b13, b14, b15, b21 and b22 respectively correspond to the inclusion of Rogers\u2019 host-parasitoid model (1972), the host-parasitoid model by Nicholson and Bailey (1935), Holling\u2019s predation model (1959), Thompson\u2019s host-parasitoid model (1929), the predation model by Lotka and Volterra (1925, 1926), a logistic population growth model (Verhulst, 1838) and an exponential population growth model (Malthus, 1798).", "startOffset": 367, "endOffset": 383}, {"referenceID": 25, "context": "To be precise, the BPQs b11, b12, b13, b14, b15, b21 and b22 respectively correspond to the inclusion of Rogers\u2019 host-parasitoid model (1972), the host-parasitoid model by Nicholson and Bailey (1935), Holling\u2019s predation model (1959), Thompson\u2019s host-parasitoid model (1929), the predation model by Lotka and Volterra (1925, 1926), a logistic population growth model (Verhulst, 1838) and an exponential population growth model (Malthus, 1798).", "startOffset": 427, "endOffset": 442}, {"referenceID": 15, "context": "In the BPQ ordering within O1, for instance, Rogers\u2019 host-parasitoid model (b11) is preferred over that by Nicholson and Bailey (b12) and the Holling predation model (b13). The latter two models can not be compared with one another, but they both are preferred over the Lotka-Volterra model. Furthermore, Thompson\u2019s host-parasitoid model is less preferred than that of Nicholson and Bailey, but it can not be compared with the Lotka-Volterra and Holling models. 2.2.2 COMBINATIONS OF OMPS By definition, OMPs are combinations of BPQs. The implicit value of an OMP p equals the combination b1 \u2295 . . .\u2295 bn of its constituent BPQs b1, . . . , bn. This property allows OMPs to be defined as functions such that an OMP P = b1 \u2295 . . .\u2295 bn is a function fP : B 7\u2192 N : b \u2192 fP (b) where B 1. To be precise, the BPQs b11, b12, b13, b14, b15, b21 and b22 respectively correspond to the inclusion of Rogers\u2019 host-parasitoid model (1972), the host-parasitoid model by Nicholson and Bailey (1935), Holling\u2019s predation model (1959), Thompson\u2019s host-parasitoid model (1929), the predation model by Lotka and Volterra (1925, 1926), a logistic population growth model (Verhulst, 1838) and an exponential population growth model (Malthus, 1798).", "startOffset": 142, "endOffset": 925}, {"referenceID": 15, "context": "In the BPQ ordering within O1, for instance, Rogers\u2019 host-parasitoid model (b11) is preferred over that by Nicholson and Bailey (b12) and the Holling predation model (b13). The latter two models can not be compared with one another, but they both are preferred over the Lotka-Volterra model. Furthermore, Thompson\u2019s host-parasitoid model is less preferred than that of Nicholson and Bailey, but it can not be compared with the Lotka-Volterra and Holling models. 2.2.2 COMBINATIONS OF OMPS By definition, OMPs are combinations of BPQs. The implicit value of an OMP p equals the combination b1 \u2295 . . .\u2295 bn of its constituent BPQs b1, . . . , bn. This property allows OMPs to be defined as functions such that an OMP P = b1 \u2295 . . .\u2295 bn is a function fP : B 7\u2192 N : b \u2192 fP (b) where B 1. To be precise, the BPQs b11, b12, b13, b14, b15, b21 and b22 respectively correspond to the inclusion of Rogers\u2019 host-parasitoid model (1972), the host-parasitoid model by Nicholson and Bailey (1935), Holling\u2019s predation model (1959), Thompson\u2019s host-parasitoid model (1929), the predation model by Lotka and Volterra (1925, 1926), a logistic population growth model (Verhulst, 1838) and an exponential population growth model (Malthus, 1798).", "startOffset": 142, "endOffset": 983}, {"referenceID": 15, "context": "In the BPQ ordering within O1, for instance, Rogers\u2019 host-parasitoid model (b11) is preferred over that by Nicholson and Bailey (b12) and the Holling predation model (b13). The latter two models can not be compared with one another, but they both are preferred over the Lotka-Volterra model. Furthermore, Thompson\u2019s host-parasitoid model is less preferred than that of Nicholson and Bailey, but it can not be compared with the Lotka-Volterra and Holling models. 2.2.2 COMBINATIONS OF OMPS By definition, OMPs are combinations of BPQs. The implicit value of an OMP p equals the combination b1 \u2295 . . .\u2295 bn of its constituent BPQs b1, . . . , bn. This property allows OMPs to be defined as functions such that an OMP P = b1 \u2295 . . .\u2295 bn is a function fP : B 7\u2192 N : b \u2192 fP (b) where B 1. To be precise, the BPQs b11, b12, b13, b14, b15, b21 and b22 respectively correspond to the inclusion of Rogers\u2019 host-parasitoid model (1972), the host-parasitoid model by Nicholson and Bailey (1935), Holling\u2019s predation model (1959), Thompson\u2019s host-parasitoid model (1929), the predation model by Lotka and Volterra (1925, 1926), a logistic population growth model (Verhulst, 1838) and an exponential population growth model (Malthus, 1798).", "startOffset": 142, "endOffset": 1017}, {"referenceID": 15, "context": "In the BPQ ordering within O1, for instance, Rogers\u2019 host-parasitoid model (b11) is preferred over that by Nicholson and Bailey (b12) and the Holling predation model (b13). The latter two models can not be compared with one another, but they both are preferred over the Lotka-Volterra model. Furthermore, Thompson\u2019s host-parasitoid model is less preferred than that of Nicholson and Bailey, but it can not be compared with the Lotka-Volterra and Holling models. 2.2.2 COMBINATIONS OF OMPS By definition, OMPs are combinations of BPQs. The implicit value of an OMP p equals the combination b1 \u2295 . . .\u2295 bn of its constituent BPQs b1, . . . , bn. This property allows OMPs to be defined as functions such that an OMP P = b1 \u2295 . . .\u2295 bn is a function fP : B 7\u2192 N : b \u2192 fP (b) where B 1. To be precise, the BPQs b11, b12, b13, b14, b15, b21 and b22 respectively correspond to the inclusion of Rogers\u2019 host-parasitoid model (1972), the host-parasitoid model by Nicholson and Bailey (1935), Holling\u2019s predation model (1959), Thompson\u2019s host-parasitoid model (1929), the predation model by Lotka and Volterra (1925, 1926), a logistic population growth model (Verhulst, 1838) and an exponential population growth model (Malthus, 1798).", "startOffset": 142, "endOffset": 1058}, {"referenceID": 40, "context": "An aDPCSP represents an important type of constraint satisfaction optimisation problem (Tsang, 1993).", "startOffset": 87, "endOffset": 100}, {"referenceID": 33, "context": "In order to tackle the optimisation of preferences an A* type algorithm is employed (Hart, Nilsson, & Raphael, 1968; Raphael, 1990).", "startOffset": 84, "endOffset": 131}, {"referenceID": 33, "context": "Therefore, following the work by Hart, Nilsson and Raphael (1968), SOLVE(X,D,C,A, P ) is an admissible algorithm, guaranteed to find a solution S with a minimal \u03b4(P (S)) or a maximal P (S).", "startOffset": 51, "endOffset": 66}, {"referenceID": 10, "context": "Other relations may be conceptual in nature, such as equation (2), which describes an important textbook model of logistic population growth (Ford, 1999): d dt change = parameter \u00d7 size \u00d7 (1\u2212 size capacity ) (2)", "startOffset": 141, "endOffset": 153}, {"referenceID": 25, "context": "Typical examples of model types include the exponential (Malthus, 1798) and the logistic (Verhulst, 1838) model types of population growth.", "startOffset": 56, "endOffset": 71}, {"referenceID": 42, "context": "Typical examples of model types include the exponential (Malthus, 1798) and the logistic (Verhulst, 1838) model types of population growth.", "startOffset": 89, "endOffset": 105}, {"referenceID": 11, "context": "Within this work, both systems dynamics stock-flow formalism (Forrester, 1968) and ordinary differential equations (ODEs) will be employed as the modelling formalisms.", "startOffset": 61, "endOffset": 78}, {"referenceID": 16, "context": "2 SCENARIOS AND SCENARIO MODELS As formalised by Keppens and Shen (2001b), a compositional modeller takes two inputs and produces one output.", "startOffset": 49, "endOffset": 74}, {"referenceID": 10, "context": "Instead, stock-flow diagrams are employed throughout this paper as they are far more commonly used in ecological modelling (Ford, 1999).", "startOffset": 123, "endOffset": 135}, {"referenceID": 2, "context": "The composable functors employed are those proposed by Bobrow et al. (1996) with a new addition: composable selection.", "startOffset": 55, "endOffset": 76}, {"referenceID": 2, "context": "The composable functors employed are those proposed by Bobrow et al. (1996) with a new addition: composable selection. A summary of such composable relations is presented in table 2. The composable relations introduced by Bobrow et al. (1996) are easy to understand.", "startOffset": 55, "endOffset": 243}, {"referenceID": 42, "context": "Typical examples include the logistic population growth model (Verhulst, 1838) and the Holling predation model (Holling, 1959) devised in the population dynamics literature.", "startOffset": 62, "endOffset": 78}, {"referenceID": 15, "context": "Typical examples include the logistic population growth model (Verhulst, 1838) and the Holling predation model (Holling, 1959) devised in the population dynamics literature.", "startOffset": 111, "endOffset": 126}, {"referenceID": 13, "context": "Note that in most compositional modellers, such as the ones devised by Heller and Struss (1998, 2001); Levy, Iwasaki and Fikes (1997); Nayak and Joskowicz (1996); and Rickel and Porter (1997), model fragments represent direct translations of components of physical systems into influences between variables.", "startOffset": 71, "endOffset": 134}, {"referenceID": 13, "context": "Note that in most compositional modellers, such as the ones devised by Heller and Struss (1998, 2001); Levy, Iwasaki and Fikes (1997); Nayak and Joskowicz (1996); and Rickel and Porter (1997), model fragments represent direct translations of components of physical systems into influences between variables.", "startOffset": 71, "endOffset": 162}, {"referenceID": 13, "context": "Note that in most compositional modellers, such as the ones devised by Heller and Struss (1998, 2001); Levy, Iwasaki and Fikes (1997); Nayak and Joskowicz (1996); and Rickel and Porter (1997), model fragments represent direct translations of components of physical systems into influences between variables.", "startOffset": 71, "endOffset": 192}, {"referenceID": 6, "context": "A model space is an ATMS (de Kleer, 1986) containing all the participants, relations and assumptions that can be instantiated from a given scenario. In this work, the generalised version of the ATMS, as introduced by de Kleer (1988), is employed as it allows the use of negations of nodes in the justifications.", "startOffset": 29, "endOffset": 233}, {"referenceID": 12, "context": "This approach is known to be the most efficient in terms of the proportion of the search space the algorithm needs to explore before finding an optimal solution, when compared to other search methods that are based on the same heuristic (Hart et al., 1968).", "startOffset": 237, "endOffset": 256}, {"referenceID": 25, "context": "Recently, a number of efficient methods have been devised for solving aDCSPs as presented by Minton et al. (1992); Mittal and Falkenhainer (1990); and Verfaillie and Schiex (1994).", "startOffset": 93, "endOffset": 114}, {"referenceID": 25, "context": "Recently, a number of efficient methods have been devised for solving aDCSPs as presented by Minton et al. (1992); Mittal and Falkenhainer (1990); and Verfaillie and Schiex (1994).", "startOffset": 93, "endOffset": 146}, {"referenceID": 25, "context": "Recently, a number of efficient methods have been devised for solving aDCSPs as presented by Minton et al. (1992); Mittal and Falkenhainer (1990); and Verfaillie and Schiex (1994). This helps minimise the overhead incurred for compositional modelling.", "startOffset": 93, "endOffset": 180}, {"referenceID": 12, "context": "This approach is known to be the most efficient in terms of the proportion of the search space the algorithm needs to explore before finding an optimal solution, when compared to other search methods that are based on the same heuristic (Hart et al., 1968). A disadvantage is that it incurs an exponential space complexity. As explained by Miguel and Shen (2001a, 2001b); and Tsang (1993), a wide range of alternative solution techniques exist for ordinary CSPs and many of these could also be extended to solve aDPCSPs.", "startOffset": 238, "endOffset": 389}, {"referenceID": 13, "context": "Another approach which has recently been developed and applied to the ecological domain by Heller and Struss (1998, 2001). This work derives a system\u2019s structure from observations of its behaviour and domain knowledge. Therefore, it is able to perform diagnosis of ecological systems and therapy suggestion. Another important distinction of this work from the present study is that it presumes that each process can only be described in just one way instead of allowing multiple alternative models. In the machine learning community, a number of approaches have been devised by Bradley, Easley and Stolle (2001); Langley et al.", "startOffset": 91, "endOffset": 612}, {"referenceID": 13, "context": "Another approach which has recently been developed and applied to the ecological domain by Heller and Struss (1998, 2001). This work derives a system\u2019s structure from observations of its behaviour and domain knowledge. Therefore, it is able to perform diagnosis of ecological systems and therapy suggestion. Another important distinction of this work from the present study is that it presumes that each process can only be described in just one way instead of allowing multiple alternative models. In the machine learning community, a number of approaches have been devised by Bradley, Easley and Stolle (2001); Langley et al. (2002); and Todorovski and Dz\u0306eroski (1997, 2001) to induce sets of differential equations from a) observations of behaviour, b) domain knowledge represented in the form of hypothetical equations, and c) a description of the structure of the system.", "startOffset": 91, "endOffset": 635}, {"referenceID": 13, "context": "Another approach which has recently been developed and applied to the ecological domain by Heller and Struss (1998, 2001). This work derives a system\u2019s structure from observations of its behaviour and domain knowledge. Therefore, it is able to perform diagnosis of ecological systems and therapy suggestion. Another important distinction of this work from the present study is that it presumes that each process can only be described in just one way instead of allowing multiple alternative models. In the machine learning community, a number of approaches have been devised by Bradley, Easley and Stolle (2001); Langley et al. (2002); and Todorovski and Dz\u0306eroski (1997, 2001) to induce sets of differential equations from a) observations of behaviour, b) domain knowledge represented in the form of hypothetical equations, and c) a description of the structure of the system. These approaches aim at scientific discovery by generalising observed behaviour into mathematical models. The specifications of the scenario and the domain knowledge in these methods are similar to those used in this article. This is especially true for the work by Langley et al. (2002); and Todorovski and Dz\u0306eroski (1997, 2001), because that work has also been applied to population dynamics.", "startOffset": 91, "endOffset": 1166}, {"referenceID": 25, "context": "Two types of population growth model are the exponential growth model (Malthus, 1798), which is shown in Figure 8(a), and the logistic growth model (Verhulst, 1838), which is shown in Figure 8(b).", "startOffset": 70, "endOffset": 85}, {"referenceID": 42, "context": "Two types of population growth model are the exponential growth model (Malthus, 1798), which is shown in Figure 8(a), and the logistic growth model (Verhulst, 1838), which is shown in Figure 8(b).", "startOffset": 148, "endOffset": 164}, {"referenceID": 15, "context": "They describe two well-known predation models: the Lotka-Volterra model (1925, 1926), which is shown in Figure 9(a), and the Holling model (1959), which is shown graphically in Figure 9(b).", "startOffset": 125, "endOffset": 146}], "year": 2011, "abstractText": "The predominant knowledge-based approach to automated model construction, compositional modelling, employs a set of models of particular functional components. Its inference mechanism takes a scenario describing the constituent interacting components of a system and translates it into a useful mathematical model. This paper presents a novel compositional modelling approach aimed at building model repositories. It furthers the field in two respects. Firstly, it expands the application domain of compositional modelling to systems that can not be easily described in terms of interacting functional components, such as ecological systems. Secondly, it enables the incorporation of user preferences into the model selection process. These features are achieved by casting the compositional modelling problem as an activity-based dynamic preference constraint satisfaction problem, where the dynamic constraints describe the restrictions imposed over the composition of partial models and the preferences correspond to those of the user of the automated modeller. In addition, the preference levels are represented through the use of symbolic values that differ in orders of magnitude.", "creator": "dvips(k) 5.86 Copyright 1999 Radical Eye Software"}}}