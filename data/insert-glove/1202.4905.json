{"id": "1202.4905", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Feb-2012", "title": "A Bi-Directional Refinement Algorithm for the Calculus of (Co)Inductive Constructions", "abstract": "3,166 The paper dovzhenko describes stickney the tuxtepec refinement prm algorithm for reconsiders the federazione Calculus maston of (Co) Inductive 4,320 Constructions (CIC) mat\u00e9 implemented in jeda the interactive jawlensky theorem prover kopko Matita.", "histories": [["v1", "Wed, 22 Feb 2012 13:33:26 GMT  (62kb,D)", "https://arxiv.org/abs/1202.4905v1", null], ["v2", "Thu, 1 Mar 2012 20:49:22 GMT  (65kb,D)", "http://arxiv.org/abs/1202.4905v2", null]], "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["andrea asperti", "wilmer ricciotti", "claudio sacerdoti coen", "enrico tassi"], "accepted": false, "id": "1202.4905"}, "pdf": {"name": "1202.4905.pdf", "metadata": {"source": "CRF", "title": "A BI-DIRECTIONAL REFINEMENT ALGORITHM FOR THE CALCULUS OF (CO)INDUCTIVE CONSTRUCTIONS", "authors": ["ANDREA ASPERTI", "WILMER RICCIOTTI", "CLAUDIO SACERDOTI COEN"], "emails": ["asperti@cs.unibo.it", "ricciott@cs.unibo.it", "sacerdot@cs.unibo.it", "enrico.tassi@inria.fr"], "sections": [{"heading": null, "text": "The refinement algorithm is in charge of giving a meaning to the terms, types and proof terms directly written by the user or generated by using tactics, decision procedures or general automation. The terms are written in an \u201cexternal syntax\u201d meant to be user friendly that allows omission of information, untyped binders and a certain liberal use of user defined sub-typing. The refiner modifies the terms to obtain related well typed terms in the internal syntax understood by the kernel of the ITP. In particular, it acts as a type inference algorithm when all the binders are untyped.\nThe proposed algorithm is bi-directional: given a term in external syntax and a type expected for the term, it propagates as much typing information as possible towards the leaves of the term. Traditional mono-directional algorithms, instead, proceed in a bottomup way by inferring the type of a sub-term and comparing (unifying) it with the type expected by its context only at the end. We propose some novel bi-directional rules for CIC that are particularly effective. Among the benefits of bi-directionality we have better error message reporting and better inference of dependent types. Moreover, thanks to bi-directionality, the coercion system for sub-typing is more effective and type inference generates simpler unification problems that are more likely to be solved by the inherently incomplete higher order unification algorithms implemented.\nFinally we introduce in the external syntax the notion of vector of placeholders that enables to omit at once an arbitrary number of arguments. Vectors of placeholders allow a trivial implementation of implicit arguments and greatly simplify the implementation of primitive and simple tactics.\n1998 ACM Subject Classification: D.3.1, F.3.0. Key words and phrases: refiner, type inference, interactive theorem prover, calculus of inductive construc-\ntions, Matita.\nLOGICAL METHODSl IN COMPUTER SCIENCE DOI:10.2168/LMCS-8 (1:18) 2012 c\u00a9 A. Asperti, W. Ricciotti, C. Sacerdoti Coen, and E. TassiCC\u00a9 Creative Commons"}, {"heading": "1. Introduction", "text": "In this paper we are interested in describing one of the key ingredients in the implementation of Interactive Theorem Provers (ITP) based on type theory.\nThe architecture of these tools is usually organized in layers and follows the so called de Bruijn principle: the correctness of the whole system solely depends on the innermost component called kernel. Nevertheless, from a user perspective, the most interesting layers are the external ones, the ones he directly interacts with. Among these, the refiner is the one in charge of giving a meaning to the terms and types he writes. The smarter the refiner is, the more freedom the user has in omitting pieces of information that can be reconstructed. The refiner is also the component generating the majority of error messages the user has to understand and react to in order to finish his proof or definition.\nThis paper is devoted to the description of a refinement algorithm for the Calculus of (Co)Inductive Constructions, the type theory on which the Matita [6], Coq [12] and Lego [19] ITPs are based on.\n1.1. Refinement. In this and in the previous paper [4] we are interested in the implementation of interactive theorem provers (ITP) for dependently typed languages that are heavily based on the Curry-Howard isomorphism. Proofs are represented using lambdaterms. Proofs in progress are represented using lambda-terms containing metavariables that are implicitly existentially quantified. Progression in the proof is represented by instantiation of metavariables with terms. Metavariables are also useful to represent missing or partial information, like untyped lambda-abstractions or instantiation of polymorphic functions to omitted type arguments.\nAgda [8] and Matita [6] are examples of systems implemented in this way. Arnaud Spiwack in his Ph.D. thesis [31] partially describes a forthcoming release of Coq 8.4 that will be implemented on the same principles.\nThe software architecture of these systems is usually built in layers. The innermost layer is the kernel of the ITP. The main algorithm implemented by the kernel is the type checker, which is based in turn on conversion and reduction. The type checker takes as input a (proof) term possibly containing metavariables and it verifies if the partial term is correct so far. To allow for type-checking, metavariables are associated to sequents, grouping their types together with the context (hypotheses) available to inhabit the type. The kernel does not alter metavariables since no instantiation takes place during reduction, conversion or type checking.\nThe kernel has the important role of reducing the trusted code base of the ITP. Indeed, the kernel eventually verifies all proofs produced by the outer layers, detecting incorrect proofs generated by bugs in those layers. Nevertheless, the user never interacts directly with the kernel and the output of the kernel is just a boolean that is never supposed to be false when the rest of the system is bug free. The most interesting layers from the user point of view are thus the outer layers. The implementation of a kernel for a variant of the Calculus of (Co)Inductive Constructions (CIC) has been described in [4] down to the gory details that make the implementation efficient.\nThe next layer is the refiner and is the topic of this paper. The main algorithm implemented by the refiner is the refinement algorithm that tries to infer as much information as it is needed to make its input meaningful. In other words it takes as input a partial term, written in an \u201cexternal syntax\u201d, and tries to obtain a \u201ccorresponding\u201d well typed term.\nThe input term can either be user provided or it can be a partial proof term generated by some proof command (called tactic) or automation procedure. The gap between the external and internal syntax is rather arbitrary and system dependent. Typical examples of external syntaxes allow for: \u2022 Untyped abstractions. Hence the refiner must perform type inference to recover the explicit types given to bound variables. The polymorphism of CIC is such that binders are required to be typed to make type checking decidable. \u2022 Omission of arguments, in particular omission of types used to instantiate polymorphic\nfunctions. Hence the refiner must recover the missing information during type inference to turn implicit into explicit polymorphism. \u2022 Linear placeholders for missing terms that are not supposed to be discovered during type\ninference. For instance, a placeholder may be inserted by a tactic to represent a new proof obligation. Hence the refiner must turn the placeholder into a metavariable by constraining the set of free variables that may occur in it and the expected type. \u2022 Implicit ad-hoc sub-typing determined by user provided cast functions (called coercions)\nbetween types or type families. Hence the refiner must modify the user provided term by explicitly inserting the casts in order to let the kernel completely ignore sub-typing.\nCoercions are user provided functions and are thus free to completely ignore their input. Thus a refiner that handles coercions is actually able to arbitrarily patch wrong user provided terms turning them into arbitrarily different but well typed terms. Moreover, the insertion of a coercion between type families can also introduce new metavariables (the family indexes) that play the role of proof obligations for pre-conditions of the coercion. For instance, a coercion from lists to ordered lists can open a proof obligation that requires the list to be sorted.\nThe refiner is the most critical system component from the user point of view since it is responsible for the \u201cintelligence\u201d of the ITP: the more powerful the refiner is, the less information is required from the user and the simpler the outer layers become. For instance, a series of recent techniques that really improve the user experience have all been focused in the direction of making the refiner component more powerful and extensible by the user. Canonical structures [16], unification hints [5] and type classes [30] are devices that let the user drive some form of proof search that is seamlessly integrated in the refinement process. While the latter device is directly integrated into the refinement algorithm, the first two are found in the unification algorithm used by the refiner.\nThey all make it possible to achieve similar objectives, the second being more general than the first and the last two being incomparable from the point of view of efficiency (where the second is best) and expressiveness (where the third is more flexible). The implementation of type classes done in Coq is actually provided by an additional layer outside the refiner for historical reasons.\nIn this paper we will describe only the refinement algorithm implemented in a refiner for a variant of the Calculus of (Co)Inductive Constructions. The algorithm is used in the forthcoming major release of the Matita1 ITP (1.0.x). The algorithm calls a unification algorithm that will be specified in this paper and described elsewhere. We do not consider type classes in our refinement algorithm since we prefer to assume the unification algorithm\n1Matita is free software available at http://matita.cs.unibo.it\nto implement unification hints. Nevertheless, type classes can be easily added to our algorithm with minor modifications and indeed the relevant bits that go into the refiner are implemented in Matita.\nBefore addressing bi-directionality, which is a peculiarity of the algorithm that has not been fully exploited yet2 for the CIC, we just conclude our overview of an ITP architecture by talking about the next layer. The next layer after the refiner is that of tactics. This layer is responsible for implementing commands that help the user in producing valid proof terms by completely hiding to him the proof terms themselves. Tactics range from simple ones that capture the introduction and elimination rules of the connectives (called primitive tactics) to complicated proof automation procedures. The complexity of proof automation is inherent in the problem. On the other hand, primitive tactics should be as simple as building small partial proof terms. For instance, to reduce a proof of A\u21d2 B to a proof of B given A it is sufficient to instantiate the metavariable associated to the sequent ` A\u21d2 B with the term \u03bbx.? in external syntax where ? is a placeholder for a new proof obligation. This is possible when the refinement algorithm is powerful enough to refine \u03bbx.? to \u03bbx : A.?1 where ?1 is a new metavariable associated to the sequent x : A ` B. When this is not the case or when the refiner component is totally missing, the tactic is forced to first perform an analysis of the current goal, then explicitly create a new metavariable and its sequent, and then emit the new proof term \u03bbx : A.?1 directly in the internal syntax.\n1.2. Bi-directionality. When the external syntax of our ITP allows to omit types in binders, the refinement algorithm must perform type inference. Type inference was originally studied in the context of lambda-calculi typed a la Curry, where no type information can be attached at all to the binders. The traditional algorithm for type inference, now called uni-directional, performs type inference by first traversing the term in a top-down way. When a binder is met, a new metavariable (usually called type or unification variable in this context) is introduced for the type of the bound variable. Then type constraints are solved traversing the term in a bottom-up way. When the variable or, more generally, a term is used in a given context, its type (called inferred type) is constrained to be compatible with the one expected by the context (called expected type). This triggers a unification problem.\nType inference, especially for the Hindley-Milner type system, gives the possibility to write extremely concise programs by omitting all types. Moreover, it often detects a higher degree of polymorphism than the one expected by the user. Unluckily, it has some drawbacks. A minor one is that types are useful for program documentation and thus the user desires to add types at least to top level functions. In practice, this is always allowed by concrete implementations. Another problem is error reporting: a typing error always manifests itself as a mismatch between an inferred and an expected type. Nevertheless, an error can be propagated to a very distant point in the code before being detected and the position where it is produced. The mismatch itself can be non informative about where the error actually is. Finally, unification quickly becomes undecidable when the expressive power of the type system increases. In particular, it is undecidable for higher order logic and for dependent types.\n2The refinement algorithm of Coq 8.3, the most widespread implementation of CIC, is almost monodirectional with only the lambda-abstraction case handled in a bi-directional way. Many other interesting cases of bi-directionality are obtained in this paper for inductive types and constructors.\nTo avoid or mitigate the drawbacks of type inference, bi-directional type-checking algorithms have been introduced in the literature [24]. These algorithms take as input a \u03bb-term typed a la Curry and an expected top-level type and they proceed in a top-down manner by propagating the expected type towards the leaves of the term. Additional expected types are given in local definitions, so that all functions are explicitly documented. Error detection is improved by making it more local. The need for unification is reduced and, for simple type systems, unification is totally avoided. Some terms, in particular \u03b2-redexes, are no longer accepted, but equivalent terms are (e.g. by using a local definition for the head). An alternative consists of accepting all terms by re-introducing a dependency over some form of unification.\nBi-directionality also makes sense for languages typed a\u0300 la Church, like the one we consider here. In this case the motivations are slightly different. First of all, typing information is provided both in the binders and at the top-level, in the form of an expected type. Hence information can flow in both direction and, sooner or later, the need to compare the expected and inferred types arises. In the presence of implicit polymorphism, unification is thus unavoidable. Because of dependent types and metavariables for proof obligations, we need the full power of higher order unification. Moreover, again because of unification, the problem remains undecidable also via using a bi-directional algorithm. Hence avoiding unification is no longer a motivation for bi-directionality. The remaining motivations for designing a bi-directional refinement algorithm for CIC are the following:\nImproved error messages. A typing error is issued every time a mismatch is found between the inferred and expected type. With a mono-directional algorithm, the mismatch is always found at the end, when the typing information reaches the expected type. In a bi-directional setting the expected type is propagated towards the leaves and the inferred type towards the root, the mismatch is localized in smaller sub-terms and the error message is simpler. For instance, instead of the message \u201cthe provided function has type A \u21d2 List B but it is supposed to have type A\u21d2 List C\u201d related to a whole function definition one could get the simpler message \u201cthe list element has type B but it is supposed to have type C\u201d related to one particular position in the function body.\nImprovement of the unification algorithm. To make the system responsive, the semi-decidable unification algorithm is restricted to always give an answer in a finite amount of time. Hence the algorithm could fail to find a solution even when a solution exists. For instance, the algorithms implemented in Coq and Matita are essentially backtracking free and they systematically favor projections over mimics: when unifying an applied metavariable ?1 a b c with a b (for some a, b, c closed in a context \u0393), the system instantiates ?1 with \u03bbx, y, z.y rather than \u03bbx, y, z.b (where x, y, z /\u2208 dom(\u0393)). Moreover, unification for CIC does not admit a most general unifier and it should recursively enumerate the set of solutions. However, it is usual in system implementations to let unification return just one solution and to avoid back-tracking in the refinement algorithm3. Thus, if the solution found by unification is correct locally, but not globally, refinement will fail. Thanks to bi-directionality, unification problems often become more instantiated and thus simpler, and they also admit fewer solutions. In particular, in the presence of dependent types, it is easy to find practical\n3To the authors knowledge, Isabelle [18] is the only interactive prover implementing Huet\u2019s algorithm [17] capable of generating all second order unifiers\nexamples where the unification algorithm finds a solution only on the problems triggered by the bi-directional algorithm.\nAn interesting and practical example that motivated our investigation of bi-directionality is the following. Consider a dependently typed data-type (Term S) that represents the syntax of a programming language with binders. Type dependency is exploited to make explicit the set S of variables bound in the term and every variable occurrence must come with a proof that the variable occurs in the bound variables list: (Var S x I) has type (Term S) where x is a variable name, I is a proof of True and Var has type \u2200S.\u2200a : String.x \u2208 S \u2192 Term S where x \u2208 S is a computable function that reduces to True when x belongs to S and to False otherwise. Consider now the term (Lambda ? x (Var ? x I)) in concrete syntax that represents \u03bbx.x in our programming language. Note that no information about the set of bound variables has been provided by the user. Thus it is possible to simply define notational macros so that the user actually writes \u03bbx.x and this is expanded4 to Lambda ? x (Var ? x I). A uni-directional refiner is unlikely to accept the given term since it should guess the right value for the second placeholder ? such that x \u2208 ? reduces to True and ? is the set of variables actually bound in the term. The latter information is not local and it is still unknown in the bottom-up, uni-directional approach. On the other hand, a bi-directional refiner that tries to assign type Term \u2205 to the term would simply propagate \u2205 to the first placeholder and then propagate \u2205 \u222a {x} to the second one, since Lambda, which is a binder, has type \u2200S.\u2200x.Term (S \u222a {x})\u2192 Term S. Finally, True is the inferred type for I, whose expected type is x \u2208 \u2205 \u222a {x}. The two types are convertible and the input is now accepted without any guessing.\nImprovement of the coercion mechanism. Coercions are triggered when unification fails. They are explicit cast functions, declared by the user, used to fix the type of sub-terms. Simplifying the unification problem allows to retrieve more coercions. For instance, consider a list [1; 2; 3] of natural numbers used as a list of integer numbers and assume the existence of a coercion function k from natural to integers. In the mono-directional problem, the failing unification problem is (List N) vs (List Z). The coercion required is the one obtained lifting k over lists. The lifting has to be performed manually by the user or by the system. In the latter case, the system needs to recognize that lists are containers and has to have code to lift coercions over containers, like in [10]. In the bi-directional case, however, the expected type (List Z) would propagate to assign to each list element the expected type Z and the coercion k would be applied to all integers in the list without need of additional machinery. The bi-directional algorithm presented in this paper does not allow to remove the need for the coercion over lists in all situations, but it is sufficient in many practical ones, like the one just considered.\nIntroduction of vectors of placeholders (\u201c. . . \u201d) in the external syntax. A very common use of dependently typed functions consists in explicitly passing to them an argument which is not the first one and have the system infer the previous arguments using type dependencies. For instance, if Cons : \u2200A.A \u2192 List A \u2192 List A and l is a list of integers, the user can simply write (Cons ? 2 l) and have the system infer that ? must be instantiated with the type of 2, which is N.\n4User provided notational macros are used to extend the external syntax of an ITP and they are expanded before refinement, yielding a term in external syntax to be refined.\nThis scenario is so common that many ITPs allow to mark some function arguments as implicit arguments and let the user systematically avoid passing them. This requires additional machinery implemented in the ITP and it has the unfortunate drawback that sometimes the user needs to explicitly pass the implicit arguments anyway, in particular in case of partial function applications. This special situation requires further ad-hoc syntax to turn the implicit argument into an explicit one. For instance, if we declare the first argument of Cons implicit, then the user can simply write (Cons 2 l) for the term presented above, but has to write something like (@Cons N), in Coq syntax, to pass the partial function application to some higher order function expecting an argument of type N \u2192 List N \u2192 List N.\nAn alternative to implicit arguments is to let the user explicitly insert the correct number of placeholders \u201c?\u201d to be inferred by the system. Series of placeholders are neither aesthetic nor robust to changes in the type of the function.\nA similar case occurs during the implementation of tactics. Given a lemma L : H1 \u2192 . . . \u2192 Hn \u2192 C, to apply it the tactic opens n new proof obligations by refining the term (L ? . . . ?) where the number of inserted placeholders must be exactly n.\nIn this paper we propose a new construct to be added to the external syntax of ITPs: a vector of placeholders to be denoted by _ ? and to be used in argument position only. In the actual external syntax of Matita we use the evocative symbol \u201c. . . \u201d in place of _ ? . The semantics associated to _ ? is lazy: an _ ? will be expanded to the sequence of placeholders of minimal length that makes the application refineable, so that its inferred type matches its expected type. In a uni-directional setting no expected type is known in advance and the implementation of the lazy semantics would require computationally expensive non-local backtracking, which is not necessary in the bi-directional case.\nThanks to vectors of placeholders the analysis phase of many primitive tactics implementation that was aimed at producing terms with the correct number of placeholders can now be totally omitted. Moreover, according to our experience, vectors of placeholders enable to avoid the implementation of implicit arguments: it is sufficient for the user to insert manually or by means of a notation a _ ? before the arguments explicitly passed, with the benefit that the _ ? automatically adapts to the case of partial function application. For example, using the infix notation :: for (Cons _ ? ), the user can both write 2 :: l, which is expanded to (Cons _ ? 2 l) and refined to (Cons N 2 l), and pass :: to an higher order function expecting an argument of type N \u2192 List N \u2192 List N. In the latter case, :: is expanded to (Cons _ ? ) that is refined to (Cons N) because of the expected type. If :: is passed instead to a function expecting an argument of type \u2200A.A\u2192 List A\u2192 List A, then (Cons _ ? ) will be expanded simply to Cons whose inferred type is already the expected one.\nThe rest of the paper explains the bi-directional refinement algorithm implemented in Matita [6]. The algorithm is presented in a declarative programming style by means of deduction rules. Many of the rules are syntax directed and thus mutually exclusive. The implementation given for Matita in the functional OCaml language takes advantage of the latter observation to speed up the algorithm. We will clarify in the text what rules are mutually exclusive and what rules are to be tried in sequence in case of failure.\nThe refinement algorithm is presented progressively and in a modular way. In Section 3 we introduce the mono-directional type inference algorithm for CIC implemented following the kernel type checker code (that coincides with type inference if the term is ground) of Matita. The presentation is already adapted to be extended in Section 4 to bi-directional refinement. In these two sections the external and internal syntaxes coincides. In Section 5 we augment the external syntax with placeholders and vectors of placeholders. Finally, in Section 6 we add support for coercions. In all sections we will prove the correctness of the refinement algorithms by showing that a term in external syntax accepted by the refiner is turned into a new term that is accepted by the kernel and that has the expected type. Moreover, a precise correspondence is established between the input and output term to grant that the refined term corresponds to the input one.\nFor the sake of the reader, Appendix 8 is taken from [4] with minor modifications and it shows the type checking algorithm implemented by the kernel. The syntax of the calculus and some preliminary notions are also introduced in Section 2 before starting the description of the refinement algorithm."}, {"heading": "2. Preliminaries", "text": "2.1. Syntax. We begin introducing the syntax for CIC terms and objects in Table 1 and some naming conventions.\nTo denote constants we shall use c, c1, c2 . . . ; the special case of (co)recursively defined constants will be also denoted using f, f1, f2 . . . ; we reserve x, y, x1, x2 . . . for variables; t, u, v, t\u2032, t\u2032\u2032, t1, t2 . . . for terms; T,U, V,E, L,R, T \u2032, T \u2032\u2032, T1, T2 . . . for types and we use s, s \u2032, s1 . . . for sorts. We denote by \u0393 a context made of variables declarations (x : T ) or typed definitions (x := t : T ). We denote the capture avoiding substitution of a variable x for a term t by [x/t]. The notation [x1/t1; . . . ;xn/tn] is for simultaneous parallel substitution.\nTo refer to (possibly empty) sequences of entities of the same nature, we use an arrow notation (e.g. \u2212\u2192 t ). For the sake of conciseness, it is sometimes convenient to make the length of a sequence explicit, while still referring to it with a single name: we write \u2212\u2192 tn to mean that \u2212\u2192 tn is a sequence of exactly n elements and, in particular, that it is a shorthand for t1 t2 . . . tn; the index n must be a natural number (therefore the notation \u2212\u2212\u2192 tn+1 refers to a non-empty sequence). The arrow notation is extended to telescopes as in \u2212\u2212\u2212\u2192 (x : t) or \u2212\u2212\u2212\u2212\u2212\u2192 (xn : tn) and used in binders, (co)recursive definitions and pattern matching branches. As usual, \u03a0x : T1.T2 is abbreviated to T1 \u2192 T2 when x is not a free variable in T2. Applications are n-ary, consisting of a term applied to a non-empty sequence of terms. Inductive types Il are annotated with the number l of arguments that are homogeneous in the types of all constructors. For example consider the inductive type of vectors Vect of arity \u03a0A : Type.N \u2192 Type. It takes two arguments, a type and a natural number representing the length of the vector. In the types of the two constructors, Vnil : Vect A 0 and Vcons : \u03a0m,Vect A m \u2192 A \u2192 Vect A (m + 1), every occurrence of Vect is applied to the same argument A, that is also implicitly abstracted in the types of the constructors. Thus Vect has one homogeneous argument, and will be represented by the object\n\u03a0A : Type. inductive Vect : N\u2192 Type := Vnil : Vect A 0 | Vcons : \u03a0m,A\u2192 Vect A m\u2192 Vect A (m+ 1)\nand referred to with Vect1. This is relevant for the pattern matching construction, since the homogeneous arguments are not bound in the patterns because they are inferred from the type of the matched term. For example, to pattern match over a vector v of type (Vect N 3) the user writes\nmatch v in Vect1 return T [Vnil\u21d2 t1 | Vcons (m : N) (x : N) (v\u2032 : Vect N m)\u21d2 t2] The inductive type Il in the pattern matching constructor is (almost) redundant, since distinct inductive types have distinct constructors; it is given for the sake of readability and to distinguish the inductive types with no constructors. In a concrete implementation it also allows to totally drop the names of the constructors by fixing an order over them: the i-th pattern will be performed on the i-th constructor of the Il inductive type.\nSince inductive types may have non homogeneous arguments, not every branch is required to have exactly the same type. The term introduced with the return keyword is a function that computes the type expected by a particular branch and also the type of the entire pattern matching. Variables \u2212\u2212\u2212\u2192 (x : t) are abstracted in the right hand side terms of \u21d2.\nThe definitions of constants c (including (co)recursive constants f), inductive types Il and constructors k are collected in the syntactic category of CIC objects o.\nMetavariable occurrences, represented with ?j [t1 ; . . . ; tn], are missing typed terms equipped with an explicit local substitution. The index j enables metavariables to occur non-linearly in the term. To give an intuition of the role played by the local substitution, the reader can think of ?j [t1 ; . . . ; tn] as a call to the, still unknown, function ?j with actual arguments t1 . . . tn. The terms t1 . . . tn will be substituted for the formal arguments of the ?j function inside its body only when it will be known.\nWe omit to write the local substitution when it is the identity substitution that sends all variables in the current context with themselves. Thus ?j will be a shorthand for ?j [x1 ; . . . ; xn] when x1, . . . , xn are the variables bound in the right order in the context of the metavariable occurrence.\nThe CIC calculus extended with metavariables has been studied in [21] and the flavor of metavariables implemented in Matita is described in [26].\n2.2. Typing rules. The kernel of Matita is able to handle the whole syntax presented in the previous section, metavariables included. While we report in the Appendix 8 the full set of typing rules implemented by the kernel, here we summarise only the ones that will be reused by the refinement algorithm. We will give a less formal but more intuitive presentation of these rules, defining them with a more concise syntax. Moreover, we will put our definition in linear order, while most of them are actually mutually recursive.\nDefinition 2.1 (Proof problem (\u03a3)). A proof problem \u03a3 is a finite list of typing declarations of the form \u0393?j `?j : T?j .\nA proof problem, as well as a CIC term, can refer to constants, that usually live in an environment that decorates every typing rule (as in the Appendix 8). In the following presentation we consider a global well formed environment Env, basically a collections of CIC objects defining all constants and inductive types and associating them to their respective types. No refinement rule will modify this environment that plays no role in this presentation. In fact it is the task of the kernel to enable well typed definitions, inductive types and (co-)recursive functions to enter the environment.\nWe thus omit the environment Env from the input of every judgment. We will fetch from it the type T of a constant, inductive type or constructor r writing (r : T ) \u2208 Env.\nWe regard CIC as a Pure Type System [7], and we denote by PTS the set of axioms. We denote by s \u2208 PTS any sort of the PTS, with (s1 : s2) \u2208 PTS the fact that s2 types s1, and with (s1, s2, s3) \u2208 PTS the fact that a product over s1 to s2 has sort s3. CIC is a full but not functional PTS: all products are well formed but in (s1, s2, s3) \u2208 PTS it may be s2 6= s3. This is because the calculus is parameterized over a predicative hierarchy Typeu for u in a given set of universe indexes. In a predicative setting, given s1 = Typeu1 and s2 = Typeu2 , s3 is defined as Typemax {u1,u2} according to some bounded partial order on the universe indexes. The details for the actual PTS used in Matita are given in [4]. We will often write simply Type when we are not interested in the universe index (e.g. in examples). We also write Type> for the biggest sort in the hierarchy, if any, or a variable universe to be later fixed to be big enough to satisfy all the required constraints.\nWe also write (s1, s2) \u2208 elim(PTS) to check if an element of an inductive type of sort s1 can be eliminated to inhabit a type whose sort is s2. This is relevant for CIC since the sort of propositions, Prop, is non informative and cannot be eliminated to inhabit a data type of sort Typeu for any u (but for few exceptions described in [4] Section 6).\nProof problems do not only declare missing proofs (i.e. not all T?j have sort Prop) but also missing terms and, of particular interest for this paper, missing types.\nDefinition 2.2 (Metavariable substitution environment (\u03a6)). A metavariable substitution environment \u03a6 (called simply substitution when not ambiguous) is a list of judgments of the form\n\u0393?j `?j := t?j : T?j\nstating that the term t?j of type T?j in \u0393?j has been assigned to ?j .\nWe now anticipate the typing judgment of the kernel. A formal definition of well formedness for \u03a3 and \u03a6 will follow.\nDefinition 2.3 (Typing judgment). Given a term t, a proof problem \u03a3 and a substitution \u03a6, all assumed to be well formed, we write\n\u03a3, \u03a6, \u0393 ` t : T to state that t is well typed of type T .\nWhen \u03a3, \u03a6, \u0393 ` t : T the type T is well typed and its type is either a metavariable or a sort s \u2208 PTS.\nThe typing judgment implemented in our kernel is an extension of the regular typing judgment for CIC [35, 23, 13]. It is described in [4] and reported in the Appendix 8. Here we recall the main differences: \u2022 Substitution of a regular variable x for a term t is extended with the following rule for metavariables:\n?j [t1 ; . . . ; tn][x/t] =?j [t1[x/t] ; . . . ; tn[x/t]]\n\u2022 The conversion relation (denoted by \u2193) is enlarged allowing reduction to be performed inside explicit substitution for metavariables:\n\u0393 ` ti \u2193 t\u2032i i \u2208 {1 . . . n} \u0393 `?j [t1 ; . . . ; tn] \u2193?j [t\u20321 ; . . . ; t\u2032n]\n\u2022 The following typing rules for metavariables are added: y1 : T1 ; . . . ; yn : Tn `?j : T?j \u2208 \u03a3 \u0393 ` ti : Ti[y1/t1 ; . . . ; yi\u22121/ti\u22121] i \u2208 {1 . . . n}\n\u0393 ` WF(?j [t1 ; . . . ; tn]) (y1 : T1 ; . . . ; yn : Tn `?j : T?j ) \u2208 \u03a3 \u0393 ` WF(?j [t1 ; . . . ; tn])\n\u0393 `?j [t1 ; . . . ; tn] : T?j [y1/t1 ; . . . ; yn/tn] Moreover, in many situations a metavariable occurrence is also accepted as a valid sort, marking it so that it cannot be instantiated with anything different from a sort. This additional labelling will be omitted, being marginal for the refinement algorithm.\nThe technical judgment \u0393 ` WF(?j [t1 ; . . . ; tn]) states that a metavariable occurrence ?j [t1 ; . . . ; tn] is well formed in \u0393.\nIn all the previous rules we assumed access to a global well formed proof problem \u03a3 and substitution \u03a6. Both \u03a3 and \u03a6 are never modified by the judgments implemented in the kernel.\nWe now present the well formedness conditions, corresponding to the judgments `WF presented in the Appendix 8.\nDefinition 2.4 (Metavariables of term/context (M)). Given a term t, M(t) is the set of metavariables occurring in t. Given a context \u0393,M(\u0393) is the set of metavariables occurring in \u0393.\nThe function M is at the base of the order relation defined between metavariables. Definition 2.5 (Metavariables order relation ( \u03a3 )). Let \u03a3 be a proof problem. Let <\u03a3 be the relation defined as: ?n1 <\u03a3 ?n2 iff ?n1 \u2208 M(\u0393?n2) \u222a M(T?n2). Let \u03a3 be the transitive closure of <\u03a3 .\nDefinition 2.6 (Valid proof problem). A proof problem \u03a3 is a valid proof problem if and only if \u03a3 is a strict partial order (or, equivalently, if and only if \u03a3 is an irreflexive relation).\nThe intuition behind \u03a3 is that the smallest ?j (or one of them since there may be more than one) does not depend on any other metavariable (e.g. M(\u0393?j ) = \u2205 and M(T?j ) = \u2205 where \u0393?j `?j : T?j \u2208 \u03a3). Thus instantiating every minimal ?j with a metavariable free term will give a new \u03a3 in which there is at least one ?j not depending on any other metavariable (or \u03a3 is empty). This definition is the key to avoid circularity in the following definitions.\nIn the rules given in Appendix 8 the partial order is left implicit by presenting \u03a3 as an ordered list. However, as proved by Strecker in his Ph.D. thesis [32], the order is not preserved by unification and thus in any realistic implementation \u03a3 is to be implemented as a set and the fact that \u03a3 remains a partial order must be preserved as an invariant.\nDefinition 2.7 (Well formed context (WF(\u0393))). Given a well formed proof problem \u03a3, a context \u0393 = y1 : T1, . . . , yn : Tn is well formed (denoted by WF(\u0393)) if M(\u0393) \u2286 \u03a3 and for every i y1 : T1, . . . yi\u22121 : Ti\u22121 ` yi : Ti Definition 2.8 (Well formed proof problem (WF(\u03a3))). A valid proof problem \u03a3 is a wellformed proof problem (denoted by WF(\u03a3)) if an only if for all (\u0393?j `?j : T?j ) \u2208 \u03a3 we have \u03a3,\u0393?j ` T?j : s and s \u2208 PTS.\nDefinition 2.9 (Well formed substitution (WF(\u03a6))). Given a well formed proof problem \u03a3, a substitution \u03a6 is well formed (denoted byWF(\u03a6)) if for every (\u0393?j `?j := t?j : T?j ) \u2208 \u03a6 we have \u03a3, \u2205,\u0393?j ` t?j : T?j .\nThe well formedness definitions given so far are actually implemented by the kernel in a more precise but less intuitive way. We thus refer to the kernel judgments in the following definition, that will be used in the specification of all refinement rules.\nDefinition 2.10 (Well formed status (WF(\u03a3, \u03a6, \u0393))). Given a proof problem \u03a3, a substitution \u03a6 and a context \u0393, the triple \u03a3, \u03a6, \u0393 is well formed (denoted by WF(\u03a3, \u03a6, \u0393)) when WF(\u03a3) and WF(\u03a6) and WF(\u0393).\nWe shall sometimes omit \u0393, considering it equal to a default, well formed context, like the empty one. The recursive operation of applying a substitution \u03a6 to a term t is denoted by \u03a6(t) and acts as the identity for any term but metavariables contained in \u03a6, on which it behaves as follows:\n\u03a6(?j [t1 ; . . . ; tn]) = t?j [y1/t1 ; . . . ; yn/tn] when (y1 : T1; . . . ; yn : Tn `?j := t?j : T?j ) \u2208 \u03a6 Note that, thanks to the extensions to the type checking rules made in Definition 2.3, substitution application is type preserving. Substitutions do apply also to well formed proof problems in the following way:\n\u03a6(\u0393?j `?j : T?j ) = \u03a6(\u0393?j ) `?j : \u03a6(T?j ) (for each ?j \u2208 \u03a3) The substitution application operation is seldom used explicitly, since all judgments\ntake as input and give back a substitution. Nevertheless it will be used in the examples.\nDefinition 2.11 (Weak-head normalization (.whd)). Given a context \u0393, substitution \u03a6 and proof problem \u03a3, all assumed to be well formed, it computes the weak head normal form\nof a well typed term t according to the reduction rules of CIC. It is denoted by:\n\u03a3, \u03a6, \u0393 ` t .whd t\u2032\nNote that ?j is in weak head normal form iff ?j 6\u2208 \u03a6. By abuse of notation we will write \u03a3, \u03a6, \u0393 ` t1 .whd \u03a0x1 : T1 . . .\u03a0xn : Tn.tn+1 to mean that for all i \u2208 {1 . . . n} \u03a3, \u03a6, \u0393;x1 : T1; . . . ;xi\u22121 : Ti\u22121 ` ti .whd \u03a0xi : Ti.ti+1 and \u03a3, \u03a6, \u0393 ` tn+1 .whd tn+1. Such repeated use of weak head computation to produce spines of dependent products occur frequently in the kernel and in the refinement rules, especially when dealing with inductive types.\nDefinition 2.12 (Conversion (\u2193)). Given a proof problem \u03a3, substitution \u03a6 and context \u0393, all assumed to be well formed, and two terms t1 and t2, it verifies if t1 and t2 have a common normal form according to the rules of CIC given in Appendix 8. It is denoted by:\n\u03a3, \u03a6, \u0393 ` t1 \u2193 t2"}, {"heading": "3. Mono-directional refinement", "text": "We now present the mono-directional refinement algorithm for CIC implemented in the old versions of Matita (0.5.x) and directly inspired by the rules for type checking implemented in the kernel. In this section we assume the external syntax to coincide with the syntax of terms. Hence the algorithm actually performs just type inference. Nevertheless, we already organize the judgments in such a way that the latter extension to bi-directionality will be achieved just by adding new typing rules.\n3.1. Specification. To specify what is a refinement algorithm we must first introduce the notion of proof problem refinement. Intuitively, a pair (proof problem, substitution) is refined by another pair when the second is obtained by reducing some proof obligations to new ones. It thus represents an advancement in the proof discovery process.\nDefinition 3.1 (Proof problem refinement (\u2264)). We say that \u03a3\u2032,\u03a6\u2032 refines \u03a3,\u03a6 (denoted by \u03a3\u2032,\u03a6\u2032 \u2264 \u03a3,\u03a6) when \u03a6 \u2282 \u03a6\u2032 and for every (\u0393?j `?j : T?j ) \u2208 \u03a3 either (\u0393\u2032?j `?j : T \u2032 ?j ) \u2208 \u03a3\u2032 or (\u0393\u2032?j `?j := t?j : T \u2032 ?j ) \u2208 \u03a6\u2032 where \u0393\u2032?j = \u03a6 \u2032(\u0393?j ) and T \u2032 ?j = \u03a6\u2032(T?j ). Specification 3.2 (Refiner in type inference mode (R\u21d1)). A refiner algorithm R in type inference mode \u21d1 takes as input a proof problem, substitution and context, all assumed to be well formed, and a term t. It fails or gives in output a new proof problem, a new substitution, a term t\u2032 and a type T \u2032. It is denoted by:\n(\u03a3, \u03a6) \u0393 ` t R \u21d1 t\u2032 : T \u2032 (\u03a3\u2032, \u03a6\u2032)\nPrecondition: WF(\u03a3, \u03a6, \u0393)\nPostcondition (parametric in 4):\nWF(\u03a3\u2032, \u03a6\u2032) \u2227 \u03a3\u2032,\u03a6\u2032 \u2264 \u03a3,\u03a6 \u2227 \u03a3\u2032, \u03a6\u2032, \u0393 ` t\u2032 : T \u2032 \u2227 t\u2032 4 t\nThe specification is parametric in the 4 relation that establishes a correspondence between the term t to be refined and the refiner output t\u2032. In order to prove correctness, we are only interested in admissible 4 relations defined as follows.\nDefinition 3.3 (Admissible relations (4)). A partial order relation 4 is admissible when for every term t1 in external syntax and t2 and T in internal syntax and for every variable x occurring free only linearly in T we have that t1 4 t2 implies T [x/t1] 4 T [x/t2].\nAdmissibility for equivalence relations correspond to asking the equivalence relation to be a congruence.\nWhen the external syntax corresponds to the term syntax and coercions are not considered, we can provide an implementation that satisfies the specification by picking the identity for the 4 relation. Combined with \u03a3\u2032,\u03a6\u2032 \u2264 \u03a3,\u03a6, the two postconditions imply that \u03a6(t\u2032) must be obtained from t simply by instantiating some metavariables. In Sections 5 and 6, we shall use weaker definitions of 4 than the identity, allowing replacement of (vectors of) placeholders with (vectors of) terms and the insertion of coercions as results of the refinement process. All the 4 relations considered in the paper will be large partial orders over terms of the external syntax (that always include the internal syntax).\nWe will now proceed in presenting an implementation of a refinement algorithm in type inference mode R\u21d1 . The implementation is directly inspired by the type checking rules used in the kernel. However, since refinement deals with terms containing flexible parts, conversion tests need to be replaced with unification tests. In a higher order and dependently typed calculus like CIC, unification is in the general case undecidable. What is usually implemented in interactive theorem provers is an essentially fist order unification algorithm, handling only some simple higher order cases. The unification algorithm implemented in Matita goes beyond the scope of this paper, the interested reader can find more details in [26, 5]. Here we just specify the expected behavior of the unification algorithm.\nSpecification 3.4 (Unification ( ?\u2261 \u2212U)). An unification algorithm takes as input a proof problem, a substitution and a context, all assumed to be well formed, and two well typed terms t1 and t2. It fails or gives in output a new proof problem and substitution. It is denoted using the following notation where \u2022 can either be = or be omitted. In the former case universe cumulativity (a form of sub-typing) is not taken in account by unification.\n(\u03a3, \u03a6) \u0393 ` t1 ?\u2261 t2 U\u2022 (\u03a3\u2032, \u03a6\u2032)\nPrecondition:\nWF(\u03a3, \u03a6, \u0393) \u2227 \u03a3, \u03a6, \u0393 ` t1 : T1 \u2227 \u03a3, \u03a6, \u0393 ` t2 : T2 Postcondition:\nWF(\u03a3\u2032, \u03a6\u2032) \u2227 \u03a3\u2032,\u03a6\u2032 \u2264 \u03a3,\u03a6 \u2227 \u03a3\u2032, \u03a6\u2032, \u0393 ` t\u20321 \u2193\u2022 t\u20322\n3.2. Implementation.\n3.2.1. Additional judgments. For the sake of clarity we prefer to keep the same structure for the mono and bi-directional refiners. We thus give the definition of some functions that are trivial in the mono-directional case, but will be replaced by more complex ones in the following sections.\nEven if we presented the syntax of CIC using the same category terms, types and sorts, some primitive constructors (like the \u03bb and \u03a0 abstractions) expect some arguments to be types or sorts, and not terms. A type level enforcing algorithm forces a term in external syntax to be refined to a valid type.\nSpecification 3.5 (Type level enforcing (F)). A type level enforcing algorithm takes as input a proof problem \u03a3, a substitution \u03a6 and a context \u0393, all assumed to be well formed, and a term T . It fails or it returns a new term T \u2032, a sort s, a new substitution \u03a6\u2032 and proof problem \u03a3\u2032. It is denoted by:\n(\u03a3, \u03a6) \u0393 ` T F T \u2032 : s (\u03a3\u2032, \u03a6\u2032) Precondition: WF(\u03a3, \u03a6, \u0393) Postcondition (parametric in 4):\nWF(\u03a3\u2032, \u03a6\u2032) \u2227 \u03a3\u2032,\u03a6\u2032 \u2264 \u03a3,\u03a6 \u2227 \u03a3\u2032, \u03a6\u2032, \u0393 ` T \u2032 : s \u2227 s \u2208 PTS \u2227 T \u2032 4 T\nNote that one may want to accept a metavariable as the sort s, eventually labelling it in such a way that the unification algorithm will refuse to instantiate it with a different term. The choice must be consistent with the one taken in the implementation of the kernel.\nThe task of checking if a term has the right type is called refinement in type forcing mode\nand it will be denoted by R\u21d3 . In the mono-directional case, R\u21d3 will be simply implemented calling the C algorithm that will handle coercions in Section 6 but which, at the moment, only verifies that no coercion is needed by calling the unification procedure.\nSpecification 3.6 (Explicit cast (C)). A cast algorithm takes as input a proof problem \u03a3, a substitution \u03a6 and a context \u0393, all assumed to be well formed, and a term t with its inferred type T and expected type T \u2032. It fails or it returns a new term t\u2032 of type T \u2032, a new proof problem \u03a3\u2032 and substitution \u03a6\u2032. It is denoted by:\n(\u03a3, \u03a6) \u0393 ` t : T ?\u2261 T \u2032 C t\u2032 (\u03a3\u2032, \u03a6\u2032) Precondition: WF(\u03a3, \u03a6, \u0393) \u2227 \u03a3, \u03a6, \u0393 ` t : T \u2227 \u03a3, \u03a6, \u0393 ` T \u2032 : s Postcondition (parametric in 4):\nWF(\u03a3\u2032, \u03a6\u2032) \u2227 \u03a3\u2032,\u03a6\u2032 \u2264 \u03a3,\u03a6 \u2227 \u03a3\u2032, \u03a6\u2032, \u0393 ` t\u2032 : T \u2032 \u2227 t\u2032 4 t\nSpecification 3.7 (Refiner in type forcing mode (R\u21d3)). A refiner algorithm R in type forcing mode \u21d3 takes as input a proof problem \u03a3, a substitution \u03a6 and a context \u0393, all assumed to be well formed, and a term t together with its expected well formed type T . It fails or returns a term t\u2032 of type T , a new proof problem \u03a3\u2032 and substitution \u03a6\u2032. It is denoted by:\n(\u03a3, \u03a6) \u0393 ` t : T R \u21d3 t\u2032 (\u03a3\u2032, \u03a6\u2032)\nPrecondition: WF(\u03a3, \u03a6, \u0393) \u2227 \u03a3, \u03a6, \u0393 ` T : s\nPostcondition (parametric in 4):\nWF(\u03a3\u2032, \u03a6\u2032) \u2227 \u03a3\u2032,\u03a6\u2032 \u2264 \u03a3,\u03a6 \u2227 \u03a3\u2032, \u03a6\u2032, \u0393 ` t\u2032 : T \u2227 t\u2032 4 t\n3.2.2. Notational conventions. The arguments \u03a3 and \u03a6 will be taken as input and returned as output in all rules that define the refiner algorithm. To increase legibility we adopt the following notation, letting \u03a3 and \u03a6 be implicit. Each rule of the form\n(rule)\n\u0393 ` t t\u2032 \u0393 ` t\u2032 t\u2032\u2032 \u0393 ` t t\u2032\u2032\nhas to be interpreted as:\n(rule)\n(\u03a3, \u03a6) \u0393 ` t t\u2032 (\u03a3\u2032,\u03a6\u2032) (\u03a3\u2032, \u03a6\u2032) \u0393 ` t\u2032 t\u2032\u2032 (\u03a3\u2032\u2032,\u03a6\u2032\u2032) (\u03a3, \u03a6) \u0393 ` t t\u2032\u2032 (\u03a3\u2032\u2032,\u03a6\u2032\u2032)\nMoreover we will apply this convention also to rules not returning \u03a3 or \u03a6 as if they were returning the \u03a3 or \u03a6 taken as input.\nNote that the \u03a3\u2032 and \u03a6\u2032 returned by all rules considered in this paper are well formed and are also a proof problem refinement of the \u03a3 and \u03a6 provided as input. Being a proof problem refinement is clearly a transitive relation. Thus we have for free that all the omitted pairs (proof problem, substitution) are refinements of the initial ones.\n3.2.3. Role of the relations and their interaction. In this paragraph we shortly present the role played by the relations R\u21d1 , R\u21d3 , C and F introduced so far and the auxiliary ones\nET and Et that will be specified when needed.\nThe relation R\u21d1 links a term with its inferred type, while R\u21d3 links a term with the type expected by its context. R\u21d3 will thus exploit the extra piece of information not only checking that the inferred type unifies with the expected one, but also propagating this information to its recursive calls on subterms (when possible). R\u21d1 and R\u21d3 will be defined in a mutually recursive way.\nThe relation F links a term with its refinement asserting that the refinement is a type. This is relevant when typing binders like (\u03bbx : t.t\u2032), where t is required to be a type. In its simplest formulation the relation is a simple assertion, linking a type with itself. In Section 6 the refinement relation 4 will admit to link a term t that is not a type with a function applied to t that turns its input into a type. For example t may be a record containing a type and F may link it with (\u03c0n t), where \u03c0n is the projection extracting the type from the record. F is recursively defined in terms of R\u21d1\nThe relation C links a term t, its inferred type T1 and the type expected by its context T2 with a refinement of the term t \u2032 asserting that the refined term has type T2. In its simple formulation the relation is a simple assertion that T1 and T2 are the same and thus links t with itself. In Section 6 the refinement relation 4 will admit to explicitly cast t. For example a natural number n of type N may be casted into the rationals Q refining it to (\u03bbx : N.x/1) n. The C relation is non recursive.\nThe relations ET and Et are auxiliary relations only used to ease the presentation\nof the R\u21d1 and R\u21d3 relations in the case of applications. Both auxiliary relations are thus recursively defined with R\u21d1 and R\u21d3 .\n3.2.4. Rules for terms. We now give an implementation for the refiner in both modes and for the auxiliary judgments. The implementation is parametric on the unification algorithm, that is not described in this paper.\n( C \u2212ok)\n\u0393 ` T1 ?\u2261 T2 U\n\u0393 ` t : T1 ?\u2261 T2 C t\n( R\u21d3 \u2212default)\n\u0393 ` t R \u21d1 t\u2032 : T \u2032 \u0393 ` t\u2032 : T \u2032 ?\u2261 T C t\u2032\u2032\n\u0393 ` t : T R \u21d3 t\u2032\u2032\n( F \u2212ok)\n\u0393 ` T R \u21d1 T \u2032 : s s1 \u2208 PTS \u0393 ` T \u2032 : s ?\u2261 s1 C T \u2032\u2032\n\u0393 ` T F T \u2032\u2032 : s\nNote that s1 is arbitrary, and the actual code prefers the predicative sorts Typeu over Prop. This is the only rule defined in this section to be non syntax oriented: in case of an incorrect choice of s1, backtracking is required. The actual algorithm implemented in Matita performs the choice of s1 lazily to remain backtracking free 5.\n( R\u21d1 \u2212variable)\n(x : T ) \u2208 \u0393 or (x := t : T ) \u2208 \u0393\n\u0393 ` x R \u21d1 x : T\n( R\u21d1 \u2212constant)\n(r : T ) \u2208 Env r \u2208 {k, I, c}\n\u0393 ` r R \u21d1 r : T\n( R\u21d1 \u2212sort)\n(s1 : s2) \u2208 PTS\n\u0393 ` s1 R\u21d1 s1 : s2\n( R\u21d1 \u2212meta)\n(\u0393?j `?j : T?j ) \u2208 \u03a3 or (\u0393?j `?j := t?j : T?j ) \u2208 \u03a6 \u0393?j = \u2212\u2212\u2212\u2212\u2192 xn : Tn \u0393 ` ti : Ti[ \u2212\u2212\u2212\u2212\u2212\u2212\u2192 xi\u22121/t \u2032 i\u22121] R\u21d3 t\u2032i i \u2208 {1 . . . n}\n\u0393 `?j [ \u2212\u2192 tn ] R\u21d1 ?j [ \u2212\u2192 t\u2032n ] : T?j [ \u2212\u2212\u2212\u2192 xn/t \u2032 n]\nNote that the operation of firing a \u03b2-redex must commute with the operation of applying a substitution \u03a6. Consider for example the term v = (\u03bbx.?j [x]) u and the substitution \u03a6 = {x : T `?j := t(x) : T (x)}. If one applies the substitution first, and then reduces the redex obtains t(u), whose type is T (u). If one fires the redex fist, the fact that x is substituted by u in ?j is recorded in the local substitution attached to the metavariable\n5Laziness will be no longer sufficient to avoid backtracking when we will add additional rules to handle coercions in Section 6.\ninstance. Indeed \u2205, \u2205, \u2205 ` v .whd?j [u] and \u03a6(?j [u]) = t(u) : T (u). Therefore ?j [u] is given the type T (u) by the rule ( R\u21d1 \u2212meta).\n( R\u21d1 \u2212letin)\n\u0393 ` T F T \u2032 : s \u0393 ` t : T \u2032 R \u21d3 t\u2032 \u0393;x := t\u2032 : T \u2032 ` u R \u21d1 u\u2032 : T2\n\u0393 ` let (x : T ) := t in u R \u21d1 let (x : T \u2032) := t\u2032 in u\u2032 : T2[x/t\u20321]\n( R\u21d1 \u2212lambda)\n\u0393 ` T1 F T \u20321 : s1 \u0393;x : T \u20321 ` t R\u21d1 t\u2032 : T\n\u0393 ` \u03bbx : T1.t R\u21d1 \u03bbx : T \u20321.t \u2032 : \u03a0x : T \u20321.T\n( R\u21d1 \u2212product)\n\u0393 ` T1 F T \u20321 : s1 \u0393;x : T \u20321 ` T2 F T \u20322 : s2 (s1, s2, s3) \u2208 PTS\n\u0393 ` \u03a0x : T1.T2 R\u21d1 \u03a0x : T \u20321.T \u2032 2 : s3\nWe now state the correctness theorem holding for all the rules presented so far and for the few ones that will follow. The proof is partitioned in the following way: here we state the theorem, introduce the proof method we adopted and prove the theorem for the simple rules presented so far. Then we will introduce more complex rules, like the rule for application, and we will prove for each of them the correctness theorem.\nTheorem 3.8 (Correctness). The C , F , R\u21d1 , R\u21d3 , ET , and Et algorithms defined by the set of rules presented in this section obey their specification for all admissible 4 relations that include the identity for terms in the internal syntax. In particular, the algorithms are correct when the identity relation is picked for 4.\nProof. We assume the unification algorithm to be correct w.r.t. its own specification. For every judgment, the proof is by induction on the proof tree. For each rule, we assume that the precondition of the judgment holds for the rule conclusion and that the appropriate postcondition holds by induction hypothesis for every hypothesis. We need to prove that the precondition of every hypothesis holds and that the postcondition of the conclusion holds too. The proofs are mostly trivial for the rules presented so far. In particular, the proof for each rule R\u21d1 \u2212name or R \u21d3 \u2212name follows from the corresponding rule K\u2212name reported in the Appendix 8. We will shortly introduce the rules dealing with applicatios together with their correctness proofs since applications are handled slightly differently from the way they are processed by the kernel.\nThe next rule deals with applications which are n-ary in our implementation of CIC. In a calculus without dependent types, n-ary applications could be handled simply by putting the head function type in the form of a spine of n products and then by verifying that the type of each argument matches the corresponding expected type. In the presence of dependent types, however, it is possible to write functions whose arity depends on the arguments passed to the function. For instance, a function f could be given type \u2200n : N.(repeat N n) where (repeat N n) reduces to N\u2192 . . .\u2192 N where the number of products is exactly n. For this reason, the only possibility is to process applications one argument at a time, checking at every step if the function still accepts more arguments. We implement this with an additional judgment\n\u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xi := vi : Ti) : T |N \u2212\u2192un ET v : V\ncalled \u201ceat products\u201d to be specified and implemented immediately after the ( R\u21d1 \u2212appl) rule.\n( R\u21d1 \u2212appl)\n\u0393 ` t R \u21d1 t\u2032 : T \u0393 ` t\u2032 : T |N \u2212\u2212\u2192un+1 ET v : V\n\u0393 ` t \u2212\u2212\u2192un+1 R\u21d1 v : V\nSpecification 3.9 (Eat products (ET )). The E T\nalgorithm refines an n-ary application by consuming an argument at a time. It takes as input a proof problem \u03a3, a substitution \u03a6 and a context \u0393, all assumed to be well formed, the part of the already processed application t (x1 := v1 : T1) . . . (xr := vr : Tr) together with its type T , and the list of arguments yet to be checked. The notation (xi := vi : Ti) means that the i-th already processed argument has type Ti and is consumed by a product that binds the variable xi. The algorithm fails or returns the refined application v together with its type V, a new substitution \u03a6\u2032 and proof problem \u03a3\u2032. It is denoted by:\n(\u03a3, \u03a6) \u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) : T |N \u2212\u2192uk ET v : V (\u03a3\u2032, \u03a6\u2032)\nPrecondition:\nWF(\u03a3, \u03a6, \u0393) \u2227 \u03a3, \u03a6, \u0393 ` vi : Ti i \u2208 {1 . . . r} \u2227 \u03a3, \u03a6, \u0393 ` t v1 . . . vr : T Postcondition (parametric in 4):\nWF(\u03a3\u2032, \u03a6\u2032) \u2227 \u03a3\u2032,\u03a6\u2032 \u2264 \u03a3,\u03a6 \u2227 \u03a3\u2032, \u03a6\u2032, \u0393 ` v : V \u2227 v 4 t v1 . . . vr u1 . . . uk The applicative case is one of the two most complicated rules. Moreover, the refinement algorithm for the application does not mimic the one used in the kernel. Therefore we show the correctness of the ( R\u21d1 \u2212appl) rule and of the implementation of the E T algorithm.\nCorrectness of ( R\u21d1 \u2212appl). The only rule precondition is WF(\u03a3, \u03a6, \u0393) that is also the precondition for the first premise. By induction hypothesis on the first premise we know \u03a3\u2032, \u03a6\u2032, \u0393 ` t\u2032 : T where \u03a3\u2032, \u03a6\u2032 are implicitly returned by the first call and passed to the second one. Moreover \u03a3\u2032, \u03a6\u2032 \u2264 \u03a3, \u03a6 and t\u2032 4 t. Therefore the preconditions for the second premise are satisfied. By induction hypothesis on the second premise we know \u03a3\u2032\u2032, \u03a6\u2032\u2032, \u0393 ` v : V where \u03a3\u2032\u2032, \u03a6\u2032\u2032 are implicitly returned by the second call and by the rule as a whole. Moreover \u03a3\u2032\u2032, \u03a6\u2032\u2032 \u2264 \u03a3\u2032, \u03a6\u2032 and v 4 t\u2032 \u2212\u2212\u2192un+1. By transitivity of proof problem refinement, we also have \u03a3\u2032\u2032, \u03a6\u2032\u2032 \u2264 \u03a3, \u03a6. Moreover, since 4 is admissible, we also\nhave v 4 t\u2032 \u2212\u2212\u2192un+1 4 t \u2212\u2212\u2192un+1. All post-conditions have been proved and therefore the rule is correct.\nThe ET algorithm is implemented as follows.\n(ET\u2212empty) \u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) : T |N ET t \u2212\u2192vr : T\nCorrectness of the (ET\u2212empty) rule is trivial.\n(ET\u2212prod)\n\u0393 ` T .whd \u03a0x : U1.T1 \u0393 ` u1 : U1 R\u21d3 u\u20321 \u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) (x := u \u2032 1 : U1) : T1[x/u \u2032 1] |N \u2212\u2192un ET v : V\n\u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) : T |N u1 \u2212\u2192un ET v : V\nCorrectness of (ET\u2212prod). Let \u03a3, \u03a6 be the well formed pair taken as input by the rule and passed to the second premise, that returns the well formed pair \u03a3\u2032, \u03a6\u2032. Similarly, let \u03a3\u2032\u2032, \u03a6\u2032\u2032 be the well formed pair given in output by the second premise and by the whole rule. By induction hypotheses \u03a3\u2032, \u03a6\u2032 \u2264 \u03a3, \u03a6 and \u03a3\u2032\u2032, \u03a6\u2032\u2032 \u2264 \u03a3\u2032, \u03a6\u2032 and thus \u03a3\u2032\u2032, \u03a6\u2032\u2032 \u2264 \u03a3, \u03a6 as required. By the rule pre-condition, T is well typed in \u03a3, \u03a6, \u0393 and so are U1 and T1 obtained by reduction. Thus the premises of the second rule are all satisfied and, by induction hypothesis, \u03a3\u2032, \u03a6\u2032, \u0393 ` u\u20321 : U1 \u2227 u\u20321 4 u1. By rules K\u2212appl\u2212 rec and K\u2212appl\u2212 base applied to the rule pre-condition t v1 . . . vr : T we get t v1 . . . vr u \u2032 1 : T1[x/u \u2032 1]. Since all preconditions for the third premise are satisfied, by induction hypothesis we know \u03a3\u2032\u2032, \u03a6\u2032\u2032, \u0393 ` v : V and v 4 t v1 . . . vr u\u20321 u2 . . . un. By admissibility of 4 we conclude also v 4 t v1 . . . vr u1 . . . un. Since all post-conditions have been proved, the rule is correct.\n(ET\u2212flexible)\n\u0393 ` T .whd ?j or \u0393 ` T .whd ?j w1 . . . wl \u0393 ` u1 R\u21d1 u\u20321 : U1 \u03a3 \u03a3 \u222a {\u0393; \u2212\u2212\u2212\u2212\u2192 xr : Tr;x : U1 `?k : Type>} \u0393 ` T ?\u2261 \u03a0x : U1.?k[ \u2212\u2212\u2212\u2192 xr/vr;x/x] U \u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) (x := u \u2032 1 : U1) : ?k[ \u2212\u2212\u2212\u2192 xr/vr;x/u \u2032 1] |N \u2212\u2192un ET v : V\n\u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) : T |N u1 \u2212\u2192un ET v : V\nCorrectness of (ET\u2212flexible). The proof is similar to the one for the ET\u2212prod rule. We only list the major differences here. The fact \u03a3\u2032, \u03a6\u2032, \u0393 ` u\u20321 : U1 is now obtained by induction hypothesis on the second premise. The role of T1 is now played by ?k[ \u2212\u2212\u2212\u2192 xr/vr;x/x]. The induction hypothesis on the third premise yields \u03a3\u2032\u2032\u2032, \u03a6\u2032\u2032, \u0393 ` T \u2193 \u03a0x : U1.?k[ \u2212\u2212\u2212\u2192 xr/vr;x/x] that was previously given directly by the rule pre-conditions (up to reduction of T ). The rest of the proof follows without any changes. The only remaining check to be performed\nis the well-formedness of ?k[ \u2212\u2212\u2212\u2192 xr/vr;x/x] that follows from rule K\u2212meta using the rule precondition \u03a3, \u03a6, \u0393 ` vi : Ti i \u2208 {1 . . . r}.\nAnother reason for the complexity of the ET algorithm is the need to infer a dependent type for the function f when its type is flexible (a metavariable). We now show an example of this scenario and an execution trace for the algorithm.\nExample 3.10 (Inference of a maximally dependent type). Consider the following input, where c1, c2, c3, P1, P2 are such that ` c1 : N and ` c2 : P1(c1) and c3 : P2(c1, c2):\n{`?F : Type}, \u2205, \u2205 ` \u03bbf :?F .f c1 c2 c3 The rule (ET\u2212flexible) matches the input and since the argument c1 has type N, \u03a3 is extended as follows:\n\u03a3 = { `?F : Type; x : N `?S :?T ; x : N `?T : Type}\nThen ?F gets unified with \u03a0x : N.?S obtaining the following substitution: \u03a6 = {`?F := \u03a0x : N.?S : Type}\nThe new type for the head of the application, morally (f c1), represented as f (x := c1), is ?S [c1/x]. In the following call to (ET\u2212flexible), the argument c2 has type P1(c1). \u03a3 is thus extended as follows:\n\u03a3 = { x : N; y : P1(c1) `?U :?V ; x : N; y : P1(c1) `?V : Type;\nx : N `?S :?T ; x : N `?T : Type}\nThen ?S [x/c1] is unified with \u03a0y : P1(c1).?U [x/c1] obtaining\n\u03a6 = { `?F := \u03a0x : N.?S : Type; x : N `?S := \u03a0y : P1(x).?U :?T ; x : N `?T := Type : Type}\nThe new type for the head of the application (f c1 c2) is ?U [c1/x; c2/y]. In the following call to (ET\u2212flexible), the argument c3 has type P2(c1, c2). \u03a3 is thus extended as follows:\n\u03a3 = { x : N; y : P1(c1); z : P2(c1, c2) `?Z :?W ; x : N; y : P1(c1); z : P2(c1, c2) `?W : Type;\nx : N; y : P1(c1) `?U :?V ; x : N; y : P1(c1) `?V : Type}\nThen ?U [x/c1; y/c2] is unified with \u03a0z : P2(c1, c2).?Z [x/c1; y/c2] obtaining\n\u03a6 = { `?F := \u03a0x : N.?S : Type; x : N `?S := \u03a0y : P1(x).?U :?T ; x : N `?T := Type : Type;\nx : N; y : P1(c1) `?U := \u03a0z : P2(x, y).?Z :?V ; x : N; y : P1(c1) `?V := Type : Type}\nThe final instantiation for ?F is thus the maximally dependent type\n\u03a6(?F ) = \u03a0x : N.\u03a0y : P1(x).\u03a0z : P2(x, y).?Z : Type\nwhere \u03a3 = { x : N; y : P1(c1); z : P2(c1, c2) `?Z :?W ;\nx : N; y : P1(c1); z : P2(c1, c2) `?W : Type}\nWe conclude now the description of the refinement algorithm in type inference mode. The final missing rule is the most complicated one and deals with pattern matching. It is reported in Figure 1.\nThe rule has been slightly simplified: in the actual implementation of Matita the test (s,\u03a6(?1)) \u2208 elim(PTS) is relaxed to accept elimination of inhabitants of non informative data types in all cases under the restriction that the data type must be small. Intuitively, smallness corresponds to the idea that the inhabitant of the data type would be non informative even if declared in Type. Typical examples are empty types and the Leibniz equality type. A precise definition of smallness together with the corresponding rules for pattern matching can be found in [4].\nNote that the return type T \u2032 is usually an anonymous function, beginning with lambda abstractions. Thus the type inferred for the pattern match construct is a \u03b2-redex. In fact the actual code of Matita post-processes that type firing (r + 1) \u03b2-redexes.\nTheorem 3.11 (Termination). The R\u21d1 algorithm defined by the set of rules presented in this section including R\u21d3 , C , F and ET is terminating.\nProof. The proof is by structural induction of the syntax of terms. The rules ( C \u2212ok), ( R\u21d1 \u2212variable), (R \u21d1 \u2212sort) and (R \u21d1 \u2212constant) are base cases. The first one clearly terminates if the unification algorithm ?\u2261 terminates, while the others terminate since \u0393 and Env are finite and the test (s1, s2) \u2208 PTS is also terminating. Now that we proved that all the rules for C , amounting to only one for the mono directional refiner, terminate, we can consider the ( R\u21d3 \u2212default) and ( F \u2212ok) as aliases for R\u21d1 , as if we were inlining their code.\nBy induction hypothesis R\u21d1 (and R\u21d3 being now an alias) terminates when called on smaller terms. The rule ( R\u21d1 \u2212meta) terminates because \u03a6 and \u03a3 are finite, thus lookups are terminating, and calls to R\u21d3 are done on smaller terms, so the induction hypothesis applies. The rule ( R\u21d1 \u2212letin) calls F , R \u21d3 and R\u21d1 on smaller terms, thus terminates by induction hypothesis. The same holds for ( R\u21d1 \u2212lambda) and (R \u21d1 \u2212product). To prove that ( R\u21d1 \u2212appl) terminates we use the induction hypothesis on the first premise and we are left to prove that ET terminates as well. Note that ET calls R\u21d3 and R\u21d1 on proper subterms of the n-ary application, thus the induction hypothesis applies and will be used in the next paragraph.\nWe show ET terminates by induction on the list of arguments (i.e. the list of terms after |N) assuming that the input term T is a well typed type. Thanks to the correctness property of R\u21d1 , ( R\u21d1 \u2212appl) always passes to ET a well typed type. The rule (ET\u2212empty) clearly terminates. The recursive call in the rule (ET\u2212prod) is on a shorter list of arguments, thus is terminating, and the call to R\u21d3 terminates by induction hypothesis. The term T [x/u\u20321] is a well typed type thanks to the subject reduction property of CIC, and the fact that the variable x and the term u\u20321 have the same type (postcondition of R\u21d3 , called with expected type U1). The call to .whd is terminating because T is well typed and CIC reduction rules, on well typed terms, form a terminating rewriting system.\nThe rule (ET\u2212flexible) terminates because of the same arguments. The only non obvious step is that \u03a0x : U1.?k[ \u2212\u2212\u2212\u2192 xr/vr;x/x] is a well typed type. The metavariable ?k is declared in \u03a3 of type Type>, thus cannot be instantiated with a term. Moreover, since CIC is a full PTS, the product \u03a0x : U1.?k is well typed of sort Type>.\nThe recursive calls in the last rule ( R\u21d1 \u2212match) are always on smaller terms. We are\nleft to prove that the expected type (T \u2032 \u2212\u2212\u2192 M \u2032jr (kj \u2212\u2192 ?ul \u2212\u2192 yjnj )) passed to the recursive call made on the last line is indeed a well typed type. The term T \u2032 is obtained using R\u21d3 , and we thus know it is a function of type \u03a0 \u2212\u2212\u2212\u2212\u2192 yr : G \u2032 r.\u03a0x : Il \u2212\u2192 ?ul \u2212\u2192yr .?1. The arguments \u2212\u2212\u2192 M \u2032jr are as many as expected and have the right types according to the environment Env (first two lines) and thanks to the fact that the substitutions M \u2032ji = M j i [ \u2212\u2212\u2212\u2212\u2192 xl/?ul] preserves their types. Finally, the term (kj \u2212\u2192 ?ul \u2212\u2192 yjnj ) has type Il \u2212\u2192 ?ul \u2212\u2192 M jr that is the expected one. Thus (T \u2032 \u2212\u2212\u2192 M \u2032jr (kj \u2212\u2192 ?ul \u2212\u2192 yjnj )) has type ?1 that is a well typed type according to \u03a3.\n3.3. Implementation remarks. The choice of keeping \u03a3 and \u03a6 separate is important and motivated by the fact that their size is usually very different. While the number of proof problems in \u03a3 is usually small, the substitution \u03a6 may record, step by step, the whole proof input by the user and can grow to an arbitrary size. Each metavariable must be either declared in \u03a3 or assigned in \u03a6, thus to know if a metavariable belongs to \u03a6 it is enough to test if it does not belong to \u03a3. Knowing if a metavariable is instantiated is a very common operation, needed for example by weak head normalization, and it must thus be possible to implement it efficiently.\nAnother important design choice is to design the kernel of the system so that it handles metavariables [4]. This enables to reuse a number of functionalities implemented in the kernel also during the refinement process, like an efficient reduction machinery. Also note that the extensions made to the type checker described in Definition 2.3 become dead code when the type checker is called on ground terms, and thus do not increase the size of the trusted code of the system.\nLast, it is worth pointing out that the algorithm is mostly independent from the representation chosen for bound variables. Matita is entirely based on De Bruijn indexes, but the tedious lift function is mostly hidden inside reduction and only directly called twice in the actual implementation of this algorithm. In particular it is necessary only to deal with the types of variables that must be pulled from the context. This potentially moves the type under all the context entries following the variable declaration or definition, thus the type must be lifted accordingly.\n3.3.1. Rules for objects. Objects are declarations and definitions of constants, inductive types and recursive and co-recursive functions that inhabit the environment Env. Exactly like terms, the user writes objects down using the external syntax and the objects need to be refined before passing them to the kernel for the final check before the insertion in the environment.\nDefinition 3.12 (Type checking for objects (Env ` WF)). The type checking algorithm for CIC objects takes as input a proof problem \u03a3 and a substitution \u03a6, all assumed to be well formed, and an object o. It is denoted by:\nEnv \u222a (\u03a3,\u03a6, o) `WF and states that o is well typed.\nThis algorithm is part of the kernel, and described in Appendix 8. It is the basis for the construction of the corresponding refinement algorithm for objects, that is specified as follows.\nSpecification 3.13 (Refiner for objects (R)). A refiner algorithm R for CIC objects takes as input a proof problem \u03a3 and a substitution \u03a6, all assumed to be well formed, and an object o. It fails or returns an object o\u2032, a proof problem \u03a3\u2032 and substitution \u03a6\u2032. It is denoted by:\n(\u03a3, \u03a6) ` o R o\u2032 (\u03a3\u2032, \u03a6\u2032) Precondition:\nWF(\u03a3, \u03a6)\nPostcondition (parametric in 4):\nWF(\u03a3\u2032, \u03a6\u2032) \u2227 \u03a3\u2032,\u03a6\u2032 \u2264 \u03a3,\u03a6 \u2227 Env \u222a (\u03a3\u2032,\u03a6\u2032, o\u2032) `WF \u2227 o\u2032 4 o\nNote that an object can be a block of mutually recursive definitions or declarations, each one characterized by a different type. Thus the R rule does not return a single type, but a new object together with a new metavariable environment \u03a3\u2019 and substitution \u03a6\u2019. When \u03a3\u2032 is not empty, all the metavariables in \u03a3\u2032 correspond to proof obligations to be proved to complete the definition of the object, necessary to convince the system to accept the object definition. This is especially useful for instance in the formalization of category theory where definitions of concrete categories are made from definitions of terms (objects and morphisms) together with proofs that the categorical axioms hold. In such definitions, objects and functors are immediately fully specified, while the proof parts are turned into proof obligations. Spiwack\u2019s Ph.D. thesis [31] discusses this issue at length as a motivation for a complete re-design of the data type for proofs in Coq. The new data type is essentially the one used in this paper and it will be adopted in some forthcoming version of Coq. The old data type, instead, did not take the Curry-Howard isomorphism seriously in the sense that partial proofs were not represented by partial proof terms and the refinement of an object could not open proof obligations. This problem was already partially addressed by Sozeau [29] where he added a new system layer around the refiner to achieve the behavior that our refiner already provides.\n( R \u2212axiom)\n` T F T \u2032 : s\n` axiom c : T R axiom c : T \u2032\n( R \u2212definition)\n` T F T \u2032 : s ` t : T \u2032 R \u21d3 t\u2032\n` definition c : T := t R definition c : T \u2032 := t\u2032\n( R \u2212inductive)\n` \u03a0 \u2212\u2212\u2212\u2192 xl : Ll.Ai F V \u2032i ` V \u2032i .whd \u03a0 \u2212\u2212\u2212\u2192 xl : L \u2032 l.A \u2032 i ` A\u2032i .whd \u03a0 \u2212\u2212\u2212\u2212\u2212\u2192 yri : R \u2032 ri .si\n} i \u2208 {1 . . . n}\n\u2212\u2212\u2212\u2192 xl : L \u2032 l; \u2212\u2212\u2212\u2212\u2192 In : V \u2032 n ` Ti,k\nF T \u2032i,k : si,k\u2212\u2212\u2212\u2192\nxl : L \u2032 l; \u2212\u2212\u2212\u2212\u2192 In : V \u2032 n ` T \u2032i,k .whd \u03a0 \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 zpi,k : Vpi,k .Vi,k \u03a3 \u03a3 \u222a { \u2212\u2212\u2212\u2192 xl : L \u2032 l; \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 yj\u22121 : R\n\u2032 j\u22121 `?j : R\u2032j} j \u2208 {1 . . . ri}\u2212\u2212\u2212\u2192\nxl : L \u2032 l; \u2212\u2212\u2212\u2212\u2192 In : A \u2032 n; \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 zpi,k : Vpi,k ` Vi,k ?\u2261 Ii \u2212\u2192xl \u2212\u2192 ?ri U=\n i \u2208 {1 . . . n} k \u2208 {1 . . .mn}\n` \u03a0\u2212\u2212\u2212\u2192xl : Ll. inductive I1 : A1 := k1,1 : T1,2 | . . . | k1,m1 : T1,m1with . . . with In : An := kn,1 : Tn,1 | . . . | kn,mn : Tn,mn  R \u03a0\u2212\u2212\u2212\u2192xl : L\u2032l. inductive I1 : A\u20321 := k1,1 : T \u20321,2 | . . . | k1,m1 : T \u20321,m1with . . .\nwith In : A \u2032 n := kn,1 : T \u2032 n,1 | . . . | kn,mn : T \u2032n,mn  The loop from 1 to n, ranges over all mutually inductive types of the block using the index i (for inductive). The other loop, from 1 to mn, ranges over the mn constructors of the n-th inductive type using index k (for constructor). Ti,k is the type of the k-th constructor of\nthe i-th inductive. Every inductive type in the block has the same number of homogeneous parameters l of type L\u03b1 for some \u03b1 in 1 . . . l, and ri extra arguments of type R\u03b2 for some \u03b2 in 1 . . . ri. As explained in Section 2, homogeneous arguments are not abstracted explicitly in the types of the constructors, thus their context includes not only the inductive types\u2212\u2192 In but also the homogeneous arguments\n\u2212\u2192xl . Note that in this rule we used In to mean the n-th inductive, in contrast with the rest of the paper where the index n means the number of homogeneous arguments, l here. The complete arity of the inductive types \u2212\u2192 V \u2032 is a closed term. In fact that type is generated in an empty context in the first premise. This makes the context in which Ti,k is processed valid: there is no variable capture when\n\u2212\u2192xl is put before \u2212\u2192 In. Moreover the successful refinement of \u03a0 \u2212\u2212\u2212\u2192 xl : Ll.Ai in the empty context grants that the types of the homogeneous arguments do not depend on the inductive types \u2212\u2192 In. The last three premises just check that the type of each constructor is actually a product targeting the inductive type.\nWhilst being already quite involved, this rule is only partial. It lacks the checks for positivity conditions, that are only implemented by the kernel. Since the kernel of Matita is able to deal with metavariables we can test for these conditions using directly the kernel after the refinement process. Nevertheless, when the inductive type fed to the kernel is partial, the checks cannot be precise: all non positive occurrences will be detected, but nothing will prevent the user from instantiating a missing part with a term containing a non positive occurrence. One could label metavariables in a such a way that the unification algorithm refuses to instantiate them with a term containing non positive occurrences of the inductive type, but our current implementation does not. Anyway, once the definition is completed by the user, another call to the kernel is made, and all non positive occurrences are detected.\nMoreover, the kernel also checks that the sort si,k of the type of every constructor Ti,k is properly contained in the sort of the corresponding inductive si. Finally, one should also check that any occurrence of Ii in the types Ti,k of the constructors is applied to\n\u2212\u2192xl . This test is also omitted since it is performed by the kernel during the test for positivity.\n( R \u2212letrec)\n` \u03a0 \u2212\u2212\u2212\u2212\u2212\u2192 xipi : T i pi .T i pi+1 F T \u2032i : si ` T \u2032i .whd \u03a0 \u2212\u2212\u2212\u2212\u2212\u2212\u2192 xipi : T \u2032i pi .T\n\u2032i pi+1\u2212\u2212\u2212\u2212\u2192\nfn : Tn; \u2212\u2212\u2212\u2212\u2212\u2212\u2192 xipi : T \u2032i pi ` ti : T \u2032i pi+1 R\u21d3 t\u2032i  i \u2208 {1 . . . n} ` ( let rec f1( \u2212\u2212\u2212\u2212\u2212\u2192 x1p1 : T 1 p1) : T 1 p1+1 := t1 and . . .\nand fn( \u2212\u2212\u2212\u2212\u2212\u2192 xnpn :T n pn) : T n pn+1 := tn ) R (\nlet rec f1( \u2212\u2212\u2212\u2212\u2212\u2192 x1p1 :T \u20321 p1) : T \u20321 p1+1 := t \u2032 1 and . . .\nand fn( \u2212\u2212\u2212\u2212\u2212\u2212\u2192 xnpn :T \u2032n pn) : T \u2032n pn+1 := t \u2032 n\n)\nAs for inductive types, this rule is only partial: it lacks the checks for guardedness conditions (termination or productivity tests), that are delegated to the kernel. We omit the rule for co-recursive functions, since it is identical to the one presented above."}, {"heading": "4. Bi-directional refinement", "text": "To obtain a bi-directional implementation of the refiner, we add new rules to the R\u21d3 algorithm. These ad-hoc rules for particular cases must take precedence over the generic ( R\u21d3 \u2212default) rule. The ad-hoc rules are responsible for propagating information from the expected type towards the leaves of the term. The new rule for lambda-abstraction is well known in the literature [24] and it is also the only one implemented in Coq. The rule for let-in statements is given to allow the system infer more concise types. The one for application of constructors is completely novel and it takes advantage of additional knowledge on the constant parameters of an inductive type. It is thus peculiar of the Calculus of (Co)Inductive Constructions. This is also the rule that, according to our experience, mostly affects the behavior of the refiner. It makes it possible to refine many more terms to be refined in frequently occurring situations where, using a mono directional algorithm, more typing information had to be given by hand.\nTheorem 4.1 (Correctness). The new rules given in this section do not alter the correctness of the R\u21d3 algorithm w.r.t. its specification for all admissible 4 relations that include the identity for terms in the internal syntax. In particular, the algorithm is correct when the identity relation is picked for 4.\n( R\u21d3 \u2212lambda)\n\u0393 ` E .whd \u03a0x : E1.E2 \u0393 ` T F T \u2032 : s \u0393 ` T \u2032 ?\u2261 E1 U= \u0393;x : T \u2032 ` t : E2 R\u21d3 t\u2032\n\u0393 ` \u03bbx : T.t : E R \u21d3 \u03bbx : T \u2032.t\u2032\nNote that to type t we push into the context the declared type for x and not its expected type E1. This is to avoid displaying a confusing error message in case t is ill-typed, since the user declared x to have type T , and not E1 (that in principle can be arbitrarily different from T ).\n( R\u21d3 \u2212letin)\n\u0393 ` T F T \u2032 : s \u0393 ` t : T \u2032 R \u21d3 t\u2032 \u0393;x := t\u2032 : T \u2032 ` u : E[t\u2032/x] R \u21d3 u\u2032\n\u0393 ` let (x : T ) := t in u : E R \u21d3 let (x : T \u2032) := t\u2032 in u\u2032\nWhere we denote by [t\u2032/x] the operation of substituting all occurrences of t\u2032 with x. Note that this operation behaves as an identity up to conversion (since x holds the value t\u2032). Nevertheless, it enables the bi-directional type inference algorithm to propagate smaller types towards the leaves and, according to our observation, it leads to more readable inferred typed for sub-terms of u\u2032.\nTheorem 4.2 (Termination). The R\u21d1 algorithm defined by the set of rules presented above with the addition of ( R\u21d3 \u2212letin) and (R \u21d3 \u2212lambda) terminates.\nProof. The two functions terminate because all recursive calls are on smaller terms and because .whd, F and ?\u2261 terminate.\nThe next rule deals with applications of constructors to arguments and it is only triggered when the expected type is an inductive type. In that case the application must be total. In CIC, the types of constructors of inductive types are constrained to have a particular shape. Up to reduction, their type must be of the form \u03a0x1 : F1 . . .\u03a0xn : Fn.I x1 . . . xl tl+1 . . . tm where l is the number of uniform parameters of the inductive type. Therefore the application of a constructor to a list u1 . . . un of arguments has type I u1 . . . ul vl+1 . . . vm for some vs. Reversing the reasoning, once we know that the expected type for the application of a constructor is I u1 . . . ul vl+1 . . . vm we already know that the first l arguments of the application must be equal to u1 . . . ul up to conversion. It is thus possible to propagate them following the bi-directional spirit. This is achieved by the following ( R\u21d3 \u2212appl\u2212k) that calls a new function denoted by Et that consumes the first l arguments unifying them with the expected values. The remaining arguments are consumed as in the generic case of applications.\n( R\u21d3 \u2212appl\u2212k)\n\u0393 ` E .whd Il \u2212\u2192vl \u2212\u2192wn \u0393 ` \u2212\u2192tm ?\u2261 \u2212\u2192vl Et \u2212\u2192 t\u2032l |N \u2212\u2192uo (k : T ) \u2208 Env \u0393 ` T .whd \u2212\u2212\u2212\u2212\u2212\u2192 \u03a0xl : Sl.T \u2032 \u0393 ` k \u2212\u2192 t\u2032l : T \u2032[ \u2212\u2212\u2192 xl/t \u2032 l] |N \u2212\u2192uo ET r : R \u0393 ` R ?\u2261 Il \u2212\u2192vl \u2212\u2192wn U=\n\u0393 ` k \u2212\u2192tm : E R\u21d3 r\nNote that if E does not reduce to an applied inductive type, the implemented algorithm\nfalls back to the standard rule for application. The rule presented only propagates information related to uniform parameters. Uniform parameters must be used consistently in every occurrence of the inductive type in the type of its constructors and not only in the occurrence at the end of the product spine (i.e. in the return type of the constructors). The variant of CIC implemented in Coq also considers non uniform parameters. Non uniform parameters must be used consistently only in the return type of the constructors and not in the premises. We do not consider non uniform parameters in this paper, but we remark that the ( R\u21d3 \u2212appl\u2212k) rule is also valid when the first l parameters are non uniform.\nSpecification 4.3 (Eat arguments (Et)). The Et algorithm takes a list of arguments for an application and a list of terms, and it verifies that an initial prefix of the arguments is equal to the given terms, up to unification. It takes as input a proof problem \u03a3, a substitution \u03a6 and a context \u0393, all assumed to be well formed, the list of arguments and the list of terms. It fails or it returns the list of arguments split into the consumed ones and the ones yet to be considered. It is denoted by:\n(\u03a3, \u03a6) \u0393 ` t1 . . . tm ?\u2261 v1 . . . vn Et t\u20321 . . . t \u2032 n |N u1 . . . ul (\u03a3 \u2032, \u03a6\u2032)\nPrecondition: WF(\u03a3, \u03a6, \u0393) \u2227 \u03a3, \u03a6, \u0393 ` vi : Ti i \u2208 {1 . . . n}\nPostcondition (parametric in 4):\nWF(\u03a3\u2032, \u03a6\u2032) \u2227 \u03a3\u2032,\u03a6\u2032 \u2264 \u03a3,\u03a6 \u2227 \u03a3\u2032, \u03a6\u2032, \u0393 ` t\u2032i \u2193 vi i \u2208 {1 . . . n} \u2227 t\u20321 . . . t \u2032 n u1 . . . ul 4 t1 . . . tm\n(Et\u2212empty) \u0393 ` \u2212\u2192ul ?\u2261 Et |N \u2212\u2192ul\n(Et\u2212base)\n\u0393 ` t1 R\u21d1 t\u20321 : T1 \u0393 ` t\u20321 ?\u2261 v1 U= \u0393 ` \u2212\u2192tm ?\u2261 \u2212\u2192vn Et \u2212\u2192 t\u2032n |N \u2212\u2192ul\n\u0393 ` t1 \u2212\u2192 tm ?\u2261 v1 \u2212\u2192vn Et t\u20321 \u2212\u2192 t\u2032n |N \u2212\u2192ul\nTheorem 4.4 (Termination). The R\u21d1 algorithm defined by the set of rules presented above with the addition of ( R\u21d3 \u2212appl\u2212 k), (Et\u2212empty) and (Et\u2212base) terminates.\nProof. The rule ( R\u21d3 \u2212appl\u2212k) terminates because ?\u2261 and .whd terminate and ET is called on smaller terms. Moreover the term T \u2032[ \u2212\u2212\u2192 xl/t\n\u2032 l] is a well typed type because Et grants that\u2212\u2192 t\u2032l are convertible with \u2212\u2192vl and thus have the same types. Also notes that all the calls to R\u21d1 made by Et are on sub-terms of the input of ( R\u21d3 \u2212appl\u2212 k).\nWe thus show that Et terminates by induction on the second list of arguments (the one between\n?\u2261 and Et ). Rule (Et\u2212empty) is the base case and clearly terminates. Rule (Et\u2212base) terminates because R\u21d1 and\n?\u2261 terminate and because the recursive call terminates by induction hypothesis.\n4.1. Remarks. We present here a simple but frequently occurring case that explains why the bi-directional rule for application of constructors enables to refine many more terms w.r.t. the mono-directional algorithm. A more complicated example was already discussed in the introduction and deals with dependent data types to represent the syntax of languages with binders.\nConsider the inductive type used to define the existential quantification.\n\u03a0T : Type.\u03a0P : T \u2192 Prop. inductive Ex : Prop := Ex intro : \u03a0x : T.P x\u2192 Ex T P\nNote that T and P are homogeneous arguments.\nExample 4.5 (Use of ( R\u21d3 \u2212appl\u2212k)). Consider the conjecture \u2203x : N.x > 0, encoded in CIC as Ex N (\u03bbx : N.x > 0)\nGiven a context \u0393 containing the assumption p stating that 2 > 0, one may want to use the following proof term to prove the conjecture\nt = Ex intro ?T ?P ?x p\nA mono directional refiner encounters a hard unification problem involving the type of p, 2 > 0, and its expected type.\n{` ?T : Type; ` ?P : ?T \u2192 Prop; ` ?x : ?T }, \u2205,\u0393 ` 2 > 0 ?\u2261 ?P ?x\nClearly, the desired solution is to instantiate ?x with 2 and ?P with (\u03bbx : N.x > 0) obtaining a proof term of type \u2203x : N.x > 0. Unfortunately, this is not the only possible solution. An undesired solution, but as reasonable as the correct one, is\n\u03a6 = {?T := N; ?x := 0; ?P := \u03bbx : N.2 > x} under which the resulting proof term \u03a6(t) has type \u2203x : N.2 > x, that is not the expected one. Why one should prefer the former to the latter is also unclear from a computer perspective. Thanks to the polymorphism of CIC, another undesired and less expected solution is also possible: \u03a6\u2032 = {?T := Prop; ?x := 2 > 0; ?P := \u03bbx.x} The proof term \u03a6\u2032(t) would then be of type \u2203x : Prop.x, again different from the desired one.\nUsing the expected type, ?T and ?P are easily inferred looking at the homogeneous argument of the expected type. \u03a6\u2032\u2032 = {?T := N; ?P := \u03bbx : N.x > 0} Then inferring ?x is easy. Applying \u03a6\n\u2032\u2032 to the right hand side of the unification problem we obtain:\n2 > 0 ?\u2261 (\u03bbx : N.x > 0) ?x\nThen it is sufficient to reduce the right hand side and then perform a simple, first order, unification algorithm to obtain the desired instantiation for ?x.\nThe rule ( R\u21d3 \u2212appl\u2212k) is only fired when the term to be refined is syntactically the application of a constructor. Because of conversion, the term under analysis could be reducible to an application of a constructor. However, we cannot reduce the term first to try to match the rule. The first motivation is that terms in the external syntax may contain placeholders (see Section 5) and may not be well typed. Duplication of placeholders and substitution into them is not admitted. Moreover, reducing an ill typed term may lead to divergence. Secondly, reduction of proof terms correspond to cut elimination that is known to yield proofs terms of arbitrary size."}, {"heading": "5. Extension to placeholders", "text": "We consider here the first extension of our external syntax, obtained introducing linear placeholders for missing terms and for vectors of missing terms of unknown length. The latter are only accepted in argument position, even if we will enforce this only in the refinement algorithm and not in the syntax. The new syntax is obtained extending the one given in Table 1 with the new productions of Table 2. Placeholders are also called implicit arguments in the literature, but that terminology is ambiguous since it is also used for arguments that can be entirely omitted in the concrete syntax.\nIn a concrete implementation, user defined notations are used to further enlarge the external syntax. User defined notations behave as macros; macro expansion gives back a term in the external syntax we consider here. In particular, thanks to user defined notations,\nit is possible to entirely omit the typing information in binders, like in calculi typed a\u0300 la Curry. Omitted types are turned into placeholders during the macro expansion phase. Implicit arguments can also be simulated by defining notations that insert into applications a fixed number of placeholders or vectors of placeholders in appropriate positions.\nA placeholder ? differs from a metavariable ?i in the fact that it has no sequent associated to it. The intended associated sequent allows in ? occurrences of all variables in the context of ?. Moreover, the type of ? is meant to be the one determined by the context. This information is made explicit by the refinement algorithm that turns each placeholder into a corresponding metavariable.\nPlaceholders occur only linearly in the term (i.e. every occurrence of a placeholder is free to be instantiated with a different term). Non linear placeholders are not allowed since two occurrences could be in contexts that bind different set of variables and instantiation with terms that live in one context would make no sense in the other one.\nSimilarly, substitution is not allowed on placeholders since a placeholder occurrence does not have a corresponding explicit substitution.\nFor both previous reasons, reduction is not allowed on terms in the external syntax that contain placeholders: the reduction, conversion and unification judgements only make sense on refined terms.\nIntuitively, a vector of placeholders can be instantiated by the refiner with zero or more metavariables. In our algorithm we adopt a lazy semantics: vectors of placeholders can only be used in argument position and a vector is expanded to the minimal number of metavariables that make the application well typed. Bi-directionality, i.e. the knowledge about the expected type for the application, is required for the lazy semantics. Indeed, without the expected type, an expansion could produce a locally well typed application whose inferred type will not match later on with the expected one.\nWe extend the R\u21d1 , R\u21d3 , ET and Et algorithms with new rules for single placeholders and for vectors of placeholders.\nTheorem 5.1 (Correctness). The C , F , R\u21d1 , R\u21d3 , ET , and Et algorithms extended with the set of rules presented in this section obey their specification for all admissible 4 that include the 4\u2032 relation defined as follows: t\u2032 4\u2032 t when t\u2032 is obtained from t by replacing single placeholders with terms and vectors of placeholders with vectors of terms. In particular, the algorithms are correct w.r.t. 4\u2032.\nProof. Every admissible 4 that includes 4\u2032 also includes the identity. Thus we do not need to re-establish the result on the rules given in the previous sections. Correctness of the new rules given in this section is established by rule inspection.\n( R\u21d1 \u2212placeholder)\n\u03a3 \u03a3 \u222a {\u0393 `?l : Type> , \u0393 `?k : ?l , \u0393 `?j : ?k}\n\u0393 `? R \u21d1 ?j : ?k\n( R\u21d3 \u2212placeholder)\n\u03a3 \u03a3 \u222a {\u0393 `?k : T}\n\u0393 `? : T R \u21d3 ?k\n(ET\u2212 _ placeholder \u22120) \u0393 ` t\n\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) : T |N \u2212\u2192un ET v : V\n\u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) : T |N _ ? \u2212\u2192un ET v : V\n(ET\u2212 _ placeholder +1)\n\u0393 ` T .whd \u03a0x1 : U1.T1 \u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) : T |N ? _ ? \u2212\u2192un ET v : V\n\u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) : T |N _ ? \u2212\u2192un ET v : V\nThe rule (ET\u2212 _ placeholder \u22120) is meant to take precedence over (ET\u2212 _ placeholder +1).\nThe second is applied when the first one fails (local backtracking).\nTheorem 5.2 (Termination). The R\u21d1 algorithm defined by the set of rules presented above with the addition of ( R\u21d1 \u2212placeholder), (R \u21d3 \u2212placeholder), (ET\u2212 _ placeholder \u22120) and (ET\u2212 _ placeholder +1) terminates.\nProof. Rules ( R\u21d1 \u2212placeholder) and (R \u21d3 \u2212placeholder) terminate. The proof that ET terminates is, as before, by induction on the list of arguments that follow |N. The rule (ET\u2212 _ placeholder \u22120) terminates by induction hypothesis. The rule (ET\u2212 _\nplaceholder +1) deserves an accurate treatment. The check over T , asking it to be a product, is to avoid divergence. Since the input T is a well typed type, also T1 is, and thus it admits a normal form T \u20321 in which x may occur. The recursive call does necessarily trigger the rule (ET\u2212product) that will substitute a metavariable ?j for x in T1. Thanks to the reduction rules of CIC, reported in the appendix, substituting a variable for a metavariable declared in \u03a3 (and not in \u03a6) does not change the normal form, meaning that T \u20321[x/?j] .whd T \u2032 1[x/?j]. Thus the rule (ET\u2212 _\nplaceholder +1) can be applied only a finite number of times, and the number of products in T is an upper bound.\nThe next two rules for the Et judgment follow the same schema of the ones for ET .\n(Et\u2212 _ placeholder \u22120) \u0393 ` \u2212\u2192tm ?\u2261 \u2212\u2192vn Et \u2212\u2192 t\u2032n |N \u2212\u2192ul\n\u0393 ` _ ? \u2212\u2192 tm ?\u2261 \u2212\u2192vn Et \u2212\u2192 t\u2032n |N \u2212\u2192ul\n(Et\u2212 _ placeholder +1) \u0393 `?\n_ ? \u2212\u2192 tm ?\u2261 \u2212\u2192vn Et \u2212\u2192 t\u2032n |N \u2212\u2192ul\n\u0393 ` _ ? \u2212\u2192 tm ?\u2261 \u2212\u2192vn Et \u2212\u2192 t\u2032n |N \u2212\u2192ul\nTheorem 5.3 (Termination). The R\u21d1 algorithm defined by the set of rules presented above with the addition of (Et\u2212 _ placeholder \u22120) and (Et\u2212 _ placeholder +1) terminates.\nProof. The rule (Et\u2212 _\nplaceholder \u22120) makes a recursive call on the same list of arguments \u2212\u2192vn but consumes a _ ? , and no other rule of the refiner adds one, so it can be repeated only a finite number of times. The recursive call in the rule (Et\u2212 _\nplaceholder +1) can trigger only rules (Et\u2212empty) and (Et\u2212base). The former terminates immediately, the latter will do a recursive call consuming one argument in \u2212\u2192vn, and thus terminates.\nNote that inlining the latter would lead to a rule whose termination is trivial to see, but we preferred to present the algorithm in a more modular way.\nExample 5.4 (Vector of placeholders). Assume a theorem \u03c4 \u2208 Env shows that \u2200x : N.P x\u2192 Q x. The proof context may contain a natural number y and optionally a proof H that y validates P . Different proofs or proof styles may use the same theorem \u03c4 in different ways. For example, one may want to perform forward reasoning, and tell the system to assume (Q y) providing the following proof for it\ny : N;H : P y ` \u03c4 H Nevertheless, sometimes H is not known, and the user may want to tell the system he has intention to use the theorem \u03c4 on y, and prove (P y) later.\ny : N ` \u03c4 y While the latter application is well typed, the first is not, since the first argument of \u03c4 must be of type N. Nevertheless, the type of H depends on y, thus the term (\u03c4 ? H) would refine to the well typed term (\u03c4 y H) of type (Q y).\nThe vector of placeholders enables the system to accept both terms originally written by\nthe user. In the first case (\u03c4 _ ? H) would expand to (\u03c4 ? H) thanks to (Et\u2212 _ placeholder +1), and refine to (\u03c4 y H). In the second case (\u03c4 _ ? y) would refine to (\u03c4 y) thanks to (Et\u2212 _ placeholder \u22120). This suggests defining (\u03c4 _ ? ) as a notation for the theorem \u03c4 , obtaining a cheap implementation of what other systems call prenex implicit arguments: the first n arguments of an application whose head has a dependent type like \u03a0 \u2212\u2212\u2212\u2212\u2192 xn : Tn.\u03a0 \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 ym : P (\n\u2212\u2192xn).T can be omitted, and are inferred thanks to the dependencies in the types of the m following arguments. As a bonus, in case the user wants to pass one of the implicit arguments there is no need to temporarily disable the mechanism, since the expansion of _ ? is computed on the fly and automatically adapts to its context."}, {"heading": "6. Coercions", "text": "Coercions are explicit type casts. While the literature [20] considers them mostly as a device to mimic sub-typing in a calculus lacking it, they have other interesting applications. The refiner of Matita inserts coercions in three locations: \u2022 around the argument of an application \u2022 around the head of an application \u2022 around the type of an abstraction The first case is the most common one, and is the one that can easily be explained in terms of sub-typing. For example, if one applies an operation defined over integers Z to an argument lying in the type of natural numbers N, the system injects the argument into the\nright type by means of the obvious, user declared, cast function mapping naturals into the non negative fragment of Z.\nThe second case is handy in two situations. First when the head of the application is implicit in the standard notation, like in 3x where the intended head constant is the multiplication but in the input it happens to be 3. The second is when the head constant has a non ambiguous interpretation as a function, but is not. For example a set may act as its characteristic function.\nThe last case is recurrent when algebraic structures are encoded as dependently typed records [25] embedding the type (or carrier) for the elements together with the operations and properties defining the structure. In that case, one may want to state a theorem quantifying over a structure G, say a group, and some elements in that group. However the statement \u2200G : Group.\u2200x, y : G.P (x, y) is ill-typed since G is a term (of type Group) but is used as a type for x and y. The intended meaning is clear: x and y lie in the carrier type of G. The system can thus insert around G the projection for the carrier component of the Group record.\nDefinition 6.1 (Coercion set (\u2206)). A coercion set \u2206 is a set of pairs (c, k) where c is a constant in Env and k is a natural number smaller than the arity of c (i.e. k points to a possible argument of c)\nIn the literature the coercion set is usually represented as a graph. Given a coercion (c, k) such that (c : \u03a0x1 : T1 . . .\u03a0xk : Tk . . .\u03a0xn : Tn.T ) \u2208 Env, Tk and T are nodes in the graph, and c is an edge from Tk to T . Most coercion implementation, like the one of Coq, Lego and Plastic, assume \u2206 to be a graph validating a property called coherence. This property states that \u2206 is an acyclic graph with at most one path linking every pair of nodes. This property enables to employ a straightforward algorithm to look for a sequence of coercions linking two non adjacent nodes in the graph.\nIn Matita, for various reasons detailed in [34], \u2206 is not a graph, but a set of arcs for the transitive closure of the graph. Every time a coercion c is declared by the user, and thus added to \u2206, the following set of automatically generated composite coercions is also added to \u2206. {ci \u25e6 c \u25e6 cj |ci \u2208 \u2206 \u2227 cj \u2208 \u2206} \u222a {c \u25e6 cj |cj \u2208 \u2206} \u222a {ci \u25e6 c|ci \u2208 \u2206} Of course the \u25e6 operator here is partial, and only well typed composite coercions are actually considered. This design choice enables the coercion lookup operation to be single step, since the set is already transitively closed. Moreover, since composite coercions are defined constants in Env, the term resulting after a cast is smaller if compared with the one obtained inserting the corresponding chain of user declared coercions. Last, allowing k to differ from n is a peculiarity of Matita. When k 6= n the application of the coercion creates new uninstantiated metavariables that correspond to proof obligations. This will be detailed later on.\nThe last detail worth mentioning is that, all systems known to the authors with the notable exception of Plastic [9], adopt some approximated representation for the nodes in the coercion graph, usually the name of the head constant of the source and target types. This results in a faster lookup in the coercion graph, but the coherence check is also strengthened. In particular, in a calculus with dependent types, different, but similar, coercions may not be allowed to be declared. Matita drops the coherence check, or better changes it into a warning, and enables the user to attach to coercions a priority: coercions from and to the same approximation of types are all tried according to user defined priorities.\nSpecification 6.2 (Coercion lookup ( \u2212 \u2206)). Given a context \u0393, substitution \u03a6 and proof problem \u03a3, all assumed to be well formed, two types T1 and T2, this function returns an explicit cast c ?1 . . . ?k . . . ?n for the metavariable of index k and its type T\n\u2032. It is denoted by:\n(\u03a3, \u03a6) \u0393 ` T1 T2 \u2206 k, c ?1 . . . ?k . . . ?n : T \u2032 (\u03a3\u2032,\u03a6)\nPrecondition (parametric in \u2248): WF(\u03a3, \u03a6, \u0393) \u2227 (c, k) \u2208 \u2206 \u2227 (c : \u03a0x1 : T1 . . .\u03a0xk : Tk . . .\u03a0xn : Tn.T ) \u2208 Env \u2227\nTk \u2248 T1 \u2227 T \u2248 T2 Postcondition:\nWF(\u03a3\u2032) \u2227 \u03a3\u2032, \u03a6, \u0393 ` c ?1 . . . ?k . . . ?n : T \u2032\nWe denoted by \u2248 the approximated comparison test used to select from \u2206 a coercion c from T1 to T2. A proper definition of \u2248 is not relevant for the present paper, but we can anyway say that Matita compares the first order skeleton of types obtained by dropping bound variables, metavariables and higher order terms, and that this skeleton can be made less precise on user request. We will give an account of this facility in the example that will follow.\nThe new metavariables ?1, . . . , ?n generated by the lookup operation are all declared in the new proof problem \u03a3\u2032. The number of metavariables to which c is applied to is defined when the coercion is declared and may be less than the arity of c. In the latter case T is a product and the coercion casts its k-th argument to be a function. The position k of the casted argument is user defined as well. The coerced term has then to be later unified with ?k.\nTheorem 6.3 (Correctness). The C , F , R\u21d1 , R\u21d3 , ET , and Et algorithms extended with the set of rules presented in this section obey their specification where 4\u2032\u2032 is the following admissible order relation: t\u2032 4\u2032\u2032 t when t\u2032 is obtained from t by replacing single placeholders with terms, vectors of placeholders with vectors of terms, and terms uk with terms convertible to (c u1 . . . uk . . . un) where c is a coercion declared in \u2206 for its k th argument.\nProof. We do not need to re-establish correctness for the rules given in the previous sections since 4\u2032\u2032 is admissible and includes 4\u2032. Correctness of the new rules given in this section is established by rule inspection as usual.\nIn the following rule the coercion c is applied to its argument t unifying it with ?k. The returned term t\u2032 can still contains metavariables: ?1 . . .?k\u22121 may appear in the type of ?k, thus unifying ?k with t may instantiate them\n6, but ?k+1 . . .?n do not appear in the type of ?1 . . .?k, and thus cannot be all instantiated. This rule is applied as a fall back in case C \u2212ok fails.\n6In the case of dependent types the unification of the types is a necessary condition for the unification of the two terms, as claimed by Strecker [32].\n( C \u2212coercion)\n\u0393 ` T1 T2 \u2206 k, c \u2212\u2192 ?m ?k \u2212\u2192 ?n : T \u2032 2 \u0393 `?k ?\u2261 t U= \u0393 ` T \u20322 ?\u2261 T2 U\n\u0393 ` t : T1 ?\u2261 T2 C c \u2212\u2192 ?m ?k \u2212\u2192 ?n\nCorrectness of ( C \u2212coercion). Since ?k is unified with t in the second premise of the rule, by definition of unification we have \u03a3, \u03a6, \u0393 `?k \u2193 t, and thus c \u2212\u2192 ?m ?k \u2212\u2192 ?n 4\u2032\u2032 t. Moreover, the postconditions of coercion lookup \u2206 grant that c \u2212\u2192 ?m ?k \u2212\u2192 ?n has type T \u2032 2 that is later unified with T2. Thus the postconditions of the unification algorithm allow us to prove that c \u2212\u2192 ?m ?k \u2212\u2192 ?n has a type convertible with T2.\nThe C \u2212coercion rule automatically takes care of the insertion of coercions around\narguments of an application and around the types of an abstraction.\nThe following extension to ET take cares of insertion around the head of an application.\n(ET\u2212coercion)\n\u03a3 \u03a3 \u222a {\u0393 `?1\u2032 : Type> , \u0393 `?1 : ?1\u2032} \u03a3 \u03a3 \u222a {\u0393;x1 :?1 `?2\u2032 : Type> , \u0393;x1 :?1 `?2 : ?2\u2032} \u0393 ` t \u2212\u2192vr : T ?\u2261 \u03a0x :?1.?2 C c \u2212\u2192ws \u0393 ` wi : Wi i \u2208 {1 . . . s} \u0393 ` c \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xs := ws : Ws) : \u03a0x :?1.?2 |N u1 \u2212\u2192un ET v : V\n\u0393 ` t \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 (xr := vr : Tr) : T |N u1 \u2212\u2192un ET v : V\nCorrectness of ET\u2212coercion. Its correctness follows trivially from the correctness of ( C \u2212coercion).\nTheorem 6.4 (Termination). The R\u21d1 algorithm defined by the set of rules presented above with the addition of ( C \u2212coercion) and (ET\u2212coercion) terminates.\nProof. Rule ( C \u2212coercion) clearly terminates. The rule (ET\u2212coercion) issues a recursive call to ET without consuming u1, but the only rule that can be triggered is (ET\u2212product), that will immediately consume u1.\nInlining (ET\u2212product) would result in a rule that consumes some input and thus clearly terminates, but would be way less readable.\n6.1. Implementation remarks. Since we allow coercion arguments not to be inferred automatically (like proof obligations) their type may depend on the coerced term (e.g. the proof that the coerced integer is greater than zero has an instance of the coerced integer in its type, and the corresponding metavariable will have index greater than k).\nExample 6.5 (Coercion with side conditions). Consider the following coercion set, declaring the coercion v to nel from vectors to non empty lists.\n\u2206 = {(v to nel, 3)} The environment holds the following type for the coercion:\n(v to nel : \u03a0A : Type.\u03a0n : N.\u03a0v : Vect A n.n > 0\u2192 \u2203l : List A, length l > 0) \u2208 Env Now consider the term t = (Vcons N 0 (Vnil N) 2) and the following coercion problem:\n\u0393 ` Vect N (0 + 1) (\u2203l : List N, length l > 0) \u2206 3, v to nel ?1 ?2 ?3 ?4 : (\u2203l : List ?1, length l > 0) \u0393 `?3 ?\u2261 t U= \u0393 ` (\u2203l : List ?1, length l > 0) ?\u2261 (\u2203l : List N, length l > 0) U\n\u0393 ` t : Vect N (0 + 1) ?\u2261 (\u2203l : List N, length l > 0) C v to nel ?1 ?2 ?3 ?4 where the final proof problem and substitutions are:\n\u03a3 = {\u0393 `?4 : ?2 > 0} \u03a6 = {\u0393 `?1 := N : Type, \u0393 `?2 := 0 + 1 : N, \u0393 `?3 := t : Vect N (0 + 1)}\nNote that ?4 is still in \u03a3, thus it represent a proof obligation the user will be asked to solve. Also note that the following coercion could be declared as well, with a higher precedence. It is useful since it does not open a side condition when the type of the coerced vector is explicit enough to make the proof that it is not empty constant (not depending on \u0393 nor on the vector but just on its type) and thus embeddable in the body of the coercion.\n(nev to nel, \u03a0A : Type.\u03a0n : N.\u03a0v : Vect A (n+ 1).\u2203l : List A, length l > 0) \u2208 Env The system would thus try nev to nel first, and fall back to v to nel whenever needed.\nAlso note that this last coercion can be indexed as a cast from (Vect ( + 1)) to (\u2203l : List , length l > 0) or in a less precise way. For example the approximation of the source type could be relaxed to (Vect ). This will force the system to try to apply this coercion even if the casted term is a vector whose length is not explicitly mentioning +1, but is something that unifies with ?j + 1. For example the length 1 \u2217 2 would unify, since its normal form is (0 + 1) + 1."}, {"heading": "7. Comparison with related work on Type Inference", "text": "Type inference is a very widely studied field of computer science. Nevertheless to the authors\u2019 knowledge there is no precise account of a type inference algorithm for the full CIC calculus in the literature.\nThe extension to the typing algorithm of CIC with explicit casts in [28] follows the same spirit of our refinement algorithm for raw terms. However the work by Saibi does not handle placeholders nor metavariables, and the presentation is in fact quite distant from the actual implementation in the Coq interactive prover.\nAnother work in topic is [22] where Norell describes the bi-directional type inference algorithm implemented in the Agda interactive prover. He presents the rules for a core dependently typed calculus enriched with dependent pairs. Unfortunately he omits the rules for its extension with inductive types. It is thus hard to tell if Agda exploits the type expected by the context to type check inductive constructors as in rule ( R\u21d3 \u2212appl\u2212k). Agda does not provide an explicit _ ? placeholder but uses the expected type to know when it is necessary to pad an application with meta variables in order to reduce the arity of its type. In our setting this is equivalent to the following transformation: every application (f \u2212\u2192a ) is turned into (f \u2212\u2192a _ ? ) whenever its expected type is known (i.e. not a metavariable).\nOne aspect that allows for a direct comparison with Coq and Agda is the handling of implicit arguments. In both Agda and Coq, abstractions corresponding to arguments the user can freely omit are statically labelled as such. The systems automatically generate fresh metavariables as arguments to these binders and the type inference algorithm eventually instantiates them. Both systems give the user the possibility to locally override the implicit arguments mechanism. In Coq the user can prefix the name of a constant with the @ symbol, while in Agda the user can mark actual arguments as implicit enclosing them in curly braces. This escaping mechanism is required because many lemmas admit multiple and incompatible lists of implicit arguments. As an example, consider a transitivity lemma eqt : \u2200x, y, z.x = y \u2192 y = z \u2192 x = z. When used in a forward proof step the user is likely to pass as arguments a proof p that a = b and a proof q that b = c like in (eqt p q) to put in his context the additional fact a = c. In that case values for x, y and z are determined by the types of p and q. On the contrary if the lemma is used in backward proof step to prove that a = c, no value for y can be inferred, thus the user is likely to use the lemma as in (eqt b) and expect the system to open two new goals: a = b and b = c. The two different uses of eqt make it impossible to statically attach to it a single list of implicit arguments and at the same time to never resort to an escape mechanism to temporarily forget that list. In Matita the user can simply use the _ ? placeholder, thus no escaping mechanism is required. In fact the type inference algorithm described in this paper lets the user write (eqt _ ? p q) in the first case as well as (eqt _ ? c) in the second one.7\nThe lack of a complete and formal study of type inference for raw CIC terms is probably due to the many peculiarities of the CIC type system, in particular inductive and dependent types, explicit polymorphism and the fact that type comparison is not structural, but up to computational equivalence. We thus try to position our work with respect to some of the main approaches adopted by type inference algorithms designed for programming languages.\n7.1. Greedy versus delayed constraint solving. The most notable example of type inference algorithm based on constraint solving is the one adopted for the Agda system [22]. Agda is based on a dependently typed programming language quite similar to CIC, but is designed for programming and not for writing proofs. The type inference algorithm collects constraints and checks for their satisfiability. Nevertheless, their solution is not recorded in the terms. This enables the user to remove an arbitrary part of an already type checked\n7A trailing _ ? is automatically added to any term used in backward proof step.\nterm and have the typing of its context not influenced by the term just removed. While this \u201ccompositionality\u201d property is desirable for programming in a language with dependent types, it is not vital for proof systems, where one seldom edits by hand type checked terms.\nA strong characteristic of constraint based type inference is precise error reporting, as described in [33]. Even if it the heuristics adopted in Matita [27] to discard spurious error reports are slightly more complex than the ones proposed by Stuckey, we believe that they provide a similar precision.\nGreedy algorithms [14], like the one presented in this paper, are characterized by a very predictable behavior, at the cost of being forced to take early decisions leading to the rejection of some possibly well typed terms. Also remember that unification has to take computation into account, and user provided functions are known to be total only if they are well typed. Thus the resolution of type constraints cannot be delayed for long. According to our experience, predictability compensates for the extra type annotations the user is sometimes required to produce to drive the greedy algorithm towards a solution.\n7.2. Unification based versus local constraint solving. Many algorithms to infer a polymorphic type for a program prefer to avoid the use of unification [24] since unification variables may represent type constraints coming from distant, loosely related, sub-terms. Moreover a bi-directional approach pushes the type constraints of the context towards subterms, making it effectively possible to drop unification altogether. These approaches also scaled up to types with some sort of dependency over terms, as in [15].\nInteractive provers based on type theory are for (good and) historical reasons based on the two twin approaches. A small kernel based on decision procedures type checks (placeholder free) terms, and a refiner based on heuristics deals with terms with holes performing type inference. Since the kernel is the key component of the system, the one that must be trusted, the language is designed to allow the type checking algorithm to be as simple as possible. Explicit polymorphism makes type checking CIC terms decidable while allowing the same degree of polymorphism as F\u03c9. These explicit type annotations are usually left implicit by the user and represent long-distance constraints. In this context unification seems to be a necessary device. Moreover, the most characterizing feature of CIC is that types are compared taking computation into account, and that types can contain terms, in particular functions applications. Thus the kernel is equipped with a quite elaborate machinery to compute recursive functions and unfold definitions. Type inference has to provide a similar machinery, and possibly extend it to handle types containing metavariables. This extension is commonly named higher order unification, and it is a really critical component of an interactive prover. Recent important developments [16] heavily rely on a user-extensible unification algorithm [5], using it as a predictable form of Prolog-like inference engine. In other words, unification can be employed to infer terms (content) while type inference is employed to infer types and type annotations in the case of explicit polymorphism. For these many reasons, we believe that developing type inference on top of unification is a sound decision probably necessary to scale to a rich type system like CIC."}, {"heading": "8. Conclusion", "text": "In this paper we studied the design of an effective refinement algorithm for the Calculus of (Co)Inductive Constructions. Its effectiveness has been validated in all the formalizations carried on using the Matita interactive theorem prover [11, 1, 2, 3], whose refiner is based\non the algorithm described in this paper. Once again we stress that the refiner component, while not being critical for the correctness of the prover, is the user\u2019s main interlocutor, and is thus critical for the overall user\u2019s experience.\nThis algorithm is also the result of the complete rewrite the Matita ITP underwent in the last couple of years. The refiner algorithm described in this paper amounts to approximatively 1600 lines of OCaml code, calling the higher order unification algorithm that amounts to a bit less than 1900 lines. To give a term of comparison to the reader, the kernel of Matita, written by the same authors, amounts to 1500 lines of data structures definitions and basic operations on them, 550 lines of conversion algorithm and 1400 of type checking. More than 300 lines of the type checking algorithm are reused by the refiner for checking inductive types positivity conditions and recursive or co-recursive functions termination or productivity.\nOn top of this refinement algorithm all primitive proof commands have been reimplemented. In the old implementation they were not taking full advantage of the refiner, partially for historical reasons, partially because it was lacking support for placeholder vectors and bi-directionality was not always exploited. The size of the code is now 48.9% of what it used to be in the former implementation. In particular, it became possible to implement many proof commands as simple \u201cnotations\u201d for lambda-terms in external syntax.\nA particularity of this work is that the presented algorithm deals with completely raw terms, containing untyped placeholders, whose only precondition is to be syntactically well formed. In addition it also supports a very general form of coercive sub-typing, where inserting the explicit cast may leave uninstantiated metavariables to be later filled by the user. This eased the implementation of subset coercions in the style of [29], but that topic falls outside the scope of the present paper and is thus not discussed.\nThe algorithm could be enhanced adding more rules, capable of propagating more typing information. For instance, a specific type forcing rule for \u03b2-redexes (suggested by a referee) could be in the form\n( R\u21d3 \u2212beta)\n\u0393 ` U F U \u2032 : s \u0393 ` u : U \u2032 R \u21d3 u\u2032 \u0393;x : U \u2032 ` t : E[u\u2032/x] R \u21d3 t\u2032\n\u0393 ` (\u03bbx : U.t) u : E R \u21d3 (\u03bbx : U \u2032.t\u2032) u\u2032\nenabling the system to propagate the expected type to the abstraction (compare this rule with (R\u21d3\u2212letin)). In practice the advantage of this rule is limited, since it is quite infrequent for a user to write \u03b2-redexes. A type forcing rule for pattern matching based on the same principles, propagating the expected type to the return type of the match, could be of greater value, since this construct is more likely to come from the user input. We will consider adding such rules in a future implementation.\nThe refinement algorithm we presented already validates many desired properties, like correctness and termination. Nevertheless we did not even state the relative completeness theorem. In a simpler framework, admitting most general unifiers, one could have stated that given an oracle for unification, the algorithm outputs a well typed refinement every time it is possible and that any other refinement is less general than the produced one. Unluckily CIC is higher order and does not admit most general unifiers. To state the relative completeness theorem one has to make the oracle aware of the whole refinement\nprocedure and the oracle has to guess a unifier (or all of them) such that the remaining refinement steps succeed. This makes the theorem way less interesting. Alternatively one would have to add backtracking to compensate for errors made by the oracle, and make the algorithm distant from the implemented one, that is essentially greedy and backtracking free.\nThe algorithm presented in the paper is clearly not relatively complete. For example, the rules given in Section 3 do not accept the term f c where c : N and f : match ?1 in N return \u03bbx.Type [O \u21d2 N | S (x : N) \u21d2 N \u2192 N]. The term is however refineable, for instance by instantiating ?1 with S O. To obtain a relatively complete algorithm, we could add additional rules based on the invocation of the unifier on difficult problems. For instance, for the example just shown it would be sufficient to unify N \u2192?2 with match ?1 in N return \u03bbx.Type [O \u21d2 N | S (x : N)\u21d2 N\u2192 N] for a fresh metavariable ?2. However, we know in advance that the efficient but incomplete algorithm implemented in Matita always fails on such difficult unification problems. The same holds for the similar algorithm implemented in Coq. Therefore a relatively complete version of the algorithm would remain only of theoretical interest.\nThe following weaker theorem, which establishes completeness on well typed terms only, can be easily proved by recursion over the proof tree and by inspection of all cases under the hypothesis that every pair of convertible terms are unified by the identity metavariable instantiation.\nTheorem 8.1 (Completeness for well typed terms). For all well formed \u03a3, \u03a6, \u0393 and for all t and T such that \u03a3, \u03a6, \u0393 ` t : T we have \u0393 ` t : T R \u21d3 t.\nAcknowledgments. We deeply thank Jacques Carette and the anonymous referees for their many observations and corrections."}, {"heading": "Appendix A. Syntax-directed type-checking rules", "text": "The following appendix is an extract of the paper [4] in which the reader can find all the details of the type checking algorithm implemented in the Matita interactive prover. A few aesthetic changes have been made to the adopted syntax to increase its consistency with respect to the syntax adopted in this paper. The main differences are summarised in the following list: \u2022 We use the membership relation over the PTS set to type sorts and products \u2022 The check for the consistency of the metavariable local substitution has been inlined in\nthe rule \u2022 A new generic judgement (r : T ) \u2208 Env has been introduced to provide a more compact\nsyntax for the lookup of the type of a generic object into the environment \u2022 We inlined several auxiliary functions that were used in the presentation of the typecheck-\ning rule for case analysis. This was made possible by the following abuse of notation: Env,\u03a3,\u03a6, \u2205 ` t1 .whd \u03a0 \u2212\u2212\u2212\u2192 xi : Ti.tn+1 is a shortcut to mean that for all i \u2208 {1 . . . n} \u03a3, \u03a6, \u0393;x1 : T1; . . . ;xi\u22121 : Ti\u22121 ` ti .whd \u03a0xi : Ti.ti+1 and \u03a3, \u03a6, \u0393 ` tn+1 .whd tn+1. Moreover, the rule presented in [4] is more liberal than the one presented here that just uses the test (s, s\u2032) \u2208 elim(PTS) to check that a non informative data is never analyzed to obtain an informative one. The actual rules used in the kernel and the refiner of Matita also allow in every situation the elimination of inhabitants of singleton inductive types, whose definition is given in [4].\nIn this section, I will be short for\n\u03a0 \u2212\u2212\u2212\u2192 xl : Ul.inductive\nI1l : A1 := k 1 1 : K 1 1 . . . k m1 1 : K m1 1\nwith . . . with Inl : An := k 1 n : K 1 n . . . k mn n : K mn n\nA.1. Environment formation rules. Environment formation rules (judgement Env ` WF , function typecheck obj)\n\u2205 `WF Env `WF d undefined in Env Env,\u03a3 `WF Env,\u03a3,\u03a6 `WF Env,\u03a3,\u03a6, \u2205 ` T : S Env,\u03a3,\u03a6, \u2205 ` S .whd S\u2032 where S\u2032 is a sort Env,\u03a3,\u03a6, \u2205 ` b : T \u2032 Env,\u03a3,\u03a6, \u2205 ` T \u2193 T \u2032\nEnv \u222a (\u03a3,\u03a6,definition d : T := b) `WF Env `WF d undefined in Env Env,\u03a3 `WF Env,\u03a3,\u03a6 `WF Env,\u03a3,\u03a6, \u2205 ` T : S Env,\u03a3,\u03a6, \u2205 ` S .whd S\u2032 where S\u2032 is a sort\nEnv \u222a (\u03a3,\u03a6, axiom d : T ) `WF\nEnv `WF \u2212\u2192 fn undefined in Env Env,\u03a3 `WF Env,\u03a3,\u03a6 `WF Env,\u03a3,\u03a6, \u2205 ` Ti : Si Env,\u03a3,\u03a6, \u2205 ` Si .whd S\u2032i where S\u2032i is a sort Ti = \u03a0 \u2212\u2212\u2212\u2212\u2212\u2192 xipi : T i pi .T i pi+1\nEnv,\u03a3,\u03a6, [f1 : T1; . . . ; fn : Tn; \u2212\u2212\u2212\u2212\u2212\u2192 xipi : T i pi ] ` ti : T \u2032i pi+1 Env,\u03a3,\u03a6, [f1 : T1; . . . ; fn : Tn; \u2212\u2212\u2212\u2212\u2212\u2192 xipi : T i pi ] ` T i pi+1 \u2193 T \u2032ipi+1\n} i \u2208 {1 . . . n}\n\u2212\u2192 tn guarded by destructors ([4], Sect. 6.3)\nEnv \u222a  \u03a3,\u03a6,let rec f1(\u2212\u2212\u2212\u2212\u2212\u2192x1p1 : T 1p1) : T 1p1+1 := t1 and . . . and fn( \u2212\u2212\u2212\u2212\u2212\u2192 xnpn :T n pn) : T n pn+1 := tn  `WF Env `WF \u2212\u2192 fn undefined in Env Env,\u03a3 `WF Env,\u03a3,\u03a6 `WF Env,\u03a3,\u03a6, \u2205 ` Ti : Si Env,\u03a3,\u03a6, \u2205 ` Si .whd S\u2032i where S\u2032i is a sort Ti = \u03a0 \u2212\u2212\u2212\u2212\u2212\u2192 xipi : T i pi .T i pi+1\nEnv,\u03a3,\u03a6, [f1 : T1; . . . ; fn : Tn; \u2212\u2212\u2212\u2212\u2212\u2192 xipi : T i pi ] ` ti : T \u2032i pi+1 Env,\u03a3,\u03a6, [f1 : T1; . . . ; fn : Tn; \u2212\u2212\u2212\u2212\u2212\u2192 xipi : T i pi ] ` T i pi+1 \u2193 T \u2032ipi+1\n} i \u2208 {1 . . . n}\n\u2212\u2192 tn guarded by constructors ([4], Sect. 6.3)\nEnv \u222a  \u03a3,\u03a6,let corec f1(\u2212\u2212\u2212\u2212\u2212\u2192x1p1 : T 1p1) : T 1p1+1 := t1 and . . . and fn( \u2212\u2212\u2212\u2212\u2212\u2192 xnpn :T n pn) : T n pn+1 := tn  `WF Env `WF I1l , . . . , Inl , k11, . . . , kmnn undefined in Env Env,\u03a3 `WF Env,\u03a3,\u03a6 `WF all the conditions in [4], Sect. 6.1 are satisfied\nEnv \u222a (\u03a6,\u03a3, I) `WF\nA.2. Metasenv formation rules. Metasenv formation rules (judgement Env,\u03a3 ` WF , function typecheck metasenv)\nEnv, \u2205 `WF Env,\u03a3 `WF ?i undefined in \u03a3 Env,\u03a3, \u2205,\u0393 `WF Env,\u03a3, \u2205,\u0393 ` T : S Env,\u03a3, \u2205,\u0393 ` S .whd S\u2032where S\u2032 is a sort\nEnv,\u03a3 \u222a (\u0393 `?i : T ) `WF\nA.3. Subst formation rules. Subst formation rules (judgement Env,\u03a3,\u03a6 `WF , function typecheck subst)\nEnv,\u03a3, \u2205 `WF Env,\u03a3,\u03a6 `WF ?i undefined in \u03a3 and in \u03a6 Env,\u03a3,\u03a6,\u0393 `WF Env,\u03a3,\u03a6,\u0393 ` T : S Env,\u03a3,\u03a6,\u0393 ` S .whd S\u2032 where S\u2032 is a sort Env,\u03a3,\u03a6,\u0393 ` t : T \u2032 Env,\u03a3,\u03a6,\u0393 ` T \u2193 T \u2032\nEnv,\u03a3,\u03a6 \u222a (\u0393 `?i : T := t) `WF\nA.4. Context formation rules. Context formation rules (judgement Env,\u03a3,\u03a6,\u0393 `WF , function typecheck context)\nEnv,\u03a3,\u03a6, \u2205 `WF Env,\u03a3,\u03a6,\u0393 `WF x is undefined in \u0393 Env,\u03a3,\u03a6,\u0393 ` T : S Env,\u03a3,\u03a6,\u0393 ` S .whd S\u2032 where S\u2032 is a sort Env,\u03a3,\u03a6,\u0393 \u222a (x : T ) `WF Env,\u03a3,\u03a6,\u0393 `WF x is undefined in \u0393 Env,\u03a3,\u03a6,\u0393 ` T : S Env,\u03a3,\u03a6,\u0393 ` S .whd S\u2032 where S\u2032 is a sort Env,\u03a3,\u03a6,\u0393 ` t : T \u2032 Env,\u03a3,\u03a6,\u0393 ` T \u2193 T \u2032\nEnv,\u03a3,\u03a6,\u0393 \u222a (x : T := t) `WF\nA.5. Term typechecking rules. Term typechecking rules (judgement Env,\u03a3,\u03a6,\u0393 ` t : T , function typeof)\n(K\u2212variable) (x : T ) \u2208 \u0393 or (x : T := t) \u2208 \u0393\nEnv,\u03a3,\u03a6,\u0393 ` x : T (K\u2212sort) (s1, s2) \u2208 PTS Env,\u03a3,\u03a6,\u0393 ` s1 : s2\n(K\u2212meta)\n(x1 : T1; . . . ;xn : Tn `?i : T ) \u2208 \u03a3 or (x1 : T1; . . . ;xn : Tn `?i : T := t) \u2208 \u03a6 Env,\u03a3,\u03a6,\u0393 ` ti : Ti[ \u2212\u2212\u2212\u2212\u2212\u2212\u2192 xi\u22121/ti\u22121] i \u2208 {1 . . . n}\nEnv,\u03a3,\u03a6,\u0393 `?i[t1; . . . ; tn] : T [ \u2212\u2212\u2212\u2192 xn/tn]\n(K\u2212constant) (r : T ) \u2208 Env\nEnv,\u03a3,\u03a6,\u0393 ` r : T\n(K\u2212definition)\n(\u03a3\u2032,\u03a6\u2032,definition d : T := b) \u2208 Env or (\u03a3\u2032,\u03a6\u2032, axiom d : T ) \u2208 Env \u03a3\u2032 = \u2205 \u03a6\u2032 = \u2205\n(d : T ) \u2208 Env\n(K\u2212letrec)\n \u03a3 \u2032,\u03a6\u2032, let rec f1( \u2212\u2212\u2212\u2212\u2212\u2192 x1p1 : T 1 p1) : T 1 p1+1 := t1 and . . .\nand fn( \u2212\u2212\u2212\u2212\u2212\u2192 xnpn :T n pn) : T n pn+1 := tn  \u2208 Env \u03a3\u2032 = \u2205 \u03a6\u2032 = \u2205 1 \u2264 i \u2264 n\n(fi : \u03a0 \u2212\u2212\u2212\u2212\u2212\u2192 xipi : T i pi .T i pi+1 ) \u2208 Env\n(K\u2212letcorec)\n \u03a3 \u2032,\u03a6\u2032, let corec f1( \u2212\u2212\u2212\u2212\u2212\u2192 x1p1 : T 1 p1) : T 1 p1+1 := t1 and . . .\nand fn( \u2212\u2212\u2212\u2212\u2212\u2192 xnpn :T n pn) : T n pn+1 := tn  \u2208 Env \u03a3\u2032 = \u2205 \u03a6\u2032 = \u2205 1 \u2264 i \u2264 n\n(fi : Ti) \u2208 Env\n(K\u2212inductive)\n(\u03a3\u2032,\u03a6\u2032, I) \u2208 Env \u03a3\u2032 = \u2205 \u03a6\u2032 = \u2205 1 \u2264 p \u2264 n\n(Ipl : \u03a0 \u2212\u2212\u2212\u2192 xl : Ul.Ap) \u2208 Env\n(K\u2212constructor)\n(\u03a3\u2032,\u03a6\u2032, I) \u2208 Env \u03a3\u2032 = \u2205 \u03a6\u2032 = \u2205 1 \u2264 p \u2264 n 1 \u2264 j \u2264 mp\n(kjp : \u03a0 \u2212\u2212\u2212\u2192 xl : Ul.K j p) \u2208 Env\n(K\u2212lambda)\nEnv,\u03a3,\u03a6,\u0393 ` T : S Env,\u03a3,\u03a6,\u0393 ` S .whd S\u2032 S\u2032 is a sort or a meta Env,\u03a3,\u03a6,\u0393 \u222a (n : T ) ` u : U\nEnv,\u03a3,\u03a6,\u0393 ` \u03bbn : T.u : \u03a0n : T.U\n(K\u2212product)\nEnv,\u03a3,\u03a6,\u0393 ` T : s1 Env,\u03a3,\u03a6,\u0393 \u222a (n : T ) ` U : s2 (s1, s2, s3) \u2208 PTS Env,\u03a3,\u03a6,\u0393 ` \u03a0n : T.U : s3\n(K\u2212letin)\nEnv,\u03a3,\u03a6,\u0393 ` t : T \u2032 Env,\u03a3,\u03a6,\u0393 ` T : S Env,\u03a3,\u03a6,\u0393 ` T \u2193 T \u2032 Env,\u03a3,\u03a6,\u0393 \u222a (x : T := t) ` u : U Env,\u03a3,\u03a6,\u0393 ` let (x : T ) := t in u : U [x/t]\n(K\u2212appl\u2212 base)\nEnv,\u03a3,\u03a6,\u0393 ` h : \u03a0x : T.U Env,\u03a3,\u03a6,\u0393 ` t : T \u2032 Env,\u03a3,\u03a6,\u0393 ` T \u2193 T \u2032\nEnv,\u03a3,\u03a6,\u0393 ` h t : U [x/t]\n(K\u2212appl\u2212 rec) Env,\u03a3,\u03a6,\u0393 ` (h t1) t2 \u00b7 \u00b7 \u00b7 tn : T Env,\u03a3,\u03a6,\u0393 ` h t1 t2 \u00b7 \u00b7 \u00b7 tn : T\n(K\u2212match)\n(\u03a3\u2032,\u03a6\u2032, I) \u2208 Env \u03a3\u2032 = \u2205 \u03a6\u2032 = \u2205 Env,\u03a3,\u03a6,\u0393 ` t : T Env,\u03a3,\u03a6,\u0393 ` T .whd Ipl \u2212\u2192ul \u2212\u2192 u\u2032r Ap[ \u2212\u2212\u2212\u2192 xl/ul] = \u03a0 \u2212\u2212\u2212\u2212\u2192 yr : Yr.s K j p[ \u2212\u2212\u2212\u2192 xl/ul] = \u03a0 \u2212\u2212\u2212\u2212\u2212\u2212\u2192 xjnj : Q j nj .I p l \u2212\u2192xl \u2212\u2192vr j = 1 . . .mp Env,\u03a3,\u03a6,\u0393 ` U : V Env,\u03a3,\u03a6,\u0393 ` V .whd \u03a0 \u2212\u2212\u2212\u2212\u2192 zr : Yr.\u03a0zr+1 : I p l \u2212\u2192ul \u2212\u2192zr .s\u2032 (s, s\u2032) \u2208 elim(PTS) Env,\u03a3,\u03a6,\u0393 ` \u03bb \u2212\u2212\u2212\u2212\u2212\u2212\u2192 xjnj : P j nj .tj : Tj j = 1, . . . ,mp Env,\u03a3,\u03a6,\u0393 ` Tj \u2193 \u03a0 \u2212\u2212\u2212\u2212\u2212\u2212\u2192 xjnj : Q j nj .U \u2212\u2192vr (kpj \u2212\u2192ul \u2212\u2192 xjnj ) j = 1, . . . ,mp\nEnv,\u03a3,\u03a6,\u0393 ` match t in Ipl return U [kp1 ( \u2212\u2212\u2212\u2212\u2212\u2212\u2192 x1n1 : P 1 n1)\u21d2 t1 | . . . |k p mp ( \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 x mp nmp : P mp nmp )\u21d2 tmp ] : U \u2212\u2192 u\u2032r t\nA.6. Term conversion rules. Term conversion rules (judgement Env,\u03a3,\u03a6,\u0393 ` T \u2193 T \u2032, function are convertible ; \u2193= means test eq only = true; \u2193\u2022 means that the current rule must be intended as two rules, one with all the \u2193\u2022 replaced by \u2193, the other with all the \u2193\u2022 replaced by \u2193=)\nEnv,\u03a3,\u03a6,\u0393 ` T =\u03b1 T \u2032 Env,\u03a3,\u03a6,\u0393 ` T \u2193= T \u2032 Env,\u03a3,\u03a6,\u0393 ` T \u2193= T \u2032\nEnv,\u03a3,\u03a6,\u0393 ` T \u2193 T \u2032\nTypeu \u2264 Typev Typev \u2264 Typeu are declared constraints ([4], Sect. 4.3) Env,\u03a3,\u03a6,\u0393 ` Typeu \u2193= Typev\nTypeu \u2264 Typev is a declared constraint ([4], Sect. 4.3) Env,\u03a3,\u03a6,\u0393 ` Typeu \u2193 Typev\nEnv,\u03a3,\u03a6,\u0393 ` Prop \u2193 Typeu lc = t1, . . . , tn lc \u2032 = t\u20321, . . . , t \u2032 n for all i = 1, . . . , n Env,\u03a3,\u03a6,\u0393 ` ti \u2193\u2022 t\u2032i Env,\u03a3,\u03a6,\u0393 `?j [lc] \u2193\u2022?j [lc\u2032]\nEnv,\u03a3,\u03a6,\u0393 ` T1 \u2193= T \u20321 Env,\u03a3,\u03a6,\u0393 \u222a (x : T1) ` T2 \u2193\u2022 T \u20322 Env,\u03a3,\u03a6,\u0393 ` \u03a0x : T1.T2 \u2193\u2022 \u03a0x : T \u20321.T \u20322\nEnv,\u03a3,\u03a6,\u0393 \u222a (x : T ) ` t \u2193\u2022 t\u2032\nEnv,\u03a3,\u03a6,\u0393 ` \u03bbx : T.t \u2193\u2022 \u03bbx : T \u2032.t\u2032 In the rule above, no check is performed on the source of the abstractions, since we assume we are comparing well-typed terms whose types are convertible.\nEnv,\u03a3,\u03a6,\u0393 ` h \u2193\u2022 h\u2032 for all i = 1, . . . , n Env,\u03a3,\u03a6,\u0393 ` ti \u2193= t\u2032i\nEnv,\u03a3,\u03a6,\u0393 ` h \u2212\u2192tn \u2193\u2022 h\u2032 \u2212\u2192 t\u2032n\nEnv,\u03a3,\u03a6,\u0393 ` t \u2193\u2022 t\u2032 Env,\u03a3,\u03a6,\u0393 ` U \u2193\u2022 U \u2032 for all i = 1, . . . ,mp Env,\u03a3,\u03a6,\u0393 ` \u03bb \u2212\u2212\u2212\u2212\u2212\u2192 xini : P i ni .ti \u2193\u2022 \u03bb \u2212\u2212\u2212\u2212\u2212\u2212\u2192 xini : P \u2032i ni .t \u2032 i\nEnv,\u03a3,\u03a6,\u0393 ` match t in Ipl return U [k p 1 ( \u2212\u2212\u2212\u2212\u2212\u2212\u2192 x1n1 : P 1 n1)\u21d2 t1| . . . |k p mp ( \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 x mp nmp : P mp nmp )\u21d2 tmp ] \u2193\u2022\nmatch t\u2032 in Ipl return U [k p 1 ( \u2212\u2212\u2212\u2212\u2212\u2212\u2192 x1n1 : P \u20321 n1)\u21d2 t \u2032 1| . . . |k p mp ( \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 x mp nmp : P \u2032mp nmp )\u21d2 t\u2032mp ]\nEnv,\u03a3,\u03a6,\u0393 ` t .whd t\u2032 Env,\u03a3,\u03a6,\u0393 ` u .whd u\u2032 Env,\u03a3,\u03a6,\u0393 ` t\u2032 \u2193\u2022 u\u2032\nEnv,\u03a3,\u03a6,\u0393 ` t \u2193\u2022 u In the previous rule, t\u2032 and u\u2032 need not be weak head normal forms: any term obtained from t (respectively, u) by reduction (even non-head reduction) will do. Indeed, the less reduction is performed, the more efficient the conversion test usually is.\nA.7. Term reduction rules. Term reduction rules.\nEnv,\u03a3,\u03a6,\u0393 ` (\u03bbx : T.u) t B\u03b2 u[x/t]\nEnv,\u03a3,\u03a6,\u0393 ` let (x : T ) := t in u B\u03b6 u[x/t]\n(\u2205, \u2205,definition d : T := b) \u2208 Env Env,\u03a3,\u03a6,\u0393 ` d B\u03b4 b (\u0393\u2032 `?i : T := t) \u2208 \u03a6\nEnv,\u03a3,\u03a6,\u0393 `?i[u1 ; . . . ; un] B\u03b4 t[dom(\u0393\u2032)/\u2212\u2192un]\nEnv,\u03a3,\u03a6,\u0393 ` match kpi \u2212\u2192 tl \u2212\u2192 t\u2032ni in I p l return U\n[kp1 ( \u2212\u2212\u2212\u2212\u2212\u2212\u2192 x1n1 : P 1 n1)\u21d2 u1| . . . |k p mp ( \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 x mp nmp : P mp nmp )\u21d2 ump ] B\u03b9 ui[ \u2212\u2192 xini/ \u2212\u2192 t\u2032ni ] \u2205, \u2205,let rec f1(\u2212\u2212\u2212\u2212\u2212\u2192x1p1 : T 1p1) : T 1p1+1 := t1 and . . .\nand fn( \u2212\u2212\u2212\u2212\u2212\u2192 xnpn :T n pn) : T n pn+1 := tn  \u2208 Env k \u2208 {1 . . . n}\nEnv,\u03a3,\u03a6,\u0393 ` fk u1 ...(kij \u2212\u2192vnj )... um B\u00b5 tk[ \u2212\u2192 xkm/u1, . . . , (k i j \u2212\u2192vnj ), . . . , um]\nNotice that (kij \u2212\u2192vnj ) must occur in the position of the recursive argument of fk. This implies that, for this reduction to be performed, fk must be applied at least up to its recursive argument.\n \u2205, \u2205,let corec f1(\u2212\u2212\u2212\u2212\u2212\u2192x1p1 : T 1p1) : T 1p1+1 := t1 and . . . and fn( \u2212\u2212\u2212\u2212\u2212\u2192 xnpn :T n pn) : T n pn+1 := tn  \u2208 Env k \u2208 {1 . . . n}\nEnv,\u03a3,\u03a6,\u0393 ` match fk \u2212\u2192uq in Ipl return U [kp1 ( \u2212\u2212\u2212\u2212\u2212\u2192 y1n1 : P 1 n1)\u21d2 v1| . . . |k p mp ( \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 y mp nmp : P mp nmp )\u21d2 vmp ] B\u03bd\nmatch tk[ \u2212\u2192 xkq/ \u2212\u2192uq] in Ipl return U [kp1 ( \u2212\u2212\u2212\u2212\u2212\u2192 y1n1 : P 1 n1)\u21d2 v1| . . . |k p mp ( \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 y mp nmp : P mp nmp )\u21d2 vmp ]\nNotice that here q can be zero."}], "references": [{"title": "A page in number theory", "author": ["Andrea Asperti", "Cristian Armentano"], "venue": "Journal of Formalized Reasoning,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2008}, {"title": "About the formalization of some results by Chebyshev in number theory", "author": ["Andrea Asperti", "Wilmer Ricciotti"], "venue": "In Proc. of TYPES\u201908,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "Formal metatheory of programming languages in the Matita interactive theorem prover", "author": ["Andrea Asperti", "Wilmer Ricciotti", "Claudio Sacerdoti Coen", "Enrico Tassi"], "venue": "Journal of Automated Reasoning: Special Issue on the Poplmark Challenge. Published online,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "A compact kernel for the Calculus of Inductive Constructions. Sadhana", "author": ["Andrea Asperti", "Wilmer Ricciotti", "Claudio Sacerdoti Coen", "Enrico Tassi"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2009}, {"title": "Hints in unification", "author": ["Andrea Asperti", "Wilmer Ricciotti", "Claudio Sacerdoti Coen", "Enrico Tassi"], "venue": "In TPHOLs 2009,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2009}, {"title": "User interaction with the Matita proof assistant", "author": ["Andrea Asperti", "Claudio Sacerdoti Coen", "Enrico Tassi", "Stefano Zacchiroli"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2007}, {"title": "Lambda Calculi with Types", "author": ["Henk Barendregt"], "venue": "In Abramsky, Samson and others, editor, Handbook of Logic in Computer Science,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1992}, {"title": "A brief overview of Agda - a functional language with dependent types", "author": ["Ana Bove", "Peter Dybjer", "Ulf Norell"], "venue": "In Theorem Proving in Higher Order Logics, 22nd International Conference,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2009}, {"title": "Coherence checking of coercions in Plastic", "author": ["P. Callaghan"], "venue": "Proc. Workshop on Subtyping and Dependent Types in Programming,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2000}, {"title": "Subtyping, Type Conversion and Transitivity Elimination", "author": ["Gang Chen"], "venue": "PhD thesis, University Paris", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1998}, {"title": "Formalizing Overlap Algebras in Matita", "author": ["Claudio Sacerdoti Coen", "Enrico Tassi"], "venue": "Mathematical Structures in Computer Science,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2011}, {"title": "The Calculus of Constructions", "author": ["Thierry Coquand", "G\u00e9rard P. Huet"], "venue": "Inf. Comput.,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1988}, {"title": "Greedy bidirectional polymorphism", "author": ["Joshua Dunfield"], "venue": "In ML Workshop (ML", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2009}, {"title": "Tridirectional typechecking", "author": ["Joshua Dunfield", "Frank Pfenning"], "venue": "In X. Leroy, editor, Conference Record of the 31st Annual Symposium on Principles of Programming Languages", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2004}, {"title": "Packaging mathematical structures", "author": ["Fran\u00e7ois Garillot", "Georges Gonthier", "Assia Mahboubi", "Laurence Rideau"], "venue": "In Proceedings of the 22nd International Conference on Theorem Proving in Higher Order Logics,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2009}, {"title": "A unification algorithm for typed lambda-calculus", "author": ["G\u00e9rard P. Huet"], "venue": "Theor. Comput. Sci.,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1975}, {"title": "Coercive subtyping", "author": ["Zhaohui Luo"], "venue": "J. Logic and Computation,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1999}, {"title": "A Calculus of Substitutions for Incomplete-Proof Representation in Type Theory", "author": ["C\u00e9sar Mu\u00f1oz"], "venue": "PhD thesis,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 1997}, {"title": "Towards a practical programming language based on dependent type theory", "author": ["Ulf Norell"], "venue": "PhD thesis, Department of Computer Science and Engineering, Chalmers University of Technology,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2007}, {"title": "D\u00e9finitions Inductives en Th\u00e9orie des Types d\u2019Ordre Sup\u00e9rieur", "author": ["Christine Paulin-Mohring"], "venue": "Habilitation a\u0300 diriger les recherches,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1996}, {"title": "Local type inference", "author": ["Benjamin C. Pierce", "David N. Turner"], "venue": "ACM Trans. Program. Lang. Syst.,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2000}, {"title": "Dependently typed records in type theory", "author": ["Robert Pollack"], "venue": "Formal Aspects of Computing,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2002}, {"title": "Mathematical Knowledge Management and Interactive Theorem Proving", "author": ["Claudio Sacerdoti Coen"], "venue": "PhD thesis, University of Bologna,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2004}, {"title": "Spurious disambiguation errors and how to get rid of them", "author": ["Claudio Sacerdoti Coen", "Stefano Zacchiroli"], "venue": "Journal of Mathematics in Computer Science, special issue on Management of Mathematical Knowledge,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2008}, {"title": "Typing algorithm in type theory with inheritance", "author": ["Amokrane S\u00e4\u0131bi"], "venue": "In Proceedings of the 24th ACM SIGPLAN-SIGACT symposium on Principles of programming languages,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 1997}, {"title": "Subset coercions in Coq. In Types for Proofs and Programs, volume 4502/2007 of LNCS, pages 237\u2013252", "author": ["Matthieu Sozeau"], "venue": null, "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2006}, {"title": "First-class type classes", "author": ["Matthieu Sozeau", "Nicolas Oury"], "venue": "In Proceedings of TPHOLs,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2008}, {"title": "Verified Computing in Homological Algebra. A Journey Esploring the Power and Limits of Dependent Type Theory", "author": ["Arnaud Spiwack"], "venue": "PhD thesis, E\u0301cole Polytechniqe,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2011}, {"title": "Construction and Deduction in Type Theories", "author": ["Martin Strecker"], "venue": "PhD thesis, Universita\u0308t Ulm,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 1998}, {"title": "Type processing by constraint reasoning", "author": ["Peter J. Stuckey", "Martin Sulzmann", "Jeremy Wazny"], "venue": "In APLAS, pages", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2006}, {"title": "Interactive Theorem Provers: issues faced as a user and tackled as a developer", "author": ["Enrico Tassi"], "venue": "PhD thesis,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2008}, {"title": "Une Th\u00e9orie des Constructions Inductives", "author": ["Benjamin Werner"], "venue": "PhD thesis,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 1994}], "referenceMentions": [{"referenceID": 5, "context": "This paper is devoted to the description of a refinement algorithm for the Calculus of (Co)Inductive Constructions, the type theory on which the Matita [6], Coq [12] and Lego [19] ITPs are based on.", "startOffset": 152, "endOffset": 155}, {"referenceID": 3, "context": "In this and in the previous paper [4] we are interested in the implementation of interactive theorem provers (ITP) for dependently typed languages that are heavily based on the Curry-Howard isomorphism.", "startOffset": 34, "endOffset": 37}, {"referenceID": 7, "context": "Agda [8] and Matita [6] are examples of systems implemented in this way.", "startOffset": 5, "endOffset": 8}, {"referenceID": 5, "context": "Agda [8] and Matita [6] are examples of systems implemented in this way.", "startOffset": 20, "endOffset": 23}, {"referenceID": 27, "context": "thesis [31] partially describes a forthcoming release of Coq 8.", "startOffset": 7, "endOffset": 11}, {"referenceID": 3, "context": "The implementation of a kernel for a variant of the Calculus of (Co)Inductive Constructions (CIC) has been described in [4] down to the gory details that make the implementation efficient.", "startOffset": 120, "endOffset": 123}, {"referenceID": 14, "context": "Canonical structures [16], unification hints [5] and type classes [30] are devices that let the user drive some form of proof search that is seamlessly integrated in the refinement process.", "startOffset": 21, "endOffset": 25}, {"referenceID": 4, "context": "Canonical structures [16], unification hints [5] and type classes [30] are devices that let the user drive some form of proof search that is seamlessly integrated in the refinement process.", "startOffset": 45, "endOffset": 48}, {"referenceID": 26, "context": "Canonical structures [16], unification hints [5] and type classes [30] are devices that let the user drive some form of proof search that is seamlessly integrated in the refinement process.", "startOffset": 66, "endOffset": 70}, {"referenceID": 20, "context": "To avoid or mitigate the drawbacks of type inference, bi-directional type-checking algorithms have been introduced in the literature [24].", "startOffset": 133, "endOffset": 137}, {"referenceID": 15, "context": "3To the authors knowledge, Isabelle [18] is the only interactive prover implementing Huet\u2019s algorithm [17] capable of generating all second order unifiers", "startOffset": 102, "endOffset": 106}, {"referenceID": 9, "context": "In the latter case, the system needs to recognize that lists are containers and has to have code to lift coercions over containers, like in [10].", "startOffset": 140, "endOffset": 144}, {"referenceID": 5, "context": "The rest of the paper explains the bi-directional refinement algorithm implemented in Matita [6].", "startOffset": 93, "endOffset": 96}, {"referenceID": 3, "context": "For the sake of the reader, Appendix 8 is taken from [4] with minor modifications and it shows the type checking algorithm implemented by the kernel.", "startOffset": 53, "endOffset": 56}, {"referenceID": 17, "context": "The CIC calculus extended with metavariables has been studied in [21] and the flavor of metavariables implemented in Matita is described in [26].", "startOffset": 65, "endOffset": 69}, {"referenceID": 22, "context": "The CIC calculus extended with metavariables has been studied in [21] and the flavor of metavariables implemented in Matita is described in [26].", "startOffset": 140, "endOffset": 144}, {"referenceID": 6, "context": "We regard CIC as a Pure Type System [7], and we denote by PTS the set of axioms.", "startOffset": 36, "endOffset": 39}, {"referenceID": 3, "context": "The details for the actual PTS used in Matita are given in [4].", "startOffset": 59, "endOffset": 62}, {"referenceID": 3, "context": "This is relevant for CIC since the sort of propositions, Prop, is non informative and cannot be eliminated to inhabit a data type of sort Typeu for any u (but for few exceptions described in [4] Section 6).", "startOffset": 191, "endOffset": 194}, {"referenceID": 31, "context": "The typing judgment implemented in our kernel is an extension of the regular typing judgment for CIC [35, 23, 13].", "startOffset": 101, "endOffset": 113}, {"referenceID": 19, "context": "The typing judgment implemented in our kernel is an extension of the regular typing judgment for CIC [35, 23, 13].", "startOffset": 101, "endOffset": 113}, {"referenceID": 11, "context": "The typing judgment implemented in our kernel is an extension of the regular typing judgment for CIC [35, 23, 13].", "startOffset": 101, "endOffset": 113}, {"referenceID": 3, "context": "It is described in [4] and reported in the Appendix 8.", "startOffset": 19, "endOffset": 22}, {"referenceID": 28, "context": "thesis [32], the order is not preserved by unification and thus in any realistic implementation \u03a3 is to be implemented as a set and the fact that \u03a3 remains a partial order must be preserved as an invariant.", "startOffset": 7, "endOffset": 11}, {"referenceID": 22, "context": "The unification algorithm implemented in Matita goes beyond the scope of this paper, the interested reader can find more details in [26, 5].", "startOffset": 132, "endOffset": 139}, {"referenceID": 4, "context": "The unification algorithm implemented in Matita goes beyond the scope of this paper, the interested reader can find more details in [26, 5].", "startOffset": 132, "endOffset": 139}, {"referenceID": 3, "context": "A precise definition of smallness together with the corresponding rules for pattern matching can be found in [4].", "startOffset": 109, "endOffset": 112}, {"referenceID": 3, "context": "Another important design choice is to design the kernel of the system so that it handles metavariables [4].", "startOffset": 103, "endOffset": 106}, {"referenceID": 27, "context": "thesis [31] discusses this issue at length as a motivation for a complete re-design of the data type for proofs in Coq.", "startOffset": 7, "endOffset": 11}, {"referenceID": 25, "context": "This problem was already partially addressed by Sozeau [29] where he added a new system layer around the refiner to achieve the behavior that our refiner already provides.", "startOffset": 55, "endOffset": 59}, {"referenceID": 20, "context": "The new rule for lambda-abstraction is well known in the literature [24] and it is also the only one implemented in Coq.", "startOffset": 68, "endOffset": 72}, {"referenceID": 16, "context": "While the literature [20] considers them mostly as a device to mimic sub-typing in a calculus lacking it, they have other interesting applications.", "startOffset": 21, "endOffset": 25}, {"referenceID": 21, "context": "The last case is recurrent when algebraic structures are encoded as dependently typed records [25] embedding the type (or carrier) for the elements together with the operations and properties defining the structure.", "startOffset": 94, "endOffset": 98}, {"referenceID": 30, "context": "In Matita, for various reasons detailed in [34], \u2206 is not a graph, but a set of arcs for the transitive closure of the graph.", "startOffset": 43, "endOffset": 47}, {"referenceID": 8, "context": "The last detail worth mentioning is that, all systems known to the authors with the notable exception of Plastic [9], adopt some approximated representation for the nodes in the coercion graph, usually the name of the head constant of the source and target types.", "startOffset": 113, "endOffset": 116}, {"referenceID": 28, "context": "6In the case of dependent types the unification of the types is a necessary condition for the unification of the two terms, as claimed by Strecker [32].", "startOffset": 147, "endOffset": 151}, {"referenceID": 24, "context": "The extension to the typing algorithm of CIC with explicit casts in [28] follows the same spirit of our refinement algorithm for raw terms.", "startOffset": 68, "endOffset": 72}, {"referenceID": 18, "context": "Another work in topic is [22] where Norell describes the bi-directional type inference algorithm implemented in the Agda interactive prover.", "startOffset": 25, "endOffset": 29}, {"referenceID": 18, "context": "The most notable example of type inference algorithm based on constraint solving is the one adopted for the Agda system [22].", "startOffset": 120, "endOffset": 124}, {"referenceID": 29, "context": "A strong characteristic of constraint based type inference is precise error reporting, as described in [33].", "startOffset": 103, "endOffset": 107}, {"referenceID": 23, "context": "Even if it the heuristics adopted in Matita [27] to discard spurious error reports are slightly more complex than the ones proposed by Stuckey, we believe that they provide a similar precision.", "startOffset": 44, "endOffset": 48}, {"referenceID": 12, "context": "Greedy algorithms [14], like the one presented in this paper, are characterized by a very predictable behavior, at the cost of being forced to take early decisions leading to the rejection of some possibly well typed terms.", "startOffset": 18, "endOffset": 22}, {"referenceID": 20, "context": "Many algorithms to infer a polymorphic type for a program prefer to avoid the use of unification [24] since unification variables may represent type constraints coming from distant, loosely related, sub-terms.", "startOffset": 97, "endOffset": 101}, {"referenceID": 13, "context": "These approaches also scaled up to types with some sort of dependency over terms, as in [15].", "startOffset": 88, "endOffset": 92}, {"referenceID": 14, "context": "Recent important developments [16] heavily rely on a user-extensible unification algorithm [5], using it as a predictable form of Prolog-like inference engine.", "startOffset": 30, "endOffset": 34}, {"referenceID": 4, "context": "Recent important developments [16] heavily rely on a user-extensible unification algorithm [5], using it as a predictable form of Prolog-like inference engine.", "startOffset": 91, "endOffset": 94}, {"referenceID": 10, "context": "Its effectiveness has been validated in all the formalizations carried on using the Matita interactive theorem prover [11, 1, 2, 3], whose refiner is based", "startOffset": 118, "endOffset": 131}, {"referenceID": 0, "context": "Its effectiveness has been validated in all the formalizations carried on using the Matita interactive theorem prover [11, 1, 2, 3], whose refiner is based", "startOffset": 118, "endOffset": 131}, {"referenceID": 1, "context": "Its effectiveness has been validated in all the formalizations carried on using the Matita interactive theorem prover [11, 1, 2, 3], whose refiner is based", "startOffset": 118, "endOffset": 131}, {"referenceID": 2, "context": "Its effectiveness has been validated in all the formalizations carried on using the Matita interactive theorem prover [11, 1, 2, 3], whose refiner is based", "startOffset": 118, "endOffset": 131}, {"referenceID": 25, "context": "This eased the implementation of subset coercions in the style of [29], but that topic falls outside the scope of the present paper and is thus not discussed.", "startOffset": 66, "endOffset": 70}, {"referenceID": 3, "context": "The following appendix is an extract of the paper [4] in which the reader can find all the details of the type checking algorithm implemented in the Matita interactive prover.", "startOffset": 50, "endOffset": 53}, {"referenceID": 3, "context": "Moreover, the rule presented in [4] is more liberal than the one presented here that just uses the test (s, s\u2032) \u2208 elim(PTS) to check that a non informative data is never analyzed to obtain an informative one.", "startOffset": 32, "endOffset": 35}, {"referenceID": 3, "context": "The actual rules used in the kernel and the refiner of Matita also allow in every situation the elimination of inhabitants of singleton inductive types, whose definition is given in [4].", "startOffset": 182, "endOffset": 185}, {"referenceID": 3, "context": "\u2212 \u2192 tn guarded by destructors ([4], Sect.", "startOffset": 31, "endOffset": 34}, {"referenceID": 3, "context": "\u2212 \u2192 tn guarded by constructors ([4], Sect.", "startOffset": 32, "endOffset": 35}, {"referenceID": 3, "context": ", kmn n undefined in Env Env,\u03a3 `WF Env,\u03a3,\u03a6 `WF all the conditions in [4], Sect.", "startOffset": 69, "endOffset": 72}, {"referenceID": 3, "context": "Typeu \u2264 Typev Typev \u2264 Typeu are declared constraints ([4], Sect.", "startOffset": 54, "endOffset": 57}, {"referenceID": 3, "context": "3) Env,\u03a3,\u03a6,\u0393 ` Typeu \u2193= Typev Typeu \u2264 Typev is a declared constraint ([4], Sect.", "startOffset": 70, "endOffset": 73}], "year": 2012, "abstractText": "The paper describes the refinement algorithm for the Calculus of (Co)Inductive Constructions (CIC) implemented in the interactive theorem prover Matita. The refinement algorithm is in charge of giving a meaning to the terms, types and proof terms directly written by the user or generated by using tactics, decision procedures or general automation. The terms are written in an \u201cexternal syntax\u201d meant to be user friendly that allows omission of information, untyped binders and a certain liberal use of user defined sub-typing. The refiner modifies the terms to obtain related well typed terms in the internal syntax understood by the kernel of the ITP. In particular, it acts as a type inference algorithm when all the binders are untyped. The proposed algorithm is bi-directional: given a term in external syntax and a type expected for the term, it propagates as much typing information as possible towards the leaves of the term. Traditional mono-directional algorithms, instead, proceed in a bottomup way by inferring the type of a sub-term and comparing (unifying) it with the type expected by its context only at the end. We propose some novel bi-directional rules for CIC that are particularly effective. Among the benefits of bi-directionality we have better error message reporting and better inference of dependent types. Moreover, thanks to bi-directionality, the coercion system for sub-typing is more effective and type inference generates simpler unification problems that are more likely to be solved by the inherently incomplete higher order unification algorithms implemented. Finally we introduce in the external syntax the notion of vector of placeholders that enables to omit at once an arbitrary number of arguments. Vectors of placeholders allow a trivial implementation of implicit arguments and greatly simplify the implementation of primitive and simple tactics. 1998 ACM Subject Classification: D.3.1, F.3.0.", "creator": "LaTeX with hyperref package"}}}