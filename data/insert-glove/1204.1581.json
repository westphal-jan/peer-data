{"id": "1204.1581", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Apr-2012", "title": "A new approach of designing Multi-Agent Systems", "abstract": "Agent necropsy technology continuos is a software paradigm that permits to kana implement large rammohan and complex 2,567 distributed applications. In 4-69 order navfor to assist analyzing, conception sprinkles and development or chatwin implementation leontios phases a-d of philippoteaux multi - deheart agent systems, we ' ve indulge tried stayed to 1936-1939 present k\u014dno a odp practical tedd application universalization of adhunik a limavady generic and libman scalable method undulata of lng a dbase MAS with krautz a graminis component - oriented http://www.jpl.nasa.gov architecture and agent - based approach that easygroup allows glf MDA luckman to tyutchev generate jomtien source code from bandera a testarossa given 39.66 model. We ' crutsinger ve designed toyman on AUML warna the self-indulgence class mty diagrams giza as a 147.00 class kipkorir meta - model of publish different abouhalima agents of a MAS. Then sp&s we generated tuszyn the source interwetten code stepherson of the pressurising models dialogic developed using peppery an canelones open source shipper tool called AndroMDA. lathon This supplicated agent - 1,058 based zollernalbkreis and evolutive qinshihuang approach ionized enhances exitosa the modularity trusdell and martynas genericity stansky developments nayif and promotes their packaging reusability in future developments. butzbach This property murtle distinguishes our design manabi methodology azdi of existing methodologies caponiers in that nebulizer it 100-1 is constrained by any particular agent - mortgage-backed based model sourceforge.net while yada providing stonefly a otago library ortolan of 4,429 generic models", "histories": [["v1", "Sat, 7 Apr 2012 00:10:33 GMT  (655kb)", "http://arxiv.org/abs/1204.1581v1", "10 pages, 12 figures, A practical application of a method of designing multi-agent systems based on the AUML language and the MDA approach at \"the 4th IEEE Workshop on Information Technologies and Communication (WOTIC'11)\", Casablanca, 13 - 15 October 2011, International Journal of Advanced Computer Science and Applications(IJACSA) Volume 2 No. 11 November 2011"]], "COMMENTS": "10 pages, 12 figures, A practical application of a method of designing multi-agent systems based on the AUML language and the MDA approach at \"the 4th IEEE Workshop on Information Technologies and Communication (WOTIC'11)\", Casablanca, 13 - 15 October 2011, International Journal of Advanced Computer Science and Applications(IJACSA) Volume 2 No. 11 November 2011", "reviews": [], "SUBJECTS": "cs.MA cs.AI", "authors": ["sara maalal", "malika addou"], "accepted": false, "id": "1204.1581"}, "pdf": {"name": "1204.1581.pdf", "metadata": {"source": "META", "title": "A new approach of designing Multi-Agent Systems", "authors": ["Sara Maalal", "Malika Addou"], "emails": [], "sections": [{"heading": null, "text": "148 | P a g e www.ijacsa.thesai.org\nto implement large and complex distributed applications [1]. In order to assist analyzing, conception and development or implementation phases of multi-agent systems, we\u2019ve tried to present a practical application of a generic and scalable method of a MAS with a component-oriented architecture and agentbased approach that allows MDA to generate source code from a given model. We\u2019ve designed on AUML the class diagrams as a class meta-model of different agents of a MAS. Then we generated the source code of the models developed using an open source tool called AndroMDA. This agent-based and evolutive approach enhances the modularity and genericity developments and promotes their reusability in future developments. This property distinguishes our design methodology of existing methodologies in that it is constrained by any particular agentbased model while providing a library of generic models [2].\nKeyword- Software agents; Multi-agents Systems (MAS); Analysis; Software design; Modeling; Models; Diagrams; Architecture; Model Driven Architecture (MDA); Agent Unified Modeling Language (AUML); Agent Modeling Language (AML).\nI. INTRODUCTION\nCurrently the computer systems are increasingly complex, often distributed over several sites and consist of software interacting with each other or with humans. The need for model human behavior in specific computer programs has prompted officials to use technology that affected the last decade and whose movements are very remarkable. In this context, designing multi-agent systems (MAS) is complex because they require the inclusion of several parts of the system which can often be approached from different angles. We must identify and analyze all system problems to find models for multiagents to implement and integrate them into a coherent system. This is the software engineering and well justifies the use of a method of analysis, design and development of multi-agents systems [2].\nThis paper describes a practical example of a new generic model designed for modeling multi-agent systems and based on a class diagram, defining the different types of agents and meeting our needs for development and testing of MAS applications.\nII. MULTI-AGENT SYSTEMS"}, {"heading": "A. Definitions", "text": "- An agent is a computer system within an environment and with an autonomous behavior made for achieving the objectives that were set during its design [3].\n- A multi-agents system is a system that contains a set of agents that interact with communications protocols and are able to act on their environment. Different agents have different spheres of influence, in the sense that they have control (or at least can influence) on different parts of the environment. These spheres of influence may overlap in some cases; the fact that they coincide may cause dependencies reports between agents [4].\nThe MAS can be used in several application areas such as e-commerce, economic systems, distributed information systems, organizations..."}, {"heading": "B. Types of agent", "text": "Starting from the definitions cited above, we can identify the following agent types [5]:\n The reactive agent is often described as not being \"clever\" by itself. It is a very simple component that perceives the environment and is able to act on it. Its capacity meets mode only stimulus-action that can be considered a form of communication.\n The cognitive agent is an agent more or less intelligent, mainly characterized by a symbolic representation of knowledge and mental concepts. It has a partial representation of the environment, explicit goals, it is capable of planning their behavior, remember his past actions, communicate by sending messages, negotiate, etc..\n The intentional agent or BDI (Belief, Desire and Intention) is an intelligent agent that applies the model of human intelligence and human perspective on the world using mental concepts such as knowledge, beliefs, intentions, desires, choices, commitments. Its behavior can be provided by the award of beliefs, desires and intentions.\n149 | P a g e www.ijacsa.thesai.org\n The rational agent is an agent that acts in a manner allowing it to get the most success in achieving the tasks they were assigned. To this end, we must have measure of performance, if possible objective associated with a particular task that the agent should run.\n The adaptive agent is an agent that adapts to any changes that the environment can have. He is very intelligent as he is able to change its objectives and its knowledge base when they change.\n The communicative agent is an agent that is used to communicate information to all around him. This information can be made of his own perceptions as it may be transmitted by other agents.\nIII. THE DESIGN METHODOLOGIES \u2013 STATE OF THE ART\nBuilding high quality software for real-world applications is a difficult task because of the large number and the flexibility of components but also because of the complexity of interconnections required. The role of software engineering is precisely that of providing methodologies that can facilitate control of this complexity. A methodology by definition can facilitate the process of engineering systems. It consists of guides that cover the entire lifecycle of software development. Some are technical guides; others are managing the project [6].\nWe\u201fll name \u201cmethod\u201d the approach to use a rigorous process for generating a set of models that describe various aspects of software being developed using a well- defined notation.\nTo this end, several software engineering paradigms have been proposed, such as object-oriented design patterns, various software architectures. These paradigms fail especially when it concerns the development of complex distributed systems for two reasons: the interactions between the various entities are defined in a too rigid way and there is no mechanism complex enough to represent the organizational structure system [7]. The paradigm of agents and multi-agent systems can be a good answer to these problems, because the agent-oriented approaches significantly increase our ability to model, design and build complex distributed systems [8].\nThere are many methodologies for analysis and design of multi-agent systems. We cite below some examples of existing methodologies [2]:\n The AAII methodology was developed based on the experience accumulated during the construction of BDI systems. In this methodology, we have a set of templates that, when they have been fully elaborated, define the specifications of agents such as desires, beliefs and intentions [9].\n The first version of Gaia methodology, which modeled agents from the object-oriented point of view, was revisited 3 years later by the same authors in order to represent a MAS as an organized society of individuals [10]. In fact, the agent entity, which is a central element of the meta-model of Gaia, can play one or more roles. A role is a specific behavior to be played by an agent (or kind of agents), defined in term of permissions, responsibilities, activities, and interactions with other roles. When playing a role, an agent updates its behavior in terms of services that can be activated according to some specific pre- and post- conditions. In addition, a role is decomposed in several protocols when agents need to communicate some data. The environment abstraction specifies all the entities and resources a multi-agent system may interact with, restricting the interactions by means of the permitted actions [1].\nThe Gaia methodology gives the possibility to design MAS using an organizational paradigm and to traverse systematically the path that begins by setting out the demands of the problem and to lead to a fairly detailed and immediate implementation [9]. Gaia permits to design a hierarchical non-overlapping structure of agents with a limited depth. From the organizational point of view, agents form teams as they belong to a unique organization, they can explicitly communicate with other agents within the same organization by means of collaborations, and organizations can communicate between them by means of interactions. If inter-organization communication is omitted, coalitions and congregations may also be modeled [1].\nHowever, this methodology is somewhat limited since we can describe MAS with different architectures of agents [9].\n The main contribution of MESSAGE was the definition of meta-models for specification of the elements that can be used to describe each of the aspects that constitute a multi-agent system (MAS) from five viewpoints: organization, agents, goals/tasks, interactions and domain. MESSAGE adopted the Unified Process and centered on analysis and design phases of development [11].\n INGENIAS starts from the results of MESSAGE and provides a notation to guide the development process of a MAS from analysis to implementation [12] [13].\nIt is both a methodology and a set of tools for development of multi-agent systems (MAS). As a methodology, it tries to integrate results from other proposals and considers the MAS from five complementary viewpoints: organization, agent,\n150 | P a g e www.ijacsa.thesai.org\ntasks/goals, interactions, and environment. It is supported by a set of tools for modeling (graphical editor), documentation and code generation (for different agent platforms). The INGENIAS methodology does not explicitly model social norms, although they are implicit in the organizational viewpoint. Organizational dynamics are not considered i.e., how agents can join or leave the system, how they can form groups dynamically, what their life-cycle is, etc [14]. The authors have developed an agent-oriented software tool called INGENIAS Development Kit (IDK) [15]. It allows to edit consistent models (according to INGENIAS specification) and to generate documented code in different languages such as JADE [16], Robocode, Servlets or Gracias Agents [1].\n Multi-agent systems Software Engineering (MaSE) is a start-to-end methodology that covers from the analysis to the implementation of a MAS [17]. The main goal of MaSE is to guide a designer through the software lifecycle from a documented specification to an implemented agent system, with no dependency of a particular MAS architecture, agent architecture, programming language, or message-passing system.\n AUML (Agent Unified Modeling Language) is an evolving standard for a design methodology to support MAS. It is based on the UML methodology used with object oriented systems. This notation was proposed to adapt the UML\u201fs one in order to describe the agentoriented modeling [18].\nAUML provides tools for:\nSpecification protocol of interaction between agents,\nRepresentation of the internal behaviour of an agent, Specification of roles, package interface agent, mobility, etc [2].\n The Agent Modeling Language (AML) is a semiformal\nvisual modeling language for specifying, modeling and documenting systems that incorporate concepts drawn from multi-agents systems (MAS) theory [19].\n ASPECS (Agent-oriented Software Process for Engineering Complex Systems) provides a holonic perspective to design MAS [20]. Considering that complex systems typically exhibit a hierarchical configuration, on the contrary to other methodologies, it uses holons instead of atomic entities. Holons, which are agents recursively composed by other agents, permit to design systems with different granularities until the requested tasks are manageable by individual entities.\nThe goal of the proposed meta-model of ASPECS is to gather the advantages of organizational approaches as well as of those of the holonic vision in the modeling of complex system [1].\nAll these methodologies presented above are still quite recent. They are mainly focused on the analysis phase, whereas design and implementation phases are missing or are redirected to agent-oriented methodologies, which do not offer enough tools to model organizational concepts. Therefore, there is still a gap between analysis and design, which must be specified clearly, correctly and completely [14].\nFinally, the maturity of methodologies can be analyzed by the number of systems that have adopted them. Most of analyzed methodologies have associated applications that show their feasibility. These methodologies have been applied in different fields such as medical informatics [21], manufacturing [20] [22], and e-commerce [23]. MaSE and INGENIAS are the most used ones. Unfortunately, the number of real world applications that use agent-oriented methodologies is still low [1].\nIV. THE MDA APPROACH\nThe MDA (Model Driven Architecture) proposes a methodological framework and architecture for systems development that focuses first on the functionality and application behavior, without worrying about the technology with which the application will be implemented. The implementation of the application goes through the transformation of business models in specific models to a target platform (Fig.2). One research was done in this area as the dissertation of Jarraya T. [24]\nThe business process independent of automation, which comes from the expression of need, is described as a \"CIM\" (Computation Independent Model). The detailed functional analysis, the heart of the process is concentrated in the \"PIM\" (Platform Independent Model), which, as its name suggests, is strictly independent of the technical architecture and the target language. The \"PSM\" (Platform Specific Model) is the model for engineering design obtained by transformation of PIM by projection on the target technical architecture. It is this model that is based on code generation [5].\nThe benefits to businesses on the MDA are primarily:\n151 | P a g e www.ijacsa.thesai.org\n The fact that architectures based on MDA are ready for technological developments.\n The ease of integrating applications and systems around a shared architecture\n Broader interoperability for not being tied to a platform.\nOne of the main tools of MDA, we have AndroMDA who takes as its input a business model specified in the Unified Modeling Language (UML) and generates significant portions of the layers needed to build, for example, a Java application [25]. AndroMDA's ability to automatically translate high-level business specifications into production quality code results in significant time savings when implementing Java applications. The diagram below maps various application layers to, for examples, Java technologies supported by AndroMDA [5].\n Presentation Layer: AndroMDA currently offers two technology options to build web based presentation layers: Struts and JSF. It accepts UML activity diagrams as input to specify page flows and generates Web components that conform to the Struts or JSF frameworks.\n Business Layer: The business layer generated by AndroMDA consists primarily of services that are configured using the Spring Framework. These services are implemented manually in AndroMDAgenerated blank methods, where business logic can be defined. These generated services can optionally be front-ended with EJBs, in which case the services must be deployed in an EJB container (e.g.,JBoss). Services can also be exposed as Web Services,\nproviding a platform independent way for clients to access their functionality. AndroMDA can even generate business processes and workflows for the jBPM workflow engine (part of the JBoss product line).\n Data Access Layer: AndroMDA leverages the popular object-relational mapping tool called Hibernate to generate the data access layer for applications. AndroMDA does this by generating Data Access Objects (DAOs) for entities defined in the UML model. These data access objects use the Hibernate API to convert database records into objects and vice-versa. AndroMDA also supports Enterprise Java Beans EJB3/Seam [26] for data access layer (prerelease).\n Data Stores: Since AndroMDA generated applications use Hibernate to access the data, you can use any of the databases supported by Hibernate.\n Preparation of the project in MagicDraw\n Preparing use cases\n Preparation of class diagram\n Preparation of state charts\n Code Generation\n Generating the database\n Deploy the application\nV. PROPOSED APPROACH\nOur approach is based on model driven architecture (MDA) which aims to establish the link between the existing agent architectures and models or meta-model multi-agent systems that we build based on AUML. Our idea is to offer a design methodology based on agents AUML notation for establishing a generic class diagram that the designer can use to design his system [3]. This diagram is considered as a meta-model which\n152 | P a g e www.ijacsa.thesai.org\nis not generated by any tool and must be defined by the modeler himself.\nOur approach has a lot of benefits, it allows:\n Reducing costs and development times for new applications.\n Improving quality of applications.\n Reducing complexity of application development.\n Ability to generate all the necessary components described.\n Modularity and reusability of the developments.\n Coercion by the MDA model.\n Generating a library of generic models."}, {"heading": "A. Description of the AUML generic Class Diagram", "text": "The diagram is conceived in three layers, each one is represented by a relationship between classes: A first part which is a relation between agent and its environment, a second part of specialisation of the agent class, and at the last part, a specialisation of the cognitive agent class [3].\n1- The first part The first part consists of two important classes:\n- Environment, - Agent\n Environment is an important class on the diagram\nbecause it influences all the system. Environment\u201fs data is represented by two sections, Attributes and\nPerceptions. Attributes can be all the information that an environment should have, plus the following common information:\n Deterministic when the next state of the\nenvironment is determined in a unique way\nby the current state and action of the agent, so the environment is deterministic. If the outcome is uncertain (especially if, as a result of action of the agent, the environment can evolve in different ways), we are in the nondeterministic case.  Static if the environment cannot change its state without the intervention of the agent. The environment is dynamic if its state can\nchange without the action of the agent in the time interval between two perceptions of the agent.  Continuous if any portion of an environment state to another requires passing through a\nsequence of intermediate states, otherwise\nthe environment is discrete. Perception is a section where the designer should determinate all environment perceptions, example: number of agents.\nEnvironment contains several functions allowing to start running, to perceive information from agents linked to it and to modify its state after each action from those agents, that is respectively Run(), Perceive() and ModifState().\n Agent is the main class on the diagram that allows the\ndesigner to express all agent properties. The constructor of Agents takes three sections: Roles, Attributes and Perception. Roles are agent functionalities. Attributes are all information that an agent should possess. And finally Perception which is a section where the designer should determinate all agents\u201f perceptions about his environment or the other agents.\nAgent contains several functions who allows starting running and perceiving information from environment or agents linked to it and to execute all its actions, that\nis respectively Run(), Perceive() and Act(). The first part consists also of two important association\nclasses:\n-Action, between agent and his environment. -Interaction, between agents.\n Action is an association class between agent and environment. It lists all possible actions that an agent\ncan execute on his environment.\n Interaction is a reflexive association class between agents. Agent can request information by the\ngetInformation() function and send it by the inform() function. Agent may also deal with some constraints\n153 | P a g e www.ijacsa.thesai.org\nthat it is possible to inform by the function informaboutConstraintes(). The acceptance of partnership is added also to the main functionalities of Agent by the function acceptPartnerShip().\n2- The second part The second part represents a specialisation relation of the\nAgent class. It consists of three important classes:\n- Reactive agent, - Cognitive agent, - Communicative agent.\n Reactive agent is a type of agent. It possesses the same properties of the Agent class.\n Cognitive agent is another specialization of the Agent class. In this class, the designer should determinate the\nrepresentations of the agent that he must have during\nits execution. The class possesses also one important function \u201cDecide()\u201d where agent can decide to execute an action or not according to his goals.\n Communicative agent is the last specialization of the Agent class. Like Cognitive agent class,\nCommunicative agent class has representations but possesses a different function called \u201cCommunicate()\u201d where agent must use to communicate his information to the other agents.\n3- The third part\nThe third part represents a specialization relation of the Cognitive agent class. It consists of three important classes:\n- Adaptive agent, - Intentional agent, - Rational agent.\n Adaptive agent is a type of cognitive agent. It possesses the same properties of the Agent class, the\nknowledge base and the \u201cDecide()\u201d function. As mentioned in the types of agent section above, an adaptive agent is able to change its objectives and its knowledge base as and when these changes. This functionality is expressed by the \u201cChange_information()\u201d function.\n Intentional agent or BDI Agent is designed from the \"Belief-Desire-Intention\u201d model. It is a type of\ncognitive agent. In the same case of Adaptive Agent class, this class possesses the same properties of the Agent class, the knowledge base and the \u201cDecide()\u201d function. In this class, the designer should determinate the agent\u201fs beliefs represented by the Beliefs section. The\nbeliefs of an agent are the information that the agent has on the environment and other agents that exist in the same environment. Beliefs may be incorrect, incomplete or uncertain, and because of that, they are different from knowledge of the agent, which is\ninformation still true. Beliefs can change over time as the agent by its ability to perceive or interact with other agents, collects more information. The designer should also determinate the agent\u201fs intentions represented by the Intentions section. The\nintentions of an agent are the actions it has decided to do to accomplish his goals. To choose the correct agent\u201fs beliefs from the incorrect ones, this class offers the \u201cRevise_beliefs(Pres, Belief)\u201d function which is based on the agent\u201fs knowledge base and his beliefs. Then, the \u201cGenerate_desires(Belief, int)\u201d function comes to\ngenerate all the agent\u201fs desires that he may be able to accomplish at once. The desires of an agent representing all things the agent would like to see made. An agent may have conflicting desires, in which case he must choose between her desires a subset that is consistent. This subset consists of his\ndesires is identified with the beliefs and the intentions of the agent. Another function comes after that, the \u201cFilter(Belief, Generate_desires, int)\u201d which filters all those elements above and gives the consistent beliefs, desires and intentions of the intentional agent. Finally, the agent can select his actions according to this filtration and execute them by the \u201cActions_selection(Filter)\u201d function.\n Rational agent is the last specialisation of the Cognitive Agent class. Like Intentional Agent class, Rational Agent class has the Beliefs and the Intentions sections but possesses just one function called \u201cMesure_performance(Percept, Belief)\u201d where agent must use to execute his actions as efficient as possible. This function is based both on his perceptions and his beliefs."}, {"heading": "B. The generic UML Class Diagram", "text": "This generic AUML class diagram was subsequently converted into a generic class diagram based on UML notation. This transformation will allow the designer to easily use AndroMDA to generate the source code equivalent to its UML diagram [1].\nThe passage from AUML to UML was performed by following the steps below:\n1. Keep the same titles of classes and associations\nwhich constitute the AUML diagram.\n2. Assign roles, perceptions, intentions, beliefs and representations of each agent, and any possible additional attributes, in the attributes part of the UML class.\n3. Combine all methods or functions in the operations part of the UML class.\nWe can obtain, in the end, the following result shown in Fig. 6:\n154 | P a g e www.ijacsa.thesai.org\nOur approach can present one desadvantage. It is the complexity of generating a good code source by AndroMDA. The model developed at the design phase, should be reliable in order to build the application and realize its implementation without errors [5].\nV. APPLICATION EXAMPLE"}, {"heading": "A. Description", "text": "Our proposed AUML class diagram was used for design of one multi-agent system for a Chat Application. This example is designed as follows [5]:\n Three reactive agents: These agents will be the chatters, the interest that these are reactive agents relies on the fact\nthat an agent doesn't react before the declaration of the name of the receiver by the user of the application. Therefore an agent will react to get ready to catch the\nname and the message and to send it to the appropriate person. He will react also to clear the sent and the received message from their area in his interface.\nWe can respectively obtain the following AUML and UML diagrams corresponding to this example, shown in the Figures 7 and 8:"}, {"heading": "B. Realization", "text": "To validate our model for this example, we\u201fve tried to download AndroMDA with all the required dependencies (including all profiles referenced by models). Then, we generated our project \u00ab ChatAgents \u00bb by running \u00ab mvn\norg.andromda.maven.plugins:andromdaapp-maven plugin:3.4-SNAPSHOT:generate \u00bb. The result of this command is as follows:\nWhen we examine the various folders and files created by the andromdapp plug-in, we will notice files called pom.xml in various folders under ChatAgents. These files make up several Maven projects. In fact, the ChatAgents directory contains a\nhierarchy of Maven projects as shown below [5].\n ChatAgents: This is the master project that controls the overall build process and common properties.\n mda: The mda project is the most important subproject of the application. It houses the ChatAgents\nUML model under the src/main/uml directory. The\nmda project is also where AndroMDA is configured to generate the files needed to assemble the application.\n common: The common sub-project collects resources and classes that are shared among other sub-projects.\nThese include value objects and embedded values.\n155 | P a g e www.ijacsa.thesai.org\nChatAgents\n|\n|-- mda\n|\n|-- common\n|\n|-- core\n|\n|-- web\n|\n+-- app\n core: The core sub-project collects resources and\nclasses that use the Spring framework, optionally making use of Hibernate and/or EJBs under the hood. These include entity classes, data access objects, hibernate mapping files, and services.\n web: The web sub-project collects those resources and classes that make up the presentation layer.\n app: The app sub-project collects those resources and classes that are required to build the .ear bundle.\nBy opening the file \u201cChatAgents.xml\u201d in MagicDraw, we will be able to build various graphs of our model to generate then the source code of the entire application. Note that AndroMDA can't read MagicDraw 17 models directly. Therefore, you can export it to another file format: EMF-UML2.\nAfter import of AndroMDA profiles to use for our application, we designed our class diagram as shown in Fig.10 as follows [5]:\nThe result of exporting our \u201cChatAgents\u201d model to EMFUML2 format is located in the folder C:/ChatAgents/mda/src/main/uml in explorer. Below his content:\n ChatAgents.xml: the MagicDraw 17 model file.\n ChatAgents.uml: ChatAgents model in EMF/UML2 format. It's the file that will be processed by\nAndroMDA.\n 10 files ending with .profile.uml: the different profiles used by ChatAgents.uml\nFollowing the definition of our model, the generation of application code is achieved by executing the command \"mvn install\", the result appears as in the figure [5].\nThus, the class \u201cChat.java\u201d is created and can be easily accessed and modified by the developer where he has the ability to implement its operations in the generated code.\nWe conducted this implementation and got the final result.\nVI. CONCLUSION AND FUTURE SCOPE\nThe purpose of this paper is to demonstrate the feasibility of our approach to analyze, design and implement multi-agent systems. With AUML modeling and MDA, we can generate all the necessary components described by the class meta-model that we proposed. Which leads us to obtain a generic design based on SOA more or less reusable components using one of the most MDA tools used in development is AndroMDA [27].\nIn the future, we would like to model another application sample of our model but in a more complex form using cognitive or adaptive agents and in other platforms like C++, Web services, etc. It will help us to validate the efficacy of our proposed approach and lead us to consider it as a generic approach which can be adopted by every type of information system and used for any real world application.\n156 | P a g e www.ijacsa.thesai.org\nACKNOWLEDGMENT\nI would like to thank to my advisor Ms. M. Addou, Phd. for his invaluable guidance and many useful suggestions during my work on this paper. I would also like to express my gratitude to all those who gave me the possibility to complete this paper.\n157 | P a g e www.ijacsa.thesai.org\nREFERENCES\n[1] D. Isern, D.Sanchez, A.Moreno, \u201cOrganizational structures supported by agent-oriented methodologies\u201d, The journal of Systems and Software,\nvol. 84, n. 2, Oxford, UK: Elsevier, 2011, pp. 169-184.\n[2] S. Maalal, M. Addou, \u201cA Model Design of Multi-Agent Systems\u201d, Proceedings of the 2nd Edition of the IEEE International Conference on\nMultimedia Computing and Systems ICMCS\u201f11, Ouarzazate Morocco, p. 674, 2011.\n[3] M. Wooldridge, Intelligent Agents, Multi agent systems, In The MIT Press, \u201cA modern Approach to Distributed Artificial Intelligence\u201d, (England Massachutts London: MIT Press Cambridge, 1995, p. 27-78)\n[4] M. Wooldridge, An Introduction to Multi-Agent Systems, Wiley & Sons, 2000.\n[5] S. Maalal, M. Addou, \u201cA practical application of a method of designing multi-agent systems based on the AUML language and the MDA approach\u201d, Proceedings of the Fourth Workshop on Information\nTechnologies and Communication WOTIC\u201f11, Casablanca, Morocco, p.104, 2011.\n[6] O. Shehory, A. Sturm, \u201cEvaluation of modeling techniques for agentbases systems\u201d, Proceedings of the 5th International Conference on Autonomous Agents, pp.624-631, 2001.\n[7] N. R. Jennings, \u201cOn agent-based software engineering\u201d, Artificial Intelligence, vol. 117, pp. 277-296, 2000.\n[8] M. Wooldridge, N. R. Jennings, \u201cIntelligent agent: Theory and practice\u201d, The Knowledge Engineering Review, Vol. 10, n. 2, pp. 115-152, 1995.\n[9] A. M. Florea, D. Kayser, S. Pentiuc, A. El Fallah Segrounichi, Intelligents agents, Agents Intelligents, Politechnica University of Bucharest, 2002.\n[10] L. Cernuzzi, T. Juan, L.Sterling, F. Zambonelli, \u201cThe Gaia methodology: basic concepts and extensions\u201d, Methodologies and Software Engeneering for Agent Systems, US: Springer, pp.69-88, 2004.\n[11] J. Pav\u00f3n, , J. G\u00f3mez-Sanz., \u201cAgent Oriented Software Engineering with INGENIAS\u201d, Proceedings of the international Central and Eastern\nEuropean conference on Multi-Agent Systems CEEMAS\u201f03, pp.394403, 2003.\n[12] R. Fuentes-Fern\u00e1ndez, I. Garc\u00eda-Magari\u00f1io, A.M. G\u00f3mez-Rodr\u00edguez, J.C. Gonz\u00e1lez-Moreno, \u201cA technique for defining agent-oriented engineering processes with tool support\u201d, Artificial Intelligence, vol.23,\npp.432-444.\n[13] J. Pav\u00f3n, , J.J. G\u00f3mez-Sanz., R. Fuentes, \u201eThe INGENIAS methodology and tools\u201d in Agent-oriented Methodologies, B. Henderson-Sellers and\nP. Giorgini Eds. Idea Group, 2005, pp. 236\u2013276.\n[14] E. Argente, V. Julian, V. Botti, \u201cMulti-agent system development based on organizations\u201d, Electronic Notes in Theoretical Computer Science,\nvol.150, pp.55-71, 2006.\n[15] IDK (INGENIAS Development Kit), http://sourceforge.net/projects/ingenias/\n[16] JADE (Java Agent DEvelopment Framework), http://jade.tilab.com/.\n[17] S.A. DeLoach, \u201cThe MaSE methodology\u201d, in Methodologies and Software Engineering for Agent Systems, F. Bergenti, M.P Gleizes, F.\nZambonelli, Eds. The Agent-oriented Software Engineering Handbook. Kluwer Academic Publishers, 2004, pp. 107\u2013125\n[18] S. Lynch, K. Rajendran, \u201cDesign Diagrams for Multi-agents Systems\u201d,\nProceedings of the 16th Annual Workshop of the Psychology of Programming Interest Group PPIG\u201f04, pp. 66-78, 2004.\n[19] R. Cervenka, I. Trencansky, \u201cAgent Modeling Language (AML): A Comprehensive Approach to Modeling MAS\u201d, Informatica, vol. 29, n. 4,\npp. 391-400, 2005.\n[20] M. Cossentino, N. Gaud, V. Hilaire, S.Galland, A. Koukam, \u201eASPECS: An Agent-oriented Software Process for Engineering Complex Systems:\nHow to design agent societies under a holonic perspective\u201d, 2010.\n[21] D. Isern, C. G\u00f3mez-Alonso, A. Moreno, \u201cMethodological development of a multi-agent system in the healthcare domain\u201d, Commun, SIWN 3,\npp. 65\u201368, 2008.\n[22] A. Giret, V. Botti, S. Valero, \u201cMAS methodology for HMS\u201d, In the Second International Conference on Industrial Applications of Holonic\nand Multi-Agent Systems HoloMAS, Springer-Verlag, Copenhagen, Denmark, pp. 39\u201349, 2005.\n[23] J. Ferber, O. Gutknecht, F. Michel, \u201cFrom agents to organizations: an organizational view of multi-agent systems\u201d, in Springer-Verlag Berlin\nHeidelberg, P. Giorgini, J. M\u00fcller, J. Odell, Eds 2003, in the 4th International Workshop on Agent-oriented Software Engineering IV (AOSE), Melbourne, Australia, pp. 214\u2013230, 2003.\n[24] T. Jarraya, Re-use of interaction protocols and Career-oriented models for multi-agents development, R\u00e9utilisation des protocoles d\u201finteraction\net D\u00e9marche orient\u00e9e mod\u00e8les pour le d\u00e9veloppement multi-agents , Ph.D. Thesis, Dept. Computer Engineering, University of Reims Champagne Ardenne, France, 2006.\n[25] N. Bhatia, \u201cGetting Started with AndroMDA for Java\u201d (www.andromda.org, 2010).\n[26] JBoss Seam (http://www.jboss.com/products/seam/).\n[27] S. Maalal, M. Addou, \u201cA Model Design of Multi-Agents Systems\u201d, in the International Conference on Models of Information and Communication Systems MICS\u201f10, Rabat, Morocco, 2010, unpublished.\nAUTHORS PROFILE\nSara Maalal was born in Rabat the Morocco\u201fs capital in 1985. She received his professional master in Computer Engineering and Internet (3I), Option: Security Networks and Systems, in 2008 from the Faculty of science of HASSAN II University, Casablanca, Morocco. In 2010 she joined the system architecture team of the National and High School of Electricity and Mechanic (ENSEM: Ecole Nationale Sup\u00e9rieure d\u201fElectricit\u00e9 et de M\u00e9canique), Casablanca, Morocco. Her actual main research interests concern Designing and modeling MultiAgent Systems. Ms. Maalal is actually a Software Engineer in a Moroccan multinational society called Hightech Payment Systems (HPS) which has always proved itself as a leading payment solutions provider.\nMalika Addou received her Ph.D. in Artificial Intelligence from University of Liege, Liege, Belgium, in 1992. She got her engineer degree in Computer Systems from the Mohammadia School of Engineers (EMI : Ecole Mohammadia des ing\u00e9nieurs), Rabat, Morocco in 1982. She is Professor of Computer Science at the Hassania School of Public Works (EHTP : Ecole Hassania des Travaux Publics), Casablanca, since 1982. Her research focuses on Software Engineering (methods and technologies for design and development), on Information Systems (Distributed Systems) and on Artificial Intelligence (especially Multi-Agent Systems technologies)."}], "references": [{"title": "D.Sanchez, A.Moreno, \u201cOrganizational structures supported by agent-oriented methodologies", "author": ["D. Isern"], "venue": "The journal of Systems and Software,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "A Model Design of Multi-Agent Systems", "author": ["S. Maalal", "M. Addou"], "venue": "Proceedings of the 2nd Edition of the IEEE International Conference on Multimedia Computing and Systems ICMCS\u201f11, Ouarzazate Morocco,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "Intelligent Agents, Multi agent systems, In The MIT Press, \u201cA modern Approach to Distributed Artificial Intelligence", "author": ["M. Wooldridge"], "venue": "(England Massachutts London: MIT Press Cambridge,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1995}, {"title": "An Introduction to Multi-Agent", "author": ["M. Wooldridge"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2000}, {"title": "A practical application of a method of designing multi-agent systems based on the AUML language and the MDA approach", "author": ["S. Maalal", "M. Addou"], "venue": "Proceedings of the Fourth Workshop on Information Technologies and Communication WOTIC\u201f11, Casablanca, Morocco,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "Evaluation of modeling techniques for agentbases systems", "author": ["O. Shehory", "A. Sturm"], "venue": "Proceedings of the 5th International Conference on Autonomous Agents,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2001}, {"title": "On agent-based software engineering", "author": ["N.R. Jennings"], "venue": "Artificial Intelligence,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2000}, {"title": "Intelligent agent: Theory and practice", "author": ["M. Wooldridge", "N.R. Jennings"], "venue": "The Knowledge Engineering Review,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1995}, {"title": "Segrounichi, Intelligents agents, Agents Intelligents", "author": ["A.M. Florea", "D. Kayser", "S. Pentiuc", "A. El Fallah"], "venue": "Politechnica University of Bucharest,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2002}, {"title": "The Gaia methodology: basic concepts and extensions", "author": ["L. Cernuzzi", "T. Juan", "L.Sterling", "F. Zambonelli"], "venue": "Methodologies and Software Engeneering for Agent Systems, US: Springer,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2004}, {"title": "The INGENIAS methodology and tools", "author": ["J. Pav\u00f3n", "J.J. G\u00f3mez-Sanz", "R. Fuentes"], "venue": "Idea Group,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2005}, {"title": "Multi-agent system development based on organizations", "author": ["E. Argente", "V. Julian", "V. Botti"], "venue": "Electronic Notes in Theoretical Computer Science, vol.150,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2006}, {"title": "The MaSE methodology", "author": ["S.A. DeLoach"], "venue": "Methodologies and Software Engineering for Agent Systems,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2004}, {"title": "Design Diagrams for Multi-agents Systems", "author": ["S. Lynch", "K. Rajendran"], "venue": "Proceedings of the 16th Annual Workshop of the Psychology of Programming Interest Group PPIG\u201f04,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2004}, {"title": "Trencansky, \u201cAgent Modeling Language (AML): A Comprehensive Approach to Modeling MAS", "author": ["I.R. Cervenka"], "venue": "Informatica, vol. 29,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2005}, {"title": "ASPECS: An Agent-oriented Software Process for Engineering Complex Systems: How to design agent societies under a holonic perspective", "author": ["M. Cossentino", "N. Gaud", "V. Hilaire", "S.Galland", "A. Koukam"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2010}, {"title": "Methodological development of a multi-agent system in the healthcare domain", "author": ["D. Isern", "C. G\u00f3mez-Alonso", "A. Moreno"], "venue": "Commun, SIWN", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2008}, {"title": "MAS methodology for HMS", "author": ["A. Giret", "V. Botti", "S. Valero"], "venue": "In the Second International Conference on Industrial Applications of Holonic and Multi-Agent Systems HoloMAS,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2005}, {"title": "From agents to organizations: an organizational view of multi-agent systems", "author": ["J. Ferber", "O. Gutknecht", "F. Michel"], "venue": "Eds 2003, in the 4th International Workshop on Agent-oriented Software Engineering IV (AOSE),", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2003}, {"title": "Re-use of interaction protocols and Career-oriented models for multi-agents development, R\u00e9utilisation des protocoles d\u201finteraction et D\u00e9marche orient\u00e9e mod\u00e8les pour le d\u00e9veloppement multi-agents", "author": ["T. Jarraya"], "venue": "Ph.D. Thesis,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2006}, {"title": "Getting Started with AndroMDA for Java", "author": ["N. Bhatia"], "venue": "(www.andromda.org,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2010}, {"title": "A Model Design of Multi-Agents Systems\u201d, in the International Conference on Models of Information and Communication Systems MICS\u201f10", "author": ["S. Maalal", "M. Addou"], "venue": "Rabat, Morocco,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": "Abstract\u2014Agent technology is a software paradigm that permits to implement large and complex distributed applications [1].", "startOffset": 118, "endOffset": 121}, {"referenceID": 1, "context": "This property distinguishes our design methodology of existing methodologies in that it is constrained by any particular agentbased model while providing a library of generic models [2].", "startOffset": 182, "endOffset": 185}, {"referenceID": 1, "context": "This is the software engineering and well justifies the use of a method of analysis, design and development of multi-agents systems [2].", "startOffset": 132, "endOffset": 135}, {"referenceID": 2, "context": "- An agent is a computer system within an environment and with an autonomous behavior made for achieving the objectives that were set during its design [3].", "startOffset": 152, "endOffset": 155}, {"referenceID": 3, "context": "These spheres of influence may overlap in some cases; the fact that they coincide may cause dependencies reports between agents [4].", "startOffset": 128, "endOffset": 131}, {"referenceID": 4, "context": "Starting from the definitions cited above, we can identify the following agent types [5]:", "startOffset": 85, "endOffset": 88}, {"referenceID": 5, "context": "Some are technical guides; others are managing the project [6].", "startOffset": 59, "endOffset": 62}, {"referenceID": 6, "context": "These paradigms fail especially when it concerns the development of complex distributed systems for two reasons: the interactions between the various entities are defined in a too rigid way and there is no mechanism complex enough to represent the organizational structure system [7].", "startOffset": 280, "endOffset": 283}, {"referenceID": 7, "context": "The paradigm of agents and multi-agent systems can be a good answer to these problems, because the agent-oriented approaches significantly increase our ability to model, design and build complex distributed systems [8].", "startOffset": 215, "endOffset": 218}, {"referenceID": 1, "context": "We cite below some examples of existing methodologies [2]: \uf0b7 The AAII methodology was developed based on the experience accumulated during the construction of BDI systems.", "startOffset": 54, "endOffset": 57}, {"referenceID": 8, "context": "In this methodology, we have a set of templates that, when they have been fully elaborated, define the specifications of agents such as desires, beliefs and intentions [9].", "startOffset": 168, "endOffset": 171}, {"referenceID": 9, "context": "\uf0b7 The first version of Gaia methodology, which modeled agents from the object-oriented point of view, was revisited 3 years later by the same authors in order to represent a MAS as an organized society of individuals [10].", "startOffset": 217, "endOffset": 221}, {"referenceID": 0, "context": "The environment abstraction specifies all the entities and resources a multi-agent system may interact with, restricting the interactions by means of the permitted actions [1].", "startOffset": 172, "endOffset": 175}, {"referenceID": 8, "context": "The Gaia methodology gives the possibility to design MAS using an organizational paradigm and to traverse systematically the path that begins by setting out the demands of the problem and to lead to a fairly detailed and immediate implementation [9].", "startOffset": 246, "endOffset": 249}, {"referenceID": 0, "context": "If inter-organization communication is omitted, coalitions and congregations may also be modeled [1].", "startOffset": 97, "endOffset": 100}, {"referenceID": 8, "context": "However, this methodology is somewhat limited since we can describe MAS with different architectures of agents [9].", "startOffset": 111, "endOffset": 114}, {"referenceID": 10, "context": "\uf0b7 INGENIAS starts from the results of MESSAGE and provides a notation to guide the development process of a MAS from analysis to implementation [12] [13].", "startOffset": 149, "endOffset": 153}, {"referenceID": 11, "context": ", how agents can join or leave the system, how they can form groups dynamically, what their life-cycle is, etc [14].", "startOffset": 111, "endOffset": 115}, {"referenceID": 0, "context": "It allows to edit consistent models (according to INGENIAS specification) and to generate documented code in different languages such as JADE [16], Robocode, Servlets or Gracias Agents [1].", "startOffset": 185, "endOffset": 188}, {"referenceID": 12, "context": "\uf0b7 Multi-agent systems Software Engineering (MaSE) is a start-to-end methodology that covers from the analysis to the implementation of a MAS [17].", "startOffset": 141, "endOffset": 145}, {"referenceID": 13, "context": "This notation was proposed to adapt the UML\u201fs one in order to describe the agentoriented modeling [18].", "startOffset": 98, "endOffset": 102}, {"referenceID": 1, "context": "\uf0d8\uf020Specification protocol of interaction between agents, \uf0d8\uf020Representation of the internal behaviour of an agent, \uf0d8\uf020Specification of roles, package interface agent, mobility, etc [2].", "startOffset": 177, "endOffset": 180}, {"referenceID": 14, "context": "\uf0b7 The Agent Modeling Language (AML) is a semiformal visual modeling language for specifying, modeling and documenting systems that incorporate concepts drawn from multi-agents systems (MAS) theory [19].", "startOffset": 197, "endOffset": 201}, {"referenceID": 15, "context": "\uf0b7 ASPECS (Agent-oriented Software Process for Engineering Complex Systems) provides a holonic perspective to design MAS [20].", "startOffset": 120, "endOffset": 124}, {"referenceID": 0, "context": "The goal of the proposed meta-model of ASPECS is to gather the advantages of organizational approaches as well as of those of the holonic vision in the modeling of complex system [1].", "startOffset": 179, "endOffset": 182}, {"referenceID": 11, "context": "Therefore, there is still a gap between analysis and design, which must be specified clearly, correctly and completely [14].", "startOffset": 119, "endOffset": 123}, {"referenceID": 16, "context": "These methodologies have been applied in different fields such as medical informatics [21], manufacturing [20] [22], and e-commerce [23].", "startOffset": 86, "endOffset": 90}, {"referenceID": 15, "context": "These methodologies have been applied in different fields such as medical informatics [21], manufacturing [20] [22], and e-commerce [23].", "startOffset": 106, "endOffset": 110}, {"referenceID": 17, "context": "These methodologies have been applied in different fields such as medical informatics [21], manufacturing [20] [22], and e-commerce [23].", "startOffset": 111, "endOffset": 115}, {"referenceID": 18, "context": "These methodologies have been applied in different fields such as medical informatics [21], manufacturing [20] [22], and e-commerce [23].", "startOffset": 132, "endOffset": 136}, {"referenceID": 0, "context": "Unfortunately, the number of real world applications that use agent-oriented methodologies is still low [1].", "startOffset": 104, "endOffset": 107}, {"referenceID": 19, "context": "[24]", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "It is this model that is based on code generation [5].", "startOffset": 50, "endOffset": 53}, {"referenceID": 20, "context": "One of the main tools of MDA, we have AndroMDA who takes as its input a business model specified in the Unified Modeling Language (UML) and generates significant portions of the layers needed to build, for example, a Java application [25].", "startOffset": 234, "endOffset": 238}, {"referenceID": 4, "context": "The diagram below maps various application layers to, for examples, Java technologies supported by AndroMDA [5].", "startOffset": 108, "endOffset": 111}, {"referenceID": 4, "context": "The generation process of AndroMDA is as follows [5] :", "startOffset": 49, "endOffset": 52}, {"referenceID": 2, "context": "Our idea is to offer a design methodology based on agents AUML notation for establishing a generic class diagram that the designer can use to design his system [3].", "startOffset": 160, "endOffset": 163}, {"referenceID": 2, "context": "The diagram is conceived in three layers, each one is represented by a relationship between classes: A first part which is a relation between agent and its environment, a second part of specialisation of the agent class, and at the last part, a specialisation of the cognitive agent class [3].", "startOffset": 289, "endOffset": 292}, {"referenceID": 0, "context": "This transformation will allow the designer to easily use AndroMDA to generate the source code equivalent to its UML diagram [1].", "startOffset": 125, "endOffset": 128}, {"referenceID": 4, "context": "The model developed at the design phase, should be reliable in order to build the application and realize its implementation without errors [5].", "startOffset": 140, "endOffset": 143}, {"referenceID": 4, "context": "This example is designed as follows [5]:", "startOffset": 36, "endOffset": 39}, {"referenceID": 4, "context": "In fact, the ChatAgents directory contains a hierarchy of Maven projects as shown below [5].", "startOffset": 88, "endOffset": 91}, {"referenceID": 4, "context": "10 as follows [5]:", "startOffset": 14, "endOffset": 17}, {"referenceID": 4, "context": "Following the definition of our model, the generation of application code is achieved by executing the command \"mvn install\", the result appears as in the figure [5].", "startOffset": 162, "endOffset": 165}, {"referenceID": 21, "context": "Which leads us to obtain a generic design based on SOA more or less reusable components using one of the most MDA tools used in development is AndroMDA [27].", "startOffset": 152, "endOffset": 156}], "year": 2011, "abstractText": "Agent technology is a software paradigm that permits to implement large and complex distributed applications [1]. In order to assist analyzing, conception and development or implementation phases of multi-agent systems, we\u2019ve tried to present a practical application of a generic and scalable method of a MAS with a component-oriented architecture and agentbased approach that allows MDA to generate source code from a given model. We\u2019ve designed on AUML the class diagrams as a class meta-model of different agents of a MAS. Then we generated the source code of the models developed using an open source tool called AndroMDA. This agent-based and evolutive approach enhances the modularity and genericity developments and promotes their reusability in future developments. This property distinguishes our design methodology of existing methodologies in that it is constrained by any particular agentbased model while providing a library of generic models [2]. KeywordSoftware agents; Multi-agents Systems (MAS); Analysis; Software design; Modeling; Models; Diagrams; Architecture; Model Driven Architecture (MDA); Agent Unified Modeling Language (AUML); Agent Modeling Language (AML).", "creator": "Microsoft Word 2010"}}}