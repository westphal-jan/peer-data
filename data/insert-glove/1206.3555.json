{"id": "1206.3555", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Jun-2012", "title": "A Dynamic Programming Algorithm for Inference in Recursive Probabilistic Programs", "abstract": "corrido We describe a adv22 dynamic easyriders programming algorithm micron for biscuit computing marc-andre the caritas marginal hodulik distribution marc-andre of baerga discrete probabilistic amali programs. walkyier This yardy algorithm takes a dramatical functional interpreter for tenaris an arbitrary probabilistic clucas programming igh language waggon and larnaka turns it szabolcs into an thingol efficient marginalizer. Because direct 2,470 caching bouquets of 3-0-15-0 sub - o\u00f1ate distributions asuque is impossible in undrained the presence of recursion, we antisense build white-collared a graph trasimene of forres dependencies between sub - bihac distributions. pollin This samis factored sum - oryzias product sisqo network djeter makes (majordomo potentially kallay cyclic) dependencies rosinski between subproblems dowlat\u0101b\u0101d explicit, and perlite corresponds to a system of sensenbrenner equations for the 16.7 marginal isumi distribution. malefactors We solve simpleminded these equations biranchi by fixed - goggins point iteration incomprehension in g\u00f6rges topological theming order. We lovkvist illustrate pinene this hippler algorithm on uk examples used in scalia teaching probabilistic models, bivouacking computational cognitive nine-minute science palomar research, nine-foot and game risqu\u00e9 theory.", "histories": [["v1", "Fri, 15 Jun 2012 19:44:02 GMT  (258kb,D)", "https://arxiv.org/abs/1206.3555v1", null], ["v2", "Mon, 10 Sep 2012 22:00:30 GMT  (261kb,D)", "http://arxiv.org/abs/1206.3555v2", "Second Statistical Relational AI workshop at UAI 2012 (StaRAI-12)"]], "reviews": [], "SUBJECTS": "cs.AI cs.DS", "authors": ["andreas stuhlm\\\"uller", "noah d goodman"], "accepted": false, "id": "1206.3555"}, "pdf": {"name": "1206.3555.pdf", "metadata": {"source": "CRF", "title": "A Dynamic Programming Algorithm for Inference in Recursive Probabilistic Programs", "authors": ["Andreas Stuhlm\u00fcller", "Noah D. Goodman"], "emails": [], "sections": [{"heading": null, "text": "We describe a dynamic programming algorithm for computing the marginal distribution of discrete probabilistic programs. This algorithm takes a functional interpreter for an arbitrary probabilistic programming language and turns it into an efficient marginalizer. Because direct caching of sub-distributions is impossible in the presence of recursion, we build a graph of dependencies between sub-distributions. This factored sum-product network makes (potentially cyclic) dependencies between subproblems explicit, and corresponds to a system of equations for the marginal distribution. We solve these equations by fixed-point iteration in topological order. We illustrate this algorithm on examples used in teaching probabilistic models, computational cognitive science research, and game theory."}, {"heading": "1 INTRODUCTION", "text": "Probabilistic programming allows rapid prototyping of complexly structured probabilistic models without requiring the design of model-specific inference algorithms. This makes probabilistic programs attractive for scientific research: when hypotheses are formalized as programs, it is possible to quickly explore the space of hypotheses. The same features make probabilistic programs compelling for education: students can focus on understanding modeling and inference patterns before they need to learn about inference implementations.\nHowever, the performance of current inference algorithms for generic probabilistic programs can vary greatly between models, even for models with a very small number of random choices. This presents an obstacle to the use of probabilistic programs in research\nand teaching. In fact, many of the models used in these domains are small enough that exact computation is feasible in principle, but they often exhibit patterns, such as nested conditioning, that make naive enumeration intractable.\nIn this paper we develop a generic dynamic programming algorithm, which expands the applicability of exact inference for probabilistic programs. Given an interpreter for an arbitrary probabilistic programming language and a discrete probabilistic program, this algorithm computes the marginal distribution of the program\u2014i.e., its distribution on return values\u2014while sharing subcomputations where possible. By viewing conditioning as marginalization of a rejection sampler, this captures the full range of probabilistic operations over arbitrary models.\nThe key obstacle to dynamic programming, which is neither present in caching deterministic interpreters nor in dynamic programming algorithms for more restricted model classes, is the possibility of stochastic self-recursion: an interpreter call with particular arguments can result in a call with the same arguments. Figure 1a shows a program that exhibits this property. This is not a corner case: for instance, all models that implement conditioning via rejection sampling have this property (Figure 1b).\nTo make dynamic programming possible in the presence of recursion, we first compile the given probabilistic program to an intermediate representation that reifies dependencies between sub-distributions. We then compute the marginal distribution from this representation. Our intermediate representation is a generalization of sum-product networks (Poon and Domingos, 2011) that makes dependencies\u2014including recursive dependencies\u2014explicit: a factored sum-product network (FSPN). While computing the distribution implied by a sum-product network is linear in the size of the network, FSPNs are more difficult to solve in general. We solve FSPNs by clustering their vertices into strongly connected components and by solving each\nar X\niv :1\n20 6.\n35 55\nv2 [\ncs .A\nI] 1\n0 Se\np 20\ncomponent using fixed-point iteration.\nIn the following, we first describe the structures our algorithm operates on: probabilistic programs, their interpreters, and FSPNs. We then present the two steps of our algorithm, compilation of programs to FSPNs and computation of marginal distributions given a FSPN. We demonstrate the algorithm on examples used in teaching, cognitive science research, and game theory, and explain what makes it attractive in each case. We relate the algorithm to the literature and conclude with future research directions."}, {"heading": "2 PROBABILISTIC PROGRAMS", "text": "A probabilistic program is a program in a language with primitives for sampling from distributions such as Bernoulli and multinomial. Probabilistic programs describe generative models and thus denote distributions. An interpreter specifies this denotation by implementing a process that, given a program, generates samples from the program\u2019s distribution. For example, an interpreter for the Church language (Goodman et al., 2008) takes a program expression and environment, and returns a sample from the program\u2019s distribution on Church values. This sample is generated using recursive calls to the interpreter, with each subcall defining a distribution on values and resulting in a sample from this sub-distribution.\nThe problem of inference for generative models is commonly formulated in terms of a conditioning. However, for any conditional distribution there is an equivalent unconditioned model that samples outcomes with the same probabilities. Inference can be understood as the problem of marginalization of this new model.\nA simple way to construct a generative model which\nsamples from some conditional distribution is via rejection sampling. Figure 1b shows how this works in the Church language. Assume that the procedure joint draws samples from some joint distribution and that condition? is a predicate which checks whether some condition holds for each sample. The recursive procedure rejection draws samples from joint conditional on condition?. Crucially, this procedure makes use of no special conditioning operator but samples directly from the conditional distribution of interest.\nOf course, drawing conditional samples using rejection is very inefficient: In general, we may have to tolerate an exponential number of rejected samples before the condition is satisfied. However, if we could efficiently marginalize the rejection procedure, eliminating all zero-probability paths, then we would have solved our target inference problem.\nFor many probabilistic programs, efficient marginalization of this sort is possible. We are interested in programs for which many different executions share substructure. Problems with this character are classically amenable to dynamic programming. Recursive programs, like rejection, which involve multiple executions of the same procedure application, provide a particularly rich opportunity to exploit shared substructure. We will focus on these cases in the examples below."}, {"heading": "3 FACTORED SUM-PRODUCT NETWORKS", "text": "In the process of computing the marginal distribution for a given probabilistic program, we use factored sum-product networks as an intermediate representation between original program and marginal distribution. Like sum-product networks (Poon and Domingos, 2011), this representation factors out all \u201cdeterministic\u201d computation, leaving only probability calculations, i.e., sums and products. In addition, it makes explicit the dependencies between the distributions resulting from subcomputations.\nDefinition 1. A factored sum-product network (FSPN) over variables x1, . . . , xd is a directed graph with a uniquely labeled root node r. The internal nodes are sums and products. The leaves are indicators x1, . . . , xd and x\u03041, . . . , x\u0304d, and reference nodes (y, ~x), where y is another node and ~x a vector of indicator values. Each edge (i, j) from a sum node i has a nonnegative weight wij.\nLet Ch(y) denote the children of node y. The value V(y, ~x) of a node y is defined as \u2211 z\u2208Ch(y) wyzV(z, ~x)\nif y is a sum, as \u220f\nz\u2208Ch(y) V(z, ~x) if y is a product, as 1~xj=xj if y is an indicator xj , and as V(z, ~w)\nif y is a reference (z, ~w). This defines a system of equations. We denote the factored sum-product network F as a function of the indicator variables ~x = (x1, . . . , xd, x\u03041, . . . , x\u0304d) by F (~x) = V(r, ~x). For any given ~x, the value of the FSPN is the solution to the system of equations F (~x) (if a unique solution exists)."}, {"heading": "4 ALGORITHM", "text": ""}, {"heading": "4.1 Overview", "text": "Our algorithm solves the following problem: Given a functional interpreter for a probabilistic programming language, how can we build an efficient marginalizer? In other words: How can we turn a universal sampler into a generic dynamic programming algorithm?\nIf the interpreter were deterministic, we could just memoize it. If it were an interpreter for a stochastic language that does not allow self-recursion, i.e., where an interpreter call can never result in an interpreter call with the same arguments, we could use the interpreter to recursively compute and cache the distribution for each unique interpreter call. For languages that allow self-recursion, direct caching is no longer feasible, since it could lead to infinite regress.\nOn a high level, our approach is this: our algorithm takes as input the interpreter and a program, and builds a factored sum-product network, which can then be solved using methods such as fixed-point iteration. We intercept any recursive calls the interpreter makes to itself and any calls it makes to its source of randomness, and build network structure that reflects these calls. The FSPN constructed in this way describes the marginal distribution of the interpreted program."}, {"heading": "4.2 Interpreters as Factored Coroutines", "text": "As a prerequisite for the description of our algorithm, we now present mathematical objects that formalize the idea of an interpreter as a coroutine.\nLet V be a countable domain of values that a probabilistic program can return, and let P(V) be the domain of probability measures on V.\nLet C, R, S, and X denote the (as yet undefined) domains of continuations, random choices, subcalls, and partial results. Loosely speaking, (1) continuations are functions from values to partial results, (2) random choices are pairs of continuations and distributions on values, (3) subcalls are pairs of continuations and partial results, and (4) partial results are either values, random choices, or subcalls.\nFormally, let C,R,S, and X be the smallest domains satisfying the recursive domain equations:\nC = V \u2192 X (1) R = C \u00d7 P(V) (2) S = C \u00d7 X (3)\nX = V \u222aR \u222a S (4)\nAn interpreter is a function from partial results to partial results."}, {"heading": "4.3 Compiling Programs to FSPNs", "text": "BuildFSPN, shown in Algorithm 1, takes as arguments an interpreter in factored coroutine form and an initial interpreter argument xinit. The algorithm steps through all possible execution paths while building the corresponding factored sum-product network, but avoiding duplicate evaluation of subproblems. We first describe three ingredients for this procedure\u2014the task queue, constant-time subcall identification, and factorization grain\u2014then the algorithm BuildFSPN.\nTask queue. In programs with self-recursive calls, the exploration order of different execution paths can be highly constrained. For example, in order to evaluate the first if-branch of (game true) in Figure 1a, we need to know at least one of the return values of (game (not true)), but these in turn depend on the return values of (game true). In order to let pro-\ngram exploration be guided by what return values are known, we maintain a map terminals, which maps each root node to all known terminal values reachable from it, and a map callbacks, which maps each root node to a list of callbacks. A callback is a pair of a node n and a continuation c. When a new terminal v is found below a root node associated with callback (n, c), the call c(v) is used to continue evaluation and network building in the original context.\nConstant-time subcall identification. At each subcall, we need to determine whether the subcall is new or whether it has already been assigned a FSPN node. For the algorithm to have constant-time overhead over steps of the underlying interpreter, it is crucial that this computation takes place in constant time, i.e., it must not depend on the size of the interpreter arguments. This suggests the use of an underlying interpreter that represents values in a compressed way, e.g., using the value-number technique described in Aho et al. (2007). In Algorithm 1, subproblem maps interpreter arguments to network nodes.\nFactorization grain. There are two ways to determine how much information sharing takes place: (1) While the interpreter may cede control at all recursive calls, it does not need to for our algorithm to be valid. There is a continuum between building a fully factored FSPN and building a tree of random choices without factorization. In our experiments, we have found it advantageous to factor at all calls that correspond to function applications. (2) What information the underlying interpreter passes to its recursive calls affects sharing. In Church, where interpreter arguments consist of expressions and environments, restricting environments to relevant environments is critical for efficient dynamic programming.\nAlgorithm. Our algorithm maintains a queue of tasks, initialized to a single task for the first interpreter call. Each task is a tuple of a thunk f (a function without arguments), a previous node nprev, and an edge weight wprev (a probability). While the queue is not empty, the algorithm takes the first task in the queue and evaluates the function call f(). There are three types of return values (partial results): subcalls, random choices, and terminal values. We process the value according to its type:\nSubcalls are pairs of a continuation c and an interpreter argument s. At subcalls, we build a sum node ncur that will have one child for each return value of the subcall.\nIf this is a new subcall, we add a new root node to the network and add to the queue the task of exploring this subcall, starting from the root node.\nIf this is a known subcall, we look up what root node\nAlgorithm 1: Compiling probabilistic programs to factored sum-product networks\nprocedure BuildFSPN(I, xinit) G = Graph() r = G.addNode(root) Q = [(\u03bb.I(xinit), r, 1.0)] terminals, callbacks, subproblem = {}, {}, {} while Q is not empty do\n(f, nprev, wprev) = Q.pop() x = f() if x is a value v then\nncur = G.addNode(indicator, v) r = G.root[nprev] if v /\u2208 terminals[r] then\nfor all (n\u2032, c) in callbacks[r] do processTerminal(G, Q, r, v, n\u2032, c)\nterminals[r].add(v)\nelse if x is a random choice (c, ~v, ~p) then ncur = G.addNode(sum) for all v, p \u2208 ~v, ~p do\nQ.enqueue(\u03bb.c(v), ncur, p)\nelse if x is a subcall (c, s) then ncur = G.addNode(sum) if s /\u2208 subproblem.keys() then\nr = G.addNode(root) subproblem[s] = r Q.enqueue(\u03bb.I(s), r, 1.0)\nelse r = subproblem[s] for all v \u2208 terminals[r] do\nprocessTerminal(G, Q, r, v, ncur, c)\ncallbacks[r].add((ncur, c))\nG.addEdge(nprev, ncur, wprev) return G\nend procedure\nprocedure ProcessTerminal(G, Q, nroot, v, nprev, c) nprod = G.addNode(product) nref = G.addNode(ref, nroot, v) G.addEdge(nprev, nprod, 1.0) G.addEdge(nprod, nref , 1.0) Q.enqueue(\u03bb.c(v), nprod, 1.0) end procedure\nit corresponds to and process all return values known for this subcall. For each such value, we add a product and reference node, and add to the queue the task of continuing evaluation using the continuation c.\nFinally, we store in callbacks for the root node r the continuation c together with ncur such that, when new return values for the subcall are found, we can continue building the network in the current context.\nRandom choices are tuples of a continuation c, values ~v, and probabilities ~p. We add a sum node ncur and enqueue a call to the continuation for each value in ~v.\nTerminal values cause indicator nodes to be built. If a value is new for the current subproblem r, we notify all contexts waiting for return values under r by\ncalling ProcessTerminal once for each callback associated with r."}, {"heading": "4.4 Solving FSPNs", "text": "A FSPN corresponds to a system of equations (Section 3). For probabilistic programs, this system tends to be sparse, reflecting the fact that, in general, most interpreter calls that occur in the process of enumerating a given program do not depend on most other calls. We therefore cluster the equations into strongly connected components and solve the clusters of equations in topological order. Computing a topological order of strongly connected components is linear in the size of the graph (Tarjan, 1972). By solving in topological order we know that all probabilities required to compute the solution of a component have been computed once we reach this component.\nIn our examples, we use a simple substitution-based equation simplifier, fixed-point iteration, and Newton\u2019s method to solve these equations. Exploring the use of other solution methods is a potential venue for future performance improvements."}, {"heading": "5 EMPIRICAL EVALUATION", "text": "In this section, we describe three situations where we have found generic dynamic programming to be useful: teaching probabilistic models, research in computational cognitive science, and analysis of multi-agent reasoning in game-theoretic situations. We present an example for each of these situations and compare dynamic programming to other inference algorithms.\nIn teaching probabilistic models, we usually aim to present modeling and inference patterns before we discuss the internals of inference algorithms, since the former provide motivation for the latter. The Probabilistic Models of Cognition tutorial by Goodman et al. (2011) follows this approach and has been used in graduate classes at MIT and Stanford. Since implementations of probabilistic programming languages supply universal inference algorithms, it is possible to nonetheless allow students to experiment with models and solve exercises.\nHowever, the performance of existing \u201cuniversal\u201d algorithms strongly depends on the structure of the models they are applied to, even for models with a very small number of variables. Rejection sampling is only feasible as long as we do not condition on low-probability events; MCMC requires that the distribution does not have modes that are isolated with respect to the proposal structure of the algorithm.\nEven in cases where sampling is feasible, it poses a\nchallenge to students: it can be difficult to distinguish approximation noise from systematic inference patterns. For Metropolis-Hastings in the space of program traces (Goodman et al., 2008; Wingate et al., 2011), quantitative analysis of mixing times does not exist, hence analysis of convergence can be difficult even for experts; students\u2019 lack of background knowledge exacerbates this effect.\nFor example, consider the rope-pulling game (Figure 3), a simple probabilistic program without nested conditioning. Figure 4 shows how the L1 error between the estimated and true posterior distribution develops over time for rejection, MCMC, and dynamic programming. While MCMC has difficulty mixing between modes, and while rejection computes estimates using very few samples due to a low-probability condition, dynamic programming deterministically returns the exact answer after about 6 seconds.\nIn cognitive science research, we wish to quickly explore a wide range of model variations. While the model prototypes used in research have a tiny number of variables compared to the state of the art in\nmachine learning, they are structurally complex and use features such as mutual recursion, nested conditioning, and stochastic higher-order functions. Probabilistic programming makes it possible to explore this space without building custom inference algorithms.\nThe caveat that the performance of current samplingbased algorithms strongly depends on models, even in small state spaces, applies here as well. For example, Goodman and Stuhlmu\u0308ller (2012) proposed a model of language understanding based on the idea that listeners assume that speakers choose their utterances approximately optimally, and that listeners interpret an utterance by using Bayesian inference to \u201cinvert\u201d this model of the speaker. Figure 5 shows part of a model of this type that predicts an interaction between the speaker\u2019s state of knowledge and the listener\u2019s interpretation of scalar implicatures (e.g., \u201csome\u201d implies \u201cnot all\u201d). Using dynamic programming, the time it takes to compute the marginal distribution for this model grows linearly in the depth of recursive reasoning, whereas for current sampling techniques, inference time grows exponentially.\nMoreover, some of the model features that are of research interest do not easily fit into the sampling framework. For example, in softmax-optimal decisionmaking, an action a is chosen according to exponentiated expected utility under a belief distribution P (s), i.e., P (a) \u221d exp ( \u03b1EP (s)[U(a; s)] ) . A direct translation into a probabilistic language with sampling semantics seems to require additional programming constructs that reify distributions. Such constructs can be\nprovided more easily in the setting of exact inference.\nThe analysis of multi-agent reasoning in gametheoretic situations shares many properties with cognitive science research, but places even more emphasis on multiply nested conditioning. This commonly rules out existing sampling-based algorithms. At the same time, enumeration is often not an option either, since exploiting shared structure is critical in reducing the state space to tractable size: in the analysis of multiple agents thinking about one another, we can share computation between all agents, actual and counterfactual, that are modeled as being in the same state of mind.\nAs a particularly difficult example, consider the \u201cblueeyed islanders\u201d puzzle, a well-known problem in epistemic logic (Tao, 2008). The setup is as follows: There is a tribe on a remote island. Out of the n people in this tribe, m have blue eyes. Their religion forbids them to know their own eye color, or even to discuss the topic. Therefore, everyone sees the eye color of every other islander, but does not know their own eye color. If an islander discovers their color, they have to publicly announce this at noon and leave the island. All islanders are highly logical. One day, a foreigner comes to the island and\u2014speaking to the entire tribe\u2014 he says: \u201cAt least one of you has blue eyes.\u201d What happens next? Results for a stochastic version of this puzzle are shown in Figure 6.\nThe difficulty of this model stems from the fact that each day, every islander reasons about the reasoning of all of the other islanders on the previous day, and that\ntheir reasoning must again include all islanders\u2019 reasoning on the day before the previous day, etc. However, due to the symmetry of the setup, all islanders with blue eyes and all islanders without blue eyes do the same computation on any given day. Their computations are merged by our algorithm, which makes exact inference feasible for small populations."}, {"heading": "6 RELATED WORK", "text": "Our algorithm is related to and inspired by a long tradition of algorithms which use dynamic programming to exploit reusable structure in the natural language processing, logic programming, and functional programming literatures. For example, it is known that, in general, exactly solving problems such as marginalization for arbitrary recursive programs leads to systems of nonlinear equations (see, e.g., comments in Eisner et al., 2005). Klein and Manning (2001) exploit strongly connected components of the computation graph for PCFGs to perform efficient exact marginalization in a way similar to the present algorithm. It is beyond the scope of this paper to review the many connections with individual algorithms presented in the literature. Instead, we focus on three systems which attempt use dynamic programming to provide general inference algorithms for universal, probabilistic (or, more generally, weighted) programming languages: IBAL, PRISM, and Dyna.\nThe most closely related system to the present work is\nthe functional programming language IBAL, a probabilistic variant of ML (Pfeffer, 2001). IBAL provides an exact marginalization algorithm for discrete probabilistic models, which is based on a generalization of variable elimination applied to computation graphs. The graph used by this algorithm also exploits sharable subcomputations across the evaluation of the probabilistic program. However, the present algorithm is more general than the IBAL algorithm in an important way. The IBAL algorithm relies on acyclic computation graphs; this is equivalent to the requirement that the computation be evidence-finite (Koller et al., 1997)\u2014there must only be a finite number of computations which can give rise to the observed evidence. By contrast, our algorithm handles many cases of evidence-infinite computation. For example, the simple recursive program shown in Figure 1a, which has finite support {true, false} but an infinite number of computations which give rise to each support value, cannot be marginalized by IBAL, but is correctly handled by our algorithm. Practical examples of such evidence-infinite computations include the nested-query models for multi-agent reasoning that we have described above.\nAnother system which is similar to the present work is PRISM, a probabilistic generalization of Prolog, which also makes use of dynamic programming to provide a general inference algorithm. Although PRISM is able to recover many standard algorithms for problems such as PCFG estimation (e.g., the inside-outside al-\ngorithm), like IBAL, it cannot handle evidence-infinite computations (Sato, 2009).\nA somewhat different approach is Dyna (Eisner et al., 2005), a programming language for expressing weighted deductive logic programs. Dyna makes use of generalizations of parsing-as-deduction (Shieber et al., 1995) and semi-ring parsing (Goodman, 1999) to compile weighted logic programs into highly optimized dynamic programs. Dyna differs from our algorithm in the target level of abstraction. Our algorithm is focused on the problem of rapid prototyping of models for which no standard dynamic programming algorithm exists. The programmer simply provides an interpreter, and our algorithm automatically exploits whatever sharing is exposed by the structure of the recursive calls made in the process of computing the marginal distribution for a particular model. By contrast, Dyna is a language for abstractly expressing specific dynamic programming algorithms and compiling these algorithms to highly efficient code. It allows the programmer lower-level control over algorithm specification, but it also requires the programmer to specify these algorithmic details."}, {"heading": "7 CONCLUSION", "text": "We have developed a dynamic programming algorithm for exact inference in probabilistic programs. We have illustrated how this algorithm aids the use of probabilistic programs in teaching and research. Future work includes incorporating techniques from other approaches to dynamic programming (such as evidence propagation from IBAL, and efficient code generation from Dyna) and exploring techniques for approximate dynamic programming."}, {"heading": "Acknowledgements", "text": "The authors would like to thank Daniel Roy and Timothy O\u2019Donnell for helpful discussions and contributions to early stages of this project. This work was supported by ONR grant N00014-09-0124."}], "references": [{"title": "Knowledge and implicature: Modeling language understanding as social cognition", "author": ["N.D. Goodman", "A. Stuhlm\u00fcller"], "venue": "In Proceedings of the Thirty-Fourth Annual Conference of the Cognitive Science Society,", "citeRegEx": "Goodman and Stuhlm\u00fcller.,? \\Q2012\\E", "shortCiteRegEx": "Goodman and Stuhlm\u00fcller.", "year": 2012}, {"title": "Church: a language for generative models", "author": ["N.D. Goodman", "V. Mansinghka", "D.M. Roy", "K. Bonawitz", "J.B. Tenenbaum"], "venue": "Proceedings of the 24th Conference in Uncertainty in Artificial Intelligence,", "citeRegEx": "Goodman et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Goodman et al\\.", "year": 2008}, {"title": "Probabilistic models of cognition, 2011. URL http://projects", "author": ["N.D. Goodman", "J.B. Tenenbaum", "T.J. O\u2019Donnell", "the Church Working Group"], "venue": null, "citeRegEx": "Goodman et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Goodman et al\\.", "year": 2011}, {"title": "Effective bayesian inference for stochastic programs", "author": ["D. Koller", "D. McAllester", "A. Pfeffer"], "venue": "In Proceedings of the National Conference on Artificial Intelligence,", "citeRegEx": "Koller et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Koller et al\\.", "year": 1997}, {"title": "IBAL: A probabilistic rational programming language", "author": ["A. Pfeffer"], "venue": "In Proceedings of the International Joint Conferences on Artificial Intelligence,", "citeRegEx": "Pfeffer.,? \\Q2001\\E", "shortCiteRegEx": "Pfeffer.", "year": 2001}, {"title": "Sum-product networks: A new deep architecture", "author": ["H. Poon", "P. Domingos"], "venue": "Proc. 12th Conf. on Uncertainty in Artificial Intelligence,", "citeRegEx": "Poon and Domingos.,? \\Q2011\\E", "shortCiteRegEx": "Poon and Domingos.", "year": 2011}, {"title": "Generative Modeling by PRISM", "author": ["T. Sato"], "venue": "Logic Programming,", "citeRegEx": "Sato.,? \\Q2009\\E", "shortCiteRegEx": "Sato.", "year": 2009}, {"title": "Principles and implementation of deductive parsing", "author": ["S.M. Shieber", "Y. Schabes", "F.C.N. Pereira"], "venue": "The Journal of Logic Programming,", "citeRegEx": "Shieber et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Shieber et al\\.", "year": 1995}, {"title": "The blue-eyed islanders puzzle, 2008. URL http://terrytao.wordpress.com/2008/02/ 05/the-blue-eyed-islanders-puzzle", "author": ["T. Tao"], "venue": null, "citeRegEx": "Tao.,? \\Q2008\\E", "shortCiteRegEx": "Tao.", "year": 2008}, {"title": "Depth-First Search and Linear Graph Algorithms", "author": ["R. Tarjan"], "venue": "SIAM Journal on Computing,", "citeRegEx": "Tarjan.,? \\Q1972\\E", "shortCiteRegEx": "Tarjan.", "year": 1972}, {"title": "Lightweight Implementations of Probabilistic Programming Languages Via Transformational Compilation", "author": ["D. Wingate", "A. Stuhlm\u00fcller", "N.D. Goodman"], "venue": "In Uncertainty in Artificial Intelligence,", "citeRegEx": "Wingate et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Wingate et al\\.", "year": 2011}], "referenceMentions": [{"referenceID": 5, "context": "Our intermediate representation is a generalization of sum-product networks (Poon and Domingos, 2011) that makes dependencies\u2014including recursive dependencies\u2014explicit: a factored sum-product network (FSPN).", "startOffset": 76, "endOffset": 101}, {"referenceID": 1, "context": "For example, an interpreter for the Church language (Goodman et al., 2008) takes a program expression and environment, and returns a sample from the program\u2019s distribution on Church values.", "startOffset": 52, "endOffset": 74}, {"referenceID": 5, "context": "Like sum-product networks (Poon and Domingos, 2011), this representation factors out all \u201cdeterministic\u201d computation, leaving only probability calculations, i.", "startOffset": 26, "endOffset": 51}, {"referenceID": 9, "context": "Computing a topological order of strongly connected components is linear in the size of the graph (Tarjan, 1972).", "startOffset": 98, "endOffset": 112}, {"referenceID": 1, "context": "The Probabilistic Models of Cognition tutorial by Goodman et al. (2011) follows this approach and has been used in graduate classes at MIT and Stanford.", "startOffset": 50, "endOffset": 72}, {"referenceID": 0, "context": "For example, Goodman and Stuhlm\u00fcller (2012) proposed a model of language understanding based on the idea that listeners assume that speakers choose their utterances approximately optimally, and that listeners interpret an utterance by using Bayesian inference to \u201cinvert\u201d this model of the speaker.", "startOffset": 13, "endOffset": 44}, {"referenceID": 8, "context": "As a particularly difficult example, consider the \u201cblueeyed islanders\u201d puzzle, a well-known problem in epistemic logic (Tao, 2008).", "startOffset": 119, "endOffset": 130}, {"referenceID": 4, "context": "The most closely related system to the present work is the functional programming language IBAL, a probabilistic variant of ML (Pfeffer, 2001).", "startOffset": 127, "endOffset": 142}, {"referenceID": 3, "context": "The IBAL algorithm relies on acyclic computation graphs; this is equivalent to the requirement that the computation be evidence-finite (Koller et al., 1997)\u2014there must only be a finite number of computations which can give rise to the observed evidence.", "startOffset": 135, "endOffset": 156}, {"referenceID": 6, "context": "gorithm), like IBAL, it cannot handle evidence-infinite computations (Sato, 2009).", "startOffset": 69, "endOffset": 81}, {"referenceID": 7, "context": "Dyna makes use of generalizations of parsing-as-deduction (Shieber et al., 1995) and semi-ring parsing (Goodman, 1999) to compile weighted logic programs into highly optimized dynamic programs.", "startOffset": 58, "endOffset": 80}], "year": 2012, "abstractText": "We describe a dynamic programming algorithm for computing the marginal distribution of discrete probabilistic programs. This algorithm takes a functional interpreter for an arbitrary probabilistic programming language and turns it into an efficient marginalizer. Because direct caching of sub-distributions is impossible in the presence of recursion, we build a graph of dependencies between sub-distributions. This factored sum-product network makes (potentially cyclic) dependencies between subproblems explicit, and corresponds to a system of equations for the marginal distribution. We solve these equations by fixed-point iteration in topological order. We illustrate this algorithm on examples used in teaching probabilistic models, computational cognitive science research, and game theory.", "creator": "LaTeX with hyperref package"}}}