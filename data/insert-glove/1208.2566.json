{"id": "1208.2566", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-Aug-2012", "title": "The Complexity of Planning Revisited - A Parameterized Analysis", "abstract": "two-digit The early mega-hit classifications redesignations of baoshun the computational complexity prejean of drunkard planning d\u00e9 under sunninghill various (901) restrictions leye in aslund STRIPS (Bylander) and injection SAS + (Baeckstroem and kennedyesque Nebel) conciliating have welshman influenced lockdowns following chikovani research alouatta in planning 5,788 in hocked many kueng ways. We hoffe go back chidley and reanalyse their subclasses, chiappucci but this time using gepetto the more yearns modern tool mhl of parameterized complexity analysis. american-based This provides new haliti results that beverley together crash-land with razza the haloid old neder results cvw-5 give a 30ish more detailed picture of 68.7 the complexity landscape. We demonstrate zia-zarifi separation omukama results not possible 272.8 with 15-storey standard guangzhou complexity theory, vilain which 51-percent contributes to 171,600 explaining isilon why certain coseteng cases sorties of planning have caballero seemed simpler in xprize practice treika than summons theory has predicted. In vocoder particular, hawwas we show bloxham that selepe certain rice-oxley restrictions 1952-1955 of practical expressionism interest ziming are tractable deified in the dragisa parameterized sense of the term, 4020 and scoresheet that coneflower a simple heart-attack heuristic naranjito is sufficient to make dauntingly a propensity well - jansen known iqrit partial - neurulation order planner desaad exploit abert this fact.", "histories": [["v1", "Mon, 13 Aug 2012 12:40:44 GMT  (21kb)", "http://arxiv.org/abs/1208.2566v1", "(author's self-archived copy)"]], "COMMENTS": "(author's self-archived copy)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["christer b\u00e4ckstr\u00f6m", "yue chen", "peter jonsson", "sebastian ordyniak", "stefan szeider"], "accepted": true, "id": "1208.2566"}, "pdf": {"name": "1208.2566.pdf", "metadata": {"source": "CRF", "title": "The Complexity of Planning Revisited \u2013 A Parameterized Analysis", "authors": ["Christer B\u00e4ckstr\u00f6m", "Yue Chen", "Peter Jonsson", "Sebastian Ordyniak", "Stefan Szeider"], "emails": ["christer.backstrom@liu.se,", "peter.jonsson@liu.se", "chen@kr.tuwien.ac.at,", "ordyniak@kr.tuwien.ac.at,", "stefan@szeider.net"], "sections": [{"heading": null, "text": "ar X\niv :1\n20 8.\n25 66\nv1 [\ncs .A\nI] 1\n3 A\nug 2"}, {"heading": "1 Introduction", "text": "Bylander 1994 made an extensive analysis of the computational complexity of propositional STRIPS under various restrictions, like limiting the number of preconditions or effects. Ba\u0308ckstro\u0308m and Nebel 1995 made a similar analysis of planning with multi-valued state variables in the SAS+ formalism, investigating the complexity of all combinations of the P, U, B and S restrictions introduced by Ba\u0308ckstro\u0308m and Klein 1991. These were among the first attempts to understand why and when planning is hard or easy and have had heavy influence on recent research in planning, of which we list a few representative examples. Gime\u0301nez and Jonsson 2008, Chen and Gime\u0301nez 2010 as well as Katz and Domshlak 2008 have studied the complexity of planning for various restrictions on the causal graph, the latter also considering combinations with restrictions P and U. Katz and Domshlak further pointed out a particularly important usage of such results, saying:\nComputational tractability can be an invaluable tool even for dealing with problems that fall outside all the known tractable fragments of planning. For instance, tractable fragments of planning provide the foundations for most (if not all) rigorous heuristic estimates employed in planning as heuristic search.\nTwo examples of slightly different ways to do this are the following. Helmert 2004 used a planning algorithm for a simpler restricted problem to compute heuristic values for subproblems and then combine these values. Similarly, the popular h+ heuristic Hoffmann (2005) exploits Bylander\u2019s results that planning is simpler with only positive preconditions and uses this as a relaxation for computing a heuristic value. As a complement to such analyses of restricted planning lanugages, Helmert 2006 studied the complexity and inherent restrictions in a number of application problems.\nWe revisit these early classifications of STRIPS and of SAS+, but using parameterized complexity analysis rather than standard complexity analysis. Parameterized complexity analysis was invented to enable a more finegrained analysis than standard complexity analysis allows, by treating a parameter as independent of the instance rather than being a part of it. Somewhat simplified, the idea is as follows. Consider some problem and let\nn denote the instance size. We usually consider a problem as tractable if it can be solved by some algorithm in O(nc) time, that is, in polynomial time. For many problems, like the NP-hard problems, we do not know of any significantly faster way to solve them than doing brute-force search, which typically requires requires exponential, or at least super-polynomial, time in n. In practice the search is often not exponential in the size of the whole instance, but rather in some smaller hard part of it. In these cases the complexity may rather be something like O(2knc) where k is a parameter that is typically independent of the instance size n. Thus, the combinatorial explosion is confined to the parameter k. We say that a problem is fixed-parameter tractable (FPT) if it can be solved in this way. This is the essence of parameterized complexity theory and provides a tractability concept which is more relaxed than the usual one, while correlating better with tractability in practice for realworld problems. The theory also offers various classes for problems that are not FPT, for example W[1] and W[2]. Parameterized complexity analysis has contributed fundamental new insights into complexity theory Downey and Fellows (1999). It is nowadays a very common technique in many areas of computer science, including many subareas of AI, like non-monotonic reasoning Gottlob, Pichler, and Wei (2006), constraints Gaspers and Szeider (2011), social choice Brandt, Brill, and Seedig (2011) and argumentation Ordyniak and Szeider (2011). The examples in planning are rare, however. Downey, Fellows and Stege 1999 proved that STRIPS planning is W[1]hard and conjectured that it is also complete for W[1]. We disprove this conjecture and show that STRIPS planning is actually W[2]-complete. There is also a result by Ba\u0308ckstro\u0308m and Jonsson 2011 that STRIPS planning is FPT under a certain restriction that deliberately lower-bounds the plan length, thus not contradicting our results. This restriction was motivated by a different agenda, studying the expressive power of planning languages in general rather than subclasses of a particular language.\nThe parameterized analyses of planning that we provide in this paper does not replace the earlier results or make them obsolete. Since the parameterized complexity classes and the standard ones are not comparable, our results must be viewed as supplementary, providing further information. If we consider the previous classifications together with our parameterized classification we get a more detailed and informative picture of planning complexity than by considering either of them alone. This sheds new light on the discrepancy between theoretical and practical results regarding the difficulty of planning. For instance, while Ba\u0308ckstro\u0308m and Nebel proved that restriction U (actions can change only one variable) does not make planning easier under standard analysis, we show that it is actually easier from a parameterized point of view. This is interesting since restriction U has been considered acceptable in some practical applications of planning, for instance on-board planning in spacecrafts Williams and Nayak (1997); Brafman and Domshlak (2003). Furthermore, Ba\u0308ckstro\u0308m and Nebel showed that planning is NP-hard under restriction P (there are never two actions that set the same variable value) but did not provide any better upper bound than in the unrestricted case. We show that planning is actually FPT under this restriction. We also show that a standard partial-order planning algorithm McAllester and Rosenblitt (1991) can exploit this fact with a minor modification that could be implemented as a heuristic. This suggests that many successful applications of planning might be cases where the problem is \u201calmost tractable\u201d and the algorithm used happens to implicitly exploit this. This is in line with the claim by Downey et. al. 2008 that in many cases existing algorithms with heuristics turn out to already be FPT algorithms.\nThe rest of the paper is laid out as follows. Section 2 defines some concepts of parameterized complexity theory and Section 3 defines the SAS+ and STRIPS languages. The hardness results are collected in Section 4 and the membership results in Section 5, including the result on using an existing planning algorithm. Section 6 summarizes the results of the paper and discusses some observations and consequences. The paper ends with a discussion in Section 7."}, {"heading": "2 Parameterized Complexity", "text": "We define the basic notions of Parameterized Complexity and refer to other sources Downey and Fellows (1999); Flum and Grohe (2006) for an in-depth treatment. A parameterized problem is a set of pairs \u3008I, k\u3009, the instances, where I is the main part and k the parameter. The parameter is usually a non-negative integer. A parameterized problem is fixed-parameter tractable (FPT) if there exists an algorithm that solves any instance \u3008I, k\u3009 of size n in time f(k)nc where f is an arbitrary computable function and c is a constant independent of both n and k. FPT is the class of all fixed-parameter tractable decision problems.\nParameterized complexity offers a completeness theory, similar to the theory of NP-completeness, that al-\nlows the accumulation of strong theoretical evidence that some parameterized problems are not fixed-parameter tractable. This theory is based on a hierarchy of complexity classes\nFPT \u2286 W[1] \u2286 W[2] \u2286 W[3] \u2286 \u00b7 \u00b7 \u00b7\nwhere all inclusions are believed to be strict. Each class W[i] contains all parameterized decision problems that can be reduced to a certain canonical parameterized problem (known as WEIGHTED i-NORMALIZED SATISFIABILITY) under parameterized reductions. A parameterized problem L reduces to a parameterized problem L\u2032 if there is a mapping R from instances of L to instances of L\u2032 such that\n1. \u3008I, k\u3009 is a YES-instance of L if and only if \u3008I\u2032, k\u2032\u3009 = R(I, k) is a YES-instance of L\u2032,\n2. there is a computable function g such that k\u2032 \u2264 g(k), and\n3. there is a computable function f and a constant c such that R can be computed in time O(f(k) \u00b7 nc), where n denotes the size of \u3008I, k\u3009.\nNot much is known about the relationship between the parameterized complexity classes and the standard ones, except that P \u2286 FPT."}, {"heading": "3 Planning Framework", "text": "Let V = {v1, . . . , vn} be a finite set of variables over a finite domain D. Implicitly define D+ = D\u222a{u}, where u is a special value not present in D. Then Dn is the set of total states and (D+)n is the set of partial states over V and D, where Dn \u2286 (D+)n. The value of a variable v in a state s \u2208 (D+)n is denoted s[v]. A SAS+ instance is a tuple P = \u3008V,D,A, I,G\u3009 where V is a set of variables, D is a domain, A is a set of actions, I \u2208 Dn is the initial state and G \u2208 (D+)n is the goal. Each action a \u2208 A has a precondition pre(a) \u2208 (D+)n and an effect eff(a) \u2208 (D+)n. We will frequently use the convention that a variable has value u in a precondition/effect unless a value is explicitly specified. Let a \u2208 A and let s \u2208 Dn. Then a is valid in s if for all v \u2208 V , either pre(a)[v] = s[v] or pre(a)[v] = u. Furthermore, the result of a in s is a state t \u2208 Dn defined such that for all v \u2208 V , t[v] = eff(a)[v] if eff(a)[v] 6= u and t[v] = s[v] otherwise.\nLet s0, s\u2113 \u2208 Dn and let \u03c9 = \u3008a1, . . . , a\u2113\u3009 be a sequence of actions. Then \u03c9 is a plan from s0 to s\u2113 if either 1) \u03c9 = \u3008\u3009 and \u2113 = 0 or 2) there are states s1, . . . , s\u2113\u22121 \u2208 Dn such that for all i, where 1 \u2264 i \u2264 \u2113, ai is valid in si\u22121 and si is the result of ai in si\u22121. A state s \u2208 Dn is a goal state if for all v \u2208 V , either G[v] = s[v] or G[v] = u. An action sequence \u03c9 is a plan for P if it is a plan from I to some goal state s \u2208 Dn. We will study the following problem:\nBOUNDED SAS+ PLANNING Instance: A tuple \u3008P, k\u3009 where P is a SAS+ instance and k is a positive integer. Parameter: The integer k. Question: Does P have a plan of length at most k?\nWe will consider the following four restrictions, originally defined by Ba\u0308ckstro\u0308m and Klein 1991.\nP: For each v \u2208 V and each x \u2208 D there is at most one a \u2208 A such that eff(a)[v] = x.\nU: For each a \u2208 A, eff(a)[v] 6= u for exactly one v \u2208 V .\nB: |D| = 2.\nS: For all a, b \u2208 A and all v \u2208 V , if pre(a)[v] 6= u, pre(b)[v] 6= u and eff(a)[v] = eff(b)[v] = u, then pre(a)[v] = pre(b)[v].\nFor any set R of such restrictions we writeR-BOUNDED SAS+ PLANNING to denote the restriction of BOUNDED SAS+ PLANNING to only instances satisfying the restrictions in R.\nThe propositional STRIPS language can be treated as the special case of SAS+ satisfying restriction B. More precisely, this corresponds to the variant of STRIPS that allows negative preconditions."}, {"heading": "4 Hardness Results", "text": "In this section we prove the two main hardness results of this paper. For the first proof we need the following W[2]-complete problem (Downey and Fellows, 1999, p. 464).\nHITTING SET Instance: A finite set S, a collection C of subsets of S and an integer k \u2264 |C|. Parameter: The integer k. Question: Is there a hitting set H \u2286 S such that |H | \u2264 k and H \u2229 c 6= \u2205 for every c \u2208 C?\nTheorem 1. {B,S}-BOUNDED SAS+ PLANNING is W[2]-hard, even when the actions have no preconditions.\nProof. By parameterized reduction from HITTING SET. Let I = \u3008S,C, k\u3009 be an instance of this problem. We construct an instance I\u2032 = \u3008P, k\u2032\u3009, where P = \u3008V,D,A, I,G\u3009, of the {B,S}-BOUNDED SAS+ PLANNING problem such that I has a hitting set of size at most k if and only if there is a plan of length at most k\u2032 = k for I\u2032 as follows. Let V = { vc | c \u2208 C } and let A = {ae | e \u2208 S} where eff(ae)[vc] = 1 if e \u2208 c and eff(ae)[vc] = u otherwise. We set I = \u30080, . . . , 0\u3009 and G = \u30081, . . . , 1\u3009. Clearly, P satisfies restrictions B and S, and the actions have no preconditions. It is now routine to show that P has a plan of length at most k\u2032 if and only if I has a hitting set of size k.\nWe continue with the second result. The following problem is W[1]-complete Pietrzak (2003).\nPARTITIONED CLIQUE Instance: A k-partite graph G = \u3008V,E\u3009 with partition V1, . . . , Vk such that |Vi| = |Vj | = n for all i, where 1 \u2264 i < j \u2264 k. Parameter: The integer k. Question: Are there nodes v1, . . . , vk such that vi \u2208 Vi for all i, where 1 \u2264 i \u2264 k and, {vi, vj} \u2208 E for all i, where 1 \u2264 i < j \u2264 k? (The graph {{v1, . . . , vk}, {{vi, vj} | 1 \u2264 i < j \u2264 k}} is a k-clique of G.)\nTheorem 2. {U,B, S}-BOUNDED SAS+ PLANNING is W[1]-hard, even for instances where every action has at most one precondition and one postcondition.\nProof. By parameterized reduction from PARTITIONED CLIQUE. Let G = \u3008V,E\u3009 be a k-partite graph where V is partitioned into V1, . . . , Vk. Let k2 = ( k 2 )\nand k\u2032 = 7k2 + k. We define Ji = { j | 1 \u2264 j \u2264 k and j 6= i } for every 1 \u2264 i \u2264 k.\nFor the {U,B, S}-BOUNDED SAS+ PLANNING instance P we introduce four kinds of variables: 1) For every e \u2208 E we introduce an edge variable x(e). 2) For every 1 \u2264 i \u2264 k and v \u2208 Vi we introduce k \u2212 1 vertex variables x(v, j) where j \u2208 Ji. 3) For every 1 \u2264 i \u2264 k and every j \u2208 Ji we introduce a checking variable x(i, j). 4) For every v \u2208 V , we introduce a clean-up variable x(v).\nWe also introduce five kinds of actions: 1) For every e \u2208 E we introduce an action ae such that eff(ae)[x(e)] = 1. 2) For every e = {vi, vj} \u2208 E where vi \u2208 Vi and vj \u2208 Vj , we introduce two actions aei and a e j such that pre(aei )[x(e)] = 1, eff(a e i )[x(vi, j)] = 1, pre(a e j)[x(e)] = 1 and eff(a e j)[x(vj , i)] = 1.\n3) For every v \u2208 Vi and j \u2208 Ji, we introduce an action avj such that pre(a v j )[x(v, j)] = 1 and eff(a v j )[x(i, j)] =\n1. 4) For every v \u2208 V , we introduce an action av such that eff(av)[x(v)] = 1. 5) For every v \u2208 Vi, for some 1 \u2264 i \u2264 k, and j \u2208 Ji, we introduce an action ajv such that pre(a j v)[x(v)] = 1 and eff(ajv)[x(v, j)] = 0. Let A1, . . . , A5 be sets of actions corresponding to these five groups, and let A = A1 \u222a . . . \u222a A5 be the set of all actions. Let I = \u30080, . . . , 0\u3009 and define G such that all checking variables x(i, j) are 1, all vertex variables x(v, j) are 0 and the rest are u.\nWe now need to prove that G has a k-clique if and only if there is a plan for P of length at most k\u2032. We sketch the leftward direction; the opposite is similar. Assume G has a k-clique K = \u3008VK , EK\u3009 where VK = {v1, . . . , vk} with vi \u2208 Vi for every 1 \u2264 i \u2264 k. For all 1 \u2264 i < j \u2264 k, we apply the actions a{vi,vj} \u2208 A1 and a {vi,vj} i , a {vi,vj} j \u2208 A2. This gives 3k2 actions. Then for each checking variable x(i, j), for every 1 \u2264 i \u2264 k and j \u2208 Ji, we apply a vi j \u2208 A3. This gives 2k2 actions. Now we have all checking variables set to the required value 1, but the vertex variables x(vi, j), for 1 \u2264 i \u2264 k and j \u2208 Ji, still bear the value 1 which will have to be set back to 0 in the goal state. So we need some actions to \u201cclean up\u201d the values of these vertex variables. First we set up a cleaner for each vertex vi by applying avi \u2208 A4. This gives k actions. Then we use a j vi\n\u2208 A5 for all j \u2208 Ji to set the vertex variables x(vi, j) to 0. This requires 2k2 actions. We observe that all the checking variables are now set to 1, and all vertex variables are set to 0. The goal state is therefore reached from the initial state by the execution of exactly k\u2032 = k + 7k2 actions, as required."}, {"heading": "5 Memberhip Results", "text": "Our membership results are based on first-order (FO) model checking (Sec. 5.1) and partial-order planning (Sec. 5.2)."}, {"heading": "5.1 Model Checking", "text": "For a class of FO formulas \u03a6 we define the following parameterized decision problem.\n\u03a6-FO MODEL CHECKING Instance: A finite structure A, an FO formula \u03d5 \u2208 \u03a6. Parameter: The length of \u03d5. Question: Does \u03d5 have a model?\nLet \u03a31 be the class of all FO formulas of the form \u2203x1 . . . \u2203xt.\u03d5 where t is arbitrary and \u03d5 is a quantifierfree FO formula. For arbitrary positive integer u, let \u03a32,u denote the class of all FO formulas of the form \u2203x1 . . .\u2203xt\u2200y1 . . . \u2200yu.\u03d5 where t is arbitrary and \u03d5 is a quantifier-free FO formula. Flum and Grohe 2006, Theorem 7.22 have shown the following result.\nProposition 1. The problem \u03a31-FO MODEL CHECKING is W[1]-complete. For every positive integer u the problem \u03a32,u-FO MODEL CHECKING is W[2]-complete.\nWe will reduce planning to model checking, so for an arbitrary planning instance I = \u3008P, k\u3009 (where P = \u3008V,D,A, I,G\u3009) of the BOUNDED SAS+ PLANNING problem we need a relational structure A(P) defined as:\n\u2022 The universe of A(P) is V \u222a A \u222aD+.\n\u2022 A(P) contains the unary relations Var = V , Act = A, and Dom = D+ together with the following relations of higher arity:\n\u2013 Init = { \u3008v, x\u3009 \u2208 V \u00d7D | I[v] = x },\n\u2013 Goalv = { \u3008v, x\u3009 \u2208 V \u00d7D | G[v] = x 6= u },\n\u2013 Pre = { \u3008a, v\u3009 \u2208 A\u00d7 V | pre(a)[v] 6= u },\n\u2013 Eff = { \u3008a, v\u3009 \u2208 A\u00d7 V | eff(a)[v] 6= u },\n\u2013 Prev = { \u3008a, v, x\u3009 \u2208 A\u00d7 V \u00d7D | pre(a)[v] = x 6= u }\n\u2013 Effv = { \u3008a, v, x\u3009 \u2208 A\u00d7 V \u00d7D | eff(a)[v] = x 6= u }.\nTheorem 3. BOUNDED SAS+ PLANNING is in W[2].\nProof. By parameterized reduction to the W[2]-complete problem \u03a32,2-FO MODEL CHECKING. Let I = \u3008P, k\u3009 (where P = \u3008V,D,A, I,G\u3009) be an instance of BOUNDED SAS+ PLANNING. We construct an instance I\u2032 = \u3008A(P), \u03d5\u3009 of \u03a32,2-FO MODEL CHECKING such that I has a solution if and only if I\u2032 has a solution and the size of the formula \u03d5 is bounded by some function that only depends on k. Assume without loss of generality that A contains a dummy action a\u0302 with no preconditions and no effects. To define \u03d5 we first need the following definitions.\nWe define a formula value(\u3008a1, . . . , ai\u3009, v, x) such that value(\u3008\u3009, v, x) = Init(v, x) and value(\u3008a1, . . . , ai\u3009, v, x) = (value(\u3008a1, . . . , ai\u22121\u3009, v, x)\u2227\u00acEff(ai, v))\u2228Effv(ai, v, x) for every 0 \u2264 i \u2264 k, which holds if applying a1, . . . , ai in state I results in a state s such that s[v] = x.\nWe also define a formula check-pre(\u3008a1, . . . , ai\u3009, v, x) = Prev(ai, v, x) \u2192 value(\u3008a1, . . . , ai\u22121\u3009, v, x) for all 1 \u2264 i \u2264 k, that is, \u2200v\u2200x.Var(v) \u2227 Dom(x) \u2227 check-pre(\u3008a1, . . . , ai\u3009, v, x) holds if all preconditions of action ai are satisfied after actions a1, . . . , ai\u22121 have been executed in state I . We similarly define a formula check-pre-all(\u3008a1, . . . , ak\u3009, v, x) = \u2227k\ni=1 check-pre(\u3008a1, . . . , ai\u3009, v, x) that \u201cchecks\u201d the preconditions of all actions in a sequence.\nFinally, define check-goal(\u3008a1, . . . , ak\u3009, v, x) = Goalv(v, x) \u2192 value(\u3008a1, . . . , ak\u3009, v, x). The formula \u2200v\u2200x.Var(v) \u2227 Dom(x) \u2227 check-goal(\u3008a1, . . . , ak\u3009, v, x) holds if the goal state is reached after the execution of the sequence a1, . . . , ak in the state I .\nWe can now define the formula \u03d5 itself as:\n\u03d5 = \u2203a1 . . . \u2203ak\u2200v\u2200x .\n( \u2227k\ni=1 Act(ai)) \u2227 (Var(v) \u2227 Dom(x) \u2192\ncheck-pre-all(\u3008a1, . . . , ak\u3009, v, x) \u2227 check-goal(\u3008a1, . . . , ak\u3009, v, x)).\nEvidently \u03d5 \u2208 \u03a32,2, the length of \u03d5 is bounded by some function that only depends on k and A(P) |= \u03d5 if and only if P has a plan of length at most k. The dummy action guarantees that there is a plan exactly of length k if there is a shorter plan.\nThe proof of the next theorem resembles the previous proof but the details are a bit involved. Thus, we only provide a high-level description of it.\nTheorem 4. {U}-BOUNDED SAS+ PLANNING is in W[1].\nProof sketch: In order to show W[1]-membership of {U}-BOUNDED SAS+ PLANNING we will reduce this problem to \u03a31-FO MODEL CHECKING and the basic idea is fairly close to the proof of Theorem 3. However, we cannot directly express within\u03a31 that all the preconditions of an action are satisfied, as this would require a further universal quantification and thus move the formula to \u03a32,u. Hence, we avoid the universal quantification with a trick: we observe that the preconditions only need to be checked with respect to at most k \u201cimportant\u201d variables, that is, the variables in which the preconditions of an action differ from the initial state. If the precondition differs in more than k variables from the initial state, then it cannot be used in any plan of length k. It is now possible to guess the important variables with existential quantifiers.\nIt remains to check that all the significant variables are among these guessed variables. We do this without universal quantification by adding dummy elements d1, . . . , dk and a relation Diff-act to the relational structure A(P). The relation associates with each action exactly k different elements. These elements consist of all the important variables of the action, say the number of these variables is k\u2032, plus k\u2212k\u2032 dummy elements. Hence, by guessing these k elements and eliminating the dummy elements, the formula knows all the significant variables of the action and can check the preconditions without a universal quantification."}, {"heading": "5.2 Partial-order Planning", "text": "To prove that {P}-BOUNDED SAS+ PLANNING is in FPT we use a slight modification of the well-known planning algorithm by McAllester and Rosenblitt 1991, which we refer to as MAR. It appears in Figure 1, combining the original and the modified versions into one. The only modification is the value of L\u2032, which could easily be\nimplemented as a heuristic for the original algorithm. The algorithm is generalized to SAS+ rather than propositional STRIPS, which is straightforward and appears in the literature Ba\u0308ckstro\u0308m (1994). We only explain the algorithm and our notation, referring the reader to the original paper for details.\nThe algorithm works on a partially ordered set of action occurences, each occurence being a unique copy of an action. For each precondition pre(oc)[v] 6= u of an occurence oc, the algorithm uses a causal link op v=x \u2212\u2192 oc to explicitly keep track of which other occurence op with eff(op)[v] = x guarantees this precondition. An occurence ot is a threat to op v=x \u2212\u2192 oc if eff(ot)[v] 6= u and op 6= ot 6= oc. A plan structure for a planning instance P = \u3008V,D,A, I,G\u3009 is a tuple \u0398 = \u3008O,P,L\u3009 where O is a finite set of action occurences over A, P is a binary relation over O and L is a set of causal links. We write o \u227a o\u2032 for \u3008o, o\u2032\u3009 \u2208 P. Furthermore, O always contains the two special elements oI , oG, where eff(oI) = I , pre(oG) = G and oI \u227a oG \u2208 P. An open goal in \u0398 is a tuple \u3008o, v, x\u3009 such that o \u2208 O, pre(o)[v] = x 6= u and there is no o\u2032 \u2208 O such that o\u2032 v=x \u2212\u2192 o \u2208 L.\nWe say \u0398 is complete if both the following conditions hold: 1) For all oc \u2208 O and all v \u2208 V such that pre(oc)[v] = x 6= u, there is a causal link op v=x \u2212\u2192 oc \u2208 L. 2) For every op v=x \u2212\u2192 oc \u2208 L and every threat ot \u2208 O to op v=x \u2212\u2192 oc, either ot \u227a op \u2208 P or oc \u227a ot \u2208 P. McAllester and Rosenblitt proved that if starting with \u0398 = \u3008{oI , oG}, {oI \u227a oG},\u2205\u3009 then the algorithm fails if there is no plan and otherwise returns a plan structure \u3008O,P,L\u3009 such that any topological sorting of O\u2212 {oI , oG} consistent with P is a plan.\nThat the modified variant of MAR is correct for SAS+-P instances is based on the following observation about the original variant applied to such instances. Consider three occurences o1, o2, o3 such that o1 has preconditions v = x and w = y which are both effects of o2. If v = x is also an effect of o3, then also w = y must be an effect of o3 due to restriction P. However, the algorithm must link both conditions from the same occurence, either o2 or o3, since it would otherwise add both o2 \u227a o3 and o3 \u227a o2, causing it to fail. The set of possible outcomes for the two variants are thus identical, but the modified variant is an FPT algorithm.\nTheorem 5. {P}-BOUNDED SAS+ PLANNING is in FPT.\nProof. Consider the modified version of MAR. All nodes in the search tree run in polynomial time in the instance size. The search tree contains two types of nodes: leafs that terminate in either line 2 or 3 and nodes that make a nondeterministic choice either in line 5 or in line 7 and then make a recursive call. The latter nodes correspond to branching points in the search tree, and we analyse their contribution to the search-tree size separately.\nEach time line 5 is visited, it adds a new element to P, which thus grows monotonically along every branch in the search tree. We can thus visit line 5 at most (k + 2)2 times along any branch since |P| \u2264 (k + 2)2. There are two choices in line 5 so it contributes at most a factor 2(k+2) 2\nto the size of the search tree. Also O grows monotonically along every branch and |O| \u2264 k+ 2. At any visit to lines 6\u201310 there are thus at most k+1 occurences with open goals and at most k+1 different occurences to link these goals to. That is, the preconditions of each occurence are partitioned into at most k + 1 parts, each part having all its elements linked at once in line 9. Lines 6\u201310 can thus be visited at most (k + 1)2 times along any branch in the search tree. Since there are at most k + 1 existing occurences to link to and at most one action to instantiate as a new occurence, the branching factor is k+2. The contribution of this to the size of the search tree is thus at most a factor (k+2)(k+1) 2\n. Hence, the total search-tree size is at most 2 \u00b7 2(k+2) 2 (k + 2)(k+1) 2\nwhere the factor 2 accounts for the leaves. This does not depend on the instance size and each node is polynomial-time in the instance size so the modified MAR algorithm is an FPT algorithm."}, {"heading": "6 Summary of Results", "text": "The complexity results for the various combinations of restrictions P, U, B and S are displayed in Figure 2. Solid lines denote separation results by Ba\u0308ckstro\u0308m and Nebel 1995, using standard complexity analysis, while dashed lines denote separation results from our parameterized analysis. The W[2]-completeness results follow from Theorems 1 and 3, the W[1]-completeness results follow from Theorems 2 and 4, and the FPT results follow from Theorem 5.\nBylander 1994 studied the complexity of STRIPS under varying numbers of preconditions and effects, which is natural to view as a relaxation of restriction U in SAS+. Table 1 shows such results (for arbitrary domain sizes \u2265 2) under both parameterized and standard analysis. The parameterized results are derived as follows. For actions with an arbitrary number of effects, the results follow from Theorems 1 and 3. For actions with at most one effect, we have two cases: With no preconditions the problem is trivially in P. Otherwise, the results follow from Theorems 2 and 4.\nWe are left with the case when the number of effects is bounded by some constant me > 1. Ba\u0308ckstro\u0308m 1992, proof of Theorem 6.7 presented a polynomial time reduction of this class of SAS+ instances to the class of instances with one effect. It is easy to verify that his reduction is a parameterized reduction so we have membership in W[1] by Theorem 4. When mp \u2265 1, then we also have W[1]-hardness by Theorem 2. For the final case (mp = 0), we have no corresponding parameterized hardness result.\nAll non-parameterized hardness results in Table 1 follow directly from Bylander\u2019s 1994, Fig. 1 and 2 complexity results for STRIPS. Note that we use results both for bounded and unbounded plan existence, which is justified since the unbounded case is (trivially) polynomial-time reducible to the bounded case. The membership results for PSPACE are immediate since BOUNDED SAS+ PLANNING is in PSPACE. The membership results for NP (when mp = 0) follow from Bylander\u2019s 1994 Theorem 3.9, which says that every solvable STRIPS instance with mp = 0 has a plan of length \u2264 m where m is the number of actions. It is easy to verify that the same bound holds for SAS+ instances.\nSince W[1] and W[2] are not directly comparable to the standard complexity classes we get interesting separations from combining the two methods. For instance, we can single out restriction U as making planning easier than in the general case, which is not possible with standard analysis. Since restrictions B and S remain as hard as the general case even under parameterized analysis, this shows that U is a more interesting and important restriction than the other two. Even more interesting is that planning is in FPT under restriction P, making it easier than the combination restriction US, while it seems to be rather the other way around for standard analysis where restriction P is only known to be hard for NP. In general, we see that there are still a number of open problems of this type in both Figure 2 and Table 1 for the standard analysis, while there is only one single open problem for the parameterized analysis: hardness for the case where mp = 0 and me is fixed."}, {"heading": "7 Discussion", "text": "This work opens up several new research directions. We briefly discuss some of them below. Although a modification was needed to make MAR an FPT algorithm for restriction P, no modification is necessary if also the number of preconditions of each action is bounded by a constant c. Then we can even relax P, such that for some constant d there can be at most d actions with the same effect. The proof is similar to the one for Theorem 5, using that the total number of causal links is bounded by c(k+1) and the branching factor in line 7 is k + 1 + d. This is an important observation since many application and example problems in planning satisfy these constraints, for instance, many variants of the LOGISTICS domain used in the international planning competitions. Since planners like NONLIN and SNLP are practical variants of MAR, this may help to explain the gap between empirical and theoretical results for many applications.\nThe use of parameterized analysis in planning is by no means restricted to using plan length as parameter. We did so only to get results that are as comparable as possible with the previous results. For instance, Downey et. al. 1999 show that STRIPS planning can be recast as the SIGNED DIGRAPH PEBBLING problem which is modelled as a special type of graph. They analyse the parameterized complexity of this problem considering also the treewidth of the graph as a parameter. As another example, Chen and Gime\u0301nez 2010 show that planning is in P if the size of the connected components in the causal graph is bounded by a constant, and otherwise unlikely to be in P. It seems natural to study this also from a parameterized point of view, using the component size as the parameter. It should also be noted that the parameter need not be a single value; it can itself be a combination of two or more other parameters.\nThere are close ties between model checking and planning and this connection deserves further study. For instance, model-checking traces can be viewed as plans and vice versa Edelkamp, Leue, and Visser (2007), and methods and results have been transferred between the two areas in both directions Edelkamp (2003); Wehrle and Helmert (2009); Edelkamp, Kellershoff, and Sulewski (2010). Our reductions from planning to model-checking suggest that the problems are related also on a more fundamental level than just straightforward syntactical translations."}, {"heading": "Acknowledgements", "text": "We would like to thank the anonymous reviewers for constructive comments. Chen, Ordyniak, and Szeider acknowledge the support from the European Research Council (ERC), project COMPLEX REASON, 239962."}], "references": [{"title": "All PSPACE-complete planning problems are equal but some are more equal than others", "author": ["C. B\u00e4ckstr\u00f6m", "P. Jonsson"], "venue": "4th Int\u2019l Symp. Combinatorial Search (SoCS-2011) Castell de Cardona, Barcelona, Spain, 10\u201317.", "citeRegEx": "B\u00e4ckstr\u00f6m and Jonsson,? 2011", "shortCiteRegEx": "B\u00e4ckstr\u00f6m and Jonsson", "year": 2011}, {"title": "Planning in polynomial time: The SAS-PUBS class", "author": ["C. B\u00e4ckstr\u00f6m", "I. Klein"], "venue": "Comput. Intell. 7:181\u2013 197. B\u00e4ckstr\u00f6m, C., and Nebel, B. 1995. Complexity results for SAS planning. Comput. Intell. 11:625\u2013656.", "citeRegEx": "B\u00e4ckstr\u00f6m and Klein,? 1991", "shortCiteRegEx": "B\u00e4ckstr\u00f6m and Klein", "year": 1991}, {"title": "Computational Complexity of Reasoning about Plans", "author": ["C. B\u00e4ckstr\u00f6m"], "venue": "PhD diss., Link\u00f6ping University, Link\u00f6ping, Sweden.", "citeRegEx": "B\u00e4ckstr\u00f6m,? 1992", "shortCiteRegEx": "B\u00e4ckstr\u00f6m", "year": 1992}, {"title": "Planning using transformation between equivalent formalisms: A case study of efficiency", "author": ["C. B\u00e4ckstr\u00f6m"], "venue": "Workshop Comparative Analysis of AI Planning Systems, at 12th Nat\u2019l Conf. Artif. Intell. (AAAI\u201994), Seattle, WA, USA.", "citeRegEx": "B\u00e4ckstr\u00f6m,? 1994", "shortCiteRegEx": "B\u00e4ckstr\u00f6m", "year": 1994}, {"title": "Structure and complexity in planning with unary operators", "author": ["R.I. Brafman", "C. Domshlak"], "venue": "J. Artif. Intell. Res. 18:315\u2013349.", "citeRegEx": "Brafman and Domshlak,? 2003", "shortCiteRegEx": "Brafman and Domshlak", "year": 2003}, {"title": "On the fixed-parameter tractability of composition-consistent tournament solutions", "author": ["F. Brandt", "M. Brill", "H.G. Seedig"], "venue": "22nd Int\u2019l Joint Conf. Artif. Intell. (IJCAI\u201911), Barcelona, Spain, 85\u201390.", "citeRegEx": "Brandt et al\\.,? 2011", "shortCiteRegEx": "Brandt et al\\.", "year": 2011}, {"title": "The computational complexity of propositional STRIPS planning", "author": ["T. Bylander"], "venue": "Artif. Intell. 69(1-2):165\u2013 204.", "citeRegEx": "Bylander,? 1994", "shortCiteRegEx": "Bylander", "year": 1994}, {"title": "Causal graphs and structurally restricted planning", "author": ["H. Chen", "O. Gim\u00e9nez"], "venue": "J. Comput. Syst. Sci. 76(7): 579\u2013592.", "citeRegEx": "Chen and Gim\u00e9nez,? 2010", "shortCiteRegEx": "Chen and Gim\u00e9nez", "year": 2010}, {"title": "Parameterized Complexity", "author": ["R.G. Downey", "M.R. Fellows"], "venue": "Monographs in Computer Science. New York: Springer Verlag.", "citeRegEx": "Downey and Fellows,? 1999", "shortCiteRegEx": "Downey and Fellows", "year": 1999}, {"title": "The Computer Journal special issue on parameterized complexity: Foreword by the guest editors", "author": ["R.G. Downey", "M.R. Fellows", "M.A. Langston"], "venue": "Comput. J. 51(1): 1\u20136.", "citeRegEx": "Downey et al\\.,? 2008", "shortCiteRegEx": "Downey et al\\.", "year": 2008}, {"title": "Parameterized Complexity: A Framework for Systematically Confronting Computational Intractability, volume 49 of DIMACS Series in Disc", "author": ["R. Downey", "M. Fellows", "U. Stege"], "venue": "Math. Theor. Comput. Sci. 49\u201399.", "citeRegEx": "Downey et al\\.,? 1999", "shortCiteRegEx": "Downey et al\\.", "year": 1999}, {"title": "Program model checking via action planning", "author": ["S. Edelkamp", "M. Kellershoff", "D. Sulewski"], "venue": "Model Checking and Artif. Intell. - 6th Int\u2019l. Workshop, (MoChArt\u201910), Atlanta, GA, USA, 32\u201351.", "citeRegEx": "Edelkamp et al\\.,? 2010", "shortCiteRegEx": "Edelkamp et al\\.", "year": 2010}, {"title": "Summary of Dagstuhl seminar 06172 on directed model checking", "author": ["S. Edelkamp", "S. Leue", "W. Visser"], "venue": "Directed Model Checking, number 06172 in Dagstuhl Seminar Proceedings. Dagstuhl, Germany.", "citeRegEx": "Edelkamp et al\\.,? 2007", "shortCiteRegEx": "Edelkamp et al\\.", "year": 2007}, {"title": "Taming numbers and durations in the model checking integrated planning system", "author": ["S. Edelkamp"], "venue": "J. Artif. Intell. Res. 20:195\u2013238.", "citeRegEx": "Edelkamp,? 2003", "shortCiteRegEx": "Edelkamp", "year": 2003}, {"title": "Parameterized Complexity Theory, volume XIV of Texts in Theoretical Computer Science", "author": ["J. Flum", "M. Grohe"], "venue": "An EATCS Series. Berlin: Springer Verlag.", "citeRegEx": "Flum and Grohe,? 2006", "shortCiteRegEx": "Flum and Grohe", "year": 2006}, {"title": "Kernels for global constraints", "author": ["S. Gaspers", "S. Szeider"], "venue": "22nd Int\u2019l Joint Conf. Artif. Intell. (IJCAI\u201911), Barcelona, Spain, 540\u2013545.", "citeRegEx": "Gaspers and Szeider,? 2011", "shortCiteRegEx": "Gaspers and Szeider", "year": 2011}, {"title": "The complexity of planning problems with simple causal graphs", "author": ["O. Gim\u00e9nez", "A. Jonsson"], "venue": "J. Artif. Intell. Res. 31:319\u2013351.", "citeRegEx": "Gim\u00e9nez and Jonsson,? 2008", "shortCiteRegEx": "Gim\u00e9nez and Jonsson", "year": 2008}, {"title": "Bounded treewidth as a key to tractability of knowledge representation and reasoning", "author": ["G. Gottlob", "R. Pichler", "F. Wei"], "venue": "21st Nat\u2019l. Conf. Artif. Intell. (AAAI\u201906), Boston, MA, USA.", "citeRegEx": "Gottlob et al\\.,? 2006", "shortCiteRegEx": "Gottlob et al\\.", "year": 2006}, {"title": "A planning heuristic based on causal graph analysis", "author": ["M. Helmert"], "venue": "14th Intl. Conf. Automated Planning and Scheduling, (ICAPS\u201904), Whistler, BC, Canada, 161\u2013170.", "citeRegEx": "Helmert,? 2004", "shortCiteRegEx": "Helmert", "year": 2004}, {"title": "New complexity results for classical planning benchmarks", "author": ["M. Helmert"], "venue": "6\u2019th Int\u2019l Conf. Automated Planning and Scheduling, (ICAPS\u201906), Cumbria, UK, 52\u201362.", "citeRegEx": "Helmert,? 2006", "shortCiteRegEx": "Helmert", "year": 2006}, {"title": "Where \u2019ignoring delete lists\u2019 works: Local search topology in planning benchmarks", "author": ["J. Hoffmann"], "venue": "J. Artif. Intell. Res. 24:685\u2013758.", "citeRegEx": "Hoffmann,? 2005", "shortCiteRegEx": "Hoffmann", "year": 2005}, {"title": "New islands of tractability of cost-optimal planning", "author": ["M. Katz", "C. Domshlak"], "venue": "J. Artif. Intell. Res. 32: 203\u2013288.", "citeRegEx": "Katz and Domshlak,? 2008", "shortCiteRegEx": "Katz and Domshlak", "year": 2008}, {"title": "Systematic nonlinear planning", "author": ["D.A. McAllester", "D. Rosenblitt"], "venue": "9th Nat\u2019l Conf. Artif. Intell. (AAAI\u201991), Anaheim, CA, USA, 634\u2013639.", "citeRegEx": "McAllester and Rosenblitt,? 1991", "shortCiteRegEx": "McAllester and Rosenblitt", "year": 1991}, {"title": "Augmenting tractable fragments of abstract argumentation", "author": ["S. Ordyniak", "S. Szeider"], "venue": "22nd Int\u2019l Joint Conf. Artif. Intell. (IJCAI\u201911), Barcelona, Spain, 1033\u20131038.", "citeRegEx": "Ordyniak and Szeider,? 2011", "shortCiteRegEx": "Ordyniak and Szeider", "year": 2011}, {"title": "On the parameterized complexity of the fixed alphabet shortest common supersequence and longest common subsequence problems", "author": ["K. Pietrzak"], "venue": "J. Comput. Syst. Sci. 67(4):757\u2013771.", "citeRegEx": "Pietrzak,? 2003", "shortCiteRegEx": "Pietrzak", "year": 2003}, {"title": "The causal graph revisited for directed model checking", "author": ["M. Wehrle", "M. Helmert"], "venue": "Static Analysis, 16th Int\u2019l Symp., (SAS\u201909), Los Angeles, CA, USA, volume 5673 of Lecture Notes in Computer Science, 86\u2013 101. Springer.", "citeRegEx": "Wehrle and Helmert,? 2009", "shortCiteRegEx": "Wehrle and Helmert", "year": 2009}, {"title": "A reactive planner for a model-based executive", "author": ["B.C. Williams", "P.P. Nayak"], "venue": "15th Int\u2019l Joint Conf. Artif. Intell. (IJCAI\u201997), Nagoya, Japan, 1178\u20131185.", "citeRegEx": "Williams and Nayak,? 1997", "shortCiteRegEx": "Williams and Nayak", "year": 1997}], "referenceMentions": [{"referenceID": 17, "context": "Helmert 2004 used a planning algorithm for a simpler restricted problem to compute heuristic values for subproblems and then combine these values. Similarly, the popular h heuristic Hoffmann (2005) exploits Bylander\u2019s results that planning is simpler with only positive preconditions and uses this as a relaxation for computing a heuristic value.", "startOffset": 0, "endOffset": 198}, {"referenceID": 4, "context": "Parameterized complexity analysis has contributed fundamental new insights into complexity theory Downey and Fellows (1999). It is nowadays a very common technique in many areas of computer science, including many subareas of AI, like non-monotonic reasoning Gottlob, Pichler, and Wei (2006), constraints Gaspers and Szeider (2011), social choice Brandt, Brill, and Seedig (2011) and argumentation Ordyniak and Szeider (2011).", "startOffset": 98, "endOffset": 124}, {"referenceID": 4, "context": "Parameterized complexity analysis has contributed fundamental new insights into complexity theory Downey and Fellows (1999). It is nowadays a very common technique in many areas of computer science, including many subareas of AI, like non-monotonic reasoning Gottlob, Pichler, and Wei (2006), constraints Gaspers and Szeider (2011), social choice Brandt, Brill, and Seedig (2011) and argumentation Ordyniak and Szeider (2011).", "startOffset": 98, "endOffset": 292}, {"referenceID": 4, "context": "Parameterized complexity analysis has contributed fundamental new insights into complexity theory Downey and Fellows (1999). It is nowadays a very common technique in many areas of computer science, including many subareas of AI, like non-monotonic reasoning Gottlob, Pichler, and Wei (2006), constraints Gaspers and Szeider (2011), social choice Brandt, Brill, and Seedig (2011) and argumentation Ordyniak and Szeider (2011).", "startOffset": 98, "endOffset": 332}, {"referenceID": 4, "context": "Parameterized complexity analysis has contributed fundamental new insights into complexity theory Downey and Fellows (1999). It is nowadays a very common technique in many areas of computer science, including many subareas of AI, like non-monotonic reasoning Gottlob, Pichler, and Wei (2006), constraints Gaspers and Szeider (2011), social choice Brandt, Brill, and Seedig (2011) and argumentation Ordyniak and Szeider (2011).", "startOffset": 98, "endOffset": 380}, {"referenceID": 4, "context": "Parameterized complexity analysis has contributed fundamental new insights into complexity theory Downey and Fellows (1999). It is nowadays a very common technique in many areas of computer science, including many subareas of AI, like non-monotonic reasoning Gottlob, Pichler, and Wei (2006), constraints Gaspers and Szeider (2011), social choice Brandt, Brill, and Seedig (2011) and argumentation Ordyniak and Szeider (2011). The examples in planning are rare, however.", "startOffset": 98, "endOffset": 426}, {"referenceID": 0, "context": "There is also a result by B\u00e4ckstr\u00f6m and Jonsson 2011 that STRIPS planning is FPT under a certain restriction that deliberately lower-bounds the plan length, thus not contradicting our results. This restriction was motivated by a different agenda, studying the expressive power of planning languages in general rather than subclasses of a particular language. The parameterized analyses of planning that we provide in this paper does not replace the earlier results or make them obsolete. Since the parameterized complexity classes and the standard ones are not comparable, our results must be viewed as supplementary, providing further information. If we consider the previous classifications together with our parameterized classification we get a more detailed and informative picture of planning complexity than by considering either of them alone. This sheds new light on the discrepancy between theoretical and practical results regarding the difficulty of planning. For instance, while B\u00e4ckstr\u00f6m and Nebel proved that restriction U (actions can change only one variable) does not make planning easier under standard analysis, we show that it is actually easier from a parameterized point of view. This is interesting since restriction U has been considered acceptable in some practical applications of planning, for instance on-board planning in spacecrafts Williams and Nayak (1997); Brafman and Domshlak (2003).", "startOffset": 26, "endOffset": 1390}, {"referenceID": 0, "context": "There is also a result by B\u00e4ckstr\u00f6m and Jonsson 2011 that STRIPS planning is FPT under a certain restriction that deliberately lower-bounds the plan length, thus not contradicting our results. This restriction was motivated by a different agenda, studying the expressive power of planning languages in general rather than subclasses of a particular language. The parameterized analyses of planning that we provide in this paper does not replace the earlier results or make them obsolete. Since the parameterized complexity classes and the standard ones are not comparable, our results must be viewed as supplementary, providing further information. If we consider the previous classifications together with our parameterized classification we get a more detailed and informative picture of planning complexity than by considering either of them alone. This sheds new light on the discrepancy between theoretical and practical results regarding the difficulty of planning. For instance, while B\u00e4ckstr\u00f6m and Nebel proved that restriction U (actions can change only one variable) does not make planning easier under standard analysis, we show that it is actually easier from a parameterized point of view. This is interesting since restriction U has been considered acceptable in some practical applications of planning, for instance on-board planning in spacecrafts Williams and Nayak (1997); Brafman and Domshlak (2003). Furthermore, B\u00e4ckstr\u00f6m and Nebel showed that planning is NP-hard under restriction P (there are never two actions that set the same variable value) but did not provide any better upper bound than in the unrestricted case.", "startOffset": 26, "endOffset": 1419}, {"referenceID": 0, "context": "There is also a result by B\u00e4ckstr\u00f6m and Jonsson 2011 that STRIPS planning is FPT under a certain restriction that deliberately lower-bounds the plan length, thus not contradicting our results. This restriction was motivated by a different agenda, studying the expressive power of planning languages in general rather than subclasses of a particular language. The parameterized analyses of planning that we provide in this paper does not replace the earlier results or make them obsolete. Since the parameterized complexity classes and the standard ones are not comparable, our results must be viewed as supplementary, providing further information. If we consider the previous classifications together with our parameterized classification we get a more detailed and informative picture of planning complexity than by considering either of them alone. This sheds new light on the discrepancy between theoretical and practical results regarding the difficulty of planning. For instance, while B\u00e4ckstr\u00f6m and Nebel proved that restriction U (actions can change only one variable) does not make planning easier under standard analysis, we show that it is actually easier from a parameterized point of view. This is interesting since restriction U has been considered acceptable in some practical applications of planning, for instance on-board planning in spacecrafts Williams and Nayak (1997); Brafman and Domshlak (2003). Furthermore, B\u00e4ckstr\u00f6m and Nebel showed that planning is NP-hard under restriction P (there are never two actions that set the same variable value) but did not provide any better upper bound than in the unrestricted case. We show that planning is actually FPT under this restriction. We also show that a standard partial-order planning algorithm McAllester and Rosenblitt (1991) can exploit this fact with a minor modification that could be implemented as a heuristic.", "startOffset": 26, "endOffset": 1799}, {"referenceID": 8, "context": "We define the basic notions of Parameterized Complexity and refer to other sources Downey and Fellows (1999); Flum and Grohe (2006) for an in-depth treatment.", "startOffset": 83, "endOffset": 109}, {"referenceID": 8, "context": "We define the basic notions of Parameterized Complexity and refer to other sources Downey and Fellows (1999); Flum and Grohe (2006) for an in-depth treatment.", "startOffset": 83, "endOffset": 132}, {"referenceID": 24, "context": "The following problem is W[1]-complete Pietrzak (2003).", "startOffset": 39, "endOffset": 55}, {"referenceID": 2, "context": "The algorithm is generalized to SAS rather than propositional STRIPS, which is straightforward and appears in the literature B\u00e4ckstr\u00f6m (1994). We only explain the algorithm and our notation, referring the reader to the original paper for details.", "startOffset": 125, "endOffset": 142}, {"referenceID": 13, "context": "For instance, model-checking traces can be viewed as plans and vice versa Edelkamp, Leue, and Visser (2007), and methods and results have been transferred between the two areas in both directions Edelkamp (2003); Wehrle and Helmert (2009); Edelkamp, Kellershoff, and Sulewski (2010).", "startOffset": 74, "endOffset": 108}, {"referenceID": 13, "context": "For instance, model-checking traces can be viewed as plans and vice versa Edelkamp, Leue, and Visser (2007), and methods and results have been transferred between the two areas in both directions Edelkamp (2003); Wehrle and Helmert (2009); Edelkamp, Kellershoff, and Sulewski (2010).", "startOffset": 74, "endOffset": 212}, {"referenceID": 13, "context": "For instance, model-checking traces can be viewed as plans and vice versa Edelkamp, Leue, and Visser (2007), and methods and results have been transferred between the two areas in both directions Edelkamp (2003); Wehrle and Helmert (2009); Edelkamp, Kellershoff, and Sulewski (2010).", "startOffset": 74, "endOffset": 239}, {"referenceID": 13, "context": "For instance, model-checking traces can be viewed as plans and vice versa Edelkamp, Leue, and Visser (2007), and methods and results have been transferred between the two areas in both directions Edelkamp (2003); Wehrle and Helmert (2009); Edelkamp, Kellershoff, and Sulewski (2010). Our reductions from planning to model-checking suggest that the problems are related also on a more fundamental level than just straightforward syntactical translations.", "startOffset": 74, "endOffset": 283}], "year": 2013, "abstractText": "The early classifications of the computational complexity of planning under various restrictions in STRIPS (Bylander) and SAS (B\u00e4ckstr\u00f6m and Nebel) have influenced following research in planning in many ways. We go back and reanalyse their subclasses, but this time using the more modern tool of parameterized complexity analysis. This provides new results that together with the old results give a more detailed picture of the complexity landscape. We demonstrate separation results not possible with standard complexity theory, which contributes to explaining why certain cases of planning have seemed simpler in practice than theory has predicted. In particular, we show that certain restrictions of practical interest are tractable in the parameterized sense of the term, and that a simple heuristic is sufficient to make a well-known partial-order planner exploit this fact.", "creator": "dvips(k) 5.991 Copyright 2011 Radical Eye Software"}}}