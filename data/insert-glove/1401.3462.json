{"id": "1401.3462", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Jan-2014", "title": "Efficient Informative Sensing using Multiple Robots", "abstract": "cossar The need supremacists for 1127-1279 efficient utkin monitoring fanek of nailers spatio - bashary temporal dynamics in cervecerias large environmental bappenas applications, mims such self-penned as frequent-flyer the water quality amil monitoring 75.81 in rivers xc70 and lakes, gregorie motivates comprise the gruyter use of easements robotic kicklighter sensors halab in dream-like order porsches to kcf achieve 96-85 sufficient spatial coverage. Typically, eigenmann these robots 12.66 have huntzinger bounded ardabil resources, pal\u00e1cio such storro as 22-strong limited battery motijheel or limited amounts vihuela of additives time to obtain snowslides measurements. nishi Thus, gmh careful karatina coordination of their paths is plethodontidae required in disasters order angels to denucci maximize the mani amount tesar of torrington information ioseliani collected, otoya while respecting updf the n\u00fcwa resource wo\u0142omin constraints. hauschka In legent this paper, we 110.66 present cohu an nonstate efficient jerzy approach for colimit near - kasarova optimally pert solving the NP - gourmelon hard malnik optimization demol problem of planning roiling such informative midrashim paths. In z-93 particular, imerese we spanish-speaking first ferme develop stokols eSIP (efficient md-82 Single - robot Informative tarmiyah Path 56-mile planning ), an approximation italian-built algorithm for jianlin optimizing the thalwil path of a single 2,177 robot. Hereby, we use a Gaussian lb8 Process to model the ky\u014dka underlying 2:4 phenomenon, heimowitz and xingshan use prosperity the tonic-clonic mutual mother information between the \u0623\u0628\u0648 visited heavy locations 19-match and remainder of andres the taf space to quantify the jacobowitz amount candee of schlachter information collected. We prove bigard that the skovgaard mutual information collected wimp using paths obtained by rawlings using v\u00e1zquez eSIP rasbora is close to the shuttered information eurosceptics obtained aski by an optimal citycat solution. kuboya We 64m then provide a general wujek technique, youngstar sequential butzer allocation, which can be used closers to pulse-doppler extend hounslow any beet single robot planning morpheus algorithm, viramgam such jajah as eSIP, 51.84 for kiraly the rocknes multi - robot rustamiyah problem. pisuerga This procedure approximately generalizes dunkard any 15.82 guarantees for the single - robot problem 46.4 to the 78.47 multi - brads robot case. dual-clutch We 44-point extensively 3-55 evaluate the shulan effectiveness ramcke of our approach naui on boddicker several anzald\u00faa experiments millrose performed in - field for two important veon environmental on-train sensing irdeineh applications, nepotistic lake and river monitoring, pel\u00e9 and simulation 10-length experiments boracay performed suffixing using eldard several real 98.58 world tehk sensor dhs network data sets.", "histories": [["v1", "Wed, 15 Jan 2014 05:21:51 GMT  (2377kb)", "http://arxiv.org/abs/1401.3462v1", null]], "reviews": [], "SUBJECTS": "cs.RO cs.AI", "authors": ["amarjeet singh", "reas krause", "carlos guestrin", "william j kaiser"], "accepted": false, "id": "1401.3462"}, "pdf": {"name": "1401.3462.pdf", "metadata": {"source": "CRF", "title": "Efficient Informative Sensing using Multiple Robots", "authors": ["Amarjeet Singh", "Andreas Krause", "Carlos Guestrin", "William J. Kaiser"], "emails": ["AMARJEET@EE.UCLA.EDU", "KRAUSEA@CALTECH.EDU", "GUESTRIN@CS.CMU.EDU", "KAISER@EE.UCLA.EDU"], "sections": [{"heading": null, "text": "tions, such as the water quality monitoring in rivers and lakes, motivates the use of robotic sensors in order to achieve sufficient spatial coverage. Typically, these robots have bounded resources, such as limited battery or limited amounts of time to obtain measurements. Thus, careful coordination of their paths is required in order to maximize the amount of information collected, while respecting the resource constraints. In this paper, we present an efficient approach for near-optimally solving the NP-hard optimization problem of planning such informative paths. In particular, we first develop eSIP (efficient Single-robot Informative Path planning), an approximation algorithm for optimizing the path of a single robot. Hereby, we use a Gaussian Process to model the underlying phenomenon, and use the mutual information between the visited locations and remainder of the space to quantify the amount of information collected. We prove that the mutual information collected using paths obtained by using eSIP is close to the information obtained by an optimal solution. We then provide a general technique, sequential allocation, which can be used to extend any single robot planning algorithm, such as eSIP, for the multi-robot problem. This procedure approximately generalizes any guarantees for the single-robot problem to the multi-robot case. We extensively evaluate the effectiveness of our approach on several experiments performed in-field for two important environmental sensing applications, lake and river monitoring, and simulation experiments performed using several real world sensor network data sets."}, {"heading": "1. Introduction", "text": "Global climate change and corresponding impetus on sustainable practices for environment-related activities has brought forth the challenging task of observing natural phenomena exhibiting dynamics in both space and time. Observing and characterizing these dynamics with high fidelity will be critical for answering several questions related to policy issues for monitoring and control and understanding biological effects on activity of microbes and other organisms living in (or dependent on) these environments. Monitoring algal bloom growth in lakes and salt concentration in rivers, as illustrated in Fig. 1, are specific examples of related phenomena of interest to biologists and other environment scientists (MacIntyre, 1993; Ishikawa & Tanaka, 1993; MacIntyre, Romero, & Kling, 2002).\nMonitoring environmental phenomena, such as algal bloom growth in a lake, requires measuring physical processes, such as nutrient concentration, wind effects and solar radiation, among others, across the entire spatial domain. One option to acquire data about such processes would be to statically deploy a set of sensing buoys (Reynolds-Fleming, Fleming, & Luettich, 2004). Due to the large spatial extent of the observed phenomena, this approach would require a large number of sensors in order to obtain high fidelity data. The spatio-temporal dynamics in these environments\nc\u00a92009 AI Access Foundation. All rights reserved.\nmotivate the use of actuated sensors \u2013 robots carrying sensors together with an efficient approach for planning the paths of these actuated sensors. These actuated sensors have been used in the past (Dhariwal et al., 2006) for measuring the phenomena at various locations and hence providing the biologists with critical information about the state of the lake.\nTypically however, such robots have strict resource constraints, such as storage battery energy, that limits the distance they can travel or the number of measurements they can acquire before the observed phenomena varies significantly. These constraints necessitate careful motion planning for the robots \u2013 coordinating their paths in order to maximize the amount of collected information, while satisfying the given resource constraints. In this paper, we tackle this important problem of seeking informative paths for a collection of robots, subject to constraints on the cost incurred by each robot, e.g. due to limited battery capacity.\nIn order to optimize the paths of these robots, we first need to quantify the informativeness of any particular chosen path. In this work, we adopt an approach from spatial statistics and employ probabilistic models of the spatial phenomena. Using these models, informativeness can be viewed in terms of the uncertainty about our prediction of the phenomena at unobserved locations, given the observations made by the mobile robots at a subset of locations (the selected path). In particular, we use a rich class of probabilistic models called Gaussian Processes (GPs) (Rasmussen & Williams, 2006) that has been shown to accurately model many spatial phenomena (Cressie, 1991), and apply the mutual information (MI) criterion (Caselton & Zidek, 1984) to quantify the reduction in uncertainty achieved through selected robot paths.\nUnfortunately, the problem of finding an optimal collection of paths, maximizing the mutual information criterion, is an NP-hard search problem, which is typically intractable even for small spatial phenomena. In this paper, we will develop an approximation algorithm which efficiently finds a provably near-optimal solution to this optimization problem. The key insight which will allow us to obtain such an algorithm is that the mutual information (and several other notions of informativeness (as discussed in Krause and Guestrin, 2007) satisfies submodularity, an intuitive diminishing returns property - making a new observation helps more if we have made only a few observations so far, and less if we have already made many observations (Krause et al., 2008).\nThe problem of optimizing the path of a single robot to maximize a submodular function over the visited locations was studied by Chekuri and Pal (2005), who developed an algorithm, recursivegreedy, with strong theoretical approximation guarantees. Unfortunately, the running time of their\napproach is quasi-polynomial: it scales asM logM , forM possible sensing locations. This property makes the algorithm impractical for most environmental sensing applications, with typical numbers (M ) of observation locations reaching to several hundreds and more. In this paper, we present two techniques \u2013 spatial decomposition and branch and bound search \u2013 for overcoming these limitations of the recursive-greedy approach of Chekuri et al., making it practical for real world sensing problems. We call this efficient approach for single robot path planning eSIP (efficient Single-robot Informative Path planning).\nWe then provide a general approach, sequential-allocation, which can be used to extend any single robot algorithm, such as eSIP, to the multi-robot setting. We furthermore prove that this generalization only leads to minimal reduction (independent of the number of mobile robots) of the approximation guarantee provided by the single robot algorithm. We combine eSIPwith sequentialallocation to develop the first efficient path planning algorithm (eMIP) that coordinates multiple robots, each having a resource constraint, in order to obtain highly informative paths, i.e. paths that maximize any given submodular function, such as mutual information. By exploiting submodularity, we prove strong theoretical approximation guarantees for our algorithm.\nWe extensively evaluate the effectiveness of our approach on several experiments performed in-field for two important environmental sensing applications, lake and river monitoring. The river campaign was executed at the confluence of two rivers, Merced river and San Joaquin river, in California from August 7-11, 2007. Fig. 1a displays an aerial view of the San Joaquin deployment site. The lake campaign was executed at a lake located at the University of California, Merced campus from August 10-11, 2007. Fig. 1b displays an aerial view of lake Fulmor. In both campaigns, the Networked Info Mechanical System (NIMS) (Jordan et al., 2007), a cable based robotic system, was used to perform path planning while observing a two dimensional vertical plane (cross-section). In addition to analyzing data from these deployments, we provide extensive experimental analysis of our algorithm on several real world sensor network data sets, including the data collected using a robotic boat at lake Fulmor (Dhariwal et al., 2006).\nThis manuscript is organized as follows. We formally introduce the Multi-robot Informative Path Planning (MIPP) problem in Section 2. In Section 3, we discuss the sequential-allocation approach for extending any single robot path planning algorithm to the multi-robot setting while preserving approximation guarantees. We then review the recursive-greedy algorithm proposed by Chekuri et al. (Section 5), an example of such a single-robot algorithm. Subsequently, we present our spatial decomposition (Section 6) and branch and bound techniques (Section 7) which drastically improve the running time of recursive-greedy and make it practical for real world sensing applications. In Section 8, we evaluate our approach through in-field experiments as well as in simulations on real world sensing datasets. In Section 9, we review related work, and we present our conclusions in Section 10. The proofs for all our results are presented in the Appendix."}, {"heading": "2. The Multi-robot Informative Path Planning Problem", "text": "We now formally define the Multi-robot Informative Path Planning (MIPP) problem. We assume that the spatial domain of the phenomenon is discretized into finitely many sensing locations V . For each subset A \u2286 V , let I(A) denote the sensing quality, i.e. the informativeness, of observing the phenomenon at locationsA. Details on appropriate choices for the sensing quality I are given below. We also associate with each location v \u2208 V , a sensing cost C(v) > 0, quantifying the expenses of obtaining a measurement at location v. When traveling between two locations, u and v, a robot in-\ncurs a traveling cost C(u, v) > 0. A robot traverses a path in this space: an s\u2013t-pathP is a sequence of l locations starting at node s, and finishing at t. The costC(P) of path P = (s = v1, v2, . . . , vl = t) is the sum of sensing costs and traveling costs along the path, i.e. C(P) = \u2211l\u22121 i=2 C(vi) +\u2211l\ni=2 C(vi\u22121, vi). In the case l = 2, cost of the path P will only involve traveling cost between the starting and finishing locations C(s, t). We will use the notation P to both refer to the sequence of nodes in the path, and to the subset of sensing locations P \u2286 V (ignoring their sequence). For a collection of k pathsP = {P1, . . . ,Pk}, one for each robot, I(P) = I(P1\u222a\u00b7 \u00b7 \u00b7\u222aPk) denotes the sensing quality of the paths, which quantifies the amount of information collected by the k paths. The goal of the MIPP problem is to find a collection P of k paths, with specified starting and finishing location si and ti (not necessarily different), such that each path has bounded cost C(Pi) \u2264 B for some specified budgetB, and that the paths are themost informative, i.e. I(P) is as large as possible.\nFormally, the problem can be defined as:\nmax Pi\u2286V I(\u222aki=1Pi); subject to C(Pi) \u2264 B, \u2200 i \u2208 {1, . . . , k}. (1)\nIn our lake monitoring example with the goal of performing surface monitoring using boats, we first discretized the two-dimensional surface of the lake into finitely many sensing locations (as depicted in Fig. 1b). For the single robot scenario, we then seek to find the most informative path P1 (in terms of predicting the algal bloom content) starting from location s and finishing in location t. The experiment cost C(vi) corresponds to the energy required for making chlorophyll and related measurements (indicators of amount of algal bloom). The traveling cost C(vi\u22121, vi) corresponds to the energy consumption when traveling from location vi\u22121 to vi. The budget B quantifies the total energy stored in the boat\u2019s battery."}, {"heading": "2.1 Quantifying Informativeness:", "text": "How can we quantify the sensing quality I? To model spatial phenomena, a common approach in spatial statistics is to use a rich class of probabilistic models called Gaussian Processes (GPs, c.f., Rasmussen and Williams, 2006). Such models associate a random variable Xv with each location v \u2208 V . The joint distribution P (XV) can then be used to quantify uncertainty in the prediction P (XV\\A | XA = xA) of phenomena at unobserved locations XV\\A, after making observations XA = xA at a small subset A of locations. To quantify this uncertainty we use, for example, the mutual information (MI) criterion (as discussed by Caselton and Zidek, 1984). For a set of locations, P , theMI criterion is defined as:\nMI(A) \u2261 H(XV\\A)\u2212H(XV\\A | XA) (2)\nwhere H(XV\\A) is the entropy of the unobserved locations V \\ A, and H(XV\\A | XA) is the conditional entropy of locations V \\ A after sensing at locations A. Hence mutual information measures the reduction in uncertainty at the unobserved locations. Therefore, in our lake monitoring example, we would like to select the locations that most reduce the uncertainty in the algal bloom content prediction for the lake environment. Conveniently, in a GP, the mutual information criterion can be computed efficiently and analytically (Caselton & Zidek, 1984). The effectiveness of mutual information to select informative sensing locations was studied by Krause et al. (2008). Several alternative information criteria such as entropy (Ko et al., 1995), information disk model (Bai et al., 2006) and alphabetical optimality criterion such as A-, D- and E-optimal have also been used to associate sensing quality with observation locations in related problem domain."}, {"heading": "2.2 Submodularity:", "text": "Even if we do not consider the constraints on the length of the paths of the robots, the problem of selecting locations that maximize mutual information is NP-hard (Krause et al., 2008). Hence, in general, we most likely cannot expect to be able to efficiently find the optimal set of locations. Instead, our goal will be to efficiently find near-optimal solutions, for which the sensing quality (e.g. mutual information), is provably close to the optimal sensing quality.\nThe key observation, which will allow us to obtain such strong approximation guarantees, is that mutual information satisfies the following diminishing returns property (Krause et al., 2008): The more locations we have already sensed, the less information we will gain by sensing a new location. This intuition is formalized by the concept of submodularity: A function f is submodular (Nemhauser et al., 1978) if:\n\u2200A \u2286 B \u2286 V and s \u2208 V \\ B; f(A \u222a s)\u2212 f(A) \u2265 f(B \u222a s)\u2212 f(B). (3)\nAnother intuitive property is that sensing quality is monotonic1, which means that I(A) \u2264 I(B) for all A \u2286 B \u2286 V . Hence, as we select more and more sensing locations, we will collect more and more information. Lastly, mutual information is normalized, i.e. I(\u2205) = 0.\nWe thus define our MIPP problem as the problem of optimizing paths of length at most B for k robots, such that the selected sensing locations maximize a normalized, monotonic submodular function I(\u00b7). This definition of the MIPP problem allows our approach to be applied to any monotonic submodular objective function, not just mutual information. This generalization is very useful, as several other notions of informativeness can be shown to satisfy submodularity (Krause & Guestrin, 2007)."}, {"heading": "2.3 Online vs Offline Path Planning:", "text": "Many robotic path planning applications, such as search and rescue, involve uncertain environments with complex dynamics that can only be partially observed. Informative path planning \u2013 selecting the best locations to observe subject to given sensing constraints, in such uncertain environments necessitates a trade off between exploration (gathering information about the environment) and exploitation (using the current belief about the state of the environment most effectively). We distinguish two different classes of algorithms: nonadaptive (offline) algorithms, that plan and commit to the paths before any observations are made, and adaptive (online) algorithms, that update and replan as new information is collected. Both the online and offline settings are NP-hard optimization problems. In this paper, we only discuss the approximation algorithms for the offline setting that exploit the known belief about the environment for efficient path planning. We plan to work towards extending our approach for an exploration-exploitation trade-off to incorporate online model adaptation in the future."}, {"heading": "3. Approximation Algorithm for MIPP", "text": "The problem of optimizing the path of a single robot (i.e. k = 1) to maximize a submodular function of the visited locations, constrained by an upper bound (B) on the path cost, was first studied by Chekuri and Pal (2005). We will review their recursive-greedy algorithm in detail in Section 5.\n1. This monotonicity holds only approximately for mutual information (Krause et al., 2008), which however is sufficient for all purposes of this paper.\nAlgorithm:sequential-allocation1 Input: B, k, starting / finishing locations s1, . . . , sk, t1, . . . , tk, V Output: A set of informative paths P1, . . . ,Pn begin2 A0 \u2190 \u2205;3 for 1 \u2264 i \u2264 k do4 // Performing path planning for the ith robot Pi \u2190 SPP (si, ti, B,Ai\u22121,V);5 // Committing to the previously selected locations Ai \u2190 Ai\u22121 \u222a Pi;6 return P1, . . . ,Pk;7 end8\nAlgorithm 1: Sequential allocation algorithm for multi robot path planning using any single robot path planning algorithm SPP. Output set of paths P1, . . . ,Pk provides an approximation guarantee of 1 + \u03b7 where \u03b7 is the approximation guarantee of single robot path planning algorithm SPP .\nIn our lake monitoring problem, we seek to plan multiple paths, one for each robot. One possibility is to apply the single-path algorithm to the product graph, i.e. plan a path over tuples of locations simultaneously representing the locations of all robots. However, such straightforward application of the single-robot planning algorithm would lead to an increase in running time which is exponential in the number of robots, and therefore intractable in practice. We are not aware of any sub-exponential approximation algorithm for this challenging multiple-robot path planning problem. In this paper, we present a simple algorithm for the multi-robot scenario that can exploit any approximation algorithm for the single robot case, such as the recursive-greedy algorithm, as discussed by Chekuri and Pal (2005), and (almost) preserve the approximation guarantee, while avoiding the exponential increase in running time.\nOur algorithm, sequential-allocation, successively applies the single robot path planning algorithm k times to get the paths for k robots. Hereby, when planning the jth path, the approach takes into account the locations already selected by the previous j \u2212 1 paths. Committing to the (approximately) best possible path at each stage before moving on to the next stage makes our approach \u201cgreedy\u201d in terms of paths.\nThe pseudocode of the algorithm is presented in Algorithm 1 and Fig. 2 illustrates the approach for three robots. The algorithm takes as input the budget constraint B, number of available robots k, starting and finishing location for each available robot s1, . . . , sk, t1, . . . , tk and the complete set of discrete observation locations V to select from. Let us assume that we have a single robot path planning algorithm, SPP , that takes as input a starting location si, a finishing location ti, budget constraint B, a set of locations already selected for observation and a set of possible observation locations that can be visited. In Fig. 2, all the three robots have same starting and finishing location.\nWhile planning the path for the first robot (i = 1), the input set of already selected observation locations is empty. At each subsequent stage, we commit to the locations selected in all the previous stages and pass the already observed locations as input to our next call to SPP . LetAi\u22121 be the locations already visited by paths P1, . . . ,Pi\u22121, andA0 = \u2205. Then the residual information, IAi\u22121 for a path P over unvisited locations is defined as IAi\u22121(P) = I(Ai\u22121\u222aP)\u2212I(Ai\u22121). It can be verified that if I is a normalized, monotonic and submodular function, then so is the residual information\nIAi\u22121 . Thus, at stage i we use SPP to find the most informative path with respect to the modified residual sensing quality function. In Fig. 2, when planning P2, locations selected for P1 are considered and the sensing quality function used is IP1 . Similarly, while evaluating the path P3, locations selected for P1 and P2 are taken into account and the sensing quality function used is IP1\u222aP2 .\nPerhaps surprisingly, this straight-forward \u201cgreedy\u201d sequential allocation approach is guaranteed to perform almost as well as the black box algorithm used for path planning. More formally, assume we have an \u03b7 -approximate algorithm for the single robot problem, i.e. an algorithm which, starting with budget B and a monotonic submodular function f , is guaranteed to find a path recovering at least a fraction of 1/\u03b7 of the optimal information achievable with the same budget. In this case, the following theorem proves that the sequential allocation procedure has approximation guarantee close to \u03b7 as well:\nTheorem 1. Let \u03b7 be the approximation guarantee for the single path instance of the informative path planning problem. Then our sequential-allocation algorithm achieves an approximation guarantee of (1 + \u03b7) for the MIPP problem. In the special case, where all robots have the same starting (si = sj ,\u2200i, j) and finishing locations (ti = tj ,\u2200i, j), the approximation guarantee improves to 1/(1\u2212 exp (\u22121/\u03b7)) \u2264 1 + \u03b7.\nThe work by Blum et al. (2003) proved Theorem 1 for the special case of additive (modular) sensing quality functions. In this paper, we extend their result to general submodular functions.\nAs an example of an \u03b7-approximate algorithm for the single robot problem, in the next section, we review the recursive-greedy algorithm as proposed by Chekuri and Pal (2005). This algorithm has an approximation guarantee \u03b7 of O(log2 |P\u2217|), where |P\u2217| is the number of locations visited by an optimal solution P\u2217. Hence, for this algorithm, the performance guarantee obtained for the MIPP problem through sequential allocation is O(log2 |P\u2217|) as well2.\n2. In order to apply sequential allocation to the recursive-greedy algorithm, we can, when planning the ith path, simply pass the set of nodes visited by the previous i\u2212 1 paths as the input parameterR, as is illustrated in Algorithm 2."}, {"heading": "4. A Note on Greedy Path Planning", "text": "The work by Krause et al. (2008) considered the sensor placement problem, where a subset A \u2286 V of k locations is selected in order to maximize the mutual information, without considering path costs. By exploiting the submodularity property of MI, they proved that if the discretization V is fine enough and the GP satisfies mild regularity conditions, greedily selecting locations based on this criterion is near-optimal. More specifically, the greedy algorithm (which we call GreedySubset in the following), after selecting the first i locations Ai, picks the location with maximum residual information i.e. vi+1 = argmaxv IAi({v}) and sets Ai+1 = Ai \u222a {vi+1}. GreedySubset hence iteratively adds locations which increase mutual information the most. Using a result proposed by Nemhauser et al. (1978) on the performance of the greedy algorithm for submodular functions, the work by Krause et al. (2008) showed that GreedySubset selects sets which achieve mutual information of at least (1 \u2212 1/e)OPT\u2212\u03b5, where OPT is the optimal mutual information among all sets of the same size, and \u03b5 is a small error incurred due to the discretization.\nThe strong performance of the greedy algorithm in the unconstrained (no traveling costs between locations) case motivates the question of whether a simple greedy approach could perform well in the more complex path planning setting considered in this paper. While it is difficult to give a general impossibility statement for such a question, several natural extensions of the greedy algorithm can be shown to perform arbitrarily badly.\nFor example, consider a setting where we define the cost C(A) of a set of nodes as the cost of the cheapest path connecting the nodes A. Assuming locations Ai have already been picked, a natural extension of the greedy algorithm will be to add a location v which most improves the benefit-cost ratio\nv\u2217 = argmax v\u2208V\\A IAi(v) CAi(v) ,\nwhere CAi(v) = C(Ai \u222a{v})\u2212C(Ai) is the increase in cost after adding v to the already selected locations Ai.\nFig. 3 shows a small example illustrating that this intuitive greedy procedure can perform arbitrarily poorly compared to an optimal approach. The example is illustrated in Fig. 3a, with s as both the starting and the finishing location and 2B as the total available budget. The reward associated with each observation location is displayed in parenthesis with the corresponding locations. For the ease of illustration, we assume that the reward associated with each observation location is some modular function (instead of a submodular function). Traveling cost is associated with the corresponding edges in the example. Starting at location s, possible options for the first observation location are to select either of o1, g1 or t. Observation location o1 will lead to a cluster of n (= B/ ) locations each separated by a traveling cost and with an associated reward of 1 (except o1 that has an associated reward of ). o1 is separated from g1 by a traveling cost of B/2 while the rest of the locations in the cluster are assumed to be unreachable from any other location outside the cluster. Observation location g1 will lead to a series of m (= B/ ) locations, each separated from the previous one by traveling cost and with an associated reward of 2 .\nAs illustrated in Fig. 3b, an optimal approach would select o1 as the first location, paying a traveling cost of B/2 and earning a very small reward . Once the robot observes o1, it can then observe the rest of (B/ \u22121) locations in the cluster, each providing a reward of 1 and return back to s while spending a total of 2B as the traveling cost. Thus, the total reward collected by an optimal approach, for this example, will be 1(B/ \u2212 1) + .\nAs illustrated in Fig. 3c, a \u201cgreedy\u201d approach based on the reward-cost ratio will select g1 as the first observation location (with the highest reward to cost ratio of 2). Since o1 is at a distance B/2 away from g1 and only provides a reward of , this approach will continue along the series, observing all the locations till gm and returning back to s. Total reward collected by such an approach will be 2B. On the other hand, a simple \u201cgreedy\u201d approach based on reward (as illustrated in Fig. 3d) will simply select t as the first observation location and return back to s, collecting a total reward of 1. Since the ratio B/ can be arbitrarily large as \u2192 0, the reward collected by simple intuitive greedy approaches (2B or 1) can be arbitrarily poor when compared to the reward collected by an optimal approach (1(B/ \u2212 1) + ).\nAlthough, the reward function considered in the example was assumed to be a modular function, the submodular optimal reward can also be arbitrarily large, compared to submodular reward collected by simple greedy approaches (the difference between the submodular and modular reward will depend on the correlation of the selected observation locations). This insight necessitates the development of more complex algorithms for path planning as considered in this paper."}, {"heading": "5. The Recursive-greedy Algorithm", "text": "We will now review the recursive-greedy algorithm as proposed by Chekuri and Pal, since it forms the basis for our efficient single robot path planning approach. The basic strategy of the algorithm is a divide-and-conquer approach. Any path from the starting location (s) to finishing location (t) has a middle location (vm) such that there are same number of locations (or different by at most 1) on either side of vm in the s\u2212 t path. Thus, the problem of finding a s\u2212 t path can be divided into two smaller subproblems of finding smaller subpaths (s \u2212 vm and vm \u2212 t) and then concatenating these small subpaths. While having the same number of locations, the subpaths on either side of the middle node can have different costs, i.e. the budget for the total path has to be split into two smaller\nAlgorithm:recursive-greedy (RG)1 Input: s,t,B,R,iter Output: An informative path P begin2 if c(s, t) > B then3 return Infeasible;4 P \u2190 s, t;5 Base case: iter=0 return P;6 m\u2190 fR(P);7 // Trying each location as middle node foreach vm \u2208 V do8 // Trying all possible budget splits for 1 \u2264 B1 \u2264 B do9\n// Planning subpath on one side of the middle node P1 \u2190 RG(s, vm, B1,R, iter \u2212 1);10 // Planning subpath on other side of the middle node,\ncommitting to nodes selected in first subpath P2 \u2190 RG(vm, t, B \u2212B1,R\u222a P1, iter \u2212 1);11 if fR(P1 \u222a P2) > m then12 P \u2190 P1 \u222a P2;13 m\u2190 fR(P);14 return P;15 end16\nAlgorithm 2: Recursive greedy algorithm for single robot instance of MIPP as proposed by Chekuri and Pal (2005). Output path P provides an approximation guarantee of IX(P) \u2265 IX(P\u2217)/ d1 + log ke, where I represent the submodular reward function, P\u2217 represent an optimal path and k represent the number of nodes in the optimal path.\nbudgets (not necessarily equal), one for each subpath. Searching for the best middle location and trying all possible budget splits on either side of the middle location, while optimizing the complete s \u2212 t path, would result in an exhaustive search for the optimal solution and therefore will be prohibitively expensive. Instead of performing this exhaustive search, the recursive-greedy algorithm follows a simple greedy strategy, wherein for each of the possible budget splits and each possible middle nodes considered, one can first plan the optimal subpath on one side of the middle location, then commit to the planned subpath and optimize for the subpath on the other side. Such a path, consisting of independently optimized subpath s\u2212vm and a subpath vm\u2212t optimized subject to observation locations already selected in s\u2212 vm, may result in a suboptimal s\u2212 t path. Nonetheless, Chekuri and Pal proved that such a path has an approximation guarantee of O(log2 |P\u2217|), where |P\u2217| is the number of locations visited by an optimal solution P\u2217.\nIn order to implement such a greedy approach, the recursive calls planning the second subpath will \u2013 similarly as done in sequential allocation \u2013 optimize a residual reward function which measures the incremental gain taking into account the information already obtained by the locations selected in the first subpath. More formally, let the set P1 refer to the locations selected in the first subpath, and consider the residual submodular function fP1 over a set of locations A as\nfP1(A) = f(A\u222aP1)\u2212 f(P1). If P2 is the set of locations in the second subpath, then it holds that f(P1) + fP1(P2) = f(P1 \u222a P2). Hence, if the first recursive call (with submodular function f ) returns path P1, and the second recursive call (with submodular function fP1) returns path P2, then the sum of the scores of the subproblems exactly equals the score of the concatenated path.\nLet us now formalize the intuitive description of the recursive-greedy algorithm. The pseudocode of the algorithm is presented in Algorithm 2. The inputs to the algorithm are a starting location s, a finishing location t, an upper bound on the path cost B, a parameterR that defines the residual for the submodular function such that the function that needs to be maximized is defined as fR(P) = f(P \u222aR)\u2212 f(R), and a parameter i that represents the recursion depth. The maximum number of locations that can be selected at each stage is calculated using the recursion depth as 2i. In the base case (recursion depth i = 0), the algorithm simply returns the path P = (s, t) (if the cost c(s, t) \u2264 B).\nIn the recursive case, the algorithm searches for a s\u2212 t path with maximum reward by iterating over all possible locations (that can be reached with given budget constraint) as middle locations (Line 8), i.e. locations that could possibly split the required path into two subpaths with equal number of locations on either side. For each such middle location, the algorithm explores all possible splits of available budget (Line 9) across the two subpaths on either side of the middle location. Reducing the recursion depth by 1, for each subpath, ensures that the same number of locations are selected on either side of the middle location. However, before exploring the second subpath, the algorithm commits to the locations selected in the first subpath by passing them as input through the \u201cresidual\u201d parameter (Line 11). The two subpaths found in such a way are then concatenated to provide a complete s \u2212 t path. The algorithm stores the best possible s \u2212 t path over the already searched problem space, replacing it with a better path whenever such a path is found."}, {"heading": "5.1 Structure of the Search Problem", "text": "It is instructive to consider the recursive structure generated by the recursive-greedy algorithm. Fig. 4 illustrates an example of such a structure when running recursive-greedy for our lake sensing application with the given starting (s) and finishing (t) location and an upper bound on the path cost (B). The search using recursive-greedy can be represented graphically as a sum-max tree. At the root is a max node representing the objective of finding a s\u2212 t path with maximum possible reward, while the cost of the path is bounded by budget B. For each such max node, the children in the search tree represent sum nodes corresponding to sum of rewards collected from the two subpaths on either side of the middle location. Therefore, at the end of the first iteration, the graphical representation will have a max node as root with several sum nodes as children, for each feasible middle location and each possible budget splits around that middle location. A partial tree at the end of first iteration is shown in Fig. 4a.\nFor each sum node, formed at the end of the first iteration, the algorithm is then applied recursively on the left subpath. Thus the first step of second iteration seeks to find a s \u2212 vm path with maximum possible reward under the budget constraint corresponding to the respective budget split for the sum node. Then, their approach commits to the selected locations on the left side, and recurses on the right subpath (to search for a vm \u2212 t path), given these selected locations. As a result, each sum node will have two max nodes as children, each representing an objective to find a subpath of maximum reward on either side of the selected middle location. This algorithm is \u201cgreedy\u201d in that it commits to the locations selected in the first subpath before optimizing the second subpath.\nA partial tree at the end of second iteration is shown in Fig. 4b. Despite the greedy nature, the recursive-greedy approach provides the following approximation guarantee:\nTheorem 2. (Chekuri & Pal, 2005) Let P\u2217 = (s = v0, v1, . . . , vk = t) be an optimal s-t-path solution. Let P be the path returned by RG(s, t, B,R, i). If i \u2265 d1 + log ke, then IX(P) \u2265 IX(P\u2217)/ d1 + log ke.\nHence, the recursive-greedy solution P obtains at least a fraction of 1d1+log2 ke of the optimal information, where k \u2264 n, i.e. the total number of locations traversed by the optimal path will be smaller than the total number of locations in the discretized spatial domain. Referring back to Theorem 1, for the MIPP problem using recursive-greedy as the single robot path planning approach, \u03b7 = d1 + log ke."}, {"heading": "5.2 Running Time", "text": "By inspecting the recursive structure, the running time of the recursive-greedy algorithm can be seen to be quasi-polynomial. More specifically, the running time of the algorithm isO((MB)O(log2 M)), whereB is the budget constraint andM = |V| is the total number of possible observation locations. So, even for a small problem with M = 64 locations, the exponent will be 6, resulting in a very large computation time, making the algorithm impractical for observing several real world physical processes.\nThe large computational effort required by recursive-greedy can be attributed to two issues: 1) the large branching factor at each of themax nodes of the recursion tree (sum nodes for each possible middle node and each possible budget split across that middle node) and 2) (possibly) unnecessary recursion while exploring subtrees in problem space that can not provide us with an improved reward compared to current best solution. In the following sections, we propose two complementary approaches (can be used independently of the others) which are intended to ameliorate these concerns: a spatial decomposition technique, and a branch and bound approach. Spatial decomposition\n(discussed in Section 6) seeks to reduce the high branching factor (i.e. the number of sum nodes in the search tree) by clustering the sensing locations and then running the recursive-greedy over these clusters instead of actual sensing locations. Branch and bound (discussed in Section 7) seeks to avoid unnecessary recursion by maintaining a lower and an upper bound on the possible reward from a subtree in the search tree and pruning the tree accordingly. These two approaches, together with sequential-allocation (discussed in Section 3) provide an efficient algorithm for multi robot informative path planning."}, {"heading": "6. Spatial Decomposition \u2013 Approximating MIPP as SD-MIPP", "text": "In this section, we explain in detail the process of spatial decomposition and the corresponding improvements in running time achieved through this process. Our approach assumes that the traveling cost between arbitrary locations is given by their euclidean distance.\nAn intuitive approach for improving the running time is to spatially decompose the sensing region into smaller sub-regions, each containing a cluster of sensing locations. We can thus think about planning informative paths as deciding which sub-regions to explore, and then deciding which locations to sense within these sub-regions. The idea of exploring the sub-regions motivates the decomposition of the sensing domain into smaller regions (cells). We can then run the recursivegreedy algorithm on these cells instead of the actual sensing locations. Since the size of each cellular region is small, traveling cost within each cell can be ignored3. Once we ignore the traveling cost within the cells, sensing locations inside the selected cells can be chosen using the GreedySubset approach (as proposed by Krause et al., 2008), taking advantage of its strong approximation guar-\n3. There may be robotic platforms where non-holonomic motion constraints will make small motions much more challenging and thus traveling cost for smaller distances within a cell may become non-negligible. For such systems, with large traveling cost for smaller motions, some system specific constraints may be possible to account for while performing cellular decomposition or the greedy algorithm may be constrained to not select locations that are \u201ctoo\u201d close).\nantee in an unconstrained setting as discussed in Section 4. Fig. 5 presents an illustration of our approach and is explained as follows:\n1. We decompose the sensing region, containing finitely many discrete sensing locations (c.f., Fig. 5a, top), into a collection of non-overlapping cells V\u0303 = {C1, C2, . . . , CN} (c.f., Fig. 5a, bottom). The distance between two cells is defined as the distance between the centroids of these cells. Each cell Ci contains a set of locations vi \u2208 V , representing sensing locations, such that the coordinates of these locations, in a euclidean metric space, lie within the boundary of the containing cell.\n2. We approximate the original MIPP problem with the spatially decomposed MIPP problem, or SD-MIPP problem on V\u0303 . In SD-MIPP, we jointly optimize over cell-paths in V\u0303 (c.f., Fig. 5b, top) using the recursive-greedy algorithm, and over the allocation of observations within the cells visited by the paths using the GreedySubset algorithm. Thus, when allocating measurements to a cell, we ignore the traveling cost within the cell (c.f., Fig. 5b, bottom). Since the cells are not very large, this simplification only leads to a small additional cost when the SD-MIPP solution is transformed back to the original MIPP problem.\n3. We transfer the (approximate) SD-MIPP solution, consisting of a cell-path and an allocation of observations to cells (c.f., Fig. 5c, top), back to the original MIPP problem. We then smooth the path (c.f., Fig. 5c, bottom) using heuristics, e.g. the tour-opt heuristics as discussed by Lin (1965).\nDual optimization of cell paths and budget allocation for observations within each visited cell motivated splitting the available budget B\u0303 into a budgetBt for traveling between the cells and a budgetBe for making experiments at sensing locations within the visited cells. Such a split can be easily incorporated in recursive-greedy algorithm as well but was not required as the paths in recursivegreedywere optimized over observation locations and not cells containing these locations. Formally, the SD-MIPP problem is the following: We want to find a path P\u2217C = (Cs = Ci1 , . . . , Cil = Ct), for each robot i with starting cell Cs containing the starting node s and finishing cell Ct containing the finishing node t, with a travel cost of at most Bt. This travel budget is measured in terms of distances between centers of visited cells, and the cost of traveling within the cells is defined as 0. In addition, for each visited cell Cij in P\u2217C , we want to select a set of sensing locationsAij , such that the total experimental cost (for making observations within the visited cells) is upper bounded by Be, i.e. C(Ai1 \u222a \u00b7 \u00b7 \u00b7 \u222aAil) \u2264 Be, and that the information I(Ai1 \u222a \u00b7 \u00b7 \u00b7 \u222aAil) is as large as possible. The optimal SD-MIPP solution uses the optimal split of the budget B\u0303 into Bt and Be. To simplify the presentation, we rescale the costs such that the cells form a uniform grid of quadratic cells with width L, and assume that the sensing cost Cexp is constant over all locations. These assumptions can easily be relaxed, but they allow us to relate the path costs to the number of cells traversed, to simplify the discussion.\nThe following lemma states that there exists an SD-MIPP version (P\u2217C) of the MIPP-optimal path (P\u2217), with (almost) the same cost, and the same information.\nLemma 3. Let P\u2217 = (s = v0, v1, . . . , vl = t) be an optimal s-t-path solution to MIPP, constrained by budget B. Then there exists a corresponding SD-MIPP path P\u2217C = (Cs = Ci1 , . . . , Cil = Ct), traversing through locations Ai1 \u222a \u00b7 \u00b7 \u00b7 \u222a Ail , with budget B\u0303 of at most 2 \u221a 2B + 4L collecting the same information.\nAlgorithm: eMIP1\nInput: B\u0303, k, starting / finishing locations s1, . . . , sk, t1, . . . , tk Output: A collection of informative paths P1, . . . ,Pk begin2 Perform spatial decomposition into cells;3 Find starting and ending cells Csi and Cti ;4 R\u2190 \u2205;5 // Path planning for each robot for i = 1 to k do6\n// Trying different combination of traveling and experimental budget\nfor iter = 0 to blog2 B\u0303c do7 Be \u2190 B\u0303 \u2212 2iter;8 P \u2032iter \u2190recursive-eSIP (Csi , Cti ,Be,R,iter);9 Smooth P \u2032iter using tour-opt heuristics;10 Pi \u2190 argmaxiter I(P \u2032iter);11 R\u2190 R\u222a Pi;12 return P1, . . . ,Pk;13 end14\nAlgorithm 3: eMIP algorithm for informative multi robot path planning. Procedure from Line 7 to Line 11 effectively implements eSIP algorithm. eSIP is then repeated (Line 6) using sequential allocation described in Section 3 (Line 6) to get paths for each robot i.\nWe now present an algorithm for finding an approximately optimal solution to SD-MIPP, and then we show that this solution gives us an approximate solution to the original MIPP problem, with just slightly increased cost of 2 \u221a 2B+4L, for ensuring that the optimal solution for MIPP exists in the corresponding SD-MIPP setting."}, {"heading": "6.1 Algorithm for SD-MIPP", "text": "Our eMIP algorithm solves the SD-MIPP problem on V\u0303 and then smooths out the paths over the selected observation locations to provide a solution to MIPP. Let us first clarify the algorithmic nomenclature specifically:\n\u2022 recursive-eSIP: implements an approach similar to recursive-greedy for selecting a path over V\u0303 and greedily selects the observation locations within each visited cell using GreedySubset;\n\u2022 eSIP: iterates through different values of traveling budget by calling recursive-eSIP with corresponding values of inputBe and i and smoothing the output path from recursive-eSIP using tour-opt heuristics;\n\u2022 eMIP: effectively implements sequential-allocation with eSIP as the single robot path planning algorithm\nThe complete algorithm works as follows: An outer loop (Line 6 in Algorithm 3) implements the sequential allocation algorithm for performing path planning for multiple robots. The procedure\ninside the outer loop (Line 7 to Line 11 in Algorithm 3) implements the eSIP algorithm. This procedure iterates through different combination of traveling and experimental budget, allocating Bt (= 2iter) out of the total budget B\u0303 for traveling between the cells, and Be(= B\u0303 \u2212Bt) for making experiments within the visited cells. Stepping through Bt in powers of 2 results in faster performance (log2 B\u0303 instead of B\u0303 iterations). If we increase the input budget B\u0303 by a factor of 2, the exponential increase in traveling budget is guaranteed to try traveling budget,Bt (= 2iter \u2265 BtApp) whereBtApp is the traveling budget for the best approximation path. Since the overall budget B\u0303 is increased by a factor of 2, the remaining experimental budget is also guaranteed to be more than the experimental budget corresponding to the best approximation path. Therefore, exponential increase in traveling budget will only increase the required budget B\u0303 by at most a factor of 2. The eSIP procedure then calls recursive-eSIP (explained in Algorithm 4), selecting the cells to visit, and greedily allocating observations in the visited cells. Finally, the eSIP procedure calls tour-opt heuristics to smooth the output path from recursive-eSIP.\nThe recursive-eSIP procedure takes as input a starting cell Cs, a finishing cell Ct, an experimental budget Be, a residual R indicating the locations visited thus far (initially passed empty from eMIP), and a maximum recursion depth, iter (initially passed log2 Bt from eMIP). We then:\n1. Iterate through all possible choices of middle cells Cm (such that there are, almost, equal number of cells on either side of Cm) and budget splits B\u0303e (of the available experimental budget Be) to spend for making experiments on the subpaths from Cs to Cm and Cm to Ct (c.f., Fig. 5b). The budget splits B\u0303e can either be linearly (more accurate) or exponentially (faster) spaced, as described below. 2. Recursively find a subpathP1 from Cs to Cm, constrained by budgetB\u2032, leaving the remaining budget (Be\u2212B\u2032) for the other subpath P2. Reducing recursion depth (iter) by 1, for each of the subpaths P1 and P2, ensures that equal number of cells are visited on either side Cm. The lowest level of recursion depth 0 signifies the cell selected for the corresponding path. At the lowest recursion level, we then use the GreedySubset algorithm (c.f., Section 4) to select the sensing locations based on the residual information function IR and constrained by budget B\u2032. As an illustration, the black locations in the middle cell Cm in Fig. 5b bottom, are selected by the GreedySubset algorithm with budget B\u2032 = 4 such that they provide the maximum improvement in mutual information.\n3. We then commit to the locations selected in P1, and recursively find a subpath P2 from Cm to Ct, with experimental budget Be \u2212 B\u2032. Committing to the locations selected in P1 requires that we greedily select the sensing locations at lowest recursion level based on the residual information function IR\u222aP1 . 4. Finally, we concatenate the locations obtained in P1 and P2 to output the best path from the algorithm (c.f., Fig. 5c, top)."}, {"heading": "6.2 Linear vs. Exponential Budget Splits", "text": "Step 1 of the recursive-eSIP procedure (as explained in Section 6.1) considers different budget splits B\u2032 \u2208 B\u0303e to the left and right subpaths. Similar to the recursive greedy algorithm, one can choose B\u0303e = {0, 1, 2, 3, . . . , Be\u22121, Be} to be linearly spaced. Since the branching factor is proportional to the number of considered splits, linear budget splits leads to a large amount of computation effort.\nAlgorithm: recursive-eSIP1 Input: Cs, Ct, Be,R, iter Output: An informative path P from Cs to Ct begin2 if (d(Cs, Ct) > 2iterL) then return Infeasible;3 // Greedy node selection within starting and finishing cell P \u2190 GreedySubsetBe,R(vi : vi \u2208 Cs \u222a Ct);4 if (iter = 0) then return P;5 reward\u2190 IR(P);6 // Trying each cell as middle cell foreach Cm \u2208 C do7\n// Trying each possible budget split\nfor B\u2032 \u2208 B\u0303e do8 // Planning subpath on one side of the middle cell P1 \u2190 recursive-eSIP (Cs, Cm, B\u2032,R, iter \u2212 1);9 // Planning subpath on other side of the middle cell\nwhile committing to nodes selected in first subpath P2 \u2190 recursive-eSIP (Cm, Ct, Be \u2212B\u2032,R\u222a P1, iter \u2212 1);10 if (IR(P1.P2) > reward) then11 P \u2190 P1.P2;12 reward\u2190 IR(P);13 return P;14 end15\nAlgorithm 4: recursive-eSIP procedure for path planning.\nAn alternative is to consider only exponential splits: B\u0303e = {0, 20, 21, 22, . . . , 2log2 Be} \u222a {Be, Be\u2212 20, Be\u221221, Be\u221222, . . . , 0}. In this case, the branching factor is only logarithmic in the experimental budget. Even though we are not guaranteed to find the same solutions as with linear budget splits, we can both theoretically (as given by Lemmas 4 and 7) and empirically (as illustrated in Fig. 14c and 14d) show that the performance only gets slightly worse in this case, compared to a significant improvement in running time. In addition to these two ways of splitting the budget, we also considered one-sided exponential budget splits (i.e. B\u0303e = {0, 20, 21, 22, . . . , 2log2 Be}), which further reduces the branching factor by a factor of 2 compared to the exponential splits defined above. Although we do not provide theoretical guarantees for this third possibility, we experimentally found it to perform very well (c.f., Section 8)."}, {"heading": "6.3 Algorithmic Guarantees", "text": "Our algorithm is greedy in two ways:\n\u2022 At recursion depth 0, the sensing locations are selected greedily based on the mutual information criterion.\n\u2022 Before exploring the subpath P2, recursive-eSIP procedure commits to the locations selected in subpath P1.\nDue to the these greedy steps, recursive-eSIP is an approximation algorithm and does not necessarily find an optimal solution. The following lemma, however, guarantees a performance bound for the path output by the eSIP procedure:\nLemma 4. Let P\u2217C = (Cs = C1, . . . , Ck = Ct) be an optimal solution for single robot instance of SD-MIPP, constrained by budget B\u0303, where an optimal set of locations are selected within each visited cell Cj . Let P\u0302 be the solution returned for eSIP. Then I(P\u0302) \u2265 1\u22121/e1+log2 k I(P \u2217 C)."}, {"heading": "6.4 Solving the MIPP Problem", "text": "Now, we need to transfer the approximately optimal solution obtained for SD-MIPP back to MIPP. A path over cells, with observation locations selected greedily within each visited cell, is transformed into a path over observation locations by connecting all locations selected in cell Cij to the cell\u2019s center, (as indicated in Fig. 5b bottom), then connecting all selected centers to a path (Fig. 5c top), and finally expanding the resulting tree into a tour by traversing the tree twice (by traversing each edge of the tree once in each direction, a set of nodes connected by a tree can be converted into a set of nodes connected by a path). This traversal results in a tour which is at most twice as long as the shortest tour connecting the selected vertices. (Of course, an even better solution can be obtained by applying an improved approximation algorithm for TSP, such as the algorithm proposed by Christofides, 1976). The following Theorem completes the analysis of our algorithm:\nTheorem 5. Let P\u2217 be the optimal solution for the single robot instance of the MIPP problem with budget constraint B. Then, our eSIP algorithm will find a solution P\u0302 achieving an information value of at least I(P\u0302) \u2265 1\u22121/e1+log2 N I(P \u2217), whose cost is no more than 2(2 \u221a 2B + 4L)(1 +L \u221a 2 Cexp ) in the case of linear budget split for B\u0303e and no more than 2(2 \u221a 2B + 4L)(1 + L \u221a 2\nCexp )N log2\n3 2 in the\ncase of exponential budget split for B\u0303e.\nThe performance guarantee is w.r.t. the number of cells N instead of the numberM of sensing locations, as was the case in the work by Chekuri and Pal (2005). However, the input budget constraint is violated by an amount based on the size of cells during the spatial decomposition. This violation in input budget constraint leads to a tradeoff between computation effort and additional cost incurred that can be tuned based on specific application requirements. If the size of the cell is small (in the limit reducing each cell to each observation location), the number of cells will be large and will result in higher computation time with reduced additional cost. On the other hand, if the size of the cell is large, the computation time will be small and the algorithm needs to pay higher additional traveling cost.\nRunning time analysis of eSIP is straightforward. The algorithm calls the routine recursive-eSIP log2 B times. If TI is the time to evaluate the mutual information I, then the time for computing greedy subset Tgs (Line 4, Algorithm 4) is O(N2C TI), where NC is the maximum number of locations per cell. At each recursion step we try all the cells that can be reached with the available traveling budget (Line 7, Algorithm 4). For the possible experimental budget split, we try all (linearly or exponentially spaced) splits of Be \u2208 B\u0303e among the two subpaths P1 and P2 (Line 8, Algorithm 4). The recursion depth would be log2(min(N, B\u0303)). The following proposition states the running time for eSIP:\nProposition 6. The worst case running time of eSIP for linearly spaced splits of the experimental budget is O ( Tgs log2 B(NB)log2 N ) , while for the exponentially spaced splits of the experimental\nbudget it is O ( Tgs log2 B(2N log2 B)log2 N ) Comparing this running time to the recursive-greedy algorithm (O((MB)O(log2 M))), we note a reduction from B to log2 B in the base, and log of the number of locations (log2 M ) to log of the number of cells (log2 N ) in the exponent. These two improvements turn the impractical recursivegreedy approach into a much more viable algorithm.\nVarying the number of cells (and correspondingly the size of each cell) results in a trade-off between the computation effort and the traveling cost within the cell that is ignored by the eSIP algorithm. Proposition 6 states that the computation effort is directly proportional to the number of cells \u201cN\u201d. Therefore as we increase the number of cells, corresponding computation effort for the eSIP algorithm will also increase. On the other hand, reducing the number of cells will result in increasing the size of each of the cell. Since eSIP algorithm ignores the traveling cost within the cell, larger cell size will imply larger traveling cost ignored by the eSIP algorithm and hence larger overshoot in the cost of the resultant output path over the input budget B. Lemma 3 states the corresponding additional cost incurred by the output path calculated using eSIP algorithm in terms of the cell size \u201cL\u201d. Based on the specific application requirements, one can decide the appropriate number of cells and fine tune the trade-off between computation effort and additional path cost incurred. Fig. 14f shows that the corresponding collected reward did not vary significantly as we varied the number of cells for the application of observing temperature in a lake environment."}, {"heading": "7. Branch and Bound", "text": "The spatial decomposition technique effectively enables a trade-off between running time complexity and achieved approximation guarantee. However, the eSIP algorithm still has to solve a super-polynomial, albeit sub-exponential, search problem. In the following, we describe several branch and bound techniques which allow further reduction in the computation effort making our approach tractable for real world sensing experiments."}, {"heading": "7.1 Problem Representation", "text": "The specific structure of the search space representation motivated many of the proposed branch and bound approaches. Similarly to the recursive structure of the recursive-greedy algorithm (discussed in Section 5), the recursive-eSIP problem structure can also be represented as a sum-max tree, as shown in Fig. 6a. A small difference exists in the selection of observation locations along the solution path. In the case of recursive-greedy, each of the sum nodes traversed in the selected path represents a physical observation location. However, in the case of recursive-eSIP, each sum node in the selected path represents a cell in the corresponding traversed path. The observation locations at the sum node are selected greedily, within the corresponding cell, based on the available experimental budget. Using the sum-max tree problem structure, we now explain the proposed branch and bound approaches to prune parts of the tree that will not provide any further improvement over the currently known best solution path. All of the proposed branch and bound techniques are outlined in the recursive-eSIP procedure presented in Algorithm 5.\nAlgorithm: recursive-eSIP with branch and bound1\nInput: Cs, Ct, Be,R, iter, rewardLB,\u03b1\nOutput: An informative path P from Cs to Ct\nbegin2 if (d(Cs, Ct) > 2iterL) then3 return Infeasible4 P \u2190 GreedySubsetBe,R(vi : vi \u2208 Cs \u222a Ct);5 if (iter = 0) then6 return P7 filterCells\u2190 \u222aCi \u2200Ci s.t. d(Cs, Ci) \u2264 2iterL/2 and d(Ci, Ct) \u2264 2iterL/2 ;8 foreach Cm \u2208 filterCells do9\nfor B\u2032 \u2208 B\u0303e do10 // Calculating upper bound using GreedySubset UBP1 \u2190 calculateUB(Cs, Cm, B\u2032, iter \u2212 1,R);11 UBP2 \u2190 calculateUB(Cs, Cm, Be \u2212B\u2032, iter \u2212 1,R);12 if ((UBP1 + UBP2) > \u03b1 \u2217 rewardLB) then13\n// Calculating lower bound for P1 heurP1 \u2190 heuristicOP(Cs, Cm, B\u2032,R, iter \u2212 1);14 LBP1 \u2190 max(IR(heurP1), rewardLB \u2212 UBP2);15 // Recursive search for P1 P1 \u2190 recursive-eSIP (Cs, Cm, B\u2032,R, iter \u2212 1, LBP1 , \u03b1);16 // Calculating lower bound for P2 heurP2 \u2190 heuristicOP(Cm, Ct, Be \u2212B\u2032,R\u222a P1, iter \u2212 1);17 LBP2 \u2190 max(IR\u222aP1(heurP2), rewardLB \u2212 IR(P1));18 // Recursive search for P2 P2 \u2190 recursive-eSIP (Cm, Ct, Be \u2212B\u2032,R\u222a P1, iter \u2212 1, LBP2 , \u03b1);19 if (Iresid(P1.P2) > rewardLB) then20 P \u2190 P1.P2;21 rewardLB \u2190 Iresid(P1.P2);22 return P;23 end24\nAlgorithm 5: recursive-eSIP procedure with branch and bound approaches for efficient path planning. Each procedure corresponds to a max node in the search space with input rewardLB representing the calculated lower bound. A sum node in the search space effectively combines the recursive calls to each of the subpaths (implemented in Line 16 and Line 19). Since recursion reduces the traveling budget (2iterL) by half, the initial pruning in Line 8 removes the cells that can not be reached in the next recursion step. Line 15 and Line 18 calculate the lower bound for subpaths on either side of the selected middle cell. Input \u03b1 represents the scaling factor for one of the sub-approximation heuristics. Approximation guarantee for the output path P is given as I( bP) \u2265 1\u22121/e\n1+log2 N I(P\u2217)\nwhere I is the submodular reward function and P\u2217 is the optimal path."}, {"heading": "7.2 Efficient Search of the Problem Space", "text": "In a naive implementation of recursive-eSIP, the entire recursion tree would eventually be traversed. However, many of the considered subpaths may be highly suboptimal. Several heuristics have been proposed in the past for similar path planning problem with empirical efficiency claims, but without any approximation guarantee. We use one such heuristic (c.f., Chao et al., 1996, hereafter referred to as heuristicOP) to calculate a solution path satisfying the budget constraints, while trying to maximize the collected reward. Since such a path can be efficiently calculated with small computation effort, we use this path as an initial known solution. The total reward collected in this path is used as an input lower bound (input variable rewardLB in Algorithm 5) for the root max node. Since the computation effort associated with heuristicOP is small, it is also used at the rest of the max nodes in the search tree to calculate the lower bound for these nodes (discussed in detail in Section 7.2.2).\nFor each of the child sum nodes, an upper bound for the collected reward is calculated by exploiting the submodularity of the reward function (procedure calculateUB called in Line 11 and 12\nAlgorithm:calculateUB1 Input: Cs, Ct, Be, iter,R Output: An upper bound UB on information gain begin2\n// Selecting set of reachable cells possibleCells\u2190 \u222aCi \u2200Ci s.t. d(Cs, Ci) + d(Ci, Ct) \u2264 2iterL ;3 // Greedy node selection within reachable cells P \u2190 GreedySubsetBe,R(vi : vi \u2208 possibleCells);4 UB\u2190 Iresid(P);5 return UB;6 end7 Algorithm 6: Procedure for calculating upper bound at max nodes. Upper bound of child max nodes is added to obtain upper bound at parent sum node.\nin Algorithm 5 and explained in detail in Algorithm 6). We then only need to process the sum node children with upper bounds greater than the current best solution (Line 13 in Algorithm 5). The current best solution for the parent max node is updated when the collected reward from any of the child sum nodes is greater than the previously known best solution reward (Line 20 in Algorithm 5).\nFig. 6b presents a graphical illustration of this concept. After completely exploring branch Sum1, the current best solution of value 20 is updated as a lower bound forMax1. A smaller lower bound (18) at Sum2 results in pruning of sub-branch rooted at Sum2. However, nodes such as Sum3 with upper bound (24) higher than the current best solution (20), need to be explored further as they can potentially provide a solution path with a better reward than the current best solution.\n7.2.1 UPPER BOUND ON THE Sum NODES\nAlgorithm 6 presents the calculateUB procedure for obtaining an upper bound on the collected reward at each max node and is used in recursive-eSIP (Line 11, 12 in Algorithm 5) for pruning the search space. The upper bound at a sum node is calculated by adding the upper bound of each of the child max nodes. We calculate the upper bounds by relaxing the path constraints, and then finding an optimal set of reachable locations for each path (P1 and P2). Since this problem itself is NPhard, we exploit the submodularity of reward function and approximate it using the GreedySubset algorithm. Fig. 7 illustrates an example of calculating the upper bound. We first calculate the set of reachable locations w.r.t. the remaining traveling budget. These locations are contained within the cells Ci reachable from cells Cs and Ct (Line 3 in Algorithm 6). Such a boundary for reachable locations is illustrated by an ellipse in Fig. 7.\nThen, we run the GreedySubset algorithm to greedily select best possible Be locations from all the possible reachable locations (Line 4 of Algorithm 6). As an example, Vi and Vj are selected usingGreedySubset in Fig. 7. SinceGreedySubset guarantees a constant factor (1\u22121/e) approximation (Nemhauser et al., 1978), multiplying the resulting information value by (1\u2212 1/e)\u22121 provides an upper bound on the information achievable by the path (and hence the corresponding max child node). Therefore, in Fig. 7 the reward collected from locations Vi (MI(Vi)) and Vj (MI(Vj)) when multiplied by the factor (1\u22121/e)\u22121 provides upper bound for the collected reward. However, since the path cost constraint are relaxed, the total cost of observing Vi and Vj (dsi + dij + djt) may be\nmore than the available budget B. In Fig. 6c, for example, we use calculateUB to get upper bounds 13 forMax6 and 11 forMax7, resulting in an upper bound of 13 + 11 = 24 for Sum34.\n7.2.2 LOWER BOUND ON THE Max NODES:\nEffective pruning of subtree rooted at sum nodes would require calculating the lower bounds for the parent max node efficiently. One way to calculate such lower bounds is by exploring one branch completely (as explained in Section 7.2). This procedure will be computationally expensive. Instead, we implement two other ways for acquiring such lower bounds faster: Using heuristicOP 5 (as explained above for obtaining the initial best solution), and based on the current best solution of the grandparent max node. We then use the larger of two different lower bounds.\nFig. 6c illustrates the graphical presentation of the procedure for calculating the lower bounds using the current best solution of the grandparentmax node. We call this procedure altLB. We calculate an upper bound (exploiting the submodularity) of 11 forMax7 node. For the nodeMax6, since the grandparent node Max1 has a lower bound of 20, the subtree rooted at Max6 has to provide a reward of at least 9 (20 - 11) to be explored further. The lower bound of value 9 calculated using altLB is tighter than the lower bound provided by the heuristic (7), and enabled pruning of branch Sum4 (with upper bound 8).\nLines 15 and 18 in Algorithm 5 illustrate the altLB procedure. While using altLB, the lower bound for subpath P1 (in Line 15), is calculated using the upper bound of subpath P2. On the other hand, while calculating the lower bound using altLB for subpath P2 (in Line 18), the exact reward from P1 (IR(P1)) is used instead of the upper bound. Since the actual reward is always tighter than the calculated upper bound, the lower bound calculated for subpath P2 (using altLB) will be tighter than the lower bound calculated for subpath P1. This motivates exploring the subpath with higher experimental budget first such that the upper bound for the unexplored subpath (with lower experimental budget) is tighter making the lower bound for the first subpath tighter6. The heuristic for\n4. We can even compute tighter online bounds for maximizing monotonic submodular functions, as discussed by Nemhauser et al. (1978). 5. heuristicOP was only proposed for modular functions but we found it to provide good solution paths even in the submodular setting. 6. We note that with higher experimental budget, GreedySubset (used to calculate the upper bound) can potentially select more locations that are far apart (since the path cost constraint are ignored). When path cost constraint is incorporated, such locations will become infeasible and will make the upper bound loose.\nexploring the subpath with higher experimental budget first was also exploited to further improve the computation effort.\nMaintaining a lower bound at each node in the search tree also makes our approach anytime, i.e. the search can be terminated at any point even before it is completed. The current best solution from the graph already searched will be available after this early termination. Early termination is particularly advantageous in scenarios when it is required to obtain the best possible path traversed by the robot with a hard upper bound on the available time to calculate such a path."}, {"heading": "7.2.3 NODE ORDERING", "text": "The illustration in Fig. 6b demonstrates that a better currently known solution will likely help in increased pruning of the search tree. In order to improve the current best solution faster, at each max node we explore the sum nodes in the decreasing order of their upper bounds. The intuitive idea is that a higher upper bound is a likely indicator for higher reward value. Thus the upper bound in Line 11 and 12 in Algorithm 5 can be calculated separately and the rest of the computation (in loops implemented in Line 9 and 10 in Algorithm 5) can then be executed in decreasing order of upper bound. Such an approach is similar to node ordering that is employed to improve the pruning efficiency of Depth First Branch and Bound (DFBnB) (Zhang & Korf, 1995)."}, {"heading": "7.2.4 SUB-APPROXIMATION", "text": "Upper and lower bounds derived as explained above can potentially be loose. We can address this issue, and further trade off collected information with improved execution time, by introducing several sub-approximation heuristics. As a first heuristic, once the node ordering is performed, we explore only the top K sum nodes. This heuristic, termed as sub-approximation (Ibaraki et al., 1983), is found to be effective in practice.\nAs a second heuristic, instead of comparing the lower bound of a parent max node directly with the upper bound from the child sum nodes (when deciding which subproblems to prune), we scale up the lower bound by a factor of \u03b1 > 1 (Line 13 of Algorithm 5). This scaling often allows us to prune many branches that would not have been pruned otherwise. Unfortunately, this optimistic pruning can also potentially cause us to prune branches that should not have been pruned, and decrease the information collected by the algorithm. In practice, for sufficiently small \u03b1 values, this procedure can speed up the algorithm significantly, without much effect on the quality of the solution. This performance comparison for both computation effort and collected reward using several real world sensing datasets is discussed in Section 8.2."}, {"heading": "8. Experimental Results", "text": "We performed several experiments both in-field as well as in simulation (using real world sensing datasets) to demonstrate the usefulness of our proposed algorithm for several diverse environmental sensing applications. In-field experiments were performed using the Networked InfoMechanical System (NIMS) (Jordan et al., 2007), a tethered robotic system. Real world sensing datasets used for performing scaling and multi robot experiments in simulation were collected using either a network of static sensors or a robotic boat."}, {"heading": "8.1 In-field Experiments", "text": "Several experiments were performed in-field to demonstrate the applicability of modeling a phenomenon as a Gaussian Process and using eMIP to perform path planning for diverse aquatic sensing applications. These include a river monitoring application with the objective of studying salt concentration, and lake monitoring for several applications of interest to limnologists. In each of these applications, NIMS was used to monitor a cross-section (two dimensional vertical plane in an environment) in the aquatic environment. The phenomenon of interest is then modeled as a Gaussian Process and we use the mutual information criterion as submodular reward function, quantifying the informativeness of observation locations. The learned Gaussian Process model and mutual information objective are then provided as input to eMIP and the subset of locations as output by the algorithm are subsequently observed, again using NIMS as the robotic platform. In order to quantify the efficiency of our approach, we predict the phenomenon at unobserved locations and compute the root mean square (RMS) error between the predicted phenomenon and the ground truth (calculated by observing at all the uniformly spaced locations before and after the path planning experiment)."}, {"heading": "8.1.1 ROBOTIC PLATFORM:", "text": "The Aquatic Networked InfoMechanical Systems platform (NIMS-AQ) is the latest in the family of NIMS systems (Jordan et al., 2007; Pon et al., 2005; Borgstrom et al., 2006), developed specifically for aquatic applications and used during the lake deployment. The family of NIMS systems had been successfully deployed for several terrestrial and aquatic sensing applications. In 2006 alone, NIMS was used in several successful campaigns in forests (La Selva, Costa Rica and James Reserve, California), rivers (San Joaquin, California and Medea Creek, California), lake (Lake Fulmor, California), and mountain ecosystems (White Mountains, California),\nFig. 8a displays the schematic view of the system. The basic infrastructure of the system includes a rigid sensing tower supported by two Hobie FloatCat pontoons7 in a catamaran configuration. An actuation module resides on top of the sensing tower that drives the horizontal cable and vertical payload cable (horizontal and vertical motion respectively) across a cross-section of the aquatic environment. Power for the system is provided by two deep cycle marine batteries housed on top of the pontoons. The horizontal drive cable is kept center-aligned to the craft by using guide\n7. Developed by Hobie Cat Company.\npulleys that can be repositioned based on the type of aquatic environment in which NIMS-AQ is sampling (flowing or still water conditions). Fig. 8b shows NIMS-AQ performing path planning in the lake environment."}, {"heading": "8.1.2 SENSING IN A RIVER ENVIRONMENT", "text": "The first in-field application of our approach was executed at the confluence of two distinct rivers, Merced river and San Joaquin river, in California from August 7-11, 2007 (hereafter referred to as San Joaquin deployment). Fig. 1a displays an aerial view of the San Joaquin deployment site. The scientific objective at the confluence zone is to characterize the transport and mixing phenomena at the confluence of two distinct rivers \u2013 Merced river (relatively low salinity) and the agricultural drainage-impacted San Joaquin River (relatively high salinity) by observing several parameters that may indicate the mixing behavior of the two streams. Such river observations are useful for answering important questions pertaining to the spatio-temporal variability of velocity and water quality dynamics resulting from pollutant inputs, hydrodynamic mixing regimes, and biogeochemical cycling processes that are themselves distributed in time and space. Understanding such mixing patterns are important for policy issues related to water distribution from river ecosystems (Brekke et al., 2004).\nThe total width of the observed cross-section was 40 meters with the maximum depth of 1.4 meters (closer to the middle of the cross-section). Several experiments had been executed in the past to characterize the mixing phenomena at this confluence site (Singh et al., 2007a; Harmon et al., 2007). Primary experimental design during these campaigns comprised of making observations at uniformly spaced locations in a two dimensional cross-section (hereafter referred to as raster scan) and repeating these experiments several times to understand the spatial and temporal dynamics in the environment. Each of these experiments took several hours, thus restricting the experiments to a very small number of cross-sections (one or two) within the limited deployment time. However, a detailed understanding of the confluence environment would require observing multiple crosssections, within the limited time frame. This necessitates the use of an adaptive sampling approach that can model the observed phenomenon, make observations at a small number of locations based on that model and then effectively predict the phenomenon at the unobserved locations.\nMixing patterns were characterized at the confluence by observing electrical conductivity that indicated the amount of salt concentration in the water. Fig. 9a displays typical distribution at a cross-section in the confluence zone with x-axis representing the distance along the cross-section and y-axis representing the depth. Low concentration of electrical conductivity towards the lower x values is contributed by clear water from the Merced river with the other end displaying high concentration of salts carried by the San Joaquin river. We first use the data from one such raster scan performed on the first day of the deployment (displaying similar characteristics) to learn a non-stationary Gaussian Process model, using a covariance function parameterization as described by Krause and Guestrin (2007). The parameters are chosen by maximizing the marginal likelihood (Rasmussen & Williams, 2006). This non-stationary process was learned by dividing the complete region into smaller sub-regions and combining the locally-stationary GPs from each of these sub regions.\nA total of 114 locations were observed during the raster scan and used for learning the GP model. A set of 16 locations was selected out of the total of 114 (14%) using the eMIP algorithm with the starting and finishing location on either end of the cross-section as displayed in Fig. 9a. This set of 16 observation locations was then observed over the next few days. With the required dwelling time8 of 30 seconds for observing electrical conductivity, large reduction in number of observation locations resulted in a significant reduction in experimental time as well (14% compared to the raster scan).\nSince the environmental phenomena exhibit spatial and temporal dynamics, we performed raster scans before and after our experiment to get a measure of ground truth for electrical conductivity. The predicted electrical conductivity, as computed after making the observations at the subset of 16 locations selected using eMIP, is then compared with this ground truth. Fig. 9b displays the predicted distribution of specific conductivity with points representing the observed locations as output by eMIP. Fig. 9a displays the distribution as observed using raster scan performed just before the path planning experiment.\nThe RMS error between the predicted distribution and the raster scan performed before the path planning experiment was 45.99 \u00b5S/cm. On the other hand, the RMS error between the predicted distribution and the raster scan performed after the path planning experiment was 53.87 \u00b5S/cm. The RMS error between the two raster scans performed before and after the path planning experiment, indicating the temporal variation in the environment, was 57.55 \u00b5S/cm. Low RMS error for our predicted distribution, when compared with the RMS error between the raster scans performed before and after the path planning experiment clearly indicates the effectiveness of our approach for modeling and path planning in such environments. Path planning experiments performed during other days also demonstrated similar prediction accuracy, while maintaining the significant reduction in total experimental time."}, {"heading": "8.1.3 SENSING IN A LAKE ENVIRONMENT", "text": "The second set of in-field experiments was executed at a lake on the campus of University of California, Merced from August 10-11, 2007 (hereafter referred to as lake deployment). This site was chosen based on its convenience for being accessibly located on the university campus and its similarity to several other lakes that are of interest for diverse limnology applications, including the study for growth patterns of \u201calgal bloom\u201d. Nuisance algal bloom can impair the beneficial use of\n8. Time for which the sensor has to be kept static to get an accurate measurement.\naquatic systems, by blocking sunlight to underwater vegetation, consuming oxygen in the water, and producing surface scum and odors. The growth pattern of algal bloom in a lake is dependent on the spatial and temporal dynamics of temperature, dissolved nutrients and light occurring in different layers of its environment. Thus, temperature is one of the critical parameter to observe in the lake environment as it controls several physical processes occurring in such low flow aquatic environments (in contrast to the San Joaquin river environment where there is considerable water flow).\nThe total width of the observed cross-section was 70 meters, with a maximum depth of up to 1.81 meters. Similarly to the San Joaquin deployment, we first learned the non-stationary GP model using the temperature data from one of the raster scans performed on August 10. Fig. 10a displays a typical surface distribution of temperature as observed during the raster scan at the lake. A total of 89 locations were observed during the raster scan. A set of 15 locations was selected out of these 89 locations (17%) using the eMIP algorithm with the starting and ending location on either end of the cross-section as displayed in Fig. 10a. This set of 15 observation locations was then observed the next day using NIMS as the robotic platform. Similar to San Joaquin deployment, we performed raster scans before and after our experiment to get a measure of ground truth for the temperature distribution. The predicted temperature, as computed after making the observations at the subset of locations selected using eMIP, is then compared with this ground truth. With a smaller dwelling time of 10 seconds (required for measuring temperature) and having to cover the entire length of the lake cross-section, the reduction in experimental time was 50% (when compared with the raster scan).\nFig. 10b displays the predicted distribution of temperature with points representing the observed locations as output by eMIP. Fig. 10a displays the distribution as observed using raster scan performed after the path planning experiment. The RMS error between the predicted distribution and the raster scan performed after the path planning experiment was 0.73 oC. On the other hand, the RMS error between the predicted distribution and the raster scan performed before the path planning experiment was 0.82 oC. The RMS error between the two raster scans performed before and after the path planning experiment, indicating the temporal variation in the environment, was 1.25 oC. The low RMS error between the predicted distribution and the raster scans, in comparison with the temporal variation exhibited by the lake environment, indicates the effectiveness of our approach in the low-flow lake environment as well."}, {"heading": "8.2 Experiments on Sensing Datasets", "text": "Several experiments were performed in simulation using real world sensing datasets to analyze the scaling of our algorithm for different approaches such as varying the experimental cost, exponential increase in budget split, varying the size of the cells of the spatial decomposition and comparison of several heuristics, among others. Three different datasets, collected from real world sensing applications, were used for these experiments. The first dataset consists of measurements of the temperature in Lake Fulmor, James Reserve (hereafter referred to as lake temperature dataset). Fig. 1b displays the aerial view of Lake Fulmor. A robotic boat, part of Networked Aquatic Microbial Observing System (NAMOS) (Dhariwal et al., 2006), was used to collect the surface temperature data around the lake, of width around 50 meters and length around 250 meters. As discussed earlier, understanding temperature distribution is of prime importance in limnology since it governs several physical phenomena occurring in the lake environment, including the growth of algal bloom.\nThe average speed of the boat was approximately 0.4m/s. Half of the total measurements (218 different sensing locations) were used to learn a nonstationary Gaussian Process model by maximizing the marginal likelihood (Rasmussen & Williams, 2006), and the remaining measurements were used for experimentation. We divided the lake into 22 cells (except during the experiments for studying the effect of changing the size of the cell in spatial decomposition), with distance between adjacent cell approximately 21 meters. Based on the average speed, and motivated by a typical measurement duration of roughly 25 seconds, we set the experiment cost to be 10.5 meters (except during the experiment for understanding the effect of scaling the experimental cost).\nAs our second dataset, we used data from an existing deployment of 52 wireless sensor motes to learn the amount of temperature variability at the Intel Research Laboratory, Berkeley (hereafter referred to as Berkeley temperature dataset). These sensing locations lie within a bounding region of length 45 meters and width 40 meters. We divided the complete region into a uniform grid containing 20 equal sized cells, and determined the experimental cost to be 9 meters (approximate distance to travel between adjacent cells). We learned a GP model as discussed by Krause et al. (2006).\nFinally, we explored the performance of our algorithm on a precipitation dataset collected from 167 regions of equal area, approximately 50 km apart, during the years 1949-1994. We followed the preprocessing and model learning described in the work by Krause et al. (2008). The large physical spread of the sensing regions makes this dataset unconventional for a mobile robot path planning application. To avoid this unrealistic scenario, we normalized the coordinates of the regions to lie within a bounding region of length 7 meters and width 9 meters, while keeping the actual sensing data observed at each location. We then divided the complete region into a uniform grid of 20 cells with experimental cost as 1.4 meters (approximate traveling distance between adjacent cells).\nFor each of the plots comparing the performance of our algorithm, x-axis represent the total cost of the path including both the traveling cost between the selected locations and the sensing cost at each selected location (translated into distance as discussed above). When comparing the computation effort as a measure of performance, in seconds, y-axis is drawn in logarithmic scale. The computation effort is for running the code implemented in Matlab on a 3.2 GHz dual processor core with 4 GB RAM. When comparing the collected reward as a measure of performance, y-axis represent the mutual information (submodular reward function) collected by making observations at the selected locations."}, {"heading": "8.2.1 COMPARISON WITH RECURSIVE-GREEDY ALGORITHM:", "text": "To compare the performance of our approach with the recursive-greedy algorithm, as proposed by Chekuri et al., we selected a subset of 23 locations from the total of 52 locations from the Berkeley temperature dataset. A small subset of locations was selected since the running time of recursivegreedy is quasi-polynomial and was very large for the complete dataset. Fig. 11a and Fig. 11b display the comparison in the computation effort and collected reward on this smaller dataset for the two algorithms. As is evident from the plots, our approach provides significant improvement in running time (of several orders of magnitude at higher budget values) with (almost) the same collected reward. Since the recursive greedy algorithm is essentially a search procedure with greedily restricted search space, this result also indicates that an exhaustive search over all paths is intractable for even a small real world sensing problem. The sudden jump in execution time of eMIP in Fig. 11a at budget = 100 meters is due to an additional iteration step (c.f., Line 7 in Algorithm 3) added due to the increase in the input budget constraint. Thereafter, additional increase in budget only results in increase in experimental budget. Since the recursive-eSIP computes efficiently for such a small problem, additional increase in experimental budget does not increase the computation effort significantly."}, {"heading": "8.2.2 COMPARISON WITH UNIFORM SAMPLE SPACING:", "text": "We compared the performance of eMIP with a simple uniform sample spacing algorithm, referred to as Uniform density. For the case of Uniform density, starting and finishing at given locations, we greedily select two observation locations within each of the nearest cells and compute the corresponding path cost and path reward. Uniform density algorithm will output the best possible path amongst all possible simple uniform sample spacing algorithms due to greedy observation selection within each cell. Fig. 12b, compares the collected reward for Uniform density with eMIP for the lake temperature dataset. Increased collected reward by eMIP, compared to Uniform density, empirically justifies the complexity of eMIP. Additionally, eMIP also provides a strong approximation guarantee which is not possible for any uniform sample spacing algorithm. Fig. 13 illustrates a path selected by eMIP for the lake temperature dataset, demonstrating that eMIP does not tend to cause uniform sample spacing. For a few of the traversed cells, there was no location selected for observation, while for others as many as three observation locations were selected from within the cell."}, {"heading": "8.2.3 COMPARISON OF SUB-APPROXIMATION HEURISTICS:", "text": "Various sub-approximation heuristics discussed in Section 7 were compared empirically to analyze their utility in improving the execution time and the corresponding reduction in collected reward, if any. As is displayed in Fig. 12a that compares these heuristics for computation effort, each of these sub-approximation heuristic provides improvement in the execution time over the scenario when all branch and bound heuristics other than sub-approximation heuristics were used. The most improvement at higher values of input budget was observed when the lower bound is increased by a factor of \u03b1(= 1.2 or 20%). Fig. 12b displays the corresponding comparison of these heuristics for collected reward. It was interesting to observe that none of the sub-approximation approaches resulted in considerable reduction in collected reward."}, {"heading": "8.2.4 VARIATION IN SENSING COST:", "text": "Fig. 14a and Fig. 14b compare the computation effort and collected reward as the sensing cost is varied for the precipitation dataset. With the reduction in experimental cost, more locations were observed for the same total input budget resulting in increased collected reward. However, for each of the experiments, the computation effort was approximately the same. Due to the diversity in environmental applications, the sensing cost will depend on the sensors (settling time) and the scale of dynamics occurring in the observed phenomena. This experiment indicates that eMIP can be used over a diverse range of sensing costs, as per the demands of diverse environmental applications."}, {"heading": "8.2.5 VARIATION IN EXPERIMENTAL BUDGET SPLIT:", "text": "As discussed in Section 6, the strategy of exponentially increasing the experimental budget split results in an increased additional path length required to guarantee the approximation factor for the collected reward. We performed several experiments with the available datasets to analyze the empirical performance of increasing the budget splits exponentially. Fig. 14c and Fig. 14d compares the computation effort and collected reward for linear increase, one sided exponential variation from 0 and two-sided exponential variation from both 0 and budget B for the lake temperature dataset. Since a smaller number of budget splits are considered in recursive-eSIP in the case of an exponential increase, the computation effort will be smaller as compared to the linear increase in the budget splits. Interestingly, there was very small reduction in collected reward, for only a few budget values, when the exponential increase was employed. Hence, even though the theoretical approximation guarantee with exponential increase in experimental budget is weaker, empirically the collected reward for both the linear and exponential increase in budget splits was found to be comparable over a wide range of input budgets."}, {"heading": "8.2.6 ANALYSIS OF SPATIAL DECOMPOSITION:", "text": "As discussed in Section 6, the conversion of an SD-MIPP solution (a cell path) into a solution for MIPP (a path over observation locations) will result in additional path length exceeding the input budgetB. This additional path length will depend on the size of the cell (or size of the grid covering the complete spatial domain) in SD-MIPP problem and will result in trade-off with the computation effort. Variation in grid-size will result in corresponding variation in the traveling cost between the neighboring cells. This will result in an opportunity to travel more cells for a denser grid with the same input budget constraint. However, to keep the experimental cost constant across the varying grid size (since the experiment cost only depends on observed phenomena and is independent of the spatial decomposition), it was scaled accordingly, in proportion to the traveling cost between the neighboring cells. Fig. 14f compares the collected reward for varying grid sizes on the lake temperature dataset, changing the grid size from 14 to 33 cells. It is interesting to observe that such a change in grid size had (almost) negligible effect on the collected reward. On the other hand, such increase in grid density resulted in a larger number of cells over which path planning is to be performed thus leading to increased computation effort for the same input budget. The comparison of the computation effort for the varying grid size is displayed in Fig. 14e. Note the drastic increase in computation time as the grid discretization is made finer."}, {"heading": "8.2.7 MULTI-ROBOT EXPERIMENTS", "text": "We evaluated the performance of our eMIP multi-robot algorithm in simulation using several sensing datasets. Fig. 15 displays the empirical analysis of several experiments using the lake temperature dataset. The first experiment was performed with each robot starting from the same starting location. Fig. 15a and Fig. 15b display the collected reward and root mean square (RMS) error when the number of robots were varied from one to three. Due to the sequential-allocation ap-\nproach (wherein we remove the locations that are already selected before selecting the locations for the next robot) and \u201cinformation never hurts\u201d principle, collected reward increases as the number of robots were increased and hence the corresponding root mean square error for prediction at the unobserved locations gets reduced. However, the incremental change in performance from one to two robots was larger than the incremental change from two to three robots, which is expected from the submodularity (diminishing returns) property of mutual information.\nFig. 15c and Fig. 15d display the collected reward and RMS error when a different starting location is chosen for each robot. In this scenario, a set of four starting locations is pre-determined with each location at one end of the lake (see for reference Fig. 15e where three of the four starting locations are marked). The starting location for each of the three robots was selected greedily based on the collected information. With a different starting location selected on the opposite end of the lake for the second robot, the incremental change in collected reward (and corresponding decrease in root mean square error) as the number of robots was increased from one to two is much higher than the corresponding change when the same starting location was chosen for the second robot as well. However, similar to the scenario with same starting location, the incremental change as the number of robots was increased from one to two is higher as compared to when the number of robots was increased from two to three (due to submodularity of mutual information). Fig. 15e illustrates the selected paths for each of the three robots as selected using eMIP."}, {"heading": "9. Related Work", "text": "There is a large body of related work both in the theory of path planning and its applications. Approximation algorithms have been proposed for several related problems. Variants of path planning have been studied in the field of Operations Research as the Traveling Salesman Problem (TSP) or the Vehicle Routing Problem (VRP). In robotics, several path planning approaches have been studied for applications such as Simultaneous Localization and Mapping (SLAM) and search and exploration. In sensor networks and geostatistics, a closely related work studies optimal placement of static sensors modeling the phenomenon as Gaussian Processes. Several adaptive sampling approaches have been studied to decide on the subset of locations to observe in order to understand the phenomenon dynamics effectively. In addition, similar approaches are explored for planning paths for mobile robots acting as data mules, collecting data sampled by the network of static sensors."}, {"heading": "9.1 Operations Research", "text": "An interesting special case of the MIPP problem is given in the case where each node has a fixed reward, and the goal is to find a path that maximizes the sum of these rewards (Traveling Salesman Problem with Profits, TSPP, Feillet et al., 2005). Such a sum of rewards is a modular (additive) function, which is a special case of submodular functions. A subcategory of TSPP is an optimization problem defined to maximize the collected reward while keeping the associated cost less than some given budget B. This was studied as Orienteering Problem (OP) or selective TSP (Laporte & Martello, 1990), or Maximum Collection Problem (Kataoka & Morito, 1988) in the literature. The additivity assumption made in the orienteering problem is very unrealistic in our informative path planning setting, as it assumes that the information provided by adjacent locations is independent, whereas we would typically expect a strong amount of correlation. In fact, if the observations were all independent, there would be no point in selecting observations for spatial prediction. In this\npaper, we hence study the more general orienteering problem with submodular reward functions, proposed earlier as Submodular Orienteering Problem (Chekuri & Pal, 2005)."}, {"heading": "9.1.1 MULTIPLE-PATH EXTENSIONS:", "text": "The extension of TSPP to multiple paths was studied as Vehicle Routing Problem with Profits (VRPP) in the literature. Like TSPP, several variants of VRPP have been previously considered. The Prize Collecting VRP (PCVRP) (Tang & Wang, 2006) is a class of VRPP where the objective is to determine a subset of all customers to visit so as to minimize the total distance traveled, minimize the vehicles used and maximize the collected reward. The multi-robot version of the OP (in the case of additive reward functions) was studied as the Team Orienteering Problem by I-Ming et al. (1996) and Multiple Tour Maximum Collection Problem by Butt and Ryan (1999)."}, {"heading": "9.1.2 KNOWN APPROXIMATIONS FOR THE ORIENTEERING PROBLEM:", "text": "The OP is known to be NP-hard (Golden et al., 1987). Several versions of the OP studied in the literature can be classified into those for which the starting (and the finishing) location (root) is pre-specified or not. For the case of the unrooted OP (when no starting location is specified), the approximation guarantees known for Prize Collecting TSP and k-TSP can be easily extended (Johnson et al., 2000). There are several constant factor approximations known for the PC-TSP and k-TSP problems with the best one being a 2 approximation (Garg, 2005). However the same extension does not apply for the rooted version of the problem as the best path for the unrooted version may not contain the root and may be far away from the root thus leading to violation of the budget constraint.\nFor the rooted OP, Arkin et al. (1998) gave a (2 + ) approximation for the OP in geometric settings. Blum et al. (2003) gave the first constant factor approximation for the rooted OP in general undirected graphs. They also extended their algorithm for multi-path OP. The running time of their algorithm, though polynomial, is very large (more specifically, O(\u03c0n5 log(1 )) where \u03c0 is the total reward in the path). Recently Chekuri et al. (2008) gave a polynomial time algorithm for the OP in undirected graphs with an improved approximation guarantee of (2 + ). Our problem formulation with specified starting location (s) and finishing location (t) falls under the category of rooted OP with submodular (non-additive) reward function.\nAnother classification of OP can be done based on the symmetry of the space of the possible locations. All of the above approximation guarantees hold true on symmetric spaces (undirected graphs). Obtaining good approximation algorithm for the directed (asymmetric) orienteering problem was stated as an open problem by Blum et al. (2003). Chekuri and Pal (2005) gave the first approximation algorithm with O(log n) guarantee that runs in quasi-polynomial running time. The running time was recently improved independently by two different works (Chekuri et al., 2008; Nagarajan & Ravi, 2007), each proposing a poly-time approximation algorithm providing an approximation guarantee of O(log2 n), though using different approaches. The metric space conversion procedure used during our spatial decomposition approach limits eMIP to symmetric spaces only."}, {"heading": "9.1.3 SEQUENTIAL ALLOCATION:", "text": "Blum et al. (2003) proposed a sequential allocation approach to extend algorithms for single-robot orienteering to the multiple robot setting, but only for the special case of additive (modular) reward functions. In this paper, we generalize their result to submodular reward functions. After the initial\nversion of this paper was published (Singh et al., 2007b), we realized that our sequential-allocation procedure is an instance of maximizing a submodular function subject to a matroid constraint (Calinescu et al., 2007). We can define a partition matroid on the disjoint unionM =M1 \u222a \u00b7 \u00b7 \u00b7 \u222aMk of k ground setsMi, one for each robot. Each setMi contains all feasible paths for robot i. The collection I \u2286 2M of all subsets P \u2208 I such that |P \u2229 Mi| \u2264 1 (i.e. each P corresponds to a collection of paths, with the constraint that we can pick at most one from each setMi) forms independent sets of the partition matroid. Hence, the problem of finding a collection of maximally informative paths is the problem of finding an independent set of a matroid maximizing a submodular function. Current work in progress by Goundan and Schulz (2008) provides general results on the performance of a sequential allocation procedure in such a setting, which can be used to prove the same sequential allocation results originally presented by Singh et al. (2007b)."}, {"heading": "9.2 Robotic Applications", "text": "There is considerable work in path planning in the robotics community for several applications, including simultaneous localization and mapping (SLAM) and search and exploration. Several different approaches have been studied for each of these applications, including auction based algorithms, data-adaptive approaches and information gain based algorithms."}, {"heading": "9.2.1 SIMULTANEOUS LOCALIZATION AND MAPPING:", "text": "The goal of Simultaneous Localization And Mapping (SLAM) is to build maps of an environment by performing an exploration of the environment with an objective to estimate the robot position and world features simultaneously. Several approaches optimizing different objective functions had been proposed to perform path planning for SLAM. Bourgault et al. (2002) proposed an exploration framework using an occupancy grid (OG) environment model (performing spatial decomposition of the observed environment) with an objective to maximize mutual information over the OG map. Stachniss et al. (2005) developed a greedy algorithm for selecting the next location to visit to maximize information gain about the map.\nIn contrast to such approaches, Sim and Roy (2005) attempted to optimize the entire trajectory, not just the next step, but their algorithm introduces some approximations without theoretical bounds. Simmons et al. (2000) proposed a distributed approach for exploration and mapping with multiple robots by minimizing the overlap in information gain amongst multiple robots. They provided quantitative results from simulation but did not provide any theoretical bounds for their approach. There is little work in SLAM setting with an upper bound on the total cost of the path. In addition, we are not aware of any approaches to SLAM which carry approximation guarantees for either the single or multi-robot cases. An interesting direction for future work would be to analyze the applicability of our approach to the SLAM setting."}, {"heading": "9.2.2 SEARCH AND EXPLORATION:", "text": "The search and exploration application involves path planning for a robot with the goal of searching for a moving target(s) in a given environment, e.g. target surveillance in security applications and patient tracking in health care domain. Performing path planning using stochastic inference provides advantage of robustness to sensing and motion uncertainty though with an added complexity of computational intractability. Roy and Earnest (2006) proposed an approach to effectively compute the trajectories for target tracking based on maximizing mutual information (evaluated using the change\nin variance of the probability distribution). They used a particle filter approach, performing clustering over the particles followed by path planning over these clusters. Lau et al. (2006) formulated the target tracking in indoor environments as a generalization of anNP-complete optimal searcher path (OSP) problem (Trummel &Weisinger, 1986). They sought to optimize the probability of detection within a given time horizon while accounting for the undetected target probability that is a function of previously visited locations during the search. They used several branch and bound approaches to speed up the search process. The objective of maximizing information gain subject to the budget constraints on the path cost makes eMIP a suitable candidate for performing path planning for such problems.\nRyan (2008) used an approach of partitioning the search space into subgraphs for multi-robot path planning. We take a conceptually similar approach, also reducing the search space by decomposing the space into regions and then performing path planning over those regions. However, we address more complex utility functions, such as quantifying the informativeness of visited locations and are not limited to specific graph structures such as stacks, halls, cliques, rings as is the case in the work of Ryan (2008). Recently, Thompson and Wettergreen (2008) used our eMIP algorithm for near-term path planning while performing autonomous exploration of surficial units at Amboy Crater in Mojave desert, California."}, {"heading": "9.2.3 PLANNING SYSTEMS AND APPLICATIONS:", "text": "Certain applications in robotic path planning used plan graphs (Blum & Furst, 1997) to compute an estimate of the resources and time required to achieve goals from states encountered in the search process. In the case of over-subscription planning problem \u2013 wherein only a subset of goals that can be accomplished within the limited time or resources available for the planning system, the work by Smith (2004) used an orienteering heuristic to provide an ordered set of goals to be considered by the planner. Briel et al. (2004) proposed several heuristics for efficiently solving the over-subscription planning problem. However, in each of the earlier proposed heuristics, the reward function considered is modular (additive). eMIP can be used to efficiently solve the oversubscription planning problem in the submodular setting with strong approximation guarantees."}, {"heading": "9.3 Sensor Networks", "text": "Phenomenon modeling to decide on the optimal placement of a set of static sensors is well studied in the sensor networks and geostatistics communities. Gaussian Process models for spatial phenomena had been studied extensively (Cressie, 1991). Guestrin et al. (2005) proved that, in the case of phenomena governed by Gaussian Process models, selecting the placement of sensors greedily based on mutual information is near-optimal. Krause et al. (2006) extended this work to include communication cost between sensors while optimizing the sensor placement. In the communication constrained setting, similar to the path planning problem considered in this paper, the greedy algorithm performs badly, and more involved algorithms have to be developed. Batalin et al. (2004) showed that combining the static and mobile sensing devices, even in a simple scenario, can result in significant improvement in sensing performance. In such a scenario, where a combination of static and mobile sensing devices are available, several approaches for optimal placement of static sensors can be combined with eMIP to observe a given phenomenon efficiently."}, {"heading": "9.3.1 DATA COLLECTION FROM A SENSOR NETWORK:", "text": "A different scenario where a mobile robot can be combined with a network of static sensors is to improve the lifetime of the sensor network by performing the tours for collecting the data sampled by the static network. Somasundara et al. (2007) showed that the problem of collecting the data when the environment shows both spatial and temporal dynamics is NP-complete and provided an integer linear programming formulation for the same. They compared the performance of several heuristics in simulation for both single and multi-robot scenario. Meliou et al. (2007) proposed a nonmyopic approach for the application of data gathering tours using an algorithm for submodular orienteering (SOP) as a black box. They provided strong approximation guarantees and extensive empirical evaluation that indicates the applicability of their approach for such applications. In this setting, eMIP can be used as an orienteering algorithm to provide a better approximation guarantee in addition to improved running time."}, {"heading": "9.3.2 ADAPTIVE SAMPLING FOR ENVIRONMENTAL APPLICATIONS:", "text": "Recent advances in robotics have opened up opportunities for high fidelity monitoring of dynamic environmental sensing applications. Rahimi et al. (2004) explored several policies for adaptively sampling the environment. Singh et al. (2006) proposed a multiscale adaptive sampling approach with uniformly sampling the environment in the first stage followed by sampling at locations in order to minimize the mean square error the most. They also extended their approach for multiple robots, although without providing any theoretical bounds. Using several in-field experiments as well as simulations using real world sensing datasets, we demonstrate here that several such environmental phenomenon can be effectively sampled adaptively using eMIP."}, {"heading": "10. Conclusions and Future Work", "text": "In this paper, we presented eSIP, an approximation algorithm for efficient planning of informative paths. eSIP near-optimally solves the NP-hard problem of maximizing the collected information with an upper bound on path-cost. Our eSIP algorithm builds on the recursive-greedy algorithm of Chekuri and Pal (2005). eSIP preserves the approximation guarantees of recursive-greedy, while overcoming its computational intractability through spatial-decomposition and several branch and bound approaches. We also presented a general approach, sequential-allocation, which extends any single-robot algorithm, such as eSIP, to the multiple-robot setting while providing a provably strong approximation guarantee.\nWe also provide extensive empirical evaluation to demonstrate the effectiveness of our approach for real world sensing applications. We performed several in-field experiments for two important environmental sensing applications \u2013 lake monitoring (at a small lake at UC Merced campus) and river monitoring (at San Joaquin river, California). The Networked Info Mechanical System (NIMS) was used as the robotic system for performing path planning during each of these deployments to demonstrate the practicality of our algorithm. We also performed extensive simulation experiments using several real world sensor network data sets. With global climate change and corresponding impetus on sustainable practices, we expect that such efficient path planning approaches can help address the challenge of monitoring environment-related activities effectively.\nIn the future, we plan to explore the applicability of our algorithm in other application domains such as SLAM and search and rescue. We plan to work towards understanding the limitations of\nlearning a static GP model in real world scenarios, and extend our approach for online model adaptation."}, {"heading": "Acknowledgments", "text": "We would like to thank Maxim Batalin for helpful discussions, Bin Zhang for providing the lake data set and Michael Stealey, Henry Pai and Victor Chen for help during the river and lake deployment. This work was partially supported by NSF Grants No. CNS-0509383, CNS-0625518, CNS0331481, ANI-00331481, CCR-0120778, ECCS-0725441, ONR MURI W911NF0710287 and a gift from Intel. Carlos Guestrin was partly supported by an Alfred P. Sloan Fellowship and an IBM Faculty Fellowship. Andreas Krause was partially supported by a Microsoft Research Graduate Fellowship.\nAPPENDIX\nTheorem-1. Let \u03b7 be the approximation guarantee for the single path instance of the informative path planning problem. Then our sequential-allocation algorithm achieves an approximation guarantee of (1 + \u03b7) for the MIPP problem. In the special case, where all robots have the same starting (si = sj ,\u2200i, j) and finishing locations (ti = tj ,\u2200i, j), the approximation guarantee improves to 1/(1\u2212 exp (\u22121/\u03b7)) \u2264 1 + \u03b7.\nProof of Theorem 1. For the case when all the robots start and finish at the same location, let \u03a0 be the total reward collected by the optimal solution. Additionally, define \u03a0i to be the difference between the reward collected by the optimal solution, and by the approximation algorithm, at the end of stage i. Hence, \u03a00 = \u03a0.\nLet Ai = P1 \u222a \u00b7 \u00b7 \u00b7 \u222a Pi be the nodes selected by the approximation algorithm up to stage i (A0 = \u2205), and let P\u2217 = {P\u22171 , . . . ,P\u2217k} denote the collection of paths chosen in the optimal solution. Consider the residual reward fAi . We find fAi(P\u2217) = f(Ai\u222aP\u2217)\u2212f(Ai) \u2265 f(P\u2217)\u2212f(Ai) = \u03a0i due to monotonicity of f . If there were no path P\u2217j with fAi(P\u2217j ) \u2265 1k\u03a0i, then \u2211 j fAi(P\u2217j ) < \u03a0i = fAi(P\u2217), contradicting the monotonic submodularity of fAi . Hence there is such a path P\u2217j with fAi(P\u2217j ) \u2265 1k\u03a0i, and thus the approximation algorithm is guaranteed to find a path Pi such that fAi(Pi) \u2265 1\u03b7k\u03a0i.\nThe difference in the reward collected by the optimal solution and the reward collected by Algorithm 1 after stage i+ 1 is at most:\n\u03a0i+1 \u2264 (1\u2212 1/\u03b7k)\u03a0i, \u2264 (1\u2212 1/\u03b7k)i+1\u03a0.\nThus after k stages, the difference in the reward is bounded by\u03a0k \u2264 (1\u22121/\u03b7k)k\u03a0 \u2264 exp (\u22121/\u03b7)\u03a0. Hence, the reward collect by Algorithm 1 is at least (1 \u2212 exp (\u22121/\u03b7)) times the optimal reward, resulting in approximation factor of 1/(1\u2212 exp (\u22121/\u03b7)).\nFor the case when each robot has different starting and finishing location, let P\u2217i be the set of nodes visited by the optimal path at stage i. Let Oi be the set of nodes visited by the optimal path until stage i, i.e., Oi = \u222aij=1P\u2217j , with O0 = \u2205 and O1 = P\u22171 . The reward collected by the\napproximation algorithm at stage i can be bounded as:\nfAi\u22121(Pi) \u2265 1/\u03b7(fAi\u22121(P\u2217i )).\nAfter k stages, the total collected reward can be given as:\nk\u2211 i=1 fAi\u22121(Pi) \u2265 1/\u03b7( k\u2211 i=1 fAi\u22121(P\u2217i )). (4)\nSince the left hand side is a telescopic sum, we get:\nk\u2211 i=1 fAi\u22121(Pi) = f(\u222aki=1Pi) = f(Ak). (5)\nOn the right hand side (RHS):\nR.H.S. = 1/\u03b7( k\u2211 i=1 fAi\u22121(P\u2217i )),\n= 1/\u03b7( k\u2211 i=1 (f(P\u2217i \u222a Ai\u22121)\u2212 f(Ai\u22121))).\nAdding Oi\u22121 to both the terms and using the submodularity property, we get R.H.S. \u2265 1/\u03b7( k\u2211 i=1 (f(Oi \u222a Ai\u22121)\u2212 f(Oi\u22121 \u222a Ai\u22121))),\n= 1/\u03b7 [f(O1)\u2212 0 + f(O2 \u222a A1)\u2212 f(O1 \u222a A1) + \u00b7 \u00b7 \u00b7+ f(Ok \u222a Ak\u22121)\u2212 f(Ok\u22121 \u222a Ak\u22121)] .\nRearranging the terms, we get:\nR.H.S. \u2265 1/\u03b7 [ f(Ok \u222a Ak\u22121)\u2212\nk\u22121\u2211 i=1 (f(Oi \u222a Ai)\u2212 f(Oi \u222a Ai\u22121))\n] .\nUsing the monotonicity (f(Ok \u222aAk\u22121) \u2265 f(Ok)) and submodularity of f ( f(Oi \u222aAi)\u2212 f(Oi \u222a Ai\u22121) \u2264 f(Ai)\u2212 f(Ai\u22121)), we get\nR.H.S. \u2265 1/\u03b7 [ f(Ok)\u2212\nk\u22121\u2211 i=1 (f(Ai)\u2212 f(Ai\u22121))\n] ,\n= 1/\u03b7 [f(Ok)\u2212 f(Ak\u22121)] .\nUsing the monotonicity (f(Ak) \u2265 f(Ak\u22121)), we get\nR.H.S. \u2265 1/\u03b7 [f(Ok)\u2212 f(Ak)] . (6)\nSubstituting Equation (5) and (6) into Equation (4), we get:\nf(Ak) \u2265 1/\u03b7 [f(Ok)\u2212 f(Ak)] ,\nand thus:\nf(Ak) \u2265 1/(\u03b7 + 1)f(Ok).\nresulting in an approximation guarantee of (1 + \u03b7).\nThe above theorem and proof is inspired by the proof of multi-path orienteering provided by Blum et al. (2003).\nLemma 3. Let P\u2217 = (s = v0, v1, . . . , vl = t) be an optimal s-t-path solution to MIPP, constrained by budgetB. Then there exists a corresponding SD-MIPP pathP\u2217C = (Cs = Ci1 , . . . , Cin = Ct), traversing through locations Ai1 \u222a \u00b7 \u00b7 \u00b7 \u222a Ail , with budget B\u0303 of at most 2 \u221a 2B + 4L collecting the same information.\nProof of Lemma 3. Let P\u2217 be the optimal path for MIPP, constrained by budget B. We need to ensure that when MIPP is transformed into SD-MIPP, with P\u2217C as the corresponding optimal solution, we have enough budget such that P\u2217C is feasible in the new problem domain. To recall, for the new problem domain, SD-MIPP, traveling to a new cell costs L (distance between the centroids of adjacent cells), irrespective of the sensing location within the cell.\nFor the corresponding SD-MIPP, an optimal path may just make 4 experiments in 4 different cells (Cells 1,2,3 and 4 in Fig. 16) sharing a common vertex, with each sensing location in different cell close to the common vertex, while only requiring an infinitesimally small traveling cost. Increasing the budget by 4L accounts for this case. Furthermore, by paying only an additional cost L for traveling between the two corners of an edge of a cell, P\u2217C can make experiments at 2 new cells (Cells 5,6 in Fig. 16. Thus, the total number of cells visited by the P\u2217C is upper bounded by 2(B/L)+ 4. Hence, a budget of 2B+4L suffices to render P\u2217C a feasible SD-MIPP solution. Now to convert MIPP from the two-dimensional Euclidean distance into the corresponding L1 distance, the budget needs to be increased to \u221a 2B to ensure that P\u2217 is feasible in the L1 metric. Accounting for the conversion from Euclidean distance into L1, the total budget B\u0303 required for SD-MIPP, to ensure the feasibility of the optimal solution in MIPP, is upper bounded by 2 \u221a 2B + 4L.\nLemma 4. Let P\u2217C = (Cs = C1, . . . , Ck = Ct) be an optimal solution for single robot instance of SD-MIPP, constrained by budget B\u0303, where an optimal set of locations are selected within each visited cell Cj . Let P\u0302 be the solution returned for eSIP. Then I(P\u0302) \u2265 1\u22121/e1+log2 k I(P \u2217 C).\nProof of Lemma 4. We will prove this by induction on the length n of the optimal path. Let Fg(= (1 \u2212 1/e)) be the constant factor due to the greedy selection of sensing locations within each cell.\nAlso assume B\u0303 be the budget constraint for SD-MIPP problem. For the case n = 1, iter = 0 and Algorithm 4 will select the greedy subset of nodes from the set Cs = Ct. This will give an approximation guarantee of Fg (Krause et al., 2008) compared to the optimal set of the same number of observations selected in this cell (and hence of the information obtained by the optimal SD-MIPP path visiting only this cell).\nNow, assuming the induction hypothesis holds for n = k/2, we get:\nIX(P) \u2265 Fg\n(1 + log(k/2)) IX(P\u2217),\n\u2265 Fg log k IX(P\u2217).\nThis will hold true for traveling budget of B\u0303k/2 and experimental budget up to B\u0303 \u2212 B\u0303k/2. Let us now analyze the case n = k. Let P \u22171 be the optimal path from Cs to Ck/2 constrained by budget B\u2032. Since we increase the experimental budget split linearly, B\u2032 will vary from 0 to B\u0303 \u2212 B\u0303k, where B\u0303k is the traveling cost for visiting k cells. Since this cost will be less than B\u0303 \u2212 B\u0303k/2, using the induction hypothesis,\nIX(P1) \u2265 Fg log k IX(P\u22171 ). (7)\nSimilarly, with X \u2032 = X \u222a P1 following approximation guarantee holds true for P2:\nIX\u2032(P2) \u2265 Fg log k IX\u2032(P\u22172 ). (8)\nBy definition of our submodular function:\nIX\u2032(P\u22172 ) = I(P\u22172 \u222a P1 \u222aX)\u2212 I(P1 \u222aX), = IX(P1 \u222a P\u22172 )\u2212 IX(P1).\nSubstituting in (8), we get\nIX\u2032(P2) \u2265 Fg log k (IX(P1 \u222a P\u22172 )\u2212 IX(P1)).\nUsing monotonicity of I,\nIX\u2032(P2) \u2265 Fg log k (IX(P\u22172 )\u2212 IX(P)).\nAdding this to (7), we finally get:\nIX(P) \u2265 Fg log k (IX(P\u22171 ) + IX(P\u22172 )\u2212 IX(P)),\n(Fg + log k) IX(P) \u2265 Fg(IX(P\u22171 ) + IX(P\u22172 )), (1 + log k) IX(P) \u2265 Fg(IX(P\u22171 ) + IX(P\u22172 )).\nSince IX is a submodular function,\n(1 + log k) IX(P) \u2265 Fg(IX(P\u2217)),\nIX(P) \u2265 Fg\n1 + log k (IX(P\u2217)).\nThe above proof is inspired by the analysis of the recursive greedy algorithm for submodular orienteering proposed by Chekuri and Pal (2005).\nIn the case of exponential budget splits, the budget needs to be increased, albeit sub-linearly:\nLemma 7. Let P\u2217C = (Cs = Ci1 , . . . , CiN = Ct) be an optimal SD-MIPP solution constrained by budget B\u0303. Let P be the solution returned by eMIP with exponential splits of the experimental budget, started with increased budget N log2\n3 2 B\u0303. Then I(P) \u2265 1\u22121/e1+logN I(P \u2217 C).\nProof of Lemma 7. The set of paths which eMIP considers under exponential splits \u2013 let us call them exponential paths \u2013 is in general a strict subset of the linear paths considered under linear splits. The proof of Lemma 4 indeed shows that the path returned by eMIP achieves at most a factor 1\u22121/e 1+logN less information than the optimal exponential path. We need to show that increasing the budget by a factor ofN log2 3 2 B\u0303 guarantees that the optimal linear path is a feasible exponential path. Every exponential path can be represented by a complete binary tree, whereby every internal node at a given level in the tree corresponds to a choice of middle node and experimental budget allocation to the left and right sub-path at the corresponding recursion level. Further, every leaf in the tree corresponds to a set of observations selected in a visited cell. Consider the tree T \u2217 representing the optimal linear path with budget B\u0303. At each inner node, the restriction to exponential splits can lead to a situation, where either the left or right sub-path receives less experimental budget than allocated by the optimal path. Our proof strategy is to turn T \u2217 into a new tree T \u2032, which selects the same observations and corresponds to a valid exponential path. In order to achieve this, we will annotate each inner node v, which receives Bv experimental budget in the optimal linear allocation, by a new feasible exponential budget B\u2032v \u2265 Bv. It then suffices to show that for the root R it holds that B\u2032R \u2264 (n)log2 3/2BR = (3/2)log2 nBR. Label the edges of T \u2217 with 0 and 1, such that the sub-path corresponding to the edge labeled with 1 receives the smaller part of the linear budget split. Hence, a leaf v on a path with k ones receives at mostBv \u2264 (1/2)k of the total linear budget requirement B\u0303. Let us derive the boundsB\u2032v bottom up. We prove by induction thatB \u2032 v \u2264 (3/2)mBv wherem is the height of v (distance from the leaves). This will suffice the condition B\u2032r \u2264 (3/2)log2 nBr, that we want to prove. For the leaves v clearlyB\u2032v = Bv is sufficient, since no further split is done and hence the reward collected by both linear and exponential split will be same. Let v be an inner node with children l and r, where w.l.o.g., the left child l is annotated by 0. By construction, Br \u2264 Bv/2. By induction hypothesis, B\u2032l \u2264 (3/2)m\u22121Bl, and B\u2032r \u2264 (3/2)m\u22121Br. If we choose B\u2032v = B\u2032l + 2B\u2032r, then we can find a feasible exponential budget split allocating at least B\u2032l to l and B \u2032 r to r. This split will require increasing the budget exponentially till we suffice r and allocating the rest to l. To ensure that we always have a budget split that suffice r with exponential budget irrespective of whether it represents P1 or P2, we need to do exponential splits from both sides, trying both exponential increase from 0 (Bexp) and Bv \u2212 Bexp for the cases when r represents P1 and P2 respectively. Now we have B\u2032v \u2264 (3/2)m\u22121Bl + 2(3/2)m\u22121Br = (3/2)m\u22121Bv + (3/2)m\u22121Br \u2264 (3/2)mBv.\nTheorem 5. Let P\u2217 be the optimal solution for the single robot instance of the MIPP problem with budget constraint B. Then, our eSIP algorithm will find a solution P\u0302 achieving an information value of at least I(P\u0302) \u2265 1\u22121/e1+log2 N I(P \u2217), whose cost is no more than 2(2 \u221a 2B + 4L)(1 +L \u221a 2 Cexp ) in the case of linear budget split for B\u0303e and no more than 2(2 \u221a 2B + 4L)(1 + L \u221a 2\nCexp )N log2\n3 2 in the\ncase of exponential budget split for B\u0303e.\nProof of Theorem 5. Let B\u0303 be the budget requirement for SD-MIPP according to Lemma 4 (or Lemma 7 in the case of exponential splits) and P be the corresponding solution returned by eMIP. Let Cexp be the cost of making an observation at each sensing location. Maximum number of sensing locations visited by P will be B\u0303Cexp . Since we do not account for traveling to the sensing locations, an additional cost equivalent to traveling from the centroid of the visited cells to the corresponding sensing location is to be paid when the solution from SD-MIPP is transformed back to get the solution for MIPP. For each sensing location, a maximum additional cost of L \u221a 2 is incurred for traveling to the sensing location and returning back to the centroid, where L is the length of the cell. Thus the additional cost for the solution path for MIPP problem, transformed from SD-MIPP problem is upper bounded by B\u0303L \u221a 2\nCexp . Since eMIP only considers exponential budget splits into\ntraveling and experimental budget, an increase of the budget by another factor of 2 guarantees that the split defined by the optimal MIPP solution is feasible. Combining this analysis with Lemma 3 and Lemma 4 completes the proof."}], "references": [{"title": "Resource-constrained geometric network optimization", "author": ["E.M. Arkin", "J.S.B. Mitchell", "G. Narasimhan"], "venue": "In Symposium on Computational Geometry,", "citeRegEx": "Arkin et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Arkin et al\\.", "year": 1998}, {"title": "Deploying wireless sensors to achieve both coverage and connectivity", "author": ["X. Bai", "S. Kumar", "D. Xua", "Z. Yun", "T.H. Lai"], "venue": "In Proceedings of the 7th ACM international symposium on Mobile ad hoc networking and computing,", "citeRegEx": "Bai et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Bai et al\\.", "year": 2006}, {"title": "Call and response: experiments in sampling the environment", "author": ["M.A. Batalin", "M. Rahimi", "Y. Yu", "D. Liu", "A. Kansal", "G.S. Sukhatme", "W.J. Kaiser", "M. Hansen", "G.J. Pottie", "M. Srivastava", "D. Estrin"], "venue": "In Proceedings of the 2nd international conference on Embedded networked sensor systems,", "citeRegEx": "Batalin et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Batalin et al\\.", "year": 2004}, {"title": "Approximation algorithms for orienteering and discounted-reward tsp", "author": ["A. Blum", "S. Chawla", "D.R. Karger", "T. Lane", "A. Meyerson", "M. Minkoff"], "venue": "In Annual Symposium on Foundation of Computer Science (FOCS),", "citeRegEx": "Blum et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Blum et al\\.", "year": 2003}, {"title": "Fast planning through planning graph analysis", "author": ["A.L. Blum", "M.L. Furst"], "venue": "Artificial Intelligence,", "citeRegEx": "Blum and Furst,? \\Q1997\\E", "shortCiteRegEx": "Blum and Furst", "year": 1997}, {"title": "NIMS3D: A novel rapidly deployable robot for 3-dimensional applications", "author": ["P.H. Borgstrom", "M.J. Stealey", "M.A. Batalin", "W.J. Kaiser"], "venue": "In IEEE/RSJ International Conference on Intelligent Robots and Systems,", "citeRegEx": "Borgstrom et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Borgstrom et al\\.", "year": 2006}, {"title": "Information based adaptive robotic exploration", "author": ["F. Bourgault", "A. Makarenko", "S. Williams", "B. Grocholsky", "H. Durrant-Whyte"], "venue": "In IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS),", "citeRegEx": "Bourgault et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Bourgault et al\\.", "year": 2002}, {"title": "Climate change impacts uncertainty for water resources in the san joaquin river basin, california", "author": ["L.D. Brekke", "N.L. Miller", "K.E. Bashford", "N.W. Quinn", "J.A. Dracup"], "venue": "Journal of the American water resource association,", "citeRegEx": "Brekke et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Brekke et al\\.", "year": 2004}, {"title": "Effective approaches for partial satisfaction (over-subscription) planning", "author": ["M.V.D. Briel", "R. Sanchez", "M.B. Do", "S. Kambhampati"], "venue": "In In AAAI,", "citeRegEx": "Briel et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Briel et al\\.", "year": 2004}, {"title": "An optimal solution procedure for the multiple tour maximum collection problem using column generation", "author": ["S.E. Butt", "D.M. Ryan"], "venue": "Computers and Operations Research,", "citeRegEx": "Butt and Ryan,? \\Q1999\\E", "shortCiteRegEx": "Butt and Ryan", "year": 1999}, {"title": "Maximizing a submodular set function subject to a matroid constraint (extended abstract)", "author": ["G. Calinescu", "C. Chekuri", "M. Pl", "J. Vondrk"], "venue": "In Integer Programming and Combinatorial Optimization (IPCO),", "citeRegEx": "Calinescu et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Calinescu et al\\.", "year": 2007}, {"title": "Optimal monitoring network design. Statistics and Probability Letters", "author": ["W. Caselton", "J. Zidek"], "venue": null, "citeRegEx": "Caselton and Zidek,? \\Q1984\\E", "shortCiteRegEx": "Caselton and Zidek", "year": 1984}, {"title": "A fast and effective heuristic for the orienteering problem", "author": ["Chao", "I.-M", "B.L. Golden", "E.A. Wasil"], "venue": "European Journal of Operations Research,", "citeRegEx": "Chao et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Chao et al\\.", "year": 1996}, {"title": "Improved algorithms for orienteering and related problems", "author": ["C. Chekuri", "N. Korula", "M. P\u00e1l"], "venue": "In Proc. 19th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA\u201908)", "citeRegEx": "Chekuri et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Chekuri et al\\.", "year": 2008}, {"title": "A recursive greedy algorithm for walks in directed graphs", "author": ["C. Chekuri", "M. Pal"], "venue": "In Annual Symposium on Foundation of Computer Science (FOCS),", "citeRegEx": "Chekuri and Pal,? \\Q2005\\E", "shortCiteRegEx": "Chekuri and Pal", "year": 2005}, {"title": "Worst-case analysis of a new heuristic for the traveling salesman problem", "author": ["N. Christofides"], "venue": "Tech report,CMU", "citeRegEx": "Christofides,? \\Q1976\\E", "shortCiteRegEx": "Christofides", "year": 1976}, {"title": "Statistics for Spatial Data", "author": ["N.A.C. Cressie"], "venue": null, "citeRegEx": "Cressie,? \\Q1991\\E", "shortCiteRegEx": "Cressie", "year": 1991}, {"title": "Networked aquatic microbial observing system", "author": ["A. Dhariwal", "B. Zhang", "B. Stauffer", "C. Oberg", "G.S. Sukhatme", "D.A. Caron", "A.A. Requicha"], "venue": "In IEEE International Conference on Robotics and Automation (ICRA)", "citeRegEx": "Dhariwal et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Dhariwal et al\\.", "year": 2006}, {"title": "Traveling salesman problem with profits", "author": ["D. Feillet", "P. Dejax", "M. Gendreau"], "venue": "Transportation Science,", "citeRegEx": "Feillet et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Feillet et al\\.", "year": 2005}, {"title": "Saving an epsilon: a 2-approximation for the k-mst problem in graphs", "author": ["N. Garg"], "venue": "In ACM Symposium on Theory of Computing (STOC),", "citeRegEx": "Garg,? \\Q2005\\E", "shortCiteRegEx": "Garg", "year": 2005}, {"title": "The orienteering problem", "author": ["B. Golden", "L. Levy", "R. Vohra"], "venue": "Naval Research Logistics,", "citeRegEx": "Golden et al\\.,? \\Q1987\\E", "shortCiteRegEx": "Golden et al\\.", "year": 1987}, {"title": "Revisiting the greedy approach to submodular set function maximization", "author": ["P.R. Goundan", "A.S. Schulz"], "venue": "Working paper,", "citeRegEx": "Goundan and Schulz,? \\Q2008\\E", "shortCiteRegEx": "Goundan and Schulz", "year": 2008}, {"title": "Near-optimal sensor placements in gaussian processes", "author": ["C. Guestrin", "A. Krause", "A.P. Singh"], "venue": "In International Conference on Machine Learning (ICML)", "citeRegEx": "Guestrin et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Guestrin et al\\.", "year": 2005}, {"title": "High-resolution river hydraulic and water quality characterization using rapidly deployable networked infomechanical systems (NIMS RD)", "author": ["T.C. Harmon", "R.F. Ambrose", "R.M. Gilbert", "J.C. Fisher", "M. Stealey", "W.J. Kaiser"], "venue": "Environmental Engineering Science,", "citeRegEx": "Harmon et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Harmon et al\\.", "year": 2007}, {"title": "The team orienteering problem", "author": ["C. I-Ming", "B. Golden", "E. Wasil"], "venue": "European Journal of Operation Research,", "citeRegEx": "I.Ming et al\\.,? \\Q1996\\E", "shortCiteRegEx": "I.Ming et al\\.", "year": 1996}, {"title": "Using branch-and-bound algorithms to obtain suboptimal solutions", "author": ["T. Ibaraki", "S. Muro", "T. Murakami", "T. Hasegawa"], "venue": "Mathematical Methods of Operations Research,", "citeRegEx": "Ibaraki et al\\.,? \\Q1983\\E", "shortCiteRegEx": "Ibaraki et al\\.", "year": 1983}, {"title": "Diurnal stratification and its effects on wind-induced currents and water qualities in lake kasumigaura, japan", "author": ["T. Ishikawa", "M. Tanaka"], "venue": "Journal of Hydraulic Research,", "citeRegEx": "Ishikawa and Tanaka,? \\Q1993\\E", "shortCiteRegEx": "Ishikawa and Tanaka", "year": 1993}, {"title": "The prize collecting steiner tree problem: theory and practice", "author": ["D.S. Johnson", "M. Minkoff", "S. Phillips"], "venue": "In Symposium on Discrete Algorithms (SODA),", "citeRegEx": "Johnson et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Johnson et al\\.", "year": 2000}, {"title": "NIMS RD: A rapidly deployable cable based robot", "author": ["B.L. Jordan", "M.A. Batalin", "W.J. Kaiser"], "venue": "In IEEE International Conference on Robotics and Automation (ICRA),", "citeRegEx": "Jordan et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Jordan et al\\.", "year": 2007}, {"title": "An algorithm for the single constraint maximum collection problem", "author": ["S. Kataoka", "S. Morito"], "venue": "Journal of the Operational Research Society of Japan,", "citeRegEx": "Kataoka and Morito,? \\Q1988\\E", "shortCiteRegEx": "Kataoka and Morito", "year": 1988}, {"title": "An exact algorithm for maximum entropy sampling", "author": ["Ko", "C.-W", "J. Lee", "M. Queyranne"], "venue": "Operations Research,", "citeRegEx": "Ko et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Ko et al\\.", "year": 1995}, {"title": "Near-optimal observation selection using submodular functions", "author": ["A. Krause", "C. Guestrin"], "venue": "In AAAI Nectar track", "citeRegEx": "Krause and Guestrin,? \\Q2007\\E", "shortCiteRegEx": "Krause and Guestrin", "year": 2007}, {"title": "Near-optimal sensor placements in Gaussian processes: Theory, efficient algorithms and empirical studies", "author": ["A. Krause", "A. Singh", "C. Guestrin"], "venue": "In Journal of Machine Learning and Research (JMLR),", "citeRegEx": "Krause et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Krause et al\\.", "year": 2008}, {"title": "Nonmyopic active learning of gaussian processes: an exploration-exploitation approach", "author": ["A. Krause", "C. Guestrin"], "venue": "In International Conference on Machine Learning (ICML),", "citeRegEx": "Krause and Guestrin,? \\Q2007\\E", "shortCiteRegEx": "Krause and Guestrin", "year": 2007}, {"title": "Near-optimal sensor placements: Maximizing information while minimizing communication cost", "author": ["A. Krause", "C. Guestrin", "A. Gupta", "J. Kleinberg"], "venue": "In Proceedings of the fifth international conference on Information processing in sensor networks (IPSN),", "citeRegEx": "Krause et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Krause et al\\.", "year": 2006}, {"title": "The selective travelling salesman problem", "author": ["G. Laporte", "S. Martello"], "venue": "Discrete Applied Mathematics,", "citeRegEx": "Laporte and Martello,? \\Q1990\\E", "shortCiteRegEx": "Laporte and Martello", "year": 1990}, {"title": "Probabilistic search for a moving target in an indoor environment", "author": ["H. Lau", "S. Huang", "G. Dissanayake"], "venue": "In IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS),", "citeRegEx": "Lau et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Lau et al\\.", "year": 2006}, {"title": "Computer solutions of the traveling salesman problem", "author": ["S. Lin"], "venue": "Bell System Technical Journal,", "citeRegEx": "Lin,? \\Q1965\\E", "shortCiteRegEx": "Lin", "year": 1965}, {"title": "Vertical mixing in a shallow, eutrophic lake: Possible consequences for the light climate of phytoplankton", "author": ["S. MacIntyre"], "venue": "Limnology and Oceanography,", "citeRegEx": "MacIntyre,? \\Q1993\\E", "shortCiteRegEx": "MacIntyre", "year": 1993}, {"title": "Spatial-temporal variability in surface layer deepening and lateral advection in an embayment of lake victoria, east africa", "author": ["S. MacIntyre", "J.R. Romero", "G.W. Kling"], "venue": "Limnology and Oceanography,", "citeRegEx": "MacIntyre et al\\.,? \\Q2002\\E", "shortCiteRegEx": "MacIntyre et al\\.", "year": 2002}, {"title": "Nonmyopic informative path planning in spatio-temporal models", "author": ["A. Meliou", "A. Krause", "C. Guestrin", "J.M. Hellerstein"], "venue": "In Association for Advancement of Artificial Intelligence (AAAI),", "citeRegEx": "Meliou et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Meliou et al\\.", "year": 2007}, {"title": "Poly-logarithmic approximation algorithms for directed vehicle routing problems", "author": ["V. Nagarajan", "R. Ravi"], "venue": "In Proc. 10th Internat. Workshop on Approximation Algorithms for Combinatorial Optimization Problems (APPROX\u201907),", "citeRegEx": "Nagarajan and Ravi,? \\Q2007\\E", "shortCiteRegEx": "Nagarajan and Ravi", "year": 2007}, {"title": "An analysis of the approximations for maximizing submodular set functions", "author": ["G. Nemhauser", "L. Wolsey", "M. Fisher"], "venue": "Mathematical Programming,", "citeRegEx": "Nemhauser et al\\.,? \\Q1978\\E", "shortCiteRegEx": "Nemhauser et al\\.", "year": 1978}, {"title": "Networked infomechanical systems: A mobile wireless sensor network platform", "author": ["R. Pon", "M. Batalin", "J. Gordon", "M. Rahimi", "W. Kaiser", "G. Sukhatme", "M. Srivastava", "D. Estrin"], "venue": "In Proceedings of the fifth international conference on Information processing in sensor networks (IPSN),", "citeRegEx": "Pon et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Pon et al\\.", "year": 2005}, {"title": "Adaptive sampling for environmental robotics", "author": ["M. Rahimi", "R. Pon", "W. Kaiser", "G. Sukhatme", "D. Estrin", "M. Srivastava"], "venue": "In IEEE International Conference on Robotics and Automation (ICRA)", "citeRegEx": "Rahimi et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Rahimi et al\\.", "year": 2004}, {"title": "Gaussian Process for Machine Learning. Adaptive Computation and Machine Learning", "author": ["C.E. Rasmussen", "C.K. Williams"], "venue": null, "citeRegEx": "Rasmussen and Williams,? \\Q2006\\E", "shortCiteRegEx": "Rasmussen and Williams", "year": 2006}, {"title": "Portable autonomous vertical profiler for estuarine applications", "author": ["J.V. Reynolds-Fleming", "J.G. Fleming", "R.A. Luettich"], "venue": "Estuaries,", "citeRegEx": "Reynolds.Fleming et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Reynolds.Fleming et al\\.", "year": 2004}, {"title": "Dynamic action spaces for information gain maximization in search and exploration", "author": ["N. Roy", "C. Earnest"], "venue": "In American Control Conference", "citeRegEx": "Roy and Earnest,? \\Q2006\\E", "shortCiteRegEx": "Roy and Earnest", "year": 2006}, {"title": "Exploiting subgraph structure in multi-robot path planning", "author": ["M.R.K. Ryan"], "venue": "In Journal of Artificial Intelligence and Research (JAIR),", "citeRegEx": "Ryan,? \\Q2008\\E", "shortCiteRegEx": "Ryan", "year": 2008}, {"title": "Global a-optimal robot exploration in slam", "author": ["R. Sim", "N. Roy"], "venue": "In IEEE International Conference on Robotics and Automation (ICRA)", "citeRegEx": "Sim and Roy,? \\Q2005\\E", "shortCiteRegEx": "Sim and Roy", "year": 2005}, {"title": "Coordination for multi-robot exploration and mapping", "author": ["R.G. Simmons", "D. Apfelbaum", "W. Burgard", "D. Fox", "M. Moors", "S. Thrun", "H. Younes"], "venue": "In Association for Advancement of Artificial Intelligence (AAAI),", "citeRegEx": "Simmons et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Simmons et al\\.", "year": 2000}, {"title": "Active learning for adaptive mobile sensing networks", "author": ["A. Singh", "R. Nowak", "P. Ramanathan"], "venue": "In Proceedings of the fifth international conference on Information processing in sensor networks (IPSN),", "citeRegEx": "Singh et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Singh et al\\.", "year": 2006}, {"title": "Autonomous robotic sensing experiments at san joaquin river", "author": ["A. Singh", "M.A. Batalin", "V. Chen", "M.J. Stealey", "B. Jordan", "J. Fisher", "T. Harmon", "M. Hansen", "W.J. Kaiser"], "venue": "In IEEE International Conference on Robotics and Automation (ICRA),", "citeRegEx": "Singh et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Singh et al\\.", "year": 2007}, {"title": "Efficient planning of informative paths for multiple robots", "author": ["A. Singh", "A. Krause", "C. Guestrin", "W.J. Kaiser", "M.A. Batalin"], "venue": "In International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "Singh et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Singh et al\\.", "year": 2007}, {"title": "Choosing objectives in over-subscription planning", "author": ["D.E. Smith"], "venue": "In International Conference on Automated Planning and Scheduling (ICAPS)", "citeRegEx": "Smith,? \\Q2004\\E", "shortCiteRegEx": "Smith", "year": 2004}, {"title": "Mobile element scheduling with dynamic deadlines", "author": ["A.A. Somasundara", "A. Ramamoorthy", "M.B. Srivastava"], "venue": "In IEEE Transactions on Mobile Computing,", "citeRegEx": "Somasundara et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Somasundara et al\\.", "year": 2007}, {"title": "Information gain-based exploration using raoblackwellized particle filters", "author": ["C. Stachniss", "G. Grisetti", "W. Burgard"], "venue": "In Robotics Science and Systems (RSS)", "citeRegEx": "Stachniss et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Stachniss et al\\.", "year": 2005}, {"title": "Iterated local search algorithm based on very large-scale neighborhood for prize-collecting vehicle routing problem", "author": ["L. Tang", "X. Wang"], "venue": "The International Journal of Advanced Manufacturing Technology,", "citeRegEx": "Tang and Wang,? \\Q2006\\E", "shortCiteRegEx": "Tang and Wang", "year": 2006}, {"title": "Intelligent maps for autonomous kilometer-scale science survey", "author": ["D.R. Thompson", "D. Wettergreen"], "venue": "In International Symposium on Artificial Intelligence, Robotics and Automation in Space (iSAIRAS)", "citeRegEx": "Thompson and Wettergreen,? \\Q2008\\E", "shortCiteRegEx": "Thompson and Wettergreen", "year": 2008}, {"title": "The complexity of the optimal searcher path problem", "author": ["K.E. Trummel", "J.R. Weisinger"], "venue": "Operations Research,", "citeRegEx": "Trummel and Weisinger,? \\Q1986\\E", "shortCiteRegEx": "Trummel and Weisinger", "year": 1986}, {"title": "Performance of linear-space search algorithms", "author": ["W. Zhang", "R.E. Korf"], "venue": "Artificial Intelligence,", "citeRegEx": "Zhang and Korf,? \\Q1995\\E", "shortCiteRegEx": "Zhang and Korf", "year": 1995}], "referenceMentions": [{"referenceID": 38, "context": "1, are specific examples of related phenomena of interest to biologists and other environment scientists (MacIntyre, 1993; Ishikawa & Tanaka, 1993; MacIntyre, Romero, & Kling, 2002).", "startOffset": 105, "endOffset": 181}, {"referenceID": 17, "context": "These actuated sensors have been used in the past (Dhariwal et al., 2006) for measuring the phenomena at various locations and hence providing the biologists with critical information about the state of the lake.", "startOffset": 50, "endOffset": 73}, {"referenceID": 16, "context": "In particular, we use a rich class of probabilistic models called Gaussian Processes (GPs) (Rasmussen & Williams, 2006) that has been shown to accurately model many spatial phenomena (Cressie, 1991), and apply the mutual information (MI) criterion (Caselton & Zidek, 1984) to quantify the reduction in uncertainty achieved through selected robot paths.", "startOffset": 183, "endOffset": 198}, {"referenceID": 32, "context": "The key insight which will allow us to obtain such an algorithm is that the mutual information (and several other notions of informativeness (as discussed in Krause and Guestrin, 2007) satisfies submodularity, an intuitive diminishing returns property - making a new observation helps more if we have made only a few observations so far, and less if we have already made many observations (Krause et al., 2008).", "startOffset": 389, "endOffset": 410}, {"referenceID": 14, "context": "The problem of optimizing the path of a single robot to maximize a submodular function over the visited locations was studied by Chekuri and Pal (2005), who developed an algorithm, recursivegreedy, with strong theoretical approximation guarantees.", "startOffset": 129, "endOffset": 152}, {"referenceID": 28, "context": "In both campaigns, the Networked Info Mechanical System (NIMS) (Jordan et al., 2007), a cable based robotic system, was used to perform path planning while observing a two dimensional vertical plane (cross-section).", "startOffset": 63, "endOffset": 84}, {"referenceID": 17, "context": "In addition to analyzing data from these deployments, we provide extensive experimental analysis of our algorithm on several real world sensor network data sets, including the data collected using a robotic boat at lake Fulmor (Dhariwal et al., 2006).", "startOffset": 227, "endOffset": 250}, {"referenceID": 30, "context": "Several alternative information criteria such as entropy (Ko et al., 1995), information disk model (Bai et al.", "startOffset": 57, "endOffset": 74}, {"referenceID": 1, "context": ", 1995), information disk model (Bai et al., 2006) and alphabetical optimality criterion such as A-, D- and E-optimal have also been used to associate sensing quality with observation locations in related problem domain.", "startOffset": 32, "endOffset": 50}, {"referenceID": 30, "context": "The effectiveness of mutual information to select informative sensing locations was studied by Krause et al. (2008). Several alternative information criteria such as entropy (Ko et al.", "startOffset": 95, "endOffset": 116}, {"referenceID": 32, "context": "Even if we do not consider the constraints on the length of the paths of the robots, the problem of selecting locations that maximize mutual information is NP-hard (Krause et al., 2008).", "startOffset": 164, "endOffset": 185}, {"referenceID": 32, "context": "The key observation, which will allow us to obtain such strong approximation guarantees, is that mutual information satisfies the following diminishing returns property (Krause et al., 2008): The more locations we have already sensed, the less information we will gain by sensing a new location.", "startOffset": 169, "endOffset": 190}, {"referenceID": 42, "context": "This intuition is formalized by the concept of submodularity: A function f is submodular (Nemhauser et al., 1978) if:", "startOffset": 89, "endOffset": 113}, {"referenceID": 14, "context": "k = 1) to maximize a submodular function of the visited locations, constrained by an upper bound (B) on the path cost, was first studied by Chekuri and Pal (2005). We will review their recursive-greedy algorithm in detail in Section 5.", "startOffset": 140, "endOffset": 163}, {"referenceID": 32, "context": "This monotonicity holds only approximately for mutual information (Krause et al., 2008), which however is sufficient for all purposes of this paper.", "startOffset": 66, "endOffset": 87}, {"referenceID": 14, "context": "In this paper, we present a simple algorithm for the multi-robot scenario that can exploit any approximation algorithm for the single robot case, such as the recursive-greedy algorithm, as discussed by Chekuri and Pal (2005), and (almost) preserve the approximation guarantee, while avoiding the exponential increase in running time.", "startOffset": 202, "endOffset": 225}, {"referenceID": 3, "context": "The work by Blum et al. (2003) proved Theorem 1 for the special case of additive (modular) sensing quality functions.", "startOffset": 12, "endOffset": 31}, {"referenceID": 3, "context": "The work by Blum et al. (2003) proved Theorem 1 for the special case of additive (modular) sensing quality functions. In this paper, we extend their result to general submodular functions. As an example of an \u03b7-approximate algorithm for the single robot problem, in the next section, we review the recursive-greedy algorithm as proposed by Chekuri and Pal (2005). This algorithm has an approximation guarantee \u03b7 of O(log2 |P\u2217|), where |P\u2217| is the number of locations visited by an optimal solution P\u2217.", "startOffset": 12, "endOffset": 363}, {"referenceID": 32, "context": "The work by Krause et al. (2008) considered the sensor placement problem, where a subset A \u2286 V of k locations is selected in order to maximize the mutual information, without considering path costs.", "startOffset": 12, "endOffset": 33}, {"referenceID": 32, "context": "The work by Krause et al. (2008) considered the sensor placement problem, where a subset A \u2286 V of k locations is selected in order to maximize the mutual information, without considering path costs. By exploiting the submodularity property of MI, they proved that if the discretization V is fine enough and the GP satisfies mild regularity conditions, greedily selecting locations based on this criterion is near-optimal. More specifically, the greedy algorithm (which we call GreedySubset in the following), after selecting the first i locations Ai, picks the location with maximum residual information i.e. vi+1 = argmaxv IAi({v}) and sets Ai+1 = Ai \u222a {vi+1}. GreedySubset hence iteratively adds locations which increase mutual information the most. Using a result proposed by Nemhauser et al. (1978) on the performance of the greedy algorithm for submodular functions, the work by Krause et al.", "startOffset": 12, "endOffset": 803}, {"referenceID": 32, "context": "The work by Krause et al. (2008) considered the sensor placement problem, where a subset A \u2286 V of k locations is selected in order to maximize the mutual information, without considering path costs. By exploiting the submodularity property of MI, they proved that if the discretization V is fine enough and the GP satisfies mild regularity conditions, greedily selecting locations based on this criterion is near-optimal. More specifically, the greedy algorithm (which we call GreedySubset in the following), after selecting the first i locations Ai, picks the location with maximum residual information i.e. vi+1 = argmaxv IAi({v}) and sets Ai+1 = Ai \u222a {vi+1}. GreedySubset hence iteratively adds locations which increase mutual information the most. Using a result proposed by Nemhauser et al. (1978) on the performance of the greedy algorithm for submodular functions, the work by Krause et al. (2008) showed that GreedySubset selects sets which achieve mutual information of at least (1 \u2212 1/e)OPT\u2212\u03b5, where OPT is the optimal mutual information among all sets of the same size, and \u03b5 is a small error incurred due to the discretization.", "startOffset": 12, "endOffset": 905}, {"referenceID": 14, "context": "Algorithm 2: Recursive greedy algorithm for single robot instance of MIPP as proposed by Chekuri and Pal (2005). Output path P provides an approximation guarantee of IX(P) \u2265 IX(P)/ d1 + log ke, where I represent the submodular reward function, P\u2217 represent an optimal path and k represent the number of nodes in the optimal path.", "startOffset": 89, "endOffset": 112}, {"referenceID": 37, "context": "the tour-opt heuristics as discussed by Lin (1965).", "startOffset": 40, "endOffset": 51}, {"referenceID": 14, "context": "the number of cells N instead of the numberM of sensing locations, as was the case in the work by Chekuri and Pal (2005). However, the input budget constraint is violated by an amount based on the size of cells during the spatial decomposition.", "startOffset": 98, "endOffset": 121}, {"referenceID": 42, "context": "SinceGreedySubset guarantees a constant factor (1\u22121/e) approximation (Nemhauser et al., 1978), multiplying the resulting information value by (1\u2212 1/e)\u22121 provides an upper bound on the information achievable by the path (and hence the corresponding max child node).", "startOffset": 69, "endOffset": 93}, {"referenceID": 42, "context": "We can even compute tighter online bounds for maximizing monotonic submodular functions, as discussed by Nemhauser et al. (1978). 5.", "startOffset": 105, "endOffset": 129}, {"referenceID": 25, "context": "This heuristic, termed as sub-approximation (Ibaraki et al., 1983), is found to be effective in practice.", "startOffset": 44, "endOffset": 66}, {"referenceID": 28, "context": "In-field experiments were performed using the Networked InfoMechanical System (NIMS) (Jordan et al., 2007), a tethered robotic system.", "startOffset": 85, "endOffset": 106}, {"referenceID": 28, "context": "The Aquatic Networked InfoMechanical Systems platform (NIMS-AQ) is the latest in the family of NIMS systems (Jordan et al., 2007; Pon et al., 2005; Borgstrom et al., 2006), developed specifically for aquatic applications and used during the lake deployment.", "startOffset": 108, "endOffset": 171}, {"referenceID": 43, "context": "The Aquatic Networked InfoMechanical Systems platform (NIMS-AQ) is the latest in the family of NIMS systems (Jordan et al., 2007; Pon et al., 2005; Borgstrom et al., 2006), developed specifically for aquatic applications and used during the lake deployment.", "startOffset": 108, "endOffset": 171}, {"referenceID": 5, "context": "The Aquatic Networked InfoMechanical Systems platform (NIMS-AQ) is the latest in the family of NIMS systems (Jordan et al., 2007; Pon et al., 2005; Borgstrom et al., 2006), developed specifically for aquatic applications and used during the lake deployment.", "startOffset": 108, "endOffset": 171}, {"referenceID": 7, "context": "Understanding such mixing patterns are important for policy issues related to water distribution from river ecosystems (Brekke et al., 2004).", "startOffset": 119, "endOffset": 140}, {"referenceID": 23, "context": "Several experiments had been executed in the past to characterize the mixing phenomena at this confluence site (Singh et al., 2007a; Harmon et al., 2007).", "startOffset": 111, "endOffset": 153}, {"referenceID": 31, "context": "We first use the data from one such raster scan performed on the first day of the deployment (displaying similar characteristics) to learn a non-stationary Gaussian Process model, using a covariance function parameterization as described by Krause and Guestrin (2007). The parameters are chosen by maximizing the marginal likelihood (Rasmussen & Williams, 2006).", "startOffset": 241, "endOffset": 268}, {"referenceID": 17, "context": "A robotic boat, part of Networked Aquatic Microbial Observing System (NAMOS) (Dhariwal et al., 2006), was used to collect the surface temperature data around the lake, of width around 50 meters and length around 250 meters.", "startOffset": 77, "endOffset": 100}, {"referenceID": 17, "context": "A robotic boat, part of Networked Aquatic Microbial Observing System (NAMOS) (Dhariwal et al., 2006), was used to collect the surface temperature data around the lake, of width around 50 meters and length around 250 meters. As discussed earlier, understanding temperature distribution is of prime importance in limnology since it governs several physical phenomena occurring in the lake environment, including the growth of algal bloom. The average speed of the boat was approximately 0.4m/s. Half of the total measurements (218 different sensing locations) were used to learn a nonstationary Gaussian Process model by maximizing the marginal likelihood (Rasmussen & Williams, 2006), and the remaining measurements were used for experimentation. We divided the lake into 22 cells (except during the experiments for studying the effect of changing the size of the cell in spatial decomposition), with distance between adjacent cell approximately 21 meters. Based on the average speed, and motivated by a typical measurement duration of roughly 25 seconds, we set the experiment cost to be 10.5 meters (except during the experiment for understanding the effect of scaling the experimental cost). As our second dataset, we used data from an existing deployment of 52 wireless sensor motes to learn the amount of temperature variability at the Intel Research Laboratory, Berkeley (hereafter referred to as Berkeley temperature dataset). These sensing locations lie within a bounding region of length 45 meters and width 40 meters. We divided the complete region into a uniform grid containing 20 equal sized cells, and determined the experimental cost to be 9 meters (approximate distance to travel between adjacent cells). We learned a GP model as discussed by Krause et al. (2006). Finally, we explored the performance of our algorithm on a precipitation dataset collected from 167 regions of equal area, approximately 50 km apart, during the years 1949-1994.", "startOffset": 78, "endOffset": 1779}, {"referenceID": 17, "context": "A robotic boat, part of Networked Aquatic Microbial Observing System (NAMOS) (Dhariwal et al., 2006), was used to collect the surface temperature data around the lake, of width around 50 meters and length around 250 meters. As discussed earlier, understanding temperature distribution is of prime importance in limnology since it governs several physical phenomena occurring in the lake environment, including the growth of algal bloom. The average speed of the boat was approximately 0.4m/s. Half of the total measurements (218 different sensing locations) were used to learn a nonstationary Gaussian Process model by maximizing the marginal likelihood (Rasmussen & Williams, 2006), and the remaining measurements were used for experimentation. We divided the lake into 22 cells (except during the experiments for studying the effect of changing the size of the cell in spatial decomposition), with distance between adjacent cell approximately 21 meters. Based on the average speed, and motivated by a typical measurement duration of roughly 25 seconds, we set the experiment cost to be 10.5 meters (except during the experiment for understanding the effect of scaling the experimental cost). As our second dataset, we used data from an existing deployment of 52 wireless sensor motes to learn the amount of temperature variability at the Intel Research Laboratory, Berkeley (hereafter referred to as Berkeley temperature dataset). These sensing locations lie within a bounding region of length 45 meters and width 40 meters. We divided the complete region into a uniform grid containing 20 equal sized cells, and determined the experimental cost to be 9 meters (approximate distance to travel between adjacent cells). We learned a GP model as discussed by Krause et al. (2006). Finally, we explored the performance of our algorithm on a precipitation dataset collected from 167 regions of equal area, approximately 50 km apart, during the years 1949-1994. We followed the preprocessing and model learning described in the work by Krause et al. (2008). The large physical spread of the sensing regions makes this dataset unconventional for a mobile robot path planning application.", "startOffset": 78, "endOffset": 2053}, {"referenceID": 23, "context": "The multi-robot version of the OP (in the case of additive reward functions) was studied as the Team Orienteering Problem by I-Ming et al. (1996) and Multiple Tour Maximum Collection Problem by Butt and Ryan (1999).", "startOffset": 125, "endOffset": 146}, {"referenceID": 9, "context": "(1996) and Multiple Tour Maximum Collection Problem by Butt and Ryan (1999).", "startOffset": 55, "endOffset": 76}, {"referenceID": 20, "context": "The OP is known to be NP-hard (Golden et al., 1987).", "startOffset": 30, "endOffset": 51}, {"referenceID": 27, "context": "For the case of the unrooted OP (when no starting location is specified), the approximation guarantees known for Prize Collecting TSP and k-TSP can be easily extended (Johnson et al., 2000).", "startOffset": 167, "endOffset": 189}, {"referenceID": 19, "context": "There are several constant factor approximations known for the PC-TSP and k-TSP problems with the best one being a 2 approximation (Garg, 2005).", "startOffset": 131, "endOffset": 143}, {"referenceID": 13, "context": "The running time was recently improved independently by two different works (Chekuri et al., 2008; Nagarajan & Ravi, 2007), each proposing a poly-time approximation algorithm providing an approximation guarantee of O(log n), though using different approaches.", "startOffset": 76, "endOffset": 122}, {"referenceID": 0, "context": "For the rooted OP, Arkin et al. (1998) gave a (2 + ) approximation for the OP in geometric settings.", "startOffset": 19, "endOffset": 39}, {"referenceID": 0, "context": "For the rooted OP, Arkin et al. (1998) gave a (2 + ) approximation for the OP in geometric settings. Blum et al. (2003) gave the first constant factor approximation for the rooted OP in general undirected graphs.", "startOffset": 19, "endOffset": 120}, {"referenceID": 0, "context": "For the rooted OP, Arkin et al. (1998) gave a (2 + ) approximation for the OP in geometric settings. Blum et al. (2003) gave the first constant factor approximation for the rooted OP in general undirected graphs. They also extended their algorithm for multi-path OP. The running time of their algorithm, though polynomial, is very large (more specifically, O(\u03c0n5 log( )) where \u03c0 is the total reward in the path). Recently Chekuri et al. (2008) gave a polynomial time algorithm for the OP in undirected graphs with an improved approximation guarantee of (2 + ).", "startOffset": 19, "endOffset": 444}, {"referenceID": 0, "context": "For the rooted OP, Arkin et al. (1998) gave a (2 + ) approximation for the OP in geometric settings. Blum et al. (2003) gave the first constant factor approximation for the rooted OP in general undirected graphs. They also extended their algorithm for multi-path OP. The running time of their algorithm, though polynomial, is very large (more specifically, O(\u03c0n5 log( )) where \u03c0 is the total reward in the path). Recently Chekuri et al. (2008) gave a polynomial time algorithm for the OP in undirected graphs with an improved approximation guarantee of (2 + ). Our problem formulation with specified starting location (s) and finishing location (t) falls under the category of rooted OP with submodular (non-additive) reward function. Another classification of OP can be done based on the symmetry of the space of the possible locations. All of the above approximation guarantees hold true on symmetric spaces (undirected graphs). Obtaining good approximation algorithm for the directed (asymmetric) orienteering problem was stated as an open problem by Blum et al. (2003). Chekuri and Pal (2005) gave the first approximation algorithm with O(log n) guarantee that runs in quasi-polynomial running time.", "startOffset": 19, "endOffset": 1073}, {"referenceID": 0, "context": "For the rooted OP, Arkin et al. (1998) gave a (2 + ) approximation for the OP in geometric settings. Blum et al. (2003) gave the first constant factor approximation for the rooted OP in general undirected graphs. They also extended their algorithm for multi-path OP. The running time of their algorithm, though polynomial, is very large (more specifically, O(\u03c0n5 log( )) where \u03c0 is the total reward in the path). Recently Chekuri et al. (2008) gave a polynomial time algorithm for the OP in undirected graphs with an improved approximation guarantee of (2 + ). Our problem formulation with specified starting location (s) and finishing location (t) falls under the category of rooted OP with submodular (non-additive) reward function. Another classification of OP can be done based on the symmetry of the space of the possible locations. All of the above approximation guarantees hold true on symmetric spaces (undirected graphs). Obtaining good approximation algorithm for the directed (asymmetric) orienteering problem was stated as an open problem by Blum et al. (2003). Chekuri and Pal (2005) gave the first approximation algorithm with O(log n) guarantee that runs in quasi-polynomial running time.", "startOffset": 19, "endOffset": 1097}, {"referenceID": 10, "context": ", 2007b), we realized that our sequential-allocation procedure is an instance of maximizing a submodular function subject to a matroid constraint (Calinescu et al., 2007).", "startOffset": 146, "endOffset": 170}, {"referenceID": 10, "context": ", 2007b), we realized that our sequential-allocation procedure is an instance of maximizing a submodular function subject to a matroid constraint (Calinescu et al., 2007). We can define a partition matroid on the disjoint unionM =M1 \u222a \u00b7 \u00b7 \u00b7 \u222aMk of k ground setsMi, one for each robot. Each setMi contains all feasible paths for robot i. The collection I \u2286 2M of all subsets P \u2208 I such that |P \u2229 Mi| \u2264 1 (i.e. each P corresponds to a collection of paths, with the constraint that we can pick at most one from each setMi) forms independent sets of the partition matroid. Hence, the problem of finding a collection of maximally informative paths is the problem of finding an independent set of a matroid maximizing a submodular function. Current work in progress by Goundan and Schulz (2008) provides general results on the performance of a sequential allocation procedure in such a setting, which can be used to prove the same sequential allocation results originally presented by Singh et al.", "startOffset": 147, "endOffset": 789}, {"referenceID": 10, "context": ", 2007b), we realized that our sequential-allocation procedure is an instance of maximizing a submodular function subject to a matroid constraint (Calinescu et al., 2007). We can define a partition matroid on the disjoint unionM =M1 \u222a \u00b7 \u00b7 \u00b7 \u222aMk of k ground setsMi, one for each robot. Each setMi contains all feasible paths for robot i. The collection I \u2286 2M of all subsets P \u2208 I such that |P \u2229 Mi| \u2264 1 (i.e. each P corresponds to a collection of paths, with the constraint that we can pick at most one from each setMi) forms independent sets of the partition matroid. Hence, the problem of finding a collection of maximally informative paths is the problem of finding an independent set of a matroid maximizing a submodular function. Current work in progress by Goundan and Schulz (2008) provides general results on the performance of a sequential allocation procedure in such a setting, which can be used to prove the same sequential allocation results originally presented by Singh et al. (2007b).", "startOffset": 147, "endOffset": 1000}, {"referenceID": 6, "context": "Bourgault et al. (2002) proposed an exploration framework using an occupancy grid (OG) environment model (performing spatial decomposition of the observed environment) with an objective to maximize mutual information over the OG map.", "startOffset": 0, "endOffset": 24}, {"referenceID": 6, "context": "Bourgault et al. (2002) proposed an exploration framework using an occupancy grid (OG) environment model (performing spatial decomposition of the observed environment) with an objective to maximize mutual information over the OG map. Stachniss et al. (2005) developed a greedy algorithm for selecting the next location to visit to maximize information gain about the map.", "startOffset": 0, "endOffset": 258}, {"referenceID": 6, "context": "Bourgault et al. (2002) proposed an exploration framework using an occupancy grid (OG) environment model (performing spatial decomposition of the observed environment) with an objective to maximize mutual information over the OG map. Stachniss et al. (2005) developed a greedy algorithm for selecting the next location to visit to maximize information gain about the map. In contrast to such approaches, Sim and Roy (2005) attempted to optimize the entire trajectory, not just the next step, but their algorithm introduces some approximations without theoretical bounds.", "startOffset": 0, "endOffset": 423}, {"referenceID": 6, "context": "Bourgault et al. (2002) proposed an exploration framework using an occupancy grid (OG) environment model (performing spatial decomposition of the observed environment) with an objective to maximize mutual information over the OG map. Stachniss et al. (2005) developed a greedy algorithm for selecting the next location to visit to maximize information gain about the map. In contrast to such approaches, Sim and Roy (2005) attempted to optimize the entire trajectory, not just the next step, but their algorithm introduces some approximations without theoretical bounds. Simmons et al. (2000) proposed a distributed approach for exploration and mapping with multiple robots by minimizing the overlap in information gain amongst multiple robots.", "startOffset": 0, "endOffset": 593}, {"referenceID": 47, "context": "Roy and Earnest (2006) proposed an approach to effectively compute the trajectories for target tracking based on maximizing mutual information (evaluated using the change", "startOffset": 0, "endOffset": 23}, {"referenceID": 36, "context": "Lau et al. (2006) formulated the target tracking in indoor environments as a generalization of anNP-complete optimal searcher path (OSP) problem (Trummel &Weisinger, 1986).", "startOffset": 0, "endOffset": 18}, {"referenceID": 36, "context": "Lau et al. (2006) formulated the target tracking in indoor environments as a generalization of anNP-complete optimal searcher path (OSP) problem (Trummel &Weisinger, 1986). They sought to optimize the probability of detection within a given time horizon while accounting for the undetected target probability that is a function of previously visited locations during the search. They used several branch and bound approaches to speed up the search process. The objective of maximizing information gain subject to the budget constraints on the path cost makes eMIP a suitable candidate for performing path planning for such problems. Ryan (2008) used an approach of partitioning the search space into subgraphs for multi-robot path planning.", "startOffset": 0, "endOffset": 645}, {"referenceID": 36, "context": "Lau et al. (2006) formulated the target tracking in indoor environments as a generalization of anNP-complete optimal searcher path (OSP) problem (Trummel &Weisinger, 1986). They sought to optimize the probability of detection within a given time horizon while accounting for the undetected target probability that is a function of previously visited locations during the search. They used several branch and bound approaches to speed up the search process. The objective of maximizing information gain subject to the budget constraints on the path cost makes eMIP a suitable candidate for performing path planning for such problems. Ryan (2008) used an approach of partitioning the search space into subgraphs for multi-robot path planning. We take a conceptually similar approach, also reducing the search space by decomposing the space into regions and then performing path planning over those regions. However, we address more complex utility functions, such as quantifying the informativeness of visited locations and are not limited to specific graph structures such as stacks, halls, cliques, rings as is the case in the work of Ryan (2008). Recently, Thompson and Wettergreen (2008) used our eMIP algorithm for near-term path planning while performing autonomous exploration of surficial units at Amboy Crater in Mojave desert, California.", "startOffset": 0, "endOffset": 1147}, {"referenceID": 36, "context": "Lau et al. (2006) formulated the target tracking in indoor environments as a generalization of anNP-complete optimal searcher path (OSP) problem (Trummel &Weisinger, 1986). They sought to optimize the probability of detection within a given time horizon while accounting for the undetected target probability that is a function of previously visited locations during the search. They used several branch and bound approaches to speed up the search process. The objective of maximizing information gain subject to the budget constraints on the path cost makes eMIP a suitable candidate for performing path planning for such problems. Ryan (2008) used an approach of partitioning the search space into subgraphs for multi-robot path planning. We take a conceptually similar approach, also reducing the search space by decomposing the space into regions and then performing path planning over those regions. However, we address more complex utility functions, such as quantifying the informativeness of visited locations and are not limited to specific graph structures such as stacks, halls, cliques, rings as is the case in the work of Ryan (2008). Recently, Thompson and Wettergreen (2008) used our eMIP algorithm for near-term path planning while performing autonomous exploration of surficial units at Amboy Crater in Mojave desert, California.", "startOffset": 0, "endOffset": 1190}, {"referenceID": 53, "context": "In the case of over-subscription planning problem \u2013 wherein only a subset of goals that can be accomplished within the limited time or resources available for the planning system, the work by Smith (2004) used an orienteering heuristic to provide an ordered set of goals to be considered by the planner.", "startOffset": 192, "endOffset": 205}, {"referenceID": 8, "context": "Briel et al. (2004) proposed several heuristics for efficiently solving the over-subscription planning problem.", "startOffset": 0, "endOffset": 20}, {"referenceID": 16, "context": "Gaussian Process models for spatial phenomena had been studied extensively (Cressie, 1991).", "startOffset": 75, "endOffset": 90}, {"referenceID": 15, "context": "Gaussian Process models for spatial phenomena had been studied extensively (Cressie, 1991). Guestrin et al. (2005) proved that, in the case of phenomena governed by Gaussian Process models, selecting the placement of sensors greedily based on mutual information is near-optimal.", "startOffset": 76, "endOffset": 115}, {"referenceID": 15, "context": "Gaussian Process models for spatial phenomena had been studied extensively (Cressie, 1991). Guestrin et al. (2005) proved that, in the case of phenomena governed by Gaussian Process models, selecting the placement of sensors greedily based on mutual information is near-optimal. Krause et al. (2006) extended this work to include communication cost between sensors while optimizing the sensor placement.", "startOffset": 76, "endOffset": 300}, {"referenceID": 2, "context": "Batalin et al. (2004) showed that combining the static and mobile sensing devices, even in a simple scenario, can result in significant improvement in sensing performance.", "startOffset": 0, "endOffset": 22}, {"referenceID": 54, "context": "Somasundara et al. (2007) showed that the problem of collecting the data when the environment shows both spatial and temporal dynamics is NP-complete and provided an integer linear programming formulation for the same.", "startOffset": 0, "endOffset": 26}, {"referenceID": 40, "context": "Meliou et al. (2007) proposed a nonmyopic approach for the application of data gathering tours using an algorithm for submodular orienteering (SOP) as a black box.", "startOffset": 0, "endOffset": 21}, {"referenceID": 44, "context": "Rahimi et al. (2004) explored several policies for adaptively sampling the environment.", "startOffset": 0, "endOffset": 21}, {"referenceID": 44, "context": "Rahimi et al. (2004) explored several policies for adaptively sampling the environment. Singh et al. (2006) proposed a multiscale adaptive sampling approach with uniformly sampling the environment in the first stage followed by sampling at locations in order to minimize the mean square error the most.", "startOffset": 0, "endOffset": 108}, {"referenceID": 14, "context": "Our eSIP algorithm builds on the recursive-greedy algorithm of Chekuri and Pal (2005). eSIP preserves the approximation guarantees of recursive-greedy, while overcoming its computational intractability through spatial-decomposition and several branch and bound approaches.", "startOffset": 63, "endOffset": 86}, {"referenceID": 3, "context": "The above theorem and proof is inspired by the proof of multi-path orienteering provided by Blum et al. (2003). Lemma 3.", "startOffset": 92, "endOffset": 111}, {"referenceID": 32, "context": "This will give an approximation guarantee of Fg (Krause et al., 2008) compared to the optimal set of the same number of observations selected in this cell (and hence of the information obtained by the optimal SD-MIPP path visiting only this cell).", "startOffset": 48, "endOffset": 69}, {"referenceID": 14, "context": "The above proof is inspired by the analysis of the recursive greedy algorithm for submodular orienteering proposed by Chekuri and Pal (2005). In the case of exponential budget splits, the budget needs to be increased, albeit sub-linearly:", "startOffset": 118, "endOffset": 141}], "year": 2009, "abstractText": "The need for efficient monitoring of spatio-temporal dynamics in large environmental applications, such as the water quality monitoring in rivers and lakes, motivates the use of robotic sensors in order to achieve sufficient spatial coverage. Typically, these robots have bounded resources, such as limited battery or limited amounts of time to obtain measurements. Thus, careful coordination of their paths is required in order to maximize the amount of information collected, while respecting the resource constraints. In this paper, we present an efficient approach for near-optimally solving the NP-hard optimization problem of planning such informative paths. In particular, we first develop eSIP (efficient Single-robot Informative Path planning), an approximation algorithm for optimizing the path of a single robot. Hereby, we use a Gaussian Process to model the underlying phenomenon, and use the mutual information between the visited locations and remainder of the space to quantify the amount of information collected. We prove that the mutual information collected using paths obtained by using eSIP is close to the information obtained by an optimal solution. We then provide a general technique, sequential allocation, which can be used to extend any single robot planning algorithm, such as eSIP, for the multi-robot problem. This procedure approximately generalizes any guarantees for the single-robot problem to the multi-robot case. We extensively evaluate the effectiveness of our approach on several experiments performed in-field for two important environmental sensing applications, lake and river monitoring, and simulation experiments performed using several real world sensor network data sets.", "creator": "TeX"}}}