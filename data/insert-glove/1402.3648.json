{"id": "1402.3648", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Feb-2014", "title": "Auto Spell Suggestion for High Quality Speech Synthesis in Hindi", "abstract": "106.5 The goal of mediatheque Text - to - 11:13 Speech (palmbeachpost.com TTS) synthesis stuka in a kham particular 14.5 language is worriedly to keiren convert svartholm arbitrary serchhip input text joanneum to tarmugi intelligible non-woven and natural sounding speech. bratina However, for waz a particular 1.61 language like Hindi, which stoudenmire is a highly aureole confusing language (canaro due to yamanashi very close spellings ), lankaran it richard is not an thymine easy task to identify vade errors / shimamine mistakes excises in sandage input text rrm and an turbin incorrect text degrade the firmino quality of pantech output dano speech hence naal this paper is winklejohn a contribution 1-26 to pressplay the syntheses development of high quality speech bickley synthesis 1953-55 with 3,500,000 the involvement of earpiece Spellchecker which sjfa generates 6:05 spell suggestions warin for misspelled words harshness automatically. 7.7996 Involvement yasue of spellchecker vdqs would increase the resource-intensive efficiency 900s of ferber speech moved synthesis by korkut providing malts spell sargus suggestions for kwitny incorrect brackenbury input harunori text. Furthermore, cid we sime have provided the avegno comparative study rathenau for upper-caste evaluating omelet the tamaraws resultant hamlin effect curran on acute to neighbourliness phonetic swamiji text kik by adding valedictorian spellchecker on 60.22 to input text.", "histories": [["v1", "Sat, 15 Feb 2014 05:11:35 GMT  (680kb)", "http://arxiv.org/abs/1402.3648v1", "4 pages, 5 figures. International Journal of Computer Applications, 2014"]], "COMMENTS": "4 pages, 5 figures. International Journal of Computer Applications, 2014", "reviews": [], "SUBJECTS": "cs.CL cs.SD", "authors": ["shikha kabra", "ritika agarwal"], "accepted": false, "id": "1402.3648"}, "pdf": {"name": "1402.3648.pdf", "metadata": {"source": "META", "title": "Auto Spell Suggestion for High Quality Speech Synthesis in Hindi", "authors": ["Shikha Kabra", "Ritika Agarwal"], "emails": [], "sections": [{"heading": null, "text": "language is to convert arbitrary input text to intelligible and natural sounding speech. However, for a particular language like Hindi, which is a highly confusing language (due to very close spellings), it is not an easy task to identify errors/mistakes in input text and an incorrect text degrade the quality of output speech hence this paper is a contribution to the development of high quality speech synthesis with the involvement of Spellchecker which generates spell suggestions for misspelled words automatically. Involvement of spellchecker would increase the efficiency of speech synthesis by providing spell suggestions for incorrect input text. Furthermore, we have provided the comparative study for evaluating the resultant effect on to phonetic text by adding spellchecker on to input text.\nKeywords Grapheme; Phoneme; Speech Synthesis; Spellchecker."}, {"heading": "1. INTRODUCTION", "text": "Synthesis system for a particular natural language is the technology for translating or converting a given typed or stored text input into its equivalent spoken waveform format. It is used to translate written information into aural information where it is more convenient especially for mobile applications such as voice enabled mail and messages and also used to assist vision impaired persons so that content of display screen automatically read aloud to a blind user.\nPeople in India commonly use Hindi language for the communication since it is the most popular and commonly used language of all other local Indian languages so it requires representation over Web as an expressive language. Unicode has enabled to read and write over the Web but since it is a highly confusing language due to presence of close spellings\n(like ) Hindi text processing is a major issue which\nshould be given considerable attention. This paper draws attention toward pre-processing of input text by adding Hindi spellchecker on to current TTS system so that text processing could become easier and accurate. Quality of speech synthesis is highly dependent on to quality of input text[1] hence to increase the quality of input text , pre-processing is done by adding spellchecker on to the existing system. The entire process of speech synthesis is divided into three broad parts (figure 1).\nFirst is Text Pre-processing which include correction of manually entered or web extracted text by using Intelligent spellchecker that corrects mistakes/errors with high degree of accuracy by predicting list of most appropriate word to improve written text. After this, improved written text or corrected text is further passed to Text Processing part where it is processed by module (such as normalization, grapheme to phoneme conversion) and converted to phonetic text. Further Phonetic text is passed to Synthesis part where it is converted into its equivalent spoken waveform called output speech. Hence the implementation of above process leads to provide accurate and high quality output speech.\nThe layout of this paper is as follows. In first section we introduced about the need of spellchecker for a Hindi TTS system. In second section we elaborate the methodology used to convert a written text into speech waveform [2]. In section third we provide comparative study to show the effect on phonetic text by adding spellchecker on to input text. In last section we conclude the paper."}, {"heading": "2. NEED OF HINDI SPELLCHECKER", "text": "Hindi is the most common and popular language of all other Indian languages hence it is more beneficial for Indians to develop TTS system in Hindi language. To develop a Hindi TTS, it is required to enter text in Hindi language which is a highly confusing language, people belongs to different literacy level or having less knowledge of Hindi may not enter the Hindi text exactly correct or may not easily identify errors [3]. Hence Spellchecker is a solution for making input text correct. It is a program that identifies and corrects misspelled word in given input text. Various sources of Hindi input text are:\n Manually entered text\n Online Hindi newspaper, e-mail\n Online Hindi books and journals\n Hindi Websites\nWith the reference of above sources, text have to be manually entered or extracted from web and may have error in it .Data having error or incorrect data is further processed and used for synthesis which degrade the quality of output speech Types of spelling error could occur due to lack of Hindi spelling knowledge or while typing in Hindi language are [4] real word and non word error. Real word error occurs when misspelled word is also present in language model (collection of words in a particular language) but the word is not fit in context of the sentence and these errors are hard to handle for example: \u0935\u0939 \u0909\u0938 \u0914\u0930 \u0939 (incorrect) \u0935\u0939 \u0909\u0938 \u0913\u0930 \u0939 (correct) \u0939 \u0930 \u0939 (incorrect) \u0939 \u0930 \u0939 (correct)\nNon word error occurs due to wrong key press or lack of spelling knowledge of correct word and mistake arise when word is not found in language model. For example:\n\u0930 (incorrect) \u0930 (correct) (incorrect) (correct) To remove such errors Spellchecker is a solution which enhances the quality of text to be used for speech synthesis."}, {"heading": "3. PROPOSED APPROACH", "text": "In this section we have introduced the approach we have followed for developing high quality speech. The entire process of synthesizing speech is divided into three broad parts (figure 2):\n1) Text Pre-processing\n2) Text Processing\n3) Synthesis\nThe first task of any text-to-speech (TTS) system is the PreProcessing of text which includes input text (entered manually or scanned through any online source) and spellchecker (a program corrects misspelled words). Next one is the text processing which includes Text Standardization and Normalization and Grapheme to Phoneme Conversion and the last one is Synthesis which includes waveform generation."}, {"heading": "3.1 Text Input", "text": "Text that a user want to convert into speech signal called text input .For Hindi TTS ,text input should be in Hindi which can be entered manually or extracted from online source but these sources may have error in it. For example:\n400 \u0930 \u0935 . . Above sentence is taken from online Hindi newspaper where\nand are misspelled words and processing of\nmisspelled text leads to provide incorrect phonetic information which decreases the naturality of synthetic speech hence to overcome this problem spellchecker is a flexible solution."}, {"heading": "3.2 Spellchecker", "text": "A Spellchecker is a program to locate misspelled word and notify user about the misspellings. Depending on the spellchecker, the feature may either auto correct the word or allow the user to select from list of predicted suggestions of misspelled word. Approach we have used for implementing spellchecker is Dictionary based where we compared every word with list of thousands of properly spelled words to determine most approximated words of misspelled word. For example:\nIn above example, Hindi text input has some incorrect words\nlike and and can be corrected by using Dictionary based spellchecker. Now corrected text is further processed and synthesised which results in high quality speech."}, {"heading": "3.3 Text Normalization and Standardization", "text": "English is world -wide accepted language hence it is preferred to convert Hindi language into standard language like English using WX notation [5].\nProblem occurs during standardizing [6] abbreviations, symbols, numbers etc. in Hindi hence to overcome this problem text normalization is a solution which typically involves identification of non-standard words like number abbreviation, symbols and expansion of non-standard words into standard representation without losing its contextual meaning as: Text input\nHindi Spellchecker\nText input 400 \u0924\u0915 \u0924 \u0915\n\u0915 . .\n400 \u0924\u0915 \u0924\n\u0915 \u0915 . .\n400 cArso\n. . Uwar praxeS Since abbreviations and symbols are finite in number, [7] it is easy to normalize them by preparing an exception lexicon but it is not the same case with numbers. It is not feasible to prepare a lexicon for numbers because numbers have no limit and pronounced differently in different context as:\n\u0938 1990- san UnIso naBe (year) 1990 - Ek HazAr no so naBe kIlo (weight) Hence this problem can be handled by using rule-based system."}, {"heading": "3.4 Grapheme to Phoneme Conversion (G2P Conversion)", "text": "Grapheme is smallest unit in script similarly phoneme is smallest unit in speech. In [8] Hindi, words are not pronounced in the same way as it is scripted so to provide naturalness in speech it is required to convert grapheme into phoneme to generate phonetic information. But the greatest challenge for high quality speech is misalignment of phonemes at boundaries as:\n\u0906 \u0915 \u0924\nApakA pawazga\nApkA pawazg\nSound of varies when place of changes. In word \u092a , occurs in between ,so pronounced as ( p ) while in \u092a occurs at beginning so pronounced as \u0930 ( pa)\nBasically, this module provides natural pronunciation for a given text which is achieved mainly by manual, rule based or statistical method. Manual approach is most convenient approach but for a lively language like Hindi gets richer day by day , it is impossible to develop a pronunciation dictionary for individual word present. In most of cases, there is one to one correspondence between letter and sound, hence it is easier and more accurate to construct rule based generator rather than statistical generator [9] as: During G2P conversion if grapheme ends with a sound, like (ta, ma, na...) than (a) gets eliminated from end of grapheme to convert into phoneme. For example:\nText Standardization and\nNormalization\nHindi Spellchecker 400 \u0924\u0915 \u0924\n\u0915 \u0915 . .\ncArso yUnita waka bijalI\niswemAla karane vAle logo\nko Uwara praxeS mez\nPayaxA\nText Standardization\nand Normalization\nGrapheme to\nPhoneme conversion\ncArso yUnita waka bijalI iswemAla karane vAle logo ko Uwar -praxeS mez PayaxA\ncArso yUnit wak bijlI iswemAl\nkarne vAle logo ko Uwar-praxeS\nmez PayaxA\n34"}, {"heading": "3.5 Waveform Generation", "text": "Last phase of speech synthesis process is to generate a speech waveform of Phonetic text. We have generated waveform by using open source [10] MARY TTS tool which follows HMM based approach.HMM based approach used for several applications like online fraud detection[11][12],text to speech systems etc. This approach helps to generate natural sounding high quality speech. However, for constructing human-like talking machines, speech synthesis systems are required to have an ability to generate speech with arbitrary speaker's voice characteristics, various speaking styles including native and non-native speaking styles in different languages, varying emphasis and focus, and/or emotional expressions."}, {"heading": "4. IMPLEMENTATION AND PERFORMANCE EVALUATION", "text": "Based on the above approach, Correctness of Speech waveform directly depends onto correctness of Phonetic text hence we have shown comparison between correctness of Phonetic text with/without applying spellchecker onto input text.\n\u0935 AnwakavAxI AnwakvAxI (Antakwadi)\n\u0935 AwankavAxI AwankvAxI (Atankwadi)\nFrom the above observation we analysed that \u0935 \u0935 are so similar words but dot (.) get misplaced which changes the whole pronunciation from Atankwadi to Antakwadi leads to low quality or incorrect speech.\nFigure 4 show that the text to be converted to speech is incorrect and shown by using red underline which leads to wrong phoneme conversion. Figure 5 shows the same text corrected by using spellchecker leads to corrected phoneme. Hence spellchecker is a way to make Phonetic information correct."}, {"heading": "5. CONCLUSION", "text": "In this paper, we presented the development of existing TTS system by adding spellchecker module to it for Hindi language. Since Hindi is a morphologically rich language hence there is a high probability of making mistakes while writing \u201cMantras\u201d which leads to degrade the quality of speech hence to overcome this problem, Spellchecker is a solution. However, adding spellchecker corrects most of the errored text which leads to increase accuracy of Phonetic text therefore results in high quality/correct speech waveform."}, {"heading": "6. REFERENCES", "text": "[1] Reichel, Uwe D., and Hartmut R. Pfitzinger. \"Text\npreprocessing for speech synthesis.\" (2006).\n[2] Sproat, Richard. \"Multilingual text analysis for text-tospeech synthesis.\"Natural Language Engineering 2.04\n(1996): 369-380.\n[3] Neha Gupta, Pratistha Mathur \u201cSpell Checking Techniques in NLP: A Survey\u201d International Journal of\nAdvanced Research in Computer Science and Software Engineering, 2012\n[4] Sharma, Amit, and Pulkit Jain. \"Hindi Spell Checker.\" (2013).\n[5] DATA SHEET FOR WX-NOTATION, http://caltslab.uohyd.ernet.in/wx-notation-pdf/Gujarati-\nwx-notation.pdf\n[6] A. Chauhan, Vineet Chauhan, Surendra P. Singh, Ajay K. Tomar, Himanshu Chauhan\u201d A Text to Speech\nSystem for Hindi using English Language\u201d IJCST Vol. 2, Issue 3, September 2011.\n[7] Macchi, Marian. \"Issues in text-to-speech synthesis.\" Intelligence and Systems, 1998. Proceedings., IEEE\nInternational Joint Symposia on. IEEE, 1998.\n[8] S. S. Agrawal, \u201cSynthesizing Hindi speech using Klsyn and Hlsyn for natural sounding,\u201d in Workshop on\nSpoken Language Processing, TIFR, Mumbai, 2003.\n[9] Murthy, Hema A., et al. \"Building Unit Selection Speech Synthesis in Indian Languages: An Initiative by an\nIndian Consortium.\" Proceedings of COCOSDA, Kathmandu, Nepal (2010).\n[10] Schr\u00f6der, Marc, and J\u00fcrgen Trouvain. \"The German textto-speech synthesis system MARY: A tool for research,\ndevelopment and teaching.\" International Journal of Speech Technology 6.4 (2003): 365-377.\n[11] Ankit Mundra and Nitin Rakesh. \"Online Hybrid Model for Online Fraud Prevention and Detection.\" Intelligent\nComputing, Networking, and Informatics. Springer India, 2014. 805-815.\n[12] Ankit Mundra & Rakesh, N. (2014, January). Online Hybrid Model for Fraud Prevention (OHM-P):\nImplementation and Performance Evaluation. In ICT and Critical Infrastructure: Proceedings of the 48th Annual Convention of Computer Society of India-Vol II (pp. 585-592). Springer International Publishing.\nIJCATM : www.ijcaonline.org"}], "references": [{"title": "Text preprocessing for speech synthesis.", "author": ["Reichel", "Uwe D", "Hartmut R. Pfitzinger"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2006}, {"title": "Multilingual text analysis for text-tospeech synthesis.\"Natural Language Engineering", "author": ["Sproat", "Richard"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1996}, {"title": "Spell Checking Techniques in NLP: A Survey", "author": ["Neha Gupta", "Pratistha Mathur"], "venue": "International Journal of Advanced Research in Computer Science and Software Engineering,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "A Text to Speech System for Hindi using English Language", "author": ["A. Chauhan", "Vineet Chauhan", "Surendra P. Singh", "Ajay K. Tomar", "Himanshu Chauhan"], "venue": "IJCST Vol. 2, Issue", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2011}, {"title": "Issues in text-to-speech synthesis.", "author": ["Macchi", "Marian"], "venue": "Intelligence and Systems,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1998}, {"title": "Synthesizing Hindi speech using Klsyn and Hlsyn for natural sounding", "author": ["S.S. Agrawal"], "venue": "Workshop on Spoken Language Processing, TIFR, Mumbai, 2003.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2003}, {"title": "Building Unit Selection Speech Synthesis in Indian Languages: An Initiative by an Indian Consortium.", "author": ["Murthy", "Hema A"], "venue": "Proceedings of COCOSDA,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2010}, {"title": "The German textto-speech synthesis system MARY: A tool for research, development and teaching.", "author": ["Schr\u00f6der", "Marc", "J\u00fcrgen Trouvain"], "venue": "International Journal of Speech Technology", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2003}, {"title": "Online Hybrid Model for Online Fraud Prevention and Detection.\" Intelligent Computing, Networking, and Informatics", "author": ["Ankit Mundra", "Nitin Rakesh"], "venue": "Springer India,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "Online Hybrid Model for Fraud Prevention (OHM-P): Implementation and Performance Evaluation. In ICT and Critical Infrastructure: Proceedings of the 48th Annual Convention of Computer Society of India-Vol II (pp. 585-592)", "author": ["Ankit Mundra", "Rakesh", "January"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "Quality of speech synthesis is highly dependent on to quality of input text[1] hence to increase the quality of input text , pre-processing is done by adding spellchecker on to the existing system.", "startOffset": 75, "endOffset": 78}, {"referenceID": 1, "context": "In second section we elaborate the methodology used to convert a written text into speech waveform [2].", "startOffset": 99, "endOffset": 102}, {"referenceID": 2, "context": "To develop a Hindi TTS, it is required to enter text in Hindi language which is a highly confusing language, people belongs to different literacy level or having less knowledge of Hindi may not enter the Hindi text exactly correct or may not easily identify errors [3].", "startOffset": 265, "endOffset": 268}, {"referenceID": 3, "context": "Problem occurs during standardizing [6] abbreviations, symbols, numbers etc.", "startOffset": 36, "endOffset": 39}, {"referenceID": 4, "context": "Since abbreviations and symbols are finite in number, [7] it is easy to normalize them by preparing an exception lexicon but it is not the same case with numbers.", "startOffset": 54, "endOffset": 57}, {"referenceID": 5, "context": "In [8] Hindi, words are not pronounced in the same way as it is scripted so to provide naturalness in speech it is required to convert grapheme into phoneme to generate phonetic information.", "startOffset": 3, "endOffset": 6}, {"referenceID": 6, "context": "In most of cases, there is one to one correspondence between letter and sound, hence it is easier and more accurate to construct rule based generator rather than statistical generator [9] as: During G2P conversion if grapheme ends with a sound, like (ta, ma, na.", "startOffset": 184, "endOffset": 187}, {"referenceID": 7, "context": "We have generated waveform by using open source [10] MARY TTS tool which follows HMM based approach.", "startOffset": 48, "endOffset": 52}, {"referenceID": 8, "context": "HMM based approach used for several applications like online fraud detection[11][12],text to speech systems etc.", "startOffset": 76, "endOffset": 80}, {"referenceID": 9, "context": "HMM based approach used for several applications like online fraud detection[11][12],text to speech systems etc.", "startOffset": 80, "endOffset": 84}], "year": 2014, "abstractText": "The goal of Text-to-Speech (TTS) synthesis in a particular language is to convert arbitrary input text to intelligible and natural sounding speech. However, for a particular language like Hindi, which is a highly confusing language (due to very close spellings), it is not an easy task to identify errors/mistakes in input text and an incorrect text degrade the quality of output speech hence this paper is a contribution to the development of high quality speech synthesis with the involvement of Spellchecker which generates spell suggestions for misspelled words automatically. Involvement of spellchecker would increase the efficiency of speech synthesis by providing spell suggestions for incorrect input text. Furthermore, we have provided the comparative study for evaluating the resultant effect on to phonetic text by adding spellchecker on to input text.", "creator": "Microsoft\u00ae Office Word 2007"}}}