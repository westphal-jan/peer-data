{"id": "1402.5436", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Feb-2014", "title": "Characterizing and computing stable models of logic programs: The non-stratified case", "abstract": "Stable rire Logic Programming (juri SLP) is shenon an kytril emergent, alternative style of khaimah logic pasic programming: each savi\u0107evi\u0107 solution biggar to a evangelization problem jadot is represented 294 by 10.44 a fales stable cheb model lugos of madhusudan a deductive database / gaganjeet function - speyer free logic ieong program powderpuff encoding the problem 76.42 itself. Several siriusxm implementations now 1113 exist for scatchard stable orleanians logic topsoil programming, subantarctic and their performance deglamorized is rapidly bco improving. 10.9 To scarinci make tubay SLP generally applicable, 18-count it herczeg should pagina be possible non-compliant to joseph-marie check euro64 for worldpride consistency (somatic i. sanzio e. , existence t-bones of formar stable blotchy models) measly of the mannon input falcao program spatlese before \u00e1stor attempting endtime to stommelen answer tschumi queries. In the shellal literature, only 60-run rather strong sufficient malinger conditions 3,560 have cooling been 1940-42 proposed for trucklike consistency, e. bidwill g. , 84.21 stratification. This deprive paper extends thondaman these ghanim results in several saloma directions. 120.24 First, janatantrik the syntactic evaluators features quicks of programs, viz. cyclic \u215c negative touched dependencies, terschelling affecting 6.54 the sudarsan existence of mottram stable models are characterized, and their http://www.fema.gov relevance is immobilien discussed. reform Next, a grammy-award new 114.7 graph criticism representation prosection of dauntlesses logic otro programs, the Extended onkelz Dependency Graph (EDG ), blowpipe is cee-lo introduced, buxhoeveden which conveys enough self-loathing information llamar for reasoning about kishk stable models (tunng while galerija the traditional Dependency leeds-based Graph does sicknesses not ). zelina Finally, jamalabad we show kdam that unmin the insouciant problem of orka the creepin existence of ncn stable mimas models can be reformulated in cut terms molenda of coloring of thermal the arsic EDG.", "histories": [["v1", "Fri, 21 Feb 2014 22:17:39 GMT  (28kb)", "http://arxiv.org/abs/1402.5436v1", "Proceedings of the Conference on Information Technology. Bhubaneswar, India, 1999.this https URL"]], "COMMENTS": "Proceedings of the Conference on Information Technology. Bhubaneswar, India, 1999.this https URL", "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["gianpaolo brignoli", "stefania costantini", "ottavio d'antona", "alessandro provetti"], "accepted": false, "id": "1402.5436"}, "pdf": {"name": "1402.5436.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["S. Costantini"], "emails": ["brigno@ntboss.tesi.dsi.unimi.it", "stefcost@univaq.it", "dantona@dsi.unimi.it", "provetti@dsi.unimi.it"], "sections": [{"heading": null, "text": "ar X\niv :1\n40 2.\n54 36\nv1 [\ncs .A\nI] 2\n1 Fe\nb 20\n14\nCharacterizing and computing stable models of logic programs: the non\u2013stratified case\nG. Brignoli Universita\u0300 di Milano\nDip. di Scienze dell\u2019Informazione I-20135 Milano, Italy\nbrigno@ntboss.tesi.dsi.unimi.it\nS. Costantini Universita\u0300 di L\u2019Aquila\nDip. di Matematica Pura e Applicata I-67100 L\u2019Aquila, Italy\nstefcost@univaq.it\nO. D\u2019Antona and A. Provetti Universita\u0300 di Milano\nDip. di Scienze dell\u2019Informazione I-20135 Milano, Italy\n{dantona,provetti}@dsi.unimi.it\nStable Logic Programming (SLP) is an emergent, alternative style of logic programming: each solution to a problem is represented by a stable model of a deductive database/function\u2013free logic program encoding the problem itself. Several implementations now exist for stable logic programming, and their performance is rapidly improving. To make SLP generally applicable, it should be possible to check for consistency (i.e., existence of stable models) of the input program before attempting to answer queries. In the literature, only rather strong sufficient conditions have been proposed for consistency, e.g., stratification. This paper extends these results in several directions. First, the syntactic features of programs, viz. cyclic negative dependencies, affecting the existence of stable models are characterized, and their relevance is discussed. Next, a new graph representation of logic programs, the Extended Dependency Graph (EDG), is introduced, which conveys enough information for reasoning about stable models (while the traditional Dependency Graph does not). Finally, we show that the problem of the existence of stable models can be reformulated in terms of coloring of the EDG.\nBackground definitions The stable model semantics (Gelfond & Lifschitz 1988) is a view of logic programs as sets of inference rules (more precisely, default inference rules), where a stable model is a set of atoms closed under the program itself. Alternatively, one can see a program as a set of constraints on the solution of a problem, where each stable model represents a solution compatible with the constraints expressed by the program. Consider the simple program {q \u2190 not p, not c. p \u2190 not q. p \u2190 c.}. For instance, the first rule is read as \u201cassuming that both p and c are false, we can conclude that q is true.\u201d This program has two stable models. In the first, q is true while p and c are false; in the second, p is true while q and c are false.\nUnlike with other semantics, a program may have no stable model, i.e., be contradictory, like the following: {a \u2190 not b. b \u2190 not c. c \u2190 not a.}, where no set of atoms is closed under the rules. It is important to make sure that a program admits stable models before attempting to perform deduction. Inconsistency may arise, realistically, when programs are combined: if they share atoms, a subprogram like that above may surface in the resulting program.\nIn this paper we consider, essentially, the language DATALOG\u00ac for deductive databases, which is more restricted than traditional logic programming. As discussed in (Marek & Truszczyn\u0301ski 1999), this restriction is not a limitation at this stage.\nA rule (clause) \u03c1 is defined as usual, and can be seen as composed of a conclusion head(\u03c1), and a set of conditions body(\u03c1), the latter divided into positive conditions pos(\u03c1) and negative conditions neg(\u03c1).\nFor syntax and semantics of logic programs with negation (general, or normal logic programs), and for the definition of Dependency Graph (DG), the reader may refer for instance to (Apt & Bol 1994) and to the references therein. For the sake of clarity however, let us report the definition of stable models. We start from the subclass of positive programs, i.e. those where, for every rule \u03c1, neg(\u03c1) = \u2205.\nDefinition 1 (Stable model of positive programs) The stable model a(\u03a0) of a positive program \u03a0 is the smallest subset of IB\u03a0 such that for any rule a \u2190 a1, . . . am in \u03a0: a1, . . . , am \u2208 a(\u03a0) \u21d2 a \u2208 a(\u03a0).\nPositive programs are unambiguous, in that they have a unique stable model, which coincides with that obtained applying other semantics.\nDefinition 2 (Stable models of programs) Let \u03a0 be a logic program. For any set S of atoms, let \u03a0S be a program obtained from \u03a0 by deleting (i) each rule that has a formula \u2018not A\u2019 in its body with A \u2208 S, and (ii) all formulae of the form \u2018not A\u2019 in the bodies of the remaining rules. \u03a0S does not contain \u201cnot,\u201d so that its stable model is already defined. If this stable model coincides with S, then we say that S is a stable model of \u03a0. In other words, the stable models of \u03a0 are characterized by the equation: S = a(\u03a0S).\nPrograms which have a unique stable model are called categorical. In the literature, the main (sufficient) condition to ensure the existence of stable models is call\u2013consistency, which is summarized as follows: no atom depends on itself via an odd number of negative conditions.\nProposition 1 (Dung 1992) A [normal] logic program has a stable model if it is call\u2013consistent.\nMore results along the lines of Proposition 1 are found in (Dung 1992). However, this condition is quite restrictive, as there are programs with odd cycles (in the sense described above) that have one or more stable models. See Example 1 below.\nFor the sake of simplicity, in this paper we consider kernel programs, that are general logic programs where: (i) there are no positive conditions, i.e. for every clause \u03c1, pos(\u03c1) = \u2205; (ii) every atom which is the head of a rule must also appear in the body of some rule (possibly the same one).\nFrom any program \u03a0, a kernel program ker(\u03a0) can be obtained, which is equivalent to \u03a0 as far as characterizing stable models.\nThe relationship between cycles and stable models\nAs discussed above, we are interested in programs that are not stratified (unstratified programs), and do not satisfy callconsistency. We will speak of an even (resp. odd) cycle referring to a even (resp. odd) number of rules organized like {a \u2190 not b. b \u2190 not a.} (resp. {c \u2190 not e. e \u2190 not f. f \u2190 not c.}). This Section is devoted to the analysis of the type and number of cycles appearing in a program, and their connections, i.e, roughly, rules involving atoms that appear in different cycles, which we call handles. We argue that the form of cycles and connections is the key factor affecting the existence \u2013and the number\u2013 of stable models. In fact, the dependency graph makes neither the cycles, nor the connections explicit.\nExample 1 Consider the following programs, \u03a01, \u03a02 and \u03a03:\np \u2190 not p, not e. p \u2190 not p. p \u2190 not p, not e. a \u2190 not b. p \u2190 not e. a \u2190 not b. b \u2190 not a. a \u2190 not b. b \u2190 not a. e \u2190 not f. b \u2190 not a. e \u2190 not f. f \u2190 not h. e \u2190 not f. f \u2190 not h. h \u2190 not e. f \u2190 not h. h \u2190 not e, not a. h \u2190 not a. h \u2190 not e, not a.\nIt is easy to see that the dependency graphs of the three programs in Example 1 coincide. However, \u03a01 has the stable model {b, h, e} while instead \u03a02 has the stable model {a, f, p} and \u03a03 has no stable models at all. Why do they have such a diverse semantics? The reason relies in the different decomposition of the three programs into cycles. The programs above are divided into cycles as follows, where OC and EC denote odd and even cycle, respectively, and literals appearing either in square brackets or in braces correspond to different kinds of handles. Consider the following partitions of \u03a01 and \u03a02, respectively:\nOC1 : { p \u2190 not p, [not e]. OC1 : { p \u2190 not p.\nEC1 :\n{\na \u2190 not b. b \u2190 not a. H2 : { p \u2190 {not e.}\nOC2 :\n{\ne \u2190 not f. f \u2190 not h. h \u2190 not e.\nEC1 :\n{\na \u2190 not b. b \u2190 not a.\nH1 : { h \u2190 {not a}. OC2 :\n{\ne \u2190 not f. f \u2190 not h. h \u2190 not e, [not a].\nThe literals in braces are called OR handles of the cycle. Consider program \u03a01. Literal not a in H1 is an OR handle for OC2. Now, consider a putative stable model S; if a 6\u2208 S, we can say that \u201chandle H1 is true.\u201d Then, atom g is forced to be in S and, consequently, OC2 has, w.r.t. S, the stable model {g, e}. Literal not e, instead, is an AND handle (indicated in square brackets) of the odd cycle OC1: if it is false (i.e., e \u2208 S), it forces p to be false, and OC1 \u201chas the empty model,\u201d and p 6\u2208 S.\nSimilar considerations can be made on \u03a02, even tough it has a different structure: literal not a in this case is an AND handle to OC2 (while in \u03a01 it is an OR handle, instead); if not a is true then the odd cycle OC2 is contradictory, and determines the inconsistency of the whole program. If, on the other hand, not a is false, then g is forced to be false, and consequently OC2 has the stable model {f}. This means moreover that the OR handle not e of OC1 is true, and thus p is true: therefore the contradiction p \u2190 not p, which could determine the inconsistency of the whole program, is made harmless. Finally, the reader can easily check that program \u03a03 has the odd cycle OC2 unconstrained (no handles); thus, \u03a03 has no stable models. A formal assessment of cycles will be part of the forthcoming extended version of this paper.\nAt this point, it is however important to notice that one rule may belong to several cycles at once.\nExample 2 Let \u03a04 :\np \u2190 not p, not q. a \u2190 not b. q \u2190 not q, not p. b \u2190 not a. q \u2190 not v. z \u2190 not z, not k. v \u2190 not w. k \u2190 not l. w \u2190 not a. l \u2190 not k.\nIn \u03a04, the following cycles are found: C1 = {p \u2190 not p, not q.} This is an odd cycle (p depends on itself). C2 = {q \u2190 not q, not p.} This is an odd cycle (q depends on itself). Moreover, the former two rules together form also an even cycle, where p depends on q and vice versa, i.e.: C3 = {q \u2190 not p, not q. p \u2190 not q, not p.} Now,"}, {"heading": "C4 = {a \u2190 not b. b \u2190 not a}", "text": "is an even cycle, while C5 = {z \u2190 not z, not k.} is an odd cycle (z depends on itself). Finally, C6 = {k \u2190 not l. l \u2190 not k.} is an even cycle, k depends on l and vice versa. There are clauses, namely q \u2190 not v., v \u2190 not w., and w \u2190 not a., which do not belong to any cycle. Notice however that they\ncan be seen as forming a chain connecting cycles. In fact, since the fist atom in the chain is q, which belongs to cycles C2 and C3, in a way this chain forms two bridges: one between C2 and C4, a the other between C3 and C4.\nIn Example 2 above, clause q \u2190 not v. is called an auxiliary rule of cycles C2 and C3, since its conclusion q is an atom belonging to these cycles. As mentioned above, auxiliary rules can belong to a bridge connecting different cycles. For the sake of simplicity, we can assume that all bridges have unitary length, i.e. that all bridges reduce to an auxiliary rule. In fact, what is important is which cycle is connected to which, while the intermediate steps of the chain do not affect the existence and number of stable models.\nIn the rest of the paper, we will say that a cycle C is constrained if it has an handle. Then, a cycle with no handle is called unconstrained.\nFrom cycles to stable models In order to reason about the existence of the stable models of \u03a0, it is useful to reason about the existence of the stable models of its composing cycles.\nDefinition 3 An extended cycle EC is a set of rules composed of one cycle C together with all its auxiliary clauses.\nProposition 2 A program \u03a0 has a unique decomposition into extended cycles {EC1, . . . , ECr}, r \u2265 1.\nDefinition 4 Let C be an extended cycle, and let HC be the set of all the atoms occurring in some of the handles of C. Let I \u2208 2HC . A completed extended cycle CC is a set of rules composed of one extended cycle C, where atoms in I are added as unit clauses.\nNotice that adding to EC some of the atoms of HC (which are atoms occurring in the handles of C) corresponds to making an hypothesis about truth/falsity of the handles of C. For any extended cycle EC, there are 2HC corresponding completed cycles, each one corresponding to a different hypothesis on the handles. Correspondingly, there are several ways of decomposing \u03a0 into completed cycles {CC1, . . . , CCr}, r \u2265 1. What we intend to show is the direct relation between the stable models of the completed extended cycles and the stable models of the overall program. Indeed, a completed cycle, taken as a program per se, may or may not have stable models.\nTheorem 1 A program \u03a0 with decomposition into cycles {C1, . . . , Cr} has stable models only if there exists a set of completed extended cycles {CC1, . . . , CCr} of \u03a0 such that every CCi, i \u2264 r, has a stable model.\nFor any decomposition of \u03a0 into completed extended cycles, we are interested only in those sets {S1, . . . , Sr} of stable models of, respectively, {CC1, . . . , CCr} which agree on shared atoms. In other words, a consistent set of partial stable models contains one stable model for each of the extended cycles of the decomposition, and there are no Si, Sj assigning opposite truth values to some atom.\nTheorem 2 An interpretation I of \u03a0 is a stable model if and only if I = {S1 \u222a . . . \u222a Sr} where {S1, . . . , Sr} is a consistent set of stable models for a decomposition {CC1, . . . , CCr} of \u03a0 into completed extended cycles.\nThen, from the stable models of the composing cycles, we are able to obtain the stable models of the program. Correspondingly, if we study the conditions for the existence of stable models of the (extended) cycles, we can find conditions for the existence of stable models of \u03a0.\nIt is easy to see that whenever a cycle C\u03b1 is constrained, then there exists a corresponding completed, extended cycle CC\u03b1 which is a locally stratified program; thus, CC\u03b1 has a unique stable model, which also coincide with the Wellfounded model.\nAssume instead that \u03a0 contains an unconstrained cycle C. In this case, the unique completed extended cycle associated to C is C itself (trivial completed extended cycle). If C is even, then it has the two stable models:\nM1C = {ai : i \u2264 n, i = 2k + 1} M2C = {aj : j \u2264 n, j = 2k}\nVice versa, if C is odd there are no stable models. In conclusion, we can state the following propositions.\nProposition 3 An unconstrained even cycle always has a corresponding (trivial) completed extended cycle with stable models.\nProposition 4 An unconstrained odd cycle has no corresponding completed extended cycles with a stable model.\nThese considerations allow us to formulate some useful necessary and sufficient conditions for the existence of stable models.\nIn our framework, for instance, it becomes easy to reformulate the result in (Dung 1992) saying that every callconsistent program has stable models. Moreover, it is also easy to establish the following.\nProposition 5 A program\u03a0 has a stable model only if every odd composing cycle C is constrained.\nThere are situations however, where the odd cycles are constrained, but still no stable model exists. This happens whenever all possible decompositions of \u03a0 lead to sets of partial stable models which are not consistent. I.e., there are cycles which require opposite truth values of some atom, in order to have stable models, e.g.\np \u2190 not p, not a. q \u2190 not q. q \u2190 not a.\nIt is possible to identify sufficient conditions for the existence of stable models, based on ruling out these situations constructively. This is discussed below as well as in our forthcoming work."}, {"heading": "A new graph representation", "text": "In order to reason more directly and more efficiently about cycles and handles, we introduce a new graph representation of programs, since the usual DG is not adequate to this aim. On this graph, we should be able of: detecting by means of efficient algorithms the syntactic features of programs w.r.t. the classification sketched above; reasoning about the existence and the number of stable models; computing them.\nThis new graph is similar to the DG, except it is more accurate for negative dependencies, and thus has been called EDG (Extended Dependency Graph).\nThe definition is based upon distinguishing among rules defining the same atom, i.e, having the same head. To establish this distinction, we assign to each head an upper index, starting from 0, e.g., {a \u2190 c, not b. a \u2190 not d.} becomes {a0 \u2190 c0, not b0. a1 \u2190 not d0.}. However, for the sake of clarity, we write ai instead of a (0) i . The main idea underlying the next definition is to create, for any atom a, as many vertices in the graph as the rules with head a (labeled a, a1, a2 etc.).\nDefinition 5 (Extended dependency graph) (EDG) For a logic program \u03a0, its associated Extended Dependency Graph EDG(\u03a0) is the directed finite labeled graph \u3008V,E, {+,\u2212}\u3009 defined below. The main idea underlying the definition of EDG is that of creating, for any atom a, as many vertices in the graph as the rules with head a (labeled a, a1, a2 etc.).\nV:1 For each rule in \u03a0 there is a vertex a(k)i , where ai is the name of the head and k is the index of the rule in the definition of ai, V.2: for each atom u never appearing in a head, there is a vertex simply labeled u;\nE.1: for each c(l)j \u2208 V , there is a positive edge\n\u3008c (l) j , a (k) i ,+\u3009, if and only if cj appears as a positive condition in the k-th rule defining ai, and E.2: for each c(l)j \u2208 V , there is a negative edge\n\u3008c (l) j , a (k) i ,\u2212\u3009, if and only if cj appears as a negative condition in the k-th rule defining ai.\nThe definition of EDG extends that of DG in the sense that for programs where atoms are defined by at most one rule the two coincide. Consider in Figure 1 the EDGs of the programs in Example 1. As all conditions in \u03a01, \u03a02 and \u03a03 are negative, for the sake of simplicity, the \u2018-\u2019 labels are omitted from edges.\nThe main idea underlying the definition of EDG is that of creating, for any atom a, as many vertices in the graph as the rules with head a (labeled a, a1, a2 etc.). For instance, in EDG(\u03a01) (center of Figure 1) arc \u3008h, f,\u2212\u3009 represents rule {f \u2190 not h.}. On the graph, we clearly see the cycles, and\nalso the handles. In fact, rule {f \u2190 not h.} must be represented by the two arcs \u3008h, f,\u2212\u3009 and \u3008h\u2032, f,\u2212\u3009 since truth of h may depend on any of its defining rules; the second one is auxiliary to the cycle, and corresponds to an OR handle. Therefore, the cycle has an OR handle if and only if there is an incoming arc originated in a duplication of one of the atoms of the cycle. In this case, the arc \u3008h\u2032, f,\u2212\u3009 represents the OR handle of OC2. In the same graph, arc \u3008e, p,\u2212\u3009 represents instead the AND handle of OC1. Therefore, a cycle has an AND handle if and only if there exists an incoming arc into that cycle in the EDG, originated in (any duplication of) an atom not belonging to the cycle itself. A cycle with no incoming arcs is unconstrained. It is easy to see that the EDG of a program is isomorphic to the program itself. Consequently, the EDG conveys enough information for reasoning about stable models of the program.\nColoring EDGs This section describes how the EDG can be used to study the stable models in terms of graph coloring. Let us define a coloring as an assignment of nodes of a graph to colors, e.g. \u03bd : V \u2192 {green, red}. An interpretation corresponds to a coloring, where all the true atoms are green, and all the others are red.\nWe now specify which colorings we intend to rule out, since they trivially correspond to inconsistencies.\nDefinition 6 (non-admissible coloring) A coloring \u03bd : V \u2192 {green, red} is non-admissible for \u3008V,E\u3009 = EDG(\u03a0) if and only if\n1. \u2203i.\u03bd(vi) = green and \u2203j.(vi, vj ,\u2212) \u2208 E and \u03bd(vj) = green, or\n2. \u2203i.\u03bd(vi) = red and \u2200j.(vj , vi,\u2212) \u2208 E and \u03bd(vj) = red.\nTo sum it up, green nodes cannot be adjacent and edges to a red node cannot all come from red nodes.\nA coloring for EDG(\u03a0) is admissible unless it is not admissible. A partial coloring is admissible if all its completions (intuitively) are.\nExample 3 What are the admissible colorings for EDG(\u03a01) in Example 1?\n\u273b\u2721 \u2720 \u2744 \u271f\u261b\n\u271f\u261b \u2744 \u271e\u2702\u2732\n\u2732\u261b \u2721\n\u2732\u261b \u2721\u271e\n\u272b\u2706\u273b \u271b\u270c\n\u261e\n\u2710 \u2710\u2710 \u2710 \u2710\n\u2710 \u2710 ......................\n..............\na b f p e\nh \u2032 h \u273b \u2721 \u2720\n\u2744 \u271f\u261b\n\u271f\u261b \u2744 \u271e\u2702\u2732\n\u2732\u261b \u2721\n\u2732\u261b \u2721\u271e\n\u272b\u2706\u273b \u271b\u270c\n\u261e\n\u2710 \u2710\u2710 \u2710 \u2710\n\u2710 \u2710 ......................\n..............\na b f p e\nh \u2032 h\n.............. ...\n.............. ................. ...\u273b\u2721 \u2720 \u2744 \u271f\u261b\n\u271f\u261b \u2744 \u271e\u2702\u2732\n\u2732\u261b \u2721\n\u2732\u261b \u2721\u271e\n\u272b\u2706\u273b \u271b\u270c\n\u261e\n\u2710 \u2710\u2710 \u2710 \u2710\n\u2710 \u2710 ......................\n..............\nr\nr\nr\nrg\ng\nr\na b f p e\nh \u2032 h r r\ng\nr\ng\nr\ng r\nr\nr\ng r\ng\ng\nFigure 2: An admissible coloring of EDG(\u03a01) (on the left) and two not admissible ones (center and right, resp.) of EDG(\u03a01) with g=green, r=red and X=admissibility violation.\nIn the center coloring above, arc \u3008e, h,\u2212\u3009 violates admissibility. In fact, it corresponds to rule h \u2190 not e in \u03a01.\nIf e is true/green, then by the rule h cannot be concluded true/green. As a matter of fact, both e and h are true in the stable model of \u03a01, but the truth of h comes from, intuitively, labeling h\u2032 green in the first coloring. In the right coloring above, admissibility is violated by arcs \u3008h\u2032, f,\u2212\u3009 and \u3008h, f,\u2212\u3009 which, together, represent the rule f \u2190 not h of \u03a01. When all hs are red, we conclude h false and \u2013by the above rule\u2013, f true/green.\nNow, we are able to define a notion of admissible coloring for EDG\u2019s of Kernel programs.\nTheorem 3 An interpretation I is a stable model of \u03a0 if and only if it corresponds to an admissible coloring of EDG(\u03a0).\nWe are implementing a practical system that computes stable models on the EDG (Brignoli et al. 1999). The coloring procedure is, experimentally, very sensitive to the choice of heuristic methods for starting the coloring itself from \u201crelevant\u201d nodes. In fact, presently the choice of the starting nodes is guided by the concept of extended cycle described earlier: we try identify nodes corresponding to crucial handles, and start from them. A main topic for our research now is clearly the study of new heuristic methods, as well as adapting existing solutions from graph theory."}, {"heading": "Acknowledgments", "text": "Thanks to Chitta Baral and Michael Gelfond for constant encouragement in the pursuit of this research."}], "references": [{"title": "Logic programming and negation: a survey", "author": ["K.R. Apt", "R. Bol"], "venue": "J. of Logic Programming,", "citeRegEx": "Apt and Bol,? \\Q1994\\E", "shortCiteRegEx": "Apt and Bol", "year": 1994}, {"title": "Logic programming and knowledge representation", "author": ["C. Baral", "Gelfond. M"], "venue": "J. of Logic Programming,", "citeRegEx": "Baral and M.,? \\Q1994\\E", "shortCiteRegEx": "Baral and M.", "year": 1994}, {"title": "A Graph Coloring algorithm for stable models generation", "author": ["G. Brignoli", "S. Costantini", "A. Provetti"], "venue": "Univ. of Milan", "citeRegEx": "Brignoli et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Brignoli et al\\.", "year": 1999}, {"title": "Contributions to the stable model semantics of logic programs with negation", "author": ["S. Costantini"], "venue": "Theoretical Computer Science,", "citeRegEx": "Costantini,? \\Q1995\\E", "shortCiteRegEx": "Costantini", "year": 1995}, {"title": "Default reasoning system DeReS", "author": ["P. Cholewi\u0144ski", "W. Marek", "M. Truszczy\u0144ski"], "venue": "Proc. of KR96,", "citeRegEx": "Cholewi\u0144ski et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Cholewi\u0144ski et al\\.", "year": 1996}, {"title": "Extremal problems in logic programming and stable model computation", "author": ["P. Cholewi\u0144ski", "M. Truszczy\u0144ski"], "venue": "Proc. of IJCSLP\u201996,", "citeRegEx": "Cholewi\u0144ski and Truszczy\u0144ski,? \\Q1996\\E", "shortCiteRegEx": "Cholewi\u0144ski and Truszczy\u0144ski", "year": 1996}, {"title": "On Computing Logic Programs", "author": ["Y. Dimopoulos"], "venue": "J. of Automated Reasoning,", "citeRegEx": "Dimopoulos,? \\Q1996\\E", "shortCiteRegEx": "Dimopoulos", "year": 1996}, {"title": "On the Relation between Stable and Well\u2013 Founded Semantics of Logic Programs", "author": ["P.M. Dung"], "venue": "Theoretical Computer Science,", "citeRegEx": "Dung,? \\Q1992\\E", "shortCiteRegEx": "Dung", "year": 1992}, {"title": "Logic programming and stable model computation", "author": ["P.M. Dung"], "venue": "Kanchanasut,", "citeRegEx": "Dung,? \\Q1989\\E", "shortCiteRegEx": "Dung", "year": 1989}, {"title": "A deductive system for non-monotonic reasoning", "author": ["T. Eiter", "N. Leone", "C. Mateis", "G. Pfeifer", "F. Scarcello"], "venue": "Proc. Of the 4 th LPNMR Conference,", "citeRegEx": "Eiter et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Eiter et al\\.", "year": 1997}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Proc. of 5th ILPS conference,", "citeRegEx": "Gelfond and Lifschitz,? \\Q1988\\E", "shortCiteRegEx": "Gelfond and Lifschitz", "year": 1988}, {"title": "Autoepistemic Logic. The Journal of the ACM,38:588\u2013619", "author": ["W. Marek", "Truszczy\u0144ski M"], "venue": null, "citeRegEx": "Marek and M.,? \\Q1991\\E", "shortCiteRegEx": "Marek and M.", "year": 1991}, {"title": "Stable models and an alternative logic programming paradigm", "author": ["W. Marek", "Truszczy\u0144ski M"], "venue": "The Journal of Logic Programming", "citeRegEx": "Marek and M.,? \\Q1999\\E", "shortCiteRegEx": "Marek and M.", "year": 1999}, {"title": "Logic programs with stable model semantics as a constraint programming paradigm", "author": ["I. Niemel\u00e4", "P. Simons"], "venue": "Proc. of NM\u201998 workshop", "citeRegEx": "Niemel\u00e4 and Simons,? \\Q1998\\E", "shortCiteRegEx": "Niemel\u00e4 and Simons", "year": 1998}, {"title": "Deterministic and NonDeterministic Stable Models", "author": ["D. Sacc\u00e0", "C. Zaniolo"], "venue": "J. of Logic and Computation", "citeRegEx": "Sacc\u00e0 and Zaniolo,? \\Q1997\\E", "shortCiteRegEx": "Sacc\u00e0 and Zaniolo", "year": 1997}, {"title": "Towards Constraint Satisfaction through Logic Programs and the Stable Models Semantics", "author": ["P. Simons"], "venue": "Helsinki Univ. of Technology R.R. A:47", "citeRegEx": "Simons,? \\Q1997\\E", "shortCiteRegEx": "Simons", "year": 1997}, {"title": "WFS + branch and bound = stable models", "author": ["Subrahmanian V.S", "D. Nau", "C. Vago"], "venue": "IEEE Trans. on Knowledge and Data Engineering,", "citeRegEx": "V.S. et al\\.,? \\Q1995\\E", "shortCiteRegEx": "V.S. et al\\.", "year": 1995}, {"title": "The WellFounded Semantics for General Logic Programs", "author": ["A. Van Gelder", "K.A. Ross", "J. Schlipf"], "venue": "Journal of the ACM Vol", "citeRegEx": "Gelder et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Gelder et al\\.", "year": 1990}, {"title": "Computation of stable models and its integration with logical query processing", "author": ["W. Chen", "D.S. Warren"], "venue": "IEEE Trans. on Data and Knowledge Engineering,", "citeRegEx": "Chen and Warren,? \\Q1996\\E", "shortCiteRegEx": "Chen and Warren", "year": 1996}], "referenceMentions": [{"referenceID": 7, "context": "Proposition 1 (Dung 1992) A [normal] logic program has a stable model if it is call\u2013consistent.", "startOffset": 14, "endOffset": 25}, {"referenceID": 7, "context": "More results along the lines of Proposition 1 are found in (Dung 1992).", "startOffset": 59, "endOffset": 70}, {"referenceID": 7, "context": "In our framework, for instance, it becomes easy to reformulate the result in (Dung 1992) saying that every callconsistent program has stable models.", "startOffset": 77, "endOffset": 88}, {"referenceID": 2, "context": "We are implementing a practical system that computes stable models on the EDG (Brignoli et al. 1999).", "startOffset": 78, "endOffset": 100}], "year": 2014, "abstractText": "Stable Logic Programming (SLP) is an emergent, alternative style of logic programming: each solution to a problem is represented by a stable model of a deductive database/function\u2013free logic program encoding the problem itself. Several implementations now exist for stable logic programming, and their performance is rapidly improving. To make SLP generally applicable, it should be possible to check for consistency (i.e., existence of stable models) of the input program before attempting to answer queries. In the literature, only rather strong sufficient conditions have been proposed for consistency, e.g., stratification. This paper extends these results in several directions. First, the syntactic features of programs, viz. cyclic negative dependencies, affecting the existence of stable models are characterized, and their relevance is discussed. Next, a new graph representation of logic programs, the Extended Dependency Graph (EDG), is introduced, which conveys enough information for reasoning about stable models (while the traditional Dependency Graph does not). Finally, we show that the problem of the existence of stable models can be reformulated in terms of coloring of the EDG.", "creator": "dvips(k) 5.991 Copyright 2011 Radical Eye Software"}}}