{"id": "1405.0876", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-May-2014", "title": "The Multi-engine ASP Solver ME-ASP: Progress Report", "abstract": "MEASP is sucipto a ascs multi - ecaterina engine solver goering for ground ASP feminist programs. malook It exploits algorithm 36-day selection techniques grayken based unexampled on hemorrhagic classification disrupts to select one among -3.8 a snapped set guglielmo of out - berkland of - the - duchy box fgn heterogeneous shadowed ASP amillia solvers used inevitable as cheli black - mesenteric box engines. In 370 this cotes paper sj\u00f6holm we bid report 24-12 on (workers i) jollity a new interfaces optimized implementation ague of MEASP; and (ii) scared an attempt sankei of noels applying algorithm selection hanin to koslow non - xaus ground murmu programs. champernowne An forlanini experimental minneapolis-st analysis chron.com reported idlers in shaimiyev the golden-headed paper 15.77 shows that (myton i) the fotheringham new implementation ventforet of \\ cornus measp is 4in substantially bolland faster than the kongu previous g-function version; and (sneezing ii) strathalbyn the 2,058 multi - l'alma engine yarraville recipe can be applied arquebuses to coddling the evaluation of non - ground luann programs wehmeyer with some benefits.", "histories": [["v1", "Mon, 5 May 2014 12:45:07 GMT  (36kb)", "http://arxiv.org/abs/1405.0876v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["marco maratea", "luca pulina", "francesco ricca"], "accepted": false, "id": "1405.0876"}, "pdf": {"name": "1405.0876.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Marco Maratea", "Luca Pulina", "Francesco Ricca"], "emails": ["marco@dist.unige.it", "lpulina@uniss.it", "ricca@mat.unical.it"], "sections": [{"heading": null, "text": "ar X\niv :1\n40 5.\n08 76\nv1 [\ncs .A\nI] 5\nM ay\n2 01"}, {"heading": "Introduction", "text": "Answer Set Programming (Baral 2003; Eiter, Gottlob, and Mannila 1997; Gelfond and Lifschitz 1988; Gelfond and Lifschitz 1991; Marek and Truszczyn\u0301ski 1998; Niemela\u0308 1998) (ASP) is a declarative language based on logic programming and non-monotonic reasoning. The applications of ASP belong to several areas, e.g., ASP was used for solving a variety of hard combinatorial problems (see e.g., (Calimeri et al. 2011) and (Potsdam since 2002)).\nNowadays, several efficient ASP systems are available (Gebser et al. 2007; Janhunen, Niemela\u0308, and Sevalnev 2009; Leone et al. 2006; Lierler 2005; Marie\u0308n et al. 2008; Simons, Niemela\u0308, and Soininen 2002). It is well-established that, for solving empirically hard problems, there is rarely a best algorithm/heuristic, while it is often the case that different algorithms perform well on different problems/instances. It can be easily verified (e.g., by analyzing the results of the ASP competition series) that this is the case also for ASP implementations. In order to take advantage of this fact, one should be able to select automatically the \u201cbest\u201d solver on the basis of the characteristics (called features) of the instance in input, i.e., one has to consider to solve an algorithm selection problem (Rice 1976).\nInspired by the successful attempts (Gomes and Selman 2001; O\u2019Mahony et al. 2008; Pulina and Tacchella 2009; Xu et al. 2008) done in the\n\u2217This paper will appear in the Proceedings of the 15th International Workshop on Non-Monotonic Reasoning (NMR 2014)\nneighbor fields of SAT, QSAT and CSP, the application of algorithm selection techniques to ASP solving was ignited by the release of the portfolio solver CLASPFOLIO (Gebser et al. 2011). This solver imports into ASP the SATZILLA (Xu et al. 2008) approach. Indeed, CLASPFOLIO employs inductive techniques based on regression to choose the \u201cbest\u201d configuration/heuristic of the solver CLASP. The complete picture of inductive approaches applied to ASP solving includes also techniques for learning heuristics orders (Balduccini 2011), solutions to combine portfolio and automatic algorithm configuration approaches (Silverthorn, Lierler, and Schneider 2012), automatic selection of a scheduling of ASP solvers (Hoos et al. 2012) (in this case CLASP configurations), and the multi-engine approach. The aim of a multi-engine solver (Pulina and Tacchella 2009) is to select the \u201cbest\u201d solver among a set of efficient ones used as black-box engines. The multi-engine ASP solver ME-ASP was proposed in (Maratea, Pulina, and Ricca 2012b), and ports to ASP an approach applied before to QBF (Pulina and Tacchella 2009).\nME-ASP exploits inductive techniques based on classification to choose, on a per instance basis, an engine among a selection of black-box heterogeneous ASP solvers. The first implementation of ME-ASP, despite not being highly optimized, already reached good performance. Indeed, ME-ASP can combine the strengths of its component engines, and thus it performs well on a broad set of benchmarks including 14 domains and 1462 ground instances (detailed results are reported in (Maratea, Pulina, and Ricca 2014a)).\nIn this paper we report on (i) a new optimized implementation of ME-ASP; and on (ii) a first attempt of applying algorithm selection to the entire process of computing answer sets of non-ground programs.\nAs a matter of fact, the ASP solutions available at the state of the art employing machine-learning techniques are devised to solve ground (or propositional) programs, and \u2013 to the best of our knowledge \u2013 no solution has been proposed that is able to cope directly with non-ground programs. Note that ASP programmers almost always write non-ground programs, which have to be first instantiated by a grounder. It is well-known that such instantiation phase can influence significantly the performance of the entire solving process. At the time of this writing, there\nare two prominent alternative implementations that are able to instantiate ASP programs: DLV (Leone et al. 2006) and GRINGO (Gebser, Schaub, and Thiele 2007). Once the peculiarities of the instantiation process are properly taken into account, both implementations can be combined in a multi-engine grounder by applying also to this phase an algorithm selection recipe, building on (Maratea, Pulina, and Ricca 2013). The entire process of evaluation of a non-ground ASP program can be, thus, obtained by applying algorithm selection to the instantiation phase, selecting either DLV or GRINGO; and, then, in a subsequent step, evaluating the propositional program obtained in the first step with a multi-engine solver.\nAn experimental analysis reported in the paper shows that (i) the new implementation of ME-ASP is substantially faster than the previous version; and (ii) the straight application of the multi-engine recipe to the instantiation phase is already beneficial. At the same time, it remains space for future work, and in particular for devising more specialized techniques to exploit the full potential of the approach."}, {"heading": "A Multi-Engine ASP system", "text": "We next overview the components of the multi-engine approach, and we report on the way we have instantiated it to cope with instantiation and solving, thus obtaining a complete multi-engine system for computing answer sets of nonground ASP programs. General Approach. The design of a multi-engine solver based on classification is composed of three main ingredients: (i) a set of features that are significant for classifying the instances; (ii) a selection of solvers that are representative of the state of the art and complementary; and (iii) a choice of effective classification algorithms. Each instance in a fairly-designed training set of instances is analyzed by considering both the features and the performance of each solvers. An inductive model is computed by the classification algorithm during this phase. Then, each instance in a test set is processed by first extracting its features, and the solver is selected starting from these features using the learned model. Note that, this schema does not make any assumption (other than the basic one of supporting a common input) on the engines. The ME-ASP solver. In (Maratea, Pulina, and Ricca 2012b; Maratea, Pulina, and Ricca 2014a) we described the choices we have made to develop the ME-ASP solver. In particular, we have singled out a set of syntactic features that are both significant for classifying the instances and cheap-tocompute (so that the classifier can be fast and accurate). In detail, we considered: the number of rules and number of atoms, the ratio of horn, unary, binary and ternary rules, as well as some ASP peculiar features, such as the number of true and disjunctive facts, and the fraction of normal rules and constraints. The number of resulting features, together with some of their combinations, amounts to 52. In order to select the engines we ran preliminary experiments (Maratea, Pulina, and Ricca 2014a) to collect a pool of solvers that is representative of the state-of-the-art solver (SOTA), i.e., considering a problem instance, the oracle that\nalways fares the best among the solvers that entered the system track of the 3rd ASP Competition (Calimeri et al. 2011), plus DLV. The pool of engines collected in ME-ASP is composed of 5 solvers, namely CLASP, CLASPD, CMODELS, DLV, and IDP, as submitted to the 3rd ASP Competition. We experimented with several classification algorithms (Maratea, Pulina, and Ricca 2014a), and proved empirically that ME-ASP can perform better than its engines with any choice. Nonetheless, we selected the k-nearest neighbor (kNN) classifier for our new implementation: it was already used in MEASP (Maratea, Pulina, and Ricca 2012b), with good performance, and it was easy to integrate its implementation in the new version of the system. Multi-engine instantiator. Concerning the automatic selection of the grounder, we selected: number of disjunctive rules, presence of queries, the total amount of functions and predicates, number of strongly connected and Head-Cycle Free(Ben-Eliyahu and Dechter 1994) components, and stratification property, for a total amount of 11 features. These features are able to discriminate the class of the problem, and are also pragmatically cheap-tocompute. Indeed, given the high expressivity of the language, non-ground ASP programs (which are usually written by programmers) contain only a few rules. Concerning the grounders, given that there are only two alternative solutions, namely DLV and GRINGO, we considered both for our implementation.\nConcerning the classification method, we used an implementation of the PART decision list generator (Frank and Witten 1998), a classifier that returns a human readable model based on if-then-else rules. We used PART because, given the relatively small total amount of features related to the non-ground instances, it allows us to compare the generated model with respect to the knowledge of a human expert. Multi-Engine System ME-ASPgr. Given a (non-ground) ASP program, the evaluation workflow of the multi-engine ASP solution called ME-ASPgr is the following: (i) nonground features extraction, (ii) grounder selection, (iii) grounding phase, (iv) ground features extraction, (v) solver selection, and (vi) solving phase on ground program."}, {"heading": "Implementation and Experiments", "text": "In this section we report the results of two experiments conceived to assess the performance of the new versions of the ME-ASP system. The first experiment has the goal of measuring the performance improvements obtained by the new optimized implementation of the ME-ASP solver. The second experiment assesses ME-ASPgr and reports on the performance improvements that can be obtained by selecting the grounder first and then calling the ME-ASP solver. ME-ASP and ME-ASPgr are available for download at www.mat.unical.it/ricca/me-asp. Concerning the hardware employed and the execution settings, all the experiments run on a cluster of Intel Xeon E31245 PCs at 3.30 GHz equipped with 64 bit Ubuntu 12.04, granting 600 seconds of CPU time and 2GB of memory to each\nsolver. The benchmarks used in this paper belong to the suite of benchmarks, encoded in the ASP-Core 1.0 language, of the 3rd ASP Competition. Note that in the 4th ASP Competition (Alviano et al. 2013) the new language ASP-Core 2.0 has been introduced. We still rely on the language of the 3rd ASP Competition given that the total amount of solvers and grounders supporting the new standard language is very limited with respect to the number of tools supporting ASPCore 1.0. Assessment of the new implementation of ME-ASP. The original implementation of ME-ASP was obtained by combining a general purpose feature extractor (that we have initially developed for experimenting with a variety of additional features) developed in Java, with a collection of Perl scripts linking the other components of the system, which are based on the rapidminer library. This is a general purpose implementation supporting also several classification algorithms. Since the CPU time spent for the extraction of features and solver selection has to be made negligible, we developed an optimized version of ME-ASP. The goal was to optimize the interaction among system components and further improve their efficiency. To this end, we have re-engineered the feature extractor, enabling it to read ground instances expressed in the numeric format used by GRINGO. Furthermore, we have integrated it with an implementation of the kNN algorithm built on top of the ANN library (www.cs.umd.edu/\u02dcmount/ANN) in the same binary developed in C++. This way the new implementation minimizes the overhead introduced by solver selection.\nWe now present the results of an experiment in which we compare the old implementation of ME-ASP, labelled ME-ASPold, with the new one, labelled MEASPnew. In this experiment, assessing solving performance, we used GRINGO as grounder for both implementations, and we considered problems belonging to the NP and Beyond NP classes of the competition (i.e., the grounder and domains considered by MEASPold (Maratea, Pulina, and Ricca 2014a)). The inductive model used in ME-ASPnew was the same used in ME-ASPold (details are reported in (Maratea, Pulina, and Ricca 2014a)). The plot in Figure 1 (top) depicts the performance of both ME-ASPold and ME-ASPnew (dotted red and solid blue lines in the plot, respectively). Considering the total amount of NP and Beyond NP instances evaluated at the 3rd ASP Competition (140), ME-ASPnew solved 92 instances (77 NP and 15 Beyond NP) in about 4120 seconds, while ME-ASPold solved 77 instances (62 NP and 15 Beyond NP) in about 6498 seconds. We report an improvement both in the total amount of solved instances (ME-ASPnew is able to solve 66% of the whole set of instances, while ME-ASPnew stops at 51%) and in the average CPU time of solved instances (about 45 seconds against 84).\nThe improvements of ME-ASPnew are due to its optimized implementation. Once feature extraction and solver selection are made very efficient, it is possible to extract features for more instances and the engines are called in advance w.r.t. what happens in ME-ASPold. This results in more instances that are processed and solved by ME-ASPnew within the timeout.\nAssessment of the complete system. We developed a preliminary implementation of a grounder selector, which combines a feature extractor for non-ground programs written in Java, and an implementation of the PART decision list generator, as mentioned in the previous section. The grounder selector is then combined with ME-ASPnew.\nWe now present the results of an experiment in which we compare ME-ASPgr with ME-ASPnew, and the SOTA solver. ME-ASPnew coupled with DLV (resp. GRINGO) is denoted by ME-ASPnew (dlv) (resp. ME-ASPnew (gringo)). In this case we considered all the benchmark problems of the 3rd ASP Competition, including the ones belonging to the P class. Indeed, in this case we are interested also in grounders\u2019 performance, which is crucial in the P class.\nThe plot in Figure 1 (bottom) shows the performance of the aforementioned solvers. In the plot, we depict the performance of ME-ASPnew (dlv) with a red dotted line, MEASPnew (gringo) with a solid blue line, ME-ASPgr with a double dotted dashed yellow line, and, finally, with a dotted dashed black line we denote the performance of the SOTA solver. Looking at the plot, we can see that ME-ASPnew (gringo) solves more instances that ME-ASPnew (dlv) \u2013 126 and 111, respectively \u2013 while both are outperformed by MEASPgr, that is able to solve 134 instances. The average CPU time of solved instances for ME-ASPnew (dlv), ME-ASPnew (gringo) and ME-ASPgr is 86.86, 67.93 and 107.82 seconds, respectively. Looking at the bottom plot in Figure 1, concerning the performance of the SOTA solver, we report that it is able to solve 173 instances out of a total of 200 instances (evaluated at the 3rd ASP Competition), highlighting room for further improving this preliminary version of ME-ASPgr. Indeed, the current classification model predicts GRINGO for most of the NP instances, but having a more detailed look at the results, we notice that CLASP and IDP with GRINGO\nsolve both 72 instances, while using DLV they solve 93 and 92 instances, respectively. A detailed analysis of the performance of the various ASP solvers with both grounders can be found in (Maratea, Pulina, and Ricca 2013).\nIt is also worth mentioning that the output formats of GRINGO and DLV differ, thus there are combinations grounder/solver that require additional conversion steps in our implementation. Since the new feature extractor is designed to be compliant with the numeric format produced by GRINGO, if DLV is selected as grounder then the nonground program is instantiated twice. Moreover, if DLV is selected as grounder, and it is not selected also as solver, the produced propositional program is fed in gringo to be converted in numeric format. These additional steps, due to technical issues, result in a suboptimal implementation of the execution pipeline that could be further optimized in case both grounders would agree on a common output format.\nConclusion. In this paper we presented improvements to the multi-engine ASP solver ME-ASP. Experiments show that (i) the new implementation of ME-ASP is more efficient, and (ii) the straight application of the multiengine recipe to the instantiation phase is already beneficial. Directions for future research include exploiting the full potential of the approach by predicting the pair grounder+solver, and importing policy adaptation techniques employed in (Maratea, Pulina, and Ricca 2014b).\nAcknowledgments. This research has been partly supported by Regione Calabria under project PIA KnowRex POR FESR 2007- 2013 BURC n. 49 s.s. n. 1 16/12/2010, the Italian Ministry of University and Research under PON project \u201cBa2Know S.I.-LAB\u201d n. PON03PE 0001, the Autonomous Region of Sardinia (Italy) and the Port Authority of Cagliari (Italy) under L.R. 7/2007, Tender 16 2011 project \u201cDESCTOP\u201d, CRP-49656."}], "references": [{"title": "J", "author": ["Rice"], "venue": "R.", "citeRegEx": "Rice 1976", "shortCiteRegEx": null, "year": 1976}, {"title": "and Lifschitz", "author": ["M. Gelfond"], "venue": "V.", "citeRegEx": "Gelfond and Lifschitz 1988", "shortCiteRegEx": null, "year": 1988}, {"title": "and Lifschitz", "author": ["M. Gelfond"], "venue": "V.", "citeRegEx": "Gelfond and Lifschitz 1991", "shortCiteRegEx": null, "year": 1991}, {"title": "I", "author": ["E. Frank", "Witten"], "venue": "H.", "citeRegEx": "Frank and Witten 1998", "shortCiteRegEx": null, "year": 1998}, {"title": "and Truszczy\u0144ski", "author": ["V.W. Marek"], "venue": "M.", "citeRegEx": "Marek and Truszczy\u0144ski 1998", "shortCiteRegEx": null, "year": 1998}, {"title": "and Selman", "author": ["C.P. Gomes"], "venue": "B.", "citeRegEx": "Gomes and Selman 2001", "shortCiteRegEx": null, "year": 2001}, {"title": "U", "author": ["Potsdam"], "venue": "since", "citeRegEx": "Potsdam since 2002", "shortCiteRegEx": null, "year": 2002}, {"title": "Extending and Implementing the Stable Model Semantics", "author": ["Niemel\u00e4 Simons", "P. Soininen 2002] Simons", "I. Niemel\u00e4", "T. Soininen"], "venue": "Artificial Intelligence", "citeRegEx": "Simons et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Simons et al\\.", "year": 2002}, {"title": "The DLV System for Knowledge Representation and Reasoning", "author": ["Leone"], "venue": "ACM TOCL", "citeRegEx": "Leone,? \\Q2006\\E", "shortCiteRegEx": "Leone", "year": 2006}, {"title": "Conflict-driven answer set solving", "author": ["Gebser"], "venue": "In IJCAI-07,", "citeRegEx": "Gebser,? \\Q2007\\E", "shortCiteRegEx": "Gebser", "year": 2007}, {"title": "GrinGo : A New Grounder for Answer Set Programming", "author": ["Schaub Gebser", "M. Thiele 2007] Gebser", "T. Schaub", "S. Thiele"], "venue": "LPNMR", "citeRegEx": "Gebser et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Gebser et al\\.", "year": 2007}, {"title": "Sat(id): Satisfiability of propositional logic extended with inductive definitions", "author": ["Mari\u00ebn"], "venue": "In SAT 08,", "citeRegEx": "Mari\u00ebn,? \\Q2008\\E", "shortCiteRegEx": "Mari\u00ebn", "year": 2008}, {"title": "Using case-based reasoning in an algorithm portfolio for constraint solving", "author": ["O\u2019Mahony"], "venue": "ICAICS", "citeRegEx": "O.Mahony,? \\Q2008\\E", "shortCiteRegEx": "O.Mahony", "year": 2008}, {"title": "H", "author": ["L. Xu", "F. Hutter", "Hoos"], "venue": "H.; and Leyton-Brown, K.", "citeRegEx": "Xu et al. 2008", "shortCiteRegEx": null, "year": 2008}, {"title": "Computing stable models via reductions to difference logic", "author": ["Niemel\u00e4 Janhunen", "T. Sevalnev 2009] Janhunen", "I. Niemel\u00e4", "M. Sevalnev"], "venue": "In LPNMR 09,", "citeRegEx": "Janhunen et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Janhunen et al\\.", "year": 2009}, {"title": "and Tacchella", "author": ["L. Pulina"], "venue": "A.", "citeRegEx": "Pulina and Tacchella 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "M", "author": ["M. Gebser", "R. Kaminski", "B. Kaufmann", "T. Schaub", "Schneider"], "venue": "T.; and Ziller, S.", "citeRegEx": "Gebser et al. 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "Propositional Semantics for Disjunctive Logic Programs", "author": ["Ben-Eliyahu", "R. Dechter 1994] Ben-Eliyahu", "R. Dechter"], "venue": "Annals of Mathematics and Artificial Intelligence", "citeRegEx": "Ben.Eliyahu et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Ben.Eliyahu et al\\.", "year": 1994}, {"title": "The Third Answer Set Programming Competition: Preliminary Report of the System Competition Track", "author": ["Calimeri"], "venue": "In Proc. of LPNMR11.,", "citeRegEx": "Calimeri,? \\Q2011\\E", "shortCiteRegEx": "Calimeri", "year": 2011}, {"title": "M", "author": ["H. Hoos", "R. Kaminski", "T. Schaub", "Schneider"], "venue": "T.", "citeRegEx": "Hoos et al. 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "F", "author": ["M. Maratea", "L. Pulina", "Ricca"], "venue": "2012b. The multi-engine asp solver me-asp. In JELIA", "citeRegEx": "Maratea. Pulina. and Ricca 2012b", "shortCiteRegEx": null, "year": 2012}, {"title": "Surviving solver sensitivity: An asp practitioner\u2019s guide", "author": ["Lierler Silverthorn", "B. Schneider 2012] Silverthorn", "Y. Lierler", "M. Schneider"], "venue": "In Tech. Comm. of ICLP 2012,", "citeRegEx": "Silverthorn et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Silverthorn et al\\.", "year": 2012}, {"title": "The fourth answer set programming competition: Preliminary report", "author": ["Alviano"], "venue": "In LPNMR,", "citeRegEx": "Alviano,? \\Q2013\\E", "shortCiteRegEx": "Alviano", "year": 2013}, {"title": "F", "author": ["M. Maratea", "L. Pulina", "Ricca"], "venue": "2013. Automated selection of grounding algorithm in answer set programming. In AI* IA", "citeRegEx": "Maratea. Pulina. and Ricca 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "A multi-engine approach to answer-set programming", "author": ["Pulina Maratea", "M. Ricca 2014a] Maratea", "L. Pulina", "F. Ricca"], "venue": "Theory and Practice of Logic Programming", "citeRegEx": "Maratea et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Maratea et al\\.", "year": 2014}, {"title": "Multi-engine asp solving with policy adaptation. JLC", "author": ["Pulina Maratea", "M. Ricca 2014b] Maratea", "L. Pulina", "F. Ricca"], "venue": null, "citeRegEx": "Maratea et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Maratea et al\\.", "year": 2014}], "referenceMentions": [], "year": 2014, "abstractText": "ME-ASP is a multi-engine solver for ground ASP programs. It exploits algorithm selection techniques based on classification to select one among a set of out-of-the-box heterogeneous ASP solvers used as black-box engines. In this paper we report on (i) a new optimized implementation of MEASP; and (ii) an attempt of applying algorithm selection to non-ground programs. An experimental analysis reported in the paper shows that (i) the new implementation of ME-ASP is substantially faster than the previous version; and (ii) the multi-engine recipe can be applied to the evaluation of nonground programs with some benefits.", "creator": "LaTeX with hyperref package"}}}