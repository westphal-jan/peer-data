{"id": "1409.0302", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Sep-2014", "title": "Team Behavior in Interactive Dynamic Influence Diagrams with Applications to Ad Hoc Teams", "abstract": "duchemin Planning whistle-blower for wallowed ad hoc sanshui teamwork is gentling challenging natya because it involves versova agents a23 collaborating without careered any prior rri coordination nofx or communication. fakti The genson focus is cholame on principled methods isuf for a bagher single m.l.a agent to cooperate ossetians with others. This motivates investigating yuhara the five-track ad hoc teamwork problem in mafeteng the 92.59 context of benarroch individual refracted decision rekarte making arago frameworks. However, individual decision making kapova in ev-1 multiagent kuiper settings maywood faces the task of bruschi having to skippack reason faiq about elevskola other blockade-running agents ' photostat actions, govenrment which holte in turn stoppered involves reasoning about zhoushan others. An established approximation that operationalizes karabilah this deve approach is steffanie to bound etm the infinite nesting from euro61 below by introducing codepoints level 0 xlr models. We show s.h.i.e.l.d. that reawakening a ivanko consequence daltrey of addict the pedicabs finitely - nested worded modeling catty is 99.29 that we may not obtain optimal team solutions l\u00fcneburg in cooperative settings. tkm We 28-2 address shecky this limitation villoresi by eesah including ndayirukiye models seedless at colding level falstaff 0 neatly whose souchon solutions involve huseynov learning. We demonstrate that the 600 learning integrated kentland into whom planning robbins in meanly the context of 130-mph interactive 115.95 dynamic sirindhorn influence khosro diagrams facilitates rebirth optimal frighteningly team 96.93 behavior, sanyasa and is persons applicable to veeco ad hoc teamwork.", "histories": [["v1", "Mon, 1 Sep 2014 06:53:27 GMT  (348kb)", "http://arxiv.org/abs/1409.0302v1", "8 pages, Appeared in the MSDM Workshop at AAMAS 2014, Extended Abstract version appeared at AAMAS 2014, France"]], "COMMENTS": "8 pages, Appeared in the MSDM Workshop at AAMAS 2014, Extended Abstract version appeared at AAMAS 2014, France", "reviews": [], "SUBJECTS": "cs.MA cs.AI", "authors": ["muthukumaran chandrasekaran", "prashant doshi", "yifeng zeng", "yingke chen"], "accepted": false, "id": "1409.0302"}, "pdf": {"name": "1409.0302.pdf", "metadata": {"source": "CRF", "title": "Team Behavior in Interactive Dynamic Influence Diagrams with Applications to Ad Hoc Teams", "authors": ["Muthukumaran Chandrasekaran", "Prashant Doshi", "Yifeng Zeng", "Yingke Chen"], "emails": ["mkran@uga.edu", "pdoshi@cs.uga.edu", "y.zeng@tees.ac.uk", "y.chen@qub.ac.uk"], "sections": [{"heading": null, "text": "ar X\niv :1\n40 9.\n03 02\nv1 [\ncs .M\nA ]\n1 S\nCategories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Intelligent agents, Multiagent systems\nGeneral Terms Algorithms, Experimentation\nKeywords multiagent systems, ad hoc teamwork, sequential decision making and planning, reinforcement learning"}, {"heading": "1. INTRODUCTION", "text": "Ad hoc teamwork involves a team of agents coming together to cooperate without any prior coordination or communication protocols [23]. The preclusion of prior commonality makes planning in ad hoc settings challenging. For example, well-known cooperative planning frameworks such as the Communicative multia-\nAppears in The Ninth Annual Workshop on Multiagent Sequential Decision-Making Under Uncertainty (MSDM-2014), held in conjunction with AAMAS, May 2014, Paris, France.\ngent team decision problem [20] and the decentralized partially observable Markov decision process (DEC-POMDP) [5] utilize centralized planning and distribution of local policies among agents, which are assumed to have common initial beliefs. These assumptions make the frameworks unsuitable for ad hoc teamwork.\nA focus on how an agent should behave online as an ad hoc teammate informs previous approaches toward planning. This includes an algorithm for online planning in ad hoc teams (OPAT) [24] that solves a series of stage games assuming that other agents are optimal with the utility at each stage computed using Monte Carlo tree search. Albrecht and Ramamoorthy [2] model the uncertainty about other agents\u2019 types and construct a Harsanyi-Bayesian ad hoc game that is solved online using learning. While these approaches take important steps, they assume that the physical states and actions of others are perfectly observable, which often may not apply.\nThe focus on individual agents\u2019 behaviors in ad hoc teams motivates that we situate the problem in the context of individual decisionmaking frameworks. In this regard, recognized frameworks include the interactive POMDP (I-POMDP) [11], its graphical counterpart, interactive dynamic influence diagram (I-DID) [10], and I-POMDP Lite [13]. These frameworks allow considerations of partial observability of the state and uncertainty over the types of other agents with minimal prior assumptions, at the expense of increased computational complexity. Indeed, Albrecht and Ramamoorthy [2] note the suitability of these frameworks to the problem of ad hoc teamwork but find the complexity challenging.\nWhile recent advances on model equivalence [25] allow frameworks such as I-DIDs to scale, another significant challenge that merits attention is due to the finitely-nested modeling used in these frameworks, which assumes the presence of level 0 models that do not explicitly reason about others [1, 3, 8, 14]. A consequence of this approximation is that we may not obtain optimal solutions in cooperative settings. To address this, we augment the I-DID framework by additionally attributing a new type of level 0 model. This type distinguishes itself by utilizing reinforcement learning (RL) either online or in simulation to discover possible collaborative policies that a level 0 agent may execute.\nThe contributions of this paper are two-fold: First, we show the emergence of true team behavior when the reasoning ability of lower level agents is enhanced via learning. We demonstrate globally optimal teammate solutions when agents are modeled in finitely-nested augmented I-DIDs (Aug. I-DIDs) while traditional\nI-DIDs fail. Second, we demonstrate the applicability of Aug. IDIDs to ad hoc settings and show its effectiveness for varying types of teammates. For this, we utilize the ad hoc setting of Wu et al. [24], and experiment with multiple well-known cooperative domains. We also perform a baseline comparison of Aug. I-DIDs with an implementation of a generalized version of OPAT that accounts for the partial observability."}, {"heading": "2. BACKGROUND: INTERACTIVE DIDS", "text": "We sketch I-DIDs below and refer readers to [25] for more details."}, {"heading": "2.1 Representation", "text": "A traditional DID models sequential decision making for a single agent by linking a set of chance, decision and utility nodes over multiple time steps. To consider multiagent interactions, I-DIDs introduce a new type of node called the model node (hexagonal node, Mj,l\u22121, in Fig. 1(a)) that represents how another agent j acts as the subject agent i reasons about its own decisions at level l. The model node contains a set of j\u2019s candidate models at level l\u22121 ascribed by i. A link from the chance node, S, to the model node, Mj,l\u22121, represents agent i\u2019s beliefs over j\u2019s models. Specifically, it is a probability distribution in the conditional probability table (CPT) of the chance node, Mod[Mj ] (in Fig. 1(b)). An individual model of j, mj,l\u22121 = \u3008bj,l\u22121, \u03b8\u0302j\u3009, where bj,l\u22121 is the level l \u2212 1 belief, and \u03b8\u0302j is the agent\u2019s frame encompassing the decision, observation and utility nodes. Each model, mj,l\u22121, could be either a level l \u2212 1 I-DID or a DID at level 0. Solutions to the model are the predicted behavior of j and are encoded into the chance node, Aj , through a dashed link, called a policy link. Connecting Aj with other nodes in the I-DID structures how agent j\u2019s actions influence i\u2019s decision-making process.\nExpansion of an I-DID involves the update of the model node\nover time as indicated by the model update link - a dotted link from M tj,l\u22121 to M t+1 j,l\u22121 in Fig. 1(a). As agent j acts and receives observations over time, its models should be updated. For each model mtj,l\u22121 at time t, its optimal solutions may include all actions and agent j may receive any of the possible observations. Consequently, the set of the updated models at t + 1 contains up to |Mtj,l\u22121||Aj ||\u2126j | models. Here, |M t j,l\u22121| is the number of models at time t, and |Aj | and |\u2126j | the largest spaces of actions and observations respectively among all the models. The CPT of Mod[M t+1j,l\u22121] specifies the function, \u03c4 (b t j,l\u22121, a t j , o t+1 j , b t+1 j,l\u22121) which is 1 if the belief btj,l\u22121 in the model m t j,l\u22121 using the action atj and observation o t+1 j updates to b t+1 j,l\u22121 in a model m t+1 j,l\u22121; otherwise, it is 0. We may implement the model update link using standard dependency links and chance nodes, as shown in Fig. 1(b), and transform an I-DID into a traditional DID."}, {"heading": "2.2 Solution", "text": "A level l I-DID of agent i expanded over T time steps is solved in a bottom-up manner. To solve agent i\u2019s level l I-DID, all lower level l\u22121 models of agent j must be solved. Solution to a level l\u22121 model, mj,l\u22121, is j\u2019s policy that is a mapping from j\u2019s observations in Oj to the optimal decision in Aj given its belief, bj,l\u22121. Subsequently, we may enter j\u2019s optimal decisions into the chance node, Aj , at each time step and expand j\u2019s models in Mod[Mj,l\u22121] corresponding to each pair of j\u2019s optimal action and observation. We perform this process for each of level l\u22121 models of j at each time step, and obtain the fully expanded level l model. We outline the algorithm for exactly solving I-DIDs in Fig. 2.\nThe computational complexity of solving I-DIDs is mainly due to the exponential growth of lower l-1 j\u2019s models over time. Although the space of possible models is very large, not all models need to be considered in the model node. Models that are behaviorally equivalent (BE) [19] \u2013 whose behavioral predictions for the other agent are identical \u2013 could be pruned and a single representative model can be considered. This is because the solution of the subject agent\u2019s I-DID is affected by the behavior of the other agent only; thus we need not distinguish between BE models. Let PruneBehavioralEq (Mj,l\u22121) be the procedure that prunes BE models from Mj,l\u22121 returning the representative models (line 6).\nNote that lines 4-5 (in Fig. 2) solve level l-1 I-DIDs or DIDs and then supply the policies to level l I-DID. Due to the bounded rationality of level l-1 agents, the solutions lead to a suboptimal policy of agent j, which certainly compromises agent i\u2019s performance in the interactions particularly in a team setting. Also, note that the level 0 models are DIDs that do not involve learning. We will show in the coming sections that solving I-DIDs integrated with RL may generate the expected team behavior among agents i and j."}, {"heading": "3. TEAMWORK IN INTERACTIVE DIDS", "text": "Ad hoc teamwork involves multiple agents working collaboratively in order to optimize the team reward. Each ad hoc agent in the team behaves according to a policy, which maps the agent\u2019s observation history or beliefs to the action(s) it should perform. We begin by showing that the finitely-nested hierarchy in I-DID does not facilitate ad hoc teamwork. However, augmenting the traditional model space with models whose solution is obtained via reinforcement learning provides a way for team behavior to emerge."}, {"heading": "3.1 Implausibility of Teamwork", "text": "Fig. 3 shows an ad hoc team setting of a two-agent grid meeting problem [6]. The agents can detect the presence of a wall on its right (RW ), left (LW ) or the absence of it on both sides (NW ).\nGiven a specific observation, the agent may choose to either move in one of four directions \u2013 south (MS), north (MN ), east (ME), or west (MW ), or stay in the same cell (ST ). Each ad hoc agent, i or j, moves in the grid and collects rewards as the number indicated in the occupied cell. If they move to different cells, the agents get their own individual reward. However, if they move to the same cell allowing them to hold an ad hoc meeting, they will be rewarded with twice the sum of their individual rewards. Initial positions of the two agents are shown in color and we focus on their immediate actions.\nIf each agent deliberates at its own level, agent i modeled at level 0 will choose to move left while a level 0 agent j chooses to move down. Each agent will obtain a reward of 15 while the whole team gets 30. Agent i modeled at level 1 and modeling j at level 0 thinks that j will move down, and its own best response to predicted j\u2019s behavior is to move left. Analogously, a level 1 agent j would choose to move down. A level 2 agent i will predict that a level 1 j moves down as mentioned previously, due to which it decides to move left. Analogously, a level 2 agent j continues to decide to move down. We may apply this reasoning inductively to conclude\nthat level l agents i and j would move left and down, respectively, thereby earning a joint reward of 30. However, the optimal team behavior in this setting is for i to move right and j to move up thereby obtaining a team reward of 40.\nClearly, these finite hierarchical systems preclude the agents\u2019 optimal teamwork due to the bounded reasoning of the lowest level (level 0) agents. The following observation states this more formally:\nObservation 1 There exist cooperative multiagent settings in which rational intentional agents each modeled using the finitely-nested I-DID (or I-POMDP) may not choose the jointly optimal behavior of working together as a team.\nNotice that an offline specification of level 0 models in cooperative settings is necessarily incomplete. This is because the true benefit of cooperative actions often hinges on others performing supporting actions, which by themselves may not be highly rewarding to the agent. Thus, despite solving the level 0 models optimally, the agent may not engage in optimal team behavior.\nIn general, this observation holds for cooperative settings where the self-maximizing level 0 models result in predictions that are not consistent with team behavior. Of course, settings may exist where the level 0 model\u2019s solution coincides with the policy of a teammate thereby leading to joint teamwork. Nevertheless, the significance of this observation is that we cannot rely on finitely-nested I-DIDs to generate optimal teammate policies.\nWe observe that team behavior is challenging in the context we study above because of the bounded rationality imposed by assuming the existence of a level 0. The boundedness precludes modeling others at the same level as one\u2019s own \u2013 as an equal teammate. However, at the same time, this imposition is, (a) motivated by reasons of computability, which allow us to operationalize such a paradigm; and (b) allows us to avoid some self-contradicting, and therefore impossible beliefs, which exist when infinite belief hierarchies are considered [7]. Consequently, this work is of significance because it may provide us a way of generating optimal team behavior in finitely-nested frameworks, which so far have been utilized for noncooperative settings, and provides a principled way to solving ad hoc teamwork problems."}, {"heading": "3.2 Augmented Level 0 Models that Learn", "text": "We present a principled way to induce team behavior by enhancing the reasoning ability of lower-level agents. While it is difficult to a priori discern the benefit of moving up for agent j in Fig. 3, it could be experienced by the agent. Specifically, it may explore moving in different directions including moving up and learn about its benefit from the ensuing, possibly indirect, team reward.\nSubsequently, we may expect an agent to learn policies that are consistent with optimal teammate behavior because the corresponding actions provide large reinforcements. For example, given that agent i moves right in Fig. 3, j may choose to move up in its exploration, and thereby receive a large reinforcing reward. This observation motivates formulating level 0 models that utilize RL to generate the predicted policy for the modeled agent. Essentially, we expect that RL with its explorations would compensate for the lack of teamwork caused by bounded reasoning in finitely-nested I-DIDs.\nBecause the level 0 models generate policies for the modeled agent only, we focus on the modeled agent\u2019s learning problem. However, the rewards in the multiagent setting usually depend on actions of all agents due to which the other agent must be simulated as well. The other agent\u2019s actions are a part of the environment and its presence hidden at level 0, thereby making the problem one of\nsingle-agent learning as opposed to one of multi-agent learning. We augment the level 0 model space, denoted as M\u2032j,0, by additionally attributing a new type of level 0 model to the other agent j: m\u2032j,0 = \u3008bj,0, \u03b8\u0302 \u2032 j\u3009, where bj,0 is j\u2019s belief and \u03b8\u0302 \u2032\nj,0 is the frame of the learning model. The frame, \u03b8\u0302\u2032j,0, consists of the learning rate, \u03b1; a seed policy, \u03c0\u2032j , of planning horizon, T , which includes a fair amount of exploration; and the chance and utility nodes of the DID along with a candidate policy of agent i, which could be an arbitrary policy from i\u2019s policy space, \u03a0i, as agent i\u2019s actual behavior is not known. This permits a proper simulation of the environment.\nThis type of model, m\u2032j,0, differs from a traditional DID based level 0 model in the aspect that m\u2032j,0 does not describe the offline planning process of how agent j optimizes its decisions, but allows j to learn an optimal policy, \u03c0j , with the learning rate, either online or in a simulated setting. Different models of agent j differ not only in their learning rates and seed policies, but also in the i\u2019s candidate policy that is used. In principle, while the learning rate and seed policies may be held fixed, j\u2019s model space could be as large as i\u2019s policy space. Consequently, our augmented model space becomes extremely large."}, {"heading": "3.3 Model-Free Learning: Generalized MCESP", "text": "Learning has been applied to solve decision-making problems in both single- and multi-agent settings. Both model based [9] and model free [15, 18] learning approaches exist for solving POMDPs. In the multiagent context, Banerjee et al. [4] utilized a semi-model based distributed RL for finite horizon DEC-POMDPs. Recently, Ng et al. [16] incorporated model learning in the context of IPOMDPs where the subject agent learns the transition and observation probabilities by augmenting the interactive states with frequency counts.\nBecause the setting in which the learning takes place is partially observable, RL approaches that compute a table of values for stateaction pairs do not apply. We adapt Perkin\u2019s Monte Carlo Exploring Starts for POMDPs (MCESP) [18], which has been shown to learn good policies in fewer iterations while making no prior assumptions about the agent\u2019s models in order to achieve convergence. MCESP maintains a Q table indexed by observation, oj , and action, aj , that gives the value of following a policy, \u03c0j , except when observation, oj , is obtained at which point action, aj , is performed. An agent\u2019s policy in MCESP maps a single observation to actions over T time horizons. We generalize MCESP so that observation histories of length up to T , denoted as ~o, are mapped to actions. A table entry, Q\n\u03c0j ~o,a, is updated over every simulated trajectory of\nagent j, \u03c4 = { \u2217, a0j , r 0 j , o 1 j , a 1 j , r 1 j , \u00b7 \u00b7 \u00b7 , o T\u22121 j , a T\u22121 j , r T\u22121 j , o T j }, where rj is the team reward received. Specifically, the Q \u03c0j ~o,a value is updated as:\nQ \u03c0j ~o,a \u2190 (1\u2212 \u03b1)Q \u03c0j ~o,a + \u03b1Rpost\u2212~o(\u03c4 ) (1)\nwhere \u03b1 is the learning rate and Rpost\u2212~o(\u03c4 ) is the sum of rewards of a portion of the observation-action sequence, \u03c4 , following the first occurrence of ~o in \u03c4 , say at t\u2032: Rpost\u2212~o(\u03c4 )= \u2211T\u22121 t=t\u2032 \u03b3\ntrt, where \u03b3 \u2208 [0, 1) is the discount factor. Alternate policies are considered by perturbing the action for randomly selected observation histories.\nLevel 0 agent j learns its policy while agent i\u2019s actions are hidden in the environment. In other words, agent j needs to reason with unknown behavior of i while it learns level 0 policy using the generalized MCESP algorithm. Agent j considers the entire policy space of agent i, \u03a0i, and a fixed policy of i, \u03c0i(\u2208 \u03a0i), results in one learned j\u2019s policy, \u03c0j .\nWe show the algorithm for solving level 0 models using the gen-\neralized MCESP in Fig. 4. The algorithm takes as input agent j\u2019s model whose solution is needed and the policy of i, which becomes a part of the environment. We repeatedly obtain a trajectory, \u03c4 , of length T either by running the agent online or simulating the environment by sampling the states, actions and observations from the appropriate CPTs (lines 5-10). The trajectory is used in evaluating the value of the current policy, \u03c0j , of agent j (line 11). Initially, we utilize the seed policy contained in agent j\u2019s model. If another action, a\u2032, for the observation sequence, ~o, is optimal, we update \u03c0j to conditionally use this action, otherwise the policy remains unchanged (lines 12-13). This is followed by generating a perturbed policy in the neighborhood of the previous one (line 14), and the evaluation cycle is repeated. If the perturbation is discarded several times, we may terminate the iterations and return the current policy.\nLevel 0 agent j learns its policy while agent i\u2019s actions are a part of the environment. As we mentioned previously, agent j\u2019s level 0 model space is inclusive of the i\u2019s policy space, \u03a0i. As the space of i\u2019s policy becomes large particularly for a large planning horizon, it is intractable for j to learn a policy for all i\u2019s policies. In addition, considering that few of i\u2019s policies are actually collaborative, we formulate a principled way to reduce the full space to those policies of i, denoted as \u03a0\u0302i, that could be collaborative.\nWe begin by picking a random initial policy of i and using it in the frame of a new model of j. We apply generalized MCESP to this frame to obtain a candidate agent j\u2019s policy, \u03c01j . Next, both the initial policy of j used by MCESP and i\u2019s policy is set to \u03c01j . MCESP then checks for the neighbors of \u03c01j , which would improve on the joint utility of (\u03c01j ,\u03c0i = \u03c0 1 j ). If successful, an improved neighboring policy, say \u03c02j , is returned. This ensures that the joint utility of (\u03c02j ,\u03c0 1 j ) is greater than (\u03c0 1 j ,\u03c0 1 j ). We continue these iterations setting \u03c0i as \u03c02j and using \u03c0 2 j as the seed policy. MCESP may not improve on \u03c01j if \u03c0 1 j is the (local) best response to \u03c0i = \u03c0 1 j . Otherwise, both \u03c01j and \u03c0 2 j are added to the set of candidate predictions of level 0 behavior of j. The process is restarted with a different random policy of agent i. We demonstrate this method on the 3\u00d73 Grid domain in Fig. 5."}, {"heading": "3.4 Augmented I-DID Solutions", "text": "Solving augmented I-DIDs is similar to solving the traditional I-DIDs except that the candidate models of the agent at level 0 may be learning models. We show the revised algorithm in Fig. 6. When the level 0 model is a learning model, the algorithm invokes the method LEVEL 0 RL shown in Fig. 4. Otherwise, it follows the same procedure as shown in Fig. 2 to recursively solve the lower level models.\nWhile we consider a reduced space of agent i\u2019s policies in a principled way, and therefore agent j\u2019s learning models, we may further reduce agent j\u2019s policy space by keeping top-K policies of j, K > 0, in terms of their expected utilities (line 11 in Fig. 4). Observe that across models that differ in i\u2019s policy and with the same initial belief, the team behavior(s) is guaranteed to generate the largest utility in a cooperative problem. This motivates focusing on models with higher utilities. Hence, the filtering of j\u2019s policy space may not compromise the quality of I-DID solutions at level 1. However, because MCESP may converge to a local optima, the resulting topK policies are not guaranteed to include j\u2019s optimal collaborative policies in theory, although as our experiments demonstrate, we often obtain the optimal team behavior. As the number of optimal policies is unknown, we normally use a sufficiently large K value.\nAgent j\u2019s policy space will be additionally reduced because be-\nhaviorally equivalent models \u2013 learning and other models with identical solutions \u2013 will be clustered [25]. In summary, we take several steps to limit the impact of the increase in j\u2019s model space. Using a subset of i\u2019s policies preempts solving all j\u2019s models at level 0 while the top-K technique removes possibly non-collaborative policies."}, {"heading": "4. EXPERIMENTAL RESULTS", "text": "Our experiments show that I-DIDs augmented with level 0 models that learn facilitate team behavior, which was previously implausible. In addition, we show the applicability of Aug. I-DIDs to ad hoc teamwork in a setting similar to the one used by Wu et al. ([24]). We empirically evaluate the performance in three wellknown cooperative domains involving two agents, i and j: 3 \u00d7 3 grid meeting (Grid) [6], box-pushing (BP) [21], and multi-access broadcast channel (MABC) [12]. In the BP domain, each agent intends to push either a small or large box into the goal region. The agents\u2019 rewards are maximum when both of them cooperatively push the large box into the goal. In the MABC problem, nodes need to broadcast messages to each other over a channel. Only one node may broadcast at a time, otherwise a collision occurs. The nodes attempt to maximize the throughput of the channel.\nWe summarize the domain properties and parameter settings of the Aug. I-DID in Table 1. Note that |M0j | is the number of initial models of agent j at level 0 and \u03a0\u0302i is the subset of i\u2019s policies generated using the approach mentioned earlier, allowing us to reduce the full space of j\u2019s policies to those that are possibly collaborative."}, {"heading": "4.1 Teamwork in Finitely-Nested I-DIDs", "text": "Experimental Settings. We implemented the algorithm AUGMENTED I-DID as shown in Fig. 6 including an implementation of the generalized MCESP for performing level 0 RL.\nWe demonstrate the performance of the augmented framework toward generating team behavior. We compare the expected utility of agent i\u2019s policies with the values of the optimal team policies obtained using an exact algorithm, GMAA*-ICE, for Dec-POMDP formulations of the same problem domains [22]. We also compare with the values obtained by traditional I-DIDs. All I-DIDs are\nsolved using the exact discriminative model update (DMU) method [25]. For both traditional and Aug. I-DIDs, we utilized |M0j | models at level 0 that differ in the initial beliefs or in the frame. We adopt two model weighting schemes: (a) Uniform: all policies are uniformly weighted; (b) Diverse: let policies with larger expected utility be assigned proportionally larger weights. Note that we maintain the top K by expected utility (out of |M0j |) learning and non-learning models only while solving Aug. I-DIDs. Though the model space is significantly enlarged by the learning policies, Aug. I-DIDs become tractable when both top-K and equivalence techniques are applied. Performance Evaluation. In Table 2, we observe that the Aug. I-DID significantly outperforms the traditional I-DID where level 0 agent j does not learn. Aug. I-DID\u2019s solutions approach the globally optimal team behavior as generated by GMAA*-ICE. In cooperative games, the globally optimal solution is the pareto optimal Nash equilibrium. We observe that the larger weights on the learned policies lead to better quality i\u2019s policies. This restates the importance of the augmented level 0 j\u2019s models that learn. The small gap from the optimal DEC-POMDP value is due to the uncertainty over different models of j. Note that DEC-POMDPs are informed about the initial belief setting (and do not face the issue of bounded rationality) whereas, I-DIDs are not and they consider the entire candidate model space of j. Furthermore, the Aug. I-DID generates the optimal team behavior identical to that provided by GMAA*-ICE when i\u2019s belief places probability 1 on the true model of j, as is the case for Dec-POMDPs. Increasing K does not have a significant impact on the performance as K is large enough to cover a large fraction of collaborative policies of agent j including the optimal teammate.\nIn Fig. 7, we illustrate the reduction of model space that occurs due to smaller values of K, which facilitates efficiency in the solution of the Aug. I-DID. Though the augmented level 0 model space is much larger than that of its traditional counterparts, the growth in the number of models is limited due to the top-K heuristic."}, {"heading": "4.2 Applications to Ad Hoc Teams", "text": "Experimental Settings. We test the performance of the augmented I-DIDs in ad hoc applications involving different teammate types particularly when the teammates\u2019 policies are not effective in advancing the joint goal (i.e. ad hoc) and compare it with a wellknown ad hoc planner, OPAT. Teammate types include: (a) Random - when the teammate plays according to a randomly generated action sequence for the entire length of the run. Some predefined random seeds are used to guarantee that each test has the same action sequences. (b) Predefined - when the teammate plays according to some predefined patterns which are sequences of random actions with some fixed repeated lengths that are randomly chosen at the beginning of each run. For example, if the action pattern is\u201c1324\u201d and the repetition value is 2, the resulting action sequence will be \u201c11332244\u201d. (c) Optimal - when the teammate plays rationally and adaptively. OPAT uses an optimal teammate policy for simulations, which is computed offline with the help of a generative model by value iteration. Note that OPAT in its original form assumes perfect observability of the state and joint actions. For comparison, we generalized OPAT to partially observable settings by considering observation sequences.\nAdditionally, in order to speed up the generation of RL models at level 0, we implemented an approximate version of our generalized MCESP called the Sample Average Approximation (MCESPSAA) that estimates action values by taking a fixed number of sample trajectories and then comparing the sample averages [18]. We used a sample size of n=25 trajectories to compute the approximate value of the policy that generated them, for MCESP-SAA. We set \u03b1=0.9, and terminate the RL (line 15 in Fig. 4) if no policy changes are recommended after taking n samples of the value of each observation sequence-action pair [18]. We also tested with some domain-specific seed policies to investigate speedup in the convergence of MCESP.\nSimulations were run for 20 steps and the average of the cumulative rewards over 10 trials are reported for similar teammate settings for the 3 problems. We show that the augmented I-DID solution significantly outperforms OPAT solutions in all problem domains for random and predefined teammates while performing comparably for optimal ones. Performance Evaluation. Table 3 shows that I-DIDs significantly outperform OPAT especially when the other agents are random or predefined types in all three problem domains (Student\u2019s t-test, pvalue \u2264 0.001 for both) except when the teammate is of type predefined in the MABC problem where the improvement over OPAT was not significant at the 0.05 level (p-value = 0.0676). Aug. I-"}, {"heading": "BP T=20, look-ahead=3", "text": "DID\u2019s better performance is in part due to the sophisticated belief update that gradually increases the probability on the true model if it is present in agent j\u2019s model space as shown in Fig. 8 for MABC. As expected, both OPAT and Aug. I-DID based ad hoc agent perform better when the other agent in the team is optimal in comparison to random or predefined type. Aug. I-DIDs perform significantly better than OPAT when faced with optimal teammates for the BP domain, while the results for the other domains are similar.\nIn summary, the Aug. I-DID maintains a probability distribution over different types of teammates and updates both the distribution and types over time, which differs from OPAT\u2019s focus on a single optimal behavior of teammates during planning. Consequently, Aug. I-DIDs allow better adaptivity as examined above. Further experiments on the robustness of Aug. I-DIDs in dynamic ad hoc settings showed that agent i obtained significantly better average rewards compared to OPAT (p-value = 0.042) for the setting where the other agent is of type predefined and after 15 steps is substituted by an optimal type for the remaining 15 steps in the MABC domain.\nIn Fig. 9, we show the online run times for the Aug. I-DID and generalized OPAT approaches on the three problem domains. Expectedly, OPAT takes significantly less time because it approximates the problem by solving a series of stage games modeling the other agent using a single type. In the case of Aug. I-DIDs, we observe that generating and solving the added learning models consume the major portion of the total time. We show the learning overhead for Grid, BP, and the MABC domains in red in the figure. To reduce this overhead and speed up Aug. I-DIDs, an avenue for future work is to try other RL methods in place of MCESP."}, {"heading": "4.3 Scalability Results", "text": "Although we recognize that the learning component (MCESP) is the bottleneck to scaling augmented I-DIDs for larger problems, we were successful in obtaining the optimal teammate policies using augmented I-DIDs (same as those computed by GMAA*-ICE) in the 4 \u00d7 4 grid, BP for T=4, and MABC for T=5. For these larger problems, we also noticed a significant improvement in the values obtained by augmented I-DIDs over their traditional counterparts as shown in Table 2. In the larger 4 \u00d7 4 grid domain for T=3, the optimal team value of 29.6 is achieved by the augmented I-DID compared to 19.82 obtained by solving the traditional I-DID. A better substitute for MCESP and other approximation techniques, will allow us to further scale-up augmented I-DIDs."}, {"heading": "5. DISCUSSION AND CONCLUSION", "text": "Self-interested individual decision makers face hierarchical (or nested) belief systems in their multiagent planning problems. In this paper, we explicate one negative consequence of bounded rationality: the agent may not behave as an optimal teammate. In the I-DID framework that models individual decision makers who recursively model other agents, we show that reinforcement learning integrated with the planning allows the models to produce sophisticated policies. For the first time, we see the principled and comprehensive emergence of team behavior in I-DID solutions facilitating I-DIDs\u2019 application to ad hoc team settings for which they are just naturally well-suited for. We show that integrating learning in the context of I-DIDs helps us provide a solution to a few fundamental challenges in ad hoc teamwork \u2013 building a single autonomous agent that can plan individually in partially observable environments by adapting to different kinds of teammates while making no assumptions about its teammates\u2019 behavior or beliefs and seeking to converge to their true types. Augmented I-DIDs compare well with a standard baseline algorithm, OPAT.\nWhile individual decision-making frameworks such as I-POMDPs and I-DIDs are thought to be well suited for non-cooperative domains, we show that they may be applied to cooperative domains as well. Integrating learning while planning provides a middle ground (or a bridge) between multiagent planning frameworks such as Dec-POMDPs and joint learning for cooperative domains [17]. Additionally, augmented I-DIDs differentiate themselves from other centralized cooperative frameworks by focusing on the behavior of an individual agent in a multiagent setting. While we recognize that the introduction of learning-based models adds a significant challenge to scaling I-DIDs for larger problems, we successfully obtained optimal teammate policies using Aug. I-DIDs in the 4\u00d74 Grid and BP using a combination of intuitive pruning techniques. By allowing models formalized as I-DIDs or DIDs to vary in the beliefs and frames, we considered an exhaustive and general space of models during planning. The convergence of RL is not predicated on any prior assumptions about other\u2019s models. Immediate lines of future work involve improving the scalability of the framework, particularly its learning component, by utilizing larger problems."}, {"heading": "6. REFERENCES", "text": "[1] B. Adam and E. Dekel. Hierarchies of beliefs and common\nknowledge. International Journal of Game Theory, 1993. [2] S. Albrecht and S. Ramamoorthy. A game-theoretic model\nand best-response learning method for ad hoc coordination in multiagent systems (extended abstract). In AAMAS, pages 1155\u20131156, 2013.\n[3] R. J. Aumann. Interactive epistemology II: Probability. International Journal of Game Theory, 28:301\u2013314, 1999.\n[4] B. Banerjee, J. Lyle, L. Kraemer, and R. Yellamraju. Solving finite horizon decentralized pomdps by distributed reinforcement learning. In AAMAS Workshop on MSDM, pages 9\u201316, 2012.\n[5] D. S. Bernstein, R. Givan, N. Immerman, and S. Zilberstein. The complexity of decentralized control of Markov decision processes. Mathematics of Operations Research, 27(4):819\u2013840, 2002.\n[6] D. S. Bernstein, E. A. Hansen, and S. Zilberstein. Bounded policy iteration for decentralized pomdps. In IJCAI, 2005.\n[7] K. Binmore. Essays on Foundations of Game Theory. Pittman, 1982.\n[8] C. F. Camerer, T.-H. Ho, and J.-K. Chong. A cognitive hierarchy model of games. The Quarterly Journal of Economics, 119(3):861\u2013898, 2004.\n[9] L. Chrisman. Reinforcement learning with perceptual aliasing: the perceptual distinctions approach. In AAAI, pages 183\u2013188, 1992.\n[10] P. Doshi, Y. Zeng, and Q. Chen. Graphical models for interactive pomdps: Representations and solutions. JAAMAS, 18(3):376\u2013416, 2009.\n[11] P. Gmytrasiewicz and P. Doshi. A framework for sequential planning in multiagent settings. JAIR, 24:49\u201379, 2005.\n[12] E. A. Hansen, D. S. Bernstein, and S. Zilberstein. Dynamic programming for partially observable stochastic games. In AAAI, pages 709\u2013715, 2004.\n[13] T. N. Hoang and K. H. Low. Interactive pomdp lite: Towards practical planning to predict and exploit intentions for interacting with self-interested agents. In IJCAI, pages 2298\u20132305, 2013.\n[14] J. Mertens and S. Zamir. Formulation of bayesian analysis for games with incomplete information. International Journal of Game Theory, 14:1\u201329, 1985.\n[15] N. Meuleau, L. Peshkin, K. eung Kim, and L. P. Kaelbling. Learning finite-state controllers for partially observable environments. In UAI, pages 427\u2013436, 1999.\n[16] B. Ng, K. Boakye, C. Meyers, and A. Wang. Bayes-adaptive interactive pomdps. In AAAI, 2012.\n[17] L. Panait and S. Luke. Cooperative multi-agent learning: The state of the art. JAAMAS, 11(3):387\u2013434, 2005.\n[18] T. J. Perkins. Reinforcement learning for pomdps based on action values and stochastic optimization. In AAAI, pages 199\u2013204, 2002.\n[19] D. Pynadath and S. Marsella. Minimal mental models. In AAAI, pages 1038\u20131044, 2007.\n[20] D. V. Pynadath and M. Tambe. The communicative multiagent team decision problem: Analyzing teamwork theories and models. Journal of Artificial Intelligence Research, 16:389\u2013423, 2002.\n[21] S. Seuken and S. Zilberstein. Improved memory-bounded dynamic programming for decentralized pomdps. In UAI, 2007.\n[22] M. Spaan and F. Oliehoek. The multiagent decision process toolbox: Software for decision-theoretic planning in multiagent systems. In AAMAS Workshop on MSDM, pages 107\u2013121, 2008.\n[23] P. Stone, G. A. Kaminka, S. Kraus, and J. S. Rosenschein. Ad hoc autonomous agent teams: Collaboration without pre-coordination. In AAAI, 2010.\n[24] F. Wu, S. Zilberstein, and X. Chen. Online planning for ad hoc autonomous agent teams. In IJCAI, pages 439\u2013445, 2011.\n[25] Y. Zeng and P. Doshi. Exploiting model equivalences for solving interactive dynamic influence diagrams. JAIR, 43:211\u2013255, 2012."}], "references": [{"title": "Hierarchies of beliefs and common knowledge", "author": ["B. Adam", "E. Dekel"], "venue": "International Journal of Game Theory", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1993}, {"title": "A game-theoretic model and best-response learning method for ad hoc coordination in multiagent systems (extended abstract)", "author": ["S. Albrecht", "S. Ramamoorthy"], "venue": "AAMAS, pages 1155\u20131156", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2013}, {"title": "Interactive epistemology II: Probability", "author": ["R.J. Aumann"], "venue": "International Journal of Game Theory, 28:301\u2013314", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1999}, {"title": "Solving finite horizon decentralized pomdps by distributed reinforcement learning", "author": ["B. Banerjee", "J. Lyle", "L. Kraemer", "R. Yellamraju"], "venue": "AAMAS Workshop on MSDM, pages 9\u201316", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2012}, {"title": "The complexity of decentralized control of Markov decision processes", "author": ["D.S. Bernstein", "R. Givan", "N. Immerman", "S. Zilberstein"], "venue": "Mathematics of Operations Research, 27(4):819\u2013840", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2002}, {"title": "Bounded policy iteration for decentralized pomdps", "author": ["D.S. Bernstein", "E.A. Hansen", "S. Zilberstein"], "venue": "IJCAI", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2005}, {"title": "Essays on Foundations of Game Theory", "author": ["K. Binmore"], "venue": "Pittman", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1982}, {"title": "A cognitive hierarchy model of games", "author": ["C.F. Camerer", "T.-H. Ho", "J.-K. Chong"], "venue": "The Quarterly Journal of Economics, 119(3):861\u2013898", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2004}, {"title": "Reinforcement learning with perceptual aliasing: the perceptual distinctions approach", "author": ["L. Chrisman"], "venue": "AAAI, pages 183\u2013188", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1992}, {"title": "Graphical models for interactive pomdps: Representations and solutions", "author": ["P. Doshi", "Y. Zeng", "Q. Chen"], "venue": "JAAMAS, 18(3):376\u2013416", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2009}, {"title": "A framework for sequential planning in multiagent settings", "author": ["P. Gmytrasiewicz", "P. Doshi"], "venue": "JAIR, 24:49\u201379", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2005}, {"title": "Dynamic programming for partially observable stochastic games", "author": ["E.A. Hansen", "D.S. Bernstein", "S. Zilberstein"], "venue": "AAAI, pages 709\u2013715", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2004}, {"title": "Interactive pomdp lite: Towards practical planning to predict and exploit intentions for interacting with self-interested agents", "author": ["T.N. Hoang", "K.H. Low"], "venue": "IJCAI, pages 2298\u20132305", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2013}, {"title": "Formulation of bayesian analysis for games with incomplete information", "author": ["J. Mertens", "S. Zamir"], "venue": "International Journal of Game Theory, 14:1\u201329", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1985}, {"title": "K", "author": ["N. Meuleau", "L. Peshkin"], "venue": "eung Kim, and L. P. Kaelbling. Learning finite-state controllers for partially observable environments. In UAI, pages 427\u2013436", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1999}, {"title": "Bayes-adaptive interactive pomdps", "author": ["B. Ng", "K. Boakye", "C. Meyers", "A. Wang"], "venue": "AAAI", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2012}, {"title": "Cooperative multi-agent learning: The state of the art", "author": ["L. Panait", "S. Luke"], "venue": "JAAMAS, 11(3):387\u2013434", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2005}, {"title": "Reinforcement learning for pomdps based on action values and stochastic optimization", "author": ["T.J. Perkins"], "venue": "AAAI, pages 199\u2013204", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2002}, {"title": "Minimal mental models", "author": ["D. Pynadath", "S. Marsella"], "venue": "AAAI, pages 1038\u20131044", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2007}, {"title": "The communicative multiagent team decision problem: Analyzing teamwork theories and models", "author": ["D.V. Pynadath", "M. Tambe"], "venue": "Journal of Artificial Intelligence Research, 16:389\u2013423", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2002}, {"title": "Improved memory-bounded dynamic programming for decentralized pomdps", "author": ["S. Seuken", "S. Zilberstein"], "venue": "UAI", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2007}, {"title": "The multiagent decision process toolbox: Software for decision-theoretic planning in multiagent systems", "author": ["M. Spaan", "F. Oliehoek"], "venue": "AAMAS Workshop on MSDM, pages 107\u2013121", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2008}, {"title": "Ad hoc autonomous agent teams: Collaboration without pre-coordination", "author": ["P. Stone", "G.A. Kaminka", "S. Kraus", "J.S. Rosenschein"], "venue": "AAAI", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2010}, {"title": "Online planning for ad hoc autonomous agent teams", "author": ["F. Wu", "S. Zilberstein", "X. Chen"], "venue": "IJCAI, pages 439\u2013445", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2011}, {"title": "Exploiting model equivalences for solving interactive dynamic influence diagrams", "author": ["Y. Zeng", "P. Doshi"], "venue": "JAIR, 43:211\u2013255", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2012}], "referenceMentions": [{"referenceID": 22, "context": "Ad hoc teamwork involves a team of agents coming together to cooperate without any prior coordination or communication protocols [23].", "startOffset": 129, "endOffset": 133}, {"referenceID": 19, "context": "gent team decision problem [20] and the decentralized partially observable Markov decision process (DEC-POMDP) [5] utilize centralized planning and distribution of local policies among agents, which are assumed to have common initial beliefs.", "startOffset": 27, "endOffset": 31}, {"referenceID": 4, "context": "gent team decision problem [20] and the decentralized partially observable Markov decision process (DEC-POMDP) [5] utilize centralized planning and distribution of local policies among agents, which are assumed to have common initial beliefs.", "startOffset": 111, "endOffset": 114}, {"referenceID": 23, "context": "This includes an algorithm for online planning in ad hoc teams (OPAT) [24] that solves a series of stage games assuming that other agents are optimal with the utility at each stage computed using Monte Carlo tree search.", "startOffset": 70, "endOffset": 74}, {"referenceID": 1, "context": "Albrecht and Ramamoorthy [2] model the uncertainty about other agents\u2019 types and construct a Harsanyi-Bayesian ad hoc game that is solved online using learning.", "startOffset": 25, "endOffset": 28}, {"referenceID": 10, "context": "In this regard, recognized frameworks include the interactive POMDP (I-POMDP) [11], its graphical counterpart, interactive dynamic influence diagram (I-DID) [10], and I-POMDP Lite [13].", "startOffset": 78, "endOffset": 82}, {"referenceID": 9, "context": "In this regard, recognized frameworks include the interactive POMDP (I-POMDP) [11], its graphical counterpart, interactive dynamic influence diagram (I-DID) [10], and I-POMDP Lite [13].", "startOffset": 157, "endOffset": 161}, {"referenceID": 12, "context": "In this regard, recognized frameworks include the interactive POMDP (I-POMDP) [11], its graphical counterpart, interactive dynamic influence diagram (I-DID) [10], and I-POMDP Lite [13].", "startOffset": 180, "endOffset": 184}, {"referenceID": 1, "context": "Indeed, Albrecht and Ramamoorthy [2] note the suitability of these frameworks to the problem of ad hoc teamwork but find the complexity challenging.", "startOffset": 33, "endOffset": 36}, {"referenceID": 24, "context": "While recent advances on model equivalence [25] allow frameworks such as I-DIDs to scale, another significant challenge that merits attention is due to the finitely-nested modeling used in these frameworks, which assumes the presence of level 0 models that do not explicitly reason about others [1, 3, 8, 14].", "startOffset": 43, "endOffset": 47}, {"referenceID": 0, "context": "While recent advances on model equivalence [25] allow frameworks such as I-DIDs to scale, another significant challenge that merits attention is due to the finitely-nested modeling used in these frameworks, which assumes the presence of level 0 models that do not explicitly reason about others [1, 3, 8, 14].", "startOffset": 295, "endOffset": 308}, {"referenceID": 2, "context": "While recent advances on model equivalence [25] allow frameworks such as I-DIDs to scale, another significant challenge that merits attention is due to the finitely-nested modeling used in these frameworks, which assumes the presence of level 0 models that do not explicitly reason about others [1, 3, 8, 14].", "startOffset": 295, "endOffset": 308}, {"referenceID": 7, "context": "While recent advances on model equivalence [25] allow frameworks such as I-DIDs to scale, another significant challenge that merits attention is due to the finitely-nested modeling used in these frameworks, which assumes the presence of level 0 models that do not explicitly reason about others [1, 3, 8, 14].", "startOffset": 295, "endOffset": 308}, {"referenceID": 13, "context": "While recent advances on model equivalence [25] allow frameworks such as I-DIDs to scale, another significant challenge that merits attention is due to the finitely-nested modeling used in these frameworks, which assumes the presence of level 0 models that do not explicitly reason about others [1, 3, 8, 14].", "startOffset": 295, "endOffset": 308}, {"referenceID": 23, "context": "[24], and experiment with multiple well-known cooperative domains.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "We sketch I-DIDs below and refer readers to [25] for more details.", "startOffset": 44, "endOffset": 48}, {"referenceID": 18, "context": "Models that are behaviorally equivalent (BE) [19] \u2013 whose behavioral predictions for the other agent are identical \u2013 could be pruned and a single representative model can be considered.", "startOffset": 45, "endOffset": 49}, {"referenceID": 5, "context": "3 shows an ad hoc team setting of a two-agent grid meeting problem [6].", "startOffset": 67, "endOffset": 70}, {"referenceID": 6, "context": "However, at the same time, this imposition is, (a) motivated by reasons of computability, which allow us to operationalize such a paradigm; and (b) allows us to avoid some self-contradicting, and therefore impossible beliefs, which exist when infinite belief hierarchies are considered [7].", "startOffset": 286, "endOffset": 289}, {"referenceID": 8, "context": "Both model based [9] and model free [15, 18] learning approaches exist for solving POMDPs.", "startOffset": 17, "endOffset": 20}, {"referenceID": 14, "context": "Both model based [9] and model free [15, 18] learning approaches exist for solving POMDPs.", "startOffset": 36, "endOffset": 44}, {"referenceID": 17, "context": "Both model based [9] and model free [15, 18] learning approaches exist for solving POMDPs.", "startOffset": 36, "endOffset": 44}, {"referenceID": 3, "context": "[4] utilized a semi-model based distributed RL for finite horizon DEC-POMDPs.", "startOffset": 0, "endOffset": 3}, {"referenceID": 15, "context": "[16] incorporated model learning in the context of IPOMDPs where the subject agent learns the transition and observation probabilities by augmenting the interactive states with frequency counts.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "We adapt Perkin\u2019s Monte Carlo Exploring Starts for POMDPs (MCESP) [18], which has been shown to learn good policies in fewer iterations while making no prior assumptions about the agent\u2019s models in order to achieve convergence.", "startOffset": 66, "endOffset": 70}, {"referenceID": 24, "context": "Agent j\u2019s policy space will be additionally reduced because behaviorally equivalent models \u2013 learning and other models with identical solutions \u2013 will be clustered [25].", "startOffset": 164, "endOffset": 168}, {"referenceID": 23, "context": "([24]).", "startOffset": 1, "endOffset": 5}, {"referenceID": 5, "context": "We empirically evaluate the performance in three wellknown cooperative domains involving two agents, i and j: 3 \u00d7 3 grid meeting (Grid) [6], box-pushing (BP) [21], and multi-access broadcast channel (MABC) [12].", "startOffset": 136, "endOffset": 139}, {"referenceID": 20, "context": "We empirically evaluate the performance in three wellknown cooperative domains involving two agents, i and j: 3 \u00d7 3 grid meeting (Grid) [6], box-pushing (BP) [21], and multi-access broadcast channel (MABC) [12].", "startOffset": 158, "endOffset": 162}, {"referenceID": 11, "context": "We empirically evaluate the performance in three wellknown cooperative domains involving two agents, i and j: 3 \u00d7 3 grid meeting (Grid) [6], box-pushing (BP) [21], and multi-access broadcast channel (MABC) [12].", "startOffset": 206, "endOffset": 210}, {"referenceID": 21, "context": "We compare the expected utility of agent i\u2019s policies with the values of the optimal team policies obtained using an exact algorithm, GMAA*-ICE, for Dec-POMDP formulations of the same problem domains [22].", "startOffset": 200, "endOffset": 204}, {"referenceID": 24, "context": "solved using the exact discriminative model update (DMU) method [25].", "startOffset": 64, "endOffset": 68}, {"referenceID": 17, "context": "Additionally, in order to speed up the generation of RL models at level 0, we implemented an approximate version of our generalized MCESP called the Sample Average Approximation (MCESPSAA) that estimates action values by taking a fixed number of sample trajectories and then comparing the sample averages [18].", "startOffset": 305, "endOffset": 309}, {"referenceID": 17, "context": "4) if no policy changes are recommended after taking n samples of the value of each observation sequence-action pair [18].", "startOffset": 117, "endOffset": 121}, {"referenceID": 16, "context": "Integrating learning while planning provides a middle ground (or a bridge) between multiagent planning frameworks such as Dec-POMDPs and joint learning for cooperative domains [17].", "startOffset": 176, "endOffset": 180}], "year": 2013, "abstractText": "Planning for ad hoc teamwork is challenging because it involves agents collaborating without any prior coordination or communication. The focus is on principled methods for a single agent to cooperate with others. This motivates investigating the ad hoc teamwork problem in the context of individual decision making frameworks. However, individual decision making in multiagent settings faces the task of having to reason about other agents\u2019 actions, which in turn involves reasoning about others. An established approximation that operationalizes this approach is to bound the infinite nesting from below by introducing level 0 models. We show that a consequence of the finitely-nested modeling is that we may not obtain optimal team solutions in cooperative settings. We address this limitation by including models at level 0 whose solutions involve learning. We demonstrate that the learning integrated into planning in the context of interactive dynamic influence diagrams facilitates optimal team behavior, and is applicable to ad hoc teamwork.", "creator": "gnuplot 4.2 patchlevel 4 "}}}