{"id": "1502.05441", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Feb-2015", "title": "Rule-and Dictionary-based Solution for Variations in Written Arabic Names in Social Networks, Big Data, Accounting Systems and Large Databases", "abstract": "This paper 60.86 investigates the problem that dual-ignition some vitiensis Arabic co-defensive names can be written in devor multiple leveraged ways. When 78.69 someone internasional searches for robyn only one mudgal form of participation a name, billon neither exact nor mtl approximate matching is appropriate for milan returning the kaliska multiple variants hrp of fuzzed the name. bhagiratha Exact matching younge requires the user to seabass enter all forms 298.7 of ex-employees the name ayc for kaneko the zirkel search, incremented and nyrup approximate napalm matching yields bhabha names not madeley among the variations of yorn the one rebook being krukow sought. In 7:47 this paper, 81,400 we capybaras attempt 10-billion to eyetech solve h\u014dsh\u014d the problem with a mordialloc dictionary tessema of bugsy all al-zubayr Arabic hotseat names afore-mentioned mapped 51.90 to their different (red-necked alternative) writing conacyt forms. We generated bandido alternatives uncreative based on rules operadora we circumscribing derived from reviewing percolates the first pauletta names oxidization of 9. 9 million sibiricus citizens nosso and all-district former urbanworld citizens samari of intelligible Jordan. This dictionary ouran can alois be m.phil. used espiritu for both ulysse standardizing barkhamsted the written form podlesie when inserting 4.695 a new name zdrojewski into a database malaparte and trunnions for steppe searching for demoralising the name and kochta all magubane its edelson alternative inter-process written forms. Creating the dictionary kaus automatically niveles based stiff on rules drupal resulted 1688 in salzburg at least 7% rusha erroneous acceptance lumbala errors schlessinger and sonepur 7. 9% subconscious erroneous milledge rejection prevalje errors. We nine-storey addressed the pierce errors tijeras by manually rapido editing the leclerq dictionary. ducal The state-level dictionary alexandre can givatayim be of help wood-ridge to dollar-denominated real world - padel databases, chinachem with shkval the chasm qualification that manual editing does carano not guarantee devyatovskiy 100% 128.50 correctness.", "histories": [["v1", "Wed, 18 Feb 2015 23:16:00 GMT  (766kb)", "http://arxiv.org/abs/1502.05441v1", null]], "reviews": [], "SUBJECTS": "cs.DB cs.CL cs.IR", "authors": ["ahmad b a hassanat", "ghada awad altarawneh"], "accepted": false, "id": "1502.05441"}, "pdf": {"name": "1502.05441.pdf", "metadata": {"source": "CRF", "title": "Rule- and dictionary-based solution for variations in written Arabic names in social networks, big data, accounting systems, and large databases", "authors": ["Ahmad B. A. Hassanat", "Ghada Awad Altarawneh"], "emails": ["ahmad.hassanat@gmail.com,", "ghadatrn@yahoo.com"], "sections": [{"heading": null, "text": "This paper investigates the problem that some Arabic names can be written in multiple ways. When someone searches for only one form of a name, neither exact nor approximate matching is appropriate for returning the multiple variants of the name. Exact matching requires the user to enter all forms of the name for the search, and approximate matching yields names not among the variations of the one being sought.\nIn this paper, we attempt to solve the problem with a dictionary of all Arabic names mapped to their different (alternative) writing forms. We generated alternatives based on rules we derived from reviewing the first names of 9.9 million citizens and former citizens of Jordan. This dictionary can be used for both standardizing the written form when inserting a new name into a database and for searching for the name and all its alternative written forms.\nCreating the dictionary automatically based on rules resulted in at least 7% erroneous acceptance errors and 7.9% erroneous rejection errors. We addressed the errors by manually editing the dictionary. The dictionary can be of help to real world-databases, with the qualification that manual editing does not guarantee 100% correctness.\nKey words: Arabic names, name entity recognition, NLP, Database, Arabic names standardization."}, {"heading": "1. Introduction", "text": "Online social networks, accounting systems, and large database systems allow people to register their names any preprocessing being done to the names, except for the imposition of a few rules, such as the exclusion of numbers and special characters from the names.\nWhen the names being entered in Arabic and the people entering them come from different backgrounds, they enter the names with their local accents and understanding, and after a short period of time, the same name is entered in different forms. For example, the Arabic name \u201cRola\u201d \u201c \u0648\u0631\u201d might also be entered using characters such as \u201c \u0631\u201d//\u201dRla,\u201d \u201c \u0648\u0631\u201d//\u201dRulah,\u201d \u201c \u0631\u201d//\u201dRlaa,\u201d \u201c \u0631\u064f\u201d//\u201dRulaa,\u201d \u201c \u0631\u064f\u201d//\u201dRula,\u201d and so on. A Google search for these six variants resulted in 4,420,000, 356,000, 91,400, 218,000, 20,800, and 5,560 hits, respectively.\nWithout having a solution to this problem, when someone searches for such a name, that person must use exactly the variant written and stored in the database. If a banker is asked to search for the name of a customer and the banker enters the wrong alternative form, the result might be embarrassing to the banker and dissatisfactory to the customer, if the customer cannot remember the account number. The problem is more acute in accounting systems, when use of the wrong variant may result in payments being denied if, for example, the name written on a check or a bill is in a different form than the one on the ID.\nAnother example\u2014if someone searches for a friend on Facebook\u00ae and knows the person\u2019s name, but not the exact variant, the searcher must try all alternatives manually. Even if the searcher knows all of the variants, the process may be time-consuming.\nDiversity in the writing of Arabic names is due to several factors, such as ambiguity in Arabic morphology, ambiguity in Arabic orthography, and insufficient and ambiguous methods of standardizing Arabic names. To solve this problem, this paper presents a rule-based and dictionary-based solution for writing and searching for Arabic names. We created the dictionary using all of the Arabic first names generously provided to us by the Jordanian civil status and passport department. The names include 75,000 distinct row names belonging to 9.9 million (living and dead) citizens.\nEdit distance is employed (offline) to compare each name with the others to collect all similar names\u2014those with distances less than or equal to one. Then we confirmed the similarity using some rules related to the reasons behind having different written forms of Arabic names*, the confirmation continues manually to edit the resultant dictionary. Names in the resultant dictionary are indexed alphabetically to decrease searching time for names. Using edit distance alone (online) as a solution for this problem is not practical for two reasons. 1) It consumes time. 2) It yields unrelated names.\nWhen someone searches for an Arabic name in an accounting database for example, alternative forms of the name are first sought in the proposed dictionary, and then the algorithm searches for the both the entered name and the alternatives. In addition, this dictionary is important for document matching, plagiarism detection, and recognition of Arabic names for natural language processing (NLP). The problem of matching different writing forms of Arabic names has not been the subject of sufficient studies. This paper attempts to fill that gap.\nThe rest of the paper is organized as follows. Next, we discuss the motivation of the study and the previous related work. Section 3 explains the proposed solution and how to use it to solve the problem in both reading and writing modes. Section 4 presents the results of applying the rules to the collected names to form the dictionary in addition to identifying and discussing more reasons for the problem. We end this paper with the main conclusions and ideas for future work."}, {"heading": "2. Motivation and Previous Work", "text": "Technology related to Arabic Names is playing an increasingly important role in a variety of practical applications, such as Arabic NLP, named entity recognition, machine translation, crosslanguage information retrieval, and various security applications, such as anti-money laundering activities, terrorist watch lists, and criminal tracking systems.\nDespite the importance of those applications, Arabic Names has not been the subject of sufficient studies that examine linguistic issues, such as problems resulting from the writing of Arabic names in different forms. Such problems flourish in the absence of standardization, the existence of different accents, and the nature of Arabic text in which words/names are written mostly without diacritics, which does not preserve the sound of the word/name. These problems lead to\n* We mean by an \u201cArabic name\u201d any name written in Arabic text, this includes foreign names transliterated to Arabic.\na situation in which Arabic writers write the same name in different forms. See table 1 for some examples of the problem.\nArabic language is ambiguous, because Arabic names (like Arabic words generally) are written as a string of consonants with vowels usually omitted. In some cases diacritics are used to indicate short vowels, while the use of consonants to indicate long vowels is still ambiguous. This situation is major challenge for Arabic language-processing applications. There are two kinds of ambiguity\u2014morphological ambiguity and orthographical ambiguity (Soudi, Bosch, & GUNTER, 2007) and (FARGHALY & SHAALAN, 2009).\nThe morphological ambiguity occurs because Arabic is an extremely inflected language. This is indicated by changing the vowel patterns and adding various suffixes and prefixes to words. For example, the name \u201c\u0639\u0631\u0627\u0632\u201d /zarie/ (planter) might be represented in several word forms according to the context, such as \u201c\u0639\u0631\u0627: &\u201d /muzarie/ (farmer), \u201c\u0639\u0631\u0632\u201d /zara'a/ (to plant), \u201c\u0639\u0631\u0632\u201d /zari/ (the noun plant), \u201c. \u0631:&\u201d /mazrah/ (farm), etc. On the orthographic level, Arabic is also ambiguous. For example, the word \u201c; <\u201d may theoretically represent many consonant-vowel permutations, such as falah, faleh, faloh, falha, etc. (Halpern, 2007).\nArabic names are no exception, regarding the ambiguity of Arabic; both kinds of ambiguity affect the written forms of names. Normally, Arabic readers use context to resolve this indistinctness, but for machines it is a non-trivial task. In describing the ambiguity, Aboaws\nAlshamsan identified twenty different reasons why Arabic names are written differently, (Alshamsan, 2003; in Arabic). The following are some of the identified reasons:\n1. Some names are acoustically similar: e.g., the character \u201c\u0633\u201d is sometimes pronounced and written \u201c\u0635,\u201d such as in the names \u201c\u0646 @ \u201d and \u201c\u0646 @ A.\u201d\n2. Some characters are written similarly: e.g., the character \u201c\u0649\u201d is sometimes written \u201c\u064a,\u201d such as in the names \u201c \u201d and \u201c# .\u201d\n3. The characters \u201c\u0636\u201d and \u201c\u0638\u201d are often mixed: e.g., the name \u201c \u0621 \u201d becomes \u201c \u0621 \u0638 ,\u201d because they are acoustically similar.\n4. In place of \u201c\u062c\u201d writers sometimes use \u201c\u0634\u201d: e.g., the name \u201c\u0631 )\u0627\u201d becomes \u201c\u0631 E\u0627\u201d; this substitution occurs due to differences in accents.\n5. In place of \u201c\u0627\u201d writers sometimes use \u201c \u0640\u201d: e.g., the name \u201c\u0627 \u201d becomes \u201c \u0647 .\u201d\n6. In place of \u201c \u0640 \u201cwriters sometimes use \u201c\u0627\u201d: e.g., the name \u201c ' \u201c becomes \u201c ' .\u201d\n7. In place of \u201c\u0642\u201d writers sometimes use \u201c\u062c\u201d: e.g., the name \u201cH I\u201d becomes \u201cH ).\u201d This substitution occurs due to differences in accents, usually the accents of Arab Gulf people.\n8. In place of \u201c\u0630\u201d writers sometimes use \u201c\u062f\u201d or \u201c\u0636\u201d: e.g., the name \u201c K \u06be\u0630 \u201c becomes \u201c K \u06be\u062f ,\u201d and the name \u201c L&\u201d becomes \u201c M &.\u201d Acoustic similar\n9. \u201cHamzah\u201d (\u0621), is sometimes altered by deletion: e.g., the name \u201cH \u06be\u0627 \u0625\u201d becomes \u201cH \u06be\u0627 .\u201d The name can be changed to \u201c\u064a\u201d (such as when \u201c O\u0627\u0631\u201d becomes \u201c \u0627\u0631\u201d) or to \u201c\u0648,\u201d (such as when \u201c!8 \u0623\u201d becomes \u201c!8 \u0648\u201d).\n10. The Arabic definite article \u201c \u0627\u0644 \u201d (or \u201c\u0645\u0627\u201d in some accents) is sometimes added to the beginning of names: e.g., the name \u201c \u0623\u201d becomes \u201c S\u0627.\u201d\n11. The feminization Ta'a is sometimes added to the end of names: e.g., the name \u201c\u0629: \u201d becomes \u201c\u062a: .\u201d\n12. In place of \u201c\u0629\u201d writers sometimes use \u201c\u0647\u201d: e.g., the name \u201c\u0629\u062f U\u201d becomes \u201c\u0647\u062f U.\u201d\n13. Long vowels \u201c\u064a\u060c\u0648\u060c\u0627\u201d are sometimes added to represent short vowels \u201c \u0650\u25cc\u25cc\u064f\u25cc\u064e\u201d: e.g., the name \u201c\u0627 \u0646\u0631\u201d becomes \u201c \u0627 \u0646\u0627\u0631 ,\u201d the name \u201c \u0631\u064f\u201d becomes \u201c \u0648\u0631\u201d and the name \u201c\u0645 \u06be\u0631\u201d becomes \u201c\u0645 , \u0631.\u201d\n14. In place of \u201c\u0627\u201d writers sometimes use \u201c\u0621\u0627\u201d and vice versa at the end of a name: e.g., the name \u201c\u0627 U\u201d becomes \u201c\u0621\u0627 U.\u201d\n15. In place of \u201c\u0627\u201d writers sometimes use \u201c\u0649\u201d (and vice versa) at the end of a name: e.g., the name \u201c \u0648\u0631\u201d becomes \u201c \u0648\u0631.\u201d\nThis study uses a subset of Alshamsan\u2019s list of rules to identify different forms of the same name. Please refer to Alshamsan\u2019s work for more clarification and detailed explanations.\nAnother reason for variations in names (not mentioned in the previous reference) is to do with system restrictions\u2014most large databases of Arabic names are old and built on old mainframes\nthat use seven bits to represent characters. Seven bits is not enough to represent (in addition to English characters, numbers and special characters) Arabic diacritics and some characters such as \u201c\u0623,\u201d \u201c\u0625,\u201d \u201c\u0622\u201d and \u201c\u0624.\u201d Therefore, people who entered the names in the databases had to cope by writing names differently, such as by entering the name \u201c \u0623\u201d as \u201c \u0627.\u201d\nTo the best of our knowledge, no solution has yet been proposed to address variations in Arabic names, this paper attempts to fill this gap.\nA similar problem is the Romanization of Arabic names, in which several versions of the same Arabic name are transliterated in the Roman alphabet. A few solutions have been proposed to solve this problem. For example the work of (Arbabi, Fischthal, Cheng, & Bart, 1994) presents a hybrid algorithm designed to automate the transliteration of Arabic names in real time. They employed an artificial neural network (ANN) and a knowledge-based system to add vowels to Arabic names. Their ANN system filters out unreliable names, passing only the reliable names on to the knowledge-based system, which is designed for Romanization. This approach was developed at the IBM Federal Systems Company, and made available for a broad range of applications, such as for visa and document processing by border control personnel.\nRelated work was done by Mansour Alghamdi (Alghamdi, 2005). The work describes a new system for standardized Romanization of Arabic names. Alghamdi's system is composed of three major steps; the first step is diacritization of the Arabic word and removal of typing habits such as the insertion of dashes between letters. The second step is to convert Arabic graphemes into phonetic symbols. The third step is to convert sound symbols into the Roman alphabet. The work of (Al-Onaizan & Knight, 2002) also fits in this category.\nAnother similar problem is the recognition of Arabic names in a text. An example of work on this problem is the work done by (Elsebai, Meziane, & Belkredim, 2009) who used a set of keywords to guide their algorithm\u2014the phrases that most often include a person\u2019s name. In addition to making use of the Buckwalter Arabic Morphological Analyzer (Buckwalter, 2004). The dictionary and solution presented in this paper can also be applied to the problem of recognizing Arabic names in text as part of NLP.\nOur proposed method can also be used for the problem of matching personal names in English to the same names in Arabic writing. A solution to the matching problem is proposed by (Freeman, Condon, & Ackerman, 2006), who reported significant improvement by using the classic Levenshtein edit-distance algorithm.\nThe Levenshtein edit-distance algorithm (Levenshtein, 1966) has been used extensively in research on approximate-string matching. The algorithm compares two strings by counting the number of character insertions, deletions, and substitutions required to convert one string to a second. The question thus arises: why not using the edit-distance algorithm to approximate the searched name and view the most relative name?\nThis method (Edit-distance\u2014in our case) will not work properly for two reasons. First, it is unclear what the threshold for matching should be. If the threshold is 1 (the smallest threshold), using edit-distance to search for the name \u201c \u0627,\u201d for example, will yield the three totally unrelated names \u201c \u0627,\u201d\u201d \u201d and \u201c \u0627\u201d. The correct search results should contain only \u201c \u0627\u201d and its alternatives, such as \u201c \u0623.\u201d Second, using edit distance for all names in a database is\ntime-consuming\u2014the time complexity is O(NM2), where N is the number of names in the database, and M is the average length of names in the database."}, {"heading": "3. The proposed solution", "text": "The proposed solution has two modes\u2014writing and reading. In writing mode, inserting new names in a standard form in the database should be guaranteed, so the problem is solved for future searching. In reading mode, the proposed solution works for the current (corrupted) names in different databases, such as current accounting and banking systems, social media networks, and national passports systems. The solution should guarantee that all possible alternatives for the searched name are returned.\nThe proposed solution consists of two steps:\nStep 1: The entered name is pre-processed. Pre-processing includes the removal of special characters, numbers, and spaces, except for compound names such as \u201c\u0627\u0644\u0644\u0647 ,\u201d for which one space between the two words is allowed and should be enforced. This step is performed in the same way for both reading and writing modes.\nStep2: The use of our dictionary (contains all Arabic names and their alternative writing forms) made for the purpose of this study. Basically, the dictionary, is a table in a simple database, consists of all names and all their alternative writing forms, in addition to a field containing the standard writing form of each name. The standard name is the most frequent form of each name in the real database (the one that contains all Jordanian names), assuming that the most common written form is the most accurate one, because common linguistic errors often become acceptable (over time).\na) In writing mode, when a name is inserted, the dictionary is invoked and returns the standard name as an alternative for the entered name, advising the person entering data (either a user or data-entry clerk) to insert the standard name if the entered name is corrupted (an invalid written form of the name). Figure1 depicts the proposed system in the writing mode. b) In the reading mode, and when a user searches for a specific name, the dictionary is invoked and passes all alternative written forms of that name to the search algorithm. The algorithm searches for the name and all alternatives using other information, such as the family name, the birth date, etc. the user can then choose the desired name. Figure2 depicts the proposed system in the reading mode.\nData collection and dictionary preparation\nAll Jordanian names were collected from the Jordanian civil status and passport department, who generously provided us with all 75,000 distinct names; after the removal of mistakes, special characters, double middle spaces, spaces from left and right for all names, the number of distinct names was to 17992. We compared those names to find the edit distance of thre mentioned rules in section 2. considered as alternatives. A threshold of 2 is used only for rule 10, because this rule is a special case in which two characters ( Alternatives come from rule 10 might be excluded from the checked online.\nIf the compared name satisfied was then considered as an alternative to the searched name dictionary. Algorithm 1 (written creation of the dictionary.\nhe proposed system in writing mode.\nhe proposed system in reading mode.\nthe Jordanian first names in their database. The list included\nA threshold of more than 1 allows many unrelated names to be\n\u201c\u0644\u0627\u201d) are added or removed at the beginning of a name. dictionary, as this rule is easier\nthe edit distance threshold and also one of the mentioned rules, it . We did this for all names\nlater in C++) shows the list of constraints\ndramatically reduced shold 1 based on the\nto be\nin the that we used in the\n-------------------------------------------------------------------------------------------------------------------- Algorithm 1: create name dictionary -------------------------------------------------------------------------------------------------------------------- Input: text file containing all Jordanian first names (17992 distinct names) Output: text file represents the name dictionary which contains each name and its alternative forms For each name as A in Input file { List= NULL //dynamic array of strings to contain the name and its alternatives.\nAdd A to A's list For each name as B in Input file {\nD=EditDistance(A,B) If D=1 { If index(B,\u201d\u0633\u201d)= index(A,\u201d\u0635\u201d) or index(A,\u201d\u0633\u201d)= index(B,\u201d\u0635\u201d) THEN\nADD B TO A's LIST //Rule 1 If (LastChar(B)=\u201c\u064a\u201d and LastChar (A)=\u201c\u0649\u201d) or (LastChar(B)=\u201c\u0649\u201d and LastChar (A)=\u201c\u064a\u201d) THEN ADD B TO A's LIST //Rule 2 If index(B,\u201d\u0636\u201d)= index(A,\u201d\u0638\u201d) or index(A,\u201d\u0636\u201d)= index(B,\u201d\u0638\u201d) THEN ADD B TO A's LIST //Rule 3 If index(B,\u201d\u062c\u201d)= index(A,\u201d\u0634\u201d) or index(A,\u201d\u062c\u201d)= index(B,\u201d\u0634\u201d) THEN ADD B TO A's LIST //Rule 4 If (LastChar(B)=\u201c\u0627\u201d and LastChar (A)=\u201c\u0647\u201d) or (LastChar(B)=\u201c\u0647\u201d and LastChar (A)=\u201c\u0627\u201d) THEN ADD B TO A's LIST //Rule 5 & 6 If index(B,\u201d\u062c\u201d)= index(A,\u201d\u0642\u201d) or index(A,\u201d\u062c\u201d)= index(B,\u201d\u0642\u201d) THEN ADD B TO A's LIST //Rule 7 If index(B,\u201d\u0630\u201d)= index(A,\u201d\u062f\u201d) or index(A,\u201d\u0630\u201d)= index(B,\u201d\u062f\u201d) THEN ADD B TO A's LIST //Rule 8-a If index(B,\u201d\u0630\u201d)= index(A,\u201d\u0636\u201d) or index(A,\u201d\u0630\u201d)= index(B,\u201d\u0636\u201d) THEN ADD B TO A's LIST //Rule 8-b If index(B,\u201d\u0626\u201d)= index(A,\u201d\u064a\u201d) or index(A,\u201d\u0626\u201d)= index(B,\u201d\u064a\u201d) THEN ADD B TO A's LIST //Rule 9 If (LastChar(B)=\u201c\u0629\u201d and LastChar (A)=\u201c\u062a\u201d) or (LastChar(B)=\u201c\u062a\u201d and LastChar (A)=\u201c\u0629\u201d) THEN ADD B TO A's LIST //Rule 11 If (LastChar(B)=\u201c\u0629\u201d and LastChar (A)=\u201c\u0647\u201d) or (LastChar(B)=\u201c\u0647\u201d and LastChar (A)=\u201c\u0629\u201d) THEN\nADD B TO A's LIST //Rule 12 If (index(B,\u201d\u0627\u201d) not = index(A,\u201d\u0627\u201d) and index(B,\u201d\u0627\u201d)>0) or (index(A,\u201d\u0627\u201d) not = index(B,\u201d\u0627\u201d) and index(A,\u201d\u0627\u201d) >0 ) THEN ADD B TO A's LIST //Rule 13-a (long vowel \u201c\u0627\u201d) If (index(B,\u201d\u0648\u201d) not = index(A,\u201d\u0648\u201d) and index(B,\u201d\u0648\u201d)>0) or (index(A,\u201d\u0648\u201d) not = index(B,\u201d\u0648\u201d) and index(A,\u201d\u0648\u201d) >0 ) THEN ADD B TO A's LIST //Rule 13-b (long vowel \u201c\u0648\u201d) If (index(B,\u201d\u064a\u201d) not = index(A,\u201d\u064a\u201d) and index(B,\u201d\u064a\u201d)>0) or (index(A,\u201d\u064a\u201d) not = index(B,\u201d\u064a\u201d) and index(A,\u201d\u064a\u201d) >0 ) THEN\nADD B TO A's LIST //Rule 13-c (long vowel \u201c\u064a\u201d) If (Last2Chars(B)=\u201c\u0621\u0627\u201d and LastChar (A)=\u201c\u0627\u201d) or (LastChar(B)=\u201c\u0627\u201d and Last2Chars (A)=\u201c\u0621\u0627\u201d) THEN ADD B TO A's LIST //Rule 14 If (LastChar(B)=\u201c\u0627\u201d and LastChar (A)=\u201c\u0649\u201d) or (LastChar(B)=\u201c\u0649\u201d and LastChar (A)=\u201c\u0627\u201d) THEN\nADD B TO A's LIST //Rule 15 } If D=2 { If (First2Chars(B)=\u201c\u0644\u0627\u201d and First2Chars (A) not =\u201c\u0644\u0627\u201d) or (First2Chars(B) not=\u201c\u0644\u0627\u201d and First2Chars (A) =\u201c\u0644\u0627\u201d) THEN ADD B TO A's LIST //Rule 10 }\n} //for B Write List to OUTPUT file Write End-line } // for A Save OUTPUT file //end algorithm ---------------------------------------------------------------------------------------------------------------------"}, {"heading": "4. Results and discussions", "text": "The dictionary that resulted from applying our algorithm to the database of names consists of one table. The table is indexed by the first field, which contains the Arabic name, and the next 13 fields contain the alternative names, with an integer field showing how frequent each alternative\nwas in the main database. The last field contains the standard (most frequently used) form of the name.\nThe algorithm found 11330 names with at least one alternative. Despite the care we took in constructing rules and constraints, after manually checking the resultant dictionary, we found that some names were rejected as alternatives and others were wrongly accepted as alternatives. We therefore amended the dictionary manually to fix the erroneous acceptance and rejection errors. As a result of our manual editing, the number of names with at least one alternative rose to 11433. Names were grouped based on the number of alternatives, from 1 to 13. Table 2 shows the number of alternatives.\nThe number of names with 1 and 2 alternatives decreased after manual editing by 804 names. The change is due to names which satisfied the rules and Algorithm 1 constraints, but which we rejected, because they were different names. For example the name \u201c! 8 \u201d was listed as an alternative for the different name \u201c! 8 ,\u201d so we rejected it manually. By our calculation, the erroneous acceptance rate of Algorithm 1 was at least 7% for all numbers of alternatives, from 1\u201313.\nThe number of names with 3\u201313 alternatives increased after manual editing by 907 names. This reflects the manual addition of alternatives that were rejected as not satisfying the rules and Algorithm 1 constraints, but are acceptable alternatives. For example, according to the rules, the female name \u201c \u06be\u062f\u0627\u201d has only one alternative name: \u201c \u06be\u062f\u0627.\u201d However, we found and accepted two other alternatives, \u201c \u06be\u062f\u0627\u201d and \u201c \u06be\u062f,\u201d manually. By our calculation, the erroneous rejection rate of Algorithm 1 was at least 7.9%, for all numbers of alternatives, from 1\u201313.\nErroneous acceptance and rejection of alternatives occurred because 1) some names satisfied the rules despite not being alternatives, 2) some acceptable alternative names did not satisfy the\nrules, and 3) other problems occurred, which had nothing to do with the rules, and have not been mentioned in the literature. Some of the errors of the last type include:\n1. Spelling errors and typos, such as when the name \u201c\u0621\\ \u201d is written \u201c\u0621 \u0621,\u201d and the confusion of \u201cHamzah\u201d (\u201c\u0621\u201d) and \u201cEin\u201d (\u201c\u0639\u201d). (Many Arabic writers, including data-entry clerks, have not mastered the rules of Arabic \u201cHamzah\u201d.) For example, the female name \u201c\u0649\u0624\u0631\u201d included 13 misspelled variants: \u201c\u0649\u0648\u0624\u0631,\u201d \u201c\u0627\u0624\u0631,\u201d \u201c\u0647\u0624\u0631,\u201d \u201c O\u0648\u0631,\u201d \u201c O\u0648\u0631,\u201d \u201c O\u0648\u0631,\u201d \u201c\u0626\u0648\u0631,\u201d \u201c\u0627\u0648\u0631,\u201d \u201c\u0649\u0627\u0648\u0631,\u201d \u201c\u0649\u0648\u0631,\u201d \u201c O\u0631,\u201d \u201c\u0621\u0649\u0648\u0631\u201d and \u201c\u0649\u0624\u0648\u0631.\u201d This name is the one most often written differently. Table 3 shows other examples that fit this problem.\nPeople employed for data entry usual have not attained a high educational level. They are trained mostly in how to use the system, and it is assumed that they can write well. Due to the ambiguity in Arabic, we believe that writing correctly in Arabic is not an easy task; therefore, data-entry clerks need to be trained to write correctly using a computer keyboard, and only then trained to use the database.\n2. Foreign names are written in multiple ways in Arabic, mainly because some foreign sounds are not represented in the Arabic alphabet, such as the English letter \u201cg\u201d in \u201cMargret.\u201d The letter \u201cg\u201d is usually represented by \u201c\u062c,\u201d or \u201c\u063a.\u201d In the absence of standardization, the name \u201cMargret\u201d and other similar names might be written, for example, as \u201c* \u0631 )\u0631 &\u201d or \u201c* U\u0631 &.\u201d In addition, \u201cg\u201d is also transliterated sometimes as \u201c\u0642\u201d in Arabic, so the name \u201cMargo\u201d becomes \u201c%I\u0631 &,\u201d \u201c%)\u0631 &,\u201d or \u201c%U\u0631 &.\u201d The same applies to the letter \u201cs,\u201d which is sometimes transliterated as \u201cz,\u201d so that \u201cTeresa,\u201d for example, would be written \u201c\u0627: '\u201d with \u201cz\u201d or as \u201c 8 '\u201d with more of an \u201cs\u201d sound. The letter \u201ct\u201d and combination \u201cth\u201d are also often confused, so that \u201cElizabeth\u201d is transliterated to many different forms in Arabic, such as \u201c^ \u0627: \u0627\u201d and \u201c* \u0627: \u0627.\u201d Table 4 shows some examples taken from our proposed dictionary for solving these problems.\nTable 3. Some example alternative Arabic names in the dictionary that occurred due to spelling errors and typos. Empty and hidden fields mean no alternatives.\nName Alt1 Alt2 Alt3 Alt4 count Standard Name \u0621 \u0627\u0621 \u0621\\ 4 \u0621\\\n\u0621\u0627 \u0627 9 \u0627\n\u0644\u0627 '\u0621\u0627 \u0644\u0627 _ \u0627 191 \u0644\u0627 _ \u0627\n\u062f '\u0621\u0627 \u062f _ \u0627 33 \u062f _ \u0627\n# \u0627\u0631\u0621\u0627 # \u0627 \u0627 4 # \u0627 \u0627\n` \u0637\u0621\u0627 ` @ \u0627 4 ` @ \u0627\n&\u0621\u0627 \u0627 3 \u0627\n\u0641\u0648\u0624 \u0627 \u0641\u0624\u0648 \u0627 \u0641\u0624 \u0627 \u0641\u0648\u0648 \u0627 \u0641%O\u0648 \u0627 2915 \u0641\u0648\u0624 \u0627\n\u0641\u0624 \u0627 \u0641\u0624\u0648 \u0627 \u0641\u0648\u0648 \u0627 \u0641%O\u0648 \u0627 \u0641\u0648\u0624 \u0627 9 \u0641\u0648\u0624 \u0627 \u0641\u0624\u0648 \u0627 \u0641\u0624 \u0627 \u0641\u0648\u0648 \u0627 \u0641%O\u0648 \u0627 \u0641\u0648\u0624 \u0627 100 \u0641\u0648\u0624 \u0627\n\u0641%O\u0648 \u0627 \u0641\u0624\u0648 \u0627 \u0641\u0624 \u0627 \u0641\u0648\u0648 \u0627 \u0641\u0648\u0624 \u0627 5 \u0641\u0648\u0624 \u0627\n\u0641\u0648\u0648 \u0627 \u0641\u0624\u0648 \u0627 \u0641\u0624 \u0627 \u0641%O\u0648 \u0627 \u0641\u0648\u0624 \u0627 209 \u0641\u0648\u0624 \u0627\nTable 4. Examples (from our dictionary) that show alternatives of transliterated names in Arabic. Empty and hidden fields mean no additional alternatives.\nName Alt1 Alt2 Alt3 Alt4 Alt5 Alt6 Alt7 Alt8 count Standard Name\n: ' \u0631 & \u0627: ' \u0631 & \u0627: ' \u0631 & 8 ' \u0631 & \u0627: ' \u0631 & : ' \u064a\u0631 & : ' \u0649\u0631 & 3 \u0627: ' \u0631 &\n\u0627: ' \u0631 & \u0627: ' \u0631 & : ' \u0631 & 8 ' \u0631 & \u0627: ' \u0631 & : ' \u064a\u0631 & : ' \u0649\u0631 & 9 \u0627: ' \u0631 &\n\u0627: ' \u0631 & : ' \u0631 & \u0627: ' \u0631 & 8 ' \u0631 & \u0627: ' \u0631 & : ' \u064a\u0631 & : ' \u0649\u0631 & 3 \u0627: ' \u0631 &\n8 ' \u0631 & \u0627: ' \u0631 & : ' \u0631 & \u0627: ' \u0631 & \u0627: ' \u0631 & : ' \u064a\u0631 & : ' \u0649\u0631 & 3 \u0627: ' \u0631 &\n* \u0627: \u0627 ^ \u0627: \u0627 _ \u0627: \u0627 ^ : \u0627 ^ : \u0627 * \u0627: \u0627 * \u0627: \u0627 ^ \u0627: \u0627 _ \u0627: \u0627 9 ^ \u0627: \u0627\n* \u0627: \u0627 * \u0627: \u0627 * \u0627: \u0627 ^ : \u0627 ^ : \u0627 ^ \u0627: \u0627 ^ \u0627: \u0627 _ \u0627: \u0627 _ \u0627: \u0627 109 ^ \u0627: \u0627\n^ \u0627: \u0627 ^ \u0627: \u0627 * \u0627: \u0627 ^ : \u0627 ^ : \u0627 _ \u0627: \u0627 * \u0627: \u0627 _ \u0627: \u0627 * \u0627: \u0627 305 ^ \u0627: \u0627\n^ : \u0627 ^ \u0627: \u0627 * \u0627: \u0627 ^ \u0627: \u0627 ^ : \u0627 _ \u0627: \u0627 * \u0627: \u0627 _ \u0627: \u0627 * \u0627: \u0627 11 ^ \u0627: \u0627\n* )\u0631 & * ) & _ \u0631 )\u0631 & * \u0631 )\u0631 & _ )\u0631 & * U\u0631 & * U & _ U\u0631 & _ U & 102 * U &\n_ )\u0631 & * )\u0631 & * ) & _ \u0631 )\u0631 & * \u0631 )\u0631 & * U\u0631 & * U & _ U\u0631 & _ U & 21 * U &\n* U & _ \u0631 U & * \u0631 )\u0631 & _ \u0631 )\u0631 & * )\u0631 & * ) & _ )\u0631 & * U\u0631 & _ U\u0631 & 352 * U &\n* U\u0631 & _ \u0631 U\u0631 & * \u0631 )\u0631 & _ \u0631 )\u0631 & * )\u0631 & * ) & _ )\u0631 & * U & _ U\u0631 & 173 * U &\n%U\u0631 & %I\u0631 & %)\u0631 & 26 %U\u0631 &\n%I\u0631 & %)\u0631 & %U\u0631 & 21 %U\u0631 &\n%)\u0631 & %I\u0631 & %U\u0631 & 19 %U\u0631 &\n3. Compound names are sometimes written with spaces between names and sometimes without. Table 5 shows examples of how our dictionary solves this problem.\n3 @ \u0627\u0644\u0644\u0647 @ \u0627\u0644\u0644\u0647 \u0621 @ \u0627\u0644\u0644\u0647 @ 138 \u0627\u0644\u0644\u0647 @ Our dictionary shows that female names include alternatives than male names, because Arabic female names usually end with \u201c\u0649,\u201d \u201c\u0627,\u201d \u201c\u0621\u0627,\u201d \u201c. \u0640,\u201d or \u201c \u0640.\u201d These characters are important for distinguishing female names from male names with the same roots. For example, the male name \u201c! 8 \u201d becomes the female name by adding \u201c \u0640\u201d to the end to convert it to \u201c \" 8 ,\u201d or adding \u0627\u201d \u201d to convert it to \u201c \" 8 .\u201d The\nuse of many female characters results in a larger number of variations in the forms of female's names. Table 6 shows some examples of male and female names.\nA great deal of effort will need to be expended to standardize Arabic names, and it will require the cooperation of all Arab countries. This paper is just an attempt to fix and standardize names taken from the Jordanian civil status and passport department. Other experimenters may use the methodology in this paper on data from other Arab countries to create a complete Arabic names dictionary. Such a dictionary would be useful for international accounting systems, social network databases, and security tracking systems.\nInstead of creating a dictionary, other interested parties might also apply rules directly (online) while users search. The problem with this approach is that when those rules are applied to the searched name, they generate a large number of combinations, which is time-consuming both during the generation of combinations and search for each combination. Moreover, the combinations are not necessarily names or alternatives, due to erroneous acceptance errors like those we encountered, and some legitimate alternatives will be absent due to erroneous rejection errors. For both speed and accuracy we recommend the use of a dictionary solution.\nA A\u0627 A A A 573 A Indexing the field of the name in the dictionary speeds up searching of the dictionary for alternatives. The cost is O(log k), where k is the number of names in the dictionary (17992 in our case). Searching the whole targeted database (which is normally indexed by name) costs O(m log n), where m is the number of alternatives, which varies from 1 to 13, and n is the number of names in the target database. Thus the total time complexity is equivalent to O(log k) + O(m log n). Because k and m are both constants, time complexity can be approximated to O(log n). This means we did not add significant time to normal search algorithms used in the target database.\nManually work on the dictionary took us more than 500 working hours; still we do not guarantee the absence of all errors. Therefore, we will publish the dictionary on the Internet for public use, so that it can be read, but also enhanced by users. Users can thus add new names and alternatives, or even delete mistakenly accepted alternatives. After user input, the dictionary will be ready for efficient use with\ndifferent databases. Currently, the dictionary can be used within real-world databases with the caution that manual editing does not guarantee 100% correctness."}, {"heading": "5. Conclusion", "text": "In this work, we introduce a new dictionary of Jordanian first names and their different writing forms to be used by system developers, database administrators, and researchers. This dictionary is meant to solve the problem of multiple alternative written forms of names in Arabic. The problem becomes more complicated when searching databases for such names. We created the dictionary by applying rules that govern why and how different forms of the same Arabic name are created.\nDue to different types of errors and different reasons for problems, we needed to manually edit the dictionary to remove errors. During our review, we identified a number of reasons for errors, such as spelling errors and typos introduced by data-entry clerks, as well as inconsistent rendering of compound names. Therefore, we encourage database administrators to train data-entry clerks not only in how to use the system, but also, and more importantly, how to write correctly.\nWhen a user searches a database for an Arabic name, the dictionary is invoked to provide all alternatives (if any) to be searched for in the database. This frees the user from needing to enter all alternatives (if the user is even aware of all alternatives) of the name. Our solution is also important for other problems, such as document matching, translation, name entity problem, and NLP in general. Moreover, the dictionary contains a standard written form for each name, which is the most common form of the name.\nBecause we edited the dictionary manually, we cannot claim that the solution is ready for use as-is; rather, it needs further editing, and more efforts by other researchers to include other names from different Arab countries before it can be considered a comprehensive solution ready for use with different database systems.\nIn future work, we intend to extend the dictionary to include names from other Arab countries as well as other languages that use Arabic text, such as Persian and Urdu, because many names in both languages are similar to those in Arabic. The methodology, with some different rules, might even be applied to other languages such as English, because a similar problem may occur, with a greater or lesser degree of complexity, for many languages."}], "references": [{"title": "Algorithms for Romanizing Arabic names", "author": ["M. Alghamdi"], "venue": "Journal of King Saud University: Computer Sciences and Information ,", "citeRegEx": "Alghamdi,? \\Q2005\\E", "shortCiteRegEx": "Alghamdi", "year": 2005}, {"title": "Machine Transliteration of Names in Arabic Text", "author": ["Y. Al-Onaizan", "K. Knight"], "venue": "SEMITIC 02 Proceedings of the ACL-02 workshop on Computational approaches to Semitic languages,", "citeRegEx": "Al.Onaizan and Knight,? \\Q2002\\E", "shortCiteRegEx": "Al.Onaizan and Knight", "year": 2002}, {"title": "Arabic)). Discrepancies in the writing Arabic names in letters and diacritics: forms and causes. The standardization of the Romanization of Arabic proper names: the security", "author": ["I.S. Alshamsan"], "venue": null, "citeRegEx": "Alshamsan,? \\Q2003\\E", "shortCiteRegEx": "Alshamsan", "year": 2003}, {"title": "Algorithms for Arabic names transliteration", "author": ["M. Arbabi", "S.M. Fischthal", "V.C. Cheng", "E. Bart"], "venue": "IBM Journal of Research and Development ,", "citeRegEx": "Arbabi et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Arbabi et al\\.", "year": 1994}, {"title": "Buckwalter Arabic Morphological Analyzer version 2.0. Linguistic Data Consortium, (LDC Cat alog No.: LDC2004L02, ISBN 1-58563-324-0.)", "author": ["T. Buckwalter"], "venue": null, "citeRegEx": "Buckwalter,? \\Q2004\\E", "shortCiteRegEx": "Buckwalter", "year": 2004}, {"title": "A Rule Based Persons Names Arabic Extraction System", "author": ["A. Elsebai", "F. Meziane", "F.Z. Belkredim"], "venue": "Communications of the IBIMA ,", "citeRegEx": "Elsebai et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Elsebai et al\\.", "year": 2009}, {"title": "Arabic Natural Language Processing:Challenges and Solutions", "author": ["A. FARGHALY", "K. SHAALAN"], "venue": "ACM Transactions on Asian Language Information Processing", "citeRegEx": "FARGHALY and SHAALAN,? \\Q2009\\E", "shortCiteRegEx": "FARGHALY and SHAALAN", "year": 2009}, {"title": "Cross Linguistic Name Matching in English and Arabic: A 'One to Many Mapping' Extension of the Levenshtein Edit Distance Algorithm", "author": ["A.T. Freeman", "S.L. Condon", "C.M. Ackerman"], "venue": "Proceedings of the Human Language Technology Conference of the North American Chapter of the ACL (pp. 471\u2013478)", "citeRegEx": "Freeman et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Freeman et al\\.", "year": 2006}, {"title": "The challenges and pitfalls of Arabic Romanization and Arabization. Computational Approaches to Arabic Script Languages", "author": ["J. Halpern"], "venue": null, "citeRegEx": "Halpern,? \\Q2007\\E", "shortCiteRegEx": "Halpern", "year": 2007}, {"title": "Binary codes capable of correcting deletions, insertions, and reversals", "author": ["V. Levenshtein"], "venue": "Soviet Physics - Doklady ,", "citeRegEx": "Levenshtein,? \\Q1966\\E", "shortCiteRegEx": "Levenshtein", "year": 1966}, {"title": "Arabic Computational Morphology: Knowledge-Based and Empirical Methods. Netherlands: (Text, Speech, and Language", "author": ["A. Soudi", "A. Bosch", "N. GUNTER"], "venue": null, "citeRegEx": "Soudi et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Soudi et al\\.", "year": 2007}], "referenceMentions": [{"referenceID": 8, "context": "(Halpern, 2007).", "startOffset": 0, "endOffset": 15}, {"referenceID": 0, "context": "Related work was done by Mansour Alghamdi (Alghamdi, 2005).", "startOffset": 42, "endOffset": 58}, {"referenceID": 4, "context": "In addition to making use of the Buckwalter Arabic Morphological Analyzer (Buckwalter, 2004).", "startOffset": 74, "endOffset": 92}, {"referenceID": 9, "context": "The Levenshtein edit-distance algorithm (Levenshtein, 1966) has been used extensively in research on approximate-string matching.", "startOffset": 40, "endOffset": 59}], "year": 2015, "abstractText": "This paper investigates the problem that some Arabic names can be written in multiple ways. When someone searches for only one form of a name, neither exact nor approximate matching is appropriate for returning the multiple variants of the name. Exact matching requires the user to enter all forms of the name for the search, and approximate matching yields names not among the variations of the one being sought.", "creator": "PDFCreator Version 1.7.3"}}}