{"id": "1503.07159", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Mar-2015", "title": "Modeling context and situations in pervasive computing environments", "abstract": "koloman In passementerie pervasive computing scheuermann environments, hrab various entities often vokoun have to cooperate financially and usarp integrate catalyzes seamlessly slobs in brunches a \\ right-arm emph {situation} stairmasters which can, vorian thus, be short-listed considered korngold as an amalgamation of the fflewddur context transdisciplinary of ramagundam several elmeskov entities jaisingh interacting and coordinating hazrath with contofalsky each administrations other, and accomplish often performing one tororo or dirita more mosholder activities. However, none of the polledo existing becalmed context crestwood models 38.5 and ontologies address situation 106.68 modeling. 300sl In chongrong this paper, 44.62 we f2 describe the 1960-1964 design, structure firdous and implementation of pre-employment a 3.380 generic, hemionus flexible and psidium extensible macintosh context ontology antonellis called lead-up Rover Context stang Model 28,800 Ontology (ergun RoCoMO) 259.7 for context peepshow and situation modeling sam-7 in pervasive computing systems stateful and downplaying environments. We lausevic highlight several broseker limitations of two-horse the existing schylling context feca models and ontologies, such as lack loughridge of provision atpdea for foolhardy provenance, traceability, quality of vagaries context, durward multiple mehrgarh representation of contextual peche information, as xhosa well as calystegia support elegir for stech security, privacy amercian and interoperability, and sensical explain boater how orthez we milarch are datura addressing these kloza limitations in d\u00e9sir\u00e9 our quirici approach. We tempera also andi illustrate the calfee applicability mescheriakova and utility razavi of riyadh RoCoMO linzi using a despicably practical and 29.56 extensive gelo case proliferation study.", "histories": [["v1", "Tue, 24 Mar 2015 17:14:02 GMT  (1103kb,D)", "http://arxiv.org/abs/1503.07159v1", null]], "reviews": [], "SUBJECTS": "cs.CY cs.AI cs.HC", "authors": ["preeti bhargava", "shivsubramani krishnamoorthy", "ashok agrawala"], "accepted": false, "id": "1503.07159"}, "pdf": {"name": "1503.07159.pdf", "metadata": {"source": "CRF", "title": "Modeling context and situations in pervasive computing environments", "authors": ["Preeti Bhargava", "Shivsubramani Krishnamoorthy", "Ashok Agrawala"], "emails": ["prbharga@cs.umd.edu", "shiv@cs.umd.edu", "agrawala@cs.umd.edu"], "sections": [{"heading": null, "text": "Keywords\u2014Context-aware Computing, Context Modeling and Representation, Situation Modeling\nF"}, {"heading": "1 INTRODUCTION", "text": "Recent years have witnessed rapid advances in enabling technologies for pervasive computing environments - an important step being context-awareness in systems. Dey and Abowd [1] describe a context-aware system as one that \u201cuses context to provide relevant information and/or services to the user, where relevancy depends on the user\u2019s task.\u201d Context awareness enables a new class of applications in pervasive computing that can help users navigate through unfamiliar territory, find preferred restaurants nearby, receive messages in the least obtrusive manner, get extra sleep when meetings are canceled, find people with similar interests, and so on. The use of context information in these applications reduces the amount of human effort and attention that an application needs to service the user\u2019s requests.\nMoreover, in pervasive computing environments, various entities often have to cooperate and integrate seamlessly in a Situation to achieve a common objective. Thus, Situation Awareness can be defined as \u201cthe capability of the entities in pervasive computing environments to be aware of situation changes and automatically adapt themselves to such changes to satisfy user requirements, including security and privacy.\u201d and a Situation can be described as \u201ca set of contexts in the application over a\nperiod of time that affects future system behavior.\u201d [2]. A situation can be considered as an amalgamation of the context of several entities interacting and coordinating with each other, and often performing one or more activities.\nThe context model forms the underlying framework for modeling and representing context in the pervasive computing environment and context-aware systems. To support contextand situation-awareness, and adaptation of the entities in pervasive computing environments, it is necessary to model and specify context and situations in a suitable way such that the contextual information can be easily exchanged, shared and reused. As discussed in several papers including Chen et al. [3] and Krishnamoorthy et al. [4], ontologies are a powerful tool for modeling context and the encompassing situations in context-aware systems because they promote knowledge sharing and reuse across different applications and services interacting in a pervasive computing environment, thus, enhancing their interoperability. They allow context-aware systems to use existing logic reasoning mechanisms to deduce high-level, conceptual context from low-level, raw context, and handle uncertainty and inconsistency in context. They can be combined to form a more complex ontology and save the effort.\nHowever, none of the existing context models\nar X\niv :1\n50 3.\n07 15\n9v 1\n[ cs\n.C Y\n] 2\n4 M\nar 2\n01 5\n2 and ontologies address situation modeling in a dynamic environment where the situation constantly evolves. To address this limitation, we described the design of a general and intelligent context-aware middleware called Rover II and its general, flexible and extensible context model for context and situation modeling, called Rover Context Model (RoCoM), in Krishnamoorthy et al. [4] and Bhargava et al. [5]. RoCoM has four Primitives - Entity, Event, Activity and Relationship. These Primitives are the building blocks of every context-aware system or middleware built using this model. Any piece of contextual information in the system can be attached to one of these primitives and any situation can be modeled via them.\nWe introduced the Rover Context Model Ontology (RoCoMO), which is the underlying ontology for RoCoM and is currently deployed and implemented in Rover II, in [5]. In this paper, we describe its design, structure and implementation in detail. Each primitive of RoCoM corresponds to a top level concept in RoCoMO from which other concepts are derived. Our main contributions in this paper are:\n\u2022 Highlighting several shortcomings of other existing standard models and ontologies for context and situation modeling and demonstrating the utility of RoCoMO\u2019s capabilities that address those shortcomings, \u2022 Illustrating the benefits, applicability and utility of RoCoMO, as opposed to other existing models and ontologies, using a simple and practical case study for context and situation modeling in pervasive computing environments.\nThe rest of this paper is organized as follows. In Section 2, we describe a case study which we use in this paper to motivate and illustrate the benefits and utility of RoCoMO. We briefly discuss the existing approaches to context and situation modeling, and highlight their limitations in Section 3. In Section 4, we explain the design and implementation of RoCoMO and how it addresses several limitations of contemporary approaches such as lack of provision for provenance, quality of context, multiple representations of contextual information as well as support for security etc. We illustrate the benefits of RoCoMO by revisiting the case study in Section 6. We conclude and outline future work in Section 7."}, {"heading": "2 MOTIVATION", "text": "We describe a simple but practical case study here in order to motivate and illustrate the varied nature of context, and the capabilities that context models and ontologies should possess for representing and modeling this situation in real time pervasive computing systems and environments. We will return to this case study in Sections 5 and 6 to illustrate RoCoMO\u2019s modeling capabilities. For illustration, we have selected a situation from the domain of rescue and evacuation but this, by no means, restricts RoCoMO\u2019s applicability and generality.\nA fire incident takes place in a room on the fourth floor of a building on a university campus. Fire fighters and responders are using a context-aware system to coordinate the rescue efforts. A responder, using the system, gets updated readings from two temperature sensors in the room on fire. Using this contextual information, the system determines the time that responders have to evacuate the building before the whole building is engulfed in flames. The temperature information also has a quality measure attached to it to convey any inaccurate or incomplete information. Another responder is accessing the system to get confidential floor maps of the building and also determine the evacuation route people should take based on the floormaps and the time remaining.\nRepresenting and modeling this situation in a context-aware system (such as Rover II), using the existing ontologies, is not trivial. It involves interaction between several entities such as responders which perform one or more activities. The entire situation is catalyzed by an event like the fire incident and the goal of the situation is to evacuate the building. Each activity, whether being performed by the system or an entity, is driven by the goal or a sub-goal. Some of the activities can occur simultaneously, for instance, calculating the time remaining for evacuation and accessing the floor maps of the building. Other activities need to be performed sequentially - the evacuation routes can be determined only when the floor maps are available. The room has contextual information, that needs to be modeled and represented, such as the temperature readings of the room. To avoid ambiguity, the information must be clearly marked with its source (which sensor it is coming from) as well as the encoding format (whether it is in Celsius or Fahrenheit). This requires support for encoding format as well as provenance. The model should also support\n3 attachment of quality attributes to contextual information such as probability or certainty. Also, since the readings are getting updated at a fixed time interval, they should be timestamped to help determine the most recent reading. Another aspect of the system is security - only authorized personnel such as responders have access to the floor maps of the building. All these requirements call for a deeper understanding of modeling situations."}, {"heading": "3 RELATED WORK IN CONTEXT AND SITUATION MODELING", "text": "We briefly describe some of the existing context models and their underlying ontologies in this section, and examine their limitations.\nCoBrA-Ont[6] is a collection of ontologies for describing places, agents and events and their associated properties in an intelligent meetingroom domain. SOUPA[3] was developed to provide pervasive computing developers with a shared and upper ontology that combines many useful vocabularies from different consensus ontologies such as FOAF, DAML-Time, RCC, BDI, and Rei policy ontology. A full list of these well known ontologies can be found at [7].\nOther contemporary ontologies include CONON[8] where the context ontologies are divided into upper ontology and domainspecific ontologies; CoDAMoS[9] where the context ontology is centered around four entities - user, environment, platform and service; ASC/CoOL[10] that enables context awareness and interoperability; Gaia [11] that incorporates ontologies for context awareness, service discovery and matchmaking, and interoperation between entities in a pervasive computing infrastructure mainly geared towards smart spaces; and GLOSS[12] which employs ontologies for the precise understanding of various contexts and services in smart spaces.\nSeveral surveys such as those by Reichle et al. ([13], Krummenacher et al. [14] and Bettini et al. [15]) have asserted that, of all the current ontologies used for context modeling, SOUPA is the most comprehensive ontology. However, both SOUPA and CoBrA-Ont have no provision for provenance, quality of context and multiple representations. CONON enables provenance by using the concept of sensed, derived, aggregated or deduced context but lacks features\nlike comparability. Gaia takes on the challenge of modeling uncertainty and reasoning over it. However, their ontologies are restricted to the smart spaces domain. They do not model provenance either. A more detailed evaluation of all these ontologies can be found in the surveys mentioned.\nMoreover, a major shortcoming of general and exhaustive ontologies such as OpenCyc [16] is that they become too cumbersome to use in a system that is designed to be used efficiently and effectively in real time. Also, it is not possible for a small group of people to enumerate all the possible concepts and relationships between them that could be used in a practical mobile or desktop application or system. Hence, in our opinion, it is better to develop the base ontology and make it extensible for users just as most of the previous context models and ontologies have done. Our goal in this paper is to follow a similar approach and go one step further by addressing all the limitations that these existing ontologies posses.\nWe do not find much work in the literature where context-aware systems are extensively married to situational modeling. For modeling a situation (such as the Fire Incident mentioned earlier), none of the existing ontologies is adequate. This is mainly because these situations are rich and include events, which set a goal for the context-aware system to achieve, as well as entities interacting and performing a number of activities, along with their associated context. Moreover, a number of them have no provision for provenance, encoding bias and quality of context, and are often restricted to a single domain of use such as smart spaces.\nTo address all these shortcomings, RoCoMO has been designed with an extensive ontological model-driven foundation along with capabilities to model both context and situation in a coherent and cohesive fashion."}, {"heading": "4 STRUCTURE, DESIGN AND IMPLEMENTATION OF ROCOMO", "text": "Figure 1 shows how a situation can be represented in terms of the different concepts of RoCoMO - entities, events, activities and relationships. Each of them has contextual information associated with it such as location, identity etc.\nAt time t0, the Event catalyzes the contextaware system and sets the Goal for it. To achieve\nthe goal, different Entities - Entity1 and Entity2 perform a sequence of Activities, such as Activity1 and Activity2 beginning at time t1. Every activity is driven by its own goal - which can be the overall goal that is set by the event, as in case of Activity4, or a sub-goal, as in case of Activity1. Every activity has a start time, an end time and a duration associated with it (as shown on the Time scale). It has a pre-condition and a post-condition which are goal(s) that should have been met before the activity starts and once the activity ends respectively. For instance, Activity3 starts at time t2, when both SubGoal1 and SubGoal2 have been met, and ends at time t3, when its own goal, SubGoal3, has been met. The duration for this activity is t3 - t2. An activity can be atomic and noninterruptable.\nRoCoMO has been developed in OWL2 DL and has two components:\n1) RoCoM Core Ontology which is divided into two upper level ontologies: \u2022 RoCoM Domain ontology - This on-\ntology includes concepts that characterize the knowledge of the domain i.e. the primitives Entities and Events, along with concepts that represent Location and Time. Examples of entities include persons,\ndevices etc. while events can range from a simple service request to a road accident. \u2022 RoCoM Task ontology - This ontology characterizes the problem solving structure of the domain and provides primitives for describing the problem solving process i.e. Activities as well as their Goals. Examples of Activities include Calling, Scheduling etc.\n2) RoCoM Application Ontology which has concepts that extend the core ontology concepts and are specific to an application.\nFigure 2 shows a partial view of the RoCoM Core and Application Ontologies. The classes representing the primitives such as \u2018entity\u2019, \u2018event\u2019 and \u2018activity\u2019, along with \u2018location\u2019, \u2018time\u2019 and \u2018goal\u2019 are derived from the default OWL class \u2018Thing\u2019 and form the top level classes in the RoCoM Core Ontology. Each of the classes derived from these top level classes represents a different, unique and unambiguous concept in the ontology. For instance, \u2018physicalentity\u2019 is derived from \u2018entity\u2019 and can be used to denote any entity that has a physical or logical form. It has more specific derived classes such as \u2018person\u2019, \u2018device\u2019 or \u2018or-\nganization\u2019. The fourth primitive \u2018relationship\u2019 can be represented in OWL in many ways: between two classes (as a subclass/superclass), a class and an individual (as a member) or a specific relationship between two individuals (as object properties). The context of any element - entity, event or activity is represented using datatype properties in OWL.\nThe following shows an OWL code snippet for the description of an individual instance named \u201cxyz\u201d of class \u2018person\u2019 which has a relationship with another entity (represented by the object property termed \u2018daughter\u2019) and contextual information such as food preference (represented by the datatype property termed \u2018likesfood\u2019). \u3008Class rdf:about=\u201d&person;person\u201d\u3009\n\u3008 rdfs:label xml:lang=\u201den\u201d\u3009person\u3008/rdfs:label\u3009 \u3008rdfs:subClassOf rdf:resource=\u201dhttp://mind7.cs.umd.edu:8134/Rover/ physicalentity#physicalentity\u201d/\u3009\n\u3008/Class\u3009 \u3008ObjectProperty rdf:about=\u201d&person;daughter\u201d\u3009\n\u3008rdf:type rdf:resource=\u201d&owl;FunctionalProperty\u201d/\u3009 \u3008rdf:type rdf:resource=\u201d&owl;InverseFunctionalProperty\u201d/\u3009 \u3008rdfs:label xml:lang=\u201den\u201d\u3009daughter\u3008/rdfs:label\u3009 \u3008rdfs:subPropertyOf rdf:resource=\u201d&person;contact\u201d/\u3009 \u3008inverseOf rdf:resource=\u201d&person;father\u201d/\u3009 \u3008inverseOf rdf:resource=\u201d&person;mother\u201d/\u3009\n\u3008/ObjectProperty\u3009 \u3008DatatypeProperty rdf:about=\u201d&person;likesfood\u201d\u3009\n\u3008rdfs:label xml:lang=\u201den\u201d\u3009likesfood\u3008/rdfs:label\u3009 \u3008rdfs:subPropertyOf rdf:resource=\u201d&person;likes\u201d/\u3009\n\u3008/DatatypeProperty\u3009 \u3008NamedIndividual rdf:about=\u201c&person;xyz\u201d\u3009\n\u3008rdf:type rdf:resource=\u201c&person;person\u201d/\u3009 \u3008rdfs:label xml:lang=\u201cen\u201d\u3009xyz\u3008/rdfs:label\u3009 \u3008person:likesfood rdf:datatype=\u201c&xsd;string\u201d\u3009indian\u3008/person:likesfood\u3009\n\u3008/NamedIndividual\u3009\nThe core ontology can be further extended to\nconcepts specific to an application, such as MUrgency [17], to form a part of the Application Ontology. M-Urgency is a public safety application that enables mobile users to stream live video from their devices to local PSAP (Public Safety Answering Point) along with the audio stream, the real time location information and any personal and relevant information about the caller.\nThus, a simple M-Urgency scenario can involve the entities (corresponding RoCoMO classes in parentheses): caller (\u2018person\u2019), dispatcher (\u2018murgencydispatcher\u2019 extended from \u2018person\u2019) and responder (\u2018murgencyofficer\u2019 extended from \u2018person\u2019). For instance, because of an accident that is an event (\u2018murgencyevent\u2019 extended from \u2018event\u2019), a series of activities follow such as, the caller calls the police, the dispatcher accepts the call, the dispatcher assigns (\u2018murgencyassignment\u2019 extended from \u2018Assign\u2019) a responder or officer to the call etc. This is only an illustration of how the concepts in the core ontology can be extended to model concepts specific to an application."}, {"heading": "5 ANALYSIS AND EVALUATION OF RO-", "text": "COMO Bettini et al. [15] and Ye et al. [18] have specified a set of requirements that both context models\n6 and ontologies for pervasive computing environments should support. We assess RoCoM and RoCoMO on the basis of these criteria and explain how it addresses them:"}, {"heading": "5.1 Representation of static and dynamic information", "text": "Contextual information can be static i.e. those aspects of a pervasive system that are invariant, such as a person\u2019s date of birth. However, the majority of contextual information is dynamic, such as location, with its persistence being highly variable. Every element of the RoCoM ontology, beginning with the top level classes like \u2018entity\u2019, \u2018activity\u2019 and \u2018event\u2019, have their contextual information separated into two hierarchies - static and dynamic. This enables ease of distinction between contextual information that is persistent over a long period of time (static) and that which needs to be updated frequently based on its freshness (dynamic)."}, {"heading": "5.2 Representation of temporal characteristics of primitives", "text": "For every primitive such as an entity, activity or event, we have defined a time class that records properties such as its start time - time at which the event/activity started or the entity came into being, end time - time at which the event/activity ended or the entity ceased to exist (equivalent to the current time if the individual still exists), duration or life time of an individual (difference of the start time and the end time) and recurrence - frequency of repetition for an event/activity. The following OWL code snippet shows the time class: \u3008Class rdf:about=\u201dhttp://mind7.cs.umd.edu:8134/Rover/time#time\u201d\u3009\n\u3008/Class\u3009 \u3008owl :DatatypeProperty rdf:about=\u201dhttp://mind7.cs.umd.edu:8134/\nRover/time#startTime\u201d\u3009 \u3008rdfs:domain rdf:resource=\u201dhttp://mind7.cs.umd.edu:8134/Rover/ time#time/\u3009 \u3008rdfs:range rdf:resource=\u201d&xsd;dateTime\u201d/\u3009 \u3008rdfs:subPropertyOf rdf:resource=\u201d&owl;topDataProperty\u201d/\u3009 \u3008/owl:DatatypeProperty\u3009 .......... \u3008owl:DatatypeProperty rdf:about=\u201dhttp://mind7.cs.umd.edu:8134/Rover\n/time#repetition\u201d\u3009 \u3008rdfs:range:resource=\u201d&xsd;string\u201d/ \u3009 \u3008rdfs:subPropertyOf rdf:resource=\u201d&owl;topDataProperty\u201d/ \u3009\n\u3008 /owl:DatatypeProperty \u3009"}, {"heading": "5.3 Timestamping", "text": "Timestamping the dynamic contextual information allows the system to determine the freshness and versioning of the contextual information which further enables resolution of conflicts and ambiguity. In RoCoMO, the contextual information is timestamped at two levels:\n1) fine-grained level - timestamping every dynamic contextual information of an individual instance of a primitive to keep track of when it was last modified and by which entity and 2) coarse-grained level - timestamping the individual instance itself to determine when it was modified and by which entity.\nThe following OWL code snippet shows how the hasMood context of an individual xyz of the person class in RoCoMO is assigned a value happy and is timestamped to determine when the contextual information was last updated. \u3008Axiom\u3009\n\u3008annotatedTarget rdf:datatype=\u201d&xsd;string\u201d\u3009happy\u3008/annotatedTarget\u3009 \u3008rocomo-schema:timeStamp rdf:datatype=\u201d&xsd;dateTime\u201d\u3009 2012-09-18T14:00:00\u3008/rocomo-schema:timeStamp\u3009 \u3008annotatedProperty rdf:resource=\u201d&person;hasMood\u201d/\u3009 \u3008annotatedSource rdf:resource=\u201d&person;xyz\u201d/\u3009\n\u3008/Axiom\u3009"}, {"heading": "5.4 Machine-interpretable representation of contextual information, Efficient context provisioning and Granularity of context", "text": "The model and ontology must employ a machine-interpretable representation of context to tackle heterogeneity by using semantic annotations. These annotations can enable automatic exploitation and transformation of information in distributed context sharing scenarios as well as automatic context reasoning. They should provide efficient access paths to contextual information and represent it at different levels of abstraction. For instance, location of a user can be represented at a fine-grained level in terms of latitude/longitude and at a coarsegrained level in terms of the name of a city or a building.\nRoCoMO is implemented in OWL2 DL which is expressive and allows more versatile knowledge representation. In OWL, context can be represented as annotated semantics via data properties and relationships between different elements can be represented via object properties. It also enables automatic context reasoning. Also, OWL represents information hierarchically which allows efficient provisioning of context and representation at multiple levels of abstraction or granularity."}, {"heading": "5.5 Encoding bias/ Comparability", "text": "Contextual information sources constitute a variety of sensors and devices which often use different measurement and encoding systems,\n7 thus, resulting in a heterogeneous set of values describing the same entities. Hence, the context model and ontology must not depend on a particular symbol-level encoding, such as the representation of date in a particular format. It should provide means to compare and convert values with different scale and encodings.\nTo address this, we annotate any measurable contextual information with an annotation property, called \u2018scale\u2019, defined in a RoCoMO schema (This schema enables reification of every OWL statement that is part of RoCoMO). This removes the model\u2019s dependency on any particular encoding or measurement unit and also facilitates comparison or conversion from one unit to another.\nFor instance, a person\u2019s context can include height which can be in feet, meters or any other unit. Thus, for person \u201cxyz\u201d, we can represent height and its measurement unit as: \u3008Axiom\u3009\n\u3008annotatedTarget rdf:datatype=\u201d&xsd;float\u201d\u30096.0\u3008/annotatedTarget\u3009 \u3008rocomo-schema:unit rdf:datatype=\u201d&xsd;string\u201d\u3009feet\u3008/rocomo-schema:unit\u3009 \u3008annotatedProperty rdf:resource=\u201d&person2;height\u201d/\u3009 \u3008annotatedSource rdf:resource=\u201d&person2;xyz\u201d/\u3009\n\u3008/Axiom\u3009"}, {"heading": "5.6 Quality of Context (QoC)", "text": "Pervasive computing environments are highly dynamic and hence context data is characterized by properties such as incompleteness, ambiguity, uncertainty, inaccuracy, and temporal nature. For instance, in some environments, the contextual information may be incorrect due to a faulty sensor or incomplete due to lack of sufficient input. The model and ontology should be able to represent this imperfection.\nSeveral papers including Gray and Salber [19] introduced the notion of attaching information quality attributes to every piece of sensed context. To facilitate this, we have defined seven QoC attributes that model imperfection in contextual information - accuracy to represent correctness, probability or confidence to represent the certainty of being correct, coverage to represent the range, resolution to represent the smallest perceivable element, meanError to represent average error, and recurrence to measure repeatability. These annotations are defined in the RoCoMO schema and can be attached to the appropriate contextual information or a relationship and can be propagated to applications.\nFor instance, a person\u2019s context can include his/her weight which can be in kgs, pounds or any other scale. Also, the weight measure can\nhave a mean error attached to it depending on the sensitivity of the instrument. Thus, person \u201cxyz\u201d having weight 55 Kgs with an average error of 1 Kg, can be represented as: \u3008Axiom\u3009\n\u3008annotatedTarget rdf:datatype=\u201d&xsd;float\u201d\u300955.0\u3008/annotatedTarget\u3009 \u3008rocomo-schema:scale rdf:datatype=\u201d&xsd;string\u201d\u3009kgs\u3008/rocomo-schema:scale\u3009 \u3008rocomo-schema:meanError rdf:datatype=\u201d&xsd;float\u201d\u3009 1.0\u3008/rocomo-schema:meanError\u3009 \u3008annotatedProperty rdf:resource=\u201d&person2;weight\u201d/\u3009 \u3008annotatedSource rdf:resource=\u201d&person2;xyz\u201d/\u3009\n\u3008/Axiom\u3009"}, {"heading": "5.7 Provenance and Traceability", "text": "In order to provide adequate control and interpretation of contextual information, the model and ontology should provide the means to determine the source of data and transformations made to it. In RoCoMO, this is done at a coarse-grained level where we store, when the contextual information of any instance or an individual was created, when was it last modified, the last modification made to the instance and the entity by which it was made. However, we are not tracking every single modification made to every unique attribute or contextual information since this is too cumbersome at the modeling level. This can be achieved at the system level by logging context history and transformations.\nFor instance, in our case study, we require the temperature of a room along with its source, its measurement scale, its time stamp and its certainty. Thus, the following OWL snippet represents an instance of an environment having temperature reading of 100 degree Fahrenheit, with certainty 0.9, created by a sensor instance \u2018sensor1\u2019 at 2 pm on 09-18-2013. \u3008owl:NamedIndividual rdf:about=\u201d&environment;envreading1\u201d\u3009\n\u3008rdf:type rdf:resource=\u201d&environment;environment\u201d/\u3009 \u3008rdfs:label xml:lang=\u201den\u201d\u3009envreading1\u3008/rdfs:label\u3009 \u3008environment:temperature rdf:datatype=\u201d&xsd;float\u201d\u3009100.0\u3008 /environment:temperature\u3009 \u3008entity:createdBy rdf:resource=\u201dhttp://mind7.cs.umd.edu:8134/ Rover/sensor#sensor1\u201d/\u3009\n\u3008/owl:NamedIndividual\u3009 \u3008Axiom\u3009\n\u3008rocomo-schema:probability rdf:datatype=\u201d&xsd;float\u201d\u30090.9\u3008 /rocomo-schema:probability\u3009 \u3008rocomo-schema:timeStamp rdf:datatype=\u201d&xsd;dateTime\u201d\u3009 2013-09-18T14:00:00\u3008/rocomo-schema:timeStamp\u3009 \u3008owl:annotatedTarget rdf:datatype=\u201d&xsd;float\u201d\u3009100.0\u3008/owl:annotatedTarget\u3009 \u3008rocomo-schema:scale rdf:datatype=\u201d&xsd;string\u201d\u3009Fahrenheit \u3008/rocomo-schema:scale\u3009 \u3008owl:annotatedSource rdf:resource=\u201d&environment;envreading1\u201d/\u3009 \u3008owl:annotatedProperty rdf:resource=\u201d&environment;temperature\u201d/\u3009\n\u3008/owl:Axiom\u3009"}, {"heading": "5.8 Heterogeneity and Mobility", "text": "Pervasive computing environments are characterized by distribution, heterogeneity, unpredictability and unreliable communication links. Thus, the model and ontology should support these requirements and enable the aggregation\n8 and merging of the data when needed. RoCoM is an ontological model and promotes knowledge sharing and reuse across distributed systems and applications in pervasive computing environments. Hence, even if the sources of context are heterogeneous, distributed and partitioned, the contextual information can be shared and aggregated across environments."}, {"heading": "5.9 Ease of development", "text": "RoCoMO is developed on the principle of Model-Driven Development. The ontology is also available publicly. Hence, developers have adequate support for development and implementation."}, {"heading": "5.10 Flexibility, extensibility, applicability, generality, evolvability and completeness", "text": "Context models and ontologies should not be rigid but flexible and extensible. Thus, they should not be restricted to a single domain, and should be able to support new and varied application domains. They should evolve with the applications and their context needs.\nRoCoMO is structured in a modular fashion with clear distinction between the Core and Application ontologies. Also, as the applications evolve, more concepts can be added to it. Thus, it is easily extensible, flexible and evolvable. It does not target any specific domain in pervasive computing and is intended to be general and applicable across several applications and domains. As a result, we do not claim that the ontology is complete."}, {"heading": "5.11 Interoperability", "text": "Since several existing projects use standard upper ontologies, every generic ontology should be interoperable i.e. its term definitions must be consistent with other standard, generic and consensus ontologies such as SOUPA [3]. This also enables reuse of domain knowledge [8].\nWe have designed RoCoMO to be interoperable with other ontologies, for instance SOUPA[3], via the equivalentClass and equivalentProperty OWL statements. The example below shows that the RoCoMO person class is defined equivalent to the person class in SOUPA and the dateofbirth property is defined equivalent to birthDate property in SOUPA. \u3008Class rdf:about=\u201d&person;person\u201d\u3009\n\u3008rdfs:label xml:lang=\u201den\u201d\u3009person\u3008/rdfs:label\u3009 \u3008equivalentClass rdf:resource=\u201dhttp://pervasive.semanticweb.org/ont/2004 /06/person#person\u201d/\u3009 \u3008rdfs:subClassOf rdf:resource=\u201dhttp://mind7.cs.umd.edu:8134/Rover/ physicalentity#physicalEntity\u201d/\u3009\n\u3008/Class\u3009 \u3008DataProperty rdf:about=\u201d&person;dateofbirth\u201d\u3009\n\u3008rdfs:label xml:lang=\u201den\u201d\u3009dateofbirth\u3008rdfs:label\u3009 \u3008rdfs:subClassOf rdf:resource=\u201d&person;personalinfo\u201d/\u3009 \u3008equivalentProperty rdf:resource=\u201dhttp://pervasive.semanticweb.org/ont/ 2004/06/person#birthDate\u201d/\u3009\n\u3008/DataProperty\u3009"}, {"heading": "5.12 Clarity, Coherence, Redundancy and Orthogonality", "text": "The concepts in RoCoMO are unique, unambiguous, independent and consistent."}, {"heading": "5.13 Security and Privacy", "text": "These are implemented in RoCoM using Role Based Access Control (RBAC) for groups and members. A group is an instance of type \u2018accessgroup\u2019 class. This class has object properties like \u2018groupmember\u2019 which includes the entities like users or devices that can be assigned to an instance of the group. The \u2018accessgroup\u2019 class also has an object property called \u2018privileges\u2019 which defines the permissions that the group can have. These permissions can be in the form of an \u2018activity\u2019 that the group is allowed to perform. Every entity can belong to multiple access groups while each access group can have multiple entities and privileges. This form of access control, obtained by assigning users to groups and granting privileges to groups rather than individual users, reduces the number of associations involved that need to be managed. Hence, it is easier to define security policies around this framework."}, {"heading": "6 MODELING THE FIRE INCIDENT CASE STUDY USING ROCOMO", "text": "In this section, we revisit the Fire Incident case study from Section 2 and illustrate how RoCoMO can be used to model it. Figure 3 shows a graphical representation of the situation modeled in RoCoMO. At time t0, the Fire Incident Event triggers the situation that follows and sets the Goal Evacuate. This goal can be subdivided into smaller sub-goals which can be performed by one or more activities. Entity Responder1 performs the Activity Get updated temperature readings, at time t1, to get the context information of room Room123 - the updated temperature readings from the temperature sensors TempSensor1 and TempSensor2.\nThe Goal for this activity is Determine time left for evacuation. Since the information is timestamped, the system can refresh it periodically based on its freshness and this resolves any ambiguity.\nThe contextual information also has a probability measure attached to it. As shown in the figure, the probability of temperature reading, from TempSensor1, being correct is 0.1 which means it is highly unreliable and that the sensor could be faulty. This is evident by the fact that it shows a reading of 10 deg Fahrenheit while the other sensor shows a reading of 150 deg Fahrenheit. Also, the contextual information has source or provenance information attached to it and so this determines which reading came from which sensor. Based on the temperature reading and its encoding (Fahrenheit in this case), the system can calculate how much time it will take till the temperature reaches the value at which the building bursts into flames. This is the amount of time that the responders have for evacuation.\nSimultaneously, another entity Responder2 is performing the activity Access building floormaps with the Goal - Determine exit routes for evacuation. Since the responders belong to the AccessGroup responders, the system checks their privileges (which are inherited from the \u2018re-\nsponders\u2019 accessgroup) and grants access to the temperature readings from the sensor and building floor plans. Once these two activities have achieved their goals, both the responders start the activity Evacuate people, at time t2, and achieve the goal set by the event."}, {"heading": "7 CONCLUSION AND FUTURE WORK", "text": "In this paper, we described a generic, flexible and extensible ontology called Rover Context Model Ontology(RoCoMO) and illustrated its benefits for context and situation modeling in pervasive computing environments, via a practical case study. We highlighted several shortcomings of contemporary context models and ontologies and explained how RoCoMO addresses them. We also established the utility of its capabilities by evaluating it against several criteria that ontologies for context and situation modeling should possess. Our next step is to develop a GUI to allow users to browse and explore the RoCoM ontologies, and further extend and modify them. An API for working with the ontology will also be available. Our aim is to encourage users to build applications and systems using this ontology so that they can be used in both in an isolated manner or integrated with Rover II.\n10"}], "references": [{"title": "Towards a better understanding of context and context-awareness", "author": ["G. Abowd", "A. Dey", "P. Brown", "N. Davies", "M. Smith", "P. Steggles"], "venue": "Handheld and Ubiquitous Computing. Springer, 1999, pp. 304\u2013307.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1999}, {"title": "Hierarchical situation modeling and reasoning for pervasive computing", "author": ["S. Yau", "J. Liu"], "venue": "Software Technologies for Future Embedded and Ubiquitous Systems, 2006 and the 2006 Second International Workshop on Collaborative Computing, Integration, and Assurance. SEUS 2006/WCCIA 2006. The Fourth IEEE Workshop on, 2006.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2006}, {"title": "Soupa: Standard ontology for ubiquitous and pervasive applications", "author": ["H. Chen", "F. Perich", "T. Finin", "A. Joshi"], "venue": "Mobile and Ubiquitous Systems: Networking and Services, 2004. MOBIQUITOUS 2004. The First Annual International Conference on, 2004, pp. 258\u2013267.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2004}, {"title": "Representing and managing the context of a situation", "author": ["S. Krishnamoorthy", "P. Bhargava", "M. Mah", "A. Agrawala"], "venue": "The Computer Journal, vol. 55 (8), 2012.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2012}, {"title": "An ontological context model for representing a situation and the design of an intelligent context-aware middleware", "author": ["P. Bhargava", "S. Krishnamoorthy", "A. Agrawala"], "venue": "Proceedings of the 2012 ACM Conference on Ubiquitous Computing, 2012, pp. 1016\u20131025.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2012}, {"title": "An ontology for contextaware pervasive computing environments", "author": ["H. Chen", "T. Finin", "A. Joshi"], "venue": "The Knowledge Engineering Review, vol. 18, no. 03, pp. 197\u2013207, 2003.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2003}, {"title": "An ontologybased context model in intelligent environments", "author": ["T. Gu", "X. Wang", "H. Pung", "D. Zhang"], "venue": "Proceedings of communication networks and distributed systems modeling and simulation conference, 2004, pp. 270\u2013275.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2004}, {"title": "Towards an extensible context ontology for ambient intelligence", "author": ["D. Preuveneers", "J. Van den Bergh", "D. Wagelaar", "A. Georges", "P. Rigole", "T. Clerckx", "Y. Berbers", "K. Coninx", "V. Jonckers", "K. De Bosschere"], "venue": "Ambient intelligence, pp. 148\u2013159, 2004.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2004}, {"title": "Cool: A context ontology language to enable contextual interoperability", "author": ["T. Strang", "C. Linnhoff-Popien", "K. Frank"], "venue": "Distributed applications and interoperable systems. Springer, 2003, pp. 236\u2013247.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2003}, {"title": "Use of ontologies in a pervasive computing environment", "author": ["A. Ranganathan", "R. McGrath", "R. Campbell", "M. Mickunas"], "venue": "The Knowledge Engineering Review, vol. 18, no. 03, pp. 209\u2013220, 2003.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2003}, {"title": "Working document on gloss ontology", "author": ["J. Coutaz", "A. Dearle", "S. Dupuy-Chessa", "G. Kirby", "C. Lachenal", "R. Morrison", "G. Rey", "E. Zirintsis"], "venue": "Arxiv preprint arXiv:1006.5661, 2010.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2010}, {"title": "A comprehensive context modeling framework for pervasive computing systems", "author": ["R. Reichle", "M. Wagner", "M. Khan", "K. Geihs", "J. Lorenzo", "M. Valla", "C. Fra", "N. Paspallis", "G. Papadopoulos"], "venue": "Distributed applications and interoperable systems. Springer, 2008, pp. 281\u2013295.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2008}, {"title": "Ontology-based context modeling", "author": ["R. Krummenacher", "T. Strang"], "venue": "Proceedings Third Workshop on Context- Aware Proactive Systems (CAPS 2007)(June 2007), 2007.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2007}, {"title": "A survey of context modelling and reasoning techniques", "author": ["C. Bettini", "O. Brdiczka", "K. Henricksen", "J. Indulska", "D. Nicklas", "A. Ranganathan", "D. Riboni"], "venue": "Pervasive and Mobile Computing, vol. 6, no. 2, pp. 161\u2013180, 2010.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "Ontology-based models in pervasive computing systems", "author": ["J. Ye", "L. Coyle", "S. Dobson", "P. Nixon"], "venue": "The Knowledge Engineering Review, vol. 22, no. 4, pp. 315\u2013347, 2007.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2007}, {"title": "Modelling and using sensed context information in the design of interactive applications", "author": ["P. Gray", "D. Salber"], "venue": "Engineering for Human-Computer Interaction, pp. 317\u2013335, 2001.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2001}], "referenceMentions": [{"referenceID": 0, "context": "Dey and Abowd [1] describe a context-aware system as one that \u201cuses context to provide relevant information and/or services to the user, where relevancy depends on the user\u2019s task.", "startOffset": 14, "endOffset": 17}, {"referenceID": 1, "context": "\u201d [2].", "startOffset": 2, "endOffset": 5}, {"referenceID": 2, "context": "[3] and Krishnamoorthy et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4], ontologies are a powerful tool for modeling context and the encompassing situations in context-aware systems because they promote knowledge sharing and reuse across different applications and services interacting in a pervasive computing environment, thus, enhancing their interoperability.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4] and Bhargava et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "We introduced the Rover Context Model Ontology (RoCoMO), which is the underlying ontology for RoCoM and is currently deployed and implemented in Rover II, in [5].", "startOffset": 158, "endOffset": 161}, {"referenceID": 5, "context": "CoBrA-Ont[6] is a collection of ontologies for describing places, agents and events and their associated properties in an intelligent meetingroom domain.", "startOffset": 9, "endOffset": 12}, {"referenceID": 2, "context": "SOUPA[3] was developed to provide pervasive computing developers with a shared and upper ontology that combines many useful vocabularies from different consensus ontologies such as FOAF, DAML-Time, RCC, BDI, and Rei policy ontology.", "startOffset": 5, "endOffset": 8}, {"referenceID": 6, "context": "Other contemporary ontologies include CONON[8] where the context ontologies are divided into upper ontology and domainspecific ontologies; CoDAMoS[9] where the context ontology is centered around four entities - user, environment, platform and service; ASC/CoOL[10] that enables context awareness and interoperability; Gaia [11] that incorporates ontologies for context awareness, service discovery and matchmaking, and interoperation between entities in a pervasive computing infrastructure mainly geared towards smart spaces; and GLOSS[12] which employs ontologies for the precise understanding of various contexts and services in smart spaces.", "startOffset": 43, "endOffset": 46}, {"referenceID": 7, "context": "Other contemporary ontologies include CONON[8] where the context ontologies are divided into upper ontology and domainspecific ontologies; CoDAMoS[9] where the context ontology is centered around four entities - user, environment, platform and service; ASC/CoOL[10] that enables context awareness and interoperability; Gaia [11] that incorporates ontologies for context awareness, service discovery and matchmaking, and interoperation between entities in a pervasive computing infrastructure mainly geared towards smart spaces; and GLOSS[12] which employs ontologies for the precise understanding of various contexts and services in smart spaces.", "startOffset": 146, "endOffset": 149}, {"referenceID": 8, "context": "Other contemporary ontologies include CONON[8] where the context ontologies are divided into upper ontology and domainspecific ontologies; CoDAMoS[9] where the context ontology is centered around four entities - user, environment, platform and service; ASC/CoOL[10] that enables context awareness and interoperability; Gaia [11] that incorporates ontologies for context awareness, service discovery and matchmaking, and interoperation between entities in a pervasive computing infrastructure mainly geared towards smart spaces; and GLOSS[12] which employs ontologies for the precise understanding of various contexts and services in smart spaces.", "startOffset": 261, "endOffset": 265}, {"referenceID": 9, "context": "Other contemporary ontologies include CONON[8] where the context ontologies are divided into upper ontology and domainspecific ontologies; CoDAMoS[9] where the context ontology is centered around four entities - user, environment, platform and service; ASC/CoOL[10] that enables context awareness and interoperability; Gaia [11] that incorporates ontologies for context awareness, service discovery and matchmaking, and interoperation between entities in a pervasive computing infrastructure mainly geared towards smart spaces; and GLOSS[12] which employs ontologies for the precise understanding of various contexts and services in smart spaces.", "startOffset": 324, "endOffset": 328}, {"referenceID": 10, "context": "Other contemporary ontologies include CONON[8] where the context ontologies are divided into upper ontology and domainspecific ontologies; CoDAMoS[9] where the context ontology is centered around four entities - user, environment, platform and service; ASC/CoOL[10] that enables context awareness and interoperability; Gaia [11] that incorporates ontologies for context awareness, service discovery and matchmaking, and interoperation between entities in a pervasive computing infrastructure mainly geared towards smart spaces; and GLOSS[12] which employs ontologies for the precise understanding of various contexts and services in smart spaces.", "startOffset": 537, "endOffset": 541}, {"referenceID": 11, "context": "([13], Krummenacher et al.", "startOffset": 1, "endOffset": 5}, {"referenceID": 12, "context": "[14] and Bettini et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[15]) have asserted that, of all the current ontologies used for context modeling, SOUPA is the most comprehensive ontology.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[15] and Ye et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[18] have specified a set of requirements that both context models", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "Several papers including Gray and Salber [19] introduced the notion of attaching information quality attributes to every piece of sensed context.", "startOffset": 41, "endOffset": 45}, {"referenceID": 2, "context": "its term definitions must be consistent with other standard, generic and consensus ontologies such as SOUPA [3].", "startOffset": 108, "endOffset": 111}, {"referenceID": 6, "context": "This also enables reuse of domain knowledge [8].", "startOffset": 44, "endOffset": 47}, {"referenceID": 2, "context": "We have designed RoCoMO to be interoperable with other ontologies, for instance SOUPA[3], via the equivalentClass and equivalentProperty OWL statements.", "startOffset": 85, "endOffset": 88}], "year": 2015, "abstractText": "In pervasive computing environments, various entities often have to cooperate and integrate seamlessly in a situation which can, thus, be considered as an amalgamation of the context of several entities interacting and coordinating with each other, and often performing one or more activities. However, none of the existing context models and ontologies address situation modeling. In this paper, we describe the design, structure and implementation of a generic, flexible and extensible context ontology called Rover Context Model Ontology (RoCoMO) for context and situation modeling in pervasive computing systems and environments. We highlight several limitations of the existing context models and ontologies, such as lack of provision for provenance, traceability, quality of context, multiple representation of contextual information, as well as support for security, privacy and interoperability, and explain how we are addressing these limitations in our approach. We also illustrate the applicability and utility of RoCoMO using a practical and extensive case study. Keywords\u2014Context-aware Computing, Context Modeling and Representation, Situation Modeling", "creator": "LaTeX with hyperref package"}}}