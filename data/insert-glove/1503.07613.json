{"id": "1503.07613", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Mar-2015", "title": "Unsupervised authorship attribution", "abstract": "We describe .40 a technique for poplarville attributing parts of a dialogs written american-trained text daxing to solstice a elita set of unknown record authors. prentiss Nothing is assumed marvelman to mutants be friary known a choristers priori about kensit the writing pordoi styles pupkin of teano potential authors. flynns We draken use absolutism multiple independent clusterings 37.61 of an input blankman text levator to dactylis identify intervencion parts that gonxha are similar demerger and webex dissimilar to outten one another. We chattanooga-ringgold describe algorithms necessary to reconvenes combine 10.08 the hispanophone multiple clusterings into she-wolf a meaningful racas output. huchthausen We pression show results slavophiles of the application taishang of coax the nip/tuck technique on texts washbourne having multiple writing styles.", "histories": [["v1", "Thu, 26 Mar 2015 04:02:26 GMT  (312kb,D)", "http://arxiv.org/abs/1503.07613v1", null]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["david fifield", "torbj{\\o}rn follan", "emil lunde"], "accepted": false, "id": "1503.07613"}, "pdf": {"name": "1503.07613.pdf", "metadata": {"source": "CRF", "title": "Unsupervised authorship attribution", "authors": ["David Fifield", "Torbj\u00f8rn Follan", "Emil Lunde"], "emails": [], "sections": [{"heading": null, "text": "Unsupervised authorship attribution\nDavid Fifield, Torbj\u00f8rn Follan, Emil Lunde\nMarch 27, 2015\nWe describe a technique for attributing parts of a written text to a set of unknown authors. Nothing is assumed to be known a priori about the writing styles of potential authors. We use multiple independent clusterings of an input text to identify parts that are similar and dissimilar to one another. We describe algorithms necessary to combine the multiple clusterings into a meaningful output. We show results of the application of the technique on texts having multiple writing styles."}, {"heading": "1 Problem statement", "text": "Accept as input a written text and a number n of presumed authors. For each small segment of the text\u2014for example, for each word or line\u2014output a weight assignment for the labels 1, . . . , n, with the weights summing to 1.\nNothing is previously assumed about the authors\u2014there are no training samples of writing by potential authors. The author labels in the output are just integers, not tied to any real personal identity. The weights on each segment may be interpreted as a probability distribution over authors; for example a segment may appear as 15% Unknown Author 1, 80% Unknown Author 2, and 5% Unknown Author 3. The output labels are arbitrary: any permutation of labels that is applied consistently across all segments is as good as any other.\nThe input text is an ordinary written document in a human language such as English. The text doesn\u2019t have explicit section markings or other divisions; from the point of view of the algorithm it is just a long sequence of words. The n authors may have worked together on the document at the same time, or the text may have been assembled using parts from different authors separated in time."}, {"heading": "1.1 Prior work", "text": "There is a great deal of literature on the topic of supervised authorship attribution\u2014 extracting lexical and other features from writing samples known to belong to different authors, and using those to help decide the authorship of an unknown text. Stamatatos [13] gives a survey. There is comparatively little on assigning\nar X\niv :1\n50 3.\n07 61\n3v 1\n[ cs\n.C L\n] 2\n6 M\nar 2\n01 5\nauthorship to authors without prior knowledge of their writing styles. Koppel et al. [11] use synonym choice, among other features, to learn authorship divisions in input texts artificially constructed from different parts of the Bible."}, {"heading": "2 Solution technique", "text": "A technique for assigning n labels to parts of a document suggests itself: Break the input into fragments, cluster the fragments into n clusters, and assign a label to each fragment equal to the cluster label. The clustering may be based on, for example, stylometric features extracted from the fragments. We expect that fragments within a cluster are similar to one another but dissimilar to fragments in other clusters. If the similarities and dissimilarities come principally from different authors\u2019 stylistic choices, the cluster labels will reflect authorship.\nThere is a problem with the technique just described: A fragment of text needs to have a certain minimum length in order to represent an author\u2019s style. The minimum has been found to vary with different classification methods [13], but it should be at least several hundred words for English text. Longer fragments convey more of an author\u2019s style, at the cost of low-resolution output: If all fragments are 1000 words long, the output may show a change in authorship only every 1000 words. Smaller fragments give better resolution, at the cost of less distinctive style within fragments and less robust clustering.\nOur proposed solution to this problem is to repeat the naive clustering m times, each time using fragments that are shifted relative to the previous time. Reassign cluster labels within clusterings to make the clusterings agree as much as possible. Output the average of the m relabeled clusterings. This is a summary of the procedure:\n1. Make m copies of the input, and break each copy into fragments, with the fragments in one copy being shifted relative to the other copies.\n2. Cluster each set of fragments independently according to some similarity measure.\n3. Permute the labels within each clustering to maximize pairwise clustering agreement.\n4. Output the average of the relabeled clusterings.\nFor example, let the fragment size be 1000 words and the shift offset be 50 words. These parameters lead to m = 1000/50 = 20 sets of fragments. The first comprises words 1\u20131000,1001\u20132000,. . . ; the second words 51\u20131050,1051\u2013 2050,. . . ; and so on. We omit short fragments, for example the one composed of words 1\u201351 that would otherwise be in the second fragment set. The output will be short segments of only 50 words, each with its own weight distribution.\nFragments do not necessarily have to be the same size. They should be long enough to represent a single author\u2019s style, but not so long that fragments tend to have more than one or two authors. Fragments that straddle a true\nchange in authorship tend to be assigned to one or the other author according to how much each author contributed to the fragment. The act of averaging fragments that start at different offsets therefore tends to cause label weights to transition smoothly between one label and another, at least where the change in authorship is clear.\nThe overall effect is that we get output fine-grained enough to localize authorship changes, while still doing clustering over longer, stylistically meaningful fragments. Repeated clustering introduces an additional complication, taken care of in step 3. Because the m clusterings are independent, they will not in general use the same label for the same unknown author. Step 3 permutes labels within each clustering, as we are free to do, to make the labels agree as much as possible.\nThe following sections consider different techniques for doing step 2 (clustering), and step 3 (matching of clustering labels)."}, {"heading": "3 Clustering techniques", "text": "In this section we consider ways to cluster text fragments according to their stylistic similarity. Clustering over feature vectors (Section 3.1) is amenable to a variety of machine learning techniques such as dimensionality reduction (Section 3.2); it requires some amount of natural language processing in order to extract the features. Compression clustering (Section 3.3) does not deal with meaningful feature vectors, but may be used even when it is inconvenient to extract features, for example when the input is in a language for which natural language processing libraries are lacking."}, {"heading": "3.1 Stylometric feature vectors", "text": "There are many ways to transform text into a numeric feature vector. Typical features are things like average word length, and frequency of use of punctuation\u2014 but there exist much more sophisticated features. Once a set of feature vectors has been produced, they may be clustered using any of a variety of generalpurpose clustering algorithms.\nJStylo [12] is a framework for authorship attribution, usually used to evaluate a test set of documents against a training set. We used JStylo to generate feature vectors over fragment sets that were previously generated. We used the built-in \u201cWritePrints (Limited)\u201d feature set. The WritePrints feature set is language-aware and specific to English, having features not only for things like word length and character frequency, but also parts of speech and frequency of function words [2]. We then used the machine learning framework Weka [9] to generate m sets of n clusters using the EM clusterer. Clustering of JStyloproduced feature vectors was used to get the results in Section 5.1."}, {"heading": "3.2 Dimensionality reduction", "text": "Dimensionality reduction in the sense of clustering, is the act of reducing the potentially large number of features in a feature vector. This is used to speed up the clustering software. The algorithm we use is a random-projection-type k-means algorithm proven to distort the clusters by at most a factor of 2 + for an error parameter . The algorithm we use is due to Boutsidis, Drineas, and Zouzias [6, Algorithm 1]. It uses a random scaled \u00b11 d \u00d7 t matrix to reduce d dimensions to t dimensions, then runs an approximate k-means algorithm on the projected vectors.\nThe parameter t, which is the new number of features, is independent of d, which is the original number of features. In our case, d, the number of features, was around 450\u2013500, and k, the number of clusters, was 2. We chose = 0.2 and c = 2, giving t = 100 output features."}, {"heading": "3.3 Compression clustering", "text": "Clustering based on traditional stylometric features requires knowledge about the data in order to extract useful feature that can be used to compare the objects. This is a problem since there are a lot of different languages, with different properties and alphabets, that we may want to cluster.\nClustering by compression is a clustering method introduced by Cilibrasi and Vitanyi [7] that doesn\u2019t require any subject-specific features or knowledge about the data. The idea is that two objects are deemed similar if one can use information about one object to compress the other. More formally the normalized compression distance between objects x and y is\nNCD(x, y) = C(xy)\u2212min(C(x),C(y))\nmax(C(x),C(y))) ,\nwhere C(x) is the compressed size of object x, and xy is the concatenation of x and y.\nThe normalized compression distance allows us to cluster texts written in languages we don\u2019t have tools to extract features from. To test this method we used the CompLearn utilities [1] to generate a distance matrix between fragments and the k-medioids algorithm to cluster them. An example of the application of this approach appears in Section 5.2."}, {"heading": "4 Clustering matching algorithms", "text": "The output of step 2 of the algorithm is a set of n clusterings, each one being a labeling of fragments. The labels within each clustering may be permuted arbitrarily. The job of step 3 is to find a permutation of labels within each clustering so that the labels across clusterings agree as much as possible.\nWe examined two special cases of this optimization: the case where there are two authors and multiple clusterings, and the case where there are multiple authors and two clusterings."}, {"heading": "4.1 Agreement between labeled fragments", "text": "We define the normalized agreement between a pair of fragment sets A and B on a text T :\nagreement(A,B) = 1 |T | \u2211 fa\u2208A \u2211 fb\u2208B |fa \u2229 fb| n\u2211 i=1 (fa)i(fb)i.\n|T | is the length of the text, for example a count of its words. A and B are fragment sets; fa and fb are individual fragments within them. |fa\u2229fb| is the size of the intersection of fa and fb; for nonoverlapping fragments it is 0. (fA)i and (fB)i are the weight assignments for author i in fA and fB respectively. Simply stated, the agreement between two fragments is the size of their intersection times the dot product of their weight vectors. The total agreement between two sets is the sum of agreements between all fragments in A and all fragments in B; it is a number between 0 and 1.\nThe sum-of-pairs agreement of a sequence M containing m sets of fragments is the normalized sum of their pairwise agreements:\nagreement(M) = 1( m 2 ) \u2211 1\u2264i<m \u2211 i<j\u2264m agreement(Mi,Mj).\nThe use of a sum-of-pairs objective function has analogs in algorithms used in biology for multiple sequence alignment\u2014there, the algorithm must choose where to insert gaps into various sequences in order to maximize a score; here, the algorithm\u2019s choice is over permutations of labels.\nWe use the agreement objective for two purposes. First, sum-of-pairs agreement is used to optimize labels of the m independent fragment clusterings. Second, single-pair agreement is used to assess the effectiveness of the algorithm\u2019s output in comparison with some known ground truth. Examples of the latter use are given in Section 5. In the specific case where there are two authors, and label weights are constrained to be 0 or 1, optimization of single-pair agreement has a natural interpretation as a binary classification problem. Without loss of generality, fix the labels of one fragment set in the pair. The fragments with label 1 are the positive instances, and those with label 2 are the negative instances. Then the agreement is just the normalized sum of true positives and true negatives over the total: 1|T | (TP + TN)/(TP + TN + FP + FN)."}, {"heading": "4.2 Two clusterings, n > 2 authors: maximum-weight matching", "text": "When there are only two clusterings, the problem of how to permute the two label sets for maximum agreement is an instance of maximum-weight matching. Build a complete bipartite graph with n vertices on each side, corresponding to the n labels in each clustering. For each pair 1 \u2264 i, j \u2264 n, assign a weight equal to the size of the intersection between fragments labeled i on the left and fragments labeled j on the right; this is the size of the contribution toward\nthe total agreement that would be achieved if label i on the left were changed to j. There are algorithms to solve maximum-weight matching optimally in polynomial time."}, {"heading": "4.3 m > 2 clusterings, two authors: MAX-CUT using a semidefinite programming relaxation", "text": "There are only two permutations of two labels: (1, 2) and (2, 1). The choice of a permutation of labels in a fragment set therefore boils down to the choice of whether to flip the labels, or not. Consider a two-element weight vector within a fragment (w1, w2). Because w1 + w2 = 1, it is the case that flipping the labels has the same effect as flipping the weights: the weight vector becomes ((1\u2212w1), (1\u2212w2)) = (w2, w1). The same is true of the agreement, which is the sum of dot products of weight vectors:\nagreement(1\u2212A,B) = agreement(A, 1\u2212B) = 1\u2212 agreement(A,B).\nWe seek to decide, for each fragment set, whether to flip its labels or not, so that the sum or pairwise agreements is as large as possible.\nOptimizing the agreement between multiple two-author clusterings can be posed as an instance of the MAX-CUT problem. An instance of MAX-CUT is an undirected graph G = (V,E) with nonnegative edge weights. A solution to the problem is a mapping from vertices to labels in {\u22121,+1} such that the sum of weights on edges whose endpoints have different labels is maximized. Vertices with label \u22121 correspond to one side of a graph cut; those with label +1 correspond to the other side, and the objective is to maximize the weight of the edges crossing the cut. Let an instance of MAX-CUT be given with vertex set V = {v1, . . . , vm} and edge weights wij = wji. Its solution is the solution to the integer program:\nmax \u2211\n0\u2264i<n \u2211 i<j\u2264m wij 1\u2212 yiyj 2\nsubject to yi \u2208 {\u22121,+1} \u2200i \u2208 V\nThe objective function has the same solution\u2014though not the same value\u2014after removing constant positive factors and additive terms: max \u2211 0\u2264i<n \u2211 i<j\u2264m\u2212wijyiyj (using payoff multipliers in {\u22121,+1} rather than {0, 1}). The reduction from two-author clustering matching to MAX-CUT is achieved simply by setting wij = \u2212agreement(Mi,Mj). Intuitively, if the agreement is large (greater than 0.5), then we want \u2212wijyiyj to be small, meaning that yi and yj should have the same sign (flip neither of vi and vj , or flip both). If the agreement is small (less than 0.5), yi and yj should have opposite signs (flip one label set of the other, but not both). More formally, we may work out a payoff function that pays +agreement(Mi,Mj) when yi and yj have the same\nsign, and \u2212agreement(Mi,Mj) when yi and yj have opposite signs:\nagreement(Mi,Mj)\n( 1 + yiyj\n2\n) \u2212 agreement(Mi,Mj) ( 1\u2212 1 + yiyj\n2 ) = agreement(Mi,Mj) ( 1 + yiyj\n2\n) \u2212 agreement(Mi,Mj) ( 1\u2212 yiyj\n2 ) = agreement(Mi,Mj) ( 1 + yiyj \u2212 1 + yiyj\n2 ) = agreement(Mi,Mj)yiyj\nwhich has the same maximum as the MAX-CUT program when assigning wij = agreement(Mi,Mj).\nGoemans and Williamson [8] show a randomized polynomial-time 0.878- approximate algorithm to solve MAX-CUT by way of a semidefinite programming relaxation. We apply this algorithm after reducing two-author clustering matching to MAX-CUT. The output labels y1, . . . , ym \u2208 {\u22121,+1} map to different sides of the cut. The clusterings on one side of the cut have their labels flipped; and those on the other side are left unchanged.\nThere are other natural interpretations of the edge weights we assign: If we regard the labels as being in {0, 1}, with aligned fragments of identical length, then the weight is the negative of the Hamming distance between the bit strings representing the labels. If we regard the labels as being in {\u22121,+1}, under the same conditions, then the weight is the negative of the dot product or cosine similarity between the label vectors."}, {"heading": "4.4 m > 2 clusterings, n > 2 authors", "text": "We did not try to solve any matchings where there are more than two authors and more than two clusterings. It is likely that approximate or heuristic techniques will be necessary. We believe that the application of algorithms used for sequence alignment in biology is promising.\n5 Results\n5.1 Ulysses\nIneluctable modality of the visible: at least that if no more, thought through my eyes. Signatures of all things I am here to read, seaspawn and seawrack, the nearing tide, that rusty boot.\n(Beginning of episode 3)\nThe novel Ulysses by James Joyce [10] is known for the drastic and deliberate stylistic shifts between the 18 chapters or \u201cepisodes\u201d of which it is composed. We used the text of the novel as an input, treating each episode as if it had been composed by a different author. We wanted to see whether these stylistic divisions could be automatically detected by a program.\nOur input was Project Gutenberg\u2019s copy of a pre-1923 edition of the novel, released in July 2003. After editing to remove some episode markers, the text has 32309 words. The shortest episode is number 2, with 4414 words, and the longest is number 15, with 38161.\nFigure 1 shows the process of attribution. We followed the \u201ctwo clusterings, n > 2 authors\u201d plan from Section 4.2. We broke the input into uniform fragments of 5000 words, with one set of fragments offset by 2500 words relative to the other. The output is therefore a distribution over author labels for every 2500-word segment, where the weights on each segment are either fully on one author or evenly split between two authors. The two fragment sets are represented by the two gray columns at the left of the figure. We then generated feature vectors for each 5000-word fragment using JStylo, and clustered both fragment sets independently; this is the second pair of columns in the figure. Author labels are shown as different colors. Notice how there is hardly any agreement between the two columns. We then computed an maximum-weight matching between the two fragment sets. As shown in the third pair of columns, this makes many more labels agree. On the right of the figure is the mean of the two relabeled clusterings, aside the known true episode division.\nWe see that some episodes, perhaps those most stylistically distinct, are very closely matched: 8, 9, 10, 15, 16, and 17. In other places the algorithm appears confused; reasons why may include stylistic similarity between episodes, short episodes, or episode boundaries that do not fall close to a multiple of 2500 words. The agreement between the computed authorship and the actual episode division is 0.55 (random assignment would have 1/18 \u2248 0.06)."}, {"heading": "5.2 The Homeric Hymn to Apollo", "text": "\u03bc\u03bd\u03ae\u03c3\u03bf\u03bc\u03b1\u03b9 \u03bf\u1f50\u03b4\u1f72 \u03bb\u03ac\u03b8\u03c9\u03bc\u03b1\u03b9 \u0391\u0313\u03c0\u03cc\u03bb\u03bb\u03c9\u03bd\u03bf\u03c2 \u1f11\u03ba\u03ac\u03c4\u03bf\u03b9\u03bf,\n\u1f45\u03bd\u03c4\u03b5 \u03b8\u03b5\u03bf\u1f76 \u03ba\u03b1\u03c4\u1f70 \u03b4\u1ff6\u03bc\u03b1 \u0394\u03b9\u1f78\u03c2 \u03c4\u03c1\u03bf\u03bc\u03ad\u03bf\u03c5\u03c3\u03b9\u03bd \u1f30\u03cc\u03bd\u03c4\u03b1:\n\u03ba\u03b1\u03af \u1fe5\u03ac \u03c4\u1fbf \u1f00\u03bd\u03b1\u0390\u03c3\u03c3\u03bf\u03c5\u03c3\u03b9\u03bd \u1f10\u03c0\u1f76 \u03c3\u03c7\u03b5\u03b4\u1f78\u03bd \u1f10\u03c1\u03c7\u03bf\u03bc\u03ad\u03bd\u03bf\u03b9\u03bf\n\u03c0\u03ac\u03bd\u03c4\u03b5\u03c2 \u1f00\u03c6\u1fbf \u1f11\u03b4\u03c1\u03ac\u03c9\u03bd, \u1f45\u03c4\u03b5 \u03c6\u03b1\u03af\u03b4\u03b9\u03bc\u03b1 \u03c4\u03cc\u03be\u03b1 \u03c4\u03b9\u03c4\u03b1\u03af\u03bd\u03b5\u03b9.\n(Lines 1\u20134 of the hymn)\nThe Homeric Hymns are a collection of ancient Greek hymns honoring the gods. One of these, the Hymn to Apollo, believed to have been written before the 5th century B.C., is usually presented as one poem in two parts: a shorter \u201cDelian\u201d part and a longer \u201cPythian\u201d part. Textual and historical evidence suggests that, while traditionally combined, they were originally composed independently. Allen and Sikes [3] write:\nThe hymn to Apollo, in its present form, may be read as a continuous poem. But the continuity lies only on the surface, and even the most casual reader cannot fail to be struck by the abrupt transition at v. 179. . . The unity of the hymn has been denied on artistic and literary grounds. . . . It therefore follows that the hymn is a compilation of at least two originally independent poems.\nOur goal was to see if a computer can automatically detect stylistic change between the two parts, without a prior samples of writing from presumed authors. We used as input the UTF-8 Greek text of the hymn [4] from the Perseus Digital Library. Including bracketed lines, the Greek hymn consists of 3840 words in 552 lines, with 1241 words in the Delian portion and 2599 in the Pythian.\nFigure 2 illustrates the process of computing authorship. We begin by breaking the input into fragments. The input is rather short as authorship attribution goes\u2014only 3736 words. We use fragments of 900 words, and omit short fragments at the beginning and end, meaning that each clustering will cluster only three or four fragments. They start at offsets of 90 words relative to each other, so there are 10 clusterings. The first clustering starts at offset 0, over the four fragments consisting of words 1\u2013900, 901\u20131800, 1801\u20132700, and 2701\u20133600. The next clustering is over words 91\u2013990, 991\u20131890, 1891\u20132790, 2791\u20133690, and so on. In the figure, each column is an independently computed clustering.\nThe clustering may come out as in the left side of Figure 2. Each fragment is colored according to its label assignment. Because the algorithm is unsupervised, a light blue label stands for Unknown Author 1 and a dark blue label for Unknown Author 2. Because the clusterings are independent, there is not much agreement between them. The middle part of the figure shows the clusterings after relabeling by the MAX-CUT approximation. For each clustering, the MAX-CUT approximation has freedom only to invert the labels, or not. Here the algorithm has chosen to invert the labels of the third, sixth, seventh, ninth, and tenth clusterings for better agreement. (Inverting the first, second, fourth, fifth, and eighth instead would result in the same cut and be just as good.)\nThe right side of Figure 2 shows the mean of the relabeled clustering. The balance of authorship may change as often as every 90 words, making possible the smooth gradient-like transition seen here. Comparing the computed authorship with the known division into Delian and Pythian parts, we find them mostly in agreement, starting with one author at the beginning and transitioning to another about 30% through, though it remains only 80% sure of the second author until near the end of the text. The agreement between the computed authorship and the actual Delian/Pythian split is 0.84 (random assignment would have 0.5).\nThe mean assignment cannot have a sharp break between authors as the true authorship does; it always takes at least 900 words to transition from one to another, during which transition it is on average at least half wrong. Correspondingly an upper bound on the agreement achievable using this technique, in this case, is (3726\u2212 450)/3726 \u2248 0.88.\nWe did another, artificial, test on the hymn. In order to produce a true assignment that is non-contiguous, we cut the Delian part and pasted it into the middle of the Pythian part. The process is shown in Figure 3. The second authorship change is very sharp but the first is less clear. The total agreement with the known labeling is 0.72. Because there are two places where authorship changes, separated by more than 900 words, the maximum agreement attainable by the algorithm is (3726\u2212 900)/3726 \u2248 0.76."}, {"heading": "5.3 Dimensionality reduction", "text": "In order to experiment with dimensionality reduction on feature vectors, we need numeric feature vectors such as those from Section 3.1. We used JStylo to produce feature vectors from an English translation of the Hymn to Apollo [5]. This text has 1768 words in the Delian portion and 3726 in the Pythian.\nFigure 4 illustrates the difference with and without dimensionality reduction. Notice that they agree mostly in the start and at the end, but they vary a bit more in the middle. This is presumably because the dimensionality reduction is an 2 + approximation."}, {"heading": "5.4 Source code", "text": "Our source code and data files are available in a Git repository at https://repo. eecs.berkeley.edu/git-anon/users/fifield/cs270.git."}, {"heading": "6 Future work", "text": "We showed that the problem of matching multiple two-author clusterings reduces to MAX-CUT, but didn\u2019t show that the problem is necessarily as hard as MAX-CUT. The edge weights in the reduction have constraints; for example, they obey the triangle inequality. We would like to determine whether the problem can be solved as well or better without reducing to MAX-CUT.\nThe case of m > 2 clusterings and n > 2 authors needs investigation to see how well it can be approximated."}, {"heading": "7 Acknowledgement", "text": "We thank James Cook and Stephen Sansom for their comments on drafts of this report."}], "references": [{"title": "Writeprints: A stylometric approach to identity-level identification and similarity detection in cyberspace", "author": ["Ahmed Abbasi", "Hsinchun Chen"], "venue": "ACM Trans. Inf. Syst.,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "The Homeric Hymns", "author": ["Thomas W. Allen", "E.E. Sikes"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1904}, {"title": "Random projections for k-means clustering", "author": ["Christos Boutsidis", "Anastasios Zouzias", "Petros Drineas"], "venue": "CoRR, abs/1011.4632,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "Vitanyi. Clustering by compression", "author": ["P.M.B.R. Cilibrasi"], "venue": "Information Theory, IEEE Transactions on,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2005}, {"title": "Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming", "author": ["Michel X. Goemans", "David P. Williamson"], "venue": "J. ACM,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1995}, {"title": "The WEKA data mining software: An update", "author": ["Mark Hall", "Eibe Frank", "Geoffrey Holmes", "Bernhard Pfahringer", "Peter Reutemann", "Ian H. Witten"], "venue": "SIGKDD Explor. Newsl.,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2009}, {"title": "Unsupervised decomposition of a document into authorial components. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies - Volume 1, HLT \u201911", "author": ["Moshe Koppel", "Navot Akiva", "Idan Dershowitz", "Nachum Dershowitz"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2011}, {"title": "Use fewer instances of the letter \u201ci\u201d: Toward writing style anonymization", "author": ["Andrew McDonald", "Sadia Afroz", "Aylin Caliskan", "Ariel Stolerman", "Rachel Greenstadt"], "venue": "In Proceedings of the 12th Privacy Enhancing Technologies Symposium (PETS", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2012}, {"title": "A survey of modern authorship attribution methods", "author": ["Efstathios Stamatatos"], "venue": "J. Am. Soc. Inf. Sci. Technol.,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2009}], "referenceMentions": [{"referenceID": 8, "context": "Stamatatos [13] gives a survey.", "startOffset": 11, "endOffset": 15}, {"referenceID": 6, "context": "[11] use synonym choice, among other features, to learn authorship divisions in input texts artificially constructed from different parts of the Bible.", "startOffset": 0, "endOffset": 4}, {"referenceID": 8, "context": "The minimum has been found to vary with different classification methods [13], but it should be at least several hundred words for English text.", "startOffset": 73, "endOffset": 77}, {"referenceID": 7, "context": "JStylo [12] is a framework for authorship attribution, usually used to evaluate a test set of documents against a training set.", "startOffset": 7, "endOffset": 11}, {"referenceID": 0, "context": "The WritePrints feature set is language-aware and specific to English, having features not only for things like word length and character frequency, but also parts of speech and frequency of function words [2].", "startOffset": 206, "endOffset": 209}, {"referenceID": 5, "context": "We then used the machine learning framework Weka [9] to generate m sets of n clusters using the EM clusterer.", "startOffset": 49, "endOffset": 52}, {"referenceID": 3, "context": "Clustering by compression is a clustering method introduced by Cilibrasi and Vitanyi [7] that doesn\u2019t require any subject-specific features or knowledge about the data.", "startOffset": 85, "endOffset": 88}, {"referenceID": 4, "context": "Goemans and Williamson [8] show a randomized polynomial-time 0.", "startOffset": 23, "endOffset": 26}, {"referenceID": 1, "context": "Allen and Sikes [3] write:", "startOffset": 16, "endOffset": 19}], "year": 2015, "abstractText": "We describe a technique for attributing parts of a written text to a set of unknown authors. Nothing is assumed to be known a priori about the writing styles of potential authors. We use multiple independent clusterings of an input text to identify parts that are similar and dissimilar to one another. We describe algorithms necessary to combine the multiple clusterings into a meaningful output. We show results of the application of the technique on texts having multiple writing styles.", "creator": "LaTeX with hyperref package"}}}