{"id": "1506.05163", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jun-2015", "title": "Deep Convolutional Networks on Graph-Structured Data", "abstract": "Deep Learning ' shadley s syed recent successes have mostly relied on muellner Convolutional Networks, helidon which wickus exploit fundamental masovian statistical boreotrophon properties of ndjili images, sounds long-life and krulwich video vr\u0161ac data: houari the anti-royalist local kharan stationarity wesolowski and multi - 12,048 scale sianipar compositional structure, that drakken allows torot expressing long prommin range interactions klestil in takahito terms of shorter, pipelines localized interactions. nevis However, 25.60 there flagpoles exist gautamiputra other important examples, such touraine as nelissen text fva documents or gdb bioinformatic supercomputing data, hesse-kassel that knifemaker may lack 24.13 some or mooseheads all toyoko of these a-310 strong statistical vantagepoint regularities.", "histories": [["v1", "Tue, 16 Jun 2015 22:31:09 GMT  (4299kb,D)", "http://arxiv.org/abs/1506.05163v1", null]], "reviews": [], "SUBJECTS": "cs.LG cs.CV cs.NE", "authors": ["mikael henaff", "joan bruna", "yann lecun"], "accepted": false, "id": "1506.05163"}, "pdf": {"name": "1506.05163.pdf", "metadata": {"source": "CRF", "title": "Deep Convolutional Networks on Graph-Structured Data", "authors": ["Mikael Henaff", "Joan Bruna"], "emails": ["mbh305@nyu.edu", "joan.bruna@berkeley.edu", "yann@cs.nyu.edu"], "sections": [{"heading": "1 Introduction", "text": "In recent times, Deep Learning models have proven extremely successful on a wide variety of tasks, from computer vision and acoustic modeling to natural language processing [9]. At the core of their success lies an important assumption on the statistical properties of the data, namely the stationarity and the compositionality through local statistics, which are present in natural images, video, and speech. These properties are exploited efficiently by ConvNets [8, 7], which are designed to extract local features that are shared across the signal domain. Thanks to this, they are able to greatly reduce the number of parameters in the network with respect to generic deep architectures, without sacrificing the capacity to extract informative statistics from the data. Similarly, Recurrent Neural Nets (RNNs) trained on temporal data implicitly assume a stationary distribution.\nOne can think of such data examples as being signals defined on a low-dimensional grid. In this case stationarity is well defined via the natural translation operator on the grid, locality is defined via the metric of the grid, and compositionality is obtained from downsampling, or equivalently thanks to the multi-resolution property of the grid. However, there exist many examples of data that lack the underlying low-dimensional grid structure. For example, text documents represented as bags of words can be thought of as signals defined on a graph whose nodes are vocabulary terms and whose weights represent some similarity measure between terms, such as co-occurence statistics. In medicine, a patient\u2019s gene expression data can be viewed as a signal defined on the graph imposed by the regulatory network. In fact, computer vision and audio, which are the main focus of research efforts in deep learning, only represent a special case of data defined on an extremely simple lowdimensional graph. Complex graphs arising in other domains might be of higher dimension, and the statistical properties of data defined on such graphs might not satisfy the stationarity, locality\nar X\niv :1\n50 6.\n05 16\n3v 1\n[ cs\n.L G\n] 1\nand compositionality assumptions previously described. For such type of data of dimension N , deep learning strategies are reduced to learning with fully-connected layers, which have O(N2) parameters, and regularization is carried out via weight decay and dropout [17].\nWhen the graph structure of the input is known, [2] introduced a model to generalize ConvNets using low learning complexity similar to that of a ConvNet, and which was demonstrated on simple lowdimensional graphs. In this work, we are interested in generalizing ConvNets to high-dimensional, general datasets, and, most importantly, to the setting where the graph structure is not known a priori. In this context, learning the graph structure amounts to estimating the similarity matrix, which has complexity O(N2). One may therefore wonder whether the graph estimation followed by graph convolutions offers advantages with respect to learning directly from the data with fully connected layers. We attempt to answer this question experimentally and to establish baselines for future work.\nWe explore these approaches in two areas of application for which it has not been possible to apply convolutional networks before: text categorization and bioinformatics. Our results show that our method is capable of matching or outperforming large, fully-connected networks trained with dropout using fewer parameters. Our main contributions can be summarized as follows:\n\u2022 We extend the ideas from [2] to large-scale classification problems, specifically Imagenet Object Recognition, text categorization and bioinformatics.\n\u2022 We consider the most general setting where no prior information on the graph structure is available, and propose unsupervised and new supervised graph estimation strategies in combination with the supervised graph convolutions.\nThe rest of the paper is structured as follows. Section 2 reviews similar works in the literature. Section 3 discusses generalizations of convolutions on graphs, and Section 4 addresses the question of graph estimation. Finally, Section 5 shows numerical experiments on large scale object recogniton, text categorization and bioinformatics."}, {"heading": "2 Related Work", "text": "There have been several works which have explored architectures using the so-called local receptive fields [6, 4, 14], mostly with applications to image recognition. In particular, [4] proposes a scheme to learn how to group together features based upon a measure of similarity that is obtained in an unsupervised fashion. However, it does not attempt to exploit any weight-sharing strategy.\nRecently, [2] proposed a generalization of convolutions to graphs via the Graph Laplacian. By identifying a linear, translation-invariant operator in the grid (the Laplacian operator), with its counterpart in a general graph (the Graph Laplacian), one can view convolutions as the family of linear transforms commuting with the Laplacian. By combining this commutation property with a rule to find localized filters, the model requires only O(1) parameters per \u201cfeature map\u201d. However, this construction requires prior knowledge of the graph structure, and was shown only on simple, low-dimensional graphs. More recently, [12] introduced Shapenet, another generalization of convolutions on non-Euclidean domains based on geodesic polar coordinates, which was successfully applied to shape analysis, and allows comparison across different manifolds. However, it also requires prior knowledge of the manifolds.\nThe graph or similarity estimation aspects have also been extensively studied in the past. For instance, [15] studies the estimation of the graph from a statistical point of view, through the identification of a certain graphical model using `1-penalized logistic regression. Also, [3] considers the problem of learning a deep architecture through a series of Haar contractions, which are learnt using an unsupervised pairing criteria over the features."}, {"heading": "3 Generalizing Convolutions to Graphs", "text": ""}, {"heading": "3.1 Spectral Networks", "text": "Our work builds upon [2] which introduced spectral networks. We recall the definition here and its main properties. A spectral network generalizes a convolutional network through the Graph Fourier Transform, which is in turn defined via a generalization of the Laplacian operator on the grid to the graph Laplacian. An input vector x \u2208 RN is seen as a a signal defined on a graph G with N nodes. Definition 1. Let W be a N \u00d7 N similarity matrix representing an undirected graph G, and let L = I \u2212D\u22121/2WD\u22121/2 be its graph Laplacian with D = W \u00b7 1 eigenvectors U = (u1, . . . , uN ).\nThen a graph convolution of input signals xwith filters g onG is defined by x\u2217Gg = UT (Ux Ug), where represents a point-wise product.\nHere, the unitary matrix U plays the role of the Fourier Transform in Rd. There are several ways of computing the graph Laplacian L [1]. In this paper, we choose the normalized version L = I\u2212D\u22121/2WD\u22121/2, whereD is a diagonal matrix with entriesDii = \u2211 j Wij . Note that in the case where W represents the lattice, from the definition of L we recover the discrete Laplacian operator \u2206. Also note that the Laplacian commutes with the translation operator, which is diagonalized in the Fourier basis. It follows that the eigenvectors of \u2206 are given by the Discrete Fourier Transform (DFT) matrix. We then recover a classical convolution operator by noting that convolutions are by definition linear operators that diagonalize in the Fourier domain (also known as the Convolution Theorem [11]).\nLearning filters on a graph thus amounts to learning spectral multipliers wg = (w1, . . . , wN )\nx \u2217G g := UT (diag(wg)Ux) . Extending the convolution to inputs xwith multiple input channels is straightforward. If x is a signal with M input channels and N locations, we apply the transformation U on each channel, and then use multipliers wg = (wi,j ; i \u2264 N , j \u2264M). However, for each feature map g we need convolutional kernels are typically restricted to have small spatial support, independent of the number of input pixels N , which enables the model to learn a number of parameters independent of N . In order to recover a similar learning complexity in the spectral domain, it is thus necessary to restrict the class of spectral multipliers to those corresponding to localized filters.\nFor that purpose, we seek to express spatial localization of filters in terms of their spectral multipliers. In the grid, smoothness in the frequency domain corresponds to the spatial decay, since\u2223\u2223\u2223\u2223\u2202kx\u0302(\u03be)\u2202\u03bek \u2223\u2223\u2223\u2223 \u2264 C \u222b |u|k|x(u)|du , where x\u0302(\u03be) is the Fourier transform of x. In [2] it was suggested to use the same principle in a general graph, by considering a smoothing kernel K \u2208 RN\u00d7N0 , such as splines, and searching for spectral multipliers of the form\nwg = Kw\u0303g .\nThe algorithm which implements the graph convolution is described in Algorithm 1.\nAlgorithm 1 Train Graph Convolution Layer 1: Given GFT matrix U , interpolation kernel K, weights w. 2: Forward Pass: 3: Fetch input batch x and gradients w.r.t outputs\u2207y. 4: Compute interpolated weights: wf \u2032f = K \u02dcwf \u2032f . 5: Compute output: ysf \u2032 = UT (\u2211 f Uxsf wf \u2032f ) .\n6: Backward Pass: 7: Compute gradient w.r.t input: \u2207xsf = UT (\u2211 f \u2032 \u2207ysf \u2032 wf \u2032f ) 8: Compute gradient w.r.t interpolated weights: \u2207wf \u2032f = UT ( \u2211 s\u2207ysf \u2032 xsf ) 9: Compute gradient w.r.t weights\u2207 \u02dcwf \u2032f = KT\u2207wf \u2032f ."}, {"heading": "3.2 Pooling with Hierarchical Graph Clustering", "text": "In image and speech applications, and in order to reduce the complexity of the model, it is often useful to trade off spatial resolution for feature resolution as the representation becomes deeper. For that purpose, pooling layers compute statistics in local neighborhoods, such as the average amplitude, energy or maximum activation.\nThe same layers can be defined in a graph by providing the equivalent notion of neighborhood. In this work, we construct such neighborhoods at different scales using multi-resolution spectral clustering [20], and consider both average and max-pooling as in standard convolutional network architectures."}, {"heading": "4 Graph Construction", "text": "Whereas some recognition tasks in non-Euclidean domains, such as those considered in [2] or [12], might have a prior knowledge of the graph structure of the input data, many other real-world applications do not have such knowledge. It is thus necessary to estimate a similarity matrix W from the data before constructing the spectral network. In this paper we consider two possible graph constructions, one unsupervised by measuring joint feature statistics, and another one supervised using an initial network as a proxy for the estimation."}, {"heading": "4.1 Unsupervised Graph Estimation", "text": "Given data X \u2208 RL\u00d7N , where L is the number of samples and N the number of features, the simplest approach to estimating a graph structure from the data is to consider a distance between features i and j given by d(i, j) = \u2016Xi \u2212Xj\u20162 , where Xi is the i-th column of X . While correlations are typically sufficient to reveal the intrinsic geometrical structure of images [16], the effects of higher-order statistics might be non-negligible in other contexts, especially in presence of sparsity. Indeed, in many situations the pairwise Euclidean distances might suffer from unnormalized measurements. Several strategies and variants exist to gain some robustness, for instance replacing the Euclidean distance by the Z-score (thus renormalizing each feature by its standard deviation), the \u201csquare-correlation\u201d (computing the correlation of squares of previously whitened features), or the mutual information.\nThis distance is then used to build a Gaussian diffusion Kernel [1]\n\u03c9(i, j) = exp\u2212 d(i,j) \u03c32 . (1)\nIn our experiments, we also consider the variant of self-tuning diffusion kernel [21]\n\u03c9(i, j) = exp \u2212 d(i,j)\u03c3i\u03c3j ,\nwhere \u03c3i is computed as the distance d(i, ik) corresponding to the k-th nearest neighbor ik of feature i. This defines a kernel whose variance is locally adapted around each feature point, as opposed to (1) where the variance is shared.\nThe main advantage of (1) is that it does not require labeled data. Therefore, it is possible to estimate the similarity using several datasets that share the same features, for example in text classification."}, {"heading": "4.2 Supervised Graph Estimation", "text": "As discussed in the previous section, the notion of feature similarity is not well defined, as it depends on our choice of kernel and criteria. Therefore, in the context of supervised learning, the relevant statistics from the input signals might not correspond to our imposed similarity criteria. It may thus be interesting to ask for the feature similarity that best suits a particular classification task.\nA particularly simple approach is to use a fully-connected network to determine the feature similarity. Given a training set with normalized 1 features X \u2208 RL\u00d7N and labels y \u2208 {1, . . . , C}L, we initially train a fully connected network \u03c6 with K layers of weights W1, . . . ,WK , using standard ReLU activations and dropout. We then extract the first layer features W1 \u2208 RN\u00d7M1 , where M1 is the number of first-layer hidden features, and consider the distance\ndsup(i, j) = \u2016W1,i \u2212W1,j\u20162 , (2)\nthat is then fed into the Gaussian kernel as in (1). The interpretation is that the supervised criterion will extract through W1 a collection of linear measurements that best serve the classification task. Thus two features are similar if the network decides to use them similarly within these linear measurements.\nThis constructions can be seen as \u201cdistilling\u201d the information learnt by a first network into a kernel. In the general case where no assumptions are made on the dimension of the graph, it amounts to extracting N2/2 parameters from the first learning stage (which typically involves a much larger\n1In our experiments we simply normalized each feature by its standard deviation, but one could also whiten completely the data.\nnumber of parameters). If, moreover, we assume a low-dimensional graph structure of dimension m, thenmN parameters are extracted by projecting the resulting kernel into its leadingm directions.\nFinally, observe that one could simply replace the eigen-basis U obtained by diagonalizing the graph Laplacian by an arbitrary unitary matrix, which is then optimized by back-propagation together with the rest of the parameters of the model. We do not report results on this strategy, although we point out that it has the same learning complexity as the Fully Connected network (requiring O(KN2) parameters, where K is the number of layers and N is the input dimension)."}, {"heading": "5 Experiments", "text": "In order to measure the performance of spectral networks on real-world data and to explore the effect of the graph estimation procedure, we conducted experiments on three datasets from text categorization, computational biology and computer vision. All experiments were done using the Torch machine learning environment with a custom CUDA backend.\nWe based the spectral network architecture on that of a classical convolutional network, namely by interleaving graph convolution, ReLU and graph pooling layers, and ending with one or more fully connected layers. As noted above, training a spectral network requires an O(N2) matrix multiplication for each input and output feature map to perform the Graph Fourier Transform, compared to the efficient O(N logN) Fast Fourier Transform used in classical ConvNets. We found that training the spectral networks with large numbers of feature maps to be very time-consuming and therefore chose to experiment mostly with architectures with fewer feature maps and smaller pool sizes. We found that performing pooling at the beginning of the network was especially important to reduce the dimensionality in the graph domain and mitigate the cost of the expensive Graph Fourier Transform operation.\nIn this section we adopt the following notation to descibe network architectures: GCk denotes a graph convolution layer with k feature maps, Pk denotes a graph pooling layer with stride k and pool size 2k, and FCk denotes a fully connected layer with k hidden units. In our results we also denote the number of free parameters in the network by Pnet and the number of free parameters when estimating the graph by Pgraph."}, {"heading": "5.1 Reuters", "text": "We used the Reuters dataset described in [18], which consists of training and test sets each containing 201,369 documents from 50 mutually exclusive classes. Each document is represented as a log-normalized bag of words for 2000 common non-stop words. As a baseline we used the fullyconnected network of [18] with two hidden layers consisting of 2000 and 1000 hidden units regularized with dropout.\nWe chose hyperparameters by performing initial experiments on a validation set consisting of onetenth of the training data. Specifically, we set the number of subsampled weights to k = 60, learning rate to 0.01 and used max pooling rather than average pooling. We also found that using AdaGrad [5] made training faster. All architectures were then trained using the same hyperparameters. Since the experiments were computationally expensive, we did not train all models until full convergence. This enabled us to explore more model architectures and obtain a clearer understanding of the effects of graph construction.\n500 1000 1500 2000 2500\nNote that our architectures are designed so that they factor the first hidden layer of the fully connected network across feature maps and a subsampled graph, trading off resolution in the graph domain for resolution across feature maps. The number of inputs into the last fully connected layer is always the same as for the fully-connected network. The idea is to reduce the number of parameters in the first layer of the network while avoiding too much compression in the second layer. We note that as we increase the tradeoff between resolution in the graph domain and across features, there reaches a point where performance begins to suffer. This is especially pronounced for the unsupervised graph estimation strategies. When using the supervised method, the network is much more robust to the factorization of the first layer. Table 1 compares the test accuracy of the fully connected network and the GC4-P4-FC1000 network. Figure 5.2-left shows that the factorization of the lower layer has a beneficial regularizing effect.\n2this is the maximum value before the fully connected starts overfitting"}, {"heading": "5.2 Merck Molecular Activity Challenge", "text": "The Merck Molecular Activity Challenge is a computational biology benchmark where the task is to predict activity levels for various molecules based on the distances in bonds between different atoms. For our experiments we used the DPP4 dataset which has 8193 samples and 2796 features. We chose this dataset because it was one of the more challenging and was of relatively low dimensionality which made the spectral networks tractable. As a baseline architecture, we used the network of [10] which has 4 hidden layers and is regularized using dropout and weight decay. We used the same hyperparameter settings and data normalization recommended in the paper.\nAs before, we used one-tenth of the training set to tune hyperparameters of the network. For this task we found that k = 40 subsampled weights worked best, and that average pooling performed better than max pooling. Since the task is to predict a continuous variable, all networks were trained by minimizing the Root Mean-Squared Error loss. Following [10], we measured performance by computing the squared correlation between predictions and targets.\nWe again designed our architectures to factor the first two hidden layers of the fully-connected network across feature maps and a subsampled graph, and left the second two layers unchanged. As before, we see that the unsupervised graph estimation strategies yield a significant drop in performance whereas the supervised strategy enables our network to perform similarly to the fully-connected network with much fewer parameters. This indicates that it is able to factor the lower-level representations in such a way as to retain useful information for the classification task.\nFigure 5.2-right shows the test performance as the models are being trained. We note that the Merck datasets have test set samples assayed at a different time than the samples in the training set, and thus the distribution of features is typically different between the training and test sets. Therefore the test performance can be a significantly noisy function of the train performance. However, the effect of the different graph estimation procedures is still clear."}, {"heading": "5.3 ImageNet", "text": "In the experiments above our graph construction relied on estimation from the data. To measure the influence of the graph construction compared to the filter learning in the graph frequency domain, we performed the same experiments on the ImageNet dataset for which the graph is already known, namely it is the 2-D grid. The spectral network was thus a convolutional network whose weights were defined in the frequency domain using frequency smoothing rather than imposing compactly\nsupported filters. Training was performed exactly as in Figure 1, except that the linear transformation was a Fast Fourier Transform.\nOur network consisted of 4 convolution/ReLU/max pooling layers with 48, 128, 256 and 256 feature maps, followed by 3 fully-connected layers each with 4096 hidden units regularized with dropout. We trained two versions of the network: one classical convolutional network and one as a spectral network where the weights were defined in the frequency domain only and were interpolated using a spline kernel. Both networks were trained for 40 epochs over the ImageNet dataset where input images were scaled down to 128\u00d7 128 to accelerate training.\nTable 3: ImageNet results\nGraph Architecture Test Accuracy (Top 5) Test Accuracy (Top 1) 2-D Grid Convolutional Network 71.854 46.24 2-D Grid Spectral Network 71.998 46.71\n0 5 10 15 20 25 30 35 40 0\n10\n20\n30\n40\n50\n60\n70\n80\nepoch\npe rc\nen t a\ncc ur\nac y\nConvNet, top 1 SpectralNet, top 1 ConvNet, top 5 SpectralNet, top 5\nFigure 3: ConvNet vs. SpectralNet on ImageNet.\nWe see that both models yield nearly identical performance. Interstingly, the spectral network learns faster than the ConvNet during the first part of training, although both networks converge around the same time. This requires further investigation."}, {"heading": "6 Discussion", "text": "ConvNet architectures base their appeal and success on their ability to produce highly informative local statistics using low learning complexity and avoiding expensive matrix multiplications. This motivated us to consider generalizations on high-dimensional, unstructured data.\nWhen the statistical properties of the input satisfy both stationarity and composotionality, spectral networks have a learning complexity of the same order as Convnets. In the general setting where no prior knowledge of the input graph structure is known, our model requires estimating the similarities, a O(N2) operation, but making the model deeper does not increase learning complexity as much as the general Fully Connected architectures. Moreover, in contexts where feature similarities can be estimated using unlabeled data (such as word representations), our model has less parameters to learn from labeled data.\nHowever, as our results demonstrate, their extension poses significant challenges:\n\u2022 Although the learning complexity requires O(1) parameters per feature map, the evaluation, both forward and backward, requires a multiplication by the Graph Fourier Transform, which costs O(N2) operations. This is a major difference with respect to traditional ConvNets, which require only O(N). Fourier implementations of Convnets [13, 19] bring the complexity to O(N logN) thanks again to the specific symmetries of the grid. An open question is whether one can find approximate eigenbasis of general Graph Laplacians using Givens\u2019 decompositions similar to those of the FFT.\n\u2022 Our experiments show that when the input graph structure is not known a priori, graph estimation is the statistical bottleneck of the model, requiring O(N2) for general graphs and O(MN) for M -dimensional graphs. Supervised graph estimation performs significantly better than unsupervised graph estimation based on low-order moments. Furthermore, we have verified that the architecture is quite sensitive to graph estimation errors. In the supervised setting, this step can be viewed in terms of a Bootstrapping mechanism, where an initially unconstrained network is self-adjusted to become more localized and with weightsharing. \u2022 Finally, the statistical assumptions of stationarity and compositionality are not always ver-\nified. In those situations, the constraints imposed by the model risk to reduce its capacity for no reason. One possibility for addressing this issue is to insert Fully connected layers between the input and the spectral layers, such that data can be transformed into the appropriate statistical model. Another strategy, that is left for future work, is to relax the notion of weight sharing by introducing instead a commutation error \u2016WiL \u2212 LWi\u2016 with the graph Laplacian, which puts a soft penalty on transformations that do not commute with the Laplacian, instead of imposing exact commutation as is the case in the spectral net."}], "references": [{"title": "Laplacian eigenmaps and spectral techniques for embedding and clustering", "author": ["Mikhail Belkin", "Partha Niyogi"], "venue": "In NIPS,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2001}, {"title": "Spectral networks and deep locally connected networks on graphs", "author": ["Joan Bruna", "Wojciech Zaremba", "Arthur Szlam", "Yann LeCun"], "venue": "In Proceedings of the 2nd International Conference on Learning Representations,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Unsupervised deep haar scattering on graphs", "author": ["Xu Chen", "Xiuyuan Cheng", "St\u00e9phane Mallat"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "Selecting receptive fields in deep networks", "author": ["Adam Coates", "Andrew Y Ng"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Adaptive subgradient methods for online learning and stochastic optimization", "author": ["John Duchi", "Elad Hazan", "Yoram Singer"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "Emergence of complex-like cells in a temporal product network with local receptive fields", "author": ["Karol Gregor", "Yann LeCun"], "venue": "arXiv preprint arXiv:1006.0448,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "Deep neural networks for acoustic modeling in speech recognition", "author": ["Geoffrey Hinton", "Li Deng", "Dong Yu", "George Dahl", "Abdel rahman Mohamed", "Navdeep Jaitly", "Andrew Senior", "Vincent Vanhoucke", "Patrick Nguyen", "Tara Sainath", "Brian Kingsbury"], "venue": "Signal Processing Magazine,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E. Hinton"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2012}, {"title": "Deep neural networks as a method for quantitative structure-activity relationships", "author": ["Junshui Ma", "Robert P. Sheridan", "Andy Liaw", "George E. Dahl", "Vladimir Svetnik"], "venue": "Journal of Chemical Information and Modeling,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "A wavelet tour of signal processing", "author": ["St\u00e9phane Mallat"], "venue": "Academic press,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1999}, {"title": "Shapenet: Convolutional neural networks on non-euclidean manifolds", "author": ["Jonathan Masci", "Davide Boscaini", "Michael M. Bronstein", "Pierre Vandergheynst"], "venue": "CoRR, abs/1501.06297,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Fast training of convolutional networks through ffts", "author": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "venue": "arXiv preprint arXiv:1312.5851,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2013}, {"title": "Tiled convolutional neural networks", "author": ["Jiquan Ngiam", "Zhenghao Chen", "Daniel Chia", "Pang W Koh", "Quoc V Le", "Andrew Y Ng"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2010}, {"title": "High-dimensional ising model selection using `1-regularized logistic regression", "author": ["Pradeep Ravikumar", "Martin J Wainwright", "John D Lafferty"], "venue": "The Annals of Statistics,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2010}, {"title": "Learning the 2-d topology of images", "author": ["Nicolas L Roux", "Yoshua Bengio", "Pascal Lamblin", "Marc Joliveau", "Bal\u00e1zs K\u00e9gl"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2008}, {"title": "Dropout: A simple way to prevent neural networks from overfitting", "author": ["Nitish Srivastava", "Geoffrey Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1929}, {"title": "Dropout: A simple way to prevent neural networks from overfitting", "author": ["Nitish Srivastava", "Geoffrey Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2014}, {"title": "Fast convolutional nets with fbfft: A GPU performance evaluation", "author": ["Nicolas Vasilache", "Jeff Johnson", "Micha\u00ebl Mathieu", "Soumith Chintala", "Serkan Piantino", "Yann LeCun"], "venue": "CoRR, abs/1412.7580,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2014}, {"title": "A tutorial on spectral clustering", "author": ["Ulrike Von Luxburg"], "venue": "Statistics and computing,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2007}, {"title": "Self-tuning spectral clustering", "author": ["Lihi Zelnik-Manor", "Pietro Perona"], "venue": "In Advances in neural information processing systems,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2004}], "referenceMentions": [{"referenceID": 7, "context": "These properties are exploited efficiently by ConvNets [8, 7], which are designed to extract local features that are shared across the signal domain.", "startOffset": 55, "endOffset": 61}, {"referenceID": 6, "context": "These properties are exploited efficiently by ConvNets [8, 7], which are designed to extract local features that are shared across the signal domain.", "startOffset": 55, "endOffset": 61}, {"referenceID": 15, "context": "For such type of data of dimension N , deep learning strategies are reduced to learning with fully-connected layers, which have O(N) parameters, and regularization is carried out via weight decay and dropout [17].", "startOffset": 208, "endOffset": 212}, {"referenceID": 1, "context": "When the graph structure of the input is known, [2] introduced a model to generalize ConvNets using low learning complexity similar to that of a ConvNet, and which was demonstrated on simple lowdimensional graphs.", "startOffset": 48, "endOffset": 51}, {"referenceID": 1, "context": "\u2022 We extend the ideas from [2] to large-scale classification problems, specifically Imagenet Object Recognition, text categorization and bioinformatics.", "startOffset": 27, "endOffset": 30}, {"referenceID": 5, "context": "There have been several works which have explored architectures using the so-called local receptive fields [6, 4, 14], mostly with applications to image recognition.", "startOffset": 107, "endOffset": 117}, {"referenceID": 3, "context": "There have been several works which have explored architectures using the so-called local receptive fields [6, 4, 14], mostly with applications to image recognition.", "startOffset": 107, "endOffset": 117}, {"referenceID": 12, "context": "There have been several works which have explored architectures using the so-called local receptive fields [6, 4, 14], mostly with applications to image recognition.", "startOffset": 107, "endOffset": 117}, {"referenceID": 3, "context": "In particular, [4] proposes a scheme to learn how to group together features based upon a measure of similarity that is obtained in an unsupervised fashion.", "startOffset": 15, "endOffset": 18}, {"referenceID": 1, "context": "Recently, [2] proposed a generalization of convolutions to graphs via the Graph Laplacian.", "startOffset": 10, "endOffset": 13}, {"referenceID": 10, "context": "More recently, [12] introduced Shapenet, another generalization of convolutions on non-Euclidean domains based on geodesic polar coordinates, which was successfully applied to shape analysis, and allows comparison across different manifolds.", "startOffset": 15, "endOffset": 19}, {"referenceID": 13, "context": "For instance, [15] studies the estimation of the graph from a statistical point of view, through the identification of a certain graphical model using `1-penalized logistic regression.", "startOffset": 14, "endOffset": 18}, {"referenceID": 2, "context": "Also, [3] considers the problem of learning a deep architecture through a series of Haar contractions, which are learnt using an unsupervised pairing criteria over the features.", "startOffset": 6, "endOffset": 9}, {"referenceID": 1, "context": "Our work builds upon [2] which introduced spectral networks.", "startOffset": 21, "endOffset": 24}, {"referenceID": 0, "context": "There are several ways of computing the graph Laplacian L [1].", "startOffset": 58, "endOffset": 61}, {"referenceID": 9, "context": "We then recover a classical convolution operator by noting that convolutions are by definition linear operators that diagonalize in the Fourier domain (also known as the Convolution Theorem [11]).", "startOffset": 190, "endOffset": 194}, {"referenceID": 1, "context": "In [2] it was suggested to use the same principle in a general graph, by considering a smoothing kernel K \u2208 RN\u00d7N0 , such as splines, and searching for spectral multipliers of the form wg = Kw\u0303g .", "startOffset": 3, "endOffset": 6}, {"referenceID": 18, "context": "In this work, we construct such neighborhoods at different scales using multi-resolution spectral clustering [20], and consider both average and max-pooling as in standard convolutional network architectures.", "startOffset": 109, "endOffset": 113}, {"referenceID": 1, "context": "Whereas some recognition tasks in non-Euclidean domains, such as those considered in [2] or [12], might have a prior knowledge of the graph structure of the input data, many other real-world applications do not have such knowledge.", "startOffset": 85, "endOffset": 88}, {"referenceID": 10, "context": "Whereas some recognition tasks in non-Euclidean domains, such as those considered in [2] or [12], might have a prior knowledge of the graph structure of the input data, many other real-world applications do not have such knowledge.", "startOffset": 92, "endOffset": 96}, {"referenceID": 14, "context": "While correlations are typically sufficient to reveal the intrinsic geometrical structure of images [16], the effects of higher-order statistics might be non-negligible in other contexts, especially in presence of sparsity.", "startOffset": 100, "endOffset": 104}, {"referenceID": 0, "context": "This distance is then used to build a Gaussian diffusion Kernel [1]", "startOffset": 64, "endOffset": 67}, {"referenceID": 19, "context": "In our experiments, we also consider the variant of self-tuning diffusion kernel [21]", "startOffset": 81, "endOffset": 85}, {"referenceID": 16, "context": "We used the Reuters dataset described in [18], which consists of training and test sets each containing 201,369 documents from 50 mutually exclusive classes.", "startOffset": 41, "endOffset": 45}, {"referenceID": 16, "context": "As a baseline we used the fullyconnected network of [18] with two hidden layers consisting of 2000 and 1000 hidden units regularized with dropout.", "startOffset": 52, "endOffset": 56}, {"referenceID": 4, "context": "We also found that using AdaGrad [5] made training faster.", "startOffset": 33, "endOffset": 36}, {"referenceID": 8, "context": "As a baseline architecture, we used the network of [10] which has 4 hidden layers and is regularized using dropout and weight decay.", "startOffset": 51, "endOffset": 55}, {"referenceID": 8, "context": "Following [10], we measured performance by computing the squared correlation between predictions and targets.", "startOffset": 10, "endOffset": 14}, {"referenceID": 11, "context": "Fourier implementations of Convnets [13, 19] bring the complexity to O(N logN) thanks again to the specific symmetries of the grid.", "startOffset": 36, "endOffset": 44}, {"referenceID": 17, "context": "Fourier implementations of Convnets [13, 19] bring the complexity to O(N logN) thanks again to the specific symmetries of the grid.", "startOffset": 36, "endOffset": 44}], "year": 2015, "abstractText": "Deep Learning\u2019s recent successes have mostly relied on Convolutional Networks, which exploit fundamental statistical properties of images, sounds and video data: the local stationarity and multi-scale compositional structure, that allows expressing long range interactions in terms of shorter, localized interactions. However, there exist other important examples, such as text documents or bioinformatic data, that may lack some or all of these strong statistical regularities. In this paper we consider the general question of how to construct deep architectures with small learning complexity on general non-Euclidean domains, which are typically unknown and need to be estimated from the data. In particular, we develop an extension of Spectral Networks which incorporates a Graph Estimation procedure, that we test on large-scale classification problems, matching or improving over Dropout Networks with far less parameters to estimate.", "creator": "LaTeX with hyperref package"}}}