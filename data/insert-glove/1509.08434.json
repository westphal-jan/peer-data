{"id": "1509.08434", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "28-Sep-2015", "title": "Ensemble UCT Needs High Exploitation", "abstract": "jri Recent lucado results ahas have shown that gilliatt the MCTS shaken algorithm (chmerkovskiy a new, adaptive, purty randomized optimization arashiyama algorithm) pianola is villumsen effective nrf2 in a remarkably blackouts diverse tostan set of tia applications townspeople in Artificial peerlessly Intelligence, Operations Research, and hevy High bargor Energy Physics. MCTS can 42,800 find zentradi good thorhild solutions without memorial domain topelius dependent kohlhase heuristics, using the 1988-1995 UCT formula existentialist to pentonville balance exploitation jatte and exploration. bangi It deraa has been ectoparasitic suggested that the 1-trillion optimum gravesande in mokbel the secession exploitation - tent exploration balance differs for sayadi different downloader search kubinka tree lubricity sizes: small occasion search ofs trees needs more aorta exploitation; windward large sensitize search honse trees cristata need gastronome more exploration. g\u00fcrsel Small search tequesta trees 48.41 occur in variations of sharpened MCTS, ham such as parallel appellees and ensemble remacemide approaches. This paper dushan investigates 39.33 the capos possibility of waldburger improving rhr the performance poulter of kalecki Ensemble tirosh UCT 90-mile by increasing the phetchabun level microstock of exploitation. As summersby the bugbee search trees becomes smaller grundgesetz we achieve nestucca an bansk\u00e1 improved performance. The results delillo are bitte important benmosche for improving the whannell performance of large negativism scale parallelism mty of MCTS.", "histories": [["v1", "Mon, 28 Sep 2015 19:14:43 GMT  (84kb)", "http://arxiv.org/abs/1509.08434v1", "7 pages, 7 figures"]], "COMMENTS": "7 pages, 7 figures", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["s ali mirsoleimani", "aske plaat", "jaap van den herik"], "accepted": false, "id": "1509.08434"}, "pdf": {"name": "1509.08434.pdf", "metadata": {"source": "CRF", "title": "Ensemble UCT Needs High Exploitation", "authors": ["S. Ali Mirsoleimani", "Aske Plaat", "Jaap van den Herik"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n50 9.\n08 43\n4v 1\n[ cs\n.A I]\n2 8\nSe p\n20 15"}, {"heading": "1 INTRODUCTION", "text": "Since its inception in 2006 (Coulom, 2006), the Monte Carlo Tree Search (MCTS) algorithm has gained much interest among optimization researchers. MCTS is a sampling algorithm that uses search results to guide itself through the search space, obviating the need for domain-dependent heuristics. Starting with the game of Go, an oriental board game, MCTS has achieved performance breakthroughs in domains ranging from planning and scheduling to high energy physics (Chaslot et al., 2008a; Kuipers et al., 2013; Ruijl et al., 2014). The success of MCTS depends on the balance between exploitation (look in areas which appear to be promising) and exploration (look in areas that have not been well sampled yet). The most popular algorithm in the MCTS family which addresses this dilemma is the Upper Confidence Bound for Trees (UCT) (Kocsis and Szepesva\u0301ri, 2006). As with most sampling algorithms, one way to improve the quality of the result is to increase the number of samples and thus enlarge the size of the MCTS tree. However, constructing a single large search tree with t samples or playouts is a time consuming process. A solution for this problem is to create a group of n smaller trees that each have t/n playouts and search these in parallel. This approach is used in root parallelism (Chaslot et al., 2008a) and in Ensemble UCT (Fern and Lewis, 2011). In both, root parallelism and Ensemble UCT, multiple independent\nUCT instances are constructed. At the end of the search process, the statistics of all trees are combined to yield the final result (Browne et al., 2012). However, there is contradictory evidence on the success of Ensemble UCT (Browne et al., 2012). On the one hand, Chaslot et al. find that, for Go, Ensemble UCT (with n trees of t/n playouts each) outperforms a plain UCT (with t playouts) (Chaslot et al., 2008a). However, Fern and Lewis are not able to reproduce this result in other domains (Fern and Lewis, 2011), finding situations where a plain UCT outperforms Ensemble UCT given the same total number of playouts.\nAs already mentioned, the success of MCTS depends on the exploitation-exploration balance. Previous work by Kuipers et al. has argued that when the tree size is small, more exploitation should be chosen, and with larger tree sizes, high exploration is suitable (Kuipers et al., 2013). The main contribution of this paper is that we show that this idea can be used in Ensemble UCT to improve its performance.\nThe remainder of this paper is structured as follows: in section 2 the required background information is briefly discussed. Section 3 discusses related work. Section 4 gives the experimental setup, together with the experimental results. Finally, a conclusion is given in Section 5."}, {"heading": "2 BACKGROUND", "text": "Below we provide some background information on MCTS (Section 2.1), Ensemble UCT (Section 2.2), and the game of Hex (Section 2.3)."}, {"heading": "2.1 Monte Carlo Tree Search", "text": "The main building block of the MCTS algorithm is the search tree, where each node of the tree represents a game position. The algorithm constructs the search tree incrementally, expanding one node in each iteration. Each iteration has four steps (Chaslot et al., 2008b). (1) In the selection step, beginning at the root of the tree, child nodes are selected successively according to a selection criterion, until a leaf node is reached. (2) In the expansion step, unless the selected leaf node ends the game, a random unexplored child of the leaf node is added to the tree. (3) In the simulation step (also called playout step), the rest of the path to a final state is completed by playing random moves. At the end a score \u2206 is obtained that signifies the score of the chosen path through the state space. (4) In the backprogagation step (also called backup step), the \u2206 value is propagated back through the traversed path in the tree, which updates the average score (win rate) of a node. The number of times that each node in this path is visited is incremented by one. Figure 1 shows the general MCTS algorithm. In many MCTS implementations the UCT algorithm is chosen as the selection criterion (Kocsis and Szepesva\u0301ri, 2006)."}, {"heading": "2.1.1 The UCT Algorithm", "text": "The UCT algorithm provides a solution for the problem of exploitation (look into promising areas) and exploration (look for promising areas) in the selection phase of the MCTS algorithm (Kocsis and Szepesva\u0301ri, 2006). A child node j\nis selected to maximize:\nUCT ( j) = X j +Cp\n\u221a\nln(n) n j\n(1)\nwhere X j = w j n j\n, w j is the number of wins in child j, n j is the number of times child j has been visited, n is the number of times the parent node has been visited, and Cp \u2265 0 is a constant. The first term in UCT equation is for exploitation and the second one is for exploration. The level of exploration of the UCT algorithm can be adjusted by the Cp constant. (High Cp means more exploration.)"}, {"heading": "2.1.2 Root Parallelism", "text": "Originally, root parallelism has been an UCT algorithm, viz. UCT in parallel. In root parallelism (Chaslot et al., 2008a) each thread builds simultaneously a private and independent MCTS search tree with a unique random seed. When root parallelism wants to select the next move to play, one of the threads collects the number of visits and number of wins in the upper-most nodes of all trees and then computes the total sum for each child (Chaslot et al., 2008a). Then, it selects a move based on one of the possible policies. Figure 2 shows root parallelism. However, nowadays we have noted that UCT with root parallelism is not algorithmically equivalent to plain UCT, but is equivalent to Ensemble UCT (Browne et al., 2012)."}, {"heading": "2.2 Ensemble UCT", "text": "Ensemble UCT is given its place in the overview article by (Browne et al., 2012). Table 1 shows different possible configurations for Ensemble UCT. Each configuration has its own benefits. The total number of playouts is t and the size of ensemble (number of trees inside the ensemble) is n. It is supposed that n processors are available which is equal to the ensemble size.\nThe first line of the table shows the situation where Ensemble UCT has n \u00b7 t playouts in total while UCT has only t playouts. In this case, there would be no speedup in a parallel execution of the ensemble approach on n cores, but the larger search effort would presumably result in a better search result. We call this use of parallelism Strength speedup. The second line of Table 1 shows a different possible configuration for Ensemble UCT. In this case, the total number of playouts for both UCT and Ensemble UCT is equal to t. Thus, each core searches a smaller tree of size tn . The search will be n times quicker (the ideal case). We call this use of parallelism Playout speedup. It is important to note that in this configuration both approaches take the same amount of time on a single core. However, there is still the question whether we can reach any Strength speedup. This question will be answered in this paper. Figure 3 shows the pseudo-code of Ensemble UCT."}, {"heading": "2.3 The Game of Hex", "text": "Hex is a game with a board of hexagonal cells (Arneson et al., 2010). Each player is represented by\na color (White or Black). Players take turns by placing a stone of their color on a cell of the board. The goal for each player is to create a connected chain of stones between the opposing sides of the board marked by their colors. The first player to complete this path wins the game.\nIn our implementation of the Hex game, a fast disjoint-set data structure is used to determine the connected stones. Using this data structure we have an efficient representation of the board position (Galil and Italiano, 1991)."}, {"heading": "3 RELATED WORK", "text": "Chaslot et al. provided evidence that, for Go, root parallelism with n instances of tn iterations each outperforms plain UCT with t iterations, i.e., root parallelism (being a form of Ensemble UCT) outperforms plain UCT given the same total number of iterations (Chaslot et al., 2008a). However, in other domains, Fern and Lewis do not find this result (Fern and Lewis, 2011).\n(Soejima et al., 2010) also analyzed the performance of root parallelism in detail. They found that a majority voting scheme gives better performance than the conventional approach of playing the move with the greatest total number of visits across all trees. They suggested that the findings in (Chaslot et al., 2008a) are explained by the fact that root parallelism performs a shallower search, making it easier for UCT to escape from local optima than the deeper search performed by plain UCT. In root parallelism each process does not build a search tree larger than sequential UCT; each process has a local tree that contains characteristics that are different from the others.\nFern and Lewis thoroughly investigated an Ensemble UCT approach in which multiple instances of UCT were run independently and their root statistics were combined to yield the final result (Fern and Lewis, 2011). So, our task is to explain the differences in these work."}, {"heading": "4 EMPIRICAL STUDY", "text": "In this section, the experimental setup is described and then the experimental results are presented."}, {"heading": "4.1 Experimental Setup", "text": "The Hex board is represented by a disjoint-set. This data structure has three operations MakeSet, Find and Union. In the best case, the amortized time per operation is O(\u03b1(n)). The value of \u03b1(n) is less than 5 for all remotely practical values of n (Galil and Italiano, 1991).\nIn Ensemble UCT, each tree performs a completely independent UCT search with a different random seed. To determine the next move to play, the number of wins and visits of the root\u2019s children of all trees are collected and the total sum of wins and visits for each child is computed. The child with the largest number of wins/visits is selected.\nThe plain UCT algorithm and Ensemble UCT are implemented in C++. In order to make our experiments as realistic as possible, we use a custom developed game playing program for the game of Hex (Mirsoleimani et al., 2014; Mirsoleimani et al., 2015). This program is highly optimized, and reaches a speed of more than 40,000 playouts per second per core on a 2,4 GHz Intel Xeon processor. The source code of the program is available online. 1\nAs Hex is a 2-player game, the playing strength of Ensemble UCT is measured by playing versus a plain UCT with the same number of playouts. We expect to see an improvement for Ensemble UCT playing strength against plain UCT by choosing 0.1 as the value of Cp (high exploitation) when the number of playouts is small. The value of Cp is set to 1.0 for plain UCT (high exploration). Note that for the purpose of this research it is not important to find the optimal value of Cp, but just to to show the difference in effect on the performance.\nOur experimental results show the percentage of wins for Ensemble UCT with a particular ensemble size and a particular Cp value against plain UCT. Each\n1Source code is available at https://github.com/mirsoleimani/paralleluct/\ndata point show the average of 200 games with the corresponding 99% confidence interval. Table 2 summarizes how the performance of Ensemble UCT versus plain UCT is evaluated. The concept of high exploitation for small UCT tree is significant if Ensemble UCT reaches more than 50% win rate. (The next section will shown that this is indeed the case.)\nThe board size for Hex is 11x11. In our experiments the maximum ensemble size is 28 = 256. Thus, for 217 playouts, when the ensemble size is 1 there are 217 playouts per tree and when the ensemble size is 26 = 64 the number of playouts per tree is 211. Throughout the experiments the ensemble size is multiplied by a factor of two.\nThe results were measured on a dual socket machine with 2 Intel Xeon E5-2596v2 processors running at 2.40GHz. Each processor has 12 cores, 24 hyperthreads and 30 MB L3 cache. Each physical core has 256KB L2 cache. The pack TurboBoost frequency is 3.2 GHz. The machine has 192GB physical memory. Intel\u2019s icc 14.0.1 compiler is used to compile the program."}, {"heading": "4.2 Experimental Results", "text": "Below we provide our experimental results. We distinguish them into hidden exploration in Ensemble UCT (4.2.1) and exploitation-exploration trade-off for Ensemble UCT (4.2.2)."}, {"heading": "4.2.1 Hidden Exploration in Ensemble UCT", "text": "It is important to understand that Ensemble UCT has a hidden exploration factor by nature. The reasons are (1) each tree in Ensemble UCT is independent, and (2) an ensemble of trees contains more exploration than a single UCT search of comparable size would have. Figure 4 and 5 show how this hidden exploration factor affects the performance of both, Ensemble UCT and plain UCT, in the decision making process at the level of individual moves. In the graphs, a board position of game of Hex is used where moves around number 60 are the best ones. Therefore, the graph of the number of visits for children of the root with a bell shape around move number 60 is the desirable one.\nIn Figure 4 the graph shows the number of visits for the root\u2019s children when using Ensemble UCT. The number of trees in the ensemble is 8 and the number of playouts per tree is 10,000. In Figure 5 the performance of palin UCT with 80,000 playouts is shown. Both algorithms have the same total number of playouts. However, for Cp = 0, which means the exploration part of UCT formula is turned off, comparing two graphs show that all root\u2019s children in the Ensemble UCT have received at least a few visits while in UCT there are many unvisited children. The difference between performance of these two approaches for other Cp values is also shown. This experiment shows the hidden exploration in Ensemble UCT: in Figure 4 the Cp = 0 exploitation peaks reach up to 2400 visits, while in Figure 5 the Cp = 0 exploitation peaks reach up to 4000 visits. Ensemble UCT dulls the exploitation peaks."}, {"heading": "4.2.2 Exploitation-Exploration trade-off for Ensemble UCT", "text": "In Figures 6 and 7, from the left side to the right side of a graph, the ensemble size (number of search trees per ensemble) increases by a factor of two and the number of playouts per tree (tree size) decreases by the same factor. Thus, at the most right hand side of the graph we have the largest ensemble with smallest trees. The total number of playouts always remains the same throughout an experiment for both Ensemble UCT and plain UCT. The value of Cp for plain UCT is always 1.0 which means high exploration.\nFigure 6 shows the relations between the value of Cp and the ensemble size, when both plain UCT and Ensemble UCT have the same number of total playouts. Moreover, Figure 6 shows the performance of Ensemble UCT for different values of Cp. It\nshows that when Cp = 1.0 (highly explorative) Ensemble UCT performs as good as or mostly worse than plain UCT. When Ensemble UCT uses Cp = 0.1 (highly exploitative) then for small ensemble sizes (large sub-trees) the performance of Ensemble UCT sharply drops down. By increasing the ensemble size (smaller sub-trees), the performance of Ensemble UCT keeps growing improving until it becomes as good as or even better than plain UCT.\nIn order to investigate the effect of enlarging number of playouts on the performance of Ensemble UCT, second experiments is conducted using 218 playouts. Figure 7 shows that when for this large number of playouts the value of Cp = 1.0 is high (i.e., highly explorative) the performance of Ensemble UCT can not be better that plain UCT. While for a small value of Cp = 0.1 (i.e., highly exploitative) the performance of Ensemble UCT is almost always better than plain UCT after ensemble size is 25."}, {"heading": "5 CONCLUSION", "text": "This paper describes an empirical study on Ensemble UCT with different sets of configurations for ensemble size, tree size and exploitation-exploration trade-off. Previous studies on Ensemble UCT/root parallelism provided inconclusive evidence on the effectiveness of Ensemble UCT (Chaslot et al., 2008a; Fern and Lewis, 2011; Browne et al., 2012). Our results suggest that the reason lies in the explorationexploitaiton trade-off in relation to the size of the subtrees. Our results provide clear evidence that the performance of Ensemble UCT is improved by selecting higher exploitation for smaller search trees given a fixed time bound or number of simulations.\nThis work is motivated, in part, by the observation in (Chaslot et al., 2008a) of super-linear speedup in root parallelism. Finding super-linear speedup in two-agent games occurs infrequently. Most studies in parallel game-tree search report a battle against search overhead, communication overhead, and synchronization overhead (see, e.g., (Romein, 2001). For super-linear speedup to occur, the parallel search must search fewer nodes than the sequential search. In most algorithms, parallellizations suffer because parts of the tree are searched with less information than is available in the sequential search, causing more nodes to be expanded. This study has shown how the situation that the parallel search tree is smaller than the sequential search tree can indeed occur in MCTS. The ensemble of the independent (parallel) sub-trees can be smaller than the monolithic total tree. When Cp is chosen low (i.e., exploitative) the Ensemble search runs efficiently, where the monolithic plain UCT search is less efficient (see Figures 6 and 7).\nFor future work, we will explore other parts of the parameter space, to find optimal Cp settings for different combinations of tree size and ensemble size. Also we will study the effect in different domains. Even more important is the effect of Cp in tree parallelism (Chaslot et al., 2008a)."}, {"heading": "ACKNOWLEDGEMENTS", "text": "This work is supported in part by the ERC Advanced Grant no. 320651, \u201cHEPGAME.\u201d"}], "references": [{"title": "Monte Carlo Tree Search in Hex", "author": ["B. Arneson", "R.B. Hayward", "P. Henderson"], "venue": "IEEE Transactions on Computational Intelligence and AI in Games,", "citeRegEx": "Arneson et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Arneson et al\\.", "year": 2010}, {"title": "A Survey of Monte Carlo Tree Search Methods", "author": ["C.B. Browne", "E. Powley", "D. Whitehouse", "S.M. Lucas", "P.I. Cowling", "P. Rohlfshagen", "S. Tavener", "D. Perez", "S. Samothrakis", "S. Colton"], "venue": "Computational Intelligence and AI in Games, IEEE Transactions on,", "citeRegEx": "Browne et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Browne et al\\.", "year": 2012}, {"title": "Parallel Monte-Carlo Tree Search", "author": ["G. Chaslot", "M. Winands", "J. van den Herik"], "venue": "Computers and Games,", "citeRegEx": "Chaslot et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Chaslot et al\\.", "year": 2008}, {"title": "Progressive strategies for Monte-Carlo tree search", "author": ["Chaslot", "G.M.J. B", "M.H.M. Winands", "J. van den Herik", "Uiterwijk", "J.W.H. M", "B. Bouzy"], "venue": "New Mathematics and Natural Computation,", "citeRegEx": "Chaslot et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Chaslot et al\\.", "year": 2008}, {"title": "Efficient Selectivity and Backup Operators in Monte-Carlo Tree Search", "author": ["R. Coulom"], "venue": "In Proceedings of the 5th International Conference on Computers and Games,", "citeRegEx": "Coulom,? \\Q2006\\E", "shortCiteRegEx": "Coulom", "year": 2006}, {"title": "Ensemble Monte-Carlo Planning: An Empirical Study", "author": ["A. Fern", "P. Lewis"], "venue": "In ICAPS,", "citeRegEx": "Fern and Lewis,? \\Q2011\\E", "shortCiteRegEx": "Fern and Lewis", "year": 2011}, {"title": "Data Structures and Algorithms for Disjoint Set Union Problems", "author": ["Z. Galil", "G.F. Italiano"], "venue": "ACM Comput. Surv.,", "citeRegEx": "Galil and Italiano,? \\Q1991\\E", "shortCiteRegEx": "Galil and Italiano", "year": 1991}, {"title": "Machine Learning: ECML 2006, volume 4212 of Lecture Notes in Computer Science", "author": ["L. Kocsis", "C. Szepesv\u00e1ri"], "venue": null, "citeRegEx": "Kocsis and Szepesv\u00e1ri,? \\Q2006\\E", "shortCiteRegEx": "Kocsis and Szepesv\u00e1ri", "year": 2006}, {"title": "Improving Multivariate Horner Schemes with Monte Carlo Tree Search", "author": ["J. Kuipers", "A. Plaat", "J. Vermaseren", "J. van den Herik"], "venue": "Computer Physics Communications,", "citeRegEx": "Kuipers et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Kuipers et al\\.", "year": 2013}, {"title": "Parallel Monte Carlo Tree Search", "author": ["S.A. Mirsoleimani", "A. Plaat", "J. van den Herik", "J. Vermaseren"], "venue": null, "citeRegEx": "Mirsoleimani et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mirsoleimani et al\\.", "year": 2015}, {"title": "Performance analysis of a 240 thread tournament level MCTS Go program on the Intel Xeon Phi", "author": ["S.A. Mirsoleimani", "A. Plaat", "J. Vermaseren", "J. van den Herik"], "venue": "In The 2014 European Simulation and Modeling Conference", "citeRegEx": "Mirsoleimani et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Mirsoleimani et al\\.", "year": 2014}, {"title": "Multigame \u2013 An Environment for Distributed Game-Tree Search", "author": ["J.W. Romein"], "venue": "PhD thesis, Vrije Universiteit", "citeRegEx": "Romein,? \\Q2001\\E", "shortCiteRegEx": "Romein", "year": 2001}, {"title": "Combining Simulated Annealing and Monte Carlo Tree Search for Expression Simplification", "author": ["B. Ruijl", "J. Vermaseren", "A. Plaat", "J. van den Herik"], "venue": "Proceedings of ICAART Conference", "citeRegEx": "Ruijl et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Ruijl et al\\.", "year": 2014}, {"title": "Evaluating Root Parallelization in Go", "author": ["Y. Soejima", "A. Kishimoto", "O. Watanabe"], "venue": "IEEE Transactions on Computational Intelligence and AI in Games,", "citeRegEx": "Soejima et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Soejima et al\\.", "year": 2010}], "referenceMentions": [{"referenceID": 4, "context": "Since its inception in 2006 (Coulom, 2006), the Monte Carlo Tree Search (MCTS) algorithm has gained much interest among optimization researchers.", "startOffset": 28, "endOffset": 42}, {"referenceID": 8, "context": "Starting with the game of Go, an oriental board game, MCTS has achieved performance breakthroughs in domains ranging from planning and scheduling to high energy physics (Chaslot et al., 2008a; Kuipers et al., 2013; Ruijl et al., 2014).", "startOffset": 169, "endOffset": 234}, {"referenceID": 12, "context": "Starting with the game of Go, an oriental board game, MCTS has achieved performance breakthroughs in domains ranging from planning and scheduling to high energy physics (Chaslot et al., 2008a; Kuipers et al., 2013; Ruijl et al., 2014).", "startOffset": 169, "endOffset": 234}, {"referenceID": 7, "context": "The most popular algorithm in the MCTS family which addresses this dilemma is the Upper Confidence Bound for Trees (UCT) (Kocsis and Szepesv\u00e1ri, 2006).", "startOffset": 121, "endOffset": 150}, {"referenceID": 5, "context": ", 2008a) and in Ensemble UCT (Fern and Lewis, 2011).", "startOffset": 29, "endOffset": 51}, {"referenceID": 1, "context": "At the end of the search process, the statistics of all trees are combined to yield the final result (Browne et al., 2012).", "startOffset": 101, "endOffset": 122}, {"referenceID": 1, "context": "However, there is contradictory evidence on the success of Ensemble UCT (Browne et al., 2012).", "startOffset": 72, "endOffset": 93}, {"referenceID": 5, "context": "However, Fern and Lewis are not able to reproduce this result in other domains (Fern and Lewis, 2011), finding situations where a plain UCT outperforms Ensemble UCT given the same total number of playouts.", "startOffset": 79, "endOffset": 101}, {"referenceID": 8, "context": "has argued that when the tree size is small, more exploitation should be chosen, and with larger tree sizes, high exploration is suitable (Kuipers et al., 2013).", "startOffset": 138, "endOffset": 160}, {"referenceID": 7, "context": "In many MCTS implementations the UCT algorithm is chosen as the selection criterion (Kocsis and Szepesv\u00e1ri, 2006).", "startOffset": 84, "endOffset": 113}, {"referenceID": 7, "context": "The UCT algorithm provides a solution for the problem of exploitation (look into promising areas) and exploration (look for promising areas) in the selection phase of the MCTS algorithm (Kocsis and Szepesv\u00e1ri, 2006).", "startOffset": 186, "endOffset": 215}, {"referenceID": 1, "context": "However, nowadays we have noted that UCT with root parallelism is not algorithmically equivalent to plain UCT, but is equivalent to Ensemble UCT (Browne et al., 2012).", "startOffset": 145, "endOffset": 166}, {"referenceID": 1, "context": "Ensemble UCT is given its place in the overview article by (Browne et al., 2012).", "startOffset": 59, "endOffset": 80}, {"referenceID": 0, "context": "Hex is a game with a board of hexagonal cells (Arneson et al., 2010).", "startOffset": 46, "endOffset": 68}, {"referenceID": 6, "context": "Using this data structure we have an efficient representation of the board position (Galil and Italiano, 1991).", "startOffset": 84, "endOffset": 110}, {"referenceID": 5, "context": "However, in other domains, Fern and Lewis do not find this result (Fern and Lewis, 2011).", "startOffset": 66, "endOffset": 88}, {"referenceID": 13, "context": "(Soejima et al., 2010) also analyzed the performance of root parallelism in detail.", "startOffset": 0, "endOffset": 22}, {"referenceID": 5, "context": "Fern and Lewis thoroughly investigated an Ensemble UCT approach in which multiple instances of UCT were run independently and their root statistics were combined to yield the final result (Fern and Lewis, 2011).", "startOffset": 188, "endOffset": 210}, {"referenceID": 6, "context": "The value of \u03b1(n) is less than 5 for all remotely practical values of n (Galil and Italiano, 1991).", "startOffset": 72, "endOffset": 98}, {"referenceID": 10, "context": "In order to make our experiments as realistic as possible, we use a custom developed game playing program for the game of Hex (Mirsoleimani et al., 2014; Mirsoleimani et al., 2015).", "startOffset": 126, "endOffset": 180}, {"referenceID": 9, "context": "In order to make our experiments as realistic as possible, we use a custom developed game playing program for the game of Hex (Mirsoleimani et al., 2014; Mirsoleimani et al., 2015).", "startOffset": 126, "endOffset": 180}, {"referenceID": 5, "context": "Previous studies on Ensemble UCT/root parallelism provided inconclusive evidence on the effectiveness of Ensemble UCT (Chaslot et al., 2008a; Fern and Lewis, 2011; Browne et al., 2012).", "startOffset": 118, "endOffset": 184}, {"referenceID": 1, "context": "Previous studies on Ensemble UCT/root parallelism provided inconclusive evidence on the effectiveness of Ensemble UCT (Chaslot et al., 2008a; Fern and Lewis, 2011; Browne et al., 2012).", "startOffset": 118, "endOffset": 184}, {"referenceID": 11, "context": ", (Romein, 2001).", "startOffset": 2, "endOffset": 16}], "year": 2015, "abstractText": "Recent results have shown that the MCTS algorithm (a new, adaptive, randomized optimization algorithm) is effective in a remarkably diverse set of applications in Artificial Intelligence, Operations Research, and High Energy Physics. MCTS can find good solutions without domain dependent heuristics, using the UCT formula to balance exploitation and exploration. It has been suggested that the optimum in the exploitationexploration balance differs for different search tree sizes: small search trees needs more exploitation; large search trees need more exploration. Small search trees occur in variations of MCTS, such as parallel and ensemble approaches. This paper investigates the possibility of improving the performance of Ensemble UCT by increasing the level of exploitation. As the search trees becomes smaller we achieve an improved performance. The results are important for improving the performance of large scale parallelism of MCTS.", "creator": "LaTeX with hyperref package"}}}