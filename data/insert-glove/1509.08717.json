{"id": "1509.08717", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Sep-2015", "title": "Towards Unveiling the Ontology Key Features Altering Reasoner Performances", "abstract": "9,310 Reasoning french-owned with ontologies is noemi one al-khawaja of the kalevi core http://www.motorola.com fields scavullo of golden-yellow research in Description Logics. gena A flextronics variety of gainer efficient bravissimo reasoner ascertains with cytopathology highly dematerialization optimized algorithms 392 have been overdubs developed to lavezzi allow amoraim inference tasks on shahnaz expressive policyholders ontology sompting languages gaspard such as non-coercive OWL (unspecific DL ). dixson However, reasoner trimalchio reported computing harvard-yale times berresford have badakhshi exceeded and sometimes rome-based fall zil behind the expected theoretical sallied values. vienneau From an empirical ricchiuti perspective, povl it melloy is ungual not yet well rhyan understood, which regius particular aspects ecuadorans in the ontology gholson are concoction reasoner performance degrading factors. In this 8,000-strong paper, we atilano conducted an arends investigation about birkeland state fusilier of art works that attempted to portray potential correlation between reasoner empirical behaviour sameera and particular reaction ontological l'osservatore features. 2,089 These qx4 works burgher were analysed and siripong then katzl broken down cosets into 1,453 categories. Further, lo-fi we onslaught proposed sbep a 1.4815 set of friedrich-wilhelm ontology mcateer features covering tropoja a broad herzeg-bosnia range butor of eliphas structural 73.07 and scislowska syntactic ontology characteristics. dibba We claim conza that wilderness these 194.1 features are shellfire good 69-58 indicators gopis of the ontology japanese-built hardness level netherlands against reasoning tasks.", "histories": [["v1", "Tue, 29 Sep 2015 12:31:03 GMT  (154kb)", "http://arxiv.org/abs/1509.08717v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.IR cs.LO", "authors": ["nourh\\`ene alaya", "sadok ben yahia", "myriam lamolle"], "accepted": false, "id": "1509.08717"}, "pdf": {"name": "1509.08717.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["n.alaya@iut.univ-paris8.fr,", "m.lamolle@iut.univ-paris8.fr,", "sadok.benyahia@fst.rnu.tn"], "sections": [{"heading": null, "text": "ar X\niv :1\n50 9.\n08 71\n7v 1\n[ cs\n.A I]\n2 9\nSe p\n20 15\nKeywords: Ontology, Reasoner, Description logic, Ontology Features"}, {"heading": "1 Introduction", "text": "Ontologies are used as conceptual models, for data integration, or to directly represent information in a variety of domain areas. Considered as the centerpiece of knowledge description in the semantic web, ontologies continue to gain in importance as well as in size and complexity. The proliferation of ontologies poses new compelling challenges for the semantic web applications. The high expressivity of the ontology languages, such as OWL and in particular OWL 2, increased the computational complexity of inference tasks. For instance, it has been shown that the complexity of the consistency checking of SROIQ ontologies, the description logic (DL) underlying OWL 2, is of worst-case 2NExpTime-complete [12]. Therefore, a considerable efforts has been devoted to make reasoning feasible in practice. A number of highly-optimized reasoners have been developed [8,23,25], that support reasoning about ontologies written in expressive description logics.\nHowever, empirical studies have revealed the unpredictable nature of reasoner\u2019s behaviours when dealing with individual ontologies. In several cases,\nthe theoretical worst case complexity does not necessarily unveil real-world performances. Reported computing times could exceed or eventually fall behind expected values [9]. In one hand, Mart\u0308\u0131n-Recuerda et al. [17] highlighted that reasoning in practice is far less complex then the established theoretical complexity. Interestingly enough, even with fairly expressive fragments of OWL 2, acceptable reasoning performances could be achieved. Yet, they admitted that it is still not well understood why reasoning is feasible in practice. On the other hand, Gonc\u0327alves et al. [10] outlined the performance variability phenomena with OWL ontologies. They reported three particular situations that a user could face when attempting to reason about an ontology: (i) For one test case ontology, switching the reasoner can degrade reasoning time from seconds to none termination; (ii) Ontologies with the same size and expressivity would spend wildly different ranges of computational time on the same reasoner; (iii) An insignificant change to an OWL ontology, would increase or probably decrease reasoning time on one reasoner.\nAs far as one of these situations happens, often no feedback is returned back to the user. Commonly, the latter one will keep shifting reasoners until finding the suitable one. Others would try to adjust their ontology hopping for an improvement, but running the risk of making the matters worse. Throughout, it seems that all of these attempts could be time and effort consuming and may not lead to significant answers. In fact, as previously highlighted in [27], the actual problem is that both ontology novice and expert users are lacking of theory and tool support helping analysing reasoner\u2019s behaviours against case study ontologies. Obviously, a better understanding of ontology complexity factors that may trigger difficulties to reasoners is of a compelling need. In addition, pointing out what makes reasoning hard in practice, can guide the modelling process of ontologies as to avoid the reasoning performance degrading factors. Moreover, existing ontologies may be revised towards efficient reasoning by detecting, and even repairing its critical components.\nIn this paper, we carried out an investigation about existing methods and tools that intended to identify potential correlation between reasoner empirical behaviour and particular ontological features. We tried to give users an overall view of the state of art in this field. The pioneering works were analysed and then brook down into categories. Our investigations have lead us to propose a set of ontology features covering a broad rang of structural and syntactic ontology characteristics. We claim that these features would be key indicators of the ontology hardness level against reasoning tasks.\nThe rest of the paper is organized as follows: Section 2 briefly describes basic terms such as ontology, description logic and reasoning. Section 3 scrutinizes the related work approaches. Section 4 details our proposed features.Our concluding remarks as well as a sketching of future works are given in Section 5."}, {"heading": "2 Background", "text": "The term expressivity could be confusing in the ontology field. In fact, it has different meaning depending on the context of its use [19]. For instance, expressivity in the field of ontology quality assessment is used to describe the ontology knowledge richness w.r.t. the domain under conceptualization. However, expressivity at the knowledge representation (KR) field is often used to characterize the KR language grammar, available for the ontology authoring. In this paper, we focus on the ontology expressivity at the KR language level as we are aiming at identified domain independent features, likely to outline the hardness of the ontology for the reasoning tasks.\nIn the remainder, we first recall the basics of OWL language and the Description Logics and then, we remind the main concepts of reasoning with ontologies."}, {"heading": "2.1 OWL Ontologies and Description Logics", "text": "In this paper, we focus on OWL ontologies. OWL is one of the most widely used ontology languages, it has excellent tool support in terms of editors and reasoners. The latest version of OWL is OWL 2, which became a W3C recommendation in October 2009 and is based on the highly expressive Description Logics SROIQ [12]. This logical gives statements made in OWL a precisely defined meaning and, for a given ontology, makes it possible to use automated reasoning to compute whether or not a statement follows from the ontology and various other reasoning tasks that we will explain latter in this section. In the remainder of this paper, by OWL we will mean OWL 2.\nGenerally speaking, Description Logics (DLs) are subsets of the first-order predication logic (FOL) [3]. A DL ontology O is composed of a set of asserted axioms, analogous to FOL formulae, describing relationships between terms in a domain of interest. These terms are basically concept, role, and individual names, organised respectively in three sets NC , NR, and NI . The union of these sets, that is, the set of all terms mentioned in O, is called the signature of O, and denoted O\u0303. In DL, an ontology is basically defined as a knowledge base K = \u3008T ,R,A\u3009; where T denotes TBox, which comprises terminological axioms describing concepts, R denotes RBox for axioms describing roles; and A stands for ABox, which is the assertional part of knowledge base describing individuals. Table 1 shows some types of OWL axioms belonging to different categories, where A and B can be named concepts (also called atomic concepts), C and D are complex concept descriptions [3], R and S are role names or descriptions and a, b and x are names for individuals. Complex concept descriptions are build based on concept and role constructors, as well as names from NC , NR or NI . If an individual name is used in a TBox axiom, then it\u2019s called a nominal. Different families of Description Logic provide different sets of constructors, besides axiom types. One of the simplest DLs is known as AL (Attributive Language). This DL supports concept conjunction (C \u2293D, owl:intersectionOf),\nuniversal quantification (\u2200R.C, owl:allValuesFrom), limited existential quantification (\u2203R.\u22a4, owl:someValuesFromwith a filler restricted to owl:Thing) and atomic negation (\u00acA, owl:complementOf).More expressive DLs can be obtained from AL by adding further constructors. Each constructor is given a specific letter which is used to derive a name for any particular DL. For example, adding full negation (\u00acC) to AL produces the DL ALC, which also contains concept disjunction (C \u2294D, owl:unionOf) and full existential quantification (\u2203R.C). However, extending the logic ALC with transitive roles becomes the logic S. Then, SH extends S with role hierarchies H (rdfs:subPropertyOf). Adding nominals O (owl:oneOf), inverse properties I (owl:inverseOf) and number restrictions N (owl:minCardinality, owl:maxCardinality or owl:exactCardinality) to SH produces SHOIN . The latter one is the DL that underpins OWL 1. OWL 2 extends the expressivity of OWL 1 with qualified cardinality Q to give SHOIQ, and reflexive (owl:ReflexiveProperty), irreflexive (owl:IrreflexiveProperty), complex chains (owl:propertyChainAxiom) and disjoint properties R to give SROIQ. Generally speaking, a concept in DL is referred to as a class in OWL. A role in DL is a property in OWL, which could be an Object Property (properties for which the value is an individual) or a Data Property (properties for which the value is a data literal). Axioms and individuals have the same meaning in DL and OWL. Owe to snugness connection between OWL and DLs, in this paper, we will make no distinction between ontologies (in OWL) and knowledge bases (in DL)1.\n1 In the remainer of this paper, by OWL we will mean OWL2."}, {"heading": "2.2 Reasoning", "text": "At the crossroads of the ontology and Description Logic (DL) respective communities, there is a suite of inference services held to be the key of most applications or knowledge engineering efforts [3]. These services are usually provided by automated decision systems. In DLs these systems, so-called reasoners, implement decision procedures (for instance, theTableau algorithm [4], Hyper-Tableau [18] and Consequence-Based [22]). They infer logical consequences from a set of explicitly asserted facts or axioms and typically provides automated support for reasoning tasks [3]. These tasks are namely: satisfiability, subsumption, classification, consistency and realisation. Among these tasks, classification is considered as the key reasoning task. It computes the full concept and role hierarchies. Explicit and implicit subsumption will be derived to help users navigating through the ontology towards mainly explanation and/or query answering respective tasks. Thus, it\u2019s supported by all modern DL reasoners and its duration is often used as a performance indicator to benchmark reasoning engines [1]. From an application point of view, an ontology should be classified regularly during its development and maintenance in order to detect undesired subsumptions as soon as possible. To make this feasible, in particular for large ontologies, classification has to be carried out as swiftly as possible. However, the increasing complexity of modern ontologies is an actual hamper towards reaching such a goal. Since OWL 2 is a highly expressive language, key reasoning tasks like consistency checking have an extremely high worst case complexity: 2NExpTime-Complete [12], i.e., intractable. However, this complexity could be tractable with less expressive fragments of OWL 2, mostly known as OWL profiles like OWL EL, OWL RL and OWL QL 2. Each profile limits the class, property and axiom constructors that OWL 2 admits, and consequently decreases the hardness level of the language. This restriction was decided in order to make it possible, and easy to implement efficient and scalable reasoners. However, the full power of the OWL 2 is still available under the OWL-DL profile. Reasoner designers are keeping optimizing their reasoning algorithms to overcome the complexity and the intractability of the latter profile."}, {"heading": "3 Related Works", "text": "In this section, we tried to draw out the landscape of the state of art works, which discussed the ontology complexity key features, likely to impact reasoner performances. These works were graded into three main categories considering their investigation scopes: first, works assessing the ontology quality which introduced to the community a huge amount of ontology metrics; then works evaluating reasoners quality in terms of computational time; and finally works attempting to correlate reasoner empirical behaviours to particular ontology features. Table 2 sum ups the main aspects of the aforementioned categories. In the following, we\n2 For further reading about OWL 2 profiles, the reader is kindly referred to http://www.w3.org/TR/owl2-profiles/.\ngive a more detailed review of works falling in these categories.\nOntology knowledge richness and conceptualization quality is widely assessed in the literature. Huge stream of ontology evaluation metrics was proposed for this purpose [19,24,15]. However, little attention was paid to investigate the effectiveness of these metrics to assess the hardness of ontologies against reasoning tasks [28]. In the other hand, reasoner benchmarks and competitions [1,9,5] are annually held to compare the latest innovations in the field of semantic reasoning. The performances of these engines against well selected ontologies are evaluated mainly considering the computational runtime. Roughly speaking, the reasoner performances depend on the success or the failure of optimizations tricks set up by reasoner designers to overcome particular known DL complexity sources. However, theses tricks would lead to enormous performance variability across the inputs which is still hardly predictable a priori. Yet, it is not well understood which particular aspect in the ontology is lowering the robustness of reasoners, besides the usual reported features mainly the ontology size and the expressivity. Recently, some tools, e.g. Tweezers [27] and Pellint [16], tried to give insights about reasoner performances bottlenecks w.r.t. the input ontology. To fulfil this task, software profiling techniques were deployed. The first tool reports par-\nticular performance statistics3 of the satisfiability task (SAT) processed by the reasoner Pellet [23]. In addition, authors of the tool have reported that some of this reasoner performance bottlenecks are caused by particular modelling patterns used in the input ontology. Similarly, Pellint examines the ontology to report and even to repair some ontology modelling pitfalls. These pattern like structures were suspected to brook down the Pellet \u2019s runtime. Despite, the worth of these proposals, it\u2019s hard to agree on their effectiveness, since they were proposed considering one particular reasoner. However, reasoning methodologies vary from one engine to another and there is no agreement that they share the same bottlenecks. More recently, Gonc\u0327alves et al. [10] suggested that there are ontologies which are performance homogeneous and performance heterogeneous ones. The heterogeneity is clause to particular entanglements between axioms in the ontology, causing the increase of the reasoning cost. Authors proposed a method to track these entanglements and extract their corresponding ontology modules. The latter ones were called ontology Hotspots. They also introduced a method to approximate reasoning with the Hotspots. However, their experiments have revelled that there is no precise co-relation between the reasoning time of a hotspot alone, and the reduction in reasoning time when such hotspot is removed. They affirmed that more investigations should be made about possible interactions between the hotspots and other ontology features. A further elaborated method to boost the reasoning using modularization techniques was introduced by Romero et al. [20]. The proposed reasonerMoRe uses the ontology expressivity as a partitioning criteria aiming at extracting a relatively \u201deasy-tohandle\u201d module and a hard one. Two reasoners are then coupled, each of which known for its appropriateness for the extracted modules.\nAnother steam of works, mainly described in [13,21,14], used supervised machine learning techniques aiming at predicting the computational time of a reasoner for a given ontology. Their predictive models take advantage from a large set of pre-computed ontological metrics. The rational behind this choice is to be able to automatically learn future reasoner\u2019s behaviours based on what was experienced in their previous executions. Kang et al. [13] were the first to apply machine learning techniques to predict the ontology classification computational time carried by a specific reasoner. 27 metrics were computed for each ontology. These metrics were previously proposed by a work stressing on ontology design complexity [28]. The labels to be predicted were time bins specified by the authors. They learned random forest-based models for 6 state of art reasoners and obtained high accuracy values. Moreover, they proposed an algorithm to compute the impact factors of ontology metrics according to their effectiveness in predicting classification performances for the different reasoners. Kang et al. have further improved their approach, in a more recent work [14]. They replaced time bins labels by concrete values of reasoner classification runtime\n3 These statistics are general ones like the runtime and the memory occupation and, more detailed ones focusing on the behavior of the reasoning algorithm like the size of completion graph and the number of steps to find a clash [3].\nand proposed additional metrics. They also demonstrated the strengths of their predictive models by applying them to the problem of identifying ontology performance Hotspots. On the other hand, Sazonau et al. [21] claimed that Kang\u2019s metrics based on graph translation of OWL ontologies are not effective. Thus, they proposed another set of metrics and used more machine learning techniques to reduce the dimensionality of the ontology feature vector in order to identify the key features, likely to correlate the most with the reasoning performances.\nClearly, machine learning methods proposed in the last steam of works are the closest to meet our needs. Indeed, the impact of particular ontology features on reasoner performances are automatically investigated using empirical knowledge about reasoners. These methods are generic enough, that they would be applied to any reasoner, with the only requirement to provide enough running results of this reasoner on diverse ontologies. Nevertheless, choosing good features is crucial to the construction of good predictive models. Unfortunately, our review of state of art confirmed that there is no known, automatic way of constructing good ontology feature sets. Instead, we believe that we must use distinct domain knowledge to identify properties of ontologies that appear likely to provide useful information. Afterwards, applying supervised machine learning techniques would be appropriate to examine the real impact of these features on reasoning performances and help selecting the most relevant ones."}, {"heading": "4 Ontology features altering the reasoner performances", "text": "A wealthy number of ontological features was introduced in literature, particularly to build learning models for reasoner computational time prediction. We reused some of them and defined new ones, that we thought could be relevant to evaluate the empirical hardness of reasoners. Mainly, we discarded those computed based on specific graph translation of the OWL ontology. In fact, Sazonau et al. [14] have previously argued that these kind of features are not reliable as there is no agreement of the way an ontology should be translated into a graph.\nWe split the ontology features into 4 categories: (i) size description; (ii) expressivity description; (iii) structural features; and (iv) syntactic features. Within these categories, features are intended to characterize specific aspect of the ontology design. The third and fourth category are further split into subcategories that provide a finer description of the ontology content. In overall, 112 ontology feature was characterized, which will be described in the next sections:"}, {"heading": "4.1 Ontology Size Description", "text": "To characterize the size of the ontology, we propose 6 features, explained in the following: Signature size features : we design 5 features to assess the amount of terms defined in an ontology. Given an ontology signature O\u0303 = \u3008NC , NR, NI\u3009, we\ncount the number of names nci, that uniquely identify classes in the ontology, nci \u2208 NC . We call this feature SC, the size of the ontology classes, where SC=|NC |. Analogously, we compute the number of user-defined object and data property names, respectively denoted by SOP and SDP, where |NR| = SOP + SDP , then the number of named individuals SI=|NI |. In addition, we record the number of data types4 defined in the ontology SDT. Axioms size features (OAS) : As commonly known, reasoners only deal with axioms belonging to the subsets TBox, RBox or ABox. Annotations are simply ignored when processing an ontology for a reasoning task. Therefore, we distinguished between two features, (SLA) which stands for the number of OWL axioms qualified as logical ones and (SA) which designs the total number of axioms in the ontology. Worth of mention, our proposed set of signature size features is a particular case of SOV, size of vocabulary, introduced by Zhang et al.[28]. While, the latter one opted for measuring to measure the complexity of an ontology by simply counting the total number of its named entities, we rather preferred to distinguish between these entities and compute separately each of them."}, {"heading": "4.2 Ontology Expressivity Description", "text": "In Section 2, we recalled basic elements of the OWL vocabulary, the DL families they belong to and then, we pointed out how the worst case complexity of reasoning tasks are closely depending on the expressive level of the ontology language. We retained two main features to identify the expressivity of the ontology language, namely: OWL profile name (OPR) : as above mentioned, there are four possible profiles DL, EL, QL and RL. We record the one the ontology language fits in. However, in some particular cases, the vocabulary and language constructs used in an ontology may violate rules of all the OWL profiles. In this case, the profile of the ontology is denoted by a virtual profile name, that we called PNAN. In contrast, we tag by PFULL the ontology that matches all the OWL profiles. DL family name (DFN) : it is a more strict denomination of the DL constructs group used in the ontology. For instance, an ontology could be AL or ALC or SHOIN , etc. Basically, each ontology has a unique DL family name."}, {"heading": "4.3 Ontology Structural Description", "text": "We paid a special attention to characterize the taxonomic structure of an ontology, i.e., its inheritance hierarchy. The latter sketches the tree like structure of subsumption relationships between names classes A \u2291 B or named properties R \u2291 S. We remind that a reasoner classification task infer implicit subsumption from the explicitly defined ones. So, the more the inheritance hierarchy is complex and over-sized, the more the reasoning computational time may be\n4 These are RDF literals or simple types defined in accordance with XML Schema datatypes.\nimportant. In this category, we gathered various features that have been defined in literature to describe concept hierarchies. These are, basically, metrics widely used by ontology quality evaluation community [7,24,15]. The following subcategories describe the essence of the retained features.\nClass and property hierarchical features We build both concept hierarchy denoted by Chierarchy and property hierarchy denoted by PHierarchy. Interestingly enough, only subsumption relations between named object properties specified by the axiom owl:subPropertyOf were considered for the HP construction. It means that property characteristics like inverse, transitivity, reflexivity and symmetry were ignored. Then for each hierarchy, we measured the following features: \u2013 C MD, P MD it is the maximal depth of class and property respective hierarchies. This feature was identified by LePendu et al. [15] as a possible reasoning complexity source. \u2013 C(P) MSB, C(P) ASB: the maximal and the average number of subclasses (resp. sub-properties) in a class (property) hierarchy. This feature was called by Tartir et al. as Inheritance Richness [24]. The authors claimed that higher values of this feature would indicate that the ontology is deep. However, lower value would lead to a shallow horizontal ontology having less detailed knowledge. \u2013 C(P) Tangledness, C(P) MTangledness: tangledness is owe to Gangemi et al. [7] and measures the number of classes in an ontology with multiple superclasses. We computed this feature for both class and property hierarchy and we also recorded the maximal number of named superclasses (C(P) MTangledness). Tangledness was also called tree impurity by Zhang et al. [28]. Then, Kang et al. [13] have highlighted, that this feature has a worth of cite impact factor on reasoner performances.\nCohesion features The literature provides a plethora of various metrics to design the Cohesion of the ontology, otherwise the degree of relatedness of its entities. We retained the ones introduced by Faezeh and Weichang [6]. \u2013 CCOH, PCOH: these are respectively class hierarchy cohesion and property hierarchy cohesion. They are based on the number of direct and indirect hierarchical links. We report the used formula to compute the class hierarchy cohesion:\nCCOH = 2\u00d7 (NdHC +NidHC)\nNC2 \u2212NC (1)\nwhere, NdHC is the number of direct hierarchical links between classes, NidHC is the indirect ones and NC is number of named classes in hierarchy. PCOH is computed in the same way where classes are replaced by properties. \u2013 OPCOH: it is the object property cohesion. This feature is computed using the number of classes which have been associated through the particular\nobject property (domain and range). Given an object property opi, the number of classes in its domain NdC(opi) and the number of classes in its range NrC(opi), i.e.,\nOPCOH = 2\u00d7\n\u2211NOProp i=1 NdC(opi)\u00d7NrC(opi)\nNOProp \u00d7 (NC2 \u2212NC) (2)\n\u2013 OCOH: the ontology cohesion is simply a weighted aggregation of the previously defined cohesion metrics, i.e, CCOH, PCOH and the OPCOH.\nSchema Richness features Finally, we enriched the ontology structural category by two additional features proposed in Tartir et al. [24]. These features are well known for ontology evaluation community as they are part of the OntoQA tool. \u2013 RRichness: Relationship richness reflects the diversity of relations in ontol-\nogy. Formally, it is the ratio of the number of relations between classes that are not hierarchical w.r.t. total number of different types of the ontology relationships. We slightly modified the formal expression of this metric in order to be able to compute it without any translation of ontology into a graph. \u2013 AttrRichness: The attribute richness is defined as the average number of attributes per class. To compute this feature, we considered data properties as class attributes. We discarded other metrics defined by Tartir et al., as they overlap with those that we have already suggested in other categories."}, {"heading": "4.4 Ontology Syntactic Features", "text": "Our main purpose when collecting features for this category, is to quantify some of the general theoretical knowledge about DL complexity sources that would degrade reasoner performances and eventually lead to unexpected reasoning results. To accomplish this purpose, we conducted an investigation about main reasoning algorithms [4,18]. Thus, we gathered relevant ontology features, that have inspired the implementation of well known reasoning optimization techniques [11,26]. Features of the current group are divided in 6 subcategories, covering different aspects of the ontology syntactic elements. This organization was inspired by the definition of feature levels provided by Kang et al. [13].\nFeatures of Axioms level Reasoner process differently each type of axiom with different computational cost [3]. In this category, we gathered features that attempt to characterize the different types of axioms as well as to assess their respective relevance in the ontology. \u2013 KB sub-parts features (KBF): in Section ??, we recalled that a knowledge\nbase (KB), which is in our case the ontology, has three main parts TBox, RBox and ABox, each of which has a specific set of axioms, otherwise each have a specific size. Given this description, we recorded the size ratio of these KB\nsubsets w.r.t. the ontology axiom size (OAS) and we denoted them RTBx, RRBx, RABx. \u2013 Axiom Types Frequencies (ATF): this is a set of 28 features, each of which corresponds to a particular OWL axiom type. In Section ??, we remind some of the axiom types described in the OWL official specification, like rdfs:subClassOf, rdfs:subPropertyOf, etc. By frequency we mean, the ratio between the number of occurrences of a given axiom type, and the ontology axioms size (OAS ). \u2013 Axiom Depth Feature: we compute the maximal parsing depth of axioms in the ontology AMP. It is a feature of common use, described by Sazonau et al [14]. An axiom depth is the number of this axiom levels of nested expressions. This feature attempts to capture the extend of structural complexity of an axiom in a given ontology. We added to this information, the average nesting depth AAP of all axioms, in order to give insight about how common is this type of complexity in the ontology.\nFeatures of Constructors level In Section 2, we remind that DLs can be classified in different classes of expressiveness, depending on the constructors they provide. This expressiveness has a general impact on the computational complexity of reasoning tasks performed on the ontology. In previous reasoner prediction works [13,14], authors simply counted axioms that involve potentially hard constructors. However, they missed that one constructor could be invokeds more than once in the same axiom. Moreover, we believe that the density of use of constructors, may be a valuable indicator of the ontology complexity. In order to characterize these informations, we propose three features that we describe in the following:\n\u2013 Class Constructors Frequencies (CCF): this is a set of 11 features, where each element is a specific constructor frequency in the ontology. Formally, given a class constructor cci belonging to the set of all OWL class constructors (cci \u2208 CC), CCR(cci) is defined as the ratio of the cci total occurrences in each TBox axiom (Atx \u2208 T ), divided by the sum of all constructors occurrences. The value of a CCR feature ranges within the unit interval [0, 1], i.e,\nCCR(cci) = \u2211|T | j=1 Count(cci, Atxj )\u2211|CC|\ni=1 \u2211|T | j=1 Count(cci, Atxj ) , cci \u2208 CC. (3)\n\u2013 Ontology Class Constructors Density (OCCD): we proposed another feature to compute the overall constructors \u201ddensity\u201d in the ontology. Formally, it computes the ratio of the total number of all constructors occurrences, divided by the maximal possible number of constructors in the ontology. The latter is defined as the multiplication result of the total number of TBox axioms |T |, by the maximal counted number of constructors in one TBox axiom.\nThe value of OCCD ranges within the unit interval [0, 1], i.e,\nOCCD =\n\u2211|T | i=1 \u2211|CC| j=1 Count(ccj , Atxi)\n|T | \u00d7max( \u2211|CC| j=1 Count(ccj , Atx), \u2200Atx \u2208 T ) . (4)\n\u2013 Constructors Coupling Patterns (CCP): we also defined a more sophisticated feature that examines particular combinations of constructors, that may increase the inference computational cost, whenever used in an axiom. The rational behind this proposition comes from lectures about the well known Tableau algorithm [4]. In fact, while checking a satisfiability of a concept by the latter algorithm, expansion rules are recursively applied in order to build a completion graph, called the model. Each class constructor has its own expansion rule. Applied in a specific order, the rules may lead to a sharp increase of the completion graph size, and hence the reasoning cost. We have specified three particular patterns, which describe fragments with \u201dcostly\u201d class constructors combinations. We detected the occurrences of each of these patterns by SPARQL 5 based queries, that we have written for this purpose. The CCP set of patterns are described in the following. For each pattern, we recorded its occurrences in the ontology. \u2022 IU (Intersection, union Pattern): an IU pattern is reported when a conjunction (owl:intersectionOf) of class expressions in an axiom is part of a disjunction (owl:unionOf) of class expressions in the same axiom, and vice versa. This pattern can be manifested by one of the following forms:\n\u2293 (. . . ,\u2294(C1, C2, . . .), . . .) (5)\n\u2294 (. . . ,\u2293(C1, C2, . . .), . . .) (6)\n\u2022 EUvI (Existential, universal having intersection Pattern): an EUI pattern occurrence is defined by a conjunction of class expressions, that concurrently contains an existential restriction and a universal restriction associated to the same role \u201dr\u201d. This pattern can be manifested by one of the following forms:\n\u2293 (. . . , \u2203r.C, \u2200r.D, . . .) (7)\nC1 \u2291 \u2203r.C and C1 \u2291 \u2200r.D (8)\n\u2022 CUvI (Cardinality, universal having intersection Pattern): The CUvI pattern is a particular case of the EUvI pattern, where existential restriction is replaced by a some restriction forms (\u2264 nr.C, \u2265 nr.C, = nr.C).\nFeatures of Class level Classes in the ontology could be named or specified via complex expressions. In this subcategory, we will highlight different methods to define classes and track their impact in the ontology TBox part.\n5 The specification of SPARQL query language is available at http://www.w3.org/TR/sparql11-query/\n\u2013 Class Definition Features (CDF): in [11], Horrocks established that restricting the Knowledge base (KB), K = \u3008T ,R,A\u3009 to unique and acyclic definition axioms, makes reasoning much easier, as the unfolding technique could be applied to all axioms. Concept definition axioms are primitive ones PCD of the form A \u2291 D, or non primitive ones NPCD of the form A \u2261 D , where A is an atomic concept name. However, real-world KBs commonly contain general definition axioms GCI. These axioms are of the form C \u2291 D or C \u2261 D , where both C and D are complex class descriptions. They are known to be costly to reason with, due to the high degree of non-determinism that they introduce. Thus, optimization techniques, mainly Absorption, is commonly used to reduce the number of GCI in the ontology by manipulating them to have the form of a primitive concept definition PCD. Absorption is widely implemented in DL reasoners, and designers are often looking to increase its optimization power. Motivated enough, we proposed to record the ratio of each of these kind of class definitions (PCD, NPCD, GCI) w.r.t. TBox size. \u2013 Cyclic Class Feature (CCyc): we computed cyclic class definitions in the ontology and retained their ratio w.r.t. total number of named classes, i.e, the SC feature. In DL, a cyclic definition axiom is the one that references the same (or equivalent) classes (or properties) on both sides of the subsumption relation (i.e \u2203P.C \u2291 C, or P \u25e6 P \u2291 P ). Such an axiom may be explicit of inferred by a reasoner. We only computed the explicit ones by implementing the method described by Baader et al. [2]. \u2013 Class Disjointness Feature (CDIJ): this feature stands for the ratio of named classes declared as disjointed w.r.t. the class size SC. Our motivation to compute this feature is based on stated observations by Wang et al. [27]. The latter has conducted empirical studies on reasoners using his profiling tool Tweezers. They highlighted that there is a crucial need to characterize the \u201dright amount\u201d of disjointness statements to be put in an ontology, as some of them can greatly reduce the computational time when inferring an ontology, but also too many statements would remarkably increase the runtime. The class disjointness is also examined by the Pellint tool [16], and reported as a bottleneck when the number of statements exceeds some predefined threshold. \u2013 Class Form Nominals (CNOM): this feature record the ratio of classes defined based on named nominals w.r.t. total number of named classes.\nFeatures of Properties level Interestingly enough, we will characterize special features of the ontology properties, in particular, the object property.\n\u2013 Object Property Characteristics Frequencies (OPCF): this is a set of 9 features in relation with particular object property characteristics. In OWL, the latter ones are defined using specific axioms that describe object properties transitivity, symmetry, reflexivity and etc. Horrocks and Tsarkov [11,26] have respectively emphasized on the hardness of managing particular object property description characteristics, since they impact the effectiveness of some\nreasoning optimization techniques 6. Hence, more sophisticated and probably costly reasoning procedures would be required to overcome these characteristics hardness level. We denoted the set of all object property characteristics as OPC and we defined OPCF as an object property characteristic frequency. To made clear, when specifying an object property as transitive, only one axiom is required (owl:TransitiveObjectProperty). However, this object property name could be repeatedly involved in many other TBox axioms and even more than once in one axiom. Consequently, reasoning techniques dealing with transitivity would be applied as far as this transitive object property is used. Formally, to compute OPCF of a given object property characteristic C\nop i \u2208 OPC, we start by collecting named object properties having C op i in common. We designed the latter set as S(Copi ) = {OPj , j \u2265 0}. Then, we sum up the occurrence value of each element in this collection and we denoted it OPCO(Copi ). Later, this value is divided by the sum of the total characteristic occurrences, hence we obtain an OPCF (Copi ) value ranging in [0, 1]. By computing this latter ratio, we would be able to flag out which of the object properties characteristic have the highest impact on the reasoning process.\nOPCO(COPi ) =\n|S(Cop i\n)|\u2211\nj=1\n|T |\u2211\nk=1\nCount(OPj , Atxk) (9)\nOPCF (COPi ) = OPCO(COPi )\u2211|OPC|\nj=1 OPCO(C OP j )\n(10)\n\u2013 Number Restriction Features (HVC, AVR): we studied the impact of using high values with object properties number restrictions. So, we retained for each cardinality type that is min, max and exact cardinality, its highest respective values. For instance, taking a restriction of the form \u2265 nR.C, we have recorded max(n) of all restrictions having the same form. Thus, we build the set of highest values of cardinalities, and we denoted it (HVC). In addition, we computed the average value of used numbers for cardinality restrictions, and we denoted it (AVC). Worth of cite, the Pellint tool [16] reports an ontology pitfall when cardinality values exceed some predefined threshold. However, it\u2019s not known how this threshold is fixed.\nIndividual level Features In this subcategory, we specify some of the interesting characteristics of named individuals that would be declared in the ontology. \u2013 Nominal Frequency Features (NomTB, TBNom): in the remainder Sec-\ntion 2, we mentioned that named individuals could be used in TBox axioms to define new classes. In this case, individuals are designed as nominals. However, this modeling method come at a price, since nominals require specific reasoning procedures that would lower the runtime of the reasoner [26]. To\n6 For example, Internalisation and Caching are less effective at the presence of inverse properties in the ontology\ncapture the impact of using nominals, we counted their occurrences in TBox axioms and retained its ratio (NomTB) w.r.t. the individuals size SI. In addition, we recorded TBNom, the ratio of axioms having nominals w.r.t. TBox size (STBx). \u2013 Individual Similarity Features (IDISJ, ISAM): it is simply the ratio of named individuals defined as disjoint ones IDISJ, as well as the ISAM ratio of individuals declared as equal ones (owl:sameAS)."}, {"heading": "5 Conclusion", "text": "In this report, we investigated key ontology features, likely to impact reasoner performances. First, we reviewed state of art works, which highlighted the variability of reasoner empirical performances. We outlined the previous efforts to correlate between particular ontology features and reasoner performances. Then, we introduced a large set of comprehensive features covering different aspects of the ontology structural and syntactic characteristics. These features were split up into 4 main categories, some of them are further brook down into subcategories, to capture more finer description of the ontology components. Throughout our study, we tried to quantify theoretical and empirical knowledge about the ontology complexity sources. We believe that we gathered concise and rich set of ontology features, likely to be good indicators of its hardness level against reasoning tasks. Our features could be used in any machine learning process. Thus for future works, we planed to conduct a supervised learning study based aiming to predict reasoner empirical behaviours based on our ontology features. We believe that this technique would help us unveil the key ontology features, with respect to the reasoning task. Gaining insights about which makes the ontologies hard to process, would help improving both their modelling, and revision process, throughout avoiding or repairing the hard features."}], "references": [{"title": "A survey on ontology reasoners and comparison", "author": ["S. Abburu"], "venue": "International Journal of Computer Applications 57(17), 33\u201339", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Unification in the description logic EL w.r.t. cycle-restricted TBoxes. Ltcs-report, Institute for Theoretical Computer", "author": ["F. Baader", "S. Borgwardt", "B. Morawska"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "The Description Logic Handbook: Theory, Implementation, and Applications", "author": ["F. Baader", "D. Calvanese", "D.L. McGuinness", "D. Nardi", "Patel-Schneider", "P.F. (eds."], "venue": "Cambridge University Press, USA", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2003}, {"title": "Tableau algorithms for description logics", "author": ["F. Baader", "U. Sattler"], "venue": "Proceedings of the International Conference on Automated Reasoning with Analytic Tableaux and Related Methods (TABLEAUX)", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2000}, {"title": "Summary ore 2014 competition", "author": ["S. Bail", "B. Glimm", "E. Jimnez-Ruiz", "N. Matentzoglu", "B. Parsia", "A. Steigmiller"], "venue": "the 3rd Int. Workshop on OWL Reasoner Evaluation (ORE 2014), Vienna, Austria", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2014}, {"title": "Canadian semantic web", "author": ["E. Faezeh", "D. Weichang"], "venue": "chap. A Modular Approach to Scalable Ontology Development, pp. 79\u2013103. Springer US", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2010}, {"title": "Modelling ontology evaluation and validation", "author": ["A. Gangemi", "C. Catenacci", "M. Ciaramita", "J. Lehmann"], "venue": "Proceedings of the 3rd European Semantic Web Conference", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2006}, {"title": "A novel approach to ontology classification", "author": ["B. Glimm", "I. Horrocks", "B. Motik", "R. Shearer", "G. Stoilos"], "venue": "Web Semant. 14, 84\u2013101", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2012}, {"title": "Owl reasoner evaluation (ore) workshop 2013 results: Short report", "author": ["R.S. Gon\u00e7alves", "S. Bail", "E. Jim\u00e9nez-Ruiz", "N. Matentzoglu", "B. Parsia", "B. Glimm", "Y. Kazakov"], "venue": "ORE. pp. 1\u201318", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "Performance heterogeneity and approximate reasoning in description logic ontologies", "author": ["R.S. Gon\u00e7alves", "B. Parsia", "U. Sattler"], "venue": "Proceedings of the 11th International Conference on The Semantic Web. pp. 82\u201398", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Implementation and optimisation techniques", "author": ["I. Horrocks"], "venue": "The Description Logic Handbook: Theory, Implementation, and Applications, chap. 9, pp. 306\u2013346. Cambridge University Press", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2003}, {"title": "The even more irresistible SROIQ", "author": ["I. Horrocks", "O. Kutz", "U. Sattler"], "venue": "Proceedings of the 23rd Benelux Conference on Artificial Intelligence. pp. 57\u201367", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2006}, {"title": "Predicting reasoning performance using ontology metrics", "author": ["Y.B. Kang", "Y.F. Li", "S. Krishnaswamy"], "venue": "Proceedings of the 11th International Conference on The Semantic Web. pp. 198\u2013214", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}, {"title": "How long will it take? accurate prediction of ontology reasoning performance", "author": ["Y.B. Kang", "Y.F. Li", "S. Krishnaswamy"], "venue": "Proceedings of Twenty-Eighth AAAI Conference on Artificial Intelligence. pp. 80\u201386", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2014}, {"title": "Optimize first, buy later: Analyzing metrics to ramp-up very large knowledge bases", "author": ["P. LePendu", "N. Noy", "C. Jonquet", "P. Alexander", "N. Shah", "M. Musen"], "venue": "Proceedings of The International Semantic Web Conference. pp. 486\u2013501. Springer", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "Pellint - a performance lint tool for pellet", "author": ["H. Lin", "E. Sirin"], "venue": "Proceedings of the OWL Experiences and Directions Workshop at ISWC\u201908. vol. 432. Germany", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2008}, {"title": "Towards understanding reasoning complexity in practice", "author": ["F. Martin-Recuerda", "D. Walther"], "venue": "Proceedings of Third International Conference of Knowledge Representation and Reasoning. UK", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2011}, {"title": "Hypertableau reasoning for description logics", "author": ["B. Motik", "R. Shearer", "I. Horrocks"], "venue": "Journal of Artificial Intelligence Research 36, 165\u2013228", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2009}, {"title": "Semantic web", "author": ["L. Obrst", "B. Ashpole", "W. Ceusters", "I. Mani", "B. Smith"], "venue": "chap. The evaluation of ontologies - Toward Improved Semantic Interoperability, pp. 139\u2013158. Springer US", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2007}, {"title": "More: Modular combination of owl reasoners for ontology classification", "author": ["A.A. Romero", "B.C. Grau", "I. Horrocks"], "venue": "Proceedings of the 11th International Conference on The Semantic Web", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}, {"title": "Predicting performance of owl reasoners: Locally or globally", "author": ["V. Sazonau", "U. Sattler", "G. Brown"], "venue": "Proceedings of the Fourteenth International Conference on Principles of Knowledge Representation and Reasoning", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2014}, {"title": "Consequence based reasoning beyond horn ontologies", "author": ["F. Simancik", "Y. Kazakov", "I. Horrocks"], "venue": "Proceedings of the 22nd International Joint Conference on Artificial Intelligence", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2011}, {"title": "Pellet: A practical owl-dl reasoner", "author": ["E. Sirin", "B. Parsia", "B.C. Grau", "A. Kalyanpur", "Y. Katz"], "venue": "Web Semant. 5, 51\u201353", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2007}, {"title": "OntoQA: Metric-based ontology quality analysis", "author": ["S. Tartir", "I.B. Arpinar", "M. Moore", "A.P. Sheth", "B. Aleman-Meza"], "venue": "Proceedings of IEEE Workshop on Knowledge Acquisition from Distributed, Autonomous, Semantically Heterogeneous Data and Knowledge Sources", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2005}, {"title": "Fact++ description logic reasoner: System description", "author": ["D. Tsarkov", "I. Horrocks"], "venue": "Proceedings of the Third International Joint Conference on Automated Reasoning. pp. 292\u2013297", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2006}, {"title": "Optimizing terminological reasoning for expressive description logics", "author": ["D. Tsarkov", "I. Horrocks", "P.F. Patel-Schneider"], "venue": "J. of Automated Reasoning 39(3), 277\u2013316", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2007}, {"title": "Ontology performance profiling and model examination: First steps", "author": ["T.D. Wang", "B. Parsia"], "venue": "Proceedings of The 6th International Semantic Web Conference, 2nd Asian Semantic Web Conference, ISWC + ASWC. pp. 595\u2013608. Korea", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2007}, {"title": "Measuring design complexity of semantic web ontologies", "author": ["H. Zhang", "Y.F. Li", "H.B.K. Tan"], "venue": "J. Syst. Softw. 83(5), 803\u2013814", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 11, "context": "For instance, it has been shown that the complexity of the consistency checking of SROIQ ontologies, the description logic (DL) underlying OWL 2, is of worst-case 2NExpTime-complete [12].", "startOffset": 182, "endOffset": 186}, {"referenceID": 7, "context": "A number of highly-optimized reasoners have been developed [8,23,25], that support reasoning about ontologies written in expressive description logics.", "startOffset": 59, "endOffset": 68}, {"referenceID": 22, "context": "A number of highly-optimized reasoners have been developed [8,23,25], that support reasoning about ontologies written in expressive description logics.", "startOffset": 59, "endOffset": 68}, {"referenceID": 24, "context": "A number of highly-optimized reasoners have been developed [8,23,25], that support reasoning about ontologies written in expressive description logics.", "startOffset": 59, "endOffset": 68}, {"referenceID": 8, "context": "Reported computing times could exceed or eventually fall behind expected values [9].", "startOffset": 80, "endOffset": 83}, {"referenceID": 16, "context": "[17] highlighted that reasoning in practice is far less complex then the established theoretical complexity.", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "[10] outlined the performance variability phenomena with OWL ontologies.", "startOffset": 0, "endOffset": 4}, {"referenceID": 26, "context": "In fact, as previously highlighted in [27], the actual problem is that both ontology novice and expert users are lacking of theory and tool support helping analysing reasoner\u2019s behaviours against case study ontologies.", "startOffset": 38, "endOffset": 42}, {"referenceID": 18, "context": "In fact, it has different meaning depending on the context of its use [19].", "startOffset": 70, "endOffset": 74}, {"referenceID": 11, "context": "The latest version of OWL is OWL 2, which became a W3C recommendation in October 2009 and is based on the highly expressive Description Logics SROIQ [12].", "startOffset": 149, "endOffset": 153}, {"referenceID": 2, "context": "Generally speaking, Description Logics (DLs) are subsets of the first-order predication logic (FOL) [3].", "startOffset": 100, "endOffset": 103}, {"referenceID": 2, "context": "Table 1 shows some types of OWL axioms belonging to different categories, where A and B can be named concepts (also called atomic concepts), C and D are complex concept descriptions [3], R and S are role names or descriptions and a, b and x are names for individuals.", "startOffset": 182, "endOffset": 185}, {"referenceID": 2, "context": "At the crossroads of the ontology and Description Logic (DL) respective communities, there is a suite of inference services held to be the key of most applications or knowledge engineering efforts [3].", "startOffset": 197, "endOffset": 200}, {"referenceID": 3, "context": "In DLs these systems, so-called reasoners, implement decision procedures (for instance, theTableau algorithm [4], Hyper-Tableau [18] and Consequence-Based [22]).", "startOffset": 109, "endOffset": 112}, {"referenceID": 17, "context": "In DLs these systems, so-called reasoners, implement decision procedures (for instance, theTableau algorithm [4], Hyper-Tableau [18] and Consequence-Based [22]).", "startOffset": 128, "endOffset": 132}, {"referenceID": 21, "context": "In DLs these systems, so-called reasoners, implement decision procedures (for instance, theTableau algorithm [4], Hyper-Tableau [18] and Consequence-Based [22]).", "startOffset": 155, "endOffset": 159}, {"referenceID": 2, "context": "They infer logical consequences from a set of explicitly asserted facts or axioms and typically provides automated support for reasoning tasks [3].", "startOffset": 143, "endOffset": 146}, {"referenceID": 0, "context": "Thus, it\u2019s supported by all modern DL reasoners and its duration is often used as a performance indicator to benchmark reasoning engines [1].", "startOffset": 137, "endOffset": 140}, {"referenceID": 11, "context": "Since OWL 2 is a highly expressive language, key reasoning tasks like consistency checking have an extremely high worst case complexity: 2NExpTime-Complete [12], i.", "startOffset": 156, "endOffset": 160}, {"referenceID": 14, "context": "Ontology Quality evaluation [15,19,24,28] Graph / OWL / RDF Structural, Syntactic, Semantic, etc", "startOffset": 28, "endOffset": 41}, {"referenceID": 18, "context": "Ontology Quality evaluation [15,19,24,28] Graph / OWL / RDF Structural, Syntactic, Semantic, etc", "startOffset": 28, "endOffset": 41}, {"referenceID": 23, "context": "Ontology Quality evaluation [15,19,24,28] Graph / OWL / RDF Structural, Syntactic, Semantic, etc", "startOffset": 28, "endOffset": 41}, {"referenceID": 27, "context": "Ontology Quality evaluation [15,19,24,28] Graph / OWL / RDF Structural, Syntactic, Semantic, etc", "startOffset": 28, "endOffset": 41}, {"referenceID": 0, "context": "Reasoner Performance evaluation [1,9,5] KB Size + Expressivity", "startOffset": 32, "endOffset": 39}, {"referenceID": 8, "context": "Reasoner Performance evaluation [1,9,5] KB Size + Expressivity", "startOffset": 32, "endOffset": 39}, {"referenceID": 4, "context": "Reasoner Performance evaluation [1,9,5] KB Size + Expressivity", "startOffset": 32, "endOffset": 39}, {"referenceID": 26, "context": "Ontology Tweezers [27] OWL Patterns Reasoners Profiling Pellint [16] OWL Patterns", "startOffset": 18, "endOffset": 22}, {"referenceID": 15, "context": "Ontology Tweezers [27] OWL Patterns Reasoners Profiling Pellint [16] OWL Patterns", "startOffset": 64, "endOffset": 68}, {"referenceID": 9, "context": "[10] KB SAT runtime", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20] KB Expressivity", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[13] Graph 27 features filtered via feature selection algorithms", "startOffset": 0, "endOffset": 4}, {"referenceID": 20, "context": "[21] OWL 57 features filtered with PCA technique Features Prediction Kang et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[14] Graph +", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "Huge stream of ontology evaluation metrics was proposed for this purpose [19,24,15].", "startOffset": 73, "endOffset": 83}, {"referenceID": 23, "context": "Huge stream of ontology evaluation metrics was proposed for this purpose [19,24,15].", "startOffset": 73, "endOffset": 83}, {"referenceID": 14, "context": "Huge stream of ontology evaluation metrics was proposed for this purpose [19,24,15].", "startOffset": 73, "endOffset": 83}, {"referenceID": 27, "context": "However, little attention was paid to investigate the effectiveness of these metrics to assess the hardness of ontologies against reasoning tasks [28].", "startOffset": 146, "endOffset": 150}, {"referenceID": 0, "context": "In the other hand, reasoner benchmarks and competitions [1,9,5] are annually held to compare the latest innovations in the field of semantic reasoning.", "startOffset": 56, "endOffset": 63}, {"referenceID": 8, "context": "In the other hand, reasoner benchmarks and competitions [1,9,5] are annually held to compare the latest innovations in the field of semantic reasoning.", "startOffset": 56, "endOffset": 63}, {"referenceID": 4, "context": "In the other hand, reasoner benchmarks and competitions [1,9,5] are annually held to compare the latest innovations in the field of semantic reasoning.", "startOffset": 56, "endOffset": 63}, {"referenceID": 26, "context": "Tweezers [27] and Pellint [16], tried to give insights about reasoner performances bottlenecks w.", "startOffset": 9, "endOffset": 13}, {"referenceID": 15, "context": "Tweezers [27] and Pellint [16], tried to give insights about reasoner performances bottlenecks w.", "startOffset": 26, "endOffset": 30}, {"referenceID": 22, "context": "ticular performance statistics of the satisfiability task (SAT) processed by the reasoner Pellet [23].", "startOffset": 97, "endOffset": 101}, {"referenceID": 9, "context": "[10] suggested that there are ontologies which are performance homogeneous and performance heterogeneous ones.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20].", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "Another steam of works, mainly described in [13,21,14], used supervised machine learning techniques aiming at predicting the computational time of a reasoner for a given ontology.", "startOffset": 44, "endOffset": 54}, {"referenceID": 20, "context": "Another steam of works, mainly described in [13,21,14], used supervised machine learning techniques aiming at predicting the computational time of a reasoner for a given ontology.", "startOffset": 44, "endOffset": 54}, {"referenceID": 13, "context": "Another steam of works, mainly described in [13,21,14], used supervised machine learning techniques aiming at predicting the computational time of a reasoner for a given ontology.", "startOffset": 44, "endOffset": 54}, {"referenceID": 12, "context": "[13] were the first to apply machine learning techniques to predict the ontology classification computational time carried by a specific reasoner.", "startOffset": 0, "endOffset": 4}, {"referenceID": 27, "context": "These metrics were previously proposed by a work stressing on ontology design complexity [28].", "startOffset": 89, "endOffset": 93}, {"referenceID": 13, "context": "have further improved their approach, in a more recent work [14].", "startOffset": 60, "endOffset": 64}, {"referenceID": 2, "context": "of completion graph and the number of steps to find a clash [3].", "startOffset": 60, "endOffset": 63}, {"referenceID": 20, "context": "[21] claimed that Kang\u2019s metrics based on graph translation of OWL ontologies are not effective.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[14] have previously argued that these kind of features are not reliable as there is no agreement of the way an ontology should be translated into a graph.", "startOffset": 0, "endOffset": 4}, {"referenceID": 27, "context": "[28].", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": "These are, basically, metrics widely used by ontology quality evaluation community [7,24,15].", "startOffset": 83, "endOffset": 92}, {"referenceID": 23, "context": "These are, basically, metrics widely used by ontology quality evaluation community [7,24,15].", "startOffset": 83, "endOffset": 92}, {"referenceID": 14, "context": "These are, basically, metrics widely used by ontology quality evaluation community [7,24,15].", "startOffset": 83, "endOffset": 92}, {"referenceID": 14, "context": "[15] as a possible reasoning complexity source.", "startOffset": 0, "endOffset": 4}, {"referenceID": 23, "context": "as Inheritance Richness [24].", "startOffset": 24, "endOffset": 28}, {"referenceID": 6, "context": "[7] and measures the number of classes in an ontology with multiple superclasses.", "startOffset": 0, "endOffset": 3}, {"referenceID": 27, "context": "[28].", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[13] have highlighted, that this feature has a worth of cite impact factor on reasoner performances.", "startOffset": 0, "endOffset": 4}, {"referenceID": 5, "context": "We retained the ones introduced by Faezeh and Weichang [6].", "startOffset": 55, "endOffset": 58}, {"referenceID": 23, "context": "[24].", "startOffset": 0, "endOffset": 4}, {"referenceID": 3, "context": "To accomplish this purpose, we conducted an investigation about main reasoning algorithms [4,18].", "startOffset": 90, "endOffset": 96}, {"referenceID": 17, "context": "To accomplish this purpose, we conducted an investigation about main reasoning algorithms [4,18].", "startOffset": 90, "endOffset": 96}, {"referenceID": 10, "context": "Thus, we gathered relevant ontology features, that have inspired the implementation of well known reasoning optimization techniques [11,26].", "startOffset": 132, "endOffset": 139}, {"referenceID": 25, "context": "Thus, we gathered relevant ontology features, that have inspired the implementation of well known reasoning optimization techniques [11,26].", "startOffset": 132, "endOffset": 139}, {"referenceID": 12, "context": "[13].", "startOffset": 0, "endOffset": 4}, {"referenceID": 2, "context": "Features of Axioms level Reasoner process differently each type of axiom with different computational cost [3].", "startOffset": 107, "endOffset": 110}, {"referenceID": 13, "context": "It is a feature of common use, described by Sazonau et al [14].", "startOffset": 58, "endOffset": 62}, {"referenceID": 12, "context": "In previous reasoner prediction works [13,14], authors simply counted axioms that involve potentially hard constructors.", "startOffset": 38, "endOffset": 45}, {"referenceID": 13, "context": "In previous reasoner prediction works [13,14], authors simply counted axioms that involve potentially hard constructors.", "startOffset": 38, "endOffset": 45}, {"referenceID": 0, "context": "The value of a CCR feature ranges within the unit interval [0, 1], i.", "startOffset": 59, "endOffset": 65}, {"referenceID": 0, "context": "The value of OCCD ranges within the unit interval [0, 1], i.", "startOffset": 50, "endOffset": 56}, {"referenceID": 3, "context": "The rational behind this proposition comes from lectures about the well known Tableau algorithm [4].", "startOffset": 96, "endOffset": 99}, {"referenceID": 10, "context": "\u2013 Class Definition Features (CDF): in [11], Horrocks established that restricting the Knowledge base (KB), K = \u3008T ,R,A\u3009 to unique and acyclic definition axioms, makes reasoning much easier, as the unfolding technique could be applied to all axioms.", "startOffset": 38, "endOffset": 42}, {"referenceID": 1, "context": "[2].", "startOffset": 0, "endOffset": 3}, {"referenceID": 26, "context": "[27].", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "The class disjointness is also examined by the Pellint tool [16], and reported as a bottleneck when the number of statements exceeds some predefined threshold.", "startOffset": 60, "endOffset": 64}, {"referenceID": 10, "context": "Horrocks and Tsarkov [11,26] have respectively emphasized on the hardness of managing particular object property description characteristics, since they impact the effectiveness of some", "startOffset": 21, "endOffset": 28}, {"referenceID": 25, "context": "Horrocks and Tsarkov [11,26] have respectively emphasized on the hardness of managing particular object property description characteristics, since they impact the effectiveness of some", "startOffset": 21, "endOffset": 28}, {"referenceID": 0, "context": "Later, this value is divided by the sum of the total characteristic occurrences, hence we obtain an OPCF (C i ) value ranging in [0, 1].", "startOffset": 129, "endOffset": 135}, {"referenceID": 15, "context": "Worth of cite, the Pellint tool [16] reports an ontology pitfall when cardinality values exceed some predefined threshold.", "startOffset": 32, "endOffset": 36}, {"referenceID": 25, "context": "However, this modeling method come at a price, since nominals require specific reasoning procedures that would lower the runtime of the reasoner [26].", "startOffset": 145, "endOffset": 149}], "year": 2015, "abstractText": "Reasoning with ontologies is one of the core fields of research in Description Logics. A variety of efficient reasoner with highly optimized algorithms have been developed to allow inference tasks on expressive ontology languages such as OWL(DL). However, reasoner reported computing times have exceeded and sometimes fall behind the expected theoretical values. From an empirical perspective, it is not yet well understood, which particular aspects in the ontology are reasoner performance degrading factors. In this paper, we conducted an investigation about state of art works that attempted to portray potential correlation between reasoner empirical behaviour and particular ontological features. These works were analysed and then broken down into categories. Further, we proposed a set of ontology features covering a broad range of structural and syntactic ontology characteristics. We claim that these features are good indicators of the ontology hardness level against reasoning tasks.", "creator": "LaTeX with hyperref package"}}}