{"id": "1511.05176", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Nov-2015", "title": "MuProp: Unbiased Backpropagation for Stochastic Neural Networks", "abstract": "mishel Deep neural keates networks avista are .80 powerful beckford parametric models xenotransplants that motorcars can fudong be rougemont trained efficiently v-3 using dialing the backpropagation vinyard algorithm. notes Stochastic rosengarten neural networks ambassadress combine the tik power 1,496 of single-sided large parametric 23.50 functions avalanche-journal with mansaray that of graphical models, basava which jugos makes it possible motech to learn airlangga very complex distributions. hencorp However, as rh backpropagation is zags not mercosul directly applicable se7en to ysbyty stochastic assiduous networks that include discrete sampling operations within their tricked computational hartamas graph, rozell training such distrusting networks remains difficult. We enantioselective present eystein MuProp, student-edited an 25.19 unbiased gradient wisk estimator beguiristain for all-ages stochastic networks, heavylift designed pimelea to chowed make this task 11.88 easier. MuProp improves on deber the likelihood - ratio estimator l\u00f3pez by 75-kilogram reducing its gagnon variance using hudsonville a archnemesis control variate based nauplia on the first - order Taylor akayev expansion zubeidi of a mean - hktdc field network. Crucially, unlike ariz prior extra-parochial attempts reiver at 32.02 using backpropagation osis for murungi training leaupepe stochastic networks, the roekke resulting dds estimator revaluation is 21:40 unbiased and 22-11 well behaved. Our mehmood experiments on maryhill structured agness output prediction and manari discrete latent variable 44.46 modeling blackbook demonstrate coleophoridae that MuProp welded yields consistently good kooiman performance reprimands across roeder a range lenis of kotcheff difficult arons tasks.", "histories": [["v1", "Mon, 16 Nov 2015 21:08:25 GMT  (2097kb,D)", "https://arxiv.org/abs/1511.05176v1", null], ["v2", "Thu, 7 Jan 2016 21:44:35 GMT  (2206kb,D)", "http://arxiv.org/abs/1511.05176v2", null], ["v3", "Thu, 25 Feb 2016 20:36:21 GMT  (2206kb,D)", "http://arxiv.org/abs/1511.05176v3", "Published as a conference paper at ICLR 2016"]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["shixiang gu", "sergey levine", "ilya sutskever", "riy mnih"], "accepted": true, "id": "1511.05176"}, "pdf": {"name": "1511.05176.pdf", "metadata": {"source": "CRF", "title": "MUPROP: UNBIASED BACKPROPAGATION FOR STOCHASTIC NEURAL NETWORKS", "authors": ["Shixiang Gu", "Sergey Levine", "Ilya Sutskever", "Andriy Mnih"], "emails": ["shanegu@google.com", "slevine@google.com", "ilyasu@google.com", "amnih@google.com"], "sections": [{"heading": "1 INTRODUCTION", "text": "Deep neural networks (Krizhevsky et al., 2012; Hinton et al., 2012; Sutskever et al., 2014) are responsible for numerous state-of-the-art results in a variety of domains, including computer vision, speech recognition, and natural language processing. The cornerstone of their success has been the simple and scalable backpropagation algorithm (Rumelhart et al., 1986). Backpropagation provides an efficient way of computing the derivatives of the error with respect to the model parameters. The key to the applicability of backpropagation is to utilize deterministic, differentiable activation functions, such as sigmoidal and softmax units, to make the model differentiable. However, in certain real-world scenarios, it is more suitable to learn a model that can carry out a sequence of stochastic operations internally, in order to represent a complex stochastic process. Such stochastic networks are studied in policy gradient reinforcement learning methods (Williams, 1992; Weaver & Tao, 2001; Peters & Schaal, 2006), probabilistic latent variable models for structured prediction, unsupervised learning of generative models (Tang & Salakhutdinov, 2013; Kingma & Welling, 2014), and most recently, attention and memory networks (Mnih et al., 2014; Zaremba & Sutskever, 2015).\nThe versatility of stochastic neural networks motivates research into more effective algorithms for training them. Models with continuous latent variables and simple approximate posteriors can already be trained efficiently using the variational lower bound along with the reparameterization trick, which makes it possible to train both the model and the inference network using backpropagation (Kingma & Welling, 2014; Rezende et al., 2014). Training models with discrete latent variable distributions, such as Bernoulli or multinomial, is considerably more difficult. Unbiased estimators based on the likelihood-ratio method tend to be significantly less effective than biased estimators, such as the straight-through method (Bengio et al., 2013; Raiko et al., 2015) and the estimator proposed by Gregor et al. (2014). We hypothesize that this is due to the fact that, unlike the biased estimators, the unbiased ones do not take advantage of the gradient information provided by the backpropagation algorithm. However, the biased estimators are heuristic and not well understood, which means that it is difficult to enumerate the situations in which these estimators will work well.\nar X\niv :1\n51 1.\n05 17\n6v 3\n[ cs\n.L G\n] 2\n5 Fe\nb 20\nWe posit that an effective method for training stochastic neural networks should take advantage of the highly efficient backpropagation algorithm, while still providing the convergence guarantees of an unbiased estimator.\nTo that end, we derive MuProp, an unbiased gradient estimator for deep stochastic neural networks that is based on backpropagation. To the best of our knowledge, it is the first unbiased estimator that can handle both continuous and discrete stochastic variables while taking advantage of analytic gradient information. MuProp\u2019s simple and general formulation allows a straightforward derivation of unbiased gradient estimators for arbitrary stochastic computational graphs \u2013 directed acyclic graph (DAG) with a mix of stochastic and deterministic computational nodes (see, e.g., Schulman et al. (2015)). While the algorithm is applicable to both continuous and discrete distributions, we used only discrete models in our experiments, since the reparameterization trick (Kingma & Welling, 2014) already provides an effective method for handling continuous variables. We present experimental results for training neural networks with discrete Bernoulli and multinomial variables for both supervised and unsupervised learning tasks. With these models, which are notoriously difficult to train, biased methods often significantly outperform the unbiased ones (Dayan et al., 1995; Gregor et al., 2014; Raiko et al., 2015), except in certain cases (Mnih & Gregor, 2014). Our results indicate that MuProp\u2019s performance is more consistent and often superior to that of the competing estimators. It is the first time that a well-grounded, unbiased estimator consistently performs as well or better than the biased gradient estimators across a range of difficult tasks."}, {"heading": "2 RELATED WORK", "text": "Probabilistic latent variable models described by neural networks date back to pioneering early work on sigmoidal belief networks and Helmholtz machines (Neal, 1992; Dayan et al., 1995). However, their adoption has been hindered by the lack of training methods that are both efficient and theoretically sound. Algorithms based on Markov chain Monte Carlo (Neal, 1992) and mean-field inference (Saul et al., 1996) are theoretically well-grounded, but do not scale well to large models. The wakesleep algorithm (Hinton et al., 1995) scales to large models, but does not optimize a well definedobjective function, and therefore does not provide convergence guarantees. Recently, several new scalable methods have been proposed for training such models. A number of these algorithms use likelihood ratio estimators with variance reduction techniques (Ranganath et al., 2014; Mnih & Gregor, 2014; Gregor et al., 2014), inspired by methods from reinforcement learning (Williams, 1992; Weaver & Tao, 2001; Peters & Schaal, 2006). Another group of algorithms specifically addresses structured predictions tasks involving binary latent variables. Instead of performing inference using an inference network, these algorithms either use importance sampling to reweight samples from the prior (Tang & Salakhutdinov, 2013; Raiko et al., 2015), or rely on heuristics for approximate backpropagation through the stochastic units (Bengio et al., 2013; Raiko et al., 2015; Gregor et al., 2014)."}, {"heading": "2.1 LIKELIHOOD-RATIO GRADIENT ESTIMATION", "text": "Consider a simple stochastic system with discrete random variable x whose probability is given by p\u03b8(x), and a loss function f(x). This formulation subsumes the training objectives of popular generative models such as sigmoid belief networks, with or without inference networks. The objective of training is to minimize the expected cost L(\u03b8) = Ep\u03b8(x)[f(x)]. The gradient g = \u2202L/\u2202\u03b8 is usually intractable to compute exactly, and must therefore be estimated using an estimator g\u0302(x), i.e. g \u2248 \u2211m i=1 g\u0302(xi)/m, where xi \u223c p\u03b8(x) and m is the number of Monte Carlo samples.\nThe likelihood-ratio (LR) estimator, of which the popular REINFORCE algorithm is a special case (Williams, 1992; Peters & Schaal, 2006), provides a convenient method for estimating this gradient, and serves as the basis for all of the unbiased estimators discussed in this paper, including MuProp. The LR method only requires that p\u03b8(x) is differentiable with respect to \u03b8:\ng(LR) = \u2207\u03b8Ep\u03b8(x)[f(x)] = \u2211 x \u2207\u03b8p\u03b8(x)f(x)\n= \u2211 x p\u03b8(x)\u2207\u03b8 log p\u03b8(x) \u00b7 f(x) = Ep\u03b8(x)[\u2207\u03b8 log p\u03b8 \u00b7 f(x)]\ng\u0302(LR) = \u2207\u03b8 log p\u03b8(x) \u00b7 f(x) where x \u223c p\u03b8\n(1)\nIn its basic form, this estimator is unbiased, but tends to have high variance, and variance reduction techniques are typically required to make it practical (Williams, 1992; Peters & Schaal, 2006). A major deficiency of the LR estimator is that it fails to utilize information about the derivative of the cost function, unlike the most successful biased estimators. We will show that MuProp, which combines the derivative information with the LR estimator, can outperform these biased estimators, as well as the standard LR method."}, {"heading": "2.2 VARIANCE REDUCTION WITH THE LIKELIHOOD-RATIO ESTIMATOR", "text": "High variance of LR estimators can make convergence very slow or impossible. This is further exacerbated by the fact that LR estimators for minibatch training of neural networks typically use m = 1, in order to maximize the variety of examples seen by the network (Kingma & Welling, 2014; Gregor et al., 2014; Rezende et al., 2014; Mnih & Gregor, 2014). The simplest way to reduce variance is to increase m, but this is computationally expensive. Efficient and effective variance reduction techniques are therefore crucial for the LR estimator to be practical.\nThe derivation of MuProp in Section 3 uses a variance reduction technique known as control variates (Paisley et al., 2012). The main idea is to subtract an analytically tractable term from the LR estimate in order to reduce the variance of the Monte Carlo estimate, and then add back the analytical expectation of this term to recover an unbiased estimator:\nEp\u03b8(x)[\u2207\u03b8 log p\u03b8(x) \u00b7 f(x)] = Ep\u03b8(x)[\u2207\u03b8 log p\u03b8(x) \u00b7 (f(x)\u2212 b\u2212 h(x))] + \u00b5 (2)\nIn this example, b+ h(x) is a control variate, which is also known as a sample-dependent baseline. The expectation of the baseline needs to be added to the expression to make the resulting estimator unbiased. If the baseline is constant (i.e. h(x) = 0), its contribution to the gradient estimate is always zero in expectation, since \u2211 x p\u03b8(x)\u2207\u03b8 log p\u03b8(x) = \u2211 x\u2207\u03b8p\u03b8(x) = \u2207\u03b8 \u2211 x p\u03b8(x) = \u2207\u03b81 = 0. Otherwise, we must compute the expectation of the baseline (b + h(x))\u2207 log p\u03b8(x) analytically, as \u00b5 = Ep\u03b8(x)[\u2207\u03b8 log p\u03b8(x) \u00b7 h(x)]. In our experiments, we utilize three types of variance reduction techniques for the estimators that include the same term as Eq. 2. While these techniques, proposed in a similar context in (Mnih & Gregor, 2014), do not result in the optimal variance reduction, they work well enough to make LR estimators useful in practice.1 For the precise details of these variance reduction techniques, please refer to Mnih & Gregor (2014). For reference, the techniques are:\n\u2022 Centering the learning signal (C), which involves subtracting from the learning signal its moving average (corresponding to b in Eq. 2).\n\u2022 Input-dependent baseline (IDB), which allows baseline b to depend on the input or the sample from the previous layer (x0). This baseline is a neural network parameterized by \u03c8, and is trained jointly with the model to minimize the expected square of the centered learning signal Ep\u03b8(x|x0)[(l(x)\u2212 b\u2212B\u03c8(x0))2].\n\u2022 Variance normalization (VN), which keeps track of the moving average of the signal variance v, and divides the learning signal by max(1, \u221a v). Unlike the other two techniques,\nthis does not correspond to a baseline, and is a type of adaptive gradient."}, {"heading": "3 MUPROP", "text": "The MuProp estimator has two components: a deterministic term g\u0302MF , which is computed by backpropagation through a mean-field network that we describe in Section 3.1, and a LR term g\u0302R, which accounts for the residuals to produce an unbiased gradient estimate. In the following, let \u00b5x(\u03b8) be Ep\u03b8(x)[x] and x\u0304 be any value that does not depend on x. The key idea of MuProp is summarized in the following equation:\ng\u0302(\u00b5) = \u2207\u03b8 log p\u03b8(x) \u00b7 [f(x)\u2212 f(x\u0304)\u2212 f \u2032(x\u0304)(x\u2212 x\u0304)]\ufe38 \ufe37\ufe37 \ufe38 g\u0302R + f \u2032(x\u0304)\u2207\u03b8\u00b5x(\u03b8)\ufe38 \ufe37\ufe37 \ufe38 g\u0302MF\n(3)\n1Optimal baselines are somewhat involved, as they take into account the magnitude of\u2207\u03b8 log p\u03b8(x) and are different for each parameter (Weaver & Tao, 2001).\nwhere x \u223c p\u03b8, and g\u0302(\u00b5) is an unbiased estimate of the gradient. The derivation follows directly from the baseline technique described in Section 2.2: MuProp uses a control variate that corresponds to the first-order Taylor expansion of f around some fixed value x\u0304, i.e., h(x) = f(x\u0304) + f \u2032(x\u0304)(x\u2212 x\u0304). The idea of using Taylor expansion as a baseline is also explored by (Paisley et al., 2012) and (Gregor et al., 2014); however, (Paisley et al., 2012) does not explore the estimator in the context of arbitrary stochastic computational graphs, and (Gregor et al., 2014) chooses a different form of Taylor expansion that makes the estimator biased. The latter approach also does not generalize to multi-layer graphs.\nOur contribution with MuProp is to extend the idea of Taylor expansions as baselines and make them applicable to arbitrary stochastic computational graphs. We will describe our derivation and design choices, as well as possible extensions to the standard form of MuProp that can enhance the statistical efficiency of the method. In the appendix, we also present a simple algorithm to compute the MuProp estimator using automatic differentiation, which makes it easy to integrate into any existing automatic differentiation library."}, {"heading": "3.1 GENERALIZED BACKPROPAGATION WITH MEAN-FIELD NETWORKS", "text": "It is not always possible to directly apply Eq. 3 to an arbitrary computation graph because of the f \u2032(x\u0304) terms. If the computation graph includes a discrete sampling operation as in Figure 1, then one cannot directly define continuous gradient through such an operation. As a solution, we use a deterministic mean-field network, which ignores the sampling operations in the original graph and propagates the mean values instead of the samples. Figure 1 shows how the backward pass computes the gradient with respect to \u03b8. MuProp computes the Taylor expansion using the mean-field network, which is fully differentiable, and uses these terms to reduce the variance. While the choice to use the mean-field network seems arbitrary, we show that a proper recursive derivation of Eq. 3 for deep networks naturally leads to recursive Taylor expansions around the mean functions. Furthermore, if x\u0304 coincides with the mean-field forward pass, the gradient estimator simplifies to Eq. 3. The full derivation is given in the appendix."}, {"heading": "4 COMPARISON WITH OTHER GRADIENT ESTIMATORS", "text": "While MuProp is derived from the LR estimator, which is also unbiased, it is closely related to two biased estimators commonly used to train stochastic binary networks. In this section we will describe these two estimators, the Straight-Through estimator and the 1/2 estimator. To simplify notation, we describe the estimators assuming one stochastic variable x. The provided estimator expressions however generalize easily to arbitrary stochastic computational graphs.2 The estimators mentioned above are summarized in Table 1 for completeness.\n2Only the LR and MuProp estimators have a principled extension to deep networks. The other methods can be extended to deep networks heuristically.\nWe do not consider the importance-sampling based approaches (Raiko et al., 2015; Tang & Salakhutdinov, 2013; Bornschein & Bengio, 2015; Burda et al., 2015) as these can be interpreted as optimizing a different objective (Burda et al., 2015) that requires sampling the latent variables multiple times. The resulting estimators are more specialized than the ones considered in this paper, which are agnostic to the objective being optimized. As a result, MuProp and the other general estimators can be applied to the objective optimized by the importance-sampling based methods. We leave exploring this direction as future work."}, {"heading": "4.1 THE STRAIGHT-THROUGH ESTIMATOR", "text": "The straight-through estimator (ST) (Bengio et al., 2013; Raiko et al., 2015) is a biased but lowvariance estimator, devised primarily for binary stochastic neurons3. The idea is to backpropagate through the thresholding function as if it were the identity function. The estimator is given below:\ng\u0302(ST ) = f \u2032(x)\u2207\u03b8\u00b5x(\u03b8) (4)\nThe estimator resembles the g\u0302MF term in our estimator in Eq. 3, since for a stochastic binary network the activation function is the mean function. The difference is that this estimator depends on sampled xi during backpropagation, while our formulation backpropagates the gradient through the mean-field activations. Despite the heuristic derivation, this simple biased estimator works well in practice, most likely due to its overall similarity to the backpropagation algorithm. However, we show that MuProp significantly outperforms ST estimators on certain tasks, which suggests that unbiased estimators are more reliable."}, {"heading": "4.2 THE 1/2 ESTIMATOR", "text": "Gregor et al. (2014) proposed a biased estimator for the Deep AutoRegressive Network (DARN), which we refer to as the \u201c1/2\u201d estimator due to its particular choice of the baseline. Like the StraightThrough estimator, the 1/2 estimator is also specialized for stochastic binary networks. For models with only one stochastic unit, the 1/2 estimator corresponds to using the Taylor expansion around the sample x, evaluated at a fixed point x\u0304, as the baseline, such that h(x) = f(x) + f \u2032(x)(x\u0304 \u2212 x). Since the expectation over h(x) cannot be computed analytically and x\u0304 cannot be chosen to make the baseline mean 0 for any arbitrary function f , this estimator is biased. Critically, the 1/2 estimator is derived for models with only one unit but is applied to large models by treating each unit as the sole unit of the model. Furthermore, the 1/2 estimator is not well-justified in the multi-layer case. However, backpropagating the gradient estimator derived in the single-layer case is shown to work well for stochastic binary neurons. The basic form of the estimator is given by\ng\u0302(1/2) = \u2207\u03b8 log p\u03b8(x) \u00b7 (f \u2032(x)T \u00b7 (x\u2212 x\u0304)) (5)\nIf x consists of binary random variables, the expression can be further simplified by using x\u0304 = 1/2 (see (Gregor et al., 2014) for justification); however, for non-quadratic f , the estimator is biased:\ng\u0302(1/2) = f \u2032(x)\u2207\u03b8\u00b5x(\u03b8)\n2p\u03b8(x) (6)\nIf x consists of multinomial random variables with k categories, no sensible x\u0304 has been proposed. Since 1/2 estimator is only tested on binary variables, we experimented with three choices of x\u0304: 1/2, 1/k, and \u00b5x(\u03b8). Let \u00b5x(\u03b8) = softmax(\u03b8) be the mean of the multinomial units (\u03b8 \u2208 Rk), and x \u2208 Rk is one-hot encoding of the categorical values. Then the 1/2 estimator for the multinomial case becomes\ng\u0302(1/2) = (f \u2032(x)T \u00b7 (x\u2212 x\u0304))(xT \u00b7 \u2207\u03b8\u00b5x(\u03b8))\n\u00b5x(\u03b8) (7)\n3The ST estimator was proposed by Hinton (2012) and named in Bengio et al. (2013). The ST estimator can include the derivative of the sigmoid or not. Raiko et al. (2015) derive the version with the derivative of the sigmoid using another interpretation and differentiate it from the original ST estimator in their work. For simplicity, here we always assume that the ST estimator includes the derivative of the sigmoid, which is often essential for achieving the best performance (Raiko et al., 2015)."}, {"heading": "5 EXPERIMENTS", "text": "We compare the LR, ST, and 1/2 estimators with the MuProp estimator on tasks that use a diverse set of network architectures. For the LR and the MuProp estimators, \u2018-C\u2019, \u2018-VN\u2019, and \u2018-IDB\u2019 indicate constant mean baseline, variance normalization, and input-dependent baseline respectively. The first task does not make use of an inference network and involves direct optimization of an approximation to the expected objective. The second task involves training a sigmoid belief network jointly with an inference network by maximizing the variational lower bound on the intractable log-likelihood. MuProp performs consistently well at both tasks."}, {"heading": "5.1 STRUCTURED OUTPUT PREDICTION", "text": "In this experiment, we follow the setup proposed by Raiko et al. (2015). The two tasks are to predict the lower half of an MNIST digit given the top half, and to predict multiple facial expressions from an average face using Toronto Face dataset (TFD); the output distribution in both tasks exhibits complex multi-modality. For MNIST, the output pixels are binarized using the same protocol as in (Raiko et al., 2015). Given an input x, an output y, and stochastic hidden variables h, the objective is to maximize Ehi\u223cp\u03b8(h|x) [ log ( 1 m \u2211m i=1 p\u03b8(y|hi) )] , an importance-sampled estimate of the likelihood objective (Raiko et al., 2015; Burda et al., 2015). We use m = 1 for training, and m = 100 for validation and testing. For MNIST, a fixed learning rate is chosen from {0.003, 0.001, .., 0.00003}, and the best test result is reported for each method. For the TFD dataset, the learning rate is chosen from the same list, but each learning rate is 10 times smaller. We used a momentum of 0.9 and minibatches of size 100. The input-dependent baseline (IDB) of Mnih & Gregor (2014) uses both the input and output as its input and has a single hidden-layer of 100 Tanh units.\nFigure 2a shows the test cost versus the number of parameter update steps of a typical run, while Table 2 summarizes the test performance for the different estimators. Convergence of the LR estimators is significantly slower than that of MuProp, ST, and 1/2. In fact, MuProp with simple mean subtraction is consistently better than LR with all of the variance reduction techniques. For MuProp, adding input-dependent baselines does not lead to any improvement over a simple constant mean baseline and variance normalization, and it is interesting to observe that MuProp\u2019s sampledependent-baseline reduces the variance significantly more than the input-dependent baseline that also utilizes the output y. MuProp is slightly worse than ST and 1/2, and this performance gap can be explained by the fact that standard MuProp only uses a single-trunk mean-field pass of the network, making the \u201cmean\u201d values at higher layers less correlated with the true conditional distribution. Section 6 discusses extensions to address this problem, at the cost of more computation or training an auxiliary network.\nOur results show that MuProp significantly outperforms LR and closely matches the performance of ST and 1/2 in terms of both convergence speed and final accuracy, and is the only unbiased estimator that can compete with the biased ST and 1/2 estimators on this task."}, {"heading": "5.2 VARIATIONAL TRAINING OF GENERATIVE MODELS", "text": "In the second set of experiments, we apply MuProp to variational training of generative models. The auto-encoding variational Bayes framework (Kingma & Welling, 2014), along with similar methods, allows powerful generative models to be trained efficiently by replacing slow iterative inference algorithms with fast feedforward approximate inference networks. The inference networks, which map observations to samples from the variational posterior, are trained jointly with the model by maximizing a common objective. This objective is a variational lower bound on the marginal loglikelihood, and it is straight-forward to show that it is a stochastic computation graph with particular choice of cost.\nWhen the variational distributions over the latent variables have a specific form, such as conditional Gaussian, such models can be trained easily by using the reparameterization trick to backpropagate the gradient through the inference network (Kingma & Welling, 2014). However, Gaussian distributions are not appropriate for all types of data or all models. If we opt to use discrete latent variables, we would have to choose between gradient estimators that are biased but have low variance (Gregor et al., 2014) or are unbiased but higher variance (Mnih & Gregor, 2014). As MuProp is unbiased and has relatively low variance due to its use of backpropagation for gradient estimation, we expect it to be particularly well-suited for training such models.\nWe will concentrate on training layered belief networks with either Bernoulli or multinomial latent variables. The model in question is equivalent to a sigmoid belief network if it does not have autoregressive connections, or to fDARN if it has autoregressive connections Gregor et al. (2014). The multinomial model uses 200 latent variables with 10 categories each (k = 10), and thus is referred to as the 200\u00d710 model. We applied the models to the binarized MNIST dataset, which consists of 28\u00d728 images of hand-written digits, and is commonly used for evaluating generative models. We trained the models using stochastic gradient descent using momentum of 0.9. The learning rate was\nselected from {0.003, 0.001, .., 0.000003}, and the best test score is reported. For the 1/2 estimator in the categorical model, we found that x\u0304=1/2 or 1/k worked best, and used the latter value for the results reported. As we used the same experimental setup and SBN/fDARN models, our results are directly comparable to those obtained using neural variational inference and learning (NVIL) in (Mnih & Gregor, 2014). Note that LR-C-VN-IDB is our implementation of NVIL.\nFigure 3 shows sample training curves for typical runs, and Table 3 summarizes the results. These results convincingly show that MuProp outperforms all the competing estimators. While the variancereduced LR estimator (NVIL) performs very well on this task and is on par with MuProp on the final variational lower-bound, MuProp converges significantly faster (e.g. for the categorical model, about 3-4 times faster). This suggests that MuProp (with only mean subtraction) still has significantly less variance than LR on this task, just as in Section 5.1. For the ST and 1/2 estimators, the story is more interesting. First, their final variational lower-bounds are significantly worse than MuProp or LR. More importantly, they exhibit little consistency in performance. On the SBN models, 1/2 typically outperforms ST, while on the categorical model, the reverse is true. This result, along with the fluctuations observed in the categorical model training curve for 1/2, suggests that such biased estimators can be unreliable for more complex models, and that their performance can vary drastically based on the cost function and model architecture. MuProp, on the other hand, is guaranteed to improve the desired objective because it is unbiased, while having much less variance than LR due to the use of the gradient information from backpropagation."}, {"heading": "6 DISCUSSION", "text": "In this paper, we presented MuProp, which is an unbiased estimator of derivatives in stochastic computational graphs that combines the statistical efficiency of backpropagation with the correctness of a likelihood ratio method.\nMuProp has a number of natural extensions. First, we might consider using other functions for the baseline rather than just the Taylor expansion, which could be learned in a manner that resembles Q-learning (Watkins & Dayan, 1992) and target propagation (Lee et al., 2015). In reinforcement learning, fitted Q-functions obtained by estimating the expected return of a given policy \u03c0\u03b8 summarize all future costs, and a good Q-function can greatly simplify the temporal credit assignment problem. Combining MuProp with such fitted Q-functions could greatly reduce the variance of the estimator and make it better suited for very deep computational graphs, such as long recurrent neural networks and applications in reinforcement learning.\nThe second extension is to make x\u0304 depend on samples of its parent nodes, as illustrated by rollout procedure in Figure 1. This could substantially improve performance on deeper networks, where the value from a single-trunk mean-field pass may diverge significantly from any samples drawn with a fully stochastic pass. By drawing x\u0304 using mean-field passes originating at sampled values from preceding layers would prevent such divergence, though at additional computational cost, since the number of mean-field passes would depend on the depth n of the network, for a total ofO(n2) partial passes through the network. Intuitively, the single mean-field \u201cchain\u201d would turn into a \u201ctree,\u201d with a sampled trunk and a different mean-field branch at each layer."}, {"heading": "ACKNOWLEDGMENTS", "text": "We sincerely thank Jascha Solh-dickstein, Laurent Dinh, Ben Poole, and Quoc Le for helpful discussions and the Google Brain team for the support."}, {"heading": "7 RECURSIVE DERIVATION OF MUPROP", "text": "Given a model with multiple layers of discrete random variables x1...xn and input x0, the general loss function can be written as L(x0, \u03b8) = Ep(x1,...,xn|x0,\u03b8)[f\u03b8(x0:n)]. For simplicity, we show derivation assuming that p(x1, ..., xn|x0, \u03b8) = \u220fn i=1 p(xi|xi\u22121, \u03b8i\u22121) = \u220fn i=1 pi and f(x1:n, \u03b8) = f(xn, \u03b8n), where \u03b8 = {\u03b80, ..., \u03b8n}; however, the derivation is easy to extend to any directed acyclic graph. We assume that there is a continuous and differentiable mean function for each p(xi|xi\u22121, \u03b8i\u22121), denoted by \u00b5i(xi\u22121, \u03b8i\u22121) = Ep(xi|xi\u22121,\u03b8i\u22121)[xi]. The derivation is based on the recursive first-order Taylor expansion around some arbitrary fixed points x\u03041:n, which we detail later. We use \u00b5\u2032i and f \u2032 to denote \u2202\u00b5i\u2202xi\u22121 and \u2202f \u2202xn .\nWe first derive the gradient for \u2202L\u2202\u03b8n and \u2202L \u2202\u03b8n\u22121 and then for { \u2202L\u2202\u03b8i }i=0:n. The final expression for the estimator resembles the classical backpropagation formulation, and allows efficient computation through forward and backward passes. We intentionally avoid the standard matrix algebra notation to provide clean derivations, as the extension is straight-forward.\n\u2202L \u2202\u03b8n = Ep1:n [\u2207\u03b8nf(xn, \u03b8n)] (8)\n\u2202L\n\u2202\u03b8n\u22121 = Ep1:n\u22121 [\u2207\u03b8n\u22121Epn [f(xn, \u03b8n)]]\n= Ep1:n\u22121 [Epn [\u2207\u03b8n\u22121 log pn \u00b7 f(xn, \u03b8n)]] = Ep1:n\u22121 [Epn [\u2207\u03b8n\u22121 log pn \u00b7 [f(xn, \u03b8n)\u2212 f(x\u0304n, \u03b8n)\u2212 f \u2032(x\u0304n, \u03b8n) \u00b7 (xn \u2212 x\u0304n)]]\n+ Epn [\u2207\u03b8n\u22121 log pn \u00b7 [f(x\u0304n, \u03b8n) + f \u2032(x\u0304n, \u03b8n) \u00b7 (xn \u2212 x\u0304n)]]] = Ep1:n\u22121 [Epn [\u2207\u03b8n\u22121 log pn \u00b7Rn] + f \u2032(x\u0304n, \u03b8n)\u2207\u03b8n\u22121Epn [xN ]] = Ep1:n\u22121 [Epn [\u2207\u03b8n\u22121 log pn \u00b7Rn] + f \u2032(x\u0304n, \u03b8n)\u2207\u03b8n\u22121\u00b5n(xn\u22121, \u03b8n\u22121)]\n(9)\nwhere we define the residuals Ri = \u00b5i+1(xi, \u03b8i) \u2212 \u00b5i+1(x\u0304i, \u03b8i) \u2212 \u00b5\u2032i+1(x\u0304i, \u03b8i) \u00b7 (xi \u2212 x\u0304i) and let \u00b5n+1(xn, \u03b8n) = f(xn, \u03b8n). Applying the same derivation recursively, we get:\n\u2202L \u2202\u03b8i = Ep1:n [\u2207\u03b8i log pi+1 \u00b7Rn] + f \u2032(x\u0304n, \u03b8n) \u00b7 Ep1:n\u22121 [\u2207\u03b8i log pi+1 \u00b7 \u00b5n(xn\u22121, \u03b8n\u22121)]\n= Ep1:n [\u2207\u03b8i log pi+1 \u00b7Rn] + f \u2032(x\u0304n, \u03b8n)[Ep1:n\u22121 [\u2207\u03b8i log pi+1 \u00b7Rn\u22121] + \u00b5\u2032n(x\u0304n\u22121, \u03b8n\u22121)[Ep1:n\u22122 [\u2207\u03b8i log pi+1 \u00b7Rn\u22122] + ...+ \u00b5\u2032i+2(x\u0304i+1, \u03b8i+1) \u00b7 \u2207\u03b8i\u00b5i+1(xi, \u03b8i)]]...]\n= Ep1:n [\u2207\u03b8i log pi+1 \u00b7 ( n\u2211\nk=i+1\nRk n+1\u220f j=k+2 \u00b5\u2032j(x\u0304j\u22121, \u03b8j\u22121))]\n+ Ep1:i [( n+1\u220f j=i+2 \u00b5\u2032j(x\u0304j\u22121, \u03b8j\u22121)) \u00b7 \u2207\u03b8i\u00b5i+1(xi, \u03b8i)]\n(10)\nwhere we slightly abuse the notation and assume \u220fn+1 j=n+2(\u00b5 \u2032 j) = 1. The estimator expression is:\n\u2202\u0302L \u2202\u03b8i (\u00b5) = \u2207\u03b8i log pi+1 \u00b7 ( n\u2211 k=i+1 Rk n+1\u220f j=k+2 \u00b5\u2032j(x\u0304j\u22121, \u03b8j\u22121)) + ( n+1\u220f j=i+2 \u00b5\u2032j(x\u0304j\u22121, \u03b8j\u22121)) \u00b7 \u2207\u03b8i\u00b5i+1(xi, \u03b8i)\n(11)\nThe formulation assumes a set of fixed points x\u03041:n, whose only requirements are that x\u0304i cannot depend on xi. If we choose x\u03041:n as given by deterministic mean-field forward pass, the gradient estimator simplifies and recovers Eq. 3."}, {"heading": "8 MUPROP WITH AUTOMATIC DIFFERENTIATION", "text": "We present a simple algorithm to compute MuProp gradient, taking advantage of the automatic differentiation functionalities. Algorithm 1 assumes that the automatic differentiation library provides two functionalities: Gradients(cost, inputs) which computes derivatives of cost with respect to inputs, and StopGradient(x) which returns a node with equal value with x but stops gradient when Gradients is called. It assumes that the graph consists of n stochastic nodes {xi}i=1:n and loss function f which can be the sum of multiple loss functions at different parts of the graph. PARENTSxi denotes the stochastic parental nodes of xi. ForwardPass builds the symbolic graph whose outputs can be differentiated using Gradients. When stochastic=true, each stochastic node samples the value and wraps the value using StopGradient such that no gradient is propagated through the stochastic operation. stochastic=false builds the mean-field network that is fully differentiable. The algorithm also assumes it usesm = 1 sample, and in general the run time of the algorithm is 1 deterministic pass + m stochastic passes through the network. In practice, we augment the algorithm with the variance reduction techniques described in Section 2.2. Extensions discussed in Section 6 are also easy to include.\nAlgorithm 1 Compute MuProp Gradient Estimator Require: Input: x0, Parameters: \u03b8 x\u03041:n, f(x\u03041:n)\u2190 ForwardPass(x0, stochastic=false) {f \u2032(x\u0304i)}i=1:n \u2190 Gradients(f(x\u03041:n), x\u03041:n) x1:n, \u00b51:n, f(x1:n), {log p\u03b8(xi|PARENTSxi)}i=1:n \u2190 ForwardPass(x0, stochastic=true) ci \u2190 log p\u03b8(xi|PARENTSxi)StopGradient(f(x1:n)\u2212 f(x\u03041:n)\u2212 f \u2032(x\u0304i)T \u00b7 (xi \u2212 x\u0304i)) + \u00b5T \u00b7 StopGradient(f \u2032(x\u0304i))\nc\u2190 f(x1:n) + \u2211n i=1 ci g\u0302(\u00b5) \u2190 Gradients(c, \u03b8)"}], "references": [{"title": "Estimating or propagating gradients through stochastic neurons for conditional computation", "author": ["Bengio", "Yoshua", "L\u00e9onard", "Nicholas", "Courville", "Aaron"], "venue": "arXiv preprint arXiv:1308.3432,", "citeRegEx": "Bengio et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2013}, {"title": "Importance weighted autoencoders", "author": ["Burda", "Yuri", "Grosse", "Roger", "Salakhutdinov", "Ruslan"], "venue": "arXiv preprint arXiv:1509.00519,", "citeRegEx": "Burda et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Burda et al\\.", "year": 2015}, {"title": "The helmholtz machine", "author": ["Dayan", "Peter", "Hinton", "Geoffrey E", "Neal", "Radford M", "Zemel", "Richard S"], "venue": "Neural computation,", "citeRegEx": "Dayan et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Dayan et al\\.", "year": 1995}, {"title": "Deep autoregressive networks", "author": ["Gregor", "Karol", "Danihelka", "Ivo", "Mnih", "Andriy", "Blundell", "Charles", "Wierstra", "Daan"], "venue": "In ICML,", "citeRegEx": "Gregor et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2014}, {"title": "Neural networks for machine learning", "author": ["Hinton", "Geoffrey"], "venue": "Coursera, video lectures,", "citeRegEx": "Hinton and Geoffrey.,? \\Q2012\\E", "shortCiteRegEx": "Hinton and Geoffrey.", "year": 2012}, {"title": "Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups", "author": ["Hinton", "Geoffrey", "Deng", "Li", "Yu", "Dong", "Dahl", "George E", "Mohamed", "Abdel-rahman", "Jaitly", "Navdeep", "Senior", "Andrew", "Vanhoucke", "Vincent"], "venue": "Signal Processing Magazine, IEEE,", "citeRegEx": "Hinton et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2012}, {"title": "The \u201dwake-sleep\u201d algorithm for unsupervised neural networks", "author": ["Hinton", "Geoffrey E", "Dayan", "Peter", "Frey", "Brendan J", "Neal", "Radford M"], "venue": null, "citeRegEx": "Hinton et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 1995}, {"title": "Auto-encoding variational bayes", "author": ["Kingma", "Diederik P", "Welling", "Max"], "venue": "ICLR,", "citeRegEx": "Kingma et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2014}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Krizhevsky", "Alex", "Sutskever", "Ilya", "Hinton", "Geoffrey E"], "venue": "In NIPS, pp", "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Difference target propagation", "author": ["Lee", "Dong-Hyun", "Zhang", "Saizheng", "Fischer", "Asja", "Bengio", "Yoshua"], "venue": "In Machine Learning and Knowledge Discovery in Databases,", "citeRegEx": "Lee et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lee et al\\.", "year": 2015}, {"title": "Neural variational inference and learning in belief networks", "author": ["Mnih", "Andriy", "Gregor", "Karol"], "venue": "In ICML,", "citeRegEx": "Mnih et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2014}, {"title": "Recurrent models of visual attention", "author": ["Mnih", "Volodymyr", "Heess", "Nicolas", "Graves", "Alex"], "venue": "In NIPS,", "citeRegEx": "Mnih et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2014}, {"title": "Connectionist learning of belief networks", "author": ["Neal", "Radford M"], "venue": "Artificial intelligence,", "citeRegEx": "Neal and M.,? \\Q1992\\E", "shortCiteRegEx": "Neal and M.", "year": 1992}, {"title": "Variational bayesian inference with stochastic search", "author": ["Paisley", "John", "Blei", "David", "Jordan", "Michael"], "venue": null, "citeRegEx": "Paisley et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Paisley et al\\.", "year": 2012}, {"title": "Policy gradient methods for robotics", "author": ["Peters", "Jan", "Schaal", "Stefan"], "venue": "In Intelligent Robots and Systems,", "citeRegEx": "Peters et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Peters et al\\.", "year": 2006}, {"title": "Techniques for learning binary stochastic feedforward neural networks", "author": ["Raiko", "Tapani", "Berglund", "Mathias", "Alain", "Guillaume", "Dinh", "Laurent"], "venue": null, "citeRegEx": "Raiko et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Raiko et al\\.", "year": 2015}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["Rezende", "Danilo Jimenez", "Mohamed", "Shakir", "Wierstra", "Daan"], "venue": null, "citeRegEx": "Rezende et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rezende et al\\.", "year": 2014}, {"title": "Learning representations by backpropagating", "author": ["Rumelhart", "David E", "Hinton", "Geoffrey E", "Williams", "Ronald J"], "venue": "errors. Nature,", "citeRegEx": "Rumelhart et al\\.,? \\Q1986\\E", "shortCiteRegEx": "Rumelhart et al\\.", "year": 1986}, {"title": "Mean field theory for sigmoid belief networks", "author": ["Saul", "Lawrence K", "Jaakkola", "Tommi", "Jordan", "Michael I"], "venue": "Journal of artificial intelligence research,", "citeRegEx": "Saul et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Saul et al\\.", "year": 1996}, {"title": "Gradient estimation using stochastic computation graphs", "author": ["Schulman", "John", "Heess", "Nicolas", "Weber", "Theophane", "Abbeel", "Pieter"], "venue": null, "citeRegEx": "Schulman et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Schulman et al\\.", "year": 2015}, {"title": "Sequence to sequence learning with neural networks", "author": ["Sutskever", "Ilya", "Vinyals", "Oriol", "Le", "Quoc"], "venue": "In NIPS,", "citeRegEx": "Sutskever et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2014}, {"title": "Learning stochastic feedforward neural networks", "author": ["Tang", "Yichuan", "Salakhutdinov", "Ruslan"], "venue": "In NIPS,", "citeRegEx": "Tang et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Tang et al\\.", "year": 2013}, {"title": "The optimal reward baseline for gradient-based reinforcement learning", "author": ["Weaver", "Lex", "Tao", "Nigel"], "venue": "In UAI,", "citeRegEx": "Weaver et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Weaver et al\\.", "year": 2001}, {"title": "Reinforcement learning neural turing machines", "author": ["Zaremba", "Wojciech", "Sutskever", "Ilya"], "venue": "Machine learning,", "citeRegEx": "Zaremba et al\\.,? \\Q1992\\E", "shortCiteRegEx": "Zaremba et al\\.", "year": 1992}], "referenceMentions": [{"referenceID": 8, "context": "Deep neural networks (Krizhevsky et al., 2012; Hinton et al., 2012; Sutskever et al., 2014) are responsible for numerous state-of-the-art results in a variety of domains, including computer vision, speech recognition, and natural language processing.", "startOffset": 21, "endOffset": 91}, {"referenceID": 5, "context": "Deep neural networks (Krizhevsky et al., 2012; Hinton et al., 2012; Sutskever et al., 2014) are responsible for numerous state-of-the-art results in a variety of domains, including computer vision, speech recognition, and natural language processing.", "startOffset": 21, "endOffset": 91}, {"referenceID": 20, "context": "Deep neural networks (Krizhevsky et al., 2012; Hinton et al., 2012; Sutskever et al., 2014) are responsible for numerous state-of-the-art results in a variety of domains, including computer vision, speech recognition, and natural language processing.", "startOffset": 21, "endOffset": 91}, {"referenceID": 17, "context": "The cornerstone of their success has been the simple and scalable backpropagation algorithm (Rumelhart et al., 1986).", "startOffset": 92, "endOffset": 116}, {"referenceID": 10, "context": "Such stochastic networks are studied in policy gradient reinforcement learning methods (Williams, 1992; Weaver & Tao, 2001; Peters & Schaal, 2006), probabilistic latent variable models for structured prediction, unsupervised learning of generative models (Tang & Salakhutdinov, 2013; Kingma & Welling, 2014), and most recently, attention and memory networks (Mnih et al., 2014; Zaremba & Sutskever, 2015).", "startOffset": 358, "endOffset": 404}, {"referenceID": 16, "context": "Models with continuous latent variables and simple approximate posteriors can already be trained efficiently using the variational lower bound along with the reparameterization trick, which makes it possible to train both the model and the inference network using backpropagation (Kingma & Welling, 2014; Rezende et al., 2014).", "startOffset": 280, "endOffset": 326}, {"referenceID": 0, "context": "Unbiased estimators based on the likelihood-ratio method tend to be significantly less effective than biased estimators, such as the straight-through method (Bengio et al., 2013; Raiko et al., 2015) and the estimator proposed by Gregor et al.", "startOffset": 157, "endOffset": 198}, {"referenceID": 15, "context": "Unbiased estimators based on the likelihood-ratio method tend to be significantly less effective than biased estimators, such as the straight-through method (Bengio et al., 2013; Raiko et al., 2015) and the estimator proposed by Gregor et al.", "startOffset": 157, "endOffset": 198}, {"referenceID": 0, "context": "Unbiased estimators based on the likelihood-ratio method tend to be significantly less effective than biased estimators, such as the straight-through method (Bengio et al., 2013; Raiko et al., 2015) and the estimator proposed by Gregor et al. (2014). We hypothesize that this is due to the fact that, unlike the biased estimators, the unbiased ones do not take advantage of the gradient information provided by the backpropagation algorithm.", "startOffset": 158, "endOffset": 250}, {"referenceID": 2, "context": "With these models, which are notoriously difficult to train, biased methods often significantly outperform the unbiased ones (Dayan et al., 1995; Gregor et al., 2014; Raiko et al., 2015), except in certain cases (Mnih & Gregor, 2014).", "startOffset": 125, "endOffset": 186}, {"referenceID": 3, "context": "With these models, which are notoriously difficult to train, biased methods often significantly outperform the unbiased ones (Dayan et al., 1995; Gregor et al., 2014; Raiko et al., 2015), except in certain cases (Mnih & Gregor, 2014).", "startOffset": 125, "endOffset": 186}, {"referenceID": 15, "context": "With these models, which are notoriously difficult to train, biased methods often significantly outperform the unbiased ones (Dayan et al., 1995; Gregor et al., 2014; Raiko et al., 2015), except in certain cases (Mnih & Gregor, 2014).", "startOffset": 125, "endOffset": 186}, {"referenceID": 16, "context": ", Schulman et al. (2015)).", "startOffset": 2, "endOffset": 25}, {"referenceID": 2, "context": "Probabilistic latent variable models described by neural networks date back to pioneering early work on sigmoidal belief networks and Helmholtz machines (Neal, 1992; Dayan et al., 1995).", "startOffset": 153, "endOffset": 185}, {"referenceID": 18, "context": "Algorithms based on Markov chain Monte Carlo (Neal, 1992) and mean-field inference (Saul et al., 1996) are theoretically well-grounded, but do not scale well to large models.", "startOffset": 83, "endOffset": 102}, {"referenceID": 6, "context": "The wakesleep algorithm (Hinton et al., 1995) scales to large models, but does not optimize a well definedobjective function, and therefore does not provide convergence guarantees.", "startOffset": 24, "endOffset": 45}, {"referenceID": 3, "context": "A number of these algorithms use likelihood ratio estimators with variance reduction techniques (Ranganath et al., 2014; Mnih & Gregor, 2014; Gregor et al., 2014), inspired by methods from reinforcement learning (Williams, 1992; Weaver & Tao, 2001; Peters & Schaal, 2006).", "startOffset": 96, "endOffset": 162}, {"referenceID": 15, "context": "Instead of performing inference using an inference network, these algorithms either use importance sampling to reweight samples from the prior (Tang & Salakhutdinov, 2013; Raiko et al., 2015), or rely on heuristics for approximate backpropagation through the stochastic units (Bengio et al.", "startOffset": 143, "endOffset": 191}, {"referenceID": 0, "context": ", 2015), or rely on heuristics for approximate backpropagation through the stochastic units (Bengio et al., 2013; Raiko et al., 2015; Gregor et al., 2014).", "startOffset": 92, "endOffset": 154}, {"referenceID": 15, "context": ", 2015), or rely on heuristics for approximate backpropagation through the stochastic units (Bengio et al., 2013; Raiko et al., 2015; Gregor et al., 2014).", "startOffset": 92, "endOffset": 154}, {"referenceID": 3, "context": ", 2015), or rely on heuristics for approximate backpropagation through the stochastic units (Bengio et al., 2013; Raiko et al., 2015; Gregor et al., 2014).", "startOffset": 92, "endOffset": 154}, {"referenceID": 3, "context": "This is further exacerbated by the fact that LR estimators for minibatch training of neural networks typically use m = 1, in order to maximize the variety of examples seen by the network (Kingma & Welling, 2014; Gregor et al., 2014; Rezende et al., 2014; Mnih & Gregor, 2014).", "startOffset": 187, "endOffset": 275}, {"referenceID": 16, "context": "This is further exacerbated by the fact that LR estimators for minibatch training of neural networks typically use m = 1, in order to maximize the variety of examples seen by the network (Kingma & Welling, 2014; Gregor et al., 2014; Rezende et al., 2014; Mnih & Gregor, 2014).", "startOffset": 187, "endOffset": 275}, {"referenceID": 13, "context": "The derivation of MuProp in Section 3 uses a variance reduction technique known as control variates (Paisley et al., 2012).", "startOffset": 100, "endOffset": 122}, {"referenceID": 3, "context": "This is further exacerbated by the fact that LR estimators for minibatch training of neural networks typically use m = 1, in order to maximize the variety of examples seen by the network (Kingma & Welling, 2014; Gregor et al., 2014; Rezende et al., 2014; Mnih & Gregor, 2014). The simplest way to reduce variance is to increase m, but this is computationally expensive. Efficient and effective variance reduction techniques are therefore crucial for the LR estimator to be practical. The derivation of MuProp in Section 3 uses a variance reduction technique known as control variates (Paisley et al., 2012). The main idea is to subtract an analytically tractable term from the LR estimate in order to reduce the variance of the Monte Carlo estimate, and then add back the analytical expectation of this term to recover an unbiased estimator: Ep\u03b8(x)[\u2207\u03b8 log p\u03b8(x) \u00b7 f(x)] = Ep\u03b8(x)[\u2207\u03b8 log p\u03b8(x) \u00b7 (f(x)\u2212 b\u2212 h(x))] + \u03bc (2) In this example, b+ h(x) is a control variate, which is also known as a sample-dependent baseline. The expectation of the baseline needs to be added to the expression to make the resulting estimator unbiased. If the baseline is constant (i.e. h(x) = 0), its contribution to the gradient estimate is always zero in expectation, since \u2211 x p\u03b8(x)\u2207\u03b8 log p\u03b8(x) = \u2211 x\u2207\u03b8p\u03b8(x) = \u2207\u03b8 \u2211 x p\u03b8(x) = \u2207\u03b81 = 0. Otherwise, we must compute the expectation of the baseline (b + h(x))\u2207 log p\u03b8(x) analytically, as \u03bc = Ep\u03b8(x)[\u2207\u03b8 log p\u03b8(x) \u00b7 h(x)]. In our experiments, we utilize three types of variance reduction techniques for the estimators that include the same term as Eq. 2. While these techniques, proposed in a similar context in (Mnih & Gregor, 2014), do not result in the optimal variance reduction, they work well enough to make LR estimators useful in practice.1 For the precise details of these variance reduction techniques, please refer to Mnih & Gregor (2014). For reference, the techniques are:", "startOffset": 212, "endOffset": 1871}, {"referenceID": 13, "context": "The idea of using Taylor expansion as a baseline is also explored by (Paisley et al., 2012) and (Gregor et al.", "startOffset": 69, "endOffset": 91}, {"referenceID": 3, "context": ", 2012) and (Gregor et al., 2014); however, (Paisley et al.", "startOffset": 12, "endOffset": 33}, {"referenceID": 13, "context": ", 2014); however, (Paisley et al., 2012) does not explore the estimator in the context of arbitrary stochastic computational graphs, and (Gregor et al.", "startOffset": 18, "endOffset": 40}, {"referenceID": 3, "context": ", 2012) does not explore the estimator in the context of arbitrary stochastic computational graphs, and (Gregor et al., 2014) chooses a different form of Taylor expansion that makes the estimator biased.", "startOffset": 104, "endOffset": 125}, {"referenceID": 15, "context": "We do not consider the importance-sampling based approaches (Raiko et al., 2015; Tang & Salakhutdinov, 2013; Bornschein & Bengio, 2015; Burda et al., 2015) as these can be interpreted as optimizing a different objective (Burda et al.", "startOffset": 60, "endOffset": 155}, {"referenceID": 1, "context": "We do not consider the importance-sampling based approaches (Raiko et al., 2015; Tang & Salakhutdinov, 2013; Bornschein & Bengio, 2015; Burda et al., 2015) as these can be interpreted as optimizing a different objective (Burda et al.", "startOffset": 60, "endOffset": 155}, {"referenceID": 1, "context": ", 2015) as these can be interpreted as optimizing a different objective (Burda et al., 2015) that requires sampling the latent variables multiple times.", "startOffset": 72, "endOffset": 92}, {"referenceID": 0, "context": "The straight-through estimator (ST) (Bengio et al., 2013; Raiko et al., 2015) is a biased but lowvariance estimator, devised primarily for binary stochastic neurons3.", "startOffset": 36, "endOffset": 77}, {"referenceID": 15, "context": "The straight-through estimator (ST) (Bengio et al., 2013; Raiko et al., 2015) is a biased but lowvariance estimator, devised primarily for binary stochastic neurons3.", "startOffset": 36, "endOffset": 77}, {"referenceID": 3, "context": "\u011d(1/2) = \u2207\u03b8 log p\u03b8(x) \u00b7 (f \u2032(x)T \u00b7 (x\u2212 x\u0304)) (5) If x consists of binary random variables, the expression can be further simplified by using x\u0304 = 1/2 (see (Gregor et al., 2014) for justification); however, for non-quadratic f , the estimator is biased:", "startOffset": 154, "endOffset": 175}, {"referenceID": 15, "context": "For simplicity, here we always assume that the ST estimator includes the derivative of the sigmoid, which is often essential for achieving the best performance (Raiko et al., 2015).", "startOffset": 160, "endOffset": 180}, {"referenceID": 0, "context": "The ST estimator was proposed by Hinton (2012) and named in Bengio et al. (2013). The ST estimator can include the derivative of the sigmoid or not.", "startOffset": 60, "endOffset": 81}, {"referenceID": 0, "context": "The ST estimator was proposed by Hinton (2012) and named in Bengio et al. (2013). The ST estimator can include the derivative of the sigmoid or not. Raiko et al. (2015) derive the version with the derivative of the sigmoid using another interpretation and differentiate it from the original ST estimator in their work.", "startOffset": 60, "endOffset": 169}, {"referenceID": 15, "context": "For MNIST, the output pixels are binarized using the same protocol as in (Raiko et al., 2015).", "startOffset": 73, "endOffset": 93}, {"referenceID": 15, "context": "Given an input x, an output y, and stochastic hidden variables h, the objective is to maximize Ehi\u223cp\u03b8(h|x) [ log ( 1 m \u2211m i=1 p\u03b8(y|hi) )] , an importance-sampled estimate of the likelihood objective (Raiko et al., 2015; Burda et al., 2015).", "startOffset": 199, "endOffset": 239}, {"referenceID": 1, "context": "Given an input x, an output y, and stochastic hidden variables h, the objective is to maximize Ehi\u223cp\u03b8(h|x) [ log ( 1 m \u2211m i=1 p\u03b8(y|hi) )] , an importance-sampled estimate of the likelihood objective (Raiko et al., 2015; Burda et al., 2015).", "startOffset": 199, "endOffset": 239}, {"referenceID": 14, "context": "In this experiment, we follow the setup proposed by Raiko et al. (2015). The two tasks are to predict the lower half of an MNIST digit given the top half, and to predict multiple facial expressions from an average face using Toronto Face dataset (TFD); the output distribution in both tasks exhibits complex multi-modality.", "startOffset": 52, "endOffset": 72}, {"referenceID": 1, "context": ", 2015; Burda et al., 2015). We use m = 1 for training, and m = 100 for validation and testing. For MNIST, a fixed learning rate is chosen from {0.003, 0.001, .., 0.00003}, and the best test result is reported for each method. For the TFD dataset, the learning rate is chosen from the same list, but each learning rate is 10 times smaller. We used a momentum of 0.9 and minibatches of size 100. The input-dependent baseline (IDB) of Mnih & Gregor (2014) uses both the input and output as its input and has a single hidden-layer of 100 Tanh units.", "startOffset": 8, "endOffset": 454}, {"referenceID": 3, "context": "If we opt to use discrete latent variables, we would have to choose between gradient estimators that are biased but have low variance (Gregor et al., 2014) or are unbiased but higher variance (Mnih & Gregor, 2014).", "startOffset": 134, "endOffset": 155}, {"referenceID": 3, "context": "If we opt to use discrete latent variables, we would have to choose between gradient estimators that are biased but have low variance (Gregor et al., 2014) or are unbiased but higher variance (Mnih & Gregor, 2014). As MuProp is unbiased and has relatively low variance due to its use of backpropagation for gradient estimation, we expect it to be particularly well-suited for training such models. We will concentrate on training layered belief networks with either Bernoulli or multinomial latent variables. The model in question is equivalent to a sigmoid belief network if it does not have autoregressive connections, or to fDARN if it has autoregressive connections Gregor et al. (2014). The multinomial model uses 200 latent variables with 10 categories each (k = 10), and thus is referred to as the 200\u00d710 model.", "startOffset": 135, "endOffset": 691}, {"referenceID": 9, "context": "First, we might consider using other functions for the baseline rather than just the Taylor expansion, which could be learned in a manner that resembles Q-learning (Watkins & Dayan, 1992) and target propagation (Lee et al., 2015).", "startOffset": 211, "endOffset": 229}], "year": 2016, "abstractText": "Deep neural networks are powerful parametric models that can be trained efficiently using the backpropagation algorithm. Stochastic neural networks combine the power of large parametric functions with that of graphical models, which makes it possible to learn very complex distributions. However, as backpropagation is not directly applicable to stochastic networks that include discrete sampling operations within their computational graph, training such networks remains difficult. We present MuProp, an unbiased gradient estimator for stochastic networks, designed to make this task easier. MuProp improves on the likelihood-ratio estimator by reducing its variance using a control variate based on the first-order Taylor expansion of a mean-field network. Crucially, unlike prior attempts at using backpropagation for training stochastic networks, the resulting estimator is unbiased and well behaved. Our experiments on structured output prediction and discrete latent variable modeling demonstrate that MuProp yields consistently good performance across a range of difficult tasks.", "creator": "LaTeX with hyperref package"}}}