{"id": "1512.00306", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Dec-2015", "title": "A Hybrid Intelligent Model for Software Cost Estimation", "abstract": "murre Accurate software hathway development effort neocatechumenal estimation offers is critical yavin to tagum the nasiriyah success of software markussen projects. brb Although vanisher many endean techniques and algorithmic models solv have been developed and bartolini implemented 17,000 by practitioners, accurate natterer software debatably development effort elkus prediction is colostethus still levice a challenging endeavor in messman the field of langsner software wabasca engineering, especially in handling uncertain elfers and imprecise 1.5555 inputs rationalising and collinear characteristics. fireballs In protonix this atma paper, a hybrid in - anisul telligent wolfpack model combining a archosaurs neural network model integrated mantids with fuzzy model (neuro - orochi fuzzy meekins model) has gini been used to 25a improve photocopier the semiperfect accuracy f\u00e9minin of 1394 estimating zhifeng software wtmj cost. tormented The unrighteous performance hedges of poonjar the 445-3697 proposed model matovina is assessed by modernise designing and desaad conducting evaluation with published project and industrial data. orchestral Results landslips have zhizn shown xiu that the abukhalil proposed kingsbarns model s\u00edlvio demonstrates outsize the fnc ability sephie of n.i. improving sedlatzek the prosoma estimation ideations accuracy berjaya by 18% based -30 on 5-passenger the ansaar Mean i-mode Magnitude of gozzi Relative Error (clavero MMRE) waterings criterion.", "histories": [["v1", "Tue, 1 Dec 2015 15:47:29 GMT  (206kb)", "http://arxiv.org/abs/1512.00306v1", null]], "reviews": [], "SUBJECTS": "cs.SE cs.AI", "authors": ["wei lin du", "luiz fernando capretz", "ali bou nassif", "danny ho"], "accepted": false, "id": "1512.00306"}, "pdf": {"name": "1512.00306.pdf", "metadata": {"source": "CRF", "title": "A HYBRID INTELLIGENT MODEL FOR SOFTWARE COST ESTIMATION", "authors": ["Wei Lin Du", "Luiz Fernando Capretz", "Ali Bou Nassif", "Danny Ho"], "emails": ["lcapretz@uwo.ca"], "sections": [{"heading": null, "text": "\u00a0"}, {"heading": "1. INTRODUCTION", "text": "On-time delivery, budget control and high quality products are critical goals for software project management. The cost, quality and delivery of software projects are affected by the accuracy of software effort estimation (Nassif et al., 2010). Software engineering practices have specific characteristics that differentiate this field from traditional engineering. In particular, various factors affect software effort estimation in organizations and projects, including inconsistent software processes and measurement definitions in projects, substantial diversity among projects, and extreme differences in product sizes. Consequently, these situations create challenges in the practice of software effort estimation, making it difficult to yield a high degree of accuracy in estimation. Many studies have focused on developing software cost estimation models and techniques. These include algorithmic models, such as COCOMO (Boehm, 1981) (Briand and Wieczorek, 2002), SLIM (Putnam, 1978), SEER-SEM (Galorath and Evans, 2006), machine learning techniques. These models and techniques have been introduced and used in the\nsoftware industry. However, modeling accuracy affects the quality of estimation. Hence, these studies are aimed at improving the predictive performance of current models by introducing new techniques and methodologies.\nSEER-SEM (Galorath and Evans, 2006) appeals to software practitioners because of its powerful estimation features. It has been developed with a combination of estimation functions for performing various estimations. Created specifically for software effort estimation, the SEER-SEM model was influenced by the framework of Putnam (Putnam, 1978). As one of the algorithmic estimation models, SEER-SEM has two main limitations on effort estimation. First, there are over fifty input parameters related to the various factors of software projects, which might increase the complexity of SEERSEM, especially for managing the uncertainty from these inputs. Second, the specific details of SEER-SEM increase the difficulty of discovering the non-linear relationship between the parameter inputs and the corresponding outputs. Overall, these two major limitations can lead to a lower accuracy in effort estimation by SEER-SEM. This research attempts to\nresolve the main limitation of the SEER-SEM effort estimation model. For accurately estimating software effort, neural network and fuzzy logic approaches are adopted to create a neuro-fuzzy model, which is subsequently combined with SEER-SEM. The Adaptive Neuro-Fuzzy Inference System (ANFIS) (Jang, 1993) is used as the architecture of each neuro-fuzzy sub-model.\nSome researchers have used machine learning techniques to improve the accuracy of software cost estimation. This includes (Huang et al., 2007) and (Huang et al., 2004) who used a neuro-fuzzy model to improve the accuracy of the COCOMO Model, other work such as (Nassif et al., 2013), (Nassif et al., 2012) and (Nassif et al., 2011) have been used to improve the accuracy of the Use Case Point Model using Machine Learning techniques and (Du et al., 2010) who used a neural network with fuzzy logic model to improve the SEER-SEM algorithm; however, the evaluation conducted in the latter work was poor.\nIn this work, the proposed model is evaluated using a cross-validation technique on published industrial data. Experiments have shown that our model surpasses the SEER-SEM model by 18% based on the Mean Magnitude of Relative Error (MMRE) criterion. Our model also outperforms the SEER-SEM model using other evaluation criteria such as MdMRE, PRED(0.3), PRED(0.5) and MSE but the most significant improvement was based on the MMRE criterion.\nThe remainder of the paper is organized as follows: Section 2 describes the proposed hybrid intelligent model. The evaluation of the model is presented in Section 3. Section 4 highlights the threats that might have deteriorated the validity of our model. Finally, Section 5 concludes the paper."}, {"heading": "2. A HYBRID INTELLIGENT MODEL FOR SEER-SEM", "text": ""}, {"heading": "2.1. SEER-SEM Model", "text": "The SEER-SEM model was proposed by Galorath in 1988 (Galorath and Evans, 2006). This model was motivated by the Putnam\u2019s model (SLIM) and the COCOMO model. The main inputs and outputs of the SEER-SEM model are depicted in Fig. 1.\nThe SEER-SEM effort estimation is calculated by the following equation:\n0.393469 .E K \nWhere E is the development effort in persons-year and K is the total Life-cycle effort including development and maintenance (in person-years). K is directly proportional to staffing complexity and software size (KLOC) and inversely proportional to the effective technology used to develop the project."}, {"heading": "2.2. Neuro-Fuzzy Model", "text": "The structure of the hybrid model used in this paper is composed of inputs related to SEER-SEM algorithm, a neuro-fuzzy bank, corresponding values of inputs, an algorithmic model (SEER-SEM in this case, but any algorithmic model can fit here), and outputs for effort estimation. The algorithmic model with the neuro-fuzzy bank can be considered as the major parts of the proposed model. The inputs of the proposed model are rating levels, which can be linguistic terms such as Low, Nominal, or High or continuous values. The main structure of the proposed model is depicted in Fig. 2.\nWhere PRi are the inputs of the SEER-SEM model and NFi are the neuro-fuzzy sub-models as shown in Fig. 3.\n\u00a0 Fig.\u00a01.\u00a0Inputs and Outputs of the SEER-SEM Model\n\u00a0\n3. MODEL\u00a0EVALUATION\u00a0 After incorporating the neuro-fuzzy model with SEERSEM in the previous section, this section evaluates the proposed model by using industrial project data points. In our research, 99 project data points are used to train and test the performance of the proposed model. Among them, 93 published NASA project data points are from 6 centers and categorized to three development modes: embedded, organic, and semidetached. The rest are 6 industrial project data points (Panlilio-Yap and Ho, 1994). COCOMO 81 projects were transformed to COCOMO II then to SEER-SEM. The matching between SEER-SEM parameters and COCOMO drivers is depicted in Appendix A.\nTo assess the accuracy of the proposed model, we have used common evaluation criteria used in software estimation which are MMRE, MdMRE, PRED(x) and MSE.  MMRE: This is a very common criterion used to\nevaluate software cost estimation models (Briand et al., 1999). The Magnitude of Relative Error (MRE) for each observation i can be obtained as:\n| |\ni i\ni i\nActual Effort Predicted Effort MRE Actual Effort  \nMMRE can be achieved through averaging the summation of MRE over N observations:\n1\n1 N\ni i\nMMRE MRE N\n\n \nMMRE is a common method used for evaluation prediction models; however, this method has been criticized by others such as (Foss et al., 2003), (Shepperd and Schofield, 1997) and (Myrtveit and Stensrud, 2012). For this reason, we used a statistical significant test to compare between the median of two samples based on the residuals. Since the residuals were not normally distributed, the non-parametric statistical test MannWhitney U has been used to assess the statistical significance between different prediction models.  MdMRE: One of the disadvantages of the MRE is that\nit is sensitive to outliers. MdMRE has been used as another criterion because it is less sensitive to outliers.\n( )iMdMRE median MRE\n PRED(x): The prediction level (PRED) is used as a complimentary criterion to MMRE. PRED calculates the ratio of a project\u2019s MMRE that falls into the selected range (x) out of the total projects.\nPRED (x) can be described as:\n  . kPRED x n \nwhere k is the number of projects where MREi \u2264x and n is the total number of observations. In this work, PRED(0.30) and PRED(0.50) have been used.  MSE: The Mean Squared Error (MSE) is the mean of\nthe square of the differences between the actual and the predicted efforts.\n2\n1 ( _ _ )\n.\nN\ni i i Actual Effort Estimated Effort MSE\nN \n  \nThe estimation accuracy is directly proportional to PRED (x) and inversely proportional to MMRE, MdMRE and MSE. Experiments were conducted using the crossvalidation technique to compare the original SEER-SEM model with the proposed neuro-fuzzy model (Fig. 2). The inputs of the models are software size and a set of parameters as explained in Section 2. The output of the models is software effort. The results of the evaluation criteria (MMRE, MdMRE, PRED and MSE), as well as the Mann-Whitney U test are reported in Table 1. The interval plot at 95% confidence level of the MMRE and the Boxplot are shown in Fig. 4 and Fig. 5, respectively.\nFig.3. NFi model\nTable 1. shows that the proposed neuro-fuzzy SEERSEM model improves the original SEER-SEM model by 18% based on the MMRE criterion. Moreover, the values of MdMRE, PRED(30) and PRED(50) have been improved by 2%, 3% and 5%, respectively. Furthermore, we see significant improvement in the original SEERSEM based on the MSE criterion. To better evaluate the significance of the proposed neuro-fuzzy SEER-SEM model, the Mann-Whitney U test was used. The p value reported is 0.0183. This indicates that the proposed model is significant at the 95% confidence level.\nFig. 4. and Fig. 5. also confirm the significance of the proposed model. Fig. 4. shows the interval plot of the MMRE for both models. The centre of the interval represents the MMRE value. Upper and lower edges represent the maximum and minimum values at 95%\nconfidence interval. Regarding interval plots, the shorter the width of the interval is, the better the model. This shows that the prediction accuracy of the proposed neuro-fuzzy SEER-SEM is better than the original SEER-SEM model. In Fig. 5., we see that in the SEERSEM model, there are more points outside the Boxplot upper bound. This indicates that the neuro-fuzzy model is better."}, {"heading": "4. Threats to Validity", "text": "One of the main threats that might have affected the validity of this work is the scarce of the projects with SEER-SEM parameters. This is because SEER-SEM is a proprietary tool and SEER-SEM projects are not available online. For this reason, COCOMO projects were transformed to SEER-SEM and this indeed deteriorated the quality of the projects. Another threat we have encountered was the limited number of the projects used in this investigation. The accuracy of the model would have increased if the number of the projects was greater. The large number of inputs to the model also has an adverse impact on the accuracy of the results. Limiting the number of the model\u2019s inputs not only decrease the complexity of the model, but also increases the accuracy."}, {"heading": "5. CONCLUSIONS", "text": "Software engineering practitioners have always pursued the accuracy of software effort estimation for reducing costs, avoiding management risks, and achieving timely delivery. Through the continuous endeavor of researchers, various models and methodologies have been developed and introduced in software effort estimation. The main techniques adopted for effort estimation are briefly introduced in this article; these models are classified as experience-based, learningoriented, model-based, regression-based, and composite techniques. Although many methodologies have been developed and adopted by practitioners, several significant difficulties still exist during software effort estimation, including the non-linear relationship between software size and estimation factors as well as the fact that software processes and techniques are evolving rapidly.\nOne of the techniques used by software effort estimation is soft computing, which assists in improving the estimation performance with its attractive and unique features. Specifically, fuzzy logic and neural networks are capable of effectively dealing with imprecise and uncertain information in addition to the complex, nonlinear relationships of parameters. However, there are also shortcomings to the use of fuzzy logic and neural networks. For instance, a fuzzy system with a significant amount of complex rules cannot necessarily guarantee that the results will be meaningful, and the if-then rules are not adequately flexible for dealing with external changes. Moreover, neural networks contain the inherent feature of operating like a \u201cblack box\u201d, which makes it difficult to prove that the model is working to the expectations of users. Thus, the neuro-fuzzy approach contains the advantages of fuzzy logic and neural networks as well as limits the disadvantages of these two techniques.\nThe proposed framework in this study is a combination of the machine-learning technique and the algorithmic effort estimation model, SEER-SEM. This framework is based on the unique architecture of the neuro-fuzzy model; in particular, ANFIS is a neuro-fuzzy technique adopted by the model. The neuro-fuzzy features of the model provide it with the advantages of strong adaptability with the capability of learning, less sensitivity for imprecise and uncertain inputs, and strong knowledge integration. On the whole, these techniques provide a good generalization for the proposed estimation model.\nThe aims of this research are to evaluate the prediction performance of the proposed neuro-fuzzy model with SEER-SEM in software estimation practices and to apply the proposed architecture that combines the neuro-fuzzy technique with different algorithmic models. Overall, the evaluation results indicate that estimation with our proposed neuro-fuzzy model containing SEER-SEM is more efficient than the estimation results that only use the SEER-SEM algorithm.\nIn this work, four different evaluation criteria have been used. These include the MMRE, MdMRE, PRED and MSE. Results show that the proposed model outperforms the original SEER-SEM model in the four criteria. The non-parametric Mann-Whitney U test was also used and results show that the proposed model is statistically significant at 95% confidence level.\nAlthough several studies have already attempted to improve the general soft computing framework, there is still room for future work. First, the algorithm of the SEER-SEM effort estimation model is more complex than that of the COCOMO model. Prior research that combines neuro-fuzzy techniques with the COCOMO model demonstrates greater improvements in the prediction performance. Hence, the proposed general soft computing framework should be evaluated with other\ncomplex algorithms. Secondly, the datasets in our research are not from the original projects whose estimations are performed by SEER-SEM. When the SEER-SEM estimation datasets are available, more cases can be completed effectively for evaluating the performance of the neuro-fuzzy model. Also, future work will include studying the importance of each of the model\u2019s inputs to see how much it is statistically significant.\nIn summary, this research demonstrates that combining the neuro-fuzzy model with the SEER-SEM effort estimation algorithm produces unique characteristics and performance improvements. Effort estimation using this framework is a good reference for the other popular estimation algorithmic models.\nREFERENCES\nBoehm, B W, 1981. Software Engineering Economics. Prentice-Hall, ISBN: 9780138221225. Briand, L.C., Emam, K.E., Surmann, D., Wieczorek, I., 1999. An assessment and comparison of common software cost estimation modeling techniques. ICSE'99, pp: 313-322. DOI: http://doi.ieeecomputersociety.org/10.1109/ICSE.199 9.841022. Briand, L.C., Wieczorek, I. 2002. Resource Estimation in Software Engineering. Encyclopedia of Software Engineering, 2: 1160-1196. DOI: 10.1002/0471028959.sof282. Du, W.L., Ho, D., Capretz, L.F. 2010. Improving Software Effort Estimation Using Neuro-Fuzzy Model with SEER-SEM. Global Journal of Computer Science and Technology, 10: 52-64. http://computerresearch.org/stpr/index.php/gjcst/artic le/view/394/357. Foss, T., Stensrud, E., Kitchenham, B., Myrtveit, I. 2003. A Simulation Study of the Model Evaluation Criterion MMRE. IEEE Transactions on Software Engineering, 29: 985-995. DOI: http://doi.ieeecomputersociety.org/10.1109/TSE.2003 .1245300. Galorath, D D, Evans, M.W., 2006. Software Sizing, Estimation, and Risk Management. Auerbach Publications, Boston, MA, USA. ISBN: 0849335930. Huang, X., Ho, D., Ren, J., Capretz, L.F. 2004. A neurofuzzy tool for software estimation. Chicago, IL, USA, pp: 520-525. DOI: 10.1109/ICSM.2004.1357862. Huang, X., Ho, D., Ren, J., Capretz, L.F. 2007. Improving the COCOMO model using a neuro-fuzzy approach. Applied Soft Computing, 7: 29-40. DOI: http://dx.doi.org/10.1016/j.asoc.2005.06.007. Jang, J.-.R. 1993. ANFIS: adaptive-network-based fuzzy inference system. IEEE Transactions on Systems, Man, and Cybernetics, 23: 665-685. DOI: 10.1109/21.256541.\n\u00a0\nMyrtveit, I., Stensrud, E. 2012. Validity and reliability of evaluation procedures in comparative studies of effort prediction models. Empirical Software Engineering, 17: 23-33. DOI: 10.1007/s10664-011-9183-7. Nassif, A.B., Capretz, L.F., Ho, D., 2010. Software Estimation in the Early Stages of the Software Life Cycle. Nanded, Maharashtra, India, pp: 5-13. Nassif, A.B., Capretz, L.F., Ho, D., 2011. Estimating Software Effort Based on Use Case Point Model Using Sugeno Fuzzy Inference System. Florida, USA, pp: 393-398. DOI: 10.1109/ICTAI.2011.64. Nassif, A.B., Capretz, L.F., Ho, D., 2012. Software Effort Estimation in the Early Stages of the Software Life Cycle Using a Cascade Correlation Neural Network Model. Kyoto, Japan, pp: 589-594. DOI: 10.1109/SNPD.2012.40. Nassif, A.B., Ho, D., Capretz, L.F. 2013. Towards an Early Software Estimation Using Log-linear Regres-\nsion and a Multilayer Perceptron Model. Journal of Systems and Software, 86: 144-160. DOI: 10.1016/j.jss.2012.07.050. Panlilio-Yap, N., Ho, D., 1994. Deploying Software Estimation Technology and Tools: the IBM SWS Toronto Lab Experience. University of Southern California, Los Angeles. Putnam, L.H. 1978. A General Empirical Solution to the Macro Software Sizing and Estimating Problem. IEEE Transactions on Software Engineering, 4: 345- 361. DOI: 10.1109/TSE.1978.231521. Shepperd, M., Schofield, C. 1997. Estimating software project effort using analogies. IEEE Transactions on Software Engineering, 23: 736-743. DOI: 10.1109/32.637387.\nAPPENDIX A\nParameters SEER-SEM Rating COCOMO Rating Drivers/Factors\nACAP\nVLo-\nACAP VLo VLo Low Low Nom Nom\nHi Hi\nVHi VHi\nAEXP\nVLo VLo\nAPEX Low Low Nom Nom Hi Hi VHi\nVHi\nPCAP\nVLo-\nPCAP VLo VLo Low Low\nNom Nom Hi Hi\nVHi VHi\nLEXP\nVLo VLo\nLTEX\nLow Low Nom Nom\nHi VHi Hi\nXHi VHi\nDEXP\nVLo VLo PLEX Low Low Nom Nom\nParameters SEER-SEM Rating COCOMO Rating Drivers/Factors\nHi VHi Hi\nXHi VHi\nTEXP\nVLo VLo\nPLEX\nLow Low Nom Nom\nHi VHi Hi\nXHi VHi\nMODP\nVLo\nPMAT Low VLo Nom Low\nHi Nom VHi Hi, VHi, XHi\nTOOL\nVLo VLo\nTOOL\nLow Lo\nNom Nom\nNom+\nHi Hi Hi+\nVHi VHi\nMULT\nNom VHi, XHi\nSITE Hi Nom, Hi\nVHi Low\nXHi VLo\nDSVL TSVL\nLow\nPVOL Nom Low\nHi Nom VHi Hi\nXHi VHi\nSPEC\nVLo VLo\nRELY\nLow Low\nNom Nom\nHi Hi\nVHi VHi\nREUS\nLow\nRUSE Nom Nom Hi Hi\nVHi VHi XHi) XHi\nAPPL\nVLo\nCPLX\nLow Low\nNom\nNom Hi\nHi VHi\n\u00a0\nParameters SEER-SEM Rating COCOMO Rating Drivers/Factors\nXHi\nMEMC\nNom Nom\nSTOR Hi Hi\nVHi VHi\nXHi XHi\nTIMC\nNom Nom, Hi\nTIME Hi VHi\nVHi XHi\nXHi\nStaffing\nVLo VLo\nCPLX\nLow Low\nNom Nom\nNom+\nHi Hi\nVHi VHi\nVHi+\nXHi XHi\nTURN\nVLo Low TURN\n(COCOMO 81 cost driver)\nLow, Nom Nom\nHi, VHi Hi\nVHi\nDSVL\nLow Low\nVMVH (COCOMO 87\nCost Driver)\nNom Nom\nHi Hi\nVHi VHi\nEHi\nTSVL\nLow Low\nVMVT (COCOMO 87\nCost Driver)\nNom Nom\nHi Hi\nVHi VHi\nEHi"}], "references": [{"title": "Software Engineering Economics", "author": ["B W Boehm"], "venue": null, "citeRegEx": "Boehm,? \\Q1981\\E", "shortCiteRegEx": "Boehm", "year": 1981}, {"title": "Validity and reliability", "author": ["I. Myrtveit", "E. Stensrud"], "venue": null, "citeRegEx": "Myrtveit and Stensrud,? \\Q2012\\E", "shortCiteRegEx": "Myrtveit and Stensrud", "year": 2012}, {"title": "A General Empirical Solution", "author": ["fornia", "L.H. Los Angeles. Putnam"], "venue": null, "citeRegEx": "fornia and Putnam,? \\Q1978\\E", "shortCiteRegEx": "fornia and Putnam", "year": 1978}], "referenceMentions": [{"referenceID": 0, "context": "These include algorithmic models, such as COCOMO (Boehm, 1981) (Briand and Wieczorek, 2002), SLIM (Putnam, 1978), SEER-SEM (Galorath and Evans, 2006), machine learning techniques.", "startOffset": 49, "endOffset": 62}, {"referenceID": 1, "context": ", 2003), (Shepperd and Schofield, 1997) and (Myrtveit and Stensrud, 2012).", "startOffset": 44, "endOffset": 73}], "year": 2015, "abstractText": "Accurate software development effort estimation is critical to the success of software projects. Although many techniques and algorithmic models have been developed and implemented by practitioners, accurate software development effort prediction is still a challenging endeavor in the field of software engineering, especially in handling uncertain and imprecise inputs and collinear characteristics. In this paper, a hybrid intelligent model combining a neural network model integrated with fuzzy model (neuro-fuzzy model) has been used to improve the accuracy of estimating software cost. The performance of the proposed model is assessed by designing and conducting evaluation with published project and industrial data. Results have shown that the proposed model demonstrates the ability of improving the estimation accuracy by 18% based on the Mean Magnitude of Relative Error (MMRE) criterion.", "creator": "PScript5.dll Version 5.2.2"}}}