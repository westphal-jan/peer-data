{"id": "1602.02261", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Feb-2016", "title": "End-to-End Goal-Driven Web Navigation", "abstract": "7-furlong We yaphe propose undershirts a redblacks goal - naulakha driven hsv-7 web navigation techno as a benchmark task s4 for evaluating cheeseburger an 100km agent with isbn abilities to kekko understand 66,300 natural language and ishak plan on woodcutter partially observed curtails environments. In genero this bride-to-be challenging task, an pardner agent navigates through a bridezilla web 14:36 site, which case-study is represented as hsichih a acquistion graph consisting patricide of web pages as nodes and scharbauer hyperlinks as directed crafts edges, distorts to hypoxanthine find 1-forms a web 1952-54 page meite in which shelters a query 2105 appears. The agent is zhenjiang required payasam to skate-off have hxg4 sophisticated snowboard high - tr\u0103ng level reasoning based hepatology on pisharody natural presdient languages and rasterization efficient sequential rabeh decision making noooo capability to succeed. gambians We penetrations release a belgians software macoto tool, called zrenjanin WebNav, that automatically transforms a website into plaze this goal - comedian driven web carreteras navigation task, leatherman and as an example, 74.74 we martinsyde make WikiNav, a foregone dataset helwys constructed bergville from khanty-mansiysk the English Wikipedia adad containing approximately 5 million lemack articles and signaling more noad than manjula 12 million queries soundblaster for fsv training. We 4-channel evaluate 174th two merletti different sleith@ajc.com agents sahnoun based on neural tanigaki networks kaloyev on pesa the diar WikiNav and provide the gwiazdami human takemasa performance. allocating Our results shifu show the me\u0111imurje difficulty of the rusher task for both humans vasos and jebara machines. With brainless this tofaga benchmark, louise we olifants expect yasunari faster kvirikashvili progress sungaipenuh in t-way developing sanxia artificial susceptibility agents with sofl\u00e1 natural language gara understanding growling and moorfield planning showboats skills.", "histories": [["v1", "Sat, 6 Feb 2016 14:53:02 GMT  (700kb,D)", "https://arxiv.org/abs/1602.02261v1", null], ["v2", "Fri, 20 May 2016 16:26:58 GMT  (746kb,D)", "http://arxiv.org/abs/1602.02261v2", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["rodrigo nogueira", "kyunghyun cho"], "accepted": true, "id": "1602.02261"}, "pdf": {"name": "1602.02261.pdf", "metadata": {"source": "CRF", "title": "End-to-End Goal-Driven Web Navigation", "authors": ["Rodrigo Nogueira", "Kyunghyun Cho"], "emails": ["rodrigonogueira@nyu.edu", "kyunghyun.cho@nyu.edu"], "sections": [{"heading": "1 Introduction", "text": "In recent years, there have been many exciting advances in building an artificial agent, which can be trained with one learning algorithm, to solve many relatively large-scale, complicated tasks (see, e.g., [8, 10, 6].) In much of these works, target tasks were computer games such as Atari games [8] and racing car game [6].\nThese successes have stimulated researchers to apply a similar learning mechanism to language-based tasks, such as multi-user dungeon (MUD) games [9, 4]. Instead of visual perception, an agent perceives the state of the world by its written description. A set of actions allowed to the agent is either fixed or dependent on the current state. This type of task can efficiently evaluate the agent\u2019s ability of not only in planning but also language understanding.\nWe, however, notice that these MUD games do not exhibit the complex nature of natural languages to the full extent. For instance, the largest game world tested by Narasimhan et al. [9] uses a vocabulary of only 1340 unique words, and the largest game tested by He et al. [4] uses only 2258 words. Furthermore, the description of a state at each time step is almost always limited to the visual description of the current scene, lacking any use of higher-level concepts present in natural languages.\nIn this paper, we propose a goal-driven web navigation as a large-scale alternative to the text-based games for evaluating artificial agents with natural language understanding and planning capability. The proposed goal-driven web navigation consists of the whole website as a graph, in which the web pages are nodes and hyperlinks are directed edges. An agent is given a query, which consists of one or more sentences taken from a randomly selected web page in the graph, and navigates the network,\nar X\niv :1\n60 2.\n02 26\n1v 2\n[ cs\n.A I]\n2 0\nM ay\n2 01\nstarting from a predefined starting node, to find a target node in which the query appears. Unlike the text-based games, this task utilizes the existing text as it is, resulting in a large vocabulary with a truly natural language description of the state. Furthermore, the task is more challenging as the action space greatly changes with respect to the state in which the agent is.\nWe release a software tool, called WebNav, that converts a given website into a goal-driven web navigation task. As an example of its use, we provide WikiNav, which was built from English Wikipedia. We design artificial agents based on neural networks (called NeuAgents) trained with supervised learning, and report their respective performances on the benchmark task as well as the performance of human volunteers. We observe that the difficulty of a task generated by WebNav is well controlled by two control parameters; (1) the maximum number of hops from a starting to a target node Nh and (2) the length of query Nq .\nFurthermore, we extend the WikiNav with an additional set of queries that are constructed from Jeopardy! questions, to which we refer by WikiNav-Jeopardy. We evaluate the proposed NeuAgents against the three search-based strategies; (1) SimpleSearch, (2) Apache Lucene and (3) Google Search API. The result in terms of document recall indicates that the NeuAgents outperform those search-based strategies, implying a potential for the proposed task as a good proxy for practical applications such as question-answering and focused crawling."}, {"heading": "2 Goal-driven Web Navigation", "text": "A task T of goal-driven web navigation is characterized by\nT = (A, sS ,G, q, R,\u2126). (1)\nThe world in which an agent A navigates is represented as a graph G = (N , E). The graph consists of a set of nodes N = {si}NNi=1 and a set of directed edges E = {ei,j} connecting those nodes. Each node represents a page of the website, which, in turn, is represented by the natural language text D(si) in it. There exists an edge going from a page si to sj if and only if there is a hyperlink in D(si) that points to sj . One of the nodes is designated as a starting node sS from which any navigation begins. A target node is the one whose natural language description contains a query q, and there may be more than one target node.\nAt each time step, the agent A reads the natural language description D(st) of the current node in which the agent has landed. At no point, the whole world, consisting of the nodes and edges, nor its structure or map (graph structure without any natural language description) is visible to the agent, thus making this task partially observed.\nOnce the agent A reads the description D(si) of the current node si, it can take one of the actions available. A set of possible actions is defined as a union of all the outgoing edges ei,\u00b7 and the stop action, thus making the agent have state-dependent action space.\nEach edge ei,k corresponds to the agent jumping to a next node sk, while the stop action corresponds to the agent declaring that the current node si is one of the target nodes. Each edge ei,k is represented by the description of the next node D(sk). In other words, deciding which action to take is equivalent to taking a peek at each neighboring node and seeing whether that node is likely to lead ultimately to a target node.\nThe agent A receives a reward R(si, q) when it chooses the stop action. This task uses a simple binary reward, where\nR(si, q) = { 1, if q \u2286 D(si) 0, otherwise\nConstraints It is clear that there exists an ultimate policy for the agent to succeed at every trial, which is to traverse the graph breadth-first until the agent finds a node in which the query appears. To avoid this kind of degenerate policies, the task includes a set of four rules/constraints \u2126:\n1. An agent can follow at most Nn edges at each node. 2. An agent has a finite memory of size smaller than T . 3. An agent moves up to Nh hops away from sS .\nThe first constraint alone prevents degenerate policies, such as breadth-first search, forcing the agent to make good decisions as possible at each node. The second one further constraints ensure that the agent does not cheat by using earlier trials to reconstruct the whole graph structure (during test time) or to store the entire world in its memory (during training.) The third constraint, which is optional, is there for computational consideration. The fourth constraint is included because the agent is allowed to read the content of a next node."}, {"heading": "3 WebNav: Software", "text": "As a part of this work, we build and release a software tool which turns a website into a goal-driven web navigation task.1 We call this tool WebNav. Given a starting URL, the WebNav reads the whole website, constructs a graph with the web pages in the website as nodes. Each node is assigned a unique identifier si. The text content of each node D(si) is a cleaned version of the actual HTML content of the corresponding web page. The WebNav turns intra-site hyperlinks into a set of edges ei,j .\nIn addition to transforming a website into a graph G from Eq. (1), the WebNav automatically selects queries from the nodes\u2019 texts and divides them into training, validation, and test sets. We ensure that there is no overlap among three sets by making each target node, from which a query is selected, belongs to only one of them.\nEach generated example is defined as a tuple\nX = (q, s\u2217, p\u2217) (2)\nwhere q is a query from a web page s\u2217, which was found following a randomly selected path p\u2217 = (sS , . . . , s\n\u2217). In other words, the WebNav starts from a starting page sS , random-walks the graph for a predefined number of steps (Nh/2, in our case), reaches a target node s\u2217 and selects a query q from D(s\u2217). A query consists of Nq sentences and is selected among the top-5 candidates in the target node with the highest average TF-IDF, thus discouraging the WebNav from choosing a trivial query.\nFor the evaluation purpose alone, it is enough to use only a query q itself as an example. However, we include both one target node (among potentially many other target nodes) and one path from the starting node to this target node (again, among many possible connecting paths) so that they can be exploited when training an agent. They are not to be used when evaluating a trained agent."}, {"heading": "4 WikiNav: A Benchmark Task", "text": "With the WebNav, we built a benchmark goal-driven navigation task using Wikipedia as a target website. We used the dump file of the English Wikipedia from September 2015, which consists of more than five million web pages. We built a set of separate tasks with different levels of difficulty by varying the maximum number of allowed hops Nh \u2208 {4, 8, 16} and the size of query Nq \u2208 {1, 2, 4}. We refer to each task by WikiNav-Nh-Nq .\nFor each task, we generate training, validation and test examples from the pages half as many hops away from a starting page as the maximum number of hops allowed.2 We use \u201cCategory:Main topic classifications\u201d as a starting node sS .\n1 The source code and datasets are publicly available at https://drive.google.com/folderview?id= 0B5LbsF7OcHjqUFhWQ242bzdlTWc&usp=sharing.\n2 This limit is an artificial limit we chose for computational reasons.\nAs a minimal cleanup procedure, we excluded meta articles whose titles start with \u201cWikipedia\u201d. Any hyperlink that leads to a web page outside Wikipedia is removed in advance together with the following sections: \u201cReferences\u201d, \u201cExternal Links\u201d, \u201cBibliography\u201d and \u201cPartial Bibliography\u201d.\nIn Table 2, we present basic per-article statistics of the English Wikipedia. It is evident from these statistics that the world of WikiNav-Nh-Nq is large and complicated, even after the cleanup procedure.\nWe ended up with a fairly small dataset for WikiNav-4-*, but large for WikiNav-8-* and WikiNav-16-*. See Table 1 for details."}, {"heading": "4.1 Related Work: Wikispeedia", "text": "This work is indeed not the first to notice the possibility of a website, or possibly the whole web, as a world in which intelligent agents explore to achieve a certain goal. One most relevant recent work to ours is perhaps Wikispeedia from [14, 12, 13].\nWest et al. [14, 12, 13] proposed the following game, called Wikispeedia. The game\u2019s world is nearly identical to the goal-driven navigation task proposed in this work. More specifically, they converted \u201cWikipedia for Schools\u201d, which contains approximately 4,000 articles as of 2008, into a graph whose nodes are articles and directed edges are hyperlinks. From this graph, a pair of nodes is randomly selected and provided to an agent.\nThe agent\u2019s goal is to start from the first node, navigate the graph and reach the second node. Similarly to the WikiNav, the agent has access to the text content of the current nodes and all the immediate neighboring nodes. One major difference is that the target is given as a whole article, meaning that there is a single target node in the Wikispeedia while there may be multiple target nodes in the proposed WikiNav.\nFrom this description, we see that the goal-driven web navigation is a generalization and re-framing of the Wikispeedia. First, we constrain a query to contain less information, making it much more difficult for an agent to navigate to a target node. Furthermore, a major research question by West and Leskovec [13] was to \u201cunderstand how humans navigate and find the information they are looking for ,\u201d whereas in this work we are fully focused on proposing an automatic tool to build a challenging goal-driven tasks for designing and evaluating artificial intelligent agents.\n5 WikiNav-Jeopardy: Jeopardy! on WikiNav\nOne of the potential practical applications utilizing the goal-drive navigation is question-answering based on world knowledge. In this Q&A task, a query is a question, and an agent navigates a given information network, e.g., website, to retrieve an answer. In this section, we propose and describe an extension of the WikiNav, in which query-target pairs are constructed from actual Jeopardy! question-answer pairs. We refer to this extension of WikiNav by WikiNav-Jeopardy.\nWe first extract all the question-answer pairs from J! Archive3, which has more than 300k such pairs. We keep only those pairs whose answers are titles of Wikipedia articles, leaving us with 133k pairs. We divide those pairs into 113k training, 10k validation, and 10k test examples while carefully\n3 http://www.j-archive.com\nensuring that no article appears in more than one partition. Additionally, we do not shuffle the original pairs to ensure that the train and test examples are from different episodes.\nFor each training pair, we find one path from the starting node \u201cMain Topic Classification\u201d to the target node and include it for supervised learning. For reference, the average number of hops to the target node is 5.8, the standard deviation is 1.2, and the maximum and minimum are 2 and 10, respectively. See Table 3 for sample query-answer pairs."}, {"heading": "6 NeuAgent: Neural Network based Agent", "text": ""}, {"heading": "6.1 Model Description", "text": "Core Function The core of the NeuAgent is a parametric function fcore that takes as input the content of the current node \u03c6c(si) and a query \u03c6q(q), and that returns the hidden state of the agent. This parametric function fcore can be implemented either as a feedforward neural network fff:\nht = fff(\u03c6c(si), \u03c6q(q))\nwhich does not take into account the previous hidden state of the agent or as a recurrent neural network frec:\nht = frec(ht\u22121, \u03c6c(si), \u03c6q(q)).\nWe refer to these two types of agents by NeuAgent-FF and NeuAgent-Rec, respectively. For the NeuAgent-FF, we use a single tanh layer, while we use long short-term memory (LSTM) units [5], which have recently become de facto standard, for the NeuAgent-Rec.\nfar. We apply a softmax normalization on the unnormalized probabilities to obtain the probability distribution over all the possible actions at the current node si.\nThe NeuAgent then selects its next action based on this action probability distribution (Eqs. (3) and (4)). If the stop action is chosen, the NeuAgent returns the current node as an answer and receives a reward R(si, q), which is one if correct and zero otherwise. If the agent selects one of the outgoing edges, it moves to the selected node and repeats this process of reading and acting.\nSee Fig. 1 for a single step of the described NeuAgent.\nContent Representation The NeuAgent represents the content of a node si as a vector \u03c6c(si) \u2208 Rd. In this work, we use a continuous bag-of-words vector for each document:\n\u03c6c(si) = 1\n|D(si)| |D(si)|\u2211 k=1 ek.\nEach word vector ek is from a pretrained continuous bag-of-words model [7]. These word vectors are fixed throughout training.\nQuery Representation In the case of a query, we consider two types of representation. The first one is a continuous bag-of-words (BoW) vector, just as used for representing the content of a node. The other one is a dynamic representation based on the attention mechanism [2].\nIn the attention-based query representation, the query is first projected into a set of context vectors. The context vector of the k-th query word is\nck = k+u/2\u2211 k\u2032=k\u2212u/2 Wk\u2032ek\u2032 ,\nwhere Wk\u2032 \u2208 Rd\u00d7d and ek\u2032 are respectively a trainable weight matrix and a pretrained word vector. u is the window size. Each context vector is scored at each time step t by \u03b2tk = fatt(ht\u22121, ck) w.r.t. the previous hidden state of the NeuAgent, and all the scores are normalized to be positive and sum to one, i.e., \u03b1tk =\nexp(\u03b2tk)\u2211|q| l=1 exp(\u03b2 t l ) . These normalized scores are used as the coefficients in computing\nthe weighted-sum of query words to result in a query representation at time t:\n\u03c6q(q) = 1\n|q| |q|\u2211 k=1 \u03b1tkck.\nLater, we empirically compare these two query representations."}, {"heading": "6.2 Inference: Beam Search", "text": "Once the NeuAgent is trained, there are a number of approaches to using it for solving the proposed task. The most naive approach is simply to let the agent make a greedy decision at each time step, i.e., following the outgoing edge with the highest probability arg maxk log p(ei,k| . . .). A better approach is to exploit the fact that the agent is allowed to explore up to Nn outgoing edges per node. We use a simple, forward-only beam search with the beam width capped at Nn. The beam search simply keeps the Nn most likely traces, in terms of log p(ei,k| . . .), at each time step."}, {"heading": "6.3 Training: Supervised Learning", "text": "In this paper, we investigate supervised learning, where we train the agent to follow an example trace p\u2217 = (sS , . . . , s\n\u2217) included in the training set at each step (see Eq. (2)). In this case, the cost per training example is\nCsup = \u2212 log p(\u2205|p\u2217, q)\u2212 |p\u2217|\u2211 k=1 log p(p\u2217k|p\u2217<k, q). (5)\nThis per-example training cost is fully differentiable with respect to all the parameters of the neural network, and we use stochastic gradient descent (SGD) algorithm to minimize this cost over the whole training set, where the gradients can be computed by backpropagation [11]. This allows the entire model to be trained in an end-to-end fashion, in which the query-to-target performance is optimized directly."}, {"heading": "7 Human Evaluation", "text": "One unique aspect of the proposed task is that it is very difficult for an average person who was not trained specifically for finding information by navigating through an information network. There are a number of reasons behind this difficulty. First, the person must be familiar with, via training, the graph structure of the network, and this often requires many months, if not years, of training. Second, the person must have in-depth knowledge of a broad range of topics in order to make a connection via different concepts between the themes and topics of a query to a target node. Third, each trial requires the person carefully to read the whole content of the nodes as she navigates, which is a time-consuming and exhausting job.\nWe asked five volunteers to try up to 20 four-sentence-long queries4 randomly selected from the test sets of WikiNav-{4, 8, 16}-4 datasets. They were given up to two hours, and they were allowed to\n4 In a preliminary study with other volunteers, we found that, when the queries were shorter than 4, they were not able to solve enough trials for us to have meaningful statistics.\nchoose up to the same maximum number of explored edges per node Nn as the NeuAgents (that is, Nn = 4), and also were given the option to give up. The average reward was computed as the fraction of correct trials over all the queries presented."}, {"heading": "8 Results and Analysis", "text": ""}, {"heading": "8.1 WikiNav", "text": "We report in Table 4 the performance of the NeuAgent-FF and NeuAgent-Rec models on the test set of all nine WikiNav-{4, 8, 16}-{1, 2, 4} datasets. In addition to the proposed NeuAgents, we also report the results of the human evaluation.\nWe clearly observe that the level of difficulty is indeed negatively correlated with the query length Nq but is positively correlated with the maximum number of allowed hops Nh. The latter may be considered trivial, as the size of the search space grows exponentially with respect to Nh, but the former is not. The former negative correlation confirms that it is indeed easier to solve the task with more information in a query. We conjecture that the agent requires more in-depth understanding of natural languages and planning to overcome the lack of information in the query to find a path toward a target node.\nThe NeuAgent-FF and NeuAgent-Rec shares similar performance when the maximum number of allowed hops is small (Nh = 4), but NeuAgent-Rec ((a) vs. (b)) performs consistently better for higher Nh, which indicates that having access to history helps in long-term planning tasks. We also observe that the larger and deeper NeuAgent-Rec ((b) vs (c)) significantly outperforms the smaller one, when a target node is further away from the starting node sS .\nThe best performing model in (d) used the attention-based query representation, especially as the difficulty of the task increased (Nq \u2193 and Nh \u2191), which supports our claim that the proposed task of goal-driven web navigation is a challenging benchmark for evaluating future progress. In Fig. 2, we present an example of how the attention weights over the query words dynamically evolve as the model navigates toward a target node.\nThe human participants generally performed worse than the NeuAgents. We attribute this to a number of reasons. First, the NeuAgents are trained specifically on the target domain (Wikipedia), while the human participants have not been. Second, we observed that the volunteers were rapidly exhausted from reading multiple articles in sequence. In other words, we find the proposed benchmark, WebNav, as a good benchmark for machine intelligence but not for comparing it against human intelligence."}, {"heading": "8.2 WikiNav-Jeopardy", "text": "Settings We test the best model from the previous experiment (NeuAgent-Rec with 8 layers of 2048 LSTM units and the attention-based query representation) on the WikiNav-Jeopardy. We evaluate two training strategies. The first strategy is straightforward supervise learning, in which we train a NeuAgent-Rec on WikiNav-Jeopardy from scratch. In the other strategy, we pretrain a NeuAgent-Rec first on the WikiNav-16-4 and finetune it on WikiNav-Jeopardy.\nWe compare the proposed NeuAgent against three search strategies. The first one, SimpleSearch, is a simple inverted index based strategy. SimpleSearch scores each Wikipedia article by the TF-IDF weighted sum of words that co-occur in the articles and a query and returns top-K articles. Second, we use Lucene, a popular open source information retrieval library, in its default configuration on the whole Wikipedia dump. Lastly, we use Google Search API5, while restricting the domain to wikipedia.org.\nEach system is evaluated by document recall at K (Recall@K). We vary K to be 1, 4 or 40. In the case of the NeuAgent, we run beam search with width set to K and returns all the K final nodes to compute the document recall.\nResult and Analysis In Table 5, we report the results on WikiNav-Jeopardy. The proposed NeuAgent clearly outperforms all the three search-based strategies, when it was pretrained on the WikiNav-16-4. The superiority of the pretrained NeuAgent is more apparent when the number of candidate documents is constrained to be small, implying that the NeuAgent is able to accurately rank a correct target article. Although the NeuAgent performs comparably to the other search-based strategy even without pretraining, the benefit of pretraining on the much larger WikiNav is clear.\nWe emphasize that these search-based strategies have access to all the nodes for each input query. The NeuAgent, on the other hand, only observes the nodes as it visits during navigation. This success clearly demonstrates a potential in using the proposed NeuAgent pretrained with a dataset compiled by the proposed WebNav for the task of focused crawling [3, 1], which is an interesting problem on its own, as much of the content available on the Internet is either hidden or dynamically generated [1]."}, {"heading": "9 Conclusion", "text": "In this work, we describe a large-scale goal-driven web navigation task and argue that it serves as a useful test bed for evaluating the capabilities of artificial agents on natural language understanding and planning. We release a software tool, called WebNav, that compiles a given website into a goal-driven web navigation task. As an example, we construct WikiNav from Wikipedia using WebNav. We extend WikiNav with Jeopardy! questions, thus creating WikiNav-Jeopardy. We evaluate various neural net based agents on WikiNav and WikiNav-Jeopardy. Our results show that more sophisticated agents have better performance, thus supporting our claim that this task is well suited to evaluate future progress in natural language understanding and planning. Furthermore, we show that our agent pretrained on WikiNav outperforms two strong inverted-index based search engines on the WikiNav-Jeopardy. These empirical results support our claim on the usefulness of the proposed task and agents in challenging applications such as focused crawling and question-answering.\n5 https://cse.google.com/cse/"}, {"heading": "Acknowledgments", "text": "KC thanks the support by Facebook, Google (Google Faculty Award 2016) and NVidia (GPU Center of Excellence 2015-2016). RN is funded by Coordena\u00e7\u00e3o de Aperfeicoamento de Pessoal de N\u00edvel Superior (CAPES)."}], "references": [{"title": "Deepbot: a focused crawler for accessing hidden web content. In Proceedings of the 3rd international workshop on Data enginering issues in E-commerce and services: In conjunction with", "author": ["Manuel \u00c1lvarez", "Juan Raposo", "Alberto Pan", "Fidel Cacheda", "Fernando Bellas", "V\u00edctor Carneiro"], "venue": "ACM Conference on Electronic Commerce", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2007}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "In ICLR 2015,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Focused crawling: a new approach to topic-specific web resource discovery", "author": ["Soumen Chakrabarti", "Martin Van den Berg", "Byron Dom"], "venue": "Computer Networks,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1999}, {"title": "Deep reinforcement learning with an unbounded action space", "author": ["Ji He", "Jianshu Chen", "Xiaodong He", "Jianfeng Gao", "Lihong Li", "Li Deng", "Mari Ostendorf"], "venue": "arXiv preprint arXiv:1511.04636,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1997}, {"title": "Evolving deep unsupervised convolutional networks for vision-based reinforcement learning", "author": ["Jan Koutn\u00edk", "J\u00fcrgen Schmidhuber", "Faustino Gomez"], "venue": "In Proceedings of the 2014 conference on Genetic and evolutionary computation,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2014}, {"title": "Efficient estimation of word representations in vector space", "author": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean"], "venue": "arXiv preprint arXiv:1301.3781,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2013}, {"title": "Human-level control through deep reinforcement learning", "author": ["Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Andrei A Rusu", "Joel Veness", "Marc G Bellemare", "Alex Graves", "Martin Riedmiller", "Andreas K Fidjeland", "Georg Ostrovski"], "venue": "Nature, 518(7540):529\u2013533,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2015}, {"title": "Language understanding for textbased games using deep reinforcement learning", "author": ["Karthik Narasimhan", "Tejas Kulkarni", "Regina Barzilay"], "venue": "arXiv preprint arXiv:1506.08941,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Neuroevolution in games: State of the art and open challenges", "author": ["Sebastian Risi", "Julian Togelius"], "venue": "arXiv preprint arXiv:1410.7326,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Learning representations by backpropagating errors", "author": ["David Rumelhart", "Geoffrey Hinton", "Ronald Williams"], "venue": "Nature, pages 323\u2013533,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1986}, {"title": "Automatic versus human navigation in information networks", "author": ["Robert West", "Jure Leskovec"], "venue": "In ICWSM,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2012}, {"title": "Human wayfinding in information networks", "author": ["Robert West", "Jure Leskovec"], "venue": "In 21st International World Wide Web Conference,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2012}, {"title": "Wikispeedia: An online game for inferring semantic distances between concepts", "author": ["Robert West", "Joelle Pineau", "Doina Precup"], "venue": "In IJCAI,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2009}], "referenceMentions": [{"referenceID": 7, "context": ", [8, 10, 6].", "startOffset": 2, "endOffset": 12}, {"referenceID": 9, "context": ", [8, 10, 6].", "startOffset": 2, "endOffset": 12}, {"referenceID": 5, "context": ", [8, 10, 6].", "startOffset": 2, "endOffset": 12}, {"referenceID": 7, "context": ") In much of these works, target tasks were computer games such as Atari games [8] and racing car game [6].", "startOffset": 79, "endOffset": 82}, {"referenceID": 5, "context": ") In much of these works, target tasks were computer games such as Atari games [8] and racing car game [6].", "startOffset": 103, "endOffset": 106}, {"referenceID": 8, "context": "These successes have stimulated researchers to apply a similar learning mechanism to language-based tasks, such as multi-user dungeon (MUD) games [9, 4].", "startOffset": 146, "endOffset": 152}, {"referenceID": 3, "context": "These successes have stimulated researchers to apply a similar learning mechanism to language-based tasks, such as multi-user dungeon (MUD) games [9, 4].", "startOffset": 146, "endOffset": 152}, {"referenceID": 8, "context": "[9] uses a vocabulary of only 1340 unique words, and the largest game tested by He et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4] uses only 2258 words.", "startOffset": 0, "endOffset": 3}, {"referenceID": 13, "context": "One most relevant recent work to ours is perhaps Wikispeedia from [14, 12, 13].", "startOffset": 66, "endOffset": 78}, {"referenceID": 11, "context": "One most relevant recent work to ours is perhaps Wikispeedia from [14, 12, 13].", "startOffset": 66, "endOffset": 78}, {"referenceID": 12, "context": "One most relevant recent work to ours is perhaps Wikispeedia from [14, 12, 13].", "startOffset": 66, "endOffset": 78}, {"referenceID": 13, "context": "[14, 12, 13] proposed the following game, called Wikispeedia.", "startOffset": 0, "endOffset": 12}, {"referenceID": 11, "context": "[14, 12, 13] proposed the following game, called Wikispeedia.", "startOffset": 0, "endOffset": 12}, {"referenceID": 12, "context": "[14, 12, 13] proposed the following game, called Wikispeedia.", "startOffset": 0, "endOffset": 12}, {"referenceID": 12, "context": "Furthermore, a major research question by West and Leskovec [13] was to \u201cunderstand how humans navigate and find the information they are looking for ,\u201d whereas in this work we are fully focused on proposing an automatic tool to build a challenging goal-driven tasks for designing and evaluating artificial intelligent agents.", "startOffset": 60, "endOffset": 64}, {"referenceID": 4, "context": "For the NeuAgent-FF, we use a single tanh layer, while we use long short-term memory (LSTM) units [5], which have recently become de facto standard, for the NeuAgent-Rec.", "startOffset": 98, "endOffset": 101}, {"referenceID": 6, "context": "Each word vector ek is from a pretrained continuous bag-of-words model [7].", "startOffset": 71, "endOffset": 74}, {"referenceID": 1, "context": "The other one is a dynamic representation based on the attention mechanism [2].", "startOffset": 75, "endOffset": 78}, {"referenceID": 10, "context": "This per-example training cost is fully differentiable with respect to all the parameters of the neural network, and we use stochastic gradient descent (SGD) algorithm to minimize this cost over the whole training set, where the gradients can be computed by backpropagation [11].", "startOffset": 274, "endOffset": 278}, {"referenceID": 2, "context": "This success clearly demonstrates a potential in using the proposed NeuAgent pretrained with a dataset compiled by the proposed WebNav for the task of focused crawling [3, 1], which is an interesting problem on its own, as much of the content available on the Internet is either hidden or dynamically generated [1].", "startOffset": 168, "endOffset": 174}, {"referenceID": 0, "context": "This success clearly demonstrates a potential in using the proposed NeuAgent pretrained with a dataset compiled by the proposed WebNav for the task of focused crawling [3, 1], which is an interesting problem on its own, as much of the content available on the Internet is either hidden or dynamically generated [1].", "startOffset": 168, "endOffset": 174}, {"referenceID": 0, "context": "This success clearly demonstrates a potential in using the proposed NeuAgent pretrained with a dataset compiled by the proposed WebNav for the task of focused crawling [3, 1], which is an interesting problem on its own, as much of the content available on the Internet is either hidden or dynamically generated [1].", "startOffset": 311, "endOffset": 314}], "year": 2016, "abstractText": "We propose a goal-driven web navigation as a benchmark task for evaluating an agent with abilities to understand natural language and plan on partially observed environments. In this challenging task, an agent navigates through a website, which is represented as a graph consisting of web pages as nodes and hyperlinks as directed edges, to find a web page in which a query appears. The agent is required to have sophisticated high-level reasoning based on natural languages and efficient sequential decision-making capability to succeed. We release a software tool, called WebNav, that automatically transforms a website into this goal-driven web navigation task, and as an example, we make WikiNav, a dataset constructed from the English Wikipedia. We extensively evaluate different variants of neural net based artificial agents on WikiNav and observe that the proposed goal-driven web navigation well reflects the advances in models, making it a suitable benchmark for evaluating future progress. Furthermore, we extend the WikiNav with questionanswer pairs from Jeopardy! and test the proposed agent based on recurrent neural networks against strong inverted index based search engines. The artificial agents trained on WikiNav outperforms the engined based approaches, demonstrating the capability of the proposed goal-driven navigation as a good proxy for measuring the progress in real-world tasks such as focused crawling and question-answering.", "creator": "LaTeX with hyperref package"}}}