{"id": "1602.07019", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Feb-2016", "title": "Sentence Similarity Learning by Lexical Decomposition and Composition", "abstract": "Most conventional sentence similarity kellman methods bratsk only focus on similar parts mermen of two nebbiolo input sentences, 1.4762 and orenburg simply rissoa ignore the killybegs dissimilar parts, demerged which usually 49.79 give us some tartarus clues c31 and semantic aquilegia meanings about tuitupou the sentences. In this blazers work, easyphoto we propose a30 a waman model elhauge to take into seife account gillars both u2009 the similarities and 11.21 dissimilarities stubbington by decomposing and composing shoffner lexical semantics over sentences. bian The 19,120 model represents 28,958 each seminar word as homunculi a lumo vector, about and calculates a semantic matching vector chriqui for nazan each teklemariam word yadong based reappropriated on all words savvier in su the furius other zvonomir sentence. Then, each cardinalidae word contrived vector coriolis is story-tellers decomposed into kawaihae a souder similar 1.5780 component colposcopy and hetauda a goldfields-esperance dissimilar acreages component based on the istiklal semantic fadillah matching vector. nigella After nine-time this, zagier a two - sowood channel non-stationary CNN 102.60 model laurant is bitmapped employed to capture features by composing purpa the vertebra similar gigatons and dissimilar cover-up components. Finally, a hawwa similarity score connolly is estimated rsm03 over the racquets composed feature sien vectors. Experimental bamforth results vesic show patha that our model gets the novoa state - frontiersman of - heizer the - jarahi art performance on rise/fall the comanchero answer roht sentence adequately selection task, sandhill and achieves eastpointe a pettirossi comparable result saben on xle the thunderchief paraphrase identification 19.38 task.", "histories": [["v1", "Tue, 23 Feb 2016 03:08:50 GMT  (587kb,D)", "http://arxiv.org/abs/1602.07019v1", null], ["v2", "Fri, 14 Jul 2017 19:51:10 GMT  (719kb,D)", "http://arxiv.org/abs/1602.07019v2", "In Proceedings of Coling 2016"]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["zhiguo wang", "haitao mi", "abraham ittycheriah"], "accepted": false, "id": "1602.07019"}, "pdf": {"name": "1602.07019.pdf", "metadata": {"source": "CRF", "title": "Sentence Similarity Learning by Lexical Decomposition and Composition", "authors": ["Zhiguo Wang"], "emails": ["abei}@us.ibm.com"], "sections": [{"heading": null, "text": "Most conventional sentence similarity methods only focus on similar parts of two input sentences, and simply ignore the dissimilar parts, which usually give us some clues and semantic meanings about the sentences. In this work, we propose a model to take into account both the similarities and dissimilarities by decomposing and composing lexical semantics over sentences. The model represents each word as a vector, and calculates a semantic matching vector for each word based on all words in the other sentence. Then, each word vector is decomposed into a similar component and a dissimilar component based on the semantic matching vector. After this, a twochannel CNN model is employed to capture features by composing the similar and dissimilar components. Finally, a similarity score is estimated over the composed feature vectors. Experimental results show that our model gets the state-of-the-art performance on the answer sentence selection task, and achieves a comparable result on the paraphrase identification task."}, {"heading": "1 Introduction", "text": "Sentence similarity is a fundamental metric to measure the degree of likelihood between a pair of sentences. It plays an important role for a variety of tasks in both NLP and IR communities. For example, in paraphrase identification task, sentence similarity is used to determine whether two sentences are paraphrase or not (Yin and Schu\u0308tze, 2015; He et al., 2015). For question answering and information retrieval tasks, sentence similarities between queryanswer pairs are used for assessing the relevance and\nranking all the candidate answers (Severyn and Moschitti, 2015; Wang and Ittycheriah, 2015).\nHowever, sentence similarity learning has following issues:\n1. there is a lexical gap between semantically equivalent sentences. Take the E1 and E2 in Table 1 for example, they have the similar meaning but with different lexicons.\n2. semantic similarity should be measured at different levels of granularity (word-level, phraselevel and syntax-level). E.g., \u201cnot related\u201d in E2 is an indivisible phrase when matching with \u201cirrelevant\u201d in E1 (shown in square brackets).\n3. the dissimilarity (shown in angle brackets) between two sentences is also a significant clue (Qiu et al., 2006). For example, by judging the dissimilar parts, we can easily identify that E3 and E5 share the similar meaning \u201cThe study is about salmon\u201d, because \u201csockeye\u201d belongs to the salmon family, and \u201cflounder\u201d does not. Whereas the meaning of E4 is quite different from E3, which emphasizes \u201cThe study is about red (a special kind of) salmon\u201d, because both \u201csockeye\u201d and \u201ccoho\u201d are in the salmon family. How can we extract and utilize those information becomes another issue.\nar X\niv :1\n60 2.\n07 01\n9v 1\n[ cs\n.C L\n] 2\n3 Fe\nb 20\n16\nIn order to handle the issues above, researchers have been working on sentence similarity algorithms for a long time. To bridge the lexical gap (issue 1), some word similarity metrics were proposed to match different but semantically related words. Examples include knowledge-based metrics (Resnik, 1995) and corpus-based metrics (Jiang and Conrath, 1997; Yin and Schu\u0308tze, 2015; He et al., 2015). To measure sentence similarity from various granularities (issue 2), researchers have explored features extracted from n-grams, continuous phrases, discontinuous phrases, and parse trees (Yin and Schu\u0308tze, 2015; He et al., 2015; Heilman and Smith, 2010). The third issue did not get much attention in the past, the only related work of Qiu et al. (2006) explored the dissimilarity between sentences in a pair for paraphrase identification task, but they require human annotations in order to train a classifer, and their performance is still below the state of the art.\nIn this paper, we propose a novel model to tackle all these challenges jointly by decomposing and composing lexical semantics over sentences. Given a sentence pair, the model represents each word as a low-dimensional vector (issue 1), and calculates a semantic matching vector for each word based on all words in the other sentence (issue 2). Then based on the semantic matching vector, each word vector is decomposed into two components: a similar component and a dissimilar component (issue 3). We use similar components of all the words to represent the similar parts of the sentence pair, and dissimilar components of every word to model the dissimilar parts explicitly. After this, a two-channel CNN operation is performed to compose the similar and dissimilar components into a feature vector (issues 2 and 3). Finally, the composed feature vector is utilized to predict the sentence similarity. Experimental results on two tasks show that our model the state-of-the-art performance on the answer sentence selection task, and achieves a comparable result on the paraphrase identification task.\nIn following parts, we start with a brief overview of our model (Section 2), followed by the details of our end-to-end implementation (Section 3). Then we evaluate our model on answer sentence selection and paraphrase identifications tasks (Section 4)."}, {"heading": "2 Model Overview", "text": "Figure 1 shows an overview of our sentence similarity model. Given a pair of sentences S and T , our task is to calculate a similarity score sim(S, T ) in following steps:\nWord Representation. Word embedding of Mikolov et al. (2013) is an effective way to handle the lexical gap issue in the sentence similarity task, as it represents each word with a distributed vector, and words appearing in similar contexts tend to have similar meanings (Mikolov et al., 2013). With those pre-trained embeddings, we transform S and T into sentence matrixes S = [s1, ..., si, ..., sm] and T = [t1, ..., tj , ..., tn], where si and tj are ddimension vectors of the corresponding words, and m and n are sentence length of S and T respectively.\nSemantic Matching. In order to judge the similarity between two sentences, we need to check whether each semantic unit in one sentence is cov-\nered by the other sentence, or vice versa. For example, in Table 1, to check whether E2 is a paraphrase of E1, we need to know the single word \u201cirrelevant\u201d in E1 is matched or covered by the phrase \u201cnot related\u201d in E2. In our model, we treat each word as a primitive semantic unit, and calculate a semantic matching vector s\u0302i for each word si by composing part or full word vectors in the other sentence T . In this way, we can match a word si to a word or phrase in T . Similarly, for the reverse direction, we also calculate all semantic matching vectors t\u0302j in T .\ns\u0302i = fmatch(si, T ) \u2200si \u2208 S t\u0302j = fmatch(tj , S) \u2200tj \u2208 T\n(1)\nWe explore different fmatch functions latter in Section 3.\nDecomposition. After the semantic matching phase, we have the semantic matching vectors of s\u0302i and t\u0302j . We interpret s\u0302i (or t\u0302j) as a semantic coverage of word si (or tj) by the sentence T (or S). However, it is not necessary that all the semantics of si (or tj) are fully covered by s\u0302i (or t\u0302j). Take the E1 and E2 in Table 1 for example, the word \u201csockeye\u201d in E1 is only partially matched by the word \u201csalmon\u201d (the similar part) in E2, as the full meaning of \u201csockeye\u201d is \u201cred salmon\u201d (the semantic meaning of \u201cred\u201d is the dissimilar part). Motivated by this phenomenon, our model further decomposes word si (or tj), based on its semantic matching vector s\u0302i (or t\u0302j), into two components: similar component s+i (or t + j ) and dissimilar component s\u2212i (or t \u2212 j ). Formally, we define the decomposition function as:\n[s+i ; s \u2212 i ] = fdecomp(si, s\u0302i) \u2200si \u2208 S\n[t+j ; t \u2212 j ] = fdecomp(tj , t\u0302j) \u2200tj \u2208 T\n(2)\nComposition. Given a similar component matrix S+ = [s+1 , ..., s + m] (or T + = [t+1 , ..., t + n ]) and a dissimilar component matrix S\u2212 = [s\u22121 , ..., s \u2212 m] (or T\u2212 = [t\u22121 , ..., t \u2212 n ]), our goal in this step is how to utilize those information. Besides the suggestion from Qiu et al. (2006) that the significance of the dissimilar parts alone between two sentences has a great effect of their similarity, we also think that the dissimilar and similar components have strong connections. For example, in Table 1, if we only look at the dissimilar or similar part alone, it is hard to\njudge which one between E4 and E5 is more similar to E3. We can easily identify that E5 is more similar to E3, when we consider both the similar and dissimilar parts. Therefore, our model composes the similar component matrix and dissimilar component matrix into a feature vector ~S (or ~T ) with the composition function:\n~S = fcomp(S +, S\u2212) ~T = fcomp(T +, T\u2212)\n(3)\nSimilarity assessing. In the final stage, we concatenate the two feature vectors (~S and ~T ) and predict the final similarity score:\nsim(S, T ) = fsim(~S, ~T ) (4)"}, {"heading": "3 An End-to-End Implementation", "text": "Section 2 gives us a glance of our model. In this section, we describe details of each phase."}, {"heading": "3.1 Semantic Matching Functions", "text": "This subsection describes our specifications for the semantic matching function fmatch in Eq. (1). The goal of fmatch is to generate a semantic matching vector s\u0302i for si by composing the vectors from T .\nFor a sentence pair S and T , we first calculate a similarity matrix Am\u00d7n, where each element ai,j \u2208 Am\u00d7n computes the cosine similarity between words si and tj as\nai,j = sTi tj\n\u2016si\u2016 \u00b7 \u2016tj\u2016 \u2200si \u2208 S, \u2200tj \u2208 T. (5)\nThen, we define three different semantic matching functions over Am\u00d7n:\nfmatch(si, T ) =  \u2211n j=0 ai,jtj\u2211n j=0 ai,j global\u2211k+w j=k\u2212w ai,jtj\u2211k+w j=k\u2212w ai,j local-w\ntk max\n(6)\nwhere k = argmaxj ai,j . The idea of the global function is to consider all word vectors tj in T . A semantic matching vector s\u0302i is a weighted sum vector of all words tj in T , where each weight is the normalized word similarity ai,j . The max function moves to the other extreme. It generates the semantic matching vector by selecting the most similar\nword vector tk from T . The local-w function takes a compromise between global and max, where w indicates the size of the window to consider centered at k (the most similar word position). So the semantic matching vector is a weighted average vector from tk\u2212w to tk+w."}, {"heading": "3.2 Decomposition Functions", "text": "This subsection describes the implementations for the decomposition function fdecomp in Eq. (2). The intention of fdecomp is to decompose a word vector sj based on its semantic matching vector s\u0302j into a similar component s+i and a dissimilar component s\u2212i , where s + i indicates the semantics of si covered by s\u0302i and s\u2212i indicates the uncovered part. We implement three types of decomposition function: rigid, linear and orthogonal.\nThe rigid decomposition only adapts to the max version of fmatch. First, it detects whether there is an exactly matched word in the other sentence, or si equal to s\u0302i. If yes, the vector si is dispatched to the similar component s+i , and the dissimilar component is assigned with a zero vector 0. Otherwise, the vector si is assigned to the dissimilar component s\u2212i . Eq. (7) gives the formal definition:\n[s+i = si; s \u2212 i = 0] if si = s\u0302i [s+i = 0; s \u2212 i = si] otherwise\n(7)\nThe motivation for the linear decomposition is that the more similar between si and s\u0302i, the higher proportion of si should be assigned to the similar component. First, we calculate the cosine similarity \u03b1 between si and s\u0302i. Then, we decompose si linearly based on \u03b1. Eq. (8) gives the corresponding definition:\n\u03b1 = sTi s\u0302i \u2016si\u2016 \u00b7 \u2016s\u0302i\u2016 s+i = \u03b1si s\u2212i = (1\u2212 \u03b1)si\n(8)\nThe orthogonal decomposition is to decompose a vector in the geometric space. Based on the semantic matching vector s\u0302i, our model decomposes si into a parallel component and a perpendicular component. Then, the parallel component is viewed as\nthe similar component s+i , and perpendicular component is taken as the dissimilar component s\u2212i . Eq. (9) gives the concrete definitions.\ns+i = si \u00b7 s\u0302i s\u0302i \u00b7 s\u0302i s\u0302i parallel s\u2212i = si \u2212 s + i perpendicular\n(9)"}, {"heading": "3.3 Composition Functions", "text": "The aim of the composition function fcomp in Eq. (3) is to extract features from both the similar component matrix and the dissimilar component matrix. We also want to acquire similarities and dissimilarities of various granularity during the composition phase. Inspired from Kim (2014), we utilize a twochannel convolutional neural networks (CNN) and design filters based on various order of n-grams, e.g., unigram, bigram and trigram.\nThe CNN model involves two sequential operations: convolution and max-pooling. For the convolution operation, we define a list of filters {wo}. The shape of each filter is d \u00d7 h, where d is the dimension of word vectors and h is the window size. Each filter is applied to two patches (a window size h of vectors) from both similar and dissimilar channels, and generates a feature. Eq. (10) expresses this process.\nco,i = f(wo \u2217 S+[i:i+h] + wo \u2217 S \u2212 [i:i+h] + bo) (10)\nwhere the operation A \u2217 B sums up all elements in B with the corresponding weights in A, S+[i:i+h] and S\u2212[i:i+h] indicate the patches from S\n+ and S\u2212, bo is a bias term and f is a non-linear function (we use tanh in this work). We apply this filter to all possible patches, and produce a series of features ~co = [co,1, co,2, ..., co,O]. The number of features in ~co depends on the shape of the filter wo and the length of the input sentence. To deal with variable feature size, we perform a max-pooling operation over ~co by selecting the maximum value co = max ~co. Therefore, after these two operations, each filter generates only one feature. We define several filters by varying the window size and the initial values. Eventually, a vector of features is captured by composing the two component matrixes, and the feature dimension is equal to the number of filters."}, {"heading": "3.4 Similarity Assessment Function", "text": "The similarity assessment function fsim in Eq. (4) predicts a similarity score by taking two feature vectors as input. We employ a linear function to sum up all the features and apply a sigmoid function to constrain the similarity within the range [0, 1]."}, {"heading": "3.5 Training", "text": "We train our sentence similariy model by maximizing the likelihood on a training set. Each training instance in the training set is represented as a triple (Si, Ti, Li), where Si and Ti are a pair of sentences, and Li \u2208 {0, 1} indicates the similarity between them. We assign Li = 1 if Ti is a paraphrase of Si for the paraphrase identification task, or Ti is a correct answer for Si for the answer sentence selection task. Otherwise, we assign Li = 0. We implement the mathematical expressions with Theano (Bastien et al., 2012) and use Adam (Kingma and Ba, 2014) for optimization."}, {"heading": "4 Experiment", "text": ""}, {"heading": "4.1 Experimental Setting", "text": "We evaluate our model on two tasks: answer sentence selection and paraphrase identification. The answer sentence selection task is to rank a list of candidate answers based on their similarities to a question sentence, and the performance is measured by mean average precision (MAP) and mean reciprocal rank (MRR). We experiment on two datasets: QASent and WikiQA. Table 2 summarises the statistics of the two datasets, where QASent (Wang et al., 2007) was created from the TREC QA track, and WikiQA (Yang et al., 2015) is constructed from real queries of Bing and Wikipedia. The paraphrase identification task is to detect whether two sentences are paraphrases based on the similarity between them. The metrics include the accuracy and the positive class F1 score. We experiment on the Microsoft Research Paraphrase corpus (MSRP) (Dolan et al., 2004), which includes 2753 true and 1323 false instances in the training set, and 1147 true and 578 false instances in the test set. We build a development set by randomly selecting 100 true and 100 false instances from the training set. In all experiments, we set the size of word vector dimension as d =300, and pre-train the vectors with the\nword2vec toolkit (Mikolov et al., 2013) on the English Gigaword (LDC2011T07)."}, {"heading": "4.2 Model Properties", "text": "There are several alternative options in our model, e.g., the semantic matching functions, the decomposition operations, and the filter types. The choice of these options may affect the final performance. In this subsection, we present some experiments to demonstrate the properties of our model, and find a good configuration that we use to evaluate our final model. All the experiments in this subsection were performed on the QASent dataset and evaluated on the development set.\nFirst, we evaluated the effectiveness of various semantic matching functions. We switched the semantic matching functions among {max, global, locall}, where l \u2208 {1, 2, 3, 4}, and fixed the other options as: the linear decomposition, the filter types including {unigram, bigram, trigram}, and 500 filters for each type. Figure 2 presents the results. We found that the max function worked better than the global function on both MAP and MRR. By increasing the window size, the local-l function acquired progressive improvements when the window size is smaller than 4. But after we enlarged the window size to 4, the performance dropped. The local-3 function worked better than the max function in term of the MAP, and also got a comparable MRR. Therefore, we use the local-3 function in the following experiments.\nSecond, we studied the effect of various decomposition operations. We varied the decomposition operation among {rigid, linear, orthogonal}, and kept the other options unchanged. Figure 3 shows the performance. We found that the rigid operation got the worst result. This is reasonable, because the\nSentence \u00a0Similarity \u00a0Learning \u00a0by \u00a0Word \u00a0Vector \u00a0Decomposition \u00a0and \u00a0Composition \u00a0  \u00a0 1. Rigid \u00a0decomposition \u00a0model \u00a0  \u00a0  \u00a0 2. Orthogonal \u00a0decomposition \u00a0 2.1 weighted-\u2010summing \u00a0 2.2 maximum \u00a0  \u00a0 Experiments \u00a0\n1. Network \u00a0type: \u00a0CNN1, \u00a0CNN2, \u00a0CNN3, \u00a0CNN4, \u00a0CNN5, \u00a0CNN6 \u00a0 2. Num_filter \u00a0: \u00a0 3. Data \u00a0set: \u00a0paraphrase \u00a0rege \u00a0\n \u00a0  \u00a0\n \u00a0\n \u00a0  \u00a0\n0.73\n0.75\n0.77\n0.79\n0.81\n0.83\n0.85\nMAP MRR\nmax\nglobal\nlocal-1\nlocal-2\nlocal-3\nlocal-4\n0.6\n0.65\n0.7\n0.75\n0.8\n0.85\n0.9\nMAP MRR\nrigid\nlinear\northogonal\nFigure 2: Influence of semantic matching functions.\nSentence \u00a0Similarity \u00a0Learning \u00a0by \u00a0Word \u00a0Vector \u00a0Decomposition \u00a0and \u00a0Composition \u00a0  \u00a0 i i  \u00a0decompos tion \u00a0model \u00a0  \u00a0  \u00a0 . rt ogonal \u00a0decomposition \u00a0 2.1 weighted-\u2010su ming \u00a0 2.2 maximum \u00a0  \u00a0 Experiments \u00a0\n1. Network \u00a0type: \u00a0CNN1, \u00a0CNN2, \u00a0CNN3, \u00a0CNN4, \u00a0CNN5, \u00a0CNN6 \u00a0 2. Num_filter \u00a0: \u00a0 3. Data \u00a0set: \u00a0paraphrase \u00a0rege \u00a0\n \u00a0  \u00a0\n \u00a0\n \u00a0\n \u00a0\n0.73\n. 5\n7\n0.79\n0.81\n0.83\n0.85\nMAP MRR\nmax\nglobal\nlocal-1\nlocal-2\nlocal-3\nlocal-4\n0.6\n0.65\n0.7\n0.75\n0.8\n0.85\n0.9\nMAP MRR\nrigid\nlinear\northogonal\nFigure 3: Influence of decomposition functions.\nrigid operation decomposes word vectors by exactly matching words. The orthogonal operation got a similar MAP as the linear operation, and it worked better in term of MRR. Therefore, we choose the orthogonal operation in the following experiments.\nThird, we tested the influence of various filter types. We constructed 5 groups of filters: win-1 contains only the unigram filters, win-2 contains both unigram and bigram filters, win-3 contains all the filters in win-2 plus trigram filters, win-4 extends filters in win-3 with 4-gram filters, and win-5 adds 5- gram filters into win-4. We generate 500 filters for each filter type (with different initial values). Experimental results are shown in Figure 4. At the beginning, adding higher-order ngram filters was helpful for the performance. The performance reached to the peak, when we used the win-3 filters. After that, adding more complex filters decreased the performance. Therefore, the trigram is the best granularity for our model. In the following experiments, we uti-\n \u00a0\n0.72\n0.74\n0.76\n0.78\n0.8\n0.82\n0.84\n0.86\n0.88\nMAP MRR\nwin-1\nwin-2\nwin-3\nwin-4\nwin-5\nFigure 4: Influence of filter types in the composition function.\nlize filter types in win-3."}, {"heading": "4.3 Comparing with State-of-the-art Models", "text": "In this subsection, we evaluated our model on the test sets of QASent, WikiQA and MSRP.\nQASent dataset. Table 3 presents the performances of the state-of-the-art systems and our model, where the performances were evaluated with the standard trec eval-8.0 script 1. Given a pair of sentences, Severyn and Moschitti (2015) employed a CNN model to compose each sentence into a vector separately, and joined the two sentence vectors to compute the sentence similarity. Because only the sentence-level granularity was used, the performance is much lower (the second row of Table 3). After adding some word overlap features between the two sentences, the performance was improved significantly (the third row of Table 3). Therefore, the lower-level granularity is an indispensable factor for a good performance. Wang and Ittycheriah (2015) conducted word alignment for a sentence pair based on word vectors, and measured the sentence similarity based on a couple of word alignment features. They got a slightly better performance (the fourth row of Table 3), which indicates that the vector representation for words is helpful to bridging the lexical gap problem. Our model makes use of all these useful factors and also considers the dissimilarities of a sentence pair. We can see that our model got a significantly better performance than all the other work (the last row).\n1http://trec.nist.gov/trec eval/\nWikiQA dataset. Table 4 presents the results of our model and several state-of-the-art models. Yang et al. (2015) constructed the dataset and reimplemented several baseline models. The best performance (shown at the second row of Table 4) was acquired by a bigram CNN model combining with the word overlap features. Miao et al. (2015) models the sentence similarity by enriching LSTMs with a latent stochastic attention mechanism. The corresponding performance is given at the third row of Table 4. Yin et al. (2015) introduced the attention mechanism into the CNN model, and captured the best performance (the fourth row of Table 4). The semantic matching phase in our model is similar to the attention mechanism. But different from the previous models, our model utilizes both the similarity and dissimilarity simultaneously. The last row of Table 4 shows that our model is more effective than the other models.\nMSRP dataset. Table 5 summarized the results from our model and several state-of-the-art models. Yin and Schu\u0308tze (2015) employed a CNN model\nto learn sentence representations on multiple level of granularity and modeled interaction features at each level for a pair of sentences. They obtained their best performance by pretraining the model on a language modeling task (the 3rd row of Table 5). However, their model heavily depends on the pretraining strategy. Without pretraining, they got a much worse performance (the second row of Table 5). He et al. (2015) proposed a similar model to Yin and Schu\u0308tze (2015). Similarly, they also used a CNN model to extract features at multiple levels of granularity. Differently, they utilized some extra annotated resources, e.g., embeddings from part-ofspeech (POS) tags and PARAGRAM vectors trained from the Paraphrase Database (Ganitkevitch et al., 2013). Their model outperformed Yin and Schu\u0308tze (2015) without the need of pretraining (the sixth row of Table 5). However, the performance was reduced after removing the extra resources (the fourth and fifth rows of Table 5). Yin et al. (2015) applied their attention-based CNN model on this dataset. By adding a couple of sparse features and using a layerwise training strategy, they got a pretty good performance. Comparing to these neural network based models, our model obtained a comparable performance (the last row of Table 5) without using any sparse features, extra annotated resources and specific training strategies. However, the best performance so far on this dataset is obtained by Ji and Eisenstein (2013). In their model, they just utilized several hand-crafted features in a Support Vector Machine (SVM) model. Therefore, the deep learning methods still have a long way to go for this task."}, {"heading": "5 Related Work", "text": "The semantic matching functions in subsection 3.1 are inspired from the attention-based neural machine translation (Bahdanau et al., 2014; Luong et al., 2015). However, most of the previous work using the attention mechanism in only LSTM models. Whereas our model introduces the attention mechanism into the CNN model. A similar work is the attention-based CNN model proposed by Yin et al. (2015). They first build an attention matrix for a sentence pair, and then directly take the attention matrix as a new channel of the CNN model. Differently, our model uses the attention matrix (or similarity ma-\ntrix) to decompose the original sentence matrix into a similar component matrix and a dissimilar component matrix, and then feeds these two matrixes into a two-channel CNN model. The model can then focus much on the interactions between similar and dissimilar parts of a sentence pair."}, {"heading": "6 Conclusion", "text": "In this work, we proposed a model to assess sentence similarity by decomposing and composing lexical semantics. To bridge the lexical gap problem, our model represents each word with its context vector. To extract features from both the similarity and dissimilarity of a sentence pair, we designed several methods to decompose the word vector into a similar component and a dissimilar component. To extract features at multiple levels of granularity, we employed a two-channel CNN model and equipped it with multiple types of ngram filters. Experimental results show that our model is quite effective on both the answer sentence selection task and the paraphrase identification task ."}, {"heading": "Acknowledgments", "text": ""}], "references": [{"title": "Neural machine translation by jointly learning to align and translate", "author": ["Kyunghyun Cho", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1409.0473", "citeRegEx": "Bahdanau et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2014}, {"title": "Theano: new features and speed improvements", "author": ["Pascal Lamblin", "Razvan Pascanu", "James Bergstra", "Ian J. Goodfellow", "Arnaud Bergeron", "Nicolas Bouchard", "Yoshua Bengio"], "venue": null, "citeRegEx": "Bastien et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Bastien et al\\.", "year": 2012}, {"title": "Unsupervised construction of large paraphrase corpora: Exploiting massively parallel news sources", "author": ["Dolan et al.2004] Bill Dolan", "Chris Quirk", "Chris Brockett"], "venue": "In Proceedings of the 20th international conference on Computational Linguistics,", "citeRegEx": "Dolan et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Dolan et al\\.", "year": 2004}, {"title": "Ppdb: The paraphrase database", "author": ["Benjamin Van Durme", "Chris Callison-Burch"], "venue": "In HLT-NAACL,", "citeRegEx": "Ganitkevitch et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Ganitkevitch et al\\.", "year": 2013}, {"title": "Multi-perspective sentence similarity modeling with convolutional neural networks", "author": ["He et al.2015] Hua He", "Kevin Gimpel", "Jimmy Lin"], "venue": "In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "He et al\\.,? \\Q2015\\E", "shortCiteRegEx": "He et al\\.", "year": 2015}, {"title": "Tree edit models for recognizing textual entailments, paraphrases, and answers to questions", "author": ["Heilman", "Smith2010] Michael Heilman", "Noah A Smith"], "venue": "In Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the As-", "citeRegEx": "Heilman et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Heilman et al\\.", "year": 2010}, {"title": "Discriminative improvements to distributional sentence similarity", "author": ["Ji", "Eisenstein2013] Yangfeng Ji", "Jacob Eisenstein"], "venue": "In EMNLP,", "citeRegEx": "Ji et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Ji et al\\.", "year": 2013}, {"title": "Semantic similarity based on corpus statistics and lexical taxonomy. arXiv preprint cmplg/9709008", "author": ["Jiang", "Conrath1997] Jay J Jiang", "David W Conrath"], "venue": null, "citeRegEx": "Jiang et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Jiang et al\\.", "year": 1997}, {"title": "Convolutional neural networks for sentence classification", "author": ["Yoon Kim"], "venue": "In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "Kim.,? \\Q2014\\E", "shortCiteRegEx": "Kim.", "year": 2014}, {"title": "Adam: A method for stochastic optimization", "author": ["Kingma", "Ba2014] Diederik Kingma", "Jimmy Ba"], "venue": "In International Conference on Learning Representation (ICLR)", "citeRegEx": "Kingma et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2014}, {"title": "Effective approaches to attention-based neural machine translation", "author": ["Hieu Pham", "Christopher D Manning"], "venue": "arXiv preprint arXiv:1508.04025", "citeRegEx": "Luong et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Luong et al\\.", "year": 2015}, {"title": "Neural variational inference for text processing", "author": ["Miao et al.2015] Yishu Miao", "Lei Yu", "Phil Blunsom"], "venue": "arXiv preprint arXiv:1511.06038", "citeRegEx": "Miao et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Miao et al\\.", "year": 2015}, {"title": "Efficient estimation of word representations in vector space. arXiv preprint arXiv:1301.3781", "author": ["Kai Chen", "Greg Corrado", "Jeffrey Dean"], "venue": null, "citeRegEx": "Mikolov et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "Paraphrase recognition via dissimilarity significance classification", "author": ["Qiu et al.2006] Long Qiu", "Min-Yen Kan", "Tat-Seng Chua"], "venue": "In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "Qiu et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Qiu et al\\.", "year": 2006}, {"title": "Using information content to evaluate semantic similarity in a taxonomy. arXiv preprint cmp-lg/9511007", "author": ["Philip Resnik"], "venue": null, "citeRegEx": "Resnik.,? \\Q1995\\E", "shortCiteRegEx": "Resnik.", "year": 1995}, {"title": "Learning to rank short text pairs with convolutional deep neural networks", "author": ["Severyn", "Moschitti2015] Aliaksei Severyn", "Alessandro Moschitti"], "venue": "In Proceedings of the 38th International ACM SIGIR Conference on Research and Development", "citeRegEx": "Severyn et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Severyn et al\\.", "year": 2015}, {"title": "Faq-based question answering via word alignment", "author": ["Wang", "Ittycheriah2015] Zhiguo Wang", "Abraham Ittycheriah"], "venue": "arXiv preprint arXiv:1507.02628", "citeRegEx": "Wang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2015}, {"title": "What is the jeopardy model? a quasi-synchronous grammar for qa", "author": ["Wang et al.2007] Mengqiu Wang", "Noah A Smith", "Teruko Mitamura"], "venue": "In EMNLPCoNLL,", "citeRegEx": "Wang et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2007}, {"title": "Wikiqa: A challenge dataset for opendomain question answering", "author": ["Yang et al.2015] Yi Yang", "Wen-tau Yih", "Christopher Meek"], "venue": "In Proceedings of the Conference on Empirical Methods in Natural Language Processing", "citeRegEx": "Yang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Yang et al\\.", "year": 2015}, {"title": "Convolutional neural network for paraphrase identification", "author": ["Yin", "Sch\u00fctze2015] Wenpeng Yin", "Hinrich Sch\u00fctze"], "venue": "In Proceedings of the 2015 Conference of the North American Chapter of the Association", "citeRegEx": "Yin et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Yin et al\\.", "year": 2015}, {"title": "Abcnn: Attention-based convolutional neural network for modeling sentence pairs", "author": ["Yin et al.2015] Wenpeng Yin", "Hinrich Sch\u00fctze", "Bing Xiang", "Bowen Zhou"], "venue": null, "citeRegEx": "Yin et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Yin et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 4, "context": "For example, in paraphrase identification task, sentence similarity is used to determine whether two sentences are paraphrase or not (Yin and Sch\u00fctze, 2015; He et al., 2015).", "startOffset": 133, "endOffset": 173}, {"referenceID": 13, "context": "the dissimilarity (shown in angle brackets) between two sentences is also a significant clue (Qiu et al., 2006).", "startOffset": 93, "endOffset": 111}, {"referenceID": 14, "context": "Examples include knowledge-based metrics (Resnik, 1995) and corpus-based metrics (Jiang and Conrath, 1997; Yin and Sch\u00fctze, 2015; He et al.", "startOffset": 41, "endOffset": 55}, {"referenceID": 4, "context": "Examples include knowledge-based metrics (Resnik, 1995) and corpus-based metrics (Jiang and Conrath, 1997; Yin and Sch\u00fctze, 2015; He et al., 2015).", "startOffset": 81, "endOffset": 146}, {"referenceID": 4, "context": "To measure sentence similarity from various granularities (issue 2), researchers have explored features extracted from n-grams, continuous phrases, discontinuous phrases, and parse trees (Yin and Sch\u00fctze, 2015; He et al., 2015; Heilman and Smith, 2010).", "startOffset": 187, "endOffset": 252}, {"referenceID": 4, "context": "Examples include knowledge-based metrics (Resnik, 1995) and corpus-based metrics (Jiang and Conrath, 1997; Yin and Sch\u00fctze, 2015; He et al., 2015). To measure sentence similarity from various granularities (issue 2), researchers have explored features extracted from n-grams, continuous phrases, discontinuous phrases, and parse trees (Yin and Sch\u00fctze, 2015; He et al., 2015; Heilman and Smith, 2010). The third issue did not get much attention in the past, the only related work of Qiu et al. (2006) explored the dissimilarity between sentences in a pair for paraphrase identification task, but they require human annotations in order to train a classifer, and their performance is still below the state of the art.", "startOffset": 130, "endOffset": 501}, {"referenceID": 12, "context": "(2013) is an effective way to handle the lexical gap issue in the sentence similarity task, as it represents each word with a distributed vector, and words appearing in similar contexts tend to have similar meanings (Mikolov et al., 2013).", "startOffset": 216, "endOffset": 238}, {"referenceID": 12, "context": "Word embedding of Mikolov et al. (2013) is an effective way to handle the lexical gap issue in the sentence similarity task, as it represents each word with a distributed vector, and words appearing in similar contexts tend to have similar meanings (Mikolov et al.", "startOffset": 18, "endOffset": 40}, {"referenceID": 13, "context": "Besides the suggestion from Qiu et al. (2006) that the significance of the dissimilar parts alone between two sentences has a great effect of their similarity, we also think that the dissimilar and similar components have strong connections.", "startOffset": 28, "endOffset": 46}, {"referenceID": 8, "context": "Inspired from Kim (2014), we utilize a twochannel convolutional neural networks (CNN) and design filters based on various order of n-grams, e.", "startOffset": 14, "endOffset": 25}, {"referenceID": 1, "context": "We implement the mathematical expressions with Theano (Bastien et al., 2012) and use Adam (Kingma and Ba, 2014) for optimization.", "startOffset": 54, "endOffset": 76}, {"referenceID": 17, "context": "Table 2 summarises the statistics of the two datasets, where QASent (Wang et al., 2007) was created from the TREC QA track, and WikiQA (Yang et al.", "startOffset": 68, "endOffset": 87}, {"referenceID": 18, "context": ", 2007) was created from the TREC QA track, and WikiQA (Yang et al., 2015) is constructed from real queries of Bing and Wikipedia.", "startOffset": 55, "endOffset": 74}, {"referenceID": 2, "context": "We experiment on the Microsoft Research Paraphrase corpus (MSRP) (Dolan et al., 2004), which includes 2753 true and 1323 false instances in the training set, and 1147 true and 578 false instances in the test set.", "startOffset": 65, "endOffset": 85}, {"referenceID": 12, "context": "word2vec toolkit (Mikolov et al., 2013) on the English Gigaword (LDC2011T07).", "startOffset": 17, "endOffset": 39}, {"referenceID": 17, "context": "Yang et al. (2015) constructed the dataset and reimplemented several baseline models.", "startOffset": 0, "endOffset": 19}, {"referenceID": 11, "context": "Miao et al. (2015) models the sentence similarity by enriching LSTMs with a latent stochastic attention mechanism.", "startOffset": 0, "endOffset": 19}, {"referenceID": 11, "context": "Miao et al. (2015) models the sentence similarity by enriching LSTMs with a latent stochastic attention mechanism. The corresponding performance is given at the third row of Table 4. Yin et al. (2015) introduced the attention mechanism into the CNN model, and captured the best performance (the fourth row of Table 4).", "startOffset": 0, "endOffset": 201}, {"referenceID": 3, "context": ", embeddings from part-ofspeech (POS) tags and PARAGRAM vectors trained from the Paraphrase Database (Ganitkevitch et al., 2013).", "startOffset": 101, "endOffset": 128}, {"referenceID": 3, "context": "He et al. (2015) proposed a similar model to Yin and Sch\u00fctze (2015).", "startOffset": 0, "endOffset": 17}, {"referenceID": 3, "context": "He et al. (2015) proposed a similar model to Yin and Sch\u00fctze (2015). Similarly, they also used a CNN model to extract features at multiple levels of granularity.", "startOffset": 0, "endOffset": 68}, {"referenceID": 3, "context": ", embeddings from part-ofspeech (POS) tags and PARAGRAM vectors trained from the Paraphrase Database (Ganitkevitch et al., 2013). Their model outperformed Yin and Sch\u00fctze (2015) without the need of pretraining (the sixth row of Table 5).", "startOffset": 102, "endOffset": 178}, {"referenceID": 3, "context": ", embeddings from part-ofspeech (POS) tags and PARAGRAM vectors trained from the Paraphrase Database (Ganitkevitch et al., 2013). Their model outperformed Yin and Sch\u00fctze (2015) without the need of pretraining (the sixth row of Table 5). However, the performance was reduced after removing the extra resources (the fourth and fifth rows of Table 5). Yin et al. (2015) applied their attention-based CNN model on this dataset.", "startOffset": 102, "endOffset": 368}, {"referenceID": 3, "context": ", embeddings from part-ofspeech (POS) tags and PARAGRAM vectors trained from the Paraphrase Database (Ganitkevitch et al., 2013). Their model outperformed Yin and Sch\u00fctze (2015) without the need of pretraining (the sixth row of Table 5). However, the performance was reduced after removing the extra resources (the fourth and fifth rows of Table 5). Yin et al. (2015) applied their attention-based CNN model on this dataset. By adding a couple of sparse features and using a layerwise training strategy, they got a pretty good performance. Comparing to these neural network based models, our model obtained a comparable performance (the last row of Table 5) without using any sparse features, extra annotated resources and specific training strategies. However, the best performance so far on this dataset is obtained by Ji and Eisenstein (2013). In their model, they just utilized several hand-crafted features in a Support Vector Machine (SVM) model.", "startOffset": 102, "endOffset": 846}, {"referenceID": 0, "context": "1 are inspired from the attention-based neural machine translation (Bahdanau et al., 2014; Luong et al., 2015).", "startOffset": 67, "endOffset": 110}, {"referenceID": 10, "context": "1 are inspired from the attention-based neural machine translation (Bahdanau et al., 2014; Luong et al., 2015).", "startOffset": 67, "endOffset": 110}, {"referenceID": 0, "context": "1 are inspired from the attention-based neural machine translation (Bahdanau et al., 2014; Luong et al., 2015). However, most of the previous work using the attention mechanism in only LSTM models. Whereas our model introduces the attention mechanism into the CNN model. A similar work is the attention-based CNN model proposed by Yin et al. (2015). They first build an attention matrix for a sentence pair, and then directly take the attention matrix as a new channel of the CNN model.", "startOffset": 68, "endOffset": 349}], "year": 2016, "abstractText": "Most conventional sentence similarity methods only focus on similar parts of two input sentences, and simply ignore the dissimilar parts, which usually give us some clues and semantic meanings about the sentences. In this work, we propose a model to take into account both the similarities and dissimilarities by decomposing and composing lexical semantics over sentences. The model represents each word as a vector, and calculates a semantic matching vector for each word based on all words in the other sentence. Then, each word vector is decomposed into a similar component and a dissimilar component based on the semantic matching vector. After this, a twochannel CNN model is employed to capture features by composing the similar and dissimilar components. Finally, a similarity score is estimated over the composed feature vectors. Experimental results show that our model gets the state-of-the-art performance on the answer sentence selection task, and achieves a comparable result on the paraphrase identification task.", "creator": "LaTeX with hyperref package"}}}