{"id": "1603.03112", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-Mar-2016", "title": "Building a Fine-Grained Entity Typing System Overnight for a New X (X = Language, Domain, Genre)", "abstract": "Recent research has paterno shown khomas great amrut progress tighthead on virals fine - 2,329 grained regency entity chennault typing. 130.70 Most 84.69 existing articulate methods require kunlun pre - defining a leeteuk set of dwright types and training zirkel a weissmuller multi - class latrun classifier from adyar a large hirschbeck labeled data weerstandsbeweging set 2,653 based on multi - level hagins linguistic zahner features. vishu They are thus zooey limited evidentiary to certain plushchenko domains, borgetti genres eestor and brede languages. In this intelligentsia paper, acha we propose mainstays a novel x16 unsupervised 65.58 entity stager typing 128.3 framework '07 by vwr combining symbolic chernoy and distributional semantics. khafji We byork start hewas from presbyters learning general embeddings for winrich each entity aapt mention, compose belga the embeddings qiannan of specific pane contexts 10.85 using low-key linguistic elga structures, link the anoles mention to knowledge bases and learn echium its related knowledge browsed representations. liotti Then we gartnergroup develop a royalists novel sinking joint jeolla hierarchical niobe clustering ecstasies and linking regulary algorithm to type tarnopolsky all jorgen mentions necol.htm using bedknobs these felton representations. xxxiii This framework doesn ' t rely on sulech\u00f3w any annotated slogs data, trabalho predefined typing vassiliy schema, 7.5-acre or xichang hand - crafted features, balloon therefore it garage-rock can phor be magnin quickly adapted to a plights new domain, vocci genre and stereoscopy language. Furthermore, parow it smout has exacta great reduced-cost flexibility dehumanize at sanguinetti incorporating 1-for-11 linguistic calayan structures (ruffhouse e. g. , nyt5 Abstract Meaning chanaa Representation (wissahickon AMR ), 14-6 dependency genc relations) latifundia to improve specific pennywise context snuffboxes representation. Experiments 3,540 on genres (serica news and maugrim discussion chemises forum) overvote show globalfoundries comparable overstay performance zipay with jocz state - visitations of - the - j.williams art cerebro supervised sirasa typing brunious systems trained lobstermen from a large shepaug amount 3-per of labeled protagonists data. Results on various languages (zullo English, blackboard Chinese, Japanese, Hausa, pag\u00e1n and Yoruba) witeczek and stiffing domains (general sephiroth and sihs biomedical) gils demonstrate the courtship portability unreciprocated of 49.58 our diwali framework.", "histories": [["v1", "Thu, 10 Mar 2016 00:33:28 GMT  (640kb,D)", "http://arxiv.org/abs/1603.03112v1", null]], "reviews": [], "SUBJECTS": "cs.CL cs.AI", "authors": ["lifu huang", "jonathan may", "xiaoman pan", "heng ji"], "accepted": false, "id": "1603.03112"}, "pdf": {"name": "1603.03112.pdf", "metadata": {"source": "CRF", "title": "Building a Fine-Grained Entity Typing System Overnight for a New X (X = Language, Domain, Genre)", "authors": ["Lifu Huang", "Jonathan May", "Xiaoman Pan", "Heng Ji"], "emails": ["huangl7@rpi.edu", "jonmay@isi.edu", "panx2@rpi.edu", "jih@rpi.edu", "permissions@acm.org."], "sections": [{"heading": "1. INTRODUCTION", "text": "Entity typing is an important and challenging task which aims to automatically assign types to entity mentions in unstructured documents. Previous entity typing work mainly focused on a small set of predefined types. For example, MUC-7 [20] defined the three most common types: Person, Organization, and Location. ACE1\n1http://www.itl.nist.gov/iad/mig/tests/ace/\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.\nc\u00a9 2016 ACM. ISBN 978-1-4503-2138-9. DOI: 10.1145/1235\nseparated Geo-Political Entities from (natural) Locations, and introduced Weapons, Vehicles and Facilities. These entity types are very useful for many downstream Natural Language Processing (NLP) and Information Retrieval (IR) tasks such as entity disambiguation [10, 8, 21], entity linking [42, 30, 13], relation extraction [22, 11, 7], knowledge base completion [25, 12, 46], question answering [36, 47], and query analysis [2, 4].\nRecent work [51, 29] suggests that using a larger set of finegrained types can lead to substantial improvement for these downstream NLP applications. Ling et al. [51] described three remaining challenges for the fine-grained entity typing task: selection of a set of fine-grained types, creation of annotated data and linguistic features, and disambiguation of fine-grained types. Most existing approaches [17, 19, 14, 51, 54, 37, 18, 53, 9] addressed these problems in a \u201cdistant supervision\u201d fashion, by pre-defining a set of fine-grained types based on existing knowledge bases (KBs) (e.g., DBPedia, Freebase, YAGO), and creating annotated data based on anchor links in Wikipedia articles or types in KBs, then training a multi-class classifier to predict types. However, the training data acquired in this way often includes a lot of noise, because the entity types are assigned without considering specific contexts. For example, in DBPedia, \u201cMitt Romney\u201d is assigned with a set of types including \u201cPresident,\u201d \u201cScholar,\u201d \u201cTeacher,\u201d \u201cWriter\u201d and so on. More importantly, these types are limited to a pre-defined set, and may not be easily adapted to a new domain, genre, or language.\nIn this work, we propose an unsupervised fine-grained entity typing framework. Let\u2019s take a look at the following motivating examples:\nE1. Mitt Romney was born on March 12, 1947, at Harper University Hospital in Detroit, Michigan, the youngest child of automobile executive George Romney.\nE2. Yuri dolgoruky, equipped by Bulava nuclear-armed missile, is the first in a series of new nuclear submarines to be commissioned this year.\nE3. OWS activists were part of protest.\nE4. The effects of the MEK inhibitor on total HER2 , HER3 and on phosphorylated pHER3 were dose dependent.\nIn E1, the mentions like \u201cMitt Romney,\u201d \u201cGeorge Romney,\u201d \u201cDetroit,\u201d and \u201cMichigan\u201d are commonly used and have no type ambi-\nar X\niv :1\n60 3.\n03 11\n2v 1\n[ cs\n.C L\n] 1\n0 M\nar 2\nguity. Thus, their types can be easily determined by their general semantics. Our first intuition is that:\nHeuristic 1: The types of common entities can be effectively captured by their general semantics.\nHowever, many entities are polysemantic and can be used to refer to different types in specific contexts. For example,\u201cYuri Dolgoruky\u201d in E2, which generally refers to the Russian prince, is the name of a submarine in this specific context. Likewise, \u201cOWS\u201d in E3, which refers to \u201cOccupy Wall Street,\u201d is a very novel emerging entity. It may not exist in the word vocabulary, and its general semantics may not be learned adequately due to its low frequency in the data. Table 1 shows the top-10 most similar entities to \u201cYuri Dolgoruky\u201d and \u201cOWS\u201d based on word embeddings learned from Wikipedia articles. Such types are difficult to capture with general semantics alone, but can be inferred by their specific contexts, like \u201cnuclear submarines,\u201d \u201cequip,\u201d \u201ccommission,\u201d \u201cactivists,\u201d and \u201cprotest\u201d. Thus, our second intuition is that:\nHeuristic 2: The types of uncommon, novel, emerging, and polysemantic entities can be inferred by their specific contexts.\nIn E4, \u201cMEK,\u201d \u201cHER2,\u201d \u201cHER3,\u201d and \u201cpHER3\u201d are biomedical domain specific entities. Their types can be inferred from domainspecific KBs. For example, the properties for \u201cpHER3\u201d in biomedical ontologies include \u201cMedical,\u201d \u201cOncogene,\u201d and \u201cGene.\u201d Therefore, we derive the third intuition:\nHeuristic 3: The types of domain specific entities largely depend on domain-specific knowledge.\nBased on these observations and intuitions, we take a fresh look at this task. For the first time, we propose an unsupervised finegrained entity typing framework that combines general entity semantics, specific contexts, and domain specific knowledge. Without the needs of predefined typing schema, manual annotations and hand-crafted linguistic features, this framework can be easily applied to new domains, genres, or languages. The types of all entity mentions are automatically discovered based on a set of clusters, which can capture fine-grained types customized for any input corpus. We compare the performance of our approach with state-ofthe-art name tagging and fine-grained entity typing methods, and show the performance on various domains, genres, and languages.\nThe novel contributions of this paper are as follows:\n\u2022 We present an unsupervised entity typing framework that requires no pre-defined types or annotated data. Instead, it can automatically discover a set of fine-grained types customized for the input corpus.\n\u2022 We combine three kinds of representations, which are language, genre-, and domain-independent and very effective, to infer the types of entity mentions.\n\u2022 We design an unsupervised entity linking-based type naming approach to automatically generate fine-grained type labels, and jointly optimize clustering and linking."}, {"heading": "2. RELATED WORK", "text": "Several recent studies have focused on fine-grained entity typing. Fleischman et al. [17] classified person entities into eight finegrained subtypes based on local contexts. Sekine [43] defined more than 200 types of entities. The Abstract Meaning Representation (AMR) [3] defined more than 100 types of entities. FIGER [51] derived 112 entity types from Freebase [5] and trained a linearchain CRF model [28] for joint entity identification and typing. Gillick et al. [18] and Yogatama et al. [53] proposed the task of context-dependent fine-grained entity typing, where the acceptable type labels are limited to only those deducible from local contexts (e.g., a sentence or a document). Similar to FIGER, this work also derived the label set from Freebase and generated the training data automatically from entities resolved in Wikipedia. Lin et al. [31] proposed propagating the types from linkable entities to unlinkable noun phrases based on a set of features. HYENA [54] derived a very fine-grained type taxonomy from YAGO [24] based on a mapping between Wikipedia categories and WordNet synsets. This type structure incorporated a large hierarchy of 505 types organized under 5 top level classes (person, location, organization, event, artifact), with 100 descendant types under each of them. Although these methods can handle multi-class multi-label assignment, the automatically acquired training data is often too noisy to achieve good performance. In addition, the features they exploited are language-dependent, and their type sets are rather static.\nOur work is also related to embedding techniques. Turian et al. [49] explored several unsupervised word representations including distributional representations and clustering-based word representations. Mikolov et al. [34] examined vector-space word representations with a continuous space language model. Besides word embedding, several phrase embedding techniques have also been proposed. Yin et al. [52] computed embeddings for generalized phrases, including both conventional linguistic phrases and skipbigrams. Mitchell et al. [35] proposed an additive model and a multiplicative model. Linguistic structures have been proven useful to capture the semantics of basic language units [45, 23, 44, 6]. Socher et al. [44] designed a DT-RNN model to map sentences into compositional vector representations based on dependency trees. Hermann et al. [23] explored a novel class of Combinatory Categorial Autoencoders to utilize the role of syntax in Combinatory Categorial Grammar to model compositional semantics. Socher et al. [45] designed a Recursive Neural Tensor Network (RNTN) to compute sentiment compositionality based on the Sentiment Treebank. Bowman et al. [6] designed three sets of experiments to encode semantic inference based on compositional semantic representations. Compared to these efforts, in this work, we attempt to compose the context information to infer the fine-grained types. Considering not all contexts are meaningful, we carefully selected specific types of relations (AMR relations or dependency relations) to capture concept-specific local contexts instead of sentence-level or corpus-level contexts."}, {"heading": "3. APPROACH OVERVIEW", "text": "Figure 2 illustrates the overall framework of our system, which takes the boundaries of all entity mentions as input and produces a\ntype label for each mention as output. The framework starts from learning three kinds of representations:\n(i) a general entity distributed representation based on global contexts;\n(ii) a specific context representation, to model local context words based on linguistic structures.\n(iii) a knowledge representation, to model domain-specific knowledge for each mention.\nFor example, Figure 1 shows these three representations that can be used to infer the type of \u201cpHER3\u201d. After learning general and context-specific embeddings, we apply unsupervised entity linking to link entity mentions to a domain-specific knowledge base. Based on the linking results, we can determine the knowledge representation and extract a type path for each highly linkable entity mention. Finally, we use these three representations as input to a hierarchical X-means clustering algorithm [40] to discover the hierarchical type structure of each mention. At each layer of the hierarchy, we also design an optimal partition search algorithm to conduct feature voting and obtain the optimal clustering and typing results."}, {"heading": "4. REPRESENTATION GENERATION", "text": ""}, {"heading": "4.1 General Entity Representation", "text": "Based on Heuristic 1, we can infer the types of most entity mentions. For example, \u201cMitt Romney\u201d and \u201cJohn McCain\u201d are both politicians from the same country, \u201cHER2\u201d and \u201cHER3\u201d refer to\nsimilar \u201cERBB (Receptor Tyrosine-Protein Kinase)\u201d and thus they have the same entity type \u201cEnzyme\u201d. We start by capturing the semantic information of entity mentions based on general lexical embedding, which is an effective technique to capture general semantics of words or phrases based on their global contexts. Several models [33, 32, 55, 35] have been proposed to generate word embeddings. Here, we utilize the Continuous Skip-gram model [32] based on a large amount of unlabeled in-domain data set.\nMost entity mentions are multi-word information units. In order to generate their phrase embeddings, we compared two methods: (1) the model proposed by Yin et al. [52], which learned phrase embeddings directly by considering a phrase as a basic language unit, and (2) a simple element-based additive model (z = x1 + x2 + ... + xi) [32], where z represents a phrase embedding and x1, x2, ..., xi represent the individual embeddings of the words in z. We found the former performed better because most entity mentions appear more than 5,000 times in the large in-domain data set, and thus the embedding of phrases can be learned efficiently."}, {"heading": "4.2 Specific-Context Representation", "text": "General embeddings can effectively capture the semantic types of most entity mentions, but many entities are polysemantic and can refer to different types in specific contexts. For example, \u201cADH\" in the biomedical domain can be used to refer to an enzyme (\u201cAlcohol Dehydrogenase\") or a disease (\u201cAtypical Ductal Hyperplasia\"); \u201cYuri Dolgoruky\" may refer to a Russian prince or a submarine. In addition, novel or uncommon entities may not exist in the word vocabulary or their embeddings may not be adequately trainable. In order to solve these problems, based on Heuristic 2, we propose incorporating linguistic structures to capture context-specific representations of entity mentions.\nLinguistic structures have been proven useful for capturing the semantics of basic language units [45, 23, 44, 6]. Considering E2 again, the type of \u201cYuri Dolgoruky\u201d can be inferred from its context-specific relational concepts such as \u201cnuclear submarines\u201d, and \u201cequip\u201d. Many linguistic knowledge representations and resources, including AMR (Abstract Meaning Representation [3]), dependency parsing, semantic role labeling (SRL), VerbNet [27] and FrameNet [1], can be exploited to capture linguistic properties. In this work we focus on AMR to introduce the general framework for specific-context representation generation and later we will compare the impact of various linguistic structures.\nAMR is a sembanking language that captures a whole sentence\u2019s meaning in a rooted, directed, labeled and (predominantly) acyclic graph structure. AMR represents the semantic structure of a sentence via multi-layer linguistic analyses such as PropBank frames, non-core semantic roles, coreference, named entity annotation, modality, and negation. Compared with dependency parsing and SRL, the nodes in AMR are concepts instead of words, and the edge types are much more fine-grained. The AMR language contains rich relations, including frame arguments (e.g., :ARG0, :ARG1),\ngeneral semantic relations (e.g., :mod, :topic, :domain), relations for quantities, date-entities or lists (e.g., :quant, :date, :op1), and the inverse of all these relations (e.g., :ARG0-of, :quant-of). We carefully select 8 entity-related relation types (:ARG0, :ARG1, :ARG2, :ARG3, :conj, :domain, :topic, :location) from AMR for entity typing.\nGiven an entity mention, we first select its related concepts. For each AMR relation we generate a representation based on the general embeddings of these related concepts. If a related concept doesn\u2019t exist in the vocabulary, we generate its embedding based on the additive model. If there are several argument concepts involved in a specific relation, we average their representations. We concatenate the vector representations of all selected relations into one single vector. Though we have carefully aggregated and selected the popular relation types, the representation of each entity mention is still sparse. To reduce the dimensions and generate a high quality embedding for the specific context, we utilize the sparse auto-encoder framework [38] to learn more low-dimensional representations. Figure 3 depicts the context-specific representation generation for \u201cpHER3\" in the example E4."}, {"heading": "4.3 Knowledge Representation", "text": "The types of some entities heavily rely on domain-specific knowledge. Existing broad-coverage knowledge bases such as DBpedia, Freebase, or YAGO, as well as domain-specific ontologies like BioPortal and NCBO can provide useful knowledge for inferring specific fine-grained types. For example, in DBPedia, both of the properties (e.g., \u201cbirthPlace\u201d, \u201cparty\u201d for \u201cMitt Romney\u201d, \u201ccapital\u201d, \u201clongitude\u201d for \u201cMichigan\u201d) and type labels (e.g., \u201cPerson\u201d, \u201cGovernor\u201d for \u201cMitt Romney\u201d, \u201cPlace\u201d, \u201cLocation\u201d for \u201cMichigan\u201d) can be used for entity typing. For the biomedical domain we can consult BioPortal for domain-specific properties and type labels (e.g., \u201cOncogenes\u201d, \u201cGenes\u201d for \u201cHER2\u201d). These properties can be used to measure the similarity between mentions. In this work, we construct a knowledge graph based on these properties and type labels and generate knowledge representations for all entities based on a graph embedding framework.\nGiven an entity e, we first collect all properties and type labels p(e) from the domain-specific knowledge bases (KBs). We remove the universal labels from all entities and construct a weighted undi-\nrected graph G = (V,E), where V is the set of entities in all KBs and E is the set of edges. As shown in Figure 4, the existence of an edge eij = (ei, ej) implies that two entities, ei and ej , share some common properties or type labels. The weight of the edge, w(ei, ej), is calculated as:\nAfter constructing the knowledge graph, we apply the graph embedding framework proposed by [48] to generate a knowledge representation for each entity. The basic idea is to optimize the preservation of both local structures, which are represented by the observed edges in the graph, and global graph structures, which are determined through the shared neighborhood structures of the entities. The global structures assume that entities sharing many neighbors are similar to each other. In this case, each entity is also treated as a specific \u201ccontext\u201d and entities with similar distributions over the \u201ccontexts\u201d are assumed to be similar. Therefore, each entity plays two roles: the entity itself and a specific \u201ccontext\u201d of other entities. Two objectives that preserve the local and global structures are as follows:\nOlocal = \u2212 \u2211\n(i,j)\u2208E\nwij logp1(ei, ej)\np1(ei, ej) = 1\n1 + exp(\u2212uTi uj) Oglobal = \u2212 \u2211\n(i,j)\u2208E\nwij logp2(ej |ei)\np2(ej |ei) = exp(u \u2032T j ui)\u2211|V |\nk=1 exp(u \u2032T k ui)\nwhere p1(ei, ej) defines the joint probability between ei and ej and p2(ej |ei) defines the probability of \u201ccontext\u201d ej generated by ei. wij is the weight of edge (ei, ej). ui is the low-dimensional vector representation of ei and u \u2032 i is the representation of ei when it is treated as a specific \u201ccontext\u201d. {ui}i=1,...,|V | and {u \u2032 i}i=1,...,|V | are all randomly initialized. By tuning {ui}i=1,...,|V | and minimizing the objective function Olocal, we can generate a d-dimensional representation for each entity. To train the function Oglobal efficiently, we adopt a negative sampling approach, which samples multiple negative edges according to some noisy distribution for each edge and specifies the following objective function for each edge (ei, ej):\nlog\u03c3(u \u2032T j \u00b7 ui) + K\u2211 i=1 Een\u223cPn(e)[log\u03c3(u \u2032T n \u00b7 ui)]\nwhere \u03c3(x) = 1/(1 + exp(\u2212x)) is the sigmoid function. The first term models the observed edges and the second term models\nAlgorithm 1 Hierarchical Clustering Algorithm Input: mention setM, vector set V , linkable mentions \u0393 \u2286M, and their type paths \u2206 Output: The Hierarchical Clustering Results\n1. Set the minimum (Kmin) and maximum (Kmax) number of clusters\n2. For Layer i = 0, assuming the initial partition set for M is R0(M) = {M}\n3. For Layer i + 1\n\u2022 Ri+1(M) = Algorithm 2(Ri(M),V,\u0393,\u2206,Kmin,Kmax)\n4. i = i + 1, repeat step 3, until each cluster C \u2208 Ri+1(M) contains no linkable entity mentions or contains only one mention.\n5. return {R1(M),R2(M), . . . ,RN (M)}\nthe negative edges drawn from the noise distribution and K is the number of negative edges. Pn(e) \u221d d3/4e , where de is the outdegree of e. To optimize the negative sampling objective function, we adopt the asynchronous stochastic gradient algorithm [41]. At each step, the algorithm samples a mini-batch of edges and updates the model parameters. If an edge (ei, ej) is sampled, the gradient of the embedding vector ui can be calculated as:\n\u03b4(Oglobal)\n\u03b4(ui) = wei,ej \u00b7 \u03b4logp2(ej |ei) \u03b4(ui)\nAfter training these two objective functions Olocal and Oglobal separately, we concatenate the optimized embeddings for each entity as their knowledge representations.\nNext we utilize a domain- and language-independent entity linking system [50] to link each mention to existing KBs to determine its knowledge representation. This system is based on an unsupervised collective inference approach.\nGiven a set of entity mentions M = {m1,m2, ...,mn}, this system first constructs a graph for all entity mentions based on their co-occurrence within a paragraph, which, in our experiment, is taken to mean \u2018five continuous sentences\u2019. Each node in the graph denotes an entity mention and two nodes will share an edge if two mentions co-occur within a paragraph. Then, for each entity mention m, this system uses the surface form dictionary < f, e1, e2, ..., ek >, where e1, e2, ..., ek is the set of entities with surface form f according to their properties (e.g., labels, names, aliases), to locate a list of candidate entities e \u2208 E and compute the importance score by an entropy based approach [56]. Finally, it computes similarity scores for each entity mention and candidate entity pair < m, e > and selects the most confident candidate (confidence score > 0.95) as the appropriate entity for linking. If a mention cannot be linked to a KB, we will assign a random vector as its knowledge representation. In our experiments, about 77.7% entity mentions in the general news domain and about 71.4% percent in the biomedical domain can be linked to KBs with high confidence."}, {"heading": "5. JOINT LINKING, HIERARCHICAL TYPING, AND NAMING", "text": ""}, {"heading": "5.1 Hierarchical Typing", "text": "For an entity mention m \u2208 M, the vector representation v of m is the concatenation of the three parts mentioned above: the distributed general semantic representation vE , the local-context specific representation vC and the knowledge representation vK based on entity linking. We designed a hierarchical X-means clustering\nAlgorithm 2 Optimal Partition Search Input: initial partition set Ri(M) = {C1, C2, . . . , Ck}, vector set V , linkable mentions and their type paths \u0393, \u2206, the minimal (Kmin) and maximal (Kmax) number of clusters for partition Output: the optimal parameters: w\u22171 , w \u2217 2 , w \u2217 3 ; and the optimal next layer partition set Ri+1(M) \u2022 omin =\u221e; w\u22171 = w\u22172 = w\u22173 = 0.33; Ri+1(M); \u2022 For w1 = 0 to w1 = 1 by steps of 0.05\n\u2013 For w2 = 0 to w2 = 1 by steps of 0.05 such that w1 +w2 \u2264 1.0\n\u2217 w3 = 1.0\u2212 w1 \u2212 w2 \u2217 Rcurr(M) = \u22c3 Ci\u2208Ri(M) Xmeansw1,w2,w3 (Ci) \u2217 ocurr = O(Rcurr(M),\u0393,\u2206) \u2217 if ocurr < omin:\n\u00b7 omin = ocurr ; w\u22171 = w1; w\u22172 = w2; w\u22173 = w3 \u00b7 Ri+1(M) = Rcurr(M)\n\u2022 return w\u22171 , w\u22172 , w\u22173 ; Ri+1(M);\nalgorithm to detect the hierarchical types of entities. X-means [40] is an extension of the well-known K-means algorithm for which the number of clusters is estimated instead of being fixed by the user. It has two major enhancements compared to K-means: 1) It is fast and scales great with respect to the time it takes to complete each iteration; 2) It can automatically estimate the number of clusters and also obtain local and global optimals for specific data sets.\nX-means requires a distance metric D to calculate its clusters. We define D given two entity mentions m1 and m2 with vector representations v1 and v2 respectively (we regard the vector of the cluster centroid as the same as the vector of the mention), as:\nD(m1,m2) = w1 D(v m1 E , v m2 E )\n+w2 D(v m1 C , v m2 C ) + w3 D(v m1 K , v m2 K )\nHere, D( ) is the Euclidean distance between two vectors. w1, w2, w3 are the balance parameters among three types of representations and w1 + w2 + w3 = 1.\nGiven the set of all mentions M, we will select highly linkable mentions (confidence score > 0.95) \u0393 \u2286 M and their corresponding type paths \u2206 based on the entity linking system described in Section 4.3 for typing and naming. Here, the type path denotes the longest path from the KB title to the root of the type hierarchy in the KB. For example, we can link the entity mention \u201cMitt Romney\u201d in Section 1 to YAGO and extract a type path from the entity title to the root: \u2018Mitt Romney \u2192 Governor \u2192 Politician\u2192Leader\u2192Person\u2192 Entity.\u2019 As outlined in Algorithm 1, we start from the initial set of all entity mentionsM and vector representations V to generate hierarchical partitions {R1(M),R2(M), . . . ,RN (M)}, where Ri(M) represents the partition ofM based on vector representation set V at layer i.\nFor each layer i, in order to get further partition set Ri+1(M) based on Ri(M) = {C1, C2, . . . , Ck}, we defineXmeansw1,w2,w3(C) as the partition of mention set C based on running X-means with D parameterized by the parameter set w1, w2, w3. It remains to search for the optimal w1, w2, w3. In order to judge an optimal partition for each layer, we utilize information from the KB: \u0393 and \u2206, as truth and invoke the following heuristic:\nHeuristic 4: The optimal clustering results of all mentions should be consistent with the optimal clustering results of all linkable mentions.\nWe then define an objective function O that evaluates a certain\nlayer of partition set R(M) = {C1, C2, . . . , Ck}:\nO(R,\u0393,\u2206) = Dinter + Dintra\nDinter = n\u2211\ni6=j=1 \u2211 m\n\u2032 u\u2208Ci,m \u2032 v\u2208Cj\nw(m \u2032 u,m \u2032 v)\nDintra = n\u2211\ni=1 \u2211 m\n\u2032 u,m \u2032 v\u2208Ci\n(1\u2212 w(m \u2032 u,m \u2032 v))\nwhere w( ) is defined in Section 4.3 based on type paths. Algorithm 2 encapsulates the search for w\u22171 , w\u22172 , w\u22173 , the parameter set that optimizes O."}, {"heading": "5.2 Hierarchical Type Naming", "text": "The entity linking system described in Section 4.3 can extract highly linkable entity mentions and their corresponding type name paths. Considering the examples in Section 1 again, we can link the entity mention \u201cMitt Romney\u201d to YAGO and extract a type path from the entity title to the root: \u2018Mitt Romney \u2192 Governor \u2192 Politician\u2192Leader\u2192Person\u2192 Entity.\u2019 Similarly, we can link \u201cHER2\u201d to \u201cERBB2\u201d in BioPortal and extract the type name path from the entity to the root of an ontology as: \u2018ERBB2 \u2192 ProtoOncogenes \u2192 Oncogenes \u2192 Genes \u2192 Genome Components \u2192 Genome \u2192 Phenomena and Processes \u2192 Topical Descriptor \u2192 MeSH Descriptors\u2019. We first normalize the type name paths and remove those too general type name candidates (e.g., \u2018Entity\u2019, \u2018Topical Descriptor\u2019). In our experiments, a type name is removed if more than 90% of type paths contain it. Then, we generate the most confident type label nC for each cluster C based on high confidence linking results as follows:\nFor a specific cluster C, the mentions within this cluster are denoted as MC and the highly linkable mentions are \u0393C \u2286MC . We collect all the type names NC from the type paths of all m \u2208 \u0393C , then we determine which type name is the most fine-grained and also matches with cluster C based on two metrics: Majority and Specificity. Majority is measured based on the frequency of the specific type name n in the type name set NC . This metric is designed based on our intuition that the type name should be able to represent the types of as many entity mentions as possible. Specificity is designed to measure the granularity degree of the type name in the whole name path. These two metrics are computed as follows:\nmajorityCn = Count(n,C)\n|MC |\nspecificityp(n)n = Position(n, p(n))\n|p(n)|\nwhere Count(n,C) represents the frequency of a type name n in the set NC , |MC | represents the number of members in cluster C, p(n) represents the longest type name path including n and Position(n, p(n)) represents the position of n in p(n) (from the root to n).\nWe combine these two metrics and choose nC as follows: for each cluster C we define NmC = {n : n \u2208 NC \u2227majorityCn \u2265 \u03bb}, where \u03bb is a threshold parameter2. We then select nC = argmax n\u2208Nm\nC\nspecificityp(n)n . For example, if the majority of \u2018Proto-\nOncogenes\u2019 and \u2018Genes\u2019 are both larger than \u03bb, which is set as 0.75\n2We set \u03bb to 0.75 in our experiments.\nin our experiments, we should choose \u2018Proto-Oncogenes\u2019 because it is much more fine-grained than \u2018Genes\u2019 in the whole type name path. After naming for each hierarchical cluster, we will generate a type hierarchy, which is also customized for the specific corpus."}, {"heading": "6. EXPERIMENTS AND EVALUATION", "text": "In this section we present an evaluation of the proposed framework on various genres, domains and languages, as well as a comparison with state-of-the-art systems."}, {"heading": "6.1 Data", "text": "We first introduce the data sets for our experiments. To compare the performance of our framework against state-of-the-art name taggers and evaluate its effectiveness on various domains and genres, we first conduct experiments on Abstract Meaning Representation (AMR) data sets, which include perfect mention boundaries with fine-grained entity types. For the experiment on multiple languages, we use data sets from the DARPA LORELEI program3 and foreign news agencies. The detailed data statistics are summarized in Table 2.\nSince our approach is based on word embeddings, which need to be trained from a large corpus of unlabeled in-domain articles, we collect all the English and Japanese articles from the August 11, 2014 Wikipedia dump to learn English and Japanese word/phrase embeddings and collect all the articles of the 4th edition of the Chinese Gigaword Corpus4 to learn Chinese word/phrase embeddings. For the biomedical domain, we utilize the word2vec model5 which is trained based on all paper abstracts from PubMed6 and full-text documents from the PubMed Central Open Access subset. We also collect all entities and their properties and type labels from DBpedia and 300+ biomedical domain specific ontologies crawled from BioPortal [56] to learn knowledge embeddings."}, {"heading": "6.2 Evaluation Metrics", "text": "Our framework can automatically discover new fine-grained types. Therefore, in addition to mention-level Precision, Recall and Fmeasure, we also exploit the following standard clustering measures:\n1) Purity: To compute purity, each system cluster is assigned to the reference class with the greatest mention overlap. The sum off all matching mentions given this assignment is then divided by N.\npurity =\n\u2211K j=1 max1\u2264i\u2264M |Cj \u2229Ri|\nN\nwhere N is the total number of mentions, K is the number of system generated clusters, M is the number of clusters in the answer key, Cj is the set of mentions in the jth cluster in our system, and Ri is the set of mentions for the ith type in the answer key.\n2) Precision, Recall, F-measure (F): Here, we utilize F-measure to evaluate the entity mentions that match with the ground truth dataset.\nprec(Ri, Cj) = |Ri \u2229 Cj | |Cj |\nrec(Ri, Cj) = |Ri \u2229 Cj | |Ri|\n3http://www.darpa.mil/program/low-resource-languages-foremergent-incidents 4https://catalog.ldc.upenn.edu/LDC2009T27 5http://bio.nlplab.org/ 6http://www.ncbi.nlm.nih.gov/pubmed\nFmeasure(Ri, Cj) = 2 \u2217 prec(Ri, Cj) \u2217 rec(Ri, Cj) prec(Ri, Cj) + rec(Ri, Cj)\nIntuitively, F-measure(Ri, Cj ) measures how good a class Ri can be described by a cluster Cj and the success of capturing a class Ri is measured by using the \u201cbest\u201d cluster Cj for Ri, i.e., the Cj that maximizes Fmeasure(Ri, Cj).\nFmeasure =\n\u2211M i=1 |Ri|max1\u2264j\u2264K Fmeasure(Ri, Cj)\nN\n3) Entropy: The entropy measures the diversity of a cluster Cj and it is defined as\nentropy(Cj) = \u2212 M\u2211 i=1 P (i, j) \u2217 logP (i, j)\nP (i, j) = |Ri \u2229 Cj |\nN\nwhere P (i, j) represents the probability of a mention in the key cluster Ri being assigned to the system cluster Cj . The lower the value of entropy, the better the clustering is. The overall cluster entropy is then computed by averaging the entropy of all clusters:\nentropy =\n\u2211K j=1 |Cj | \u2217 entropy(Cj)\nN"}, {"heading": "6.3 Comparison with State-of-the-art", "text": "We compare with two high-performing name taggers, Stanford NER [15] and FIGER [51], on both coarse-grained types (Person, Location, and Organization), and fine-grained types. We utilize the AMR parser developed by [16] and manually map AMR types and system generated types to three coarse-grained types. In order to compare identification results, we design a simple mention boundary detection approach based on capitalization features and part-of-speech features. We compare the performance of our system with both perfect AMR and system AMR annotations with the performance of NER and FIGER. We conduct the experiments on English news data set and link entity mentions to DBPedia [39]. The mention-level F-scores are shown in Table 3.\nBesides these three coarse-grained types, there are also many new types (e.g., Ailment, Vehicle, Medium) discovered by finegrained entity typing approaches. We compare our framework with FIGER based on their pre-trained 112-classes classification model. The cluster-level F-scores are shown in Figure 5.\nFrom Table 3 we can see that, on coarse-grained level, compared with Stanford NER, which contains many features and is trained on about 945 annotated documents (approximately 203,000 tokens), our approach with both system AMR and perfect AMR achieved comparable performance. Compared with FIGER on coarse-grained level, our approach with system AMR and perfect AMR also achieved better results. Figure 5 shows the fine-grained level performance. The number of clusters, to some extent, can reflect the granularity of fine-grained typing. Although we can not directly map the granularity of FIGER to our system, considering the classification results of FIGER are highly biased toward a certain subset of types (about 60 types), our approach with both system AMR and perfect AMR should slightly outperform FIGER, which is trained based on 2 million labeled sentences.\nBoth Stanford NER and FIGER heavily rely on linguistic features, such as tokens, context n-grams, part-of-speech tags, to predict entity types. Compared with lexical information, semantic information is more indicative to infer its type. For example, in \u201cBernama said Malaysia had procured very short-range air defense systems from Russia.\u201d \u201cBernama\u201d is assigned the type \u201cPerson\u201d by the FIGER system. However, based on general semantic information, the most similar concepts to \u201cBernama\u201d include \u201cMalaysiakini,\u201d \u201cUtusan,\u201d and \u201cKompas,\u201d which can effectively help infer the correct type as \u201cNews Agency.\u201d In addition, in many cases, the fine-grained types of entity mentions are heavily depend on their knowledge information. For example, in \u201cAntonis Samaras is cheered by supporters after his statement in Athens June 17, 2012.\u201d it\u2019s difficult to infer the fine-grained type of \u201cAntonis Samaras\u201d based on context words. However, we can utilize more knowledge from KBs and find that the most similar concepts to \u201cAntonis Samaras\u201d include \u201cKostas Karamanlis,\u201d \u201cGeorgios Papastamkos,\u201d and \u201cGiannis Valinakis\u201d based on knowledge representation, which can help infer the fine-grained type of Antonis Samaras as \u201cPolitician.\u201d"}, {"heading": "6.4 Comparison on Genres", "text": "For comparison between news and discussion forum genres, we utilize perfect entity boundaries and perfect AMR annotation results to model local contexts and link entity mentions to DBpedia [39]. Figure 6 shows the performance.\nWe can see that our system performs much better on news articles than discussion forum posts, due to two reasons: (1) many entities occur as abbreviations in discussion forum posts, which brings challenges to both entity typing and linking. For example, in the following post: \u201cThe joke will be on House Dems who are being promised a bill to \u201cfi\u201d the problems with the Senate bill.\u201d, it\u2019s difficult to generate accurate general semantic and knowledge representations for the mentions like \u201cHouse\u201d (which refers to \u201cUnited States House of Representatives\u201d) and \u201cDems\u201d (which refers to \u201cDemocratic Party of United States\u201d). (2) more novel and uncommon entities appear in discussion forums. Take the following sentence as an example: \u201cMend some fences and get this country moving. He could call it APOLOGIES ON BEER. Hell, sell tickets and hire the Chinese to cater the event.\u201d \u201cAPOLOGIES ON BEER\u201d is a novel emerging entity, thus it will be difficult to predict its fine-grained type \u201ctour,\u201d even with semantic and knowledge representations.\nIn addition, our system can outperform the FIGER system (with gold segmentation), of which the results are focused on about 50 types on the discussion forum data set, on both Purity and F-measure. As discussed in Section 6.3, FIGER is trained based on a rich set of linguistic features. When it is applied to a new informal genre, feature generation can not be guaranteed to work well. Our system is mainly based on semantic representations, which will not be affected by the noise."}, {"heading": "6.5 Comparison on Domains", "text": "To demonstrate the domain portability of our framework, we take the biomedical domain as a case study. For fair comparison, we used perfect AMR semantic graphs and perfect mention boundaries. Figure 6 compares the performance for news and biomedical articles.\nAs shown in Figure 6, our system performs much better on biomedical data than on general news data. In an in-depth analysis of the experiment results, we found that most of the entity mentions in the biomedical domain are unique and unambiguous, and the mentions with the same type often share the same name strings. For example, \u201cHER2,\u201d \u201cHER3,\u201d and \u201cHER4\u201d refer to similar \u201cProtoOncogenes\u201d; \u201cA-RAF,\u201d \u201cB-RAF\u201d and \u201cC-RAF\u201d share the same type \u201cRAF Kinases.\u201d However, it is always the opposite in the general news domain. For example, although \u201cShenzhen,\u201d \u201cShenzhen Maoye,\u201d \u201cShenzhen Gymnasium\u201d share the same name string \u201cShenzhen\u201d, they have different entity types: \u201cShenzhen\u201d refers to a city, \u201cShenzhen Maoye\u201d is a company and \u201cShenzhen Gymnasium\u201d is a facility. What\u2019s more, ambiguity commonly exists in general news domain, especially for persons and locations. For example, both of\u201cSokolov,\u201d \u201cChamberlain.\u201d can refer to a city or a person. We utilize the ambiguity measure defined in [26] as the criteria to demonstrate the ambiguity degree of news and biomedical domains.\nambiguity = #name strings belong to more than one cluster\n#name strings\nFigure 7 shows the ambiguity comparison results between the general news and biomedical domains. Due to the low ambiguity of the biomedical domain, the general semantic representation and knowledge representation can better capture the domain-specific types of these entity mentions. This analysis can also be verified by the final optimal weights for three kinds of representations: w1 = 0.45, w2 = 0.05, w3 = 0.5 for biomedical domain while w1 = 0.45, w2 = 0.2, w3 = 0.35 for news, which shows the different contributions of three-layer representations for entity typing."}, {"heading": "6.6 Comparison on Languages", "text": "Our framework is also highly portable to new languages. Different languages may have different linguistic resources available. For example, English has rich linguistic resources (e.g., AMR) that can be utilized to model local contexts while some languages (e.g., Chinese, Japanese) don\u2019t. To evaluate the impact of the local contexts on entity typing, we compare the performance based on AMR and the embeddings of context words that occur within a limited-size window. In our experiment, the window size is 6. Figure 8 shows the performance on English, Chinese and Japanese news data sets.\nFigure 8 shows that our framework on Chinese and Japanese also achieved comparable performance as English. The main reason is that entities in Chinese and Japanese have less ambiguity than English. Almost all of the same name strings refer to the same type of entity. Based on the ambiguity measure in Section 6.5, the ambiguity is lower than 0.05 both for Chinese and Japanese.\nIn addition, for low resource languages, there are not enough unlabeled documents to train word embeddings and KBs may not be available for these languages. In this case, we can utilize other feature representations such as bag-of-words tf-idf instead of embedding based representations. To prove this, we apply our framework\nto two low-resource languages: Hausa and Yoruba. The mentionlevel typing accuracy with perfect boundary is very promising: 85.42% for Hausa and 72.26% for Yoruba."}, {"heading": "6.7 Comparison on Linguistic Structures", "text": "In order to evaluate the impact of context-specific representations on entity typing, we compare the performance based on various linguistic structures, including AMR, dependency relations, and bag-of-words in a specific window. Figure 9 presents the performance on English news dataset. The general entity semantic representation and knowledge representation are the same for all these three sets of experiments.\nCompared with bag-of-words, both AMR and dependency based context-specific representations can achieve better performance, which demonstrates the importance of incorporating a wider range of deep knowledge and semantic relations for context representation. Specifically, AMR and dependency relations can more effectively capture meaningful context information than bag-of-words. For example, in the sentence \u201cThe Kuwolsan was rumored to be carrying arms or ammunition possibly intended for Pakistan,\u201d Kuwolsan is an outof-vocabulary concept. The bag-of-words based method will generate the context-specific representation based on the words like \u201cthe, was, rumored, to, be, carrying\u201d, which is not useful for inferring the type. However, both AMR and dependency based methods can capture semantically related concepts \u201ccarrying, arms, ammunition\u201d, which will help the system to infer the type of \u201cKuwolsan\u201d as \u201cShip\u201d."}, {"heading": "6.8 Type Naming Evaluation", "text": "In order to evaluate the type naming performance, we ask 3 human annotators to determine whether the type label matches the reference class label on the English news data set. We tune the parameter \u03bb which is used in Section 5.2 to find the optimal threshold for type naming, which is shown in Figure 10. From the comparison results, when \u03bb is 0.8, the naming performance is close to 90%.\n7. CONCLUSIONS AND FUTURE WORK\nIn this work, we take a fresh look at the fine-grained entity typing problem and, for the first time, propose an unsupervised framework, which incorporates entity general semantics, specific contexts and domain specific knowledge to discover the fine-grained types. This framework takes the human out of the loop and requires no annotated data or predefined types. Without the needs of language-specific features and resources, this framework can be easily adapted to other domains, genres and languages. We also incorporate a domain- and language-independent unsupervised entity linking system to improve the clustering performance and discover corpus-customized domain-specific fine-grained typing schema. Our framework achieves comparable performance to state-of-the-art entity typing systems trained from a large amount of labeled data. In the future, we will explore joint fine-grained entity linking and typing mentions for mutual enhancement."}, {"heading": "8. REFERENCES", "text": "[1] C. Baker and H. Sato. The framenet data and software. In\nACL, 2003. [2] K. Balog and R. Neumayer. Hierarchical target type\nidentification for entity-oriented queries. In CIKM. [3] L. Banarescu, C. Bonial, S. Cai, M. Georgescu, K. Griffitt,\nU. Hermjakob, K. Knight, P. Koehn, M. Palmer, and N. Schneider. Abstract meaning representation for sembanking. In ACL Workshop on Linguistic Annotation and Interoperability with Discourse, 2013.\n[4] B. Bazzanella, H. Stoermer, and P. Bouquet. Searching for individual entities: a query analysis. In IRI.\n[5] K. Bollacker, C. Evans, P. Paritosh, T. Sturge, and J. Taylor. Freebase: a collaboratively created graph database for structuring human knowledge. In SIGMOD.\n[6] S. Bowman, C. Potts, and C. Manning. Recursive neural networks for learning logical semantics. CoRR, 2014.\n[7] R. Bunescu and R. J. Mooney. A shortest path dependency kernel for relation extraction. In HLT-EMNLP.\n[8] R. Bunescu and M. Pasca. Using encyclopedic knowledge for named entity disambiguation. In EACL, volume 6, 2006.\n[9] L. D. Corro, A. Abujabal, R. Gemulla, and G. Weikum. Finet: Context-aware fine-grained named entity typing. In EMNLP, 2015.\n[10] S. Cucerzan. Large-scale named entity disambiguation based on wikipedia data. In EMNLP-CoNLL, volume 7, 2007.\n[11] A. Culotta and J. Sorensen. Dependency tree kernels for relation extraction. In ACL.\n[12] M. Dredze, P. McNamee, D. Rao, A. Gerber, and T. Finin. Entity disambiguation for knowledge base population. In COLING.\n[13] G. Durrett and D. Klein. A joint model for entity analysis: Coreference, typing, and linking. TACL.\n[14] A. Ekbal, E. Sourjikova, A. Frank, and S. P. Ponzetto. Assessing the challenge of fine-grained named entity recognition and classification. In Named Entities Workshop.\n[15] J. R. Finkel, T. Grenager, and C. Manning. Incorporating non-local information into information extraction systems by gibbs sampling. In ACL.\n[16] J. Flanigan, S. Thomson, J. Carbonell, C. Dyer, and N. A. Smith. A discriminative graph-based parser for the abstract meaning representation. 2014.\n[17] M. Fleischman and E. Hovy. Fine grained classification of named entities. In COLING.\n[18] D. Gillick, N. Lazic, K. Ganchev, J. Kirchner, and D. Huynh. Context-dependent fine-grained entity type tagging. CoRR, 2014.\n[19] C. Giuliano. Fine-grained classification of named entities exploiting latent semantic kernels. In CoNLL.\n[20] R. Grishman and B. Sundheim. Message understanding conference-6: A brief history. In COLING, 1996.\n[21] X. Han and J. Zhao. Named entity disambiguation by leveraging wikipedia semantic knowledge. In CIKM, 2009.\n[22] T. Hasegawa, S. Sekine, and R. Grishman. Discovering relations among named entities from large corpora. In ACL, 2004.\n[23] K. Hermann and P. Blunsom. The role of syntax in vector space models of compositional semantics. In ACL, 2013.\n[24] J. Hoffart, F. M. Suchanek, K. Berberich, and G. Weikum. Yago2: A spatially and temporally enhanced knowledge base from wikipedia. In IJCAI.\n[25] H. Ji and R. Grishman. Knowledge base population: Successful approaches and challenges. In ACL-HLT.\n[26] H. Ji, R. Grishman, H. T. Dang, K. Griffitt, and J. Ellis. Overview of the tac 2010 knowledge base population track.\n[27] K. Kipper, A. Korhonen, N. Ryant, and M. Palmer. Extending verbnet with novel verb classes. In LREC, 2006.\n[28] J. Lafferty, A. McCallum, and F. C. Pereira. Conditional random fields: Probabilistic models for segmenting and labeling sequence data. In ICML, 2001.\n[29] C. Lee, Y.-G. Hwang, H.-J. Oh, S. Lim, J. Heo, C.-H. Lee, H.-J. Kim, J.-H. Wang, and M.-G. Jang. Fine-grained named entity recognition using conditional random fields for question answering. In Information Retrieval Technology.\n[30] T. Lin, O. Etzioni, et al. Entity linking at web scale. In Joint Workshop on Automatic Knowledge Base Construction and Web-scale Knowledge Extraction.\n[31] T. Lin, O. Etzioni, et al. No noun phrase left behind: detecting and typing unlinkable entities. In ACL.\n[32] T. Mikolov, K. Chen, G. Corrado, and J. Dean. Efficient estimation of word representations in vector space. CoRR, 2013.\n[33] T. Mikolov, I. Sutskever, K. Chen, G. Corrado, and J. Dean. Distributed representations of words and phrases and their compositionality. In NIPS, 2013.\n[34] T. Mikolov, W.-t. Yih, and G. Zweig. Linguistic regularities in continuous space word representations. In HLT-NAACL.\n[35] J. Mitchell and M. Lapata. Composition in distributional models of semantics. Cognitive Science, 2010.\n[36] D. Moll\u00e1, M. Van Zaanen, D. Smith, et al. Named entity recognition for question answering. 2006.\n[37] N. Nakashole, T. Tylenda, and G. Weikum. Fine-grained semantic typing of emerging entities. In ACL.\n[38] A. Ng. Sparse autoencoder. CS294A Lecture notes, 72, 2011. [39] X. Pan, T. Cassidy, U. Hermjakob, H. Ji, and K. Knight.\nUnsupervised entity linking with abstract meaning representation.\n[40] D. Pelleg and A. Moore. X-means: Extending k-means with efficient estimation of the number of clusters.\n[41] B. Recht, C. Re, S. Wright, and F. Niu. Hogwild: A lock-free approach to parallelizing stochastic gradient descent. In Advances in Neural Information Processing Systems.\n[42] M. A. Rodr\u00edguez and M. J. Egenhofer. Determining semantic similarity among entity classes from different ontologies. TKDE, 15(2).\n[43] S. Sekine. Extended named entity ontology with attribute information. In LREC, 2008.\n[44] R. Socher, A. Karpathy, Q. Le, C. Manning, and A. Ng. Grounded compositional semantics for finding and describing images with sentences. TACL, 2013.\n[45] R. Socher, A. Perelygin, J. Wu, J. Chuang, C. Manning, A. Ng, and C. Potts. Recursive deep models for semantic compositionality over a sentiment treebank. In EMNLP, 2013.\n[46] F. Suchanek, G. Kasneci, and G. Weikum. Yago: a core of semantic knowledge. In WWW.\n[47] H. Sun, H. Ma, W.-t. Yih, C.-T. Tsai, J. Liu, and M.-W. Chang. Open domain question answering via semantic enrichment. In WWW.\n[48] J. Tang, M. Qu, M. Wang, M. Zhang, J. Yan, and Q. Mei. Line: Large-scale information network embedding. In WWW.\n[49] J. Turian, L. Ratinov, and Y. Bengio. Word representations: a simple and general method for semi-supervised learning. In ACL.\n[50] H. Wang, J. G. Zheng, X. Ma, P. Fox, and H. Ji. Language and domain independent entity linking with quantified collective validation.\n[51] L. Xiao and D. S. Weld. Fine-grained entity recognition. In\nAAAI, 2012. [52] W. Yin and H. Sch\u00fctze. An exploration of embeddings for\ngeneralized phrases. In ACL Workshop on Student Research, 2014.\n[53] D. Yogatama, D. Gillick, and N. Lazic. Embedding methods for fine grained entity type classification. In ACL-IJCNLP.\n[54] A. Yosef, S. Bauer, J. Hoffart, M. Spaniol, and G. Weikum. Hyena: Hierarchical type classification for entity names. 2012.\n[55] Y. Zhao, S. Huang, X. Dai, J. Zhang, and J. Chen. Learning word embeddings from dependency relations. In IALP.\n[56] J. G. Zheng, D. Howsmon, B. Zhang, J. Hahn, D. McGuinness, J. Hendler, and H. Ji. Entity linking for biomedical literature. BMC Medical Informatics and Decision Making, 2014."}], "references": [{"title": "The framenet data and software", "author": ["C. Baker", "H. Sato"], "venue": "In ACL,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "Abstract meaning representation for sembanking", "author": ["L. Banarescu", "C. Bonial", "S. Cai", "M. Georgescu", "K. Griffitt", "U. Hermjakob", "K. Knight", "P. Koehn", "M. Palmer", "N. Schneider"], "venue": "In ACL Workshop on Linguistic Annotation and Interoperability with Discourse,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "Recursive neural networks for learning logical semantics", "author": ["S. Bowman", "C. Potts", "C. Manning"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2014}, {"title": "Using encyclopedic knowledge for named entity disambiguation", "author": ["R. Bunescu", "M. Pasca"], "venue": "In EACL,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2006}, {"title": "Finet: Context-aware fine-grained named entity typing", "author": ["L.D. Corro", "A. Abujabal", "R. Gemulla", "G. Weikum"], "venue": "In EMNLP,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Large-scale named entity disambiguation based on wikipedia data", "author": ["S. Cucerzan"], "venue": "In EMNLP-CoNLL,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2007}, {"title": "A discriminative graph-based parser for the abstract meaning", "author": ["J. Flanigan", "S. Thomson", "J. Carbonell", "C. Dyer", "N.A. Smith"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2014}, {"title": "Context-dependent fine-grained entity type tagging", "author": ["D. Gillick", "N. Lazic", "K. Ganchev", "J. Kirchner", "D. Huynh"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2014}, {"title": "Message understanding conference-6: A brief history", "author": ["R. Grishman", "B. Sundheim"], "venue": "In COLING,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1996}, {"title": "Named entity disambiguation by leveraging wikipedia semantic knowledge", "author": ["X. Han", "J. Zhao"], "venue": "In CIKM,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2009}, {"title": "Discovering relations among named entities from large corpora", "author": ["T. Hasegawa", "S. Sekine", "R. Grishman"], "venue": "In ACL,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2004}, {"title": "The role of syntax in vector space models of compositional semantics", "author": ["K. Hermann", "P. Blunsom"], "venue": "In ACL,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2013}, {"title": "Overview of the tac 2010 knowledge base population", "author": ["H. Ji", "R. Grishman", "H.T. Dang", "K. Griffitt", "J. Ellis"], "venue": null, "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2010}, {"title": "Extending verbnet with novel verb classes", "author": ["K. Kipper", "A. Korhonen", "N. Ryant", "M. Palmer"], "venue": "In LREC,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2006}, {"title": "Conditional random fields: Probabilistic models for segmenting and labeling sequence data", "author": ["J. Lafferty", "A. McCallum", "F.C. Pereira"], "venue": "In ICML,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2001}, {"title": "Efficient estimation of word representations in vector space", "author": ["T. Mikolov", "K. Chen", "G. Corrado", "J. Dean"], "venue": null, "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2013}, {"title": "Distributed representations of words and phrases and their compositionality", "author": ["T. Mikolov", "I. Sutskever", "K. Chen", "G. Corrado", "J. Dean"], "venue": "In NIPS,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2013}, {"title": "Composition in distributional models of semantics", "author": ["J. Mitchell", "M. Lapata"], "venue": "Cognitive Science,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2010}, {"title": "Named entity recognition for question answering", "author": ["D. Moll\u00e1", "M. Van Zaanen", "D. Smith"], "venue": null, "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2006}, {"title": "Sparse autoencoder", "author": ["A. Ng"], "venue": "CS294A Lecture notes,", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2011}, {"title": "Extended named entity ontology with attribute information", "author": ["S. Sekine"], "venue": "In LREC,", "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2008}, {"title": "Grounded compositional semantics for finding and describing images with sentences", "author": ["R. Socher", "A. Karpathy", "Q. Le", "C. Manning", "A. Ng"], "venue": "TACL,", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 2013}, {"title": "Recursive deep models for semantic compositionality over a sentiment treebank", "author": ["R. Socher", "A. Perelygin", "J. Wu", "J. Chuang", "C. Manning", "A. Ng", "C. Potts"], "venue": "In EMNLP,", "citeRegEx": "45", "shortCiteRegEx": "45", "year": 2013}, {"title": "Fine-grained entity recognition", "author": ["L. Xiao", "D.S. Weld"], "venue": "In  AAAI,", "citeRegEx": "51", "shortCiteRegEx": "51", "year": 2012}, {"title": "An exploration of embeddings for generalized phrases", "author": ["W. Yin", "H. Sch\u00fctze"], "venue": "In ACL Workshop on Student Research,", "citeRegEx": "52", "shortCiteRegEx": "52", "year": 2014}, {"title": "Hyena: Hierarchical type classification for entity names", "author": ["A. Yosef", "S. Bauer", "J. Hoffart", "M. Spaniol", "G. Weikum"], "venue": null, "citeRegEx": "54", "shortCiteRegEx": "54", "year": 2012}, {"title": "Entity linking for biomedical literature", "author": ["J.G. Zheng", "D. Howsmon", "B. Zhang", "J. Hahn", "D. McGuinness", "J. Hendler", "H. Ji"], "venue": "BMC Medical Informatics and Decision Making,", "citeRegEx": "56", "shortCiteRegEx": "56", "year": 2014}], "referenceMentions": [{"referenceID": 8, "context": "For example, MUC-7 [20] defined the three most common types: Person, Organization, and Location.", "startOffset": 19, "endOffset": 23}, {"referenceID": 5, "context": "These entity types are very useful for many downstream Natural Language Processing (NLP) and Information Retrieval (IR) tasks such as entity disambiguation [10, 8, 21], entity linking [42, 30, 13], relation extraction [22, 11, 7], knowledge base completion [25, 12, 46], question answering [36, 47], and query analysis [2, 4].", "startOffset": 156, "endOffset": 167}, {"referenceID": 3, "context": "These entity types are very useful for many downstream Natural Language Processing (NLP) and Information Retrieval (IR) tasks such as entity disambiguation [10, 8, 21], entity linking [42, 30, 13], relation extraction [22, 11, 7], knowledge base completion [25, 12, 46], question answering [36, 47], and query analysis [2, 4].", "startOffset": 156, "endOffset": 167}, {"referenceID": 9, "context": "These entity types are very useful for many downstream Natural Language Processing (NLP) and Information Retrieval (IR) tasks such as entity disambiguation [10, 8, 21], entity linking [42, 30, 13], relation extraction [22, 11, 7], knowledge base completion [25, 12, 46], question answering [36, 47], and query analysis [2, 4].", "startOffset": 156, "endOffset": 167}, {"referenceID": 10, "context": "These entity types are very useful for many downstream Natural Language Processing (NLP) and Information Retrieval (IR) tasks such as entity disambiguation [10, 8, 21], entity linking [42, 30, 13], relation extraction [22, 11, 7], knowledge base completion [25, 12, 46], question answering [36, 47], and query analysis [2, 4].", "startOffset": 218, "endOffset": 229}, {"referenceID": 18, "context": "These entity types are very useful for many downstream Natural Language Processing (NLP) and Information Retrieval (IR) tasks such as entity disambiguation [10, 8, 21], entity linking [42, 30, 13], relation extraction [22, 11, 7], knowledge base completion [25, 12, 46], question answering [36, 47], and query analysis [2, 4].", "startOffset": 290, "endOffset": 298}, {"referenceID": 23, "context": "Recent work [51, 29] suggests that using a larger set of finegrained types can lead to substantial improvement for these downstream NLP applications.", "startOffset": 12, "endOffset": 20}, {"referenceID": 23, "context": "[51] described three remaining challenges for the fine-grained entity typing task: selection of a set of fine-grained types, creation of annotated data and linguistic features, and disambiguation of fine-grained types.", "startOffset": 0, "endOffset": 4}, {"referenceID": 23, "context": "Most existing approaches [17, 19, 14, 51, 54, 37, 18, 53, 9] addressed these problems in a \u201cdistant supervision\u201d fashion, by pre-defining a set of fine-grained types based on existing knowledge bases (KBs) (e.", "startOffset": 25, "endOffset": 60}, {"referenceID": 25, "context": "Most existing approaches [17, 19, 14, 51, 54, 37, 18, 53, 9] addressed these problems in a \u201cdistant supervision\u201d fashion, by pre-defining a set of fine-grained types based on existing knowledge bases (KBs) (e.", "startOffset": 25, "endOffset": 60}, {"referenceID": 7, "context": "Most existing approaches [17, 19, 14, 51, 54, 37, 18, 53, 9] addressed these problems in a \u201cdistant supervision\u201d fashion, by pre-defining a set of fine-grained types based on existing knowledge bases (KBs) (e.", "startOffset": 25, "endOffset": 60}, {"referenceID": 4, "context": "Most existing approaches [17, 19, 14, 51, 54, 37, 18, 53, 9] addressed these problems in a \u201cdistant supervision\u201d fashion, by pre-defining a set of fine-grained types based on existing knowledge bases (KBs) (e.", "startOffset": 25, "endOffset": 60}, {"referenceID": 20, "context": "Sekine [43] defined more than 200 types of entities.", "startOffset": 7, "endOffset": 11}, {"referenceID": 1, "context": "The Abstract Meaning Representation (AMR) [3] defined more than 100 types of entities.", "startOffset": 42, "endOffset": 45}, {"referenceID": 23, "context": "FIGER [51] derived 112 entity types from Freebase [5] and trained a linearchain CRF model [28] for joint entity identification and typing.", "startOffset": 6, "endOffset": 10}, {"referenceID": 14, "context": "FIGER [51] derived 112 entity types from Freebase [5] and trained a linearchain CRF model [28] for joint entity identification and typing.", "startOffset": 90, "endOffset": 94}, {"referenceID": 7, "context": "[18] and Yogatama et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "HYENA [54] derived a very fine-grained type taxonomy from YAGO [24] based on a mapping between Wikipedia categories and WordNet synsets.", "startOffset": 6, "endOffset": 10}, {"referenceID": 24, "context": "[52] computed embeddings for generalized phrases, including both conventional linguistic phrases and skipbigrams.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "[35] proposed an additive model and a multiplicative model.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "Linguistic structures have been proven useful to capture the semantics of basic language units [45, 23, 44, 6].", "startOffset": 95, "endOffset": 110}, {"referenceID": 11, "context": "Linguistic structures have been proven useful to capture the semantics of basic language units [45, 23, 44, 6].", "startOffset": 95, "endOffset": 110}, {"referenceID": 21, "context": "Linguistic structures have been proven useful to capture the semantics of basic language units [45, 23, 44, 6].", "startOffset": 95, "endOffset": 110}, {"referenceID": 2, "context": "Linguistic structures have been proven useful to capture the semantics of basic language units [45, 23, 44, 6].", "startOffset": 95, "endOffset": 110}, {"referenceID": 21, "context": "[44] designed a DT-RNN model to map sentences into compositional vector representations based on dependency trees.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "[23] explored a novel class of Combinatory Categorial Autoencoders to utilize the role of syntax in Combinatory Categorial Grammar to model compositional semantics.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "[45] designed a Recursive Neural Tensor Network (RNTN) to compute sentiment compositionality based on the Sentiment Treebank.", "startOffset": 0, "endOffset": 4}, {"referenceID": 2, "context": "[6] designed three sets of experiments to encode semantic inference based on compositional semantic representations.", "startOffset": 0, "endOffset": 3}, {"referenceID": 16, "context": "Several models [33, 32, 55, 35] have been proposed to generate word embeddings.", "startOffset": 15, "endOffset": 31}, {"referenceID": 15, "context": "Several models [33, 32, 55, 35] have been proposed to generate word embeddings.", "startOffset": 15, "endOffset": 31}, {"referenceID": 17, "context": "Several models [33, 32, 55, 35] have been proposed to generate word embeddings.", "startOffset": 15, "endOffset": 31}, {"referenceID": 15, "context": "Here, we utilize the Continuous Skip-gram model [32] based on a large amount of unlabeled in-domain data set.", "startOffset": 48, "endOffset": 52}, {"referenceID": 24, "context": "[52], which learned phrase embeddings directly by considering a phrase as a basic language unit, and (2) a simple element-based additive model (z = x1 + x2 + .", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "+ xi) [32], where z represents a phrase embedding and x1, x2, .", "startOffset": 6, "endOffset": 10}, {"referenceID": 22, "context": "Linguistic structures have been proven useful for capturing the semantics of basic language units [45, 23, 44, 6].", "startOffset": 98, "endOffset": 113}, {"referenceID": 11, "context": "Linguistic structures have been proven useful for capturing the semantics of basic language units [45, 23, 44, 6].", "startOffset": 98, "endOffset": 113}, {"referenceID": 21, "context": "Linguistic structures have been proven useful for capturing the semantics of basic language units [45, 23, 44, 6].", "startOffset": 98, "endOffset": 113}, {"referenceID": 2, "context": "Linguistic structures have been proven useful for capturing the semantics of basic language units [45, 23, 44, 6].", "startOffset": 98, "endOffset": 113}, {"referenceID": 1, "context": "Many linguistic knowledge representations and resources, including AMR (Abstract Meaning Representation [3]), dependency parsing, semantic role labeling (SRL), VerbNet [27] and FrameNet [1], can be exploited to capture linguistic properties.", "startOffset": 104, "endOffset": 107}, {"referenceID": 13, "context": "Many linguistic knowledge representations and resources, including AMR (Abstract Meaning Representation [3]), dependency parsing, semantic role labeling (SRL), VerbNet [27] and FrameNet [1], can be exploited to capture linguistic properties.", "startOffset": 168, "endOffset": 172}, {"referenceID": 0, "context": "Many linguistic knowledge representations and resources, including AMR (Abstract Meaning Representation [3]), dependency parsing, semantic role labeling (SRL), VerbNet [27] and FrameNet [1], can be exploited to capture linguistic properties.", "startOffset": 186, "endOffset": 189}, {"referenceID": 19, "context": "To reduce the dimensions and generate a high quality embedding for the specific context, we utilize the sparse auto-encoder framework [38] to learn more low-dimensional representations.", "startOffset": 134, "endOffset": 138}, {"referenceID": 26, "context": ", labels, names, aliases), to locate a list of candidate entities e \u2208 E and compute the importance score by an entropy based approach [56].", "startOffset": 134, "endOffset": 138}, {"referenceID": 26, "context": "We also collect all entities and their properties and type labels from DBpedia and 300+ biomedical domain specific ontologies crawled from BioPortal [56] to learn knowledge embeddings.", "startOffset": 149, "endOffset": 153}, {"referenceID": 23, "context": "We compare with two high-performing name taggers, Stanford NER [15] and FIGER [51], on both coarse-grained types (Person, Location, and Organization), and fine-grained types.", "startOffset": 78, "endOffset": 82}, {"referenceID": 6, "context": "We utilize the AMR parser developed by [16] and manually map AMR types and system generated types to three coarse-grained types.", "startOffset": 39, "endOffset": 43}, {"referenceID": 12, "context": "We utilize the ambiguity measure defined in [26] as the criteria to demonstrate the ambiguity degree of news and biomedical domains.", "startOffset": 44, "endOffset": 48}], "year": 2016, "abstractText": "Recent research has shown great progress on fine-grained entity typing. Most existing methods require pre-defining a set of types and training a multi-class classifier from a large labeled data set based on multi-level linguistic features. They are thus limited to certain domains, genres and languages. In this paper, we propose a novel unsupervised entity typing framework by combining symbolic and distributional semantics. We start from learning general embeddings for each entity mention, compose the embeddings of specific contexts using linguistic structures, link the mention to knowledge bases and learn its related knowledge representations. Then we develop a novel joint hierarchical clustering and linking algorithm to type all mentions using these representations. This framework doesn\u2019t rely on any annotated data, predefined typing schema, or hand-crafted features, therefore it can be quickly adapted to a new domain, genre and language. Furthermore, it has great flexibility at incorporating linguistic structures (e.g., Abstract Meaning Representation (AMR), dependency relations) to improve specific context representation. Experiments on genres (news and discussion forum) show comparable performance with state-of-the-art supervised typing systems trained from a large amount of labeled data. Results on various languages (English, Chinese, Japanese, Hausa, and Yoruba) and domains (general and biomedical) demonstrate the portability of our framework.", "creator": "LaTeX with hyperref package"}}}