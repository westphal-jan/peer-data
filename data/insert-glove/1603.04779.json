{"id": "1603.04779", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Mar-2016", "title": "Revisiting Batch Normalization For Practical Domain Adaptation", "abstract": "goalkickers Deep yazawa neural networks (martlets DNN) have shown mediate unprecedented stortinget success 7,240 in toamasina various computer vision franc\u00e9s applications 6,448 such winstead as image classification dusun and 1.117 object detection. well-appointed However, anti-monarchist it is 670,000 still a common (rawa yet folksongs inconvenient) abdoulkarim practice to prepare at least tens gerbeau of armonia thousands underinsured of labeled image to borrisoleigh fine - tune part-timers a cuestas network talmadge on dhalla every s.a.s. task pap before the trebitsch model is 1,364 ready to use. moteurs Recent study shows that planked a sinuosity DNN pappy has strong th\u00e9orie dependency peaky towards hezb-e the mcatee training dataset, and the top-scored learned features ankur cannot landeshauptmann be easily gregis transferred 101-run to mbeki a different but relevant task mahmudabad without wizna fine - autlan tuning.", "histories": [["v1", "Tue, 15 Mar 2016 17:44:32 GMT  (1263kb,D)", "http://arxiv.org/abs/1603.04779v1", null], ["v2", "Wed, 16 Mar 2016 03:57:19 GMT  (1263kb,D)", "http://arxiv.org/abs/1603.04779v2", null], ["v3", "Wed, 21 Sep 2016 08:41:43 GMT  (1223kb,D)", "http://arxiv.org/abs/1603.04779v3", null], ["v4", "Tue, 8 Nov 2016 06:11:30 GMT  (6116kb,D)", "http://arxiv.org/abs/1603.04779v4", null]], "reviews": [], "SUBJECTS": "cs.CV cs.LG", "authors": ["yanghao li", "naiyan wang", "jianping shi", "jiaying liu", "xiaodi hou"], "accepted": false, "id": "1603.04779"}, "pdf": {"name": "1603.04779.pdf", "metadata": {"source": "CRF", "title": "Revisiting Batch Normalization For Practical Domain Adaptation", "authors": ["Yanghao Li", "Naiyan Wang", "Jianping Shi", "Jiaying Liu", "Xiaodi Hou"], "emails": ["lyttonhao@pku.edu.cn", "winsty@gmail.com", "shijianping5000@gmail.com", "liujiaying@pku.edu.cn", "xiaodi.hou@gmail.com"], "sections": [{"heading": null, "text": "Keywords: Domain adaptation; Batch normalization"}, {"heading": "1 Introduction", "text": "Training a DNN for a new image recognition task is expensive. It requires a large amount of labeled training images that are not easy to obtain. One common practice is to use a training set from a different source. For instance, one can borrow training data from an existing dataset, or query images from search engines and then label them using Amazon Turk. These approaches usually suffer from inferior performance due to dataset discrepancies, or \u201cdataset bias\u201d, because 1) the distributions of the source domains (third party datasets or Internet images) are often different from the target domain (testing images); and 2) DNN is particularly good at capturing dataset bias in its internal representation [3], which eventually leads to overfitting.\n? The work was done when Yanghao Li was an intern in TuSimple.\nar X\niv :1\n60 3.\n04 77\n9v 1\n[ cs\n.C V\n] 1\n5 M\nar 2\n2 Yanghao Li\u2020, Naiyan Wang\u2021, Jianping Shi , Jiaying Liu\u2020, and Xiaodi Hou\u2021\nKnown as domain adaptation, the effort to bridge the gap between training and testing data distribution has been discussed several times under the context of deep learning [4,5,6,7]. Under common settings, an algorithm is provided with labeled data from source domain and unlabeled data from target domain. In order to make the connection between data from two domains, most of these methods require additional optimization steps and extra parameters. These extra computational burden could greatly complicate the training of a DNN which is already intimidating enough for most people.\nIn this paper, we propose a simple yet effective approach called AdaBN for batch normalized DNN domain adaptation.We hypothesize that the label related knowledge is stored in the weight matrix of each layer, whereas domain related knowledge is represented by the statistics of the Batch Normalization (BN) layer. Therefore, we can easily transfer the trained model to a new domain by modulating the statistics in the BN layer. This approach is straightforward to implement, has zero parameter to tune, and requires minimal computational resources. Moreover, our AdaBN is ready to extend to more sophisticated scenarios such as multi domain adaptation and semi-supervised settings. Fig. 1 illustrates the flow-chart of AdaBN. To summarize, our contributions are as follows:\nRevisiting Batch Normalization For Practical Domain Adaptation 3\n1. We propose a novel domain adaptation technique called Adaptive Batch Normalization(AdaBN). We show that AdaBN can naturally dissociate bias and variance terms of a dataset, which is ideal for domain adaptation tasks. 2. We validate the effectiveness of our approaches on standard benchmarks for both single source and multiple sources domain adaptation. Our method outperforms the state-of-the-art methods."}, {"heading": "2 Related Work", "text": "Domain transfer in visual recognition tasks has gained increasing attention in recent literature [8,9]. Often referred as covariance shift [10] or dataset bias [3], this problem poses great challenge to the generalization ability of a learned model. One key component of domain transfer is to model the difference between source and target distributions. In [11], the authors assign each dataset with an explicit bias vector, and train one discriminative model to handle multiple classification problems with different bias terms. A more explicit way to compute dataset difference is based on Maximum Mean Discrepancy [12]. It uses a nonlinear mapping to project each data sample into a Reproducing Kernel Hilbert Space, and then compute the difference of sample means. To reduce dataset discrepancies, many methods are proposed, including sample selections [13,14], explicit projection learning [15,16,17] and principal axes alignment [18,19].\nAll of these methods face the same challenge of devising an effective domain transfer function in high-dimensional non-linear space. Due to computational constraints, most of the proposed transfer functions are in the category of simple linear projections.\nIn the field of deep learning, feature transferability across different domains is a tantalizing yet generally unsolved topic [20,1]. To transfer the learned representations to a new dataset, pre-training and fine-tuning [21] have become de facto procedures. However, adaptation by fine-tuning is far from perfect. It requires a considerable amount of labeled data from the target domain, and non-negligible computational resources to re-train the whole network.\nA series of progress has been made in DNN to facilitate domain transfer. Early works of domain adaptation either focus on reordering fine-tuning samples [22], or regularizing MMD [12] in a shallow network [23]. It is only until recently that the problem is directly attacked under the assumption of unlabeled target domain and modern convolutional neural network architecture. Tzeng et al. [4] used the classical MMD loss to regularize the representation in the last layer of CNN. Long et al. [5] further extend the method to multiple kernel MMD and multiple layer adaptation. Ganin et al. [7] devised a gradient reverse layer to reverse the gradient that helps to distinguish the domains of each data sample. This layer efficiently anonymizes the domain information hidden in the CNN features. Recently, Tzeng et al. [6] proposed to simultaneously transfer task correlations and maximize domain confusion for (semi)-supervised domain adaptation.\nAnother related work is CORAL [24]. Different from our approach, this model focuses on the last layer of CNN. CORAL whitens both the data in source domain\n4 Yanghao Li\u2020, Naiyan Wang\u2021, Jianping Shi , Jiaying Liu\u2020, and Xiaodi Hou\u2021\nand target domain, and then re-correlate the source domain features to target domain. This operation aligns the second order statistics of source domain and target domain distributions. Surprisingly, such simple approach yields state-ofthe-arts results in various text classification and visual recognition tasks."}, {"heading": "2.1 Batch Normalization Revisited", "text": "In this section, we briefly review Batch Normalization(BN) [2] which is closely related to our AdaBN. The BN layer is originally designed to alleviate the issue of internal covariance shifting \u2013 a common problem while training a very deep neural network. It first standardizes each feature in a mini-batch, and then learn a common slope and bias for each mini-batch. Formally, given the input to a BN layer X \u2208 Rn\u00d7p, where n denotes the batch size, and p is the feature dimension, BN layer transform a feature j \u2208 {1 . . . p} into:\nx\u0302j = xj \u2212 E[X\u00b7j ]\u221a\nVar[X\u00b7j ]\nyj = \u03b3j x\u0302j + \u03b2j ,\n(1)\nwhere xj and yj are the input/output scalars of one neuron response in one data sample; X\u00b7j denotes the j\nth column of the input data; and \u03b3j and \u03b2j are parameters to be learned. This transformation guarantees that the input distribution of each layer remains unchanged across different mini-batches. For Stochastic Gradient Descent (SGD) optimization, a stable input distribution could greatly facilitate model convergency, leading to much faster training speed for CNN. Moreover, if training data are shuffled at each epoch, one training sample is transformed, or augmented differently in each epoch. This property acts as an additional regularization to combat against overfitting. In the testing phase, we use the global statistics instead of the statistics from one mini-batch to stabilize the testing results.\nSince BN layer can both reduce internal covariant shift and overfitting, it significantly reduces the number of iteration to converge, and improve the final performance at the same time. BN layer has become a standard component in recent top-performing CNN architectures, such as deep residual network [25], and Inception V3 [26]."}, {"heading": "3 The Model", "text": "In this section, we first analyze the domain shift in deep neural network, and reveal two key observations in Sec. 3.1. Then in Sec. 3.2, we introduce our Adaptive Batch Normalization(AdaBN) method based on these observations. At last, we analyze our method in depth in Sec. 3.3.\nRevisiting Batch Normalization For Practical Domain Adaptation 5"}, {"heading": "3.1 A Pilot Experiment", "text": "Although the Batch Normalization (BN) technique is originally proposed to help SGD optimization, its core idea is about aligning training data from different distributions. From this perspective, it is interesting to examine the BN parameters (batch-wise mean and variance) over different dataset at different layers of the network.\nIn this pilot experiment, we use MXNet implementation [27] of the InceptionBN model [2] pre-trained on ImageNet classification task [28] as our baseline DNN model. Our image data are drawn from [29], which contains the same classes of images from both Caltech-256 dataset [30] and Bing image search results. For each mini-batch sampled from one dataset, we first choose one layer, and then concatenate the mean and variance of each neuron to form a feature vector. Using linear SVM, we can perfectly classify whether the mini-batch feature vector is from Caltech-256 or Bing image search. Fig. 2 visualizes the distributions of mini-batch feature vectors in 2D, which further corroborate the observation that the BN statistics from different domains are clearly separated into clusters.\nThis pilot experiment suggests:\n1. Both shallow layers and deep layers exhibit domain shift in DNN, thus only adapting the last layer is not enough. Deep adaptation is a must. 2. The statistics of BN layer is a good indication of domains. This confirms the hypothesis that the domain specific knowledge are stored in the statistics of BN layer.\nBoth two observations motivate us to adapt the representation across different domains by BN layer.\n6 Yanghao Li\u2020, Naiyan Wang\u2021, Jianping Shi , Jiaying Liu\u2020, and Xiaodi Hou\u2021"}, {"heading": "3.2 Adaptive Batch Normalization", "text": "Given the pre-trained DNN model and a target domain, our Adaptive Batch Normalization (AdaBN) algorithm is as follows1:\nAlgorithm 1 Adaptive Batch Normalization (AdaBN)\nfor neuron j in DNN, image m in target domain do Concatenate neuron responses on all images of target domain: xj = [xj(m), . . .] Compute the mean and variance of the target domain: \u00b5tj = E(xtj), \u03c3tj = \u221a Var(xtj). end for for neuron j in DNN, testing image m in target domain do\nCompute BN output yj(m) := \u03b3j\n( xj(m)\u2212\u00b5tj ) \u03c3tj + \u03b2j\nend for\nThe intuition behind our method is very straightforward: The standardization of each layer by domain ensures that each layer received data from a similar distribution no matter in source domain or target domain, thus the domain information is anonymized.\nFor multi-source domain adaptation, the only change is we must standardize each sample by the statistics in its own domain. Since in training the statistics are calculated in one mini-batch, we only need to make sure that the samples in one mini-batch are from the same domain. While for (semi-)supervised domain adaptation, we may use the labeled data to fine-tune the weights as well. As a result, our method could fit in all different settings of domain adaptation with minor effort."}, {"heading": "3.3 Further thoughts about AdaBN", "text": "One natural question to ask is whether such simple translation and scaling of features could deal with complicated domain shift? The answer is yes. As we all know, neural networks is a highly non-linear composite functions. Consider a simple neural network with input input x \u2208 Rp1\u00d71. It has one BN layer with mean and variance of each feature being \u00b5i and \u03c3 2 i , one fully connected layer with weight matrix W \u2208 Rp1\u00d7p2 and bias b \u2208 Rp2\u00d71, and a non-linear transformation layer f(\u00b7). The output of this network is f(WTa x + b\u2032a), where\nWa = W T\u03a3\u22121, ba = \u2212WT\u03a3\u22121\u00b5 + b,\n\u03a3 = diag(\u03c321 , ..., \u03c3 2 p1), \u00b5 = (\u00b51, ..., \u00b5p1).\n(2)\n1 In practice we adopt an online algorithm [32] to efficiently estimate the mean and variance.\nRevisiting Batch Normalization For Practical Domain Adaptation 7\nThe output without BN is simply f(WTx+b). We can see that the transformation is highly non-linear even for a simple network with one computation layer. As CNN architecture goes deeper, it will gain increasing power to represent more complicated transformations.\nAnother question is why we transform the neuron responses independently, not decorrelate and then re-correlate the responses as suggested in [24]. We admit that decorrelation may improve the performance, however in the optimization of CNN the mini-batch size is usually smaller than the feature dimension. As a result, the covariance matrix is always singular. In addition, decorrelation requires to compute the inverse of the covariance matrix which is computationally intensive, especially if we plan to apply AdaBN for every layer of the network."}, {"heading": "4 Experiments", "text": "In this section, we demonstrate the effectiveness of AdaBN on standard domain adaptation datasets, and empirically analyze the adapted features."}, {"heading": "4.1 Experimental Settings", "text": "We first introduce our experimental settings on two standard datasets: Office [33] and Caltech-Bing [29], some baselines and the configurations of our experiments.\nOffice [33] is a standard benchmark for domain adaptation, which is a collection of 4652 images in 31 classes from three different domains: Amazon(A), DSRL(D) and Webcam(W). We evaluate all the six adaptation tasks in our experiments, which are commonly adopted by other domain adaptation methods [4,24,5]. For multi-source domain adaptation, we evaluate our method on the three transfer tasks (A, W) \u2192 D, (A, D) \u2192 W, (D, W) \u2192 W.\nCaltech-Bing [29] is a much larger domain adaptation dataset, which contains 30,607 and 121,730 images in 256 categories from two domains Caltech256(C) and Bing(B), respectively. The images in the Bing set are collected from Internet by Bing image search with the corresponding keywords, which has significantly different data distribution from that from Caltech-256.\nWe compare our method with a variety of methods, including three shallow methods: SA [18], GFK [19], CORAL [24], and three deep methods: DDC [4], DAN [5], RevGrad [7]. Specifically, GFK models domain shift by integrating an infinite number of subspaces that characterize changes in statistical properties from the source to the target domain. SA and CORAL align the source and target subspaces by explicit feature space transformations that would map source distribution into the target ones. DDC and DAN are the deep learning based methods which maximizes domain invariance by adding to AlexNet one or several adaptation layers using MMD. RevGrad incorporates a gradient reversal layer in the deep model to encourage learning domain-invariant features. It should be noted that these deep learning methods only add adaptation layers on several top layers of the DNN, in contrast that our method delves into early convolution layers as well with the help of the BN layers.\n8 Yanghao Li\u2020, Naiyan Wang\u2021, Jianping Shi , Jiaying Liu\u2020, and Xiaodi Hou\u2021\nWe follow the full protocol [21] for the single source setting; while for multiple sources setting, we use all the samples in the source domains as training data, and use all the samples in the target domain as testing data. We fine-tune the Inception-BN [2] model on source domain in each task for 100 epochs. The learning rate starts from 0.01, and then decreases by factor 0.1 every 40 epoch. Since the office dataset is quite small, following the best practice in [5], we freeze the first three groups of Inception modules, and set the learning rate of fourth and fifth group one tenth of the base learning rate to avoid overfitting. For Caltech-Bing dataset, we fine-tune the whole model with the same base learning rate."}, {"heading": "4.2 Results", "text": "Office Dataset We report our results on Office in the single and multiple sources settings in Table 1 and Table 2, respectively. Note that the models in the first part of the Table 1 are pre-trained on AlexNet [34] instead of the Inception-BN [2] model, because there is no public pre-trained Inception BN model in Caffe [35]. Thus, the absolute number cannot be directly compared, the relative improvements over baseline is a more reasonable metric.\nFrom Table 1, we first notice that the Inception BN [2] model indeed improves over the AlexNet [34] model on average, which means that the CNN pre-trained on ImageNet indeed learns general features, the improvements on ImageNet can be transferred on new tasks. Among the methods based on Inception BN features, our method improves the most over the baseline, which validates the need of deep adaptation. Moreover, since our method is complementary to other ones, we simply apply CORAL on the adapted features by our method. Not surprisingly, this simple combination indeed exhibits 0.5% increase in performance. This preliminary test reveals the further potential of our method if combining with other advanced domain adaptation methods. Finally, we could improve 1.7% over the baseline, and advance the state-of-the-art results for this dataset. Compared to other methods based on AlexNet, our method is better than DDC and RevGrad, and worse than DAN in terms of relative improvements over corresponding baselines.\nSince all the compared methods do not report the performance on multisource domain adaptation setting, here we only compare AdaBN with the best algorithm CORAL in the single source setting. Analyzing the results of the baseline in Table 2, we find that simply combining two domains will not lead to better performance. The result is generally worse than the higher one of using each source domain separately. This phenomenon suggests that if we cannot properly cope with domain bias, the increase of training samples may be reversely harmful to the testing performance. This result confirms the necessity of domain adaptation. In this more challenging setting, our method still outperforms the baseline and CORAL on average. Again, when combining with CORAL, our method demonstrates further improvements. At last, our method archives 2.3% gain over the baseline.\nCaltech-Bing Dataset To further evaluate our method on the large-scale dataset, we show our results on Caltech-Bing Dataset in Table 3. Compared with CORAL, AdaBN achieves better performance, which improves 1.8% over the baseline. Note that all the domain adaptation methods show minor improvements over the baseline in the task C \u2192 B. We hypothesize the reason is that the images in Bing dataset are collected from Internet, which are more diverse and noisy. Thus, it is not easy to adapt on the Bing dataset from the relatively clean dataset Caltech-256.\n10 Yanghao Li\u2020, Naiyan Wang\u2021, Jianping Shi , Jiaying Liu\u2020, and Xiaodi Hou\u2021"}, {"heading": "4.3 Empirical Analysis", "text": "In this section, we conduct two experiments to empirically analyze the features adapted by our method and another experiment to illustrate how the number of samples in target domain affects the performance.\nVisualization of Features. We first visualize the features of the last layer before and after adaptation using t-SNE [31] in Fig. 3. We choose two adaption settings for illustration: Amazon to webcam and Amazon to DSLR. Each red circle represents one training sample, while each blue circle represents one testing sample. We can see that the features of testing data after adaption are blended more evenly with the training data compared to those without adaption. In other words, the distribution of testing samples is more consistent with the training one. This intuitive illustration again confirms that our method is effective against domain shift.\nRevisiting Batch Normalization For Practical Domain Adaptation 11\nAnalysis of Feature Divergence. In the second experiment, we analyze the statistics of the output of one shallow layer (the output of second convolution layer) and one deep layer (the output of last Inception module before ReLU) in the network. In particular, we compute the distance of source domain distribution and target domain distribution before and after adaptation. We denote each feature i as Fi, and assume that the output of each feature generally follows a Gaussian distribution with mean \u00b5i and variance \u03c3 2 i . Then we use the symmetric KL divergence as our metric:\nD(Fi || Fj) = KL(Fi || Fj) + KL(Fj || Fi),\nKL(Fi || Fj) = log \u03c3j \u03c3i + \u03c32i + (\u00b5i \u2212 \u00b5j)2 2\u03c32j \u2212 1 2 .\n(3)\nWe plot the distribution of the distances in Fig. 4. Obviously, our method both reduce the domain discrepancy in shallow layer and deep layer. We also report the quantitative results in Table. 4. This experiment once more verifies the effectiveness of our proposed method.\nSensitivity to Target Domain Size. Since the key of our method is to calculate the mean and variance of the target domain on different BN layers, it is very natural to ask how many target images is necessary to obtain the stable statistics. Therefore, we randomly select a part of images in target domain to calculate the statistics and then evaluate the performance on the whole target images set in the task B \u2192 C and A \u2192 W, respectively. Fig. 5 illustrates the effect of using different number of batches. The results demonstrate that our method can obtain good results when using only a small part of the target examples. It should also be noted that even using one batch of target examples, our method still achieves better results than the baseline method. This is very valuable in practice use since a large number of targets are often not available."}, {"heading": "5 Conclusion and Future Works", "text": "In this paper, we have described an amazingly simple yet effective approach for domain adaptation for batch normalized neural networks. We have exploited another functionality of BN layer besides its original uses: domain adaptation. The main idea is to replace the statistics of each BN layer in source domain\nRevisiting Batch Normalization For Practical Domain Adaptation 13\nwith those on target domain. The proposed method is easy to implement and parameter-free, and it takes almost no effort to extend to multiple source domains and semi-supervised settings. Moreover, our method is not sensitive to the target domain size. Thus it is more favorable for practitioners compared with other deep learning based domain adaptation methods. At last, we have tested our method on standard benchmarks. Our method established new state-of-the-art results on both single source and multiple source domain adaptation settings. We believe our method opens up a new direction for domain adaptation.\nIn contrary to other methods that use MMD or domain confusion loss to update the weights in CNN for domain adaptation, our method only modifies the statistics of BN layer. Therefore, our method is fully complementary to other existing deep learning based methods. It is interesting to see how they collaborate in one unified model."}], "references": [{"title": "A deeper look at dataset bias", "author": ["T. Tommasi", "N. Patricia", "B. Caputo", "T. Tuytelaars"], "venue": "arXiv preprint arXiv:1505.01257", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2015}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["S. Ioffe", "C. Szegedy"], "venue": "ICML.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "Unbiased look at dataset bias", "author": ["A. Torralba", "A.A. Efros"], "venue": "CVPR.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2011}, {"title": "Deep domain confusion: Maximizing for domain invariance", "author": ["E. Tzeng", "J. Hoffman", "N. Zhang", "K. Saenko", "T. Darrell"], "venue": "arXiv preprint arXiv:1412.3474", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "Learning transferable features with deep adaptation networks", "author": ["M. Long", "Y. Cao", "J. Wang", "M. Jordan"], "venue": "ICML.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2015}, {"title": "Simultaneous deep transfer across domains and tasks", "author": ["E. Tzeng", "J. Hoffman", "T. Darrell", "K. Saenko"], "venue": "ICCV.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "Unsupervised domain adaptation by backpropagation", "author": ["Y. Ganin", "V. Lempitsky"], "venue": "ICML.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2015}, {"title": "Domain adaptations for computer vision applications", "author": ["O. Beijbom"], "venue": "arXiv preprint arXiv:1211.4860", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2012}, {"title": "Visual domain adaptation: A survey of recent advances", "author": ["V.M. Patel", "R. Gopalan", "R. Li", "R. Chellappa"], "venue": "IEEE Signal Processing Magazine 32(3)", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2015}, {"title": "Improving predictive inference under covariate shift by weighting the log-likelihood function", "author": ["H. Shimodaira"], "venue": "Journal of statistical planning and inference 90(2)", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2000}, {"title": "Undoing the damage of dataset bias", "author": ["A. Khosla", "T. Zhou", "T. Malisiewicz", "A.A. Efros", "A. Torralba"], "venue": "ECCV. Springer", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2012}, {"title": "A kernel two-sample test", "author": ["A. Gretton", "K.M. Borgwardt", "M.J. Rasch", "B. Sch\u00f6lkopf", "A. Smola"], "venue": "The Journal of Machine Learning Research 13(1)", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2012}, {"title": "Correcting sample selection bias by unlabeled data", "author": ["J. Huang", "A. Gretton", "K.M. Borgwardt", "B. Sch\u00f6lkopf", "A.J. Smola"], "venue": "NIPS.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2006}, {"title": "Connecting the dots with landmarks: Discriminatively learning domain-invariant features for unsupervised domain adaptation", "author": ["B. Gong", "K. Grauman", "F. Sha"], "venue": "ICML.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2013}, {"title": "Domain adaptation via transfer component analysis", "author": ["S.J. Pan", "I.W. Tsang", "J.T. Kwok", "Q. Yang"], "venue": "IEEE Transactions on Neural Networks 22(2)", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2011}, {"title": "Domain adaptation for object recognition: An unsupervised approach", "author": ["R. Gopalan", "R. Li", "R. Chellappa"], "venue": "ICCV.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2011}, {"title": "Unsupervised domain adaptation by domain invariant projection", "author": ["M. Baktashmotlagh", "M. Harandi", "B. Lovell", "M. Salzmann"], "venue": "ICCV.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2013}, {"title": "Unsupervised visual domain adaptation using subspace alignment", "author": ["B. Fernando", "A. Habrard", "M. Sebban", "T. Tuytelaars"], "venue": "ICCV.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2013}, {"title": "Geodesic flow kernel for unsupervised domain adaptation", "author": ["B. Gong", "Y. Shi", "F. Sha", "K. Grauman"], "venue": "CVPR.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2012}, {"title": "How transferable are features in deep neural networks? In: NIPS", "author": ["J. Yosinski", "J. Clune", "Y. Bengio", "H. Lipson"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2014}, {"title": "DeCAF: A deep convolutional activation feature for generic visual recognition", "author": ["J. Donahue", "Y. Jia", "O. Vinyals", "J. Hoffman", "N. Zhang", "E. Tzeng", "T. Darrell"], "venue": "ICML.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2014}, {"title": "DLID: Deep learning for domain adaptation by interpolating between domains", "author": ["S. Chopra", "S. Balakrishnan", "R. Gopalan"], "venue": "ICML Workshop on Challenges in Representation Learning. Volume 2.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2013}, {"title": "Domain adaptive neural networks for object recognition", "author": ["M. Ghifary", "W.B. Kleijn", "M. Zhang"], "venue": "PRICAI 2014: Trends in Artificial Intelligence.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2014}, {"title": "Return of frustratingly easy domain adaptation", "author": ["B. Sun", "J. Feng", "K. Saenko"], "venue": "arXiv preprint arXiv:1511.05547", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep residual learning for image recognition", "author": ["K. He", "X. Zhang", "S. Ren", "J. Sun"], "venue": "arXiv preprint arXiv:1512.03385", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2015}, {"title": "Rethinking the inception architecture for computer vision", "author": ["C. Szegedy", "V. Vanhoucke", "S. Ioffe", "J. Shlens", "Z. Wojna"], "venue": "arXiv preprint arXiv:1512.00567", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2015}, {"title": "MXNet: A flexible and efficient machine learning library for heterogeneous distributed systems", "author": ["T. Chen", "M. Li", "Y. Li", "M. Lin", "N. Wang", "M. Wang", "T. Xiao", "B. Xu", "C. Zhang", "Z. Zhang"], "venue": "arXiv preprint arXiv:1512.01274", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2015}, {"title": "ImageNet large scale visual recognition challenge", "author": ["O. Russakovsky", "J. Deng", "H. Su", "J. Krause", "S. Satheesh", "S. Ma", "Z. Huang", "A. Karpathy", "A. Khosla", "M Bernstein"], "venue": "International Journal of Computer Vision 115(3)", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2015}, {"title": "Exploiting weakly-labeled web images to improve object classification: a domain adaptation approach", "author": ["A. Bergamo", "L. Torresani"], "venue": "NIPS.", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2010}, {"title": "Caltech-256 object category dataset", "author": ["G. Griffin", "A. Holub", "P. Perona"], "venue": null, "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2007}, {"title": "Visualizing data using t-sne", "author": ["L. Van der Maaten", "G. Hinton"], "venue": "Journal of Machine Learning Research 9(2579-2605)", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2008}, {"title": "The art of computer programming", "author": ["E.K. Donald"], "venue": "Sorting and searching 3", "citeRegEx": "32", "shortCiteRegEx": null, "year": 1999}, {"title": "Adapting visual category models to new domains", "author": ["K. Saenko", "B. Kulis", "M. Fritz", "T. Darrell"], "venue": "ECCV.", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2010}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "NIPS.", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2012}, {"title": "Caffe: Convolutional architecture for fast feature embedding", "author": ["Y. Jia", "E. Shelhamer", "J. Donahue", "S. Karayev", "J. Long", "R. Girshick", "S. Guadarrama", "T. Darrell"], "venue": "ACM MM.", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "Recent study [1] shows that a DNN has strong dependency towards the training dataset, and the learned features cannot be easily transferred to a different but relevant task without fine-tuning.", "startOffset": 13, "endOffset": 16}, {"referenceID": 1, "context": "Our approach is based on the well-known Batch Normalization technique [2] which has become a standard component in modern deep learning.", "startOffset": 70, "endOffset": 73}, {"referenceID": 2, "context": "These approaches usually suffer from inferior performance due to dataset discrepancies, or \u201cdataset bias\u201d, because 1) the distributions of the source domains (third party datasets or Internet images) are often different from the target domain (testing images); and 2) DNN is particularly good at capturing dataset bias in its internal representation [3], which eventually leads to overfitting.", "startOffset": 350, "endOffset": 353}, {"referenceID": 3, "context": "Known as domain adaptation, the effort to bridge the gap between training and testing data distribution has been discussed several times under the context of deep learning [4,5,6,7].", "startOffset": 172, "endOffset": 181}, {"referenceID": 4, "context": "Known as domain adaptation, the effort to bridge the gap between training and testing data distribution has been discussed several times under the context of deep learning [4,5,6,7].", "startOffset": 172, "endOffset": 181}, {"referenceID": 5, "context": "Known as domain adaptation, the effort to bridge the gap between training and testing data distribution has been discussed several times under the context of deep learning [4,5,6,7].", "startOffset": 172, "endOffset": 181}, {"referenceID": 6, "context": "Known as domain adaptation, the effort to bridge the gap between training and testing data distribution has been discussed several times under the context of deep learning [4,5,6,7].", "startOffset": 172, "endOffset": 181}, {"referenceID": 7, "context": "Domain transfer in visual recognition tasks has gained increasing attention in recent literature [8,9].", "startOffset": 97, "endOffset": 102}, {"referenceID": 8, "context": "Domain transfer in visual recognition tasks has gained increasing attention in recent literature [8,9].", "startOffset": 97, "endOffset": 102}, {"referenceID": 9, "context": "Often referred as covariance shift [10] or dataset bias [3], this problem poses great challenge to the generalization ability of a learned model.", "startOffset": 35, "endOffset": 39}, {"referenceID": 2, "context": "Often referred as covariance shift [10] or dataset bias [3], this problem poses great challenge to the generalization ability of a learned model.", "startOffset": 56, "endOffset": 59}, {"referenceID": 10, "context": "In [11], the authors assign each dataset with an explicit bias vector, and train one discriminative model to handle multiple classification problems with different bias terms.", "startOffset": 3, "endOffset": 7}, {"referenceID": 11, "context": "A more explicit way to compute dataset difference is based on Maximum Mean Discrepancy [12].", "startOffset": 87, "endOffset": 91}, {"referenceID": 12, "context": "To reduce dataset discrepancies, many methods are proposed, including sample selections [13,14], explicit projection learning [15,16,17] and principal axes alignment [18,19].", "startOffset": 88, "endOffset": 95}, {"referenceID": 13, "context": "To reduce dataset discrepancies, many methods are proposed, including sample selections [13,14], explicit projection learning [15,16,17] and principal axes alignment [18,19].", "startOffset": 88, "endOffset": 95}, {"referenceID": 14, "context": "To reduce dataset discrepancies, many methods are proposed, including sample selections [13,14], explicit projection learning [15,16,17] and principal axes alignment [18,19].", "startOffset": 126, "endOffset": 136}, {"referenceID": 15, "context": "To reduce dataset discrepancies, many methods are proposed, including sample selections [13,14], explicit projection learning [15,16,17] and principal axes alignment [18,19].", "startOffset": 126, "endOffset": 136}, {"referenceID": 16, "context": "To reduce dataset discrepancies, many methods are proposed, including sample selections [13,14], explicit projection learning [15,16,17] and principal axes alignment [18,19].", "startOffset": 126, "endOffset": 136}, {"referenceID": 17, "context": "To reduce dataset discrepancies, many methods are proposed, including sample selections [13,14], explicit projection learning [15,16,17] and principal axes alignment [18,19].", "startOffset": 166, "endOffset": 173}, {"referenceID": 18, "context": "To reduce dataset discrepancies, many methods are proposed, including sample selections [13,14], explicit projection learning [15,16,17] and principal axes alignment [18,19].", "startOffset": 166, "endOffset": 173}, {"referenceID": 19, "context": "In the field of deep learning, feature transferability across different domains is a tantalizing yet generally unsolved topic [20,1].", "startOffset": 126, "endOffset": 132}, {"referenceID": 0, "context": "In the field of deep learning, feature transferability across different domains is a tantalizing yet generally unsolved topic [20,1].", "startOffset": 126, "endOffset": 132}, {"referenceID": 20, "context": "To transfer the learned representations to a new dataset, pre-training and fine-tuning [21] have become de facto procedures.", "startOffset": 87, "endOffset": 91}, {"referenceID": 21, "context": "Early works of domain adaptation either focus on reordering fine-tuning samples [22], or regularizing MMD [12] in a shallow network [23].", "startOffset": 80, "endOffset": 84}, {"referenceID": 11, "context": "Early works of domain adaptation either focus on reordering fine-tuning samples [22], or regularizing MMD [12] in a shallow network [23].", "startOffset": 106, "endOffset": 110}, {"referenceID": 22, "context": "Early works of domain adaptation either focus on reordering fine-tuning samples [22], or regularizing MMD [12] in a shallow network [23].", "startOffset": 132, "endOffset": 136}, {"referenceID": 3, "context": "[4] used the classical MMD loss to regularize the representation in the last layer of CNN.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] further extend the method to multiple kernel MMD and multiple layer adaptation.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "[7] devised a gradient reverse layer to reverse the gradient that helps to distinguish the domains of each data sample.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[6] proposed to simultaneously transfer task correlations and maximize domain confusion for (semi)-supervised domain adaptation.", "startOffset": 0, "endOffset": 3}, {"referenceID": 23, "context": "Another related work is CORAL [24].", "startOffset": 30, "endOffset": 34}, {"referenceID": 1, "context": "In this section, we briefly review Batch Normalization(BN) [2] which is closely related to our AdaBN.", "startOffset": 59, "endOffset": 62}, {"referenceID": 24, "context": "BN layer has become a standard component in recent top-performing CNN architectures, such as deep residual network [25], and Inception V3 [26].", "startOffset": 115, "endOffset": 119}, {"referenceID": 25, "context": "BN layer has become a standard component in recent top-performing CNN architectures, such as deep residual network [25], and Inception V3 [26].", "startOffset": 138, "endOffset": 142}, {"referenceID": 26, "context": "In this pilot experiment, we use MXNet implementation [27] of the InceptionBN model [2] pre-trained on ImageNet classification task [28] as our baseline DNN model.", "startOffset": 54, "endOffset": 58}, {"referenceID": 1, "context": "In this pilot experiment, we use MXNet implementation [27] of the InceptionBN model [2] pre-trained on ImageNet classification task [28] as our baseline DNN model.", "startOffset": 84, "endOffset": 87}, {"referenceID": 27, "context": "In this pilot experiment, we use MXNet implementation [27] of the InceptionBN model [2] pre-trained on ImageNet classification task [28] as our baseline DNN model.", "startOffset": 132, "endOffset": 136}, {"referenceID": 28, "context": "Our image data are drawn from [29], which contains the same classes of images from both Caltech-256 dataset [30] and Bing image search results.", "startOffset": 30, "endOffset": 34}, {"referenceID": 29, "context": "Our image data are drawn from [29], which contains the same classes of images from both Caltech-256 dataset [30] and Bing image search results.", "startOffset": 108, "endOffset": 112}, {"referenceID": 30, "context": "t-SNE [31] visualization of the mini-batch BN feature vector distributions in both shallow and deep layers, across different datasets.", "startOffset": 6, "endOffset": 10}, {"referenceID": 31, "context": "1 In practice we adopt an online algorithm [32] to efficiently estimate the mean and variance.", "startOffset": 43, "endOffset": 47}, {"referenceID": 23, "context": "Another question is why we transform the neuron responses independently, not decorrelate and then re-correlate the responses as suggested in [24].", "startOffset": 141, "endOffset": 145}, {"referenceID": 32, "context": "We first introduce our experimental settings on two standard datasets: Office [33] and Caltech-Bing [29], some baselines and the configurations of our experiments.", "startOffset": 78, "endOffset": 82}, {"referenceID": 28, "context": "We first introduce our experimental settings on two standard datasets: Office [33] and Caltech-Bing [29], some baselines and the configurations of our experiments.", "startOffset": 100, "endOffset": 104}, {"referenceID": 32, "context": "Office [33] is a standard benchmark for domain adaptation, which is a collection of 4652 images in 31 classes from three different domains: Amazon(A), DSRL(D) and Webcam(W).", "startOffset": 7, "endOffset": 11}, {"referenceID": 3, "context": "We evaluate all the six adaptation tasks in our experiments, which are commonly adopted by other domain adaptation methods [4,24,5].", "startOffset": 123, "endOffset": 131}, {"referenceID": 23, "context": "We evaluate all the six adaptation tasks in our experiments, which are commonly adopted by other domain adaptation methods [4,24,5].", "startOffset": 123, "endOffset": 131}, {"referenceID": 4, "context": "We evaluate all the six adaptation tasks in our experiments, which are commonly adopted by other domain adaptation methods [4,24,5].", "startOffset": 123, "endOffset": 131}, {"referenceID": 28, "context": "Caltech-Bing [29] is a much larger domain adaptation dataset, which contains 30,607 and 121,730 images in 256 categories from two domains Caltech256(C) and Bing(B), respectively.", "startOffset": 13, "endOffset": 17}, {"referenceID": 17, "context": "We compare our method with a variety of methods, including three shallow methods: SA [18], GFK [19], CORAL [24], and three deep methods: DDC [4], DAN [5], RevGrad [7].", "startOffset": 85, "endOffset": 89}, {"referenceID": 18, "context": "We compare our method with a variety of methods, including three shallow methods: SA [18], GFK [19], CORAL [24], and three deep methods: DDC [4], DAN [5], RevGrad [7].", "startOffset": 95, "endOffset": 99}, {"referenceID": 23, "context": "We compare our method with a variety of methods, including three shallow methods: SA [18], GFK [19], CORAL [24], and three deep methods: DDC [4], DAN [5], RevGrad [7].", "startOffset": 107, "endOffset": 111}, {"referenceID": 3, "context": "We compare our method with a variety of methods, including three shallow methods: SA [18], GFK [19], CORAL [24], and three deep methods: DDC [4], DAN [5], RevGrad [7].", "startOffset": 141, "endOffset": 144}, {"referenceID": 4, "context": "We compare our method with a variety of methods, including three shallow methods: SA [18], GFK [19], CORAL [24], and three deep methods: DDC [4], DAN [5], RevGrad [7].", "startOffset": 150, "endOffset": 153}, {"referenceID": 6, "context": "We compare our method with a variety of methods, including three shallow methods: SA [18], GFK [19], CORAL [24], and three deep methods: DDC [4], DAN [5], RevGrad [7].", "startOffset": 163, "endOffset": 166}, {"referenceID": 20, "context": "We follow the full protocol [21] for the single source setting; while for multiple sources setting, we use all the samples in the source domains as training data, and use all the samples in the target domain as testing data.", "startOffset": 28, "endOffset": 32}, {"referenceID": 1, "context": "We fine-tune the Inception-BN [2] model on source domain in each task for 100 epochs.", "startOffset": 30, "endOffset": 33}, {"referenceID": 4, "context": "Since the office dataset is quite small, following the best practice in [5], we freeze the first three groups of Inception modules, and set the learning rate of fourth and fifth group one tenth of the base learning rate to avoid overfitting.", "startOffset": 72, "endOffset": 75}, {"referenceID": 33, "context": "Note that the models in the first part of the Table 1 are pre-trained on AlexNet [34] instead of the Inception-BN [2] model, because there is no public pre-trained Inception BN model in Caffe [35].", "startOffset": 81, "endOffset": 85}, {"referenceID": 1, "context": "Note that the models in the first part of the Table 1 are pre-trained on AlexNet [34] instead of the Inception-BN [2] model, because there is no public pre-trained Inception BN model in Caffe [35].", "startOffset": 114, "endOffset": 117}, {"referenceID": 34, "context": "Note that the models in the first part of the Table 1 are pre-trained on AlexNet [34] instead of the Inception-BN [2] model, because there is no public pre-trained Inception BN model in Caffe [35].", "startOffset": 192, "endOffset": 196}, {"referenceID": 1, "context": "From Table 1, we first notice that the Inception BN [2] model indeed improves over the AlexNet [34] model on average, which means that the CNN pre-trained on ImageNet indeed learns general features, the improvements on ImageNet can be transferred on new tasks.", "startOffset": 52, "endOffset": 55}, {"referenceID": 33, "context": "From Table 1, we first notice that the Inception BN [2] model indeed improves over the AlexNet [34] model on average, which means that the CNN pre-trained on ImageNet indeed learns general features, the improvements on ImageNet can be transferred on new tasks.", "startOffset": 95, "endOffset": 99}, {"referenceID": 33, "context": "AlexNet [34] 61.", "startOffset": 8, "endOffset": 12}, {"referenceID": 3, "context": "1 DDC [4] 61.", "startOffset": 6, "endOffset": 9}, {"referenceID": 4, "context": "DAN [5] 68.", "startOffset": 4, "endOffset": 7}, {"referenceID": 6, "context": "9 RevGrad [7] 67.", "startOffset": 10, "endOffset": 13}, {"referenceID": 1, "context": "Inception BN [2] 70.", "startOffset": 13, "endOffset": 16}, {"referenceID": 17, "context": "5 SA [18] 69.", "startOffset": 5, "endOffset": 9}, {"referenceID": 18, "context": "GFK [19] 66.", "startOffset": 4, "endOffset": 8}, {"referenceID": 23, "context": "7 CORAL [24] 70.", "startOffset": 8, "endOffset": 12}, {"referenceID": 32, "context": "Single source domain adaptation results on Office-31 [33] dataset with standard unsupervised adaptation protocol.", "startOffset": 53, "endOffset": 57}, {"referenceID": 1, "context": "Inception BN [2] 90.", "startOffset": 13, "endOffset": 16}, {"referenceID": 23, "context": "CORAL [24] 92.", "startOffset": 6, "endOffset": 10}, {"referenceID": 32, "context": "Multi-source domain adaptation results on Office-31 [33] dataset with stan-", "startOffset": 52, "endOffset": 56}, {"referenceID": 1, "context": "Inception BN [2] 35.", "startOffset": 13, "endOffset": 16}, {"referenceID": 23, "context": "CORAL [24] 35.", "startOffset": 6, "endOffset": 10}, {"referenceID": 28, "context": "Single source domain adaptation results on Caltech-Bing [29] dataset.", "startOffset": 56, "endOffset": 60}, {"referenceID": 30, "context": "We first visualize the features of the last layer before and after adaptation using t-SNE [31] in Fig.", "startOffset": 90, "endOffset": 94}], "year": 2016, "abstractText": "Deep neural networks (DNN) have shown unprecedented success in various computer vision applications such as image classification and object detection. However, it is still a common (yet inconvenient) practice to prepare at least tens of thousands of labeled image to finetune a network on every task before the model is ready to use. Recent study [1] shows that a DNN has strong dependency towards the training dataset, and the learned features cannot be easily transferred to a different but relevant task without fine-tuning. In this paper, we propose a simple yet powerful remedy, called Adaptive Batch Normalization(AdaBN), to increase the generalization ability of a DNN. Our approach is based on the well-known Batch Normalization technique [2] which has become a standard component in modern deep learning. In contrary to other deep learning domain adaptation methods, our method does not require additional components, and is parameterfree. It archives state-of-the-art performance despite its surprising simplicity. Furthermore, we demonstrate that our method is complementary with other existing methods. Combining AdaBN with existing domain adaptation treatments may further improve model performance.", "creator": "LaTeX with hyperref package"}}}