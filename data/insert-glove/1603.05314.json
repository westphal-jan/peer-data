{"id": "1603.05314", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Mar-2016", "title": "Hardware Acceleration for Boolean Satisfiability Solver by Applying Belief Propagation Algorithm", "abstract": "Boolean referees satisfiability (bil SAT) ggg has 2,000-square an 120km extensive tabarak application domain bazil in 2290 computer science, especially triplets in electronic fordable design automation applications. bolinder Circuit harrill synthesis, optimization, and verification awning problems parthiv can be bentsen solved 2-20 by provincial transforming miac original lodges problems to SAT problems. .259 However, the lacan SAT problem knapton is known efd as manado NP - glbt complete, which seagrove means there is no l\u00fcrssen efficient trichur method wyckoff to a.j. solve lonsdale it. Therefore, kampungs an deliverers efficient SAT solver ,280 to marchio enhance the performance ehara is fluoridate always priest desired. 37.53 We propose a hardware shelbyville acceleration method for SAT problems. fontanini By now-infamous surveying blongino the nuttiness properties anacostia of muravyov SAT lepyoshkin problems albermarle and the beylerbey decoding of self-consciousness low - territorials density parity - 6,720 check (aleuts LDPC) codes, earthward a thika special schwarzbach class reiswig of error - correcting moccu codes, we gondwana discover buarque that both surrendered of pecora them are constraint mcgeough satisfaction problems. sope The belief jaruga propagation sensations algorithm goeters has 18-25 been successfully sanei applied to the decoding city/31 of LDPC, havlat and the recycle corresponding decoder hardware designs shrub are maldini extensively studied. Therefore, lh we 281st proposed best-remembered a meadowlark belief centroam\u00e9rica propagation luxurious based sliwa algorithm to solve SAT landefeld problems. physician-assisted With 50.59 this amida algorithm, the SAT dolj solver shyi can be post-secondary accelerated popcap by 18-kilogram hardware. A software simulator 30-goal is implemented 36-3 to toppmoller verify the proposed algorithm and bawled the 61-55 performance hooah improvement market-oriented is nesna estimated. threadneedle Our experiment results show bastesen that 97-yard time complexity melkor does rosies not blitzen increase with the chadians size 90.94 of phealyglobe.com SAT problems stainer and 2:09 the proposed bothe method can achieve at mennes least 30x speedup compared imb to 30.90 MiniSat.", "histories": [["v1", "Wed, 16 Mar 2016 23:57:27 GMT  (1508kb)", "http://arxiv.org/abs/1603.05314v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["te-hsuan chen", "ju-yi lu"], "accepted": false, "id": "1603.05314"}, "pdf": {"name": "1603.05314.pdf", "metadata": {"source": "CRF", "title": "Hardware Acceleration for Boolean Satisfiability Solver by Applying Belief Propagation Algorithm", "authors": ["Te-Hsuan Chen", "Ju-Yi Lu"], "emails": ["juyi}@umich.edu"], "sections": [{"heading": null, "text": "domain in computer science, especially in electronic design automation applications. Circuit synthesis, optimization, and verification problems can be solved by transforming original problems to SAT problems. However, the SAT problem is known as an NP-complete problem, which means there is no efficient method to solve SAT problems. Therefore, the design of an efficient SAT solver to enhance the performance is always desired. In this paper, we proposed a hardware acceleration method for Boolean SAT problems. By surveying the properties of SAT problems and the decoding of low-density parity-check (LDPC) codes, a special class of error-correcting codes (ECCs), we discover that both of them are constraint satisfaction problems (CSPs). The belief propagation algorithm (BPA) has been successfully applied to the decoding of LDPC, and the corresponding decoder hardware designs are extensively studied. Therefore, we proposed a belief propagation based algorithm to solve SAT problems. With this algorithm, the SAT solver can be accelerated by hardware. A software simulator is implemented to verify the proposed algorithm and the performance improvement is estimated. Our experiment results show that time complexity does not increase with the size of SAT problems and the proposed method can achieve at least 30\u00d7 speedup compared to MiniSat.\nKeywords SAT, Boolean Satisfiability, Belief Propagation Algorithm."}, {"heading": "1. INTRODUCTION", "text": "Boolean satisfiability (SAT) is a class of problems that establishes if there exist an assignment to variables of a Boolean formula that evaluates it to true [1]. This Boolean formula is usually in the conjunctive normal form (CNF), which is an expression of a conjunction (AND, \u22c0) of clauses. Each clause is a disjunction (OR, \u22c1) of literals, and each literal is either a variable or its negation (NOT, \u00ac ). SAT has an extensive application domain. In logic design, synthesis, optimization and verification, many problems, such as placement and route, test pattern generation, and equivalence checking, and model checking, etc., can be expressed as variables whose values are in the set {\ud835\udc61\ud835\udc5f\ud835\udc62\ud835\udc52, \ud835\udc53\ud835\udc4e\ud835\udc59\ud835\udc60\ud835\udc52} or {1,0}.\nThe SAT problem is the first known NP-complete decision problem [2], which means that there is no efficient algorithm to solve SAT problems. Although theoretically, finding the set of assignment can be achieved by exhaustively trying all the possible assignments, this method becomes infeasible quickly as the number of literals and clauses increases. The set of algorithms that can solve SAT problems are called SAT solvers. However, due to the NP-complete nature of SAT, how to solve SAT problems within a reasonable time becomes an important issue. Much research has been conducted to improve the efficiency of SAT\nsolvers, but no algorithm so far can efficiently solve all SAT instances.\nThe goal of this paper is using hardware to accelerate SAT solvers. The approaches to solve the SAT problem have divided into software solvers, which solving the problem using computer simulation, and hardware solver, to implement Verilog code running on FPGA or virtual machine [7][10][11]. For hardware SAT solver, the main two categories are instance-specific (instance dependence) and application-specific. In this work, we try to implement an instance-specific model, which is more resource efficient to accommodate on a single FPGA.\nTo satisfy a CNF, i.e. to find a set of value that makes the CNF=1, each clause must be 1 too. Therefore, each clause represents a constraint that must be satisfied simultaneously. A constraint satisfaction problem (CSP) consists of three components, \ud835\udc4b, \ud835\udc37, and \ud835\udc36 [3]:\n1. \ud835\udc4b is a set of variables, {\ud835\udc4b1, \ud835\udc4b2, \u2026 , \ud835\udc4b\ud835\udc5b }.\n2. \ud835\udc37 is a set of domains, {\ud835\udc371, \ud835\udc372, \u2026 , \ud835\udc37\ud835\udc5b } , one for each variable.\n3. \ud835\udc36 is a set of constraints that specify allowable combinations of values.\nEach domain \ud835\udc37\ud835\udc56 consists of a set of allowable values, {\ud835\udc631, \ud835\udc632, \u2026 , \ud835\udc63\ud835\udc58 } for variable \ud835\udc4b\ud835\udc56. Each constrain \ud835\udc36\ud835\udc56 consists of a pair \u2329\ud835\udc60\ud835\udc50\ud835\udc5c\ud835\udc5d\ud835\udc52, \ud835\udc5f\ud835\udc52\ud835\udc59\u232a, where \ud835\udc60\ud835\udc50\ud835\udc5c\ud835\udc5d\ud835\udc52 is a tuple of variables that participate in the constrain and \ud835\udc5f\ud835\udc52\ud835\udc59 is the relation that defines the values that those variables can take on. A problem is solved when each variable has a value that satisfies all constraints on the variable.\nFrom the definition of the CSP, it can be found that Boolean SAT is a special case of the CSP, where the set of domains is {\ud835\udc61\ud835\udc5f\ud835\udc62\ud835\udc52, \ud835\udc53\ud835\udc4e\ud835\udc59\ud835\udc60\ud835\udc52} or {1,0} and the constraints are defined by a set of clauses that must be satisfied simultaneously.\nError correction codes (ECC\u2019s) provide one of the most costeffective ways to achieve noise protection. By applying the ECC to data, errors can be corrected or detected. An (n, k) code maps a binary k-tuple called a message block to a binary n-tuple called a codeword block. Usually, message and codeword blocks are represented in vector forms so the mapping is defined by a set of matrix multiplications. The decoding of a special class of ECC, low-density parity-check (LDPC) codes [4], is a constraint satisfaction problem. The parity-check equations are specially designed equations that are equal to zero if all the inputs are correct.\nThe goal of decoding LDPC codes is to find a set of input assignments such that all the parity-check equations are equal to 0. Therefore, the decoding of LDPC codes is actually a CSP. Each symbol of the codeword is a variable; each parity check\ncorresponds to a constraint in CSP. Besides, the domain of the variables is limited to {\ud835\udc61\ud835\udc5f\ud835\udc62\ud835\udc52, \ud835\udc53\ud835\udc4e\ud835\udc59\ud835\udc60\ud835\udc52} or {1,0} in LDPC codes. Therefore, the decoding of LDPC codes can be modeled as a SAT problem.\nIn the decoding of LDPC codes, the procedure can be illustrated by a bipartite graph which contains two types of nodes: variable nodes and parity-check nodes, and use iterative belief propagation decoding method to find solutions [8][9]. Since both the decoding of LDPC codes and SAT solvers are CSPs, and the decoding of LDPC codes can be accomplished by specific designed hardware. Here comes the question: can we extend the LDPC algorithm, belief propagation algorithm (BPA), to solve SAT problems so that a SAT solver can be speeded up by hardware? In this paper, we show that BPA can also be applied to SAT solvers since both of them solve CSPs. It is also possible a hardware circuit using similar architecture can also be used to accelerate SAT solvers. Therefore we propose a method to utilize a hardware based on LDPC decoder to improve the speed to SAT solvers."}, {"heading": "1.1 Contribution", "text": "Our main contribution in this paper is (1) applying the algorithm of decoding LDPC codes, to CNF-based SAT problems, (2) evaluating the proposed modified BPA by a simulator written in C/C++, (3) estimating the time that is need by the proposed SAT solver and comparing it with MiniSat [5]."}, {"heading": "1.2 Organization", "text": "The paper is organized as follows. Section 2 gives a quick review on the LDPC codes and the belief propagation algorithm. A SAT solving algorithm based on the belief propagation algorithm is proposed in section 3. Section 4 provides the experimental results. Section 5 discusses the related work and Section 6 gives the conclusion."}, {"heading": "2. LOW-DENSITY PARITY CHECK CODE", "text": "Originally proposed in 1962 by Robert Gallager [4] and rediscovered by David MacKay in 1996 [6], LDPC codes with iterative decoding algorithms have performance closely approaching Shannon channel capacity. LDPC codes went unnoticed until the 1990s because the hardware could not support effective decoder implementations. However with MacKay\u2019s research and the development of semiconductor technology, the hardware implementation of LDPC codes became feasible.\nA LDPC code is a linear block code for which the parity check matrix of interest has a low density of ones. A LDPC code can be represented by matrices. Assume that C is the codeword set of a (n, k) binary linear block code. If a k \u00d7 n matrix G is its generation matrix, then \ud835\udc36 = {\ud835\u20d1\udc65 \u2219 \ud835\udc3a|\ud835\u20d1\udc65\ud835\udf16{0,1}\ud835\udc58} for any length-k\nmessage \ud835\u20d1\udc65. An m \u00d7 n matrix H is its parity check matrix, if \ud835\udc36 = {\ud835\udc50|\ud835\udc50\ud835\udf16{0,1}\ud835\udc5b, \ud835\udc50 \u2219 \ud835\udc3b\ud835\udc47 = 0 } where \ud835\udc50 is a codeword of C. In other words, an LDPC code is designed to satisfy that for every codeword \ud835\udc50 \u2208 \ud835\udc36, this equation \ud835\udc50 \u2219 \ud835\udc3b\ud835\udc47 = 0 always holds.\nLDPC codes can also be represented by using graphs. A parity-check matrix H can be associated with a graph called bipartite graph. This graph contains two set of nodes: variable nodes and check nodes (v-nodes and c-nodes). The rule for constructing the graph is that a c-node i is connected to a v-node j whenever element hij in H is a 1. For example, let the parity-check matrix H be a 3\u00d74 matrix\n\ud835\udc3b = [ 1 1 1 0 1 1 0 1 0 1 1 1 ]\nThe corresponding bipartite graph is shown in Figure 1. There are 4 v-nodes and 3 c-nodes in this example.\nBesides, a cycle of length l in a bipartite graph is a path comprised of l edges from a node back to the same node. For example the bipartite Graph of Fig. 1 has a cycle of length 6. Short cycles are usually considered bad in graphs used for iterative decoding based on \u201cmessage passing;\u201d they increase the dependence of information being received at each node during message passing which may lead to latch-up problems. LDPC codes depend on a message passing decoding algorithm called belief propagation algorithm (BPA) or sum-product algorithm (SPA). The BPA is an efficient decoding algorithm which iteratively decodes LDPC code based on belief propagation. BPA decodes data with the probability computation of received signals based on the characteristic of the channel. The input bit probabilities are called the a priori probabilities for the received bits because they were known in advance before running the LDPC decoder. Besides, two sets of probabilities computation are handled in the decoder. One is related to the decoding criterion which determines the value of a received bit from the value of a received signal. The sets of probabilities are referred to as posterior probabilities.\nThe other probability is related to the satisfaction of each check sum given the received signal on each bit. BPA decoding can decode the data by iterative update in these two sets of probabilities until the satisfaction of the received bits is determined by the first sets of probabilities in the parity-check equations. The goal of the decoder is to find the maximum a posteriori probability (MAP) for each codeword bit. In other words, the aim of SPA is to maximize the probability that all parity-check constraints are satisfied for each codeword bit.\nFigure 2 illustrate the basic concept of the BPA. Figure 2(a) is a part of a bipartite graph; it only shows nodes and edges that connected to a parity-check c1. Here the relation between c1 and v1,\nv2, and v3 is: \ud835\udc501 = \ud835\udc631 \ud835\udc632 \ud835\udc633 where is XOR. To satisfy this parity-check, v1, v2, and v3 must be all 0\u2019s or only two of them are 1\u2019s. The BPA handles two sets of probabilities. The first set is related to the decoding criterion. These quantities are defined and iterative computed in the BPA:\n(1) \ud835\udc5f\ud835\udc56,\ud835\udc57(\ud835\udc58) : The probability \ud835\udc50\ud835\udc56 = 1 given \ud835\udc63\ud835\udc57 = \ud835\udc58 and\nprobabilities of other variables, \ud835\udc5e\ud835\udc56\ud835\udc57\u2019s.\n(2) \ud835\udc5e\ud835\udc57,\ud835\udc56(\ud835\udc58) : The probability \ud835\udc63\ud835\udc57 = \ud835\udc58 when all parity checks\ninvolving \ud835\udc63\ud835\udc57 except \ud835\udc50\ud835\udc56 are satisfied.\nFor example, \ud835\udc5f1,1(1) is the probability of \ud835\udc501 =1 given the\ninformation \ud835\udc5e2,1 and \ud835\udc5e2,1 . Note that since \ud835\udc501 = \ud835\udc631 \ud835\udc632 \ud835\udc633 if \ud835\udc5e2,1 and \ud835\udc5e2,1 are high, i.e. the probability that \ud835\udc632 and \ud835\udc633 are 1\u2019s\nare high, the probability that \ud835\udc631 = 0 must be high to satisfy \ud835\udc501 = 0.\nOn the other hand, for the v-node, Figure 2(b) is a partial graph that shows all the parity-check nodes that use v2. The vnode v2 receives the information of probabilities that satisfy all the parity-checks that v2 involves in and then uses this information to update its probability. For example, in Figure 2(b) \ud835\udc632 passes its probability to \ud835\udc501 by using the information form \ud835\udc501 and \ud835\udc503.\nAnother set of probability that is related to the decoding criterion is also calculated. It is denoted as \ud835\udc44\ud835\udc57 , representing the probability that all checks involving jth bit are satisfied. This probability is also called pseudo-posterior probability.\nThere are five steps in the BPA shown in Figure 3 [12]. The original algorithm is designed for a communication system assuming signals are modulated in binary phase-shift keying (BPSK) where logic 1 is modulated as -1 voltage and logic 0 is 1 voltage. The noise is assumed to be additive white Gaussian noise (AWGN). The general form of the BPA is as follows:"}, {"heading": "3. BELIEF PROPAGATION FOR SAT", "text": "This section we discuss the proposed Belief Propagation Algorithm for SAT problem (BPA-SAT) for SAT problems. In 3.1 we discuss the adopted modification on the Belief Propagation to apply on the SAT solver. In 3.2 we provide an overview of proposed BPA-SAT and some detail implementation."}, {"heading": "3.1 Adaption on BPA-SAT", "text": "BPA can be adopted on SAT problem once we treat the check nodes as the clauses, and variable nodes as literal. Also, the initialization of the probability is less important than the conventional BPA, because there is no prior information about the literal assignment.\n1. Initialization: in the SAT problem, the initial values of literals are all set to 0.5 to show no bias of the assignment\nwithout any prior information.\n2. Pass information from clauses to literals: Since the\noperators in the CNF clauses are OR, which is \ud835\udc501 = \ud835\udc631 + \ud835\udc632 + \ud835\udc633 , \ud835\udc5f1,1(1) represents the probability of \ud835\udc501 is true giventhe \ud835\udc631 = 0, and the probability of \ud835\udc632, \ud835\udc633. Therefore the modified equation is:\n\ud835\udc5f1,1(0) = \ud835\udc43(\ud835\udc501 = 1|\ud835\udc631 = 0, \ud835\u20d1\udc5e)\n\ud835\u20d1\udc5e represents the vector of \ud835\udc5e\ud835\udc56,\ud835\udc57(1).\n3. Pass information from literals to clauses: We neglect the\nmultiplication on (1 \u2212 \ud835\udc5d\ud835\udc57) or \ud835\udc5d\ud835\udc57 , because the initial values should not affect the value since they don\u2019t contain useful information.\n\ud835\udc5e\ud835\udc57,\ud835\udc56(1) = \ud835\udefc \u220f (\ud835\udc5f\ud835\udc56\u2032,\ud835\udc57(1))\n\ud835\udc56\u2032\u2208{\u210e\ud835\udc56\ud835\udc57\u22600&\ud835\udc56\u2260\ud835\udc57}\n4. Compute the posteriori probability: Same as above,\nremove the multiplication on (1 \u2212 \ud835\udc5d\ud835\udc57) or \ud835\udc5d\ud835\udc57.\n\ud835\udc44\ud835\udc57(1) = \ud835\udefd \u220f (\ud835\udc5f\ud835\udc56,\ud835\udc57(1))\n\ud835\udc56\u2208{\u210e\ud835\udc56\ud835\udc57\u22600}"}, {"heading": "3.2 BPA-SAT overview", "text": "Figure 4 is the flow chart of the whole BPA-SAT. There are two loop in BPA-SAT, the inner loop is the core algorithm of BPA-SAT, which iteratively calculates \ud835\udc5f\ud835\udc56,\ud835\udc57(1), \ud835\udc5e\ud835\udc56,\ud835\udc57(1), and \ud835\udc44\ud835\udc57(1). The outer loop is the break-and-restart mechanism to prevent BPA-SAT running forever, and randomly assign another start point (initial value set)."}, {"heading": "4. EXPERIMENTAL RESULT", "text": "In this section we present an evaluation of completeness and speedup of our belief propagation for SAT problem. The 3SAT benchmarks in SATLIB [12] are ran on our BPA for SAT simulator. For the speedup, we compares the estimated execution time of BPA for SAT running on FPGA Xilinx Virtex 2 XC2V6000-5 and the real execution time of MiniSat solver running on two 6-core Intel(R) Xeon(R) CPU E5645 @ 2.40GHz processor."}, {"heading": "4.1 Completeness", "text": "In this sub-section we investigate the completeness of the BPA-SAT. In our experiment, all the instances in the benchmark are satisifiable, completeness is defined as the fraction of testbench instance that can be solved by the BPA-SAT.\nFigure 5 examines the completeness of BPA for SAT. All the benchmark set are satisifiable. Benchmark uf20-91 indicates the literal number 20 and clause number 91. It shows that BPA for SAT has a worse solving ability when the problem size become larger. After adopting the random restart mechanism, there is only an average 5% improvement. Therefore, how to improve the completeness will be the main issue in the future works.\nMoreover, the ECC decoder where BPA works well has the literal-clause ratio greater than 1, while the literal-clause ratio of SAT problem are typically smaller than 0.25. This fundamental difference is believed to be a crucial factor of the incompleteness in the proposed BPA for SAT."}, {"heading": "4.2 Execution iteration & Speedup Evaluation", "text": "To estimate the speedup of the algorithm, we take the FPGA Xilinx Virtex 2 XC2V6000-5 as reference model. Based the experimental result of [13], the desired FPGA computation ability, second per iteration (SPI) can be calculated in equation below:\n\ud835\udc46\ud835\udc43\ud835\udc3c = \ud835\udc36\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc64\ud835\udc5c\ud835\udc5f\ud835\udc51 \ud835\udc59\ud835\udc52\ud835\udc5b\ud835\udc54\ud835\udc61\u210e\n\ud835\udc47\u210e\ud835\udc5f\ud835\udc5c\ud835\udc62\ud835\udc54\u210e\ud835\udc5d\ud835\udc62\ud835\udc61 \u00d7 \ud835\udc3c\ud835\udc61\ud835\udc52\ud835\udc5f\ud835\udc4e\ud835\udc61\ud835\udc56\ud835\udc5c\ud835\udc5b =\n3969\n1417\ud835\udc40 \u00d7 15\n= 1.86 \u00d7 10\u22127\ud835\udc60\ud835\udc52\ud835\udc50/\ud835\udc56\ud835\udc61\ud835\udc52\ud835\udc5f\ud835\udc4e\ud835\udc61\ud835\udc56\ud835\udc5c\ud835\udc5b\nIn [13], the \ud835\udc36\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc64\ud835\udc5c\ud835\udc5f\ud835\udc51 \ud835\udc59\ud835\udc52\ud835\udc5b\ud835\udc54\ud835\udc61\u210e is the bandwidth the FPGA can execute in parallel in a single iteration. The \ud835\udc3c\ud835\udc61\ud835\udc52\ud835\udc5f\ud835\udc4e\ud835\udc61\ud835\udc56\ud835\udc5c\ud835\udc5b is the experimental result of the iteration number.\nTherefore the estimated speedup can be derived as below:\n\ud835\udc12\ud835\udc29\ud835\udc1e\ud835\udc1e\ud835\udc1d\ud835\udc96\ud835\udc91 = \ud835\udc7b\ud835\udc8e\ud835\udc8a\ud835\udc8f\ud835\udc8a\ud835\udc94\ud835\udc82\ud835\udc95/\ud835\udc7b\ud835\udc86\ud835\udc99\ud835\udc86\ud835\udc84 = \ud835\udc7b\ud835\udc8e\ud835\udc8a\ud835\udc8f\ud835\udc8a\ud835\udc94\ud835\udc82\ud835\udc95/(\ud835\udc8a\ud835\udc95\ud835\udc86\ud835\udc93\ud835\udc82\ud835\udc95\ud835\udc8a\ud835\udc90\ud835\udc8f \u00d7 \ud835\udc7a\ud835\udc77\ud835\udc70) (1)\n\ud835\udc47\ud835\udc5a\ud835\udc56\ud835\udc5b\ud835\udc56\ud835\udc60\ud835\udc4e\ud835\udc61 is the average running time for the MiniSat solver to solve a single SAT instance. \ud835\udc47\ud835\udc52\ud835\udc65\ud835\udc52\ud835\udc50 is the estimated execution time of BPA for SAT to running on FPGA.\nFigure 6 takes a closer look on every solved instance to find the relation between propagation iteration and the scale of the SAT problem. The blue histogram indicates the average iteration of the solved instances. The line chart represents the average speedup compared with the execution time of MiniSat SAT solver. The average iteration number of all the solved instance doesn\u2019t show any trend of growth as the growth of the problem size, which imply the constant timing complexity regardless of the scale of the SAT problem.\nThe line chart comes from the equation (1). The speedup grows in exponential, because the execution time of MiniSat grows in exponential. The spike on uf200-860 is caused by the large standard deviation when the sample number is small. This chart indicates the main advantage of adopting the BPA on SAT: the iteration of propagation is independent to the size of the SAT problem. Also, as mentioned above, each computation of r and q only depends on the previous iteration result of q and r, which can be implemented in parallel easily with a buffer storing its previous value. Moreover, the sparse literal-clause matrix release the competing of the shared memory issue, which is applicable to implement on both FPGA, GPU, or even ASIC devices to reduce the synthesis timing overhead."}, {"heading": "5. RELATED WORK", "text": "Application-specific architecture is the mainstream in hardware accelerating SAT problem to avoid the time-consuming FPGA synthesis time. [10][11] both implemented Boolean Constraint Propagation computation in parallel. For the storage on the literal-clause instance, the former stored the data using embedded DRAM, while the latter relied on the modern FPGA\u2019s Block RAM (BRAM). Both of them relied on Input/Output Queue to provide parallel value assignment. The intensive BCP computation was done in parallel by partitioning clause set into several subset. The synchronization scheme is also proposed to do the conflict detection in serial. In this type of architecture, the problem size can be very large. For latter one, since the size of BRAM is the only constraint of this hardware implementation, the capacity can be extended to 64K variables and 176K clauses.\nSkliarova et al. [7] implemented the application-specific architecture by storing the whole literal-clause matrix into the FPGA block. The inference, conflict-detection, and backtracking are implemented based on the orthogonal matrix multiplication, which all the computations are done in hardware implementation, while the backstracking process is supported by the stack memory handled by software."}, {"heading": "6. CONCLUSION", "text": "In this paper, a belief propagation algorithm for CNF-based SAT problems (BPA-SAT) has been presented. The BPA-SAT is based on the belief propagation algorithm (BPA) that is used in the decoding of a class of error-correcting codes, low-density parity-check (LDPC) codes. Since BPA can be implemented with hardware, the BPA-SAT solver can be accelerated by hardware. Furthermore, the experimental results show that the time complexity of the BPA-SAT does not increase with the size of SAT problems. Therefore, the speed solver does not degrade dramatically as the size of the CNF increases. The main issue, completeness, of this algorithm is also investigated. The\ncompleteness decreases significantly as the size of the CNF increases. The experimental results and our estimation show that for the instants that the BPA-SAT can solve, BPA-SAT can achieve 30\u00d7 to 44k\u00d7 speedup compared to a state-of-art SAT solver, MiniSat."}, {"heading": "7. REFERENCES", "text": "[1] Wagner, I., Bertacco V., Post-Silicon and Runtime\nVerification for Modern Processors, Springer (December 3, 2010)\n[2] Cook, S. A., \u201cThe Complexity of Theorem-Proving Procedures,\u201d Proceedings of the third annual ACM symposium on Theory of computing, pp.151-158, 1971\n[3] Russell, S., and Norvig, P., Artificial Intelligence: A Modern Approach, Prentice Hall; 3 edition (December 11, 2009)\n[4] Gallager, R. G., Low Density Parity Check Codes. Cambridge, MA: MIT Press, 1963.\n[5] Een, N., S\u00f6rensson N., An extensible sat-solver. In SAT, pp.502\u2013518, 2003\n[6] MacKay, D. J. C., and Neal, R. M., \u201cNear Shannon Limit Performance of Low Density Parity Check Codes,\u201d\nElectronics Letters, 1996\n[7] Skliarova, I., and de Brito Ferrari, A. \"Reconfigurable hardware SAT solvers: a survey of systems,\" Computers,\nIEEE Transactions on , vol.53, no.11, pp. 1449- 1461, Nov. 2004\n[8] Moon, T. K., Error Correction Coding: Mathematical Methods and Algorithms, John Wiley & Sons, Jun 6, 2005 -\n800 pages\n[9] Lin, S., and Costello D, J., Error Control Coding: Fundamentals and Applications, 2nd, Pearson-Prentice Hall,\n2004 - 1260 pages\n[10] Davis, J.D., Tan, Z., Yu, F., and Zhang, L., \"A Practical Reconfigurable Hardware Accelerator for Boolean\nSatisfiability solvers,\" Design Automation Conference, 2008. DAC 2008. 45th ACM/IEEE , vol., no., pp.780-785, 8-13 June 2008\n[11] Zhao, Y., Malik, S., Moskewicz, M., and Madigan, C., \"Accelerating Boolean satisfiability through application\nspecific processing,\" System Synthesis, 2001. Proceedings. The 14th International Symposium on , vol., no., pp. 244-"}, {"heading": "249, 2001", "text": "[12] SATLIB - The Satisfiability Library. Available http://www.cs.ubc.ca/~hoos/SATLIB/index-ubc.html\n[13] Chen, X., Kang, J., Lin, S., and Akella, V., \"Memory System Optimization for FPGA-Based Implementation of Quasi-\nCyclic LDPC Codes Decoders,\" Circuits and Systems I: Regular Papers, IEEE Transactions on , vol.58, no.1, pp.98111, Jan. 2011"}], "references": [{"title": "Post-Silicon and Runtime Verification for Modern Processors", "author": ["I. Wagner", "Bertacco V"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2010}, {"title": "The Complexity of Theorem-Proving Procedures", "author": ["S.A. Cook"], "venue": "Proceedings of the third annual ACM symposium on Theory of computing, pp.151-158, 1971", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1971}, {"title": "Artificial Intelligence: A Modern Approach, Prentice Hall; 3 edition", "author": ["S. Russell", "P. Norvig"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2009}, {"title": "Low Density Parity Check Codes", "author": ["R.G. Gallager"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1963}, {"title": "An extensible sat-solver", "author": ["N. Een", "S\u00f6rensson N"], "venue": "In SAT,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2003}, {"title": "Near Shannon Limit Performance of Low Density Parity Check Codes", "author": ["D.J.C. MacKay", "R.M. Neal"], "venue": "Electronics Letters, 1996", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1996}, {"title": "Reconfigurable hardware SAT solvers: a survey of systems", "author": ["I. Skliarova", "A de Brito Ferrari"], "venue": "Computers, IEEE Transactions on , vol.53, no.11, pp. 1449- 1461, Nov. 2004", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2004}, {"title": "Error Correction Coding: Mathematical Methods and Algorithms", "author": ["T.K. Moon"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2005}, {"title": "Error Control Coding", "author": ["S. Lin", "J. Costello D"], "venue": "Fundamentals and Applications,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "A Practical Reconfigurable Hardware Accelerator for Boolean Satisfiability solvers", "author": ["J.D. Davis", "Z. Tan", "F. Yu", "L. Zhang"], "venue": "Design Automation Conference, 2008. DAC 2008. 45th ACM/IEEE , vol., no., pp.780-785, 8-13 June 2008", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2008}, {"title": "Accelerating Boolean satisfiability through application specific processing", "author": ["Y. Zhao", "S. Malik", "M. Moskewicz", "C. Madigan"], "venue": "System Synthesis, 2001. Proceedings. The 14th International Symposium on , vol., no., pp. 244- 249, 2001", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2001}, {"title": "Memory System Optimization for FPGA-Based Implementation of Quasi- Cyclic LDPC Codes Decoders", "author": ["X. Chen", "J. Kang", "S. Lin", "V. Akella"], "venue": "Circuits and Systems I: Regular Papers, IEEE Transactions on , vol.58, no.1, pp.98- 111, Jan. 2011", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "INTRODUCTION Boolean satisfiability (SAT) is a class of problems that establishes if there exist an assignment to variables of a Boolean formula that evaluates it to true [1].", "startOffset": 171, "endOffset": 174}, {"referenceID": 1, "context": "The SAT problem is the first known NP-complete decision problem [2], which means that there is no efficient algorithm to solve SAT problems.", "startOffset": 64, "endOffset": 67}, {"referenceID": 6, "context": "The approaches to solve the SAT problem have divided into software solvers, which solving the problem using computer simulation, and hardware solver, to implement Verilog code running on FPGA or virtual machine [7][10][11].", "startOffset": 211, "endOffset": 214}, {"referenceID": 9, "context": "The approaches to solve the SAT problem have divided into software solvers, which solving the problem using computer simulation, and hardware solver, to implement Verilog code running on FPGA or virtual machine [7][10][11].", "startOffset": 214, "endOffset": 218}, {"referenceID": 10, "context": "The approaches to solve the SAT problem have divided into software solvers, which solving the problem using computer simulation, and hardware solver, to implement Verilog code running on FPGA or virtual machine [7][10][11].", "startOffset": 218, "endOffset": 222}, {"referenceID": 2, "context": "A constraint satisfaction problem (CSP) consists of three components, X, D, and C [3]:", "startOffset": 82, "endOffset": 85}, {"referenceID": 3, "context": "The decoding of a special class of ECC, low-density parity-check (LDPC) codes [4], is a constraint satisfaction problem.", "startOffset": 78, "endOffset": 81}, {"referenceID": 7, "context": "In the decoding of LDPC codes, the procedure can be illustrated by a bipartite graph which contains two types of nodes: variable nodes and parity-check nodes, and use iterative belief propagation decoding method to find solutions [8][9].", "startOffset": 230, "endOffset": 233}, {"referenceID": 8, "context": "In the decoding of LDPC codes, the procedure can be illustrated by a bipartite graph which contains two types of nodes: variable nodes and parity-check nodes, and use iterative belief propagation decoding method to find solutions [8][9].", "startOffset": 233, "endOffset": 236}, {"referenceID": 4, "context": "1 Contribution Our main contribution in this paper is (1) applying the algorithm of decoding LDPC codes, to CNF-based SAT problems, (2) evaluating the proposed modified BPA by a simulator written in C/C++, (3) estimating the time that is need by the proposed SAT solver and comparing it with MiniSat [5].", "startOffset": 300, "endOffset": 303}, {"referenceID": 3, "context": "LOW-DENSITY PARITY CHECK CODE Originally proposed in 1962 by Robert Gallager [4] and rediscovered by David MacKay in 1996 [6], LDPC codes with iterative decoding algorithms have performance closely approaching Shannon channel capacity.", "startOffset": 77, "endOffset": 80}, {"referenceID": 5, "context": "LOW-DENSITY PARITY CHECK CODE Originally proposed in 1962 by Robert Gallager [4] and rediscovered by David MacKay in 1996 [6], LDPC codes with iterative decoding algorithms have performance closely approaching Shannon channel capacity.", "startOffset": 122, "endOffset": 125}, {"referenceID": 0, "context": "For example, let the parity-check matrix H be a 3\u00d74 matrix H = [ 1 1 1 0 1 1 0 1 0 1 1 1 ]", "startOffset": 63, "endOffset": 90}, {"referenceID": 0, "context": "For example, let the parity-check matrix H be a 3\u00d74 matrix H = [ 1 1 1 0 1 1 0 1 0 1 1 1 ]", "startOffset": 63, "endOffset": 90}, {"referenceID": 0, "context": "For example, let the parity-check matrix H be a 3\u00d74 matrix H = [ 1 1 1 0 1 1 0 1 0 1 1 1 ]", "startOffset": 63, "endOffset": 90}, {"referenceID": 0, "context": "For example, let the parity-check matrix H be a 3\u00d74 matrix H = [ 1 1 1 0 1 1 0 1 0 1 1 1 ]", "startOffset": 63, "endOffset": 90}, {"referenceID": 0, "context": "For example, let the parity-check matrix H be a 3\u00d74 matrix H = [ 1 1 1 0 1 1 0 1 0 1 1 1 ]", "startOffset": 63, "endOffset": 90}, {"referenceID": 0, "context": "For example, let the parity-check matrix H be a 3\u00d74 matrix H = [ 1 1 1 0 1 1 0 1 0 1 1 1 ]", "startOffset": 63, "endOffset": 90}, {"referenceID": 0, "context": "For example, let the parity-check matrix H be a 3\u00d74 matrix H = [ 1 1 1 0 1 1 0 1 0 1 1 1 ]", "startOffset": 63, "endOffset": 90}, {"referenceID": 0, "context": "For example, let the parity-check matrix H be a 3\u00d74 matrix H = [ 1 1 1 0 1 1 0 1 0 1 1 1 ]", "startOffset": 63, "endOffset": 90}, {"referenceID": 0, "context": "For example, let the parity-check matrix H be a 3\u00d74 matrix H = [ 1 1 1 0 1 1 0 1 0 1 1 1 ]", "startOffset": 63, "endOffset": 90}, {"referenceID": 11, "context": "Based the experimental result of [13], the desired FPGA computation ability, second per iteration (SPI) can be calculated in equation below:", "startOffset": 33, "endOffset": 37}, {"referenceID": 11, "context": "In [13], the Codeword length is the bandwidth the FPGA can execute in parallel in a single iteration.", "startOffset": 3, "endOffset": 7}, {"referenceID": 9, "context": "[10][11] both implemented Boolean Constraint Propagation computation in parallel.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "[10][11] both implemented Boolean Constraint Propagation computation in parallel.", "startOffset": 4, "endOffset": 8}, {"referenceID": 6, "context": "[7] implemented the application-specific architecture by storing the whole literal-clause matrix into the FPGA block.", "startOffset": 0, "endOffset": 3}], "year": 2016, "abstractText": "Boolean satisfiability (SAT) has an extensive application domain in computer science, especially in electronic design automation applications. Circuit synthesis, optimization, and verification problems can be solved by transforming original problems to SAT problems. However, the SAT problem is known as an NP-complete problem, which means there is no efficient method to solve SAT problems. Therefore, the design of an efficient SAT solver to enhance the performance is always desired. In this paper, we proposed a hardware acceleration method for Boolean SAT problems. By surveying the properties of SAT problems and the decoding of low-density parity-check (LDPC) codes, a special class of error-correcting codes (ECCs), we discover that both of them are constraint satisfaction problems (CSPs). The belief propagation algorithm (BPA) has been successfully applied to the decoding of LDPC, and the corresponding decoder hardware designs are extensively studied. Therefore, we proposed a belief propagation based algorithm to solve SAT problems. With this algorithm, the SAT solver can be accelerated by hardware. A software simulator is implemented to verify the proposed algorithm and the performance improvement is estimated. Our experiment results show that time complexity does not increase with the size of SAT problems and the proposed method can achieve at least 30\u00d7 speedup compared to MiniSat.", "creator": "Microsoft\u00ae Word 2013"}}}