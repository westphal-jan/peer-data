{"id": "1603.07704", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Mar-2016", "title": "Probabilistic Reasoning via Deep Learning: Neural Association Models", "abstract": "benderman In this ad\u0131yaman paper, consistory we leftfield propose ferarri a new sebastianelli deep learning nylcare approach, called immeasurably neural spoil association model (karush NAM ), for kasenga probabilistic reasoning frakes in artificial patta intelligence. We bible-based propose to use 5,400 neural takamado networks serviceberry to rigour model mells association kaman between keates any deplane two glendalough events in umpc a domain. Neural pc-98 networks take enflaming one land-owner event lucking as ukwu input zahl\u00e9 and compute uttarapatha a conditional bojonegoro probability 3:00 of the other dharmesh event wamsley to alleys model nzse-50 how adventuress likely these jacksonian two isomeric events uosukainen are associated. The actual brumskine meaning 13.28 of the conditional tatsha probabilities varies 45-54 between 85.5 applications childbed and verbard depends on 87.43 how the models stall are bowlingual trained. In rothmans this then-chairman work, herma as galinovic two case ramparts studies, peoplepc we have frodeno investigated jatavarman two mineralized NAM structures, beilein namely deep neural angloma networks (czerwony DNNs) nb5 and juho relation flue-gas modulated neural nets (oxymoronic RMNNs ), unloader on several probabilistic box-like reasoning tasks in AI, karsenty including tuamotu recognizing aniane textual steadied entailment, malplaquet triple coupar classification autopsied in multirelational marilla knowledge exclamatory bases al-khw\u0101rizm\u012b and common - needlepoint sense reasoning. Experimental liselotte results 51-48 on catchings several trait popular b\u0113rzi\u0146\u0161 data sets derived from dishpan WordNet, FreeBase zengi and ConceptNet have all sudani demonstrated that jisheng both lcct DNNs botevgrad and RMNNs 10-foot perform equally 1982-88 well schmitten and cuffed they can significantly avocation outperform pointedly the conventional methods kladusa available for edale these reasoning tasks. geophysical Moreover, comparing with datel DNNs, RMNNs are superior in karkouri knowledge transfer, where badding a pre - half-point trained bouguereau model can philharmonie be quickly nidaros extended sloat to kobasew an debski unseen relation after observing only a few training samples.", "histories": [["v1", "Thu, 24 Mar 2016 18:54:18 GMT  (314kb,D)", "https://arxiv.org/abs/1603.07704v1", "Probabilistic reasoning, Deep learning"], ["v2", "Wed, 3 Aug 2016 14:31:17 GMT  (1461kb,D)", "http://arxiv.org/abs/1603.07704v2", "Probabilistic reasoning, Winograd Schema Challenge, Deep learning, Neural Networks, Distributed Representation"]], "COMMENTS": "Probabilistic reasoning, Deep learning", "reviews": [], "SUBJECTS": "cs.AI cs.LG cs.NE", "authors": ["quan liu", "hui jiang", "rew evdokimov", "zhen-hua ling", "xiaodan zhu", "si wei", "yu hu"], "accepted": false, "id": "1603.07704"}, "pdf": {"name": "1603.07704.pdf", "metadata": {"source": "CRF", "title": "Probabilistic Reasoning via Deep Learning: Neural Association Models", "authors": ["Quan Liu", "Hui Jiang", "Andrew Evdokimov", "Zhen-Hua Ling", "Xiaodan Zhu", "Si Wei", "Yu Hu"], "emails": ["quanliu@mail.ustc.edu.cn,", "hj@cse.yorku.ca,", "ae2718@cse.yorku.ca,", "zhling@ustc.edu.cn", "xiaodan@cse.yorku.ca,", "siwei@iflytek.com,", "yuhu@iflytek.com"], "sections": [{"heading": "Introduction", "text": "Reasoning is an important topic in artificial intelligence (AI), which has attracted considerable attention and research effort in the past few decades (McCarthy 1986; Minsky 1988; Mueller 2014). Besides the traditional logic reasoning, probabilistic reasoning has been studied as another typical genre in order to handle knowledge uncertainty in reasoning based on probability theory (Pearl 1988; Neapolitan 2012). The probabilistic reasoning can be used to predict conditional probability Pr(E2|E1) of one event E2 given another event E1. State-of-the-art methods for probabilistic reasoning include Bayesian Networks (Jensen 1996), Markov Logic Networks (Richardson and Domingos 2006) and other graphical models (Koller and Friedman 2009). Taking Bayesian networks as an example, the conditional\nCopyright 2015-2016.\nprobabilities between two associated events are calculated as posterior probabilities according to Bayes theorem, with all possible events being modeled by a pre-defined graph structure. However, these methods quickly become intractable for most practical tasks where the number of all possible events is usually very large.\nIn recent years, distributed representations that map discrete language units into continuous vector space have gained significant popularity along with the development of neural networks (Bengio et al. 2003; Collobert et al. 2011; Mikolov et al. 2013). The main benefit of embedding in continuous space is its smoothness property, which helps to capture the semantic relatedness between discrete events, potentially generalizable to unseen events. Similar ideas, such as knowledge graph embedding, have been proposed to represent knowledge bases (KB) in low-dimensional continuous space (Bordes et al. 2013; Socher et al. 2013; Wang et al. 2014; Nickel et al. 2015). Using the smoothed KB representation, it is possible to reason over the relations among various entities. However, human-like reasoning remains as an extremely challenging problem partially because it requires the effective encoding of world knowledge using powerful models. Most of the existing KBs are quite sparse and even recently created large-scale KBs, such as YAGO, NELL and Freebase, can only capture a fraction of world knowledge. In order to take advantage of these sparse knowledge bases, the state-of-the-art approaches for knowledge graph embedding usually adopt simple linear models, such as RESCAL (Nickel, Tresp, and Kriegel 2012), TransE (Bordes et al. 2013) and Neural Tensor Networks (Socher et al. 2013; Bowman 2013).\nAlthough deep learning techniques achieve great progresses in many domains, e.g. speech and image (LeCun, Bengio, and Hinton 2015), the progress in commonsense reasoning seems to be slow. In this paper, we propose to use deep neural networks, called neural association model (NAM), for commonsense reasoning. Different from the existing linear models, the proposed NAM model uses multilayer nonlinear activations in deep neural nets to model the association conditional probabilities between any two possible events. In the proposed NAM framework, all symbolic events are represented in low-dimensional continuous space and there is no need to explicitly specify any dependency structure among events as required in Bayesian networks.\nar X\niv :1\n60 3.\n07 70\n4v 2\n[ cs\n.A I]\n3 A\nug 2\n01 6\nDeep neural networks are used to model the association between any two events, taking one event as input to compute a conditional probability of another event. The computed conditional probability for association may be generalized to model various reasoning problems, such as entailment inference, relational learning, causation modelling and so on. In this work, we study two model structures for NAM. The first model is a standard deep neural networks (DNN) and the second model uses a special structure called relation modulated neural nets (RMNN). Experiments on several probabilistic reasoning tasks, including recognizing textual entailment, triple classification in multi-relational KBs and commonsense reasoning, have demonstrated that both DNNs and RMNNs can outperform other conventional methods. Moreover, the RMNN model is shown to be effective in knowledge transfer learning, where a pre-trained model can be quickly extended to a new relation after observing only a few training samples.\nFurthermore, we also apply the proposed NAM models to more challenging commonsense reasoning problems, i.e., the recently proposed Winograd Schemas (WS) (Levesque, Davis, and Morgenstern 2011). The WS problems has been viewed as an alternative to the Turing Test (Turing 1950). To support the model training for NAM, we propose a straightforward method to collect associated cause-effect pairs from large unstructured texts. The pair extraction procedure starts from constructing a vocabulary with thousands of common verbs and adjectives. Based on the extracted pairs, this paper extends the NAM models to solve the Winograd Schema problems and achieves a 61% accuracy on a set of causeeffect examples. Undoubtedly, to realize commonsense reasoning, there is still much work be done and many problems to be solved. Detailed discussions would be given at the end of this paper."}, {"heading": "Motivation: Association between Events", "text": "This paper aims to model the association relationships between events using neural network methods. To make clear our main work, we will first describe the characteristics of events and all the possible association relationships between events. Based on the analysis of event association, we present the motivation for the proposed neural association models. In commonsense reasoning, the main characteristics of events are the following: \u2022 Massive: In most natural situations, the number of events\nis massive, which means that the association space we will model is very large.\n\u2022 Sparse: All the events occur in our dialy life are very sparse. It is a very challenging task to ideally capture the similarities between all those different events. At the same time, association between events appears everywhere. Consider a single event play basketball for example, shown in Figure 1. This single event would associate with many other events. A person who plays basketball would win a game. Meanwhile, he would be injured in some cases. The person could make money by playing basketball as well. Moreover, we know that a person who plays basketball should be coached during a regular game. Those are\nall typical associations between events. However, we need to recognize that the task of modeling event association is not identical to performing classification. In classification, we typically map an event from its feature space into one of pre-defined finite categories or classes. In event association, we need to compute the association probability between two arbitrary events, each of which may be a sample from a possibly infinite set. The mapping relationships in event association would be many-to-many; e.g., not only playing basketball could support us to make money, someone who makes stock trading could make money as well. More specifically, the association relationships between events include causeeffect, spatial, temporal and so on. This paper treats them as a general relation considering the sparseness of useful KBs.\nIn this paper, we believe that modeling the the association relationships between events is a fundamental work for commonsense reasoning. If we could model the event associations very well, we may have the ability to solve many commonsense reasoning problems. Considering the main characteristics of discrete event and event association, two reasons are given for describing our motivation.\n\u2022 The advantage of distributed representation methods: representing discrete events into continuous vector space provides a good way to capture the similarities between discrete events.\n\u2022 The advantage of neural network methods: neural networks could perform universal approximation while linear models cannot easily do this (Hornik, Stinchcombe, and White 1990).\nAt the same time, this paper takes into account that both distributed representation and neural network methods are data-hungry. In Artificial Intelligence (AI) research, mining large sizes of useful data (or knowledge) for model learning is always challenging. In the following section, this paper presents a preliminary work on data collection and the corresponding experiments we have made for solving commonsense reasoning problems."}, {"heading": "Neural Association Models (NAM)", "text": "In this paper, we propose to use a nonlinear model, namely neural association model, for probabilistic reasoning. Our main goal is to use neural nets to model the association probability for any two events E1 and E2 in a domain, i.e., Pr(E2|E1) of E2 conditioning on E1. All possible events in the domain are projected into continuous space without specifying any explicit dependency structure among them. In the following, we first introduce neural association models (NAM) as a general modeling framework for probabilistic reasoning. Next, we describe two particular NAM structures for modeling the typical multi-relational data."}, {"heading": "NAM in general", "text": ""}, {"heading": "Deep Neural Networks", "text": ""}, {"heading": "Association in DNNs", "text": "Figure 2 shows the general framework of NAM for associating two events, E1 and E2. In the general NAM framework, the events are first projected into a low-dimension continuous space. Deep neural networks with multi-layer nonlinearity are used to model how likely these two events are to be associated. Neural networks take the embedding of one event E1 (antecedent) as input and compute a conditional probability Pr(E2|E1) of the other event E2 (consequent). If the event E2 is binary (true or false), the NAM models may use a sigmoid node to compute Pr(E2|E1). If E2 takes multiple mutually exclusive values, we use a few softmax nodes for Pr(E2|E1), where it may need to use multiple embeddings for E2 (one per value). NAMs do not explicitly specify how different events E2 are actually related; they may be mutually exclusive, contained, intersected. NAMs are only used to separately compute conditional probabilities, Pr(E2|E1), for each pair of events, E1 and E2, in a task. The actual physical meaning of the conditional probabilities Pr(E2|E1) varies between applications and depends on how the models are trained. Table 1 lists a few possible applications.\nIn language modeling, the antecedent event is the representation of historical context, h, and the consequent event is\nthe next wordw that takes one out of K values. In causal reasoning, E1 and E2 represent cause and effect respectively. For example, we have E1 = \u201ceating cheesy cakes\u201d and E2 = \u201cbeing happy\u201d, where Pr(E2|E1) indicates how likely it is that E1 may cause the binary (true or false) event E2. In the same model, we may add more nodes to model different effects from the sameE1, e.g.,E\u20322 = \u201cgrowing fat\u201d. Moreover, we may add 5 softmax nodes to model a multi-valued event, e.g., E\u2032\u20322 = \u201chappiness\u201d (scale from 1 to 5). Similarly, for knowledge triple classification of multi-relation data, given one triple (ei, rk, ej), E1 consists of the head entity (subject) ei and relation (predicate) rk, and E2 is a binary event indicating whether the tail entity (object) ej is true or false. Finally, in the applications of recognizing lexical or textual entailment, E1 and E2 may be defined as premise and hypothesis. More generally, NAMs can be used to model an infinite number of events E2, where each point in a continuous space represents a possible event. In this work, for simplicity, we only consider NAMs for a finite number of binary events E2 but the formulation can be easily extended to more general cases.\nCompared with traditional methods, like Bayesian networks, NAMs employ neural nets as a universal approximator to directly model individual pairwise event association probabilities without relying on explicit dependency structure. Therefore, NAMs can be end-to-end learned purely from training samples without strong human prior knowledge, and are potentially more scalable to real-world tasks.\nLearning NAMs Assume we have a set of Nd observed examples (event pairs {E1, E2}), D, each of which is denoted as xn. This training set normally includes both positive and negative samples. We denote all positive samples (E2 = true) as D+ and all negative samples (E2 = false) as D\u2212. Under the same independence assumption as in statistical relational learning (SRL) (Getoor 2007; Nickel et al. 2015), the log likelihood function of a NAM model can be expressed as follows:\nL(\u0398) = \u2211\nx+n\u2208D+ ln f(x+n ;\u0398) + \u2211 x\u2212n\u2208D\u2212 ln(1\u2212 f(x\u2212n ;\u0398))\n(1) where f(xn;\u0398) denotes a logistic score function derived by the NAM for each xn, which numerically computes the conditional probability Pr(E2|E1). More details on f(\u00b7) will be given later in the paper. Stochastic gradient descent (SGD) methods may be used to maximize the above likelihood function, leading to a maximum likelihood estimation (MLE) for NAMs.\nIn the following, as two case studies, we consider two NAM structures with a finite number of output nodes to model Pr(E2|E1) for any pair of events, where we have only a finite number of E2 and each E2 is binary. The first model is a typical DNN that associates antecedent event (E1) at input and consequent event (E2) at output. We then present another model structure, called relation-modulated neural nets, which is more suitable for multi-relational data."}, {"heading": "DNN for NAMs", "text": "The first NAM structure is a traditional DNN as shown in Figure 3. Here we use multi-relational data in KB for illustration. Given a KB triple xn = (ei, rk, ej) and its corresponding label yn (true or false), we cast E1 = (ei, rk) and E2 = ej to compute Pr(E2|E1) as follows.\n0\nRelation code (S) Head entity vector\nTail entity vector\nf Score function\nW(1)\nW(2)\nW(L)\n\u2026 \u2026\n\u2026 \u2026\nout: z (L) In: a(L)\nout: z(2) In: a(2)\nout: z (1) In: a(1)\nB(1)\nB(2)\nB(L)\nB(L+1)\n0\nNew Relation Head entity vector\nf\nW(1)\nW(2)\nW(L)\n\u2026 \u2026\n\u2026 \u2026\nB(1)\nB(2)\nB(L)\nTail entity vector\nS V(head) V (head)\nB(L+1)\n0\nExisted Relations Head entity vector\nf\nW(1)\nW(2)\nW(L)\n\u2026 \u2026\n\u2026 \u2026\nB(1)\nB(2)\nB(L)\nTail entity vector\nS V(head) V (head)\nB(L+1)\nTransfering\nVector space\nEvent E1\nVector space\nEvent E2\nDeep Neural Networks\nAssociation in DNNs\nP(E2|E1)\nRelation vector Head entity vector\nTail entity vector\nfAssociation at here\nW(1)\nW(2)\nW(L)\n\u2026\nout: z(L) In: a(L)\nout: z(2) In: a(2)\nout: z(1) In: a(1)\nHead entity vector\nTail entity vector\nf Association at here\nW(1)\nW(2)\nW(L)\n\u2026\nout: z(L) In: a(L)\nout: z(2) In: a(2)\nout: z(1) In: a(1)\n\u2026\nB(1)\nB(2)\nB(L)\nB(L+1)\nRelation vector\nFigure 3: The DNN structure for NAMs.\nFirstly, we represent head entity phrase ei and tail entity phrase ej by two embedding vectors v (1) i (\u2208 V(1)) and v (2) j (\u2208 V(2)). Similarly, relation rk is also represented by a low-dimensional vector ck \u2208 C, which we call a relation code hereafter. Secondly, we combine the embeddings of the head entity ei and the relation rk to feed into an (L + 1)- layer DNN as input. The DNN consists of L rectified linear (ReLU) hidden layers (Nair and Hinton 2010). The input is z(0) = [v\n(1) i , ck]. During the feedforward process, we have\na(`) = W(`)z(`\u22121) + b` (` = 1, \u00b7 \u00b7 \u00b7 , L) (2)\nz(`) = h ( a(`) ) = max ( 0,a(`) ) (` = 1, \u00b7 \u00b7 \u00b7 , L) (3)\nwhere W(`) and b` represent the weight matrix and bias for layer ` respectively.\nFinally, we propose to calculate a sigmoid score for each triple xn = (ei, rk, ej) as the association probability using the last hidden layer\u2019s output and the tail entity vector v(2)j :\nf(xn;\u0398) = \u03c3 ( z(L) \u00b7 v(2)j ) (4)\nwhere \u03c3(\u00b7) is the sigmoid function, i.e., \u03c3(x) = 1/(1+e\u2212x). All network parameters of this NAM structure, represented as \u0398 = {W,V(1),V(2),C}, may be jointly learned by maximizing the likelihood function in eq. (1)."}, {"heading": "Relation-modulated Neural Networks (RMNN)", "text": "Particularly for multi-relation data, following the idea in (Xue et al. 2014), we propose to use the so-called relationmodulated neural nets (RMNN), as shown in Figure 4.\nThe RMNN uses the same operations as DNNs to project all entities and relations into low-dimensional continuous space. As shown in Figure 4, we connect the knowledgespecific relation code c(k) to all hidden layers in the network.\n0\nRelation code (S) Head entity vector\nTail entity vector f Score function\nW(1)\nW(2) W(L) \u2026 \u2026 \u2026 \u2026 out: z (L) In: a(L) out: z(2) In: a(2) out: z (1)\nIn: a(1)\nB(1)\nB(2) B(L) B(L+1)\n0\nNew Relation Head entity vector\nf W(1) W(2) W(L) \u2026 \u2026 \u2026 \u2026 B(1) B(2) B(L)\nTail entity vector\nS V(head) V (head)\nB(L+1) 0\nExisted Relations Head entity vector\nf W(1) W(2) W(L) \u2026 \u2026 \u2026 \u2026 B(1) B(2) B(L)\nTail entity vector\nS V(head) V (head) B(L+1) Transfering\nVector space\nEvent E1\nVector space\nEvent E2\nDeep Neural Networks\nAssociation in DNNs\nP(E2|E1)\nRelation vector Head entity vector Tail entity vector fAssociation at here W(1) W(2) W(L) \u2026 out: z(L) In: a(L) out: z(2) In: a(2) out: z(1) In: a(1)\nAs shown later, this structure is superior in knowledge transfer learning tasks. Therefore, for each layer of RMNNs, instead of using eq.(2), its linear activation signal is computed from the previous layer z(`\u22121) and the relation code c(k) as follows:\na(`) = W(`)z(`\u22121) + B(`)c(k), (` = 1 \u00b7 \u00b7 \u00b7L) (5)\nwhere W(`) and B` represent the normal weight matrix and the relation-specific weight matrix for layer `. At the topmost layer, we calculate the final score for each triple xn = (ei, rk, ej) using the relation code as:\nf(xn;\u0398) = \u03c3 ( z(L) \u00b7 v(2)j + B (L+1) \u00b7 c(k) ) . (6)\nIn the same way, all RMNN parameters, including \u0398 = {W,B,V(1),V(2),C}, can be jointly learned based on the above maximum likelihood estimation.\nThe RMNN models are particularly suitable for knowledge transfer learning, where a pre-trained model can be quickly extended to any new relation after observing a few samples from that relation. In this case, we may estimate a new relation code based on the available new samples while keeping the whole network unchanged. Due to its small size, the new relation code can be reliably estimated from only a small number of new samples. Furthermore, model performance in all original relations will not be affected since the model and all original relation codes are not changed during transfer learning."}, {"heading": "Experiments", "text": "In this section, we evaluate the proposed NAM models for various reasoning tasks. We first describe the experimental setup and then we report the results from several reasoning tasks, including textual entailment recognition, triple classification in multi-relational KBs, commonsense reasoning and knowledge transfer learning."}, {"heading": "Experimental setup", "text": "Here we first introduce some common experimental settings used for all experiments: 1) For entity or sentence representations, we represent them by composing from their\nword vectors as in (Socher et al. 2013). All word vectors are initialized from a pre-trained skip-gram (Mikolov et al. 2013) word embedding model, trained on a large English Wikipedia corpus. The dimensions for all word embeddings are set to 100 for all experiments; 2) The dimensions of all relation codes are set to 50. All relation codes are randomly initialized; 3) For network structures, we use ReLU as the nonlinear activation function and all network parameters are initialized according to (Glorot and Bengio 2010). Meanwhile, since the number of training examples for most probabilistic reasoning tasks is relatively small, we adopt the dropout approach (Hinton et al. 2012) during the training process to avoid the over-fitting problem; 4) During the learning process of NAMs, we need to use negative samples, which are automatically generated by randomly perturbing positive KB triples as D\u2212 = {(ei, rk, e`)|e` 6= ej \u2227 (ei, rk, ej) \u2208 D+}.\nFor each task, we use the provided development set to tune for the best training hyperparameters. For example, we have tested the number of hidden layers among {1, 2, 3}, the initial learning rate among {0.01, 0.05, 0.1, 0.25, 0.5}, dropout rate among {0, 0.1, 0.2, 0.3, 0.4}. Finally, we select the best setting based on the performance on the development set: the final model structure uses 2 hidden layers, and the learning rate and the dropout rate are set to be 0.1 and 0.2, respectively, for all the experiments. During model training, the learning rate is halved once the performances in the development set decreases. Both DNNs and RMNNs are trained using the stochastic gradient descend (SGD) algorithm. We notice that the NAM models converge quickly after 30 epochs."}, {"heading": "Recognizing Textual Entailment", "text": "Understanding entailment and contradiction is fundamental to language understanding. Here we conduct experiments on a popular recognizing textual entailment (RTE) task, which aims to recognize the entailment relationship between a pair of English sentences. In this experiment, we use the SNLI dataset in (Bowman et al. 2015) to conduct 2-class RTE experiments (entailment or contradiction). All instances that are not labelled as \u201centailment\u201d are converted to contradiction in our experiments. The SNLI dataset contains hundreds of thousands of training examples, which is useful for training a NAM model. Since this data set does not include multirelational data, we only investigate the DNN structure for this task. The final NAM result, along with the baseline performance provided in (Bowman et al. 2015), is listed in Table 2.\nFrom the results, we can see the proposed DNN based\nNAM model achieves considerable improvements over various traditional methods. This indicates that we can better model entailment relationship in natural language by representing sentences in continuous space and conducting probabilistic reasoning with deep neural networks."}, {"heading": "Triple classification in multi-relational KBs", "text": "In this section, we evaluate the proposed NAM models on two popular knowledge triple classification datasets, namely WN11 and FB13 in (Socher et al. 2013) (derived from WordNet and FreeBase), to predict whether some new triple relations hold based on other training facts in the database. The WN11 dataset contains 38,696 unique entities involving 11 different relations in total while the FB13 dataset covers 13 relations and 75,043 entities. Table 3 summarizes the statistics of these two datasets.\nThe goal of knowledge triple classification is to predict whether a given triple xn = (ei, rk, ej) is correct or not. We first use the training data to learn NAM models. Afterwards, we use the development set to tune a global threshold T to make a binary decision: the triple is classified as true if f(xn;\u0398) \u2265 T ; otherwise it is false. The final accuracy is calculated based on how many triplets in the test set are classified correctly.\nExperimental results on both WN11 and FB13 datasets are given in Table 4, where we compare the two NAM models with all other methods reported on these two datasets. The results clearly show that the NAM methods (DNNs and RMNNs) achieve comparable performance on these triple classification tasks, and both yield consistent improvement over all existing methods. In particular, the RMNN model yields 3.7% and 1.9% absolute improvements over the popular neural tensor networks (NTN) (Socher et al. 2013) on WN11 and FB13 respectively. Both DNN and RMNN models are much smaller than NTN in the number of parameters and they scale well as the number of relation types increases. For example, both DNN and RMNN models for WN11 have about 7.8 millions of parameters while NTN has about 15 millions. Although the RESCAL and TransE models have about 4 millions of parameters for WN11, their size goes up quickly for other tasks of thousands or more relation types. In addition, the training time of DNN and RMNN is much shorter than that of NTN or TransE since our models converge much faster. For example, we have obtained at least a 5 times speedup over NTN in WN11."}, {"heading": "Commonsense Reasoning", "text": "Similar to the triple classification task (Socher et al. 2013), in this work, we use the ConceptNet KB (Liu and Singh 2004) to construct a new commonsense data set, named as\nCN14 hereafter. When building CN14, we first select all facts in ConceptNet related to 14 typical commonsense relations, e.g., UsedFor, CapableOf. (see Figure 5 for all 14 relations.) Then, we randomly divide the extracted facts into three sets, Train, Dev and Test. Finally, in order to create a test set for classification, we randomly switch entities (in the whole vocabulary) from correct triples and get a total of 2\u00d7#Test triples (half are positive samples and half are negative examples). The statistics of CN14 are given in Table 5.\nThe CN14 dataset is designed for answering commonsense questions like Is a camel capable of journeying across desert? The proposed NAM models answer this question by calculating the association probability Pr(E2|E1) where E1 = {camel, capable of} and E2 = journey across desert. In this paper, we compare two NAM methods with the popular NTN method in (Socher et al. 2013) on this data set and the overall results are given in Table 6. We can see that both NAM methods outperform NTN in this task, and the DNN and RMNN models obtain similar performance.\nFurthermore, we show the classification accuracy of all 14 relations in CN14 for RMNN and NTN in Figure 5, which show that the accuracy of RMNN varies among different relations from 80.1% (Desires) to 93.5% (CreatedBy). We notice some commonsense relations (such as Desires, CapableOf ) are harder than the others (like CreatedBy, CausesDesire). RMNN overtakes NTN in almost all relations."}, {"heading": "Knowledge Transfer Learning", "text": "Knowledge transfer between various domains is a characteristic feature and crucial cornerstone of human learning. In this section, we evaluate the proposed NAM models for a\nknowledge transfer learning scenario, where we adapt a pretrained model to an unseen relation with only a few training samples from the new relation. Here we randomly select a relation, e.g., CausesDesire in CN14 for this experiment. This relation contains only 4800 training samples and 480 test samples. During the experiments, we use all of the other 13 relations in CN14 to train baseline NAM models (both DNN and RMNN). During the transfer learning, we freeze all NAM parameters, including all weights and entity representations, and only learn a new relation code for CausesDesire from the given samples. At last, the learned relation code (along with the original NAM models) is used to classify the new samples of CausesDesire in the test set. Obviously, this transfer learning does not affect the model performance in the original 13 relations because the models are not changed. Figure 6 shows the results of knowledge transfer learning for the relation CausesDesire as we increase the training samples gradually. The result shows that RMNN performs much better than DNN in this experiment, where we can significantly improve RMNN for the new relation with only 5-20% of the total training samples for CausesDesire. This demonstrates that the structure to connect the relation code to all hidden layers leads to more effective learning of new relation codes from a relatively small number of training samples.\nNext, we also test a more aggressive learning strategy for this transfer learning setting, where we simultaneously update all the network parameters during the learning of the\nnew relation code. The results are shown in Figure 7. This strategy can obviously improve performance more on the new relation, especially when we add more training samples. However, as expected, the performance on the original 13 relations deteriorates. The DNN improves the performance on the new relation as we use all training samples (up to 94.6%). However, the performance on the remaining 13 original relations drops dramatically from 85.6% to 75.5%. Once again, RMNN shows an advantage over DNN in this transfer learning setting, where the accuracy on the new relation increases from 77.9% to 90.8% but the accuracy on the original 13 relations only drop slightly from 85.9% to 82.0%."}, {"heading": "Extending NAMs for Winograd Schema Data Collection", "text": "In the previous experiments sections, all the tasks already contained manually constructed training data for us. However, in many cases, if we want to realize flexible commonsense reasoning under the real world conditions, obtaining the training data can also be very challenging. More specifically, since the proposed neural association model is a typical deep learning technique, lack of training data would make it difficult for us to train a robust model. Therefore, in this paper, we make some efforts and try to mine useful data for model training. As a very first step, we are now working on collecting the cause-effect relationships between a set of common words and phrases. We believe this type of knowledge would be a key component for modeling the association relationships between discrete events.\nThis section describes the idea for automatic cause-effect pair collection as well as the data collection results. We will first introduce the common vocabulary we created for query generation. After that, the detailed algorithm for cause-effect pair collection will be presented. Finally, the following section will present the data collection results.\nCommon Vocabulary and Query Generation To avoid the data sparsity problem, we start our work by constructing a vocabulary of very common words. In our current investigations, we construct a vocabulary which contains 7500 verbs and adjectives. As shown in Table 7, this vocabulary includes 3000 verb words, 2000 verb phrases\nand 2500 adjective words. The procedure for constructing this vocabulary is straightforward. We first extract all words and phrases (divided by part-of-speech tags) from WordNet (Miller 1995). After conducting part-of-speech tagging on a large corpus, we then get the occurrence frequencies for all those words and phrases by scanning over the tagged corpus. Finally, we sort those words and phrases by frequency and then select the top N results.\nQuery Generation Based on the common vocabulary, we generate search queries by pairing any two words (or phrases). Currently we only focus on extracting the association relationships between verbs and adjectives. Even for this small vocabulary, the search space is very large (7.5K by 7.5K leads to tens of millions pairs). In this work, we define several patterns for each word or phrase based on two popular semantic dimensions: 1) positive-negative, 2) activepassive (Osgood 1952). Using the verbs rob and arrest for example, each of them contains 4 patterns, i.e. (active, positive), (active, negative), (passive, positive) and (passive, negative). Therefore, the query formed by rob and arrest would contain 16 possible dimensions, as shown in Figure 8. The task of mining the cause-effect relationships for any two words or phrases then becomes the task of getting the number of occurrences for all the possible links. Text corpus Vocab Sentences Results"}, {"heading": "Association Links", "text": ""}, {"heading": "Automatic Cause-Effect Pair Collection", "text": "Based on the created queries, in this section, we present the procedures for extracting cause-effect pairs from large unstructured texts. The overall system framework is shown in Figure 9.\nQuery Searching The goal of query searching is to find all the possible sentences that may contain the input queries. Since the number of queries is very large, we structure all the queries as a hashmap and conduct string matching during text scanning. In detail, the searching program starts by\n\u201crob\u201d\nActive, Positive\nActive, Negative\nPassive, Positive\nPassive, Negative\n\u201carrest\u201d\nActive, Positive\nActive, Negative\nPassive, Positive\nPassive, Negative\nAssociation Links\nconducting lemmatizing, part-of-speech tagging and dependency parsing on the source corpus. After it, we scan the corpus from the begining to end. When dealing with each sentence, we will try to find the matched words (or phrases) using the hashmap. This strategy help us to reduce the search complexity to be linear with the size of corpus, which has been proved to be very efficient in our experiments.\nSubject-Object Matching Based on the dependency parsing results, once we find one phrase of a query, we would check whether that phrase is associated with at least one subject or object in the corresponding sentence or not. At the same time, we record whether the phrase was positive or negative, active or passive. Moreover, for helping us to decide the cause-effect relationships, we would check whether the phrase is linked with some connective words or not. Typical connective words used in this work are because and if. To finally extract the cause-effect pairs, we design a simple subject-object matching rule, which is similar to the work of (Peng, Khashabi, and Roth 2015). 1) If the two phrases in one query share the same subject, the relationship between them is then straightforward; 2) If the subject of one phrase is the object of the other phrase, then we need to apply the passive pattern to the phrase related to the object. This subject-object matching idea is similar to the work proposed in (Peng, Khashabi, and Roth 2015). Using query (arrest, rob) as an example. Once we find sentence \u201cTom was arrested because Tom robbed the man\u201d, we obtain its dependency parsing result as shown in Figure 10. The verb arrest and rob share a same subject, and the pattern for arrest is passive, we will add the occurrence of the corresponding association link, i.e. link from the (active,positive) pattern of rob to the (passive,positive) pattern of arrest, by 1."}, {"heading": "Data Collection Results", "text": "Table 8 shows the corpora we used for collecting the causeeffect pairs and the corresponding data collection results. We extract approximately 240,000 pairs from different corpora."}, {"heading": "Winograd Schema Challenge", "text": "Based on all the experiments described in the previous sections, we could conclude that the neural association model has the potential to be effective in commonsense reasoning. To further evaluate the effectiveness of the proposed neural association model, in this paper, we conduct experiments on solving the complex Winograd Schema challenge problems (Levesque, Davis, and Morgenstern 2011; Morgenstern, Davis, and Ortiz Jr 2016). Winograd Schema is a commonsense reasoning task proposed in recent years, which has been treated as an alternative to the Turing Test (Turing 1950). This is a new AI task and it would be very interesting to see whether neural network methods are suitable for solving this problem. This section then describes the progress we have made in attempting to meet the Winograd Schema Challenge. For making clear what is the main task of the Winograd Schema, we will firstly introduce it at a high level. Afterwards, we will introduce the system framework as well as all the corresponding modules we proposed to automatically solve the Winograd Schema problems. Finally, experiments and discussions on a human annotated causeeffect dataset and discussion will be presented."}, {"heading": "Winograd Schema", "text": "The Winograd Schema (WS) evaluates a system\u2019s commonsense reasoning ability based on a traditional, very difficult natural language processing task: coreference resolution (Levesque, Davis, and Morgenstern 2011; Saba 2015). The Winograd Schema problems are carefully designed to be a task that cannot be easily solved without commonsense knowledge. In fact, even the solution of traditional coreference resolution problems relies on semantics or world knowledge (Rahman and Ng 2011; Strube 2016). For describing the WS in detail, here we just copy some words from (Levesque, Davis, and Morgenstern 2011). A WS is a small reading comprehension test involving a single binary question. Here are two examples: \u2022 The trophy would not fit in the brown suitcase because it\nwas too big. What was too big? \u2013 Answer 0: the trophy \u2013 Answer 1: the suitcase\n\u2022 Joan made sure to thank Susan for all the help she had given. Who had given the help? \u2013 Answer 0: Joan \u2013 Answer 1: Susan\nThe correct answers here are obvious for human beings. In each of the questions, the corresponding WS has the following four features:\n1. Two parties are mentioned in a sentence by noun phrases. They can be two males, two females, two inanimate objects or two groups of people or objects.\n2. A pronoun or possessive adjective is used in the sentence in reference to one of the parties, but is also of the right sort for the second party. In the case of males, it is \u201che/him/his\u201d; for females, it is \u201cshe/her/her\u201d for inanimate object it is \u201cit/it/its,\u201d and for groups it is \u201cthey/them/their.\u201d\n3. The question involves determining the referent of the pronoun or possessive adjective. Answer 0 is always the first party mentioned in the sentence (but repeated from the sentence for clarity), and Answer 1 is the second party.\n4. There is a word (called the special word) that appears in the sentence and possibly the question. When it is replaced by another word (called the alternate word), everything still makes perfect sense, but the answer changes.\nSolving WS problems is not easy since the required commonsense knowledge is quite difficult to collect. In the following sections, we are going to describe our work on solving the Winograd Schema problems via neural network methods."}, {"heading": "System Framework", "text": "In this paper, we propose that the commonsense knowledge required in many Winograd Schema problems could be formulized as some association relationships between discrete events. Using sentence \u201cJoan made sure to thank Susan for all the help she had given\u201d as an example, the commonsense knowledge is that the man who receives help should thank to the man who gives help to him. We believe that by modeling the association between event receive help and thank, give help and thank, we can make the decision by comparing the association probability Pr(thank|receive help) and Pr(thank|give help). If the models are well trained, we should get the inequality Pr(thank|receive help) > Pr(thank|give help). Following this idea, we propose to utilize the data constructed from the previous section and extend the NAM models for solving WS problems. Here we design two frameworks for training NAM models. \u2022 TransMat-NAM: We design to apply four linear trans-\nformation matrices, i.e., matrices of (active, positive), (active, negative), (passive, positive) and (passive, negative), for transforming both the cause event and the effect event. After it, we then use NAM for model the causeeffect association relationship between any cause and effect events.\ncause\neffect Neural\nAssociation Model\nrelation"}, {"heading": "Transform Transform", "text": "\u2022 RelationVec-NAM: On the other hand, in this configuration, we treat all the typical 16 dimensions shown in Figure 8 as distinct relations. So there are 16 relation vectors\nin the corresponding NAM models. Currently we use the RMNN structure for NAM.\ncause effect Neural\nAssociation Model"}, {"heading": "Neural Association", "text": "Transform Transform\nTraining the NAM models based on these two configurations is straightforward. All the network parameters, including the relation vectors and the linear transformation matrices, are learned by the standard stochastic gradient descend algorithm."}, {"heading": "Experiments", "text": "In this section, we will introduce our current experiments on solving the Winograd Schema problems. We will first select a cause-effect dataset constructed from the standard WS dataset. Subsequently, experimental setup will be described in detail. After presenting the experimental results, discussions would be made at the end of this section.\nCause-Effect Dataset Labelling In this paper, based on the WS dataset available at http: //www.cs.nyu.edu/faculty/davise/papers/ WinogradSchemas/WS.html, we labelled 78 causeeffect problems among all 278 available WS questions for our experiments. Table 9 shows some typical examples. For each WS problem, we label three verb (or adjective) phrases for the corresponding two parities and the pronoun. In the labelled phrases, we also record the corresponding patterns for each word respectively. Using word lift for example, we will generate lift for its active and positive pattern, not lift for its active and negative pattern, be lifted for its passive and positive pattern, and not be lifted for its passive and negative pattern. For example, in sentence \u201cThe man couldn\u2019t lift his son because he was so weak\u201d, we identify weak, not lift and not be lifted for he, the man and son resspectively. The commonsense is that somebody who is weak would more likely to has the effect not lift rather than not be lifted. The main work of NAM for solving this problem is to calculate the association probability between these phrases.\nExperimental setup The setup for NAM on this causeeffect task is similar to the settings on the previous tasks. For representing the phrases in neural association models, we use the bag-of-word (BOW) approach for composing phrases from pre-trained word vectors. Since the vocabulary we use in this experiment contains only 7500 common verbs and adjectives, there are some out-of-vocabulary (OOV) words in some phrases. Based on the BOW method, a phrase would be useless if all the words it contains are OOV. In this paper, we remove all the testing samples with useless phrases which results in 70 testing cause-effect samples. For network settings, we set the embedding size to 50 and the\ndimension of relation vectors to 50. We set 2 hidden layers for the NAM models and all the hidden layer sizes are set to 100. The learning rate is set to 0.01 for all the experiments. At the same time, to better control the model training, we set the learning rates for learning all the embedding matrices and the relation vectors to 0.025.\nNegative sampling is very important for model training for this task. In the TransMat-NAM system, we generate negative samples by randomly selecting different patterns with respect to the pattern of the effect event in the positive samples. For example, if the positive training sample is \u201chungry (active, positive) causes eat (active, positive)\u201d, we may generate negative samples like \u201chungry (active, positive) causes eat (passive, positive)\u201d, or \u201chungry (active, positive) causes eat (active, negative)\u201d. In the RelationVecNAM system, the negative sampling method is much more straightforward, i.e., we will randomly select a different effect event from the whole vocabulary. In the example shown here, the possible negative sample would be \u201chungry (active, positive) causes happy (active, positive)\u201d, or \u201chungry (active, positive) causes talk (active, positive)\u201d and so on.\nResults The experimental results are shown in Table 10. From the results, we find that the proposed NAM models achieve about 60% accuracy on the cause-effect dataset constructed from Winograd Schemas. More specifically, the RelationVec-NAM system performs slightly better than the TransMat-NAM system.\nIn the testing results, we find the NAM performs well on some testing examples. For instance, in the call phone scenario, the proposed NAM generates the corresponding association probabilities as follows. \u2022 Paul tried to call George on the phone, but he wasn\u2019t suc-\ncessful. Who was not successful? \u2013 Paul: Pr(not successful|call) = 0.7299 \u2013 George: Pr(not successful|be called) = 0.5430 \u2013 Answer: Paul\n\u2022 Paul tried to call George on the phone, but he wasn\u2019t available. Who was not available?\n\u2013 Paul: Pr(not available|call) = 0.6859 \u2013 George: Pr(not available|be called) = 0.8306 \u2013 Answer: George For these testing examples, we find our model can answer the questions by correctly calculating the association probabilities. The probability Pr(not successful|call) is larger than Pr(not successful|be called) while the probability Pr(not available|call) is smaller than Pr(not available|be called). Those simple inequality relationships between the association probabilities are very reasonable in our commonsense. Here are some more examples:\n\u2022 Jim yelled at Kevin because he was so upset. Who was upset?\n\u2013 Jim: Pr(yell|be upset) = 0.9296 \u2013 Kevin: Pr(be yelled|be upset) = 0.8785 \u2013 Answer: Jim\n\u2022 Jim comforted Kevin because he was so upset. Who was upset?\n\u2013 Jim: Pr(comfort|be upset) = 0.0282 \u2013 Kevin: Pr(be comforted|be upset) = 0.5657 \u2013 Answer: Kevin\nThis example also conveys some commonsense knowledge in our daily life. We all know that somebody who is upset would be more likely to yell at other people. Meanwhile, it is also more likely that they would be be comforted by other people."}, {"heading": "Conclusions", "text": "In this paper, we have proposed neural association models (NAM) for probabilistic reasoning. We use neural networks to model association probabilities between any two events in a domain. In this work, we have investigated two model structures, namely DNN and RMNN, for NAMs. Experimental results on several reasoning tasks have shown that both DNNs and RMNNs can outperform the existing methods. This paper also reports some preliminary results to use NAMs for knowledge transfer learning. We have found that the proposed RMNN model can be quickly adapted to a\nnew relation without sacrificing the performance in the original relations. After proving the effectiveness of the NAM models, we apply it to solve more complex commonsense reasoning problems, i.e., the Winograd Schemas (Levesque, Davis, and Morgenstern 2011). To support model training in this task, we propose a straightforward method to collect associative phrase pairs from text corpora. Experiments conducted on a set of Winograd Schema problems have indicated the neural association model does solve some problems successfully. However, it is still a long way to finally achieving automatic commonsense reasoning."}, {"heading": "Acknowledgments", "text": "We want to thank Prof. Gary Marcus of New York University for his useful comments on commonsense reasoning. We also want to thank Prof. Ernest Davis, Dr. Leora Morgenstern and Dr. Charles Ortiz for their wonderful organizations for making the first Winograd Schema Challenge happen. This paper was supported in part by the Science and Technology Development of Anhui Province, China (Grants No. 2014z02006), the Fundamental Research Funds for the Central Universities (Grant No. WK2350000001) and the Strategic Priority Research Program of the Chinese Academy of Sciences (Grant No. XDB02070006)."}], "references": [{"title": "A neural probabilistic language model", "author": ["Bengio"], "venue": "The Journal of Machine Learning Research 3:1137\u20131155", "citeRegEx": "Bengio,? \\Q2003\\E", "shortCiteRegEx": "Bengio", "year": 2003}, {"title": "Joint learning of words and meaning representations for open-text semantic parsing", "author": ["Bordes"], "venue": "In Proceedings of AISTATS,", "citeRegEx": "Bordes,? \\Q2012\\E", "shortCiteRegEx": "Bordes", "year": 2012}, {"title": "Translating embeddings for modeling multi-relational data", "author": ["Bordes"], "venue": "In Proceedings of NIPS,", "citeRegEx": "Bordes,? \\Q2013\\E", "shortCiteRegEx": "Bordes", "year": 2013}, {"title": "C", "author": ["S.R. Bowman", "G. Angeli", "C. Potts", "Manning"], "venue": "D.", "citeRegEx": "Bowman et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "S", "author": ["Bowman"], "venue": "R.", "citeRegEx": "Bowman 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Natural language processing (almost) from scratch", "author": ["Collobert"], "venue": "The Journal of Machine Learning Research 12:2493\u20132537", "citeRegEx": "Collobert,? \\Q2011\\E", "shortCiteRegEx": "Collobert", "year": 2011}, {"title": "and Bengio", "author": ["X. Glorot"], "venue": "Y.", "citeRegEx": "Glorot and Bengio 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "The goldilocks principle: Reading children\u2019s books with explicit memory representations. arXiv preprint arXiv:1511.02301", "author": ["Hill"], "venue": null, "citeRegEx": "Hill,? \\Q2015\\E", "shortCiteRegEx": "Hill", "year": 2015}, {"title": "R", "author": ["G.E. Hinton", "N. Srivastava", "A. Krizhevsky", "I. Sutskever", "Salakhutdinov"], "venue": "R.", "citeRegEx": "Hinton et al. 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Universal approximation of an unknown mapping and its derivatives using multilayer feedforward networks. Neural networks 3(5):551\u2013560", "author": ["Stinchcombe Hornik", "K. White 1990] Hornik", "M. Stinchcombe", "H. White"], "venue": null, "citeRegEx": "Hornik et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Hornik et al\\.", "year": 1990}, {"title": "F", "author": ["Jensen"], "venue": "V.", "citeRegEx": "Jensen 1996", "shortCiteRegEx": null, "year": 1996}, {"title": "and Friedman", "author": ["D. Koller"], "venue": "N.", "citeRegEx": "Koller and Friedman 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "H", "author": ["Levesque"], "venue": "J.; Davis, E.; and Morgenstern, L.", "citeRegEx": "Levesque. Davis. and Morgenstern 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "Learning entity and relation embeddings for knowledge graph completion", "author": ["Lin"], "venue": "Proceedings of AAAI", "citeRegEx": "Lin,? \\Q2015\\E", "shortCiteRegEx": "Lin", "year": 2015}, {"title": "and Singh", "author": ["H. Liu"], "venue": "P.", "citeRegEx": "Liu and Singh 2004", "shortCiteRegEx": null, "year": 2004}, {"title": "Efficient estimation of word representations in vector space. arXiv preprint arXiv:1301.3781", "author": ["Mikolov"], "venue": null, "citeRegEx": "Mikolov,? \\Q2013\\E", "shortCiteRegEx": "Mikolov", "year": 2013}, {"title": "G", "author": ["Miller"], "venue": "A.", "citeRegEx": "Miller 1995", "shortCiteRegEx": null, "year": 1995}, {"title": "C", "author": ["L. Morgenstern", "E. Davis", "Ortiz Jr"], "venue": "L.", "citeRegEx": "Morgenstern. Davis. and Ortiz Jr 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "E", "author": ["Mueller"], "venue": "T.", "citeRegEx": "Mueller 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "G", "author": ["V. Nair", "Hinton"], "venue": "E.", "citeRegEx": "Nair and Hinton 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "R", "author": ["Neapolitan"], "venue": "E.", "citeRegEx": "Neapolitan 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "A review of relational machine learning for knowledge graphs. arXiv preprint arXiv:1503.00759", "author": ["Nickel"], "venue": null, "citeRegEx": "Nickel,? \\Q2015\\E", "shortCiteRegEx": "Nickel", "year": 2015}, {"title": "Factorizing YAGO: scalable machine learning for linked data", "author": ["Tresp Nickel", "M. Kriegel 2012] Nickel", "V. Tresp", "H.-P. Kriegel"], "venue": "In Proceedings of WWW,", "citeRegEx": "Nickel et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Nickel et al\\.", "year": 2012}, {"title": "C", "author": ["Osgood"], "venue": "E.", "citeRegEx": "Osgood 1952", "shortCiteRegEx": null, "year": 1952}, {"title": "Solving hard coreference problems", "author": ["Khashabi Peng", "H. Roth 2015] Peng", "D. Khashabi", "D. Roth"], "venue": null, "citeRegEx": "Peng et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Peng et al\\.", "year": 2015}, {"title": "and Ng", "author": ["A. Rahman"], "venue": "V.", "citeRegEx": "Rahman and Ng 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "and Domingos", "author": ["M. Richardson"], "venue": "P.", "citeRegEx": "Richardson and Domingos 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "C", "author": ["R. Socher", "D. Chen", "Manning"], "venue": "D.; and Ng, A.", "citeRegEx": "Socher et al. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "A", "author": ["Turing"], "venue": "M.", "citeRegEx": "Turing 1950", "shortCiteRegEx": null, "year": 1950}, {"title": "Knowledge graph embedding by translating on hyperplanes", "author": ["Wang"], "venue": "In Proceedings of AAAI,", "citeRegEx": "Wang,? \\Q2014\\E", "shortCiteRegEx": "Wang", "year": 2014}, {"title": "Fast adaptation of deep neural network based on discriminant codes for speech recognition", "author": ["Xue"], "venue": null, "citeRegEx": "Xue,? \\Q2014\\E", "shortCiteRegEx": "Xue", "year": 2014}, {"title": "Aligning books and movies: Towards story-like visual explanations by watching movies and reading books", "author": ["Zhu"], "venue": "In Proceedings of the IEEE International Conference on Computer", "citeRegEx": "Zhu,? \\Q2015\\E", "shortCiteRegEx": "Zhu", "year": 2015}], "referenceMentions": [], "year": 2016, "abstractText": "In this paper, we propose a new deep learning approach, called neural association model (NAM), for probabilistic reasoning in artificial intelligence. We propose to use neural networks to model association between any two events in a domain. Neural networks take one event as input and compute a conditional probability of the other event to model how likely these two events are to be associated. The actual meaning of the conditional probabilities varies between applications and depends on how the models are trained. In this work, as two case studies, we have investigated two NAM structures, namely deep neural networks (DNN) and relation-modulated neural nets (RMNN), on several probabilistic reasoning tasks in AI, including recognizing textual entailment, triple classification in multi-relational knowledge bases and commonsense reasoning. Experimental results on several popular datasets derived from WordNet, FreeBase and ConceptNet have all demonstrated that both DNNs and RMNNs perform equally well and they can significantly outperform the conventional methods available for these reasoning tasks. Moreover, compared with DNNs, RMNNs are superior in knowledge transfer, where a pre-trained model can be quickly extended to an unseen relation after observing only a few training samples. To further prove the effectiveness of the proposed models, in this work, we have applied NAMs to solving challenging Winograd Schema (WS) problems. Experiments conducted on a set of WS problems prove that the proposed models have the potential for commonsense reasoning. Introduction Reasoning is an important topic in artificial intelligence (AI), which has attracted considerable attention and research effort in the past few decades (McCarthy 1986; Minsky 1988; Mueller 2014). Besides the traditional logic reasoning, probabilistic reasoning has been studied as another typical genre in order to handle knowledge uncertainty in reasoning based on probability theory (Pearl 1988; Neapolitan 2012). The probabilistic reasoning can be used to predict conditional probability Pr(E2|E1) of one event E2 given another event E1. State-of-the-art methods for probabilistic reasoning include Bayesian Networks (Jensen 1996), Markov Logic Networks (Richardson and Domingos 2006) and other graphical models (Koller and Friedman 2009). Taking Bayesian networks as an example, the conditional Copyright 2015-2016. probabilities between two associated events are calculated as posterior probabilities according to Bayes theorem, with all possible events being modeled by a pre-defined graph structure. However, these methods quickly become intractable for most practical tasks where the number of all possible events is usually very large. In recent years, distributed representations that map discrete language units into continuous vector space have gained significant popularity along with the development of neural networks (Bengio et al. 2003; Collobert et al. 2011; Mikolov et al. 2013). The main benefit of embedding in continuous space is its smoothness property, which helps to capture the semantic relatedness between discrete events, potentially generalizable to unseen events. Similar ideas, such as knowledge graph embedding, have been proposed to represent knowledge bases (KB) in low-dimensional continuous space (Bordes et al. 2013; Socher et al. 2013; Wang et al. 2014; Nickel et al. 2015). Using the smoothed KB representation, it is possible to reason over the relations among various entities. However, human-like reasoning remains as an extremely challenging problem partially because it requires the effective encoding of world knowledge using powerful models. Most of the existing KBs are quite sparse and even recently created large-scale KBs, such as YAGO, NELL and Freebase, can only capture a fraction of world knowledge. In order to take advantage of these sparse knowledge bases, the state-of-the-art approaches for knowledge graph embedding usually adopt simple linear models, such as RESCAL (Nickel, Tresp, and Kriegel 2012), TransE (Bordes et al. 2013) and Neural Tensor Networks (Socher et al. 2013; Bowman 2013). Although deep learning techniques achieve great progresses in many domains, e.g. speech and image (LeCun, Bengio, and Hinton 2015), the progress in commonsense reasoning seems to be slow. In this paper, we propose to use deep neural networks, called neural association model (NAM), for commonsense reasoning. Different from the existing linear models, the proposed NAM model uses multilayer nonlinear activations in deep neural nets to model the association conditional probabilities between any two possible events. In the proposed NAM framework, all symbolic events are represented in low-dimensional continuous space and there is no need to explicitly specify any dependency structure among events as required in Bayesian networks. ar X iv :1 60 3. 07 70 4v 2 [ cs .A I] 3 A ug 2 01 6 Deep neural networks are used to model the association between any two events, taking one event as input to compute a conditional probability of another event. The computed conditional probability for association may be generalized to model various reasoning problems, such as entailment inference, relational learning, causation modelling and so on. In this work, we study two model structures for NAM. The first model is a standard deep neural networks (DNN) and the second model uses a special structure called relation modulated neural nets (RMNN). Experiments on several probabilistic reasoning tasks, including recognizing textual entailment, triple classification in multi-relational KBs and commonsense reasoning, have demonstrated that both DNNs and RMNNs can outperform other conventional methods. Moreover, the RMNN model is shown to be effective in knowledge transfer learning, where a pre-trained model can be quickly extended to a new relation after observing only a few training samples. Furthermore, we also apply the proposed NAM models to more challenging commonsense reasoning problems, i.e., the recently proposed Winograd Schemas (WS) (Levesque, Davis, and Morgenstern 2011). The WS problems has been viewed as an alternative to the Turing Test (Turing 1950). To support the model training for NAM, we propose a straightforward method to collect associated cause-effect pairs from large unstructured texts. The pair extraction procedure starts from constructing a vocabulary with thousands of common verbs and adjectives. Based on the extracted pairs, this paper extends the NAM models to solve the Winograd Schema problems and achieves a 61% accuracy on a set of causeeffect examples. Undoubtedly, to realize commonsense reasoning, there is still much work be done and many problems to be solved. Detailed discussions would be given at the end of this paper. Motivation: Association between Events This paper aims to model the association relationships between events using neural network methods. To make clear our main work, we will first describe the characteristics of events and all the possible association relationships between events. Based on the analysis of event association, we present the motivation for the proposed neural association models. In commonsense reasoning, the main characteristics of events are the following: \u2022 Massive: In most natural situations, the number of events is massive, which means that the association space we will model is very large. \u2022 Sparse: All the events occur in our dialy life are very sparse. It is a very challenging task to ideally capture the similarities between all those different events. At the same time, association between events appears everywhere. Consider a single event play basketball for example, shown in Figure 1. This single event would associate with many other events. A person who plays basketball would win a game. Meanwhile, he would be injured in some cases. The person could make money by playing basketball as well. Moreover, we know that a person who plays basketball should be coached during a regular game. Those are all typical associations between events. However, we need to recognize that the task of modeling event association is not identical to performing classification. In classification, we typically map an event from its feature space into one of pre-defined finite categories or classes. In event association, we need to compute the association probability between two arbitrary events, each of which may be a sample from a possibly infinite set. The mapping relationships in event association would be many-to-many; e.g., not only playing basketball could support us to make money, someone who makes stock trading could make money as well. More specifically, the association relationships between events include causeeffect, spatial, temporal and so on. This paper treats them as a general relation considering the sparseness of useful KBs.", "creator": "LaTeX with hyperref package"}}}