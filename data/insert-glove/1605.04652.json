{"id": "1605.04652", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-May-2016", "title": "Fast and Accurate Performance Analysis of LTE Radio Access Networks", "abstract": "An increasing chips amount atairangikaahu of 47-32 analytics is chichagov performed 1,4-butanediol on paffett data that timbo is warbonnet procured in balvanera a zawiercie real - time runemaster fashion shelkovskaya to make real - time decisions. hobday Such tasks streptaxidae include futures simple reporting on 7,110 streams pontifice to ktp sophisticated model building. However, the practicality of elint such analyses witasick are chaoying impeded 1199/seiu in nayler several bikindi domains because allm\u00e4nna they newshounds are faced 3,664 with unst a 2023 fundamental trade - off nannini between khudiram data collection latency 66.49 and trajanov analysis accuracy.", "histories": [["v1", "Mon, 16 May 2016 05:31:01 GMT  (1047kb,D)", "https://arxiv.org/abs/1605.04652v1", null], ["v2", "Tue, 17 May 2016 20:00:59 GMT  (333kb,D)", "http://arxiv.org/abs/1605.04652v2", null]], "reviews": [], "SUBJECTS": "cs.DC cs.LG cs.NI", "authors": ["anand padmanabha iyer", "ion stoica", "mosharaf chowdhury", "li erran li"], "accepted": false, "id": "1605.04652"}, "pdf": {"name": "1605.04652.pdf", "metadata": {"source": "META", "title": "Fast and Accurate Performance Analysis of LTE Radio Access Networks", "authors": ["Anand Padmanabha", "Li Erran Li"], "emails": [], "sections": [{"heading": null, "text": "In this paper, we study this trade-off in the context of a specific domain, Cellular Radio Access Networks (RAN). Our choice of this domain is influenced by its commonalities with several other domains that produce real-time data, our access to a large live dataset, and their real-time nature and dimensionality which makes it a natural fit for a popular analysis technique, machine learning (ML). We find that the latency accuracy trade-off can be resolved using two broad, general techniques: intelligent data grouping and task formulations that leverage domain characteristics. Based on this, we present CellScope, a system that addresses this challenge by applying a domain specific formulation and application of Multi-task Learning (MTL) to RAN performance analysis. It achieves this goal using three techniques: feature engineering to transform raw data into effective features, a PCA inspired similarity metric to group data from geographically nearby base stations sharing performance commonalities, and a hybrid online-offline model for efficient model updates. Our evaluation of CellScope shows that its accuracy improvements over direct application of ML range from 2.5\u00d7 to 4.4\u00d7 while reducing the model update overhead by up to 4.8\u00d7. We have also used CellScope to analyze a live LTE consisting of over 2 million subscribers for a period of over 10 months, where it uncovered several problems and insights, some of them previously unknown."}, {"heading": "1 Introduction", "text": "Big data analytics have seen tremendous growth in the recent past, with applications in several domains such as social networks, sciences and medicine. Increasingly, the trend in data analytics have moved towards tasks that operate on data that is procured in a real-time fashion and produce low latency decisions. However, such analysis tasks are faced with a fundamental trade-off between latency and accuracy in several\n\u2020Li Erran Li was involved in this work prior to joining Uber.\ndomains. In this paper, we consider this trade-off in the context of a domain specific use case: performance diagnostics in cellular Radio Access Networks (RANs). Being the most crucial component in the cellular network architecture, the performance of RANs (in terms of throughput, latency, call drops, etc.) is essential for achieving high quality of experience for end-users. Although RANs work in tandem with the cellular core network to provide service, the lion\u2019s share of user-facing issues in a typical cellular network manifest in the RAN [14]. Thus, to achieve high end-user satisfaction, it is imperative that operators understand the impacting factors and can diagnose RAN problems quickly.\nWhile RAN technologies have seen tremendous improvements over the past decade [34, 36, 40], performance problems are still prevalent [38]. Factors impacting RAN performance include user mobility, skewed traffic pattern, interference, lack of coverage, unoptimized configuration parameters, inefficient algorithms, equipment failures, software bugs and protocol errors [37]. Although some of these factors are present in traditional networks and troubleshooting these networks has received considerable attention in the literature [2, 7, 11, 46, 52], RAN performance diagnosis brings out a unique challenge: the performance of multiple base stations exhibit complex temporal and spatial interdependencies due to the shared radio access media and user mobility.\nExisting systems [4, 16] for detecting performance problems rely on monitoring aggregate metrics, such as connection drop rate and throughput per cell, over minuteslong time windows. Degradation of these metrics trigger mostly manual\u2014hence, time-consuming and error-prone\u2014 root cause analysis. Furthermore, due to their dependence on aggregate information, these tools either overlook many performance problems such as temporal spikes leading to cascading failures or are unable to isolate root causes. The challenges associated with leveraging just aggregate metrics has led operators to collect detailed traces from their network [15] to aid domain experts in diagnosing RAN problems.\nHowever, the sheer volume of the data and its high dimensionality make the troubleshooting using human experts and traditional rule-based systems very hard, if not infeasible [24]. In this paper, we consider one natural alternative to these approaches that has been used recently to troubleshoot other complex systems with considerable success: machine learning (ML) [30]. However, simply applying ML to our\nar X\niv :1\n60 5.\n04 65\n2v 2\n[ cs\n.D C\n] 1\n7 M\nay 2\n01 6\nproblem is not enough. The desire to troubleshoot RANs as fast as possible exposes the inherent tradeoff between latency and accuracy that is shared by many ML algorithms.\nTo illustrate this tradeoff, consider the natural solution of building a model on a per-base station basis. On one hand, if we want to troubleshoot quickly, the amount of data collected for a given base station may not be enough to learn an accurate model. On the other hand, if we wait long enough to learn a more accurate model, this will come at the cost of delaying troubleshooting and the learned model may not be valid any longer. Another alternative would be to learn one model over the entire data set. Unfortunately, since base stations can have very different characteristics using a single model for all of them can also result in low accuracy (\u00a72).\nIn this paper, we present CellScope, a system that enables fast and accurate RAN performance diagnosis by resolving the latency and accuracy trade-off using two broad techniques: intelligent data grouping and task formulations that leverage domain characteristics. More specifically, CellScope applies Multi-task Learning (MTL) [10, 44], a stateof-the-art machine learning approach, to RAN troubleshooting. In a nutshell, MTL learns multiple related models in parallel by leveraging the commonality between those models. To enable the application of MTL, CellScope uses two techniques. First, it uses feature engineering to identify the relevant features to use for learning. Second, it uses a PCA based similarity metric to group base stations that share common features, such as interference and load. This is necessary since MTL assumes that the models have some commonality which is not necessarily the case in our setting, e.g., different base stations might exhibit different features. Note that while PCA has been traditionally used to find network anomalies, CellScope uses PCA for finding the common features instead. We note that the goal of CellScope is not to apply specific ML algorithms for systems diagnostics, but to propose approaches to resolve the latency accuracy trade-off common in many domains.\nTo this end, CellScope uses MTL to create a hybrid model: an offline base model that captures common features, and an online per-base station model that captures the individual features of the base stations. This hybrid approach allows us to incrementally update the online model based on the base model. This results in models that are both accurate and fast to update. Finally, in this approach, finding anomalies is equivalent to detecting concept drift [19].\nTo demonstrate the effectiveness of our proposal, we have built CellScope on Spark [26, 41, 49]. Our evaluation shows that CellScope is able to achieve accuracy improvements upto 4.4\u00d7 without incurring the latency overhead associated with normal approaches (\u00a76). We have also used CellScope to analyze a live LTE network consisting of over 2 million subscribers for a period of over 10 months. Our analysis reveals several interesting insights (\u00a77).\nIn summary, we make the following contributions:\n\u2022 We expose the fundamental trade-off between data collection latency and analysis accuracy present in many domains, which impedes the practicality of applying analytics for decision making on data collected in a real-time fashion. We find that this trade-off may be resolved in several domains using two broad approaches: intelligent grouping and domain specific formulations. \u2022 Based on this insight, we present CellScope, a system\nthat applies a domain specific formulation and application of Multi-task Learning (MTL) to resolve the latency and accuracy trade-off in RAN performance analysis. It achieve this using three techniques: feature engineering to transform raw data into effective features, a novel PCA inspired similarity metric to group data from base stations sharing commonalities in performance, and a hybrid online-offline model for efficient model updates (\u00a74). \u2022 We have built CellScope on Apache Spark, a big data\nframework. Our evaluation shows that CellScope\u2019s accuracy improvements range from 2.5\u00d7 to 4.4\u00d7 while reducing the model update overhead by up to 4.8\u00d7 (\u00a76). We have also validated CellScope by using it to analyze an operational LTE consisting of over 2 million subscribers for a period of over 10 months. Our analysis uncovered insights which were valuable for operators (\u00a77)."}, {"heading": "2 Background and Motivation", "text": "In this section, we briefly discuss cellular networks, focusing on the LTE network architecture, protocol procedures and measurement data and then motivate the problem."}, {"heading": "2.1 LTE Network Primer", "text": "LTE networks provide User Equipments (UEs) such as smartphones with Internet connectivity. When a UE has data to send to or receive from the Internet, it sets up a communication channel between itself and the Packet Data Network Gateway (P-GW). This involves message exchanges between the UE and the Mobility Management Entity (MME). In coordination with the base station (eNodeB), the Serving Gateway (S-GW), and P-GW, data plane (GTP) tunnels are established between the base station and the S-GW, and between the S-GW and the P-GW. Together with the connection between the UE and the base station, the network establishes a communication channel called EPS bearer (short for bearer). The entities in the LTE network architecture is shown in figure 1.\nFor network access and service, entities in the LTE network exchange control plane messages. A specific sequence\n\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n(a) Global models are ineffective while spatial partitioning ignores performance similarity\n\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd \ufffd \ufffd \ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd \ufffd\ufffd\n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n(b) Lack of data at low latencies indicates the need for grouping/partitoning\n\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\n\ufffd \ufffd \ufffd \ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\n(c) Using local models leads to accuracy and/or latency issues\nFigure 2: Resolving the latency accuracy trade-off requires domain specific optimizations.\nof such control plane message exchange is called a network procedure. For example, when a UE powers up, it initiates an attach procedure with the MME which consists of establishing a radio connection to the base station, authentication and resource allocation. Thus, each network procedure involves the exchange of several control plane messages between two or more entities. The specifications for these are defined by various 3GPP Technical Specification Groups (TSG) [42].\nNetwork performance degrades and end-user experience is affected when procedure failures happen. The complex nature of these procedures (due to the multiple underlying message and entity interactions) make diagnosing problems challenging. Thus, to aid RAN troubleshooting, operators collect extensive measurements from their network. These measurements typically consist of per-procedure information (e.g., attach). To analyze a procedure failure, it is often useful to look at the associated variables. For instance, a failed attachment procedure may be diagnosed if the underlying signal strength information was captured 1. Hence, relevant metadata is also captured with procedure information. Since there are hundreds of procedures in the network and each procedure can have many possible metadata fields, the collected measurement data contains several hundreds of fields2."}, {"heading": "2.2 RAN Troubleshooting Today", "text": "Current RAN network monitoring depends on cell-level aggregate Key Performance Indicators (KPI). Existing practice is to use performance counters to derive these KPIs. The derived KPIs are then monitored by domain experts, aggregated over certain pre-defined time window. Based on domain knowledge and operational experience, these KPIs are used to determine if service level agreements (SLA) are met. For instance, an operator may have designed the network to have no more than 0.5% call drops in a 10 minute window. When a KPI that is being monitored crosses the threshold, an alarm is raised and a ticket created. This ticket is then handled by experts who investigate the cause of the problem, often manually. Several commercial solutions exists [3\u20135, 16] that\n1Some of the key physical layer parameters useful for diagnosis is described in table 1. 2Our dataset consists of almost 400 fields in the measurement data, with each field possibly having additional nested information.\naid in this troubleshooting procedure by enabling efficient slicing and dicing on data. However, we have learned from domain experts that often it is desirable to apply different models or algorithms on the data for detailed diagnosis. Thus, most of the RAN trouble tickets end up with experts who work directly on the raw measurement data."}, {"heading": "2.3 Need for Domain Specific Approach", "text": "We now discuss the difficulties in applying machine learning for solving the RAN performance analysis problem, thereby motivating the need for a new domain specific solution."}, {"heading": "2.3.1 Ineffectiveness of Global Modelling", "text": "A common solution to applying ML on a dataset is to consider the dataset as a single entity and build one model over the entire data. However, base stations in a cellular network exhibit different characteristics. This renders the use of a global model ineffective. To illustrate this problem, we conducted an experiment where the goal was to build a model for call drops in the network. We first run a decision tree algorithm to obtain a single model for the network. The other extreme for this approach is to train a model per base station. Figure 2a shows the results of this experiment which used data collected over an 1 hour interval to ensure there is enough data for the algorithms to produce statistically significant results. We see that the local model is significant better, with up to 20% more accuracy while showing much lower variance."}, {"heading": "2.3.2 Latency/Accuracy Issues with Local Models", "text": "It is natural to think of a per base station model as the final solution to this problem. However, this approach has issues too. Due to the difference in characteristics of the base stations, the amount of data they collect is different. Thus, in small intervals, they may not generate enough data to produce valid results. This is illustrate in figure 2b which shows the quartiles, min and max amount of data generated and the latency required to collect them.\nAdditionally, algorithms may produce stale models with increasing latency. To show this, we conduct an experiment with two different algorithms on data collected over varying latencies. The first algorithm (Alg 1) builds a classification model for connection failures, while the second (Alg 2) builds a regression model to predict and explain throughput anoma-\nlies. The results of this experiment is given in figure 2c. The first algorithm behavior is obvious; as it gets more data its accuracy improves due to the slow varying nature of the underlying causes of failures. After an hour latency, it is able to reach a respectable accuracy. However, the second algorithm\u2019s accuracy improves initially, but falls quickly. This is counterintuitive in normal settings, but the explanation lies in the spatio-temporal characteristics of cellular networks. Many of the performance metrics exhibit high temporal variability, and thus need to be analyzed in smaller intervals. In such cases, local modeling is ineffective.\nIt is important to note that an obvious, but flawed, conclusion is to think that models similar to Alg 1 would work once the data collection latency has been incurred once. This is not true due to staleness issues which we discuss next."}, {"heading": "2.3.3 Need for Model Updates", "text": "Due to the temporal variations in cellular networks, models need to be updated to retain their performance. To depict this, we repeated the experiment where we built per base station decision tree model for call drops. However, instead of training and testing on parts of the same dataset, we train on an hours worth of data, and apply it to the next hour. Figure 2a shows that the accuracy drops by 12% with a stale model. Thus, it is important to keep the model fresh by incorporating learning from the incoming data while also removing historical learnings. Such sliding updates to ML models in a general setting is difficult due to the overheads in retraining them from scratch. To add to this, cellular networks consist of several thousands of base stations. This number is on the rise with the increase in user demand and the ease of deployment of small cells. Thus, a per base station approach requires creating, maintaining and updating a huge amount of models (e.g., our network consisted of over 13000 base stations). This makes scaling hard."}, {"heading": "2.3.4 Why not Spatial/Spatio-Temporal Partitioning?", "text": "The above experiments point towards the need for obtaining enough data with low latency. The obvious solution to combating this trade-off is to intelligently combine data from multiple base stations. It is intuitive to think of this as a spatial partitioning problem, since base stations in the real world are geographically separated. Thus, a spatial partitioner which combines data from base stations within a geographical region must be able to give good results. Unfortunately, this isn\u2019t the case which we motivate using a simple example. Consider two base stations, one situated at the center of times square in New York and the other a mile away at a residential area. Using a spatial partitioning scheme that divides the space into equal sized planes would likely result in combining data from these base stations. However, this is not desirable because of the difference in characteristics\nof these base stations 3. We illustrate this using the drop experiment. Figure 2a shows the performance of a spatial model, where we combine data from nearby base stations using a simple grid partitioner. The results show that the spatial partitioner is not much better than the global partitioner. We show comparisons with other smarter spatial partitioning approaches in 6.\n3 CellScope Overview CellScope presents a domain-specific formulation and application of Multi-Task Learning (MTL) for RAN performance diagnosis. Here, we provide a brief overview of CellScope to aid the reader in following the rest of this paper."}, {"heading": "3.1 Problem Statement", "text": "CellScope\u2019s ultimate goal is to enable fast and accurate RAN performance diagnosis by resolving the trade-off between data collection latency and the achieved accuracy. The key difficulty arises from the fundamental trade-off between having not enough data to build accurate-enough models in short timespans and waiting to collect enough data that entails stale results that is impossible to resolve in a general setting. Additionally, we must support efficient modifications to the learned models to account for the temporal nature of our setting to avoid data staleness."}, {"heading": "3.2 Architectural Overview", "text": "Figure 3 shows the high-level architecture of CellScope, which has the following key components: Input data: CellScope uses bearer-level traces that are readily available in cellular networks (\u00a72.1). Base stations collect traces independently and send them to the associated MME. records if required (users move, The MME merges records if required and hence, generate traces at multiple base stations) and uploads them to a data center.4 Feature engineering: Next, CellScope uses domain knowledge to transform the raw data and constructs a set of features amenable to learning (e.g., computing interference ratios)(\u00a74.1). We also leverage protocol details and algorithms (e.g., link adaptation) in the physical layer. 3In our measurements, a base station in a highly popular spot serves more than 300 UEs and carries multiple times uplink and downlink traffic compared to another base station situated just a mile from it that serves only 50 UEs. 4The transfer of traces to a data center is not fundamental. Extending CellScope to do geo-distributed learning is a future work.\nDomain-specific MTL: CellScope uses a domain specific formulation and application of MTL that allows it to perform accurate diagnosis while updating models efficiently (\u00a74.2). Data partitioner: To enable correct application of MTL, CellScope implements a partitioner based on a similarity score derived from Principal Component Analysis (PCA) and geographical distance (\u00a74.3). The partitioner segregates data to be analyzed into independent sets and produces a smaller co-located set relevant to the analysis. This minimizes the need to shuffle data during the training process. RAN performance analyzer: This component binds everything together to build diagnosis modules. It leverages the MTL component and uses appropriate techniques to build call drop and throughput models. We discuss our experience of applying these techniques to a live LTE network in \u00a77. Output: Finally, CellScope can output analytics results to external modules such as RAN performance dashboards. It can also provide inputs to Self-Organizing Networks (SON)."}, {"heading": "4 Resolving Latency-Accuracy Trade-off", "text": "In this section, we present how CellScope uses domainspecific machine learning to mitigate the trade-off between latency and accuracy. We first discuss a high-level overview of RAN specific feature engineering that prepares the data for learning (\u00a74.1). Next, we describe CellScope\u2019s MTL formulation (\u00a74.2), discussing how it lets us build fast, accurate, and incremental models. Then, we explain how CellScope achieves grouping that captures commonalities among base stations using a novel PCA based partitioner (\u00a74.3). Finally, we summarize our approach in \u00a74.4."}, {"heading": "4.1 Feature Engineering", "text": "Feature engineering, the process of transforming the raw input data to a set of features that can be effectively utilized by machine learning algorithms, is a fundamental part of ML applications [51]. Generally carried out by domain experts, it is often the first step in applying learning techniques.\nBearer-level traces contain several hundred fields associated with LTE network procedures. Unfortunately, many of these fields are not suitable for model building as it is. Several fields are collected in a format that utilizes a compact representation. For instance, block error rates need to be computed across multiple records to account for time. Further, these records are not self-contained, and multiple records need to be analyzed to create a feature for a certain procedure. In \u00a77, we describe in detail many of the specific feature engineerings that helped CellScope uncover issues in the network."}, {"heading": "4.2 Multi-Task Learning", "text": "The latency-accuracy trade-off makes it hard to achieve both low latency and high accuracy in applied machine learning tasks (\u00a72). The ideal-case scenario in CellScope is if infinite amount of data is available per base station with zero latency. In this scenario, we would have a learning task for each base station that produce a model as an output with the best achievable accuracy. In reality, our setting has several\ntasks, each with its own data. However, each task does not have enough data to produce models with acceptable accuracy in a given latency budget. This makes our setting an ideal candidate for multi-task learning (MTL), a cutting-edge research area in machine learning. The key idea behind MTL is to learn from other tasks by weakly coupling their parameters so that the statistical efficiency of many tasks can be boosted [9, 10, 17, 44]. Specifically, if we are interested in building a model of the form\nh(x) = m( f1(x), f2(x), ..., fk(x)) (1)\nwhere m is a model composed of features f1 through fk, then the traditional MTL formulation, given dataset D = {(xi,yi,bsi) : i = 1, ...,n}, where xi \u2208 Rd ,yi \u2208 R and bsi denotes the ith base station, is to learn\nh(x) = mbs( f1(x), f2(x), ..., fk(x)) (2)\nwhere mbs is a per base station model. In this MTL formulation, the core assumption is a shared structure or dependency across each of the learning problems. Unfortunately, in our setting, the base stations do not share a structure at a global level (\u00a72). Due to their geographic separation and the complexities of wireless signal propagation, the base stations share a spatio-temporal structure instead. Thus, we proposes a new domain-specific MTL formulation."}, {"heading": "4.2.1 CellScope\u2019s MTL Formulation", "text": "In order to address the difficulty in applying MTL due to the violation of task dependency assumption in RANs, we can leverage domain-specific characteristics. Although independent learning tasks (learning per base station) are not correlated with each other, they exhibit specific non-random structure. For example, the performance characteristics of base stations nearby are influenced by similar underlying features. Thus, we propose exploiting this knowledge to segregate learning tasks into groups of dependent tasks on which MTL can be applied. MTL in the face of dependency violation has been studied in the machine learning literature in the recent past [20, 25]. However, they assume that each group has its own set of features. This is not entirely true in our setting, where multiple groups may share most or all features but still need to be treated as separate groups. Furthermore, some of the techniques used for automatic grouping without a priori knowledge are computationally intensive.\nAssuming we can club learning tasks into groups, we can rewrite the MTL eq. (2) to captures this structure as\nh(x) = mg(bs)( f1(x), f2(x), ..., fk(x)) (3)\nwhere mg(bs) is the per-base station model in group g. We describe a simple technique to achieve this grouping based on domain knowledge in \u00a74.3 and experimentally show that just grouping by itself can achieve significant gains in \u00a76.\nIn theory, the MTL formulation in eq. (3) should suffice for our purposes as it would perform much better by capturing the inter-task dependencies using grouping. However, this formulation still builds an independent model for each base\nstation. Building and managing a large amount of models leads to significant performance overhead and would impede our goal of scalability. Scalable application of MTL in a general setting is an active area of research in machine learning [31], so we turn to problem-specific optimizations to address this challenge.\nThe model mg(bs) could be built using any class of learning functions. In this paper, we restrict ourselves to functions of the form F(x) = w.x where w is the weight vector associated with a set of features x. This simple class of function gives us tremendous leverage in using standard algorithms that can easily be applied in a distributed setting, thus addressing the scalability issue. In addition to scalable model building, we must also be able to update the built models fast. However, machine learning models are typically hard to update in real time. To address this challenge, we discuss a hybrid approach to building the models in our MTL setting next."}, {"heading": "4.2.2 Hybrid Modeling for Fast Model Updates", "text": "Estimation of the model in eq. (3) could be posed as an `1 regularized loss minimization problem [45]:\nmin\u2211L(h(x : fbs),y)+\u03bb ||R(x : fbs)|| (4) where L(h(x : fbs),y) is a non-negative loss function composed of parameters for a particular base station, hence capturing the error in the prediction for it in the group, and \u03bb > 0 is a regularization parameter scaling the penalty R(x : fbs) for the base station. However, the temporal and streaming nature of the data collected means that the model must be refined frequently for minimizing staleness.\nFortunately, grouping provides us an opportunity to solve this. Since the base stations are grouped into correlated task clusters, we can decompose the features used for each base station into a shared common set fc and a base station specific set fs. Thus, we can modify the eq. (4) as minimizing\n\u2211 ( \u2211L(h(x : fs),y)+\u03bb ||R(x : fs)|| ) +\u03bb ||R(x : fc)|| (5)\nwhere the inner summation is over dataset specific to each base station. This separation gives us a powerful advantage. Since we already grouped base stations, the feature set fs is minimal, and in most cases just a weight vector on the common feature set rather than a complete new set of features.\nBecause the core common features do not change often, we need to update only the base station-specific parts in the model frequently, while the common set can be reused. Thus, we end up with a hybrid offline-online model. Furthermore, the choice of our learning functions lets us apply stochastic methods [39] which can be efficiently parallelized."}, {"heading": "4.2.3 Anomaly Detection Using Concept Drift", "text": "A common use case of learning tasks for RAN performance analysis is in detecting anomalies. For instance, an operator may be interested in learning if there is a sudden increase in call drops. At the simplest level, it is easy to answer this question by simply monitoring the number of call drops at\neach base station. However, just a yes or no answer to such questions are seldom useful. If there is a sudden increase in drops, then it is useful to understand if the issue affects a complete region and the root cause of it.\nOur MTL approach and the ability to do fast incremental learning enables a better solution for anomaly detection and diagnosis. Concept drift is a term used to refer the phenomenon where the underlying distribution of the training data for a machine learning model changes [19]. CellScope leverages this to detect anomalies as concept drifts and proposes a simple technique for it. Since we process incoming data in mini-batches (\u00a75), each batch can be tested quickly on the existing model for significant accuracy drops. An anomaly occurring just at a single base station would be detected by one model, while one affecting a larger area would be detected by many. Once anomaly has been detected, finding the root cause is as easy as updating the model and comparing it with the old one."}, {"heading": "4.3 Data Grouping for MTL", "text": "Having discussed CellScope\u2019s MTL formulation, we now turn our focus towards how CellScope achieves efficient grouping of cellular datasets that enables accurate learning. Our data partitioning is based on Principal Component Analysis (PCA), a widely used technique in multivariate analysis [32]. PCA uses an orthogonal coordinate transformation to map a given set of points into a new coordinate space. Each of the new subspaces are commonly referred to as a principal component. Since the coordinate space is equal to or smaller than the original , PCA is used for dimensionality reduction.\nIn their pioneering work, Lakhina et.al. [28] showed the usefulness of PCA for network anomaly detection. They observed that it is possible to segregate normal behavior and abnormal (anomalous) behavior using PCA\u2014the principal components explain most of the normal behavior while the anomalies are captured by the remaining subspaces. Thus, by filtering normal behavior, it is possible to find anomalies that may otherwise be undetected.\nWhile the most common usecase for PCA has been dimensionality reduction (in machine learning domains) or anomaly detection (in networking domain), we use it in a novel way, to enable grouping of datasets for multi-task learning. Due to the lack of the ability to collect sufficient amount of data from individual base stations, detecting anomalies in them will not yield results. However, the data would still yield an explanation of normal behavior. We use this observation to partition the dataset. We describe our notation first."}, {"heading": "4.3.1 Notation", "text": "Since bearer level traces are collected continuously, we consider a buffer of bearers as a measurement matrix A. Thus, A consists of m bearer records, each having n observed parameters making it an m\u00d7 n time-series matrix. It is to be noted that n is in the order of a few 100 fields, while m can be much higher depending on how long the buffering interval is. We enforce n to be fixed in our setting\u2014every measure-\nment matrix must contain n columns. To make this matrix amenable to PCA analysis, we adjust the columns to have zero mean. By applying PCA to any measurement matrix A, we can obtain a set of k principal components ordered by amount of data variance they capture."}, {"heading": "4.3.2 PCA Similarity", "text": "It is intuitive to see that many measurement matrices may be formed based on different criteria. Suppose we are interested in finding if two measurement matrices are similar. One way to achieve this is to compare the principal components of the two matrices. Krzanowski [27] describes such a Similarity Factor (SF). Consider two matrices A and B having the same number of columns, but not rows. The similarity factor between A and B is defined as:\nSF = trace(LM\u2032ML\u2032) = k\n\u2211 i=1\nk\n\u2211 j=1 cos2 \u03b8i j\nwhere L, M are the first k principal components of A and B, and \u03b8i j is the angle between the ith component of A and the jth component of B. Thus, similarity factor considers all combinations of k components from both the matrices."}, {"heading": "4.3.3 CellScope\u2019s Similarity Metric", "text": "Similarity in our setting bears a slightly different notion: we do not want strict similarity between measurement matrices, but only need similarity between corresponding principal components. This ensures that algorithms will still capture the underlying major influences and trends in observation sets that are not exactly similar. Unfortunately, SF does not fit our requirements; hence, we propose a simpler metric.\nConsider two measurement matrices A and B as before, where A is of size mA\u00d7n and B is of size mB\u00d7n. By applying PCA on the matrices, we can obtain k principal components using a heuristic. We obtain the first k components which capture 95% of the variance. From the PCA, we obtain the resulting weight vector, or loading, which is a n\u00d7 k matrix: for each principal component in k, the loading describes the weight on the original n features. Intuitively, this can be seen as a rough measure of the influence of each of the n features on the principal components. The Euclidean distance between the corresponding loading matrices gives us similarity:\nSFCellScope = k\n\u2211 i=1\nd(ai,bi) = k\n\u2211 i=1\nn\n\u2211 j=1 |ai j\u2212bi j|\nwhere a and b are the column vectors representing the loadings for the corresponding principal components from A and B. Thus, SFCellScope captures how closely the underlying features explain the variation in the data.\nDue to the complex interactions between network components and the wireless medium, many of the performance issues in RANs are geographically tied (e.g., congestion might\nhappen in nearby areas, and drops might be concentrated)5. However, SFCellScope doesn\u2019t capture this phenomenon because it only considers similarity in normal behavior. Consequently, it is possible for anomaly detection algorithms to miss geographically-relevant anomalies. To account for this domain-specific characteristic, we augment our similarity metric to also capture the geographical closeness by weighing the metric by geographical distance between the two measurement matrices. Our final similarity metric is6:\nSFCellScope = wdistance(A,B) \u00d7 k\n\u2211 i=1\nn\n\u2211 j=1 |ai j\u2212bi j|"}, {"heading": "4.3.4 Using Similarity Metric for Partitioning", "text": "With similarity metric, CellScope can now partition bearer records. We first group the bearers into measurement matrices by segregating them based on the cell on which the bearer originated. The grouping is based on our observation that the cell is the lowest level at which an anomaly would manifest. We then create a graph G(V,E) where the vertices are the individual cell measurement matrices. An edge is drawn between two matrices if the SFCellScope between them is below a threshold. To compute SFCellScope, we simply use the geographical distance between the cells as the weight. Once the graph has been created, we run connected components on this graph to obtain the partitions. The use of connected component algorithm is not fundamental, it is also possible to use a clustering algorithm instead. For instance, a k-means clustering algorithm that could leverage SFCellScope to merge clusters would yield similar results."}, {"heading": "4.3.5 Managing Partitions Over Time", "text": "One important consideration is managing and handling group changes over time. To detect group changes, it is necessary to establish correspondence between groups across time intervals. Once this correspondence is established, CellScope\u2019s hybrid modeling makes it easy to accommodate changes. Due to the segregation of our model into common and base station specific components, small changes to the group do not affect the common model. In these cases, we can simply bootstrap the new base station using the common model, and then start learning specific features. On the other hand, if there are significant changes to a group, then the common model may no longer be valid, which is easy to detect using concept drift. In such cases, the offline model could be rebuilt."}, {"heading": "4.4 Summary", "text": "We now summarize how CellScope resolves the fundamental trade-off between latency and accuracy. To cope with the fact\n5Proposals for conducting geographically weighted PCA (GW-PCA) exist [21], but they are not applicable since they assume a smooth decaying user provided bandwidth function. 6A similarity measure for multivariate time series is proposed in [48], but it is not applicable due to its stricter form and dependence on finding the right eigenvector matrices to extend the Frobenius norm.\ngrouped = DStream.groupBySimilarityAndWindow (windowDuration , slideDuration) reduced = DStream.reduceBySimilarityAndWindow (func , windowDuration , slideDuration)\njoined = DStream.joinBySimilarityAndWindow (windowDuration , slideDuration)\nListing 1: CellScope\u2019s Grouping API\nthat individual base stations cannot produce enough data for learning in a given time budget, CellScope uses MTL. However, our datasets violate the assumption of learning task dependencies. As a solution, we proposed a novel way of using PCA to group data into sets with the same underlying performance characteristics. Directly applying MTL on these groups would still be problematic in our setting due to the inefficiencies with model updates. To solve this, we proposed a new formulation for MTL which divides the model into an offline and online hybrid. On this formulation, we proposed using simple learning functions are amenable to incremental and distributed execution. Finally, CellScope uses a simple concept drift detection to find and diagnose anomalies."}, {"heading": "5 Implementation", "text": "We have implemented CellScope on top of Spark [49], a big data cluster computing framework. In this section, we describe its API that exposes our commonality based grouping based on PCA (\u00a75.1), and implementation details on the hybrid offline-online MTL models (\u00a75.2)."}, {"heading": "5.1 Data Grouping API", "text": "CellScope\u2019s grouping API is built on Spark Streaming [50], since the data arrives continuously, and we need to operate on this data in a streaming fashion. Spark Streaming already provides support for windowing functions on streams of data, thus we extended the windowing functionality with three APIs in listing 1. In this section, we use the words grouping and partitions interchangeably.\nBoth the APIs leverage the DStream abstraction provided by Spark Streaming. The groupBySimilarityAndWindow takes the buffered data from the last window duration, applies the similarity metric to produce outputs of grouped datasets (multiple DStreams) every slide duration. The reduceBySimilarityAndWindow allows an additional user defined associative reduction operation on the grouped datasets. Finally, it also provides a joinBySimilarityAndWindow which joins multiple streams using similarity. We found these APIs sufficient for most of the operations, including group changes."}, {"heading": "5.2 Hybrid MTL Modeling", "text": "We use Spark\u2019s machine learning library, MLlib [41] for implementing our hybrid MTL model. MLlib contains the implementation of many distributed learning algorithms. To leverage the many pre-existing algorithms in Mllib, we implemented our multi-task learning hybrid model as an ensemble method [13]. By definition, ensemble methods use multiple learning algorithms to obtain better performance. Given such\nmethods, it is easy to implement our hybrid online-offline model; the shared features can be incorporated as a static model and the per base station model can be a separate input.\nWe modified the MLlib implementation of Gradient Boosted Tree (GBT) [18] model, an ensemble of decision trees. This implementation supports both classification and regression, and internally utilizes stochastic methods. Our modification supports a cached offline model in addition to online models. To incorporate incremental and window methods, we simply add more models to the ensemble when new data comes in. This is possible due to the use of stochastic methods. We also support weighing the outcome of the ensemble, so as to give more weights to the latest models."}, {"heading": "6 Evaluation", "text": "We have evaluated CellScope through a series of experiments on real-world cellular traces from a live LTE network from a large geographical area. Our results are summarized below: \u2022 CellScope\u2019s similarity based grouping provides up to\n10% improvement in accuracy on its own compared to the best case scenario of space partitioning schemes. \u2022 With MTL, CellScope\u2019s accuracy improvements range\nfrom 2.5\u00d7 to 4.4\u00d7 over different collection latencies. \u2022 Our hybrid online-offline model is able to reduce model\nupdate times upto 4.8\u00d7 and is able to learn changes in an online fashion with virtually no loss in accuracy.\nWe discuss these results in detail in the rest of this section. Evaluation Setup: Due to the sensitive nature of our dataset, our evaluation environment is a private cluster consists of 20 machines. Each machine consists of 4 CPUs, 32GB of memory and a 200GB magnetic hard disk. Dataset: We collected data from a major metro-area LTE network occupying a large geographical area for a time period of over 10 months. The network serves more than 2 million active users and carries over 6TB of traffic per hour."}, {"heading": "6.1 Benefits of Similarity Based Grouping", "text": "We first attempt to answer the question \"How much benefits do the similarity based grouping provide?\". To answer this question, we conducted two experiments, each with a different learning algorithm. The first experiment, whose aim is to detect call drops, uses a classification algorithm while the second, whose aim is to predict throughput, uses a regression algorithm. We chose these to evaluate the benefits in two different classes of algorithms. In both these cases, we pick the data collection latency where the per base station model gives the best accuracy, which was 1 hour for classification and 5 minutes for regression. In order to compare the benefits of our grouping scheme alone, we build a single model per group instead of applying MTL. We compare the accuracy obtained with three different space partitioning schemes. The first scheme (Spatial 1) just partitions space into grids of equal size. The second (Spatial 2) uses a sophisticated space-filling curve based approach [23] that could create dynamically size partitions. Finally, the third (Spatial 3) creates\n\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n(a) CellScope\u2019s partitioning by itself is able to provide significant gains. MTL provides further gains\n\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\n\ufffd \ufffd\ufffd\n\ufffd\ufffd \ufffd\ufffd\n\ufffd\ufffd \ufffd\ufffd \ufffd\n\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\n(b) Partitioning overheads are minimal\n\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\n\ufffd \ufffd \ufffd \ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n(c) CellScope achieves up to 2.5\u00d7 accuracy improvements in drop rate classification\n\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\n\ufffd \ufffd \ufffd \ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n(d) Improvements in throughput model regression go up to 4.4\u00d7\n\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd \ufffd\ufffd\n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\n\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n(e) Hyrid model reduces update time by up to 4.8\u00d7\n\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\n\ufffd \ufffd \ufffd \ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\n\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n(f) Online training due to the hybrid model helps incur almost no loss in accuracy due to staleness.\nFigure 4: CellScope is able to achieve high accuracy while reducing the data collection latency.\npartitions using base stations that are under the same cellular region. The results are shown in fig. 4a.\nCellScope\u2019s similarity grouping performs as good as the per base station model which gives the highest accuracy. It is interesting to note the performance of spatial partitioning schemes which ranges from 75% to 80%. None of the spatial schemes come close to the similarity grouping results. This is because the drops are few, and concentrated. Spatial schemes club base stations not based on underlying drop characteristics, but only based on spatial proximity. This causes the algorithms to underfit or overfit. Since our similarity based partitioner groups base stations using the drop characteristics, it is able to do as much as 17% better than the spatial schemes.\nThe benefits are even higher in the regression case. Here, the per base station model is unable to get enough data to build an accurate model and hence is only able to achieve around 66% accuracy. Spatial schemes are able to do slightly better than that. Our similarity based grouping emerges as a clear winner in this case with 77.3% accuracy. This result depicts the highly variable performance characteristics of the base stations, and the need to capture them for accuracy.\nThese benefits do not come at the cost of higher computational overhead to do the grouping. Figure 4b shows the overhead of performing similarity based grouping on various dataset sizes. It is clear that even very large datasets can be easily partitioned with very little overhead."}, {"heading": "6.2 Benefits of MTL", "text": "Next, we characterize the benefits of CellScope\u2019s use of MTL. To do this, we repeated the experiment before, and apply MTL to the grouped data to see if the accuracy im-\nproves compared to the earlier approach of a single model per group. The results are presented in fig. 4a. The ability of MTL to learn and improve models from other similar base stations\u2019 data results in an increase in the accuracy. Over the benefits of grouping, we see an improvement of 6% in the connection drop diagnosis experiment, and 16.2% in the case of throughput prediction experiment. The higher benefits in the latter comes from CellScope\u2019s ability to capture individual characteristics of the base station. This ability is not so crucial in the former because of the limited variation in individual characteristics over those found by the grouping."}, {"heading": "6.3 Combined Benefits of Grouping and MTL", "text": "We now evaluate the combined benefits of grouping and MTL under different data collection latencies. Here, we are interested in evaluating how CellScope handles the latency accuracy trade-off. To do this, we do the same classification and regression experiments, but on different data collection latencies instead of one. We show the results from the classification experiment in fig. 4c and that from the regression experiment in fig. 4d, which compares CellScope\u2019s accuracy against a per base station model\u2019s.\nWhen the opportunity to collect data at individual base stations is limited, CellScope is able to leverage our MTL formulation to combine data from multiple base stations, and build customized models to improve the accuracy. The benefits of CellScope ranges up to 2.5\u00d7 in the classification experiment, to 4.4\u00d7 in the regression experiment. Lower latencies are problematic in the classification experiment due to the extremely low probability of drops, while higher latencies are a problem in the regression experiment due to the temporal changes in performance characteristics."}, {"heading": "6.4 Hybrid model benefits", "text": "Finally, we evaluate the benefits of our hybrid modeling. Here, we are interested in learning how much overhead does it reduce during model updates, and can it do online learning.\nTo answer the first question, we conducted the following experiment: we considered three different data collection latencies: 10 minute, 1 hour and 1 day. We then learn a decision tree model on this data in a tumbling window fashion. So for the 10 minute latency, we collect data for 10 minutes, then build a model, wait another 10 minutes to refine the model and so on. We compare our hybrid model strategy to two different strategies: a naive approach which rebuilds the model from scratch every time, and a better, strawman approach which reuses the last model, and makes changes to it. Both builds a single model while CellScope uses our hybrid MTL model and only updates the online part of the model. The results of this experiment is shown in fig. 4e.\nThe naive approach incurs the highest overhead, which is obvious due to the need to rebuild the entire model from scratch. The overhead increases with the increase in input data. The strawman approach, on the other hand, is able to avoid this heavy overhead. However, it still incurs overheads with larger input because of its use of a single model which requires changes to many parts of the tree. CellScope incurs the least overhead, due to its use of multiple models. When data accumulates, it only needs to update a part of an existing tree, or build a new tree. This strategy results in a reduction of up to 2.2\u00d7 to 4.8\u00d7 in model building time for CellScope.\nTo wrap up, we evaluated the performance of the hybrid strategy on different data collection intervals. Here we are interested in seeing if the hybrid model is able to adapt to data changes and provide reasonable accuracies. We use the connection drop experiment again, but do it in a different way. At different collection latencies, we build the model at the beginning of the collection and use the model for the next interval. Hence, for the 1 minute latency, we build a model using the first minute data, and use the model for the second minute (until the whole second minute has arrived). The results are shown in fig. 4f. We see here that the per base station model suffers an accuracy loss at higher latencies due to staleness, while CellScope incurs almost zero loss in accuracy. This is because it doesn\u2019t wait until the end of the interval, and is able to incorporate data in real time.\n7 RAN Performance Analysis Using CellScope To validate our system in real world, we now show how domain experts can use CellScope to build efficient RAN performance analysis solutions. To analyze RAN performance, we consider two metrics that are of significant importance for end-user experience: throughput and connection drops. Our findings from the analysis are summarized below: \u2022 Our bearer performance analysis reveals interesting\nfindings on the inefficiencies of P-CQI detection mechanism and link adaptation algorithm. Both of these findings were previously unknown to the operator.\n\u2022 We find that connection drop is mainly due to uplink SINR and then downlink SINR, and that RSRQ is more reliable than downlink CQI. \u2022 Our cell performance analysis shows that many un-\nknown connection drops can be explained by coverage and uplink interference, and that throughput is seriously impacted by inefficient link adaptation algorithm."}, {"heading": "7.1 Analyzing Call Drop Performance", "text": "Operators are constantly striving to reduce the amount of drops in the network. With the move towards carrying voice data also over the data network (VoLTE), this metric has gained even more importance. This section describes how we used CellScope to analyze drop performance."}, {"heading": "7.1.1 Feature Engineering", "text": "Call drops are normally due to one of three metrics: Coverage It is intuitive to see that poor coverage leads to dropped calls. As seen from fig. 5a, areas with RSRP <\u2212130 dBm have very high connection drop probability. Downlink interference For downlink interference, we consider two metrics: RSRQ and downlink CQI. RSRQ is only reported when the UE might need to handoff. CQI is available independent of handoffs. From fig. 5b and fig. 5c, we see that the distributions do not match. To reveal the difference of these two distribution, we converted them to the common SINR. To convert CQI, we use the CQI to SINR table. For RSRQ, we use the formula derived in [35], SINR = 11\n12RSRQ\u2212\u03c1 .\n\u03c1 depends on subcarrier utilization. For two antennas, it is between 1/3 and 5/3. For connection failure cases, we show the emperical distribution of their SINR differences with 0%, 50% and 100% subcarrier utilization in fig. 5d. We see that 10% has a SINR difference of 10 dB. After revealing our finding to experts, it was discovered that P-CQI feedbacks through physical uplink control channel are not CRC protected. When spurious P-CQIs are received, the physical link adaptation algorithm might choose an incorrect rate resulting in drops.\nUplink interference As shown in fig. 6a, the drop probability for uplink SINR has a rather steep slope around and peaks at -17dB. The reason is that the scheduler stops allocating grants at this threshold."}, {"heading": "7.1.2 Decision Tree Model for Connection Drops", "text": "Based on feature engineering, we picked features that accurately depict call drops. We then used CellScope to train a decision tree that explains the root causes for connection drops. One of the learned trees is shown in fig. 6b. As we see, the tree first classifies drops based on uplink SINR, and then makes use of RSRQ if available. We confirmed with experts that the model agrees with their experience. Uplink SINR is more unpredictable because the interference comes from subscribers associated with neighboring base stations. In contrast, downlink interference is from neighboring base stations. CellScope\u2019s models achieved an overall accuracy of 92.1% here, while neither a per base station model nor a global model was able to accurately identify Uplink SINR as the cause and attained less than 80% accuracy."}, {"heading": "7.1.3 Detecting Cell KPI Change False Positives Using Concept Drift and Incremental Learning", "text": "An interesting application of CellScope\u2019s hybrid model is in detecting false positives of KPI changes. As explained earlier, state-of-the-art performance problem detection systems monitor KPIs, and raise alarms when thresholds are crossed. A major issue with these systems is that the alarms get raised even for known root causes. However, operators cannot confirm this without manual investigation resulting in wasted time and effort. This problem can be solved if known root causes can be filtered out before raising the alarm.\nWe illustrate this using drop rate. To do so, we use CellScope to apply the decision tree in an incremental fashion on a week worth of data divided into 10 minute interval windows. We used this window length since it matches closely with an interval that is usually used by the operators for monitoring drop rates. In every window, we predict the number of drops using our technique. The predicted drops are explainable, because we know precisely why those drops happened. We use a threshold of 0.5% for the drop rate, hence anything above this threshold is marked as an anomaly. The results from this experiment is depicted in fig. 6c. The threshold is exceeded at numerous places. Normally, these would have to\nbe investigated by the expert. However, CellScope explained them to relieve the burden off the operator.\nTo estimate the confidence in our prediction, we analyzed our results during the occurrence of these anomalies. We consider each connection drop or complete event as a Bernoulli random variable with probability p (from decision tree). A sequence of n connection events follow a binomial distribution. The 95% confidence interval is approximated by np\u00b12 \u221a np(1\u2212 p). We determine that the alarm is false if X is within the confidence interval. For this particular experiment, the bound was found to be (0.7958665, 0.8610155), thus we conclude that CellScope was successful."}, {"heading": "7.2 Throughput Performance Analysis", "text": "Our traces report information that lets us compute RLC throughput as ground truth. We would like to model how far the actual RLC throughput is from the predicted throughput using physical layer and MAC sub-layer information. This helps us understand the contributing factors of throughput."}, {"heading": "7.2.1 Feature Engineering", "text": "SINR Estimation The base stations have two antennas and are capable of MIMO spatial multiplexing (two streams) or transmit diversity. For both transmissions, each UE reports its two wideband CQIs. We use the CQI to SINR mapping table used at the base station scheduler to convert CQI to SINR. For transmission diversity, we convert the two CQIs to a single SINR as follows. First convert both CQIs to SINR, then compute the two spectrum efficiencies (bits/sec/Hz) using Shannon capacity. We average the two spectrum efficiencies and convert it back to SINR. We then add a 3dB transmission diversity gain to achieve the final SINR. For spatial multiplexing, we convert the two CQIs to two SINRs. Account for PRB control overhead and BLER target Each PRB is 180 KHz. But not all of it is used for data transmission. For transmit diversity, a 29% overhead is incurred per PRB on average because of resources allocated to physical downlink control channel, broadcast channel and reference signals. The BLER target is 10%. Account for MAC sub-layer retransmissions The MAC sub-layer performs retransmissions. We denote the MAC efficiency as \u03b2MAC. It is computed as the ratio of total first transmissions over total transmissions. Our traces provide information to compute \u03b2MAC."}, {"heading": "7.2.2 Regression Model: Bearer-Level Throughput", "text": "The predicted throughput due to transmit diversity is calculated as follows.\nt putRLCdiv = (1.0\u2212\u03b2MAC)\u00d70.9\u00d7 (1\u22120.29)\u00d7180\u00d7 PRBdiv\u00d7 log2(1+SINRdiv)/T xTimediv\nPRBdiv denotes the total PRBs allocated for transmit diversity. T xTimediv is the total transmission time for transmit diversity. Similarly we can calculate the predicted throughput due to spatial multiplexing. We then properly weight the two throughput by their respective fraction of transmission time to derive the final RLC throughput. Account for link adaptation in regression model The base station does not use the SINR corresponding to the UE reported CQI directly. It performs link adaptation to achieve the desired BLER of 10%. This adaptation is necessary since the propagation channel is subject to several conditions, which generally vary in space and time, e.g. path loss, fast fading, UE speed, location (outdoor, indoor, in-car) etc. We add a variable to the throughput equation to account for link adaptation, and use CellScope to learn it along with the other unknowns. Intuitively, this variable indicates how effective the link adaptation algorithm is. Since the base station adjusts a maximum of 6dB, we adjust the SINR used in our prediction by -6dB to compute the lower bound and +6dB to compute the upper bound. We compute the prediction error as follows. If the actual throughput is within the two bounds, the error is zero. If the throughput is outside the two bounds, the error is the distance to the closest bounds. We characterize the difference between the predicted throughput and actual throughput in terms of loss in dB. To compute this, we first convert the actual throughput into SINR. We then subtract the SINR from the one used for throughput prediction. Figure 6d shows that the distribution has a peak around 8dB. As we can see, around 20% of the bearers have a loss of efficiency of more than 10 dB. Due to the high fraction of bearers (20%) with high dB loss (more than 10 dB), we suspect that the link adaptation algorithm is slow to adapt to changing conditions. We validate this finding with field experts. Since this was an unknown insight, they were able to confirm this observation in their lab tests. The reason for this behavior is because the link adaptation algorithm uses the moving average SINR, which is a slow mechanism to adapt."}, {"heading": "8 Discussion", "text": "We have presented a system that resolves the fundamental trade-off between latency and accuracy in the context of cellular radio network analysis. Now we discuss the deployability and generality of our solution.\nDeployability and Impact: In several domains, it is common to deploy research prototypes on a live system to close the loop. Unfortunately, cellular networks are extremely high business impact systems and hence it is difficult to deploy our system. Nevertheless, our findings were useful for the operator in fixing several issues in their network. Moreover, during this experience, we were able to identify many issues with the data (missing fields, corruptions, incorrect values, etc) and suggest new fields to be added for better diagnostics.\nGenerality: Our solutions can be classified into two broad techniques that are applicable to many other domains: partitioning the data by the underlying cause on which the analysis is to be done; and applying domain specific formulations to the analysis approach. It is important to note that MTL is a generic approach. The primary goal of this paper and CellScope is not to apply specific ML algorithms for problem diagnosis, but to propose approaches that enable accurate applications of any ML technique by resolving the latency accuracy trade-off. Thus, we believe that our techniques are general and can be applied to several domains. Some examples of such domains include spatio-temporal analytics and the Internet-of-Things."}, {"heading": "9 Related Work", "text": "CellScope is related to cellular network monitoring and troubleshooting, self-organizing networks (SON), and network diagnosis techniques and MTL.\nCellular network monitoring and troubleshooting A number of existing cellular network monitoring and diagnosis systems exist [3, 4, 12, 16]. AT&T GigaScope [12] and Alcatel-Lucent Wireless Network Guardian (WNG) [3] generates per IP flow records and monitors many performance metrics such as aggregate per-cell TCP throughput, delay and loss. Because these tools tap interfaces in the core networks, they lack information at the radio access networks. Systems targeting RAN [4, 16] typically monitor aggregate KPIs and per-bearer records separately. Their root cause analysis of KPI problems correlates with aggregation air interface metrics such as SINR histograms and configuration data. Be-\ncause these systems rely on traditional database technologies, it is hard for them to provide fine-grained prediction based on per-bearer model. In contrast, CellScope is built on top of efficient big data system, Apache Spark. One recent commercial cellular network analytics system [6] adopted the Hadoop big data processing framework. Since it is built on top of WNG [3], it does not have visibility into RANs. Self-Organizing Networks (SON): The goal of SON [1] is to make the network capable of self-configuration (e.g. automatic neighbor list configuration) and self-optimization. CellScope focuses on understanding RAN performance and assists troubleshooting, thus can be used to assist SON. Modelling and diagnosis techniques: Diagnosing problems in cellular networks has been explored in the literature in various forms [8, 22, 29, 33, 43], where the focus of the work has either been detecting faults or finding the root cause of failures. A probabilistic system for auto-diagnosing faults in RAN is presented in [8]. It relies on KPIs. However, KPIs are not capable of providing diagnosis at high granularity. Moreover, it is unclear how their proposals capture complex dependencies between different components in RAN. An automated approach to locating anomalous events on hierarchical operational networks was proposed in [22] based on hierarchical heavy hitter based anomaly detection. It is unclear how their proposals carry over to RAN. Adding autonomous capabilities to alarm based fault detection is discussed in [29]. While their techniques can help systems autoheal faults, correlation based fault detection is insufficient for fine granularity detection and diagnosis of faults. [33] looks at detecting call connection faults due to load imbalances. In [47], a technique to detect and localize anomalies from an ISP point of view is proposed. Finally, [43] discusses the use of ML tools in predicting call drops and its duration. Multi-Task Learning: MTL builds on the idea that related tasks can learn from each other to achieve better statistical efficiency [9, 10, 17, 44]. Since the assumption of task relatedness do not hold in many scenarios, techniques to automatically cluster tasks have been explored in the past [20, 25]. However, these techniques consider tasks as black boxes and hence cannot leverage domain specific structure. In contrast, CellScope proposes a hybrid offline-online MTL formulation on a domain-specific grouping of tasks based on underlying performance characteristics."}, {"heading": "10 Conclusion and Future Work", "text": "While several domains can benefit from analyzing data collected in a real-time fashion, the practicality of these analyses are impeded by a fundamental trade-off between data collection latency and analysis accuracy. In this paper, we explored this trade-off in the context of a specific domain use-case, performance analysis in cellular RANs. We presented CellScope to resolve this trade-off by applying a domain specific formulation of MTL. CellScope first transforms raw data into insightful features. To apply MTL effectively, CellScope proposed a novel PCA inspired similarity metric that\ngroups data from geographically nearby base stations sharing performance commonalities. Finally, it also incorporates a hybrid online-offline model for efficient model updates. We have built CellScope on Apache Spark and evaluated it on real data that shows accuracy improvements ranging from 2.5\u00d7 to 4.4\u00d7 over direct applications of ML. We have also used CellScope to analyze a live LTE consisting of over 2 million subscribers for a period of over 10 months, where it uncovered several problems and insights.\nFor future work, we wish to explore the applicability of our techniques for resolving the trade-off in other domains where similarity based grouping is possible. Further, since our design is amenable to geo-distributed learning, we wish to investigate the trade-offs in such settings."}, {"heading": "Acknowledgments", "text": "We thank all AMPLab members who provided feedback on earlier drafts of this paper. This research is supported in part by NSF CISE Expeditions Award CCF-1139158, DOE Award SN10040 DE-SC0012463, and DARPA XData Award FA8750-12-2-0331, and gifts from Amazon Web Services, Google, IBM, SAP, The Thomas and Stacey Siebel Foundation, Apple Inc., Arimo, Blue Goji, Bosch, Cisco, Cray, Cloudera, Ericsson, Facebook, Fujitsu, HP, Huawei, Intel, Microsoft, Pivotal, Samsung, Schlumberger, Splunk, State Farm and VMware."}], "references": [{"title": "Netprints: diagnosing home network misconfigurations using shared knowledge", "author": ["B. AGGARWAL", "R. BHAGWAN", "T. DAS", "S. ESWARAN", "V.N. PADMANABHAN", "G.M. VOELKER"], "venue": "In Proceedings of the 6th USENIX symposium on Networked systems design and implementation (Berkeley, CA,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "9900 wireless network guardian", "author": ["ALCATEL LUCENT"], "venue": "http://www.alcatel-lucent.com/products/ 9900-wireless-network-guardian", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2013}, {"title": "9959 network performance optimizer", "author": ["ALCATEL LUCENT"], "venue": "http://www.alcatel-lucent.com/products/ 9959-network-performance-optimizer", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "Alcatel-Lucent motive big network analytics for service creation", "author": ["ALCATEL LUCENT"], "venue": "http://resources. alcatel-lucent.com/?cid=170795", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2014}, {"title": "Motive big network analytics", "author": ["ALCATEL LUCENT"], "venue": "http://www.alcatel-lucent.com/solutions/ motive-big-network-analytics", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2014}, {"title": "Towards highly reliable enterprise network services via inference of multi-level dependencies", "author": ["P. BAHL", "R. CHANDRA", "A. GREENBERG", "S. KANDULA", "D.A. MALTZ", "M. ZHANG"], "venue": "In Proceedings of the 2007 Conference on Applications,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "Learning of model parameters for fault diagnosis in wireless networks", "author": ["R. BARCO", "V. WILLE", "L. D\u00cdEZ", "M. TORIL"], "venue": "Wirel. Netw. 16,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "A model of inductive bias learning", "author": ["J. BAXTER"], "venue": "J. Artif. Int. Res", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2000}, {"title": "Multitask learning: A knowledge-based source of inductive bias", "author": ["R. CARUANA"], "venue": "In Proceedings of the Tenth International Conference on Machine Learning", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1993}, {"title": "Correlating instrumentation data to system states: A building block for automated diagnosis and control", "author": ["I. COHEN", "M. GOLDSZMIDT", "T. KELLY", "J. SYMONS", "J.S. CHASE"], "venue": "In Proceedings of the 6th Conference on Symposium on Opearting Systems Design & Implementation", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2004}, {"title": "Gigascope: a stream database for network applications", "author": ["C. CRANOR", "T. JOHNSON", "O. SPATASCHEK", "V. SHKAPENYUK"], "venue": "In Proceedings of the 2003 ACM SIGMOD international conference on Management of data (New York, NY, USA,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2003}, {"title": "Ensemble methods in machine learning", "author": ["T.G. DIETTERICH"], "venue": "In Multiple classifier systems. Springer,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2000}, {"title": "Regularized multi\u2013task learning", "author": ["T. EVGENIOU", "M. PONTIL"], "venue": "In Proceedings of the Tenth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (New York, NY, USA,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2004}, {"title": "Greedy function approximation: a gradient boosting machine", "author": ["J.H. FRIEDMAN"], "venue": "Annals of statistics", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2001}, {"title": "A survey on concept drift adaptation", "author": ["J.A. GAMA", "I. \u017dLIOBAIT\u0116", "A. BIFET", "M. PECHENIZKIY", "A. BOUCHACHIA"], "venue": "ACM Comput. Surv. 46,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2014}, {"title": "Robust multi-task feature learning", "author": ["P. GONG", "J. YE", "C. ZHANG"], "venue": "In Proceedings of the 18th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (New York, NY, USA,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2012}, {"title": "Geographically weighted principal components analysis", "author": ["P. HARRIS", "C. BRUNSDON", "M. CHARLTON"], "venue": "International Journal of Geographical Information Science 25,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2011}, {"title": "Tiresias: Online anomaly detection for hierarchical operational network data", "author": ["HONG", "C.-Y", "M. CAESAR", "N. DUFFIELD", "J. WANG"], "venue": "In Proceedings of the 2012 IEEE 32Nd International Conference on Distributed Computing Systems (Washington, DC,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2012}, {"title": "Celliq : Real-time cellular network analytics at scale", "author": ["A. IYER", "L.E. LI", "I. STOICA"], "venue": "In 12th USENIX Symposium on Networked Systems Design and Implementation (NSDI", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2015}, {"title": "Automated rule-based diagnosis through a distributed monitor system", "author": ["G. KHANNA", "M. YU CHENG", "P. VARADHARAJAN", "S. BAGCHI", "M.P. CORREIA", "P.J. VER\u00cdSSIMO"], "venue": "IEEE Trans. Dependable Secur. Comput", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2007}, {"title": "Tree-guided group lasso for multi-task regression with structured sparsity", "author": ["S. KIM", "E.P. XING"], "venue": "Intenational Conference on Machine Learning (ICML)", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2010}, {"title": "Mlbase: A distributed machine-learning system", "author": ["T. KRASKA", "A. TALWALKAR", "J.C. DUCHI", "R. GRIFFITH", "M.J. FRANKLIN", "M.I. JORDAN"], "venue": null, "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2013}, {"title": "Between-groups comparison of principal components", "author": ["W. KRZANOWSKI"], "venue": "Journal of the American Statistical Association 74,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 1979}, {"title": "Diagnosing network-wide traffic anomalies", "author": ["A. LAKHINA", "M. CROVELLA", "C. DIOT"], "venue": "In Proceedings of the 2004 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications (New York, NY, USA,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2004}, {"title": "AND STRASS- NER, J. A model-based approach to adding autonomic capabilities to network fault management system", "author": ["Y. LIU", "J. ZHANG", "M. JIANG", "D. RAYMER"], "venue": "In Network Operations and Management Symposium,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2008}, {"title": "Machine learning: a probabilistic perspective", "author": ["K.P. MURPHY"], "venue": "MIT press,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2012}, {"title": "A divide-andconquer method for scalable robust multitask learning", "author": ["PAN Y", "XIA R", "YIN J", "LIU"], "venue": "Neural Networks and Learning Systems, IEEE Transactions on 26,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2015}, {"title": "On lines and planes of closest fit to systems of points in space", "author": ["K. PEARSON"], "venue": "Philosophical Magazine 2,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 1901}, {"title": "Operational fault detection in cellular wireless basestations", "author": ["RAO S"], "venue": "IEEE Trans. on Netw. and Serv. Manag. 3,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2006}, {"title": "AND MOUFTAH, H. 4g network technologies for mobile telecommunications", "author": ["A.M. SAFWAT"], "venue": "Network, IEEE 19,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2005}, {"title": "Mobility parameter planning for 3GPP LTE: Basic concepts and intra-layer mobility. www.lteexpert.com/lte_ mobility_wp1_10June2013.pdf", "author": ["J. SALO"], "venue": null, "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2013}, {"title": "LTE: the UMTS long term evolution", "author": ["S. SESIA", "I. TOUFIK", "M. BAKER"], "venue": "Wiley Online Library,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2009}, {"title": "Understanding the impact of network dynamics on mobile video user engagement", "author": ["M.Z. SHAFIQ", "J. ERMAN", "L. JI", "A.X. LIU", "J. PANG", "J. WANG"], "venue": "In The 2014 ACM International Conference on Measurement and Modeling of Computer Systems (New York, NY, USA,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2014}, {"title": "A first look at cellular network performance during crowded events", "author": ["M.Z. SHAFIQ", "L. JI", "A.X. LIU", "J. PANG", "S. VENKATARA- MAN", "J. WANG"], "venue": "In Proceedings of the ACM SIGMETRICS/International Conference on Measurement and Modeling of Computer Systems (New York, NY, USA,", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2013}, {"title": "Stochastic methods for l1-regularized loss minimization", "author": ["S. SHALEV-SHWARTZ", "A. TEWARI"], "venue": "J. Mach. Learn. Res", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2011}, {"title": "3G wireless networks", "author": ["C. SMITH"], "venue": "McGraw-Hill, Inc.,", "citeRegEx": "40", "shortCiteRegEx": "40", "year": 2006}, {"title": "MLI: an API for distributed machine learning", "author": ["E.R. SPARKS", "A. TALWALKAR", "V. SMITH", "J. KOTTALAM", "X. PAN", "J.E. GONZALEZ", "M.J. FRANKLIN", "M.I. JORDAN", "T. KRASKA"], "venue": "IEEE 13th International Conference on Data Mining, Dallas, TX, USA, December", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2013}, {"title": "Using big data for more dependability: A cellular network tale", "author": ["N. THEERA-AMPORNPUNT", "S. BAGCHI", "K.R. JOSHI", "R.K. PANTA"], "venue": "In Proceedings of the 9th Workshop on Hot Topics in Dependable Systems (New York, NY, USA,", "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2013}, {"title": "Is learning the n-th thing any easier than learning the first", "author": ["S. THRUN"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 1996}, {"title": "Regression shrinkage and selection via the lasso", "author": ["R. TIBSHIRANI"], "venue": "Journal of the Royal Statistical Society, Series B", "citeRegEx": "45", "shortCiteRegEx": "45", "year": 1994}, {"title": "Automatic misconfiguration troubleshooting with peerpressure", "author": ["H.J. WANG", "J.C. PLATT", "Y. CHEN", "R. ZHANG", "WANG", "Y.-M"], "venue": "In Proceedings of the 6th Conference on Symposium on Opearting Systems Design & Implementation - Volume 6 (Berkeley, CA,", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 2004}, {"title": "Argus: End-to-end service anomaly detection and localization from an isp\u2019s point of view", "author": ["H. YAN", "A. FLAVEL", "Z. GE", "A. GERBER", "D. MASSEY", "C. PAPADOPOULOS", "H. SHAH", "J. YATES"], "venue": "In INFOCOM,", "citeRegEx": "47", "shortCiteRegEx": "47", "year": 2012}, {"title": "A pca-based similarity measure for multivariate time series", "author": ["K. YANG", "C. SHAHABI"], "venue": "In Proceedings of the 2nd ACM International Workshop on Multimedia Databases (New York, NY, USA,", "citeRegEx": "48", "shortCiteRegEx": "48", "year": 2004}, {"title": "Resilient distributed datasets: a fault-tolerant abstraction for in-memory cluster computing", "author": ["M. ZAHARIA", "M. CHOWDHURY", "T. DAS", "A. DAVE", "J. MA", "M. MCCAULEY", "M.J. FRANKLIN", "S. SHENKER", "I. STOICA"], "venue": "In Proceedings of the 9th USENIX conference on Networked Systems Design and Implementation (Berkeley, CA,", "citeRegEx": "49", "shortCiteRegEx": "49", "year": 2012}, {"title": "Discretized streams: Fault-tolerant streaming computation at scale", "author": ["M. ZAHARIA", "T. DAS", "H. LI", "T. HUNTER", "S. SHENKER", "I. STOICA"], "venue": "In Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles (New York, NY, USA,", "citeRegEx": "50", "shortCiteRegEx": "50", "year": 2013}, {"title": "Materialization optimizations for feature selection workloads", "author": ["C. ZHANG", "A. KUMAR", "R\u00c9"], "venue": "In Proceedings of the 2014 ACM SIGMOD International Conference on Management of Data (New York, NY, USA,", "citeRegEx": "51", "shortCiteRegEx": "51", "year": 2014}, {"title": "Failure diagnosis using decision trees", "author": ["A.X. ZHENG", "J. LLOYD", "E. BREWER"], "venue": "In Proceedings of the First International Conference on Autonomic Computing (Washington, DC, USA,", "citeRegEx": "52", "shortCiteRegEx": "52", "year": 2004}], "referenceMentions": [{"referenceID": 29, "context": "While RAN technologies have seen tremendous improvements over the past decade [34, 36, 40], performance problems are still prevalent [38].", "startOffset": 78, "endOffset": 90}, {"referenceID": 31, "context": "While RAN technologies have seen tremendous improvements over the past decade [34, 36, 40], performance problems are still prevalent [38].", "startOffset": 78, "endOffset": 90}, {"referenceID": 35, "context": "While RAN technologies have seen tremendous improvements over the past decade [34, 36, 40], performance problems are still prevalent [38].", "startOffset": 78, "endOffset": 90}, {"referenceID": 33, "context": "While RAN technologies have seen tremendous improvements over the past decade [34, 36, 40], performance problems are still prevalent [38].", "startOffset": 133, "endOffset": 137}, {"referenceID": 32, "context": "Factors impacting RAN performance include user mobility, skewed traffic pattern, interference, lack of coverage, unoptimized configuration parameters, inefficient algorithms, equipment failures, software bugs and protocol errors [37].", "startOffset": 229, "endOffset": 233}, {"referenceID": 0, "context": "Although some of these factors are present in traditional networks and troubleshooting these networks has received considerable attention in the literature [2, 7, 11, 46, 52], RAN performance diagnosis brings out a unique challenge: the performance of multiple base stations exhibit complex temporal and spatial interdependencies due to the shared radio access media and user mobility.", "startOffset": 156, "endOffset": 174}, {"referenceID": 5, "context": "Although some of these factors are present in traditional networks and troubleshooting these networks has received considerable attention in the literature [2, 7, 11, 46, 52], RAN performance diagnosis brings out a unique challenge: the performance of multiple base stations exhibit complex temporal and spatial interdependencies due to the shared radio access media and user mobility.", "startOffset": 156, "endOffset": 174}, {"referenceID": 9, "context": "Although some of these factors are present in traditional networks and troubleshooting these networks has received considerable attention in the literature [2, 7, 11, 46, 52], RAN performance diagnosis brings out a unique challenge: the performance of multiple base stations exhibit complex temporal and spatial interdependencies due to the shared radio access media and user mobility.", "startOffset": 156, "endOffset": 174}, {"referenceID": 40, "context": "Although some of these factors are present in traditional networks and troubleshooting these networks has received considerable attention in the literature [2, 7, 11, 46, 52], RAN performance diagnosis brings out a unique challenge: the performance of multiple base stations exhibit complex temporal and spatial interdependencies due to the shared radio access media and user mobility.", "startOffset": 156, "endOffset": 174}, {"referenceID": 46, "context": "Although some of these factors are present in traditional networks and troubleshooting these networks has received considerable attention in the literature [2, 7, 11, 46, 52], RAN performance diagnosis brings out a unique challenge: the performance of multiple base stations exhibit complex temporal and spatial interdependencies due to the shared radio access media and user mobility.", "startOffset": 156, "endOffset": 174}, {"referenceID": 2, "context": "Existing systems [4, 16] for detecting performance problems rely on monitoring aggregate metrics, such as connection drop rate and throughput per cell, over minuteslong time windows.", "startOffset": 17, "endOffset": 24}, {"referenceID": 19, "context": "However, the sheer volume of the data and its high dimensionality make the troubleshooting using human experts and traditional rule-based systems very hard, if not infeasible [24].", "startOffset": 175, "endOffset": 179}, {"referenceID": 25, "context": "In this paper, we consider one natural alternative to these approaches that has been used recently to troubleshoot other complex systems with considerable success: machine learning (ML) [30].", "startOffset": 186, "endOffset": 190}, {"referenceID": 8, "context": "More specifically, CellScope applies Multi-task Learning (MTL) [10, 44], a stateof-the-art machine learning approach, to RAN troubleshooting.", "startOffset": 63, "endOffset": 71}, {"referenceID": 38, "context": "More specifically, CellScope applies Multi-task Learning (MTL) [10, 44], a stateof-the-art machine learning approach, to RAN troubleshooting.", "startOffset": 63, "endOffset": 71}, {"referenceID": 14, "context": "Finally, in this approach, finding anomalies is equivalent to detecting concept drift [19].", "startOffset": 86, "endOffset": 90}, {"referenceID": 21, "context": "To demonstrate the effectiveness of our proposal, we have built CellScope on Spark [26, 41, 49].", "startOffset": 83, "endOffset": 95}, {"referenceID": 36, "context": "To demonstrate the effectiveness of our proposal, we have built CellScope on Spark [26, 41, 49].", "startOffset": 83, "endOffset": 95}, {"referenceID": 43, "context": "To demonstrate the effectiveness of our proposal, we have built CellScope on Spark [26, 41, 49].", "startOffset": 83, "endOffset": 95}, {"referenceID": 1, "context": "Several commercial solutions exists [3\u20135, 16] that", "startOffset": 36, "endOffset": 45}, {"referenceID": 2, "context": "Several commercial solutions exists [3\u20135, 16] that", "startOffset": 36, "endOffset": 45}, {"referenceID": 3, "context": "Several commercial solutions exists [3\u20135, 16] that", "startOffset": 36, "endOffset": 45}, {"referenceID": 45, "context": "Feature engineering, the process of transforming the raw input data to a set of features that can be effectively utilized by machine learning algorithms, is a fundamental part of ML applications [51].", "startOffset": 195, "endOffset": 199}, {"referenceID": 7, "context": "boosted [9, 10, 17, 44].", "startOffset": 8, "endOffset": 23}, {"referenceID": 8, "context": "boosted [9, 10, 17, 44].", "startOffset": 8, "endOffset": 23}, {"referenceID": 12, "context": "boosted [9, 10, 17, 44].", "startOffset": 8, "endOffset": 23}, {"referenceID": 38, "context": "boosted [9, 10, 17, 44].", "startOffset": 8, "endOffset": 23}, {"referenceID": 15, "context": "MTL in the face of dependency violation has been studied in the machine learning literature in the recent past [20, 25].", "startOffset": 111, "endOffset": 119}, {"referenceID": 20, "context": "MTL in the face of dependency violation has been studied in the machine learning literature in the recent past [20, 25].", "startOffset": 111, "endOffset": 119}, {"referenceID": 26, "context": "Scalable application of MTL in a general setting is an active area of research in machine learning [31], so we turn to problem-specific optimizations to address this challenge.", "startOffset": 99, "endOffset": 103}, {"referenceID": 39, "context": "(3) could be posed as an `1 regularized loss minimization problem [45]:", "startOffset": 66, "endOffset": 70}, {"referenceID": 34, "context": "Furthermore, the choice of our learning functions lets us apply stochastic methods [39] which can be efficiently parallelized.", "startOffset": 83, "endOffset": 87}, {"referenceID": 14, "context": "Concept drift is a term used to refer the phenomenon where the underlying distribution of the training data for a machine learning model changes [19].", "startOffset": 145, "endOffset": 149}, {"referenceID": 27, "context": "Our data partitioning is based on Principal Component Analysis (PCA), a widely used technique in multivariate analysis [32].", "startOffset": 119, "endOffset": 123}, {"referenceID": 23, "context": "[28] showed the usefulness of PCA for network anomaly detection.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "Krzanowski [27] describes such a Similarity Factor (SF).", "startOffset": 11, "endOffset": 15}, {"referenceID": 16, "context": "5Proposals for conducting geographically weighted PCA (GW-PCA) exist [21], but they are not applicable since they assume a smooth decaying user provided bandwidth function.", "startOffset": 69, "endOffset": 73}, {"referenceID": 42, "context": "6A similarity measure for multivariate time series is proposed in [48], but it is not applicable due to its stricter form and dependence on finding the right eigenvector matrices to extend the Frobenius norm.", "startOffset": 66, "endOffset": 70}, {"referenceID": 43, "context": "We have implemented CellScope on top of Spark [49], a big data cluster computing framework.", "startOffset": 46, "endOffset": 50}, {"referenceID": 44, "context": "CellScope\u2019s grouping API is built on Spark Streaming [50], since the data arrives continuously, and we need to operate on this data in a streaming fashion.", "startOffset": 53, "endOffset": 57}, {"referenceID": 36, "context": "We use Spark\u2019s machine learning library, MLlib [41] for implementing our hybrid MTL model.", "startOffset": 47, "endOffset": 51}, {"referenceID": 11, "context": "To leverage the many pre-existing algorithms in Mllib, we implemented our multi-task learning hybrid model as an ensemble method [13].", "startOffset": 129, "endOffset": 133}, {"referenceID": 13, "context": "We modified the MLlib implementation of Gradient Boosted Tree (GBT) [18] model, an ensemble of decision trees.", "startOffset": 68, "endOffset": 72}, {"referenceID": 18, "context": "The second (Spatial 2) uses a sophisticated space-filling curve based approach [23] that could create dynamically size partitions.", "startOffset": 79, "endOffset": 83}, {"referenceID": 30, "context": "For RSRQ, we use the formula derived in [35], SINR = 1 1 12RSRQ\u2212\u03c1 .", "startOffset": 40, "endOffset": 44}, {"referenceID": 1, "context": "Cellular network monitoring and troubleshooting A number of existing cellular network monitoring and diagnosis systems exist [3, 4, 12, 16].", "startOffset": 125, "endOffset": 139}, {"referenceID": 2, "context": "Cellular network monitoring and troubleshooting A number of existing cellular network monitoring and diagnosis systems exist [3, 4, 12, 16].", "startOffset": 125, "endOffset": 139}, {"referenceID": 10, "context": "Cellular network monitoring and troubleshooting A number of existing cellular network monitoring and diagnosis systems exist [3, 4, 12, 16].", "startOffset": 125, "endOffset": 139}, {"referenceID": 10, "context": "AT&T GigaScope [12] and Alcatel-Lucent Wireless Network Guardian (WNG) [3] generates per IP flow records and monitors many performance metrics such as aggregate per-cell TCP throughput, delay and loss.", "startOffset": 15, "endOffset": 19}, {"referenceID": 1, "context": "AT&T GigaScope [12] and Alcatel-Lucent Wireless Network Guardian (WNG) [3] generates per IP flow records and monitors many performance metrics such as aggregate per-cell TCP throughput, delay and loss.", "startOffset": 71, "endOffset": 74}, {"referenceID": 2, "context": "Systems targeting RAN [4, 16] typically monitor aggregate KPIs and per-bearer records separately.", "startOffset": 22, "endOffset": 29}, {"referenceID": 4, "context": "One recent commercial cellular network analytics system [6] adopted the Hadoop big data processing framework.", "startOffset": 56, "endOffset": 59}, {"referenceID": 1, "context": "Since it is built on top of WNG [3], it does not have visibility into RANs.", "startOffset": 32, "endOffset": 35}, {"referenceID": 6, "context": "Modelling and diagnosis techniques: Diagnosing problems in cellular networks has been explored in the literature in various forms [8, 22, 29, 33, 43], where the focus of the work has either been detecting faults or finding the root cause of failures.", "startOffset": 130, "endOffset": 149}, {"referenceID": 17, "context": "Modelling and diagnosis techniques: Diagnosing problems in cellular networks has been explored in the literature in various forms [8, 22, 29, 33, 43], where the focus of the work has either been detecting faults or finding the root cause of failures.", "startOffset": 130, "endOffset": 149}, {"referenceID": 24, "context": "Modelling and diagnosis techniques: Diagnosing problems in cellular networks has been explored in the literature in various forms [8, 22, 29, 33, 43], where the focus of the work has either been detecting faults or finding the root cause of failures.", "startOffset": 130, "endOffset": 149}, {"referenceID": 28, "context": "Modelling and diagnosis techniques: Diagnosing problems in cellular networks has been explored in the literature in various forms [8, 22, 29, 33, 43], where the focus of the work has either been detecting faults or finding the root cause of failures.", "startOffset": 130, "endOffset": 149}, {"referenceID": 37, "context": "Modelling and diagnosis techniques: Diagnosing problems in cellular networks has been explored in the literature in various forms [8, 22, 29, 33, 43], where the focus of the work has either been detecting faults or finding the root cause of failures.", "startOffset": 130, "endOffset": 149}, {"referenceID": 6, "context": "A probabilistic system for auto-diagnosing faults in RAN is presented in [8].", "startOffset": 73, "endOffset": 76}, {"referenceID": 17, "context": "An automated approach to locating anomalous events on hierarchical operational networks was proposed in [22] based on hierarchical heavy hitter based anomaly detection.", "startOffset": 104, "endOffset": 108}, {"referenceID": 24, "context": "Adding autonomous capabilities to alarm based fault detection is discussed in [29].", "startOffset": 78, "endOffset": 82}, {"referenceID": 28, "context": "[33] looks at detecting call connection faults due to load imbalances.", "startOffset": 0, "endOffset": 4}, {"referenceID": 41, "context": "In [47], a technique to detect and localize anomalies from an ISP point of view is proposed.", "startOffset": 3, "endOffset": 7}, {"referenceID": 37, "context": "Finally, [43] discusses the use of ML tools in predicting call drops and its duration.", "startOffset": 9, "endOffset": 13}, {"referenceID": 7, "context": "Multi-Task Learning: MTL builds on the idea that related tasks can learn from each other to achieve better statistical efficiency [9, 10, 17, 44].", "startOffset": 130, "endOffset": 145}, {"referenceID": 8, "context": "Multi-Task Learning: MTL builds on the idea that related tasks can learn from each other to achieve better statistical efficiency [9, 10, 17, 44].", "startOffset": 130, "endOffset": 145}, {"referenceID": 12, "context": "Multi-Task Learning: MTL builds on the idea that related tasks can learn from each other to achieve better statistical efficiency [9, 10, 17, 44].", "startOffset": 130, "endOffset": 145}, {"referenceID": 38, "context": "Multi-Task Learning: MTL builds on the idea that related tasks can learn from each other to achieve better statistical efficiency [9, 10, 17, 44].", "startOffset": 130, "endOffset": 145}, {"referenceID": 15, "context": "Since the assumption of task relatedness do not hold in many scenarios, techniques to automatically cluster tasks have been explored in the past [20, 25].", "startOffset": 145, "endOffset": 153}, {"referenceID": 20, "context": "Since the assumption of task relatedness do not hold in many scenarios, techniques to automatically cluster tasks have been explored in the past [20, 25].", "startOffset": 145, "endOffset": 153}], "year": 2016, "abstractText": "An increasing amount of analytics is performed on data that is procured in a real-time fashion to make real-time decisions. Such tasks include simple reporting on streams to sophisticated model building. However, the practicality of such analyses are impeded in several domains because they are faced with a fundamental trade-off between data collection latency and analysis accuracy. In this paper, we study this trade-off in the context of a specific domain, Cellular Radio Access Networks (RAN). Our choice of this domain is influenced by its commonalities with several other domains that produce real-time data, our access to a large live dataset, and their real-time nature and dimensionality which makes it a natural fit for a popular analysis technique, machine learning (ML). We find that the latency accuracy trade-off can be resolved using two broad, general techniques: intelligent data grouping and task formulations that leverage domain characteristics. Based on this, we present CellScope, a system that addresses this challenge by applying a domain specific formulation and application of Multi-task Learning (MTL) to RAN performance analysis. It achieves this goal using three techniques: feature engineering to transform raw data into effective features, a PCA inspired similarity metric to group data from geographically nearby base stations sharing performance commonalities, and a hybrid online-offline model for efficient model updates. Our evaluation of CellScope shows that its accuracy improvements over direct application of ML range from 2.5\u00d7 to 4.4\u00d7 while reducing the model update overhead by up to 4.8\u00d7. We have also used CellScope to analyze a live LTE consisting of over 2 million subscribers for a period of over 10 months, where it uncovered several problems and insights, some of them previously unknown.", "creator": "LaTeX with hyperref package"}}}