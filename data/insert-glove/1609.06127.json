{"id": "1609.06127", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Sep-2016", "title": "A framework for mining process models from emails logs", "abstract": "Due intensifiers to loveday its wide brimstone use sirisanont in personal, but most chamber importantly, professional metrostars contexts, semak email represents maktoum a shtahd valuable heathlands source of information that busova\u010da can achiral be temasek harvested craftsy for understanding, tourab reengineering and norfork repurposing http://www.people undocumented business pscs processes 47-mile of companies returns and norby institutions. malva Towards sadder this aim, a few researchers investigated lpf the problem feliu of extracting photographer process couchman oriented garnes information from email logs doctorates in order to take vew benefit of vetch the many available process konpa mining languages techniques andropov and turinui tools. In this paper quadrophenia we go initiative further in vml this 1.40 direction, by corpulent proposing a perif\u00e9rico new cio method essanay for mining seomin process moriero models from email mardhi logs meachem that mutran leverage arthus unsupervised machine learning techniques ilog with businesspersons little whoppers human 100.15 involvement. Moreover, set-aside our tuthill method allows the-dream to semi - 20-3 automatically brocius label unmot emails with cles activity names, that venizelist can d'isere be 3-stage used 140-150 for activity recognition d'elegance in 4200 new incoming emails. A use \u014dta case demonstrates borghese the primerica usefulness civlians of agma the 43-2 proposed 2208 solution using a laid-off modest tacuarembo in bencivenga size, yet real - world, erlbaum dataset containing djdam emails 233,000 that pattle belong cake to two different process coope models.", "histories": [["v1", "Tue, 20 Sep 2016 12:29:15 GMT  (261kb,D)", "http://arxiv.org/abs/1609.06127v1", "18 pages, 6 figures"]], "COMMENTS": "18 pages, 6 figures", "reviews": [], "SUBJECTS": "cs.CL cs.LG", "authors": ["diana jlailaty", "daniela grigori", "khalid belhajjame"], "accepted": false, "id": "1609.06127"}, "pdf": {"name": "1609.06127.pdf", "metadata": {"source": "CRF", "title": "A framework for mining process models from email logs", "authors": ["Diana Jlailaty", "Daniela Grigori", "Khalid Belhajjame"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Email is by and large the most popular communication medium, and is considered by some the first and largest social media 1. While its initial use focused on exchanging (personal) messages between individuals, email is nowadays used for complex activities ranging from organization of events, to sharing and editing documents, to coordinating the execution of complex tasks involving multiple individuals. A recent study has shown that email is still the primary method of communication, collaboration and information sharing2.\nBecause of its wide use in personal, but most importantly, professional contexts, email represents a valuable source of information that can be harvested for understanding, reengineering and repurposing undocumented business processes of companies and institutions. Towards this aim, a few researchers investigated the problem of mining processes from email logs. For example, Aalst et al. [11] developed EmailAnalyzer, a tools for transforming email messages in MS Outlook into a format that can be used by process mining tools. Mavaddat et al.\n1 http://www.web-strategist.com/blog/2009/07/09/email-the-first-social-network/ 2 http://onlinegroups.net/blog/2014/03/06/use-email-for-collaboration/\nar X\niv :1\n60 9.\n06 12\n7v 1\n[ cs\n.C L\n] 2\n0 Se\n[9] elaborated an approach to classify emails into business and non business oriented categories. Many approaches propose to label emails with speech acts (see for example, [8]). While useful, existing proposals use mainly supervised machine learning techniques, thereby requiring human-supplied training datasets. Moreover, they sometimes make assumption that do not hold always in practice. For example, the work by [11] assumes that the email message subject includes the activity name.\nWe present in this paper a new method for mining process models from email logs that leverage unsupervised machine learning techniques with little human involvement to map email logs into process models. We do not assume that emails have been (manually) preprocessed. Instead, we start with raw emails that undergo a number of (automatic) preprocessing steps for cleansing them and translating them into a format that is expected by process mining tools.\nGiven that advanced process mining techniques and tools exist, the challenge we face is to extract from emails the information required by this techniques:\n\u2022 among the many business processes in which the user is involved, which one is concerned by a given email?\n\u2022 which process activity is related to the given email?\n\u2022 given a process model, what are the emails that belong to the same process instance?\nTo address this challenge, we adopt an iterative approach that given a log of emails, clusters preprocessed emails to identify process models and instances, then uses knowledge about process instances to guide activity recognition.\nThe contributions of the paper are therefore as follows:\n\u2022 An approach for mining the process models underlying a log of emails. It is worth noting here that the emails used as input may belong to different process models, and that our approach is able to cope with this kind of heterogeneity. Process related information is exctracted from emails, allowing to benefit from existing process mining tools.\n\u2022 An implementation of the steps of the approach using state of the art techniques, such as hierarchical and k-means clustering, customized for our needs.\n\u2022 A method to semi-automatically label emails with activity names, with little user effort, instead of manually labeling the emails in the training set as done by speech act based approaches. The labelled emails can be used for activity recognition in new incoming emails and thus for recommendations about adding activities in user task list.\n\u2022 A use case that demonstrates the usefulness of the proposed solution using a modest in size, yet real-world, dataset containing emails that belong to two different process models, namely meeting organization and requests for conference travel grants.\nThe paper is organized as follows. We start by overviewing our approach in Section 2. We present in detail the phases that compose our approach in Sections 3,4 and5. We then present a use case that showcase our approach using a dataset of real-world emails in Section 6. An analysis of related works is presented in 7 before concluding the paper in Section 8."}, {"heading": "2 Approach Overview", "text": "Figure 1 shows that our approach is a three-step process that given a set of emails as input, produces a set of process models. The emails can be supplied by an individual, for example, a student or a researcher, or an institution.\nIn order to be more clear in the rest of the paper, we will provide some terms definitions:\n1. Process Model: is the generic representation of all process instances.Process model describes a business process that is applied for achieving specific goal. It is a connected graph of nodes and edges. Nodes represent the activities applied during the process enactment and the edges connecting the nodes represent the flow between the activities. Mainly, process mining techniques are applied on event logs to derive their corresponding process models.\n2. Instance/Case: An instances is a specific execution of process model. There may be several ways for executing the same business process. This will lead to the formation of various process instances originating from the same model. An instance is composed of a set of connected activities.\n3. Activity: is the core of a process model. An activity is a task that should be accomplished in defined period of time to work towards the process goals. It can be broken down into a set of timestamped events.\n4. Process Topic: When using this expression, we mean the topic or the subject the process revolving around such as meeting scheduling, applying for Ph.D position, funding for conference attendance, requesting documents.. etc\nIn the first step, the emails provided as input are preprocessed in order to cleanse and translate them into a structured format that is amenable for mining. The\ncontents of the resulting structured data is then normalized. The resulting data undergo a clustering phase in which emails are group. At the end of this step, each email is assigned an ID, that identifies the cluster to which the email belongs. For each cluster of emails, a process model discovery is applied (step 3).\nThe third step is composite in the sense that it can be broken down into sub-steps as illustrated in Figure 2. Given a cluster of emails that belong to the same process topic, such emails are first sub-grouped into clusters, each representing a process instance (step 1 in Figure 2).\nThe emails of each process instance are then labeled with the type of the activity they belong to. Notice here that multiple emails of the same process instance may belong to the same activity. The second step in Figure 2 is used for this purpose to cluster emails that belong to the same activity; the third step will associate them with an activity name (based on the labels that the user assigns to the medoids of the clusters). The resulting labeled set is stored and can be used for activity recognition in incoming emails. Finally, an existing process mining technique is utilized to infer the process model. See [17] for a survey on such techniques."}, {"heading": "3 Phase 1: Email Log Preprocessing", "text": "The input of the first step is a set of emails that will be preprocessed in order to cleanse and translate them into a structured format that is amenable for mining.\nEmails are unstructured data that should be translated into the format expected by the mining tools. Some content of the message may be useless for our analysis. For that reason, cleansing of data is an important step. Moreover, attributes describing emails (used in similarity measurement) can be of different data types. Thus, it is essential to apply some pre-processing and normalization of data before starting the analysis. In the following we will describe the steps of cleansing, representation and normalization of data."}, {"heading": "3.1 Cleansing", "text": "Cleansing is considered an essential step in emails\u2019 preprocessing as it eliminates all the elements that may affect badly the clustering quality. We use the text mining library of R statistical language for preprocessing of the input\nemails. Emails may contain a lot of words or symbols that do not serve our analysis such as the stopwords, numbers, or punctuations. R statistical language provides multiple built-in functions that can perform specific text pre-processing tasks such as removing stopwords, removing numbers, removing punctuation and lowering capital letters etc... This helps in optimizing the similarity measurement between the contents of emails."}, {"heading": "3.2 Representation of Data", "text": "The input data is a csv file in which each row represents an email. The columns represent the attributes describing the email such as sender, receiver, subject, body, timestamp etc... In this step, our goal is to reformulate the input data to be compatible with the data required by the analysis step of our framework. When data is imported, we can exclude the attributes that are out of our interest. In our case, we import the subject, body, sender, receivers and the timestamp of each e-mail. The imported bodies of emails will be converted into a matrix where the rows are the input emails and the columns are all the words contained in all the emails\u2019 bodies. Each entry eij of this matrix will represent the number of occurrences of each word wj in email mi. 3.3 Data Normalization and Preparation\nIn this step, we normalize and process the email text (the values of the words matrix) in order to improve the clustering results.\nSince the number of occurrences of a word in an email may not hold all the needed information for clustering, the built-in TF-IDF method [13] is used. TF short for term frequency and IDF, short for term inverse document frequency. TF-IDF is a numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus..\nIn our case, we want to summarize a text using the words it includes. One solution is to pick the most frequently occurring words. However, some meaningless words may occur frequently i.e have high term frequency TF value across all documents such as \"this\", \"a\". Hence, it is important to study how infrequently a word occurs across all documents. Therefore, the product of TF-IDF of a word gives a product of how frequent this word is in the document multiplied by how unique the word is w.r.t. the entire corpus of documents.\nIn our customized distance calculations through out our whole approach, we may include different attributes such as email subject, email body or timestamp. When we say \"customized\", we mean the method we follow to calculate the distance between documents. In other words, we mean the attributes that we include or the distance functions we use. Knowing that each attribute has its own data type (subject and body are both strings, timestamp is date and time), normalization is considered an important step in the preprocessing phase. We normalize data in a way that all values will be in [0,1] range (for the subject and body attributes). Although the body and the subject attributes are of the same data type, the number of words in the subject is much more smaller than that in the body of the emails. In order to account for texts of different lengths, each TF-IDf vector is normalized so that there is no more differece in the length of the processed texts.\nFor the timestamp attribute, we set the distances between the timestamps such that the distance is directly proportional to the time difference. In other words, as the duration between two emails increases, the dissimilarity value given will increase as well. This is intuitive, because two emails are less possible\nto be related if they are sent in very far timings which will be translated in the increase of the distance between two emails. The distance provided is also in the [0,1] interval.\nFigure 3 shows a sample of the body words matrix in which the values of the entries are the normalized TF-IDF of each word in each document.\nTF/IDF score may be not sufficient in order to distinguish the important words.Though we do not depend on the subject of the email to specify its process topic, for our application we consider that words appearing in emails subjects are in a way or another important, they give clues about the main topic of the body. For this reason, we form a set of terms obtained from the words appearing in all emails\u2019 subjects. We then traverse the body words matrix and multiply the entries of the words occurring in the obtained word set by a specific weight. The optimum weight is deduced through experimental sensitivity analysis."}, {"heading": "4 Phase 2 - Clustering emails belonging to the same process model", "text": "In this step, our objective is to group the emails into clusters according to their process topic. We can say that all emails in one cluster had been exchanged for achieving a specific goal. So the emails exchanges happening in one cluster between different entities aim for achieving specific activities that correspond to a process model (to be discovered). For example, if we fetch the emails of a researcher, we can see that there are multiple email sets for scheduling a meeting or for organizing a conference mission etc..\nThe input of this step is a set of emails taken from a specific user. The emails are acquired from the inbox and sent mails folders. We process the emails separately without having any knowledge about the threading relations between them. A thread starts with an original email which is followed by a sub-sequence of replies between peers allowing them to keep track of past conversations organized in chronological order. We deal with emails separately for three main reasons: (1) some email management systems do not collect emails in the form of threads (they do not support threading, an example on that is the thunderbird email\nmanagement system) ([4]) . (2) In the case where email management systems adopt threading, some threads may start with a specific topic(process) and drifts to another one in later emails. The drift may occur in the content of the message, while the subject is kept the same in the whole thread.(3) In addition, one process may span multiple threads. As an example of this, suppose a Ph.D student is sending a mission demand for attending a conference for an administrative approval. He/She may exchange emails with multiple parties in his/her research lab or from the conference organizers. For these reasons, we consider emails separately without having any knowledge about their relations with each other.\nIn order to group emails into different clusters, we use the hierarchical clustering technique. Firstly, we choose a clustering and not a classification method, for the reason that the former is an unsupervised learning method. In our case, we have no knowledge about the dataset to be processed. Although each email may have some meta-data attributes describing it, there will be no information about the class of each email. Thus, we cannot apply a classification method, as we do not have a labeled training set. This justifies our use of the clustering technique.\nClustering is the grouping or segmenting of a set of objects, in our case the emails, into subsets or clusters, in which objects in one cluster are more related to one another than those of different clusters. There are two major methods for clustering: K-means and hierarchical clustering. Relative to the goal of this step, we choose the hierarchical clustering, as k-means clustering would have the following disadvantages in this context:\n\u2022 K-means is extremely sensitive to cluster center initialization.\n\u2022 Bad initialization can lead to bad convergence and bad overall clustering.\n\u2022 K-means requires as input the number of clusters, while we have no information about the number of clusters we need to obtain.\nFor the above reasons, we choose to use an hierarchical clustering technique. More precisely, we use a \"bottom-up\" approach. Bottom-up algorithms treat each document as a singleton cluster. Agglomeratively, the clusters are fused together according to a specific similarity (dissimilarity) measure between them. At each stage, the two clusters that are the most similar are joined together. There are several ways to define the similarity between two clusters in hierarchical clustering: (i) Single Linkage: where the distance between two clusters is the minimum distance between all pairs of emails (e1,e2) such that e1 belongs to the first cluster and e2 belongs to the second cluster; (ii) Complete Linkage: that is the opposite of Single Linkage, in which the distance between two clusters will be the maximum distance between the pairs of the emails of these clusters; (iii) Average Linkage: in which the distance between two clusters is defined as the average of all distances between the pairs of emails of these clusters. Experimentally, we find out that the complete linkage hierarchical clustering gives us the best clustering results. The reason behind this may be the suitability to consider the largest distance between the emails in the pairs of clusters so we can avoid clustering unintended clusters.\nThe challenge here is formulating the distance function that best serves our goal. The quality of the clustering highly depends on the distance function used.\nThe distance function applied is as follows:\nDist(email1,email2)= w1.Eucl(subject1,subject2) +w2.Eucl(body1,body2)\nThe distance between two emails (two rows) is calculated by taking into consideration the subject and the body of the message. However, if we treat the subject and the body equally, messages of the same subject will all be grouped in one cluster. To avoid this situation and ensure that the subject attribute will not have a dominating effect on the distance value, we provide a higher weight to the body part of the distance function w2 >w1. The values of w1 and w2 are obtained using experimental sensitivity analysis.\nActually, our topic-oriented email clustering method highly focuses on the email\u2019s body rather than its subject. Our assumption is that in some cases, users may exchange emails in the same thread under the same subject phrase in which the content of the message drifts to another topic. The email subject may be confusing sometimes because the email content may not conform with it, while the message body always reflects the real goal behind sending the email. We conclude that in order to efficiently cluster emails according to their topic , we need focus on the message\u2019s body, i.e provide it a higher weight.\nWe apply the hierarchical clustering algorithm according to our customized distance function between the rows of the matrix obtained from the preprocessing phase including the subject of each email. The resulting clusters will contain all emails tackling a specific process model topic such as scheduling meeting or conference organization."}, {"heading": "5 Phase 3: Discovering the Process Model", "text": ""}, {"heading": "5.1 Finding the process instances", "text": "After grouping the emails into different clusters according to the process they belong to, the next step aims at discovering process instances. For example, if a cluster contains all the messages exchanged for professional trips organization, we want to group all the message dealing with a specific trip organization (participation at COOPIS\u201916 conference), that is a process instance or case where the general process topic is the participation in a conference.\nFor this aim, we use again hierarchical clustering as emails grouping technique for the same reasons as in section 4. The difference this time will be in the similarity formula. We calculate the distance between emails in one cluster by applying several combinations of attributes. We study the use of the combination of the three attributes subject, body and timestamp in the similarity estimation and their effects on the quality of process instances discovery. We make a comparison between sub-clustering quality when using the (i) body content, (ii) body and subject contents, or (iii) body, subject and timestamp contents in the distance measurement used for the hierarchical clustering algorithm.\nOur experimental analysis (see section 6) indicates the importance of time attribute in determining process instances rather than only considering the email content. We suppose that the emails belonging to the same process instance are likely to have relatively close timestamps."}, {"heading": "5.2 Clustering emails of the same activity", "text": "In the previous steps, we obtained clusters of emails related to different process models, partitioned into sub-clusters corresponding to process instances. In this step, we aim to discover the activity applied in each email. In other words, we want to apply activity recognition techniques to associate emails with activities. Obtaining activities is one step forward towards discovering the business process model followed in each cluster and useful in itself for different process oriented analysis questions (What are the most frequent activities? What are the most time-inefficient activities ?) We do that by applying the k-means clustering algorithm. In the following we will explain our approach for activity recognition in emails and we justify the choice of k-means.\nThe input of this step will be a cluster which contains a set of process instances related to the same topic say: \"meeting scheduling\" (an element of the set of clusters obtained in the first step). Although process instances in the same cluster are executed to achieve the same goal, different instances may include different number of emails. The reasons behind that may be the loops that can happen to achieve a specific activity in the process instance such as \"meeting proposal\" or \"meeting confirmation\" and alternative paths or optional activities executed only in some of the instances. K-means [7] requires as an input the number of clusters and its result may depend on the choice of the inital clusters. In the following we explain the customization of the k-means algorithm for our purpose. 5.2.1 Choosing the number of clusters\nThe k-means clustering algorithm is applied in order to obtain a cluster for each specific activity in the process model. As the number of activities in a process model is not known, we estimate this number based on the number of emails in the process instances. As instances of the same process model contains different number of activities (because of loops and alternative paths), we calculate the average number N of emails contained in the process instances.\nWe choose the intial value for the number of clusters, k, equal to the estimated average number of activities (k = N). If we choose k<N, we may have emails that belong to different activities that are grouped in one cluster, and if we choose k>N, we may have more than one cluster containing emails representing the same activity. (The maximum number of activities instances in process instances may be greater than the number of activity types because of loops). 5.2.2 Initializing the centroids\nDifferent intialization methods exist for assigning the initial centroids for the k-means algorithm. In our case, the clusters will represent activity types, and the algortihm should partition the activities instances of each process instances in these clusters. Thus, emails in each process instance have to be dispatched in the k clusters. For this reason, we choose a process instance containing a number of emails near the calculated average N to intialize the clusters. We then consider each email of this process instance as a centroid of a k-means cluster. 5.2.3 Defining the distance\nIn order to get an efficient clustering result, we need to ensure that the distance measurement serves our needs. Our goal is to collect emails from different instances (of the same clsuter/process model) into groups each representing a specific activity. That\u2019s why, it is not sufficient to use the subject and the body\nof the message. The difference here is that we are not only looking after the global similarity between emails. We need to go deep into the email\u2019s details and meaning to deduce the activity to be accomplished in it. The distance calculation formula takes into consideration the meanings similarity of the words present in subject and body. We use WordNet [16] to process the body term matrix in order to take into account synonyms. In future works, we plan to use the word2vec [10] which takes into consideration the linguistic contexts of words. Word2vec model [14] provides the vector representations of words which carry semantic meanings and can be used to more accurately estimate the similarity of subject bag of words. We should note that the time attribute will be excluded here as it has no effect on the clustering according to the activity. On another hand, the recipient of the message or the sender may be used for clustering, as activity types are usually assigned to the same role (for example, all the emails for booking tickets will have as a recipient the travel agent, while emails for booking rooms for meetings will be addressed to the administrative person in charge with it). 5.2.4 Applying k-means\nHaving defined the number of clusters and the distance measurement formula, we can apply the k-means clustering algorithm. The result of this step will be a set of groups, where each group contains a bunch of emails representing a specific activity. Emails in one group are sourced from different process instances. In some cases, we may have multiple mails that belong to the same process instance and are clustered in the same group. This indicates that multiple emails were exchanged to achieve the same activity. For instance, this may happen in the activity \"meeting proposal\" when the different parties do not agree on the same meeting date and time. So, several emails will be exchanged in this case to find the best timing that suits all parties. The k-means algorithm will be applied with different values for k, where k varies around the average value N obtained in the previous steps. The value of k is choosen to the one that corresponds to the the best quality of clustering (in terms of clustering quality criteria such as purity, F-measure, or Rand index) or can be indicating by user after clusters inspection."}, {"heading": "5.3 Labeling emails with activity names", "text": "In this step, we will explain how we label the activities i.e. how to give activity name to all emails in one group (group obtained by the k-means clustering in the previous step) with the help of the user. After the end of the k-means clustering phase, the user is asked to label the medoid of each cluster. The given label will be considered the activity name of all emails present in that group (emails that are originating from different process instances). We can exploit the fact that each set of emails is labeled by an activity name to solve the problem researchers face when applying classification techniques for speech act recognition. As mentioned before, it is not practical to manually label all emails in the training set as an input for the classification algorithm. So these labels can be used to train activity recognition classifiers. More precisely, we plan to use the 1-nearest neighbor classifier on the cluster centers obtained by k-means to classify new email into the existing clusters. The goal is to to predict for a new received email, the activity that it belongs to. We can exploit this to provide the user with recommendations about adding activities in his/her task list."}, {"heading": "5.4 Deducing the process model", "text": "Reaching this phase, each email is assigned to a cluster (with clusterID) where a cluster represents a process topic, and to a process instance (with instanceID) and labeled with an activity name. These data can be used as an input for any process mining technique to obtain the business process model. In the log we obtained, each activity should be accompanied by its corresponding event. However for the moment we have supposed that the event is \"complete\". The goal of workflow mining is to extract information about processes from the input log. User can apply different process mining algorithms. Multiple algorithms are mentioned in the survey of Van der Aalst et al.[17]. In Claes et al. [1] exposes the 5 most popular used process mining technique in ProM. The result of this step will be a process model for each cluster. This model will illustrate the process followed in the process instance (the email exchanges for achieving a specific goal)."}, {"heading": "6 Implementation and Use Case Study", "text": "In this section, we present the current status of the implementation of the approach, illustrated by a usecase about a Ph.D. student emails. The emails extracted from the professional mailbox concern mission demand applications (attending a conference or a summer school) or meeting scheduling between several entities (Ph.D student and the responsible people in the research lab or the supervisors).\nFigure 6 describes the steps of the process followed in an institution by a student who wants to apply for a conference mission or a summer school grant. The tasks are executed by email exchanges.\nWe implemented the steps of the approach described in Figures 1 and 2, that take as input an email logs and produces a process log to be used by a process mining algorithm as R scripts.\nWe start by choosing a folder of emails taken from a student\u2019s email system. These emails do not provide any information about the relation between them (the threading relation or \"In Reply to\" relation). Surely, the chosen set will include exchanged emails of different process topics. In other words, each bunch of emails in this set has been exchanged for applying a specific process in order to achieve an intended goal. Table 1. shows a screenshot of csv file containing the emails taken from the student\u2019s email log.\nThe table includes emails of different topics such as scheduling a meeting or mission demand application. As we\u2019ve mentioned before, these emails are treated individually without taking into consideration any information about their threading relations.\nPlease note that email 16 illustrates the problem of subject drifting in reply emails while the same subject title is preserved (that was discussed in section 4). This email has as subject title \"set a meeting\" while the content of the body is about the mission demand application discussed in emails 1 to 4.\nProcess topic clustering will be applied on this set of emails. The R statistical programming language was used to implement the clustering algorithm. R language facilitates it with the huge number of built-in functions that can be used. R includes functions for hierarchical clustering. However, we implemented our customized clustering method with our customized distance function. The function calculating the distance between the emails takes as an input the normalized body term matrix containing all the words of all emails as columns\nEmailID Sender Receiver Subject Timestamp Body 1 diana.jlailaty@gmail.com missionjc@dauphine.fr mission demand 2016-04-19 09:51:00 Please find enclosed my\nmission application for the Summer School to be held in Urrugne from 5 to 10 June 2016\n2 missionjc@dauphine.fr diana.jlailaty@gmail.com mission demand 2016-04-20 11:02:00 I note that you have not yet linked to the web page LAMSADE site.\nYour mission will be taken into account. Thank you to arrange and contact\nus again as soon as possible. 3 diana.jlailaty@gmail.com missionjc@dauphine.fr mission demand 2016-04-20 02:35:00 Thank you for considering my request.\nThis is the link to my web page LAMSADE: http://lamsade.dauphine.fr/ djlailaty/\nI am available for any further information. 4 missionjc@dauphine.fr diana.jlailaty@gmail.com mission demand 2016-04-20 03:08:00 Thank you Diana,\nThere is an error in the web address, add to that In early WWW find your page.\nMission signed the request is attached to this email. I invite you to visit the secretariat eleni with the mission request.\nYou have been granted the amount of 550 euros. 5 diana.jlailaty@gmail.com daniela.grigori@.dauphine.fr meeting 2016-03-29 10:34:00\nWhat time is the meeting today?\n6 kbelhajj@googlemail.com diana.jlailaty@gmail.com meeting 2016-03-29 10:42:000 Is it scheduled for 11am in Daniela office.\n7 diana.jlailaty@gmail.com daniela.grigori@dauphine.fr postpone the meeting 2016-03-29 10:47:00 Can the meeting today be on 2:00 pm instead of 1:30 pm? Because I want to attend phd defense and pot of my colleague. 8 daniela.grigori@dauphine.fr diana.jlailaty@gmail.com postpone the meeting 2016-03-29 10:52:00 For me, having the meeting in this time is Ok. 9 kbelhajj@googlemail.com diana.jlailaty@gmail.com postpone the meeting 2016-03-29 10:57:00\nIt is good for me also.\n10 diana.jlailaty@gmail.com daniela.grigori@dauphine.fr set a meeting 2016-05-03 14:22:00 When will be our next meeting? I am available the whole week. 13 diana.jlailaty@gmail.com daniela.grigori@dauphine.fr set a meeting 2016-05-03 14:22:00 When will be our next meeting? I am available the whole week. 14 daniela.grigori@dauphine.fr diana.jlailaty@gmail.com set a meeting 2016-05-03 14:50:00 I am available tomorrow for the meeting, wednesday and friday. 15 kbelhajj@googlemail.com daniela.grigori@dauphine.fr set a meeting 2016-05-03 16:43:00 Is the meeting tomorrow 10h good for both of you?\n16 kbelhajj@googlemail.com diana.jlailaty@gmail.com set a meeting 2016-04-22 17:50:00 What have you done with the mission application? Did you visit the secretariat Eleni for that? You should do this as soon as possible. 20 diana.jlailaty@gmail.com missionjc@dauphine.fr mission demand 2016-06-25 10:35:00 Please find attached my mission demand to grenoble conference and summer school. 21 missionjc@dauphine.fr diana.jlailaty@gmail.com mission demand 2016-06-26 11:20:00 Your mission will be taken into account.\nBut before we confirm this, you need to specify the detailed costs.\nThank you to arrange and contact us again as soon as possible.\n22 diana.jlailaty@gmail.com missionjc@dauphine.fr mission demand 2016-06-27 14:05:00 Thank you for considering my demand. Please find attached the detailed cost of my trip. 23 missionjc@dauphine.fr diana.jlailaty@gmail.com mission demand 22016-06-28 15:01:00 Mission signed the request is attached to this email. I invite you to visit the secretariat eleni\nwith the mission request. You have been granted the amount of 600 euros.\nTable 1: Randomly chosen emails from student\u2019s emails log\nheaders and the email numbers as rows (emails are cleansed, matrix is normalized and processed as explained in section 3.3). The function will then estimate the dissimilarity between two rows (two emails) and apply the hierarchical clustering accordingly. As mentioned in previous sections, the distance obtained for this clustering step focuses mainly on the email body text as we assume that it will hold all the information needed for collecting emails of the same process topic. Figure 4 shows how emails of the same topic are clustered together after hierarchically clustering the emails using our customized distance function.\nCluster C2 includes all emails with the context revolving around meeting scheduling. We can see that emails 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 and 15 which all talk about meetings are clustered in one cluster. However, emails 1,2,3,4, and 16 which context is about a mission demand application are clustered together. We should realize that email 16 in fact belongs to a different different subject title than that of 1, 2, 3, and 4 but grouped in the same cluster. This indicates that our clustering algorithm mainly focuses on the message\u2019s content rather than other attributes.\nAfter grouping emails according to their process model topic in a separate cluster, we will try now to find the process instances contained in each cluster. Again, we implemented an R function for hierarchical clustering. This time, we apply the clustering by trying three different distance functions with three\ndifferent combinations of attributes. We cluster emails according to the email body, then according to the body and subject and at the end according to the body, subject and timestamp of each email. Each cluster obtained in the previous step will be input separately in this step. Let\u2019s consider cluster C2 focusing on meeting scheduling. Figure 5 (a,b and c) shows us the results for the three types of clustering functions.\nIf we go back to Table 1, we can see that emails from 5 to 15 can be divided into threads as following: (5,6), (7,8,9), (10,11,12), and (13,14,15). We realize that these threads are obtained as process instances in the second step. Figure 5 (c). It is obvious (from Figure 5 (b) ) how the clustering quality improves when we add the subject attribute (as the subject attribute gives good indication about the threading relation between emails regardless of some exceptions which we already tackled in the previous step). Nevertheless, the clustering quality improves more when we add the timestamp attribute which we claim that gives a good indication emails related to the same thread (emails in the same thread are likely to be sent in specific period of time). The same case happens for the process instances (1,2,3,4,16) and (20,21,21,23) in which each instance is considered for a separate mission demand.\nWe then work on collecting emails related to the same activity in one cluster. Again let us consider cluster C3 in Figure 4.\n1. Calculate the average number of emails in the instances of cluster C3. We get N is approximately equal to 4.\n2. Choose an instance I containing 4 emails (user can help in choosing the instance). Let I=(20,21,22,23).\n3. Initialize k=4 and the centroids of the clusters to each email in the chosen process instance I.\n4. Apply the k-means clustering algorithm on all the emails in the cluster. The results will be as follows: clusters c1 =1,20, c2=2,21, c3=3,22, c4=4,23,16.\n5. We then ask the user to provide a label for each of the clusters. This provided label will be considered the activity or the task name of each of the\nemails contained in the labeled cluster. In our example, the user will label c1 (submit demand), c2 (request information), c3 (respond information), c4(accept demand or refuse demand).\n6. In the next step, the log is enriched with activity names and given as input to an existing process mining tool. The resulting process oriented log can be used to analyse the underlying process in order to understand inefficient aspects and suggest improvements. For instance, we can discover that the loop in figure 6 between student and responsible is executed many times because some information is missing in student application. The process could be improved by providing the student with a standard form."}, {"heading": "7 Related Work", "text": "Until recently, there exist few works which combines the concepts of email analysis, activity recognition and business process discovery. Similar to our work, the approach in Mavaddat et al. [9] has been suggested to classify emails into business and non business oriented categories. The business-oriented emails are then grouped into threads using the similarity measurement to deduce process instances, from which the process model can be obtained fianlly. The authors suggest some preliminary ideas for labeling interactions between roles in process instances by using the classification of illocutionary speech acts assertive, directive, commissive, expressive, declarations suggested by Searl et al. [15].\nThe approach applied by Khoussainov et al. [8] exploits the relational structure between two problems: (i) extracting speech acts, (ii) finding related emails. Instead of attacking them separately, in their synergistic iterative approach, relations identification is used to assist semantic analysis, and vice versa.\nSmartMail in Corston-Oliver et al. [3] identifies action items(tasks) in email messages. It produces summary for each email which can be added by the user to his/her \"to-do\" list. In their approach, they need human annotators to provide tags to the training data set. Despite the extensive studies of speech act recognition in many areas, developing\nspeech act recognition for emails is very challenging. A major challenge is that emails usually have no labeled data for training statistical speech acts recognizers.\nThe work in Jeong et al. [6] focuses on the problem of how to accurately recognize speech acts in emails by making maximum use of data from existing resources. They contribute in learning speech acts in a semi-supervised way by making use of some labeled data from spoken conversations. In their work, subtree features are exploited by using a subtree pattern mining. More precisely, they consider the text as a forest containing multiple trees. Each tree represents the relationships between several words (parent-child relationship). Dependency subtrees (speech acts) are then extracted from the trees forest. This is done by calling the models trained on data from existing external corpora and making use of it to extract the speech acts from the available emails.\nOn the other hand, there exist several works that uses fully supervised classification techniques in extracting speech acts. As an example, the authors of Qadir et al. [12] aim to create sentence classifiers that can identify whether a sentence contains a speech act and can recognize sentences containing four different speech act classes: Commissive, Directive, Expressive, and Representative. They train classifiers to identify speech acts sentences using a variety of lexical, syntactic, and semantic features. The lexical and syntactic features are domain-independent while the syntactic feature is domain-dependent. To create their classifiers, they use the Weka [5] machine learning toolkit. They used Support Vector Machines (SVMs) with a polynomial kernel and the default settings supplied by Weka.\nThe authors of [2] used text classification methods to detect \u201cemail speech acts\u201d. Based on the ideas from Speech Act Theory [15] and guided by analysis of several email corpora, they defined a set of \u201cemail acts\u201d (e.g., Request, Deliver, Propose, Commit) and then classified emails as containing or not a specific act. They showed that machine learning algorithms can learn the proposed email-act categories reasonably well. It was also shown that there is an acceptable level of human agreement over the categories.\nAnother category of works deal with the problem of conversation detection in email systems (see for exemple [4]). While conversation detection is closed to the problem of process instance discovery, they are also different: a conversation is defined as taking place among the same group of people, while a process instance involves different persons, each one having a limited view on the overall set of exchanged emails (i.e., the travel agent only books the tickets, is not implied in the other exchanges).\nIn Aalst et al. [11], the authors develop the tool EmailAnalyzer which analyzes and transforms email messages in MS Outlook to a format that can be used by process mining tools. After a pre-porcessing step that disambiguates the receiver names and removes irrelevant messages,the e-mail log can be used to perform social network analysis (Sociograms and Messages Frequency Charts) and to generate the process log. In order to translate e-mail logs into process logs, the tool requires that the message\u2019s subject contains tags representing the names of the case and of the activity. Contrary to this work that assumes that the task name is included into the message subject, our approach aims at discovering activity names and instances related to each message.\nTo conclude, we can see that many works addressed the problem of email classification, email speech act labeling, but only a few works combine the con-\ncepts of email analysis, activity recognition and business process discovery. In email labels extraction in the related works, classification is used and classifiers are trained with a manually trained dataset (emails). In our work, we automatically obtain a labeled data set for future classification (for assigning activity names to incoming mails) by making use of the labeled clusters containing related set of emails. Regarding the grouping of emails into clusters of similar topics, contrary to other approaches that mostly use classification or k-means, hierarchical clustering is used in our approach as we suppose that we have no knowledge about the number of process topics tackled in the dataset. Compared to the work that is most similar to ours [11], the approach presented in this paper leverages unsupervised machine learning techniques with little human involvement, while EmailAnalyzer supposes that the task name is included in the message subject."}, {"heading": "8 Conclusion", "text": "In this paper we proposed a framework for mining the process models underlying a log of emails. The approach is able to deal with emails exhanged in different process models. Hierarchical and k-means clustering algorithms are used to cluster emails according to the topic, then according to the process instance they belong to and finally for email activity labeling. We demonstrated a usecase that proves the usefulness of the proposed solution using logs containing emails of two different process topics: meeting scheduling and requests for conference travel grants.\nIn the future work, we plan to implement the activity recognition phase, using the clusters we obtained. We will also investigate how speech act approaches can help in more precisely defining the activity event associated to an email and activity loops. Moreover, we will extend the framework by integrating emails not only from one entity (in this paper, we considered as an example a Ph.D student), but also from several entities to cope with the whole process model (activities executed by all the parties).\nWe will also test the efficiency and the quality of or approach on a larger dataset. Fianlly, we will implement the recommendation system for incoming emails to recommend activities that can be added to the user\u2019s to-do list."}], "references": [{"title": "Process mining and the prom framework: An exploratory survey", "author": ["Jan Claes", "Geert Poels"], "venue": "In Business Process Management Workshops - BPM 2012 International Workshops, Tallinn, Estonia, September", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Learning to classify email into speech acts", "author": ["William W. Cohen", "Vitor R. Carvalho", "Tom M. Mitchell"], "venue": "Proceedings of Empirical Methods in Natural Language Processing,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2004}, {"title": "Task-focused summarization of email", "author": ["Simon Corston-oliver", "Eric Ringger", "Michael Gamon", "Richard Campbell"], "venue": "In IN PROCEEDINGS OF THE TEXT SUMMARIZATION BRANCHES OUT ACL WORKSHOP,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2004}, {"title": "Conversation detection in email systems. In Advances in Information Retrieval", "author": ["Shai Erera", "David Carmel"], "venue": "European Conference on IR 17  Research,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2008}, {"title": "The WEKA data mining software: an update", "author": ["Mark A. Hall", "Eibe Frank", "Geoffrey Holmes", "Bernhard Pfahringer", "Peter Reutemann", "Ian H. Witten"], "venue": "SIGKDD Explorations,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2009}, {"title": "Semi-supervised speech act recognition in emails and forums", "author": ["Minwoo Jeong", "Chin-Yew Lin", "Gary Geunbae Lee"], "venue": "In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2009}, {"title": "An efficient k-means clustering algorithm: Analysis and implementation", "author": ["Tapas Kanungo", "David M. Mount", "Nathan S. Netanyahu", "Christine D. Piatko", "Ruth Silverman", "Angela Y. Wu"], "venue": "IEEE Trans. Pattern Anal. Mach. Intell.,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2002}, {"title": "Email task management: An iterative relational learning approach", "author": ["Rinat Khoussainov", "Nicholas Kushmerick"], "venue": "In CEAS 2005 - Second Conference on Email and Anti-Spam,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2005}, {"title": "Efficient estimation of word representations in vector space", "author": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean"], "venue": "CoRR, abs/1301.3781,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2013}, {"title": "EMailAnalyzer: An E-Mail Mining Plug-in for the ProM Framework", "author": ["Andriy Nikolov", "Wil M.P. van der Aalst"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2007}, {"title": "Classifying sentences as speech acts in message board posts", "author": ["Ashequl Qadir", "Ellen Riloff"], "venue": "In Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2011}, {"title": "Using tf-idf to determine word relevance in document queries", "author": ["Juan Ramos"], "venue": "In Proceedings of the first instructional conference on machine learning,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2003}, {"title": "word2vec parameter learning explained", "author": ["Xin Rong"], "venue": "CoRR, abs/1411.2738,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2014}, {"title": "A taxonomy of illocutionary acts", "author": ["John R. Searle"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1975}, {"title": "Workflow mining: Discovering process models from event logs", "author": ["Wil M.P. van der Aalst", "Ton Weijters", "Laura Maruster"], "venue": "IEEE Trans. Knowl. Data Eng.,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2004}], "referenceMentions": [{"referenceID": 9, "context": "[11] developed EmailAnalyzer, a tools for transforming email messages in MS Outlook into a format that can be used by process mining tools.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "Many approaches propose to label emails with speech acts (see for example, [8]).", "startOffset": 75, "endOffset": 78}, {"referenceID": 9, "context": "For example, the work by [11] assumes that the email message subject includes the activity name.", "startOffset": 25, "endOffset": 29}, {"referenceID": 14, "context": "See [17] for a survey on such techniques.", "startOffset": 4, "endOffset": 8}, {"referenceID": 11, "context": "Since the number of occurrences of a word in an email may not hold all the needed information for clustering, the built-in TF-IDF method [13] is used.", "startOffset": 137, "endOffset": 141}, {"referenceID": 0, "context": "We normalize data in a way that all values will be in [0,1] range (for the subject and body attributes).", "startOffset": 54, "endOffset": 59}, {"referenceID": 0, "context": "The distance provided is also in the [0,1] interval.", "startOffset": 37, "endOffset": 42}, {"referenceID": 3, "context": "management system) ([4]) .", "startOffset": 20, "endOffset": 23}, {"referenceID": 6, "context": "K-means [7] requires as an input the number of clusters and its result may depend on the choice of the inital clusters.", "startOffset": 8, "endOffset": 11}, {"referenceID": 8, "context": "In future works, we plan to use the word2vec [10] which takes into consideration the linguistic contexts of words.", "startOffset": 45, "endOffset": 49}, {"referenceID": 12, "context": "Word2vec model [14] provides the vector representations of words which carry semantic meanings and can be used to more accurately estimate the similarity of subject bag of words.", "startOffset": 15, "endOffset": 19}, {"referenceID": 14, "context": "[17].", "startOffset": 0, "endOffset": 4}, {"referenceID": 0, "context": "[1] exposes the 5 most popular used process mining technique in ProM.", "startOffset": 0, "endOffset": 3}, {"referenceID": 13, "context": "[15].", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "[8] exploits the relational structure between two problems: (i) extracting speech acts, (ii) finding related emails.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "[3] identifies action items(tasks) in email messages.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[6] focuses on the problem of how to accurately recognize speech acts in emails by making maximum use of data from existing resources.", "startOffset": 0, "endOffset": 3}, {"referenceID": 10, "context": "[12] aim to create sentence classifiers that can identify whether a sentence contains a speech act and can recognize sentences containing four different speech act classes: Commissive, Directive, Expressive, and Representative.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "To create their classifiers, they use the Weka [5] machine learning toolkit.", "startOffset": 47, "endOffset": 50}, {"referenceID": 1, "context": "The authors of [2] used text classification methods to detect \u201cemail speech acts\u201d.", "startOffset": 15, "endOffset": 18}, {"referenceID": 13, "context": "Based on the ideas from Speech Act Theory [15] and guided by analysis of several email corpora, they defined a set of \u201cemail acts\u201d (e.", "startOffset": 42, "endOffset": 46}, {"referenceID": 3, "context": "Another category of works deal with the problem of conversation detection in email systems (see for exemple [4]).", "startOffset": 108, "endOffset": 111}, {"referenceID": 9, "context": "[11], the authors develop the tool EmailAnalyzer which analyzes and transforms email messages in MS Outlook to a format that can be used by process mining tools.", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "Compared to the work that is most similar to ours [11], the approach presented in this paper leverages unsupervised machine learning techniques with little human involvement, while EmailAnalyzer supposes that the task name is included in the message subject.", "startOffset": 50, "endOffset": 54}], "year": 2016, "abstractText": "Due to its wide use in personal, but most importantly, professional contexts, email represents a valuable source of information that can be harvested for understanding, reengineering and repurposing undocumented business processes of companies and institutions. Towards this aim, a few researchers investigated the problem of extracting process oriented information from email logs in order to take benefit of the many available process mining techniques and tools. In this paper we go further in this direction, by proposing a new method for mining process models from email logs that leverage unsupervised machine learning techniques with little human involvement. Moreover, our method allows to semiautomatically label emails with activity names, that can be used for activity recognition in new incoming emails. A use case demonstrates the usefulness of the proposed solution using a modest in size, yet real-world, dataset containing emails that belong to two different process models.", "creator": "LaTeX with hyperref package"}}}