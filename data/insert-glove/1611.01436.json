{"id": "1611.01436", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Nov-2016", "title": "Learning Recurrent Span Representations for Extractive Question Answering", "abstract": "The reading polos comprehension task, atg that asks questions about expiate a wonderkid given evidence trelawney document, theosophy is windstrup a central problem in natural standen language understanding. 1830gmt Recent corregidor formulations of mainichi this task validates have 24,200 typically mugging focused 29.28 on corsair answer selection juneja from mutiny a set reseach of cr\u00e9teil-lusitanos candidates 63.6 pre - 52.80 defined halcombe manually weilacker or through extraleague the son use inayatullah of an external NLP camper pipeline. However, destablising Rajpurkar andang et al. (omega-3s 2016) recently poit released baycorp the SQuAD oberhausen dataset capacitive in boutsikaris which thorne the latsis answers can hunniford be emporis arbitrary tortora strings 50-minute from 27.51 the djokovic supplied luria text. landin In aryee this morlin paper, steeliness we alphonse focus 90.1 on this answer toluca extraction safea task, pledis presenting samarium a novel model architecture that nubira efficiently builds elevens fixed length representations of homologue all spans in ris the evidence timb document snaking with bannack a sainte-marie recurrent okereke network. We show 12.88 that youssou scoring 8.14 explicit span representations significantly wasikowska improves performance breda over steep-walled other approaches sapiro that uzbekstan factor the prediction tsaldaris into separate predictions pike about words or start and ruairi end 20-25 markers. turbocharged Our approach improves upon the best rupkey published results pezzotta of excelcomindo Wang & 250,000-member amp; stratosphere Jiang (2016) by 5% sportswomen and decreases the abridgement error semi-permeable of 1975-1998 Rajpurkar project-40 et ceesay al. ' t.e. s bledar baseline loudwire by & gt; 50%.", "histories": [["v1", "Fri, 4 Nov 2016 16:12:46 GMT  (132kb,D)", "http://arxiv.org/abs/1611.01436v1", null], ["v2", "Fri, 17 Mar 2017 18:11:12 GMT  (131kb,D)", "http://arxiv.org/abs/1611.01436v2", null]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["kenton lee", "shimi salant", "tom kwiatkowski", "ankur parikh", "dipanjan das", "jonathan berant"], "accepted": false, "id": "1611.01436"}, "pdf": {"name": "1611.01436.pdf", "metadata": {"source": "CRF", "title": "EXTRACTIVE QUESTION ANSWERING", "authors": ["Kenton Lee", "Tom Kwiatkowski", "Ankur Parikh", "Dipanjan Das"], "emails": ["kentonl@cs.washington.edu", "dipanjand}@google.com"], "sections": [{"heading": "1 INTRODUCTION", "text": "A primary goal of natural language processing is to develop systems that can answer questions about the contents of documents. The reading comprehension task is of practical interest \u2013 we want computers to be able to read the world\u2019s text and then answer our questions \u2013 and, since we believe it requires deep language understanding, it has also become a flagship task in NLP research.\nA number of reading comprehension datasets have been developed that focus on answer selection from a small set of alternatives defined by annotators (Richardson et al., 2013) or existing NLP pipelines that cannot be trained end-to-end (Hill et al., 2016; Hermann et al., 2015). Subsequently, the models proposed for this task have tended to make use of the limited set of candidates, basing their predictions on mention-level attention weights (Hermann et al., 2015), or centering classifiers (Chen et al., 2016), or network memories (Hill et al., 2016) on candidate locations.\nRecently, Rajpurkar et al. (2016) released the less restricted SQUAD dataset1 that does not place any constraints on the set of allowed answers, other than that they should be drawn from the evidence document. Rajpurkar et al. proposed a baseline system that chooses answers from the constituents identified by an existing syntactic parser. This allows them to prune the O(N2) answer candidates in each document of length N , but it also effectively renders 20.7% of all questions unanswerable.\nSubsequent work by Wang & Jiang (2016) significantly improve upon this baseline by using an endto-end neural network architecture to identify answer spans by labeling either individual words, or the start and end of the answer span. Both of these methods do not make independence assumptions about substructures, but they are susceptible to search errors due to greedy training and decoding.\nIn contrast, here we argue that it is beneficial to simplify the decoding procedure by enumerating all possible answer spans. By explicitly representing each answer span, our model can be globally normalized during training and decoded exactly during evaluation. A naive approach to building the O(N2) spans of up to length N would require a network that is cubic in size with respect\n\u2217Work completed during internship at Google, New York. 1http://stanford-qa.com\nar X\niv :1\n61 1.\n01 43\n6v 1\n[ cs\n.C L\n] 4\nN ov\n2 01\n6\nto the passage length, and such a network would be untrainable. To overcome this, we present a novel neural architecture called RASOR that builds fixed-length span representations, reusing recurrent computations for shared substructures. We demonstrate that directly classifying each of the competing spans, and training with global normalization over all possible spans, leads to a significant increase in performance. In our experiments, we show an increase in performance over Wang & Jiang (2016) of 5% in terms of exact match to a reference answer, and 3.6% in terms of predicted answer F1 with respect to the reference. On both of these metrics, we close the gap between Rajpurkar et al.\u2019s baseline and the human-performance upper-bound by > 50%."}, {"heading": "2 EXTRACTIVE QUESTION ANSWERING", "text": ""}, {"heading": "2.1 TASK DEFINITION", "text": "Extractive question answering systems take as input a question q = {q0, . . . , qn} and a passage of text p = {p0, . . . , pm} from which they predict a single answer span a = \u3008astart , aend\u3009, represented as a pair of indices into p. Machine learned extractive question answering systems, such as the one presented here, learn a predictor function f(q,p)\u2192 a from a training dataset of \u3008q,p,a\u3009 triples."}, {"heading": "2.2 RELATED WORK", "text": "For the SQUAD dataset, the original paper from Rajpurkar et al. (2016) implemented a linear model with sparse features based on n-grams and part-of-speech tags present in the question and the candidate answer. Other than lexical features, they also used syntactic information in the form of dependency paths to extract more general features. They set a strong baseline for following work and also presented an in depth analysis, showing that lexical and syntactic features contribute most strongly to their model\u2019s performance. Subsequent work by Wang & Jiang (2016) use an end-to-end neural network method that uses a Match-LSTM to model the question and the passage, and uses pointer networks (Vinyals et al., 2015) to extract the answer span from the passage. This model resorts to greedy decoding and falls short in terms of performance compared to our model (see Section 5 for more detail). While we only compare to published baselines, there are other unpublished competitive systems on the SQUAD leaderboard, as listed in footnote 5.\nA task that is closely related to extractive question answering is the Cloze task (Taylor, 1953), in which the goal is to predict a concealed span from a declarative sentence given a passage of supporting text. Recently, Hermann et al. (2015) presented a Cloze dataset in which the task is to predict the correct entity in an incomplete sentence given an abstractive summary of a news article. Hermann et al. also present various neural architectures to solve the problem. Although this dataset is large and varied in domain, recent analysis by Chen et al. (2016) shows that simple models can achieve close to the human upper bound. As noted by the authors of the SQUAD paper, the annotated answers in the SQUAD dataset are often spans that include non-entities and can be longer phrases, unlike the Cloze datasets, thus making the task more challenging.\nAnother, more traditional line of work has focused on extractive question answering on sentences, where the task is to extract a sentence from a document, given a question. Relevant datasets include datasets from the annual TREC evaluations (Voorhees & Tice, 2000) and WikiQA (Yang et al., 2015), where the latter dataset specifically focused on Wikipedia passages. There has been a line of interesting recent publications using neural architectures, focused on this variety of extractive question answering (Tymoshenko et al., 2016; Wang et al., 2016, inter alia). These methods model the question and a candidate answer sentence, but do not focus on possible candidate answer spans that may contain the answer to the given question. In this work, we focus on the more challenging problem of extracting the precise answer span."}, {"heading": "3 MODEL", "text": "We propose a model architecture called RASOR2 illustrated in Figure 1, that explicitly computes embedding representations for candidate answer spans. In most structured prediction problems (e.g. sequence labeling or parsing), the number of possible output structures is exponential in the input\n2An abbreviation for Recurrent Span Representations, pronounced as razor.\nlength, and computing representations for every candidate is prohibitively expensive. However, we exploit the simplicity of our task, where we can trivially and tractably enumerate all candidates. This facilitates an expressive model that computes joint representations of every answer span, that can be globally normalized during learning.\nIn order to compute these span representations, we must aggregate information from the passage and the question for every answer candidate. For the example in Figure 1, RASOR computes an embedding for the candidate answer spans: fixed to, fixed to the, to the, etc. A naive approach for these aggregations would require a network that is cubic in size with respect to the passage length. Instead, our model reduces this to a quadratic size by reusing recurrent computations for shared substructures (i.e. common passage words) from different spans.\nSince the choice of answer span depends on the original question, we must incorporate this information into the computation of the span representation. We model this by augmenting the passage word embeddings with additional embedding representations of the question.\nIn this section, we motivate and describe the architecture for RASOR in a top-down manner."}, {"heading": "3.1 SCORING ANSWER SPANS", "text": "The goal of our extractive question answering system is to predict the single best answer span among all candidates from the passage p, denoted as A(p). Therefore, we define a probability distribution over all possible answer spans given the question q and passage p, and the predictor function finds the answer span with the maximum likelihood:\nf(q,p) := argmax a\u2208A(p)\nP (a | q,p) (1)\nOne might be tempted to introduce independence assumptions that would enable cheaper decoding. For example, this distribution can be modeled as (1) a product of conditionally independent distributions (binary) for every word or (2) a product of conditionally independent distributions (over words) for the start and end indices of the answer span. However, we show in Section 5.2 that such independence assumptions hurt the accuracy of the model, and instead we only assume a fixed-length representation ha of each candidate span that is scored and normalized with a softmax layer (Span score and Softmax in Figure 1):\nsa = wa \u00b7 FFNN(ha) a \u2208 A(p) (2)\nP (a | q,p) = exp(sa)\u2211 a\u2032\u2208A(p) exp(sa\u2032)\na \u2208 A(p) (3)\nwhere FFNN(\u00b7) denotes a fully connected feed-forward neural network that provides a non-linear mapping of its input embedding."}, {"heading": "3.2 RASOR: RECURRENT SPAN REPRESENTATION", "text": "The previously defined probability distribution depends on the answer span representations, ha. When computing ha, we assume access to representations of individual passage words that have been augmented with a representation of the question. We denote these question-focused passage word embeddings as {p\u22171, . . . , p\u2217m} and describe their creation in Section 3.3. In order to reuse computation for shared substructures, we use a bidirectional LSTM (Hochreiter & Schmidhuber, 1997) to encode the left and right context of every p\u2217i (Passage-level BiLSTM in Figure 1). This allows us to simply concatenate the bidirectional LSTM (BiLSTM) outputs at the endpoints of a span to jointly encode its inside and outside information (Span embedding in Figure 1):\n{p\u2217\u20321 , . . . , p\u2217\u2032m} = BILSTM({p\u22171, . . . , p\u2217m}) (4)\nha = [p \u2217\u2032 astart , p \u2217\u2032 aend ] \u3008astart , aend\u3009 \u2208 A(p) (5)\nwhere BILSTM(\u00b7) denotes a BiLSTM over its input embedding sequence and p\u2217\u2032i is the concatenation of forward and backward outputs at time-step i. While the visualization in Figure 1 shows a single layer BiLSTM for simplicity, we use a multi-layer BiLSTM in our experiments. The concatenated output of each layer is used as input for the subsequent layer, allowing the upper layers to depend on the entire passage."}, {"heading": "3.3 QUESTION-FOCUSED PASSAGE WORD EMBEDDING", "text": "Computing the question-focused passage word embeddings {p\u22171, . . . , p\u2217m} requires integrating question information into the passage. The architecture for this integration is flexible and likely depends on the nature of the dataset. For the SQUAD dataset, we find that both passage-aligned and passageindependent question representations are effective at incorporating this contextual information, and experiments will show that their benefits are complementary. To incorporate these question representations, we simply concatenate them with the passage word embeddings (Question-focused passage word embedding in Figure 1).\nWe use fixed pretrained embeddings to represent question and passage words. Therefore, in the following discussion, notation for the words are interchangeable with their embedding representations.\nQuestion-independent passage word embedding The first component simply looks up the pretrained word embedding for the passage word, pi.\nPassage-aligned question representation In this dataset, the question-passage pairs often contain large lexical overlap or similarity near the correct answer span. To encourage the model to exploit these similarities, we include a fixed-length representation of the question based on soft-alignments with the passage word. The alignments are computed via neural attention (Bahdanau et al., 2014), and we use the variant proposed by Parikh et al. (2016), where attention scores are dot products between non-linear mappings of word embeddings.\nsij = FFNN(pi) \u00b7 FFNN(qj) 1 \u2264 j \u2264 n (6) aij = exp(sij)\u2211n k=1 exp(sik) 1 \u2264 j \u2264 n (7)\nqaligni = n\u2211 j=1 aijqj (8)\nPassage-independent question representation We also include a representation of the question that does not depend on the passage and is shared for all passage words.\nSimilar to the previous question representation, an attention score is computed via a dot-product, except the question word is compared to a universal learned embedding rather any particular passage word. Additionally, we incorporate contextual information with a BiLSTM before aggregating the outputs using this attention mechanism.\nThe goal is to generate a coarse-grained summary of the question that depends on word order. Formally, the passage-independent question representation qindep is computed as follows:\n{q\u20321, . . . , q\u2032n} = BILSTM(q) (9) sj = wq \u00b7 FFNN(q\u2032j) 1 \u2264 j \u2264 n (10)\naj = exp(sj)\u2211n k=1 exp(sk)\n1 \u2264 j \u2264 n (11)\nqindep = n\u2211 j=1 ajq \u2032 j (12)\nThis representation is a bidirectional generalization of the question representation recently proposed by Li et al. (2016) for a different question-answering task.\nGiven the above three components, the complete question-focused passage word embedding for pi is their concatenation: p\u2217i = [pi, q align i , q indep]."}, {"heading": "3.4 LEARNING", "text": "Given the above model specification, learning is straightforward. We simply maximize the loglikelihood of the correct answer candidates and backpropagate the errors end-to-end."}, {"heading": "4 EXPERIMENTAL SETUP", "text": "We represent each of the words in the question and document using 300 dimensional GloVe embeddings trained on a corpus of 840bn words (Pennington et al., 2014). These embeddings cover 200k words and all out of vocabulary (OOV) words are projected onto one of 1m randomly initialized 300d embeddings. We couple the input and forget gates in our LSTMs, as described in Greff et al. (2016), and we use a single dropout mask to apply dropout across all LSTM time-steps as proposed by Gal & Ghahramani (2016). Hidden layers in the feed forward neural networks use rectified linear units (Nair & Hinton, 2010). Answer candidates are limited to spans with at most 30 words.\nTo choose the final model configuration, we ran grid searches over: the dimensionality of the LSTM hidden states; the width and depth of the feed forward neural networks; dropout for the LSTMs; the number of stacked LSTM layers (1, 2, 3); and the decay multiplier [0.9, 0.95, 1.0] with which we multiply the learning rate every 10k steps. The best model uses 50d LSTM states; two-layer BiLSTMs for the span encoder and the passage-independent question representation; dropout of 0.1 throughout; and a learning rate decay of 5% every 10k steps.\nAll models are implemented using TensorFlow3 and trained on the SQUAD training set using the ADAM (Kingma & Ba, 2015) optimizer with a mini-batch size of 4 and trained using 10 asynchronous training threads on a single machine.\n3www.tensorflow.org"}, {"heading": "5 RESULTS", "text": "We train on the 80k (question, passage, answer span) triples in the SQUAD training set and report results on the 10k examples in the SQUAD development set. Due to copyright restrictions, we are currently not able to upload our models to Codalab4, which is required to run on the blind SQUAD test set, but we are working with Rajpurkar et al. to remedy this, and this paper will be updated with test numbers as soon as possible.\nAll results are calculated using the official SQUAD evaluation script, which reports exact answer match and F1 overlap of the unigrams between the predicted answer and the closest labeled answer from the 3 reference answers given in the SQUAD development set."}, {"heading": "5.1 COMPARISONS TO OTHER WORK", "text": "Our model with recurrent span representations (RASOR) is compared to all previously published systems 5. Rajpurkar et al. (2016) published a logistic regression baseline as well as human performance on the SQUAD task. The logistic regression baseline uses the output of an existing syntactic parser both as a constraint on the set of allowed answer spans, and as a method of creating sparse features for an answer-centric scoring model. Despite not having access to any external representation of linguistic structure, RASOR achieves an error reduction of more than 50% over this baseline, both in terms of exact match and F1, relative to the human performance upper bound.\nMore closely related to RASOR is the boundary model with Match-LSTMs and Pointer Networks by Wang & Jiang (2016). Their model similarly uses recurrent networks to learn embeddings of each passage word in the context of the question, and it can also capture interactions between endpoints, since the end index probability distribution is conditioned on the start index. However, both training and evaluation are greedy, making their system susceptible to search errors when decoding. In contrast, RASOR can efficiently and explicitly model the quadratic number of possible answers, which leads to a 14% error reduction over the best performing Match-LSTM model.\nWe also ensemble RASOR with a baseline model described in Section 5.2 that independently predicts endpoints rather than spans (Endpoints prediction in Table 2b). By simply computing the product of the output probabilities, this ensemble further increases performance to 68.2% exact-match. We examine the causes of this improvement in Section 6.\nSince we do not have access to the test set, we also present 5-fold cross validation experiments to demonstrate that our dev-set results are not an outcome of overfitting through hyper-parameter selection. In this 5-fold setting, we create 5 pseudo dev/test splits from the SQUAD development set.6 We choose hyper-parameters on the basis of the pseudo dev set, and report performance on the disjoint pseudo test set. Each of the pseudo dev sets led us to choose the same optimal model\n4http://stanford-qa.com 5As of submission, other unpublished systems are shown on the SQUAD leaderboard, including MatchLSTM with Ans-Ptr (Boundary+Ensemble), Co-attention, r-net, Match-LSTM with Bi-Ans-Ptr (Boundary), Coattention old, Dynamic Chunk Reader, Dynamic Chunk Ranker with Convolution layer, Attentive Chunker.\n6We split by Wikipedia page ID and use 4 5 as a development set and 1 5 as a test set.\nhyper-parameters from a grid of 59 settings, as well as very similar training stopping points. We compute the mean and standard deviation of both evaluation metrics for these optimal models on the pseudo test set, resulting in a 66.0\u00b1 1.0 exact match and 74.5\u00b1 0.9 F1. These results show that our hyper-parameter selection procedure is not overfitting on the 10k SQUAD development set, and we subsequently expect that our model\u2019s performance will translate to the SQUAD test set."}, {"heading": "5.2 MODEL VARIATIONS", "text": "We investigate two main questions in the following ablations and comparisons. (1) How important are the two methods of representing the question described in Section 3.3? (2) What is the impact of learning a loss function that accurately reflects the span prediction task?\nQuestion representations Table 2a shows the performance of RASOR when either of the two question representations described in Section 3.3 is removed. The passage-aligned question representation is crucial, since lexically similar regions of the passage provide strong signal for relevant answer spans. If the question is only integrated through the inclusion of a passage-independent representation, performance drops drastically. The passage-independent question representation over the BiLSTM is less important, but it still accounts for over 3% exact match and F1. The input of both of these components is analyzed qualitatively in Section 6.\nLearning objectives Given a fixed architecture that is capable of encoding the input questionpassage pairs, there are many ways of setting up a learning objective to encourage the model to predict the correct span. In Table 2b, we provide comparisons of some alternatives (learned end-toend) given only the passage-level BiLSTM from RASOR. In order to provide clean comparisons, we restrict the alternatives to objectives that are trained and evaluated with exact decoding.\nThe simplest alternative is to consider this task as binary classification for every word (Membership prediction in Table 2b). In this baseline, we optimize the logistic loss for binary labels indicating whether passage words belong to the correct answer span. At prediction time, a valid span can be recovered in linear time by finding the maximum contiguous sum of scores.\nLi et al. (2016) proposed a sequence-labeling scheme that is similar to the above baseline (BIO sequence prediction in Table 2b). We follow their proposed model and learn a conditional random field (CRF) layer after the passage-level BiLSTM to model transitions between the different labels. At prediction time, a valid span can be recovered in linear time using Viterbi decoding, with hard transition constraints to enforce a single contiguous output.\nWe also consider a model that independently predicts the two endpoints of the answer span (Endpoints prediction in Table 2b). This model uses the softmax loss over passage words during learning. When decoding, we only need to enforce the constraint that the start index is no greater than the end index. Without the interactions between the endpoints, this can be computed in linear time. Note that this model has the same expressivity as RASOR if the span-level FFNN were removed.\nLastly, we compare with a model using the same architecture as RASOR but is trained with a binary logistic loss rather than a softmax loss over spans (Span prediction w/ logistic loss in Table 2b).\nThe trend in Table 2b shows that the model is better at leveraging the supervision as the learning objective more accurately reflects the fundamental task at hand: determining the best answer span.\nFirst, we observe general improvements when using labels that closely align with the task. For example, the labels for membership prediction simply happens to provide single contiguous spans in the supervision. The model must consider far more possible answers than it needs to (the power set of all words). The same problem holds for BIO sequence prediction\u2013 the model must do additional work to learn the semantics of the BIO tags. On the other hand, in RASOR, the semantics of an answer span is naturally encoded by the set of labels.\nSecond, we observe the importance of allowing interactions between the endpoints using the spanlevel FFNN. RASOR outperforms the endpoint prediction model by 1.1 in exact match, The interaction between endpoints enables RASOR to enforce consistency across its two substructures. While this does not provide improvements for predicting the correct region of the answer (captured by the F1 metric, which drops by 0.2), it is more likely to predict a clean answer span that matches human judgment exactly (captured by the exact-match metric)."}, {"heading": "6 ANALYSIS", "text": "Figure 2 shows how the performances of RASOR and the endpoint predictor introduced in Section 5.2 degrade as the lengths of their predictions increase. It is clear that explicitly modeling interactions between end markers is increasingly important as the span grows in length.\nFigure 3 shows attention masks for both of RASOR\u2019s question representations. The passageindependent question representation pays most attention to the words that could attach to the answer in the passage (\u201cbrought\u201d, \u201cagainst\u201d) or describe the answer category (\u201cpeople\u201d). Meanwhile, the passage-aligned question representation pays attention to similar words. The top predictions for both examples are all valid syntactic constituents, and they all have the correct semantic category. However, RASOR assigns almost as much probability mass to it\u2019s incorrect third prediction \u201cBritish\u201d as it does to the top scoring correct prediction \u201cEgyptian\u201d. This showcases a common failure case for RASOR, where it can find an answer of the correct type close to a phrase that overlaps with the question \u2013 but it cannot accurately represent the semantic dependency on that phrase."}], "references": [{"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "KyungHyun Cho", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1409.0473,", "citeRegEx": "Bahdanau et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2014}, {"title": "A thorough examination of the cnn/daily mail reading comprehension task", "author": ["Danqi Chen", "Jason Bolton", "Christopher D. Manning"], "venue": "In Proceedings of ACL,", "citeRegEx": "Chen et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Chen et al\\.", "year": 2016}, {"title": "A theoretically grounded application of dropout in recurrent neural networks", "author": ["Yarin Gal", "Zoubin Ghahramani"], "venue": "Proceedings of NIPS,", "citeRegEx": "Gal and Ghahramani.,? \\Q2016\\E", "shortCiteRegEx": "Gal and Ghahramani.", "year": 2016}, {"title": "LSTM: A search space odyssey", "author": ["Klaus Greff", "Rupesh Kumar Srivastava", "Jan Koutn\u0131\u0301k", "Bas R. Steunebrink", "J\u00fcrgen Schmidhuber"], "venue": "IEEE Transactions on Neural Networks and Learning Systems,", "citeRegEx": "Greff et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Greff et al\\.", "year": 2016}, {"title": "Teaching machines to read and comprehend", "author": ["Karl Moritz Hermann", "Tomas Kocisky", "Edward Grefenstette", "Lasse Espeholt", "Will Kay", "Mustafa Suleyman", "Phil Blunsom"], "venue": "In Proceedings of NIPS,", "citeRegEx": "Hermann et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Hermann et al\\.", "year": 2015}, {"title": "The goldilocks principle: Reading children\u2019s books with explicit memory representations", "author": ["Felix Hill", "Antoine Bordes", "Sumit Chopra", "Jason Weston"], "venue": "In Proceedings of ICLR,", "citeRegEx": "Hill et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Hill et al\\.", "year": 2016}, {"title": "Long Short-term Memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "Hochreiter and Schmidhuber.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba"], "venue": "Proceedings of ICLR,", "citeRegEx": "Kingma and Ba.,? \\Q2015\\E", "shortCiteRegEx": "Kingma and Ba.", "year": 2015}, {"title": "Dataset and neural recurrent sequence labeling model for open-domain factoid question answering", "author": ["Peng Li", "Wei Li", "Zhengyan He", "Xuguang Wang", "Ying Cao", "Jie Zhou", "Wei Xu"], "venue": null, "citeRegEx": "Li et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Li et al\\.", "year": 2016}, {"title": "Rectified linear units improve restricted boltzmann machines", "author": ["Vinod Nair", "Geoffrey E Hinton"], "venue": "In Proceedings of ICML,", "citeRegEx": "Nair and Hinton.,? \\Q2010\\E", "shortCiteRegEx": "Nair and Hinton.", "year": 2010}, {"title": "A decomposable attention model for natural language inference", "author": ["Ankur P Parikh", "Oscar T\u00e4ckstr\u00f6m", "Dipanjan Das", "Jakob Uszkoreit"], "venue": "In Proceedings of EMNLP,", "citeRegEx": "Parikh et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Parikh et al\\.", "year": 2016}, {"title": "Glove: Global vectors for word representation", "author": ["Jeffrey Pennington", "Richard Socher", "Christopher D Manning"], "venue": "In Proceedings of EMNLP,", "citeRegEx": "Pennington et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Pennington et al\\.", "year": 2014}, {"title": "SQuAD: 100, 000+ questions for machine comprehension of text", "author": ["Pranav Rajpurkar", "Jian Zhang", "Konstantin Lopyrev", "Percy Liang"], "venue": "In Proceedings of EMNLP,", "citeRegEx": "Rajpurkar et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Rajpurkar et al\\.", "year": 2016}, {"title": "Mctest: A challenge dataset for the open-domain machine comprehension of text", "author": ["Matthew Richardson", "Christopher JC Burges", "Erin Renshaw"], "venue": "In Proceedings of EMNLP,", "citeRegEx": "Richardson et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Richardson et al\\.", "year": 2013}, {"title": "Cloze procedure: A new tool for measuring readability", "author": ["Wilson Taylor"], "venue": "Journalism Quarterly,", "citeRegEx": "Taylor.,? \\Q1953\\E", "shortCiteRegEx": "Taylor.", "year": 1953}, {"title": "Convolutional neural networks vs. convolution kernels: Feature engineering for answer sentence reranking", "author": ["Kateryna Tymoshenko", "Daniele Bonadiman", "Alessandro Moschitti"], "venue": "In Proceedings of NAACL,", "citeRegEx": "Tymoshenko et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Tymoshenko et al\\.", "year": 2016}, {"title": "Building a question answering test collection", "author": ["Ellen M. Voorhees", "Dawn M. Tice"], "venue": "In Proceedings of SIGIR,", "citeRegEx": "Voorhees and Tice.,? \\Q2000\\E", "shortCiteRegEx": "Voorhees and Tice.", "year": 2000}, {"title": "Inner attention based recurrent neural networks for answer selection", "author": ["Bingning Wang", "Kang Liu", "Jun Zhao"], "venue": "In Proceedings of ACL,", "citeRegEx": "Wang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2016}, {"title": "Machine comprehension using match-lstm and answer pointer", "author": ["Shuohang Wang", "Jing Jiang"], "venue": "arXiv preprint arXiv:1608.07905,", "citeRegEx": "Wang and Jiang.,? \\Q2016\\E", "shortCiteRegEx": "Wang and Jiang.", "year": 2016}, {"title": "Wikiqa: A challenge dataset for open-domain question answering", "author": ["Yi Yang", "Wen-tau Yih", "Christopher Meek"], "venue": "In Proceedings of EMNLP,", "citeRegEx": "Yang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Yang et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 12, "context": "However, Rajpurkar et al. (2016) recently released the SQUAD dataset in which the answers can be arbitrary strings from the supplied text.", "startOffset": 9, "endOffset": 33}, {"referenceID": 12, "context": "However, Rajpurkar et al. (2016) recently released the SQUAD dataset in which the answers can be arbitrary strings from the supplied text. In this paper, we focus on this answer extraction task, presenting a novel model architecture that efficiently builds fixed length representations of all spans in the evidence document with a recurrent network. We show that scoring explicit span representations significantly improves performance over other approaches that factor the prediction into separate predictions about words or start and end markers. Our approach improves upon the best published results of Wang & Jiang (2016) by 5% and decreases the error of Rajpurkar et al.", "startOffset": 9, "endOffset": 626}, {"referenceID": 13, "context": "A number of reading comprehension datasets have been developed that focus on answer selection from a small set of alternatives defined by annotators (Richardson et al., 2013) or existing NLP pipelines that cannot be trained end-to-end (Hill et al.", "startOffset": 149, "endOffset": 174}, {"referenceID": 5, "context": ", 2013) or existing NLP pipelines that cannot be trained end-to-end (Hill et al., 2016; Hermann et al., 2015).", "startOffset": 68, "endOffset": 109}, {"referenceID": 4, "context": ", 2013) or existing NLP pipelines that cannot be trained end-to-end (Hill et al., 2016; Hermann et al., 2015).", "startOffset": 68, "endOffset": 109}, {"referenceID": 4, "context": "Subsequently, the models proposed for this task have tended to make use of the limited set of candidates, basing their predictions on mention-level attention weights (Hermann et al., 2015), or centering classifiers (Chen et al.", "startOffset": 166, "endOffset": 188}, {"referenceID": 1, "context": ", 2015), or centering classifiers (Chen et al., 2016), or network memories (Hill et al.", "startOffset": 34, "endOffset": 53}, {"referenceID": 5, "context": ", 2016), or network memories (Hill et al., 2016) on candidate locations.", "startOffset": 29, "endOffset": 48}, {"referenceID": 1, "context": ", 2015), or centering classifiers (Chen et al., 2016), or network memories (Hill et al., 2016) on candidate locations. Recently, Rajpurkar et al. (2016) released the less restricted SQUAD dataset1 that does not place any constraints on the set of allowed answers, other than that they should be drawn from the evidence document.", "startOffset": 35, "endOffset": 153}, {"referenceID": 1, "context": ", 2015), or centering classifiers (Chen et al., 2016), or network memories (Hill et al., 2016) on candidate locations. Recently, Rajpurkar et al. (2016) released the less restricted SQUAD dataset1 that does not place any constraints on the set of allowed answers, other than that they should be drawn from the evidence document. Rajpurkar et al. proposed a baseline system that chooses answers from the constituents identified by an existing syntactic parser. This allows them to prune the O(N) answer candidates in each document of length N , but it also effectively renders 20.7% of all questions unanswerable. Subsequent work by Wang & Jiang (2016) significantly improve upon this baseline by using an endto-end neural network architecture to identify answer spans by labeling either individual words, or the start and end of the answer span.", "startOffset": 35, "endOffset": 652}, {"referenceID": 14, "context": "A task that is closely related to extractive question answering is the Cloze task (Taylor, 1953), in which the goal is to predict a concealed span from a declarative sentence given a passage of supporting text.", "startOffset": 82, "endOffset": 96}, {"referenceID": 19, "context": "Relevant datasets include datasets from the annual TREC evaluations (Voorhees & Tice, 2000) and WikiQA (Yang et al., 2015), where the latter dataset specifically focused on Wikipedia passages.", "startOffset": 103, "endOffset": 122}, {"referenceID": 10, "context": "For the SQUAD dataset, the original paper from Rajpurkar et al. (2016) implemented a linear model with sparse features based on n-grams and part-of-speech tags present in the question and the candidate answer.", "startOffset": 47, "endOffset": 71}, {"referenceID": 10, "context": "For the SQUAD dataset, the original paper from Rajpurkar et al. (2016) implemented a linear model with sparse features based on n-grams and part-of-speech tags present in the question and the candidate answer. Other than lexical features, they also used syntactic information in the form of dependency paths to extract more general features. They set a strong baseline for following work and also presented an in depth analysis, showing that lexical and syntactic features contribute most strongly to their model\u2019s performance. Subsequent work by Wang & Jiang (2016) use an end-to-end neural network method that uses a Match-LSTM to model the question and the passage, and uses pointer networks (Vinyals et al.", "startOffset": 47, "endOffset": 567}, {"referenceID": 3, "context": "Recently, Hermann et al. (2015) presented a Cloze dataset in which the task is to predict the correct entity in an incomplete sentence given an abstractive summary of a news article.", "startOffset": 10, "endOffset": 32}, {"referenceID": 1, "context": "Although this dataset is large and varied in domain, recent analysis by Chen et al. (2016) shows that simple models can achieve close to the human upper bound.", "startOffset": 72, "endOffset": 91}, {"referenceID": 0, "context": "The alignments are computed via neural attention (Bahdanau et al., 2014), and we use the variant proposed by Parikh et al.", "startOffset": 49, "endOffset": 72}, {"referenceID": 0, "context": "The alignments are computed via neural attention (Bahdanau et al., 2014), and we use the variant proposed by Parikh et al. (2016), where attention scores are dot products between non-linear mappings of word embeddings.", "startOffset": 50, "endOffset": 130}, {"referenceID": 8, "context": "This representation is a bidirectional generalization of the question representation recently proposed by Li et al. (2016) for a different question-answering task.", "startOffset": 106, "endOffset": 123}, {"referenceID": 11, "context": "We represent each of the words in the question and document using 300 dimensional GloVe embeddings trained on a corpus of 840bn words (Pennington et al., 2014).", "startOffset": 134, "endOffset": 159}, {"referenceID": 3, "context": "We couple the input and forget gates in our LSTMs, as described in Greff et al. (2016), and we use a single dropout mask to apply dropout across all LSTM time-steps as proposed by Gal & Ghahramani (2016).", "startOffset": 67, "endOffset": 87}, {"referenceID": 3, "context": "We couple the input and forget gates in our LSTMs, as described in Greff et al. (2016), and we use a single dropout mask to apply dropout across all LSTM time-steps as proposed by Gal & Ghahramani (2016). Hidden layers in the feed forward neural networks use rectified linear units (Nair & Hinton, 2010).", "startOffset": 67, "endOffset": 204}, {"referenceID": 12, "context": "Rajpurkar et al. (2016) published a logistic regression baseline as well as human performance on the SQUAD task.", "startOffset": 0, "endOffset": 24}, {"referenceID": 8, "context": "Li et al. (2016) proposed a sequence-labeling scheme that is similar to the above baseline (BIO sequence prediction in Table 2b).", "startOffset": 0, "endOffset": 17}], "year": 2016, "abstractText": "The reading comprehension task, that asks questions about a given evidence document, is a central problem in natural language understanding. Recent formulations of this task have typically focused on answer selection from a set of candidates pre-defined manually or through the use of an external NLP pipeline. However, Rajpurkar et al. (2016) recently released the SQUAD dataset in which the answers can be arbitrary strings from the supplied text. In this paper, we focus on this answer extraction task, presenting a novel model architecture that efficiently builds fixed length representations of all spans in the evidence document with a recurrent network. We show that scoring explicit span representations significantly improves performance over other approaches that factor the prediction into separate predictions about words or start and end markers. Our approach improves upon the best published results of Wang & Jiang (2016) by 5% and decreases the error of Rajpurkar et al.\u2019s baseline by > 50%.", "creator": "LaTeX with hyperref package"}}}