{"id": "1703.01358", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Mar-2017", "title": "Generalised Discount Functions applied to a Monte-Carlo AImu Implementation", "abstract": "In recent years, work coppin has jamun been ballade done nonfinancial to scramjet develop the grinders theory of General Reinforcement nilai Learning (flowerpecker GRL ). krulewitz However, there are ligand-binding few examples demonstrating eesah these results extrovert in a djamil concrete tsuruoka way. vuthy In upside particular, there are roboticists no kedumim examples xq demonstrating babina the known arnoun results masschusetts regarding gener - alised discounting. We monthon have deary added 3/12 to the ponyo GRL lfe simulation platform kabu AIXIjs the soman functionality rathbone to camptosar assign an filicia agent halilhod\u017ei\u0107 arbitrary 27.88 discount matutes functions, 25-hour and caracciolo an environment which imagines can wa\u0142brzych be used jaspar to hrawi determine the umaru effect of discounting chivukuvuku on hammami an agent ' pyoot s stimpy policy. Using tgf this, bozzo we birtwell investigate how barsi geometric, hyperbolic bushier and sporocysts power discounting affect alando an informed shots-32 agent in a wedges simple instituci\u00f3n MDP. We experimentally reproduce a cost-of-living number damrau of 60.71 theoretical samaranch results, and l\u00f3ng discuss braniff some leola related mig-21bis subtleties. It rambla was found tas that al-qasim the agent ' bienville s behaviour tractebel followed what is expected gelber theoretically, stocked assuming appropriate drizzled parameters were rccc chosen guianese for the inheriting Monte - texbudget Carlo Tree thammanoon Search (MCTS) madagascar planning 0:05 algorithm.", "histories": [["v1", "Fri, 3 Mar 2017 23:25:38 GMT  (17kb)", "http://arxiv.org/abs/1703.01358v1", "12 pages, 4 figures"]], "COMMENTS": "12 pages, 4 figures", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["sean lamont", "john aslanides", "jan leike", "marcus hutter"], "accepted": false, "id": "1703.01358"}, "pdf": {"name": "1703.01358.pdf", "metadata": {"source": "CRF", "title": "Generalised Discount Functions applied to a Monte-Carlo AI\u03bc Implementation", "authors": ["Sean Lamont", "John Aslanides", "Jan Leike", "Marcus Hutter"], "emails": ["sean.a.lamont@outlook.com", "john.stewart.aslanides@gmail.com", "leike@google.com", "marcus.hutter@anu.edu.au"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 3.\n01 35\n8v 1\n[ cs\n.A I]\nKeywords\u2014 Reinforcement Learning, Discount Function, Time Consistency, Monte Carlo"}, {"heading": "1 Introduction", "text": "Reinforcement learning (RL) is a branch of artificial intelligence which is focused on designing and implementing agents that learn how to achieve a task through rewards. Most RL methods focus on one specialised area, for example the Alpha-Go program from Google Deepmind which is targeted towards the board game Go [12]. General Reinforcement Learning (GRL) is concerned with the design of agents which are effective in a wide range of environments. RL agents use a discount function when choosing their future actions, which controls how heavily they weight future rewards. Several theoretical results have been proven for arbitrary discount functions relating to GRL agents [8].\nWe present some contributions to the platform AIXIjs1 [1][2], which enables the simulation of GRL agents for gridworld problems. Being web-based allows this platform to be used as an\n\u2217sean.a.lamont@outlook.com \u2020john.stewart.aslanides@gmail.com \u2021leike@google.com \u00a7marcus.hutter@anu.edu.au 1For a thorough introduction to AIXIjs, aslanides.io/docs/masters_thesis.pdf\neducational tool, as it provides an understandable visual demonstration of theoretical results. In addition, it allows the testing of GRL agents in several different types of environments and scenarios, which can be used to analyze and compare models. This helps to showcase the different strengths and weaknesses among GRL agents, making it a useful tool for the GRL community in terms of demonstrating results. Our main work here is to extend this platform to arbitrary discount functions. Using this, we then compare the behaviour induced by common discount functions and compare this to what is theoretically expected.\nWe first provide the necessary background to understand the experiments by introducing the RL setup, agent and planning algorithms, general discounting, and AIXIjs. We then present details of the environment and agent implementation used for the analyses. Finally, we present the experiments and the results, along with a discussion for each function."}, {"heading": "2 Background", "text": ""}, {"heading": "2.1 Reinforcement Learning Setup", "text": "RL research is concerned with the design and implementation of goal-oriented agents. The characteristic approach of RL is to associate rewards with the desired goal and allow the agent to learn the best strategy for gaining rewards itself through trial and error [14]. The agent interacts with an environment by producing an action a, and the environment responds with an observation and reward pair (o, r) = e which we call a percept. The history up to interaction cycle k is given by the string of all actions and percepts, a1e1.....ak\u22121ek\u22121. To simplify notation, this is written as \u00e6<k. Mathematically, an agent\u2019s policy is a stochastic function mapping a history to an action, \u03c0 : (A\u00d7E) A, while an environment is a stochastic map from a history and an action to a percept, \u00b5 : (A \u00d7 E)\u2217 \u00d7 A E , where is a stochastic mapping. In the context of adaptive control, Bellman [3] first introduced equations for expressing optimal policies in both deterministic and stochastic environments, including infinite state spaces. Also introduced was the idea of a value function. A value function is how an agent assigns value to an environment state (or a state-action pair), where value is a measure of the expected future discounted reward sum. To solve the Bellman equations, it is necessary to assume a fully observable Markovian environment (a Markov Decision Process, or a MDP). In an MDP, the agent can observe all relevant information from the environment at any time, without needing to remember the history. Although useful for MDPs, many problems of interest lack the necessary assumptions to tractably solve the Bellman equations. The problem of scaling RL to nonMarkovian and partially observable real world domains provides the motivation for General Reinforcement Learning.\nIn such cases, it is useful to express the value function in terms of the agent\u2019s history, with the value of a policy \u03c0 with history <t and environment \u00b5 given by the equation:\nV \u03c0\u00b5 (<t) := E \u03c0 \u00b5\n[\n\u221e \u2211\nk=t\n\u03b3krk|<t\n]\n(1)\nWhere r is the reward and \u03b3 is a discount function [9]. This equation gives the \u00b5-expected utility for a policy \u03c0 . If we are in a MDP, then we can replace the history by the current state, and rewrite this as a Bellman Equation [3]."}, {"heading": "2.2 AI\u00b5", "text": "The GRL agent AI\u00b5 [4] is purposed to find the optimal reward in a known environment. There are no other assumptions made about the environment, so this agent extends to partially observable cases. AI\u00b5 is simply defined as the agent which maximises the value function given by (1). Specifically, for any environment \u00b5,\n\u03c0AI\u00b5 \u2208 argmax \u03c0 V \u03c0\u00b5 (2)\nAs there is usually no way to know the true environment, the main purpose of AI\u00b5 is to provide a theoretical upper bound for the performance of an agent for a given environment. As we wish to isolate the effect of discounting, AI\u00b5 is the agent used for our experiments to remove uncertainty in the agent\u2019s model."}, {"heading": "2.3 Generalised Discounting", "text": "A discount function is used to weight rewards based on their temporal position relative to the current time. There are several motivations for using a discount function to determine utility, as opposed to taking an unaltered sum of rewards. In practice, a discount function allows the agent\u2019s designer to decide how it would like the agent to value rewards based on how far away they are. A discount function also serves to prevent the utility from diverging to infinity, as is the case when using undiscounted reward sums.\nSamuelson [11] first introduced the model of discounted utility, with the utility at time k given by the sum of discounted future rewards:\nVk =\n\u221e \u2211\nt=k\n\u03b3t\u2212krt (3)\nThis model is the most commonly used in both RL and other disciplines, but has several issues. These include that the discount function cannot change over time, and that the value of an action is independent of the history. Hutter and Lattimore [8] address several issues with this model first by using the GRL framwork to allow decisions which consider the agent\u2019s history. They also generalise the setting to allow a change in discounting over time. Specifically, they define a discount vector \u03b3k for each time step k, with the entries in the vector being the discount applied at each time step t > k. Replacing \u03b3t\u2212k with \u03b3\nk in (3) gives a more general model of discounted utility, as it allows the discount function to change over time by using different vectors for different time steps.\nUsing this model, Hutter and Lattimore [8] provide a general classification of time inconsistent discounting. Qualitatively, a policy is time consistent if it agrees with previous plans and time inconsistent if it does not. For example, if I plan to complete a task in 2 hours but then after 1 hour plan to do it after another 2 hours, my policy will be time inconsistent. Formally, an agent using discount vectors \u03b3k is time consistent iff:\n\u2200k, \u2203ak > 0 such that \u03b3 k t = ak\u03b3 1 t , \u2200t \u2265 k \u2208 N (4)\nWhich is to say, the discount applied from the current time k to the reward at time t is equal to some positive scalar multiple of the discount used for t at time 1.\nAlso presented in their work is a list of common discount functions and a characterisation of which of these are time consistent. These form the basis for our experiments and we present a taxonomy below:\nGiven the current time k, future time t > k, and a discount vector \u03b3, we have: Geometric Discounting: \u03b3kt = g\nt, g \u2208 (0, 1). Geometric discounting is the most commonly used discount function, as it provides a straightforward and predictable way to value closer rewards higher. It is also convenient as for \u03b3 \u2208 (0, 1) it ensures the expected discounted reward (i.e. value) will always be bounded, and therefore well defined in all instances. Geometric discounting is always time consistent, which is apparent when considering the definition in (4).\nHyperbolic Discounting: \u03b3kt = 1 (1+\u03ba(t\u2212k))\u03b2 , \u03ba \u2208 R +, \u03b2 \u2265 1. Hyperbolic discounting has been thought to accurately model human behaviour, with some research suggesting humans discount this way when deciding actions [15]. Hyperbolic discounting is time inconsistent, which is much of the reason why it is considered to model many irrational human behaviour patterns. It is clear that hyperbolic discounting is time inconsistent, as it is not possible to factor the above expression in a way which satisfies (4). Hyperbolic discounting is most commonly seen for \u03b2 = 1, with \u03b2 > 1 ensuring the discounted reward sum doesn\u2019t diverge to infinity.\nPower Discounting: \u03b3kt = t \u2212\u03b2 , \u03b2 > 1. Power discounting is of interest because it causes a growing effective horizon. This in effect causes the agent to become more far sighted over time, with future rewards becoming relatively more desirable as time progresses. This is flexible as there is no need to assign an arbitrary fixed effective horizon, it will instead grow over time. Hutter and Lattimore [8] point out that this function is time consistent, which combined with the growing effective horizon makes it an effective means of agent discounting."}, {"heading": "2.4 Monte-Carlo Tree Search with \u03c1UCT", "text": "Monte-Carlo Tree Search (MCTS) is a planning algorithm designed to approximate the expectimax search tree generated by (1), which is usually intractable to fully enumerate. UCT [7] is a MCTS algorithm which is effective for Markovian settings. Veness et al. [16] extend this to general environments with the \u03c1UCT algorithm. The algortithm generates a tree comprised of two types of nodes, \u2019decision\u2019 nodes and \u2019chance\u2019 nodes. A decision node reflects the agents possible actions, while chance nodes represent the possible environment responses. A summary of the algorithm is as follows: First, plan forward using standard Monte-Carlo simulation. Then select an action in the tree using the UCB action policy; Define a search horizon m, maximum and minumum reward \u03b2 and \u03b1, value estimate V \u2032, and history h, with T (ha) being the number of visits to a chance node, and T (h) the number of visits to a decision node. Then, for T (ha) > 0:\naUCB = argmax a\n1\nm(\u03b2 \u2212 \u03b1) V \u2032(ha) + C\n\u221a\nlog(T (h))\nT (ha) (5)\nIf T (ha) = 0 then the best action will default to a. The parameter C is an exploration constant, which can be modified to control the likelihood that an agent will take an exploratory action. Veness et al. [16] remark that high values of C lead to \u2019bushy\u2019 and short trees, compared to low values yielding longer and more discerning trees. Once the best action is selected, the values for each node are updated backwards to the root to reflect the new action. The primary\nstrength of this algorithm is that it allows for history based tree search, by using \u03c1 as the current environment model and planning based on that."}, {"heading": "2.5 AIXIjs", "text": "We implement our experiments using AIXIjs, a JavaScript platform designed to demonstrate GRL results. AIXIjs is structured as follows: There are currently several GRL agents which have been implemented to work in different (toy) gridworld and MDP environments. Using these, there are a collection of demos which are each designed to showcase some theoretical result in GRL and are presented on the web page. Once a demo is selected, the user can choose to alter some default parameters and then run the demo. This then begins a batch simulation with the specified agent and environment for the selected number of time cycles (a batch simulation runs the whole simulation as one job, without any interference). The data collected during the simulation is then used to visualise the interaction. The API allows for anyone to design their own demos based on current agents and environments, and for new agents and environments to be added and interfaced into the system. It also includes the option to run the simulations as experiments, collecting the data relevant to the simulation and storing it in a JSON file for analysis.\nThe source code can be accessed on: https://github.com/aslanides/aixijs While the demos can be found at: http://aslanides.io/aixijs/ or http://www.hutter1.net/aixijs/ There has been some related work in adapting GRL results to a practical setting. In particular, the Monte-Carlo AIXI approximation [16] successfully implemented a AIXI model using the aforementioned \u03c1UCT algorithm. This agent was quite successful, even within a \u201cchallenge domain\u201d (a modified Pac-Man game with 1060 possible states) with the agent learning several key tactics for the game and consistently improving. This example demonstrated that it is possible to effectively adapt GRL agents to a practical setting, and is the basis for the approximation of AI\u00b5 presented here.\nRelated to the AIXIjs platform is the REINFORCEjs web demo by Karpathy [6]. This demo implements Q-Learning [17] and SARSA [10] RL methods in a grid world scenario, as well as deep Q-Learning for two continuous state settings. The limitation of this example is its restriction to a small set of environments, with Q-Learning and SARSA being defined only for Markovian environments. These algorithms do not extend to more complicated environments or agents, which is addressed by AIXIjs."}, {"heading": "3 Technical Details", "text": ""}, {"heading": "3.1 AI\u00b5 Implementation", "text": "The agent used for experiments is an MCTS approximated version of AI\u00b5. By using AI\u00b5, we are removing any potential uncertainty in the agent\u2019s model which facilitates a more accurate analysis of the effect of discounting. This agent knows the true environment, so for a fixed discount this implies that its policy \u03c0(s) will stay the same for any particular state, assuming a Markovian environment.\nAlthough we will not be using very large tree depth, enumerating the expectimax by solving equation (1) is not generally feasible. We instead use MCTS to approximate the search tree, specifically the \u03c1UCT algorithm introduced in the background. Although UCT would suffice in our deterministic setting, \u03c1UCT is the default search algorithm incorporated into AIXIjs and as such was used without modification."}, {"heading": "3.2 Agent Plan and Time Inconsistency Heuristic", "text": "We determine the agent\u2019s plan at time step k by traversing the tree created by \u03c1UCT, first selecting the highest value decision node and then choosing the corresponding chance node with the most number of visits. In the case of the environment used here, each decision node has only one chance child as it is deterministic. The process is then repeated up to the maximum horizon reached by the search, and the sequence of actions taken are recorded as the agent\u2019s plan. The plan is recorded as a numeric string representing the sequence of actions the agent plans to take. For example, a recorded plan of 000111 indicates the agent plans to first take action \u20190\u2019 three times in a row and then take \u20191\u2019 three times.\nIf the action at cycle k is not equal to the action predicted by the plan at time k\u2212 1 then we consider this time inconsistent. Formally, if the following equation is satisfied then the action at t is time inconsistent:\n\u03c0\u03b3k\u22121(Sk) 6= \u03c0\u03b3k(Sk)\nWhere \u03c0\u03b3t(St) is a policy \u03c0 using discount vector \u03b3 t in state S at time k and \u03c0\u03b3k\u22121(Sk) is the same policy using an older discount vector \u03b3k\u22121. If this is true, then the action will be time inconsistent. If it is not true, the action may still be time inconsistent in regards to older plans. This method is used to prevent false positives, as the agent plan deep in the search tree is often not representative due to the cutoff at the horizon."}, {"heading": "3.3 Environment Setup", "text": "The environment we use is a deterministic fully observable finite state MDP, represented by figure 1. This environment is structured to provide a simple means to differentiate myopic and far-sighted agent policies. The idea behind the environment is to give the agent the option of receiving an instant reward at any point, which it will take if it is sufficiently myopic. The other option gives a very large reward only after following a second action for N steps. If the agent is far-sighted enough, it will ignore the low instant reward and plan ahead to reach the very large reward in N time steps. Formally, the agent has 2 actions from state Si : The first is to go to S0 and receive a small instant reward rI . The other takes the agent to Si+1 (where i \u2208 Z/(N+1)Z) and gives very low reward r0 < 1 N rI , and a large reward rL > NrI for i = N \u2212 1. In figure 1 the straight lines represent the first action a0 while the other lines representing the second action a1."}, {"heading": "4 Experiments", "text": ""}, {"heading": "4.1 Overview", "text": "In this section we present the experiments for the discount functions, which were conducted using the AIXIjs experiment API mentioned in the background. In particular, we will investigate the effect of geometric, hyperbolic and power discounting on the \u03c1UCT AI\u00b5model. The environment used was the instance of figure 1 parametrised by N = 6, rI = 4, r0 = 0, rL = 1000. We use average reward as our metric for agent performance. We avoid using total reward as, in this environment, it is monotonically increasing with respect to time. This would affect the scale of graphs, which could obscure an agent\u2019s behaviour. We now present the MCTS parameters, after which we detail two specific policies prior to the experiments which comprise the rest of the section. We introduce these policies to avoid unnecessary overlap in the analysis of geometric and hyperbolic discounting, as they displayed very similar behaviours."}, {"heading": "4.2 MCTS Parameters", "text": "It was necessary to increase the samples and lower the exploration constant for power discounting because over time, the discount factor becomes exponentially lower with respect to \u03b2. A high exploration constant would overpower the UCB expression in (5) and result in erratic policies as there is no clear better action. Given the large number of samples, it was also necessary to reduce the horizon to shorten the depth of the tree. 7 is the minimum required to see far enough into the future to notice the delayed reward."}, {"heading": "4.3 Far-Sighted Policy", "text": "With reference to figure 1, this policy takes action a1 (the alternating arrow) for every time step. The total reward for the far-sighted policy in 200 time cycles is 33 000, given a delayed reward of 1000 and a reward interval of 6 time steps. Figure 3 presents a plot of the average reward of this policy in our environment.\nAverage Reward vs Time for Far Sighted Policy\nThe periodic nature of the delayed reward is reflected in the zig zag shape of the average reward graph. As this policy is consistently taking a1, the time between spikes is constant."}, {"heading": "4.4 Short-Sighted (Myopic) Agent", "text": "The second policy takes action a1 (solid arrow in figure 1) for every time step. The total reward for this policy is 792, given an instant reward of 4. Figure 4 presents a plot of the average reward of this policy in our environment.\nThe graph reflects the initial reward of 0 as the agent starts off, and then the constant reward of 4 every following time cycle."}, {"heading": "4.5 Geometric Discounting", "text": "We ran experiments by altering \u03b3 in increments of 0.1, ranging from 0.1 to 1.0. We found that in all test runs, the number of time inconsistent actions given by our heuristic was 0. We found that for \u03b3 \u2264 0.4 the agent followed exactly the myopic policy from the previous subsection,\nAverage Reward vs Time for Myopic Policy\nreceiving a total reward of 792. For \u03b3 \u2265 0.6 the agent behaved as described in the far-sighted policy subsection, achieving the optimal reward of 33 000. For \u03b3 = 0.5, the agent behaved somewhat erratically, occasionally altering its behaviour between both policies. As this value lies between the \u03b3 which cause strict far/short sightedness, there would be a small difference in weighted rewards between both policies. It is therefore likely the erratic behaviour is caused by the MCTS struggling to find the best decision, given there is a degree of innacuracy in the tree search. The agent plan enumeration gave a consistent plan of 0000000000 for \u03b3 \u2264 0.4 and varied between 1111100000 and 1111111111 for \u03b3 \u2265 0.6, where \u20190\u2019 and \u20191\u2019 are shorthand for a0 and a1 respectively. This variation is due to the horizon cutoff at 10, since at some points the agent won\u2019t see far ahead enough to plan for 2 far-sighted actions."}, {"heading": "4.6 Hyperbolic Discounting", "text": "We varied \u03ba between 1.0 and 3.0 in increments of 0.2, and kept \u03b2 constant at 1.0. We found that only \u03ba = 1.8 yielded non-zero time inconsistent actions, with the total number of such actions recorded as 200. We found for \u03ba \u2264 1.8 that the agent followed exactly the behaviour from the myopic policy subsection, receiving a total reward of 792. For \u03ba > 1.8 the agent behaved as described in the far-sighted policy subsection, achieving the optimal reward of 33 000. The plan for \u03ba = 1.8 was 0111111000 at every time step. For \u03ba > 1.8 the plan stayed as 1111111111, and \u03ba \u2264 1.8 gave a constant plan of 0000000000.\nIn the interest of reproducibility, the experiments for hyperbolic discounting were performed on commit 3911d73 on the provided github link. The results can also be replicated with recent\nAverage Reward vs Time for Power Discounting (Beta: 1.01)\nand future versions, however the MCTS parameters may need to be adjusted."}, {"heading": "4.7 Power Discounting", "text": "We only used a single \u03b2 value in this case, with \u03b2= 1.01. We note that any change in \u03b2 would result in similar behaviour, with only the length and time between these stages changing (hence we need only present the results of one \u03b2 value). No time inconsistent actions were detected for this function. The total reward obtained by the agent was 15412.\nThe behaviour in this circumstance follows three stages: For around 100 time steps, the agent behaves completely myopically, reflected by the small continuous rise in the first half of the graph. The discount function then reaches a stage where distant rewards are weighted high enough so that the agent decides to act far-sightedly. For several time steps, the agent collects the delayed reward then goes to the instant one for a few cycles. The number of cycles it stays there gradually decreases until it strictly follows the far-sighted policy. This can be seen in the graph, as the intervals between peaks are larger from cycles 100-150 than 150-200 when the agent acts completely far-sighted."}, {"heading": "5 Discussion", "text": "In regards to time inconsistent agent behaviour, the results were consistent with theoretical predictions. Geometric discounting was, for all instances of \u03b3, time consistent as expected.\nSomewhat suprisingly, hyperbolic discounting was time consistent for all measured \u03ba except 1.8 when it was continuously acting inconsistently. The results of power discounting also lacked any time inconsistent actions which is expected.\nThe hyperbolic agent plan of 0111111000 for \u03ba = 1.8 reflects some interesting behaviour. We can see the agent is planning to stay at the instant reward for the next time step, and then move off to collect a delayed reward. But as this plan is the same for all time steps, the agent continuously stays on the instant reward planning to do the better long term action later. In effect, the agent is eternally procrastinating. The fact that this behaviour can be induced with this function also supports the claim that hyperbolic discounting can model certain irrational human behaviour. We note the trailing 0s are an artifact of the horizon being too low to see far ahead enough to notice another delayed reward, given the horizon was only 10.\nThe results of power discounting clearly demonstrate how a growing effective horizon can effect an agent\u2019s policy. Initially the agent is too short sighted to collect the delayed reward, but over time this reward becomes more heavily weighted compared to the instant reward. After some time the agent starts to collect the delayed reward and soon is fixed to a far-sighted policy. This shows that a growing effective horizon can cause an agent to collect distant rewards only after some time has passed, which again reflects what is theoretically predicted.\nThere will continue to be new results proven for GRL, so an avenue for future work would be to demonstrate those results in a similar fashion to the work presented here. Our contributions to the AIXIjs framework would allow for this to be done easily for results pertaining to agent discounting. Other future work would be the development of practical GRL systems which extend beyond a toy environment, and which can be used for non-trivial tasks."}, {"heading": "6 Summary", "text": "We have adapted the platform AIXIjs to include arbitrary discount functions. Using this, we were able to isolate time inconsistent behaviour and illustrate the effect of the discount function on an agent\u2019s farsightedness. We were able to show it is possible to use power discounting in a concrete setting to observe the impact of a growing effective horizon, which influenced the time at which an agent chose to collect distant rewards. We also demonstrated that hyperbolic discounting can induce procrastinating behaviour in an agent. Our current framework now permits a larger class of experiments and demos with general discounting, which will be useful for future research on the topic."}], "references": [{"title": "AIXIjs: A software demo for general reinforcement learning", "author": ["J Aslanides"], "venue": "Australian National University", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2016}, {"title": "General Reinforcement Learning Algorithms: Survey and Experiments, 2016", "author": ["J Aslanides", "M. Hutter", "J. Leike"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2016}, {"title": "Dynamic programming", "author": ["R Bellman"], "venue": "Princeton, NJ: Princeton University Press", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1957}, {"title": "A theory of universal artificial intelligence based on algorithmic complexity", "author": ["M. Hutter"], "venue": "ISDIA-14-00, ISDIA, arXiv:cs.AI/0004001", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2000}, {"title": "Universal artificial intelligence: Sequential decisions based on algorithmic probability", "author": ["M. Hutter"], "venue": "Springer", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2005}, {"title": "https://cs.stanford.edu/people/karpathy/reinforcejs /index.html", "author": ["A. Karpathy"], "venue": "Reinforcejs,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "Bandit based Monte-Carlo planning", "author": ["L. Kocsis", "C. Szepesvari"], "venue": "Euro. Conf. Mach. Learn. Berlin, Germany : Springer, pp. 282-293.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2006}, {"title": "General time consistent discounting", "author": ["T. Lattimore", "M. Hutter"], "venue": "Theoretical Computer Science, 519:140-154", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2014}, {"title": "What is AIXI? - An Introduction to General Reinforcement Learning, 2015. https://jan.leike.name/AIXI.html", "author": ["J. Leike"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "On-line Q-learning using connectionist systems", "author": ["G.A. Rummery andM. Niranjan"], "venue": "Technical Report CUED/F-INFENG/TR 166,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1994}, {"title": "A note on measurement of utility", "author": ["P. Samuelson"], "venue": "The Review of Economic Studies, 4(2) : 155-161", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1937}, {"title": "G", "author": ["D. Sliver", "A. Huang", "C.J. Maddison", "A. Guez", "L. Sifre"], "venue": "van den Driessche, J. Schrittwieser, I. Antonoglou, V. Panneershelvam, M. Lanctot, S. Dieleman, D. Grewe, N. Kalchbrenner, T. Lillicrap, M. Leach, K. Kavukcuoglu, T. Graepel, and D. Hassabis. Mastering the game of go with deep neural networks and tree search. Nature 529, 484-489", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2016}, {"title": "Learning to predict by the methods of temporal differences", "author": ["R. Sutton"], "venue": "Machine Learning, 3, 9-44.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1988}, {"title": "Reinforcement Learning: An Introduction", "author": ["R.S. Sutton", "A.G. Barto"], "venue": "MIT Press, Cambridge, MA", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1998}, {"title": "Some empirical evidence on dynamic inconsistency", "author": ["R. Thaler"], "venue": "Economics Letters, 8(3) : 201 - 207", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1981}, {"title": "A Monte-Carlo AIXI Approximation", "author": ["J. Veness", "M. Hutter", "W. Uther", "D. Silver", "K.S. Ng"], "venue": "Journal of Artificial Intelligence Research 40: 95-142", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2011}, {"title": "Q-learning", "author": ["C. Watkins", "P. Dayan"], "venue": "Machine Learning, 8, 279-292", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1992}], "referenceMentions": [{"referenceID": 11, "context": "Most RL methods focus on one specialised area, for example the Alpha-Go program from Google Deepmind which is targeted towards the board game Go [12].", "startOffset": 145, "endOffset": 149}, {"referenceID": 7, "context": "Several theoretical results have been proven for arbitrary discount functions relating to GRL agents [8].", "startOffset": 101, "endOffset": 104}, {"referenceID": 0, "context": "We present some contributions to the platform AIXIjs [1][2], which enables the simulation of GRL agents for gridworld problems.", "startOffset": 53, "endOffset": 56}, {"referenceID": 1, "context": "We present some contributions to the platform AIXIjs [1][2], which enables the simulation of GRL agents for gridworld problems.", "startOffset": 56, "endOffset": 59}, {"referenceID": 13, "context": "The characteristic approach of RL is to associate rewards with the desired goal and allow the agent to learn the best strategy for gaining rewards itself through trial and error [14].", "startOffset": 178, "endOffset": 182}, {"referenceID": 2, "context": "In the context of adaptive control, Bellman [3] first introduced equations for expressing optimal policies in both deterministic and stochastic environments, including infinite state spaces.", "startOffset": 44, "endOffset": 47}, {"referenceID": 8, "context": "Where r is the reward and \u03b3 is a discount function [9].", "startOffset": 51, "endOffset": 54}, {"referenceID": 2, "context": "If we are in a MDP, then we can replace the history by the current state, and rewrite this as a Bellman Equation [3].", "startOffset": 113, "endOffset": 116}, {"referenceID": 3, "context": "2 AI\u03bc The GRL agent AI\u03bc [4] is purposed to find the optimal reward in a known environment.", "startOffset": 24, "endOffset": 27}, {"referenceID": 10, "context": "Samuelson [11] first introduced the model of discounted utility, with the utility at time k given by the sum of discounted future rewards:", "startOffset": 10, "endOffset": 14}, {"referenceID": 7, "context": "Hutter and Lattimore [8] address several issues with this model first by using the GRL framwork to allow decisions which consider the agent\u2019s history.", "startOffset": 21, "endOffset": 24}, {"referenceID": 7, "context": "Using this model, Hutter and Lattimore [8] provide a general classification of time inconsistent discounting.", "startOffset": 39, "endOffset": 42}, {"referenceID": 14, "context": "Hyperbolic discounting has been thought to accurately model human behaviour, with some research suggesting humans discount this way when deciding actions [15].", "startOffset": 154, "endOffset": 158}, {"referenceID": 7, "context": "Hutter and Lattimore [8] point out that this function is time consistent, which combined with the growing effective horizon makes it an effective means of agent discounting.", "startOffset": 21, "endOffset": 24}, {"referenceID": 6, "context": "UCT [7] is a MCTS algorithm which is effective for Markovian settings.", "startOffset": 4, "endOffset": 7}, {"referenceID": 15, "context": "[16] extend this to general environments with the \u03c1UCT algorithm.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "[16] remark that high values of C lead to \u2019bushy\u2019 and short trees, compared to low values yielding longer and more discerning trees.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "In particular, the Monte-Carlo AIXI approximation [16] successfully implemented a AIXI model using the aforementioned \u03c1UCT algorithm.", "startOffset": 50, "endOffset": 54}, {"referenceID": 5, "context": "Related to the AIXIjs platform is the REINFORCEjs web demo by Karpathy [6].", "startOffset": 71, "endOffset": 74}, {"referenceID": 16, "context": "This demo implements Q-Learning [17] and SARSA [10] RL methods in a grid world scenario, as well as deep Q-Learning for two continuous state settings.", "startOffset": 32, "endOffset": 36}, {"referenceID": 9, "context": "This demo implements Q-Learning [17] and SARSA [10] RL methods in a grid world scenario, as well as deep Q-Learning for two continuous state settings.", "startOffset": 47, "endOffset": 51}], "year": 2017, "abstractText": "In recent years, work has been done to develop the theory of General Reinforcement Learning (GRL). However, there are few examples demonstrating the known results regarding generalised discounting. We have added to the GRL simulation platform AIXIjs the functionality to assign an agent arbitrary discount functions, and an environment which can be used to determine the effect of discounting on an agent\u2019s policy. Using this, we investigate how geometric, hyperbolic and power discounting affect an informed agent in a simple MDP. We experimentally reproduce a number of theoretical results, and discuss some related subtleties. It was found that the agent\u2019s behaviour followed what is expected theoretically, assuming appropriate parameters were chosen for the Monte-Carlo Tree Search (MCTS) planning algorithm. Keywords\u2014 Reinforcement Learning, Discount Function, Time Consistency, Monte Carlo", "creator": "LaTeX with hyperref package"}}}