{"id": "1703.04990", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Mar-2017", "title": "Neural Programming by Example", "abstract": "Programming oumar by 50.87 Example (PBE) yivo targets at automatically inferring 1.795 a sportster computer sonority program for u.s.-owned accomplishing ttm a kshatriya certain abbess task splinters from sample looks input bartelt and flunk output. dvorkin In this paper, we vocalist/guitarist propose uros a broadcast.com deep demanding neural jingxing networks (DNN) based PBE model called Neural kuzmanovi\u0107 Programming 9-1-0 by Example (NPBE ), bloomgarden which obstructing can aristocats learn 17.73 from blakemore input - recorrido output strings and induce maysles programs kadewe that vaisnava solve the telenovelas string subproblem manipulation rubs problems. twohy Our kovalchuk NPBE model sorokin has bouvard four neural nek network based robartes components: portch a delicatessens string spotz encoder, an millan input - output analyzer, a program generator, casbah and a symbol spinning selector. We demonstrate 262.5 the bonine effectiveness of NPBE camming by training shusen it end - to - end shinma to riksteatret solve some common string debatt manipulation 282.5 problems in annam spreadsheet epicentre systems. taliek The campbells results show amagansett that srivalo our model can yandi induce heroism string reseda manipulation iturbi programs effectively. nydam Our sroka work anoia is one step shawwal towards yglesias teaching fusible DNN alpes-de-haute-provence to 3,526 generate 14.10 computer programs.", "histories": [["v1", "Wed, 15 Mar 2017 07:57:51 GMT  (255kb,D)", "http://arxiv.org/abs/1703.04990v1", "7 pages, Association for the Advancement of Artificial Intelligence (AAAI)"]], "COMMENTS": "7 pages, Association for the Advancement of Artificial Intelligence (AAAI)", "reviews": [], "SUBJECTS": "cs.AI cs.NE cs.SE", "authors": ["chengxun shu", "hongyu zhang"], "accepted": true, "id": "1703.04990"}, "pdf": {"name": "1703.04990.pdf", "metadata": {"source": "CRF", "title": "Neural Programming by Example", "authors": ["Chengxun Shu", "Hongyu Zhang"], "emails": ["shuchengxun@163.com", "hongyu.zhang@newcastle.edu.au", "john@example.com", "james@company.com", "@),", "jacob@test.com,"], "sections": [{"heading": "Introduction", "text": "Programming by Example (PBE, also called programming by demonstration, or inductive synthesis) (Lieberman 2001; Cypher and Halbert 1993; Gulwani 2011) gives machines the ability to reason and generate new programs without substantial amount of human supervision. In PBE systems, users (often non-professional programmers) provide a machine with input-output examples of a task they would like to perform and the machine automatically infers a program to accomplish the task. The concept of PBE has been successfully used for string manipulation in spreadsheet systems such as Microsoft Excel (Gulwani et al. 2015), computeraided education (Gulwani 2014) and data extracting systems (Le and Gulwani 2014).\nAs an example, if a user provides the following input and output examples:\njohn@example.com\u21d2 john james@company.com\u21d2 james\nA PBE system should understand that the user would like to extract the user name from the email address. It will automatically synthesize a program Select(Split(x, @), 0), where x is the input string, Split is to split a string according to a delimiter, and Select is to select a substring from an array\nCopyright c\u00a9 2017, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\nof strings. Given a new email address jacob@test.com, the program will output the string jacob.\nLau et al. (2003) applied version space algebra to search for possible programs. More recent PBE methods (Gulwani 2011) mainly adopt search technique to find a composition of predefined functions (such as string Split and Concatenation) that satisfies the input-output examples. These methods create a Directed Acyclic Graph (DAG) and search through the sequences of functions that can generate the output string from a given input state. These methods can generate complex string manipulation programs effectively, but require the design of complex program synthesis algorithms.\nIn this paper, we propose a Deep Neural Networks (DNN) based approach to Programming by Example. We train neural networks to automatically infer programs from inputoutput examples. During the past few years, research on DNN has achieved significant results in a variety of fields such as computer vision (Krizhevsky, Sutskever, and Hinton 2012), speech recognition (Mohamed, Dahl, and Hinton 2012), natural language processing (Collobert et al. 2011), and API learning (?). Recently, researchers have explored the feasibility of applying DNN to solve programming and computation related problems (Neelakantan, Le, and Sutskever 2015; Reed and de Freitas 2015; Graves, Wayne, and Danihelka 2014; ?). Our work is based on the similar idea of applying DNN to infer and execute computer programs. Different from the existing work, we target at the PBE problem and train a neural PBE model with triples of input, output and program.\nOur approach, called NPBE (Neural Programming by Example), teaches DNN to compose a set of predefined atomic operations for string manipulation. Given an input-output string pair, the NPBE model is trained to synthesize a program - a sequence of functions and corresponding arguments that transform the input string to the output string. The program is generated from the atomic functions and one function may use the execution results of previous functions. Thus the model is able to compose complex programs using only several predefined operations.\nWe have experimentally evaluated NPBE on a large number of input-output strings for 45 string manipulation tasks and the results are encouraging. We find that our model can generalize beyond the training input/output strings and the training argument settings. Our work is one of the early at-\nar X\niv :1\n70 3.\n04 99\n0v 1\n[ cs\n.A I]\n1 5\nM ar\n2 01\n7\ntempts to apply DNN to the problem of Programming by Example."}, {"heading": "Related Work", "text": "Reed et al. (2015) developed a framework called Neural Programmer-Interpreter to induce and execute programs using neural networks. Their method treats programs as embeddings and uses neural networks to generate functions and arguments for program execution. Their model is trained with the supervision of execution traces and can be used in many different scenarios. However, their model cannot be directly applied to the problem of PBE as the input to their model is the environment encoded with the task, while our work is dedicated to PBE and the input to our model are input-output examples. Neural Programmer (Neelakantan, Le, and Sutskever 2015) is a neural network augmented with a set of operations that can be called over several steps. It is trained to output the result of program execution, while our model is trained to output the program represented by symbols. Neural Enquirer (Yin et al. 2015) is a fully neural, end-to-end differentiable model capable of modeling and executing table query related programs. The execution of Neural Enquirer is \u201csoftly\u201d on data table using neural networks, while our work does not apply soft execution to input-output strings. Bos\u030cnjak et al. (?) proposed a neural implementation of an abstract machine for the language Forth. It can learn program behaviour trained from input-output data. However, it requires program sketches as input.\nOur model is also related to the work that uses recurrent neural networks to solve programming and computation related problems. Graves et al. (2014) developed Neural Turing Machine which is capable of learning and executing simple programs using an external memory. Zaremba et al. (2015) used execution traces to train recurrent neural networks to learn simple algorithms. Ling et al. (2016) developed a model to generate program code from natural language and structured specification. Pointer Networks (Vinyals, Fortunato, and Jaitly 2015) uses an attentional recurrent model to solve difficult algorithmic problems.\nSome machine learning methods were also proposed to tackle PBE problems. Lau et al. (2003) applied version space algebra to efficiently search for possible programs. Given input-output pairs, genetic programming (Banzhaf et al. 1998) can evolve useful programs from candidate populations. Liang et al. (2010) proposed a hierarchical Bayesian approach to learn simple programs given only a few examples. Melon et al. (2013) used machine learning to speed up the searching for possible programs by learning weights related to textual features. Their method needs carefully designed features to reduce search space, while our method reduces search space and avoids feature engineering through learning representations using DNN."}, {"heading": "The NPBE Model", "text": "Problem Statement: Let S denote the set of strings. For an input string x \u2208 S and an output string y \u2208 S, our model is to induce a function f \u2208 SS , so that y = f(x). The input to our model is the input-output pair z := (x, y) \u2208 S2, and\nwe wish to get the correct function f , so when the user input another string x\u0304 \u2208 S, we can generate the desired output y\u0304 = f(x\u0304) without the need of user specifying the function explicitly."}, {"heading": "Program Generator", "text": "The proposed NPBE model (Figure 1) consists of four modules:\n\u2022 A string encoder to encode input and output strings;\n\u2022 An input-output analyzer which generates the transformation embedding describing the relationship between input and output strings;\n\u2022 A program generator which produces the function/arguments embeddings over a few steps;\n\u2022 A symbol selector to decode the function/arguments embeddings and generate human readable symbols.\nThe program generator will run for a few steps, each step it may access the outputs of previous steps, thus enables the model to compose powerful programs using only a few predefined atomic functions. While traditional deep learning models try to generate the output y given x and eventually fit the function f such that y = f(x), our model learns to generate the function f directly and fits the higher-order function g for which f = g(x, y) and f satisfies y = f(x)."}, {"heading": "String Encoder", "text": "Given a string composed of a sequence of characters {i1, i2, ..., iL}, the string encoder outputs a string embedding and a list of character embeddings. First each character ik in the sequence is mapped to the 8-dimensional raw embeddings e(ik) via a randomly initialized and trainable embedding matrix. To better present and attend to a character, the context of each character is fused with the character\u2019s raw embedding to build the character embedding. Let l(ik) denote the left context of the character ik and r(ik) as the right context of ik. l(ik) and r(ik) are respectively calculated using Equation (1) and Equation (2) with l(0) = r(L + 1) = [0]C . In our implementation f l and fr are the update function of LSTM (?).\nl(ik) = f l(l(ik\u22121), e(ik)) (1) r(ik) = fr(r(ik+1), e(ik)) (2)\nThe character embedding for each character is the combination of left/right contexts of character ik and e(ik) itself as shown in Equation (3), where [\u00b7; \u00b7] means the concatenation of vectors, max is the element-wise max-pooling. We and be are parameter matrix and vector for building the full character embedding.\nck = tanh(We[max(l(ik), r(ik)); e(ik)] + be) (3)\nck will be used by the attention mechanism in the program generator.\nWe also need a representation which can summarize the whole string, so we can induce the transformation from the string embeddings of input and output strings. We use multilayer bidirectional LSTM (?) to summarize ck. The output of forward and backward LSTM at each layer are concatenated and become the input of next layer\u2019s forward and backward LSTM. The topmost layer\u2019s last hidden states of forward and backward LSTM are merged to generate the string embedding s \u2208 RS through a final fully connected layer. The processing for input and output strings is separated but shares the same neural network architecture and parameters, thus producings cI,1, ...cI,L, sI and cO,1, ...cO,L, sO for input and output strings, respectively."}, {"heading": "Input/output Analyzer", "text": "The input/output analyzer converts the input and output string embeddings to the transformation embedding, which describes the relationship between the input and output strings. Let t \u2208 RT denote the transformation embedding. sI \u2208 RS , sO \u2208 RS are the input and output string embeddings, respectively. The input/output analyzer can be represented as Equation (4). In our implementation, fIO is just a 2-layer fully connected neural network with activation function tanh.\nt = fIO([sI ; sO]) (4)"}, {"heading": "Program Generator", "text": "The program generator (Figure 2) is the core of NPBE. It generates several functions and corresponding arguments\u2019\nembeddings step by step. The function\u2019s embedding at time t is calculated as Equation (5), which is a fully connected neural network taking as input the transformation embedding t and the execution history of the program generator ht\u22121 \u2208 RH (h0 = t). Similarly, the function\u2019s arguments embedding at time t is calculated as Equation (6). However, the function\u2019s arguments are often very complex and hard to predict accurately. So attention mechanism (similar to the one used in neural machine translation models (?)) is applied to refine the raw arguments embedding ar,t with attention on input and output strings. This is summarized in Equation (7). Finally, the function embedding ft, the refined arguments embedding at, and the previous history embedding ht\u22121 are merged into the new history embedding ht as shown in Equation (8). Wh and bh are parameter matrix and vector for generating the new history, respectively.\nft = ffunc(t,ht\u22121) (5) ar,t = fargs(t,ht\u22121) (6) at = fatt(ar,t, cI,1, ...cI,L, cO,1, ...cO,L) (7) ht = tanh(Wh[ft;at;ht\u22121] + bh) (8)\nFunctions ffunc and fargs can be multilayer fully connected neural networks, and in our experiment we just use one layer neural network. The function fatt in Equation (7) is implemented by attending to the input and output strings as follows:\nutI,i = v T I tanh(W1cI,i +W2ar,t) i \u2208 (1, ..., L) (9)\natI,i = softmax(u t I,i) i \u2208 (1, ..., L) (10)\naI,t = L\u2211 i=1 atI,icI,i (11)\nutO,i = v T O tanh(W3cO,i +W4ar,t) i \u2208 (1, ..., L) (12)\natO,i = softmax(u t O,i) i \u2208 (1, ..., L) (13)\naO,t = L\u2211 i=1 atO,icO,i (14)\nW1,W2,vI and W3,W4,vO are parameters for attending to the input and output strings, respectively. Note that the attention architecture for input and output strings are the same but with different parameters. The final arguments embedding is generated by combining attention over input, output and the raw arguments embedding:\nat = tanh(Watt[aI,t;ar,t;aO,t] + batt) (15)\nwhere Watt and batt are parameters for combining."}, {"heading": "Symbol Selector", "text": "The symbol selector uses the function embedding ft and the arguments embedding at generated by the program generator to select a proper function and the corresponding arguments of that function. The probability distribution \u03b1func,t \u2208 [0, 1]P over P atomic functions is produced by Equation (16), where Uf \u2208 RP\u00d7F is the matrix storing the representations of the atomic functions. The arguments embedding at (representing the summary of the arguments) is decoded by a RNN (?), which is conditioned on its previous output and at, as shown in Equation (17). st,0, ...st,i\u22121 are hidden states of LSTM with st,0 = [0]H . In this way, the sequence of arguments is generated by the RNN. The probability distribution of the i-th argument at time t over Q possible arguments, \u03b1arg,i,t \u2208 [0, 1]Q, is produced using Equation (18), where Ua \u2208 RQ\u00d7A is the matrix storing the representations of possible arguments.\n\u03b1func,t = softmax(Ufft) (16) at,i = LSTM(st,i\u22121,at,i\u22121,at) (17)\n\u03b1arg,i,t = softmax(Uaat,i) (18)"}, {"heading": "Training", "text": "We train the NPBE model end-to-end using input-output string pairs {Xi,Yi} as well as the programs represented as a sequence of functions and corresponding arguments. Each program Pi : {f1i ,a1i , ..., f T i ,a T i } can transform Xi to Yi, where i means the i\u2019th training example. For every inputoutput pair we can generate a sequence of T functions and every function has an argument list a \u2208 AM , where A is the set of possible arguments, M is the maximum number of arguments one function can take. In our implementation, T = 5,M = 5.\nThe training is conducted by directly maximizing the loglikelihood of the correct program P given {X ,Y }:\n\u03b8\u2217 = argmax \u03b8 \u2211 (X ,Y ,P) logP (P|X ,Y ; \u03b8) (19)\nwhere \u03b8 is the parameters of our model. Random Gaussian noise (?) is injected into the transformation embedding and the arguments embedding to improve the generalization ability and stability of NPBE."}, {"heading": "Experiments", "text": ""}, {"heading": "Experimental Design", "text": "The NPBE model is required to induce a program consisting of a sequence of functions based on only one inputoutput string pair. In this section, we describe our evaluation of the NPBE model. In our experiments, we define 7 basic string manipulation functions and 1 null function as the atomic functions (Table 1). For simplicity, each program is allowed to be composed by 5 functions at most. We define a set of constant symbols (Table 2) from which our model can choose as arguments. The constant symbols include integers and delimiters. The integers are used by the Select function as index to an array of strings. The negative integers are used to access array elements from the tail. The design of integer symbols supports the access to an array of at most 7 elements. The delimiters are used by Split and Join to split a\nstring or join an array of strings by a delimiter. We also define some special symbols. For example, the symbol x refers to the input string, o1, o2, o3 and o4 are used to refer to the output of the first, second, third and fourth operation, respectively. The NoArg symbol indicates that no arguments is expected at the current position. Note that although in our experiments, we give some constraints to the functions and arguments in a program, our model can be easily extended to support new functions and arguments.\nTo obtain training data, we first generate programs at various levels of complexity according to 45 predefined tasks. A task is a sequence of function in a specific order, but the arguments of each function are not fixed. The reason for defining tasks is that we want the program generated by our model being syntactically correct and meaningful. The 45 tasks range from simple ones such as the concatenation of input to some constant string, to more complex ones comprising Split, Join, Select, ToUpper and Concatenate functions. For example, the task of Split, Join is to first split the input string by a delimiter, then join the split strings array using another delimiter. A program derived from this task could be Join(Split(x,\u201c/\u201d), \u201c:\u201d), which splits the input string x according to the delimiter \u201c/\u201d and then joins the resulting substrings using the delimeter \u201c:\u201d. The average number of functions for accomplishing a task is 3.5.\nFor all the tasks, we generate a total number of around 69,000 programs for training. For each program Pi we generate a random input string Xi, which should be an valid input to the program Pi. Next, we apply the program Pi on Xi by actually running the Python program implementing Pi and get the output string Yi. We constrain Xi and Yi to be at most 62 characters long. After that, we use {Xi,Yi} as the input data to our model, and Pi as the training target. The program is generated in such a way that if there are multiple programs that can result in the same Yi given Xi, only one specific program is chosen. Therefore, there is no ambiguity for the model to predict the desired program. Given\nthe program Pi, the input string Xi is always generated dynamically and randomly to decrease overfitting. Table 3 gives some concrete input-output examples for our model.\nTo train NPBE, we choose RMSProp (Tieleman and Hinton 2012) as the optimizer and set the mini-batch size to 200. We set the dimensionality of the transformation embedding t and the history embedding h to 256, the function embedding f to 16, and the arguments embedding a to 64. The actual training process relies on an adaptive curriculum (Reed and de Freitas 2015) in which the frequency of one specific task being trained is proportional to its error rates over test. Every 10 epochs we estimate the prediction errors. We use softmax with adequate temperature over error rates to sample the frequency of each task that will be trained during the next 10 epochs. So tasks with the higher error rates will be sampled more frequently than tasks with the lower error rates during the next 10 epochs.\nThe evaluation of NPBE is conducted to answer the following research questions:\nRQ1: What is the accuracy of NPBE in generating programs? In this RQ, we use randomly generated inputoutput strings to evaluate the accuracy of NPBE in generating programs. For example, given a random input-output pair: 25/11/16 and 25:11:16 (which does not appear in the training data), we would like to test if the correct program Join(Split(x, \u201c/\u201d), \u201c:\u201d) can be still generated. To answer this RQ, we generate random input-output strings for each task 1000 times and apply the trained NPBE model. A program produced by NPBE is regarded correct only if the model predicts all the five functions (if less than five, padded with the NoFunc symbol) and all the arguments of the functions (also padded with theNoArg symbol) correctly (thus a total of 5 + 5 \u00d7 5 = 30 positions). We also compare our model with the RNN encoder-decoder models (?) implemented using LSTM and LSTM with attention mechanism, which all have similar total number of parameters to our model.\nRQ2: Can NPBE generate programs with previously unseen arguments? In this RQ, we test the generalization ability of NPBE. We evaluate our model using programs whose argument settings do not appear in the training set. For example, if the program Join(Split(x, \u201c/\u201d), \u201c:\u201d) appears in the training set, we would like to know if NPBE can work for the program Join(Split(x, \u201c@\u201d), \u201c-\u201d) , which does not appear in the training set. To answer this RQ, we design a test set consisting of around 19,000 programs with previously unseen arguments. The experiment is conducted on 19 selected tasks that have complex argument combinations (for simple tasks there are few arguments to choose so we skip them)."}, {"heading": "Experimental Results", "text": "RQ1: What is the accuracy of NPBE in generating programs? Table 4 gives the evaluation results of NPBE on predicting programs. The average Top1 accuracy achieved by NPBE is 74.1%, which means that for 74.1% of inputoutput pairs in test, NPBE successfully generates the corresponding program. We found that the model prediction errors most likely to occur on the integer argument of Select because neural networks are not good at counting. So we also let the model to give 3 or 5 predictions when it tries to predict the integer arguments of Select. The average Top3 and Top5 accuracy results are 85.8% and 91.0%, which means that for 85.8% and 91.0% of input-output pairs in test, NPBE successfully returns the corresponding program within the top 3 and top 5 results respectively. The results show that the NPBE model can generate correct programs for most tasks.\nAs an example, given the input string \u201c17/apr/2016\u201d and output string \u201cAPR-17\u201d, our model needs to induce a pro-\ngram comprising Split, Select, Select, Case Change, Concatenate. For this task, our model gives completely correct program in 35.8% cases. If we allow the model to give 3 or 5 predictions for the integer argument of Select, the accuracy is increased to 73.2% or 94.0%.\nThe results about LSTM and LSTM with attention mechanism (denoted to as LSTM-A) are also shown in Table 4. Note that the Top1, Top3 and Top5 accuracy for LSTM and LSTM-A are almost the same, so only the Top1 accuracy is reported. We found that the ordinary encoder-decoder model can solve the simplest tasks but cannot tackle harder tasks. The results show that NPBE significantly outperforms the ordinary encoder-decoder model.\nRQ2: Can NPBE generate programs with previously unseen arguments? We test the generalization ability of NPBE on the programs with previously unseen argument settings. The average Top5 accuracy results are given in Table 5. The results shows that for seen and unseen argument settings the accuracies achieved by our model have no big difference. For example, the task of Split, Join first splits an input string by a delimiter (such as \u201c/\u201d) and then concatenates the resulting substrings by the other delimiter (such as \u201c:\u201d). This task achieves 93.6% accuracy on the training set. For different arguments (e.g., first split the input string by \u201c@\u201d then join the resulting substrings by \u201c-\u201d) that do not exist in the training set, NPBE can still get 93.9% accuracy. The results show that NPBE can be generalized to unseen program arguments without over-fitting to particular argument combinations."}, {"heading": "Discussions and Future Work", "text": "The intention behind NPBE is to make the model learn related features from input-output strings automatically and use the learned features to induce correct programs. The purpose of this paper is not to directly compete with the existing PBE systems. Instead, we show that the use of DNN can recognize features in string transformations and can learn accurate programs through input-output pairs.\nCurrently, NPBE cannot be generalized to completely unseen tasks (such as Split, Join, Join, Concatenate) that never appeared in the training set. In our future work, we will try to build the model that really \u201cunderstands\u201d the meaning of\natomic functions to make it possible to generalize to the unseen tasks."}, {"heading": "Conclusion", "text": "In this paper, we propose NPBE, a Programming by Example (PBE) model based on DNN. NPBE can induce string manipulation programs based on simple input-output pairs by inferring a composition of functions and corresponding arguments. We have shown that the novel use of DNN can be successfully applied to develop Programming By Example systems. Our work also explores the way of learning higher-order functions in deep learning, and is one step towards teaching DNN to generate computer programs."}], "references": [{"title": "F", "author": ["W. Banzhaf", "P. Nordin", "R.E. Keller", "Francone"], "venue": "D.", "citeRegEx": "Banzhaf et al. 1998", "shortCiteRegEx": null, "year": 1998}, {"title": "Natural language processing (almost) from scratch", "author": ["Collobert"], "venue": "Journal of Machine Learning Research 12(Aug):2493\u20132537", "citeRegEx": "Collobert,? \\Q2011\\E", "shortCiteRegEx": "Collobert", "year": 2011}, {"title": "D", "author": ["A. Cypher", "Halbert"], "venue": "C.", "citeRegEx": "Cypher and Halbert 1993", "shortCiteRegEx": null, "year": 1993}, {"title": "K", "author": ["Grefenstette, E.", "Hermann"], "venue": "M.; Suleyman, M.; and Blunsom, P.", "citeRegEx": "Grefenstette et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "S", "author": ["S. Gulwani", "J. Hernandez-Orallo", "E. Kitzelmann", "Muggleton"], "venue": "H.; Schmid, U.; and Zorn, B.", "citeRegEx": "Gulwani et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "G", "author": ["A. Krizhevsky", "I. Sutskever", "Hinton"], "venue": "E.", "citeRegEx": "Krizhevsky. Sutskever. and Hinton 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "S", "author": ["B.M. Lake", "T.D. Ullman", "J.B. Tenenbaum", "Gershman"], "venue": "J.", "citeRegEx": "Lake et al. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "D", "author": ["T. Lau", "S.A. Wolfman", "P. Domingos", "Weld"], "venue": "S.", "citeRegEx": "Lau et al. 2003", "shortCiteRegEx": null, "year": 2003}, {"title": "and Gulwani", "author": ["V. Le"], "venue": "S.", "citeRegEx": "Le and Gulwani 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "M", "author": ["Liang, P.", "Jordan"], "venue": "I.; and Klein, D.", "citeRegEx": "Liang. Jordan. and Klein 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "K", "author": ["W. Ling", "E. Grefenstette", "Hermann"], "venue": "M.; Kocisky, T.; Senior, A.; Wang, F.; and Blunsom, P.", "citeRegEx": "Ling et al. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "B", "author": ["A.K. Menon", "O. Tamuz", "S. Gulwani", "Lampson"], "venue": "W.; and Kalai, A.", "citeRegEx": "Menon et al. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "G", "author": ["Mohamed, A.-r.", "Dahl"], "venue": "E.; and Hinton, G.", "citeRegEx": "Mohamed. Dahl. and Hinton 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Q", "author": ["Neelakantan, A.", "Le"], "venue": "V.; and Sutskever, I.", "citeRegEx": "Neelakantan. Le. and Sutskever 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "and de Freitas", "author": ["S. Reed"], "venue": "N.", "citeRegEx": "Reed and de Freitas 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "End-to-end memory networks. In Advances in neural information processing systems, 2440\u20132448", "author": ["Sukhbaatar"], "venue": null, "citeRegEx": "Sukhbaatar,? \\Q2015\\E", "shortCiteRegEx": "Sukhbaatar", "year": 2015}, {"title": "and Hinton", "author": ["T. Tieleman"], "venue": "G.", "citeRegEx": "Tieleman and Hinton 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Neural enquirer: Learning to query tables with natural", "author": ["Yin"], "venue": "arXiv preprint arXiv:1512.00965", "citeRegEx": "Yin,? \\Q2015\\E", "shortCiteRegEx": "Yin", "year": 2015}, {"title": "Learning simple algorithms from examples. arXiv preprint arXiv:1511.07275", "author": ["Zaremba"], "venue": null, "citeRegEx": "Zaremba,? \\Q2015\\E", "shortCiteRegEx": "Zaremba", "year": 2015}], "referenceMentions": [], "year": 2017, "abstractText": "Programming by Example (PBE) targets at automatically inferring a computer program for accomplishing a certain task from sample input and output. In this paper, we propose a deep neural networks (DNN) based PBE model called Neural Programming by Example (NPBE), which can learn from input-output strings and induce programs that solve the string manipulation problems. Our NPBE model has four neural network based components: a string encoder, an input-output analyzer, a program generator, and a symbol selector. We demonstrate the effectiveness of NPBE by training it end-toend to solve some common string manipulation problems in spreadsheet systems. The results show that our model can induce string manipulation programs effectively. Our work is one step towards teaching DNN to generate computer programs.", "creator": "LaTeX with hyperref package"}}}