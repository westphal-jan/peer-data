{"id": "1704.00264", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Apr-2017", "title": "Potential Functions based Sampling Heuristic For Optimal Path Planning", "abstract": "Rapidly - exploring 1.4525 Random 60c Tree geno Star (leesburg RRT *) is a recently proposed extension of vso Rapidly - exploring syncopators Random Tree (capoten RRT) algorithm paramus that provides moderate-income a collision - lotsawa free, asymptotically bordeaux optimal path regardless purachai of obstacle ' s geometry perfective in a 89.0 given environment. 13.25 However, brockhampton one of dealin the limitations switchable in wey the RRT * conrad algorithm boothferry is salzberg slow uncrowded convergence settsu to optimal blinkered path caracciola solution. As justine a result, 48.71 it consumes high 959,000 memory as gaywood well all-electronic as time distorting due 112.35 to stutthof a 104.66 large bfs number dritte of iterations utilised in achieving optimal path solution. achromatopsia To overcome shipbreaking these limitations, we conneaut propose batigol the mhow Potential gudrun Function costuming Based - RRT * (P - RRT *) \u00ab that russky incorporates strike-slip the puentes Artificial outtv Potential moyers Field wall-e Algorithm sambili in RRT *. The proposed malocclusion algorithm mcnichol allows a pop\u00f3w considerable decrease gabled in the unreconciled number personalise of iterations bhanupriya and thus leads breech-loading to suing more sleepwalks efficient samoobrona memory utilization better-off and garrett an cytotoxicity accelerated convergence russett rate. scada In order xuyen to illustrate additivity the hearst-argyle usefulness abdul-aziz of the \u017eivkovi\u0107 proposed tribble algorithm plaintive in leaking terms of shizong space execution nationalistic and convergence 56.75 rate, this 5-megawatt paper kxas presents yakking rigorous 33.43 simulation protectionists based zivojinovic comparisons fame between tayaran the proposed turzii techniques competitivity and RRT * christoforakos under different bangerz environmental conditions. mcbrien Moreover, sexualisation both helles algorithms octopamine are also dismayingly tested grujic and blair compared under 76.9 non - holonomic nogent-sur-marne differential hindy constraints.", "histories": [["v1", "Sun, 2 Apr 2017 08:21:30 GMT  (2674kb,D)", "http://arxiv.org/abs/1704.00264v1", "This paper introduces a novel algorithm called P-RRT*. The work has been published in Springer Autonomous Robots Journal"]], "COMMENTS": "This paper introduces a novel algorithm called P-RRT*. The work has been published in Springer Autonomous Robots Journal", "reviews": [], "SUBJECTS": "cs.RO cs.AI", "authors": ["ahmed hussain qureshi", "yasar ayaz"], "accepted": false, "id": "1704.00264"}, "pdf": {"name": "1704.00264.pdf", "metadata": {"source": "META", "title": "Potential Functions based Sampling Heuristic For Optimal Path Planning", "authors": ["Ahmed Hussain Qureshi", "Yasar Ayaz"], "emails": [], "sections": [{"heading": null, "text": "Rapidly-exploring Random Tree Star(RRT*) is a recently proposed extension of Rapidly-exploring Random Tree (RRT) algorithm that provides a collisionfree, asymptotically optimal path regardless of obstacles geometry in a given environment. However, one of the limitation in the RRT* algorithm is slow convergence to optimal path solution. As a result it consumes high memory as well as time due to the large number of iterations utilised in achieving optimal path solution. To overcome these limitations, we propose the Potential Function Based-RRT* (P-RRT*) that incorporates the Artificial Potential Field Algorithm in RRT*. The proposed algorithm allows a considerable decrease in the number of iterations and thus leads to more efficient memory utilization and an accelerated convergence rate. In order to illustrate the usefulness of the proposed algorithm\n\u2217This is the authors\u2019 version of the paper published in Springer Autonomous Robots Journal. The source code of this paper is available at: github.com/ahq1993 with the name of p-rrtstar.\nin terms of space execution and convergence rate, this paper presents rigorous simulation based comparisons between the proposed techniques and RRT* under different environmental conditions. Moreover, both algorithms are also tested and compared under non-holonomic differential constraints."}, {"heading": "1 Introduction", "text": "Motion planning involves collision free navigation of a robot from an initial start region to a goal region in given environments. Applications of this field are not only restricted to robotics [12], but finds application in various other fields such as computer animation [10], medical [23], modern industry [14] and in our daily life [18]. Due to its comprehensive application, many algorithms have been developed in the field of motion planning. Two major classes of motion planning algorithms exist; one is complete algorithms, which successfully return a solution in finite time, if one exists, and reports failure if a feasible solution does not exist. The other class of algorithms does\nar X\niv :1\n70 4.\n00 26\n4v 1\nnot assure full completeness but does assure probabilistic or resolution completeness. Many complete motion planning algorithms exist [22] [17] but are often computationally inefficient [3] for common practical applications [6]. Algorithms providing resolution completeness include the example of Artificial Potential Fields (APF) [8] and cell decomposition methods [2]. These algorithms, however, are only effective in problem solving if the resolution parameter of the grid is finely tuned. Moreover Artificial potential fields (APF) perform pure exploitation. Exploitation makes the planner greedy as it assumes that the provided information is sufficient for computing a path solution. Although pure exploitation allows APF to quickly compute the solution but it also causes APF to suffer from the problem of local minima [9]. The other resolution complete algorithm i.e., cell decomposition methods involves extremely large numbers of cells which makes it computationally heavy. Therefore, these limitations make these methods unsuited for the motion planning of robots placed in complex environments. To overcome the problem of inefficiency, computationally efficient sampling based algorithms [11] were introduced. Sampling based algorithms perform pure exploration of configuration space so as to improve the planners\u2019 understanding of the given space. The most effective of these were Probabilistic Road Maps (PRM) [7] and Rapidlyexploring Random Trees [13], ensuring probabilistic completeness. This means that as the number of iterations approaches infinity, the probability of finding path , if one exists, approaches one. PRM\u2019s and its variants are multiple-query methods. However, most online motion planning problems can be solved as single-query problems instead [6]. Furthermore, PRM\u2019s need prior computing of the roadmap which is not feasible when the environment it is operating in is unknown. Also, computing a road map during run time is computationally expensive. Rapidly Growing Random Tree algorithms were mainly developed for motion planning problems with differential constraints and for single query problems [13]. Recently, an extension of Rapidly-exploring Random Trees algorithm called Rapidly-exploring Random Tree star (RRT*) [6] was proposed which computes an initial path same as RRT but continues to perform further iterations, increasing the number of samples in the configuration space to optimize this initial path, thereby ensuring asymptotic optimality [5]. This feature is not provided by the RRTs [6]. However some major constraints that still exist in RRT*, due to pure exploration, are its slow rate of convergence in determining an optimal path solution and its high memory requirements. Large memory utilization occurs due to the large number of iterations required to find the optimal path. Although computing an optimal path solution is itself a challenging problem, but fast convergence to optimal solution is also important for most online motion planning problems [4]. This paper introduces the idea of potentially guided, directionalized sampling by incorporating Artificial Potential Field Algorithm (APF) [8] into RRT*, thus resulting into guided exploration of given environment. This speeds up convergence towards a solution as directionalized samples reduces the number of iterations, and consequently execution time, required to achieve an optimal path. Artificial Potential Field (APF) algorithms are known for their simplicity and strong mathematical analysis but their applications are limited to a state space of up to five dimensions due to its inability to work in local minima environments [9]. APF primarily uses the effect of unreal forces that act on the robot, generated by both the goal and obstacle regions. This idea of fictitious forces was given by [8]. A similar concept of directionalizing random samples through Artificial potential fields was initially introduced as Potential Guided Directionalized-RRT* (PGD-RRT*) [20]. Although PGD-RRT* finds an initial path very quickly as compared to RRT* but it fails to converge to optimal path solution. Our proposed Potential Functions based RRT* (P-RRT*) is a variant of the previously proposed PGD-RRT* and extension of APGD-RRT* [21]. It efficiently inculcates APF into RRT* to keep the balance between exploitation and exploration i.e., guided exploration of given space. This inculcation helps P-RRT* to direct random samples in the direction of decreasing potential to provide a quick, optimal solution. Moreover, this also results in lesser dispersion of samples in the configuration space and provides a more memory efficient solution operating at a much faster rate compared to RRT*. This idea of\nguiding samples for improving and theoretically characterizing the convergence rate of asymptotically optimal sampling-based algorithms is novel. As per the authors knowledge, no such technique exists of guiding random samples by APF for fast optimal motion planning. This new algorithm has been evaluated under different scenarios including the local minima environment. It has been observed that in almost all the cases, our P-RRT* is more efficient than RRT*. The remainder of the paper is organized as follows. Section II addresses the problem definition, Section III explain the RRT* and Artificial Potential Fields algorithms while Section IV describes P-RRT* path planning algorithm in detail. Section V gives a brief outline of the implementation of P-RRT* and RRT* under non-holonomic differential constraints. Section VI presents analysis of the of the proposed algorithm in terms of probabilistic completeness, asymptotic optimality, convergence to optimal solution and computational complexity. Section VII provides experimental evidence in support of theoretical results presented in the previous section; whereas Section VIII concludes the paper, also suggesting some future areas of research in this particular domain."}, {"heading": "2 Problem Definition", "text": "This section presents three motion planning problems we will be addressing in this paper, along with the notations we will be using to describe them. Given a set Q, a sequence denoted as {qi}i\u2208N in this set is a mapping from N to Q i.e., i \u2208 N is mapped to qi \u2208 Q. Moreover, for the algorithms described in this paper, each set Q is equipped with remove and add procedures such that Q.add(q) := Q \u222a {q} while Q.remove(q) := Q\\{q}. Let the constant \u03bb \u2208 R+ be a small step size. Let X \u2282 Rd represent the given state space, where d denotes the dimension of state space i.e., d \u2208 N : d \u2265 2. The obstacle and obstacle-free state space is defined as Xobs \u2282 X and Xfree = X\\Xobs respectively. The initial state is denoted as xinit \u2208 Xfree while goal region is denoted as Xgoal \u2282 Xfree. The\nprocedure \u00b5(\u00b7) 1 Given x1, x2 \u2208 X, the Euclidean distance between these two states is defined as d(x1, x2) \u2208 R. The spherical region centered at any state x \u2208 X of radius r \u2208 R|r > 0 is represented by Bx,r := {y \u2208 X : d(y, x) \u2264 r}. Let U : Rd \u2192 R denotes the artificial potential function. The variable \u03c4 : [0, 1]\u2192 X is a path having non-negative and nonzero scalar length. This path \u03c4 is considered feasible if it connects xinit and x \u2208 Xgoal, i.e. \u03c4(0) = xinit and \u03c4(1) \u2208 Xgoal, and lies in the obstacle-free space Xfree. Problem 1 formalizes the feasibility problem of path planning.\nProblem 1 (Feasible Path Planning) Given a triplet {X,Xfree, Xobs}, an initial state xinit and a goal region Xgoal \u2282 Xfree, find a path \u03c4 : [0, 1] \u2192 Xfree such that \u03c4(0) = xinit and \u03c4(1) \u2208 Xgoal. Let \u2211\nfeasible denote the set of all feasible trajectories in the obstacle-free configuration space Xfree. The cost function c(\u00b7) finds the path length in terms of Euclidean distance function. Problem 2 formalizes the optimal path planning problem; finding a feasible path with minimum cost c\u2217.\nProblem 2 (Optimal Path Planning) Assuming that a solution to problem 1 exists and provided with the set of all feasible trajectories\u2211\nfeasible, find a path \u03c4 \u2217 \u2208 \u2211feasible such that\nc(\u03c4\u2217) = {min\u03c4\u2208\u2211feasiblec(\u03c4)}.\nLet t \u2208 R denote the time taken by the algorithm to find a set of all feasible paths \u2211 feasible(solution to problem 1) and computing the optimal path \u03c4\u2217 \u2208 \u2211feasible. The fast path planning problem formalized in problem statement 3 indicates that this optimal path solution must be determined in least possible time.\nProblem 3 (Fast Path Planning) Find the\n1The procedure \u00b5(\u00b7) provides the Lebesgue measure of any given state space e.g. \u00b5(X) denotes the Lebesgue measure of the whole state space X. Lebesgue measure is also called ddimensional volume of the given space. provides the Lebesgue measure of any given state space.\nsolution to problems 1 and 2, if one exists, in least possible time t \u2208 R."}, {"heading": "3 Related Work", "text": "This section briefly explains Optimal Rapidlyexploring Random Trees (RRT*) and Artificial Potential Fields (APF) algorithm, which form the basis of our proposed Potential Function Based-RRT* (PRRT*) algorithm. P-RRT* uses Artificial Potential Fields to guide the random samples picked by RRT* towards the goal for further optimization."}, {"heading": "3.1 RRT*", "text": "This section formally presents the Rapidly-exploring Random Tree Star (RRT*) algorithm [6] that is an extension of the standard RRTs algorithm. Algorithm 1 is slightly modified implementation of RRT*. In this modification, improvements were made to original algorithm in order to enhance computational efficiency of RRT* by reducing the number of calls to its collision checking procedure [19]. Following is a brief description of the main processes involved in its execution:\nSampling: The procedure RandomSample(n)\nAlgorithm 1: RRT*(xinit)\n1 V \u2190 {xinit};E \u2190 \u2205;T \u2190 (V,E); 2 for n\u2190 0 to N do 3 xrand \u2190 RandomSample(n); 4 Xnear \u2190 NearbyNodes(T, xrand, n); 5 if Xnear = \u2205 then 6 Xnear \u2190 NearestNode(xrand, T = (V,E)); 7 L\u2190 GetTuple(xrand, Xnear); 8 xparent \u2190 SelectBestParent(L); 9 if xparent 6= \u2205 then\n10 T = (V,E)\u2190 InsertNode(xrand, xparent, T = (V,E)); 11 E \u2190 RewireNodes(xrand, L,E);\n12 return T = (V,E);\nrandomly samples the given obstacle-free region Xfree to get independent, uniformly distributed configurations.\nNearby Nodes: Considering a configuration x \u2208 X and a random tree T = (V,E) where V \u2282 X and the number of vertices in V is defined as n := |V |, the procedure NearbyNodes(T, x, n) provides a set of nodes Xnear \u2282 V lying within a ball of radius r centered at x i.e.,\nNearby(T, x, n) := {v \u2208 V : d(v, x) \u2264 r :=\n\u03b3( logn\nn )1/d}\nwhere \u03b3 is an independent constant such that \u03b3 > \u03b3\u2217 := (2(1 + 1/d))1/d ( \u00b5(Xfree)\n\u03b6B\n)1/d and d\nrepresents the dimension of the configuration space.\nNearest Node: Given the configuration x \u2208 X, the tree T = (V,E) where V \u2282 X, the NearestNode(x, T ) procedure returns the node v \u2208 V that is nearest to the configuration x in terms of Euclidean distance. This procedure can also be summarize as:\nNearestNode(x, T ) = argminv\u2208V d(v, x)\nLists and Sorting: Given the set X \u2032 \u2282 X and a random state x \u2208 X, the procedure GetTuple(x,X \u2032) returns the sorted list L. Algorithm 2 provides the pseudocode of this procedure. Each element of this list comprises of cost c \u2208 R : c > 0, state x\u2032 \u2208 X \u2032 and the path \u03c4 . The list L is equipped with add and sort functions, the former works similar to the one for sets while the latter sorts the list L in ascending order of cost. Extending: Given the two states x1, x2 \u2208 X, the function ExtendTo(x1, x2) returns a path \u03c4 : [0, 1] \u2192 X such that \u03c4(0) = x1 and \u03c4(1) = x2. The extension procedure provides the straight path, i.e., \u03c4(s) = (1\u2212 s)x1 + sx2; \u2200s \u2208 [0, 1].\nCollision checking: Given two configurations x1, x2 \u2208 X, a path \u03c4 : [0, 1] such that \u03c4(0) = x1 and \u03c4(1) = x2, the procedure CollisonFree(\u03c4) returns true if the path \u03c4 belongs to obstacle-free space Xfree\nAlgorithm 2: GetTuple(xrand, Xnear)\n1 L\u2190 \u2205; 2 for x\u2032 \u2208 Xnear do 3 \u03c4 \u2190 ExtendTo(x\u2032, xrand); 4 c\u2190 c(x\u2032) + c(\u03c4); 5 L\u2190 (x\u2032, c, \u03c4); 6 L.sort(); 7 return L;\notherwise it reports failure.\nAlgorithm 1 explains the RRT* algorithm. Once initialized, the RRT* algorithm begins its iterative processing by picking random samples, xrand, from the obstacle-free configuration space Xfree (Line 3). The algorithm then determines the set of near vertices Xnear, described as the vertices of the random tree that lie within the ball region centered at xrand. If no such vertices exist and the set Xnear computed by the NearbyNodes procedure is empty, the set Xnear is then filled by the NearestNode function (Line 4-6). Once populated, the set Xnear is sorted, forming a tuple arranged in ascending order of cost (Line 7). The sorted list L is used by the SelectBestParent function ( Line 8), which returns the best parent vertex xparent \u2208 Xnear through which the point xinit and xrand can be connected in obstacle free configuration space. Algorithm 3 outlines the implementation SelectBestParent procedure which iterates through each element in the sorted list L and terminates by returning the vertex through which xrand can be connected to the tree in obstacle-free space. Once the algorithm finds such a state, i.e,\nAlgorithm 3: SelectBestParent(L)\n1 for (x\u2032, c, \u03c4) \u2208 L do 2 if CollisionFree(\u03c4) then 3 return x\u2032;"}, {"heading": "4 return \u2205;", "text": "the best parent vertex xparent gets filled, xparent is added to the tree by making xrand its child and then\nrewiring the random tree (Line 9-11). Algorithm 4 gives the pseudocode of this rewiring process. RRT* examines each vertex x\u2032 in list L. If the cost of a path lying in obstacle free space and connecting the initial point xinit to x\n\u2032 through the random sample xrand is less than the existing cost of reaching x \u2032 (Algorithm 4 Line 1-3), then xrand is made into the parent of x\u2032 (Algorithm 4 Line 4-5). Otherwise, no change is made to the tree and RRT* moves on to examine another vertex. This process is performed iteratively for each vertex x\u2032 in the sorted list L.\nAlgorithm 4: RewireNodes(xrand, L,E)\n1 for (x\u2032, c, \u03c4) \u2208 L do 2 if ( c(xrand) + c(\u03c4) ) < c(x\u2032) then 3 if CollisionFree(\u03c4) then 4 x\u2032parent \u2190 GetParent(E, x\u2032); 5 E.remove(x\u2032parent, x\n\u2032); 6 E.add(xrand, x \u2032);"}, {"heading": "7 return E;", "text": ""}, {"heading": "3.2 Artificial Potential Fields", "text": "APF by [8] utilizes gradient descent planning that tries to minimize artificial potential energy. The main robot, denoted as x \u2208 X, and the goal region Xgoal is assigned an attractive potential Uatt while obstacle regions are assigned repulsive potentials Urep. This causes the robot x to be attracted towards the goal and repelled by the obstacles. These attractive and repulsive potentials cause the robot to experience a force \u2212\u2192 F equal to the negated gradient of potentials i.e., \u2212\u2192 F = \u2212 5 U . Under the influence of both attractive and repulsive forces, the robot moves down the slop and reaches the goal region safely i.e., without any collisions. The constants Ka and Kr indicate the scaling factors that are used to scale the magnitude of attractive and repulsive potential, respectively. These factors are dependent upon the configuration space. Attractive potential experienced by the robot is formulated in equation 1. It varies quadratically when the distance function\nd(x, xg) > d \u2217 g. The parameter d \u2217 g is the radius of the circular boundary centered at the goal state xg \u2208 Xgoal, defining the quadratic range. This quadratic function allows the robot to quickly move towards the goal region due to high attractive forces created between the robot at position x and the goal state xg \u2208 Xgoal. However, once the robot enters the circular region centered around xg, the attractive potential starts to vary conically. This allows the robot to move slowly when it comes close to the goal due to reduced attractive potential, thereby preventing it from overshooting the goal region. The attractive force is formulated in equation 2.\nUatt =\n{ Kad 2(x, xg) d(x, xg) > d \u2217 g\nKa(d \u2217 gd(x, xg)\u2212 (d\u2217g)2) d(x, xg) \u2264 d\u2217g\n(1)\n\u2212\u2192 F att =    \u22122Kad(x, xg) d(x, xg) > d\u2217g \u22122d\u2217gKa\nx\u2212 xg d(x, xg) d(x, xg) \u2264 d\u2217g (2)\nRepulsive potential generated by the obstacles Xobs \u2282 X is formulated in equation 4. Equation (3) is used to calculate the distance dmin of the robot x from the closest vertex in the obstacle space Xobs. Repulsive potential is considered zero if the distance dmin is greater than a constant value d \u2217 obs. Such a situation indicates that the robot is at a large distance from the nearest obstacle region. Therefore, to allow the robot to move quickly towards the goal, the repulsive potential is made zero as indicated in equation 4.\ndmin = min x\u2032\u2208Xobs\nd(x, x\u2032) (3)\nUrep =    1 2 Kr ( 1 dmin \u2212 1 d\u2217obs )2 dmin \u2264 d\u2217obs\n0 dmin > d \u2217 obs\n(4)\nThe repulsive force generated due to Xobs is presented in equation 6 and is equal to the negated gradient of repulsive potential indicated in equation 4. The negated gradient of equation 3 is formulated as equation 5, where x\u2032 is the nearest obstacle state in the obstacle space i.e., x\u2032 \u2208 Xobs from the robot\u2019s\ncurrent position x \u2208 X.\n\u2202dmin\n\u2202x = (x\u2212 x\u2032) d(x, x\u2032)\n(5)\n\u2212\u2192 F rep =    Kr( 1 d\u2217obs \u2212 1 dmin ) 1 d2min \u2202dmin \u2202x dmin \u2264 d\u2217obs\n0 dmin > d \u2217 obs\n(6) The net overall potential U is the sum of both attractive and repulsive potentials, while the global force\u2212\u2192 F can be formalized as \u2212\u2192 F = \u2212 5 U . Algorithm 5 indicates the gradient descent procedure used in Artificial Potential Fields where \u03bb is a small incremental distance. The algorithms keeps on iterating until the robot reaches the configuration having zero potential energy (Line 2). However, a configuration where the potential energy is zero can indicate two things; either the robot has reached the goal region or it is stuck in the local minima configuration.\nAlgorithm 5: GradientDescent(xinit)\n1: x\u2190 xinit; 2: while 5U 6= 0 do 3: \u2212\u2192 F \u2190 PotentialGradient(x); 4: x\u2190 x+ \u03bb( \u2212\u2192 F\n|\u2212\u2192F | );\n5: end while"}, {"heading": "4 P-RRT*", "text": "In this section, we present an extension of RRT* called Potential Function Based-RRT* (P-RRT*), which incorporates the Artificial Potential Field [15] algorithm into RRT*. Further explanations are given in the discussion below. Let a potentially guided, random sample be defined as xprand \u2208 Xfree. The random state xrand \u2208 Xfree is incrementally directed downhill in the direction of decreasing attractive potential field gradient by a small discrete step denoted as \u03bb \u2208 R+. Attractive potential gradient decreases as the random sample approaches closer to the goal region. Algorithm 6\nAlgorithm 6: P-RRT*(xinit)\n1 V \u2190 {xinit};E \u2190 \u2205;T \u2190 (V,E); 2 for n\u2190 0 to N do 3 xrand \u2190 RandomSample(n); 4 xprand \u2190 RGD(xrand); 5 Xnear \u2190 NearbyNodes(T, xprand, n); 6 if Xnear = \u2205 then 7 Xnear \u2190 NearestNode(xprand, T =\n(V,E));\n8 L\u2190 GetTuple(xprand, Xnear); 9 xparent \u2190 SelectBestParent(L);\n10 if xparent 6= \u2205 then 11 T = (V,E)\u2190 InsertNode(xprand, xparent, T = (V,E)); 12 E \u2190 RewireNodes(xprand, L,E);\n13 return T = (V,E);\noutlines the implementation of P-RRT* algorithm, in this there is only one additional procedure i.e., RGD(x) which is executed just after the sampling procedure. The random sample xrand is augmented with attractive potential field to get an improved sample xprand, and from now on the algorithm treats xprand as its random sample as shown in the algorithm 6. P-RRT*, uses Randomized Gradient Descent Planning for computing xprand \u2208 Xfree. Gradient Descent planning explained in the previous section computes the next state as a function of the previous state and works iteratively until |5U | \u2192 0, as shown in Algorithm 5. However, in Randomized Gradient Descent (RGD) Planning, next state is independent of the previous state and for each iteration, a random sample xrand \u2208 Xfree is seeded into the RGD(xrand). This random sample is then moved incrementally in the direction of decreasing potential by step size \u03bb to generate xprand \u2208 Xfree. It should be noted here that the constant \u03bb is a small incremental step size as stated in section 2. Since, all the procedure used by P-RRT* are same except RGD(x), therefore only RGD(x) procedure is explained here. Following are the set of procedures on which the RGD(xrand) function relies.\nAttractive Potential Gradient (APG): The proposed algorithm only utilizes quadratic variation in the attractive potential fields, instead of shifting between conical and quadratic variation as done in the original Artificial Potential Fields algorithm. In APF, the robot itself is considered under the influence of potential fields. Therefore, conical attractive potential is used to avoid the robot overshooting the goal region. Since in our proposed algorithm, it is the random samples that are under the influence of potential fields, overshooting is not an issue in our case. Hence, the need for conical variation of potential is eliminated. This quadratic attractive field, shown in figure 1, is described by Equations 7 and 8. In figure 1, the horizontal axis is the position of the random sample xrand, where the goal region Xgoal is at its origin (0, 0). The vertical axis corresponds to the quantity of attractive potential field present. This well shaped curve indicates that farther the random sample xrand \u2208 Xfree from the origin or goal, greater will be the attractive field.\nUatt = d 2(xrand, xgoal) : xgoal \u2208 Xgoal (7)\n\u2212\u2192 F att = \u22122d(xrand, xgoal) : xgoal \u2208 Xgoal (8)\nNearest Obstacle Configuration: This procedure computes the nearest obstacle configuration from the random sample xrand. This procedure utilizes\nequation (3), however in this case, the variable x (i.e., robot configuration) in equation (3) is replaced by the variable xrand (i.e., the random sample). It should be noted that proposed procedure only computes dmin from the point in the obstacle space that is nearest to the random sample. This signifies that just like RRT*, P-RRT* does not require information about obstacle geometry.\nAlgorithm 7 outlines the working of the RGD(xrand) procedure. This function first computes the quadratic attractive potential gradient acting on the independent and identically distributed (iid) sample xrand (Line 3) and then it computes the distance dmin of the random sample from the nearest obstacle configuration (Line 4). Under the influence of the attractive field (Line 8), this random sample is directed in small incremental steps \u03bb \u2208 R+ towards the goal. If at any point, dmin \u2264 d\u2217obs, the procedure terminates immediately, returning the new directed sample xprand, otherwise, the procedure continues to direct the random sample for a limited number of iterations k \u2208 N and then self terminates. The constant d\u2217obs represents the distance from the obstacle space and it is kept very small so that the directed random sample xrand is allowed to move very close to the obstacle region Xobs. The significance of keeping d\u2217obs small will be discussed later in the analysis section. Moreover, the value of k is chosen so as to maintain the balance between exploitation and exploration. Large value of k will result in more exploitation of the configuration space than exploration. Similarly, a very small value will result in more exploration than exploitation."}, {"heading": "5 Implementation using non-", "text": "holonomic wheeled mobile robot (WMR) Poineer 3-DX\nIn this section, a brief outline of the implementation of P-RRT* and RRT* using non-holonomic differential drive Poineer 3-DX robot is presented. Since discussion on kinematic and dynamic model (Kinodynamic model) of Poineer 3-DX does not come\nAlgorithm 7: RGD(xrand)\n1 xprand \u2190 xrand; 2 for n\u2190 0 to k do 3 \u2212\u2192 F att \u2190 APG(Xgoal, xprand); 4 dmin \u2190 NearestObstacle(Xobs, xprand); 5 if dmin \u2264 d\u2217obs then 6 return xprand;"}, {"heading": "7 else", "text": "8 xprand \u2190 xprand + \u03bb ( \u2212\u2192 F att\n|\u2212\u2192F att|\n) ;\n9 return xprand;\nunder the scope of this paper, therefore detailed description can be seen in [14]. Furthermore the solutions to problems 1-3 are now computed under following non-holonomic constraint of differential drive robot, where \u03b8 \u2208 R, denotes the robot orientation.\nsin\u03b8.dx\u2212 cos\u03b8.dy = 0\nA random configuration xrand is sampled from the obstacle free space and it is directed towards the goal region (in case of P-RRT* only). The set of near nodes Xnear is computed (see Algorithm 1 and 6). Then each node in the Xnear set is considered to be the current robot state and a set of allowed control inputs is applied to the robots\u2019 Kinodynamic model in order to estimate its future possible state while extending towards the random sample. Results of this estimation are then used for collision checking. The nearest node x\u2032 \u2208 Xnear which ensures collision-free extension is selected as the best parent for random sample. Moreover, it should also be noted that this procedure of extension is always repeated whenever a tree attempts to connect any two states. For estimation purposes forth order Runge-Kutta method is used and for collision detection tight fitting axisaligned bounding boxes are employed [16]."}, {"heading": "6 Analysis", "text": ""}, {"heading": "6.1 Probabilistic Completeness", "text": "Most sampling-based algorithms ensure probabilistic completeness. Let VALn denote the vertices of the tree generated by an algorithm AL after n iterations. Definition 1 formalizes the notion of probabilistic completeness, an algorithm is probabilistically complete if the probability of finding a feasible path (solution to problem 1), if one exists, approaches one as the number of iterations approaches infinity.\nDefinition 1 (Probabilistic Completeness) Given the path planning problem {Xfree, xinit,Xgoal}, an algorithm AL ensures probabilistic completeness if and only if limn\u2192\u221e P(VALn \u2229 Xgoal 6= \u2205) = 1; and the algorithm AL also connects xinit to xgoal \u2208 Xgoal.\nRRT ensures probabilistic completeness and it has also been proved that its variant, i.e. RRT* [6], also inherits this property from the original RRT as formulated in Theorem 1.\nTheorem 1 [6] Given the path planning problem {Xfree, xinit,Xgoal}, the probability of finding the solution to Problem 1, if one exists, approaches one as the number of iterations approach infinity, i.e.,\nlimn\u2192\u221e P({VRRT \u2217\nn \u2229Xgoal 6= \u2205}) = 1 Similar to RRT*, we claim that Theorem 1 holds for P-RRT* as well, which is stated formally in Theorem 2 as follow.\nTheorem 2 Given a path planning problem, if a feasible path solution exists, then\nlimn\u2192\u221e P({VP\u2212RRT \u2217\nn \u2229Xgoal 6= \u2205}) = 1 Sketch of proof: The proof of above theorem is based on three arguments: 1) By convention we have defined VRRT\u22170 = VP\u2212RRT \u2217\n0 = xinit (See Algorithm 1 and 6). Therefore, just like RRT* the random tree generated by P-RRT* necessarily includes xinit as one of its states; 2) Just like RRT*, the tree generated by P-RRT* is also a connected tree i.e., whenever a random sample is chosen, it is connected\nto its nearest neighbor state within the tree; and 3) P-RRT* directs the random samples towards the goal region Xgoal, therefore, the probability that the tree generated by P-RRT* will find a goal region approaches to one as the number of iterations approach infinity. Based on the above three arguments, it can be stated that given the path planning problem, the probability that P-RRT* will find a feasible path solution, if one exist, approaches to one as the iterations approaches to infinity. Hence, just like RRT*, the P-RRT* algorithm also ensures probabilistic completeness.\nRest of this section is devoted to emphasize one of the important feature of P-RRT* due to goal directed sampling. Let an attraction sequence A = {A0, A1, . . . , Ak} of length k \u2208 R+, be a finite sequence of sets such that (i) A0 = {xinit}, (ii) Ak \u2208 Xgoal, and (iii) for each attractor An , there exists a set called basin of attraction Bn \u2286 X such that d(x, y) < d(x, z) for any x \u2208 An\u22121 , y \u2208 An and z \u2208 X\\Bn. Given the attraction sequence of finite length k, let p be defined as:\nmin (\n\u00b5(A) \u00b5(Xfree)\n) ; \u2200n \u2208 (0, k]\nFor RRT* algorithm, it has been proven that, if there exists a feasible path, then the probability that RRT* fails to find a solution exponentially decays to zero as the number of iterations approach infinity. This is formally stated in theorem 2.\nTheorem 3 [6] Given a path planning problem {Xfree, xinit,Xgoal}, if there exits an attraction sequence A of length k, then P ( {VRRT\u2217n \u2229 Xgoal = \u2205} ) \u2264 e\u221212 (np\u22122k).\nAn attraction sequence corresponds to the sequence to which the system eventually evolves. In this case it is the feasible path solution which P-RRT* is aiming to determine. Since P-RRT* directs the random samples toward the goal region, therefore, it can be stated that if there exist a feasible path then the probability that P-RRT* fails to find a solution decays exponentially to zero more\nquickly as compared to RRT*, as the number of iterations approach infinity. Theorem 4 formally states the above statement.\nTheorem 4 Given a path planning problem, if a feasible path solution and an attraction sequence of length k exists, then limn\u2192\u221e P ( {VP\u2212RRT\u2217n \u2229 Xgoal = \u2205} ) \u2264 e\u221212 \u03b1(np\u22122k), where \u03b1 \u2208 R+.\nHence the positive consequence of goal directed sampling by P-RRT* is formalized as follow in theorem 5. Theorem 5 states that if there exist a feasible path, the probability that P-RRT* fails to find a solution decays exponentially faster as compared to RRT*, as the number of iterations approach infinity.\nTheorem 5 Given a path planning problem, if there exists an attraction sequence of length k exists, then limn\u2192\u221e P ( {VP\u2212RRT\u2217n \u2229 Xgoal = \u2205} ) <\nP ( {VRRT\u2217n \u2229 Xgoal = \u2205} ) ."}, {"heading": "6.2 Asymptotic Optimality", "text": "The proposed algorithm P-RRT* inherits the asymptotic optimality property from the original RRT*. An algorithm is asymptotically optimal if it computes a minimum cost continuous path solution \u03c4\u2217 : [0, 1] such that \u03c4\u2217(0) = xinit and \u03c4\u2217(1) \u2208 Xgoal, all the while avoiding any collisions in a cluttered environment. This section analyses the P-RRT* algorithm for its ability to solve problem 2 by ensuring almost sure-convergence to optimal path solution, similar to RRT* based on the assumptions stated below.\nAssumption 1 (Additivity of the cost procedure) For any set of paths in an collision-free space Xfree i.e. \u03c41, \u03c42 \u2208 \u2211 feasible, the cost function c(\u00b7) must satisfy: c(\u03c41) \u2264 c(\u03c41|\u03c42) : c(\u03c41|\u03c42) = c(\u03c41) + c(\u03c42).\nAssumption 2 (Continuity of the cost proce-\ndure) The procedure c(\u00b7) is a uniformly continuous function such that there exists a Lipschitz constant \u03b5 for any two paths \u03c41 : [0, s1] and \u03c42 : [0, s2], of similar path lengths i.e., |c(\u03c41)\u2212 c(\u03c42)| \u2264 \u03b5 sup\u03c8:[0,1]\u2016c(\u03c41(\u03c8s1))\u2212 c(\u03c42(\u03c8s2))\u2016.\nAssumption 3 (\u03b4-spacing of the obstacle) For any state x \u2208 Xfree, there exists a ball region that lies entirely in collision-free space Xfree (i.e., Bx\u2032,\u03b4 \u2282 Xfree) of radius \u03b4 \u2208 R>0 centered around another point x\u2032 \u2208 Xfree, such that x \u2208 Bx\u2032,\u03b4.\nAssumption 1 simply states that the longer path has a higher cost than the shorter one. Assumption 2 ensures that two paths of approximately same length that are very close to one another have a similar cost. Finally, Assumption 3 asserts that there exists some collision-free space around trajectories so that the algorithm can converge them to an optimal path solution. Based on the aforementioned assumptions, the following theorem formalizes the asymptotic optimality of RRT* algorithm.\nTheorem 6 (Asymptotic optimality of RRT* [6] Let Assumptions 1, 2 and 3 hold; then the RRT* algorithm is asymptotic optimal whenever d \u2265 2 and \u03b3 > \u03b3\u2217 := 2d(1 + 1/d)\u00b5(Xfree).\nRecall that the P-RRT* only introduces intelligent sampling heuristic into RRT* thus directionalizing the random samples. The rest of the procedures are same as the RRT*. Therefore theorem 6 holds for P-RRT* just as it holds for RRT* and its proof is similar to the proof of lemma 71 for RRT* [6], based on the Borel-Cantelli lemma. Moreover the value of \u03b3 is always chosen to be larger than \u03b3\u2217 (see definition of procedure NearbyNodes) which ensures that at large number of iterations, the ball of radius \u03b4 centered at x\u2032 \u2208 Xfree will include atleast one node from the tree T = (V,E). This implies that there is a high probability that the rewiring procedure explained earlier will rewire some paths to minimize their cost functions. Hence given two paths \u03c41, \u03c42 \u2208 \u2211 feasible such that both are the closest to each other in term of path variation \u2016\u03c41\u2212 \u03c42\u2016, the\nprobability of minimizing path variation to zero is one, when the number of iterations approach infinity. Hence theorem 7 formally states the asymptotic optimality property of P-RRT*.\nTheorem 7 (Asymptotic optimality of PRRT*) Let Assumptions 1, 2 and 3 hold; then the P-RRT* algorithm is asymptotic optimal whenever d \u2265 2 and \u03b3 > \u03b3\u2217 := 2d(1 + 1/d)\u00b5(Xfree)."}, {"heading": "6.3 Fast convergence to optimal path solution", "text": "P-RRT* inherits asymptotic optimality property from the original RRT* algorithm as discussed in the previous section. This section analyses the P-RRT* algorithm for its ability to solve problem 3 by ensuring almost fast convergence to optimal path solution. To understand the notion of fast convergence, a few new terms are introduced which are as follow. Let \u03b4 \u2208 R+, then any random configuration x \u2208 Xfree can be defined as a \u03b4-interior state Xint\u03b4 if the ball region of radius \u03b4 centered at x lies entirely in an obstacle-free space. Moreover any random configuration can be defined as a \u03b4-exterior state if the ball region of radius \u03b4 centered at x lies partially in an obstacle-free space. Let Xint\u03b4 and Xext\u03b4 be subsets of the obstacle-free space Xfree. Xint\u03b4 comprises of all \u03b4-interior states i.e. Xint\u03b4 := {x \u2208 Xfree : Bx,\u03b4 \u2286 Xfree}, while Xext\u03b4 = Xfree\\Xint\u03b4 . Therefore, Xext\u03b4 states are those states that lie close to obstacle region but not inside it. Based upon the aforementioned assumptions, following definitions describe path solutions with strong \u03b4-clearance and weak \u03b4-clearance, while definition 4 describes the optimal path.\nDefinition 2 (Path with strong \u03b4-clearance)A feasible path solution \u03c4 : [0, 1] is said to have strong \u03b4-clearance if \u03c4(s) \u2208 Xint\u03b4 ;\u2200s \u2208 [0, 1].\nDefinition 3 (Path with weak \u03b4-clearance)A collision-free path \u03c41 : [0, 1] is said to have weak \u03b4-clearance if there exits a collision-free path \u03c42 having strong \u03b4-clearance such that i) both paths\nhave same ends i.e. \u03c41(0) = \u03c42(0) and \u03c41(1) = \u03c42(1); ii) path \u03c41 can be deformed to \u03c42 by a homotopy function h : [0, 1] where h(0) = \u03c41, h(1) = \u03c42 and h(s) 7\u2192 Xfree,\u2200s \u2208 [0, 1] iii) for a range y \u2208 (0, 1], there exists \u03b4y \u2208 (0, \u03b4] such that the homotopy function h(y) has strong \u03b4y-clearance.\nDefinition 4 (Optimal path solution)A collision-free path is said to be optimal \u03c4\u2217 if it has weak \u03b4-clearance\nThe proposed P-RRT* algorithm is build upon the definition of optimal path solution. Since optimal path solution exists in region with weak \u03b4-clearance, following lemma states that the proposed sampling heuristic (see Algorithm 7) tries to direct the random samples towards the regions where probability of having optimal path solution is high. While lemma 2 states that P-RRT* directs the random sample towards the goal region. Based upon these two lemmas a theorem 8 has been stated which act as an evidence that P-RRT* ensures rapid convergence to optimal solution.\nLemma 1 Given a problem {Xfree, xinit,Xgoal},\nthe potential guided sampling heuristic RGD(x) attempts to direct the random sample x \u2208 Xfree so that P(x \u2208 Xext\u03b4) > 0, for some value of \u03b4 > 0.\nSketch of proof: In a cluttered configuration space X, the potential guided sampling heuristic directs the random sample xrand \u2208 Xfree down the slope under the influence of the attractive force. This continues until the sample reaches very close to the obstacles space Xobs or the loop limit is reached (see implementation of algorithm 7). Therefore the proposed heuristic always tries to achieve a weak \u03b4-clearance for the directed samples. Hence it can be concluded that there exists a good probability that a sample xrand belongs to the region with weak \u03b4-clearance i.e. Xext\u03b4 . It should also be noted that a large value of d\u2217obs will not allow the random sample to reach the region with weak \u03b4-clearance, therefore, solution to problem 2 cannot be determined. Moreover weak \u03b4-clearance does not require the nodes to be atleast \u03b4 distance away from obstacles. In fact a robustly optimal path with many nodes lying on the boundary of obstacles can still have weak \u03b4-clearance. Therefore a very small value of dobs is needed to solve problem 2.\nFollowing lemma 2 states that the proposed algorithm also guides the random samples towards the goal region.\nLemma 2 Given the path planning problem {Xfree, xinit,Xgoal}, the proposed potential guided sampling heuristic RGD(x) directs the random sample down the potential gradient slope i.e. towards the goal region Xgoal in the obstacle-free space Xfree.\nSketch of proof: An argument for lemma 2 can be given by considering Voronoi regions of the directed nodes as shown in figure 2. Figure 2a depicts the position of starting and goal regions while figure 2b and figure 2c represent the Voronoi diagrams of the directed vertices in the same environment. Unlike RRT* or RRT, the sampling by P-RRT* results in incremental reduction in the size of the Voronoi regions in the direction towards the goal. Therefore it can be said that the proposed heuristic\nhas a Voronoi bias that effectively guides the random samples towards the goal region. Figure 2d to 2f, depicts the Voronoi biasing of RRT*. Moreover, due to this uniform biasing of RRT*, it is able to compute path after 2500 samples, however, due to goal directed Voronoi bias the proposed P-RRT* is able to compute the optimal solution after picking just 60 samples from the configuration space. Based on lemma 1 and 2 stated above, the distinguishing features of P-RRT* can be highlighted. Without further argument it can be said, as formalized in the following theorem, that our proposed heuristic guides the random samples toward the goal region in such a manner so that the guided samples xprand also have weak \u03b4-clearance in cluttered environments.\nTheorem 8 (Potential guided sampling heuristic RGD(x)) Let lemma 1 and 2 hold; then the RGD(x) heuristic guides the random samples towards the goal region in such a manner so that P(xprand \u2208 Xext\u03b4) > 0.\nHence, based on definition 4 of optimal path solution and theorem 8, it can be concluded that the proposed algorithm P-RRT* computes the optimal path very quickly."}, {"heading": "6.4 Computational Complexity", "text": "This section aims to compare the computational complexities of P-RRT* and RRT*. Let SRRT\u2217n and SP\u2212RRT\u2217n denote the number of steps executed per iteration n by RRT* and P-RRT* respectively. In the proposed algorithm, the only additional procedure is RGD(xinit), while the rest of the procedures are exactly the same as used by RRT*. Therefore only the RGD(xinit) procedure is analyzed for its computational load. It is to be noted that the procedures in function RGD can be executed in a constant number of steps and are independent of the number of nodes present in the tree. Furthermore, the algorithm has to compute the nearest obstacle configuration from any random state x \u2208 Xfree (Equation 3). Finding the nearest neighbor is a well known problem and\nvarious algorithms have been implemented in this domain. However, the lower bound of complexity of the algorithm by [1] indicates that nearest neighbor searching requires atleast logarithmic time log(n). Implementing the computationally optimal algorithm in [1] for computing nearest obstacle configuration under fixed dimension, implies that it has to run in \u2126(logn) time. Since, the algorithm is computationally optimal in fixed dimensions, following lemma states that the computational complexity of executing Equation 3 is nothing more than \u2126(logn) time.\nLemma 3 Since the expected limit of number of steps executed by RRT* at each iteration is atleast of the order of log(Nn) time, implementing the computationally optimal algorithm given in [1] under fixed dimensions for computing nearest obstacle configuration, implies that there exists a constant \u03c6RRT\u2217 \u2208 R+ i.e.,\nlimn\u2192\u221e E [ SRRT\u2217n log(Nn) ] \u2265 \u03c6RRT\u2217\n.\nHence, if lemma 3 holds, then it can be concluded that RRT* and P-RRT* has same asymptotic computational complexity as formalized in the following theorem.\nTheorem 9 Assuming that lemma 3 holds, there exists a constant \u03c6 \u2208 R+ such that limn\u2192\u221e E\n[ SP\u2212RRT\u2217n SRRT\u2217n ] \u2264 \u03c6 ."}, {"heading": "7 Experimental Results", "text": "This section presents simulations performed on a 2.4GHz Intel corei5 processor with 4GB RAM. Performance results of our P-RRT* algorithm are compared with RRT*. For proper comparison, experimental parameters and configuration space size were kept same for both algorithms. Since sampling based algorithms exhibit large variations in results, the algorithms were run upto 50 times for each type of environment. Maximum, minimum and average number of iterations n as well as time t (in seconds) utilized by each algorithm to reach optimal path solution is presented in the table 1. To restrain the computa-\ntional time within reasonable limits, maximum limit for the number of tree nodes was kept at 5 million. The column fail in the tables denotes the number of runs for which the corresponding algorithm failed to find an optimal path solution within node limits. The variable c\u2217 represents the cost of optimal path returned by the algorithm in terms of Euclidean distance function. Moreover, for P-RRT* algorithm \u03bb = d\u2217obs = 0.1, while k = 90. However, it was noticed from the experiments that suitable range for k is 80-100. Although, Artificial Potential Field Algorithm suffered from local minima problem, but, since the proposed P-RRT* algorithm only considers the attractive potential gradient, therefore, the P-RRT* algorithm does not inherit this limitation. Figure 3 demonstrates the working of both algorithms in a local minima environment. Figures 3a to 3d and Figures 3e to 3h show convergence progress of P-RRT* and RRT* respectively. It can be seen from these figures that P-RRT* is converging more quickly as compared to RRT* and unlike RRT*, the tree maintained by P-RRT* is directionalized towards the goal region. Figures 4 show the working of P-RRT* and RRT* in a 2D cluttered environment. Figure 4a and 4b demonstrates the initial path and final path solution of PRRT*. Moreover, it can be seen that P-RRT* takes lesser time and iterations (n=200, t=0.045s) as compared to RRT* (n=16063, t= 0.57s) for finding the initial path. Similarly, P-RRT* takes a reasonable number of iterations and time (n=3000, t= 0.65s) to find the optimal trajectory whereas RRT* is not able to find an optimal solution even after 5 million iterations. Moreover, in Figure 4d, half of the region is fully covered by pink red color coating, which is due to the large number of edges resulting from large number of samples that were generated in five million iterations. Figure 5 represents two different complex mazes in 2D environment. In figure 5a and 5b, the start and goal regions, while very close together, require a path solution that traverses the length of a maze and stretches away from the goal. Once again, P-RRT* takes fewer iterations and therefore less time to find optimal path solution as compared to RRT*, as summarized in the table 1. Yet another complex maze environment is presented in Figure 5c and 5d, P-RRT* finds initial and final optimal path much faster than RRT*. Moreover, path returned by RRT* even after 5 million iterations is not an optimal path solution. Figures 6, 7 and 8 depict different scenarios in three dimensional space. Their results are summarized in the table I. It can be seen that a similar trend is followed by the algorithms in all environments i.e., P-RRT* rapidly converges to optimal as compared to RRT*. Figure 10a compares the convergence rate of P-RRT* and RRT* in fifty different environments comprising of both 2D as well as 3D environments. Let initial feasible path denoted \u03c4init \u2208 \u2211 feasible is computed in tinit time while optimal path solution denoted as \u03c4\u2217 \u2208 \u2211feasible is computed in topt time. Then the convergence rate is defined as\nc(\u03c4init)\u2212 c(\u03c4\u2217) topt \u2212 tinit . Since\nthe process of convergence to optimal path solution begins after finding initial feasible path solution, convergence rate is calculated after initial path computation. It can be seen in the figure 10a that the convergence rate of P-RRT* remains significantly higher than RRT*, which authenticates fast converging capability of P-RRT*.\nFigure 10c shows memory consumed in bytes by these two algorithms to achieve optimal/near optimal path in twenty different environments. Since, P-RRT* uses lesser iterations as compared to RRT*, it therefore consumes lesser memory for any given environment. Fixed cost is defined in terms of the average Euclidean distance of the most optimized path found by P-RRT* after several runs in a certain 3D environment. RRT* is tested to achieve this fixed cost in the same particular environment, and the result is shown in Figure 13. It can be seen from this figure that RRT* takes more time for converging the feasible path with strong \u03b4-clearance to the feasible path with weak \u03b4-clearance as compared to P-RRT*. Since RRT* consumes more time for converging the path solution therefore it has slower convergence rate as compared to P-RRT*. Figure 14 shows the running time ratio of P-RRT* over RRT* after each iteration is executed. It can be seen that as the number of iterations increases, the running time ratio reaches a constant value. As a matter of fact, in this specific environment, the average amount of time taken by our proposed P-\nRRT* algorithm to determine a viable path to the goal was seen to be barely 1.6 times that of RRT*. Figure 10 demonstrates the effect of k parameter, of P-RRT*, on exploration and exploitation of configuration space. It can be seen that the lower value of k (figure 10a) biases the P-RRT* toward exploration while higher value (figure 10c) leads to more exploitation. It should be noted that the balance between exploitation and exploration is important to allow the algorithm to work in all types of environments. Figure 12 shows the working of P-RRT* and RRT*, under non-holonomic differential constrains, in a 2-D local minima environment. Figure 12a and 12b show the final path solutions of P-RRT* and RRT* respectively. Last row of table 1 summarizes the results of both the algorithm in this environment with differential constraints and it can be seen that P-RRT* takes lesser time and iterations (n=10431, t=1.93s) as compared to RRT* (n=954827, t= 62.9s) for finding the optimal path. Finally, figure 11 shows the implementation of P-RRT* on Poineer 3-DX robot using Player/Stage open source platform."}, {"heading": "8 Conclusions and Future work", "text": "Recently, probabilistically complete sampling based motion planning algorithms have gained esteem due to their ability in finding a path irrespective of obstacles\u2019 geometry. RRT* assures asymptotic optimality but is not a memory efficient algorithm and has a\nslow rate of convergence. Potential Function BasedRRT* (P-RRT*) addresses this problem and provides a solution by incorporating Artificial Potential Field Algorithm into RRT*. It is proven both experimentally and analytically that our proposed P-RRT* algorithm i) has same asymptotic computational complexity as that of RRT*; ii) inherits asymptotic optimality from RRT*; iii) does not suffer from local minima problem; iv) provides faster convergence to optimal path solution as compared to RRT*; v) utilizes lesser memory by sufficiently reducing number of iterations required and time consumed to compute a more optimized solution as compared to RRT*. In our future proceedings, we hope to employ P-RRT* for online motion planning, since the proposed algo-\nrithm allows faster convergence and determines the optimal path solution very quickly, therefore, it can be a very efficient solution to real time motion planning problems."}], "references": [{"title": "An optimal algorithm for approximate nearest neighbor searching fixed dimensions", "author": ["S. Arya", "D.M. Mount", "N.S. Netanyahu", "R. Silverman", "A.Y. Wu"], "venue": "Journal of the ACM (JACM), 45(6):891\u2013923,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1998}, {"title": "A subdivision algorithm in configuration space for findpath with rotation", "author": ["R.A. Brooks", "T. Lozano-Perez"], "venue": "Systems, Man and Cybernetics, IEEE Transactions on, (2):224\u2013233,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1985}, {"title": "The complexity of robot motion planning", "author": ["J. Canny"], "venue": "The MIT press,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1988}, {"title": "A survey of motion planning algorithms from the perspective of autonomous uav guidance", "author": ["C. Goerzen", "Z. Kong", "B. Mettler"], "venue": "Journal of Intelligent and Robotic Systems, 57(1-4):65\u2013100,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2010}, {"title": "Incremental sampling-based algorithms for optimal motion planning", "author": ["S. Karaman", "E. Frazzoli"], "venue": "arXiv preprint arXiv:1005.0416,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2010}, {"title": "Samplingbased algorithms for optimal motion planning", "author": ["S. Karaman", "E. Frazzoli"], "venue": "The International Journal of Robotics Research, 30(7):846\u2013894,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2011}, {"title": "Probabilistic roadmaps for path planning in high-dimensional configuration spaces", "author": ["L.E. Kavraki", "P. Svestka", "J.-C. Latombe", "M.H. Overmars"], "venue": "IEEE transactions on Robotics and Automation, 12(4):566\u2013580,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1996}, {"title": "Real-time obstacle avoidance for manipulators and mobile robots", "author": ["O. Khatib"], "venue": "The international journal of robotics research, 5(1):90\u201398,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1986}, {"title": "Potential field methods and their inherent limitations for mobile robot navigation", "author": ["Y. Koren", "J. Borenstein"], "venue": "Robotics and Automation, 1991. Proceedings., 1991 IEEE International Conference on, pages 1398\u20131404. IEEE,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1991}, {"title": "Interactive manipulation planning for animated characters", "author": ["J. Kuffner Jr", "J.-C. Latombe"], "venue": "Computer Graphics and Applications, 2000. Proceedings. The Eighth Pacific Conference on, pages 417\u2013418. IEEE,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2000}, {"title": "On the expected complexity of random path planning", "author": ["F. Lamiraux", "J.-P. Laumond"], "venue": "Robotics and Automation, 1996. Proceedings., 1996 IEEE International Conference on, volume 4, pages 3014\u20133019. IEEE,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1996}, {"title": "Motion planning: A journey of robots, molecules, digital actors, and other artifacts", "author": ["J.-C. Latombe"], "venue": "The International Journal of Robotics Research, 18(11):1119\u20131128,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1999}, {"title": "Rapidly-exploring random trees a ew tool for path planning", "author": ["S.M. LaValle"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1998}, {"title": "Planning algorithms", "author": ["S.M. LaValle"], "venue": "Cambridge university press,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2006}, {"title": "Artificial potential field based path planning for mobile robots using a virtual obstacle concept", "author": ["M.C. Lee", "M.G. Park"], "venue": "Advanced Intelligent Mechatronics, 2003. AIM 2003. Proceedings. 2003 IEEE/ASME International Conference on, volume 2, pages 735\u2013740. IEEE,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2003}, {"title": "Collision detection: Algorithms and applications", "author": ["M.C. Lin"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1996}, {"title": "An algorithm for planning collision-free paths among polyhedral obstacles", "author": ["T. Lozano-P\u00e9rez", "M.A. Wesley"], "venue": "Communications of the ACM, 22(10):560\u2013570,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1979}, {"title": "Asymptoticallyoptimal path planning for manipulation using incremental sampling-based algorithms", "author": ["A. Perez", "S. Karaman", "A. Shkolnik", "E. Frazzoli", "S. Teller", "M.R. Walter"], "venue": "Intelligent Robots and Systems (IROS), 2011 IEEE/RSJ International Conference on, pages 4307\u20134313. IEEE,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2011}, {"title": "Potential guided directional-rrt* for accelerated motion planning in cluttered environments", "author": ["A.H. Qureshi", "K.F. Iqbal", "S.M. Qamar", "F. Islam", "Y. Ayaz", "N. Muhammad"], "venue": "Mechatronics and Automation (ICMA), 2013 IEEE International Conference on, pages 519\u2013 524. IEEE,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2013}, {"title": "Adaptive potential guided directional-rrt", "author": ["A.H. Qureshi", "S. Mumtaz", "K.F. Iqbal", "B. Ali", "Y. Ayaz", "F. Ahmed", "M.S. Muhammad", "O. Hasan", "W.Y. Kim", "M. Ra"], "venue": "Robotics and Biomimetics (ROBIO), 2013 IEEE International Conference on, pages 1887\u20131892, Dec", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2013}, {"title": "On the piano movers problem", "author": ["J.T. Schwartz", "M. Sharir"], "venue": "ii. general techniques for computing topological properties of real algebraic manifolds. Advances in applied Mathematics, 4(3):298\u2013351,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1983}, {"title": "Medical robotics in computer-integrated surgery", "author": ["R.H. Taylor", "D. Stoianovici"], "venue": "Robotics and Automation, IEEE Transactions on, 19(5):765\u2013781,", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2003}], "referenceMentions": [{"referenceID": 11, "context": "Applications of this field are not only restricted to robotics [12], but finds application in various other fields such as computer animation [10], medical [23], modern industry [14] and in our daily life [18].", "startOffset": 63, "endOffset": 67}, {"referenceID": 9, "context": "Applications of this field are not only restricted to robotics [12], but finds application in various other fields such as computer animation [10], medical [23], modern industry [14] and in our daily life [18].", "startOffset": 142, "endOffset": 146}, {"referenceID": 21, "context": "Applications of this field are not only restricted to robotics [12], but finds application in various other fields such as computer animation [10], medical [23], modern industry [14] and in our daily life [18].", "startOffset": 156, "endOffset": 160}, {"referenceID": 13, "context": "Applications of this field are not only restricted to robotics [12], but finds application in various other fields such as computer animation [10], medical [23], modern industry [14] and in our daily life [18].", "startOffset": 178, "endOffset": 182}, {"referenceID": 20, "context": "Many complete motion planning algorithms exist [22] [17] but are often computationally inefficient [3] for common practical applications [6].", "startOffset": 47, "endOffset": 51}, {"referenceID": 16, "context": "Many complete motion planning algorithms exist [22] [17] but are often computationally inefficient [3] for common practical applications [6].", "startOffset": 52, "endOffset": 56}, {"referenceID": 2, "context": "Many complete motion planning algorithms exist [22] [17] but are often computationally inefficient [3] for common practical applications [6].", "startOffset": 99, "endOffset": 102}, {"referenceID": 5, "context": "Many complete motion planning algorithms exist [22] [17] but are often computationally inefficient [3] for common practical applications [6].", "startOffset": 137, "endOffset": 140}, {"referenceID": 7, "context": "Algorithms providing resolution completeness include the example of Artificial Potential Fields (APF) [8] and cell decomposition methods [2].", "startOffset": 102, "endOffset": 105}, {"referenceID": 1, "context": "Algorithms providing resolution completeness include the example of Artificial Potential Fields (APF) [8] and cell decomposition methods [2].", "startOffset": 137, "endOffset": 140}, {"referenceID": 8, "context": "Although pure exploitation allows APF to quickly compute the solution but it also causes APF to suffer from the problem of local minima [9].", "startOffset": 136, "endOffset": 139}, {"referenceID": 10, "context": "To overcome the problem of inefficiency, computationally efficient sampling based algorithms [11] were introduced.", "startOffset": 93, "endOffset": 97}, {"referenceID": 6, "context": "The most effective of these were Probabilistic Road Maps (PRM) [7] and Rapidlyexploring Random Trees [13], ensuring probabilistic completeness.", "startOffset": 63, "endOffset": 66}, {"referenceID": 12, "context": "The most effective of these were Probabilistic Road Maps (PRM) [7] and Rapidlyexploring Random Trees [13], ensuring probabilistic completeness.", "startOffset": 101, "endOffset": 105}, {"referenceID": 5, "context": "However, most online motion planning problems can be solved as single-query problems instead [6].", "startOffset": 93, "endOffset": 96}, {"referenceID": 12, "context": "Rapidly Growing Random Tree algorithms were mainly developed for motion planning problems with differential constraints and for single query problems [13].", "startOffset": 150, "endOffset": 154}, {"referenceID": 5, "context": "Recently, an extension of Rapidly-exploring Random Trees algorithm called Rapidly-exploring Random Tree star (RRT*) [6] was proposed which computes an initial path same as RRT but continues to perform further iterations, increasing the number of samples in the configuration space to optimize this initial path, thereby ensuring asymptotic optimality [5].", "startOffset": 116, "endOffset": 119}, {"referenceID": 4, "context": "Recently, an extension of Rapidly-exploring Random Trees algorithm called Rapidly-exploring Random Tree star (RRT*) [6] was proposed which computes an initial path same as RRT but continues to perform further iterations, increasing the number of samples in the configuration space to optimize this initial path, thereby ensuring asymptotic optimality [5].", "startOffset": 351, "endOffset": 354}, {"referenceID": 5, "context": "This feature is not provided by the RRTs [6].", "startOffset": 41, "endOffset": 44}, {"referenceID": 3, "context": "mal path solution is itself a challenging problem, but fast convergence to optimal solution is also important for most online motion planning problems [4].", "startOffset": 151, "endOffset": 154}, {"referenceID": 7, "context": "This paper introduces the idea of potentially guided, directionalized sampling by incorporating Artificial Potential Field Algorithm (APF) [8] into RRT*, thus resulting into guided exploration of given environment.", "startOffset": 139, "endOffset": 142}, {"referenceID": 8, "context": "Artificial Potential Field (APF) algorithms are known for their simplicity and strong mathematical analysis but their applications are limited to a state space of up to five dimensions due to its inability to work in local minima environments [9].", "startOffset": 243, "endOffset": 246}, {"referenceID": 7, "context": "This idea of fictitious forces was given by [8].", "startOffset": 44, "endOffset": 47}, {"referenceID": 18, "context": "A similar concept of directionalizing random samples through Artificial potential fields was initially introduced as Potential Guided Directionalized-RRT* (PGD-RRT*) [20].", "startOffset": 166, "endOffset": 170}, {"referenceID": 19, "context": "Our proposed Potential Functions based RRT* (P-RRT*) is a variant of the previously proposed PGD-RRT* and extension of APGD-RRT* [21].", "startOffset": 129, "endOffset": 133}, {"referenceID": 0, "context": "The variable \u03c4 : [0, 1]\u2192 X is a path having non-negative and nonzero scalar length.", "startOffset": 17, "endOffset": 23}, {"referenceID": 0, "context": "Problem 1 (Feasible Path Planning) Given a triplet {X,Xfree, Xobs}, an initial state xinit and a goal region Xgoal \u2282 Xfree, find a path \u03c4 : [0, 1] \u2192 Xfree such that \u03c4(0) = xinit and \u03c4(1) \u2208 Xgoal.", "startOffset": 140, "endOffset": 146}, {"referenceID": 5, "context": "This section formally presents the Rapidly-exploring Random Tree Star (RRT*) algorithm [6] that is an extension of the standard RRTs algorithm.", "startOffset": 87, "endOffset": 90}, {"referenceID": 17, "context": "In this modification, improvements were made to original algorithm in order to enhance computational efficiency of RRT* by reducing the number of calls to its collision checking procedure [19].", "startOffset": 188, "endOffset": 192}, {"referenceID": 0, "context": "Extending: Given the two states x1, x2 \u2208 X, the function ExtendTo(x1, x2) returns a path \u03c4 : [0, 1] \u2192 X such that \u03c4(0) = x1 and \u03c4(1) = x2.", "startOffset": 93, "endOffset": 99}, {"referenceID": 0, "context": ", \u03c4(s) = (1\u2212 s)x1 + sx2; \u2200s \u2208 [0, 1].", "startOffset": 30, "endOffset": 36}, {"referenceID": 0, "context": "Collision checking: Given two configurations x1, x2 \u2208 X, a path \u03c4 : [0, 1] such that \u03c4(0) = x1 and \u03c4(1) = x2, the procedure CollisonFree(\u03c4) returns true if the path \u03c4 belongs to obstacle-free space Xfree", "startOffset": 68, "endOffset": 74}, {"referenceID": 7, "context": "APF by [8] utilizes gradient descent planning that tries to minimize artificial potential energy.", "startOffset": 7, "endOffset": 10}, {"referenceID": 14, "context": "In this section, we present an extension of RRT* called Potential Function Based-RRT* (P-RRT*), which incorporates the Artificial Potential Field [15] algorithm into RRT*.", "startOffset": 146, "endOffset": 150}, {"referenceID": 13, "context": "under the scope of this paper, therefore detailed description can be seen in [14].", "startOffset": 77, "endOffset": 81}, {"referenceID": 15, "context": "For estimation purposes forth order Runge-Kutta method is used and for collision detection tight fitting axisaligned bounding boxes are employed [16].", "startOffset": 145, "endOffset": 149}, {"referenceID": 5, "context": "RRT* [6], also inherits this property from the original RRT as formulated in Theorem 1.", "startOffset": 5, "endOffset": 8}, {"referenceID": 5, "context": "Theorem 1 [6] Given the path planning problem {Xfree, xinit,Xgoal}, the probability of finding the solution to Problem 1, if one exists, approaches one as the number of iterations approach infinity, i.", "startOffset": 10, "endOffset": 13}, {"referenceID": 5, "context": "Theorem 3 [6] Given a path planning problem {Xfree, xinit,Xgoal}, if there exits an attraction sequence A of length k, then P ( {VRRT n \u2229 Xgoal = \u2205} ) \u2264 e 2 (np\u22122k).", "startOffset": 10, "endOffset": 13}, {"referenceID": 0, "context": "An algorithm is asymptotically optimal if it computes a minimum cost continuous path solution \u03c4\u2217 : [0, 1] such that \u03c4\u2217(0) = xinit and \u03c4\u2217(1) \u2208 Xgoal, all the while avoiding any collisions in a cluttered environment.", "startOffset": 99, "endOffset": 105}, {"referenceID": 0, "context": ", |c(\u03c41)\u2212 c(\u03c42)| \u2264 \u03b5 sup\u03c8:[0,1]\u2016c(\u03c41(\u03c8s1))\u2212 c(\u03c42(\u03c8s2))\u2016.", "startOffset": 26, "endOffset": 31}, {"referenceID": 5, "context": "Theorem 6 (Asymptotic optimality of RRT* [6] Let Assumptions 1, 2 and 3 hold; then the RRT* algorithm is asymptotic optimal whenever d \u2265 2 and \u03b3 > \u03b3\u2217 := 2(1 + 1/d)\u03bc(Xfree).", "startOffset": 41, "endOffset": 44}, {"referenceID": 5, "context": "Therefore theorem 6 holds for P-RRT* just as it holds for RRT* and its proof is similar to the proof of lemma 71 for RRT* [6], based on the Borel-Cantelli lemma.", "startOffset": 122, "endOffset": 125}, {"referenceID": 0, "context": "Definition 2 (Path with strong \u03b4-clearance)A feasible path solution \u03c4 : [0, 1] is said to have strong \u03b4-clearance if \u03c4(s) \u2208 Xint\u03b4 ;\u2200s \u2208 [0, 1].", "startOffset": 72, "endOffset": 78}, {"referenceID": 0, "context": "Definition 2 (Path with strong \u03b4-clearance)A feasible path solution \u03c4 : [0, 1] is said to have strong \u03b4-clearance if \u03c4(s) \u2208 Xint\u03b4 ;\u2200s \u2208 [0, 1].", "startOffset": 136, "endOffset": 142}, {"referenceID": 0, "context": "Definition 3 (Path with weak \u03b4-clearance)A collision-free path \u03c41 : [0, 1] is said to have weak \u03b4-clearance if there exits a collision-free path \u03c42 having strong \u03b4-clearance such that i) both paths (a) P-RRT* (b) 30 Samples (c) 60 Samples", "startOffset": 68, "endOffset": 74}, {"referenceID": 0, "context": "\u03c41(0) = \u03c42(0) and \u03c41(1) = \u03c42(1); ii) path \u03c41 can be deformed to \u03c42 by a homotopy function h : [0, 1] where h(0) = \u03c41, h(1) = \u03c42 and h(s) 7\u2192 Xfree,\u2200s \u2208 [0, 1] iii) for a range y \u2208 (0, 1], there exists \u03b4y \u2208 (0, \u03b4] such that the homotopy function h(y) has strong \u03b4y-clearance.", "startOffset": 94, "endOffset": 100}, {"referenceID": 0, "context": "\u03c41(0) = \u03c42(0) and \u03c41(1) = \u03c42(1); ii) path \u03c41 can be deformed to \u03c42 by a homotopy function h : [0, 1] where h(0) = \u03c41, h(1) = \u03c42 and h(s) 7\u2192 Xfree,\u2200s \u2208 [0, 1] iii) for a range y \u2208 (0, 1], there exists \u03b4y \u2208 (0, \u03b4] such that the homotopy function h(y) has strong \u03b4y-clearance.", "startOffset": 151, "endOffset": 157}, {"referenceID": 0, "context": "However, the lower bound of complexity of the algorithm by [1] indicates that nearest", "startOffset": 59, "endOffset": 62}, {"referenceID": 0, "context": "Implementing the computationally optimal algorithm in [1] for computing nearest obstacle configuration under fixed dimension, implies that it has to run in \u03a9(logn) time.", "startOffset": 54, "endOffset": 57}, {"referenceID": 0, "context": "Lemma 3 Since the expected limit of number of steps executed by RRT* at each iteration is atleast of the order of log(Nn) time, implementing the computationally optimal algorithm given in [1] under fixed dimensions for computing nearest obstacle configuration, implies that there exists a constant \u03c6RRT\u2217 \u2208 R+ i.", "startOffset": 188, "endOffset": 191}], "year": 2017, "abstractText": "Rapidly-exploring Random Tree Star(RRT*) is a recently proposed extension of Rapidly-exploring Random Tree (RRT) algorithm that provides a collisionfree, asymptotically optimal path regardless of obstacles geometry in a given environment. However, one of the limitation in the RRT* algorithm is slow convergence to optimal path solution. As a result it consumes high memory as well as time due to the large number of iterations utilised in achieving optimal path solution. To overcome these limitations, we propose the Potential Function Based-RRT* (P-RRT*) that incorporates the Artificial Potential Field Algorithm in RRT*. The proposed algorithm allows a considerable decrease in the number of iterations and thus leads to more efficient memory utilization and an accelerated convergence rate. In order to illustrate the usefulness of the proposed algorithm \u2217This is the authors\u2019 version of the paper published in Springer Autonomous Robots Journal. The source code of this paper is available at: github.com/ahq1993 with the name of p-rrtstar. in terms of space execution and convergence rate, this paper presents rigorous simulation based comparisons between the proposed techniques and RRT* under different environmental conditions. Moreover, both algorithms are also tested and compared under non-holonomic differential constraints.", "creator": "LaTeX with hyperref package"}}}