{"id": "1704.06879", "review": {"conference": "ACL", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Apr-2017", "title": "Deep Keyphrase Generation", "abstract": "Keyphrase an\u00fana provides highly - summative information that can be effectively used for thach understanding, tongji organizing teslim and retrieving dhocoxnews.com text content. Though opt-out previous palynology studies have provided compressed many pesetas workable narla solutions wallops for polluters automated ciaran keyphrase extraction, they commonly divided the wmar to - be - desplat summarized content into vrt multiple oxhey text chunks, then rajahs ranked archfoes and selected the most meaningful prestowitz ones. d\u00f8d These approaches commerford could anti-monarchist neither 1946-1950 identify untangled keyphrases that do zaripova not appear oviraptorosaurs in the euro410 text, p-39s nor effected capture the deuel real utut semantic midamerican meaning behind the text. 21.44 We propose a generative sdap model ferradaz for biennial keyphrase redder prediction precognitive with pellerin an encoder - decoder lily framework, callanan which leptostylus can zah effectively chlorides overcome 160kg the aultman above conquerer drawbacks. We pmpa name nagi it 1,036 as blommaert deep jadidah keyphrase valuair generation since it attempts for\u00e7as to capture 90a the jetzt deep availabe semantic 323i meaning of the shariah content tumbledown with cavataio a uniformitarianism deep learning 119.43 method. digex Empirical 51.95 analysis 2,750 on six datasets padlock demonstrates that our proposed parappa model not only achieves a synaptogenesis significant perceived performance boost on extracting keyphrases that superstock appear venados in unternehmen the source simian text, but jaquie also can cappo generate rydzyk absent monshipour keyphrases 52-43 based ashrafieh on tiruvarur the a-sketch semantic heiau meaning of 1983-4 the zadran text. runje Code and preeya dataset are available at", "histories": [["v1", "Sun, 23 Apr 2017 04:34:26 GMT  (2267kb,D)", "http://arxiv.org/abs/1704.06879v1", "11 pages. Accepted by ACL2017"]], "COMMENTS": "11 pages. Accepted by ACL2017", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["rui meng", "sanqiang zhao", "shuguang han", "daqing he", "peter brusilovsky", "yu chi"], "accepted": true, "id": "1704.06879"}, "pdf": {"name": "1704.06879.pdf", "metadata": {"source": "CRF", "title": "Deep Keyphrase Generation", "authors": ["Rui Meng", "Sanqiang Zhao", "Shuguang Han", "Daqing He", "Peter Brusilovsky", "Yu Chi"], "emails": ["yuc73}@pitt.edu"], "sections": [{"heading": "1 Introduction", "text": "A keyphrase or keyword is a piece of short, summative content that expresses the main semantic meaning of a longer text. The typical use of a keyphrase or keyword is in scientific publications to provide the core information of a paper. We use\n\u2217Corresponding author\nthe term \u201ckeyphrase\u201d interchangeably with \u201ckeyword\u201d in the rest of this paper, as both terms have an implication that they may contain multiple words. High-quality keyphrases can facilitate the understanding, organizing, and accessing of document content. As a result, many studies have focused on ways of automatically extracting keyphrases from textual content (Liu et al., 2009; Medelyan et al., 2009a; Witten et al., 1999). Due to public accessibility, many scientific publication datasets are often used as test beds for keyphrase extraction algorithms. Therefore, this study also focuses on extracting keyphrases from scientific publications.\nAutomatically extracting keyphrases from a document is called keypharase extraction, and it has been widely used in many applications, such as information retrieval (Jones and Staveley, 1999), text summarization (Zhang et al., 2004), text categorization (Hulth and Megyesi, 2006), and opinion mining (Berend, 2011). Most of the existing keyphrase extraction algorithms have addressed this problem through two steps (Liu et al., 2009; Tomokiyo and Hurst, 2003). The first step is to acquire a list of keyphrase candidates. Researchers have tried to use n-grams or noun phrases with certain part-of-speech patterns for identifying potential candidates (Hulth, 2003; Le et al., 2016; Liu et al., 2010; Wang et al., 2016). The second step is to rank candidates on their importance to the document, either through supervised or unsupervised machine learning methods with a set of manually-defined features (Frank et al., 1999; Liu et al., 2009, 2010; Kelleher and Luz, 2005; Matsuo and Ishizuka, 2004; Mihalcea and Tarau, 2004; Song et al., 2003; Witten et al., 1999).\nThere are two major drawbacks in the above keyphrase extraction approaches. First, these methods can only extract the keyphrases that ap-\nar X\niv :1\n70 4.\n06 87\n9v 1\n[ cs\n.C L\n] 2\n3 A\npr 2\n01 7\npear in the source text; they fail at predicting meaningful keyphrases with a slightly different sequential order or those that use synonyms. However, authors of scientific publications commonly assign keyphrases based on their semantic meaning, instead of following the written content in the publication. In this paper, we denote phrases that do not match any contiguous subsequence of source text as absent keyphrases, and the ones that fully match a part of the text as present keyphrases. Table 1 shows the proportion of present and absent keyphrases from the document abstract in four commonly-used datasets, from which we can observe large portions of absent keyphrases in all the datasets. The absent keyphrases cannot be extracted through previous approaches, which further prompts the development of a more powerful keyphrase prediction model.\nSecond, when ranking phrase candidates, previous approaches often adopted machine learning features such as TF-IDF and PageRank. However, these features only target to detect the importance of each word in the document based on the statistics of word occurrence and co-occurrence, and are unable to reveal the full semantics that underlie the document content.\nTo overcome the limitations of previous studies, we re-examine the process of keyphrase prediction with a focus on how real human annotators would assign keyphrases. Given a document, human annotators will first read the text to get a basic understanding of the content, then they try to digest its essential content and summarize it into keyphrases. Their generation of keyphrases relies on an understanding of the content, which may not necessarily use the exact words that occur in the source text. For example, when human annotators see \u201cLatent Dirichlet Allocation\u201d in the text, they might write down \u201ctopic modeling\u201d and/or \u201ctext mining\u201d as possible keyphrases. In addition to the semantic understanding, human annotators\nmight also go back and pick up the most important parts, based on syntactic features. For example, the phrases following \u201cwe propose/apply/use\u201d could be important in the text. As a result, a better keyphrase prediction model should understand the semantic meaning of the content, as well as capture the contextual features.\nTo effectively capture both the semantic and syntactic features, we use recurrent neural networks (RNN) (Cho et al., 2014; Gers and Schmidhuber, 2001) to compress the semantic information in the given text into a dense vector (i.e., semantic understanding). Furthermore, we incorporate a copying mechanism (Gu et al., 2016) to allow our model to find important parts based on positional information. Thus, our model can generate keyphrases based on an understanding of the text, regardless of the presence or absence of keyphrases in the text; at the same time, it does not lose important in-text information.\nThe contribution of this paper is three-fold. First, we propose to apply an RNN-based generative model to keyphrase prediction, as well as incorporate a copying mechanism in RNN, which enables the model to successfully predict phrases that rarely occur. Second, this is the first work that concerns the problem of absent keyphrase prediction for scientific publications, and our model recalls up to 20% of absent keyphrases. Third, we conducted a comprehensive comparison against six important baselines on a broad range of datasets, and the results show that our proposed model significantly outperforms existing supervised and unsupervised extraction methods.\nIn the remainder of this paper, we first review the related work in Section 2. Then, we elaborate upon the proposed model in Section 3. After that, we present the experiment setting in Section 4 and results in Section 5, followed by our discussion in Section 6. Section 7 concludes the paper."}, {"heading": "2 Related Work", "text": ""}, {"heading": "2.1 Automatic Keyphrase Extraction", "text": "A keyphrase provides a succinct and accurate way of describing a subject or a subtopic in a document. A number of extraction algorithms have been proposed, and the process of extracting keyphrases can typically be broken down into two steps.\nThe first step is to generate a list of phrase can-\ndidates with heuristic methods. As these candidates are prepared for further filtering, a considerable number of candidates are produced in this step to increase the possibility that most of the correct keyphrases are kept. The primary ways of extracting candidates include retaining word sequences that match certain part-of-speech tag patterns (e.g., nouns, adjectives) (Liu et al., 2011; Wang et al., 2016; Le et al., 2016), and extracting important n-grams or noun phrases (Hulth, 2003; Medelyan et al., 2008).\nThe second step is to score each candidate phrase for its likelihood of being a keyphrase in the given document. The top-ranked candidates are returned as keyphrases. Both supervised and unsupervised machine learning methods are widely employed here. For supervised methods, this task is solved as a binary classification problem, and various types of learning methods and features have been explored (Frank et al., 1999; Witten et al., 1999; Hulth, 2003; Medelyan et al., 2009b; Lopez and Romary, 2010; Gollapalli and Caragea, 2014). As for unsupervised approaches, primary ideas include finding the central nodes in text graph (Mihalcea and Tarau, 2004; Grineva et al., 2009), detecting representative phrases from topical clusters (Liu et al., 2009, 2010), and so on.\nAside from the commonly adopted two-step process, another two previous studies realized the keyphrase extraction in entirely different ways. Tomokiyo and Hurst (2003) applied two language models to measure the phraseness and informativeness of phrases. Liu et al. (2011) share the most similar ideas to our work. They used a word alignment model, which learns a translation from the documents to the keyphrases. This approach alleviates the problem of vocabulary gaps between source and target to a certain degree. However, this translation model is unable to handle semantic meaning. Additionally, this model was trained with the target of title/summary to enlarge the number of training samples, which may diverge from the real objective of generating keyphrases.\nZhang et al. (2016) proposed a joint-layer recurrent neural network model to extract keyphrases from tweets, which is another application of deep neural networks in the context of keyphrase extraction. However, their work focused on sequence labeling, and is therefore not able to predict absent keyphrases."}, {"heading": "2.2 Encoder-Decoder Model", "text": "The RNN Encoder-Decoder model (which is also referred as sequence-to-sequence Learning) is an end-to-end approach. It was first introduced by Cho et al. (2014) and Sutskever et al. (2014) to solve translation problems. As it provides a powerful tool for modeling variable-length sequences in an end-to-end fashion, it fits many natural language processing tasks and can rapidly achieve great successes (Rush et al., 2015; Vinyals et al., 2015; Serban et al., 2016).\nDifferent strategies have been explored to improve the performance of the Encoder-Decoder model. The attention mechanism (Bahdanau et al., 2014) is a soft alignment approach that allows the model to automatically locate the relevant input components. In order to make use of the important information in the source text, some studies sought ways to copy certain parts of content from the source text and paste them into the target text (Allamanis et al., 2016; Gu et al., 2016; Zeng et al., 2016). A discrepancy exists between the optimizing objective during training and the metrics during evaluation. A few studies attempted to eliminate this discrepancy by incorporating new training algorithms (Marc\u2019Aurelio Ranzato et al., 2016) or by modifying the optimizing objectives (Shen et al., 2016)."}, {"heading": "3 Methodology", "text": "This section will introduce our proposed deep keyphrase generation method in detail. First, the task of keyphrase generation is defined, followed by an overview of how we apply the RNN Encoder-Decoder model. Details of the framework as well as the copying mechanism will be introduced in Sections 3.3 and 3.4."}, {"heading": "3.1 Problem Definition", "text": "Given a keyphrase dataset that consists of N data samples, the i-th data sample (x(i),p(i)) contains one source text x(i), and Mi target keyphrases p(i) = (p(i,1),p(i,2), . . . ,p(i,Mi)). Both the source text x(i) and keyphrase p(i,j) are sequences of words:\nx(i) = x (i) 1 , x (i) 2 , . . . , x (i) L xi\np(i,j) = y (i,j) 1 , y (i,j) 2 , . . . , y (i,j) L p(i,j)\nLx(i) and Lp(i,j)denotes the length of word sequence of x(i) and p(i,j) respectively.\nEach data sample contains one source text sequence and multiple target phrase sequences. To apply the RNN Encoder-Decoder model, the data need to be converted into text-keyphrase pairs that contain only one source sequence and one target sequence. We adopt a simple way, which splits the data sample (x(i),p(i)) into Mi pairs: (x(i),p(i,1)), (x(i),p(i,2)), . . . , (x(i),p(i,Mi)). Then the Encoder-Decoder model is ready to be applied to learn the mapping from the source sequence to target sequence. For the purpose of simplicity, (x,y) is used to denote each data pair in the rest of this section, where x is the word sequence of a source text and y is the word sequence of its keyphrase."}, {"heading": "3.2 Encoder-Decoder Model", "text": "The basic idea of our keyphrase generation model is to compress the content of source text into a hidden representation with an encoder and to generate corresponding keyphrases with the decoder, based on the representation . Both the encoder and decoder are implemented with recurrent neural networks (RNN).\nThe encoder RNN converts the variable-length input sequence x = (x1, x2, ..., xT ) into a set of hidden representation h = (h1, h2, . . . , hT ), by iterating the following equations along time t:\nht = f (xt,ht\u22121) (1)\nwhere f is a non-linear function. We get the context vector c acting as the representation of the whole input x through a non-linear function q.\nc = q(h1, h2, ..., hT ) (2)\nThe decoder is another RNN; it decompresses the context vector and generates a variable-length sequence y = (y1, y2, ..., yT \u2032) word by word, through a conditional language model:\nst = f(yt\u22121, st\u22121, c) p(yt|y1,...,t\u22121,x) = g(yt\u22121, st, c) (3)\nwhere st is the hidden state of the decoder RNN at time t. The non-linear function g is a softmax classifier, which outputs the probabilities of all the words in the vocabulary. yt is the predicted word at time t, by taking the word with largest probability after g(\u00b7).\nThe encoder and decoder networks are trained jointly to maximize the conditional probability of\nthe target sequence, given a source sequence. After training, we use the beam search to generate phrases and a max heap is maintained to get the predicted word sequences with the highest probabilities."}, {"heading": "3.3 Details of the Encoder and Decoder", "text": "A bidirectional gated recurrent unit (GRU) is applied as our encoder to replace the simple recurrent neural network. Previous studies (Bahdanau et al., 2014; Cho et al., 2014) indicate that it can generally provide better performance of language modeling than a simple RNN and a simpler structure than other Long Short-Term Memory networks (Hochreiter and Schmidhuber, 1997). As a result, the above non-linear function f is replaced by the GRU function (see in (Cho et al., 2014)).\nAnother forward GRU is used as the decoder. In addition, an attention mechanism is adopted to improve performance. The attention mechanism was firstly introduced by Bahdanau et al. (2014) to make the model dynamically focus on the important parts in input. The context vector c is computed as a weighted sum of hidden representation h = (h1, . . . , hT ):\nci = T\u2211 j=1 \u03b1ijhj \u03b1ij = exp(a(si\u22121, hj))\u2211T k=1 exp(a(si\u22121, hk))\n(4)\nwhere a(si\u22121, hj) is a soft alignment function that measures the similarity between si\u22121 and hj ; namely, to which degree the inputs around position j and the output at position i match."}, {"heading": "3.4 Copying Mechanism", "text": "To ensure the quality of learned representation and reduce the size of the vocabulary, typically the RNN model considers a certain number of frequent words (e.g. 30,000 words in (Cho et al., 2014)), but a large amount of long-tail words are simply ignored. Therefore, the RNN is not able to recall any keyphrase that contains out-ofvocabulary words. Actually, important phrases can also be identified by positional and syntactic information in their contexts, even though their exact meanings are not known. The copying mechanism (Gu et al., 2016) is one feasible solution that enables RNN to predict out-of-vocabulary words by selecting appropriate words from the source text.\nBy incorporating the copying mechanism, the probability of predicting each new word yt consists of two parts. The first term is the probability of generating the term (see Equation 3) and the second one is the probability of copying it from the source text:\np(yt|y1,...,t\u22121,x) = pg(yt|y1,...,t\u22121,x) + pc(yt|y1,...,t\u22121,x) (5)\nSimilar to attention mechanism, the copying mechanism weights the importance of each word in source text with a measure of positional attention. But unlike the generative RNN which predicts the next word from all the words in vocabulary, the copying part pc(yt|y1,...,t\u22121,x) only considers the words in source text. Consequently, on the one hand, the RNN with copying mechanism is able to predict the words that are out of vocabulary but in the source text; on the other hand, the model would potentially give preference to the appearing words, which caters to the fact that most keyphrases tend to appear in the source text.\npc(yt|y1,...,t\u22121,x) = 1\nZ \u2211 j:xj=yt exp(\u03c8c(xj)), y \u2208 \u03c7\n\u03c8c(xj) = \u03c3(h T j Wc)st\n(6) where \u03c7 is the set of all of the unique words in the source text x, \u03c3 is a non-linear function and Wc \u2208 R is a learned parameter matrix. Z is the sum of all the scores and is used for normalization. Please see (Gu et al., 2016) for more details."}, {"heading": "4 Experiment Settings", "text": "This section begins by discussing how we designed our evaluation experiments, followed by the description of training and testing datasets. Then, we introduce our evaluation metrics and baselines."}, {"heading": "4.1 Training Dataset", "text": "There are several publicly-available datasets for evaluating keyphrase generation. The largest one came from Krapivin et al. (2008), which contains 2,304 scientific publications. However, this amount of data is unable to train a robust recurrent neural network model. In fact, there are millions of scientific papers available online, each of which contains the keyphrases that were assigned by their authors. Therefore, we collected a large amount of high-quality scientific metadata in the\ncomputer science domain from various online digital libraries, including ACM Digital Library, ScienceDirect, Wiley, and Web of Science etc. (Han et al., 2013; Rui et al., 2016). In total, we obtained a dataset of 567,830 articles, after removing duplicates and overlaps with testing datasets, which is 200 times larger than the one of Krapivin et al. (2008). Note that our model is only trained on 527,830 articles, since 40,000 publications are randomly held out, among which 20,000 articles were used for building a new test dataset KP20k. Another 20,000 articles served as the validation dataset to check the convergence of our model, as well as the training dataset for supervised baselines."}, {"heading": "4.2 Testing Datasets", "text": "For evaluating the proposed model more comprehensively, four widely-adopted scientific publication datasets were used. In addition, since these datasets only contain a few hundred or a few thousand publications, we contribute a new testing dataset KP20k with a much larger number of scientific articles. We take the title and abstract as the source text. Each dataset is described in detail below.\n\u2013 Inspec (Hulth, 2003): This dataset provides 2,000 paper abstracts. We adopt the 500 testing papers and their corresponding uncontrolled keyphrases for evaluation, and the remaining 1,500 papers are used for training the supervised baseline models.\n\u2013 Krapivin (Krapivin et al., 2008): This dataset provides 2,304 papers with full-text and author-assigned keyphrases. However, the author did not mention how to split testing data, so we selected the first 400 papers in alphabetical order as the testing data, and the remaining papers are used to train the supervised baselines.\n\u2013 NUS (Nguyen and Kan, 2007): We use the author-assigned keyphrases and treat all 211 papers as the testing data. Since the NUS dataset did not specifically mention the ways of splitting training and testing data, the results of the supervised baseline models are obtained through a five-fold cross-validation.\n\u2013 SemEval-2010 (Kim et al., 2010): 288 articles were collected from the ACM Digital\nLibrary. 100 articles were used for testing and the rest were used for training supervised baselines.\n\u2013 KP20k: We built a new testing dataset that contains the titles, abstracts, and keyphrases of 20,000 scientific articles in computer science. They were randomly selected from our obtained 567,830 articles. Due to the memory limits of implementation, we were not able to train the supervised baselines on the whole training set. Thus we take the 20,000 articles in the validation set to train the supervised baselines. It is worth noting that we also examined their performance by enlarging the training dataset to 50,000 articles, but no significant improvement was observed."}, {"heading": "4.3 Implementation Details", "text": "In total, there are 2,780,316 \u3008text, keyphrase\u3009 pairs for training, in which text refers to the concatenation of the title and abstract of a publication, and keyphrase indicates an author-assigned keyword. The text pre-processing steps including tokenization, lowercasing and replacing all digits with symbol \u3008digit\u3009 are applied. Two encoderdecoder models are trained, one with only attention mechanism (RNN) and one with both attention and copying mechanism enabled (CopyRNN). For both models, we choose the top 50,000 frequently-occurred words as our vocabulary, the dimension of embedding is set to 150, the dimension of hidden layers is set to 300, and the word embeddings are randomly initialized with uniform distribution in [-0.1,0.1]. Models are optimized using Adam (Kingma and Ba, 2014) with initial learning rate = 10\u22124, gradient clipping = 0.1 and dropout rate = 0.5. The max depth of beam search is set to 6, and the beam size is set to 200. The training is stopped once convergence is determined on the validation dataset (namely earlystopping, the cross-entropy loss stops dropping for several iterations).\nIn the generation of keyphrases, we find that the model tends to assign higher probabilities for shorter keyphrases, whereas most keyphrases contain more than two words. To resolve this problem, we apply a simple heuristic by preserving only the first single-word phrase (with the highest generating probability) and removing the rest."}, {"heading": "4.4 Baseline Models", "text": "Four unsupervised algorithms (Tf-Idf, TextRank (Mihalcea and Tarau, 2004), SingleRank (Wan and Xiao, 2008), and ExpandRank (Wan and Xiao, 2008)) and two supervised algorithms (KEA (Witten et al., 1999) and Maui (Medelyan et al., 2009a)) are adopted as baselines. We set up the four unsupervised methods following the optimal settings in (Hasan and Ng, 2010), and the two supervised methods following the default setting as specified in their papers."}, {"heading": "4.5 Evaluation Metric", "text": "Three evaluation metrics, the macro-averaged precision, recall and F-measure (F1) are employed for measuring the algorithm\u2019s performance. Following the standard definition, precision is defined as the number of correctly-predicted keyphrases over the number of all predicted keyphrases, and recall is computed by the number of correctlypredicted keyphrases over the total number of data records. Note that, when determining the match of two keyphrases, we use Porter Stemmer for preprocessing."}, {"heading": "5 Results and Analysis", "text": "We conduct an empirical study on three different tasks to evaluate our model."}, {"heading": "5.1 Predicting Present Keyphrases", "text": "This is the same as the keyphrase extraction task in prior studies, in which we analyze how well our proposed model performs on a commonly-defined task. To make a fair comparison, we only consider the present keyphrases for evaluation in this task. Table 2 provides the performances of the six baseline models, as well as our proposed models (i.e., RNN and CopyRNN). For each method, the table lists its F-measure at top 5 and top 10 predictions on the five datasets. The best scores are highlighted in bold and the underlines indicate the second best performances.\nThe results show that the four unsupervised models (Tf-idf, TextTank, SingleRank and ExpandRank) have a robust performance across different datasets. The ExpandRank fails to return any result on the KP20k dataset, due to its high time complexity. The measures on NUS and SemEval here are higher than the ones reported in (Hasan and Ng, 2010) and (Kim et al., 2010), probably because we utilized the paper abstract instead of the full text for training, which may\nfilter out some noisy information. The performance of the two supervised models (i.e., Maui and KEA) were unstable on some datasets, but Maui achieved the best performances on three datasets among all the baseline models.\nAs for our proposed keyphrase prediction approaches, the RNN model with the attention mechanism did not perform as well as we expected. It might be because the RNN model is only concerned with finding the hidden semantics behind the text, which may tend to generate keyphrases or words that are too general and may not necessarily refer to the source text. In addition, we observe that 2.5% (70,891/2,780,316) of keyphrases in our dataset contain out-of-vocabulary words, which the RNN model is not able to recall, since the RNN model can only generate results with the 50,000 words in vocabulary. This indicates that a pure generative model may not fit the extraction task, and we need to further link back to the language usage within the source text. The CopyRNN model, by considering more contextual information, significantly outperforms not only the RNN model but also all baselines, exceeding the best baselines by more than 20% on average. This result demonstrates the importance of source text to the extraction task. Besides, nearly 2% of all correct predictions contained outof-vocabulary words.\nThe example in Figure 1(a) shows the result of predicted present keyphrases by RNN and CopyRNN for an article about video search. We see that both models can generate phrases that relate to the topic of information retrieval and video. However most of RNN predictions are high-level terminologies, which are too general to be selected as keyphrases. CopyRNN, on the other hand,\npredicts more detailed phrases like \u201cvideo metadata\u201d and \u201cintegrated ranking\u201d. An interesting bad case, \u201crich content\u201d coordinates with a keyphrase \u201cvideo metadata\u201d, and the CopyRNN mistakenly puts it into prediction."}, {"heading": "5.2 Predicting Absent Keyphrases", "text": "As stated, one important motivation for this work is that we are interested in the proposed model\u2019s capability for predicting absent keyphrases based on the \u201cunderstanding\u201d of content. It is worth noting that such prediction is a very challenging task, and, to the best of our knowledge, no existing methods can handle this task. Therefore, we only provide the RNN and CopyRNN performances in the discussion of the results of this task. Here, we evaluate the performance within the recall of the top 10 and top 50 results, to see how many absent keyphrases can be correctly predicted. We use the absent keyphrases in the testing datasets for evaluation.\nTable 3 presents the recall results of the top 10/50 predicted keyphrases for our RNN and CopyRNN models, in which we observe that the CopyRNN can, on average, recall around 8%\n(15%) of keyphrases at top 10 (50) predictions. This indicates that, to some extent, both models can capture the hidden semantics behind the textual content and make reasonable predictions. In addition, with the advantage of features from the source text, the CopyRNN model also outperforms the RNN model in this condition, though it does not show as much improvement as the present keyphrase extraction task. An example is shown in Figure 1(b), in which we see that two absent keyphrases, \u201cvideo retrieval\u201d and \u201cvideo indexing\u201d, are correctly recalled by both models. Note that the term \u201cindexing\u201d does not appear in the text, but the models may detect the information \u201cindex videos\u201d in the first sentence and paraphrase it to the target phrase. And the CopyRNN successfully predicts another two keyphrases by capturing the detailed information from the text (highlighted text segments)."}, {"heading": "5.3 Transferring the Model to the News Domain", "text": "RNN and CopyRNN are supervised models, and they are trained on data in a specific domain and writing style. However, with sufficient training on a large-scale dataset, we expect the models to be able to learn universal language features that are also effective in other corpora. Thus in this task, we will test our model on another type of text, to see whether the model would work when being transferred to a different environment.\nWe use the popular news article dataset DUC2001 (Wan and Xiao, 2008) for analysis. The dataset consists of 308 news articles and 2,488 manually annotated keyphrases. The result of this analysis is shown in Table 4, from which we could see that the CopyRNN can extract a portion of correct keyphrases from a unfamiliar text. Compared to the results reported in (Hasan and Ng, 2010), the performance of CopyRNN is better than TextRank (Mihalcea and Tarau, 2004) and KeyCluster (Liu et al., 2009), but lags behind the other\nthree baselines. As it is transferred to a corpus in a completely different type and domain, the model encounters more unknown words and has to rely more on the positional and syntactic features within the text. In this experiment, the CopyRNN recalls 766 keyphrases. 14.3% of them contain out-ofvocabulary words, and many names of persons and places are correctly predicted."}, {"heading": "6 Discussion", "text": "Our experimental results demonstrate that the CopyRNN model not only performs well on predicting present keyphrases, but also has the ability to generate topically relevant keyphrases that are absent in the text. In a broader sense, this model attempts to map a long text (i.e., paper abstract) with representative short text chunks (i.e., keyphrases), which can potentially be applied to improve information retrieval performance by generating high-quality index terms, as well as assisting user browsing by summarizing long documents into short, readable phrases.\nThus far, we have tested our model with scientific publications and news articles, and have demonstrated that our model has the ability to capture universal language patterns and extract key information from unfamiliar texts. We believe that our model has a greater potential to be generalized to other domains and types, like books, online reviews, etc., if it is trained on a larger data corpus. Also, we directly applied our model, which was trained on a publication dataset, into generating keyphrases for news articles without any adaptive training. We believe that with proper training on news data, the model would make further improvement.\nAdditionally, this work mainly studies the problem of discovering core content from textual materials. Here, the encoder-decoder framework is applied to model language; however, such a framework can also be extended to locate the core information on other data resources, such as summarizing content from images and videos."}, {"heading": "7 Conclusions and Future Work", "text": "In this paper, we proposed an RNN-based generative model for predicting keyphrases in scientific text. To the best of our knowledge, this is the first application of the encoder-decoder model to a keyphrase prediction task. Our model summarizes phrases based the deep semantic meaning\nof the text, and is able to handle rarely-occurred phrases by incorporating a copying mechanism. Comprehensive empirical studies demonstrate the effectiveness of our proposed model for generating both present and absent keyphrases for different types of text. Our future work may include the following two directions.\n\u2013 In this work, we only evaluated the performance of the proposed model by conducting off-line experiments. In the future, we are interested in comparing the model to human annotators and using human judges to evaluate the quality of predicted phrases.\n\u2013 Our current model does not fully consider correlation among target keyphrases. It would also be interesting to explore the multiple-output optimization aspects of our model."}, {"heading": "Acknowledgments", "text": "We would like to thank Jiatao Gu and Miltiadis Allamanis for sharing the source code and giving helpful advice. We also thank Wei Lu, Yong Huang, Qikai Cheng and other IRLAB members at Wuhan University for the assistance of dataset development. This work is partially supported by the National Science Foundation under Grant No.1525186."}], "references": [{"title": "A Convolutional Attention Network for Extreme Summarization of Source Code", "author": ["M. Allamanis", "H. Peng", "C. Sutton."], "venue": "ArXiv e-prints .", "citeRegEx": "Allamanis et al\\.,? 2016", "shortCiteRegEx": "Allamanis et al\\.", "year": 2016}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio."], "venue": "arXiv preprint arXiv:1409.0473 .", "citeRegEx": "Bahdanau et al\\.,? 2014", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2014}, {"title": "Opinion expression mining by exploiting keyphrase extraction", "author": ["G\u00e1bor Berend."], "venue": "IJCNLP. Citeseer, pages 1162\u20131170.", "citeRegEx": "Berend.,? 2011", "shortCiteRegEx": "Berend.", "year": 2011}, {"title": "Learning phrase representations using rnn encoder-decoder for statistical machine translation", "author": ["Kyunghyun Cho", "Bart Van Merri\u00ebnboer", "Caglar Gulcehre", "Dzmitry Bahdanau", "Fethi Bougares", "Holger Schwenk", "Yoshua Bengio."], "venue": "arXiv preprint", "citeRegEx": "Cho et al\\.,? 2014", "shortCiteRegEx": "Cho et al\\.", "year": 2014}, {"title": "Domain-specific keyphrase extraction", "author": ["Eibe Frank", "Gordon W Paynter", "Ian H Witten", "Carl Gutwin", "Craig G Nevill-Manning"], "venue": null, "citeRegEx": "Frank et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Frank et al\\.", "year": 1999}, {"title": "Lstm recurrent networks learn simple context-free and contextsensitive languages", "author": ["Felix A Gers", "E Schmidhuber."], "venue": "IEEE Transactions on Neural Networks 12(6):1333\u20131340.", "citeRegEx": "Gers and Schmidhuber.,? 2001", "shortCiteRegEx": "Gers and Schmidhuber.", "year": 2001}, {"title": "Extracting keyphrases from research papers using citation networks", "author": ["Sujatha Das Gollapalli", "Cornelia Caragea."], "venue": "Proceedings of the Twenty-Eighth AAAI Conference on Artificial Intelligence. AAAI Press, AAAI\u201914, pages 1629\u20131635.", "citeRegEx": "Gollapalli and Caragea.,? 2014", "shortCiteRegEx": "Gollapalli and Caragea.", "year": 2014}, {"title": "Extracting key terms from noisy and multitheme documents", "author": ["Maria Grineva", "Maxim Grinev", "Dmitry Lizorkin."], "venue": "Proceedings of the 18th International Conference on World Wide Web. ACM, New York, NY, USA, WWW \u201909, pages 661\u2013670.", "citeRegEx": "Grineva et al\\.,? 2009", "shortCiteRegEx": "Grineva et al\\.", "year": 2009}, {"title": "Incorporating copying mechanism in sequence-to-sequence learning", "author": ["Jiatao Gu", "Zhengdong Lu", "Hang Li", "Victor OK Li."], "venue": "arXiv preprint arXiv:1603.06393 .", "citeRegEx": "Gu et al\\.,? 2016", "shortCiteRegEx": "Gu et al\\.", "year": 2016}, {"title": "Supporting exploratory people search: a study of factor transparency and user control", "author": ["Shuguang Han", "Daqing He", "Jiepu Jiang", "Zhen Yue."], "venue": "Proceedings of the 22nd ACM international conference on Information & Knowledge Management. ACM,", "citeRegEx": "Han et al\\.,? 2013", "shortCiteRegEx": "Han et al\\.", "year": 2013}, {"title": "Conundrums in unsupervised keyphrase extraction: making sense of the state-of-the-art", "author": ["Kazi Saidul Hasan", "Vincent Ng."], "venue": "Proceedings of the 23rd International Conference on Computational Linguistics: Posters. Association for Computational Lin-", "citeRegEx": "Hasan and Ng.,? 2010", "shortCiteRegEx": "Hasan and Ng.", "year": 2010}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber."], "venue": "Neural computation 9(8):1735\u20131780.", "citeRegEx": "Hochreiter and Schmidhuber.,? 1997", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "Improved automatic keyword extraction given more linguistic knowledge", "author": ["Anette Hulth."], "venue": "Proceedings of the 2003 conference on Empirical methods in natural language processing. Association for Computational Linguistics, pages 216\u2013223.", "citeRegEx": "Hulth.,? 2003", "shortCiteRegEx": "Hulth.", "year": 2003}, {"title": "A study on automatically extracted keywords in text categorization", "author": ["Anette Hulth", "Be\u00e1ta B Megyesi."], "venue": "Proceedings of the 21st International Conference on Computational Linguistics and the 44th annual meeting of the Association for Compu-", "citeRegEx": "Hulth and Megyesi.,? 2006", "shortCiteRegEx": "Hulth and Megyesi.", "year": 2006}, {"title": "Phrasier: a system for interactive document retrieval using keyphrases", "author": ["Steve Jones", "Mark S Staveley."], "venue": "Proceedings of the 22nd annual international ACM SIGIR conference on Research and development in information retrieval. ACM, pages", "citeRegEx": "Jones and Staveley.,? 1999", "shortCiteRegEx": "Jones and Staveley.", "year": 1999}, {"title": "Automatic hypertext keyphrase detection", "author": ["Daniel Kelleher", "Saturnino Luz."], "venue": "Proceedings of the 19th International Joint Conference on Artificial Intelligence. Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, IJCAI\u201905, pages 1608\u20131609.", "citeRegEx": "Kelleher and Luz.,? 2005", "shortCiteRegEx": "Kelleher and Luz.", "year": 2005}, {"title": "Semeval-2010 task 5: Automatic keyphrase extraction from scientific articles", "author": ["Su Nam Kim", "Olena Medelyan", "Min-Yen Kan", "Timothy Baldwin."], "venue": "Proceedings of the 5th International Workshop on Semantic Evaluation. Association for Computa-", "citeRegEx": "Kim et al\\.,? 2010", "shortCiteRegEx": "Kim et al\\.", "year": 2010}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba."], "venue": "arXiv preprint arXiv:1412.6980 .", "citeRegEx": "Kingma and Ba.,? 2014", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "Large dataset for keyphrases extraction", "author": ["Mikalai Krapivin", "Aliaksandr Autayeu", "Maurizio Marchese."], "venue": "Technical Report DISI-09-055, DISI, Trento, Italy.", "citeRegEx": "Krapivin et al\\.,? 2008", "shortCiteRegEx": "Krapivin et al\\.", "year": 2008}, {"title": "Unsupervised Keyphrase Extraction: Introducing New Kinds of Words to Keyphrases", "author": ["Tho Thi Ngoc Le", "Minh Le Nguyen", "Akira Shimazu"], "venue": null, "citeRegEx": "Le et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Le et al\\.", "year": 2016}, {"title": "Automatic keyphrase extraction by bridging vocabulary gap", "author": ["Zhiyuan Liu", "Xinxiong Chen", "Yabin Zheng", "Maosong Sun."], "venue": "Proceedings of the Fifteenth Conference on Computational Natural Language Learning. Association for Computational", "citeRegEx": "Liu et al\\.,? 2011", "shortCiteRegEx": "Liu et al\\.", "year": 2011}, {"title": "Automatic keyphrase extraction via topic decomposition", "author": ["Zhiyuan Liu", "Wenyi Huang", "Yabin Zheng", "Maosong Sun."], "venue": "Proceedings of the 2010 conference on empirical methods in natural language processing. Association for Compu-", "citeRegEx": "Liu et al\\.,? 2010", "shortCiteRegEx": "Liu et al\\.", "year": 2010}, {"title": "Clustering to find exemplar terms for keyphrase extraction", "author": ["Zhiyuan Liu", "Peng Li", "Yabin Zheng", "Maosong Sun."], "venue": "Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing: Volume 1-Volume 1. Association", "citeRegEx": "Liu et al\\.,? 2009", "shortCiteRegEx": "Liu et al\\.", "year": 2009}, {"title": "Humb: Automatic key term extraction from scientific articles in grobid", "author": ["Patrice Lopez", "Laurent Romary."], "venue": "Proceedings of the 5th International Workshop on Semantic Evaluation. Association for Computational Linguistics, Strouds-", "citeRegEx": "Lopez and Romary.,? 2010", "shortCiteRegEx": "Lopez and Romary.", "year": 2010}, {"title": "Sequence level training with recurrent neural networks", "author": ["Michael Auli", "Wojciech Zaremba"], "venue": null, "citeRegEx": "Ranzato et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Ranzato et al\\.", "year": 2016}, {"title": "Keyword extraction from a single document using word co-occurrence statistical information", "author": ["Yutaka Matsuo", "Mitsuru Ishizuka."], "venue": "International Journal on Artificial Intelligence Tools 13(01):157\u2013 169.", "citeRegEx": "Matsuo and Ishizuka.,? 2004", "shortCiteRegEx": "Matsuo and Ishizuka.", "year": 2004}, {"title": "Human-competitive tagging using automatic keyphrase extraction", "author": ["Olena Medelyan", "Eibe Frank", "Ian H Witten."], "venue": "Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing: Volume 3-Volume 3. Association", "citeRegEx": "Medelyan et al\\.,? 2009a", "shortCiteRegEx": "Medelyan et al\\.", "year": 2009}, {"title": "Human-competitive tagging using automatic keyphrase extraction", "author": ["Olena Medelyan", "Eibe Frank", "Ian H. Witten."], "venue": "Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing: Volume 3 - Volume 3.", "citeRegEx": "Medelyan et al\\.,? 2009b", "shortCiteRegEx": "Medelyan et al\\.", "year": 2009}, {"title": "Topic indexing with wikipedia", "author": ["Olena Medelyan", "Ian H Witten", "David Milne."], "venue": "Proceedings of the AAAI WikiAI workshop. volume 1, pages 19\u201324.", "citeRegEx": "Medelyan et al\\.,? 2008", "shortCiteRegEx": "Medelyan et al\\.", "year": 2008}, {"title": "Textrank: Bringing order into texts", "author": ["Rada Mihalcea", "Paul Tarau."], "venue": "Association for Computational Linguistics.", "citeRegEx": "Mihalcea and Tarau.,? 2004", "shortCiteRegEx": "Mihalcea and Tarau.", "year": 2004}, {"title": "PTR: Phrase-Based Topical Ranking for Automatic Keyphrase Extraction in Scientific Publications", "author": ["Minmei Wang", "Bo Zhao", "Yihua Huang"], "venue": null, "citeRegEx": "Wang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2016}, {"title": "Kea: Practical automatic keyphrase extraction", "author": ["Ian H Witten", "Gordon W Paynter", "Eibe Frank", "Carl Gutwin", "Craig G Nevill-Manning."], "venue": "Proceedings of the fourth ACM conference on Digital libraries. ACM, pages 254\u2013255.", "citeRegEx": "Witten et al\\.,? 1999", "shortCiteRegEx": "Witten et al\\.", "year": 1999}, {"title": "Efficient summarization with read-again and copy mechanism", "author": ["Wenyuan Zeng", "Wenjie Luo", "Sanja Fidler", "Raquel Urtasun."], "venue": "arXiv preprint arXiv:1611.03382 .", "citeRegEx": "Zeng et al\\.,? 2016", "shortCiteRegEx": "Zeng et al\\.", "year": 2016}, {"title": "Keyphrase extraction using deep recurrent neural networks on twitter", "author": ["Qi Zhang", "Yang Wang", "Yeyun Gong", "Xuanjing Huang."], "venue": "Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing. Association", "citeRegEx": "Zhang et al\\.,? 2016", "shortCiteRegEx": "Zhang et al\\.", "year": 2016}, {"title": "World wide web site summarization", "author": ["Yongzheng Zhang", "Nur Zincir-Heywood", "Evangelos Milios."], "venue": "Web Intelligence and Agent Systems: An International Journal 2(1):39\u201353.", "citeRegEx": "Zhang et al\\.,? 2004", "shortCiteRegEx": "Zhang et al\\.", "year": 2004}], "referenceMentions": [{"referenceID": 22, "context": "As a result, many studies have focused on ways of automatically extracting keyphrases from textual content (Liu et al., 2009; Medelyan et al., 2009a; Witten et al., 1999).", "startOffset": 107, "endOffset": 170}, {"referenceID": 26, "context": "As a result, many studies have focused on ways of automatically extracting keyphrases from textual content (Liu et al., 2009; Medelyan et al., 2009a; Witten et al., 1999).", "startOffset": 107, "endOffset": 170}, {"referenceID": 31, "context": "As a result, many studies have focused on ways of automatically extracting keyphrases from textual content (Liu et al., 2009; Medelyan et al., 2009a; Witten et al., 1999).", "startOffset": 107, "endOffset": 170}, {"referenceID": 14, "context": "document is called keypharase extraction, and it has been widely used in many applications, such as information retrieval (Jones and Staveley, 1999), text summarization (Zhang et al.", "startOffset": 122, "endOffset": 148}, {"referenceID": 34, "context": "document is called keypharase extraction, and it has been widely used in many applications, such as information retrieval (Jones and Staveley, 1999), text summarization (Zhang et al., 2004), text categorization (Hulth and Megyesi, 2006),", "startOffset": 169, "endOffset": 189}, {"referenceID": 13, "context": ", 2004), text categorization (Hulth and Megyesi, 2006),", "startOffset": 29, "endOffset": 54}, {"referenceID": 2, "context": "and opinion mining (Berend, 2011).", "startOffset": 19, "endOffset": 33}, {"referenceID": 22, "context": "Most of the existing keyphrase extraction algorithms have addressed this problem through two steps (Liu et al., 2009; Tomokiyo and Hurst, 2003).", "startOffset": 99, "endOffset": 143}, {"referenceID": 12, "context": "Researchers have tried to use n-grams or noun phrases with certain part-of-speech patterns for identifying potential candidates (Hulth, 2003; Le et al., 2016; Liu et al., 2010; Wang et al., 2016).", "startOffset": 128, "endOffset": 195}, {"referenceID": 19, "context": "Researchers have tried to use n-grams or noun phrases with certain part-of-speech patterns for identifying potential candidates (Hulth, 2003; Le et al., 2016; Liu et al., 2010; Wang et al., 2016).", "startOffset": 128, "endOffset": 195}, {"referenceID": 21, "context": "Researchers have tried to use n-grams or noun phrases with certain part-of-speech patterns for identifying potential candidates (Hulth, 2003; Le et al., 2016; Liu et al., 2010; Wang et al., 2016).", "startOffset": 128, "endOffset": 195}, {"referenceID": 30, "context": "Researchers have tried to use n-grams or noun phrases with certain part-of-speech patterns for identifying potential candidates (Hulth, 2003; Le et al., 2016; Liu et al., 2010; Wang et al., 2016).", "startOffset": 128, "endOffset": 195}, {"referenceID": 3, "context": "To effectively capture both the semantic and syntactic features, we use recurrent neural networks (RNN) (Cho et al., 2014; Gers and Schmidhuber, 2001) to compress the semantic information in the given text into a dense vector (i.", "startOffset": 104, "endOffset": 150}, {"referenceID": 5, "context": "To effectively capture both the semantic and syntactic features, we use recurrent neural networks (RNN) (Cho et al., 2014; Gers and Schmidhuber, 2001) to compress the semantic information in the given text into a dense vector (i.", "startOffset": 104, "endOffset": 150}, {"referenceID": 8, "context": "Furthermore, we incorporate a copying mechanism (Gu et al., 2016) to allow our model to find important parts based on positional information.", "startOffset": 48, "endOffset": 65}, {"referenceID": 20, "context": ", nouns, adjectives) (Liu et al., 2011; Wang et al., 2016; Le et al., 2016), and extracting important n-grams or noun phrases (Hulth, 2003; Medelyan et al.", "startOffset": 21, "endOffset": 75}, {"referenceID": 30, "context": ", nouns, adjectives) (Liu et al., 2011; Wang et al., 2016; Le et al., 2016), and extracting important n-grams or noun phrases (Hulth, 2003; Medelyan et al.", "startOffset": 21, "endOffset": 75}, {"referenceID": 19, "context": ", nouns, adjectives) (Liu et al., 2011; Wang et al., 2016; Le et al., 2016), and extracting important n-grams or noun phrases (Hulth, 2003; Medelyan et al.", "startOffset": 21, "endOffset": 75}, {"referenceID": 12, "context": ", 2016), and extracting important n-grams or noun phrases (Hulth, 2003; Medelyan et al., 2008).", "startOffset": 58, "endOffset": 94}, {"referenceID": 28, "context": ", 2016), and extracting important n-grams or noun phrases (Hulth, 2003; Medelyan et al., 2008).", "startOffset": 58, "endOffset": 94}, {"referenceID": 29, "context": "As for unsupervised approaches, primary ideas include finding the central nodes in text graph (Mihalcea and Tarau, 2004; Grineva et al., 2009), detecting representative phrases from topical clusters (Liu et al.", "startOffset": 94, "endOffset": 142}, {"referenceID": 7, "context": "As for unsupervised approaches, primary ideas include finding the central nodes in text graph (Mihalcea and Tarau, 2004; Grineva et al., 2009), detecting representative phrases from topical clusters (Liu et al.", "startOffset": 94, "endOffset": 142}, {"referenceID": 7, "context": "As for unsupervised approaches, primary ideas include finding the central nodes in text graph (Mihalcea and Tarau, 2004; Grineva et al., 2009), detecting representative phrases from topical clusters (Liu et al., 2009, 2010), and so on. Aside from the commonly adopted two-step process, another two previous studies realized the keyphrase extraction in entirely different ways. Tomokiyo and Hurst (2003) applied two language models to measure the phraseness and informa-", "startOffset": 121, "endOffset": 403}, {"referenceID": 20, "context": "Liu et al. (2011) share the most similar ideas to our work.", "startOffset": 0, "endOffset": 18}, {"referenceID": 20, "context": "Liu et al. (2011) share the most similar ideas to our work. They used a word alignment model, which learns a translation from the documents to the keyphrases. This approach alleviates the problem of vocabulary gaps between source and target to a certain degree. However, this translation model is unable to handle semantic meaning. Additionally, this model was trained with the target of title/summary to enlarge the number of training samples, which may diverge from the real objective of generating keyphrases. Zhang et al. (2016) proposed a joint-layer recurrent neural network model to extract keyphrases from tweets, which is another application of deep neural networks in the context of keyphrase extraction.", "startOffset": 0, "endOffset": 533}, {"referenceID": 1, "context": "The attention mechanism (Bahdanau et al., 2014) is a soft alignment approach that allows the model to automatically locate the relevant input", "startOffset": 24, "endOffset": 47}, {"referenceID": 2, "context": "It was first introduced by Cho et al. (2014) and Sutskever et al.", "startOffset": 27, "endOffset": 45}, {"referenceID": 2, "context": "It was first introduced by Cho et al. (2014) and Sutskever et al. (2014) to solve translation problems.", "startOffset": 27, "endOffset": 73}, {"referenceID": 1, "context": "Previous studies (Bahdanau et al., 2014; Cho et al., 2014) indicate that it can generally provide better performance of language modeling than a simple RNN and a simpler structure than other Long Short-Term Memory networks (Hochreiter and Schmidhuber, 1997).", "startOffset": 17, "endOffset": 58}, {"referenceID": 3, "context": "Previous studies (Bahdanau et al., 2014; Cho et al., 2014) indicate that it can generally provide better performance of language modeling than a simple RNN and a simpler structure than other Long Short-Term Memory networks (Hochreiter and Schmidhuber, 1997).", "startOffset": 17, "endOffset": 58}, {"referenceID": 11, "context": ", 2014) indicate that it can generally provide better performance of language modeling than a simple RNN and a simpler structure than other Long Short-Term Memory networks (Hochreiter and Schmidhuber, 1997).", "startOffset": 172, "endOffset": 206}, {"referenceID": 3, "context": "result, the above non-linear function f is replaced by the GRU function (see in (Cho et al., 2014)).", "startOffset": 80, "endOffset": 98}, {"referenceID": 1, "context": "was firstly introduced by Bahdanau et al. (2014) to make the model dynamically focus on the important parts in input.", "startOffset": 26, "endOffset": 49}, {"referenceID": 3, "context": "30,000 words in (Cho et al., 2014)), but a large amount of long-tail words are simply ignored.", "startOffset": 16, "endOffset": 34}, {"referenceID": 8, "context": "The copying mechanism (Gu et al., 2016) is one feasible solution that enables RNN to predict out-of-vocabulary words by selecting appropriate words from the source text.", "startOffset": 22, "endOffset": 39}, {"referenceID": 8, "context": "Please see (Gu et al., 2016) for more details.", "startOffset": 11, "endOffset": 28}, {"referenceID": 18, "context": "The largest one came from Krapivin et al. (2008), which contains 2,304 scientific publications.", "startOffset": 26, "endOffset": 49}, {"referenceID": 9, "context": "(Han et al., 2013; Rui et al., 2016).", "startOffset": 0, "endOffset": 36}, {"referenceID": 9, "context": "(Han et al., 2013; Rui et al., 2016). In total, we obtained a dataset of 567,830 articles, after removing duplicates and overlaps with testing datasets, which is 200 times larger than the one of Krapivin et al. (2008). Note that our model is only trained on 527,830 articles, since 40,000 publications are randomly held out, among which 20,000 articles were used for building a new test dataset KP20k.", "startOffset": 1, "endOffset": 218}, {"referenceID": 12, "context": "\u2013 Inspec (Hulth, 2003): This dataset provides 2,000 paper abstracts.", "startOffset": 9, "endOffset": 22}, {"referenceID": 18, "context": "\u2013 Krapivin (Krapivin et al., 2008): This", "startOffset": 11, "endOffset": 34}, {"referenceID": 16, "context": "\u2013 SemEval-2010 (Kim et al., 2010): 288 ar-", "startOffset": 15, "endOffset": 33}, {"referenceID": 17, "context": "Models are optimized using Adam (Kingma and Ba, 2014) with initial learning rate = 10\u22124, gradient clipping = 0.", "startOffset": 32, "endOffset": 53}, {"referenceID": 29, "context": "Four unsupervised algorithms (Tf-Idf, TextRank (Mihalcea and Tarau, 2004), SingleRank (Wan and Xiao, 2008), and ExpandRank (Wan and Xiao, 2008)) and two supervised algorithms (KEA (Witten et al.", "startOffset": 47, "endOffset": 73}, {"referenceID": 31, "context": "Four unsupervised algorithms (Tf-Idf, TextRank (Mihalcea and Tarau, 2004), SingleRank (Wan and Xiao, 2008), and ExpandRank (Wan and Xiao, 2008)) and two supervised algorithms (KEA (Witten et al., 1999) and Maui (Medelyan et al.", "startOffset": 180, "endOffset": 201}, {"referenceID": 26, "context": ", 1999) and Maui (Medelyan et al., 2009a)) are adopted as baselines.", "startOffset": 17, "endOffset": 41}, {"referenceID": 10, "context": "We set up the four unsupervised methods following the optimal settings in (Hasan and Ng, 2010), and the two supervised methods following the default setting as specified in their papers.", "startOffset": 74, "endOffset": 94}, {"referenceID": 10, "context": "The measures on NUS and SemEval here are higher than the ones reported in (Hasan and Ng, 2010) and (Kim et al.", "startOffset": 74, "endOffset": 94}, {"referenceID": 16, "context": "The measures on NUS and SemEval here are higher than the ones reported in (Hasan and Ng, 2010) and (Kim et al., 2010), probably because we utilized the paper abstract instead of the full text for training, which may", "startOffset": 99, "endOffset": 117}, {"referenceID": 10, "context": "Compared to the results reported in (Hasan and Ng, 2010), the performance of CopyRNN is better than TextRank (Mihalcea and Tarau, 2004) and KeyCluster (Liu et al.", "startOffset": 36, "endOffset": 56}, {"referenceID": 29, "context": "Compared to the results reported in (Hasan and Ng, 2010), the performance of CopyRNN is better than TextRank (Mihalcea and Tarau, 2004) and KeyCluster (Liu et al.", "startOffset": 109, "endOffset": 135}, {"referenceID": 22, "context": "Compared to the results reported in (Hasan and Ng, 2010), the performance of CopyRNN is better than TextRank (Mihalcea and Tarau, 2004) and KeyCluster (Liu et al., 2009), but lags behind the other three baselines.", "startOffset": 151, "endOffset": 169}], "year": 2017, "abstractText": "Keyphrase provides highly-summative information that can be effectively used for understanding, organizing and retrieving text content. Though previous studies have provided many workable solutions for automated keyphrase extraction, they commonly divided the to-be-summarized content into multiple text chunks, then ranked and selected the most meaningful ones. These approaches could neither identify keyphrases that do not appear in the text, nor capture the real semantic meaning behind the text. We propose a generative model for keyphrase prediction with an encoder-decoder framework, which can effectively overcome the above drawbacks. We name it as deep keyphrase generation since it attempts to capture the deep semantic meaning of the content with a deep learning method. Empirical analysis on six datasets demonstrates that our proposed model not only achieves a significant performance boost on extracting keyphrases that appear in the source text, but also can generate absent keyphrases based on the semantic meaning of the text. Code and dataset are available at https://github.com/memray/seq2seq-", "creator": "LaTeX with hyperref package"}}}