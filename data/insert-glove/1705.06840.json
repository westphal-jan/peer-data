{"id": "1705.06840", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-May-2017", "title": "The Conference Paper Assignment Problem: Using Order Weighted Averages to Assign Indivisible Goods", "abstract": "Motivated debabrata by the common voix academic chosin problem of hubbardston allocating papers to coworker referees sivanesan for conference moise reviewing we shujaat propose foix a xubuntu novel afterelton.com mechanism for 300-350 solving the ml assignment problem when we have 249.95 a two sided ostry matching problem shaughnessy with ambuhl preferences long-neglected from one side (the maccari agents / reviewers) mcc over bonfanti the cefr other side (martial the objects / sub-sea papers) and both sides have partyka capacity redbull constraints. The ekodanto assignment horsley problem is a second-hand fundamental problem 63.29 in gautamiputra both collating computer science unum and economics golap with application in tjan@globe.com many areas clampetts including paraphrase task amazon.co.uk and lincei resource historiarum allocation. We non-ibm draw rudai inspiration catacomb from multi - criteria tropper decision making and providentially voting and 747-200 use newsquest order weighted auschwitz averages (OWAs) kurihara to kulenovic propose a husham novel pams and novi flexible class 2-6-1 of algorithms ikela for the assignment problem. franklin We show chaffin an elizardo algorithm hypostatic for a330-300 finding deco-style a $ \\ Sigma $ - toiled OWA mousebirds assignment nucor in polynomial shriya time, in contrast to nkolo the 1,836 NP - 109-103 hardness brunansky of finding unjustly an makai egalitarian assignment. Inspired sheet by awami this ,16 setting arnal we eighty-eight observe an 20-meter interesting garberville connection between refinance our model and the neo-dada classic rathfarnham proportional laterano multi - macrophytes winner election litmanen problem 74.27 in social dmc choice.", "histories": [["v1", "Fri, 19 May 2017 00:51:53 GMT  (48kb,D)", "http://arxiv.org/abs/1705.06840v1", "3 Figure"]], "COMMENTS": "3 Figure", "reviews": [], "SUBJECTS": "cs.AI cs.GT cs.MA", "authors": ["jing wu lian", "nicholas mattei", "renee noble", "toby walsh"], "accepted": false, "id": "1705.06840"}, "pdf": {"name": "1705.06840.pdf", "metadata": {"source": "CRF", "title": "The Conference Paper Assignment Problem: Using Order Weighted Averages to Assign Indivisible Goods", "authors": ["Jing Wu Lian", "Nicholas Mattei", "Renee Noble", "Toby Walsh"], "emails": ["renee.noble@data61.csiro.au,", "lianjingwu@gmail.com", "n.mattei@ibm.com", "toby.walsh@data61.csiro.au"], "sections": [{"heading": "1 Introduction", "text": "Assigning indivisible items to multiple agents is a fundamental problem in many fields including computer science, economics and operations research. Algorithms for matching and assignment are used in a variety of application areas including allocating runways to airplanes, residents to hospitals, kidneys to patients [15], students to schools [10], assets to individuals in a divorce, jobs to machines, and tasks to cloud computing nodes [26]. Understanding the properties of the underlying algorithms is an important aspect to ensuring that all participating agents are happy with their allocations and do not attempt to misrepresent their preferences; a key area of study for computational social choice [9].\nAn area that is near to many academics\u2019 hearts is the problem of allocating papers to referees for peer review. The results of grant, journal, and conference reviewing can have significant impact on the careers of scientists. Ensuring that papers and proposals are reviewed by the most qualified/interested referees most is part of ensuring that items are treated properly and all participants support the outcome of the processes. Making\nar X\niv :1\n70 5.\n06 84\n0v 1\n[ cs\n.A I]\n1 9\nsure these processes work for both the proposers and the reviewers is important and methods for improving peer review have been proposed and discussed in AI [29] and broadly across the sciences [28].\nThere are a number of ways one can improve the quality of peer review [29]. First is to ensure that reviewers are not incentivized to misreport their reviews for personal gain. Along this line there has been significant interest recently in strategyproof mechanisms for peer review [6]. Unfortunately, the method that we discuss in this paper is not strategyproof. Another way is to ensure that reviewers are competent to provide judgements on the papers they are assigned. The Toronto Paper Matching System [11] is designed to improve the process from this paper-centric model. A third alternative, and the one we focus on in this study, is ensuring that reviewers are happy with the papers they are asked to review. This is fundamentally a question about the optimization objectives of the assignment functions used.\nFormally, we study the Conference Paper Assignment Problem (CPAP) [22] which is a special of the Multi-Agent Resource Allocation Problem (MARA) [7], and propose a novel assignment, the \u03a3 -OWA assignment. In the CPAP setting we have a two-sided market where on one side the agents/reviewers have preferences over the other side, the objects/papers, and both sides have (possibly infinite) upper and lower capacities. A fundamental tension in assignment settings is the tradeoff between maximizing the social welfare, also know as the utilitarian maximal assignment and the Rawlsian [30] fairness concept of maximizing the utility of the worst off agent, known as the egalitarian maximal assignment. These two ideas are incompatible optimization objectives and diverge in a computational sense as well: computing the utilitarian assignment for additive utilities can be done in polynomial time, while computing the egalitarian assignment is NP-complete [14]. This, perhaps, could be the reason that implementers of large conference paper assignment software often opt for utilitarian assignments, as is supposedly the case for EasyChair [19].4 However, it is also not clear if an egalitarian assignment is desirable for CPAP. Contributions. We establish a motivation for using OWA vectors in the assignment setting and define a novel notion of allocation, the \u03a3 -OWA assignment. We give algorithm to compute an \u03a3 -OWA maximal assignment in polynomial time and we show that the \u03a3 - OWA objective generalizes the utilitarian objective. We show that \u03a3 -OWA assignments satisfy a notion of Pareto optimality w.r.t. the pairwise comparisons of the objects by the agents. We implement an algorithm for \u03a3 -OWA assignments and perform experiments on real world conference paper assignment data."}, {"heading": "2 Preliminaries", "text": "From here we will use the more general notation agents/objects to describe our setting. In assignment settings each agent provides their preference over the objects as a reflexive, complete, and transitive preference relation (weak order) over the set of objects, %i.\n4 This is technically unsubstantiated as when the authors contacted EasyChair to understand the assignment process we were told, \u201cWe do not provide information on how paper assignment in EasyChair is implemented. The information in Garg et.al. may be incorrect or out of date - none of the authors worked for EasyChair, they also had no access to the EasyChair code.\u201d\nWe do not assume that %i is complete; it is possible that some agents may have conflicts of interest or have no preference for a particular object; this assumption is often called \u201chaving unacceptable objects\u201d in the literature [26].\nIn many real-world CPAP settings there are a fixed number of equivalence classes into which agents are asked to place the objects [27]. We assume that the number of equivalence classes (ranks) of objects are given as input to the problem and agents tell us within which rank each objects belong. Agents also provide a decreasing utility value for each rank5. Our main result can be extended to the case where the number of equivalence classes is not fixed.\nFormally, the CPAP problem is defined by (N,O,%,u,\u2206): a set of n agents N = {a1, . . . ,an}; a set of m objects O = {o1, . . . ,om}; for each i \u2208 N, a reflexive and transitive preference relation (weak order) over the set of objects, %i, divided into \u2206 equivalence classes (ranks); and for each i \u2208 N a utility vector ui is of length \u2206 and assigns a decreasing utility ui(k)\u2192 R for each k \u2208 [1,\u2206 ], i.e., ui(1) > ui(2) > .. . > ui(\u2206). Let ri( j) be the rank of object j for i and ui(ri( j)) denote the value of i for j."}, {"heading": "2.1 Side Constraints and Feasible Assignments", "text": "There are two practical constraints that we include in our model, making our model more general than the standard MARA or CPAP problems studied in computer science [7]: upper and lower capacities on both the agents and objects.\nAgent Capacity: each agent i \u2208 N has (possibly all equal) upper and lower bound on their capacity, the number of objects they can be allocated, cNmin(i) and c N max(i).\nObject Capacity: each object j \u2208 O has a (possibly all equal) upper and lower bound on the number of agents assigned to it, cOmin( j) and c O max( j), respectively.\nWe can now define a feasible assignment A for an instance (N,O, ,u,\u2206). For a given assignment A, let A(i, :) denote the set of objects assigned to agent i in A, let A(:, j) denote the set of agents assigned to object j, and let | \u00b7 | denote the size (number of elements) of a set or vector. A feasible assignment A must obey:\n[\u2200i \u2208 N : cNmin(i)\u2264 |A(i, :)| \u2264 cNmax(i)]\u2227 [\u2200 j \u2208 O : cOmin( j)\u2264 |A(:, j)| \u2264 cOmax( j)].\nWe write the set of all feasible assignments for an instance as A(N,O, ,u,\u2206).6"}, {"heading": "2.2 Individual Agent Evaluation", "text": "We first formalize how an individual agent evaluates their assigned objects. Each feasible assignment A \u2208 A gives rise to a signature vector for each agent i \u2208 N; intuitively the signature vector is the number of objects at each rank assigned to i. Formally let \u03c3 i(A) = (\u03c3 i,1(A), . . . ,\u03c3 i,\u2206 (A)) where \u03c3 i,l(A) = |{ j \u2208 A(i, :)|ri( j) = l}| for each l \u2208 [1, . . . ,\u2206 ].\n5 We assume that agents can give any utilities as input. However, often the utilities are restricted to be the same, i.e., Borda utilities in conference paper bidding, or come from some fixed budget, i.e., bidding fake currency as in course allocation at Harvard [10]. 6 We will omit the arguments when they are clear from context.\nFor indivisible (discrete) objects the lexicographic relation can be modeled by the additive utility relation by setting the agent utilities to high enough values. Formally, if the utility for rank i < j is u(i) > u( j) \u00b7m then the lexicographic and additive utility relations are the same, i.e., no matter how many additional objects of rank j the agent receives, one additional object of rank i is more preferred. We now define the relations that a referee might consider between assignments A and B.\nLexicographic: An agent i lexicographically prefers A to B if \u03c3 i(A) comes before \u03c3 i(B) in the lexicographic order. That is, there is an index 1 \u2265 l \u2265 \u2206 such that for all k > l we have \u03c3 i,k(A) = \u03c3 i,k(B) and \u03c3 i,l(A)> \u03c3 i,l(B); i.e., i receives at least one more paper of a higher rank in A than in B. The lexicographic relation over vectors has a long history in the assignment literature [18].\nAdditive Utility: An agent i prefers assignment A to B if he has more additive utility for the objects assigned to him in A than in B. Formally, (and slightly abusing notation) ui(A) = \u2211 j\u2208A(i,:) ui(ri( j)) > \u2211 j\u2208B(i,:) ui(ri( j)), or an alternative formulation using the dot product, ui(A) = ui \u00b7\u03c3 i(A)> ui \u00b7\u03c3 i(B)."}, {"heading": "2.3 Overall Assignment Evaluation", "text": "In the literature there are several optimization objectives defined over an assignment that an implementer may wish to consider. We limit our discussion to the two classical notions below. Additional discussion of objectives, including the imposition of various fairness criteria for the CPAP setting can be found in Garg et al. [19] and for the MARA setting see e.g., Bouveret and Lema\u0131\u0302tre [8].\nUtilitarian Social Welfare Maximal Assignment: Often called the utilitarian assignment, we want to maximize the total social welfare over all the agents. An assignment is a utilitarian assignment if it satisfies:\nargmax A\u2208A \u2211i\u2208N \u2211j\u2208A(i,:) ui(ri( j)) = argmax A\u2208A \u2211i\u2208N ui \u00b7\u03c3 i(A).\nEgalitarian Social Welfare Maximal Assignment: Often called the egalitarian assignment, we want to enforce the Rawlsian notion of fairness by making sure that the worst off referee is as happy as possible, i.e., maximize the utility of the least well off agent. Formally,\nargmax A\u2208A min i\u2208N \u2211 j\u2208A(i,:) ui(ri( j)) = argmax A\u2208A min i\u2208N ui \u00b7\u03c3 i(A).\nIn the discrete MARA and CPAP setting where objects are not divisible, the problem of finding an egalitarian assignment is NP-hard [14] while finding a utilitarian assignment can be done in polynomial time [7]."}, {"heading": "3 Background and Related Work", "text": "One and two sided matching and assignment problems have been studied in economics [31] and computer science [26, 9] for over 40 years. Matching and assignment have\nmany applications including kidneys exchanges [15] and school choice [1]. Our problem is often called the multi-agent resource allocation (MARA) problem in computer science [7] The papers to referees formulation of this problem has some additional side constraints common in the economics literature, but not as common in computer science [26]. In the economics literature the Workers-Firms problem is the most closely related analogue to our problem, modeling many-many matchings with capacities [24].\nThe conference paper assignment has been studied a number of times over the years in computer science [22], as has defining and refining notions of fairness for the assignment vectors in multi-agent allocation problems [20]. We build off the work of Garg et al. [19], who extensively study the notion of fair paper assignments, including leximin and rank-maximal assignments, within the context of conference paper assignment. Garg et al. [19] show that for the setting we study, finding an egalitarian optimal assignment and finding a leximin optimal assignment are both NP-hard when there are three or more equivalence classes; and polynomial time computable when there are only two. They also provide an approximation algorithm for leximin optimal assignments. We know that if the capacity constraints are hard values, i.e., each reviewer must review \u2264 x papers and each paper must receive exactly y reviews, then the resulting version of capacitated assignment is NP-hard [25]. Answer set programming for CPAP was studied by Amendola et al. [3]; they encode the CPAP problem in ASP and show that finding a solution that roughly correspond to the leximin optimal and egalitarian solutions can be done in reasonable time for large settings (\u2248 100 agents).\nCPAP also receives considerable attention in the recommender systems [13] and machine learning [12] communities. Often though, this work takes the approach of attempting to infer a more refined utility or preference model in order to distinguish papers. Fairness and efficiency concerns are secondary. A prime example of this is the Toronto Paper Matching System designed by Charlin and Zemel [11]. This system attempts to increase the accuracy of the matching algorithms by having the papers express preferences over the reviewers themselves; where these preferences are inferred from the contents of the papers.\nWe make use of Order weighted averages (OWAs), often employed in multi-criteria decision making [33]. OWAs have recently received attention in computational social choice for voting and ranking [21], finding a collective set of items for a group [32], and multi-winner voting with proportional representation [17, 16]. The key difference between CPAP and voting using OWAs in the ComSoc literature is that CPAP does not select a set of winners that all agents will share. Instead, all agents are allocated a possibly disjoint set of objects."}, {"heading": "4 \u03a3 -OWA Assignments", "text": "We now formally define OWAs and their use for defining assignment objectives. We will discuss alternative formulations of \u03a3 -OWA which have been studied.\nAn order weighted average (OWA) is a function defined for an integer K as a vector \u03b1(K) = (\u03b11, . . . ,\u03b1K) of K non-negative numbers. Let x = (x1, . . . ,xK) be a vector of K numbers and let x\u2193 be the non-increasing rearrangement of x, i.e. x\u2193 = x\u21931 \u2265 x \u2193 2 \u2265 . . .\u2265\nx\u2193K . Then we say:\nOWA\u03b1(x) = \u03b1 \u00b7x\u2193 = K\n\u2211 i=1\n\u03b1i \u00b7x\u2193i .\nIn order to apply OWAs to our setting we need to define the weighted rank signature of an assignment. Let \u03c9 i(A) be defined as the sorted vector of utility that a referee gets from an assignment A. Formally,\n\u03c9 i(A) = sort({\u2200 j \u2208 A(i, :) : ui(r( j))}).\nFor example, if A(i, :) included two objects with utility 3, one of utility 1, and one of utility 0, we would have\n\u03c9 i(A) = (3,3,1,0).\nOur inspiration for applying OWAs comes from a multi-winner voting rule known as Proportional Approval Voting (PAV) [23, 5, 4]. In approval voting settings, each agent can approve of as many candidates as they wish. Under the standard approval voting (AV) method, all approvals from each agent assign one point to the candidate for which they are cast. However, this can lead to a number of pathologies described by Aziz et al. [5] and it intuitively does not seem fair; once a candidate that you like has been selected to the winning set your next candidate selected to the winning set should seemingly count less. Hence in PAV, which is designed to be more fair [4], a voter\u2019s first approval counts for a full point, the second for 1/2, the next for 1/3, and on as a harmonically decreasing sequence.\nTransitioning this logic to the CPAP setting, we were motivated to find a way to distribute objects to agents that increases the number of agents who receive their top ranked objects. This is the logic of PAV: once you get a candidate into the winning set, you should count less until everyone else has a candidate in the winning set. If we desire to directly get a rank maximal assignment, completely ignoring the utilities, then we know this is polynomial by a result from Garg et al. [19]. However, if we wish to modulate between using the utilities and using only the ranks, perhaps we can use OWAs. We use the sum over all agents of OWA\u03b1(\u03c9) = \u03b1 \u00b7\u03c9 as the optimization criteria for the assignment.\nIn order to cleanly define this we need to place some restrictions on our OWA vectors. Firstly, the length of \u03b1 needs to be at least as long as the maximum agent capacity, i.e., |\u03b1| \u2265 argmaxi\u2208N(cNmax(i)). Typically the literature on OWAs assumes that \u03b1 is normalized, i.e., \u22111\u2264i\u2264K \u03b1i = 1. We do not enforce this convention as we wish to study the PAV setting with \u03b1 = (1,1/2, . . .). This is formally a relaxation and we observe that whether or not the OWAs are normalized does not affect our computational results. However, we do require that our OWA vector be non-increasing and that each entry be \u2265 0, i.e., for any i, j \u2208 |\u03b1|, i < j we have \u03b1 i \u2265 \u03b1 j \u2265 0.\n\u03a3 -OWA ASSIGNMENT Input: Given an assignment setting (N,O, ,u,\u2206) with agent ca-\npacities [cNmin(i),c N max(i)] for all i \u2208 N, and object capacities [cOmin( j),c O max( j)] for all j \u2208 O, and a non-increasing OWA vec-\ntor \u03b1 i with |\u03b1| \u2265max\u2200i\u2208N(cNmax(i)). Question: Find a feasible assignment A such that\nA = argmax A\u2208A\n|n| \u2211 i=1 \u03b1 i \u00b7\u03c9 i(A).\nIn our formulation, the OWA operator is applied to the vector of agent utilities and then we aggregate (or sum) these modified utilities to give the assignment objective. Hence, the \u03a3 -OWA name. We observe that this formulation strictly generalizes the utilitarian assignment objective; if we set \u03b1 = (1)n we recover the utilitarian assignment.\nOne may also wish to consider applying the OWA over the sorted vector of total agent utility for their allocation, which one could call the OWA-\u03a3 version of our problem. Indeed, this formulation of the problem has been considered before and proposed in the earliest writings on OWAs for decision making [33]. Taking the OWA-\u03a3 formulation allows one to recover both the utilitarian assignment, \u03b1 = (1/n, . . . ,1/n), as well as the egalitarian assignment, \u03b1 = (0, . . . ,0n\u22121,1). However, because the OWA-\u03a3 formulation is a generalization of the egalitarian assignment, it becomes NP-hard in general [14].\nWe think of the \u03b1 vector as a kind of control knob given to the implementer of the market, allowing them to apply a sub-linear transform to the agent utilities. This ability may be especially useful when agents are free to report their (normalized) utilities for ranks via bidding or other mechanisms [10]. In many settings the utility vector is controlled by the individual agents, while the OWA vector is under the control of the market implementers. Consider the following example.\nExample 1. Consider a setting with four agents N = {a1,a2,a3,a4} agents and four objects O = {o1,o2,o3,o4}. For all agents let cNmin = cNmax = 2 and for all objects let cOmin = c O max = 2. For the \u03a3 -OWA assignment, let \u03b1 = (1,1/2).\no1 o2 o3 o4 a1 11 9 0 0 a2 8 8 2 2 a3 7 7 3 3 a4 6 6 4 4\nWe get the following allocations. Utilitarian:\nA(a1, :) = {o1,o2},u1(A) = 20; A(a2, :) = {o1,o2},u2(A) = 16; A(a3, :) = {o3,o4},u3(A) = 6; A(a4, :) = {o3,o4},u4(A) = 8; \u2211i ui(A) = 50.\nOWA, \u03b1 = (1,1/2): A(a1, :) = {o1,o2},u1(A) = 20, \u03b1 \u00b7\u03c91 = 15.5; A(a2, :) = {o2,o3},u2(A) = 10, \u03b1 \u00b7\u03c92 = 9.0; A(a3, :) = {o1,o4},u3(A) = 10, \u03b1 \u00b7\u03c93 = 8.5; A(a4, :) = {o3,o4},u4(A) = 8, \u03b1 \u00b7\u03c94 = 5.0; \u2211i ui(A) = 48.\nEgalitarian: A(a1, :) = {o1,o4},u1(A) = 11; A(a2, :) = {o2,o4},u2(A) = 10; A(a3, :) = {o2,o3},u3(A) = 10; A(a4, :) = {o1,o3},u4(A) = 10; \u2211i ui(A) = 41.\nInspecting the results of Example 1, we observe that in the set of all utilitarian maximal assignments have a1 and a2 each being assigned to o1 and o2, in the set of all \u03a3 -OWA maximal assignments a3 is assigned one of o1 or o2 while a2 is assigned one of o3 or o4, while in the set of all egalitarian maximal assignments each of the agents receives one of either o1 or o2 along with one of o3 or o4. Thus we observe the following.\nObservation 1 The set of assignments returned by each of the three objective functions, utilitarian, egalitarian, and OWA, can be disjoint.\nThere are instances where the set of \u03a3 -OWA assignments is the same as the set of egalitarian assignments, but disjoint from the set of utilitarian assignments. Hence, it is an interesting direction for future work to fully characterize \u03a3 -OWA assignments and discover OWA vectors with nice properties."}, {"heading": "4.1 Pareto Optimality", "text": "An allocation S is more preferred by a given agent with respect to pairwise comparisons than allocation T if S is a result of replacing an item in T with a strictly more preferred item. Note that the pairwise comparison relation is transitive. An allocation is Pareto optimal with respect to pairwise comparisons if there exists no other allocation that each agent weakly prefers and at least one agent strictly prefers.\nLemma 1. Consider an agent i and two allocations S and T of equal size. Then if S is at least as preferred as T by i with respect to pairwise comparison, then S yields at least as much OWA value as T for any OWA vector no matter if it is increasing or decreasing.\nProof. Note that S can be viewed as a transformation from T where each item j is replaced by some other item j\u2032 that is at least as preferred. Hence, the value of the item either stays the same or increases. In either case, the corresponding OWA multiplied with the value is the same. Since the OWA transform is bilinear, the total OWA score of S is at least as much as that of T .\nProposition 1. The \u03a3 -OWA maximal assignment is Pareto optimal with respect to pairwise comparison irrespective of the OWA.\nProof. Assume for contradiction that a \u03a3 -OWA maximal assignment A is not Pareto optimal with respect to pairwise comparisons. From Lemma 1, there exists another outcome A\u2032 that each agent weakly prefers and at least one agent strictly prefers. But this means that in A\u2032 each agent gets at least as much OWA score and at least one agent gets strictly more. But this contradicts the fact that A is OWA maximal."}, {"heading": "5 An Algorithm for \u03a3 -OWA assignments", "text": "We give an algorithm for finding \u03a3 -OWA assignments using flow networks. In this proof we use the most general formulation of our problem by allowing the values of the upper and lower per-agent capacities, [cNmin(i),c N max(i)], to vary for each agent; and the upper and lower object capacities, [cOmin( j),c O max( j)], to vary for each object.\nTheorem 2. An \u03a3 -OWA assignment can be found in polynomial time.\nProof. We reduce our problem to the problem of finding a minimum cost feasible flow in a graph with upper and lower capacities on the edges, which is a polynomial time solvable problem. In addition to being polynomial time solvable, we know that the flow is integral as long as all edge capacities are integral, even if we have real valued costs [2]. Figures 1 and 2 provide a high level view of the flow network that we will construct.\nIn Figure 1 we first build a tripartite graph with two sets of nodes and one set of gadgets per agent: the agent nodes, one for each agent ai; the agent gadgets, one (illustrated in Figure 2) for each agent ai; and the object nodes, one for each object o j. There is an edge from the source node s to each of the agent nodes, each with cost 0, minimum flow capacity cNmin(i) and a maximum flow capacity c N max(i). This set of edges and nodes enforces the constraint that each ai has capacity [cNmin(i),c N max(i)]. We also construct an edge from each object node to the sink t. Each of these edges has a cost 0, a minimum capacity cOmin( j), and a maximum capacity c O max( j). This set of edges enforces the constraint that each o j has capacity [cOmin( j),c O max( j)].\nWe now turn to the agent gadget depicted in Figure 2 for arbitrary ai. The leftmost node and the rightmost set of nodes in Figure 2 correspond to the agent nodes N and\nobject nodes O in Figure 1, respectively. In each agent gadget we create a tripartite subgraph with the agent node ai serving as the source and the set of object nodes O serving as the sinks.\nWe create three layers of nodes which we describe in turn from left to right. First, we create a set of decision nodes with labels \u03b11, . . . ,\u03b1d where cNmax(i)\u2264 d\u2264 |\u03b1|. Intuitively, we will be multiplying the OWA value \u03b11 by the utility for some object, so we need to keep track of all the values that could result. The arcs from ai to each of the nodes in this set has upper capacity 1, minimum capacity 0, and cost 0. If we have the case that cNmax(i)< d then we can set the maximum capacity of the edges to node(s) \u03b1 j, j > cNmax(i) to 0. This enforces that each value in the OWA vector can modify at most one utility value.\nFor each of the decision nodes \u03b11, . . . ,\u03b1d constructed, we create a set of object/decision nodes for each o j which we denote o j\u03b1k. From each of the decision nodes \u03b11, . . . ,\u03b1d we create an edge to each of the object/decision nodes created for this particular decision node \u03b1k, i.e., o1\u03b11,o2\u03b11, . . . ,om\u03b11 for \u03b11. Each of these edges has maximum capacity 1 and a cost equal to \u22121 \u00b7 ui(o j) \u00b7\u03b11 for rank 1 and object o j \u2208 O. These costs are the (negative) cost that matching agent ai with object o j at weighted rank dk contributes to the OWA objective.\nFinally, we create one set of agent/object nodes, one for each o j denoted aio j. From all the object/decision nodes we connect all nodes with a label of o j to the corresponding agent/paper node, i.e., o1\u03b11,o1\u03b12, . . .o1\u03b1d all connect to aio1 with cost 0 and maximum capacity 1. We then connect the agent/object node to the corresponding object node in the main construction from O, i.e., aio1 to o1 with cost 0 and maximum capacity 1. This set of nodes and edges enforces that each agent can be assigned each object once.\nWe can extract an assignment from the minimum cost feasible flow by observing that paper o j is allocated to agent ai if and only if there is a unit of flow passing from the\nparticular agent/object node aio j to the object node o j. We now argue for the correctness of our algorithm in two steps, (1) that all constraints for the \u03a3 -OWA assignment problem are enforced and (2) that a minimum cost feasible flow in the constructed graph gives an \u03a3 -OWA assignment. For (1) we note that since the units of flow across the graph represent the assignment and we have explained how the capacity constraints on all edges enforce each of the particular constraints imposed by our definition of a feasible assignment, there is a feasible flow iff the flow satisfies the constraints.\nFor (2) observe that for each agent, the \u03b1 nodes fill with flow in order from \u03b11 to \u03b1d as the OWA vector is non-increasing and the utilities are decreasing, i.e., for each agent, the edge costs monotonically increase from the edges associated with \u03b11 to the edges associated with \u03b1d . Thus, for each agent, the first unit of flow to this agent will use the least cost (most negative) edge must be associated with \u03b11; and similarly for \u03b12 through \u03b1d . From the capacity constraints we know there is only one unit of flow that enters each decision node \u03b1i and there is only one unit of flow that can leave each agent/paper node aio j. This means that each \u03b1i can modify only one o j and each o j selected must be unique for this agent.\nAs the decision nodes are filled in order and \u03b1i can only modify the value for a single object, we know the total cost of the flow across the agent gadget for each ai is equal to \u22121 \u00b7\u03b1 i \u00b7\u03c9 i. Hence, the price of the min cost flow across all agents is equal to \u22121 \u00b7\u2211\u2200i\u2208N \u03b1 i \u00b7\u03c9 i(A). Thus, the min cost flow in the graph is an \u03a3 -OWA assignment."}, {"heading": "5.1 Generalizations", "text": "We observe two possible generalizations of the above construction which allow us to use this constructive proof for more general instances than the CPAP. First, The proof above can be generalized to allow for \u03b1 to vary for each agent. Specifically, observe that the decision nodes for each agent ai are independent from all other agents. This means that, for each agent (or a class of agents) we could use an OWA vector \u03b1ai . This ability may be useful, for instance, when a group of agents reports the same extreme utility distribution and the organizer wishes to apply the same transform to these utilities.\nThe second generalization that we can make to the above construction is to allow each agent to be assigned to each object more than once. While this ability does not make sense in the reviewers/papers setting (unless there are sub reviewers) there could be other capacitated assignment settings where we may wish to assign the agents to objects multiple times e.g., if there are discrete jobs that need to be done a certain number of times but and a single agent can be assigned the same job multiple times.\nIn order to generalize the capacity constraint from 1 for each agent i for each object j we introduce a capacity upper bound zi, j which encodes the number of times that agent i can be assigned to object j. Taking zi, j = 1 for all i and j gives us the original CPAP setting. In order to enforce this constraint, within each agent gadget (Figure 2) we add a capacity constraint equal to zi, j from each edge aio j to o j. If we want a lower bound for the number of copies of o j assigned to ai we can encode this lower bound on this edge as well.\nWe can extract an assignment from the minimum cost feasible flow by observing that paper o j is allocated to agent ai zi j times if and only if there are units of flow\npassing from the particular agent/object node aio j to the object node o j. The argument for correctness follows exactly from the proof of Theorem 2 above.\nCorollary 1. An \u03a3 -OWA assignment can be found in polynomial time even if each agent ai has a unique OWA vector \u03b1ai and each object o j can be assigned to each agent ai any number of times (not just once)."}, {"heading": "6 Experiments", "text": "We now turn to the question of how good are \u03a3 -OWA assignments in practice? We answer this question using real world data from three large international conferences (MD-00002-00000001 \u2013 00000003) from WWW.PREFLIB.ORG [27]. We focus discussion on MD-00002-00000003 which has 146 agents and 175 objects. We implemented the algorithm given in Section 5 using networkX for Python and Lemon for C++. However, we still have a run time\u2248O(V 4), giving runtime\u2248 (1502 \u00b73)4) = 2\u00d71019, which caused our computers to crash even with 16GB of memory. This was quite disappointing as we thought the flow argument could be used to solve this problem on real-world instances.\nNot to be deterred, we still wanted to investigate the assignments we get from \u03a3 - OWA compare to the utilitarian and egalitarian assignments. Consequently, we implemented the model as an MIP in Gurobi 7.0 and it ran in under 1 minute for all instances and settings using 4 cores. Our MIP is similar to the one given by Skowron et al. [32] and the MARA MIP by Bouveret et al. [7]. However, as we have capacity constraints and individual/variable length OWAs, our MIP is more general than either.\nTo encode the \u03a3 -OWA problem we introduce a binary variable xa,o indicating that agent a is assigned object o. We introduce a real valued variable uowa,a which is the \u03a3 -OWA utility for agent a. Finally, we introduce ra,o,p for the OWA matrix which notes that agent a is assigned object o at OWA rank p. The MIP is given below.\nmax \u2211a\u2208A \u2211o\u2208O,p\u2208P ua(o) \u00b7\u03b1p \u00b7 ra,o,p Description: s.t. cOmin(o)\u2264 \u2211a\u2208A xa,o \u2264 cOmax(o) \u2200o \u2208 O (1) Object Capacities\ncNmin(a)\u2264 \u2211o\u2208O xa,o \u2264 cNmax(a) \u2200a \u2208 A (2) Agent Capacities \u2211p\u2208P ra,o,p \u2264 1 \u2200a \u2208 A,\u2200o \u2208 O (3) One Object per OWA Rank \u2211o\u2208O ra,o,p \u2264 1 \u2200a \u2208 A,\u2200p \u2208 P (4) Objects Have One Rank \u2211p\u2208P ra,o,p \u2265 xa,o \u2200a \u2208 A,\u2200o \u2208 O (5) Assignment to OWA Link Fcn. \u2211o\u2208O ra,o,p \u2265 \u2211o\u2208O ra,o,p+1 \u2200a \u2208 A,\u2200p \u2208 P (6) Ranks Fill in Increasing Order \u2211o\u2208O ra,o,p \u00b7ua(o)\u2265 \u2211o\u2208O ra,o,p+1 \u00b7ua(o) \u2200a \u2208 A,\u2200p \u2208 P (7) Agent Utility Must Be Decreasing\nConstraints (1)\u2013(4) enforce the cardinality constraints on the agents, objects, and OWA rank matrix. Constraint (5) links the agent and object assignments to be positions in the OWA rank matrix. Line (6) enforces that the rank matrix fills from the first position to the cNmax position for each agent. And finally (7) enforces that the \u03a3 -OWA value of the assignment positions in the rank matrix must be decreasing. We then maximize the sum over all agents of the OWA objective value.\nWe found the utilitarian, egalitarian, and \u03a3 -OWA assignments for each of the real world datasets when each object must receive 3\u20134 reviews and each agent must review\n6\u20137 objects. In the data, each agent sorts the papers into 4 equivalence classes which we gave utility values (5,3,1,0). We use the PAV inspired decreasing harmonic OWA vector (1,1/2,1/3, . . .) to compute the \u03a3 -OWA assignment.\nOne of the reasons we wanted to use the \u03a3 -OWA assignment is to allow the market designer to enforce a more equitable distribution of papers with respect to the ranks. Hence, our test statistic is the number of top ranked items that the average agent can expect to receive. Figure 3 shows the agent counts and the cumulative distribution function (CDF) for the number of top ranked items the agents receive.\nLooking at the left side of the figure, we see that 71 agents receive 5 top ranked papers under the \u03a3 -OWA assignment while under the utilitarian assignment only 46 do. Under the utilitarian assignment 35 agents receive more than 5 top ranked papers. Consequently, on average, agents can expect to get 4 top ranked papers in the \u03a3 -OWA assignment, 3 in the egalitarian assignment, and 4.2 in the utilitarian assignemnt. However under the utilitarian assignment, several agents receive an entire set of top ranked objects, while the egalitarian assignment modulates this so that most agents only receive 3\u20134 top ranked items. In contrast, the \u03a3 -OWA assignment is a balance between these with the most agents receiving 5 top ranked items."}, {"heading": "7 Conclusions", "text": "We have proposed and provided algorithms for the novel notion of a \u03a3 -OWA assignment. The \u03a3 -OWA assignment using decreasing OWA vectors gives the central orga-\nnizer a \u201cslider\u201d to move from utility maximizing towards a more rank maximal assignment computationally efficient package. An important open question for future work is to find axiomatic characterizations for good OWA vectors. Additionally, the OWA method, and all methods for CPAP that we surveyed, treat objects as having positive utility. It is generally the case that reviewers at a conference want to review fewer, not more, papers. Consequently it would be interesting to study CPAP from the point of view of chores, as they are called in the economics literature."}], "references": [{"title": "The New York City high school match", "author": ["A. Abdulkadiro\u011flu", "P. Pathak", "A.E. Roth"], "venue": "American Economic Review pp", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2005}, {"title": "Network Flows: Theory, Algorithms, and Applications", "author": ["R.K. Ahuja", "T.L. Magnanti", "J.B.Orlin"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1993}, {"title": "On the application of answer set programming to the conference paper assignment problem", "author": ["G. Amendola", "C. Dodaro", "N. Leone", "F. Ricca"], "venue": "Proc. of the 15th International Conference of the Italian Association for Artificial Intelligence (AI*IA),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2016}, {"title": "Justified representation in approval-based committee voting", "author": ["H. Aziz", "M. Brill", "V. Conitzer", "E. Elkind", "R. Freeman", "T. Walsh"], "venue": "Proc. of the 29th AAAI Conference", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Computational aspects of multi-winner approval voting", "author": ["H. Aziz", "S. Gaspers", "J. Gudmundsson", "S. Mackenzie", "N. Mattei", "T. Walsh"], "venue": "Proc. of the 14th AAMAS Conference", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "Strategyproof peer selection: Mechanisms, analyses, and experiments", "author": ["H. Aziz", "O. Lev", "N. Mattei", "J.S. Rosenschein", "T. Walsh"], "venue": "Proc. of the 30th AAAI Conference", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2016}, {"title": "Fair allocation of indivisible goods", "author": ["S. Bouveret", "Y. Chevaleyre", "J. Lang"], "venue": "Handbook of Computational Social Choice,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2016}, {"title": "Characterizing conflicts in fair division of indivisible goods using a scale of criteria. Autonomous Agents and Multi-Agent Systems", "author": ["S. Bouveret", "M. Lema\u0131\u0302tre"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2016}, {"title": "eds.): Handbook of Computational Social Choice", "author": ["F. Brandt", "V. Conitzer", "U. Endriss", "J. Lang", "A.D. Procaccia"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2016}, {"title": "The multi-unit assignment problem: Theory and evidence from course allocation at harvard", "author": ["E. Budish", "E. Cantillon"], "venue": "The American Economic Review 102(5),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2012}, {"title": "The Toronto paper matching system: an automated paper-reviewer assignment system", "author": ["L. Charlin", "R.S. Zemel"], "venue": "Proc. of the ICML Workshop on Peer Reviewing and Publishing Models (PEER)", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2013}, {"title": "A framework for optimizing paper matching", "author": ["L. Charlin", "R.S. Zemel", "C. Boutilier"], "venue": "CoRR abs/1202.3706", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2012}, {"title": "Recommender systems for the conference paper assignment problem", "author": ["D. Conry", "Y. Koren", "N. Ramakrishnan"], "venue": "Proc. of the 3rd ACM Conference on Recommender Systems (RecSyS). pp", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2009}, {"title": "Equitable distribution of indivisible objects", "author": ["S. Demko", "T.P. Hill"], "venue": "Mathematical Social Sciences", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1988}, {"title": "Price of fairness in kidney", "author": ["J.P. Dickerson", "A.D. Procaccia", "T. Sandholm"], "venue": "exchange. In: Proc. of the 13th AAMAS Conference. pp", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2014}, {"title": "Owa-based extensions of the Chamberlin-Courant rule", "author": ["E. Elkind", "A. Ismaili"], "venue": "Proc. of the 4th ADT Conference. pp", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2015}, {"title": "Properties of multiwinner voting rules", "author": ["E. Elkind", "Faliszewski", "P. Skowron", "A. Slinko"], "venue": "Proc. of the 13th AAMAS Conference. pp", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2014}, {"title": "Lexicographic orders, utilities and decision rules: A survey", "author": ["P.C. Fishburn"], "venue": "Management science 20(11),", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1974}, {"title": "Assigning papers to referees", "author": ["N. Garg", "T. Kavitha", "A. Kumar", "K. Mehlhorn", "J. Mestre"], "venue": "Algorithmica 58(1),", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2010}, {"title": "Infinite order lorenz dominance for fair multiagent optimization", "author": ["B. Golden", "P. Perny"], "venue": "Proc. of the 9th AAMAS Conference. pp", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2010}, {"title": "Voting with rank dependent scoring rules", "author": ["J. Goldsmith", "J. Lang", "N. Mattei", "P. Perny"], "venue": "Proc. of the 28th AAAI Conference. pp", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2014}, {"title": "The AI onference paper assignment problem", "author": ["J. Goldsmith", "R. Sloan"], "venue": "Proc. of the 22nd AAAI ConferenceWorkshop on Preference Handling for Artificial Intelligence (MPREF)", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2007}, {"title": "Approval balloting for multi-winner elections", "author": ["D.M. Kilgour"], "venue": "Handbook on Approval Voting,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2010}, {"title": "Matching under preferences", "author": ["B. Klaus", "D.F. Manlove", "F. Rossi"], "venue": "Handbook of Computational Social Choice,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2016}, {"title": "On good and fair paper-reviewer assignment", "author": ["C. Long", "R. Wong", "Y. Peng", "L. Ye"], "venue": "Proc. of the 13th IEEE International Conference on Data Mining (ICDM). pp", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2013}, {"title": "Algorithmics of Matching Under Preferences", "author": ["D. Manlove"], "venue": "World Scientific", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2013}, {"title": "Preflib: A library for preferences, http://www.preflib.org", "author": ["N. Mattei", "T. Walsh"], "venue": "Proc. of the 3rd ADT Conference. pp", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2013}, {"title": "Telescope time without tears: a distributed approach to peer review", "author": ["M.R. Merrifield", "D.G. Saari"], "venue": "Astronomy & Geophysics 50(4),", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2009}, {"title": "Computational support for academic peer review: A perspective from artificial intelligence", "author": ["S. Price", "P.A. Flach"], "venue": "CACM 60(3),", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2016}, {"title": "A Theory of Justice", "author": ["J. Rawls"], "venue": null, "citeRegEx": "30", "shortCiteRegEx": "30", "year": 1971}, {"title": "M.A.O.: Two-Sided Matching: A Study in Game- Theoretic Modeling and Analysis", "author": ["A.E. Roth", "Sotomayor"], "venue": null, "citeRegEx": "31", "shortCiteRegEx": "31", "year": 1992}, {"title": "Finding a collective set of items: From proportional multi-representation to group recommendation", "author": ["P. Skowron", "P. Faliszewski", "J. Lang"], "venue": "AIJ 241,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2016}, {"title": "On ordered weighted averaging aggregation operators in multicriteria decisionmaking", "author": ["R. Yager"], "venue": "IEEE Transactions on Systems, Man and Cybernetics 18(1),", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 1988}], "referenceMentions": [{"referenceID": 14, "context": "Algorithms for matching and assignment are used in a variety of application areas including allocating runways to airplanes, residents to hospitals, kidneys to patients [15], students to schools [10], assets to individuals in a divorce, jobs to machines, and tasks to cloud computing nodes [26].", "startOffset": 169, "endOffset": 173}, {"referenceID": 9, "context": "Algorithms for matching and assignment are used in a variety of application areas including allocating runways to airplanes, residents to hospitals, kidneys to patients [15], students to schools [10], assets to individuals in a divorce, jobs to machines, and tasks to cloud computing nodes [26].", "startOffset": 195, "endOffset": 199}, {"referenceID": 25, "context": "Algorithms for matching and assignment are used in a variety of application areas including allocating runways to airplanes, residents to hospitals, kidneys to patients [15], students to schools [10], assets to individuals in a divorce, jobs to machines, and tasks to cloud computing nodes [26].", "startOffset": 290, "endOffset": 294}, {"referenceID": 8, "context": "Understanding the properties of the underlying algorithms is an important aspect to ensuring that all participating agents are happy with their allocations and do not attempt to misrepresent their preferences; a key area of study for computational social choice [9].", "startOffset": 262, "endOffset": 265}, {"referenceID": 28, "context": "sure these processes work for both the proposers and the reviewers is important and methods for improving peer review have been proposed and discussed in AI [29] and broadly across the sciences [28].", "startOffset": 157, "endOffset": 161}, {"referenceID": 27, "context": "sure these processes work for both the proposers and the reviewers is important and methods for improving peer review have been proposed and discussed in AI [29] and broadly across the sciences [28].", "startOffset": 194, "endOffset": 198}, {"referenceID": 28, "context": "There are a number of ways one can improve the quality of peer review [29].", "startOffset": 70, "endOffset": 74}, {"referenceID": 5, "context": "Along this line there has been significant interest recently in strategyproof mechanisms for peer review [6].", "startOffset": 105, "endOffset": 108}, {"referenceID": 10, "context": "The Toronto Paper Matching System [11] is designed to improve the process from this paper-centric model.", "startOffset": 34, "endOffset": 38}, {"referenceID": 21, "context": "Formally, we study the Conference Paper Assignment Problem (CPAP) [22] which is a special of the Multi-Agent Resource Allocation Problem (MARA) [7], and propose a novel assignment, the \u03a3 -OWA assignment.", "startOffset": 66, "endOffset": 70}, {"referenceID": 6, "context": "Formally, we study the Conference Paper Assignment Problem (CPAP) [22] which is a special of the Multi-Agent Resource Allocation Problem (MARA) [7], and propose a novel assignment, the \u03a3 -OWA assignment.", "startOffset": 144, "endOffset": 147}, {"referenceID": 29, "context": "A fundamental tension in assignment settings is the tradeoff between maximizing the social welfare, also know as the utilitarian maximal assignment and the Rawlsian [30] fairness concept of maximizing the utility of the worst off agent, known as the egalitarian maximal assignment.", "startOffset": 165, "endOffset": 169}, {"referenceID": 13, "context": "These two ideas are incompatible optimization objectives and diverge in a computational sense as well: computing the utilitarian assignment for additive utilities can be done in polynomial time, while computing the egalitarian assignment is NP-complete [14].", "startOffset": 253, "endOffset": 257}, {"referenceID": 18, "context": "This, perhaps, could be the reason that implementers of large conference paper assignment software often opt for utilitarian assignments, as is supposedly the case for EasyChair [19].", "startOffset": 178, "endOffset": 182}, {"referenceID": 25, "context": "We do not assume that %i is complete; it is possible that some agents may have conflicts of interest or have no preference for a particular object; this assumption is often called \u201chaving unacceptable objects\u201d in the literature [26].", "startOffset": 228, "endOffset": 232}, {"referenceID": 26, "context": "In many real-world CPAP settings there are a fixed number of equivalence classes into which agents are asked to place the objects [27].", "startOffset": 130, "endOffset": 134}, {"referenceID": 6, "context": "There are two practical constraints that we include in our model, making our model more general than the standard MARA or CPAP problems studied in computer science [7]: upper and lower capacities on both the agents and objects.", "startOffset": 164, "endOffset": 167}, {"referenceID": 9, "context": ", bidding fake currency as in course allocation at Harvard [10].", "startOffset": 59, "endOffset": 63}, {"referenceID": 17, "context": "The lexicographic relation over vectors has a long history in the assignment literature [18].", "startOffset": 88, "endOffset": 92}, {"referenceID": 18, "context": "[19] and for the MARA setting see e.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": ", Bouveret and Lema\u0131\u0302tre [8].", "startOffset": 25, "endOffset": 28}, {"referenceID": 13, "context": "In the discrete MARA and CPAP setting where objects are not divisible, the problem of finding an egalitarian assignment is NP-hard [14] while finding a utilitarian assignment can be done in polynomial time [7].", "startOffset": 131, "endOffset": 135}, {"referenceID": 6, "context": "In the discrete MARA and CPAP setting where objects are not divisible, the problem of finding an egalitarian assignment is NP-hard [14] while finding a utilitarian assignment can be done in polynomial time [7].", "startOffset": 206, "endOffset": 209}, {"referenceID": 30, "context": "One and two sided matching and assignment problems have been studied in economics [31] and computer science [26, 9] for over 40 years.", "startOffset": 82, "endOffset": 86}, {"referenceID": 25, "context": "One and two sided matching and assignment problems have been studied in economics [31] and computer science [26, 9] for over 40 years.", "startOffset": 108, "endOffset": 115}, {"referenceID": 8, "context": "One and two sided matching and assignment problems have been studied in economics [31] and computer science [26, 9] for over 40 years.", "startOffset": 108, "endOffset": 115}, {"referenceID": 14, "context": "many applications including kidneys exchanges [15] and school choice [1].", "startOffset": 46, "endOffset": 50}, {"referenceID": 0, "context": "many applications including kidneys exchanges [15] and school choice [1].", "startOffset": 69, "endOffset": 72}, {"referenceID": 6, "context": "Our problem is often called the multi-agent resource allocation (MARA) problem in computer science [7] The papers to referees formulation of this problem has some additional side constraints common in the economics literature, but not as common in computer science [26].", "startOffset": 99, "endOffset": 102}, {"referenceID": 25, "context": "Our problem is often called the multi-agent resource allocation (MARA) problem in computer science [7] The papers to referees formulation of this problem has some additional side constraints common in the economics literature, but not as common in computer science [26].", "startOffset": 265, "endOffset": 269}, {"referenceID": 23, "context": "In the economics literature the Workers-Firms problem is the most closely related analogue to our problem, modeling many-many matchings with capacities [24].", "startOffset": 152, "endOffset": 156}, {"referenceID": 21, "context": "The conference paper assignment has been studied a number of times over the years in computer science [22], as has defining and refining notions of fairness for the assignment vectors in multi-agent allocation problems [20].", "startOffset": 102, "endOffset": 106}, {"referenceID": 19, "context": "The conference paper assignment has been studied a number of times over the years in computer science [22], as has defining and refining notions of fairness for the assignment vectors in multi-agent allocation problems [20].", "startOffset": 219, "endOffset": 223}, {"referenceID": 18, "context": "[19], who extensively study the notion of fair paper assignments, including leximin and rank-maximal assignments, within the context of conference paper assignment.", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "[19] show that for the setting we study, finding an egalitarian optimal assignment and finding a leximin optimal assignment are both NP-hard when there are three or more equivalence classes; and polynomial time computable when there are only two.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": ", each reviewer must review \u2264 x papers and each paper must receive exactly y reviews, then the resulting version of capacitated assignment is NP-hard [25].", "startOffset": 150, "endOffset": 154}, {"referenceID": 2, "context": "[3]; they encode the CPAP problem in ASP and show that finding a solution that roughly correspond to the leximin optimal and egalitarian solutions can be done in reasonable time for large settings (\u2248 100 agents).", "startOffset": 0, "endOffset": 3}, {"referenceID": 12, "context": "CPAP also receives considerable attention in the recommender systems [13] and machine learning [12] communities.", "startOffset": 69, "endOffset": 73}, {"referenceID": 11, "context": "CPAP also receives considerable attention in the recommender systems [13] and machine learning [12] communities.", "startOffset": 95, "endOffset": 99}, {"referenceID": 10, "context": "A prime example of this is the Toronto Paper Matching System designed by Charlin and Zemel [11].", "startOffset": 91, "endOffset": 95}, {"referenceID": 32, "context": "We make use of Order weighted averages (OWAs), often employed in multi-criteria decision making [33].", "startOffset": 96, "endOffset": 100}, {"referenceID": 20, "context": "OWAs have recently received attention in computational social choice for voting and ranking [21], finding a collective set of items for a group [32], and multi-winner voting with proportional representation [17, 16].", "startOffset": 92, "endOffset": 96}, {"referenceID": 31, "context": "OWAs have recently received attention in computational social choice for voting and ranking [21], finding a collective set of items for a group [32], and multi-winner voting with proportional representation [17, 16].", "startOffset": 144, "endOffset": 148}, {"referenceID": 16, "context": "OWAs have recently received attention in computational social choice for voting and ranking [21], finding a collective set of items for a group [32], and multi-winner voting with proportional representation [17, 16].", "startOffset": 207, "endOffset": 215}, {"referenceID": 15, "context": "OWAs have recently received attention in computational social choice for voting and ranking [21], finding a collective set of items for a group [32], and multi-winner voting with proportional representation [17, 16].", "startOffset": 207, "endOffset": 215}, {"referenceID": 22, "context": "Our inspiration for applying OWAs comes from a multi-winner voting rule known as Proportional Approval Voting (PAV) [23, 5, 4].", "startOffset": 116, "endOffset": 126}, {"referenceID": 4, "context": "Our inspiration for applying OWAs comes from a multi-winner voting rule known as Proportional Approval Voting (PAV) [23, 5, 4].", "startOffset": 116, "endOffset": 126}, {"referenceID": 3, "context": "Our inspiration for applying OWAs comes from a multi-winner voting rule known as Proportional Approval Voting (PAV) [23, 5, 4].", "startOffset": 116, "endOffset": 126}, {"referenceID": 4, "context": "[5] and it intuitively does not seem fair; once a candidate that you like has been selected to the winning set your next candidate selected to the winning set should seemingly count less.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "Hence in PAV, which is designed to be more fair [4], a voter\u2019s first approval counts for a full point, the second for 1/2, the next for 1/3, and on as a harmonically decreasing sequence.", "startOffset": 48, "endOffset": 51}, {"referenceID": 18, "context": "[19].", "startOffset": 0, "endOffset": 4}, {"referenceID": 32, "context": "Indeed, this formulation of the problem has been considered before and proposed in the earliest writings on OWAs for decision making [33].", "startOffset": 133, "endOffset": 137}, {"referenceID": 13, "context": "However, because the OWA-\u03a3 formulation is a generalization of the egalitarian assignment, it becomes NP-hard in general [14].", "startOffset": 120, "endOffset": 124}, {"referenceID": 9, "context": "This ability may be especially useful when agents are free to report their (normalized) utilities for ranks via bidding or other mechanisms [10].", "startOffset": 140, "endOffset": 144}, {"referenceID": 1, "context": "In addition to being polynomial time solvable, we know that the flow is integral as long as all edge capacities are integral, even if we have real valued costs [2].", "startOffset": 160, "endOffset": 163}, {"referenceID": 0, "context": "Note that all costs on edges are 0 and all capacities are [0,1] unless", "startOffset": 58, "endOffset": 63}, {"referenceID": 26, "context": "ORG [27].", "startOffset": 4, "endOffset": 8}, {"referenceID": 31, "context": "[32] and the MARA MIP by Bouveret et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": "[7].", "startOffset": 0, "endOffset": 3}], "year": 2017, "abstractText": "Motivated by the common academic problem of allocating papers to referees for conference reviewing we propose a novel mechanism for solving the assignment problem when we have a two sided matching problem with preferences from one side (the agents/reviewers) over the other side (the objects/papers) and both sides have capacity constraints. The assignment problem is a fundamental problem in both computer science and economics with application in many areas including task and resource allocation. We draw inspiration from multicriteria decision making and voting and use order weighted averages (OWAs) to propose a novel and flexible class of algorithms for the assignment problem. We show an algorithm for finding an \u03a3 -OWA assignment in polynomial time, in contrast to the NP-hardness of finding an egalitarian assignment. Inspired by this setting we observe an interesting connection between our model and the classic proportional multi-winner election problem in social choice.", "creator": "LaTeX with hyperref package"}}}