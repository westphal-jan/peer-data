{"id": "1705.07112", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-May-2017", "title": "Fast Singular Value Shrinkage with Chebyshev Polynomial Approximation Based on Signal Sparsity", "abstract": "decoction We 12.36 propose an enmities approximation obstinately method for backstop thresholding reichsgau of petroleum singular sandaza values using Chebyshev polynomial hi\u1ec1n approximation (CPA ). Many signal processing problems require oscilloscope iterative sleepin application b5000 of sklyarov singular value janardhan decomposition (citgo SVD) for stooshe minimizing riesco the rank decongestion of \u00eele-de-france a given data stelios matrix testut with sc\u00e9nic other circumnavigating cost functions laran and / lahidji or constraints, simberloff which is avro called restructing matrix rank 69.81 minimization. ideologue In matrix rank minimization, singular values delamination of a matrix are educationalists shrunk 7nb by gawkers hard - thresholding, randol soft - thresholding, or http://mars.jpl.nasa.gov weighted pateras soft - thresholding. recon However, lubomirski the computational cost 48-seat of SVD clinchers is larijan generally tilling too expensive d'ascq to handle typefaces high 94.80 dimensional deoria signals such as images; naegele hence, in 50-story this case, non-agricultural matrix rank jousted minimization requires onderdonk enormous computation time. abandonware In dx7 this paper, tarek we leverage CPA vsz to (approximately) news-record manipulate jeanmarie singular values without brimbank computing singular values and diatta vectors. skywatch The 93.22 thresholding frontline of debica singular values yeoman is masterminding expressed rocksprings by a multiplication yagy\u016b of ramis certain matrices, gunton which delice is ayadi derived from ecureuil a leaseholders characteristic 62.65 of 1-for-11 CPA. The multiplication ashun is tabley also wung efficiently planchon computed using monifa the plastiques sparsity d32 of signals. collating As gurfinkel a result, cagli the selden computational cost disuse is pretorious significantly reduced. Experimental montgomeries results irna suggest the adrienne effectiveness of available our eyesores method neptali through several image unreservedly processing applications zeljeznicar based papoulias on l\u00fcchow matrix curovic rank akbarpur minimization 0735 with truism nuclear norm udvar relaxation in commanding-in-chief terms of eulogius computation time germann and approximation ringoes precision.", "histories": [["v1", "Fri, 19 May 2017 17:55:58 GMT  (3735kb,D)", "http://arxiv.org/abs/1705.07112v1", "This is a journal paper"]], "COMMENTS": "This is a journal paper", "reviews": [], "SUBJECTS": "cs.NA cs.LG", "authors": ["masaki onuki", "shunsuke ono", "keiichiro shirai", "yuichi tanaka"], "accepted": false, "id": "1705.07112"}, "pdf": {"name": "1705.07112.pdf", "metadata": {"source": "CRF", "title": "Fast Singular Value Shrinkage with Chebyshev Polynomial Approximation Based on Signal Sparsity", "authors": ["Masaki Onuki", "Shunsuke Ono", "Keiichiro Shirai", "Yuichi Tanaka"], "emails": ["masaki.o@msp-lab.org;", "ytnk@cc.tuat.ac.jp).", "ono@isl.titech.ac.jp).", "(keiichi@shinshu-u.ac.jp)."], "sections": [{"heading": null, "text": "We propose an approximation method for thresholding of singular values using Chebyshev polynomial approximation (CPA). Many signal processing problems require iterative application of singular value decomposition (SVD) for minimizing the rank of a given data matrix with other cost functions and/or constraints, which is called matrix rank minimization. In matrix rank minimization, singular values of a matrix are shrunk by hard-thresholding, softthresholding, or weighted soft-thresholding. However, the computational cost of SVD is generally too expensive to handle high dimensional signals such as images; hence, in this case, matrix rank minimization requires enormous computation time. In this paper, we leverage CPA to (approximately) manipulate singular values without computing singular values and vectors. The thresholding of singular values is expressed by a multiplication of certain matrices, which is derived from a characteristic of CPA. The multiplication is also efficiently computed using the sparsity of signals. As a result, the computational cost is significantly reduced. Experimental results suggest the effectiveness of our method through several image processing applications based on matrix rank minimization with nuclear norm relaxation in terms of computation time and approximation precision.\nIndex Terms\nChebyshev polynomial approximation, nuclear norm relaxation, singular value thresholding\nI. INTRODUCTION\nThe low-rank structure inherent in various signals has been widely exploited in many signal processing applications, such as matrix and tensor completion [1]\u2013[4], image decomposition [5], [6], photometric stereo [7], [8], image\nM. Onuki and Y. Tanaka are with the Grad. School of BASE, Tokyo Univ. of Agri. and Tech., Koganei, Tokyo, 184-8588 Japan (e-mail:\nmasaki.o@msp-lab.org; ytnk@cc.tuat.ac.jp).\nS. Ono is with the Lab. for Future Interdisciplinary Res. of Sci. and Tech. (FIRST), Tokyo Inst. of Tech., Midori, Kanagawa, 226-8503 Japan\n(e-mail: ono@isl.titech.ac.jp).\nK. Shirai is with the Dept. of Elec. and Compt. Eng., Shinshu Univ., Wakasato, Nagano, 380-8553 Japan (keiichi@shinshu-u.ac.jp). Manuscript received ; revised.\nMay 22, 2017 DRAFT\nar X\niv :1\n70 5.\n07 11\n2v 1\n[ cs\n.N A\n] 1\n9 M\nalignment [9], [10], colorization [11], inpainting [12], [13], background modeling [14]\u2013[18], color artifact removal [19], cognitive radio [20], and voice separation [21]. In such applications, the low-rank structure is incorporated into a minimization problem involving the rank function or its continuous relaxation. The problem is solved using some iterative algorithms, with which the thresholding of singular values is usually required at each iteration. We refer to this methodology as matrix rank minimization.\nThere are two representative approaches of matrix rank minimization. One is the exact method. It is an ideal formulation, but the resulting problem is very difficult to solve due to the non-convexity and combinatorial nature of the rank function. The other is the nuclear norm relaxation [22]. Since the nuclear norm, the sum of the singular values of a matrix, is the tightest convex relaxation of the rank function, we can efficiently solve the resulting problem via convex optimization techniques. Weighted nuclear norm relaxation [23], [24] has recently been proposed as a non-convex but continuous approximation of the rank function.\nEssentially, both of the above methods require the thresholding of singular values, which we call singular value shrinkage, at each iteration of certain optimization methods (Fig. 1). That is, most methods for matrix rank minimization must carry out singular value decomposition (SVD) many times. This is a serious problem in terms of computational cost when we handle large matrices, even with high-spec computers.\nSeveral methods have been proposed to tackle this issue [25]\u2013[27]. The basic concept of [25], [26] is to approximately compute partial singular values and/or vectors. These methods can drastically reduce the computation time of singular value shrinkage but would not be suitable for the matrix rank minimization. Since the number of singular values above a threshold is not identified without the full decomposition, many singular values above a threshold are reduced to zero in each iteration. As a result, large approximation errors are produced, which results in an unstable convergence in the matrix rank minimization. With the other method [27], singular value shrinkage is carried out by computing neither singular values nor vectors, but the reduction in the computation time is still\nMay 22, 2017 DRAFT\n3 limited. This is because the method requires a complete orthogonal decomposition [28] and the calculation of the inverse of a large matrix. It also leads to large approximation errors, i.e., an unstable convergence in the matrix rank minimization. We consider a method similar to that by Cai and Osher [27]: We only need a \u201cprocessed\u201d matrix with thresholded singular values.\nIn this paper, we propose a fast singular value shrinkage method for reducing the computational cost in the matrix rank minimization of high dimensional matrices. Note that the proposed method computes neither singular values nor vectors during the process of singular value shrinkage, similar to the method by Cai and Osher [27]. Furthermore, our method maintains computational precision to lead matrix rank minimization algorithms to stable convergence. The two key tools of our method are described as follows.\n\u2022 Chebyshev polynomial approximation (CPA) [29]\u2013[31]: This tool is often used for designing filters in signal\nprocessing [32], [33] and is a key tool for reducing computational cost. The applications of CPA have been studied by Saad et al. [34]\u2013[37]. With the applications by Saad et al., CPA is used to calculate a vector after being transformed by a matrix with singular value shrinkage. That is, it requires the iterative multiplications of a matrix and vector to derive the Chebyshev polynomials. The concept of the applications has recently been used for improving the performance of image filtering methods such as bilateral filter, non-local means, and BM3D [38]\u2013[40]. In contrast, we propose a method to obtain a matrix whose singular values are processed by using CPA. Since CPA results in truncation errors, such as ripples in the lower-order approximations, we also investigate the designs of thresholding functions and appropriate approximation order for reducing approximation errors. \u2022 Sparsity of signals: By using CPA, our method can represent singular value shrinkage as a multiplication\nof matrices. Since the multiplication can be computed efficiently when the matrices are sparse, our method exploits the inherent sparsity of signals in their frequency domain for further acceleration.\nSince matrix rank minimization plays a central role in various signal processing tasks, our method offers many promising applications. For this study, we validated the proposed method by using two image processing applications: image inpainting [12] and background modeling [14]\u2013[18]. In these applications, target problems are formulated as convex optimization problems involving the nuclear norm so that they can be efficiently solved using the alternating direction method of multiplier (ADMM) [41] with our method.\nAlthough the ADMM is widely known as a robust method for computation errors in each iteration, optimization methods (including the ADMM) with the other fast singular value shrinkage methods [25]\u2013[27] do not converge well due to their large approximation errors. In contrast, our CPA-based singular value shrinkage method leads optimization methods to stable convergence. We validated this advantage experimentally by comparing our method with the other fast singular value shrinkage methods in several image processing tasks and a synthetic data.\nThe preliminary version of this study, without using signal sparsity, analysis of our method, and new applications,\nhas previously been published [42].\nThis paper is organized as follows. Section II defines notations and preliminaries. We discuss our CPA-based singular value shrinkage method, which is the main contribution in this paper, in Section III. We discuss an\nMay 22, 2017 DRAFT\n4 approximation order of CPA for reducing the size of approximation errors in Section IV and verification of our method through applications in Section V. Finally, we conclude the paper in Section VI.\nII. NOTATIONS AND PRELIMINARIES"}, {"heading": "A. Notations", "text": "Bold-face capital and small letters indicate a matrix and a vector, respectively. Superscript \u00b7> is the transpose of a matrix and a vector, and superscript \u00b7\u22121 is the inverse of a non-singular matrix. The matrices Id and O are the identity matrix and null matrix, respectively. The vector 1n := [1, . . . , 1\ufe38 \ufe37\ufe37 \ufe38 n ]>. The `p norm for p \u2265 1 is defined as\n\u2016x\u2016p :=( \u2211n i=1 |xi|p) 1 p (\u2200x\u2208Rn). We also use CPA as follows."}, {"heading": "B. Chebyshev Polynomial Approximation", "text": "Let h(x) and h\u0302(x) be a real-valued function defined on the interval x\u2208 [\u22121, 1] and its approximated function by using CPA, respectively. Chebyshev polynomial approximation [29]\u2013[31] gives an approximate solution of h(x) by using the truncated Chebyshev series:\nh\u0302(x) := 1\n2 c0 + \u03b1\u22121\u2211 k=1 ck \u03c8k(x), (1)\nwhere ck and \u03b1 denote a Chebyshev coefficient (described later) and an approximation order, respectively. Additionally, \u03c8k(\u00b7) denotes the k-th order Chebyshev polynomials of the first kind, defined as\n\u03c8k(x) := cos ( k arccos(x) ) . (2)\nIt can also be computed using the stable recurrence relation:\n\u03c8k(x) = 2x\u03c8k\u22121(x)\u2212 \u03c8k\u22122(x), \u03c80(x) = 1, \u03c81(x) = x. (3)\nThe initial condition is defined as \u03c80(x) and \u03c81(x). Since the polynomials consist of cosine functions, the value of \u03c8k(x) is bounded between \u22121 and 1 for x\u2208 [\u22121, 1]. By using \u03c8k(x) and the orthogonality of the cosine function, ck is calculated as\nck := 2\n\u03b1 \u03b1\u2211 l=1 cos(k\u03b8(l))h(cos \u03b8(l)), (4)\nwhere \u03b8(l) := \u03c0(l \u2212 12 )\n\u03b1 ."}, {"heading": "III. SINGULAR VALUE SHRINKAGE USING CHEBYSHEV POLYNOMIAL APPROXIMATION BY EXPLOITING", "text": "SPARSITY\nWe discuss singular value shrinkage using CPA. First, the CPA of a matrix form, which can approximately shrink\nthe eigenvalues of a matrix (eigenvalue shrinkage), is indicated then extended to the singular one.\nMay 22, 2017 DRAFT\n5"}, {"heading": "A. Chebyshev Polynomial Approximation for Matrix", "text": "Let A \u2208 Rn\u00d7n be a full rank matrix and A = P\u039bAP\u22121 be its eigendecomposition (EVD), where P \u2208 Rn\u00d7n\nis the matrix composed of eigenvectors and \u039bA = diag(\u03bbA1 , . . . , \u03bb A i , . . . , \u03bb A n ) is the diagonal matrix with the corresponding eigenvalues. We assume that the eigenvalues are bounded between 0 and \u03bbAmax, where \u03bb A max > 1. Hence, the eigenvalues of A are shrunk as\nH(A) := P diag ( h(\u03bbA1 ), . . . , h(\u03bb A n ) ) P\u22121, (5)\nwhere H(\u00b7) is the eigenvalue shrinkage function, and h(x) is the filter kernel defined in x \u2208 [0, \u03bbAmax]. In this subsection, we consider the approximated solution of (5) using the CPA.\nThe CPA of the matrix form [30], [34], [36], [37] gives an approximated solution of the eigenvalue shrinkage\nfunction H(\u00b7) by using truncated Chebyshev series as\nH\u0302(A) := 1 2 c\u03020 Id + \u03b1\u22121\u2211 k=1 c\u0302k\u03a8k(A\u0302), (6)\nwhere c\u0302k and \u03a8k(A\u0302) are Chebyshev coefficients and Chebyshev polynomials, respectively, which are defined later. Additionally, A\u0302 is the eigenvalue-shifted matrix given by\nA\u0302 := 2\n\u03bbAmax A\u2212 Id, (7)\nwhose eigenvalues are obviously within [\u22121, 1]. Thanks to (7), the k-th order Chebyshev polynomial of A\u0302 is computed as\n\u03a8k(A\u0302) = \u03a8k\n( 2\n\u03bbAmax A\u2212 Id ) = P\u03a8k ( 2\n\u03bbAmax \u039bA \u2212 Id\n) P\u22121\n= P diag(cos k\u03b81, . . . , cos k\u03b8n)P \u22121, (8)\nwhere \u03b8i := arccos (\n2 \u03bbAmax\n\u03bbAi \u2212 1 ) . Similarly to (3), the Chebyshev polynomials are obtained using the recurrence\nrelation:\n\u03a8k(A\u0302) = 2A\u0302\u03a8k\u22121(A\u0302)\u2212\u03a8k\u22122(A\u0302), \u03a80(A\u0302) = Id, \u03a81(A\u0302) = A\u0302. (9)\nRecall that \u03a8k(A\u0302) is defined only in the interval [\u22121, 1]. Therefore, the range of the filter kernel is modified by deriving c\u0302k as\nc\u0302k = 2\n\u03b1 \u03b1\u2211 l=1 cos(k\u03b8(l))h (\u03bbAmax 2 (cos \u03b8(l) + 1) ) . (10)\nThe term h ( \u03bbAmax/2 (cos \u03b8(l) + 1) ) returns the shifted range back to the original range [0, \u03bbAmax]. From (10), H\u0302(A) can also be represented using h\u0302(\u03bbAi ) as\nH\u0302(A) = P diag ( h\u0302(\u03bbA1 ), . . . , h\u0302(\u03bb A n ) ) P\u22121. (11)\nMay 22, 2017 DRAFT\n6 The function H\u0302(\u00b7), which is referred to as the CPA-based eigenvalue shrinkage function, results in approximate eigenvalue shrinkage. The CPA-based eigenvalue shrinkage actually computes neither eigenvalues nor vectors thanks to the recurrence relation (9)."}, {"heading": "B. CPA-based Singular Value Shrinkage", "text": "Let B \u2208Rm\u00d7n (m>n) be a rectangular matrix and B = U\u03a3V> be its singular value decomposition, where\nU\u2208Rm\u00d7m and V\u2208Rn\u00d7n are orthogonal matrices. The \u03a3\u2208Rm\u00d7n is the singular value matrix represented as\n\u03a3 =  \u03c31 O . . . \u03c3n\nO\n . (12)\nWithout loss of generality, we can assume \u03c31 \u2265 . . . \u2265 \u03c3n. The singular values of B are shrunk with the singular value shrinkage function G(\u00b7) as\nG(B) := U  g(\u03c31) O . . . g(\u03c3n)\nO\nV >, (13)\nwhere g(\u00b7) is an arbitrary function.\nThe eigenvalue shrinkage in (5) can be extended to G(B) in (13) as [35]\nG(B) = BH(B>B), (14)\nwhere h(x) :=g( \u221a x)/ \u221a x in H(\u00b7) in (5). Equation (14) is derived as follows. First, (13) can be expanded as\nG(B) = U\u03a3 diag ( g(\u03c31)\n\u03c31 , . . . ,\ng(\u03c3n)\n\u03c3n\n) V>\n= U\u03a3V>V diag\n( g(\u03c31)\n\u03c31 , . . . ,\ng(\u03c3n)\n\u03c3n\n) V>\n= BV diag\n( g(\u03c31)\n\u03c31 , . . . ,\ng(\u03c3n)\n\u03c3n\n) V>.\n(15)\nWhen the eigenvalue matrix of B>B is defined as \u039bB>B =diag(\u03bbB >B 1 , . . . , \u03bb B>B n ), it is obviously represented using the singular values of B as \u03bbB >B i =\u03c3 2 i . Consequently, (15) is equally calculated using H(\u00b7) in (5) as\nG(B) = BV diag ( g(\u03c31)\n\u03c31 , . . . ,\ng(\u03c3n)\n\u03c3n\n) V>\n= BV diag ( h(\u03c321), . . . , h(\u03c3 2 n) ) V> = BH(B>B).\n(16)\nNote that [35] aims to calculate a vector represented as\nx\u0302 = BH(B>B)x, (17)\nMay 22, 2017 DRAFT\n7 where x \u2208 Rn and x\u0302 \u2208 Rm are the input and output vectors, respectively. The CPA is applied to H(B>B)x to quickly derive x\u0302 in [35]. In contrast, our method is focused on deriving the matrix in (16) itself. When the matrix, whose singular values are shrunk using CPA, is represented as BH(B>B), the explicit SVD of B can be avoided. However, deriving the matrix, not the vectors, usually requires enormous computation time because of multiplication of dense matrices. To accelerate the calculation, the sparseness of a matrix is exploited with our method, as indicated below.\nAssume that B is a matrix composed of an inherently sparse signal. Let T\u2208Rn\u00d7n be an arbitrary orthogonal matrix that efficiently sparsifies B, e.g., T is considered as the discrete Fourier transform [43], discrete cosine transform (DCT) [44], and discrete wavelet transform (DWT) [45]. Note that the matrix T is the forward transform, i.e., when let y \u2208 Rn be a column vector, the forward transform is represented as Ty. From the above, (14) is further rewritten with T as\nG(B) = BT>H(TB>BT>)T = BT>H(\u03a6)T, (18)\nwhere \u03a6 := TB>BT> for simplicity. With the CPA-based eigenvalue shrinkage function H\u0302(\u00b7) in (6) and (11), H(\u03a6) in (18) is efficiently approximated as\nH\u0302(\u03a6) = TV diag ( h\u0302(\u03c321), . . . , h\u0302(\u03c3 2 n) ) V>T>. (19)\nThe form of (19) enables us to use the sparsity of a signal in its frequency domain.\nFor further enhancing the sparsity of \u03a6, its components are thresholded as\n\u03a6ij = \u03a6ij if |\u03a6ij | \u2265 \u03b5,0 otherwise, (20) where \u03a6ij and \u03a6ij are the i-th row and j-th column of \u03a6 and its truncated coefficient, and \u03b5\u2208R is an arbitrary small value. We show that this truncation has little effect on the performance of our method and provides recommended settings of \u03b5 in Section V. As a result, the CPA-based eigenvalue shrinkage of H\u0302(\u03a6) is approximately given by\nH\u0302(\u03a6) \u2248 H\u0302 (\u03a6) . (21)\nIn summary, the singular value shrinkage of B is approximately represented as\nG(B) = U  g(\u03c31) O . . . g(\u03c3n)\nO\nV >\n= BH(B>B)\n= BT>H(\u03a6)T\n\u2248 BT>H\u0302(\u03a6)T\n\u2248 BT>H\u0302 (\u03a6) T = G\u0302(B), (22)\nMay 22, 2017 DRAFT\n8 Algorithm 1 CPA-based singular value shrinkage Input: B Output: G\u0302(B)\n1: \u03a6\u2190 TB>BT>. 2: Derive \u03a6 from \u03a6 by using an arbitrary \u03b5 in (20). 3: Compute the maximum eigenvalue \u039bmax of \u03a6.\n4: c\u0302k \u2190 2\u03b1 \u2211\u03b1 l=1 cos(k\u03b8(l))h ( \u039bmax 2 (cos \u03b8(l) + 1) ) ,\nwhere h(x) :=g( \u221a x)/ \u221a x.\n5: B\u0302\u2190 2\u039bmax \u03a6\u2212 Id. 6: \u03a80(B\u0302)\u2190 Id, \u03a81(B\u0302)\u2190 B\u0302. 7: H\u0302 (\u03a6)\u2190 12 c\u03020\u03a80(B\u0302) + c\u03021\u03a81(B\u0302). 8: for k = 2 to \u03b1\u2212 1 do 9: \u03a8k(B\u0302)\u2190 2B\u0302\u03a8k\u22121(B\u0302)\u2212\u03a8k\u22122(B\u0302).\n10: H\u0302 (\u03a6)\u2190 H\u0302 (\u03a6) + c\u0302k\u03a8k(B\u0302). 11: end for 12: G\u0302(B)\u2190 BT>H\u0302 (\u03a6) T.\nwhere the function G\u0302(\u00b7) is the CPA-based singular value shrinkage function. It can be calculated with the recurrence relation as\n\u03a8k(B\u0302) = 2B\u0302\u03a8k\u22121(B\u0302)\u2212\u03a8k\u22122(B\u0302), \u03a80(B\u0302) = Id, \u03a81(B\u0302) = B\u0302, (23)\nwhere\nB\u0302 := 2\n\u039bmax \u03a6\u2212 Id, (24)\nin which \u039bmax =\u03bb \u03a6 max is the maximum eigenvalue of \u03a6. The pseudocode of the CPA-based singular value shrinkage is indicated in Algorithm 1."}, {"heading": "C. Computational Complexity of CPA-based Singular Value Shrinkage", "text": "We now discuss the computational complexity of our method. Assume that matrices B\u0302 \u2208 Rn\u00d7n and \u03a8k(B\u0302) \u2208 Rn\u00d7n have M and Mk nonzero elements, respectively. The maximum number of multiplications of nonzero elements required to calculate B\u0302\u03a8k(B\u0302) is represented as MMk in the case of a sparse matrix. The computational complexity\nof line 9 in Algorithm 1 can be represented as O( \u2211\u03b1\u22122 k=1 MMk) due to the multiplication B\u0302\u03a8k\u22121(B\u0302). At line 10 in\nAlgorithm 1, the computation takes O( \u2211\u03b1\u22121 k=2 Mk) from the multiplication ck\u03a8k(B\u0302). That is, the total computational complexity is represented as O((M+1) maxk{Mk}), where maxk{Mk} represents the maximum value among Mk. From the above, when maxk{Mk} becomes small, the computational cost is also reduced. For low computational\nMay 22, 2017 DRAFT\ncomplexity, the matrix should be constructed so as not to increase the number of its nonzero elements as much as possible in the multiplication of matrices."}, {"heading": "IV. SHRINKAGE FUNCTIONS AND APPROXIMATION ORDER", "text": "In this section, we discuss suitable approximation orders for shrinkage functions approximated by CPA, which has small truncation errors. Additionally, we argue that CPA is a reasonable choice for our method among a variety of polynomial approximation methods.\nAs an introduction, we consider the shrinkage function shown in Fig. 2(a). Let hhard(x) be the hard shrinkage\nresponse defined as\nhhard(x) := 1 if x > \u03c4hard,0 otherwise, (25) where \u03c4hard is an arbitrary real value and x \u2208 [0, 1]. Chebyshev polynomial approximation gives an approximate response of hhard(x) in (1). As in Fig. 2(b), the approximated response h\u0302hard(x) has ripples, which is widely known in digital filter design [32], [46]\u2013[49]. Therefore, studying the design of appropriate shrinkage responses and approximation orders is an important topic, even for our method."}, {"heading": "A. Approximation Order", "text": "Possible shrinkage responses handled with our method can be expressed as the following generic form:\nh ( x; w(x)\n\u03c1 , \u03c4\n) :=  \u221a x\u2212 w(x)\u03c1\u221a x if \u221a x > \u03c4,\n0 otherwise,\n(26)\nMay 22, 2017 DRAFT\n10\nwhere w(x) is a weight function, and \u03c4 and \u03c1 are arbitrary thresholding values. The choices of w(x) and \u03c4 determine the characteristics of (26) as follows:\n\u2022 h (x; 0, \u03c4hard) : Hard-shrinkage.\n\u2022 h ( x; w(x)\n\u03c1 , w(x) \u03c1\n) : Weighted soft-shrinkage.\n\u2022 h ( x; 1\n\u03c1 ,\n1 \u03c1\n) : Soft-shrinkage1.\nNote that we defined g( \u221a x) = \u221a xh(x) in (14), where h(x) is an arbitrary shrinkage function for the eigenvalues of B>B. As a result, g(x) becomes the hard-shrinkage, weighted soft-shrinkage, or soft-shrinkage functions when\n1Soft-shrinkage is widely known as g(x) :=max(x\u22121/\u03c1, 0) in which max(x1, x2) is an operator choosing the greater one out of x1 and x2. However, we call h(x; 1/\u03c1, 1/\u03c1) soft-shrinkage because it is finally transformed into g(x) :=max(x\u22121/\u03c1, 0) in (22).\nMay 22, 2017 DRAFT\n11\nh(x) is set as above.\nThese choices among the shrinkages are shown in Fig. 3. It is clear that hard-shrinkage has a sharp transition band (see Fig. 3(a)); therefore, CPA, which is computed as a linear combination of cosine functions, may not approximate it well. In contrast, one can expect that a response that has a smooth transition band is suitable for CPA. To verify this numerically, the approximated responses were compared among hard-shrinkage, weighted soft-shrinkage, and soft-shrinkage. In this experiment, \u03c1=0.002 was used. For weighted soft-shrinkage, w(x)=0.5 and 1.5 were used. Additionally, the thresholding value for hard-shrinkage was set to \u03c4hard =500.\nFigure 3 also shows the approximated shrinkage responses of (26) for various shrinkage conditions. Hardshrinkage yields larger errors than soft ones. Empirically, hard-shrinkage requires more than the 50th-oder approximation. In contrast, soft-shrinkages only require 10\u201320th-order approximations. To be more specific, \u03b1= 20 is recommended for a small weight shown in Fig. 3(b), whereas \u03b1= 10 for the soft-shrinkage response shown in Fig. 3(d)."}, {"heading": "B. Suitability of CPA", "text": "There are many polynomial approximations. Even among them, minimax polynomial approximation [46], [47], [50]\u2013[52] and least squares approximation [53] are well known as the best approximation in the sense of the minimization of the infinity norm and the least squares error w.r.t the difference between an exact and approximated responses, respectively. To derive polynomial coefficients, their optimization requires a minimization of `p norm\nMay 22, 2017 DRAFT\n12\nrepresented as\nmin h\u2032(x)\u2208R\n\u2016h(x)\u2212 h\u2032(x)\u2016p, (27)\nwhere h\u2032(x) is an approximated shrinkage response with the above two polynomial approximations. Clearly, (27) requires the exact response h(x) for x\u2208R. When h(x) is precisely represented using many sampling points, h\u2032(x) exhibits good performance. However, computational complexity becomes high when many sampling points are used, especially in the case of least squares approximation. Let c\u03b1 := [c0, c1, . . . , c\u03b1\u22121]> be the column vector of coefficients for the polynomial approximation. That is, the approximated shrinkage response can be calculated as h\u2032(x) = c0 + c1x + c2x 2 + . . . + c\u03b1\u22121x \u03b1\u22121. Additionally, let x := [x1, . . . , xn]> and h := [h(x1), . . . , h(xn)]> be the column vectors composed of real values, respectively. The Vandermonde matrix \u03a5\u2208Rn\u00d7\u03b1 is defined as\n\u03a5 :=  1 x21 \u00b7 \u00b7 \u00b7 x\u03b1\u221211 1 x22 \u00b7 \u00b7 \u00b7 x\u03b1\u221212 ... ... . . . ...\n1 x2n \u00b7 \u00b7 \u00b7 x\u03b1\u22121n\n . (28)\nFrom the above definitions, coefficients of the least squares approximation are calculated as c\u03b1=\u03a5+h, where \u00b7+ is the pseudo inverse of a matrix. The calculation requires high computational cost when n and/or \u03b1 are large. In contrast, CPA only requires the inner product of [h(cos \u03b81), . . . , h(cos \u03b8\u03b1)]> and [cos k\u03b81, . . . , cos k\u03b8\u03b1]> to derive coefficients of polynomials from (4), where \u03b8i\u2208 [0, \u03c0]. Additionally, CPA performs better approximation than other optimization methods. To verify the exellent approximation, CPA was compared with minimax approximation and least squares approximation, as shown in Fig. 4. As can be seen, CPA and least squares approximations have a similar oscillation pattern. Chebyshev polynomial approximation sufficiently attenuates ripples, compared with the other methods in the stopband, as shown in the differences of Fig. 4."}, {"heading": "V. APPLICATIONS", "text": "We compared our CPA-based singular value shrinkage method with the exact and approximate singular value shrinkage methods. Specifically, we applied our method to two applications using nuclear norm relaxation, i.e., inpainting of texture images and background subtraction of videos. Additionally, we compared our CPA-based method with the existing methods, i.e., the exact partial singular value decomposition (PSVD) based method and fast singular value shrinkage methods [25]\u2013[27], in Section V-F. The computation time and approximation precision were indicated for the comparisons."}, {"heading": "A. Experimental Conditions", "text": "The applications were implemented with MATLAB R2015b and run on a 3.2-GHz Intel Xeon E5-2667 processor with 512-GB RAM. We compared our method with the SVD-based naive method (denoted as SVD-based method) in (13) and EVD-based methods in (15) with respect to approximation precision and computation time. Both SVD\nMay 22, 2017 DRAFT\n13\nand EVD-based methods are exact singular value soft-shrinkage methods. The EVD-based method2 is usually faster than the SVD-based method and is widely used in many applications. Therefore, the computation time of only the EVD-based method is indicated for the results of the exact methods. With the SVD-based method, the SVD of an arbitrary matrix X\u2208Rm\u00d7n is first performed, then the obtained singular values are shrunk as max(\u03c3i(X)\u22121/\u03c1, 0), where \u03c3i(X) indicates the i-th largest singular value of X. The EVD-based method uses the relation between singular value shrinkage and eigenvalue shrinkage: the EVD of X>X is first computed, then the obtained eigenvalues are\nshrunk as max (\u221a\n\u03bbX >X i \u2212 1/\u03c1, 0 ) / \u221a \u03bbX >X i , where \u03bb X>X i denotes the i-th largest eigenvalue of X >X, to derive\nsingular value shrinkage. Also, the shrinkage function h(\u00b7) in (14) is defined as the soft-shrinkage case given by h ( x; 1\u03c1 , 1 \u03c1 ) from (26) for our method. The DWT [45] was used in (22) to sparsify the signals. We used Haar wavelet transform as the DWT. In the DWT, one level transform was performed and all high frequency components were set to 0. The selection of a transform method naturally affects the computation time of our method. Therefore, we indicate the effect of the selection in Section V-E. To indicate the approximation precision, root mean squared error (RMSE) was used, which was computed using the results of our method and those of the SVD/EVD-based methods. Furthermore, the computation times of all the methods are shown, and the average computation times of the CPA-based/exact singular value shrinkage in each iteration are also indicated. In all applications, we used the 5th, 10th, 15th, and 20th-order approximations. We also used the following optimization tools to solve the above applications."}, {"heading": "B. Optimization Tools", "text": "1) Proximity Operator: Let \u03930(RN ) be the set of all proper lower semicontinuous convex functions3 over RN .\nThe proximity operator [54] of a function f \u2208\u03930(RN ) of index \u03b3>0 is defined as\nprox\u03b3f : R N\u2192 RN : x 7\u2192 arg min\ny\u2208RN f(y) +\n1\n2\u03b3 \u2016x\u2212 y\u20162. (29)\nThe proximity operator plays a central role in the optimization of applications, as discussed in this section. When function f is defined as the nuclear norm, i.e., prox\u03b3\u2016\u00b7\u2016\u2217 , the proximity operator can be calculated by singular value shrinkage with the thresholding parameter \u03b3 [2]. Therefore, our CPA-based method is applied to the operator in the case of the nuclear norm.\n2) Alternating Direction Method of Multipliers: The ADMM [41] is an algorithm for solving a convex optimiza-\ntion problem represented as\nmin x\u2208Rn1 ,z\u2208Rn2 f(x) + g(z) s.t. z = Kx, (30)\nwhere f \u2208\u03930(Rn1), g\u2208\u03930(Rn2) and K\u2208Rn2\u00d7n1 . For arbitrary z0, p0\u2208Rn2 , and \u03c1>0, the ADMM algorithm is given by\n2The EVD-based method could lead to loss of computational precision compared with the SVD-based one. Though the errors may affect the performance of applications, we did not encounter such a problem in the experiments described in this paper. 3A function f : RN\u2192 R \u222a {\u221e} is called proper lower semicontinuous convex if dom(f) :={x\u2208RN | f(x)<\u221e} 6=\u2205, lev\u2264a(f) :={x\u2208 RN | f(x)\u2264a} is closed in \u2200a\u2208R, and f(\u03b7x + (1\u2212 \u03b7)y)\u2264\u03b7f(x) + (1\u2212 \u03b7)f(y) in \u2200x,y\u2208RN and \u2200\u03b7\u2208(0, 1), respectively.\nMay 22, 2017 DRAFT\n xt+1 := arg min x f(x) + \u03c1 2 \u2016zt \u2212Kx\u2212 ut\u201622 zt+1 := prox1/\u03c1g(Kxt+1 + ut)\nut+1 := ut + Kxt+1 \u2212 zt+1.\n(31)\nWe recall a convergence analysis of the ADMM by Eskstein and Bertsekas [41].\nFact 1 (Convergence of the ADMM [41]): Consider Prob. (30). Assume that K>K is invertible and that a saddle point of its unaugmented Lagrangian L0(x, z,u\u2032) := f(x) + g(z) \u2212 \u3008u\u2032,Kx\u2212z\u3009 exists, where u\u2032 :=\u03c1u. Then the sequence (xt)(t\u22651) generated using (31) converges to a solution of Prob. (30).\nWe used the ADMM algorithm to practically solve the following applications. In all applications, the stopping\ncriterion4 in the ADMM algorithm was set to 1.0\u00d710\u22124."}, {"heading": "C. Texture Image Inpainting [12], [13]", "text": "The objective with this application is to recover a missing region (as shown in the later Fig. 6(b)). Let L and I \u2208 Rm\u00d7n be a texture image and a given image with missing regions, respectively. Then, let \u2126 and \u2126 be observed and missing regions and P\u2126(\u00b7) and P\u2126(\u00b7) be linear operators extracting pixels in their regions. From the notations, the missing region is represented as M=P\u2126(L). The pixels surrounding M with the size of five pixels, as shown in Fig. 5, are defined as M\u2202 . Let T1 \u2208Rm\u00d7m and T2 \u2208Rn\u00d7n be the DCT matrices in the horizontal and vertical matrix directions, i.e., these matrices transform an image to its frequency domain. Since a regular texture image is basically sparse in its frequency domain, it can be represented as L=T1ST>2 , where S is the coefficients on the frequency domain of L. Additionally, the set of a normalized dynamic range constraint is defined as D :={x :=[xi]mni=1| xi\u2208 [0, 1]}. When L and S are assumed to be low rank and sparse, the reconstruction problem can approximately be solved using the nuclear norm5 and the `1 norm as\nmin L,S,vec(L)\u2208D\n\u2016L\u2016\u2217 + \u03b7\u2016S\u20161\ns.t. P\u2126(I) = P\u2126(L), L = T1ST>2 ,\nave ( vec(M) ) = ave ( vec(M\u2202) ) ,\n(32)\nwhere a positive real value \u03b7 is a regularization parameter, ave(\u00b7) calculates the arithmetic average, and vec(\u00b7) is the operator vectorizing a matrix. The average pixel value on the recovered region is assumed to be identical to that\n4For example, in (39), which is indicated in Appendix A-A, the criterion is evaluated using \u2016lt+1 \u2212 lt\u20162/\u2016lt+1\u20162. 5The nuclear norm of X\u2208Rm\u00d7n is defined as \u2016X\u2016\u2217 := \u2211K i=1 \u03c3i(X), where i\u2208{1, 2, . . . ,K}(K := min(m,n)).\nMay 22, 2017 DRAFT\n15\nof its surrounding pixel values. As can be seen, (32) is composed of nuclear norm relaxation so that our method can be used for its efficient calculation. Hereafter, we discuss the validation of our method by applying the ADMM to (32) to obtain the optimal solution. In Appendix A-A, (32) is converted to the form to which the ADMM is applicable.\nEight-bit color images Bricks and Office widows6, as shown in Figs. 6(a) and (f), were used for the application, where the size of each color component of the images was 1920 \u00d7 2560. The pixel values of each color component of the images were in the range from 0 to 1. In the application, each color component was inpainted separately.\n6The images are available at http://www.mayang.com/textures/.\nMay 22, 2017 DRAFT\n16\nThe observed image I \u2208R2560\u00d71920 with the missing regions were defined, as shown in Fig. 6(b) and (g)7. The number of missing pixels in Fig. 6(b) was M\u2208R300\u00d7300 and that in Fig. 6(g) was M\u2208R180\u00d71250. In the ADMM applicable form (see Appendix A-A), the column vectors l0 and u0 were initialized by all-one vectors. Additionally, for prox1/\u03c1\u2016\u00b7\u2016\u2217 and prox\u03b7/\u03c1\u2016\u00b7\u20161 , the thresholding parameters (1/\u03c1, \u03b7/\u03c1) were set to (6, 0.1) in Bricks and (5, 0.1) in Office windows, where the parameters were determined for the fast and stable convergence of the optimization. For fast computation, parallel processing8 was performed in the application of the color components.\nFigure 6 shows the results of image inpainting with the 20th-order approximation. The resulting image recovered using our method was practically equivalent to that with the SVD-based method by comparing Figs. 6(c), (d), (h), and (i). In Figs. 6(e) and (j), it is clear that the exact and approximated solutions had little differences, which visually indicates the high approximation precision of our method.\nTable I lists the computation time and RMSE comparisons. Our method was faster than the EVD-based method while maintaining reconstruction performance. Regarding the total computation times of Bricks and Office windows, our method with the 5th-order and 10th-order approximations was slower than with the 15th-order approximations. This is because our method with the low-order approximations did not converge well due to the low approximate precision."}, {"heading": "D. Background Modeling of Video [14]\u2013[18]", "text": "The objective with this application is to divide a video sequence into background and object sequences (as shown\nin Fig. 7(a) and (b)).\nLet I(i)\u2208Rm\u00d7n be the i-th frame of a video sequence. The sequence is rearranged into a matrix I\u2208Rmn\u00d7K as\nI := [ vec(I(1)) vec(I(2)) . . . vec(I(K)) ] . (33)\nThen, let L and S\u2208Rmn\u00d7K be the background sequence and sequence of moving objects of a video. In L, pixel values corresponding to S are zero and vice versa. The background and moving objects can be assumed to be low rank and sparse; hence, the background modeling is solved as the following convex optimization problem:\nmin L,S \u2016L\u2016\u2217 + \u03b7\u2016S\u20161 s.t. I = L + S. (34)\nProblem (34) is also solved using the ADMM.\nIn the background modeling, an eight-bit grayscale video Laboratory9 was used. The I(i) \u2208R360\u00d7240 was the i-th frame of the video in i\u2208{1, 2, . . . , 5000}; hence, the matrix of the sequence was I\u2208R86400\u00d75000. The pixel values of the video were in the range from 0 to 1. In the ADMM applicable form (see Appendix A-B), the column vectors l0, s0, and u0 were initialized by all-one vectors. Additionally, the thresholding parameters (1/\u03c1, \u03b7/\u03c1) were\n7In the experiment, the images are transposed to \u201cportrait\u201d. 8The MATLAB function parfor, which is contained in the parallel computing toolbox, was used for the parallel computing only in the image\ninpainting method. 9This video was recorded with our video camera. It was downsampled and transformed into grayscale for the experiment.\nMay 22, 2017 DRAFT\n17\nset to (480, 0.12), where the parameters were determined for the fast and stable convergence of the optimization. For comparison, low rank and sparse components in the 160th frame are shown in Fig. 7 with the 20th-order approximation.\nOur method effectively decomposed the video sequences to low rank and sparse sequences, as shown in Figs. 7(a) and (b). They are almost equivalent to those with the EVD-based method; hence, the difference between the low rank images are not displayed even though the difference is amplified (bottom left of Fig. 7).\nTable II summarizes the computation times and RMSEs between the background modeling of our method and that of the EVD-based method10. Our method was sufficiently faster than the EVD-based method in all approximation orders. This is because the reduction in computational complexity by thresholding the transformed coefficients described in (21) is effective for our method to have low computational complexity while retaining high approximation precision. However, our method with the 5th-order approximations took more time than that with 10th-order approximation because it did not converge well due to its low approximate precision.\n10The SVD-based method ran out of memory in our machine so that the results of the EVD-based method were used for the RMSEs.\nMay 22, 2017 DRAFT\n18"}, {"heading": "E. Effects of Selections: Transform Matrix and Thresholding Value", "text": "The selections of a transform matrix T in (22) and a thresholding value \u03b5 in (20) affect computation time and size of approximation error. In this subsection, we indicate these effects experimentally by using the image inpainting method for Bricks. In all experiments, the 15th-order approximation was used for our method.\n1) Effects of Selected Transform Matrix: We compared the DWT with the DCT and the block diagonal forms of the DCT (block DCT) [32] whose block size was 8\u00d7 8 for indicating the differences among chosen transform matrices T in (22). The threshold values in (20) were fixed to \u03b5 = 250 for the DCTs. The other experimental conditions were the same as those discussed in Section V-C.\nThe results of the proposed method in Table III show the performance comparisons. Our method with the DWT is as fast as that with the block DCT in the total computation time, though the singular value shrinkage with our method with the DWT takes more time than the others. This is because the maximum iteration of our method with the DWT is only 83, whereas those of our method with the block DCT and DCT are 101 and 97, respectively. Therefore, the DWT leads our method to be stable convergence. However, our method with the DWT indicates a higher RMSE than the others since all the high frequency components were removed in it. The fact is not fatal\nMay 22, 2017 DRAFT\n19\nproblem because the images derived by using our method with the DWT were very similar to that of the exact one as shown in the previous section. Additionally, the block DCT can substantially sparsify an image compared to the DWT and DCT. Therefore, our method with the block DCT is faster than the others. In spite of fast computation, the results with the block DCT shows an RMSE as low as that of the DCT.\n2) Effects of Thresholding Value: When \u03b5 is an excessively large value, our method becomes fast but matrix rank minimization cannot converge well due to the errors w.r.t. the reduction in the number of components. For achieving the fast computation and stable convergence, we present a recommended guideline on the thresholding values.\nLet Et be an error at the t-th iteration of the ADMM, i.e., Et = \u2016lt \u2212 lt\u22121\u2016/\u2016lt\u2016 from Appendix A-A and K(X, k) be a function that returns the k-th largest element in a matrix X, where K(X, k) is used as the threshold. Basically, when Et is a large value, a small k does not have any problem to decrease the error. In contrast, when Et is a small value, i.e., the optimization almost converges, k should be large for a stable convergence. For this purpose, we recommend the thresholding percentage for K(|\u03a6|, k) as\n\u03b5(Et) =  K ( |\u03a6|, (0.5\u00d710\u22124)n2 ) if Et>E`, K ( |\u03a6|, (1.5\u00d710\u22124)n2 ) if E`\u2265Et>Em, K ( |\u03a6|, (0.5\u00d710\u22123)n2 ) otherwise,\n(35)\nwhere E` := 0.3\u00d710\u22121 and Em := 6\u00d710\u22124. This was determined experimentally. Recall that the size of \u03a6 is n\u00d7n. To verify (35), it was compared with fixed threshold. Four values k1 = (0.5\u00d710\u22124)n2, k2 = (1.5\u00d710\u22124)n2, k3 = (0.5\u00d710\u22123)n2, and k4 = n2 were used for this comparison, where k4 means that all components of a matrix are retained. Additionally, the DCT was exploited for the sparsifying matrix.\nThe results are listed in Table IV. The adaptive method was faster than the fixed method. Our method with k1 was the fastest but it did not converge well for the large size of approximation errors, where k1 is considered as the limitation of the thresholding percentage in our method. In addition, the singular value shrinkage of our CPA-based method by thresholding the matrix components was about five times faster than that by maintaining those."}, {"heading": "F. Comparison with Existing Methods", "text": "As previously mentioned, there are several fast singular value shrinkage methods [25]\u2013[27]. To illustrate the advantage of our method, we compared it with the singular value shrinkage by using the exact PSVD, fast randomized singular value shrinkage (FRSVS) [25], singular value shrinkage by using the Nystro\u0308m method (NSVS) [26], and the fast singular value shrinkage without the exact SVD (FSVS) [27]. The experiments were conducted using the image inpainting method for Bricks and a synthetic data. The synthetic data is constructed as a block diagonal matrix whose number of the main diagonal blocks is equal to its rank. Let D \u2208 R1000\u00d71000 be the matrix form of the synthetic data with rank n, and this is defined as D := J\u2212blkdiag(Ds, n), where J := 110001>1000, Ds := 0.511000/n1>1000/n and blkdiag(Ds, n) := diag(Ds,Ds, . . . ,Ds\ufe38 \ufe37\ufe37 \ufe38\nn\n). In the experiment, n =10, 100, 200, and 500 were used, and x%\nMay 22, 2017 DRAFT\n20\nof elements in D were randomly replaced with zero, where x \u2208 {1, 10, 20}. To restore the corrupted data, the optimization problem in (32) was solved without using the average term, i.e., ave ( vec(M) ) = ave ( vec(M\u2202) ) , because the matrices M and M\u2202 can hardly be defined for the random corruption. The function svdsechon11 was used for carrying out the exact PSVD, and the 500 largest singular values were calculated for Bricks. All preferences of the FRSVS [25] was determined in the original code12 provided by the authors. In the FRSVS, the 550 largest singular values were approximately derived for Bricks, whose number of singular values was experimentally determined for carrying out precise and fast singular value shrinkage. In addition, the 200 largest singular values were derived for the synthetic data in the exact PSVD and the FRSVS. The partial singular values derived in the exact PSVD and the FRSVS were soft-thresholded: The ith partial singular value \u03c3pi is shrunk to max(\u03c3pi \u2212 1/\u03c1, 0). Since the Nystro\u0308m method requires a square matrix to derive partial eigenvalues, it was applied to X>X, as in the EVD-based method. The 500 and 200 largest eigenvalues were calculated for the Bricks and the synthetic data, respectively. Those eigenvalues were then shrunk in the same way as with the EVD-based method, whose number of calculated eigenvalues was experimentally determined from the same reason as the FRSVS. All\n11Available at https://www.mathworks.com/matlabcentral/fileexchange/47132-fast-svd-and-pca 12Available at http://thohkaistackr.wixsite.com/page/projectfrsvt\nMay 22, 2017 DRAFT\n21\npreferences used in the FSVS were directly used as suggested in [27].\nThe results for Bricks are indicated in Table III and Fig. 8. Note that the experiments of the existing methods were stopped at the 80th iterations since these methods did not converge. The concept of the FSVS is similar to our method, but it requires longer computation time as shown in Table III and does not converge. For the FRSVS and NSVS, although their average computation times are slightly less than ours, they result in much larger errors. This would be because many singular values or eigenvalues above the threshold 1/\u03c1 were reduced to zero, so that the exact PSVD, FRSVS, and NSVS produced the large errors in each iteration leading to unstable convergence. In contrast, our method is stable and does not affect the convergence of the optimization method because the CPA-based method can shrink the entire singular values.\nFigure 9 shows the comparison of errors in the case of the synthetic data in several conditions according to the reduction rate of data elements and the matrix rank. The optimization methods using the existing methods do not converge well when the matrix rank is 500. This is because many singular values above 1/\u03c1 are discarded, i.e., enormous computation errors are produced in each iteration. From the results, the matrix rank of target data should be estimated beforehand, and then the numbers of partial singular values and vectors should be estimated to be larger than the matrix rank, in order to make the optimization method converged. In contrast, our method can lead the optimization method to stable convergence. It certainly generates some approximation errors, but it can process all singular values, which means that most singular values above 1/\u03c1 are remained.\nMay 22, 2017 DRAFT\n22"}, {"heading": "VI. CONCLUSION", "text": "We proposed a fast thresholding method of singular values without computing singular values and vectors. The key tool of the proposed method is CPA. From CPA characteristics, singular value shrinkage could be computed by a multiplication of matrices. The proposed method was further accelerated using the sparsity of a signal, where the frequency transform was used for obtaining sparse coefficients. Moreover, we studied the approximation order for reducing the size of approximation errors. The experimental results revealed that our method was much faster than the exact methods with high approximation precision in the case of a large data size. In addition, our method can lead the optimization method to be stable convergence in comparison of the existing fast singular value shrinkage methods because of its approximation precision."}, {"heading": "APPENDIX A", "text": "ADMM APPLICABLE FORMS"}, {"heading": "A. Texture Image Inpainting", "text": "Let i := vec(I), l := vec(L), m := vec(M), and m\u2202 := vec(M\u2202). The 2-D DCT matrix is represented as \u03a8, and the matrix form of P\u2126 and P\u2126 are defined as \u2126 and \u2126. In addition, the indicator functions of the sets I :={x\u2208Rmn| x=\u2126i}, M :={x\u2208RN | ave(x)=ave(m\u2202)} and D are denoted as \u03b9I , \u03b9M, and \u03b9D, respectively, where N is the size of vec(M). By using the above definitions, (32) is redefined as\nmin l \u2016l\u2016\u2217 + \u03b7\u2016\u03a8l\u20161 + \u03b9I(\u2126l) + \u03b9D(l) + \u03b9M(\u2126l). (36)\nLet the vector z\u2208R5mn be\nz :=  z(1) z(2) z(3) z(4)\nz(5)\n =  Id \u03a8 \u2126 Id\n\u2126\n l = Kl. (37)\nFinally, (36) is represented as\nmin l,z \u2016z(1)\u2016\u2217+\u03b7\u2016z(2)\u20161+\u03b9I(z(3))+\u03b9D(z(4))+\u03b9M(z(5))\ns.t. z = Kl, (38)\nEquation (38) can be applied to the ADMM algorithm in (31) which is indicated in Appendix V-B. Let u0 := [(u (1) 0 ) >, (u (2) 0 ) >, (u (3) 0 ) >, (u (4) 0 ) >, (u (5) 0 ) >]> be an arbitrary auxiliary vector, where u(i)0 \u2208Rmn in i= 1, . . . , 5.\nMay 22, 2017 DRAFT\n23\nApplying the ADMM to (38) yields the following algorithm: lt+1 := (K >K)\u22121K>(zt \u2212 ut) z (1) t+1 := prox1/\u03c1\u2016\u00b7\u2016\u2217(lt+1 + u (1) t ) \u2014\u2014 (\u2217) z (2) t+1 := prox\u03b7/\u03c1\u2016\u00b7\u20161(\u03a8lt+1 + u (2) t ) z (3) t+1 := \u03a0I(\u2126lt+1 + u (3) t ) z (4) t+1 := \u03a0D(lt+1 + u (4) t ) z (5) t+1 := \u03a0M(\u2126lt+1 + u (5) t )\nut+1 := ut + Klt+1 \u2212 zt+1,\n(39)\nwhere the update of prox1/\u03c1\u2016\u00b7\u2016\u2217 in (\u2217) of (39) can be computed by singular value shrinkage, which is performed using our CPA-based method. Additionally, the update of prox\u03b7/\u03c1\u2016\u00b7\u20161 is approximated by soft-thresholding, i.e., sgn(Xij) max(|Xij |\u2212\u03b7/\u03c1, 0), where Xij is the entry of an arbitrary matrix X and sgn(\u00b7) is the sign function. In the following applications, the same calculation is used for the updates of prox1/\u03c1\u2016\u00b7\u2016\u2217 and prox\u03b7/\u03c1\u2016\u00b7\u20161 . In (39), \u03a0I(\u00b7), \u03a0D(\u00b7), and \u03a0M(\u00b7) are the metric projections onto I, D, and M, respectively. Practically, \u03a0I(\u00b7) is given by maintaining the assigned pixels, and \u03a0D(\u00b7) is calculated by pushing the entries outside [0, 1] into 0 or 1 (the nearest is chosen). Additionally, the auxiliary value is calculated as the difference between the average value of m\u2202 on i and the average value of \u2126lt+1 + u (5) t on the recovered region. The \u03a0M(\u00b7) is derived by adding the auxiliary value to \u2126lt+1 + u (5) t on the recovered region."}, {"heading": "B. Background Modeling", "text": "Let i :=vec(I), l :=vec(L), and s :=vec(S). The indicator function of the set I :={x\u2208RmnK | x= i} is defined\nas \u03b9I . By using the above definitions, (34) is rewritten as\nmin l,s \u2016l\u2016\u2217 + \u03b7\u2016s\u20161 + \u03b9I(l + s). (40)\nWhen an auxiliary vector z is represented as\nz :=  z(1) z(2)\nz(3)\n =  Id O O Id\nId Id\n l\ns  = Kl\u2032. (41) Problem (40) is further rewritten as\nmin z,l\u2032 \u2016z(1)\u2016\u2217 + \u03b7\u2016z(2)\u20161 + \u03b9I(z(3)) s.t. z = Kl\u2032. (42)\nMay 22, 2017 DRAFT\n24\nLet u0 := [(u (1) 0 ) >, (u (2) 0 ) >, (u (3) 0 ) >]> be an auxiliary vector for the ADMM, where u(i)0 \u2208RmnK in i= 1, 2, 3. Applying the ADMM to (42) yields the following algorithm: l\u2032t+1 := (K >K)\u22121K>(zt \u2212 ut) z (1) t+1 := prox1/\u03c1\u2016\u00b7\u2016\u2217(lt+1 + u (1) t ) \u2014\u2014 (\u2217) z (2) t+1 := prox\u03b7/\u03c1\u2016\u00b7\u20161(st+1 + u (2) t ) z (3) t+1 := \u03a0I(lt+1 + st+1 + u (3) t )\nut+1 := ut + Kl \u2032 t+1 \u2212 zt+1,\n(43)\nwhere the update of z(1) in (\u2217) of (43) is calculated using our CPA-based method. In (43), \u03a0I(\u00b7) is the metric projection onto I, which is given by maintaining the observed pixel values of the original sequences."}], "references": [{"title": "Exact matrix completion via convex optimization,", "author": ["E.J. Cand\u00e8s", "B. Recht"], "venue": "Found. Comput. Math. (FoCM),", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2009}, {"title": "A singular value thresholding algorithm for matrix completion,", "author": ["J.-F. Cai", "E.J. Cand\u00e8s", "Z. Shen"], "venue": "SIAM J. Optim., vol. 20,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Tensor completion for estimating missing values in visual data,", "author": ["J. Liu", "P. Musialski", "P. Wonka", "J. Ye"], "venue": "IEEE Trans. Pattern Anal. Mach. Intelli. (TPAMI),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "Tensor completion and low-n-rank tensor recovery via convex optimization,", "author": ["S. Gandy", "B. Recht", "I. Yamada"], "venue": "Inverse Problems,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Cartoon-texture image decomposition using blockwise low-rank texture characterization,", "author": ["S. Ono", "T. Miyata", "I. Yamada"], "venue": "IEEE Trans. Image Process.,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "A low patch-rank interpretation of texture,", "author": ["H. Schaeffer", "S. Osher"], "venue": "SIAM J. Imag. Sci.,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Robust photometric stereo via low-rank matrix completion and recovery,", "author": ["L. Wu", "A. Ganesh", "B. Shi", "Y. Matsushita", "Y. Wang", "Y. Ma"], "venue": "in Proc. Asian Conf. Comput. Vis. (ACCV),", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "Papadhimitri, \u201cA closed-form solution to uncalibrated photometric stereo via diffuse maxima,", "author": ["T.P. Favaro"], "venue": "in Proc. IEEE Conf. Comput. Vis. Pattern Recognit. (CVPR),", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2012}, {"title": "Online robust image alignment via iterative convex optimization,", "author": ["Y. Wu", "B. Shen", "H. Ling"], "venue": "in Proc. IEEE Conf. Comput. Vis. Pattern Recognit. (CVPR),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2012}, {"title": "Colorization by matrix completion,", "author": ["S. Wang", "Z. Zhang"], "venue": "in Proc. AAAI Conf. Artificial Intelli.,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}, {"title": "Repairing sparse low-rank texture,", "author": ["X. Liang", "X. Ren", "Z. Zhang", "Y. Ma"], "venue": "in Proc. Euro. Conf. Comput. Vis. (ECCV),", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2012}, {"title": "Convexity in source separation : models, geometry, and algorithms,", "author": ["M.B. McCoy", "V. Cevher", "Q.T. Dinh", "A. Asaei", "L. Baldassarre"], "venue": "IEEE Signal Process. Magazine, vol. 31,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2014}, {"title": "Low-rank modeling and its applications in image analysis,", "author": ["X. Zhou", "C. Yang", "H. Zhao", "W. Yu"], "venue": "ACM Comput. Surv. (CSUR), vol. 47,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2015}, {"title": "Robust principal component analysis: exact recovery of corrupted low-rank matrices via convex optimization,", "author": ["J. Wright", "A. Ganesh", "S. Rao", "Y. Peng", "Y. Ma"], "venue": "in Adv. Neural Info. Process. Sys. (NIPS),", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "A multi-transformational model for background subtraction with moving cameras,", "author": ["D. Zamalieva", "A. Yilmaz", "J.W. Davis"], "venue": "Proc. Euro. Conf. Comput. Vis. (ECCV),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2014}, {"title": "Moving object detection by detecting contiguous outliers in the low-rank representation,", "author": ["X. Zhou", "C. Yang", "W. Yu"], "venue": "IEEE Trans. Pattern Anal. Mach. Intelli. (TPAMI),", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2013}, {"title": "Color-line regularization for color artifact removal,", "author": ["S. Ono", "I. Yamada"], "venue": "IEEE Trans. Comput. Image,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2016}, {"title": "Collaborative spectrum sensing from sparse observations using matrix completion for cognitive radio networks,", "author": ["J. Meng", "W. Yin", "H. Li", "E. Houssain", "Z. Han"], "venue": "in Proc. IEEE Int. Conf. Acoust. Speech Signal Process. (ICASSP),", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2010}, {"title": "Singing-voice separation from monaural recordings using robust principal component analysis,", "author": ["P.S. Huang", "S.D. Chen", "P. Smaragdis", "M. Hasegawa-Johnson"], "venue": "in Proc. IEEE Int. Conf. Acoust. Speech Signal Process. (ICASSP),", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2012}, {"title": "The power of convex relaxation: near-optimal matrix completion,", "author": ["E.J. Cand\u00e8s", "T. Tao"], "venue": "IEEE Trans. Info. Theory, vol. 56,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2010}, {"title": "Reduced rank regression via adaptive nuclear norm penalization,", "author": ["K. Chen", "H. Dong", "K.-S. Chan"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2013}, {"title": "Weighted nuclear norm minimization with application to image denoising,", "author": ["S. Gu", "L. Zhang", "W. Zuo", "X. Feng"], "venue": "in Proc. IEEE Conf. Comput. Vis. Pattern Recognit. (CVPR),", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2014}, {"title": "Fast randomized singular value thresholding for nuclear norm minimization,", "author": ["T.-H. Oh", "Y. Matsushita", "Y.-W. Tai", "I.S. Kweon"], "venue": "in Proc. IEEE Conf. Comput. Vis. Pattern Recognit. (CVPR),", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2015}, {"title": "Spectral grouping using the Nystr\u00f6m method,", "author": ["C. Fowlkes", "S. Belongie", "F. Chung", "J. Malik"], "venue": "IEEE Trans. Pattern Anal. Mach. Intelli. (TPAMI),", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2004}, {"title": "Fast singular value thresholding without singular value decomposition,", "author": ["J.-F. Cai", "S. Osher"], "venue": "Methods Appl. Anal., vol. 20,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2013}, {"title": "Interpolation and approximation by polynomials", "author": ["G.M. Phillips"], "venue": "CMS Books Mathematics. Springer-Verlag,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2003}, {"title": "Wavelets on graphs via spectral graph theory,", "author": ["D.K. Hammond", "P. Vandergheynst", "R. Gribonval"], "venue": "Appl. Comput. Harmonic Anal., vol. 30,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2011}, {"title": "Multirate Systems and Filter Banks, Prentice-Hall, Inc", "author": ["P. P Vaidyanathan"], "venue": "Upper Saddle River, NJ,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 1993}, {"title": "Fast and stable least-squares approach for the design of linear phase FIR filters,", "author": ["M. Okuda", "M. Ikehara", "S. Takahashi"], "venue": "IEEE Trans. Signal Process.,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 1998}, {"title": "Polynomial filtering in latent semantic indexing for information retrieval,", "author": ["E. Kokipoulou", "Y. Saad"], "venue": "in Proc. ACM SIGIR Conf. Res. develop. info. Retrieval,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2004}, {"title": "A Chebyshev-Davidson algorithm for large symmetric eigenproblems,", "author": ["Y. Zhou", "Y. Saad"], "venue": "SIAM J. Matrix Anal. Appl., vol. 29,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2007}, {"title": "Approximating spectral densities of large matrices,", "author": ["L. Lin", "Y. Saad", "C. Yang"], "venue": "SIAM Rev.,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2016}, {"title": "Non-local/local image filters using fast eigenvalue filtering,", "author": ["M. Onuki", "S. Ono", "K. Shirai", "Y. Tanaka"], "venue": "in Proc. IEEE Int. Conf. Image Process. (ICIP),", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2015}, {"title": "Globalized BM3D using fast eigenvalue filtering,", "author": ["K. Suwabe", "M. Onuki", "Y. Iizuka", "Y. Tanaka"], "venue": "in Proc. IEEE Global Conf. Signal Info. Process. (GlobalSIP),", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2015}, {"title": "An algorithm for improving non-local means operators via low-rank approximation,", "author": ["V. May", "Y. Keller", "N. Sharon", "Y. Shkolnisky"], "venue": "IEEE Trans. Image Process.,", "citeRegEx": "40", "shortCiteRegEx": "40", "year": 2016}, {"title": "On the Douglas-Rachford splitting method and proximal point algorithm for maximal monotone operators,", "author": ["J. Eckstein", "D.P. Bertsekas"], "venue": "Math. Program.,", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 1992}, {"title": "Image colorization based on ADMM with fast singular value thresholding by Chebyshev polynomial approximation,", "author": ["M. Onuki", "S. Ono", "K. Shirai", "Y. Tanaka"], "venue": "in Proc. IEEE Int. Conf. Acoust. Speech Signal Process. (ICASSP),", "citeRegEx": "42", "shortCiteRegEx": "42", "year": 2016}, {"title": "Digital signal processing: principles, algorithms, and applications, Pentice", "author": ["J.G. Proakis", "D.K. Manolakis"], "venue": null, "citeRegEx": "43", "shortCiteRegEx": "43", "year": 1996}, {"title": "Discrete Cosine Transform: Algorithms, Advantages", "author": ["K.R. Rao", "P. Yip"], "venue": null, "citeRegEx": "44", "shortCiteRegEx": "44", "year": 1990}, {"title": "A wavelet tour of signal processing", "author": ["S. Mallat"], "venue": "Academic press,", "citeRegEx": "45", "shortCiteRegEx": "45", "year": 1999}, {"title": "Discrete-Time Signal Processing, Prentice-Hall, Inc", "author": ["A.V. Oppenheim", "R.W. Schafer", "J.R. Buck"], "venue": "Upper Saddle River, NJ,", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 1989}, {"title": "A unified approach to the design of optimum FIR linear-phase digital filters,", "author": ["J.H. McClellan", "T.W. Parks"], "venue": "IEEE Trans. Circuit Theory, vol. 20,", "citeRegEx": "47", "shortCiteRegEx": "47", "year": 1973}, {"title": "Equiripple FIR filter design by the FFT algorithm,", "author": ["A.E. Cetin", "O.N. Gerek", "Y. Yardimci"], "venue": "IEEE Signal Process. Magazine, vol. 14,", "citeRegEx": "48", "shortCiteRegEx": "48", "year": 1997}, {"title": "Remez, \u201cSur la d\u00e9rmination des polyn\u00f4mes d\u2019approximation de degr\u00e9 donn\u00e9e,\u201d Comm", "author": ["E. Ya"], "venue": "Soc. Math. Kharkov, vol. 10, pp. 41\u201363,", "citeRegEx": "51", "shortCiteRegEx": null, "year": 1934}, {"title": "A survey of methods of computing minimax and near-minimax polynomial approximations for functions of a single independent variable,", "author": ["W. Fraser"], "venue": "J. ACM,", "citeRegEx": "52", "shortCiteRegEx": "52", "year": 1965}, {"title": "Introduction to Linear Algebra, Fifth ed", "author": ["G. Strang"], "venue": null, "citeRegEx": "53", "shortCiteRegEx": "53", "year": 2016}, {"title": "Fonctions convexes duales er points proximaux dans un espace hilbertien,", "author": ["J.J. Moreau"], "venue": "C. R. Acad. Sci. Prais Se\u0301r. A Math,", "citeRegEx": "54", "shortCiteRegEx": "54", "year": 1962}], "referenceMentions": [{"referenceID": 0, "context": "INTRODUCTION The low-rank structure inherent in various signals has been widely exploited in many signal processing applications, such as matrix and tensor completion [1]\u2013[4], image decomposition [5], [6], photometric stereo [7], [8], image", "startOffset": 167, "endOffset": 170}, {"referenceID": 3, "context": "INTRODUCTION The low-rank structure inherent in various signals has been widely exploited in many signal processing applications, such as matrix and tensor completion [1]\u2013[4], image decomposition [5], [6], photometric stereo [7], [8], image", "startOffset": 171, "endOffset": 174}, {"referenceID": 4, "context": "INTRODUCTION The low-rank structure inherent in various signals has been widely exploited in many signal processing applications, such as matrix and tensor completion [1]\u2013[4], image decomposition [5], [6], photometric stereo [7], [8], image", "startOffset": 196, "endOffset": 199}, {"referenceID": 5, "context": "INTRODUCTION The low-rank structure inherent in various signals has been widely exploited in many signal processing applications, such as matrix and tensor completion [1]\u2013[4], image decomposition [5], [6], photometric stereo [7], [8], image", "startOffset": 201, "endOffset": 204}, {"referenceID": 6, "context": "INTRODUCTION The low-rank structure inherent in various signals has been widely exploited in many signal processing applications, such as matrix and tensor completion [1]\u2013[4], image decomposition [5], [6], photometric stereo [7], [8], image", "startOffset": 225, "endOffset": 228}, {"referenceID": 7, "context": "INTRODUCTION The low-rank structure inherent in various signals has been widely exploited in many signal processing applications, such as matrix and tensor completion [1]\u2013[4], image decomposition [5], [6], photometric stereo [7], [8], image", "startOffset": 230, "endOffset": 233}, {"referenceID": 8, "context": "alignment [9], [10], colorization [11], inpainting [12], [13], background modeling [14]\u2013[18], color artifact removal [19], cognitive radio [20], and voice separation [21].", "startOffset": 15, "endOffset": 19}, {"referenceID": 9, "context": "alignment [9], [10], colorization [11], inpainting [12], [13], background modeling [14]\u2013[18], color artifact removal [19], cognitive radio [20], and voice separation [21].", "startOffset": 34, "endOffset": 38}, {"referenceID": 10, "context": "alignment [9], [10], colorization [11], inpainting [12], [13], background modeling [14]\u2013[18], color artifact removal [19], cognitive radio [20], and voice separation [21].", "startOffset": 51, "endOffset": 55}, {"referenceID": 11, "context": "alignment [9], [10], colorization [11], inpainting [12], [13], background modeling [14]\u2013[18], color artifact removal [19], cognitive radio [20], and voice separation [21].", "startOffset": 57, "endOffset": 61}, {"referenceID": 12, "context": "alignment [9], [10], colorization [11], inpainting [12], [13], background modeling [14]\u2013[18], color artifact removal [19], cognitive radio [20], and voice separation [21].", "startOffset": 83, "endOffset": 87}, {"referenceID": 15, "context": "alignment [9], [10], colorization [11], inpainting [12], [13], background modeling [14]\u2013[18], color artifact removal [19], cognitive radio [20], and voice separation [21].", "startOffset": 88, "endOffset": 92}, {"referenceID": 16, "context": "alignment [9], [10], colorization [11], inpainting [12], [13], background modeling [14]\u2013[18], color artifact removal [19], cognitive radio [20], and voice separation [21].", "startOffset": 117, "endOffset": 121}, {"referenceID": 17, "context": "alignment [9], [10], colorization [11], inpainting [12], [13], background modeling [14]\u2013[18], color artifact removal [19], cognitive radio [20], and voice separation [21].", "startOffset": 139, "endOffset": 143}, {"referenceID": 18, "context": "alignment [9], [10], colorization [11], inpainting [12], [13], background modeling [14]\u2013[18], color artifact removal [19], cognitive radio [20], and voice separation [21].", "startOffset": 166, "endOffset": 170}, {"referenceID": 19, "context": "The other is the nuclear norm relaxation [22].", "startOffset": 41, "endOffset": 45}, {"referenceID": 20, "context": "Weighted nuclear norm relaxation [23], [24] has recently been proposed as a non-convex but continuous approximation of the rank function.", "startOffset": 33, "endOffset": 37}, {"referenceID": 21, "context": "Weighted nuclear norm relaxation [23], [24] has recently been proposed as a non-convex but continuous approximation of the rank function.", "startOffset": 39, "endOffset": 43}, {"referenceID": 22, "context": "Several methods have been proposed to tackle this issue [25]\u2013[27].", "startOffset": 56, "endOffset": 60}, {"referenceID": 24, "context": "Several methods have been proposed to tackle this issue [25]\u2013[27].", "startOffset": 61, "endOffset": 65}, {"referenceID": 22, "context": "The basic concept of [25], [26] is to approximately compute partial singular values and/or vectors.", "startOffset": 21, "endOffset": 25}, {"referenceID": 23, "context": "The basic concept of [25], [26] is to approximately compute partial singular values and/or vectors.", "startOffset": 27, "endOffset": 31}, {"referenceID": 24, "context": "With the other method [27], singular value shrinkage is carried out by computing neither singular values nor vectors, but the reduction in the computation time is still", "startOffset": 22, "endOffset": 26}, {"referenceID": 24, "context": "We consider a method similar to that by Cai and Osher [27]: We only need a \u201cprocessed\u201d matrix with thresholded singular values.", "startOffset": 54, "endOffset": 58}, {"referenceID": 24, "context": "Note that the proposed method computes neither singular values nor vectors during the process of singular value shrinkage, similar to the method by Cai and Osher [27].", "startOffset": 162, "endOffset": 166}, {"referenceID": 25, "context": "\u2022 Chebyshev polynomial approximation (CPA) [29]\u2013[31]: This tool is often used for designing filters in signal processing [32], [33] and is a key tool for reducing computational cost.", "startOffset": 43, "endOffset": 47}, {"referenceID": 27, "context": "\u2022 Chebyshev polynomial approximation (CPA) [29]\u2013[31]: This tool is often used for designing filters in signal processing [32], [33] and is a key tool for reducing computational cost.", "startOffset": 121, "endOffset": 125}, {"referenceID": 28, "context": "\u2022 Chebyshev polynomial approximation (CPA) [29]\u2013[31]: This tool is often used for designing filters in signal processing [32], [33] and is a key tool for reducing computational cost.", "startOffset": 127, "endOffset": 131}, {"referenceID": 31, "context": "[34]\u2013[37].", "startOffset": 5, "endOffset": 9}, {"referenceID": 32, "context": "The concept of the applications has recently been used for improving the performance of image filtering methods such as bilateral filter, non-local means, and BM3D [38]\u2013[40].", "startOffset": 164, "endOffset": 168}, {"referenceID": 34, "context": "The concept of the applications has recently been used for improving the performance of image filtering methods such as bilateral filter, non-local means, and BM3D [38]\u2013[40].", "startOffset": 169, "endOffset": 173}, {"referenceID": 10, "context": "For this study, we validated the proposed method by using two image processing applications: image inpainting [12] and background modeling [14]\u2013[18].", "startOffset": 110, "endOffset": 114}, {"referenceID": 12, "context": "For this study, we validated the proposed method by using two image processing applications: image inpainting [12] and background modeling [14]\u2013[18].", "startOffset": 139, "endOffset": 143}, {"referenceID": 15, "context": "For this study, we validated the proposed method by using two image processing applications: image inpainting [12] and background modeling [14]\u2013[18].", "startOffset": 144, "endOffset": 148}, {"referenceID": 35, "context": "In these applications, target problems are formulated as convex optimization problems involving the nuclear norm so that they can be efficiently solved using the alternating direction method of multiplier (ADMM) [41] with our method.", "startOffset": 212, "endOffset": 216}, {"referenceID": 22, "context": "Although the ADMM is widely known as a robust method for computation errors in each iteration, optimization methods (including the ADMM) with the other fast singular value shrinkage methods [25]\u2013[27] do not converge well due to their large approximation errors.", "startOffset": 190, "endOffset": 194}, {"referenceID": 24, "context": "Although the ADMM is widely known as a robust method for computation errors in each iteration, optimization methods (including the ADMM) with the other fast singular value shrinkage methods [25]\u2013[27] do not converge well due to their large approximation errors.", "startOffset": 195, "endOffset": 199}, {"referenceID": 36, "context": "The preliminary version of this study, without using signal sparsity, analysis of our method, and new applications, has previously been published [42].", "startOffset": 146, "endOffset": 150}, {"referenceID": 25, "context": "Chebyshev polynomial approximation [29]\u2013[31] gives an approximate solution of h(x) by using the truncated Chebyshev series:", "startOffset": 35, "endOffset": 39}, {"referenceID": 26, "context": "The CPA of the matrix form [30], [34], [36], [37] gives an approximated solution of the eigenvalue shrinkage function H(\u00b7) by using truncated Chebyshev series as \u0124(A) := 1 2 \u01090 Id + \u03b1\u22121 \u2211", "startOffset": 27, "endOffset": 31}, {"referenceID": 30, "context": "The CPA of the matrix form [30], [34], [36], [37] gives an approximated solution of the eigenvalue shrinkage function H(\u00b7) by using truncated Chebyshev series as \u0124(A) := 1 2 \u01090 Id + \u03b1\u22121 \u2211", "startOffset": 39, "endOffset": 43}, {"referenceID": 31, "context": "The CPA of the matrix form [30], [34], [36], [37] gives an approximated solution of the eigenvalue shrinkage function H(\u00b7) by using truncated Chebyshev series as \u0124(A) := 1 2 \u01090 Id + \u03b1\u22121 \u2211", "startOffset": 45, "endOffset": 49}, {"referenceID": 29, "context": "The eigenvalue shrinkage in (5) can be extended to G(B) in (13) as [35] G(B) = BH(B>B), (14)", "startOffset": 67, "endOffset": 71}, {"referenceID": 29, "context": "Note that [35] aims to calculate a vector represented as x\u0302 = BH(B>B)x, (17)", "startOffset": 10, "endOffset": 14}, {"referenceID": 29, "context": "The CPA is applied to H(B>B)x to quickly derive x\u0302 in [35].", "startOffset": 54, "endOffset": 58}, {"referenceID": 37, "context": ", T is considered as the discrete Fourier transform [43], discrete cosine transform (DCT) [44], and discrete wavelet transform (DWT) [45].", "startOffset": 52, "endOffset": 56}, {"referenceID": 38, "context": ", T is considered as the discrete Fourier transform [43], discrete cosine transform (DCT) [44], and discrete wavelet transform (DWT) [45].", "startOffset": 90, "endOffset": 94}, {"referenceID": 39, "context": ", T is considered as the discrete Fourier transform [43], discrete cosine transform (DCT) [44], and discrete wavelet transform (DWT) [45].", "startOffset": 133, "endOffset": 137}, {"referenceID": 0, "context": "where \u03c4hard is an arbitrary real value and x \u2208 [0, 1].", "startOffset": 47, "endOffset": 53}, {"referenceID": 27, "context": "2(b), the approximated response \u0125hard(x) has ripples, which is widely known in digital filter design [32], [46]\u2013[49].", "startOffset": 101, "endOffset": 105}, {"referenceID": 40, "context": "2(b), the approximated response \u0125hard(x) has ripples, which is widely known in digital filter design [32], [46]\u2013[49].", "startOffset": 107, "endOffset": 111}, {"referenceID": 40, "context": "Even among them, minimax polynomial approximation [46], [47], [50]\u2013[52] and least squares approximation [53] are well known as the best approximation in the sense of the minimization of the infinity norm and the least squares error w.", "startOffset": 50, "endOffset": 54}, {"referenceID": 41, "context": "Even among them, minimax polynomial approximation [46], [47], [50]\u2013[52] and least squares approximation [53] are well known as the best approximation in the sense of the minimization of the infinity norm and the least squares error w.", "startOffset": 56, "endOffset": 60}, {"referenceID": 44, "context": "Even among them, minimax polynomial approximation [46], [47], [50]\u2013[52] and least squares approximation [53] are well known as the best approximation in the sense of the minimization of the infinity norm and the least squares error w.", "startOffset": 67, "endOffset": 71}, {"referenceID": 45, "context": "Even among them, minimax polynomial approximation [46], [47], [50]\u2013[52] and least squares approximation [53] are well known as the best approximation in the sense of the minimization of the infinity norm and the least squares error w.", "startOffset": 104, "endOffset": 108}, {"referenceID": 22, "context": ", the exact partial singular value decomposition (PSVD) based method and fast singular value shrinkage methods [25]\u2013[27], in Section V-F.", "startOffset": 111, "endOffset": 115}, {"referenceID": 24, "context": ", the exact partial singular value decomposition (PSVD) based method and fast singular value shrinkage methods [25]\u2013[27], in Section V-F.", "startOffset": 116, "endOffset": 120}, {"referenceID": 39, "context": "The DWT [45] was used in (22) to sparsify the signals.", "startOffset": 8, "endOffset": 12}, {"referenceID": 46, "context": "The proximity operator [54] of a function f \u2208\u03930(R ) of index \u03b3>0 is defined as prox\u03b3f : R \u2192 R : x 7\u2192 arg min y\u2208RN f(y) + 1 2\u03b3 \u2016x\u2212 y\u2016.", "startOffset": 23, "endOffset": 27}, {"referenceID": 1, "context": ", prox\u03b3\u2016\u00b7\u2016\u2217 , the proximity operator can be calculated by singular value shrinkage with the thresholding parameter \u03b3 [2].", "startOffset": 117, "endOffset": 120}, {"referenceID": 35, "context": "2) Alternating Direction Method of Multipliers: The ADMM [41] is an algorithm for solving a convex optimization problem represented as min x\u2208Rn1 ,z\u2208Rn2 f(x) + g(z) s.", "startOffset": 57, "endOffset": 61}, {"referenceID": 35, "context": "We recall a convergence analysis of the ADMM by Eskstein and Bertsekas [41].", "startOffset": 71, "endOffset": 75}, {"referenceID": 35, "context": "Fact 1 (Convergence of the ADMM [41]): Consider Prob.", "startOffset": 32, "endOffset": 36}, {"referenceID": 10, "context": "Texture Image Inpainting [12], [13] The objective with this application is to recover a missing region (as shown in the later Fig.", "startOffset": 25, "endOffset": 29}, {"referenceID": 11, "context": "Texture Image Inpainting [12], [13] The objective with this application is to recover a missing region (as shown in the later Fig.", "startOffset": 31, "endOffset": 35}, {"referenceID": 0, "context": "Additionally, the set of a normalized dynamic range constraint is defined as D :={x :=[xi] i=1| xi\u2208 [0, 1]}.", "startOffset": 100, "endOffset": 106}, {"referenceID": 12, "context": "Background Modeling of Video [14]\u2013[18] The objective with this application is to divide a video sequence into background and object sequences (as shown in Fig.", "startOffset": 29, "endOffset": 33}, {"referenceID": 15, "context": "Background Modeling of Video [14]\u2013[18] The objective with this application is to divide a video sequence into background and object sequences (as shown in Fig.", "startOffset": 34, "endOffset": 38}, {"referenceID": 22, "context": "Existing method (see Section V-F for the explanation) Used algorithms Exact PSVD FRSVS [25] NSVS [26] FSVS [27] Total computation time (s) 1935.", "startOffset": 87, "endOffset": 91}, {"referenceID": 23, "context": "Existing method (see Section V-F for the explanation) Used algorithms Exact PSVD FRSVS [25] NSVS [26] FSVS [27] Total computation time (s) 1935.", "startOffset": 97, "endOffset": 101}, {"referenceID": 24, "context": "Existing method (see Section V-F for the explanation) Used algorithms Exact PSVD FRSVS [25] NSVS [26] FSVS [27] Total computation time (s) 1935.", "startOffset": 107, "endOffset": 111}, {"referenceID": 27, "context": "1) Effects of Selected Transform Matrix: We compared the DWT with the DCT and the block diagonal forms of the DCT (block DCT) [32] whose block size was 8\u00d7 8 for indicating the differences among chosen transform matrices T in (22).", "startOffset": 126, "endOffset": 130}, {"referenceID": 22, "context": "Comparison with Existing Methods As previously mentioned, there are several fast singular value shrinkage methods [25]\u2013[27].", "startOffset": 114, "endOffset": 118}, {"referenceID": 24, "context": "Comparison with Existing Methods As previously mentioned, there are several fast singular value shrinkage methods [25]\u2013[27].", "startOffset": 119, "endOffset": 123}, {"referenceID": 22, "context": "To illustrate the advantage of our method, we compared it with the singular value shrinkage by using the exact PSVD, fast randomized singular value shrinkage (FRSVS) [25], singular value shrinkage by using the Nystr\u00f6m method (NSVS) [26], and the fast singular value shrinkage without the exact SVD (FSVS) [27].", "startOffset": 166, "endOffset": 170}, {"referenceID": 23, "context": "To illustrate the advantage of our method, we compared it with the singular value shrinkage by using the exact PSVD, fast randomized singular value shrinkage (FRSVS) [25], singular value shrinkage by using the Nystr\u00f6m method (NSVS) [26], and the fast singular value shrinkage without the exact SVD (FSVS) [27].", "startOffset": 232, "endOffset": 236}, {"referenceID": 24, "context": "To illustrate the advantage of our method, we compared it with the singular value shrinkage by using the exact PSVD, fast randomized singular value shrinkage (FRSVS) [25], singular value shrinkage by using the Nystr\u00f6m method (NSVS) [26], and the fast singular value shrinkage without the exact SVD (FSVS) [27].", "startOffset": 305, "endOffset": 309}, {"referenceID": 22, "context": "All preferences of the FRSVS [25] was determined in the original code12 provided by the authors.", "startOffset": 29, "endOffset": 33}, {"referenceID": 24, "context": "preferences used in the FSVS were directly used as suggested in [27].", "startOffset": 64, "endOffset": 68}, {"referenceID": 0, "context": "Practically, \u03a0I(\u00b7) is given by maintaining the assigned pixels, and \u03a0D(\u00b7) is calculated by pushing the entries outside [0, 1] into 0 or 1 (the nearest is chosen).", "startOffset": 119, "endOffset": 125}], "year": 2017, "abstractText": "We propose an approximation method for thresholding of singular values using Chebyshev polynomial approximation (CPA). Many signal processing problems require iterative application of singular value decomposition (SVD) for minimizing the rank of a given data matrix with other cost functions and/or constraints, which is called matrix rank minimization. In matrix rank minimization, singular values of a matrix are shrunk by hard-thresholding, softthresholding, or weighted soft-thresholding. However, the computational cost of SVD is generally too expensive to handle high dimensional signals such as images; hence, in this case, matrix rank minimization requires enormous computation time. In this paper, we leverage CPA to (approximately) manipulate singular values without computing singular values and vectors. The thresholding of singular values is expressed by a multiplication of certain matrices, which is derived from a characteristic of CPA. The multiplication is also efficiently computed using the sparsity of signals. As a result, the computational cost is significantly reduced. Experimental results suggest the effectiveness of our method through several image processing applications based on matrix rank minimization with nuclear norm relaxation in terms of computation time and approximation precision.", "creator": "LaTeX with hyperref package"}}}