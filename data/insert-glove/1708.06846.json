{"id": "1708.06846", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Aug-2017", "title": "On Relaxing Determinism in Arithmetic Circuits", "abstract": "The yuhang past decade reng has cannibalism seen a significant interest in intendant learning frostburg tractable logoi probabilistic huneck representations. Arithmetic circuits (ACs) 5.10 were donmez among bremian the first proposed 56sec tractable representations, sabdarat with pembrokeshire some issacharoff subsequent wtvf representations fafnir being instances of ACs 0.475 with bumpkin weaker gourmets or stronger properties. anatolia In this zamparelli paper, we mewing provide andorian a gonadotropin-releasing formal vara\u017edin basis 2,749 under which variants on 121.85 ACs campaigner can spartiates be 135,000 compared, underaged and steinkraus where the midwood precise roles and semantics argenteus of their various properties can meulaboh be made shansi more transparent. This allows j.r us 61.50 to pips place turistico some recent developments on ACs keen in leaseholds a owed clearer perspective cazeneuve and to awoniyi also derive new hede results for ACs. lauran This farum includes acerbity an lambesis exponential telic separation between ritch ACs denktas with mewshaw and copra without determinism; completeness mench and incompleteness 140.8 results; arvidson and film-maker tractability 80.19 results (crocodylus or 73.07 lack ensuring thereof) bonanza when phm computing tamsyn most probable explanations (MPEs ).", "histories": [["v1", "Tue, 22 Aug 2017 23:02:11 GMT  (254kb)", "http://arxiv.org/abs/1708.06846v1", "In Proceedings of the Thirty-fourth International Conference on Machine Learning (ICML)"]], "COMMENTS": "In Proceedings of the Thirty-fourth International Conference on Machine Learning (ICML)", "reviews": [], "SUBJECTS": "cs.AI cs.LG", "authors": ["arthur choi", "adnan darwiche"], "accepted": true, "id": "1708.06846"}, "pdf": {"name": "1708.06846.pdf", "metadata": {"source": "META", "title": "On Relaxing Determinism in Arithmetic Circuits", "authors": ["Arthur Choi", "Adnan Darwiche"], "emails": ["<aychoi@cs.ucla.edu>,", "<darwiche@cs.ucla.edu>."], "sections": [{"heading": null, "text": "ar X\niv :1\n70 8.\n06 84\n6v 1\n[ cs\n.A I]\n2 2\nA ug\n2 01\n7\nest in learning tractable probabilistic representations. Arithmetic circuits (ACs) were among the first proposed tractable representations, with some subsequent representations being instances of ACs with weaker or stronger properties. In this paper, we provide a formal basis under which variants on ACs can be compared, and where the precise roles and semantics of their various properties can be made more transparent. This allows us to place some recent developments on ACs in a clearer perspective and to also derive new results for ACs. This includes an exponential separation between ACs with and without determinism; completeness and incompleteness results; and tractability results (or lack thereof) when computing most probable explanations (MPEs)."}, {"heading": "1. Introduction", "text": "Arithmetic circuits (ACs) were introduced into the AI literature more than fifteen years ago as a tractable representation of probability distributions. The original work on these circuits proposed the compilation of such circuits from Bayesian networks, while identifying and assuming three circuit properties, called determinism, decomposability and smoothness (Darwiche, 2001a;b; 2003). Since then, the literature on using arithmetic circuits for probabilistic reasoning has seen two key developments. The first is the proposalmade by (Lowd & Domingos, 2008) to learn these circuits directly from data\u2014instead of just compiling them from models\u2014therefore creating two distinct construction modes for these circuits. The second development, reported by (Poon & Domingos, 2011), amounted to proposing a class of arithmetic circuits that does not satisfy determinism, under the name of sum-product networks (SPNs).\n1University of California, Los Angeles, California, USA. Correspondence to: Arthur Choi <aychoi@cs.ucla.edu>, Adnan Darwiche <darwiche@cs.ucla.edu>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\nAn examination of the literature surrounding arithmetic circuits and their variants suggests that the implications of relaxing determinism are not very well understood, even leading to conflicting claims in some cases. The treatment of smoothness has also not been very consistent as far as its necessity for certain operations on arithmetic circuits, and the complexity of enforcing it. Our goal in this paper is to address some of these issues by providing a systematic and formal treatment of arithmetic circuits, while focusing on the precise roles and semantics of their various properties and the implications of relaxing determinism.\nWe make several contributions in this paper. We start by reconstructing the original definition of arithmetic circuits given in (Darwiche, 2002; 2003), while assuming that these circuits represent arbitrary factors, instead of just distributions induced by Bayesian networks (a particular class of factors). We then provide definitions for decomposability, smoothness and determinism in the context of this reconstruction, while isolating precisely the role that each one of these properties play. Some of what we report on this has already been observed in the literature, but we provide alternate or more formal proofs for the sake of a systematic and inclusive treatment. We also derive new results. The first of these is a separation theorem showing that relaxing determinism can lead to exponentially smaller arithmetic circuits, while preserving the ability of these circuits to compute marginals in linear time. This begs the question of whether anything is lost from relaxing determinism. On this front, we highlight a finding that has already been reported in the literature and introduce new ones. In particular, we provide an expanded proof for the observation that relaxing determinism deprives arithmetic circuits from the ability to compute MPE in linear time. We also add a new result showing that enforcing decomposability has the power of solving MPE, even though the MPE query is not tractable for decomposable circuits. Moreover, we show that relaxing determinism leads to a type of incompleteness that we call parametric incompleteness, with important implications on the compilability of circuits from models. Our final contribution is a formal correctness proof of the linear-time MPE algorithm, originally proposed by (Chan & Darwiche, 2006), but with respect to the reconstructed definition of arithmetic circuits satisfying decomposability, determinism and smoothness.\nThis paper is structured as follows. We reconstruct the definition of arithmetic circuits as given by (Darwiche, 2002; 2003) in Section 2, but with respect to factors instead of distributions (of Bayesian networks). We then provide a new treatment of decomposability and smoothness in Section 3, followed by a new treatment of determinism in Section 4. We finally focus on the relaxation of determinism in Section 5, where we provide a new set of results and insights."}, {"heading": "2. Arithmetic Circuits", "text": "Capital letters (X) denote variables and lower-case letters (x) denote their values. Bold capital letters (X) denote sets of variables and bold lower-case letters (x) denote their instantiations. Value x is compatible with instantiation y iff y assigns value x toX or does not assign any value toX .\nDefinition 1 A factor f(X) over variables X maps each instantiation x of variables X into a non-negative number f(x). The factor is a distribution when \u2211\nx f(x) = 1.\nThe classical, tabular representation of a factor f(X) is clearly exponential in the number of variables X, yet it allows one to answer key probabilistic queries efficiently. The interest here is in a more compact representation of these factors, using arithmetic circuits, while preserving the ability to answer some of these queries efficiently. We focus on the following queries, all with respect to a factor f(X), with its variablesX partitioned into setsY and Z:\n\u2022 Computing the value of factor f(X) at instantiation y, defined as f(y) = \u2211 z f(y, z) and called a marginal\nin this paper. This corresponds to the probability of evidence y when the factor is a distribution.\n\u2022 Computing the MPE of factor f(X), defined as argmaxx f(x). This corresponds to the most likely instantiation when the factor is a distribution.\n\u2022 Computing the MAP over variables Y, defined as argmaxy \u2211 z f(y, z). This is the most likely state of\nvariablesY when the factor is a distribution.\nFor Bayesian networks (interpreted as factors), the decision variants of the MPE, marginals, and MAP problems are, respectively,NP-complete (Shimony, 1994), PP-complete (Roth, 1996), and NPPP-complete (Park & Darwiche, 2004); see also (Darwiche, 2009). Hence, computing marginals is more difficult than computing MPE\u2014an observation that will be quite relevant later.\nWe also need to define the projection of factor f(X) on variables Y as the factor g(Y) with g(y) = \u2211 z f(y, z).\nThis projection will be denoted by \u2211\nZ f(X).\nWe next define an arithmetic circuit over discrete variables X, as utilized in (Darwiche, 2002; 2003) to represent distri-\nbutions, except that we will utilize it to represent factors. A key observation here is that the circuit inputs are not variables X, but indicator variables that are derived from the values of variablesX (Darwiche, 2002; 2003).\nDefinition 2 An arithmetic circuit AC(X) over variables X is a rooted DAG whose internal nodes are labeled with + or \u2217 and whose leaf nodes are labeled with either indicator variables \u03bbx or non-negative parameters \u03b8. Here, x is the value of some variableX inX. The value of the circuit at instantiation y, where Y \u2286 X, is denoted AC(y) and obtained by assigning indicators \u03bbx the value 1 if x is compatible with instantiation y and 0 otherwise, then evaluating the circuit in the standard way (in linear time).\nThe following definition makes a distinction that has not been made explicit in the literature as far as we know, but is critical for a clear semantics of arithmetic circuits.\nDefinition 3 The circuit AC(X) computes factor f(X) iff AC(x) = f(x) for each instantiation x of variables X. The circuit computes the factor marginals iff AC(y) = f(y) for each instantiation y of everyY \u2286 X.\nThe notion of \u201ccomputes a factor\u201d constrains the value of an arithmetic circuit under a strict subset of its inputs (i.e., those corresponding to complete instantiations). However, the notion of \u201ccomputes marginals\u201d constrains its value under every input. Hence, two arithmetic circuits that represent distinct functions (over indicator variables) may still compute the same factor. Consider an arithmetic circuit that computes a factor f(X, . . .), where X has values x and x\u0304. Replacing \u03bbx + \u03bbx\u0304 with 1 in this circuit preserves its ability to compute the factor since \u03bbx+\u03bbx\u0304 = 1 for every input that is relevant to computing the factor. This replacement, however, will change the function represented by the circuit and its ability to compute the factor marginals.\nCorollary 1 An arithmetic circuit that computes the marginals of a factor also computes the factor. However, an arithmetic circuit that computes a factor does not necessarily compute its marginals.\nConsider the following arithmetic circuit which computes the factor in Figure 1(c):\n[\u03bba + 2\u03bba\u0304][3\u03bba\u03bbb + 4\u03bba\u03bbb\u0304 + 5\u03bba\u0304\u03bbb + 6\u03bba\u0304\u03bbb\u0304].\nThis circuit does not compute the factor marginals. Moreover, this circuit is the product of two circuits, one computing factor f1, the other computing factor f2, as in Figure 1.\nTo get further insights into the notion of \u201ccomputing marginals,\u201d we appeal to the notion of a network polynomial (Darwiche, 2003), while lifting it to factors.\nDefinition 4 The polynomial of factor f(X) is defined as:\n\u2211\nx\nf(x) \u220f\nx\u223cx\n\u03bbx,\nwhere x \u223c x means that the value x of variable X \u2208 X is compatible with instantiation x of variablesX.\nThe polynomial of factor f(A,B) in Figure 1(c) is 3\u03bba\u03bbb+ 4\u03bba\u03bbb\u0304+10\u03bba\u0304\u03bbb+12\u03bba\u0304\u03bbb\u0304. The polynomial of factor f(X) corresponds to the simplest circuit that computes the factor marginals. It is a two-level circuit though, which has an exponential size. The interest, however, is in deeper circuits that may not be exponentially sized. We later discuss circuit properties that allows us to achieve this, sometimes.\nOne can construct an arithmetic circuit that computes the distribution of a Bayesian network or the partition function of a Markov network in time and space that are linear in the size of these models. Each of these models correspond to a set of factors f1, . . . , fn, with the model representing the product of these factors. We can construct a circuit that computes each factor as given in Definition 4, then simply combine these circuits using a multiplication node. The result will compute the factor f = f1 . . . fn but it will not necessarily compute its marginals. We next show that if we enforce the properties of decomposability and smoothness on such a circuit, while maintaining its ability to compute the factor f , the resulting circuit will also compute the factor marginals. Therefore, these two properties turn the circuit into a tractable representation of the factor, allowing one to compute marginals by simply evaluating the circuit as in Definition 2 (in time linear in the circuit size)."}, {"heading": "3. Decomposability and Smoothness", "text": "The property of decomposability (Darwiche, 2001b) was used for tractable probabilistic reasoning in (Darwiche, 2003) by compiling Bayesian networks into arithmetic circuits that are guaranteed to be decomposable. This property was also enforced by the algorithm proposed in (Lowd & Domingos, 2008) for learning arithmetic circuits.\nDefinition 5 (Decomposability) Let n be a node in an arithmetic circuit AC(X). The variables of n, denoted vars(n), are all variables X \u2208 X with some indicator \u03bbx appearing at or under node n. An arithmetic circuit is decomposable iff every pair of children c1 and c2 of a \u2217-node satisfies vars(c1) \u2229 vars(c2) = \u2205.\nThe property of smoothness (Darwiche, 2001b) was also used for probabilistic reasoning in (Darwiche, 2003) by compiling circuits that are smooth. It was also enforced by the learning algorithm of (Lowd & Domingos, 2008). This property was later called completeness in the works on SPNs, initially in (Poon & Domingos, 2011).\nDefinition 6 (Smoothness) An arithmetic circuit AC(X) is smooth iff (1) it contains at least one indicator for each variable in X, and (2) for every child c of +-node n, we have vars(n) = vars(c).\nConsider a factor f(X), where variable X is binary and f(x) = f(x\u0304) = \u03b8. A circuit that consists of the single parameter \u03b8 will compute this factor but is not smooth. The circuit \u03b8\u03bbx + \u03b8\u03bbx\u0304 computes this factor and is smooth.\nConsider a variable X with values x1, . . . , xm. Multiplying a circuit node by \u03bbx1 + . . .+\u03bbxm preserves the circuit\u2019s ability to compute a given factor since \u03bbx1 + . . .+\u03bbxm = 1 under any circuit input that is relevant to this computation. One can use this technique to ensure the smoothness of any circuit, while incurring only a polynomial overhead.1 Hence, contrary to decomposability and determinism, enforcing smoothness is not difficult computationally, yet it is necessary for an arithmetic circuit to compute marginals as we discuss later. We also state the following observation, used extensively in inductive proofs that we utilize later.\nLemma 1 Consider a decomposable and smooth arithmetic circuit AC(X) and define Xn = vars(n) for each circuit node n. Each arithmetic circuit AC(Xn) rooted at node n is also decomposable and smooth.\nA main insight in this paper is the use of subcircuits, first introduced in (Chan & Darwiche, 2006) for a different pur-\n1(Darwiche, 2001a) shows how to smooth an NNF circuit in O(mn) space and time, where n is the size of the circuit and m is the number of variables (the method can be adapted to ACs).\npose. They were also adopted in (Dennis & Ventura, 2015; Zhao et al., 2016) to motivate SPN learning algorithms.\nDefinition 7 (Subcircuits) A complete subcircuit \u03b1 of an arithmetic circuit is obtained by traversing the circuit topdown, while choosing one child of each visited +-node and all children of each visited \u2217-node. The term of \u03b1 is the set of values x for which indicator \u03bbx appears in \u03b1. The coefficient of \u03b1 is the product of all parameters in \u03b1.\nThe circuit 2\u2217\u03bbx+1\u2217\u03bbx\u0304+3\u2217\u03bbx computes factor f(X)with f(x) = 5 and f(x\u0304) = 1. It is decomposable, smooth and has three complete subcircuits, with (x, 2), (x\u0304, 1) and (x, 3) as their term/coefficient pairs. Note that two subcircuits may have the same term but different coefficients.\nThe following lemma and its proof reveal the precise roles of decomposability and smoothness. Given decomposability, the term of a complete subcircuit will not contain conflicting values for any variable. Given smoothness, the term must contain a value for each variable.\nLemma 2 Let \u03b1 be a complete subcircuit of an arithmetic circuitAC(X) that is decomposable and smooth. The term of subcircuit \u03b1 must be an instantiation of variablesX.\nProof Given smoothness, every variable X \u2208 X must have at least one indicator\u03bbx in \u03b1 (no variables are dropped from the circuit if we keep only a single child of a+-node). Given decomposability, each variableX \u2208 X must have at most one indicator \u03bbx in \u03b1. Hence, \u03b1 will contain exactly one indicator for each variable X \u2208 X. The term of \u03b1 is therefore an instantiation x of variableX.\nA complete subcircuit with term x will be called an x-subcircuit. Figure 2 depicts an ab-subcircuit (in red) and an a\u0304b-subcircuit (in blue).\nIn a decomposable and smooth circuit AC(X), every complete subcircuit is an x-subcircuit for some instantiation x of variables X. The circuit can then be treated as a collection of x-subcircuits (multiple subcircuits can have the same term). Our proofs utilize this implication heavily.\nDefinition 8 An input \u039b for arithmetic circuit AC(X) assigns a value in {0, 1} to each circuit indicator \u03bbx. An instantiation x is compatible with a circuit input \u039b, denoted x \u223c \u039b, iff the input sets \u03bbx = 1 when x sets X=x.\nA circuit input can be viewed as the set of instantiations compatible with it. Consider the binary variables X = {A,B,C} for an example. The circuit input\n\u039b = {\u03bba = 1, \u03bba\u0304 = 0, \u03bbb = 1, \u03bbb\u0304 = 0, \u03bbc = 1, \u03bbc\u0304 = 0}\nhas a single compatible instantiation abc. The input\n\u039b = {\u03bba = 0, \u03bba\u0304 = 0, \u03bbb = 1, \u03bbb\u0304 = 0, \u03bbc = 1, \u03bbc\u0304 = 0}\nhas no compatible instantiations, and the circuit input:\n\u039b = {\u03bba = 1, \u03bba\u0304 = 1, \u03bbb = 1, \u03bbb\u0304 = 0, \u03bbc = 1, \u03bbc\u0304 = 0}\nhas two compatible instantiations abc and a\u0304bc. In this latter case, evaluating the circuit at instantiation bc, as discussed in Definition 2, leads to evaluating it under input \u039b.\nThe following lemma brings us one step away from showing why decomposability and smoothness force an AC that computes a factor to also compute the factor marginals.\nLemma 3 Given a decomposable and smooth arithmetic circuit, let \u03b81, . . . , \u03b8m be the coefficients of complete subcircuits whose terms are compatible with circuit input \u039b. The circuit will evaluate to \u03b81 + . . .+ \u03b8m under input \u039b.\nProof Given Lemma 1, we will use induction on the circuit structure. The base case is a leaf circuit node (indicator or parameter). The lemma holds trivially in this case. The inductive case is when n is an internal circuit node with children c1, . . . , ck. Suppose the lemma hold for these children. If n is a \u2217-node, the lemma holds for n by decomposability (the complete subcircuits of n correspond to the Cartesian product of complete subcircuits for its children). If n is a +-node, the lemma holds for n since the complete subcircuits of n correspond to the union of complete subcircuits of its children.\nCorollary 2 Let \u03b81, . . . , \u03b8m be the coefficients of xsubcircuits in a decomposable and smooth arithmetic circuit AC(X). We then have AC(x) = \u03b81 + . . .+ \u03b8m.\nWe are now ready for the key result we are after.\nTheorem 1 Consider an arithmetic circuit AC(X) that computes factor f(X). If the circuit is decomposable and smooth, then it also computes the marginals of factor f(X).\nProof Consider an instantiation y of some variables Y \u2286 X, let x1, . . . ,xm be all instantiations of variables X that are compatible with y, and let \u039b be the circuit input corresponding to these instantiations. Let \u03b8i be the sum of coefficients of all xi-subcircuits. Since the circuit computes factor f(X), we haveAC(xi) = f(xi) and, hence, f(xi) = \u03b8i by Corollary 2. By Lemma 3, the circuit evaluates to \u03b81+. . .+\u03b8m under input\u039b, which is f(x1)+. . .+f(xm) = f(y). Hence, the circuit computes the factor marginals.\nThis theorem justifies the standard algorithm for computing marginals on arithmetic circuits, in linear time, as proposed in (Darwiche, 2003)\u2014that is, by simply evaluating the circuit as in Definition 2. In that work, however, the property of determinism was also assumed (discussed in the next section). Determinism is not necessary though for computing marginals as initially observed in (Poon & Domingos,\n2011).2 Our proof above uses different tools than those used in (Poon & Domingos, 2011) and is set in a more general context. Moreover, these tools and associated lemmas turn out to be essential for the rest of our treatment on the role of determinism, which we discuss in the next section.\nAs for the necessity of smoothness, consider the circuits AC1(A,B) = \u03bba\u03bbb + \u03bba\u0304 and AC2(A,B) = \u03bba\u03bbb + \u03bba\u0304(\u03bbb + \u03bbb\u0304). Both circuits are decomposable and compute the same factor: f(a, b) = 1, f(a, b\u0304) = 0, f(a\u0304, b) = 1 and f(a\u0304, b\u0304) = 1. However, circuitAC1 is not smooth while AC2 is smooth. Only AC2 is guaranteed to compute factor marginals by Theorem 1. For example, evaluating AC1 at instantiation a\u0304 gives AC1(a\u0304) = 0 \u00b7 1 + 1 = 1 6= f(a\u0304) = 2 according to Definition 2, while AC2(a\u0304) = f(a\u0304).3\nBefore we discuss determinism, we note that decomposability and determinism were exploited recently in tractable, propositional reasoning within a semi-ring setting; initially in (Kimmig et al., 2012; 2016), then followed by (Friesen & Domingos, 2016)."}, {"heading": "4. Determinism", "text": "The property of determinism (Darwiche, 2001a) was employed for probabilistic reasoning in (Darwiche, 2003) by compiling Bayesian networks into arithmetic circuits that are deterministic. It was also enforced by the algorithm of (Lowd & Domingos, 2008) for learning arithmetic circuits. The property was later called selectivity in the works on SPNs, initially in (Peharz et al., 2014).\nUsing the terminology of our current formulation, the original definition of determinism would amount to this: An arithmetic circuit is deterministic iff the terms of each two of its complete subcircuits are conflicting. We will adopt a weaker definition, which allows conflicting subcircuits as long as at most one of them has a non-zero coefficient.\nDefinition 9 (Determinism) An arithmetic circuitAC(X) is deterministic iff each +-node has at most one non-zero input when the circuit is evaluated under any instantiation x of variablesX.\nAs mentioned earlier, the original proposal for using arith-\n2(Poon & Domingos, 2011) introduced sum-product networks (SPNs), which are equivalent to decomposable and smooth ACs. More precisely, each can be converted into the other in linear time and space (Rooshenas & Lowd, 2014). The conversion is straightforward and amounts to adjusting for graphical notation.\n3Theorem 1 of (Friesen & Domingos, 2016) implies that factor marginals can be computed in time linear in the size of an arithmetic circuit, when the circuit is decomposable but not smooth. This complexity is not justified (but assumed) in the proof of the theorem. In fact, we are unaware of any justified algorithm that attains this complexity without smoothness; see also Footnote 1.\nmetic circuits as a tractable representation of probability distributions (Darwiche, 2003) ensured that these circuits are deterministic, in addition to being decomposable and smooth. Moreover, several methods were proposed in (Darwiche, 2003) for compiling Bayesian networks into ACs with these properties. One of these methods ensures that the size of the AC is proportional to the size of a jointree for the network. Another method yields circuits that can sometimes be exponentially smaller, and is implemented in the publicly available ace system (Chavira & Darwiche, 2008); see also (Darwiche et al., 2008) for an empirical evaluation of this system in one of the UAI inference evaluations.\nWhile determinism is not needed to compute factor marginals, it is needed for the correctness of the linear-time MPE algorithm of (Chan & Darwiche, 2006). This was missed in some earlier works (Poon & Domingos, 2011), which used this algorithm on non-deterministic ACs (i.e., SPNs) without realizing that it is no longer correct. This oversight was noticed in later works (Peharz et al., 2016; Maua\u0301 & de Campos, 2017).4 We next reveal the reason why computingMPE without determinism is hard. Later in the section, we reveal the reason why the MPE algorithm of (Chan & Darwiche, 2006) fails without determinism.\nThe key observation is this. Consider variables X which are partitioned into Y and Z. Given a decomposable and smooth arithmetic circuit AC(X) that computes factor f(X), one can obtain in linear time a decomposable and smooth AC(Y) that computes the projection \u2211 Z f(X). This is achieved by simply setting all indicators \u03bbz to 1; see (Darwiche, 2001b) for the root of this observation. Moreover, an MPE for the projection \u2211\nZ f(X) is a MAP for the original factor f(X). Hence, a polytime MPE algorithm implies a polytimeMAP algorithm on decomposable and smooth ACs. We know, however, that Naive Bayes networks have linear-size decomposable and smooth ACs, while MAP is hard on these networks (de Campos, 2011). Therefore, the existence of a polytime MPE algorithm on such circuits will contradict standard complexity assumptions. These observations can be abstracted into the following lemma, which succinctly and intuitively explains why MPE is not tractable on decomposable and smooth circuits.\nLemma 4 A circuit representation that supports projection and MPE in polytime also supports MAP in polytime.\nNote that deterministic, decomposable and smooth ACs do not support projection in polytime so the above argument\n4(Peharz et al., 2016) proposed a polytime algorithm that converts an SPN into one that is deterministic and smooth (called an augmented SPN), but this new SPN computes a different factor than the one computed by the original SPN. Hence, its MPEs cannot be generally converted into MPEs of the original SPN.\ndoes not apply in this case (setting indicators \u03bbz to 1 will generally destroy determinism).\nMore formally, let AC(X) be a decomposable and smooth arithmetic circuit that computes a factor f(X). For a given value k, consider the decision problems:\n\u2022 D-MPE-AC: Is there an instantiation x where AC(x) > k?\n\u2022 D-MAP-AC: Is there an instantiation y where\u2211 zAC(y, z) > k? (X is partitioned intoY and Z).\nWe now have the following result, whose proof expands the one given in (Peharz et al., 2016) for SPNs based on the above observations; see also (Maua\u0301 & de Campos, 2017) for an in-depth discussion of MPE hardness on SPNs.\nTheorem 2 The problem D-MPE-AC is NP-complete.\nProof Given instantiation x and value k, we can test whether f(x) > k by evaluating the circuitAC in time linear in the size of the circuit. Hence, the problem is in NP. To show NP-hardness, we reduce the (decision) problem of computing (partial) MAP in a naive Bayes network, which is NP-complete (de Campos, 2011), to MPE in a decomposable and smooth arithmetic circuit. Suppose we have a naive Bayes network with a root node X0 and leaf nodes X, and inducing a distribution Pr(X0,X). We can compile this network into a polysize decomposable, deterministic and smooth arithmetic circuit AC0(X0,X) that computes Pr (X0,X), e.g., as in (Chavira & Darwiche, 2008). We can sum-out variableX0 in the circuit AC0(X0,X) by setting the indicators of X0 to one. The resulting circuit AC1(X) is decomposable and smooth, and computes the (marginals of) factor\n\u2211 X0\nPr(X0,X). For a given value k, there exists an instantiation x where AC1(x) > k iff there exists an instantiation x where\n\u2211 x0\nPr(x0,x) > k, which is an NP-complete problem (de Campos, 2011).\nCorollary 3 The problem D-MAP-AC is NP-complete.\nThe following lemma reveals the precise role of determinism, which stands behind the correctness of the linear-time MPE algorithm of (Chan & Darwiche, 2006). It basically shows a one-to-one correspondence between the non-zero rows of the factor computed by a circuit and the complete subcircuits with non-zero coefficients.\nLemma 5 Consider an arithmetic circuit AC(X) that computes factor f(X) and is deterministic, decomposable and smooth (hence, can be viewed as a collection of xsubcircuits). For each instantiation x, we have:\n(a) If the circuit has two distinct x-subcircuits, one of\nthem must have a zero coefficient.\n(b) If f(x) > 0, the circuit contains a unique x-subcircuit with coefficient f(x).\nProof To prove (a), suppose the circuit contains two distinct x-subcircuits \u03b11 and \u03b12 that have non-zero coefficients. We will now establish a contradiction. Since \u03b11 and \u03b12 are distinct, each \u03b1i must include a distinct child ci of some +-node in the circuit. If we evaluate the circuit at instantiation x, both c1 and c2 will have non-zero values. Hence, the circuit cannot be deterministic, which is a contradiction. To prove (b), suppose f(x) > 0 and let \u03b11, . . . , \u03b1m be all x-subcircuits. At most one \u03b1i can have a non-zero coefficient by (a). Since the circuit computes the factor, it must evaluate to f(x) under instantiation x. Hence, exactly one \u03b1i has f(x) as its coefficient.\nLemma 5 allows us to prove the correctness of the MPE algorithm given by (Chan & Darwiche, 2006) under the more general setting we have in this paper. This original algorithm is based on converting a deterministic, decomposable and smooth AC that computes a distribution Pr (X) into a maximizer circuit. Evaluating this circuit under evidence y, as in Definition 2, gives the MPE value argmaxx\u223cy Pr(x).\nAn arithmetic circuitAC(X) is converted into a maximizer circuit, denoted ACmax(X), by replacing every +-node with a max-node. The complete subcircuits of ACmax are defined as in Definition 7, but where exactly one child of each visitedmax-node is selected.\nTheorem 3 Let AC(X) be a deterministic, decomposable and smooth arithmetic circuit that computes a factor f(X) and let ACmax(X) be its maximizer circuit. Then ACmax(y) = maxx\u223cy f(x) forY \u2286 X.\nProof By Lemma 5, there is a one-to-one correspondence between the non-zero rows of factor f(X) and xsubcircuits with non-zero coefficients. Let \u03b81, . . . , \u03b8m be the coefficients of x-subcircuits, where x is compatible with y. Hence, max{\u03b81, . . . , \u03b8m} = maxx\u223cy f(x). That is, the MPE value is a coefficient of some x-subcircuit\u2014 call it an MPE-subcircuit. We will think of the algorithm as composing an MPE-subcircuit in addition to computing its coefficient and show that ACmax(y) = max{\u03b81, . . . , \u03b8m} by induction on the circuit structure (see Lemma 1). The base case trivially holds for leaf circuit nodes (indicators and parameters). Assume n is an internal circuit node and the above equality holds for its children c1, . . . , ck having MPE-subcircuits \u03b1i and coefficient \u03b7i. If n is a \u2217-node, then by decomposability, an MPE-subcircuit for n can be found by joining \u03b11, . . . , \u03b1k with \u03b71 \u2217 . . . \u2217 \u03b7k as its coefficient. If n is a max-node, then by determinism, an MPEsubcircuit for n can be found from the \u03b1i with the largest \u03b7i withmax k i=1 \u03b7i as its coefficient.\nOnce a maximizer circuit is evaluated to \u03b8, one can identify\nan x-subcircuit that has \u03b8 as its coefficient, with x being an MPE instantiation; see (Chan & Darwiche, 2006).5\nWithout determinism, a circuit may have multiple xsubcircuits for a given x, each having a non-zero coefficient. By Corollary 2, the value of x, AC(x) = f(x), is the sum of these coefficients. An MPE algorithm that does not perform this sum cannot be correct.6\nBefore we further discuss the impact of relaxing determinism, we point to a new class of arithmetic circuits, the Probabilistic Sentential Decision Diagram (PSDD) (Kisa et al., 2014), which imposes stronger versions of decomposability and determinism. This enables the multiplication of two ACs in polytime, which is otherwise hard under the standard versions of these properties (Shen et al., 2016)."}, {"heading": "5. The Impact of Relaxing Determinism", "text": "We now consider two new implications of relaxing determinism, one positive and one negative. We also address an apparent paradox: How could a representation (decomposable and smooth ACs) allow the computation of marginals easily (a PP-complete problem), yet not allow the computation of MPE easily (an NP-complete problem)? Recall that the complexity class NP is included in the class PP.\nThe positive implication is that relaxing determinism can lead to exponentially smaller arithmetic circuits.\nTheorem 4 (Separation) There is a family of factors fn(Xn) where (1) there exists a decomposable and smooth arithmetic circuit ACn(Xn) that computes the marginals of fn, with a size polynomial in n; (2) every deterministic, decomposable and smooth circuit that computes the marginals of factor fn must have a size exponential in n.\nProof (Bova et al., 2016) identifies a family of Boolean functions (the Sauerhoff functions) Sn that have decomposable NNFs (DNNFs) with sizes polynomial in n, but where their deterministic DNNFs (d-DNNFs) must have sizes exponential in n. Previously known separations were conditional on the polynomial hierarchy not collapsing (Darwiche & Marquis, 2002), but (Bova et al., 2016) does not make such an assumption (and neither do we).\n5Smoothness is not strictly needed for this algorithm, except that it ensures that a full variable instantiation is returned.\n6This MPE algorithm was used on selective SPNs (equivalent to deterministic and decomposable ACs) in (Peharz et al., 2016). It was also adapted to algebraic model counting (AMC) in (Kimmig et al., 2016) and to Sum-Product Functions (SPFs) in (Friesen & Domingos, 2016). Determinism was not required in (Kimmig et al., 2016). This is sound since AMC problems correspond to Boolean circuits where the weight of an instantiation is a product of literal weights, and is independent of how many times the instantiation appears as a subcircuit.\nLet gn denote a polysize DNNF for function Sn and let ACn denote the polysize decomposable and smooth arithmetic circuit obtained by: replacing the inputs of gn with the corresponding indicator variables, replacing conjunctions and disjunctions by products and sums, respectively, then smoothing if necessary. The resulting arithmetic circuit ACn has a positive value (possibly > 1) on input x iff the original function Sn evaluates to true. We now show that if fn is the factor computed by arithmetic circuitACn, then any deterministic, decomposable and smooth AC that computes fn must have an exponential size.\nLet AC\u2032n be such a circuit. Consider the d-DNNF g \u2032 n obtained by: replacing the indicator variables with the corresponding literals of variables X, replacing products and sums with conjunctions and disjunctions, respectively, and by replacing positive parameters with true and zero parameters with false. Note that g\u2032n(x) is true iff AC \u2032\nn(x) > 0, i.e., a complete subcircuit for g\u2032n evaluates to true iff the corresponding subcircuit forAC\u2032n has a positive coefficient. Hence, ifAC\u2032n had a sub-exponential size, then function Sn would have a sub-exponentially sized d-DNNF, which we know does not exist (Bova et al., 2016).\nWe now get to a newly identified, negative implication of relaxing determinism. It pertains to compiling ACs from probabilistic models and requires the following notion.\nDefinition 10 A set of parameters\u0398 is complete for factor f(X) iff for every instantiation x, the parameter f(x) can be expressed as a product of parameters in \u0398.\nThe parameters of a Bayesian network are complete for its distribution; those of a Markov network are complete for its partition function; and the parameters \u0398 = {0, 1} are complete for Boolean factors: f(X) with f(x) \u2208 {0, 1}.\nWe will write AC(X,\u0398) to denote an arithmetic circuit whose parameters are in \u0398. The following theorem states a key property which is lost when relaxing determinism.\nTheorem 5 (Completeness) Consider factor f(X) and complete parameters\u0398. There must exist an arithmetic circuit AC(X,\u0398) that computes the factor marginals and is deterministic, decomposable and smooth.\nProof Consider the factor polynomial \u2211 x f(x) \u220f\nx\u223cx \u03bbx in Definition 4 and replace each f(x) by a product of parameters from \u0398. The result can be represented by an AC that is deterministic, decomposable and smooth.\nThe standard methods for compiling Bayesian networks, and graphical models more generally, into arithmetic circuits do indeed limit the circuit parameters to those appearing in the model factors. Hence, the compilation process amounts only to finding a (small) circuit structure since\nthe circuit parameters are already predetermined. As mentioned earlier, these methods can yield relatively small circuits for some graphical models with very high treewidth (Chavira & Darwiche, 2008; Darwiche et al., 2008).\nThe above property is lost if one insists on constructing arithmetic circuits that are decomposable and smooth, but not deterministic. This is shown in the following theorem, which refers to dead circuit nodes: ones that appear only in complete subcircuits that have zero coefficients.7\nTheorem 6 (Parametric Incompleteness) Let f(X) be a Boolean factor and \u0398 = {0, 1} (\u0398 is complete for f ). A circuit AC(X,\u0398) cannot compute f(X) if it is decomposable, smooth and free of dead nodes, but not deterministic.\nProof If the AC has no +-node, then it is vacuously deterministic. Otherwise, it has a +-node. Since the circuit is not deterministic, there is a +-node n that violates determinism. This node is included in some complete subcircuit with a non-zero coefficient (otherwise, the node n is dead). Since node n violates determinism, we can find two distinct x-subcircuits, with non-zero coefficients, that differ by the branch selected at node n. Since the circuit computes factor f(X), Lemma 3 implies that the coefficients of these x-subcircuits must add up to f(x) = 1. There must then exist an x-subcircuit whose coefficient is in (0, 1), exclusive, i.e., the circuit has a parameter not in {0, 1}.\nIn other words, if a decomposable and smooth circuit AC(X, {0, 1}) computes the marginals of a Boolean factor, it must also be non-trivially deterministic. This result has a major implication on compiling probabilistic graphical models into ACs that are not deterministic. That is, one cannot generally restrict the circuit parameters to those appearing in the model, otherwise a circuit may not exist.\nTherefore, while relaxing determinism can lead to exponentially smaller circuits, finding these circuits is nowmore involved as it may require searching for parameters. This demands new techniques as all techniques we are aware of for compiling models into deterministic circuits assume that the circuit parameters come from model parameters.\nOur last contribution relates to the following apparent paradox. Suppose we have a set of factors f1(X1), . . . , fn(Xn), representing a probabilistic graphical model that has a corresponding joint factor f = f1 \u00b7 \u00b7 \u00b7 fn. Consider now the following decision problems, over such probabilistic graphicalmodels, which correspond to computing the MPE and marginals:\n7Dead nodes can be replaced by the constant zero without changing the factor computed by the circuit. One can relax determinism trivially by adding dead nodes, but that does not help as far as obtaining smaller circuits.\n\u2022 D-MPE: Is there an instantiation x where f(x) > k?\n\u2022 D-PR: Is \u2211\nx f(x) > k?\nD-MPE is NP-complete, whereas D-PR is PP-complete. Moreover, the complexity class PP includes NP. Yet, decomposable and smooth ACs allow one to compute marginals in linear time, while computing MPE, which is no harder, is hard on these circuits!\nTo resolve this apparent paradox, one must observe the sometimes subtle distinction between a representation and the computation needed to produce that representation. The representation here is decomposable and smooth ACs, and the computation is the algorithm used to compile a graphical model into this representation. While the representation itself does not facilitate the computation of MPE, the compilation algorithm must be sufficient to compute the MPE query without additional complexity (beyond polynomial). To formalize this, we need the following lemma.\nLemma 6 D-MPE can be reduced to D-PR.\nWe now have the following result, which implies that a polytime compilation algorithm for decomposable and smooth ACs can be used as a sub-routine for a polytime algorithm for computingMPEs (which we do not expect to exist, under typical complexity theoretic assumptions).\nTheorem 7 Consider an algorithm \u039e that takes a set of factors f1(X1), . . . , fn(Xn) as input and returns a decomposable and smooth arithmetic circuit that computes the marginals of factor f = f1 \u00b7 \u00b7 \u00b7 fn. Let s be the size of input factors and let O(t(s)) be the time complexity of algorithm \u039e. One can compute the MPE of factor f in time O(t(poly(s))).\nThese findings highlight an interesting property of decomposable and smooth ACs. They \u201cstore\u201d the results to an exponential number of marginal queries, where each result can be retrieved by a simple traversal of the circuit. Yet, they do not \u201cstore\u201d the answers to MPE queries, even though these queries are easier. The implication of this can be seen from two angles, depending on whether these circuits are compiled frommodels or learned from data. In the former case, the compilation algorithm is readily available to answer MPE queries, but at the cost of invoking this algorithm for each query. In the latter case, however, answering MPE queries remains a challenge. Hence, learning circuits that are not deterministic needs to yield an additional benefit that compensates for this loss in tractability. This could be a simpler learning algorithm; a smaller learned circuit; or a learned circuit whose factor is superior from a statistical learning viewpoint."}, {"heading": "Acknowledgements", "text": "This work has been partially supported by NSF grant #IIS1514253, ONR grant #N00014-15-1-2339 and DARPA XAI grant #N66001-17-2-4032. We thank YooJung Choi, Umut Oztok, Yujia Shen, and Guy Van den Broeck for comments and discussions on this paper."}, {"heading": "A. Proofs", "text": "Proof of Corollary 3 Given an instantiation y and value k, we can test whether \u2211\nzAC(y, z) > k, by evaluating the circuit AC in time linear in the size of the circuit. Hence, the problem is in NP. To show the problem is NP-hard, we reduce the (decision) problem of computing (partial) MAP in a naive Bayes network, as in the proof of Theorem 2.\nProof of Lemma 6. We first reduce D-MPE to satisfiability on a CNF (this is essentially an instance of Cook\u2019s theorem). Satisfying assignments of the CNF correspond to solutions of the D-MPE query, which we can count using a D-PR query.\nFirst, we construct a Boolean circuit that takes inputs x, and outputs true if f(x) > k and false otherwise. We construct a (multiplexer) circuit for each factor fi(Xi), which has inputs xi and outputs a bitstring yi representing a bit encoding of the value fi(xi) (which we assume are rational values). We then construct a circuit that represents a multiplier, which takes as input the bitstrings yi and outputs another bitstring z representing the product of fi(xi). Finally, we have another circuit that takes the bitstring z as input, and outputs true if this bitstring represents a value that is greater than k, and false otherwise. Hence, the output of this circuit is true iff f(x) > k. Each one of the constructed circuits has size polynomial in the size of the inputs, i.e., the aggregate size of the factors and the number of bits needed to represent their values.\nWe can reduce this circuit to a CNF by adding auxiliary variablesY, using one new variable for the output of each gate, i.e., we reduce circuit satisfiability to 3-SAT; see, e.g., (Kleinberg & Tardos, 2006). This results in a set of Boolean factors g1, . . . , gm. If g = g1 \u00b7 \u00b7 \u00b7 gm, then g(x) =\u2211 y g(x,y) > 0 iff f(x) > k, and \u2211 x,y g(x,y) > 0 iff there exists an input x where f(x) > k.\nProof of Theorem 7. Given factors f1, . . . , fn of size s, we first construct a set of factors g1, . . . , gm of size poly(s), as in Lemma 6. We invoke algorithm \u039e on factors g1, . . . , gm, obtaining a decomposable and smooth arithmetic circuit g representing g1 \u00b7 \u00b7 \u00b7 gm in time O(t(poly(s))). The size of g is also O(t(poly(s))) (the size of the circuit cannot be larger than the time needed to construct it). The same amount of time is required to evaluate the marginal of g, hence the overall time to compute\nthe MPE of factor f is O(t(poly(s)))."}], "references": [{"title": "Knowledge compilation meets communication complexity", "author": ["Bova", "Simone", "Capelli", "Florent", "Mengel", "Stefan", "Slivovsky", "Friedrich"], "venue": "In Proceedings of the Twenty-Fifth International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "Bova et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Bova et al\\.", "year": 2016}, {"title": "On the robustness of most probable explanations", "author": ["Chan", "Hei", "Darwiche", "Adnan"], "venue": "In Proceedings of the 22nd Conference in Uncertainty in Artificial Intelligence (UAI),", "citeRegEx": "Chan et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Chan et al\\.", "year": 2006}, {"title": "On probabilistic inference by weighted model counting", "author": ["Chavira", "Mark", "Darwiche", "Adnan"], "venue": "Artificial Intelligence,", "citeRegEx": "Chavira et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Chavira et al\\.", "year": 2008}, {"title": "On the tractable counting of theory models and its application to truth maintenance and belief revision", "author": ["Darwiche", "Adnan"], "venue": "Journal of Applied Non-Classical Logics,", "citeRegEx": "Darwiche and Adnan.,? \\Q2001\\E", "shortCiteRegEx": "Darwiche and Adnan.", "year": 2001}, {"title": "Decomposable negation normal form", "author": ["Darwiche", "Adnan"], "venue": "Journal of the ACM,", "citeRegEx": "Darwiche and Adnan.,? \\Q2001\\E", "shortCiteRegEx": "Darwiche and Adnan.", "year": 2001}, {"title": "A logical approach to factoring belief networks", "author": ["Darwiche", "Adnan"], "venue": "In Proceedings of KR,", "citeRegEx": "Darwiche and Adnan.,? \\Q2002\\E", "shortCiteRegEx": "Darwiche and Adnan.", "year": 2002}, {"title": "A differential approach to inference in Bayesian networks", "author": ["Darwiche", "Adnan"], "venue": "J. ACM,", "citeRegEx": "Darwiche and Adnan.,? \\Q2003\\E", "shortCiteRegEx": "Darwiche and Adnan.", "year": 2003}, {"title": "Modeling and Reasoning with Bayesian Networks", "author": ["Darwiche", "Adnan"], "venue": null, "citeRegEx": "Darwiche and Adnan.,? \\Q2009\\E", "shortCiteRegEx": "Darwiche and Adnan.", "year": 2009}, {"title": "A knowledge compilation", "author": ["Darwiche", "Adnan", "Marquis", "Pierre"], "venue": "map. JAIR,", "citeRegEx": "Darwiche et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Darwiche et al\\.", "year": 2002}, {"title": "Results from the probabilistic inference evaluation of UAI-08", "author": ["Darwiche", "Adnan", "Dechter", "Rina", "Choi", "Arthur", "Gogate", "Vibhav", "Otten", "Lars"], "venue": null, "citeRegEx": "Darwiche et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Darwiche et al\\.", "year": 2008}, {"title": "New complexity results for MAP in Bayesian networks", "author": ["de Campos", "Cassio Polpo"], "venue": "In Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "Campos and Polpo.,? \\Q2011\\E", "shortCiteRegEx": "Campos and Polpo.", "year": 2011}, {"title": "Greedy structure search for sum-product networks", "author": ["Dennis", "Aaron W", "Ventura", "Dan"], "venue": "In Proceedings of the Twenty-Fourth International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "Dennis et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Dennis et al\\.", "year": 2015}, {"title": "The sum-product theorem: A foundation for learning tractable models", "author": ["Friesen", "Abram L", "Domingos", "Pedro M"], "venue": "In Proceedings of the 33nd International Conference on Machine Learning (ICML),", "citeRegEx": "Friesen et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Friesen et al\\.", "year": 2016}, {"title": "Algebraic model counting", "author": ["Kimmig", "Angelika", "Van den Broeck", "Guy", "De Raedt", "Luc"], "venue": "CoRR, abs/1211.4475,", "citeRegEx": "Kimmig et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Kimmig et al\\.", "year": 2012}, {"title": "Algebraic model counting", "author": ["Kimmig", "Angelika", "Van den Broeck", "Guy", "De Raedt", "Luc"], "venue": "International Journal of Applied Logic,", "citeRegEx": "Kimmig et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kimmig et al\\.", "year": 2016}, {"title": "Probabilistic sentential decision diagrams", "author": ["Kisa", "Doga", "Van den Broeck", "Guy", "Choi", "Arthur", "Darwiche", "Adnan"], "venue": "In KR,", "citeRegEx": "Kisa et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kisa et al\\.", "year": 2014}, {"title": "Learning arithmetic circuits", "author": ["Lowd", "Daniel", "Domingos", "Pedro M"], "venue": "In Proceedings of the 24th Conference in Uncertainty in Artificial Intelligence (UAI),", "citeRegEx": "Lowd et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Lowd et al\\.", "year": 2008}, {"title": "Approximation complexity of maximum a posteriori inference in sumproduct", "author": ["Mau\u00e1", "Denis Deratani", "de Campos", "Cassio Polpo"], "venue": "networks. CoRR,", "citeRegEx": "Mau\u00e1 et al\\.,? \\Q2017\\E", "shortCiteRegEx": "Mau\u00e1 et al\\.", "year": 2017}, {"title": "Complexity results and approximation strategies for MAP explanations", "author": ["Park", "James D", "Darwiche", "Adnan"], "venue": "J. Artif. Intell. Res. (JAIR),", "citeRegEx": "Park et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Park et al\\.", "year": 2004}, {"title": "Learning selective sum-product networks", "author": ["Peharz", "Robert", "Gens", "Domingos", "Pedro M"], "venue": "In LTPM workshop,", "citeRegEx": "Peharz et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Peharz et al\\.", "year": 2014}, {"title": "On the latent variable interpretation in sum-product networks", "author": ["Peharz", "Robert", "Gens", "Pernkopf", "Franz", "Domingos", "Pedro"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence (TPAMI),", "citeRegEx": "Peharz et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Peharz et al\\.", "year": 2016}, {"title": "Sum-product networks: A new deep architecture", "author": ["Poon", "Hoifung", "Domingos", "Pedro M"], "venue": "In UAI, pp", "citeRegEx": "Poon et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Poon et al\\.", "year": 2011}, {"title": "Learning sumproduct networks with direct and indirect variable interactions", "author": ["Rooshenas", "Amirmohammad", "Lowd", "Daniel"], "venue": "In ICML, pp", "citeRegEx": "Rooshenas et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rooshenas et al\\.", "year": 2014}, {"title": "On the hardness of approximate reasoning", "author": ["Roth", "Dan"], "venue": "Artif. Intell.,", "citeRegEx": "Roth and Dan.,? \\Q1996\\E", "shortCiteRegEx": "Roth and Dan.", "year": 1996}, {"title": "Tractable operations for arithmetic circuits of probabilistic models", "author": ["Shen", "Yujia", "Choi", "Arthur", "Darwiche", "Adnan"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "Shen et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Shen et al\\.", "year": 2016}, {"title": "Finding MAPs for belief networks is NP-hard", "author": ["Shimony", "Solomon Eyal"], "venue": "Artif. Intell.,", "citeRegEx": "Shimony and Eyal.,? \\Q1994\\E", "shortCiteRegEx": "Shimony and Eyal.", "year": 1994}, {"title": "A unified approach for learning the parameters of sum-product networks", "author": ["Zhao", "Han", "Poupart", "Pascal", "Gordon", "Geoffrey J"], "venue": "In Advances in Neural Information Processing Systems 29 (NIPS),", "citeRegEx": "Zhao et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Zhao et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 26, "context": "They were also adopted in (Dennis & Ventura, 2015; Zhao et al., 2016) to motivate SPN learning algorithms.", "startOffset": 26, "endOffset": 69}, {"referenceID": 13, "context": "Before we discuss determinism, we note that decomposability and determinism were exploited recently in tractable, propositional reasoning within a semi-ring setting; initially in (Kimmig et al., 2012; 2016), then followed by (Friesen & Domingos, 2016).", "startOffset": 179, "endOffset": 206}, {"referenceID": 19, "context": "The property was later called selectivity in the works on SPNs, initially in (Peharz et al., 2014).", "startOffset": 77, "endOffset": 98}, {"referenceID": 9, "context": "Another method yields circuits that can sometimes be exponentially smaller, and is implemented in the publicly available ace system (Chavira & Darwiche, 2008); see also (Darwiche et al., 2008) for an empirical evaluation of this system in one of the UAI inference evaluations.", "startOffset": 169, "endOffset": 192}, {"referenceID": 20, "context": "This oversight was noticed in later works (Peharz et al., 2016; Mau\u00e1 & de Campos, 2017).", "startOffset": 42, "endOffset": 87}, {"referenceID": 20, "context": "(Peharz et al., 2016) proposed a polytime algorithm that converts an SPN into one that is deterministic and smooth (called an augmented SPN), but this new SPN computes a different factor than the one computed by the original SPN.", "startOffset": 0, "endOffset": 21}, {"referenceID": 20, "context": "We now have the following result, whose proof expands the one given in (Peharz et al., 2016) for SPNs based on the above observations; see also (Mau\u00e1 & de Campos, 2017) for an in-depth discussion of MPE hardness on SPNs.", "startOffset": 71, "endOffset": 92}, {"referenceID": 15, "context": "Before we further discuss the impact of relaxing determinism, we point to a new class of arithmetic circuits, the Probabilistic Sentential Decision Diagram (PSDD) (Kisa et al., 2014), which imposes stronger versions of decomposability and determinism.", "startOffset": 163, "endOffset": 182}, {"referenceID": 24, "context": "This enables the multiplication of two ACs in polytime, which is otherwise hard under the standard versions of these properties (Shen et al., 2016).", "startOffset": 128, "endOffset": 147}, {"referenceID": 0, "context": "Proof (Bova et al., 2016) identifies a family of Boolean functions (the Sauerhoff functions) Sn that have decomposable NNFs (DNNFs) with sizes polynomial in n, but where their deterministic DNNFs (d-DNNFs) must have sizes exponential in n.", "startOffset": 6, "endOffset": 25}, {"referenceID": 0, "context": "Previously known separations were conditional on the polynomial hierarchy not collapsing (Darwiche & Marquis, 2002), but (Bova et al., 2016) does not make such an assumption (and neither do we).", "startOffset": 121, "endOffset": 140}, {"referenceID": 20, "context": "This MPE algorithm was used on selective SPNs (equivalent to deterministic and decomposable ACs) in (Peharz et al., 2016).", "startOffset": 100, "endOffset": 121}, {"referenceID": 14, "context": "It was also adapted to algebraic model counting (AMC) in (Kimmig et al., 2016) and to Sum-Product Functions (SPFs) in (Friesen & Domingos, 2016).", "startOffset": 57, "endOffset": 78}, {"referenceID": 14, "context": "Determinism was not required in (Kimmig et al., 2016).", "startOffset": 32, "endOffset": 53}, {"referenceID": 0, "context": "Hence, ifAC\u2032n had a sub-exponential size, then function Sn would have a sub-exponentially sized d-DNNF, which we know does not exist (Bova et al., 2016).", "startOffset": 133, "endOffset": 152}, {"referenceID": 9, "context": "As mentioned earlier, these methods can yield relatively small circuits for some graphical models with very high treewidth (Chavira & Darwiche, 2008; Darwiche et al., 2008).", "startOffset": 123, "endOffset": 172}], "year": 2017, "abstractText": "The past decade has seen a significant interest in learning tractable probabilistic representations. Arithmetic circuits (ACs) were among the first proposed tractable representations, with some subsequent representations being instances of ACs with weaker or stronger properties. In this paper, we provide a formal basis under which variants on ACs can be compared, and where the precise roles and semantics of their various properties can be made more transparent. This allows us to place some recent developments on ACs in a clearer perspective and to also derive new results for ACs. This includes an exponential separation between ACs with and without determinism; completeness and incompleteness results; and tractability results (or lack thereof) when computing most probable explanations (MPEs).", "creator": "LaTeX with hyperref package"}}}