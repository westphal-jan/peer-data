{"id": "1005.2296", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-May-2010", "title": "Online Learning of Noisy Data with Kernels", "abstract": "We study online learning when individual instances are corrupted by random noise. We assume the noise distribution is unknown, and may change over time with no restriction other than having zero mean and bounded variance. Our technique relies on a family of unbiased estimators for non-linear functions, which may be of independent interest. We show that a variant of online gradient descent can learn functions in any dot-product (e.g., polynomial) or Gaussian kernel space with any analytic convex loss function. Our variant uses randomized estimates that need to query a random number of noisy copies of each instance, where with high probability this number is upper bounded by a constant. Allowing such multiple queries cannot be avoided: Indeed, we show that online learning is in general impossible when only one noisy copy of each instance can be accessed.", "histories": [["v1", "Thu, 13 May 2010 10:56:01 GMT  (46kb,D)", "https://arxiv.org/abs/1005.2296v1", "This is a full version of the paper appearing in the 23rd International Conference on Learning Theory (COLT 2010)."], ["v2", "Thu, 20 May 2010 12:43:57 GMT  (46kb,D)", "http://arxiv.org/abs/1005.2296v2", "This is a full version of the paper appearing in the 23rd International Conference on Learning Theory (COLT 2010)"]], "COMMENTS": "This is a full version of the paper appearing in the 23rd International Conference on Learning Theory (COLT 2010).", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["nicol\\`o cesa-bianchi", "shai shalev-shwartz", "ohad shamir"], "accepted": false, "id": "1005.2296"}, "pdf": {"name": "1005.2296.pdf", "metadata": {"source": "CRF", "title": "Online Learning of Noisy Data with Kernels", "authors": ["Nicol\u00f2 Cesa-Bianchi", "Shai Shalev Shwartz"], "emails": ["cesa-bianchi@dsi.unimi.it", "shais@cs.huji.ac.il", "ohadsh@cs.huji.ac.il"], "sections": [{"heading": "1 Introduction", "text": "In many machine learning applications training data are typically collected by measuring certain physical quantities. Examples include bioinformatics, medical tests, robotics, and remote sensing. These measurements have errors that may be due to several reasons: sensor costs, communication constraints, or intrinsic physical limitations. In all such cases, the learner trains on a distorted version of the actual \u201ctarget\u201d data, which is where the learner\u2019s predictive ability is eventually evaluated. In this work we investigate the extent to which a learning algorithm can achieve a good predictive performance when training data are corrupted by noise with unknown distribution.\nWe prove upper and lower bounds on the learner\u2019s cumulative loss in the framework of online learning, where examples are generated by an arbitrary and possibily adversarial source. We model the measurement error via a random perturbation which affects each instance observed by the learner. We do not assume any specific property of the noise distribution other than zero-mean and bounded variance. Moreover, we allow the noise distribution to change at every step in an adversarial way and fully hidden from the learner. Our positive results are quite general: by using a randomized unbiased estimate for the loss gradient and a randomized feature mapping to estimate kernel values, we show that a variant of online gradient descent can learn functions in any dot-product (e.g., polynomial) or Gaussian RKHS under any given analytic convex loss function. Our techniques are readily extendable to other kernel types as well.\nIn order to obtain unbiased estimates of loss gradients and kernel values, we allow the learner to query a random number of independently perturbed copies of the current unseen instance. We show how low-variance estimates can be computed using a number of queries that is constant with high probability. This is in sharp contrast with standard averaging techniques which attempts to directly estimate the noisy instance, as these require a sample whose size depends on the scale of the problem. Finally, we formally show that learning is impossible, even without kernels, when only one perturbed copy of each instance can be accessed. This is true for essentially any reasonable loss function.\nOur paper is organized as follows. In the next subsection we discuss related work. In Sec. 2 we introduce our setting and justify some of our choices. In Sec. 4 we present our main results but before that, in Sec. 3, we discuss the techniques used to obtain them. In the same section, we also explain why existing techniques are insufficient to deal with our problem. The detailed proofs and subroutine implementations appear in Sec. 5, with some of the more technical lemmas and proofs\nar X\niv :1\n00 5.\n22 96\nv2 [\ncs .L\nG ]\n2 0\nM ay\n2 01\nrelegated to the appendix. We wrap up with a discussion on possible avenues for future work in Sec. 6."}, {"heading": "1.1 Related Work", "text": "In the machine learning literature, the problem of learning from noisy examples, and, in particular, from noisy training instances, has traditionally received a lot of attention \u2014see, for example, the recent survey [11]. On the other hand, there are comparably few theoretically-principled studies on this topic. Two of them focus on models quite different from the one studied here: random attribute noise in PAC boolean learning [3, 8], and malicious noise [9, 5]. In the first case, learning is restricted to classes of boolean functions and the noise must be independent across each boolean coordinate. In the second case, an adversary is allowed to perturb a small fraction of the training examples in an arbitrary way, making learning impossible in a strong informational sense unless this perturbed fraction is very small (of the order of the desired accuracy for the predictor).\nThe previous work perhaps closest to the one presented here is [10], where binary classification mistake bounds are proven for the online Winnow algorithm in the presence of attribute errors. Similarly to our setting, the sequence of instances observed by the learner is chosen by an adversary. However, in [10] the noise is generated by an adversary, who may change the value of each attribute in an arbitrary way. The final mistake bound, which only applies when the noiseless data sequence is linearly separable without kernels, depends on the sum of all adversarial perturbations."}, {"heading": "2 Setting", "text": "We consider a setting where the goal is to predict values y \u2208 R based on instances x \u2208 Rd. In this paper we focus on kernel-based linear predictors of the form x 7\u2192 \u3008w,\u03a8(x)\u3009, where \u03a8 is a feature mapping into some reproducing kernel Hilbert space (RKHS). We assume there exists a kernel function that efficiently implements dot products in that space, i.e., k(x,x\u2032) = \u3008\u03a8(x),\u03a8(x\u2032)\u3009. Note that a special case of this setting is linear kernels, where \u03a8(\u00b7) is the identity mapping and k(x,x\u2032) = \u3008x,x\u2032\u3009.\nThe standard online learning protocol for linear prediction with kernels is defined as follows: at each round t, the learner picks a linear hypothesis wt from the RKHS. The adversary then picks an example (xt, yt) and reveals it to the learner. The loss suffered by the learner is `(\u3008wt,\u03a8(xt)\u3009, yt), where ` is a known and fixed loss function. The goal of the learner is to minimize regret with respect to a fixed convex set of hypotheses W, namely\nT\u2211 t=1 `(\u3008wt,\u03a8(xt)\u3009, yt)\u2212 min w\u2208W T\u2211 t=1 `(\u3008w,\u03a8(xt)\u3009, yt).\nTypically, we wish to find a strategy for the learner, such that no matter what is the adversary\u2019s strategy of choosing the sequence of examples, the expression above is sub-linear in T .\nWe now make the following twist, which limits the information available to the learner: instead of receiving (xt, yt), the learner observes yt and is given access to an oracle At. On each call, At returns an independent copy of xt + Zt, where Zt is a zero-mean random vector with some known finite bound on its variance (in the sense that E [ \u2016Zt\u20162 ] \u2264 a for some uniform constant a). In general, the distribution of Zt is unknown to the learner. It might be chosen by the adversary, and change from round to round or even between consecutive calls to At. Note that here we assume that yt remains unperturbed, but we emphasize that this is just for simplicity - our techniques can be readily extended to deal with noisy values as well.\nThe learner may call At more than once. In fact, as we discuss later on, being able to call At more than once is necessary for the learner to have any hope to succeed. On the other hand, if the learner calls At an unlimited number of times, it can reconstruct xt arbitrarily well by averaging, and we are back to the standard learning setting. In this paper we focus on learning algorithms that call At only a small, essentially constant number of times, which depends only on our choice of loss function and kernel (rather than T , the norm of xt, or the variance of Zt, which will happen with na\u0308\u0131ve averaging techniques). Moreover, since the number of queries is bounded with very high probability, one can even produce an algorithm with an absolute bound on the number of queries, which will fail or introduce some bias with an arbitrarily small probability. For simplicity, we ignore these issues in this paper.\nIn this setting, we wish to minimize the regret in hindsight with respect to the unperturbed data and averaged over the noise introduced by the oracle, namely\nE [ T\u2211 t=1 `(\u3008wt,\u03a8(xt)\u3009, yt)\u2212 min w\u2208W T\u2211 t=1 `(\u3008w,\u03a8(xt)\u3009, yt) ] (1)\nwhere the random quantities are the predictors w1,w2, . . . generated by the learner, which depend on the observed noisy instances (in the appendix, we briefly discuss alternative regret measures, and why they are unsatisfactory). This kind of regret is relevant where we actually wish to learn from data, without the noise causing a hindrance. In particular, consider the batch setting, where the examples {(xt, yt)}Tt=1 are actually sampled i.i.d. from some unknown distribution, and we wish to find a predictor which minimizes the expected loss E[`(\u3008w,x\u3009, y)] with respect to new examples (x, y). Using standard online-to-batch conversion techniques, if we can find an online algorithm with a sublinear bound on Eq. (1), then it is possible to construct learning algorithms for the batch setting which are robust to noise. That is, algorithms generating a predictor w with close to minimal expected loss E[`(\u3008w,x\u3009, y)] among all w \u2208 W.\nWhile our techniques are quite general, the exact algorithmic and theoretical results depend a lot on which loss function and kernel is used. Discussing the loss function first, we will assume that `(\u3008w,\u03a8(x)\u3009, y) is a convex function of w for each example (x, y). Somewhat abusing notation, we assume the loss can be written either as `(\u3008w,\u03a8(x)\u3009, y) = f(y\u3008w,\u03a8(x)\u3009) or as `(\u3008w,\u03a8(x)\u3009, y) = f(\u3008w,\u03a8(x)\u3009 \u2212 y) for some function f . We refer to the first type as classification losses, as it encompasses most reasonable losses for classification, where y \u2208 {\u22121,+1} and the goal is to predict the label. We refer to the second type as regression losses, as it encompasses most reasonable regression losses, where y takes arbitrary real values. For simplicity, we present some of our results in terms of classification losses, but they all hold for regression losses as well with slight modifications.\nWe present our results under the assumption that the loss function is \u201csmooth\u201d, in the sense that `\u2032(a) can be written as \u2211\u221e n=0 \u03b3na\nn, for any a in its domain. This assumption holds for instance for the squared loss `(a) = a2, the exponential loss `(a) = exp(a), and smoothed versions of loss functions such as the hinge loss and the absolute loss (we discuss examples in more details in Subsection 4.2). This assumption can be relaxed under certain conditions, and this is further discussed in Subsection 3.2.\nTurning to the issue of kernels, we note that the general presentation of our approach is somewhat hampered by the fact that it needs to be tailored to the kernel we use. In this paper, we focus on two families of kernels: Dot Product Kernels: the kernel k(x,x\u2032) can be written as a function of \u3008x,x\u2032\u3009. Examples of such kernels k(x,x\u2032) are linear kernels \u3008x,x\u2032\u3009; homogeneous polynomial kernels (\u3008x,x\u2032\u3009)n, inhomogeneous polynomial kernels (1 + \u3008x,x\u2032\u3009)n; exponential kernels e\u3008x,x\u2032\u3009; binomial kernels (1 + \u3008x,x\u2032\u3009)\u2212\u03b1, and more (see for instance [14, 16]).\nGaussian Kernels: k(x,x\u2032) = e\u2212\u2016x\u2212x \u2032\u20162/\u03c32 for some \u03c32 > 0.\nAgain, we emphasize that our techniques are extendable to other kernel types as well."}, {"heading": "3 Techniques", "text": "Our results are based on two key ideas: the use of online gradient descent algorithms, and construction of unbiased gradient estimators in the kernel setting. The latter is based on a general method to build unbiased estimators for non-linear functions, which may be of independent interest."}, {"heading": "3.1 Online Gradient Descent", "text": "There exist well developed theory and algorithms for dealing with the standard online learning setting, where the example (xt, yt) is revealed after each round, and for general convex loss functions. One of the simplest and most well known ones is the online gradient descent algorithm due to Zinkevich [17]. Since this algorithm forms a basis for our algorithm in the new setting, we briefly review it below (as adapted to our setting).\nThe algorithm initializes the classifier w1 = 0. At round t, the algorithm predicts according to wt, and updates the learning rule according to wt+1 = P ( wt \u2212 \u03b7t\u2207t ) , where \u03b7t is a suitably chosen\nconstant which might depend on t; \u2207t = `\u2032 ( yt\u3008wt,\u03a8(xt)\u3009 ) yt\u03a8(xt) is the gradient of ` ( yt\u3008w,\u03a8(xt)\u3009 ) with respect to wt; and P is a projection operator on the convex set W, on whose elements we wish to achieve low regret. In particular, if we wish to compete with hypotheses of bounded squared norm Bw, P simply involves rescaling the norm of the predictor so as to have squared norm at most Bw. With this algorithm, one can prove regret bounds with respect to any w \u2208 W.\nA \u201cfolklore\u201d result about this algorithm is that in fact, we do not need to update the predictor by the gradient at each step. Instead, it is enough to update by some random vector of bounded variance, which merely equals the gradient in expectation. This is a useful property in settings where (xt, yt) is not revealed to the learner, and has been used before, such as in the online bandit setting (see for instance [6, 7, 1]). Here, we will use this property in a new way, in order to devise\nalgorithms which are robust to noise. When the kernel and loss function are linear (e.g., \u03a8(x) = x and `(a) = ca+ b for some constants b, c), this property already ensures that the algorithm is robust to noise without any further changes. This is because the noise injected to each xt merely causes the exact gradient estimate to change to a random vector which is correct in expectation: If we assume ` is a classification loss, then\nE [`\u2032(yt\u3008wt,\u03a8(x\u0303t)\u3009)\u03a8(x\u0303t)] = E [cx\u0303t] = xt.\nOn the other hand, when we use nonlinear kernels and nonlinear loss functions, using standard online gradient descent leads to systematic and unknown biases (since the noise distribution is unknown), which prevents the method from working properly. To deal with this problem, we now turn to describe a technique for estimating expressions such as `\u2032 ( yt\u3008wt,\u03a8(xt)\u3009 ) in an unbiased manner. In Subsection 3.3, we discuss how \u03a8(xt) can be estimated in an unbiased manner."}, {"heading": "3.2 Unbiased Estimators for Non-Linear Functions", "text": "Suppose that we are given access to independent copies of a real random variable X, with expectation E[X], and some real function f , and we wish to construct an unbiased estimate of f(E[X]). If f is a linear function, then this is easy: just sample x from X, and return f(x). By linearity, E[f(X)] = f(E[X]) and we are done. The problem becomes less trivial when f is a general, nonlinear function, since usually E[f(X)] 6= f(E[X]). In fact, when X takes finitely many values and f is not a polynomial function, one can prove that no unbiased estimator can exist (see [13], Proposition 8 and its proof). Nevertheless, we show how in many cases one can construct an unbiased estimator of f(E[X]), including cases covered by the impossibility result. There is no contradiction, because we do not construct a \u201cstandard\u201d estimator. Usually, an estimator is a function from a given sample to the range of the parameter we wish to estimate. An implicit assumption is that the size of the sample given to it is fixed, and this is also a crucial ingredient in the impossibility result. We circumvent this by constructing an estimator based on a random number of samples.\nHere is the key idea: suppose f : R \u2192 R is any function continuous on a bounded interval. It is well known that one can construct a sequence of polynomials (Qn(\u00b7))\u221en=1, where Qn(\u00b7) is a polynomial of degree n, which converges uniformly to f on the interval. If Qn(x) = \u2211n i=0 \u03b3n,ix i, let\nQ\u2032n(x1, . . . , xn) = \u2211n i=0 \u03b3n,i \u220fi j=1 xj . Now, consider the estimator which draws a positive integer N according to some distribution P(N = n) = pn, samples X for N times to get x1, x2, . . . , xN , and returns 1pN ( Q\u2032N (x1, . . . , xN )\u2212Q\u2032N\u22121(x1, . . . , xN\u22121) ) , where we assume Q\u20320 = 0. The expected value of this estimator is equal to:\nEN,x1,...,xN [ 1\npN\n( Q\u2032N (x1, . . . , xN )\u2212Q\u2032N\u22121(x1, . . . , xN\u22121) )] =\n\u221e\u2211 n=1 pn pn Ex1,...,xn [ Q\u2032n(x1, . . . , xn)\u2212Q\u2032n\u22121(x1, . . . , xn\u22121) ] =\n\u221e\u2211 n=1 ( Qn(E[X])\u2212Qn\u22121(E[X]) ) = f(E[X]).\nThus, we have an unbiased estimator of f(E[X]). This technique appeared in a rather obscure early 1960\u2019s paper [15] from sequential estimation theory, and appears to be little known, particularly outside the sequential estimation community. However, we believe this technique is interesting, and expect it to have useful applications for other problems as well.\nWhile this may seem at first like a very general result, the variance of this estimator must be bounded for it to be useful. Unfortunately, this is not true for general continuous functions. More precisely, let N be distributed according to pn, and let \u03b8 be the value returned by the estimator. In [2], it is shown that if X is a Bernoulli random variable, and if E[\u03b8Nk] <\u221e for some integer k \u2265 1, then f must be k times continuously differentiable. Since E[\u03b8Nk] \u2264 (E[\u03b82] + E[N2k])/2, this means that functions f which yield an estimator with finite variance, while using a number of queries with bounded variance, must be continuously differentiable. Moreover, in case we desire the number of queries to be essentially constant (i.e. choose a distribution for N with exponentially decaying tails), we must have E[Nk] < \u221e for all k, which means that f should be infinitely differentiable (in fact, in [2] it is conjectured that f must be analytic in such cases).\nThus, we focus in this paper on functions f which are analytic, i.e., they can be written as f(x) = \u2211\u221e i=0 \u03b3ix i for appropriate constants \u03b30, \u03b31, . . .. In that case, Qn can simply be the truncated\nTaylor expansion of f to order n, i.e., Qn = \u2211n i=0 \u03b3ix\ni. Moreover, we can pick pn \u221d 1/pn for any p > 1. So the estimator becomes the following: we sample a nonnegative integer N according to P(N = n) = (p \u2212 1)/pn+1, sample X independently N times to get x1, x2, . . . , xN , and return \u03b8 = \u03b3N pN+1 p\u22121 x1x2 \u00b7 \u00b7 \u00b7xN where we set \u03b8 = p p\u22121\u03b30 if N = 0. 1 We have the following:\nLemma 1. For the above estimator, it holds that E[\u03b8] = f(E[X]). The expected number of samples used by the estimator is 1/(p\u2212 1), and the probability of it being at least z is p\u2212z. Moreover, if we assume that f+(x) = \u2211\u221e n=0 |\u03b3n|xn exists for any x in the domain of interest, then\nE[\u03b82] \u2264 p p\u2212 1 f2+\n(\u221a pE[X2] ) .\nProof. The fact that E[\u03b8] = f(E[X]) follows from the discussion above. The results about the number of samples follow directly from properties of the geometric distribution. As for the second moment, E[\u03b82] equals\nEN,x1,...,xN [ \u03b32N p2(N+1)\n(p\u2212 1)2 x21x 2 2 \u00b7 \u00b7 \u00b7x2N\n] = \u221e\u2211 n=0 (p\u2212 1)p2(n+1) (p\u2212 1)2pn+1 \u03b32nEx1,...,xn [ x21x 2 2 \u00b7 \u00b7 \u00b7x2n ] = p\np\u2212 1 \u221e\u2211 n=0 \u03b32np n ( E[X2] )n =\np\np\u2212 1 \u221e\u2211 n=0 ( |\u03b3n| (\u221a pE[X2] )n)2 \u2264 p p\u2212 1 ( \u221e\u2211 n=0 |\u03b3n| (\u221a pE[X2] )n)2 = p p\u2212 1 f2+ (\u221a pE[X2] ) .\nThe parameter p provides a tradeoff between the variance of the estimator and the number of samples needed: the larger is p, the less samples do we need, but the estimator has more variance. In any case, the sample size distribution decays exponentially fast, so the sample size is essentially bounded.\nIt should be emphasized that the estimator associated with Lemma 1 is tailored for generality, and is suboptimal in some cases. For example, if f is a polynomial function, then \u03b3n = 0 for sufficiently large n, and there is no reason to sample N from a distribution supported on all nonnegative integers - it just increases the variance. Nevertheless, in order to keep the presentation unified and general, we will always use this type of estimator. If needed, the estimator can always be optimized for specific cases.\nWe also note that this technique can be improved in various directions, if more is known about the distribution of X. For instance, if we have some estimate of the expectation and variance of X, then we can perform a Taylor expansion around the estimated E[X] rather than 0, and tune the probability distribution of N to be different than the one we used above. These modifications can allow us to make the variance of the estimator arbitrarily small, if the variance of X is small enough. Moreover, one can take polynomial approximations to f which are perhaps better than truncated Taylor expansions. In this paper, for simplicity, we will ignore these potential improvements.\nFinally, we note that a related result in [2] implies that it is impossible to estimate f(E[X]) in an unbiased manner when f is discontinuous, even if we allow a number of queries and estimator values which are infinite in expectation. Therefore, since the derivative of the hinge loss is not continuous, estimating in an unbiased manner the gradient of the hinge loss with arbitrary noise appears to be impossible. Thus, if online learning with noise and hinge loss is at all feasible, a rather different approach than ours will need to be taken."}, {"heading": "3.3 Unbiasing Noise in the RKHS", "text": "The third component of our approach involves the unbiased estimation of \u03a8(xt), when we only have unbiased noisy copies of xt. Here again, we have a non-trivial problem, because the feature mapping \u03a8 is usually highly non-linear, so E[\u03a8(x\u0303t)] 6= \u03a8(E[x\u0303t]) in general. Moreover, \u03a8 is not a scalar function, so the technique of Subsection 3.2 will not work as-is.\n1 Admittedly, the event N = 0 should receive zero probability, as it amounts to \u201cskipping\u201d the sampling altogether. However, setting P(N = 0) = 0 appears to improve the bound in this paper only in the smaller order terms, while making the analysis in the paper more complicated.\nTo tackle this problem, we construct an explicit feature mapping, which needs to be tailored to the kernel we want to use. To give a very simple example, suppose we use the homogeneous 2nddegree polynomial kernel, k(r, s) = (\u3008r, s\u3009)2. It is not hard to verify that the function \u03a8 : Rd 7\u2192 Rd2 , defined via \u03a8(x) = (x1x1, x1x2, . . . , xdxd), is an explicit feature mapping for this kernel. Now, if we query two independent noisy copies x\u0303, x\u0303\u2032 of x, we have that the expectation of the random vector (x\u03031x\u0303 \u2032 1, x\u03031x\u0303 \u2032 2, . . . , x\u0303dx\u0303 \u2032 d) is nothing more than \u03a8(x). Thus, we can construct unbiased estimates of \u03a8(x) in the RKHS. Of course, this example pertains to a very simple RKHS with a finite dimensional representation. By a randomization trick somewhat similar to the one in Subsection 3.2, we can adapt this approach to infinite dimensional RKHS as well. In a nutshell, we represent \u03a8(x) as an infinite-dimensional vector, and its noisy unbiased estimate is a vector which is non-zero on only finitely many entries, using finitely many noisy queries. Moreover, inner products between these estimates can be done efficiently, allowing us to implement the learning algorithms, and use the resulting predictor on test instances."}, {"heading": "4 Main Results", "text": ""}, {"heading": "4.1 Algorithm", "text": "We present our algorithmic approach in a modular form. We start by introducing the main algorithm, which contains several subroutines. Then we prove our two main results, which bound the regret of the algorithm, the number of queries to the oracle, and the running time for two types of kernels: dot product and Gaussian (our results can be extended to other kernel types as well). In itself, the algorithm is nothing more than a standard online gradient descent algorithm with a standard O( \u221a T ) regret bound. Thus, most of the proofs are devoted to a detailed discussion of how the subroutines are implemented (including explicit pseudo-code). In this section, we just describe one subroutine, based on the techniques discussed in Sec. 3. The other subroutines require a more detailed and technical discussion, and thus their implementation is described as part of the proofs in Sec. 5. In any case, the intuition behind the implementations and the techniques used are described in Sec. 3.\nFor simplicity, we will focus on a finite-horizon setting, where the number of online rounds T is fixed and known to the learner. The algorithm can easily be modified to deal with the infinite horizon setting, where the learner needs to achieve sub-linear regret for all T simultaneously. Also, for the remainder of this subsection, we assume for simplicity that ` is a classification loss, namely can be written as a function of `(y\u3008w,\u03a8(x)\u3009). It is not hard to adapt the results below to the case where ` is a regression loss (where ` is a function of \u3008w,\u03a8(x)\u3009 \u2212 y).\nWe note that at each round, the algorithm below constructs an object which we denote as \u03a8\u0303(xt). This object has two interpretations here: formally, it is an element of a reproducing kernel Hilbert space (RKHS) corresponding to the kernel we use, and is equal in expectation to \u03a8(xt). However, in terms of implementation, it is simply a data structure consisting of a finite set of vectors from Rd. Thus, it can be efficiently stored in memory and handled even for infinite-dimensional RKHS.\nAlgorithm 1 Kernel Learning Algorithm with Noisy Input\nParameters: Learning rate \u03b7 > 0, number of rounds T , sample parameter p > 1. Initialize:\n\u03b1i = 0 for all i = 1, . . . , T . \u03a8\u0303(xi) for all i = 1, . . . , T\n// \u03a8\u0303(xi) is a data structure which can store a variable number of vectors in Rd For t = 1 . . . T\nDefine wt = \u2211t\u22121 i=1 \u03b1i\u03a8\u0303(xi) Receive At, yt // The oracle At provides noisy estimates of xt Let \u03a8\u0303(xt) := Map Estimate(At, p) // Get unbiased estimate of \u03a8(xt) in the RKHS Let g\u0303t := Grad Length Estimate(At, yt, p) // Get unbiased estimate of `\n\u2032(yt\u3008wt,\u03a8(xt)\u3009) Let \u03b1t := \u2212g\u0303t\u03b7/ \u221a T // Perform gradient step\nLet n\u0303t := \u2211t i=1 \u2211t j=1 \u03b1t,i\u03b1t,jProd(\u03a8\u0303(xi), \u03a8\u0303(xj)) // Compute squared norm, where Prod(\u03a8\u0303(xi), \u03a8\u0303(xj)) returns \u3008\u03a8\u0303(xi), \u03a8\u0303(xj)\u3009 If n\u0303t > Bw // If norm squared is larger than Bw, then project\nLet \u03b1i := \u03b1i \u221a Bw n\u0303t for all i = 1, . . . , t\nLike \u03a8\u0303(xt), wt+1 has also two interpretations: formally, it is an element in the RKHS, as defined\nin the pseudocode. In terms of implementation, it is defined via the data structures \u03a8\u0303(x1), . . . , \u03a8\u0303(xt) and the values of \u03b11, . . . , \u03b1t at round t. To apply this hypothesis on a given instance x, we compute\u2211t i=1 \u03b1t,iProd(\u03a8\u0303(xi),x \u2032), where Prod(\u03a8\u0303(xi),x \u2032) is a subroutine which returns \u3008\u03a8\u0303(xi),\u03a8(x\u2032)\u3009 (a pseudocode is provided as part of the proofs later on). We now turn to the main results pertaining to the algorithm. The first result shows what regret bound is achievable by the algorithm for any dot-product kernel, as well as characterize the number of oracle queries per instance, and the overall running time of the algorithm.\nTheorem 1. Assume that the loss function ` has an analytic derivative `\u2032(a) = \u2211\u221e n=0 \u03b3na\nn for all a in its domain, and let `\u2032+(a) = \u2211\u221e n=0 |\u03b3n|an (assuming it exists). Assume also that the kernel k(x,x\u2032) can be written as Q(\u3008x,x\u2032\u3009) for all x,x\u2032 \u2208 Rd. Finally, assume that E[\u2016x\u0303t\u20162] \u2264 Bx\u0303 for any x\u0303t returned by the oracle at round t, for all t = 1, . . . , T . Then, for all Bw > 0 and p > 1, it is possible to implement the subroutines of Algorithm 1 such that:\n\u2022 The expected number of queries to each oracle At is p(p\u22121)2 . \u2022 The expected running time of the algorithm is O ( T 3 (\n1 + dp(p\u22121)2\n)) .\n\u2022 If we run Algorithm 1 with \u03b7 = Bw /\u221a u`\u2032+ (\u221a (p\u2212 1)u ) , where u = Bw ( p p\u22121 )2 Q(pBx\u0303), then\nE [ T\u2211 t=1 `(yt\u3008wt,\u03a8(xt)\u3009)\u2212 min w : \u2016w\u20162\u2264Bw T\u2211 t=1 `(yt\u3008w,\u03a8(xt)\u3009) ] \u2264 `\u2032+ (\u221a (p\u2212 1)u )\u221a uT .\nThe expectations are with respect to the randomness of the oracles and the algorithm throughout its run.\nWe note that the distribution of the number of oracle queries can be specified explicitly, and it decays very rapidly - see the proof for details. Also, for simplicity, we only bound the expected regret in the theorem above. If the noise is bounded almost surely or with sub-Gaussian tails (rather than just bounded variance), then it is possible to obtain similar guarantees with high probability, by relying on Azuma\u2019s inequality or variants thereof (see for example [4]).\nWe now turn to the case of Gaussian kernels. Theorem 2. Assume that the loss function ` has an analytic derivative `\u2032(a) = \u2211\u221e n=0 \u03b3na\nn for all a in its domain, and let `\u2032+(a) = \u2211\u221e n=0 |\u03b3n|an (assuming it exists). Assume that the kernel k(x,x\u2032) is defined as exp(\u2212\u2016x \u2212 x\u20162/\u03c32). Finally, assume that E[\u2016x\u0303t\u20162] \u2264 Bx\u0303 for any x\u0303t returned by the oracle at round t, for all t = 1, . . . , T . Then for all Bw > 0 and p > 1 it is possible to implement the subroutines of Algorithm 1 such that\n\u2022 The expected number of queries to each oracle At is 3p(p\u22121)2 . \u2022 The expected running time of the algorithm is O ( T 3 (\n1 + dp(p\u22121)2\n)) .\n\u2022 If we run Algorithm 1 with \u03b7 = Bw /\u221a u`\u2032+ (\u221a (p\u2212 1)u ) , where\nu = Bw\n( p\np\u2212 1\n)3 exp (\u221a pBx\u0303 + 2p \u221a Bx\u0303\n\u03c32 ) then\nE [ T\u2211 t=1 `(yt\u3008wt,\u03a8(xt)\u3009)\u2212 min w : \u2016w\u20162\u2264Bw T\u2211 t=1 `(yt\u3008w,\u03a8(xt)\u3009) ] \u2264 `\u2032+( \u221a (p\u2212 1)u) \u221a uT .\nThe expectations are with respect to the randomness of the oracles and the algorithm throughout its run.\nAs in Thm. 1, note that the number of oracle queries has a fast decaying distribution. Also, note that with Gaussian kernels, \u03c32 is usually chosen to be on the order of the example\u2019s squared norms. Thus, if the noise added to the examples is proportional to their original norm, we can assume that Bx\u0303/\u03c3\n2 = O(1), and thus u which appears in the bound is also bounded by a constant. As previously mentioned, most of the subroutines are described in the proofs section, as part of the proof of Thm. 1. Here, we only show how to implement Grad Length Estimate subroutine,\nwhich returns the gradient length estimate g\u0303t. The idea is based on the technique described in Subsection 3.2. We prove that g\u0303t is an unbiased estimate of `\n\u2032(yt\u3008wt,\u03a8(xt)\u3009), and bound E[g\u03032t ]. As discussed earlier, we assume that `\u2032(\u00b7) is analytic and can be written as `\u2032(a) = \u2211\u221e n=0 \u03b3na n.\nSubroutine 1 Grad Length Estimate(At, yt, p)\nSample nonnegative integer n according to P(n) = (p\u2212 1)/pn+1 For j = 1, . . . , n\nLet \u03a8\u0303(xt)j := Map Estimate(At) // Get unbiased estimate of \u03a8(xt) in the RKHS\nReturn g\u0303t := yt\u03b3n pn+1 p\u22121 \u220fn j=1 (\u2211t\u22121 i=1 \u03b1t\u22121,iProd(\u03a8\u0303(xi), \u03a8\u0303(xt)j) )\nLemma 2. Assume that E[\u03a8\u0303(xt)] = \u03a8(xt), and that Prod(\u03a8\u0303(x), \u03a8\u0303(x\u2032)) returns \u3008\u03a8\u0303(x), \u03a8\u0303(x\u2032)\u3009 for all x,x\u2032. Then for any given wt = \u03b1t\u22121,1\u03a8\u0303(x1) + \u00b7 \u00b7 \u00b7+ \u03b1t\u22121,t\u22121\u03a8\u0303(xt\u22121) it holds that\nEt[g\u0303t] = yt`\u2032(yt\u3008wt,\u03a8(xt)\u3009) and Et[g\u03032t ] \u2264 p p\u2212 1 ` \u2032 +\n(\u221a pBwB\u03a8\u0303(x) )2 where the expectation is with respect to the randomness of Subroutine 1, and `\u2032+(a) = \u2211\u221e n=0 |\u03b3n|an.\nProof. The result follows from Lemma 1, where g\u0303t corresponds to the estimator \u03b8, the function f corresponds to `\u2032, and the random variable X corresponds to \u3008wt, \u03a8\u0303(xt)\u3009 (where \u03a8\u0303(xt) is random and wt is held fixed). The term E[X2] in Lemma 1 can be upper bounded as\nEt [( \u3008wt, \u03a8\u0303(xt)\u3009 )2] \u2264 \u2016wt\u20162 Et [\u2016\u03a8\u0303(xt)\u20162] \u2264 BwB\u03a8\u0303(x) ."}, {"heading": "4.2 Loss Function Examples", "text": "Theorems 1 and 2 both deal with generic loss functions ` whose derivative can be written as\u2211\u221e n=0 \u03b3na n, and the regret bounds involve the functions `\u2032+(a) = \u2211\u221e n=0 |\u03b3n|an. Below, we present a few examples of loss functions and their corresponding `\u2032+. As mentioned earlier, while the theorems in the previous subsection are in terms of classification losses (i.e., ` is a function of y\u3008w,\u03a8(x)\u3009), virtually identical results can be proven for regression losses (i.e., ` is a function of \u3008w,\u03a8(x)\u3009 \u2212 y), so we will give examples from both families. Working out the first two examples is straightforward. The proofs of the other two appear in Sec. 5. The loss functions are illustrated graphically in Fig. 1.\nExample 1. For the squared loss function, `(\u3008w,x\u3009, y) = (\u3008w,x\u3009\u2212 y)2, we have `\u2032+ (\u221a (p\u2212 1)u) ) =\n2 \u221a (p\u2212 1)u.\nExample 2. For the exponential loss function, `(\u3008w,x\u3009, y) = ey\u3008w,x\u3009, we have `\u2032+ (\u221a (p\u2212 1)u ) = e \u221a (p\u22121)u.\nExample 3. Consider a \u201csmoothed\u201d absolute loss function `\u03c3(\u3008w,\u03a8(x)\u3009 \u2212 y), defined as an antiderivative of Erf(sa) for some s > 0 (see proof for exact analytic form). Then we have that\n`\u2032+ (\u221a (p\u2212 1)u ) \u2264 12 +\n1 s \u221a \u03c0(p\u22121)u\n( es 2(p\u22121)u \u2212 1 ) .\nExample 4. Consider a \u201csmoothed\u201d hinge loss `(y\u3008w,\u03a8(x)\u3009), defined as an antiderivative of (Erf(s(a \u2212 1)) \u2212 1)/2 for some s > 0 (see proof for exact analytic form). Then we have that `\u2032+ (\u221a (p\u2212 1)u ) \u2264 2\ns \u221a \u03c0(p\u22121)u\n( es 2(p\u22121)u\u22121 ) .\nFor any s, the loss function in the last two examples are convex, and respectively approximate the absolute loss \u2223\u2223\u3008w,\u03a8(x)\u3009\u2212 y\u2223\u2223 and the hinge loss max{0, 1\u2212 y\u3008w,\u03a8(x)\u3009} arbitrarily well for large enough s. Fig. 1 shows these loss functions graphically for s = 1. Note that s need not be large in order to get a good approximation. Also, we note that both the loss itself and its gradient are computationally easy to evaluate.\nFinally, we remind the reader that as discussed in Subsection 3.2, performing an unbiased estimate of the gradient for non-differentiable losses directly (such as the hinge loss or absolute loss) appears to be impossible in general. On the flip side, if one is willing to use a random number of queries with polynomial rather than exponential tails, then one can achieve much better sample complexity results, by focusing on loss functions (or approximations thereof) which are only differentiable to a bounded order, rather than fully analytic. This again demonstrates the tradeoff between the sample size and the amount of information that needs to be gathered on each training example."}, {"heading": "4.3 One Noisy Copy is Not Enough", "text": "The previous results might lead one to wonder whether it is really necessary to query the same instance more than once. In some applications this is inconvenient, and one would prefer a method which works when just a single noisy copy of each instance is made available. In this subsection we show that, unfortunately, such a method cannot be found. Specifically, we prove that under very mild assumptions, no method can achieve sub-linear regret when it has access to just a single noisy copy of each instance. On the other hand, for the case of squared loss and linear kernels, our techniques can be adapted to work with exactly two noisy copies of each instance,2 so without further assumptions, the lower bound that we prove here is indeed tight. For simplicity, we prove the result for linear kernels (i.e., where k(x,x\u2032) = \u3008x,x\u2032\u3009). It is an interesting open problem to show improved lower bounds when nonlinear kernels are used. We also note that the result crucially relies on the learner not knowing the noise distribution, and we leave to future work the investigation of what happens when this assumption is relaxed.\nTheorem 3. Let W be a compact convex subset of Rd, and let `(\u00b7, 1) : R 7\u2192 R satisfies the following: (1) it is bounded from below; (2) it is differentiable at 0 with `\u2032(0, 1) < 0. For any learning algorithm which selects hypotheses from W and is allowed access to a single noisy copy of the instance at each round t, there exists a strategy for the adversary such that the sequence w1,w2, . . . of predictors output by the algorithm satisfies\nlim sup T\u2192\u221e max w\u2208W\n1\nT T\u2211 t=1 ( `(\u3008wt,xt\u3009, yt)\u2212 `(\u3008w,xt\u3009, yt) ) > 0\nwith probability 1 with respect to the randomness of the oracles.\nNote that condition (1) is satisfied by virtually any loss function other than the linear loss, while condition (2) is satisfied by most regression losses, and by all classification calibrated losses, which include all reasonable losses for classification (see [12]). The most obvious example where the conditions are not satisfied is when `(\u00b7, 1) is a linear function. This is not surprising, because when `(\u00b7, 1) is linear, the learner is always robust to noise (see the discussion at Sec. 3).\nThe intuition of the proof is very simple: the adversary chooses beforehand whether the examples are drawn i.i.d. from a distribution D, and then perturbed by noise, or drawn i.i.d. from some other distribution D\u2032 without adding noise. The distributions D,D\u2032 and the noise are designed so that the examples observed by the learner are distributed in the same way irrespective to which of the two sampling strategies the adversary chooses. Therefore, it is impossible for the learner accessing a single copy of each instance to be statistically consistent with respect to both distributions simultaneously. As a result, the adversary can always choose a distribution on which the algorithm will be inconsistent, leading to constant regret. The full proof is presented in Section 5.3.\n2 In a nutshell, for squared loss and linear kernels, we just need to estimate 2(\u3008wt,xt\u3009 \u2212 yt)xt in an unbiased manner at each round t. This can be done by computing 2(\u3008wt, x\u0303t\u3009 \u2212 yt)x\u0303\u2032t, where x\u0303t, x\u0303\u2032t are two noisy copies of xt."}, {"heading": "5 Proofs", "text": "Due to the lack of space, some of the proofs are given in the the appendix."}, {"heading": "5.1 Preliminary Result", "text": "To prove Thm. 1 and Thm. 2, we need a theorem which basically states that if all subroutines in algorithm 1 behave as they should, then one can achieve an O( \u221a T ) regret bound. This is provided in the following theorem, which is an adaptation of a standard result of online convex optimization (see, e.g., [17]). The proof is given in Appendix D.\nTheorem 4. Assume the following conditions hold with respect to Algorithm 1:\n1. For all t, \u03a8\u0303(xt) and g\u0303t are independent of each other (as random variables induced by the\nrandomness of Algorithm 1) as well as independent of any \u03a8\u0303(xi) and g\u0303i for i < t."}, {"heading": "2. For all t, E[\u03a8\u0303(xt)] = \u03a8(xt), and there exists a constant B\u03a8\u0303 > 0 such that E[\u2016\u03a8\u0303(xt)\u20162] \u2264 B\u03a8\u0303.", "text": "3. For all t, E[g\u0303t] = yt`\u2032(yt\u3008wt,\u03a8(xt)\u3009), and there exists a constant Bg\u0303 > 0 such that E[g\u03032t ] \u2264 Bg\u0303. 4. For any pair of instances x,x\u2032, Prod(\u03a8\u0303(x), \u03a8\u0303(x\u2032)) = \u3008\u03a8\u0303(x), \u03a8\u0303(x\u2032)\u3009.\nThen if Algorithm 1 is run with \u03b7 = \u221a\nBw Bg\u0303B\u03a8\u0303 , the following inequality holds\nE [ T\u2211 t=1 ` ( yt\u3008wt,\u03a8(xt)\u3009 ) \u2212 min w : \u2016w\u20162\u2264Bw T\u2211 t=1 ` ( yt\u3008w,\u03a8(xt)\u3009 )] \u2264 \u221a BwBg\u0303B\u03a8\u0303T .\nwhere the expectation is with respect to the randomness of the oracles and the algorithm throughout its run."}, {"heading": "5.2 Proof of Thm. 1", "text": "In this subsection, we present the proof of Thm. 1. We first show how to implement the subroutines of Algorithm 1, and prove the relevant results on their behavior. Then, we prove the theorem itself.\nIt is known that for k(\u00b7, \u00b7) = Q(\u3008x,x\u2032\u3009) to be a valid kernel, it is necessary that Q(\u3008x,x\u2032\u3009) can be written as a Taylor expansion \u2211\u221e n=0 \u03b2n(\u3008x,x\u2032\u3009)n, where \u03b2n \u2265 0 (see theorem 4.19 in [14]). This makes these types of kernels amenable to our techniques. We start by constructing an explicit feature mapping \u03a8(\u00b7) corresponding to the RKHS induced by our kernel. For any x,x\u2032, we have that\nk(x,x\u2032) = \u221e\u2211 n=0 \u03b2n(\u3008x,x\u2032\u3009)n = \u221e\u2211 n=0 \u03b2n ( d\u2211 i=1 xix \u2032 i )n\n= \u221e\u2211 n=0 \u03b2n d\u2211 k1=1 \u00b7 \u00b7 \u00b7 d\u2211 kn=1 xk1xk2 \u00b7 \u00b7 \u00b7xknx\u2032k1x \u2032 k2 \u00b7 \u00b7 \u00b7x \u2032 kn\n= \u221e\u2211 n=0 d\u2211 k1=1 \u00b7 \u00b7 \u00b7 d\u2211 kn=1 (\u221a \u03b2nxk1xk2 \u00b7 \u00b7 \u00b7xkn )(\u221a \u03b2nx \u2032 k1x \u2032 k2 \u00b7 \u00b7 \u00b7x \u2032 kn ) .\nThis suggests the following feature representation: for any x, \u03a8(x) returns an infinite-dimensional vector, indexed by n and k1, . . . , kn \u2208 {1, . . . , d}, with the entry corresponding to n, k1, . . . , kn being\u221a \u03b2nxk1 \u00b7 \u00b7 \u00b7xkn . The dot product between \u03a8(x) and \u03a8(x\u2032) is similar to a standard dot product between two vectors, and by the derivation above equals k(x,x\u2032) as required. We now use a slightly more elaborate variant of our unbiased estimate technique, to derive an unbiased estimate of \u03a8(x). First, we sample N according to P(N = n) = (p \u2212 1)/pn+1. Then, we query the oracle for x for N times to get x\u0303(1), . . . , x\u0303(N), and formally define \u03a8\u0303(x) as\n\u03a8\u0303(x) = \u221a \u03b2n pn+1\np\u2212 1 d\u2211 k1=1 \u00b7 \u00b7 \u00b7 d\u2211 kn=1 x\u0303 (1) k1 \u00b7 \u00b7 \u00b7 x\u0303(n)kn en,k1,...,kn (2)\nwhere en,k1,...,kn represents the unit vector in the direction indexed by n, k1, . . . , kn as explained above. Since the oracle queries are i.i.d., the expectation of this expression is \u221e\u2211 n=0 p\u2212 1 pn+1 \u221a \u03b2n pn+1 p\u2212 1 d\u2211 k1=1 \u00b7 \u00b7 \u00b7 d\u2211 kn=1 E [ x\u0303 (1) k1 \u00b7 \u00b7 \u00b7 x\u0303(n)kn ] en,k1,...,kn = \u221e\u2211 n=0 d\u2211 k1=1 \u00b7 \u00b7 \u00b7 d\u2211 kn=1 \u221a \u03b2nx (1) k1 \u00b7 \u00b7 \u00b7x(n)kn en,k1,...,kn\nwhich is exactly \u03a8(x). We formalize the needed properties of \u03a8\u0303(x) in the following lemma.\nLemma 3. Assuming \u03a8\u0303(x) is constructed as in the discussion above, it holds that E[\u03a8\u0303(x)] = \u03a8(x) for any x. Moreover, if the noisy samples x\u0303t returned by the oracle At satisfy E[\u2016x\u0303t\u20162] \u2264 Bx\u0303, then\nE [ \u2016\u03a8\u0303(xt)\u20162 ] \u2264 p p\u2212 1 Q(pBx\u0303)\nwhere we recall that Q defines the kernel by k(x,x\u2032) = Q(\u3008x,x\u2032\u3009).\nProof. The first part of the lemma follows from the discussion above. As to the second part, note that by (2), E [ \u2016\u03a8\u0303(xt)\u20162 ] = E \u03b2n p2n+2 (p\u2212 1)2 d\u2211 k1...,kn=1 ( x\u0303 (1) t,k1 \u00b7 \u00b7 \u00b7 x\u0303(N)t,kn )2 = E \u03b2n p2n+2 (p\u2212 1)2 n\u220f j=1 \u2225\u2225x\u0303(j)t \u2225\u22252 \n= \u221e\u2211 n=0 p\u2212 1 pn+1 \u03b2n p2n+2 (p\u2212 1)2 ( E [ x\u03032t ])n = p p\u2212 1 \u221e\u2211 n=0 \u03b2n ( pE [ x\u03032t ])n \u2264 p p\u2212 1 \u221e\u2211 n=0 \u03b2n ( pBx\u0303 )n = p p\u2212 1 Q(pBx\u0303)\nwhere the second-to-last step used the fact that \u03b2n \u2265 0 for all n.\nOf course, explicitly storing \u03a8\u0303(x) as defined above is infeasible, since the number of entries is\nhuge. Fortunately, this is not needed: we just need to store x\u0303 (1) t , . . . , x\u0303 (N) t . The representation above is used implicitly when we calculate dot products between \u03a8\u0303(x) and other elements in the RKHS, via the subroutine Prod. We note that while N is a random quantity which might be unbounded, its distribution decays exponentially fast, so the number of vectors to store is essentially bounded.\nAfter the discussion above, the pseudocode for Map Estimate below should be self-explanatory.\nSubroutine 2 Map Estimate(At, p)\nSample nonnegative integer N according to P(N = n) = (p\u2212 1)/pn+1 Query At for N times to get x\u0303 (1) t , . . . , x\u0303 (N) t Return x\u0303 (1) t , . . . , x\u0303 (N) t as \u03a8\u0303(xt).\nWe now turn to the subroutine Prod, which given two elements in the RKHS, returns their dot product. This subroutine comes in two flavors: either as a procedure defined over \u03a8\u0303(x), \u03a8\u0303(x\u2032) and returning \u3008\u03a8\u0303(x), \u03a8\u0303(x\u2032)\u3009 (Subroutine 3); or as a procedure defined over \u03a8\u0303(x),x\u2032 (Subroutine 4, where the second element is an explicitely given vector) and returning \u3008\u03a8\u0303(x),\u03a8(x\u2032)\u3009. This second variant of Prod is needed when we wish to apply the learned predictor on a new given instance x\u2032.\nSubroutine 3 Prod(\u03a8\u0303(x), \u03a8\u0303(x\u2032))\nLet x(1), . . . ,x(n) be the index and vectors comprising \u03a8(x) Let x\u2032(1), . . . ,x\u2032(n \u2032) be the index and vectors comprising \u03a8(x\u2032) If n 6= n\u2032 return 0, else return \u03b2n p 2n+2 (p\u22121)2 \u220fn j=1\u3008x\u0303(j), x\u0303\u2032(j)\u3009\nLemma 4. Prod(\u03a8\u0303(x), \u03a8\u0303(x\u2032)) returns \u3008\u03a8\u0303(x)\u03a8\u0303(x\u2032)\u3009.\nProof. Using the formal representation of \u03a8\u0303(x), \u03a8\u0303(x\u2032) in (2), we have that \u3008\u03a8\u0303(x), \u03a8\u0303(x\u2032)\u3009 is 0 whenever n 6= n\u2032 (because then these two elements are composed of different unit vectors with respect to an orthogonal basis). Otherwise, we have that\n\u3008\u03a8\u0303(x)\u03a8\u0303(x\u2032)\u3009 = \u03b2n p2n+2 (p\u2212 1)2 d\u2211\nk1,...,kn=1\nx\u0303 (1) k1 \u00b7 \u00b7 \u00b7 x\u0303(n)kn x\u0303 \u2032(1) k1 \u00b7 \u00b7 \u00b7 x\u0303\u2032(n)kn\n= \u03b2n p2n+2\n(p\u2212 1)2\n( d\u2211\nk1=1\nx\u0303 (1) k1 x\u0303 \u2032(1) k1\n) \u00b7 \u00b7 \u00b7 ( d\u2211\nkN=1\nx\u0303 (n) kN x\u0303 \u2032(n) kN ) = \u03b2n p2n+2 (p\u2212 1)2 N\u220f j=1 ( \u3008x\u0303(j), x\u0303\u2032(j)\u3009 ) which is exactly what the algorithm returns, hence the lemma follows.\nThe pseudocode for calculating the dot product \u3008\u03a8\u0303(x),\u03a8(x\u2032)\u3009 (where x\u2032 is known) is very similar, and the proof is essentially the same.\nSubroutine 4 Prod(\u03a8\u0303(x),x\u2032)\nLet n,x(1), . . . ,x(n) be the index and vectors comprising \u03a8(x) Return \u03b2n pn+1 p\u22121 \u220fn j=1\u3008x\u0303(j),x\u2032\u3009\nWe are now ready to prove Thm. 1. First, regarding the expected number of queries, notice that to run Algorithm 1, we invoke Map Estimate and Grad Length Estimate once at round t. Map Estimate uses a random number B of queries distributed as P(B = n) = (p \u2212 1)/pn+1, and Grad Length Estimate invokes Map Estimate a random number C of times, distributed as P(C = n) = (p \u2212 1)/pn+1. The total number of queries is therefore \u2211C+1 j=1 Bj , where Bj for all j are i.i.d. copies of B. The expected value of this expression, using a standard result on the expected value of a sum of a random number of independent random variables, is equal to (1 + E[C])E[Bj ], or( 1 + 1p\u22121 ) 1 p\u22121 = p (p\u22121)2 .\nIn terms of running time, we note that the expected running time of Prod is O ( 1 + dp\u22121 ) , this because it performs N multiplications of inner products, each one with running time O(d), and E[N ] = 1p\u22121 . The expected running time of Map Estimate is O ( 1 + 1p\u22121 ) . The expected\nrunning time of Grad Length Estimate is O ( 1 + 1p\u22121 ( 1 + 1p\u22121 ) +T ( 1 + dp\u22121 )) , which can be written\nas O (\np (p\u22121)2 + T ( 1 + dp\u22121 )) . Since Algorithm 1 at each of T rounds calls Map Estimate once,\nGrad Length Estimate once, Prod for O(T 2) times, and performs O(1) other operations, we get that the overall runtime is\nO ( T ( 1 + 1\np\u2212 1 +\np\n(p\u2212 1)2 + T\n( 1 + d\np\u2212 1\n) + T 2 ( 1 + d\np\u2212 1\n))) .\nSince 1p\u22121 \u2264 p (p\u22121)2 , we can upper bound this by\nO ( T ( 1 +\np\n(p\u2212 1)2 + T 2\n( 1 +\ndp\n(p\u2212 1)2\n))) = O ( T 3 ( 1 + dp\n(p\u2212 1)2\n)) .\nThe regret bound in the theorem follows from Thm. 4, with the expressions for constants following from Lemma 2, Lemma 3, and Lemma 4."}, {"heading": "5.3 Proof Sketch of Thm. 3", "text": "To prove the theorem, we use a more general result which leads to non-vanishing regret, and then show that under the assumptions of Thm. 3, the result holds. The proof of the result is given in Appendix F.\nTheorem 5. Let W be a compact convex subset of Rd and pick any learning algorithm which selects hypotheses from W and is allowed access to a single noisy copy of the instance at each round t. If there exists a distribution over a compact subset of Rd such that\nargmin w\u2208W\nE [ `(\u3008w,x\u3009, 1) ] and argmin w\u2208W ` ( \u3008w,E[x]\u3009, 1 ) (3)\nare disjoint, then there exists a strategy for the adversary such that the sequence w1,w2, \u00b7 \u00b7 \u00b7 \u2208 W of predictors output by the algorithm satisfies\nlim sup T\u2192\u221e max w\u2208W\n1\nT T\u2211 t=1 ( `(\u3008wt,xt\u3009, yt)\u2212 `(\u3008w,xt\u3009, yt) ) > 0\nwith probability 1 with respect to the randomness of the oracles.\nAnother way to phrase this theorem is that the regret cannot vanish, if given examples sampled i.i.d. from a distribution, the learning problem is more complicated than just finding the mean of the data. Indeed, the adversary\u2019s strategy we choose later on is simply drawing and presenting examples from such a distribution. Below, we sketch how we use Thm. 5 in order to prove Thm. 3. A full proof is provided in Appendix E.\nWe construct a very simple one-dimensional distribution, which satisfies the conditions of Thm. 5: it is simply the uniform distribution on {3x,\u2212x}, where x is the vector (1, 0, . . . , 0). Thus, it is enough to show that\nargmin w : |w|2\u2264Bw `(3w, 1) + `(\u2212w, 1) and argmin w : |w|2\u2264Bw `(w, 1) (4)\nare disjoint, for some appropriately chosen Bw. Assuming the contrary, then under the assumptions on `, we show that the first set in Eq. (4) is inside a bounded ball around the origin, in a way which is independent of Bw, no matter how large it is. Thus, if we pick Bw to be large enough, and assume that the two sets in Eq. (4) are not disjoint, then there must be some w such that both `(3w, 1) + `(\u2212w, 1) and `(w, 1) have a subgradient of zero at w. However, this can be shown to contradict the assumptions on `, leading to the desired result."}, {"heading": "6 Future Work", "text": "There are several interesting research directions worth pursuing in the noisy learning framework introduced here. For instance, doing away with unbiasedness, which could lead to the design of estimators that are applicable to more types of loss functions, for which unbiased estimators may not even exist. Also, it would be interesting to show how additional information one has about the noise distribution can be used to design improved estimates, possibly in association with specific losses or kernels. Another open question is whether our lower bound (Thm. 3) can be improved when nonlinear kernels are used."}, {"heading": "A Alternative Notions of Regret", "text": "In the online setting, one may consider notions of regret other than 1. One choice is\nT\u2211 t=1 `(\u3008wt,\u03a8(x\u0303t)\u3009, yt)\u2212 min w\u2208W T\u2211 t=1 `(\u3008w,\u03a8(x\u0303t)\u3009, yt)\nbut this is too easy, as it reduces to standard online learning with respect to examples which happen to be noisy. Another kind of regret we may want to minimize is\nT\u2211 t=1 `(\u3008wt,\u03a8(x\u0303t)\u3009, yt)\u2212 min w\u2208W `(\u3008wt,\u03a8(xt)\u3009, yt) . (5)\nThis is the kind of regret which is relevant for actually predicting the values yt well based on the noisy instances. Unfortunately, in general this is too much to hope for. To see why, assume we deal with a linear kernel (so that \u03a8(x) = x), and assume `(w,x, y) = (\u3008w,x\u3009 \u2212 y)2. Now, suppose that the adversary picks some w\u2217 6= 0 in W, which might be even known to the learner, and at each round t provides the example (w\u2217/\u2016w\u2217\u2016, 1). It is easy to verify that Eq. (5) in this case equals\nT\u2211 t=1 (\u3008wt, x\u0303t\u3009 \u2212 1)2 \u2212 0 .\nRecall that the learner chooses wt before x\u0303t is revealed. Therefore, if the noise which leads to x\u0303t has positive variance, it will generally be impossible for the learner to choose wt such that \u3008wt, x\u0303t\u3009 is arbitrarily close to 1. Therefore, the equation above cannot grow sub-linearly with T ."}, {"heading": "B Proof of Thm. 2", "text": "The analysis in this subsection is similar to the one of Subsection 5.2, focusing on Gaussian kernels. Namely, we assume here that the kernel k(x,x\u2032) is equal to e\u2212\u2016x\u2212x \u2032\u20162/\u03c32 for some \u03c32 > 0.\nWe start by constructing an explicit feature mapping \u03a8(\u00b7) corresponding to the RKHS induced by our kernel. For any x,x\u2032, we have that\nk(x,x\u2032) = e\u2212\u2016x\u2212x \u2032\u20162/\u03c32 = e\u2212\u2016x\u2016 2/\u03c32e\u2212\u2016x \u2032\u20162/\u03c32e2\u3008x,x \u2032\u3009/\u03c32\n= e\u2212\u2016x\u2016 2/\u03c32e\u2212\u2016x \u2032\u20162/\u03c32 ( \u221e\u2211 n=0 (2\u3008x,x\u2032\u3009)n \u03c32nn! )\n= e\u2212\u2016x\u2016 2/\u03c32e\u2212\u2016x \u2032\u20162/\u03c32 ( \u221e\u2211 n=0 d\u2211 k1=1 \u00b7 \u00b7 \u00b7 d\u2211 kn=1 (2/\u03c32)n n! xk1 \u00b7 \u00b7 \u00b7xknx\u2032k1 \u00b7 \u00b7 \u00b7x \u2032 kn ) .\nThis suggests the following feature representation: for any x, \u03a8(x) returns an infinite-dimensional vector, indexed by n and k1, . . . , kn \u2208 {1, . . . , d}, with the entry corresponding to n, k1, . . . , kn being e\u2212\u2016x\u2016 2/\u03c32 (2/\u03c3 2)n\nn! xk1 . . . xkn . The dot product between \u03a8(x) and \u03a8(x \u2032) is similar to a standard dot\nproduct between two vectors, and by the derivation above equals k(x,x\u2032) as required.\nThe idea of deriving an unbiased estimate of \u03a8(x) is the following: first, we sample N1, N2 independently according to P(N1 = n1) = P(N2 = n2) = (p \u2212 1)/pn+1. Then, we query the oracle for x for 2N1 +N2 times to get x\u0303 1, . . . , x\u0303(2N1+N2), and formally define \u03a8\u0303(x) as\n\u03a8\u0303(x) = (\u22121)N1pN1+N2+22N2\nN1!N2!\u03c32N1+2N2(p\u2212 1)2 N1\u220f j=1 \u3008x\u0303(2j\u22121), x\u0303(2j)\u3009  d\u2211 k1,...,kN2=1 x\u0303 (2N1+1) k1 \u00b7 \u00b7 \u00b7 x\u0303(2N1+N2)kN2 eN2,k1,...,kN2  (6)\nwhere eN2,k1,...,kN2 represents the unit vector in the direction indexed by N2, k1, . . . , kN2 as explained above. Since the oracle calls are i.i.d., it is not hard to verify that the expectation of the expression\nabove is( \u221e\u2211 n1=0 p\u2212 1 pn1+1 (\u22121)n1pn1+1 n1!\u03c32n1(p\u2212 1) (\u3008x,x\u3009)n1 ) \u221e\u2211 n2=0 p\u2212 1 pn2+1 pn2+12n2 n2!\u03c32n2(p\u2212 1) d\u2211 k1,...,kn2=1 xk1 \u00b7 \u00b7 \u00b7xkn2 en2,k1,...,kn2  =\n( \u221e\u2211 n1=0 (\u2212\u2016x\u20162/\u03c32)n1 n1! ) \u221e\u2211 n2=0 (2/\u03c32)n2 n2! d\u2211 k1,...,kn2=1 xk1 \u00b7 \u00b7 \u00b7xkn2 en2,k1,...,kn2  = e\u2212\u2016x\u2016 2/\u03c32\n \u221e\u2211 n2=0 d\u2211 k1,...,kn2=1 (2/\u03c32)n2 n2! xk1 \u00b7 \u00b7 \u00b7xkn2 en2,k1,...,kn2  which is exactly \u03a8(x) as defined above.\nTo actually store \u03a8\u0303(x) in memory, we simply keep and x\u0303(1), . . . , x\u0303(2N1+N2). The representation\nabove is used implicitly when we calculate dot products between \u03a8\u0303(x) and other elements in the\nRKHS, via the subroutine Prod. We formalize the needed properties of \u03a8\u0303(x) in the following lemma.\nLemma 5. Assuming the construction of \u03a8\u0303(x) as in the discussion above, it holds that Et[\u03a8\u0303(x)] = \u03a8(x) for all x. Moreover, if the noisy sample x\u0303t returned by the oracle At satisfies E[\u2016x\u0303t\u20162] \u2264 Bx\u0303, then\nE [ \u2016\u03a8\u0303(xt)\u20162 ] \u2264 ( p\np\u2212 1\n)2 e( \u221a pBx\u0303+2p \u221a Bx\u0303)/\u03c3 2\nProof. The first part of the lemma follows from the discussion above. As to the second part, note that by (6), we have that\n\u2016\u03a8\u0303(xt)\u20162 = p2N1+2N2+422N2( N1!N2!\u03c32N1+2N2(p\u2212 1)2 )2 N1\u220f j=1 ( \u3008x\u0303(2j\u22121), x\u0303(2j)\u3009 )2 d\u2211 k1,...,kN2=1 ( x\u0303 (2N1+1) k1 . . . x\u0303 (2N1+N2) kN2 )2 =\np2N1+2N2+422N2( N1!N2!\u03c32N1+2N2(p\u2212 1)2 )2 N1\u220f j=1 ( \u3008x\u0303(2j\u22121), x\u0303(2j)\u3009 )2N2\u220f j=1 \u2016x\u0303(N1+j)\u20162 \n\u2264 p 2N1+2N2+422N2( N1!N2!\u03c32N1+2N2(p\u2212 1)2 )2B2N1x\u0303 BN2x\u0303 .\nThe expectation of this expression over N1, N2 is equal to( \u221e\u2211 n1=0 p\u2212 1 pn1+1 p2n1+2 (n1!\u03c32n1(p\u2212 1))2 B2n1x\u0303 )( \u221e\u2211 n2=0 p\u2212 1 pn2+1 p2n2+222n2 (n2!\u03c32n2(p\u2212 1))2 Bn2x\u0303 )\n=\n( p\np\u2212 1 )2( \u221e\u2211 n1=0 (pB2x\u0303) n1 (n1!\u03c32n1)2 )( \u221e\u2211 n2=0 (4p2Bx\u0303) n2 (n2!\u03c32n2)2 )\n=\n( p\np\u2212 1 )2( \u221e\u2211 n1=0 ( ( \u221a pBx\u0303/\u03c3 2)n1 n1! )2)( \u221e\u2211 n2=0 ( (2p \u221a Bx\u0303/\u03c3 2)n2 n2! )2)\n\u2264 ( p\np\u2212 1 )2(( \u221e\u2211 n1=0 ( \u221a pBx\u0303/\u03c3 2)n1 n1! )( \u221e\u2211 n2=0 (2p \u221a Bx\u0303/\u03c3 2)n2 n2! ))2 = ( p p\u2212 1 )2 e( \u221a pBx\u0303+2p \u221a Bx\u0303)/\u03c3 2 .\nAfter the discussion above, the pseudocode for Map Estimate below should be self-explanatory.\nSubroutine 5 Map Estimate(At, p)\nSample N1 according to P(N1 = n1) = (p\u2212 1)/pn1+1 Sample N2 according to P(N2 = n2) = (p\u2212 1)/pn2+1 Query At for 2N1 +N2 times to get x\u0303 (1) t , . . . , x\u0303 (2N1+N2) t Return x\u0303 (1) t , . . . , x\u0303 (2N1+N2) t as \u03a8\u0303(xt).\nWe now turn to the subroutine Prod, which given two elements in the RKHS, returns their dot product. This subroutine comes in two flavors: either as a procedure defined over \u03a8\u0303(x), \u03a8\u0303(x\u2032) and returning \u3008\u03a8\u0303(x), \u03a8\u0303(x\u2032)\u3009 (Subroutine 6); or as a procedure defined over \u03a8\u0303(x),x\u2032 (Subroutine 7, where the second element is an explicitly given vector) and returning \u3008\u03a8\u0303(x),\u03a8(x\u2032)\u3009. This second variant of Prod is needed when we wish to apply the hypothesis on a new (known) instance x\u2032.\nSubroutine 6 Prod(\u03a8\u0303(x), \u03a8\u0303(x\u2032))\nLet x\u0303(n), . . . , x\u0303(2n1+n2) be the vectors comprising \u03a8\u0303(x) Let x\u0303\u2032 (1) , . . . , x\u0303\u2032 (2n\u20321+n \u2032 2) be the vectors comprising \u03a8\u0303(x\u2032) If n\u20322 6= n\u20322 return 0, else return (\u22121)n1+n\u20321pn1+n\u20321+2n2+422n2\nn1!n\u20321!(n2!) 2\u03c32(n1+n \u2032 1+2n2)(p\u2212 1)4 \u00d7 (\u220fn1 j=1\u3008x\u0303(2j\u22121), x\u0303(2j)\u3009 )(\u220fn\u20321 j=1\u3008x\u0303\u2032(2j\u22121), x\u0303\u2032(2j)\u3009 )(\u220fn2 j=1\u3008x\u0303(2n1+j), x\u0303\u2032(2n \u2032 1+j)\u3009 ) The proof of the following lemma is a straightforward algebraic exercise, similar to the proof of\nLemma 4.\nLemma 6. Prod(\u03a8\u0303(x), \u03a8\u0303(x\u2032)) returns \u3008\u03a8\u0303(x), \u03a8\u0303(x\u2032)\u3009.\nThe pseudocode for calculating the dot product \u3008\u03a8\u0303(x),\u03a8(x\u2032)\u3009 (where x\u2032 is known) is very similar, and the proof is essentially the same.\nSubroutine 7 Prod(\u03a8\u0303(x),x\u2032)\nLet x(1), . . . ,x(2n1+n2) be the vectors comprising \u03a8\u0303(x) Return\n(\u22121)n1pn1+n2+222n2 n1!(n2!)2\u03c32(n1+2n2)(p\u2212 1)2 e\u2212\u2016x \u2032\u20162/\u03c32  n1\u220f j=1 \u3008x\u0303(2j\u22121), x\u0303(2j)\u3009  n2\u220f j=1 \u3008x\u0303(2n1+j),x\u2032\u3009 . We are now ready to prove Thm. 2. First, regarding the expected number of queries, notice that to run Algorithm 1, we invoke Map Estimate and Grad Length Estimate once at round t. Map Estimate uses a random number 2B1 + B2 of queries, where B1, B2 are independent and distributed as P(B1 = n) = P(B2 = n) = (p\u2212 1)/pn+1. Grad Length Estimate invokes Map Estimate a random number C of times, where P(C = n) = (p \u2212 1)/pn+1. The total number of queries is therefore \u2211C+1 j=1 (2Bj,1 +Bj,2), where Bj,1, Bj,2 are i.i.d. copies of B1, B2 respectively. The expected value of this expression, using a standard result on the expected value of a sum of a random number\nof random variables, is equal to (1 + E[C])(2E[Bj,1] + E[Bj,2]), or ( 1 + 1p\u22121 ) 3 p\u22121 = 3p (p\u22121)2 .\nIn terms of running time, the analysis is completely identical to the one performed in the proof of Thm. 1, and the expected running time is the same up to constants.\nThe regret bound in the theorem follows from Thm. 4, with the expressions for constants following from Lemma 2, Lemma 5, and Lemma 6."}, {"heading": "C Proof of Examples 3 and 4", "text": "Examples 3 and 4 use the error function Erf(a) in order to construct smooth approximations of the hinge loss and the absolute loss (see Fig. 1). The error function is useful for our purposes, since it is analytic in all of R, and smoothly interpolates between \u22121 for a 0 and 1 for a 0. Thus, it can be used to approximate derivative of losses which are piecewise linear, such as the hinge loss `(a) = max{0, 1\u2212 a} and the absolute loss `(a) = |a|.\nTo approximate the absolute loss, we use the antiderivative of Erf(sa). This function represents a smooth upper bound on the absolute loss, which becomes tighter as s increases. It can be verified that the antiderivative (with the constant free parameter fixed so the function has the desired behavior) is\n`(a) = a Erf(sa) + e\u2212s 2a2\n\u03c3 \u221a \u03c0 .\nWhile this loss function may seem to have slightly complex form, we note that our algorithm only needs to calculate the derivative of this loss function at various points (namely Erf(sa) for various values of a), which can be easily done.\nBy a Taylor expansion of the error function, we have that\n`\u2032(a) = 2\u221a \u03c0 \u221e\u2211 n=0 (\u22121)n(sa)2n+1 n!(2n+ 1) .\nTherefore, `\u2032+(a) in this case is at most\n2\u221a \u03c0 \u221e\u2211 n=0 (sa)2n+1 n!(2n+ 1) \u2264 2 as \u221a \u03c0 \u221e\u2211 n=0 (sa)2(n+1) (n+ 1)! = 2 as \u221a \u03c0 ( e\u03c3 2a2\u22121 ) .\nWe now turn to deal with Example 4. This time, we use the antiderivative of (Erf(s(a\u2212 1))\u2212 1)/2. This function smoothly interpolates between \u22121 for a \u22121 and 0 for a 0. Therefore, its antiderivative with respect to x represents a smooth upper bound on the hinge loss, which becomes tighter as s increases. It can be verified that the antiderivative (with the constant free parameter fixed so the function has the desired behavior) is\n`(a) = (a\u2212 1)(Erf(s(a\u2212 1))\u2212 1) 2 + e\u2212s 2(a\u22121)2 2 \u221a \u03c0s .\nBy a Taylor expansion of the error function, we have that\n`\u2032(a) = \u22121 2 + 1\u221a \u03c0 \u221e\u2211 n=0 (\u22121)n(s(a\u2212 1))2n+1 n!(2n+ 1) .\nThus, `\u2032+(a) in this case can be upper bounded by\n1 2 + 1\u221a \u03c0 \u221e\u2211 n=0 (sa)2n+1 n!(2n+ 1) \u2264 1 2 + 1 as \u221a \u03c0 \u221e\u2211 n=0 (sa)2(n+1) (n+ 1)! \u2264 1 2 + 1 as \u221a \u03c0 ( es 2a2 \u2212 1 ) ."}, {"heading": "D Proof of Thm. 4", "text": "Our algorithm corresponds to Zinkevich\u2019s algorithm [17] in a finite horizon setting, where we assume\nthe sequence of examples is g\u03031\u03a8\u0303(x1), . . . , g\u0303T \u03a8\u0303(xT ), the cost function is linear, and the learning rate\nat round t is \u03b7/ \u221a T . By a straightforward adaptation of the standard regret bound for that algorithm (see [17]), we have that for any w such that \u2016w\u20162 \u2264 Bw, T\u2211 t=1 \u3008wt, g\u0303t\u03a8\u0303(xt)\u3009 \u2212 T\u2211 t=1 \u3008w, g\u0303t\u03a8\u0303(xt)\u3009 \u2264 1 2 ( Bw \u03b7 + \u03b7 T T\u2211 t=1 \u2016g\u0303t\u03a8\u0303(xt)\u20162 ) \u221a T .\nWe now take expectation of both sides in the inequality above. The expectation of the right-hand side is simply\nE\n[ 1\n2 ( Bw \u03b7 + \u03b7 T T\u2211 t=1 Et [ g\u03032t ] Et [ \u2016\u03a8\u0303(xt)\u20162 ])\u221a T ] \u2264 1 2 ( Bw \u03b7 + \u03b7Bg\u0303B\u03a8\u0303 )\u221a T .\nAs to the left-hand side, note that\nE [ T\u2211 t=1 \u3008wt, g\u0303t\u03a8\u0303(xt)\u3009 ] = E [ T\u2211 t=1 Et [ \u3008wt, g\u0303t\u03a8\u0303(xt)\u3009 ]] = E [ T\u2211 t=1 \u3008wt, yt`\u2032 ( yt\u3008wt,\u03a8(xt)\u3009 ) \u03a8(xt)\u3009 ] .\nAlso,\nE [ T\u2211 t=1 \u3008w, g\u0303t\u03a8\u0303(xt)\u3009 ] = T\u2211 t=1 \u3008w, `\u2032 ( yt\u3008wt,\u03a8(xt)\u3009 ) \u03a8(xt)\u3009 .\nPlugging in these expectations and choosing \u03b7 = \u221a\nBw Bg\u0303B\u03a8\u0303 , we get that for any w such that \u2016w\u20162 \u2264 Bw,\nE [ T\u2211 t=1 \u3008wt, yt`\u2032 ( yt\u3008wt,\u03a8(xt)\u3009 ) \u03a8(xt)\u3009 \u2212 T\u2211 t=1 \u3008w, `\u2032 ( yt\u3008wt,\u03a8(xt)\u3009 ) \u03a8(xt)\u3009 ] \u2264 \u221a BwBg\u0303B\u03a8\u0303T .\nTo get the theorem, we note that by convexity of `, the left-hand side above can be lower bounded by\nE [ T\u2211 t=1 `(yt\u3008wt,\u03a8(xt)\u3009)\u2212 T\u2211 t=1 `(yt\u3008w,\u03a8(xt)\u3009) ] ."}, {"heading": "E Proof of Theorem 3", "text": "Fix a large enough Bw \u2265 1 to be specified later. Let x = (1, 0, . . . , 0) and let D to be the uniform distribution on {3x,\u2212x}. To prove the result then we just need to show that\nargmin w : |w|2\u2264Bw `(3w, 1) + `(\u2212w, 1) and argmin w : |w|2\u2264Bw `(w, 1) (7)\nare disjoint, for some appropriately chosen Bw. First, we show that the first set above is a subset of {w : |w|2 \u2264 R} for some fixed R which does not depend on Bw. We do a case-by-case analysis, depending on how `(\u00b7, 1) looks like.\n1. `(\u00b7, 1) monotonically increases in R. Impossible by assumption (2).\n2. `(\u00b7, 1) monotonically decreases in R. First, recall that since `(\u00b7, 1) is convex, it is differentiable almost anywhere, and its derivative is monotonically increasing. Now, since `(\u00b7, 1) is convex and bounded from below, `\u2032(w, 1) must tend to 0 as w \u2192\u221e (wherever `(\u00b7, 1) is differentiable, which is almost everywhere by convexity). Moreover, by assumption (2), `\u2032(w, 1) is upper bounded by a strictly negative constant for any w < 0. As a result, the gradient of `(3w, 1) + `(\u2212w, 1), which equals 3`\u2032(3w, 1) \u2212 `\u2032(\u2212w, 1), must be positive for large enough w > 0, and negative for large enough w < 0, so the minimizers of `(3w, 1) + `(\u2212w, 1) are in some bounded subset of R.\n3. There is some s \u2208 R such that `(\u00b7, 1) monotonically decreases in (\u2212\u221e, s) and monotonically increases in (s,\u221e). If the function is constant in (s,\u221e) or in (\u2212\u221e, s), we are back to one of the two previous cases. Otherwise, by convexity of `(\u00b7), we must have some a, b, a \u2264 s \u2264 b, such that `(\u00b7, 1) is strictly decreasing at (\u2212\u221e, a), and strictly increasing at (b,\u221e). In that case, it is not hard to see that `(3w, 1) + `(\u2212w, 1) must be strictly increasing for any w > max{|a|, |b|}, and strictly decreasing for any w < \u2212max{|a|, |b|}. So again, the minimizers of `(3w, 1) + `(\u2212w, 1) are in some bounded subset of R.\nWe are now ready to show that the two sets in (7) must be disjoint. Suppose we pick Bw large enough so that the first set in (7) is strictly inside {w : |w|2 \u2264 Bw}. Assume on the contrary that there is some w, |w|2 < Bw, which belongs to both sets in (7). By assumption (2) and the fact that w minimizes `(w, 1), we may assume w > 0. Therefore, 0 \u2208 \u2202`(w, 1) as well as 0 \u2208 \u2202(`(3w, 1) + `(\u2212w, 1)), where \u2202f is the (closed and convex) subgradient set of a convex function f . By subgradient calculus, this means there is some a/3 \u2208 \u2202`(3w, 1) and b \u2208 \u2202`(\u2212w, 1) such that a/3 \u2212 b = 0. This implies that \u2202`(3w, 1) \u2229 \u2202`(\u2212w, 1) 6= \u2205. Now, suppose that max \u2202`(\u2212w, 1) < 0. This would mean that min \u2202`(3w, 1) < 0. But then `(\u00b7, 1) is strictly decreasing at (w, 3w), and in particular `(w, 1) > `(3w, 1), contradicting the assumption that w minimizes `(\u00b7, 1). So we must have max \u2202`(\u2212w, 1) \u2265 0. Moreover, min \u2202`(\u2212w, 1) \u2264 0 (because w minimizes `(\u00b7, 1) and \u2212w < w). Since the subgradient set is closed and convex, it follows that 0 \u2208 \u2202`(\u2212w, 1). Therefore, both w and \u2212w minimize `(\u00b7, 1). But this means that `\u2032(0) = 0, in contradiction to assumption (2)."}, {"heading": "F Proof of Thm. 5", "text": "Let D be a distribution which satisfies (3). The idea of the proof is that the learner cannot know if D is the real distribution (on which regret is measured) or the distribution which includes noise. Specifically, consider the following two adversary strategies:\n1. At each round, draw an example from D, and present it to the learner (with the label 1) without adding noise.\n2. At each round, pick the example ED[x], add to it zero-mean noise sampled from Z \u2212 ED[x], where Z is distributed according to D, and present the noisy example (with the label 1) to the learner.\nIn both cases the examples presented to a learner appear to come from the same distribution D. Hence, any learner observing one copy of each example cannot know which of the two strategies is played by the adversary. Since (3) implies that the set of optimal learner strategies for each of the\ntwo adversary strategies are disjoint, by picking an appropriate strategy the adversary can force a constant regret.\nTo formalize this argument, fix any learning algorithm that observes one copy of each example and let w1,w2, . . . be the sequence of generated predictors. Then it is sufficient to show that at least one of the following two holds\nlim sup T\u2192\u221e max w\u2208W\nE\n[ 1\nT T\u2211 t=1 `(\u3008wt,xt\u3009, 1)\u2212 ` (\u3008w,xt\u3009, 1)\n] > 0 (8)\nlim sup T\u2192\u221e\n1\nT T\u2211 t=1 `(\u3008wt,E[x]\u3009, 1)\u2212 min w\u2208W ` ( \u3008w,E[x]\u3009, 1 ) > 0 w.p. 1 (9)\nwhere in both cases the expectation is with respect to D and \u201cw.p. 1\u201d refers to the randomness of the noise. First note that (8) is implied by\nlim sup T\u2192\u221e\n1\nT T\u2211 t=1 `(\u3008wt,xt\u3009, 1)\u2212 min w\u2208W E [ `(\u3008w,x\u3009, 1) ] > 0 w.p. 1. (10)\nSince W is compact, D is assumed to be supported on a compact subset, and ` is convex and hence continuous, then `(\u3008w,x\u3009, 1) is almost surely bounded. So by Azuma\u2019s inequality\n\u221e\u2211 T=1 P\n( 1\nT T\u2211 t=1 ( Et [ `(\u3008wt,x\u3009, 1) ] \u2212 `(\u3008wt,xt\u3009, 1) ) \u2265 ) <\u221e \u2200 > 0 .\nwhere the expectation Et[ \u00b7 ] is conditioned on the randomness in the previous rounds. Letting w\u0304t = 1 t \u2211t s=1 ws (which belongs to W for all t since it is a convex set), we have\n1\nT T\u2211 t=1 `(\u3008wt,xt\u3009, 1) \u2265 1 T T\u2211 t=1 Et[`(\u3008wt,x\u3009, 1)] \u2265 E [ ` ( \u3008w\u0304T ,x\u3009, 1 )] where the first inequality holds with probability 1 as T \u2192\u221e by the Borel-Cantelli lemma, and the second one holds for every T because ` is convex.\nSimilarly,\n1\nT T\u2211 t=1 `(\u3008wt,E[x]\u3009, 1) \u2265 ` ( \u3008w\u0304T ,E[x]\u3009, 1 ) .\nHence (9)\u2013(10) are obtained if we show that no single sequence of predictors w\u03041, w\u03042, . . . simultaneously satisfies\nlim sup T\u2192\u221e F1(w\u0304T ) \u2264 0 and lim sup T\u2192\u221e F2(w\u0304T ) \u2264 0 (11)\nwhere F1(wT ) = E [ ` ( \u3008w\u0304T ,x\u3009, 1 )] \u2212min w\u2208W E [ ` (\u3008w,x\u3009, 1) ] F2(wT ) = ` ( \u3008w\u0304T ,E[x]\u3009, 1 ) \u2212min w\u2208W ` ( \u3008w,E[x]\u3009, 1 ) .\nSuppose on the contrary that there was such a sequence. Since w\u0304T \u2208 W for all T , and W is compact, the sequence w\u03041, w\u03042, . . . has at least a cluster point w\u0304 \u2208 W. Moreover, it is easy to verify that the functions F1 and F2 are continuous. Indeed, `(\u3008\u00b7,E[x]\u3009, 1) is continuous by convexity of ` and E[`(\u3008\u00b7,x\u3009, 1)] is continuous by the compactness assumptions. Hence, any cluster point of w\u03041, w\u03042, . . . is also a cluster point of both F1 and F2. Since F1, F2 \u2265 0 by construction, and we are assuming that neither F1(w\u0304) > 0 nor F1(w\u0304) > 0 for any cluster point w\u0304, we must have F1(w\u0304) = F2(w\u0304) = 0. But this means that w\u0304 belongs to both sets appearing in (3), in contradiction to the assumption they are disjoint. Thus, no sequence of predictors satisfies (11), as desired."}], "references": [], "referenceMentions": [], "year": 2010, "abstractText": "We study online learning when individual instances are corrupted by adversarially chosen<lb>random noise. We assume the noise distribution is unknown, and may change over time<lb>with no restriction other than having zero mean and bounded variance. Our technique relies<lb>on a family of unbiased estimators for non-linear functions, which may be of independent<lb>interest. We show that a variant of online gradient descent can learn functions in any dot-<lb>product (e.g., polynomial) or Gaussian kernel space with any analytic convex loss function.<lb>Our variant uses randomized estimates that need to query a random number of noisy copies<lb>of each instance, where with high probability this number is upper bounded by a constant.<lb>Allowing such multiple queries cannot be avoided: Indeed, we show that online learning is<lb>in general impossible when only one noisy copy of each instance can be accessed.", "creator": "LaTeX with hyperref package"}}}