{"id": "1102.4925", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Feb-2011", "title": "Worst-Case Upper Bound for (1, 2)-QSAT", "abstract": "The rigorous theoretical analysis of the algorithm for a subclass of QSAT, i.e. (1, 2)-QSAT, has been proposed in the literature. (1, 2)-QSAT, first introduced in SAT'08, can be seen as quantified extended 2-CNF formulas. Until now, within our knowledge, there exists no algorithm presenting the worst upper bound for (1, 2)-QSAT. Therefore in this paper, we present an exact algorithm to solve (1, 2)-QSAT. By analyzing the algorithms, we obtain a worst-case upper bound O(1.4142m), where m is the number of clauses.", "histories": [["v1", "Thu, 24 Feb 2011 08:24:04 GMT  (467kb)", "http://arxiv.org/abs/1102.4925v1", "submitted to SAT11"], ["v2", "Sat, 26 Mar 2011 03:20:14 GMT  (467kb)", "http://arxiv.org/abs/1102.4925v2", null]], "COMMENTS": "submitted to SAT11", "reviews": [], "SUBJECTS": "cs.AI cs.CC", "authors": ["minghao yin"], "accepted": false, "id": "1102.4925"}, "pdf": {"name": "1102.4925.pdf", "metadata": {"source": "CRF", "title": "Worst-Case Upper Bound for (1, 2)-QSAT", "authors": ["Minghao Yin"], "emails": ["ymh@nenu.edu.cn"], "sections": [{"heading": null, "text": "QSAT, i.e. (1, 2)-QSAT, has been proposed in the literature. (1, 2)-QSAT, first introduced in SAT\u201908, can be seen as quantified extended 2-CNF formulas. Until now, within our knowledge, there exists no algorithm presenting the worst upper bound for (1, 2)-QSAT. Therefore in this paper, we present an exact algorithm to solve (1, 2)-QSAT. By analyzing the algorithms, we obtain a worst-case upper bound O(1.4142m), where m is the number of clauses.\nKeywords: (1, 2)-QSAT; the worst case; upper bound"}, {"heading": "1 Introduction", "text": "Quantified Boolean Formulas (QBF) can be viewed as a generalization version of the Boolean satisfiability (SAT) with existential or universal quantifiers to every variable in propositional formulas. This problem permits both universal and existential quantifiers over Boolean variables. Deciding whether a QBF is satisfiable is the prototypical problem for PSPACE-complete problems, and is also one of the most important issues in artificial intelligence field. Many practical problems can be\ntransformed into QBF, such as intelligent planning problems, non-monotonic reasoning problems and reasoning about knowledge problems.\nBased on the fact that there is no polynomial time algorithm exists for SAT problems, assuming P\u2260NP stands, developing fast exact algorithm for testing satisfiability of propositional formulas are crucial in determining the scale of the problems that can be solved. Because a slight improvement from O(c k ) to O((c-)k)\nmay significantly increase the size of the problem being tractable, it is not surprising to view tremendous efforts made by researchers to designing exact algorithms providing better upper bound of SAT problems. Take 3-SAT problem for instance. The currently best upper bound for deterministic algorithm is O(1.439 n ) achieved by Kutzkov and Scheder [6], and that for local search algorithm is O(1.32216 n ) achieved by Rolf [7].\nWhen it comes to QBF problem, the best upper bound of QBF problem in 3CNF (conjunctive normal form) is O(1.619 m ) where m is the number of clauses, as can be seen in ([8]. However, this upper bound is achieved under the restriction that the number of clauses should be equal to the number of variables. Moreover, Williams pointed out that when the clause-to-variable ratio approaches 2, the bound approaches 2 n . In this paper, we focus on a subclass of closed quantified Boolean formulas, (1, 2)- QSAT, which was first introduced in [2]. (1, 2)-QSAT-formulas are in the form of\n( , )X Y X Y  , where X has 1n variables, Y has 2n variables, and ( , )X Y is a conjunction of 3-clauses, each of which containing exactly one universal literal and two existential ones. This problem can be seen as an extension version of 2SAT. An\nextreme situation is that when 1n is of logarithmic order compared to the number of\nvariables n, this problem can be solved in polynomial time. But in general case, this problem is co-NP-complete [2]. Creignou have studied the phase transition phenomenon of (1, 2)-QSAT [2, 3]. However, up to now, within our knowledge, no literals have studied the worst upper bound of the problem. Therefore in this paper, we focus on deriving a non-trivial worst case upper bound for (1, 2)-QSAT. Specifically, we present an algorithm to slove (1, 2)-QSAT. By analyzing the algorithm, we obtain a worst-case upper bounds O(1.4142 m ), where m is the number of clauses."}, {"heading": "2 Basic Concepts", "text": "In this section, we recall some necessary concepts in this paper. We describe some definitions used in this paper. A variable x can take the values true or false. A literal of a variable is either the unnegated literal x, having the same truth value as the variable, or the negated literal x, having the opposite truth value as the variable. A clause is a disjunction of literals, referred to as a k-clause if the clause is a disjunction on k literals. A k-SAT formula F in Conjunction Normal Form (CNF) is a conjunction of clauses, each of which contains exactly k literals. A (1, 2)-QSAT formula F is in the form of\n( , )X Y X Y \nwhere X has 1n variables, Y has 2n variables, and ( , )X Y is a conjunction of 3- clauses, each of which containing exactly one universal literal and two existential ones. We define m as the number of clauses in F, and n as the number of variables F contains. Note that (1, 2)-QSAT can be viewed as an extension version of 2SAT,\nbecause if we can get a formula of 2SAT by deleting the universal literal in each clause and the superfluous arbitrary quantifier of (1, 2)-QSAT. A truth assignment for F is a map that assigns each variable a value. A (1, 2)-QSAT formula is satisfiable if for each assignment of the variables X, there exists an assignment to the variables Y such that  is true."}, {"heading": "3 Estimating the Running Time", "text": "In this section, we explain how to compute the complexity of our algorithms. We will use a notion called branching tree. The branching tree [5] is a hierarchical tree structure consisting of a set of nodes, and each node is labeled with a proposition formula. Consider a node labeled with a formula F, then its sons are labeled with the sub formulae F1, F2,\u2026, Fn , with Fi(1 i n) being obtained by assigning a value to one of the variables in F. According to the above definition we can see that the process of constructing a branching tree is the same as the process of executing DPLL-style algorithms, therefore, we make use of the branching tree to estimate the time complexity.\nIn the branching tree, every node has a branching tuple [4]. Suppose a node is labeled with F0 and its children nodes are labeled with F1, F2, \u2026, Fk. Then the branching tuple of that node is (r1, r2,\u2026, rk), where ri=m(F0)-m(Fi) (m(F0) represents the number of clauses of F0). The value of the branching tuple of a node, is called branching number ( (r1, r2,\u2026, rk)), which is obtained as the positive root of the following equation.\n1 i\nk\ni\nr x =1.\n(1)\nThe branching number of the branching tree can be defined as the maximum branching number(max (r1, r2,\u2026, rk))of nodes among the branching tree. There is a close relationship between the branching number of a branching tree and the running time (T(m)) of DPLL-style algorithms. Here, we assume that DPLL-style algorithms performing on each node take polynomial time. Then we obtain the following inequality.\nT(m) (max (r1, r2,\u2026, rk)) m  poly(F)= max\n1\nk\ni\nT(m-ri)) m  poly(F) . (2)\nWhere m is the number of clauses of the formula F, ploy(F) is the polynomial time\nexecuting on the node F, and\n(r1, r2,\u2026, rk)= 1\nk\ni\nT(m-ri). (3)\nIn addition, let m be the number of clauses, mi be the number of clauses in the subformula Fi (1 i k) of the formula F. If a QBF problem recursively solved by the DPLL-style algorithms, the time required doesn\u2019t increase, for\n1\nk\ni T(mi) T(m) where m = 1\nk\ni\nmi. (4)"}, {"heading": "4 Transformation Rules", "text": "This section discusses the transformation rules used in our algorithm for solving (1, 2)-QSAT. The transformation rules are applied before choosing a variable to branch. According to the complexity analysis described above, we just need to take into the difference value between the number of clauses of the input formula and the number of clauses of the formulae obtained from it by branching. The larger of the difference value, the smaller the upper bound obtained. In order to obtain a better upper bound, we should reduce as many clauses as possible. Therefore, we introduce some transformation rules such that the simplified formulae contain a fewer number of clauses and are equi-satisfiable with the original formula.\nTrivial falsity rule. A (1, 2)-QSAT F is false, if there is a clause C only containing universal variables.\nUnit clause rule. Let F be a (1, 2)-QSAT formula, if there is a unit clause C={li} whose the only variable is existential, then the unit literal li must be assigned true.\nNote that the unit clause rule only can be applicable to the existential variables. Similarly, the unit propagation rule is also applicable to the existential variables. In fact, if there is a unit clause whose only variable is universal, then the (1, 2)-QSAT is false based on the trivial falsity rule. Therefore, the unit clause rule and the unit propagation rule are ruled out for universal variables. In the following, we will describe the unit propagation rule.\nUnit propagation rule. Let F be a (1, 2)-QSAT formula, if F contains a unit literal li and the literal is existential, then the unit propagation rule executes the following. (1) Remove all clauses containing the literal li from F; (2) Delete all occurrences of the negation of the literal li from the other clauses; (3) Perform the process as far as possible.\nMonotone literal rule. Given a (1, 2)-QSAT F and a monotone literal li in F, if li is universal, then li must be assigned false; if li is existential, then li must be assigned true.\nNotice that the trivial falsity rule enables us to judge their truth value directly. And the other transformation rules can simplify the formulae into simpler ones. Now we discuss the equivalence between the simplified formula and the original one.\nTheorem 1. Given a (1, 2)-QSAT F and a simplified formula F\u2019 obtained by applying the unit clause rule, the unit propagation rule, and the monotone literal rule, F and F\u2019 are equi-satisfiable. Proof. In order to prove F and F\u2019 are equi-satisfiable, we need to prove the three rules make the simplified formula equi-satisfiable with F respectively.\n(1) F and F\u2019 are equi-satisfiable where F\u2019 is obtained from F by using the unit\nclause rule.\nSuppose F\u2019 is satisfiable. Consider a satisfying assignment I for F\u2019. It is obvious that the assignment I {li} satisfies F. On the other hand, in all satisfying assignments to F, the truth assignment to li must be true. And F\u2019\\ F = . Therefore, each assignment satisfying F also satisfies F\u2019.\n(2) F and F\u2019 are equi-satisfiable where F\u2019 is obtained from F by using the unit\npropagation rule.\nWe know that F is satisfiable if and only if 'F is satisfiable, where 'F is obtained from F by using unit clause rule from (1). As a matter of fact, the unit propagation rule is performed based on the unit clause rule which is applied repeatedly as new unit clauses are generated. Therefore, F and F\u2019 are equi-satisfiable.\n(3) F and F\u2019 are equi-satisfiable where F\u2019 is obtained from F by using the\nmonotone literal rule.\nWe prove it in two cases. The one is that li is universal; the other case is that li is\nexistential. Let\u2019s consider the first case.\nli is universal. Suppose F\u2019 is satisfiable. Consider a satisfying assignment I for F\u2019. The assignment I satisfies the clauses that originally contain li in F. Since li assigned false has no influence to the truth value of the clauses li in, I { li } satisfies F. Moreover, it is clear that I {li } also satisfies F. Therefore, if F\u2019 is satisfiable, F is also satisfiable. On the contrary, since F\u2019\\ F = , each assignment satisfying F also satisfies F\u2019.\nli is existential. We assume that there is a satisfying assignment I for F\u2019. It is obvious that the assignment I { li } satisfies F. On the other hand, F\u2019\\ F = . Thus, each assignment satisfying F also satisfies F\u2019.\nTherefore, F and F\u2019 are equi-satisfiable, where F\u2019 is obtained by applying the unit\nclause rule, the unit propagation rule, and the monotone literal rule. \n5 Algorithm Sm for Solving (1, 2)-QSAT\nIn this section, we present the algorithm Sm for solving (1, 2)-QSAT and prove an upper bound O(1.4142 m ). The basic idea of the algorithm is to choose a variable in the outermost quantification set to branch, firstly transforming 3-CNF clauses into 2-CNF ones, and then solving the 2-CNF QSAT directly. The algorithm Sm has one subroutine, Function Reducem, which is to reduce F as far as possible by using the trivial falsity rule, the unit clause rule, the unit propagation rule, and the monotone literal rule. In the following, we describe the Function Reducem in Figure 1. In the function, Exist_literals (resp. Univer_literals) denotes the set of the existential literals (resp. universal literals); {C: li C } denotes the clauses contain the literal li.\nFunction Reducem (F) (R1): If there is a clause C containing only universal literals, then return false. (R2): For all C ={ li } and li Exist_literals,\nF:= F /{C: li C }, F:= F /{C: li C } {C: li C }/ li,\nEndfor\n(R3): If there is a monotone literal li in F and li Exist_literals, then\nF:= F /{C: li C }, F:= F /{C: li C } {C: li C }/ li,\nEndif If there is a monotone literal li in F and li Univer_literals, then\nF:= F /{C: li C } {C: li C }/li,\nEndif\n(R4): If F changed in (R1) - (R3), then Reducem (F).\nReturn F.\nFig. 1. Framework of Function Reducem.\nNext, let\u2019s consider the algorithm Sm. Given a (1, 2)-QSAT F, the basic strategy of Davis-Putnam-Logemann-Loveland (DPLL) is to choose a variable vi in the outermost quantification set. As we know, each clause in the (1, 2)-QSAT formulae consists of exactly one universal literal and two existential literals, and the universal literal is earlier quantified than the two existential literals. In other words, if there is a universal variable in a clause, the variable must be chosen as a branch variable when the algorithm deals with the clause. In the following, we propose the framework of the algorithm Sm in Figure 2. At first, F is simplified by the Function Reducem (line 1). If the simplified F is empty, then Sm stops and returns true, which means the input formula F is satisfiable (line 2). If the simplified F contains an empty clause, then Sm stops and returns false, which means the input formula F is unsatisfiable (line 3). If the algorithm doesn\u2019t stop, it chooses variables obey the quantification order until the (1, 2)-QSAT formula doesn\u2019t contain 3-CNF clauses (line 4). If the chosen variable is an existential variable, we just need to make sure one of the two branches is satisfiable. And if the chosen variable is a universal variable, we need to make sure that both branches lead to a satisfying assignment. When there is no 3-CNF clause, the algorithm will solve the formula by QSAT2(F). Note that the function QSAT2(F) can solve the 2-CNF QSAT in polynomial time [1]."}, {"heading": "6 Complexity Analysis", "text": "In this section, we use the branching tree to estimate the time complexity of the algorithm Sm. Since the function QSAT2(F) can solve the 2-CNF QSAT in polynomial time, we only need to estimate the running time taken in the process of transformation from 3-clause formula into 2-clause formulae. The detailed proof will be presented in Theorem 2. Note that when computing the elements of the branching tuple, we only count the number of clauses without the universal variables by branching. This is because the simplified clauses containing only existential literals can be obtained by reducing or branching, but the simplified clauses containing universal literals can only be obtained by branching.\nTheorem 2. Algorithm Sm runs in O(1.4142 m ) time, where m is the number of clauses. Proof. Let us analyze the algorithm in detail.\nCase 1 (line 1) is the course of simplification, which can solve in polynomial time.\nThus it runs in O(1).\nCase 2 (line 2) and case 3 (line 3) can solve the problems completely. These cases\nrun in O(1).\nIn case 4.1, when li=true, every clause containing li is removed and li is removed from clauses. That is to say at least the clause { li, lj, lk } is removed and li is removed from the clause{ li, l\u2019j, l\u2019k }. Therefore, the current formula contains at least two 3-CNF clauses less than F. So we have T(m)=2T(m-2) because the same situation is encountered when li =false. This case takes O(1.4142 m ) time.\nIn case 4.2, when li=true, l\u2019j is forced to be assigned true. Thus, as least one clause is removed from F and another 2-CNF clause is reduced to a clause consisting of only existential literal. When li =false, at lease two clauses are removed. Therefore, the worst case is when T(m)=T(m-2)+T(m-2) with solution O(1.4142 m ).\nIn case 4.3, since li=true, l\u2019j is forced to be assigned true. Then every clause containing li or l\u2019j is removed, and therefore, the current formula contains at least three clauses less than F. When li =false, every clause containing  li is removed and li is removed from clauses. Thus, at least one clause removed from F and one 3-CNF clause is reduced to 2-CNF clause. Therefore, the worst case is when T(m)=T(m2)+T(m-2) with solution O(1.4142 m ).\nIn total, the upper bound for the algorithm Sm is O(1.4142 m ). "}, {"heading": "7 Conclusion", "text": "This paper addresses the worst-case upper bound for the (1, 2)-QSAT problem with the number of clauses as the parameter. The basic idea behind the algorithm is to transform 3-CNF clauses into 2-CNF ones, and then solving the 2-CNF QSAT directly. After a skillful analysis of these algorithms, we obtain the worst-case upper bound O(1.4142 m ) for X3SAT."}, {"heading": "Acknowledgments", "text": "This research is fully supported by the National Natural Science Foundation of China under Grant No.60803102, and also funded by NSFC Major Research Program 60496321: Basic Theory and Core Techniques of Non Canonical Knowledge."}], "references": [{"title": "A linear-time algorithm fortesting thetruth of certain quantified Boolean formulas, Information Processing", "author": ["B. Apswall", "F. Plass M", "E. Tarjan R"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1979}, {"title": "New results on the phase transition for random quantified Boolean formulas", "author": ["N. Creignou", "H. Daud\u00e9", "U. Egly", "R. Rossignol"], "venue": "Proceedings of SAT 2008. LNCS, vol. 4996, pp. 34\u201347. Springer, Heidelberg", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2008}, {"title": "1, 2)-QSAT: A Good Candidate for Understanding Phase Transitions Mechanisms", "author": ["N. Creignou", "H. Daud\u00e9", "U. Egly", "R. Rossignol"], "venue": "Proceedings of SAT\u201909: pp. 363-376.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2009}, {"title": "Improved Algorithms for 3-Coloring, 3-Edge-Coloring, and Constraint Satisfaction", "author": ["D. Eppstein"], "venue": "Proceedings of 12th ACM-SIAM Symposium on Discrete Algorithms,pp.329337", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2001}, {"title": "A", "author": ["E. Hirsch"], "venue": "New worst-case upper bounds for SAT, Journal of Automated Reasoning, 24(4): 397-420.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2000}, {"title": "Using CSP to improve deterministic 3-SAT", "author": ["K. Kutzkov", "D. Scheder"], "venue": "arXiv:1007.1166v2,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2010}, {"title": "Improved bound for the PPSZ/Schoning-algorithm for 3-SAT", "author": ["D. Rolf."], "venue": "Electronic Colloquium on Computational Complexity (ECCC), 159,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2005}, {"title": "Algorithms for quantified Boolean formulas", "author": ["R. Williams"], "venue": "Proc. 13 ACM-SIAM Symp. On Discrete Algorithms (SODA), pp. 299-307.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2002}, {"title": "New Worst-Case Upper Bound for #2-SAT and #3-SAT with the Number of Clauses as the Parameter", "author": ["J. Zhou", "M. Yin", "C. Zhou"], "venue": "Proceedings of AAAI,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 5, "context": "439 n ) achieved by Kutzkov and Scheder [6], and that for local search algorithm is O(1.", "startOffset": 40, "endOffset": 43}, {"referenceID": 6, "context": "32216 n ) achieved by Rolf [7].", "startOffset": 27, "endOffset": 30}, {"referenceID": 7, "context": "619 m ) where m is the number of clauses, as can be seen in ([8].", "startOffset": 61, "endOffset": 64}, {"referenceID": 1, "context": "In this paper, we focus on a subclass of closed quantified Boolean formulas, (1, 2)QSAT, which was first introduced in [2].", "startOffset": 119, "endOffset": 122}, {"referenceID": 1, "context": "But in general case, this problem is co-NP-complete [2].", "startOffset": 52, "endOffset": 55}, {"referenceID": 1, "context": "Creignou have studied the phase transition phenomenon of (1, 2)-QSAT [2, 3].", "startOffset": 69, "endOffset": 75}, {"referenceID": 2, "context": "Creignou have studied the phase transition phenomenon of (1, 2)-QSAT [2, 3].", "startOffset": 69, "endOffset": 75}, {"referenceID": 4, "context": "The branching tree [5] is a hierarchical tree structure consisting of a set of nodes, and each node is labeled with a proposition formula.", "startOffset": 19, "endOffset": 22}, {"referenceID": 3, "context": "In the branching tree, every node has a branching tuple [4].", "startOffset": 56, "endOffset": 59}, {"referenceID": 0, "context": "Note that the function QSAT2(F) can solve the 2-CNF QSAT in polynomial time [1].", "startOffset": 76, "endOffset": 79}], "year": 2011, "abstractText": "The rigorous theoretical analysis of the algorithm for a subclass of QSAT, i.e. (1, 2)-QSAT, has been proposed in the literature. (1, 2)-QSAT, first introduced in SAT\u201908, can be seen as quantified extended 2-CNF formulas. Until now, within our knowledge, there exists no algorithm presenting the worst upper bound for (1, 2)-QSAT. Therefore in this paper, we present an exact algorithm to solve (1, 2)-QSAT. By analyzing the algorithms, we obtain a worst-case upper bound O(1.4142), where m is the number of clauses.", "creator": "Microsoft\u00ae Office Word 2007"}}}