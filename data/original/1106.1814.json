{"id": "1106.1814", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Jun-2011", "title": "When do Numbers Really Matter?", "abstract": "Common wisdom has it that small distinctions in the probabilities (parameters) quantifying a belief network do not matter much for the results of probabilistic queries. Yet, one can develop realistic scenarios under which small variations in network parameters can lead to significant changes in computed queries. A pending theoretical question is then to analytically characterize parameter changes that do or do not matter. In this paper, we study the sensitivity of probabilistic queries to changes in network parameters and prove some tight bounds on the impact that such parameters can have on queries. Our analytic results pinpoint some interesting situations under which parameter changes do or do not matter. These results are important for knowledge engineers as they help them identify influential network parameters. They also help explain some of the previous experimental results and observations with regards to network robustness against parameter changes.", "histories": [["v1", "Thu, 9 Jun 2011 13:54:07 GMT  (342kb)", "http://arxiv.org/abs/1106.1814v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["h chan", "a darwiche"], "accepted": false, "id": "1106.1814"}, "pdf": {"name": "1106.1814.pdf", "metadata": {"source": "CRF", "title": "When do Numbers Really Matter?", "authors": ["Hei Chan", "Adnan Darwiche"], "emails": ["hei@cs.ucla.edu", "darwiche@cs.ucla.edu"], "sections": [{"heading": "1. Introduction", "text": "A belief network is a compact representation of a probability distribution (Pearl, 1988; Jensen, 2001). It consists of two parts, one qualitative and the other quantitative. The qualitative part of a belief network (called its structure) is a directed acyclic graph in which nodes represent domain variables and edges represent direct influences between these variables. The quantitative part of a belief network is a set of conditional probability tables (CPTs) that quantify our beliefs in such influences. Figure 1 depicts the structure of a belief network and Figure 2 depicts its CPTs.1\nAutomated reasoning systems based on belief networks have become quite popular recently as they have enjoyed much success in a number of real-world applications. Central to the development of such systems is the construction of a belief network (hence, a probability distribution) that faithfully represents the domain of interest. Although the automatic synthesis of belief networks\u2014based on design information in certain applications and based on learning techniques in others\u2014has been drawing a lot of attention recently, mainstream methods for constructing such networks continue to be based on traditional knowledge engineering (KE) sessions involving domain experts. One of the central issues that arise in such KE sessions is the assessment of impact that changes in network parameters may have on probabilistic queries of interest.\nConsider for example the following common method for constructing belief networks in medical diagnosis applications (Coupe\u0301, Peek, Ottenkamp, & Habbema, 1999). First, the\n1. This specific network and its CPTs are distributed with the evaluation version of the commercial HUGIN system at http://www.hugin.com/.\nc\u00a92002 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.\nnetwork structure is developed. Next, parameters are estimated by non-experts using a combination of statistical data and qualitative influences available from textbook materials. Finally, medical experts are brought in to evaluate the network and fine-tune its parameters. One method of evaluation is to pose diagnostic scenarios to the network, and compare the results of such queries to those expected by the experts. For example, given some set of symptoms e, and two potential diagnoses y and z, the network may give us the conclusion that Pr(y | e)/Pr(z | e) = 2, while a domain expert may believe that the ratio should be no less than 4. Assuming that the network structure is correct, a central question is then: which network parameters should be changed to give us the correct ratio, and by how much?\nTo automate the task of identifying such parameter changes, we have recently developed a belief network tool, called SamIam (Sensitivity Analysis, Modelling, Inference And\nMore)2. One of its feature is sensitivity analysis, which allows domain experts to fine-tune network parameters in order to enforce constraints on the results of certain queries. Users can specify the constraint that they want to enforce, and SamIam will automatically decide whether a given parameter is relevant to this constraint, and if it is, will compute the minimum amount of change to that parameter which is needed to enforce the constraint. The technical details of our approach to sensitivity analysis are the subject of Section 2.\nAs we experimented with SamIam, we ran into scenarios that we found to be surprising at first glance. Specifically, there were many occasions in which queries would be quite sensitive to small variations in certain network parameters. Consider the scenario in Figure 3 for one example, which corresponds to the network detailed in Figures 1 and 2. Here, we have evidence e = report , smoke: people are reported to be evacuating a building, but there is no evidence for any smoke. This evidence should make tampering more likely than fire, and the given belief network does indeed reflect this with Pr(tampering | e) = .50 and Pr(fire | e) = .03. We wanted, however, the probability of tampering to be no less than .65. Hence, we asked SamIam to identify parameter changes that can enforce this constraint, and it made two recommendations:\n1. either decrease the probability of a false report, Pr(report | leaving), from its current value of .01 to \u2264 .0047,\n2. SamIam is developed by the UCLA Automated Reasoning Group. Its web page is at http://reasoning.cs.ucla.edu/.\n2. or increase the prior probability of tampering from its current value of .02 to \u2265 .036.\nTherefore, the distinctions between .02 and .036, and the one between .01 and .0047, do really matter in this case as each induces an absolute change of .15 on the probabilistic query of interest. Note also that implicit in SamIam\u2019s recommendations is that the parameters of variables Fire, Smoke, Leaving, and Alarm are irrelevant to enforcing this constraint, i.e. no matter how much we change any of these parameters, we would not be able to enforce our desired constraint.\nThis example shows that the absolute change in a query can be much larger than the absolute change in the corresponding parameters. Later, we will show an example where an infinitesimal change to a network parameter leads to a change of .5 to a corresponding query. We also show examples in which the relative change in the probability of a query is larger than the corresponding relative change in a network parameter. One wonders then whether there is a different method for measuring probabilistic change (other than absolute or relative), which allows one to non-trivially bound the change in a probabilistic query in terms of the corresponding change in a network parameter.\nTo answer this and related questions, we conduct in Section 3 an analytic study of the partial derivative of a probabilistic query Pr(y | e) with respect to some network parameter \u03b8x|u. Our study leads us to three main results:\n1. a bound on the derivative in terms of Pr(y | e) and Pr(x | u) only, which is independent of any other aspect of the given belief network;\n2. a bound on the sensitivity of queries to infinitesimal changes in network parameters;\n3. a bound on the sensitivity of queries to arbitrary changes in network parameters.\nThe last bound in particular shows that the amount of change in a probabilistic query can be bounded in terms of the amount of change in a network parameter, as long as change is understood to be the relative change in odds. This result has a number of practical implications. First, it can relieve experts from having to be too precise when specifying certain parameters subjectively. Next, it can be important for approximate inference algorithms that pre-process network parameters to eliminate small distinctions in such parameters, in order to increase the efficiency of inference (Poole, 1998). Finally, it can be used to show that automated reasoning systems based on belief networks are robust and, hence, suitable for real-world applications (Pradhan, Henrion, Provan, Del Favero, & Huang, 1996).\nSection 4 is indeed dedicated to exploring the implications of the above bounds, where we provide an analytic explanation of why certain parameter changes don\u2019t matter. We finally close in Section 5 with some concluding remarks. Proofs of all theorems are given in Appendix A."}, {"heading": "2. The Tuning of Network Parameters", "text": "We report in this section on a tool that we have been developing, called SamIam, for finetuning network parameters (Laskey, 1995; Castillo, Gutie\u0301rrez, & Hadi, 1997; Jensen, 1999; Kj\u00e6rulff & van der Gaag, 2000; Darwiche, 2000). Given a belief network, some evidence e, which is an instantiation of variables E in the belief network, and two events y and z of variables Y and Z respectively, where Y, Z 6\u2208 E, our tool can efficiently identify parameter changes needed to enforce the following types of constraints:\nDifference: Pr(y | e) \u2212 Pr(z | e) \u2265 \u01eb;\nRatio: Pr(y | e)/Pr(z | e) \u2265 \u01eb.\nThese two constraints often arise when we debug belief networks. For example, we can make event y more likely than event z, given evidence e, by specifying the constraint, Pr(y | e) \u2212 Pr(z | e) \u2265 0, or we can make event y at least twice as likely as event z, given evidence e, by specifying the constraint, Pr(y | e)/Pr(z | e) \u2265 2. We will discuss next how one would enforce the two constraints, but we need to settle some notational conventions and technical preliminaries first.\nVariables are denoted by upper-case letters (A) and their values by lower-case letters (a). Sets of variables are denoted by bold-face upper-case letters (A) and their instantiations are denoted by bold-face lower-case letters (a). For a variable A with values true and false, we use a to denote A = true and a to denote A = false. The CPT for variable X with parents U defines a set of conditional probabilities of the form Pr(x | u), where x is a value of variable X, u is an instantiation of parents U, and Pr(x | u) is a probability known as a network parameter and denoted by \u03b8x|u. We finally recall a basic fact about belief networks. The probability of some instantiation x of all network variables X equals the product of all network parameters that are consistent with that instantiation. For example, the probability of instantiation fire, tampering , smoke, alarm, leaving , report in Figure 1 equals .01\u00d7 .98\u00d7 .9\u00d7 .99\u00d7 .12\u00d7 .01, which is the product of network parameters (from Figure 2) that are consistent with this instantiation."}, {"heading": "2.1 Binary Variables", "text": "We first consider the parameters of a binary variable X, with two values x and x and, hence, two parameters \u03b8x|u and \u03b8x|u for each parent instantiation u. We assume that for each variable X and parent instantiation u we have a meta parameter \u03c4x|u, such that \u03b8x|u = \u03c4x|u and \u03b8x|u = 1 \u2212 \u03c4x|u. Therefore, our goal is then to determine the amount of change to the meta parameter \u03c4x|u which would lead to a simultaneous change in both \u03b8x|u and \u03b8x|u. We use the meta parameter \u03c4x|u because it is not meaningful to change only \u03b8x|u or \u03b8x|u without changing the other since \u03b8x|u + \u03b8x|u = 1.\nFirst we observe that the probability of an instantiation e, Pr(e), is a linear function in any network parameter \u03b8x|u in a belief network (Russell, Binder, Koller, & Kanazawa, 1995; Castillo et al., 1997). In fact, the probability is linear in any meta parameter \u03c4x|u.\nTheorem 2.1 The derivative of Pr(e) with respect to the meta parameter \u03c4x|u is given by:\n\u2202Pr(e)\n\u2202\u03c4x|u =\nPr(e, x,u)\n\u03b8x|u \u2212\nPr(e, x,u)\n\u03b8x|u , (1)\nwhen \u03b8x|u 6= 0 and \u03b8x|u 6= 0. 3 We will designate the derivative as constant \u03b1e.\nIn Theorem 2.1, \u03b1e = Pr(e, x,u)/\u03b8x|u \u2212 Pr(e, x,u)/\u03b8x|u is a constant in terms of both \u03b8x|u and \u03b8x|u (and consequently, \u03c4x|u) since Pr(e, x,u) = Kx\u03b8x|u and Pr(e, x,u) = Kx\u03b8x|u,\n3. If either of the previous parameters is zero, we can use the differential approach by Darwiche (2000) to compute the derivative directly.\nwhere Kx = Pr(u)Pr(e | x,u) and Kx = Pr(u)Pr(e | x,u) are constants in terms of both \u03b8x|u and \u03b8x|u. By substituting y, e and z, e for e in Theorem 2.1, we get:\n\u03b1y,e = \u2202Pr(y, e)\n\u2202\u03c4x|u =\nPr(y, e, x,u)\n\u03b8x|u \u2212\nPr(y, e, x,u)\n\u03b8x|u ; (2)\n\u03b1z,e = \u2202Pr(z, e)\n\u2202\u03c4x|u =\nPr(z, e, x,u)\n\u03b8x|u \u2212\nPr(z, e, x,u)\n\u03b8x|u . (3)\nNow, if we want to enforce the Difference constraint, Pr(y | e) \u2212 Pr(z | e) \u2265 \u01eb, it suffices to ensure that Pr(y, e) \u2212 Pr(z, e) \u2265 \u01ebPr(e). Suppose that the previous constraint does not hold, and we wish to establish it by applying a change of \u03b4 to the meta parameter \u03c4x|u. Such a change leads to a change of \u03b1e\u03b4 in Pr(e). It also changes Pr(y, e) and Pr(z, e) by \u03b1y,e\u03b4 and \u03b1z,e\u03b4, respectively. Hence, to enforce the Difference constraint, we need to solve for \u03b4 in the following inequality:\n[Pr(y, e) + \u03b1y,e\u03b4] \u2212 [Pr(z, e) + \u03b1z,e\u03b4] \u2265 \u01eb[Pr(e) + \u03b1e\u03b4].\nRearranging the terms, we get the following result.\nCorollary 2.1 To satisfy the Difference constraint, we need to change the meta parameter \u03c4x|u by \u03b4, such that:\nPr(y, e) \u2212 Pr(z, e) \u2212 \u01ebPr(e) \u2265 \u03b4[\u2212\u03b1y,e + \u03b1z,e + \u01eb\u03b1e],\nwhere the \u03b1 constants are defined by Equations 1, 2 and 3.\nWe can similarly solve for parameter changes \u03b4 that enforce the Ratio constraint, Pr(y | e)/Pr(z | e) \u2265 \u01eb, in the following inequality:\n[Pr(y, e) + \u03b1y,e\u03b4]/[Pr(z, e) + \u03b1z,e\u03b4] \u2265 \u01eb.\nRearranging the terms, we get the following result.\nCorollary 2.2 To satisfy the Ratio constraint, we need to change the meta parameter \u03c4x|u by \u03b4, such that:\nPr(y, e) \u2212 \u01ebPr(z, e) \u2265 \u03b4[\u2212\u03b1y,e + \u01eb\u03b1z,e],\nwhere the \u03b1 constants are defined by Equations 2 and 3.\nFor both the Difference and Ratio constraints, the solution of \u03b4, if any, is always in one of two forms:\n\u2022 \u03b4 \u2264 q, for some computed q < 0, in which case the new value of meta parameter \u03c4x|u must be in the interval [0, p + q].\n\u2022 \u03b4 \u2265 q, for some computed q > 0, in which case the new value of meta parameter \u03c4x|u must be in the interval [p + q, 1].\nNote that p is the current value of meta parameter \u03c4x|u (before the change). For many parameters, these intervals are empty and, therefore, there is no way we can change these meta parameters to enforce the constraint.\nThe question now is how to solve these inequalities, efficiently, and for all meta parameters. Note that there may be more than one possible parameter change that would enforce the given constraint, so we need to identify all such changes. With either Corollary 2.1 or 2.2, we can easily solve for the amount of change needed, \u03b4, once we know the following probabilities: Pr(e), Pr(y, e), Pr(z, e), Pr(e, x,u), Pr(e, x,u), Pr(y, e, x,u), Pr(y, e, x,u), Pr(z, e, x,u), and Pr(z, e, x,u). This leads to the following complexity of our technique.\nCorollary 2.3 If we have an algorithm that can compute Pr(i, x,u), for a given instantiation i, and all family instantiations x,u of every variable X, in time O(f), then we can solve for Corollaries 2.1 and 2.2 for all parameters in time O(f). We do this by running the algorithm three times, once with i = e, and then with i = y, e, and finally with i = z, e.\nRecall that the family of a variable X is the set containing X, and its parents U in the belief network.\nThe join-tree algorithm (Jensen, Lauritzen, & Olesen, 1990) and the differential approach (Darwiche, 2000) can both compute Pr(i, x,u), for a given instantiation i and all family instantiations x,u of every variable X in O(n expw) time. Here, n is the number of variables in the belief network, and w is the width of a given elimination order. SamIam uses the differential approach, and thus its running time to identify all possible parameter changes in a network is also O(n expw). Note that this is also the time needed to answer one of the simplest queries, that of computing the probability of evidence e."}, {"heading": "2.2 Multi-Valued Variables", "text": "Our results can be easily extended to multi-valued variables, as long as we assume a model for changing co-varying parameters when one of them changes (Darwiche, 2000; Kj\u00e6rulff & van der Gaag, 2000). After the parameter \u03b8x|u changes, we need to use a scheme to change the other parameters, \u03b8xi|u for all xi 6= x, in order to ensure the sum-to-one constraint. The most common way to do this is to use the proportional scheme. In this scheme, we change the other parameters so that the ratios between them remain the same. For example, suppose we have three parameters \u03b8x1|u = .6, \u03b8x2|u = .3 and \u03b8x3|u = .1. After \u03b8x1|u changes to .8, the other two parameter values will be changed to \u03b8x2|u = .3(.2/.4) = .15 and \u03b8x3|u = .1(.2/.4) = .05 accordingly. We now define the meta parameter \u03c4x|u such that it simultaneously changes all parameters according to the proportional scheme. We can then obtain a linear relation between Pr(e) and \u03c4x|u, and the partial derivative is given by:\n\u2202Pr(e)\n\u03c4x|u =\nPr(e, x,u)\n\u03b8x|u \u2212\n\u2211\nxi 6=x Pr(e, xi,u) \u2211\nxi 6=x \u03b8xi|u .\nThis is very similar to the result in Theorem 2.1, in the way that we have grouped all the values xi 6= x into the value x. We can then use Corollaries 2.1 and 2.2 to solve for the Difference and Ratio constraints.\nWe now present another example to illustrate how the results above are used in practice.\nExample 2.1 Consider again the network in Figure 3. Here, we set the evidence such that we have smoke, but no report of people evacuating the building, i.e. e = smoke, report. We then got the posteriors Pr(fire | e) = .25 and Pr(tampering | e) = .02. We thought in this case that the posterior on fire should be no less than .5 and asked SamIam to recommend the necessary changes to enforce the constraint, Pr(fire | e) \u2212 Pr(fire | e) \u2265 0. There were five recommendations in this case, three of which could be ruled out based on qualitative considerations:\n1. increase the prior on fire to \u2265 .03 (from .01);\n2. increase the prior on tampering to \u2265 .80 (from .02);\n3. decrease Pr(smoke | fire) to \u2264 .003 (from .01);\n4. increase Pr(leaving | alarm) to \u2265 .923 (from .001);\n5. increase Pr(report | leaving) to \u2265 .776 (from .01).\nClearly, the only sensible change here is either to increase the prior on fire, or to decrease the probability of having smoke without a fire.\nThis example and other similar ones suggest that identifying such parameter changes and their magnitudes is inevitable for developing a faithful belief network, yet it is not trivial for experts to accomplish this task by visual inspection of the belief network, often due to its size and complexity. Sensitivity analysis tools such as SamIam can help facilitate this by identifying important parameters that need to be fine-tuned in order to satisfy certain constraints. Of course, if we are given multiple constraints, we need to be cautious when implementing a recommendation made by SamIam due to one constraint, because this may result in violating other constraints. In this case, the parameter changes recommended by SamIam should be used to help experts in focusing their attention on the relevant parameters.\nMoreover, the previous examples illustrate the need to develop more analytic tools to understand and explain the sensitivity of queries to certain parameter changes. There is also a need to reconcile the sensitivities exhibited by our examples with previous experimental studies demonstrating the robustness of probabilistic queries against small parameter changes in certain application areas, such as diagnosis (Pradhan et al., 1996). We address these particular questions in the next two sections."}, {"heading": "3. The Sensitivity of Probabilistic Queries to Parameters Changes", "text": "Our starting point in understanding the sensitivity of a query Pr(y | e) to changes in a meta parameter \u03c4x|u is to analyze the derivative \u2202Pr(y | e)/\u2202\u03c4x|u. In our analysis, we assume that X is binary, but Y and all other variables in the network can be multi-valued. The following theorem provides a simple bound on this derivative, in terms of Pr(y | e) and Pr(x | u) only. We then use this simple bound to study the effect of changes to meta parameters on probabilistic queries.\nTheorem 3.1 If X is a binary variable in a belief network, then:4\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2202Pr(y | e)\n\u2202\u03c4x|u\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2264 Pr(y | e)(1 \u2212 Pr(y | e)) Pr(x | u)(1 \u2212 Pr(x | u)) .\nThe bound in Theorem 3.1 is tight, and we will show later an example for which the derivative assumes the above bound exactly. The main point to note about this bound is that it is independent of any given belief network.5\nThe plot of this bound against Pr(x | u) and Pr(y | e) is shown in Figure 4. A number of observations are in order about this plot:\n\u2022 For extreme values of Pr(x | u), the bound approaches infinity, and thus a small absolute change in the meta parameter \u03c4x|u can have a big impact on the query Pr(y | e).\n\u2022 On the other hand, the bound approaches 0 for extreme values of the query Pr(y | e). Therefore, a small absolute change in the meta parameter \u03c4x|u will have a small effect on the absolute change in the query.\nOne of the implications of this result is that if we have a belief network where queries of interest Pr(y | e) have extreme values, then such queries will be robust against small changes in network parameters. This of course assumes that robustness is understood to\n4. This theorem and all results that follow requires that \u03c4x|u 6= 0 and \u03c4x|u 6= 1, since we can only use the expression in Equation 2.1 under these conditions. 5. Note that we have an exact closed form for the derivative \u2202Pr(y | e)/\u2202\u03c4x|u (Darwiche, 2000; Greiner, Grove, & Schuurmans, 1997), but that form includes terms which are specific to the given belief network.\nbe a small change in the absolute value of the given query. Interestingly enough, if y is a disease which is diagnosed by finding e\u2014that is, the probability Pr(y | e) is quite high\u2014 then it is not surprising that such queries would be robust against small perturbations to network parameters. This seems to explain some of the results by Pradhan et al. (1996), where robustness have been confirmed for queries with Pr(y | e) \u2265 .9.\nAnother implication of the above result is that one has to be careful when changing parameters that are extreme. Such parameters are potentially very influential and one must handle them with care.\nTherefore, the worst situation from a robustness viewpoint materializes if one has extreme parameters with non-extreme queries. In such a case, the queries can be very sensitive to small variations in the parameters.\nExample 3.1 Consider the network structure in Figure 5. We have two binary nodes, X and Y with respective parameters \u03b8x, \u03b8x and \u03b8y, \u03b8y. We assume that E is a deterministic binary node where the value of E is e iff X = Y . This dictates the following CPT for E: Pr(e | x, y) = 1, Pr(e | x, y) = 1, Pr(e | x, y) = 0 and Pr(e | x, y) = 0. The conditional probability Pr(y | e) can be expressed using the root parameters \u03b8x and \u03b8y as:\nPr(y | e) = \u03b8x\u03b8y\n\u03b8x\u03b8y + \u03b8x\u03b8y .\nSince \u2202\u03b8x/\u2202\u03c4x = 1 and \u2202\u03b8x/\u2202\u03c4x = \u22121, the derivative of Pr(y | e) with respect to the meta parameter \u03c4x is given by:\n\u2202Pr(y | e)\n\u2202\u03c4x =\n(\u03b8x\u03b8y + \u03b8x\u03b8y)\u03b8y \u2212 \u03b8x\u03b8y(\u03b8y \u2212 \u03b8y)\n(\u03b8x\u03b8y + \u03b8x\u03b8y)2\n= \u03b8y\u03b8y\n(\u03b8x\u03b8y + \u03b8x\u03b8y)2 .\nThis is equal to the upper bound given in Theorem 3.1:\nPr(y | e)(1 \u2212 Pr(y | e))\nPr(x)(1 \u2212 Pr(x)) =\n(\u03b8x\u03b8y)(\u03b8x\u03b8y)\n\u03b8x\u03b8x(\u03b8x\u03b8y + \u03b8x\u03b8y)2\n= \u03b8y\u03b8y\n(\u03b8x\u03b8y + \u03b8x\u03b8y)2 .\nNow, if we set \u03b8x = \u03b8y, the derivative becomes:\n\u2202Pr(y | e)\n\u2202\u03c4x =\n1\n4\u03b8x\u03b8x ,\nand as \u03b8x (or \u03b8x) approaches 0, the derivative approaches infinity. Finally, if we set \u03b8x = \u03b8y = \u01eb, we have Pr(y | e) = .5, but if we keep \u03b8y and \u03b8y constant and change \u03c4x from \u01eb to 0, we get the new result Pr(y | e) = 0.\nExample 3.1 then illustrates three points. First, it shows that the bound in Theorem 3.1 is tight, i.e. we can construct a belief network that assumes the bound. Second, it gives an example network for which the derivative \u2202Pr(y | e)/\u2202\u03c4x|u tends to infinity, and therefore we cannot bound the derivative by any constant. Finally, it shows that an infinitesimal absolute change in a meta parameter (changing \u03c4x from \u01eb to 0) can induce a non-infinitesimal absolute change in some query (Pr(y | e) changes from .5 to 0). The following theorem, however, shows that this is not possible if we consider a relative notion of change.\nTheorem 3.2 Assume that \u03c4x|u \u2264 .5 without loss of generality. 6 Suppose that \u2206\u03c4x|u is an infinitesimal change applied to the meta parameter \u03c4x|u, leading to a change of \u2206Pr(y | e) to the query Pr(y | e). We then have:\n\u2223 \u2223 \u2223 \u2223 \u2206Pr(y | e)\nPr(y | e)\n\u2223 \u2223 \u2223 \u2223 \u2264 2\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2206\u03c4x|u \u03c4x|u \u2223 \u2223 \u2223 \u2223 \u2223 .\nFor a function f(x), the quantity:\nlim (x\u2212x0)\u21920\n(f(x) \u2212 f(x0))/f(x0)\n(x\u2212 x0)/x0 ,\nis typically known as the sensitivity of f to x at x0. Therefore, Theorem 3.2 shows that the sensitivity of Pr(y | e) to \u03c4x|u is bounded.\nAs an example application of Theorem 3.2, consider Example 3.1 again. The change of \u03c4x from \u01eb to 0 amounts to a relative change | \u2212 \u01eb/\u01eb| = 1. The corresponding change of Pr(y | e) from .5 to 0 amounts to a relative change of | \u2212 .5/.5| = 1. Hence, the relative change in the query is not as great from this viewpoint.7\nThe relative change in Pr(y | e) may be greater than double the relative change in \u03c4x|u for non-infinitesimal changes because the derivative \u2202Pr(y | e)/\u2202\u03c4x|u depends on the value of \u03c4x|u (Darwiche, 2000; Jensen, 1999). Going back to Example 3.1, if we set \u03b8x = .5 and \u03b8y = .01, we obtain the result Pr(y | e) = .01. If we now increase \u03c4x to .6, a relative change of 20%, we get the new result Pr(y | e) = 0.0149, a relative change of 49%, which is more than double of the relative change in \u03c4x.\nThe question now is: Suppose that we change a meta parameter \u03c4x|u by an arbitrary amount (not an infinitesimal amount), what can we say about the corresponding change in the query Pr(y | e)? We have the following result.\nTheorem 3.3 Let O(x | u) denote the odds of x given u: O(x | u) = Pr(x | u)/(1\u2212Pr(x | u)), and let O(y | e) denote the odds of y given e: O(y | e) = Pr(y | e)/(1 \u2212 Pr(y | e)). Let O\u2032(x | u) and O\u2032(y | e) denote these odds after having applied an arbitrary change to\n6. For a binary variable X, if \u03c4x|u > .5, we can instead choose the meta parameter \u03c4x|u without loss of generality. 7. If we consider the meta parameter \u03c4x = 1 \u2212 \u01eb instead, the relative change in \u03c4x will then amount to \u01eb/(1 \u2212 \u01eb). But Theorem 3.2 will not be applicable in this case (assuming that \u01eb is close to 0) since the theorem requires that the chosen meta parameter be no greater than .5.\nthe meta parameter \u03c4x|u where X is a binary variable in a belief network. If the change is positive, then:\nO(x | u) O\u2032(x | u) \u2264\nO\u2032(y | e) O(y | e) \u2264 O\u2032(x | u) O(x | u) ;\nor if it is negative, then:\nO\u2032(x | u) O(x | u) \u2264 O\u2032(y | e) O(y | e) \u2264 O(x | u) O\u2032(x | u) .\nCombining both results, we have:\n| ln(O\u2032(y | e)) \u2212 ln(O(y | e))| \u2264 | ln(O\u2032(x | u)) \u2212 ln(O(x | u))|.\nTheorem 3.3 means that the relative change in the odds of y given e is bounded by the relative change in the odds of x given u, if X is a binary variable.8 Note that the result makes no assumptions whatsoever about the structure of the given belief network.\nTo illustrate this theorem, we go back to Example 2.1. We intend to increase the posterior Pr(fire | e) from .25 to .5, for e = smoke, report . The log-odds change for the query is thus \u2206lo(Pr(y | e)) = | ln(O\u2032(y | e)) \u2212 ln(O(y | e))| = 1.1. There were five recommendations made by SamIam and we can calculate the log-odds change, \u2206lo(\u03c4x|u) = | ln(O\u2032(x | u)) \u2212 ln(O(x | u))| for each parameter change:\n1. increase the prior on fire to \u2265 .03 (from .01): \u2206lo(\u03c4x|u) = 1.1;\n2. increase the prior on tampering to \u2265 .80 (from .02): \u2206lo(\u03c4x|u) = 5.3;\n3. decrease Pr(smoke | fire) to \u2264 .003 (from .01): \u2206lo(\u03c4x|u) = 1.2;\n4. increase Pr(leaving | alarm) to \u2265 .923 (from .001): \u2206lo(\u03c4x|u) = 9.4;\n5. increase Pr(report | leaving) to \u2265 .776 (from .01): \u2206lo(\u03c4x|u) = 5.8.\nTherefore, we can see that all the recommended parameter changes satisfy Theorem 3.3, i.e. the log-odds change of the query is bounded by the log-odds change of the parameter.\nAn interesting special case of Theorem 3.3 is when X is a root node and X = Y . From basic probability theory, we have:\nO(x | e) = O(x) Pr(e | x)\nPr(e | x) .\nAs the ratio Pr(e | x)/Pr(e | x) is independent of Pr(x), the ratio O(x | e)/O(x) is also independent of this prior. Therefore, we can conclude that:\nO\u2032(x | e) O(x | e) = O\u2032(x) O(x) . (4)\nThis means we can find the exact amount of change needed for a meta parameter \u03c4x in order to induce a particular change on the query Pr(x | e). There is no need to use the more expensive technique of Section 2 in this case.\n8. We recently expanded our results to multi-valued variables, where we arbitrarily change parameters \u03b8x|u to new values \u03b8 \u2032 x|u, for all values x. The resulting bound is: | ln(O \u2032(y | e)) \u2212 ln(O(y | e))| \u2264\nln(maxx \u03b8 \u2032 x|u/\u03b8x|u) \u2212 ln(minx \u03b8 \u2032 x|u/\u03b8x|u) (Chan & Darwiche, 2002).\nExample 3.2 Consider the network in Figure 3. Suppose that e = report , smoke. Currently, Pr(tampering) = .02 and Pr(tampering | e) = .50. We wish to increase the conditional probability to .65. We can compute the new prior probability Pr \u2032(tampering) using Equation 4:\n.65/.35 .50/.50 =\nPr \u2032(tampering)/(1 \u2212 Pr \u2032(tampering))\n.02/.98 ,\ngiving us Pr \u2032(tampering) = .036, which is equal to the result we obtained using SamIam in Section 1. Both the changes to Pr(tampering) and Pr(tampering | e) bring a log-odds difference of .616.\nTheorem 3.3 has a number of implications. First, given a particular query Pr(y | e) and a meta parameter \u03c4x|u, it can be used to bound the effect that a change in \u03c4x|u will have on the query Pr(y | e). Going back to Example 3.2, we may wish to know what is the impact on other conditional probabilities if we apply the change making Pr \u2032(tampering) = .036. The log-odds changes for all conditional probabilities in the network will be bounded by .616. For example, currently Pr(fire | e) = .029. Using Theorem 3.3, we can find the range of the new conditional probability value Pr \u2032(fire | e):\n\u2223 \u2223 \u2223 \u2223 \u2223 ln ( Pr \u2032(fire | e) 1 \u2212 Pr\u2032(fire | e) ) \u2212 ln ( .029 .971 ) \u2223 \u2223 \u2223 \u2223 \u2223 \u2264 .616,\ngiving us the range .016 \u2264 Pr \u2032(fire | e) \u2264 .053. The exact value of Pr \u2032(fire | e), obtained by inference, is .021, which is within the computed bounds.\nSecond, Theorem 3.3 can be used to efficiently approximate solutions to the Difference and Ratio problems we discussed in Section 2. That is, given a desirable change in the value of query Pr(y | e), we can use Theorem 3.3 to immediately compute a lower bound on the minimum change to meta parameter \u03c4x|u needed to induce the change. This method can be applied in constant time and can serve as a preliminary recommendation, as the method proposed in Section 2 is much more expensive computationally.\nThird, suppose that SamIam was used to recommend parameter changes that would induce a desirable change on a given query. Suppose further that SamIam returned a number of such changes, each of which is capable of inducing the necessary change. The question is: which one of these changes should we adopt? The main principle applied in these situations is to adopt a \u201cminimal\u201d change. But what is minimal in this case? As Theorem 3.3 reveals, a notion of minimality which is based on the amount of absolute change can be very misleading. Instead, it suggests that one adopts the change that minimizes the relative change in the odds, as other queries can be shown to be robust against such a change in a precise sense.\nFor example, we are given two parameter changes, one from .1 to .15, and another from .4 to .45. Both these changes give us the same absolute change of .05. However, the first change has an log-odds change of .462, while the second one has an log-odds change of .205. Therefore, two parameter changes that give us the same absolute change can have different amounts of log-odds change.\nOn the other hand, two parameter changes that give us the same relative change can also have different amounts of log-odds change. For example, we are given two parameter changes, one from .1 to .2, and another from .2 to .4. Both these changes double the original\nparameter value. However, the first change has a log-odds change of .811, while the second one has a log-odds change of .981.\nFinally, the result can be used to obtain a better intuitive understanding of parameter changes that do or do not matter, a topic which we will discuss in the next section."}, {"heading": "4. Changes that (Don\u2019t) Matter", "text": "We now return to a central question: When do changes in network parameters matter and when do they not matter? As we mentioned earlier, there have been experimental studies investigating the robustness of belief networks against parameter changes (Pradhan et al., 1996). But we have also shown very simple and intuitive examples where networks can be very sensitive to small parameter changes. This calls for a better understanding of the effect of parameter changes on queries, so one can intuitively sort out situations in which such changes do or do not matter. Our goal in this section is to further develop such an understanding by looking more closely into some of the implications of Theorem 3.3. We start first by highlighting the difference between this theorem and previous results on sensitivity analysis."}, {"heading": "4.1 Network-Specific Sensitivity Analysis", "text": "One of the main differences between our results and other sensitivity analysis approaches is that we do not need to know the belief network, and hence, do not need to perform inference. To clarify this difference, we compare it with the sensitivity function approach (van der Gaag & Renooij, 2001), which computes the sensitivity function that relates a query, f(x), and a parameter, x, in the form:\nf(x) = a \u00b7 x + b\nc \u00b7 x + d ,\nwhere a, b, c, d are constants that depend on the given network and are computed by performing inference as suggested by van der Gaag and Renooij (2001).\nGoing back to Example 2.1, we can express the query Pr(fire | smoke, report) as a function of the parameter x = Pr(smoke | fire). The function is given by:\nf(x) = 0.003165\n0.9684 \u00b7 x + 0.003165 ,\nand we plot this function in Figure 6. We can see that at the current parameter value .01, the query value is .25, but if we decrease it to .003, the query value increases to .5, which is one of the suggested parameter changes by SamIam.\nHowever, we can find a bound on the relations between the query and the parameter using Theorem 3.3, without doing inference on the network (and without knowing the network). For example, by changing the current parameter value from .01 to .003, the new query value will be within the bounds of .09 and .53. On the other hand, if we want the query value to increase to .5, we have to at least decrease the parameter value from .01 to .003, or increase it to .03."}, {"heading": "4.2 Assuring Query Robustness", "text": "One of the important issues we have yet to settle is: \u201cWhat does it mean for a parameter change to not matter?\u201d One can think of at least three definitions. First, the absolute change in the probability Pr(y | e) is small. Second, the relative change in the probability Pr(y | e) is small. Third, relative change in the odds O(y | e) is small. The first notion is the one most prevalent in the literature, so we shall adopt it in the rest of this section.\nSuppose we have a belief network for a diagnostic application and suppose we are concerned about the robustness of the query Pr(y | e) with respect to changes in network parameters. In this application, y is a particular disease and e is a particular finding which predicts the disease, with Pr(y | e) = .9. Let us define robustness in this case to be an absolute change of no more than .05 to the given query. Now, let X be a binary variable in the network and let us ask: What kind of changes to the parameters on X are guaranteed to keep the query within the desirable range? We can use Theorem 3.3 easily to answer this question. First, if we are changing a parameter by \u03b4, and if we want the value of the query to remain \u2264 .95, we must ensure that:\n| ln((p + \u03b4)/(1 \u2212 p\u2212 \u03b4)) \u2212 ln(p/(1 \u2212 p))| \u2264 | ln(.95/.05) \u2212 ln(.9/.1)| = .7472,\nwhere p is the current value of the parameter. Similarly, if we want to ensure that the query remains \u2265 .85, we want to ensure that:\n| ln((p + \u03b4)/(1 \u2212 p\u2212 \u03b4)) \u2212 ln(p/(1 \u2212 p))| \u2264 | ln(.85/.15) \u2212 ln(.9/.1)| = .4626.\nFigure 7 plots the permissible change \u03b4 as a function of p, the current value of the parameter. The main point to observe here is that the amount of permissible change depends on the current value of p, with smaller changes allowed for extreme values of p. It is also interesting to note that it is easier to guarantee the query to stay \u2264 .95 than to guarantee that it stays \u2265 .85. In general, it is more likely for a parameter change to reduce\nthe value of a query which is close to 1 (and to increase the value of a query which is close to 0). Finally, if we are increasing the parameter, then a parameter value close to .4 will allow the biggest absolute change. But if we are decreasing the parameter, then a value close to .6 will allow the biggest absolute change.\nNow let us repeat the same exercise but assuming that the initial value of the query is Pr(y | e) = .6, yet insisting on the same measure of robustness. Figure 8 plots the\npermissible changes \u03b4 as a function of p, the current value of the parameter. Again, the amount of permissible change becomes smaller as the probability p approaches 0 or 1. The other main point to emphasize is that the permissible changes are now much smaller than in the previous example, since the initial value of the query is not as extreme. Therefore, this query is much less robust than the previous one.\nMore generally, Figure 9 plots the log-odds difference, | ln(O\u2032(x | u)) \u2212 ln(O(x | u))|, against Pr(x | u) = p and Pr \u2032(x | u) = p+\u03b4, and Figure 10 shows cross-sections of Figure 9 for three different values of p. Again, the plots explain analytically why we can afford more absolute changes to non-extreme probabilities (Pradhan et al., 1996; Poole, 1998).\nFrom Figure 10, we also notice that although the plot is symmetric for p = .5, it is not for both p = .1 and p = .9, i.e. absolute changes of \u2206p and \u2212\u2206p give us different amounts of log-odds change. For example, changing the parameter from .1 to .05 give us a larger log-odds change than changing the parameter from .1 to .15. We also notice that the plots for p = .1 and p = .9 are mirror images of each other. Therefore, the log-odds change is the same for complementary parameter changes on \u03b8x|u and \u03b8x|u.\nWe close this section by emphasizing that the above figures identify parameter changes that guarantee keeping queries within certain ranges. However, if the belief network has specific properties, such as a specific topology, then it is possible for the query to be robust against parameter changes that are outside the identified bounds."}, {"heading": "5. Conclusion", "text": "In this paper, we presented an efficient technique for fine-tuning the parameters of a belief network. The technique suggests minimal changes to network parameters which ensure that certain constraints are enforced on probabilistic queries. Based on this technique, we have experimented with some belief networks, only to find out that these networks are more sensitive to parameter changes than previous experimental studies seem to suggest. This observation leads us to an analytic study on the effect of parameter changes, with the aim of characterizing situations under which parameter changes do or do not matter. We have reported on a number of results in this direction. Our central result shows that belief networks are robust in a very specific sense: the relative change in query odds is bounded by the relative change in the parameter odds. A closer look at this result, its meaning, and its implications provides interesting characterizations of parameter changes that do or do not matter, and explains analytically some of the previous experimental results and observations on this matter."}, {"heading": "Acknowledgments", "text": "A shorter version of this paper appeared in Proceedings of the 17th Conference on Uncertainty in Artificial Intelligence (UAI-01), pp. 65\u201374. This work has been partially supported by NSF grant IIS-9988543, MURI grant N00014-00-1-0617, and by DiMI grant 00-10065."}, {"heading": "Appendix A. Proofs", "text": "Theorem 2.1 The derivative of Pr(e) with respect to the meta parameter \u03c4x|u is given by:\n\u2202Pr(e)\n\u2202\u03c4x|u =\nPr(e, x,u)\n\u03b8x|u \u2212\nPr(e, x,u)\n\u03b8x|u ,\nwhen \u03b8x|u 6= 0 and \u03b8x|u 6= 0.\nProof From Russell et al. (1995), the semantics of the first derivative of Pr(e) with respect to parameter \u03b8x|u is given by: 9\n\u2202Pr(e)\n\u2202\u03b8x|u =\nPr(e, x,u)\n\u03b8x|u ,\nif \u03b8x|u 6= 0, and: \u2202Pr(e)\n\u2202\u03b8x|u =\nPr(e, x,u)\n\u03b8x|u ,\nif \u03b8x|u 6= 0. Because \u03b8x|u = \u03c4x|u and \u03b8x|u = 1 \u2212 \u03c4x|u, we have:\n\u2202Pr(e)\n\u2202\u03c4x|u =\n\u2202Pr(e)\n\u2202\u03b8x|u \u2212\n\u2202Pr(e)\n\u2202\u03b8x|u\n= Pr(e, x,u)\n\u03b8x|u \u2212\nPr(e, x,u)\n\u03b8x|u ,\nif \u03b8x|u 6= 0 and \u03b8x|u 6= 0.\u2737\nTheorem 3.1 If X is a binary variable in a belief network, then: \u2223\n\u2223 \u2223 \u2223 \u2223 \u2202Pr(y | e)\n\u2202\u03c4x|u\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2264 Pr(y | e)(1 \u2212 Pr(y | e)) Pr(x | u)(1 \u2212 Pr(x | u)) .\nProof From Darwiche (2000), the derivative \u2202Pr(y | e)/\u2202\u03b8x|u is equal to:\n\u2202Pr(y | e)\n\u2202\u03b8x|u =\nPr(y, x,u | e) \u2212 Pr(y | e)Pr(x,u | e)\nPr(x | u) .\nSince: \u2202Pr(y | e)\n\u2202\u03c4x|u =\n\u2202Pr(y | e)\n\u2202\u03b8x|u \u2212\n\u2202Pr(y | e)\n\u2202\u03b8x|u ,\nwe have:\n\u2202Pr(y | e)\n\u2202\u03c4x|u\n= Pr(y, x,u | e) \u2212 Pr(y | e)Pr(x,u | e)\nPr(x | u) \u2212\nPr(y, x,u | e) \u2212 Pr(y | e)Pr(x,u | e)\nPr(x | u)\n= Pr(y, x,u | e) \u2212 Pr(y | e)Pr(x,u | e) \u2212 Pr(x | u)(Pr(y,u | e) \u2212 Pr(y | e)Pr(u | e))\nPr(x | u)(1 \u2212 Pr(x | u)) .\nIn order to find an upper bound on the derivative, we would like to bound the term Pr(y, x,u | e)\u2212Pr(y | e)Pr(x,u | e). Since, Pr(y, x,u, e) \u2264 Pr(y,u, e) and Pr(y, x,u, e) \u2264 Pr(x,u, e), we have:\nPr(y, x,u | e) \u2212 Pr(y | e)Pr(x,u | e) \u2264 Pr(y, x,u | e) \u2212 Pr(y | e)Pr(y, x,u | e)\n= Pr(y, x,u | e)Pr(y | e)\n\u2264 Pr(y,u | e)Pr(y | e).\n9. We allow the notations \u2202Pr(e)/\u2202\u03b8x|u and \u2202Pr(e)/\u2202\u03b8x|u by assuming Pr(e) as functions of \u03b8x|u and \u03b8x|u, even though it is not allowed in belief networks to change only \u03b8x|u or \u03b8x|u.\nTherefore, the upper bound on the derivative is given by:\n\u2202Pr(y | e)\n\u2202\u03c4x|u \u2264\nPr(y,u | e)Pr(y | e) \u2212 Pr(x | u)(Pr(y,u | e) \u2212 Pr(y | e)Pr(u | e))\nPr(x | u)(1 \u2212 Pr(x | u)) ,\nwhich is equal to the following term:\nPr(y | e)Pr(y,u | e)\nPr(x | u) +\nPr(y | e)Pr(y,u | e)\n1 \u2212 Pr(x | u)\n= (1 \u2212 Pr(x | u))Pr(y | e)Pr(y,u | e) + Pr(x | u)Pr(y | e)Pr(y,u | e)\nPr(x | u)(1 \u2212 Pr(x | u))\n= Pr(y,u | e)Pr(y | e) \u2212 Pr(x | u)(Pr(y,u | e) \u2212 Pr(y | e)Pr(u | e))\nPr(x | u)(1 \u2212 Pr(x | u)) .\nSince Pr(y,u | e) \u2264 Pr(y | e) and Pr(y,u | e) \u2264 Pr(y | e), the upper bound on the derivative is given by:\n\u2202Pr(y | e)\n\u2202\u03c4x|u \u2264\nPr(y | e)Pr(y,u | e)\nPr(x | u) +\nPr(y | e)Pr(y,u | e)\n1 \u2212 Pr(x | u)\n\u2264 Pr(y | e)Pr(y | e)\nPr(x | u) +\nPr(y | e)Pr(y | e)\n1 \u2212 Pr(x | u)\n= Pr(y | e)(1 \u2212 Pr(y | e))\nPr(x | u)(1 \u2212 Pr(x | u)) .\nIn order to find a lower bound on the derivative, we note that Pr(y | e) = 1\u2212Pr(y | e), and thus \u2202Pr(y | e)/\u2202\u03c4x|u = \u2212\u2202Pr(y | e)/\u2202\u03c4x|u. Therefore, we can get our lower bound by finding the upper bound on the derivative \u2202Pr(y | e)/\u2202\u03c4x|u and multiplying by \u22121:\n\u2202Pr(y | e)\n\u2202\u03c4x|u \u2265 \u2212\nPr(y | e)(1 \u2212 Pr(y | e))\nPr(x | u)(1 \u2212 Pr(x | u))\n= \u2212 Pr(y | e)(1 \u2212 Pr(y | e))\nPr(x | u)(1 \u2212 Pr(x | u)) .\nCombining the upper bound and the lower bound, we have:\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2202Pr(y | e)\n\u2202\u03c4x|u\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2264 Pr(y | e)(1 \u2212 Pr(y | e)) Pr(x | u)(1 \u2212 Pr(x | u)) .\u2737\nTheorem 3.2 Assume that \u03c4x|u \u2264 .5 without loss of generality. Suppose that \u2206\u03c4x|u is an infinitesimal change applied to the meta parameter \u03c4x|u, leading to a change of \u2206Pr(y | e) to the query Pr(y | e). We then have:\n\u2223 \u2223 \u2223 \u2223 \u2206Pr(y | e)\nPr(y | e)\n\u2223 \u2223 \u2223 \u2223 \u2264 2\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2206\u03c4x|u \u03c4x|u \u2223 \u2223 \u2223 \u2223 \u2223 .\nProof Because \u2206\u03c4x|u is infinitesimal, from Theorem 3.1:\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2206Pr(y | e)\n\u2206\u03c4x|u\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2243 \u2223 \u2223 \u2223 \u2223 \u2223 \u2202Pr(y | e)\n\u2202\u03c4x|u\n\u2223 \u2223 \u2223 \u2223 \u2223\n\u2264 Pr(y | e)(1 \u2212 Pr(y | e))\nPr(x | u)(1 \u2212 Pr(x | u)) .\nArranging the terms, we have:\n\u2223 \u2223 \u2223 \u2223 \u2206Pr(y | e)\nPr(y | e)\n\u2223 \u2223 \u2223 \u2223 \u2264 1 \u2212 Pr(y | e)\n1 \u2212 Pr(x | u)\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2206\u03c4x|u \u03c4x|u \u2223 \u2223 \u2223 \u2223 \u2223\n\u2264 1\n.5\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2206\u03c4x|u \u03c4x|u \u2223 \u2223 \u2223 \u2223 \u2223\n= 2\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2206\u03c4x|u \u03c4x|u \u2223 \u2223 \u2223 \u2223 \u2223 ,\nsince Pr(x | u) = \u03c4x|u \u2264 .5.\u2737\nTheorem 3.3 Let O(x | u) denote the odds of x given u: O(x | u) = Pr(x | u)/(1\u2212Pr(x | u)), and let O(y | e) denote the odds of y given e: O(y | e) = Pr(y | e)/(1 \u2212 Pr(y | e)). Let O\u2032(x | u) and O\u2032(y | e) denote these odds after having applied an arbitrary change to the meta parameter \u03c4x|u where X is a binary variable in a belief network. If the change is positive, then:\nO(x | u) O\u2032(x | u) \u2264\nO\u2032(y | e) O(y | e) \u2264 O\u2032(x | u) O(x | u) ;\nor if it is negative, then:\nO\u2032(x | u) O(x | u) \u2264 O\u2032(y | e) O(y | e) \u2264 O(x | u) O\u2032(x | u) .\nCombining both results, we have:\n| ln(O\u2032(y | e)) \u2212 ln(O(y | e))| \u2264 | ln(O\u2032(x | u)) \u2212 ln(O(x | u))|.\nProof We obtain this result by integrating the bound in Theorem 3.1. In particular, if we change \u03c4x|u to \u03c4 \u2032 x|u > \u03c4x|u, and consequently Pr(y | e) changes to Pr\n\u2032(y | e), we can separate the variables in the upper bound on the derivative in Theorem 3.1, integrate over the intervals, and yield:\n\u222b Pr \u2032(y|e)\nPr(y|e)\ndPr(y | e)\nPr(y | e)(1 \u2212 Pr(y | e)) \u2264\n\u222b \u03c4 \u2032 x|u\n\u03c4x|u d\u03c4x|u \u03c4x|u(1 \u2212 \u03c4x|u) .\nThis gives us the solution:\nln(Pr \u2032(y | e)) \u2212 ln(Pr(y | e)) \u2212 ln(1 \u2212 Pr \u2032(y | e)) + ln(1 \u2212 Pr(y | e))\n\u2264 ln(\u03c4 \u2032x|u) \u2212 ln(\u03c4x|u) \u2212 ln(1 \u2212 \u03c4 \u2032 x|u) + ln(1 \u2212 \u03c4x|u),\nand after taking exponentials, we have:\nPr \u2032(y | e)/(1 \u2212 Pr \u2032(y | e))\nPr(y | e)/(1 \u2212 Pr(y | e)) \u2264\n\u03c4 \u2032 x|u/(1 \u2212 \u03c4 \u2032 x|u) \u03c4x|u/(1 \u2212 \u03c4x|u) ,\nwhich is equivalent to: O\u2032(y | e)\nO(y | e) \u2264\nO\u2032(x | u) O(x | u) .\nSimilarly, we can separate the variables in the lower bound on the derivative in Theorem 3.1, integrate over the intervals, and yield:\n\u222b Pr \u2032(y|e)\nPr(y|e)\ndPr(y | e)\nPr(y | e)(1 \u2212 Pr(y | e)) \u2265 \u2212\n\u222b \u03c4 \u2032 x|u\n\u03c4x|u d\u03c4x|u \u03c4x|u(1 \u2212 \u03c4x|u) .\nThis gives us the solution:\nln(Pr \u2032(y | e)) \u2212 ln(Pr(y | e)) \u2212 ln(1 \u2212 Pr \u2032(y | e)) + ln(1 \u2212 Pr(y | e))\n\u2265 \u2212 ln(\u03c4 \u2032x|u) + ln(\u03c4x|u) + ln(1 \u2212 \u03c4 \u2032 x|u) \u2212 ln(1 \u2212 \u03c4x|u),\nand after taking exponentials, we have:\nPr \u2032(y | e)/(1 \u2212 Pr \u2032(y | e))\nPr(y | e)/(1 \u2212 Pr(y | e)) \u2265\n\u03c4x|u/(1 \u2212 \u03c4x|u) \u03c4 \u2032 x|u/(1 \u2212 \u03c4 \u2032 x|u) ,\nwhich is equivalent to: O\u2032(y | e)\nO(y | e) \u2265\nO(x | u) O\u2032(x | u) .\nTherefore, we have the following inequality if \u03c4 \u2032 x|u > \u03c4x|u:\nO(x | u) O\u2032(x | u) \u2264\nO\u2032(y | e) O(y | e) \u2264 O\u2032(x | u) O(x | u) .\nOn the other hand, if we now change \u03c4x|u to \u03c4 \u2032 x|u < \u03c4x|u, we can instead integrate from\n\u03c4 \u2032 x|u to \u03c4x|u. The integrals will satisfy these two inequalities:\n\u222b Pr(y|e)\nPr \u2032(y|e)\ndPr(y | e)\nPr(y | e)(1 \u2212 Pr(y | e)) \u2264\n\u222b \u03c4x|u\n\u03c4 \u2032 x|u\nd\u03c4x|u \u03c4x|u(1 \u2212 \u03c4x|u) ;\n\u222b Pr(y|e)\nPr \u2032(y|e)\ndPr(y | e)\nPr(y | e)(1 \u2212 Pr(y | e)) \u2265 \u2212\n\u222b \u03c4x|u\n\u03c4 \u2032 x|u\nd\u03c4x|u \u03c4x|u(1 \u2212 \u03c4x|u) .\nWe can solve for the inequalities similarly and get the result:\nO\u2032(x | u) O(x | u) \u2264 O\u2032(y | e) O(y | e) \u2264 O(x | u) O\u2032(x | u) .\nCombining the results for both \u03c4 \u2032 x|u > \u03c4x|u and \u03c4 \u2032 x|u < \u03c4x|u, we have:\n| ln(O\u2032(y | e)) \u2212 ln(O(y | e))| \u2264 | ln(O\u2032(x | u)) \u2212 ln(O(x | u))|.\u2737"}], "references": [{"title": "Sensitivity analysis in discrete Bayesian networks", "author": ["E. Castillo", "J.M. Guti\u00e9rrez", "A.S. Hadi"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics,", "citeRegEx": "Castillo et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Castillo et al\\.", "year": 1997}, {"title": "A distance measure for bounding probabilistic belief change", "author": ["H. Chan", "A. Darwiche"], "venue": "In Proceedings of the Eighteenth National Conference on Artificial Intelligence (AAAI),", "citeRegEx": "Chan and Darwiche,? \\Q2002\\E", "shortCiteRegEx": "Chan and Darwiche", "year": 2002}, {"title": "Using sensitivity analysis for efficient quantification of a belief network", "author": ["V.M.H. Coup\u00e9", "N. Peek", "J. Ottenkamp", "J.D.F. Habbema"], "venue": "Artificial Intelligence in Medicine,", "citeRegEx": "Coup\u00e9 et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Coup\u00e9 et al\\.", "year": 1999}, {"title": "A differential approach to inference in Bayesian networks", "author": ["A. Darwiche"], "venue": "Proceedings of the 16th Conference on Uncertainty in Artificial Intelligence (UAI), pp. 123\u2013132.", "citeRegEx": "Darwiche,? 2000", "shortCiteRegEx": "Darwiche", "year": 2000}, {"title": "Learning Bayesian nets that perform well", "author": ["R. Greiner", "A. Grove", "D. Schuurmans"], "venue": "In Proceedings of the 13th Conference on Uncertainty in Artificial Intelligence (UAI),", "citeRegEx": "Greiner et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Greiner et al\\.", "year": 1997}, {"title": "Bayesian updating in recursive graphical models by local computation", "author": ["F.V. Jensen", "S. Lauritzen", "K. Olesen"], "venue": "Computational Statistics Quarterly,", "citeRegEx": "Jensen et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Jensen et al\\.", "year": 1990}, {"title": "Gradient descent training of bayesian networks", "author": ["F.V. Jensen"], "venue": "Proceedings of the Fifth European Conference on Symbolic and Quantitative Approaches to Reasoning with Uncertainty (ECSQARU), pp. 190\u2013200.", "citeRegEx": "Jensen,? 1999", "shortCiteRegEx": "Jensen", "year": 1999}, {"title": "Bayesian Networks and Decision Graphs", "author": ["F.V. Jensen"], "venue": "Springer-Verlag, Inc., New York.", "citeRegEx": "Jensen,? 2001", "shortCiteRegEx": "Jensen", "year": 2001}, {"title": "Making sensitivity analysis computationally efficient", "author": ["U. Kj\u00e6rulff", "L.C. van der Gaag"], "venue": "In Proceedings of the 16th Conference on Uncertainty in Artificial Intelligence (UAI),", "citeRegEx": "Kj\u00e6rulff and Gaag,? \\Q2000\\E", "shortCiteRegEx": "Kj\u00e6rulff and Gaag", "year": 2000}, {"title": "Sensitivity analysis for probability assessments in Bayesian networks", "author": ["K.B. Laskey"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics, 25, 901\u2013909.", "citeRegEx": "Laskey,? 1995", "shortCiteRegEx": "Laskey", "year": 1995}, {"title": "Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference", "author": ["J. Pearl"], "venue": "Morgan Kaufmann Publishers, Inc., San Mateo, California.", "citeRegEx": "Pearl,? 1988", "shortCiteRegEx": "Pearl", "year": 1988}, {"title": "Context-specific approximation in probabilistic inference", "author": ["D. Poole"], "venue": "Proceedings of the 14th Conference on Uncertainty in Artificial Intelligence (UAI), pp. 447\u2013454.", "citeRegEx": "Poole,? 1998", "shortCiteRegEx": "Poole", "year": 1998}, {"title": "The sensitivity of belief networks to imprecise probabilities: an experimental investigation", "author": ["M. Pradhan", "M. Henrion", "G. Provan", "B. Del Favero", "K. Huang"], "venue": "Artificial Intelligence,", "citeRegEx": "Pradhan et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Pradhan et al\\.", "year": 1996}, {"title": "Local learning in probabilistic networks with hidden variables", "author": ["S. Russell", "J. Binder", "D. Koller", "K. Kanazawa"], "venue": "In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "Russell et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Russell et al\\.", "year": 1995}, {"title": "Analysing sensitivity data from probabilistic networks", "author": ["L.C. van der Gaag", "S. Renooij"], "venue": "In Proceedings of the 17th Conference on Uncertainty in Artificial Intelligence (UAI),", "citeRegEx": "Gaag and Renooij,? \\Q2001\\E", "shortCiteRegEx": "Gaag and Renooij", "year": 2001}], "referenceMentions": [{"referenceID": 10, "context": "Introduction A belief network is a compact representation of a probability distribution (Pearl, 1988; Jensen, 2001).", "startOffset": 88, "endOffset": 115}, {"referenceID": 7, "context": "Introduction A belief network is a compact representation of a probability distribution (Pearl, 1988; Jensen, 2001).", "startOffset": 88, "endOffset": 115}, {"referenceID": 11, "context": "Next, it can be important for approximate inference algorithms that pre-process network parameters to eliminate small distinctions in such parameters, in order to increase the efficiency of inference (Poole, 1998).", "startOffset": 200, "endOffset": 213}, {"referenceID": 9, "context": "The Tuning of Network Parameters We report in this section on a tool that we have been developing, called SamIam, for finetuning network parameters (Laskey, 1995; Castillo, Guti\u00e9rrez, & Hadi, 1997; Jensen, 1999; Kj\u00e6rulff & van der Gaag, 2000; Darwiche, 2000).", "startOffset": 148, "endOffset": 258}, {"referenceID": 6, "context": "The Tuning of Network Parameters We report in this section on a tool that we have been developing, called SamIam, for finetuning network parameters (Laskey, 1995; Castillo, Guti\u00e9rrez, & Hadi, 1997; Jensen, 1999; Kj\u00e6rulff & van der Gaag, 2000; Darwiche, 2000).", "startOffset": 148, "endOffset": 258}, {"referenceID": 3, "context": "The Tuning of Network Parameters We report in this section on a tool that we have been developing, called SamIam, for finetuning network parameters (Laskey, 1995; Castillo, Guti\u00e9rrez, & Hadi, 1997; Jensen, 1999; Kj\u00e6rulff & van der Gaag, 2000; Darwiche, 2000).", "startOffset": 148, "endOffset": 258}, {"referenceID": 0, "context": "First we observe that the probability of an instantiation e, Pr(e), is a linear function in any network parameter \u03b8x|u in a belief network (Russell, Binder, Koller, & Kanazawa, 1995; Castillo et al., 1997).", "startOffset": 139, "endOffset": 205}, {"referenceID": 3, "context": "If either of the previous parameters is zero, we can use the differential approach by Darwiche (2000) to compute the derivative directly.", "startOffset": 86, "endOffset": 102}, {"referenceID": 3, "context": "The join-tree algorithm (Jensen, Lauritzen, & Olesen, 1990) and the differential approach (Darwiche, 2000) can both compute Pr(i, x,u), for a given instantiation i and all family instantiations x,u of every variable X in O(n expw) time.", "startOffset": 90, "endOffset": 106}, {"referenceID": 3, "context": "2 Multi-Valued Variables Our results can be easily extended to multi-valued variables, as long as we assume a model for changing co-varying parameters when one of them changes (Darwiche, 2000; Kj\u00e6rulff & van der Gaag, 2000).", "startOffset": 176, "endOffset": 223}, {"referenceID": 12, "context": "There is also a need to reconcile the sensitivities exhibited by our examples with previous experimental studies demonstrating the robustness of probabilistic queries against small parameter changes in certain application areas, such as diagnosis (Pradhan et al., 1996).", "startOffset": 247, "endOffset": 269}, {"referenceID": 3, "context": "Note that we have an exact closed form for the derivative \u2202Pr(y | e)/\u2202\u03c4x|u (Darwiche, 2000; Greiner, Grove, & Schuurmans, 1997), but that form includes terms which are specific to the given belief network.", "startOffset": 75, "endOffset": 127}, {"referenceID": 12, "context": "This seems to explain some of the results by Pradhan et al. (1996), where robustness have been confirmed for queries with Pr(y | e) \u2265 .", "startOffset": 45, "endOffset": 67}, {"referenceID": 3, "context": "7 The relative change in Pr(y | e) may be greater than double the relative change in \u03c4x|u for non-infinitesimal changes because the derivative \u2202Pr(y | e)/\u2202\u03c4x|u depends on the value of \u03c4x|u (Darwiche, 2000; Jensen, 1999).", "startOffset": 189, "endOffset": 219}, {"referenceID": 6, "context": "7 The relative change in Pr(y | e) may be greater than double the relative change in \u03c4x|u for non-infinitesimal changes because the derivative \u2202Pr(y | e)/\u2202\u03c4x|u depends on the value of \u03c4x|u (Darwiche, 2000; Jensen, 1999).", "startOffset": 189, "endOffset": 219}, {"referenceID": 12, "context": "Changes that (Don\u2019t) Matter We now return to a central question: When do changes in network parameters matter and when do they not matter? As we mentioned earlier, there have been experimental studies investigating the robustness of belief networks against parameter changes (Pradhan et al., 1996).", "startOffset": 275, "endOffset": 297}, {"referenceID": 14, "context": "where a, b, c, d are constants that depend on the given network and are computed by performing inference as suggested by van der Gaag and Renooij (2001). Going back to Example 2.", "startOffset": 129, "endOffset": 153}, {"referenceID": 12, "context": "Again, the plots explain analytically why we can afford more absolute changes to non-extreme probabilities (Pradhan et al., 1996; Poole, 1998).", "startOffset": 107, "endOffset": 142}, {"referenceID": 11, "context": "Again, the plots explain analytically why we can afford more absolute changes to non-extreme probabilities (Pradhan et al., 1996; Poole, 1998).", "startOffset": 107, "endOffset": 142}, {"referenceID": 13, "context": "Proof From Russell et al. (1995), the semantics of the first derivative of Pr(e) with respect to parameter \u03b8x|u is given by: 9 \u2202Pr(e) \u2202\u03b8x|u = Pr(e, x,u) \u03b8x|u , if \u03b8x|u 6= 0, and: \u2202Pr(e) \u2202\u03b8x|u = Pr(e, x,u) \u03b8x|u , if \u03b8x|u 6= 0.", "startOffset": 11, "endOffset": 33}, {"referenceID": 3, "context": "Proof From Darwiche (2000), the derivative \u2202Pr(y | e)/\u2202\u03b8x|u is equal to: \u2202Pr(y | e) \u2202\u03b8x|u = Pr(y, x,u | e) \u2212 Pr(y | e)Pr(x,u | e) Pr(x | u) .", "startOffset": 11, "endOffset": 27}], "year": 2011, "abstractText": "Common wisdom has it that small distinctions in the probabilities (parameters) quantifying a belief network do not matter much for the results of probabilistic queries. Yet, one can develop realistic scenarios under which small variations in network parameters can lead to significant changes in computed queries. A pending theoretical question is then to analytically characterize parameter changes that do or do not matter. In this paper, we study the sensitivity of probabilistic queries to changes in network parameters and prove some tight bounds on the impact that such parameters can have on queries. Our analytic results pinpoint some interesting situations under which parameter changes do or do not matter. These results are important for knowledge engineers as they help them identify influential network parameters. They also help explain some of the previous experimental results and observations with regards to network robustness against parameter changes.", "creator": "dvips(k) 5.86 Copyright 1999 Radical Eye Software"}}}