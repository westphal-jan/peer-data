{"id": "1107.0043", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Jun-2011", "title": "A Maximal Tractable Class of Soft Constraints", "abstract": "Many researchers in artificial intelligence are beginning to explore the use of soft constraints to express a set of (possibly conflicting) problem requirements. A soft constraint is a function defined on a collection of variables which associates some measure of desirability with each possible combination of values for those variables. However, the crucial question of the computational complexity of finding the optimal solution to a collection of soft constraints has so far received very little attention. In this paper we identify a class of soft binary constraints for which the problem of finding the optimal solution is tractable. In other words, we show that for any given set of such constraints, there exists a polynomial time algorithm to determine the assignment having the best overall combined measure of desirability. This tractable class includes many commonly-occurring soft constraints, such as 'as near as possible' or 'as soon as possible after', as well as crisp constraints such as 'greater than'. Finally, we show that this tractable class is maximal, in the sense that adding any other form of soft binary constraint which is not in the class gives rise to a class of problems which is NP-hard.", "histories": [["v1", "Thu, 30 Jun 2011 20:39:17 GMT  (186kb)", "http://arxiv.org/abs/1107.0043v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["d cohen", "m cooper", "p jeavons", "a krokhin"], "accepted": false, "id": "1107.0043"}, "pdf": {"name": "1107.0043.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["David Cohen"], "emails": [], "sections": [{"heading": null, "text": "A Maximal Tra table Class of Soft Constraints\nDavid Cohen d. ohen rhul.a .uk Computer S ien e Department Royal Holloway, University of London, UK\nMartin Cooper ooper irit.fr IRIT University of Toulouse III, Fran e\nPeter Jeavons peter.jeavons omlab.ox.a .uk OUCL University of Oxford, UK\nAndrei Krokhin ak d s.warwi k.a .uk Computer S ien e Department University of Warwi k, UK\nAbstra t\nMany resear hers in arti ial intelligen e are beginning to explore the use of soft onstraints to express a set of (possibly on i ting) problem requirements. A soft onstraint is a fun tion de ned on a olle tion of variables whi h asso iates some measure of desirability with ea h possible ombination of values for those variables. However, the ru ial question of the omputational omplexity of nding the optimal solution to a olle tion of soft onstraints has so far re eived very little attention. In this paper we identify a lass of soft binary onstraints for whi h the problem of nding the optimal solution is tra table. In other words, we show that for any given set of su h onstraints, there exists a polynomial time algorithm to determine the assignment having the best overall ombined measure of desirability. This tra table lass in ludes many ommonly-o urring soft onstraints, su h as \\as near as possible\" or \\as soon as possible after\", as well as risp onstraints su h as \\greater than\". Finally, we show that this tra table lass is maximal, in the sense that adding any other form of soft binary onstraint whi h is not in the lass gives rise to a lass of problems whi h is NP-hard."}, {"heading": "1. Introdu tion", "text": "The onstraint satisfa tion framework is widely a knowledged as a onvenient and e\u00c6 ient way to model and solve a wide variety of problems arising in Arti ial Intelligen e, in luding planning (Kautz & Selman, 1992) and s heduling (van Beek, 1992), image pro essing (Montanari, 1974) and natural language understanding (Allen, 1995).\nIn the standard framework a onstraint is usually taken to be a predi ate, or relation, spe ifying the allowed ombinations of values for some xed olle tion of variables: we will refer to su h onstraints here as risp onstraints. A number of authors have suggested that the usefulness of the onstraint satisfa tion framework ould be greatly enhan ed by extending the de nition of a onstraint to in lude also soft onstraints, whi h allow di erent measures of desirability to be asso iated with di erent ombinations of values (Bistarelli et al., 1997, 1999). In this extended framework a onstraint an be seen as a fun tion,\n2004 AI A ess Foundation. All rights reserved.\nmapping ea h possible ombination of values to a measure of desirability or undesirability. Finding a solution to a set of onstraints then means nding an assignment of values to all of the variables whi h has the best overall ombined desirability measure.\nExample 1.1 Consider an optimization problem with 2n variables, v\n1\n; v\n2\n; : : : ; v\n2n\n, where\nwe wish to assign ea h variable an integer value in the range 1; 2; : : : ; n, subje t to the following restri tions:\nEa h variable v\ni\nshould be assigned a value that is as lose as possible to i=2.\nEa h pair of variables v\ni\n, v\n2i\nshould be assigned a pair of values that are as lose as\npossible to ea h other.\nTo model this situation we might impose the following soft onstraints:\nA unary onstraint on ea h v\ni\nspe i ed by a fun tion\ni\n,\nwhere\ni\n(x) = (x i=2)\n2\n.\nA binary onstraint on ea h pair v\ni\n; v\n2i\nspe i ed by a fun tion \u00c6\nr\n,\nwhere \u00c6\nr\n(x; y) = jx yj\nr\nfor some r 1.\nWe would then seek an assignment to all of the variables whi h minimizes the sum of all of these onstraint fun tions,\n2n\nX\ni=1\ni\n(v\ni\n) +\nn\nX\ni=1\n\u00c6\nr\n(v\ni\n; v\n2i\n):\nThe ost of allowing additional exibility in the spe i ation of onstraints, in order to model requirements of this kind, is generally an in rease in omputational di\u00c6 ulty. In the ase of risp onstraints there has been onsiderable progress in identifying lasses of\nonstraints whi h are tra table, in the sense that there exists a polynomial time algorithm to determine whether or not any olle tion of onstraints from su h a lass an be simultaneously satis ed (Bulatov, 2003; Feder & Vardi, 1998; Jeavons et al., 1997). In the ase of soft onstraints there has been a detailed investigation of the tra table ases for Boolean problems (where ea h variable has just 2 possible values) (Creignou et al., 2001), but very little investigation of the tra table ases over larger nite domains, even though there are many signi ant results in the literature on ombinatorial optimization whi h are learly relevant to this question (Nemhauser & Wolsey, 1988).\nThe only previous work we have been able to nd on the omplexity of non-Boolean soft onstraints is a paper by Khatib et al. (2001), whi h des ribes a family of tra table soft temporal onstraints. However, the framework for soft onstraints used by Khatib et al. (2001) is di erent from the one we use here, and the results are not dire tly omparable. We dis uss the relationship between this earlier work and ours more fully in Se tion 5.\nIn this paper we make use of the idea of a submodular fun tion (Nemhauser & Wolsey, 1988) to identify a general lass of soft onstraints for whi h there exists a polynomial time solution algorithm. Submodular fun tions are widely used in e onomi s and operational resear h (Fujishige, 1991; Nemhauser & Wolsey, 1988; Topkis, 1998), and the notion of submodularity provides a kind of dis rete analogue of onvexity (Lov asz, 1983).\nSubmodular fun tions are usually de ned (Nemhauser & Wolsey, 1988) as real-valued fun tions on sets (whi h may be viewed as Boolean tuples), but we onsider here the more general ase of fun tions on tuples over an arbitrary nite domain (as in Topkis, 1978). We also allow our fun tions to take in nite values. By establishing a new de omposition result for binary submodular fun tions of this kind, we obtain a ubi time algorithm to nd the optimal assignment for any set of soft onstraints whi h an be de ned using them (su h as the onstraints in Example 1.1). Be ause our algorithm is spe ially devised for submodular fun tions that are expressed as a ombination of binary fun tions, it is mu h more e\u00c6 ient in this ase than existing general algorithms for submodular fun tion minimization (S hrijver, 2000; Iwata et al., 2001).\nWe give a number of examples to illustrate the many di erent forms of soft onstraint that an be de ned using binary submodular fun tions, and we also show that this lass is maximal, in the sense that no other form of binary onstraint an be added to the lass without sa ri ing tra tability."}, {"heading": "2. De nitions", "text": "To identify a tra table lass of soft onstraints we will need to restri t the set of fun tions that are used to spe ify onstraints. Su h a restri ted set of possible fun tions will be alled a soft onstraint language.\nDe nition 2.1 Let D and E be xed sets. A soft onstraint language over D with evaluations in E is de ned to be a set of fun tions, , su h that ea h 2 is a fun tion from D k to E, for some k 2 N, where k is alled the arity of .\nFor any given hoi e of soft onstraint language, , we de ne an asso iated soft onstraint satisfa tion problem, whi h we will all sCSP( ), as follows.\nDe nition 2.2 Let be a soft onstraint language over D with evaluations in E. An instan e P of sCSP( ) is a triple hV;D;Ci, where:\nV is a nite set of variables, whi h must be assigned values from the set D.\nC is a set of soft onstraints. Ea h 2 C is a pair h ; i where: is a list of variables, of length j j, alled the s ope of ; and is an element of of arity j j, alled the evaluation fun tion of .\nThe evaluation fun tion will be used to spe ify some measure of desirability or undesirability asso iated with ea h possible tuple of values over .\nTo omplete the de nition of a soft onstraint satisfa tion problem we need to de ne how the evaluations obtained from ea h evaluation fun tion are ombined and ompared, in order to de ne what onstitutes an optimal overall solution. Several alternative mathemati al approa hes to this issue have been suggested in the literature:\nIn the semiring based approa h (Bistarelli et al., 1997, 1999), the set of possible evaluations, E, is assumed to be an algebrai stru ture equipped with two binary operations, satisfying the axioms of a semiring. One example of su h a stru ture is the real interval [0; 1\u2104, equipped with the operations min and max, whi h orresponds\nto the onjun tive fuzzy CSP framework (Rosenfeld et al., 1976; Ruttkay, 1994). Another example is the set f0; 1; 2; : : :g[f1g, equipped with the operations max and plus, whi h orresponds to the weighted CSP framework (Bistarelli et al., 1999).\nIn the valued CSP approa h (Bistarelli et al., 1999), the set of possible evaluations E is assumed to be a totally ordered algebrai stru ture with a top and bottom element and a single monotoni binary operation known as aggregation. One example of su h a stru ture is the set of multisets over some nite ordered set together with a top element, equipped with the operation of multiset union, whi h orresponds to the lexi ographi CSP framework (Bistarelli et al., 1999).\nFor our purposes, we require the same properties as the valued CSP approa h, with the additional requirement that the aggregation operation has a partial inverse, su h that evaluations other than the top element may be \\ an elled\" when o urring on both sides of an inequality. For simpli ity, we shall assume throughout this paper that the set of evaluations E is either the set of non-negative integers together with in nity, or else the set of nonnegative real numbers together with in nity 1 . Hen e, throughout this paper the bottom element in the evaluation stru ture is 0, the top element is 1, and for any two evaluations\n1\n;\n2\n2 E, the aggregation of\n1\nand\n2\nis given by\n1\n+\n2\n2 E. Moreover, when\n1\n2\nwe also have\n1\n2\n2 E. (Note that we set 1 1 =1).\nThe elements of the set E are used to represent di erent measure of undesirability, or penalties, asso iated with di erent ombinations of values. This allows us to omplete the de nition of a soft onstraint satisfa tion problem with the following simple de nition of a solution to an instan e.\nDe nition 2.3 For any soft onstraint satisfa tion problem instan e P = hV;D;Ci, an assignment for P is a mapping t from V to D. The evaluation of an assignment t, denoted\nP\n(t), is given by the sum (i.e., aggregation) of the evaluations for the restri tions of t\nonto ea h onstraint s ope, that is,\nP\n(t) =\nX\nhhv\n1\n; v\n2\n; : : : ; v\nk\ni; i2C\n(t(v\n1\n); t(v\n2\n); : : : ; t(v\nk\n)):\nA solution to P is an assignment with the smallest possible evaluation, and the question is to nd a solution.\nExample 2.4 For any standard onstraint satisfa tion problem instan e P with risp onstraints, we an de ne a orresponding soft onstraint satisfa tion problem instan e b P in whi h the range of the evaluation fun tions of all the onstraints is the set f0;1g. For ea h\nrisp onstraint of P, we de ne a orresponding soft onstraint b of\nb P with the same s ope;\nthe evaluation fun tion of b maps ea h tuple allowed by to 0, and ea h tuple disallowed by to 1.\nIn this ase the evaluation of an assignment t for\nb P equals the minimal possible evalu-\nation, 0, if and only if t satis es all of the risp onstraints in P .\n1. Many of our results an be extended to more general evaluation stru tures, su h as the stri tly monotoni\nstru tures des ribed by Cooper (2003), but we will not pursue this idea here.\nExample 2.5 For any standard onstraint satisfa tion problem instan e P with risp onstraints, we an de ne a orresponding soft onstraint satisfa tion problem instan e P # in whi h the range of the evaluation fun tions of all the onstraints is the set f0; 1g. For ea h\nrisp onstraint of P , we de ne a orresponding soft onstraint\n#\nof P\n#\nwith the same\ns ope; the evaluation fun tion of\n#\nmaps ea h tuple allowed by to 0, and ea h tuple\ndisallowed by to 1.\nIn this ase the evaluation of an assignment t for P\n#\nequals the number of risp on-\nstraints in P whi h are violated by t. Hen e a solution to P\n#\norresponds to an assignment\nwhi h violates the minimal number of onstraints of P , and hen e satis es the maximal number of onstraints of P. Finding assignments of this kind is generally referred to as solving the Max-CSP problem (Freuder & Walla e, 1992; Larrosa et al., 1999).\nNote that the problem of nding a solution to a soft onstraint satisfa tion problem is an NP optimization problem, that is, it lies in the omplexity lass NPO (see Creignou et al., 2001 for a formal de nition of this lass). If there exists a polynomial-time algorithm whi h\nnds a solution to all instan es of sCSP( ), then we shall say that sCSP( ) is tra table. On the other hand, if there is a polynomial-time redu tion from some NP- omplete problem to sCSP( ), then we shall say that sCSP( ) is NP-hard.\nExample 2.6 Let be a soft onstraint language over D, where jDj = 2. In this ase sCSP( ) is a lass of Boolean soft onstraint satisfa tion problems.\nIf we restri t even further, by only allowing fun tions with range f0;1g, as in Example 2.4, then sCSP( ) orresponds pre isely to a standard Boolean risp onstraint satisfa tion problem. Su h problems are sometimes known as Generalized Satisfiability problems (S haefer, 1978). The omplexity of sCSP( ) for su h restri ted sets has been ompletely hara terised, and it has been shown that there are pre isely six tra table\nases (S haefer, 1978; Creignou et al., 2001).\nAlternatively, if we restri t by only allowing fun tions with range f0; 1g, as in Example 2.5, then sCSP( ) orresponds pre isely to a standard Boolean maximum satis ability problem, in whi h the aim is to satisfy the maximum number of risp onstraints. Su h problems are sometimes known as Max-Sat problems (Creignou et al., 2001). The omplexity of sCSP( ) for su h restri ted sets has been ompletely hara terised, and it has been shown that there are pre isely three tra table ases (see Theorem 7.6 of Creignou et al., 2001).\nWe note, in parti ular, that when ontains just the single binary fun tion\nXOR\nde ned by\nXOR\n(x; y) =\n0 if x 6= y 1 otherwise\nthen sCSP( ) orresponds to the Max-Sat problem for the ex lusive-or predi ate, whi h is known to be NP-hard (see Lemma 7.4 of Creignou et al., 2001).\nExample 2.7 Let be a soft onstraint language over D = f1; 2; : : : ;Mg, where M 3, and assume that ontains just the set of all unary fun tions, together with the single binary fun tion\nEQ\nde ned by\nEQ\n(x; y) =\n0 if x = y 1 otherwise.\nEven in this very simple ase it an be shown that sCSP( ) is NP-hard, by redu tion from the Minimum 3-terminal Cut problem (Dahlhaus et al., 1994). An instan e of this problem onsists of an undire ted graph (V;E) in whi h ea h edge e 2 E has an asso iated weight, together with a set of distinguished verti es, fv\n1\n; v\n2\n; v\n3\ng V , known as terminals.\nThe problem is to nd a set of edges with the smallest possible total weight whose removal dis onne ts ea h possible pair of terminals. Su h a set is known as a minimum 3-terminal\nut.\nTo obtain the redu tion to sCSP( ), let I be an instan e ofMinimum 3-Terminal Cut\nonsisting of the graph hV;Ei with terminals fv\n1\n; v\n2\n; v\n3\ng. We onstru t a orresponding\ninstan e P\nI\nof sCSP( ) as follows. The variables of P\nI\norrespond to the set of verti es V .\nFor ea h edge fv\ni\n; v\nj\ng 2 E, add a binary soft onstraint with s ope hv\ni\n; v\nj\ni and evaluation\nfun tion\nEQ\n, as above. Finally, for ea h terminal v\ni\n2 fv\n1\n; v\n2\n; v\n3\ng, add a unary onstraint\non the variable v\ni\nwith evaluation fun tion\ni\n, de ned as follows:\ni\n(x) =\n0 if x = i jEj+ 1 otherwise\nIt is straightforward to he k that the number of edges in a minimum 3-terminal ut of I is equal to the evaluation of a solution to P\nI\n.\nThe examples above indi ate that generalizing the onstraint satisfa tion framework to in-\nlude soft onstraints does indeed in rease the omputational omplexity, in general. For example, the standard 2-Satisfiability problem is tra table, but the soft onstraint satisfa tion problem involving only the single binary Boolean fun tion,\nXOR\n, de ned at the\nend of Example 2.6, is NP-hard. Similarly, the standard onstraint satisfa tion problem involving only risp unary onstraints and equality onstraints is learly trivial, but the soft\nonstraint satisfa tion problem involving only soft unary onstraints and a soft version of\nthe equality onstraint, spe i ed by the fun tion\nEQ\nde ned in Example 2.7, is NP-hard.\nHowever, in the next two se tions we will show that it is possible to identify a large lass\nof fun tions for whi h the orresponding soft onstraint satisfa tion problem is tra table."}, {"heading": "3. Generalized Interval Fun tions", "text": "We begin with a rather restri ted lass of binary fun tions, with a very spe ial stru ture.\nDe nition 3.1 Let D be a totally ordered set. A binary fun tion, : D\n2\n! E will be alled\na generalized interval fun tion on D if it has the following form:\n(x; y) =\n0 if (x < a) _ (y > b);\notherwise\nfor some a; b 2 D and some 2 E. Su h a fun tion will be denoted\n[a;b\u2104\n.\nWe an explain the hoi e of name for these fun tions by onsidering the unary fun tion\n[a;b\u2104\n(x; x). This fun tion returns the value if and only if its argument lies in the interval\n[a; b\u2104; outside of this interval it returns the value 0.\nWe shall write\nGI\nto denote the set of all generalized interval fun tions on D, where\nD = f1; 2; : : : ;Mg with the usual ordering.\ny\n[a;b\u2104\nNote that the table of values for any fun tion\n[a;b\u2104\n2\nGI\nan be written as an M M\nmatrix in whi h all the entries are 0, ex ept for the re tangular region lying between positions ha; 1i and hM:bi, where the entries have value , as illustrated in Figure 1. Hen e when\n= 1, a soft onstraint with evaluation fun tion\n[a;b\u2104\nis equivalent to a risp onstraint\nwhi h is a parti ular form of onne ted row- onvex onstraint (Deville et al., 1999).\nThe main result of this se tion is Corollary 3.6, whi h states that sCSP(\nGI\n) is tra table.\nTo establish this result we rst de ne a weighted dire ted graph\n2\nasso iated with ea h\ninstan e of sCSP(\nGI\n) (see Figure 2).\nDe nition 3.2 Let P = hV; f1; : : : ;Mg; Ci be an instan e of sCSP(\nGI\n). We de ne the\nweighted dire ted graph G\nP\nas follows.\nThe verti es of G\nP\nare as follows: fS; Tg [ fv\nd\nj v 2 V; d 2 f0; 1; : : : ;Mgg:\nThe edges of G\nP\nare de ned as follows:\n{ For ea h v 2 V , there is an edge from S to v\nM\nwith weight 1;\n{ For ea h v 2 V , there is an edge from v\n0\nto T with weight 1;\n{ For ea h v 2 V and ea h d 2 f1; 2; : : : ;M 2g, there is an edge from v\nd\nto v\nd+1\nwith weight 1;\n{ For ea h onstraint hhv; wi;\n[a;b\u2104\ni 2 C, there is an edge from w\nb\nto v\na 1\nwith\nweight . These edges are alled \\ onstraint edges\".\n2. This onstru tion was inspired by a similar onstru tion for ertain Boolean onstraints des ribed\nby Khanna et al. (2000).\nP\nasso iated with the instan e P de ned in Example 3.3.\n(Note that solid arrows indi ate edges with in nite weight.)\nExample 3.3 Let P = hfx; y; zg; f1; 2; 3; 4g; Ci be an instan e of sCSP(\nGI\n) with the\nfollowing four onstraints:\n1\n= hhy; xi;\n3 [3;4\u2104 i\n3\n= hhz; yi;\n7 [1;3\u2104 i\n2\n= hhy; zi;\n2 [4;3\u2104 i\n4\n= hhz; zi;\n1 [2;4\u2104 i\nThe orresponding weighted dire ted graph G\nP\n, is shown in Figure 2.\nAny set of edges C in the graph G\nP\nwhose removal leaves the verti es S and T dis onne ted\nwill be alled a ut. If C is a minimal set of edges with this property, in the sense that removing any edge from C leaves a set of edges whi h is not a ut, then C will alled a minimal ut. If every edge in C is a onstraint edge, then C will be alled a proper ut. The weight of a ut C is de ned to be the sum of the weights of all the edges in C.\nExample 3.4 Consider the graph G\nP\nshown in Figure 2. The set fhy\n3\n; z\n0\nig is a proper ut\ninG\nP\nwith weight 7, whi h is minimal in the sense de ned above. The set fhx\n4\n; y\n2\ni; hz\n3\n; y\n3\nig\nis also a proper ut in G\nP\nwith weight 5, whi h is again minimal in the sense de ned above.\nProposition 3.5 Let P be any instan e of sCSP(\nGI\n), and let G\nP\nbe the asso iated\nweighted dire ted graph, as spe i ed in De nition 3.2.\n1. For ea h minimal proper ut in G\nP\nwith weight , there is an assignment for P with\nevaluation .\n2. For ea h assignment t for P with evaluation , there is a proper ut in G\nP\nwith\nweight ."}, {"heading": "Proof:", "text": "1. Let C be any minimal proper ut of the graph G\nP\n, and let C\nS\nbe the omponent of\nG\nP\nnC onne ted to S. Sin e C is proper, C\nS\nalways ontains v\nM\n, and never ontains\nv\n0\n, so we an de ne the assignment t\nC\nas follows:\nt\nC\n(v) = minfd j v\nd\n2 C\nS\ng\nBy the onstru tion of G\nP\n, it follows that:\nt\nC\n(v) > d , v\nd\n62 C\nS\n(1)\nNow onsider any onstraint = hhv; wi;\n[a;b\u2104\ni of P , and its asso iated edge e in G\nP\n.\nBy De nition 3.1 and Equation 1,\n[a;b\u2104\n(t\nC\n(v); t\nC\n(w)) = if and only if v\na 1\n62 C\nS\nand\nw\nb\n2 C\nS\n, and hen e if and only if e joins a vertex in C\nS\nto a vertex not in C\nS\n. Sin e\nC is minimal, this happens if and only if e 2 C. Hen e, the total weight of the ut C is equal to the evaluation of t\nC\n.\n2. Conversely, let t be an assignment to P, and let K be the set of onstraints in P with\na non-zero evaluation on t.\nNow onsider any path from S to T in G\nP\n. If we examine, in order, the onstraint\nedges of this path, and assume that ea h of the orresponding onstraints evaluates to 0, then we obtain a sequen e of assertions of the following form:\n(v\ni\n0\n> M) _ (v\ni\n1\n< a\n1\n)\n(v\ni\n1\n> b\n2\n) _ (v\ni\n2\n< a\n2\n) for some b\n2\na\n1\n. . .\n(v\ni\nk 1\n> b\nk\n) _ (v\ni\nk\n< a\nk\n) for some b\nk\na\nk 1\n(v\ni\nk\n> b\nk+1\n) _ (v\ni\nk+1\n< 1) for some b\nk+1\na\nk\nSin e the se ond disjun t of ea h assertion ontradi ts the rst disjun t of the next, these assertions annot all hold simultaneously, so one of the orresponding onstraints must in fa t give a non-zero evaluation on t. Hen e, every path from S to T in ludes at least one edge orresponding to a onstraint from K, and so the edges orresponding to the set K form a ut in G\nP\n. Furthermore, by the hoi e of K, the weight of this\nut is equal to the evaluation of t.\nHen e, by using a standard e\u00c6 ient algorithm for the Minimum Weighted Cut problem (Goldberg & Tarjan, 1988), we an nd an optimal assignment in ubi time, as the next result indi ates.\nCorollary 3.6 The time omplexity of sCSP(\nGI\n) is O(n\n3\njDj\n3\n), where n is the number of\nvariables.\nProof: Let P = hV;D;Ci be any instan e of sCSP(\nGI\n), and let G\nP\nbe the orresponding\nweighted dire ted graph. If the minimum weight for a ut in G\nP\nis ! <1, then it must be\na proper ut, so P has a solution with evaluation !, by Proposition 3.5. Moreover, if the minimum weight for a ut in G\nP\nis1, then the evaluation of every assignment for P is1.\nHen e we have established a linear-time redu tion from sCSP(\nGI\n) to the Minimum\nWeighted Cut problem.\nSin e G\nP\nhas v = jV j(jDj + 1) + 2 verti es, and the time omplexity of Minimum\nWeighted Cut is O(v\n3\n) (Goldberg & Tarjan, 1988), the result follows."}, {"heading": "4. Submodular Fun tions", "text": "In this se tion we will onsider a rather more general and useful lass of fun tions, as des ribed by Topkis (1978).\nDe nition 4.1 Let D be a totally ordered set. A fun tion, : D\nk\n! E is alled a sub-\nmodular fun tion on D if, for all ha\n1\n; : : : ; a\nk\ni; hb\n1\n; : : : ; b\nk\ni 2 D\nk\n, we have\n(min(a\n1\n; b\n1\n); : : : ;min(a\nk\n; b\nk\n)) + (max(a\n1\n; b\n1\n); : : : ;max(a\nk\n; b\nk\n))\n(a\n1\n; : : : ; a\nk\n) + (b\n1\n; : : : ; b\nk\n):\nIt is easy to he k that all unary fun tions and all generalized interval fun tions are submodular. It also follows immediately from De nition 4.1 that the sum of any two submodular fun tions is submodular. This suggests that in some ases it may be possible to express a submodular fun tion as a sum of simpler submodular fun tions. For example, for any unary fun tion : D ! E we have\n(x)\nX\nd2D\n(d) [d;d\u2104 (x; x):\nFor binary fun tions, the de nition of submodularity an be expressed in a simpli ed form, as follows.\nRemark 4.2 Let D be a totally ordered set. A binary fun tion, : D\n2\n! E is submodular\nif and only if, for all u; v; x; y 2 D, with u x and v y, we have:\n(u; v) + (x; y) (u; y) + (x; v)\nNote that when u = x or v = y this inequality holds trivially, so it is su\u00c6 ient to he k only those ases where u < x and v < y.\nExample 4.3 Let D be the set f1; 2; : : : ;Mg with the usual ordering, and onsider the binary fun tion\nM\n, de ned by\nM\n(x; y) =M\n2\nxy.\nFor any u; v; x; y 2 D, with u < x and v < y, we have:\nM\n(u; v) +\nM\n(x; y) = 2M\n2\nuv xy\n= 2M\n2\nuy xv (x u)(y v)\nM\n(u; y) +\nM\n(x; v):\nHen e, by Remark 4.2, the fun tion\nM\nis submodular.\nA real-valued m n matrix A with the property that\nA\nuv\n+A\nxy\nA\nuy\n+A\nxv\n; for all 1 u < x m, 1 v < y n\nis known in operational resear h as a Monge matrix (for a survey of the properties of su h matri es and their use in optimization, see Burkard et al., 1996). It is lear from Remark 4.2 that the table of values for a real-valued binary submodular fun tion is a Monge matrix, and onversely, every square Monge matrix an be viewed as a table of values for a binary submodular fun tion.\nIt was shown by Rudolf and Woeginger (1995) that an arbitrary Monge matrix an be de omposed as a sum of simpler matri es. We now obtain a orresponding result for binary submodular fun tions, by showing that any binary submodular fun tion an be de omposed as a sum of generalized interval fun tions. (The result we obtain below is slightly more general than the de omposition result for Monge matri es given by Rudolf and Woeginger (1995), be ause we are allowing submodular fun tions to take in nite values.) Using this de omposition result, we will show that the set of unary and binary submodular fun tions is a tra table soft onstraint language.\nTo obtain our de omposition result, we use the following te hni al lemma.\nLemma 4.4 Let D be a totally ordered set and let : D\n2\n! E be a binary submodular\nfun tion. For any a; b; 2 D su h that a b , if there exists e 2 D with (e; b) = 0, then for all x 2 D we have (x; b) max( (x; a); (x; )).\nProof: Assume that (e; b) = 0.\nIf x > e then, by the submodularity of , we have (x; b) (x; b) + (e; a)\n(x; a) + (e; b) = (x; a)\nIf x < e then, by the submodularity of , we have (x; b) (x; b) + (e; )\n(e; b) + (x; ) = (x; ).\nIf e = x then (x; b) = 0.\nHen e, in all ases the result holds.\nLemma 4.5 Let D be a totally ordered nite set. A binary fun tion, : D\n2\n! E is\nsubmodular if and only if it an be expressed as a sum of generalized interval fun tions on D. Furthermore, a de omposition of this form an be obtained in O(jDj 3 ) time.\nProof: By the observations already made, any fun tion whi h is equal to a sum of generalized interval fun tions is learly submodular.\nTo establish the onverse, we use indu tion on the tightness of , denoted ( ), that is,\nthe number of pairs for whi h the value of is non-zero.\nAssume that is a binary submodular fun tion. If ( ) = 0, then is identi ally zero, so the result holds trivially. Otherwise, by indu tion, we shall assume that the result holds for all binary submodular fun tions that have a lower tightness.\nTo simplify the notation, we shall assume that D = f1; 2; : : : ;Mg, with the usual order-\ning.\nWe will say that a value a 2 D is in onsistent if, for all y 2 D, (a; y) = 1. If every a 2 D is in onsistent, then all values of are 1, so it is equal to the generalized interval fun tion 1\n[1;M \u2104\n, and the result holds. Otherwise, if there exists at least one in onsistent\nvalue, then we an nd a pair of values a; b 2 D, with ja bj = 1, su h that a is in onsistent and b is not in onsistent.\nNow de ne the fun tion\n0\nas follows:\n0\n(x; y) =\n(x; y) if x 6= a (b; y) if x = a\nIt is straightforward to he k that\n0\nis submodular and (x; y) =\n0\n(x; y) +\n1 [a;a\u2104 (x; x).\nSin e (\n0\n) ( ), it now su\u00c6 es to show that the result holds for\n0\n.\nBy repeating this pro edure we may assume that has no in onsistent values, and\nby symmetry, that the reversed fun tion\nT\n, de ned by\nT\n(x; y) = (y; x), also has no\nin onsistent values.\nWe will say that a value a 2 D is penalized if, for all y 2 D, (a; y) > 0. If a is penalized,\nthen we set\na\n= minf (a; y)jy 2 Dg. If\na\n=1, then a is in onsistent, so we may assume\nthat\na\n<1, and de ne a new fun tion\n0\nas follows:\n0\n(x; y) =\n(x; y) if x 6= a (x; y)\na\nif x = a:\nAgain it is straightforward to he k that\n0\nis submodular and (x; y) =\n0\n(x; y)+\na\n[a;a\u2104\n(x; x).\nSin e (\n0\n) ( ), it now su\u00c6 es to show that the result holds for\n0\n.\nBy repeating this pro edure we may assume that neither nor\nT\nhas any in onsistent\nor penalized values.\nNow if, for all a; b 2 D, we have (a;M) = (M; b) = 0, then, by submodularity, for all a; b;2 D, (a; b) = (a; b) + (M;M) (a;M) + (M; b) = 0, so is identi ally 0, and the result holds trivially. Otherwise, by symmetry, we an hoose a to be the largest value in D su h that (a;M) 6= 0. Sin e a is not penalized, we an then hoose r to be the largest value in D su h that (a; r) = 0. By the hoi e of a, we know that r < M , and so we an de ne b = r + 1. This situation is illustrated in Figure 3.\nFor any x; y 2 D su h that x a and y b, we have:\n(x; y) = (x; y) + (a; r) ( (a; r) = 0)\n(x; r) + (a; y) (submodularity)\n= (x; r) + max( (a; y); (a; r)) ( (a; r) = 0)\n(x; r) + (a; b) (Lemma 4.4) (a; b)\nHen e we an now de ne a fun tion\n0\nas follows:\n0\n(x; y) =\n8 <\n:\n(x; y) if x > a _ y < b 0 if x = a ^ y = b\n(x; y) (a; b) otherwise.\nIt is straightforward to he k that (x; y) =\n0\n(x; y) +\n(a;b)\n[b;a\u2104\n(y; x). Sin e (\n0\n) < ( ), it\nonly remains to show that\n0\nis submodular, and then the result follows by indu tion. In\n(b) ( ) (d)(a)\nsent known 0 values of . Solid lines represent values of known not to be 0. (b-d) Representations of the three ases for the hoi e of u; v; x; y. The lled area represents the non-zero values of the generalized interval onstraint subtra ted from to obtain 0 .\nother words, it su\u00c6 es to show that for any u; v; x; y 2 D su h that u < x and v < y, we have:\n0\n(u; v) +\n0\n(x; y)\n0\n(u; y) +\n0\n(x; v) (2)\nRepla ing x with u in the inequality derived above, we have that whenever u a and y b,\n(u; y) (u; r) + (a; b): (3)\nThe proof of inequality (2) may be divided into four ases, depending on the values of (a; b) and the hoi e of u; v; x; y:\n1. (a; b) =1\nIn this ase,\n0\ndi ers from only on the pair ha; bi (be ause1 1 =1). Sin e is\nsubmodular, inequality (2) an only fail to hold if either hx; vi or hu; yi equals ha; bi.\nIf hx; vi = ha; bi, then, using inequality (3), we know that (u; y) = 1, so\n0\n(u; y) =\n1 1 =1, and inequality (2) holds.\nIf hu; yi = ha; bi then we have, for all x > u and y > v,\n0\n(u; v) +\n0\n(x; y) = (u; v) + (x; y)\n(u; v) + max( (x; r); (x;M)) (by Lemma 4.4)\n= (u; v) + (x; r) (x > a) (x;M) = 0)\n(u; r) + (x; v) (by submodularity)\n= (x; v) (sin e (u; r) = 0) = 0 (x; v)\n0\n(u; y) +\n0\n(x; v)\nso inequality (2) holds.\n2. a < u < x or v < y < b; (see Figure 3 part (b))\nIn this situation we know that inequality (2) holds be ause and\n0\nare identi al for\nthese arguments.\n3. u < x a or b v < y; (see Figure 3 part ( ))\nIf u < x a, then we have:\n0\n(u; v) = (u; v)\n0\n(x; v) = (x; v)\n0\n(u; y) = (u; y)\n0\n0\n(x; y) = (x; y)\n0\nwhere and\n0\nare either 0 or (a; b), depending on whether v or y are less than b.\nInequality (2) follows trivially by an elling or\n0\nor both.\nAn exa tly similar argument holds if b v < y.\n4. u a < x and v < b y; (see Figure 3 part (d))\nIf u < a, than by inequality (3) we have (u; y) (a; b) (u; r), so\n0\n(u; y) (u; r).\nMoreover, if u = a, then (u; r) = 0, so again\n0\n(u; y) (u; r). Hen e,\n0\n(u; v) +\n0\n(x; y) = (u; v) + (x; y)\n(u; v) + max( (x; r); (x;M)) (by Lemma 4.4)\n= (u; v) + (x; r) (x > a) (x;M) = 0)\n(u; r) + (x; v) (by submodularity) 0\n(u; y) + (x; v) (sin e\n0\n(u; y) (u; r))\n0\n(u; y) +\n0\n(x; v)\nso again inequality (2) holds.\nHen e, in all ases inequality (2) holds, so\n0\nis submodular, and the result follows by\nindu tion.\nThe number of generalized interval fun tions in the de omposition of a binary submodular fun tion an grow quadrati ally with jDj (see Example 4.6 below) and the ost of subtra ting one binary submodular fun tion from another is also quadrati in jDj. Hen e a naive algorithm to obtain su h a de omposition by al ulating the required generalized interval fun tions and subtra ting o ea h one in turn from the original fun tion will take O(jDj 4 ) time. However, by taking advantage of the simple stru ture of generalized interval fun tions, it is possible to obtain a suitable de omposition in O(jDj 3 ) time; a possible algorithm is given in Figure 4. The orre tness of this algorithm follows dire tly from the proof of the de omposition result given above.\nExample 4.6 Consider the binary fun tion\nM\non D = f1; 2; : : : ;Mg, de ned in Exam-\nple 4.3. When M = 3, the values of\n3\nare given by the following table:\n3\n1 2 3 1 8 7 6 2 7 5 3 3 6 3 0\nInput: A binary submodular fun tion on the set f1,2,. . . ,Mg"}, {"heading": "Algorithm:", "text": "Note that:\n0\n8 7 6 7 5 3 6 3 0\n1\nA\n=\n0\n6 6 6 0 0 0 0 0 0\n1\nA\n+\n0\n0 0 0 3 3 3 0 0 0\n1\nA\n+\n0\n2 0 0 2 0 0 2 0 0\n1\nA\n+\n0\n0 1 0 0 1 0 0 1 0\n1\nA\n+\n0\n0 0 0 1 1 0 1 1 0\n1\nA\n+\n0\n0 0 0 0 0 0 1 1 0\n1\nA\n+\n0\n0 0 0 1 0 0 1 0 0\n1\nA\n+\n0\n0 0 0 0 0 0 1 0 0\n1\nA\n:\nHen e,\n3\n(x; y) =\n6 [1;1\u2104 (x; x) + 3 [2;2\u2104 (x; x) + 2 [1;1\u2104 (y; y) + 1 [2;2\u2104 (y; y) + 1\n[2;2\u2104\n(x; y) +\n1 [3;2\u2104 (x; y) + 1 [2;1\u2104 (x; y) + 1 [3;1\u2104 (x; y):\nIn general, for arbitrary values of M , we have\nM\n(x; y) =\nM 1\nX\nd=1\nM(M d) [d;d\u2104 (x; x) + M d [d;d\u2104 (y; y) +\nM 1\nX\ne=1\n1 [d+1;e\u2104 (x; y)\n!\nWe remark that this de omposition is not unique - other de ompositions exist, in luding the symmetri de omposition\nM\n(x; y) =\n0 M (x; y) + 0 M (y; x), where\n0 M (x; y) =\nM 1\nX\nd=1\n(M\n2\nd\n2\n)\n2\n[d;d\u2104\n(x; x) +\n1 2 [d+1;d\u2104 (x; y) +\nd 1 X\ne=1\n1 [d+1;e\u2104 (x; y)\n!\nCombining Lemma 4.5 with Corollary 3.6, gives:\nTheorem 4.7 For any nite soft onstraint language on a nite totally ordered set D, if\nontains only unary or binary submodular fun tions, then the time omplexity of sCSP( )\nis O(n\n3\njDj\n3\n).\nThe next result shows that the tra table lass identi ed in Theorem 4.7 is maximal.\nTheorem 4.8 Let be the set of all binary submodular fun tions on a totally ordered nite set D, with jDj 2. For any binary fun tion 62 , sCSP( [ f g) is NP-hard.\nProof: We shall give a redu tion from sCSP(f\nXOR\ng) to sCSP( [ f g), where\nXOR\nis the binary fun tion de ned in Example 2.6. It was pointed out in Example 2.6 that sCSP(f\nXOR\ng) orresponds to the Max-Sat problem for the ex lusive-or predi ate, whi h\nis known to be NP-hard (Creignou et al., 2001). Hen e sCSP( [ f g) is also NP-hard.\nTo simplify the notation, we shall assume that D = f1; 2; : : : ;Mg, with the usual order-\ning.\nSin e is not submodular, there exist a; b; ; d 2 D su h that a < b and < d but\n(a; ) + (b; d) > (a; d) + (b; ).\nChoose an arbitrary evaluation su h that 0 < <1, and de ne and as follows:\n= min( (a; ); (a; d) + (b; ) + )\n= min( (b; d); (a; d) + (b; ) + )\nIt is straightforward to he k that\n(a; d) + (b; ) < + <1: (4)\nNow de ne a binary fun tion as follows:\n(x; y) =\n8 <\n:\nif (x; y) = (1; a) if (x; y) = (2; b)\n1 otherwise\nand a binary fun tion as follows:\n(x; y) =\n8 > > > > <\n> > > :\n0 if (x; y) = ( ; 1)\n(a; d) + 1 if (x; y) = ( ; 2) (b; ) + 1 if (x; y) = (d; 1) 0 if (x; y) = (d; 2) 1 otherwise\n(w; v)\n(t; u)\nIt is straightforward to he k that both and are submodular.\nNow onsider the instan e P\n0\nof sCSP( [ f g) illustrated in Figure 5. It is simple but\ntedious to verify that the ombined e e t of the six soft onstraints shown in Figure 5 on the variables x and y is equivalent to imposing a soft onstraint on these variables with evaluation fun tion , de ned as follows:\n(x; y) =\n8 <\n:\n+ + + if x; y 2 f1; 2g and x = y + + (a; d) + (b; ) if x; y 2 f1; 2g and x 6= y\n1 otherwise\nNote that, by inequality (4), we have + + (a; d) + (b; ) < + + + <1.\nNow let P be any instan e of sCSP(f\nXOR\ng). If we repla e ea h onstraint hhx; yi;\nXOR\ni\nin P with the set of onstraints shown in Figure 5 (introdu ing fresh variables t; u; v; w ea h time) then we obtain an instan e P 0 of sCSP( [ f g). It is straightforward to he k that P 0 has a solution involving only the values 1 and 2, and that su h solutions orrespond exa tly to the solutions of P, so this onstru tion gives a polynomial-time redu tion from sCSP(f\nXOR\ng) to sCSP( [ f g), as required."}, {"heading": "5. Appli ations", "text": "In this se tion we give a number of examples to illustrate the wide range of soft onstraints whi h an be shown to be tra table using the results obtained in the previous se tions.\nFirst we de ne a standard way to asso iate a fun tion with a given relation.\nDe nition 5.1 For any k-ary relation R on a set D, we de ne an asso iated fun tion,\nR\n: D\nk\n! E, as follows:\nR\n(x\n1\n; x\n2\n; : : : ; x\nk\n) =\n0 if hx\n1\n; x\n2\n; : : : ; x\nk\ni 2 R\n1 otherwise.\nBy Theorem 4.7, any olle tion of risp onstraints, where ea h onstraint is spe i ed by a relation R for whi h\nR\nis unary or binary submodular, an be solved in ubi time, even\nwhen ombined with other soft onstraints that are also unary or binary submodular.\nExample 5.2 The onstraint programming language CHIP in orporates a number of onstraint solving te hniques for arithmeti and other onstraints. In parti ular, it provides a onstraint solver for a restri ted lass of risp onstraints over natural numbers, referred to as basi onstraints (van Hentenry k et al., 1992). These basi onstraints are of two kinds, whi h are referred to as \\domain onstraints\" and \\arithmeti onstraints\". The domain onstraints des ribed by van Hentenry k et al. (1992) are unary onstraints whi h restri t the value of a variable to some spe i ed nite subset of the natural numbers. The arithmeti onstraints des ribed by van Hentenry k et al. (1992) have one of the following forms:\naX 6= b aX bY + aX = bY + aX bY +\nwhere variables are represented by upper- ase letters, and onstants by lower ase letters, all onstants are non-negative real numbers and a is non-zero.\nFor ea h of these risp onstraints the asso iated fun tion given by De nition 5.1 is unary or binary submodular, hen e, by Corollary 3.6, any problem involving onstraints of this form an be solved in ubi time. Moreover, any other soft onstraints with unary or binary submodular evaluation fun tions an be added to su h problems without sa ri ing tra tability (in luding the examples below).\nNow assume, for simpli ity, that D = f1; 2; : : : ;Mg.\nExample 5.3 Consider the binary linear fun tion de ned by (x; y) = ax+by+ , where a; b 2 R + .\nThis fun tion is submodular and hen e, by Corollary 3.6, any olle tion of su h binary\nlinear soft onstraints over the dis rete set D an be solved in ubi time.\nExample 5.4 The Eu lidean length fun tion\np\nx\n2\n+ y\n2\nis submodular, and an be used to\nexpress the onstraint that a 2-dimensional point hx; yi is \\as lose to the origin as possible\".\nExample 5.5 The following fun tions are all submodular:\n\u00c6\nr\n(x; y) = jx yj\nr\n, where r 2 R, r 1.\nThe fun tion \u00c6\nr\nan be used to express the onstraint that: \\The values assigned to\nthe variables x and y should be as similar as possible\".\n\u00c6\n+ r (x; y) = (max(x y; 0)) r , where r 2 R, r 1.\nThe fun tion \u00c6\n+ r an be used to express the onstraint that: \\The value of x is either\nless than or as near as possible to y\".\n\u00c6\nr\n(x; y) =\njx yj\nr\nif x y\n1 otherwise\nwhere r 2 R, r 1.\nThe fun tion \u00c6\nr\nan be used to express the temporal onstraint that: \\x o urs as\nsoon as possible after y\".\nExample 5.6 Re onsider the optimization problem de ned in Example 1.1. Sin e\ni\nis\nunary, and \u00c6\nr\nis binary submodular (Example 5.5), this problem an be solved in ubi\ntime, using the methods developed in this paper.\nLet P be the instan e with n = 3 and r = 2. The values of \u00c6\n2\nare given by the following\ntable:\n\u00c6\n2\n1 2 3 1 0 1 4 2 1 0 1 3 4 1 0\nHen e,\n\u00c6\n2\n(x; y) =\n1 [3;2\u2104 (y; x) + 1 [2;1\u2104 (y; x) + 2 [3;1\u2104 (y; x) + 1\n[3;2\u2104\n(x; y) +\n1 [2;1\u2104 (x; y) + 2 [3;1\u2104 (x; y)\nUsing this de omposition for \u00c6\n2\n, we an onstru t the graph G\nP\norresponding to the\ninstan e P , as shown in Figure 6.\nThe minimum weight of any ut in this graph is\n11\n4\n, and hen e the optimal evaluation\nof any assignment for P is\n11\n4\n.\nOne of the several possible uts with this weight is indi ated by the gray line a ross the\ngraph, whi h orresponds to the solution v\n1\n= 1, v\n2\n= 1, v\n3\n= 2, v\n4\n= 2, v\n5\n= 3, v\n6\n= 3.\nNote that some of the submodular fun tions de ned in this se tion may appear to be similar to the soft simple temporal onstraints with semi- onvex ost fun tions de ned and shown to be tra table by Khatib et al. (2001). However, there are fundamental di eren es: the onstraints des ribed by Khatib et al. (2001) are de ned over an in nite set of values, and their tra tability depends ru ially on the aggregation operation used for the osts being idempotent (i.e., the operation min). In this paper we are onsidering soft onstraints over nite sets of values, and an aggregation operation whi h is stri tly monotoni (e.g., addition of real numbers), so our results annot be dire tly ompared with those in the paper by Khatib et al. (2001)."}, {"heading": "6. Con lusion", "text": "As we have shown with a number of examples, the problem of identifying an optimal assignment for an arbitrary olle tion of soft onstraints is generally NP-hard. However, by making use of the notion of submodularity, we have identi ed a large and expressive lass of soft onstraints for whi h this problem is tra table. In parti ular, we have shown that binary soft onstraints with the property of submodularity an be solved in ubi time. By making use of this result, it should be possible to extend the range of optimisation problems that an be e e tively solved using onstraint programming.\nP\nasso iated with the instan e P de ned in Example 5.6.\nFrom a theoreti al perspe tive, this paper gives the rst omplete hara terisation of a tra table lass of soft onstraints over a nite set of values with more than two elements. We are on dent that the methods developed here an be extended to identify other tra table\nases, and hen e to begin a systemati investigation of the omputational omplexity of soft onstraint satisfa tion. A rst step in this dire tion has been taken by Cohen et al. (2003).\nWe believe that this work illustrates on e again the bene t of intera tion between resear h on onstraint satisfa tion and more traditional resear h on dis rete optimization and mathemati al programming: the notion of submodularity omes from mathemati al programming, but the idea of modelling problems with binary onstraints over arbitrary\nnite domains omes from onstraint programming. By ombining these ideas, we obtain a exible and powerful modelling language with a provably e\u00c6 ient solution strategy."}, {"heading": "7. A knowledgments", "text": "An earlier version of this paper, omitting many of the proofs, was presented at the International Joint Conferen e on Arti ial Intelligen e in 2003. This resear h was partially supported by the UK EPSRC grant GR/R81213/01."}, {"heading": "Referen es", "text": "Allen, J. (1995). Natural Language Understanding | 2nd Edition. The Ben-\njamin/Cummings Publishing Company.\nBistarelli, S., Montanari, U., Rossi, F., S hiex, T., Verfaillie, G., & Fargier, H.(1999).\nSemiring-based CSPs and valued CSPs: Frameworks, properties, and omparison. Constraints, 4, 199{240.\nBulatov, A.(2003). Tra table onservative onstraint satisfa tion problems. In Pro eedings\nof the 18th Annual IEEE Symposium on Logi in Computer S ien e (LICS'03), pp. 321{330.\nBistarelli, S., Montanari, U., & Rossi, F. (1997). Semiring-based onstraint satisfa tion and\noptimisation. Journal of the ACM, 44, 201{236.\nBurkard, R., Klinz, B., & Rudolf, R. (1996). Perspe tives of Monge properties in optimiza-\ntion. Dis rete Applied Mathemati s, 70, 95{161.\nCohen, D., Cooper, M., Jeavons, P., & Krokhin, A. (2003). Soft onstraints: Complexity and\nmultimorphisms. In Pro eedings of 9th International Conferen e on Prin iples and Pra ti e of Constraint Programming (CP'03), Vol. 2833 of Le ture Notes in Computer S ien e, pp. 244{258. Springer-Verlag.\nCooper, M. (2003). Redu tion operations in fuzzy or valued onstraint satisfa tion. Fuzzy\nSets and Systems, 134, 311{342.\nCreignou, N., Khanna, S., & Sudan, M. (2001). Complexity Classi ations of Boolean Con-\nstraint Satisfa tion Problems, Vol. 7 of SIAM Monographs on Dis rete Mathemati s and Appli ations.\nDahlhaus, E., Johnson, D., Papadimitriou, C., Seymour, P., & Yannakakis, M. (1994). The\nomplexity of multiterminal uts. SIAM Journal on Computing, 23 (4), 864{894.\nDeville, Y., Barette, O., & van Hentenry k, P. (1999). Constraint satisfa tion over onne ted\nrow onvex onstraints. Arti ial Intelligen e, 109 , 243{271.\nFeder, T., & Vardi, M. (1998). The omputational stru ture of monotone monadi SNP and\nonstraint satisfa tion: A study through Datalog and group theory. SIAM Journal of\nComputing, 28, 57{104.\nFreuder, E., & Walla e, R. (1992). Partial onstraint satisfa tion. Arti ial Intelligen e,\n58, 21{70.\nFujishige, S. (1991). Submodular Fun tions and Optimization, Vol. 47 of Annals of Dis rete\nMathemati s. North-Holland, Amsterdam.\nGoldberg, A., & Tarjan, R. (1988). A new approa h to the maximum ow problem. Journal\nof the ACM, 35, 921{940.\nIwata, S., Fleis her, L., & Fujishige, S. (2001). A ombinatorial strongly polynomial algo-\nrithm for minimizing submodular fun tions. Journal of the ACM, 48, 761{777.\nJeavons, P., Cohen, D., & Gyssens, M. (1997). Closure properties of onstraints. Journal\nof the ACM, 44, 527{548.\nKautz, H., & Selman, B. (1992). Planning as satis ability. In Pro eedings of the Tenth\nEuropean Conferen e on Arti ial Intelligen e (ECAI'92), pp. 359{363.\nKhanna, S., Sudan, M., Trevisan, L., & Williamson, D. (2000). The approximability of\nonstraint satisfa tion problems. SIAM Journal on Computing, 30 (6), 1863{1920.\nKhatib, L., Morris, P., Morris, R., & Rossi, F. (2001). Temporal onstraint reasoning with\npreferen es. In Pro eedings of the 17th International Joint Conferen e on Arti ial Intelligen e (IJCAI-01), pp. 322{327, Seattle, USA.\nLarrosa, J., Meseguer, P., & S hiex, T. (1999). Maintaining Reversible DAC for Max-CSP.\nArti ial Intelligen e, 107(1), 149{163.\nLov asz, L. (1983). Submodular fun tions and onvexity. In Ba hem, A., Gr ots hel, M.,\n& Korte, B. (Eds.), Mathemati al Programming { The State of the Art, pp. 235{257, Berlin. Springer-Verlag.\nMontanari, U. (1974). Networks of onstraints: Fundamental properties and appli ations to\npi ture pro essing. Information S ien es, 7, 95{132.\nNemhauser, G., & Wolsey, L. (1988). Integer and Combinatorial Optimization. John Wiley\n& Sons.\nRosenfeld, A., Hummel, R., & Zu ker, S. (1976). S ene labeling by relaxation operations.\nIEEE Transa tions on Systems, Man and Cyberneti s, 6, 420{433.\nRudolf, R., & Woeginger, G. (1995). The one of Monge matri es: extremal rays and\nappli ations. ZOR { Mathemati al Methods of Operations Resear h, 42, 161{168.\nRuttkay, Z. (1994). Fuzzy onstraint satisfa tion. In Pro eedings 3rd IEEE International\nConferen e on Fuzzy Systems, pp. 1263{1268.\nS haefer, T. (1978). The omplexity of satis ability problems. In Pro eedings 10th ACM\nSymposium on Theory of Computing, STOC'78, pp. 216{226.\nS hrijver, A. (2000). A ombinatorial algorithm minimizing submodular fun tions in\nstrongly polynomial time. Journal of Combinatorial Theory, Series B, 80, 346{355.\nTopkis, D. (1978). Minimizing a submodular fun tion on a latti e. Operations Resear h,\n26, 305{321.\nTopkis, D. (1998). Supermodularity and Complementarity. Prin eton University Press.\nvan Beek, P. (1992). Reasoning about qualitative temporal information. Arti ial Intelli-\ngen e, 58, 297{326.\nvan Hentenry k, P., Deville, Y., & Teng, C.-M. (1992). A generi ar - onsisten y algorithm\nand its spe ializations. Arti ial Intelligen e, 57, 291{321."}], "references": [], "referenceMentions": [], "year": 2013, "abstractText": "Many resear hers in arti ial intelligen e are beginning to explore the use of soft onstraints to express a set of (possibly on i ting) problem requirements. A soft onstraint is a fun tion de ned on a olle tion of variables whi h asso iates some measure of desirability with ea h possible ombination of values for those variables. However, the ru ial question of the omputational omplexity of nding the optimal solution to a olle tion of soft onstraints has so far re eived very little attention. In this paper we identify a lass of soft binary onstraints for whi h the problem of nding the optimal solution is tra table. In other words, we show that for any given set of su h onstraints, there exists a polynomial time algorithm to determine the assignment having the best overall ombined measure of desirability. This tra table lass in ludes many ommonly-o urring soft onstraints, su h as \\as near as possible\" or \\as soon as possible after\", as well as risp onstraints su h as \\greater than\". Finally, we show that this tra table lass is maximal, in the sense that adding any other form of soft binary onstraint whi h is not in the lass gives rise to a lass of problems whi h is NP-hard.", "creator": "dvips(k) 5.86 Copyright 1999 Radical Eye Software"}}}