{"id": "1301.1386", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Jan-2013", "title": "SPARC - Sorted ASP with Consistency Restoring Rules", "abstract": "This is a preliminary report on the work aimed at making CR-Prolog -- a version of ASP with consistency restoring rules -- more suitable for use in teaching and large applications. First we describe a sorted version of CR-Prolog called SPARC. Second, we translate a basic version of the CR-Prolog into the language of DLV and compare the performance with the state of the art CR-Prolog solver. The results form the foundation for future more efficient and user friendly implementation of SPARC and shed some light on the relationship between two useful knowledge representation constructs: consistency restoring rules and weak constraints of DLV.", "histories": [["v1", "Tue, 8 Jan 2013 02:29:00 GMT  (31kb,D)", "http://arxiv.org/abs/1301.1386v1", "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2012), 5th International Workshop, September 4, 2012, Budapest, Hungary"]], "COMMENTS": "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2012), 5th International Workshop, September 4, 2012, Budapest, Hungary", "reviews": [], "SUBJECTS": "cs.PL cs.AI", "authors": ["evgenii balai", "michael gelfond", "yuanlin zhang"], "accepted": false, "id": "1301.1386"}, "pdf": {"name": "1301.1386.pdf", "metadata": {"source": "CRF", "title": "SPARC \u2013 Sorted ASP with Consistency Restoring Rules", "authors": ["Evgenii Balai", "Michael Gelfond", "Yuanlin Zhang"], "emails": ["iensen2@mail.ru,", "michael.gelfond@ttu.edu,", "y.zhang@ttu.edu"], "sections": [{"heading": "1 Introduction", "text": "The paper continues work on design and implementation of knowledge representation languages based on Answer Set Prolog (ASP) [1]. In particular we concentrate on the extension of ASP called CR-Prolog \u2013 Answer Set Prolog with consistency restoring rules (CR-rules for short) [2]. The language, which allows a comparatively simple encoding of indirect exceptions to defaults, has been successfully used for a number of applications including planning [3], probabilistic reasoning [4], and reasoning about intentions [5]. This paper is a preliminary report on our attempts to make CR-Prolog (and hence other dialects of ASP) more user friendly and more suitable for use in teaching and large applications. This work goes in two different, but connected, directions. First we expand the syntax of CR-Prolog by introducing sorts. Second, we translate a basic version of the CR-Prolog into the language of DLV with weak constraints [6] and compare the efficiency of the resulting DLV based CR-Prolog solver with the CR-Prolog solver implemented in [7]. The original hope for the second part of the work was to obtain a substantially more efficient inference engine for CR-Prolog. This was a reasonable expectation \u2013 the older engine is built on top of existing ASP solvers and hence does not fully exploit their inner structure. However this didn\u2019t quite work out. Each engine has its strong and weak points and the matter requires further investigation. But we believe that even preliminary results are of interest since they shed some light on the relationship between two useful knowledge representation constructs: CR-rules and weak constraints. The first goal requires a lengthier explanation. Usually, a program of an Answer Set Prolog based language is understood as a pair, consisting of a signature and a collection of logic programming rules formed from symbols of this signature. ar X iv :1 30 1. 13 86\nv1 [\ncs .P\nL ]\n8 J\nan 2\n01 3\nThe syntax of the language does not provide any means for specifying this signature \u2013 the usual agreement is that the signature consists of symbols explicitly mentioned in the programming rules. Even though in many cases this provides a reasonable solution there are also certain well-known (e.g., [8,9]) drawbacks:\n1. Programs of the language naturally allow unsafe rules which \u2013 May lead to change of the program behavior under seemingly unrelated up-\ndates. A program {p(1). q \u2190 not p(X). \u00acq \u2190 not q.} entails \u00acq, but this conclusion should be withdrawn after adding seemingly unrelated fact r(2). (This happens because of the introduction of a new constant 2 which leads to a new ground instance of the second rule: q \u2190 not p(2).) \u2013 Cause difficulties for the implementation of ASP solvers. That is why most implementations do not allow unsafe rules. The corresponding error messages however are not always easy to decipher and the elimination of errors is not always an easy task. 2. The language is untyped and therefore does not provide any protection from unfortunate typos. Misspelling john in the fact parent(jone,mary) will not be detected by a solver and may cost a programmer unnecessary time during the program testing.\nThere were several attempts to address these problems for ASP and some of its variants. The #domain statements of input language of lparse [9] \u2014 a popular grounder used for a number of ASP systems \u2014 defines sorts for variables. Even though this device is convenient for simple programs and allows to avoid repetition of atoms defining sorts of variables in the bodies of program\u2019s rules it causes substantial difficulties for medium size and large programs. It is especially difficult to put together pieces of programs written at different time or by different people. The same variable may be declared as ranging over different sorts by different #domain statements used in different programs. So the process of merging these programs requires renaming of variables. This concern was addressed by Marcello Balduccini [10] whose system, RSig, provided an ASP programmer with means for specifying sorts of parameters of the language predicates3. RSig is a simple extension of ASP which does not require any shift in perspective and involves only minor changes in existing programs. Our new language, SPARC, can be viewed as a simple modification of RSig. In particular we propose to separate definition of sorts from the rest of the program and use this separation to improve the type checking and grounding procedure.\n2 The Syntax and Semantics of SPARC\nIn this section we define a simple variant of SPARC which contains only one predefined sort nat of natural numbers. Richer variants may contain other predefined sorts with precise syntax which would be described in their manuals. The discussion will be sufficiently detailed to serve as the basis for the implementation of SPARC reasoning system.\n3 In addition, RSig provides simple means for structuring a program into modules which we will not consider here.\nLet L be a language defined by the following grammar rules:\n<identifier> :- <small_letter> | <identifier><letter> | <identifier><digit>\n<variable> :- <capital_letter> | <variable><letter> | <variable><digit>\n<non_zero_digit> :- 1|...|9 <digit> :- 0 | <non_zero_digit> <positive_integer> :- <non_zero_digit> |\n<positive_integer><digit> <natural_number> :- 0 | <positive_integer> <op> :- + | - | * | mod <arithmetic_term> :- <variable> | <natural_number> |\n<arithmetic_term> <op> <arithmetic_term> | (<arithmetic_term>)\n<symbolic_function> :- <identifier> <symbolic_constant> :- <identifier> <symbolic_term> :- <variable> | <symbolic_constant> |\n<symbolic_function>(<term>,...,<term>) <term> :- <symbolic_term> | <arithmetic_term> <arithmetic_rel> :- = | != | > | >= | < | <= <pred_symbol> :- <identifier> <atom> :- <pred_symbol>(<term>,...,<term>) |\n<arithmetic_term> <arithmetic_rel> <arithmetic_term> | <symbolic_term> = <symbolic_term> | <symbolic_term> != <symbolic_term>\nNote that relations = and != are defined on pairs of arithmetic and pairs of non-arithmetic terms. The first is a predefined arithmetic equality, i.e. 2 + 3=5, 2 + 1!=1, etc. The second is an identity relation4. By a ground term we mean a term containing no variables and no symbols for arithmetic functions [11].\nFrom now on we assume a language Lwith a fixed collection of symbolic constants and predicate symbols. A SPARC program parametrized by L consists of three consecutive parts:\n<program> :- <sorts definition> <predicates declaration> <program rules>\nThe first part of the program starts with the keywords:\nsorts definition\nand is followed by the sorts definition: 4 In the implementation non-arithmetic identity should be restricted to comply with the syntax\nof lparse and other similar grounders.\nDefinition 1. By sort definition in L we mean a collection \u03a0s of rules of the form\na0 \u2190 a1, ..., am, not am+1, ..., not an.\nsuch that\n\u2013 ai are atoms of L and a0 contains no arithmetic relations; \u2013 \u03a0s has a unique answer set S5. \u2013 For every symbolic ground term t of L there is a unary predicate s such that s(t) \u2208 S. \u2013 Every variable occurring in the negative part of the body, i.e. in at least one of the atoms am+1, . . . , an, occurs in atom ai for some 0 < i \u2264 m.\nPredicate s such that s(t) \u2208 S is called a defined sort of t. The language can also contain predefined sorts, in our case nat. Both, defined and predefined sorts will be referred to simply as sorts. (Note that a term t may have more than one sort.)\nThe last condition of the definition is used to avoid unexpected reaction of the program to introduction of new constants (see example in the introduction). The condition was introduced in [8] where the authors proved that every program \u03a0 satisfying this condition has the following property, called language independence: for every sorted signatures \u03a31 and \u03a32 groundings of \u03a0 with respect to \u03a31 and \u03a32 have the same answer sets. This of course assumes that every rule of \u03a0 can be viewed as a rule in \u03a31 and \u03a32. The second part of a SPARC program starts with a keyword\npredicates declaration\nand is followed by statements of the form\npred symbol(sort, . . . , sort)\nWe only allow one declaration per line. Predicate symbols occurring in the declaration must differ from those occurring in sorts definition. Finally, multiple declarations for one predicate symbol with the same arity are not allowed.\nThe third part of a SPARC program starts with a keyword\nprogram rules\nand is followed by a collection\u03a0r of regular and consistency restoring rules of SPARC defined as follows:\nregular rule: l0 \u2228 . . . \u2228 lm \u2190 lm+1, . . . , lk, not lk+1 . . . not ln (1)\n5 As usual by S we mean answer set of a ground program obtained from\u03a0 by replacing its variables with ground terms of L. We assume that the program has non-empty Herbrand universe\nCR-rule: l0 +\u2190 l1, . . . , lk, not lk+1 . . . not ln (2)\nwhere l\u2019s are literals6 of L. Literals occurring in the heads of the rules must not be formed by predicate symbols occurring in \u03a0s. In this paper,\u2190 and :- are used interchangeably, so are +\u2190 and :+.\nAs expected, program \u03a0r is viewed as a shorthand for the set of all its ground instances which respect the sorts defined by \u03a0s. Here is the precise definition of this notion.\nDefinition 2. Let gr(r) be a ground instance of a rule r of \u03a0r, i.e. a rule obtained from r by replacing its variables by ground terms of L. We\u2019ll say that gr(r) respects sorts of \u03a0s if every occurrence of an atom p(t1, . . . , tn) of gr(r) satisfies the following condition: if p(s1, . . . , sn) is the predicate declaration of p then t1, . . . , tn are terms of sorts s1, . . . , sn respectively. By gr(\u03a0r) we mean the collection of all ground instances of rules of \u03a0r which respect sorts of \u03a0s.\nNote that according to our definition gr(r) may be empty. This happens, for instance, for a rule which contains atoms p1(X) and p2(X) where p1 and p2 require parameters from disjoint sorts.\nLet us now define answer sets of a ground SPARC program \u03a0 . We assume that the readers are familiar with the definition of answer sets for standard ASP programs. Readers unfamiliar with the intuition behind the notion of consistency restoring rules of CRProlog are referred to the Appendix.\nFirst we will need some notation. The set of regular rules of a SPARC program \u03a0 will be denoted by R; the set of cr-rules of \u03a0 will be denoted by CR. By \u03b1(r) we denote a regular rule obtained from a consistency restoring rule r by replacing +\u2190 by\u2190; \u03b1 is expanded in a standard way to a set X of cr-rules, i.e. \u03b1(X) = {\u03b1(r) : r \u2208 X}.\nDefinition 3. (Abductive Support) A collection X of cr-rules of \u03a0 such that\n1. R \u222a \u03b1(X) is consistent (i.e. has an answer set) and 2. anyR0 satisfying the above condition has cardinality which is greater than or equal\nto that of R\nis called an abductive support of \u03a0 .\nDefinition 4. (Answer Sets of SPARC Programs) A setA is called an answer set of\u03a0 if it is an answer set of a regular programR\u222a\u03b1(X) for some abductive support X of \u03a0 .\n6 By a literal we mean an atom a or its negation \u00aca. Note in this paper, we use \u00ac and - interchangeably.\nTo complete the definition of syntax and semantics of a SPARC program we need to note that though such program is defined with respect to some language L in practice this language is extracted from the program. We always assume that terms of L defined by a SPARC program P are arithmetic terms and terms defined by the sorts definition7; predicate symbols are those occurring in sorts definition and predicate declaration. Now we are ready to give an example of a SPARC program.\nExample 1. [SPARC programs] Consider a SPARC program P1:\nsorts definition s1(1). s1(2). s2(X+1) :-\ns1(X). s3(f(X,Y)) :-\ns1(X), s1(Y), X != Y.\npredicates declaration p(s1) q(s1,s3) r(s1,s3) program rules p(X). r(1,f(1,2)). q(X,Y) :-\np(X), r(X,Y).\nThe sort declaration of the program defines ground terms 1, 2, 3, f(1, 2), f(2, 1) with the following defined sorts:\ns1 = {1, 2} s2 = {2, 3} s3 = {f(1, 2), f(2, 1)}\nOf course, 1, 2, and 3 are also of the sort nat. The sort respecting grounding of the rules of \u03a0 is\np(1). p(2). r(1,f(1,2)). q(1,f(1,2)) :-\np(1), r(1,f(1,2)).\n7 A term t is defined by \u03a0s if for some sort s, s(t) belongs to the answer set of \u03a0s\nq(2,f(1,2)) :- p(2), r(2,f(1,2)).\nq(1,f(2,1)) :- p(1), r(1,f(2,1)).\nq(2,f(2,1)) :- p(2), r(2,f(2,1)).\nThe answer set of the program is {p(1), p(2), r(1, f(1, 2)), q(1, f(1, 2))}. (We are not showing the sort atoms.)\nConsider now a SPARC program P2:\nsorts definition t(a,b). t(c,1). s1(X) :- t(X,Y). s2(Y) :- t(X,Y). s3(a). predicates declaration p(s1,s2). program rules p(X,Y) :- s3(X),t(X,Y).\nThe sort respecting grounding of the program is\np(a,b) :- s3(a),t(a,b).\nIts answer set is {p(a, b), t(a, b)}.\nAnother example can be obtained by restating the CR-Prolog program from Example 4 in the Appendix by adding sort definitions s1(a) and s2(d(a)) and predicates declarations p(s1), q(s1), c(s1) and ab(s2). One can easily check that, as expected, the answer set of the resulting program is {\u00acq(a), c(a),\u00acp(a))}.\n3 Translation of SPARC Programs to DLV Programs\nDLV [12] is one of the well developed solvers for ASP programs. We select DLV as the target language mainly because of its weak constraints [6] which can be used to represent cr-rules. A weak constraint is of the form\n:\u223c l1, . . . , lk, not lk+1 . . . not ln.\nwhere li\u2019s are literals. (Weak constraints of DLV allow preferences which we ignore here.) Informally, weak constraints can be violated, but as many of them should be\nsatisfied as possible. The answer sets of a program P with a set W of weak constraints are those of P which minimize the number of violated weak constraints.\nWe first introduce some notations before presenting the translation algorithm.\nDefinition 5. (DLV counterparts of SPARC programs) A DLV program P2 is a counterpart of SPARC program P1 if answer sets of P1 and P2 coincide on literals from the language of P1.\nDefinition 6. Given a SPARC program P , we associate a unique number to each of its cr-rules. The name of a cr-rule r of \u03a0 is a term rn(i,X1, ..., Xn) where rn is a new function symbol, i is the unique number associated with r, and X1, ..., Xn is the list of distinct variables occurring in r.\nFor instance, if rule p(X,Y ) \u2190 q(Z,X, Y ) is assigned number 1 then its name is rn(1, X, Y, Z). In what follows we describe a translation of SPARC programs into their DLV counterparts.\nAlgorithm 1 (SPARC program translation) Input: a SPARC program P1. Output: a DLV counterpart P2 of P1.\n1. Set variable P2 to \u2205, and let appl/1 be a new predicate not occurring in P1. 2. Add all rules of the sorts definition part of P1 to P2. 3. For any program rule r of P1,\n3.1. Let\ns = {s1(t1), ..., sn(tn) | p(t1, ..., tn) occurs in r and p(s1, ..., sn) \u2208 P1},\nand let rule r\u2032 be the result of adding all elements of s to the body of r. 3.2. If r\u2032 is a regular rule, add it to P2. 3.3. If r\u2032 is a cr-rule of the form\nq +\u2190 body.\nadd to P2 the rules appl(rn(i,X1, ..., Xn))\u2228 \u00acappl(rn(i,X1, ..., Xn)) :- body. :\u223c appl(rn(i,X1, ..., Xn)), body. q :- appl(rn(i,X1, ..., Xn)), body. where rn(i,X1, ..., Xn) is the name of r.\nThe intuitive idea behind the rules added to P2 in 3.3. is as follows: appl(rn(i,X1, ..., Xn)) holds if the cr-rule r is used to obtain an answer set of the SPARC program; the first rule says that r is either used or not used; the second rule, a weak constraint, guarantees that r is not used if possible, and the last rule allows the use of r when necessary.\nThe correctness of the algorithm is guaranteed by the following theorem whose complete proof can be found at http://www.cs.ttu.edu/research/krlab/pdfs/papers/sparc-proof.pdf.\nTheorem 1. A DLV program P2 obtained from a SPARC program P1 by Algorithm 1 is a DLV counterpart of P1.\nThe translation can be used to compute an answer set of SPARC program P .\nAlgorithm 2 (Computing an answer set of a SPARC program) Input: a SPARC program P . Output: an answer set of P .\n1 Translate P into its DLV counterpart P \u2032. 2 Use DLV to find an answer set S of P \u2032. 3 Drop all literals with predicate symbol appl from S and return the new set.\nExample 2. To illustrate the translation and the algorithm, consider the following program.\nsorts definition s(a). predicates declaration p(s) q(s) program rules p(X) :- not q(X). -p(X). q(X) :+ .\nAfter step 2 of Algorithm 1 , P \u2032 becomes:\ns(a).\nAfter the execution of the loop 3 of this algorithm for the first and second program rule, P \u2032 becomes\ns(a). p(X) :- not q(X),s(X). \u00acp(X):- s(X). Assuming the only cr-rule is numbered by 1, after the algorithm is applied to the third rule, P \u2032 becomes\ns(a). p(X) :- not q(X),s(X). \u00acp(X):- s(X). appl(rn(1, X)) \u2228 \u00acappl(rn(1, X)) :- s(X). :\u223c appl(rn(1, X)), s(X). q(X) :- appl(rn(1, X)), s(X).\nGiven the program P \u2032, DLV solver returns an answer set\n{s(a), appl(rn(1, a)), q(a),\u00acp(a)}\nAfter dropping appl(rn(1, a)) from this answer set, we obtain an answer set\n{s(a), q(a),\u00acp(a)}\nfor the original program."}, {"heading": "4 Experimental Results", "text": "We have implemented a SPARC program solver, called crTranslator (available from the link in [13]), based on the proposed translation approach. CRModels2 [7] is the state of the art solver for CR-prolog programs. To compare the performance of the DLV based solver to CRModels2, we use the classical benchmark of the reaction control system for the space shuttle [3] and new benchmarks such as representing and reasoning with intentions [5], and the shortest path problem.\nClock time, in seconds, is used to measure the performance of the solvers. Since the time complexity of translation is low, the recorded problem solving time does not include the translation time.\nIn this experiment, we use DLV build BEN/Dec 21 2011 and CRModels2 2.0.12 [14] which uses ASP solver Clasp 2.0.5 with grounder Gringo 3.0.4 [15]. The experiments are carried out on a computer with Intel Core 2 Duo CPU E4600 at 2.40 Ghz, 3GB RAM, and Cygwin 1.7.10 on Windows XP."}, {"heading": "4.1 The First Benchmark: Programs for Representing and Reasoning with Intentions", "text": "Recently, CR-Prolog has been employed to represent and reason with intentions [5]. We compare crTranslator with CRModels2 on the following scenarios proposed in [5]: Consider a row of four rooms, r1, r2, r3, r4 connected by doorways, such that an agent may move along the row from one room to the next. We say that two people meet if they are located in the same room. Assume that initially our agent Bob is in r1 and he intends to meet with John who, as Bob knows, is in r3. This type of intention is frequently referred to as an intention to achieve the goal. The first task is to design a simple plan for Bob to achieve this goal: move from r1 to r2 and then to r3. Assuming that as Bob is moving from r1 to r2, John moves from r3 to r2, the second task is to recognize the unexpected achievement of his goal and not continue moving to r3. Programs to implement these two tasks are given as B0 and B1 respectively in [5].\nIn this experiment, crTranslator has a clear advantage over CR-Models2 on task 1 and similar performance on task 2."}, {"heading": "4.2 The Second Benchmark: Reaction Control System of Space Shuttle", "text": "USA-Smart is a CR-prolog program to find plans with improved quality for the operation of the Reaction Control System (RCS) of the Space Shuttle. Plans consist of a sequence of operations to open and close the valves controlling the flow of propellant from the tanks to the jets of the RCS.\nIn our experiment, we used the USA-Smart program with four instances: fmc1 to fmc4 [16]. The SPARC variant of the USA-Smart program is written as close as possible to USA-smart. The results of the performance of crTranslator and CRModels for these programs are listed in Figure 2.\nWe note that these instances have small abductive supports (with sizes of the supports less than 9) and relatively large number of cr-rules (with more than 1200). This can partially explain why CRModels2 is faster because it finds the abductive support by exhaustive enumeration of the candidate supports starting from size 0 to all cr-rules in an increasing manner."}, {"heading": "4.3 The Third Benchmark: Shortest Path Problem", "text": "Given a simple directed graph and a pair of distinct vertices of the graph, the shortest path problem is to find a shortest path between these two vertices. Given a graph with n vertices and e edges, its density is defined as e/(n \u2217 (n \u2212 1)). In our experiment, the problem instances are generated randomly based on the number of vertices and the density of the graph. The density of the graphs varies from 0.1 to 1 so that the shortest paths involve abductive supports of different sizes. To produce graphs with longer shortest path (which needs larger abductive supports), we zoom into the density between 0 to 0.1 with a step of 0.01. To reduce the time solving the problem instances, as density increases, we use smaller number of vertices. Given a graph, we define the distance between a pair of vertices as the length of the shortest path between them. For any randomly generated graph, we select any two vertices such that their distance is the longest among those of all pairs of vertices. The problem is to find the shortest path between these two vertices.\nThe SPARC programs and CR-prolog programs are written separately due to the difference between these two languages, but we make them as similar as possible and\nuse exactly the same cr-rules in both programs. The experimental results are listed in Figure 3.\nFrom the results, CRModels2 is faster on a majority of cases. Again, crTranslator is faster when the size of the abductive support is large. The graphs with density between 0.02 and 0.03 have support size of 16 while the other graphs (except the one of density 0.01) have support sizes not more than 12. Further investigation is needed to have a better understanding of the performance difference between the two solvers."}, {"heading": "5 Conclusion and Future Work", "text": "This paper describes a sorted version of CR-Prolog called SPARC, presents a translation of consistency restoring rules of the language into weak constraints of DLV, and investigates the possibility of building efficient inference engines for SPARC based on this translation. This is a preliminary report. There is a number of steps which should be made to truly develop SPARC into a knowledge representation language of choice for teaching and applications. In particular we plan the following:\n\u2013 Expand SPARC to include a number of useful language constructs beyond the original language of ASP such as aggregates and optimization constructs. In this\nexpansion, instead of committing to a particular syntax, we are planning to allow users to select their favorite input language such as that of DLV or LPARSE or GRINGO and provide the final system with support for the corresponding language. \u2013 Provide SPARC with means to specify different preference relations between sets of cr-rules, define and investigate answer sets minimal with respect to these preference relations, and implement the corresponding SPARC solvers. \u2013 Design and implement SPARC grounders to directly use the sort information provided by definitions and declaration of a program. The emphasis will be on error checking and incrementality of the grounders. \u2013 Investigate more efficient reasoning algorithms for SPARC. DLV uses a more advanced technique of branch and bound to process weak constraints while CRModels employs a more primitive search algorithm. However, our experiments show that the latter is not necessarily slower. Further understanding of these two approaches is expected to inspire new techniques for building more efficient solvers for SPARC programs. \u2013 Expand SPARC and its solvers to other extensions of ASP including ACC [17] and P-log [4]."}, {"heading": "Acknowledgement", "text": "The work of Gelfond and Zhang was partially supported by NSF grant IIS-1018031."}, {"heading": "Appendix: CR-Prolog", "text": "This Appendix contains a short informal introduction to CR-Prolog. The version discussed here is less general than the standard version \u2014 in particular it omits the treatment of preferences which is a task orthogonal to the goals of this paper. One of the original goals of the CR-Prolog was to provide a construct allowing a simple representation of exceptions to defaults, sometimes referred to as indirect exceptions. Intuitively, these are rare exceptions that come into play only as a last resort, to restore the consistency of the agent\u2019s world view when all else fails. The representation of indirect exceptions seems to be beyond the power of \u201cpure\u201d ASP [1] which prompted the introduction of cr-rules. To illustrate the problem let us consider the following example.\nExample 3. [Indirect Exception in ASP] Consider an ASP representation of the default \u201celements of class c normally have property p\u201d:\np(X)\u2190 c(X), not ab(d(X)), not \u00acp(X).\n(where d(X) is used as the name of the default) together with the rule\nq(X)\u2190 p(X).\nand two observations: c(a). \u00acq(a).\nIt is not difficult to check that this program is inconsistent. No rules allow the reasoner to prove that the default is not applicable to a (i.e. to prove ab(d(a))) or that a does not have property p. Hence the default must conclude p(a). The second rule implies q(a) which contradicts the observation.\nThere, however, seems to exist a commonsense argument which may allow a reasoner to avoid inconsistency, and to conclude that a is an indirect exception to the default. The argument is based on the Contingency Axiom for default d(X) which says that Any element of class c can be an exception to the default d(X) above, but such a possibility is very rare and, whenever possible, should be ignored. One may informally argue that since the application of the default to a leads to a contradiction, the possibility of x being an exception to d(a) cannot be ignored and hence a must satisfy this rare property.\nThe CR-Prolog is an extension of ASP capable of encoding and reasoning about such rare events. In addition to regular logic programming rules the language allows consistency restoring rules of the form\nl0 +\u2190 l1, . . . , lk, not lk+1, . . . , not ln (3)\nwhere l\u2019s are literals. Intuitively, the rule says that if the reasoner associated with the program believes the body of the rule, then it \u201cmay possibly\u201d believe its head. However, this possibility may be used only if there is no way to obtain a consistent set of beliefs by using only regular rules of the program.\nThe following Example shows the use of CR-Prolog for representing defaults and their indirect exceptions.\nExample 4. [Indirect Exception in CR-Prolog] The CR-Prolog representation of default d(X) may look as follows\np(X)\u2190 c(X), not ab(d(X)), not \u00acp(X). \u00acp(X) +\u2190 c(X).\nThe first rule is the standard ASP representation of the default, while the second rule expresses the Contingency Axiom for default d(X). Consider now a program obtained by combining these two rules with an atom c(a). Assuming that a is the only constant in the signature of this program, the program\u2019s answer set will be {c(a), p(a)}. Of course this is also the answer set of the regular part of our program. (Since the regular part is consistent, the Contingency Axiom is ignored.) Let us now expand this program by the rules\nq(X)\u2190 p(X). \u00acq(a).\nThe regular part of the new program is inconsistent. To save the day we need to use the Contingency Axiom for d(a) to form the abductive support of the program. As a result the new program has the answer set {\u00acq(a), c(a),\u00acp(a))}. The new information does\nnot produce inconsistency as in the analogous case of ASP representation. Instead the program withdraws its previous conclusion and recognizes a as a (strong) exception to default d(a).\nThe possibility to encode rare events which may serve as unknown exceptions to defaults proved to be very useful for various knowledge representation tasks, including planning, diagnostics, and reasoning about the agent\u2019s intentions."}], "references": [{"title": "Classical negation in logic programs and disjunctive databases", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "New Generation Computing 9(3/4)", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1991}, {"title": "Logic Programs with Consistency-Restoring Rules", "author": ["M. Balduccini", "M. Gelfond"], "venue": "In Doherty, P., McCarthy, J., Williams, M.A., eds.: International Symposium on Logical Formalization of Commonsense Reasoning.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2003}, {"title": "USA-Smart: Improving the quality of plans in answer set planning", "author": ["M. Balduccini"], "venue": "In Jayaraman, B., ed.: Practical Aspects of Declarative Languages. Volume 3057 of Lecture Notes in Computer Science. Springer Berlin / Heidelberg", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2004}, {"title": "Causal and probabilistic reasoning in P-log", "author": ["M. Gelfond", "N. Rushton"], "venue": "In Dechter, R., Geffner, H., Halpern, J., eds.: A tribute to Judea Pearl. College Publications", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2010}, {"title": "Reasoning about the intentions of agents", "author": ["J. Blount", "M. Gelfond"], "venue": "Logic Programs, Norms and Action. Volume 7360 of Lecture Notes in Computer Science.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2012}, {"title": "Disjunctive Datalog with Strong and Weak Constraints: Representational and Computational Issues", "author": ["W. Faber"], "venue": "PhD thesis, Institut fur Informationssysteme, Technische Universitat Wien", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1998}, {"title": "CR-MODELS: An inference engine for CR-Prolog", "author": ["M. Balduccini"], "venue": "In Baral, C., Brewka, G., Schlipf, J., eds.: Proceedings of the 9th International Conference on Logic Programming and Non-Monotonic Reasoning (LPNMR\u201907). Volume 3662 of Lecture Notes in Artificial Intelligence., Springer", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2007}, {"title": "Language independence and language tolerance in logic programs", "author": ["N. McCain", "H. Turner"], "venue": "ICLP.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1994}, {"title": "Modules and signature declarations for a-prolog: Progress report", "author": ["M. Balduccini"], "venue": "Software Engineering for Answer Set Programming Workshop (SEA07).", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2007}, {"title": "Answer sets", "author": ["M. Gelfond"], "venue": "Handbook of Knowledge Representation. Elsevier", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2008}, {"title": "The DLV system for knowledge representation and reasoning", "author": ["N. Leone", "G. Pfeifer", "W. Faber", "T. Eiter", "G. Gottlob", "S. Perri", "F. Scarcello"], "venue": "ACM Transactions on Computational Logic 7", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2006}, {"title": "Conflict-driven answer set enumeration", "author": ["M. Gebser", "B. Kaufman", "A. Neumann", "T. Schaub"], "venue": "In Baral, C., Brewka, G., Schlipf, J., eds.: Proceedings of the 9th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR\u201907). Volume 3662 of LNAI., Springer", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2007}, {"title": "Integrating answer set programming and constraint logic programming", "author": ["V.S. Mellarkod", "M. Gelfond", "Y. Zhang"], "venue": "Ann. Math. Artif. Intell. 53(1-4)", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [{"referenceID": 0, "context": "The paper continues work on design and implementation of knowledge representation languages based on Answer Set Prolog (ASP) [1].", "startOffset": 125, "endOffset": 128}, {"referenceID": 1, "context": "In particular we concentrate on the extension of ASP called CR-Prolog \u2013 Answer Set Prolog with consistency restoring rules (CR-rules for short) [2].", "startOffset": 144, "endOffset": 147}, {"referenceID": 2, "context": "The language, which allows a comparatively simple encoding of indirect exceptions to defaults, has been successfully used for a number of applications including planning [3], probabilistic reasoning [4], and reasoning about intentions [5].", "startOffset": 170, "endOffset": 173}, {"referenceID": 3, "context": "The language, which allows a comparatively simple encoding of indirect exceptions to defaults, has been successfully used for a number of applications including planning [3], probabilistic reasoning [4], and reasoning about intentions [5].", "startOffset": 199, "endOffset": 202}, {"referenceID": 4, "context": "The language, which allows a comparatively simple encoding of indirect exceptions to defaults, has been successfully used for a number of applications including planning [3], probabilistic reasoning [4], and reasoning about intentions [5].", "startOffset": 235, "endOffset": 238}, {"referenceID": 5, "context": "Second, we translate a basic version of the CR-Prolog into the language of DLV with weak constraints [6] and compare the efficiency of the resulting DLV based CR-Prolog solver with the CR-Prolog solver implemented in [7].", "startOffset": 101, "endOffset": 104}, {"referenceID": 6, "context": "Second, we translate a basic version of the CR-Prolog into the language of DLV with weak constraints [6] and compare the efficiency of the resulting DLV based CR-Prolog solver with the CR-Prolog solver implemented in [7].", "startOffset": 217, "endOffset": 220}, {"referenceID": 7, "context": ", [8,9]) drawbacks:", "startOffset": 2, "endOffset": 7}, {"referenceID": 8, "context": "This concern was addressed by Marcello Balduccini [10] whose system, RSig, provided an ASP programmer with means for specifying sorts of parameters of the language predicates3.", "startOffset": 50, "endOffset": 54}, {"referenceID": 9, "context": "By a ground term we mean a term containing no variables and no symbols for arithmetic functions [11].", "startOffset": 96, "endOffset": 100}, {"referenceID": 7, "context": "The condition was introduced in [8] where the authors proved that every program \u03a0 satisfying this condition has the following property, called language independence: for every sorted signatures \u03a31 and \u03a32 groundings of \u03a0 with respect to \u03a31 and \u03a32 have the same answer sets.", "startOffset": 32, "endOffset": 35}, {"referenceID": 10, "context": "DLV [12] is one of the well developed solvers for ASP programs.", "startOffset": 4, "endOffset": 8}, {"referenceID": 5, "context": "We select DLV as the target language mainly because of its weak constraints [6] which can be used to represent cr-rules.", "startOffset": 76, "endOffset": 79}, {"referenceID": 6, "context": "CRModels2 [7] is the state of the art solver for CR-prolog programs.", "startOffset": 10, "endOffset": 13}, {"referenceID": 2, "context": "To compare the performance of the DLV based solver to CRModels2, we use the classical benchmark of the reaction control system for the space shuttle [3] and new benchmarks such as representing and reasoning with intentions [5], and the shortest path problem.", "startOffset": 149, "endOffset": 152}, {"referenceID": 4, "context": "To compare the performance of the DLV based solver to CRModels2, we use the classical benchmark of the reaction control system for the space shuttle [3] and new benchmarks such as representing and reasoning with intentions [5], and the shortest path problem.", "startOffset": 223, "endOffset": 226}, {"referenceID": 11, "context": "4 [15].", "startOffset": 2, "endOffset": 6}, {"referenceID": 4, "context": "Recently, CR-Prolog has been employed to represent and reason with intentions [5].", "startOffset": 78, "endOffset": 81}, {"referenceID": 4, "context": "We compare crTranslator with CRModels2 on the following scenarios proposed in [5]: Consider a row of four rooms, r1, r2, r3, r4 connected by doorways, such that an agent may move along the row from one room to the next.", "startOffset": 78, "endOffset": 81}, {"referenceID": 4, "context": "Programs to implement these two tasks are given as B0 and B1 respectively in [5].", "startOffset": 77, "endOffset": 80}, {"referenceID": 12, "context": "\u2013 Expand SPARC and its solvers to other extensions of ASP including ACC [17] and P-log [4].", "startOffset": 72, "endOffset": 76}, {"referenceID": 3, "context": "\u2013 Expand SPARC and its solvers to other extensions of ASP including ACC [17] and P-log [4].", "startOffset": 87, "endOffset": 90}, {"referenceID": 0, "context": "The representation of indirect exceptions seems to be beyond the power of \u201cpure\u201d ASP [1] which prompted the introduction of cr-rules.", "startOffset": 85, "endOffset": 88}], "year": 2017, "abstractText": "This is a preliminary report on the work aimed at making CR-Prolog \u2013 a version of ASP with consistency restoring rules \u2013 more suitable for use in teaching and large applications. First we describe a sorted version of CR-Prolog called SPARC. Second, we translate a basic version of the CR-Prolog into the language of DLV and compare the performance with the state of the art CR-Prolog solver. The results form the foundation for future more efficient and user friendly implementation of SPARC and shed some light on the relationship between two useful knowledge representation constructs: consistency restoring rules and weak constraints of DLV.", "creator": "LaTeX with hyperref package"}}}