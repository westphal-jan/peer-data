{"id": "1301.4171", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Jan-2013", "title": "Affinity Weighted Embedding", "abstract": "Supervised (linear) embedding models like Wsabie and PSI have proven successful at ranking, recommendation and annotation tasks. However, despite being scalable to large datasets they do not take full advantage of the extra data due to their linear nature, and typically underfit. We propose a new class of models which aim to provide improved performance while retaining many of the benefits of the existing class of embedding models. Our new approach works by iteratively learning a linear embedding model where the next iteration's features and labels are reweighted as a function of the previous iteration. We describe several variants of the family, and give some initial results.", "histories": [["v1", "Thu, 17 Jan 2013 17:46:27 GMT  (19kb)", "http://arxiv.org/abs/1301.4171v1", null]], "reviews": [], "SUBJECTS": "cs.IR cs.LG stat.ML", "authors": ["jason weston", "ron j weiss", "hector yee"], "accepted": true, "id": "1301.4171"}, "pdf": {"name": "1301.4171.pdf", "metadata": {"source": "CRF", "title": "Affinity Weighted Embedding", "authors": ["Jason Weston"], "emails": ["jweston@google.com", "ronw@google.com", "hyee@google.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n30 1.\n41 71\nv1 [\ncs .I\nR ]"}, {"heading": "1 (Supervised) Linear Embedding Models", "text": "Standard linear embedding models are of the form:\nf(x, y) = x\u22a4U\u22a4V y = \u2211\nij\nxiU \u22a4 i Vjyj .\nwhere x are the input features and y is a possible label (in the annotation case), document (in the information retrieval case) or item (in the recommendation case). These models are used in both supervised and unsupervised settings. In the supervised ranking case, they have proved successful in many of the tasks described above, e.g. the Wsabie algorithm [5, 4, 6] which approximately optimizes precision at the top of the ranked list has proven useful for annotation and recommendation.\nThese methods scale well to large data and are simple to implement and use. However, as they contain no nonlinearities (other than in the feature representation in x and y) they can be limited in their ability to fit large complex datasets, and in our experience typically underfit."}, {"heading": "2 Affinity Weighted Embedding Models", "text": "In this work we propose the following generalized embedding model:\nf(x, y) = \u2211\nij\nGij(x, y) xiU \u22a4 i Vjyj.\nwhere G is a function, built from a previous learning step, that measures the affinity between two points. Given a pair x, y and feature indices i and j, G returns a scalar. Large values of the scalar indicate a high degree of match. Different methods of learning (or choosing) G lead to different variants of our proposed approach:\n\u2022 Gij(x, y) = G(x, y). In this case each feature index pair i, j returns the same scalar so the model reduces to:\nf(x, y) = G(x, y) x\u22a4U\u22a4V y.\n\u2022 Gij(x, y) = Gij . In this case the returned scalar for i, j is the same independent of the input vector x and label y, i.e. it is a reweighting of the feature pairs. This gives the model:\nf(x, y) = \u2211\nij\nGijxiU \u22a4 i Vjyj .\nThis is likely only useful in large sparse feature spaces, e.g. if Gij represents the weight of a word-pair in an information retrieval task or an item-pair in a recommendation task. Further, it is possible that Gij could take a particular form, e.g. it is represented as a low rank matrix Gij = g\u22a4i gj . In that case we have the model f(x, y) = \u2211 ij g \u22a4 i gjxiU \u22a4 i Vjyj .\nWhile it may be possible to learn the parameters of G jointly with U and V here we advocate an iterative approach:\n1. Train a standard embedding model: f(x, y) = x\u22a4U\u22a4V y.\n2. Build G using the representation learnt in (1). 3. Train a weighted model: f(x, y) = \u2211\nij Gij(x, y) xiU\u0304 \u22a4 i V\u0304jyj .\n4. Possibly repeat the procedure further: build G\u0304 from (3). (So far we have not tried this).\nNote that the training algorithm used for (3) is the same as for (1) \u2013 we only change the model.\nIn the following, we will focus on the Gij(x, y) = G(x, y) case (where we only weight examples, not features) and a particular choice of G1:\nG(x, y) = m\u2211\ni=1\nexp(\u2212\u03bbx||Ux\u2212 Uxi|| 2) exp(\u2212\u03bby||y \u2212 yi|| 2) (1)\nwhere x and y are the sets of vectors from the training set.\nG is built using the embedding U learnt in step (1), and is then used to build a new embedding model in step (3). Due to the iterative nature of the steps we can compute G for all examples in parallel using a MapReduce framework, and store the training set necessary for step (3), thus making learning straight-forward. To decrease storage, instead of computing a smooth G as above we can clip (sparsify) G by taking only the top n nearest neighbors to Ux, and set the rest to 0. Further we take \u03bby suitably large such that exp(\u2212\u03bby||y \u2212 yi||2) either gives 1 for yi = y or 0 otherwise2. In summary, then, for each training example, we simply have to find the (n = 20 in our experiments) nearest neighboring examples in the embedding space, and then we reweight their labels using eq. 1. (All other labels would then receive a weight of zero, although one could also add a constant bias to guarantee those labels can receive non-zero final scores.)"}, {"heading": "3 Experiments", "text": "So far, we have conducted two preliminary experiments on Magnatagatune (annotating music with text tags) and ImageNet (annotation images with labels). Wsabie has been applied to both tasks previously [4, 5].\nOn Magnatagatune we used MFCC features for both Wsabie and our method, similar to those used in [4]. For both models we used an embedding dimension of 100. Our method improved over Wsabie marginally as shown in Table 1. We speculate that this improvement is small due to the small size\n1Although perhaps G(x, y) = \u2211m\ni=1 exp(\u2212\u03bbx||Ux \u2212 Uxi|| 2) exp(\u2212\u03bby||V y \u2212 V yi|| 2) would be more\nnatural. Further we could also consider Gorig(x, y) = \u2211m\ni=1 exp(\u2212\u03bbx||x\u2212xi|| 2) exp(\u2212\u03bby||y\u2212yi|| 2) which\ndoes not make use of the embedding in step (1) at all. This would likely perform poorly when the input features are too sparse, which would be the point of improving the representation by learning it with U and V .\n2This is useful in the label annotation or item ranking settings, but would not be a good idea in an information retrieval setting.\nof the dataset (only 16,000 training examples, 104 input dimensions for the MFCCs and 160 unique tags). We believe our method will be more useful on larger tasks.\nOn the ImageNet task (Fall 2011, 10M examples, 474 KPCA features and 21k classes) the improvement over Wsabie is much larger, shown in Table 2. We used similar KPCA features as in [5] for both Wsabie and our method. We use an embedding dimension of 128 for both. We also compare to nearest neighbor in the embedding space. For our method, we used the max instead of the sum in eq. (1) as it gave better results. Our method is competitive with the convolutional neural network model of [2] (note, this is on a different train/test split). However, we believe the method of [3] would likely perform better again if applied in the same setting."}, {"heading": "4 Conclusions", "text": "In conclusion, by incorporating a learnt reweighting function G into supervised linear embedding we can increase the capacity of the model leading to improved results. One issue however is that the cost of reducing underfitting by using G is that it both increases the storage and computational requirements of the model. One avenue we have begun exploring in that regard is to use approximate methods in order to compute G."}], "references": [{"title": "Polynomial semantic indexing", "author": ["B. Bai", "J. Weston", "D. Grangier", "R. Collobert", "K. Sadamasa", "Y. Qi", "C. Cortes", "M. Mohri"], "venue": "NIPS", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2009}, {"title": "et al", "author": ["J. Dean", "G. Corrado", "R. Monga", "K. Chen", "M. Devin", "Q. Le", "M. Mao", "A. Senior", "P. Tucker", "K. Yang"], "venue": "Large scale distributed deep networks. In Advances in Neural Information Processing Systems 25, pages 1232\u20131240", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2012}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G. Hinton"], "venue": "Advances in Neural Information Processing Systems 25, pages 1106\u20131114", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "Large-scale music annotation and retrieval: Learning to rank in joint semantic spaces", "author": ["J. Weston", "S. Bengio", "P. Hamel"], "venue": "Journal of New Music Research", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2012}, {"title": "Wsabie: Scaling up to large vocabulary image annotation", "author": ["J. Weston", "S. Bengio", "N. Usunier"], "venue": "Intl. Joint Conf. Artificial Intelligence, (IJCAI), pages 2764\u20132770", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2011}, {"title": "Latent collaborative retrieval", "author": ["J. Weston", "C. Wang", "R. Weiss", "A. Berenzeig"], "venue": "ICML", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}], "referenceMentions": [{"referenceID": 4, "context": "Supervised (linear) embedding models like Wsabie [5] and PSI [1] have proven successful at ranking, recommendation and annotation tasks.", "startOffset": 49, "endOffset": 52}, {"referenceID": 0, "context": "Supervised (linear) embedding models like Wsabie [5] and PSI [1] have proven successful at ranking, recommendation and annotation tasks.", "startOffset": 61, "endOffset": 64}, {"referenceID": 4, "context": "the Wsabie algorithm [5, 4, 6] which approximately optimizes precision at the top of the ranked list has proven useful for annotation and recommendation.", "startOffset": 21, "endOffset": 30}, {"referenceID": 3, "context": "the Wsabie algorithm [5, 4, 6] which approximately optimizes precision at the top of the ranked list has proven useful for annotation and recommendation.", "startOffset": 21, "endOffset": 30}, {"referenceID": 5, "context": "the Wsabie algorithm [5, 4, 6] which approximately optimizes precision at the top of the ranked list has proven useful for annotation and recommendation.", "startOffset": 21, "endOffset": 30}, {"referenceID": 3, "context": "Wsabie has been applied to both tasks previously [4, 5].", "startOffset": 49, "endOffset": 55}, {"referenceID": 4, "context": "Wsabie has been applied to both tasks previously [4, 5].", "startOffset": 49, "endOffset": 55}, {"referenceID": 3, "context": "On Magnatagatune we used MFCC features for both Wsabie and our method, similar to those used in [4].", "startOffset": 96, "endOffset": 99}, {"referenceID": 1, "context": "4% Convolutional Net [2] 15.", "startOffset": 21, "endOffset": 24}, {"referenceID": 4, "context": "We used similar KPCA features as in [5] for both Wsabie and our method.", "startOffset": 36, "endOffset": 39}, {"referenceID": 1, "context": "Our method is competitive with the convolutional neural network model of [2] (note, this is on a different train/test split).", "startOffset": 73, "endOffset": 76}, {"referenceID": 2, "context": "However, we believe the method of [3] would likely perform better again if applied in the same setting.", "startOffset": 34, "endOffset": 37}], "year": 2013, "abstractText": "Supervised (linear) embedding models like Wsabie [5] and PSI [1] have proven successful at ranking, recommendation and annotation tasks. However, despite being scalable to large datasets they do not take full advantage of the extra data due to their linear nature, and typically underfit. We propose a new class of models which aim to provide improved performance while retaining many of the benefits of the existing class of embedding models. Our new approach works by iteratively learning a linear embedding model where the next iteration\u2019s features and labels are reweighted as a function of the previous iteration. We describe several variants of the family, and give some initial results. 1 (Supervised) Linear Embedding Models Standard linear embedding models are of the form: f(x, y) = xUV y = \u2211", "creator": "LaTeX with hyperref package"}}}