{"id": "1302.5215", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Feb-2013", "title": "Development Of Ontology-Based Intelligent System For Software Testing", "abstract": "Software testing is a prime factor in software industry. Besides knowing the importance of testing, only limited time is allocated for teaching it. It will be more efficient if testing is taught simultaneously with programming foundations. This integrated learning of testing techniques and programming allows the programmers to perform in a better way and this leads to the improvement of the performance of the industry progress. In this paper, a technique named ontology is introduced, it first defines the various testing process in hierarchy and define relationships among them, to share and reuse the knowledge that is captured, secondly metadata is created by natural language processing and finally, the application use ontologies to support test management, it act as knowledge base for multiple environment with the integrated teaching of programming foundation and testing concepts. Keywords: Meta Data, Ontology, Software Testing, Integration, Programming Foundations.", "histories": [["v1", "Thu, 21 Feb 2013 08:45:49 GMT  (110kb)", "http://arxiv.org/abs/1302.5215v1", "International Journal of Communication, Computation and Innovation. / Volume 2, Issue 2, 2011"]], "COMMENTS": "International Journal of Communication, Computation and Innovation. / Volume 2, Issue 2, 2011", "reviews": [], "SUBJECTS": "cs.AI cs.SE", "authors": ["a anandaraj", "p kalaivani", "v rameshkumar"], "accepted": false, "id": "1302.5215"}, "pdf": {"name": "1302.5215.pdf", "metadata": {"source": "CRF", "title": "DEVELOPMENT OF ONTOLOGY-BASED INTELLIGENT SYSTEM FOR SOFTWARE TESTING", "authors": ["A. Anandaraj P. Kalaivani", "V. Rameshkumar", "A. Anandaraj", "P. Kalaivani"], "emails": ["anandarajme@gmail.com,", "kalaipadman@gmail.com,", "vrameshbtech@gmail.com"], "sections": [{"heading": null, "text": "time is allocated for teaching it. It will be more efficient if testing is taught simultaneously with programming foundations. This integrated learning of testing techniques and programming allows the programmers to perform in a better way and this leads to the improvement of the performance of the industry progress. In this paper, a technique named ontology is introduced, it first defines the various testing process in hierarchy and define relationships among them, to share and reuse the knowledge that is captured, secondly metadata is created by natural language processing and finally, the application use ontologies to support test management, it act as knowledge base for multiple environment with the integrated teaching of programming foundation and testing concepts. Keywords: Meta Data, Ontology, Software Testing, Integration, Programming Foundations."}, {"heading": "1. INTRODUCTION", "text": "Software defects exist in almost all types of software with moderate size. To overcome these defects software testing is carried out. Software testing is one of the key assets of a software engineer to protect software from bugs but it is difficult to learn or teach without proper guidance.\nDuring the learning process, testing is taught only at the last part and this does not allow software professionals to perform testing in a better way. Earlier mastering of testing concepts and techniques would: (1) improve the reasoning about the program (and its solution), leading to better high quality products; and (2) induce and facilitate the use of testing throughout the software development process, leading to a better high quality process, in contrast to the current practices [1].\nOne way to improve the efficiency of testing in the programmers is to introduce an ontological concept which integrates the teaching of programming and testing in a combined manner during the training period in industry.\nProgramming foundations is not an easy subject to be taught - many students have difficulties in understanding the concepts of programming [2]\nand have a wrong view about the programming activity [3]. Thus, it is a biggest challenge for the trainers to teach them in an efficient and effective way.\nTesting requires the learners to know the behavior of their programs, such activity could be explored to help them understand the abstract concepts of programming and develop the expected skills [3].\nThe goal of this paper is to help software industry to get their fresher trained with programming concepts and testing simultaneously with the help of ontology. This paper describes the classification of programming and testing using prot\u00e9g\u00e9. This also defines the classes, properties and features such as reasoners to check semantic consistency. Finally, the paper shows the graphical view of the classes, generated OWL schemas and XML scripts which is used to link existing web resources into the semantic web."}, {"heading": "2. DEVELOPMENT OF ONTOLOGIES USING PROT\u00c9G\u00c9", "text": "OWL ontology is described as a network of classes, properties and individuals. Classes define names of the relevant domain concepts and\ntheir logical characteristics. Properties (also called as roles, attributes or slots) that defines relationships between classes, and allow assigning primitive values to instances. Individuals are instances of the classes with specific values for the properties [4].\nThe semantic web can be regarded as a network of ontologies and other web resources [4]. OWL ontology concepts can have references to concepts in other ontologies. The basic mechanism for this capability is ontology import (i.e., ontology can import resources from existing ontologies and create instances or specializations of their classes)"}, {"heading": "2.1 Design of Ontology", "text": "The steps followed to build ontology are explained below:"}, {"heading": "2.1.1 Determine Domain and Scope of Ontology", "text": "The main goal of this work is to provide a framework for programming foundations and testing simultaneously. The objective is to use this ontology for integrated teaching of programming foundations and testing in software industry."}, {"heading": "2.1.2 Defining Concepts in the Ontology", "text": "The terminologies that relates to objective are listed to create ontology. For example, important terms related to this are testing phase, testing techniques, oop paradigm, control flow statements etc. Figure 5 explains the testing and programming concepts."}, {"heading": "2.1.3 Create a Class Hierarchy", "text": "The terminologies form the classes in the ontology. For example, encapsulation, error based technique, unit testing, and integration testing forms classes in OWL ontology and are represented in figure 2."}, {"heading": "2.1.4 Defining Properties and Constraints", "text": "There are two types of properties viz., object properties and datatype properties. Object\nproperties links object to an object. Datatype properties links objects to the XML schemas and are depicted in figure 3."}, {"heading": "3. DEVELOPMENT OF ONTOLOGIES FOR SOFTWARE TESTING", "text": "The development of intelligent ontology based learning system for Software Testing is briefly illustrated in following steps."}, {"heading": "3.1 Description of Classes", "text": "The important view in the Prot\u00e9g\u00e9 OWL plugin is the OWL classes. Classes describe concepts in the domain. This tab displays the tree of the ontology\u2019s classes on the left. The upper region of the class is shown in a form in the center. This form allows users to edit class metadata such as name, comments, and labels, in multiple languages. The widget in the right area of the form allows users to assign values for properties and description to a class.\nAnnotation properties can be used to add information (metadata-data about data) to classes. Ontologies can define their own annotation properties or reuse existing ones such as those from the Dublin core ontology [4]. In contrast to other properties, annotation properties do not have any formal meaning for external OWL components like reasoners, but they are an extremely important vehicle for maintaining project information.\nIn this paper many classes and sub classes have been created under the field of testing and programming but due to lack of space only some of the classes are described elaborately.\nHere the class testing techniques has sub classes error based technique, functional technique and structural technique. The class error based technique is further divided into error seeding, error guessing and mutation analysis. The classes are represented in figure 1.\nThe editing of classes is carried out using the classes tab shown in Figure 2. The initial class hierarchy tree view should resemble the picture shown in Figure 2. The empty ontology contains one class called Thing. The class Thing is the class that represents the set containing all individuals. Because of this all classes are subclasses of Thing [5]. To add a class, the classes tab is selected, add subclass button is pressed. This creates a new class as a subclass of the selected class Thing."}, {"heading": "3.2 Creation of Properties", "text": "The properties widget of the OWL classes tab allows users to view and create relationships between classes. It provides access to those properties that could be used by the instances of the current class. The characteristics of a property are edited through the form shown in Figure 4. This form provides a metadata area in the upper part, displaying the property\u2019s name, annotations and so on, similar to the presentation in the class form.\nThere are two main types of properties viz. Object properties and Datatype properties. Object properties are relation between two individuals. Object properties link an individual to an individual whereas datatype property links an individual to an XML Schema Datatype value or an RDF literal (i.e. they describe relationship between an individual and data values). OWL also has another property named annotation property, which is used to add information (i.e. metadata - data about data) to classes, individuals and object/ datatype properties.\nThe class testing terminology relates to the class oop paradigm by the property isAppliedin. The class oop paradigm in turn relates with programming language via utilizes property and the class testing techniques links advanced concepts by are Automated By property. These properties have characteristics like antisymmetric and irreflexive.\nThe properties can be edited using the properties tab selecting either object properties or datatype properties. Annotations can also be added to the properties in order to describe about it. To create an object property switch to object properties tab, use the add object property button, this creates a new object property."}, {"heading": "3.3 Open World Assumption", "text": "The assumption is made by description logic, this denotes a lack of knowledge. The consequence is that if two classes testing phases and testing techniques are not defined as disjoint then it can have the individuals in common. The disjointness in classes plays a vital role in each of the class description. Creating a class and making it complement to another class is done here.\nReasoning capabilities are exploited to detect logical inconsistencies within the ontology. The error has been occurred while setting characteristics, asymmetric and reflexive to a same property. The consistency checks can help developer in an adequate manner while constructing the ontologies.\nThe important issue with reasoners is that OWL is not able to handle full expressivity. The specification distinguishes between OWL Full and OWL DL to indicate tractable language elements to reasoners. Ontologies which use metaclasses which is a OWL Full element cannot be classified. The conversion of OWL Full to OWL DL can be made using the classifier. Complete OWL Full syntax is not supported by prot\u00e9g\u00e9. Figure 4: OWL/XML Schemas"}, {"heading": "3.4 OWL/XML Rendering", "text": "The structure of any expression in RDF consists of triples, each consisting of a subject, a predicate and an object. A set of each triples is called an RDF graph. This can be illustrated using the node and arc diagram, in which each triple is represented as a node-arc-node link. In order to avoid conversion between different description languages, ontology needs a common language to express. XML has been used for this purpose since it has standards on data exchange. OWL ontology is most commonly serialized using OWL/XML syntax. The OWL/XML schemas are represented in figure 4."}, {"heading": "4. CONCLUSION AND FUTURE WORK", "text": "This paper described a framework of an ontology construction for integrated teaching of programming foundations with testing. Under this construction of framework of ontology, the programmers get depth knowledge about the application of testing concepts along with programming. This helps the software industry to train their freshers in a perfect manner.\nThe future work of this paper is to merge different ontologies using the same technique."}], "references": [{"title": "Construction of Tridimensional Software testing Practice teaching Platform", "author": ["Maojun Huang", "Jiali Xia", "Bizhou Xiong", "Xifa Liu"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2010}, {"title": "A study of the difficulties of novice programmers", "author": ["E.lahtinen", "K.Ala-Mutka", "H.Jarvinen"], "venue": "In ITiCSE \u201905: Proceedings of the 10th annual SIGCSE conference on Innovation and technology in computer science education,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "Architecture Centric Approach to Enhance Software Testing Management", "author": ["Fu-Shiau Li", "Wei-Ming Ma", "Architect Chao"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2008}, {"title": "Automated ontology construction for unstructured text documents", "author": ["C Lee", "Y Kao", "Y Kuo", "M Wang"], "venue": "Data & Knowledge Engineering", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "H.E.Thomsen, Content-based text querying with ontological descriptors", "author": ["T. Andreasen", "P.A. Jensen", "J.F. Nilsson", "P. Paggio", "B.S. Pedersen"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2004}, {"title": "Metais, Building and maintaining ontologies: a set of algorithm, Data and Knowledge Engineering", "author": ["E.N. Lammari"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "Dictionary of Philosophy of Mind - Ontology", "author": ["G. Witmer"], "venue": "[cited May 11,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2004}, {"title": "Research on Ontology Based Information Retrieval Model", "author": ["J. Song", "W. Zhang", "W. Xiao", "J. Tan"], "venue": "Journal of Nanjing University (Natural Sciences),", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2005}, {"title": "Ontology-based text clustering, in:Proceedings of the IJCAI-2001 Workshop Text Learning: Beyond Supervision", "author": ["A. Hotho", "A. Madche", "S. Staab"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2001}, {"title": "Bridging Multi Agent Systems and Web Services: towards interoperability between Software Agents and Semantic Web Services", "author": ["M. Omair Shafiq", "Ying Ding", "Dieter Fensel"], "venue": "10th IEEE International Enterprise Distributed Object Computing Conference, pp. 85-96, 2006.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2006}, {"title": "OWL Web Ontology Language Reference", "author": ["M. Dean", "G. Schreiber"], "venue": "W3C Recommendation,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2004}], "referenceMentions": [{"referenceID": 0, "context": "Earlier mastering of testing concepts and techniques would: (1) improve the reasoning about the program (and its solution), leading to better high quality products; and (2) induce and facilitate the use of testing throughout the software development process, leading to a better high quality process, in contrast to the current practices [1].", "startOffset": 338, "endOffset": 341}, {"referenceID": 1, "context": "Programming foundations is not an easy subject to be taught - many students have difficulties in understanding the concepts of programming [2] and have a wrong view about the programming activity [3].", "startOffset": 139, "endOffset": 142}], "year": 2012, "abstractText": "Software testing is a prime factor in software industry. Besides knowing the importance of testing, only limited time is allocated for teaching it. It will be more efficient if testing is taught simultaneously with programming foundations. This integrated learning of testing techniques and programming allows the programmers to perform in a better way and this leads to the improvement of the performance of the industry progress. In this paper, a technique named ontology is introduced, it first defines the various testing process in hierarchy and define relationships among them, to share and reuse the knowledge that is captured, secondly metadata is created by natural language processing and finally, the application use ontologies to support test management, it act as knowledge base for multiple environment with the integrated teaching of programming foundation and testing concepts.", "creator": "PageMaker 7.0"}}}