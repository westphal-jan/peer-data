{"id": "1306.2268", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Jun-2013", "title": "Accomplishable Tasks in Knowledge Representation", "abstract": "Knowledge Representation (KR) is traditionally based on the logic of facts, expressed in boolean logic. However, facts about an agent can also be seen as a set of accomplished tasks by the agent. This paper proposes a new approach to KR: the notion of task logical KR based on Computability Logic. This notion allows the user to represent both accomplished tasks and accomplishable tasks by the agent. This notion allows us to build sophisticated KRs about many interesting agents, which have not been supported by previous logical languages.", "histories": [["v1", "Fri, 7 Jun 2013 04:42:02 GMT  (8kb)", "http://arxiv.org/abs/1306.2268v1", "arXiv admin note: substantial text overlap witharXiv:1305.2004"]], "COMMENTS": "arXiv admin note: substantial text overlap witharXiv:1305.2004", "reviews": [], "SUBJECTS": "cs.AI cs.CL", "authors": ["keehang kwon", "mi-young park"], "accepted": false, "id": "1306.2268"}, "pdf": {"name": "1306.2268.pdf", "metadata": {"source": "CRF", "title": "Accomplishable Tasks in Knowledge Representation", "authors": ["Keehang Kwon", "Mi-Young Park"], "emails": ["}@dau.ac.kr"], "sections": [{"heading": null, "text": "ar X\niv :1\n30 6.\n22 68\nv1 [\ncs .A\nI] 7\nJ un\nThis paper proposes a new approach to KR: the notion of task logical KR based on Computability Logic. This notion allows the user to represent both accomplished tasks and accomplishable tasks by the agent. This notion allows us to build sophisticated KRs about many interesting agents, which have not been supported by previous logical languages.\nKeywords : tasks, knowledge representation, agents, computability logic."}, {"heading": "1 Introduction", "text": "Traditional acquaintance with knowledge representation (KR) relates to the boolean logic including classical logic, modal logic and linear logic [3, 4]. Within this setting, knowledges are expressed as a logic of facts. Many KRs in AI textbooks and papers [8] have been written in boolean logic. However, boolean logic is too simple to represent an important aspect of knowledge, i.e., tasks that can be accomplished by the agent. In particular, boolean logic is awkward to use in representing accomplishable tasks by many interesting agents.\nIt is possible to expand knowledge about an agent by employing a task/game logic called computability logic (CL) [6, 7], a powerful logic which is built around the notion of success/failure. CL is a logic of task in which accomplishable tasks can be easily represented. Consequently, CL can express both deterministic (true/false) and nondeterministic task (success/failure) in a concise way. The task logic offers many new, essential logical operators including parallel conjunction/disjunction, sequential conjunction/disjunction, choice conjunction/disjunction, etc.\nThis paper proposes to use CL as an KR language. The distinguishing feature of CL is that now knowledge about an agent include new, sophisticated tasks that have not been supported by previous logical languages. While CL is an excellent KR language, it is based on the first-order logic. We also consider its higher-order extension where first-order terms are replaced by higher-order\nterms. It is well-known that higher-order terms can describe objects of function types including programs and formulas. Higher-order terms have proven useful in many metalanguage applications such as theorem proving.\nThe remainder of this paper is structured as follows. We discuss a new way of defining algorithms in the next section. In Section 3, we present some examples. Section 4 concludes the paper."}, {"heading": "2 Task Logical KR", "text": "A task logical knowledge representation and reasoning (KRR) is of the form\nc : T \u2212\u2192 T1\nwhere c : T represents an agent c who can do task T and T1 is a query. In the traditional developments of KR, T is limited to facts or accomplished tasks. Accomplishable tasks are totally ignored. In KR, however, representing accomplishable tasks is desirable quite often. Such examples include many interesting agents including coffee vending machine, many OS processes, lottery tickets, etc.\nTo define the class of accomplishable tasks, we need a specification language. An ideal language would support an optimal translation of the tasks. We argue that a reasonable, high-level translation of the tasks can be achieved via computability logic(CL)[5, 6]. An advantage of CL over other formalisms such as sequential pseudocode, linear logic[3], etc, is that it can optimally encode a number of essential tasks: nondeterminism, updates, etc. Hence the main advantage of CL over other formalisms is the minimum (linear) size of the encoding.\nWe consider here a higher-order version of CL. The logical language we consider in this paper is built based on a simply-typed lambda calculus. Although types are strictly necessary, we will omit these here because their identity is not relevant in this paper. An atomic formula is (p t1 . . . tn) where p is a (predicate) variable or non-logical constant and each ti is a lambda term.\nThe basic operator in CL is the reduction of the form c : A \u2192 B. This expression means that the task B can be reduced to another task B. The expression c : A \u2227 B means that the agent c can perform two tasks A and B in parallel. The expression !A means that the agent can perform the task A repeatedly. The expression c : A\u2293B means that the agent c can perform either task A or B, regardless of what the machine chooses. The expression c :\u2293xA(x) means that the agent c can perform the task A, regardless of what the machine chooses for x. The expression c : A \u2294B means that the agent c can choose and perform a true disjunct between A and B.\nThe expression c : \u2294xA(x) means that the agent can choose a right value for x so that it can perform the task A. We point the reader to [6, 7] to find out more about the whole calculus of CL."}, {"heading": "3 Examples", "text": "The notion of CL makes KR versatile compared to traditional approach. As an example, we present an agent c who can compute the factorial function. This task can be defined as follows in English:\n(1) c can either claim that fac(0, 1) holds, or\n(2) can replace fac(X,Y ) by fac(X + 1, XY + Y ).\nIt is shown below that the above description can be translated into CL formulas. The following is a CL translation of the above knowledge, where the reusable action is preceded with !. Note that our version use \u2293 which dynamically creates/destroys facts.\nc :! (fac 0 1) \u2293 \u2293x\u2293y ((fac x y) \u2192 (fac x+ 1 xy + y)).\nA task of answering queries is typically given in the form of a query relative to agents. Computation tries to solve the query with respect to the agent c. As an example, executing agent c \u2212\u2192 \u2293y\u2294zfac(y, z) would involve the user choosing a value, say 5, for y. This eventually results in the initial resource fac(0, 1) being created and then transformed to fac(1, 1), then to fac(2, 2), and so on. It will finally produce the desired result z = 120 using the second conjucnt five times.\nAn example of interactive, accomplishable tasks is provided by the following agent t which is a lottery ticket. The ticket is represented as 0 \u2294 1M which indicates that it has two possible values, nothing or one million dollars.\nThe following is a CL translation of the above agent.\nt : 0 \u2294 1M .\nNow we want to obtain a final value of t. This task is represented by the query t. Now executing the program agent t \u2212\u2192 agent t would produce the following question asked by the agent in the task of 0\u2294 1M in the program: \u201chow much is the final value?\u201d. The user\u2019s response would be zero dollars. This move brings the task down to 0 \u2212\u2192 agent t. Executing 0 \u2212\u2192 agent t would require the machine to choose zero dollars in 0 \u2294 1M for a success.\nAn example of parallel tasks is provided by the agent b which consists of two (sub)agents c and d working at a fastfood restaurant. The agent c waits for a customer to pay money(at least three dollars), and then generates a hamburger set consisting of a hamburger, a coke and a change. The agent d waits for a customer to pay money(at least four dollars), and then generates a fishburger set consisting of a fishburger, a coke and a change.\nThe following is a CL translation of the above algorithm.\nc :!\u2293x(\u2265 (x, 3) \u2192 m(ham) \u2227m(coke) \u2227m(x\u2212 3))\u2227 d :!\u2293x(\u2265 (x, 4) \u2192 m(fi) \u2227m(coke) \u2227m(x\u2212 4)).\nNow we want to execute c and d in parallel to obtain a hamburger set and then a fishburger set by interactively paying money to c and d. This interactive task is represented by the query c \u2227 d. Now executing the program agent c, agent d \u2212\u2192 agent c \u2227 agent d would produce the following question asked by the agent in the task of c: \u201chow much do you want to pay me?\u201d. The user\u2019s response would be five dollars. This move brings the task down to\nm(ham) \u2227 m(coke) \u2227 m($2) which would be a success. The task of d would proceed similarly.\nAs an example of higher-order KR, consider the interpreter for Horn clauses. It is described by G- and D-formulas given by the syntax rules below:\nG ::= A | G and G | some x G\nD ::= A | G imp A | all x D | D and D\nIn the rules above, A represents an atomic formula. AD-formula is called a Horn clause. The expression some x G involves bindings. We represent such objects using lambda terms. For example, all x p(x) is represented as all \u03bbx(p x).\nIn the algorithm to be considered, G-formulas will function as queries and D-formulas will constitute a program.\nWe will present an operational semantics for this language based on [11]. Note that execution alternates between two phases: the goal-reduction phase and the backchaining phase. Following Prolog\u2019s syntax, we assume that names beginning with uppercase letters are quantified by \u2293. Definition 1. Let G be a goal and let D be a program. Then the notion of executing \u3008D,G\u3009 \u2013 pv D G \u2013 is defined as follows:\n(1) bc D A A \u2293 % This is a success.\n(2) pv D G1 \u2192 bc D (G1 imp A) A) \u2293\n(3) bc D (D X) A \u2192 bc D (all D) A \u2293\n(4) bc D D1 A \u2228 bc D D2 A \u2192 bc D (D1 and D2) A \u2293\n(5) atom A \u2227 bc D D A \u2192 pv D A \u2293 % change to backchaining phase.\n(6) pv D G1 \u2227 pv D G2 \u2192 pv D (G1 and G2) \u2293\n(7) pv D (G X) \u2192 pv D (some G).\nIn the rules (3) and (7), the symbol X will be instantiated by a term. In this context, consider the query pv (p a) (some \u03bbx(p x)). In solving this query, pv (p a) (p a) will be formed and eventually solved.\nThe examples presented here have been of a simple nature. They are, however, sufficient for appreciating the attractiveness of the algorithm development process proposed here. We point the reader to [9, 10, 11] for more examples."}, {"heading": "4 Conclusion", "text": "Knowledge representation is traditionally based on the logic of facts, expressed in boolean logic. This paper proposed a new, task logical approach to KR. This approach allows us to build sophisticated KRs about many interesting agents, which have not been supported by previous boolean logical languages.\nOur ultimate interest is in a procedure for carrying out computations of the kind described above. Hence it is important to realize this CL interpreter in an efficient way, taking advantages of some techniques discussed in [1, 2, 4]."}, {"heading": "5 Acknowledgements", "text": "This paper was supported by Dong-A University Research Fund."}], "references": [{"title": "Design and implementation of linear logic programming languages", "author": ["M. Banbara"], "venue": "Ph.D. Dissertation, Kobe University,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2002}, {"title": "Efficient resource management for linear logic proof search", "author": ["Iliano Cervesato", "Joshua S. Hodas", "Frank Pfenning"], "venue": "In Proceedings of the 1996 Workshop on Extensions of Logic Programming,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1996}, {"title": "Logic programming in a fragment of intuitionistic linear logic", "author": ["Joshus Hodas", "Dale Miller"], "venue": "Journal of Information and Computation,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1994}, {"title": "The logic of tasks", "author": ["G. Japaridze"], "venue": "Annals of Pure and Applied Logic,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2002}, {"title": "Introduction to computability logic", "author": ["G. Japaridze"], "venue": "Annals of Pure and Applied Logic,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2003}, {"title": "Sequential operators in computability logic", "author": ["G. Japaridze"], "venue": "Information and Computation,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2008}, {"title": "Extending Logicweb via Hereditary Harrop Formulas", "author": ["K. Kwon", "D. Kang"], "venue": "IEICE Transactions on Information and Systems, vol.E91-D, No.6,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2008}, {"title": "A logic programming approach to manipulating formulas and programs", "author": ["D. Miller", "G. Nadathur"], "venue": "In IEEE Symposium on Logic Programming,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1987}, {"title": "\u03bbProlog version 2.7. Distributed in C-Prolog and Quintus Prolog source code", "author": ["D. Miller", "G. Nadathur"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1988}, {"title": "Programming with higher-order logic", "author": ["D. Miller", "G. Nadathur"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}], "referenceMentions": [{"referenceID": 2, "context": "Traditional acquaintance with knowledge representation (KR) relates to the boolean logic including classical logic, modal logic and linear logic [3, 4].", "startOffset": 145, "endOffset": 151}, {"referenceID": 6, "context": "Many KRs in AI textbooks and papers [8] have been written in boolean logic.", "startOffset": 36, "endOffset": 39}, {"referenceID": 4, "context": "It is possible to expand knowledge about an agent by employing a task/game logic called computability logic (CL) [6, 7], a powerful logic which is built around the notion of success/failure.", "startOffset": 113, "endOffset": 119}, {"referenceID": 5, "context": "It is possible to expand knowledge about an agent by employing a task/game logic called computability logic (CL) [6, 7], a powerful logic which is built around the notion of success/failure.", "startOffset": 113, "endOffset": 119}, {"referenceID": 3, "context": "We argue that a reasonable, high-level translation of the tasks can be achieved via computability logic(CL)[5, 6].", "startOffset": 107, "endOffset": 113}, {"referenceID": 4, "context": "We argue that a reasonable, high-level translation of the tasks can be achieved via computability logic(CL)[5, 6].", "startOffset": 107, "endOffset": 113}, {"referenceID": 4, "context": "We point the reader to [6, 7] to find out more about the whole calculus of CL.", "startOffset": 23, "endOffset": 29}, {"referenceID": 5, "context": "We point the reader to [6, 7] to find out more about the whole calculus of CL.", "startOffset": 23, "endOffset": 29}, {"referenceID": 9, "context": "We will present an operational semantics for this language based on [11].", "startOffset": 68, "endOffset": 72}, {"referenceID": 7, "context": "We point the reader to [9, 10, 11] for more examples.", "startOffset": 23, "endOffset": 34}, {"referenceID": 8, "context": "We point the reader to [9, 10, 11] for more examples.", "startOffset": 23, "endOffset": 34}, {"referenceID": 9, "context": "We point the reader to [9, 10, 11] for more examples.", "startOffset": 23, "endOffset": 34}, {"referenceID": 0, "context": "Hence it is important to realize this CL interpreter in an efficient way, taking advantages of some techniques discussed in [1, 2, 4].", "startOffset": 124, "endOffset": 133}, {"referenceID": 1, "context": "Hence it is important to realize this CL interpreter in an efficient way, taking advantages of some techniques discussed in [1, 2, 4].", "startOffset": 124, "endOffset": 133}, {"referenceID": 2, "context": "Hence it is important to realize this CL interpreter in an efficient way, taking advantages of some techniques discussed in [1, 2, 4].", "startOffset": 124, "endOffset": 133}], "year": 2013, "abstractText": "Knowledge Representation (KR) is traditionally based on the logic of facts, expressed in boolean logic. However, facts about an agent can also be seen as a set of accomplished tasks by the agent. This paper proposes a new approach to KR: the notion of task logical KR based on Computability Logic. This notion allows the user to represent both accomplished tasks and accomplishable tasks by the agent. This notion allows us to build sophisticated KRs about many interesting agents, which have not been supported by previous logical languages.", "creator": "LaTeX with hyperref package"}}}