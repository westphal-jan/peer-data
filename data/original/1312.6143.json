{"id": "1312.6143", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Dec-2013", "title": "A System for Interactive Query Answering with Answer Set Programming", "abstract": "Reactive answer set programming has paved the way for incorporating online information into operative solving processes. Although this technology was originally devised for dealing with data streams in dynamic environments, like assisted living and cognitive robotics, it can likewise be used to incorporate facts, rules, or queries provided by a user. As a result, we present the design and implementation of a system for interactive query answering with reactive answer set programming. Our system quontroller is based on the reactive solver oclingo and implemented as a dedicated front-end. We describe its functionality and implementation, and we illustrate its features by some selected use cases.", "histories": [["v1", "Fri, 20 Dec 2013 21:24:30 GMT  (10kb,D)", "http://arxiv.org/abs/1312.6143v1", "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey"]], "COMMENTS": "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["martin gebser", "philipp obermeier", "torsten schaub"], "accepted": false, "id": "1312.6143"}, "pdf": {"name": "1312.6143.pdf", "metadata": {"source": "CRF", "title": "A System for Interactive Query Answering with Answer Set Programming", "authors": ["Martin Gebser", "Philipp Obermeier", "Torsten Schaub"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Traditional logic programming [1,2] is based upon query answering. Unlike this, logic programs under the stable model semantics [3] are implemented by model generation based systems, viz. answer set solvers [4]. Although the latter also allows for checking whether a query is entailed by some stable model, there is so far no way to explore a domain at hand by posing consecutive queries without relaunching the solver. The same applies to the interactive addition and/or deletion of temporary program parts that come in handy during theory exploration, for instance, when dealing with hypotheses.\nAn exemplary area where such exploration capacities would be of great benefit is bio-informatics (cf. [5,6,7,8,9,10]). Here, we usually encounter problems with large amounts of data, resulting in runs having substantial grounding and solving times. Furthermore, problems are often under-constrained, thus yielding numerous alternative solutions. In such a setting, it would be highly beneficial to explore a domain via successive queries and/or under certain hypotheses. For instance, for determining nutritional requirements for sustaining maintenance or growth of an organism, it is important to indicate seed compounds needed for the synthesis of other compounds. Now, rather than continuously analyzing several thousand stable models (or their intersection or union), a biologist may rather perform interactive \u201cin-silico\u201d experiments by temporarily adding compounds and subsequently exploring the resulting models by posing successive queries.\nWe address this shortcoming and show how recently developed systems for reactive answer set programming (ASP) [11,12] can be harnessed to provide query answering ? Affiliated with the School of Computing Science at Simon Fraser University, Burnaby, Canada,\nand the Institute for Integrated and Intelligent Systems at Griffith University, Brisbane, Australia.\nar X\niv :1\n31 2.\n61 43\nv1 [\ncs .A\nI] 2\n0 D\nec 2\n01 3\nand theory exploration capacities. In fact, reactive ASP was conceived for incorporating online information into operative ASP solving processes. Although this technology was originally devised for dealing with data streams in dynamic environments, like assisted living and cognitive robotics, it can likewise be used to incorporate facts, rules, or queries provided by a user. As a result, we present the design and implementation of a system for interactive query answering and theory exploration with ASP. Our system quontroller1 is based on the reactive answer set solver oclingo and implemented as a dedicated front-end. We describe its functionality and implementation, and we illustrate its features on a running example."}, {"heading": "2 Approach", "text": "In order to provide dedicated support for query answering, the quontroller encapsulates oclingo along with its basic front-end for entering online progressions. The basic idea is to condition the stable models of an underlying logic program via query programs, temporarily asserting atoms to be contained in stable models of interest. For circumventing restrictions due to the modularity requirement of reactive ASP (cf. [11,12]) and enabling repeated assertions of an atom in a series of queries, the quontroller associates query programs with sequence numbers and exploits oclingo\u2019s step counter to automatically map their contents. In the following, we detail this idea on the well-known example of n-coloring.\nTo begin with, Listing 1 provides an ASP encoding of n-coloring. The encoding applies to graphs represented by facts over predicate edge/2. Given such facts, the nodes of the graph are extracted in Line 6\u20137, each node is marked with exactly one of n colors in Line 10, and Line 11 forbids that connected nodes are marked with the same color. In Line 14\u201315, stable models are projected onto atoms over predicate mark/2.\nUnlike with one-shot ASP solving, we do not combine the encoding in Listing 1 with fixed facts, but rather aim at a selective addition as well as withdrawal of atoms over edge/2. In order to prepare reactive ASP rules for this purpose, the instructions in Listing 2 can be fed into the quontroller. They are then mapped to the language of oclingo as shown in Listing 3. The resulting reactive ASP rules are divided into a static #base part (Line 1\u201313), a stepwise #cumulative part (Line 15\u201325), and a stepwise #volatile part (Line 27\u201334). The stepwise parts are instantiated for successive step numbers replacing the constant t, where instances of #cumulative rules are gathered over steps and #volatile ones are discarded when progressing to the next step.\nIn more detail, the #domain instructions in Line 2 and 3 of Listing 2 are mapped to the static rules in Line 4 and 7 of Listing 3. They define the (quontroller-internal) predicates _domain_edge/2 and _domain_mark/2, which provide the domains of instances of edge/2 and mark/2 that can be asserted by query programs. In particular, the rule in Line 4 expresses that edges may connect distinct nodes with labels running from 1 to 4, and the rule in Line 7 declares that each node can be marked with the colors provided by color/1. Furthermore, the instruction in Line 4 of Listing 2 is mapped to the static choice rule in Line 10 of Listing 3. This rule compensates for the lack of facts over\n1 To be pronounced \u2018cointreau\u2019-ler; URL: potassco.sourceforge.net/labs.html.\n1 % n colors 2 #const n = 3. 3 color(1..n).\n5 % extract nodes from edges 6 node(X) :- edge(X,_). 7 node(X) :- edge(_,X).\n9 % generate n-coloring 10 1 { mark(X,C) : color(C) } 1 :- node(X). 11 :- edge(X,Y), mark(X;Y,C).\n13 % display n-coloring 14 #hide. 15 #show mark/2.\nListing 1: ASP encoding of n-coloring (encoding.lp)\n1 #setup. 2 #domain edge(X,Y) : X := 1..4, Y := 1..4, X != Y. 3 #domain mark(X,C) : X := 1..4, color(C). 4 #choose edge/2. 5 #define edge/2. 6 #query mark/2. 7 #show edge/2. 8 #endsetup.\nListing 2: quontroller setup instructions (setup.ini)\nedge/2 and allows for instantiating the original encoding in Listing 1 relative to the domain given by _domain_edge/2. Again relying on _domain_edge/2, the instruction in Line 7 of Listing 2 is mapped to the #show statement in Line 13 of Listing 3 for including atoms over edge/2 (in addition to those over mark/2) in output projections.\nThe #cumulative and #volatile parts in Listing 3 deal with the instructions in Line 5 and 6 of Listing 2. In particular, the #external statements in Line 18 and 23 of Listing 3 declare (quontroller-internal) instances of _assert_mark(X1,X2,t) and _assert_edge(X1,X2,t) as potential online inputs from query programs, where X1 and X2 are instantiated relative to domains given by static rules and the constant t is added as an argument to distinguish separate queries. The rules in Line 19\u201320 and 24\u201325 of Listing 3 further define the (quontroller-internal) predicates _derive_mark/3 and _derive_edge/3 for indicating \u201cactive\u201d assertions from query programs. Given that such assertions may remain active over several queries, the rules defining _derive_mark/3 and _derive_edge/3 include one case for reflecting current assertions (Line 19 and 24) and another for passing on former assertions (Line 20 and 25). As a consequence, instances of _derive_mark(X1,X2,t) and _derive_edge(X1,X2,t) capture active assertions regarding the original predicates\n1 #base.\n3 % #domain edge(X,Y) : X := 1..4, Y := 1..4, X != Y. 4 _domain_edge(X,Y) :- X := 1..4, Y := 1..4, X != Y.\n6 % #domain mark(X,C) : X := 1..4, color(C). 7 _domain_mark(X,C) :- X := 1..4, color(C).\n9 % #choose edge/2. 10 { edge(X1,X2) : _domain_edge(X1,X2) }.\n12 % #show edge/2. 13 #show edge(X1,X2) : _domain_edge(X1,X2).\n15 #cumulative t.\n17 % #query mark/2. 18 #external _assert_mark(X1,X2,t) : _domain_mark(X1,X2). 19 _derive_mark(X1,X2,t) :- _domain_mark(X1,X2), _assert_mark(X1,X2,t). 20 _derive_mark(X1,X2,t) :- _domain_mark(X1,X2), _derive_mark(X1,X2,t-1).\n22 % #define edge/2. 23 #external _assert_edge(X1,X2,t) : _domain_edge(X1,X2). 24 _derive_edge(X1,X2,t) :- _domain_edge(X1,X2), _assert_edge(X1,X2,t). 25 _derive_edge(X1,X2,t) :- _domain_edge(X1,X2), _derive_edge(X1,X2,t-1).\n27 #volatile t.\n29 % #query mark/2. 30 :- _domain_mark(X1,X2), _derive_mark(X1,X2,t), not mark(X1,X2).\n32 % #define edge/2. 33 :- _domain_edge(X1,X2), _derive_edge(X1,X2,t), not edge(X1,X2). 34 :- _domain_edge(X1,X2), edge(X1,X2), not _derive_edge(X1,X2,t).\nListing 3: Mapping of quontroller setup instructions in setup.ini to reactive ASP rules\nmark/2 and edge/2, and corresponding matches are established via #volatile integrity constraints. For one, the #query instruction in Line 6 of Listing 2 is mapped to the integrity constraint in Line 30 of Listing 3, thus requiring mark(X1,X2) to hold at any step where _derive_mark(X1,X2,t) indicates an active assertion, and the analogous integrity constraint in Line 33 is obtained in view of the #define instruction in Line 5 of Listing 2. The latter is complemented by another integrity constraint in Line 34, denying edge(X1,X2) to hold when _derive_edge(X1,X2,t) does not indicate any active assertion. That is, a #query instruction expresses that assertions may require atoms to belong to stable models of interest, and a #define instruction is stronger by additionally claiming some active assertion for atoms to hold.\nAfter launching oclingo with the encoding in Listing 1 and the reactive ASP rules in Listing 3 (via \u2018quontroller.py -o encoding.lp -c setup.ini\u2019), the quontroller is ready to process query programs provided by a user. An exemplary stream of query programs is shown in Figure 1(a), and Figure 1(b) provides its counterpart in the syntax of oclingo\u2019s basic front-end. In fact, the quontroller maps query programs to available stream constructs and automatically performs replacements for interacting with reactive ASP rules. To begin with, the keywords \u2018#query.\u2019 and \u2018#endquery.\u2019, which encapsulate individual query programs, are mapped to \u2018#step q : 0. #forget q-1.\u2019 and \u2018#endstep.\u2019, where q is the sequence number\nof a query program and the #forget directive enables simplifications of reactive ASP rules for yet undefined #external atoms introduced at step q-1. Also note that \u2018: 0\u2019 in #step directives tells oclingo not to increment the step counter on unsatisfiability.\nEach query program may include labeled assertions, as declared via \u2018#assert : e(1).\u2019 in Line 2 of Figure 1(a) and 1(b). Such a construct expresses that subsequently provided rules remain active until the labeled assertion is explicitly retracted. In view of its reactive ASP rules, the quontroller however replaces each head atom p(...) of a rule (or fact) to assert by its internal representation _assert_p(...,q), where q is again the sequence number of the query program at hand. For instance, \u2018edge(1,2).\u2019 is mapped to \u2018_assert_edge(1,2,1).\u2019 in Line 3 of Figure 1(a) and 1(b). By means of reactive ASP rules capturing the #define\ninstruction in Line 5 of Listing 2, the instances of _assert_edge/3 provided by facts in Line 3\u20137 of Figure 1(b) are matched with the original atoms over edge/2. As a consequence, the first query program yields six stable models, in which the unconnected nodes 1 and 4 share one of the colors 1, 2, or 3 and the nodes 2 and 3 are marked with distinct remaining colors.\nThe second query program in Line 10\u201313 of Figure 1(a) includes \u2018mark(1,1).\u2019 as an unlabeled assertion, indicated by the keyword \u2018#assert.\u2019 The latter is mapped to the stream construct \u2018#volatile : 1.\u2019 (cf. Line 11 of Figure 1(b)), meaning that the internal representation \u2018_assert_mark(1,1,2).\u2019 of the assertion expires \u201cautomatically\u201d in the next step. Technically, such expiration is implemented by adding assumption literals to the bodies of transient rules, i.e. \u2018_assert_mark(1,1,2).\u2019 is internally turned into \u2018_assert_mark(1,1,2) :- _expire(3).\u2019 and _expire(3) holds up to step 3 where it is then permanently falsified. However, in the second step, the assertion of color 1 for node 1 leads to two stable models of interest among the six obtained in the first step. Also note that the quontroller language includes \u2018#assert.\u2019 in order to indicate the beginning of query parts in which head atoms are replaced by internal representations, so that any rules to be left untouched can still be provided beforehand.\nSummarizing the remaining query programs, the labeled assertion e(2) in the third query program turns the graph represented by atoms over edge/2 into a clique of four nodes, so that no stable model is obtained in the third step. Hence, e(2) is retracted in the fourth step (by discharging an assumption literal associated with e(2)), and the additional unlabeled assertion of colors for the nodes 1 and 2 leads to a single stable model of interest. Note that \u2018mark(1,1).\u2019 is turned into \u2018_assert_mark(1,1,4).\u2019 in Line 23 of Figure 1(b), while \u2018_assert_mark(1,1,2).\u2019 has been used in Line 12. The rewriting by the quontroller thus avoids a clash with oclingo\u2019s modularity requirement and enables repeated assertions of the \u201csame\u201d atom (in separate query programs). Finally, the empty (projection of a) stable model is obtained after retracting all instances of _assert_edge/3 in the last query program, and \u2018#stop.\u2019 afterwards signals the end of the query stream to the quontroller."}, {"heading": "3 Discussion", "text": "We presented a simple yet effective extension of reactive ASP that allows for interactive query answering and theory exploration with ASP. This was accomplished by means of a mapping scheme between queries and reactive ASP rules along with the assumptionbased solving capacities of oclingo. With it, programs can be temporarily added to the solving process, either for an initially limited number of interactions or until they are interactively withdrawn again. A typical use case of limited program parts are integrity constraints, representing queries automatically vanishing after having been posed. Unlike this, an assertion allows, for instance, for exploring the underlying domain under user-defined hypotheses. All subsequent solving processes then include the asserted information until it is retracted by the user. The possibility of reusing ground rules as well as recorded conflict information over a sequence of queries distinguishes reactive ASP from ordinary one-shot reasoning methods. As future work, we want to study the performance of query answering with the quontroller on challenging benchmark problems.\nAcknowledgments This work was partially funded by DFG grant SCHA 550/9-1. We are grateful to the anonymous reviewers for their suggestions."}], "references": [{"title": "Programming in Prolog", "author": ["W. Clocksin", "C. Mellish"], "venue": "Springer", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1981}, {"title": "Foundations of Logic Programming", "author": ["J. Lloyd"], "venue": "Springer", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1987}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Proc. ICLP, MIT", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1988}, {"title": "Answer Set Solving in Practice", "author": ["M. Gebser", "R. Kaminski", "B. Kaufmann", "T. Schaub"], "venue": "Morgan and Claypool", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2012}, {"title": "A knowledge based approach for representing and reasoning about signaling networks", "author": ["C. Baral", "K. Chancellor", "N. Tran", "N. Tran", "A. Joy", "M. Berens"], "venue": "Proc. ISMB,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2004}, {"title": "Efficient haplotype inference with answer set programming", "author": ["E. Erdem", "F. T\u00fcre"], "venue": "Proc. AAAI, AAAI", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2008}, {"title": "Detecting inconsistencies in large biological networks with answer set programming", "author": ["M. Gebser", "T. Schaub", "S. Thiele", "P. Veber"], "venue": "TPLP Journal 11(2-3)", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Repair and prediction (under inconsistency) in large biological networks with answer set programming", "author": ["M. Gebser", "C. Guziolowski", "M. Ivanchev", "T. Schaub", "A. Siegel", "S. Thiele", "P. Veber"], "venue": "Proc. KR, AAAI", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2010}, {"title": "Logic-based steady-state analysis and revision of metabolic networks with inhibition", "author": ["O. Ray", "K. Whelan", "R. King"], "venue": "Proc. CISIS, IEEE", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2010}, {"title": "Revisiting the training of logic models of protein signaling networks with ASP", "author": ["S. Videla", "C. Guziolowski", "F. Eduati", "S. Thiele", "N. Grabe", "J. Saez-Rodriguez", "A. Siegel"], "venue": "Proc. CMSB, Springer", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Reactive answer set programming", "author": ["M. Gebser", "T. Grote", "R. Kaminski", "T. Schaub"], "venue": "Proc. LPNMR, Springer", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2011}, {"title": "Stream reasoning with answer set programming: Preliminary report", "author": ["M. Gebser", "T. Grote", "R. Kaminski", "P. Obermeier", "O. Sabuncu", "T. Schaub"], "venue": "Proc. KR, AAAI", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2012}], "referenceMentions": [{"referenceID": 0, "context": "Traditional logic programming [1,2] is based upon query answering.", "startOffset": 30, "endOffset": 35}, {"referenceID": 1, "context": "Traditional logic programming [1,2] is based upon query answering.", "startOffset": 30, "endOffset": 35}, {"referenceID": 2, "context": "Unlike this, logic programs under the stable model semantics [3] are implemented by model generation based systems, viz.", "startOffset": 61, "endOffset": 64}, {"referenceID": 3, "context": "answer set solvers [4].", "startOffset": 19, "endOffset": 22}, {"referenceID": 4, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 5, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 6, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 7, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 8, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 9, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 10, "context": "We address this shortcoming and show how recently developed systems for reactive answer set programming (ASP) [11,12] can be harnessed to provide query answering", "startOffset": 110, "endOffset": 117}, {"referenceID": 11, "context": "We address this shortcoming and show how recently developed systems for reactive answer set programming (ASP) [11,12] can be harnessed to provide query answering", "startOffset": 110, "endOffset": 117}, {"referenceID": 10, "context": "[11,12]) and enabling repeated assertions of an atom in a series of queries, the quontroller associates query programs with sequence numbers and exploits oclingo\u2019s step counter to automatically map their contents.", "startOffset": 0, "endOffset": 7}, {"referenceID": 11, "context": "[11,12]) and enabling repeated assertions of an atom in a series of queries, the quontroller associates query programs with sequence numbers and exploits oclingo\u2019s step counter to automatically map their contents.", "startOffset": 0, "endOffset": 7}], "year": 2017, "abstractText": "Reactive answer set programming has paved the way for incorporating online information into operative solving processes. Although this technology was originally devised for dealing with data streams in dynamic environments, like assisted living and cognitive robotics, it can likewise be used to incorporate facts, rules, or queries provided by a user. As a result, we present the design and implementation of a system for interactive query answering with reactive answer set programming. Our system quontroller is based on the reactive solver oclingo and implemented as a dedicated front-end. We describe its functionality and implementation, and we illustrate its features by some selected use cases.", "creator": "LaTeX with hyperref package"}}}