{"id": "1401.2474", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-Jan-2014", "title": "Transformation-based Feature Computation for Algorithm Portfolios", "abstract": "Instance-specific algorithm configuration and algorithm portfolios have been shown to offer significant improvements over single algorithm approaches in a variety of application domains. In the SAT and CSP domains algorithm portfolios have consistently dominated the main competitions in these fields for the past five years. For a portfolio approach to be effective there are two crucial conditions that must be met. First, there needs to be a collection of complementary solvers with which to make a portfolio. Second, there must be a collection of problem features that can accurately identify structural differences between instances. This paper focuses on the latter issue: feature representation, because, unlike SAT, not every problem has well-studied features. We employ the well-known SATzilla feature set, but compute alternative sets on different SAT encodings of CSPs. We show that regardless of what encoding is used to convert the instances, adequate structural information is maintained to differentiate between problem instances, and that this can be exploited to make an effective portfolio-based CSP solver.", "histories": [["v1", "Fri, 10 Jan 2014 22:05:39 GMT  (25kb)", "http://arxiv.org/abs/1401.2474v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["barry hurley", "serdar kadioglu", "yuri malitsky", "barry o'sullivan"], "accepted": false, "id": "1401.2474"}, "pdf": {"name": "1401.2474.pdf", "metadata": {"source": "CRF", "title": "Transformation-based Feature Computation for Algorithm Portfolios", "authors": ["Barry Hurley", "Serdar Kadioglu", "Yuri Malitsky", "Barry O\u2019Sullivan"], "emails": ["b.hurley@4c.ucc.ie,", "y.malitsky@4c.ucc.ie,", "b.osullivan@cs.ucc.ie", "serdark@cs.brown.edu"], "sections": [{"heading": null, "text": "ar X\niv :1\n40 1.\n24 74\nv1 [\ncs .A\nI] 1\n0 Ja"}, {"heading": "1 Introduction", "text": "Significant strides have recently been made in the application of portfolio-based algorithms in the fields of constraint satisfaction [15], quantified boolean formulae [17], and most notably in sat [23,6]. Having a collection of solvers, these approaches compute a set of representative features about a problem instance and then use this information to decide what is the most effective solver to employ. These decisions can be made based on regression techniques [23], in which a classifier is trained to predict expected runtime of each solver and choosing the one with best predicted performance. Alternatively, a ranking algorithm can be trained to directly predict the best solver for each instance [5]. The features can also be used for clustering [7], where the best solver is chosen for each cluster of instances. In practice, regardless of the approach, portfolio algorithms have been shown to be dramatically better than using a single solver.\nAlgorithm portfolios also rely on a good set of features to describe the problem instance being solved. This can be seen as a major drawback since one needs\nto use specific features for each problem at hand, or worse, has to come up with a set of features if none exists. If there are not enough informative features present, it is impossible to train a classifier to differentiate between classes of instances. On the other hand, if there are too many features it is possible to over fit the classifier to the training data. Furthermore, a large feature set is likely to have noisy features, which could be detrimental to the quality of the learned classifier. In the sat domain, the features used by the solvers dominating the competitions have been thoroughly analyzed and studied over the last decade. Unfortunately, many other fields do not have such well established feature set. Even in the case of constraint satisfaction problems, where a feature set has been proposed, careful filtering can dramatically improve the quality of portfolios [9].\nHowever, while there might not be an existing feature set, for NP-complete problems there exist polynomial-time transformations to any other NP-complete problem. In this paper we propose to take advantage of this by transforming csp instances to sat as a pre-processing step before computing its features. We show that such a transformation retains the necessary information needed to differentiate the classes of instances. In particular we show the effectiveness of this approach on constraint satisfaction problems. We choose the csp domain for two reasons. First, it has a large number of solvers that can be used to make a diversified portfolio. Second, because a feature set exists for csps, we can compare the quality of a portfolio trained on sat features to the domain specific csp features.\nThere has been a lot of work exploring the effect of transforming csp instances into sat. Perhaps the most relevant work is by Ans\u00f3tegui and Many\u00e0 which evaluated the performance of sat solvers on six sat-encodings on graph colouring, random binary csps, pigeon hole, and all interval series problems [1]. Solvers such as sugar [19], azucar [20], and CSP4SAT4J [11] have similarly tackled csp problems by encoding them into sat and then solving them with a predefined sat solver. However, as far as we are aware, this paper represents the first time that a portfolio has been created using features gained after transforming a problem from one domain to another."}, {"heading": "2 Encodings", "text": "There are a number of known polynomial-time transformations, or encodings, from constraint satisfaction problems to sat [16]. In this paper we focus on three commonly used encodings: the direct, order and support encodings."}, {"heading": "2.1 Direct Encoding", "text": "In the direct encoding [22] for each csp variable X , with domain {1, . . . , d}, a sat variable is created for each domain value, i.e. x1, x2, . . . , xd. If x1 is true in the resulting sat formula, then the csp variable X is assigned the value 1 in the csp solution. Therefore, in order to represent a solution to the csp exactly\none of x1, x2, . . . , xd must be assigned true. We add an at-least-one clause and at-most-one clauses to the sat formula for each csp variable X :\n(x1 \u2228 x2 \u2228 . . . \u2228 xd) \u2200v, w \u2208 D(X) : (\u00acxv \u2228 \u00acxw)\nAt Least One At Most One\nConstraints between csp variables are represented in the direct encoding by enumerating the conflicting tuples. For a binary constraint between the pair of variables X and Y , if the tuple \u3008X = v, Y = w\u3009 is forbidden, then we add the conflict clause (\u00acxv \u2228 \u00acyw)."}, {"heading": "2.2 Support Encoding", "text": "The support encoding [8,3] uses the same mechanism as the direct encoding to translate a csp variable\u2019s domain into sat. However, the support encoding differs on how the constraints between variables are encoded. Given a constraint between two variablesX and Y , for each value v in the domain ofX , let SY,X=v \u2282 D(Y ) be the subset of the values in the domain of Y which are consistent with assigning X = v. Either xv is false or one of the consistent assignments from y1 . . . yd must be true, represented by the clause:\n\u00acxv \u2228\n\n\n\u2228\ni\u2208SY,X=v\nyi\n\n\nThis must be repeated by adding clauses for each value in the domain of Y and listing the values in X which are consistent with each assignment."}, {"heading": "2.3 Order Encoding", "text": "Unlike the direct and support encoding which model X = v as a sat variable, the order encoding creates sat variables to represent X \u2264 v. If X is less than or equal to v, then X must also be less than or equal to v + 1. To enforce this across the domain we add the clauses:\n\u2200d\u22121v : (\u00acx\u2264v \u2228 x\u2264v+1)\nThe order encoding is naturally suited to modelling inequality constraints. To state X \u2264 3, we would just post the unit clause (x\u22643). If we want to model the constraint X = v, we could rewrite it as (X \u2264 v \u2227X \u2265 v). X \u2265 v can then be rewritten as \u00acX \u2264 (v \u2212 1). To state that X = v under the order encoding, we would encode (x\u2264v \u2227\u00acx\u2264v\u22121). A conflicting tuple between two variables, for example \u3008X = v, Y = w\u3009 can be written in propositional logic and simplified to a cnf clause using De Morgan\u2019s Law:\n\u00ac((x\u2264v \u2227 x\u2265v) \u2227 (y\u2264w \u2227 y\u2265w))\n\u00ac((x\u2264v \u2227 \u00acx\u2264v\u22121) \u2227 (y\u2264w \u2227 \u00acy\u2264w\u22121))\n\u00ac(x\u2264v \u2227 \u00acx\u2264v\u22121) \u2228 \u00ac(y\u2264w \u2227 \u00acy\u2264w\u22121)\n(\u00acx\u2264v \u2228 x\u2264v\u22121 \u2228 \u00acy\u2264w \u2228 y\u2264w\u22121)"}, {"heading": "3 Feature Computation", "text": "In addition to the pure direct, support and order encodings discussed in the previous section, we also consider variants of these encodings in which the clauses that encode the domains of the variables are not included. We omit the domains in order to test whether focusing only on the constraints present in a csp is enough to differentiate the instances. We now briefly describe the features used for CSP and SAT.\nCSP Features. We compute features for each of the original csp instances, plus for each of the six encodings. We record 36 features directly from the csp instance using mistral [4]. This includes static features such as statistics about the types of constraints used, average and maximum domain size; and dynamic statistics recorded by running mistral for 2 seconds: average and standard deviation of variable weights, number of nodes, number of propagations and a few others.\nSAT Features. We use the 54 features computed using the newest feature computation tool from UBC [13]. These features include problem size features, graphbased features, balance features, proximity to horn formula features, DPLL probing features, and local search probing features."}, {"heading": "4 Numerical Results", "text": "We implemented a tool to translate a csp instance specified in XCSP format [18] into sat (cnf). At present, it is capable of encoding inequality and binary extensional constraints using the direct, support and order encoding.\nBenchmarks. For our evaluation, we consider csp problem instances from the csp solver competition.1 Of these, we consider the instances that contain either inequality or binary extensional constraints. This presents a pool of 2,433 instances, containing Graph Colouring, Random, Quasi-random, Black Hole, Quasi-group Completion, Quasi-group With Holes, Langford, Towers of Hanoi and Pigeon Hole problems.\nPortfolio Approach. To train our portfolios we used the ISAC methodology [7] which has been shown to work better than a regression based approaches [14]. ISAC uses the computed features to cluster the instances. Then for each cluster, the best solver in the portfolio is selected. When a new instance needs to be solved, its features are computed, it is assigned to the nearest cluster, and subsequently solved using the appropriate solver.\nFor our csp solver portfolio we used: abscon [12], csp4j [11], sat4j [10], pcs [21], gecode [2], and sugar [19]. Each instance was run for 3,600 seconds. It is important to note that we include the time required for encoding the instances and computing the features as part of the computation time.\n1 csp solver competition instances http://www.cril.univ-artois.fr/~lecoutre/benchmarks.html\nWe perform our experiments using stratified 10-fold cross validation. In Table 1, we present the performance for both the number of solved instances and the penalized runtime average PAR 10 which counts each time-out as taking 10 times the time-out to complete for each problem representation. The SAT encodings without the variable domains are marked with ND. We compare the portfolio performance to the best single solver as well as to the oracle Virtual Best Solver (VBS) which for every instance always selects the fastest solver. As we can see, using a portfolio approach for csp instances is always preferable to just choosing to run a single solver. We also compare to a random clustering approach, which randomly groups the instances of the test set into the same number of clusters as the portfolio method and finds the best solver to run on each group. Note that the random clustering is trained on the same data it is evaluated on, and further that in practice one would not know to which cluster to assign a new instance. The random clustering approach is included to show that the clusters found by ISAC are indeed capturing important information about the instances. We observe this because in all cases Portfolio is better than the Random Clustering approach.\nTable 1 also shows that regardless of the encoding we use, we can always close at least 50% of the performance gap between the best single solver and the virtual best one. Furthermore, we see that if we use particularly accurate encoding, which in our case is the support encoding without domain clauses, we can even achieve slightly better performance than using features that have been specifically designed for the problem domain."}, {"heading": "5 Conclusion", "text": "In this paper we show that it is possible to encode an instance from one problem domain to another as a preprocessing step for feature computation. In particular, we show that even with the overhead of converting csp instances to sat, a csp portfolio trained on well established sat features can perform just as well as if it was trained on csp specific features. These findings show that encoding techniques can retain enough information about the original instance to accurately differentiate different classes of instances. Our results serves as a proof of concept for an automated feature generation approach for NP-complete problems that do not have a well studied feature vector. We consider this as a step toward problem independent feature computation for algorithm portfolios, and we plan to analyze it further and extend its applications in the future."}, {"heading": "Acknowledgements", "text": "The second author was supported by Paris Kanellakis fellowship at Brown University when conducting the work contained in this document. This document reflects his opinions only and should not be interpreted, either expressed or implied, as those of his current employer."}], "references": [{"title": "Mapping Problems with Finite-Domain Variables into Problems with Boolean Variables", "author": ["C. Ans\u00f3tegui", "F. Many\u00e0"], "venue": "The 7th International Conference on Theory and Applications of Satisfiability Testing, SAT 2004", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2004}, {"title": "Arc Consistency in SAT", "author": ["I.P. Gent"], "venue": "Proceedings of the 15th European Conference on Artificial Intelligence, ECAI\u20192002. pp. 121\u2013125", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2002}, {"title": "Mistral,a Constraint Satisfaction Library", "author": ["E. Hebrard"], "venue": "Proceedings of the Third International CSP Solver Competition", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2009}, {"title": "Adaptation in a CBR-Based Solver Portfolio for the Satisfiability Problem", "author": ["B. Hurley", "B. O\u2019Sullivan"], "venue": "Case-Based Reasoning Research and Development - 20th International Conference, ICCBR 2012. pp. 152\u2013166", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2012}, {"title": "Algorithm Selection and Scheduling", "author": ["S. Kadioglu", "Y. Malitsky", "A. Sabharwal", "H. Samulowitz", "M. Sellmann"], "venue": "Proceedings of the 17th International Conference on Principles and Practice of Constraint Programming. pp. 454\u2013469. CP\u201911, Springer-Verlag, Berlin, Heidelberg", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2011}, {"title": "ISAC - Instance-Specific Algorithm Configuration", "author": ["S. Kadioglu", "Y. Malitsky", "M. Sellmann", "K. Tierney"], "venue": "Coelho, H., Studer, R., Wooldridge, M. (eds.) ECAI. Frontiers in Artificial Intelligence and Applications, vol. 215, pp. 751\u2013756. IOS Press", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2010}, {"title": "On the Parallel Complexity of Discrete Relaxation in Constraint Satisfaction Networks", "author": ["S. Kasif"], "venue": "Artificial Intelligence 45(3), 275\u2013286", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1990}, {"title": "Feature filtering for instance-specific algorithm configuration", "author": ["C. Kroer", "Y. Malitsky"], "venue": "IEEE 23rd International Conference on Tools with Artificial Intelligence, ICTAI 2011. pp. 849\u2013855", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2011}, {"title": "The sat4j library, release 2.2 system description", "author": ["D. Le Berre", "A. Parrain"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2010}, {"title": "CSP2SAT4J: A Simple CSP to SAT Translator", "author": ["D. Le Berre", "I. Lynce"], "venue": "Proceedings of the 2nd International CSP Solver Competition", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2008}, {"title": "Abscon 112, Toward more Robustness", "author": ["C. Lecoutre", "S. Tabary"], "venue": "Proceedings of the Third International CSP Solver Competition", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2009}, {"title": "Features for SAT (2012), http://www.cs.ubc.ca/labs/beta/Projects/SATzilla/Report_SAT_features.pdf", "author": ["Lin Xu", "H.H. Frank Hutter", "K. Leyton-Brown"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2012}, {"title": "Non-modelbased algorithm portfolios for sat", "author": ["Y. Malitsky", "A. Sabharwal", "H. Samulowitz", "M. Sellmann"], "venue": "Proceedings of the 14th international conference on Theory and application of satisfiability testing. pp. 369\u2013370", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2011}, {"title": "Using Casebased Reasoning in an Algorithm Portfolio for Constraint Solving", "author": ["E. O\u2019Mahony", "E. Hebrard", "A. Holland", "C. Nugent", "B. O\u2019Sullivan"], "venue": "Proceeding of the 19th Irish Conference on Artificial Intelligence and Cognitive Science", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2008}, {"title": "CNF Encodings", "author": ["S.D. Prestwich"], "venue": "Handbook of Satisfiability, pp. 75\u201397. IOS Press", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2009}, {"title": "A multi-engine solver for quantified boolean formulas", "author": ["L. Pulina", "A. Tacchella"], "venue": "Proceedings of the 13th international conference on Principles and practice of constraint programming. pp. 574\u2013589. CP\u201907, Springer-Verlag, Berlin, Heidelberg", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2007}, {"title": "XML Representation of Constraint Networks: Format XCSP", "author": ["O. Roussel", "C. Lecoutre"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2009}, {"title": "System Description of a SAT-based CSP Solver Sugar", "author": ["N. Tamura", "T. Tanjo", "M. Banbara"], "venue": "Proceedings of the 3rd International CSP Solver Competition. pp. 71\u201375", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2009}, {"title": "Azucar: A SAT-Based CSP Solver Using Compact Order Encoding \u2014 (Tool Presentation)", "author": ["T. Tanjo", "N. Tamura", "M. Banbara"], "venue": "Proceedings of the 15th International Conference on Theory and Applications of Satisfiability Testing (SAT 2012), LNCS 7317. pp. 456\u2013462. Springer", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}, {"title": "A Proof-Producing CSP Solver", "author": ["M. Veksler", "O. Strichman"], "venue": "Proceedings of the Twenty-Fourth AAAI Conference on Artificial Intelligence, AAAI 2010", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2010}, {"title": "SAT v CSP", "author": ["T. Walsh"], "venue": "Principles and Practice of Constraint Programming \u2014 CP 2000, LNCS 1894. vol. 1894, pp. 441\u2013456. Springer-Verlag", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2000}, {"title": "SATzilla: Portfolio-based Algorithm Selection for SAT", "author": ["L. Xu", "F. Hutter", "H.H. Hoos", "K. Leyton-Brown"], "venue": "Journal of Artificial Intelligence Research pp. 565\u2013606", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [{"referenceID": 13, "context": "Significant strides have recently been made in the application of portfolio-based algorithms in the fields of constraint satisfaction [15], quantified boolean formulae [17], and most notably in sat [23,6].", "startOffset": 134, "endOffset": 138}, {"referenceID": 15, "context": "Significant strides have recently been made in the application of portfolio-based algorithms in the fields of constraint satisfaction [15], quantified boolean formulae [17], and most notably in sat [23,6].", "startOffset": 168, "endOffset": 172}, {"referenceID": 21, "context": "Significant strides have recently been made in the application of portfolio-based algorithms in the fields of constraint satisfaction [15], quantified boolean formulae [17], and most notably in sat [23,6].", "startOffset": 198, "endOffset": 204}, {"referenceID": 4, "context": "Significant strides have recently been made in the application of portfolio-based algorithms in the fields of constraint satisfaction [15], quantified boolean formulae [17], and most notably in sat [23,6].", "startOffset": 198, "endOffset": 204}, {"referenceID": 21, "context": "These decisions can be made based on regression techniques [23], in which a classifier is trained to predict expected runtime of each solver and choosing the one with best predicted performance.", "startOffset": 59, "endOffset": 63}, {"referenceID": 3, "context": "Alternatively, a ranking algorithm can be trained to directly predict the best solver for each instance [5].", "startOffset": 104, "endOffset": 107}, {"referenceID": 5, "context": "The features can also be used for clustering [7], where the best solver is chosen for each cluster of instances.", "startOffset": 45, "endOffset": 48}, {"referenceID": 7, "context": "Even in the case of constraint satisfaction problems, where a feature set has been proposed, careful filtering can dramatically improve the quality of portfolios [9].", "startOffset": 162, "endOffset": 165}, {"referenceID": 0, "context": "Perhaps the most relevant work is by Ans\u00f3tegui and Many\u00e0 which evaluated the performance of sat solvers on six sat-encodings on graph colouring, random binary csps, pigeon hole, and all interval series problems [1].", "startOffset": 211, "endOffset": 214}, {"referenceID": 17, "context": "Solvers such as sugar [19], azucar [20], and CSP4SAT4J [11] have similarly tackled csp problems by encoding them into sat and then solving them with a predefined sat solver.", "startOffset": 22, "endOffset": 26}, {"referenceID": 18, "context": "Solvers such as sugar [19], azucar [20], and CSP4SAT4J [11] have similarly tackled csp problems by encoding them into sat and then solving them with a predefined sat solver.", "startOffset": 35, "endOffset": 39}, {"referenceID": 9, "context": "Solvers such as sugar [19], azucar [20], and CSP4SAT4J [11] have similarly tackled csp problems by encoding them into sat and then solving them with a predefined sat solver.", "startOffset": 55, "endOffset": 59}, {"referenceID": 14, "context": "There are a number of known polynomial-time transformations, or encodings, from constraint satisfaction problems to sat [16].", "startOffset": 120, "endOffset": 124}, {"referenceID": 20, "context": "In the direct encoding [22] for each csp variable X , with domain {1, .", "startOffset": 23, "endOffset": 27}, {"referenceID": 6, "context": "The support encoding [8,3] uses the same mechanism as the direct encoding to translate a csp variable\u2019s domain into sat.", "startOffset": 21, "endOffset": 26}, {"referenceID": 1, "context": "The support encoding [8,3] uses the same mechanism as the direct encoding to translate a csp variable\u2019s domain into sat.", "startOffset": 21, "endOffset": 26}, {"referenceID": 2, "context": "We record 36 features directly from the csp instance using mistral [4].", "startOffset": 67, "endOffset": 70}, {"referenceID": 11, "context": "We use the 54 features computed using the newest feature computation tool from UBC [13].", "startOffset": 83, "endOffset": 87}, {"referenceID": 16, "context": "We implemented a tool to translate a csp instance specified in XCSP format [18] into sat (cnf).", "startOffset": 75, "endOffset": 79}, {"referenceID": 5, "context": "To train our portfolios we used the ISAC methodology [7] which has been shown to work better than a regression based approaches [14].", "startOffset": 53, "endOffset": 56}, {"referenceID": 12, "context": "To train our portfolios we used the ISAC methodology [7] which has been shown to work better than a regression based approaches [14].", "startOffset": 128, "endOffset": 132}, {"referenceID": 10, "context": "For our csp solver portfolio we used: abscon [12], csp4j [11], sat4j [10], pcs [21], gecode [2], and sugar [19].", "startOffset": 45, "endOffset": 49}, {"referenceID": 9, "context": "For our csp solver portfolio we used: abscon [12], csp4j [11], sat4j [10], pcs [21], gecode [2], and sugar [19].", "startOffset": 57, "endOffset": 61}, {"referenceID": 8, "context": "For our csp solver portfolio we used: abscon [12], csp4j [11], sat4j [10], pcs [21], gecode [2], and sugar [19].", "startOffset": 69, "endOffset": 73}, {"referenceID": 19, "context": "For our csp solver portfolio we used: abscon [12], csp4j [11], sat4j [10], pcs [21], gecode [2], and sugar [19].", "startOffset": 79, "endOffset": 83}, {"referenceID": 17, "context": "For our csp solver portfolio we used: abscon [12], csp4j [11], sat4j [10], pcs [21], gecode [2], and sugar [19].", "startOffset": 107, "endOffset": 111}], "year": 2014, "abstractText": "Instance-specific algorithm configuration and algorithm portfolios have been shown to offer significant improvements over single algorithm approaches in a variety of application domains. In the sat and csp domains algorithm portfolios have consistently dominated the main competitions in these fields for the past five years. For a portfolio approach to be effective there are two crucial conditions that must be met. First, there needs to be a collection of complementary solvers with which to make a portfolio. Second, there must be a collection of problem features that can accurately identify structural differences between instances. This paper focuses on the latter issue: feature representation, because, unlike sat, not every problem has well-studied features. We employ the well-known SATzilla feature set, but compute alternative sets on different sat encodings of csps. We show that regardless of what encoding is used to convert the instances, adequate structural information is maintained to differentiate between problem instances, and that this can be exploited to make an effective portfolio-based csp solver.", "creator": "LaTeX with hyperref package"}}}