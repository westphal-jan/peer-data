{"id": "1406.1638", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Jun-2014", "title": "Automated Generation of Geometric Theorems from Images of Diagrams", "abstract": "We propose an approach to generate geometric theorems from electronic images of diagrams automatically. The approach makes use of techniques of Hough transform to recognize geometric objects and their labels and of numeric verification to mine basic geometric relations. Candidate propositions are generated from the retrieved information by using six strategies and geometric theorems are obtained from the candidates via algebraic computation. Experiments with a preliminary implementation illustrate the effectiveness and efficiency of the proposed approach for generating nontrivial theorems from images of diagrams. This work demonstrates the feasibility of automated discovery of profound geometric knowledge from simple image data and has potential applications in geometric knowledge management and education.", "histories": [["v1", "Fri, 6 Jun 2014 10:52:28 GMT  (1230kb,D)", "http://arxiv.org/abs/1406.1638v1", "31 pages. Submitted to Annals of Mathematics and Artificial Intelligence (special issue on Geometric Reasoning)"]], "COMMENTS": "31 pages. Submitted to Annals of Mathematics and Artificial Intelligence (special issue on Geometric Reasoning)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["xiaoyu chen", "dan song", "dongming wang"], "accepted": false, "id": "1406.1638"}, "pdf": {"name": "1406.1638.pdf", "metadata": {"source": "CRF", "title": "Automated Generation of Geometric Theorems from Images of Diagrams", "authors": ["Xiaoyu Chen", "Dan Song", "Dongming Wang"], "emails": ["franknewchen@gmail.com"], "sections": [{"heading": null, "text": "We propose an approach to generate geometric theorems from electronic images of diagrams automatically. The approach makes use of techniques of Hough transform to recognize geometric objects and their labels and of numeric verification to mine basic geometric relations. Candidate propositions are generated from the retrieved information by using six strategies and geometric theorems are obtained from the candidates via algebraic computation. Experiments with a preliminary implementation illustrate the effectiveness and efficiency of the proposed approach for generating nontrivial theorems from images of diagrams. This work demonstrates the feasibility of automated discovery of profound geometric knowledge from simple image data and has potential applications in geometric knowledge management and education."}, {"heading": "1 Introduction", "text": "Diagrams have been used to illustrate geometric theorems and problems for thousands of years and can be produced now by using computer programs with ease. A number of software tools developed in the area of dynamic geometry are capable of generating dynamic diagrams automatically from specifications of geometric theorems [33]. This paper tackles the inverse problem: given the electronic image of a diagram, generate the specifications of one or more theorems which the diagram may be used to illustrate. An ideal solution to this problem allows one to generate geometric theorems automatically from their illustrations available in electronic documents and resources.\nTo be specific, let us restrict our study to plane Euclidean geometry in this paper. The approach we propose to solve the above-stated problem consists of the following main steps.\n1. Retrieve geometric information, mainly geometric objects and their labels, in the given image of diagram using techniques of pattern recognition (in particular Hough transform as discussed in Sections 2.1 and 2.2).\naSKLSDE - School of Computer Science and Engineering, Beihang University, Beijing 100191, China. E-mail: franknewchen@gmail.com\nbLMIB - School of Mathematics and Systems Science, Beihang University, Beijing 100191, China cCentre National de la Recherche Scientifique, 3 rue Michel-Ange, 75794 Paris cedex 16, France\nar X\niv :1\n40 6.\n16 38\nv1 [\ncs .A\nI] 6\nJ un\n2 01\n4\n2. Mine geometric relations among the retrieved geometric objects from predetermined potential relations by examining their corresponding algebraic relations using numeric verification (see Section 2.3).\n3. Generate candidate propositions from the mined geometric relations by using six strategies introduced (see Section 3.1).\n4. Obtain theorems from the generated candidate propositions using algebraic methods, first to rule out false propositions efficiently by checking numeric instances and then to prove the true propositions via symbolic computation (see Sections 3.2 and 3.3).\nThese four steps are described in detail in the following two sections. We have implemented the proposed approach. Preliminary experiments with our implementation are reported in Section 4. Some related work on geometric information retrieval and theorem discovery is discussed briefly in Section 5. The paper concludes with a few remarks in Section 6.\nThe work presented in this paper demonstrates for the first time the feasibility of discovering rigorous and profound geometric knowledge (theorems) from inexact and partial geometric data (images of diagrams) automatically. This feasibility brings us the hope to build up a large-scale database of geometric theorems automatically or semi-automatically by searching diagrams from electronic documents and resources accessible via the Internet. Theorems collected in such a database will have standardized formal representations and are linked to images of diagrams. The processing and management of theorems in the database, including searching, organization, translation (into representations in natural languages or algebraic expressions), and degenerate-case handling, would be made easier or more efficient.\nA potential application of our work in education is evident. An extension of the proposed approach to dealing with hand-drawn diagrams could make it possible for students to submit geometric theorems to provers by simply sketching their diagrams on mobile computing devices."}, {"heading": "2 Information Retrieval from Images of Diagrams", "text": "Geometric information consists of geometric objects (i.e., shapes used in geometric diagrams), their labels (i.e., identifiers of the objects), and geometric relations (i.e., properties and features of the objects). In what follows, we discuss how to retrieve information from images of diagrams and how to represent it in a processable form for theorem generation."}, {"heading": "2.1 Recognizing Basic Geometric Objects", "text": "In our current investigation we consider the following three types of basic geometric objects which are used to form most of the diagrams in plane Euclidean geometry.\n\u2022 Points. A point is represented by a pair of coordinates (x, y) in the coordinate system determined by the image of diagram, where the parameters x and y are called x-coordinate and y-coordinate, respectively.\n\u2022 Lines. A straight line (with no extremes) is represented by line(P1, P2), where the parameters P1 and P2 denote two distinct points incident to the line. Similarly, a half line is represented by halfline(O,P ), where the parameter O denotes its initial point and P denotes a point on it; a segment is represented by segment(E1, E2), where the parameters E1 and E2 denote the endpoints of the segment. For the sake of convenience, all straight lines, half lines, and segments, with respective types line, halfline, and segment, are called lines.\n\u2022 Circles. A circle may be represented by circle(O, r), where the parameter O denotes the center of the circle and r (> 0) denotes the radius of the circle, and by circle(A,B,C), where the parameters A, B, and C denote three distinct points on the circle.\nA geometric object may be referred to by an identifier which is called the label of the object. For example, the point (x, y) with label P is represented as P := (x, y); the straight line with label l passing through P1 and P2 is represented as l := line(P1, P2).\nRecognition of a basic geometric object O means to determine the parameter values of O. For example, a circle can be recognized by determining the coordinates of its center and the value of its radius.\nOur approach to recognizing basic geometric objects from images of diagrams is based on Hough transform [10], a general technique for estimating the parameters of a shape from its boundary points. Through Hough transform, the detection of a shape is converted to a voting procedure carried out in a parameter space. For instance, the detection of a line can be realized by checking whether the number of curves (corresponding to the points on the line) crossing at a certain point (corresponding to the line) in the parameter space is greater than a threshold. However, due to the effects of image quality, line width, and concrete recognition requirements, the results obtained via Hough transform might not perfectly reflect the actual features of the geometric diagrams. For example, a line may be detected as several disconnected short segments; the position and the size of a circle may be not the same as they are in the diagram. To improve the accuracy of recognition for basic geometric objects, we adopt some techniques to refine the results of Hough transform, as described in\nthe following algorithm.1\nAlgorithm 1 (Geometric object recognition). Given an image I of diagram, output a set C of circles, a set L of lines, and a set P of points of interest contained in I.\nStep 1.1. [Recognize circles]\n1.1.1. [Preprocess] Perform graying and smoothing operations on the image I (using, e.g., the technique of Gaussian smoothing given in [30]) to obtain a new image I1.\n1.1.2. [Detect] Apply the gradient-based Hough transform (see algorithm 21HT in [27]) on I1 to acquire a set C of circles.\n1.1.3. [Refine] For each c := circle(O, r) in C, collect four points P1, P2, P3, and P4 on the left-bound, right-bound, top-bound, and bottom-bound of c respectively, and then replace O by the centroid of the quadrilateral P1P2P3P4 and r by the average of the Euclidean distances \u2016OP1\u2016, \u2016OP2\u2016, \u2016OP3\u2016, and \u2016OP4\u2016.\nStep 1.2. [Recognize lines] There are three possible defects in the lines detected from an image of diagram by applying Hough transform: (1) a line in the diagram is detected as some disconnected short segments; (2) the endpoints of a segment cannot be accurately detected; (3) some nonexisting segments may be detected on a circle, in particular when the radius of the circle is large. The following substeps are used to amend the defects.\n1.2.1. [Preprocess] Perform binarization and thinning operations on I (using, e.g., the technique in Zhang\u2019s parallel thinning algorithm [28]) to obtain a new image I2 .\n1.2.2. [Detect] Apply the progressive probabilistic Hough transform (see [16])2 on I2 to acquire a set L of segments.\n1.2.3. [Merge segments] For each pair of segment(P1, P2) and segment(P3, P4) in L, if P1, P2, P3, and P4 are collinear and min1\u2264i 6=j\u22644{\u2016PiPj\u2016} < \u03c4l (where \u03c4l is a prespecified tolerance), then the pair of segments is replaced by a new segment segment(P,Q) such that P,Q \u2208 {P1, P2, P3, P4} and \u2016PQ\u2016 = max1\u2264i,j\u22644{\u2016PiPj\u2016}.\n1.2.4. [Determine endpoints] For each segment(P,Q) in L, if P and Q can be moved to points P \u2032 and Q\u2032 outwards along the two directions of the segment respectively as far as there is no other point detected in I2, then replace segment(P,Q) by segment(P \u2032, Q\u2032).\n1To allow use of previously retrieved information, recognition tasks are arranged in the order of circles, lines, and then points.\n2Both the gradient-based Hough transform and the progressive probabilistic Hough transform are improved versions of Hough transform: the former makes use of local gradients of the image intensity to reduce the computation time and is efficient for detecting circles, and the latter minimizes the amount of computation needed and is reliable for detecting lines. The two transforms have been implemented in OpenCV, an Open source Computer Vision and machine learning software library [34], to detect circles and lines respectively.\n1.2.5. [Remove nonexisting segments] For each pair of segment(P1, P2) \u2208 L and circle(O, r) \u2208 C, if |\u2016P1O\u2016 \u2212 r| < \u03c4c, |\u2016P2O\u2016 \u2212 r| < \u03c4c, and |\u2016P3O\u2016 \u2212 r| < \u03c4c, where \u03c4c is a prespecified tolerance and P3 is the midpoint of P1 and P2, then remove segment(P1, P2) from L.\n1.2.6. [Determine types of lines] A point with coordinates (x, y) is called a boundary point of the image I2, if 0 \u2264 x < \u03b4, or WI2 \u2212 \u03b4 \u2264 x < WI2 , or 0 \u2264 y < \u03b4, or HI2 \u2212 \u03b4 \u2264 y < HI2 .3 For each segment(P,Q) in L, if both P and Q are boundary points, then replace segment(P,Q) by line(P,Q); if P is a boundary point, but Q is not, then replace segment(P,Q) by halfline(P,Q); if Q is a boundary point, but P is not, then replace segment(P,Q) by halfline(Q,P ).\nStep 1.3. [Collect points of interest] The set P of points of interest are obtained as follows.\n\u2022 For each circle(O, r) in C, add O to P; for each circle(A,B,C) in C, add A, B, and C to P.\n\u2022 For each line(P,Q), or halfline(P,Q), or segment(P,Q) in L, add P and Q to P.\n\u2022 For each pair of lines in L, compute the numeric coordinates of the intersection point P of the two lines and add P to P, if P exists.\n\u2022 For each pair of a line in L and a circle in C, compute the numeric coordinates of the intersection points P1 and P2 of the line and the circle and add P1 and P2 to P, if P1 and P2 exist.\n\u2022 For each pair of circles in C, compute the numeric coordinates of the intersection points P1 and P2 of the two circles and add P1 and P2 to P, if P1 and P2 exist.\nDue to errors of numeric computation, the same point in the diagram may be collected into P more than once with different coordinates. Therefore, in the above process of adding a point P to P, the following substep need be performed to check whether P is already contained in P.\n1.3.1. [Identify identical points] For any given point P , if there exists a point P0 in P such that \u2016PP0\u2016 < \u03c4p (where \u03c4p is a prespecified tolerance), then P and P0 are viewed as being identical and P need not be added to P.\nTo each of the recognized basic geometric objects, it is necessary to assign a unique label (or letter), so that geometric relations among the objects can be expressed clearly. Labels for important geometric objects (such as points) are usually contained in diagrams. We shall present a method to extract information on label assignment from images of diagrams in the next subsection.\n3Here WI2 denotes the width of I2, HI2 denotes the height of I2, and \u03b4 is a given tolerance."}, {"heading": "2.2 Recognizing Labels of Geometric Objects", "text": "Labels in an image of diagram may be recognized by checking whether each of them matches a character template, as shown in the following algorithm.\nAlgorithm 2 (Label recognition). Given an image I of diagram and the three sets C, L, and P obtained by applying Algorithm 1 to I, output a list L of labels in I and a list P of the corresponding centers of the regions where the labels occur in I.\nStep 2.1. [Prepare character templates] Produce a predetermined set T of binary images of letters with font type T commonly used in geometric documents as character templates.\nStep 2.2. [Preprocess] Redraw the points in P, the lines in L, and the circles in C on I with white (background) color. Perform graying and binarization operations on I to obtain a new image I3. Set L := [ ] and P := [ ].\nStep 2.3. [Cut out blocks with labels] For each label L, use an alterable rectangular cutting window W (l, r, t, b) to cut out from the image I3 a minimal block B containing the region where L occurs, where (l, t), (r, t), (l, b), and (r, b) denote, respectively, the left-top, right-top, left-bottom, and right-bottom vertices of the window. Cutting windows are determined as follows.\nLet HI3 and WI3 be the height and the width of I3, respectively. Set B, the set of image blocks with labels, to be empty. For each black (foreground color) pixel point P with coordinates (x, y) in I3, but not in any of the cutting windows for the image blocks in B, let h and w be initialized to y and x, respectively, and do the following. While 0 < h < HI3 and 0 < w < WI3 repeat:\n1. if the point (w, h+ 1) is a black pixel point, then set h := h+ 1;\n2. else if the point (w \u2212 1, h + 1) is a black pixel point, then set w := w \u2212 1 and h := h+ 1;\n3. else if the point (w + 1, h + 1) is a black pixel point, then set w := w + 1 and h := h+ 1;\n4. else if the point (w \u2212 1, h) is a black pixel point, then set w := w \u2212 1;\n5. otherwise, break.\nThen set \u03b4h := h \u2212 y and let l, r, t, b be initialized to x, x, y, y + \u03b4h, respectively. Decrease l by one each time until there is no black pixel point on segment((l, y), (l, y + \u03b4h)); decrease r by one each time until there is no black pixel point on segment((r, y), (r, y + \u03b4h)). In a similar way, t and b can be determined.\nFinally, use the obtained window W (l, r, t, b) to cut out B from the image4 and set B := B \u222a {B}.\nStep 2.4. [Match character templates] For each image block B in B, if there exists a character template T in T of letter L such that the similarity of T and B is not less than a threshold (e.g., 90 percent),5 then append L to the list L, compute the center ( l+r\n2 , t+b 2 ) of the cutting widow and append it to the list P. Note that the center of\nthe ith label in L corresponds to the ith point in P.\nTo assign the recognized labels to corresponding geometric objects, we adopt the following strategies according to the convention that in geometry, usually a letter in upper case is used to label its nearest point and a letter in lower case is used to label its nearest line. For the ith label Li in L, if Li is in upper case, then it is assigned to a point P in P such that for any other point P \u2032 \u2208 P, \u2016CiP\u2016 < \u2016CiP \u2032\u2016, where Ci is the ith point in P; if Li is in lower case, then it is assigned to a line l in L such that for any other line l\u2032 \u2208 L, \u2016Cil\u2016 < \u2016Cil\u2032\u2016.6\nFor any geometric object that is not labeled in the image, a unique label is automatically generated by our program to refer to the object. Taking the image of a diagram (Fig. 1) for Simson\u2019s theorem7 as an example, we show the geometric objects obtained by Algorithm 1 and the labels recognized by Algorithm 2 or generated automatically.\n4To ensure successful determination of the size and position of the cutting window, we assume that labels have no overlap with geometric objects in the image.\n5The similarity of two images is defined as the ratio of the number of pixels at which the two images have the same binary values to the total number of pixels after scaling the two images to the same size.\n6The Euclidean distance from point P to line l is denoted by \u2016Pl\u2016. 7Simson\u2019s theorem may be stated as: the feet of the perpendiculars from a point to the sides of\na triangle are collinear if and only if the point lies on the circumcircle of the triangle.\n\u2022 The set P of points of interest:\nB := (45, 260), C := (351, 243), G := (313, 246), A := (137, 78),\nF := (262, 174), H := (311, 212), E := (163, 37), I := (182, 0),\nD := (305, 110), J := (196, 224), K := (184, 67), L := (224, 69).\n\u2022 The set L of lines: a := segment(B,C), b := segment(A,C), c := segment(E,G),\nd := halfline(B, I), e := segment(E,D), f := segment(D,G),\ng := segment(F,D).\n\u2022 The set C of circle: h := circle(J, 157).\nThe features of diagrams are depicted mainly via geometric relations (e.g., incidence, perpendicularity, and parallelism) among the involved objects. Geometric relations play a fundamental role in the specification of geometric knowledge (e.g., theorems). Based on retrieved information about geometric objects, we shall present a method to mine geometric relations in the next subsection."}, {"heading": "2.3 Mining Basic Geometric Relations", "text": "Some geometric relations such as those listed in Table 1 may be taken as basic geometric relations because they can be used to describe most features about the size and position of geometric objects and from them many other geometric relations can be derived. For example, if point A is incident to line p and also to line q, then the two relations derive the new relation that A is the intersection point of the two lines p and q.\nEach basic geometric relation in Table 1 corresponds to an algebraic equality in the coordinates of the involved points and the radii of the involved circles. In general, a geometric relation can be certificated to be true if and only if its corresponding equality holds. Take incident(C, line(A,B)) as an example and let the coordinates of A, B, and C be (x1, y1), (x2, y2), and (x3, y3), respectively. To determine whether C lies on line AB, one can check whether the value of the expression x1y2 + x2y3 + x3y1 \u2212 x1y3 \u2212 x2y1 \u2212 x3y2 is equal to 0. However, due to recognition and numeric errors, it is not effective to determine the equality by simply evaluating the expression, in particular when the slope of the line is large. We adopt some techniques to mine basic geometric relations as detailed in the following algorithm.\nAlgorithm 3 (Geometric relation mining). Given the set P of points of interest, the set L of lines, and the set C of circles recognized from an image of diagram with labels, output a set R of basic relations among the geometric objects.\nStep 3.1. [Mine incidence] Set R := \u2205.\n3.1.1. For each pair of point P in P and line l in L, if \u2016Pl\u2016 is less than a prespecified tolerance \u03c4pl, then add the relation incident(P, l) to R.8\n3.1.2. For each pair of point P in P and circle(O, r) in C, if |\u2016AO\u2016\u2212 r| is less than a prespecified tolerance \u03c4pc, then add the relation pointOnC(P, circle(O, r)) to R.\n3.1.3. For each pair of point P in P and circle(A,B,C) in C, if |\u2016OA\u2016 \u2212 \u2016OP\u2016| (where O is the center of the circle ABC) is less than a prespecified tolerance \u03c4pc, then add the relation pointOnC(P, circle(A,B,C)) to R.9\nStep 3.2. [Mine parallelism and perpendicularity] For each pair of lines l1 := (P1, P2) and l2 := (P3, P4) in L, where can be line, halfline, or segment, compute \u03b1 = \u2220 \u2212\u2212\u2192 P1P2 and \u03b2 = \u2220 \u2212\u2212\u2192 P3P4 (the angles between the x-axis and the vectors\n8The trivial cases incident(A, line(A,B)) and incident(B, line(A,B)) are ruled out. 9The trivial cases pointOnC(A, circle(A,B,C)), pointOnC(B, circle(A,B,C)), and\npointOnC(C, circle(A,B,C)) are ruled out.\n\u2212\u2212\u2192 P1P2 and \u2212\u2212\u2192 P3P4, respectively) according to the following formula:\n\u2220 \u2212\u2192 AB =  3 2 \u03c0, if xB = xA, yB > yA; 1 2 \u03c0, if xB = xA, yB < yA; 0, if xB > xA, yB = yA; \u03c0, if xB < xA, yB = yA; | arctan(k)|, if yB > yA, xB > xA; \u03c0 + | arctan(k)|, if yB > yA, xB < xA; \u03c0 \u2212 arctan(k), if yB < yA, xB < xA; 2\u03c0 \u2212 arctan(k), if yB < yA, xB > xA\nfor any points A and B (A 6= B), whose coordinates are (xA, yA) and (xB, yB) respectively.\nLet \u03c4a be a prespecified tolerance.\n3.2.1. If |\u03b1\u2212 \u03b2| < \u03c4a or ||\u03b1\u2212 \u03b2| \u2212 \u03c0| < \u03c4a, then add parallel(l1, l2) to R.\n3.2.2. If ||\u03b1\u2212 \u03b2| \u2212 1 2 \u03c0| < \u03c4a or ||\u03b1\u2212 \u03b2| \u2212 32\u03c0| < \u03c4a, then add perpendicular(l1, l2) to\nR.\nStep 3.3. [Mine distance equality]\n3.3.1. Compute a set S of segments such that for each segment(P1, P2) \u2208 S, P1, P2 \u2208 P and P1 and P2 lie on the same line in L.\n3.3.2. For each pair of segment(A,B) and segment(C,D) in S, if |\u2016AB\u2016\u2212\u2016CD\u2016| is less than a prespecified tolerance \u03c4d, then add equal(distance(A,B), distance(C,D)) to R.\nStep 3.4. [Mine angle size equality]\n3.4.1. Compute a set P\u2217 of points such that each point in P\u2217 lies on at least three lines in L. 3.4.2. For each P \u2208 P\u2217, compute a list VP of vectors such that for each \u2212\u2192 PQ \u2208 VP , Q\nis one of the parameters of the line l in L and P is incident to l. The vectors in VP are sorted by the angles between the vectors and the X-axis.\n3.4.3. For each P \u2208 P\u2217, compute a set AP of angles such that for each \u2220A1PA2 \u2208 AP ,\u2212\u2212\u2192 PA1, \u2212\u2212\u2192 PA2 \u2208 VP and A1 6= A2.\n3.4.4. For each pair of \u2220ABC and \u2220DEF in AP , if |\u2220ABC \u2212 \u2220DEF | < \u03c4a, then add equal(size(angle(A,B,C)), size(angle(D,E, F ))) to R.\nUsing Algorithm 3, one may obtain the following basic geometric relations for Fig. 1:\nincident(G, a), incident(A, d), incident(F, b), incident(F, c),\nincident(H, f), incident(E, d), incident(K, c), incident(L, e),\nincident(H, b), pointOnC(B, h), pointOnC(C, h), pointOnC(A, h),\npointOnC(K,h), pointOnC(L, h), pointOnC(D, h),\nperpendicular(a, f), perpendicular(b, g), perpendicular(d, e)."}, {"heading": "3 Automated Generation of Geometric Theorems", "text": "It is remarkable that geometric objects and their relations retrieved from a single image of diagram allow certain nontrivial properties implied in the diagram to be expressed explicitly. Such properties often hold generally for families of diagrams and may be stated as propositions. A geometric theorem is a true proposition about the implication of a geometric relation (called the conclusion of the theorem) in all the diagrams that satisfy the same set of geometric relations (called the hypothesis of the theorem). It is surprising that geometric theorems can be generated automatically and effectively from the information retrieved from images of diagrams in three steps: generating candidate propositions, ruling out false candidates, and proving the obtained theorems."}, {"heading": "3.1 Generating Candidates", "text": "A candidate proposition is one that is likely a theorem. It can be generated in a simple way by selecting one (or more) geometric relation(s) as the conclusion and taking some other relations as the hypothesis. As there are geometric objects and relations which are irrelevant to the features of the diagram, it is necessary to remove such objects and relations for the efficiency of theorem mining from candidate propositions.\nUsually more points of interest than needed are recognized from the diagram. A point of interest is called a point of attraction if it is an endpoint of a segment, or the starting point of a half line, or the intersection point of two lines, or an intersection point of two circles or of one line and one circle, or the tangent point of two circles or of one line and one circle, or an isolated point. Points of attraction play an important role in forming the diagram. A point of attraction is called a characteristic point if it is used in the expressions of properties or the specifications of propositions implied in the diagram. For example, in the diagram shown in Fig. 2,10 I is a point of interest, but not a point of attraction; K L, H, and J are points of attraction, but\n10That the point I is truncated purposely in the figure is to show that I is on the boundary of the image.\nnot characteristic points because they are not used in the specification of Simson\u2019s theorem that the diagram depicts.\nA geometric relation is said to be characteristic if all the points used in the relation are characteristic points. To generate candidate propositions for a diagram we are mainly concerned with characteristic points and relations. First of all, we introduce the following rule to remove irrelevant information retrieved.\nRule 1 (Remove irrelevant information). Remove from P points that are not characteristic and remove from R basic geometric relations that are not characteristic.\nThe following three strategies may be used to implement the above rule.\nStrategy 1 (Count weights of points). In general, characteristic points have labels assigned in the diagram. The more times a point is used in the retrieved geometric relations, the more likely it is to be characteristic.\nTo determine which points are potentially characteristic, we weight each point of interest by the number of its repeating occurrences in the retrieved relations. Table 2 shows the weights of the points of interest in Fig. 2 according to the retrieved basic geometric relations listed in the right column.\nStrategy 2 (Re-represent lines and circles). The weights of points of interest depend on the representations of lines in L and circles in C, while lines and circles may be represented in different ways. For example, in Fig. 2, the half line d can be represented as halfline(B,A) or halfline(B,E)\ninstead of halfline(B, I) because B, A, E, and I are all incident to d; the circle can be represented as circle(A,B,C) or circle(B,C,D) instead of circle(J, 157) because B, A, D, and C are all on the circle. It is therefore desirable to determine which representation is the best for ruling out the points that are not potentially characteristic. Generally speaking, among the points incident to a line or a circle, the higher weight a point has, the more possible it is to be characteristic. Therefore, we proceed as follows to re-represent geometric objects according to the weights of points.\nS2.1. [Re-represent lines] If P1, . . . , Pn are n (\u2265 3) distinct points in P incident to a straight line, a segment, or a half line, then the straight line and the segment are represented as line(Pi, Pj) and segment(Pi, Pj) respectively, where Pi and Pj are two distinct points of the highest weights among P1, . . . , Pn; the half line is represented as halfline(B,Pi), where B is the starting point of the half line and Pi is the point of the highest weight among P1, . . . , Pn and is distinct from B.\nS2.2. [Re-represent circles] If P1, . . . , Pn are n (\u2265 3) distinct points in P and on a circle, then the circle is represented as circle(Pi, Pj, Pk), where Pi, Pj, and Pk are three distinct points of the highest weights among P1, . . . , Pn. If\nthere exist other geometric relations with respect to the center of the circle, add two new geometric relations equal(distance(J, Pi), distance(J, Pj)) and equal(distance(J, Pi), distance(J, Pk)) to R, where J is the center of the circle.\nS2.3. [Re-count weights] At each time a geometric object is re-represented, the weights of the points of interest are re-counted.\nS2.4. [Remove trivial relations] After lines and circles are re-represented, remove all trivial relations in the form of incident(P, (P, \u2217)), incident(P , (\u2217, P )), pointOnC(P, circle(P, \u2217, \u2217)), pointOnC(P, circle(\u2217, P, \u2217)), and pointOnC(P, circle(\u2217, \u2217, P )) from R (because they hold obviously), where can be line, segment, or halfline and \u2217 can be any point in P1, . . . , Pn.\nTable 3 shows the weights of the points of interest and basic geometric relations for Fig. 2 after the re-representation process.\nStrategy 3 (Determine characteristic points and relations). After geometric objects are re-represented, the points of interest may be partially determined to be points of attraction or characteristic points according to their weights as follows.\nS3.1. [Determine points of attraction] If the weight of a point of interest is 0, then the point is not a point of attraction because it is not used in any geometric relation.\nS3.2. [Determine characteristic points] If the weight of a point P of interest is less than 3, then P could not potentially be a characteristic point because it is used at most in two geometric relations according to the weight counting. This can be explained as follows.\n\u2022 If P is the intersection point of two lines or an intersection point of one line and one circle, then no other geometric relations involve P and therefore P could not potentially be a characteristic point.\n\u2022 If P is an endpoint of only one segment l or the starting point of only one half line l, then no other lines or circles pass through P and there are at most two geometric relations which involve l. However, a nontrivial proposition usually needs at least two geometric relations that involve l in the hypothesis. Therefore, in this case, P could not potentially be a characteristic point.\n\u2022 If P is the common endpoint of two segments l1 and l2, then only one geometric relation involves l1 and only one geometric relation involves l2. Since a nontrivial proposition usually needs at least two geometric relations that involve the same line in the hypothesis, P could not potentially be a characteristic point in this case.\nFor example, the weights ofH, K, L, J , and I in Fig. 2 are 2, 2, 2, 0, and 0 respectively as shown in Table 3, so the points H, K, L, J , and I are not characteristic. Together with the non-characteristic relations, they are removed by Rule 1 (see Table 4).\nSome of the geometric relations in R may be derivable from other relations in R. We call geometric relations D1, . . . , Ds (1 \u2264 s) branch relations with respect to other geometric relations H1, . . . , Hd (1 \u2264 d) if D1, . . . , Ds can be easily derived from\nH1, . . . , Hd on a sub-diagram. The formula in the form of H1, . . . , Hd \u21d2 D1, . . . , Ds is used to represent that the branch relations D1, . . . , Ds are obtained from H1, . . . , Hd.\nIn Fig. 3 (a sub-diagram for Butterfly theorem), C is the midpoint of segment AB and segment DE. Then the following four relations can be obtained: (1) \u2016AC\u2016 = \u2016CB\u2016; (2) \u2016DC\u2016 = \u2016CE\u2016; (3) \u2016AD\u2016 = \u2016EB\u2016; (4) \u2016AE\u2016 = \u2016DB\u2016. It is easy to see that (1), (2)\u21d2 (3), (4); (1), (3)\u21d2 (2), (4); (1), (4)\u21d2 (2), (3).\nSimilarly, in Fig. 4 (a diagram for Steiner\u2019s theorem), segment BD and segment CE are internal bisectors of \u2220ABC and \u2220BCA respectively and F is the intersection point of BD and CE. Then the following relations can be obtained: (1) \u2016AB\u2016 = \u2016AC\u2016; (2) \u2016BD\u2016 = \u2016CE\u2016; (3) \u2016AE\u2016 = \u2016AD\u2016; (4) \u2016BE\u2016 = \u2016CD\u2016. One sees that (1), (2)\u21d2 (3), (4); (1), (3)\u21d2 (2), (4); (1), (4)\u21d2 (2), (3).\nBranch relations are usually not used in theorems about the features of the whole diagram. Therefore, we introduce the following rule.\nRule 2 (Remove branch relations). If R1, . . . , Rk \u21d2 Rk+1, . . . , Rm (1 \u2264 k < m and R1, . . . , Rm are all basic geometric relations in R), then remove Rk+1, . . . , Rm from R.\nFigure 3: Distance relations on the same line\nFigure 4: Distance relations on different lines\nThere may be different branch relations in the same set of geometric relations (see, e.g., Figs. 3 and 4). The following strategy may be used to select appropriate branch relations.\nStrategy 4 (Determine branch relations). Let E be the set of distance relations in R.\nS4.1. In the case when all the points used in distance relations lie on the same line (see Fig. 3), sort the points in ascending order of x-coordinate or y-coordinate to obtain a list [P1, . . . , Pn]. Then branch relations are obtained from the following formulae:\n1. \u2016PiPj\u2016 = \u2016PkPl\u2016 \u21d2 \u2016PiPk| = \u2016PjPl\u2016;\n2. \u2016PiPm\u2016 = \u2016PmPl\u2016, \u2016PjPm\u2016 = \u2016PmPk\u2016 \u21d2 \u2016PiPj\u2016 = \u2016PkPl\u2016, \u2016PiPk\u2016 = \u2016PjPl\u2016,11\nwhere 1 \u2264 i < j < m < k < l \u2264 n.\nS4.2. In the case when some points used in distance relations lie on different lines (see Fig. 4), form a new set E1 of distance equations from E such that the used points are parameters of some retrieved lines. Then branch relations are obtained from the formula\n\u2016AB\u2016 = \u2016CD\u2016, \u2016AE\u2016 = \u2016FD\u2016 \u21d2 \u2016BE\u2016 = \u2016CF\u2016 (1) such that \u2016AB\u2016 = \u2016CD\u2016 and \u2016AE\u2016 = \u2016FD\u2016 are both in E1, but \u2016BE\u2016 = \u2016CF\u2016 is not in E1. Let E2 be the set of all the obtained branch relations. For each pair of E1 \u2208 E1 and E2 \u2208 E2, a new branch relation E3 with respect to E1 and E2 is determined also by the formula (1) if E3 is not in E1.\nS4.3. In particular, the distance between the center of a circle and any point on the circle is constant. Therefore, branch relations can be determined from the formula\npointOnC(A, circle(O, r)), pointOnC(B, circle(O, r))\u21d2 \u2016OA\u2016 = \u2016OB\u2016.\nAs discussed in Section 2.3, retrieved geometric relations in R are basic and from them other new geometric relations can be derived. A geometric relation R is called a derived relation if it is implied by the basic geometric relations R1, . . . , Rm (2 \u2264 m). The formula R1, . . . , Rm 7\u2192 R is used to represent that R can be obtained from R1, . . . , Rm.\nRule 3 (Introduce derived relations). If R1, . . . , Rm 7\u2192 R and for all 1 \u2264 i \u2264 m, Ri \u2208 R and R /\u2208 R, then remove R1, . . . , Rm from R and add R to R.\nStrategy 5 (Introduce new geometric objects). Derived relations can be obtained from the following formulae:\n1. incident(C, p), incident(C, q) 7\u2192 C := intersection(p, q);12\n2. incident(C, segment(A,B)), AC = CB 7\u2192 C := midpoint(A,B);13\n3. incident(C, p), perpendicular(p, q) 7\u2192 C := foot(p, q).14\nFor example, from the relations in Table 4 and by Rule 3 one can obtain the derived geometric relations listed in Table 5.\n11A distance relation of the form \u2016A1A2\u2016 = \u2016A3A4\u2016 can be replaced by \u2016A1A2\u2016 = \u2016A4A3\u2016, \u2016A2A1\u2016 = \u2016A3A4\u2016, or \u2016A2A1\u2016 = \u2016A4A3\u2016.\n12A geometric relation of the form L := f(p1, p2, . . . , pn) means that L is the label for the geometric object f(p1, p2, . . . , pn) and intersection(p, q) denotes the intersection point of p and q.\n13midpoint(A,B) denotes the midpoint of segment AB. 14perpendicular(p, q) can be replaced by perpendicular(q, p) and foot(p, q) denotes the foot of\ntwo lines p and q perpendicular to each other.\nStrategy 6 (Generate candidate propositions). To formulate a proposition, one needs to determine which geometric relations can be taken as the hypothesis, in which order the relations are introduced in the hypothesis, and which one can be taken as the conclusion.\nWe first introduce an order \u227a on the characteristic points P1, . . . , Pn according to the following two rules.\n1. If Pi is the label for a derived relation, then Pj \u227a Pi, where Pj is used in the relation and Pj 6= Pi.\n2. Otherwise, if the weight of Pi is higher than that of Pj, then Pi \u227a Pj.\nFor example, according to the weights of the characteristic points in Table 4 and the representations of the characteristic relations in Table 5, an order of the characteristic points is C \u227a A \u227a B \u227a D \u227a G \u227a E \u227a F .\nBased on the order \u227a of points, an order l is induced on characteristic relations (after the above-stated rules have been applied)\nR1[P11, . . . , P1k1 ], R2[P21, . . . , P2k2 ], . . . , Rm[Pm1, . . . , Pmkm ],\nwhere Pi1, . . . , Piki are ki points used in Ri (1 \u2264 i \u2264 m) such that Pi1 \u227a \u00b7 \u00b7 \u00b7 \u227a Piki , according to the following three rules.\n1. If Pi1 \u227a Pj1, then Ri[Pi1, . . . , Piki ] lRj[Pj1, . . . , Pjkj ].\n2. If there exists a w (1 \u2264 w < min{ki, kj}) such that for all t (1 \u2264 t \u2264 w) Pit is identical to Pjt and Pi(w+1) \u227a Pj(w+1), then Ri[Pi1, . . . , Piki ] lRj[Pj1, . . . , Pjkj ].\n3. Suppose that ki \u2264 kj. If for all t (1 \u2264 t \u2264 ki) Pit is identical to Pjt, then Ri[Pi1, . . . , Piki ] lRj[Pj1, . . . , Pjkj ].\nThe characteristic relations listed in Table 5 are ordered by l as: incident(D, circle(A,B,C)) l F := foot(segment(A,C), segment(D,F ))\nl G := foot(segment(B,C), segment(D,G)) l E := foot(halfline(B,A), segment(D,E)) l incident(F, segment(E,G)).\nGiven R1lR2l\u00b7 \u00b7 \u00b7lRm, the hypothesis and conclusion of a candidate proposition are generated according to the following three rules.\n1. Any basic relation Ri can be taken as the conclusion.\n2. If Ri and Rj are both derived relations with the same label, then either Ri or Rj can be taken as the conclusion.\n3. The geometric relations other than the conclusion may be taken as the hypothesis.\nThe generated candidate propositions may be represented in the following form: Proposition(Tk, [R1, . . . , Rk\u22121, Rk+1, . . . , Rm], [Rk]), where 1 \u2264 k \u2264 m, Tk is the name, R1, . . . , Rk\u22121, Rk+1, . . . , Rm the hypothesis, and Rk the conclusion of the proposition.\nFor example, two candidate propositions may be generated for the diagram in Fig. 1:\nProposition(Simson5, [incident(D, circle(A,B,C)), F := foot(halfline(A,\nC), segment(D,F )), G := foot(segment(B,C), segment(D,G)), E :=\nfoot(segment(B,A), segment(D,E))], [incident(F, segment(E,G))])\nand\nProposition(Simson1, [F := foot(halfline(A,C), segment(D,F )), G := foot\n(segment(B,C), segment(D,G)), E := foot(segment(B,A), segment(D,\nE)), incident(F, segment(E,G))], [incident(D, circle(A,B,C))])."}, {"heading": "3.2 Ruling out False Candidates", "text": "To verify the truth of a candidate proposition, we use algebraic methods which have been successfully applied to automated geometric theorem proving. For the efficiency of theorem mining, false propositions need be ruled out first, so that each proposition submitted to a theorem prover is a potential theorem.\nA counterexample of a proposition is a diagram for which the hypothesis of the proposition holds, but the conclusion of the proposition does not. If a counterexample can be found, then the proposition must not be a theorem. In what follows we present a numeric verification technique, based on the characteristic set method of Wu [24, 22], for finding counterexamples to rule out false propositions.\nAlgorithm 4 (Proposition verification). Given a set P = {P1, . . . ,Pl} of candidate propositions, output a set F of propositions that cannot be theorems.\nSet F := \u2205. For each candidate proposition Pt (1 \u2264 t \u2264 l), do the following steps.\nStep 4.1. [Algebraization and triangularization]\n4.1.1. Assign coordinates xj (1 \u2264 j \u2264 h) (manually or automatically) to the points used in the hypothesis of Pt.\n4.1.2. Translate the geometric relations R1, . . . , Rk\u22121, Rk+1, . . . , Rm in the hypothesis into algebraic equations  f1(x1, . . . , xh) = 0, f2(x1, . . . , xh) = 0,\n\u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 fm\u22121(x1, . . . , xh) = 0,\nand the conclusion Rk into an algebraic equation C = 0. Fix a variable ordering, say x1 \u227a \u00b7 \u00b7 \u00b7 \u227a xh, which is either given or chosen heuristically.\n4.1.3. Let P = {f1, . . . , fm\u22121} and Zero(P) denote the set of all common zeros of f1, . . . , fm\u22121. Using Wu-Ritt\u2019s algorithm, one can compute a Wu characteristic set C of P, which has the following triangular form c1(x1, . . . , xp1), c2(x1, . . . , xp1 , . . . , xp2),\n\u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 cr(x1, . . . , xp1 , . . . , xp2 , . . . , xpr)  , such that Zero(P/I) = Zero(C/I), where I is the product of the leading coefficients of the polynomials in C with respect to their leading variables, and Zero(P/I) = Zero(P) \\ Zero({I}). If C consists of a single nonzero constant, then the geometric relations in the hypothesis are inconsistent. In this case, add Pt to F and proceed to deal with Pt+1; otherwise, go to the next step.\nStep 4.2. [Instantiating and solving] Let u = {x1, . . . , xh}\\{xp1 , . . . , xpr}. Randomly choose a set u\u0304 of numeric values for the coordinates in u and determine (all possible) values x\u0304p1 , . . . , x\u0304pr for the other coordinates xp1 , . . . , xpr by solving the equations\ncj|u=u\u0304,xp1=x\u0304p1 ,...,xpj\u22121=x\u0304pj\u22121 = 0, j = 1, . . . , r,\nsuccessively for xp1 , . . . , xpr .\nStep 4.3. [Numeric checking] Compute the numeric value C\u0304 of C at u = u\u0304 and (xp1 , . . . , xpr) = (x\u0304p1 , . . . , x\u0304pr). If C\u0304 < \u03c4C (where \u03c4C is a prespecified tolerance determined on the basis of empirical results) for all the solutions (xp1 , . . . , xpr) = (x\u0304p1 , . . . , x\u0304pr), then the proposition Pt is a potential theorem. Otherwise, Pt must not be a theorem, so it is added to F."}, {"heading": "3.3 Proving Theorems", "text": "Let T1, . . . , Ts be the candidate propositions obtained after ruling out the set F of propositions from P by Algorithm 4. Now one can use Wu\u2019s method to prove the candidate propositions automatically.15\nFor each Td (1 \u2264 d \u2264 s), let C be the Wu characteristic set computed in step 4.1 of Algorithm 4 with Pt = Td. Then do the following two steps.\nStep 4.4. [Pseudo-division and irreducible decomposition]\n4.4.1. Compute the pseudo-remainder R of the conclusion polynomial C with respect to C. If R \u2261 0, then Zero(C/I) \u2282 Zero(C) and thus under the condition I 6= 0, the proposition Td is a theorem. In this case, go to step 4.5.\n4.4.2. Decompose C into finitely many irreducible ascending sets C1, . . . ,Ce such that Zero(P/I) = \u22c3e i=1 Zero(Ci/IIi), where each Ci has the same triangular form\nas C and Ii is the product of the leading coefficients of the polynomials in Ci with respect to their leading variables. Under the condition I 6= 0, each Ci represents an irreducible component of the algebraic variety Zero(P).\n4.4.3. For each Ci (1 \u2264 i \u2264 e), compute the pseudo-remainder Ri of C with respect to Ci. If Ri \u2261 0 for some i, then under the condition IIi 6= 0, the proposition Td is a partially true theorem. If Ri \u2261 0 for all i, then under the condition II1 \u00b7 \u00b7 \u00b7 Ie 6= 0, the proposition Td is a theorem.\nStep 4.5. [Analyzing nondegeneracy conditions] A candidate proposition may be proved to be a theorem, usually under certain inequality conditions. Some of the conditions are needed to ensure that the considered geometric configurations are in generic position (e.g., a triangle referred to in the proposition does not degenerate to a line). Such algebraic nondegeneracy conditions may be translated back into geometric form (see [32]). There are inequality conditions which are not necessarily connected to nondegeneracy. Those conditions are either unnecessary, or produced to make a partially true theorem a theorem, or included to make the statement of the proposition or its algebraic form rigorous."}, {"heading": "4 Implementation and Experiments", "text": "The effectiveness of the approach we have proposed for automated generation of geometric theorems from images of diagrams depends on the completeness and accuracy of the information retrieved as well as the capability and efficiency of the theorem prover used. In this section we present some experimental results with a preliminary implementation of the approach.\n15Wu\u2019s method is complete for proving geometric theorems involving equalities only.\nThe algorithms described in Section 2 have been implemented in C++. Images of diagrams for testing and character templates were prepared by using GeoGebra [31] which is a dynamic geometry software system for interactive construction of diagrams, annotation of labels for geometric objects, and exportation of images. Circles and lines are detected from the images of diagrams by using functions cvHoughCircles and cvHoughLines2 provided in OpenCV.\nEight parameters \u03c4l, \u03c4c, \u03b4, \u03c4p, \u03c4pl, \u03c4pc, \u03c4d, \u03c4a are used to specify tolerances in our approach for retrieving geometric information from images of diagrams. We firstly acquire empirical values \u03c4l, . . . , \u03c4a for \u03c4l, . . . , \u03c4a by making experiments on a set of test images with fixed size 400 \u00d7 400. Then, for any given image I of diagram, the tolerances will be automatically adjusted according to the size of I. For example, if the size of I is W \u00d7 H, then \u03c4c will be reset to \u03c4c min(W,H)/400 as \u03c4c is used to determine the equality of Euclidean distances. The parameters \u03c4l, \u03c4p, \u03b4, \u03c4pl, \u03c4pc, \u03c4d will be reset similarly, while \u03c4a will remain to be \u03c4a because \u03c4a is used to determine the equality of angles which are not affected by image scaling.\nThe strategies presented in Section 3.1 for automated generation of candidate propositions have been implemented in Java. As the computation of characteristic sets and irreducible triangular decomposition needed in the process of geometric theorem mining and proving are sophisticated and expensive symbolic computation processes, we choose to use Epsilon [29] for the involved polynomial elimination, triangularization, and decomposition and GEOTHER [32] for automated algebraization and proof of geometric theorems and automated interpretation of algebraic nondegeneracy conditions. An interface for transforming the specifications of candidate propositions into the native representations of GEOTHER has been developed.\nTo test our approach, we have made experiments on the images of diagrams shown in Table 6.16 The diagrams used for the experiments were selected from [25], provided that the theorems they illustrate can be expressed by using only the basic geometric relations listed in Table 1. Different diagrams may involve different types of basic relations. For example, the diagrams with Nos. 1 and 2 only involve \u201conLine\u201d relations; the diagrams with Nos. 3, 4, and 5 involve both \u201conLine\u201d and \u201cdEqual\u201d relations; the diagram with No. 6 involves both \u201conLine\u201d and \u201cPerp\u201d relations. It is easy to figure out from the results of test on the diagrams the capability of the current implementation of our approach. In Table 6, \u201cUndesired\u201d denotes the number of undesired geometric relations (e.g., those relations which hold occasionally in the input diagram, but do not hold in other diagrams for the same theorem); \u201cTime\u201d is recorded in seconds for information retrieval from the image;17 \u201cCandidates\u201d denotes\n16The theorems generated automatically from images of diagrams are presented on the website http://geo.cc4cm.org/data/recognizer/.\n17The programs for information retrieval are run on a machine with 1.86GHz CPU and 1.24G of memory.\nthe number of generated candidate propositions; and \u201cTheorems\u201d denotes the number of proved theorems.\nTable 6: Test results No. Image Undesired Time Candidates Theorems\n8 0 0.187 7 4\n9 0 0.124 8 7\n10 0 0.187 9 0\n9-11 0 0.14 5 5\n12 0 0.156 42 1\n13 1 0.249 8 8\n14 0 0.171 6 4\nTable 6: Test results No. Image Undesired Time Candidates Theorems\n15 0 0.2 2 2\n16 0 0.171 2 2\n17 0 0.187 4 4\n18 1 0.281 7 7\n19 10 0.312 3 3\n20 4 0.312 7 6\n21 11 0.451 10 0\nTable 6: Test results No. Image Undesired Time Candidates Theorems\n22 5 0.219 8 0\n23 27 0.453 9 0\nIn the test results, some undesired distance relations (such as \u2016AI\u2016 = \u2016JM\u2016 for the diagram image of the nine-point circle theorem with No. 18 and \u2016FI\u2016 = \u2016CH\u2016 for that of Pappus\u2019 theorem with No. 1) are retrieved due to insufficient accuracy of geometric object recognition under large error tolerance. Generally speaking, over-strict error tolerance may lead to the missing of useful geometric relations for theorems that should be discovered, while under-strict error tolerance may bring some spurious geometric relations. Appropriate trade-off in the selection of error tolerances for different images can help improve the completeness and accuracy of geometric information retrieval.\nFor some images of diagrams (such as the image for The\u0301bault\u2019s theorem with No. 12), the number of generated candidate propositions is big because some branch relations (e.g., \u2016AC\u2016 = \u2016CE\u2016, \u2016AC\u2016 = \u2016AE\u2016 \u21d2 \u2016AE\u2016 = \u2016CE\u2016) are not ruled out. For some other images of diagrams (such as the image for Morley\u2019s theorem with No. 10 and that for Newton\u2019s theorem with No. 22), though candidate propositions are generated successfully, the desired theorems cannot be proved by using algebraic methods. This failure of theorem proving is mainly for the following reasons.\n\u2022 The automatically generated specifications of candidate propositions are not appropriate enough. For example, one of the generated candidate propositions for the image with No. 10 is Proposition(Morley1, [\u2016EF\u2016 = \u2016DE\u2016, \u2220ABE = \u2220EBD, \u2220EBD = \u2220DBC, \u2220FAE = \u2220EAB, \u2220CAF = \u2220FAE, \u2220BCD = \u2220DCF , \u2220DCF = \u2220FCA, \u2016DF\u2016 = \u2016EF\u2016], [\u2016DF\u2016 = \u2016DE\u2016]) in which only one relation is selected for the conclusion. The proposition should have been proved to be true because it is obvious that \u2016EF\u2016 = \u2016DE\u2016 and \u2016DF\u2016 = \u2016EF\u2016 imply \u2016DF\u2016 = \u2016DE\u2016. However, symbolic computation with the algebraic relations expressing the hypothesis is so complicated that makes the program run out of memory. The candidate proposition fails to be a theorem because of inappropriate selection of relations for the hypothesis as well as the conclusion.\n\u2022 The functions in GEOTHER we have used for automatic assignment of\ncoordinates to points and ordering of variables are not well optimized.\nThus the resulting algebraic expressions are much more complicated than what could be produced with human optimization, so the involved algebraic computations are made more complex as well."}, {"heading": "5 Related Work", "text": ""}, {"heading": "5.1 Geometric Information Retrieval", "text": "Many methods have been proposed for shape recognition from images in the last two decades. Some of them have improved the performance of the traditional Hough transform by exploiting gradient information [12] or using more effective voting schemes [11]. Besides Hough transform, random algorithms for the detection of lines and circles have been proposed in [4, 5]. Those algorithms save a certain amount of storage space by first randomly computing a candidate line or circle and then performing an evidence collecting process to further determine whether the line or circle actually exists. Note that most of the shape detection methods are used to extract rough shapes of objects\u2019 edges from general images. Their accuracy of recognition is not required to be very high. For our purpose of recognizing geometric objects, it is crucial to use OpenCV with numeric data (such as the coordinates of points) to ensure that the accuracy of the detection results is sufficiently high, so that geometric relations implied in images of diagrams can be correctly determined through numeric computation."}, {"heading": "5.2 Geometric Theorem Discovery", "text": "The reader may consult [6, 8, 9, 17, 20, 21, 24] and references therein for extensive studies on algebraic methods (based on characteristic sets, triangular decomposition, and Gro\u0308bner bases) for automated proving and discovering of geometric theorems. Here as examples we mention the open web-based tool [3] developed for automatic discovery of theorems and relations in elementary Euclidean geometry and the deductive database approach [7] proposed for searching all the properties implied in given geometric configurations. In comparison with the existing work, the capability of discovering nontrivial theorems or deductive relations on geometric relations mined automatically from given images of diagrams reflects the novelty of our approach."}, {"heading": "5.3 Other Related Work", "text": "Besides coordinate-based algebraic methods, other methods for automated theorem proving can also be incorporated into our approach to verify the truth of candidate\npropositions. Such methods include the area method, the full-angle method, the bracket algebra method, methods based on Clifford algebra, axiom-based deductive methods, and diagrammatic reasoning methods (see [2, 6, 21] and references therein). Some dynamic geometry software systems have implemented specialized methods (e.g., randomized proving methods in Cinderella [14]) to prove theorems for constructed diagrams, or interfaces with geometric theorem provers for generating proofs diagrammatically [23, 26] and exploring knowledge in repositories of geometric constructions and proofs [19]. A web-based library of problems in geometry is being created for testing and evaluating methods and tools of automated theorem proving [18]. A new computational model for computer assisted construction and reasoning of origami has been well studied and used for proving some complicated theorems [13]. Recently, proof assistants have been used to interactively construct and verify proofs in geometry (see, e.g., [15]) and formal systems have established faithful models of proofs from Euclid\u2019s Elements, making use of diagrammatic reasoning (see, e.g., [1])."}, {"heading": "6 Conclusion and Future Work", "text": "The approach proposed in this paper opens up a completely new route for geometric knowledge discovery and reasoning: retrieve characteristic information (geometric objects and their relations) from simple and inexact data (images of diagrams), generate potential knowledge (candidate propositions) from the retrieved information, and discover profound knowledge (geometric theorems) and validate it by means of automated reasoning (geometric theorem proving). The success of our approach demonstrates the feasibility of automatically acquiring formalized geometric knowledge in quantity from a large scale of images of diagrams available in electronic documents and resources and of efficiently managing such knowledge in a retrievable structure with diagrams instead of ambiguous statements in natural languages.\nOur work is still ongoing. More experiments are being carried out and more techniques and strategies are being developed to improve the accuracy of retrieving geometric information from images of diagrams and of ruling out branch relations and introducing derived relations, to generate appropriate specifications of candidate propositions heuristically, and to enhance the efficiency of geometric theorem proving with optimal assignment of coordinates to points.\nCurrently, the images for experiments are produced from accurate diagrams drawn by using dynamic geometry software. We will extend our approach to deal with scanned and photographed images of hand-drawn diagrams in which the implied geometric relations are inexact. In this case, the retrieval of geometric information becomes more difficult and requires more specialized techniques. The outcome of our study is expected to have practical applications in those areas where geometric information retrieval, knowledge discovery and management, and education are of\nconcern."}], "references": [{"title": "A formal system for Euclid\u2019s Elements", "author": ["J. Avigad", "E. Dean", "J. Mumma"], "venue": "The Review of Symbolic Logic", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2009}, {"title": "Diagrammatic reasoning in projective geometry. In: Logic, Language and Reasoning (H.J", "author": ["P. Balbiani", "L. Fari\u00f1as del Cerro"], "venue": "Ohlbach and U. Reyle, eds.), Trends in Logic", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1999}, {"title": "A web-based intelligent system for geometric discovery", "author": ["F. Botana"], "venue": "Computational Science \u2013 ICCS 2003,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2003}, {"title": "Chung: A new randomized algorithm for detecting lines. Real-Time Imaging", "author": ["K.L.T.C. Chen"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2001}, {"title": "Chung: An efficient randomized algorithm for detecting circles", "author": ["K.L.T.C. Chen"], "venue": "Computer Vision and Image Understanding", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2001}, {"title": "Automated reasoning in geometry, Handbook of Automated Reasoning, Volume I", "author": ["S.-C. Chou", "X.-S. Gao"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2001}, {"title": "A deductive database approach to automated geometry theorem proving and discovering", "author": ["S.-C. Chou", "X.-S. Gao", "J.-Z. Zhang"], "venue": "Journal of Automated Reasoning", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1996}, {"title": "Wu\u2019s method for automated geometry theorem proving and discovering. In: Mathematics mechanization and applications", "author": ["S.-C. Chou", "D. Lin"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2000}, {"title": "On protocols for the automated discovery of theorems in elementary geometry", "author": ["G. Dalzotto", "T. Recio"], "venue": "Journal of Automated Reasoning", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2009}, {"title": "Hart: Use of the Hough transformation to detect lines and curves in pictures. Communications of Association for Computing Machinery", "author": ["P.E.R.O. Duda"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1972}, {"title": "Real-time line detection through an improved Hough transform voting scheme. The Journal of the Pattern Recognition", "author": ["L.A.F. Fernandes", "M.M. Oliveira"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2005}, {"title": "Gradient based progressive probabilistic Hough transform. Vision, Image and Signal Processing", "author": ["C. Galambos", "J. Kittler", "J. Matas"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2001}, {"title": "Morley\u2019s theorem revisited: Origami construction and automated proof", "author": ["T. Ida", "A. Kasem", "F. Ghourabi", "H. Takahashi"], "venue": "Journal of Symbolic Computation", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2011}, {"title": "Foundations of dynamic geometry", "author": ["U. Kortenkamp"], "venue": "Ph.D. thesis,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1999}, {"title": "Formalizing projective plane geometry in Coq", "author": ["N. Magaud", "J. Narboux", "P. Schreck"], "venue": "Automated Deduction in Geometry,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2011}, {"title": "Robust detection of lines using the progressive probabilistic Hough transform", "author": ["J. Matas", "C. Galambos", "J. Kittler"], "venue": "Computer Vision and Image Understanding", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2000}, {"title": "Automatic discovery of geometry theorems using minimal canonical comprehensive Gr\u00f6bner systems", "author": ["A. Montes", "T. Recio"], "venue": "Automated Deduction in Geometry,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2007}, {"title": "Thousands of geometric problems for geometric theorem provers (TGTP)", "author": ["P. Quaresma"], "venue": "Automated Deduction in Geometry,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2011}, {"title": "Jani\u010di\u0107: GeoThms \u2014 A web system for Euclidean constructive geometry", "author": ["P.P. Quaresma"], "venue": "Electronic Notes in Theoretical Computer Science", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2007}, {"title": "Elimination procedures for mechanical theorem proving in geometry", "author": ["D. Wang"], "venue": "Annals of Mathematics and Artificial Intelligence", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1995}, {"title": "Geometry machines: from AI to SMC. In: Artificial Intelligence and Symbolic Mathematical Computation", "author": ["D. Wang"], "venue": "eds.), LNCS", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 1996}, {"title": "Elimination methods", "author": ["D. Wang"], "venue": null, "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2001}, {"title": "Combining dynamic geometry, automated geometry theorem proving and diagrammatic proofs", "author": ["S. Wilson", "J.D. Fleuriot"], "venue": "Proceedings of the European Joint Conferences on Theory and Practice of Software (ETAPS), Satellite Workshop on User Interfaces for Theorem Provers (UITP),", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2005}, {"title": "Mechanical theorem proving in geometries: Basic principles (translated from the Chinese by X", "author": ["W.-t. Wu"], "venue": "Jin and D. Wang)", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 1994}, {"title": "The famous theorems of geometry (Chinese edition, translated by Y. Chen)", "author": ["K. Yano"], "venue": "Shanghai Scientific and Technical Publishers", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1986}, {"title": "Visually Dynamic Presentation of Proofs in Plane Geometry", "author": ["Z. Ye", "S.-C. Chou", "X.-S. Gao"], "venue": "Journal of Automated Reasoning", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2010}, {"title": "Comparative study of Hough transform methods for circle finding", "author": ["H.K. Yuen", "J. Princen", "J. Illingworth", "J. Kittler"], "venue": "Image and Vision Computing", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 1990}, {"title": "Suen: A fast parallel algorithm for thinning digital patterns. Communications of the Association for Computing Machinery", "author": ["C.Y.T.Y. Zhang"], "venue": null, "citeRegEx": "28", "shortCiteRegEx": "28", "year": 1984}], "referenceMentions": [{"referenceID": 9, "context": "Our approach to recognizing basic geometric objects from images of diagrams is based on Hough transform [10], a general technique for estimating the parameters of a shape from its boundary points.", "startOffset": 104, "endOffset": 108}, {"referenceID": 26, "context": "[Detect] Apply the gradient-based Hough transform (see algorithm 21HT in [27]) on I1 to acquire a set C of circles.", "startOffset": 73, "endOffset": 77}, {"referenceID": 27, "context": ", the technique in Zhang\u2019s parallel thinning algorithm [28]) to obtain a new image I2 .", "startOffset": 55, "endOffset": 59}, {"referenceID": 15, "context": "[Detect] Apply the progressive probabilistic Hough transform (see [16]) on I2 to acquire a set L of segments.", "startOffset": 66, "endOffset": 70}, {"referenceID": 23, "context": "In what follows we present a numeric verification technique, based on the characteristic set method of Wu [24, 22], for finding counterexamples to rule out false propositions.", "startOffset": 106, "endOffset": 114}, {"referenceID": 21, "context": "In what follows we present a numeric verification technique, based on the characteristic set method of Wu [24, 22], for finding counterexamples to rule out false propositions.", "startOffset": 106, "endOffset": 114}, {"referenceID": 24, "context": "The diagrams used for the experiments were selected from [25], provided that the theorems they illustrate can be expressed by using only the basic geometric relations listed in Table 1.", "startOffset": 57, "endOffset": 61}, {"referenceID": 11, "context": "Some of them have improved the performance of the traditional Hough transform by exploiting gradient information [12] or using more effective voting schemes [11].", "startOffset": 113, "endOffset": 117}, {"referenceID": 10, "context": "Some of them have improved the performance of the traditional Hough transform by exploiting gradient information [12] or using more effective voting schemes [11].", "startOffset": 157, "endOffset": 161}, {"referenceID": 3, "context": "Besides Hough transform, random algorithms for the detection of lines and circles have been proposed in [4, 5].", "startOffset": 104, "endOffset": 110}, {"referenceID": 4, "context": "Besides Hough transform, random algorithms for the detection of lines and circles have been proposed in [4, 5].", "startOffset": 104, "endOffset": 110}, {"referenceID": 5, "context": "The reader may consult [6, 8, 9, 17, 20, 21, 24] and references therein for extensive studies on algebraic methods (based on characteristic sets, triangular decomposition, and Gr\u00f6bner bases) for automated proving and discovering of geometric theorems.", "startOffset": 23, "endOffset": 48}, {"referenceID": 7, "context": "The reader may consult [6, 8, 9, 17, 20, 21, 24] and references therein for extensive studies on algebraic methods (based on characteristic sets, triangular decomposition, and Gr\u00f6bner bases) for automated proving and discovering of geometric theorems.", "startOffset": 23, "endOffset": 48}, {"referenceID": 8, "context": "The reader may consult [6, 8, 9, 17, 20, 21, 24] and references therein for extensive studies on algebraic methods (based on characteristic sets, triangular decomposition, and Gr\u00f6bner bases) for automated proving and discovering of geometric theorems.", "startOffset": 23, "endOffset": 48}, {"referenceID": 16, "context": "The reader may consult [6, 8, 9, 17, 20, 21, 24] and references therein for extensive studies on algebraic methods (based on characteristic sets, triangular decomposition, and Gr\u00f6bner bases) for automated proving and discovering of geometric theorems.", "startOffset": 23, "endOffset": 48}, {"referenceID": 19, "context": "The reader may consult [6, 8, 9, 17, 20, 21, 24] and references therein for extensive studies on algebraic methods (based on characteristic sets, triangular decomposition, and Gr\u00f6bner bases) for automated proving and discovering of geometric theorems.", "startOffset": 23, "endOffset": 48}, {"referenceID": 20, "context": "The reader may consult [6, 8, 9, 17, 20, 21, 24] and references therein for extensive studies on algebraic methods (based on characteristic sets, triangular decomposition, and Gr\u00f6bner bases) for automated proving and discovering of geometric theorems.", "startOffset": 23, "endOffset": 48}, {"referenceID": 23, "context": "The reader may consult [6, 8, 9, 17, 20, 21, 24] and references therein for extensive studies on algebraic methods (based on characteristic sets, triangular decomposition, and Gr\u00f6bner bases) for automated proving and discovering of geometric theorems.", "startOffset": 23, "endOffset": 48}, {"referenceID": 2, "context": "Here as examples we mention the open web-based tool [3] developed for automatic discovery of theorems and relations in elementary Euclidean geometry and the deductive database approach [7] proposed for searching all the properties implied in given geometric configurations.", "startOffset": 52, "endOffset": 55}, {"referenceID": 6, "context": "Here as examples we mention the open web-based tool [3] developed for automatic discovery of theorems and relations in elementary Euclidean geometry and the deductive database approach [7] proposed for searching all the properties implied in given geometric configurations.", "startOffset": 185, "endOffset": 188}, {"referenceID": 1, "context": "Such methods include the area method, the full-angle method, the bracket algebra method, methods based on Clifford algebra, axiom-based deductive methods, and diagrammatic reasoning methods (see [2, 6, 21] and references therein).", "startOffset": 195, "endOffset": 205}, {"referenceID": 5, "context": "Such methods include the area method, the full-angle method, the bracket algebra method, methods based on Clifford algebra, axiom-based deductive methods, and diagrammatic reasoning methods (see [2, 6, 21] and references therein).", "startOffset": 195, "endOffset": 205}, {"referenceID": 20, "context": "Such methods include the area method, the full-angle method, the bracket algebra method, methods based on Clifford algebra, axiom-based deductive methods, and diagrammatic reasoning methods (see [2, 6, 21] and references therein).", "startOffset": 195, "endOffset": 205}, {"referenceID": 13, "context": ", randomized proving methods in Cinderella [14]) to prove theorems for constructed diagrams, or interfaces with geometric theorem provers for generating proofs diagrammatically [23, 26] and exploring knowledge in repositories of geometric constructions and proofs [19].", "startOffset": 43, "endOffset": 47}, {"referenceID": 22, "context": ", randomized proving methods in Cinderella [14]) to prove theorems for constructed diagrams, or interfaces with geometric theorem provers for generating proofs diagrammatically [23, 26] and exploring knowledge in repositories of geometric constructions and proofs [19].", "startOffset": 177, "endOffset": 185}, {"referenceID": 25, "context": ", randomized proving methods in Cinderella [14]) to prove theorems for constructed diagrams, or interfaces with geometric theorem provers for generating proofs diagrammatically [23, 26] and exploring knowledge in repositories of geometric constructions and proofs [19].", "startOffset": 177, "endOffset": 185}, {"referenceID": 18, "context": ", randomized proving methods in Cinderella [14]) to prove theorems for constructed diagrams, or interfaces with geometric theorem provers for generating proofs diagrammatically [23, 26] and exploring knowledge in repositories of geometric constructions and proofs [19].", "startOffset": 264, "endOffset": 268}, {"referenceID": 17, "context": "A web-based library of problems in geometry is being created for testing and evaluating methods and tools of automated theorem proving [18].", "startOffset": 135, "endOffset": 139}, {"referenceID": 12, "context": "A new computational model for computer assisted construction and reasoning of origami has been well studied and used for proving some complicated theorems [13].", "startOffset": 155, "endOffset": 159}, {"referenceID": 14, "context": ", [15]) and formal systems have established faithful models of proofs from Euclid\u2019s Elements, making use of diagrammatic reasoning (see, e.", "startOffset": 2, "endOffset": 6}, {"referenceID": 0, "context": ", [1]).", "startOffset": 2, "endOffset": 5}], "year": 2014, "abstractText": "We propose an approach to generate geometric theorems from electronic images of diagrams automatically. The approach makes use of techniques of Hough transform to recognize geometric objects and their labels and of numeric verification to mine basic geometric relations. Candidate propositions are generated from the retrieved information by using six strategies and geometric theorems are obtained from the candidates via algebraic computation. Experiments with a preliminary implementation illustrate the effectiveness and efficiency of the proposed approach for generating nontrivial theorems from images of diagrams. This work demonstrates the feasibility of automated discovery of profound geometric knowledge from simple image data and has potential applications in geometric knowledge management and education.", "creator": "LaTeX with hyperref package"}}}