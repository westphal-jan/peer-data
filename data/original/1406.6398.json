{"id": "1406.6398", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Jun-2014", "title": "Incremental Clustering: The Case for Extra Clusters", "abstract": "The explosion in the amount of data available for analysis often necessitates a transition from batch to incremental clustering methods, which process one element at a time and typically store only a small subset of the data. In this paper, we initiate the formal analysis of incremental clustering methods focusing on the types of cluster structure that they are able to detect. We find that the incremental setting is strictly weaker than the batch model, proving that a fundamental class of cluster structures that can readily be detected in the batch setting is impossible to identify using any incremental method. Furthermore, we show how the limitations of incremental clustering can be overcome by allowing additional clusters.", "histories": [["v1", "Tue, 24 Jun 2014 21:41:03 GMT  (80kb,D)", "http://arxiv.org/abs/1406.6398v1", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["margareta ackerman", "sanjoy dasgupta"], "accepted": true, "id": "1406.6398"}, "pdf": {"name": "1406.6398.pdf", "metadata": {"source": "CRF", "title": "Incremental Clustering: The Case for Extra Clusters", "authors": ["Margareta Ackerman", "Sanjoy Dasgupta"], "emails": ["maackerman@ucsd.edu", "dasgupta@eng.ucsd.edu"], "sections": [{"heading": "1 Introduction", "text": "Clustering is a fundamental form of data analysis that is applied in a wide variety of domains, from astronomy to zoology. With the radical increase in the amount of data collected in recent years, the use of clustering has expanded even further, to applications such as personalization and targeted advertising. Clustering is now a core component of interactive systems that collect information on millions of users on a daily basis. It is becoming impractical to store all relevant information in memory at the same time, often necessitating the transition to incremental methods.\nIncremental methods receive data elements one at a time and typically use much less space than is needed to store the complete data set. This presents a particularly interesting challenge for unsupervised learning, which unlike its supervised counterpart, also suffers from an absence of a unique target truth. Observe that not all data possesses a meaningful clustering, and when an inherent structure exists, it need not be unique (see Figure 1 for an example). As such, different users may be interested in very different partitions. Consequently, different clustering methods detect distinct types of structure, often yielding radically different results on the same data. Until now, differences in the input-output behaviour of clustering methods have only been studied in the batch setting [10, 11, 7, 4, 3, 5, 2, 17]. In this work, we take a first look at the types of cluster structures that can be discovered by incremental clustering methods.\nTo qualify the type of cluster structure present in data, a number of notions of clusterability have been proposed (for a detailed discussion, see [1] and [7]). These notions capture the structure of the target clustering: the clustering desired by the user for a specific application. As such, notions of clusterability facilitate the analysis of clustering methods by making it possible to formally ascertain whether an algorithm correctly recovers the desired partition.\nOne elegant notion of clusterability, introduced by Balcan et al. [7], requires that every element be closer to data in its own cluster than to other points. For simplicity, we will refer to clusterings that adhere to this requirement as nice. It was shown by [7] that such clusterings are readily detected offline by classical batch algorithms. On the other hand, we prove (Theorem 3.8) that no incremental method can discover these partitions. Thus, batch algorithms are significantly stronger than incremental methods in their ability to detect cluster structure.\nar X\niv :1\n40 6.\n63 98\nv1 [\ncs .L\nG ]\n2 4\nJu n\n20 14\nIn an effort to identify types of cluster structure that incremental methods can recover, we turn to stricter notions of clusterability. A notion used by Epter et al. [8] requires that the minimum separation between clusters be larger than the maximum cluster diameter. We call such clusterings perfect, and we present an incremental method that is able to recover them (Theorem 4.3).\nYet, this result alone is unsatisfactory. If, indeed, it were necessary to resort to such strict notions of clusterability, then incremental methods would have limited utility. Is there some other way to circumvent the limitations of incremental techniques?\nIt turns out that incremental methods become a lot more powerful when we slightly alter the clustering problem: if, instead of asking for exactly the target partition, we are satisfied with a refinement, that is, a partition each of whose clusters is contained within some target cluster. Indeed, in many applications, it is reasonable to allow additional clusters.\nIncremental methods benefit from additional clusters in several ways. First, we exhibit an algorithm that is able to capture nice k-clusterings if it is allowed to return a refinement with 2k\u22121 clusters (Theorem 5.3), which could be reasonable for small k. We also show that this exponential dependence on k is unavoidable in general (Theorem 5.4). As such, allowing additional clusters enables incremental techniques to overcome their inability to detect nice partitions.\nA similar phenomenon is observed in the analysis of the sequential k-means algorithm, one of the most popular methods of incremental clustering. We show that it is unable to detect perfect clusterings (Theorem 4.4), but that if each cluster contains a significant fraction of the data, then it can recover a refinement of (a slight variant of) nice clusterings (Theorem 5.6).\nLastly, we demonstrate the power of additional clusters by relaxing the niceness condition, requiring only that clusters have a significant core (defined in Section 5.3). Under this milder requirement, we show that a randomized incremental method is able to discover a refinement of the target partition (Theorem 5.10).\nDue to space limitations, many proofs appear in the supplementary material."}, {"heading": "2 Definitions", "text": "We consider a space X equipped with a symmetric distance function d : X \u00d7 X \u2192 R+ satisfying d(x, x) = 0. An example is X = Rp with d(x, x\u2032) = \u2016x \u2212 x\u2032\u20162. It is assumed that a clustering algorithm can invoke d(\u00b7, \u00b7) on any pair x, x\u2032 \u2208 X . A clustering (or, partition) of X is a set of clusters C = {C1, . . . , Ck} such that Ci \u2229Cj = \u2205 for all i 6= j, and X = \u222aki=1Ci. A k-clustering is a clustering with k clusters. Write x \u223cC y if x, y are both in some cluster Cj ; and x 6\u223cC y otherwise. This is an equivalence relation.\nDefinition 2.1. An incremental clustering algorithm has the following structure:\nfor n = 1, . . . , N : See data point xn \u2208 X Select model Mn \u2208M\nwhere N might be \u221e, and M is a collection of clusterings of X . We require the algorithm to have bounded memory, typically a function of the number of clusters. As a result, an incremental algorithm cannot store all data points.\nNotice that the ordering of the points is unspecified. In our results, we consider two types of ordering: arbitrary ordering, which is the standard setting in online learning and allows points to be ordered by an adversary, and random ordering, which is standard in statistical learning theory.\nIn exemplar-based clustering,M = X k: each model is a list of k \u201ccenters\u201d (t1, . . . , tk) that induce a clustering of X , where every x \u2208 X is assigned to the cluster Ci for which d(x, ti) is smallest (breaking ties by picking the smallest i). All the clusterings we will consider in this paper will be specified in this manner."}, {"heading": "2.1 Examples of incremental clustering algorithms", "text": "The most well-known incremental clustering algorithm is probably sequential k-means, which is meant for data in Euclidean space. It is an incremental variant of Lloyd\u2019s algorithm [14, 15]: Algorithm 2.2. Sequential k-means.\nSet T = (t1, . . . , tk) to the first k data points Initialize the counts n1, n2, ..., nk to 1 Repeat:\nAcquire the next example, x If ti is the closest center to x:\nIncrement ni Replace ti by ti + (1/ni)(x\u2212 ti)\nThis method, and many variants of it, have been studied intensively in the literature on selforganizing maps [13]. It attempts to find centers T that optimize the k-means cost function:\ncost(T ) = \u2211\ndata x\nmin t\u2208T \u2016x\u2212 t\u20162.\nIt is not hard to see that the solution obtained by sequential k-means at any given time can have cost far from optimal; we will see an even stronger lower bound in Theorem 4.4. Nonetheless, we will also see that if additional centers are allowed, this algorithm is able to correctly capture some fundamental types of cluster structure.\nAnother family of clustering algorithms with incremental variants are agglomerative procedures [10] like single-linkage [9]. Given n data points in batch mode, these algorithms produce a hierarchical clustering on all n points. But the hierarchy can be truncated at the intermediate k-clustering, yielding a tree with k leaves. Moreover, there is a natural scheme for updating these leaves incrementally: Algorithm 2.3. Sequential agglomerative clustering.\nSet T to the first k data points Repeat:\nGet the next point x and add it to T Select t, t\u2032 \u2208 T for which dist(t, t\u2032) is smallest Replace t, t\u2032 by the single center merge(t, t\u2032)\nHere the two functions dist and merge can be varied to optimize different clustering criteria, and often require storing additional sufficient statistics, such as counts of individual clusters. For instance, Ward\u2019s method of average linkage [16] is geared towards the k-means cost function. We will consider the variant obtained by setting dist(t, t\u2032) = d(t, t\u2032) and merge(t, t\u2032) to either t or t\u2032:\nAlgorithm 2.4. Sequential nearest-neighbour clustering.\nSet T to the first k data points Repeat:\nGet the next point x and add it to T Let t, t\u2032 be the two closest points in T Replace t, t\u2032 by either of these two points\nWe will see that this algorithm is effective at picking out a large class of cluster structures."}, {"heading": "2.2 The target clustering", "text": "Unlike supervised learning tasks, which are typically endowed with a unique correct classification, clustering is ambiguous. One approach to disambiguating clustering is identifying an objective function such as k-means, and then defining the clustering task as finding the partition with minimum cost. Although there are situations to which this approach is well-suited, many clustering applications do not inherently lend themselves to any specific objective function. As such, while objective functions play an essential role in deriving clustering methods, they do not circumvent the ambiguous nature of clustering.\nThe term target clustering denotes the partition that a specific user is looking for in a data set. This notion was used by Balcan et al. [7] to study what constraints on cluster structure make them efficiently identifiable in a batch setting. In this paper, we consider families of target clusterings that satisfy different properties, and ask whether incremental algorithms can identify such clusterings.\nThe target clustering C is defined on a possibly infinite space X , from which the learner receives a sequence of points. At any time n, the learner has seen n data points and has some clustering that ideally agrees with C on these points. The methods we consider are exemplar-based: they all specify a list of points T in X that induce a clustering of X (recall the discussion just before Section 2.1). We consider two requirements:\n\u2022 (Strong) T induces the target clustering C. \u2022 (Weaker) T induces a refinement of the target clustering C: that is, each cluster induced by T is part of some cluster of C.\nIf the learning algorithm is run on a finite data set, then we require these conditions to hold once all points have been seen. In our positive results, we will also consider infinite streams of data, and show that these conditions hold at every time n, taking the target clustering restricted to the points seen so far."}, {"heading": "3 A basic limitation of incremental clustering", "text": "We begin by studying limitations of incremental clustering compared with the batch setting.\nOne of the most fundamental types of cluster structure is what we shall call nice clusterings for the sake of brevity. Originally introduced by Balcan et al. [7] under the name \u201cstrict separation,\u201d this notion has since been applied in [2], [1], and [6], to name a few. Definition 3.1 (Nice clustering). A clustering C of (X , d) is nice if for all x, y, z \u2208 X , d(y, x) < d(z, x) whenever x \u223cC y and x 6\u223cC z.\nSee Figure 2 for an example. Observation 3.2. If we select one point from every cluster of a nice clustering C, the resulting set induces C. (Moreover, niceness is the minimal property under which this holds.)\nA nice k-clustering is not, in general, unique. For example, consider X = {1, 2, 4, 5} on the real line under the usual distance metric; then both {{1}, {2}, {4, 5}} and {{1, 2}, {4}, {5}} are nice 3-clusterings of X . Thus we start by considering data with a unique nice k-clustering. Since niceness is a strong requirement, we might expect that it is easy to detect. Indeed, in the batch setting, a unique nice k-clustering can be recovered by single-linkage [7]. However, we show that nice partitions cannot be detected in the incremental setting, even if they are unique.\nWe start by formalizing the ordering of the data. An ordering function O takes a finite set X and returns an ordering of the points in this set. An ordered distance space is denoted by (O[X ], d). Definition 3.3. An incremental clustering algorithm A is nice-detecting if, given a positive integer k and (X , d) that has a unique nice k-clustering C, the procedure A(O[X ], d, k) outputs C for any ordering function O.\nIn this section, we show (Theorem 3.8) that no deterministic memory-bounded incremental method is nice-detecting, even for points in Euclidean space under the `2 metric.\nWe start with the intuition behind the proof. Fix any incremental clustering algorithm and set the number of clusters to 3. We will specify a data set D with a unique nice 3-clustering that this algorithm cannot detect. The data set has two subsets, D1 and D2, that are far away from each other but are otherwise nearly isomorphic. The target 3-clustering is either: (D1, together with a 2-clustering of D2) or (D2, together with a 2-clustering of D1).\nThe central piece of the construction is the configuration of D1 (and likewise, D2). The first point presented to the learner is xo. This is followed by a clique of points xi that are equidistant from each other and have the same, slightly larger, distance to xo. For instance, we could set distances within the clique d(xi, xj) to 1, and distances d(xi, xo) to 2. Finally there is a point x\u2032 that is either exactly like one of the xi\u2019s (same distances), or differs from them in just one specific distance d(x\u2032, xj) which is set to 2. In the former case, there is a nice 2-clustering of D1, in which one cluster is xo and the other cluster is everything else. In the latter case, there is no nice 2-clustering, just the 1-clustering consisting of all of D1.\nD2 is like D1, but is rigged so that if D1 has a nice 2-clustering, then D2 does not; and vice versa.\nThe two possibilities for D1 are almost identical, and it would seem that the only way an algorithm can distinguish between them is by remembering all the points it has seen. A memory-bounded incremental learner does not have this luxury. Formalizing this argument requires some care; we cannot, for instance, assume that the learner is using its memory to store individual points.\nIn order to specify D1, we start with a larger collection of points that we call an M -configuration, and that is independent of any algorithm. We then pick two possibilities for D1 (one with a nice 2-clustering and one without) from this collection, based on the specific learner.\nDefinition 3.4. In any metric space (X , d), for any integer M > 0, define an M -configuration to be a collection of 2M + 1 points xo, x1, . . . , xM , x\u20321, . . . , x \u2032 M \u2208 X such that\n\u2022 All interpoint distances are in the range [1, 2].\n\u2022 d(xo, xi), d(xo, x\u2032i) \u2208 (3/2, 2] for all i \u2265 1.\n\u2022 d(xi, xj), d(x\u2032i, x\u2032j), d(xi, x\u2032j) \u2208 [1, 3/2] for all i 6= j \u2265 1.\n\u2022 d(xi, x\u2032i) > d(xo, xi).\nThe significance of this point configuration is as follows.\nLemma 3.5. Let xo, x1, . . . , xM , x\u20321, . . . , x\u2032M be any M -configuration in (X , d). Pick any index 1 \u2264 j \u2264M and any subset S \u2282 [M ] with |S| > 1. Then the set A = {xo, x\u2032j} \u222a {xi : i \u2208 S} has a nice 2-clustering if and only if j 6\u2208 S.\nProof. Suppose A has a nice 2-clustering {C1, C2}, where C1 is the cluster that contains xo. We first show that C1 is a singleton cluster. If C1 also contains some x`, then it must contain all the points {xi : i \u2208 S} by niceness since d(x`, xi) \u2264 3/2 < d(x`, xo). Since |S| > 1, these points include some xi with i 6= j. Whereupon C1 must also contain x\u2032j , since d(xi, x\u2032j) \u2264 3/2 < d(xi, xo). But this means C2 is empty.\nLikewise, ifC1 contains x\u2032j , then it also contains all {xi : i \u2208 S, i 6= j}, since d(xi, x\u2032j) < d(xo, x\u2032j). There is at least one such xi, and we revert to the previous case.\nTherefore C1 = {xo} and, as a result, C2 = {xi : i \u2208 S} \u222a {x\u2032j}. This 2-clustering is nice if and only if d(xo, x\u2032j) > d(xi, x \u2032 j) and d(xo, xi) > d(x \u2032 j , xi) for all i \u2208 S, which in turn is true if and only if j 6\u2208 S.\nBy putting together two M -configurations, we obtain:\nTheorem 3.6. Let (X , d) be any metric space that contains two M -configurations separated by a distance of at least 4. Then, there is no deterministic incremental algorithm with \u2264 M/2 bits of storage that is guaranteed to recover nice 3-clusterings of data sets drawn from X , even when limited to instances in which such clusterings are unique.\nProof. Suppose the deterministic incremental learner has a memory capacity of b bits. We will refer to the memory contents of the learner as its state, \u03c3 \u2208 {0, 1}b. Call the two M -configurations xo, x1, . . . , xM , x\u20321, . . . , x \u2032 M and zo, z1, . . . , zM , z \u2032 1, . . . , z \u2032 M . We feed the following points to the learner:\nBatch 1: xo and zo Batch 2: b distinct points from x1, . . . , xM Batch 3: b distinct points from z1, . . . , zM Batch 4: Two final points x\u2032j1 and z \u2032 j2\nThe learner\u2019s state after seeing batch 2 can be described by a function f : {x1, . . . , xM}b \u2192 {0, 1}b. The number of distinct sets of b points in batch 2 is ( M b ) > (M/b)b. If M \u2265 2b, this is > 2b, which means that two different sets of points must lead to the same state, call it \u03c3 \u2208 {0, 1}b. Let the indices of these sets be S1, S2 \u2282 [M ] (so |S1| = |S2| = b), and pick any j1 \u2208 S1 \\ S2. Next, suppose the learner is in state \u03c3 and is then given batch 3. We can capture its state at the end of this batch by a function g : {z1, . . . , zM}b \u2192 {0, 1}b, and once again there must be distinct sets T1, T2 \u2282 [M ] that yield the same state \u03c3\u2032. Pick any j2 \u2208 T1 \\ T2. It follows that the sequences of inputs xo, zo, (xi : i \u2208 S1), (zi : i \u2208 T2), x\u2032j1 , z \u2032 j2\nand xo, zo, (xi : i \u2208 S2), (zi : i \u2208 T1), x\u2032j1 , z \u2032 j2\nproduce the same final state and thus the same answer. But in the first case, by Lemma 3.5, the unique nice 3-clustering keeps the x\u2019s together and splits the z\u2019s, whereas in the second case, it splits the x\u2019s and keeps the z\u2019s together.\nAn M -configuration can be realized in Euclidean space:\nLemma 3.7. There is an absolute constant co such that for any dimension p, the Euclidean space Rp, with L2 norm, contains M -configurations for all M < 2cop.\nThe overall conclusions are the following.\nTheorem 3.8. There is no memory-bounded deterministic nice-detecting incremental clustering algorithm that works in arbitrary metric spaces. For data in Rp under the `2 metric, there is no deterministic nice-detecting incremental clustering algorithm using less than 2cop\u22121 bits of memory."}, {"heading": "4 A more restricted class of clusterings", "text": "The discovery that nice clusterings cannot be detected using any incremental method, even though they are readily detected in a batch setting, speaks to the substantial limitations of incremental algorithms. We next ask whether there is a well-behaved subclass of nice clusterings that can be detected using incremental methods. Following [8, 2, 5, 1], among others, we consider clusterings in which the maximum cluster diameter is smaller than the minimum inter-cluster separation. Definition 4.1 (Perfect clustering). A clustering C of (X , d) is perfect if d(x, y) < d(w, z) whenever x \u223cC y, w 6\u223cC z.\nAny perfect clustering is nice. But unlike nice clusterings, perfect clusterings are unique: Lemma 4.2. For any (X , d) and k, there is at most one perfect k-clustering of (X , d).\nWhenever an algorithm can detect perfect clusterings, we call it perfect-detecting. Formally, an incremental clustering algorithm A is perfect-detecting if, given a positive integer k and (X , d) that has a perfect k-clustering, A(O[X ], d, k) outputs that clustering for any ordering function O. We start with an example of a simple perfect-detecting algorithm. Theorem 4.3. Sequential nearest-neighbour clustering (Algorithm 2.4) is perfect-detecting.\nWe next turn to sequential k-means (Algorithm 2.2), one of the most popular methods for incremental clustering. Interestingly, it is unable to detect perfect clusterings.\nIt is not hard to see that a perfect k-clustering is a local optimum of k-means. We will now see an example in which the perfect k-clustering is the global optimum of the k-means cost function, and yet sequential k-means fails to detect it. Theorem 4.4. There is a set of four points in R3 with a perfect 2-clustering that is also the global optimum of the k-means cost function (for k = 2). However, there is no ordering of these points that will enable this clustering to be detected by sequential k-means."}, {"heading": "5 Incremental clustering with extra clusters", "text": "Returning to the basic lower bound of Theorem 3.8, it turns out that a slight shift in perspective greatly improves the capabilities of incremental methods. Instead of aiming to exactly discover the target partition, it is sufficient in some applications to merely uncover a refinement of it. Formally, a clustering C of X is a refinement of clustering C\u2032 of X , if x \u223cC y implies x \u223cC\u2032 y for all x, y \u2208 X . We start by showing that although incremental algorithms cannot detect nice k-clusterings, they can find a refinement of such a clustering if allowed 2k\u22121 centers. We also show that this is tight.\nNext, we explore the utility of additional clusters for sequential k-means. We show that for a random ordering of the data, and with extra centers, this algorithm can recover (a slight variant of) nice clusterings. We also show that the random ordering is necessary for such a result.\nFinally, we prove that additional clusters extend the utility of incremental methods beyond nice clusterings. We introduce a weaker constraint on cluster structure, requiring only that each cluster possess a significant \u201ccore\u201d, and we present a scheme that works under this weaker requirement.\n5.1 An incremental algorithm can find nice k-clusterings if allowed 2k centers\nEarlier work [7] has shown that that any nice clustering corresponds to a pruning of the tree obtained by single linkage on the points. With this insight, we develop an incremental algorithm that maintains 2k\u22121 centers that are guaranteed to induce a refinement of any nice k-clustering.\nThe following subroutine takes any finite S \u2282 X and returns at most 2k\u22121 distinct points:\nCANDIDATES(S) Run single linkage on S to get a tree Assign each leaf node the corresponding data point Moving bottom-up, assign each internal node the data point in one of its children Return all points at distance < k from the root\nLemma 5.1. Suppose S has a nice `-clustering, for ` \u2264 k. Then the points returned by CANDIDATES(S) include at least one representative from each of these clusters.\nHere\u2019s an incremental algorithm that uses 2k\u22121 centers to detect a nice k-clustering. Algorithm 5.2. Incremental clustering with extra centers.\nT0 = \u2205 For t = 1, 2, . . .:\nReceive xt and set Tt = Tt\u22121 \u222a {xt} If |Tt| > 2k\u22121: Tt \u2190 CANDIDATES(Tt)\nTheorem 5.3. Suppose there is a nice k-clustering C of X . Then for each t, the set Tt has at most 2k\u22121 points, including at least one representative from each Ci for which Ci \u2229 {x1, . . . , xt} 6= \u2205.\nIt is not possible in general to use fewer centers. Theorem 5.4. Pick any incremental clustering algorithm that maintains a list of ` centers that are guaranteed to be consistent with a target nice k-clustering. Then ` \u2265 2k\u22121.\n5.2 Sequential k-means with extra clusters\nTheorem 4.4 above shows severe limitations of sequential k-means. The good news is that additional clusters allow this algorithm to find a variant of nice partitionings.\nThe following condition imposes structure on the convex hull of the partitions in the target clustering. Definition 5.5. A clustering C = {C1, . . . , Ck} is convex-nice if for any i 6= j, any points x, y in the convex hull of Ci, and any point z in the convex hull of Cj , we have d(y, x) < d(z, x). Theorem 5.6. Fix a data set (X , d) with a convex-nice clustering C = {C1, . . . , Ck} and let \u03b2 = mini |Ci|/|X |. If the points are ordered uniformly at random, then for any ` \u2265 k, sequential `-means will return a refinement of C with probability at least 1\u2212 ke\u2212\u03b2`.\nThe probability of failure is small when the refinement contains ` = \u2126((log k)/\u03b2) centers. We can also show that this positive result no longer holds when data is adversarially ordered. Theorem 5.7. Pick any k \u2265 3. Consider any data set X in R (under the usual metric) that has a convex-nice k-clustering C = {C1, . . . , Ck}. Then there exists an ordering of X under which sequential `-means with ` \u2264 mini |Ci| centers fails to return a refinement of C."}, {"heading": "5.3 A broader class of clusterings", "text": "We conclude by considering a substantial generalization of niceness that can be detected by incremental methods when extra centers are allowed. Definition 5.8 (Core). For any clustering C = {C1, . . . , Ck} of (X , d), the core of cluster Ci is the maximal subset Coi \u2282 Ci such that d(x, z) < d(x, y) for all x \u2208 Ci, z \u2208 Coi , and y 6\u2208 Ci.\nIn a nice clustering, the core of any cluster is the entire cluster. We now require only that each core contain a significant fraction of points, and we show that the following simple sampling routine will find a refinement of the target clustering, even if the points are ordered adversarially. Algorithm 5.9. Algorithm subsample.\nSet T to the first ` elements For t = `+ 1, `+ 2, . . .:\nGet a new point xt With probability `/t:\nRemove an element from T uniformly at random and add xt to T\nIt is well-known (see, for instance, [12]) that at any time t, the set T consists of ` elements chosen at random without replacement from {x1, . . . , xt}. Theorem 5.10. Consider any clustering C = {C1, . . . , Ck} of (X , d), with core {Co1 , . . . , Cok}. Let \u03b2 = mini |Coi |/|X |. Fix any ` \u2265 k. Then, given any ordering of X , Algorithm 5.9 detects a refinement of C with probability 1\u2212 ke\u2212\u03b2`."}], "references": [{"title": "Clusterability: A theoretical study", "author": ["M. Ackerman", "S. Ben-David"], "venue": "Proceedings of AISTATS- 09, JMLR: W&CP, 5(1-8):53", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2009}, {"title": "Weighted clustering", "author": ["M. Ackerman", "S. Ben-David", "S. Branzei", "D. Loker"], "venue": "Proc. 26th AAAI Conference on Artificial Intelligence", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2012}, {"title": "Characterization of linkage-based clustering", "author": ["M. Ackerman", "S. Ben-David", "D. Loker"], "venue": "COLT", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2010}, {"title": "Towards property-based classification of clustering paradigms", "author": ["M. Ackerman", "S. Ben-David", "D. Loker"], "venue": "NIPS", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2010}, {"title": "Clustering oligarchies", "author": ["M. Ackerman", "S. Ben-David", "D. Loker", "S. Sabato"], "venue": "Proceedings of AISTATS-09, JMLR: W&CP, 31(6674)", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "Robust hierarchical clustering", "author": ["M.-F. Balcan", "P. Gupta"], "venue": "COLT, pages 282\u2013294", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2010}, {"title": "A discriminative framework for clustering via similarity functions", "author": ["M.F. Balcan", "A. Blum", "S. Vempala"], "venue": "Proceedings of the 40th annual ACM symposium on Theory of Computing, pages 671\u2013680. ACM", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2008}, {"title": "Clusterability detection and initial seed selection in large datasets", "author": ["S. Epter", "M. Krishnamoorthy", "M. Zaki"], "venue": "The International Conference on Knowledge Discovery in Databases, volume 7", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1999}, {"title": "Consistency of single linkage for high-density clusters", "author": ["J.A. Hartigan"], "venue": "Journal of the American Statistical Association, 76(374):388\u2013394", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1981}, {"title": "Mathematical taxonomy", "author": ["N. Jardine", "R. Sibson"], "venue": "London", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1971}, {"title": "An impossibility theorem for clustering", "author": ["J. Kleinberg"], "venue": "Proceedings of International Conferences on Advances in Neural Information Processing Systems, pages 463\u2013470", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2003}, {"title": "The Art of Computer Programming: Seminumerical Algorithms, volume", "author": ["D.E. Knuth"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1981}, {"title": "Self-organizing maps", "author": ["T. Kohonen"], "venue": "Springer", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2001}, {"title": "Least squares quantization in PCM", "author": ["S.P. Lloyd"], "venue": "IEEE Transactions on Information Theory, 28(2):129\u2013137", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1982}, {"title": "Some methods for classification and analysis of multivariate observations", "author": ["J.B. MacQueen"], "venue": "Proceedings of Fifth Berkeley Symposium on Mathematical Statistics and Probability, volume 1, pages 281\u2013297. University of California Press", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1967}, {"title": "Hierarchical grouping to optimize an objective function", "author": ["J.H. Ward"], "venue": "Journal of the American Statistical Association, 58:236\u2013244", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1963}, {"title": "A uniqueness theorem for clustering", "author": ["R.B. Zadeh", "S. Ben-David"], "venue": "Proceedings of the Twenty-Fifth Conference on Uncertainty in Artificial Intelligence, pages 639\u2013646. AUAI Press", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2009}], "referenceMentions": [{"referenceID": 9, "context": "Until now, differences in the input-output behaviour of clustering methods have only been studied in the batch setting [10, 11, 7, 4, 3, 5, 2, 17].", "startOffset": 119, "endOffset": 146}, {"referenceID": 10, "context": "Until now, differences in the input-output behaviour of clustering methods have only been studied in the batch setting [10, 11, 7, 4, 3, 5, 2, 17].", "startOffset": 119, "endOffset": 146}, {"referenceID": 6, "context": "Until now, differences in the input-output behaviour of clustering methods have only been studied in the batch setting [10, 11, 7, 4, 3, 5, 2, 17].", "startOffset": 119, "endOffset": 146}, {"referenceID": 3, "context": "Until now, differences in the input-output behaviour of clustering methods have only been studied in the batch setting [10, 11, 7, 4, 3, 5, 2, 17].", "startOffset": 119, "endOffset": 146}, {"referenceID": 2, "context": "Until now, differences in the input-output behaviour of clustering methods have only been studied in the batch setting [10, 11, 7, 4, 3, 5, 2, 17].", "startOffset": 119, "endOffset": 146}, {"referenceID": 4, "context": "Until now, differences in the input-output behaviour of clustering methods have only been studied in the batch setting [10, 11, 7, 4, 3, 5, 2, 17].", "startOffset": 119, "endOffset": 146}, {"referenceID": 1, "context": "Until now, differences in the input-output behaviour of clustering methods have only been studied in the batch setting [10, 11, 7, 4, 3, 5, 2, 17].", "startOffset": 119, "endOffset": 146}, {"referenceID": 16, "context": "Until now, differences in the input-output behaviour of clustering methods have only been studied in the batch setting [10, 11, 7, 4, 3, 5, 2, 17].", "startOffset": 119, "endOffset": 146}, {"referenceID": 0, "context": "To qualify the type of cluster structure present in data, a number of notions of clusterability have been proposed (for a detailed discussion, see [1] and [7]).", "startOffset": 147, "endOffset": 150}, {"referenceID": 6, "context": "To qualify the type of cluster structure present in data, a number of notions of clusterability have been proposed (for a detailed discussion, see [1] and [7]).", "startOffset": 155, "endOffset": 158}, {"referenceID": 6, "context": "[7], requires that every element be closer to data in its own cluster than to other points.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "It was shown by [7] that such clusterings are readily detected offline by classical batch algorithms.", "startOffset": 16, "endOffset": 19}, {"referenceID": 7, "context": "[8] requires that the minimum separation between clusters be larger than the maximum cluster diameter.", "startOffset": 0, "endOffset": 3}, {"referenceID": 13, "context": "It is an incremental variant of Lloyd\u2019s algorithm [14, 15]: Algorithm 2.", "startOffset": 50, "endOffset": 58}, {"referenceID": 14, "context": "It is an incremental variant of Lloyd\u2019s algorithm [14, 15]: Algorithm 2.", "startOffset": 50, "endOffset": 58}, {"referenceID": 12, "context": "This method, and many variants of it, have been studied intensively in the literature on selforganizing maps [13].", "startOffset": 109, "endOffset": 113}, {"referenceID": 9, "context": "Another family of clustering algorithms with incremental variants are agglomerative procedures [10] like single-linkage [9].", "startOffset": 95, "endOffset": 99}, {"referenceID": 8, "context": "Another family of clustering algorithms with incremental variants are agglomerative procedures [10] like single-linkage [9].", "startOffset": 120, "endOffset": 123}, {"referenceID": 15, "context": "For instance, Ward\u2019s method of average linkage [16] is geared towards the k-means cost function.", "startOffset": 47, "endOffset": 51}, {"referenceID": 6, "context": "[7] to study what constraints on cluster structure make them efficiently identifiable in a batch setting.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "[7] under the name \u201cstrict separation,\u201d this notion has since been applied in [2], [1], and [6], to name a few.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "[7] under the name \u201cstrict separation,\u201d this notion has since been applied in [2], [1], and [6], to name a few.", "startOffset": 78, "endOffset": 81}, {"referenceID": 0, "context": "[7] under the name \u201cstrict separation,\u201d this notion has since been applied in [2], [1], and [6], to name a few.", "startOffset": 83, "endOffset": 86}, {"referenceID": 5, "context": "[7] under the name \u201cstrict separation,\u201d this notion has since been applied in [2], [1], and [6], to name a few.", "startOffset": 92, "endOffset": 95}, {"referenceID": 6, "context": "Indeed, in the batch setting, a unique nice k-clustering can be recovered by single-linkage [7].", "startOffset": 92, "endOffset": 95}, {"referenceID": 0, "context": ", x \u2032 M \u2208 X such that \u2022 All interpoint distances are in the range [1, 2].", "startOffset": 66, "endOffset": 72}, {"referenceID": 1, "context": ", x \u2032 M \u2208 X such that \u2022 All interpoint distances are in the range [1, 2].", "startOffset": 66, "endOffset": 72}, {"referenceID": 7, "context": "Following [8, 2, 5, 1], among others, we consider clusterings in which the maximum cluster diameter is smaller than the minimum inter-cluster separation.", "startOffset": 10, "endOffset": 22}, {"referenceID": 1, "context": "Following [8, 2, 5, 1], among others, we consider clusterings in which the maximum cluster diameter is smaller than the minimum inter-cluster separation.", "startOffset": 10, "endOffset": 22}, {"referenceID": 4, "context": "Following [8, 2, 5, 1], among others, we consider clusterings in which the maximum cluster diameter is smaller than the minimum inter-cluster separation.", "startOffset": 10, "endOffset": 22}, {"referenceID": 0, "context": "Following [8, 2, 5, 1], among others, we consider clusterings in which the maximum cluster diameter is smaller than the minimum inter-cluster separation.", "startOffset": 10, "endOffset": 22}, {"referenceID": 6, "context": "Earlier work [7] has shown that that any nice clustering corresponds to a pruning of the tree obtained by single linkage on the points.", "startOffset": 13, "endOffset": 16}, {"referenceID": 11, "context": "It is well-known (see, for instance, [12]) that at any time t, the set T consists of ` elements chosen at random without replacement from {x1, .", "startOffset": 37, "endOffset": 41}], "year": 2014, "abstractText": "The explosion in the amount of data available for analysis often necessitates a transition from batch to incremental clustering methods, which process one element at a time and typically store only a small subset of the data. In this paper, we initiate the formal analysis of incremental clustering methods focusing on the types of cluster structure that they are able to detect. We find that the incremental setting is strictly weaker than the batch model, proving that a fundamental class of cluster structures that can readily be detected in the batch setting is impossible to identify using any incremental method. Furthermore, we show how the limitations of incremental clustering can be overcome by allowing additional clusters.", "creator": "LaTeX with hyperref package"}}}