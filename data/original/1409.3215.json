{"id": "1409.3215", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-Sep-2014", "title": "Sequence to Sequence Learning with Neural Networks", "abstract": "Deep Neural Networks (DNNs) are powerful models that have achieved excellent performance on difficult learning tasks. Although DNNs work well whenever large labeled training sets are available, they cannot be used to map sequences to sequences. In this paper, we present a general end-to-end approach to sequence learning that makes minimal assumptions on the sequence structure. Our method uses a multilayered Long Short-Term Memory (LSTM) to map the input sequence to a vector of a fixed dimensionality, and then another deep LSTM to decode the target sequence from the vector. Our main result is that on an English to French translation task from the WMT-14 dataset, the translations produced by the LSTM achieve a BLEU score of 34.7 on the entire test set, where the LSTM's BLEU score was penalized on out-of-vocabulary words. Additionally, the LSTM did not have difficulty on long sentences. For comparison, a strong phrase-based SMT system achieves a BLEU score of 33.3 on the same dataset. When we used the LSTM to rerank the 1000 hypotheses produced by the aforementioned SMT system, its BLEU score increases to 36.5, which beats the previous state of the art. The LSTM also learned sensible phrase and sentence representations that are sensitive to word order and are relatively invariant to the active and the passive voice. Finally, we found that reversing the order of the words in all source sentences (but not target sentences) improved the LSTM's performance markedly, because doing so introduced many short term dependencies between the source and the target sentence which made the optimization problem easier.", "histories": [["v1", "Wed, 10 Sep 2014 19:55:35 GMT  (37kb)", "http://arxiv.org/abs/1409.3215v1", "10 pages"], ["v2", "Wed, 29 Oct 2014 12:13:17 GMT  (66kb)", "http://arxiv.org/abs/1409.3215v2", "9 pages"], ["v3", "Sun, 14 Dec 2014 20:59:51 GMT  (66kb)", "http://arxiv.org/abs/1409.3215v3", "9 pages"]], "COMMENTS": "10 pages", "reviews": [], "SUBJECTS": "cs.CL cs.LG", "authors": ["ilya sutskever", "oriol vinyals", "quoc v le"], "accepted": true, "id": "1409.3215"}, "pdf": {"name": "1409.3215.pdf", "metadata": {"source": "CRF", "title": "Sequence to Sequence Learning with Neural Networks", "authors": ["Ilya Sutskever"], "emails": ["ilyasu@google.com", "vinyals@google.com", "qvl@google.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n40 9.\n32 15\nv1 [\ncs .C\nL ]\n1 0\nSe p\nDeep Neural Networks (DNNs) are powerful models that have achieved excellent performance on difficult learning tasks. Although DNNs work well whenever large labeled training sets are available, they cannot be used to map sequences to sequences. In this paper, we present a general end-to-end approach to sequence learning that makes minimal assumptions on the sequence structure. Our method uses a multilayered Long Short-Term Memory (LSTM) to map the input sequence to a vector of a fixed dimensionality, and then another deep LSTM to decode the target sequence from the vector. Our main result is that on an English to French translation task from the WMT-14 dataset, the translations produced by the LSTM achieve a BLEU score of 34.8 on the entire test set, where the LSTM\u2019s BLEU score was penalized on out-of-vocabulary words. Additionally, the LSTM did not have difficulty on long sentences. For comparison, a strong phrase-based SMT system achieves a BLEU score of 33.3 on the same dataset. When we used the LSTM to rerank the 1000 hypotheses produced by the aforementioned SMT system, its BLEU score increases to 36.5, which beats the previous state of the art. The LSTM also learned sensible phrase and sentence representations that are sensitive to word order and are relatively invariant to the active and the passive voice. Finally, we found that reversing the order of the words in all source sentences (but not target sentences) improved the LSTM\u2019s performance markedly, because doing so introduced many short term dependencies between the source and the target sentence which made the optimization problem easier."}, {"heading": "1 Introduction", "text": "Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve excellent performance on difficult problems such as speech recognition [13, 7] and visual object recognition [19, 6, 34, 21, 20]. DNNs are powerful because they can perform arbitrary parallel computation for a modest number of steps. A surprising example of the power of DNNs is their ability to sort N N -bit numbers using only 2 hidden layers of quadratic size [28]. So, while neural networks are related to conventional statistical models, they learn an intricate computation. Furthermore, large DNNs can be trained with supervised backpropagation whenever the labeled training set has enough information to specify the network\u2019s parameters. Thus, if there exists a parameter setting of a large DNN that achieves good results (for example, because humans can solve the task very rapidly), supervised backpropagation will solve these parameters and solve the problem.\nDespite their flexibility and power, DNNs can only be applied to problems whose inputs and targets can be sensibly encoded with vectors of fixed dimensionality. It is a significant limitation, since many important problems are best expressed with sequences whose lengths are not known a-priori. For example, speech recognition and machine translation are sequential problems. Likewise, question answering can also be seen as mapping a sequence of words representing the question to a\nsequence of words representing the answer. It is therefore clear that a domain-independent method that learns to map sequences to sequences would be useful.\nSequences pose a challenge for DNNs because they require that the dimensionality of the inputs and outputs is known and fixed. In this paper, we show that a straightforward application of the Long Short-Term Memory (LSTM) architecture [16] can solve general sequence to sequence problems. The idea is to use one LSTM to read the input sequence, one timestep at a time, to obtain large fixeddimensional vector representation, and then to use another LSTM to extract the output sequence from that vector (fig. 1). The second LSTM is essentially a recurrent neural network language model [29, 24, 33] except that it is conditioned on the input sequence. The LSTM\u2019s ability to successfully learn on data with long range temporal dependencies makes it a natural choice for this application due to the considerable time lag between the inputs and their corresponding outputs (fig. 1).\nThere have been a number of related attempts to address the general sequence to sequence learning problem with neural networks. Our approach is closely related to Kalchbrenner and Blunsom [18] who were the first to map the entire input sentence to vector, and is very similar to Cho et al. [5] (although the model in this paper was developed in parallel to Cho et al. [5]). Graves [10] introduced a novel differentiable attention mechanism that allows neural networks to focus on different parts of their input, and an elegant variant of this idea was successfully applied to machine translation by Bahdanau et al. [2]. The Connectionist Sequence Classification is another popular technique for mapping sequences to sequences with neural networks, although it assumes a monotonic alignment between the inputs and the outputs [11, 9].\nThe main result of this work is the following. On the WMT\u201914 English to French translation task, we obtained a BLEU score of 34.81 by directly extracting translations from an ensemble of 5 deep LSTMs (with 380M parameters each) using a simple left-to-right beam-search decoder. This is by far the best result achieved by direct translation with large neural networks. For comparison, the BLEU score of a strong SMT baseline on this dataset is 33.30 (the LIUM system [31, 30]). The 34.81 BLEU score was achieved by an LSTM with a vocabulary of 80k words, so the score was penalized whenever the reference translation contained a word not covered by these 80k. This result shows that a relatively unoptimized neural network architecture which has much room for improvement outperforms a mature phrase-based SMT system.\nFinally, we used the LSTM to rescore the publicly available 1000-best lists of the SMT baseline on the same task [30]. By doing so, we obtained a BLEU score of 36.5, which improves the baseline by 3.2 BLEU points and is a new state-of-the-art (the previous record being 35.8 [32]).\nSurprisingly, the LSTM did not suffer on very long sentences, despite the recent experience of other researchers with related architectures [27]. We were able to do well on long sentences because we reversed the order of words in the source sentence (but not the target sentences) in the training and test set. By doing so, we introduced many short term dependencies that made the optimization problem much simpler (see sec. 2 and 3.3). As a result, SGD could learn LSTMs that had no trouble with long sentences. The simple trick of reversing the words in the source sentence is one of the key technical contributions of this work.\nA useful property of the LSTM is that it learns to map an input sentence of variable length into a fixed-dimensional vector representation. Given that translations tend to be paraphrases of the source sentences, the translation objective encourages the LSTM to find sentence representations that capture their meaning, as sentences with similar meanings are close to each other while different\nsentences meanings will be far. A qualitative evaluation supports this claim, showing that our model is aware of word order and is fairly invariant to the active and passive voice."}, {"heading": "2 The model", "text": "The Recurrent Neural Network (RNN) [35, 29] is a natural generalization of feedforward neural networks to sequences. Given a sequence of inputs (x1, . . . , xT ), a standard RNN computes a sequence of outputs (y1, . . . , yT ) by iterating the following equation:\nht = sigm ( W hxxt +W hhht\u22121 )\nyt = W yhht\nThe RNN can easily map sequences to sequences whenever the alignment between the inputs the outputs is known ahead of time. However, it is not clear how to apply an RNN to problems whose input and the output sequences have different lengths with complicated and non-monotonic relationships.\nA simple strategy for general sequence learning is to map the input sequence to a fixed-sized vector using one RNN, and then to map the vector to the target sequence with another RNN (this approach has been independently taken by Cho et al. [5]). While it could work in principle since the RNN is provided with all the relevant information, it would be difficult to train the RNNs due to the resulting long term dependencies [14, 4] (figure 1) [16, 15]. However, the Long Short-Term Memory (LSTM) [16] is known to learn problems with long range temporal dependencies, so an LSTM may succeed in this setting.\nThe goal of the LSTM is to estimate the conditional probability p(y1, . . . , yT \u2032 |x1, . . . , xT ) where (x1, . . . , xT ) is an input sequence and y1, . . . , yT \u2032 is its corresponding output sequence whose length T \u2032 may differ from T . The LSTM computes this conditional probability by first obtaining the fixeddimensional representation v of the input sequence (x1, . . . , xT ) given by the last hidden state of the LSTM, and then computing the probability of y1, . . . , yT \u2032 with a standard LSTM-LM formulation whose initial hidden state is set to the representation v of x1, . . . , xT :\np(y1, . . . , yT \u2032 |x1, . . . , xT ) =\nT \u2032 \u220f\nt=1\np(yt|v, y1, . . . , yt\u22121) (1)\nIn this equation, each p(yt|v, y1, . . . , yt\u22121) distribution is represented with a softmax over all the words in the vocabulary. We use the LSTM formulation from Graves [10]. Note that we require that each sentence ends with a special end-of-sentence symbol \u201cEOS\u201d, which enables the model to define a distribution over sequences of all possible lengths. The overall scheme is outlined in figure 1, where the shown LSTM computes the representation of \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, \u201cEOS\u201d and then uses this representation to compute the probability of \u201cW\u201d, \u201cX\u201d, \u201cY\u201d, \u201cZ\u201d, \u201cEOS\u201d.\nOur actual models differ from the above description in three important ways. First, we used two different LSTMs: one for the input sequence and another for the output sequence, because doing so increases the number model parameters at negligible computational cost and because doing so makes it natural to train the LSTM on multiple language pairs simultaneously [18]. Second, we found that deep LSTMs significantly outperformed shallow LSTMs, so we chose an LSTM with four layers. Third, we found it extremely valuable to reverse the order of the words of the input sentence. So for example, instead of mapping the sentence a, b, c to the sentence \u03b1, \u03b2, \u03b3, the LSTM is asked to map c, b, a to \u03b1, \u03b2, \u03b3, where \u03b1, \u03b2, \u03b3 is the translation of a, b, c. This way, a is in close proximity to \u03b1, b is fairly close to \u03b2, and so on, a fact that makes it easy for SGD to \u201cestablish communication\u201d between the input and the output. We found this simple data transformation to greatly boost the performance of the LSTM."}, {"heading": "3 Experiments", "text": "We applied our method to the WMT\u201914 English to French MT task in two ways. We used it to directly translate the input sentence without using a reference SMT system and we it to rescore the n-best lists of an SMT baseline. We report the accuracy of these translation methods, present sample translations, and visualize the resulting sentence representation."}, {"heading": "3.1 Dataset details", "text": "We used the WMT\u201914 English to French dataset. We trained our models on a subset of 12M sentences consisting of 348M French words and 304M English words, which is a clean \u201cselected\u201d subset from [30]. We chose this translation task and this specific training set subset because of the public availability of a tokenized training and test set together with 1000-best lists from the LIUM SMT baseline [30, 31].\nAs typical neural language models rely on a vector representation for each word, we used a fixed vocabulary for both languages. We used 160,000 of the most frequent words for the source language and 80,000 of the most frequent words for the target language. Every out-of-vocabulary word was replaced with a special \u201cUNK\u201d token."}, {"heading": "3.2 Decoding and Rescoring", "text": "The core of our experiments involved training a large deep LSTM on many sentence pairs. We trained it by maximizing the log probability of a correct translation T given the source sentence S, so the training objective is\n1/|S| \u2211\n(T,S)\u2208S\nlog p(T |S)\nwhere S is the training set. Once training is complete, we produce translations by finding the most likely translation according to the LSTM:\nT\u0302 = argmax T p(T |S) (2)\nWe search for the most likely translation using a simple left-to-right beam search decoder which maintains a small number B of partial hypotheses, where a partial hypothesis is a prefix of some translation. At each timestep we extend each partial hypothesis in the beam with every possible word in the vocabulary. This greatly increases the number of the hypotheses so we discard all but the B most likely hypotheses according to the model\u2019s log probability. As soon as the \u201cEOS\u201d symbol is appended to a hypothesis, it is removed from the beam and is added to the set of complete hypotheses. While this decoder is approximate, it is simple to implement. Interestingly, our system performs well even with a beam size of 1, and a beam of size 2 provides most of the benefits of beam search (Table 1).\nWe also used the LSTM to rescore the 1000-best lists produced by the LIUM system [30, 31]. To rescore an n-best list, we computed the log probability of every hypothesis with our LSTM and took an even average with their score and the LSTM\u2019s score."}, {"heading": "3.3 Reversing the Source Sentences", "text": "While the LSTM is capable of solving problems with long term dependencies, we discovered that the LSTM learns much better when the source sentences are reversed (the target sentences are not reversed). By doing so, the LSTM\u2019s test perplexity dropped from 5.8 to 4.7, and the test BLEU scores of its decoded translations increased from 25.9 to 30.6.\nWhile we do not have a complete explanation to this phenomenon, we believe that it is caused by the introduction of many short term dependencies to the dataset. Normally, when we concatenate a source sentence with a target sentence, each word in the source sentence is far from its corresponding word in the target sentence. As a result, the problem has a large \u201cminimal time lag\u201d [17]. By reversing the words in the source sentence, the average distance between corresponding words in the source and target language is unchanged. However, the first few words in the source language are now very close to the first few words in the target language, so the problem\u2019s minimal time lag is greatly reduced. Thus, backpropagation has an easier time \u201cestablishing communication\u201d between the source sentence and the target sentence, which in turn results in substantially improved performance.\nInitially, we believed that reversing the input sentences would result only lead to more confident predictions in the early parts of the target sentence. However, LSTMs trained on reversed source sentences did much better on long sentences than LSTMs trained on the raw source sentences (see\nsec. 3.7), which suggests that reversing the input sentences results in LSTMs with better memory utilization."}, {"heading": "3.4 Training details", "text": "We found that the LSTM models are fairly easy to train. We used deep LSTMs with 4 layers, with 1000 cells at each layer and 1000 dimensional word embeddings, with an input vocabulary of 160,000 and an output vocabulary of 80,000. We found deep LSTMs to significantly outperform shallow LSTMs, where each additioanl layer reduced perplexity by nearly 10%, possibly due to their much larger hidden state. We used a na\u0131\u0308ve softmax over 80,000 words at each output. The resulting LSTM has 380M parameters of which 64M are pure recurrent connections (32M for the \u201cencoder\u201d LSTM and 32M for the \u201cdecoder\u201d LSTM). The complete training details are given below:\n\u2022 We initialized all of the LSTM\u2019s parameters with the uniform distribution between -0.08 and 0.08\n\u2022 We used stochastic gradient descent without momentum, with a fixed learning rate of 0.7. After 5 epochs, we begun halving the learning rate every half epoch. We trained our models for a total of 7.5 epochs.\n\u2022 We used batches of 128 sequences for the gradient and divided it the size of the batch (namely, 128).\n\u2022 Although LSTMs tend to not suffer from the vanishing gradient problem, they can have exploding gradients. Thus we enforced a hard constraint on the norm of the gradient [10, 26, 23] by scaling it when its norm exceeded a threshold. For each training batch, we compute s = \u2016g\u20162, where g is the gradient divided by 128. If s > 5, we set g = 5g s .\n\u2022 Different sentences have different lengths. Most sentences are short (e.g., length 20-30) but some sentences are long (e.g., length > 100), so a minibatch of 128 randomly chosen training sentences will have many short sentences and few long sentences, and as a result, much of the computation in the minibatch is wasted. To address this problem, we made sure that all sentences within a minibatch were roughly of the same length, which a 2x speedup."}, {"heading": "3.5 Parallelization", "text": "A C++ implementation of deep LSTM with the configuration from the previous section on a single GPU processes a speed of approximately 1,700 words per second. This was too slow for our purposes, so we parallelized our model using an 8-GPU machine. Each layer of the LSTM was executed on a different GPU and communicated its activations to the next GPU (or layer) as soon as they were computed. Our models have 4 layers of LSTMs, each of which resides on a separate GPU. The remaining 4 GPUs were used to parallelize the softmax, so each GPU was responsible for multiplying by a 1000\u00d7 20000 matrix. The resulting implementation achieved a speed of 6,300 (both English and French) words per second with a minibatch size of 128. Training took about a week with this implementation."}, {"heading": "3.6 Experimental Results", "text": "We used the cased BLEU score [25] to evaluate the quality of our translations. We verified the correctness of our BLEU score computation by reproducing the BLEU score of LIUM\u2019s baseline system using its n-best list. Of particular importance were issues relating to tokenization and normalization of the test sentences. We made sure to \u201cunnormalize\u201d our translations (for example, to replace \u201cthey \u2019re\u201d with \u201cthey\u2019re\u201d), in order to reproducing the baseline\u2019s BLEU score with our evaluation tools.\nThe results are presented in tables 1 and 2. Our best results are obtained with an ensemble of LSTMs that differ in their random initializations and in the random order of minibatches. While the decoded translations of the LSTM ensemble do not beat the state of the art, it is the first time that a pure neural translation system outperforms a strong phrase-based SMT baseline on a large MT task by a sizeable margin, despite its inability to handle out-of-vocabulary words. The LSTM does beat the previous state of the art by rescoring the 1000-best list of the LIUM system."}, {"heading": "3.7 Performance on long sentences", "text": "We were surprised to discover that the LSTM did well on long sentences, which is shown quantitatively in figure 3. Table 3 presents several examples of long sentences and their translations."}, {"heading": "3.8 Model Analysis", "text": "One of the attractive features of our model is its ability to turn a sequence of words into a vector of fixed dimensionality. Figure 2 visualizes some of the learned representations. The figure clearly shows that the representations are sensitive to the order of words, while being fairly insensitive to the replacement of an active voice with a passive voice. The two-dimensional projections are obtained using PCA."}, {"heading": "4 Related work", "text": "There is a large body of work on applications of neural networks to machine translation. So far, the simplest and most effective way of applying an RNN-Language Model (RNNLM) [24] or a Feedforward Neural Network Language Model (NNLM) [3] to an MT task is by rescoring the nbest lists of a strong MT baseline [22], which reliably improves translation quality.\nMore recently, researchers have begun to look into ways of including information about the source language into the NNLM. Examples of this work include Auli et al. [1], who combine an NNLM with a topic model of the input sentence, which improves rescoring performance. Devlin et al. [8] followed a similar approach, but they incorporated their NNLM into the decoder of an MT system and used the decoder\u2019s alignment information to provide the NNLM with the most useful words in the input sentence. Their approach was highly successful and it achieved large improvements over their baseline.\nOur work is closely related to Kalchbrenner and Blunsom [18], who were the first to map the input sentence into a vector and then back to a sentence, although they map sentences to vectors using convolutional neural networks, which lose the ordering of the words. Similarly to this work, Cho et al. [5] used an LSTM-like RNN architecture to map sentences into vectors and back, although their primary focus was on integrating their neural network into an SMT system. Bahdanau et al. [2] also attempted direct translations with a neural network that used an attention mechanism to overcome the poor performance on long sentences experienced by Cho et al. [5] and achieved encouraging results. Likewise, Pouget-Abadie et al. [27] attempted to address the memory problem of Cho et al. [5] by translating pieces of the source sentence in way that produces smooth translations, which is similar to a phrase-based approach. We suspect that they could achieve similar improvements by simply training their networks on reversed source sentences.\nEnd-to-end training is also the focus of Hermann et al. [12], whose model represents the inputs and outputs by feedforward networks, and map them to similar points in space. However, their approach cannot generate translations directly: to get a translation, they need to do a look up for closest vector in the pre-computed database of sentences, or to rescore a sentence."}, {"heading": "5 Conclusion", "text": "In this work, we showed that a large deep LSTM with a limited vocabulary can outperform a standard SMT-based system whose vocabulary is unlimited on a large-scale MT task. The success of our simple LSTM-based approach on MT suggests that it should do well on many other sequence learning problems, provided they have enough training data.\nWe were surprised by the extent of the improvement obtained by reversing the words in the source sentences. We conclude that it is important to find a problem encoding that has the greatest number of short term dependencies, as they make the learning problem much simpler. In particular, while we were unable to train a standard RNN on the non-reversed translation problem (shown in fig. 1), we believe that a standard RNN would be trainable when the source sentences are reversed (although we did not verify it experimentally).\nWe were also surprised by the ability of the LSTM to correctly translate very long sentences. We were initially convinced that the LSTM would fail on long sentences due to its limited memory, and other researchers reported poor performance on long sentences with a model similar to ours [5, 2, 27]. However, we found that LSTMs trained on reversed sentences had little difficulty translating long sentences.\nMost importantly, we demonstrated that a simple, straightforward and a relatively unoptimized approach can outperform a mature SMT system, so further work will likely lead to even greater translation accuracies. These results suggest that our approach will likely do well on other challenging sequence to sequence problems."}, {"heading": "6 Acknowledgments", "text": "We thank Samy Bengio, Jeff Dean, Matthieu Devin, Geoffrey Hinton, Nal Kalchbrenner, Thang Luong, Wolfgang Macherey, Rajat Monga, Vincent Vanhoucke, Peng Xu, Wojciech Zaremba, and the Google Brain team for useful comments and discussions."}], "references": [{"title": "Joint language and translation modeling with recurrent neural networks", "author": ["M. Auli", "M. Galley", "C. Quirk", "G. Zweig"], "venue": "EMNLP,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2013}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["D. Bahdanau", "K. Cho", "Y. Bengio"], "venue": "arXiv preprint arXiv:1409.0473,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2014}, {"title": "A neural probabilistic language model", "author": ["Y. Bengio", "R. Ducharme", "P. Vincent", "C. Jauvin"], "venue": "Journal of Machine Learning Research, pages 1137\u20131155,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2003}, {"title": "Learning long-term dependencies with gradient descent is difficult", "author": ["Y. Bengio", "P. Simard", "P. Frasconi"], "venue": "IEEE Transactions on Neural Networks, 5(2):157\u2013166,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1994}, {"title": "Learning phrase representations using RNN encoder-decoder for statistical machine translation", "author": ["K. Cho", "B. Merrienboer", "C. Gulcehre", "F. Bougares", "H. Schwenk", "Y. Bengio"], "venue": "Arxiv preprint arXiv:1406.1078,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2014}, {"title": "Multi-column deep neural networks for image classification", "author": ["D. Ciresan", "U. Meier", "J. Schmidhuber"], "venue": "CVPR,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "Context-dependent pre-trained deep neural networks for large vocabulary speech recognition", "author": ["G.E. Dahl", "D. Yu", "L. Deng", "A. Acero"], "venue": "IEEE Transactions on Audio, Speech, and Language Processing - Special Issue on Deep Learning for Speech and Language Processing,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2012}, {"title": "Fast and robust neural network joint models for statistical machine translation", "author": ["J. Devlin", "R. Zbib", "Z. Huang", "T. Lamar", "R. Schwartz", "J. Makhoul"], "venue": "ACL,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2014}, {"title": "Sequence transduction with recurrent neural networks", "author": ["A. Graves"], "venue": "arXiv preprint arXiv:1211.3711,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2012}, {"title": "Generating sequences with recurrent neural networks", "author": ["A. Graves"], "venue": "Arxiv preprint arXiv:1308.0850,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2013}, {"title": "Connectionist temporal classification: labelling unsegmented sequence data with recurrent neural networks", "author": ["A. Graves", "S. Fern\u00e1ndez", "F. Gomez", "J. Schmidhuber"], "venue": "ICML,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2006}, {"title": "Multilingual distributed representations without word alignment", "author": ["K.M. Hermann", "P. Blunsom"], "venue": "ICLR,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2014}, {"title": "Deep neural networks for acoustic modeling in speech recognition", "author": ["G. Hinton", "L. Deng", "D. Yu", "G. Dahl", "A. Mohamed", "N. Jaitly", "A. Senior", "V. Vanhoucke", "P. Nguyen", "T. Sainath", "B. Kingsbury"], "venue": "IEEE Signal Processing Magazine,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}, {"title": "Untersuchungen zu dynamischen neuronalen netzen", "author": ["S. Hochreiter"], "venue": "Master\u2019s thesis, Institut fur Informatik, Technische Universitat, Munchen,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1991}, {"title": "Gradient flow in recurrent nets: the difficulty of learning", "author": ["S. Hochreiter", "Y. Bengio", "P. Frasconi", "J. Schmidhuber"], "venue": "long-term dependencies,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2001}, {"title": "Long short-term memory", "author": ["S. Hochreiter", "J. Schmidhuber"], "venue": "Neural Computation,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1997}, {"title": "LSTM can solve hard long time lag problems", "author": ["S. Hochreiter", "J. Schmidhuber"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1997}, {"title": "Recurrent continuous translation models", "author": ["N. Kalchbrenner", "P. Blunsom"], "venue": "EMNLP,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2013}, {"title": "ImageNet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "NIPS,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2012}, {"title": "Building high-level features using large scale unsupervised learning", "author": ["Q.V. Le", "M.A. Ranzato", "R. Monga", "M. Devin", "K. Chen", "G.S. Corrado", "J. Dean", "A.Y. Ng"], "venue": "ICML,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1998}, {"title": "Statistical Language Models based on Neural Networks", "author": ["T. Mikolov"], "venue": "PhD thesis, Brno University of Technology,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2012}, {"title": "Efficient estimation of word representations in vector space", "author": ["T. Mikolov", "K. Chen", "G. Corrado", "J. Dean"], "venue": "arXiv preprint arXiv:1301.3781,", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2013}, {"title": "Recurrent neural network based language model", "author": ["T. Mikolov", "M. Karafi\u00e1t", "L. Burget", "J. Cernock\u1ef3", "S. Khudanpur"], "venue": "INTERSPEECH, pages 1045\u20131048,", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2010}, {"title": "BLEU: a method for automatic evaluation of machine translation", "author": ["K. Papineni", "S. Roukos", "T. Ward", "W.J. Zhu"], "venue": "ACL,", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2002}, {"title": "On the difficulty of training recurrent neural networks", "author": ["R. Pascanu", "T. Mikolov", "Y. Bengio"], "venue": "arXiv preprint arXiv:1211.5063,", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2012}, {"title": "Overcoming the curse of sentence length for neural machine translation using automatic segmentation", "author": ["J. Pouget-Abadie", "D. Bahdanau", "B. van Merrienboer", "K. Cho", "Y. Bengio"], "venue": "arXiv preprint arXiv:1409.1257,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2014}, {"title": "On small depth threshold circuits", "author": ["A. Razborov"], "venue": "Proc. 3rd Scandinavian Workshop on Algorithm Theory,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 1992}, {"title": "Learning representations by back-propagating errors", "author": ["D. Rumelhart", "G.E. Hinton", "R.J. Williams"], "venue": "Nature, 323(6088):533\u2013536,", "citeRegEx": "29", "shortCiteRegEx": null, "year": 1986}, {"title": "University le mans", "author": ["H. Schwenk"], "venue": "http://www-lium.univ-lemans.fr/ \u0303schwenk/cslm_joint_paper/,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2014}, {"title": "LIUM\u2019s SMT machine translation systems for wmt 2011", "author": ["H. Schwenk", "P. Lambert", "L. Barrault", "C. Servan", "H. Afli", "S. Abdul-Rauf", "K. Shah"], "venue": "Proceedings of the Sixth Workshop on Statistical Machine Translation,", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2011}, {"title": "LSTM neural networks for language modeling", "author": ["M. Sundermeyer", "R. Schluter", "H. Ney"], "venue": "INTER- SPEECH,", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2010}, {"title": "DeepFace: Closing the gap to human-level performance in face verification", "author": ["Y. Taigman", "M. Yang", "M. Ranzato", "L. Wolf"], "venue": "CVPR,", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2014}, {"title": "Backpropagation through time: what it does and how to do it", "author": ["P. Werbos"], "venue": "Proceedings of IEEE,", "citeRegEx": "35", "shortCiteRegEx": null, "year": 1990}], "referenceMentions": [{"referenceID": 12, "context": "Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve excellent performance on difficult problems such as speech recognition [13, 7] and visual object recognition [19, 6, 34, 21, 20].", "startOffset": 159, "endOffset": 166}, {"referenceID": 6, "context": "Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve excellent performance on difficult problems such as speech recognition [13, 7] and visual object recognition [19, 6, 34, 21, 20].", "startOffset": 159, "endOffset": 166}, {"referenceID": 18, "context": "Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve excellent performance on difficult problems such as speech recognition [13, 7] and visual object recognition [19, 6, 34, 21, 20].", "startOffset": 197, "endOffset": 216}, {"referenceID": 5, "context": "Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve excellent performance on difficult problems such as speech recognition [13, 7] and visual object recognition [19, 6, 34, 21, 20].", "startOffset": 197, "endOffset": 216}, {"referenceID": 32, "context": "Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve excellent performance on difficult problems such as speech recognition [13, 7] and visual object recognition [19, 6, 34, 21, 20].", "startOffset": 197, "endOffset": 216}, {"referenceID": 20, "context": "Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve excellent performance on difficult problems such as speech recognition [13, 7] and visual object recognition [19, 6, 34, 21, 20].", "startOffset": 197, "endOffset": 216}, {"referenceID": 19, "context": "Deep Neural Networks (DNNs) are extremely powerful machine learning models that achieve excellent performance on difficult problems such as speech recognition [13, 7] and visual object recognition [19, 6, 34, 21, 20].", "startOffset": 197, "endOffset": 216}, {"referenceID": 27, "context": "A surprising example of the power of DNNs is their ability to sort N N -bit numbers using only 2 hidden layers of quadratic size [28].", "startOffset": 129, "endOffset": 133}, {"referenceID": 15, "context": "In this paper, we show that a straightforward application of the Long Short-Term Memory (LSTM) architecture [16] can solve general sequence to sequence problems.", "startOffset": 108, "endOffset": 112}, {"referenceID": 28, "context": "The second LSTM is essentially a recurrent neural network language model [29, 24, 33] except that it is conditioned on the input sequence.", "startOffset": 73, "endOffset": 85}, {"referenceID": 23, "context": "The second LSTM is essentially a recurrent neural network language model [29, 24, 33] except that it is conditioned on the input sequence.", "startOffset": 73, "endOffset": 85}, {"referenceID": 31, "context": "The second LSTM is essentially a recurrent neural network language model [29, 24, 33] except that it is conditioned on the input sequence.", "startOffset": 73, "endOffset": 85}, {"referenceID": 17, "context": "Our approach is closely related to Kalchbrenner and Blunsom [18] who were the first to map the entire input sentence to vector, and is very similar to Cho et al.", "startOffset": 60, "endOffset": 64}, {"referenceID": 4, "context": "[5] (although the model in this paper was developed in parallel to Cho et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5]).", "startOffset": 0, "endOffset": 3}, {"referenceID": 9, "context": "Graves [10] introduced a novel differentiable attention mechanism that allows neural networks to focus on different parts of their input, and an elegant variant of this idea was successfully applied to machine translation by Bahdanau et al.", "startOffset": 7, "endOffset": 11}, {"referenceID": 1, "context": "[2].", "startOffset": 0, "endOffset": 3}, {"referenceID": 10, "context": "The Connectionist Sequence Classification is another popular technique for mapping sequences to sequences with neural networks, although it assumes a monotonic alignment between the inputs and the outputs [11, 9].", "startOffset": 205, "endOffset": 212}, {"referenceID": 8, "context": "The Connectionist Sequence Classification is another popular technique for mapping sequences to sequences with neural networks, although it assumes a monotonic alignment between the inputs and the outputs [11, 9].", "startOffset": 205, "endOffset": 212}, {"referenceID": 30, "context": "30 (the LIUM system [31, 30]).", "startOffset": 20, "endOffset": 28}, {"referenceID": 29, "context": "30 (the LIUM system [31, 30]).", "startOffset": 20, "endOffset": 28}, {"referenceID": 29, "context": "Finally, we used the LSTM to rescore the publicly available 1000-best lists of the SMT baseline on the same task [30].", "startOffset": 113, "endOffset": 117}, {"referenceID": 26, "context": "Surprisingly, the LSTM did not suffer on very long sentences, despite the recent experience of other researchers with related architectures [27].", "startOffset": 140, "endOffset": 144}, {"referenceID": 33, "context": "The Recurrent Neural Network (RNN) [35, 29] is a natural generalization of feedforward neural networks to sequences.", "startOffset": 35, "endOffset": 43}, {"referenceID": 28, "context": "The Recurrent Neural Network (RNN) [35, 29] is a natural generalization of feedforward neural networks to sequences.", "startOffset": 35, "endOffset": 43}, {"referenceID": 4, "context": "[5]).", "startOffset": 0, "endOffset": 3}, {"referenceID": 13, "context": "While it could work in principle since the RNN is provided with all the relevant information, it would be difficult to train the RNNs due to the resulting long term dependencies [14, 4] (figure 1) [16, 15].", "startOffset": 178, "endOffset": 185}, {"referenceID": 3, "context": "While it could work in principle since the RNN is provided with all the relevant information, it would be difficult to train the RNNs due to the resulting long term dependencies [14, 4] (figure 1) [16, 15].", "startOffset": 178, "endOffset": 185}, {"referenceID": 15, "context": "While it could work in principle since the RNN is provided with all the relevant information, it would be difficult to train the RNNs due to the resulting long term dependencies [14, 4] (figure 1) [16, 15].", "startOffset": 197, "endOffset": 205}, {"referenceID": 14, "context": "While it could work in principle since the RNN is provided with all the relevant information, it would be difficult to train the RNNs due to the resulting long term dependencies [14, 4] (figure 1) [16, 15].", "startOffset": 197, "endOffset": 205}, {"referenceID": 15, "context": "However, the Long Short-Term Memory (LSTM) [16] is known to learn problems with long range temporal dependencies, so an LSTM may succeed in this setting.", "startOffset": 43, "endOffset": 47}, {"referenceID": 9, "context": "We use the LSTM formulation from Graves [10].", "startOffset": 40, "endOffset": 44}, {"referenceID": 17, "context": "First, we used two different LSTMs: one for the input sequence and another for the output sequence, because doing so increases the number model parameters at negligible computational cost and because doing so makes it natural to train the LSTM on multiple language pairs simultaneously [18].", "startOffset": 286, "endOffset": 290}, {"referenceID": 29, "context": "We trained our models on a subset of 12M sentences consisting of 348M French words and 304M English words, which is a clean \u201cselected\u201d subset from [30].", "startOffset": 147, "endOffset": 151}, {"referenceID": 29, "context": "We chose this translation task and this specific training set subset because of the public availability of a tokenized training and test set together with 1000-best lists from the LIUM SMT baseline [30, 31].", "startOffset": 198, "endOffset": 206}, {"referenceID": 30, "context": "We chose this translation task and this specific training set subset because of the public availability of a tokenized training and test set together with 1000-best lists from the LIUM SMT baseline [30, 31].", "startOffset": 198, "endOffset": 206}, {"referenceID": 29, "context": "We also used the LSTM to rescore the 1000-best lists produced by the LIUM system [30, 31].", "startOffset": 81, "endOffset": 89}, {"referenceID": 30, "context": "We also used the LSTM to rescore the 1000-best lists produced by the LIUM system [30, 31].", "startOffset": 81, "endOffset": 89}, {"referenceID": 16, "context": "As a result, the problem has a large \u201cminimal time lag\u201d [17].", "startOffset": 56, "endOffset": 60}, {"referenceID": 9, "context": "Thus we enforced a hard constraint on the norm of the gradient [10, 26, 23] by scaling it when its norm exceeded a threshold.", "startOffset": 63, "endOffset": 75}, {"referenceID": 25, "context": "Thus we enforced a hard constraint on the norm of the gradient [10, 26, 23] by scaling it when its norm exceeded a threshold.", "startOffset": 63, "endOffset": 75}, {"referenceID": 22, "context": "Thus we enforced a hard constraint on the norm of the gradient [10, 26, 23] by scaling it when its norm exceeded a threshold.", "startOffset": 63, "endOffset": 75}, {"referenceID": 24, "context": "We used the cased BLEU score [25] to evaluate the quality of our translations.", "startOffset": 29, "endOffset": 33}, {"referenceID": 1, "context": "[2] 28.", "startOffset": 0, "endOffset": 3}, {"referenceID": 29, "context": "45 LIUM System [30] 33.", "startOffset": 15, "endOffset": 19}, {"referenceID": 29, "context": "Method test BLEU score (ntst14) LIUM System [30] 33.", "startOffset": 44, "endOffset": 48}, {"referenceID": 4, "context": "[5] 34.", "startOffset": 0, "endOffset": 3}, {"referenceID": 23, "context": "So far, the simplest and most effective way of applying an RNN-Language Model (RNNLM) [24] or a Feedforward Neural Network Language Model (NNLM) [3] to an MT task is by rescoring the nbest lists of a strong MT baseline [22], which reliably improves translation quality.", "startOffset": 86, "endOffset": 90}, {"referenceID": 2, "context": "So far, the simplest and most effective way of applying an RNN-Language Model (RNNLM) [24] or a Feedforward Neural Network Language Model (NNLM) [3] to an MT task is by rescoring the nbest lists of a strong MT baseline [22], which reliably improves translation quality.", "startOffset": 145, "endOffset": 148}, {"referenceID": 21, "context": "So far, the simplest and most effective way of applying an RNN-Language Model (RNNLM) [24] or a Feedforward Neural Network Language Model (NNLM) [3] to an MT task is by rescoring the nbest lists of a strong MT baseline [22], which reliably improves translation quality.", "startOffset": 219, "endOffset": 223}, {"referenceID": 0, "context": "[1], who combine an NNLM with a topic model of the input sentence, which improves rescoring performance.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "[8] followed a similar approach, but they incorporated their NNLM into the decoder of an MT system and used the decoder\u2019s alignment information to provide the NNLM with the most useful words in the input sentence.", "startOffset": 0, "endOffset": 3}, {"referenceID": 17, "context": "Our work is closely related to Kalchbrenner and Blunsom [18], who were the first to map the input sentence into a vector and then back to a sentence, although they map sentences to vectors using convolutional neural networks, which lose the ordering of the words.", "startOffset": 56, "endOffset": 60}, {"referenceID": 4, "context": "[5] used an LSTM-like RNN architecture to map sentences into vectors and back, although their primary focus was on integrating their neural network into an SMT system.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "[2] also attempted direct translations with a neural network that used an attention mechanism to overcome the poor performance on long sentences experienced by Cho et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] and achieved encouraging results.", "startOffset": 0, "endOffset": 3}, {"referenceID": 26, "context": "[27] attempted to address the memory problem of Cho et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "[5] by translating pieces of the source sentence in way that produces smooth translations, which is similar to a phrase-based approach.", "startOffset": 0, "endOffset": 3}, {"referenceID": 11, "context": "[12], whose model represents the inputs and outputs by feedforward networks, and map them to similar points in space.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "We were initially convinced that the LSTM would fail on long sentences due to its limited memory, and other researchers reported poor performance on long sentences with a model similar to ours [5, 2, 27].", "startOffset": 193, "endOffset": 203}, {"referenceID": 1, "context": "We were initially convinced that the LSTM would fail on long sentences due to its limited memory, and other researchers reported poor performance on long sentences with a model similar to ours [5, 2, 27].", "startOffset": 193, "endOffset": 203}, {"referenceID": 26, "context": "We were initially convinced that the LSTM would fail on long sentences due to its limited memory, and other researchers reported poor performance on long sentences with a model similar to ours [5, 2, 27].", "startOffset": 193, "endOffset": 203}], "year": 2014, "abstractText": "Deep Neural Networks (DNNs) are powerful models that have achieved excellent performance on difficult learning tasks. Although DNNs work well whenever large labeled training sets are available, they cannot be used to map sequences to sequences. In this paper, we present a general end-to-end approach to sequence learning that makes minimal assumptions on the sequence structure. Our method uses a multilayered Long Short-Term Memory (LSTM) to map the input sequence to a vector of a fixed dimensionality, and then another deep LSTM to decode the target sequence from the vector. Our main result is that on an English to French translation task from the WMT-14 dataset, the translations produced by the LSTM achieve a BLEU score of 34.8 on the entire test set, where the LSTM\u2019s BLEU score was penalized on out-of-vocabulary words. Additionally, the LSTM did not have difficulty on long sentences. For comparison, a strong phrase-based SMT system achieves a BLEU score of 33.3 on the same dataset. When we used the LSTM to rerank the 1000 hypotheses produced by the aforementioned SMT system, its BLEU score increases to 36.5, which beats the previous state of the art. The LSTM also learned sensible phrase and sentence representations that are sensitive to word order and are relatively invariant to the active and the passive voice. Finally, we found that reversing the order of the words in all source sentences (but not target sentences) improved the LSTM\u2019s performance markedly, because doing so introduced many short term dependencies between the source and the target sentence which made the optimization problem easier.", "creator": "LaTeX with hyperref package"}}}