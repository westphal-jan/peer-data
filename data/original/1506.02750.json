{"id": "1506.02750", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Jun-2015", "title": "Self Organizing Maps Whose Topologies Can Be Learned With Adaptive Binary Search Trees Using Conditional Rotations", "abstract": "Numerous variants of Self-Organizing Maps (SOMs) have been proposed in the literature, including those which also possess an underlying structure, and in some cases, this structure itself can be defined by the user Although the concepts of growing the SOM and updating it have been studied, the whole issue of using a self-organizing Adaptive Data Structure (ADS) to further enhance the properties of the underlying SOM, has been unexplored. In an earlier work, we impose an arbitrary, user-defined, tree-like topology onto the codebooks, which consequently enforced a neighborhood phenomenon and the so-called tree-based Bubble of Activity. In this paper, we consider how the underlying tree itself can be rendered dynamic and adaptively transformed. To do this, we present methods by which a SOM with an underlying Binary Search Tree (BST) structure can be adaptively re-structured using Conditional Rotations (CONROT). These rotations on the nodes of the tree are local, can be done in constant time, and performed so as to decrease the Weighted Path Length (WPL) of the entire tree. In doing this, we introduce the pioneering concept referred to as Neural Promotion, where neurons gain prominence in the Neural Network (NN) as their significance increases. We are not aware of any research which deals with the issue of Neural Promotion. The advantages of such a scheme is that the user need not be aware of any of the topological peculiarities of the stochastic data distribution. Rather, the algorithm, referred to as the TTOSOM with Conditional Rotations (TTOCONROT), converges in such a manner that the neurons are ultimately placed in the input space so as to represent its stochastic distribution, and additionally, the neighborhood properties of the neurons suit the best BST that represents the data. These properties have been confirmed by our experimental results on a variety of data sets.", "histories": [["v1", "Tue, 9 Jun 2015 02:29:57 GMT  (913kb)", "http://arxiv.org/abs/1506.02750v1", null]], "reviews": [], "SUBJECTS": "cs.NE cs.AI", "authors": ["c\\'esar a astudillo", "b john oommen"], "accepted": false, "id": "1506.02750"}, "pdf": {"name": "1506.02750.pdf", "metadata": {"source": "CRF", "title": "Self Organizing Maps Whose Topologies Can Be Learned With Adaptive Binary Search Trees Using Conditional Rotations", "authors": ["C\u00e9sar A. Astudillo", "John Oommen"], "emails": ["castudillo@utalca.cl", "oommen@scs.carleton.ca"], "sections": [{"heading": null, "text": "ar X\niv :1\n50 6.\n02 75\n0v 1\n[ cs\n.N E\n] 9\nJ un\nNumerous variants of Self-Organizing Maps (SOMs) have been proposed in the literature, including those which also possess an underlying structure, and in some cases, this structure itself can be defined by the user Although the concepts of growing the SOM and updating it have been studied, the whole issue of using a self-organizing Adaptive Data Structure (ADS) to further enhance the properties of the underlying SOM, has been unexplored. In an earlier work, we impose an arbitrary, user-defined, tree-like topology onto the codebooks, which consequently enforced a neighborhood phenomenon and the so-called tree-based Bubble of Activity (BoA). In this paper, we consider how the underlying tree itself can be rendered dynamic and adaptively transformed. To do this, we present methods by which a SOM with an underlying Binary Search Tree (BST) structure can be adaptively re-structured using Conditional Rotations (CONROT). These rotations on the nodes of the tree are local, can be done in constant time, and performed so as to decrease the Weighted Path Length (WPL) of the entire tree. In doing this, we introduce the pioneering concept referred to as Neural Promotion, where neurons gain prominence in the Neural Network (NN) as their significance increases. We are not aware of any research which deals with the issue of Neural Promotion. The advantages of such a scheme is that the user need not be aware of any of the topological peculiarities of the stochastic data distribution. Rather, the algorithm, referred to as the TTOSOM with Conditional Rotations (TTOCONROT), converges in such a manner that the neurons are ultimately placed in the input space so as to represent its stochastic distribution, and additionally, the neighborhood properties of the neurons suit the best BST that represents the data. These properties have been confirmed by our experimental results on a variety of data sets. We submit that all of these concepts are both novel and of a pioneering sort.\nKeywords: Adaptive Data Structures, Binary Search Trees, Self-Organizing Maps\n\u2217Universidad de Talca, Merced 437 Curico\u0301, Chile. castudillo@utalca.cl \u2020This author is Assistant Professor at the Department of Computer Science, with the Universidad de Talca. This work is partially supported by the FONDECYT grant 11121350, Chile. A very preliminary version of this paper was presented at AI\u201909, the 2009 Australasian Joint Conference on Artificial Intelligence, Melbourne, Australia, in December 2009. That paper won the award of being the Best Paper of the Conference. We are also very grateful for the comments made by the Associate Editor and the anonymous Referees. Their input helped in improving the quality of the final version of this paper. Thank you very much! \u2021School of Computer Science, Carleton University, Ottawa, Canada : K1S 5B6. oommen@scs.carleton.ca \u00a7Chancellor\u2019s Professor ; Fellow : IEEE and Fellow : IAPR. This author is also an Adjunct Professor with the University of Agder in Grimstad, Norway. The work of this author was partially supported by NSERC, the Natural Sciences and Engineering Research Council of Canada."}, {"heading": "1 Introduction", "text": "This paper is a pioneering attempt to merge the areas of Self-Organizing Maps (SOMs) with the theory of Adaptive Data Structures (ADSs). Put in a nutshell, we can describe the goal of this paper as follows: Consider a SOM with n neurons. Rather than having the neurons merely possess information about the feature space, we also attempt to link them together by means of an underlying Data Structure (DS). This DS could be a singly-linked list, a doubly-linked list or a Binary Search Tree (BST), etc. The intention is that the neurons are governed by the laws of the SOM and the underlying DS. Observe now that the concepts of \u201cneighborhood\u201d and Bubble of Activity (BoA) are not based on the nearness of the neurons in the feature space, but rather on their proximity in the underlying DS. Having accepted the above-mentioned premise, we intent to take this entire concept to a higher level of abstraction and propose to modify this DS itself adaptively using operations specific to it. As far as we know, the combination of these concepts has been unreported in the literature.\nBefore we proceed, to place our results in the right perspective, it is probably wise to see how the concept\nof neighborhood has been defined in the SOM literature.\nKohonen, in his book [36], mentions that it is possible to distinguish between two basic types of neighborhood functions. The first family involves a kernel function (which is usually of a Gaussian nature). The second, is the so-called neighborhood set, also known as the Bubble of Activity (BoA). This paper focuses on the second type of neighborhood function.\nEven though the traditional SOM is dependent on the neural distance to estimate the subset of neurons to be incorporated into the BoA, this is not always the case for the SOM-variants included in the literature. Indeed, the different strategies described in the state-of-the-art utilize families of schemes to define the BoA. We mainly identify three sub-classes.\nThe first type of BoA uses the concept of the neural distance as in the case of the traditional SOM. Once the Best Matching Unit (BMU) is identified, the neural distance is calculated by traversing the underlying structure that holds the neurons. An important property of the neural distance between two neurons is that it is proportional to the number of connections separating them. Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.\nA second subset of strategies employ a scheme for determining the BoA that does not depend on the inter-neural connections. Instead, such strategies utilize the distance in the feature space. In these cases, it is possible to distinguish between two types of Neural Networks (NNs). The simplest situation occurs when the BoA only considers the BMU, i.e., it constitutes an instance of hard Competitive Learning (CL), as in the case of the Tree-Structured VQ (TSVQ) [37] and the Self-Organizing Tree Map (SOTM) [27].\nA more sophisticated and computationally expensive scheme involves ranking the neurons as per their respective distances to the stimulus. In this scenario, the BoA is determined by selecting a subset of the\nclosest neurons. An example of a SOM variant that uses such a ranking is the Neural Gas (NG) [40].\nAccording to the authors of [46], the SOM-based variants included in the literature attempt to tackle two main goals: They either try to design a more flexible topology, which is usually useful to analyze large datasets, or to reduce the the most time-consuming task required by the SOM, namely, the search for the BMU when the input set has a complex nature. In this paper we focus on the former of the two mentioned goals. In other words, our goal is to enhance the capabilities of the original SOM algorithm so as to represent the underlying data distribution and its structure in a more accurate manner. We also intend to do so by constraining the neurons so that they are related to each other, not just based on their neural indices and stochastic distribution, but also based on a BST relationship.\nFurthermore, as a long term ambition, we also anticipate methods which can accelerate the task of locating the nearest neuron during the CL phase. This work will present the details of the design and implementation of how an adaptive process applied to the BST, can be integrated into the SOM.\nRegardless of the fact that numerous variants of the SOM has been devised, few of them possess the ability of modifying the underlying topology [13, 21, 22, 26, 27, 42, 46, 52]. Moreover, only a small subset use a tree as their underlying DS [8, 21, 22, 27, 46, 52]. These strategies attempt to dynamically modify the nodes of the SOM, for example, by adding nodes, which can be a single neuron or a layer of a SOM-grid. However, our hypothesis is that it is also possible to attain to a better understanding of the unknown data distribution by performing structural tree-based modifications on the tree, which although they preserve the general topology, attempt to modify the overall configuration, i.e., by altering the way by which nodes are interconnected, and yet continue as a BST. We accomplish this by dynamically adapting the edges that connect the neurons, by rotating1 the nodes within the BST that holds the whole structure of neurons. As we will explain later, this is further achieved by local modifications to the overall structure in a constant number of steps. Thus, we attempt to use rotations, tree-based neighbors and the feature space to improve the quality of the SOM."}, {"heading": "1.1 Motivations", "text": "Acquiring information about a set of stimuli in an unsupervised manner, usually demands the deduction of its structure. In general, the topology employed by any Artificial Neural Network (ANN) possessing this ability has an important impact on the manner by which it will \u201cabsorb\u201d and display the properties of the input set. Consider for example, the following: A user may want to devise an algorithm that is capable of learning a triangle-shaped distribution as the one depicted in Figure 1. The SOM tries to achieve this by defining an underlying grid-based topology and to fit the grid within the overall shape, as shown in Figure 1a (duplicated from [36]). However, from our perspective, a grid-like topology does not naturally fit a triangular-shaped distribution, and thus, one experiences a deformation of the original lattice during the modeling phase. As opposed to this, Figure 1b, shows the result of applying one of the techniques developed by us, namely the TTOSOM [8]. As the reader can observe from Figure 1b, a 3-ary tree seems to be a far more superior choice for representing the particular shape in question.\n1The operation of rotation is the one associated with BSTs, as will be presently explained.\nOn closer inspection, Figure 1b depicts how the complete tree fills in the triangle formed by the set of stimuli, and further, seems to do it uniformly. The final position of the nodes of the tree suggests that the underlying structure of the data distribution corresponds to the triangle. Additionally, the root of the tree is placed roughly in the center of mass of the triangle. It is also interesting to note that each of the three main branches of the tree, cover the areas directed towards a vertex of the triangle respectively, and their sub-branches fill in the surrounding space around them in a recursive manner, which we identify as being a holograph-like behavior.\nOf course, the triangle of Figure 1b serves only as a very simple prima facie example to demonstrate to the reader, in an informal manner, how both techniques will try to learn the set of stimuli. Indeed, in real-world problems, these techniques can be employed to extract the properties of high-dimensional samples.\nOne can argue that imposing an initial topological configuration is not in accordance with the founding principles of unsupervised learning, the phenomenon that is supposed to occur without \u201csupervision\u201d within the human brain. As an initial response we argue that this \u201csupervision\u201d is required to enhance the training phase, while the information we provide relates to the initialization phase. Indeed, this is in line with the well-accepted principle [23], that very little can be automatically learned about a data distribution if no assumptions are made!\nAs the next step of motivating this research endeavor, we venture into a world where the neural topology and structure are themselves learned during the training process. This is achieved by the method that we propose in this paper, namely the TTOSOM with Conditional Rotations (TTOCONROT), which, in essence, dynamically extends the properties of the above-mentioned TTOSOM. Again, to accomplish this we need key concepts that are completely new to the field of SOMs, namely those related to tree-based Adaptive Data Structure (ADS). Indeed, as demonstrated by our experiments, the results that we have already obtained have been applauded by the research community2, and these, to the best of our knowledge, have remained unreported in the literature.\nAnother reason why we are interested in such an inter-area integration, deals with the issue for devising efficient methods that add neurons to the tree. Even though the schemes that we are currently proposing\n2As mentioned earlier, a paper which reported the preliminary results of this study, won the Best Paper Award in a well-known international AI conference [7].\nin this paper focus on tree adaptation by means of rotations, we envision another type of dynamism,i.e., one which involves the expansion of the tree structure through the insertion of newly created nodes. The state-of-the-art considers different strategies that expand trees by inserting nodes (which can be a single neuron or a SOM-layer) that essentially are based on a Quantization Error (QE) measure. In some of these strategies, the error measure is based on the \u201chits\u201d, i.e., the number of times a neuron has been selected as the BMU, c.f., [13, 24, 37, 46]. The strategy that we have chosen for adapting the tree, namely using Conditional Rotations (CONROT), already utilizes this BMU counter, and, distinct to the previous strategies that attempt to search for a node to be expanded (which in the case of tree-based SOMs is usually at the level of the leaves [37, 46]), we foresee and advocate a different approach. Our TTOCONROT method asymptotically positions frequently accessed nodes close to the root, and so, according to this property, it is the root node which should be split. Observe that if we follow such a philosophy, one would not have to search for a node with a higher QE measure. Rather, the CONROT, will be hopefully, able to migrate the candidates closer to the root. Of course, this works with assumption that a larger number of hits indicates that the degree of granularity of a particular neuron justifies refinement. The concept of using the root of the tree for growing a tree-based SOM is, in and of itself, pioneering, as far as we know."}, {"heading": "1.2 Contributions of the Paper", "text": "The contributions of the paper can be summarized as follows:\n1. We present an integration of the fields of SOMs and ADS. This, we respectfully, submit as pioneering.\n2. The neurons of the SOM are linked together using an underlying tree-based DS, and they are governed\nby the laws of the TTOSOM tree-based paradigm, and simultaneously the restructuring adaptation provided by CONROT.\n3. The definition of distance between the neurons is based on the tree structure, and not in the feature\nspace. This is valid also for the BoA, rendering the migrations distinct from the state-of-the-art.\n4. The adaptive nature of the TTOCONROT is unique because adaptation is perceived in two forms: The\nmigration of the codebook vectors in the feature space is a consequence of the SOM update rule, and the rearrangement of the neurons within the tree as a result of the rotations."}, {"heading": "1.3 Organization of the Paper", "text": "The rest of the paper is organized as follows. The next section surveys the relevant literature3, which involves both the field of SOMs including their tree-based instantiations, and the respective field of BSTs with conditional rotations. After that, in Section 2, we provide an in-depth explanation of the TTOCONROT philosophy, which is our primary contribution. The subsequent section shows the capabilities of the approach through a series of experiments, and finally, Section 5 concludes the paper.\n3For the sake of space the literature review has been considerably condensed. However, given that there is no survey paper on the area of tree-based SOMs reported in the literature, we are currently preparing a paper that summarizes the field."}, {"heading": "2 Literature Review", "text": ""}, {"heading": "2.1 The SOM", "text": "One of the most important families of ANNs used to tackle clustering problems is the well known SOM [36]. Typically, the SOM is trained using (un)supervised learning, so as to produce a neural representation in a space whose dimension is usually smaller than that in which the training samples lie. Further, the neurons attempt to preserve the topological properties of the input space.\nThe SOM concentrates all the information contained in a set of n input samples belonging to the ddimensional space, say X = {x1,x2, . . . ,xn}, utilizing a much smaller set of neurons, C = {c1, c2, . . . , cm}, each of which is represented as a vector. Each of them neurons contains a weight vectorw = [w1, w2, . . . , wd] t \u2208 IRd associated with it. These vectors are synonymously called \u201cweights\u201d, \u201cprototypes\u201d or \u201ccodebook\u201d vectors. The vector wi may be perceived as the position of neuron ci in the feature space. During the training phase, the values of these weights are adjusted simultaneously so as to represent the data distribution and its structure. In each training step a stimulus (a representative input sample from the data distribution) x is presented to the network, and the neurons compete between themselves so as to identify which is the \u201cwinner\u201d, also known as the Best Matching Unit (BMU). After identifying the BMU, a subset of the neurons \u201cclose\u201d to it are considered to be within the so-called Bubble of Activity (BoA), which further depends on a parameter specified to the algorithm, namely, the so-called radius. Thereafter, this scheme performs a migration of the codebooks within that BoA so as to position them closer to the sample being examined. The migration factor by which this update is effected, depends on a parameter known as the learning rate, which is typically expected to be large initially, and which decreases as the algorithm proceeds, and which ultimately results in no migration at all. Algorithm 1 describes the details of the SOM philosophy. In Algorithm 1, the parameters are scheduled by defining a sequence S = \u3008S1, S2, . . . , Ss\u3009, where each Si corresponds to a tuple (\u03b7i, ri, ti) that specifies the learning rate, \u03b7i, and the radius, ri, for a fixed number of training steps, ti. The way in which the parameters decay is not specified in the original algorithm, and some alternatives are, e.g., that the parameters remain fixed, decrease linearly, exponentially, etc.\nAlgorithm 1 SOM(X ,S) Input: i) X , the input sample set.\nii) S, the schedule for the parameters. Method: 1: Initialize the weights w1,w2, . . . ,wm, e.g., by randomly selecting elements from X . 2: repeat 3: Obtain a sample x from X . 4: Find the Winner neuron, i.e., the one which is most similar to x. 5: Determine a subset of neurons close to the winner. 6: Migrate the closest neuron and its neighbors towards x. 7: Modify the learning factor and radius as per the pre-defined schedule. 8: until no noticeable changes are observed. End Algorithm\nAlthough the SOM has demonstrated an ability to solve problems over a wide spectrum, it possesses some\nfundamental drawbacks. One of these drawbacks is that the user must specify the lattice a priori, which has the effect that he must run the ANN a number of times to obtain a suitable configuration. Other handicaps involve the size of the maps, where a lesser number of neurons often represent the data inaccurately.\nThe state-of-the-art approaches attempt to render the topology more flexible, so as to represent complicated data distributions in a better way and/or to make the process faster by, for instance, speeding up the task of determining the BMU.\nThere are a vast number of domain fields where the SOM has demonstrated to be useful; a compendium with all the articles that take advantage of the properties of the SOM is surveyed in [32, 45]. These survey papers classify the publications related to the SOM according to their year of release. The report [32] includes the bibliography published between the year 1981 and 1998, while the report [45] includes the analogous papers published between 1998 and 2001. Further, additional recent references including the related work up to the year 2005 have been collected in a technical report [48]. The more recent literature reports a host of application domains, including Medical Image Processing [2], Human Eye Detection [33], Handwriting Recognition [39], Image Segmentation [56], Information Retrieval [20], Object Tracking [30], etc."}, {"heading": "2.2 Tree-Based SOMs", "text": "Although an important number of variants of the original SOM have been presented through the years, we focus our attention on a specific family of enhancements in which the neurons are inter-connected using a tree topology.\nThe Tree-Structured VQ (TSVQ) algorithm [37] is a tree-based SOM variant, whose topology is defined a priori and which is static. The training first takes place at highest levels of the tree. The TSVQ incorporates the concept of a \u201cfrozen\u201d node, which implies that after a node is trained for a certain amount of time, it becomes static. The algorithm then allows subsequent units, i.e., the direct children, to be trained. The strategy utilizes a heuristic search algorithm for rapidly identifying a BMU. It starts from the root and recursively traverses the path towards the leaves. If the unit currently being analyzed is frozen, the algorithm identifies the child which is closest to the stimulus, and performs a recursive call. The algorithm terminates when the node currently being analyzed is not a frozen node (i.e., it is currently being trained), and is returned as the BMU.\nKoikkalainen and Oja, in the same paper [37] refine the idea of the TSVQ by defining the TSSOM, which inherits all the properties of the TSVQ, but redefines the search procedure and BoA. In the case of the TSSOM, SOM layers of different dimensions are arranged in a pyramidal shape (which can be perceived as a SOM with different degrees of granularity). It differs from the TSVQ, in the sense that, once the BMU is found, the direct proximity is examined to check for the BMU. On the other hand, the BoA differs in that, instead of considering only the BMU, its direct neighbors (in the pyramid) will also be considered.\nThe Self-Organizing Tree Algorithm (SOTA) [22] is a dynamically growing tree-based SOM which, according to their authors, take some analogies from the Growing Cell Structures (GCS) [24]. The SOTA utilizes a binary tree as the underlying structure, and similarly to other strategies (e.g., the TSSOM [37] and the Evolving Tree (ET) [46] explained below), it considers the migration of the neurons only if they\ncorrespond to leaf nodes within the tree structure. Its BoA depends on the neural tree and is defined for two cases. The most general case occurs when the parent of the BMU is not the root, i.e., a situation in which the BoA is composed by the BMU, its sibling and its parent node. Otherwise, the BoA constitutes the BMU only. The SOTA triggers a growing mechanism that utilizes a QE to determine the node to be split into two new descendants.\nIn [21] the authors presented a tree-based SOM called the Growing Hierarchical SOM (GHSOM), in which each node corresponds to an independent SOM. The expansion of the structure is dual: The first type of adaptation is conceived by inserting new rows (or columns) to the SOM grid that is currently being trained, while the second type is implemented by adding layers to the hierarchical structure. Both types of dynamism depend on the verification of QE measures.\nThe SOTM [27] is a tree-based SOM which is also inspired by the Adaptive Resonance Theory (ART) [15]. In the SOTM, when the input is within a threshold distance from the BMU, the latter is migrated. Otherwise, a new neuron is added to the tree. Thus, in the SOTM, the subset of neurons to be migrated depends only on the distance in the feature space, and not in the neural distance, as most of the tree-based SOM families.\nIn [46], the authors have proposed a tree-structured NN called the Evolving Tree (ET), which takes advantage of a sub-optimal procedure (adapted from the one utilized by the TSVQ) to identify the BMU in O(log |V |) time, where V is the set of neurons. The ET adds neurons dynamically, and incorporates the concept of a \u201cfrozen\u201d neuron (explained above), which is a non-leaf node that does not participate in the training process, and which is thus removed from the BoA. Similar to the TSVQ, the training phase terminates when all the nodes become frozen.\nThe Tree-based Topology Oriented SOM (TTOSOM) [8], which is central to this paper, is a tree-based SOM in which each node can possess an arbitrary number of children. Furthermore, it is assumed that the user has the ability to describe/create such a tree whose topological configuration is preserved through the training process. The TTOSOM uses a particular BoA that includes nodes (leaf and non-leaf ones) that are within a certain neural distance (the so-called \u201cradius\u201d). An interesting property displayed by this strategy is its ability to reproduce the results obtained by Kohonen, when the nodes of the SOM are arranged linearly, i.e., in a list. In this case, the TTOSOM is able to adapt this 1-dimensional grid to a 2-dimensional (or multi-dimensional) object in the same way as the SOM algorithm does [8]. This was a phenomenon that was not possessed by prior hierarchical SOM-based networks reported in the literature4. Additionally, if the original topology of the tree followed the overall shape of the data distribution, the results reported in [8] (and also depicted in the motivational section) showed that is also possible to obtain a symmetric topology for the codebook vectors. In a more recent work [9], the authors have enhanced the TTOSOM to perform classification in a semi-supervised fashion. The method presented in [9] first learns the data distribution in an unsupervised manner. Once labeled instances become available, the clusters are labeled using the evidence. According to the results presented in [9], the number of neurons required to accurately predict the category\n4The SOM possesses the ability to learn the data distribution by utilizing a unidimensional topology [36], i.e., the neighbors are defined along a grid in each direction. Further, when this is the case, one can encounter that the unidimensional topology forms a so-called Peano curve [47]. The TTOSOM also possesses this interesting property, when the tree topology is linear. The details of how this is achieved is presented in detail in [8], including the explanation of how other tree-based techniques fail to achieve this task.\nof novel data are only a small portion of the cardinality of the input set."}, {"heading": "3 Merging ADS and TTOSOM", "text": ""}, {"heading": "3.1 Adaptive Data Structures (ADSs) for BSTs", "text": "One of the primary goals of the area of ADS is to achieve an optimal arrangement of the elements, placed at the nodes of the structure, as the number of iterations increases. This reorganization can be perceived to be both automatic and adaptive, such that on convergence, the DS tends towards an optimal configuration with a minimum average access time. In most cases, the most probable element will be positioned at the root (head) of the tree (DS), while the rest of the tree is recursively positioned in the same manner. The solution to obtain the optimal BST is well known when the access probabilities of the nodes are known a priori [35]. However, our research concentrates on the case when these access probabilities are not known a priori. In this setting, one effective solution is due to Cheetham et al. and uses the concept of CONROT [16], which reorganizes the BST so as to asymptotically produce the optimal form. Additionally, unlike most of the algorithms that are otherwise reported in the literature, this move is not done on every data access operation \u2013 it is performed if and only if the overall Weighted Path Length (WPL) of the resulting BST decreases.\nA BST may be used to store records whose keys are members of an ordered set A = {A1, A2, . . . , AN}. The records are stored in such a way that a symmetric-order traversal of the tree will yield the records in an ascending order. If we are given A and the set of access probabilities Q = {Q1, Q2, . . . , QN}, the problem of constructing efficient BSTs has been extensively studied. The optimal algorithm due to Knuth [35], uses dynamic programming and produces the optimal BST using O(N2) time and space. In this paper, we consider the scenario in which Q, the access probability vector, is not known a priori. We seek a scheme which dynamically rearranges itself and asymptotically generates a tree which minimizes the access cost of the keys.\nThe primitive tree restructuring operation used in most BST schemes is the well known operation of Rotation [1]. We describe this operation as follows. Suppose that there exists a node i in a BST, and that it has a parent node j, a left child, iL, and a right child, iR. The function P (i) = j relates node i with its parent j (if it exists). Also, let B(i) = k relate node i with its sibling k, i.e., the node (if it exists) that shares the same parent as i. Consider the case when i is itself a left child (see Figure 2a). A rotation is performed on node i as follows: j now becomes the right child, iR becomes the left child of node j, and all the other nodes remain in their same relative positions (see Figure 2b). The case when node i is a right child is treated in a symmetric manner. This operation has the effect of raising (or promoting) a specified node in the tree structure while preserving the lexicographic order of the elements (refer again to Figure2b).\nA few memory-less tree reorganizing schemes5 which use this operation have been presented in the literature among which are the Move-to-Root and the simple Exchange rules [4]. In the Move-to-Root Heuristic, each time a record is accessed, rotations are performed on it in an upwards direction until it becomes the\n5This review is necessary brief. A more detailed version is found in [18, 38].\nroot of the tree. On the other hand, the simple Exchange rule rotates the accessed element one level towards the root.\nSleator and Tarjan [54] introduced a technique, which also moves the accessed record up to the root of the tree using a restructuring operation called \u201cSplaying\u201d, which actually is a multi-level generalization of the rotation. Their structure, called the Splay Tree, was shown to have an amortized time complexity of O(logN) for a complete set of tree operations which included insertion, deletion, access, split, and join.\nThe literature also records various schemes which adaptively restructure the tree with the aid of additional memory locations. Prominent among them is the Monotonic Tree (MT) [12] and Mehlhorn\u2019s D-Tree (DT) [41]. The MT is a dynamic version of a tree structuring method originally suggested by Knuth [35].\nIn spite of all their advantages, all of the schemes mentioned above have drawbacks, some of which are more serious than others. The memory-less schemes have one major disadvantage, which is that both the Move-to-Root and Splaying rules always move the accessed record up to the root of the tree. This means that if a nearly-optimal arrangement is reached, a single access of a seldomly-used record will disarrange the tree along the entire access path, as the element is moved upwards to the root.\nAs opposed to these schemes, the MT rule does not move the accessed element to the root every time. But, as reported in [16], in practice, it does not perform well. The weakness of the MT lies in the fact that it considers only the frequency counts for the records, which leads to the undesirable property that a single rotation may move a subtree with a relatively large probability weight downwards, thus increasing the cost of the tree.\nThis paper uses a particular heuristic, namely, the Conditional Rotations for a BST (CONROT-BST) [16], which has been shown to reorganize a BST so as to asymptotically arrive at an optimal form. In its optimized version, the scheme, referred to Algorithm CONROT-BST, requires the maintenance of a single memory location per record, which keeps track of the number of accesses to the subtree rooted at that record. The CONROT-BST algorithm specifies how an accessed element can be rotated towards the root of the tree so as to minimize the overall cost of the entire tree. Finally, unlike most of the algorithms that are currently\nin the literature, this move is not done on every data access operation. It is performed if and only if the overall WPL of the resulting BST decreases. In essence Algorithm CONROT-BST attempts to minimize the WPL by incorporating the statistical information about the accesses to the various nodes and subtrees rooted at the corresponding nodes.\nThe basic condition for the rotation of a node is that the WPL of the entire tree must decrease as a result of a single rotation. This is achieved by a so-called Conditional Rotation. To define the concept of a Conditional Rotation, we define \u03c4i(n) as the total number of accesses to the subtree rooted at node i. One of the biggest advantages of the CONROT-BST heuristic is that it only requires the maintenance and processing of the values stored at a specific node and its direct neighbors, i.e., its parent and both children, if they exist.\nAlgorithm CONROT-BST, formally given in Algorithm 2, describes the process of the conditional rotations for a BST. The algorithm receives two parameters, the first of which corresponds to a pointer to the root of the tree, and the second which corresponds to the key to be searched, which is assumed to be present in the tree. When a node access is requested, the algorithm seeks for the node from the root down towards the leaves.\nAlgorithm 2 CONROT-BST(j,ki) Input: i) j, A pointer to the root of a binary search tree T ii) ki, A search key, assumed to be in T Output: i) The restructured tree T \u2032 ii) A pointer to the record i containing ki Method: 1: \u03c4j \u2190 \u03c4j + 1 2: if ki = kj then 3: if is-left-child(j) = TRUE then 4: \u03a8j \u2190 2\u03c4j \u2212 \u03c4jR \u2212 \u03c4P (j) 5: else 6: \u03a8j \u2190 2\u03c4j \u2212 \u03c4jL \u2212 \u03c4P (j) 7: end if 8: if \u03a8j > 0 then 9: rotate-upwards(j) 10: recalculate-tau(j) 11: recalculate-tau(P (j)) 12: end if 13: return record j 14: else 15: if ki < kj then 16: CONROT-BST( left-child(j) , ki ) 17: else 18: CONROT-BST( right-child(j) , ki ) 19: end if 20: end if End Algorithm\nThe first task accomplished by the Algorithm CONROT-BST is the updating of the counter \u03c4 for the present node along the path traversed. After that, the next step consists of determining whether or not the\nnode with the requested key has been found. When this occurs, the quantities defined by Equations (1) and (2) are computed to determine the value of a quantity referred to as \u03a8, where:\n\u03a8j = 2\u03c4j \u2212 \u03c4jR \u2212 \u03c4P (j) (1)\nwhen j is the left child of its parent, P (j), and\n\u03a8j = 2\u03c4j \u2212 \u03c4jL \u2212 \u03c4P (j) (2)\nwhen j is a right descendant of P (j).\nWhen \u03a8 is less than zero, an upward rotation is performed. The authors of [16] have shown that this single rotation leads to a decrease in the overall WPL of the entire tree. This occur in line 9 of the algorithm, in which the method rotate-upwards is invoked. The parameter to this method is a pointer to the node j. The method does the necessary operations required to rotate the node upwards, which means that if the node j is the left child of the parent, then this is equivalent to performing a right rotation over P (j), the parent of j. Analogously, when j is the right child of its parent, the parent of j is left-rotated instead. Once the rotation takes place, it is necessary to update the corresponding counters, \u03c4 . Fortunately this task only involve the updating of \u03c4i, for the rotated node, and the counter of its parent, \u03c4P (i). The last part of the algorithm, namely lines 14\u201319, deals with the further search for the key, which in this case is achieved recursively.\nThe reader will observe that all the tasks invoked in the algorithm are performed in constant time, and in the worst case, the recursive call is done from the root down to the leaves, leading to a O(h) running complexity, where h is the height of the tree."}, {"heading": "3.2 The TTOSOM with Conditional Rotations (TTOCONROT)", "text": "This section concentrates on the details of the integration between the fields of ADS and the SOM, and in particular, the TTOSOM. Although merging ADS and the SOM is relevant to a wide spectrum of DSs, we focus our scope by considering only tree-based structures. More specifically we shall concentrate on the integration of the CONROT-BST heuristic [16] into a TTOSOM [8], both of which were explained in the preceding sections.\nWe can conceptually distinguish our method, namely, the Tree-based Topology Oriented SOM with Con-\nditional Rotations (TTOCONROT) from its components and properties.\nIn terms of components, we detect five elements. First of all, the TTOCONROT has a set of neurons, which, like all SOM-based methods, represents the data space in a condensed manner. Secondly, the TTOCONROT possesses a connection between the neurons, where the neighbor of any specific neuron is based on a nearness measure that is tree-based. The third and fourth components involve the migration of the neurons. Similar to the reported families of SOMs, a subset of neurons closest to the winning neuron are moved towards the sample point using a Vector Quantization (VQ) rule. However, unlike the reported families of SOMs, the identity of the neurons that are moved is based on the tree-based proximity and not on\nthe feature-space proximity. Finally, the TTOCONROT possesses tree-based mutating operations, namely the above-mentioned conditional rotations.\nWith respect to the properties of the TTOCONROT, we mention the following. First of all, it is adaptive, with regard to the migration of the points. Secondly, it is also adaptive with regard to the identity of the neurons moved. Thirdly, the distribution of the neurons in the feature space mimics the distribution of the sample points. Finally, by virtue of the conditional rotations, the entire tree is optimized with regard to the overall accesses, which is a unique phenomenon (when compared to the reported family of SOMs) as far as we know.\nAs mentioned in the introductory section, the general dynamic adaptation of SOM lattices reported in the literature considers essentially adding (and in some cases deleting) nodes/edges. However the concept of modifying the underlying structure\u2019s shape itself has been unrecorded. Our hypothesis is that this is advantageous by means of a repositioning of the nodes and the consequent edges, as seen when one performs rotations on a BST. In other words, we place our emphasis on the self-arrangement which occurs as a result of restructuring the DS representing the SOM. In this case, as alluded to earlier, the restructuring process is done between the connections of the neurons so as to attain an asymptotically optimal configuration, where nodes that are accessed more frequently will tend to be placed close to the root. We thus obtain a new species of tree-based SOMs which is self-arranged by performing rotations conditionally, locally and in a constant number of steps.\nThe primary goal of the field of ADS is to have the structure and its elements attain an optimal configuration as the number of iterations increases. Particularly, among the ADSs that use trees as the underlying topology, the common goal is to minimize the overall access cost, and this roughly means that one places the most frequently accessed nodes close to the root, which is also what CONROT-BST moves towards. Although such an adaptation can be made on any SOM paradigm, the CONROT is relevant to a tree structure, and thus to the TTOSOM. This further implies that some specific settings/modifications must be applied to achieve the integration between the two paradigms.\nWe start by defining a Binary Search Tree SOM (BSTSOM) as a special instantiation of a SOM which uses a BST as the underlying topology. An Adaptive BSTSOM (ABSTSOM) is a further refinement of the BSTSOM which, during the training process, employs a technique that automatically modifies the configuration of the tree. The goal of this adaptation is to facilitate and enhance the search process. This assertion must be viewed from the perspective that for a SOM, neurons that represent areas with a higher density, will be queried more often.\nEvery ABSTSOM is characterized by the following properties. First, it is adaptive, where, by virtue of the BST representation this adaptation is done by means of rotations, rather than by merely deleting or adding nodes. Second, the neural network corresponds to a BST. The goal is that the NN maintains the essential stochastic and topological properties of the SOM."}, {"heading": "3.2.1 Neural Distance", "text": "As in the case of the TTOSOM [8], the Neural Distance, dN , between two neurons depends on the number of unweighted connections that separate them in the user-defined tree. It is consequently the number of edges\nin the shortest path that connects the two given nodes. More explicitly, the distance between two nodes in the tree, is defined as the minimum number of edges required to go from one to the other. In the case of trees, the fact that there is only a single path connecting two nodes implies the uniqueness of the shortest path, and permits the efficient calculation of the distance between them by a node traversal algorithm. Note however, that in the case of the TTOSOM, since the tree itself was static, the inter-node distances can be pre-computed a priori, simplifying the computational process. The situation changes when the tree is dynamically modified as we shall explain below.\nThe implications of having the tree which describes the SOM to be dynamic, are three-fold. First of all, the siblings of any given node may change at every time instant. Secondly, the parents and ancestors of the node under consideration could also change at every instant. But most importantly, the structure of the tree itself could change, implying that nodes that were neighbors at any time instant may not continue to be neighbors at the next. Indeed, in the extreme case, if a node was migrated to become the root, the fact that it had a parent at a previous time instant is irrelevant at the next. This, of course, changes the entire landscape, rendering the resultant SOM to be unique and distinct from the state-of-the-art. An example will clarify this.\nConsider Figure 3, which illustrates the computation of the neural distance for various scenarios. First, in Figure 3a, we present the scenario when the node accessed is B. Observe that the distances are depicted with dotted arrows, with an adjacent numeric index specifying the current distance from node B. In the example, prior to an access, nodes H , C and E are all at a distance of 2 from node B, even though they are at different levels in the tree. The reader should be aware that non-leaf nodes may also be involved in the calculation, as in the case of node H . Figures 3b and 3c show the process when node B is queried, which in turn triggers a rotation of node B upwards. Observe that the rotation itself only requires local modifications, leaving the rest of the tree untouched. For the sake of simplicity and explicitness, unmodified areas of the tree are represented by dashed lines. Finally, Figure 3d depicts the configuration of the tree after the rotation is performed. At this time instant, C and E are both at distance of 3 from B, which means that they have increased their distance to B by unity. Moreover, although node H has changed its position, its distance to B remains unmodified. Clearly, the original distances are not necessarily preserved as a consequence of the rotation.\nGenerally speaking, there are four regions of the tree that remain unchanged. These are, namely, the portion of the tree above the parent of the node being rotated, the portion of tree rooted at the right child of the node being rotated, the portion of tree rooted at the left child of the node being rotated, and the portion of tree rooted at the sibling of the node being rotated. Even though these four regions remain unmodified, the neural distance in these regions are affected, because the rotation could lead to a modification of the distances to the nodes.\nAnother consequence of this operation that is worth mentioning is the following: The distance between any two given nodes that belong to the same unmodified region of the tree is preserved after a rotation is performed. The proof of this assertion is obvious, inasmuch as the fact remains that every path between nodes in any unmodified sub-tree remains with the same sub-tree. This property is interesting because it has the potential to accelerate the computation of the respective neural distances."}, {"heading": "3.2.2 The Bubble of Activity", "text": "A concept closely related to the neural distance, is the one referred to as the Bubble of Activity (BoA) which is the subset of nodes within a distance of r away from the node currently examined. Those nodes are in essence those which are to be migrated toward the signal presented to the network. This concept is valid for all SOM-like NNs, and in particular for the TTOSOM. We shall now consider how this bubble is modified in the context of rotations. The concept of the bubble involves the consideration of a quantity, the so-called radius, which establishes how big the BoA is, and which therefore has a direct impact on the number of nodes to be considered. The BoA can be formally defined as [8]\nB(vi;T, r) = {v|dN (vi, v;T ) \u2264 r}, (3)\nwhere vi is the node currently being examined, and v is an arbitrary node in the tree T , whose nodes are V . Note that B(vi, T, 0) = {vi}, B(vi, T, i) \u2287 B(vi, T, i\u2212 1) and B(vi, T, |V |) = V which generalizes the special case when the tree is a (simple) directed path.\nTo clarify how the bubble changes in the context of rotations, we first describe the context when the tree is static. As presented in [8], the function TTOSOM Calculate Neighborhood (see Algorithm 3) specifies the steps involved in the calculation of the subset of neurons that are part of the neighborhood of the BMU. This computation involves a collection of parameters, including B, the current subset of neurons in the proximity of the neuron being examined, v, the BMU itself, and r \u2208 IN the current radius of the neighborhood. When the function is invoked for the first time, the set B contains only the BMU marked as the current node, and\nAlgorithm 3 TTOSOM Calculate Neighborhood(B,v,r) Input: i) B, the set of the nodes in the bubble of activity identified so far. ii) v, the node from where the bubble of activity is calculated. iii) r, the current radius of the bubble of activity. Output: i) The set of nodes in the bubble of activity. Method: 1: if r \u2264 0 then 2: return 3: else 4: for all child \u2208 v.getChildren() do 5: if child /\u2208 B then 6: B \u2190 B + {child} 7: TTOSOM Calculate Neighborhood(B,child , r\u2212 1) 8: end if 9: end for 10: parent=v.getParent(); 11: if parent 6= NULL and parent /\u2208 B then 12: B \u2190 B + {parent} 13: TTOSOM Calculate Neighborhood(B,parent , r\u2212 1) 14: end if 15: end if End Algorithm\nthrough a recursive call, B will end up storing the entire set of units within a radius r of the BMU. The tree is recursively traversed for all the direct topological neighbors of the current node, i.e., in the direction of the direct parent and children. Every time a new neuron is identified as part of the neighborhood, it is added to B and a recursive call is made with the radius decremented by one unit6, marking the recently added neuron as the current node.\nThe question of whether or not a neuron should be part of the current bubble, depends on the number of connections that separate the nodes rather than the distance that separate the networks in the solution space (for instance, the Euclidean distance). Figure 4 depicts how the BoA differs from the one defined by the TTOSOM as a result of applying a rotation. Figure 4a shows the BoA around the node B, using the same configuration of the tree as in Figure 3a, i.e., before the rotation takes place. Here, the BoA when r = 1 involves the nodes {B,A,D, F}, and when r = 2 the nodes contained in the bubble are {B,A,D, F,C,E,H}. Subsequently, considering a radius equal to 3, the resulting BoA contains the nodes {B,A,D, F,C,E,H,G, I}. Finally, the r = 5 case leads to a BoA which includes the whole set of nodes. Now, observe the case presented in Figure 4b, which corresponds to the BoA around B after the rotation upwards has been effected, i.e., the same configuration of the tree used in Figure 3d. In this case, when the radius is unity, nodes {B,A, F} are the only nodes within the bubble, which is different from the corresponding bubble before the rotation is invoked. Similarly, when r = 2, we obtain a set different from the analogous pre-rotation case, which in this case is {B,A, F,D,H}. Note that coincidentally, for the case of a radius equal to 3, the bubbles are identical before and after the rotation, i.e., they invoke the nodes {B,A,D, F,G, I}. Trivially, again, when r = 5, the BoA invokes the entire tree.\n6This fact will ensure that the algorithm reaches the base case when r = 0.\nAs explained, Equation (3) describes the criteria for a BoA calculated on a static tree. It happens that, as a result of the conditional rotations, the tree will be dynamically adapted, and so the entire phenomenon has to be re-visited. Consequently, the BoA around a particular node becomes a function of time, and, to reflect this fact, Equation (3) should be reformulated as:\nB(vi;T, r, t) = {v|dN (vi, v;T, t) \u2264 r}, (4)\nwhere t is the discrete time index.\nThe algorithm to obtain the BoA for a specific node in such a setting is identical to Algorithm 3, except that the input tree itself dynamically changes. Further, even though the formal notation includes the time parameter, \u201ct\u201d, it happens that, in practice, the latter is needed only if the user/application requires a history of the BoA for any or all the nodes. Storing the history of BoAs will require the maintenance of a DS that will primarily store the changes made to the tree itself. Although storing the history of changes made to the tree can be done optimally [31], the question of explicitly storing the entire history of the BoAs for all the nodes in the tree remains open."}, {"heading": "3.2.3 Enforcing the BST Property", "text": "The CONROT-BST heuristic [16] requires that the tree should possess the BST property [18]:\nLet x be a node in a BST. If y is a node in the left subtree of x, then key[y] \u2264 key[x]. Further, if y is a\nnode in the right subtree of x, then key[x] \u2264 key[y].\nTo satisfy the BST property, first of all we see that, the tree must be binary7. As a general TTOSOM utilizes an arbitrary number of children per node, one possibility is to bound the value of the branching factor to be 2. In other words, the tree trained by the TTOSOM is restricted to contain at most two children per node. Additionally, the tree must implicitly involve a comparison operator between the two children so as to discern between the branches and thus perform the search process. This comparison can be achieved by defining a unique key that must be maintained for each node in the tree, and which will, in turn, allow a\n7Of course, this is a severe constraint. But we are forced to require this, because the phenomenon of achieving conditional rotations for arbitrary k-ary trees is unsolved. This research, however, is currently being undertaken.\nlexicographical arrangement of the nodes.\nThis leads to a different, but closely related concept, which concerns the preservation of the topology of the SOM. During the training process, the configuration of the tree will change as the tree evolves, positioning nodes that are accessed more often closer to the root. This probability-based ordering, will hopefully, be preserved by the rotations.\nA particularly interesting case occurs when the imposed tree corresponds to a list of neurons, i.e., a 1-ary tree. If the TTOSOM is trained using such a tree where each node has at most two children, then the adaptive process will alter the original list. The rotations will then modify the original configuration, generating a new state, where the non-leaf nodes might have one or two children each. In this case the consequence of incorporating ADS-based enhancements to the TTOSOM will imply that the results obtained will be significantly different from those shown in [8].\nAs shown in [35], an optimal arrangement of the nodes of the tree can be obtained using the probabilities of accesses. If these probabilities are not known a priori, then the CONROT-BST heuristic offers a solution, which involves a decision of whether or not to perform a single rotation towards the root. It happens that the concept of the \u201cjust accessed\u201d node in the CONROT-BST is compatible with the corresponding BMU defined for the CL model. In CL, a neuron may be accessed more often than others and some techniques take advantage of this phenomenon through the inclusion of strategies that add or delete nodes\nThe CONROT-BST implicitly stores the information acquired by the currently accessed node by incrementing a counter for that node. This is (in a distant sense) akin to the concept of a BMU counter which adds or delete nodes in competitive networks.\nDuring the training phase, when a neuron is a frequent winner of the CL, it gains prominence in the sense that it can represent more points from the original data set. This phenomenon is registered by increasing the BMU counter for that neuron. We propose that during the training phase, we can verify if it is worth modifying the configuration of the tree by moving this neuron one level up towards the root as per the CONROT-BST algorithm, and consequently explicitly recording the relevant role of the particular node with respect to its nearby neurons. CONROT-BST achieves this by performing a local movement of the node, where only its direct parent and children are aware of the neuron promotion.\nNeural Promotion is the process by which a neuron is relocated in a more privileged position8 in the network with respect to the other neurons in the NN. Thus, while all \u201call neurons are born equal\u201d, their importance in the society of neurons is determined by what they represent. This is achieved, by an explicit advancement of its rank or position. Given this premise, the nodes in the tree will be adapted in such a way that neurons that have been BMUs more frequently, will tend to move towards the root if an only if a reduction in the overall WPL is obtained as a consequence of such a promotion. The properties of CONROT-BST guarantee this.\nOnce the SOM and BST are \u201ctied\u201d together in a symbiotic manner (where one enhances the other and vice versa), the adaptation can be achieved by affecting the configuration of the BST. This task will be performed every time a training step of the SOM is performed. Clearly, it is our task to achieve an integration of the\n8As far as we know, we are not aware of any research which deals with the issue of Neural Promotion. Thus, we believe that this concept, itself, is pioneering.\nBST and the SOM, and Figure 5 depicts the main architecture used to accomplish this. It transforms the structure of the SOM by modifying the configuration of the BST that, in turn, holds the structure of the neurons.\nAs this work constitutes the first attempt to constraint a tree-based SOM using a BST, our focus is placed on the self-adaptation of the nodes. In this sense, the unique identifiers of the nodes are employed to maintain the BST structure and to promote nodes that are frequently accessed towards the root. We are currently examining ways to enhance this technique so as to improve the time required to identify the BMU as well."}, {"heading": "3.2.4 Initialization", "text": "Initialization, in the case of the BST-based TTOSOM, is accomplished in two main steps which involve defining the initial value of each neuron and the connections among them. The initialization of the codebook vectors are performed in the same manner as in the basic TTOSOM. The neurons can assume a starting value arbitrarily, for instance, by placing them on randomly selected input samples. On the other hand, a major enhancement with respect to the basic TTOSOM lays in the way the neurons are linked together. The basic definition of the TTOSOM utilizes connections that remain static through time. The beauty of such an arrangement is that it is capable of reflecting the user\u2019s perspective at the time of describing the topology, and it is able to preserve this configuration until the algorithm reaches convergence. The inclusion of the rotations renders this dynamic."}, {"heading": "3.2.5 The Required Local Information", "text": "In our proposed approach, the codebooks of the SOM correspond to the nodes of a BST. Apart from the information regarding the codebooks themselves in the feature space, each neuron requires the maintenance of additional fields to achieve the adaptation. Besides this, each node inherits the properties of a BST Node, and it thus includes a pointer to the left and right children, as well as (to make the implementation easier), a pointer to its parent. Each node also contains a label which is able to uniquely identify the neuron when it is in the \u201ccompany\u201d of other neurons. This identification index constitutes the lexicographical key used to sort the nodes of the tree and remains static as time proceeds. Figure 6 depicts all the fields included in a\nneuron of a BST-based SOM."}, {"heading": "3.2.6 The Neural State", "text": "The different states that a neuron may assume during its lifetime are illustrated in Figure 7. At first, when the node is created, it is assigned a unique identifier, and the rest of the data fields are populated with their initial values. Here, the codebook vector assumes a starting value in the feature space, and the pointers are configured so as to appropriately link the neuron with the rest of the neurons in the tree in a BST configuration. Next, during the most significant portion of the algorithm, the NN enters a main loop, where training is effected. This training phase, involves adjusting the codebooks and may also trigger optional modules that affect the neuron. Once the BMU is identified, the neuron might assume the \u201crestructured\u201d state, which means that a restructuring technique, such as the CONROT algorithm, will be applied. Alternatively, the neuron might be ready to accept queries, i.e., be part of the CL process in the mapping mode. Additionally, an option that we are currently investigating, involves the case when a neuron is no longer necessary and may thus be eliminated from the main neural structure. We refer to this state as the so-called \u201cdeleted\u201d state, and it is depicted using dashed lines. Finally, we foresee an alternative state referred to as the \u201cfrozen\u201d state, in which the neuron does not participate in the CL during the training mode although it may continue to be part of the overall NN structure."}, {"heading": "3.2.7 The Training Step of the TTOCONROT", "text": "The training module of the TTOCONROT is responsible of determining the BMU, performing restructuring, calculating the BoA and migrating the neurons within the BoA. Basically, what has to be done, is to integrate the CONROT algorithm into the sequence of steps responsible for the training phase of the TTOSOM.\nAlgorithm 4 describes the details of how this integration is accomplished. Line 1 performs the first task of the algorithm, which involves determining the BMU. After that, line 2 invokes the CONROT procedure. The rationale for following this sequence of steps is that the parameters needed to perform the conditional rotation, as specified in [16], includes the \u201ckey\u201d of the element queried, which, in the present context, corresponds to the identity of the BMU. At this stage of the algorithm, the BMU may be rotated or not depending on the optimizing criterion given by equations (1) and (2), and the BoA is determined after this restructuring is done. These are performed in lines 3 and 4 of the algorithm respectively. Finally, lines 5 to 7, are responsible for the neural migration itself, and oversee the movement of the neurons within the BoA towards the input sample.\nAlgorithm 4 TTOCONROT-BST train(x,p) Input: i) x, a sample signal. ii) p, the pointer to the tree. Method: 1: v \u2190 TTOSOM Find BMU(x,p) 2: cond-rot-bst(p,v.getID()) 3: B \u2190 {v} 4: TTOSOM Calculate Neighborhood(B,v,radius) 5: for all b \u2208 B do 6: update rule(b.getCodebook(),x) 7: end for End Algorithm"}, {"heading": "3.2.8 Alternative Restructuring Techniques", "text": "Even though, we have explained the advantages of the CONROT algorithm, the architecture that we are proposing allows the inclusion of alternative restructuring modules other than the CONROT. Potential candidates which can be used to perform the adaptation are the ones mentioned in Section 3.1 and include the splay and the MT algorithms, among others."}, {"heading": "4 Experimental Results", "text": "To illustrate the capabilities of our method, the experiments reported in the present work are primarily focused in lower dimensional feature spaces. This will help the reader in geometrically visualizing the results we have obtained. However, it is important to remark that the algorithm is also capable of solving problems in higher dimensions, although a graphical representation of the results will not be as illustrative. We know that, as per the results obtained in [8], the TTOSOM is capable of inferring the distribution and structure of the data. However, in this present setting, we are interested in investigating the effects of applying the neural rotation as part of the training process. To render the results comparable, the experiments in this section use the same schedule for the learning rate and radius, i.e., no particular refinement of the parameters has been done for any specific data set. Additionally, the parameters follow a rather \u201cslow\u201d decrement of the so-called decay parameters, allowing us to understand how the prototype vectors are moved as convergence\ntakes place. When solving practical problems, we recommend a further refinement of the parameters so as to increase the speed of the convergence process."}, {"heading": "4.1 TTOCONROT\u2019s Structure Learning Capabilities", "text": "We shall describe the performance of TTOCONROT with data sets in 1, 2 and 3 dimensions, as well as experiments in the multidimensional domain. The specific advantages of the algorithm for various scenarios will also be highlighted."}, {"heading": "4.1.1 One Dimensional Objects", "text": "Since our entire learning paradigm assumes that the data has a tree-shaped model, our first attempt was to see how the philosophy is relevant to a unidimensional object (i.e., a curve), which really possesses a \u201clinear\u201d topology. Thus, as a prima facie case, we tested the strength of the TTOCONROT to infer the properties of data sets generated from linear functions in the plane. Figure 8 shows different snapshots of how the TTOCONROT learns the data generated from a curve. Random initialization was used by uniformly drawing points from the unit square. Observe that the original data points do not lie in the curve. Our aim here was to show how our algorithm could learn the structure of the data using arbitrary (initial and \u201cnon-realistic\u201d) values for the codebook vectors. Figures 8b and 8c depict the middle phase of the training process, where the edges connecting the neurons are omitted for simplicity. It is interesting to see how, after a few hundred training steps, the original chaotic placement of the neurons are rearranged so as to fall within the line described by the data points. The final configuration is shown in Figure 8d. The reader should observe that after convergence has been achieved, the neurons are placed almost equidistantly along the curve. Even though the codebooks are not sorted in and increasing numerical order, the hidden tree and its root, denoted by two concentric squares, are configured in such a way that nodes that are queried more frequently will tend to be closer to the root. In this sense, the algorithm is not only capturing the essence of the topological properties of the data set, but at the same time rearranging the internal order of the neurons according to their importance in terms of their probabilities of access."}, {"heading": "4.1.2 Two Dimensional Data Points", "text": "To demonstrate the power of including ADS in SOMs, we shall now consider the same two-dimensional data sets studied in [8]. First we consider the data generated from a triangular-spaced distribution, as shown in Figures 9a-9d. In this case, the initial tree topology is unidirectional, i.e., a list, although, realistically, this is quite inadvisable considering the true (unknown) topology of the distribution. In other words, we assume that the user has no a priori information about the data distribution. Thus, for the initialization phase, a 1-ary tree is employed as the tree structure, and the respective keys are assigned in an increasing order. Observe that in this way we are providing minimal information to the algorithm. The root of the tree is marked with two concentric squares, i.e., the neuron labeled with the index 0 in Figure 9a. Also, with regards to the feature space, the prototype vectors are initially randomly placed. In the first iteration, the linear topology is lost, which is attributable to the randomness of the data points. As the prototypes are migrated\nand reallocated (see Figures 9b and 9c ), the 1-ary tree is modified as a consequence of the rotations. Such a transformation is completely novel to the field of SOMs. Finally, Figure 9d depicts the case after convergence has taken place. Here, the tree nodes are uniformly distributed over the entire triangular domain. The BST property is still preserved, and further rotations are still possible if the training process continues.\nThis experiment serves as an excellent example to show the differences between our current method and the original TTOSOM algorithm [8], where the same data set with similar settings was utilized. In the case of the TTOCONROT the points effectively represent the entire data set. However, the reader must observe that we do not have to provide the algorithm with any particular a priori information about the structure of the data distribution \u2013 this is learned during the training process, as shown in Figure 9d. Thus, the specification of the initial \u201cuser-defined\u201d tree topology (representing his perspective of the data space) required by the TTOSOM is no longer mandatory, and an alternative specification which only requires the number of nodes in the initial 1-ary tree is sufficient.\nA second experiment involves a Gaussian distribution. Here a 2-dimensional Gaussian ellipsoid is learned using the TTOCONROT algorithm. The convergence of the entire training execution phase is displayed in Figure 10. This experiment considers a complete BST of depth 4, i.e., containing 15 nodes. For simplicity the labels of the nodes have been removed.\nIn Figure 10, the tree structure generated by the neurons suggest an ellipsoidal structure for the data distribution. This experiment is a good example to show how the nodes close to the root represent dense areas of the ellipsoid, and at the same time, those node that are far from the root (in tree space) occupy regions with low density, e.g., in the \u201cextremes\u201d of the ellipse. The TTOCONROT infers this structure without receiving any a priori information about the distribution or its structure.\nThe experiment shown in Figures 11a-11d considers data generated from an irregular shape with a concave surface. Again, as in the case of the experiments described earlier, the original tree includes 15 neurons arranged unidirectionally, i.e., as in a list. As a result of the training, the distribution is learned and the\ntree is adapted accordingly, as illustrated in Figure 11d. Observe that the random initialization is performed by randomly selecting points from the unit square, and this points thus do not necessarily fall within the concave boundaries. Although this initialization scheme is responsible of placing codebook vectors outside\nof the irregular shape, the reader should observe that in a few training steps, they are repositioned inside the contour. It is important to indicate that, even though after the convergence of the algorithm, a line connecting two points passes outside the overall \u201cunknown\u201d shape, one must take into account that the TTOCONROT tree attempts to mimic the stochastic properties in terms of access probabilities. When the user desires the topological mimicry in terms of skeletal structure, we recommend the use of the TTOSOM instead. The final distribution of the points is quite amazing!"}, {"heading": "4.1.3 Three Dimensional Data Points", "text": "We will now explain the results obtained when applying the algorithm with and without CONROT. To do this we opt to consider three-dimensional objects. The experiments utilize the data generated from the contour of the unit sphere. It also initially involves an uni-dimensional chain of 31 neurons. Additionally, in order to show the power of the algorithm, both cases initialize the codebooks by randomly drawing points from the unit cube, which thus initially places the points outside the sphere itself. Figure 12 presents the case when the basic TTO algorithm (without CONROT) learns the unit sphere without performing conditional rotations. The illustration presented in Figure 12a show the state of the neurons before the first iteration is completed. Here, as shown, the codebooks lie inside the unit cube, although some of the neurons are positioned outside the boundary of the respective circumscribed sphere, which is the one we want to learn. Secondly, Figures 12b and 12c depict intermediate steps of the learning phase. As the algorithm processes the information provided by the sample points and the neurons are repositioned, the chain of neurons is constantly \u201ctwisted\u201d so as to adequately represent the entire manifold. Finally, Figure 12d illustrates the case when the convergence is reached. In this case, the one-dimensional list of neurons is evenly distributed over the sphere, preserving the original properties of the 3-dimensional object and also presenting a shape which reminds the viewer of the so-called Peano curve [47].\nA complimentary set of experiments which involved the learning of the same unit sphere where the TTO scheme was augmented by conditional rotations (i.e., CONROT) was also conducted. Figure 13a shows the initialization of the codebooks. Here, the starting positions of the neurons fall within the unit cube as in the case displayed in Figure 12a. Figures 13b and 13c show snapshots after 1, 000 and 3, 000 iterations respectively. In this case the tree configuration obtained in the intermediate phases differ significantly from those obtained by the corresponding configurations shown in Figure 12, i.e., those that involved no rotations. In this case, the list rearranges itself as per CONROT, modifying the original chain structure to yield a more-\nor-less balanced tree. Finally, from the results obtained after convergence, and illustrated in Figure 13d, it is possible to compare both scenarios. In both cases, we see that the tree is accurately learned. However, in the first case, the structure of the nodes is maintained as a list throughout the learning phase, while, in the case when CONROT is applied, the configuration of the tree is constantly revised, promoting those neurons that are queried more frequently. Additionally, the experiments show us how the dimensionality reduction property evidenced in the traditional SOM, is also present in the TTOCONROT. Here, an object in the 3-dimensional domain is successfully learned by our algorithm, and the properties of the original manifold are captured from the perspective of a tree."}, {"heading": "4.1.4 Multidimensional Data Points", "text": "The well known Iris dataset was chosen for showing the power of our scheme in a scenario when the dimensionality is increased. This data set gives the measurements (in centimeters) of the variables which are the sepal length, sepal width, petal length and petal width, respectively, for 50 flowers from each of 3 species of the iris family. The species are the Iris Setosa, Versicolor, and Virginica.\nIn this set of experiments, the Iris data set was learned under three different configurations, using a fixed schedule for the learning rate and radius but with a distinct tree configuration. The results of the experiments are depicted in Figure 14 and involve a complete binary tree of depth 3, 4 and 5, respectively. Taking into\naccount that the dataset possesses a high dimensionality, we present the projection in the 2-dimensional space to facilitate the visualization. We also removed the labels from the nodes in Figure 14c to improve understandability.\nThe experiment utilizes a underlying tree topology of a complete binary tree with different levels of depth. By this we attempt to show examples of how exactly the same parameters of the TTOCONROT, can be utilized to learn the structure from data belonging to the 2-dimensional, 3-dimensional and also 4-dimensional spaces. After executing the TTO-SOM, each of the main branches of the tree were migrated towards the center of mass of the cloud of points in the hyper-space belonging to each of the three categories of flowers, respectively.\nSince the TTOCONROT is an unsupervised learning algorithm, it performs learning without knowing the true labels of the samples. However, when these labels are available, one can use them to evaluate the quality of the tree. To do so, each sample is assigned to its closest neuron, and tagging the neuron with the class which is most frequent. Table 1 presents the evaluation for the tree in Figure 14a.\nUsing the simple voting scheme explained above, it is possible to see from Table 1, that only 4 instances are incorrectly classified, i.e., 97.3% of the instances are correctly classified. Additionally, observe that node 6 contains all the 50 instances corresponding to the class Iris-setosa. It is well known that the Iris-setosa class is linearly separable from the other two classes, and our algorithm was able to discover this without providing it with the labels. We find this result quite fascinating!\nThe experimental results shown in Table 1, not only demonstrate the potential capabilities of the TTOCONROT\nfor performing clustering, but also suggest the possibilities of using it for pattern classification. According to [23], there are several reasons for performing pattern classification using an unsupervised approach. We are currently investigating such a classification strategy."}, {"heading": "4.2 Skeletonization", "text": "In general, the main objective of skeletonization consists of generating a simpler representation of the shape of an object. The authors of [44] refer to skeletonization in the plane as the process by which a 2-dimensional shape is transformed into a 1-dimensional one, similar to a \u201cstick\u201d figure. The applications of skeletonization are diverse, including the fields of Computer Vision and Pattern Recognition.\nAs explained in [8], the traditional methods for skeletonization assume the connectivity of the data points and when this is not the case, more sophisticated methods are required. Previous efforts involving SOM variants to achieve skeletonization has been proposed [8, 19, 53]. We remark that the TTOSOM [8] is the only one which uses a tree-based structure. The TTOSOM assumed that the shape of the object is not known a priori. Rather, this is learned by accessing a single point of the entire shape at any time instant. Our results reported in [8] confirm that this is actually possible, and we now focus on how the conditional rotations will affect such a skeletonization.\nFigure 15 shows how the TTOCONROT learned the skeleton of different objects in the 2-dimensional and the 3-dimensional domain. In all the cases the same schedule of parameters were used, and only the number of neurons employed was chosen proportionally to the number of data points contained in the respective data sets. It is important to remark that we did not invoke any post-processing of the edges, e.g., minimum spanning tree, and that the skeleton observed was exactly what our BSTSOM learned. Firstly, Figures 15a-15d illustrate the shapes of the silhouette of a human, a rhinoceros, a 3d representation of a head, and a 3d representation of a woman. The figures also show the trees learned from the respective data sets. Additionally figures 15e-15h display only the data points, which in our opinion are capable of representing the fundamental structure of the four objects in a 1-dimensional way effectively.\nAs a final comment, we stress that all the shapes employed in the experiments involve the learning of the \u201cexternal\u201d structure of the objects. For the case of solid objects, if the internal data points are also provided, the TTOCONROT is able to give an approximation of the so-called endo-skeleton, i.e., a representation in which the skeleton is built inside the solid object."}, {"heading": "4.3 Theoretical Analysis", "text": "According to Kiviluoto [34], there are three different criteria for evaluating the quality of a map. The first criterion indicates how continuous the mapping is, implying that input signals that are close (in the input space) should be mapped to codebooks that are close in the output space as well. A second criterion involves the resolution of the mapping. Maps with high resolution possess the additional property that input signals that are distant in the input space should be represented by distant codebooks in the output space. A third criterion imposed on the accuracy of the mapping is aimed to reflect the probability distribution of the input set. There exist a variety of measures for quantifying the quality of the topology preservation [5]. The author of [49] surveys a number of relevant measures for the quality of maps, and these include the Quantization Error, the Topographic Product [11], the Topographic Error [34] and the Trustworthiness and Neighborhood Preservation [55]. Although we are currently investigating [6] how the quality of any tree-based SOM (not just our scheme) can be quantified using these metrics. The following arguments are pertinent.\nThe ordering of the weights (with respect to the position) of the neurons of the SOM has been proved for unidimensional topologies [17, 36, 51]. Extending these results to higher dimensional configurations or topologies leads to numerous unresolved problems. First of all, the question of what one means by \u201cordering\u201d in higher dimensional spaces has to be defined. Further, the issue of the \u201cabsorbing\u201d nature of the \u201cordered state\u201d is open. Budinich, in [14], explains intuitively the problems related to the ordering of neurons in higher dimensional configurations. Huang et al. [29] introduce a definition of the ordering and show that even though the position of the codebook vectors of the SOM have been ordered, there is still the possibility that a sequence of stimuli will cause their disarrangement. Some statistical indexes of correlation between the measures of the weights and distances of the related positions have been introduced in [10].\nWith regard to the topographic product, the authors of [11] have shown the power of the metric by applying it on different artificial and real-world data sets, and also compared it with different measures to quantify the topology [10]. Their study concentrates on the traditional SOM, implying that the topologies evaluated were of a \u201clinear\u201d nature, with the consequential extension to 2-dimensions and 3-dimensions by means of grids only. In [28], Haykin mention that the Topographic Product may be employed to compare the quality of different maps, even when these maps possess different dimensionality. However, he also noted that this measurement is only possible when the dimensionality of the topological structure is the same as the dimensionality of the feature space. Further, tree-like topologies were not considered in their study. To be more precise, most of the effort towards determining the concept of topology preservation for dimensions greater than unity are specifically focused on the SOM [11, 17, 36, 14, 29, 10], and do not define how a treelike topology should be measured nor how to define the order in topologies which are not grid-based. Thus, we believe that even the tools to analyze the TTOCONROT are currently not available. The experimental\nresults obtained in our paper, suggest that the TTOCONROT is able to train the NN so as to preserve the stimuli. However, in order to quantify the quality of this topology, the matter of defining a concept of ordering on tree-based structure has yet to be resolved. Although this issue is of great interest to us, this rather ambitious task lies beyond the scope of our present manuscript."}, {"heading": "5 Conclusions and Discussions", "text": ""}, {"heading": "5.1 Concluding Remarks", "text": "In this paper, we have proposed a novel integration between the areas of Adaptive Data Structures (ADSs) and the Self-Organizing Maps (SOMs). In particular we have shown how a tree-based SOM can be adaptively transformed by the employment of an underlying Binary Search Tree (BST) structure and subsequently, restructured using rotations that are performed conditionally. These rotations on the nodes of the tree are local, can be done in constant time, and performed so as to decrease the Weighted Path Length (WPL) of the entire tree. One of the main advantages of the algorithm, is that the user does not need to have a priori knowledge about the topology of the input data set. Instead, our proposed method, namely the TTOSOM with Conditional Rotations (TTOCONROT), infers the topological properties of the stochastic distribution, and at the same time, attempt to build the best BST that represents the data set.\nIncorporating the data structure\u2019s constraints in this ways has not being achieved by any of the related approaches included in the state-of-the-art. Our premise is that regions of the hyper-space that are accessed more often should be promoted to preferential spots in the tree representation, which yields to an improved stochastic representation.\nAs our experimental results suggest, the TTOCONROT tree is indeed able to absorb the stochastic properties of the input manifold. It is also possible to obtain a tree configuration that can learn both, the stochastic properties in terms of access probabilities and at the same time preserve the topological properties in terms of its skeletal structure."}, {"heading": "5.2 Discussions and Future Work", "text": "As explained in Section 4.3, the work associated with measuring the topology preservation of the SOM, including the proof of its convergence for the unidimensional case, has been performed for the traditional SOM only. The questions are unanswered for how a tree-like topology should be measured, and for defining the order in topologies which are not grid-based. Thus, we believe that even the tools for formally analyzing the TTOCONROT are currently not available. The experimental results obtained in our paper, suggest that the TTOCONROT is able to train the Neural Network (NN) so as to preserve the stimuli for which the concept of ordering on tree-based structures has yet to be resolved.\nEven though our principal goal was to obtain a more accurate representation of the stochastic distribution, our results also suggest that the special configuration of the tree obtained by the TTOCONROT can be further exploited so as to improve the time required for identifying the Best Matching Unit (BMU). The state-ofthe-art includes different strategies that expand trees by inserting nodes (which can be a single neuron or a\nSOM-layer) that essentially are based on a Quantization Error (QE) measure. In some of these strategies, the error measure is based on the \u201chits\u201d, i.e., the number of times a neuron has been selected as the BMU, which is, in principle, the same type of counter utilized by the Conditional Rotations (CONROT). Our strategy, TTOCONROT, which asymptotically positions frequently accessed nodes close to the root, might incorporate a module, that taking advantage of the \u201coptimal\u201d tree and the BMU counters already present in the TTOCONROT, splits the node at the root level. Thus, the splitting operation will occur without the necessity of searching for the node with the largest QE, under the assumption that a higher number of hits indicates that the degree of granularity of a particular neuron is lacking refinement. The concept of using the root of the tree for growing a tree-based SOM is itself pioneering, as far as we know, and the design and implementation details of this are currently being investigated."}], "references": [{"title": "An algorithm for the organization of information", "author": ["M. Adelson-Velskii", "M.E. Landis"], "venue": "Sov. Math. DokL, 3:1259\u20131262,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1962}, {"title": "Identification and classification of microaneurysms for early detection of diabetic retinopathy", "author": ["M.U. Akram", "S. Khalid", "S.A. Khan"], "venue": "Pattern Recognition, 46(1):107\u2013116,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2013}, {"title": "Dynamic self-organizing maps with controlled growth for knowledge discovery", "author": ["D. Alahakoon", "S.K. Halgamuge", "B. Srinivasan"], "venue": "IEEE Transactions on Neural Networks, 11(3):601\u2013614,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2000}, {"title": "Self-organizing binary search trees", "author": ["B. Allen", "I. Munro"], "venue": "J. ACM, 25(4):526\u2013535,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1978}, {"title": "D\u0131\u0301az Mart\u0301\u0131n. Topology preservation in SOM", "author": ["F.E. Arsuaga Uriarte"], "venue": "International Journal of Applied Mathematics and Computer Sciences,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2005}, {"title": "Self Organizing Maps Constrained by Data Structures", "author": ["C.A. Astudillo"], "venue": "PhD thesis, Carleton University,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2011}, {"title": "On using adaptive binary search trees to enhance self organizing maps", "author": ["C.A. Astudillo", "B.J. Oommen"], "venue": "A. Nicholson and X. Li, editors, 22nd Australasian Joint Conference on Artificial Intelligence (AI 2009), pages 199\u2013209,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2009}, {"title": "Imposing tree-based topologies onto self organizing maps", "author": ["C.A. Astudillo", "B.J. Oommen"], "venue": "Information Sciences, 181(18):3798\u20133815,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2011}, {"title": "On achieving semi-supervised pattern recognition by utilizing tree-based SOMs", "author": ["C.A. Astudillo", "B.J. Oommen"], "venue": "Pattern Recognition, 46(1):293 \u2013 304,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "Neural maps and topographic vector quantization", "author": ["H.U. Bauer", "M. Herrmann", "T. Villmann"], "venue": "Neural Networks, 12(4-5):659 \u2013 676,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1999}, {"title": "Quantifying the neighborhood preservation of self-organizing feature maps", "author": ["H.U. Bauer", "K.R. Pawelzik"], "venue": "Neural Networks, 3(4):570\u2013579, July", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1992}, {"title": "Heuristics that dynamically organize data structures", "author": ["J.R. Bitner"], "venue": "SIAM J. Comput., 8:82\u2013110,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1979}, {"title": "Visualizing high-dimensional structure with the incremental grid growing neural network", "author": ["J. Blackmore"], "venue": "Master\u2019s thesis, University of Texas at Austin,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1995}, {"title": "On the ordering conditions for self-organizing maps", "author": ["M. Budinich"], "venue": "Neural Computation, 7(2):284\u2013289,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1995}, {"title": "The art of adaptive pattern recognition by a self-organizing neural network", "author": ["G.A. Carpenter", "S. Grossberg"], "venue": "Computer, 21(3):77\u201388,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1988}, {"title": "Adaptive structuring of binary search trees using conditional rotations", "author": ["R.P. Cheetham", "B.J. Oommen", "D.T.H. Ng"], "venue": "IEEE Trans. on Knowl. and Data Eng., 5(4):695\u2013704,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1993}, {"title": "On the mathematical treatment of self organization: extension of some classical results", "author": ["P.L. Conti", "L. De Giovanni"], "venue": "Artificial Neural Networks - ICANN 1991, International Conference, volume 2, pages 1089\u20131812,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1991}, {"title": "Introduction to Algorithms, Second Edition", "author": ["T.H. Cormen", "C.E. Leiserson", "R.L. Rivest", "C. Stein"], "venue": "McGraw-Hill Science/Engineering/Math, July", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2001}, {"title": "Skeletal shape extraction from dot patterns by selforganization", "author": ["A. Datta", "S.M. Parui", "B.B. Chaudhuri"], "venue": "Pattern Recognition, 1996., Proceedings of the 13th International Conference on, 4:80\u201384 vol.4, Aug", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1996}, {"title": "Content-based image collection summarization and comparison using self-organizing maps", "author": ["D. Deng"], "venue": "Pattern Recognition, 40(2):718 \u2013 727,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2007}, {"title": "The growing hierarchical self-organizing map", "author": ["M. Dittenbach", "D. Merkl", "A. Rauber"], "venue": "Neural Networks, 2000. IJCNN 2000, Proceedings of the IEEE-INNS-ENNS International Joint Conference on, volume 6, pages 15\u201319 vol.6,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2000}, {"title": "Phylogenetic reconstruction using an unsupervised growing neural network that adopts the topology of a phylogenetic tree", "author": ["J. Dopazo", "J.M. Carazo"], "venue": "Journal of Molecular Evolution, 44(2):226\u2013233, February", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1997}, {"title": "Pattern Classification (2nd Edition)", "author": ["R. Duda", "P.E. Hart", "D.G. Stork"], "venue": "Wiley-Interscience,", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2000}, {"title": "Growing Cell Structures \u2013 a self-organizing network for unsupervised and supervised learning", "author": ["B. Fritzke"], "venue": "Neural Networks, 7(9):1441\u20131460,", "citeRegEx": "24", "shortCiteRegEx": null, "year": 1994}, {"title": "Growing Grid - a self-organizing network with constant neighborhood range and adaptation strength", "author": ["B. Fritzke"], "venue": "Neural Processing Letters, 2(5):9\u201313,", "citeRegEx": "25", "shortCiteRegEx": null, "year": 1995}, {"title": "A growing neural gas network learns topologies", "author": ["B. Fritzke"], "venue": "G. Tesauro, D. S. Touretzky, and T. K. Leen, editors, Advances in Neural Information Processing Systems 7, pages 625\u2013632, Cambridge MA,", "citeRegEx": "26", "shortCiteRegEx": null, "year": 1995}, {"title": "Self-organizing trees and forests: A powerful tool in pattern clustering and recognition", "author": ["L. Guan"], "venue": "Image Analysis and Recognition, Third International Conference, ICIAR 2006, P\u00f3voa de Varzim, Portugal, September 18-20, 2006, Proceedings, Part I, pages I: 1\u201314,", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2006}, {"title": "Neural Networks and Learning Machines", "author": ["S. Haykin"], "venue": "Prentice Hall, 3rd edition edition,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2008}, {"title": "Ordering of self-organizing maps in multi-dimensional cases", "author": ["G. Huang", "H.A. Babri", "H. Li"], "venue": "Neural Computation, 10:19\u201324,", "citeRegEx": "29", "shortCiteRegEx": null, "year": 1998}, {"title": "Real-time multiple people tracking using competitive condensation", "author": ["H.-G. Kang", "D. Kim"], "venue": "Pattern Recognition, 38(7):1045 \u2013 1058,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2005}, {"title": "Handbook of Data Structures and Applications, chapter 31: Persistent Data Structures, pages 31.1 \u2013 31.26", "author": ["H. Kaplan"], "venue": "Chapman and Hall/CRC,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2004}, {"title": "Bibliography of self-organizing map (SOM) papers: 1981\u20131997", "author": ["S. Kaski", "J. Kangas", "T. Kohonen"], "venue": "Neural Computing Surveys, 1:102\u2013350,", "citeRegEx": "32", "shortCiteRegEx": null, "year": 1998}, {"title": "Human eye sclera detection and tracking using a modified timeadaptive self-organizing map", "author": ["M.H. Khosravi", "R. Safabakhsh"], "venue": "Pattern Recognition, 41(8):2571\u20132593,", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2008}, {"title": "Topology preservation in self-organizing maps", "author": ["K. Kiviluoto"], "venue": "P. IEEE Neural Networks Council, editor, Proceedings of International Conference on Neural Networks, ICNN\u201996, volume 1, pages 294\u2013299, New Jersey, USA,", "citeRegEx": "34", "shortCiteRegEx": null, "year": 1996}, {"title": "The art of computer programming, volume 3: (2nd ed.) sorting and searching", "author": ["D.E. Knuth"], "venue": null, "citeRegEx": "35", "shortCiteRegEx": "35", "year": 1998}, {"title": "Self-Organizing Maps", "author": ["T. Kohonen"], "venue": "Springer-Verlag New York, Inc., Secaucus, NJ, USA,", "citeRegEx": "36", "shortCiteRegEx": null, "year": 1995}, {"title": "Self-organizing hierarchical feature maps", "author": ["P. Koikkalainen", "E. Oja"], "venue": "IJCNN International Joint Conference on Neural Networks, 2:279\u2013284, June", "citeRegEx": "37", "shortCiteRegEx": null, "year": 1990}, {"title": "Efficient maintenance of binary search trees", "author": ["T.W.H. Lai"], "venue": "PhD thesis, University of Waterloo, Waterloo, Ont., Canada,", "citeRegEx": "38", "shortCiteRegEx": null, "year": 1990}, {"title": "No titlea synthesised word approach to word retrieval in handwritten documents", "author": ["Y. Liang", "M.C. Fairhurst", "R.M. Guest"], "venue": "Pattern Recognition, 45(12):4225\u20134236,", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2012}, {"title": "A \u201cneural-gas\u201d network learns topologies", "author": ["M. Martinetz", "K.J. Schulten"], "venue": "in Proceedings of International Conference on Articial Neural Networks, volume I, pages 397\u2013402, North-Holland, Amsterdam,", "citeRegEx": "40", "shortCiteRegEx": null, "year": 1991}, {"title": "Dynamic binary search", "author": ["K. Mehlhorn"], "venue": "SIAM Journal on Computing, 8(2):175\u2013198,", "citeRegEx": "41", "shortCiteRegEx": null, "year": 1979}, {"title": "Adaptive hierarchical incremental grid growing: An architecture for high-dimensional data visualization", "author": ["D. Merkl", "S. Hui-He", "M. Dittenbach", "A. Rauber"], "venue": "In Proceedings of the 4th Workshop on Self-Organizing Maps, Advances in Self-Organizing Maps, pages 293\u2013298,", "citeRegEx": "42", "shortCiteRegEx": null, "year": 2003}, {"title": "Script recognition with hierarchical feature maps", "author": ["R. Miikkulainen"], "venue": "Connection Science, 2(1&2):83\u2013101,", "citeRegEx": "43", "shortCiteRegEx": null, "year": 1990}, {"title": "Hierarchic voronoi skeletons", "author": ["R.L. Ogniewicz", "O. K\u00fcbler"], "venue": "Pattern Recognition, 28(3):343\u2013359,", "citeRegEx": "44", "shortCiteRegEx": null, "year": 1995}, {"title": "Bibliography of self-organizing map (SOM) papers: 1998-2001 addendum", "author": ["M. Oja", "S. Kaski", "T. Kohonen"], "venue": "Neural Computing Surveys, 3:1\u2013156,", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2003}, {"title": "The Evolving Tree \u2014 a novel self-organizing network for data analysis", "author": ["J. Pakkanen", "J. Iivarinen", "E. Oja"], "venue": "Neural Processing Letters, 20(3):199\u2013211, December", "citeRegEx": "46", "shortCiteRegEx": null, "year": 2004}, {"title": "Sur une courbe, qui remplit toute une aire plane", "author": ["G. Peano"], "venue": "Mathematische Annalen, 36(1):157\u2013160,", "citeRegEx": "47", "shortCiteRegEx": null, "year": 1890}, {"title": "Bibliography of self-organizing map (SOM) papers: 2002- 2005 addendum", "author": ["M. P\u00f6ll\u00e4", "T. Honkela", "T. Kohonen"], "venue": "Technical Report TKK-ICS-R23, Helsinki University of Technology, Department of Information and Computer Science, Espoo, Finland, December", "citeRegEx": "48", "shortCiteRegEx": null, "year": 2009}, {"title": "Survey and comparison of quality measures for self-organizing maps", "author": ["G. P\u00f6lzlbauer"], "venue": "J\u00e1n Parali\u010d, Georg P\u00f6lzlbauer, and Andreas Rauber, editors, Proceedings of the Fifth Workshop on Data Analysis (WDA\u201904), pages 67\u201382, Sliezsky dom, Vysok\u00e9 Tatry, Slovakia, June 24\u201327", "citeRegEx": "49", "shortCiteRegEx": null, "year": 2004}, {"title": "The Growing Hierarchical Self-Organizing Map: exploratory analysis of high-dimensional data", "author": ["A. Rauber", "D. Merkl", "M. Dittenbach"], "venue": "IEEE Transactions on Neural Networks, 13(6):1331\u20131341,", "citeRegEx": "50", "shortCiteRegEx": null, "year": 2002}, {"title": "Neural networks: a systematic introduction", "author": ["R. Rojas"], "venue": "Springer-Verlag New York, Inc., New York, NY, USA,", "citeRegEx": "51", "shortCiteRegEx": null, "year": 1996}, {"title": "Treesom: Cluster analysis in the self-organizing map", "author": ["E.V. Samsonova", "J.N. Kok", "A.P. IJzerman"], "venue": "Neural Networks, 19(6\u20137):935 \u2013 949,", "citeRegEx": "52", "shortCiteRegEx": null, "year": 2006}, {"title": "Self-Organizing Maps for the skeletonization of sparse shapes", "author": ["R. Singh", "V. Cherkassky", "N. Papanikolopoulos"], "venue": "Neural Networks, IEEE Transactions on, 11(1):241\u2013248, Jan", "citeRegEx": "53", "shortCiteRegEx": null, "year": 2000}, {"title": "Self-adjusting binary search trees", "author": ["D.D. Sleator", "R.E. Tarjan"], "venue": "J. ACM, 32(3):652\u2013686,", "citeRegEx": "54", "shortCiteRegEx": null, "year": 1985}, {"title": "Neighborhood preservation in nonlinear projection methods: An experimental study", "author": ["J. Venna", "S. Kaski"], "venue": "Georg Dorffner, Horst Bischof, and Kurt Hornik, editors, ICANN, volume 2130 of Lecture Notes in Computer Science, pages 485\u2013491. Springer,", "citeRegEx": "55", "shortCiteRegEx": null, "year": 2001}, {"title": "Unsupervised segmentation using a selforganizing map and a noise model estimation in sonar imagery", "author": ["K.C. Yao", "M. Mignotte", "C. Collet", "P. Galerne", "G. Burel"], "venue": "Pattern Recognition, 33(9):1575 \u2013 1584,", "citeRegEx": "56", "shortCiteRegEx": null, "year": 2000}], "referenceMentions": [{"referenceID": 35, "context": "Kohonen, in his book [36], mentions that it is possible to distinguish between two basic types of neighborhood functions.", "startOffset": 21, "endOffset": 25}, {"referenceID": 23, "context": "Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.", "startOffset": 111, "endOffset": 115}, {"referenceID": 24, "context": "Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.", "startOffset": 139, "endOffset": 143}, {"referenceID": 12, "context": "Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.", "startOffset": 180, "endOffset": 184}, {"referenceID": 2, "context": "Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.", "startOffset": 209, "endOffset": 212}, {"referenceID": 36, "context": "Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.", "startOffset": 246, "endOffset": 250}, {"referenceID": 42, "context": "Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.", "startOffset": 287, "endOffset": 291}, {"referenceID": 49, "context": "Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.", "startOffset": 330, "endOffset": 334}, {"referenceID": 21, "context": "Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.", "startOffset": 377, "endOffset": 381}, {"referenceID": 45, "context": "Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.", "startOffset": 406, "endOffset": 410}, {"referenceID": 7, "context": "Examples of strategies that use the neural distance to determine the BoA are the Growing Cell Structures (GCS) [24], the Growing Grid (GG) [25], the Incremental Grid Growing (IGG) [13], the Growing SOM (GSOM) [3], the Tree-Structured SOM (TSSOM) [37], the Hierarchical Feature Map (HFM) [43], the Growing Hierarchical SOM (GHSOM) [50], the SelfOrganizing Tree Algorithm (SOTA) [22], the Evolving Tree (ET) [46], the Tree-based Topology Oriented SOM (TTOSOM) [8], among others.", "startOffset": 458, "endOffset": 461}, {"referenceID": 36, "context": ", it constitutes an instance of hard Competitive Learning (CL), as in the case of the Tree-Structured VQ (TSVQ) [37] and the Self-Organizing Tree Map (SOTM) [27].", "startOffset": 112, "endOffset": 116}, {"referenceID": 26, "context": ", it constitutes an instance of hard Competitive Learning (CL), as in the case of the Tree-Structured VQ (TSVQ) [37] and the Self-Organizing Tree Map (SOTM) [27].", "startOffset": 157, "endOffset": 161}, {"referenceID": 39, "context": "An example of a SOM variant that uses such a ranking is the Neural Gas (NG) [40].", "startOffset": 76, "endOffset": 80}, {"referenceID": 45, "context": "According to the authors of [46], the SOM-based variants included in the literature attempt to tackle two main goals: They either try to design a more flexible topology, which is usually useful to analyze large datasets, or to reduce the the most time-consuming task required by the SOM, namely, the search for the BMU when the input set has a complex nature.", "startOffset": 28, "endOffset": 32}, {"referenceID": 12, "context": "Regardless of the fact that numerous variants of the SOM has been devised, few of them possess the ability of modifying the underlying topology [13, 21, 22, 26, 27, 42, 46, 52].", "startOffset": 144, "endOffset": 176}, {"referenceID": 20, "context": "Regardless of the fact that numerous variants of the SOM has been devised, few of them possess the ability of modifying the underlying topology [13, 21, 22, 26, 27, 42, 46, 52].", "startOffset": 144, "endOffset": 176}, {"referenceID": 21, "context": "Regardless of the fact that numerous variants of the SOM has been devised, few of them possess the ability of modifying the underlying topology [13, 21, 22, 26, 27, 42, 46, 52].", "startOffset": 144, "endOffset": 176}, {"referenceID": 25, "context": "Regardless of the fact that numerous variants of the SOM has been devised, few of them possess the ability of modifying the underlying topology [13, 21, 22, 26, 27, 42, 46, 52].", "startOffset": 144, "endOffset": 176}, {"referenceID": 26, "context": "Regardless of the fact that numerous variants of the SOM has been devised, few of them possess the ability of modifying the underlying topology [13, 21, 22, 26, 27, 42, 46, 52].", "startOffset": 144, "endOffset": 176}, {"referenceID": 41, "context": "Regardless of the fact that numerous variants of the SOM has been devised, few of them possess the ability of modifying the underlying topology [13, 21, 22, 26, 27, 42, 46, 52].", "startOffset": 144, "endOffset": 176}, {"referenceID": 45, "context": "Regardless of the fact that numerous variants of the SOM has been devised, few of them possess the ability of modifying the underlying topology [13, 21, 22, 26, 27, 42, 46, 52].", "startOffset": 144, "endOffset": 176}, {"referenceID": 51, "context": "Regardless of the fact that numerous variants of the SOM has been devised, few of them possess the ability of modifying the underlying topology [13, 21, 22, 26, 27, 42, 46, 52].", "startOffset": 144, "endOffset": 176}, {"referenceID": 7, "context": "Moreover, only a small subset use a tree as their underlying DS [8, 21, 22, 27, 46, 52].", "startOffset": 64, "endOffset": 87}, {"referenceID": 20, "context": "Moreover, only a small subset use a tree as their underlying DS [8, 21, 22, 27, 46, 52].", "startOffset": 64, "endOffset": 87}, {"referenceID": 21, "context": "Moreover, only a small subset use a tree as their underlying DS [8, 21, 22, 27, 46, 52].", "startOffset": 64, "endOffset": 87}, {"referenceID": 26, "context": "Moreover, only a small subset use a tree as their underlying DS [8, 21, 22, 27, 46, 52].", "startOffset": 64, "endOffset": 87}, {"referenceID": 45, "context": "Moreover, only a small subset use a tree as their underlying DS [8, 21, 22, 27, 46, 52].", "startOffset": 64, "endOffset": 87}, {"referenceID": 51, "context": "Moreover, only a small subset use a tree as their underlying DS [8, 21, 22, 27, 46, 52].", "startOffset": 64, "endOffset": 87}, {"referenceID": 35, "context": "The SOM tries to achieve this by defining an underlying grid-based topology and to fit the grid within the overall shape, as shown in Figure 1a (duplicated from [36]).", "startOffset": 161, "endOffset": 165}, {"referenceID": 7, "context": "As opposed to this, Figure 1b, shows the result of applying one of the techniques developed by us, namely the TTOSOM [8].", "startOffset": 117, "endOffset": 120}, {"referenceID": 22, "context": "Indeed, this is in line with the well-accepted principle [23], that very little can be automatically learned about a data distribution if no assumptions are made! As the next step of motivating this research endeavor, we venture into a world where the neural topology and structure are themselves learned during the training process.", "startOffset": 57, "endOffset": 61}, {"referenceID": 6, "context": "Even though the schemes that we are currently proposing As mentioned earlier, a paper which reported the preliminary results of this study, won the Best Paper Award in a well-known international AI conference [7].", "startOffset": 209, "endOffset": 212}, {"referenceID": 12, "context": ", [13, 24, 37, 46].", "startOffset": 2, "endOffset": 18}, {"referenceID": 23, "context": ", [13, 24, 37, 46].", "startOffset": 2, "endOffset": 18}, {"referenceID": 36, "context": ", [13, 24, 37, 46].", "startOffset": 2, "endOffset": 18}, {"referenceID": 45, "context": ", [13, 24, 37, 46].", "startOffset": 2, "endOffset": 18}, {"referenceID": 36, "context": "The strategy that we have chosen for adapting the tree, namely using Conditional Rotations (CONROT), already utilizes this BMU counter, and, distinct to the previous strategies that attempt to search for a node to be expanded (which in the case of tree-based SOMs is usually at the level of the leaves [37, 46]), we foresee and advocate a different approach.", "startOffset": 302, "endOffset": 310}, {"referenceID": 45, "context": "The strategy that we have chosen for adapting the tree, namely using Conditional Rotations (CONROT), already utilizes this BMU counter, and, distinct to the previous strategies that attempt to search for a node to be expanded (which in the case of tree-based SOMs is usually at the level of the leaves [37, 46]), we foresee and advocate a different approach.", "startOffset": 302, "endOffset": 310}, {"referenceID": 35, "context": "1 The SOM One of the most important families of ANNs used to tackle clustering problems is the well known SOM [36].", "startOffset": 110, "endOffset": 114}, {"referenceID": 31, "context": "There are a vast number of domain fields where the SOM has demonstrated to be useful; a compendium with all the articles that take advantage of the properties of the SOM is surveyed in [32, 45].", "startOffset": 185, "endOffset": 193}, {"referenceID": 44, "context": "There are a vast number of domain fields where the SOM has demonstrated to be useful; a compendium with all the articles that take advantage of the properties of the SOM is surveyed in [32, 45].", "startOffset": 185, "endOffset": 193}, {"referenceID": 31, "context": "The report [32] includes the bibliography published between the year 1981 and 1998, while the report [45] includes the analogous papers published between 1998 and 2001.", "startOffset": 11, "endOffset": 15}, {"referenceID": 44, "context": "The report [32] includes the bibliography published between the year 1981 and 1998, while the report [45] includes the analogous papers published between 1998 and 2001.", "startOffset": 101, "endOffset": 105}, {"referenceID": 47, "context": "Further, additional recent references including the related work up to the year 2005 have been collected in a technical report [48].", "startOffset": 127, "endOffset": 131}, {"referenceID": 1, "context": "The more recent literature reports a host of application domains, including Medical Image Processing [2], Human Eye Detection [33], Handwriting Recognition [39], Image Segmentation [56], Information Retrieval [20], Object Tracking [30], etc.", "startOffset": 101, "endOffset": 104}, {"referenceID": 32, "context": "The more recent literature reports a host of application domains, including Medical Image Processing [2], Human Eye Detection [33], Handwriting Recognition [39], Image Segmentation [56], Information Retrieval [20], Object Tracking [30], etc.", "startOffset": 126, "endOffset": 130}, {"referenceID": 38, "context": "The more recent literature reports a host of application domains, including Medical Image Processing [2], Human Eye Detection [33], Handwriting Recognition [39], Image Segmentation [56], Information Retrieval [20], Object Tracking [30], etc.", "startOffset": 156, "endOffset": 160}, {"referenceID": 55, "context": "The more recent literature reports a host of application domains, including Medical Image Processing [2], Human Eye Detection [33], Handwriting Recognition [39], Image Segmentation [56], Information Retrieval [20], Object Tracking [30], etc.", "startOffset": 181, "endOffset": 185}, {"referenceID": 19, "context": "The more recent literature reports a host of application domains, including Medical Image Processing [2], Human Eye Detection [33], Handwriting Recognition [39], Image Segmentation [56], Information Retrieval [20], Object Tracking [30], etc.", "startOffset": 209, "endOffset": 213}, {"referenceID": 29, "context": "The more recent literature reports a host of application domains, including Medical Image Processing [2], Human Eye Detection [33], Handwriting Recognition [39], Image Segmentation [56], Information Retrieval [20], Object Tracking [30], etc.", "startOffset": 231, "endOffset": 235}, {"referenceID": 36, "context": "The Tree-Structured VQ (TSVQ) algorithm [37] is a tree-based SOM variant, whose topology is defined a priori and which is static.", "startOffset": 40, "endOffset": 44}, {"referenceID": 36, "context": "Koikkalainen and Oja, in the same paper [37] refine the idea of the TSVQ by defining the TSSOM, which inherits all the properties of the TSVQ, but redefines the search procedure and BoA.", "startOffset": 40, "endOffset": 44}, {"referenceID": 21, "context": "The Self-Organizing Tree Algorithm (SOTA) [22] is a dynamically growing tree-based SOM which, according to their authors, take some analogies from the Growing Cell Structures (GCS) [24].", "startOffset": 42, "endOffset": 46}, {"referenceID": 23, "context": "The Self-Organizing Tree Algorithm (SOTA) [22] is a dynamically growing tree-based SOM which, according to their authors, take some analogies from the Growing Cell Structures (GCS) [24].", "startOffset": 181, "endOffset": 185}, {"referenceID": 36, "context": ", the TSSOM [37] and the Evolving Tree (ET) [46] explained below), it considers the migration of the neurons only if they", "startOffset": 12, "endOffset": 16}, {"referenceID": 45, "context": ", the TSSOM [37] and the Evolving Tree (ET) [46] explained below), it considers the migration of the neurons only if they", "startOffset": 44, "endOffset": 48}, {"referenceID": 20, "context": "In [21] the authors presented a tree-based SOM called the Growing Hierarchical SOM (GHSOM), in which each node corresponds to an independent SOM.", "startOffset": 3, "endOffset": 7}, {"referenceID": 26, "context": "The SOTM [27] is a tree-based SOM which is also inspired by the Adaptive Resonance Theory (ART) [15].", "startOffset": 9, "endOffset": 13}, {"referenceID": 14, "context": "The SOTM [27] is a tree-based SOM which is also inspired by the Adaptive Resonance Theory (ART) [15].", "startOffset": 96, "endOffset": 100}, {"referenceID": 45, "context": "In [46], the authors have proposed a tree-structured NN called the Evolving Tree (ET), which takes advantage of a sub-optimal procedure (adapted from the one utilized by the TSVQ) to identify the BMU in O(log |V |) time, where V is the set of neurons.", "startOffset": 3, "endOffset": 7}, {"referenceID": 7, "context": "The Tree-based Topology Oriented SOM (TTOSOM) [8], which is central to this paper, is a tree-based SOM in which each node can possess an arbitrary number of children.", "startOffset": 46, "endOffset": 49}, {"referenceID": 7, "context": "In this case, the TTOSOM is able to adapt this 1-dimensional grid to a 2-dimensional (or multi-dimensional) object in the same way as the SOM algorithm does [8].", "startOffset": 157, "endOffset": 160}, {"referenceID": 7, "context": "Additionally, if the original topology of the tree followed the overall shape of the data distribution, the results reported in [8] (and also depicted in the motivational section) showed that is also possible to obtain a symmetric topology for the codebook vectors.", "startOffset": 128, "endOffset": 131}, {"referenceID": 8, "context": "In a more recent work [9], the authors have enhanced the TTOSOM to perform classification in a semi-supervised fashion.", "startOffset": 22, "endOffset": 25}, {"referenceID": 8, "context": "The method presented in [9] first learns the data distribution in an unsupervised manner.", "startOffset": 24, "endOffset": 27}, {"referenceID": 8, "context": "According to the results presented in [9], the number of neurons required to accurately predict the category The SOM possesses the ability to learn the data distribution by utilizing a unidimensional topology [36], i.", "startOffset": 38, "endOffset": 41}, {"referenceID": 35, "context": "According to the results presented in [9], the number of neurons required to accurately predict the category The SOM possesses the ability to learn the data distribution by utilizing a unidimensional topology [36], i.", "startOffset": 209, "endOffset": 213}, {"referenceID": 46, "context": "Further, when this is the case, one can encounter that the unidimensional topology forms a so-called Peano curve [47].", "startOffset": 113, "endOffset": 117}, {"referenceID": 7, "context": "The details of how this is achieved is presented in detail in [8], including the explanation of how other tree-based techniques fail to achieve this task.", "startOffset": 62, "endOffset": 65}, {"referenceID": 34, "context": "The solution to obtain the optimal BST is well known when the access probabilities of the nodes are known a priori [35].", "startOffset": 115, "endOffset": 119}, {"referenceID": 15, "context": "and uses the concept of CONROT [16], which reorganizes the BST so as to asymptotically produce the optimal form.", "startOffset": 31, "endOffset": 35}, {"referenceID": 34, "context": "The optimal algorithm due to Knuth [35], uses dynamic programming and produces the optimal BST using O(N) time and space.", "startOffset": 35, "endOffset": 39}, {"referenceID": 0, "context": "The primitive tree restructuring operation used in most BST schemes is the well known operation of Rotation [1].", "startOffset": 108, "endOffset": 111}, {"referenceID": 3, "context": "A few memory-less tree reorganizing schemes which use this operation have been presented in the literature among which are the Move-to-Root and the simple Exchange rules [4].", "startOffset": 170, "endOffset": 173}, {"referenceID": 17, "context": "A more detailed version is found in [18, 38].", "startOffset": 36, "endOffset": 44}, {"referenceID": 37, "context": "A more detailed version is found in [18, 38].", "startOffset": 36, "endOffset": 44}, {"referenceID": 53, "context": "Sleator and Tarjan [54] introduced a technique, which also moves the accessed record up to the root of the tree using a restructuring operation called \u201cSplaying\u201d, which actually is a multi-level generalization of the rotation.", "startOffset": 19, "endOffset": 23}, {"referenceID": 11, "context": "Prominent among them is the Monotonic Tree (MT) [12] and Mehlhorn\u2019s D-Tree (DT) [41].", "startOffset": 48, "endOffset": 52}, {"referenceID": 40, "context": "Prominent among them is the Monotonic Tree (MT) [12] and Mehlhorn\u2019s D-Tree (DT) [41].", "startOffset": 80, "endOffset": 84}, {"referenceID": 34, "context": "The MT is a dynamic version of a tree structuring method originally suggested by Knuth [35].", "startOffset": 87, "endOffset": 91}, {"referenceID": 15, "context": "But, as reported in [16], in practice, it does not perform well.", "startOffset": 20, "endOffset": 24}, {"referenceID": 15, "context": "This paper uses a particular heuristic, namely, the Conditional Rotations for a BST (CONROT-BST) [16], which has been shown to reorganize a BST so as to asymptotically arrive at an optimal form.", "startOffset": 97, "endOffset": 101}, {"referenceID": 15, "context": "The authors of [16] have shown that this single rotation leads to a decrease in the overall WPL of the entire tree.", "startOffset": 15, "endOffset": 19}, {"referenceID": 15, "context": "More specifically we shall concentrate on the integration of the CONROT-BST heuristic [16] into a TTOSOM [8], both of which were explained in the preceding sections.", "startOffset": 86, "endOffset": 90}, {"referenceID": 7, "context": "More specifically we shall concentrate on the integration of the CONROT-BST heuristic [16] into a TTOSOM [8], both of which were explained in the preceding sections.", "startOffset": 105, "endOffset": 108}, {"referenceID": 7, "context": "1 Neural Distance As in the case of the TTOSOM [8], the Neural Distance, dN , between two neurons depends on the number of unweighted connections that separate them in the user-defined tree.", "startOffset": 47, "endOffset": 50}, {"referenceID": 7, "context": "The BoA can be formally defined as [8]", "startOffset": 35, "endOffset": 38}, {"referenceID": 7, "context": "As presented in [8], the function TTOSOM Calculate Neighborhood (see Algorithm 3) specifies the steps involved in the calculation of the subset of neurons that are part of the neighborhood of the BMU.", "startOffset": 16, "endOffset": 19}, {"referenceID": 30, "context": "Although storing the history of changes made to the tree can be done optimally [31], the question of explicitly storing the entire history of the BoAs for all the nodes in the tree remains open.", "startOffset": 79, "endOffset": 83}, {"referenceID": 15, "context": "3 Enforcing the BST Property The CONROT-BST heuristic [16] requires that the tree should possess the BST property [18]: Let x be a node in a BST.", "startOffset": 54, "endOffset": 58}, {"referenceID": 17, "context": "3 Enforcing the BST Property The CONROT-BST heuristic [16] requires that the tree should possess the BST property [18]: Let x be a node in a BST.", "startOffset": 114, "endOffset": 118}, {"referenceID": 7, "context": "In this case the consequence of incorporating ADS-based enhancements to the TTOSOM will imply that the results obtained will be significantly different from those shown in [8].", "startOffset": 172, "endOffset": 175}, {"referenceID": 34, "context": "As shown in [35], an optimal arrangement of the nodes of the tree can be obtained using the probabilities of accesses.", "startOffset": 12, "endOffset": 16}, {"referenceID": 15, "context": "The rationale for following this sequence of steps is that the parameters needed to perform the conditional rotation, as specified in [16], includes the \u201ckey\u201d of the element queried, which, in the present context, corresponds to the identity of the BMU.", "startOffset": 134, "endOffset": 138}, {"referenceID": 7, "context": "We know that, as per the results obtained in [8], the TTOSOM is capable of inferring the distribution and structure of the data.", "startOffset": 45, "endOffset": 48}, {"referenceID": 7, "context": "2 Two Dimensional Data Points To demonstrate the power of including ADS in SOMs, we shall now consider the same two-dimensional data sets studied in [8].", "startOffset": 149, "endOffset": 152}, {"referenceID": 7, "context": "This experiment serves as an excellent example to show the differences between our current method and the original TTOSOM algorithm [8], where the same data set with similar settings was utilized.", "startOffset": 132, "endOffset": 135}, {"referenceID": 46, "context": "In this case, the one-dimensional list of neurons is evenly distributed over the sphere, preserving the original properties of the 3-dimensional object and also presenting a shape which reminds the viewer of the so-called Peano curve [47].", "startOffset": 234, "endOffset": 238}, {"referenceID": 22, "context": "According to [23], there are several reasons for performing pattern classification using an unsupervised approach.", "startOffset": 13, "endOffset": 17}, {"referenceID": 43, "context": "The authors of [44] refer to skeletonization in the plane as the process by which a 2-dimensional shape is transformed into a 1-dimensional one, similar to a \u201cstick\u201d figure.", "startOffset": 15, "endOffset": 19}, {"referenceID": 7, "context": "As explained in [8], the traditional methods for skeletonization assume the connectivity of the data points and when this is not the case, more sophisticated methods are required.", "startOffset": 16, "endOffset": 19}, {"referenceID": 7, "context": "Previous efforts involving SOM variants to achieve skeletonization has been proposed [8, 19, 53].", "startOffset": 85, "endOffset": 96}, {"referenceID": 18, "context": "Previous efforts involving SOM variants to achieve skeletonization has been proposed [8, 19, 53].", "startOffset": 85, "endOffset": 96}, {"referenceID": 52, "context": "Previous efforts involving SOM variants to achieve skeletonization has been proposed [8, 19, 53].", "startOffset": 85, "endOffset": 96}, {"referenceID": 7, "context": "We remark that the TTOSOM [8] is the only one which uses a tree-based structure.", "startOffset": 26, "endOffset": 29}, {"referenceID": 7, "context": "Our results reported in [8] confirm that this is actually possible, and we now focus on how the conditional rotations will affect such a skeletonization.", "startOffset": 24, "endOffset": 27}, {"referenceID": 33, "context": "3 Theoretical Analysis According to Kiviluoto [34], there are three different criteria for evaluating the quality of a map.", "startOffset": 46, "endOffset": 50}, {"referenceID": 4, "context": "There exist a variety of measures for quantifying the quality of the topology preservation [5].", "startOffset": 91, "endOffset": 94}, {"referenceID": 48, "context": "The author of [49] surveys a number of relevant measures for the quality of maps, and these include the Quantization Error, the Topographic Product [11], the Topographic Error [34] and the Trustworthiness and Neighborhood Preservation [55].", "startOffset": 14, "endOffset": 18}, {"referenceID": 10, "context": "The author of [49] surveys a number of relevant measures for the quality of maps, and these include the Quantization Error, the Topographic Product [11], the Topographic Error [34] and the Trustworthiness and Neighborhood Preservation [55].", "startOffset": 148, "endOffset": 152}, {"referenceID": 33, "context": "The author of [49] surveys a number of relevant measures for the quality of maps, and these include the Quantization Error, the Topographic Product [11], the Topographic Error [34] and the Trustworthiness and Neighborhood Preservation [55].", "startOffset": 176, "endOffset": 180}, {"referenceID": 54, "context": "The author of [49] surveys a number of relevant measures for the quality of maps, and these include the Quantization Error, the Topographic Product [11], the Topographic Error [34] and the Trustworthiness and Neighborhood Preservation [55].", "startOffset": 235, "endOffset": 239}, {"referenceID": 5, "context": "Although we are currently investigating [6] how the quality of any tree-based SOM (not just our scheme) can be quantified using these metrics.", "startOffset": 40, "endOffset": 43}, {"referenceID": 16, "context": "The ordering of the weights (with respect to the position) of the neurons of the SOM has been proved for unidimensional topologies [17, 36, 51].", "startOffset": 131, "endOffset": 143}, {"referenceID": 35, "context": "The ordering of the weights (with respect to the position) of the neurons of the SOM has been proved for unidimensional topologies [17, 36, 51].", "startOffset": 131, "endOffset": 143}, {"referenceID": 50, "context": "The ordering of the weights (with respect to the position) of the neurons of the SOM has been proved for unidimensional topologies [17, 36, 51].", "startOffset": 131, "endOffset": 143}, {"referenceID": 13, "context": "Budinich, in [14], explains intuitively the problems related to the ordering of neurons in higher dimensional configurations.", "startOffset": 13, "endOffset": 17}, {"referenceID": 28, "context": "[29] introduce a definition of the ordering and show that even though the position of the codebook vectors of the SOM have been ordered, there is still the possibility that a sequence of stimuli will cause their disarrangement.", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "Some statistical indexes of correlation between the measures of the weights and distances of the related positions have been introduced in [10].", "startOffset": 139, "endOffset": 143}, {"referenceID": 10, "context": "With regard to the topographic product, the authors of [11] have shown the power of the metric by applying it on different artificial and real-world data sets, and also compared it with different measures to quantify the topology [10].", "startOffset": 55, "endOffset": 59}, {"referenceID": 9, "context": "With regard to the topographic product, the authors of [11] have shown the power of the metric by applying it on different artificial and real-world data sets, and also compared it with different measures to quantify the topology [10].", "startOffset": 230, "endOffset": 234}, {"referenceID": 27, "context": "In [28], Haykin mention that the Topographic Product may be employed to compare the quality of different maps, even when these maps possess different dimensionality.", "startOffset": 3, "endOffset": 7}, {"referenceID": 10, "context": "To be more precise, most of the effort towards determining the concept of topology preservation for dimensions greater than unity are specifically focused on the SOM [11, 17, 36, 14, 29, 10], and do not define how a treelike topology should be measured nor how to define the order in topologies which are not grid-based.", "startOffset": 166, "endOffset": 190}, {"referenceID": 16, "context": "To be more precise, most of the effort towards determining the concept of topology preservation for dimensions greater than unity are specifically focused on the SOM [11, 17, 36, 14, 29, 10], and do not define how a treelike topology should be measured nor how to define the order in topologies which are not grid-based.", "startOffset": 166, "endOffset": 190}, {"referenceID": 35, "context": "To be more precise, most of the effort towards determining the concept of topology preservation for dimensions greater than unity are specifically focused on the SOM [11, 17, 36, 14, 29, 10], and do not define how a treelike topology should be measured nor how to define the order in topologies which are not grid-based.", "startOffset": 166, "endOffset": 190}, {"referenceID": 13, "context": "To be more precise, most of the effort towards determining the concept of topology preservation for dimensions greater than unity are specifically focused on the SOM [11, 17, 36, 14, 29, 10], and do not define how a treelike topology should be measured nor how to define the order in topologies which are not grid-based.", "startOffset": 166, "endOffset": 190}, {"referenceID": 28, "context": "To be more precise, most of the effort towards determining the concept of topology preservation for dimensions greater than unity are specifically focused on the SOM [11, 17, 36, 14, 29, 10], and do not define how a treelike topology should be measured nor how to define the order in topologies which are not grid-based.", "startOffset": 166, "endOffset": 190}, {"referenceID": 9, "context": "To be more precise, most of the effort towards determining the concept of topology preservation for dimensions greater than unity are specifically focused on the SOM [11, 17, 36, 14, 29, 10], and do not define how a treelike topology should be measured nor how to define the order in topologies which are not grid-based.", "startOffset": 166, "endOffset": 190}], "year": 2009, "abstractText": "Numerous variants of Self-Organizing Maps (SOMs) have been proposed in the literature, including those which also possess an underlying structure, and in some cases, this structure itself can be defined by the user Although the concepts of growing the SOM and updating it have been studied, the whole issue of using a self-organizing Adaptive Data Structure (ADS) to further enhance the properties of the underlying SOM, has been unexplored. In an earlier work, we impose an arbitrary, user-defined, tree-like topology onto the codebooks, which consequently enforced a neighborhood phenomenon and the so-called tree-based Bubble of Activity (BoA). In this paper, we consider how the underlying tree itself can be rendered dynamic and adaptively transformed. To do this, we present methods by which a SOM with an underlying Binary Search Tree (BST) structure can be adaptively re-structured using Conditional Rotations (CONROT). These rotations on the nodes of the tree are local, can be done in constant time, and performed so as to decrease the Weighted Path Length (WPL) of the entire tree. In doing this, we introduce the pioneering concept referred to as Neural Promotion, where neurons gain prominence in the Neural Network (NN) as their significance increases. We are not aware of any research which deals with the issue of Neural Promotion. The advantages of such a scheme is that the user need not be aware of any of the topological peculiarities of the stochastic data distribution. Rather, the algorithm, referred to as the TTOSOM with Conditional Rotations (TTOCONROT), converges in such a manner that the neurons are ultimately placed in the input space so as to represent its stochastic distribution, and additionally, the neighborhood properties of the neurons suit the best BST that represents the data. These properties have been confirmed by our experimental results on a variety of data sets. We submit that all of these concepts are both novel and of a pioneering sort.", "creator": "gnuplot 4.2 patchlevel 4 "}}}