{"id": "1506.08230", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Jun-2015", "title": "Convolutional networks and learning invariant to homogeneous multiplicative scalings", "abstract": "The conventional classification schemes -- notably multinomial logistic regression -- used in conjunction with convolutional networks (convnets) are classical in statistics, designed without consideration for the usual coupling with convnets, stochastic gradient descent, and backpropagation. In the specific application to supervised learning for convnets, a simple scale-invariant classification stage turns out to be more robust than multinomial logistic regression, appears to result in slightly lower errors on several standard test sets, has similar computational costs, and features precise control over the actual rate of learning. \"Scale-invariant\" means that multiplying the input values by any nonzero scalar leaves the output unchanged.", "histories": [["v1", "Fri, 26 Jun 2015 22:22:21 GMT  (617kb,D)", "http://arxiv.org/abs/1506.08230v1", "14 pages, 6 figures, 4 tables"], ["v2", "Sun, 13 Sep 2015 18:10:04 GMT  (652kb,D)", "http://arxiv.org/abs/1506.08230v2", "12 pages, 6 figures, 4 tables (ICLR reviewers need only consider the first 8 pages -- the remaining pages are appendices)"], ["v3", "Thu, 24 Dec 2015 20:20:48 GMT  (652kb,D)", "http://arxiv.org/abs/1506.08230v3", "12 pages, 6 figures, 4 tables (ICLR reviewers need only consider the first 9 pages -- the remaining pages are appendices)"], ["v4", "Tue, 16 Feb 2016 22:55:43 GMT  (653kb,D)", "http://arxiv.org/abs/1506.08230v4", "12 pages, 6 figures, 4 tables"]], "COMMENTS": "14 pages, 6 figures, 4 tables", "reviews": [], "SUBJECTS": "cs.LG cs.NE", "authors": ["mark tygert", "arthur szlam", "soumith chintala", "marc'aurelio ranzato", "yuandong tian", "wojciech zaremba"], "accepted": false, "id": "1506.08230"}, "pdf": {"name": "1506.08230.pdf", "metadata": {"source": "CRF", "title": "Scale-invariant learning and convolutional networks", "authors": ["Soumith Chintala", "Marc\u2019Aurelio Ranzato", "Arthur Szlam", "Yuandong Tian", "Mark Tygert"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Classification of a vector of real numbers (called \u201cfeature activations\u201d) into one of several discrete categories is well established and well studied, with generally satisfactory solutions such as the ubiquitous multinomial logistic regression reviewed, for example, by [2]. However, the canonical classification may not couple well with generation of the feature activations via convolutional networks (convnets) trained using stochastic gradient descent, as discussed, for example, by [7]. Fitting (also known as learning or training) the combination of the convnet and the classification stage by minimizing the cost/loss/objective function associated with the classification suggests designing a stage specifically for use in such joint fitting/learning/training. In particular, many convnets are \u201cequivariant\u201d with respect to scalar multiplication \u2014 multiplying the input values by any scalar multiplies the output by the same factor; the present paper leverages this equivariance via a \u201cscaleinvariant\u201d classification stage \u2014 a stage for which multiplying the input values by any nonzero scalar leaves the output unchanged. The scale-invariant classification stage turns out to be more robust to outliers (including obviously mislabeled data), fits/learns/trains precisely at the rate that the user specifies, and apparently results in slightly lower errors on several standard test sets when used in conjunction with some typical convnets for generating the feature activations. The computational costs are comparable to those of multinomial logistic regression. Similar classification has been introduced earlier in other contexts by [3], [6], [9], [11], [12], [13], and others. Complementary normalization includes the work of [1], [4], and the associated references. The key to effective learning is rescaling, as described in Section 3 below (especially the last paragraph there).\nThe remainder of the present paper has the following structure: Section 2 sets the notation. Section 3 introduces the scale-invariant classification stage. Section 4 analyzes its robustness. Section 5 illustrates the performance of the classification on several standard data sets. The two appendices, A and B, provide more detailed derivations.\nar X\niv :1\n50 6.\n08 23\n0v 1\n[ cs\n.L G\n] 2\n6 Ju\nn 20\n15"}, {"heading": "2 Notational conventions", "text": "All numbers used in the classification stage will be real valued (though the numbers used for generating the inputs to the stage may in general be complex valued). We follow the recommendations of [8]: all vectors are column vectors (aside from gradients of a scalar with respect to a column vector, which are row vectors), and we use \u2016v\u2016 to denote the Euclidean norm of a vector v; that is, \u2016v\u2016 is the square root of the sum of the squares of the entries of v. We use \u2016A\u2016 to denote the spectral norm of a matrix A; that is, \u2016A\u2016 is the greatest singular value of A, which is also the maximum of \u2016Av\u2016 over every vector v such that \u2016v\u2016 = 1. The terminology \u201cFrobenius norm\u201d of A refers to the square root of the sum of the squares of the entries of A. The spectral norm of a vector viewed as a matrix having only one column or one row is the same as the Euclidean norm of the vector; the Euclidean norm of a matrix viewed as a vector is the same as the Frobenius norm of the matrix."}, {"heading": "3 A scale-invariant classification stage", "text": "We study a linear classification stage that assigns one of k classes to each real-valued vector x of feature activations (together with a measure of confidence in its classification), with the assignment being independent of the Euclidean norm of x; the Euclidean norm of x is its \u201cscale.\u201d We associate to the k classes target vectors t1, t2, . . . , tk that are the vertices of either a standard simplex or a regular simplex embedded in a Euclidean space of dimension m \u2265 k \u2014 the dimension of the embedding space being strictly greater than the minimum (k \u2212 1) required to contain the simplex will give extra space to help facilitate learning; [3], [6], [9], [11], [12], and [13] (amongst others) discuss these simplices and their applications to classification. For the standard simplex, the targets are just the standard basis vectors, each of which consists of zeros for all but one entry. For both the regular and standard simplices,\n\u2016t1\u2016 = \u2016t2\u2016 = \u00b7 \u00b7 \u00b7 = \u2016tk\u2016 = 1. (1)\nGiven an input vector x of feature activations, we identify the target vector tj that is nearest in the Euclidean distance to\nz = y\n\u2016y\u2016 , (2)\nwhere y = Ax (3)\nfor an m\u00d7n matrix A determined via learning as discussed shortly. The index j such that \u2016z\u2212 tj\u2016 is minimal is the index of the class to which we assign x. The classification is known as \u201clinear\u201d or \u201cmulti-linear\u201d due to (3). The index j to which we assign x is clearly independent of the Euclidean norm of x due to (2), and the assignment is \u201cscale-invariant\u201d even if we rescale A by a nonzero scalar multiple.\nTo determine A, we first initialize all its entries to random numbers, then divide each entry by the Frobenius norm of A and multiply by the square root of the number of rows in A. We then conduct iterations of stochastic gradient descent as advocated by [7], updating A to A\u0303 on each iteration via\nA\u0303 = A\u2212 h ( \u2202c\n\u2202A\n)> , (4)\nwhere h is a positive real number (known as the \u201clearning rate\u201d or \u201cstep length\u201d) and c is the cost to be minimized that is associated with a vector chosen at random from among the input vectors\nand its associated vector x of feature activations,\nc = \u2016z \u2212 tj\u20162, (5)\nwhere tj is the target for the correct class associated with x, and z is the vector-valued function of x specified in (2) and (3). Appendix A calculates \u2202c/\u2202A explicitly.\nAs elaborated by [7], usually we combine stochastic gradient descent with backpropagation to update the entries of x associated with the chosen input, which requires propagating the gradient \u2202c/\u2202x back into the network generating the feature activations that are the entries of x for the chosen input sample. We use the same learning rate from the classification stage throughout the network generating the feature activations. Fortunately, the Euclidean norm of the gradient \u2202c/\u2202x is bounded independent of the scaling of A:\u2225\u2225\u2225\u2225 \u2202c\u2202x\n\u2225\u2225\u2225\u2225 \u2264 4\u2016A\u2016\u2016Ax\u2016 ; (6) please note that scaling the matrix A by any nonzero scalar multiple has no effect on the righthand side of (6) \u2014 the gradient propagating in backpropagation is independent of the size of A. Appendix B gives a proof of (6).\nCritically, after every update as in (4), we rescale the matrix A: we divide every entry by the Frobenius norm of A and multiply by the square root of the number of rows in A. We use the rescaled matrix for subsequent iterations of stochastic gradient descent. Rescaling A yields precisely the same vector z in (2) and cost c in (5); together with the scale-invariance of the right-hand side of (6), rescaling ensures that the stochastic gradient iterations are effective and numerically stable for any learning rate h."}, {"heading": "4 Robustness", "text": "Combining (1) and the fact that the Euclidean norm of z from (2) is 1 yields that the cost c from (5) satisfies\n0 \u2264 c \u2264 4. (7)\nAs reviewed by [2], the cost associated with classification via multinomial logistic regression is\nr = ln ( m\u2211 `=1 exp(y(`)) ) \u2212 y(j), (8)\nwhere j is the index among 1, 2, . . . , k of the correct class, and y(1), y(2), . . . , y(m) are the entries of the vector y from (3), with m = k for multinomial logistic regression. Whereas the cost c is bounded as in (7), the cost r from (8) is bounded only for positive values of y(j), growing linearly for negative y(j). Thus, c is more robust than r to outliers; logistic regression is less robust to outliers (including obviously mislabeled inputs)."}, {"heading": "5 Numerical experiments", "text": "The present section provides a brief empirical evaluation of rescaling in comparison with the usual multinomial logistic regression, performing the learning for both via stochastic gradient descent (the learning is end-to-end, training the entire network \u2014 including both the convolutional network and the classification stage \u2014 jointly, with the same learning rate everywhere). We renormalize the\nparameters in the classification stage after every minibatch of 100 samples when rescaling (not with the multinomial logistic regression), as detailed in the last paragraph of Section 3 and the penultimate paragraph of the present section. The rescaled approach appears to perform somewhat better than multinomial logistic regression in all but Figure 2 for the experiments detailed in the present section.\nFollowing [7], the architectures for generating the feature activations are convolutional networks (convnets) consisting of series of stages, with each stage feeding its output into the next (except for the last, which feeds into the classification stage). Each stage convolves each image from its input against several learned convolutional kernels, summing together the convolved images from all the inputs into several output images, then takes the absolute value of each pixel of each resulting image, and finally averages over each patch in a partition of each image into a grid of 2\u00d72 patches. All convolutions are complex valued and produce pixels only where the original images cover all necessary inputs (that is, a convolution reduces each dimension of the image by one less than the size of the convolutional kernel). We subtract the mean of the pixel values from each input image before processing with the convnets, and we append an additional feature activation to those obtained from the convnets, namely the standard deviation of the set of values of the pixels in the image. For each data set, we use two network architectures, where the second is a somewhat smaller variant of the first. We consider three data sets whose training properties are reasonably straightforward to investigate, with each set consisting of k = 10 classes of images; the first two are the usual CIFAR-10 and MNIST of [5] and [7]. The third is a subset of the 2012 ImageNet data set of [10], retaining 10 classes of images, representing each class by 100 samples in a training set and 50 per class in a testing set. CIFAR-10 contains 50,000 images in its training set and 10,000 images in its testing set. MNIST contains 60,000 images in its training set and 10,000 images in its testing set. The images in the MNIST set are grayscale. The images in both the CIFAR-10 and ImageNet sets are full color, with three color channels. We neither augmented the input data nor regularized the cost/loss functions. We used the Torch7 platform \u2014 http://torch.ch \u2014 for all computations.\nTables 1\u20134 display the specific configurations we used. \u201cStage\u201d specifies the positions of the indicated layers in the convnet. \u201cInput images\u201d specifies the number of images input to the given stage for each sample from the data. \u201cOutput images\u201d specifies the number of images output from the given stage. Each input image is convolved against a separate, learned convolutional kernel for each output image (with the results of all these convolutions summed together for each output image). \u201cKernel size\u201d specifies the size of the square grid of pixels used in the convolutions. \u201cInput image size\u201d specifies the size of the square grid of pixels constituting each input image. \u201cOutput image size\u201d specifies the size of the square grid of pixels constituting each output image. Tables 1 and 2 display the two configurations used for processing both CIFAR-10 and MNIST. Tables 3 and 4 display the two configurations used for processing the subset of ImageNet described above.\nFigures 1\u20136 plot the accuracies attained by the different schemes for classification while varying h from (4) (h is the \u201clearning rate,\u201d as well as the length of the learning step relative to the magnitude of the gradient) and varying the dimension m of the space containing the simplex targets; m is the number of rows in A from (3) and (4). In each figure, the top panel \u2014 that labeled \u201c(a)\u201d and \u201crescaled\u201d \u2014 plots the error rates for classification using rescaling, with the targets being the vertices on the hypersphere of a regular simplex; the middle panel \u2014 that labeled \u201c(b)\u201d and \u201clogistic\u201d \u2014 plots the error rates for classification using multinomial logistic regression; the bottom panel \u2014 that labeled \u201c(c)\u201d and \u201cbest of both\u201d \u2014 plots the error rates for the best-performing instance from the top panel (a) together with the best-performing instance from the middle panel (b). All error rates refer to performance on the test set. The label \u201cepoch\u201d for the horizontal axes refers, as usual, to the number of training sweeps through the data set, as reviewed in the coming paragraph.\nAs recommended by [7], we learn via (minibatched) stochastic gradient descent, with 100 samples per minibatch; rather than updating the parameters being learned for randomly selected individual images from the training set exactly as in Section 3, we instead randomly permute the training set and partition this permuted set of images into subsets of 100, updating the parameters simultaneously for all 100 images constituting each of the subsets (known as \u201cminibatches\u201d), processing the series of minibatches in series. Each sweep through the entire training set is known as an \u201cepoch.\u201d The horizontal axes in the figures count the number of epochs.\nIn the experiments of the present section, the accuracies attained using the scale-invariant classification stage are comparable to (if not better than) those attained using the usual multinomial logistic regression. The scale-invariant classification stage is stable for all values of h, that is, for all learning rates."}, {"heading": "A Calculation of the update in (4)", "text": "In these appendices, we leverage matrix Calculus as elaborated by [8]. The chain rule specifies that the gradient of c with respect to A is\n\u2202c \u2202A = \u2202c \u2202z \u2202z \u2202y \u2202y \u2202A (9)\nThe gradient of c from (5) with respect to z is\n\u2202c \u2202z = 2(z \u2212 tj)>. (10)\nThe Jacobian of z from (2) with respect to y is\n\u2202z \u2202y =\nI \u2212 zz>\n\u2016y\u2016 , (11)\nwhere I denotes the identity matrix and zz> is the orthogonal projection onto z \u2014 due to (2), \u2016z\u2016 = 1. The derivative of y from (3) with respect to A is\n\u2202y \u2202A = x\u2297 I, (12)\nwhere I is the identity matrix and \u2297 is the tensor product; x\u2297 I is a vector of the same height as x, with each entry being the identity matrix I times the corresponding entry of x. Combining (3) and (9)\u2013(12) yields\n\u2202c \u2202A =\n2x(z>tj z \u2212 tj)>\n\u2016Ax\u2016 , (13)\nwhere z is defined in (2)."}, {"heading": "B Proof of the bound in (6)", "text": "In these appendices, we leverage matrix Calculus as elaborated by [8]. To prove (6), we calculate \u2202c/\u2202x using the chain rule\n\u2202c \u2202x = \u2202c \u2202z \u2202z \u2202y \u2202y \u2202x . (14)\nThe gradient of c from (5) with respect to z is\n\u2202c \u2202z = 2(z \u2212 tj)>. (15)\nThe Jacobian of z from (2) with respect to y is\n\u2202z \u2202y =\nI \u2212 zz>\n\u2016y\u2016 , (16)\nwhere I denotes the identity matrix and zz> is the orthogonal projection onto z \u2014 due to (2), \u2016z\u2016 = 1. Of course, the Jacobian of y from (3) with respect to x is\n\u2202y \u2202x = A. (17)\nThe fact that I \u2212 zz> is an orthogonal projection yields that\n\u2016I \u2212 zz>\u2016 \u2264 1. (18)\nCombining (1)\u2013(3) and (14)\u2013(18) yields (6), as desired."}, {"heading": "Acknowledgements", "text": "We would like to thank Le\u0301on Bottou and Rob Fergus for critical contributions to this project."}], "references": [{"title": "Normalization as a canonical neural computation", "author": ["M. Carandini", "D.J. Heeger"], "venue": "Nature Reviews Neurosci., 13 ", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Elements of Statistical Learning: Data Mining", "author": ["T. Hastie", "R. Tibshirani", "J. Friedman"], "venue": "Inference, and Prediction, Springer, 2nd ed.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2009}, {"title": "A framework for kernel-based multi-category classification", "author": ["S.I. Hill", "A. Doucet"], "venue": "J. Artificial Intel. Research, 30 ", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2007}, {"title": "Batch normalization: accelerating deep network training by reducing internal covariate shift", "author": ["S. Ioffe", "C. Szegedy"], "venue": "Tech. Rep. 1502.03167, arXiv", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "Learning multiple layers of features from tiny images", "author": ["A. Krizhevsky"], "venue": "Tech. Rep. Master\u2019s Thesis, University of Toronto Department of Computer Science", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2009}, {"title": "An MM algorithm for multicategory vertex discriminant analysis", "author": ["K. Lange", "T.T. Wu"], "venue": "J. Comput. Graph. Statist., 17 ", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2008}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proc. IEEE, 86 ", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1998}, {"title": "Matrix Differential Calculus with Applications in Statistics and Econometrics", "author": ["J.R. Magnus", "H. Neudecker"], "venue": "John Wiley and Sons, 3rd ed.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2007}, {"title": "Multiclass learning with simplex coding", "author": ["Y. Mroueh", "T. Poggio", "L. Rosasco", "J.-J. Slotine"], "venue": "Advances in Neural Information Processing Systems, vol. 25, Curran Associates", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2012}, {"title": "ImageNet large scale visual recognition challenge", "author": ["O. Russakovsky", "J. Deng", "H. Su", "J. Kruse", "S. Satheesh", "S. Ma", "Z. Huang", "A. Karpathy", "A. Khosla", "M. Bernstein", "A.C. Berg", "L. Fei-Fei"], "venue": "Tech. Rep. 1409.0575v3, arXiv", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2015}, {"title": "Multiclass boosting: theory and algorithms", "author": ["M.J. Saberian", "N. Vasconcelos"], "venue": "Advances in Neural Information Processing Systems, vol. 24, Curran Associates", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2011}, {"title": "Multicategory vertex discriminant analysis for high-dimensional data", "author": ["T.T. Wu", "K. Lange"], "venue": "Annals Appl. Statist., 4 ", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2010}, {"title": "Nonlinear vertex discriminant analysis with reproducing kernels", "author": ["T.T. Wu", "Y. Wu"], "venue": "Statist. Anal. Data Mining, 5 ", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}], "referenceMentions": [{"referenceID": 1, "context": "1 Introduction Classification of a vector of real numbers (called \u201cfeature activations\u201d) into one of several discrete categories is well established and well studied, with generally satisfactory solutions such as the ubiquitous multinomial logistic regression reviewed, for example, by [2].", "startOffset": 286, "endOffset": 289}, {"referenceID": 6, "context": "However, the canonical classification may not couple well with generation of the feature activations via convolutional networks (convnets) trained using stochastic gradient descent, as discussed, for example, by [7].", "startOffset": 212, "endOffset": 215}, {"referenceID": 2, "context": "Similar classification has been introduced earlier in other contexts by [3], [6], [9], [11], [12], [13], and others.", "startOffset": 72, "endOffset": 75}, {"referenceID": 5, "context": "Similar classification has been introduced earlier in other contexts by [3], [6], [9], [11], [12], [13], and others.", "startOffset": 77, "endOffset": 80}, {"referenceID": 8, "context": "Similar classification has been introduced earlier in other contexts by [3], [6], [9], [11], [12], [13], and others.", "startOffset": 82, "endOffset": 85}, {"referenceID": 10, "context": "Similar classification has been introduced earlier in other contexts by [3], [6], [9], [11], [12], [13], and others.", "startOffset": 87, "endOffset": 91}, {"referenceID": 11, "context": "Similar classification has been introduced earlier in other contexts by [3], [6], [9], [11], [12], [13], and others.", "startOffset": 93, "endOffset": 97}, {"referenceID": 12, "context": "Similar classification has been introduced earlier in other contexts by [3], [6], [9], [11], [12], [13], and others.", "startOffset": 99, "endOffset": 103}, {"referenceID": 0, "context": "Complementary normalization includes the work of [1], [4], and the associated references.", "startOffset": 49, "endOffset": 52}, {"referenceID": 3, "context": "Complementary normalization includes the work of [1], [4], and the associated references.", "startOffset": 54, "endOffset": 57}, {"referenceID": 7, "context": "We follow the recommendations of [8]: all vectors are column vectors (aside from gradients of a scalar with respect to a column vector, which are row vectors), and we use \u2016v\u2016 to denote the Euclidean norm of a vector v; that is, \u2016v\u2016 is the square root of the sum of the squares of the entries of v.", "startOffset": 33, "endOffset": 36}, {"referenceID": 2, "context": ", tk that are the vertices of either a standard simplex or a regular simplex embedded in a Euclidean space of dimension m \u2265 k \u2014 the dimension of the embedding space being strictly greater than the minimum (k \u2212 1) required to contain the simplex will give extra space to help facilitate learning; [3], [6], [9], [11], [12], and [13] (amongst others) discuss these simplices and their applications to classification.", "startOffset": 296, "endOffset": 299}, {"referenceID": 5, "context": ", tk that are the vertices of either a standard simplex or a regular simplex embedded in a Euclidean space of dimension m \u2265 k \u2014 the dimension of the embedding space being strictly greater than the minimum (k \u2212 1) required to contain the simplex will give extra space to help facilitate learning; [3], [6], [9], [11], [12], and [13] (amongst others) discuss these simplices and their applications to classification.", "startOffset": 301, "endOffset": 304}, {"referenceID": 8, "context": ", tk that are the vertices of either a standard simplex or a regular simplex embedded in a Euclidean space of dimension m \u2265 k \u2014 the dimension of the embedding space being strictly greater than the minimum (k \u2212 1) required to contain the simplex will give extra space to help facilitate learning; [3], [6], [9], [11], [12], and [13] (amongst others) discuss these simplices and their applications to classification.", "startOffset": 306, "endOffset": 309}, {"referenceID": 10, "context": ", tk that are the vertices of either a standard simplex or a regular simplex embedded in a Euclidean space of dimension m \u2265 k \u2014 the dimension of the embedding space being strictly greater than the minimum (k \u2212 1) required to contain the simplex will give extra space to help facilitate learning; [3], [6], [9], [11], [12], and [13] (amongst others) discuss these simplices and their applications to classification.", "startOffset": 311, "endOffset": 315}, {"referenceID": 11, "context": ", tk that are the vertices of either a standard simplex or a regular simplex embedded in a Euclidean space of dimension m \u2265 k \u2014 the dimension of the embedding space being strictly greater than the minimum (k \u2212 1) required to contain the simplex will give extra space to help facilitate learning; [3], [6], [9], [11], [12], and [13] (amongst others) discuss these simplices and their applications to classification.", "startOffset": 317, "endOffset": 321}, {"referenceID": 12, "context": ", tk that are the vertices of either a standard simplex or a regular simplex embedded in a Euclidean space of dimension m \u2265 k \u2014 the dimension of the embedding space being strictly greater than the minimum (k \u2212 1) required to contain the simplex will give extra space to help facilitate learning; [3], [6], [9], [11], [12], and [13] (amongst others) discuss these simplices and their applications to classification.", "startOffset": 327, "endOffset": 331}, {"referenceID": 6, "context": "We then conduct iterations of stochastic gradient descent as advocated by [7], updating A to \u00c3 on each iteration via \u00c3 = A\u2212 h ( \u2202c \u2202A )> , (4) where h is a positive real number (known as the \u201clearning rate\u201d or \u201cstep length\u201d) and c is the cost to be minimized that is associated with a vector chosen at random from among the input vectors 2", "startOffset": 74, "endOffset": 77}, {"referenceID": 6, "context": "As elaborated by [7], usually we combine stochastic gradient descent with backpropagation to update the entries of x associated with the chosen input, which requires propagating the gradient \u2202c/\u2202x back into the network generating the feature activations that are the entries of x for the chosen input sample.", "startOffset": 17, "endOffset": 20}, {"referenceID": 1, "context": "(7) As reviewed by [2], the cost associated with classification via multinomial logistic regression is r = ln ( m \u2211 `=1 exp(y) ) \u2212 y, (8) where j is the index among 1, 2, .", "startOffset": 19, "endOffset": 22}, {"referenceID": 6, "context": "Following [7], the architectures for generating the feature activations are convolutional networks (convnets) consisting of series of stages, with each stage feeding its output into the next (except for the last, which feeds into the classification stage).", "startOffset": 10, "endOffset": 13}, {"referenceID": 4, "context": "We consider three data sets whose training properties are reasonably straightforward to investigate, with each set consisting of k = 10 classes of images; the first two are the usual CIFAR-10 and MNIST of [5] and [7].", "startOffset": 205, "endOffset": 208}, {"referenceID": 6, "context": "We consider three data sets whose training properties are reasonably straightforward to investigate, with each set consisting of k = 10 classes of images; the first two are the usual CIFAR-10 and MNIST of [5] and [7].", "startOffset": 213, "endOffset": 216}, {"referenceID": 9, "context": "The third is a subset of the 2012 ImageNet data set of [10], retaining 10 classes of images, representing each class by 100 samples in a training set and 50 per class in a testing set.", "startOffset": 55, "endOffset": 59}, {"referenceID": 6, "context": "As recommended by [7], we learn via (minibatched) stochastic gradient descent, with 100 samples per minibatch; rather than updating the parameters being learned for randomly selected individual images from the training set exactly as in Section 3, we instead randomly permute the training set and partition this permuted set of images into subsets of 100, updating the parameters simultaneously for all 100 images constituting each of the subsets (known as \u201cminibatches\u201d), processing the series of minibatches in series.", "startOffset": 18, "endOffset": 21}, {"referenceID": 7, "context": "A Calculation of the update in (4) In these appendices, we leverage matrix Calculus as elaborated by [8].", "startOffset": 101, "endOffset": 104}, {"referenceID": 7, "context": "B Proof of the bound in (6) In these appendices, we leverage matrix Calculus as elaborated by [8].", "startOffset": 94, "endOffset": 97}], "year": 2017, "abstractText": "The conventional classification schemes \u2014 notably multinomial logistic regression \u2014 used in conjunction with convolutional networks (convnets) are classical in statistics, designed without consideration for the usual coupling with convnets, stochastic gradient descent, and backpropagation. In the specific application to supervised learning for convnets, a simple scale-invariant classification stage turns out to be more robust than multinomial logistic regression, appears to result in slightly lower errors on several standard test sets, has similar computational costs, and features precise control over the actual rate of learning. \u201cScale-invariant\u201d means that multiplying the input values by any nonzero scalar leaves the output unchanged.", "creator": "LaTeX with hyperref package"}}}