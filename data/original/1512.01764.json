{"id": "1512.01764", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Dec-2015", "title": "Fast Algorithms for Game-Theoretic Centrality Measures", "abstract": "In this dissertation, we analyze the computational properties of game-theoretic centrality measures. The key idea behind game-theoretic approach to network analysis is to treat nodes as players in a cooperative game, where the value of each coalition of nodes is determined by certain graph properties. Next, the centrality of any individual node is determined by a chosen game-theoretic solution concept (notably, the Shapley value) in the same way as the payoff of a player in a cooperative game. On one hand, the advantage of game-theoretic centrality measures is that nodes are ranked not only according to their individual roles but also according to how they contribute to the role played by all possible subsets of nodes. On the other hand, the disadvantage is that the game-theoretic solution concepts are typically computationally challenging. The main contribution of this dissertation is that we show that a wide variety of game-theoretic solution concepts on networks can be computed in polynomial time. Our focus is on centralities based on the Shapley value and its various extensions, such as the Semivalues and Coalitional Semivalues. Furthermore, we prove #P-hardness of computing the Shapley value in connectivity games and propose an algorithm to compute it. Finally, we analyse computational properties of generalized version of cooperative games in which order of player matters. We propose a new representation for such games, called generalized marginal contribution networks, that allows for polynomial computation in the size of the representation of two dedicated extensions of the Shapley value to this class of games.", "histories": [["v1", "Sun, 6 Dec 2015 09:56:48 GMT  (210kb,D)", "http://arxiv.org/abs/1512.01764v1", "Doctoral Dissertation at Warsaw University of Technology, Faculty of Electronics and Information Technology"]], "COMMENTS": "Doctoral Dissertation at Warsaw University of Technology, Faculty of Electronics and Information Technology", "reviews": [], "SUBJECTS": "cs.GT cs.AI cs.SI", "authors": ["piotr lech szczepa\\'nski"], "accepted": false, "id": "1512.01764"}, "pdf": {"name": "1512.01764.pdf", "metadata": {"source": "CRF", "title": "WARSAW UNIVERSITY OF TECHNOLOGY Faculty of Electronics and Information Technology", "authors": ["DOCTORAL DISSERTATION", "mgr Piotr Szczepa\u0144ski"], "emails": [], "sections": [{"heading": null, "text": "WARSAW UNIVERSITY OF\nTECHNOLOGY\nFaculty of Electronics and Information Technology\nDOCTORAL DISSERTATION mgr Piotr Szczepan\u0301ski\nFast Algorithms for Game-Theoretic Centrality Measures\nSupervisor Prof. Mieczys\u0142aw Muraszkiewicz\nSecondary Supervisor PhD. Tomasz Michalak\nWarsaw 2015\nar X\niv :1\n51 2.\n01 76\n4v 1\n[ cs\n.G T\n] 6\nD ec\n2 01\n5\nFor my wonderful wife, Paula.\nAbstract\nIn this dissertation, we analyze the computational properties of game-theoretic centrality measures. The key idea behind game-theoretic approach to network analysis is to treat nodes as players in a cooperative game, where the value of each coalition of nodes is determined by certain graph properties. Next, the centrality of any individual node is determined by a chosen game-theoretic solution concept (notably, the Shapley value) in the same way as the payoff of a player in a cooperative game. On one hand, the advantage of game-theoretic centrality measures is that nodes are ranked not only according to their individual roles but also according to how they contribute to the role played by all possible subsets of nodes. On the other hand, the disadvantage is that the game-theoretic solution concepts are typically computationally challenging. The main contribution of this dissertation is that we show that a wide variety of game-theoretic solution concepts on networks can be computed in polynomial time.\nOur focus is on centralities based on the Shapley value and its various extensions, such as the Semivalues and Coalitional Semivalues. Furthermore, we prove #P-hardness of computing the Shapley value in connectivity games and propose an algorithm to compute it. Finally, we analyse computational properties of generalized version of cooperative games in which order of player matters. We propose a new representation for such games, called generalized marginal contribution networks, that allows for polynomial computation in the size of the representation of two dedicated extensions of the Shapley value to this class of games.\nKeywords: the Shapley value, the Owen value, Semivalues, social networks, centrality measures\n5\nStreszczenie\nW niniejszej rozprawie autor porusza problem z\u0142oz\u0307onos\u0301ci obliczeniowej teoriogrowych centralnos\u0301ci. W teoriogrowym podejs\u0301ciu do analizy sieci traktujemy wierzcho\u0142ki jako graczy w koalicyjnej grze, w kt\u00f3rej wartos\u0301c\u0301 koalicji wierzcho\u0142k\u00f3w wynika ze struktury sieci. W takiej grze waz\u0307nos\u0301c\u0301 kaz\u0307dego wierzcho\u0142ka moz\u0307e byc\u0301 okres\u0301lona przez dowolne rozwia\u0328zanie gry koalicyjnej (w szczeg\u00f3lnos\u0301ci przez wartos\u0301c\u0301 Shapleya). Z jednej strony zaleta\u0328 takiego podejs\u0301cia do centralnos\u0301ci jest fakt, z\u0307e ranking wierzcho\u0142k\u00f3w wynika nie tylko z indywidualnej roli kaz\u0307dego wierzcho\u0142ka, lecz takz\u0307e z tego, ile dany wierzcho\u0142ek wnosi do roli kaz\u0307dego podzbioru wierzcho\u0142k\u00f3w w grafie. Jednakz\u0307e z drugiej strony liczenie rozwia\u0328zan\u0301 gier koalicyjnych jest bardzo trudne. G\u0142\u00f3wna\u0328 kontrybucja\u0328 tej rozprawy jest pokazanie, jak liczyc\u0301 w czasie wielomianowym teoriogrowe centralnos\u0301ci dla wielu r\u00f3z\u0307nych rozwia\u0328zan\u0301 gier koalicyjnych.\nW tej pracy autor skupia sie\u0328 na szybkim liczeniu teoriogrowych centralnos\u0301ci opartych na wartos\u0301ci Shapleya i jej r\u00f3z\u0307nych rozszerzen\u0301. W szczeg\u00f3lnos\u0301ci analizuje on obliczeniowe w\u0142asnos\u0301ci P\u00f3\u0142wartos\u0301ci, be\u0328da\u0328ce uog\u00f3lnieniem wartos\u0301ci Shapleya, i koalicyje P\u00f3\u0142wartos\u0301ci, be\u0328da\u0328ce uog\u00f3lnieniem wartos\u0301ci Owena. Dodaktowo, autor dowodzi #P-trudnos\u0301ci liczenia wartos\u0301ci Shapleya w grach sp\u00f3jnos\u0301ciowych i proponuje szybki algorytm radza\u0328cy sobie z tym problemem. Na zakon\u0301czenie, w pracy analizowane sa\u0328 uog\u00f3lnione gry koalicyjne, w kt\u00f3rych kolenos\u0301c\u0301 graczy wyznacza wartos\u0301c\u0301 koalicji. Autor proponuje nowa\u0328, zwie\u0328z\u0142a\u0328 reprezentacje\u0328 tych gier, kt\u00f3ra pozwala na obliczanie w czasie wielomianowym ze wzgle\u0328du na wielkos\u0301c\u0301 reprezentacji dw\u00f3ch dedytkowanych tym grom rozszerzen\u0301 wartos\u0301ci Shapley.\nS\u0142owa kluczowe: wartos\u0301c\u0301 Shapleya, wartos\u0301c\u0301 Owena, P\u00f3\u0142wartos\u0301ci, sieci spo\u0142ecznos\u0301ciowe, miary centralnos\u0301ci\n6\nContents\n1. Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n1.1. Publications and Author\u2019s Contribution . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n2. Preliminaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n2.1. Coalitional Games . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 2.2. The Shapley Value . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 2.3. Semivalues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 2.4. Marginal Contribution Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 2.5. Read-once Marginal Contribution Networks . . . . . . . . . . . . . . . . . . . . . . . . 25 2.6. Graph Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 2.7. Centrality Measures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 2.8. Community Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n3. Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n3.1. Centrality Measures and Their Classification . . . . . . . . . . . . . . . . . . . . . . . 30 3.2. Game-theoretic Apporach to Centrality Measures . . . . . . . . . . . . . . . . . . . . . 31 3.3. Computational Aspects of Coalitional Games \u2013 Representations . . . . . . . . . . . . . 33"}, {"heading": "4. Polynomial Algorithms for Game-theoretic Centrality Measures . . . . . . . . . . . . . . 36", "text": "4.1. Why Use Game-Theoretic Centrality Measures? . . . . . . . . . . . . . . . . . . . . . 37 4.2. General Definition of Game-Theoretic Network Centrality . . . . . . . . . . . . . . . . 39 4.3. The Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n4.3.1. Shapley Value-Based Degree Centrality . . . . . . . . . . . . . . . . . . . . . . 43 4.3.2. Shapley Value-Based k-influence Degree Centrality . . . . . . . . . . . . . . . 45 4.3.3. Shapley Value-Based dcutoff -distance Degree Centrality . . . . . . . . . . . . . 47 4.3.4. Shapley Value-Based Closeness Centrality . . . . . . . . . . . . . . . . . . . . 49 4.3.5. Shapley Value-Based Wcutoff -influence Degree Centrality . . . . . . . . . . . . 52\n4.4. Simulations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n4.4.1. Approximation Methods for the Shapley Value . . . . . . . . . . . . . . . . . . 54 4.4.2. Simulation Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 4.4.3. Data Used in Simulations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 4.4.4. Simulation Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n4.5. Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62"}, {"heading": "5. Efficient Algorithms for a Game-Theoretic Measure of Betweenness Centrality . . . . . . 65", "text": "7\n5.1. Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 5.2. The Overview of Computational Results . . . . . . . . . . . . . . . . . . . . . . . . . . 68 5.3. The New Centrality and Its Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\n5.3.1. Motivating Scenarios . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 5.3.2. The Shapley Value-based Betweenness Centrality . . . . . . . . . . . . . . . . 72 5.3.3. Semivalue-based Betweenness Centrality . . . . . . . . . . . . . . . . . . . . . 75 5.3.4. A Look at Marginal Contribution for the Shapley Value . . . . . . . . . . . . . 76 5.3.5. A Look at Marginal Contribution for the Semivalue . . . . . . . . . . . . . . . 79\n5.4. Algorithms to Compute the Shapley Value and Semivalue based Betweenness Centralities 81\n5.4.1. The Framework for Unweigthed Graphs . . . . . . . . . . . . . . . . . . . . . 82 5.4.2. The Algorithm for the Shapley Value-based Betweenness Centrality for\nUnweighted Graph . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n5.4.3. The Algorithm for the Semivalue-based Betweenness Centrality for\nUnweighted Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n5.4.4. The Framework for Weighted Graphs . . . . . . . . . . . . . . . . . . . . . . . 86 5.4.5. The Algorithm for Shapley Value-based Betweenness Centrality in Weighted\nGraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n5.4.6. The Algorithm for Semivalue-based Betweenness Centrality in Weighted Graphs 90\n5.5. Simulations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n5.5.1. Evaluating our Centrality Measure . . . . . . . . . . . . . . . . . . . . . . . . 91 5.5.2. Evaluating our Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\n5.6. Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99"}, {"heading": "6. A Centrality Measure for Networks With Community Structure Based on a", "text": "Generalization of the Owen Value . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\n6.1. Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101 6.2. Preliminaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n6.2.1. The Coalitional Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 6.2.2. The Owen Value . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\n6.3. The Coalitional Semivalue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104 6.4. The New Centrality Measure and Its Properties . . . . . . . . . . . . . . . . . . . . . . 105 6.5. Computational Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106\n6.5.1. Weighted Degree Centrality Measure . . . . . . . . . . . . . . . . . . . . . . . 107 6.5.2. The Marginal Contribution Analysis . . . . . . . . . . . . . . . . . . . . . . . 107 6.5.3. Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110\n6.6. Simulations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 6.7. Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\n7. Computational Analysis of a Connectivity Game on Networks . . . . . . . . . . . . . . . 114\n7.1. Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114 7.2. Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n8\n7.3. Connectivity Games for Terrorist Networks . . . . . . . . . . . . . . . . . . . . . . . . 117 7.4. Computational Analysis & Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . 119\n7.4.1. Complexity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119 7.4.2. Analysis of Marginal Contribitions . . . . . . . . . . . . . . . . . . . . . . . . 123 7.4.3. The Basic Algorithm for Connectivity Games . . . . . . . . . . . . . . . . . . 124 7.4.4. The Faster Algorithm for Connectivity Games . . . . . . . . . . . . . . . . . . 125 7.4.5. Approximation algorithm for connectivity games . . . . . . . . . . . . . . . . . 126\n7.5. Performance Evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129 7.6. Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n8. The Marginal Contribution Networks for Generalized Coalitional Games . . . . . . . . . 134\n8.1. Preliminaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\n8.1.1. The Generalized Coalitional Games . . . . . . . . . . . . . . . . . . . . . . . . 134 8.1.2. The Nowak and Radzik Value . . . . . . . . . . . . . . . . . . . . . . . . . . . 135 8.1.3. The S\u00e1nchez and Berganti\u00f1os Value . . . . . . . . . . . . . . . . . . . . . . . 136\n8.2. Representation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137\n8.2.1. Generalized Read-Once MC-Nets . . . . . . . . . . . . . . . . . . . . . . . . . 138 8.2.2. Computing the Nowak-Radzik Value with Generalized Read-Once MC-Nets . . 141 8.2.3. Computing the S\u00e1nchez-Berganti\u00f1os Value with Generalized Read-Once\nMC-Nets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\n8.3. Computing Generalized Game-Theoretic Betweenness Centrality . . . . . . . . . . . . 149 8.4. Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\n9. Summary and Potential Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\nAppendix A. Main Notation Used in the Dissertation . . . . . . . . . . . . . . . . . . . . . . 155\nAppendix B. The Recursive Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157\nBibliography . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159\n9"}, {"heading": "1. Introduction", "text": "The Shapley value is arguably the most well-known normative payoff division scheme (solution concept) in cooperative game theory [Shapley, 1953]. One of its interesting applications is to measure importance (or centrality) of nodes in networks. Unfortunately, although such game-theoretic approach to centrality is often more advantageous than the classical measures, the Shapley value as well as other, related solution concepts from cooperative game-theory are computationally challenging. In particular, they typically require to consider all marginal contributions that n players in the cooperative game could make to all 2n coalitions (subsets of players). Clearly, applying such a direct approach to compute game-theoretic solution concepts on networks would be prohibitive even for very small systems.\nThe main thesis of this dissertation is that it is possible to compute various measures based on game-theoretic solution concepts in polynomial time. This includes, among others, game-theoretic extensions of three most well-known classical centrality measures: degree, closeness and betweenness. Polynomial running time in our algorithms is achieved by probabilistic analysis of marginal contributions of players to coalitions and taking advantage of the network topology.\nNetworks underpin the number of real-life domains of our everyday live: from the quite obvious examples of computer networks, communications networks, or road networks to the more hidden networks like protein networks, internet network, or social networks. The studies of the structure of real-life networks were undertaken by many scientists resulting with a number of astonishing breakthroughs. Discovered and explained by Albert et al. [2000] the scale-free nature of many real-life networks were undoubtedly one of those. The other was done by Watts and Strogatz [1998] who proposed the model inspired by the network phenomenon of the Six Degrees of Separation. Another significant breakthrough was done much earlier by Freeman [1979] who provided the conceptual classification of centrality measures\u2014functions evaluating the importance of nodes in the network. More specifically, Freeman distinguished three basic concepts upon which various centrality measures are built: the distance between nodes (closeness centralities), the number of shortest paths between nodes (betweenness centralities), and direct connections to other nodes (degree centralities).\nDue to a wide variety of applications of centrality measures, analyzing and developing them is one of the major research topics in the network science. For instance, identifying key nodes in network can be used to study network vulnerability [Holme et al., 2002], to\n11\nbuild recommendation systems [Liu et al., 2013], to identify the focal hubs in a road network [Schultes and Sanders, 2007], to point the most critical functional entities in a protein network [Jeong et al., 2001], or to find the most influential people in a social network [Kempe et al., 2003].\nThe common feature of the standard centrality measures introduced by Freeman [1979] is that they assess the importance of a node by focusing only on the role that a node plays by itself. However, in many applications such an approach is inadequate due to existence synergies that may occur if the functioning of nodes is considered in groups.1 In order to capture such synergies Everett and Borgatti [1999] introduced the concept of group centrality. Its idea is broadly the same as the one of standard centrality, but now the focus is on the functioning of a given group of nodes, rather than individual nodes. In particular, Everett and Borgatti [1999] extended three Freeman\u2019s measures to group degree centrality, group closeness centrality, and group betweenness centrality.\nHowever, while the concept of group centrality addresses the issue of quantifying synergy among nodes in a particular group, there is still another fundamental problem to be solved. In particular, it is unclear how to rank individual nodes given an exponential number of potential groups of nodes they may belong to. In other words, we need to answer the question: how to rank individual nodes based on their group centralities? Here, the coalitional game theory comes into play.\nIn particular, the coalitional (or cooperative) game theory is a part of game theory in which individual players are allowed to form coalitions with an aim to increase their profits. Now, assuming that players have all decided to cooperate (i.e. to form the grand coalition), one of the fundamental problems in coalitional game theory is how to divide the payoff achieved by cooperation? The most popular answer to this question was offered by L.S. Shapley [Shapley, 1953]\u2014the 2012 Noble Prize Laureate\u2014who proposed to consider marginal contributions of players to all coalitions they could potential belong to. He proved that there exists the unique payoff division scheme, now called the Shapley value, that satisfies the following four fairness axioms: Efficiency\u2014the whole available payoff is distributed among players; the Null Player\u2014the player that cannot contribute anything should receive zero; Symmetry\u2014two players whose contributions to any coalition are always the same should be given the same payoff; and Additivity\u2014the payoff division scheme should be additive.\nThe alternative axiomatizations of the Shapley value have been studied by numerous authors in the literature. Unfortunately, while this value has many interesting properties, computing the Sahpley value is often #P-complete [Deng and Papadimitriou, 1994]. This obstacle will be overcome in this thesis in the context of game-theoretic centrality.\n1 Intuitively, synergy can be fought of as a value added from group performance. Note that synergy can be also negative and, in such a case, it is called antergy. For an overview of various concepts of synergy see the work by Rahwan et al. [2014].\n12\nNow we have all necessary tools to introduce game-theoretic centrality measures. In a nutshell, the idea behind them is to treat nodes as players in a coalitional game, where the value of each coalition of nodes is determined by a group centrality. In such settings, the value of each individual node can be determined by cooperative game solution such as the Shapley value. In other words, in order to provide the ranking of individual nodes that accounts for group centrality measure, we use the Shapley value that evaluates (fairly in a certain sense) marginal contributions of each node to all groups it could potentially belong to. The key advantage of such an approach is that nodes are ranked not only according to their individual roles in the network but also according to how they contribute to the role played by all possible subsets of nodes.\nUnfortunately, as already mentioned, potential downside of game-theoretic solution concepts is that they are, in general, computationally challenging. However, in this dissertation, we show that this is not always true in the network context, i.e., we are able to compute the Shapley value and the related solution concepts in polynomial time for various centrality-related games on networks.\nOur contributions in this dissertation can be summarized as follows. Firstly, we compute on networks in polynomial time the Semivalues [Dubey et al., 1981] which are the generalization of the Shapley value and offer more flexibility to define any particular game-theoretic network centrality. Secondly, we propose polynomial-time algorithm on networks for the Owen value [Owen, 1977] that is the most important solution concept to games with coalitional structure, and the Coalitional Semivalue our extension of the Owen value. Finally, we propose the new representation of generalized coalitional games, the games in which the permutations of players are considered. Our representation allows to compute Nowak-Radzik value [Nowak and Radzik, 1994] and S\u00e1nchez-Berganti\u00f1os value [S\u00e1nchez and Berganti\u00f1os, 1999]. The polynomial time algorithms for the last two values are still unknown, but we propose algorithms that significantly reduce computational complexity of the problem. We also show how to use our representation on networks."}, {"heading": "1.1. Publications and Author\u2019s Contribution", "text": "The results covered by this thesis were published in four international journals and presented on the four top conferences from Artificial Intelligence. Additionally, they gathered attention of scientific community what resulted in the number of citations.\n\u2014 Chapter 4 is mostly based on the work Efficient Computation of the Shapley Value\nfor Game-theoretic Network Centrality published in Journal of Artificial Intelligence Research (JAIR) [Michalak, Aaditha, Szczepan\u0301ski, Ravindran, and Jennings, 2013a]. The main two contributions presented in this chapter are: developing efficient algorithms\n13\nfor computing Shapley value-based degree and closeness centralities (together with their various extensions), and providing theoretical, as well as experimental analysis of the introduced algorithms. The contribution of the author of this dissertation mostly covers the experimental part of this article. More specifically, Algorithms 1-5 were developed by Karthik Aaditha, and partianlly formalized by the author of this thesis. More specifically, Propositions 4.1 and 2 and proof of correctness for Algorithms 1 and 3 are the contribution of the author. Additionally, Algorithms 6-10 (for the Monte Carlo sampling of the game theoretic-centrality measures) were developed by the author of this dissertation. \u2014 Chapter 5 is based on two publications: A New Approach to Betweenness Centrality Based\non the Shapley Value [Szczepan\u0301ski, Michalak, and Rahwan, 2012] published in Proceedings of the 11th International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2012) and Efficient Algorithms for Game-Theoretic Betweenness Centrality published in Artificial Intelligence Journal (AI) [Szczepan\u0301ski, Michalak, and Rahwan, 2016]. All the technical content, i.e., algorithms, experiments and theorems are exclusive contributions of the author of this thesis. \u2014 Chapter 6 is based on two publications: A Centrality Measure for Networks With Community\nStructure Based on a Generalization of the Owen Value [Szczepan\u0301ski, Michalak, and Wooldridge, 2014] published in Proceedings of the 21st European Conference on Artificial Intelligence (ECAI 2014) and A New Approach to Measure Social Capital using Game-Theoretic Techniques [Michalak, Moretti, Namarayan, Skibski, Szczepan\u0301ski, Rahwan, and Wooldridge, 2015b] published in ACM SIGecom Exchanges. All algorithms, experiments and theorems were developed by the author of this thesis. \u2014 Chapter 7 is based on the publication Computational Analysis of Connectivity Games\nwith Application to Investigation of Terrorist Networks [Michalak, Rahwan, Szczepan\u0301ski, Skibski, Narayanam, Wooldridge, and Jennings, 2013b] published in Proceedings of the 23rd International Joint Conference on Artificial Intelligence (IJCAI 2013). The contribution presented in this chapter is threefold, it formally proves that computing the Shapley value in connectivity games in NP-hard, it develops faster exact algorithm for connectivity games, and it develops one approximation algorithm for these family of games. The complexity proof consists of two theorems: Theorem 4 developed by the author with help of Colin McQuillan and Theorem 5, which was developed exclusively by the author of this dissertation. Algorithm 20 is a joint work done by the author, Tomasz Michalak and Talal Rahwan, and finally Algorithm 21 was developed by the author together with Oskar Skibski. \u2014 The final Chapter 8 is based on the second part of the publication Implementation\nand Computation of a Value for Generalized Characteristic Function Games [Michalak, Szczepan\u0301ski, Rahwan, Chrobak, Br\u00e2nzei, Wooldridge, and Jennings, 2014] published\n14\nin journal ACM Transactions on Economics and Computation (ACM TEAC). The technical content in the whole chapter is an exclusive contribution of the author.\nSome parts of the above chapters and additionally Chapter 2 (including definitions and formalization) are also based on the article Efficient Computation of Semivalues for Game-Theoretic Network Centrality [Szczepan\u0301ski, Tarkowski, Michalak, Harrenstein, and Wooldridge, 2015b] published in Proceedings of the 29th AAAI Conference on Artificial Intelligence (AAAI 2015)."}, {"heading": "2. Preliminaries", "text": "In this chapter we present the basic notation and definitions from both graph theory and game theory that will be used throughout the thesis.\nFirstly, we introduce coalitional games (also known as cooperative games), where we focus on the key solution concepts and their computational aspects. In particular, we define the Shapley value\u2014the most popular normative solution concept to cooperative games. We also introduce a parametrized generalization to the Shapley value called the Semivalue. Since the standard model (or representation) of cooperative games, i.e. the characteristic function, is computationally challenging, we discuss an alternative representation, called the Marginal Contribution Networks. For certain games, this representation allows for computing the Shapley value in polynomial time in the number of agents.\nSecondly, we define the basic notation of a graph and introduce elementary concepts related\nto social network analysis such as: centralities and communities."}, {"heading": "2.1. Coalitional Games", "text": "Game Theory consists of two broad areas: non-cooperative (or strategic) games and cooperative (or coalitional) games. The first class of games is one in which players make decisions independently. In the second class, groups of players, called coalitions, are allowed to form profitable coalitions [Osborne and Rubinstein, 1994].\nDefinition 1 (Coalitional game). A coalitional game consists of a set of players (or agents) A \u201c ta1, a2, . . . , a|A|u, and the characteristic function \u03bd : 2A \u00d1 R, which assigns to each coalition of playersC \u010e A a real value (or payoff) indicating its performance, where \u03bdpHq \u201c 0. Thus, the coalitional game g in the characteristic function form is a pair g \u201c pA, \u03bdq.\nIn such defined game the number of all coalitions equals 2|A|\u2014the number of all subsets of A. The set of all coalitional games will be denoted by V , so we can write pA, \u03bdq P V , or sometimes we simplify notation and write \u03bd P V . The coalition of all players A is called grand coalition.\nExample 1. Let us consider the game where players collect cards with famous rock stars. Each card has its own value, which could be doubled if only player possesses all cards from the set.\n16\nThe game consists of two sets of cards K \u201c tk1, k2u M \u201c tm1,m2,m3u, and four players A \u201c ta1, a2, a3, a4u who have the following cards:\na1 \u00d0\u00d1 k1,m3 a2 \u00d0\u00d1 k2 a3 \u00d0\u00d1 m1 a4 \u00d0\u00d1 m2,m3\nAssuming that each card has individually value 1 the characteristic function describing this game g1 \u201c pA, \u03bd1q is:\n\u03bd1pHq \u201c 0 \u03bd1pta1uq \u201c \u03bd1pta2uq \u201c \u03bd1pta3uq \u201c \u03bd1pta4uq \u201c 1\n\u03bd1pta2, a3uq \u201c 2 \u03bd1pta1, a3uq \u201c \u03bd1pta2, a4uq \u201c 3\n\u03bd1pta1, a4uq \u201c 4 \u03bd1pta1, a2uq \u201c 5\n\u03bd1pta3, a4uq \u201c \u03bd1pta1, a2, a3uq \u201c 6 \u03bd1pta2, a3, a4uq \u201c \u03bd1pta1, a2, a4uq \u201c 7\n\u03bd1pta1, a3, a4uq \u201c 8 \u03bd1pAq \u201c 11\nPlayer a3 has one card m1, so individually its value is \u03bd1pta3uq \u201c 1. The player a4 has two cards from the same set m2,m3 and playing alone he can receive \u03bd1pta4uq \u201c 2. Now, if these two players cooperate, they will have all cards from the same set, what makes them more valuable. Playing together they will receive \u03bd1pta3, a4uq \u201c 6, so they have a big incentive to cooperate.\nForm the above example we see that the assumption \u03bd1pHq \u201c 0 is natural, because the empty coalition without players cannot obtain any profits. Additionally, the characteristic function in this example incites players to collaborate, because joining new members to coalition can only improve its performance. This property of characteristic function is called superadditivity and may cause the forming of the grand coalition.\nDefinition 2 (Superadditivity). The characteristic function in the game pA, vq is superadditive if only the following expression holds:\n@ C1,C2\u010eA C1XC2\u201cH vpC1 Y C2q \u011b vpC1q ` vpC2q\nThe property strongly connected to superadditivity is called monotonicity.\n17\nDefinition 3 (Monotonicity). The characteristic function in the game pA, vq jest monotonic if only the following expression holds:\n@ C1\u010eC2\u010eA vpC2q \u011b vpC1q\nCaulier [2009] showed that for the games with non-negative characteristic function the superadditivity implies monotonicity. However, in general the implication in neither direction holds.\nWhen the game is superadditive, or monotonic the grand coalition, i.e., the coalition of all the players in the game, has the highest value and, therefore, is formed. One of the fundamental questions in cooperative game theory is then how to divide the payoff of the grand coalition (\u03bdpAq) among the players and the most popular normative solution to that problem is the Shapley value."}, {"heading": "2.2. The Shapley Value", "text": "In principle, there may be an infinite number of divisions of the value of grand coalition among players, however, we are interested in those that meet certain desirable criteria. In order to present these criteria we introduce the notion of marginal contribution.\nDefinition 4 (Marginal contribution). The marginal contribution of player ai P A to the coalition C \u010e Aztaiu is:\nMCpC, aiq \u201c \u03bdpC Y taiuq \u00b4 \u03bdpCq (2.1)\nNow, let us consider four fairness properties that a given division scheme should meet. We denote by \u03c6ipA, \u03bdq the payoff received by a player ai in game pA, \u03bdq.\nSymmetry payoffs do not depend on the players\u2019 names. That is, \u03c6pA, \u03c0p\u03bdqq \u201c \u03c0p\u03c6qpA, vq for every game \u03bd and permutation \u03c0 P \u03a0pAq.\nNull Player players that make no contribution should receive nothing. In other words, ` @C \u010e A,MCpC, aiq \u201c 0 \u02d8 \u00f1 ` \u03c6ipA, \u03bdq \u201c 0 \u02d8 .\nEfficiency the entire payoff of each coalition should be distributed among its members. That is, \u0159\naiPA \u03c6ipAq \u201c \u03bdpAq.\nAdditivity given three games, g1 \u201c pA, \u03bd1q, g2 \u201c pA, \u03bd2q and g3 \u201c pA, \u03bd3q, where \u03bd1pCq \u201c \u03bd2pCq ` \u03bd3pCq for all C \u010e A, the payoff of a player in g1 should be the sum of his payoff in g2 and in g3.\n18\nThe Symmetry property implies that two players that contribute the same value to all coalitions should be given the same payoff. More formally:\n` @C\u010eAztai,aju,MCpC, aiq \u201c MCpC, ajq \u02d8 \u00f1 ` \u03c6ipA, \u03bdq \u201c \u03c6jpA, \u03bdq \u02d8\n(2.2)\nThe Efficiency property assures that the whole available payoff is distributed among players. The Null Player property indicates that player that can not contribute anything should receive value 0. The Additivity property says that if players anticipate in two separate games then their importance in the game consisting of these two games, is the sum of the importance in these two subgames. Interestingly, there exist only one division scheme that satisfies the above four criteria\u2014Shapley value.\nExample 2. Let us consider the coalitional game g2 \u201c pA, vq, in which three players A \u201c ta1, a2, a3u collect apples from trees. Each player posses a stand allowing him to collect apples from the top of the trees. Additionally, on two stands of the same height it is possible to put third stand. Now, let us introduce the function s : A \u00d1 N evaluating the high of each stand that a given player have:\nspaiq \u201c\n$ \u2019 \u2019 &\n\u2019 \u2019 % 20 if i \u201c 1 40 if i \u201c 2 20 if i \u201c 3\nThe characteristic function \u03bd2 in this game is defined as follows:\n\u03bd2pCq \u201c\n$ \u2019 \u2019 &\n\u2019 \u2019 % 0 if C \u201c H 60 \u02da 10 if C \u201c A max aiPC tspaiqu \u02da 10 otherwise.\nThe players a1 and a3 contributes the same value to each coalition, so based on the Symmetry property they should have the same payoff. We also know that the Efficiency property implies that the whole gain 600 should be distributed among all players. Based on these two information we obtain two equations: \u03c61 \u201c \u03c62 \u03c61 ` \u03c62 \u201c \u03c63 \u201c 600\nAt this point we haven\u2019t enough information to solve the above equation. In order to do it, we need to use Additivity and Null Player properties.\nThe solution of the above game should satisfy the four fairness properties. To this end, Shapley [1953] proposed to evaluate the role of each player in the game proportionally to a weighted average marginal contribution of this player to all possible coalitions. Formally:\n19\nDefinition 5 (Shapley value). In a coalitional game pA, \u03bdq the Shapley value for a player ai is given by:\n\u03c6SVi pA, \u03bdq \u201c \u00ff\nC\u010eAztaiu\n|C|!p|A| \u00b4 |C| \u00b4 1q! A! pvpC Y taiuq \u00b4 vpCqq (2.3)\nImportantly, the Noble prize winner L. S. Shapley [Shapley, 1953] showed that the vector \u03c6SV is the only solution concept satisfying properties p1q \u00b4 p4q. Furthermore, if the characteristic function is superadditive than Shapley value satisfies one additional property:\nIndividual Rationality: \u00ff\naiPA \u03c6SVi p\u03bdq \u011b \u03bdptaiuq\nIndividual Rationality indicates that each player has no incentive to play alone. If he do so, he will receive the payoff no greater than the payoff obtained during his collaboration with others.\nThe set of all players A will be sometimes considered as a ordered list (|A|-tuple) A \u201c pa1, a2, . . . , a|A|q in order to use the notion of the permutation of all players \u03c0 P \u03a0pAq.\nThe important fact about the Shapley value is that for a given player ai P A in the game pA, \u03bdq it is the expected marginal contribution of this player to the set of players P\u03c0paiq that precede ai in a random permutation \u03c0 P \u03a0pAq of all players in the game.\nDefinition 6 (Shapley value as an expected value). In a coalitional game pA, \u03bdq the Shapley value for a player ai is given by:\n\u03c6SVi pA, \u03bdq \u201c ErMCpP\u03c0paiq, aiqs \u201c 1 |A|! \u00ff\n\u03c0P\u03a0pAq\nMCpP\u03c0paiq, aiq (2.4)\nThe equivalence between Definition 5 and Definition 6 can be easily derived by using a simple combinatorial fact: the number of permutations ofA in which the set of players occurring before i-th player equals P\u03c0paiq is exactly |P\u03c0paiq|!p|A| \u00b4 1\u00b4 |P\u03c0paiq|q!.\n\u03c6SVi pvq \u201c 1|A|! \u00b4 MCpP\u03c01paiq, aiq `MCpP\u03c02paiq, aiq ` . . .`MCpP\u03c0n!paiq, aiq \u00af\n\u201c 1|A|! \u00b4\np|H|!qp|A|\u00b41q! hkkkkkkkkkkkkkkkkkkkikkkkkkkkkkkkkkkkkkkj pMCpH, aiq ` . . .`MCpH, aiqq` . . .` |C|!p|A|\u00b41\u00b4|C|q! hkkkkkkkkkkkkkkkkkkikkkkkkkkkkkkkkkkkkj pMCpC, aiq ` . . .`MCpC, aiqq` . . .\n. . .` p|A|\u00b41q!p|A|\u00b41\u00b4p|A|\u00b41qq! hkkkkkkkkkkkkkkkkkkkkkkkkkkikkkkkkkkkkkkkkkkkkkkkkkkkkj pMCpAztaiu, aiq ` . . .`MCpAztaiu, aiqq \u00af\n\u201c 1|A|! \u00b4 p|A| \u00b4 1q!pMCpH, aiqq ` . . .` |C|!p|A| \u00b4 1\u00b4 |C|q!pMCpC, aiqq ` . . .\n. . .` p|A| \u00b4 1q!pMCpAztaiu, aiqq \u00af\n\u201c 1|A|! \u00ff\nC\u010eAztaiu\n|C|!p|A| \u00b4 |C| \u00b4 1q! MCpC, aiq\n20\nUsing the Definition 6 we can compute the Shapley value for the game in Example 2.\nExample 3. We will consider all permutations of the set A from the game g2 defined in Example 2. For each permutation we will compute the marginal contribution of the agent a2 to the set P\u03c0pa2q.\na1, a2, a3 MCpta1u, a2q \u201c \u03bd2pta1, a2uq \u00b4 \u03bd2pta1uq \u201c 200 a1, a3, a2 MCpta1, a3u, a2q \u201c 400 a2, a1, a3 MCpH, a2q \u201c 400 a2, a3, a1 MCpH, a2q \u201c 400 a3, a1, a2 MCpta1, a3u, a2q \u201c 400 a3, a2, a1 MCpta3u, a2q \u201c 200\nThus, for the game g2 we have:\n\u03c6SV2 \u201c 200`400`400`400`400`2006! \u201c 333 1 3 \u03c6SV1 \u201c 13313 \u03c6SV3 \u201c 13313\nGenerally, using equation (2.3) computing Shapley value requires iterating through 2|A| subsets of A, and using equation (2.4) requires iterating through all |A|! permutations of A. Furthermore, computing the Shapley value has been shown to be NP-Hard (or even worse, #P-Complete) for many specific classes of games [Deng and Papadimitriou, 1994, Nagamochi et al., 1997].\nTherefore, many new succinctly representations were proposed in the literature. The most\npopular we introduce in Section 2.4 and Section 2.5."}, {"heading": "2.3. Semivalues", "text": "The Shapley value is designed to divide payoff, which is equivalent to evaluating the power of agents in cooperative game. However, if we focus only on the power index of players, we can drop the Efficiency axiom. Semivalues introduced by Dubey et al. [1981] represent an important class of power indexes, among which only Shapley value satisfies Efficiency. To define Semivalues, we will use the notion of marginal contribution of the player i to the coalition C introduced in Definition 4. Let \u03b2 : t0, 1, . . . , |A| \u00b4 1u \u00d1 r0, 1s be a function such that\n\u0159|N |\u00b41 k\u201c0 \u03b2pkq \u201c 1. Intuitively, when we calculate the expected marginal contribution of a\nnode, \u03b2pkq will be the probability that a coalition of size k is chosen for this node to join. This is why \u03b2pkq is defined on values ranging from 0 to |N |\u00b41. Note that the function \u03b2 is a discrete\n21\nprobability distribution. Since a player ai cannot join a coalition that it is already in, we only need to look at coalitions not containing ai.\nDefinition 7 (Semivalue). Given \u03b2 and a coalitional game pA, \u03bdq the Semivalue for a player ai is given by:\n\u03c6SEMIi pA, \u03bdq \u201c \u00ff\n0\u010fk\u0103|V |\n\u03b2pkqECkrMCpCk, iqs, (2.5)\nwhere Ck is the random variable of all possible coalitions of size k drawn with uniform probability form the set Aztaiu, and ECkr\u00a8s is the expected value operator for the random variable Ck.\nThe Shapley value (Definition 5) and the Banzhaf index of power [Banzhaf, 1965] are two prominent and well-known examples of Semivalues. They are defined by \u03b2-functions \u03b2Shapley and \u03b2Banzhaf , respectively:\n\u03b2Shapleypkq \u201c 1|A| and \u03b2 Banzhaf pkq \u201c\n`|A|\u00b41 k \u02d8\n2|A|\u00b41 .\nAll Semivalues satisfy Symmetry, Null player and Additivity axioms and except for the Shapley value, all these solutions violate the Efficiency axiom, which makes them of limited use as fair cost sharing values. However, they are widely used as indicators of power in cooperative games [Monderer and Samet, 2002]."}, {"heading": "2.4. Marginal Contribution Networks", "text": "The size of the representation of coalitional games in the characteristic function form is exponential in the number of agents and consequently computing Shapley value for such games is generally hard. In order to overcome this limitation the researchers look for for more concise representations. One of the most interesting and very intuitive techniques for representing coalitional games was introduced by Ieong and Shoham [2005]. The authors proposed marginal contribution nets (MC-Nets). This representation has a number of desirable properties: it is fully expressive, concise for many characteristic function games of interest, and facilitates a very efficient technique for computing the Shapley value. More specifically, in such representation we can compute the Shapley value in the linear time in respect to the size of a representation.\nLet us introduce the syntax of Boolean formulas:\nA :\u201c ai | ai i P t1 . . . nu, F :\u201c pFq | F ^ F | F _ F | F \u2018 F | A ,\n22\nwhere each literal ai represents the agent in the game. In other words, this formula is a binary rooted tree with positive or negative literals on leafs and internal nodes labeled with one of the following logical connectives: conjunction (^), disjunction (_) and exclusive disjunction (\u2018).\nDefinition 8 (General Marginal Contribution Network). The coalitional game in the form of General Marginal Contribution Network is a pair pA,Rq, where A is a set of players, and R is the set of rules. Rules are of the form of F \u00d1 V , where F is a Boolean formula.\nIeong and Shoham [2005] obtained positive computational results for Marginal Contribution\nNetwork, where literals are connected only by conjunction (^).\nDefinition 9 (Marginal Contribution Network). The coalitional game in the form of Marginal Contribution Network is a pair pA,R\u02daq, where A is a set of players, and R\u02da is the set of rules. Rules are of the form of F\u02da \u00d1 V , where F\u02da is a conjunction of positive or negative literals.\nA coalition C is said to meet a given formula F\u02da if and only if F\u02da evaluates to true when the values of all Boolean variables that correspond to players in C are set to true, and the values of all Boolean variables that correspond to players not in C are set to false. We write C |\u00f9 F\u02da to mean that C meets F\u02da. More formally:"}, {"heading": "C |\u00f9 F\u02da \u00f0\u00f1 @aiPF\u02daai P C and @ aiPF\u02daai R C", "text": "In MC-Nets, if coalition C does not meet any rule then its value is 0. Otherwise, the value of C is the sum of every V from the rules of which the F\u02da are met by C. More formally:\nvpCq \u201c \u00ff\nR\u02daQpF\u02da\u00d1V q\u00d1V : C|\u00f9F\u02da V .\nIeong and Shoham showed that, given an MC-Net representation in which rules are made only of conjunctions of positive and/or negative literals, the Shapley value can be computed in time linear in the number of rules. Taking advantage of the additivity property of the Shapley value, every basic rule can be considered separately as a game on its own. Thus, we need to compute the Shapley value for a single rule, and based on this we will be able to compute the Shapley value for the entire game.\nTheorem 1. [Ieong and Shoham, 2005] In coalitional game pA,R\u02daq in which R\u02da consists of a single rule F\u02da \u00d1 V , where p is the number of positive literals and n is the number of negative ones, the Shapley value for the player ai P F\u02da is:\n\u03c6SVi \u201c V\np ` p`n n\n\u02d8 ,\n23\nand for a player aj P N the Shapley value is:\n\u03c6SVj \u201c \u00b4V n `\np`n p\n\u02d8 .\nProof. From the Symmetry axiom we know that all players ai P F\u02da have the same Shapley value, because they are indistinguishable. This observation also applies to all players aj P F\u02da. In this proof we will use Definition 6. We want to count the number of permutations such that for the given player ai P F\u02da the MCpP\u03c0paiq, aiqq \u2030 0. To satisfy this condition all players corresponding to positive literals from F\u02da must appear before ai and all players corresponding to negative literals from F\u02da after him. Now, we will construct such permutations:\n\u2014 Let us choose p ` n positions in the sequence of all elements from A. We can do this in ` |A| p`n \u02d8 ways. \u2014 Than, in the first p chosen positions place all players corresponding to positive literals and in\nthe last n place all players corresponding to negative literals . The number of such line-ups\nis pp\u00b4 1q!n!. \u2014 The remaining players can be arranged in p|A| \u00b4 pp` nqq! ways.\nThus, we have:\n\u03c6SVi \u201c 1|A|! \u0159 \u03c0P\u03a0pAq MCpP\u03c0paiq, aiq \u201c 1|A|! ` |A| p`n \u02d8\npp\u00b4 1q!n!p|A| \u00b4 pp` nqq!V \u201c pp\u00b41q!n!pp`nq! V \u201c V\nppp`nn q\nThe proof for aj P N is analogous.\nNow, let us consider the game g2 from Example 2 and transform its representation from characteristic function form to Marginal Contribution Nets. Next, we will compute the Shapley value based on the above theorem.\nExample 4. Firstly, we define the set of rules R\u02da that corresponds to the characteristic function \u03bd2 form the game g2.\nr1 : a2 \u00d1 400 r2 : a1 ^ a2 \u00d1 200 r3 : a3 ^ a1 ^ a2 \u00d1 200 r4 : a1 ^ a2 ^ a3 \u00d1 200\nSecondly, in order to compute \u03bd2pta1, a2, a3uq we need to iterate through all rules that this coalition meets. We see that ta1, a2, a3u |\u00f9 a2 and ta1, a2, a3u |\u00f9 a1 ^ a2 ^ a3, so\n24\n\u03bd2pta1, a2, a3uq \u201c 400 ` 200 \u201c 600. In the same manner we can compute the value of any other coalition. Now, let us consider the Shapley value vector for each game defined by a single rule.\nr1 : p0, 4001p11q , 0q \u201c p0, 400, 0q r2 : p 2001p21q , \u00b4200 1p21q , 0q \u201c p100,\u00b4100, 0q r3 : p\u00b42002p31q , \u00b4200 2p31q , 200 1p32q q \u201c p\u00b4331 3 ,\u00b4331 3 , 662 3 q r4 : p 2003p30q , 200 3p30q , 200 3p30q q \u201c p662 3 , 662 3 , 662 3 q\nWe sum up all vectors, and we obtain the final solution of this game:\n\u03c6SV1 \u201c 0` 100\u00b4 3313 ` 66 2 3 \u201c 1331 3 \u03c6SV2 \u201c 400\u00b4 100\u00b4 3313 ` 66 2 3 \u201c 3331 3 \u03c6SV3 \u201c 0` 0` 6623 ` 66 2 3 \u201c 1331 3\nTo conclude the above example, we have obtain the same results as in Example 2 but in order to compute the Shapley value for each player we have performed less operation than when iterating through all permutations. However, creating rules only with conjunctions is not an effective way for many games. Thus, in the next section we will introduce more effective representation of the coalitional games."}, {"heading": "2.5. Read-once Marginal Contribution Networks", "text": "Many coalitional games can be represented more succinct than with Marginal Contribution Networks (Definition 8). Elkind et al. 2009a defined a class of rules, called read-once MC-Net rules, which are considerably more succinct than basic rules, while enjoying similarly attractive computational properties. The syntax of read-once Boolean formulas is the same as in General Marginal Contribution Networks, but each literal ai can only appear once. In other words, this formula is also a binary rooted tree with positive or negative literals on leafs and internal nodes labeled with one of the following logical connectives: conjunction (^), disjunction (_) and exclusive disjunction (\u2018).\nDefinition 10 (Read-once Marginal Contribution Network). The coalitional game in the form of Read-once Marginal Contribution Network is a pair pA,Rq, whereA is a set of players, and R is the set of rules. Rules are of the form of F \u00d1 V , where F is read-once Boolean formulas.\nElkind et al. [2009a] proved that, in General Marginal Contribution Networks, where each literal can appear in a formula many times, the problem of computing the Shapley value is\n25\nintractable (i.e., NP-hard). However, for the read-once Boolean formulas the authors presented a polynomial-time algorithm to compute the Shapley value.\nIn Chapter 8 we extend the positive results obtained by Elkind et al. [2009a] to generalized\ncoalitional games."}, {"heading": "2.6. Graph Theory", "text": "The notion of a graph (or a network) will play a the key role in this dissertation. These mathematical entities models many real-life problems from different disciplines, such as biology, chemistry, or sociology [Barab\u00e1si, 2003].\nDefinition 11 (Graph). The simple graph G is a pair pV,Eq, where V \u201c tv1, v2, . . . v|V |u is the set of nodes (or vertices), and E \u201c te1, e2, . . . e|E|u is the set of edges (or links). Edges e \u201c pvi, vjq are a two-elements sets of nodes from V .\nIn the same manner, but with different definition of edge, we define the directed graph.\nDefinition 12 (Directed graph). The directed graph G is a pair pV,Eq, where V \u201c tv1, v2, . . . v|V |u is the set of node, and E \u201c te1, e2, . . . e|E|u is the set of edges. Edges e \u201c pvi, vjq are a two-elements ordered pairs of nodes from V .\nIn such graphs we say that an edge pvi, vjq is directed from the node vi to the node vj .\nDefinition 13 (Weighted graph). The weighted graph G \u201c pV,E, \u03bbq is a simple/directed graph, with a function \u03bbpv, uq : E \u00d1 R that evaluates each edge. The value \u03bbpeq is called the wight of an edge e.\nA path pst from node s to node t in a graph G is an ordered set pv0, v1, . . . , vnq such that v0 \u201c s and vn \u201c t and pvi, vi`1q P E for all i with 1 \u010f i \u0103 n. We define the set of neighbours of a node v and a subset C of nodes by Npviq \u201c tvj : pvi, vjq P Eu and NpCq \u201c \u0164\nviPC NpviqzC, respectively. We refer to the degree of a node v by degpvq \u201c |Npvq|, and the degree of a setC as degpCq \u201c |NpCq|. The distance from a node s to a node t is denoted by distps, tq and is defined as the size of the shortest path between s and t. The distance between a node v and a subset of nodes C \u010e V is denoted by distpC, vq \u201c minuPC distpu, vq.\nFor a further comprehensive introduction to graph theory the reader is kindly referred to the\nwork by Cormen 2001."}, {"heading": "2.7. Centrality Measures", "text": "One of the important aspects of research on networks is to determine which nodes and edges are more critical (or central) to the functioning of the entire network than others. For example,\n26\none may want to identify the focal hubs in a road network [Schultes and Sanders, 2007], the most critical functional entities in a protein network [Jeong et al., 2001], or the most influential people in a social network [Kempe et al., 2003]. To this end, various centrality metrics, such as degree, closeness, eigenvalue or betweenness, have been extensively studied in the literature.1\nDefinition 14 (Centrality). For a given graphG \u201c pV,Eq the classic (also standard) centrality is a function c : V \u00d1 R that for each node v P V it determines the importance of this node measured in real value.\nGenerally speaking, centrality analysis aims to create a consistent ranking of nodes within a network. To this end, centrality measures assign a score to each node that in some way corresponds to the importance of that node given a particular application. Since \u201cimportance\u201d depends on the context of the problem at hand, many different centrality measures have been developed. The three well-known and widely applied measures introduced by Freeman [1979] are: degree centrality, closeness centrality and betweenness centrality.\nDefinition 15 (Degree centrality). For a given graphG \u201c pV,Eq degree centrality is a function cd : V \u00d1 R:\ncdpvq \u201c degpvq\nwhere degpvq is a degree of the node v.\nThe intuition standing behind this measure is that it reflects the activity of a given node. This activity can be expressed as a number of friends in social portal, or number of articles published together with other peers in science collaboration network.\nDefinition 16 (Betweenness centrality). For a given graphG \u201c pV,Eq betweenness centrality is a function cb : V \u00d1 R:\ncbpvq \u201c \u00ff\ns\u2030v\u2030t\n\u03c3stpvq \u03c3st\nwhere \u03c3st is the number of shortest paths between s and t (if s \u201c t then \u03c3st \u201c 1), and \u03c3stpvq is the number of shortest paths between s and t passing through a node v (if v P ts, tu then \u03c3stpvq \u201c 0).2\nThis measure and its different variants is generally used to indicate the most important nodes in the process of controlling information flow. For instance it can be used to determine the most important routers in computer network.\nDefinition 17 (Closeness centrality). For a given graph G \u201c pV,Eq closeness centrality is a function cc : V \u00d1 R:\nccpvq \u201c \u00ff\ns\u2030v dps, vq\n1 Kosch\u00fctzki et al. [2005] presented an overview of the most important centrality metrics. 2 To deal with unconnected graphs it is assumed that 00 \u201c 0.\n27\nwhere distps, vq is a distance between nodes s and v.\nThis centrality has two aspects: one that evaluates the most important nodes in the process of discrimination of information, and one that evaluates the most independent nodes. For instance, if we want to construct an efficient network of communication in our company, the CEO should be in the middle of this structure that his orders would immediately hit the targets. On the other hand, the person with the lowest closeness centrality is the most independent person, because the information coming to him from others requires the smallest number of brokers. For unconnected networks this measure is sometimes presented as a sum of fractions: \u0159\ns\u2030v 1 dps,vq .\nIn the sample network in Figure 2.1, nodes v1 and v2 have degree 5 and, if judged by degree centrality, these are the most important nodes within the entire network (cdpv1q \u201c cdpv2q \u201c 5). Conversely, closeness centrality focuses on distances among nodes and gives high value to the nodes that are close to all other nodes. With this measure, node v8 in Figure 2.1 is ranked top with lowest value ccpv8q \u201c 22. The last measure\u2014betweenness centrality\u2014considers shortest paths (i.e., paths that use the minimal number of links) between any two nodes in the network. The more shortest paths the node belongs to, the more important it is. With this measure, cbpv2q \u201c 32 and the node v2 in Figure 2.1 is more important than all the other nodes (including v1 and v8, which are chosen by other measures as the most important node). Clearly, all these measures expose different characteristics of a node. Consider, for instance, an epidemiology application, where the aim is to identify those people (i.e., nodes) in the social network who have the biggest influence on the spread of the disease and should become a focal point of any prevention or emergency measures. Here, degree centrality ranks top nodes with the biggest immediate sphere of influence\u2014their infection would lead to the highest number of adjacent nodes being exposed to the disease. On the other hand, closeness centrality identifies those nodes whose infection would lead to the fastest spread of the disease throughout the society. Finally, betweenness centrality reveals the nodes that play a crucial role in passing the disease from one person in a network to another.\n28"}, {"heading": "2.8. Community Structures", "text": "Apart from centrality measures, the other important aspect of networks extensively studied in literature is their community structure. Intuitively, a community (also called a cluster) is a group of nodes in a network such that there are comparatively many edges among the nodes within the group and fewer with nodes outside the group. The communities can be non-overlapping, which mean that node can belong to only one community, and overlapping. In this dissertation we focus on non-overlapping communities. The graph divided into communities forms a community structure.\nDefinition 18 (Community structure). For a given graphG \u201c pV,Eq the community structure CS \u201c tC1, C2, . . . , Cmu is the partition of the set V , which implies thatH R CS , \u0159\nCPCS C \u201c V and @C1,C2PCSC1 \u2030 C2 \u00f9\u00f1 C1 X C2 \u201c H.\nCommunity detection is a key research topic in network analysis [Fortunato, 2010]. It is relevant to many fields, where graph representations are common, including sociology [Girvan and Newman, 2002], biology [van Laarhoven and Marchiori, 2012] and computer science [Misra et al., 2012]. Community detection raises various conceptual question. One such question is how to evaluate a given division of a network into communities. One of the prominent method of doing this was introduced by Newman [2006] and is called modularity.\nDefinition 19 (Modularity). For a given graph G \u201c pV,Eq and community structure CS \u201c tC1, C2, . . . , Cmu the modularity is:\nQpG,CS q \u201c \u00ff\nCPCS\n\u02c6\n|EpCq| |E| \u00b4 \u00b4#degpCq 2|E| \u00af2 \u02d9 , (2.6)\nwhere EpCq \u201c tpu, vq P E : u, v P Cu, and #degpCq \u201c \u0159 vPC degpvq.\nThe first term of the above equation is the fraction of edges inside community C and the second term, in contrast, is the expected fraction of edges in that community under the assumption that edges were located at random in the network, in which the degrees of nodes remains unchanged in respect to the original graph."}, {"heading": "3. Related Work", "text": "In this dissertation we are concerned with computational aspects of game-theoretic centrality measures. Hence, there are three main bodies of related literature: on centrality measures (Section 3.1), on game-theoretic centrality measures (Section 3.2), and on computational aspects of coalitional games (Section 3.3). The related work on the more specific subjects will be presented in the chapters corresponding to these topics."}, {"heading": "3.1. Centrality Measures and Their Classification", "text": "Centrality measures constitute one of the main research directions in the literature on network analysis. In his classic work, Freeman [1979] proposed and formalized three different concepts of centrality: (i) degree centrality is based on being directly connected to other nodes; (ii) closeness centrality is based on being close to all other nodes; and (iii) betweenness centrality is based on lying between other nodes. Importantly, these three centralities are build upon three conceptually different properties extracted from networks: connections, distances and geodesics, respectively, and all three can be easily used as a basic ground for various extensions. To name only the few, Newman [2004] proposed weighted degree centrality, a appropriate measure of degree for weighted networks, Brandes [2008] introduced distance-scaled betweenness centrality, and Boldi and Vigna [2013] harmonic centrality, the extension of closeness one.\nThe fourth classical measure is eigenvector centrality, which is based on the idea that connections to more important nodes should be valued more than otherwise equal connections to less important nodes [Bonacich, 1972]. One of the most known extension of this measure was proposed by Brin and Page [1998], who proposed famous PageRank metric\nThe topics closely related to centralities are that of the percolation on complex networks and social capital. Regarding percolation, Callaway et al. [2000] studied different models of nodes failures, where each element of the graph have some probability of being disabled. Such studies gives answer to the problem how a given network is vulnerable to a random node or edge failure. Here the centralities can be used to determine the most important nodes to protect. Such studies were done by Holme et al. [2002], who compared degree and betweenness centralities. He postulated that betweenness centrality is a good basis for strategies of protecting nodes against random nodes failures.\n30\nThe \u201dsocial capital\u201d term is much wider than \u201dcentrality\u201d and is is used to describe both \u201cthe value of an individual\u2019s social relationships\u201d [Burt, 1992] and \u201ca quality of groups\u201d [Everett and Borgatti, 1999] within the society. Borgatti et al. [1998] propose to classify social capital along two dimensions. The first is whether it concerns individual actor or a group, or whether we focus on internal or external links (see Table 3.1).\nThis classification distinguishes three fields of social capital studies (or centrality): (A) in this category are examined the internal properties of autonomous actors and this is not part of the studies on social capital nor social networks analysis; (B) in this field the individual actor is examined in the context of its relations to external world and most standard centralities belong to this category; (C) in this category the group of actors are studied in the context of internal relations among them; (D) the last type of social capital is engaged in studying group of actors and their relationships with external world. For all types of social capital many different measures have been proposed (see Table 3.1) and most of them the literature refers to as centralities. Although the three categories of social capital are considered separately, there are cases where they influence each other. For instance, in situations where actors are divided into groups, the role of each individual strictly depends on the role of the entire group and the role of the group simply depends on its members.\nSocial capital is related to social networks describing people and their relationships.\nCentrality measures can be used to analyze any kind of networks."}, {"heading": "3.2. Game-theoretic Apporach to Centrality Measures", "text": "Game-theoretic centrality is an extension of standard centrality based on cooperative game theory. The basic idea behind game-theoretic centrality is to consider the nodes of the network to be a players in a cooperative game, where the payoffs of coalitions are derived from the network topology. Such an analogy between graph and game theory allows to use various game-theoretic solution concepts as a centrality measure of individual nodes.1\n1 See the next chapter for more details.\n31\nThe first author to introduce game-theoretic centrality were Grofman and Owen [1982], who used the Banzhaf index of power [Banzhaf, 1965]. This is a widely-used solution concept that quantifies the power of a player by counting the number of coalitions in which this player is a swing player\u2014a player whose addition to the coalition changes it from being unsuccessful (e.g., in achieving some goal) to being successful. Grofman and Owen mapped a simple coalitional game, a coalitional game where every coalition has a value of 1 or 0, onto a directed graph by considering paths in the graph to be coalitions. Here, a swing player is a node that is crucial to maintain communication among the nodes in the path. Then, Grofman and Owen\u2019s Banzhaf index-based centrality says that the more times a node is a swing node within all possible paths of nodes, the more important this node is in the entire network.\nThe game-theoretic centrality were reinvented by G\u00f3mez et al. [2003], who proposed a slightly different approach. Instead of restricting themselves to simple coalitional games, the authors study arbitrary games where a coalition\u2019s value can be any real number. In this context, the authors propose a centrality measure based on the two prominent solution concepts: the Shapley value [Shapley, 1953] and the Myerson value [Myerson, 1977].\nThe first value is arguably the best normative solution concept known to date, and was discussed in Section 2.2. The Myerson value is based on graph-restricted games, where the underlying assumption is that only connected coalitions (i.e., the group of nodes that between any pair exists a path passing through only members of this group) can communicate and create any value added. Myerson assumed that the value of disconnected coalition would simply be the sum of the values of its connected components. A celebrated result of Myerson for this setting is a dedicated solution concept\u2014closely related to the Shapley value\u2014called the Myerson value. In fact, it is the Shapley value, but evaluated for the characteristic function sensible to coalitions connectivity, as was described above.\nTaking Shapley value and Myerson value, G\u00f3mez et al. [2003] defined the centrality of a node vi to be the difference between the Shapley value of vi (which is independent of the network connectedness) and the Myerson value of vi (which takes the network connectedness into consideration). Thus, by interpreting the Shapley value as a power index in a coalitional game, G\u00f3mez et al.\u2019s Shapley/Myerson-based centrality measure represents the increase (or decrease) in vi\u2019s power due to its position in the network.\nThis direction of research took also del Pozo et al. [2011], who proposed a measure for directed graphs, based on generalised coalitional games [Nowak and Radzik, 1994], where the value of a coalition is influenced by the sequence in which the players have joined it. More specifically, the authors adapted these games to networks in the spirit of Myerson and then based their measure on a parametric family of solution concepts that include two extensions of the Shapley value to generalised coalitional games: one by Nowak and Radzik [1994] and\n32\nthe other by S\u00e1nchez and Berganti\u00f1os [1999]. In a similar spirit, Amer et al. [2007] defined a game-theoretic centrality measure called accessibility in oriented networks.\nA computational study of game-theoretic centrality measures based on connectivity games on networks (inspired by Myerson) was done in Chapter 7. We showed that the efficient computation of the Shapley value is impossible even in the case of a very simple definition of the connectivity game on graph. We also proposed algorithm that significantly improve the computation of such game-theoretic centrality measures. We need to mention that our algorithm was further improved by Skibski et al. [2014] and modified and applied to analyze social networks by Narayanam et al. [2014].\nAll the above works are inspired in one way or the other by the graph-restricted games in the spirit of Myerson [1977], where the value of a group of nodes is mainly determined by connectedness of this group.\nThis dissertation contributes to a parallel stream of literature in which coalitions of nodes are not graph-restricted, i.e., their values do not depend directly on whether they are connected or not. The origins of this approach can be traced back to the concept of group centrality introduced by Everett and Borgatti [1999] which takes into account synergies among nodes. By computing group centrality for every possible group of nodes (not necessarily connected) we obtain a well-defined coalitional game. Next, one can apply a solution concept, such as the Shapley value or the Banzhaf index, to evaluate each individual nodes. Such evaluation attribute synergies to individual nodes, that were captured by group centrality measure.\nThe measure that captured the ability of nodes to dominate other nodes in directed networks was proposed by van den Brink and Borm [2002]. The authors do not refer to their measure as centrality, but from the social network analysis perspective it is. van den Brink and Gilles [2000] continue this line of research by analysing these measures more deeply and, more importantly, by providing an axiomatic approach to them. These are the first works to use general Shapley value approach to game-theoretic centralities.\nThis second line of research was also used by Suri and Narahari [2010] in the interesting application of influence propagation in networks. Specifically, the authors constructed a coalitional game by assigning to coalitions payoffs equal to their group degree. Then, the authors used the Shapley value to approximate the solution of the top k-node problem, i.e., the problem of identifying the k most influential nodes in the network. This approach was followed up by Adamczewski et al. [2014], who studied different versions of group degree."}, {"heading": "3.3. Computational Aspects of Coalitional Games \u2013 Representations", "text": "Let us now turn our attention to the computational issues. In more detail, the computational challenges related to the game-theoretic solution concepts that are tackled in this dissertation\n33\nhave been extensively studied in the literature on algorithmic aspects of coalitional games. Since the path-breaking work by Deng and Papadimitriou [1994], a considerable attention has been paid to developing more efficient representations of games. Such representation can be divided into two main categories [Wooldridge and Dunne, 2006].\nThe first category, to which also this dissertation indirectly contributes, models the characteristic function using specific combinatorial structures such as graphs. This line of research include works by Deng and Papadimitriou [1994], Greco et al. [2009], Wooldridge and Dunne [2006], and the representations discussed by Aziz and de Keijzer [2011]. Such representations are guaranteed to be succinct, however they can express only certain games. In our case, the characteristic function is the function of the group betweenness centrality.\nIn the second category of representations the emphasis is placed on full expressiveness, often at the expense of succinctness. These representations include MC-Nets [Ieong and Shoham, 2005], its read-once extension [Elkind et al., 2009b], Synergy Coalition Groups [Conitzer and Sandholm, 2006], the Decision-Diagrams-based representations [Aadithya et al., 2011, Sakurai et al., 2011], the vector-based representation [Tran-Thanh et al., 2013], and the representation for graph-restricted weighted voting games [Skibski et al., 2015] .\nWe note that even for some succinctly representable games, computing the Shapley value and other game-theoretic solution concepts can be challenging (NP-Hard or even #P-Complete). This is the case with weighted voting games [Deng and Papadimitriou, 1994], threshold network flow games [Bachrach and Rosenschein, 2009] and minimum spanning tree games [Nagamochi et al., 1997]. Also Aziz et al. [2009] proved negative results for the Shapley-Shubik power index for the spanning connectivity games on multigraphs, and Bachrach et al. [2008] for the Banzhaf index for certain class of connectivity games.\nPerhaps the most widely known positive results are those aforementioned due to Deng and Papadimitriou [1994] and Ieong and Shoham [2005]. In particular, Deng and Papadimitriou proposed a representation based on graphs, weighted edges of which represent the marginal contribution of both adjacent nodes (agents) to any coalition they belong to. While this representation is clearly not fully expressive, the Shapley value can be computed in time linear in the size of the graph. The representation of Ieong and Shoham [2005] consists of a finite set of logical rules of the following form: Boolean Expression \u00d1 Real Number, where agents are represented by atomic boolean variables (see Definition 9). The value of a coalition is equal to the sum of the Real Numbers in those rules whose that are satisfied by the coalition. Unlike the representation by Deng and Papadimitriou, the representation by Ieong and Shoham is fully expressive and, for certain types of Boolean Expressions, it allows for the Shapley value to be computed in time linear in the size of the representation.\nThe number of authors proposed alternative representations of coalitional games: coalitional skill games [Bachrach and Rosenschein, 2008] or synergy coalitional groups [Aadithya et al.,\n34\n2011], which allow for representing input compactly for certain games and admit algorithms (e.g. for computing the Shapley value) that run in polynomial time in the size of such a compact input. Finally, one can find in the literature the representation of the extension of coalitional games to games with externalities [Michalak et al., 2009, 2010]."}, {"heading": "4. Polynomial Algorithms for Game-theoretic", "text": "Centrality Measures\nThe Shapley value has recently been advocated as a useful measure of centrality in networks. However, although this approach has a variety of real-world applications (including social and organisational networks, biological networks and communication networks), its computational properties have not been widely studied. To date, the only practicable approach to compute Shapley value-based centrality has been via Monte Carlo simulations which are computationally expensive and not guaranteed to give an exact answer. Against this background, in this chapter we present the study of the computational aspects of the Shapley value for network centralities. Specifically, we develop exact analytical formulae for Shapley value-based centrality in both weighted and unweighted networks and develop efficient (polynomial time) and exact algorithms based on them. We empirically evaluate these algorithms on two real-life examples (an infrastructure network representing the topology of the Western States Power Grid and a collaboration network from the field of astrophysics) and demonstrate that they deliver significant speedups over the Monte Carlo approach. For instance, in the case of unweighted networks our algorithms are able to return the exact solution about 1600 times faster than the Monte Carlo approximation, even if we allow for a generous 10% error margin for the latter method.\nAgainst this background, in this chapter we present the study of the computational aspects of the Shapley value for network centralities. Specifically, we develop exact analytical formulae for Shapley value-based centrality in both weighted and unweighted networks and develop efficient (polynomial time) and exact algorithms based on them. We empirically evaluate these algorithms on two real-life examples (an infrastructure network representing the topology of the Western States Power Grid and a collaboration network from the field of astrophysics) and demonstrate that they deliver significant speedups over the Monte Carlo approach. For instance, in the case of unweighted networks our algorithms are able to return the exact solution about 1600 times faster than the Monte Carlo approximation, even if we allow for a generous 10% error margin for the latter method.\nThe contribution of the author of this dissertation mostly covers the experimental part of this article. More specifically, Algorithms 1-5 were developed by Karthik Aaditha, and formalized\n36\ntogether with the author of this thesis. The Propositions 1 and 2 were proved by the author of this thesis. Also Algorithms 6-10 were developed by the author of this thesis."}, {"heading": "4.1. Why Use Game-Theoretic Centrality Measures?", "text": "In many network applications, it is important to chose which nodes and edges are the most important. To this end, the concept of centrality (see Section 2.7), which aims to quantify the importance of individual nodes/edges, has been extensively studied in the literature [Kosch\u00fctzki et al., 2005, Brandes and Erlebach, 2005].\nGenerally speaking, centrality analysis aims to create a consistent ranking of nodes within a network. To this end, centrality measures assign a score to each node that in some way corresponds to the importance of that node given a particular application. Since \u201cimportance\u201d depends on the context of the problem at hand, many different centrality measures have been developed. Three of the most well-known that were introduced in Section 2.7: degree centrality, closeness centrality and betweenness centrality. Recall that we refer to these measures as classic/standard centralities (Definition 14).\nThe common feature of all standard measures is that they assess the importance of a node by focusing only on the role that a node plays by itself. However, in many applications such an approach is inadequate because of synergies that may occur if the functioning of nodes is considered in groups. Referring to Figure 4.1 and epidemiology example, a vaccination of individual node v6 (or v7 or v8) would not prevent the spread of the disease from the left to the right part of the network (or vice versa). However, the simultaneous vaccination of v6, v7 and v8 would achieve this goal. Thus, in this particular context, nodes v6, v7 and v8 do not play any significant role individually, but together they do. To quantify the importance of such groups of nodes, the notion of group centrality was introduced by Everett and Borgatti [1999]. Intuitively, group centrality works broadly the same way as standard centrality, but now the focus is on the functioning of a given group of nodes, rather than individual nodes. For instance, in Figure 4.1, the group degree centrality of tv1, v2u is 7 as they both have 7 distinct adjacent nodes.\n37\nAlthough the concept of group centrality addresses the issue of synergy between the functions is played by various nodes, it suffers from a fundamental deficiency. It focuses on particular, a priori determined, groups of nodes and it is not clear how to construct a consistent ranking of individual nodes using such group results. Specifically, should the nodes from the most valuable group be ranked top? Or should the most important nodes be those which belong to the group with the highest average value per node? Or should we focus on the nodes which contribute most to every coalition they join? In fact, there are very many possibilities to choose from.\nA framework that does address this issue is the game theoretic network centrality measure. In more detail, it allows the consistent ranking of individual nodes to be computed in a way that accounts for various possible synergies occurring within possible groups of nodes [Grofman and Owen, 1982, G\u00f3mez et al., 2003]. Specifically, the concept builds upon cooperative game theory\u2014a part of game theory in which agents (or players) are allowed to form coalitions in order to increase their payoffs in the game. Now, one of the fundamental questions in cooperative game theory is how to distribute the surplus achieved by cooperation among the agents. To this end, Shapley proposed to remunerate agents with payoffs that correspond to their individual marginal contributions to the game (Definition 5). In more detail, for a given agent, such an individual marginal contribution is measured as the weighted average marginal increase in the payoff of any coalition that this agent could potentially join. Shapley famously proved that his concept\u2014known since then as the Shapley value\u2014is the only division scheme that meets certain desirable normative properties. Given this, the key idea of the game theoretic network centrality is to define a cooperative game over a network in which agents are the nodes, coalitions are the groups of nodes, and payoffs of coalitions are defined so as to meet requirements of a given application. This means that the Shapley value of each agent in such a game can then be interpreted as a centrality measure because it represents the average marginal contribution made by each node to every coalition of the other nodes.1. In other words, the Shapley value answers the question of how to construct a consistent ranking of individual nodes once groups of nodes have been evaluated.\nIn more detail, the Shapley value-based approach to centrality is, on one hand, much more sophisticated than the conventional measures, as it accounts for any group of nodes from which the Shapley value derives a consistent ranking of individual nodes. On the other hand, it confers a high degree of flexibility as the cooperative game over a network can be defined in a variety of ways. This means that many different versions of Shapley value-based centrality can be developed depending on the particular application under consideration, as well as on the features of the network to be analyzed. As a prominent example, in which a specific Shapley value-based\n1 We note that other division schemes or power indices from cooperative game theory can also serve as a good solution.\n38\ncentrality measure is developed that is crafted to a particular application, consider the work of Suri and Narahari [2010] who study the problem of selecting the top-k nodes in a social network. This problem is relevant in all those applications where the key issue is to choose a group of nodes that together have the biggest influence on the entire network. These include, for example, the analysis of co-authorship networks, the diffusion of information, and viral marketing. As a new approach to this problem, Suri and Narahari define a cooperative game in which the value of any group of nodes is equal to the number of nodes within, and adjacent to, the group. In other words, it is assumed that the agents\u2019 sphere of influence reaches the immediate neighbors of the group. Whereas the definition of the game is a natural extension of the (group) degree centrality discussed above, the Shapley value of nodes in this game constitutes a new centrality metric that is, arguably, qualitatively better than standard degree centrality as far as the node\u2019s influence is concerned. The intuition behind it is visible even in our small network in Figure 4.1. In terms of influence, node v1 is more important than v2, because it is the only node that is connected to v4 and v5. Without v1 it is impossible to influence v3 and v4, while each neighbor of v2 is accessible from some other node. Thus, unlike standard degree centrality, which evaluates v1 and v2 equally, the centrality based on the Shapley value of the game defined bySuri and Narahari recognizes this difference in influence and assigns a higher value to v1 than to v2.\nUnfortunately, despite the advantages of Shapley value-based centrality over conventional approaches, efficient algorithms to compute it have not yet been developed. Indeed, given a network GpV,Eq, where V is the set of nodes and E the set of edges, using the original Shapley value formula involves computing the marginal contribution of every node to every coalition which is Op2|V |q. Such an exponential computation is clearly prohibitive for bigger networks (of, e.g, 100 or 1000 nodes). For such networks, the only feasible approach currently outlined in the literature is Monte-Carlo sampling [Suri and Narahari, 2010, Castro et al., 2009]. However, this method is not only inexact, but can be also very time-consuming (see Section 4.4).\nThe computational challenges are hard to overcome, but fortunately in this dissertation we develop the number of algorithms allowing to compute game-theoretic centralities in polynomial time."}, {"heading": "4.2. General Definition of Game-Theoretic Network Centrality", "text": "In this section we provide the formal definitions of group centralities and game-theoretic network centralities.\nIn order to formalize the game-theoretic network centrality firstly we need to define the group centralities. These measured introduced by Everett and Borgatti [1999] are the natural extension of standard centralities (Section 2.7) to evaluate group of nodes. Everett and Borgatti introduced three requirements that group centrality should meet. Firstly, these metrics should\n39\nbe build upon existing concepts of centralities. Secondly, the group centrality applied to the group containing a single individual should yield the same result as standard centrality of this individual. Finally, the group centrality must stem from the relationships between individuals, not between groups. In other words, the value of the group C \u010e V of nodes is an intrinsic property of this group and its relationships, and the other group of nodes has no impact on it as long as the relationships of C are not changed.\nDefinition 20 (Group centrality). For a given graph G \u201c pV,Eq the group centrality is a function cg : 2V \u00d1 R that for each subset of nodes C \u010e V determines the importance of this group measured in real value.\nNow, the extension of degree, centrality (Definition 15) is:\nDefinition 21 (Group degree centrality). For a given graph G \u201c pV,Eq and a group of nodes C \u010e V group degree centrality is a function cgd : 2V \u00d1 R:\ncgdpCq \u201c degpCq\nwhere degpCq is a degree of the set C (see Section 2.6).\nThe extension of betweenness centrality (Definition 16) is:\nDefinition 22 (Group betweenness centrality). The group betweenness centrality of the set of nodes C \u010e V is defined as a function cgb : 2V \u00d1 R such that:\ncgbpCq \u201c \u00ff\nsRC tRC\n\u03c3stpCq \u03c3st ,\nwhere \u03c3stpCq is the number of shortest paths from s to t passing through at least one vertex in C (if s P C or t P C then \u03c3stpSq \u201c 0), and \u03c3st is the number of all shortest paths between s and t.\nEventually, the extension of closeness centrality (Definition 17) is defined as follows:\nDefinition 23 (Group closeness centrality). For a given graph G \u201c pV,Eq and a group of nodes C \u010e V closeness centrality is a function cgc : 2V \u00d1 R:\ncgcpCq \u201c \u00ff\nsRC dpC, sq\nwhere distpC, sq is a distance between group C and node s (see Section 2.6).\n40\nIn this dissertation, we will be looking at cooperative games on graphs, with the set of players V for some pV,Eq \u201c G P G , where G is an infinite set of all graphs.2 A coalition of players C will simply be any subset of C \u010e V . The characteristic function, \u03bdG P VG, will be any function \u03bdG : 2V pGq \u00d1 R, but in this work we focus on the group centralities, so we have \u03bdG \u201c cg. For the purposes of defining a cooperative game on any network, we will systematically associate characteristic functions with graphs through representation functions.\nDefinition 24 (Representation function). A representation function is a function \u03c8 : G \u00d1 VG that maps every graph G \u201c pV,Eq onto a cooperative game pN, \u03bdGq P VG with N \u201c V .\nNow, solution concepts like Shapley value can be used in the network setting by applying\nthem to the characteristic function that a network represents.\nDefinition 25 (Game-theoretic centrality measure). Formally, we define a game-theoretic centrality measure as a pair p\u03c8, \u03c6q consisting of a representation function \u03c8 and a solution concept \u03c6.\nExample 5. Let us consider a game-theoretic centrality measure p\u03c8B, \u03c6SV q. We say that \u03c8B is a representation function since it associates a coalitional game with any graph G \u201c pV,Eq, i.e. every graph represents a cooperative game. We have \u03c8BpGq \u201c pV, \u03bdGq, where V is the set of nodes and \u03bdG : 2V \u00d1 R is the characteristic function. Let \u03bdG be the ranking of groups of nodes in G based on group betweenness centrality. In other words, \u03c8B is simply the group betweenness cgb centrality for any graph. For a specific graph G, the importance of each node u P V according to p\u03c8B, \u03c6SV q is evaluated by the Shapley value of the game \u03c8BpGq, i.e. \u03c6SV p\u03bdGq. Since we started off with a well-known centrality measure (betweenness centrality) and applied a game-theoretic solution concept to it (the Shapley value), we call the resulting centrality measure a game-theoretic extension of betweenness centrality, or the Shapley-value based betweenness centrality.\nThe algorithms presented in the next section are designed for the generalization of the\nfollowing two game-theoretic centralities.\nDefinition 26 (Shapley-value based degree centrality). Shapley-value based degree centrality is a pair p\u03c8D, \u03c6SV q consisting of a representation function \u03c8DpGq \u201c cgd that maps each graph to the game with group degree centrality and a Shapleu value solution concept \u03c6SV .\nDefinition 27 (Shapley-value based closeness centrality). Shapley-value based closeness centrality is a pair p\u03c8C , \u03c6SV q consisting of a representation function \u03c8CpGq \u201c cgc that maps each graph to the game with group closeness centrality and a Shapleu value solution concept \u03c6SV .\n2 The graphs can be simple, weighted, or directed, it will depend on the context.\n41"}, {"heading": "4.3. The Algorithms", "text": "In this section, we present five characteristic function formulations, each designed to convey a specific centrality notion. These games are a generalizations of Shapley-value based degree centrality and Shapley-value based closeness centrality.\nWe need to clarify one important aspect of group centralities. From the Definitions 21 and 23 we see that for each graph G \u201c pV,Eq we have cgdpV q \u201c cgcpV q \u201c 0. However, in the four games g1,g2, g3 and g5 being under consideration in this chapter we slightly modify Definition 21 and assume that for each coalitionC \u010e V group degree centrality is: cgdpCq`|C|. This assumptions were made in order to catch the intuition that the value of coalition C is in fact the size of the \u2019sphere of influence\u2019 made by this coalition on the network. The coalition C is expected to make influence on all its members. So, the five games analyzed in this section are:\ng1 In this game the value of coalition C is a function of its own size and of the number of\nnodes that are immediately reachable from C. It is simply the Shapley-value based degree centrality. g2 In this game the value of coalition C is a function of its own size and of the number of nodes\nthat are immediately reachable in at least k different ways from C. This game is inspired by Bikhchandani et al. [1992] and is an instance of the general threshold model introduced by Kempe et al. [2005]. It has a natural interpretation: an agent \u201cbecomes influenced\u201d (with ideas, information, marketing message, etc.) only if at least k of his neighbors have already become influenced. g3 This game concerns weighted graphs (unlike g1 and g2). Here, the value of coalition C\ndepends on its size and on the set of all nodes within a cutoff distance of C, as measured by the shortest path lengths on the weighted graph. g4 This game generalizes g3 by allowing the value of C to be an arbitrary non-increasing\nfunction fp.q of the distance between C and the other nodes in the network. The intuition here is that the coalition has more influence on closer nodes than on those further away\u2014a property that cannot be expressed with the standard closeness centrality. Thus, g4 is the Shapley-value based closeness centrality. g5 The last game is an extension of g2 to the case of weighted networks. Here, the value of C\ndepends on the adjacent nodes that are connected to the coalition with weighted edges whose sum exceeds a given threshold wcutoff (recall that in g2 this threshold is defined simply by the integer k). Whereas in g3 and g4 weights on edges are interpreted as distance, in g5 they should be interpreted as a power of influence.\nThe relationships among all five games are graphically presented in Figure 4.2.\n42\nThe computation of the Shapley value for each of the above five games (see Table 4.1 for an overview) is the main focus of the paper by Michalak et al. [2013a]. In this dissertation we skip the technical part of constructing algorithms, and instead of this, for each game we present the extensive evaluation."}, {"heading": "4.3.1. Shapley Value-Based Degree Centrality", "text": "Let GpV,Eq be an unweighted, undirected network. The characteristic function is defined as:\n\u03c81pGqpCq \u201c \u03bd1pCq \u201c \u03bdgdpCq ` |C|\n.\nThe above game was applied by Suri and Narahari [2010] to find out influential nodes in social networks and it was shown to deliver very promising results concerning the target set selection problem (see Kempe et al. [2003]). It is therefore desired to compute the Shapley values of all nodes for this game. We shall now present an exact algorithm for this computation rather than obtaining results through Monte Carlo simulation as was done by Suri and Narahari.\nIn more detail, to evaluate the Shapley value of node v, consider all possible permutations of the nodes in which v would make a positive marginal contribution to the coalition of nodes occurring before itself. Let the set of nodes occurring before node v in a random permutation of nodes be denoted P\u03c0pvq. Let the neighbours of node v in the graph GpV,Eq be denoted Npvq and the degree of node v be denoted degpvq.\n43\nThe key question to ask is: what is the necessary and sufficient condition for node v to marginally contribute node u P Npvq Y tvu to fringepP\u03c0pvqq? Clearly, this happens if and only if neither u nor any of its neighbours are present in P\u03c0pvq. Formally, pNpuqYtvuqXP\u03c0pvq \u201c H.\nNow we are going to show that the above condition holds with probability 1 1`degpuq .\nProposition 1. The probability that in a random permutation none of the vertices from Npuq Y tuu occurs before v, where v and u are neighbours, is 1\n1`degpuq .\nProof. We need to count the number of permutations that satisfy:\n@nPpNpvqYtuuq\u03c0pvq \u0103 \u03c0pnq. (4.1)\nTo this end:\n\u2014 Let us choose |pNpuq Y tuu| positions in the sequence of all elements from V . We can do this in\n` |V | 1`degpuq \u02d8 ways.\n\u2014 Then, in the last degpuq chosen positions, place all elements from pNpuq Y tuuqztvu. Directly before these, place the element v. The number of such line-ups is pdegpuqq!. \u2014 The remaining elements can be arrange in p|V | \u00b4 p1` degpuqq! different ways.\nAll in all, the number of permutations satisfying condition (4.1) is:\n` |V | 1`degpuq \u02d8 pdegpuqq!p|V | \u00b4 p1` degpuqq! \u201c |V |! 1`degpuq ;\nthus, the probability that one of such permutations is randomly chosen is 1 1`degpuq .\n44\nAlgorithm 1: Computing the Shapley value for Game 1\nInput: Unweighted graph GpV,Eq Output: Shapley values of all nodes in V for game g1\n1 foreach v P V do 2 \u03c6SVv \u201c 11`degpvq ; 3 foreach u P Npvq do 4 \u03c6SVv ` \u201c 11`degpuq ; 5 end 6 end 7 return \u03c6SV ;\nIt is possible to derive some intuition from the above algorithm. If a node has a high degree, the number of terms in its Shapley value summation above is also high. But the terms themselves will be inversely related to the degree of neighboring nodes. This gives the intuition that a node will have high centrality not only when its degree is high, but also whenever its degree tends to be higher in comparison to the degree of its neighboring nodes. In other words, power comes from being connected to those who are powerless, a fact that is well-recognized by the centrality literature [Bonacich, 1987]. Following the same reasoning, we can also easily predict how dynamic changes to the network, such as adding or removing an edge, would influence the Shapley value.3 Adding an edge between a powerful and a powerless node will add even more power to the former and will decrease the power of the latter. Naturally, removing an edge would have the reverse effect.\nAlgorithm 1 cycles through all nodes and through their neighbours, so its running time is Op|V | ` |E|q. Finally, we note that Algorithm 1 can be adopted to directed graphs with a couple of simple modifications. Specifically, in order to capture how many nodes we can access a given node from, the degree of a node should be replaced with indegree. Furthermore, a set of neighbours of a given node v should consist of those nodes to which an edge is directed from v."}, {"heading": "4.3.2. Shapley Value-Based k-influence Degree Centrality", "text": "We now consider a more general game formulation for an unweighted graphGpV,Eq, where the value of a coalition includes the number of agents that are either in the coalition or are adjacent to at least k agents who are in the coalition. Formally, we consider game g2 characterised by \u03bd2 : 2 V pGq \u00d1 R, where\n3 Many real-life networks are in fact dynamic and the challenge of developing fast streaming algorithms has recently attracted considerable attention in the literature [Lee et al., 2012].\n45\nAlgorithm 2: Computing the Shapley value for Game 2\nInput: Unweighted graph GpV,Eq, positive integer k Output: Shapley value of all nodes in V for game g2\n1 foreach v P V do 2 \u03c6SVv \u201c minp1, k1`degpvqq; 3 foreach u P Npvq do 4 \u03c6SVv ` \u201c maxp0, degpuq\u00b4k`1 degpuqp1`degpuqqq; 5 end 6 end 7 return \u03c6SV ;\n\u03c82pGqpCq \u201c \u03bd2pCq \u201c\n$ &\n%\n0 if C \u201c H\n|tv : v P C (or) |Npvq X C| \u011b ku| otherwise.\nThe second game is an instance of the General Threshold Model that has been widely studied in the literature [Kempe et al., 2005, Granovetter, 1978]. Intuitively, in this model each node can become active if a monotone activation function reaches some threshold. The instance of this problem has been proposed by Goyal et al. [2010], where the authors introduced a method of learning influence probabilities in social networks (from users\u2019 action logs). However, in many realistic situations much less information is available about a network so it is not possible to assess specific probabilities with which individual nodes become active. Consequently, much simpler models are studied. Bikhchandani et al. [1992], for instance, \u201cconsider a teenager deciding whether or not to try drugs. A strong motivation for trying out drugs is the fact that friends are doing so. Conversely, seeing friends reject drugs could help persuade the teenager to stay clean\u201d. This situation is modelled by the second game; the threshold for each node is k and the activation function is fpSq \u201c |S|. Another example is viral marketing or innovation diffusion analysis. Again, in this application, it is often assumed that an agent will \u201cbe influenced\u201d only if at least k of his neighbors have already been convinced by Valente [1996]. Note that this game reduces to game g1 for k \u201c 1. Although this game is a generalization of game g1, it can still be solved to obtain the Shapley values of all nodes in Op|V | ` |E|q time, as formalised by Algorithm 2. An even more general formulation of the game is possible by allowing k to be a function of the agent, i.e., each node v P V is assigned its own unique attribute kpvq. This translates to an application of the form: agent i is convinced if and only if at least kv of his neighbors are convinced, which is a frequently used model in the literature [Valente, 1996].\n46\nThe above argument does not use the fact that k is constant across all nodes. So this generalized formulation can be solved by a simple modification to the original Shapley value expression:\nSV pvq \u201c kpvq 1` degpvq ` \u00ff\nuPNpvq\n1` degpuq \u00b4 kpuq degpuqp1` degpuqq .\nThe above equation (which is also implementable in Op|V | ` |E|q time) assumes that kpvq \u010f 1`degpvq for all nodes v P V . This condition can be assumed without loss of generality because all cases can still be modelled (we set kpvq \u201c 1 ` degpvq for the extreme case where node v is never convinced no matter how many of its neighbors are already convinced).\nFinally, we note that Algorithm 2 can be adapted to a case of directed graphs along the same\nlines as Algorithm 1."}, {"heading": "4.3.3. Shapley Value-Based dcutoff -distance Degree Centrality", "text": "Hitherto, our games have been confined to unweighted networks. But in many applications, it is necessary to model real-world networks as weighted graphs. For example, in the co-authorship network mentioned in the introduction, each edge is often assigned a weight proportional to the number of joint publications the corresponding authors have produced [Newman, 2001].\nThis subsection extends game g1 to the case of weighted networks. Whereas game g1 equates \u03bdpCq to the number of nodes located within one hop of some node inC, our formulation in this subsection equates \u03bdpCq to the number of nodes located within a distance dcutoff of some node in C. Here, distance between two nodes is measured as the length of the shortest path between the nodes in the given weighted graph G \u201c pV,E, \u03bbq (see Definition 13) Formally, we define game g3, where for each coalition C \u010e V pGq,\n\u03c83pGqpCq \u201c \u03bd3pCq \u201c\n$ &\n%\n0 if C \u201c H\n|tv : distpC, uq \u010f dcutoff u| otherwise.\nClearly, g3 can be used in all the settings where g1 is applicable; for instance, in the diffusion of information in social networks or to analyse research collaboration networks [Suri and Narahari, 2010]. Moreover, as a more general game, g3 provides additional modelling opportunities. For instance, Suri and Narahari suggest that a \u201cmore intelligent\u201d way for sieving nodes in the neighbourhood would improve their algorithm for solving the target selection problem (top-k problem). Now, g3 allows us to define a different cutoff distance for each node in Suri and Narahari\u2019s setting. Furthermore, g3 is a specific case of the more general model g4 which will be discussed in next subsection.\n47\nAlgorithm 3: Computing the Shapley value for Game 3\nInput: Weighted graph G \u201c pV,E, \u03bbq, dcutoff \u0105 0 Output: Shapley value of all nodes in G for game g3\n1 foreach v P V pGq do 2 DistanceVector D = Dijkstra(v,G); 3 extNeighbors(v) =H; extDegree(v) = 0; 4 foreach u P V pGq such that u \u2030 v do 5 if Dpuq \u010f dcutoff then 6 extNeighbors(v).push(u); 7 extDegree(v)++; 8 end 9 end\n10 end 11 foreach v P V pGq do 12 \u03c6SVv \u201c 11`extDegreepvq ; 13 foreach u P extNeighborspvq do 14 \u03c6SVv ` \u201c 11`extDegreepuq ; 15 end 16 end 17 return \u03c6SV ;\nBefore we propose an algorithm, we need to introduce some extra notation. Define the extended neighborhood Npv, dcutoff q \u201c tu \u2030 v : distpv, uq \u010f dcutoff u, i.e., the set of all nodes whose distance from v is at most dcutoff . Denote the size of NGpv, dcutoff q by degpv, dcutoff q.\nAlgorithm 3 works as follows: for each node v in the network GpV,Eq, the extended neighborhood Npv, dcutoff q and its size degpv, dcutoff q are first computed using Dijkstra\u2019s algorithm in Op|E| ` |V |log|V |q time [Cormen, 2001]. The results are then used to compute Shapley value, which takes maximum time Op|V |2q. In practice this step runs much faster because the worst case situation only occurs when every node is reachable from every other node within dcutoff . Overall the complexity is Op|V ||E| ` |V |2log|V |q. Furthermore, to deal with directed graphs we need to redefine the notion of extDegree and extNeighbors for a given node u in Algorithm 3. The former will be the number of vertices from which the distance to u is smaller than, or equal to, dcutoff . The latter will be the set of nodes whose distance from u is at most dcutoff .\nFinally, we make the observation that the the above algorithm does not depend on dcutoff being constant across all nodes. Indeed, each node v P V pGq may be assigned its own unique value dcutoff pvq, where \u03bdpCq would be the number of agents v who are within a distance dcutoff pvq from C. For this case, the above proof gives:\n48\n\u03c6SVv \u201c \u00ff\nu:distpv,uq \u010fdcutoff puq\n1\n1` degpu, dcutoff puqq ."}, {"heading": "4.3.4. Shapley Value-Based Closeness Centrality", "text": "This subsection further generalizes game g3, again taking motivation from real-life network problems. In game g3, all agents at distances dagent \u010f dcutoff contributed equally to the value of a coalition. However, this assumption may not always hold true because in some applications we intuitively expect agents closer to a coalition to contribute more to its value. For instance, we expect a Facebook user to exert more influence over his immediate circle of friends than over \u201cfriends of friends\u201d, even though both may satisfy the dcutoff criterion. Similarly, we expect a virus-affected computer to infect a neighboring computer more quickly than a computer two hops away.\nIn general, we expect that an agent at distance d from a coalition would contribute fpdq to its value, where fp.q is a positive valued decreasing function of its argument. More formally, we define game g4, where the value of a coalition C is given by:\n\u03c84pGqpCq \u201c \u03bd4pCq \u201c\n$ &\n%\n0 if C \u201c H \u0159\nvPV fpdistpC, vqq otherwise.\nIn the case of Shapley value-based closeness centrality, the key question to ask is: what is the expected value of the marginal contribution of v through node u \u2030 v to the value of coalition P\u03c0pvq? Let this marginal contribution be denoted MCpv, uq. Clearly:\nMCpv, uq \u201c\n$ &\n%\n0 if distpv, uq \u011b distpu, P\u03c0pvqq\nfpdistpv, uqq \u00b4 fpdistpu, P\u03c0pvqqq otherwise.\nLet Du \u201c td1, d2...d|V |\u00b41u be the distances of node u from all other nodes in the network, sorted in increasing order. Let the nodes corresponding to these distances be tw1, w2...w|V |\u00b41u, respectively. Let kvu` 1 be the number of nodes (out of these |V | \u00b4 1) whose distances to u are \u010f distancepv, uq. Let wkvu`1 \u201c v (i.e., among all nodes that have the same distance from u as v, v is placed last in the increasing order).\nWe use literal wi to mean wi P P\u03c0pvq and the literal wi to mean wi R P\u03c0pvq. Define a sequence of boolean variables pk \u201c u^ w1 ^ w2 ^ ...^ wk for each 0 \u010f k \u010f |V | \u00b4 1. Finally denote expressions of the form MCpv, u|F q to mean the marginal contribution of v to P\u03c0pvq through u given that the coalition P\u03c0pvq satisfies the boolean expression F .\n49\nMCpv, u|pkvu`1 ^ wkvu`2q \u201c fpdkvu`1q \u00b4 fpdkvu`2q, MCpv, u|pkvu`2 ^ wkvu`3q \u201c fpdkvu`1q \u00b4 fpdkvu`3q, ... ... ...\nMCpv, u|p|V |\u00b42 ^ w|V |\u00b41q \u201c fpdkvu`1q \u00b4 fpd|V |\u00b41q,\nMCpv, u|p|V |\u00b41q \u201c fpdkvu`1q.\nWith this notation, we obtain expressions forMCpv, uq by splitting over the above mutually exclusive and exhaustive (i.e., covering all possible non-zero marginal contributions) cases.\nNow, we need to determine the probability of Prppk ^ wk`1q.\nProposition 2. The probability that in a random permutation none of the nodes from tvj, w1, . . . , wku occur before vi and the node wk`1 occurs before vi is 1pk`1qpk`2q .\nProof. Let us count the number of permutations that satisfy:\n@vPtvj ,w1,...,wku\u03c0pvq \u0103 \u03c0pvq ^ \u03c0pv \u0103 \u03c0pwk`1q. (4.2)\nTo this end:\n\u2014 Let us choose |tvj, w1, . . . , wku Y tuu Y twk`1u| positions in the sequence of all elements from V . We can do this in\n` |V | k`3 \u02d8 ways.\n\u2014 Then, in the last k ` 1 chosen positions, we place all elements from tvj, w1, . . . , wku. Directly before these, we place the element v, and then vertex wk`1 . The number of such\nline-ups is pk ` 1q!. \u2014 The remaining elements can be arrange in p|V | \u00b4 pk ` 3q! different ways.\nThus, the number of permutations satisfying (4.2) is:\n` |V | k`3 \u02d8 pk ` 1q!p|V | \u00b4 pk ` 3qq! \u201c |V |!pk`1qpk`2q ,\nand the probability that one of such permutations is randomly chosen is 1pk`1qpk`2q .\nWith the above proposition we find that:\nPrppk ^ wk`1q 1\npk ` 1qpk ` 2q @ 1` kvu \u010f k \u010f |V | \u00b4 2.\nUsing the MCpv, uq equations and the probabilities Prppk ^ wk`1q:\n50\nAlgorithm 4: Computing the Shapley value for Game 4\nInput: Weighted graph G \u201c pV,E, \u03bbq, function f : R` \u00d1 R` Output: Shapley value of all nodes in G for game g4\n1 Initialise: @v P V pGq set \u03c6SVv \u201c 0; 2 foreach v P V pGq do 3 [Distances D, Nodes w] = Dijkstra(v,G); 4 sum = 0; index = |V|-1; prevDistance = -1, prevSV = -1; 5 while index > 0 do 6 if D(index) == prevDistance then 7 currSV = prevSV; 8 else 9 currSV = fpDpindexqq\n1`index \u00b4 sum; 10 end 11 node = w(index); 12 \u03c6SVnode` \u201c currSV ; 13 sum += fpDpindexqq\nindexp1`indexq ; 14 prevDistance = D(index), prevSV = currSV; 15 index--; 16 end 17 \u03c6SVv ` \u201c fp0q \u00b4 sum; 18 end 19 return \u03c6SV ;\nErMCpv, uqs \u201c \u00ab |V |\u00b42 \u00ff\nk\u201c1`kvu\nfpdistancepv, uqq \u00b4 fpdk`1q pk ` 1qpk ` 2q\nff\n` fpdistancepv, uqq|V |\n\u201c fpdistancepv, uqq kvu ` 2\n\u00b4 |V |\u00b42 \u00ff\nk\u201ckvu`1\nfpdk`1q pk ` 1qpk ` 2q .\nIn Algorithm 4 we use Dv \u201c td1, d2...d|V |\u00b41u as a vector of distances from node v to all other nodes in the network, sorted in increasing order. Also, the vector w \u201c tw1, w2...w|V |\u00b41u represents nodes corresponding to these distances, respectively. For each vertex v, a vector of distances to every other vertex is first computed using Dijkstra\u2019s algorithm [Cormen, 2001]. This yields a vectorDv that is already sorted in increasing order. This vector is then traversed in reverse to compute the Shapley value of the appropriate node w. After the traversal, the Shapley value of v itself is updated. This process is repeated for all nodes v so that at the end of the algorithm, the Shapley value is computed exactly in Op|V ||E| ` |V |2log|V |q time.\n51\nOur final observation is that Algorithm 4 works also for directed graphs as long as we use\nthe appropriate version of Dijkstra\u2019s algorithm (see, e.g., Cormen [2001])."}, {"heading": "4.3.5. Shapley Value-Based Wcutoff -influence Degree Centrality", "text": "In this subsection, we generalize game g2 for the case of weighted networks. Given a positive weighted network G \u201c pV,E, \u03bbq and a value Wcutoff pvq for every node v P V , we first define \u03bbpv, Cq \u201c \u0159\nuPC \u03bbpv, uq for every coalition C, where \u03bbpv, uq is the weight of the edge between nodes v and u (or 0 if there is no such edge). With this notation, we define game g5 by the characteristic function:\n\u03bd5pCq \u201c\n$ &\n%\n0 if C \u201c H\nsizeptv : v P C porq \u03bbpv, Cq \u011b Wcutoff pvquq otherwise.\nThe formulation above has applications in, for instance, the analysis of information diffusion, adoption of innovations, and viral marketing. Indeed, many cascade models of such phenomena on weighted graphs have been proposed [Granovetter, 1978, Kempe et al., 2003, Young, 2005] which work by assuming that an agent will change state from \u201cinactive\u201d to \u201cactive\u201d if and only if the sum of the weights to all active neighbors is at least equal to an agent-specific cutoff.\nAlthough we have not been able to come up with an exact formula for the Shapley value in this game4, our analysis yields an approximate formula which was found to be accurate in practice.\nWe will need the following additional notation:\n\u2014 let the weights of edges between v and each of the nodes in Npvq be \u03bbv \u201c t\u03bbpv, uq, \u03bb1, \u03bb2...\u03bbdegpvq\u00b41u in that order; \u2014 let \u03b1v be the sum of all the weights in \u03bbv and \u03b2v be the sum of the squares of all the weights\nin \u03bbv; and finally\n\u2014 let Xvut be the sum of a t-subset of \u03bbvzt\u03bbpv, uqu drawn uniformly at random from the set of all such possible t-subsets.\nWhile in each graph it holds that \u0159 vPV degpvq \u010f 2|E|, Algorithm 5 implements an Op|V |` \u0159\nvPV \u0159 uPNpvq degpuqq \u010f Op|V | ` |V ||E|q \u201c Op|V ||E|q solution to compute the Shapley value for all agents in game g5 using the above approximation. Furthermore, we make the following observation: for small degpuq, one might as well use the brute force computation to determine Shapley value in Op2degpuq\u00b41q time.\n4 Computing the Shapley value for this game involves determining whether the sum of weights on specific edges, adjacent to a random coalition, exceeds the threshold. This problem seems to be at least as hard as computing the Shapley value in weighted voting games, which is #P-Complete [Elkind et al., 2009b].\n52\nAlgorithm 5: Computing the Shapley value for Game 5\nInput: Weighted network G \u201c pV,E, \u03bbq, cutoffs Wcutoff pvq for each v P V Output: Shapley value of all nodes in G for game g5\n1 foreach v P V do 2 compute and store \u03b1i and \u03b2i; 3 end 4 foreach v P V do 5 \u03c6SVv \u201c 0; 6 foreach m in 0 to degpvq do 7 compute \u00b5 \u201c \u00b5pXvvm q, \u03c3 \u201c \u03c3pXvvm q, p \u201c PrtN p\u00b5, \u03c32q \u0103 Wcutoff pvqu; 8 \u03c6SVv ` \u201c p1`degpvq ; 9 end\n10 foreach u P Npvq do 11 p = 0; 12 foreach m in 0 to degpuq \u00b4 1 do 13 compute \u00b5 \u201c \u00b5pXvum q, \u03c3 \u201c \u03c3pXvum q and z = Zvum ; 14 p += z degpuq\u00b4m\ndegpuqpdegpuq`1q ; 15 end 16 \u03c6SVv ` \u201c p; 17 end 18 end 19 return \u03c6SV ;\nAs far as directed graphs are concerned, in all calculations in Algorithm 5 we have to consider the indegree of a node instead of degree. Furthermore, the set of neighbours of a node u should be defined as the set of nodes v connected with directed edge pu, vq."}, {"heading": "4.4. Simulations", "text": "In this section we evaluate the time performance of our exact algorithms for games g1 to g4 and our approximation algorithm for game g5. In more detail, we compare our exact algorithms to the method of approximating the Shapley value via Monte Carlo sampling which has been the only feasible approach to compute game-theoretic network centrality available to date in the literature. In this section we evaluate the time performance of our exact algorithms for games g1 to g4 and our approximation algorithm for game g5. In more detail, we compare our exact algorithms to the method of approximating the Shapley value via Monte Carlo sampling which has been the only feasible approach to compute game-theoretic network centrality available to date in the literature. First, we provide a detailed description of the simulation setup; then, we present data sets and the simulation results. In the remainder of this section we first we\n53\ncomment on Monte Carlo sampling. Next, we provide a detailed description of the simulation setup. Finally, we present data sets and the simulation results."}, {"heading": "4.4.1. Approximation Methods for the Shapley Value", "text": "In this section, we discuss different approximation techniques to compute the Shapley value from the literature. Generally speaking, they can be divided into three groups\u2014each referring to a specific subclass of coalitional games under consideration:\n1. First, let us consider the method proposed by Fatima et al. [2007] and elaborated further by\nFatima et al. [2008]. This approach concerns weighted voting games. In these games, each player has a certain number of votes (or in other words, a weight). A coalition is \u201cwinning\u201d if the number of votes in this coalition exceeds some specific threshold, or \u201closing\u201d otherwise. Fatima et al. propose the following method to approximate the Shapley value in weighted voting games. Instead of finding marginal contributions of players to all 2n coalitions, the authors consider only n randomly-selected coalitions, one of each size (i.e., from 1 to n). Only for these n coalitions are the player\u2019s expected marginal contributions calculated and the average of these contributions yields an approximation of the Shapley value. Whereas Fatima et al. method is certainly attractive, it is only applicable to games in which the value of a coalition depends on the sum of associated weights being in some bounds. This is not the case for our games g1 to g4.5 2. Another method was proposed by Bachrach et al. [2008] in the context of simple coalitional\ngames 6 in which the characteristic function is binary\u2014i.e., each coalition has a value of either zero or one. For these games, Bachrach et al. extend the approach suggested by Mann and Shapley 1960 and provide more rigorous statistical analysis. In particular, Mann and Shapley described the Monte Carlo simulations to estimate the Shapley value from a random sample of coalitions. Bachrach at al. use this technique to compute the Banzhaf power index and then they suggested using a random sample of permutations of all players in order to compute the Shapley-Shubik index for simple coalitional games.7 The computation of the confidence interval, which is crucial in such an approach, hinges upon the binary form of the characteristic function for simple coalitional games. This method is more general than the one proposed by Fatima et al. [2007]\u2014as weighted voting games are a subset of simple coalitional games\u2014but still it cannot be effectively used for our games g1 to g4, where the characteristic functions are not binary.\n5 Recall that our approximation algorithm for g5 builds upon Fatima et al. method. This is because in this game the marginal contribution of each node depends on the weights assigned to its incident edges.\n6 Note that weighted voting games are simple coalitional games. 7 The Shapley-Shubik index is a very well-known application of the Shapley value that evaluates the power\nof individuals in voting [Shapley and Shubik, 1954].\n54\nAlgorithm 6: Monte Carlo method to approximate the Shapley value\nInput: \u02db Characteristic function v, maximum iteration maxIter\nOutput: Aproximation of Shapley value for game v\n1 for v P V do 2 \u03c6SVv \u201c 0 ; 3 end 4 for i \u201c 1 to maxIter do 5 shuffle(V ); 6 Marginal Contribution block 7 P =H ; 8 for v P V do 9 \u03c6SVv ` \u201c \u03bdpP Y tvuq \u00b4 \u03bdpP q ;\n10 P \u201c P Y tvu ; 11 end 12 13 end 14 for v P V do 15 \u03c6SVv \u201c \u03c6SVv maxIter\n; 16 end 17 return \u03c6SVv ;\n3. Unlike the first two methods, the last method described by Castro et al. [2009] can be\nefficiently applied to all coalitional games in characteristic function game form, assuming that the worth of every coalition can be computed in polynomial time. Here, approximating the Shapley value involves generating permutations of all players and computing the marginal contribution of each player to the set of players occurring before it. The solution precision increases (statistically) with every new permutation analysed. Furthermore, the authors show how to estimate the appropriate size of a permutation sample in order to guarantee a low error. Given its broad applicability, this method is used in our simulations as a comparison benchmark."}, {"heading": "4.4.2. Simulation Setup", "text": "In more detail, in a preliminary step, we test what is the maximum number of Monte Carlo iterations that can be performed in a reasonable time for any given game. This maximum number of iterations, denoted maxIter, becomes an input to Algorithm 6 for Monte Carlo sampling. In this algorithm, in each one of the maxIter iterations, a random permutation of all nodes is generated. Then, using a characteristic function from the set \u03bd P t\u03bd1, \u03bd2, \u03bd3, \u03bd4, \u03bd5u, it calculates the marginal contribution of each node to the set P of nodes occurring before a\n55\ngiven node in a random permutation.8 Finally, the algorithm divides the aggregated sum of all contributions for each node by the number of iterations performed. The time complexity of this algorithm is OpmaxIter \u02da conq, where con denotes the number of operations necessary for computing the Marginal Contribution block. This block is specifically tailored to the particular form of the characteristic function of each of the games g1 to g5. In particular, for game g1 (see Algorithm 6), it is constructed as follows. Recall that, in this game, node vi makes a positive contribution to coalition P through itself and through some adjacent node u under two conditions. Firstly, neither vi nor u are in P . Secondly, there is no edge from P to vi or u. To check for these conditions in Algorithm 6 we store those nodes that have already contributed to the value of coalition P in an array called: Counted. For each node vi, the algorithm iterates through the set of its neighbours and for each adjacent node it checks whether this adjacent node is counted in the array Counted. If not, the marginal contribution of the node vi is increased by one.\nAlgorithm 7: Marginal Contribution block of Algorithm 6 for g2 Counted\u00d0 false ; Edges\u00d0 0 ; foreach v P V pGq do\nforeach u P NGpvq Y tvu do Edges[u]++ ; if !Counted[u] and ( Edges[u] \u011b k[u] or u \u201c v ) then\n\u03c6SVv \u00d0 \u03c6SVv ` 1; Counted[u] = true ;\nend end\nend\nAlgorithm 8: Marginal Contribution block of Algorithm 6 for g3 Counted\u00d0 false ; foreach v P V pGq do\nforeach u P extNeighborspvq Y tvu do if !Counted[u] then\n\u03c6SVv \u00d0 \u03c6SVv ` 1; Counted[u] = true ;\nend end\nend\nFor the rest of the games considered in this chapter the Marginal Contribution block of Algorithm 6 takes a slightly different form. We have explained the functioning of this block for g1. Now, we discuss this block for the remaining four games. In particular: 8 Recall that the characteristic functions v1, v2, . . . , v5 correspond to games g1, g2, . . . , g5, respectively.\n56\nAlgorithm 9: Marginal Contribution block of Algorithm 6 for g4 dist\u00d0 infinity ; foreach v P V pGq do\nforeach u P V pGq do if D[u] < dist[u] then\n\u03c6SVv \u00d0 \u03c6SVv ` fpDrusq \u00b4 fpdistrusq; dist[u] = D[u] ;\nend end \u03c6SVv \u00d0 \u03c6SVv ` fpdistrusq \u00b4 fp0q; dist[v] = 0 ;\nend\nAlgorithm 10: Marginal Contribution block of Algorithm 6 for g5 Counted\u00d0 false ; Weights\u00d0 0 ; foreach v P V pGq do\nforeach u P NGpvq Y tvu do weights[u]+= \u03bbpv, uq; if !Counted[u] and ( weights[u] \u011bWcutoff puq or u \u201c v ) then\n\u03c6SVv \u00d0 \u03c6SVv ` 1; Counted[u] = true ;\nend end\nend\ng2: Here, node v makes a positive contribution to a coalition P both through itself and through\nsome adjacent node u also under two conditions. Firstly, neither v nor u are in P . Secondly, there is less than k edges from P to v and there is exactly k \u00b4 1 edges from P to u. In order to check the first condition in Algorithm 7 we use the array Counted, and to check the second one, we use the array Edges. For each node vi, the algorithm iterates through the set of its neighbours and for each adjacent node it checks whether this adjacent node meets these two conditions. If so, then the marginal contribution of the node v is increased by one.\ng3{4: In Marginal Contribution blocks for games g3 and g4 (Algorithms 8 and 9), all the values\nthat are dependent on the distance (extNeighbours and D) are calculated using Dijkstra\u2019s algorithm and stored in memory. These pre-computations allow us to significantly speed up Monte Carlo methods. Now, in g3 node v makes a positive contribution to coalition P through itself and through some adjacent node u under two conditions. Firstly, neither v nor u are in P . Secondly, there is no edge length of dcutoff from P to v or u. To check for these conditions in Algorithm 8 we again use the array Counted. For each node v, the\n57\nalgorithm iterates through the set of its extended neighbours and for each of them it checks whether this neighbour meets the conditions. If so, the marginal contribution of the node v is increased by one. In game g4, node v makes a positive contribution to coalition P through each node (including itself) that is closer to vi than to P . In Algorithm 9 we use array Dist to store distances from coalition P to all nodes in the graph and arrayD to store all distances from v to all other nodes. For each node vi, the algorithm iterates through all nodes in the graph, and for each node u, if the distance from v to u is smaller than from P to u, the algorithm computes the marginal contribution as fpDrusq\u00b4fpDistrusq. The value Distrus is then updated to Drus\u2014this is a new distance from P to u. g5: In game g5, which is an extension of g2 to weighted graphs, node v makes a positive\ncontribution to coalition P (both through itself and through some adjacent node u) under two conditions. Firstly, neither v nor u are in P . Secondly, the sum of weights on edges from P to v is less than Wcutoff pviq and the sum of weights on edges from P to u is greater than, or equal to, Wcutoff puq \u00b4 \u03bbpv, uq and smaller than Wcutoff pviq ` \u03bbpv, uq. In order to check the first condition in Algorithm 10 we use the arrayCounted, and to check the second one, we use the array Weights. For each node vi, the algorithm iterates through the set of its neighbours and for each adjacent node it checks whether this adjacent node meets these two conditions. If so, then the marginal contribution of the node v is increased by one.\nSome details of how Algorithm 6 is applied to generate the Shapley value approximations for games g1 to g4, for which we propose exact polynomial solutions, differ from g5, for which we developed an approximate solution. Specifically, for games g1 to g4:\n1. We use the exact algorithm proposed in this chapter to compute the Shapley value. 2. Then, we run Monte Carlo simulations 30 times.9 In every run:\n\u2014 We perform maxIter Monte Carlo iterations. \u2014 After every five iterations, we compare the approximation of the Shapley value obtained\nvia Monte Carlo simulation with the exact Shapley value obtained with our algorithm.\n\u2014 We record the algorithm\u2019s runtime and the error, where the error is defined as the\nmaximum discrepancy between the actual Shapley value and the Monte Carlo-based approximation of the Shapley value.\n3. Finally, we compute the confidence interval using all iterations (0.95% confidence level).10\nIn the case of game g5 we cannot determine the exact Shapley value for larger networks. Therefore, we performed two levels of simulation: one level on small networks and one level on large networks. Specifically:\n9 For the purpose of comparison to our method, it suffices to use 30 iterations, as the standard errors converge significantly to indicate the magnitude of the cost of using the Monte Carlo method.\n10 Since for g4 each Monte Carlo iteration is relatively time consuming, we run it only once; thus, no confidence interval is generated, i.e., the third step is omitted.\n58\n1. For small networks, we generate 30 random instances of weighted complete graphs with\n6 nodes (denoted K6) and the same number of graphs with 12 nodes (denoted K12) with weights drawn from a uniform distribution Up0, 1q. Then, for each graph and each of the two parameters Wcutoff pvq \u201c 14\u03b1pvq and Wcutoff pvq \u201c 3 4 \u03b1pvq:11 \u2014 We compute the exact Shapley value using formula (6). \u2014 Then, we run our approximation algorithm and determine the error in our approximation. \u2014 Finally, we run 2000 and 6000 Monte Carlo iterations for K6 and K12, respectively. 2. For large networks, we again generate 30 random instances of weighted complete graphs,\nbut now with 1000 nodes (we denote them K1000). Then, for each graph and each of the three parameters Wcutoff pvq \u201c 14\u03b1pvq, Wcutoff pvq \u201c 2 4 \u03b1pvq, and Wcutoff pvq \u201c 34\u03b1pvq): \u2014 We run our approximation algorithm for the Shapley value. \u2014 Then, we run the fixed number (200000) of Monte Carlo iterations. \u2014 Finally, we compute how the Monte Carlo solution converges to the results of our\napproximation algorithm.\nHaving described the simulation setup, we will now discuss the data sets and, finally, the\nsimulation results."}, {"heading": "4.4.3. Data Used in Simulations", "text": "We consider two networks that have already been well-studied in the literature. Specifically, for games g1 \u00b4 g3 we present simulations on an undirected, unweighted network representing the topology of the Western States Power Grid (WSPG).12 This network (which has 4940 nodes and 6594 edges) has been studied in many contexts before (see, for instance, Watts and Strogatz [1998]) and is freely available online (see, e.g., http://networkdata.ics.uci.edu/ data.php?id=107). For games g3 \u00b4 g5 (played on weighted networks), we used the network of astrophysics collaborations (abbreviated henceforth APhC) between Jan 1, 1995 and December 31, 1999. This network (which has 16705 nodes and 121251 edges) is also freely available online (see, e.g., http://networkdata.ics.uci.edu/ data.php?id=13) and has been used in previous studies like Newman [2001]."}, {"heading": "4.4.4. Simulation Results", "text": "The results presented in this section show that our exact algorithms are, in general, much faster then the Monte Carlo sampling, and this is the case even if we allow for generous error tolerance. Furthermore, requiring smaller Monte Carlo errors makes the Monte Carlo runtime exponentially slower than our exact solution.\n11 Recall that \u03b1j is the sum of all the weights in Wj as defined in Section 4.3.5. 12 Note that with the distance threshold dcutoff replaced with a hop threshold kcutoff , game g3 can be played\non an unweighted network.\n59\n0\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n0 10 20 30 40 50 60 70 80 90 100\n0.43 ms\nTi m\ne (m\ns)\nMaximal allowable MC error (%)\nMonte Carlo solution Our exact solution\nFigure 4.3: g1, WSPG (UW)\n0\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n0 10 20 30 40 50 60 70 80 90 100\nTi m\ne (m\ns)\nMaximal allowable MC error (%)\nMonte Carlo solution Our exact solution\n0\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n0 10 20 30 40 50 60 70 80 90 100\n0.52 ms\nTi m\ne (m\ns)\nMaximal allowable MC error (%)\nMonte Carlo solution Our exact solution\nFigure 4.5: g2, ki \u201c degi2 , WSPG (UW)\n0\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n0 10 20 30 40 50 60 70 80 90 100\nTi m\ne (m\ns)\nMaximal allowable MC error (%)\nMonte Carlo solution Our exact solution\nFigure 4.6: g2, ki \u201c 34 degi, WSPG (UW)\nIn more detail, the simulation results for game g1 are shown in Figure 4.3. The dotted line shows the performance of our exact algorithm which needs 0.43ms to compute the Shapley value. In contrast, generating any reasonable Monte Carlo result takes a substantially longer time (the solid line shows the average and the shaded area depicts the confidence interval for Monte Carlo simulations). In particular, it takes on average more than 200ms to achieve a 20% error and more than 2000ms are required to guarantee a 5% error (which is more than 4600 times slower than our exact algorithm).\nFigures 4.4 - 4.6 concern game g2 for different values of k (k \u201c 2, ki \u201c degi2 , and ki \u201c 3 4 degi, respectively, where degi is the degree of node vi).13 The advantage of our exact algorithm over Monte Carlo simulation is again exponential.\nReplacing the distance threshold dcutoff with a hop threshold kcutoff enables game g3 to be played on an unweighted network. Thus, similarly to games g1 and g2, we test it on the Western States Power Grid. The results are shown on Figures 4.7 and 4.8 for kcutoff being equal to 2 and 3, respectively. The third game is clearly more computationally challenging than g1 and g2 (note that the vertical axis is in seconds instead of milliseconds). Now, our exact algorithm takes\n13 Recall that in g2 the meaning of parameter k is as follows: the value of coalition C depends on the number of nodes in the network with at least k neighbours in C.\n60\n13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n0 10 20 30 40 50 60 70 80 90 100\n13.03 s\nMaximal allowable MC error (%)\nMonte Carlo solution Our exact solution\nFigure 4.8: g3, kcutoff \u201c 3, WSPG (UW)\nabout 13s to complete. The much lower speedups of the exact methods with respect to Monte Carlo approach stem from the fact that both algorithms have to start with Dijkstra\u2019s algorithm. Although this algorithm has to be run only once in both cases it takes more than 12.5s for the considered network. This means that the exact solution is slower by orders of magnitude (compared to games g1 and g2). The Monte Carlo approach is also slower, but this slowdown is much less significant in relative terms.\nFigures 4.9 and 4.10 show the performance of the algorithms for game g3 on the astrophysics collaboration network that, unlike the Western States Power Grid, is a weighted network. We observe that increasing the value of dcutoff (here from dcutoff \u201c davg8 to dcutoff \u201c davg 4 ) significantly worsens the performance of the Monte Carlo-based algorithm. This is because the increasing number of nodes that have to be taken into account while computing marginal contributions (see the inner loop in Algorithm 8) is not only more time consuming, but also increases the Monte Carlo error.\nFor game g4 the performance of algorithms is shown in Figures 4.11 - 4.13 (for fpdq \u201c 11`d , fpdq \u201c 1\n1`d2 and fpdq \u201c e \u00b4d, respectively). Whereas the Monte Carlo methods for the first\nthree games are able to achieve a reasonable error bound in seconds or minutes, for the fourth game it takes more than 40 hours to approach 50% error. This is because the inner loop of the Marginal Contribution block (see Algorithm 9) iterates over all nodes in the network. Due to the time consuming performance we run the simulations only once. Interestingly, we observe that the error of the Monte Carlo method sometimes increases slightly when more iterations are performed. This confirms that the error of the Monte Carlo method to approximate the Shapley value proposed in Castro et al. [2009] is only statistically decreasing in time. Certain new randomly chosen permutations can actually increase the error.\nFigures 4.14, 4.15, 4.16 and 4.17 present comparisons of our approximation algorithm for game g5 against Monte Carlo sampling for small networks (for which the exact Shapley value can be computed from the Definition 5)). In these figures, the horizontal dotted line shows the\n61\n20\n40\n60\n80\n100\n120\n140\n160\n180\n0 10 20 30 40 50 60 70 80 90 100 4.41 min\nMaximal allowable MC error (%)\nMonte Carlo solution Our exact solution\nFigure 4.10: g3, dcutoff \u201c davg4 , APhC (W)\nrunning time of our solution, while the vertical dotted line shows its average approximation error with the shaded area being the confidence interval. As previously, the solid line shows the average, and the shaded area depicts the confidence interval for the Monte Carlo simulations. We see in Figures 4.14, 4.15 and 4.16 that the approximation error in our proposed algorithm is well-contained for small networks. Specifically, for K6 it is about 10%; whereas for the bigger network K12 it is about 5%. However, we notice that, for higher values of Wcutoff , the Monte Carlo method may slightly outperform our solution. See in Figure 4.15 how the average approximation error of the Monte Carlo sampling achieved in 0.38ms is lower than the average error achieved by our method. Already for K12 this effect does not occur (see Figure 4.17).\nFor large networks, where the exact Shapley value cannot be obtained, we are naturally unable to compute exact approximation error. We believe that this error may be higher than the values obtained forK6 andK12. However, the mixed strategy, that we discussed in Section 4.3.5 and that uses our approximation only for large degree vertices, should work towards containing the error within practical tolerance bounds. As far as we believe that Monte Carlo gives good results, from Figure 4.18, we can infer that our approximation solution for large networks gives good results (within 5%) and is at least two times faster than the Monte Carlo algorithm.\nTo summarise, our exact solutions outperform Monte Carlo simulations even if relatively wide error margins are allowed. However, this is not always the case for our approximation algorithm for game g5. Furthermore, it should be underlined that if the centrality metrics under consideration cannot be described with any of the games g1 to g4 for which exact algorithms are now available, then Monte Carlo simulations are still a viable option."}, {"heading": "4.5. Conclusions", "text": "The key finding of this chapter is that the Shapley value for many centrality-related cooperative games of interest played on networks can be solved analytically. In particular, we proposed\n62\n0\n5\n10\n15\n20\n25\n30\n35\n40\n0 10 20 30 40 50 60 70 80 90 100 8.78 min\nTi m\ne (h\n)\nMaximal allowable MC error (%)\nMonte Carlo solution Our exact solution\nFigure 4.11: g4, fpdq \u201c 11`d , APhC (W)\n0\n5\n10\n15\n20\n25\n30\n35\n40\n0 10 20 30 40 50 60 70 80 90 100 8.88 min\nTi m\ne (h\n)\nMaximal allowable MC error (%)\nMonte Carlo solution Our exact solution\nFigure 4.12: g4, fpdq \u201c 11`d2 , APhC (W)\nthe polynomial time algorithms for computing Shapley value-based degree and closeness cnetralities. The resulting algorithms are not only error-free, but also run in polynomial time (see Table 4.1) and, in practice, are much faster than Monte Carlo methods. Approximate closed-form expressions and algorithms can also be constructed for some classes of games played on weighted networks. Simulation results show that these algorithms are acceptable for a range of situations involving big networks.\n0 0.5\n1 1.5\n2 2.5\n3 3.5\n4 4.5\n5 5.5\n6 6.5\n7\n0 10 20 30 40 50 60 70 80 90 100\n0.38 ms\n14 .57\n% 10 .74 % 6.9 1 %\nTi m\ne (m\ns)\nMaximal allowable MC error (%)\nMonte Carlo solution Our approximation solution\nFigure 4.15: g5, Wcutoff \u201c 34\u03b1i, K6 (W),\n0 2 4 6 8\n10 12 14 16 18 20 22 24 26\n0 10 20 30 40 50 60 70 80 90 100\n2.74 ms\n4.7 1 % 4.9 1 % 5.1 2 %\nTi m\ne (m\ns)\nMaximal allowable MC error (%)\nMonte Carlo solution Our approximation solution\nFigure 4.17: g5, Wcutoff \u201c 34\u03b1i, K12 (W)\n64"}, {"heading": "5. Efficient Algorithms for a Game-Theoretic", "text": "Measure of Betweenness Centrality\nBetweenness centrality is a measure of the potential of individual nodes to control information flow in a network. In this chapter, we extend the standard definition of betweenness centrality and propose a family of game-theoretic measures based on Semivalues\u2014a large family of solution concepts from cooperative game theory that include, among others, the Shapley value and the Banzhaf power index. The key advantage of the game-theoretic betweenness centrality over the standard measure is the ability to rank nodes while taking into account any synergies that may exist in different groups of nodes. We develop polynomial time algorithms to compute the Semivalue-based betweenness centrality in general, and the Shapley value-based betweenness centrality in particular, both in weighted and unweighted graphs. Interestingly, for the unweighted case, our algorithm for computing the Shapley value-based centrality has the same complexity as the best known algorithm due to Brandes [2001] for computing the standard betweenness centrality. The new measures are evaluated in simulated scenario where simultaneous node failures occur. Compared to the standard measure, the ranking obtained by our measures reflects more accurately the influence that different nodes have on the functionality of the network. Finally, we empirically evaluate our algorithms on weighted and unweighted random scale-free graphs, and on two real network: an email communication network, and the neural system of C. elegans. This evaluation shows that our algorithms are significantly faster than the fastest alternative from the literature.\nAll algorithms, experiments and theorems presented in this chapter are an exclusive\ncontribution of the author of this thesis."}, {"heading": "5.1. Introduction", "text": "Betweenness centrality is a measure of control introduced independently by Anthonisse [1971] and Freeman [1979], which aims to determine the importance of a given node in the context of network flow. More specifically, in its standard form, betweenness centrality considers all shortest paths that pass through the node. The more shortest paths go through the node, the more important is the role of this node in the network.\n65\nBetweenness centrality (Definition 16) is one of the classical measures of centrality in network analysis, with the other measures being degree centrality, closeness centrality, and eigenvector centrality (see Section 2.7). Several applications of betweenness centrality have been considered in the literature [Puzis et al., 2007b, Dolev et al., 2010]. It has also been implemented in numerous software tools for network analysis [Brandes, 2008]. Furthermore, a variety of extensions of betweenness centrality have been proposed in order to suit the needs of particular applications. For instance, a well-known community detection algorithm by Girvan and Newman [2002] is based on edge betweenness centrality.\nOne of the characteristics of betweenness centrality, as well as the other classical centrality measures, is that it focuses on the role played by each node individually. However, such an approach can be inadequate if there exist non-negligible positive or negative synergies between nodes when their role is considered in groups. Simply put, classical centrality measures are not able to account for such synergies.\nTo address this problem, Everett and Borgatti [1999] introduced group centrality (see Definition 22). While group centrality measures have the advantage of taking synergies into account, these measures have their own shortcomings. Specifically, they produce a ranking of an exponential number of groups, which is hard to maintain in memory, and hard to reason about, as it is not obvious how to extract meaningful conclusions from so many groups. What would\n66\nbe more manageable is to produce a ranking of the nodes themselves, based on the ranking of all possible groups. The answer to it was given in the previous chapter where game-theoretic centrality measures was introduced (Definition 25).\nA potential downside of game-theoretic network centralities is that many methods from cooperative game theory are computationally challenging. For instance, given a coalitional game defined over a network of |V | nodes, a straight-forward computation of the Shapley value requires considering all possible 2|V | coalitions (i.e., groups) of nodes. This is clearly prohibitive for networks with hundreds, or even tens, of nodes. Indeed, it has been shown that in some cases the exponential number of computations cannot be avoided, i.e., it is impossible to compute particular game-theoretic network centralities in time polynomial in the size of the network.\nFortunately, the positive computational results have been given in the previous chapter where we analysed various game-theoretic extensions of degree and closeness centrality and showed that sometimes it is possible to leverage the fact that the synergies in coalitions depend on the topology of the network. As a result, it was showed that some game-theoretic centrality measures are indeed computable in polynomial time.\nNevertheless, the aforementioned positive results concerned solely the extensions of degree and closeness centralities which are, in general, computationally less challenging than betweenness centrality. In fact, no game-theoretic extension of betweenness centrality has been developed to date.\nIn this chapter, we fill the above gap in the literature by proposing and analysing the computational aspects of the game-theoretic betweenness centrality. This is the first game-theoretic centrality that is based on Semivalues\u2014a family of generalisations of the Shapley value that offer a wider spectrum of ways in which the role of nodes within various groups can be evaluated.\nAs our main contribution, we propose polynomial time algorithms to compute both the Shapley value-based and Semivalue-based betweenness centralities, for weighted graphs as well as unweighted graphs. Surprisingly, as shown in Table 5.1, for the unweighted case, our algorithm for computing the Shapley value-based centrality has the same complexity as the best known algorithm due to Brandes [2001] for computing the standard betweenness centrality, i.e., Op|V ||E|q, where V is the set of nodes and E set of edges in the network. Moreover, for Semivalues which are, in general, more computationally challenging than the Shapley value, the running time of our algorithm is Op|V |2|E|q (for the unweighted graphs). We consider three applications of the new centrality measures. The first one concerns the protection of computer network against Spyware\u2014the malicious computer programs, the second example is about the issue of measuring systemic importance of financial institutions [European Central Bank, 2010]. Under certain assumptions, the Shapley value- and the\n67\nSemivalue-based centrality measures turn out to be the exact solution to this problem. In the third application we simulate simultaneous node failures in a network. Following Albert et al. [2000] and Holme et al. [2002], among others, we quantify the functionality of the network based on the average inverse geodesic measure. The simulation results show that compared to the standard measure, the cardinal ranking obtained by our measures reflects more accurately the influence that different nodes have on the network functionality."}, {"heading": "5.2. The Overview of Computational Results", "text": "The literature review on centralities and game-theoretic centrality in particular, was already presented in Chapter 3. Now, we discuss the computational properties of the classical betweenness centrality. In particular, the fastest known dedicated algorithm to compute it is due to Brandes [2001]. The algorithm works in Op|V ||E|q time for unweighted graphs, and in Op|V ||E| ` |V |2 logp|V |qq time for weighted graphs, where V is the set of nodes and E set of edges in the network. Furthermore, group betweenness centrality for a pre-defined group of nodes can be computed in Op|V ||E|q time as shown by Brandes [2008]. Puzis et al. [2007b] developed an algorithm to compute group betweenness centrality of a given subset S. The algorithm starts with a preprocessing step (which alone takes Op|V |3q time), and then computes group betweenness centrality in Op|S|3q time.\nTable 5.1 summarises the above complexity results (for betweenness centrality and group betweenness centrality) as well as our computational results (for Shapley-based and Semivalue-based betweenness centralities). As can be seen, our algorithms also run in polynomial time, both for unweighted and weighted graphs. Observe that our algorithm for computing the Shapley value-based betweenness centrality for unweighted graphs has the same complexity as the aforementioned algorithm by Brandes [2001] for standard betweenness centrality, which is surprising given the much more complicated nature of our measure.\n68"}, {"heading": "5.3. The New Centrality and Its Properties", "text": "In this section we introduce a family of game-theoretic betweeneness centrality measures and discuss their basic properties. We start in Section 5.3.1 with a few motivating scenarios that demonstrate the need for a more involved centrality measure than standard betweenness centrality. Sections 5.3.2 and 5.3.3 introduce our Shapley value-based and Semivalue-based betweenness centralities, respectively. Finally, sections 5.3.4 and 5.3.5 analyse the marginal contributions of nodes, in the context of the Shapley value-based and Semivalue-based betweenness centralities, respectively."}, {"heading": "5.3.1. Motivating Scenarios", "text": "We will consider three motivating scenarios: protect computer network against malicious programs (Section 5.3.1), ranking institutions in a financial system according to their systemic importance (Section 5.3.1), and analysing network vulnerability (Section 5.3.1).\nDetecting Intrusion in a Network\nOne of the scenarios on detecting intrusion in a network considered in the literature is distributed network intrusion detection [Valdes and Skinner, 2001]. In a nutshell, the aim here is to filter the content of a network by installing some anti-spyware software on a chosen set of k nodes. Now, assuming that the majority of the network flow is transmitted through shortest paths, and ignoring the capacities of cables and routers, the best choice is to install the anti-spyware on the set of nodes S \u010e V, |S| \u201c k whose group betweenness centrality cgbpSq (Definition 22) is maximal. Unfortunately, the problem is NP-hard; nonetheless, there exists approximation algorithms to solve it [Puzis et al., 2007a].\nThe solution to the above problem can be used to guide the efforts to protect the most important nodes against a potential spyware attack. However, how to choose the optimal points to protect if we have limited resources and do not known in advance the size of the attack? To model such a situation, let us consider the following scenario. Suppose that nodes in a communication network have been exposed to the possibility of a random spyware infection. The more shortest paths there are that pass through the infected group, the worse it is for the network, because the malicious software may control or monitor the flow. Furthermore, suppose that neither the subset of infected nodes is known nor the size of the attack (i.e., the number of infected nodes). Assuming that the administrators\u2019 resources are limited and that the malicious software can be located at any workstation, a decision has to be made on which node to examine first. In other words, we need to identify a node that makes the biggest contribution to the spyware\u2019s ability to monitor the flow going through the infected nodes. Hence, we formalize this problem as follows:\n69\nProblem 1. Given a discrete probability distribution D : t1, \u00a8 \u00a8 \u00a8 , nu \u00d1 r0, 1s and a random subset S : |S| \u201e D, which node v P V in the graph G \u201c pV,Eq maximizes the expression: cgbpSq \u00b4 cgbpSztvuq.\nNow if it was known that exactly one node has been affected by the spyware attack (|S| \u201c 1) and that the single target was chosen uniformly at random, then the standard betweenness centrality would solve the above problem; the node with the highest such centrality is the solution. However, if there is a possibility that multiple nodes have been infected (|S| \u0105 1), then the standard betweenness centrality becomes insufficient. This is because betweenness centrality of a group of nodes is not necessarily equal to the sum of betweenness centralities of individual nodes within this group (see Figure 5.2 for an example). In other words, the following does not necessarily hold for every S \u010e V :\ncgbpSq \u201c \u00ff\nvPV cbpvq.\nHence, a node v P V that maximizes the expression cgbpSq \u00b4 cgbpSztvuq for some S \u010e V does not have to be the one with the highest standard betweenness centrality.\nIn this chapter we propose the polynomial-time exact solution to Problem 1 for a family of\nprobability distributions of choosing the set S.\nMeasuring Systemic Importance of Financial Institutions\nThe crisis of year 2007 and 2008 clearly showed the need for more stringent supervision of financial systems. As a result, a number of systemic risk monitoring and supervisory bodies have been created worldwide: the Financial Stability Oversight Council (USA), the European Systemic Risk Board and the Financial Stability Board. Furthermore, new prudential policies and regulations were laid out. Most notably, the Basel III accords aim at introducing micro- and macro-prudential regulations such as stricter capital reserve ratios, increased audit transparency and more thorough risk management by banks and other financial institutions.\nAt a discretion of supervising authorities, systemically important institutions may be asked to follow additional macro-prudential policies including a combination of capital surcharges, contingent capital and bail-in debt. As stated in the Financial Stability Board\u2019s interim report to G20 leaders, \u201cFinancial institutions should be subject to requirements commensurate with the risks they pose to the financial system\u201d [Financial Stability Board, 2010].\nIn this context, betweenness is considered to be the most suitable centrality to measure systemic importance of institutions in the financial system [European Central Bank, 2010]. In more detail, it has the following natural interpretation: \u201cthe betweenness of a bankA connecting pairs of nodes in the network is a measure of the dependence of these other banks from A to transfer the loans.\u201d [Gabrieli, 2011]. As a result, the higher betweenness centrality of an\n70\ninstitution is, the more attention and scrutiny it requires. It is feared that in the worst case, even one of the institution with the highest betweenness centrality may be able to bring down the entire system, due to contagion of illiquidity [Freixas et al., 2000].\nHowever, imposing additional capital requirements on financial institutions according to their standard betweenness centrality ignores the fact that financial crises are often ignited not by factors specific to a particular bank but by (combinations of) factors that simultaneously affect possibly many banks in the system. The infamous financial crises of 2009 started with the collapse of the subprime residential mortgage market in the United States and then spread to the rest of the world, due to the exposure to American real estate assets via a complex array of financial derivatives. As a result, many financial institutions in various countries asked for urgent state interventions [Laeven and Valencia, 2010].\nConsequently, it would be desirable to extend betweenness centrality so that it quantifies the betweenness of an individual institution but taking into account its role in various groups of institutions, as they can be affected simultaneously. We formalize this problem as follows:\nProblem 2. Given graph G \u201c pV,Eq, what is the (cardinal) ranking of nodes that reflects the marginal contribution of an individual node to group betweenness centrality of a random subset of nodes S : |S| \u201e D, i.e., cgbpSq \u00b4 cgbpSztvuq, where D : t1, \u00a8 \u00a8 \u00a8 , nu \u00d1 r0, 1s is a discrete probability distribution.\nThis problem extends the Problem 1 in the way, that we consider the whole cardinal ranking of nodes, instead of looking only for the most important individual. In this chapter, we propose the polynomial-time exact solution to Problem 2 for a family of probability distributions D of choosing set S.\nAnalysis of Network Vulnerability\nOne of the extensive research directions on betweenness centrality involves the analysis of network vulnerability [Bompard et al., 2010, Holme et al., 2002]. The aim is to identify (and possibly protect) the most critical nodes, whose removal degrades the functionality of the network the most. In this context, a standard measure used to assess the condition of the network is called the average inverse geodesic measure which, essentially, is a sum of inverse distances between any pair of nodes in the network [Holme et al., 2002, Albert et al., 2000]. Formally:\nIGMpV,Eq \u201c \u00ff\nvPV\n\u00ff\nv\u2030uPV\n1\ndpv, uq\nwhere dpu, vq is the distance, i.e., the length of the shortest path, between nodes u and v [Freeman, 1979].\nIn order to formalize the problem of network vulnerability, let us first note that it is possible to reformulate Problem 1 by assuming that we are looking for a set of nodes C \u010e V of a\n71\npre-defined size |C| \u201c c. This set should maximize the expression: cgbpSq \u00b4 cgbpSzCq, where S is a random subset of nodes S \u010e V such that l \u010f |S| \u010f k.\nNow, we define the problem of network vulnerability as follows:\nProblem 3. Given a discrete probability distribution D : t1, \u00a8 \u00a8 \u00a8 , nu \u00d1 r0, 1s and a random subset S : |S| \u201e D, which set of nodes C \u010e V of a given size |C| \u201c c in the graph G \u201c pV,Eq maximizes the expression: IGMpV zSq \u00b4 IGMpV zpSzCqq.\nwhere IGM stands for the average inverse geodesic measure.\nTo date, standard betweenness centrality has been advocated as an effective approximation that solves Problem 3 [Holme et al., 2002]. However, in Section 5.5, we experimentally show that the game-theoretic betweenness centrality achieves consistently better results than standard betweenness centrality."}, {"heading": "5.3.2. The Shapley Value-based Betweenness Centrality", "text": "In this subsection we will define group betweeness centrality. Firstly, recall that in our approach, we cast a network into the combinatorial structure of a coalitional game. That is, we consider all subsets of the set of nodes V pGq and we define a function that assigns to every such subset a numerical value; this value is in fact the subset\u2019s group betweenness centrality. Formally, borrowing notation from coalitional games, we define a tuple pV pGq, \u03bdq, where function \u03bd : 2V pGq \u00d1 R assigns to each S \u010e V pGq the value cgbpSq, and \u03bdpHq \u201c 0. This means that \u03bd returns the group betweenness centrality of any given subset of nodes. Now since pV pGq, \u03bdq has the same combinatorial structure as that of a coalitional game, we can use the Shapley\n72\nvalue to quantify the importance of nodes based on the impact their membership makes on group betweenness centrality. In other words, we obtain a measure of centrality of individual nodes which aggregates information about their role in group betweenness centrality across various groups. Formally, the Shapley value-based betweenness centrality measure is defined as follows:\nDefinition 28 (Shapley value-based betweenness centrality measure). Shapley-value based betweenness centrality is a pair p\u03c8B, \u03c6SV q consisting of a representation function \u03c8BpGq \u201c cgb that maps each graph to the game with group betweenness centrality and a Shapleu value solution concept \u03c6SV .\nExample 6. Consider again nodes v1 and v2 from Figure 5.2. Here:\n\u03c6SV1 pV pGq, \u03c8BpGqq \u201c 18.2 and \u03c6SV2 pV pGq, \u03c8BpGqq \u201c 16.0833.\nUnlike the standard betweenness centrality, the ranking produced by our Shapley-value based betweenness centrality reflects the fact that node v2 has many common shortest paths with v3, while v1 does not.\nIntuitively, the Shapley value-based betweenness centrality measure represents the load placed on a given node, taking into account the role it plays in all possible groups of nodes in the network. Moreover, the Shapley value-based betweenness centrality satisfies the same properties as the Shapley value (see Section 2.2). Let us translate them to the network context:\n1. Symmetry\u2014any two symmetric nodes vi and vj are assigned the same centrality, where symmetry refers here to the fact that the two nodes can be interchanged in any group of nodes\nwithout affecting the group\u2019s betweenness. Formally, if vpS Y tviuq \u201c vpS Y tvjuq @S \u010e V ztvi, vju, then: \u03c6SVi \u201c \u03c6SVj ;\n2. Marginality\u2014if a node\u2019s contribution to the group betweenness centrality of each subset of nodes in network G \u201c pV,Eq is no less than its contribution to the same subset in another network G1 \u201c pV,E 1q, then its centrality in the former network should be no less than in the latter one. Formally, for every pair of networks, G \u201c pV,Eq and G1 \u201c pV,E 1q, and functions \u03bdG and \u03bdG1 , defined as in equation (22), and for every node vi P V , if\n\u03bdGpS Y tviuq \u00b4 \u03bdGpSq \u011b \u03bdG1pS Y tviuq \u00b4 \u03bdG1pSq, @S \u010e V ztviu,\nthen \u03c6SVv in G is not smaller than \u03c6 SV v in G 1.\n3. Efficiency\u2014this property simply says that the sum of the Shapley value-based betweenness centralities for all the nodes in the network is normalised to 0, i.e., \u0159\nviPV \u03c6 SV i \u201c 0.1\n1 Note that the group betweenness centrality of the entire network, i.e., of the group S \u201c V , equals 0.\n73\nNaturally, it is also possible to normalize the Shapley value-based betweenness centrality so it ranges from 0 to 1. To this end, one should use \u03c6 SV i\n2 maxviPV cbpviq ` 1 2 . This is because\n@viPV @C\u010eV pcgbpC Y tviuq \u00b4 cgbpCqq \u010f cbpviq.\nObserve that the new centrality solves Problem 1 and Problem 2 exactly for a particular\nprobability distribution PD.\nProposition 3. The Shapley value-based betweenness centrality is the exact solution to Problem 1 and Problem 2 in a particular case in which each set S \u010e V of size |S| \u201c k \u0105 0 is chosen with probability 1\n|V |p|V |k q .\nProof. To show it, it is enough to rewrite formula (2.3) as follows:\n\u03c6SVi pV, \u03bdq \u201c 1 |V | \u00ff\n1\u010fk\u010f|V | 1 `|V |\u00b41 k\u00b41 \u02d8 \u00ff\nS\u010eV |S|\u201ck viPS\np\u03bdpSq \u00b4 \u03bdpSztviuqq (5.1)\nThe inner sum in the above equation runs through all subsets of nodes containing vi of a given size k, and `|V |\u00b41 k\u00b41 \u02d8 is the number of such subsets. The first fraction implies that the size k P t1, . . . , nu is chosen uniformly at random. The second fraction implies that out of all subsets of size k, one is chosen uniformly at random.\nFormula (5.1) has the following interpretation in the context of measuring systemic\nimportance of financial institutions:\n1. Fraction 1|V | means that the probability that the financial crises starts with a group of financial\ninstitutions of size |S| \u201c k is the same for any k (where k P t1, . . . , |V |u). We will denote this probability PDpV, kq.\n2. Fraction 1p|V |\u00b41k\u00b41 q means that the probability that each particular k-sized subset of institutions\ncontaining vi bankrupts is the same.\nWhile the latter implication seems natural, the former implication seems to be a special case. Arguably, it does not seem natural to assume that the probability of a single institution bankruptcy is exactly the same as the probability of having all institutions bankrupted (especially if the network is very large). To relax this assumption, we need to change the fraction 1|V | in equation (5.1). However, this fraction is inherent in the Shapley value. As such, modifying it requires adopting Semivalues as a centrality measure. In the next section, we show how this can be done.\n74"}, {"heading": "5.3.3. Semivalue-based Betweenness Centrality", "text": "Recall that a Semivalues defined in equation (2.5) generalises the Shapley value by allowing for different sequences of weights p|S| for each set S. Building upon Semivalues, we will now introduce a centrality measure that generalizes the Shapley value-based betweenness centrality.\nDefinition 29 (Semivalue-based betweenness centrality measure). Semivalue-based betweenness centrality measure is a pair p\u03c8B, \u03c6SEMI q consisting of a representation function \u03c8BpGq \u201c cgb that maps each graph to the game with group betweenness centrality and a Semivalue \u03c6SEMI .\nWe observe that the above family of Semivalue-based betweenness centrality measures inherits from Semivalues the properties of symmetry and marginality. Naturally, particular centralities may satisfy additional properties inherited from the corresponding solution concepts in coalitional games. For instance, it is not difficult to see that, similarly to the Banzhaf index [Casajus, 2011], the Banzhaf index-based betweenness centrality measure satisfies the \u201c2-Efficiency\u201d property. In essence, this property says that, for each pair of nodes u, v P V , if you consider them to be a single node vu (note that v and u are not merged, but they appear in each coalition together) then the Banzhaf index-based betweenness centrality of vu equals the sum of the Banzhaf index-based betweenness centralities of u and v.\nProposition 4. The Semivalue-based betweenness centrality is the exact solution to Problem 1 and Problem 2, where each set S \u010e V of size |S| \u201c k \u0105 0 is chosen with probability PDpV, kq 1p|V |k q .\nProof. To observe it, we transform formula (2.5) as follows:\n\u03c6SEMI pV, \u03bdq \u201c \u00ff\n1\u010fk\u010f|V | PDpV, kq 1`|V |\u00b41 k\u00b41 \u02d8 \u00ff\nS\u010eV |S|\u201ck viPS\npvpSq \u00b4 vpSztviuqq, (5.2)\nwhere PDpV, kq \u201c pk\u00b41 `|V |\u00b41 k\u00b41 \u02d8 .\nThe analysis of the above equation leads to the following. Each set vi P S \u010e pV ztviuq such that |S| \u201c k is chosen with probability PDpV, kq, and each group of equal size is chosen with equal probability, i.e., PDpV, kq \u00a8 1p|V\u00b41|k\u00b41 q .\nIn our motivating scenario of measuring systemic importance of financial institutions, with the Semivalue-based betweenness centrality we are able to assume an arbitrary probability distribution on the size of the bankrupting institution.\n75\nAlso the Semivalue-based between centrality can be normalized to the interval r0, 1s in the same manner as Shapley value-besed betweenness centrality. To this end, one needs to compute:\ncSpviq 2 maxviPV cbpviq ` 1 2\nIn the following subsections, we provide formal analysis of the Shapley value-based\nbetweenness centrality and the more-general Semivalue-based betweenness centrality."}, {"heading": "5.3.4. A Look at Marginal Contribution for the Shapley Value", "text": "The centrality of a node is measured by computing a weighted average of its marginal contribution to the group-betweenness centrality of all subsets of nodes in the graphs. In this subsection, we show how to compute this weighted average efficiently.\nTo this end, we will use Definition 6. More specifically, given a graph G and some vertex v P V pGq, we would like to compute the expected marginal contribution of this vertex to the set of vertices P\u03c0pvq that precede v in a random permutation of all vertices of the graph. We focus in our analysis on three exhaustive cases, where the marginal contribution is positive, negative, or neutral, respectively.\nFirst, let us consider positive contributions, and let us focus on some particular shortest path p which contains vertex v. Recall that we denote by \u03c3st the number of shortest paths between vertices s and t. Furthermore, we denote by \u03c3stpvq the number of shortest paths between vertices s and t that each pass through vertex v, where t \u2030 v \u2030 s (recall that every such path is said to be controlled by v). Every path in \u03c3stpvq has a positive contribution to the coalition P\u03c0pvq via vertex v if and only if the path is not controlled by (i.e., does not pass through) any vertex from the set P\u03c0pvq. In this case, the positive contribution equals 1\u03c3st . The necessary and sufficient condition for this to happen can be expressed by \u03a8ppq X P\u03c0pvq \u201c H, where \u03a8ppq is the set of all vertices lying on the path p, including endpoints.\nNow, let us introduce a Bernoulli random variable B`v,p which indicates whether vertex v\nmakes a positive contribution to the set P\u03c0pvq through shortest path p. Thus, we have:\nEr 1 \u03c3st B`v,ps \u201c 1 \u03c3st P r\u03a8ppq X P\u03c0pvq \u201c Hs,\nwhere P r\u00a8s denotes probability, and Er\u00a8s denotes expected value. In other words, we need to know the probability of having v precede all vertices from \u03a8ppqztvu in a random permutation of all vertices in the graph.\nTheorem 2. Let K be a set of elements such that |K| \u201c k. Furthermore, let L and R be two disjoint subsets of K, and let |L| \u201c l and |R| \u201c r. Now, given some element x P K, where\n76\nx R LYR, and given a random permutation \u03c0 P \u03a0pKq, the probability of having every element in L before x, and every element in R after x, is:\nP r@ePL\u03c0peq \u0103 \u03c0pxq ^ @ePR\u03c0peq \u0105 \u03c0pxqs \u201c 1pl`1qpl`r`1r q\nProof. Let us first count the number of ways in which a permutation \u03c0 P \u03a0pKq can be constructed such that the following condition holds: @ePL\u03c0peq \u0103 \u03c0pxq ^ @ePR\u03c0peq \u0105 \u03c0pxq. Specifically:2\n\u2014 Let us choose l ` r ` 1 positions in the permutation. There are ` k l`r`1 \u02d8 such choices.\n\u2014 Now, in the first l chosen positions, place all the elements of L. Directly after those, place\nthe element x. Finally, in the remaining r chosen positions, place all the elements of R. The number of such line-ups is: l!r!.\n\u2014 As for the remaining elements (i.e., the elements of KzpLYtxuYRq), they can be arranged in the permutation in pk \u00b4 pl ` r ` 1qq! different ways.\nThus, the number of permutations satisfying our condition is:\n`\nk l`r`1\n\u02d8\nl!r!pk \u00b4 pl ` r ` 1qq! \u201c k! pl`1qpl`r`1r q .\nFinally, since we have a total of k! permutations, the probability that one of them satisfies\nour condition is given by equation (5.3).\nBased on Theorem 2, we can obtain the probability of an event in which the vertex v lies on the path p and precedes all the other vertices from this path in a random permutation of all vertices in the graph G. Now, by setting K \u201c V pGq, L \u201c H and R \u201c \u03a8ppqztvu, we obtain the desired probability: 1|\u03a8ppq| . Thus:\nEr 1 \u03c3st B`v,ps \u201c 1 \u03c3st|\u03a8ppq| . (5.3)\nHaving discussed the first case, where marginal contributions are positive, let us now discuss the second case, where the marginal contribution of vertex v to set P\u03c0pvq is negative. This happens when path p ends or starts with v (w.l.o.g. we consider v as the end point). Specifically, if coalition P\u03c0pvq already controls path p (which includes vertex v), then not only is there no value added from v becoming a member of this coalition, but there is a negative effect of this move. In particular, the group betweenness centrality assumes that a set of vertices S controls only those paths with both ends not belonging to S. Therefore, when v becomes a member of\n2 We thank the anonymous reviewer for suggesting this formulation of the proof.\n77\ncoalition P\u03c0pvq, its negative contribution through path p equals \u00b4 1\u03c3sv , where \u03c3sv denotes the number of paths that start with s and end with v.\nNext, we analyse the probability of such a negative contribution of vertex v. Observe that if the marginal contribution is negative, then p must end with v. However, the opposite does not necessarily hold, i.e., if p ends with v then the marginal contribution of v is not necessarily negative; it could also be neutral. Based on this, in order to compute the probability of a negative contribution, we will start by focusing on the complementary event where v makes a neutral contribution to the set P\u03c0pvq, as this simplifies the computational analysis. This complementary event happens if and only if either vertex s\u2014the starting point of path p\u2014belongs to set P\u03c0pvq, or the path p is not controlled by any of the vertices in P\u03c0pvq. Formally:\ns P P\u03c0pvq _ p\u03a8ppq X P\u03c0pvqq \u201c H.\nBased on this, we can introduce a Bernoulli random variable B\u00b4v,p indicating whether vertex v makes a negative contribution through path p to set P\u03c0pvq as follows:\nEr\u00b4 1 \u03c3sv B\u00b4v,ps \u201c \u00b4 1 \u03c3sv p1\u00b4 P rs P P\u03c0pvq _ p\u03a8ppq X P\u03c0pvqq \u201c Hsq.\nAgain, one can show with the combinatorial arguments presented in Theorem 2 that this probability is P r\u03a8ppq X P\u03c0pvq \u201c Hs \u201c 1|\u03a8ppq| . Furthermore, due to symmetry, we have: P rs P P\u03c0pvqs \u201c 12 . Finally, from the disjointness of the aforementioned complementary events, we have:\nEr\u00b4 1 \u03c3sv B\u00b4v,ps \u201c 2\u00b4 |\u03a8ppq| 2\u03c3sv|\u03a8ppq| . (5.4)\nRecall that our analysis was divided into three exhaustive cases, where the marginal contribution is positive, negative, or neutral. Having dealt with the first two cases, it remains to deal with the case of neutral marginal contribution. Since this case does not affect the expected marginal contribution of v to P\u03c0pvq, we simply disregard it during the computation. Next, let us compute the expected marginal contribution, by aggregating the cases of positive and negative contributions. To this end, let Bst be the set of all shortest paths from s to t, and analogously let Bstpvq \u010e Bst be the set of shortest paths from s to t that pass through vertex v.3 Now, using the expected value of the Bernoulli random variables (5.3) and (5.4) we are able to compute the Shapley value of vertex v, which is the expected marginal contribution of v to P\u03c0pvq, as:\n3 Note that \u03c3st \u201c |Bst| and \u03c3stpvq \u201c |Bstpvq|.\n78\n\u03c6SVv pV pGq, \u03bdq \u201c \u00ff\ns\u2030v\u2030t\n\u00ff\npPBstpvq\nEr 1 \u03c3st B`v,ps ` \u00ff\ns\u2030v\n\u00ff\npPBsv\nEr\u00b4 1 \u03c3st B\u00b4v,ps\n\u201c \u00ff\ns\u2030v\u2030t\n\u00ff\npPBstpvq\n1\n\u03c3st|\u03a8ppq| ` \u00ff\ns\u2030v\n\u00ff\npPBsv\n2\u00b4 |\u03a8ppq| 2\u03c3sv|\u03a8ppq| . (5.5)\nInterestingly, the above equation provides insight into the Shapley value-based betweenness centrality, which is a combination of two factors. Firstly, the left sum resembles the standard betweenness centrality, but scaled by the number of vertices that belong to each shortest path. Secondly, the right sum resembles the closeness centrality,4 but with distances measured as the number of vertices on the shortest paths."}, {"heading": "5.3.5. A Look at Marginal Contribution for the Semivalue", "text": "We start our analysis by rewriting equation (5.2) as:\n\u03c6SEMIv pV, \u03bdq \u201c \u00ff\n1\u010fk\u010f|V |\nPDpV, kqEk\u00b41,vr\u00a8s, (5.6)\nwhere Ek\u00b41,vr\u00a8s is the expected marginal contribution of vertex v to a random coalition of size k \u00b4 1. So, analogously to the previous subsection, we need to analytically compute the probability that the node v contributes to a coalition through a shortest path p. Again, here we only focus on the case of positive contribution and the case of negative contribution, since the neutral case has no impact on the expected marginal contribution. We will denote by Sk\u00b41 \u010e V a random coalition of size k \u00b4 1 uniformly drawn from the set tS \u010e V ztvu : |S| \u201c k \u00b4 1u.\nFirstly, we consider positive contributions. In what follows, let us focus on some particular shortest path p which contains vertex v. This path has a positive contribution to the coalition Sk\u00b41 through v if and only if it is not controlled by (i.e., does not pass through) any vertex from set Sk\u00b41. In this case, the positive contribution equals 1\u03c3st . The necessary and sufficient condition for this to happen can be expressed by \u03a8ppqXSk\u00b41 \u201c H, where \u03a8ppq is the set of all vertices lying on the path p including endpoints.\nNow, let us introduce a Bernoulli random variable BS`k\u00b41,v,p which indicates whether vertex v makes a positive contribution through path p to set Sk\u00b41. Note that, if |V | \u00b4 \u03a8ppq \u0103 k \u00b4 1 then the probability of this event equals 0. Otherwise, we have:\n4 Recall that closeness centrality assigns to each vertex v the value of \u0159 u 1 dpu,vq .\n79\nEr 1 \u03c3st BS`k\u00b41,v,ps \u201c 1 \u03c3st P r\u03a8ppq X Sk\u00b41 \u201c Hs \u201c 1 \u03c3st\n`|V |\u00b4\u03a8ppq k\u00b41 \u02d8\n`|V |\u00b41 k\u00b41 \u02d8\n\u201c p|V | \u00b4\u03a8ppqq!p|V | \u00b4 kq! \u03c3stp|V | \u00b4\u03a8ppq \u00b4 k ` 1q!p|V | \u00b4 1q! , (5.7)\nwhere P r\u00a8s denotes probability, and Er\u00a8s denotes expected value. In other words, we need to know the probability of having random set Sk\u00b41 containing v and not containing any vertex from \u03a8ppqztvu. Having analysed the case of positive contribution, we now move on to the case of negative contribution. This happens when the path p ends with v and is controlled by the set Sk\u00b41, i.e., p passes through at least one of the nodes in Sk\u00b41, where v R Sk\u00b41. As in the previous subsection, we will simplify the analysis by focusing on the complementary event in which the marginal contribution is neutral. Observe that v makes a neutral contribution to set Sk\u00b41 through a path p P Bsv if and only if either vertex s\u2014the end point of path p\u2014belongs to the set Sk\u00b41, or the path is not controlled by any of the vertices in Sk\u00b41. Formally:\ns P Sk\u00b41 _ p\u03a8ppq X Sk\u00b41q \u201c H.\nBased on this, we can introduce a Bernoulli random variable BS\u00b4k\u00b41,v,p indicating whether that vertex v makes a negative contribution through path p to set Sk\u00b41. Now if |V | \u00b4\u03a8ppq \u011b k \u00b4 1, we obtain the following expression:\nEr\u00b4 1 \u03c3sv BS\u00b4k\u00b41,v,ps \u201c \u00b4 1 \u03c3sv p1\u00b4 P rs P Sk\u00b41 _ p\u03a8ppq X Sk\u00b41q \u201c Hsq\n\u201c \u00b4 1 \u03c3sv \u00b4 1\u00b4 ` k \u00b4 1 |V | \u00b4 1` p|V |\u00b4\u03a8ppqq!p|V | \u00b4 kq! p|V |\u00b4\u03a8ppq\u00b4k`1q!p|V |\u00b41q! \u02d8 \u00af \u201c k \u00b4 1 \u03c3svp|V |\u00b41q ` p|V |\u00b4\u03a8ppqq!p|V | \u00b4 kq! \u03c3svp|V |\u00b4\u03a8ppq\u00b4k`1q!p|V |\u00b41q! q\u00b4 1 \u03c3sv . (5.8)\nOn the other hand, if |V | \u00b4\u03a8ppq \u0103 k \u00b4 1, we obtain the following expression:\nEr\u00b4 1 \u03c3sv BS\u00b4k\u00b41,v,ps \u201c k \u00b4 1 \u03c3svp|V |\u00b41q \u00b4 1 \u03c3sv . (5.9)\nNow, let us compute the expected marginal contribution, by aggregating the cases of positive and negative contributions. To this end, recall that Bst is the set of all shortest paths from s to t, and, analogously, Bstpvq \u010e Bst is the set of shortest paths from s to t passing through vertex v. Now, using the expected value of Bernoulli random variables (5.7), (5.8) and (5.9) we are able to compute the Semivalue of vertex v by using equation (5.6):\n80\n\u03c6SEMIv \u201c \u00ff\n0\u010fk\u010f|V |\u00b41\nPDpV,k`1q \u00b4 \u00ff\ns\u2030v\u2030t\n\u00ff\npPBstpvq\nEr 1 \u03c3st BS`k,v,ps\u0300 \u00ff\ns\u2030v\n\u00ff\npPBsv\nEr\u00b4 1 \u03c3st BS\u00b4k,v,ps \u00af\n\u201c \u00ff\n1\u010fk\u010f|V |\nPDpV, kq \u02dc \u00ff\ns\u2030v\u2030t\n\u00ff\npPBstpvq |V |\u00b4\u03a8ppq\u011bk\u00b41\np|V |\u00b4\u03a8ppqq!p|V |\u00b4kq! \u03c3stp|V |\u00b4\u03a8ppq\u00b4k`1q!p|V |\u00b41q!\n` \u00ff\ns\u2030v\n\u00b4 k \u00b4 |V | |V |\u00b41 ` \u00ff\npPBsv |V |\u00b4\u03a8ppq\u011bk\u00b41\np|V |\u00b4\u03a8ppqq!p|V | \u00b4 kq! \u03c3svp|V |\u00b4\u03a8ppq\u00b4k`1q!p|V |\u00b41q! \u00af\n\u00b8\n. (5.10)\nWhile the closed-form formulas (5.10) and (5.5) allow us to efficiently compute in polynomial time the Shapley value-based and Semivalue-based betweenness centralities, respectively, in the following section we introduce algorithms that perform this computation even more efficiently."}, {"heading": "5.4. Algorithms to Compute the Shapley Value and Semivalue based", "text": "Betweenness Centralities\nGenerally speaking, given a graph G, computing the Shapley value takes Op2|V pGq|q time (to consider all subsets of V pGq). To circumvent this major obstacle, we proposed formulas (5.5) and (5.10) to compute in polynomial time the Shapley Value and the Semivalue, respectively. To speed up the computation even further, we propose in this section four algorithms:\n1. Algorithm SVB computes the Shapley value-based betweenness centrality given an unweighted graph;\n2. Algorithm SB computes the Semivalue-based betweenness centrality given an unweighted graph;\n3. Algorithm WSVB computes the Shapley value-based betweenness centrality given a weighted graph;\n4. Algorithm WSB computes the Semivalue-based betweenness centrality given a weighted graph.\nWe also show in this section how the above algorithms can be easily adapted to work on directed graphs. Interestingly, we show that Algorithm SVB has the same complexity as the best known algorithm to compute the standard betweenness centrality (due to Brandes, 2001). Our algorithms are based on a general framework proposed in this chapter, which generalises Brandes\u2019 framework [Brandes, 2001].\n81\nThis section is structured as follows. Section 5.4.1 introduces our generalisation of Brandes\u2019 framework for unweighted graphs. Building upon it, Sections 5.4.2 and 5.4.3 introduce Algorithm SVB and Algorithm SB, respectively. After that, in Section 5.4.4, we introduce our generalisation of Brandes\u2019 framework for weighted graphs. Finally, Sections 5.4.5 and 5.4.6 introduce Algorithm WSVB and Algorithm WSVB, respectively."}, {"heading": "5.4.1. The Framework for Unweigthed Graphs", "text": "In order to compute the standard betweenness centrality for all nodes, a na\u00efve algorithm would first compute the number of shortest paths between all pairs of nodes, and then for each node v sum up all pair-dependencies, which are defined as \u03c3stpvq \u03c3st\n. This process takes Op|V |3q time. Brandes [2001] proposed an algorithm to improve this complexity by using some recursive relation. This algorithm runs in Op|V | \u00a8 |E|q time, and requires Op|V | ` |E|q space. Next, we propose a framework that generalises Brandes\u2019 algorithm. We start by defining pair-dependency as:\n\u03b4s,tpvq \u201c \u03c3stpvq \u03c3st f\u03b4pdps, tqq, (5.11)\nwhich is the positive contribution that all shortest paths between s and t make to the assessment of vertex v. The value of the function f\u03b4 depends solely on the distance between s and t. For instance, if we set f\u03b4 \u201c 1dps,tq we obtain the distance-scaled betweenness centrality introduced by Borgatti and Everett [2006].\nNext, we define one-side dependency as:\n\u03b4s,\u00a8pvq \u201c \u00ff\ntPV \u03b4s,tpvq, (5.12)\nwhich is the positive contribution that all shortest paths starting in vertex s make to the assessment of vertex v. Now, building upon the recursive equation proposed by Brandes [2001], we obtain the following:\n\u03b4s,\u00a8pvq \u201c \u00ff\nw: pv,wqPE dps,wq\u201cdps,vq`1\n\u03c3sv \u03c3sw\n\u02c6 f\u03b4pdps, wqq ` \u03b4s,\u00a8pwq \u02d9 . (5.13)\nUsing the above equation, we can compute what we call the parameterised betweenness centrality cfg for a vertex v by iterating over all other vertices and summing their contributions as follows:\ncfgpvq \u201c \u00ff\ns\u2030v\n\u02c6 \u03b4s,\u00a8pvq ` g\u03b4pdps, vqq \u02d9 , (5.14)\nwhere the value of the function g\u03b4 depends solely on the distance between s and v.\n82\nAlgorithm 11: PBC\u2014a general framework to compute the parametrised betweenness centrality in unweighted graphs\nInput: Graph G \u201c pV,Eq, functions: f\u03b4 and g\u03b4 Data: queue Q, stack S for each v P V and some source s dps, vq : distance from v to the source s Predspvq : list of predecessors of v on the shortest paths from source s \u03c3sv : the number of shortest paths from s to v \u03b4s,\u00a8pvq : the one-side dependency of s on v Output: cfgpvq parametrised betweenness centrality for each vertex v P V\n1 foreach v P V do cfgpvq \u00d0 0; 2 foreach s P V do 3 foreach v P V do 4 Predspvq \u00d0 empty list; dps, vq \u00d0 8; \u03c3sv \u00d0 0; 5 dps, sq \u00d0 1; \u03c3ss \u00d0 1; enqueue s\u00d1 Q; 6 while Q is not empty do 7 dequeue v \u00d0 Q; push v \u00d1 S; 8 foreach w such that pv, wq P E do 9 if dps, wq \u201c 8 then\n10 dps, wq \u00d0 dps, vq ` 1; enqueue w \u00d1 Q; 11 if dps, wq \u201c dps, vq ` 1 then 12 \u03c3sw \u00d0 \u03c3sw ` \u03c3sv; append v \u00d1 Predspwq;\n13 foreach v P V do 14 \u03b4s,\u00a8pvq \u00d0 0; 15 while S is not empty do 16 pop w \u00d0 S; 17 foreach v P Predspwq do 18 \u03b4s,\u00a8pvq \u00d0 \u03b4s,\u00a8pvq `\n\u03c3sv \u03c3sw pf\u03b4pdps, wqq ` \u03b4s,\u00a8pwqq;\n19 if w \u2030 s then 20 cfgpwq \u00d0 cfgpwq ` \u03b4s,\u00a8pwq ` 2g\u03b4pdps, wqq;\n21 foreach v P V do 22 cfgpvq \u201c cfgpvq\n2 ;\nNow, we are ready to introduce our generalised framework, PBC (see Algorithm 11) for computing the parametrised betweenness centrality in unweighted graphs. More specifically, this framework modifies Brandes\u2019 approach and computes the betweenness centrality parametrised by two functions: f\u03b4 and g\u03b4. All lines that differ from the original Brandes\u2019 algorithm were highlighted.\nFirstly, in lines 6 - 12, the algorithm calculates both the distance and the number of shortest paths from a source s to each vertex. These lines are exactly the same as in the original\n83\nalgorithm introduced by Brandes. While executing these lines, for each vertex v, all directly preceding vertices occurring on shortest paths from s to v are stored in memory. This process uses Breadth-First Search [Cormen, 2001] which takes Op|V |q time and Op|V | ` |E|q space. In the second step (lines 18 and 20), the algorithm uses formula (5.14) to calculate the contribution of the source s to the value of our betweenness centrality for each vertex that is reachable from the source. This step also takes Op|V |q time and Op|V | ` |E|q space. Only lines 18 and 20 and additionally line 21 differ from the original Brandes algorithm.\nAs visible in formula (5.14), in an undirected graph, each path is considered twice. Thus, at the end of the algorithm, in line 21, we halve the accumulated result. In line 20, we multiply the influence of the function g\u03b4 by two, because the influence of each source even in undirected graphs is considered only once. Finally, we note that it is very easy to adopt Algorithm 11 to directed graphs. To this end, we remove the loop from line 21 and halve the contribution of the vertex s from line 20, which now should look as follows:\n20 : cfgpwq \u00d0 cfgpwq ` \u03b4s,\u00a8pwq ` g\u03b4pdps, wqq;\nSo, for directed and undirected graphs, the algorithm runs in Op|V | \u00a8 |E|q time, and requires Op|V | ` |E|q space."}, {"heading": "5.4.2. The Algorithm for the Shapley Value-based Betweenness Centrality for", "text": "Unweighted Graph\nIn this subsection we will construct an efficient algorithm for computing the Shapley value-based betweenness centrality for unweighted graphs. Specifically, in such graphs, the number of vertices on the shortest path between s and t is equal to the distance between s and t, denoted as dps, tq.5 In other words, we have: |\u03a8ppq| \u201c dps, tq. Based on this, it is possible to simplify (5.5) as follows:\n\u03c6SVv pV pGq, \u03bdq \u201c \u00ff\ns\u2030v\u2030t\n\u00ff\npPBstpvq\n1\n\u03c3stdps, tq ` \u00ff\ns\u2030v\n\u00ff\npPBsv\n2\u00b4 dps, vq 2\u03c3svdps, vq\n\u201c \u00ff\ns\u2030v\n\u02c6\n\u00ff\nt\u2030v\n\u03c3stpvq \u03c3stdps, tq ` 2\u00b4 dps, vq 2dps, vq\n\u02d9\n. (5.15)\nThe above equation provides the same insight as equation (5.5) but for specific unweighted\ngraphs. By transforming the second element of the inner sum 2\u00b4dps,vq 2dps,vq \u201c 1 dps,vq \u00b4 1 2 we find that, in unweighted graphs, the Shapley value using group betweenness centrality as a characteristic function is in fact the sum of the distanced scaled betweenness centrality (introduced by\n5 For notational convenience, we assume the distance between two vertices to be the number of vertices on the shortest path between them (not the number of edges), e.g., dps, sq \u201c 1.\n84\nAlgorithm 12: SVB SV-based betweenness centrality Input: Graph G \u201c pV,Eq Output: \u03c6SVv SV-based betweenness centrality for each vertex v P V 1 f\u03b4pdq \u00d0 1d ; 2 g\u03b4pdq \u00d0 2\u00b4d2d ; 3 PBCpG, f\u03b4, g\u03b4q\nBorgatti and Everett, 2006) and the closeness centrality, shifted by half. Additionally, the above equation allows us to compute the Shapley value-based betweenness centrality in Op|V |3q, but this result will be improved further.\nNow, we adopt the framework presented in the previous subsection in order to accommodate equation (5.15). We simply need to set f\u03b4 \u201c 1dps,tq and set g\u03b4 \u201c 2\u00b4dps,vq 2dps,vq . This way, we can use our general framework\u2014PBC, see Algorithm 11\u2014to compute the Shapley value-based betweenness centrality in Op|V ||E|q. This method is presented in Algorithm 12."}, {"heading": "5.4.3. The Algorithm for the Semivalue-based Betweenness Centrality for Unweighted", "text": "Graphs\nWe will follow the same reasoning as in the previous subsection. Specifically, since in unweighted graphs it holds that |\u03a8ppq| \u201c dps, tq, we can transform equation (5.10) into:\n\u03c6SEMIv pV pGq, \u03bdq\u201c \u00ff\n1\u010fk\u010f|V |\nPDpV, kq \u02dc \u00ff\ns\u2030v\u2030t\n\u00ff\npPBstpvq |V |\u00b4dps,tq\u011bk\u00b41\np|V |dps, tqq!p|V |\u00b4kq! \u03c3stp|V |\u00b4dps, tq\u00b4k`1q!p|V |\u00b41q!\n` \u00ff\ns\u2030v\n\u00b4 k \u00b4 |V | |V |\u00b41 ` \u00ff\npPBsv |V |\u00b4dps,vq\u011bk\u00b41\np|V |\u00b4dps, vqq!p|V | \u00b4 kq! \u03c3svp|V |\u00b4dps, vq\u00b4k`1q!p|V |\u00b41q! \u00af\n\u00b8\n\u201c \u00ff 1\u010fk\u010f|V |\nPDpV, kq \u02dc\n\u00ff\ns\u2030v\u2030t |V |\u00b4dps,tq\u011bk\u00b41\n\u03c3stpvqp|V |\u00b4dps, tqq!p|V | \u00b4 kq! \u03c3stp|V |\u00b4dps, tq\u00b4k`1q!p|V | \u00b4 1q!\n` \u00ff\ns\u2030v |V |\u00b4dps,vq\u011bk\u00b41\n\u00b4 p|V |\u00b4dps, vqq!p|V | \u00b4 kq! p|V |\u00b4dps, vq\u00b4k`1q!p|V |\u00b41q! \u00af\n` k \u00b4 |V | \u00b8 . (5.16)\nOur framework can be easily adopted to deal with the Semivalue; all we need to do is to\nset:\nf\u03b4 \u201c\n$ \u2019 \u2019 &\n\u2019 \u2019 %\np|V |\u00b4dq!p|V |\u00b4kq! p|V |\u00b4d\u00b4k`1q!p|V |\u00b41q! if |V | \u00b4 dps, tq \u011b k \u00b4 1\n0 if |V | \u00b4 dps, tq \u0103 k \u00b4 1\n85\nAlgorithm 13: SB Semivalue-based betweenness centrality Input: Graph G \u201c pV,Eq Output: \u03c6SEMIv Semivalue-based betweenness centrality for each vertex v P V 1 f\u03b4pdq \u00d0 if |V | \u00b4 d \u011b k \u00b4 1 then p|V |\u00b4dq!p|V |\u00b4kq!p|V |\u00b4d\u00b4k`1q!p|V |\u00b41q! else 0 g\u03b4pdq \u00d0 f\u03b4pdq ` k\u00b4|V | |V |\u00b41 ; 2 for k \u00d0 1 to |V | do 3 PBCpG, f\u03b4, g\u03b4q ; 4 foreach v P V do 5 \u03c6SEMIv \u00d0 PDpV, kqcfgpvq;\nand set g\u03b4 \u201c f\u03b4 ` k\u00b4|V ||V |\u00b41 . This way, we can use equation (5.16) along with our general framework\u2014PBC, see Algorithm 11\u2014to compute the Semivalue-based betweenness centrality for unweighted graphs in Op|V |2|E|q time. The pseudo code is provided in Algorithm 13."}, {"heading": "5.4.4. The Framework for Weighted Graphs", "text": "While the focus of the previous subsections was on unweighted graphs, in this subsection we show how to generalise our framework to deal with weighted graphs. In particular, we consider one of the most popular semantics of weighted graphs, where the weight \u03bbpv, uq of the edge between v and u is interpreted as the distance between v and u . Thus, unlike the case with unweighted graphs, where |\u03a8ppq| \u201c dps, tq, in the case of weighted graphs this equality does not necessarily hold.\nTo introduce our generalised framework, we need additional notation. Let Tstris : i P t1, . . . , |V |u be the number of shortest paths between s and t that contain exactly i vertices. The array Tst uniquely determines the polynomial Wst with terms Tstrisxi. We define the following operations on Tst:\n\u2014 Shifting: T\u00d1st and T\u00d0st increase and decrease the indices of all values of the array by one, respectively. This takes Op|V |q time. \u2014 Adding: Tsv\u2018Tsu is the operation of adding two polynomialsWsv andWsu. It takesOp|V |q time. We will denote by \u00c0 the sum of a series of polynomials. \u2014 Multiplying: Tsv b Tvt is the operation of multiplying two polynomials Wsv and Wvt. This takesOp|V | log |V |q time using the polynomial multiplying algorithm from [Cormen, 2001]. \u2014 Resetting: Tsv \u00d0 0 is an operation that assigns 0 to each cell in Tsv.\nNext, we will show how the above operations allow us to tackle two algorithmic problems: (i) how to count all shortest paths and (ii) how to derive the recursive relation in order to compute one-side dependency. We start by considering the first of those problems, i.e., counting the\n86\nshortest paths. Here, we will use the following relation:\nTsv \u201c \u00e0 u: dps,uq`\u03bbpu,vq\u201cdps,vq T\u00d1su . (5.17)\nUsing Dijkstra\u2019s algorithm [Cormen, 2001], as well as equation (5.17), we can compute Tst for every pair of nodes s and t. If vertex u immediately precedes vertex v on some shortest path from source s, all shortest paths stored in Tsu extended by vertex v are part of the set of shortest paths stored in Tsv. This procedure takes Op|V |2|E| ` |V |2 log |V |q time. Secondly, in order to count all paths passing through a given node v, we will introduce the following relationship, where Tstpvq is an array defined just like Tst except that it only counts the shortest paths between vertices s and t that pass through v:\nTstpvq \u201c pTsv b Tvtq\u00d0st \u201c Tsv b T\u00d0vt . (5.18)\nThe above equation can be interpreted as follows. Every path stored in the array Tsv can be extended by every path stored in the array Tvt. The outcome of this operation, which is in fact the multiplication of the two polynomials Wsv and Wvt, gives us information about all shortest paths from s to t passing through v. The vertex v is counted twice. To avoid duplicate counting, we shift the result of multiplication to the left, which effectively reduces the number of nodes in each path by one.\nIn weighted graphs the pair-dependency limited to the shortest paths consisting of i nodes\nis defined as follows:\n\u03b4\u02das,tpvqris \u201c Tstpvqris \u03c3st f\u03b4\u02dapiq. (5.19)\nThis limited pair-dependency measures the influence of all shortest paths between s and t consisting of i nodes on the evaluation of vertex v. The value of the function f\u03b4\u02da depends solely on the number of nodes lying on the shortest paths between s and t.\nTaking all possible values of i into consideration, we obtain the pair-dependency in weighted\ngraphs:\n\u03b4\u02das,tpvq \u201c |V | \u00ff\ni\u201c1 \u03b4\u02das,tpvqris, (5.20)\nwhich is the positive contribution that all shortest paths between s and t make to the assessment of vertex v,\nThe definition of one-side dependency is similar to the one presented earlier in\nSubsection 5.4.1, except that we replace \u03b4 with \u03b4\u02da:\n\u03b4\u02das,\u00a8pvq \u201c \u00ff tPV \u03b4\u02das,tpvq. (5.21)\n87\nThis is the positive contribution that all shortest paths starting with vertex s make to the evaluation of vertex v. The version of equation (5.21) that only considers the shortest paths containing exactly i nodes each is:\n\u03b4\u02das,\u00a8pvqris \u201c \u00ff tPV \u03b4\u02das,tpvqris, (5.22)\nNow, we are able to infer the recursive relation for weighted graphs:\n\u03b4\u02das,\u00a8pvqris \u201c \u00ff\nw: pv,wqPE dps,wq\u201cdps,vq`1\nTsvris \u03c3sw\n\u02c6 f\u03b4\u02dapi` 1q ` \u03b4\u02das,\u00a8pwqri` 1s \u02d9 . (5.23)\nUsing the above equation, we are able to compute a parametrised betweenness centrality for weighted graphs c\u02dafg. More specifically, for a vertex v, we compute c \u02da fgpvq by iterating over all other vertices and summing their contributions. More formally:\nc\u02dafgpvq \u201c \u00ff\ns\u2030v\n|V | \u00ff\ni\u201c1\n\u02c6\n\u03b4\u02das,\u00a8pvqris ` Tsvris \u03c3sv g\u03b4\u02dapiq \u02d9 , (5.24)\nwhere the value of the function g\u03b4\u02da depends solely on the number of nodes lying on the shortest paths between s and v.\nNow, we are ready to introduce our general framework, namely WPBC (see Algorithm 14) to compute the parametrised betweenness centrality in weighted graphs. All lines that differ from the original Brandes\u2019 algorithm were highlighted. In lines 3 - 12 the algorithm uses Dijkstra\u2019s algorithm [Cormen, 2001] to traverse the graph and count all shortest paths from the source s. In these lines it essentially differs from Brandes algorithm, because it uses polynomial arithmetic to count paths and number of nodes lying on these paths. Next, in lines 18 and 20, which also differ from Brandes\u2019 framework, we implemented the recursive formula (5.23).\nAlgorithm 14 runs in Op|V |2|E| ` |V |2 log |V |q time and requires Op|V |2q space. Furthermore, this algorithm (just like Algorithm 11) can be easily adapted to directed graphs."}, {"heading": "5.4.5. The Algorithm for Shapley Value-based Betweenness Centrality in Weighted", "text": "Graphs\nIn this subsection we will construct an efficient algorithm for computing the Shapley Value-based betweenness centrality for weighted graphs. We will use the notation introduced in the previous subsection, and transform equation (5.5) into:\n88\nAlgorithm 14: WPBC\u2014a general framework to compute the parametrised betweenness centrality in weighted graphs\nInput: weighted graph G \u201c pV,Eq, with weight function \u03bb : E \u00d1 R` Data: priority queue Q with key dpq, stack S dps, vq : the distance from s to v Predspvq : the list of predecessors of v on the shortest paths from source s \u03c3sv : the number of shortest paths from s to v \u03b4\u02das,\u00a8pvqris : one-side dependency of s on v T rissv : the number of shortest paths from s to v containing i vertices Output: c\u02dafgpvq parametrised betweenness centrality\n1 foreach s P V do 2 foreach v P V do Predspvq \u00d0 empty list; dps, vq \u00d0 8; \u03c3sv \u00d0 0; dps, sq \u00d0 1; \u03c3ss \u00d0 1; Tssr1s \u00d0 1; enqueue s\u00d1 Q; 3 while Q is not empty do 4 extract v \u00d0 Q with minimal dps, vq; push v \u00d1 S; 5 foreach w such that pv, wq P E do 6 if dps, wq \u0105 dps, vq ` \u03bbpv, wq then 7 dps, wq \u00d0 dps, vq ` \u03bbpv, wq; 8 insert{update w \u00d1 Q with dps, wq; 9 \u03c3sw \u00d0 0; Tsw \u00d0 0; Predspwq \u00d0 empty list;\n10 if dps, wq \u201c dps, vq ` \u03bbpv, wq then 11 \u03c3sw \u00d0 \u03c3sw ` \u03c3sv; Tsw \u201c Tsw \u2018 T\u00d1sv ; 12 append v \u00d1 Predspwq; 13 foreach v P V do 14 \u03b4\u02das,\u00a8pvq \u00d0 0; 15 while S is not empty do 16 pop w \u00d0 S; 17 foreach v P Predspwq do for i\u00d0 1 to |V | \u00b4 1 do 18 \u03b4\u02das,\u00a8pvqris \u00d0 \u03b4\u02das,\u00a8pvqris ` Tsvris \u03c3sw \u02c6 f\u03b4\u02dapi` 1q ` \u03b4\u02das,\u00a8pwqri` 1s \u02d9 ; 19 if w \u2030 s then for i\u00d0 1 to |V | do 20 c\u02dafgpwq \u00d0 c\u02dafgpwq ` \u03b4\u02das,\u00a8pwqris ` 2 Tswris \u03c3sw g\u02da\u03b4 piq; 21 foreach v P V do c\u02dafgpvq \u201c c\u02dafgpvq\n2 ;\n89\nAlgorithm 15: WSVB Weighted SV-based betweenness centrality Input: weighted graph G \u201c pV,Eq, with weight function \u03bb : E \u00d1 R` Output: \u03c6SVv weighted SV-based betweenness centrality for each v P V 1 f\u02da\u03b4 piq \u00d0 1i ; 2 g\u02da\u03b4 piq \u00d0 2\u00b4i2i ; 3 WPBCpG, \u03bb, f\u02da\u03b4 , g\u02da\u03b4 q\n\u03c6SVv pV pGq, \u03bdq \u201c \u00ff\ns\u2030v\n\u02c6\n\u00ff\nt\u2030v\n|V | \u00ff\ni\u201c1\nTstpvqris \u03c3st i\n` |V | \u00ff\ni\u201c1\nTsvrisp2\u00b4 iq 2\u03c3sv i\n\u02d9\n. (5.25)\nThe framework for weighted graphs (introduced in Section 5.4.4) can be used to compute (5.25). All we need is to define f\u02da\u03b4 piq \u201c 1i and g \u02da \u03b4 piq \u201c 2\u00b4i2i . By doing so, we can use our general framework\u2014WPBC, see Algorithm 14\u2014to compute the weighted Shapley value-based betweenness centrality for all nodes in Op|V |2|E| ` |V |2 log |V |q. This method is presented in Algorithm 15."}, {"heading": "5.4.6. The Algorithm for Semivalue-based Betweenness Centrality in Weighted Graphs", "text": "In this subsection we use our framework for weighted graphs, namely WPBC (see Algorithm 14), to compute the Semivalue-based betweenness centrality for weighted graphs. To this end, we can transform equation (5.10) into:\n\u03c6SEMIv pV pGq, \u03bdq\u201c \u00ff\n1\u010fk\u010f|V |\nPDpV, kq \u02dc \u00ff\ns\u2030v\u2030t\n|V |\u00b4i\u011bk\u00b41 \u00ff\ni\u201c1\nTstpvqrisp|V |\u00b4 iq!p|V |\u00b4kq! \u03c3stp|V |\u00b4 i\u00b4k`1q!p|V |\u00b41q!\n` \u00ff\ns\u2030v\n\u00b4 k \u00b4 |V | |V |\u00b41 `\n|V |\u00b4i\u011bk\u00b41 \u00ff\ni\u201c1\nTsvrisp|V |\u00b4 iq!p|V | \u00b4 kq! \u03c3svp|V |\u00b4 i\u00b4k`1q!p|V |\u00b41q! \u00af\n\u00b8\n. (5.26)\nOur framework can be easily adopted to deal with Semivalues; all we need is to set:\nf\u02da\u03b4 piq \u201c\n$ \u2019 \u2019 &\n\u2019 \u2019 %\np|V |\u00b4iq!p|V |\u00b4kq! p|V |\u00b4i\u00b4k`1q!p|V |\u00b41q! if |V | \u00b4 i \u011b k \u00b4 1\n0 if |V | \u00b4 i \u0103 k \u00b4 1\nand set g\u02da\u03b4 \u201c f\u02da\u03b4 ` k\u00b4|V | |V |\u00b41 . This way, we can use our general framework for weighted graphs, namely WPBC (see Algorithm 14) to compute the Semivalue-based betweenness centrality in Op|V |3|E| ` |V |3 log |V |q time. The pseudo code is presented in Algorithm 16.\n90\nAlgorithm 16: WSB Weighted Semivalue-based betweenness centrality Input: weighted graph G \u201c pV,Eq, with weight function \u03bb : E \u00d1 R` Output: \u03c6SEMIv weighted Semivalue-based betweenness centrality for v P V 1 f\u02da\u03b4 piq \u00d0 if |V | \u00b4 i \u011b k \u00b4 1 then p|V |\u00b4iq!p|V |\u00b4kq! p|V |\u00b4i\u00b4k`1q!p|V |\u00b41q! else 0 g \u02da \u03b4 piq \u00d0 f\u02da\u03b4 piq ` k\u00b4|V | |V |\u00b41 ; 2 for k \u00d0 1 to |V | do 3 WPBCpG, \u03bb, f\u02da\u03b4 , g\u02da\u03b4 q ; 4 foreach v P V do 5 \u03c6SEMIv \u00d0 PDpV, kqc\u02dafgpvq;"}, {"heading": "5.5. Simulations", "text": "So far, we argued that centrality measures based on Semivalues in general, and on the Shapley value in particular, can help analyse networks in situations where simultaneous incidents may occur. Furthermore, we presented polynomial time algorithms to compute both the Shapley value-based and Semivalue-based betweenness centralities, for weighted graphs as well as unweighted graphs. This section provides an empirical evaluation of the above contributions. In particular, Section 5.5.1 compares our centrality measures against standard betweenness centrality, in a scenario where simultaneous node failures are simulated. In particular, we compare the effectiveness of both measures when tackling Problem 3. Section 5.5.2 evaluates the running time of our algorithms, and compares them against the Monte Carlo method\u2014the only available alternative in the literature.\nWe carry out our experiments on weighted and unweighted random scale-free graphs, which are created using the preferential attachment mechanism introduced by Barab\u00e1si and Albert [1999]. We also carry out experiments on two real-life network: (1) the email communication networks introduced by Guimer\u00e0 et al. [2003], which contains 1133 nodes and 5451 edges, and (2) the neural system of C. elegans studied by Watts and Strogatz [1998], which contains 297 nodes and 2359 edges."}, {"heading": "5.5.1. Evaluating our Centrality Measure", "text": "In this subsection, we compare the node ranking obtained by the Semivalue-based betweenness centrality against the node ranking obtained by standard betweenness centrality. Note that, by this evaluation, we also implicitly evaluate our Shapley value-based betweenness centrality, as it is a special case of the Semivalue-based one.\nTo this end, let us consider the scenario of network vulnerability (see Section 5.3.1 for more details). The comprehensive work by Holme et al. [2002] examines how different strategies of attack on the network affect its performance. In more detail, the authors studied how removing the nodes with the highest betweenness centrality affects communication throughout\n91\nthe network. They found that, in random scale-free networks, removing the nodes with the highest betweenness centrality causes an exponential decay in network performance. Here, performance is measured as the average distance between nodes\u2014an important measure used, e.g., in the seminal paper of Albert et al. [2000] on network vulnerability to attacks and random node failures.\nThe literature closely related to the work done by Holme et al. [2002] is about network vulnerability analysis based on three-stage Stackelberg games [Stackelberg, 1952]. In a nutshell, two opponents, an interdictor and an operator, try to maximize their gains. In the first stage, the operator fortifies the network by choosing the nodes that should be fully protect. Next, the interdictor performs an attack, which involves removing a limited number of unfortified nodes. Finally, the operator acts on the network in order to fulfill its objectives, e.g., he can travel between two nodes, or send some load between nodes. The interdictor can be human or can be of a different nature such as a natural disaster or a random failure of nodes. In such cases one can assume worst-case scenarios (Murphy\u2019s Law) [Smith and Lim, 2008], or some stochastic model of interdictor attacks [Cormican et al., 1998]. The instance of Stackelberg games closely related to this problem is called Shortest Path Interdiction. In such games the interdictor attempts to remove k edges in order to maximize the distance between two nodes s and t. This problem is proven to be NP-hard [Ball et al., 1989]. However, Malik et al. [1989] proposed an effective approximation algorithm and Corley and Sha [1982] solved this problem in polynomial time for the special case where k \u201c 1. In this subsection we follow the Holme\u2019s line of research. We study the resilience of a network against random failures, where we assume that the level of protection of each node is determined based on its ranking. In order to carry out our experiment, we first need to agree on the way in which the functionality of the network will be measured. To this end, we use the average inverse geodesic measure (IGM), which was used by Albert et al. [2000] and Holme et al. [2002]. This measure captures the notion of average distance between nodes in a network, and is given by the following formula:\nIGMpV,Eq \u201c \u00ff\nvPV\n\u00ff\nv\u2030uPV\n1\ndpv, uq .\nOur experiment consists of two phases. The first involves generating random graphs and\ncomputing node cardinal rankings. This phase involves the following steps:\n1. Generate an unweighted random scale-free graph containing 160 nodes, in which the\naverage node degree is ? 160.6\n2. Set the interval ra, bq, which means that the number of nodes that will be simultaneously exposed to failure is between a (inclusive) and b (exclusive). 6 We also experimented with alternative values; the results exhibited similar trends.\n92\n3. Compute two rankings of nodes. The first is based on standard betweenness centrality. The\nsecond is based on Semivalue-based betweenness centrality with probability distribution:\nPDpV, kq \u201c # 1 b\u00b4a if k P ra, bq 0 otherwise.\nThe second phase of the experiment involves the following steps:\n1. Protect each node v P V . The level of protection of each node is determined based on its position in the ranking, e.g., if a node is ranked first, then it is the most important node and\nso will have the highest level of protection. We study two approaches to nodes protection. The first one assigns to each node in the ranking the specific power of protection. More formally, if we denote by rpvq the position of node v in ranking r, then node v is protected with probability 1\nrpvq2 . The second one is to fully protect the top 10% of nodes in the ranking.\n93\n2. Choose randomly a set of nodes S \u010e V , which will be exposed to failure.7 Here, the number of nodes that are exposed to failure is chosen uniformly at random from the range\nra, bq. Likewise, out of all subsets that have exactly this number of nodes, the subset S is chosen uniformly at random.\n3. Using the first approach implies that v will fail with probability 1\u00b4 1 rpvq2 . Using the second\none indicates that each node v P S will fail if rpvq \u0103 0.1 \u02da |V |.\nHaving explained each phase of the experiment, we now explain how the entire experiment\nworks:\n1. Generate 30 random graphs.\n2. Set the size of the failure to ra, bq, where a \u201c 1 and b is running form 2 to 160.\n3. For each ra, bq, simulate 5000 simultaneous node failures.\n4. Protect nodes depending on the two rankings: standard betweenness centrality and\nSemivalue-based betweenness centrality.\n5. Compare the average IGM that results from each measure together with confidence interval\nof 75%.\n6. Compare results to the full protection strategy that will protect all nodes from being\nremoved.\nFigure 5.3 depicts the average difference in IGM between the two centrality measures. On the plot the blue line is IGMS \u00b4 IGMB, where IGMS is the functionality of the network when protected according to our centrality measure, while IGMB is the functionality of the network when protected according to the standard betweenness centrality. The protection strategy is set to protect each node with probability 1 rpvq2 . The values below zero indicate that standard betweenness centrality gives better protection to the network, whereas those above zero indicate that our Semivalue-based centrality gives better protection. As can be seen, when b is small, the performance of the Semivalue-based betweenness centrality is almost identical to the standard betweenness centrality. This is expected because our centrality measure, given the failure interval r1, 2q, is exactly the same as the standard measure. However, as we increase b, more nodes can fail simultaneously, and so the difference between our measure and the standard one become more evident. As can be seen, in such cases, our measure outperforms the standard one in terms of network protection, as more influential nodes (in terms of maintaining a low average distance throughout the network) are preserved. Note that for the interval r1, 160q the Semivalue-based centrality is exactly the same as the Shapley value-based 7 In our setting, being exposed to failure does not necessarily imply that the node will fail; this depends on the level of protection that this node has against failure.\n94\ncentrality. Additionally, the red line in Figure 5.3 depicts the performance of the full protection strategy that protects each node from being removed. It is IGMO \u00b4 IGMB, where IGMO is the functionality of the network when protected according to the full protection strategy, and IGMB is the functionality of the network when protected according to the standard betweenness centrality.\nFigure 5.4 depicts the same experiment, except that b \u201c 160 is now constant and a \u201c 1, . . . , 159. As can be seen, for all values of a our measure gives better protection. Again note that for the interval r1, 160q the Semivalue-based centrality is exactly the same as the Shapley value-based centrality.\nFigures 5.5 and 5.6 present the repetition of the above two experiments but for the other protection strategy, where we fully protect top 10% of nodes. The results are somewhat similar, but the advantage of our measure is less evident. For instance, given a \u201c 30 in Figure 5.6, the advantage of our measure is below 7 \u00a8 10\u00b45, whereas for the first protection strategy it\n95\nis above 7 \u00a8 10\u00b44. This stems from the fact that the top nodes of the two rankings (i.e., the Semivalue-based and standard betweenness) are less different than the middle nodes or the bottom nodes. This is the consequence of the scale-free distribution and existence of powerful hub nodes that dominate two rankings. Thus, if we protect only the top 10% of nodes, the difference in performance will be less visible, but our new measure still outperforms standard betwenneess centrality.\nFinally, Figure 5.7 demonstrates that the performance between two specific Semivalue-based centralities: (1) the Shapley value-based and (2) the Banzhaf-based does not differ much. That is to say, the two measures can be used interchangeably in this application."}, {"heading": "5.5.2. Evaluating our Algorithms", "text": "In this section, the running time of our exact algorithms is compared against that of the Monte Carlo (MC) sampling algorithm for computing the Shapley value.8 Note that, due to the exponential number of coalitions in a coalitional game, sampling (as in the MC algorithm) is the only general-purpose method available in the literature for computing the Shapley value in reasonable time. Generally speaking, the MC algorithm works by iteratively sampling permutations of players (or nodes in our case). For each such permutation, \u03c0, and each node v, the algorithm computes the marginal contribution of v to the coalition consisting of every node that precedes v in \u03c0. Finally, after several iterations, the algorithm divides the aggregate sum of\n8 For a formalisation and a discussion of this algorithm, see [Castro et al., 2009] and [Michalak et al., 2013a], respectively.\n96\nall marginal contributions for each node by the the number of iterations performed. The time complexity of this algorithm is OpIter \u02c6 conq, where Iter denotes the number of iterations and con denotes the number of operations necessary for computing each marginal contribution. To optimise con, we implement MC sampling using the fast algorithm for computing group betweenness centrality presented by Puzis et al. [2007b]. This method guarantees that each MC iteration takes Op|V |3q time.9 Clearly, the MC sampling is never guaranteed to yield the exact Shapley values and its performance should be measured by an approximation error. In our simulations, we compute the average relative error (|1\u00b4 approx. valueexact value |) for the value of each node in the network.\nStarting with unweighted graphs, Figure 5.8 and Figure 5.9 compare the running time of our exact algorithms against the MC sampling given random networks, and given a real communication network, respectively. In more detail, Figures 5.8 depicts the average result\n9 Note that if we have oracle access to the coalition values (which is a common assumption in the literature), then con \u201c 1. However, in our setting we do not make such an assumption. Instead, to obtain the value of a coalition, we need to compute its group betweenness centrality.\n97\nRelative error (%)\n1.1h\n3.6s\nMonte Carlo solution Shapley Value (SVB)\nSemivalue (SB)\n0\n5\n10\n15\n20\n25\n30\n35\n40\n0 15 30 45 60 75 90 105 120 135 150 165\nFigure 5.9: The communication network.\nRelative error (%)\n4h 45s\nMonte Carlo solution Shapley Value (WSVB)\nSemivalue (WSB)\n0\n5\n10\n15\n20\n25\n30\n35\n40\n0 10 20 30 40 50 60 70 80\nFigure 5.11: The neural system network.\ntaken over 30 randomly-generated graphs consisting of 500 nodes each, with an average degree of 25. The shaded area depicts the confidence interval of 75%. As can be seen, the Shapley value-based betweenness centrality is computed (using Algorithm 12) in 1.2 seconds, while and Semivalue-based betweenness centrality is computed (using Algorithm 13) in 12.4 minutes. On the other hand, in order to obtain an admissible average error of 10%, the MC sampling method takes around 45 hours. Furthermore, obtaining smaller average errors requires an exponential number of additional operations. Moving on to Figure 5.9, it depicts the results of the experiment performed on a real email communication network [Guimer\u00e0 et al., 2003]. As can be seen, Algorithms 12 and 13 take 3.6 seconds and 1.1 hour to compute Shapley value-based and Semivalue-based betweenness centrality, respectively. In contrast, the MC sampling is unable to guarantee a better approximation than 15% even after 40 hours.\nHaving presented our results for unweighted graphs, we now move on to weighted graphs. Figures 5.10 and 5.11 compare the performance of our algorithms against the MC sampling, given random networks, and a real neural network, respectively. In more detail, Figure 5.10 depicts the average result taken over 30 randomly-generated graphs consisting of 200 nodes each, with an average degree of 15. Weights of edges were chosen uniformly at random from\n98\nthe range r1, 100s. The shaded area depicts the confidence interval of 75%. As can be seen, the Shapley value-based betweenness centrality is computed (using Algorithm 15) in 16 seconds, while the Semivalue-based betweenness centrality is computed (using Algorithm 16) in 48 minutes. On the other hand, in order to obtain an admissible average error of 10%, the MC sampling takes around 4 hours. Moving on to Figure 5.11, it depicts the experiment performed on a real neural network [Watts and Strogatz, 1998]. As can be seen, Algorithms 15 and 16 take 45 seconds and 4 hours to compute Shaple-value-based and Semivalue-based betweenness centralities, respectively."}, {"heading": "5.6. Conclusions", "text": "In this chapter, was proposed an extension of betweenness centrality, based on Semivalues\u2014a wide and flexible family of solution concepts from coalitional game theory. Our new measure provides a ranking of individual nodes while taking into consideration the synergies that may exist in different groups of nodes. The main contributions of this chapter are summarised in contrast to the literature in Table 5.2.\nDespite the fact that Semivalues are, in general, computationally challenging, we showed that the new measure can be computed efficiently. More specifically, we proposed polynomial-time algorithms to compute all Semivalue-based betweenness centralities for weighted graphs as well as unweighted graphs. These include both the Shapley value-based and Banzhaf power index-based betweenness centralities. Interestingly, our algorithm for computing the Shapley value-based centrality for the unweighted networks has the same time complexity as the best known algorithm due to [Brandes, 2001] for computing the standard betweenness centrality.\nWe evaluated our algorithms empirically on weighted and unweighted random scale-free graphs Barab\u00e1si and Albert [1999] as well as on two real networks. Our algorithms turned\n99\nout to be significantly faster than the Monte Carlo sampling [Castro et al., 2009]\u2014the fastest alternative from the literature.\nWe also evaluated our centrality measures in a simulated scenario in which simultaneous node failures occur. Here, following Albert et al., 2000, and Holme et al.,2002, we quantified the functionality of the network based on the average inverse geodesic measure. The results showed that, compared to the standard measure, the ranking obtained by our game-theoretic network centrality reflects more accurately the influence that different nodes have on the network functionality."}, {"heading": "6. A Centrality Measure for Networks With", "text": "Community Structure Based on a Generalization of the Owen Value\nIn the previous chapters we presented the game-theoretic centrality measures based on Shaply value and Semivalues. In this chapter we propose the first measure of node centrality that takes into account the community structure of the underlying network. To allow for flexible modeling of community structures, we propose a generalization of the Owen value\u2014a well-known solution concept from cooperative game theory to study games with a priori-given unions of players. As a result we obtain the first measure of centrality that accounts for both the value of an individual node\u2019s relationships within the network and the quality of the community this node belongs to. We use our measure to evaluate citation networks, where all publications belong to naturally defined science communities united under journal titles and conference venues.\nAll technical contributions presented in this chapter were made exclusively by the author of\nthis dissertation."}, {"heading": "6.1. Introduction", "text": "Real-world networks frequently have highly complex structures. They can often be characterized by properties such as heavy-tailed degree distributions, clustering, the small-world property, etc. Another important characteristics that many real-life networks have in common is their community structure [Girvan and Newman, 2002, Newman, 2006] (see Section 2.8). Communities are usually composed of nodes that are more densely connected internally than with other nodes in the network. For instance, the teachers from a particular secondary school may form a community within the social network of all teachers in the city. Similarly, trade links among the European Union countries are usually more intense than their links with the rest of the world. In addition, certain communities may be considered to be stronger than others. Secondary schools may vary in reputation, and some trade blocks may be more important to the global economy than others.\nThe importance of a community is usually increased when a new, powerful individual joins it. Conversely, membership in a strong community may boost the importance of an otherwise weak individual. Quantifying this latter effect is the primary goal of this paper. In other words,\n101\nwe are concerned with the problem of analysing the importance (the centrality) of individual nodes given the underlying community structure of the network.\nIn this chapter, we use the flexibility offered by the game-theoretic approach to centrality measures and constructed first centrality measure in the literature that is able to account for complex community structures in networks. To this end, we model the community structure as the a priori given coalition structure of a cooperative game. By doing so, we are able to build a centrality metric by generalizing the Owen value [Owen, 1977]\u2014a well-known solution concept for cooperative games in which players are partitioned into pre-defined groups.\nIn our approach, the computation of a node\u2019s power is a two-step process. First, we compute the importance of the community (if any) that this node belongs to. Next, we compute the power of the given node within this community. Our generalization of the Owen value, which we call coalitional semivalues, is a much broader solution concept. In fact, coalitional semivalues encompass the Owen value as well as all other solution concepts in the literature that were developed for games with an a priori defined coalition structure of players: the Owen-Banzhaf value [Owen, 1982], the symmetric coalitional Banzhaf value, and p-binomial semivalues [Carreras and Puente, 2012].\nAlthough, in general, the new centrality introduced in this chapter is #P-complete (and hence NP-hard), we are able to give a polynomial algorithm to compute it for problem instances where the value of any group of nodes is determined by their degree centrality [Freeman, 1979] (see Definition 15). We verify the practical aspects of our algorithm on a large citation network that contains more than 2 million nodes and links. Our experiments compare three different degree centralities: group degree centrality [Everett and Borgatti, 1999], the Shapley value-based degree centrality (see Definition 26), and our new centrality. We show that, unlike others, our new centrality produces a ranking in which the power of the top nodes significantly differs, depending on the power of the communities that these nodes belong to."}, {"heading": "6.2. Preliminaries", "text": "In this section we introduce the basic notation for coalitional games with coalitional structure and also we present the Owen value [Owen, 1977]\u2014the most popular extension of the Shapley value to games with coalitional structure."}, {"heading": "6.2.1. The Coalitional Structure", "text": "We already know that the coalition is a group of nodes in coalitional game. The coalitions can be non-overlapping, which mean that player can belong to only one coalition, and overlapping. In this dissertation we focus on non-overlapping coalitions. The game divided into fixed coalitions forms a coalitional structure.\n102\nDefinition 30 (Coalitional structure). For a given coalitional game g \u201c pA, \u03bdq the coalitional structure CS \u201c tC1, C2, . . . , Cmu is the partition of the set A, which implies that H R CS , \u0159\nCPCS C \u201c A and @C1,C2PCSC1 \u2030 C2 \u00f9\u00f1 C1 X C2 \u201c H.\nOne of the most important research topics in coalitional games is to find optimal coalitional structure [Sandholm et al., 1999, Rahwan et al., 2012]. More formally, this problem known as optimal coalition structure generation involves solving the following equation: arg maxCS \u0159\nCPCS \u03bdpCq. Unfortunately, this problem is NP-hard [Sandholm et al., 1999]. Coalitional structure is a very similar to community structure defined on graphs (Definition 18). In this chapter we use this analogy and propose the first measure of node centrality that takes into account the community structure and that is based on coalitional games with coalitional structure."}, {"heading": "6.2.2. The Owen Value", "text": "Coalitional games can be analysed from both the ex ante and ex post perspectives. In the ex ante perspective, it is not known which coalition will actually form. The Semivalues (Definition 7) are ex ante since they consider the sum of the marginal contributions of a player to all possible coalitions without any additional assumptions.\nAnother approach is to consider a coalitional game from the ex post perspective. In this case it is already known which coalitions form by the end of the game. In other words, it is known how the agents have partitioned themselves into a coalition structure. This ex post perspective is especially appealing for our model where networks are or can be divided into communities.\nThe most popular extension of the Shapley value (Definition 5) to \u201cex post\u201d-like situations was proposed by Owen [1977]. To this end, let us first introduce the concept of the quotient game \u03bdQ. Given the coalitional game pA, \u03bdq and coalitional structure CS \u201c tC1, C2, . . . , Cmu, we define a new coalitional game, where the coalitions are considered to be individual players:\n\u03bdQpRq \u201c \u03bd \u02c6 \u010f\nrPR Cr\n\u02d9\nfor all R \u010eM,\nwhere the set M \u201c t1, 2, . . . ,mu represents coalitions\u2019 numbers. Note that \u0164\nrPR Cr is a\ncoalition of coalitions. We will denote such coalition by QR.\nWe are now ready to define the Owen value. Given pA, \u03bdq and CS \u201c tC1, C2, . . . , Cmu, the share of the grand coalition\u2019s payoff, \u03bdpAq, given to player ai P Cj P CS according to the Owen value is given by:\n103\nDefinition 31 (The Owen Value). In a coalitional game pA, \u03bdq with coalition structure CS the Owen value for a player ai is given by:\n\u03c6OVi pA, \u03bd,CS q \u201c \u00ff\nR\u010eMztju\n1\n|M | `|M |\u00b41 |R| \u02d8\n\u00ff\nC\u010eCjztaiu\n1\n|Cj| `|Cj |\u00b41 |C|\n\u02d8 MCpQR Y C, iq.\nLet us examine the above formula more closely. The computation of the Owen value can be thought of as a two-step process. In the first step, coalitions play the game pM, \u03bdQq between themselves and receive their Shapley values. In the second step, the values of these communities are, in turn, divided among their members according to the Shapley value of the members.\nThe Owen value is the unique division scheme that satisfies the following five often desirable properties: Efficiency, Symmetry, Null player, Additivity, and Component Symmetry [Owen, 1977], which will be discussed more extensively in the next section."}, {"heading": "6.3. The Coalitional Semivalue", "text": "In this chapter we introduce a generalization of the Owen value, where more general division schemes\u2014Semivalues\u2014are used as opposed to the Shapley value within the definition of Owen value. Specifically, we combine formula for Semivalue (Definition 7) with the formula for the Owen value (Definition 31) and propose coalitional semivalues.\nDefinition 32 (The Coalitional Semivalue). In a coalitional game pA, \u03bdq with coalition structure CS the Coalitional Semivalue for a player ai is given by:\n\u03c6CSEMIi p\u03bd,CS q \u201c \u00ff\n0\u010fk\u0103|M |\n\u03b2pkq \u00ff\n0\u010fl\u0103|Cj |\n\u03b1jplqETk,ClrMCpQTk Y C l, iqs.\nwhere T k is a random set of size k drawn uniformly from the set Mztju, and C l a the random set of size l drawn uniformly from the set Cjztiu. The function \u03b2 : t0, 1, . . . , |M |\u00b4 1u \u00d1 r0, 1s is a function such that\n\u0159|M |\u00b41 k\u201c0 \u03b2pkq \u201c 1. t\u03b1jujPt1,...,|M |u is a family of functions such that\n\u03b1j : t0, 1, . . . , |Cj| \u00b4 1u \u00d1 r0, 1s and \u0159|Cj |\u00b41 k\u201c0 \u03b1jpkq \u201c 1.\nIntuitively, \u03b2 is a probability distribution used to compute \u03c6jpM, \u03bdQq, and \u03b1j is the probability distribution used to evaluate the players inside a coalition \u03c6ipCj, \u03bdq. Importantly, as shown in Table 6.1, by adopting various probability distributions, we can obtain the Owen value [Owen, 1977], as well as all of its modifications proposed to date in the literature: Owen-Banzhaf value [Owen, 1982], symmetric coalitional Banzhaf value [Amer et al., 2002], and symmetric coalitional p-binomial semivalues [Carreras and Puente, 2012].1\n1 We refrain from the axiomatic characterization of the new solution concept as being out of the scope of this dissertation.\n104"}, {"heading": "6.4. The New Centrality Measure and Its Properties", "text": "Let us now introduce the game-theoretic network centrality measure based on coalitional semivalues:\nDefinition 33 (The Coalitional Semivalue-based Centrality). The game-theoretic network centrality for the graph G with community structure CS is a quadruple pG,CS , \u03c8, \u03c6CSEMI q, where the value of each node v P V is given by \u03c6CSEMIv p\u03bdG,CS q, where \u03c8pGq \u201c \u03bdG.\nThis is the first centrality measure that evaluates nodes by taking into account the community structure of the network. In the next section, we will consider various properties of this new measure.\nThe aim of the rest of this section is to translate the properties of various instances of coalitional semivalues into the properties of the resulting centrality measure. The first three properties are derived from Null Player, Additivity and Symmetry, respectively. Let pG,CS , \u03c8, \u03c6q be a game-theoretic network centrality for the graph G with community structure CS and v P Cj P CS some node from community Cj .\nProperty 1. If a node makes no contribution to any community then its value is zero: @C\u010eV ztvuMCpC, vq \u201c 0 \u00f9\u00f1 \u03c6CSEMIv p\u03bdG,CS q \u201c 0.\nProperty 2. If two group centralities are combined into one \u03bdG = \u03bd 1G ` \u03bd2G then \u03c6CSEMIv p\u03bdG,CS q \u201c \u03c6CSEMIv p\u03bd 1G,CS q ` \u03c6CSEMIv p\u03bd2G,CS q.\nProperty 3. If two nodes from the same community v, u P Cj contribute the same value to all possible communities then they are equally important: @C\u010eV ztv,uuMCpC, vq \u201c MCpC, uq \u00f9\u00f1 \u03c6CSEMIv p\u03bdG,CS q \u201c \u03c6CSEMIu p\u03bdG,CS q.\nThe next property involves the Quotient game:\nProperty 4. The power of a community is the aggregation of the power of nodes comprising this community. Formally: \u03c6SEMIj pM, \u03bd Q Gq \u201c \u0159 vPCj \u03c6 CSEMI v p\u03bdG,CS q.\n105\nAll the solutions, where the power inside the communities is computed using the Shapley value (due to the Efficiency), have the above property. In the same spirit, it can required that all the power of the whole network \u03bdGpV q is distributed among the nodes:\nProperty 5. The value of the whole network \u03bdpV q is the aggregation of the power of nodes comprising this network: \u03bdGpV q \u201c \u0159 vPV \u03c6 CSEMI v p\u03bdG,CS q.\nOur final property is the translation of Component Symmetry. If we define the marginal contribution of the coalition C to the set of nodes QT as MCpQT , Cq \u201c \u03bdpQT Y Cq \u00b4 \u03bdpQT q, we get:\nProperty 6. If two communities contribute the same value to all possible groups of communities then their evaluation is the same: @T\u010eMzti,juMCpQT , Ciq \u201c MCpQT , Cjq \u00f9\u00f1 \u03c6SEMIi pM, \u03bd Q Gq \u201c \u03c6SEMIj pM, \u03bd Q Gq.\nTable 6.2 summarizes properties of the coalitional semivalues."}, {"heading": "6.5. Computational Analysis", "text": "For many succinctly represented coalitional games, computing the Shapley value is NP-hard (in fact, it is often #P-complete (see Section 3.3 or [Chalkiadakis et al., 2011]). Naive algorithms to compute the Shapley value (exhaustively computing the average marginal contribution over all orderings of players) have exponential running time. Given this, there are two possible research directions. Firstly, efficient approximate algorithms can be developed. Secondly, classes of centralities, that have real-life applications and can be computed in polynomial time, can be defined. In this chapter, we take the latter approach and propose a polynomial time algorithm for computing coalitional semivalue-based centralities, where the characteristic function\u2014the value of any group of nodes\u2014is based on their degree. Thus, our method is build upon degree\n106\ncentrality \u2014 an important method of evaluating nodes in social networks analysis [Freeman, 1979, Everett and Borgatti, 1999, Michalak et al., 2013a]."}, {"heading": "6.5.1. Weighted Degree Centrality Measure", "text": "In this subsection we define a class of cooperative games such that a node\u2019s value is based on its degree. The weighted group degree centrality of a community C in graph G is defined as follows:\n\u03c8WDpGq \u201c \u03bdWDG pCq \u201c \u00ff\nvPNpCq\nfpvq, (6.1)\nwhere NpCq is the set of neighbours of C, and f is a parameter that is a polynomially computable function.\nDefinition 34 (The Coalitional Semivalue-based Degree Centrality). A game-theoretic network weighted degree centrality for the graph G with the community structure CS is a quadruple pG,CS , \u03c8WD, \u03c6CSEMI q, where the value of each node v P V is given by \u03c6CSEMIv p\u03bdWDG ,CS q.\nIn the next section we will look more closely at the marginal contributions of nodes in order to effectively compute their expected value. This, in turn, will let us compute coalitional semivalues based on weighted group degree centrality in polynomial time."}, {"heading": "6.5.2. The Marginal Contribution Analysis", "text": "In this subsection we lay the groundwork for the efficient algorithm that will compute coalitional semivalues for weighted group degree centrality in polynomial time. To this end, we will use equation from Definition 1. For a given node, v P Cj P CS , the focus will be on computing the expected value of its marginal contribution: ETk,ClrMCpQTk Y C l, vqs.\nWe must consider the value of the expected marginal contribution of a node v to the set QTk Y C l, where T k is a random set of size k, and C l is a random set of size l. Both sets are drawn uniformly from the sets Mztju and Cjztvu, respectively. We will construct the effective algorithm in two steps. First, we will decide under what conditions v makes a contribution to the set QTk Y C l. Second, we will use a combinatorial argument to compute this contribution for each of the cases distinguished in the first step.\nBefore we start, we need to introduce the following notation: for the node v P Cj P CS we define the set of adjacent communities as NCS pvq \u201c tCi P CSzCj | Ci X Npvq \u2030 Hu, inter-community degree as degCS pvq \u201c |NCS pvq|, the set of neighbours within a community as Njpvq \u201c Npvq X Cj , and intra-community degree as degjpvq \u201c |Njpvq|.\nTheorem 3. The game-theoretic network degree centrality for graph G with community structure CS for the node v P V can be computed in time polynomial in |V |.\n107\nProof. In our proof we will use concepts from probability theory. Thus, we will first define the probability space, which is a triple p\u2126,F , P q, where \u2126 is a sample space containing sets tQTk Y C lu, T k \u010e 2|M |\u00b41 is such that |T k| \u201c k and C l \u010e 2|Cj |\u00b41 is such that |C l| \u201c l. The important observation is that |\u2126| \u201c\n`|M |\u00b41 k \u02d8`|Cj |\u00b41 l \u02d8 . In our model, F is the set of elementary events (F \u201c \u2126), and P : F \u00d1 r0, 1s is a probability distribution function such that for each event A P F we have P pAq \u201c 1|\u2126| .\nThere are two types of marginal contribution that a node can make. For the first, let us consider the marginal contribution of a single vertex v to the random set QTk Y C l. When v joins a coalition C, it can contribute to its value with the help of any vertex u P Npvq if and only if u is not in C and u is not already directly connected to C. Let us introduce the Bernoulli random variable Br1sv,u,k,l, which will indicate whether the vertex v makes a contribution through vertex u to the random set QTk Y C l. Equation (6.1) tells us that this contribution will be fpuq. Thus, we have:\nErfpuqBr1sv,u,k,ls \u201c fpuqP rpNpuq Y tuuq X pQTk Y C lq \u201c Hs,\nwhere P r\u00a8s denotes probability, and Er\u00a8s denotes expected value. The second type of contribution takes place when vertex v joins a coalition C and takes away the value fpvq. Such a contribution happens when vertex v is directly connected to the coalition C. In particular, weighted group degree centrality \u03bdDG assumes that the value of a set of vertices depends only on nodes directly connected to this set, ignoring nodes already inside it. Therefore, when the node v becomes a member of C and it is not any more directly connected with it, the value of C is reduced by fpvq. Let us introduce the Bernoulli random variable B r2s v,u,k,l, which will indicate whether vertex v makes a contribution through itself to the random set QTk Y C l. More formally, we have:\nEr\u00b4fpvqBr2sv,k,ls \u201c \u00b4fpvqP rv P NpQTk Y C lqs.\nNow, we will move on to the second step of the proof and use a combinatorial argument to compute P r1s \u201c P rpNpuq Y tuuq X pQTk Y C lq \u201c Hs and P r2s \u201c P rv P NpQTk Y C lqs. Recall that there are exactly\n`|M |\u00b41 k \u02d8`|Cj |\u00b41 l \u02d8 sets QTk Y C l. This is the size of the sample space. With this in mind, the probability P r1s for u P Npvq, if u, v P Cj can be computed as follows:\nP r1.1s \u201c `|M |\u00b41\u00b4degCS puq k \u02d8`|Cj |\u00b41\u00b4degjpuq l \u02d8\n`|M |\u00b41 k \u02d8`|Cj |\u00b41 l\n\u02d8 ,\n108\notherwise if v P Cj and u P Ci and i \u2030 j we have:\nP r1.2s \u201c `|M |\u00b41\u00b4degCS puq k \u02d8`|Cj |\u00b4degjpuq l \u02d8\n`|M |\u00b41 k \u02d8`|Cj |\u00b41 l \u02d8\nFinally, for v P Cj and u P Npvq we obtain:\nErfpuqBr1sv,u,k,ls\u201c\n$ \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 &\n\u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 \u2019 %\n0 if u P Cj and `\ndegCS puq\u0105|M |\u00b41 or degjpuq \u0105 |Cj| \u00b4 1 \u02d8\nfpuqP r1.1s if u P Cj 0 if u R Cj\nand ` degCS puq\u0105|M |\u00b41 or degjpuq \u0105 |Cj| \u02d8\nfpuqP r1.2s if u R Cj\n(6.2)\nIn order to compute P r2s we consider a complementary event P r2s \u201c p1\u00b4P rNpvqXpQTkY C lqq \u201c Hsq and using the same combinatorial argument as for computing P r1.1s, for v P Cj we get:\nP r2s \u201c 1\u00b4 `|M |\u00b41\u00b4degCS pvq k \u02d8`|Cj |\u00b41\u00b4degjpvq l \u02d8\n`|M |\u00b41 k \u02d8`|Cj |\u00b41 l\n\u02d8 ,\nand consequently we obtain:\nErfpvqBr2sv,k,ls\u201c\n$ \u2019 \u2019 &\n\u2019 \u2019 %\n\u00b4fpvq if ` degCS puq\u0105|M |\u00b41 or degjpuq \u0105 |Cj| \u00b4 1 \u02d8\n\u00b4fpvqP r2s otherwise. (6.3)\nThe final formula combines equations (6.2) and (6.3) :\nErMCpQTk Y C l, vqs\u201c \u00ff\nuPNpvq\n\u00b4 ErfpuqBr1sv,u,k,ls \u00af ` ErfpvqBr2sv,k,ls\n\u201c \u00ff uPNpvqXCj fpuq \u00b4\n`|M |\u00b41\u00b4degCS puq k \u02d8`|Cj |\u00b41\u00b4degjpuq l \u02d8\n`|M |\u00b41 k \u02d8`|Cj |\u00b41 l \u02d8\n\u00af\n` \u00ff\nuPNpvqzCj\nfpuq \u00b4\n`|M |\u00b41\u00b4degCS puq k \u02d8`|Cj |\u00b4degjpuq l \u02d8\n`|M |\u00b41 k \u02d8`|Cj |\u00b41 l \u02d8\n\u00af\n\u00b4 fpvq \u00b4 1\u00b4 `|M |\u00b41\u00b4degCS pvq k \u02d8`|Cj |\u00b41\u00b4degjpvq l \u02d8\n`|M |\u00b41 k \u02d8`|Cj |\u00b41 l \u02d8\n\u00af\n. (6.4)\n109\nThe above formula can be used to compute ETk,ClrMCpQTk Y C l, vqs in polynomial time. Therefore, the game-theoretic network degree centrality for graph G with community structure CS can be computed in polynomial time using equation from Definition 32 which ends our proof."}, {"heading": "6.5.3. Algorithms", "text": "Algorithm 17 directly implements expression from Definition 32. The expected value operator is computed using the final result of Theorem 3: equation (6.4). It computes the game-theoretic network degree centrality for a given graph G with community structure CS . For the sake of clarity, we assume in our algorithm that for a \u0103 b we have `\na b\n\u02d8\n\u201c 0, and for any a we have a 0 \u201c 0.\nAlgorithm 17: The Coalitional Semivalue-based weighted degree centrality Input: Graph G \u201c pV,Eq, node v P V , coalition structure CS , functions \u03b2 and family of\nfunctions t\u03b1u Data: for each vertex u P V and the community v P Cj: degCS puq - the inter-community degree degjpuq - the intra-community degree Output: \u03c6CSEMIv coalitional semivalue-based degree centrality\n1 \u03c6CSEMIv \u00d0 0; 2 for k \u00d0 0 to |M | \u00b4 1 do 3 for l \u00d0 0 to |Cj| \u00b4 1 do 4 MCk,l \u00d0 0; 5 foreach u P Npvq X Cj do 6 MCk,l\u00d0MCk,l` fpuqp|M |\u0301 1\u0301 degCS puqk qp|Cj |\u0301 1\u0301 degjpuql q p|M |\u00b41k qp|Cj |\u00b41l q 7 foreach u P NpvqzCj do 8 MCk,l\u00d0MCk,l ` fpuqp|M |\u0301 1\u0301 degCS puqk qp|Cj |\u0301 degjpuql q\np|M |\u00b41k qp|Cj |\u00b41l q ;\n9 MCk,l\u00d0 MCk,l \u00b4 fpvq;\n10 MCk,l\u00d0 MCk,l` fpvqp|M |\u00b41\u00b4degCS pvqk qp|Cj |\u00b41\u00b4degjpvql q\np|M |\u00b41k qp|Cj |\u00b41l q ;\n11 \u03c6CSEMIv \u00d0 \u03c6CSEMIv ` \u03b2pkq\u03b1jplqMCk,l;\nThis algorithm requires some precomputations. For each node u P V we need to calculate degCS pvq and degjpvq. We can store these values usingOp|V |q space. Provided that it is possible to check the community of a given node in constant time, we can perform these precomputations in Op|V | ` |E|q time. In the worst case, the main algorithm works in Op|V |3q time. Our next observation is that for trivial coalition structures (such as CS \u201c tAu, or CS \u201c tta1u, ta2u, . . . , tanuu) our algorithm computes any weighted degree-based semivalue in Op|V |2q time. Finally, we would like to note that this algorithm is easily adapted to directed\n110\nnetworks. To this end, depending on the new definition of weighted group degree, we need to replace all instances of degCS puq and degjpuq with their counterparts for directed networks: in or out degree.\nAlgorithm 18 is the optimized version of Algorithm 17 to compute Owen value for weighted\ndegree centrality."}, {"heading": "6.6. Simulations", "text": "The main aim of this experiment is to compare three rankings created by three different methods: (i) one that uses weighted degree centrality and evaluates each node v by the number of neighbours it has (we denote it by \u03bdWDG ptvuq); (ii) one with the Shapley value-based degree centrality (denoted \u03c6SVv ); and, (iii) one with the Owen value-based degree centrality (denoted \u03c6OVv ), which evaluates nodes in the context of the communities they belong to and their respective power. Thus, the first two methods do not account for the existence of the community structure while the third one does.\n111\nThe real-life network used for simulations is a citation network that consists of 2, 084, 055 publications and 2, 244, 018 citation relationships.2 This dataset is a list of publications with basic attributes (such as: title, authors, venue, or citations), and it is part of the project ArnetMiner being under development by Tang et al. [2008]. All publications extracted from this dataset were categorized into 22954 unique communities representing journals, conference proceedings or single book titles using basic text mining techniques. These communities can be interpreted as scientific groups united under the same topics of interests. In our experiment we use the directed version of our algorithm and assume that fpvq \u201c 1 #numer of articles citing v . The Shapley value-based centrality (the second method) is computed using the polynomial time algorithm introduced by Michalak et al. [2013a]. The Owen value-based centrality is computed with the modification of Algorithm 17, in which thanks to the form of the \u03b1 and \u03b2 (in Owen value these discrete probabilities are uniform) the complexity was reduced to Op|V | ` |E|q. In what follows we focus on the 11 top nodes from the basic ranking \u03bdWDG ptvuq. Figure 6.1 shows the relative power of the communities to which these nodes belong. Nodes indexed 5, 6 and 8 belong to significantly less powerful communities than nodes 1, 2, 3, 4, 7, 9, 10 and 11.\nFigure 6.2 shows how the position of top nodes selected using \u03bdDG ptvuq changes in the \u03c6SVv and \u03c6OVv rankings. While for most nodes the perturbations are not so intensive, we observe\n2 The database used for these experiments is available under the following link: http://arnetminer.org/citation.\n112\nsignificant downgrade of the position of nodes 5, 6 and 8 in theOVv ranking. This demonstrates coalitional semivalues-based centrality (in this case the Owen value-based centrality) is able to recognize that these three nodes belong to much weaker communities.\nThe rankings of nodes may differ depending which coalitional semivalue we choose. To illustrate this fact we evaluated top 5 nodes with the highest degree centrality from Zachary Karate Club Network [Zachary, 1977]. This network consists of 34 nodes divided into two communities. We observe in Table 6.3 that the ranking created with the Owen value differs with the one created with Owen-Banzhaf value at the 3rd and 4th positions."}, {"heading": "6.7. Conclusions", "text": "The centrality metric proposed in this chapter is the first tool that evaluates individual nodes in the context of their communities. This metric is based on the Owen value\u2014a well-known concept from coalitional game theory that we generalize by introducing coalitional semivalues. Our experiments show that the rankings can significantly differ if we account for the power of the relevant communities that the nodes belong to. If the community of a node is weak, it can significantly weaken the position of the node in the ranking based on the coalitional semivalue. It also demonstrates that our polynomial time algorithm is applicable to large data sets."}, {"heading": "7. Computational Analysis of a Connectivity Game", "text": "on Networks\nWe study a recently developed centrality metric to identify key players in terrorist organisations due to Lindelauf et al. [2013]. This metric, which involves computation of the Shapley value for connectivity games on graphs proposed by Amer and Gimenez [2004], was shown to produce substantially better results than previously used standard centralities. In this chapter, we present the first computational analysis of this class of coalitional games, and propose two algorithms for computing Lindelauf et al.\u2019s centrality metric. Our first algorithm is exact, and runs in time linear by number of connected subgraphs in the network. As shown in the numerical simulations, our algorithm identifies key players in the WTC 9/11 terrorist network, constructed of 36 members and 125 links, in less than 40 minutes. In contrast, a general-purpose Shapley value algorithm would require weeks to solve this problem. Our second algorithm is approximate and can be successfully used to study much larger networks.\nThe contribution of the author of this dissertation covers the complexity analysis and developing exact and approximate algorithms for computing Lindelauf et al.\u2019s centrality metric."}, {"heading": "7.1. Introduction", "text": "Despite enormous efforts to tackle terrorism in the aftermath of 9/11, many terrorist networks are growing in size [Shultz et al., 2009]. For instance, the number of core members of Al\u2019Qaeda, arguably the most infamous terrorist group, is currently estimated to exceed 800, with their operations spreading over more than 20 countries.\nFacing, on the one hand, the increased size of terrorist groups and, on the other hand, inevitable budget cuts, security agencies urgently require efficient techniques to identify who plays the most important role within a terrorist network and, therefore, where scarce resources should predominantly be focused. In this context, a number of authors have proposed using social network analysis to investigate terrorist organisations (e.g., Carley et al. [2003], Krebs [2002], Farley [2003], Lindelauf et al. [2013], Ressler [2006]).\nNow, the key strength of social network analysis is its bottom-up approach in that the structure and the functioning of a group is gradually revealed by considering pairwise relationships between the individuals who create the group (cfr. Ressler [2006]). In this\n114\ncontext the identification of the key individuals within the network is called a centrality analysis. Analyst\u2019s Notebook 8 [I2, 2010]\u2014a software package used worldwide by law enforcement and intelligence agencies\u2014has recently included standard centrality metrics for networks (graphs), such as degree, closeness and betweenness centralities [Brandes and Erlebach, 2005, Friedkin, 1991]. But the usefulness of these metrics for terrorist networks is limited as they are often unable to capture the complex nature of these organisations [Lindelauf et al., 2013].\nRecently, to address these shortcomings, Lindelauf et al. [2013] developed a more advanced method specifically designed to measure centrality in terrorist networks. The new method belongs to a class of so-called Shapley value-based centrality (see Definition 25) and builds upon the notion of coalitional connectivity games proposed by Amer and Gimenez [2004]. These games are defined on graphs, where a coalition of nodes gets a non-zero value if and only if the induced sub-graph is connected. Such a game has an appealing interpretation in our context: it reflects communication capabilities among various groups of terrorists within the network. Indeed, when applied to the terrorist networks responsible for the 9/11 WTC and 2002 Bali attacks (with 23 and 17 members, respectively), Lindelauf et al. showed that their method produces qualitatively better results than standard centrality metrics.\nUnfortunately, the computational aspects of connectivity games by Amer and Gimenez have not been studied to date. This means that the current use of Lindelauf et al.\u2019s method is limited only to small terrorist networks (of 25 members or so) because general-purpose algorithms for coalitional games have to be applied, which exhaustively search the space of all possible coalitions. Thus, they are inapplicable to many real-world applications such as the terrorist networks responsible for the WTC 9/11 attack (from 35 to 63 nodes depending on the considered type of links between terrorist).\nAgainst this background, we provide in this chapter the first computational analysis of\nconnectivity games proposed by Amer and Gimenez:\n\u2014 We prove that computing the Shapley value in connectivity games\u2014including the centrality\nmetrics of Lindelauf et al.\u2014is #P-Hard.\n\u2014 We propose a dedicated exact algorithm for computing these centrality metrics. While the\ngeneral-purpose Shapley value algorithm requires checking all subsets of vertices in the graph, our algorithm traverses through (most often) much smaller number of connected subgraphs. It also has minimal memory requirements. \u2014 We test our algorithm by analysing the aforementioned WTC 9/11 terrorist network with 36\nmembers and 125 identified connections. In this setting, our algorithm returns the solution within 38 minutes, compared to weeks if a general-purpose approach was applied. \u2014 In order to study even bigger networks, we propose a dedicated approximate algorithm\nbased on Monte Carlo sampling. By comparing to our exact algorithm, we show that, after\n115\na reasonable number of iterations, the approximate algorithm yields a very accurate ranking of top nodes based on the centrality of Lindelauf et al."}, {"heading": "7.2. Related Work", "text": "A rapidly growing body of work is directed to the analysis of terrorist organisations using the methods of social network analysis. A very good introduction to this line of research can be found in Ressler [2006]. Also worthy of note is the work of Farley [2003], Carley et al. [2003], and Husslage et al. [2012], who conduct quantitative analysis of the terrorist networks.\nSince the work of Grofman and Owen [1982], a number of game-theoretic centrality measures have been developed either to enrich the existing well-known centralities or as completely new ones (see Chapter 3). In the terrorist network context, Lindelauf et al. [2009a] and Lindelauf et al. [2009b] employed the game-theoretic approach to analyze covert networks.\nThe hardness result presented in this chapter is consistent with other studies of the complexity of the Shapley value in various settings. For instance, computing the Shapley value was shown to be #P-Complete for weighted majority games [Deng and Papadimitriou, 1994] and in minimum spanning tree games [Nagamochi et al., 1997]. Aziz et al. [2009] obtained negative results for a related problem of computing the Shapley-Shubik power index for the spanning connectivity games that are based on undirected, unweighted multigraphs. Also, Bachrach et al. [2008] showed that the computation of the Banzhaf index for connectivity games, in which agents own vertices and control adjacent edges and aim to become connected to the certain set of primary edges, is #P-Complete. A comprehensive review of these issues, including some positive results for certain settings, can be found in [Chalkiadakis et al., 2011].\nFinally, it should be mentioned that other types of connectivity games have been considered in the literature. These include vertex connectivity games proposed by Bachrach et al. [2008] and the spanning connectivity games proposed by Aziz et al. [2009]. The common denominator of these games is that they are interested in maintaining the connectivity between certain set of nodes and they further study the ability of each node to affect the outcome of these games. In particular, the concepts like Banzhaf power index and Shapley-Shubik power index are utilized to measure the influence of nodes [Bachrach et al., 2008, Aziz et al., 2009].\nIn the already classic work, Krebs [2002] applied standard centrality measures to determine the key players in the 9/11 terrorist network. Memon et al. [2008] developed an algorithm based on the two well known centrality measures from social network analysis to automatically detect the hidden hierarchy in terrorist networks. Recently, Xu et al. [2009] explored the use of social network analysis methods to analyze terrorist networks mostly focusing on assigning roles to actors in the network. Most of the above mentioned work in the literature focus on identifying key players in the terrorist networks. A complementary approach is proposed by Henke [2009]\n116\nthat combines aspects of traditional social network analysis with a novel multi-agent framework that describes how terrorist groups survive despite the aggressive counterterrorist operations."}, {"heading": "7.3. Connectivity Games for Terrorist Networks", "text": "Terrorist networks have been recently modeled using a weighted graph, G (Definition 13), composed of individual terrorists and labeled edges [Carley et al., 2003, Krebs, 2002, Farley, 2003, Lindelauf et al., 2013, Ressler, 2006]. Based on available intelligence, an edge represents, for instance, a communication link between two terrorists, and the weight of the edge represents the frequency with which that link is used. Weights can be associated not only with edges but also with vertices. This, as argued by Lindelauf et al., allows for modeling additional information that intelligence agencies gather on individuals within the network, such as access to weapons, financial means, previous experience, and participation in a terrorist training camp. We will denote the weight of vertex vi P V pGq as \u03b3piq P \u0393pGq.\nDefinition 35 (Vertex-weighted graph). The vertex-weighted graph G \u201c pV,E, \u03b3q is a simple/directed/weighted graph, with a function \u03b3pvq : V \u00d1 R that evaluates each node. The value \u03b3pvq is called the weight of a node v.\nTo address the limitations of standard centrality metrics, Lindelauf et al. proposed a new metric that builds upon connectivity games by Amer and Gimenez [2004]. In these coalitional games on graphs, all subsets of set V pGq are considered to be possible coalitions of terrorists. Apart from the empty set, every single coalition is classified as belonging to either the set of connected coalitions (denoted CpGq) or disconnected coalitions (denoted C\u0303pGq). We say that C is connected if between any two nodes in C there exists at least one path of which all nodes belong to C. Otherwise C is disconnected. Importantly, any two terrorists in a connected coalition are able to communicate with each other (via a path), whereas in a disconnected coalition this is not the case. In many connected coalitions, from this point of view, some nodes play more important role than others, as their removal makes a coalition disconnected. We will call them pivotal.\nDefinition 36 (Pivotal node). Given connected coalition C P CpGq, a node vi P C is pivotal to C iff Cztviu R CpGq.\nIf such node is removed, the coalition becomes disconnected. In our context, communication between all terrorists within the subgroup becomes impossible.\n117\nDefinition 37 (Connectivity game). The connectivity game is a coalitional game defined on graph pV, \u03bdCq, where the characteristic function is defined:\n\u03bdCpCq \u201c\n$ &\n%\n1 if C P CpGq\n0 otherwise.\n.\nIn such a game defined by Amer and Gimenez [2004] every connected coalition is evaluated to 1, and disconnected coalitions evaluated to 0. Lindelauf et al. extend this definition by assuming that values of connected coalitions may depend on the network in a variety of ways, i.e., they can be a function of adjacent edges or nodes, their weights, etc. More formally:\nDefinition 38 (Lindelauf centrality). The Lindelauf centrality is a game-theoretic centrality p\u03c8f , \u03c6SV q, where the representative function \u03c8f is defined:\n\u03c8f pGq \u201c \u03bdf pCq \u201c\n$ &\n%\nfpC,Gq if C P CpGq\n0 otherwise.\n.\nThe exact definition of f depends on the availability of information and analytical needs. For instance, to analyse the Jemaah Islamiyah network responsible for the 2002 Bali attack in Indonesia, Lindelauf et al. assume:\nfpCq \u201c |EpCq|\u0159 pvi,vjqPEpCq\u03bbpvi,vjq , (7.1)\nthat is f equals the number of edges in the connected coalition C (denoted by EpCq) divided by their weight.\nLindelauf et al. show that the centrality ranking based on the Shapley value of the connectivity game is much more effective than degree, closeness and betweenness centralities in exposing the key players in the Bali attack. In particular, Azahari bin Husin\u2014the network bomb expert who was considered the \u201cbrain\u201d behind the entire operation\u2014is ranked low by standard centralities but according to Lindelauf et al. metric is among top five Bali terrorists. Similarly, Feri (Isa)\u2014again ranked low by standard centralities\u2014was, in fact, the suicide bomber. Lindelauf et al. ranked him third.\nFor big networks networks, the only feasible approach to compute Shapley value currently outlined in the literature is Monte-Carlo sampling (see Section 4.4.1). However, this method is not only inexact, but can be also very time-consuming. For instance, as shown in our simulations, for a weighted network of about 16,000 nodes and about 120,000 edges, the Monte Carlo approach has to iterate 300, 000 times through the entire network to produce the\n118\napproximation of the Shapley value with a 40% error margin.1 Exponentially more iterations are needed to further reduce this error margin."}, {"heading": "7.4. Computational Analysis & Algorithms", "text": "In this section, we first discuss the complexity of computing the centrality metrics of Lindelauf et al.. We then present our exact and approximate algorithms."}, {"heading": "7.4.1. Complexity", "text": "First we show that, even for the simplest definition of the connectivity game, where @CPCpGqfpC,Gq \u201c 1, computing the Shapley value in an efficient way is impossible. The main problem of interest is as follows:\nDefinition 39 (#CG-SHAPLEY). Given a connectivity game on graph G, where @CPCpGqfpC,Gq \u201c 1, we are asked to compute the Shapley value for each node in this graph.\nIn the first step, let us introduce the following problem:\nDefinition 40 (#CONNECTED-SPANNING-SUB (#CSS)). Given a graph G, we are asked to compute the number of connected spanning subgraphs in G.2\nThis problem is #P-Complete even for bipartite and planar graphs [Welsh, 1997]. We will\nuse this hardness result to prove #P-Completeness of the following problem:\nDefinition 41 (#CONNECTED-INDUCED-SUB (#CIS)). Given a graph G, we are asked to compute the number of connected induced subgraphs in G.\nTheorem 4. #CONNECTED-INDUCED-SUB is #P-Complete.\nProof of Theorem 1 We note first that it is possible to check in polynomial time if a given subgraph is induced and connected. Thus, since a witness can be verified in polynomial time, this problem is in #P. Now, we will reduce a #CSS instance to #CIS. To this end, given a graph G \u201c pV,Eq, we will construct a transformed graph G1 and show that determining the number of connected induced subgraphs in G1 allows us to easily compute the number of connected spanning subgraphs in G.\n1 See Section 7.5 for the exact definition of the error margin. 2 A connected subgraph F of the given graph, G \u201c pV,Eq, is called spanning if it contains all nodes from G,\ni.e., V pF q \u201c V pGq.\n119\nOur transformed graph G\u2019 is constructed by adding to each edge in G an extra node. Then, to each node from original graph G we attach a clique KA with A nodes. This reduction is shown in Figure 7.1. More formally we define the following graph G1:\nV pG1q \u201cV pGq Y tvi : v P V pGq ^ i P t1, . . . , Auu Y\ntvu : pv, uq P EpGqu\nEpG1q \u201ctpv, uvq : pu, vq P EpGqu Y\ntpv, viq : v P V pGq ^ i P t1, . . . , Auu Y tpvi, vjq : v P vpGq ^ i, j P t1, . . . , Auu ^ i \u0103 ju\nNow, we arbitrarily choose some connected induced subgraph F of G1. Either this subgraph intersects with the original set of vertices V pGq, or it does not. In the latter case, subgraph F is contained within the single copy of KA and there are exactly |V pGq|p2A \u00b4 1q such subgraphs. In the former case, we can define some pseudograph F 1, which consists of the following sets of vertices and edges:3\nV pF 1q \u201cV pF q X V pGq EpF 1q \u201ctpu, vq : uv P V pF q ^ pu, vq P EpGqu\nNote that since F is connected, F 1 also has to be connected. There are exactly 2|V pF 1q|A choices of F that can give us a particular pseudograph F 1. Now, we can compute:\nM \u201c |V pGq|p2A \u00b4 1q ` \u00ff\nF 1\n2|V pF 1q|A (7.2)\nwhich denotes the number of induced connected subgraphs in G1.\nThe crucial observation here is that, if V pF 1q \u201c V pGq, then F 1 is a connected spanning subgraph of G. This holds because F is an induced connected subgraph. Now, let N denote the number of spanning connected subgraphs in G. Then, we can rewrite (7.2) as:\nM \u201c |V pGq|p2A \u00b4 1q `Np2|V pGq|Aq ` \u00ff\nF 1:V pF 1q\u2030V pGq\n2|V pF 1q|A (7.3)\nIn order to compute N we would like to bound the expression X \u201c M \u00b4 Np2|V pGq|Aq. This expression is the number of induced connected subgraphs in G1 that do not correspond to any\n3 We note that this tuple is not necessarily a properly defined graph, since it can contain some edge pu, vq and does not contain node v.\n120\nconnected spanning subgraph in G. We have:\n0 \u010f X \u010f |V pGq|p2A \u00b4 1q ` 2|V pGq|`|EpGq|2p|V pGq|\u00b41qA\nwhere the number 2|V pGq|`|EpGq| is an upper bound on the number of all subgraphs in G. Now, we can use these bounds to transform equation (7.3) and to determine the approximation of N :\nN \u201c M 2|V pGq|A \u00b4 X 2|V pGq|A \u00bb M 2|V pGq|A\n\u00b4 |V pGq| ` 2 |V pGq|`|EpGq|\n2A\nIn order to deal with the expression |V pGq|`2 |V pGq|`|EpGq|\n2A we take A \u0105 logp|V pGq| `\n2|V pGq|`|EpGq|q so that this fraction becomes smaller than 1. We note that A is bounded by a polynomial in the order of the input G. Then, the number of spanning connected subgraphs of G is the least integer N such that N \u011b M 2A|V pGq| . This is easy to compute given the number of connected induced subgraphs F of G1. This completes the proof. l From Theorem 4, it trivially follows that the next problem is also #P-Complete:\nDefinition 42 (#CONNECTED-INDUCED-SUB-k (#CIS-k)). Given a graph G, we are asked to compute the number of connected induced subgraphs of size k in G.\nClearly, if we can find in polynomial time an answer for the #CIS-k problem, we could efficiently compute #CIS. Now, the #P-Hardness of #CG-SHAPLEY will be shown by the reduction from #CIS-k:\nTheorem 5. #CG-SHAPLEY is #P-Hard.\nProof of Theorem 2: We construct a proof by reduction. In particular, we demonstrate that if there exists an algorithm for solving #CG-SHAPLEY in polynomial time, then it is possible to\n121\nsolve #CIS-k in polynomial time. This contradicts the fact that #CIS-k is #P-complete. Now, we will reduce #CIS-k to #CG-SHAPLEY.\nLet G \u201c pV,Eq be an arbitrary graph, where |V | \u201c n and |E| \u201c m. We extend the set of nodes of G by a single node v, while the set of edges remains unchanged. In other words, we obtain a new graph G0 by adding a single node not connected to any node from G. Now, from the definition of connectivity games, we note that the marginal contribution of the new node v to any coalition C \u010e G is either 0 or \u00b41. More specifically, it is \u00b41 if C is connected, and 0 otherwise. Based on this, the Shapley value of node v can be computed as follows, where cGs is the number of connected induced subgraphs in G that contain exactly s nodes:\n\u03c6SVv,G0 \u201c \u00b4 n \u00ff\ns\u201c0\npsq!pn\u00b4 sq! pn` 1q! c G s\nNow, let us consider a new graph Gi constructed by adding to G the set of i nodes in addition to the node v, while keeping the set of edges just as in G. Analogously to G0, the Shapley value of v in Gi is:\n\u03c6SVv,Gi \u201c \u00b4 n \u00ff\ns\u201c0\npsq!pn` i\u00b4 sq! pn` 1` iq! c G s (7.4)\nThis equation holds because each coalition containing more than n nodes is disconnected, and so the contribution of v to every such coalition is 0. Now, we can build a system of linear equations using each equation (7.4) from graph Gi, where i P t0, . . . , nu. More precisely, we need to solve the following equation:\n\u00bb\n\u2014 \u2014 \u2014 \u2013\n0!n! 1!pn\u00b4 1q! \u00a8 \u00a8 \u00a8 n!0! 0!pn` 1q! 1!n! \u00a8 \u00a8 \u00a8 n!1!\n... ... . . . ... 0!p2nq! 1!p2n\u00b4 1q! \u00a8 \u00a8 \u00a8 n!n!\nfi\nffi ffi ffi fl\n\u00bb\n\u2014 \u2014 \u2014 \u2013 cG0 cG1 ... cGn\nfi\nffi ffi ffi fl \u201c\n\u00bb\n\u2014 \u2014 \u2014 \u2013\npn` 1q!\u03c6SVv,G0 pn` 2q!\u03c6SVv,G1\n... p2n` 1q!\u03c6SVv,Gn\nfi\nffi ffi ffi fl\nthat can also be written as Ax \u201c b. This equation has a unique solution if and only if the determinant of the matrix A is non-zero. We can use Theorem 1.1 from [Bacher, 2002] to prove that it is non-zero. Thus, if we can compute in polynomial time the Shapley value for connectivity games, we would be able to solve this equation and determine all cGi values. Specifically, we can use Gaussian elimination, which works in Opn3q time complexity. We note that the largest possible number in our matrices is n!n!. According to the analysis in (Proposition 2)[Aziz et al., 2009] it is possible to store such a number in km2plogmq2 bits. It is shown in (Theorem 4.10) [Korte and Vygen, 2005] that in Gaussian elimination each number occurring during the algorithm process can be stored in the number of bits quadric of the input size. This final observation ends our proof. l\n122"}, {"heading": "7.4.2. Analysis of Marginal Contribitions", "text": "In this section, we analyse how node vi P V can marginally contribute to coalition C \u010e V ztviu. Four general cases, depicted in Figure 7.2, can be distinguished:\n(a) Node vi can join a connected coalition C P C and the resulting coalition is also connected, i.e., C Y tviu P C. Here, the marginal contribution is equal to the difference in the value of C P C caused by the addition of vi: MCpC, viq \u201c \u03bdf pC Y tviuq \u00b4 \u03bdf pCq \u201c fpC Y tviuq \u00b4 fpCq (b) Node vi can join a disconnected coalition C P C\u0303 and the resulting coalition becomes connected, i.e., C Y tviu P C. Here, vi\u2019s contribution is the whole value of C Y tviu: MCpC, viq \u201c \u03bdf pC Y tviuq \u00b4 \u03bdf pCq \u201c fpC Y tviuq (c) Node vi can join a connected coalition C P C\u0303 and the resulting coalition becomes disconnected, i.e., C Y tviu P C\u0303. This means that vi brings down the value of C to 0: MCpC, viq \u201c \u03bdf pC Y tviuq \u00b4 \u03bdf pCq \u201c \u00b4fpCq (d) Node vi can join a disconnected coalition C P C\u0303 and the resulting coalition remains disconnected, i.e., C Y tviu P C\u0303: MCpC, viq \u201c \u03bdf pC Y tviuq \u00b4 \u03bdf pCqq \u201c 0\nThe key conclusion to be drawn from the above analysis is that both connected and disconnected coalitions play a role when computing the Shapley value. This is because a node\n123\ncan contribute not only to a connected coalition, but also to a disconnected one (by making it connected). However, in the further sections, we will show that it is possible to develop an exact algorithm that only cycles through connected coalitions."}, {"heading": "7.4.3. The Basic Algorithm for Connectivity Games", "text": "Based on the observation that both connected and disconnected coalitions play a role when computing the Shapley value, we develop the general-purpose Shapley value algorithm (GeneralSV presented in Algorithm 19) for computing the Shapley value in connectivity games defined by Amer and Gimenez. In more details, for each coalition C P 2V this algorithm considers four aforementioned cases (a), (b) and (c) as outlined in Figure 7.2 in our chapter. Importantly, for (d), it can be disregarded since the marginal contribution in this case equals 0. In all of the rest three cases, a node vi can make a non-zero contribution by joining a coalition. We note that function CheckConnectednesspCq runs in Op|C| ` |EpCq|q.\nAlgorithm 19: GeneralSV Algorithm for the Shapley value Input: Graph G \u201c pV,Eq and characteristic function \u03bdf Output: Shapley Value, \u03c6SVi p\u03bdf q, for each node vi P V 1 foreach vi P V do 2 \u03c6SVi p\u03bdf q \u00d0 0; 3 foreach C P 2V do 4 CheckConnectednesspCq; 5 if C P C then 6 foreach vi P NpCq do 7 \u03c6SVi p\u03bdf q \u00d0 \u03c6SVi p\u03bdf q ` |C|!p|V |\u00b4|C|\u00b41q! |V |! p\u03bdf pC Y tviuq \u00b4 \u03bdf pCqq 8 foreach vi R NpCq do 9 \u03c6SVi p\u03bdf q \u00d0 \u03c6SVi p\u03bdf q \u00b4 |C|!p|V |\u00b4|C|\u00b41q! |V |! \u03bdf pCq\n10 else 11 foreach vi P NpCq do 12 CheckConnectednesspC Y tviuq 13 if C Y tviu P C then 14 \u03c6SVi p\u03bdf q \u00d0 \u03c6SVi p\u03bdf q ` |C|!p|V |\u00b4|C|\u00b41q! |V |! \u03bdf pC Y tviuq\nUnfortunately, the use of this algorithm in practice is limited by the number of nodes in the network. It runs in Opp|V | ` |E|q2|V |q and already for |V | \u201c 50, the Algorithm 19 has to cycle through more than 1015 coalitions. In this dissertation, we developed an algorithm that for many networks is able to compute the SV substantially faster.\n124"}, {"heading": "7.4.4. The Faster Algorithm for Connectivity Games", "text": "Many real-world terrorist networks are sparse, i.e., |C| ! |C\u0303| [Krebs, 2002]; thus, if the Shapley value could be computed only by considering coalitions in C, it would be possible to analyse much larger terrorist networks. To this end, for each vi P V , let us define the following disjoint sets of coalitions:\nC#i \u201ctC \u010e V ztviu : C P C ^ C Y tviu P Cu C`i \u201ctC \u010e V ztviu : C P C\u0303 ^ C Y tviu P Cu C\u00b4i \u201ctC \u010e V ztviu : C P C ^ C Y tviu P C\u0303u\nwhich correspond to cases (a), (b) and (c) from the previous section. Based on this, the\noriginal formula for Shapley value (Definition 5) can be computed as:\n\u03c6SVi pV, \u03bdf q \u201c \u00ff\nC\u010eV ztviu\n|C|!p|V | \u00b4 |C| \u00b4 1q! |V |! p\u03bdf pC Y tviuq \u00b4 \u03bdf pCqq\n\u201c \u00ff\nCPtC`i YC # i YC \u00b4 i u\n|C|!p|V | \u00b4 |C| \u00b4 1q! |V |! p\u03bdf pC Y tviuq \u00b4 \u03bdf pCqq (7.5)\nwhere case (d), when mcipCq \u201c 0, is simply omitted. The key idea behind our exact algorithm to compute the Shapley value in connectivity game (FasterSVCG presented in Algorithm 20) is to represent the sets C`i and C\u00b4i differently, such that C\u0303 does not appear in the new representation. As for C#i , it does not depend on C\u0303, and so there is no need to represent it differently. In particular, we represent C`i and C\u00b4i as follows, where PpCq is the set of agents that are pivotal to C, and NpCq is the set of neighbours of C:\nC`i \u201ctC \u010e V ztviu : C Y tviu P C ^ vi P PpC Y tviuqu C\u00b4i \u201ctC \u010e V ztviu : C P C ^ vi R NpCqu\nNow since C\u0303 no longer appears in the definitions of C#i , C`i and C\u00b4i , it is possible to compute the Shapley value as in equation (7.5) without enumerating any of the coalitions in C\u0303. Based on this, our algorithm enumerates every connected coalition, C P C, and determines for each\n125\nagent vi P C whether Cztviu P C#i or Cztviu P C`i and for vi R C if C P C\u00b4i . Note, that we do not consider the impact of agent vi R C that do not disconnect C because the contribution of this agent will be calculated for connected coalition C Y tviu as C P C#i . The enumeration is carried out using Moerkotte and Neumann [2006]\u2019s method\u2014the fastest such enumeration method in the literature. Its basic idea is that, for each connected coalition C P C, it expands C by adding to it certain subsets of its neighbours. These subsets are chosen so as to ensure that no connected coalition is enumerated more than once (see Moerkotte an Neumann [2006] for more details).\nNext, we explain our algorithm. To enhance clarity, for every connected coalition C P C, we will define three disjoint sets of agents: V #C \u201c tvi P C : Cztviu P C # i u, V `C \u201c tvi P C : Cztviu P C`i u, and V \u00b4C \u201c tvi P V zC : C P C\u00b4i u. If we compute the above sets for every C P C, then we can compute the Shapley value. Let us take a closer look at the difficulty of computing those sets for a given C.\n\u2014 Computing V \u00b4C can be done in Op|V |q time. This is because the agents in V \u00b4C are basically all those that are not members, nor neighbours, of C. \u2014 Now, to compute V `C , we need to find the pivotal agents in C. This can be computed using\na method \u201cfindPivotals\u201d that runs in Op|V | ` |E|q [Alsuwaiyel, 1999]. \u2014 Having computed V `C , it becomes easy to compute V # C . This is because V # C \u201c CzV `C .\nFrom the above analysis, it is clear that the main difficulty lies in findPivotals. Therefore, whenever possible, we would like to compute V `C using some other, easier, technique. In particular, when we expand a connected coalition, C, into another connected coalition C 1 \u201c C Y S, we try to update the set of pivotal agents, rather than compute it from scratch with findPivotals. Here, we distinguish between three conditions:\n\u2014 Condition 1: The cycles in C 1 are exactly like those in C. In this case, the set V `C1 consists\nof elements of V `C , expanded by the nodes in C that are connected to S.\n\u2014 Condition 2: C 1 contains a cycle that is not in C. Here, we need to call findPivotals. \u2014 Condition 3: |C| \u201c 2. In this case, since we assumed that a singleton is a connected coalition, none of the two agents in C is pivotal.\nThe pseudocode of FasterSVCG is presented in Algorithm 20. It is easy to see that it runs in Opp|V | ` |E|q|C|q."}, {"heading": "7.4.5. Approximation algorithm for connectivity games", "text": "Our FasterSVCG algorithm is much faster than the GeneralSV, but it is not fast enough to deal with large networks. In order to provide ranking for larger networks we should use an approximation algorithms. In this section we provide the new approximation algorithm for\n126\nAlgorithm 20: FasterSVCG Faster algorithm for the Shapley value Input: Graph G\u201cpV,Eq and characteristic function \u03bdf Output: Shapley value \u03c6SVi p\u03bdf q of each node vi P V 1 X \u00d0 V ; // initialize X, which is only used for Moerkotte & Neumann\u2019s enumeration 2 foreach vi P V do \u03c6SVi pp\u03bdf q \u00d0 0; 3 for i\u00d0 |V | to 1 do 4 computeSV ptviu, Npviq, X,XzpNpviq Y tviuq,Hq; X \u00d0 Xztviu\n// ------- Next, we define computeSV -------\n5 computeSV pC,NC,X, V \u00b4C , V `C q begin 6 X 1 \u00d0 X YNC; // where NC consists of the neighbours of C 7 foreach S \u010e pNCzXq ^ S \u2030 H do 8 C 1 \u00d0 C; // a new coalition that will be constructed from the old coalition C NC 1 \u00d0 NCzS; // the neighbours of C1 9 isCycle\u00d0 false;// to indicate whether a new cycle has appeared while\nconstructing C1\n10 foreach v P S do 11 TEMP \u00d0H; // a temporary set used to compute neighbours of: C1 Y tvu\nTEMP2 \u00d0H; // a set used to compute the pivotal agents in: C1 Y tvu foreach u P NpSq do\n12 if u R pC YNCq then 13 TEMP \u00d0 TEMP Y tuu; 14 else if pisCycle \u201c falseq ^ pu P C 1q then // condition 1 15 TEMP2 \u00d0 TEMP2 Y tuu; 16 if |TEMP2 | \u0105 1 then // condition 2 17 isCycle\u00d0 true; 18 C 1 \u00d0 C 1 Y tvu; NC 1 \u00d0 NC 1 Y TEMP ; 19 V \u00b4C1 \u00d0 V \u00b4 C1ztvuzTEMP ; 20 if isCycle \u201c false then // condition 1 21 V `C1 \u00d0 V ` C1ztvu Y TEMP2 ; 22 if |C 1| \u201c 2 then // condition 3 23 V `C1 \u00d0H; 24 else if isCycle \u201c true then // condition 2 25 V `C1 \u00d0 FindPivotalspC 1q; 26 foreach vi P C 1 do // update Shapley value 27 if vi P V `C1 then 28 \u03c6SVi p\u03bdf q \u00d0 \u03c6SVi p\u03bdf q ` |C1ztviu|!p|V |\u00b4|C1ztviu|\u00b41q! |V |! \u03bdf pC 1q 29 else // deal with the set V # C1 30 \u03c6SVi p\u03bdf q\u00d0 \u03c6SVi p\u03bdf q` |C1ztviu|!p|V |\u00b4|C1ztviu|\u00b41q! |V |! p\u03bdf pC 1q \u00b4 \u03bdf pC 1ztviuqq 31 foreach vi P V \u00b4C1 do // update Shapley value 32 \u03c6SVi p\u03bdf q \u00d0 \u03c6SVi p\u03bdf q \u00b4 |C1|!p|V |\u00b4|C1|\u00b41q! |V |! \u03bdf pC 1q 33 computeSV pC 1, NC 1, X 1, V \u00b4C1 , V ` C1q;\n127\nconnectivity games (called ApproximateSVCG) that outperforms the standard Castro et al. [2009] method. To see discussion about different methods of approximation the Shapley value see Section 4.4.1.\nOur Algorithm 21 is the dedicated application of standard Monte Carlo sampling to connectivity games. The crucial difference between Castro et al. [2009] method and ApproximateSVCG is that instead of sampling permutations our algorithm sample coalitions. The first observation is that during sampling a single set C we can compute two contributions: one \u03bdf pC Y viq \u00b4 \u03bdf pCq, and the second \u03bdf pCq \u00b4 \u03bdf pCztviuq. Generally speaking, in our algorithm, we will randomly select C and and approximate the \u03c6SVi p\u03bdf q using the resulting average. Looking at the equation (7.5) we see that the marginal contributions are calculated with different weights. Thus, to obtain an unbiased estimator we have to compute marginal contributions with appropriate probabilities. To this end, we propose the following process consisting of 3 fazes. In Faze 1, we uniformly select the size of the coalition k P t0, . . . , |V |u. In Faze 2, we choose a random coalition C of size k and, in Faze 3, for every agent, compute the marginal contribution of this agent obtained by leaving/entering C. To better explain our motivation, let us transform the formula for the Shapley value (Definition 5) as follows:\n\u03c6SVi p\u03bdf q \u201c 1 |V | \u00ff\n0\u010fk\u0103|V | \u00a8 1`|V |\u00b41 k \u02d8\n\u00ff\nC\u010eV ztiu,|C|\u201ck\npvpC Y tviuq \u00b4 vpCqq (7.6)\nThe similar transformation was already made in equation 5.1, when we used it to compute efficiently Semivalues.\nFrom the above formula we infer that to obtain an unbiased estimator the sampling method\nshould satisfy two conditions:\n(i) the probability that a marginal contribution to randomly chosen C is obtained from entering\nvi to a coalition of size k is equal for every k: 1n`1 \u00a8 n\u00b4k n ` 1 n`1 \u00a8 k`1 n \u201c 1 n (n \u201c |V |);4\n(ii) marginal contributions to all coalitions of size k are chosen with the same probability.\nFor instance consider a pivotal node vi in coalition C of size k ` 1. The expected marginal contribution when C P C\u0303 and C Y tviu P C equals 1n`1 \u00a8 ` 1 pn\u00b41k\u00b41q \u02d8\n\u00a8 \u03bdf pCq. On the other hand, the same marginal contribution is obtained from leaving connected coalition C \u2013 here expected value equals 1 n`1 \u00a8 ` 1 pn\u00b41k q \u02d8\n\u00a8 \u03bdf pCq. As we won\u2019t consider transfers from the disconnected coalitions, we have to ensure that expected value from this marginal contribution does not change, so if we obtain C with the probability 1 n`1 \u00a8 ` 1 pn\u00b41k q \u02d8 we add marginal contribution which equals \u03bdf pCq \u00a8 p1` n\u00b4k`1k q \u201c \u03bdf pCq \u00a8 p n`1 k q.\n4 Note that a given marginal contribution appears twice in our process\u2014the first term represents the probability that we select a coalition of size k without player vi, while the second one\u2014that we select the corresponding coalition of size k ` 1, with player vi.\n128\nAlgorithm 21: ApproximateSVCG Approximation algorithm for the Shapley value Input: Graph G\u201cpV,Eq and characteristic function \u03bdf Output: Shapley value \u03c6SVi p\u03bdf q of each node vi P V 1 foreach vi P V do \u03c6SVi p\u03bdf q \u00d0 0; 2 for it \u201c 1 to maxIter do 3 k \u00d0 random number from t0, . . . , |V |u; 4 C \u00d0 random coalition of size k; 5 if !CheckConnectedness(C) then continue; 6 P \u00d0 FindPivotalspCq; 7 foreach vi P CzP do // case (a) 8 \u03c6SVi p\u03bdf q \u00d0 \u03c6SVi p\u03bdf q ` |V |`1 |C| \u00a8 p\u03bdf pCq \u00b4 \u03bdf pCztviuqq\n9 foreach vi P P do // case (b) 10 \u03c6SVi p\u03bdf q \u00d0 \u03c6SVi p\u03bdf q ` |V |`1 |C| \u00a8 \u03bdf pCq 11 foreach vi P pV zCqzNpCq do // case (c) 12 \u03c6SVi p\u03bdf q \u00d0 \u03c6SVi p\u03bdf q \u00b4 |V |`1 |V |\u00b4|C| \u00a8 \u03bdf pCq\n13 foreach vi P V do SVip\u03bdf q \u00d0 SVip\u03bdf q{maxIter;\nThis technique allows us to compute the marginal contributions of all agents for a randomly selected coalition C, which in the connectivity games can be performed much faster than estimating the Shapley value for each player separately [Mann and Shapley, 1962] or by sampling of a random permutation [Castro et al., 2009], where we have to calculate the marginal contributions for a sequence of coalitions growing in size.\nIn the ApproximateSVCG algorithm we merge our technique with the analysis of marginal contribution presented in Figure 7.2. The pseudo code is presented in Algorithm 21. Line 3 corresponds to Faze 1, where we sample the size of a coalition. Now, we modify Faze 2 in order to select only connected coalitions (line 5). See that generating a random connected coalition uniformly will create a biased algorithm. We also modify Faze 3, when we consider cases (a), (b), and (c) from Figure 7.2 (lines 7-12). The modification of Faze 3 has to be done due to the following reason: since we no longer consider disconnected coalitions, any non-zero marginal contribution made to a disconnected coalition have to be transfered to a corresponding connected coalition (lines 8, 10, and 12). Furthermore, this should be done in a way that preserves appropriate probabilities (thus, in lines 8, 10, and 12 we multiply marginal contributions by adequate weights). Finally, we divide the sum of the contributions by the number of iterations (lines 13). For every sample, algorithm runs in time Op|V | ` |E|q."}, {"heading": "7.5. Performance Evaluation", "text": "In this section, we empirically evaluate our FasterSVCG algorithm focusing on randomly generated networks as well as on real-life data from 9/11 terrorists network. We also evaluate\n129\nhow ApproximateSVCG approximates ranking, by benchmarking it against exact solution obtained by our algorithm.\nThe random graphs used in experiments are based on two topologies commonly found in social networks, and in terrorist organizations in particular [Krebs, 2002, Sageman, 2004]: (i) scale-free graphs, where the network is generated according to a power law; and (ii) random trees, which model hierarchical organisations. To construct scale-free graphs, we use the preferential attachment generation model [Albert et al., 2000], with parameters k \u201c 2, 3. In this model, while gradually constructing a graph, every new node vi is linked to k already existing nodes such that the probability that vi is linked to the node vj is degreepviq \u0159\nj degreepvjq . To construct\ntrees, every new node is attached to a randomly picked incumbent. Finally, we include in our analysis (iii) complete graphs, where all coalitions are connected. Although complete graphs are unlikely to arise in a terrorist network context, they constitute a suitable benchmark for our simulations. For all the games on random graphs we assume that f is defined as in Lindelauf\u2019s centrality (Definition 38, equation 7.1). FasterSVCG: In Figure 7.3, we compare the performance of FasterSVCG to the general-purpose Shapley value algorithm (called GeneralSV and presented in Algorithm 19). This latter algorithm does not take into account the structure of the network, so its runtime is the same for any type of graph. Unlike GeneralSV, FasterSVCG takes advantage of the sparsity of the network and, consequently, significantly outperforms the benchmark. For instance, for SFG(k \u201c 2) and |V | \u201c 30, FasterSVCG needs only 0.39% of GeneralSV runtime! Naturally,\n130\nthe best performance is obtained for tree graphs, where the game over a network of 30 nodes can be computed in about 3 seconds. ApproximateSVCG: In Figure 7.4, we evaluate the time performance of ApproximateSVCG. Importantly, for our purpose of identifying key terrorists, we are mostly interested in the approximation of the correct Shapley value-based ranking of top nodes, and less in the approximation of their actual Shapley values. To this end, we evaluate the time required by ApproximateSVCG to obtain the ranking of the top r ? ns nodes, with at most one error (i.e., one inversion compared to the exact ranking). We present an average time calculated over 500 iterations, each for a randomly selected SFG(k \u201c 4). ApproximateSVCG returns top nodes much faster than FasterSVCG\u2014for the graph of 24 nodes the former algorithm runs in 0.25 sec. and the exact one in 72 sec.\nFigure 7.5 shows the comparison between the error convergence of the ApproximateSVCG and the error convergence of random permutation sampling studied by Castro et al. [2009] (see Algorithm 6). In this experiment we focus on the maximum absolute error of the Shapley value. It is computed as a percentage of the value of the grand coalition. The plot presents an average error from over 30 iteration for Krebs\u2019 9/11 WTC terrorist network with 36 nodes. Since connected coalitions constitute only only 0.59% of all coalitions, ApproximateSVCG outperforms Castro\u2019s method. Indeed, after 4 seconds, the average error of ApproximateSVCG equals 0.029%, while the error for Castro et al. exceeds 0.2%. The absolute error in ApproximateSVCG converges to zero which indicates that this sampling method is not biased.\n131\nNew insight on Krebs\u2019 9/11 WTC network: In the already classic work, Krebs [2002] constructed the 9/11 network from publicly available sources and computed standard centrality metrics to determine the key players in this network. Lindelauf et al. instead used their new centrality metric and, similarly to the case of the Jemaah Islamiyah\u2019s network, showed that the Shapley value-based approach delivers qualitatively better insights. However, Lindelauf et al.\u2019s analysis focuses only on the network of 19 hijackers with 32 relationships, whereas Krebs reported also a bigger network of 36 nodes and 125 edges (mentioned above) that included accomplices. With FasterSVCG, we were able to analyse this bigger network as well.\nImportantly, the five top terrorists (out of 36) identified by FasterSVCG differ from the top five terrorists reported by Lindelauf et al. when only the network of 19 terrorist was taken into account\u2014see Table 7.1. This difference is especially striking with respect to M. Atta, who was\n132\nwidely believed to be one of the ring-leaders of the conspiracy [Krebs, 2002] and was positioned the third place in our computations, but was classified in Lindelauf et al.\u2019s work only on the 6th place. This clearly shows the importance of developing tools to analyse the biggest possible networks."}, {"heading": "7.6. Conclusions", "text": "In this chapter, the new algorithm was proposed to compute the Shapley value for the connectivity games of Amer and Gimenez defined over arbitrary graphs. These graphs are used by security services to represent terrorist networks. It was shown that the problem is #P-Hard. Nevertheless, using the new exact algorithm we were able to analyse in moderate time the terrorist network responsible for the 9/11 WTC terrorist attacks. Additionally, in this chapter a new approximate algorithm was proposed that allows for an efficient study of bigger networks."}, {"heading": "8. The Marginal Contribution Networks for", "text": "Generalized Coalitional Games\nGeneralized characteristic function games are a variation of characteristic function games, in which the value of a coalition depends not only on the identities of its members, but also on the order in which the coalition is formed. This class of games is a useful abstraction for a number of realistic settings and economic situations, such as modeling relationships in social networks. To date, two main extensions of the Shapley value have been proposed for generalized characteristic function games: the Nowak-Radzik [1994] value and the S\u00e1nchez-Berganti\u00f1os [1999] value. In this context, the present chapter studies generalized characteristic function games from the point of view of representation and computation. Specifically, we make two key contributions. First, we propose the Generalized Marginal-Contribution Nets that is a fully expressive mechanism that can in natural way represent generalized characteristic function games. Second, in order to facilitate an efficient computation, we propose the polynomial algorithms for computing Nowak-Radzik value and S\u00e1nchez-Berganti value. Our representation extends the results of Ieong and Shoham [2005] and Elkind et al. [2009a] for characteristic function games and retains their attractive computational properties. Our additional contribution is to use such a representation in order to compute game-theoretic centrality measures defined using either the Nowak-Radzik value or the S\u00e1nchez-Berganti\u00f1os values that extends path betweenness centrality introduced by Puzis et al. [2007b].\nAll aforementioned contributions were made exclusively by the author of this dissertation."}, {"heading": "8.1. Preliminaries", "text": "In this chapter we introduce the basic notation for generalized coalitional games and also we present two extensions of the Shapley value (Definition 5) to these games."}, {"heading": "8.1.1. The Generalized Coalitional Games", "text": "For each coalition C P 2NztHu, denote by \u03a0pCq the set of all possible permutations of the players in C. Any such permutation will be called an ordered coalition. An arbitrary ordered coalition will often be denoted as T , while the set of all such coalitions will be denoted T . That\n134\nis, T \u201c \u0164 CP2N \u03a0pCq. A generalized characteristic function \u03bdg is a mapping \u03bdg : T \u00d1 R, where it is assumed that \u03bdgpHq \u201c 0.\nDefinition 43 (Generalized coalitional game). A generalized coalitional game consists of a set of players (or agents) A \u201c ta1, a2, . . . , a|A|u, and a generalized characteristic function \u03bdg : T \u00d1 R, which assigns to each ordered coalition of players T P T a real value (or payoff) indicating its performance, where \u03bdgpHq \u201c 0. Thus, the generalized coalitional game gg in characteristic function form is a pair gg \u201c pA, \u03bdgq.\nA game in generalized characteristic function form is a tuple pA, \u03bdgq, but will sometimes be denoted by \u03bdg alone. Sometimes, we will write ai instead of paiq for brevity.\nIn some cases we will refer to the members of an ordered coalition T using their names, e.g., write T \u201c pa5, a2, a3q, while other times we may refer to them using a lower case of the same letter: T \u201c pt1, . . . , t|T |q, meaning that ti is the ith agent in T . Furthermore, given two disjoint ordered coalitions, T \u201c pt1, . . . , t|T |q P T and S \u201c ps1, . . . , s|S|q P T , we write pT, Sqk to denote the ordered coalition that results from inserting S at the kth position in T . That is, pT, Sqk \u201c pt1, . . . , tk\u00b41, s1, . . . , s|S|, tk, . . . , t|T |q. With a slight abuse of notation, we write pT, aiqk to denote pT, paiqqk. Furthermore, we write pai, T q, and pT, aiq, to denote the ordered coalition that results from inserting ai to T as the first player, and the last player, respectively.\nNext, we extend the notion of a subset to ordered sets.\nDefinition 44 (The subset of ordered sets). For any two ordered coalitions S \u201c ps1, . . . , s|S|q P T and T \u201c pt1, . . . , t|T |q P T , we say that T is a subset of S, and write T t\u010eS, if and only if T is a subsequence of S, i.e., the following two conditions hold:\n\u2014 Every member of T is a member of S. More formally:\n@ti P T, Dsk P S : sk \u201c ti.\n\u2014 For any two players, ti, tj P T , if ti appears before tj in T , then ti also appears before tj in S. More formally:\n@ti, tj P T : i \u0103 j, Dsk, sw P S : k \u0103 w and sk \u201c ti and sw \u201c tj.\nFollowing convention, we say that T is a strict subset of S, and write T t\u0102S (instead of T t\u010eS), if the above two conditions are met, and T \u2030 S."}, {"heading": "8.1.2. The Nowak and Radzik Value", "text": "Whereas four axioms defined in Section 2.2 uniquely determine the Shapley value for characteristic function games, the situation is more complex for generalized games, because\n135\na player\u2019s marginal contribution (and consequently the null-player axiom) depends on where the new player in the coalition is placed. In this respect, Nowak and Radzik [1994] developed an extension of the Shapley value by making perhaps the most natural assumption that the marginal contribution of a player is computed when this player is placed last in the coalition. Let us denote this marginal contribution of ai to T P T pNztaiuq in game \u03bdg (according to Nowak and Radzik\u2019s definition) as MCNRpT, aiq. Then:\nMCNRpT, aiq \u201c \u03bdgppT, aiqq \u00b4 \u03bdgpT q. (8.1)\nIn what follows, for any ordered coalition, T , let T paiq denote the sequence of players in T that appear before ai (if ai R T then T paiq \u201c T ). For example, given T \u201c pa1, a3, a4, a6q, we have T pa4q \u201c pa1, a3q. Using this notation, we have to following definition.\nDefinition 45 (The Nowak-Radzik value). In a generalized coalitional game pA, \u03bdgq the Nowak-Radzik value (or NR value for short) for a player ai is given by:\n\u03c6NRi pA, \u03bdgq \u201c 1 |A|! \u00ff\nTP\u03a0pAq\nMCNRpT paiq, aiq \u201c ErMCNRpT paiq, aiqs. (8.2)\nThis can be written differently as follows:\n\u03c6NRi pA, \u03bdgq \u201c \u00ff\nC\u010eAztaiu\n\u00ff\nTP\u03a0pCq\np|A| \u00b4 |T | \u00b4 1q! |A|! r\u03bd gppT, aiqq \u00b4 \u03bdgpT qs. (8.3)\nThe NR value is the unique value that satisfies the following \u201cfairness\u201d axioms:\nEfficiency: \u0159 aiPA \u03c6 NR i p\u03bdgq \u201c 1|A|! \u0159 TP\u03a0pAq \u03bd gpT q.\nNull-Player: @ai P A, if \u03bdgpT q \u201c \u03bdgppT, aiqq @T P T : ai R T , then \u03c6NRi p\u03bdgq \u201c 0.\nAdditivity: \u03c6NRp\u03bdg ` \u03bd 1gq \u201c \u03c6NRp\u03bdgq ` \u03c6NRp\u03bd 1gq for any two functions, \u03bdg and \u03bd 1g."}, {"heading": "8.1.3. The S\u00e1nchez and Berganti\u00f1os Value", "text": "S\u00e1nchez and Berganti\u00f1os [1999] developed an alternative extension of the Shapley value based on the definition of the marginal contribution, where, instead of assuming that this player will be placed last, the authors take the average over all possible positions in which the player can be placed:\nMCSBpT, aiq \u201c 1\np|T | ` 1q\n|T |`1 \u00ff\nl\u201c1 r\u03bdgppT, aiqlq \u00b4 \u03bdgpT qs. (8.4)\nUsing above, we can introduce the following definition.\n136\nDefinition 46 (The S\u00e1nchez-Berganti\u00f1os value). In a generalized coalitional game pA, \u03bdgq the S\u00e1nchez-Berganti\u00f1os value (or SB value for short) for a player ai is given by:\n\u03c6SBi pA, \u03bdgq \u201c 1 |A|! \u00ff\nTP\u03a0pAq\nMCSBpT paiq, aiq \u201c ErMCSBpT paiq, aiqs. (8.5)\nThis also can be rewritten differently as follows:\n\u03c6SBi pA, \u03bdgq \u201c \u00ff\nC\u010eAztaiu\n\u00ff\nTP\u03a0pCq\np|A| \u00b4 |T | \u00b4 1q! |A|!p|T | ` 1q\n|T |`1 \u00ff\nl\u201c1 r\u03bdgppT, aiqlq \u00b4 \u03bdgpT qs. (8.6)\nThe SB value is the unique value that satisfies NR\u2019s efficiency and additivity axioms and the\nfollowing axioms:\nNull-Player If @T P T @l P t1, .., |T | ` 1u : \u03bdgppT, aiqlq \u201c \u03bdgpT q, then \u03c6SBi p\u03bdgq \u201c 0.\nSymmetry If @T P T\u00b4ti,ju@l P t1, .., |T | ` 1u : \u03bdgppT, aiqlq \u201c \u03bdgppT, ajqlq, then\n\u03c6SBi p\u03bdgq \u201c \u03c6SBj p\u03bdgq.\nThe difference between the NR and SB values is illustrated in the following example:\nExample 7. Consider a game with an ordered coalition T \u02da P \u03a0pAq such that \u03bdgpT q \u201c 1 if T \u201c T \u02da and \u03bdgpT q \u201c 0 otherwise. Then, the average value of the grand coalition, taken over all possible orders, which is 1|A|! , needs to be distributed among the players. Using the NR value, we get \u03c6NRt pAq \u201c 1|A|! , where at is the last player in the ordered coalition T \u02da, and we get \u03c6NRi pAq \u201c 0 for all ai P Aztatu. In contrast, using the SB value, we get \u03c6SBi pAq \u201c 1|A|!\u00a8|T 1| \u201c 1 |A|!\u00a8|A| for all ai P A. As can be seen, in this example, the NR value rewards the last player in the order, whereas the SB value rewards all players equally.\nHaving introduced the extensions of Shapley value to generalized characteristic function\ngames, in the following section we consider the issue of representation."}, {"heading": "8.2. Representation", "text": "In this section we consider the issue of efficient computation of the NR and SB values. Recall that a straightforward computation of the NR value, using either formulas (8.2) or (8.3), requires iterating over all ordered coalition. The same holds for the SB value and formulas (8.5) or (8.6). Now since, for any game of n players, there are \u0159n i\u201c1 `` n i \u02d8 \u02c6 i! \u02d8 ordered coalitions, such an approach quickly becomes prohibitive with increasing n.1 To tackle this computational problem we introduce in this section a compact representation scheme for games with ordered\n1 For instance, the size of the generalized characteristic function for n \u201c 5 is 325, whereas for n \u201c 10 is 9864100.\n137\ncoalitions and evaluate its properties. We take as our starting point the marginal contribution nets (MC-Nets) representation by Ieong and Shoham [2005] (see Section 2.4) and its extension, read-once marginal contribution nets (or read-once MC-Nets) by Elkind et al. [2009a] (see Section 2.5). This representation has a number of desirable properties: it is fully expressive, concise for many characteristic function games of interest, and facilitates a very efficient technique for computing the Shapley value. Importantly, our representation, which we call generalized read-once MC-Nets, also has these desirable properties.\nThis section is divided into four subsections. In Section 8.2.1, we introduce the generalized read-once MC-Nets representation to represent generalized characteristic function games compactly. After that, in Sections 8.2.2 and 8.2.3, we prove that this representation facilitates an efficient computation of the NR value and the SB value, respectively. Finally, in Section 8.3, we present a sample application of generalized read-once MC-Nets to compute game-theoretic centrality based on the NR and SB values."}, {"heading": "8.2.1. Generalized Read-Once MC-Nets", "text": "Having presented the MC-Net representation for characteristic function games in Section 2.4 and read-once MC-Net on Section 2.5, we now present our extension of MC-Nets to generalized characteristic function games. More specifically, we extend the rules so that the formula F on the left hand side of a rule is applicable to an ordered coalition. We introduce two atomic formulas:\nbasic atomic formula (BAF) tam, . . . , anu,\nordered atomic formula (OAF) xai, . . . , ajy.\nThe ordered coalition T meets a basic atomic formula, denoted FBAF , if all literals occurring in FBAF belong to T . More formally\nT |\u00f9 FBAF \u00f0\u00f1 @ai P FBAF , ai P T.\nExample 8. Let N \u201c ta1, . . . , a10u and consider T \u201c pa5, a1, a4, a3, a2q. We have:\nT ( ta2, a5u, T * ta5, a2, a4, a6u.\nNow, we introduce an ordered atomic formula, denoted FOAF . This formula is our crucial extension to MC-Nets; it allows us to fully express the values of all ordered coalitions. Specifically, the ordered coalition T meets FOAF if all literals occurring in FOAF appear in T in the same order as in the FOAF formula.\n138\nTo state this more formally, let us first introduce the notion of an ordered coalition corresponding to FOAF . To this end, for every FOAF \u201c xai, . . . , ajy, the corresponding ordered coalition of FOAF is simply SOAF \u201c pai, . . . , ajq. The main difference between the two is that ai is a literal in FOAF , while it is an agent in SOAF . Now, given a particular FOAF and an ordered coalition SOAF corresponding to it, the following holds for every T P T :\nT |\u00f9 FOAF \u00f0\u00f1 SOAF t\u010eT.\nIn other words, SOAF is a subsequence of T . This has a natural interpretation: when a group of players joins any coalition in a certain order they contribute to it a certain value. Consider the following example:\nExample 9. Let N \u201c ta1, . . . , a10u and consider T \u201c pa5, a1, a4, a3, a2q. We have:\nT ( xa5, a3, a2y, T * xa5, a2, a3y, T * xa5, a3, a2, a6y.\nNow, we are able to formalize our representation which we call the generalized read-once MC-Nets. Specifically, in this representation, a rule, called generalized read-once rule, is as follows:\nF \u00d1 V, (8.7)\nwhere V is a real value and the syntax of the generalized formula F is:\nA :\u201c FBAF | FOAF , F :\u201c pFq | F | F ^ F | F _ F | F \u2018 F | A,\nand each literal can only appear once in the formula. This generalized formula is a binary rooted tree with atomic formulas on leafs and internal nodes labeled with one of the following logical connectives: conjunction (^), disjunction (_) or exclusive disjunction (\u2018). The logical connectives have the following standard interpretation:\nT ( F \u00f0\u00f1 T * F ,\nT ( F1 ^ F2 \u00f0\u00f1 T ( F1 and T ( F2, T ( F1 _ F2 \u00f0\u00f1 T ( F1 or T ( F2, T ( F1 \u2018 F2 \u00f0\u00f1 T ( pF1 _ F2q ^ pF1 ^ F2q.\n139\nExample 10. Let N \u201c ta1, . . . , a10u and consider T \u201c pa5, a1, a4, a3, a2q. We have:\nT ( pta2, a5u ^ xa1, a3yq _ ta4, a7, a9u, T * xa4, a5, a3y \u2018 pta1u ^ ta2uq.\nDefinition 47 (Generalized Read-Once MC-Nets). The generalized coalitional game pN, \u03bdgq in the form of Generalized Read-once Marginal Contribution Network is a pair pA,GRq, where A is a set of players, and GR is a finite set of generalized rules. The value \u03bdgpT q of an ordered coalition T is defined as the sum of all V from the generalized read-once rules that are met by T . More formally:\n\u03bdgpT q \u201c \u00ff\nGRQF\u00d1V : T |\u00f9F\nV . (8.8)\nThe following example presents a simple application of generalized read-once MC-Nets to\nthe scheduling problem:\nExample 11. Let G \u201c pV,Eq be a directed acyclic graph representing a task-based domain, where each vertex in V \u201c tv1, . . . , vnu represents a task. Each edge pvi, vjq P E illustrates that task vi has to be completed before task vj . We say that the job is done if all tasks of a given graph G are completed, in which case we get some revenue. Next we show how each such graph can be represented by a single generalized read-once rule, where agents represent tasks. In particular, each formula in the rule represents an edge in G, as follows:\n\u013e\npai,ajqPE\nxai, ajy \u00d1 revenue of the job defined by G."}, {"heading": "An ordered coalition T represents the workforce that can finish tasks in a given order. The total", "text": "revenue of T is then equal to the sum of revenues of all jobs feasible by T .\nHaving defined our representation formally, we now evaluate its properties. We start with\nexpressiveness:\nProposition 5 (Expressiveness). Every ordered coalitional game can be expressed using generalized read-once MC-Nets.\nProof. For any arbitrary generalized characteristic function \u03bdg, we show how to construct a set of rules GR such that Equation (8.8) holds for every T P T . We will use only OAF to define a recursive set starting from singleton sequences and empty set GR0 \u201c H. Let SOAF be the ordered coalition corresponding to FOAF , and let |FOAF | be the size of this formula.\nGR1 \u201c\nxaiy \u00d1 \u03bdgppaiqq (\n@ai P N,\nGRn \u201c\nFOAF \u00d1 \u03bdgpSOAF q \u00b4 \u0159n\u00b41 k\u201c1 \u0159 GRkQF\u00d1V : SOAF |\u00f9F V ( @|FOAF | \u201c n.\n140\nFinally, we get GR \u201c \u0164 i GRi.\nIn the above proof of Proposition 5, it emerges that only OAFs are necessary in order to guarantee that the generalized MC-Nets are fully expressive. In the following basic example we present that in some games the BAF gives us desirable succinctness.\nExample 12. Let N \u201c ta1, . . . , anu be the set of tasks. In order to get profit V , all tasks must be done in arbitrary chosen order. It is clear that representing this problem using only OAF requires n! number of formulas:\nxa1, . . . , any \u00d1 V, ...\nxan, . . . , a1y \u00d1 V.\nBy introducing BAF we can get exponentially more concise notation: ta1, . . . , anu \u00d1 V .\nIt is worth making some observations about the conciseness of our representation scheme. Our rule-based representation scheme is ultimately based on propositional formulae, and the use of these formulae is ultimately to define a Boolean function. The use of propositional formulae to define Boolean functions is very standard: a very fundamental result in the theory of propositional logic is that any Boolean function of n Boolean arguments can be represented by a propositional formula in which the variables correspond to these arguments. For many Boolean functions, it might be possible to obtain compact propositional formulae to represent them, but crucially, this will not always be possible; some Boolean functions will require formulae of size exponential in the number of variables (see, e.g., Boppana and Sipser [1990]). It is in fact trivial to produce examples of characteristic functions whose representation in our framework is exponentially more succinct than explicitly listing the value of every coalition, but from the above discussion, it also follows that our representation cannot guarantee compactness in all cases. Finally, note that in the worst case, we can represent a characteristic function with one rule for every possible input, which essentially corresponds to the idea of listing the value of every coalition. Thus, in the worst case, our representation scheme is no worse than simply listing the value of every input. More formally:\nCorollary 1 (Conciseness). Compared to the generalized function game representation, generalized read-once MC-nets are at least as concise, and for certain games exponentially more compact."}, {"heading": "8.2.2. Computing the Nowak-Radzik Value with Generalized Read-Once MC-Nets", "text": "In this subsection, we discuss the computational properties of the generalized read-once MC-Net representation with respect to calculating the Nowak-Radzik value (i.e., the NR value).\n141\nWe start our computational analysis with some observations about atomic formulas. First, observe that all players occurring in some FBAF are indistinguishable. Furthermore, taking into account that each player can appear in at most one formula, \u03c6NR will assign to these players the same values. The case of FOAF is different. Here, the NR value for all players except the last one is zero (see Example 7).\nAlgorithm 22: (COMP_NR) Computing the Nowak-Radzik value Input: N \u201c ta1, . . . , anu, pF1 \u00d1 V1q, . . . , pFr \u00d1 Vrq Output: \u03c6NRi for all ai P N 1 for ai P N do \u03c6NRi \u00d0 0; for j \u00d0 1 to r do 2 m\u00d0 |Fj|; 3 pA,B,T,Fq \u00d0 ShNR; // the Pseudo code of ShNR is in Appendix B 4 foreach ai P XFj do 5 if Dk Ak,i \u2030 0 then 6 vi \u00d0 1m! \u0159m\u00b41 k\u201c0 pm\u00b4 k \u00b4 1q!Ak,i; 7 else if Dk Bk,i \u2030 0 then 8 vi \u00d0 \u00b4 1m! \u0159m\u00b41 k\u201c0 pm\u00b4 k \u00b4 1q!Bk,i;\n9 else 10 vi \u00d0 0; 11 \u03c6NRi \u00d0 \u03c6NRi ` Vj \u00a8 vi;\nTheorem 6. Given a generalized coalitional game pN,GRq, Algorithm 22 computes the Nowak-Radzik value (\u03c6NRi for all ai P N ) in polynomial time.\nProof. We start by introducing necessary notation, some of which is in the pseudo code of Algorithm 22. For each formula F , we denote by XF the sets of players occurring in F , and by |F | the size of XF , and by TF the set of all ordered coalitions within the set XF , i.e., TF \u201c \u0164\nC\u010eXF \u03a0pCq. For all ai P XF and k P t0, . . . , nu, we define the following quantities:\nAk,ipFq \u201c |T P TF : |T | \u201c k, ai R T, T * F , pT, aiq ( Fq|, Bk,ipFq \u201c |T P TF : |T | \u201c k, ai R T, T ( F , pT, aiq * Fq|, TkpFq \u201c |T P TF : |T | \u201c k, T ( F |, FkpFq \u201c |T P TF : |T | \u201c k, T * F |.\nThe first quantity Ak,ipFq is the number of ordered coalitions from TF of a given size k (i.e., containing k players) to which the addition of player ai at the end of the coalition causes the formula F to become satisfied. In contrast, the second quantity Bk,i is the number of coalitions to which adding player ai causes the formula F to become unsatisfied. The last two quantities, TkpFq and FkpFq, count the number of ordered coalition being satisfied, and not satisfied, respectively, by the formula F . These quantities can be computed recursively as follows. Let\n142\nus first focus on the case where F is an atomic formula. This case can be divided further into two cases:\n\u2014 F \u201c ta1, . . . , aru: Here, Ak,i \u201c pr \u00b4 1q! if k \u201c r \u00b4 1 and i P XF , otherwise Ak,i \u201c 0. Bk,i always equals 0. Tk \u201c r! if k \u201c r, otherwise Tk \u201c 0. Finally, Fk \u201c k! if k \u0103 r, otherwise Fk \u201c 0. \u2014 F \u201c xa1, . . . , ary: Here Ak,i \u201c 1 if k \u201c r \u00b4 1 and i \u201c r, otherwise Ak,i \u201c 0. Bk,i always equals 0. Tk \u201c 1 if k \u201c r, otherwise Tk \u201c 0. Finally, Fk \u201c k! \u00b4 Tk if k \u010f r, otherwise Fk \u201c 0.\nHaving discussed the case where F is an atomic formula, we now consider the case where F contains logical connectives. If such a connective involves two subformulas F1 and F2, then we know that ai can appear in F1 or F2, but not in both. We also know that logical connectives used in the generalized read-once MC-Nets are symmetric, so we will consider only one case, ai P F1; the other is analogous. In our analysis, for every two disjoint ordered coalitions, T1 and T2, we define a conflation of T1 and T2 as an ordered coalition T such that (1) every agent in T appears in T1 or T2, and (2) the order of the agents in T1 is retained in T , and the order of those in T2 is also retained in T . The set of every conflation of T1 and T2 will be denoted T1 \u02c6 T2. More formally:\nT P T1 \u02c6 T2 \u00f0\u00f1 XT \u201c XT1 YXT2 ^ T 1t\u0102T ^ T2t\u0102T,\nwhere XT denotes a set of players in T . We note that if T1 ( F and XF X T2 \u201c H then T ( F@T P pT1 \u02c6 T2q.\nProposition 6. Two ordered coalitions T1 and T2 can be conflated in `|T1|`|T2|\n|T2|\n\u02d8\nways.\nProof. Consider an sequence of |T1| ` |T2| empty slots, where each slot can take an agent. Out of all these slots, choose any |T2| slots, and place in them the agents from T2 while retaining their order. As for the remaining slots, place in them the agents from T1 while retaining their order. Clearly, every choice of the |T2| slots results in a unique conflation, and every conflation can be constructed by exactly one such choice of the |T2| slots. The number of conflations is then\n`|T1|`1`|T2|\u00b41 |T2| \u02d8 .\nNext, we show how to compute Ak,i,Bk,i, Tk and Fk. We will do this for each of the possible logical connective (i.e., , ^, _ and \u2018) separately:\n\u2014 F \u201c F1: In this case, the negation swaps quantities as follows. For all i and k we have Ak,ipFq \u201c Bk,ipF1q, Bk,ipFq \u201c Ak,ipF1q, TkpFq \u201c FkpF1q, and FkpFq \u201c TkpF1q. \u2014 F \u201c F1 ^ F2. In this case, let T P T1 \u02c6 T2, where T1 P \u03a0pXF1q, |T1| \u201c s and T2 P \u03a0pXF2q, |T2| \u201c k \u00b4 s. We have pT, aiq ( F if and only if pT1, aiq ( F1 and\n143\nT2 ( F2. In this case, T * F if and only if T1 * F1. Consequently, using Proposition 6 we get:\nAk,i \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8\nAs,ipF1qTk\u00b4spF2q.\nFurthermore, we have T ( F if and only if T1 ( F1 and T2 ( F2. Additionally in this case we have: pT, aiq * F \u00f4 pT1, aiq * F1. Consequently,\nBk,i \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8\nBs,ipF1qTk\u00b4spF2q.\nEventually, for Tk and Fk, we have:\nTk \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8\nTspF1qTk\u00b4spF2q,\nFk \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8 pFs ` F1qFk\u00b4spF2q ` FspF1qTk\u00b4spF2q ` TspF1qFk\u00b4spF2q \u02d8 .\n\u2014 F \u201c F1 _ F2. In this case, let T P T1 \u02c6 T2, where T1 P \u03a0pXF1q, |T1| \u201c s and T2 P \u03a0pXF2q, |T2| \u201c k \u00b4 s. We know that T * F if and only if T1 * F1 and T2 * F2. Furthermore, in this case it holds that pT, aiq ( F \u00f4 pT1, aiq ( F1. Thus,\nAk,i \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8\nAs,ipF1qFk\u00b4spF2q.\nAnalogously, we have pT, aiq * F if and only if pT1, aiq * F1 and T2 * F2, and in this case it holds that: T ( F \u00f4 T1 ( F1. Consequently,\nBk,i \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8\nBs,ipF1qFk\u00b4spF2q.\nFinally, for Tk and Fk, we have:\nTk \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8 pTs ` F1qTk\u00b4spF2q ` FspF1qTk\u00b4spF2q ` TspF1qFk\u00b4spF2q \u02d8 ,\nFk \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8\nFspF1qFk\u00b4spF2q.\n\u2014 F \u201c F1 \u2018 F2: Let T \u201c T1 \u02c6 T2 such that T1 P \u03a0pXF1q, |T1| \u201c s and T2 P \u03a0pXF2q, |T2| \u201c k\u00b4s. Now, the ordered coalition T can contribute to Ak,i in two ways. Firstly, when T1 ( F1 and T2 ( F2 and pT1, aiq * F1. Secondly, when T1 * F1 and T2 * F2 and pT1, aiq ( F1. Thus:\nAk,i \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8\npBs,ipF1qTk\u00b4spF2q ` As,ipF1qFk\u00b4spF2qq,\nBk,i \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8\npBs,ipF1qFk\u00b4spF2q ` As,ipF1qTk\u00b4spF2qq,\nTk \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8\npTspF1qFk\u00b4spF2q ` FspF1qTk\u00b4spF2qq,\nFk \u201c \u0159k s\u201c0\n`\nk k\u00b4s\n\u02d8\npTspF1qTk\u00b4spF2q ` FspF1qFk\u00b4spF2qq.\n144\nThe above four quantities are computed recursively in the function ShNR which is invoked\nin line 4 of Algorithm 22 (the pseudo code of ShNR can be found in Appendix A).\nNote that Tk and Fk are only used to compute Ak,i and Bk,i, which are then used in lines 6 and 8 of Algorithm 22 to compute \u03c6NR. Having proved the correctness of computing Ak,i and Bk,i, it remains to prove that the way they are used in lines 6 and 8 correctly computes \u03c6NR. It suffices to prove this for a single rule F \u00d1 1, as the extension to multiple rules is straight forward in the MC-Net representation. To this end, some player ai can contribute to any ordered coalition T counted in Ak,i, or Bk,i (one of these quantities is zero), if it appears in a random permutation right after the players from T . The remaining players not occurring in T can be arranged in pm\u00b4 k \u00b4 1q! ways (we have |XF | \u201c m). In case ai contributes to Ak,i, we have\n\u03c6NRi \u201c 1m! \u0159m\u00b41 k\u201c0 pm\u00b4 k \u00b4 1q!Ak,i.\nIn the second case ai contributes to Bk,i; we get\n\u03c6NRi \u201c \u00b4 1m! \u0159m\u00b41 k\u201c0 pm\u00b4 k \u00b4 1q!Bk,i.\nThese are exactly lines 6 and 8 of Algorithm 22. This concludes the proof of correctness of Algorithm 22. In terms of runtime, it is clear from the pseudo codes (in Algorithm 22 and Appendix B) that the total number of operations is polynomial in the number of agents. This concludes the proof of Theorem 6."}, {"heading": "8.2.3. Computing the S\u00e1nchez-Berganti\u00f1os Value with Generalized Read-Once MC-Nets", "text": "In this subsection, we discuss the computational properties of the generalized read-once MC-Net representation with respect to calculating the S\u00e1nchez-Berganti\u00f1os value (i.e., the SB value). We start our computational analysis with some observations about atomic formulas. First, observe that all players occurring in some FBAF are indistinguishable. Furthermore, taking into account that each player can appear in at most one formula, \u03c6SB will assign to these players the same values. Similarly, for the case of FOAF , the SB value is the same for all players due to the symmetry axiom (see Example 7). Note that the SB value involves a different notion of marginal contribution. Whereas computing quantities Tk and Fk remains the same, we need to redefine Ak,i and Bk,i.\nAk,i,lpFq \u201c |T P TF : |T | \u201c k, ai R T, T * F , pT, aiql ( Fq|, Bk,i,lpFq \u201c |T P TF : |T | \u201c k, ai R T, T ( F , pT, aiql * Fq|.\n145\nThe first quantity Ak,i,lpFq is the number of ordered coalitions of a given size k for which adding player ai on position l causes F to become satisfied. Bk,i,l is the number of coalitions in which adding the player ai on position l causes F to become unsatisfied.\nAlgorithm 23: (COMP_SB) Computing the S\u00e1nchez-Berganti\u00f1os value Input: N \u201c ta1, . . . , anu, pF1 \u00d1 V1q, . . . , pFr \u00d1 Vrq Output: \u03c6SBi for all ai P N 1 for ai P N do \u03c6SBi \u00d0 0; for j \u00d0 1 to r do 2 m\u00d0 |Fj|; 3 pA,B,T,Fq \u00d0 ShSBpFjq; // the Pseudo code of ShSB is in Appendix B 4 foreach ai P XFj do 5 if Dk,l Ak,i,l \u2030 0 then 6 vi \u00d0 1m! \u0159m\u00b41 k\u201c0 1 k`1 \u0159k`1 l\u201c1 pm\u00b4 k \u00b4 1q!Ak,i,l; 7 else if Dk,l Bk,i,l \u2030 0 then 8 vi \u00d0 \u00b4 1m! \u0159m\u00b41 k\u201c0 1 k`1 \u0159k`1 l\u201c1 pm\u00b4 k \u00b4 1q!Bk,i,l;\n9 else 10 vi \u00d0 0; 11 \u03c6SBi \u00d0 \u03c6SBi ` Vj \u00a8 vi;\nTheorem 7. Given a generalized coalitional game pN,GRq, Algorithm 23 computes the S\u00e1nchez-Berganti\u00f1os value (\u03c6SBi for all ai P N ) in polynomial time.\nProof. As for Tk and Fk, the computation is exactly the same as in the proof of Theorem 6. Therefore, we only need to show how to calculate Ak,i,l and Bk,i,l in polynomial time. We will start from atomic formulas:\n\u2014 F \u201c ta1, . . . , aru: In this case Ak,i,l \u201c pr \u00b4 1q! if k \u201c r \u00b4 1, i P XF and l P t1, . . . , ru, otherwise, Ak,i,l \u201c 0. On the other hand, Bk,i,l \u201c 0 for all k, i and l. \u2014 F \u201c xa1, . . . , ary: Here Ak,i,l \u201c 1 if k \u201c r \u00b4 1, i P XF and l \u201c i, otherwise Ak,i,l \u201c 0. On the other hand, Bk,i,l is always equal to 0.\nIn the next part of proof we will use following proposition.\nProposition 7. The number of conflations of two ordered coalitions T1 and T2 such that s players from T2 go before the l-th member of T1 equals\n` l`s\u00b41 s \u02d8`p|T1|\u00b4l`1`1q`p|T2|\u00b4sq\u00b41 |T2|\u00b4s \u02d8 .\nProof. Simply use combination with repetition twice.\nNext, we show how to compute Ak,i,Bk,i for each of the possible logical connective (i.e., , ^, _ and \u2018) separately. We will assume that ai P XF1 .\n146\n\u2014 F \u201c F1: Here, the negation causes a swap between sets. That is, we have Ak,i,lpFq \u201c Bk,i,lpF1q and Bk,i,lpFq \u201c Ak,i,lpF1q for all k, i, l. \u2014 F \u201c F1^F2: Let T \u201c T1\u02c6T2, where T1 P \u03a0pXF1q, |T1| \u201c s and T2 P \u03a0pXF2q, |T2| \u201c k\u00b4s. We have pT, aiql ( F if and only if pT1, aiqm ( F1 for each m \u010f l when l\u00b4m members of coalition T2 go before the m-th member of coalition T1 during the conflation operation and\nT2 ( F2. In this case, T * F if and only if T1 * F1. Consequently, using Proposition 7 we get:\nAk,i,l \u201c \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8 As,i,mpF1qTk\u00b4spF2q.\nFurthermore, we have T ( F if and only if T1 ( F1 and T2 ( F2. Additionally in this case it holds that: pT, aiql * F \u00f4 pT1, aiqm * F1 for m \u010f l, when l \u00b4m members of coalition T2 go before the m-th member of coalition T1 during the conflation operation and T2 * F1. Again, using Proposition 7 we get:,\nBk,i,l \u201c \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8 Bs,i,mpF1qTk\u00b4spF2q.\n\u2014 F \u201c F1 _ F2: Once again let T \u201c T1 \u02c6 T2, where T1 P \u03a0pXF1q, |T1| \u201c s and T2 P \u03a0pXF2q, |T2| \u201c k \u00b4 s. We know that T * F if and only if T1 * F1 and T2 * F2. Furthermore, in this case it holds that pT, aiql ( F \u00f4 pT1, aiqm ( F1 for m \u010f l. Thus,\nAk,i,l \u201c \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8 As,i,mpF1qFk\u00b4spF2q.\nAnalogously, we have pT, aiql * F if and only if pT1, aiqm * F1 for m \u010f l when l \u00b4 m members of coalition T2 go before the m-th member of coalition T1 during the conflation operation, and T2 * F2. Furthermore, in this case it holds that: T ( F \u00f4 T1 ( F1. Consequently,\nBk,i,l \u201c \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8 Bs,i,mpF1qFk\u00b4spF2q.\n\u2014 F \u201c F1 \u2018 F2: Let T \u201c T1 \u02c6 T2 such that T1 P \u03a0pXF1q, |T1| \u201c s and T2 P \u03a0pXF2q, |T2| \u201c k \u00b4 s. Now, the ordered coalition T can contribute to Ak,i,l in two ways. Firstly, when T1 ( F1 and T2 ( F2 and pT1, aiqm * F1. Secondly, when T1 * F1 and T2 * F2 and pT1, aiqm ( F1, so\nAk,i,l \u201c \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8` Bs,i,mpF1qTk\u00b4spF2q ` As,i,mpF1qFk\u00b4spF2q \u02d8 .\nBk,i,l \u201c \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8` Bs,i,mpF1qFk\u00b4spF2q ` As,i,mpF1qTk\u00b4spF2q \u02d8 .\n147\nThe above two quantities (together with Tk and Fk ) are computed recursively in the function ShSB which is invoked in line 4 of Algorithm 23 (the pseudo code of ShSB can be found in Appendix B).\nNote that Tk and Fk are only used to compute Ak,i,l and Bk,i,l, which are then used in lines 6 and 8 of Algorithm 23 to compute ShSB . Having proved the correctness of computing Ak,i,l and Bk,i,l, it remains to prove that the way they are used in lines 6 and 8 correctly computes ShSB . It suffices to prove this for a single rule F \u00d1 1, as the extension to multiple rules is straight forward in the MC-Net representation. To this end, some player ai can contribute to any ordered coalition T counted in Ak,i,l, or Bk,i,l, if it appears in a permutation right after the pl\u00b4 1qth player from T . The remaining players (i.e., those not belonging to T ) can be arranged in pm\u00b4 k \u00b4 1q! ways (we have |XF | \u201c m). In case ai contributes to Ak,i,l, we have\n\u03c6SBi \u201c 1m! \u0159m\u00b41 k\u201c0 1 k`1 \u0159k`1 l\u201c1 pm\u00b4 k \u00b4 1q!Ak,i,l.\nIn the second case, when ai contributes to Bk,i,l, we get\n\u03c6SBi \u201c \u00b4 1m! \u0159m\u00b41 k\u201c0 1 k`1 \u0159k`1 l\u201c1 pm\u00b4 k \u00b4 1q!Bk,i,l.\nThese are exactly lines 6 and 8 of Algorithm 23. This concludes the proof of correctness of Algorithm 23. In terms of runtime, it is clear from the pseudo codes (in Algorithm 23 and Appendix B) that the total number of operations is polynomial in the number of agents. This concludes the proof of Theorem 7.\nFinally, it is worth making a few remarks about the problem of generating a representation of a game in our framework. We know that given a representation of a game in our framework, we can for example compute the NR and SB values in polynomial time. But how hard is it to come up with a representation of a game in our framework?\nSuppose we are given a black box representation of a characteristic function, i.e., an oracle for the function that can be queried in unit time to determine the value of any ordered coalition. Then, it is not hard to see that it will require time exponential in the number of players to produce a representation of it in our framework. This is because we cannot avoid having to query the oracle for the value of every possible ordered coalition, and there are clearly exponentially many of them.\nAnother obvious question is whether other representations can easily be \u201ctranslated\u201d to our representation. Here, we have better news. For example, a representation of a game in Ieong and Shoham\u2019s MC-Nets representation can be transformed into our representation in polynomial time: MC-Net rules correspond directly to rules in our framework requiring only basic atomic formulae (BAFs). In the same way, the subgraph representation introduced by Deng and Papadimitriou [1994] (which is, in fact, a special case of the MC-Net representation)\n148\ncan also be translated into our framework in polynomial time. Each edge of the graph translates to a rule with a BAF containing only two players.\nIt is worth noting that we are not aware of any other attempts in the literature to develop representations for generalized coalitional games. If such were developed, then it would be interesting to consider the problem of translating between representations."}, {"heading": "8.3. Computing Generalized Game-Theoretic Betweenness Centrality", "text": "As mentioned in the introduction, it is possible to use the game-theoretic solution concepts, including the Nowak-Radzik and S\u00e1nchez-Berganti\u00f1os values, to measure centrality of nodes in networks [del Pozo et al., 2011]. In this section, we show how to extend the classic notion of betweenness centrality to generalized game-theoretic betweenness centrality which builds upon generalized characteristic function games and the NR and SB values. After that, we show that it is possible to use generalized read-once MC-Nets to compute the new centrality in time polynomial in the number of shortest paths in the network.\nWhile betweenness centrality (Definition 16) is focused on the role in the network played by individual nodes, and group betweenness centrality (Definition 22) is designed to measure the power of the set of nodes, the measure proposed by Puzis et al. [2007b] captures the notion of the sequences of nodes. Their measure, called path betweenness centrality, evaluates sequences of nodes and counts the proportion of shortest paths that traverse along a given sequence of nodes in an appropriate order. Formally:\nDefinition 48 (Path betweenness centrality). Given a graph G \u201c pV,Eq, we define the set of all ordered coalitions of nodes in the graph, i.e., T \u201c \u0164\nCP2V \u03a0pCq. The path betweenness centrality of the ordered group of nodes T is defined as a function cpb : T \u00d1 R such that:\ncpbpT q \u201c \u00ff\nsRT tRT\n\u03c3stpT q \u03c3st , (8.9)\nwhere \u03c3st denotes the number of all shortest paths from s to t and \u03c3stpT q is the number of shortest paths from s to t passing through all nodes from T (if s P T or t P T then \u03c3stpT q \u201c 0) such that the order of visited nodes is maintained (for path p we have T t\u010ep).\nSimilarly to other game-theoretic extension of classic centrality measures recently considered in the literature (see Section 3.2), the above function, that assigns values to all ordered groups (coalitions) of nodes, can be considered to be a value function, i.e., in our case,\n149\nthe generalized characteristic function. Now, the NR and SB values computed for this function become the generalized game-theoretic betweenness centrality.2\nDefinition 49 (Generalized representation function). A generalized representation function is a function \u03c8g : G \u00d1 V gG that maps every graph G \u201c pV,Eq onto a generalized cooperative game pNA, \u03bdgGq P V g G with A \u201c V .\nNow, solution concepts like Nowak-Radzik and S\u00e1nchez-Berganti\u00f1os values can be used in\nthe network setting by applying them to the characteristic function that a network represents.\nDefinition 50 (Generalized Game-theoretic centrality measure). Formally, we define a generalized game-theoretic centrality measure as a pair p\u03c8g, \u03c6q consisting of a representation function \u03c8g and a solution concept \u03c6.\nDefinition 51 (Generalized Game-theoretic Betweenness Centrality). The generalized game-theoretic betweenness centrality is a pair p\u03c8gB, \u03c6q, where \u03c8 g BpGq \u201c cpb is the path betweenness centrality, the value of each node v P V is given by \u03c6vpcpbq, and \u03c6 is the Nowak-Radzik value (\u03c6NR) or S\u00e1nchez-Berganti\u00f1os value (\u03c6SB ).\nIn the previous chapters we have shown that some game-theoretic centrality measures can be computed in polynomial time in the size of the network, i.e., in the number of nodes and edges. While in the literature there is no such a positive result for the generalized game-theoretic betweenness centrality, we will now show that it is possible to compute it in time polynomial in the number of shortest paths in the network and with the help of our generalized read-once MC-Nets.\nIn particular, given a network G \u201c pV,Eq, Algorithm 24 builds, for each shortest path in the network, a corresponding generalized read-once rule. More specifically, after initialization, we iterate over all shortest paths in the network. For each shortest path, in line 7, we initialize the formula F with ordered atomic formula corresponding to the sequence of all the nodes on the path. Next, in line 8, we add a conjunction that ensures that no other nodes can appear in an ordered coalition that satisfies our formula.\nThe size of the set GR constructed by this algorithm equals to the number of shortest paths in the graph and can be exponential in the number of vertices. However, in many graphs we have |GR| ! T , which makes this algorithm much more efficient than computing this measure directly using equation (8.3) or equation (8.6) for \u03c6NR and \u03c6SB , respectively.\n2 We note that the game-theoretic betweenness centrality was introduced in Chapter 5 but this measure does not account for the order of players.\n150\nAlgorithm 24: Computing the generalized game-theoretic betweenness centrality Input: Graph G \u201c pV,Eq, path betweenness centrality cpb, game solution \u03c6 Output: \u03c6v for all v P V 1 for v P V do \u03c6v \u00d0 0; GR\u00d0H; // initialize the set of generalized read-once formulas 2 for v P V do 3 for u P V do 4 SP \u00d0 shortestPathspv, uq; // compute using a BFS algorithm all shortest paths\nfrom v to u\n5 for pv, . . . , uq P SP do 6 F \u00d0 xv, . . . , uy; 7 F \u00d0 F ^ tV zXFu; 8 V \u00d0 cpbppv, . . . , uqq; 9 GR\u00d0 GRY pF \u00d1 V q;\n10 if \u03c6 \u201c\u201c \u03c6NR then 11 COMP_NRpGRq; // use Algorithm 22 12 else if \u03c6 \u201c\u201c \u03c6SB then 13 COMP_SBpGRq; // use Algorithm 23"}, {"heading": "8.4. Conclusions", "text": "Generalized characteristic function games are attracting increasing interest in the literature due to their manifold potential applications. In this chapter we considered both the representation and computational aspects of these games. In particular, building upon the state-of-the-art read-once MC-Nets for the Shapley value by Elkind et al. [2009a], we proposed the first computationally-convenient formalism to model games with ordered coalitions. Moreover, our Generalized Marginal-Contribution Nets representation allows to compute effectively the Nowak-Radzik and S\u00e1nchez-Berganti\u00f1os values. Finally, we proved the usefulness of such representation by constructing efficient algorithm to compute generalized game-theoretic betweenness centrality."}, {"heading": "9. Summary and Potential Extensions", "text": "In this dissertation, we developed 10 and analyzed additional 5 efficient algorithms computing different coalitional game solutions on graphs (the most important of them were presented in Table 9.1). These positive results in the domain of networks involved three fundamental centrality metrics: degree, closeness and betweenness. The game-theoretic solution concepts, such as the Shapley value, or Nowak-Radzik value, computed for these three measures gave us the new class of centrality metrics\u2014the game-theoretic centrality measures.\nIn Chapter 4, two algorithms were introduced: Algorithm 1 for Shapley value-based degree centrality and Algorithm 4 for Shapley value-based closness centrality. Both algorithms can be easily applied to weighted and unweighted graphs. In this chapter we also presented three generalizations of these two measures. Additionally, Algorithm 1 was an inspiration for Szczepan\u0301ski et al. [2015a], who computed efficiently on networks Interaction Index based on degree centrality.\nIn the next Chapter 5 four algorithms were introduced to compute different version of game-theoretic betweenness centrality. Algorithm 12 and Algorithm 15 compute Shapley value-based betweenness centrality for weighted and unweighted networks, respectively. The another two Algorithms 13 for unweighted and Algorithms 16 for weighted graphs are an implementation of Semivalue-based betweenness centrality.\nOwen value-based degree centrality was introduced in Chapter 6 together with two polynomial time algorithms. Firstly, in Algorithm 17 the general method for computing Coalitional Semivalue-based centrality measure was introduced. Secondly, in Algorithm 18 we introduced the faster method to compute Owen value-based degree centrality, which was an optimization of Algorithm 17 to calculate this particular Coalitional Semivalue.\nThe contribution of this dissertation not only consists of positive results. In particular, in Chapter 7 it was proven that computing Shapley value for connectivity games is #P-hard. However, against this negative results the Algorithm 20 was developed to compute Shapley value much faster than the brute force approach for connectivity games. This algorithm allows us to study much bigger real-life networks, and also was an inspiration for developing even faster methods to analyze connectivity games and graph-restricted games [Skibski et al., 2014, Michalak et al., 2015a].\nIn the last Chapter 8 the new representation of generalized coalitional games was introduced. Importantly, we developed two algorithms that in time polynomial in the\n152\nsize of the representation computes the Nowak-Radzik value (Algorithms 22) and the S\u00e1nchez-Berganti\u00f1os value (Algorithms 23). Based on this representation the Algorithm 24 was introduced to compute Nowak-Radzik value-based and S\u00e1nchez-Berganti\u00f1os value-based betweenness centrality.\nApart from computational results, it was experimentally shown that game-theoretic centrality measures were useful to analyze scale-free and real-life networks. In Chapter 5, the extensive simulations showed that game-theoretic betweenness centrality was a better measure to protect network against simultaneous nodes failures than the standard betweenness centrality.\nThe experiments performed on scientific citation network in Chapter 6 suggested that Owen value-based weighted degree centrality could be successfully used to evaluate the significance of publications, while taking into account the importance of journals and conference venues. Speaking more generally, the importance of a single node stems not only from its individual power, but also from the power of community it belongs to. Owen value-based centrality measure is the first measure in literature that takes this fact into account.\nIn Chapter 7 a terrorist network was analyzed with a centrality build upon connectivity games. In particular, our algorithm proposed in this chapter allowed to analyze real-life WTC 9/11 terrorist network with 36 members and 125 identified connections.\nThere are a number of directions for future work. Table 9.1 presents our main computational results vs. the gaps in the literature. For instance it is still an open question if it is possible to compute Owen value-based betweenness centrality in polynomial time? Such measure would find interesting applications to analyze financial institution networks, in which many institutions form strictly collaborating conglomerates. As can be seen from Table 9.1 there are more open questions regarding computation aspects of the game-theoretic centrality measures.\nIn this dissertation we analyzed three types of coalitional games: the standard games, games with coalitional structure, and generalized coalitional games. Nevertheless, there are still other classes of coalitional games, such as games with either positive or negative externalities [Yi, 1997, Michalak et al., 2009], that have been extensively studied in game theory and that may yield interesting results when applied to network centrality.\nIt is also interesting to analyse the properties of game-theoretic network centralities constructed on solution concepts from cooperative game theory other than the Shapley value, or Semivalues. In particular, more general solution concepts such as the core [Osborne and Rubinstein, 1994] or the nucleolus [Schmeidler, 1969] could be also used as a centrality metric.\nThere are several other potential directions for future work. Firstly, it would be interesting to extend the algorithms proposed in this thesis to streaming graphs [Green et al., 2012]. The challenge here is to efficiently re-compute the centralities and update the ranking of nodes after each change in the structure of the network, i.e., after adding/removing some nodes and/or edges. Secondly, we are keen to develop polynomial-time algorithms for the most specific\n153\nvariation of centralities analyzed in this dissertation, such as routing betweenness centrality [Dolev et al., 2010] built upon betweenness centrality. Finally, we would like to identify various axiomatic systems that each uniquely characterize our centrality measure. Such an axiomatic approach is common in the literature on cooperative game theory, and we believe it would be interesting to follow a similar approach to analyse centrality measures in general, and ours in particular.\nFurthermore, our contribution on representation can be extended in various directions, two of them seem particularly interesting. On the one hand, it would be interesting to consider representation formalism other than MC-Nets, such as Algebraic Decision Diagrams [Aadithya et al., 2011, Sakurai et al., 2011], to model generalized characteristic function games. On the other hand, it is worth analyzing if our representation can produce algorithms that compute generalized game-theoretic centrality measures build upon degree and closness centralities.\nFinally, it would be worth developing a more formal and general approach that would allow us to construct coalitional games defined over networks that correspond to other known centrality metrics or even entire families of them. Such an approach would involve developing a group centrality first and then building a characteristic function of a coalitional game upon it. Of course, while developing new centrality metrics based on coalitional games, one should keep in mind computational properties of the proposed solutions. Although we were able to obtain satisfactory computational results for a number of games, the computation of the game-theoretic network centrality may become much more challenging for more complex definitions of the characteristic function."}, {"heading": "Appendix A. Main Notation Used in the", "text": "Dissertation\nGraphs/Networks\nV \u201c tv1, v2, . . . v|V |u The set of nodes. E \u201c te1, e2, . . . e|E|u The set of undirected (two-elements sets) or directed (two-elements ordered pairs) edges e \u201c pvi, vjq.\nG \u201c pV,Eq The simple graph, where E is set of undirected edges. G \u201c pV,Eq The directed graph, where E is set of directed edges. G \u201c pV,E, \u03bbq The weighted graph with weight function: \u03bbpv, uq : E \u00d1 R. G \u201c pV,E, \u03b3q The weighted graph with weights on nodes: \u03b3 : V \u00d1 R.\nNpvq The neighbors of the node v, that is: tu : pv, uq P Eu. degpvq Degree of the node v, degpvq \u201c |Npvq|. NpCq The neighbors of the set of nodes C \u010e V , i.e. \u0164\nviPC NpviqzC. EpCq The set of edges within set of nodes C: EpCq \u201c tpu, vq P E : u, v P Cu. degpCq The degree of the set C, i.e. degpCq \u201c |NpCq|. distpv, uq The distance between two nodes: v and u. distpC, vq The distance between two nodes: v and set of nodes C: distpC, vq \u201c minuPC distpu, vq.\ncd, cb, cc : V \u00d1 R The degree, betweeness and closeness centrality, respectively. cgd, cgb, cgc : 2\nV \u00d1 R The group degree, group betweeness and group closeness centrality, respectively. C \u010e V A community C.\nCS \u201c tC1, C2, . . . C|CS |u The community structure. \u03c3st The number of shortest paths between s and t.\n\u03c3stpvq The number of shortest paths between s and t passing through the node v. \u03c3stpCq The number of shortest paths between s and t passing through at least one node from C.\nCoalitional Games\nA \u201c ta1, a2, . . . a|A|u The set of players/agents. \u03bd : 2A \u00d1 R The characteristic function. g \u201c pA, \u03bdq A coalitional game g in a characteristic function form. C \u010e A A coalition C. \u03a0pCq The set of all orders (permutations) of players in C.\nMCpC, aiq The marginal contribution of player ai to coalition C. \u03c6ipA, \u03bdq A solution concept for a player ai in coalitional game pA, \u03bdq. \u03c6ipAq Shorter notation for \u03c6ipA, \u03bdq.\n\u03c6SVi pA, \u03bdq The Shapley value for a player ai in coalitional game pA, \u03bdq. \u03c6SEMIi pA, \u03bdq The Semivalue for a player ai in coalitional game pA, \u03bdq.\n\u03c8 : G \u00d1 V The representation function (G is the set of all graphs, and V the set of all coalitional games).\npA,Rq The coalitional game in the form of Marginal Contribution Network. \u03b4ij The difference between \u03c6ipNq \u00b4 \u03c6ipN\u00b4jq and \u03c6jpNq \u00b4 \u03c6jpN\u00b4iq.\nCoalitional Games with Coalitional Strcuture\n155\nCS \u201c tC1, C2, . . . C|CS |u The coalitional structure.\n\u03c6OVi pA, \u03bd,CSq The Owen value for a player ai in coalitional game pA, \u03bd,CSq with coalitional structure CS . \u03c6CSEMIi pA, \u03bd,CSq The Coalitional Semivalue for a player ai in coalitional game pA, \u03bd,CSq with coalitional structure CS .\nGeneralized Coalitional Games\nT An ordered coalition. T \u201c \u0164\nCP2N \u03a0pCq The set of all ordered coalitions. \u03bdg : T \u00d1 R A generalized characteristic function. gg \u201c pA, \u03bdgq A generalized coalitional game in characteristic function form. pT, T 1qk The ordered coalition that results from inserting T 1 at the kth position in T . pT, aiq the ordered coalition that results from inserting ai at the end of T . pA, \u03bdgq A coalitional game in a generalized characteristic function form. T paiq An ordered coalition made of all predecessors of player ai in T .\n\u03c6SBi pN, \u03bdgq The S\u00e1nchez-Berganti\u00f1os value of player ai in game pN, \u03bdgq. \u03c6NRi pN, \u03bdgq The Nowak-Radzik value of player ai in game pN, \u03bdgq. vNRg pCq The Nowak-Radzik value of coalition C (i.e., 1|C|! \u00a8 \u0159 TP\u03a0pCq. \u03bd gpT q). MCNRpT, iq \u03bdgppT, aiqq \u00b4 \u03bdgpT q. MCSB pT, iq 1p|T |`1q \u0159|T |`1 l\u201c1 r\u03bdppT, aiq lq \u00b4 \u03bdpT qs.\npN,GRq generalized coalitional game represented by generalized MC-net Game-theoretic Network Centralities\n\u03bdG : 2 V \u00d1 R The characteristic function defined on graph. g \u201c pN, \u03bdGq A coalitional game g in a characteristic function form defined on graph. Other\nEr\u00a8s The expectation operator. pz ^ z1q \u00d1 V Basic MC-Nets z positive literals, z1 positive literals,.\nF Formula FBAF \u201c tam, . . . , anu basic atomic formula (BAF) FOAF \u201c xai, . . . , ajy ordered atomic formula (OAF)\nxa1i , . . . , afj y upper indices indicate positions in formula/ordered coalition F1 \u2018 F2 exclusive disjunction T ( F ordered coalition T meets or satisfies formula F T * F ordered coalition T does not meet or satisfy formula F XF set of players occurring in F TF \u0164\nt\u03a0pCq : C \u010e XFu T1 \u02c6 T2 conflation of two ordered coalitions Ak,ipFq |tT P TF : |T | \u201c k, ai R T, T * F , pT, aiq ( Fqu| Bk,ipFq |tT P TF : |T | \u201c k, ai R T, T ( F , pT, aiq * Fqu| TkpFq |tT P TF : |T | \u201c k, T ( Fu| FkpFq |tT P TF : |T | \u201c k, T * Fu| TkpFq |tT P TF : |T | \u201c k, ai R T, T * F , pT, aiql ( Fqu| Bk,i,lpFq |tT P TF : |T | \u201c k, ai R T, T ( F , pT, aiql * Fqu|"}, {"heading": "Appendix B. The Recursive Functions", "text": "Algorithm 25: ShNRpFq Input: Formula F Output: Quantities pA, B, T, Fq begin\nif F \u201c ta1, . . . , aru then pA, B, T, Fq \u00d0 p0, 0, 0, 0q; for k P t0, . . . , ru do\nfor i P XF do if k \u201c r \u00b4 1 then Ak,i \u00d0 pr \u00b4 1q! end if k \u201c r then Tk \u00d0 r! Fk \u00d0 k!\u00b4 Tk;\nend end else if F \u201c xa1, . . . , ary then\npA, B, T, Fq \u00d0 p0, 0, 0, 0q; for k P t0, . . . , ru do\nif k \u201c r \u00b4 1 then Ak,r \u00d0 1 if k \u201c r then Tk \u00d0 1 Fk \u00d0 k!\u00b4 Tk; end\nendelse if F \u201c F1 then pA1, B1, T1, F1q \u00d0 ShNRpF1q; pA, B, T, Fq \u00d0 pB1, A1, F1, T1q; end else if F \u201c F1 ^ F2 then // We assume that @iPXF i P F1, the second situation is analogous.\npA1, B1, T1, F1q \u00d0 ShNRpF1q; pA2, B2, T2, F2q \u00d0 ShNRpF2q; for k P t0, . . . , ru do\nfor i P XF do Ak,i \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 A1s,iT 2 k\u00b4s\nBk,i \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 B1s,iT 2 k\u00b4s\nend Tk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 T1sT 2 k\u00b4s Fk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 pF1sF 2 k\u00b4s ` F 1 sT 2 k\u00b4s ` T 1 sF 2 k\u00b4sq\nend endelse if F \u201c F1 _ F2 then\npA1, B1, T1, F1q \u00d0 ShNRpF1q; pA2, B2, T2, F2q \u00d0 ShNRpF2q; for k P t0, . . . , ru do\nfor i P XF do Ak,i \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 A1s,iF 2 k\u00b4s\nBk,i \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 B1s,iF 2 k\u00b4s\nend Tk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 pT1sT 2 k\u00b4s ` F 1 sT 2 k\u00b4s ` T 1 sF 2 k\u00b4sq Fk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 F1sF 2 k\u00b4s\nend endelse if F \u201c F1 \u2018 F2 then\npA1, B1, T1, F1q \u00d0 ShNRpF1q; pA2, B2, T2, F2q \u00d0 ShNRpF2q; for k P t0, . . . , ru do\nfor i P XF do Ak,i \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 pB1s,iT 2 k\u00b4s ` A 1 s,iF 2 k\u00b4sq;\nBk,i \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 pB1s,iF 2 k\u00b4s ` A 1 s,iT 2 k\u00b4sq;\nend Tk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 pT1sF 2 k\u00b4s ` F 1 sT 2 k\u00b4sq; Fk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 pT1sT 2 k\u00b4s ` F 1 sF 2 k\u00b4sq;\nend end\nend\n. . .\n157\nAlgorithm 26: ShSBpFq Input: Formula F Output: Quantities pA,B,T,Fq begin\nif F \u201c ta1, . . . , aru then pA,B,T,Fq \u00d0 p0, 0, 0, 0q; for k P t0, . . . , ru do\nfor i P XF , l P t1, . . . , ru do if k \u201c r \u00b4 1 then Ak,i,l \u00d0 pr \u00b4 1q! end if k \u201c r then Tk \u00d0 r! Fk \u00d0 k!\u00b4 Tk;\nend end else if F \u201c xa1, . . . , ary then\npA,B,T,Fq \u00d0 p0, 0, 0, 0q; for k P t0, . . . , ru do\nfor i P XF do if k \u201c r \u00b4 1 then Ak,i,i \u00d0 1 end if k \u201c r then Tk \u00d0 1 Fk \u00d0 k!\u00b4 Tk;\nend endelse if F \u201c F1 then\npA1,B1,T1,F1q \u00d0 ShSB pF1q; pA,B,T,Fq \u00d0 pB1,A1,F1,T1q;\nend else if F \u201c F1 ^ F2 then // We assume that @iPXF i P F1, the second situation is analogous.\npA1,B1,T1,F1q \u00d0 ShSB pF1q; pA2,B2,T2,F2q \u00d0 ShSB pF2q; for k P t0, . . . , ru do\nfor i P XF , l P t1, . . . , ru do Ak,i,l \u00d0 \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8 A1s,i,mT 2 k\u00b4s;\nBk,i,l \u00d0 \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8 B1s,i,mT 2 k\u00b4s;\nend Tk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 T1sT 2 k\u00b4s; Fk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 pF1sF2k\u00b4s ` F 1 sT 2 k\u00b4s ` T 1 sF 2 k\u00b4sq;\nend endelse if F \u201c F1 _ F2 then\npA1,B1,T1,F1q \u00d0 ShSB pF1q; pA2,B2,T2,F2q \u00d0 ShSB pF2q; for k P t0, . . . , ru do\nfor i P XF , l P t1, . . . , ru do Ak,i,l \u00d0 \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8 A1s,i,mF 2 k\u00b4s;\nBk,i,l \u00d0 \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8 B1s,i,mF 2 k\u00b4s;\nend Tk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 pT1sT2k\u00b4s ` F 1 sT 2 k\u00b4s ` T 1 sF 2 k\u00b4sq Fk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 F1sF 2 k\u00b4s\nend endelse if F \u201c F1 \u2018 F2 then\npA1,B1,T1,F1q \u00d0 ShSB pF1q; pA2,B2,T2,F2q \u00d0 ShSB pF2q; for k P t0, . . . , ru do\nfor i P XF , l P t1, . . . , ru do Ak,i,l \u00d0 \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8 pB1s,i,mT2k\u00b4s ` A 1 s,i,mF 2 k\u00b4sq;\nBk,i,l \u00d0 \u0159k s\u201c0 \u0159s`1 m\u201c1 ` l\u00b41 l\u00b4m \u02d8` k\u00b4l`1 k\u00b4l`m\u00b4s \u02d8` B1s,i,mF 2 k\u00b4s ` A 1 s,i,mT 2 k\u00b4s \u02d8 ;\nend Tk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 pT1sF2k\u00b4s ` F 1 sT 2 k\u00b4sq; Fk \u00d0 \u0159k s\u201c0 ` k k\u00b4s \u02d8 pT1sT2k\u00b4s ` F 1 sF 2 k\u00b4sq;\nend end\nend\n158"}], "references": [], "referenceMentions": [], "year": 2015, "abstractText": "In this dissertation, we analyze the computational properties of game-theoretic centrality measures. The key idea behind game-theoretic approach to network analysis is to treat nodes as players in a cooperative game, where the value of each coalition of nodes is determined by certain graph properties. Next, the centrality of any individual node is determined by a chosen game-theoretic solution concept (notably, the Shapley value) in the same way as the payoff of a player in a cooperative game. On one hand, the advantage of game-theoretic centrality measures is that nodes are ranked not only according to their individual roles but also according to how they contribute to the role played by all possible subsets of nodes. On the other hand, the disadvantage is that the game-theoretic solution concepts are typically computationally challenging. The main contribution of this dissertation is that we show that a wide variety of game-theoretic solution concepts on networks can be computed in polynomial time. Our focus is on centralities based on the Shapley value and its various extensions, such as the Semivalues and Coalitional Semivalues. Furthermore, we prove #P-hardness of computing the Shapley value in connectivity games and propose an algorithm to compute it. Finally, we analyse computational properties of generalized version of cooperative games in which order of player matters. We propose a new representation for such games, called generalized marginal contribution networks, that allows for polynomial computation in the size of the representation of two dedicated extensions of the Shapley value to this class of games.", "creator": "LaTeX with hyperref package"}}}