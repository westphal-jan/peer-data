{"id": "1601.02543", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Jan-2016", "title": "Evaluating the Performance of a Speech Recognition based System", "abstract": "Speech based solutions have taken center stage with growth in the services industry where there is a need to cater to a very large number of people from all strata of the society. While natural language speech interfaces are the talk in the research community, yet in practice, menu based speech solutions thrive. Typically in a menu based speech solution the user is required to respond by speaking from a closed set of words when prompted by the system. A sequence of human speech response to the IVR prompts results in the completion of a transaction. A transaction is deemed successful if the speech solution can correctly recognize all the spoken utterances of the user whenever prompted by the system. The usual mechanism to evaluate the performance of a speech solution is to do an extensive test of the system by putting it to actual people use and then evaluating the performance by analyzing the logs for successful transactions. This kind of evaluation could lead to dissatisfied test users especially if the performance of the system were to result in a poor transaction completion rate. To negate this the Wizard of Oz approach is adopted during evaluation of a speech system. Overall this kind of evaluations is an expensive proposition both in terms of time and cost. In this paper, we propose a method to evaluate the performance of a speech solution without actually putting it to people use. We first describe the methodology and then show experimentally that this can be used to identify the performance bottlenecks of the speech solution even before the system is actually used thus saving evaluation time and expenses.", "histories": [["v1", "Mon, 11 Jan 2016 18:01:56 GMT  (50kb,D)", "http://arxiv.org/abs/1601.02543v1", "7 pages, 2 figure, ACC 2011"]], "COMMENTS": "7 pages, 2 figure, ACC 2011", "reviews": [], "SUBJECTS": "cs.CL cs.AI cs.HC", "authors": ["vinod kumar pandey", "sunil kumar kopparapu"], "accepted": false, "id": "1601.02543"}, "pdf": {"name": "1601.02543.pdf", "metadata": {"source": "CRF", "title": "Evaluating the Performance of a Speech Recognition based System", "authors": ["Vinod Kumar Pandey", "Sunil Kumar Kopparapu"], "emails": ["sunilkumar.kopparapu}@tcs.com"], "sections": [{"heading": null, "text": "Keywords: Speech solution evaluation, Speech recognition, Pre-launch recognition performance measure."}, {"heading": "1 Introduction", "text": "There are several commercial menu based ASR systems available around the world for a significant number of languages and interestingly speech solution based on these ASR are being used with good success in the Western part of the globe [5], [3], [6], [2]. Typically, a menu based ASR system restricts user to\nar X\niv :1\n60 1.\n02 54\n3v 1\n[ cs\n.C L\n] 1\n1 Ja\nn 20\n2 speak from a pre-defined closed set of words for enabling a transaction. Before commercial deployment of a speech solution it is imperative to have a quantitative measure of the performance of the speech solution which is primarily based on the speech recognition accuracy of the speech engine used. Generally, the recognition performance of any speech recognition based solution is quantitatively evaluated by putting it to actual use by the people who are the intended users and then analyzing the logs to identify successful and unsuccessful transactions. This evaluation is then used to identifying any further improvement in the speech recognition based solution to better the overall transaction completion rates. This process of evaluation is both time consuming and expensive. For evaluation one needs to identify a set of users and also identify the set of actual usage situations and perform the test. It is also important that the set of users are able to use the system with ease meaning that even in the test conditions the performance of the system, should be good, while this can not usually be guaranteed this aspect of keeping the user experience good makes it necessary to employ a wizard of Oz (WoZ) approach. Typically this requires a human agent in the loop during actual speech transaction where the human agent corrects any mis-recognition by actually listening to the conversation between the human user and the machine without the user knowing that there is a human agent in the loop. The use of WoZ is another expense in the testing a speech solution. All this makes testing a speech solution an expensive and time consuming procedure.\nIn this paper, we describe a method to evaluate the performance of a speech solution without actual people using the system as is usually done. We then show how this method was adopted to evaluate a speech recognition based solution as a case study. This is the main contribution of the paper. The rest of the paper is organized as follows. The method for evaluation without testing is described in Section 2. In Section 3 we present a case study and conclude in Section 4."}, {"heading": "2 Evaluation without Testing", "text": "Fig. 1 shows the schematic of a typical menu based speech solution having 3 nodes. At each node there are a set of words that the user is expected to speak and the system is supposed to recognize. In this particular schematic, at the entry node the user can speak any of the n words, namely W1 or W2 or \u00b7 \u00b7 \u00b7 or Wn; n is usually called the perplexity of the node in the speech literature. The larger the n the more the perplexity and higher the confusion and hence lower the recognition accuracies. In most commercial speech solutions the perplexity is kept very low, typically a couple of words. Once the word at the entry node has been recognized (say word Wk has been recognized), the system moves on to the second node where the active list of words to be recognized could be one of Wk1, Wk2, Wk3, ... Wkp if the perplexity at the k\nth node is p. This is carried on to the third node. A transaction is termed successful if and only if the recognition at each of the three nodes is correct. For example, typically in a banking speech solution the entry node could expect someone to speak among\n3\n/credit card/1, /savings account/, /current account/, /loan product/, /demat/, and /mutual fund transfer/ which has a perplexity of 6. Once a person speaks, say, /savings account/ and is recognized correctly by the system, at the second node it could be /account balance/ or /cheque/ or /last 5 transactions/ (perplexity 3) and at the third node (say, on recognition of /cheque/) it could be /new cheque book request/, /cheque status/, and /stop cheque request/ (perplexity 3).\nNote 1. Though we will not dwell on this, it is important to note that an error in recognition at the entry node is more expensive than a recognition error at a lower node.\nBased on the call flow, and the domain the system can have several nodes for completion of a transaction. Typical menu based speech solutions strive for a 3 - 5 level nodes to make it usable. In any speech based solution (see Fig. 2) first the spoken utterance is hypothesized into a sequence of phonemes using the acoustic models. Since the phoneme recognition accuracy is low, instead of choosing one phoneme it identifies l-best (typically l = 3) matching phonemes. This phone lattice is then matched with all the expected words (language model) at that node to find the best match. For a node with perplexity n the constructed phoneme lattice of the spoken utterance is compared with the phoneme sequence representation of all the n words (through the lexicon which is one of he key\n1 We will use / / to indicate the spoken word. For example /W1/ represents the spoken equivalent of the written word W1.\ncomponents of a speech recognition system). The hypothesized phone lattice is declared one of the n words depending on the closeness of the phoneme lattice to the phoneme representation of the n words.\nWe hypothesize that we can identify the performance of a menu based speech system by identifying the possible confusion among all the words that are active at a given node.\nNote 2. If active words at a given node are phonetically similar it becomes difficult for the speech recognition system to distinguish them which in turn leads to recognition errors.\nWe used Levenshtein distance [1], [4] a well known measure to analyze and identify the confusion among the active words at a given node. This analysis gives a list of all set of words that have a high degree of confusability among them; this understanding can be then used to (a) restructure the set of active words at that node and/or (b) train the words that can be confused by using a larger corpus of speech data. This allows the speech recognition engine to be equipped to be able to distinguish the confusing words better. Actual use of this analysis was carried out for a speech solution developed for Indian Railway Inquiry System to identify bottlenecks in the system before its actual launch."}, {"heading": "3 Case Study", "text": "A schematic of a speech based Railway Information system, developed for Hindi language is shown in Fig. 3. The system enables user to get information on five\n5\ndifferent services, namely, (a) Arrival of a given train at a given station, (b) Departure of a given train at a given station, (c) Ticket availability on a given date in a given train between two stations, and class, (d) Fare in a given class in a given train between two stations, and (e) PNR status. At the first recognition node (node-1), there are one or more active words corresponding to each of these services. For example, for selecting the service Fare, the user can speak among /kiraya jankari/, /kiraya/, /fare/. Similarly, for selecting service Ticket availability, user can speak /upalabdhata jankari/ or /ticket availability/ or /upalabdhata/.\nNote 3. Generally the perplexity at a node is greater than on equal to the number of words that need to be recognized at that node.\nIn this manner each of the services could have multiple words or phrases that can mean the same thing and the speaker could utter any of these words to refer to that service. The sum of all the possible different ways in which a service can be called (di) summed over all the 5 services gives the perplexity (N ) at that node, namely,\nN = 5\u2211\ni=0\ndi (1)\nThe speech recognition engine matches the phoneme lattice of the spoken utterance with all the N words which are active. The active word (one among the N words) with highest likelihood score is the recognized word. In order to avoid low likelihood recognitions a threshold is set so that even the best likelihood wordis returned only if the likelihood score is greater than the predefined threshold. Completion of a service requires recognitions at several nodes with different perplexity at each node. Clearly depending on the type of service that the user is wanting to use; the user has to go through different number of recognition nodes. For example, to complete the Arrival service it is required to\n6 pass through 3 recognition nodes namely (a) selection of a service, (b) selection of a train name and (c) selection of the railway station. While the perplexity (the words that are active) at the service selection node is fixed the perplexity at the station selection node could depend on the selection of the train name at an earlier node. For example, if the selected train stops at 23 stations, then the perplexity at the station selection node will be \u2265 23.\nFor confusability analysis at each of the node, we have used the Levenshtein distance [4] or the edit distance as is well known in computer science literature. We found that the utterances /Sahi/ and /Galat/ have 100% recognition. These words Sahi is represented by the string of phonemes in the lexicon as S AA HH I and the word Galat is represented as the phoneme sequence G L AX tT in the lexicon. We identified the edit distance between these two words Sahi and Galat and used that distance measure as the threshold that is able to differentiate any two words (say T ). So if the distance between any two active words at a given recognition node is lower than the threshold T , then there is a greater chance that those two active words could get confused (one word could be recognized as the other which is within a distance of T ). There are ways in which this possible misrecognition words could be avoided. The easiest way is to make sure that these two words together are not active at a given recognition node.\nTable 1 shows the list of active word at the node 1 when the speech application was initially designed and Table 2 shows the edit distance between all the active words at the node service given in Fig. 3. The distance between words Sahi and Galat was found to be 5.7 which was set at the threshold, namely T = 5.7. This threshold value was used to identify confusing active words. Clearly, as seen\n7 in the Table the distance between word pairs fare, pnr and pnr, prasthan is 5.2 and 5.8 respectively, which is very close to the threshold value of 5.7. This can cause a high possibility that /fare/ may get recognized as pnr and vice-versa. One can derive from the analysis of the active words that fare and pnr can"}, {"heading": "W1 0 8.4 14.2 8.5 14.1 15.3 11 20 17.1 13 13 13.2 6.2 11.2", "text": "not coexist as active words at the same node. The result of the analysis was to remove the active words fare and pnr at that node.\nWhen the speech system was actually tested by giving speech samples, 17 out of 20 instances of /pnr/ was was recognized as fare and vice-versa. Similarly 19 out of 20 instances /pnr/ was misrecognized as prasthan and vice versa This confusion is expected as can be seen from the edit distance analysis of the active words in the Table 2. This modified active word list (removal of fare and pnr) increased the recognition accuracy at the service node (Fig. 3) by as much as 90%.\nA similar analysis was carried out at other recognition nodes and the active word list was suitably modified to avoid possible confusion between active word pair. This analysis and modification of the list of active words at a node resulted in a significant improvement in the transaction completion rate. We will present more experimental results in the final paper."}, {"heading": "4 Conclusion", "text": "In this paper we proposed a methodology to identify words that could lead to confusion at any given node of a speech recognition based system. We used\n8 edit distance as the metric to identifying the possible confusion between the active words. We showed that this metric can be used effectively to enhance the performance of a speech solution without actually putting it to people test. There is a significant saving in terms of being able to identify recognition bottlenecks in a menu based speech solution through this analysis because it does not require actual people testing the system. This methodology was adopted to restructuring the set of active words at each node for better speech recognition in an actual menu based speech recognition system that caters to masses."}], "references": [{"title": "Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology", "author": ["D. Gusfield"], "venue": "Cambridge University Press", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2001}, {"title": "Feature extraction for robust speech recognition based on maximizing the sharpness of the power distribution and on power flooring", "author": ["C. Kim", "R. Stern"], "venue": "IEEE International Conference on Acoustics Speech and Signal Processing pp. 4574\u20134577", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2010}, {"title": "Temporal contrast normalization and edge-preserved smoothing of temporal modulation structures of speech for robust speech recognition", "author": ["X. Lua", "S. Matsudaa", "M. Unokib", "S. Nakamuraa"], "venue": "Speech Communication 52, 1\u201311", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2010}, {"title": "A guided tour to approximate string matching", "author": ["G. Navarro"], "venue": "ACM Computing Surveys 33, 31\u201388", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2001}, {"title": "Using a dbn to integrate sparse classification and gmm-based asr", "author": ["Y. Sun", "J. Gemmeke", "B. Cranen", "L. Bosch", "L. Boves"], "venue": "Proceedings of Interspeech 2010", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2010}, {"title": "A comparative study of noise estimation algorithms for vtsbased robust speech recognition", "author": ["Y. Zhao", "B. Juang"], "venue": "Proceedings of Interspeech 2010", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 4, "context": "There are several commercial menu based ASR systems available around the world for a significant number of languages and interestingly speech solution based on these ASR are being used with good success in the Western part of the globe [5], [3], [6], [2].", "startOffset": 236, "endOffset": 239}, {"referenceID": 2, "context": "There are several commercial menu based ASR systems available around the world for a significant number of languages and interestingly speech solution based on these ASR are being used with good success in the Western part of the globe [5], [3], [6], [2].", "startOffset": 241, "endOffset": 244}, {"referenceID": 5, "context": "There are several commercial menu based ASR systems available around the world for a significant number of languages and interestingly speech solution based on these ASR are being used with good success in the Western part of the globe [5], [3], [6], [2].", "startOffset": 246, "endOffset": 249}, {"referenceID": 1, "context": "There are several commercial menu based ASR systems available around the world for a significant number of languages and interestingly speech solution based on these ASR are being used with good success in the Western part of the globe [5], [3], [6], [2].", "startOffset": 251, "endOffset": 254}, {"referenceID": 0, "context": "We used Levenshtein distance [1], [4] a well known measure to analyze and identify the confusion among the active words at a given node.", "startOffset": 29, "endOffset": 32}, {"referenceID": 3, "context": "We used Levenshtein distance [1], [4] a well known measure to analyze and identify the confusion among the active words at a given node.", "startOffset": 34, "endOffset": 37}, {"referenceID": 3, "context": "For confusability analysis at each of the node, we have used the Levenshtein distance [4] or the edit distance as is well known in computer science literature.", "startOffset": 86, "endOffset": 89}], "year": 2016, "abstractText": "Speech based solutions have taken center stage with growth in the services industry where there is a need to cater to a very large number of people from all strata of the society. While natural language speech interfaces are the talk in the research community, yet in practice, menu based speech solutions thrive. Typically in a menu based speech solution the user is required to respond by speaking from a closed set of words when prompted by the system. A sequence of human speech response to the IVR prompts results in the completion of a transaction. A transaction is deemed successful if the speech solution can correctly recognize all the spoken utterances of the user whenever prompted by the system. The usual mechanism to evaluate the performance of a speech solution is to do an extensive test of the system by putting it to actual people use and then evaluating the performance by analyzing the logs for successful transactions. This kind of evaluation could lead to dissatisfied test users especially if the performance of the system were to result in a poor transaction completion rate. To negate this the Wizard of Oz approach is adopted during evaluation of a speech system. Overall this kind of evaluations is an expensive proposition both in terms of time and cost. In this paper, we propose a method to evaluate the performance of a speech solution without actually putting it to people use. We first describe the methodology and then show experimentally that this can be used to identify the performance bottlenecks of the speech solution even before the system is actually used thus saving evaluation time and expenses.", "creator": "LaTeX with hyperref package"}}}