{"id": "1601.06759", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "25-Jan-2016", "title": "Pixel Recurrent Neural Networks", "abstract": "Modeling the distribution of natural images is a landmark problem in unsupervised learning. This task requires an image model that is at once expressive, tractable and scalable. We present a deep neural network that sequentially predicts the pixels in an image along the two spatial dimensions. Our method models the discrete probability of the raw pixel values and encodes the complete set of dependencies in the image. Architectural novelties include fast two-dimensional recurrent layers and an effective use of residual connections in deep recurrent networks. We achieve log-likelihood scores on natural images that are considerably better than the previous state of the art. Our main results also provide benchmarks on the diverse ImageNet dataset. Samples generated from the model appear crisp, varied and globally coherent.", "histories": [["v1", "Mon, 25 Jan 2016 20:34:24 GMT  (3500kb,D)", "http://arxiv.org/abs/1601.06759v1", null], ["v2", "Mon, 29 Feb 2016 15:32:16 GMT  (2385kb,D)", "http://arxiv.org/abs/1601.06759v2", null], ["v3", "Fri, 19 Aug 2016 14:10:16 GMT  (2647kb,D)", "http://arxiv.org/abs/1601.06759v3", null]], "reviews": [], "SUBJECTS": "cs.CV cs.LG cs.NE", "authors": ["a\u00e4ron van den oord", "nal kalchbrenner", "koray kavukcuoglu"], "accepted": true, "id": "1601.06759"}, "pdf": {"name": "1601.06759.pdf", "metadata": {"source": "META", "title": "Pixel Recurrent Neural Networks", "authors": ["A\u00e4ron van den Oord", "Nal Kalchbrenner", "Koray Kavukcuoglu"], "emails": ["AVDNOORD@GOOGLE.COM", "NALK@GOOGLE.COM", "KORAYK@GOOGLE.COM"], "sections": [{"heading": "1. Introduction", "text": "Generative image modeling is a central problem in unsupervised learning. Probabilistic density models can be used for a wide variety of tasks that range from image compression and forms of reconstruction such as image inpainting (e.g., see Figure 1) and deblurring, to generation of new images. When the model is conditioned on external information, possible applications also include creating images based on text descriptions or simulating future frames in a planning task. One of the great advantages in generative modeling is that there are practically endless amounts of image data available to learn from. However, because images are high dimensional and highly structured, estimating the distribution of natural images in general is extremely challenging.\nOne of the most important obstacles in generative modeling is building complex and expressive models that are also tractable and scalable. This trade-off has resulted in\noccluded completions original\nFigure 1. Image completions sampled from a PixelRNN.\na large variety of generative models, each having their advantages. Most work focuses on stochastic latent variable models (Rezende et al., 2014; Kingma & Welling, 2013) that aim to extract meaningful representations, but often come with an intractable inference step that can hinder their performance.\nOne effective approach to tractably model a joint distribution of the pixels in the image is to cast it as a product of conditional distributions; this approach has been adopted in autoregressive models such as NADE (Larochelle & Murray, 2011) and fully visible sigmoid belief networks (Neal, 1992). The factorization turns the joint modeling problem into a sequence problem, where one learns to predict the next pixel given all the previously generated pixels. But to model the highly nonlinear and long-range correlations between pixels and the complex conditional distributions that result, a highly expressive sequence model is necessary.\nRecurrent Neural Networks (RNN) are powerful models that offer a compact, shared parametrization of a series of conditional distributions. RNNs have been shown to excel at hard sequence problems ranging from handwriting generation (Graves, 2013), to character prediction (Sutskever et al., 2011) and to machine translation (Kalchbrenner & Blunsom, 2013). A two-dimensional RNN has produced very promising results in modeling grayscale images and textures (Theis & Bethge, 2015).\nIn this paper we advance two-dimensional RNNs and apply them to large-scale modeling of natural images. The\nar X\niv :1\n60 1.\n06 75\n9v 1\n[ cs\n.C V\n] 2\n5 Ja\nn 20\n16\nresulting PixelRNNs are composed of up to twelve, fast two-dimensional Long Short-Term Memory (LSTM) layers. These layers use LSTM units in their state (Hochreiter & Schmidhuber, 1997; Graves & Schmidhuber, 2009) and adopt a convolution to compute at once all the states along one of the spatial dimensions of the data. We design two types of these layers. The first type is the Row LSTM layer where the convolution is applied along each row; a similar technique is described in (Stollenga et al., 2015). The second type is the Diagonal BiLSTM layer where the convolution is applied in a novel fashion along the diagonals of the image. The networks also incorporate residual connections (He et al., 2015) around LSTM layers; we observe that this helps with training of the PixelRNN for up to twelve layers of depth.\nWe also consider a second, simplified architecture which shares the same core components as the PixelRNN. We observe that Convolutional Neural Networks (CNN) can also be used as sequence model with a fixed dependency range, by using Masked convolutions. The PixelCNN architecture is a fully convolutional network of fifteen layers that preserves the spatial resolution of its input throughout the layers and outputs a conditional distribution at each location.\nBoth PixelRNN and PixelCNN capture the full generality of pixel inter-dependencies without introducing independence assumptions as in e.g., latent variable models. The dependencies are also maintained between the RGB color values within each individual pixel. Furthermore, in contrast to previous approaches that model the pixels as continuous values (e.g., Theis & Bethge (2015); Gregor et al. (2014)), we model the pixels as discrete values using a multinomial distribution implemented with a simple softmax layer. We observe that this approach gives both representational and training advantages for our models.\nThe contributions of the paper are as follows. In Section 3 we design two types of PixelRNNs corresponding to the two types of LSTM layers; we describe the purely convolutional PixelCNN that is our fastest architecture; and we design a Multi-Scale version of the PixelRNN. In Section 5 we show the relative benefits of using the discrete softmax distribution in our models and of adopting residual connections for the LSTM layers. Next we test the models on MNIST and on CIFAR-10 and show that they obtain loglikelihood scores that are considerably better than previous results. We also provide results for the large-scale ImageNet dataset resized to both 32 \u00d7 32 and 64 \u00d7 64 pixels; to our knowledge likelihood values from generative models have not previously been reported on this dataset. Finally, we give a qualitative evaluation of the samples generated from the PixelRNNs. The samples are crisp, give evidence of significant object and scene awareness and create realis-\ntic novel compositions."}, {"heading": "2. Model", "text": "Our aim is to estimate a distribution over natural images that can be used to tractably compute the likelihood of images and to generate new ones. The network scans the image one row at a time and one pixel at a time within each row. For each pixel it predicts the conditional distribution over the possible pixel values given the scanned context. Figure 2 illustrates this process. The joint distribution over the image pixels is factorized into a product of conditional distributions. The parameters used in the predictions are shared across all pixel positions in the image.\nTo capture the generation process, Theis & Bethge (2015) propose to use a two-dimensional LSTM network (Graves & Schmidhuber, 2009) that starts at the top left pixel and proceeds towards the bottom right pixel. The advantage of the LSTM network is that it effectively handles long-range dependencies that are central to object and scene understanding. The two-dimensional structure ensures that the signals are well propagated both in the left-to-right and topto-bottom directions.\nIn this section we first focus on the form of the distribution, whereas the next section will be devoted to describing the architectural innovations inside PixelRNN."}, {"heading": "2.1. Generating an Image Pixel by Pixel", "text": "The goal is to assign a probability p(x) to each image x formed of n\u00d7n pixels. We can write the image x as a onedimensional sequence x1, ..., xn2 where pixels are taken from the image row by row. To estimate the joint distribution p(x) we write it as the product of the conditional distributions over the pixels:\np(x) = n2\u220f i=1 p(xi|x1, ..., xi\u22121) (1)\nThe value p(xi|x1, ..., xi\u22121) is the probability of the i-th pixel xi given all the previous pixels x1, ..., xi\u22121. The generation proceeds row by row and pixel by pixel. Figure 2 illustrates the conditioning scheme.\nEach pixel xi is in turn jointly determined by three values, one for each of the color channels Red, Green and Blue (RGB). We rewrite the distribution p(xi|x<i) as the following product:\np(xi,R|x<i)p(xi,G|x<i, xi,R)p(xi,B |x<i, xi,R, xi,G) (2)\nEach of the colors is thus conditioned on the other channels as well as on all the previously generated pixels."}, {"heading": "2.2. Pixels as Discrete Variables", "text": "Previous approaches use a continuous distribution for the values of the pixels in the image (e.g. Uria et al. (2014); Theis & Bethge (2015)). By contrast we model p(x) as a discrete distribution, with every conditional distribution in Equation 2 being a multinomial that is modeled with a softmax layer. Each channel variable xi,\u2217 simply takes one of 256 distinct values. The discrete distribution is representationally simple and has the advantage of being arbitrarily multimodal without prior on the shape. Experimentally we also find the discrete distribution to be easy to learn and to produce better performance compared to a continuous distribution (Section 5)."}, {"heading": "3. Pixel Recurrent Neural Networks", "text": "In this section we describe the architectural components that compose the PixelRNN. In Sections 3.1 and 3.2, we describe the two types of LSTM layers that use convolutions to compute at once the states along one of the spatial dimensions. In Section 3.3 we describe how to incorporate residual connections to improve the training of a PixelRNN with many LSTM layers. In Section 3.4 we describe the softmax layer that computes the discrete joint distribution of the colors and the masking technique that ensures the proper conditioning scheme. In Section 3.5 we describe the PixelCNN architecture. Finally in Section 3.6 we describe the multi-scale architecture."}, {"heading": "3.1. Row LSTM", "text": "The Row LSTM is a unidirectional layer that processes the image row by row from top to bottom computing features for a whole row at once; the computation is performed with a one-dimensional convolution. For a pixel xi the layer captures a roughly triangular context above the pixel as shown in Figure 2 (center). The kernel of the onedimensional convolution has size k \u00d7 1 where k \u2265 3; the larger the value of k the broader the context that is captured.\nThe weight sharing in the convolution ensures translation invariance of the computed features along each row.\nThe computation proceeds as follows. An LSTM layer has an input-to-state component and a recurrent state-to-state component that together determine the four gates inside the LSTM core. To enhance parallelization in the Row LSTM the input-to-state component is first computed for the entire two-dimensional input map; for this a k \u00d7 1 convolution is used to follow the row-wise orientation of the LSTM itself. The convolution is masked to include only the valid context (see Section 3.4) and produces a tensor of size 4h\u00d7 n\u00d7 n, representing the four gate vectors for each position in the input map, where h is the number of features in the LSTM layer.\nTo compute one step of the state-to-state component of the LSTM layer, one is given the previous hidden and cell states hi\u22121 and ci\u22121, each of size h \u00d7 n \u00d7 1. The new hidden and cell states hi, ci are obtained as follows:\n[oi, fi, ii,gi] = \u03c3(K ss ~ hi\u22121 +K is ~ xi)\nci = fi ci\u22121 + ii gi hi = oi tanh(ci)\n(3)\nwhere xi of size h \u00d7 n \u00d7 1 is row i of the input map, and ~ represents the convolution operation and the elementwise multiplication. The weights Kss and Kis are the kernel weights for the state-to-state and the input-to-state components, where the latter is precomputed as described above. In the case of the output, forget and input gates oi, fi and ii, the activation \u03c3 is the logistic sigmoid function, whereas for the content gate gi, \u03c3 is the tanh function. Each step computes at once the new state for an entire row of the input map. Since the Row LSTM layer is unidirectional, it is relatively fast, but it has a considerable drawback. Due to its roughly triangular shape, the receptive field induced by the layer misses a large portion of the previously generated context corresponding to the areas on either side of the current pixel. For example, for a value\nof k = 3 for the state-to-state convolution, which we find gives the best performance in the experiments, the receptive field for the pixels near the center of the image misses roughly half of the generated context (Figure 2)."}, {"heading": "3.2. Diagonal BiLSTM", "text": "The Diagonal BiLSTM is designed to both parallelize the computation and to capture the entire available context for any image size. Each of the two directions of the layer scans the image in a diagonal fashion starting from a corner at the top and reaching the opposite corner at the bottom. Each step in the computation computes at once the LSTM state along a diagonal in the image. Figure 2 (right) illustrates the computation and the resulting receptive field.\nThe diagonal computation proceeds as follows. We first skew the input map into a space that makes it easy to apply convolutions along diagonals. The skewing operation offsets each row of the input map by one position with respect to the previous row, as illustrated in Figure 3; this results in a map of size n\u00d7 (2n\u2212 1). At this point we can compute the input-to-state and state-to-state components of the Diagonal BiLSTM. For each of the two directions, the input-to-state component is simply a 1\u00d71 convolutionKis that contributes to the four gates in the LSTM core; the operation generates a 4h \u00d7 n \u00d7 n tensor. The state-to-state recurrent component is then computed with a column-wise convolution Kss that has a kernel of size 2 \u00d7 1. The step takes the previous hidden and cell states, combines the contribution of the input-to-state component and produces the next hidden and cell states, as defined in Equation 3. The output feature map is then skewed back into an n\u00d7 n map by removing the offset positions. This computation is repeated for each of the two directions. Given the two output maps, to prevent the layer from seeing future pixels, the right output map is then shifted down by one row and added to the left output map.\nBesides reaching the full dependency field, the Diagonal BiLSTM has the additional advantage that it uses a convolutional kernel of size 2 \u00d7 1 that processes a minimal amount of information at each step yielding a highly nonlinear computation. Kernel sizes larger than 2 \u00d7 1 are not particularly useful as they do not broaden the already global receptive field of the Diagonal BiLSTM."}, {"heading": "3.3. Residual Connections", "text": "We train PixelRNNs of up to twelve layers of depth. As a means to both increase convergence speed and propagate signals more directly through the network, we deploy residual connections (He et al., 2015) from one LSTM layer to the next. Figure 4 (left) shows a diagram of the connections. The input map to the LSTM layer has 2h features. The input-to-state component reduces the number of fea-\ntures by producing h features per gate. After applying the recurrent layer, the output map is upsampled back to 2h features per position via a 1 \u00d7 1 convolution and the input map is added to the output map. This method is related to previous approaches that use gating along the depth of the recurrent network (Kalchbrenner et al., 2015; Zhang et al., 2016), but has the advantage of not requiring additional gates. Apart from residual connections, one can also use learnable skip connections from each layer to the output. In the experiments we evaluate the relative effectiveness of residual and layer-to-output skip connections."}, {"heading": "3.4. Masked Convolution", "text": "The h features for each input position at every layer in the network are split into three parts, each corresponding to one of the RGB channels. When predicting the R channel for the current pixel xi, only the generated pixels left and above of xi can be used as context. When predicting the G channel, the value of the R channel can also be used as context in addition to the previously generated pixels. Likewise, for the B channel, the values of both the R and G channels can be used. To restrict connections in the network to these dependencies, we apply a mask to the inputto-state convolutions and to other purely convolutional layers in a PixelRNN.\nWe use two types of masks that we indicate with mask A and mask B, as shown in Figure 4. Mask A is applied only to the first convolutional layer in a PixelRNN and restricts the connections to those neighboring pixels and to those colors in the current pixels that have already been predicted. On the other hand, mask B is applied to all the subsequent input-to-state convolutional transitions and relaxes the restrictions of mask A by also allowing the connection from a color to itself. The masks can be easily implemented by zeroing out the corresponding weights in the input-to-state convolutions after each update. Figure 4 (right) shows the connections in each of the two masks.\nSimilar masks have also been used in (variational) autoencoders (Gregor et al., 2014; Germain et al., 2015)."}, {"heading": "3.5. PixelCNN", "text": "The Row and Diagonal LSTM layers have a potentially unbounded dependency range within their receptive field. This comes with a computational cost as each state needs to be computed sequentially. One simple workaround is to make the receptive field large, but not unbounded. We can use standard convolutional layers to capture a bounded receptive field and compute features for all pixel positions at once. The PixelCNN uses multiple convolutional layers that preserve the spatial resolution; pooling layers are not used. Masks are adopted in the convolutions to avoid seeing the future context. Note that the advantage of parallelization of the PixelCNN over the PixelRNN is only available during training or during evaluating of test images. The image generation process is sequential for both kinds of networks, as each sampled pixel needs to be given as input back into the network."}, {"heading": "3.6. Multi-Scale PixelRNN", "text": "The Multi-Scale PixelRNN is composed of an unconditional PixelRNN and one or more conditional PixelRNNs. The unconditional network first generates a smaller s \u00d7 s image just like a standard PixelRNN described above, where s is a smaller integer that divides n. The conditional network then takes the s \u00d7 s image as an additional input and generates a larger n\u00d7 n image.\nThe conditional network is similar to a standard PixelRNN, but each of its layers is biased with an upsampled version of the small s\u00d7 s image. The upsampling and biasing processes are defined as follows. In the upsampling process, one uses a convolutional network with deconvolutional layers to construct an enlarged feature map of size c\u00d7 n\u00d7 n, where c is the number of features in the output map of the upsampling network. Then, in the biasing process, for each layer in the conditional PixelRNN, one simply maps the c\u00d7 n\u00d7 n conditioning map into a 4h\u00d7 n\u00d7 n map that is added to the input-to-state map of the corresponding layer; this is performed using a 1\u00d7 1 unmasked convolution. The larger n\u00d7 n image is then generated as usual."}, {"heading": "4. Specifications of Models", "text": "In this section we give the specifications of the PixelRNNs used in the experiments. We have four types of networks: the PixelRNN based on Row LSTM, the one based on Diagonal BiLSTM, the fully convolutional one and the MultiScale one.\nTable 1 specifies each layer in the single-scale networks. The first layer is a 7 \u00d7 7 convolution that uses the mask\nof type A, which prevents the network from seeing (as input) the color that it is about to predict. The two types of LSTM networks then use a variable number of recurrent layers. The input-to-state convolution in this layer uses a mask of type B, whereas the state-to-state convolution is not masked. The PixelCNN uses convolutions of size 3\u00d73 with a mask of type B. The top feature map is then passed through a couple of layers consisting of a Rectified Linear Unit (ReLU) and a 1 \u00d7 1 convolution. For the CIFAR-10 and ImageNet experiments, these layers have 1024 feature maps; for the MNIST experiment, the layers have 32 feature maps. Residual and layer-to-output connections are used across the layers of all three networks.\nThe networks used in the experiments have the following hyperparameters. For MNIST we use a Diagonal BiLSTM with 7 layers and h = 16 number of hidden units (Section 3.3 and Figure 4 left). For CIFAR-10 the Row and Diagonal BiLSTMs have 12 layers and a number of h = 128 units. The PixelCNN has 15 layers and h = 128. For 32 \u00d7 32 ImageNet we adopt a 12 layer Row LSTM with h = 384 units and for 64 \u00d7 64 ImageNet we use a 4 layer Row LSTM with h = 512 units; the latter model does not use residual connections."}, {"heading": "5. Experiments", "text": "In this section we describe our experiments and results. We begin by describing the way we evaluate and compare our results. In Section 5.2 we give details about the training. Then we give results on the relative effectiveness of architectural components and our best results on the MNIST, CIFAR-10 and ImageNet datasets."}, {"heading": "5.1. Evaluation", "text": "All our models are trained and evaluated on the loglikelihood loss function coming from a discrete distribution. Although natural image data is usually modeled with continuous distributions using density functions, we can compare our results with previous art in the following way. In the literature it is currently best practice to add realvalued noise to the pixel values to dequantize the data when using density functions (Uria et al., 2013). When uniform noise is added (with values in the interval [0, 1]), then the log-likelihoods of continuous and discrete models are directly comparable (Theis et al., 2015). In our case, we can use the values from the discrete distribution as a piecewiseuniform continuous function that has a constant value for every interval [i, i+ 1], i = 1, 2, . . . 256. This corresponding distribution will have the same log-likelihood (on data with added noise) as the original discrete distribution (on discrete data).\nFor MNIST we report the negative log-likelihood in nats as\nit is common practice in literature. For CIFAR-10 and ImageNet we report negative log-likelihoods in bits per dimension. The total discrete log-likelihood is normalized by the dimensionality of the images (e.g., 32\u00d7 32\u00d7 3 = 3072 for CIFAR-10). These numbers are interpretable as the number of bits that a compression scheme based on this model would need to compress every RGB color value (van den Oord & Schrauwen, 2014b; Theis et al., 2015); in practice there is also a small overhead due to arithmetic coding."}, {"heading": "5.2. Training Details", "text": "Our models are trained on GPUs using the Torch toolbox. From the different parameter update rules tried, RMSProp gives best convergence performance and is used for all experiments. The learning rate schedules were manually set for every dataset to the highest values that allowed fast convergence. The batch sizes also vary for different datasets. For smaller datasets such as MNIST and CIFAR-10 we use smaller batch sizes of 16 images as this seems to regularize the models. For ImageNet we use as large a batch size as allowed by the GPU memory; this corresponds to 64 images/batch for 32\u00d7 32 ImageNet, and 32 images/batch for 64 \u00d7 64 ImageNet. Apart from scaling and centering the images at the input of the network, we don\u2019t use any other preprocessing or augmentation. For the multinomial loss function we use the raw pixel color values as categories. For all the PixelRNN models, we learn the initial recurrent state of the network."}, {"heading": "5.3. Discrete Softmax Distribution", "text": "Apart from being intuitive and easy to implement, we find that using a softmax on discrete pixel values instead of a mixture density approach on continuous pixel values gives better results. For the Row LSTM model with a softmax output distribution we obtain 3.06 bits/dim on the CIFAR10 validation set. For the same model with a Mixture of Conditional Gaussian Scale Mixtures (MCGSM) (Theis & Bethge, 2015) we obtain 3.22 bits/dim.\nIn Figure 5 we show a few softmax activations from the model. Although we don\u2019t embed prior information about the meaning or relations of the 256 color categories, e.g.\nthat pixel values 51 and 52 are neighbors, the distributions predicted by the model are meaningful and can be multimodal, skewed, peaked or long tailed. Also note that the color values 0 and 255 often get a much higher probability as they are generally more frequent. Another advantage of the discrete distribution is that we do not worry about parts of the distribution mass lying outside the interval [0, 255], which is something that typically happens with continuous distributions."}, {"heading": "5.4. Residual Connections", "text": "Another core component of the networks is residual connections. In Table 2 we show the results of having residual connections, having standard skip connections or having both, in the 12-layer CIFAR-10 Row LSTM model. We see that using residual connections is as effective as using skip connections; using both is also effective and preserves the advantage.\nWhen using both the residual and skip connections, we see in Table 3 that performance of the Row LSTM improves with increased depth. This holds for up to the 12 LSTM layers that we tried."}, {"heading": "5.5. MNIST", "text": "Although the goal of our work was to model natural images on a large scale, we also tried our model on the binary version (Salakhutdinov & Murray, 2008) of MNIST (LeCun et al., 1998) as it is a good sanity check and there is a lot of previous art on this dataset to compare with. In Table 4 we report the performance of the Diagonal BiLSTM model and that of previous published results. To our knowledge this is the best reported result on MNIST so far."}, {"heading": "5.6. CIFAR-10", "text": "Next we test our models on the CIFAR-10 dataset (Krizhevsky, 2009). Table 5 lists the results of our models and that of previously published approaches. For the proposed networks, the Diagonal BiLSTM has the best performance, followed by the Row LSTM and the Pixel-\nCNN. This coincides with the size of the respective receptive fields: the Diagonal BiLSTM has a global view, the Row LSTM has a partially occluded view and the PixelCNN sees the fewest pixels in the context. This suggests that effectively capturing a large receptive field is important. Figure 6 (left) shows CIFAR-10 samples generated from the Diagonal BiLSTM.\nImage size NLL Validation (Train)"}, {"heading": "5.7. ImageNet", "text": "Although to our knowledge the are no published results on the ILSVRC ImageNet dataset (Russakovsky et al., 2015) that we can compare our models with, we give our ImageNet log-likelihood performance in Table 6. On ImageNet the current PixelRNNs do not appear to overfit, as we saw that their validation performance improved with size and depth. The main constraint on model size are currently computation time and GPU memory.\nNote that the ImageNet models are in general less compressible than the CIFAR-10 images. ImageNet has greater variety of images, and the images were most likely resized with a different algorithm than the one we used for images. The ImageNet images are less blurry, which means neighboring pixels are less correlated to each other and thus less predictable. Because the downsampling method can influence the compression performance, we will release the used downsampled images.\nFigure 6 (right) shows 32 \u00d7 32 samples drawn from our model trained on ImageNet. Figure 7 shows 64 \u00d7 64 sam-\nples from the same model with and without multi-scale conditioning. Finally, we also show completions sampled from the model in Figure 8."}, {"heading": "6. Conclusions", "text": "In this paper we significantly improve and build upon deep recurrent neural networks as generative models for natural images. We have described novel two-dimensional LSTM layers: the Row LSTM and the Diagonal BiLSTM, that scale more easily to larger datasets. The models were trained to model the raw RGB pixel values of images. We treated the pixel values as discrete random variables by using a softmax layer in the conditional distributions. We employed masked convolutions to allow PixelRNNs to model full dependencies between the color channels. We proposed and evaluated architectural improvements in these models resulting in PixelRNNs with up to 12 LSTM layers.\nWe have shown that the PixelRNNs significantly improve the state of the art on the Binary MNIST and CIFAR-10 datasets. We also provide new benchmarks for generative image modeling on the ImageNet dataset. Based on the samples and completions drawn from the models we can conclude that the PixelRNNs are able to model both spatially local and long-range correlations and are able to produce images that are sharp and coherent. Given that these models improve as we make them larger and that there is practically unlimited data available to train on, more computation and larger models are likely to further improve the results."}, {"heading": "Acknowledgements", "text": "The authors would like to thank Shakir Mohamed and Guillaume Desjardins for helpful input on this paper and Lucas Theis, Alex Graves, Karen Simonyan, Lasse Espeholt, Danilo Rezende, Karol Gregor and Ivo Danihelka for insightful discussions."}], "references": [{"title": "NICE: Non-linear independent components estimation", "author": ["Dinh", "Laurent", "Krueger", "David", "Bengio", "Yoshua"], "venue": "arXiv preprint arXiv:1410.8516,", "citeRegEx": "Dinh et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Dinh et al\\.", "year": 2014}, {"title": "MADE: Masked autoencoder for distribution estimation", "author": ["Germain", "Mathieu", "Gregor", "Karol", "Murray", "Iain", "Larochelle", "Hugo"], "venue": "arXiv preprint arXiv:1502.03509,", "citeRegEx": "Germain et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Germain et al\\.", "year": 2015}, {"title": "Generating sequences with recurrent neural networks", "author": ["Graves", "Alex"], "venue": "arXiv preprint arXiv:1308.0850,", "citeRegEx": "Graves and Alex.,? \\Q2013\\E", "shortCiteRegEx": "Graves and Alex.", "year": 2013}, {"title": "Deep autoregressive networks", "author": ["Gregor", "Karol", "Danihelka", "Ivo", "Mnih", "Andriy", "Blundell", "Charles", "Wierstra", "Daan"], "venue": "In Proceedings of the 31st International Conference on Machine Learning,", "citeRegEx": "Gregor et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2014}, {"title": "DRAW: A recurrent neural network for image generation", "author": ["Gregor", "Karol", "Danihelka", "Ivo", "Graves", "Alex", "Wierstra", "Daan"], "venue": "Proceedings of the 32nd International Conference on Machine Learning,", "citeRegEx": "Gregor et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2015}, {"title": "Deep residual learning for image recognition", "author": ["He", "Kaiming", "Zhang", "Xiangyu", "Ren", "Shaoqing", "Sun", "Jian"], "venue": "arXiv preprint arXiv:1512.03385,", "citeRegEx": "He et al\\.,? \\Q2015\\E", "shortCiteRegEx": "He et al\\.", "year": 2015}, {"title": "Long shortterm memory", "author": ["Hochreiter", "Sepp", "Schmidhuber", "J\u00fcrgen"], "venue": "Neural computation,", "citeRegEx": "Hochreiter et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter et al\\.", "year": 1997}, {"title": "Recurrent continuous translation models", "author": ["Kalchbrenner", "Nal", "Blunsom", "Phil"], "venue": "In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "Kalchbrenner et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Kalchbrenner et al\\.", "year": 2013}, {"title": "Grid long short-term memory", "author": ["Kalchbrenner", "Nal", "Danihelka", "Ivo", "Graves", "Alex"], "venue": "arXiv preprint arXiv:1507.01526,", "citeRegEx": "Kalchbrenner et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Kalchbrenner et al\\.", "year": 2015}, {"title": "Auto-encoding variational bayes", "author": ["Kingma", "Diederik P", "Welling", "Max"], "venue": "arXiv preprint arXiv:1312.6114,", "citeRegEx": "Kingma et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2013}, {"title": "Learning multiple layers of features from tiny images", "author": ["Krizhevsky", "Alex"], "venue": null, "citeRegEx": "Krizhevsky and Alex.,? \\Q2009\\E", "shortCiteRegEx": "Krizhevsky and Alex.", "year": 2009}, {"title": "The neural autoregressive distribution estimator", "author": ["Larochelle", "Hugo", "Murray", "Iain"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "Larochelle et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Larochelle et al\\.", "year": 2011}, {"title": "Gradient-based learning applied to document recognition", "author": ["LeCun", "Yann", "Bottou", "L\u00e9on", "Bengio", "Yoshua", "Haffner", "Patrick"], "venue": "Proceedings of the IEEE,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Evaluating probabilities under high-dimensional latent variable models", "author": ["Murray", "Iain", "Salakhutdinov", "Ruslan R"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Murray et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Murray et al\\.", "year": 2009}, {"title": "Connectionist learning of belief networks", "author": ["Neal", "Radford M"], "venue": "Artificial intelligence,", "citeRegEx": "Neal and M.,? \\Q1992\\E", "shortCiteRegEx": "Neal and M.", "year": 1992}, {"title": "Iterative neural autoregressive distribution estimator NADE-k", "author": ["Raiko", "Tapani", "Li", "Yao", "Cho", "Kyunghyun", "Bengio", "Yoshua"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Raiko et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Raiko et al\\.", "year": 2014}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["Rezende", "Danilo J", "Mohamed", "Shakir", "Wierstra", "Daan"], "venue": "In Proceedings of the 31st International Conference on Machine Learning,", "citeRegEx": "Rezende et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rezende et al\\.", "year": 2014}, {"title": "Deep boltzmann machines", "author": ["Salakhutdinov", "Ruslan", "Hinton", "Geoffrey E"], "venue": "In International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "Salakhutdinov et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Salakhutdinov et al\\.", "year": 2009}, {"title": "On the quantitative analysis of deep belief networks", "author": ["Salakhutdinov", "Ruslan", "Murray", "Iain"], "venue": "In Proceedings of the 25th international conference on Machine learning,", "citeRegEx": "Salakhutdinov et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Salakhutdinov et al\\.", "year": 2008}, {"title": "Markov chain monte carlo and variational inference: Bridging the gap", "author": ["Salimans", "Tim", "Kingma", "Diederik P", "Welling", "Max"], "venue": "Proceedings of the 32nd International Conference on Machine Learning,", "citeRegEx": "Salimans et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Salimans et al\\.", "year": 2015}, {"title": "Deep unsupervised learning using nonequilibrium thermodynamics", "author": ["Sohl-Dickstein", "Jascha", "Weiss", "Eric A", "Maheswaranathan", "Niru", "Ganguli", "Surya"], "venue": "Proceedings of the 32nd International Conference on Machine Learning,", "citeRegEx": "Sohl.Dickstein et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Sohl.Dickstein et al\\.", "year": 2015}, {"title": "Parallel multi-dimensional lstm, with application to fast biomedical volumetric image segmentation", "author": ["Stollenga", "Marijn F", "Byeon", "Wonmin", "Liwicki", "Marcus", "Schmidhuber", "Juergen"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "Stollenga et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Stollenga et al\\.", "year": 2015}, {"title": "Generating text with recurrent neural networks", "author": ["Sutskever", "Ilya", "Martens", "James", "Hinton", "Geoffrey E"], "venue": "In Proceedings of the 28th International Conference on Machine Learning,", "citeRegEx": "Sutskever et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2011}, {"title": "Generative image modeling using spatial LSTMs", "author": ["Theis", "Lucas", "Bethge", "Matthias"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Theis et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Theis et al\\.", "year": 2015}, {"title": "A note on the evaluation of generative models", "author": ["Theis", "Lucas", "van den Oord", "A\u00e4ron", "Bethge", "Matthias"], "venue": "arXiv preprint arXiv:1511.01844,", "citeRegEx": "Theis et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Theis et al\\.", "year": 2015}, {"title": "RNADE: The real-valued neural autoregressive densityestimator", "author": ["Uria", "Benigno", "Murray", "Iain", "Larochelle", "Hugo"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Uria et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Uria et al\\.", "year": 2013}, {"title": "Factoring variations in natural images with deep gaussian mixture models", "author": ["van den Oord", "A\u00e4ron", "Schrauwen", "Benjamin"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Oord et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Oord et al\\.", "year": 2014}, {"title": "The student-t mixture as a natural image patch prior with application to image compression", "author": ["van den Oord", "A\u00e4ron", "Schrauwen", "Benjamin"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "Oord et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Oord et al\\.", "year": 2014}, {"title": "Highway long shortterm memory RNNs for distant speech recognition", "author": ["Zhang", "Yu", "Chen", "Guoguo", "Dong", "Yao", "Kaisheng", "Khudanpur", "Sanjeev", "Glass", "James"], "venue": "In Proceedings of the International Conference on Acoustics, Speech and Signal Processing,", "citeRegEx": "Zhang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 16, "context": "Most work focuses on stochastic latent variable models (Rezende et al., 2014; Kingma & Welling, 2013) that aim to extract meaningful representations, but often come with an intractable inference step that can hinder their performance.", "startOffset": 55, "endOffset": 101}, {"referenceID": 22, "context": "RNNs have been shown to excel at hard sequence problems ranging from handwriting generation (Graves, 2013), to character prediction (Sutskever et al., 2011) and to machine translation (Kalchbrenner & Blunsom, 2013).", "startOffset": 132, "endOffset": 156}, {"referenceID": 21, "context": "The first type is the Row LSTM layer where the convolution is applied along each row; a similar technique is described in (Stollenga et al., 2015).", "startOffset": 122, "endOffset": 146}, {"referenceID": 5, "context": "The networks also incorporate residual connections (He et al., 2015) around LSTM layers; we observe that this helps with training of the PixelRNN for up to twelve layers of depth.", "startOffset": 51, "endOffset": 68}, {"referenceID": 3, "context": ", Theis & Bethge (2015); Gregor et al. (2014)), we model the pixels as discrete values using a multinomial distribution implemented with a simple softmax layer.", "startOffset": 25, "endOffset": 46}, {"referenceID": 25, "context": "Uria et al. (2014); Theis & Bethge (2015)).", "startOffset": 0, "endOffset": 19}, {"referenceID": 25, "context": "Uria et al. (2014); Theis & Bethge (2015)).", "startOffset": 0, "endOffset": 42}, {"referenceID": 5, "context": "As a means to both increase convergence speed and propagate signals more directly through the network, we deploy residual connections (He et al., 2015) from one LSTM layer to the next.", "startOffset": 134, "endOffset": 151}, {"referenceID": 8, "context": "This method is related to previous approaches that use gating along the depth of the recurrent network (Kalchbrenner et al., 2015; Zhang et al., 2016), but has the advantage of not requiring additional gates.", "startOffset": 103, "endOffset": 150}, {"referenceID": 28, "context": "This method is related to previous approaches that use gating along the depth of the recurrent network (Kalchbrenner et al., 2015; Zhang et al., 2016), but has the advantage of not requiring additional gates.", "startOffset": 103, "endOffset": 150}, {"referenceID": 3, "context": "Similar masks have also been used in (variational) autoencoders (Gregor et al., 2014; Germain et al., 2015).", "startOffset": 64, "endOffset": 107}, {"referenceID": 1, "context": "Similar masks have also been used in (variational) autoencoders (Gregor et al., 2014; Germain et al., 2015).", "startOffset": 64, "endOffset": 107}, {"referenceID": 25, "context": "In the literature it is currently best practice to add realvalued noise to the pixel values to dequantize the data when using density functions (Uria et al., 2013).", "startOffset": 144, "endOffset": 163}, {"referenceID": 23, "context": "When uniform noise is added (with values in the interval [0, 1]), then the log-likelihoods of continuous and discrete models are directly comparable (Theis et al., 2015).", "startOffset": 149, "endOffset": 169}, {"referenceID": 23, "context": "These numbers are interpretable as the number of bits that a compression scheme based on this model would need to compress every RGB color value (van den Oord & Schrauwen, 2014b; Theis et al., 2015); in practice there is also a small overhead due to arithmetic coding.", "startOffset": 145, "endOffset": 198}, {"referenceID": 12, "context": "Although the goal of our work was to model natural images on a large scale, we also tried our model on the binary version (Salakhutdinov & Murray, 2008) of MNIST (LeCun et al., 1998) as it is a good sanity check and there is a lot of previous art on this dataset to compare with.", "startOffset": 162, "endOffset": 182}, {"referenceID": 15, "context": ", 2014), [4] (Raiko et al., 2014), [5] (Rezende et al.", "startOffset": 13, "endOffset": 33}, {"referenceID": 16, "context": ", 2014), [5] (Rezende et al., 2014), [6] (Salimans et al.", "startOffset": 13, "endOffset": 35}, {"referenceID": 19, "context": ", 2014), [6] (Salimans et al., 2015), [7] (Gregor et al.", "startOffset": 13, "endOffset": 36}, {"referenceID": 3, "context": ", 2015), [7] (Gregor et al., 2014), [8] (Germain et al.", "startOffset": 13, "endOffset": 34}, {"referenceID": 1, "context": ", 2014), [8] (Germain et al., 2015), [9] (Gregor et al.", "startOffset": 13, "endOffset": 35}, {"referenceID": 4, "context": ", 2015), [9] (Gregor et al., 2015).", "startOffset": 13, "endOffset": 34}, {"referenceID": 0, "context": "[1] (Dinh et al., 2014), [2] (Sohl-Dickstein et al.", "startOffset": 4, "endOffset": 23}, {"referenceID": 20, "context": ", 2014), [2] (Sohl-Dickstein et al., 2015), [3] (van den Oord & Schrauwen, 2014a).", "startOffset": 13, "endOffset": 42}], "year": 2016, "abstractText": "Modeling the distribution of natural images is a landmark problem in unsupervised learning. This task requires an image model that is at once expressive, tractable and scalable. We present a deep neural network that sequentially predicts the pixels in an image along the two spatial dimensions. Our method models the discrete probability of the raw pixel values and encodes the complete set of dependencies in the image. Architectural novelties include fast twodimensional recurrent layers and an effective use of residual connections in deep recurrent networks. We achieve log-likelihood scores on natural images that are considerably better than the previous state of the art. Our main results also provide benchmarks on the diverse ImageNet dataset. Samples generated from the model appear crisp, varied and globally coherent.", "creator": "LaTeX with hyperref package"}}}