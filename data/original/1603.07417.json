{"id": "1603.07417", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Mar-2016", "title": "Load Disaggregation Based on Aided Linear Integer Programming", "abstract": "Load disaggregation based on aided linear integer programming (ALIP) is proposed. We start with a conventional linear integer programming (IP) based disaggregation and enhance it in several ways. The enhancements include additional constraints, correction based on a state diagram, median filtering, and linear programming-based refinement. With the aid of these enhancements, the performance of IP-based disaggregation is significantly improved. The proposed ALIP system relies only on the instantaneous load samples instead of waveform signatures, and hence does not crucially depend on high sampling frequency. Experimental results show that the proposed ALIP system performs better than the conventional IP-based load disaggregation system.", "histories": [["v1", "Thu, 24 Mar 2016 02:54:45 GMT  (124kb,D)", "http://arxiv.org/abs/1603.07417v1", null], ["v2", "Thu, 25 Aug 2016 00:27:59 GMT  (195kb,D)", "http://arxiv.org/abs/1603.07417v2", null], ["v3", "Tue, 30 Aug 2016 16:32:57 GMT  (196kb,D)", "http://arxiv.org/abs/1603.07417v3", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["md zulfiquar ali bhotto", "stephen makonin", "ivan v bajic"], "accepted": false, "id": "1603.07417"}, "pdf": {"name": "1603.07417.pdf", "metadata": {"source": "CRF", "title": "Load Disaggregation Based on Aided Linear Integer Programming", "authors": ["Md. Zulfiquar", "Ali Bhotto", "Stephen Makonin", "Ivan V. Baji\u0107"], "emails": ["mbhotto@sfu.ca,", "smakonin@sfu.ca,", "ibajic@ensc.sfu.ca)."], "sections": [{"heading": null, "text": "Index Terms\u2014Integer programming, combinatorial optimization, linear programming, load disaggregation, NILM, median filter\nI. INTRODUCTION\nLoad disaggregation or non-intrusive load monitoring (NILM) is the process of finding out how much each appliance within a household is consuming when only the aggregate current or power reading is available [1]. Such readings are now available through smart meters, which have been, or are being, installed by most power utilities.\nMost disaggregation methods have focused on using machine learning approaches such as clustering [2], fuzzy systems [3], and hidden Markov models [4], [5], [6], [7], [8]. Such methods might lead to practical solutions when large and sufficiently representative datasets become available for training, which is still not the case. Alternative approaches such as combinatorial optimization or integer programming (IP) have been much less explored. Two notable earlier works on IP-based disaggregation include Egarter et al. [9] and Suzuki et al. [10]. Egarter et al. formulated disaggregation as a modified knapsack problem and proposed a solution using an evolutionary algorithm. From a practical standpoint, the drawback here is that evolutionary algorithms potentially have a long execution time, and their stochastic nature may lead to different solutions in different runs, even on the same data. Our goal here is to develop a simpler and more principled approach that gives repeatable results.\nThe other IP-based disaggregation proposal was by Suzuki et al. [10] in 2008 using high-frequency sampled current readings. We use the work of Suzuki et al. as a starting point and enhance it in multiple ways to obtain\nManuscript received: Mar. 2016. The authors are with the School of Engineering Science, Simon Fraser University, Burnaby, BC V5A 1S6, Canada (e-mail: mbhotto@sfu.ca, smakonin@sfu.ca, ibajic@ensc.sfu.ca).\na significant accuracy advantage. The enhancements include additional constraints, correction based on a state diagram, median filtering, and linear programming-based refinement. Our method also works on low-frequency sampled data, which is a more realistic solution for current smart meters that report power readings at sampling intervals of 8\u201315 seconds or longer.\nThe remainder of the paper is organized as follows. We mathematically define the problem of load disaggregation as a quadratic integer programming (IP) problem in Section II and present its modification to a mixed-integer linear IP problem. We propose several enhancements to IP-based disaggregation in Section III, which is our main contribution. A number of experimental results with a comparison to previous works are reported in Section IV, followed by conclusions in Section V."}, {"heading": "II. LOAD DISAGGREGATION AS INTEGER PROGRAMMING", "text": "Consider a household with n appliances, where the i-th appliance (i = 1, 2, . . . , n) has li non-OFF states. For example, a conventional light bulb would have one non-OFF state. Vector ri \u2208 Rli contains the voltampere (VA) ratings of the li non-OFF states of the i-th appliance. Let m = \u2211n i=1 li. With this we construct vector r = [r1; r2; \u00b7 \u00b7 \u00b7 ; rn] that contains all VA ratings of all n appliances. For the k-th time instant, the indicator of each non-OFF state is stored in a vector bk as\nbk[i] \u2208 {1, 0} for i = 1, 2, . . . ,m, (1)\nwith 1 denoting that the particular state is active and 0 denoting the state is inactive.\nAt the k-th time instant, the smart meter yields the total VA reading zk, which is the sum of all power drawn by n appliances at that time. This can be expressed as\nsk = F diag(bk)r (2) zk = h tsk (3)\nwhere h = [1; 1; \u00b7 \u00b7 \u00b7 ; 1] \u2208 Rn and vector sk \u2208 Rn contains VA draws of each appliance that is turned ON. The binary matrix F \u2208 Rn\u00d7m in (2) is a block diagonal matrix given as\nF =  1t1 0 t \u00b7 \u00b7 \u00b7 0t 0t 1t2 \u00b7 \u00b7 \u00b7 0t ... ... . . . 0t\n0t 0t \u00b7 \u00b7 \u00b7 1tn  where 1i \u2208 Rli is a unity vector for i = 1, 2, . . . , n. Note that 1i is of the same size as ri for i = 1, 2, . . . , n.\nThe objective of load disaggregation is to find which appliance states are active at the k-th time instant. Specifically,\nar X\niv :1\n60 3.\n07 41\n7v 1\n[ cs\n.A I]\n2 4\nM ar\n2 01\n6\n2 the goal is to find bk in (2) by using the known quantities zk, F, and r. Similarly to [10], load disaggregation can be formulated as an integer programming (IP) problem\nminimize (zk \u2212 htF diag(bk) r) 2 .\nbk (4)\nLike any IP, this problem can be solved by exhaustive search over all possibilities for bk, however this approach can be prohibitive even for a moderate number of appliances. The alternative is to explore more efficient IP solvers [11].\nBefore proceeding to enhancements, we reformulate (4) as a mixed-integrer linear IP. Let qj = \u2211j\u22121 i=1 li. Since any appliance must be in exactly one state at any given time and vector bk is an indicator for non-OFF states, we can formulate this constraint as\nbk[qj + 1] + bk[qj + 2] + \u00b7 \u00b7 \u00b7+ bk[qj + lj ] \u2264 1\nfor j = 1, 2, ..., n. Let v = r (Fth) where denotes the element-wise product. Further, let v\u030c = [0; v], u1 = [1; 0], f = [1; 0], and xk = [\u03b4; bk], where \u03b4 is an auxiliary real variable. We can now rewrite the quadratic IP in (4) as a mixed-integer linear IP\nminimize f txkxk (5)\nsubject to\nAxk \u2264 e (6) xk[i] \u2208 {1, 0} for i = 2, 3, . . . ,m+ 1 (7)\nwhere matrix A and vector e in (6) are given by\nA = \u2212(v\u030c + u1)t(v\u030c \u2212 u1)t F\u030c  and e = \u2212zkzk 1  and the rows of the binary matrix F\u030c are copies of the rows of matrix F that have more than one nonzero element. Once xk is found, bk is obtained as the last m elements of xk. In this formulation, the problem in (5)-(7) can be solved by intlinprog in Matlab.\nThe solution of (5)\u2013(7) leads to correct disaggregation only if the elements in r are not binary combinations (linear combinations with coefficients 0 or 1) of each other, and the deviations from the steady-state power/current draw during transients do not overlap with the steady-state draws of other appliances, or their combinations. In practice, these criteria are rarely met, so disaggregation based on (5)\u2013(7) would not yield satisfactory results. In the next section we introduce several enhancements that are meant to overcome the aforementioned limitations of the above IP disaggregation."}, {"heading": "III. AIDED LINEAR IP FOR LOAD DISAGGREGATION", "text": "The proposed aided linear IP (ALIP) for load disaggregation incorporates several enhancements to the IP given in (5)\u2013(7), each of which is discussed next."}, {"heading": "A. Additional Constraints", "text": "The first enhancement involves additional constraints that help resolve ambiguities related to the possible non-uniqueness\nof the solution to the IP. First, consider appliances like refrigerator, surveillance camera, smoke detector, heatpump, etc., that happen to switch between the \u201csleep mode\u201d and one or more higher-power states. In other words, these appliances always draw some power. We can incorporate this additional information as an equality constraint to be added to (5)\u2013(7),\nAeqxk = 1 (8)\nwhere each row in the binary matrix Aeq has unity elements only in those positions that correspond to the states of those appliances in vector xk that remain turned ON at all time.\nNext, consider the scenario where the VA rating of a given state of an appliance is equal to the sum of the VA ratings of some of the states of other appliances. For example, an appliance H1 could have a VA rating 300 in one of its states, and appliances H2 and H3 could have VA ratings of 100 and 200, respectively, in some of their states. Then a reading zk = 300 could be interpreted in two ways - either H1 is ON, or H2 and H3 are simultaneously ON. To break such ties, we assume the minimum number of appliances is ON at any given time - a heuristic that does not always hold, but turns out to be surprisingly good based on empirical evidence in existing datasets. This can be incorporated into the IP by using an additional row in the binary A and an additional 1 in e in (6). The additional row in A would have unity elements only in those positions that correspond to the states where the VA ratings become binary combinations of each other.\nFinally, consider the scenario where the VA rating of a given appliance (say H1) is equal to the amount by which the steadystate VA rating of another appliance (say H2) differs from its transient VA measurement. The transient reading may cause the IP solver to declare both H1 and H2 as ON, even though only H2 is in the ON transient. Such situation can also be avoided by using an additional row in the binary matrix A and an additional 1 in e in (6), where the additional row in A has unity elements only in those positions that correspond to the states whose combinations produce a transient rating of another appliance."}, {"heading": "B. Correction Based on State Transition Diagrams", "text": "Many appliances operate as finite state machines and their possible state transitions can be described by a state transition diagram. For example, the fridge (FRG) appliance from the dataset in [12] has the state transition diagram shown in Fig. 1. This offers the possibility to correct the output of an IP solver if it happens to violate the state transition diagram. For example, if FRG was in state s1 at time k \u2212 1, then at time k it can only be in s1 or s2. If the IP solver output suggests otherwise, we know there must be an error, and can therefore select either s1 or s2, depending on which of the two options yields lower cost f txk in (5). The same type of correction can also be applied backwards (for example, the only way to get to s3 is either from s2 or s3), although we did not incorporate such processing in our experiments."}, {"heading": "C. Median Filtering", "text": "Median filtering can help filter out implausible events such as frequent switching between states, which may occur in the\n3 s 1 s 2\ns 4\ns 3\nFig. 1. State transition diagram of FRG from [12].\nIP solver output if the VA ratings of a particular appliance are much smaller than the total VA reading zk. Consider the appliance B1E from [12], which has a fully-connected 2-state diagram (Fig. 1 with states s3 and s4 deleted). Although any transition between these two states is possible, it is implausible that the appliance changes state at each sampling instant; we expect it to stay in a state for at least a few sampling instants. To enforce this, we apply the correction rule\ns\u0302k\u2212L = { s1 if s\u0302k\u2212L = s2 and med(s\u0302k, s\u0302k\u22121, . . . , s\u0302k\u2212L) = s1 s2 if s\u0302k\u2212L = s1 and med(s\u0302k, s\u0302k\u22121, . . . , s\u0302k\u2212L) = s2 (9) for k > L in the solution obtained by the IP solver. In other words, the state estimate at time k \u2212 L (i.e., s\u0302k\u2212L) is corrected based on the current state estimate s\u0302k and the corrected state does not affect the subsequent median filter outputs. Analogous corrections are applied to all states of all appliances."}, {"heading": "D. Linear Programming-Based Refinement", "text": "As mentioned before, vector r contains steady-state appliance VA ratings, which could be obtained from appliance data sheets or measurements. However, VA values for transients between states are usually much more difficult to obtain, and even if this were possible, incorporating transient state ratings into the model would tremendously increase the model size (i.e., number of states) m. Yet, if the sampling instance happens to catch a transient of one or more appliances, it could lead to incorrect solution of the IP. For this reason, we develop a method to refine the IP solution using only the minimum and maximum transient VA rating of each appliance, which is easier to obtain, either from the data sheet or measurement.\nLet rmin and rmax be the vectors of the same size as r that contain, respectively, the minimum and maximum transient VA ratings for each state of each appliance. Let vector p1 contain indices of r for which rmin(p1) = rmax(p1) = r(p1). Such states do not exhibit transient behavior. Let the vector p2 contain the indices of other, potentially transient, states, that have been declared active by the IP solver (i.e., the corresponding value in bk is 1). If p2 is non-empty, then the current measurement may contain transient states and the solution given by the IP solver needs to be refined.\nLet h = Fth and wk = bk r. To refine the solution, we solve the following problem\nminimize ( zk \u2212 htyk )2 yk\n(10)\nsubject to\nyk(p1) = wk(p1) (11) rmin(p2) \u2264 yk(p2) \u2264 rmax(p2) (12)\nConstraints (11)\u2013(12) force the non-transient states to match the steady-state ratings in r while requiring potentially transient states to be between the corresponding minimum and maximum.\nThe cost function can be simplified by subtracting out the steady-state portion of the measurement, z\u030ck = zk \u2212 h(p1)\ntwk(p1), and focusing on the transient portion of yk, i.e., y\u030ck = yk(p2). Then, applying a similar procedure as in Section II, the problem can be converted to a linear programming problem. With x\u030c = [\u03b4; y\u030ck], h\u030c = [0; 1], u1 = [1; 0], and f = [1; 0], the problem becomes\nminimize f tx\u030c x\u030c (13)\nsubject to Ax\u030c \u2264 e (14)\nwhere matrix A and vector e in (14) are given by\nA =  \u2212(h\u030c + u1)t (h\u030c\u2212 u1)t 0 \u2212I 0 I  and e =  \u2212z\u030ck z\u030ck \u2212r\u030cl r\u030cu  , respectively. This can solved by using a variety of linear programming solvers, such as linprog in Matlab."}, {"heading": "IV. EXPERIMENTAL RESULTS", "text": "We compare the performance of our ALIP method with the IP-based disaggregation from [10] in terms of two accuracy measures [13]: per appliance accuracy\nACi = 1\u2212 \u2211N\nk=1 |sk[i]\u2212 s\u0302k[i]| 2 \u2211N\nk=1 |sk[i]| and overall accuracy\nACC = 1\u2212 \u2211N k=1 \u2211n i=1 |sk[i]\u2212 s\u0302k[i]|\n2 \u2211N\nk=1 \u2211n i=1 |sk[i]|\nwhere sk[i] is the ground-truth VA value of the i-th appliance at time index k and s\u0302k[i] is the estimate computed from (2) with the vector bk obtained by the two methods. In all experiments, the steady-state VA ratings of each appliance were determined empirically from the datasets and used in both disaggregators. The maximum and minimum transient VA values for the ALIP disaggregator were also determined empirically. The aggregate VA totals for the appliances used in the experiments were computed by subtracting the sum of the remaining appliance readings from the main meter readings. For ALIP, the enhancements were applied in the same order in which they were presented in the previous section: additional\n4\nconstraints, state correction, median filtering and finally LPbased refinement. All ratings and parameters used in the experiments can be found in the Matlab code1, which can be used to reproduce all the results.\nIn Experiment 1 we used n = 4 appliances (CDE, FRG, HPE, and B1E) from the dataset in [12]. The number of states considered for the CDE, FRG, HPE, and B1E appliances were 3, 4, 4, and 2, respectively. The total number of samples considered was 72\u00d75040, which we partitioned into 72 blocks of data each containing N = 5040 samples. This number of samples covers 9 months worth of readings. We computed AC and ACC for each block. The AC curves obtained by using the IP and proposed ALIP disaggregators for CDE, FRG, and B1E appliances are illustrated in Fig. 2, along with the ACC curves. We have not illustrated AC curves for HPE, since both disaggregators produced very similar curves for this appliance.\nIt is seen from the AC, CDE plots (top-left in Fig. 2) that ALIP performs better than IP consistently in all blocks. The same is true for B1E (bottom-left in Fig. 2). From the AC, FRG plots it is seen that the ALIP performs considerably better than IP in many blocks, while IP performs marginally better in some blocks. This is because FRG has occasional impulsive VA readings which get filtered out by ALIP but not by IP. Overall, however, ALIP disaggregates FRG better than IP. From the ACC plots (bottom-right of Fig. 2), it can be seen the ALIP disaggregator is overall more accurate than the IP disaggregator - usually by 5\u20138%, and in some cases by up to 20%. The AC values obtained over the whole 9 months worth of data are given in Table I, while the overall ACC measure for this and other experiments is given in Table VIII. As seen in these tables, ALIP outperforms IP on each appliance, as well as overall.\n1http://www.sfu.ca/\u223cibajic/software/NILM-TCAS.rar\nIn Experiment 2 we used n = 7 appliances (OVN, RFG, DSH, MIC, DRY, BTH, and DIF) from house 1 of the REDD dataset [4], with m = 13 states. We downsampled the data by a factor 20 to obtain the samples at 1-minute intervals. The AC values are given in Table II and the overall ACC in Table VIII. Again, ALIP performs better than IP on all appliances individually, as well as overall.\nIn Experiment 3 we used n = 6 appliances (KTC, LTE, STV, MIC, DRY, and DSH) from house 2 in [4], with m = 17 states. We downsampled the data by a factor 5 to obtain the samples at 15-second intervals. The AC values are given in Table III. As seen in the results, ALIP performs significantly better than IP on all appliances except DRY. This is because DRY has a high VA rating and its occurrence is quite sparse. As a result, a few more false positives of ALIP as compared to the IP disaggregator reduce its accuracy measure on DRY. Nonetheless, the accuracy of ALIP on DRY is still acceptable and its overall accuracy is significantly better than that of IP, as seen in Table VIII.\nIn Experiment 4 we used n = 7 appliances (KTC, LTE, STV, MIC, DRY, and DSH) from house 3 in [4], with m = 20 states. We downsampled the data by a factor 10 to obtain the samples at 30-second intervals. The AC values are given in Table IV, where we see that ALIP performs significantly better than IP on all appliances except FRG, where it performs similarly due to the reasons discussed in Experiment 1. Overall, again, ALIP outperforms IP by a significant margin as Seen in Table VIII.\nIn Experiment 5 we used n = 8 appliances (LTE, KTC, DRY, STV, ARC, SMK, DSH, and BTH) from house 4 in [4], with m = 20 states. The data was downsampled factor 10 to obtain the samples at 30-second intervals. As seen in Table V, IP performs slightly better than ALIP on LTE, DRY and ARC, but the difference is small, within 4%. However, on other appliances ALIP performs better than IP, and in most cases by a significant margin. Note that IP yields a negative AC value for SMK, which means that it produces false positives more often than true positives. Overall, ALIP has a significant advantage over IP, as seen in Table VIII.\nIn Experiment 6 we used n = 6 appliances (MIC, LTE, UKN, SBP, HEAT, and DIF) from house 5 in [4], with m = 24 states. The data were downsampled by a factor 10 to obtain the samples at 30-second intervals. Here, ALIP outperforms IP on all appliances, as well as in overall accuracy, as seen in Tables VI and VIII, respectively.\n5\nFinally, in In Experiment 7 we used n = 7 appliances (ELE, BTH, FRG, UKN, LTE, ARC, and DIF) from house 6 in [4], with m = 20 states. The data were downsampled by a factor 10 to obtain the samples at 30-second intervals. Again, ALIP outperforms IP consistently on all appliances, as well as in overall accuracy, as seen in Tables VII and VIII, respectively.\nIn Table VIII we also include the published ACC results of two state-of-the-art machine learning-based disaggregation approaches, [4] and [5], on the REDD dataset. Note that [4] and [5] did not report the results for all the houses. Although these methods used different downsampling rates and there is some uncertainty about the processing of data prior to testing, the comparison gives us a feeling for how the proposed ALIP would compare against machine learning-based disaggregation. We note that against [4], ALIP scores on average 0.32 better. Against [5], it scores on average 0.03 better on houses 3 and 6, and on average 0.04 lower on houses 1 and 2. Based on these results, we conclude that the proposed ALIP is competitive in terms of accuracy with the state-of-the-art machine learning-based disaggregation approaches.\nA final word on complexity. The proposed ALIP approach incorporates several additional processing steps compared to the conventional IP-based disaggregation. Hence, its computational complexity is slightly higher. In Table IX we list the average execution time (in milliseconds) per sample of IP and ALIP disaggregators for Experiments 1\u20137, which were obtained with Matlab 2015a on an Intel(R) Core(TM) i74770 CPU@3.40 GHz processor with 16 GB RAM. As seen in the table, ALIP is only slightly slower than IP, and both disaggregators take less than 20 ms per data sample."}, {"heading": "V. CONCLUSION", "text": "Integer programming (IP) provides a natural way to solve the load disaggregation problem, by trying to determine which appliance states are active at any given time. However, previous IP-based disaggregation is shown to run into problems on real data due to issues related to transient readings and in cases when some states are binary combinations of other states. We proposed an aided linear IP (ALIP) approach for disaggregation that overcomes many of the shortcomings of the previous IP-based approach. Experimental results demonstrate significant accuracy advantage of ALIP over the previous IP-based disaggregation method, as well as competitive performance against two state-of-the art machine learning-based disaggregation approaches."}], "references": [{"title": "and B", "author": ["S. Makonin", "F. Popowich"], "venue": "Gill, \u201cThe cognitive power meter: Looking beyond the smart meter,\u201d in Proc. IEEE Canadian Conference on Electrical and Computer Engineering (CCECE)", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2013}, {"title": "Low cost disaggregation of smart meter sensor data,", "author": ["G.C. Koutitas", "L. Tassiulas"], "venue": "IEEE Sensors J.,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2016}, {"title": "A novel approach based on finite-state machines with fuzzy transitions for nonintrusive home appliance monitoring,", "author": ["P. Ducange", "F. Marcelloni", "M. Antonelli"], "venue": "IEEE Trans. Ind. Informat.,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "REDD: a public data set for energy disaggregation research,", "author": ["J.Z. Kolter", "M.J. Johnson"], "venue": "in Proc. SustKDD Workshop on Data Mining Applications in Sustainability,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Bayesian nonparametric hidden semimarkov models,", "author": ["M.J. Johnson", "A.S. Willsky"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "Home appliance load modeling from aggregated smart meter data,", "author": ["Z. Guo", "Z.J. Wang", "A. Kashani"], "venue": "IEEE Trans. Power Systems,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "Disaggregation of home energy display data using probabilistic approach,", "author": ["M. Zeifman"], "venue": "IEEE Trans. Consum. Electron.,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "PALDi: online load disaggregation via particle filtering,", "author": ["D. Egarter", "V.P. Bhuvana", "W. Elmenreich"], "venue": "IEEE Trans. Instrum. Meas.,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2015}, {"title": "Evolving non-intrusive load monitoring,", "author": ["D. Egarter", "A. Sobe", "W. Elmenreich"], "venue": "Proc. 16th European Conference on Applications of Evolutionary Computation: EvoApplications\u201913, (Vienna,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2013}, {"title": "and K", "author": ["K. Suzuki", "S. Inagaki", "T. Suzuki", "H. Nakamura"], "venue": "Ito, \u201cNonintrusive appliance load monitoring based on integer programming,\u201d in Proc. SICE Annual Conference, (The University Electro-Communications, Japan), pp. 2742\u20132747", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2008}, {"title": "Practical Optimization", "author": ["A. Antoniou", "W.S. Lu"], "venue": "Springer", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2007}, {"title": "and I", "author": ["S. Makonin", "F. Popowich", "L. Bartram", "B. Gill"], "venue": "V. Baji\u0107, \u201cAMPds: A public dataset for load disaggregation and eco-feedback research,\u201d in Proc. IEEE Electrical Power & Energy Conference (EPEC)", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2013}, {"title": "Nonintrusive load monitoring (NILM) performance evaluation,", "author": ["S. Makonin", "F. Popowich"], "venue": "Energ. Effic.,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2015}], "referenceMentions": [{"referenceID": 0, "context": "Load disaggregation or non-intrusive load monitoring (NILM) is the process of finding out how much each appliance within a household is consuming when only the aggregate current or power reading is available [1].", "startOffset": 208, "endOffset": 211}, {"referenceID": 1, "context": "Most disaggregation methods have focused on using machine learning approaches such as clustering [2], fuzzy systems [3], and hidden Markov models [4], [5], [6], [7], [8].", "startOffset": 97, "endOffset": 100}, {"referenceID": 2, "context": "Most disaggregation methods have focused on using machine learning approaches such as clustering [2], fuzzy systems [3], and hidden Markov models [4], [5], [6], [7], [8].", "startOffset": 116, "endOffset": 119}, {"referenceID": 3, "context": "Most disaggregation methods have focused on using machine learning approaches such as clustering [2], fuzzy systems [3], and hidden Markov models [4], [5], [6], [7], [8].", "startOffset": 146, "endOffset": 149}, {"referenceID": 4, "context": "Most disaggregation methods have focused on using machine learning approaches such as clustering [2], fuzzy systems [3], and hidden Markov models [4], [5], [6], [7], [8].", "startOffset": 151, "endOffset": 154}, {"referenceID": 5, "context": "Most disaggregation methods have focused on using machine learning approaches such as clustering [2], fuzzy systems [3], and hidden Markov models [4], [5], [6], [7], [8].", "startOffset": 156, "endOffset": 159}, {"referenceID": 6, "context": "Most disaggregation methods have focused on using machine learning approaches such as clustering [2], fuzzy systems [3], and hidden Markov models [4], [5], [6], [7], [8].", "startOffset": 161, "endOffset": 164}, {"referenceID": 7, "context": "Most disaggregation methods have focused on using machine learning approaches such as clustering [2], fuzzy systems [3], and hidden Markov models [4], [5], [6], [7], [8].", "startOffset": 166, "endOffset": 169}, {"referenceID": 8, "context": "[9] and Suzuki et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 9, "context": "[10].", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "[10] in 2008 using high-frequency sampled current readings.", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "Similarly to [10], load disaggregation can be formulated as an integer programming (IP) problem", "startOffset": 13, "endOffset": 17}, {"referenceID": 10, "context": "The alternative is to explore more efficient IP solvers [11].", "startOffset": 56, "endOffset": 60}, {"referenceID": 11, "context": "For example, the fridge (FRG) appliance from the dataset in [12] has the state transition diagram shown in Fig.", "startOffset": 60, "endOffset": 64}, {"referenceID": 11, "context": "State transition diagram of FRG from [12].", "startOffset": 37, "endOffset": 41}, {"referenceID": 11, "context": "Consider the appliance B1E from [12], which has a fully-connected 2-state diagram (Fig.", "startOffset": 32, "endOffset": 36}, {"referenceID": 9, "context": "We compare the performance of our ALIP method with the IP-based disaggregation from [10] in terms of two accuracy measures [13]: per appliance accuracy", "startOffset": 84, "endOffset": 88}, {"referenceID": 12, "context": "We compare the performance of our ALIP method with the IP-based disaggregation from [10] in terms of two accuracy measures [13]: per appliance accuracy", "startOffset": 123, "endOffset": 127}, {"referenceID": 11, "context": "In Experiment 1 we used n = 4 appliances (CDE, FRG, HPE, and B1E) from the dataset in [12].", "startOffset": 86, "endOffset": 90}, {"referenceID": 3, "context": "In Experiment 2 we used n = 7 appliances (OVN, RFG, DSH, MIC, DRY, BTH, and DIF) from house 1 of the REDD dataset [4], with m = 13 states.", "startOffset": 114, "endOffset": 117}, {"referenceID": 3, "context": "In Experiment 3 we used n = 6 appliances (KTC, LTE, STV, MIC, DRY, and DSH) from house 2 in [4], with m = 17 states.", "startOffset": 92, "endOffset": 95}, {"referenceID": 3, "context": "In Experiment 4 we used n = 7 appliances (KTC, LTE, STV, MIC, DRY, and DSH) from house 3 in [4], with m = 20 states.", "startOffset": 92, "endOffset": 95}, {"referenceID": 3, "context": "In Experiment 5 we used n = 8 appliances (LTE, KTC, DRY, STV, ARC, SMK, DSH, and BTH) from house 4 in [4], with m = 20 states.", "startOffset": 102, "endOffset": 105}, {"referenceID": 3, "context": "In Experiment 6 we used n = 6 appliances (MIC, LTE, UKN, SBP, HEAT, and DIF) from house 5 in [4], with m = 24 states.", "startOffset": 93, "endOffset": 96}, {"referenceID": 3, "context": "Finally, in In Experiment 7 we used n = 7 appliances (ELE, BTH, FRG, UKN, LTE, ARC, and DIF) from house 6 in [4], with m = 20 states.", "startOffset": 109, "endOffset": 112}, {"referenceID": 3, "context": "In Table VIII we also include the published ACC results of two state-of-the-art machine learning-based disaggregation approaches, [4] and [5], on the REDD dataset.", "startOffset": 130, "endOffset": 133}, {"referenceID": 4, "context": "In Table VIII we also include the published ACC results of two state-of-the-art machine learning-based disaggregation approaches, [4] and [5], on the REDD dataset.", "startOffset": 138, "endOffset": 141}, {"referenceID": 3, "context": "Note that [4] and [5] did not report the results for all the houses.", "startOffset": 10, "endOffset": 13}, {"referenceID": 4, "context": "Note that [4] and [5] did not report the results for all the houses.", "startOffset": 18, "endOffset": 21}, {"referenceID": 3, "context": "We note that against [4], ALIP scores on average 0.", "startOffset": 21, "endOffset": 24}, {"referenceID": 4, "context": "Against [5], it scores on average 0.", "startOffset": 8, "endOffset": 11}], "year": 2017, "abstractText": "Load disaggregation based on aided linear integer programming (ALIP) is proposed. We start with a conventional linear integer programming (IP) based disaggregation and enhance it in several ways. The enhancements include additional constraints, correction based on a state diagram, median filtering, and linear programming-based refinement. With the aid of these enhancements, the performance of IP-based disaggregation is significantly improved. The proposed ALIP system relies only on the instantaneous load samples instead of waveform signatures, and hence does not crucially depend on high sampling frequency. Experimental results show that the proposed ALIP system performs better than the conventional IP-based load disaggregation system.", "creator": "LaTeX with hyperref package"}}}