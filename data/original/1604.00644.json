{"id": "1604.00644", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Apr-2016", "title": "An electronic-game framework for evaluating coevolutionary algorithms", "abstract": "One of the common artificial intelligence applications in electronic games consists of making an artificial agent learn how to execute some determined task successfully in a game environment. One way to perform this task is through machine learning algorithms capable of learning the sequence of actions required to win in a given game environment. There are several supervised learning techniques able to learn the correct answer for a problem through examples. However, when learning how to play electronic games, the correct answer might only be known by the end of the game, after all the actions were already taken. Thus, not being possible to measure the accuracy of each individual action to be taken at each time step. A way for dealing with this problem is through Neuroevolution, a method which trains Artificial Neural Networks using evolutionary algorithms. In this article, we introduce a framework for testing optimization algorithms with artificial agent controllers in electronic games, called EvoMan, which is inspired in the action-platformer game Mega Man II. The environment can be configured to run in different experiment modes, as single evolution, coevolution and others. To demonstrate some challenges regarding the proposed platform, as initial experiments we applied Neuroevolution using Genetic Algorithms and the NEAT algorithm, in the context of competitively coevolving two distinct agents in this game.", "histories": [["v1", "Sun, 3 Apr 2016 14:57:24 GMT  (652kb,D)", "https://arxiv.org/abs/1604.00644v1", "This paper is a translation of \\cite{karine2015}, published in Portuguese at Brazilian Congress on Computational Intelligence, 2015"], ["v2", "Mon, 11 Apr 2016 18:35:29 GMT  (652kb,D)", "http://arxiv.org/abs/1604.00644v2", "This paper is a translation of \\cite{karine2015}, published in Portuguese at Brazilian Congress on Computational Intelligence, 2015"]], "COMMENTS": "This paper is a translation of \\cite{karine2015}, published in Portuguese at Brazilian Congress on Computational Intelligence, 2015", "reviews": [], "SUBJECTS": "cs.NE cs.AI", "authors": ["karine da silva miras de ara\\'ujo", "fabr\\'icio olivetti de fran\\c{c}a"], "accepted": false, "id": "1604.00644"}, "pdf": {"name": "1604.00644.pdf", "metadata": {"source": "CRF", "title": "An electronic-game framework for evaluating coevolutionary algorithms", "authors": ["Karine da Silva", "Miras de Ara\u00fajo"], "emails": ["karine.smiras@gmail.com", "folivetti@ufabc.edu.br"], "sections": [{"heading": null, "text": "I. INTRODUCTION\nThe search for autonomous controllers is an important task of the Artificial Intelligence field, aiming to create systems able to take automatic decisions under uncertain environments. There are several applications for such agents, varying from manufacturer industries to unmanned vehicles for exploring inhospitable places.\nOne issue to this field to be concerned about, is the lack of frameworks for assessing the performance presented by learning algorithms in different scenarios. Testing environments which may help in such cases are those emulating electronic video games [16] [13]. These testing environments allow to verify the capability of an algorithm when creating a game playing agent that must succeed in the proposed game goal. Because of the flexibility and variability of potential rules to an electronic game, it is possible to simulate different levels of uncertainties encountered in real world applications.\nSpecifically for the electronic gaming industry, this type of testing environment can help during the try-out stage towards\n1This paper is a translation of [4], published in Portuguese at Brazilian Congress on Computational Intelligence, 2015.\na game, in order to verify the difficulty and feasibility to overcome a given challenge, or in order to develop a daunting AI agent that meets the amusement level expected by a game player [2].\nRegarding the amusement level of a player, a game should not be too easy so that the player is not daunted at all and neither too difficult so that the player becomes frustrated by the game.\nWith the view to learn or improve their abilities, a human being may need to experience the repetition of a determined situation many times until they are capable of improving on the task at hand. After this first experience, if the person gets the chance to experience the situation again, the minimal knowledge and learning accumulated in the previous experience will be the only available. Thus, the person may react based on it, or ignore it and assume any other behavior, which makes it likely that it would be harder taking decisions in the earlier trials.\nAn agent controlled by some Artificial Intelligence on an electronic game should evolve its behavior at a pace similar to a human player, so that the challenge imposed is not unattainable by the player.\nConsidering these aspects, the proposed framework may contribute to practical interests of the electronic games industry, which looks forward to creating opponent characters capable of adapting to the profiles of human players in games, providing a challenging but yet, satisfying experience.\nThe goal of the present study is to introduce a new reference environment called EvoMan, with the purpose of simulating and testing autonomous playing agents in different game playing tasks. Formerly, in this paper we will illustrate how this environment can be used as a testbed for a coevolutionary learning experience with both autonomous players evolving to beat one another.\nThis paper is organized as follows: Section III describes the proposed environment, its main parameters and some more details about the simulation modes; Section II revises concepts of Neuroevolution and Coevolution, as well as a survey of some related work; Section IV describes the experimental methodology and results obtained throughout the tests; and, finally Section V concludes, pointing at some future research directions.\nar X\niv :1\n60 4.\n00 64\n4v 2\n[ cs\n.N E\n] 1\n1 A\npr 2\n01 6"}, {"heading": "II. BACKGROUND", "text": "In this Section we are reviewing some core concepts regarding the algorithms used during the experiments."}, {"heading": "A. Artificial Neural Networks", "text": "An Artificial Neural Network [7] (ANN) is a computational model inspired by how the animal brain works. In the most basic and traditional ANN, the computational flow starts with some input variables pertaining to a pattern recognition task. These input variables are then blended through linear combinations and sent to the next layer of neurons where they can activate such neurons or not, depending on the output of some chosen activation function.\nAn ANN is commonly organized in layers of neurons [7], with the most trivial case being a single layer connecting the input neurons directly to the output neurons, or the nontrivial case when multiple layers generate intermediate results by the combination of variables until emitting an output. The definition of an appropriate topology for the ANN is relevant to the success of a learning task.\nWhen the task at hand is a supervised learning problem, having a sequence of sample input-output from which to learn, the weights for the inner linear combinations of the ANN can be estimated by Gradient Descent algorithms, the most wellknown being the Backpropagation [14]. This algorithm tries to correct the output generated by the network by propagating the squared error regarding the desired output.\nThis adjustment is performed repeatedly until the weights correction stabilizes. This procedure leads to a local optimum in the search space, that may suffice for many applications.\nBesides being a local search method, this algorithm requires the precise knowledge of the desired output for every sampled input. However, sometimes, this requirement is unfeasible to attend. For instance, when the task is an automation process for which the outcome is only known after a sequence of outputs from the ANN. In this situation, there is no way to know what the correct output for an specific input is, since the current output depends on the previous outputs.\nIn such situations, researchers often resort to the Neuroevolutionary algorithms. These algorithms optimize the weights of ANNs through a gradient-less optimization algorithm, usually an evolutionary computational meta-heuristic, by solely relying on a fitness function roughly measuring the quality of an ANN after some sequence of inputs."}, {"heading": "B. Genetic Algorithms", "text": "A Genetic Algorithm (GA) [9] is a meta-heuristic that applies the principles of natural selection observed and described by Darwin, to find solutions for a diverse range of problems.\nIn GA, the variables for a problem are encoded as artificial genes vectorized as a chromosome. These chromosomes should be capable of representing the search space of the problem being solved. The GA starts with a random population of chromosomes and then repeats the following procedures: recombining pairs of chromosomes (crossover), perturbing\nsome selected chromosomes (mutation) and carrying out a probabilistic selection favoring the fittest (selection).\nDuring the crossover operation, new chromosomes are created by combining pairs 2 of chromosomes from the current population. This procedure should be performed in such a way that the offspring inherits characteristics within the genotype of both parents.\nThe mutation operation chooses a certain amount (usually a small amount) of genes from a chromosome and changes their values at random. This operator was proposed intending to promote diversity within the population and avoid premature convergence.\nAfter these operations, the algorithm will have created an offspring of new chromosomes that will be evaluated and combined with the current population. Afterwards, a selection procedure is applied in order to maintain the population with a fixed size. One way to perform such selection is through tournament, where two or more chromosomes are chosen completely at random and the fittest of them is included into the new population. This procedure is then repeated until the new population presents the required size."}, {"heading": "C. Neuroevolution", "text": "As mentioned on a previous Section, whenever it is not possible to apply the standard optimization algorithms to adjust the weights of an ANN, these weights are optimized using an evolutionary algorithm, like a GA. This methodology is called Neuroevolution (NE) [6].\nHowever, besides optimizing the weights of the connections, the topology of the ANN can also exert high influence on its performance regarding the problem being solved. As such, it is reasonable trying to evolve the optimum topology for the network, thus maximizing the performance of the learning task.\nFor this purpose, the Neuroevolution of Augmenting Topologies (NEAT) [15] was created and it will be described in the next subsection."}, {"heading": "D. NEAT algorithm", "text": "The algorithm starts with a random population of ANNs composed by the same topology, consisting of a single layer relating the inputs to the outputs, but having different random connection weights.\nThe chromosome representation for each network is composed by two different types of genes:\n\u2022 Node Genes, that represent inputs and neurons; \u2022 Connection Genes, which represent valued connections\n(weights) between neurons. These genes hold a flag indicating whether they are currently active or not. After creating the initial population, the algorithm performs the following steps at every generation: \u2022 Speciation: divides the population into species, based on\nthe similarities of the genomes.\n2in some variations the recombination is performed using more than two chromosomes\n\u2022 Fitness sharing: adjusts the fitnesses of all genomes with the purpose of penalizing groups of chromosomes near the same base of attraction in the search space. \u2022 Offspring size calculation: calculates the size of the offspring to be produced by each species, proportional to the fitness of its members. \u2022 Crossover: combines genomes of different species. \u2022 Mutation: changes the structure of some genomes ran-\ndomly, by adding new nodes, creating new connections or varying the weights of existing connections."}, {"heading": "E. NEAT on Computational Intelligence in Games", "text": "Trying to create an agent controller to play the game Frogs, [1] devised some experiments applying NEAT. Twelve sensors were used so that the agent could sense the game current state, with these sensors measuring proximity of objects around it. Each individual was tested three times in the game, and the final fitness was the average score. The score was the proximity of the frog to the objective area.\nThe application of NEAT for driving a car in TORCS using minimal inputs was discussed in [10]. The implementation presented in the paper used sensors towards the relative angles of the car to the central line of the lane, and the car speed.\nUsing NEAT, [16] tried and succeed in figuring out a good fitness function for a soccer player robot, which was expected to learn how to avoid opponents, carry a ball and kick it to the goal.\nAnother interesting application was made in [13], for the Ms.Pacman game playing framework. The objective of the game was to eat every capsule on the screen while escaping the Ghosts that chased PacMan. When PacMan eats an special pill, the Ghosts become edible and render more points for the player. In this paper the problem was treated as a Multiobjective optimization problem, by maximizing the score of the game while minimizing the number of neurons in the hidden layer."}, {"heading": "F. Competitive Coevolution", "text": "In nature, coevolution happens when a given species strengthens the selective pressure over another species, forcing it to adapt in order to survive. When reciprocal, this process may generate an arms race as both species try to surpass each other for survival [5].\nCompetitive Coevolution (CC) [12] is a method of applying Evolutionary Algorithms, so that instead of evolving a single population, two populations are mutually evolved through competition.\nFigure 1 illustrates an arms race scheme caused by a coevolution process where, throughout the generations, the winner role is inverted between competing species, due to their adaptive changes. In this example, geometric shapes compete, considering the size as their fitness, so that the largest wins.\nIn games [3], the CC is sometimes used for the predatorprey domain [11]. In this case, by evolving synchronously to the population of the player, the population of enemies interferes in the environment, generating uncertainties on the\nobjective space, thus encouraging the exploration of the search space for a more general agent."}, {"heading": "G. Coevolution in Computational Intelligence for Games", "text": "A Coevolutive algorithm was analyzed in [3], with the Ms.Pacman framework. In this work it was verified that the coevolved controllers achieved a better generalization for the game challenges than the standard evolution. The authors also noticed it was harder evolving controllers for the ghosts than for the Ms.Pacman, indicating that the success of this method may depend on the problem domain.\nIn another interesting work, a robotic architecture was elaborated [8] aiming to evolve predator-prey behavior. The outcome allowed to observe that the evolved agent controllers acquired interesting conducts, as obstacle evasion, object discrimination and visual perception."}, {"heading": "III. EVOMAN FRAMEWORK", "text": "The EvoMan 3 framework, proposed in [4] is an environment for evolving game playing agents for action-platformer games inspired by the classic Mega Man II 4.\nThis framework contains eight different enemies against which the player agent must learn how to beat, by performing one of the following simple actions: move left, move right, jump, release jump and shoot.\nIt was developed in Python 2.7 5 with the help of the library Pygame 6.\n3https://github.com/karinemiras/evoman framework 4https://www.megaman.capcom.com 5https://www.python.org 6http://www.pygame.org/\nThe game screen is composed of a rectangular area, that may contain some obstacles depending on the stage. When the game starts, each character (the player and the enemy) is positioned in opposing sides of the screen.\nAt every time step, the player and the enemy can perform one or more combined actions to interact with the environment and their opponent, having the goal of defeating them.\nBoth characters start the game with 100 points of energy, which decrease whenever they get hit by a projectile or hit each other. The character who reaches 0 points first loses the battle, making the other one winner.\nThe eight pre-programmed enemies perform their own distinct attacks, which are stronger than the attack of the default player. They present a standard rule-based behavior mimicking the original game."}, {"heading": "A. Simulation modes", "text": "The framework allows running experiments using the combination of different simulation modes (Fig. 2):\n\u2022 Human Player: in which the player-character is controlled by some human input device (i.e., joystick). \u2022 AI Player: in which the player-character is controlled by a machine learning algorithm. \u2022 Static Enemy: in which the enemy-character adopts a rule-based fixed attack/defence strategy, based on the original Mega Man II. \u2022 AI Enemy: in which the enemy-character is controlled by a machine learning algorithm.\nIn this study we are using the simulation mode combinations \u201cAI Player VS Static Enemy\u201d and \u201cAI Player VS AI Enemy\u201d,\nto assess the learning of artificial agent controllers for the characters of the game, using all the stages provided by the framework. The second combination is the reproduction of a competitive coevolution process, to verify the behavior of the learning agents."}, {"heading": "B. Game Sensors and Actions", "text": "The environment provides 68 variables about the game state, which act as sensors to the agents (AI player or AI enemy). The list below describes the sensors:\n1) Coordinates of the rectangles enveloping each character (8 sensors in total). 2) Flag indicating weather each character is over some surface (2 sensors in total). 3) Time-steps left until the character is allowed to shoot a projectile again (2 sensors in total). 4) Flag indicating whether each character is shooting (2 sensors in total). 5) Vertical and horizontal acceleration for each character (4 sensors in total). 6) Direction each character is facing (2 sensors in total). 7) Flag indicating whether each character is attacking or\nnot (2 sensors in total). 8) The coordinates of the rectangles enveloping each of the\n3 projectiles of the player (12 sensors in total). 9) The coordinates of the rectangles enveloping each of the\n8 projectiles of the enemy (32 sensors in total). 10) Flag indicating the enemy is immune to the player\u2019s\nattacks (1 sensor in total). 11) Time-steps counter (1 sensor in total).\nNot every sensor may be useful for the decision process made by the agent and also some stages may require a smaller number of sensors (i.e., in some stages the number of projectiles on the screen are limited).\nAt every time step during a game run, after receiving the value for each sensor (game state) the player agent may perform up to 5 actions: left, right, shoot, jump e release. The release action is used to mimic the releasing of a joystick jumping button, interrupting the jumping process.\nThe enemy agents perform additional actions whenever they present different attacks. These actions are labeled shootN if N ranging from 1 to 6.\nThe regular flow of an experiment using the framework is depicted by Figure 3.\nThere are several parameters that might be supplied to the framework, in order to customize experiments. All of them are described in the documentation 7 of EvoMan framework."}, {"heading": "IV. EXPERIMENTS", "text": "This section describes the experimental methodology performed in this paper regarding the coevolutionary approach, including a brief discussion about it.\n7https://github.com/karinemiras/evoman framework\nFig. 3. In the framework, every time the user needs to test a solution (agent controller) using their algorithm, they have to run a game loop, at which in each time-step sensors are provided to the agent being tested, as well as its decision actions are taken. The agent fitness evaluation is returned to the algorithm by the end of the loop run."}, {"heading": "A. Methodology", "text": "Before assessing the behavior of a coevolutionary competition, we have performed evolutions using the mode \u201cAI Player Vs Static Enemy\u201c in order to verify the capability of each algorithm beating every enemy.\nAfterwards, we experimented with the mode \u201cAI Player Vs AI Enemy\u201c, in which every agent (player or enemy) had a limited number of iterations to evolve a better strategy than their opponent.\nThe experiments were performed using an ANN with a single layer having its weights evolved by a standard Genetic Algorithm, and also an ANN evolved applying the NEAT algorithm.\nThe ANNs received each one of the 68 sensors, normalized between \u22121 and 1 as input, and the networks output 5 neurons corresponding to one of each possible action the agent could perform. The activation function used was the Logistic Function and any output value higher than 0.5 translated into performing the corresponding action.\n1) Fitness function: Intending to quantify the performance of each generated ANN, we established a fitness function encompassing the criteria that we are willing to evolve.\nThe proposed fitness function tries to balance the minimization in the energy of the adversary, the maximization in the energy of the current player and the minimization in the time taken to end the game. The fitness was modeled as described by Eq. 1.\nfitness = (100\u2212e)\u03b3\u2212(100\u2212p)\u03b2\u2212(( (~t)\u2211 i=1 100\u2212pi)/t)\u03b1, (1)\nwhere e, p are the energy measures for the enemy and the player, respectively, in the range of [0, 100]; t is the amount\nTABLE I MEAN ENERGY OF THE MAIN PLAYER OBTAINED IN THE FINAL GENERATION BY GENETIC ALGORITHM AND NEAT.\nEnemy (game) GA NEAT t-Test FlashMan 0 92 p <0.01 AirMan 87 92 p <0.01\nWoodMan 73 100 p <0.01 HeatMan 48 84 p <0.01 MetalMan 97 99 p <0.11 CrashMan 87 54 p <0.01\nBubbleMan 63 67 p <0.01 QuickMan 77 88 p <0.01\nof time steps the game lasted. The constants \u03b3, \u03b2 and \u03b1 are weights to balance the importance of each term.\nExperimentally, the optimal values found by these weights were 1, 2 and 2 when evolving the main player, and 1, 2 and 3 when evolving the enemy.\nIn order to promote a generalized behavior, capable of coping with a diverse set of enemies, the final fitness for an individual is, the average value of the fitness values obtained by fighting against the best individual of the opposite population and also 4 more randomly selected individuals from it.\n2) Training methods: In order to test the evolution of artificial agents, we applied an ANN having its weights evolved by a Genetic Algorithm and an ANN having its weights and topology evolved by the NEAT algorithm.\nAt first, in order to generate a baseline, we evolved the player agent against each enemy, separately, fixing the enemy behavior with an heuristic approach.\nNext, we performed experimentations of Co-Evolution between the main player against the enemies. In this set of experiments, we alternated the evolutionary process of each population by three generations per turn. Also, due to time constraints, we tested only the NEAT algorithm.\nThe final energy measure for each agent by the end of a fight for both agents are plotted in order to perceive the coevolutionary behavior, as they surpasses each other."}, {"heading": "B. Results", "text": "Table I shows the average final energy obtained by each agent evolved with GA and NEAT against the heuristic behavior of every enemy contained in the framework, along with the p-values obtained by a t-Test.\nAs we see from this Table, every enemy can be beaten by both algorithms, being FlashMan the only exception, which only could be beaten by NEAT. Also, when analyzing the remaining energy measures of the player, we notice that some enemies are more difficult to beat than others.\nWe can expect the co-evolutionary process to converge to an alternation in which agents beat each other for AirMan, MetalMan, BubbleMan and QuickMan when using NEAT algorithm. However, this same algorithm is expected to render unstable results when confronting the other enemies.\nIn order to verify such assumption, we performed experiments and reported the remaining energy obtained by the main\nplayer versus each enemy with the pre-programmed heuristic (previous experiment) and against the co-evolved enemy.\nIn Table II we can observe that there does not seem to be a correlation between winning against the heuristic enemy and how easy it is to co-evolve against it.\nThis Table shows the only beatable enemies by co-evolution are AirMan, MetalMan, BubbleMan and QuickMan. Though WoodMan was beatable during the co-evolution, it was by a small margin.\nIt is worth considering that the enemies within this game have the advantage of possessing more complex forms of attack which may hit the main player more easily.\nNevertheless, the final analysis of the co-evolutionary systematization may not reflect the correct performance towards implicate agents, since there is no guarantee that the point in time when the performance was measured corresponds to the best performance achieved by the learning algorithm.\nIn order to assess the overall behavior of the co-evolutionary approach, we have plotted in Fig. 4 the evolution regarding the energy of the main player (suffix p) against the enemy (suffix e) throughout the generations, for both Heuristic and Co-Evolutionary experimenting approaches.\nFrom this Figure we learn that the easiest enemy to beat is AirMan, whereas in the Heuristic experiment the agent could learn how to win at an early generation. In contrast, this is the one that shows the best arms race during the Co-Evolutionary experiment, in which the winner agent alternates together with the alternation of who is evolving.\nOn the other hand, we can notice that against FlashMan, the agent reached a good result only at the later generations, meaning that it required a longer number of generations to learn how to beat it. This reflects into the Co-Evolutionary experiments, where we can see that the agent can learn how to attack it, but never actually manages to beat it.\nThis behavior is similar to the one observed regarding WoodMan and HeatMan.\nWhen playing against MetalMan, we can see that even though the agent can evolve at early generations on the Heuristic experiment, the NEAT algorithm cannot maintain the perfect solution as observed about AirMan. This is due to the algorithm diversity control which uses a high mutation rate, and also the sensitivity to change towards its chromosome\nrepresentation. The CrashMan and BubbleMan enemies follow this same trend.\nFinally, QuickMan presents a similar behavior to AirMan, for which the agent can learn how to beat it at early generations and maintain this solution while in Co-Evolutionary experiments it maintains an arms race against the enemy."}, {"heading": "V. CONCLUSION AND FUTURE WORK", "text": "This paper introduces the EvoMan game playing framework, which can be used for testing learning algorithms capable of creating autonomous agents. The purpose of such agents may be fighting against a pre-programmed opponent, by learning a general strategy to win against all opponents, or testing a co-evolutionary approach in which the player and the enemy have both a limited number of generations to learn how to beat each other, thus propelling an arms race.\nIn order to illustrate the capabilities of the proposed framework, we have performed two simple experiments: i) applying\ntwo distinct learning algorithms against the pre-programmed behavior of each enemy, ii) running a co-evolutionary learning experiment to verify if the player could keep up with a constantly evolving enemy.\nThe heuristic experiments showed the feasibility of learning how to win against the pre-programmed behavior of all enemies and, also, the difficulty level of each enemy.\nRegarding the co-evolutionary experiments, we learned that the main player may require additional generations of advantage in order to generate an arms race against some of the enemies.\nOverall, this framework can help the Computational Intelligence in Games community to test different tasks within a controlled environment, such as: finding a general strategy able to defeat every opponent, a constrained co-evolutionary approach in which the enemy behavior evolves in such a way that its difficulty is always challenging against a human player.\nFor our future research we are going to investigate those mentioned tasks using this framework. We are also going to improve the framework with different features such as the possibility of acquiring the weapon from the enemy after the player has beaten it (similar to the original game), creating a combinatorial problem of which enemy to beat first, and a continuous learning problem about how to use the newly acquired weapons."}], "references": [{"title": "Flow: the psychology of optimal experience (book review)", "author": ["R Buchanan", "M Csikszentmihalyi"], "venue": "Design Issues,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1991}, {"title": "Competitive coevolution in ms. pac-man", "author": ["Andrew Borg Cardona", "Julian Togelius", "Mark J Nelson"], "venue": "In Evolutionary Computation (CEC),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "Um ambiente de jogo eletronico para avaliar algoritmos coevolutivos", "author": [], "venue": "CBIC,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Arms races between and within species", "author": ["Richard Dawkins", "John R Krebs"], "venue": "Proceedings of the Royal Society of London B: Biological Sciences,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1979}, {"title": "Neuroevolution: from architectures to learning", "author": ["Dario Floreano", "Peter D\u00fcrr", "Claudio Mattiussi"], "venue": "Evolutionary Intelligence,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2008}, {"title": "Artificial neural networks (the multilayer perceptron)\u2014a review of applications in the atmospheric sciences", "author": ["Matt W Gardner", "SR Dorling"], "venue": "Atmospheric environment,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1998}, {"title": "The experimental study of the competitive co-evolution using predator-prey tasks", "author": ["Gyongyike Gebeov\u00e1", "Miroslav Hudec", "Peter Kosteln\u0131\u0301k", "Vratislav Kov\u00e1c"], "venue": "Intelligent Technologies: Theory and Applications: New Trends in Intelligent Technologies,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2002}, {"title": "Coevolution of a backgammon player", "author": ["Jordan B Pollack", "Alan D Blair", "Mark Land"], "venue": "In Artificial Life V: Proc. of the Fifth Int. Workshop on the Synthesis and Simulation of Living Systems,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1997}, {"title": "Constructing competitive and cooperative agent behavior using coevolution", "author": ["Aditya Rawal", "Padmini Rajagopalan", "Risto Miikkulainen"], "venue": "In Computational Intelligence and Games (CIG),", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2010}, {"title": "Evolving multimodal behavior with modular neural networks in ms. pac-man", "author": ["Jacob Schrum", "Risto Miikkulainen"], "venue": "In Proceedings of the 2014 conference on Genetic and evolutionary computation,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2014}, {"title": "A review on back-propagation algorithms for feedforward networks", "author": ["Shital Solanki", "HB Jethva"], "venue": "Int. Res. Anal,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2013}, {"title": "Evolving neural networks through augmenting topologies", "author": ["Kenneth O Stanley", "Risto Miikkulainen"], "venue": "Evolutionary computation,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2002}, {"title": "Extending robot soccer using neat", "author": ["Phyo Thiha"], "venue": "Final Projects,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2009}], "referenceMentions": [{"referenceID": 12, "context": "Testing environments which may help in such cases are those emulating electronic video games [16] [13].", "startOffset": 93, "endOffset": 97}, {"referenceID": 9, "context": "Testing environments which may help in such cases are those emulating electronic video games [16] [13].", "startOffset": 98, "endOffset": 102}, {"referenceID": 2, "context": "1This paper is a translation of [4], published in Portuguese at Brazilian Congress on Computational Intelligence, 2015.", "startOffset": 32, "endOffset": 35}, {"referenceID": 0, "context": "a game, in order to verify the difficulty and feasibility to overcome a given challenge, or in order to develop a daunting AI agent that meets the amusement level expected by a game player [2].", "startOffset": 189, "endOffset": 192}, {"referenceID": 5, "context": "An Artificial Neural Network [7] (ANN) is a computational model inspired by how the animal brain works.", "startOffset": 29, "endOffset": 32}, {"referenceID": 5, "context": "An ANN is commonly organized in layers of neurons [7], with the most trivial case being a single layer connecting the input neurons directly to the output neurons, or the nontrivial case when multiple layers generate intermediate results by the combination of variables until emitting an output.", "startOffset": 50, "endOffset": 53}, {"referenceID": 10, "context": "When the task at hand is a supervised learning problem, having a sequence of sample input-output from which to learn, the weights for the inner linear combinations of the ANN can be estimated by Gradient Descent algorithms, the most wellknown being the Backpropagation [14].", "startOffset": 269, "endOffset": 273}, {"referenceID": 4, "context": "This methodology is called Neuroevolution (NE) [6].", "startOffset": 47, "endOffset": 50}, {"referenceID": 11, "context": "For this purpose, the Neuroevolution of Augmenting Topologies (NEAT) [15] was created and it will be described in the next subsection.", "startOffset": 69, "endOffset": 73}, {"referenceID": 12, "context": "Using NEAT, [16] tried and succeed in figuring out a good fitness function for a soccer player robot, which was expected to learn how to avoid opponents, carry a ball and kick it to the goal.", "startOffset": 12, "endOffset": 16}, {"referenceID": 9, "context": "Another interesting application was made in [13], for the Ms.", "startOffset": 44, "endOffset": 48}, {"referenceID": 3, "context": "When reciprocal, this process may generate an arms race as both species try to surpass each other for survival [5].", "startOffset": 111, "endOffset": 114}, {"referenceID": 8, "context": "Competitive Coevolution (CC) [12] is a method of applying Evolutionary Algorithms, so that instead of evolving a single population, two populations are mutually evolved through competition.", "startOffset": 29, "endOffset": 33}, {"referenceID": 1, "context": "In games [3], the CC is sometimes used for the predatorprey domain [11].", "startOffset": 9, "endOffset": 12}, {"referenceID": 7, "context": "In games [3], the CC is sometimes used for the predatorprey domain [11].", "startOffset": 67, "endOffset": 71}, {"referenceID": 1, "context": "A Coevolutive algorithm was analyzed in [3], with the Ms.", "startOffset": 40, "endOffset": 43}, {"referenceID": 6, "context": "In another interesting work, a robotic architecture was elaborated [8] aiming to evolve predator-prey behavior.", "startOffset": 67, "endOffset": 70}, {"referenceID": 2, "context": "The EvoMan 3 framework, proposed in [4] is an environment for evolving game playing agents for action-platformer games inspired by the classic Mega Man II 4.", "startOffset": 36, "endOffset": 39}], "year": 2016, "abstractText": "One of the common artificial intelligence applications in electronic games consists of making an artificial agent learn how to execute some determined task successfully in a game environment. One way to perform this task is through machine learning algorithms capable of learning the sequence of actions required to win in a given game environment. There are several supervised learning techniques able to learn the correct answer for a problem through examples. However, when learning how to play electronic games, the correct answer might only be known by the end of the game, after all the actions were already taken. Thus, not being possible to measure the accuracy of each individual action to be taken at each time step. A way for dealing with this problem is through Neuroevolution, a method which trains Artificial Neural Networks using evolutionary algorithms. In this article, we introduce a framework for testing optimization algorithms with artificial agent controllers in electronic games, called EvoMan, which is inspired in the action-platformer game Mega Man II. The environment can be configured to run in different experiment modes, as single evolution, coevolution and others. To demonstrate some challenges regarding the proposed platform, as initial experiments we applied Neuroevolution using Genetic Algorithms and the NEAT algorithm, in the context of competitively coevolving two distinct agents in this game. 1", "creator": "LaTeX with hyperref package"}}}