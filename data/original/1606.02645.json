{"id": "1606.02645", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Jun-2016", "title": "Simplified Boardgames", "abstract": "We formalize Simplified Boardgames language, which describes a subclass of arbitrary board games. The language structure is based on the regular expressions, which makes the rules easily machine-processable while keeping the rules concise and fairly human-readable.", "histories": [["v1", "Wed, 8 Jun 2016 17:29:17 GMT  (64kb,D)", "https://arxiv.org/abs/1606.02645v1", null], ["v2", "Fri, 15 Jul 2016 14:02:55 GMT  (65kb,D)", "http://arxiv.org/abs/1606.02645v2", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["jakub kowalski", "jakub sutowicz", "marek szyku{\\l}a"], "accepted": false, "id": "1606.02645"}, "pdf": {"name": "1606.02645.pdf", "metadata": {"source": "CRF", "title": "SIMPLIFIED BOARDGAMES", "authors": ["JAKUB KOWALSKI"], "emails": ["jko@cs.uni.wroc.pl,", "jakubsutowicz@gmail.com,", "msz@cs.uni.wroc.pl."], "sections": [{"heading": "1. Introduction", "text": "Simplified Boardgames is a class of fairy-chess-like games, first introduced in [1], and slightly extended in [3] (see [2] for an alternative extension). The class was developed for the purpose of learning the game rules through the observation of plays. The Simplified Boardgames language describes turn-based, two player, zero-sum games on a rectangular board with piece movements being a subset of a regular language.\nHere we provide a formal specification for Simplified Boardgames. Despite the fact that the class has been used in several papers, its formal grammar was still not clearly defined, and some issues were left ambiguous. Such a definition is crucial for further research concerning AI contests, procedural content generation, translations, etc. For comparison, Metagame system, which can be seen as Simplified Boardgames predecessor, had its grammar explicitly declared in [7]."}, {"heading": "2. Syntax and semantics", "text": "In this section we present the formal grammar for Simplified Boardgames, inspired by the look of training records provided by Bj\u00f6rnsson in his initial work [1]. The grammar construction is also affected by our experiences concerning Simplified Boardgames, especially in the domain of procedural content generation. The version presented differs only slightly comparing to the versions used in [3, 4, 5].\n2.1. Grammar. The formal grammar in EBNF is presented in Figure 1. C-like comments can appear anywhere in the game definition: \u201c//\u201d starts a line comment and every next character in the line is ignored. \u201c/*\u201d starts a multiline comment and every character is ignored until the first occurrence of \u201c*/\u201d.\nThe start non-terminal symbol is \u201csbg\u201d. The \u201cnat\u201d non-terminal stands for a natural number (thus a non-empty sequence of digits), while \u201cint\u201d stands for a signed integer (thus it is \u201cnat\u201d optionally preceded by \u201c-\u201d). The \u201calphanumspace\u201d non-terminal generates all alphanumerical characters or a space.\nInstitute of Computer Science, University of Wroc\u0142aw, Wroc\u0142aw, Poland E-mail addresses: jko@cs.uni.wroc.pl, jakubsutowicz@gmail.com, msz@cs.uni.wroc.pl.\n1\nar X\niv :1\n60 6.\n02 64\n5v 2\n[ cs\n.A I]\n1 5\nJu l 2\n01 6\nsbg ::= \u2018<<\u2019 name \u2018>>\u2019 \u2018<BOARD>\u2019 board \u2018<PIECES>\u2019 pieces \u2018<GOALS>\u2019 goals\nname ::= alphanumspace {alphanumspace}\nboard ::= nat nat { row }\nrow ::= \u2018|\u2019 {[.a-zA-Z]} \u2018|\u2019\npieces ::= { [A-Z] regexp \u2018&\u2019 }\nregexp ::= rsc | regexp regexp | regexp \u2018+\u2019 regexp | \u2018(\u2019 regexp \u2018)\u2019 [power]\nrsc ::= \u2018(\u2019 int \u2018,\u2019 int \u2018,\u2019 on \u2018)\u2019 [power]\npower ::= \u2018^\u2019 nat | \u2018^\u2019 \u2018*\u2019\non ::= [epw]\ngoals ::= nat \u2018&\u2019 { goal \u2018&\u2019 }\ngoal ::= \u2018#\u2019 letter nat | \u2018@\u2019 letter squares\nletter ::= [a-zA-Z]\nsquares ::= nat nat { \u2018,\u2019 nat nat }\nFigure 1. Formal grammar for Simplified Boardgames game rules.\n2.2. Example. An exemplary game called Gardner1, formatted according to Simplified Boardgames grammar is presented partially in Figure 2. It is 5 \u00d7 5 chess variant proposed by Martin Gardner in 1969 and weakly solved in 2013 [6] \u2013 the game-theoretic value has been proved to be a draw.\nThe starting position looks as in the regular chess with removed columns f , g, h, and rows 3, 4, 5. The rules are those of classical chess without the two squares move for pawns, en-passant moves and castling. Additionally, as a countermeasure for not supporting promotions, our implementation provides additional winning condition by reaching the opponent\u2019s backrank with a pawn.\n2.3. Semantics. The game is played between two players, black and white, on a rectangular board. White player is always the first to move. The board size is given by the two numbers in the <BOARD> section, generated from \u201cboard\u201d non-terminal, which represents the width and the height, respectively. Subsequently the initial position is given: empty squares are represented by dots, white pieces as the uppercase letters, and black pieces as the lowercase letters. To be considered as valid, there must be exactly height rows and width columns. Although it may be asymmetric, the initial position is given from the perspective of the white player, i.e. forward means \u201cup\u201d for white, and \u201cdown\u201d for black.\nDuring a single turn, a player has to make a move using one of his pieces. Making a move is done by choosing the piece, and change its position according to the specified movement rule for this piece. At any time, at most one piece can occupy a square, so finishing a move on a square containing a piece (regardless of the owner) results in removing it (capturing). Note that in the situation when the destination square is the starting one, the whole board remains unchanged. No piece addition is possible. After performing a move, the player gives control to the opponent.\n1http://en.wikipedia.org/wiki/Minichess#5.C3.975_chess\n<<Simplified Gardner>> <BOARD> 5 5 |rnbqk| |ppppp| |.....| |PPPPP| |RNBQK| <PIECES> // P - pawn, R - rook, N - knight, B - bishop, Q - queen, K - king P (0,1,e) + (-1,1,p) + (1,1,p) & R (0,1,e)(0,1,e)^* + (0,1,e)^*(0,1,p) + (0,-1,e)(0,-1,e)^* + (0,-1,e)^*(0,-1,p) +\n(1,0,e)(1,0,e)^* + (1,0,e)^*(1,0,p) + (-1,0,e)(-1,0,e)^* + (-1,0,e)^*(-1,0,p) & N (2,1,e) + (2,-1,e) + ... + (-1,-2,p) & B (1,1,e) + (1,1,p) + (1,1,e)^2 + (1,1,e)(1,1,p) + (1,1,e)^3 + (1,1,e)^2(1,1,p) +\n(1,1,e)^4 + (1,1,e)^3(1,1,p) + ... + (-1,-1,e)^4 + (-1,-1,e)^3(-1,-1,p) & Q (0,1,e)(0,1,e)^* + (0,1,e)^*(0,1,p) + (0,-1,e)(0,-1,e)^* + (0,-1,e)^*(0,-1,p) +\n(1,0,e)(1,0,e)^* + (1,0,e)^*(1,0,p) + (-1,0,e)(-1,0,e)^* + (-1,0,e)^*(-1,0,p) + (1,1,e)(1,1,e)^* + (1,1,e)^*(1,1,p) + (1,-1,e)(1,-1,e)^* + (1,-1,e)^*(1,-1,p) + (1,-1,e)(1,-1,e)^*+(1,-1,e)^*(1,-1,p)+(-1,-1,e)(-1,-1,e)^*+(-1,-1,e)^*(-1,-1,p) &\nK (0,1,e) + (0,1,p) + (0,-1,e) + (0,-1,p) + ... + (-1,-1,e) + (-1,-1,p) & <GOALS>"}, {"heading": "100 &", "text": "@P 0 4, 1 4, 2 4, 3 4, 4 4 & @p 0 0, 1 0, 2 0, 3 0, 4 0 & #K 0 & #k 0 &\nFigure 2. The Simplified Boardgames version of Gardner.\nThe movement rules of available game pieces are declared in the <PIECES> section and generated from the \u201cpieces\u201d non-terminal. One piece can have at most one movement rule, which consists of the letter of the piece and a regular expression. A piece without the movement rule is allowed but cannot be moved. For a given piece, the set of legal moves is the set of words described by a regular expression over an alphabet \u03a3 containing triplets (\u2206x,\u2206y, on), where \u2206x and \u2206y are relative column/row distances, and on \u2208 {e, p, w} describes the content of the destination square: e indicates an empty square, p a square occupied by an opponent piece, and w a square occupied by an own piece. We assume that x \u2208 {\u2212width + 1, . . . ,width\u2212 1}, and y \u2208 {\u2212height + 1, . . . , height \u2212 1}, and so \u03a3 is finite.\nWhile the piece\u2019s owner is defined by the case (upper or lower), its letter encode the piece\u2019s type. Pieces with the same type have the same language of legal moves, thus declaration is made for the white pieces only. Note, however, that a positive \u2206y means forward, which is a subjective direction, and differs in meaning depending on the player.\nConsider a piece and a word w \u2208 \u03a3\u2217 that belongs to the language described by the regular expression in the movement rule for this piece. Let w = a1a2 . . . ak, where each ai = (\u2206xi,\u2206yi, oni), and suppose that the piece stands on a square \u3008x, y\u3009. Then, w describes a move of the piece, which is applicable in the current board position if and only if, for every i such that 1 \u2264 i \u2264 k, the content\ncondition oni is fulfilled by the content of the square \u3008x + \u2211i j=1 \u2206xj , y + \u2211i\nj=1 \u2206yj\u3009. The move of w changes the position of the piece piece from \u3008x, y\u3009 to \u3008x + \u2211k i=1 \u2206xk, y + \u2211k k=1 \u2206yi\u3009.\nIn contrast to the Bj\u00f6rnsson\u2019s definition, rules where the same square is visited more then once are allowed. Technically, we found this restriction superfluous. Note that during computation of legal moves, the board position is not changed, so the field with relative coordinates (0, 0) always contains the player\u2019s moving piece. Hence, (0, 0,w) is always legal, while (0, 0, e) is always illegal. An example of how move rules work is shown in Figure 3.\nLastly, the <GOALS> section provides game terminal conditions. The first value is the turnlimit, whose exceedance automatically causes a draw if no other terminal condition is fulfilled. The turnlimit is given in the so-called \u201chalf-moves\u201d in chess, i.e. the value t means d t2e moves of the first player and b t2c moves of the second player. A player automatically loses the game when he has no legal moves at the beginning of his turn (e.g. because he has no pieces left).\nA player can win by moving a certain piece to a fixed set of squares, which are defined by entries denoted by the @ symbol. The values are given in absolute coordinates, and (0, 0) square is located in the lower left corner of the board. Alternatively, as introduced in [3], a player can lose if the number of his pieces of a certain type reaches a given amount, defined by entries denoted by the # symbol. The terminal conditions can be asymmetric."}, {"heading": "3. Summary", "text": "The language can describe many of the fairy chess variants in a concise way. Unlike Metagame, Simplified Boardgames includes games with asymmetry and position-dependent moves (e.g. Chess initial double pawn move). The usage of finite automata for describing pieces\u2019 rules, and thus to move generation, allows fast and efficient computation of all legal moves given a board setup. The regularity of the description makes it also convenient for e.g. procedural content generation [4, 5].\nHowever, it causes some important limitations. Actions like castling, en-passant, or promotions are impossible to express, as all the moves depending on the game history. Although absolute position of a piece is not available, this nuisance can be cleverly bypassed, so it is possible to describe e.g. chess pawn initial two-square advance."}], "references": [{"title": "Learning Rules of Simplified Boardgames by Observing", "author": ["Y. Bj\u00f6rnsson"], "venue": "In European Conference on Artificial Intelligence,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "The GRL System: Learning Board Game Rules With Piece-Move Interactions", "author": ["P. Gregory", "Y. Bj\u00f6rnsson", "S. Schiffel"], "venue": "In IJCAI Workshop on General Intelligence in Game-Playing Agents", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "Testing General Game Players Against a Simplified Boardgames Player Using Temporal-difference Learning", "author": ["J. Kowalski", "A. Kisielewicz"], "venue": "In Evolutionary Computation (CEC),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "Procedural Content Generation for GDL Descriptions of Simplified Boardgames", "author": ["J. Kowalski", "M. Szyku\u0142a"], "venue": "[cs.AI],", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Evolving Chesslike Games Using Relative Algorithm Performance Profiles", "author": ["J. Kowalski", "M Szyku\u0142a"], "venue": "In Applications of Evolutionary Computation,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2016}, {"title": "Gardner\u2019s minichess variant is solved", "author": ["M. Mhalla", "F. Prost"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "METAGAME in Symmetric Chess-Like Games", "author": ["B. Pell"], "venue": "In Programming in Artificial Intellegence: The Third Computer Olympiad.,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1992}], "referenceMentions": [{"referenceID": 0, "context": "Introduction Simplified Boardgames is a class of fairy-chess-like games, first introduced in [1], and slightly extended in [3] (see [2] for an alternative extension).", "startOffset": 93, "endOffset": 96}, {"referenceID": 2, "context": "Introduction Simplified Boardgames is a class of fairy-chess-like games, first introduced in [1], and slightly extended in [3] (see [2] for an alternative extension).", "startOffset": 123, "endOffset": 126}, {"referenceID": 1, "context": "Introduction Simplified Boardgames is a class of fairy-chess-like games, first introduced in [1], and slightly extended in [3] (see [2] for an alternative extension).", "startOffset": 132, "endOffset": 135}, {"referenceID": 6, "context": "For comparison, Metagame system, which can be seen as Simplified Boardgames predecessor, had its grammar explicitly declared in [7].", "startOffset": 128, "endOffset": 131}, {"referenceID": 0, "context": "Syntax and semantics In this section we present the formal grammar for Simplified Boardgames, inspired by the look of training records provided by Bj\u00f6rnsson in his initial work [1].", "startOffset": 177, "endOffset": 180}, {"referenceID": 2, "context": "The version presented differs only slightly comparing to the versions used in [3, 4, 5].", "startOffset": 78, "endOffset": 87}, {"referenceID": 3, "context": "The version presented differs only slightly comparing to the versions used in [3, 4, 5].", "startOffset": 78, "endOffset": 87}, {"referenceID": 4, "context": "The version presented differs only slightly comparing to the versions used in [3, 4, 5].", "startOffset": 78, "endOffset": 87}, {"referenceID": 5, "context": "It is 5 \u00d7 5 chess variant proposed by Martin Gardner in 1969 and weakly solved in 2013 [6] \u2013 the game-theoretic value has been proved to be a draw.", "startOffset": 87, "endOffset": 90}, {"referenceID": 2, "context": "Alternatively, as introduced in [3], a player can lose if the number of his pieces of a certain type reaches a given amount, defined by entries denoted by the # symbol.", "startOffset": 32, "endOffset": 35}, {"referenceID": 3, "context": "procedural content generation [4, 5].", "startOffset": 30, "endOffset": 36}, {"referenceID": 4, "context": "procedural content generation [4, 5].", "startOffset": 30, "endOffset": 36}], "year": 2016, "abstractText": "We formalize Simplified Boardgames language, which describes a subclass of arbitrary board games. The language structure is based on the regular expressions, which makes the rules easily machine-processable while keeping the rules concise and fairly human-readable.", "creator": "TeX"}}}