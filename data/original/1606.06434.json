{"id": "1606.06434", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Jun-2016", "title": "The Schema Editor of OpenIoT for Semantic Sensor Networks", "abstract": "Ontologies provide conceptual abstractions over data, in domains such as the Internet of Things, in a way that sensor data can be harvested and interpreted by people and applications. The Semantic Sensor Network (SSN) ontology is the de-facto standard for semantic representation of sensor observations and metadata, and it is used at the core of the open source platform for the Internet of Things, OpenIoT. In this paper we present a Schema Editor that provides an intuitive web interface for defining new types of sensors, and concrete instances of them, using the SSN ontology as the core model. This editor is fully integrated with the OpenIoT platform for generating virtual sensor descriptions and automating their semantic annotation and registration process.", "histories": [["v1", "Tue, 21 Jun 2016 06:20:22 GMT  (1060kb,D)", "http://arxiv.org/abs/1606.06434v1", "First Joint International Workshop on SEMANTIC SENSOR NETWORKS AND TERRA COGNITA, The 14th International Semantic Web Conference Workshops, October 11-15, 2015"]], "COMMENTS": "First Joint International Workshop on SEMANTIC SENSOR NETWORKS AND TERRA COGNITA, The 14th International Semantic Web Conference Workshops, October 11-15, 2015", "reviews": [], "SUBJECTS": "cs.AI cs.HC", "authors": ["prem prakash jayaraman", "jean-paul calbimonte", "hoan nguyen mau quoc"], "accepted": false, "id": "1606.06434"}, "pdf": {"name": "1606.06434.pdf", "metadata": {"source": "CRF", "title": "The Schema Editor of OpenIoT for Semantic Sensor Networks", "authors": ["Prem Prakash Jayaraman", "Jean-Paul Calbimonte", "Nguyen Mau Quoc"], "emails": ["prem.jayaraman@rmit.edu.au", "name.surname@epfl.ch", "hoan.quoc@insight-centre.org"], "sections": [{"heading": "1 Motivation", "text": "The Internet of Things (IoT) paradigm is expected to dramatically change the way we produce, transmit and process data. IoT makes it possible for devices, objects, people, and things, to observe, collect and send all sorts of data in different domains, ranging from environmental sensing to health monitoring or smart cities. As a result, a large number of highly heterogeneous interconnected objects will contribute to the Web of Data, challenging IoT systems to effectively exploit and make use of this data. One way to deal with this heterogeneity is through semantic models that provide explicit meaning about the data that is represented. Semantic technologies such as OWL and RDF are standards for modeling and defining concepts and relationships in arbitrary domains of use, and constitute a promising solution to help coping with this problem. Based on these well-founded semantic technologies, the OpenIoT open-source platform for IoT (http://openiot.eu/) provides a flexible cloud-based architecture that helps manage the life cycle of IoT services and applications. The OpenIoT architecture includes, among others, modules that manage the sensor data acquisition, namely X-GSN, the semantic data provision and querying (Linked Sensor Middleware-Light, namely LSM-Light), as well as front-end tools for data discovery and analytics (e.g. Request Definition, and Request Presentation). The ar X iv :1 60 6.\n06 43\n4v 1\n[ cs\n.A I]\n2 1\nJu n\nintegration of all these modules is possible thanks to the use of the OpenIoT ontology, which is based on the SSN ontology [2]. However, these core ontology models are not specific to any domain, and therefore require to be extended or complemented with other vocabularies in order to be used in practice.\nGeneral purpose ontology editors (e.g. Prot\u00e9g\u00e9 [3]) are suitable for defining, modifying and customizing ontologies, but they require users to be familiar with ontology modeling and the basics of description logics. Considering that users of IoT platforms are usually not well-versed in ontological engineering, this can represent an overkill for IoT system administrators/users who simply need to add a new sensor or a type of sensor. Moreover, the general purpose editors are not integrated into the workflow of an IoT system (e.g. as OpenIoT) in such a way that sensor descriptions generated are automatically published as Linked Data, and ready to be discovered, queried and re-used. Hence, it is vital to provide simple and intuitive tools that allow IoT users to perform tasks such as add a new sensor or a sensor type intuitively while preserving the ontological foundations of the model.\nThe Sensor Schema Editor of OpenIoT that we present in this paper aims at providing a solution to this problem. In this first evolution of the editor, we provide the means to: (i) define/modify new sensor types, and (ii) create new sensor instances. A novel feature of the Sensor Schema Editor compared to other UI-based ontology editors [1] is that it is a fully functional, implemented prototype completely integrated with the OpenIoT system. The extensions to the ontology generated by the creation of new sensor types are linked dynamically to the OpenIoT ontology using the LSM-Light component. Hence, the extensions to the ontology created are accessible and visible to other system components."}, {"heading": "2 Sensor Schema Editor", "text": "The Sensor Schema Editor supports the average user in annotating sensors and sensor-related data using the OpenIoT ontology and Linked Data principles. The interface automates the generation of RDF descriptions for sensor node information submitted by the users. As an example, let us consider an IoT deployment where dozens of WeatherStation sensors are deployed in a determined geographical area. In OpenIoT [4], all sensors and observations are represented in terms of ontological concepts. For example, Figure 1 depicts a description of a sensor type following the SSN-based OpenIoT ontology. A sensor (e.g. WeatherStation) measures air temperature and humidity, and has some pre-defined accuracy and frequency parameters, typically defined by the vendor specification or configuration. This sensor type constitutes an extension of the ontology for this particular use case. Based on this new type of sensor, we are able to create instances with user provided descriptions that represent deployed sensors of that type. The LSM-Light component will then semantically annotate and publish the sensor type and instance descriptions as Linked Data, making it searchable and discoverable through SPARQL queries. Figure 2 illustrates an overview of how the sensor instance is annotated and published in Linked Data format based on the\nnew sensor type (e.g. WeatherStation) created. The annotation process strictly follows the OpenIoT ontology which is an extension of SSN ontology."}, {"heading": "3 Sensor Schema Editor Implementation", "text": "The Sensor Schema Editor4 has two components: 1) a web-based interface (Sensor Type and Instance Editors) and 2) a back-end server. The web interface is developed in Java using the JSF framework. The back-end is also developed in Java and employs the Restlet framework (http://restlet.org/). The current implementation of the Sensor Schema Editor is capable of generating new sensor types and instances based on the OpenIoT ontology."}, {"heading": "3.1 Sensor Type Editor", "text": "Figure 3 presents the Sensor Type Editor, an easy to use intuitive interface allowing novice users to define new sensor types. It supports the following concepts to define a new sensor type.\nSensor Type Name/id: A human friendly name for the new sensor type. Observed Property: A property that is observed by the new sensor type. The observes relation is used to define the relation between a sensor and its property. The editor allows a sensor to be associated with multiple observed properties.\nMeasuringCapability: Collects together measurement properties, in particular the accuracy and frequency. Accuracy is the closeness of agreement between the value of an observation and the true value of the observed quality. Frequency is the smallest possible time between one observation and the next. 4 Available as part of OpenIoT on Github: https://github.com/OpenIotOrg/openiot\nRegister: The sensor type editor also provides means to generate the RDF description of the sensor and register it with the OpenIoT LSM-Light service.\nThis allows the sensor type to be discovered, queried and re-used by user communities.\nIn the example depicted in Figure 3, we define a sensor type WeatherStation. This sensor observes two properties namely AirTemperature and Humidity (URIs). Each of these properties has an associated measurement capability (accuracy and frequency) that can be defined by the user depending on the datasheet provided by the sensor manufacturer."}, {"heading": "3.2 Sensor Instance Editor", "text": "The OpenIoT sensor instance editor uses the sensor type definition created earlier, to generate a concrete (deployed) sensor instance. The instance is a repre-\nsentation of the actual physical/virtual sensor. Figure 4 provides a screenshot of the sensor instance editor. The instance includes the following information:\nSensor Name: the identification of the deployed sensor, e.g. demo-weatherstation Owner/Description: Provides sensor description including who owns it. Location: The physical location of the sensor (based on a Map). Feature of Interest: This is used within the OpenIoT ontology to dynamically link the sensor instance to a domain ontology, e.g. demo-weatherstation points to the observed feature of interest crop-growth.\nObserved Properties: These are fetched from the sensor type definition. The user specifically can define the unit of measurement (e.g. Kelvin or Celsius for temperature) and the mapping of the ontology observed property field to the XGSN component (responsible to stream data from sensors). The mapping allows X-GSN to semantically annotate incoming sensor data streams with the sensor instance and type description.\nGenerate Metadata: This function registers the sensor instance with the LSMLight component and also provides the user with a metadata configuration file required for the functioning of X-GSN."}, {"heading": "4 Conclusions", "text": "In this paper we have presented a web-based Sensor Schema Editor that assists users defining new types of sensors, thus extending the underlying ontology; and creating instances of them in the form of Linked Data, using the SSN ontology as its core model. This editor is part of the OpenIoT open-source platform for IoT development and deployment, and it bridges the gap between the know-how of IoT system administrators, and the SSN-based ontology model that governs the components of OpenIoT. In the future we plan to include customizing other parameters of the sensor description (e.g. custom measurement capabilities) and adding more complex validation mechanisms that alert the user if the produced schemas may produce conflicts in the ontology model. Furthermore, we plan to allow bulk generation of instances for the cases where large numbers of sensor instances need to be created. Acknowledgments Supported by the SNSF Nano-Tera OpenSense2 project."}, {"heading": "1. Butt, A.S., Haller, A., Liu, S., Xie, L.: Activeraul: A web form-based user interface to create and maintain rdf data. In: International Semantic Web Conference (Posters", "text": "& Demos. vol. 1035, pp. 117\u2013120 (2013) 2. Compton, M.e.a.: The ssn ontology of the w3c semantic sensor network incubator group. Web Semantics: Science, Services and Agents on the WWW 17, 25\u201332 (2012) 3. Knublauch, H., Fergerson, R.W., Noy, N.F., Musen, M.A.: The prot\u00e9g\u00e9 owl plugin: An open development environment for semantic web applications. In: The Semantic Web\u2013ISWC 2004, pp. 229\u2013243. Springer (2004) 4. Soldatos, J., Kefalakis, N., Hauswirth, M., Serrano, M., Calbimonte, J.P., Riahi, M., Aberer, K., Jayaraman, P.P., Zaslavsky, A., \u017darko, I.P., et al.: Openiot: Open source internet-of-things in the cloud. In: Interoperability and Open-Source Solutions for the Internet of Things, pp. 13\u201325. Springer (2015)"}], "references": [{"title": "Activeraul: A web form-based user interface to create and maintain rdf data", "author": ["A.S. Butt", "A. Haller", "S. Liu", "L. Xie"], "venue": "International Semantic Web Conference (Posters & Demos. vol. 1035, pp. 117\u2013120", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2013}, {"title": "The ssn ontology of the w3c semantic sensor network incubator group", "author": ["Compton", "M.e.a."], "venue": "Web Semantics: Science, Services and Agents on the WWW 17, 25\u201332", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2012}, {"title": "The prot\u00e9g\u00e9 owl plugin: An open development environment for semantic web applications", "author": ["H. Knublauch", "R.W. Fergerson", "N.F. Noy", "M.A. Musen"], "venue": "The Semantic Web\u2013ISWC 2004, pp. 229\u2013243. Springer", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2004}, {"title": "Openiot: Open source internet-of-things in the cloud", "author": ["J. Soldatos", "N. Kefalakis", "M. Hauswirth", "M. Serrano", "J.P. Calbimonte", "M. Riahi", "K. Aberer", "P.P. Jayaraman", "A. Zaslavsky", "\u017darko", "I.P"], "venue": "Interoperability and Open-Source Solutions for the Internet of Things, pp. 13\u201325. Springer", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [{"referenceID": 1, "context": "integration of all these modules is possible thanks to the use of the OpenIoT ontology, which is based on the SSN ontology [2].", "startOffset": 123, "endOffset": 126}, {"referenceID": 2, "context": "Prot\u00e9g\u00e9 [3]) are suitable for defining, modifying and customizing ontologies, but they require users to be familiar with ontology modeling and the basics of description logics.", "startOffset": 8, "endOffset": 11}, {"referenceID": 0, "context": "A novel feature of the Sensor Schema Editor compared to other UI-based ontology editors [1] is that it is a fully functional, implemented prototype completely integrated with the OpenIoT system.", "startOffset": 88, "endOffset": 91}, {"referenceID": 3, "context": "In OpenIoT [4], all sensors and observations are represented in terms of ontological concepts.", "startOffset": 11, "endOffset": 14}], "year": 2016, "abstractText": "Ontologies provide conceptual abstractions over data, in domains such as the Internet of Things, in a way that sensor data can be harvested and interpreted by people and applications. The Semantic Sensor Network (SSN) ontology is the de-facto standard for semantic representation of sensor observations and metadata, and it is used at the core of the open source platform for the Internet of Things, OpenIoT. In this paper we present a Schema Editor that provides an intuitive web interface for defining new types of sensors, and concrete instances of them, using the SSN ontology as the core model. This editor is fully integrated with the OpenIoT platform for generating virtual sensor descriptions and automating their semantic annotation and registration process.", "creator": "LaTeX with hyperref package"}}}