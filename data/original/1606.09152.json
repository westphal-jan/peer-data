{"id": "1606.09152", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Jun-2016", "title": "Actor-critic versus direct policy search: a comparison based on sample complexity", "abstract": "Sample efficiency is a critical property when optimizing policy parameters for the controller of a robot. In this paper, we evaluate two state-of-the-art policy optimization algorithms. One is a recent deep reinforcement learning method based on an actor-critic algorithm, Deep Deterministic Policy Gradient (DDPG), that has been shown to perform well on various control benchmarks. The other one is a direct policy search method, Covariance Matrix Adaptation Evolution Strategy (CMA-ES), a black-box optimization method that is widely used for robot learning. The algorithms are evaluated on a continuous version of the mountain car benchmark problem, so as to compare their sample complexity. From a preliminary analysis, we expect DDPG to be more sample efficient than CMA-ES, which is confirmed by our experimental results.", "histories": [["v1", "Wed, 29 Jun 2016 15:22:13 GMT  (601kb,D)", "https://arxiv.org/abs/1606.09152v1", null], ["v2", "Mon, 22 Aug 2016 11:07:23 GMT  (758kb,D)", "http://arxiv.org/abs/1606.09152v2", "Proceedings JFPDA (Journees Francaises Planification Decision Apprentissage)"]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["arnaud de froissard de broissia", "olivier sigaud"], "accepted": false, "id": "1606.09152"}, "pdf": {"name": "1606.09152.pdf", "metadata": {"source": "CRF", "title": "Actor-critic versus direct policy search: a comparison based on sample complexity", "authors": ["Arnaud de Froissard", "Olivier Sigaud"], "emails": ["olivier.sigaud@isir.upmc.fr"], "sections": [{"heading": "1 Introduction", "text": "In order to control more and more mechanically complicated and versatile robotic platforms, robot learning is now a well-accepted necessity in the robotics literature (Peters & Sigaud, 2010). The main subfields of robot learning consists either in learning models of the robot or its interactions with the environment (e.g. Salaun et al. (2010); Droniou et al. (2012)), or improving the controller of robots based on experience. In the latter case, the controllers are generally represented as a parametric function of some relevant variables, such as the state of the robot in the case of closed-loop controllers or just a time-related variable in the case of open-loop controllers. Improving the controller efficiency with respect to some cost function generally requires to perform many evaluations of controllers on the real robot with different parameter values. This process is often time consuming, it may lead to wear and tear of the mechanical structure or even to damage if the tested controllers generate dangerous behaviours. As a result, sample efficiency is a crucial property of any robot learning method.\nThese methods can be grossly grouped into two main categories:\n\u2022 Direct policy search methods which directly search the space of policy parameters through stochastic optimization, as the name implies.\n\u2022 Actor-critic methods, a subset of reinforcement learning methods (Sutton & Barto, 1998), which use an intermediate structure, called the critic, to determine how to update the policy in the direction of greater performance.\nIn Stulp & Sigaud (2012a), the authors showed that, despite an initial attraction towards actor-critic methods such as eNAC (Peters & Schaal, 2008), the robot learning literature was converging to black-box optimization methods such as the Covariance Matrix Adaptation Evolution Strategy (CMA-ES), using Dynamic Movement Primitives (DMPs) (Ijspeert et al., 2013) as low-dimensional representations.\nThis temporary supremacy of black-box optimization methods can be explained from several facts. First, actor-critic methods require the approximation of the value or the action-value functions, but the accuracy of this approximation is critical to performance and was limited by the widely used linear function approximators. From one side, simple linear function approximators can be trained with guaranteed convergence, but have\nar X\niv :1\n60 6.\n09 15\n2v 2\n[ cs\n.L G\n] 2\n2 A\nug 2\nJFPDA 2016\na poor representational power, leading to degraded performance. From the other side, more complex, nonlinear function approximators can represent more accurately the real value function, but training them cannot be guaranteed to converge (Baird & Klopf, 1993). Second, real-world robotic control problems may require the use of a large state representation, and all the actor-critic methods cited above did not scale well in that respect until recently.\nThe situation changed drastically with the recent publication of several \u201cdeep\u201d reinforcement learning algorithms. The discrete action Deep Q-Network (DQN) algorithm (Mnih et al., 2015) and its continuous action, actor-critic counterpart, Deep Deterministic Policy Gradient (DDPG), (Lillicrap et al., 2015) overthrew these limitations by making the training process of the value function approximator more stable, robust, and scalable. The wide applicability of DDPG to several benchmarks is quite impressive, but the paper was published without a performance comparison with any other method. Recently, a general comparison of many robot learning methods was published based on several simulation benchmarks (Duan et al., 2016), but it only compares the final controller performance and does not come with a detailed analysis of why some methods outperform others.\nIn this paper, we focus on sample efficiency and show that, in addition to begin much more scalable, the actor-critic approach in DDPG is also much more sample efficient than the direct policy search approach of CMA-ES, even for a 280 parameters controller applied to the small-size mountain car benchmark.\nThe paper is organized as follows. In Section 2, we quickly present both compared algorithms. In Section 3 and 4, we respectively describe the experimental set-up of the comparison and the corresponding results. The significance of these results is discussed in Section 5, before we conclude and highlight directions for future work."}, {"heading": "2 Algorithms", "text": "In this Section, we shortly describe the training mechanisms in DDPG and CMA-ES so as to higlight their differences."}, {"heading": "2.1 Deep Deterministic Policy Gradient", "text": "Deep Deterministic Policy Gradient (Lillicrap et al., 2015) is an actor-critic algorithm using deep neural networks to represent both the value function and the policy over a continuous state-action space. It combines ideas from DQN (Mnih et al., 2015), Deterministic Policy Gradient (DPG) (Silver et al., 2014) and batch normalization (Ioffe & Szegedy, 2015).\nIn DDPG, the actor network deterministically maps a state vector to an action vector, thus learning a deterministic policy, which is easier than learning a stochastic one, the search space being smaller.\nWe note hereafter t the current time step, st the state vector at t, at the action vector at t and rt the reward at t.\nWhen interacting with the environment, each (st, at, rt, st+1) sample is stored in a replay buffer. During training, a minibatch of samples is randomly drawn from the replay buffer, making them seemingly i.i.d, which is a key trick borrowed from DQN to improve the stability of the algorithm.\nA second trick is borrowed from DQN to improve stability. Instead of directly using the actor and the critic networks to perform the standard temporal computation, two networks called \u201ctarget networks\u201d are used. These networks ensure more stable computation because they are updated more slowly. In practice, they track the current networks using \u03b8\u2032 = \u03b8\u2032\u00d7 (1\u2212\u03c4)+\u03b8\u00d7\u03c4 with \u03c4 small, where \u03b8 is the set of parameters of the considered network.\nThus, the critic is trained to learn the state-action value function by minimizing the temporal difference error using\n\u03b4t = rt + \u03b3Q \u2032(st+1, \u03c0 \u2032(st+1)|\u03b8\u2032)\u2212Q(st, at|\u03b8),\nwhere \u03b3 is the discount factor, Q is the current critic, Q\u2032 is the target critic, \u03c0\u2032 is the target policy and \u03b8 (resp. \u03b8\u2032) are the parameters of the critic (resp. target critic) networks. The algorithm minimizes the squared error\nover the minibatch through gradient descent, using the loss function\nL = 1/N \u2211 i\u2208m \u03b4i 2,\nwhere N is the size of the minibatch and m the content of the minibatch. Thanks to the generalization property of neural networks, the critic performs accurate approximation of the action-value function for each point of the state space without the need for a lot of samples. Note however that gradient descent is a local optimization method and does not have any guarantee to converge to a global optimum.\nThen, the actor is trained using the gradient of the deterministic policy, as proposed in Silver et al. (2014):\n\u2207w\u03c0(s, a) = E\u03c1(s)[\u2207aQ(s, a|\u03b8)\u2207w\u03c0(s|w)].\nThis gradient is calculated by first backpropagating the gradient of the value function with respect to the actions through the critic. Computing the gradient with respect to actions is similar to doing so with respect to weights, as already noted in (Hafner & Riedmiller, 2011). Then the algorithm backpropagates the obtained gradient in the actor with respect to its parameters from its output layer to its input layer. The whole training computation thus relies on efficient gradient backpropagation algorithms provided by any deep learning library (here we use TensorFlow). Actually, the gradient propagated over the actor network expresses in which direction to move in the policy parameter space to get better outcomes for a given state.\nThe third trick, batch normalization, also improves stability and accelerates learning. Batch normalization is not used in the experiments hereafter, and we will not describe it here. The reader is refered to the original paper (Ioffe & Szegedy, 2015) for a description.\nThe actor and critic networks are trained after each step in the environment. Although the training process inherits off-policy properties from DPG, it is performed in parallel to running an episode, thus the algorithm improves its policy while using it to interact with the environment. However, training of the networks can be more or less decoupled from the sample acquisition process depending on the replay buffer data management policy, which can be critical for the efficiency of the algorithm (de Bruin et al., 2015).\nHere we use a replay buffer with a maximum size M , where new samples are added until the maximum capacity is reached. From there, for each new sample, a previously stored sample is randomly deleted from the replay buffer. As proposed in (de Bruin et al., 2015), the F first samples are kept and are not replaced with new samples to keep a pool of initial samples coming from non-optimal trajectories."}, {"heading": "2.2 Covariance Matrix Adaptation Evolution Strategy", "text": "Covariance Matrix Adaptation Evolution Strategy (Hansen et al., 2003) is a gradient-free evolutionary method, using random variations to improve a set of real-valued parameters relatively to an objective function. The general idea consists in representing a distribution over sets of parameter values through a covariance matrix, evaluating each set of parameters and updating the covariance matrix towards better performance.\nIn the context of robotics experiments, the objective function is the outcome of one or several episodes of the considered task and the parameters are those of the controller that runs the episodes.\nThus, at each training step, that is after each whole batch of episodes, a population of test controllers is sampled around the current one using the covariance matrix, and evaluated on the task. One can immediately see that performance improvement relies on running many episodes, which is not sample efficient, whereas in actor-critic methods like DDPG, the actor can be updated at each step just from the gradient of the critic, without requiring any new samples, provided that the replay buffer provides good enough information to update the critic."}, {"heading": "3 Experimental set-up", "text": "Our goal in this paper is to compare DDPG and CMA-ES in terms of sample efficiency.\nJFPDA 2016\nA task is characterized by a state space, a transition function that, given the current state and action, gives a probability distribution over the next state, and a reward function that, given a transition, gives a scalar. Here, we restrict our analysis to episodic tasks that have one starting state and potentially several terminal states.\nWe evaluate the performance of both algorithms on a continuous version of the mountain car benchmark. In this task, a car is placed between two hills, and has to reach a target on the top of one hill. The car does not have sufficient power to reach the reward by driving directly towards the target, and needs to gain momentum by going up and down the slopes of both hills. A wall prevents the car from going to far away from the non rewarded hill. This task is deterministic: given a state-action pair, there is a single corresponding next state. The task ends when the car reaches the top of the hill or the maximum time T has been reached.\nThe reward signal is a positive scalar R obtained when reaching the target. The use of a discount factor in DDPG favors shorter trajectories to the target. In order to incorporate the same drive towards shorter trajectories in CMA-ES, we discount the final reward in CMA-ES using the same discount factor \u03b3 as in DDPG. A cost proportional to the square of the applied action at all steps is also added, using a cost coefficient \u03c1. This signal generates a strong local optimum that corresponds to not moving, allowing to test the exploration efficiency of both algorithms. No negative scalar is received when reaching the maximum amount of time as the state vector does not include time, and the task has to be fully observable.\nIn order to facilitate the comparison, both algorithms are run on the same controller structure, that is a multilayer neural network. Since CMA-ES uses a covariance matrix, its space complexity is quadratic, so the number of actor parameters must be kept low. In order to determine the adequate dimension for a network, we started with very small networks and increased the size as long as CMA-ES performance was improving for a reasonnable computational budget. In order to make the comparison more fair, we decided not to incorporate batch normalization in DDPG, because using batch normalization in DDPG would require adding several dedicated layers of neurons in the actor network, thus would result in a different structure for the DDPG and the CMA-ES actor networks.\nThe resulting actor network has 2 units in its input layer (one for the car position, one for its speed), 2 hidden layers with h1 and h2 units respectively and 1 output unit (the positive or negative acceleration, constrained in the range of actions \u03b4 = [-1,1]), for a total of 51 parameters. As in the original article describing DDPG, the first hidden layer uses the rectified non-linearity as unit transfer function and the second the tanh function. Furthermore, the critic in DDPG contains 2 hidden layers of 20 and 10 units respectively, with the same internal structure(rectified non-linearity and tanh). Actions are added only after the first hidden layer. The learning rate of the critic, \u03b1c, is 0.005, that of the actor, \u03b1a, is 0.01. After each action step of DDPG, a training step is performed using one minibatch of N samples.\nAll the meta-parameters of the experimental study are shown in Table 1 1.\nWhen solving this task, we are interested in how much data from the environment is needed to learn a good policy for both algorithms. Therefore the metric we use is the number of interactions with the environment.\nFor each performed action, DDPG goes through one training step on a single batch of samples. But using multiples batchs may provide a faster convergence, and consequently requires less interactions with the environment to get to the same performance. Therefore, we also compare DDPG with one minibatch per training step to DDPG with four minibatches per training step.\n1 The source code of the experiment is available online: https://github.com/MOCR/DDPG"}, {"heading": "4 Simulation results", "text": "All performance curves shown below are averaged over 10 runs on all figures, and are obtained in less than one hour on a small CPU cluster with 16Go RAM nodes cadenced at 2.26 Ghz.\nFigure 1 illustrates the final policies obtained with CMA-ES and DDPG on the mountain car problem. One can see that the policy found with DDPG shows a better generalization outside the illustrated trajectory than the one found with CMA-ES.\nFigure 2 shows the evolution of the learning performance in terms of the time needed to reach the target and collected reward with DDPG and CMA-ES.\nOne can see that in terms of time per episode as well as collected reward, DDPG converges faster in terms of number of interactions, with less variance over different runs, and is significantly more sample efficiency than CMA-ES.\nActually, on Figure 2(b), the best performance found over all the CMA-ES evaluations is slighly better than\nJFPDA 2016\nthe one found with DDPG, but this does not seem to be significant, DDPG being better on average. By the way, although their experimental settings differ from ours, Duan et al. (2016) also find better performance with CMA-ES compared to DDPG in some cases.\nFigure 3 shows the performance of DDPG when performing either one or four minibatches training iterations per training step.\nBy using more minibatches between each step in the environment, DDPG requires even fewer interactions with the environment to converge.\nFinally, Figure 4 shows the impact of the size of the actor on the learning performance of DDPG and CMAES.\nUsing a larger network with h1 = 20 and h2 = 10, resulting in 281 parameters to be optimized, has no\nJFPDA 2016\nimpact on the learning performance of DDPG, whereas it is slightly detrimental to the convergence and stability of CMA-ES on the long run. However, with even larger actors, CMA-ES is slower to converge, and quickly runs out of memory for too large sizes, as already pointed out in Duan et al. (2016)."}, {"heading": "5 Discussion", "text": "We have chosen the Mountain car problem because this facilitates the comparison between DDPG and CMAES, due to the low dimensionality of the task. It should be noted that using a continuous version of this problem \u201cmakes the task easier for the CMA-ES and more difficult for the NAC\u201d (Heidrich-Meisner & Igel, 2008), NAC being an actor-critic ancestor of DDPG. The experimental results described above have been obtained with a rather small actor network.\nBased on our evaluations, the general finding is that DDPG requires far less interactions with then environment than CMA-ES and with less variance between different runs. In itself, this superiority is not surprising, as it may results from various facts:\n\u2022 analytic gradient descent versus stochastic gradient-free search: DDPG relies on optimized analytical gradient descent algorithms provided in deep learning toolboxes, whereas CMA-ES is gradient-free and relies on somewhat blind parameter exploration. However, CMA-ES implements reward-weighting averaging, which has been shown to be an approximate way to perform approximate natural gradient descent (Stulp & Sigaud, 2012b, 2013). Whether analytic vanilla gradient descent is more efficient than approximate natural gradient descent is an open question that needs to be investigated in the near future.\n\u2022 better reuse of sample data: Both algorithms have a very different way of using the environment. Whereas DDPG first collects samples and afterward update policy parameters to adapt to what was collected, CMA-ES first stochastically samples new parameters and then evaluates how they perform. The former uses the environment as a source of information and the latter as a source of evaluation. An other difference is that, in DDPG, the collected information stays valid and can be stored into the replay buffer for subsequent training, whereas in CMA-ES training is intrinsically local to a set of parameters, thus the evaluation samples cannot be stored or reused. Those two differences partly explain why DDPG requires less interactions with the environment to converge.\n\u2022 actor-critic versus direct policy search: As clearly explained in (Sutton et al., 2000), a critic is an efficient way to summarize the performance of a system along a trajectory, without having to perform this trajectory. Part of the better sample efficiency of DDPG with respect to CMA-ES certainly comes from the fact that the policy can be improved without calling upon new samples, once the critic correctly approximates the performance of the current policy."}, {"heading": "6 Conclusion and future work", "text": "Recent deep reinforcement learning algorithms have opened the way to many new applications due to their unprecedented scalability (Duan et al., 2016). In this paper, we have disregarded scalability to rather focus on sample efficiency. We have provided a sample efficiency comparison between the training mechanisms of DDPG and CMA-ES on a continuous version of the small mountain car benchmark problem, using deep neural networks as policy representation. Our results indicate that the DDPG mechanisms are significantly more sample efficient than those of CMA-ES. This sample efficiency is likely to reside in the use of a replay buffer, but also in the more efficient gradient descent algorithm.\nHowever, the above comparison is limited in several respects. First, the CMA-ES and DDPG training processes were compared using a neural network as policy representation, but using an open loop controller representation based on DMPs as is often done in robot learning would probably be more favorable to CMA-ES. Evaluating DDPG on neural networks versus CMA-ES on DMPs in terms of required samples to converge would be a relevant comparison for robotics that remains to be performed. One may also consider using DDPG on DMPs, but this approach would not make profit of the scaling capability of DDPG while still being subject\nto the drawbacks of DMPs (see Stulp & Sigaud (2013) for a discussion). Second, we have not incorporated some of DDPG mechanisms such as batch normalization. Assessing the influence of such processes might be of interest too. Third, it would be of much interest to disentangle the respective role of the various factors hightlighted in the above discussion to explain the superior sample efficiency of DDPG. This can be done by comparing the performance of impoverished versions of both algorithms where the sources of the various factors are neutralized one by one. This is one of the main items in our agenda for future research. Finally, the publication of DDPG has drawn attention on deep reinforcement learning as an emerging domain, and several even more recent algorithms such as (Heess et al., 2015b; Balduzzi & Ghifary, 2015; Heess et al., 2015a; Gu et al., 2016) also deserve to be studied in terms of their elementary mechanisms and efficiency factors."}, {"heading": "Acknowledgments", "text": "This work was supported by the European Union\u2019s Horizon 2020 research and innovation program within the DREAM project under grant agreement No 640891."}], "references": [{"title": "Reinforcement Learning with High-Dimensional, Continuous Actions", "author": ["C. BAIRD L", "H. KLOPF A"], "venue": null, "citeRegEx": "L. and A.,? \\Q1993\\E", "shortCiteRegEx": "L. and A.", "year": 1993}, {"title": "Continuous deep q-learning with model-based", "author": ["S. GU", "T. LILLICRAP", "I. SUTSKEVER", "S. LEVINE"], "venue": null, "citeRegEx": "GU et al\\.,? \\Q2016\\E", "shortCiteRegEx": "GU et al\\.", "year": 2016}, {"title": "Reducing the time complexity of the deran", "author": ["N. HANSEN", "D. M\u00dcLLER S", "P. KOUMOUTSAKOS"], "venue": null, "citeRegEx": "HANSEN et al\\.,? \\Q2003\\E", "shortCiteRegEx": "HANSEN et al\\.", "year": 2003}, {"title": "Memory-based control with recurrent neural", "author": ["N. 1\u201318. HEESS", "J. HUNT J", "P. LILLICRAP T", "D. SILVER"], "venue": null, "citeRegEx": "HEESS et al\\.,? \\Q2015\\E", "shortCiteRegEx": "HEESS et al\\.", "year": 2015}, {"title": "Human-level control through deep", "author": ["M. RIEDMILLER", "K. FIDJELAND A", "G OSTROVSKI"], "venue": null, "citeRegEx": "RIEDMILLER et al\\.,? \\Q2015\\E", "shortCiteRegEx": "RIEDMILLER et al\\.", "year": 2015}, {"title": "Reinforcement learning of motor skills with policy gradients", "author": ["J. PETERS", "S. SCHAAL"], "venue": "Neural networks : the official journal of the International Neural Network Society,", "citeRegEx": "PETERS and SCHAAL,? \\Q2008\\E", "shortCiteRegEx": "PETERS and SCHAAL", "year": 2008}, {"title": "From Motor Learning to Interaction Learning in Robots, volume", "author": ["J. PETERS", "O. SIGAUD"], "venue": null, "citeRegEx": "PETERS and SIGAUD,? \\Q2010\\E", "shortCiteRegEx": "PETERS and SIGAUD", "year": 2010}, {"title": "Learning forward models for the operational space control of redundant robots", "author": ["C. SALAUN", "V. PADOIS", "O. SIGAUD"], "venue": "From Motor Learning to Interaction Learning in Robots,", "citeRegEx": "SALAUN et al\\.,? \\Q2010\\E", "shortCiteRegEx": "SALAUN et al\\.", "year": 2010}, {"title": "Deterministic policy gradient algorithms", "author": ["D. SILVER", "G. LEVER", "N. HEESS", "T. DEGRIS", "D. WIERSTRA", "M. RIEDMILLER"], "venue": "In Proceedings of the 30th International Conference in Machine Learning", "citeRegEx": "SILVER et al\\.,? \\Q2014\\E", "shortCiteRegEx": "SILVER et al\\.", "year": 2014}, {"title": "Path integral policy improvement with covariance matrix adaptation", "author": ["F. STULP", "O. SIGAUD"], "venue": "In Proceedings of the 29th International Conference on Machine Learning (ICML),", "citeRegEx": "STULP and SIGAUD,? \\Q2012\\E", "shortCiteRegEx": "STULP and SIGAUD", "year": 2012}, {"title": "Policy improvement methods: Between black-box optimization and episodic reinforcement learning", "author": ["F. STULP", "O. SIGAUD"], "venue": "Rapport interne,", "citeRegEx": "STULP and SIGAUD,? \\Q2012\\E", "shortCiteRegEx": "STULP and SIGAUD", "year": 2012}, {"title": "Robot skill learning: From reinforcement learning to evolution strategies", "author": ["F. STULP", "O. SIGAUD"], "venue": "Paladyn Journal of Behavioral Robotics,", "citeRegEx": "STULP and SIGAUD,? \\Q2013\\E", "shortCiteRegEx": "STULP and SIGAUD", "year": 2013}, {"title": "Reinforcement Learning: An Introduction", "author": ["S. SUTTON R", "G. BARTO A"], "venue": null, "citeRegEx": "R. and A.,? \\Q1998\\E", "shortCiteRegEx": "R. and A.", "year": 1998}, {"title": "Policy gradient methods for reinforcement learning with function approximation", "author": ["S. SUTTON R", "D. MCALLESTER", "S. SINGH", "Y. MANSOUR"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "R. et al\\.,? \\Q2000\\E", "shortCiteRegEx": "R. et al\\.", "year": 2000}], "referenceMentions": [], "year": 2016, "abstractText": "Sample efficiency is a critical property when optimizing policy parameters for the controller of a robot. In this paper, we evaluate two state-of-the-art policy optimization algorithms. One is a recent deep reinforcement learning method based on an actor-critic algorithm, Deep Deterministic Policy Gradient (DDPG), that has been shown to perform well on various control benchmarks. The other one is a direct policy search method, Covariance Matrix Adaptation Evolution Strategy (CMA-ES), a black-box optimization method that is widely used for robot learning. The algorithms are evaluated on a continuous version of the mountain car benchmark problem, so as to compare their sample complexity. From a preliminary analysis, we expect DDPG to be more sample efficient than CMA-ES, which is confirmed by our experimental results.", "creator": "LaTeX with hyperref package"}}}