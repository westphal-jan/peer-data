{"id": "1608.07051", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "25-Aug-2016", "title": "Learning Points and Routes to Recommend Trajectories", "abstract": "The problem of recommending tours to travellers is an important and broadly studied area. Suggested solutions include various approaches of points-of-interest (POI) recommendation and route planning. We consider the task of recommending a sequence of POIs, that simultaneously uses information about POIs and routes. Our approach unifies the treatment of various sources of information by representing them as features in machine learning algorithms, enabling us to learn from past behaviour. Information about POIs are used to learn a POI ranking model that accounts for the start and end points of tours. Data about previous trajectories are used for learning transition patterns between POIs that enable us to recommend probable routes. In addition, a probabilistic model is proposed to combine the results of POI ranking and the POI to POI transitions. We propose a new F$_1$ score on pairs of POIs that capture the order of visits. Empirical results show that our approach improves on recent methods, and demonstrate that combining points and routes enables better trajectory recommendations.", "histories": [["v1", "Thu, 25 Aug 2016 08:39:47 GMT  (599kb,D)", "http://arxiv.org/abs/1608.07051v1", null]], "reviews": [], "SUBJECTS": "cs.LG cs.IR", "authors": ["dawei chen", "cheng soon ong", "lexing xie"], "accepted": false, "id": "1608.07051"}, "pdf": {"name": "1608.07051.pdf", "metadata": {"source": "CRF", "title": "Learning Points and Routes to Recommend Trajectories", "authors": ["Dawei Chen", "Cheng Soon Ong", "Lexing Xie"], "emails": ["lexing.xie}@anu.edu.au"], "sections": [{"heading": null, "text": "The problem of recommending tours to travellers is an important and broadly studied area. Suggested solutions include various approaches of points-of-interest (POI) recommendation and route planning. We consider the task of recommending a sequence of POIs, that simultaneously uses information about POIs and routes. Our approach unifies the treatment of various sources of information by representing them as features in machine learning algorithms, enabling us to learn from past behaviour. Information about POIs are used to learn a POI ranking model that accounts for the start and end points of tours. Data about previous trajectories are used for learning transition patterns between POIs that enable us to recommend probable routes. In addition, a probabilistic model is proposed to combine the results of POI ranking and the POI to POI transitions. We propose a new F1 score on pairs of POIs that capture the order of visits. Empirical results show that our approach improves on recent methods, and demonstrate that combining points and routes enables better trajectory recommendations.\nKeywords\nTrajectory recommendation; learning to rank; planning"}, {"heading": "1 Introduction", "text": "This paper proposes a novel solution to recommend travel routes in cities. A large amount of location traces are becoming available from ubiquitous location tracking devices. For example, FourSquare has 50 million monthly users who have made 8 billion check-ins [7], and Flickr hosts over 2 billion geo-tagged public photos [6]. This growing trend in rich geolocation data provide new opportunities for better travel planning traditionally done with written travel guides. Good solutions to these problems will in turn lead to better urban experiences for residents and visitors alike, and foster sharing of even more location-based behavioural data.\nThere are several settings of recommendation problems for locations and routes, as illustrated in Figure 1. We summarise recent work most related to formulating and solving learning problems on assembling routes from POIs, and refer the reader to a number of recent surveys [1, 27, 28] for general overviews of the area. The first setting can be called POI recommendation (Figure 1(a)). Each location (A to E) is scored with geographic and behavioural information such as category, reviews, popularity, spatial information such as distance, and temporal information such as travel time uncertainty, time of the day or day of the week. A popular approach is to recommend POIs with a collaborative filtering model on user-location affinity [21], with additional ways to incorporate spatial [13, 16], temporal [24, 11, 8], or spatialtemporal [25] information.\nFigure 1(b) illustrates the second setting: next location recommendation. Here the input is a partial trajectory (e.g. started at point A and currently at point B), the task of the algorithm is to score the next candidate location (e.g, C, D and E) based on the perceived POI score and transition compatibility with input A \u2192 B. It is a variant of POI recommendation except both the user and locations travelled to date are given. The solutions to this problem include incorporating Markov chains into collaborative filtering [20, 4, 26], quantifying tourist traffic flow between points-of-interest [29], formulating a binary decision or ranking problem [2], and predict the next location with sequence models such as recurrent neural networks [15].\nThis paper considers the final setting: trajectory recommendation (Figure 1(c)). Here the input are some factors about the desired route, e.g. starting point A and end point C, along with auxiliary information such as the desired length of trip. The algorithm needs to take into account location desirability (as indicated by node size) and transition compatibility (as indicated by edge width), and compare route hypotheses such as A-D-B-C and A-E-D-C. Existing work in this area either uses heuristic combination of locations and routes [18, 14, 17], or formulates an optimisation problem that is not informed or evaluated by behaviour history [9, 3]. We note, however, that two desired qualities are still missing from the current solutions to trajectory recommendation. The first is a principled method to jointly learn POI ranking (a prediction problem) and optimise for route creation (a planning problem). The second is a unified way to incorporate various features such as location, time, distance, user profile and social interactions, as they tend to get specialised and separate treatments. This work aims to address both challenges. We propose a novel way to learn point preferences and routes jointly. In Section 2, we describe the features that are used to ranking points, and POI to POI transitions that are factorised along different types of location properties. Section 3 details a number of our proposed approaches to recommend trajectories. We evaluate the proposed algorithms on trajectories from five different cities in Section 4. The main contributions of this work are:\nar X\niv :1\n60 8.\n07 05\n1v 1\n[ cs\n.L G\n] 2\n5 A\nug 2\n01 6\n\u2022 We propose a novel algorithm to jointly optimise point preferences and routes. We find that learning-based approaches generally outperform heuristic route recommendation [14]. Incorporating transitions to POI ranking results in a better sequence of POIs, and avoiding sub-tours further improves performance of classical Markov chain methods. \u2022 Our approach is feature-driven and learns from past behaviour without having to design specialised treatment for spatial, temporal or social information. It incorporates information about location, POI categories and behaviour history, and can use additional time, user, or social information if available. \u2022 We show good performance compared to recent results [14], and also quantify the contributions from different components, such as ranking points, scoring transitions, and routing. \u2022 We propose a new metric to evaluate trajectories, pairsF1, to capture the order in which POIs are visited. PairsF1 lies between 0 and 1, and achieves 1 if and only if the recommended trajectory is exactly the same as the ground truth.\nSupplemental material, benchmark data and results are available online at https://bitbucket.org/d-chen/tour-cikm16 ."}, {"heading": "2 POI, Query and Transition", "text": "The goal of tour recommendation is to suggest a sequence of POIs, (p1, . . . , pL), of length L such that the user\u2019s utility is maximised. The user provides the desired start (p1 = ps) and end point (pL = pe), as well as the number L of POIs desired, from which we propose a trajectory through the city. The training data consists of a set of tours of varying length in a particular city. We consider only POIs that have been visited by at least one user in the past, and construct a graph with POIs as nodes and directed edges representing the observed transitions between pairs of POIs in tours.\nWe extract the category, popularity (number of distinct visitors) [5], total number of visits and average visit duration for each POI. POIs are grouped into 5 clusters using K-means according to their geographical locations to reflect their neighbourhood. Furthermore, since we are constrained by the fact that trajectories have to be of length L and start and end at certain points, we hope to improve the recommendation by using this information. In other words, we use the query q = (ps, pe, L) to construct new features by contrasting candidate POIs with ps and pe. For each of the POI features (category, neighbourhood, popularity, total visits and average duration), we construct two new features by taking the difference of the feature in POI p with ps and pe respectively. For the category (and neighbourhood), we set the feature to 1 when their categories (and cluster identities) are the same and \u22121 otherwise. For popularity, total visits and average duration, we take the real valued difference. Lastly, we compute the distance from POI p to ps (and pe) using the Haversine formula [22], and also include the required length L.\nIn addition to information about each individual POI, a tour recommendation system would benefit from capturing the likelihood of going from one POI to another different POI. One option would be to directly model the probability of going from any POI to any other POI, but this has several weaknesses: Such a model would be unable to handle a new POI (one that has not yet been visited), or pairs of existing POIs that do not have an observed transition. Furthermore, even\nif we restrict ourselves to known POIs and transitions, there may be locations which are rarely visited, leading to significant challenges in estimating the probabilities from empirical data.\nWe model POI transitions using a Markov chain with discrete states by factorising the transition probability (pi to pj) as a product of transition probabilities between pairs of individual POI features, assuming independence between these feature-wise transitions. The popularity, total visits and average duration are discretised by binning them uniformly into 5 intervals on the log scale. These feature-to-feature transitions are estimated from data using maximum likelihood principle. The POI-POI transition probabilities can be efficiently computed by taking the Kronecker product of transition matrices for the individual features, and then updating it based on three additional constraints as well as appropriate normalisation. First we disallow self-loops by setting the probability of (pi to pi) to zero. Secondly, when multiple POIs have identical (discretised) features, we distribute the probability uniformly among POIs in the group. Third, we remove feature combinations that has no POI in dataset. Figure 2 visualises the transition matrices for two POI features, category and neighbourhood, in Melbourne."}, {"heading": "3 Tour Recommendation", "text": "In this section, we first describe the recommendation of points and routes, then we discuss how to combine them, and finally we propose a method to avoid sub-tours."}, {"heading": "3.1 POI Ranking and Route Planning", "text": "A naive approach would be to recommend trajectories based on the popularity of POIs only, that is we always suggest the top-k most popular POIs for all visitors given the start and end location. We call this baseline approach PoiPopularity, and its only adaptation to a particular query is to adjust k to match the desired length.\nOn the other hand, we can leverage the whole set of POI features described in Section 2 to learn a ranking of POIs using rankSVM, with linear kernel and L2 loss [12],\nmin w\n1 2 wTw + C \u2211 pi,pj\u2208P, q\u2208Q max ( 0, 1\u2212wT (\u03c6i,q \u2212 \u03c6j,q) )2 ,\nwhere w is the parameter vector, C > 0 is a regularisation constant, P is the set of POIs to rank, Q denotes the queries corresponding to trajectories in training set, and \u03c6i,q is the feature vector for POI pi with respect to query q. The ranking score of pi given query q is computed as Ri,q = w T\u03c6i,q.\nFor training the rankSVM, the labels are generated using the number of occurrences of POI p in trajectories grouped by query (ps, pe, L), without counting the occurrence of p when it is the origin or destination of a trajectory. Our algorithm, PoiRank, recommends a trajectory for a particular query by first ranking POIs then takes the top ranked L\u2212 2 POIs and connects them according to the ranks.\nIn addition to recommend trajectory by ranking POIs, we can leverage the POI-POI transition probabilities and recommend a trajectory (with respect to a query) by maximising the transition likelihood. The maximum likelihood of the Markov chain of transitions is found using a variant of the Viterbi algorithm (with uniform emission probabilities). We call this approach that only uses the transition probabilities between POIs as Markov."}, {"heading": "3.2 Combine Ranking and Transition", "text": "We would like to leverage both point ranking and transitions, i.e., recommending a trajectory that maximises the points ranking of its POIs as well as its transition likelihood at the same time. To begin with, we transform the ranking scores Rj,q of POI pj with respect to query q to a probability distribution using the softmax function,\nPR(pj |q) = exp(Rj,q)\u2211 i exp(Ri,q) , (1)\nOne option to find a trajectory that simultaneously maximises the ranking probabilities of its POIs and its transition likelihood is to optimise the following objective:\nargmax T \u2208PL \u03b1 L\u2211 k=2 logPR(pk|q) + (1\u2212 \u03b1) L\u22121\u2211 k=1 logP (pk+1|pk),\nsuch that p1 = ps, pL = pe and pk \u2208 P, 1 \u2264 k \u2264 L. The first term captures the POI ranking, and the second one incorporates the transition probabilities. T = (p1, . . . , pL) is any possible trajectory, \u03b1 \u2208 [0, 1] is a parameter to trade-off the importance between point ranking and transition, and can be tuned using cross validation in practice. Let S(p; p\u2032, q) be a convex combination of point ranking and transition,\nS(p; p\u2032, q) = \u03b1 logPR(p|q) + (1\u2212 \u03b1) logP (p|p\u2032), (2)\nthen the best path (or walk) can be found using the Viterbi algorithm. We call this approach that uses both the point ranking and transitions Rank+Markov, with pseudo code shown in Algorithm 1, where A is the score matrix, and entry A[l, p] stores the maximum value associated with the (partial) trajectory that starts at ps and ends at p with l POI visits; B is the backtracking-point matrix, and entry B[l, p] stores the predecessor of p in that (partial) trajectory. The maximum objective value is A[L, pe], and the corresponding trajectory can be found by tracing back from B[L, pe]."}, {"heading": "3.3 Avoiding sub-tours", "text": "Trajectories recommended by Markov (Section 3.1) and Rank+Markov (Section 3.2) are found using the maximum likelihood approach, and may contain multiple visits to the same POI. This is because the best solution from Viterbi decoding may have circular sub-tours (where a POI already visited earlier in the tour is visited again). We propose a method for eliminating sub-tours by finding the best path using an integer linear program (ILP), with sub-tour elimination constraints adapted from the Travelling Salesman Problem [19].\nAlgorithm 1 Rank+Markov: recommend trajectory with POI ranking and transition\n1: Input: P, ps, pe, L 2: Output: Trajectory T = (ps, \u00b7 \u00b7 \u00b7 , pe) with L POIs 3: Initialise score matrix A and backtracking pointers B 4: for p \u2208 P do 5: A[2, p] = S(p; ps, q) 6: B[2, p] = ps 7: end for 8: for l = 2 to L\u2212 1 do 9: for p \u2208 P do\n10: A[l + 1, p] = maxp\u2032\u2208P{A[l, p\u2032] + S(p; p\u2032, q)} 11: B[l + 1, p] = argmaxp\u2032\u2208P{A[l, p\u2032] + S(p; p\u2032, q)} 12: end for 13: end for 14: T = {pe}, l = L, p = pe 15: repeat 16: Prepend B[l, p] to T 17: l = l \u2212 1, p = B[l, p] 18: until l < 2 19: return T\nIn particular, given a set of POIs P, the POI-POI transition matrix and a query q = (ps, pe, L), we recommend a trajectory by solving the following ILP:\nmax x,u N\u22121\u2211 i=1 N\u2211 j=2 xij logP (pj |pi)\ns.t. xij \u2208 {0, 1}, xii = 0, ui \u2208 Z, \u2200i, j = 1, \u00b7 \u00b7 \u00b7 , N (3) N\u2211\nj=2\nx1j = N\u22121\u2211 i=1 xiN = 1, N\u2211 i=2 xi1 = N\u22121\u2211 j=1 xNj = 0 (4)\nN\u22121\u2211 i=1 xik = N\u2211 j=2 xkj \u2264 1, \u2200k = 2, \u00b7 \u00b7 \u00b7 , N \u2212 1 (5) N\u22121\u2211 i=1 N\u2211 j=2 xij = L\u2212 1, (6)\nui \u2212 uj + 1 \u2264 (N \u2212 1)(1\u2212 xij), \u2200i, j = 2, \u00b7 \u00b7 \u00b7 , N (7)\nwhere N = |P| is the number of available POIs and xij is a binary decision variable that determines whether the transition from pi to pj is in the resulting trajectory. For brevity, we arrange the POIs such that p1 = ps and pN = pe. Firstly, the desired trajectory should start from ps and end at pe (Constraint 4). In addition, any POI could be visited at most once (Constraint 5). Moreover, only L\u22121 transitions between POIs are permitted (Constraint 6), i.e., the number of POI visits should be exactly L (including ps and pe). The last constraint, where ui is an auxiliary variable, enforces that only a single sequence of POIs without sub-tours is permitted in the trajectory. We solve this ILP using the Gurobi optimisation package [10], and the resulting trajectory is constructed by tracing the non-zeros in x. We call our method that uses the POI-POI transition matrix to recommend paths without circular sub-tours MarkovPath.\nSub-tours in trajectories recommended by Rank+Markov can be eliminated in a similar manner, we solve an ILP by optimising the following objective with the same constraints described above,\nmax x,u N\u22121\u2211 i=1 N\u2211 j=2 xij S(pj ; pi, q), (8)\nwhere S(pj ; pi, q) incorporates both point ranking and tran-\nsition, as defined in Equation (2). This algorithm is called Rank+MarkovPath in the experiments."}, {"heading": "4 Experiment on Flickr Photos", "text": "We evaluate the algorithms above on datasets with trajectories extracted from Flickr photos [23] in five cities, namely, Edinburgh, Glasgow, Melbourne, Osaka and Toronto, with statistics shown in Table 1. The Melbourne dataset is built using approaches proposed in earlier work [5, 14], and the other four datasets are provided by Lim et al. [14].\nWe use leave-one-out cross validation to evaluate different trajectory recommendation algorithms, i.e., when testing on a trajectory, all other trajectories are used for training. We compare with a number of baseline approaches such as Random, which naively chooses POIs uniformly at random (without replacement) from the set P \\ {ps, pe} to form a trajectory, and PoiPopularity (Section 3.1), which recommends trajectories based on the popularity of POIs only. Among the related approaches from recent literature, PersTour [14] explores POI features as well as the sub-tour elimination constraints (Section 3.3), with an additional time budget, and its variant PersTour-L, which replaces the time budget with a constraint of trajectory length. Variants of point-ranking and route-planning approaches including PoiRank and Markov (Section 3.1), which utilises either POI features or POIPOI transitions, and Rank+Markov (Section 3.2) that captures both types of information. Variants that employ additional sub-tour elimination constraints (MarkovPath and Rank+MarkovPath, Section 3.3) are also included. A summary of the various trajectory recommendation approaches can be found in Table 2."}, {"heading": "4.1 Performance metrics", "text": "A commonly used metric for evaluating POI and trajectory recommendation is the F1 score on points, which is the harmonic mean of precision and recall of POIs in trajectory [14]. While being good at measuring whether POIs are correctly recommended, F1 score on points ignores the visiting order\n(a) Left: F1=1.0, pairs-F1=0.83 (b) Right: F1=1.0, pairs-F1=0.86\nFigure 3: Examples for F1 vs pairs-F1 as evaluation metric. Solid grey: ground truth; dashed blue: recommended trajectories. See Section 4.1 for details.\nbetween POIs. We propose a new metric pairs-F1 that considers both POI identity and visiting order, by measuring the F1 score of every pair of POIs, whether they are adjacent or not in trajectory,\npairs-F1 = 2PpairRpair Ppair +Rpair ,\nwhere Ppair and Rpair are the precision and recall of ordered POI pairs respectively. Pairs-F1 takes values between 0 and 1 (higher is better). A perfect pairs-F1 is achieved if and only if both the POIs and their visiting order in the recommended trajectory are exactly the same as those in the ground truth. On the other hand, pairs-F1 = 0 means none of the recommended POI pairs was actually visited (in the designated order) in the real trajectory. An illustration is shown in Figure 3, the solid grey lines represent the ground truth transitions that actually visited by travellers, and the dashed blue lines are the recommended trajectory by one of the approaches described in Section 3. Both examples have a perfect F1 score, but not a perfect pairs-F1 score due to the difference in POI sequencing."}, {"heading": "4.2 Results", "text": "The performance of various trajectory recommendation approaches are summarised in Table 3 and Table 4, in terms of F1 and pairs-F1 scores respectively. It is apparent that algorithms captured information about the problem (Table 2) outperform the Random baseline in terms of both metrics on all five datasets.\nAlgorithms based on POI ranking yield strong performance, in terms of both metrics, by exploring POI and query specific features. PoiRank improves notably upon PoiPopularity and PersTour by leveraging more features. In contrast, Markov which leverages only POI transitions does not perform as well. Algorithms with ranking information (Rank+Markov and Rank+MarkovPath) always outperform their respective variants with transition information alone (Markov and MarkovPath).\nWe can see from Table 3 that, in terms of F1, MarkovPath and Rank+MarkovPath outperform their corresponding variants Markov and Rank+Markov without the path constraints, which demonstrates that eliminating sub-tours improves point recommendation. This is not unexpected, as sub-tours worsen the proportion of correctly recommended POIs since a length constraint is used. In contrast, most Markov chain entries have better performance in terms of pairs-F1 (Table 4), which indicates Markov chain approaches generally respect the transition patterns between POIs.\nPersTour [14] always performs better than its variant PersTour-L, in terms of both metrics, especially on Glas-\ngow and Toronto datasets. This indicates the time budget constraint is more helpful than length constraint for recommending trajectories. Surprisingly, we observed that PersTour is outperformed by Random baseline on Melbourne dataset. It turns out that on this dataset, many of the ILP problems which PersTour needs to solve to get the recommendations are difficult ILP instances. In the leave-one-out evaluation, although we utilised a large scale computing cluster with modern hardware, 12% of evaluations failed as the ILP solver was unable to find a feasible solution after 2 hours. Furthermore, a lot of recommendations were suboptimal solutions of the corresponding ILPs due to the time limit. These factors lead to the inconsistent performance of PersTour on Melbourne dataset."}, {"heading": "4.3 An Illustrative Example", "text": "Figure 4 illustrates an example from Edinburgh. The ground truth is a trajectory of length 4 that starts at a POI of category Structures, visits two intermediate POIs of category Structures and Cultural and terminates at a POI of category Structures. The trajectory recommended by PersTour is a tour with 11 POIs, as shown in Figure 4(a), with none of the desired intermediate POIs visited. PoiRank (Figure 4(b)) recommended a tour with correct POIs, but with completely different routes. On the other hand, Markov (Figure 4(c)) missed one POI but one of the intermediate routes is consistent with the ground truth. The best recommendation, as shown in Figure 4(d), with exactly the same points and routes as the ground truth, which in this case is achieved by Rank+MarkovPath."}, {"heading": "5 Discussion and Conclusion", "text": "In this paper, we propose an approach to recommend trajectories by jointly optimising point preferences and routes. This is in contrast to related work which looks at only POI or next\nlocation recommendation. Point preferences are learned by ranking according to POI and query features, and factorised transition probabilities between POIs are learned from previous trajectories extracted from social media. We investigate the maximum likelihood sequence approach (which may recommend sub-tours) and propose an improved sequence recommendation method. Our feature driven approach naturally allows learning the combination of POI ranks and routes.\nWe argue that one should measure performance with respect to the visiting order of POIs, and suggest a new pairsF1 metric. We empirically evaluate our tour recommendation approaches on five datasets extracted from Flickr photos, and demonstrate that our method improves on prior work, in terms of both the traditional F1 metric and our proposed performance measure. Our promising results from learning points and routes for trajectory recommendation suggests that research in this domain should consider both information sources simultaneously."}, {"heading": "Acknowledgements", "text": "We thank Kwan Hui Lim for kindly providing his R code to reproduce his experiments. This work is supported in part by the Australian Research Council via the Discovery Project program DP140102185."}, {"heading": "A POI Features for Ranking", "text": "Table 5: Features of POI p used in rankSVM given query (ps, pe, L)\nFeature Description category one-hot encoding of the category of p neighbourhood one-hot encoding of the POI cluster that p resides in popularity logarithm of POI popularity of p nVisit logarithm of the total number of visit by all users at p avgDuration logarithm of the average duration at p trajLen trajectory length L, i.e., the number of POIs required sameCatStart 1 if the category of p is the same as that of ps, \u22121 otherwise sameCatEnd 1 if the category of p is the same as that of pe, \u22121 otherwise sameNeighbourhoodStart 1 if p resides in the same POI cluster as ps, \u22121 otherwise sameNeighbourhoodEnd 1 if p resides in the same POI cluster as pe, \u22121 otherwise distStart distance between p and ps, calculated using the Haversine formula distEnd distance between p and pe, calculated using the Haversine formula diffPopStart real-valued difference in POI popularity of p from that of ps diffPopEnd real-valued difference in POI popularity of p from that of pe diffNVisitStart real-valued difference in the total number of visit at p from that at ps diffNVisitEnd real-valued difference in the total number of visit at p from that at pe diffDurationStart real-valued difference in average duration at p from that at ps diffDurationEnd real-valued difference in average duration at p from that at pe\nEntertainmentBeachCity precinctsCultural Education Historical\nInstitutions ParksMuseums\nReligionShoppingSports StructuresTransport\nFigure 5: POI Categories\nWe described an algorithm to recommend trajectories based on ranking POIs (PoiRank) in Section 3.1, the features used to rank POIs are POI and query specific, as described in Table 5.\nCategories of POIs in all of the five trajectory datasets are show in Figure 5. The distribution of POI popularity, the number of visit and average visit duration are shown in Figure 6.\nTo rank POIs, features described in Table 5 are scaled to range [\u22121.0, 1.0] using the same approach as that employed by libsvm (http://www.csie.ntu.edu.tw/~cjlin/libsvm/), i.e., fitting a linear function f(x) = ax + b for feature x such that the maximum value of x maps to 1.0 and the minimum value maps to \u22121.0."}, {"heading": "B Transition Probabilities", "text": "We compute the POI-POI transition matrix by factorising transition probabilities from POI pi to POI pj as a product of transition probabilities between pairs of individual POI features, which are shown in Table 6.\nPOI Features are discretised as described in Section 2 and transition matrices of individual features are computed using maximum likelihood estimation, i.e., counting the number of transitions for each pair of features then normalising each row, taking care of zeros by adding a small number 1 to each count before normalisation. Figure 7 visualises the transition matrices for individual POI features in Melbourne.\nThe POI-POI transition matrix is computed by taking the Kronecker product of the transition matrices for the individual features, and then updating it with the following constraints:\n1In our experiments, = 1.\n\u2022 Firstly, we disallow self transitions by setting probability of (pi to pi) to zero.\n\u2022 Secondly, when a group of POIs have identical (discretised) features (say a group with M POIs), we distribute the probability uniformly among POIs in the group, in particular, the incoming (unnormalised) transition probability (say, Pin) of the group computed by taking the Kronecker product is divided uniformly among POIs in the group (i.e.,\nPin M\n), which is equivalent to choose a POI in the group uniformly at random. Moreover, the outgoing (unnormalised) transition probability of each POI is the same as that of the group, since in this case, the transition from any POI in the group to one outside the group represents an outgoing transition from that group. In addition, the self-loop transition of the group represents transitions from a POI in the group to other POIs (M \u2212 1 POIs) in the same group, similar to the outgoing case, the (unnormalised) self-loop transition probability (say Po) is divided uniformly (i.e.,\nPo M\u22121 ), which corresponds to\nchoose a transition (from pi) among all transitions to the other M \u2212 1 POIs (exclude self-loop pi to pi) in that group uniformly at random.\n\u2022 Lastly, we remove feature combinations that has no POI in dataset and normalise each row of the (unnormalised) POI-POI transition matrix to form a valid probability distribution for each POI."}, {"heading": "C Experiment", "text": "C.1 Dataset\nTrajectories used in experiment (Section 4) are extracted using geo-tagged photos in the Yahoo! Flickr Creative Commons 100M (a.k.a. YFCC100M) dataset [23] as well as the Wikipedia web-pages of points-of-interest (POI). Photos are mapped to POIs according to their distances calculated using the Haversine formula [22], the time a user arrived a POI is approximated by the time the first photo taken by the user at that POI, similarly, the time a user left a POI is approximated by the time the last photo taken by the user at that POI. Furthermore, sequence of POI visits by a specific user are divided into several pieces according to the time gap between consecutive POI visits, and the POI visits in each piece are connected in temporal order to form a trajectory [5, 14].\nC.2 Parameters\nWe use a 0.5 trade-off parameter for PersTour and PersTour-L, found to be the best weighting in [14]. The regularisation parameter C in rankSVM is 10.0. The trade-off parameter \u03b1 in Rank+Markov and Rank+MarkovPath is tuned using cross validation. In particular, we split trajectories with more than 2 POIs in a dataset into two (roughly) equal parts, and use the first part (i.e., validation set) to tune \u03b1 (i.e., searching value of \u03b1 such that Rank+Markov achieves the best performance on validation set, in terms of the mean of pairs-F1 scores from leave-one-out cross validation), then test on the second part (leave-one-out cross validation) using the tuned \u03b1, and vice verse.\nC.3 Implementation\nWe employ the rankSVM implementation in libsvmtools (https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/). Integer linear programming (ILP) are solved using Gurobi Optimizer (http://www.gurobi.com/) and lp solve (http://lpsolve. sourceforge.net/). Dataset and code for this work are available in repository https://bitbucket.org/d-chen/tour-cikm16.\nC.4 Performance metric\nA commonly used metric for evaluating POI and trajectory recommendation is the F1 score on points [14], Let T be the trajectory that was visited in the real world, and T\u0302 be the recommended trajectory, PT be the set of POIs visited in T , and PT\u0302 be the set of POIs visited in T\u0302 , F1 score on points is the harmonic mean of precision and recall of POIs in trajectory,\nF1 = 2PpointRpoint Ppoint +Rpoint , where Ppoint = |PT \u2229 PT\u0302 | |T\u0302 | and Rpoint = |PT \u2229 PT\u0302 | |T | .\nA perfect F1 (i.e., F1 = 1) means the POIs in the recommended trajectory are exactly the same set of POIs as those in the ground truth, and F1 = 0 means that none of the POIs in the real trajectory was recommended.\nWhile F1 score on points is good at measuring whether POIs are correctly recommended, it ignores the visiting order between POIs. Pairs-F1 takes into account both the point identity and the visiting orders in a trajectory. This is done by measuring the F1 score of every pair of ordered POIs, whether they are adjacent or not in trajectory,\npairs-F1 = 2PpairRpair Ppair +Rpair , where Ppair = Nc |T\u0302 |(|T\u0302 | \u2212 1)/2 and Rpair = Nc |T |(|T | \u2212 1)/2 ,\nand Nc 2 is the number of ordered POI pairs (pj , pk) that appear in both the ground-truth and the recommended trajectories,\n(pj \u227aT pk \u2227 pj \u227aT\u0302 pk) \u2228 (pj T pk \u2227 pj T\u0302 pk),\nwith pj 6= pk, pj , pk \u2208 PT \u2229 PT\u0302 , 1 \u2264 j 6= k \u2264 |T |. Here pj \u227aT pk denotes POI pj was visited before POI pk in trajectory T and pj T pk denotes pj was visited after pk in T .\nPairs-F1 takes values between 0 and 1. A perfect pairs-F1 (1.0) is achieved if and only if both the POIs and their visiting orders in the recommended trajectory are exactly the same as those in the ground truth. Pairs-F1 = 0 means none of the recommended POI pairs was actually visited in the real trajectory.\nPerformance data reported in Table 3 and Table 4 are the mean and standard deviation of instances successfully recommended by all methods shown in Table 2.\n2We define pairs-F1 = 0 when Nc = 0."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "The problem of recommending tours to travellers is an impor-<lb>tant and broadly studied area. Suggested solutions include<lb>various approaches of points-of-interest (POI) recommenda-<lb>tion and route planning. We consider the task of recommend-<lb>ing a sequence of POIs, that simultaneously uses information<lb>about POIs and routes. Our approach unifies the treatment<lb>of various sources of information by representing them as fea-<lb>tures in machine learning algorithms, enabling us to learn<lb>from past behaviour. Information about POIs are used to<lb>learn a POI ranking model that accounts for the start and<lb>end points of tours. Data about previous trajectories are used<lb>for learning transition patterns between POIs that enable us<lb>to recommend probable routes. In addition, a probabilistic<lb>model is proposed to combine the results of POI ranking and<lb>the POI to POI transitions. We propose a new F1 score on<lb>pairs of POIs that capture the order of visits. Empirical re-<lb>sults show that our approach improves on recent methods,<lb>and demonstrate that combining points and routes enables<lb>better trajectory recommendations.", "creator": "LaTeX with hyperref package"}}}