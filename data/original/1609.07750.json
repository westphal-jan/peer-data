{"id": "1609.07750", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "25-Sep-2016", "title": "Accurate and Efficient Hyperbolic Tangent Activation Function on FPGA using the DCT Interpolation Filter", "abstract": "Implementing an accurate and fast activation function with low cost is a crucial aspect to the implementation of Deep Neural Networks (DNNs) on FPGAs. We propose a high-accuracy approximation approach for the hyperbolic tangent activation function of artificial neurons in DNNs. It is based on the Discrete Cosine Transform Interpolation Filter (DCTIF). The proposed architecture combines simple arithmetic operations on stored samples of the hyperbolic tangent function and on input data. The proposed DCTIF implementation achieves two orders of magnitude greater precision than previous work while using the same or fewer computational resources. Various combinations of DCTIF parameters can be chosen to tradeoff the accuracy and complexity of the hyperbolic tangent function. In one case, the proposed architecture approximates the hyperbolic tangent activation function with 10E-5 maximum error while requiring only 1.52 Kbits memory and 57 LUTs of a Virtex-7 FPGA. We also discuss how the activation function accuracy affects the performance of DNNs in terms of their training and testing accuracies. We show that a high accuracy approximation can be necessary in order to maintain the same DNN training and testing performances realized by the exact function.", "histories": [["v1", "Sun, 25 Sep 2016 14:30:33 GMT  (401kb,D)", "http://arxiv.org/abs/1609.07750v1", "8 pages, 6 figures, 5 tables, submitted for the 25th ACM/SIGDA International Symposium on Field-Programmable Gate Arrays (ISFPGA), 22-24 February 2017, California, USA"]], "COMMENTS": "8 pages, 6 figures, 5 tables, submitted for the 25th ACM/SIGDA International Symposium on Field-Programmable Gate Arrays (ISFPGA), 22-24 February 2017, California, USA", "reviews": [], "SUBJECTS": "cs.NE cs.LG", "authors": ["ahmed m abdelsalam", "j m pierre langlois", "f cheriet"], "accepted": false, "id": "1609.07750"}, "pdf": {"name": "1609.07750.pdf", "metadata": {"source": "CRF", "title": "Accurate and Efficient Hyperbolic Tangent Activation Function on FPGA using the DCT Interpolation Filter", "authors": ["Ahmed M. Abdelsalam", "J.M. Pierre Langlois", "F. Cheriet"], "emails": ["farida.cheriet}@polymtl.ca", "permissions@acm.org."], "sections": [{"heading": null, "text": "Keywords Deep Neural Network (DNN); Embedded FPGA; Deep learning; Activation function, Hyperbolic tangent"}, {"heading": "1. INTRODUCTION", "text": "Deep Neural Networks (DNN) have been widely adopted in several applications such as object classification, pattern recognition and regression problems [1]. Although DNNs achieve high performance in many applications, this comes at the expense of a large number of arithmetic and memory access operations for both training and testing [2]. Therefore, DNN accelerators are highly desired [3]. FPGA-based DNN accelerators are favorable since FPGA platforms support high performance, configurability, low power consump-\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. FPGA \u201917 February 22\u201324, 2017, Monterey, CA, USA c\u00a9 2016 ACM. ISBN 123-4567-24-567/08/06.\nDOI: 10.475/123 4\ntion and quick development process [3]. On the other hand, implementing a DNN or a Convolutional Neural Network (CNN) on an FPGA is a challenging task since DNNs and CNNs require a large amount of resources [4], [5] and [6].\nDNNs consist of a number of hidden layers that work in parallel, and each hidden layer has a number of Artificial Neurons (AN) [1]. Each neuron receives signals from other neurons and computes a weighted-sum of these inputs. Then, an activation function of the AN is applied on this weighted-sum. One of the main purposes of the activation function is to introduce non-linearity into the network. The hyperbolic tangent is one of the most popular non-linear activation functions in DNNs [1].\nRealizing a precise implementation of the hyperbolic tangent activation function in hardware entails a large number of additions and multiplications [7]. This implementation would badly increase the overall resources required for implementing a single AN and a fully parallel DNN. Therefore, approximations with different precisions and amount of resources are generally employed [7]. We propose a new highaccuracy approximation using the Discrete Cosine Transform Interpolation Filter (DCTIF) [8]. The proposed DCTIF approximation achieves higher accuracy than the existing approximations, and it needs fewer resources than other designs when a high precision approximation is required. We also study the effect of approximating the hyperbolic tangent activation function on the performance of training and testing DNNs.\nThe rest of the paper is organized as follows: Different tanh approximations are reviewed in Section 2. The operation principle of the proposed DCTIF approximation is described in Section 3. In Section 4, an implementation of the proposed DCTIF approximation is detailed. Section 5 is dedicated to the experimental results and a comparison with other approximations and discussion. Finally, Section 6 concludes the paper."}, {"heading": "2. RELATED WORK", "text": "The hardware implementation of a DNN is always constrained by the available computational resources [9]. The required computational resources to implement a DNN can be reduced by limiting the precision of the data representation [9]. On the other hand, using bitwise DNNs is another way to reduce the computational resources of a DNN. Bitwise DNN replaces floating or fixed-point arithmetic operations by efficient bitwise operations [10]. However, this comes at the expense of the training and testing performance of the DNN. Another approach to meet the constraints of\nar X\niv :1\n60 9.\n07 75\n0v 1\n[ cs\n.N E\n] 2\n5 Se\np 20\n16\nthe available computational resources is to approximate the activation function of the DNN. The selection of the tanh approximation accuracy as an activation function is one of the aspects that define the training and testing performance of the DNNs [11]. High accuracy approximations lead to high training and testing performance of the DNN, and low accuracy approximations lead to poor DNN performance [11].\nThere are several approaches for the hardware implementation of the hyperbolic tangent activation function based on Piecewise Linear (PWL), Piecewise Non-Linear, Lookup Table (LUT) and hybrid methods. All of these approaches exploit that the hyperbolic tangent function, shown in Figure 1, is negatively symmetric about the Y-axis. Therefore, the function can be evaluated for negative inputs by negating the output values of the same corresponding positive values and vice versa. Armato et al. [12] proposed to use PWL which divides the hyperbolic tangent function into segments and employs a linear approximation for each segment. On the other hand, Zhang and his colleagues [13] used a non-linear approximation for each segment. Although both methods achieve precise approximations for the hyperbolic tangent function, this comes at the expense of the throughput of the hardware implementation. LUT-based approximations divide the input range into sub-ranges where the output of each sub-range is stored in a LUT. Leboeuf et al. [14] proposed using a classical LUT and a Range Addressable LUT to approximate the function. LUT-based implementations are fast but they require more resources than PWL approximations in order to achieve the same accuracy. Therefore, most of the existing LUT-based methods limit the approximation accuracy to the range [0.02, 0.04].\nSeveral authors noticed that the hyperbolic tangent function can be divided into three regions a) Pass Region, b) Processing Region (PR) and c) Saturation Region, as shown in Figure 1. The hyperbolic tangent function behaves almost like the identity function in the Pass Region, and its value is close to 1 in the Saturation Region. Some hybrid methods that combine LUTs and computations were used to approximate the non-linear PR. Namin and his colleagues [15] proposed to apply a PWL algorithm for the PR. On the other hand, Meher et al. [16] proposed to divide the input range of the PR into sub-ranges, and they implemented a decoder\nthat takes the input value and selects which value should appear on the output port. Finally, Zamanloony et al. [7]\nintroduced a mathematical analysis that defines the boundaries of the Pass, Processing and Saturation Regions of the hyperbolic tangent function based on the desired maximum error of the approximation.\nGenerally, activation function approximations with high error badly affect the performance of DNNs in terms of their training and testing accuracies. Approximations with higher accuracies are favorable in order to maintain the same learning capabilities and testing results compared to the exact activation function. Therefore, we propose a high precision approximation of the hyperbolic tangent activation function while using a small amount of computational resources."}, {"heading": "3. DCT INTERPOLATION FILTER DESIGN", "text": "The DCT-based Interpolation Filter (DCTIF) interpolates data points from a number of samples of a function [6]. It was firstly introduced for interpolating fractional pixels from integer pixels in the motion compensation process of the latest video coding standard H.265 [6]. DCTIF can be used to approximate several non-linear functions. It interpolates values with a desired accuracy by controlling the number of samples involved in the interpolation process and the number of interpolated points between two samples. We propose to use DCTIF in order to approximate the hyperbolic activation function in DNNs.\nThe DCT transformation used to generate DCTIF coefficients is defined by Equation 1, where Lmax and Lmin define the range of the given sample points used in the interpolation process, Size is defined as (Lmax - Lmin + 1 ) and the center position of a given size is Center = (Lmax + Lmin)/2. By substituting Equation 1 into the inverse DCT formula defined in Equation 2, we get the DCTIF co-efficients generation formula for position i+r\u03b1 as in Equation 3.\nAs shown in Figure 2, let\u2019s assume that {p2M} denotes a set of 2M given sample points (no. of DCTIF filter\u2019s tabs) used to interpolate pi+r\u03b1 at fractional position i+r\u03b1 between two adjacent samples at positions i and i+1 of the function x(n). The parameter \u03b1 is a positive fractional number that is equal to (1/2j) where j is the number of interpolated points between two sample points. The parameter r is a positive integer that represents the position of the interpolated point between two sample points where it is \u2208 [1, 2j-1]. A fractional position value pi+r\u03b1 is interpolated using an even number of samples when r\u03b1 is equal to 1/2 , which means that the interpolated point is exactly between two adjacent samples. Otherwise, pi+r\u03b1 is interpolated using an odd number of samples since the interpolated point is closer to one of the samples than the other. Therefore, Equation 3 is modified to generate the DCTIF co-efficients for even and odd numbers of tabs as in Equations 4 and 5, respectively.\nThe DCTIF co-efficients can be smoothed using a smoothing window of size W [8]. For hardware implementation, the smoothed co-efficients are scaled by a factor of (2s) and rounded to integers, where s is a positive integer value. In addition, the scaled co-efficients should be normalized which means that their summation is equal to 2s. Consequently, Equation 6 defines the final DCTIF co-efficients.\nX (k) =\n\u221a 2\nSize Lmax\u2211 n=Lmin ( x (n) . cos ( 2n\u2212 (2 \u00d7 Center) + Size 2 \u00d7 Size ) \u03c0k ) (1)\nx (n) =\n\u221a 2\nSize Lmax\u2211 k=Lmin ( X (k) . cos ( 2n\u2212 (2 \u00d7 Center) + Size 2 \u00d7 Size ) \u03c0k ) (2)\nx (i+ r\u03b1) = 2\nSize Lmax\u2211 k=Lmin ( cos ( 2n\u2212 (2 \u00d7 Center) + Size Size ) \u03c0k . cos ( 2(i+ r\u03b1)\u2212 (2 \u00d7 Center) + Size Size ) \u03c0k ) (3)\nfiltereven(i+ r\u03b1) = 1\nM 2M\u22121\u2211 k=0 ( cos ( 2n\u2212 1 + 2M 4M ) \u03c0k . cos ( 2r\u03b1\u2212 1 + 2M 4M ) \u03c0k ) (4)\nfilterodd(i+ r\u03b1) = 2\n2M + 1 2M\u2211 k=0 ( cos ( 2n+ 1 + 2M 2(2M + 1) ) \u03c0k . cos ( 2r\u03b1+ 1 + 2M 2(2M + 1) ) \u03c0k ) (5)\nFiltereven/odd(i+ r\u03b1) = filtereven/odd(i+ r\u03b1). cos ( n\u2212 r\u03b1 W \u2212 1 ) \u03c0 . 2s (6)\nTable 1 shows the generated DCTIF co-efficient values using different numbers of DCTIF tabs, r\u03b1 values and scaling factors by substituting in Equation 6. The co-efficient values exihibit similarity among some r\u03b1 positions. For example, the i+1/4 and i+3/4 positions have the same set of coefficient values. Moreover, at the i+1/2 position, the set of co-efficients is symmetric about the center element. These properties can be exploited to reduce the implementation cost.\nA DCTIF approximation error analysis is presented in Figure 3. It can be seen that the DCTIF approximation error increases for small \u03b1 values. Although a large \u03b1 value means that fewer points need to be interpolated, this comes at the expense of memory resources since more samples must be stored. A large value of s increases the accuracy of the approximation, but increases complexity as well because the interpolation coefficients take larger values, potentially expressed with more signed digits as shown in Table 1. More-\nover, using more DCTIF tabs comes at the expense of the computational resources as shown in Table 2."}, {"heading": "4. PROPOSED DCTIF ARCHITECTURE", "text": "The proposed DCTIF approximation divides the input range of the hyperbolic tangent function into Pass, Processing and Saturation Regions as shown in Figure 1. The boundaries of these regions are computed based on the targeted maximum error of the approximation [7]. The output is equal to the input when the input is in the Pass Region. The proposed DCTIF approximation is utilized for the inputs in the Processing Region. In the Saturation Region, all the bits of the output port are set to one which represents the maximum value of the output signal.\nThe block diagram of the proposed architecture is shown in Figure 4. It is composed of a 4-input multiplexer that selects the appropriate output based on the input range decoder that determines the proper region of its input value. The decoder has four possible outputs that represent a) Pass Region, b) Saturation Region, c) Processing Region and the\noutput is stored as a sample and finally d) Processing Region and the output of the given input needs to be interpolated. The truncation process shown in Figure 4 is implemented in order to pass the Nout fraction bits of the input.\nThe implementation cost of the DCTIF approximation, shown in Figure 4, depends on the number of tabs and the values of s and \u03b1. The cost of different DCTIF implementations are listed in Table 2 for five combinations of architectural parameter values. Figure 5 shows the DCTIF implementation using four tabs, s = 4 and \u03b1 = 1/4 where the co-efficient values are shown in Table 1. The interpolation equations are:\npi+1/4 = \u22122 A+ 15 B + 3 C \u2212 0 D (7)\npi+1/2 = \u22122 A+ 10 B + 10 C \u2212 2 D (8)\npi+3/4 = 0 A+ 3 B + 15 C \u2212 2 D (9)\nThe address decoder of the DCTIF approximation, shown in Figure 5, takes the input value and the select lines of the input range decoder. It generates the addresses of the required samples (A, B, C, D) stored in the BRAM for the\ninterpolation process. The samples A, B, C and D of Equations 7, 8 and 9 correspond to samples pi-1, pi, pi+1 and pi+2, respectively, in Figure 2. Since the pi+1/4 and pi+3/4 interpolation equations are symmetric, the same hardware can be used to interpolate them. Therefore, we only implement the interpolation equations of pi+1/4 and pi+1/2. In order to reduce the area required for the proposed implementation, we divide the computation of pi+1/4 and pi+1/2 equations into four pairs (-2A + 15B), (3C + 0D), (-2A + 10B) and (10C - 2D). A set of three multiplexers, two subtractors and one adder, shown in Figure 5, is used to calculate the output value of any of these pairs. Each pair of these simple equations is computed in one clock cycle and the full equation takes two clock cycles to be calculated using an accumulator. A single cycle computation would also be possible, at the expense of more resources. Finally, the outputs of the DCTIF interpolation block are the interpolated value and the stored sample B when the input has its hyperbolic tangent output as a stored sample."}, {"heading": "5. EXPERIMENTAL RESULTS", "text": "The proposed DCTIF approximation was described in Verilog HDL and synthesized for a Virtex-7 FPGA using Xilinx ISE 14.6. Table 3 compares the implemented DCTIF approximation to previous works in terms of maximum error, computational resources and throughput.\nTable 3 shows that the proposed DCTIF approximation achieves 0.0002 maximum error while using only 21 Look-Up Tables (LUTs) and 1.12 kbits of memory. All existing works have been implemented as ASICs using TSMC 180 nm2 technology. The most accurate approximation achieves 0.01780 maximum error using 1,791 gates. The other works achieved the same approximation with less a amount of computational resources. Zamanloony and colleagues [7] achieved 0.01960 maximum error using only 129 gates. In addition, their implementation can be reconfigured in order to achieve higher accuracy at the expense of computational resources. In order to have a fair comparison, we re-implemented the design in [7] achieving 0.01180 maximum error for a Xilinx FPGA Virtex-7. We chose to re-implement the work in [7] as it requires the least amount of computational resources of all the existing implementations. Table 3 shows that our proposed DCTIF approximation outperforms the work in [7] in terms of accuracy using the same amount of resources. Therefore, we can say that the proposed DCTIF approximation outperforms the existing works in terms of accuracy using a similar amount of computational resources.\nThe proposed DCTIF approximation is based on interpolating the missing points in the Processing Region. High accuracy approximation can be achieved using the DCTIF approach by widening the boundaries of the Processing Re-\ngion with respect to the two other regions. This directly increases the required amount of memory to store the sample values used in the interpolation process. In addition, more tabs of the interpolation filter must be used in order to achieve the target accuracy. This comes at the expense of the computational resources of the implementation as shown in Table 3. The proposed DCTIF approximation achieves 0.00001 maximum error, requiring only 1.52 kbits of memory and 57 LUTs. This implementation computes a value every 7.4 ns in two cycles of 3.2 ns each.\nThe proposed DCTIF approximation can thus achieve high accuracy of the hyperbolic tangent activation function at low computational cost. In order to assess the impact of this accuracy of DNN performance, we trained and tested several DNN architectures. We conducted this experiment on two classification problems, MNIST [17] and CANCER [18], and Sinc and Sigmoid functions as regression problems [19].\nTable 4 shows the testing performance of four different datasets with several DNN architectures while employing several approximations in the testing process. All the architectures in Table 4 were trained using the exact hyperbolic tangent activation function without any approximation. The Sinc and Sigmoid functions were sampled in the range [-3,3] with 600 samples each and used as regression problems [19]. Training and testing instances were selected randomly by 420 and 180 samples, respectively, for both functions. Sinc and Sigmoid functions results in Table 4 show that the normalized Mean Squared Error (MSE) value (MSEapprox - MSEexact) is increased when using less accurate approximations for the same DNN architecture. In addition, the normalized MSE is getting larger when the DNN architecture becomes more complex with more number of hidden layers as shown in Figure 6.\nMNIST [17] and Cancer [18] are image classification datasets. MNIST consists of 60,000 and 10,000 training and testing images, respectively, of the handwritten numbers 0 to 9. Cancer is a breast cancer dataset from UCI repository that has 699 images. MNIST results in Table 4 show that the testing accuracy of the classification process is highly affected by the precision of the approximation. Although\nthe testing performance of Cancer dataset does not change with different approximations for the same DNN architecture, the normalized MSE is still increasing when using DNN architectures with large number of hidden layers as shown in Figure 6.\nTable 5 shows the training accuracy of the four datasets employing the hyperbolic tangent activation function with five approximations and the exact hyperbolic tangnet function in the training process of the network. The training accuracies of classification and regression problems decrease even when using precise hyperbolic tangent approximations with a maximum error of 10-4. We noticed that when the networks are trained using less accurate approximations, the training process stops early before applying the full number of epochs. Therefore, the training accuracies are badly affected compared to the training accuracies using the exact hyperbolic tangent activation function. Moreover, that would degrade the overall testing results of both classification and regression problems.\nGenerally, we showed that the performance of some widely used DNN architectures change using five hyperbolic tangent approximations with different accuracies. In some cases, a hyperbolic tangent function approximation with 10-5 is required in order to achieve the same performance of the exact function. Although implementing an approximation with high accuracy improves DNN performance, this requires more computational and memory resources and reduces the implementation\u2019s throughput. The proposed DCTIF approach achieves such an accurate approximation while using small amount of computational and memory resources."}, {"heading": "6. CONCLUSIONS", "text": "The accuracy of the activation function is a bottleneck of the performance DNNs\u2019 implementations on FPGA. We studied how the accuracy of the hyperbolic tangent activation function approximation changes the performance of different DNNs. We proposed a high-accuracy approximation technique that is based on Discrete Cosine Transform Interpolation Filter. The proposed DCTIF approach outperforms the existing works in terms of accuracy for similar\namounts of computational resources. Moreover, it achieves better approximation accuracy at the expense of computational and memory resources. We showed specific cases of DNN classification and regression problems where the high accuracy afforded by our approach results in significantly better training and testing performances."}, {"heading": "7. ACKNOWLEDGMENTS", "text": "The authors would like to thank Ahmed El-Sheikh, Awny M. El-Mohandes and Hamza Bendaoudi for their insightful comments on our work."}, {"heading": "8. REFERENCES", "text": "[1] Y. LeCun, Y. Bengio, and G. Hinton, \u201dDeep learning,\u201d\nin Nature, vol. 521, no. 7553, pp. 436-444, 2015.\n[2] D. Hunter, H. Yu, M. S. Pukish, J. Kolbusz, and B. M. Wilamowski, \u201dSelection of proper neural network sizes and architectures-a comparative study,\u201d in IEEE Transactions on Industrial Informatics, vol. 8, no. 2, pp. 228- 240, 2012.\n[3] J. Misra, and S. Indranil, \u201dArtificial neural networks in hardware: A survey of two decades of progress,\u201d in Neurocomputing, vol. 74, no. 1, pp. 239-255, 2010.\n[4] S. Himavathi, D. Anitha, and A. Muthuramalingam, \u201dFeedforward neural network implementation in FPGA using layer multiplexing for effective resource utilization,\u201d in IEEE Transactions on Neural Networks, vol. 18, no .3, pp. 880-888, 2007.\n[5] J. Qiu, J. Wang, S. Yao, K. Guo, B. Li, E. Zhou, J. Yu, T. Tang, N. Xu, S. Song, and Y. Wang, \u201dGoing deeper with\nembedded FPGA platform for convolutional neural network,\u201d in Proceedings of the International Symposium on Field-Programmable Gate Arrays. ACM, pp. 26-35, 2016.\n[6] C. Zhang, P. Li, G. Sun, Y. Guan, B. Xiao, and J. Cong, \u201dOptimizing FPGA-based accelerator design for deep convolutional neural networks,\u201d in Proceedings of the International Symposium on Field-Programmable Gate Arrays. ACM, pp. 161-170, 2015.\n[7] B. Zamanlooy, and M. Mirhassani, \u201dEfficient VLSI implementation of neural networks with hyperbolic tangent activation function,\u201din IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 22, no. 1, pp. 39- 48, 2014.\n[8] K. Ugur, A. Alshin, E. Alshina, F. Bossen, W. J. Han, and J. H. Park, \u201dMotion compensated prediction and interpolation filter design in H. 265/HEVC,\u201d in IEEE Journal of Selected Topics in Signal Processing, vol. 7, no. 6, pp. 946-956, 2013.\n[9] S. Gupta, A. Agrawal, K. Gopalakrishnan, and P. Narayanan, \u201dDeep learning with limited numerical precision,\u201d in CoRR, abs/1502.02551 392, 2015.\n[10] M. Kim, and P. Smaragdis, \u201dBitwise neural networks,\u201d in arXiv preprint arXiv:1601.06071, 2016.\n[11] K. Basterretxea, J. M. Tarela, I. del Campo, and G. Bosque, \u201dAn experimental study on nonlinear function computation for neural/fuzzy hardware design,\u201d in IEEE Transactions on Neural Networks, vol. 18, no. 1, pp. 266- 283, 2007.\n[12] A. Armato, L. Fanucci, E. P. Scilingo, and D. De Rossi, \u201dLow-error digital hardware implementation of artificial\nTable 5: Training errors of Sinc, Sigmoid, MNIST and Cancer using different hyperbolic tangent approximations\nDNN Architecture Tanh Max. Error Correlation DNN Architecture Tanh Max. Error Training Acc. (%)\n0.04 0.43279 0.04 10.7 0.02 0.78250 0.02 16.4 0.01 0.78976 0.01 23.1 0.001 0.84850 0.001 31.1 0.0001 0.87712 0.0001 68.0 Sinc 8 Hidden Layers x 5\nANs, 10,000 epoch\n0 0.90287\nMNIST 1 Hidden\nLayer x 15 ANs, 10,000\nepoch 0 68.1\n0.04 0.77945 0.04 86.1 0.02 0.80033 0.02 86.9 0.01 0.80068 0.01 86.9 0.001 0.84581 0.001 86.9 0.0001 0.85014 0.0001 94..1 Sigmoid 8 Hidden Layers x 5\nANs, 10,000 epoch\n0 0.86097\nCancer 1 Hidden\nLayer x 15 ANs, 10,000\nepoch 0 94.1\nneuron activation functions and their derivative,\u201d in Microprocessors and Microsystems, vol. 35, no. 6, pp. 557- 567, 2011.\n[13] M. Zhang, S. Vassiliadis, and J. G. Delgado-Frias, \u201dSigmoid generators for neural computing using piecewise approximations,\u201d in IEEE transactions on Computers, vol. 45, no .9, pp. 1045-1049, 1996.\n[14] K. Leboeuf, A. H. Namin, R. Muscedere, H. Wu, and M. Ahmadi, \u201dHigh speed VLSI implementation of the hyperbolic tangent sigmoid function,\u201d in Convergence and Hybrid Information Technology International Conference on. IEEE, vol. 1, pp. 1070-1073, 2008.\n[15] A. H. Namin, K. Leboeuf, R. Muscedere, H. Wu, and M. Ahmadi, \u201dEfficient hardware implementation of the hyperbolic tangent sigmoid function,\u201d in International Symposium on Circuits and Systems. IEEE, pp. 2117-\n2120, 2009.\n[16] P. K. Meher, \u201dAn optimized lookup-table for the evaluation of sigmoid function for artificial neural networks,\u201d in International Conference on VLSI and System-on-Chip. IEEE, pp. 91-95, 2010.\n[17] Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner, \u201dGradient-based learning applied to document recognition,\u201d in Proceedings of the IEEE, vol. 86, no.11, pp. 2278-2324, 1998.\n[18] M. Lichman, \u201dUCI machine learning repository,\u201d 2013.\n[19] Y. J. Qu, and H. Bao-Gang, \u201dGeneralized constraint neural network regression model subject to linear priors,\u201d in IEEE Transactions on Neural Networks, vol. 22, no. 12, pp. 2447-2459, 2011."}], "references": [{"title": "Selection of proper neural network sizes and architectures-a comparative study,", "author": ["D. Hunter", "H. Yu", "M.S. Pukish", "J. Kolbusz", "B.M. Wilamowski"], "venue": "IEEE Transactions on Industrial Informatics,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2012}, {"title": "Artificial neural networks in hardware: A survey of two decades of progress,", "author": ["J. Misra", "S. Indranil"], "venue": "in Neurocomputing,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "Going deeper with  embedded FPGA platform for convolutional neural network,", "author": ["J. Qiu", "J. Wang", "S. Yao", "K. Guo", "B. Li", "E. Zhou", "J. Yu", "T. Tang", "N. Xu", "S. Song", "Y. Wang"], "venue": "Proceedings of the International Symposium on Field-Programmable Gate Arrays. ACM,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2016}, {"title": "Optimizing FPGA-based accelerator design for deep convolutional neural networks,", "author": ["C. Zhang", "P. Li", "G. Sun", "Y. Guan", "B. Xiao", "J. Cong"], "venue": "Proceedings of the International Symposium on Field-Programmable Gate Arrays", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "Efficient VLSI implementation of neural networks with hyperbolic tangent activation function,\u201din", "author": ["B. Zamanlooy", "M. Mirhassani"], "venue": "IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 22,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Deep learning with limited numerical precision,", "author": ["S. Gupta", "A. Agrawal", "K. Gopalakrishnan", "P. Narayanan"], "venue": "in CoRR,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "An experimental study on nonlinear function computation for neural/fuzzy hardware design,", "author": ["K. Basterretxea", "J.M. Tarela", "I. del Campo", "G. Bosque"], "venue": "IEEE Transactions on Neural Networks,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2007}, {"title": "High speed VLSI implementation of the hyperbolic tangent sigmoid function,", "author": ["K. Leboeuf", "A.H. Namin", "R. Muscedere", "H. Wu", "M. Ahmadi"], "venue": "Convergence and Hybrid Information Technology International Conference on. IEEE,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2008}, {"title": "Efficient hardware implementation of the hyperbolic tangent sigmoid function,", "author": ["A.H. Namin", "K. Leboeuf", "R. Muscedere", "H. Wu", "M. Ahmadi"], "venue": "in International Symposium on Circuits and Systems", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "An optimized lookup-table for the evaluation of sigmoid function for artificial neural networks,", "author": ["P.K. Meher"], "venue": "in International Conference on VLSI and System-on-Chip", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2010}, {"title": "Gradient-based learning applied to document recognition,", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE, vol. 86,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1998}, {"title": "UCI machine learning repository,", "author": ["M. Lichman"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2013}], "referenceMentions": [{"referenceID": 0, "context": "Although DNNs achieve high performance in many applications, this comes at the expense of a large number of arithmetic and memory access operations for both training and testing [2].", "startOffset": 178, "endOffset": 181}, {"referenceID": 1, "context": "Therefore, DNN accelerators are highly desired [3].", "startOffset": 47, "endOffset": 50}, {"referenceID": 1, "context": "475/123 4 tion and quick development process [3].", "startOffset": 45, "endOffset": 48}, {"referenceID": 2, "context": "On the other hand, implementing a DNN or a Convolutional Neural Network (CNN) on an FPGA is a challenging task since DNNs and CNNs require a large amount of resources [4], [5] and [6].", "startOffset": 172, "endOffset": 175}, {"referenceID": 3, "context": "On the other hand, implementing a DNN or a Convolutional Neural Network (CNN) on an FPGA is a challenging task since DNNs and CNNs require a large amount of resources [4], [5] and [6].", "startOffset": 180, "endOffset": 183}, {"referenceID": 4, "context": "Realizing a precise implementation of the hyperbolic tangent activation function in hardware entails a large number of additions and multiplications [7].", "startOffset": 149, "endOffset": 152}, {"referenceID": 4, "context": "Therefore, approximations with different precisions and amount of resources are generally employed [7].", "startOffset": 99, "endOffset": 102}, {"referenceID": 5, "context": "The hardware implementation of a DNN is always constrained by the available computational resources [9].", "startOffset": 100, "endOffset": 103}, {"referenceID": 5, "context": "The required computational resources to implement a DNN can be reduced by limiting the precision of the data representation [9].", "startOffset": 124, "endOffset": 127}, {"referenceID": 6, "context": "The selection of the tanh approximation accuracy as an activation function is one of the aspects that define the training and testing performance of the DNNs [11].", "startOffset": 158, "endOffset": 162}, {"referenceID": 6, "context": "High accuracy approximations lead to high training and testing performance of the DNN, and low accuracy approximations lead to poor DNN performance [11].", "startOffset": 148, "endOffset": 152}, {"referenceID": 7, "context": "[14] proposed using a classical LUT and a Range Addressable LUT to approximate the function.", "startOffset": 0, "endOffset": 4}, {"referenceID": 8, "context": "Namin and his colleagues [15] proposed to apply a PWL algorithm for the PR.", "startOffset": 25, "endOffset": 29}, {"referenceID": 9, "context": "[16] proposed to divide the input range of the PR into sub-ranges, and they implemented a decoder that takes the input value and selects which value should appear on the output port.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "[7]", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "The DCT-based Interpolation Filter (DCTIF) interpolates data points from a number of samples of a function [6].", "startOffset": 107, "endOffset": 110}, {"referenceID": 3, "context": "265 [6].", "startOffset": 4, "endOffset": 7}, {"referenceID": 4, "context": "The boundaries of these regions are computed based on the targeted maximum error of the approximation [7].", "startOffset": 102, "endOffset": 105}, {"referenceID": 4, "context": "Zamanloony and colleagues [7] achieved 0.", "startOffset": 26, "endOffset": 29}, {"referenceID": 4, "context": "In order to have a fair comparison, we re-implemented the design in [7] achieving 0.", "startOffset": 68, "endOffset": 71}, {"referenceID": 4, "context": "We chose to re-implement the work in [7] as it requires the least amount of computational resources of all the existing implementations.", "startOffset": 37, "endOffset": 40}, {"referenceID": 4, "context": "Table 3 shows that our proposed DCTIF approximation outperforms the work in [7] in terms of accuracy using the same amount of resources.", "startOffset": 76, "endOffset": 79}, {"referenceID": 10, "context": "We conducted this experiment on two classification problems, MNIST [17] and CANCER [18], and Sinc and Sigmoid functions as regression problems [19].", "startOffset": 67, "endOffset": 71}, {"referenceID": 11, "context": "We conducted this experiment on two classification problems, MNIST [17] and CANCER [18], and Sinc and Sigmoid functions as regression problems [19].", "startOffset": 83, "endOffset": 87}, {"referenceID": 1, "context": "The Sinc and Sigmoid functions were sampled in the range [-3,3] with 600 samples each and used as regression problems [19].", "startOffset": 57, "endOffset": 63}, {"referenceID": 10, "context": "MNIST [17] and Cancer [18] are image classification datasets.", "startOffset": 6, "endOffset": 10}, {"referenceID": 11, "context": "MNIST [17] and Cancer [18] are image classification datasets.", "startOffset": 22, "endOffset": 26}, {"referenceID": 7, "context": "ICCIT [14] 0.", "startOffset": 6, "endOffset": 10}, {"referenceID": 7, "context": "ICCIT [14] 0.", "startOffset": 6, "endOffset": 10}, {"referenceID": 8, "context": "ISCAS [15] 0.", "startOffset": 6, "endOffset": 10}, {"referenceID": 9, "context": "VLSI-SOC [16] 0.", "startOffset": 9, "endOffset": 13}, {"referenceID": 4, "context": "TVLSI [7] 0.", "startOffset": 6, "endOffset": 9}, {"referenceID": 4, "context": "TVLSI [7] 0.", "startOffset": 6, "endOffset": 9}], "year": 2016, "abstractText": "Implementing an accurate and fast activation function with low cost is a crucial aspect to the implementation of Deep Neural Networks (DNNs) on FPGAs. We propose a highaccuracy approximation approach for the hyperbolic tangent activation function of artificial neurons in DNNs. It is based on the Discrete Cosine Transform Interpolation Filter (DCTIF). The proposed architecture combines simple arithmetic operations on stored samples of the hyperbolic tangent function and on input data. The proposed DCTIF implementation achieves two orders of magnitude greater precision than previous work while using the same or fewer computational resources. Various combinations of DCTIF parameters can be chosen to tradeoff the accuracy and complexity of the hyperbolic tangent function. In one case, the proposed architecture approximates the hyperbolic tangent activation function with 10 maximum error while requiring only 1.52 Kbits memory and 57 LUTs of a Virtex-7 FPGA. We also discuss how the activation function accuracy affects the performance of DNNs in terms of their training and testing accuracies. We show that a high accuracy approximation can be necessary in order to maintain the same DNN training and testing performances realized by the exact function.", "creator": "LaTeX with hyperref package"}}}