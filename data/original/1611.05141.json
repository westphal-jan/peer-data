{"id": "1611.05141", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Nov-2016", "title": "Training Spiking Deep Networks for Neuromorphic Hardware", "abstract": "We describe a method to train spiking deep networks that can be run using leaky integrate-and-fire (LIF) neurons, achieving state-of-the-art results for spiking LIF networks on five datasets, including the large ImageNet ILSVRC-2012 benchmark. Our method for transforming deep artificial neural networks into spiking networks is scalable and works with a wide range of neural nonlinearities. We achieve these results by softening the neural response function, such that its derivative remains bounded, and by training the network with noise to provide robustness against the variability introduced by spikes. Our analysis shows that implementations of these networks on neuromorphic hardware will be many times more power-efficient than the equivalent non-spiking networks on traditional hardware.", "histories": [["v1", "Wed, 16 Nov 2016 04:32:22 GMT  (67kb,D)", "http://arxiv.org/abs/1611.05141v1", "10 pages, 3 figures, 4 tables; the \"methods\" section of this article draws heavily onarXiv:1510.08829"]], "COMMENTS": "10 pages, 3 figures, 4 tables; the \"methods\" section of this article draws heavily onarXiv:1510.08829", "reviews": [], "SUBJECTS": "cs.NE cs.LG", "authors": ["eric hunsberger", "chris eliasmith"], "accepted": false, "id": "1611.05141"}, "pdf": {"name": "1611.05141.pdf", "metadata": {"source": "CRF", "title": "Training Spiking Deep Networks for Neuromorphic Hardware", "authors": ["Eric Hunsberger", "Chris Eliasmith"], "emails": ["ehunsber@uwaterloo.ca", "celiasmith@uwaterloo.ca"], "sections": [{"heading": null, "text": "We describe a method to train spiking deep networks that can be run using leaky integrate-and-fire (LIF) neurons, achieving state-of-the-art results for spiking LIF networks on five datasets, including the large ImageNet ILSVRC-2012 benchmark. Our method for transforming deep artificial neural networks into spiking networks is scalable and works with a wide range of neural nonlinearities. We achieve these results by softening the neural response function, such that its derivative remains bounded, and by training the network with noise to provide robustness against the variability introduced by spikes. Our analysis shows that implementations of these networks on neuromorphic hardware will be many times more power-efficient than the equivalent non-spiking networks on traditional hardware."}, {"heading": "1 Introduction", "text": "Deep artificial neural networks (ANNs) have recently been very successful at solving image categorization problems. Early successes with the MNIST database [1] were subsequently tested on the more difficult but similarly sized CIFAR-10 [2] and Street-view house numbers [3] datasets. Recently, many groups have achieved better results on these small datasets (e.g. [4]), as well as on larger datasets (e.g. [5]). This work has culminated with the application of deep convolutional neural networks to ImageNet [6], a very large and challenging dataset with 1.2 million images across 1000 categories.\nThere has recently been considerable effort to introduce neural \u201cspiking\u201d into deep ANNs [7, 8, 9, 10, 11, 12], such that connected nodes in the network transmit information via instantaneous single bits (spikes), rather than transmitting real-valued activities. While one goal of this work is to better understand the brain by trying to reverse engineer it [7], another goal is to build energy-efficient neuromorphic systems that use a similar spiking communication method, for image categorization [10, 11, 12] or other applications [13].\nIn this paper, we present a novel method for translating deep ANNs into spiking networks for implementation on neuromorphic hardware. Unlike previous methods, our method is applicable to a broad range of neural nonlinearities, allowing for implementation on hardware with idiosyncratic neuron types (e.g. [14]). We extend our previous results [15] to additional datasets, and most notably demonstrate that it scales to the large ImageNet dataset. We also perform an analysis demonstrating that neuromorphic implementations of these networks will be many times more power-efficient than the equivalent non-spiking networks running on traditional hardware.\nar X\niv :1\n61 1.\n05 14\n1v 1\n[ cs\n.N E\n] 1\n6 N"}, {"heading": "2 Methods", "text": "We first train a network on static images using traditional deep learning techniques; we call this the ANN. We then take the parameters (weights and biases) from the ANN and use them to connect spiking neurons, forming the spiking neural network (SNN). A central challenge is to train the ANN in such a way that it can be transferred into a spiking network, and such that the classification error of the resulting SNN is minimized."}, {"heading": "2.1 Convolutional ANN", "text": "We base our network off that of Krizhevsky et al. [6], which won the ImageNet ILSVRC-2012 competition. A smaller variant of the network achieved 11% error on the CIFAR-10 dataset. The network makes use of a series of generalized convolutional layers, where one such layer is composed of a set of convolutional weights, followed by a neural nonlinearity, a pooling layer, and finally a local contrast normalization layer. These generalized convolutional layers are followed by either locally-connected layers, fully-connected layers, or both, all with a neural nonlinearity. In the case of the original network, the nonlinearity is a rectified linear (ReLU) function, and pooling layers perform max-pooling. The details of the network can be found in [6] and code is available1.\nTo make the ANN transferable to spiking neurons, a number of modifications are necessary. First, we remove the local response normalization layers. This computation would likely require some sort of lateral connections between neurons, which are difficult to add in the current framework since the resulting network would not be feedforward and we are using methods focused on training feedforward networks.\nSecond, we changed the pooling layers from max pooling to average pooling. Again, computing max pooling would likely require lateral connections between neurons, making it difficult to implement without significant changes to the training methodology. Average pooling, on the other hand, is very easy to compute in spiking neurons, since it is simply a weighted sum.\nThe other modifications\u2014using leaky integrate-and-fire neurons and training with noise\u2014are the main focus of this paper, and are described in detail below."}, {"heading": "2.2 Leaky integrate-and-fire neurons", "text": "Our network uses a modified leaky integrate-and-fire (LIF) neuron nonlinearity instead of the rectified linear nonlinearity. Past work has kept the rectified linear nonlinearity for the ANN and substituted in the spiking integrate-and-fire (IF) neuron model in the SNN [11, 10], since the static firing curve of the IF neuron model is a rectified line. Our motivation for using the LIF neuron model is that it and it demonstrates that more complex, nonlinear neuron models can be used in such networks. Thus, these methods can be extended to the idiosyncratic neuron types employed by some neuromorphic hardware (e.g. [14]).\nThe LIF neuron dynamics are given by the equation\n\u03c4RC v\u0307(t) = \u2212v(t) + J(t) (1) where v(t) is the membrane voltage, v\u0307(t) is its derivative with respect to time, J(t) is the input current, and \u03c4RC is the membrane time constant. When the voltage reaches Vth = 1, the neuron fires a spike, and the voltage is held at zero for a refractory period of \u03c4ref . Once the refractory period is finished, the neuron obeys Equation 1 until another spike occurs.\nGiven a constant input current J(t) = j, we can solve Equation 1 for the time it takes the voltage to rise from zero to one, and thereby find the steady-state firing rate\nr(j) = [ \u03c4ref + \u03c4RC log ( 1 +\nVth \u03c1(j \u2212 Vth)\n)]\u22121 (2)\nwhere \u03c1(x) = max(x, 0).\nTheoretically, we should be able to train a deep neural network using Equation 2 as the static nonlinearity and make a reasonable approximation of the network in spiking neurons, assuming that\n1https://github.com/akrizhevsky/cuda-convnet2\nthe spiking network has a synaptic filter that sufficiently smooths a spike train to give a good approximation of the firing rate. The LIF steady state firing rate has the particular problem that the derivative approaches infinity as j \u2192 0+, which causes problems when employing backpropagation. To address this, we added smoothing to the LIF rate equation.\nIf we replace the hard maximum \u03c1(x) = max(x, 0) with a softer maximum \u03c11(x) = log(1 + ex), then the LIF neuron loses its hard threshold and the derivative becomes bounded. Further, we can use the substitution\n\u03c12(x) = \u03b3 log [ 1 + ex/\u03b3 ] (3)\nto allow us control over the amount of smoothing, where \u03c12(x) \u2192 max(x, 0) as \u03b3 \u2192 0. Figure 1 shows the result of this substitution."}, {"heading": "2.3 Training with noise", "text": "Training neural networks with various types of noise on the inputs is not a new idea. Denoising autoencoders [16] have been successfully applied to datasets like MNIST, learning more robust solutions with lower generalization error than their non-noisy counterparts.\nIn a biological spiking neural network, synapses between neurons perform some measure of filtering on the spikes, due to the fact that the post-synaptic current induced by the neurotransmitter release is distributed over time. We employ a similar mechanism in our networks to attenuate some of the variability introduced by spikes. The \u03b1-function \u03b1(t) = (t/\u03c4s)e\u2212t/\u03c4s is a simple second-order lowpass filter, inspired by biology [17]. We chose this as a synaptic filter for our networks since it provides better noise reduction than a first-order lowpass filter.\nThe filtered spike train can be viewed as an estimate of the neuron activity. For example, if the neuron is firing regularly at 200 Hz, filtering spike train will result in a signal fluctuating around 200 Hz. We can view the neuron output as being 200 Hz, with some additional \u201cnoise\u201d around this value. By training our ANN with some random noise added to the output of each neuron for each training example, we can simulate the effects of using spikes on the signal received by the post-synaptic neuron.\nFigure 2 shows how the variability of filtered spike trains depends on input current for the LIF neuron. Since the impulse response of the \u03b1-filter has an integral of one, the mean of the filtered spike trains is equal to the analytical rate of Equation 2. However, the statistics of the filtered signal vary significantly across the range of input currents. Just above the firing threshold, the distribution is skewed towards higher firing rates (i.e. the median is below the mean), since spikes are infrequent so the filtered signal has time to return to near zero between spikes. At higher input currents, on the\nother hand, the distribution is skewed towards lower firing rates (i.e. the median is above the mean). In spite of this, we used a Gaussian distribution to generate the additive noise during training, for simplicity. We found the average standard deviation to be approximately \u03c3 = 10 across all positive input currents for an \u03b1-filter with \u03c4s = 0.005. During training, we add Gaussian noise \u03b7 \u223c G(0, \u03c3) to the firing rate r(j) (Equation 2) when j > 0, and add no noise when j \u2264 0."}, {"heading": "2.4 Conversion to a spiking network", "text": "Finally, we convert the trained ANN to a SNN. The parameters in the spiking network (i.e. weights and biases) are all identical to that of the ANN. The convolution operation also remains the same, since convolution can be rewritten as simple connection weights (synapses) wij between presynaptic neuron i and post-synaptic neuron j. (How the brain might learn connection weight patterns, i.e. filters, that are repeated at various points in space, is a much more difficult problem that we will not address here.) Similarly, the average pooling operation can be written as a simple connection weight matrix, and this matrix can be multiplied by the convolutional weight matrix of the following layer to get direct connection weights between neurons.2\nThe only component of the network that changes when moving from the ANN to the SNN is the neurons themselves. The most significant change is that we replace the soft LIF rate model (Equation 2) with the LIF spiking model (Equation 1). We remove the additive Gaussian noise used in training. We also add post-synaptic filters to the neurons, which removes a significant portion of the high-frequency variation produced by spikes."}, {"heading": "3 Results", "text": "We tested our methods on five datasets: MNIST [1], SVHN [18], CIFAR-10 and CIFAR-100 [19], and the large ImageNet ILSVRC-2012 dataset [20]. Our best result for each dataset is shown in Table 1. Using our methods has allowed us to build spiking networks that perform nearly as well as their non-spiking counterparts using the same number of neurons. All datasets show minimal loss in accuracy when transforming from the ANN to the SNN. 3\n2For computational efficiency, we actually compute the convolution and pooling separately. 3The ILSVRC-2012 dataset actually shows a marginal increase in accuracy, though this is likely not statistically significant and could be because the spiking LIF neurons have harder firing thresholds than their soft-LIF rate counterparts. Also, the CIFAR-100 dataset shows a considerable increase in performance when using soft-\nTable 2 compares our results to the best spiking network results on these datasets in the literature. The most significant recent results are from [12], who implemented networks for a number of datasets on both one and eight TrueNorth chips. Their results are impressive, but are difficult to compare with ours since they use between 20 and 160 times more neurons. We surpass a number of their one-chip results while using an order of magnitude fewer neurons. Furthermore, we demonstrate that our method scales to the large ILSVRC-2012 dataset, which no other SNN implementation to date has done. The most significant difference between our results and that of [10] and [11] is that we use LIF neurons and can generalize to other neuron types, whereas their methods (and those of [12]) are specific to IF neurons.\nWe examined our methods in more detail on the CIFAR-10 dataset. This dataset is composed of 60000 32\u00d732 pixel labelled images from ten categories. We used the first 50000 images for training and the last 10000 for testing, and augmented the dataset by taking random 24\u00d724 patches from the training images and then testing on the center patches from the testing images. This methodology is similar to Krizhevsky et al. [6], except that they also used multiview testing where the classifier output is the average output of the classifier run on nine random patches from each testing image (increasing the accuracy by about 2%).\nTable 3 shows the effect of each modification on the network classification error. Rows 1-5 show that each successive modification required to make the network amenable to running in spiking neurons adds additional error. Despite the fact that training with noise adds additional error to the ANN, rows 6-8 of the table show that in the spiking network, training with noise pays off, though training with too much noise is not advantageous. Specifically, though training with \u03c3 = 20 versus \u03c3 = 10 decreased the error introduced when switching to spiking neurons, it introduced more error to the ANN (Network 5), resulting in worse SNN performance (Network 8).\nLIF neurons versus ReLUs in the ANN, but this could simply be due to the training hyperparameters chosen, since these were not optimized in any way."}, {"heading": "3.1 Efficiency", "text": "Running on standard hardware, spiking networks are considerably less efficient than their ANN counterparts. This is because ANNs are static, requiring only one forward-pass through the network to compute the output, whereas SNNs are dynamic, requiring the input to be presented for a number of time steps and thus a number of forward passes. On hardware that can take full advantage of the sparsity that spikes provide\u2014that is, neuromorphic hardware\u2014SNNs can be more efficient than the equivalent ANNs, as we show here.\nFirst, we need to compute the computational efficiency of the original network, specifically the number of floating-point operations (flops) required to pass one image through the network. There are two main sources of computation in the image: computing the neurons and computing the connections.\nflops = flops neuron \u00d7 neurons + flops connection \u00d7 connections (4)\nSince a rectified linear unit is a simple max function, it requires only one flop to compute (flops/neuron = 1). Each connection requires two flops, a multiply and an add (flops/connection = 2). We can determine the number of connections by \u201cunrolling\u201d each convolution, so that the layer is in the same form as a locally connected layer.\nTo compute the SNN efficiency on a prospective neuromorphic chip, we begin by identifying the energy cost of a synaptic event (Esynop) and neuron update (Eupdate), relative to standard hardware. In consultation with neuromorphic experts, and examining current reports of neuromorphic chips (e.g. [21]), we assume that each neuron update takes as much energy as 0.25 flops (Eupdate = 0.25), and each synaptic event takes as much energy as 0.08 flops (Esynop = 0.08). (These numbers could potentially be much lower for analog chips, e.g. [14].) Then, the total energy used by an SNN to classify one image is (in units of the energy required by one flop on standard hardware)\nESNN = ( Esynop\nsynops s + Eupdate updates s\n) \u00d7 s\nimage (5)\nFor our CIFAR-10 network, we find that on average, the network has rates of 2,693,315,174 synops/s and 49,536,000 updates/s. This results in ECIFAR\u221210 = 45, 569, 843, when each image is presented for 200 ms. Dividing by the number of flops per image on standard hardware, we find that the relative efficiency of the CIFAR-10 network is 0.76, that is it is somewhat less efficient.\nEquation 5 shows that if we are able to lower the amount of time needed to present each image to the network, we can lower the energy required to classify the image. Alternatively, we can lower the number of synaptic events per second by lowering the firing rates of the neurons. Lowering the number of neuron updates would have little effect on the overall energy consumption since the synaptic events require the majority of the energy.\nTo lower the presentation time required for each input while maintaining accuracy, we need to decrease the synapse time constant as well, so that the information is able to propagate through the\nwhole network in the decreased presentation time. Table 4 shows the effect of various alternatives for the presentation time and synapse time constant on the accuracy and efficiency of the networks for a number of the datasets.\nTable 4 shows that for some datasets (e.g. CIFAR-10 and ILSVRC-2012) the synapses can be completely removed (\u03c4s = 0 ms) without sacrificing much accuracy. Interestingly, this is not the case with the MNIST network, which requires at least some measure of synapses to function accurately. We suspect that this is because the MNIST network has much lower firing rates than the other networks (average of 9.67 Hz for MNIST, 148 Hz for CIFAR-10, 93.3 Hz for ILSVRC-2012). This difference in average firing rates is also why the MNIST network is significantly more efficient than the other networks.\nIt is important to tune the classification time, both in terms of the total length of time each example is shown for (c1), and when classification begins (c0). The optimal values for these parameters are very dependent on the network, both in terms of the number of layers, firing rates, and synapse time constants. Figure 3 shows how the classification time affects accuracy for various networks.\nGiven that the CIFAR-10 network performs almost as well with no synapses as with synapses, one may question whether noise is required during training at all. We retrained the CIFAR-10 network with no noise and ran with no synapses, but could not achieve accuracy better than 18.06%. This suggests that noise is still beneficial during training."}, {"heading": "4 Discussion", "text": "Our results show that it is possible to train accurate deep convolutional networks for image classification without adding neurons, while using more complex nonlinear neuron types\u2014specifically the LIF neuron\u2014as opposed to the traditional rectified-linear or sigmoid neurons. We have shown that networks can be run in spiking neurons, and training with noise decreases the amount of error introduced when running in spiking versus rate neurons. These networks can be significantly more energy-efficient than traditional ANNs when run on specialized neuromorphic hardware.\nThe first main contribution of this paper is to demonstrate that state-of-the-art spiking deep networks can be trained with LIF neurons, while maintaining high levels of classification accuracy. For example, we have described the first large-scale SNN able to provide good results on ImageNet. Notably, all other state-of-the-art methods use integrate-and-fire (IF) neurons [11, 10, 12], which are straightforward to fit to the rectified linear units commonly used in deep convolutional networks. We show that there is minimal drop in accuracy when converting from ANN to SNN. We also examine how classification time affects accuracy and energy-efficiency, and find that networks can be made quite efficient with minimal loss in accuracy.\nBy smoothing the LIF response function so that its derivative remains bounded, we are able to use this more complex and nonlinear neuron with a standard convolutional network trained by backpropagation. Our smoothing method is extensible to other neuron types, allowing for networks to be trained for neuromorphic hardware with idiosyncratic neuron types (e.g. [14]). We found that there was very little error introduced by switching from the soft response function to the hard response function with LIF neurons for the amount of smoothing that we used. However, for neurons with harsh discontinuities that require more smoothing, it may be necessary to slowly relax the smoothing over the course of the training so that, by the end of the training, the smooth response function is arbitrarily close to the hard response function.\nThe second main contribution of this paper is to demonstrate that training with noise on neuron outputs can decrease the error introduced when transitioning to spiking neurons. The error decreased by 0.6% overall on the CIFAR-10 network, despite the fact that the ANN trained without noise performs better. This is because noise on the output of the neuron simulates the variability that a spiking network encounters when filtering a spike train. There is a tradeoff between training with too little noise, which makes the SNN less accurate, and too much noise, which makes the initially trained ANN less accurate.\nThese methods provide new avenues for translating traditional ANNs to spike-based neuromorphic hardware. We have provided some evidence that such implementations can be significantly more energy-efficient than their ANN counterparts. While our analyses only consider static image classification, we expect that the real efficiency of SNNs will become apparent when dealing with dynamic inputs (e.g. video). This is because SNNs are inherently dynamic, and take a number of simulation steps to process each image. This makes them best suited to processing dynamic sequences, where adjacent frames in the video sequence are similar to one another, and the network does not have to take time to constantly \u201creset\u201d after sudden changes in the input.\nFuture work includes experimenting with lowering firing rates for greater energy-efficiency. This could be done by changing the neuron refractory period \u03c4ref to limit the firing below a particular\nrate, optimizing for both accuracy and low rates, using adapting neurons, or adding lateral inhibition in the convolutional layers. Other future work includes implementing max-pooling and local contrast normalization layers in spiking networks. Networks could also be trained offline as described here and then fine-tuned online using an STDP rule [22, 23] to help further reduce errors associated with converting from rate-based to spike-based networks, while avoiding difficulties with training a network in spiking neurons from scratch."}], "references": [{"title": "Gradient-based learning applied to document recognition", "author": ["Y. Lecun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE, vol. 86, no. 11, pp. 2278\u20132324, 1998.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1998}, {"title": "Convolutional deep belief networks on CIFAR-10", "author": ["A. Krizhevsky"], "venue": "Tech. Rep., 2010.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2010}, {"title": "Convolutional neural networks applied to house numbers digit classification", "author": ["P. Sermanet", "S. Chintala", "Y. LeCun"], "venue": "International Conference on Pattern Recognition (ICPR), 2012.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "Deeply-supervised nets", "author": ["C.-Y. Lee", "S. Xie", "P.W. Gallagher", "Z. Zhang", "Z. Tu"], "venue": "International Conference on Artificial Intelligence and Statistics (AISTATS), vol. 38, 2015, pp. 562\u2013570.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "Discriminative learning of sum-product networks", "author": ["R. Gens", "P. Domingos"], "venue": "Advances in Neural Information Processing Systems (NIPS), 2012, pp. 1\u20139.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2012}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G. Hinton"], "venue": "Advances in Neural Information Processing Systems, 2012.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "A Large-Scale Model of the Functioning Brain", "author": ["C. Eliasmith", "T.C. Stewart", "X. Choo", "T. Bekolay", "T. DeWolf", "C. Tang", "D. Rasmussen"], "venue": "Science, vol. 338, no. 6111, pp. 1202\u20131205, Nov. 2012.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2012}, {"title": "Event-driven contrastive divergence for spiking neuromorphic systems", "author": ["E. Neftci", "S. Das", "B. Pedroni", "K. Kreutz-Delgado", "G. Cauwenberghs"], "venue": "Frontiers in Neuroscience, vol. 7, no. 272, 2013.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2013}, {"title": "Real-time classification and sensor fusion with a spiking deep belief network", "author": ["P. O\u2019Connor", "D. Neil", "S.-C. Liu", "T. Delbruck", "M. Pfeiffer"], "venue": "Frontiers in Neuroscience, vol. 7, Jan. 2013.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "Fast-Classifying, High-Accuracy Spiking Deep Networks Through Weight and Threshold Balancing", "author": ["P.U. Diehl", "D. Neil", "J. Binas", "M. Cook", "S.-C. Liu", "M. Pfeiffer"], "venue": "IEEE International Joint Conference on Neural Networks (IJCNN), 2015.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2015}, {"title": "Spiking Deep Convolutional Neural Networks for Energy-Efficient Object Recognition", "author": ["Y. Cao", "Y. Chen", "D. Khosla"], "venue": "International Journal of Computer Vision, vol. 113, no. 1, pp. 54\u201366, Nov. 2014.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2014}, {"title": "Convolutional Networks for Fast, Energy-Efficient Neuromorphic Computing", "author": ["S.K. Esser", "P.A. Merolla", "J.V. Arthur", "A.S. Cassidy", "R. Appuswamy", "A. Andreopoulos", "D.J. Berg", "J.L. Mckinstry", "T. Melano", "D.R. Barch", "C. di Nolfo", "P. Datta", "A. Amir", "B. Taba", "M.D. Flickner", "D.S. Modha"], "venue": "arXiv preprint, vol. 1603, no. 08270, pp. 1\u20137, 2016.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2016}, {"title": "Conversion of Artificial Recurrent Neural Networks to Spiking Neural Networks for Low-power Neuromorphic Hardware", "author": ["P.U. Diehl", "G. Zarrella", "A. Cassidy", "B.U. Pedroni", "E. Neftci"], "venue": "arXiv preprint, vol. 1601, no. 04187, 2016.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2016}, {"title": "Neurogrid: A mixed-analog-digital multichip system for large-scale neural simulations", "author": ["B.V. Benjamin", "P. Gao", "E. McQuinn", "S. Choudhary", "A.R. Chandrasekaran", "J.-M. Bussat", "R. Alvarez- Icaza", "J.V. Arthur", "P.A. Merolla", "K. Boahen"], "venue": "Proceedings of the IEEE, vol. 102, no. 5, pp. 699\u2013716, 2014.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2014}, {"title": "Spiking Deep Networks with LIF Neurons", "author": ["E. Hunsberger", "C. Eliasmith"], "venue": "arXiv:1510.08829 [cs], pp. 1\u20139, 2015.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2015}, {"title": "Extracting and composing robust features with denoising autoencoders", "author": ["P. Vincent", "H. Larochelle", "Y. Bengio", "P.-A. Manzagol"], "venue": "International Conference on Machine Learning (ICML), 2008, pp. 1096\u2013 1103.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2008}, {"title": "Reliability of spike timing in neocortical neurons.", "author": ["Z.F. Mainen", "T.J. Sejnowski"], "venue": "Science (New York, N.Y.),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1995}, {"title": "Reading Digits in Natural Images with Unsupervised Feature Learning", "author": ["Y. Netzer", "T. Wang", "A. Coates", "A. Bissacco", "B. Wu", "A.Y. Ng"], "venue": "NIPS workshop on deep learning and unsupervised feature learning, 2011, pp. 1\u20139.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2011}, {"title": "Learning Multiple Layers of Features from Tiny Images", "author": ["A. Krizhevsky"], "venue": "Master\u2019s thesis, University of Toronto, 2009.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2009}, {"title": "ImageNet Large Scale Visual Recognition Challenge", "author": ["O. Russakovsky", "J. Deng", "H. Su", "J. Krause", "S. Satheesh", "S. Ma", "Z. Huang", "A. Karpathy", "A. Khosla", "M. Bernstein", "A.C. Berg", "L. Fei-Fei"], "venue": "International Journal of Computer Vision, vol. 115, no. 3, pp. 211\u2013252, 2015. 9", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2015}, {"title": "A million spiking-neuron integrated circuit with a scalable communication network and interface", "author": ["P.A. Merolla", "J.V. Arthur", "R. Alvarez-Icaza", "A.S. Cassidy", "J. Sawada", "F. Akopyan", "B.L. Jackson", "N. Imam", "C. Guo", "Y. Nakamura", "B. Brezzo", "I. Vo", "S.K. Esser", "R. Appuswamy", "B. Taba", "A. Amir", "M.D. Flickner", "W.P. Risk", "R. Manohar", "D.S. Modha"], "venue": "Science, vol. 345, no. 6197, pp. 668\u2013673, 2014.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2014}, {"title": "Bayesian computation emerges in generic cortical microcircuits through spike-timing-dependent plasticity.", "author": ["B. Nessler", "M. Pfeiffer", "L. Buesing", "W. Maass"], "venue": "PLoS computational biology,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2013}, {"title": "Simultaneous unsupervised and supervised learning of cognitive functions in biologically plausible spiking neural networks", "author": ["T. Bekolay", "C. Kolbeck", "C. Eliasmith"], "venue": "Proc. 35th Annual Conference of the Cognitive Science Society, 2013, pp. 169\u2013174. 10", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2013}], "referenceMentions": [{"referenceID": 0, "context": "Early successes with the MNIST database [1] were subsequently tested on the more difficult but similarly sized CIFAR-10 [2] and Street-view house numbers [3] datasets.", "startOffset": 40, "endOffset": 43}, {"referenceID": 1, "context": "Early successes with the MNIST database [1] were subsequently tested on the more difficult but similarly sized CIFAR-10 [2] and Street-view house numbers [3] datasets.", "startOffset": 120, "endOffset": 123}, {"referenceID": 2, "context": "Early successes with the MNIST database [1] were subsequently tested on the more difficult but similarly sized CIFAR-10 [2] and Street-view house numbers [3] datasets.", "startOffset": 154, "endOffset": 157}, {"referenceID": 3, "context": "[4]), as well as on larger datasets (e.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5]).", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "This work has culminated with the application of deep convolutional neural networks to ImageNet [6], a very large and challenging dataset with 1.", "startOffset": 96, "endOffset": 99}, {"referenceID": 6, "context": "There has recently been considerable effort to introduce neural \u201cspiking\u201d into deep ANNs [7, 8, 9, 10, 11, 12], such that connected nodes in the network transmit information via instantaneous single bits (spikes), rather than transmitting real-valued activities.", "startOffset": 89, "endOffset": 110}, {"referenceID": 7, "context": "There has recently been considerable effort to introduce neural \u201cspiking\u201d into deep ANNs [7, 8, 9, 10, 11, 12], such that connected nodes in the network transmit information via instantaneous single bits (spikes), rather than transmitting real-valued activities.", "startOffset": 89, "endOffset": 110}, {"referenceID": 8, "context": "There has recently been considerable effort to introduce neural \u201cspiking\u201d into deep ANNs [7, 8, 9, 10, 11, 12], such that connected nodes in the network transmit information via instantaneous single bits (spikes), rather than transmitting real-valued activities.", "startOffset": 89, "endOffset": 110}, {"referenceID": 9, "context": "There has recently been considerable effort to introduce neural \u201cspiking\u201d into deep ANNs [7, 8, 9, 10, 11, 12], such that connected nodes in the network transmit information via instantaneous single bits (spikes), rather than transmitting real-valued activities.", "startOffset": 89, "endOffset": 110}, {"referenceID": 10, "context": "There has recently been considerable effort to introduce neural \u201cspiking\u201d into deep ANNs [7, 8, 9, 10, 11, 12], such that connected nodes in the network transmit information via instantaneous single bits (spikes), rather than transmitting real-valued activities.", "startOffset": 89, "endOffset": 110}, {"referenceID": 11, "context": "There has recently been considerable effort to introduce neural \u201cspiking\u201d into deep ANNs [7, 8, 9, 10, 11, 12], such that connected nodes in the network transmit information via instantaneous single bits (spikes), rather than transmitting real-valued activities.", "startOffset": 89, "endOffset": 110}, {"referenceID": 6, "context": "While one goal of this work is to better understand the brain by trying to reverse engineer it [7], another goal is to build energy-efficient neuromorphic systems that use a similar spiking communication method, for image categorization [10, 11, 12] or other applications [13].", "startOffset": 95, "endOffset": 98}, {"referenceID": 9, "context": "While one goal of this work is to better understand the brain by trying to reverse engineer it [7], another goal is to build energy-efficient neuromorphic systems that use a similar spiking communication method, for image categorization [10, 11, 12] or other applications [13].", "startOffset": 237, "endOffset": 249}, {"referenceID": 10, "context": "While one goal of this work is to better understand the brain by trying to reverse engineer it [7], another goal is to build energy-efficient neuromorphic systems that use a similar spiking communication method, for image categorization [10, 11, 12] or other applications [13].", "startOffset": 237, "endOffset": 249}, {"referenceID": 11, "context": "While one goal of this work is to better understand the brain by trying to reverse engineer it [7], another goal is to build energy-efficient neuromorphic systems that use a similar spiking communication method, for image categorization [10, 11, 12] or other applications [13].", "startOffset": 237, "endOffset": 249}, {"referenceID": 12, "context": "While one goal of this work is to better understand the brain by trying to reverse engineer it [7], another goal is to build energy-efficient neuromorphic systems that use a similar spiking communication method, for image categorization [10, 11, 12] or other applications [13].", "startOffset": 272, "endOffset": 276}, {"referenceID": 13, "context": "[14]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "We extend our previous results [15] to additional datasets, and most notably demonstrate that it scales to the large ImageNet dataset.", "startOffset": 31, "endOffset": 35}, {"referenceID": 5, "context": "[6], which won the ImageNet ILSVRC-2012 competition.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "The details of the network can be found in [6] and code is available1.", "startOffset": 43, "endOffset": 46}, {"referenceID": 10, "context": "Past work has kept the rectified linear nonlinearity for the ANN and substituted in the spiking integrate-and-fire (IF) neuron model in the SNN [11, 10], since the static firing curve of the IF neuron model is a rectified line.", "startOffset": 144, "endOffset": 152}, {"referenceID": 9, "context": "Past work has kept the rectified linear nonlinearity for the ANN and substituted in the spiking integrate-and-fire (IF) neuron model in the SNN [11, 10], since the static firing curve of the IF neuron model is a rectified line.", "startOffset": 144, "endOffset": 152}, {"referenceID": 13, "context": "[14]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "Denoising autoencoders [16] have been successfully applied to datasets like MNIST, learning more robust solutions with lower generalization error than their non-noisy counterparts.", "startOffset": 23, "endOffset": 27}, {"referenceID": 16, "context": "The \u03b1-function \u03b1(t) = (t/\u03c4s)es is a simple second-order lowpass filter, inspired by biology [17].", "startOffset": 92, "endOffset": 96}, {"referenceID": 0, "context": "We tested our methods on five datasets: MNIST [1], SVHN [18], CIFAR-10 and CIFAR-100 [19], and the large ImageNet ILSVRC-2012 dataset [20].", "startOffset": 46, "endOffset": 49}, {"referenceID": 17, "context": "We tested our methods on five datasets: MNIST [1], SVHN [18], CIFAR-10 and CIFAR-100 [19], and the large ImageNet ILSVRC-2012 dataset [20].", "startOffset": 56, "endOffset": 60}, {"referenceID": 18, "context": "We tested our methods on five datasets: MNIST [1], SVHN [18], CIFAR-10 and CIFAR-100 [19], and the large ImageNet ILSVRC-2012 dataset [20].", "startOffset": 85, "endOffset": 89}, {"referenceID": 19, "context": "We tested our methods on five datasets: MNIST [1], SVHN [18], CIFAR-10 and CIFAR-100 [19], and the large ImageNet ILSVRC-2012 dataset [20].", "startOffset": 134, "endOffset": 138}, {"referenceID": 9, "context": "88% (22k) [10] SVHN 6.", "startOffset": 10, "endOffset": 14}, {"referenceID": 10, "context": "57% (28k) [11] CIFAR-100 44.", "startOffset": 10, "endOffset": 14}, {"referenceID": 11, "context": "Table 2: Our error rates compared with recent results on the TrueNorth (TN) neuromorphic chip [12], as well as other best results in the literature.", "startOffset": 94, "endOffset": 98}, {"referenceID": 11, "context": "The most significant recent results are from [12], who implemented networks for a number of datasets on both one and eight TrueNorth chips.", "startOffset": 45, "endOffset": 49}, {"referenceID": 9, "context": "The most significant difference between our results and that of [10] and [11] is that we use LIF neurons and can generalize to other neuron types, whereas their methods (and those of [12]) are specific to IF neurons.", "startOffset": 64, "endOffset": 68}, {"referenceID": 10, "context": "The most significant difference between our results and that of [10] and [11] is that we use LIF neurons and can generalize to other neuron types, whereas their methods (and those of [12]) are specific to IF neurons.", "startOffset": 73, "endOffset": 77}, {"referenceID": 11, "context": "The most significant difference between our results and that of [10] and [11] is that we use LIF neurons and can generalize to other neuron types, whereas their methods (and those of [12]) are specific to IF neurons.", "startOffset": 183, "endOffset": 187}, {"referenceID": 5, "context": "[6], except that they also used multiview testing where the classifier output is the average output of the classifier run on nine random patches from each testing image (increasing the accuracy by about 2%).", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[6] 14.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "We first show the original ANN based on [6], and then the effects of each subsequent modification.", "startOffset": 40, "endOffset": 43}, {"referenceID": 20, "context": "[21]), we assume that each neuron update takes as much energy as 0.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[14].", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "Notably, all other state-of-the-art methods use integrate-and-fire (IF) neurons [11, 10, 12], which are straightforward to fit to the rectified linear units commonly used in deep convolutional networks.", "startOffset": 80, "endOffset": 92}, {"referenceID": 9, "context": "Notably, all other state-of-the-art methods use integrate-and-fire (IF) neurons [11, 10, 12], which are straightforward to fit to the rectified linear units commonly used in deep convolutional networks.", "startOffset": 80, "endOffset": 92}, {"referenceID": 11, "context": "Notably, all other state-of-the-art methods use integrate-and-fire (IF) neurons [11, 10, 12], which are straightforward to fit to the rectified linear units commonly used in deep convolutional networks.", "startOffset": 80, "endOffset": 92}, {"referenceID": 13, "context": "[14]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "Networks could also be trained offline as described here and then fine-tuned online using an STDP rule [22, 23] to help further reduce errors associated with converting from rate-based to spike-based networks, while avoiding difficulties with training a network in spiking neurons from scratch.", "startOffset": 103, "endOffset": 111}, {"referenceID": 22, "context": "Networks could also be trained offline as described here and then fine-tuned online using an STDP rule [22, 23] to help further reduce errors associated with converting from rate-based to spike-based networks, while avoiding difficulties with training a network in spiking neurons from scratch.", "startOffset": 103, "endOffset": 111}], "year": 2016, "abstractText": "We describe a method to train spiking deep networks that can be run using leaky integrate-and-fire (LIF) neurons, achieving state-of-the-art results for spiking LIF networks on five datasets, including the large ImageNet ILSVRC-2012 benchmark. Our method for transforming deep artificial neural networks into spiking networks is scalable and works with a wide range of neural nonlinearities. We achieve these results by softening the neural response function, such that its derivative remains bounded, and by training the network with noise to provide robustness against the variability introduced by spikes. Our analysis shows that implementations of these networks on neuromorphic hardware will be many times more power-efficient than the equivalent non-spiking networks on traditional hardware.", "creator": "LaTeX with hyperref package"}}}