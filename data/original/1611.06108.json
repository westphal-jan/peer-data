{"id": "1611.06108", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Nov-2016", "title": "Navigational Rule Derivation: An algorithm to determine the effect of traffic signs on road networks", "abstract": "In this paper we present an algorithm to build a road network map enriched with traffic rules such as one-way streets and forbidden turns, based on the interpretation of already detected and classified traffic signs. Such algorithm helps to automatize the elaboration of maps for commercial navigation systems. Our solution is based on simulating navigation along the road network, determining at each point of interest the visibility of the signs and their effect on the roads. We test our approach in a small urban network and discuss various ways to generalize it to support more complex environments.", "histories": [["v1", "Thu, 17 Nov 2016 18:39:44 GMT  (294kb)", "http://arxiv.org/abs/1611.06108v1", "This research has received funding from the European Union's Horizon 2020 research and innovation programme under the Marie Sk{\\l}odowska-Curie Actions H2020-MSCA-RISE-2015 BIRDS GA No. 690941. in PACIS 2016 Online Proceedings"]], "COMMENTS": "This research has received funding from the European Union's Horizon 2020 research and innovation programme under the Marie Sk{\\l}odowska-Curie Actions H2020-MSCA-RISE-2015 BIRDS GA No. 690941. in PACIS 2016 Online Proceedings", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["daniil galaktionov", "miguel r luaces", "\\'angeles s places"], "accepted": false, "id": "1611.06108"}, "pdf": {"name": "1611.06108.pdf", "metadata": {"source": "CRF", "title": "NAVIGATIONAL RULE DERIVATION: AN ALGORITHM TO DETERMINE THE EFFECT OF TRAFFIC SIGNS ON ROAD NETWORKS", "authors": ["Daniil Galaktionov", "Miguel R. Luaces"], "emails": ["d.galaktionov@udc.es", "luaces@udc.es", "asplaces@udc.es"], "sections": [{"heading": null, "text": "In this paper we present an algorithm to build a road network map enriched with traffic rules such as one-way streets and forbidden turns, based on the interpretation of already detected and classified traffic signs. Such algorithm helps to automatize the elaboration of maps for commercial navigation systems.\nOur solution is based on simulating navigation along the road network, determining at each point of interest the visibility of the signs and their effect on the roads. We test our approach in a small urban network and discuss various ways to generalize it to support more complex environments.\nKeywords: GIS, Traffic signs, Transport networks, Graph navigation\n* Funded in part by European Union\u2019s Horizon 2020 research and innovation programme under the Marie Sk lodowska-Curie grant agreement No 690941, Ministerio de Econom\u00eda y Competitividad (PGE y Fondos FEDER) ref. TIN2013-46801-C4-3R; CDTI and Ministerio de Econom\u00eda y Competitividad, Ref. IDI-20141259, Ref. ITC-20151305, and Ref. ITC-20151247; and by Xunta de Galicia (co-founded with FEDER) [GRC2013/053]."}, {"heading": "1 INTRODUCTION", "text": "Any commercial GPS navigation system provides a routing feature that informs the user on routes, formed by possible paths over a road network, to reach a destination point from a given origin. The calculations involved are expected to produce routes with certain soft warranties about them, like being the quickest possible routes or sometimes avoiding traffic congestions. There are also more important strict warranties, most notably that a route is physically and legally navigable. For these strict warranties, the system must be supplied with up-to-date representations of the road network and all the rules associated to it, like one-way streets and turn restrictions. Some of these rules, like speed limits, are also useful for providing soft warranties.\nTo this day the elaboration of these enriched network maps has been done using semi-automatic techniques. Modern automatic systems exist for the mapping of navigable roads (Cao & Krumm 2009) and also the inventory of traffic signs (Brki\u0107 et al. 2009; Maldonado-Bascon et al. 2008). However, this automatic acquisition must always be followed by a manual process of enrichment with the identification of lanes over roads, mapping of traffic rules, road names and other features of interest to make a useful navigational map. In this article we offer a practical algorithm called the Navigational Rule Derivation (NRD) that assists in the mapping of traffic rules on a road network, alleviating the amount of manual labour needed, thus reducing the cost of producing and updating these maps.\nTo this date, no existing solution has been found for this specific problem. However, there is a big focus on research for sign detection and classification systems, most notably (Mogelmose et al. 2012) and (Cire\u015fan et al. 2012), among many others. The techniques developed by these authors are very helpful for traffic inventory, as they allow to automatically collect large quantities of data about signs, their visibility and their positions. The current work plays the role of a possible next step for these systems, which would be establishing the effect that these signs have on the traffic network. To do this, the signs must be classified and their positions and orientations need to be precisely extracted. This may be developed using LIDAR systems as done in (Tagaki et al. 2006), (Zhou & Deng 2014) and more recently in (Riveiro et al. 2016).\nThe remainder of this article is organized as follows. In Section 2 we give a complete overview of the data we work with and our goals. Our work is described in two sections. In Section 3, we offer the final algorithm and analyze its results in the test playground, while in Section 4 we describe some interesting alternative solutions that were discarded due to their unsuccessful performance. Finally, Section 5 gives the conclusions."}, {"heading": "2 PROBLEM DESCRIPTION", "text": "There are two kinds of prepared information that we part from: a set of detected and classified signs that is combined with a navigable road network. We store some useful information about the signs: their positions, their types and their orientations relative to the north, also called azimuths. This is all the data we need to define our problem, being our main goal to automatically produce an enriched version of this network with traffic rules extracted from this information, so it can be used to make better routing algorithms. As a desirable side effect, our rules may be published conforming to a standard, such as the INSPIRE Data Specification on Transport Network\u2020.\n\u2020 http://inspire.jrc.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_TN_v3.2.pdf\nWe have decided to simplify the problem for our approach, so we have limited our algorithm to work with just a set of sign types, described in Table 1. Given that the algorithm uses the type of sign instead of its image, it can be applied to any country where similar signs exist. Furthermore, even though we present the Spanish version of the sign, these signs are used all over Europe and many other countries. We also force ourselves to work with a model of the traffic world that makes the following assumptions:\n\u2022 For every road there are at most two lanes, one for each navigable direction.\n\u2022 The detected traffic signs alone are enough to infer all the legal restrictions for a road network. This also means that any other sources of information like road markings can be safely ignored.\n\u2022 There is no other information needed to correctly assign rules to roads, so everything is located at the same height or level and there are neither buildings nor other obstacles for the visibility of a sign.\n\u2022 The signs R-101, R-400a, R-400b and R-400c are found at intersections or just before entering a street and the signs R-302, R-303, R-400d and R-400e are found before reaching an intersection, at a reasonable distance of about ten meters.\n\u2022 Some signs are complimentary.\no For instance, an R-400a sign would have the same effect if instead there was an R-101 sign for every street from the intersection except the one to the right of the sign.\no There is a similar effect for R-400d and R-400e, which could be replaced by turn restrictions to every other street."}, {"heading": "3 THE NAVIGATIONAL RULE DERIVATION ALGORITHM", "text": ""}, {"heading": "3.1 Overview", "text": "The idea behind the NRD is to mimic the natural behaviour of human drivers while they drive through a relatively unknown road network, such as a city. The drivers must take notice of the signs while navigating the network, this way discovering where they may navigate from their current vehicle position and effectively mapping rules to streets within vision.\nWe may safely assume that the rules from all signs that restrict navigation can be mapped when an intersection is reached after navigating a street. While no intersection is reached, there is no decision to be made, as sudden U-turns are usually prohibited. But as mentioned in Section 2, there are signs that involve navigation restrictions and placed before the intersection, at any point along the street, so it is important to detect and remember these kind of signs until an intersection is reached, just as a human driver would do.\nFrom this point, we will use the terms edge and node from graph terminology. A node is a traffic intersection, that is, any point where a turn decision is possible. A node has usually three or more outgoing edges, but it can also be a dead end, with no other outgoing edges. An edge is any navigable link between two nodes. A typical city street is split into multiple edges that connect its intersections with other streets (nodes), as shown in Figure 1. All edges are directed, meaning that they can be navigated in only one way, from node A to node B. A different edge is needed to reciprocally connect B to A.\nThe algorithm depicted in Figure 2 starts with a graph representation for the traffic network of interest, with every road split into directed edges for both directions, since we initially must consider that every road is always navigable from any direction. The driving starts from a single edge, detecting all signs along this edge that are oriented for the current direction, and also all signs that can be seen from the node in the end. When a node is reached, each of the previously detected signs is analyzed to create corresponding rules, as explained in Section 3.3. All the outgoing edges from this node that do not violate any of these rules are then added into a queue called the frontier, and marked as visited so they would never be added more than once. The first item of the frontier is then extracted and\nnavigated as before. The algorithm ends when the frontier is empty, which means it cannot navigate any further. If the graph had isolated groups of edges, they would be never visited\u2021.\nassignSigns (graph, startEdge):\nTwo checks are performed in isNavigationForbidden from Figure 2 that could avoid traversing an edge:\n\u2022 There is a rule that forbids driving through edge, as would usually happen for one-way streets or when turn restrictions exist from currentEdge to edge.\n\u2022 edge is the opposite for currentEdge, as sudden U-turns are not usually legal. An exception is made when it is the only available edge left, whether it is because node is a dead end or because all the other edges from outgoingEdges were discarded by some of the previous checks. Making this exception allows the NRD to fully cover all the navigable roads in both directions.\nIn the following section we will proceed to explain the working of detectSignsFrom and detectSignsAlong."}, {"heading": "3.2 Sign detection", "text": "The goal of this stage is to determine what signs can be seen while navigating the current edge and upon reaching the intersection node. As previously implied, two different detectors are needed to effectively find all the visible signs. The detector described in Figure 3 returns visible signs from an intersection node. First it obtains all signs that are at a distance of 15m and then it discards the ones that are not oriented towards the intersection. To achieve a reasonable temporal efficiency, we implement the filter operation using a spatial index such as an R-Tree (Guttman 1984). Another operation involved in this detector is calculateHeading, which returns the bearing of point B from\n\u2021 In theory, it does not make sense to derive traffic rules for roads that can never be reached. In practice, it could be done by making artificial edges with no geometry that connect isolated edge groups.\npoint A relative to the north\u00a7. In case the sign appears to be rotated by more than 80\u00ba from the position of the driver, we consider that it is not meant to be visible from the intersection.\ndetectSignsFrom (node):\nA slightly more complex variant is used for the second detector in Figure 4, where we make use of length-indexed lines. An operation called project allows returning the coordinates of a length within a line (e.g., its 24th meter). Its complimentary operation is index, which returns the length of a line up to a given point. Finally, the closest operation returns the coordinates of the closest point from a line to another given point. Instead of using always a fixed position to figure out the visibility of a sign, we take the closest position of the edge to the sign, and then use a point that is ten meters behind it along the edge as the reference position. Notice that when the closest point is either the start or the end of the edge, then it is discarded as it should be detected from an intersection, if ever.\ndetectSignsAlong (currentEdge):\n\u00a7 0\u00ba when B is to the north of A, 90\u00ba when B is to the east, etc..."}, {"heading": "3.3 Rule generation", "text": "For each detected sign, a score is calculated for every outgoing edge with a likelihood of this sign applying to it. If the edge with the best score is above a threshold of zero, then a new rule is generated. This, however, may lead to a problem when a sign can be detected from more than one edge or node due to their proximity and generating spurious rules, as depicted in Figure 5. To solve it, the newly generated rule is associated to the sign they were generated from, and can only be replaced when a higher score is obtained. The unvisited edges affected by the replaced rules may be never visited naturally, so they have to be pushed into the frontier, as shown in Figure 7.\nsign.\nanalyzeSigns (signs, currentEdge, node, outgoingEdges, frontier):\nIn Figure 6, the signs that have one of the oneWaySigns types can replaced by various NoWayRules, according to what is mentioned in Section 2 or a special rule that contains a set of banned edges instead of a single banned edge. In a similar way, mustTurnSigns produce rules that are effectively NoTurnRules with one source edge and a set of destination edges. They are omitted in pseudocode as their cases would need a more complex and generic associateNewRule routine that the one shown in Figure 7.\nassociateNewRule (sign, newRule, score, unban, frontier):\nPseudocode for the calculation of the edge scores can be found in Figures 8 and 9. It uses lengthindexed lines explained in Section 3.2 and also the angle operation shown in Figure 10, that calculates the smallest angle between two vectors defined as three points: the first and the third parameters are the tips of each vector, while the second is a common tail for both of them, returning a value between - 180\u00ba and 180\u00ba.\nbestNoWayEdge (sign, node, outgoingEdges):\nbestNoTurnEdge (sign, currentEdge, outgoingEdges):\nIn case of bestNoWayEdge, we have a node-sign vector, and we search for the most similar nodeedge vector, from all the outgoing edges. The least is the angle between both vectors, the higher is the score. We also penalize edges that fall to the right of a sign, as signs are usually put on the same side of a road the traffic drives on, although exceptions are made in some cases. The tip of the node-edge vector is taken as the closest point of the edge to the sign or its 10th meter in case the sign is in the opposite direction, which usually means that this is not the edge that the sign applies to.\nSimilar calculations are made in bestNoTurnEdge. This time the vectors are node-currentEdge and node-edge, and we add an offset of -90\u00ba of 90\u00ba to the angle depending on the direction of the forbidden turn. The closest point of currentEdge is used as the tip of the node-currentEdge vector, while the tip of the node-edge vector is always the 10th meter of the destination edge."}, {"heading": "3.4 Playground experimental results", "text": "The test playground used to develop our algorithm is located in the Spanish town of \u00c1vila, which is famous for its medieval walls enclosing the old district of the town. This enclosed old district consists of simple one or two-way lane streets, all of them in the same level, and no roundabouts, so it was considered an adequate playground.\nThe inventory of signs, including their location, orientation and type was obtained following the methodology described in (Riveiro et al. 2016), which works over a point cloud obtained from a LIDAR system. Their approach is based on the sequential application of clustering algorithms to detect traffic signs in the point cloud. These signs are then classified by reconstructing their shape and analyzing their geometric properties.\nFor the development and tests for our algorithm and all alternative approaches we used PostGIS** and JTS\u2020\u2020 library for spatial data storing and manipulation. To evaluate the performance of the NRD in our playground, we crossed the produced data (traffic rules) with already existing data publicly available from OpenStreetMap\u2021\u2021. Unfortunately, OSM only provides accurate definition of one-way streets but not turn restrictions for \u00c1vila. In fact, most of the turn restrictions are incorrectly mapped as one-way streets, further complicating our validation.\nThe NRD may fail to extract a correct traffic rule in one of these cases:\n1. Real-world signs that were not detected and recognized in the previous stages to our work.\n2. Disagreement between the road network and the signs. This is usually caused by having both datasets mapped at different instances of time. Fortunately, the streets from the old part of \u00c1vila are rarely subject to changes.\n3. Flaws in the NRD, which probably could be solved using a more complex approach.\n4. Bad or incomplete sign placement, as happens in many rural and even urban areas.\n5. Oversimplified model. This is not an issue in our playground case, but it is common to find bridges and tunnels in the real world, as well as multiple lanes.\nIn Table 2 we present a measure to the performance of the NRD in terms of accuracy, taking the OSM data and manual observation as ground truth. Notice that we only evaluate direct flaws from the NRD, not its sources of information. Also, it would be difficult to estimate the completeness or \u201crecall\u201d of the NRD, as it is highly dependent on the completeness of the input data itself."}, {"heading": "4 DISCARDED APPROACHES", "text": ""}, {"heading": "4.1 By-Sign static mapping", "text": "The first temptation was to iterate every sign available and try to figure out which roads it affected to. In theory, this is a much simpler solution as it does not involve any navigation and thus does not require the network to be navigable. A bidimensional cone was projected from the sign, and any affected road had to intersect that cone. An example of two such cones is illustrated in Figure 11\n** http://postgis.net \u2020\u2020 http://www.vividsolutions.com/jts/JTSHome.htm \u2021\u2021 http://www.openstreetmap.org\n. The cone orientation was relative to the sign's azimuth and depended on the sign type. For No Way signs, the cone was opposing the sign's azimuth. For turn restrictions, cones were projected in two different directions to find the affected roads. To choose among various possible matches different scoring methods were experimented with, involving the similarity of the azimuth to the closest segment of the road, distance and relative position. This approach was ultimately proven ineffective for the following reasons:\n\u2022 It did not take into account the network's connectivity, so the wrong road could be associated. In Figure 11, the yellow cone would detect two edges, disregarding their connectivity, and assign a better score for the bottom edge because it would seem like a closer turn.\n\u2022 There was no simple way of knowing where a sign was supposed to be seen from, leading to wrong mapping due to this lack of information.\n\u2022 A sign's azimuth, while vital to calculate its visibility in the NRD, turned out to be a poor source of information to actually derive rules from in the real world.\n\u2022 This solution cannot be extended to support the mapping of speed limits or roundabouts without resorting to navigation."}, {"heading": "4.2 Navigation mapping with by-edge decision", "text": "In the first versions of the NRD, after navigating into a node, we individually evaluated every outgoing edge by projecting a vision cone towards it. If signs were detected, they were analyzed and the generated rules were associated with that edge. Many spurious rules were generated for signs that could fall into different vision cones, but they could be suppressed by associating them to the sign and using a scoring mechanism as seen in Figure 7. The main issue was that signs of type R-400a, R-400b and R-400c, while meant to be detected from an intersection, were not necessarily close to any outgoing edge it affected, if any at all. A wider cone could have been used, but it made much more sense to detect first every sign within a radius from the intersection first, and then figure out which edge each sign applies to, as finally done for the NRD in Section 3.3."}, {"heading": "5 CONCLUSIONS", "text": "We presented a starting step for a complex problem and provided a valid proof of concept for traffic rule generation algorithms based on the simulation of a virtual driver. From this point, there are numerous enhancements that we could do to the NRD to improve the sign analysis in some complicated cases and to also support more kinds of signs, such as roundabouts and speed limits. When human drivers see a speed limit sign, they remember that limit until they reach some point where the limit is voided, as could be a yield sign or another speed limit. Knowing that, it makes sense to introduce some state into the NRD during navigation, so each edge would be marked with a speed limit as it is visited.\nReal-World applications also require a greater degree of complexity than the one we restricted ourselves to in Section 2. We need to support multiple lanes and road markings that could be used to complement or verify rules generated by the usual traffic signs. Also, the navigation needs to work with three-dimensional coordinates or have some information about the level of the roads and signs, which would help to avoid the expected error cases with tunnels and bridges. The NRD can be further enhanced with the addition of trajectory analysis: if we could get data about a significant amount of drivers, we could derive traffic rules by examining turns that nobody takes, their usual driving speed across the network and other useful information.\nReferences Cao, L., & Krumm, J. (2009, November). From GPS traces to a routable road map. In Proceedings of\nthe 17th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems (pp. 3-12). ACM.\nMaldonado-Bascon, S., Lafuente-Arroyo, S., Siegmann, P., Gomez-Moreno, H., & AcevedoRodriguez, F. J. (2008, June). Traffic sign recognition system for inventory purposes. In Intelligent Vehicles Symposium, 2008 IEEE (pp. 590-595). IEEE. Brki\u0107, K., Pinz, A., & \u0160egvi\u0107, S. (2009, January). Traffic sign detection as a component of an automated traffic infrastructure inventory system. In 33rd annual Workshop of the Austrian Association for Pattern Recognition (OAGM/AAPR). B. Riveiro, L. D\u00edaz-Vilari\u00f1o, B. Conde-Carnero, M. Soil\u00e1n and P. Arias (2016, January). Automatic Segmentation and Shape-Based Classification of Retro-Reflective Traffic Signs from Mobile LiDAR Data. In IEEE Journal of Selected Topics in Applied Earth Observations and Remote Sensing, vol. 9, pp. 295-303. Guttman, A. (1984). R-trees: a dynamic index structure for spatial searching (Vol. 14, No. 2, pp. 47- 57). ACM. Takagi, K., Morikawa, K., Ogawa, T., & Saburi, M. (2006, June). Road environment recognition using on-vehicle LIDAR. In Intelligent Vehicles Symposium, 2006 IEEE (pp. 120-125). IEEE. Zhou, L., & Deng, Z. (2014, October). LIDAR and vision-based real-time traffic sign detection and recognition algorithm for intelligent vehicle. In Intelligent Transportation Systems (ITSC), 2014 IEEE 17th International Conference on (pp. 578-583). IEEE. Mogelmose, A., Trivedi, M. M., & Moeslund, T. B. (2012). Vision-based traffic sign detection and analysis for intelligent driver assistance systems: Perspectives and survey. Intelligent Transportation Systems, IEEE Transactions on, 13(4), 1484-1497. Cire\u015fan, D., Meier, U., Masci, J., & Schmidhuber, J. (2012). Multi-column deep neural network for traffic sign classification. Neural Networks, 32, 333-338."}], "references": [{"title": "November). From GPS traces to a routable road map", "author": ["L. Cao", "J. Krumm"], "venue": "In Proceedings of the 17th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems (pp. 3-12)", "citeRegEx": "Cao and Krumm,? \\Q2009\\E", "shortCiteRegEx": "Cao and Krumm", "year": 2009}, {"title": "Traffic sign recognition system for inventory purposes", "author": ["S. Maldonado-Bascon", "S. Lafuente-Arroyo", "P. Siegmann", "H. Gomez-Moreno", "AcevedoRodriguez", "F. J", "June"], "venue": "In Intelligent Vehicles Symposium,", "citeRegEx": "Maldonado.Bascon et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Maldonado.Bascon et al\\.", "year": 2008}, {"title": "Traffic sign detection as a component of an automated traffic infrastructure inventory system. In 33rd annual Workshop of the Austrian Association for Pattern Recognition (OAGM/AAPR)", "author": ["K. Brki\u0107", "A. Pinz", "\u0160egvi\u0107", "January"], "venue": null, "citeRegEx": "Brki\u0107 et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Brki\u0107 et al\\.", "year": 2009}, {"title": "Automatic Segmentation and Shape-Based Classification of Retro-Reflective Traffic Signs from Mobile LiDAR Data", "author": ["B. Riveiro", "L. D\u00edaz-Vilari\u00f1o", "B. Conde-Carnero", "M. Soil\u00e1n", "P. Arias", "January"], "venue": "In IEEE Journal of Selected Topics in Applied Earth Observations and Remote Sensing,", "citeRegEx": "Riveiro et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Riveiro et al\\.", "year": 2016}, {"title": "R-trees: a dynamic index structure for spatial searching", "author": ["A. Guttman"], "venue": "(Vol. 14,", "citeRegEx": "Guttman,? \\Q1984\\E", "shortCiteRegEx": "Guttman", "year": 1984}, {"title": "Road environment recognition using on-vehicle LIDAR", "author": ["K. Takagi", "K. Morikawa", "T. Ogawa", "Saburi", "June"], "venue": "In Intelligent Vehicles Symposium,", "citeRegEx": "Takagi et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Takagi et al\\.", "year": 2006}, {"title": "October). LIDAR and vision-based real-time traffic sign detection and recognition algorithm for intelligent vehicle", "author": ["L. Zhou", "Z. Deng"], "venue": "In Intelligent Transportation Systems (ITSC),", "citeRegEx": "Zhou and Deng,? \\Q2014\\E", "shortCiteRegEx": "Zhou and Deng", "year": 2014}, {"title": "Vision-based traffic sign detection and analysis for intelligent driver assistance systems: Perspectives and survey", "author": ["A. Mogelmose", "M.M. Trivedi", "T.B. Moeslund"], "venue": "Intelligent Transportation Systems, IEEE Transactions on,", "citeRegEx": "Mogelmose et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Mogelmose et al\\.", "year": 2012}, {"title": "Multi-column deep neural network for traffic sign classification", "author": ["D. Cire\u015fan", "U. Meier", "J. Masci", "J. Schmidhuber"], "venue": "Neural Networks,", "citeRegEx": "Cire\u015fan et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Cire\u015fan et al\\.", "year": 2012}], "referenceMentions": [{"referenceID": 2, "context": "Modern automatic systems exist for the mapping of navigable roads (Cao & Krumm 2009) and also the inventory of traffic signs (Brki\u0107 et al. 2009; Maldonado-Bascon et al. 2008).", "startOffset": 125, "endOffset": 174}, {"referenceID": 1, "context": "Modern automatic systems exist for the mapping of navigable roads (Cao & Krumm 2009) and also the inventory of traffic signs (Brki\u0107 et al. 2009; Maldonado-Bascon et al. 2008).", "startOffset": 125, "endOffset": 174}, {"referenceID": 7, "context": "However, there is a big focus on research for sign detection and classification systems, most notably (Mogelmose et al. 2012) and (Cire\u015fan et al.", "startOffset": 102, "endOffset": 125}, {"referenceID": 8, "context": "2012) and (Cire\u015fan et al. 2012), among many others.", "startOffset": 10, "endOffset": 31}, {"referenceID": 3, "context": "2006), (Zhou & Deng 2014) and more recently in (Riveiro et al. 2016).", "startOffset": 47, "endOffset": 68}, {"referenceID": 4, "context": "To achieve a reasonable temporal efficiency, we implement the filter operation using a spatial index such as an R-Tree (Guttman 1984).", "startOffset": 119, "endOffset": 133}, {"referenceID": 3, "context": "The inventory of signs, including their location, orientation and type was obtained following the methodology described in (Riveiro et al. 2016), which works over a point cloud obtained from a LIDAR system.", "startOffset": 123, "endOffset": 144}], "year": 2016, "abstractText": "In this paper we present an algorithm to build a road network map enriched with traffic rules such as one-way streets and forbidden turns, based on the interpretation of already detected and classified traffic signs. Such algorithm helps to automatize the elaboration of maps for commercial navigation systems. Our solution is based on simulating navigation along the road network, determining at each point of interest the visibility of the signs and their effect on the roads. We test our approach in a small urban network and discuss various ways to generalize it to support more complex environments.", "creator": "Acrobat PDFMaker 11 para Word"}}}