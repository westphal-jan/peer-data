{"id": "1611.06189", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Nov-2016", "title": "Query Complexity of Tournament Solutions", "abstract": "A directed graph where there is exactly one edge between every pair of vertices is called a {\\em tournament}. Finding the \"best\" set of vertices of a tournament is a well studied problem in social choice theory. A {\\em tournament solution} takes a tournament as input and outputs a subset of vertices of the input tournament. However, in many applications, for example, choosing the best set of drugs from a given set of drugs, the edges of the tournament are given only implicitly and knowing the orientation of an edge is costly. In such scenarios, we would like to know the best set of vertices (according to some tournament solution) by \"querying\" as few edges as possible. We, in this paper, precisely study this problem for commonly used tournament solutions: given an oracle access to the edges of a tournament T, find $f(T)$ by querying as few edges as possible, for a tournament solution f. We first show that the set of Condorcet non-losers in a tournament can be found by querying $2n-\\lfloor \\log n \\rfloor -2$ edges only and this is tight in the sense that every algorithm for finding the set of Condorcet non-losers needs to query at least $2n-\\lfloor \\log n \\rfloor -2$ edges in the worst case, where $n$ is the number of vertices in the input tournament. We then move on to study other popular tournament solutions and show that any algorithm for finding the Copeland set, the Slater set, the Markov set, the bipartisan set, the uncovered set, the Banks set, and the top cycle must query $\\Omega(n^2)$ edges in the worst case. On the positive side, we are able to circumvent our strong query complexity lower bound results by proving that, if the size of the top cycle of the input tournament is at most $k$, then we can find all the tournament solutions mentioned above by querying $O(nk + \\frac{n\\log n}{\\log(1-\\frac{1}{k})})$ edges only.", "histories": [["v1", "Fri, 18 Nov 2016 18:19:32 GMT  (16kb)", "http://arxiv.org/abs/1611.06189v1", "To appear in AAAI 2017"], ["v2", "Mon, 21 Nov 2016 13:26:00 GMT  (16kb)", "http://arxiv.org/abs/1611.06189v2", "To appear in AAAI 2017"], ["v3", "Wed, 25 Jan 2017 05:45:42 GMT  (16kb)", "http://arxiv.org/abs/1611.06189v3", "To appear in AAAI 2017"]], "COMMENTS": "To appear in AAAI 2017", "reviews": [], "SUBJECTS": "cs.DS cs.AI cs.DM", "authors": ["palash dey"], "accepted": true, "id": "1611.06189"}, "pdf": {"name": "1611.06189.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n61 1.\n06 18\n9v 1\n[ cs\n.D S]\n1 8\nN ov\n2 01\nA directed graph where there is exactly one edge between every pair of vertices is called a tournament. Finding the \u201cbest\u201d set of vertices of a tournament is a well studied problem in social choice theory. A tournament solution takes a tournament as input and outputs a subset of vertices of the input tournament. However, in many applications, for example, choosing the best set of drugs from a given set of drugs, the edges of the tournament are given only implicitly and knowing the orientation of an edge is costly. In such scenarios, we would like to know the best set of vertices (according to some tournament solution) by \u201cquerying\u201d as few edges as possible. We, in this paper, precisely study this problem for commonly used tournament solutions: given an oracle access to the edges of a tournament T , find f(T ) by querying as few edges as possible, for a tournament solution f. We first show that the set of Condorcet non-losers in a tournament can be found by querying 2n \u2212 \u230alogn\u230b \u2212 2 edges only and this is tight in the sense that every algorithm for finding the set of Condorcet non-losers needs to query at least 2n \u2212 \u230alogn\u230b \u2212 2 edges in the worst case, where n is the number of vertices in the input tournament. We then move on to study other popular tournament solutions and show that any algorithm for finding the Copeland set, the Slater set, the Markov set, the bipartisan set, the uncovered set, the Banks set, and the top cycle must query \u2126(n2) edges in the worst case. On the positive side, we are able to circumvent our strong query complexity lower bound results by proving that, if the size of the top cycle of the input tournament is at most k, then we can find all the tournament solutions mentioned above by querying O(nk + n logn/log(1\u22121/k)) edges only."}, {"heading": "1 Introduction", "text": "Many scenarios in multiagent systems can often be modeled and analyzed using tour-\nnaments [Mou86, BBFH14]. An important example of such scenarios is voting where\nwe have a set of alternatives and a set of votes which are linear orders over the set\nof alternatives. A important tournament to consider in this context is defined by the\nmajority relation induced by the set of votes. In the majority relation, an alternative\nx is preferred over another alternative y if x is preferred over y in a majority of the\nvotes. Indeed, many important voting rules, like Copeland for example, are defined\nusing the tournament induced by the majority relation of the input set of votes. Other\nthan voting, tournaments have found many applications in multi-criteria decision analysis [AR+86, BMP+06], zero-sum games [FR95, DLB96], coalitional games [BH10],\nargumentation theory [Dun95, Dun07], biology [CH07], etc.\nFormally, a tournament is defined as a set of alternatives along with an irreflexive,\nantisymmetric, and total relation, called dominance relation, on the set alternatives.\nAn equivalent and often more convenient view of a tournament is as a directed graph\non the alternatives where, between every pair of vertices (which corresponds to the\nalternatives), there is exactly one edge. A tournament solution takes a tournament as\ninput and outputs a subset of the vertices. Tournament and tournament solutions are\nimportant mathematical tools in any general situation where we have to make a choice\nfrom a set of alternatives solely based on pairwise comparisons."}, {"heading": "1.1 Motivation", "text": "We often have situations where the input tournament is given \u201cimplicitly\u201d \u2013 the vertices\nof the tournament are given explicitly and we have to query for an edge to know its\norientation. Moreover, knowing the orientation of an edge of the tournament can often\nbe costly. For example, we can think of an application where we have a set of drugs for\na particular disease and we want to know the \u201cbest\u201d (according to some tournament\nsolution) set of drugs. A natural dominance relation in this context would be to define\na drug x to dominate another drug y if the probability that the drug x cures the disease\nis more than the corresponding probability for the drug y. Since these probabilities are\noften not known a priori, estimating them often requires extensive lab experiments as\nwell as clinical trials. Hence, we would like to make as few queries as possible to know\nthe best set of drugs. More generally, we can think of any tournament based voting\nrules like Copeland in an election scenario. A tournament based voting rule chooses\nwinners solely based on the tournament induced by the pairwise majority relation be-\ntween the alternatives. However, in many applications of voting in multiagent systems,\nrecommender systems [PHG00] for example, the number of voters is huge and conse-\nquently, learning the majority relation is costly. Hence, we would like to learn the set of\nmost popular items (according to the tournament solution under consideration) with\nthe smallest number of queries possible. Motivated by these applications, we study, for a tournament solution f, the problem of finding f(T ) of an input tournament T by querying smallest number of edges possible. A query for an edge, in our model, reveals\nthe orientation of the edge in the input tournament.\nFinding the query complexity of various graph properties has drawn significant\nattention in literature. In the most general setting, the input is a directed graph on n\nvertices and one has to find whether the input graph satisfies some property we are\nconcerned with, by asking a minimum number of queries. A query is a question of the\nform: \u201cIs there an edge from a vertex x to another vertex y?\u201d The query complexity of a\nproperty is the worst case number of queries that must be made to know whether the\ninput graph has that property. A graph property, in this context, is called evasive if its query complexity is n(n \u2212 1), that is, one has to query all possible edges of the input digraph to test the property in the worst case. Karp conjectured that every monotone\nand nontrivial graph property is evasive. A graph property is monotone if it continues\nto hold even after adding more edges and nontrivial if it holds for some but not all\ngraphs. A substantial amount of research effort has provided increasingly better query\ncomplexity lower bounds for monotone and nontrivial properties, although Karp\u2019s\nconjecture remained open [KSS84, Kin88, RV76, Ros73, CKS01, Kul13, KT10]. In the\ncase of tournaments (where there is exactly one edge between every pair of vertices),\nRaman [BRS97] showed (rediscovered by Procaccia [Pro08]) that a Condorcet winner \u2013 a vertex with n \u2212 1 outgoing edges \u2013 can be found, if it exists, with 2n \u2212 \u230alogn\u230b \u2212 2 queries and this query complexity upper bound is tight in the worst case. This further\nmotivates us to study the query complexity of other commonly used tournament\nsolutions."}, {"heading": "1.2 Our Contribution", "text": "In this paper, we prove tight bounds on the query complexity of commonly used tour-\nnament solutions. Our specific contributions in this paper are as follows.\n\u2013 We show that the query complexity of the problem of finding the set of Condorcet\nnon-losers is 2n \u2212 \u230alogn\u230b \u2212 2 [Observation 3.1].\n\u2013 We show that any algorithm for finding the Copeland set, the Slater set, and\nthe Markov set in a tournament has query complexity (n 2 ) [Theorem 3.1]. We remark that Goyal et al. [GJR17] also discovered this result independently (and\nin parallel) around same time.\n\u2013 We prove that any algorithm for finding the bipartisan set [Theorem 3.2], the\nuncovered set [Theorem 3.3], the Banks set [Theorem 3.4], and the top cycle [Theorem 3.5] has query complexity \u2126(n2).\n\u2013 We complement the our strong query complexity lower bounds above by showing\nthat, if the tournament T has a top cycle of size at most k, then the Copeland set, the Slater set, the Markov set, the bipartisan set, the uncovered set, the Banks set, and the top cycle of a tournament T can be found using O(nk + n logn/log(1\u22121/k)) queries [Theorem 4.1 and 4.2]."}, {"heading": "1.3 Related Work", "text": "The work of Raman [BRS97] (rediscovered by Procaccia [Pro08]) is the closest\npredecessor of our work where he shows that the query complexity of Condorcet winner in tournaments is 2n \u2212 \u230alogn\u230b \u2212 2. There have been several other works in the literature which study the query complexity of various problems in tourna-\nments. For example, Noy and Naor use comparison-based sorting algorithms to find\nfeedback sets and Hamiltonian paths in tournaments [BNN90]. There have been\nworks in computational social choice theory on communication complexity of differ-\nent voting rules [CS02] and query complexity of preference elicitation in various do-\nmains [Con09, DM16a, DM16b, Dey16]. However, the querying model in the above\nworks is completely different from ours and consequently, neither the results nor the\ntechniques involved in these works are directly applicable to our work; a query in the\nworks above asks: \u201cDoes a voter v prefer an alternative x over another alternative y?\u201d"}, {"heading": "2 Preliminaries", "text": "For a positive integer \u2113, we denote the set {1,2, . . . , \u2113} by [\u2113]. For a finite set X and a positive integer \u2113, we denote the set of all subsets of X of size \u2113 by P\u2113(X ) and the set of all probability distributions on X by \u2206(X ).\nTournaments. A tournament T = (V,E) is a directed graph on a set V of n vertices such that, for any two vertices u,v \u2208 V, either (u,v) \u2208 E or (v,u) \u2208 E but not both. If not mentioned otherwise, we denote the number of voters by n. We call any subgraph\nof a tournament a partial tournament. We call a tournament balanced if the in-degree and out-degree of every vertex are the same. A tournament T defines a relation \u227bT on the set of vertices V: u \u227bT v if (u,v) \u2208 T . Alternatively, any irreflexive, antisymmetric, and total relation \u227b on a set V defines a tournament T = (V,E) where (u,v) \u2208 E if u \u227b v. When there is no possibility of confusion, we drop T from the subscript of \u227b. We call the relation \u227bT associated with a tournament T the dominance relation of T . We say a vertex u dominates or defeats another vertex v if u \u227bT v. Let us define the dominion D(v) of a vertex v as D(v) = {u \u2208 V \u2236 v \u227b u} and D(v) is called the dominators of v. Given a tournament T , let A(T ) be its adjacency matrix. We call the matrix G(T ) = A(T ) \u2212A(T )t the skew-adjacency matrix of T , where A(T )t is the transpose of A(T ). A vertex v is called the Condorcet winner of a tournament if the out-degree of v is n \u2212 1; alternatively, a vertex v is the Condorcet winner if v \u227b u for every u \u2208 V \u2216 {v}. Given a set V, we denote the set of all tournaments over V by T(V). A tournament solution f \u2236 \u222a\u2223V\u2223>0T(V) \u2192 2V \u2216 {\u2205} is a function that takes a tournament as input and selects a nonempty set of vertices as output. Examples of commonly used tournament solutions are as follows [MBC+16, Chapter 3].\nCondorcet non-loser: The Condorcet non-loser set of a tournament is the set of all\nvertices which has at least one outgoing edge.\nCopeland set: The Copeland set of a tournament is the set of vertices with maxi-\nmum out-degree.\nSlater set: Given a tournament T = (V,\u227b), let us denote the maximal element of V according to a strict linear order > on V by max(>). The Slater score of a strict linear order > over V with respect to tournament T = (V, \u227b) is \u2223 > \u2229 \u227b \u2223 where > \u2229 \u227b= {(x,y) \u2208 V \u00d7V \u2236 x > y,x \u227b y}. A strict linear order is a Slater order if it has maximum Slater score. Then the Slater set is defined as SL(T ) = {max(>) : > is a Slater order for T }.\nMarkov set: Given a tournament T = (V,E), we define a Markov chain M(T ) as follows. The states of the Markov chain M(T ) are the vertices of T and the transition probabilities are determined by the dominance relation: in every step, stay in the current state v with probability \u2223D(v)\u2223/\u2223T \u2223\u22121, and move to state u with probability 1/\u2223T \u2223\u22121 for all u \u2208 D(v). The Markov set is the the set of vertices that have maximum probability in the unique stationary distribution of M(T ). Formally, the transition matrix of the Markov chain is defined as.\nQ = 1\n\u2223T \u2223 \u2212 1 (A(T )t + diag(CO))\nwhere diag(CO) is the diagonal matrix of the Copeland scores. Markov set MA(T ) of a tournament T is then given by MA(T ) = argmaxa\u2208V{p(a) \u2236 p \u2208 \u2206(V),Qp = p}.\nBipartisan set: Bipartisan set generalizes the notion of Condorcet winner to lotteries over the vertices of the tournament. Interestingly, for every tournament T = (V,E), there exists a unique maximal lottery [MBC+16]. That is, there exists a probability distribution p \u2208 \u2206(V) such that, for the skew-adjacency matrix G(T ) = (gab)a,b\u2208V of T , \u2211a,b\u2208V p(a)q(b)gab \u2a7e 0 for all q \u2208 \u2206(V) which is, by convexity, equivalent to the following condition.\n\u2211 a\u2208V p(a)gab \u2a7e 0 for all b \u2208 V (1)\nLet pT denote the unique maximal lottery of T . Then the bipartisan set BP(T ) of T is defined as the support of pT . That is,\nBP(T ) = {a \u2208 V \u2236 pT (a) > 0}\nUncovered set: Given a tournament T =(V,\u227b), we say a vertex v \u2208 V covers another vertex u \u2208 V if D(u) \u2286D(v) and is denoted by vCu. We observe that vCu implies v \u227b u and is equivalent to D\u0304(v) \u2286 D\u0304(u). The uncovered set UC(T ) of a tournament T is given by the set of maximal elements of the covering relation C. That is,\nUC(T ) = {v \u2208 V \u2236 uCv for no u \u2208 V}\nBanks set: A sub-tournament of a tournament T = (V,E) is an induced subgraph of T . The Banks set BA(T ) is the set of maximal elements of all the maximal transitive sub-tournaments of T .\nTop cycle: A non-empty subset of vertices B \u2286 V is called dominant in a tournament T = (V,\u227b) if x \u227b y for every x \u2208 B and y \u2208 V \u2216 B. Dominant sets are linearly ordered via set inclusion and the top cycle returns the unique smallest dominant set.\nA tournament solution is called neutral if the output does not depend on the names\nof the input set of vertices. All the tournament solutions discussed above are neutral.\nEssential States in a Markov Chain. A state i in a finite Markov chain is called\nessential if for every state j that is reachable from i, the state i is also reachable from\nj. A state is called inessential if it is not essential. A well known fact from probability theory is that, \u03c0(i) = 0 for every inessential state i, where \u03c0 is a stationary distribution of the Markov chain. Hence, every vertex whose corresponding state in the Markov\nchain is inessential, does not belong to the Markov set of that tournament. We refer the\nreader to [Bre\u030113] for a more detailed discussion on Markov chains. Query Model. Given a tournament T = (V,E) on n vertices, a query for a pair of vertices {x,y} \u2208 P2{V} reveals whether (x,y) \u2208 E or (y,x) \u2208 E . The query complexity of an algorithm is the maximum number of queries the algorithm makes in the worst\ncase. The query complexity of a tournament solution f is the minimum query complexity\nof any algorithm for computing f."}, {"heading": "3 Query Complexity Lower Bounds of Tournament So-", "text": "lutions\nWe begin with the following observation which gives us the query complexity of the\nCondorcet non-loser set of tournaments.\nObservation 3.1 The query complexity of the Condorcet non-loser set in tournaments is\nequal to the query complexity of the Condorcet winner in tournaments. Hence, the query complexity of the Condorcet non-loser set in tournaments is 2n \u2212 \u230alogn\u230b \u2212 2.\nProof: Given a tournament T = (V,E), let us define another tournament T = {V,E}, where E = {(x,y) \u2236 (y,x) \u2208 E}. Now the result follows from the observation that a vertex v is a Condorcet non-loser in T if and only if v is not the Condorcet winner in T . Now the 2n \u2212 \u230alogn\u230b \u2212 2 query complexity of the Condorcet non-loser set follows from the 2n\u2212\u230alogn\u230b\u22122 query complexity of the Condorcet winner in tournaments [BRS97]. \u25fb\nWe next consider the query complexity of the Slater set of tournaments. The fol-\nlowing result provides a necessary condition for a vertex to belong to the Slater set of\na tournament. We will use it to prove query complexity lower bound of the Slater set.\nLemma 3.1 Suppose the out-degree of a vertex v \u2208 V in a tournament T = (V,E) on n vertices is strictly less than (n\u22121)/2. Then v does not belong to the Slater set of T .\nProof: Let \u2212\u2212\u2212\u2212\u2192 V \u2216 {v} be any arbitrary order on the vertices in V \u2216 {v}. Now the result follows from the observation that \u2223(v \u227b \u2212\u2212\u2212\u2212\u2192 V \u2216 {v}) \u2229 E\u2223 < \u2223( \u2212\u2212\u2212\u2212\u2192 V \u2216 {v} \u227b v) \u2229 E\u2223. \u25fb Let us consider the tournament Treg = (V,E) on n vertices V = {ai \u2236 i \u2208 [n]}. We assume n to be an odd integer. In Treg, vertex ai defeats ai+j (mod n) for every i \u2208 [n] and j \u2208 [(n\u22121)/2]. We will use the tournament Treg crucially in our proofs of the query complexity lower bounds of the Copeland set, the Slater set, and the Markov set. The\nfollowing result is immediate from the definition of neutral tournament solutions.\nLemma 3.2 Given the tournament Treg as input, every neutral tournament solution outputs the set of all vertices in Treg.\nSuppose there exists an edge from a vertex u to another vertex v in Treg. Let T u,vreg be the tournament which is the same as Treg except the edge from u to v is reversed, that is, T u,vreg = Treg \u222a {(v,u)} \u2216 {(u,v)}. The following lemma will be used crucially in our proofs of the query complexity lower bounds of the Copeland set, the Slater set,\nand the Markov set.\nLemma 3.3 The Copeland set, the Slater set, and the Markov set of T u,vreg do not contain u.\nProof: Copeland set: For the Copeland set, the result follows from the observation that u is no longer a vertex with highest out-degree in T u,vreg .\nSlater set: For the Slater set, the result follows immediately from Lemma 3.1 since the out-degree of u is strictly smaller than (n\u22121)/2 in T u,vreg . Markov set: If possible, let us assume that the stationary distribution of the Markov chain M(T u,vreg ) associated with the tournament T u,vreg be \u03c0 such that \u03c0(a) = p for every a \u2208 [n] \u2216 {u,v}. Then we have the following.\np + \u03c0(u) 2\nn + 1 = \u03c0(v) (2)\np n \u2212 3 n \u2212 1 = \u03c0(u) (3)\n\u03c0(u) + (n \u2212 2)p + \u03c0(v) = 1 (4)\nWe first observe that, since the Markov chain M(T u,vreg ) is ergodic, it has a unique stationary distribution. Now, since there exists an unique solution to the equations above, the stationary distribution \u03c0 of M(T u,vreg ) is indeed of the form we assumed (that is, \u03c0(a) = p for every a \u2208 [n] \u2216 {u,v}). We observe that equation 3 shows that \u03c0(u) < p and equation 2 shows that p < \u03c0(v). Hence, the Markov set of T u,vreg is {v}. \u25fb\nWe now prove that any algorithm for finding the Copeland set, the Slater set, and\nthe Markov set must query every edge in the input tournament in the worst case.\nTheorem 3.1 Any algorithm for finding the Copeland set, the Slater set, and the Markov set of tournaments has query complexity (n 2 ).\nProof: Let us consider the tournament Treg. We observe that, due to Lemma 3.2, the Copeland set, the Slater set, and the Markov set of Treg is the set of all vertices. Let us now consider the oracle which answers the queries according to Treg. We claim that any algorithm for finding the Copeland set, the Slater set, and the Markov set of tournaments must query all the (n 2 ) edges of Treg. Suppose not, then there exists an edge from u to v in Treg for some vertices u and v that the algorithm does not query. Let T\u0302 be the partial tournament of Treg containing the edges that the algorithm queries. If the output of the algorithm does not contain u, then the oracle completes T\u0302 to Treg and thus the algorithm does not output correctly since the output should contain all the vertices. On the other hand, if the output of the algorithm contains u then the oracle completes T\u0302 by directing the edge between u and v from v to u and directing the rest of the edges as in Treg. Again the algorithm outputs wrongly due to Lemma 3.3. \u25fb\nWe now present our query complexity lower bound for the bipartisan set of tourna-\nments. Before embarking on the query complexity lower bound of the bipartisan set,\nlet us prove a few structural results for the bipartisan set which we will use crucially\nlater. The following result for the bipartisan set is well known [GLM93, FR95].\nLemma 3.4 In a tournament T = (V,\u227b), suppose a vertex u covers another vertex v, that is, u \u227b w whenever v \u227b w for every w \u2208 V. Then v does not belong to the bipartisan set of T .\nThe following result shows that, in the tournaments where every vertex has the\nsame number of incoming edges as the number of outgoing edges, the bipartisan set is\nthe set of all vertices.\nLemma 3.5 Let T be a tournament on n vertices where the in-degree and out-degree of every vertex is (n\u22121)/2. Then the only maximal lottery of T is the uniform distribution over the set of all vertices of T and thus the bipartisan set of T is the set of all vertices.\nProof: We observe that the uniform distribution over all the vertices satisfy Equation (1) for the tournament T , since the average of the entries in every column of the skew-symmetric matrix G of the tournament T is 0. Now the result follows from the fact that the maximal lottery in every tournament is unique [MBC+16]. \u25fb\nIn the next lemma, we formalize the intuition that, if a (A,V\u2216A) cut in a tournament has a majority of its edges from V \u2216 A to A and A is balanced, then the bipartisan set of the tournament must include at least one vertex from V \u2216A.\nLemma 3.6 Let T = (V1 \u222aV2,E) be a tournament such that there exist at most \u2223V1\u2223\u22c5\u2223V2\u2223/2\u22121 edges from V1 to V2 and the in-degrees and out-degrees of all the vertices in the subtournament T [V1] of T induced on V1 are exactly \u2223V1\u2223\u22121/2. Then the bipartisan set of T must include at least one vertex from V2.\nProof: Let p\u22c6 \u2208 \u2206(V1 \u222aV2) be the maximal lottery of T and V = V1 \u222aV2. If possible, let us assume that p\u22c6(v) = 0 for every v \u2208 V2. Let q \u2208 \u2206(V2) be the uniform distribution on V2 andG = (gab)a,b\u2208V the skew-adjacency matrix of T . We first claim that p\u22c6 cannot be the uniform distribution on V1. Indeed, otherwise we have \u2211a,b\u2208V p\u22c6(a)q(b)gab < 0 (since a strict majority of the edges between V1 and V2 are from V2 to V1) which contradicts the fact that p\u22c6 is the maximal lottery of T . We now consider the sub-tournament T [V1] of T induced on V1. Due to Lemma 3.5, the only maximal lottery of T [V1] is the uniform distribution on V1. Hence, since p\u22c6 is not the uniform distribution over V1, there exists a distribution q\u2032 \u2208 \u2206(V1) such that \u2211a,b\u2208V1 p\n\u22c6(a)q\u2032(b)gab < 0. However, this contradicts our assumption that p\u22c6 is the maximal lottery of T . Hence, the bipartisan set of T must include at least one vertex from V2. \u25fb\nWe now have all the ingredients to present our query complexity lower bound result\nfor the bipartisan set.\nTheorem 3.2 The query complexity of the bipartisan set of a tournament is \u2126(n2).\nProof: Let n be an odd integer. We consider a partial tournament T = (A \u222a B,E) where A = {ai \u2236 i \u2208 [n]},B = {bi \u2236 i \u2208 [n]}, and E = {(ai,ai+j (mod n)), (bi,bi+j (mod n)) \u2236 i \u2208 [n], 1 \u2a7d j \u2a7d (n\u22121)/2}. The oracle answers the queries of the algorithm as follows. If a query comes for an edge between vertices ai and aj or bi and bj for any i, j \u2208 [n], then the oracle answers according to T . If a query comes for an edge between ai and bj for any i, j \u2208 [n], then the oracle says that the edge is oriented from ai to bj. We now claim that the algorithm must query at least n\n2/2 edges between A and B. Suppose not, then, if the output of the algorithm contains any vertex from B, then the oracle orients every\nedge between A and B, from A to B, thereby ensuring that the output of the algorithm is wrong due to Lemma 3.4. On the other hand, if the output of the algorithm does not contain any vertex from B, then the oracle orients all the edges between A and B that are not queried, from B to A, thereby ensuring that the output of the algorithm is again wrong due to Lemma 3.6. Hence, the algorithm must query at least n\n2/2 edges between A and B and thus the query complexity of the bipartisan set is \u2126(n2). \u25fb\nWe now show that the query complexity of the uncovered set is \u2126(n2).\nTheorem 3.3 The query complexity of the uncovered set of a tournament is \u2126(n2).\nProof: Consider a partial tournament T = (A \u222a B \u222a {x},E) where A = {ai \u2236 i \u2208 [n]},B = {bi \u2236 i \u2208 [n]} and E = {(ai,x), (x,bi) \u2236 i \u2208 [n]}. Let us consider the following oracle. Let us define the partial tournament T \u2032 to be the graph on A \u222a B \u222a {x} consisting of all the answers of the oracle till now. Hence, to begin with, T \u2032 does not have any edge. The oracle answers the queries for any edge in T according to T . For any query of the form {ai,aj} or {bi,bj}, the oracle answers arbitrarily but consistently. For a query {ai,bj} for some i, j \u2208 [n], if ai defeats bk for every k \u2208 [n] \u2216 {j} in T \u2032, then the oracle answers that bj defeats ai; otherwise oracle answers that ai defeats bj. We claim that any algorithm for finding the uncovered set of tournaments must query for the pair {ai,bj} for every i, j \u2208 [n]. Suppose not, then there exists a pair {ai,bj} which the algorithm does not query. Notice that, by the design of the oracle, ai defeats bk in T \u2032 for every k \u2208 [n] such that {ai,bk} has been queried by the algorithm. For every pair {ak,b\u2113} with k, \u2113 \u2208 [n],k \u2260 i and {ak,b\u2113} has not been queried, the oracle orients the edge from b\u2113 to ak. The oracle also orients all the edges from ai to bk for every k \u2208 [n] \u2216 {j}. Now, if the output of the algorithm contains x, then the oracle orients the edge {ai,bj} from ai to bj. Notice that, in this case, x is covered by ai and thus x should not be in the uncovered set and hence the output of the algorithm is wrong. On the other hand, if the output of the algorithm does not contain x, then the oracle orients the edge {ai,bj} from bj to ai. In this case, x is not covered by any other vertex and thus x belongs to the uncovered set. Hence, the algorithm outputs incorrectly in both the cases thereby proving the result. \u25fb\nNext we consider the Banks set and show its query complexity to be \u2126(n2).\nTheorem 3.4 The query complexity of the Banks set of a tournament is \u2126(n2).\nProof: Consider a partial tournament T = (A \u222a B \u222a {x},E), where A = {ai \u2236 i \u2208 [n]},B = {bi \u2236 i \u2208 [n]}, and E = {(ai,x), (x,bi), (bi,bj) \u2236 i, j \u2208 [n], i > j}. Let us consider the following oracle. Let us define the partial tournament T \u2032 to be the graph on A\u222aB\u222a{x} consisting of all the answers of the oracle till now. Hence, to begin with, T \u2032 does not have any edge. The oracle answers the queries for any edge in T according to T . For any query of the form {ai,aj} or {bi,bj}, the oracle answers arbitrarily but consistently. For a query {ai,bj} for some i, j \u2208 [n], if ai defeats bk for every k \u2208 [n] \u2216 {j} in T \u2032, then the oracle answers that bj defeats ai; otherwise oracle answers that ai defeats bj. We claim that the algorithm must query for the pair {ai,bj} for every i, j \u2208 [n]. Suppose not, then there exists a pair {ai,bj} which the algorithm does\nnot query. Notice that, by the design of the oracle, ai defeats bk in T \u2032 for every k \u2208 [n] such that {ai,bk} has been queried by the algorithm. For every pair {ak,b\u2113} with k, \u2113 \u2208 [n],k \u2260 i and {ak,b\u2113} has not been queried, the oracle orients the edge from ak to b\u2113. The oracle also orients all the edges not in T \u2032 between ai and bk from ai to bk for every k \u2208 [n] \u2216 {j}. Now if the output of the algorithm contains x, then the oracle orients the edge between ai and bj from ai to bj. We claim that x can not be the maximum vertex of any maximal transitive sub-tournament T \u2032\u2032 of T . To see this, we first observe that the sub-tournament T \u2032\u2032 must have all the vertices in B and no vertex from A. Indeed, otherwise either x is not the maximum vertex of T \u2032\u2032 (if any vertex from A is there in T \u2032\u2032) or T \u2032\u2032 is not a maximal transitive sub-tournament (if any vertex from B is not there in T \u2032\u2032). However, such a sub-tournament is not a maximal transitive sub-tournament since ai can be added to T \u2032\u2032 without violating transitivity. Hence x does not belong to the Banks set of the resulting tournament and thus the algorithm\u2019s\noutput is wrong. On the other hand, suppose the output of the algorithm does not\ncontain x. Then the oracle orients the edge between ai and bj from bj to ai. In this case, the sub-tournament of T induced on B\u222a{x} is a maximal sub-tournament where x is the maximum vertex and thus x belongs to the Banks set of the resulting tournament. Hence, the algorithm outputs incorrectly in both the cases thereby proving the result. \u25fb\nWe now show that the query complexity of the top cycle of tournaments is \u2126(n2).\nTheorem 3.5 The query complexity of the top cycle of a tournament is \u2126(n2).\nProof: We consider a partial tournament T = (A \u222a B,E) where A = {ai \u2236 i \u2208 [n]},B = {bi \u2236 i \u2208 [n]}, and E = {(ai,ai+1 (mod n)), (bi,bi+1 (mod n)) \u2236 i \u2208 [n]}. The oracle answers the queries of the algorithm as follows. If a query comes for the edge between vertices ai and aj or bi and bj for any i, j \u2208 [n], then the oracle answers according to T if the edge is present in T , and arbitrarily but consistently otherwise. If a query comes for an edge between ai and bj for any i, j \u2208 [n], then the oracle says that the edge is oriented from ai to bj. Now we claim that the algorithm must query all the n2 edges between A and B. Suppose not, then there exist ai and bj for some i, j \u2208 [n] such that the algorithm has not queried for the edge between ai and bj. Now if the output of the algorithm does not contain any vertex from B, then the oracle orients the edge between ai and bj from bj to ai. Notice that, in this case the top cycle of the resulting tournament T contains at least one vertex bj \u2208 B and thus the algorithm does not output correctly in this case. On the other hand, if the output of the algorithm contains any vertex from B, then the oracle orients all the edges between A and B from A to B. In this case, the top cycle of the resulting tournament is A and thus the algorithm again fails to output correctly. Hence, the algorithmmust make\u2126(n2) queries. \u25fb"}, {"heading": "4 Results for Tournaments with Small Top Cycle", "text": "It turns out that, if we a priori know that the size of the top cycle in the input tourna-\nment is at most k, then there is an algorithm for finding the top cycle with much less\nnumber of queries.\nTheorem 4.1 Suppose we know that the top cycle of the input tournament T is of size at most k. Then there exists an algorithm for finding the top cycle of T with query complexity O(nk + n logn/log(1\u22121/k)).\nProof: We first partition the set of vertices V into \u2308n/2k\u2309 subsets Vi, i \u2208 \u2308n/2k\u2309, each of size at most 2k. For each partition, we query all pair of vertices. We notice that, in each set Vi of the partition, there must exist at least one vertex vi with in-degree at least k (for every k larger than some small constant) and consequently vi does not belong to the top cycle of T for every i \u2208 \u2308n/2k\u2309. We delete the vertex vi from Vi for every i \u2208 \u2308n/2k\u2309, thereby deleting \u2308n/2k\u2309 vertices in total. The now iterate the same process on the remaining set of vertices. The first iteration takes O((n/k)k2) = O(nk) queries. From the next iteration onwards, we can manage with only n queries per iteration by\npartitioning the vertices cleverly: since we have deleted exactly one vertex from each\nset of the partition we can add one vertex to each set of the partition by \u201cbreaking\u201d\nsome of the sets from the partition. We now observe that, in every set, we now need to compare the new vertex with the rest of the vertices thereby requiring at most n \u2212 k queries in total. Since, each iteration decreases the size of the tournament by a factor of \u2126(1 \u2212 1/k), after O(logn/log(1\u22121/k)) iterations, we have O(k) vertices in the tournament where we can find the top cycle using O(k2) = O(nk) queries. Hence, the query complexity of our algorithm is O(nk + n logn/log(1\u22121/k)). The correctness of the algorithm follows from the fact that whenever we remove a vertex v from the tournament, v does not belong to the top cycle of T . \u25fb\nThe following result gives relationship between the top cycle of a tournament and\nother tournament solutions like the Copeland set, the Slater set, the Markov set, the\nbipartisan set, the uncovered set, and the Banks set.\nLemma 4.1 Let T be a tournament whose top cycle is C. Then the Copeland set, the Slater set, the Markov set, the bipartisan set, the uncovered set, and the Banks set of T are the same as the corresponding solutions for the tournament T (C).\nProof: Copeland set, bipartisan set, uncovered set: Follows from the observation that every vertex in C covers every vertex in V \u2216 C and Lemma 3.4. Markov set: All the states corresponding to the vertices in V \u2216 C are inessential and thus do not belong to the Markov set of T . Slater set: We observe that, in the Slater order \u227b of the tournament T , every vertex in C must be preferred over every vertex in V \u2216C. If not, then let there be a vertex a \u2208 C and b \u2208 V \u2216C such that a immediately follows b in \u227b. Then by swapping the positions of the vertices a and b in \u227b, we can strictly decrease the disagreement of \u227b with T thereby contradicting that \u227b is a Slater order of T .\nBanks set: Follows from the fact that every maximal element of every maximal sub-tournament of T belongs to C. \u25fb\nLemma 4.1 and Theorem 4.1 immediately give the the following query complexity\nupper bound for the Copeland set, the Slater set, the Markov set, the bipartisan set, the\nuncovered set, and the Banks set when we a priori know that the size of the top cycle\nof the input tournament is at most k.\nTheorem 4.2 Suppose we know that the top cycle of the input tournament T is of size at most k. Then there exists an algorithm for finding the Copeland set, the Slater set, the Markov set, the bipartisan set, the uncovered set, and the Banks set of T with query complexity O(nk + n logn/log(1\u22121/k)).\nProof: We first find the top cycle C of T using Theorem 4.1. This step requires O(nk + n logn/log(1\u22121/k)) queries. Next, we query for all the pair of vertices in C and output the corresponding solution of T (C). The correctness of the algorithm follows immediately from Lemma 4.1. Since the second step requires O(k2) = O(nk) queries, the query complexity of our algorithm is O(nk + n logn/log(1\u22121/k)). \u25fb"}, {"heading": "5 Conclusion and Future Directions", "text": "We have shown that, for finding many common tournament solutions, one has to query,\nin the worst case, almost entire set of edges in the tournament. On the positive side,\nwe have exhibited an important structural property, in terms of the top cycle of the\ntournament being small, which substantially reduces the query complexity of common\ntournament solutions. An immediate future direction of research is to study query\ncomplexity for other tournament solutions like the minimal covering set, the minimal\nextending set, the minimal TC-retentive set, the tournament equilibrium set, etc. Find-\ning other structural properties of the tournament that can be leveraged to reduce the\nquery complexity of common tournament solutions is another important direction of\nfuture research."}], "references": [{"title": "Social choice and multicriterion decision-making", "author": ["Kenneth J Arrow", "Herv\u00e9 Raynaud"], "venue": "MIT Press Books,", "citeRegEx": "Arrow and Raynaud,? \\Q1986\\E", "shortCiteRegEx": "Arrow and Raynaud", "year": 1986}, {"title": "Minimal retentive sets in tournaments", "author": ["Felix Brandt", "Markus Brill", "Felix Fischer", "Paul Harrenstein"], "venue": "Soc. Choice Welf.,", "citeRegEx": "Brandt et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Brandt et al\\.", "year": 2014}, {"title": "Characterization of dominance relations in finite coalitional games", "author": ["Felix Brandt", "Paul Harrenstein"], "venue": "Theor. Decis.,", "citeRegEx": "Brandt and Harrenstein.,? \\Q2010\\E", "shortCiteRegEx": "Brandt and Harrenstein.", "year": 2010}, {"title": "Evaluation and decision models with multiple criteria: Stepping stones for the analyst, volume 86", "author": ["Denis Bouyssou", "Thierry Marchant", "Marc Pirlot", "Alexis Tsouki\u00e0s", "Philippe Vincke"], "venue": "Springer Science & Business Media,", "citeRegEx": "Bouyssou et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Bouyssou et al\\.", "year": 2006}, {"title": "Sorting, minimal feedback sets, and hamilton paths in tournaments", "author": ["Amotz Bar-Noy", "Joseph Naor"], "venue": "SIAM J. Discrete Math.,", "citeRegEx": "Bar.Noy and Naor.,? \\Q1990\\E", "shortCiteRegEx": "Bar.Noy and Naor.", "year": 1990}, {"title": "Markov chains: Gibbs fields, Monte Carlo simulation, and queues, volume 31", "author": ["Pierre Br\u00e9maud"], "venue": "Springer Science & Business Media,", "citeRegEx": "Br\u00e9maud.,? \\Q2013\\E", "shortCiteRegEx": "Br\u00e9maud.", "year": 2013}, {"title": "Finding scores in tournaments", "author": ["R. Balasubramanian", "Venkatesh Raman", "G. Srinivasaragavan"], "venue": "J. Algorithms,", "citeRegEx": "Balasubramanian et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Balasubramanian et al\\.", "year": 1997}, {"title": "A survey on the linear ordering problem for weighted or unweighted tournaments", "author": ["Ir\u00e8ne Charon", "Olivier Hudry"], "venue": null, "citeRegEx": "Charon and Hudry.,? \\Q2007\\E", "shortCiteRegEx": "Charon and Hudry.", "year": 2007}, {"title": "Evasiveness of subgraph containment and related properties", "author": ["Amit Chakrabarti", "Subhash Khot", "Yaoyun Shi"], "venue": "SIAM J. Comput.,", "citeRegEx": "Chakrabarti et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Chakrabarti et al\\.", "year": 2001}, {"title": "Eliciting single-peaked preferences using comparison queries", "author": ["Vincent Conitzer"], "venue": "J. Artif. Intell. Res.,", "citeRegEx": "Conitzer.,? \\Q2009\\E", "shortCiteRegEx": "Conitzer.", "year": 2009}, {"title": "Vote elicitation: Complexity and strategy-proofness", "author": ["Vincent Conitzer", "Tuomas Sandholm"], "venue": "In Eighteenth National Conference on Artificial Intelligence (AAAI),", "citeRegEx": "Conitzer and Sandholm.,? \\Q2002\\E", "shortCiteRegEx": "Conitzer and Sandholm.", "year": 2002}, {"title": "Recognizing and eliciting weakly single crossing profiles on", "author": ["Palash Dey"], "venue": "trees. CoRR,", "citeRegEx": "Dey.,? \\Q2016\\E", "shortCiteRegEx": "Dey.", "year": 2016}, {"title": "Dutta\u2019s minimal covering set and shapley\u2019s saddles", "author": ["John Duggan", "Michel Le Breton"], "venue": "J. Econ. Theory,", "citeRegEx": "Duggan and Breton.,? \\Q1996\\E", "shortCiteRegEx": "Duggan and Breton.", "year": 1996}, {"title": "Elicitation for preferences single peaked on trees", "author": ["Palash Dey", "Neeldhara Misra"], "venue": "In Proc. Twenty-Fifth International Joint Conference on Artificial Intelligence,", "citeRegEx": "Dey and Misra.,? \\Q2016\\E", "shortCiteRegEx": "Dey and Misra.", "year": 2016}, {"title": "Preference elicitation for single crossing domain", "author": ["Palash Dey", "Neeldhara Misra"], "venue": "In Proc. Twenty-Fifth International Joint Conference on Artificial Intelligence,", "citeRegEx": "Dey and Misra.,? \\Q2016\\E", "shortCiteRegEx": "Dey and Misra.", "year": 2016}, {"title": "On the acceptability of arguments and its fundamental role in nonmonotonic reasoning, logic programming and n-person games", "author": ["Phan Minh Dung"], "venue": "Artif Intel,", "citeRegEx": "Dung.,? \\Q1995\\E", "shortCiteRegEx": "Dung.", "year": 1995}, {"title": "Computational properties of argument systems satisfying graph-theoretic constraints", "author": ["Paul E Dunne"], "venue": "Artif Intel,", "citeRegEx": "Dunne.,? \\Q2007\\E", "shortCiteRegEx": "Dunne.", "year": 2007}, {"title": "Tournament games and positive tournaments", "author": ["David C Fisher", "Jennifer Ryan"], "venue": "J. Graph Theory,", "citeRegEx": "Fisher and Ryan.,? \\Q1995\\E", "shortCiteRegEx": "Fisher and Ryan.", "year": 1995}, {"title": "Elusiveness of finding degrees", "author": ["Dishant Goyal", "Varunkumar Jayapaul", "Venkatesh Raman"], "venue": "In to appear Proc. Third International Conference on Algorithms and Discrete Applied Mathematics (CALDAM),", "citeRegEx": "Goyal et al\\.,? \\Q2017\\E", "shortCiteRegEx": "Goyal et al\\.", "year": 2017}, {"title": "The bipartisan set of a tournament", "author": ["G. Laffond", "Laslier Jean-Franois", "M. Le Breton"], "venue": "game. GEB,", "citeRegEx": "Laffond et al\\.,? \\Q1993\\E", "shortCiteRegEx": "Laffond et al\\.", "year": 1993}, {"title": "Lower bounds on the complexity of graph properties", "author": ["Valerie King"], "venue": "In Proc. twentieth annual ACM symposium on Theory of computing,", "citeRegEx": "King.,? \\Q1988\\E", "shortCiteRegEx": "King.", "year": 1988}, {"title": "A topological approach to evasiveness", "author": ["Jeff Kahn", "Michael Saks", "Dean Sturtevant"], "venue": null, "citeRegEx": "Kahn et al\\.,? \\Q1984\\E", "shortCiteRegEx": "Kahn et al\\.", "year": 1984}, {"title": "An asymptotic bound for the complexity of monotone graph properties", "author": ["Torsten Korneffel", "Eberhard Triesch"], "venue": null, "citeRegEx": "Korneffel and Triesch.,? \\Q2010\\E", "shortCiteRegEx": "Korneffel and Triesch.", "year": 2010}, {"title": "Evasiveness through a circuit lens", "author": ["Raghav Kulkarni"], "venue": "In Proc. 4th Conference on Innovations in Theoretical Computer Science,", "citeRegEx": "Kulkarni.,? \\Q2013\\E", "shortCiteRegEx": "Kulkarni.", "year": 2013}, {"title": "Handbook of Computational Social Choice", "author": ["Herv\u00e9 Moulin", "Felix Brandt", "Vincent Conitzer", "Ulle Endriss", "J\u00e9r\u00f4me Lang", "Ariel D Procaccia"], "venue": null, "citeRegEx": "Moulin et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Moulin et al\\.", "year": 2016}, {"title": "Social choice theory and recommender systems: Analysis of the axiomatic foundations of collaborative filtering", "author": ["David M. Pennock", "Eric Horvitz", "C. Lee Giles"], "venue": "In Proc. Seventeenth AAAI, July 30 - August", "citeRegEx": "Pennock et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Pennock et al\\.", "year": 2000}, {"title": "A note on the query complexity of the condorcet winner problem", "author": ["Ariel D Procaccia"], "venue": "Inform. Process. Lett.,", "citeRegEx": "Procaccia.,? \\Q2008\\E", "shortCiteRegEx": "Procaccia.", "year": 2008}, {"title": "On the time required to recognize properties of graphs: A problem", "author": ["Arnold L Rosenberg"], "venue": "ACM SIGACT News,", "citeRegEx": "Rosenberg.,? \\Q1973\\E", "shortCiteRegEx": "Rosenberg.", "year": 1973}, {"title": "On recognizing graph properties from adjacency matrices", "author": ["Ronald L Rivest", "Jean Vuillemin"], "venue": "Theor Comput Sci,", "citeRegEx": "Rivest and Vuillemin.,? \\Q1976\\E", "shortCiteRegEx": "Rivest and Vuillemin.", "year": 1976}], "referenceMentions": [], "year": 2017, "abstractText": "A directed graph where there is exactly one edge between every pair of vertices is called a tournament. Finding the \u201cbest\u201d set of vertices of a tournament is a well studied problem in social choice theory. A tournament solution takes a tournament as input and outputs a subset of vertices of the input tournament. However, in many applications, for example, choosing the best set of drugs from a given set of drugs, the edges of the tournament are given only implicitly and knowing the orientation of an edge is costly. In such scenarios, we would like to know the best set of vertices (according to some tournament solution) by \u201cquerying\u201d as few edges as possible. We, in this paper, precisely study this problem for commonly used tournament solutions: given an oracle access to the edges of a tournament T , find f(T ) by querying as few edges as possible, for a tournament solution f. We first show that the set of Condorcet non-losers in a tournament can be found by querying 2n \u2212 \u230alogn\u230b \u2212 2 edges only and this is tight in the sense that every algorithm for finding the set of Condorcet non-losers needs to query at least 2n \u2212 \u230alogn\u230b \u2212 2 edges in the worst case, where n is the number of vertices in the input tournament. We then move on to study other popular tournament solutions and show that any algorithm for finding the Copeland set, the Slater set, the Markov set, the bipartisan set, the uncovered set, the Banks set, and the top cycle must query \u03a9(n) edges in the worst case. On the positive side, we are able to circumvent our strong query complexity lower bound results by proving that, if the size of the top cycle of the input tournament is at most k, then we can find all the tournament solutions mentioned above by querying O(nk + n logn/log(1\u22121/k)) edges only.", "creator": "LaTeX with hyperref package"}}}