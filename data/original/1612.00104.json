{"id": "1612.00104", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Dec-2016", "title": "Robust Optimization for Tree-Structured Stochastic Network Design", "abstract": "Stochastic network design is a general framework for optimizing network connectivity. It has several applications in computational sustainability including spatial conservation planning, pre-disaster network preparation, and river network optimization. A common assumption in previous work has been made that network parameters (e.g., probability of species colonization) are precisely known, which is unrealistic in real- world settings. We therefore address the robust river network design problem where the goal is to optimize river connectivity for fish movement by removing barriers. We assume that fish passability probabilities are known only imprecisely, but are within some interval bounds. We then develop a planning approach that computes the policies with either high robust ratio or low regret. Empirically, our approach scales well to large river networks. We also provide insights into the solutions generated by our robust approach, which has significantly higher robust ratio than the baseline solution with mean parameter estimates.", "histories": [["v1", "Thu, 1 Dec 2016 01:21:21 GMT  (2751kb,D)", "http://arxiv.org/abs/1612.00104v1", "AAAI 2017"]], "COMMENTS": "AAAI 2017", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["xiaojian wu", "akshat kumar", "daniel sheldon", "shlomo zilberstein"], "accepted": true, "id": "1612.00104"}, "pdf": {"name": "1612.00104.pdf", "metadata": {"source": "META", "title": "Robust Optimization for Tree-Structured Stochastic Network Design", "authors": ["Xiaojian Wu", "Akshat Kumar", "Daniel Sheldon", "Shlomo Zilberstein"], "emails": ["xw458@cornell.edu", "akshatkumar@smu.edu.sg", "sheldon@cs.umass.edu", "shlomo@cs.umass.edu"], "sections": [{"heading": "1 Introduction", "text": "Many problems, such as influence maximization (Kempe, Kleinberg, and Tardos 2003), spatial and fish conservation planning (Sheldon et al. 2010; O\u2019Hanley and Tomberlin 2005), and predisaster preparation (Schichl and Sellmann 2015) can be formulated as a variant of the stochastic network design problem. A stochastic network design problem (SNDP) is defined by a directed graph where each edge is either present or absent with some probability. Management actions can be taken to change the probabilities of edge presence. The goal is to determine which actions to take, subject to a budget, to optimize some outcome of the stochastic network over a time period. Several approaches to solve SNDPs have been shown to scale up to large networks (Chen, Wang, and Wang 2010; Kumar, Wu, and Zilberstein 2012; Wu, Sheldon, and Zilberstein 2014b; 2016).\nAn important assumption made in SNDPs is that the network parameters (e.g., probabilities of edge presence) are estimated accurately, which is not feasible in real world ecological domains due to noisy observations, model drift, climate change, and the diversity of species. To handle parameter uncertainty, researchers have formulated robust network\nCopyright c\u00a9 2017, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\ndesign problems that include uncertain network probabilities (He and Kempe 2014; Chen et al. 2016). Recently, Kumar et al. (2016) also studied a robust conservation planning problem where the movement probabilities of species and sizes of habitats are not accurately specified. The robust network design problem we address differs from previous work, which does not allow management actions to modify interval parameters (e.g., edge probabilities). They only modify network structure, for example, by adding sources or nodes. In contrast, we allow management actions that can modify both interval bounds and network structure. As a result of the richer action space, it is unclear whether the sample average approximation (SAA) approach used in previous settings (Kumar et al. 2016) is applicable to our problem. To address these challenges, we develop a dynamic programming and mixed-integer programming based approach that can optimize connectivity without using SAA.\nWe study robust SNDPs for tree-structured river networks. The motivating application is the barrier removal problem (Neeson et al. 2015), where the goal is to decide which instream barriers to remove or repair to help fish move upstream and get access to their historical habitats. In this domain, the passage probability of a barrier can only be inaccurately estimated, and the new passage probability of a repaired barrier is even harder to estimate. Hence, we model the uncertainty in passage probability using well known interval bounds (Boutilier et al. 2003). We then develop a scalable algorithm to find the robust policy for barrier removal.\nThe robustness of a policy can be quantified by two correlated metrics: robust ratio (He and Kempe 2014; Chen et al. 2016) and regret (Boutilier et al. 2003; Kumar et al. 2016). Intuitively, assume that given a policy, nature chooses an adversarial policy that selects parameters within their interval bounds so as to either minimize the ratio between the values of the given policy and the adversarial policy (called robust ratio) or maximize the value difference between them (called regret). We develop a scalable algorithm to find a robust policy that maximizes the robust ratio by solving a bilevel optimization problem. We also show that, with minor modifications, our approach can be used to minimize regret.\nThe algorithm is based on a constraint generation procedure (Boutilier et al. 2003) that interleaves between two optimization steps. The decision optimization step finds a decision policy that maximizes the robust ratio when nature can\nar X\niv :1\n61 2.\n00 10\n4v 1\n[ cs\n.A I]\n1 D\nec 2\n01 6\nchoose policies and probabilities from a given limited number of choices. In the second ratio minimization step, the best adversarial policy and probabilities are found for the selected decision policy and are added to the set of choices for nature. We provide a mixed integer linear programming formulation for the decision optimization problem. The ratio minimization problem is much harder; we develop an algorithm called rounded dynamic programming (RDP) by combining a dynamic programming algorithm and a rounding method and show that it is a fully polynomial time approximation schema (FPTAS). In experiments, we show that RDP performs nearly optimally as it selects the adversarial policy and probabilities. Our algorithm can find policies that are more robust than policies found by baseline methods with respect to both robustness metrics. We also provide insights on the robustness metrics by visualizing the solutions."}, {"heading": "2 River Network Design", "text": "The problem is defined on a directed rooted tree T =(V,E) with a unique root denoted by s. Edges spread out from the root. A node v represents a contiguous region of the river network. It denotes a connected set of stream segments among which fish can move freely without passing any barriers. A node v is associated with a reward rv which is proportional to the total amount of habitat in that region (e.g., the total length of all segments). An edge e encodes a river barrier. Fig. 1 shows how to encode a river network as a directed rooted tree. Each barrier is associated with a passage probability\u2014the probability that a fish can pass the barrier. Before any repair action is taken, the probability is called the initial passage probability denoted by pe. A finite set of candidate actions denoted by Ae = {0, 1, ...,m} are available at e; an action i has cost ce(i), and, if taken, can raise passage probability to pe|i. The action 0 is the null action with pe|0 = pe and zero cost. A policy \u03c0 indicates which action is taken at each edge. The passage probability for a given policy is denoted by pe|\u03c0 . The accessibility of a node v denoted by ps v|\u03c0 is the probability that a fish passed all barriers on the path from s to v or ps v|\u03c0 = \u220f e: on path from s to t pe|\u03c0 . A reward rv can be collected only if a fish can reach v. The value of policy \u03c0, denoted by z(\u03c0), is the total reward of nodes weighted by their accessibilities: z(\u03c0) = \u2211 v\u2208V ps v|\u03c0rv . We also call z(\u03c0) the objective value to differentiate be-\ntween other values assigned to \u03c0. The barrier removal problem (Wu, Sheldon, and Zilberstein 2014a) is to find a policy maximizing z(\u03c0) subject to a budget constraint:\narg max \u03c0\nz(\u03c0) s.t. c(\u03c0) \u2264 B (1)\nwhere c(\u03c0) is the total cost of action taken for each edge in the network. Let X = {\u03c0 : c(\u03c0) \u2264 B} denote the set of feasible policies.\nRobust River Network Design The barrier removal problem is defined upon the assumption that all the passage probabilities are known. However, this is an unrealistic assumption. Often, in real world settings, it is not possible to accurately estimate such probabilities. Therefore, in our model only interval bounds are specified for different probabilities (Boutilier et al. 2003). Specifically, the passage probability for an edge e and action i \u2208 Ae can take any value within a given interval. That is, pe|i \u2208Pe|i = [pe|i, pe|i]. Let p denote a vector of all probabilities p=(pe|i)e\u2208E,i\u2208Ae . Let the space of all the allowed probabilities p be denoted as P =\u00d7e\u2208E,i\u2208AePe|i. Our goal is to find a policy \u03c0MRR that maximizes the robust ratio as defined by Kouvelis and Yu (2013) and Chen et al. (2016):\n\u03c0MRR \u2208 argmax \u03c0\u2208X min \u03c0\u2032\u2208X ,p\u2208P\nz(\u03c0;p) z(\u03c0\u2032;p) . (2)\nIn the outer maximization, the decision maker seeks a decision policy \u03c0 that is robust relative to adversarial choices made by nature. In the inner minimization, nature adversarially chooses a policy \u03c0\u2032 and feasible parameters p (a policyparameter pair) to minimize the ratio between the value of the decision policy \u03c0 and the adversarial policy \u03c0\u2032 on this set of parameters. The optimal value of the adversary is called the robust ratio of policy \u03c0 with respect to parameter space P . A policy (such as \u03c0MRR) that maximizes the robust ratio is called MRR-optimal, and the robust ratio of such a policy is called the MRR-value. Suppose \u03c0MRR is MRR-optimal with MRR-value \u03b1: then \u03c0MRR achieves at least \u03b1 fraction of the optimal reward for any parameter setting p \u2208 P . Fig. 2 illustrates the concept.\nAlgorithm 1 Robust Policy Optimization 1: Initialize C = {(\u03c0\u20320,p0)} and T = 1. 2: Decision Optimization: obtain \u03c0T by solving:\nU = max \u03c0 min (\u03c0\u2032,p)\u2208C\nz(\u03c0;p)/z(\u03c0\u2032;p) (3)\n3: Adversary Optimization: obtain the adversarial policyparameter pair (\u03c0\u2032T ,pT ) with respect to \u03c0T by solving:\nL = min (\u03c0\u2032,p)\u2208C\nz(\u03c0T ;p)/z(\u03c0 \u2032;p). (4)\n4: if U \u2212 L \u2264 threshold, return \u03c0T . Otherwise set C = C \u222a {(\u03c0\u2032T ,pT )}, increment T , and go to step 2."}, {"heading": "3 Our Method", "text": "We develop an iterative method (Algorithm 1) to solve Problem (2) using constraint generation (Boutilier et al. 2003). The high-level idea is to interleave two optimization problems. First, in the decision optimization problem, the decision maker finds the best decision policy \u03c0T relative to a limited adversary, who can only pick policy-parameter pairs from the finite set C. Then, the adversary selects a new policy-parameter pair to minimize the robust ratio with respect to the current decision policy \u03c0T . The decision player\u2019s value U is an upper bound on the MRR-value, because the adversary is limited to a finite subset of policy-parameter pairs. The adversary\u2019s optimal value L is a lower bound on the MRR-value. When U = L, we have an MRR-optimal decision policy. By allowing a small gap between the two bounds, we can find a nearly MRR-optimal policy. The set C is initialized with an arbitrary policy and probabilities."}, {"heading": "3.1 The Decision Optimization Problem", "text": "The goal of Problem (3) is to find a decision policy that maximizes the robust ratio with respect to the limited adversary. Fig. 3 presents a mixed-integer linear program (MILP) to solve this problem building on techniques from (Neeson et al. 2015). The variable M encodes the MRR-value. The inner minimization is replaced by inequality constraints (6) on M . The continuous variable zp encodes the objective value of the decision policy for probability setting p by (7). z(\u03c0\u2032;p) is a constant for each policy-parameter pair (\u03c0\u2032;p) \u2208 C. xie is a binary decision variable indicating whether action i \u2208 Ae is applied to e (= 1) or not (= 0). Constraint (8) enforces that one and only one action is taken at each edge, and (9) is the budget constraint.\nThe constraint set \u2126(p, x) defined in (12)\u2013(18) forces zp to be the objective value of \u03c0 under probability setting p. The variable \u03b1pv encodes the accessibility of node v. The root node has accessibility 1 by (13). \u03a0(v) denotes the parent of node v. Recall that each node has at most one parent. The variable \u03bbpv,i encodes the increment in the accessibility of node v if an action i \u2208 A\u03a0(v),v is applied to edge (\u03a0(v), v). In (14), the accessibility of v equals to the cumulative passability when no action is taken on edge (\u03a0(v), v) (the term \u03b1p\u03a0(v)p\u03a0(v)v) plus the total increment (the term\u2211 i\u2208A\u03a0(v)v \u03bb p v,i). Actually, at most one action can be taken,\nso only one \u03bbpv,i will be nonzero in the summation. The increment \u03bbpv,i is nonzero only if x i \u03a0(v)v is 1 by (15), and can be at most (p\u03a0(v)v|i\u2212p\u03a0(v)v) \u03b1p\u03a0(v) by (16), which is exactly the increment when action i is taken."}, {"heading": "3.2 The Adversary Optimization Problem", "text": "In the adversary optimization step, we wish to solve Problem (4) to find a policy-parameter pair (\u03c0\u2032\u2217,p\u2217) to minimize the robust ratio with respect to the current decision policy.\nHere is our main result. Theorem 1. There is an FPTAS for problem (4). It finds a policy-parameter pair with robust ratio at most (1+ )OPT in time O(n 4\n\u00b52 ) where \u00b5 = 2+ , n is the number of nodes in the tree, and OPT is the optimal value of (4). The FPTAS only approximately minimizes the objective, so the value L\u0302 it achieves not a lower bound in in Algorithm 1. However, the approximation guarantee implies thatL = L\u03021+ is a lower bound.\nIn the rest of this section, we prove Theorem 1 (proofs of some auxiliary results are left in appendix). We first propose a dynamic programming (DP) algorithm for problem (4), but this takes exponential time. We then develop a rounding strategy to reduce the running time to polynomial time and prove that this is an FPTAS. This basic idea is originally used for the barrier removal problem (1) (Wu, Sheldon, and Zilberstein 2014a). The adversary optimization problem here is more complex as the adversary tries to simultaneously minimize the value of decision policies and maximizes the value of adversarial policies. To guarantee the approximation rate, we round these two values distinctly.\nTo simplify the presentation, we assume without loss of generality the following: Assumption 1. Each node u \u2208 T has at most two children. Any problem instance can be converted to satisfy this assumption (Wu, Sheldon, and Zilberstein 2014a). Our first lemma restricts the space of parameters to be considered. Lemma 1. There exists an optimal policy-parameter pair (\u03c0\u2032\u2217,p\u2217) for Problem (4) with the following property. Suppose \u03c0\u2032\u2217 takes action i and the decision policy \u03c0 takes action j on edge e. If j 6= i, then p\u2217e|i = pe|i and p \u2217 e|j = pe|j . Otherwise, p\u2217e|i is either pe|i or pe|i.\nLemma 1 guarantees that the optimal adversary probability is either the upper or lower bound of the interval.\nPolicy-Parameter Actions and Optimization First, we redefine problem (4) in the following way so that it is amenable to dynamic programming.\nLet \u03c0 be fixed. The new optimization problem is the same as the river network design problem (1) except that its objective is the robust ratio z(\u03c0;p)z(\u03c0\u2032;p) and its actions encode both the actions and parameters of the adversary.\nWe define a finite set of policy-parameter actions Ape for each edge, which encode choices made by the adversary for edge e, including both the action taken and the probability setting for each available action. A policy-parameter action is a vector (iae ,pe|0, ...,pe||Ae|) taking value in A p e =\nAe \u00d7 \u220f j\u2208Ae{pe|j , pe|j}. i a e specifies the action that the adversary takes at e. pe|j specifies the passage probability on e for action j. It is easy to see from Lemma 1 that a given policy-parameter action need only consider p\ne|j and pe|j as possible values for pe|j without sacrificing optimality. In addition, Lemma 1 allows us to eliminate certain policy-parameter actions from consideration. For example, if Ae = {0, 1} and the decision policy \u03c0 takes action 1, Ase only needs to include 3 policy-parameter actions\n(0, pe|0, pe|1), (1, pe|0, pe|1), (1, pe|0, pe|1)\nMore generally, we have Corollary 1. For a fixed \u03c0, only |Ae|+ 1 actions in Ase are needed to compute (\u03c0\u2032\u2217,p\u2217).\nIn summary, the choice of a policy-parameter action for each edge to minimize the robust ratio gives the optimal policy-parameter pair (\u03c0\u2032\u2217,p\u2217) for problem (27).\nDynamic Programming We now present a dynamic programming algorithm to solve this new problem with policyparameter actions.\nIn a rooted directed tree, each node u corresponds to a subtree Tu. Define \u03c0u (or \u03c0\u2032u) to be the subset of \u03c0 (or \u03c0\u2032) that only includes actions for edges within Tu, and define pu to be the subset of p including probabilities only in Tu. Define zu(\u03c0u;pu) to be the objective value of policy \u03c0u on subtree Tu with probability vector pu pretending that u is the overall root, i.e., zu(\u03c0u;pu) = \u2211 t\u2208Tu pu t|\u03c0rt. Similarly, zu(\u03c0\u2032u;pu) is the value of \u03c0 \u2032 u for Tu. The following recurrences calculate both values for a given (\u03c0u;pu) zu(\u03c0\n\u2032 u;pu)=ru+puv|\u03c0\u2032uzv(\u03c0 \u2032 v;pv) + puw|\u03c0\u2032uzw(\u03c0 \u2032 w;pw) (19)\nzu(\u03c0u;pu)=ru+puv|\u03c0uzv(\u03c0v;pv) + puw|\u03c0uzw(\u03c0w;pw) (20)\nThe DP table of subtree Tu is indexed by pairs (zau, zdu), where zau represents an objective value of an adversary policy and zdu represents an objective value of the (fixed) decision policy on that subtree. The table includes only pairs that are achievable by some probability vector pu and adversary policy \u03c0\u2032u for subtree Tu, that is, zdu = zu(\u03c0u;pu) and zau = zu(\u03c0 \u2032 u,pu). Let \u03a6(z a u, z d u) = {(\u03c0\u2032u,pu) | zu(\u03c0\u2032u;pu) = zau, zu(\u03c0u;pu) = z d u} be the set of all policy-parameter pairs that map to a pair of objective values (zau, z d u). For the entry of the table indexed by (zau, z d u), we record only the minimum-cost adversary policy, and the minimum cost (denoted by mc) it achieves:\nmc(zau, z d u) = min (\u03c0\u2032,p)\u2208\u03a6(zau,zdu) c(\u03c0\u2032u) (21)\nThe DP tables for all subtrees can be calculated recursively from leaf nodes toward the root s in the following way. First, the table at a leaf node contains a single tuple with cost 0 because the subtree contains only the leaf node. Consider a node u with two children v and w. We can build the DP table at u if we have the DP tables of v and w by computing all achievable objective-value pairs at u and their minimum costs. From each pair (zav , z d v) at v and each pair (zaw, z d w) at w, policy-parameter pairs (\u03c0 \u2032 v,pv) and (\u03c0\u2032w,pw) can be extracted. For each policy-parameter action (iauv,puv) on edge (u, v) and each policy-parameter action (iauw,puw) on edge (u,w), a new pair (\u03c0 \u2032 u,pu) at u can be built, with which we can compute a pair (zau, z d u) using recurrences (19) and (20). The cost of this new pair is\nc(iauv) + c(i a uw) + mc(z a v , z d v) + mc(z a w, z d w) (22)\nThe same pair may be generated multiple times, but only the minimum cost is recorded.\nOnce all DP tables are computed, the optimal solution can be extracted from the table at s by finding a tuple\n(za\u2217s , z d\u2217 s ) \u2208 arg min\nmc(zas ,z d s )\u2264B zds zas\nThe pair (\u03c0\u2032\u2217,p\u2217) associated with the tuple minimizes the objective.\nUnfortunately, the table size grows exponentially with the height of the node in the tree. We next introduce a rounding strategy to make the algorithm scalable.\nRounding We define rounded value functions z\u0302u(\u03c0\u2032;p) and z\u0302u(\u03c0;p) for subtree u and introduce the following recurrences for rounded value functions:\nz\u0302u(\u03c0 \u2032 u;pu)=Ku\n\u230a ru+ puv|\u03c0\u2032u z\u0302v(\u03c0 \u2032 v;pv) + puw|\u03c0\u2032u z\u0302w(\u03c0 \u2032 w;pw)\nKu\n\u230b (23)\nz\u0302u(\u03c0u;pu)=Ku\n\u2308 ru+ puv|\u03c0u z\u0302v(\u03c0v;pv) + puw|\u03c0u z\u0302w(\u03c0w;pw)\nKu\n\u2309 (24)\nwhere Ku is an user defined rounding parameter. Intuitively, values are rounded and grouped into discrete bins, which reduces the number of pairs in the DP table. The following theorem states that for any given policy-parameter pair, the rounded objective values are not too far from the true values.\nTheorem 2. Let \u00b5 > 0. If we set Ku = \u00b5ru, for any (\u03c0\u2032u,pu) and any \u03c0u, we have\nzu(\u03c0 \u2032 u;pu)\u2212z\u0302u(\u03c0 \u2032 u;pu)\u2264 \u2211 t\u2208Tu pu t|\u03c0\u2032uKt=\u00b5zu(\u03c0 \u2032 u;pu) (25)\nz\u0302u(\u03c0u;pu)\u2212zu(\u03c0u;pu)\u2264 \u2211 t\u2208Tu pu t|\u03c0uKt=\u00b5zu(\u03c0u;pu) (26) zu(\u03c0 \u2032 u;pu) \u2265 z\u0302u(\u03c0 \u2032 u;pu) (27) z\u0302u(\u03c0u;pu) \u2265 zu(\u03c0u;pu) (28)\nProof sketch. Intuitively, in (23), the floor rounding operation at a node t reduces the value by at mostKt, which is discounted by probability pu t|\u03c0\u2032 . Therefore, we have (25) and (27). In (24), the ceiling rounding operation at a node t introduces an increment bounded by Kt, which is discounted by pu t|\u03c0\u2032 . Therefore, we have (26) and (28).\nThe rounded dynamic programming (RDP) algorithm works the same as the DP algorithm except that instead of keeping a list of (zau, z d u) in the table of u, a list of rounded pairs denoted by (z\u0302au, z\u0302 d u) are kept, which are calculated by recurrences (23) and (24). Each rounded pair is associated with the minimum cost to achieve it and the correspondent policy-parameter pair. Intuitively, since multiple zaus (or z d us) are rounded into the same z\u0302au (or z\u0302 d u), the size of the table is reduced. It can be shown that RDP can find\n(\u03c0\u2032r,pr) \u2208 arg min \u03c0\u2032,p\nz\u0302(\u03c0;p) z\u0302(\u03c0\u2032;p) (29)\nWe show that (\u03c0\u2032r,pr) is a good approximation to the optimal policy-parameter pair (\u03c0\u2032\u2217,p\u2217). That is, it is within (1 + ) optimal if \u00b5 is set properly. Specifically, Theorem 3. If \u00b5 = 2+ , we have\nOPT = z(\u03c0;p\u2217)\nz(\u03c0\u2032\u2217;p\u2217) \u2264 z(\u03c0;p\nr)\nz(\u03c0\u2032r;pr) \u2264 (1 + )OPT\nProof. By (25) and (26), for any (\u03c0\u2032,p), we have\nz\u0302(\u03c0;p) z\u0302(\u03c0\u2032;p) \u2264 (1 + \u00b5)z(\u03c0;p) (1\u2212 \u00b5)z(\u03c0\u2032;p) = (1 + ) z(\u03c0;p) z(\u03c0\u2032;p)\nSince (\u03c0\u2032r,pr) produces the minimum ratio for rounded value functions (24) and (23), we have\nz\u0302(\u03c0;pr)\nz\u0302(\u03c0\u2032r;pr) \u2264 z\u0302(\u03c0;p\n\u2217)\nz\u0302(\u03c0\u2032\u2217;p\u2217) \u2264 (1 + ) z(\u03c0;p\n\u2217)\nz(\u03c0\u2032\u2217;p\u2217)\nBy (27) and (28), we have\nz(\u03c0;pr)\nz(\u03c0\u2032r;pr) \u2264 z\u0302(\u03c0;p\nr)\nz\u0302(\u03c0\u2032r;pr)\nThus, the theorem is proved.\nRuntime Analysis In Theorem 3, we see that the Ku values of affect the approximation rate. Now, we analyze the dependence of the RDP algorithm running time on these values. First, we make the following assumption. Assumption 2. There are two constants m and M independent of |V | such that m \u2264 ru \u2264M for all u \u2208 V .\nThe assumption is reasonable because rewards represent habitat areas of stream segments, which do not increase or decrease as the number of segments increases.\nLet the number of different values of z\u0302au and z\u0302 d u in the table\nat u be mau and m d u. We have\nLemma 2. If Ku = \u00b5ru, we have mau = O (nu \u00b5 ) , mdu = O (nu \u00b5 ) where nu is the number of nodes in subtree Tu.\nProof. Since z\u0302(\u03c0\u2032u;pu) is upper-bounded by z(\u03c0 \u2032 u;pu) \u2264 nu \u00b7 M , the number of different rounded values with Ku is mau \u2264 nu\u00b7MKu \u2264 nu\u00b7M \u00b5m = O( nu \u00b5 ). Similarly, z\u0302(\u03c0;p) is upper-bounded by (1 + \u00b5)z(\u03c0u;pu) \u2264 (1 + \u00b5)nuM , so mdu = O( nu \u00b5 ) as well.\nDefine T (nu) to be the running time for subtree u, which is calculated by recurrence\nT (nu) = O(m a vm d vm a wm d w) + T (nv) + T (nw)\nTogether with Lemma 2, it can be shown that\nTheorem 4. T (nu) = O( n4u \u00b52 ).\nThus, the running time of the RDP algorithm is O(n 4\n\u00b52 )\nwhere n is the number of nodes in the directed rooted tree. Combining Theorems 3 and 4, Theorem 1 is proved."}, {"heading": "4 Other Criterion of Robustness", "text": "A slightly different way to quantify robustness is to use regret (Kumar et al. 2016; Boutilier et al. 2003). The policy that minimizes the regret is defined by\n\u03c0MR \u2208 arg min \u03c0:c(\u03c0)\u2264B max \u03c0\u2032:c(\u03c0\u2032)\u2264B z(\u03c0\u2032;p)\u2212 z(\u03c0;p) (30)\nThe robust ratio and the regret are correlated as\nz(\u03c0;p) z(\u03c0\u2032;p) = 1\u2212 z(\u03c0 \u2032;p)\u2212 z(\u03c0;p) z(\u03c0\u2032;p)\nThe robust ratio is in some way the scaled version of the regret. In experiments, we show that \u03c0MRR also produces small regret compared to policies computed by other baseline methods. Our algorithm with minor modifications can find a nearly optimal \u03c0MR empirically."}, {"heading": "5 Experiments", "text": "We use data from the CAPS project (McGarigal et al. 2011) for the river networks in Massachusetts and synthetically define the missing parameters from the data. The data provides the point estimates of the initial passability probabilities. We use the method in (Kumar et al. 2016) to define the intervals of initial passage probabilities before taking actions. The interval of an initial passage probability is [p \u2212 \u03b2p, p + \u03b2p] where p is an point estimate and \u03b2 is a parameter controlling the interval sizes.\nThe data contains two types of barriers: culverts and dams. The point estimates for culverts provided by the data\nare mostly in the range [0.8, 0.9]. A typical action that removes a culvert raises its passage probability to 1.0 and costs $100,000. Most of the point estimates for dams are less than 0.2. A typical action to repair a dam costs $173,030, and shifts its probability interval to [p\u2032 \u2212 \u03b2p\u2032, p\u2032 + \u03b2p\u2032] where p\u2032 = p + a random value in [0.5, 0.9] . The cost estimates are based on a study by Neeson et al. (2015). All intervals are truncated to fit within [0, 1.0].\nWe compare our algorithm against two baseline methods: a \u201cmidpoint\u201d policy is obtained by solving problem (1) and assuming true passage probabilities being the mid-point values of the intervals; a \u201cworst\u201d policy is obtained by solving problem (1) and conservatively assuming true passage probabilities being the lower bounds of the intervals. The policy calculated by our algorithm is the \u201cMRR\u201d policy.\nApproximate Rate of the RDP Algorithm First, we evaluate the approximation rates of the RDP algorithm for problem (4), and of a modified RDP algorithm for solving the inner maximization problem of (30) on a small network of only 22 nodes. The DP algorithm runs out of memory on networks of larger sizes. The results are shown in Fig. 4. We setKu in two different ways\u2014 = 0.1 (denoted by \u201c\u00b5\u201d) and Ku = 5 (denoted by \u201cconstant\u201d). Setting Ku = 5 makes the algorithm about 20 times faster than setting \u00b5 = 0.1 and 100\u2013600 times faster than DP. Note that robust ratios produced by our algorithm are greater than OPT and regrets are smaller than OPT . From the figures, we see that the (modified) RDP algorithm produces nearly optimal policyparameter pairs. In the rest of experiments, we do not show\nthe results of the modified algorithm to solve problem (30). We test on a larger network of 2028 culverts and 166 dams to see what value of K, when we set Ku=K, is sufficiently large for the RDP algorithm to produce good robust ratios. The optimal objective value is not available on this network. The results are shown in Fig. 5. We see that robust ratios converge within 2 minutes for all testing policies, and random policies are much worst than two baseline policies. The value of K in the convergence area implies that it is sufficient to produce near-optimal solutions.\nRobustness Comparison On the same network, we compare the robustness of three policies using the value of K in the convergence area. Fig. 6 shows how the robust ratio and regret computed by \u201cMRR\u201d change as the size of intervals (i.e., \u03b2) varies. Budget sizes are relative to the cost of removing all barriers. We see that as \u03b2 increases, the robust ratio decreases and the regret increases almost linearly. \u201cMRR\u201d gives the largest robust ratio. Although \u201cMRR\u201d maximizes the robust ratio, it produces the smallest regret, implying that the two robustness metrics are correlated.\nFinally, we test our algorithms on a large network of 9335 nodes, 7566 culverts and 596 dams with 5% budget. In this very difficult setting, we obtain results similar to those shown in Fig. 6 even without using the value of K in the convergence area. Due to the limitation of space, we do not show those similar figures here, but only visualize the computed policies in Fig. 7. The \u201cmidpoint\u201d policy allocates most of the budget around the main stream, near the middle vertical line of the river. The adversarial policy can easily achieve much better value by taking actions in other important areas and assigns high probabilities if actions are taken (e.g., the adversarial policy) and low probabilities if actions are not taken (e.g., the decision policy.) In contrast, the \u201cMRR\u201d policy is more robust by allocating the budget to several important areas so that the adversarial policy cannot use the same trick to achieve much better value."}, {"heading": "6 Conclusion", "text": "We describe an approximate robust optimization algorithm for a tree-structured stochastic network design problem, which is motivated by the river network design problem for fish conservation. The algorithm iteratively solves two optimization problem: the decision optimization problem and the ratio minimization problem. The former is encoded into\na MILP, and an FPTAS is developed for the latter, which is the harder problem. Empirically, we show that the policies computed by maximizing the robust ratio are more robust than policies computed by two other baseline methods. Besides finding policies of high robust ratio, our algorithm can also produce policies with small regret on large-scale networks. These algorithms provide new computational tools for environmental scientists who tackle decision problems with imprecise models."}, {"heading": "Acknowledgments", "text": "This work was partially funded by a UMass Graduate School Dissertation Writing Fellowship awarded to the first author. Second author is supported by the research center at the School of Information Systems at the Singapore Management University."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "Stochastic network design is a general framework for optimizing network connectivity. It has several applications in computational sustainability including spatial conservation planning, pre-disaster network preparation, and river network optimization. A common assumption in previous work has been made that network parameters (e.g., probability of species colonization) are precisely known, which is unrealistic in real-world settings. We therefore address the robust river network design problem where the goal is to optimize river connectivity for fish movement by removing barriers. We assume that fish passability probabilities are known only imprecisely, but are within some interval bounds. We then develop a planning approach that computes the policies with either high robust ratio or low regret. Empirically, our approach scales well to large river networks. We also provide insights into the solutions generated by our robust approach, which has significantly higher robust ratio than the baseline solution with mean parameter estimates.", "creator": "TeX"}}}