{"id": "1702.05531", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Feb-2017", "title": "Analysis and Optimization of fastText Linear Text Classifier", "abstract": "The paper [1] shows that simple linear classifier can compete with complex deep learning algorithms in text classification applications. Combining bag of words (BoW) and linear classification techniques, fastText [1] attains same or only slightly lower accuracy than deep learning algorithms [2-9] that are orders of magnitude slower. We proved formally that fastText can be transformed into a simpler equivalent classifier, which unlike fastText does not have any hidden layer. We also proved that the necessary and sufficient dimensionality of the word vector embedding space is exactly the number of document classes. These results help constructing more optimal linear text classifiers with guaranteed maximum classification capabilities. The results are proven exactly by pure formal algebraic methods without attracting any empirical data.", "histories": [["v1", "Fri, 17 Feb 2017 22:10:28 GMT  (631kb)", "http://arxiv.org/abs/1702.05531v1", null]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["vladimir zolotov", "david kung"], "accepted": false, "id": "1702.05531"}, "pdf": {"name": "1702.05531.pdf", "metadata": {"source": "CRF", "title": "Analysis and Optimization of fastText Linear Text Classifier", "authors": ["Vladimir Zolotov", "David Kung"], "emails": ["zolotov@us.ibm.com,", "kung@us.ibm.com"], "sections": [{"heading": "1. Introduction", "text": "Text classification is a difficult important problem of Computational Linguistics and Natural Language Processing. Different types of neural networks (deep learning, convolutional, recurrent, LSTM, neural Turing machines, etc.) are used for text classification, often achieving significant success.\nRecently, a team of researchers (A. Joulin, E. Grave P. Bojanowski, T. Mikolov) [1] experimentally has shown that comparable results can be achieved by a simple linear classifier. Their tool fastText [1] can be trained to the accuracy achieved with more complex deep learning algorithms [2-9], but orders of magnitude faster, even without using a high-performance GPU.\nExceptional performance of fastText is not a big surprise. It is a consequence of its very simple classification algorithm, and highly professional implementation in C++. High accuracy of very simple fastText algorithms is a clear indicator that the text classification problem is still not understood well enough to construct really efficient nonlinear classification models.\nBecause of very high complexity of nonlinear classification models, their direct analysis is too difficult. A good understanding of simple linear classification algorithms like fastText is a key to constructing good nonlinear text classifiers. That was the main motivation for analyzing the fastText classification algorithm. On the other hand, the simplicity of fastText makes very conducive for formal analysis. In spite of its simplicity, fastText combines several very important techniques: bag of words (BoW), representation of words as vectors of linear space, and linear classification. Therefore, a thorough formal analysis of fastText can further our understanding of other text classification algorithms employing similar basic techniques.\nWe obtained the following main results:\n The linear hidden layer of fastText model is not required for improving classification accuracy. We formally proved that any fastText type classifier can be transformed into an equivalent classifier without a hidden layer.\n The sufficient number of dimensions of the vector space representing document words is equal to the number of the document classes.\n Any fastText classifier recognizing N classes of documents can be algebraically transformed into an equivalent classifier with word vectors selected from N-dimensional linear space.\n In the general case, the minimum dimensionality of word vectors is the number of the document classes. It means, it is possible to construct a text classification problem with N classes of documents such that, for word vectors of N-1 dimensional space, there is no fastText type classifier that correctly recognizes all classes. However, there exists fastText type classifier with N-dimensional word vectors, that can perform the required classification correctly.\n By simple modification of the classification algorithm, it is possible to reduce the necessary and sufficient dimensionality of the vector space of word representations by 1.\nThe above facts are proven using formal algebraic transformations. Therefore, these conclusions are exact and fully deterministic.\nThe proven theoretical facts have practical value. From them it follows that increasing length of word vectors beyond the number of document classes cannot improve the classification accuracy of linear BoW classifier. On other hand, if word vectors have fewer dimensions than the number of the document classes, we may fail to achieve the maximum possible accuracy. Besides, we see that by adding a hidden linear layer we cannot improve the accuracy of linear BoW classifier. According to the proven facts, an LBoW text classifier guaranteeing maximum achievable accuracy has well defined structure: word vectors with as many coordinates as the number of document classes to be recognized, and no hidden layer. It means that knowing the number of the document classes and the number of the dictionary words, the best LBoW classifier can be constructed automatically.\nWe show how any given linear BoW classifier is transformed into a simpler one without loss of the classification accuracy. The word vectors of the simpler equivalent classifier are computed from the word vectors and the parameters of the hidden layer of the precursor classifier.\nOur analysis is based on the following idea. As soon as the classification is purely linear, and is performed by projecting a linear combination of word vectors onto N-dimensional space of the document classes, the word vectors can be directly selected from that N-dimensional space. This makes the projection trivial, and therefore, unnecessary.\nFor getting higher accuracy, fastText uses some other tricks: filtering rare words, considering letter ngrams (sub-words) [2], word n-grams, etc. These tricks improve the classification accuracy, but their effects are not critical for formal analysis of fastText classification model. Therefore, in our analysis we do not consider those tricks.\nOur analysis is focused on the structure of classifiers, but does not consider explicitly how easy they can be trained, and how good is training convergence. However, from general point of view, the simpler the classifier, the fewer the number of parameters to be learned, the easier to train the classifier, and the less the risk of overfitting. Therefore, elimination of the hidden layer and reduction of dimensionality of word vectors should improve both the speed of recognition and training, and the convergence of training algorithms."}, {"heading": "2. Background", "text": "2.1. Linear Bag of Words classifier The fastText classifier presented in [1] is called here a Linear Bag Of Words (LBoW) classifier to emphasize the fact that it uses linear technique both for combining the word vectors into the vector representing the document, and for computing the classification criterion.\nThe structure of fastText LBoW classifier is shown in Fig.1. Document words wi are represented with ndimensional word vectors xi.\nFirst, the classifier computes a document vector y. This vector y is a linear bag of words of the document. It is computed by averaging all document word vectors xi:\n\ud835\udc66 = 1\n\ud835\udc41 \u2211 \ud835\udc65\ud835\udc56\n\ud835\udc41 \ud835\udc56=1 (1)\nHere, N is the number of words wi in the document. A document word wi is a word occurrence. Each word vector is taken in the averaging the same number of times as the word occurred in the document.\nThe document vector y is supplied to the input of the hidden layer, where it is multiplied by the matrix B of the hidden linear layer to get a classification vector z:\n\ud835\udc67 = (\n\ud835\udc671 \u22ee \ud835\udc67\ud835\udc5a ) = [ \ud835\udc4f1,1 \u22ef \ud835\udc4f1,\ud835\udc5b \u22ee \u22f1 \u22ee \ud835\udc4f\ud835\udc5a,1 \u22ef \ud835\udc4f\ud835\udc5a,\ud835\udc5b ] ( \ud835\udc661 \u22ee \ud835\udc66\ud835\udc5b ) = \ud835\udc35 \u2219 \ud835\udc66 (2)\nHere, y is an n-dimensional vector, z is an m-dimensional vector, B is an m by n matrix; m is the number of document classes (labels).\nClassification is performed by computing the class probabilities with the softmax function:\n\ud835\udc5d\ud835\udc57 = \ud835\udc52\n\ud835\udc67\ud835\udc57\n\u2211 \ud835\udc52\ud835\udc67\ud835\udc58\ud835\udc5a\ud835\udc58=1 (3)\nwhere pj is the predicted probability that the document belongs to the j-th class; zj and zk, are the components of the classification vector z.\nDocument\nWord\nvector x 1\nWord\nvector x 2\nWord\nvector x N\nAveraging\nDocument vector\nDocument classes\nSoftmax\nHidden linear layer\nFigure 1. LBoW classifier with hidden linear layer\nFrom the expression of the softmax function, it is obvious that predicted probabilities pi>pj, if and only if the corresponding classification vector coordinates zi>zj. Therefore, the classification can be performed by explicitly comparing the coordinates zk of the classification vector z without computing the probabilities by the softmax function. The role of the softmax function is to make the classification function continuous and differentiable to be convenient for computing training gradient.\nThe described classification model computes the document vector y by averaging vectors of all word occurrences. However, our analysis is also valid for the case when the multiple word occurrences are ignored. The analysis is also valid if the averaging is replaced with any other linear combination of the document word vectors.\n2.2. Classification problems and LBoW classifiers For our analysis, we need the following formal definitions.\nDefinition 1. The LBoW classifier C with a hidden layer is a pair (X,B), where X is a set of the word vectors xi, and B is the matrix of the hidden layer.\nDefinition 2. Classification problem P is a quadruplet (D, T, L, F), where D is a dictionary of words, T is a set of documents, L is a set of document classes (labels), and F is a function assigning classes (labels) to the documents.\nDefinition 3. We say, two classification problems P1= (D1, T1, L1, F1) and P2= (D2, T2, L2, F2) have the same dimensions (types) if both dictionaries D1 and D2 have the same number of words, and the both classification problems have the same number of classes, i.e. the sets L1 and L2 have the same number of elements.\nIn our analysis, we consider the classifiers that can be applied to the classification problems of the same dimensions. All those classifiers have the same number of word vectors representing the dictionary words. Also, their matrices Bi of the hidden layers have the same number of rows, because all the problems of the same dimension have the same number of the document classes. The length of the vectors representing the words and the number of columns of the hidden layer matrix B can be different even for classifiers applicable to the same classification problem.\nThe accuracy of the LBoW classifier to which the classifier can be trained depends on dimensionality of its word vectors. Analysis of that dependence is the main goal of the following analysis.\n2.3. Equivalency of classifiers Our analysis uses a notion of equivalency of classifiers.\nDefinition 4. Two classifiers C1 and C2 are equivalent, if they can be applied to the same classification problems, and always assign the same classes to the same documents.\nDefinition 5. Two classifiers C1 and C2 strictly equivalent, if they can be applied to the same classification problems, and for the same document they always compute the same class probabilities.\nIt is obvious, that if two LBoW classifiers C1=(X1, B1) and C2=(X2, B2) are equivalent, then the sets X1 and X2 of the word vectors have the same number of elements, and the hidden layer matrices B1 and B2 have the same number of rows. However, in equivalent LBoW classifiers the vectors of word representations may be different, and may have different length. Also, the hidden layer matrices of equivalent LBoW classifiers may be different, and may have different number of columns."}, {"heading": "3. Equivalent transformation of LBoW classifier", "text": "We transform a given LBoW classifier to a strictly equivalent one with a simpler structure. The following theorem defines this transformation and proves strict equivalency of the resulted classifier and its precursor.\nTheorem 1. For any LBoW classifier with m document classes, there exists a strictly equivalent classifier with m-dimensional word vectors. That classifier has no hidden layer.\nProof. Combining formulas (1) and (2), we get the following formula for a classification vector computed by an LBoW classifier C=(X,B):\n\ud835\udc67 = \ud835\udc35 \u2219 \ud835\udc66 = \ud835\udc35 \u2219 ( 1\n\ud835\udc41 \u2211 \ud835\udc65\ud835\udc56\n\ud835\udc41 \ud835\udc56=1 ) (4)\nwhere:\n z is the classification vector of a document d.\n xi are vectors representing words wi of the document d.  N is the number of words in the document d.  \ud835\udc66 = 1\n\ud835\udc41 \u2211 \ud835\udc65\ud835\udc56\n\ud835\udc41 \ud835\udc56=1 is the vector representing the document d.\n B is the matrix of the hidden layer of the classifier.\nIn this formula, the multiplication of the document vector y by the matrix B can be replaced with the multiplication of each word vector xi with the same matrix. Introducing vectors \ud835\u0301\udc65\ud835\udc56 = \ud835\udc35 \u2219 \ud835\udc65\ud835\udc56 that formula can be rewritten as follows:\n\ud835\udc67 = 1\n\ud835\udc41 \u2211 \ud835\u0301\udc65\ud835\udc56\n\ud835\udc41 \ud835\udc56=1 (5)\nThis formula can be interpreted as an LBoW classifier C\u2019 without a hidden layer. The word vectors x\u2019i of this classifier are obtained from the word vectors xi of the classifier C=(X,B) by multiplying them by the matrix B. The dimensionality of the word vectors x\u2019i is exactly the number of the document classes.\nIn the constructed classifier, the classification vector z is the document vector: the average vector of the document word vectors x\u2019i. The classification is performed directly on the document vectors themselves.\nObviously, the constructed classifier C\u2019 computes the same classification vectors and therefore is strictly equivalent to its precursor. We denote LBoW classifiers without a hidden layer by C(X), omitting the symbol for matrix B from the more general notation C(X, B).\nThe structure of an LBoW classifier without a hidden layer is shown in Fig. 2."}, {"heading": "4. Minimum dimensionality of word vectors of LBoW classifier", "text": "We proved that if a classification problem has m document classes, there exists an LBoW classifier with m-dimensional word vectors, and that classifier can achieve the accuracy of the best LBoW classifier. However, it still is not clear if the same accuracy can be achieved by a LBoW classifier with word vectors having fewer coordinates than the number of document classes. Now we show that it is not always possible. The minimum length of word vectors guaranteeing the maximum accuracy is equal to the number of the document classes.\nFirst, we prove the following lemma.\nLemma 1. If two document vectors y\u2019 and y differ only by a positive scaling factor a (i.e. y\u2019=a*y), then any LBoW classifier assigns them the same class.\nProof. The classification vectors are computed by multiplying the document vectors with the matrix of the hidden layer. Therefore, the both classification vectors differ only with the same positive scaling factor a.\nThe softmax classifier computes the class with the index equal to the index of the maximum coordinate\nof the classification vector. Since, multiplying a vector by a positive scalar does not affect order relation between its coordinates, the both documents are classified the same way.\nNow we are ready to prove the theorem on the minimum dimensionality of word vectors.\nTheorem 2. There exists a classification problem with m document classes that can be solved by an LBoW classifier with m-dimensional word vectors, but cannot be solved with the same accuracy by any LBoW classifier with shorter word vectors.\nProof. First, consider a classification problem P=(D, T, L, F), where:\n The dictionary D has exactly m words {w1, w2, .., wm}.  The set of documents T consists of all possible sequences of the dictionary words.\n The number of the document classes is exactly the number of the dictionary words.  The function F assigns to a document d the label \ud835\udc59\ud835\udc56 \u2208 \ud835\udc3f such that the word wi is the most frequent word in the document.\n If several different words occur the same number of times in a document, and more often than any other word, then the document is assigned the class corresponding to the most frequent word with the lowest index.\nLet an LBoW classifier C0 represent each dictionary word wi with a vector xi, with i-th coordinate equal 1, and all other coordinates 0. Since a document vector is an average of the document word vectors, the coordinates of the document vector are exactly the frequencies of the corresponding words in the document. The coordinate with the maximum value corresponds to the most frequent word. Comparing the coordinates of the document vector, the classifier always selects the correct document class. So, the constructed LBoW classifier solves the classification problem P exactly.\nDocument\nWord vector x1\nWord\nvector x2\nWord\nvector xN\nAveraging\nDocument vector\nDocument classes\nSoftmax\nFigure 2. LBoW classifier without hidden layer\nNow, consider an arbitrary classifier C with the word vectors belonging to a linear q-dimensional vector space, where q<m. Since m>q, the m word vectors of the classifier C dictionary are not linearly independent. Therefore, there exist m numbers {a1, a2, \u2026, am}, satisfying the following equation:\n\u2211 \ud835\udc4e\ud835\udc56\ud835\udc65\ud835\udc56 \ud835\udc5a \ud835\udc56=1 = 0 (6)\nwhere, xi are word vectors of the classifier, and some of the numbers ai are different from 0.\nIn this equation, at least two coefficients ai and aj are not 0.\nWithout loss of the generality, we can assume all coefficients ai are integers. By proper scaling, rational coefficients can be turned into integers. The case of irrational coefficients can be excluded, considering only word vectors with rational coordinates, which can approximate irrational number with any required accuracy. This is a reasonable assumption for any practical application.\nFirst, consider the case when all coefficients ai are positive. Consider a document d0 containing each word wi exactly ai times. By equation (6), the sum of the word vectors of this document is 0. Therefore, the document d0 can be concatenated with any other document d any number of times without changing the sum of the word vectors of the document d.\nLet a document d1 belong to a different class than the document d0. By concatenating a sufficiently large number of copies of the document d0 with the document d1, we get the document d2 where the most frequent word is the same as the one in the document d0. Therefore, by the definition of the classification problem P, the document d2 belongs to the same class as the document d0, which is different from the class of the document d1. However, both documents d1 and d2 have the same sum of their word vectors. Then, the vectors representing these documents differ only with a positive multiplier (the ratio of the length of the documents). According to Lemma 1, the classifier C computes the same class for the both documents d1 and d2, which is incorrect. Therefore, this classifier is less accurate that the exact classifier C0, constructed above.\nThe case of all negative coefficients ai does not require special consideration as by multiplying the equation (6) by -1, we obtain the equation where all non-zero coefficients are positive.\nNow, consider the case when the non-zero coefficients in equation (6) have different signs. Moving the negative terms to the right and omitting all zero terms, we get the following:\n\u2211 \ud835\udc4e\ud835\udc57\ud835\udc65\ud835\udc57 \ud835\udc62 \ud835\udc57=1 = \u2211 \ud835\udc4e\ud835\udc58\ud835\udc65\ud835\udc58 \ud835\udc63 \ud835\udc58=1 (7),\nwhere: all coefficients aj and ak are positive, and all word vectors xj and xk are different.\nWe construct two documents dl and dr. The document dl has words wj corresponding to the word vectors xj from the left side of equation (7), and the document dr has the words wk corresponding to word vectors xk from the right side of equation (7). Each word wi occurs in its document exactly ai times. These documents belong to different classes because they have different words.\nAccording to equation (7), the both documents have the same sums of the word vectors, and by Lemma 1, the classifier C computes the same class for both documents d1 and d2, which is incorrect. Therefore, this classifier is less accurate that the exact classifier C0, constructed above.\nThus, we proved that any classifier with word vectors having fewer coordinates than the number of the document classes, cannot solve the problem P exactly while the classifier C0 can do that. That proves the theorem."}, {"heading": "5. Further reduction of dimensionality", "text": "By slight change of the classification algorithm, we further reduce dimensionality of word vectors of the LBoW classifiers with the structure defined in the Theorem 1. The idea is based on the following lemma.\nLemma 2. Let C(X) be an LBoW classifier without a hidden layer. Consider an LBoW classifier C\u2019=(X\u2019), with the same number of the word vectors. Let the word vectors x\u2019i of the classifier C\u2019 be obtained from the word vectors xi of the classifier C by decrementing all coordinates of each vector xi by the same value ai. (That value ai can be different for different vectors xi.) Then the classifiers C\u2019 and C are strictly equivalent.\nProof. Let Ai=(ai, ai, \u2026, ai). By assumption, if the classifier C has a word vector xi, then the corresponding word vector of the classifier C\u2019 is x\u2019i =xi- Ai. Then the document vector y\u2019 of classifier C\u2019 is as follows:\n\ud835\u0301\udc66 = 1\n\ud835\udc41 \u2211 \ud835\udc65\ud835\u0301\udc58 =\n\ud835\udc41 \ud835\udc58=1\n1 \ud835\udc41 \u2211 (\ud835\udc65\ud835\udc58 \u2212 \ud835\udc34\ud835\udc58) \ud835\udc41 \ud835\udc58=1 = 1 \ud835\udc41 \u2211 \ud835\udc65\ud835\udc58 \ud835\udc41 \ud835\udc58=1 \u2212 1 \ud835\udc41 \u2211 \ud835\udc34\ud835\udc58 = \ud835\udc66 \u2212 \ud835\udc34 \ud835\udc41 \ud835\udc58=1 (8)\nwhere: y and y\u2019 are the vectors representing the same document in the classifiers C and C\u2019; xk and x\u2019k are the word vectors of the classifiers C and C\u2019 of that document; A=(a, a, \u2026, a), and \ud835\udc4e = 1\n\ud835\udc41 \u2211 \ud835\udc4e\ud835\udc58\n\ud835\udc41 \ud835\udc58=1 .\nThus, the coordinates of the document vector y\u2019 of the classifier C\u2019 are computed by decrementing all coordinates of the document vector y of the classifier C by the same value a.\nThe softmax function does not change its value when all its arguments xj are decremented with the same value a:\n\ud835\udc52\ud835\udc65\ud835\udc56\u2212\ud835\udc4e\n\u2211 \ud835\udc52 \ud835\udc65\ud835\udc57\u2212\ud835\udc4e\ud835\udc5a\n\ud835\udc57=1\n= \ud835\udc52\ud835\udc65\ud835\udc56\n\u2211 \ud835\udc52 \ud835\udc65\ud835\udc57\ud835\udc5a\n\ud835\udc57=1\n(9)\nTherefore, the classifier C\u2019 computes the same class probabilities as the classifier C, and those classifiers are strictly equivalent, which proves the lemma.\nNow, for a classifier C(X) without a hidden layer, we construct a classifier C\u2019(X\u2019) by decrementing its word vectors with their last coordinate. For each vector xi=(xi,1, xi,2, \u2026, xi,m-1, xi,m) of the classifier C(X), the classifier C\u2019(X\u2019) has the word vector x\u2019i=(xi,1-xi,m, xi,2-xi,m, \u2026, xi,m-1-xi,m, 0).\nSince the last coordinate of all word vectors of the classifier C\u2019(X\u2019) is 0, that 0 can be discarded without any loss of the information.\nOf course, the new classifier C\u2019(X\u2019) has to use a modified classification algorithm. The probabilities of all classes except the m-th one are computed by the following formula:\n\ud835\udc5d\ud835\udc57 = \ud835\udc52\n\ud835\udc66\ud835\udc57\n1+\u2211 \ud835\udc52\ud835\udc66\ud835\udc58\ud835\udc5a\u22121\ud835\udc58=1 (10)\nThe probability of the m-th class is computed by a different formula:\n\ud835\udc5d\ud835\udc5a = 1\n1+\u2211 \ud835\udc52\ud835\udc66\ud835\udc58\ud835\udc5a\u22121\ud835\udc58=1 (11)\nCombining this fact with the Theorem 1, we get the following:\nTheorem 3. For any LBoW classifier with m document classes, there exist an equivalent linear classifier with m-1-dimensional word vectors. This classifier has no hidden layer."}, {"heading": "6. Conclusions", "text": "The proven theorems show that word vectors can hold all the information that the LBoW classifier can learn from the training documents, and that no additional layers are required.\nThere are text classification problems requiring word vectors with as many coordinates at the number of document classes.\nIncreasing the length of word vectors beyond the number of the document classes cannot improve the accuracy of a LBoW classifier.\nThe ways to improve accuracy are either to extend the dictionary by including word combinations or subwords, or to introduce non-linear functions considering non-linearity of word interactions.\nAny LBoW classifier similar to fastText can be transformed into an equivalent classifier without a hidden layer and with word vectors having as many coordinates as many document classes is required to recognize. The transformation is performed by explicit recalculation of the word vectors, and does not required any retraining or tuning the constructed classifier."}, {"heading": "7. References", "text": "1. Armand Joulin, Edouard Grave, Piotr Bojanowski, Tomas Mikolov. Bag of Tricks for Efficient Text\nClassification. arXiv preprint arXiv: 1607.01759. 2. Xiang Zhang and Yann LeCun. 2015. Text understanding from scratch. arXiv preprint\narXiv:1502.01710. 3. Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015. Character-level convolutional networks for text\nclassification. In NIPS. 4. Yijun Xiao and Kyunghyun Cho. 2016. Efficient character-level document classification by\ncombining convolution and recurrent layers. arXiv preprint arXiv:1602.00367. 5. Alexis Conneau, Holger Schwenk, Lo\u0131c Barrault, and Yann Lecun. 2016. Very deep convolutional\nnetworks for natural language processing. arXiv preprint arXiv:1606.01781. 6. Duyu Tang, Bing Qin, and Ting Liu. 2015. Document modeling with gated recurrent neural network\nfor sentiment classification. In EMNLP. 7. Bart Thomee, David A Shamma, Gerald Friedland, Benjamin Elizalde, Karl Ni, Douglas Poland,\nDamian Borth, and Li-Jia Li. 2016. Yfcc100m: The new data in multimedia research. Volume 59, pages 64\u201373. ACM. 8. Jason Weston, Samy Bengio, and Nicolas Usunier. 2011. Wsabie: Scaling up to large vocabulary image annotation. In IJCAI. 9. Jason Weston, Sumit Chopra, and Keith Adams. 2014. #tagspace: Semantic embeddings from hashtags. In EMNLP. 10. Piotr Bojanowski, Edouard Grave, Armand Joulin, Tomas Mikolov. Enriching Word Vectors with Subword Information. arXiv preprint arXiv: 1607.04606."}], "references": [{"title": "Text understanding from scratch. arXiv preprint arXiv:1502.01710", "author": ["Xiang Zhang", "Yann LeCun"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "Character-level convolutional networks for text classification", "author": ["Xiang Zhang", "Junbo Zhao", "Yann LeCun"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "Efficient character-level document classification by combining convolution and recurrent layers. arXiv preprint arXiv:1602.00367", "author": ["Yijun Xiao", "Kyunghyun Cho"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2016}, {"title": "Very deep convolutional networks for natural language processing", "author": ["Alexis Conneau", "Holger Schwenk", "Lo\u0131c Barrault", "Yann Lecun"], "venue": "arXiv preprint arXiv:1606.01781", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2016}, {"title": "Document modeling with gated recurrent neural network for sentiment classification", "author": ["Duyu Tang", "Bing Qin", "Ting Liu"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "Yfcc100m: The new data in multimedia research", "author": ["Bart Thomee", "David A Shamma", "Gerald Friedland", "Benjamin Elizalde", "Karl Ni", "Douglas Poland", "Damian Borth", "Li-Jia Li"], "venue": "Volume 59,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2016}, {"title": "Wsabie: Scaling up to large vocabulary image annotation", "author": ["Jason Weston", "Samy Bengio", "Nicolas Usunier"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "tagspace: Semantic embeddings from hashtags", "author": ["Jason Weston", "Sumit Chopra", "Keith Adams"], "venue": "In EMNLP", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "Combining bag of words (BoF) and linear classification techniques, fastText [1] attains same or only slightly lower accuracy than deep learning algorithms [2-9] that are orders of magnitude slower.", "startOffset": 155, "endOffset": 160}, {"referenceID": 1, "context": "Combining bag of words (BoF) and linear classification techniques, fastText [1] attains same or only slightly lower accuracy than deep learning algorithms [2-9] that are orders of magnitude slower.", "startOffset": 155, "endOffset": 160}, {"referenceID": 2, "context": "Combining bag of words (BoF) and linear classification techniques, fastText [1] attains same or only slightly lower accuracy than deep learning algorithms [2-9] that are orders of magnitude slower.", "startOffset": 155, "endOffset": 160}, {"referenceID": 3, "context": "Combining bag of words (BoF) and linear classification techniques, fastText [1] attains same or only slightly lower accuracy than deep learning algorithms [2-9] that are orders of magnitude slower.", "startOffset": 155, "endOffset": 160}, {"referenceID": 4, "context": "Combining bag of words (BoF) and linear classification techniques, fastText [1] attains same or only slightly lower accuracy than deep learning algorithms [2-9] that are orders of magnitude slower.", "startOffset": 155, "endOffset": 160}, {"referenceID": 5, "context": "Combining bag of words (BoF) and linear classification techniques, fastText [1] attains same or only slightly lower accuracy than deep learning algorithms [2-9] that are orders of magnitude slower.", "startOffset": 155, "endOffset": 160}, {"referenceID": 6, "context": "Combining bag of words (BoF) and linear classification techniques, fastText [1] attains same or only slightly lower accuracy than deep learning algorithms [2-9] that are orders of magnitude slower.", "startOffset": 155, "endOffset": 160}, {"referenceID": 7, "context": "Combining bag of words (BoF) and linear classification techniques, fastText [1] attains same or only slightly lower accuracy than deep learning algorithms [2-9] that are orders of magnitude slower.", "startOffset": 155, "endOffset": 160}, {"referenceID": 0, "context": "Their tool fastText [1] can be trained to the accuracy achieved with more complex deep learning algorithms [2-9], but orders of magnitude faster, even without using a high-performance GPU.", "startOffset": 107, "endOffset": 112}, {"referenceID": 1, "context": "Their tool fastText [1] can be trained to the accuracy achieved with more complex deep learning algorithms [2-9], but orders of magnitude faster, even without using a high-performance GPU.", "startOffset": 107, "endOffset": 112}, {"referenceID": 2, "context": "Their tool fastText [1] can be trained to the accuracy achieved with more complex deep learning algorithms [2-9], but orders of magnitude faster, even without using a high-performance GPU.", "startOffset": 107, "endOffset": 112}, {"referenceID": 3, "context": "Their tool fastText [1] can be trained to the accuracy achieved with more complex deep learning algorithms [2-9], but orders of magnitude faster, even without using a high-performance GPU.", "startOffset": 107, "endOffset": 112}, {"referenceID": 4, "context": "Their tool fastText [1] can be trained to the accuracy achieved with more complex deep learning algorithms [2-9], but orders of magnitude faster, even without using a high-performance GPU.", "startOffset": 107, "endOffset": 112}, {"referenceID": 5, "context": "Their tool fastText [1] can be trained to the accuracy achieved with more complex deep learning algorithms [2-9], but orders of magnitude faster, even without using a high-performance GPU.", "startOffset": 107, "endOffset": 112}, {"referenceID": 6, "context": "Their tool fastText [1] can be trained to the accuracy achieved with more complex deep learning algorithms [2-9], but orders of magnitude faster, even without using a high-performance GPU.", "startOffset": 107, "endOffset": 112}, {"referenceID": 7, "context": "Their tool fastText [1] can be trained to the accuracy achieved with more complex deep learning algorithms [2-9], but orders of magnitude faster, even without using a high-performance GPU.", "startOffset": 107, "endOffset": 112}, {"referenceID": 0, "context": "For getting higher accuracy, fastText uses some other tricks: filtering rare words, considering letter ngrams (sub-words) [2], word n-grams, etc.", "startOffset": 122, "endOffset": 125}], "year": 2017, "abstractText": "The paper [1] shows that simple linear classifier can compete with complex deep learning algorithms in text classification applications. Combining bag of words (BoF) and linear classification techniques, fastText [1] attains same or only slightly lower accuracy than deep learning algorithms [2-9] that are orders of magnitude slower. We proved formally that fastText can be transformed into a simpler equivalent classifier, which unlike fastText does not have any hidden layer. We also proved that the necessary and sufficient dimensionality of the word vector embedding space is exactly the number of document classes. These results help constructing more optimal linear text classifiers with guaranteed maximum classification capabilities. The results are proven exactly by pure formal algebraic methods without attracting any empirical data.", "creator": "Microsoft\u00ae Word 2016"}}}