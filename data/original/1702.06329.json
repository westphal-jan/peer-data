{"id": "1702.06329", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Feb-2017", "title": "Towards a Common Implementation of Reinforcement Learning for Multiple Robotic Tasks", "abstract": "Mobile robots are increasingly being employed for performing complex tasks in dynamic environments. Reinforcement learning (RL) methods are recognized to be promising for specifying such tasks in a relatively simple manner. However, the strong dependency between the learning method and the task to learn is a well-known problem that restricts practical implementations of RL in robotics, often requiring major modifications of parameters and adding other techniques for each particular task. In this paper we present a practical core implementation of RL which enables the learning process for multiple robotic tasks with minimal per-task tuning or none. Based on value iteration methods, this implementation includes a novel approach for action selection, called Q-biased softmax regression (QBIASSR), which avoids poor performance of the learning process when the robot reaches new unexplored states. Our approach takes advantage of the structure of the state space by attending the physical variables involved (e.g., distances to obstacles, X,Y,{\\theta} pose, etc.), thus experienced sets of states may favor the decision-making process of unexplored or rarely-explored states. This improvement has a relevant role in reducing the tuning of the algorithm for particular tasks. Experiments with real and simulated robots, performed with the software framework also introduced here, show that our implementation is effectively able to learn different robotic tasks without tuning the learning method. Results also suggest that the combination of true online SARSA({\\lambda}) with QBIASSR can outperform the existing RL core algorithms in low-dimensional robotic tasks.", "histories": [["v1", "Tue, 21 Feb 2017 11:07:27 GMT  (747kb,D)", "http://arxiv.org/abs/1702.06329v1", "15 pages, 10 figures, 7 tables. To be published in a scientific journal"]], "COMMENTS": "15 pages, 10 figures, 7 tables. To be published in a scientific journal", "reviews": [], "SUBJECTS": "cs.AI cs.LG cs.RO", "authors": ["angel mart\\'inez-tenor", "juan antonio fern\\'andez-madrigal", "ana cruz-mart\\'in", "javier gonz\\'alez-jim\\'enez"], "accepted": false, "id": "1702.06329"}, "pdf": {"name": "1702.06329.pdf", "metadata": {"source": "CRF", "title": "Towards a Common Implementation of Reinforcement Learning for Multiple Robotic Tasks", "authors": ["Angel Mart\u0301\u0131nez-Tenor", "Juan Antonio Fern\u00e1ndez-Madrigal", "Ana Cruz-Mart\u0301\u0131n", "Javier Gonz\u00e1lez-Jim\u00e9nez"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "The operation of mobile robots in real environments requires coping with unforeseen situations that human programmers find difficult or impossible to catalog and therefore to code into a program. Therefore, it is highly desirable that the robot itself modifies its behavior to cope with them. An ideal solution would consist of an architecture capable of automatically evolving the controller to improve the performance of any task over time; the same implementation should be employed in different robots and environments without considering the scenario or the hardware involved, and without reprogramming or manually tuning the resulting controllers, i.e., such architecture could be employed for new tasks by making minor changes to already implemented ones, e.g., by reprogramming the objective and the devices required to accomplish them.\nWe can consider two paradigmatic examples of robotics projects that would be benefited from such an ideal, found in our research group, but common in many others: i) The implementation of several pick and place tasks with a complex 6DOF low-weight robotic arm, whose model is not available but that is required to execute complicated trajectories; in this case, top-down implementations demanded many hours of work, usually employed to adapt small variations of the same task. ii) A set of mobile robotics platforms that must be used for autonomous navigation, teleoperation, and collaborative control; dif-\nferences between the behavior of the mobile bases, even among identical robots, often require the navigation programs to be tuned from one robot to another, and other features such as the variations of the wear of the wheels and the battery levels contribute to worsen the performance of the tasks as well.\nThe work presented in this paper is a first step towards the ideal solution explained before. It focuses on building a common implementation of a machine learning core approach intended for solving multiple low-dimensional tasks found in service robotics, such as wandering, 2D mobile navigation, 3D arm motion, etc. For this purpose, the robots should learn by themselves the effects of their actions, with minimal tuning by the engineer. A well-known machine learning and decision-making methodology, reinforcement learning (RL), has been chosen as the basic mechanism for that. RL is based on the explicit implementation, by the engineer, of a set of rewards that define the objectives of the task to learn.\nMost RL publications, including those based on lowrealistic simulated robots (see section 2), show their advantages by measuring the eventual convergence to the optimal solution to the task at hand, or the level of performance, often based on the average obtained reward, after a relatively large number of steps, episodes, and repetitions of the learning process. Unfortunately, direct application of most of these methods in real scenarios would require days or months of learning to achieve a fair\nar X\niv :1\n70 2.\n06 32\n9v 1\n[ cs\n.A I]\n2 1\nFe b\n20 17\nperformance, even in relatively simple tasks such as 2D navigation in small environments. Consequently, other techniques must be added when dealing with RL problems in robotics to make them tractable, such as those based on a clever use of approximate representations, prior knowledge, and models. These methods, in turn, need to be carefully selected and hand-tuned for each specific task to learn, even for very closely related ones. All of this makes RL not applicable to robotics out of the box yet (Kober, Bagnell & Peters 2013).\nThe present work has been motivated for this lack of practical, task-independent RL mechanisms for real robots, and it contributes a core method suitable for learning multiple tasks, although possibly non-optimally. This core method intends to avoid the use of representations, prior knowledge and models, and to be extendable with most advanced RL techniques. We also present here a study of the performance of our core RL solution compared to combinations of basic RL algorithms, i.e., those updating their Q-values without using approximators and models, and also with several action selection techniques. We have performed empirical comparisons of the learning processes in different robotic tasks. At this state of our research, only the tabular case of RL with low-dimensional state spaces (easy hand-crafted feature representations) has been addressed, leaving generalization and function approximators, needed for higher-dimensional tasks, for future work.\nMore concretely, our approach combines the recent true online SARSA(\u03bb) algorithm (TOSL) (van Seijen & Sutton 2014) with a novel action selection technique. That combination outperforms the state-of-the-art RL methods for multiple low-dimensional robotic tasks. In particular, our action selection technique, called QBIASed Softmax Regression (QBIASSR), has a relevant role in reducing the effort of tuning the method for different tasks; it has been developed after observation of the learning processes in a realistic robotic simulator, especially when the robots reach new states that were closely related to already explored ones, something that occurs in many applications. QBIASSR copes with the information of those related states in a simple and intuitive way, using information from previous experiences to minimize exploration and therefore achieving good learning results independently of the particular task. Our contribution is completed with a new RL software framework for robotics called RL-ROBOT, developed from scratch with the intention of easing the inclusion of new tasks for robotics researchers. It is also useful as a hands-on tool for beginners.\nThe structure of the paper is summarized as follows: section 2 provides a brief introduction to RL and the state of the art of its application to robotics. Our approach is described in section 3, that deals with both the combination of already existent techniques and the QBIASSR algorithm. Section 4 describes the RL-ROBOT software framework implemented for the simulated and real experiments shown in section 5. Finally, results and future work are summarized in section 6."}, {"heading": "2 Background and related work", "text": "In this section we provide a brief summary of the core RL algorithms related to this work and their application to robotics."}, {"heading": "2.1 Reinforcement learning", "text": "The autonomous learning concept in robotics dates back to Alan Turing\u2019s idea of having robots that learn in a way similar to children (Turing 1950). This evolved to the modern concept of developmental robotics (Lungarella, Metta, Pfeifer & Sandini 2003), a today still emergent paradigm analogue to the one of mental development in human psychology. In autonomous learning, mechanisms for decision-making under uncertainty are an important and increasingly popular approach. They represent cognitive processes capable of selecting a sequence of actions that are expected to lead to a specific outcome. Markov decision processes (MDP) (Murphy 2002) are the most exploited paradigm in this sense. They are dynamic Bayesian networks whose nodes define system states and whose arcs define actions along with their associated rewards and probability of occurrence. Formally, an MDP is a tuple (S , A, T , R), where S is a finite set of states, A a finite set of actions, T the state transition function, and R the reward function, defined as R : (S \u00d7 A\u00d7 S)\u2192 R. An important concept in MDPs is the one of policy, a function \u03c0 : S \u2192 A that defines the action a to execute when the agent is in state s. The term policy value or V indicates the goodness of a policy measured through some definition of the expected reward when it is executed. Most RL problems use the total expected discounted reward gathered after infinite steps of the decision process as the policy value, thus decreasing the importance of future rewards as the agent moves forward in time. The expected total reward from taking a specific action in a given state is defined then as:\nQ\u03c0(s, a) = \u2211\ns\u2032\u2208succ(s)\nT (s, a, s \u2032) \u00b7 E [R(s, a, s \u2032)]\n+ \u2211\ns\u2032\u2208succ(s)\n\u03b3 \u00b7 T (s, a, s \u2032) \u00b7 V\u03c0(s \u2032) (1)\nbeing \u03b3 \u2208 (0, 1) the discount rate and succ(s) the set of states that can be reached from state s. Then, V (s) = maxaQ(s, a).\nWith those definitions, Bellman equations (Bellman 1956) can be used recursively for improving an arbitrary initial policy until it converges to the optimal one (the one with greatest value). A classical algorithm for finding optimal policies through Bellman equations is value iteration, which computes Qk(s, a) and Vk(s) = maxaQk(s, a) incrementally in every step k.\nRL algorithms address the problem that arises in MDPs when no information about the transition function T (s, a, s \u2032) is given, but can be estimated from the real system by making observations. In particular, Q-learning (Watkins 1989) is one of the most practical algorithms employed in RL; it belongs to the class of temporal difference (TD) learning methods, which combine several\naspects of Monte Carlo and supervised programming for handling delayed rewards. Equation 2 represents the general form of Q-learning, used in this work as the algorithm of reference:\nQk(s, a) = Qk\u22121(s, a) + \u03b1k \u00b7 \u03b4k (2)\nwhere \u03b1k is the learning rate \u2208 (0, 1), and \u03b4k the TD error, defined as:\n\u03b4k = R + \u03b3 \u00b7 Vk\u22121(s \u2032)\u2212 Qk\u22121(s, a) (3)\nAlgorithm 1: Q-learning\n1 for every learning step k do 2 select new action a (exploration strategy) 3 execute a (wait step-time if needed) 4 observe reached state s \u2032 and get reward R 5 update Q(s, a):\n\u03b4k \u2190 R + \u03b3 \u00b7 Vk\u22121(s \u2032)\u2212 Qk\u22121(s, a) Qk(s, a)\u2190 Qk\u22121(s, a) + \u03b1k \u00b7 \u03b4k\n6 Vk(s) = maxaQk(s, a) 7 s \u2190 s \u2032"}, {"heading": "8 end", "text": "The success of Q-learning (in pseudocode in algorithm 1), as well as of most RL methods, depends on the accurate choice of the parameters \u03b1 and \u03b3, along with a set of suitable rewards R(s, a, s \u2032), that define the task to learn, and an action selection strategy. The latter refers us to the exploitation-exploration dilemma, which consists in deciding whether the agent should exploit its current learned policy or explore other actions at each learning step.\nA practical upgrade of Q-learning came with SARSA (Rummery & Niranjan 1994), which updates the Q-values for the action the agent will execute in the next learning step instead of the optimal action learned so far. Hence a\u2032, the action to perform in the next step, must also be selected before updating Q(s, a). The TD error in this case is:\n\u03b4k = R + \u03b3 \u00b7 Qk\u22121(s \u2032, a\u2032)\u2212 Qk\u22121(s, a) (4)\nSARSA often reduces the number of steps needed for learning a task, and it also avoids policies close to large negative rewards, which could harm a real robot.\nAnother mechanism widely used for improving RL is eligibility traces (ET) (Klopf 1972), (Kaelbling, Littman & Moore 1996), (Sutton & Barto 1998) and (Lin 1992), and its variant replacing traces (Singh & Sutton 1996). Based on a time decaying memory trace, this mechanism is able to simultaneously update many Q-values in each step, accelerating the learning process: when an agent using ET reaches a state associated with a large reward, the previously visited Q-values will receive a decaying fraction of this reward, the more recent the higher the reward; this encourages the execution of high-rewarded sequences of actions in future decisions. On-policy RL algorithms such as SARSA are directly compatible with ET, resulting in the mechanistic or backward view of TD(\u03bb) (Sutton &\nBarto 1998); The ET factor \u03bb \u2208 (0, 1) must be accurately set to define the fraction of the reward to feedback. A recent improvement to TD(\u03bb) came with true online TD learning (van Seijen & Sutton 2014), which addresses the bias-variance dilemma of the former. Particularly, the true online SARSA(\u03bb) algorithm (TOSL) has demonstrated having both better theoretical properties and empirically more efficient learning processes than traditional TD(\u03bb) algorithms (van Seijen, Mahmood, Pilarski, Machado & Sutton 2015).\nSo far the algorithms mentioned are derived from the classical value iteration, but there are other effective TDbased algorithms, such as actor-critic methods (Barto, Sutton & Anderson 1983), R-learning (Schwartz 1993), and those based on policy iteration. We found them less suitable as practical core RL methods for multiple tasks since they explicitly bias the learning process by adding detailed knowledge of the task. For example, policy iteration is often tuned to avoid extensive searches in the policy space in order to guarantee a good performance of the learning process. Other contributions that also fall out of the scope of this work include the combinations of RL algorithms with other mechanisms and function approximators that help with high-dimensional tasks, such as those from machine learning (e.g., Monte Carlo methods, dynamic programming, and exhaustive search), hierarchical RL, batch RL, neural RL, or that extend the problem, such as partially observable Markov decision processes (POMDP), policy gradient RL, inverse RL, bioinspired RL, etc. (Kaelbling et al. 1996) and (Wiering & Van Otterlo 2012). Although in many works learning and exploiting a model of the environment have proved to boost the learning process (Campbell, Givigi & Schwartz 2016) and (Sutton, Szepesva\u0301ri, Geramifard & Bowling 2012), like in prioritized sweeping (Moore & Atkeson 1993), model-based RL has not been included in this work so as to focus on the study of generic modelfree algorithms, that nevertheless can be easily extended to model-based ones.\nA careful review of publications reveals the difficulty of RL convergence to quasi-optimal solutions still today: the learning process often results incomplete or falls into local minima when the algorithm parameters are not properly tuned. The problem worsens when trying to solve different tasks (Kaelbling et al. 1996), (Sutton & Barto 1998), (Szepesva\u0301ri 2010) and (Wiering & Van Otterlo 2012). An adequate approach to the exploration-exploitation dilemma (Thrun 1992), (Wiering 1999), (Tokic & Palm 2011), (Lopes, Lang, Toussaint & Oudeyer 2012), (Hester, Lopes & Stone 2013) and (Pecka & Svoboda 2014) is also proved to be essential for the performance of the learning process, especially for practical applications.\nFinally, a noticeable improvement in RL have come with the recent works in deep reinforcement learning (DRL) (Mnih, Kavukcuoglu, Silver, Graves, Antonoglou, Wierstra & Riedmiller 2013), (Lillicrap, Hunt, Pritzel, Heess, Erez, Tassa, Silver & Wierstra 2015), (Mnih, Badia, Mirza, Graves, Lillicrap, Harley, Silver & Kavukcuoglu 2016), (Stadie, Levine & Abbeel 2015), (Schaul, Quan, Antonoglou & Silver 2015) and (Osband, Blundell, Pritzel\n& Van Roy 2016), which successfully integrate the advantages of deep learning with RL, leading to effective learning processes for high-dimensional tasks. Integrating such approaches in our core algorithm has been planned for future work for the reasons commented already."}, {"heading": "2.2 Reinforcement learning in robotics", "text": "Today the efficacy of RL algorithms has been demonstrated in many different fields, such as game theory, control engineering, statistics, or even robotics when toy models or very low-realistic robot simulators are used (Sutton & Barto 1998), (Kaelbling et al. 1996), (Wiering & Van Otterlo 2012) and (Kober et al. 2013). RL researchers can also resort to more advanced techniques to deal with the limitations arising with the practical aspects of RL, like the curse of dimensionality (Bellman 1957).\nHowever, when RL is applied to accurate physical realistic simulators or to real robots, we must face additional issues that are specific of this area, such as the curse of real-world samples (Kober et al. 2013), which obstruct the execution of RL-based methods, often making them unviable. Moreover, as RL in robotics is based on the environment-robot interaction, these difficulties are increased by the constraints posed by real-world time, often neglected in simulated scenarios where high number of steps and episodes are possible. Despite these limitations, many works have implemented RL-based methods for learning complex but particular robotic tasks, overcoming some of these problems (Lin 1992), (Smart & Kaelbling 2002), (Gaskett 2002), (Abbeel, Coates & Ng 2010), (Yen & Hickey 2002), (Peters, Vijayakumar & Schaal 2003), (Ng, Coates, Diel, Ganapathi, Schulte, Tse, Berger & Liang 2006), (Wicaksono 2011), (Degris, Pilarski & Sutton 2012), (Hester, Quinlan & Stone 2012), (Navarro-Guerrero, Weber, Schroeter & Wermter 2012), (Hester & Stone 2013), (Kober et al. 2013), (Kormushev, Calinon & Caldwell 2013), (Vidal, Rodr\u0301\u0131guez, Gonza\u0301lez & Regueiro 2013), (Kober 2014), (Deisenroth, Fox & Rasmussen 2015) and (Garc\u0301\u0131a & Ferna\u0301ndez 2015). At the time this work was in progress the first studies of DRL in robotics began to appear (Zhang, Leitner, Milford, Upcroft & Corke 2015) and (Sigaud & Droniou 2016), addressing some high-dimensional tasks, usually with visual perception only.\nThe main conclusion to be drawn from this is that the complexity of RL in robotics requires the learning method to be complemented through advanced representation, prior knowledge, and models in order to make the problem tractable (Kober et al. 2013); this biases the learning process with knowledge from the task, resulting in a task-dependent learning method. Although some studies have searched for techniques adaptable to multiple tasks (Kober 2014), they usually rely on closely related ones, sometimes leading to poor performance."}, {"heading": "3 Reducing the task depen-", "text": "dency: Overview of true online SARSA(\u03bb) with Q-biased softmax action selection\nAn RL problem, defined as a set of states, actions, and rewards, looks abstract and task-independent by itself; however solving a task in a RL approach (i.e., converging to a near-optimal value function), depends on the structure of the unknown transition matrix, that is, on how easy is to explore all interesting states frequently enough. Therefore, our efforts to decrease the dependence on the particular task have been focused on accelerating the estimation of the Q-values for relevant states-actions pair that sometimes are difficult to explore in that task.\nFirstly we have carried out a set of experiments to find a learning method among the existing RL techniques that has good properties when confronted with different tasks. The RL-ROBOT software framework, that will be described in depth in section 4, has been used together with the very realistic V-REP robotic simulator (Rohmer, Singh & Freese 2013) to conduct these comparative experiments. The methods shown in table 1 have been the ones evaluated for different robotic tasks, being the resulting average reward per step used to measure the performance of the learning processes for all of them. The setups and experiments of this preliminary stage will be described in more detail in sections 4 and 5 along with the rest of experiments.\nThese tests show that true online SARSA(\u03bb) (TOSL) is the best algorithm, with parameters \u03bb = 0.9, \u03b1 = 0.1, and \u03b3 = 0.9 that work well for different tasks; the exploration strategy with best results is softmax action selection with a Boltzmann distribution (equation 5), with T = 1.\nP(a) = e\nQ(s, a)\nT\n\u2211 i e Q(s, ai ) T\n(5)\nSince eligibility traces (ET) update the value function in more states than the current one, therefore favoring the estimation of V even when there are states that are difficult to explore frequently, we have enriched the method of the first experiments with a practical low-computational cost version of ET. The update rule of SARSA with ET, SARSA(\u03bb), is (compare with equation 2):\nQk(s, a) = Qk\u22121(s, a) + \u03b1 \u00b7 \u03b4k \u00b7 ek(s, a) (6)\nwhere ek(s, a) is the trace for Q(s, a), being increased or set to 1 (replacing traces) whenever the state-action pair is explored, and decreased in every unexplored step as:\nek(s, a) = \u03b3 \u00b7 \u03bb \u00b7 ek\u22121(s, a) (7)\nFor a practical implementation, instead of updating all the Q-values at each learning step with their respective traces, a reduced ET register (RETR) has been defined that contains only a subset of traces with ek(s, a) \u2265 threshold .\nWe have empirically selected threshold \u2265 0.01, i.e, those traces contributing less than 1% of the current stateaction pair (replacing traces case with e = 1) were discarded. The number of steps n elapsed from the last visit of a particular Q-value until its trace become negligible can be obtained from equation 7 as:\n(\u03b3 \u00b7 \u03bb)n > threshold \u21d2 n < log(threshold) log(\u03b3 \u00b7 \u03bb)\n(8)\nApplying the values resulting from the preliminary tests to equation 8 with threshold = 0.01 results in n < 21.85, i.e., RETR will be formed by the most recent 21 traces that will update Q in each learning step, besides the current state. A comparative test between standard ET and reduced ET with threshold = 0.01 exhibits no differences in their learning performances, as shown in section 5.\nBy observing the behavior of the robot on the simulator in these preliminary tests, we detected that the learning process was highly inefficient whenever the agent reached a new state with strong resemblance to already explored states; the robot had to learn from scratch an accurate action for that new state, or, in other words, intensive exploration was performed instead of trying suitable actions already learned in similar situations, resulting in an inaccurate and disappointing behavior from the human point of view. In order to avoid the use of task-dependent tuning for addressing this issue, we have devised the next contribution.\nWhen designing a robotic task for a discrete state-space RL, physical input variables involved in the learning process are usually identified, discretized, and hand-crafted before being mixed to generate structured states (structured states are thus states composed of a number of parts, each one representing an input variable (Moore & Atkeson 1993)). Fortunately, by having identified these variables, areas of the Q matrix associated to one or several combined set of them can be used for deciding what to do when an unexplored or poor-explored state is reached, i.e., we can use the information from states with similar values of these variables. This intuition has led us to the novel Q-biased softmax regression (QBIASSR).\nIn QBIASSR, when selecting an action to execute, instead of applying a softmax directly to the values of Q(s) for the current state, this softmax is performed over another, virtual vector Q(s)biased , defined as:\nQ(s)biased = Q(s) + bias(s) (9)\nbeing bias(s) a vector resulting from processing the values of other states of Q that can be similar to s. This bias is calculated at each step of the learning process using averaged information from sets of states that share some structure with the current state s. In this way, the\nprobabilities of choosing each action from s will be biased by the previous experience obtained in similar states.\nMany approaches can be used to define a suitable bias(s), ranging from the processing of all the information of Q prioritizing states with closer features to s, to use part of the state structure that has values similar to s; even being assisted by a hierarchy of sets of these parts. In our work we have defined bias(s) empirically as the averaged contribution of subsets of values of Q. This turns out to be computationally simple and leads to the good results shown in section 5. Each subset results from removing each input variable from the state space S and averaging the Q-values for those states with equal values for the remaining input variables. A precise definition of QBIASSR is shown in algorithm 2.\nAlgorithm 2: Q-biased softmax regression (QBIASSR)\n1 A = {a1, a2, ...ap} . the set of actions 2 S = {s1, s2, ...sm} . the set of states 3 X = {x1, x2, ...xn} . the vector of input variables 4 X (s \u2208 S) = {x1(s), x2(s), ...xn(s)} . values of input\nvariables for the state s 5 SS(s \u2208 S , xi \u2208 X ) = subset of states ss \u2208 S with\nxj(ss) = xj(s) \u2200j \u2208 [1, 2, ...n] 6= i 6 SQ(s \u2208 S , xi \u2208 X ) = subset of Q for SS(s, xi ) 7 Agent in state s must select and action a\u2032 given Q 8 forall xi \u2208 x do 9 bias(s, xi )\u2190 avg(SQ(s, xi )) \u2200ss \u2208 SS(s, xi ) .\nresulting in a vector with same size of Q(s) = [Q(s, a1), Q(s, a2), ...Q(s, ap)]\n10 end 11 bias(s)\u2190 1/n \u00b7 \u2211n i=0 bias(s, xi ) 12 Q(s)biased \u2190 Q(s) + bias(s) 13 a\u2032 \u2190 softmax selection(Qbiased , Temperature)\nAs an example, consider a simple mobile robotic agent with four discretized input variables {X , Y , \u03b8, d}, with X \u2208 {0, 1}, Y \u2208 {0, 1}, \u03b8 \u2208 {0, 90,\u221290}, and d \u2208 {F , T}, thus composing 24 structured states. The agent has one output variable MOV \u2208 {advance, spin left, spin right} representing the available actions. If the robot reaches an unexplored state s with (X , Y , \u03b8, d) = (1, 1, 90, T ) being Q(s) = (0, 0, 0), a classical softmax will use an uniform distribution for selecting each available action since the state is unexplored. On the contrary, QBIASSR will create a biased distribution, involving those states with at least 3 values of (X , Y , \u03b8, d) equal\nto (1, 1, 90, T ), as follows:\nbiasx(s) = Q(0,1,90,T ) + Q(1,1,90,T )\n2\nbiasy (s) = Q(1,0,90,T ) + Q(1,1,90,T )\n2\nbias\u03b8(s) = Q(1,1,0,T ) + Q(1,1,90,T ) + Q(1,1,\u221290,T )\n3\nbiasd(s) = Q(1,1,90,T ) + Q(1,1,90,F )\n2\nbias(s) = biasx(s) + biasy (s) + bias\u03b8(s) + biasd(s)\n4\nFor assessing the goodness of our approach, several experimental comparatives between three settings, Q-learning with softmax regression (Q+SR), true online SARSA(\u03bb) with softmax regression (TOSL+SR), and true online SARSA(\u03bb) with Q-biased softmax regression (TOSL+QBIASSR), have been carried out. The experiments include wandering, 2D navigation, and 3D arm motion tasks, performed in sample-modeled simulations, V-REP simulations, and real-robot implementations. The setups and results will be described in sections 4 and 5. This comparative study has proven that QBIASSR outperforms classical softmax action selection by improving the learning process. Neither convergence issues nor incompatibilities of this approach with approximation functions or other advanced techniques are expected, since the Q matrix remains updated with a correct algorithm. The computational cost of QBIASSR will be discussed in section 5.\nUnfortunately, preliminary tests with TOSL+QBIASSR in V-REP, although improving TOSL+SR, have also evidenced a known issue: the chance of falling in cyclic sequences of states before exploring the actions leading to the goal, preventing the robot to efficiently learn the desired task. We believe this is more evident in QBIASSR since it reaches useful sequences of actions sooner than less efficient algorithms; cyclic sequences are also present with softmax occasionally.\nA simple ad-hoc (but task-independent) controller called low-reward-loop evasion (LRLE) has been introduced to solve this problem; it detects whether the agent is selecting low-reward cyclic sequences of actions, and acts by increasing the temperature of the softmax regression, thus favouring the selection of other actions out of the detected low-rewarded sequences. Algorithm 3 describes the implementation of LRLE.\nFinally, since the probabilities resulting from the softmax regression are affected by the magnitude of the Q-values involved (which, in turn, come form rewards) and our goal is to build a RL method independent on the hand-crafted parameters for multiple tasks, we also propose to apply the action selection over a normalized vector. We have employed the theoretical maximum value of Q as a reference for such normalization, being the normalized vector:\nQ(s)normalized = Q(s) \u00b7 100\nQmax (10)\nFor any temporal difference error seen above, Qmax can\nAlgorithm 3: Low-reward-loop evasion (LRLE)\n1 T : Boltzmann temperature 2 retr : reduced eligibility traces register (states) 3 seq: FIFO queue of recently visited states. size(seq)\n= size(retr) limited to [4, states/4] 4 rew : FIFO queue of recently rewards obtained 5 Before every softmax selection: 6 Push the current state s into seq 7 if s is redundant in seq then 8 a = True . s was visited recently 9 Push the current state R into rew 10 if avg(rew) < 0 then 11 b = True . low reward sequence detected 12 u seq = seq without repeated states 13 redundancy = size(seq) / size(u seq) 14 if redundancy > 2 then 15 c = True . repeated behavior detected 16 if a and b and c then 17 T = T + 0.25 \u00b7 redundancy . evasion rule 18 else 19 T = 1\nbe obtained from equation 2 by calculating the limit of Q for infinite steps, resulting in equation 11.\nQmax = Rmax 1\u2212 \u03b3\n(11)\nAfter that, the learning process will not be affected by the absolute hand-crafted rewards, which contributes to the independence between the decision-making process and the task to learn."}, {"heading": "4 Implementation: the RL-", "text": "ROBOT software framework\nFor this work we have developed a RL Python-based software framework, which is focused on performing experiments with a variety of robots and environments for different robotic tasks, and that includes TOSL and QBIASSR along with other standard RL algorithms and action selection techniques. The framework, called RL-ROBOT, can be used stand-alone, with the physically realistic robot simulator V-REP, or with the Robot Operating System (ROS) (Quigley, Conley, Gerkey, Faust, Foote, Leibs, Wheeler & Ng 2009), providing then a link to real robots.\nRelated works in the RL software arena include several successful tools such as RL-Glue (Tanner & White 2009), RLPy (Geramifard, Dann, Klein, Dabney & How 2015), and the robot-oriented rl-texplore-ros-pkg (Hester & Stone 2013), widely used for testing RL algorithms and generalization approaches in several environments. The recent advances in deep learning and deep reinforcement learning (DRL) with software libraries such as Tensorflow (Abadi, Agarwal, Barham, Brevdo, Chen, Citro, Corrado, Davis, Dean, Devin, Ghemawat, Goodfellow, Harp, Irving, Isard, Jia, Jozefowicz, Kaiser, Kudlur, Levenberg, Mane\u0301, Monga, Moore, Murray, Olah, Schuster, Shlens,\nSteiner, Sutskever, Talwar, Tucker, Vanhoucke, Vasudevan, Vie\u0301gas, Vinyals, Warden, Wattenberg, Wicke, Yu & Zheng 2015) has also accelerated the development of DRL applications for high-dimensional tasks, mostly based on learning from the input images of a camera, trained by teacher, and sometimes transferred from simulations to real robots. A recent notable contribution, released while this work was in progress, was OpenAI Gym (Brockman, Cheung, Pettersson, Schneider, Schulman, Tang & Zaremba 2016), which offers a growing suite of environments for RL, including robotic simulations.\nRL-ROBOT provides a framework for robotics researchers that have minimum RL knowledge, and it is ready to perform experiments just by setting their parameters and creating new tasks. A single module serves to specify the parameters of the experiment, including the type of environment, task id, speed rate, repetitions, episodes, steps, algorithm id and its parameters, action selection strategy id, output options (files, charts), etc. Each task module contains the definition of input variables or features (later codified as states automatically), output variables (actions), set of rewards, and the physical devices of the robot (laser rangefinders, motors, etc.). The definition of input variables instead of states, a distinctive feature of our framework, besides of easing the implementation of the task, is used by the QBIASSR algorithm to determine which similar states of Q will influence the decision-making process of a specific state s.\nAnother feature of RL-ROBOT that sets it aside existing RL frameworks is the independence between the abstract learner, portrayed by the artificial agent, and the perceptual robot. We consider that any RL task must define the information of the later; thus a change in the robot, a device, or any input-output variable results in a different task. At the beginning of the learning process, the agent automatically structures itself to connect the learning process with the desired task, no matter the RL algorithm, the action selection technique, the environment, or any hand-crafted definition of the task to learn. The general architecture of RL-ROBOT is summarized in figure 1.\nRL-ROBOT also includes two built-in generic robots: a mobile base with a laser rangefinder, and a 3DOF arm. They can be used separately or together as a single robot\n(a mobile manipulator). Modules V-REP sim and ROS node implement links with V-REP and ROS, only executed if required, thus connecting our framework with both realistic simulators and real robots.\nThe specific robot that has been used for our V-REP simulations is a Pioneer 3-DX mobile base with 8 laser pointers and a WidowX arm (figure 2). These models have been employed for the simulated experiments of section 5. Since communications with the simulator are via TCP/IP socket using the V-REP remote API, some additions were needed to avoid the influence of network delays and to guarantee the reproducibility of the learning processes in different machines; they include threaded rendering, streaming sensory values, and a limited speed-up ratio of 3 (minimum: Intel Core i3-3110M processor). Physical parameters and scenarios were also tuned to ensure reproducibility.\nA ROS node is automatically launched only when a real robot is required. The node is subscribed to odom and laser scan topics, and publishes to cmd vel topic. Modules V-REP sim and ROS node can be extended with minimal modifications to connect RL-ROBOT with other robots, as well as other environments implemented in Python.\nThree sets of tasks are included in the framework; they have been used for the experiments of section 5:\n(i) wandering (non-episodic): the robot learns to wander avoiding obstacles. The input variables are a reduced set of laser measures around the robot, each distance being discretized within a range. The two output variables are the speeds of the wheels. Positive rewards are received if the robot advances above a distance threshold and negative ones if it collides (where frontal collisions yield a highly negative reward).\n(ii) 2D mobile navigation (episodic): the robot must reach a static point in the scenario. The input variables here extend the wandering ones with the discretized pose (X , Y , \u03b8) of the robot. Rewards maintain the colliding penalties and include positive and negative rewards according to the distance approached to or moved away from the target, respectively.\n(iii) 3D arm motion (episodic): a 3DOF arm must reach an object on a table. The input variables are the\n(X , Y , Z ) positions of the gripper and the object. The outputs are the speeds of up to 3 joints. Positive and negative rewards are received if the gripper approaches to or moves away from the object, respectively.\nThe particular tasks implemented are listed in table 2, while figure 3 shows the scenarios designed in V-REP for the above tasks. RL-ROBOT has been released as an open source project, Python PEP8 style, available on Github (Mart\u0301\u0131nez-Tenor 2016)."}, {"heading": "5 Experiments and discussion", "text": "The experiments of this paper have been conducted in RL-ROBOT with both simulated and real robots. Periods of time of up to 60 minutes were used in simulated experiments so as to be reproducible on real robots. A learning curve showing the evolution of the average reward obtained over time (steps) has been found suitable as both a stable measurement of the performance of the learning process and a reliable indicator for comparing different techniques. For episodic tasks, the evolution of the average reward of the last episode was used as indicator instead of the classical evolution per episode, since the number of episodes required were low. The results include the average learning curve of several repetitions, along with an analysis of variance and a post-hoc Tukey test (Tukey 1949) for each task in order to assess the significance of the conclusions."}, {"heading": "5.1 Sample-modeled and V-REP simulated experiments", "text": "Simulated experiments have been performed for both sample models and realistic simulators. Sample-modeled experiments are based on Markovian models consisting of T (s, a, s \u2032) and R(s, a, s \u2032) that are built offline after exploring the tasks in the V-REP simulator. On the contrary, in the realistic simulated experiments, each learning step has been performed in one second of simulation time directly in V-REP. The total time for each learning process ranges from 1 to 60 minutes (3600 steps) according to the task to learn.\nThe preliminary tests described in section 3 have been performed to obtain a basic algorithm valid for multiple tasks, chosen from existing RL ones; this led to TOSL, as it has been explained. Both sample-modeled and V-REP simulations have been used with multiple tasks in that stage. Figure 4 shows some results that exemplify the selection of this algorithm and its parameter \u03bb.\nOnce TOSL is taken as the basic core algorithm, the rest of our simulated experiments have been focused on the performance of true online SARSA(\u03bb) with Qbiased softmax regression (TOSL+QBIASSR) in comparison to true online SARSA(\u03bb) with softmax regression (TOSL+SR) and Q-learning with softmax regression (Q+SR). Two sets of experiments have been carried out here: offline sample-modeled simulations and V-REP simulations. Three algorithms have been evaluated for the\ntasks described in section 4, with different number of states and actions, inside the scenarios that were shown in figure 3.\nThe results of the learning processes in Markovian sample models have been averaged from 1000 repetitions for wandering and 3D arm motion, and from 200 repetitions for 2D mobile navigation. Figure 5 shows the learning curves for a set of sample-modeled tests. Experiments involving more than 2K states where not performed due to memory limitations when creating the reward function from datasets with variable rewards. The results show that TOSL+QBIASSR only outperformed TOSL+SR in two of the four tasks. Different sample models extracted from V-REP were tested with unexpected diverse results. This led us to focus on realistic V-REP simulations instead of the sample-modeled ones.\nThe learning experiments with the non-Markovian realistic V-REP simulations gave accurate results. Besides, without the above memory restriction, we could extend the study to the tasks wander-4K and 3D-arm-4K. The resulting learning curves are shown in figures 6 and 7, where it is shown how the novel TOSL+QBIASSR outperforms TOSL+SR in five of the six tasks tested, never affecting negatively any learning process, nor even the simplest wandering task, where better results than TOSL+SR were unlikely.\nHowever, an analysis of variance of the average reward obtained in each repetition (table 4) and a post-hoc Tukey test (table 5) show that the effect on the learning process of QBIASSR over SR is significant (p<0.01) only for two of the six tasks: wander-1K and wander-4K. This is due to the large variance existing in non-wandering tasks (the exploration before getting the high-rewarded goal produces a lot of uncertainty in episodic tasks). Other tasks with smaller variance (i.e., wandering) lead to a clear improvement of QBIASSR in the learning process, shown by the differences in the average curves appreciable in figure 6. We also can confirm that most sample-modeled learning simulations performed worse than the realistic ones, especially the basic Q-learning algorithm, showing poor learning even in the most simple task. This behavior suggests that the Markovian models used in the first place were too simple to accurately represent real robotic environments, and also that non-Markovian real-world and physically realistic simulated environments offer more suitable scenarios than Markovian models for robotic tasks."}, {"heading": "5.2 Real robot experiments", "text": "The next set of experiments have been conducted with the Giraff robot shown in figure 8, that is equipped with two differential drive and two caster wheels, and a Hokuyo laser rangefinder. The same tasks designed for the simulated mobile robot can be learned by Giraff just by specifying the physical parameters of the task. RL-ROBOT launches the ROS node in this case, giving access to the real sensors and actuators.\nGiraff must learn the task wander-1K in a 1.5x1m hexagonal scenario. Up to 20 learning processes of 30 minutes each have been executed for TOSL+QBIASSR, TOSL+SR, and Q+SR. The results shown in figure 9 highlight the differences between the evaluated methods.\nThe learning curve of TOSL+QBIASSR presents a continuous drop (collisions) during the fist 3 minutes (180 steps), after which we consider the robot has learned to perform the task. Moreover, the slope of the average reward curve at the last steps suggests that in 3 minutes, TOSL+QBIASSR learns to wander more effectively than the rest of the algorithms do after 30 minutes. Q+SR, for instance, results in a much flatter learning process. The analysis of variance (table 6) indicates that the effect of the RL method executed by Giraff is significant, F (2, 57) = 16.36, p = 2 \u00b7 10\u22126. A Tukey post-hoc test (table 7) reveals that TOSL+QBIASSR significantly overcomes TOSL+SR at p<0.01, resulting unexpectedly better than the improvement of TOSL over Q-learning."}, {"heading": "5.3 Reduced eligibility traces", "text": "A comparison test between the reduced version of eligibility traces (ET) proposed in section 3 and standard ET has also been performed in sample-modeled simulation to verify that the reduced ET used in this work has a negligible effect over the learning process. This conclusion is clearly shown in figure 10."}, {"heading": "5.4 Computational cost", "text": "Finally, a last set of tests has been carried out to measure the computational cost of the algorithms used in this work. For this purpose the tests were executed in samplemodeled simulation for the wander-1K task. Different RL implementations were tested, executing 30 learning process of 3600 steps each. The measurement of choice to assess the computational impact of the learning algorithms is the average CPU time consumed in each learning step. The results, obtained with RL-ROBOT in an Intel\nCore i5-4460 processor under Ubuntu 64 bits, are shown in table 3. The execution times obtained for TOSL, using the reduced ET discussed in section 3, are up to 17 times faster than the standard ET implementation, without affecting the performance of the learning algorithm; they even have the same order of magnitude as the reference times of Q-learning and SARSA, which we consider\nnegligible for RL applications. The computational cost of TOSL (reduced ET) with QBIASSR action selection also results in the same order of magnitude as the above methods. Though QBIASSR uses extensive information from many states, its reduced computational impact has been achieved due to the fact that all the structure of the sets of states biasing a particular state can be generated just by knowing the input variables involved. This allows an efficient implementation, computing most of the QBIASSR algorithm beforehand, and obtaining a delay of \u2248 1 second before beginning the learning process, measured in the same conditions as before. For real-time robotic applications, even non-reduced ET could be used with minimal impact on the learning process, since the waiting time for reaching a new state is usually much longer than the one needed for updating Q for all the states.\nTable 3: Computational cost. Sample-modeled wander-1K\nRL algorithm Reduced ET Avg CPU time per step (s) Total CPU time (3600 steps) (s)\nQ+SR - 0.19 \u00b7 10\u22123 0.70 SARSA+SR - 0.20 \u00b7 10\u22123 0.72 SARSA(\u03bb)+SR Yes 0.31 \u00b7 10\u22123 1.13 TOSL+SR Yes 0.31 \u00b7 10\u22123 1.13 TOSL+QBIASSR Yes 0.45 \u00b7 10\u22123 1.62 TOSL+SR No 5.32 \u00b7 10\u22123 19.17"}, {"heading": "6 Conclusions and future work", "text": "We have demonstrated in this paper that state-of-theart value-iteration-based RL algorithms that evolved from classical Q-learning, such as TOSL, can be effective when applied in multiple real tasks, something still unachieved in robotics. For that, we have found suitable common,\nFigure 8: Giraff robot in the wandering task scenario.\n0 300 600 900 1200 1500 1800\nSTEP\n0\n1\n2\n3\n4\nA V\nE R\nA G\nE R\nE W\nA R\nD\nGiraff wander-1K (x20)\nTOSL+QBIASSR TOSL+SR Q+SR\nFigure 9: Giraff robot. TOSL+QBIASSR vs TOSL+SR vs Q+SR learning wander-1K task.\nbasic parameters for TOSL, and we have introduced a novel exploration technique, QBIASSR, which improves the classical softmax action selection. QBIASSR takes advantage of the physical input variables used by the robot, thus the action selection can be influenced by other previously visited states with similar inputs. A complementary low-reward-loop evasion algorithm has been added to prevent local optima sequences. The combined algorithm TOSL+QBIASSR has the advantage of being both task-independent and compatible with most advanced RL techniques for improving learning in higher dimensional tasks, with a negligible computational cost.\nA comparative study with other RL techniques has\nbeen performed, including both non-episodic and episodic robotic tasks. Realistic simulations and real robot experiments reveal that the learning processes with the novel TOSL+QBIASSR outperform those with TOSL+SR in most tasks, being equivalent to TOSL+SR in the worst case scenario. An additional result has been that Markovian sample-modeled learning processes are unrealistic for robotic tasks because of the gap of the performance detected between V-REP simulations and the models extracted from them.\nThe RL-ROBOT software framework has also been introduced in this paper. It is an open source project designed to ease the implementation of new tasks for both simulated and real robots, including V-REP and ROS interfaces. Just by defining the physical variables and parameters involved, each task provides structured perceptual information of the environment to the abstract agent regardless the learning method used. RL-ROBOT contributes a novel implementation that achieves independence between the abstract and perceptual aspects involved in RL in robotics.\nFuture work includes the addition of advanced techniques for boosting the learning process in robotics, e.g., by constructing a model (model-based RL), such as prioritized sweeping, by human interaction as teaching, and by transferring (Taylor & Stone 2009), (Barrett, Taylor & Stone 2010) and (Bianchi, Celiberto, Santos, Matsuura & de Mantaras 2015) from simulations to real robots. We also believe that these techniques will contribute to decrease the variance of the learning processes seen here, which sometimes have produced inconclusive results, especially in episodic tasks.\nTOSL+QBIASSR can be extended for more practical high-dimensional tasks as well, instead of the lowdimensional tasks shown here. Advanced generalization methods for RL include a wide variety of function approximators, techniques for continuous states and action spaces, Bayesian methods, etc. A suitable generalization exploiting the basis of QBIASSR could be hierarchical RL (Barto & Mahadevan 2003) and (Botvinick 2012), where complex tasks could be formed by adding more input variables to existing tasks. However, for maintaining a strong independence between the task and the RL method, we contemplate the recent advances of DRL as promising\ntechniques to extend this work to more complex robotic tasks.\nFinally, we plan to integrate the RL-ROBOT framework with the OpenAI gym toolkit, where TOSL+QBIASSR and the upcoming changes can be evaluated and compared for a wide variety of tasks.\nFunding\nThis work has been supported by the Spanish Government through the research project DPI2014-55826-R."}], "references": [{"title": "Autonomous helicopter aerobatics through apprenticeship learning", "author": ["P. Abbeel", "A. Coates", "A.Y. Ng"], "venue": "The International Journal of Robotics Research", "citeRegEx": "Abbeel et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Abbeel et al\\.", "year": 2010}, {"title": "Transfer learning for reinforcement learning on a physical robot, in \u2018Ninth International Conference on Autonomous Agents and Multiagent Systems-Adaptive Learning Agents Workshop (AAMAS-ALA)", "author": ["S. Barrett", "M.E. Taylor", "P. Stone"], "venue": null, "citeRegEx": "Barrett et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Barrett et al\\.", "year": 2010}, {"title": "Recent advances in hierarchical reinforcement learning", "author": ["A.G. Barto", "S. Mahadevan"], "venue": "Discrete Event Dynamic Systems", "citeRegEx": "Barto and Mahadevan,? \\Q2003\\E", "shortCiteRegEx": "Barto and Mahadevan", "year": 2003}, {"title": "Neuronlike adaptive elements that can solve difficult learning control problems", "author": ["A.G. Barto", "R.S. Sutton", "C.W. Anderson"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics", "citeRegEx": "Barto et al\\.,? \\Q1983\\E", "shortCiteRegEx": "Barto et al\\.", "year": 1983}, {"title": "Dynamic programming and Lagrange multipliers", "author": ["R. Bellman"], "venue": "Proceedings of the National Academy of Sciences", "citeRegEx": "Bellman,? \\Q1956\\E", "shortCiteRegEx": "Bellman", "year": 1956}, {"title": "Transferring knowledge as heuristics in reinforcement learning: A case-based approach", "author": ["R.A. Bianchi", "L.A. Celiberto", "P.E. Santos", "J.P. Matsuura", "R.L. de Mantaras"], "venue": "Artificial Intelligence", "citeRegEx": "Bianchi et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Bianchi et al\\.", "year": 2015}, {"title": "Hierarchical reinforcement learning and decision making", "author": ["M.M. Botvinick"], "venue": "Current Opinion in Neurobiology 22(6),", "citeRegEx": "Botvinick,? \\Q2012\\E", "shortCiteRegEx": "Botvinick", "year": 2012}, {"title": "OpenAI gym", "author": ["G. Brockman", "V. Cheung", "L. Pettersson", "J. Schneider", "J. Schulman", "J. Tang", "W. Zaremba"], "venue": null, "citeRegEx": "Brockman et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Brockman et al\\.", "year": 2016}, {"title": "Multiple model q-learning for stochastic asynchronous rewards", "author": ["J.S. Campbell", "S.N. Givigi", "H.M. Schwartz"], "venue": "Journal of Intelligent & Robotic Systems", "citeRegEx": "Campbell et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Campbell et al\\.", "year": 2016}, {"title": "Modelfree reinforcement learning with continuous action in practice, in \u20182012", "author": ["T. Degris", "P.M. Pilarski", "R.S. Sutton"], "venue": "American Control Conference (ACC)\u2019,", "citeRegEx": "Degris et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Degris et al\\.", "year": 2012}, {"title": "Gaussian processes for data-efficient learning in robotics and control", "author": ["M.P. Deisenroth", "D. Fox", "C.E. Rasmussen"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence", "citeRegEx": "Deisenroth et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Deisenroth et al\\.", "year": 2015}, {"title": "A comprehensive survey on safe reinforcement learning", "author": ["J. Gar\u0107\u0131a", "F. Fern\u00e1ndez"], "venue": "Journal of Machine Learning Research", "citeRegEx": "Gar\u0107\u0131a and Fern\u00e1ndez,? \\Q2015\\E", "shortCiteRegEx": "Gar\u0107\u0131a and Fern\u00e1ndez", "year": 2015}, {"title": "Q-Learning for Robot Control, PhD thesis, Research School of Information Sciences and Engineering. Department of Systems Engineering and The Australian National University", "author": ["C. Gaskett"], "venue": null, "citeRegEx": "Gaskett,? \\Q2002\\E", "shortCiteRegEx": "Gaskett", "year": 2002}, {"title": "Rlpy: A value-function-based reinforcement learning framework for education and research", "author": ["A. Geramifard", "C. Dann", "R.H. Klein", "W. Dabney", "J.P. How"], "venue": "Journal of Machine Learning Research", "citeRegEx": "Geramifard et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Geramifard et al\\.", "year": 2015}, {"title": "Learning exploration strategies in model-based reinforcement learning", "author": ["T. Hester", "M. Lopes", "P. Stone"], "venue": "in \u2018Proceedings of the 2013 International Conference on Autonomous Agents and Multiagent Systems\u2019,", "citeRegEx": "Hester et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Hester et al\\.", "year": 2013}, {"title": "Rtmba: A real-time model-based reinforcement learning architecture for robot control, in \u20182012", "author": ["T. Hester", "M. Quinlan", "P. Stone"], "venue": "IEEE International Conference on Robotics and Automation (ICRA),\u2019,", "citeRegEx": "Hester et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hester et al\\.", "year": 2012}, {"title": "Texplore: real-time sample-efficient reinforcement learning for robots", "author": ["T. Hester", "P. Stone"], "venue": "Machine learning", "citeRegEx": "Hester and Stone,? \\Q2013\\E", "shortCiteRegEx": "Hester and Stone", "year": 2013}, {"title": "Reinforcement learning: A survey", "author": ["L.P. Kaelbling", "M.L. Littman", "A.W. Moore"], "venue": "Journal of Artificial Intelligence Research", "citeRegEx": "Kaelbling et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Kaelbling et al\\.", "year": 1996}, {"title": "Brain function and adaptive systems: a heterostatic theory, Technical report, DTIC Document", "author": ["A.H. Klopf"], "venue": null, "citeRegEx": "Klopf,? \\Q1972\\E", "shortCiteRegEx": "Klopf", "year": 1972}, {"title": "Learning motor skills: from algorithms to robot experiments", "author": ["J. Kober"], "venue": "it-Information Technology", "citeRegEx": "Kober,? \\Q2014\\E", "shortCiteRegEx": "Kober", "year": 2014}, {"title": "Reinforcement learning in robotics: A survey", "author": ["J. Kober", "J.A. Bagnell", "J. Peters"], "venue": "The International Journal of Robotics Research", "citeRegEx": "Kober et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Kober et al\\.", "year": 2013}, {"title": "Reinforcement learning in robotics: Applications and real-world challenges", "author": ["P. Kormushev", "S. Calinon", "D.G. Caldwell"], "venue": "Robotics", "citeRegEx": "Kormushev et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Kormushev et al\\.", "year": 2013}, {"title": "Continuous control with deep reinforcement learning", "author": ["T.P. Lillicrap", "J.J. Hunt", "A. Pritzel", "N. Heess", "T. Erez", "Y. Tassa", "D. Silver", "D. Wierstra"], "venue": null, "citeRegEx": "Lillicrap et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lillicrap et al\\.", "year": 2015}, {"title": "Reinforcement Learning for Robots Using Neural Networks, PhD thesis, Carnegie Mellon University. UMI Order GAX93-22750", "author": ["Lin", "L.-J"], "venue": null, "citeRegEx": "Lin and L..J.,? \\Q1992\\E", "shortCiteRegEx": "Lin and L..J.", "year": 1992}, {"title": "Exploration in model-based reinforcement learning by empirically estimating learning progress, in \u2018Advances in Neural Information", "author": ["M. Lopes", "T. Lang", "M. Toussaint", "Oudeyer", "P.-Y"], "venue": "Processing Systems\u2019,", "citeRegEx": "Lopes et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Lopes et al\\.", "year": 2012}, {"title": "Developmental robotics: a survey", "author": ["M. Lungarella", "G. Metta", "R. Pfeifer", "G. Sandini"], "venue": "Connection Science", "citeRegEx": "Lungarella et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Lungarella et al\\.", "year": 2003}, {"title": "RL-ROBOT: Reinforcement learning framework for robotics", "author": ["A. Mart\u0301\u0131nez-Tenor"], "venue": null, "citeRegEx": "Mart\u0301\u0131nez.Tenor,? \\Q2016\\E", "shortCiteRegEx": "Mart\u0301\u0131nez.Tenor", "year": 2016}, {"title": "Asynchronous methods for deep reinforcement learning", "author": ["V. Mnih", "A.P. Badia", "M. Mirza", "A. Graves", "T.P. Lillicrap", "T. Harley", "D. Silver", "K. Kavukcuoglu"], "venue": null, "citeRegEx": "Mnih et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2016}, {"title": "Playing atari with deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A. Graves", "I. Antonoglou", "D. Wierstra", "M. Riedmiller"], "venue": null, "citeRegEx": "Mnih et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2013}, {"title": "Prioritized sweeping: Reinforcement learning with less data and less time", "author": ["A.W. Moore", "C.G. Atkeson"], "venue": "Machine Learning", "citeRegEx": "Moore and Atkeson,? \\Q1993\\E", "shortCiteRegEx": "Moore and Atkeson", "year": 1993}, {"title": "Dynamic bayesian networks: representation, inference and learning, PhD thesis, University of California, Berkeley", "author": ["K.P. Murphy"], "venue": null, "citeRegEx": "Murphy,? \\Q2002\\E", "shortCiteRegEx": "Murphy", "year": 2002}, {"title": "Real-world reinforcement learning for autonomous humanoid robot docking", "author": ["N. Navarro-Guerrero", "C. Weber", "P. Schroeter", "S. Wermter"], "venue": "Robotics and Autonomous Systems", "citeRegEx": "Navarro.Guerrero et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Navarro.Guerrero et al\\.", "year": 2012}, {"title": "Autonomous inverted helicopter flight via reinforcement learning, in \u2018Experimental Robotics IX", "author": ["A.Y. Ng", "A. Coates", "M. Diel", "V. Ganapathi", "J. Schulte", "B. Tse", "E. Berger", "E. Liang"], "venue": null, "citeRegEx": "Ng et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Ng et al\\.", "year": 2006}, {"title": "Deep exploration via bootstrapped dqn", "author": ["I. Osband", "C. Blundell", "A. Pritzel", "B. Van Roy"], "venue": null, "citeRegEx": "Osband et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Osband et al\\.", "year": 2016}, {"title": "Safe exploration techniques for reinforcement learning\u2013an overview, in \u2018International Workshop on Modelling and Simulation for Autonomous Systems", "author": ["M. Pecka", "T. Svoboda"], "venue": null, "citeRegEx": "Pecka and Svoboda,? \\Q2014\\E", "shortCiteRegEx": "Pecka and Svoboda", "year": 2014}, {"title": "Reinforcement learning for humanoid robotics", "author": ["J. Peters", "S. Vijayakumar", "S. Schaal"], "venue": "in \u2018Proceedings of the third IEEE-RAS International Conference on Humanoid Robots\u2019,", "citeRegEx": "Peters et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Peters et al\\.", "year": 2003}, {"title": "ROS: an open-source robot operating system, in \u2018ICRA Workshop on Open Source Software", "author": ["M. Quigley", "K. Conley", "B.P. Gerkey", "J. Faust", "T. Foote", "J. Leibs", "R. Wheeler", "A.Y. Ng"], "venue": null, "citeRegEx": "Quigley et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Quigley et al\\.", "year": 2009}, {"title": "V-rep: A versatile and scalable robot simulation framework, in \u20182013", "author": ["E. Rohmer", "S.P.N. Singh", "M. Freese"], "venue": "IEEE/RSJ International Conference on Intelligent Robots and Systems\u2019,", "citeRegEx": "Rohmer et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Rohmer et al\\.", "year": 2013}, {"title": "On-line Q-learning using connectionist systems, CUED/FINFENG/TR", "author": ["G.A. Rummery", "M. Niranjan"], "venue": null, "citeRegEx": "Rummery and Niranjan,? \\Q1994\\E", "shortCiteRegEx": "Rummery and Niranjan", "year": 1994}, {"title": "Prioritized experience replay", "author": ["T. Schaul", "J. Quan", "I. Antonoglou", "D. Silver"], "venue": null, "citeRegEx": "Schaul et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Schaul et al\\.", "year": 2015}, {"title": "A reinforcement learning method for maximizing undiscounted rewards", "author": ["A. Schwartz"], "venue": "in \u2018Proceedings of the tenth International Conference on Machine Learning\u2019,", "citeRegEx": "Schwartz,? \\Q1993\\E", "shortCiteRegEx": "Schwartz", "year": 1993}, {"title": "Towards deep developmental learning", "author": ["O. Sigaud", "A. Droniou"], "venue": "IEEE Transactions on Cognitive and Developmental Systems", "citeRegEx": "Sigaud and Droniou,? \\Q2016\\E", "shortCiteRegEx": "Sigaud and Droniou", "year": 2016}, {"title": "Reinforcement learning with replacing eligibility traces", "author": ["S.P. Singh", "R.S. Sutton"], "venue": "Machine Learning", "citeRegEx": "Singh and Sutton,? \\Q1996\\E", "shortCiteRegEx": "Singh and Sutton", "year": 1996}, {"title": "Effective reinforcement learning for mobile robots, in \u20182002", "author": ["W.D. Smart", "L.P. Kaelbling"], "venue": "IEEE International Conference on Robotics and Automation, (ICRA)\u2019,", "citeRegEx": "Smart and Kaelbling,? \\Q2002\\E", "shortCiteRegEx": "Smart and Kaelbling", "year": 2002}, {"title": "Incentivizing exploration in reinforcement learning with deep predictive models", "author": ["B.C. Stadie", "S. Levine", "P. Abbeel"], "venue": null, "citeRegEx": "Stadie et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Stadie et al\\.", "year": 2015}, {"title": "Dyna-style planning with linear function approximation and prioritized sweeping", "author": ["R.S. Sutton", "C. Szepesv\u00e1ri", "A. Geramifard", "M.P. Bowling"], "venue": null, "citeRegEx": "Sutton et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Sutton et al\\.", "year": 2012}, {"title": "Algorithms for reinforcement learning", "author": ["C. Szepesv\u00e1ri"], "venue": "Synthesis Lectures on Artificial Intelligence and Machine Learning", "citeRegEx": "Szepesv\u00e1ri,? \\Q2010\\E", "shortCiteRegEx": "Szepesv\u00e1ri", "year": 2010}, {"title": "RL-Glue: Languageindependent software for reinforcement-learning experiments", "author": ["B. Tanner", "A. White"], "venue": "Journal of Machine Learning Research", "citeRegEx": "Tanner and White,? \\Q2009\\E", "shortCiteRegEx": "Tanner and White", "year": 2009}, {"title": "Transfer learning for reinforcement learning domains: A survey", "author": ["M.E. Taylor", "P. Stone"], "venue": "Journal of Machine Learning Research", "citeRegEx": "Taylor and Stone,? \\Q2009\\E", "shortCiteRegEx": "Taylor and Stone", "year": 2009}, {"title": "Efficient exploration in reinforcement learning", "author": ["S.B. Thrun"], "venue": "Technical report,", "citeRegEx": "Thrun,? \\Q1992\\E", "shortCiteRegEx": "Thrun", "year": 1992}, {"title": "Value-difference based exploration: Adaptive control between epsilon-greedy and softmax., in \u2018KI", "author": ["M. Tokic", "G. Palm"], "venue": null, "citeRegEx": "Tokic and Palm,? \\Q2011\\E", "shortCiteRegEx": "Tokic and Palm", "year": 2011}, {"title": "Comparing individual means in the analysis of variance", "author": ["J.W. Tukey"], "venue": "Biometrics pp", "citeRegEx": "Tukey,? \\Q1949\\E", "shortCiteRegEx": "Tukey", "year": 1949}, {"title": "Computing machinery and intelligence", "author": ["A.M. Turing"], "venue": "Mind 59(236),", "citeRegEx": "Turing,? \\Q1950\\E", "shortCiteRegEx": "Turing", "year": 1950}, {"title": "True online temporal-difference learning", "author": ["H. van Seijen", "A.R. Mahmood", "P.M. Pilarski", "M.C. Machado", "R.S. Sutton"], "venue": null, "citeRegEx": "Seijen et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Seijen et al\\.", "year": 2015}, {"title": "Learning on real robots from experience and simple user feedback", "author": ["P.Q. Vidal", "R.I. Rod\u0155\u0131guez", "M.A.R. Gonz\u00e1lez", "C.V. Regueiro"], "venue": "JoPha: Journal of Physical Agents", "citeRegEx": "Vidal et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Vidal et al\\.", "year": 2013}, {"title": "Learning from delayed rewards, PhD thesis, King\u2019s College, Cambridge", "author": ["Watkins", "C.J.C. H"], "venue": null, "citeRegEx": "Watkins and H.,? \\Q1989\\E", "shortCiteRegEx": "Watkins and H.", "year": 1989}, {"title": "Q-learning behavior on autonomous navigation of physical robot, in \u20188th International Conference on Ubiquitous Robots and Ambient Intelligence (URAI)", "author": ["H. Wicaksono"], "venue": null, "citeRegEx": "Wicaksono,? \\Q2011\\E", "shortCiteRegEx": "Wicaksono", "year": 2011}, {"title": "Explorations in efficient reinforcement learning", "author": ["M.A. Wiering"], "venue": "PhD thesis,", "citeRegEx": "Wiering,? \\Q1999\\E", "shortCiteRegEx": "Wiering", "year": 1999}, {"title": "Reinforcement learning: State-of-the-art\u2019, Adaptation, Learning, and Optimization", "author": ["M. Wiering", "M. Van Otterlo"], "venue": null, "citeRegEx": "Wiering and Otterlo,? \\Q2012\\E", "shortCiteRegEx": "Wiering and Otterlo", "year": 2012}, {"title": "Reinforcement learning algorithms for robotic navigation in dynamic environments", "author": ["G. Yen", "T. Hickey"], "venue": "in \u2018Proceedings of the 2002 International Joint Conference on Neural Networks, 2002 (IJCNN)\u2019,", "citeRegEx": "Yen and Hickey,? \\Q2002\\E", "shortCiteRegEx": "Yen and Hickey", "year": 2002}, {"title": "Towards vision-based deep reinforcement learning for robotic motion control", "author": ["F. Zhang", "J. Leitner", "M. Milford", "B. Upcroft", "P. Corke"], "venue": null, "citeRegEx": "Zhang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 52, "context": "The autonomous learning concept in robotics dates back to Alan Turing\u2019s idea of having robots that learn in a way similar to children (Turing 1950).", "startOffset": 134, "endOffset": 147}, {"referenceID": 30, "context": "Markov decision processes (MDP) (Murphy 2002) are the most exploited paradigm in this sense.", "startOffset": 32, "endOffset": 45}, {"referenceID": 4, "context": "With those definitions, Bellman equations (Bellman 1956) can be used recursively for improving an arbitrary initial policy until it converges to the optimal one (the one with greatest value).", "startOffset": 42, "endOffset": 56}, {"referenceID": 18, "context": "Another mechanism widely used for improving RL is eligibility traces (ET) (Klopf 1972), (Kaelbling, Littman & Moore 1996), (Sutton & Barto 1998) and (Lin 1992), and its variant replacing traces (Singh & Sutton 1996).", "startOffset": 74, "endOffset": 86}, {"referenceID": 40, "context": "So far the algorithms mentioned are derived from the classical value iteration, but there are other effective TDbased algorithms, such as actor-critic methods (Barto, Sutton & Anderson 1983), R-learning (Schwartz 1993), and those based on policy iteration.", "startOffset": 203, "endOffset": 218}, {"referenceID": 17, "context": "(Kaelbling et al. 1996) and (Wiering & Van Otterlo 2012).", "startOffset": 0, "endOffset": 23}, {"referenceID": 17, "context": "The problem worsens when trying to solve different tasks (Kaelbling et al. 1996), (Sutton & Barto 1998), (Szepesv\u00e1ri 2010) and (Wiering & Van Otterlo 2012).", "startOffset": 57, "endOffset": 80}, {"referenceID": 46, "context": "1996), (Sutton & Barto 1998), (Szepesv\u00e1ri 2010) and (Wiering & Van Otterlo 2012).", "startOffset": 30, "endOffset": 47}, {"referenceID": 49, "context": "An adequate approach to the exploration-exploitation dilemma (Thrun 1992), (Wiering 1999), (Tokic & Palm 2011), (Lopes, Lang, Toussaint & Oudeyer 2012), (Hester, Lopes & Stone 2013) and (Pecka & Svoboda 2014) is also proved to be essential for the performance of the learning process, especially for practical applications.", "startOffset": 61, "endOffset": 73}, {"referenceID": 57, "context": "An adequate approach to the exploration-exploitation dilemma (Thrun 1992), (Wiering 1999), (Tokic & Palm 2011), (Lopes, Lang, Toussaint & Oudeyer 2012), (Hester, Lopes & Stone 2013) and (Pecka & Svoboda 2014) is also proved to be essential for the performance of the learning process, especially for practical applications.", "startOffset": 75, "endOffset": 89}, {"referenceID": 17, "context": "Today the efficacy of RL algorithms has been demonstrated in many different fields, such as game theory, control engineering, statistics, or even robotics when toy models or very low-realistic robot simulators are used (Sutton & Barto 1998), (Kaelbling et al. 1996), (Wiering & Van Otterlo 2012) and (Kober et al.", "startOffset": 242, "endOffset": 265}, {"referenceID": 20, "context": "1996), (Wiering & Van Otterlo 2012) and (Kober et al. 2013).", "startOffset": 40, "endOffset": 59}, {"referenceID": 20, "context": "However, when RL is applied to accurate physical realistic simulators or to real robots, we must face additional issues that are specific of this area, such as the curse of real-world samples (Kober et al. 2013), which obstruct the execution of RL-based methods, often making them unviable.", "startOffset": 192, "endOffset": 211}, {"referenceID": 12, "context": "Despite these limitations, many works have implemented RL-based methods for learning complex but particular robotic tasks, overcoming some of these problems (Lin 1992), (Smart & Kaelbling 2002), (Gaskett 2002), (Abbeel, Coates & Ng 2010), (Yen & Hickey 2002), (Peters, Vijayakumar & Schaal 2003), (Ng, Coates, Diel, Ganapathi, Schulte, Tse, Berger & Liang 2006), (Wicaksono 2011), (Degris, Pilarski & Sutton 2012), (Hester, Quinlan & Stone 2012), (Navarro-Guerrero, Weber, Schroeter & Wermter 2012), (Hester & Stone 2013), (Kober et al.", "startOffset": 195, "endOffset": 209}, {"referenceID": 56, "context": "Despite these limitations, many works have implemented RL-based methods for learning complex but particular robotic tasks, overcoming some of these problems (Lin 1992), (Smart & Kaelbling 2002), (Gaskett 2002), (Abbeel, Coates & Ng 2010), (Yen & Hickey 2002), (Peters, Vijayakumar & Schaal 2003), (Ng, Coates, Diel, Ganapathi, Schulte, Tse, Berger & Liang 2006), (Wicaksono 2011), (Degris, Pilarski & Sutton 2012), (Hester, Quinlan & Stone 2012), (Navarro-Guerrero, Weber, Schroeter & Wermter 2012), (Hester & Stone 2013), (Kober et al.", "startOffset": 363, "endOffset": 379}, {"referenceID": 20, "context": "Despite these limitations, many works have implemented RL-based methods for learning complex but particular robotic tasks, overcoming some of these problems (Lin 1992), (Smart & Kaelbling 2002), (Gaskett 2002), (Abbeel, Coates & Ng 2010), (Yen & Hickey 2002), (Peters, Vijayakumar & Schaal 2003), (Ng, Coates, Diel, Ganapathi, Schulte, Tse, Berger & Liang 2006), (Wicaksono 2011), (Degris, Pilarski & Sutton 2012), (Hester, Quinlan & Stone 2012), (Navarro-Guerrero, Weber, Schroeter & Wermter 2012), (Hester & Stone 2013), (Kober et al. 2013), (Kormushev, Calinon & Caldwell 2013), (Vidal, Rod\u0155\u0131guez, Gonz\u00e1lez & Regueiro 2013), (Kober 2014), (Deisenroth, Fox & Rasmussen 2015) and (Gar\u0107\u0131a & Fern\u00e1ndez 2015).", "startOffset": 523, "endOffset": 542}, {"referenceID": 19, "context": "2013), (Kormushev, Calinon & Caldwell 2013), (Vidal, Rod\u0155\u0131guez, Gonz\u00e1lez & Regueiro 2013), (Kober 2014), (Deisenroth, Fox & Rasmussen 2015) and (Gar\u0107\u0131a & Fern\u00e1ndez 2015).", "startOffset": 91, "endOffset": 103}, {"referenceID": 20, "context": "The main conclusion to be drawn from this is that the complexity of RL in robotics requires the learning method to be complemented through advanced representation, prior knowledge, and models in order to make the problem tractable (Kober et al. 2013); this biases the learning process with knowledge from the task, resulting in a task-dependent learning method.", "startOffset": 231, "endOffset": 250}, {"referenceID": 19, "context": "Although some studies have searched for techniques adaptable to multiple tasks (Kober 2014), they usually rely on closely related ones, sometimes leading to poor performance.", "startOffset": 79, "endOffset": 91}, {"referenceID": 26, "context": "RL-ROBOT has been released as an open source project, Python PEP8 style, available on Github (Mart\u0301\u0131nez-Tenor 2016).", "startOffset": 93, "endOffset": 115}, {"referenceID": 51, "context": "The results include the average learning curve of several repetitions, along with an analysis of variance and a post-hoc Tukey test (Tukey 1949) for each task in order to assess the significance of the conclusions.", "startOffset": 132, "endOffset": 144}, {"referenceID": 6, "context": "A suitable generalization exploiting the basis of QBIASSR could be hierarchical RL (Barto & Mahadevan 2003) and (Botvinick 2012), where complex tasks could be formed by adding more input variables to existing tasks.", "startOffset": 112, "endOffset": 128}], "year": 2017, "abstractText": "Mobile robots are increasingly being employed for performing complex tasks in dynamic environments. Reinforcement learning (RL) methods are recognized to be promising for specifying such tasks in a relatively simple manner. However, the strong dependency between the learning method and the task to learn is a well-known problem that restricts practical implementations of RL in robotics, often requiring major modifications of parameters and adding other techniques for each particular task. In this paper we present a practical core implementation of RL which enables the learning process for multiple robotic tasks with minimal per-task tuning or none. Based on value iteration methods, this implementation includes a novel approach for action selection, called Q-biased softmax regression (QBIASSR), which avoids poor performance of the learning process when the robot reaches new unexplored states. Our approach takes advantage of the structure of the state space by attending the physical variables involved (e.g., distances to obstacles, X ,Y , \u03b8 pose, etc.), thus experienced sets of states may favor the decision-making process of unexplored or rarely-explored states. This improvement has a relevant role in reducing the tuning of the algorithm for particular tasks. Experiments with real and simulated robots, performed with the software framework also introduced here, show that our implementation is effectively able to learn different robotic tasks without tuning the learning method. Results also suggest that the combination of true online SARSA(\u03bb) (TOSL) with QBIASSR can outperform the existing RL core algorithms in low-dimensional robotic tasks.", "creator": "LaTeX with hyperref package"}}}