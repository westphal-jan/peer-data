{"id": "1704.05539", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Apr-2017", "title": "Beating Atari with Natural Language Guided Reinforcement Learning", "abstract": "We introduce the first deep reinforcement learning agent that learns to beat Atari games with the aid of natural language instructions. The agent uses a multimodal embedding between environment observations and natural language to self-monitor progress through a list of English instructions, granting itself reward for completing instructions in addition to increasing the game score. Our agent significantly outperforms Deep Q-Networks (DQNs), Asynchronous Advantage Actor-Critic (A3C) agents, and the best agents posted to OpenAI Gym on what is often considered the hardest Atari 2600 environment: Montezuma's Revenge.", "histories": [["v1", "Tue, 18 Apr 2017 21:31:29 GMT  (603kb,D)", "http://arxiv.org/abs/1704.05539v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["russell kaplan", "christopher sauer", "alexander sosa"], "accepted": false, "id": "1704.05539"}, "pdf": {"name": "1704.05539.pdf", "metadata": {"source": "CRF", "title": "Beating Atari with Natural Language Guided Reinforcement Learning", "authors": ["Russell Kaplan", "Christopher Sauer", "Alexander Sosa"], "emails": ["aasosa}@cs.stanford.edu"], "sections": [{"heading": null, "text": "Videos of Trained MONTEZUMA\u2019S REVENGE Agents: Our Best Current Model. Score 3500. Best Model Currently on OpenAI Gym. Score 2500. Standard A3C Agent Fails to Learn. Score 0.\nFigure 1: Left: An agent exploring the first room of MONTEZUMA\u2019S REVENGE. Right: An example of the list of natural language instructions one might give the agent. The agent grants itself an additional reward after completing the current instruction. \u201cCompletion\u201d is learned by training a generalized multimodal embedding between game images and text.\n\u2217The authors contributed equally.\nar X\niv :1\n70 4.\n05 53\n9v 1\n[ cs\n.A I]\n1 8\nA pr"}, {"heading": "1 Introduction", "text": "Humans do not typically learn to interact with the world in a vacuum, devoid of interaction with others, nor do we live in the stateless, single-example world of supervised learning.\nInstead, we live in a wonderfully complex and stateful world, where past actions influence present outcomes. In our learning, we benefit from the guidance of others, receiving arbitrarily high-level instruction in natural language\u2013and learning to fill in the gaps between those instructions\u2013as we navigate a world with varying sources of reward, both intrinsic and extrinsic.\nBuilding truly intelligent artificial agents will require that they be capable of acting in stateful worlds such as ours. They will also need to be capable of learning from and following instructions given by humans. Further, these instructions will need to be at whatever high-level specification is convenient\u2014not just the low-level, completely specified instructions given in current programs.\nInspired by the dream of instructing artificial agents with the power of natural language, we set out to create an agent capable of learning from high-level English instruction as it learns to act in the stateful model-world of Atari games.\nWe do so by combining techniques from natural language processing and deep reinforcement learning in two stages: In the first stage, the agent learns the meaning of English commands and how they map onto observations of game state. In the second stage, the agent explores the environment, progressing through the commands it has learned to understand and learning what actions are required to satisfy a given command. Intuitively, the first step corresponds to agreeing upon terms with the human providing instruction. The second step corresponds to learning to best fill in the implementation of those instructions."}, {"heading": "2 Background", "text": "DeepMind shocked the deep and reinforcement learning communities in 2013 with the introduction of deep Q-learning. For the first time, reinforcement learning agents were learning from highdimensional, visual input using convolutional neural networks [10]. With just screen pixels as input and the score as reward, their agents achieved superhuman performance on roughly half of Atari 2600 console games, most famously on Breakout.\nThe resulting models play impressively well; however, learning completely fails in games with extended times to rewards like MONTEZUMA\u2019S REVENGE, and the models require extensive exploration time to find good strategies, even for simpler games like Breakout. [11, 7].\nSince then, reinforcement learning methods have been increasingly successful in a wide variety of tasks, particularly as a bridge to learn non-differentiable, stateful action. The range of applications extends far beyond the original paper, from early attention mechanisms to productive dialogue generation [15, 8]. There have also been significant improvements in the underlying learning architecture. In particular, there has been a shift away from the original deep Q-formulation toward the Asynchronous Advantage Actor-Critic because of improved learning speed and stability [9]. The difference between Deep Q-Network (DQN) and Asynchronous Advantage Actor-Critic (A3C) will be discussed further in the next section.\nUnfortunately, reinforcement learning agents still struggle to learn in environments with sparse rewards. MONTEZUMA\u2019S REVENGE has become the a key testing ground for potential improvements to the sparse reward problem and a very active area of research at DeepMind. Efforts to improve performance in the past few months have focused on adding additional rewards, e.g., curiosity, at various levels or adding additional model capabilities, e.g., memory [12, 13, 6, 3]. To the best of our knowledge, no one has previously tried guiding reinforcement learning with natural language instructions."}, {"heading": "2.1 Approaches to Reinforcement Learning", "text": "Reinforcement learning is a broad conceptual framework that encapsulates what it means to learn to interact in a stateful, uncertain, and unknown world. In reinforcement learning, an agent observes some state from its environment at each time step and decides upon an action. The agent subsequently observes the updated state\u2014affected both by the agent\u2019s actions and by external factors\u2014 and the agent may receive some reward. This cycle repeats until a termination condition is met. A successful reinforcement learning agent learns from its experience in its environment to improve its acquisition of time-discounted reward in future runs.\nFor all reinforcement learners there is the notion of the value of a state or action. The objective is to maximize an exponentially time-discounted sum of future rewards. That is, there is some timediscounting factor 0 < \u03b3 \u2264 1, and the value of a state or action\u2014depending on the formulation\u2014is the sum over future rewards of \u03b3\u2206tr\u2206t, where \u2206t is the time until the reward r\u2206t is earned. The time discounting combats value exploding to infinity over time and encourages faster pursuit of reward.\nDespite this common framework, in practice there are two well-known but very different approaches for agent learning. We describe each below."}, {"heading": "2.1.1 Deep Q-Learning: The Action-Value Formulation", "text": "DeepMind\u2019s original Atari paper used an approach that they termed deep Q-learning, based on the older idea of Q-learning [10]. Q-learning agents learn a function Q, which takes the current state as input and applies a discounted value estimate for the rest of the game for each possible action. At test time, the Q-learning agent simply picks the action with the highest estimated value for that state. At training time, it balances exploiting what it believes to be the best action with exploring other actions.\nThe function Q is parameterized as a convolutional neural network and is trained to match the observed value of taking actions in a given state through standard backpropagation and gradient descent on a saved history of observed values. Of course, the value of a given action changes as the agent learns to play better in the future time steps, so this training is a moving target as the agent learns."}, {"heading": "2.1.2 Policy Iteration and Asynchronous Advantage Actor-Critic: The Action-Distribution Formulation", "text": "While Deep Q-Networks are famous from the original DeepMind Atari paper, policy-based approaches, in particular the Asynchronous Advantage Actor-Critic (A3C), now dominate most leaderboards on OpenAI Gym, a source of standardized reinforcement learning environments [4].\nInstead of trying to assess action value, policy networks skip to directly learning policy, a function \u03c0 that maps a state to a distribution of actions. Policy networks maximize the expected, discounted reward of following that policy, which it can be shown equates to gradient descent with step size proportional to the discounted reward R times the log of the probability \u03c0 assigned to the action. In contrast to Deep Q-Networks, learning can benefit from Thompson sampling or other techniques that leverage the degree of the network\u2019s uncertainty about the best next action. A popular variant, A3C, learns from many games in parallel, increases stability by subtracting an estimated state value V (s) from the reward multiplier R in updates, and converges faster than other available options [9, 13]."}, {"heading": "3 Approach and Experiments", "text": ""}, {"heading": "3.1 Overview of Approach", "text": ""}, {"heading": "3.2 Baseline Models", "text": "Being new to reinforcement learning, our first step was to train a robust baseline model on Atari Breakout. For this we used a standard Deep Q-Network based on an implementation in TensorFlow [5, 1]. However, after 30 hours of training, the agent failed to converge to one that could beat the game. Unable to reproduce DeepMind\u2019s results with DQN without weeks of training, we instead trained a stronger baseline using a model that is state-of-the-art for many reinforcement learning\nenvironments, including Breakout: Asynchronous Advantage Actor-Critic (A3C). We based the model on an implementation from Tensorpack [14] and relied on OpenAI\u2019s Gym framework for training reinforcement learning agents [4]. After training overnight, A3C successfully converged to a perfect Breakout score within 30 million frames of training."}, {"heading": "3.3 Viability of Sub-Task Rewards", "text": "Equipped with this more promising baseline and caught up on our understanding of the state of the art, we set out to run a proof of concept on the usefulness of additional instruction to reinforcement learning agents by injecting an additional reward signal to the agent whenever in state that we determined was beneficial for its learning. Instead of having this additional reward based on completing a natural language instruction, we initially simply rewarded the agent for arriving at a game state where the ball\u2019s position was directly above the paddle\u2019s position. To accomplish this, we wrote a template-matching library for Breakout to return the positions of the ball and paddle within the environment. This turned out to be nontrivial given that the paddle in the Breakout environment gets smaller as the game progresses and can overlap with the walls and the ball in certain scenarios and that the ball changes colors based on y position, to name a few complications. One develops a special appreciation for convolutional neural networks when forced to essentially hard-code one.\nWith this additional template-matching reward for the agent obtaining the state of having the paddle under the ball, we saw a significant improvement in the rate of learning for early steps of the game. We saw even more improvement by also providing a negative reward whenever the agent lost a life (this reward signal is not provided by the environment directly). The additional reward signals for following our two hard-coded instruction helped the agent score more than 120 points after only 12,000 iterations (128 frames are played per iteration), more than three times better than ordinary A3C after the same amount of training time.\nWhile these results for early training were promising, the additional reward signal nevertheless becomes less important as the agent progresses further through the environment. The additionally rewarded agent converges with the baseline A3C Breakout model after 36,000 iterations, and after 100,000 iterations it actually performs worse. We attribute this to both 1) the fact that simply keeping the paddle under the ball is not as useful of a strategy for later rounds when the ball moves more quickly than the paddle can, and 2) the fact that the baseline A3C agent learns so rapidly without additional reward signal because the reward is dense in the Breakout environment. The Breakout environment has such dense reward because every time a brick is broken, the agent is given a reward for the actions that led it to do so. Because the baseline A3C algorithm left little room for improvement for our additional reward signals, we decided to move on to the significantly harder MONTEZUMA\u2019S REVENGE."}, {"heading": "3.4 Experiments in Multimodal Embeddings", "text": "The aim of our initial experiments on Breakout was to use the simpler environment to refine and fully understand the sub-components of our natural language instructed model before we assembled them to tackle MONTEZUMA\u2019S REVENGE. Having experimented and debugged the reinforcement (A3C) and reward augmentation sub-components, the final component of our model we had not yet proven was the multimodal embedding mapping natural language descriptions and frames into a single embedding space where we could determine whether the description applied to the frame.\nWe first generated a dataset of several thousand frames by running the A3C model we had just trained for Breakout and using our template matching code to give relational descriptions of entities in the frame. For example, some of the possible frame descriptions included \u201cThe ball is to the right of the paddle\u201d and \u201cThe paddle is to the right of the ball.\u201d\nTo correctly identify commands that are satisfied by a series of consecutive frames and to pass fixed size vectors describing those commands and frames to our learning agent, we need a multi-modal embedding between frames and sentences. The overall setup is shown in the green portion of Figure 4. Our network takes a pair of sequential frames and a sentence captured as a vector of words which may or may not describe that image. Frame pairs are taken to an embedding by a convolutional neural network. Instructions are taken to an embedding of the same size by a variety of techniques such as an LSTM, GRU, BiLSTM, BiGRU, and bag of words (BOW), described and compared in Figure 6.\nThe network aims to maximize the dot product between an embedding of the frames generated and the sentence embeddings for all sentences that accurately describe a series of frames and to minimize the dot product with those sentence embeddings for sentences that do not apply to the frames. We choose a dot product between the frame and sentence embeddings over, for example, cosine distance because many sentences may match a single frame. We want the embedding to be able to measure\nwhether an frame pair expresses one meaning component\u2014the one given by the sentence vector\u2014 without penalizing its score for expressing another meaning component, as would occur with the normalization terms in cosine similarity."}, {"heading": "3.5 MONTEZUMA\u2019S REVENGE", "text": "Unlike Breakout, the MONTEZUMA\u2019S REVENGE environment has very sparse reward signal. Refer to Figure 1 to get an idea: Even after the seven listed instructions are followed, the agent still has zero reward. Only after reaching the key is any reward received, and walking off any of the intermediary platforms or touching the skull on the way to the key results in death. It is no surprise that given these challenges, DQN and A3C both struggle to learn anything.\nWe ran the baseline A3C algorithm on MONTEZUMA\u2019S REVENGE and found that after 72 hours of gameplay and more than 200,000,000 observed frames, the agent achieved a consistent score of 0 in the environment. The actions the trained agent would choose tended to result in near-immediate death. With this much less impressive baseline model, we repeated the experiment of matched rewards that we ran on the Breakout environment. We wrote a new template-matching library for MONTEZUMA\u2019S REVENGE and formulated a new series of commands that we devised to be not only useful to the agent to escape the first room but also generalizable across different rooms present in the level. (See Appendix A for the full list.) Like Breakout, we started with an easier experiment: Rather than learn to use these natural language commands directly, we first rewarded the agent for simply reaching different manually specified locations of the room shown in Figure 1. With this approach, we were able to achieve a mean score of 400 before exhausting our instructions and consistently have the agent make it out of the first room. These results were promising to our eventual end-goal since they confirmed that some source of informative auxiliary reward helps the agent reach farther."}, {"heading": "3.6 Dataset Generation", "text": "Having shown that subtask rewards were very promising for an reinforcement learning agent learning to play MONTEZUMA\u2019S REVENGE, we were next tasked with generating a dataset to learn mappings between natural language descriptions of state and raw pixels from the environment. No such dataset existed, however, so we created our own mappings of game state to natural language descriptions that they satisfied. To do so, we played fully through the game several different times, saving frames of game state for each run-through. Utilizing the template-matching code, we could generate lists of chosen commands that were satisfied by a given series of consecutive frames. After several playthroughs, we amassed 15,000 training frames and held out another 3,000 frames\u2014a full separate playthrough\u2014for validation."}, {"heading": "3.7 Learning Frame-Command Mappings with Bimodal Network", "text": "As with Breakout, the first phase of training constituted creating a multimodal embedding between frame pairs depicting the player\u2019s motion and command statements in Appendix A. The embedding was trained such that when commands were satisfied by the frames, there was positive dot product between the frame and command embeddings. When the commands were not satisfied, the dot product was trained to be negative. We used a LSTM with word-level embeddings to extract command embeddings and a convolutional neural network running over pairs of frames stacked on the channel dimension for the frame embeddings."}, {"heading": "3.7.1 Evidence of Generalization", "text": "Given the complexity of the bimodal embedding model and its access to a training dataset containing all the rooms for the first level, we wanted to demonstrate that the bimodal was actually learning to generalize the meaning of the commands, not just requiring that the agent be in the exact same position as in the training data to classify a command as complete.\nOf course, by checking against the unseen playthrough as validation\u2014which contains many frames that differ from those in the training set\u2014we were already testing for generalization within a room. However, we hoped that the command-frame embeddings might be able to generalize across to unseen rooms. To test this, we retrained our bimodal embeddings, this time removing access to all\ntraining data for the second room, but still including frames from the second room in the validation set. The game elements seen in the second room (e.g., ladders) are still present individually in other rooms, so this tests whether the embedding can understand them in their new configuration when tested on the unseen second room.\nThe embedding scheme seems to maintain its extremely low error rate even when tested on a room it did not observe during training time. This provides some evidence that the embedding generalizes to some degree across rooms as opposed to just behavior within a room.\nIt is neat that the embeddings appear to learn to have captured common meaning across rooms, and further, that a relatively simple set of commands gives us as human instructors enough expressiveness to write instructions through the whole first level. Furthermore, the agent can then learn to use this common representation as a basis for generalizing its actions across rooms given a command. For example, if told to go to the right room, the agent might apply the knowledge gained in first figuring out that instruction\u2019s meaning to choose the correct actions on its second appearance in a different room. Indeed, we see this behavior qualitatively as we watch the agent train. Climbing down the first ladder takes considerable effort, since the agent needs to discover it must hold the same arrow key for the duration. On subsequent encounters, the agent often completes the command on the first try; however, learning to go up a ladder for the first time takes longer to learn."}, {"heading": "3.8 Run-Time Learning From Natural Language Reward Using Multimodal Embedding", "text": "With training of the multimodal embedding complete, we then move to the reinforcement learning stage. For each A3C worker, we load the embedding weights and a list of commands for the agent to sequentially complete. We calculate whether a command was completed by using our pretrained bimodal embeddings, passing the current observed state and the current command to accomplish through the network and marking the command as completed if the dot product between the resulting frame and command embeddings is positive. If we note that a command has completed, we give our reinforcement learning agent an additional reward for successfully completing the task and continue on to the next command, also feeding the embeddings into the learning agent as additional features, as described in Figure 4."}, {"heading": "3.9 Final Results", "text": "Table 2 shows a comparison of different reinforcement learning algorithms and ours after 10 million frames of training. Table 3 compares our results to the leaderboard on OpenAI\u2019s Gym. Our agent is the clear and compelling winner of both comparisons.\nIt is important to note that these tables do not represent an apples-to-apples comparison. Our agent\u2019s \u201cenvironment\u201d for MONTEZUMA\u2019S REVENGE is different from that of all others: We include a helpful natural language instruction in addition to the visible frames. Clearly, this makes learning easier than with no language guidance, but that is entirely the point. We think our results are significant for two reasons. First, the type of supervision our agent received from the language has shown to generalize to new states\u2014the agent is able to use language to assist navigation through frames that it has never seen before and that were not included in the training set of the multimodal embedding, so it is not merely memorizing. Second, the type of language supervision given to our agent is exactly the type of supervision that is reasonable to expect an agent would be able to receive in the real world.\nThere are other, orthogonal ways of adding extra reward to the training process that achieve strong results on MONTEZUMA\u2019S REVENGE as well. In [2], which uses Intrinsic Motivation as a source of bonus reward, the authors report that their best run achieved a score of 6600 after 100 million training frames. (This remains the highest reported score for a reinforcement learning agent on MONTEZUMA\u2019S REVENGE.) It is important to note that the Intrinsic Motivation agent explores up to the same depth of rooms as ours when each is trained for 10 million training frames. (Unfortunately, they do not report the score after 10 million frames of training, just the rooms explored.) We were not able to train for 100 million frames to provide a more direct comparison with their final results, due to limited computational budget."}, {"heading": "4 Conclusion", "text": "We present a novel framework for training reinforcement learning agents that allows the agent to learn from instruction in natural language. It is a promising start to cooperation between reinforce-\nment learning agents and their human trainers: The agent achieves impressive scores in relatively few frames where traditional agents fail. We think this approach will be even more fruitful when applied to reinforcement learning in the real world, for example, in robotics. This is because extremely rich, labeled datasets already exist for real-world images, allowing a much more sophisticated multimodal embedding between image and language to be learned than what is achievable with our synthetic dataset. In addition, many tasks in robotics also suffer from the sparse-reward problem, which our approach is specifically designed to address. We imagine it would be quite useful to have an intelligent robot that can be instructed by any human, not just an expert programmer, to quickly learn new tasks.\nWe hope to explore these ideas in future work. We also think it would be interesting to combine our additional reward mechanism with other sources of auxiliary reward, like Intrinsic Motivation, which could quite feasibly achieve state-of-the-art results on many challenging environments due to their complementary and orthogonal nature."}, {"heading": "Appendix A: Full List of Commands Usable for MONTEZUMA\u2019S REVENGE", "text": "Climb down the ladder Climb up the ladder Get the key Use the key Get the sword Get the torch\nGet the coin Jump to the rope"}, {"heading": "Go to the left side of the room", "text": ""}, {"heading": "Go to the right side of the room", "text": ""}, {"heading": "Go to the bottom of the room", "text": ""}, {"heading": "Go to the top of the room", "text": ""}, {"heading": "Go to the center of the room", "text": ""}, {"heading": "Go to the bottom room", "text": ""}, {"heading": "Go to the left room", "text": ""}, {"heading": "Go to the right room", "text": ""}, {"heading": "Go to the top room", "text": ""}, {"heading": "Go between the lasers", "text": "Final architectures for MONTEZUMA\u2019S REVENGE:\nMultimodal embedding network:\nFrame head: Conv[5x5, 32 filters] ReLU MaxPool[2x2] Conv[5x5, 32 filters] ReLU MaxPool[2x2] Conv[4x4, 64 filters] ReLU MaxPool[2x2] Conv[3x3, 64 filters] FullyConnected[Output dimension 10] PReLU FullyConnected[Output dimension 10]\nSentence head: Word vectors of size 12 -> LSTM with hidden state size 10\nRL policy and value network:\nConv[5x5, 32 filters] ReLU MaxPool[2x2] Conv[5x5, 32 filters] ReLU MaxPool[2x2] Conv[4x4, 64 filters] ReLU MaxPool[2x2] Conv[3x3, 64 filters] FullyConnected[Output dimension 10] PReLU -> (Policy) FullyConnected[Output dimension 10] -> (Value) FullyConnected[Output dimension 1]\nFull list of instructions given to the agent.\n## Level 1 # Room 1\nClimb down the ladder\nJump to the rope"}, {"heading": "Go to the right side of the room Climb down the ladder", "text": ""}, {"heading": "Go to the bottom of the room", "text": ""}, {"heading": "Go to the center of the room", "text": "Go to the left side of the room Climb up the ladder Get the key Climb down the ladder"}, {"heading": "Go to the bottom of the room", "text": ""}, {"heading": "Go to the center of the room", "text": ""}, {"heading": "Go to the right side of the room Climb up the ladder Jump to the rope", "text": ""}, {"heading": "Go to the center of the room Climb up the ladder", "text": ""}, {"heading": "Go to the top of the room", "text": ""}, {"heading": "Go to the right side of the room Use the key", "text": ""}, {"heading": "Go to the right room", "text": "# Room 2"}, {"heading": "Go to the center of the room Climb down the ladder", "text": ""}, {"heading": "Go to the bottom of the room", "text": ""}, {"heading": "Go to the bottom room", "text": "# Room 3"}, {"heading": "Go to the left side of the room Get the sword", "text": ""}, {"heading": "Go to the center of the room", "text": ""}, {"heading": "Go to the right side of the room", "text": ""}, {"heading": "Go to the right room", "text": "# Room 4"}, {"heading": "Go between the lasers", "text": ""}, {"heading": "Go to the center of the room Get the key", "text": ""}, {"heading": "Go between the lasers", "text": ""}, {"heading": "Go to the center of the room Climb down the ladder", "text": ""}, {"heading": "Go to the bottom of the room", "text": ""}, {"heading": "Go to the bottom room", "text": "# Room 5"}, {"heading": "Go to the left side of the room", "text": ""}, {"heading": "Go to the left room", "text": "# Room 6"}, {"heading": "Go between the lasers", "text": ""}, {"heading": "Go to the center of the room", "text": ""}, {"heading": "Go between the lasers", "text": ""}, {"heading": "Go to the left side of the room", "text": ""}, {"heading": "Go to the left room", "text": "# Room 7"}, {"heading": "Go to the center of the room Climb up the ladder", "text": "Go to the top room\n# Room 8 (torch room) 709 Use the key Jump to the rope"}, {"heading": "Go to the center of the room Jump to the rope", "text": ""}, {"heading": "Go to the top of the room", "text": ""}, {"heading": "Go to the center of the room Get the torch Jump to the rope", "text": ""}, {"heading": "Go to the center of the room Jump to the rope", "text": ""}, {"heading": "Go to the bottom of the room", "text": "Go to the bottom room"}], "references": [{"title": "TensorFlow: Large-scale machine learning on heterogeneous systems", "author": ["M. Abadi", "A. Agarwal", "P. Barham", "E. Brevdo", "Z. Chen", "C. Citro", "G.S. Corrado", "A. Davis", "J. Dean", "M. Devin", "S. Ghemawat", "I. Goodfellow", "A. Harp", "G. Irving", "M. Isard", "Y. Jia", "R. Jozefowicz", "L. Kaiser", "M. Kudlur", "J. Levenberg", "D. Man\u00e9", "R. Monga", "S. Moore", "D. Murray", "C. Olah", "M. Schuster", "J. Shlens", "B. Steiner", "I. Sutskever", "K. Talwar", "P. Tucker", "V. Vanhoucke", "V. Vasudevan", "F. Vi\u00e9gas", "O. Vinyals", "P. Warden", "M. Wattenberg", "M. Wicke", "Y. Yu", "X. Zheng"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "Unifying count-based exploration and intrinsic motivation", "author": ["M.G. Bellemare", "S. Srinivasan", "G. Ostrovski", "T. Schaul", "D. Saxton", "R. Munos"], "venue": "Advances in Neural Information Processing Systems, 30,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2016}, {"title": "Unifying count-based exploration and intrinsic motivation", "author": ["M.G. Bellemare", "S. Srinivasan", "G. Ostrovski", "T. Schaul", "D. Saxton", "R. Munos"], "venue": "CoRR, abs/1606.01868,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2016}, {"title": "Reinforcement learning with unsupervised auxiliary tasks", "author": ["M. Jaderberg", "V. Mnih", "W.M. Czarnecki", "T. Schaul", "J.Z. Leibo", "D. Silver", "K. Kavukcuoglu"], "venue": "CoRR, abs/1611.05397,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2016}, {"title": "Hierarchical deep reinforcement learning: Integrating temporal abstraction and intrinsic motivation", "author": ["T.D. Kulkarni", "K. Narasimhan", "A. Saeedi", "J.B. Tenenbaum"], "venue": "CoRR, abs/1604.06057,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2016}, {"title": "Deep reinforcement learning for dialogue generation", "author": ["J. Li", "W. Monroe", "A. Ritter", "M. Galley", "J. Gao", "D. Jurafsky"], "venue": "CoRR, abs/1606.01541,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2016}, {"title": "Asynchronous methods for deep reinforcement learning", "author": ["V. Mnih", "A.P. Badia", "M. Mirza", "A. Graves", "T.P. Lillicrap", "T. Harley", "D. Silver", "K. Kavukcuoglu"], "venue": "CoRR, abs/1602.01783,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2016}, {"title": "Playing atari with deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A. Graves", "I. Antonoglou", "D. Wierstra", "M.A. Riedmiller"], "venue": "CoRR, abs/1312.5602,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2013}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "A.K. Fidjeland", "G. Ostrovski", "S. Petersen", "C. Beattie", "A. Sadik", "I. Antonoglou", "H. King", "D. Kumaran", "D. Wierstra", "S. Legg", "D. Hassabis"], "venue": "Nature, 518(7540):529\u2013533, 02", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2015}, {"title": "Feudal networks for hierarchical reinforcement", "author": ["A.S. Vezhnevets", "S. Osindero", "T. Schaul", "N. Heess", "M. Jaderberg", "D. Silver", "K. Kavukcuoglu"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2017}, {"title": "Tensorpack", "author": ["Y. Wu"], "venue": "https://github.com/ppwwyyxx/tensorpack,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2017}, {"title": "Show, attend and tell: Neural image caption generation with visual attention", "author": ["K. Xu", "J. Ba", "R. Kiros", "K. Cho", "A.C. Courville", "R. Salakhutdinov", "R.S. Zemel", "Y. Bengio"], "venue": "CoRR, abs/1502.03044,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [{"referenceID": 1, "context": "Our agent significantly outperforms Deep Q-Networks (DQNs), Asynchronous Advantage ActorCritic (A3C) agents, and the best agents posted to OpenAI Gym [4] on what is often considered the hardest Atari 2600 environment [2]: MONTEZUMA\u2019S REVENGE.", "startOffset": 217, "endOffset": 220}, {"referenceID": 7, "context": "For the first time, reinforcement learning agents were learning from highdimensional, visual input using convolutional neural networks [10].", "startOffset": 135, "endOffset": 139}, {"referenceID": 8, "context": "[11]", "startOffset": 0, "endOffset": 4}, {"referenceID": 8, "context": "[11, 7].", "startOffset": 0, "endOffset": 7}, {"referenceID": 4, "context": "[11, 7].", "startOffset": 0, "endOffset": 7}, {"referenceID": 11, "context": "The range of applications extends far beyond the original paper, from early attention mechanisms to productive dialogue generation [15, 8].", "startOffset": 131, "endOffset": 138}, {"referenceID": 5, "context": "The range of applications extends far beyond the original paper, from early attention mechanisms to productive dialogue generation [15, 8].", "startOffset": 131, "endOffset": 138}, {"referenceID": 6, "context": "In particular, there has been a shift away from the original deep Q-formulation toward the Asynchronous Advantage Actor-Critic because of improved learning speed and stability [9].", "startOffset": 176, "endOffset": 179}, {"referenceID": 9, "context": ", memory [12, 13, 6, 3].", "startOffset": 9, "endOffset": 23}, {"referenceID": 3, "context": ", memory [12, 13, 6, 3].", "startOffset": 9, "endOffset": 23}, {"referenceID": 2, "context": ", memory [12, 13, 6, 3].", "startOffset": 9, "endOffset": 23}, {"referenceID": 7, "context": "DeepMind\u2019s original Atari paper used an approach that they termed deep Q-learning, based on the older idea of Q-learning [10].", "startOffset": 121, "endOffset": 125}, {"referenceID": 6, "context": "A popular variant, A3C, learns from many games in parallel, increases stability by subtracting an estimated state value V (s) from the reward multiplier R in updates, and converges faster than other available options [9, 13].", "startOffset": 217, "endOffset": 224}, {"referenceID": 9, "context": "A popular variant, A3C, learns from many games in parallel, increases stability by subtracting an estimated state value V (s) from the reward multiplier R in updates, and converges faster than other available options [9, 13].", "startOffset": 217, "endOffset": 224}, {"referenceID": 0, "context": "For this we used a standard Deep Q-Network based on an implementation in TensorFlow [5, 1].", "startOffset": 84, "endOffset": 90}, {"referenceID": 10, "context": "We based the model on an implementation from Tensorpack [14] and relied on OpenAI\u2019s Gym framework for training reinforcement learning agents [4].", "startOffset": 56, "endOffset": 60}, {"referenceID": 1, "context": "In [2], which uses Intrinsic Motivation as a source of bonus reward, the authors report that their best run achieved a score of 6600 after 100 million training frames.", "startOffset": 3, "endOffset": 6}], "year": 2017, "abstractText": "We introduce the first deep reinforcement learning agent that learns to beat Atari games with the aid of natural language instructions. The agent uses a multimodal embedding between environment observations and natural language to selfmonitor progress through a list of English instructions, granting itself reward for completing instructions in addition to increasing the game score. Our agent significantly outperforms Deep Q-Networks (DQNs), Asynchronous Advantage ActorCritic (A3C) agents, and the best agents posted to OpenAI Gym [4] on what is often considered the hardest Atari 2600 environment [2]: MONTEZUMA\u2019S REVENGE. Videos of Trained MONTEZUMA\u2019S REVENGE Agents: Our Best Current Model. Score 3500. Best Model Currently on OpenAI Gym. Score 2500. Standard A3C Agent Fails to Learn. Score 0. Figure 1: Left: An agent exploring the first room of MONTEZUMA\u2019S REVENGE. Right: An example of the list of natural language instructions one might give the agent. The agent grants itself an additional reward after completing the current instruction. \u201cCompletion\u201d is learned by training a generalized multimodal embedding between game images and text. \u2217The authors contributed equally. 1 ar X iv :1 70 4. 05 53 9v 1 [ cs .A I] 1 8 A pr 2 01 7", "creator": "LaTeX with hyperref package"}}}