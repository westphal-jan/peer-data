{"id": "1706.02337", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Jun-2017", "title": "Learning to Extract Semantic Structure from Documents Using Multimodal Fully Convolutional Neural Network", "abstract": "We present an end-to-end, multimodal, fully convolutional network for extracting semantic structures from document images. We consider document semantic structure extraction as a pixel-wise segmentation task, and propose a unified model that classifies pixels based not only on their visual appearance, as in the traditional page segmentation task, but also on the content of underlying text. Moreover, we propose an efficient synthetic document generation process that we use to generate pretraining data for our network. Once the network is trained on a large set of synthetic documents, we fine-tune the network on unlabeled real documents using a semi-supervised approach. We systematically study the optimum network architecture and show that both our multimodal approach and the synthetic data pretraining significantly boost the performance.", "histories": [["v1", "Wed, 7 Jun 2017 18:51:31 GMT  (29326kb,D)", "http://arxiv.org/abs/1706.02337v1", "CVPR 2017 Spotlight"]], "COMMENTS": "CVPR 2017 Spotlight", "reviews": [], "SUBJECTS": "cs.CV cs.LG", "authors": ["xiao yang", "ersin yumer", "paul asente", "mike kraley", "daniel kifer", "c lee giles"], "accepted": false, "id": "1706.02337"}, "pdf": {"name": "1706.02337.pdf", "metadata": {"source": "CRF", "title": "Learning to Extract Semantic Structure from Documents Using Multimodal Fully Convolutional Neural Networks", "authors": ["Xiao Yang", "Ersin Yumer", "Paul Asente", "Mike Kraley", "Daniel Kifer", "C. Lee Giles"], "emails": ["xuy111@psu.edu", "mkraley}@adobe.com", "dkifer@cse.psu.edu", "giles@ist.psu.edu"], "sections": [{"heading": "1. Introduction", "text": "Document semantic structure extraction (DSSE) is an actively-researched area dedicated to understanding images of documents. The goal is to split a document image into regions of interest and to recognize the role of each region. It is usually done in two steps: the first step, often referred to as page segmentation, is appearance-based and attempts to distinguish text regions from regions like figures, tables and line segments. The second step, often referred to as logical structure analysis, is semantics-based and categorizes each region into semantically-relevant classes like paragraph and caption.\nIn this work, we propose a unified multimodal fully convolutional network (MFCN) that simultaneously identifies both appearance-based and semantics-based classes. It is a generalized page segmentation model that additionally performs fine-grained recognition on text regions: text regions are assigned specific labels based on their semantic functionality in the document. Our approach simplifies DSSE and better supports document image understanding.\nWe consider DSSE as a pixel-wise segmentation problem: each pixel is labeled as background, figure, table,\nparagraph, section heading, list, caption, etc. We show that our MFCN model trained in an end-to-end, pixels-topixels manner on document images exceeds the state-ofthe-art significantly. It eliminates the need to design complex heuristic rules and extract hand-crafted features [31, 23, 22, 47, 5].\nIn many cases, regions like section headings or captions can be visually identified. In Fig. 1 (a), one can easily recognize the different roles of the same name. However, a robust DSSE system needs the semantic information of the text to disambiguate possible false identifications. For example, in Fig. 1 (b), the text in the large font might look like section heading, but it does not function that way; the lines beginning with dashes might be mislabeled as a list.\nTo this end, our multimodal fully convolutional network is designed to leverage the textual information in the document as well. To incorporate textual information in a CNNbased architecture, we build a text embedding map and feed it to our MFCN. More specifically, we embed each sentence and map the embedding to the corresponding pixels where the sentence is represented in the document. Fig. 2 summarizes the architecture of the proposed MFCN model. Our\n1\nar X\niv :1\n70 6.\n02 33\n7v 1\n[ cs\n.C V\n] 7\nJ un\n2 01\n7\nmodel consists of four parts: an encoder that learns a hierarchy of feature representations, a decoder that outputs segmentation masks, an auxiliary decoder for reconstruction during training, and a bridge that merges visual representations and textual representations. We assume that the document text has been pre-extracted. For document images this can be done with modern OCR engines [48, 1, 3].\nOne of the bottlenecks in training fully convolutional networks is the need for pixel-wise ground truth data. Previous document understanding datasets [32, 45, 51, 7] are limited by both their small size and the lack of fine-grained semantic labels such as section headings, lists, or figure and table captions. To address these issues, we propose an efficient synthetic document generation process and use it to generate large-scale pretraining data for our network. Furthermore, we propose two unsupervised tasks for better generalization to real documents: reconstruction and consistency tasks. The former enables better representation learning by reconstructing the input image, whereas the latter encourages pixels belonging to the same regions have similar representation.\nOur main contributions are summarized as follows:\n\u2022 We propose an end-to-end, unified network to address document semantic structure extraction. Unlike previous two-step processes, we simultaneously identify both appearance-based and semantics-based classes.\n\u2022 Our network supports both supervised training on image and text of documents, as well as unsupervised auxiliary training for better representation learning.\n\u2022 We propose a synthetic data generation process and use it to synthesize a large-scale dataset for training the supervised part of our deep MFCN model."}, {"heading": "2. Background", "text": "Page Segmentation. Most earlier works on page segmentation [31, 23, 22, 47, 5, 46] fall into two categories: bottom-up and top-down approaches. Bottom-up approaches [31, 47, 5] first detect words based on local features (white/black pixels or connected components), then sequentially group words into text lines and paragraphs. However, such approaches suffer from the identification and grouping of connected components being time-consuming. Top-down approaches [23, 22] iteratively split a page into columns, blocks, text lines and words. With both of these approaches it is difficult to correctly segment documents with complex layout, for example a document with nonrectangular figures [39].\nWith recent advances in deep convolutional neural networks, several neural-based models have been proposed. Chen et al. [13] applied a convolutional auto-encoder to learn features from cropped document image patches, then use these features to train a SVM [16] classifier. Vo et al. [53] proposed using FCN to detect lines in handwritten document images. However, these methods are strictly restricted to visual cues, and thus are not able to discover the semantic meaning of the underlying text.\nLogical Structure Analysis. Logical structure is defined as a hierarchy of logical components in documents, such as section headings, paragraphs and lists [39]. Early work in logical structure discovery [19, 30, 25, 15] focused on using a set of heuristic rules based on the location, font and text of each sentence. Shilman et al. [46] modeled document layout as a grammar and used machine learning to minimize the cost of a invalid parsing. Luong et al. [36] proposed using a conditional random fields model to jointly\nlabel each sentence based on several hand-crafted features. However, the performance of these methods is limited by their reliance on hand-crafted features, which cannot capture the highly semantic context.\nSemantic Segmentation. Large-scale annotations [33] and the development of deep neural network approaches such as the fully convolutional network (FCN) [34] have led to rapid improvement of the accuracy of semantic segmentation [14, 43, 42, 55]. However, the originally proposed FCN model has several limitations, such as ignoring small objects and mislabeling large objects due to the fixed receptive field size. To address this issue, Noh et al. [42] proposed using unpooling, a technique that reuses the pooled \u201clocation\u201d at the up-sampling stage. Pinheiro et al. [44] attempted to use skip connections to refine segmentation boundaries. Our model addresses this issue by using a dilated block, inspired by dilated convolutions [55] and recent work [50, 24] that groups several layers together . We further investigate the effectiveness of different approaches to optimize our network architecture.\nCollecting pixel-wise annotations for thousands or millions of images requires massive labor and cost. To this end, several methods [43, 57, 35] have been proposed to harness weak annotations (bounding-box level or image level annotations) in neural network training. Our consistency loss relies on similar intuition but does not require a \u201cclass label\u201d for each bounding box.\nUnsupervised Learning. Several methods have been proposed to use unsupervised learning to improve supervised learning tasks. Mairal et al. [37] proposed a sparse coding method that learns sparse local features by sparsityconstrained reconstruction loss functions. Zhao et al. [59] proposed a Stacked What-Where Auto-Encoder that uses unpooling during reconstruction. By injecting noise into the input and the middle features, a denoising auto-encoder [52] can learn robust filters that recover uncorrupted input. The main focus in unsupervised learning has been image-level classification and generative approaches, whereas in this paper we explore the potential of such methods for pixel-wise semantic segmentation.\nWen et al. [54] recently proposed a center loss that encourages data samples with the same label to have a similar visual representation. Similarly, we introduce an intra-class consistency constraint. However, the \u201ccenter\u201d for each class in their loss is determined by data samples across the whole dataset, while in our case the \u201ccenter\u201d is locally determined by pixels within the same region in each image.\nLanguage and Vision. Several joint learning tasks such as image captioning [17, 29], visual question answering [6, 21, 38], and one-shot learning [20, 49, 12] have demonstrated the significant impact of using textual and visual representations in a joint framework. Our work is unique in that we use textual embedding directly for a seg-\nmentation task for the first time, and we show that our approach improves the results of traditional segmentation approaches that only use visual cues."}, {"heading": "3. Method", "text": "Our method does supervised training for pixel-wise segmentation with a specialized multimodal fully convolutional network that uses a text embedding map jointly with the visual cues. Moreover, our MFCN architecture also supports two unsupervised learning tasks to improve the learned document representation: a reconstruction task based on an auxiliary decoder and a consistency task evaluated in the main decoder branch along with the per-pixel segmentation loss."}, {"heading": "3.1. Multimodal Fully Convolutional Network", "text": "As shown in Fig. 2, our MFCN model has four parts: an encoder, two decoders and a bridge. The encoder and decoder parts roughly follow the architecture guidelines set forth by Noh et al. [42]. However, several changes have been made to better address document segmentation.\nFirst, we observe that several semantic-based classes such as section heading and caption usually occupy relatively small areas. Moreover, correctly identifying certain regions often relies on small visual cues, like lists being identified by small bullets or numbers in front of each item. This suggests that low-level features need to be used. However, because max-pooling naturally loses information during downsampling, FCN often performs poorly for small objects. Long et al. [34] attempt to avoid this problem using skip connections. However, simply averaging independent predictions based on features at different scales does not provide a satisfying solution. Low-level representations, limited by the local receptive field, are not aware of objectlevel semantic information; on the other hand, high-level features are not necessarily aligned consistently with object boundaries because CNN models are invariant to translation. We propose an alternative skip connection implementation, illustrated by the blue arrows in Fig. 2, similar to that used in the independent work SharpMask [44]. However, they use bilinear upsampling after skip connection while we use unpooling to preserve more spatial information.\nWe also notice that broader context information is needed to identify certain objects. For an instance, it is often difficult to tell the difference between a list and several paragraphs by only looking at parts of them. In Fig. 3, to correctly segment the right part of the list, the receptive fields must be large enough to capture the bullets on the left. Inspired by the Inception architecture [50] and dilated convolution [55], we propose a dilated convolution block, which is illustrated in Fig. 4 (left). Each dilated convolution block consists of 5 dilated convolutions with a 3 \u00d7 3 kernel size and a dilation d = 1, 2, 4, 8, 16."}, {"heading": "3.2. Text Embedding Map", "text": "Traditional image semantic segmentation models learn the semantic meanings of objects from a visual perspective. Our task, however, also requires understanding the text in images from a linguistic perspective. Therefore, we build a text embedding map and feed it to our multimodal model to make use of both visual and textual representations.\nWe treat a sentence as the minimum unit that conveys certain semantic meanings, and represent it using a lowdimensional vector. Our sentence embedding is built by averaging embeddings for individual words. This is a simple yet effective method that has been shown to be useful in many applications, including sentiment analysis [27] and text classification [28]. Using such embeddings, we create a text embedding map as follows: for each pixel inside the area of a sentence, we use the corresponding sentence embedding as the input. Pixels that belong to the same sentence thus share the same embedding. Pixels that do not belong to any sentences will be filled with zero vectors. For a document image of size H \u00d7 W , this process results in an embedding map of size N \u00d7H \u00d7W if the learned sentence embeddings are N -dimensional vectors. The embedding map is later concatenated with a feature response along the number-of-channel dimensions (see Fig. 2).\nSpecifically, our word embedding is learned using the skip-gram model [40, 41]. Fig. 4 (right) shows the basic diagram. Let V be the number of words in a vocabulary and w be a V -dimensional one-hot vector representing a word. The training objective is to find a N -dimensional (N V ) vector representation for each word that is useful for predicting the neighboring words. More formally, given a sequence of words [w1, w2, \u00b7 \u00b7 \u00b7 , wT ], we maximize the average log probability\n1\nT T\u2211 t=1 \u2211 \u2212C\u2264j\u2264C,j 6=0 logP (wt+j |wt) (1)\nwhere T is the length of the sequence and C is the size of the context window. The probability of outputting a word\nwo given an input word wi is defined using softmax:\nP (wo|wi) = exp(v\n\u2032 wo > vwi)\u2211V\nw=1 exp(v \u2032 w > vwi)\n(2)\nwhere vw and v \u2032\nw are the \u201cinput\u201d and \u201coutput\u201d N - dimensional vector representations of w."}, {"heading": "3.3. Unsupervised Tasks", "text": "Although our synthetic documents (Sec. 4) provide a large amount of labeled data for training, they are limited in the variations of their layouts. To this end, we define two unsupervised loss functions to make use of real documents and to encourage better representation learning.\nReconstruction Task. It has been shown that reconstruction can help learning better representations and therefore improves performance for supervised tasks [59, 58]. We thus introduce a second decoder pathway (Fig. 2 - axillary decoder), denoted as Drec, and define a reconstruction loss at intermediate features. This auxiliary decoder only exists during the training phase.\nLet al, l = 1, 2, \u00b7 \u00b7 \u00b7L be the activations of the lth layer of the encoder, and a0 be the input image. For a feed-forward convolutional network, al is a feature map of size Cl\u00d7Hl\u00d7 Wl. Our auxiliary decoder Drec attempts to reconstruct a hierarchy of feature maps {a\u0303l}. Reconstruction loss L(l)rec for a specific l is therefore defined as\nL(l)rec = 1\nClHlWl \u2016al \u2212 a\u0303l\u201622 , l = 0, 1, 2, \u00b7 \u00b7 \u00b7L (3)\nConsistency Task. Pixel-wise annotations are laborintensive to obtain, however it is relatively easy to get a set of bounding boxes for detected objects in a document. For documents in PDF format, one can find bounding boxes by analyzing the rendering commands in the PDF files (See our supplementary document for typical examples). Even if their labels remain unknown, these bounding boxes are still beneficial: they provide knowledge of which parts of a document belongs to the same objects and thus should not be segmented into different fragments.\nBy building on the intuition that regions belonging to same objects should have similar feature representations, we define the consistency task loss Lcons as follows. Let p(i,j) (i = 1, 2, \u00b7 \u00b7 \u00b7H, j = 1, 2, \u00b7 \u00b7 \u00b7W ) be activations at location (i, j) in a feature map of size C \u00d7H \u00d7W , and b be the rectangular area in a bounding box. Let each rectangular area b is of size Hb \u00d7Wb. Then, for each b \u2208 B, Lcons will be given by\nLcons = 1\nHbWb \u2211 (i,j)\u2208b \u2225\u2225\u2225p(i,j) \u2212 p(b)\u2225\u2225\u22252 2\n(4)\np(b) = 1\nHbWb \u2211 (i,j)\u2208b p(i,j) (5)\nMinimizing consistency loss Lcons encourages intra-region consistency.\nThe consistency loss Lcons is differentiable and can be optimized using stochastic gradient descent. The gradient of Lcons with respect to p(i,j) is\n\u2202Lcons \u2202p(i,j) = 2 H2bW 2 b (p(i,j) \u2212 p(b))(HbWb \u2212 1)+\n2\nH2bW 2 b \u2211 (u,v)\u2208b\n(u,v)6=(i,j)\n(p(b) \u2212 p(u,v)) (6)\nsince HbWb 1, for efficiency it can be approximated by:\n\u2202Lcons \u2202p(i,j) \u2248 2 HbWb\n( p(i,j) \u2212 p(b) ) . (7)\nWe use the unsupervised consistency loss, Lcons, as a loss layer, that is evaluated at the main decoder branch (blue branch in Fig. 2) along with supervised segmentation loss."}, {"heading": "4. Synthetic Document Data", "text": "Since our MFCN aims to generate a segmentation mask of the whole document image, pixel-wise annotations are required for the supervised task. While there are several publicly available datasets for page segmentation [45, 51, 7], there are only a few hundred to a few thousand pages in each. Furthermore, the types of labels are limited, for example to text, figure and table, however our goal is to perform a much more granular segmentation.\nTo address these issues, we created a synthetic data engine, capable of generating large-scale, pixel-wise annotated documents.\nOur synthetic document engine uses two methods to generate documents. The first produces completely automated and random layout of partial data scraped from the web. More specifically, we generate LaTeX source files in which paragraphs, figures, tables, captions, section headings and lists are randomly arranged to make up single, double, or\ntriple-column PDFs. Candidate figures include academicstyle figures and graphic drawings downloaded using web image search, and natural images from MS COCO [33], which associates each image with several captions. Candidate tables are downloaded using web image search. Various queries are used to increase the diversity of downloaded tables. Since our MFCN model relies on the semantic meaning of text to make prediction, the content of text regions (paragraph, section heading, list, caption) must be carefully selected:\n\u2022 For paragraphs, we randomly sample sentences from a 2016 English Wikipedia dump [4].\n\u2022 For section headings, we only sample sentences and phrases that are section or subsection headings in the \u201cContents\u201d block in a Wikipedia page.\n\u2022 For lists, we ensure that all items in a list come from the same Wikipedia page.\n\u2022 For captions, we either use the associated caption (for images from MS COCO) or the title of the image in web image search, which can be found in the span with class name \u201circ pt\u201d.\nTo further increase the complexity of the generated document layouts, we collected and labeled 271 documents with varied, complicated layouts. We then randomly replaced each element with a standalone paragraph, figure, table, caption, section heading or list generated as stated above.\nIn total, our synthetic dataset contains 135,000 document images. Examples of our synthetic documents are shown in Fig. 5. Please refer to our supplementary document for more examples of synthetic documents and individual elements used in the generation process."}, {"heading": "5. Implementation Details", "text": "Fig. 2 summarizes the architecture of our model. The auxiliary decoder only exists in the training phase. All convolutional layers have a 3 \u00d7 3 kernel size and a stride of 1. The pooling (in the encoders) and unpooling (in the decoders) have a kernel size of 2\u00d7 2. We adopt batch normalization [26] immediately after each convolution and before all non-linear functions.\nWe perform per-channel mean subtraction and resize each input image so that its longer side is less than 384 pixels. No other pre-processing is applied. We use Adadelta [56] with a mini-batch size of 2. During semisupervised training, mini-batches of synthetic and real documents are used alternatively. For synthetic documents, both per-pixel classification loss and the unsupervised losses are active at back-propagation, while for real documents, only the unsupervised losses are active. Since the labels are unbalanced (e.g. the area of paragraphs is\nlabel colors are: figure , table , section heading , caption , list and paragraph .\nmuch larger than that of caption), class weights for the perpixel classification loss are set differently according to the total number of pixels in each class in the training set.\nFor text embedding, we represent each word as a 128- dimensional vector and train a skip-gram model on the 2016 English Wikipedia dump [4]. Embeddings for outof-dictionary words are obtained following Bojanowski et al. [10]. We use Tesseract [48] as our OCR engine.\nPost-processing. We apply an optional post-processing step as a cleanup strategy for segment masks. For documents in PDF format, we obtain a set of candidate bounding boxes by analyzing the PDF format to find element boxes. We then refine the segmentation masks by first calculating the average class probability for pixels belonging to the same box, followed by assigning the most likely label to these pixels."}, {"heading": "6. Experiments", "text": "We used three datasets for evaluations: ICDAR2015 [7], SectLabel [36] and our new dataset named DSSE-200. ICDAR2015 [7] is a dataset used in the biennial ICDAR page segmentation competitions [8] focusing more on appearance-based regions. The evaluation set of ICDAR2015 consists of 70 sampled pages from contemporary magazines and technical articles. SectLabel [36] consists of 40 academic papers with 347 pages in the field of computer science. Each text line in these papers is manually assigned a semantics-based label such as text, section heading or list item. In addition to these two datasets, we introduce DSSE-2001, which provides both appearance-based and semantics-based labels. DSSE-200 contains 200 pages from magazines and academic papers. Regions in a page are assigned labels from the following dictionary: figure, table, section, caption, list and paragraph. Note that DSSE-200 has a more granular segmentation than previously released benchmark datasets.\nThe performance is measured in terms of pixel-wise\n1http://personal.psu.edu/xuy111/projects/ cvpr2017_doc.html.\nintersection-over-union (IoU), which is standard in semantic segmentation tasks. We optimize the architecture of our MFCN model based on the DSSE-200 dataset since it contains both appearance-based and semantics-based labels. Sec. 6.4 compares our results to state-of-the-art methods on the ICDAR2015 and SectLabel datasets."}, {"heading": "6.1. Ablation Experiment on Model Architecture", "text": "We first systematically evaluate the effectiveness of different network architectures. Results are shown in Table 1. Note that these results do not incorporate textual information or unsupervised learning tasks. The purpose of this experiment is to find the best \u201cbase\u201d architecture to be used in the following experiments. All models are trained from scratch and evaluated on the DSSE-200 dataset.\nAs a simple baseline (Table 1 Model1), we train a plain encoder-decoder style model for document segmentation. It consists of a feed-forward convolutional network as an encoder, and a decoder implemented by a fully convolutional network. Upsampling is done by bilinear interpolation. This model achieves a mean IoU of 61.4%.\nNext, we add skip connections to the model, resulting in Model2. Note that this model is similar to the SharpMask model. We observe a mean IoU of 65.4%, 4% better than the base model. The improvements are even more significant for small objects like captions.\nWe further evaluate the effectiveness of replacing bilinear upsampling with unpooling, giving Model3. All upsampling layers in Model2 are replaced by unpooling while other parts are kept unchanged. Doing so results in a significant improvement for mean IoU (65.4% vs. 71.2%). This suggests that the pooled index should not be discarded during decoding. These indexes are helpful to disambiguate the location information when constructing the segmentation mask in the decoder.\nFinally, we investigate the use of dilated convolutions. Model3 is equivalent to using dilated convolution when d = 1. Model4 sets d = 8 while Model5 uses the dilated block illustrated in Fig. 4 (left). The number of output channels are adjusted such that the total number of parame-\nters are similar. Comparing the results for these three models, we can see that the IoU of Model4 for each class is on par with or worse than Model3, while Model5 is better than both Model3 and Model4 for all classes."}, {"heading": "6.2. Adding Textual Information", "text": "We now investigate the importance of textual information in our multimodal model. We take the best architecture, Model5, as our vision-only model, and incorporate a text embedding map via a bridge module depicted in Fig. 2. This combined model is fine-tuned on our synthetic documents. As shown in Table 2, using text as well improves the performance for textual classes. The accuracy for section heading, caption, list and paragraph is boosted by 1.1%, 0.1%, 1.7% and 2.2%, respectively.\nWe rely on existing OCR engines [48] to extract text, but they are not always reliable for scanned documents of low quality. To quantitatively analyze the effects of using extracted text, we compare the performance of using extracted text versus real text. The comparison is conducted on a subset of our synthetic dataset (200 images), since ground-truth text is naturally available. As shown in Table 2, using real text leads to a remarkable improvement (6.4%) for mean IoU, suggesting the effectiveness of incorporating textual information. Using OCR extracted text is not as effective, but still results in 2.6% improvement. It is better than the 0.3% improvement on DSSE-200 dataset; we attribute this to our synthetic data not being as complicated as DSSE-200, so extracting text becomes easier."}, {"heading": "6.3. Unsupervised Learning Tasks", "text": "Here, we examine how the proposed two unsupervised learning tasks \u2014 reconstruction and consistency tasks \u2014 can complement the pixel-wise classification during training. We take the best model in Sec. 6.2, and only change the training objectives. Our model is then fine-tuned in a semisupervised manner as described in Sec. 5. The results are shown in Table 3. Adding the reconstruction task slightly improves the mean IoU by 0.6%, while adding the consistency task leads to a boost of 1.9%. These results justify our hypothesis that harnessing region information is beneficial. Combining both tasks results in a mean IoU of 75.9%."}, {"heading": "6.4. Comparisons with Prior Art", "text": "Table 4 and 5 present comparisons with several methods that have previously reported performance on the ICDAR2015 and SectLabel datasets. It is worth emphasiz-\ning that our MFCN model simultaneously predicts both appearance-based and semantics-based classes while other methods can not.\nComparisons on ICDAR2015 dataset (Table 4). Previous pixel-wise page segmentation models usually solve a binary segmentation problem and do not make predictions for fine-grained classes. For fair comparison, we change the number of output channels of the last layer to 3 (background, figure and text) and fine-tune this last layer. Our binary MFCN model achieves 94.5%, 91.0% and 77.1% IoU scores for non-text (background and figure), text and figure regions, outperforming other models.\nComparisons on SectLabel dataset (Table 5). Luong et at. [36] first use Omnipage [3] to localize and recognize text lines, then predict the semantics-based label for each line. The F1 score for each class was reported. For fair comparison, we use the same set of text line bounding boxes, and use the averaged pixel-wise prediction as the label for each text line. Our model achieves better F1 scores for section heading (0.919 VS 0.916), caption (0.893 VS 0.781) and list (0.793 VS 0.712), while being capable of identifying figures and tables."}, {"heading": "7. Conclusion", "text": "We proposed a multimodal fully convolutional network (MFCN) for document semantic structure extraction. The proposed model uses both visual and textual information. Moreover, we propose an efficient synthetic data generation method that yields per-pixel ground-truth. Our unsupervised auxiliary tasks help boost performance tapping into unlabeled real documents, facilitating better representation learning. We showed that both the multimodal approach and unsupervised tasks can help improve performance. Our results indicate that we have improved the state of the art on previously established benchmarks. In addition, we are publicly providing the large synthetic dataset (135,000 pages) as well as a new benchmark dataset: DSSE-200."}, {"heading": "Acknowledgment", "text": "This work started during Xiao Yang\u2019s internship at Adobe Research. This work was supported by NSF grant CCF 1317560 and Adobe Systems Inc."}, {"heading": "A. Synthetic Document Data", "text": "We introduced two methods to generate documents. In the first method, we generate LaTeX source files in which elements like paragraphs, figures, tables, captions, section headings and lists are randomly arranged using the \u201ctextblock\u201d environment from the \u201ctextpos\u201d package. Compiling these LaTeX files gives single, double, or triplecolumn PDFs. The generation process is summarized in Algorithm 1.\nAlgorithm 1 Synthetic Document Generation 1: s\u2190 a string containing preamble and necessary pack-\nages of a LaTeX source file 2: Select a LaTeX source file type T \u2208 {single-column,\ndouble-column, triple-column} 3: while space remains on the page do 4: Select an element type E \u2208 {figure, table, caption,\nsection heading, list, paragraph} 5: Select an example e of type E 6: se \u2190 a string of LaTeX code that generates e using\nthe \u201ctextblock\u201d environment 7: s\u2190 s + se 8: end while\nOutput: s Output: A PDF document after compiling s\nElements in a document are carefully selected following the guidelines below. Figure 7 shows several examples of the figures and tables used in the synthetic data generation.\n\u2022 Candidate figures include natural images from MS COCO [33], academic-style figures and graphic drawings downloaded using web image search.\n\u2022 Candidates tables include table images downloaded using web image search. Various queries are used to increase the diversity of downloaded tables.\n\u2022 For paragraphs, we randomly sample sentences from a 2016 English Wikipedia dump [4].\n\u2022 For section headings, we sample sentences and phrases that are section or subsection headings in the \u201cContents\u201d block in a Wikipedia page.\n\u2022 For lists, we sample list items from Wikipedia pages, ensuring that all items in a list come from the same Wikipedia page.\n\u2022 For captions, we either use the associated caption (for images from MS COCO) or the title of the image in web image search, which can be found in the span with class name \u201circ pt\u201d.\nIn the second document generation method, we collected and labeled 271 documents with varied, complicated layouts. We then randomly replaced each element with a standalone paragraph, figure, table, caption, section heading or list generated as stated above. Figure 8 shows several examples from the 271 documents.\nB. Visualizing the Segmentation Results Each pixel p in the model\u2019s output layer is assigned the color of the most likely class label l. The RGB value of that color is then weighted by the probability P(l)."}, {"heading": "C. Post-processing", "text": "We apply an optional post-processing step to clean up segment masks for documents in PDF format. First, we obtain candidate bounding boxes by using the auto-tagging capabilities of Adobe Acrobat [2] and parsing the results. Boxes are stored in a tree structure, and each node\u2019s box can be a TextRun (a sequence of characters), TextLine (potentially a text line), Paragraph (potentially a paragraph) or Container (potentially figures or tables). Note that we ignore the semantic meanings associated with these boxes and only use the boxes as candidate bounding boxes in postprocessing. Figure 9 (2) and 10 (2) illustrate candidate bounding boxes for each document.\nAlgorithm 2 Segmentation Post-processing\nInput: P \u2190 probability map, P (u, v) \u2208 R|C| is a vector containing the probability of each class c \u2208 C at location (u, v) Input: Boxes\u2190 candidate bounding boxes 1: S \u2190 segmentation to be generated 2: for each location (x, y) \u2208 S do 3: S(x, y)\u2190 background 4: end for 5: for each b \u2208 Boxes do . parent box comes before\nchild boxes 6: p\u0304\u2190 \u2211 (u,v)\u2208b P (u, v) 7: l\u2190 argmax p\u0304 8: for each location (u, v) \u2208 b do 9: if S(u, v) is background then\n10: S(u, v)\u2190 l 11: end if 12: end for 13: end for Output: S\nUsing these bounding box candidates, we refine the segmentation masks by first calculating the average class probability for pixels belonging to the same box, followed by assigning the most likely label to these pixels. The process is summarized in Algorithm 2."}, {"heading": "D. Additional Visualization Results", "text": "Figures 9 and 10 show additional visualization examples of synthetic documents, and Figure 11 shows additional examples of real documents.\nprocessing. Segmentation label colors are: figure , table , section heading , caption , list and paragraph .\nprocessing. Segmentation label colors are: figure , table , section heading , caption , list and paragraph .\nsection heading , caption , list and paragraph ."}], "references": [], "referenceMentions": [], "year": 2017, "abstractText": "We present an end-to-end, multimodal, fully convolu-<lb>tional network for extracting semantic structures from doc-<lb>ument images. We consider document semantic structure<lb>extraction as a pixel-wise segmentation task, and propose a<lb>unified model that classifies pixels based not only on their<lb>visual appearance, as in the traditional page segmentation<lb>task, but also on the content of underlying text. Moreover,<lb>we propose an efficient synthetic document generation pro-<lb>cess that we use to generate pretraining data for our net-<lb>work. Once the network is trained on a large set of synthetic<lb>documents, we fine-tune the network on unlabeled real doc-<lb>uments using a semi-supervised approach. We systemati-<lb>cally study the optimum network architecture and show that<lb>both our multimodal approach and the synthetic data pre-<lb>training significantly boost the performance.", "creator": "LaTeX with hyperref package"}}}