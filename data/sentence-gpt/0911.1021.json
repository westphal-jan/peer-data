{"id": "0911.1021", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-Nov-2009", "title": "Examples as Interaction: On Humans Teaching a Computer to Play a Game", "abstract": "This paper reviews an experiment in human-computer interaction, where interaction takes place when humans attempt to teach a computer to play a strategy board game. We show that while individually learned models can be shown to improve the playing performance of the computer, their straightforward composition results in diluting what was earlier learned. This observation suggests that interaction cannot be easily distributed when one hopes to harness multiple human experts to develop a quality computer player. In this case, we demonstrate that there is no need to develop one to improve computer performance in any way in which they can play a strategy board game.\n\n\n\n\n\nThis paper provides empirical proof that the performance of computer systems is limited by the fact that interaction cannot be easily distributed among a variety of users. It suggests that computer designers are also limited in their ability to play an effective game.\nTo illustrate the importance of the ability to teach and explain interaction, we use three models: one with a variety of participants, the other with a variety of participants, the other with a variety of participants, and the first using a set of participants. Each model also shows that each participant has to use the same set of participants, to make up the difference between groups. This provides two possibilities for understanding the performance of each participant. For example, each participant with the highest scores in the first model (i.e. an average of 7.8%) uses the same set of participants (i.e. an average of 3.5%), whereas the participants with the lowest scores in the second model (i.e. an average of 4.0%) uses the same set of participants (i.e. an average of 3.4%).\nThe results of the experiment indicate that people who do not teach the computer are more likely to improve their playing abilities than those who do not. While it is also true that some individuals have better performing computer games than others, the performance of a computer game is not always equally important. This may seem to imply that an individual may have better performance than other people. However, there is also evidence that some people with lower scores do better than others.\nAlthough we do not study computer performance in different ways in the same way, we have found that computer scientists are limited in their ability to learn information about the performance of a computer.\nIn fact, many computer scientists have used computer models which represent the same human interaction problems, as shown in Figure 1. We show that computer scientists in particular do not have enough knowledge to evaluate the performance of the computer. This is because", "histories": [["v1", "Thu, 5 Nov 2009 12:58:46 GMT  (193kb)", "http://arxiv.org/abs/0911.1021v1", "15 pages, 1 figure, 13 tables, submitted to a journal"]], "COMMENTS": "15 pages, 1 figure, 13 tables, submitted to a journal", "reviews": [], "SUBJECTS": "cs.AI cs.GT", "authors": ["dimitris kalles", "ilias fykouras"], "accepted": false, "id": "0911.1021"}, "pdf": {"name": "0911.1021.pdf", "metadata": {"source": "CRF", "title": "EXAMPLES AS INTERACTION: ON HUMANS TEACHING A COMPUTER TO PLAY A GAME", "authors": ["DIMITRIS KALLES"], "emails": ["kalles@eap.gr", "fykouras@sch.gr"], "sections": [{"heading": null, "text": "1\nEXAMPLES AS INTERACTION: ON HUMANS TEACHING A COMPUTER TO PLAY A GAME\nDIMITRIS KALLES\nHellenic Open University, Tsamadou 13-15, Patras, 26222, Greece\nkalles@eap.gr\nILIAS FYKOURAS\nHellenic Open University, Tsamadou 13-15, Patras, 26222, Greece\nfykouras@sch.gr\nReceived (Day Month Year) Revised (Day Month Year) Accepted (Day Month Year)\nThis paper reviews an experiment in human-computer interaction, where interaction takes place when humans attempt to teach a computer to play a strategy board game. We show that while individually learned models can be shown to improve the playing performance of the computer, their straightforward composition results in diluting what was earlier learned. This observation suggests that interaction cannot be easily distributed when one hopes to harness multiple human experts to develop a quality computer player. This is related to similar approaches in robot task learning and to classic approaches to human learning and reinforces the need to develop tools that facilitate the mix of human-based tuition and computer self-learning.\nKeywords: Strategy board games; human-guided machine learning; self-play learning; model comparison and composition; reinforcement learning; neural networks."}, {"heading": "1. Introduction", "text": "Programming a computer what to do is a task that lies at one end of the spectrum spanning interactive behavior of computers. Shifting a bit, using a shell-like development environment, that completes commands as soon as there are no alternatives to what the user will type, is surely a behavior that is worth being shifted a little from that far-end point of nearly-no-interaction. About two decades ago that behavior would likely have also been called \u201cintelligent\u201d even though it might have just employed a trie for indexing the shell commands. Today, of course, we reserve the \u201cintelligent\u201d tag for computing behaviors that are far richer in content and structure than the automatic completion of unfinished commands.\nExtending the programming parable we note that today we have a range of tools at our disposal that are built with deep knowledge of the development process and intelligent compilers that generate speculative code; all these suggest that software development now demonstrates some noteworthy richness in its human-computer component. Actually, such shifts along the capabilities of the \u201cinteraction spectrum\u201d also highlight how machine learning has also evolved over the last two-three decades. While\nKalles and Fykouras 2\nearlier we addressed applications of learning that only used propositional data, we now try to infer structure, to deal with temporal aspects of learning problems and to use intelligent techniques not merely as classifiers but as discoverers of new knowledge.\nIt is thus only natural that some machine learning techniques have made inroads into problems that demonstrate a significant human-computer interaction component. Games are a prime example of such an application; Shannon1 and Samuel2 provided the first stimulating examples, Deep Blue defeated Kasparov at chess in 19973 and, more recently, Schaeffer\u2019s team solved checkers completely.4 Of course, in-between those years and quite before the successes of computer programs, there has been a thriving market for strategy games playing machines for the public. The advances of machine learning techniques now allow us to tackle a much more difficult and challenging question: how can a person instruct a computer to play a game by simply showing it how to play? This is a new human computer interaction problem \u2013 we are given a computer that is equipped with a generic learning mechanism and we have the task to present to it a \u201csyllabus\u201d of experience that will allow it to formulate playing knowledge.\nThis paper is about using humans as experts who attempt to teach a computer how to play a strategy board game. We pursue this line of work because we are both interested in exploring the distinct human styles in instructing machines and, on top of that, to investigate whether expert playing behavior can be generalized from brief, not-so-expert, training sessions. Our main experimental result is that while individual training sessions between a human and a computer can improve the computer\u2019s performance, a straightforward composition of individually learned behaviors is not yet possible. To arrive at this observation we designed and carried out about 1,000 human-vs.-computer games and about 500,000 computer-vs.-computer games.\nFor our work, we used two distinct groups of users, one consisting of high-school students and one consisting of their tutors, across various disciplines. The workbench we use is a relatively simple strategy board game that, for legacy reasons, is called RLGame, since it uses reinforcement learning as the sole learning mechanism to infer how to play by observing games in action.\nThe reason we are interested in investigating both pupils and teachers is primarily because these two groups have such a huge gap in their academic development, experience and perception of how one instructs, that they constitute a fascinating user group for testing artificial intelligence based interaction on the assumption that a computer starts by knowing nothing.\nThe rest of this paper is structured in five sections. We first review the work that is most closely related to our research, on aspects of human-computer interaction in machine leaning in games. We then review our work on the subject, present the rules of the games we use as a workbench and the experiments conducted so far, to draw the base upon which we extend our work. We then present the experiments we designed and carried out with high school pupils and their teachers, as well as the automated experiments that help us make a comparison. We then discuss our findings and we\nLearning to Play Games by Observing Humans 3\nconclude, also presenting the ramifications of our work for human-computer interaction in learning systems at large."}, {"heading": "2. A brief review of related work", "text": "Thomaz and Breazeal5 offer a concise yet informative account of recent attempts to exploit human interaction in human-trainable systems. Their summary review identifies at least three major dimensions of such systems that can be viewed as control knobs in the human-computer interaction loop.\nOne first such dimension has to do with the classic (and, quite mainstream) approach to personalization and adaptability of user interfaces where one simply collects raw items of user behavior and then attempts to elicit structure, intention or habit from such data.6,7 The human may be aware of the data collection process but no specific attempt is made to act as \u201cteacher\u201d. This approach, of course, has its roots to one archetypal design peculiarity of knowledge-based systems: the elicitation of knowledge by various techniques except interviews, by observation or by measurement, to name a couple. Any result in investigating how to best utilise expert involvement will likely have significant ramifications in the design of such systems.\nA further related dimension is the identification of how control is exerted. While the first dimension clearly associates learning with a passive computer, one might elect a more proactive approach whereby the computer (as a student) identifies gaps in its knowledge and generates actions (or, queries) to fill these gaps; this can be done fully or partially (for example, by generating actions that minimize some measure of the knowledge gap8). But, learning in games is a domain where such identification of where control is exerted is not straightforward, since a system may generate the right queries but the human tutor may respond unpredictably and not according to the plan.\nYet another dimension is whether the human tutor is a part of the training mechanism at all times; this would mean that every step is subject to human critique. This approach draws on nature inspired paradigms, such as clicker-training*, and its representatives are systems where continuous but simple feedback suffices to train robots.9,10,11\nAn approach that has attracted a lot of attention is to use the human tutor for focused guidance and, subsequently, to use some mechanism of self-improvement up to a point where, again, the human tutor will be called into action to provide a correction of direction, if required; this can go ad infinitum.\nThis approach draws heavily on a human learning analogy. When confronted with strategy issues in an unknown field humans usually learn by trial and error. By confronting problems in a new domain we slowly develop measures of success and of measuring up the difficulty of the problem at hand. But, when on one\u2019s own, the selection of problems is a delicate issue and can easily lead to deadlocks and a feeling of * A clicker emits a brief and sharp sound upon pressing it. This sound does not mean anything by itself for the animal but a trainer can associate it with things that the animal instinctively finds rewarding such as food. After a certain number of such associations, the clicker starts meaning that a reward will come soon; this is the point where the trainer can start guiding the animal towards the desired behavior.9\nKalles and Fykouras 4\nunderachievement. A problem that is addressed at too fine a resolution focuses us too much and we may be unable to generalize if we are novices. On the other hand, if the resolution is not fine enough, we will be unable learn something specific upon which to build on.\nMuch more effective is the employment of a tutor, if we can afford one. Our research navigates on the fine line between the sparseness and density of learning examples when the computer serves as the student12,13,14 and the goal is to establish some examples of successfully tuning the \u201csyllabus\u201d. Along that direction we expect that the length and the content of a training session will slowly become evident (but, automatically so) if we spend enough time even with very simple feedback (and, here, we draw again a contrast to conventional clicker training9, where the length of the training sessions is fine tuned by trainers).\nA considerable line of research involves the merging of low-level associative (similarity-based) search with higher-level (for example, spatial awareness) cognitivebased rules.15 We believe that this resonates well with approaches which emphasize an interactive behaviour in learning5,16,17,18, where one would ideally switch from focused human training to autonomous crawling between promising alternatives. Our own results confirm this approach and are in line with observations that there is research value in investigating human impact in learning a new game precisely because it is worth exploring how a disturbance affects learning.\u2020"}, {"heading": "3. A brief background on a strategy game workbench", "text": "The game19 is played by two players on an n x n square board. Two a x a square bases are on opposite board corners; the white player starts off the lower left base and the black player starts off the upper right one. Initially, each player possesses \u03b2 pawns. The goal is to move a pawn into the opponent\u2019s base. Currently, we use n = 8, a = 2 and \u03b2 = 10.\nThe base is considered as a single square, therefore a pawn can move out of the base to any adjacent free square. Players take turns and pawns move one at a time. A pawn can move vertically or horizontally to an adjacent free square, provided that the maximum distance from its base is not decreased (so, backward moves are not allowed). The distance from the base is defined as the maximum of the horizontal and the vertical distance from the base. A pawn that cannot move is lost (more than one pawn may be lost in one move). A player also loses by running out of pawns.\n\u2020 We use the term disturbance to denote the surprises that a human tutor can present to a learning machine, such as an unanticipated move due to human long-term planning or a skewed reward that may be due to a specific mental or sentimental situation.\nLearning to Play Games by Observing Humans 5\nThe leftmost board in Fig. 1 demonstrates a legal and an illegal move for the pawn pointed to by the arrow, the illegal move being due to the rule that does not allow decreasing the distance from the home (black) base. The rightmost boards demonstrate the loss of pawns, with arrows showing pawn casualties. A \u201ctrapped\u201d pawn automatically draws away from the game; so, when there is no free square next to the base, the rest of the pawns of the base are lost.\nIn RLGame\u2021 the a priori knowledge of the system consists of the rules only. To judge what the next move should be, we use reinforcement learning20 to learn an optimal policy that will maximize the expected sum of rewards in a specific time, determining which action should be taken next given the current state of the environment. We approximate the value function on the game state space with neural networks21, where each next possible move and the current board configuration are fed as input and the network outputs a score that represents the expectation to win by making that move19, as initially adopted in Neurogammon.22\nWe have eventually a commonly used \u03b5-greedy policy with \u03b5=0.9 (the system chooses the best-valued action with a probability of 0.9 and a random action with a probability of 0.1), assigned to all states but the final the same initial value and updated values after each move through TD(0.5), thus halving the influence of credits and penalties for every backward step that we consider. For each neural network, the input layer nodes are the board positions for the next possible move plus a binary attribute on whether a pawn has entered an enemy base and plus some more binary attributes on whether the number of pawns in the home base has exceeded some thresholds, totalling n2-2a2+10 input nodes. The hidden layer consists of half as many hidden nodes. There is one output node; it stores the probability of winning when one starts from a specific game-board configuration and then makes a specific move.\nNote that, while an optimal deterministic optimal policy does exist23 for RLGame, using the neural networks for approximating the state space rules out learning of the optimal policy. We have not investigated if the initial, full state-space representation would make converging to the optimal policy computationally tractable.24\n\u2021 For legacy reasons, the game is still called RLGame to emphasize the technology used for learning.\nKalles and Fykouras 6\n3.1. Reviewing the effects of expert involvement\nThe initial experiments demonstrated that, when trained with self-playing, both players would converge to having nearly equal chances to win19, and that self-playing would achieve weaker performance compared to a computer playing against a human player, even with limited human involvement.16\nThe next round of experimentations delivered support for the reward scheme used todate17 (see Table 1) and offered evidence that human-vs.-computer sessions of 10 games each (HC10) would be preferable to HC1 sessions, when interleaved with computer-vs.computer sessions of 1,000 games each (CC1000).18\nAlong that session, we also devised a way to measure the relative effectiveness of the policies learned by two distinct approaches.18 Assuming that we have available a player, X, with its associated white and black components, WX and BX (the components being the neural networks), we compare it to Y by first pairing WX with BY for a CC1000 session, then pairing WY with BX for a further CC1000 session, and subsequently calculating the number of games won and the average number of moves per game won (see Table 2 for an example showing how player X\u2019s components collectively win Y\u2019s).\nWe then used the above reporting scheme in round-robin tournaments of learning policies (each player competing against every other player; note the difference with elimination tournaments where only winners advance to the next round) and observed that, in general, a low average number of moves per session was associated with one of the sides being a comprehensive winner as reported in the number of games won.\nA novel type of expert was then used in the next experimental round, by employing a min-max algorithm for the moves of the white player. The key observation therein was the pendulum effect: the min-max tutor for the white player actually trains the black one by forcing it to lose; when the tutor goes, the black player overwhelms the white one, which has to adapt itself due to black pressure as fast as possible.25\nLearning to Play Games by Observing Humans 7"}, {"heading": "4. Experimentation and analysis", "text": "For the work reported in this paper, the experimental session consisted of two distinct stages. During the first stage we collect data based on HC40 sessions; this is the stage where humans do their best to teach a computer within a limited number (40) of games. During the second stage, the learned policies are paired in CC1000 rounds of various types of elimination tournaments to obtain insight as to whether some individual attained a clearly good training of its \u201ccomputer\u201d players and to examine whether the composition of players may deliver a better player simply by self-play.\n4.1. Data collection via human-vs.-computer experimentation\nThis session took part in a high school setting where one of the authors serves as teacher. Twenty students aged about 13 were assigned to play RLGame for 40 consecutive games each; the neural networks were initialized before the first game and were being updated throughout the HC40 session. Additionally, twelve teachers were assigned to play RLGame for 40 consecutive games. The age, sex and specialty data of teachers is shown in Table 3\u00a7.\nBased on the current geometric configuration of RLGame, a player needs a minimum of 10 moves to navigate to the enemy base. Table 4 shows the average number of moves per player and player type, in increasing order.\nThe data collection exercise had to be carefully planned. Both groups attended a short presentation on the rules of the games; furthermore, a one-page brochure that served as quick reference outlining the rules and the concept of the experimentation was distributed as an aid throughout the experiments. This brochure helped reinforce their capacity to look for information on their own and helped develop a positive attitude to the experiment, as the thoughtful preparation steps were noticed.\nWe instructed all users that we were asking them to attain two main goals, to win the computer, and to teach it. We emphasized \u201cwinning\u201d to limit the degrees of freedom of\n\u00a7 Subscripts in table values refer to the number of cases with that value, unless otherwise evident or defined.\nKalles and Fykouras 8\nour experiment and to ensure an as equal as possible footing of all learned policies. We also emphasized that the computer learns by wins, losses and pawn eliminations.\nHowever, there were aspects of the experimentation where we had to treat the pupils and their teachers completely separately:\n- Pupils were enthusiastic about the prospect of participating in an experiment, since IT literacy was not a concern and the experiment took place in a familiar class context. Though the graphics of RLGame are not particularly attractive and though game play is not yet challenging for humans, being told that \u201cthe computers learns by what you teach it\u201d was enough of a motivation to sustain the pupils\u2019 focus during the experimentation. Catering to the students\u2019 questions during game-play was a relatively straightforward and not demanding task. - Teachers were less easy to co-ordinate, due to class scheduling, so experiments were carried out one-person-at-a-time with the presence of the resident author. It was instrumental to offer ample support for the teachers\u2019 reservations, which were only secondarily alleviated by pointing out to the scientific orientation of the experiment, the main concern being whether the experiment was a hidden assessment of their tutoring skills. Still, some of them refused to participate. We stress, referring the reader to Table 3, that we only report and use aggregate data and do not link individual sessions back to the people who carried them out.\nFor the sake of completeness we report that the pupils took between 2\u201914\u2019\u2019 and 2\u201943\u2019\u2019 to complete each game, whereas teachers took between 1\u201931\u2019\u2019 and 2\u201953\u2019\u2019.\n4.2. Data analysis via computer-vs.-computer experimentation\nIn all CC experimentations that follow, the initial data consist by the pupils\u2019 and teachers\u2019 learned policies, represented by the neural networks (white and black) as trained during their separate HC40 sessions.\n4.2.1. Pupils-only tournaments\nThe first tournament featured in this section paired students in successive CC1000 elimination rounds but, at each subsequent round, the winning student advanced and reused its initially available neural network.**\nWe remind the reader that even one move in any game is liable to trigger a change in the neural networks of both white and black players; so, while this can happen during the CC1000 round, we do not use the modified neural networks for the next round. In effect, we have a memory-less elimination tournament.\nSince the number of players in not a power of 2, some pupil players entered the elimination tournament after the first round. For a sample result, we present in Table 5 the final round of the tournament. We note that there is a noticeable similarity in how the\n** To be succinct, we use the term \u201cstudent\u201d to refer to the student model as represented by the two neural networks for the white and black player. Furthermore, when pitting two models against each other, we actually need 2 distinct CC1000 sessions (as shown in Table 2).\nLearning to Play Games by Observing Humans 9\nblack players outperform the white ones, both in term of games won and average number of moves; moreover the final round does not demonstrate a comprehensive difference between the two finalists (for clarity, we underline whatever is related to the winner). Going back to individual results from the elimination rounds (which we omit here for space economy) we observed that the further from the final we looked back, the easier both finalists seemed to advance to the next round. In effect, the elimination tournament indeed identified a (relatively-speaking) initially well trained player.\nWe then experimented with a synthesis elimination tournament; therein winners advanced to the next round by using the modified neural networks, as evolved during the matches with their opponents. We review in Table 6 the final round of the tournament (the accents in the players indicate where they originated and how many elimination rounds they survived; fro example P7\u2019\u2019\u2019 refers to how the P7 evolved after three successful elimination rounds). We note that the P17\u2019\u2019\u2019 finalist is a comprehensive winner, but going back to earlier games did not uncover a clear pattern of increasing ease as one moves towards the start of the tournament. This is an indication that a synthesis tournament indeed mixes the learned policies.\nHaving performed the synthesis tournament we pitted Psum (which is P17\u2019\u2019\u2019\u2019) against each original (pupil) player. Psum won 12 games (10 of which comprehensively) and lost the remaining 8 of them (all of which comprehensively).\n4.2.2. Teachers-only tournaments\nTable 7 presents the final round of the teachers\u2019 memory-less elimination tournament. However, this time, we do not observe the similarity seen in Table 5; this also relates to the fact that T10 is a comfortable winner, even in the final. Going back to individual results from the elimination rounds we observed that T1 advanced from the first round to the final through rather close wins, while T10 had a close win in its first match and then advanced comfortably. This reiterates the observation we made in the corresponding pupils\u2019 case, that an initially well trained player won the tournament.\nKalles and Fykouras 10\nTable 8 reviews the final round of the teachers\u2019 synthesis tournament. We note that T12\u2019\u2019\u2019 is a comprehensive winner, but due to the short length of this tournament, we did not attempt to elaborate on how easy it might be to win at the start of the tournament.\nAfter the teachers\u2019 synthesis tournament, however, we were surprised to see that Tsum lost against each original (teacher) player and was able to put up a close performance to only 2 out of the 12 opponents.\n4.2.3. Combination matches\nA reasonable question arises from the above experiments: since the synthesis-produced players are not better than the individual players, does that mean that knowledge of how to play the game cannot be really synthesized but should be accumulated, game by game upon an initial tabula rasa configuration? Alternatively, one could question whether the individual players (20 + 12) did not offer any help to the training of the computer, after all. Still another explanation might be that the sessions were not long enough; of course since we have collected data only on HC40 experiments we can test this hypothesis only on the subsequent CC sessions.\nWe focused on the Tsum player, which produced the worst results. A straightforward extension was to evolve it for a further CC10000 session; call the new player T\u2019sum. We then carried out a CC1000 round-robin tournament between Tsum, T\u2019sum and Psum and report the results of all three matches in Table 9, Table 10 and Table 11 (we drop the sum index in the tables). It is most interesting that while Psum overwhelms Tsum (Table 10), all it takes to reverse this situation is to allow Tsum to evolve to T\u2019sum. This is an indication that the CC1000 sessions may be too small when we are talking about a truly synthetic player.\nLearning to Play Games by Observing Humans 11\nWe then carried a further set of experiments with a new set of expert players. Therein each white player was moving based on a min-max algorithm25. We used five such players, each with an increasing look-ahead value for the min-max algorithm; these values ranged for 1 to 9 (a look-ahead of 2k+1 means that we expand k+1 moves for the white player and k moves for the black one).\nAs with the pupils and the teachers, we ran a short synthesis tournament on these five min-max trained players and produced MCsum. When we compared MCsum to each individual player, we were surprised to see that, in contrast to Tsum and Psum, MCsum beat its individual min-max origins, in one close case and the rest being comfortable ones. Further confirmation of the quality of MCsum was furnished when we saw that it closely beat Psum (Table 12) and comfortably beat Tsum (Table 13), reinforcing our earlier observations about the relative quality of these two synthetic players (as reported in Table 10).\nFinally, and this should come as no surprise to the reader (we omit the tables), MCsum outperformed T\u2019sum (but not with the wide margin it beat Tsum) and P\u2019sum (as generated by a CC10000 evolution of Psum).\nKalles and Fykouras 12"}, {"heading": "5. On the validity and the implication of the results", "text": "Capturing a human\u2019s playing attitude is, first of all, an exercise in developing adequate infrastructure to codify and store that \u201cattitude\u201d. In our case this happens via the reinforcement learning mechanism and the associated approximation of the value function using neural networks.\nA couple or a couple of dozens of games, however, only provide for a snapshot of that attitude. Enlarging that snapshot can be accomplished by obtaining more instances of that attitude (i.e. let humans play more games) or by attempting to generalize from the given instances (i.e. attempt to automatically evolve the learned attitude by extensive automatic self-playing), or by combining the two approaches (note the similarity to the cycle of instructive demonstration, generalization and practice trial, as it appears in the robot task learning terminology11). Judging what the best combination may be necessarily entails a workflow of human computer interaction activities that may be automated only if we have credible metrics that relate to some notion of game playing quality.\nTo date we have evaluated learned players by pitting them against each other. An obvious improvement is to also pit them against a benchmark player (for example, a minmax opponent25, or a scripted opponent). Still the results we have obtained from the tournaments reported in this paper convey the message that \u201ccomposing immature players results in quality degradation\u201d (excerpts of these games are shown in Table 6 and Table 8). Note that our notion of player composition is based on the co-evolutionary learning taking place during reinforcement learning. Immaturity of the individual players seems to be due to the small number of games involved in CC rounds; when this number is raised from 1,000 to 10,000 (excerpts of these games are shown in Table 9 and Table 11) performance increases. Whether immaturity may be also due to a possibly small duration of the HC sessions (currently 40 games long) is also something that warrants investigation; however, that examination also has to take into account the relative richness (or, the lack of it) of the tactics employed by the human player during the game.17 When such richness is constrained by the decision of a human player to only pursue a limited number of options, the result is that only a small part of the value function gets a chance to be learned. So, after all, combining small parts of knowledge developed via reinforcement learning is also likely to create confusion since value updates may take less time to affect previously learned parameters.\nLearning and forgetting what was learned co-exist in a reinforcement learning context; good paths need occasional reinforcement so that learned (useful) value functions do not degrade in approximation quality when alternative paths are explored. Again, however, this seems to be linked to the relative density of high value advice (such is, for example, a concrete playing example by a human), which underlines the conceptual proximity of reinforcement learning to the scaffolding concept in the situated learning approach.10\nA similar problem exists when a tutor unavoidably displays a behavior that is prone to small errors or deviations, maybe due to physical or mental peculiarities (such is, for example, the case with piloting a helicopter; therein, a best trajectory from a departure\nLearning to Play Games by Observing Humans 13\npoint to a destination can be realized as a selection of partially similar real trajectories as followed by a human pilot). In such a context, the learning mechanism has to be designed with a view to subsequently factor out the deviations.26\nFurthermore, there are interesting implications when one considers the possibility of using tutors who at some point may also act as learning adversaries, attempting to misguide the learning computer. Such unwanted learning may be difficult to mitigate, depending on the strength of the adversarial approach27; still, at this point of our research, we view this as an issue of theoretical interest only, since we first need to show how computers can effectively learn from sound advice before tackling adversarial behaviors.\nThe cautious reader may question the use of a high-school teacher or a student as an expert in our experiments. It is true that these people are not experts but, at the current level of playing RLGame as demonstrated by our computers, any reasonable human opponent is expert enough. Moreover, we are keen to promote the interactivity and coevolutionary learning aspects of our approach and it is known that the pleasure to interact may be a key factor of the success of entertainment robotics (which usually employs less sophisticated machine learning algorithms but quite complex protocols in exploiting the interaction of humans and computers).9,11"}, {"heading": "6. Conclusions and future directions", "text": "In this paper we have reviewed experimental approaches to developing game players based on input of sample games played by humans and, subsequently, evolved by computer self-play. We have used two player groups, one consisting of high-school students and one consisting of their tutors, for various disciplines. Both groups demonstrated that, while each individual is able to put forward a particular game-playing tactic that can be used as a basis from improved automatic playing, attempting to merge such behaviors in a straightforward fashion does not result in improved automatic game playing. Initially this seems to suggest that we must rethink how to deploy such synthetic approaches to game play learning; it looks like composition which can exploit parallelism is not as easy as intuition would have lead us believe.\nInteractive evolution is a promising direction. In such a course, one would ideally switch from focused human training to autonomous crawling between promising alternatives. But, as we have discovered during the preparation of this work, the interactivity requirements of the process of improving the computer player is very tightly linked to the availability of a computer-automated environment that supports this development. It is a must to strive to put the expert in the loop as efficiently as possible.\nIn terms of the experiments described above, we have noticed several features of an experimentation system that we have deemed indispensable if one views the project from the point of system efficiency. Such features range from being able to easily design an experimentation batch, direct its results to a specially designed database (to also facilitate reproducibility), automatically process the game statistics and observe correlations, link experimentation batches in terms of succession, while at the same time being able to predesign a whole series of linked experiments with varying parameters of duration and\nKalles and Fykouras 14\nsuccession and then guide the human player to play a game according to that design. We needs to improve interaction if we aim for interactive evolution\nIn the near future we aim to deploy at a larger scale the web-based experimentation engine to collect input from more human players and to link the self-playing sessions to grid-enabled computing for improved efficiency and scalability. In doing so we aim to focus human effort where it is mostly needed (i.e. to provide concrete examples of plat according to an un-specified strategy) and integrate seamlessly with machine intelligence."}, {"heading": "Acknowledgments", "text": "This paper has not been published elsewhere and has not been submitted for publication elsewhere. The paper shares some setting-the-context paragraphs with some referenced papers by the same author, with which it is neither identical nor similar.\nCode and data are available for academic purposes, upon request."}], "references": [{"title": "Programming a computer for playing chess", "author": ["C. Shannon"], "venue": "Philosophical Magazine", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1950}, {"title": "Some Studies in Machine Learning Using the Game of Checkers", "author": ["A. Samuel"], "venue": "IBM Journal of Research and Development", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1959}, {"title": "Behind Deep Blue: Building the Computer that Defeated the World Chess Champion", "author": ["Hsu", "F-H"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2002}, {"title": "Solving Checkers", "author": ["J. Schaeffer", "Y. Bjoernsson", "N. Burch", "A. Kishimoto", "M. Mueller", "R. Lake", "P. Lu", "S. Sutphen"], "venue": "Proceedings of the International Joint Conference on Artificial Intelligence", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2005}, {"title": "Teachable Robots: Understanding Human Teaching Behavior to Build more Effective Robot Learners", "author": ["A.L. Thomaz", "C. Breazeal"], "venue": "Artificial Intelligence", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Collaborative Interface Agents", "author": ["Y. Lashkari", "M. Metral", "P. Maes"], "venue": "Proceedings of the National Conference on Artificial Intelligence, Seattle, WA,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1994}, {"title": "Extracting Knowledge about Users\u2019 Activities from Raw Workstation Contents", "author": ["T.M. Mitchell", "S. Wang", "Y. Huang"], "venue": "Proceedings of the National Conference on Artificial Intelligence,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2006}, {"title": "Active learning with statistical models", "author": ["D. Cohn", "Z. Ghahramani", "M. Jordan"], "venue": "Journal of Artificial Intelligence Research", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1996}, {"title": "Natural methods for robot task learning: Instructive demonstrations, generalization and practice", "author": ["M.J.M.N. Nicolescu"], "venue": "Proceedings of 2 International Conference on Autonomous Agents and Multi-Agent", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2003}, {"title": "Toward an Ideal Trainer", "author": ["S.L. Epstein"], "venue": "Machine Learning", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1994}, {"title": "Opponent Modelling and Commercial Games", "author": ["H.J. van den Herik", "P.H.M.H.H.L.M. Donkersa"], "venue": "Spronck", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2005}, {"title": "Game Theoretic and Machine Learning Techniques for Balancing Games. M.Sc. Thesis, University of Saskatchewan, Canada.  Learning to Play Games by Observing Humans", "author": ["E. Long"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2006}, {"title": "Learning and Applying Competitive Strategies", "author": ["S.L.E. Lock"], "venue": "Proceedings of AAAI-04", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2004}, {"title": "Interactive Verification of Game Design and Playing Strategies", "author": ["D. Kalles", "E. Ntoutsi"], "venue": "Proceedings of IEEE International Conference on Tools with Artificial", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2002}, {"title": "Measuring Expert Impact on Learning how to Play a Board Game", "author": ["D. Kalles"], "venue": "IFIP Conference on Artificial Intelligence Applications and Innovations,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2007}, {"title": "Player co-modelling in a strategy board game: discovering how to play fast", "author": ["D. Kalles"], "venue": "Cybernetics and Systems", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2008}, {"title": "On Verifying Game Design and Playing Strategies using Reinforcement Learning", "author": ["D. Kalles", "P. Kanellopoulos"], "venue": "Proceedings of ACM Symposium on Applied Computing, special track on Artificial Intelligence and Computation", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2001}, {"title": "Learning to Predict by the Methods of Temporal Differences", "author": ["R. Sutton"], "venue": "Machine Learning", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1988}, {"title": "Reinforcement Learning - An Introduction", "author": ["R. Sutton", "A. Barto"], "venue": null, "citeRegEx": "21", "shortCiteRegEx": "21", "year": 1998}, {"title": "Temporal Difference Learning and TD-Gammon", "author": ["G. Tesauro"], "venue": "Communications of the ACM", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1995}, {"title": "Markov Games as a Framework for Multi-Agent Reinforcement Learning", "author": ["M.L. Littman"], "venue": "Proceedings of 11 International Conference on Machine", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1994}, {"title": "The Complexity of Stochastic Games", "author": ["A. Condon"], "venue": "Information and Computation", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 1992}, {"title": "A Minimax Tutor for Learning to Play a Board Game,", "author": ["D. Kalles", "D. Kanellopoulos"], "venue": "Proceedings of the AI in Games Workshop,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2008}, {"title": "Apprenticeship Learning for Helicopter Control", "author": ["A. Coates", "A.Y.P. Abbeel"], "venue": "Communications of the ACM", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2009}, {"title": "Provably Secure Competitive Routing against Proactive Byzantine Adversaries via Reinforcement Learning", "author": ["B. Awerbuch", "D. Holmer", "H. Rubens"], "venue": "Technical Report 5/16/2003,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2003}], "referenceMentions": [], "year": 2009, "abstractText": "This paper reviews an experiment in human-computer interaction, where interaction takes place when humans attempt to teach a computer to play a strategy board game. We show that while individually learned models can be shown to improve the playing performance of the computer, their straightforward composition results in diluting what was earlier learned. This observation suggests that interaction cannot be easily distributed when one hopes to harness multiple human experts to develop a quality computer player. This is related to similar approaches in robot task learning and to classic approaches to human learning and reinforces the need to develop tools that facilitate the mix of human-based tuition and computer self-learning.", "creator": "PScript5.dll Version 5.2.2"}}}