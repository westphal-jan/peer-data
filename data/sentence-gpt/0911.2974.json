{"id": "0911.2974", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Nov-2009", "title": "A Dynamic Near-Optimal Algorithm for Online Linear Programming", "abstract": "We consider the online linear programming problem where the constraint matrix is revealed column by column along with the objective function. We provide a 1-o(1) competitive algorithm for this surprisingly general class of online problems under the assumption of random order of arrival and some mild conditions on the right-hand-side input. Our learning-based algorithm works by dynamically updating a threshold price vector at geometric time intervals, the price learned from the previous steps is used to determine the decision for the current step in the linear programming problem. For example, an estimated cost of $0.25 per step is determined by the linear programming algorithm for an input that has a value of at least $0.00 per step. This method has a 3-d, 5-d linear programming algorithm.\n\n\n\n\n\nTo make a decision based on the linear programming problem, we use the linear programming algorithm in our model: the linear programming algorithm is computed with an input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input of the input", "histories": [["v1", "Mon, 16 Nov 2009 16:39:33 GMT  (22kb)", "https://arxiv.org/abs/0911.2974v1", null], ["v2", "Sat, 4 May 2013 20:10:14 GMT  (88kb,D)", "http://arxiv.org/abs/0911.2974v2", null], ["v3", "Wed, 9 Apr 2014 03:44:37 GMT  (68kb)", "http://arxiv.org/abs/0911.2974v3", null]], "reviews": [], "SUBJECTS": "cs.DS cs.LG", "authors": ["shipra agrawal", "zizhuo wang", "yinyu ye"], "accepted": false, "id": "0911.2974"}, "pdf": {"name": "0911.2974.pdf", "metadata": {"source": "CRF", "title": "A Dynamic Near-Optimal Algorithm for Online Linear Programming", "authors": ["Shipra Agrawal", "Zizhuo Wang", "Yinyu Ye"], "emails": ["shipra@microsoft.com", "zwang@umn.edu", "yinyu-ye@stanford.edu"], "sections": [{"heading": null, "text": "ar X\niv :0\n91 1.\n29 74\nv3 [\ncs .D\nS] 9\nA pr\n2 01\n4 Submitted to Operations Research manuscript (Please, provide the manuscript number!) Authors are encouraged to submit new papers to INFORMS journals by means of a style file template, which includes the journal title. However, use of a template does not certify that the paper has been accepted for publication in the named journal. INFORMS journal templates are for the exclusive purpose of submitting to an INFORMS journal and should not be used to distribute the papers in print or online or to submit the papers to another publication.\nA Dynamic Near-Optimal Algorithm for Online Linear Programming\nShipra Agrawal Microsoft Research India, Bangalore, India, shipra@microsoft.com\nZizhuo Wang Department of Industrial and Systems Engineering, University of Minnesota, Minneapolis, MN 55455, zwang@umn.edu Yinyu Ye Department of Management Science and Engineering, Stanford University, Stanford, CA 94305, yinyu-ye@stanford.edu\nA natural optimization model that formulates many online resource allocation problems is the online linear programming (LP) problem in which the constraint matrix is revealed column by column along with the corresponding objective coefficient. In such a model, a decision variable has to be set each time a column is revealed without observing the future inputs and the goal is to maximize the overall objective function. In this paper, we propose a near-optimal algorithm for this general class of online problems under the assumptions of random order of arrival and some mild conditions on the size of the LP right-hand-side input. Specifically, our learning-based algorithm works by dynamically updating a threshold price vector at geometric time intervals, where the dual prices learned from the revealed columns in the previous period are used to determine the sequential decisions in the current period. Due to the feature of dynamic learning, the competitiveness of our algorithm improves over the past study of the same problem. We also present a worst-case example showing that the performance of our algorithm is near-optimal.\nKey words : online algorithms; linear programming; primal-dual; dynamic price update"}, {"heading": "1. Introduction", "text": "Online optimization is attracting increasingly wide attention in the computer science, operations research, and management science communities. In many practical problems, data does not reveal itself at the beginning, but rather comes in an online fashion. For example, in online revenue management problems, consumers arrive sequentially, each requesting a subset of goods (e.g., multi-leg flights or a period of stay in a hotel) and offering a bid price. On observing a request, the seller needs to make an irrevocable decision whether to accept or reject the current bid with the overall objective of maximizing the revenue while satisfying the resource constraints. Similarly, in online routing\n1\nproblems, the network capacity manager receives a sequence of requests from users with intended usage of the network, each with a certain utility. And his objective is to allocate the network capacity to maximize the social welfare. A similar format also appears in online auctions, online keyword matching problems, online packing problems, and various other online revenue management and resource allocation problems. For an overview of the online optimization literature and its recent development, we refer the readers to Borodin and El-Yaniv (1998), Buchbinder and Naor (2009a) and Devanur (2011).\nIn many examples mentioned above, the problem can be formulated as an online linear programming problem (Sometimes, people consider the corresponding integer program. While our discussion focuses on the linear programming relaxation of these problems, our results naturally extend to integer programs. See Section 5.2 for the discussion on this). An online linear programming problem takes a linear program as its underlying form, while the constraint matrix is revealed column by column with the corresponding coefficient in the objective function. After observing the input arrived so far, an immediate decision must be made without observing the future data. To be precise, we consider the following (offline) linear program\nmaximize \u2211n\nj=1 \u03c0jxj subject to \u2211n\nj=1 aijxj \u2264 bi, i= 1, . . . ,m 0\u2264 xj \u2264 1, j = 1, . . . , n,\n(1)\nwhere for all j, \u03c0j \u2265 0, aj = {aij}mi=1 \u2208 [0,1]m,1 and b= {bi}mi=1 \u2208Rm. In the corresponding online linear programming problem, at each time t, the coefficients (\u03c0t,at) are revealed, and the decision variable xt has to be chosen. Given the previous t\u2212 1 decisions x1, . . . , xt\u22121, and input {\u03c0j ,aj}tj=1 until time t, the tth decision variable xt has to satisfy\n\u2211t\nj=1 aijxj \u2264 bi, i= 1, . . . ,m 0\u2264 xt \u2264 1.\n(2)\nThe goal in the online linear programming problem is to choose xt\u2019s such that the objective function \u2211n\nt=1 \u03c0txt is maximized. In this paper, we propose algorithms that achieve good performance for solving the online linear programming problem. In order to define the performance of an algorithm, we first need to make some assumptions regarding the input parameters. We adopt the following random permutation model in this paper:\nAssumption 1. The columns aj (with the objective coefficient \u03c0j) arrive in a random order. The set of columns (a1,a2, ...,an) can be adversarily picked at the start. However, the arrival order of (a1,a2, ...,an) is uniformly distributed over all the permutations.\nAssumption 2. We know the total number of columns n a priori.\nThe random permutation model has been adopted in many existing literature for online problems (see Section 1.3 for a comprehensive review of the related literature). It is an intermediate path between using a worst-case analysis and assuming the distribution of the input is known. The worstcase analysis, which is completely robust to input uncertainty, evaluates an algorithm based on its performance on the worst-case input (see, e.g., Mehta et al. (2005), Buchbinder and Naor (2009b)). However, this leads to very pessimistic performance bounds for this problem: no online algorithm can achieve better than O(1/n) approximation of the optimal offline solution (Babaioff et al. (2008)). On the other hand, although a priori input distribution can simplify the problem to a great extent, the choice of distribution is very critical and the performance can suffer if the actual input distribution is not as assumed. Specifically, Assumption 1 is weaker than assuming the columns are drawn independently from some (possibly unknown) distribution. Indeed, one can view n i.i.d. columns as first drawing n samples from the underlying distribution and then randomly permute them. Therefore, our proposed algorithm and its performance would also apply if the input data is drawn i.i.d. from some distribution.\nAssumption 2 is required since we need to use the quantity n to decide the length of history for learning the threshold prices in our algorithm. In fact, as shown in Devanur and Hayes (2009), it is necessary for any algorithm to get a near-optimal performance.2 However, this assumption can be relaxed to an approximate knowledge of n (within at most 1\u00b1 \u01eb multiplicative error), without affecting our results.\nWe define the competitiveness of online algorithms as follows:\nDefinition 1. Let OPT denote the optimal objective value for the offline problem (1). An online algorithm A is c-competitive in the random permutation model if the expected value of the online solution obtained by using A is at least c factor of the optimal offline solution. That is,\nE\u03c3\n[\nn \u2211\nt=1\n\u03c0txt\n]\n\u2265 c \u00b7OPT,\nwhere the expectation is taken over uniformly random permutations \u03c3 of 1, . . . , n, and xt is the t th decision made by algorithm A when the inputs arrive in order \u03c3.\nIn this paper, we present a near-optimal algorithm for the online linear program (2) under the above two assumptions and a lower bound condition on the size of b. We also extend our results to the following more general online linear optimization problems with multi-dimensional decisions at each time period:\n\u2022 Consider a sequence of n non-negative vectors f 1,f 2, . . . ,fn \u2208Rk, mn non-negative vectors\ngi1,gi2, . . . ,gin \u2208 [0,1]k, i= 1, . . . ,m,\nand K = {x\u2208Rk :xTe\u2264 1,x\u2265 0} (we use e to denote the all 1 vectors). The offline linear program is to choose x1,...,xn to solve\nmaximize \u2211n j=1 f T j xj subject to \u2211n\nj=1 g T ijxj \u2264 bi, i= 1, ...,m\nxj \u2208K. In the corresponding online problem, given the previous t\u2212 1 decisions x1, . . . ,xt\u22121, each time we choose a k-dimensional decision xt \u2208Rk, satisfying:\n\u2211t\nj=1 g T ijxj \u2264 bi, i= 1, . . . ,m xt \u2208K,\n(3)\nusing the knowledge up to time t. And the objective is to maximize \u2211n j=1 f T j xj over the entire time horizon. Note that Problem (2) is a special case of Problem (3) with k= 1."}, {"heading": "1.1. Specific applications", "text": "In the following, we show some specific applications of the online linear programming model. The examples are only a few among the wide range of applications of this model.\n1.1.1. Online knapsack/secretary problem The one dimensional version of the online linear programming problem studied in this paper is usually referred as online knapsack or secretary problem. In such problems, a decision maker faces a sequence of options, each with a certain cost and a value, and he has to choose a subset of them in an online fashion so as to maximize the total value without violating the cost constraint. Applications of this problem arise in many contexts, such as hiring workers, scheduling jobs and bidding in sponsored search auctions.\nRandom permutation model has been widely adopted in the study of this problem, see Kleinberg (2005) and Babaioff et al. (2007) and references thereafter. In those papers, either a constant competitive ratio is obtained for finite-sized problems or a near-optimal algorithm is proposed for large-sized problems. In this paper, we study an extension of this problem to higher dimension and propose a near-optimal algorithm for it.\n1.1.2. Online routing problem Consider a computer network connected by m edges, each edge i has a bounded capacity (bandwidth) bi. There are a large number of requests arriving online, each asking for certain capacities at \u2208Rm in the network, along with a utility or price for his/her request. The offline problem for the decision maker is given by the following integer program:\nmaximize \u2211n\nt=1 \u03c0txt subject to \u2211n\nt=1 aitxt \u2264 bi i= 1, . . . ,m xt \u2208 {0,1}.\nDiscussions of this problem can be found in Buchbinder and Naor (2009b), Awerbuch et al. (1993) and references therein. Note that this problem is also studied under the name of online packing problem.\n1.1.3. Online adwords problem Selling online advertisements has been the main revenue driver for many internet companies such as Google, Yahoo, etc. Therefore improving the performance of ads allocation systems becomes extremely important for those companies and thus has attracted great attention in the research community in the past decade. In the literature, the majority of the research adopts an online matching model, see e.g., Mehta et al. (2005), Goel and Mehta (2008), Devanur and Hayes (2009), Karande et al. (2011), Bahmani and Kapralov (2010), Mahdian and Yan (2011), Feldman et al. (2010, 2009a,b). In such models, there are n search queries arriving online. And there are m bidders (advertisers) each with a daily budget bi. Based on the relevance of each search keyword, the ith bidder will bid a certain amount \u03c0ij on query j to display his advertisement along with the search result.3 For the jth query, the decision maker (i.e., the search engine) has to choose an m-dimensional vector xj = {xij}mi=1, where xij \u2208 {0,1} indicates whether the jth query is allocated to the ith bidder. The corresponding offline problem can be formulated as: maximize \u2211n\nj=1\u03c0 T j xj\nsubject to \u2211n j=1 \u03c0ijxij \u2264 bi, i= 1, . . . ,m xTj e\u2264 1 xj \u2208 {0,1}m.\n(4)\nThe linear programming relaxation of (4) is a special case of the general online linear programming problem (3) with f j = \u03c0j, gij = \u03c0ijei where ei is the ith unit vector of all zeros except 1 for the ith entry.\nIn the literature, the random permutation assumption has attracted great interests recently for its tractability and generality. Constant competitive algorithm as well as near-optimal algorithms have been proposed. We will give a more comprehensive review in Section 1.3."}, {"heading": "1.2. Key ideas and main results", "text": "The main contribution of this paper is to propose an algorithm that solves the online linear programming problem with a near-optimal competitive ratio under the random permutation model. Our algorithm is based on the observation that the optimal solution x\u2217 for the offline linear program can be largely determined by the optimal dual solution p\u2217 \u2208 Rm corresponding to the m inequality constraints. The optimal dual solution acts as a threshold price so that x\u2217j > 0 only if \u03c0j \u2265 p\u2217Taj. Our online algorithm works by learning a threshold price vector from some initial inputs. The price vector is then used to determine the decisions for later periods. However, instead of computing the price vector only once, our algorithm initially waits until \u01ebn steps or arrivals, and then computes a new price vector every time the history doubles, i.e., at time \u01ebn,2\u01ebn,4\u01ebn, . . . and so on. We show that our algorithm is 1\u2212O(\u01eb)-competitive in the random permutation model under a size condition of the right-hand-side input. Our main results are precisely stated as follows:\nTheorem 1. For any \u01eb > 0, our online algorithm is 1 \u2212 O(\u01eb) competitive for the online linear program (2) in the random permutation model, for all inputs such that\nB =min i\nbi \u2265\u2126 ( m log (n/\u01eb)\n\u01eb2\n)\n. (5)\nAn alternative way to state Theorem 1 is that our algorithm has a competitive ratio of 1 \u2212 O ( \u221a m logn/B ) . We prove Theorem 1 in Section 3. Note that the condition in Theorem 1 depends on logn, which is far from satisfying everyone\u2019s demand when n is large. In Kleinberg (2005), the author proves that B \u2265 1/\u01eb2 is necessary to get a 1\u2212O(\u01eb) competitive ratio in the B-secretary problem, which is the single dimensional counterpart of the online LP problem with at = 1 for all t. Thus, the dependence on \u01eb in Theorem 1 is near-optimal. In the next theorem, we show that a dependence on m is necessary for any online algorithm to obtain a near-optimal solution. Its proof will appear in Section 4.\nTheorem 2. For any algorithm for the online linear programming problem (2) in the random permutation model, there exists an instance such that its competitive ratio is less than 1 \u2212 \u2126(\u01eb) when\nB =min i\nbi \u2264 log(m)\n\u01eb2 .\nOr equivalently, no algorithm can achieve a competitive ratio better than 1\u2212\u2126 ( \u221a logm/B ) .\nWe also extend our results to the more general model as introduced in (3) :\nTheorem 3. For any \u01eb > 0, our algorithm is 1 \u2212O(\u01eb) competitive for the general online linear programming problem (3) in the random permutation model, for all inputs such that:\nB =min i\nbi \u2265\u2126 ( m log (nk/\u01eb)\n\u01eb2\n)\n. (6)\nNow we make some remarks on the conditions in Theorem 1 and 3. First of all, the conditions only depend on the right-hand-side input bi\u2019s, and are independent of the size of OPT or the objective coefficients. And by the random permutation model, they are also independent of the distribution of the input data. In this sense, our results are quite robust in terms of the input data uncertainty. In particular, one advantage of our result is that the conditions are checkable before the algorithm is implemented, which is unlike the conditions in terms of OPT or the objective coefficients. Even just in terms of bi, as shown in Theorem 2, the dependence on \u01eb is already optimal and the dependence on m is necessary. Regarding the dependence on n, we only need B to be of order logn, which is far less than the total number of bids n. Indeed, the condition might be strict for some small-sized problems. However, if the budget is too small, it is not hard to imagine that no online algorithm can do very well. On the contrary, in applications with large amount of\ninputs (for example, in the online adwords problem, it is estimated that a large search engine could\nreceive several billions of searches per day, even if we focus on a specific category, the number\ncan still be in the millions) with reasonably large right-hand-side inputs (e.g., the budgets for the\nadvertiser), the condition is not hard to satisfy. Furthermore, the conditions in Theorem 1 and 3\nare just theoretical results, the performance of our algorithm might still be very good even if the\nconditions are not satisfied (as shown in some numerical tests in Wang (2012)). Therefore, our\nresults are of both theoretical and practical interests.\nFinally, we finish this section with the following corollary:\nCorollary 1. In the online linear programming problem (2) and (3), if the largest entry of con-\nstraint coefficients does not equal to 1, then both our Theorem 1 and 3 still hold with the conditions\n(5) and (6) replaced by: bi a\u0304i \u2265\u2126 ( m log (nk/\u01eb) \u01eb2 ) , \u2200i, where, for each row i, a\u0304i =maxj{|aij |} of (2), or a\u0304i =maxj{\u2016gij\u2016\u221e} of (3)."}, {"heading": "1.3. Related work", "text": "The design and analysis of online algorithms have been a topic of wide interest in the com-\nputer science, operations research, and management science communities. Recently, the ran-\ndom permutation model has attracted growing popularity since it avoids the pessimistic lower\nbounds of the adversarial input model while still capturing the uncertainty of the inputs. Various\nonline algorithms have been studied under this model, including the secretary problem (Kleinberg\n(2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes\n(2009), Feldman et al. (2009b), Goel and Mehta (2008), Mahdian and Yan (2011), Karande et al.\n(2011), Bahmani and Kapralov (2010)) and the online packing problem (Feldman et al. (2010),\nMolinaro and Ravi (2014)). Among these work, two types of results are obtained: one achieves a\nconstant competitive ratio independent of the input parameters; the other focuses on the perfor-\nmance of the algorithm when the input size is large. Our paper falls into the second category. In\nthe following literature review, we will focus ourselves on this category of work.\nThe first result that achieves a near-optimal performance in the random permutation model is by Kleinberg (2005), in which a 1 \u2212 O(1/ \u221a B) competitive algorithm is proposed for the single dimensional multiple-choice secretary problem. The author also proves that the 1\u2212O(1/ \u221a B) com-\npetitive ratio achieved by his algorithm is the best possible for this problem. Our result extends his work to mutli-dimensional case with competitiveness 1\u2212O( \u221a m logn/B). Although the problem\nlooks similar, due to the multi-dimensional structure, different algorithms are needed and different\ntechniques are required for our analysis. Specifically, Kleinberg (2005) recursively applies a randomized version of the classical secretary algorithm while we maintain a price based on the linear\nprogramming duality theory and have a fixed price updating schedule. We also prove that no online algorithm can achieve a competitive ratio better than 1\u2212\u2126( \u221a logm/B) for the multi-dimensional\nproblem. To the best of our knowledge, this is the first result that shows the necessity of dependence on the dimension m, for the best competitive ratio achievable for this problem. It clearly\npoints out that high dimensionality indeed adds to the difficulty of this problem.\nLater, Devanur and Hayes (2009) study a linear programming based approach for the online\nadwords problem. In their approach, they solve a linear program once and utilize its dual solution as threshold price to make future decisions. The authors prove a competitive ratio of 1 \u2212 O( 3 \u221a \u03c0maxm2 logn/OPT) for their algorithm. In our work, we consider a more general model and develop an algorithm which updates the dual prices at a carefully chosen pace. By using dynamic updates, we achieve a competitive ratio that can depend only on B: 1\u2212O( \u221a m logn/B). This is attractive in practice since B can be checked before the problem is solved while OPT can not.\nMoreover, we show that the dependence on B of our result is optimal. Although our algorithm shares similar ideas to theirs, the dynamic nature of our algorithm requires a much more delicate\ndesign and analysis. We also answer the important question of how often we should update the dual prices and we show that significant improvements can be made by using the dynamic learning\nalgorithm.\nRecently, Feldman et al. (2010) study a more general online packing problem which allows the\ndimension of the choice set to vary at each time period (a further extension of (3)). They propose a one-time learning algorithm which achieves a competitive ratio that depends both on the righthand-side B and OPT. And the dependence on B is of order 1 \u2212 O( 3 \u221a m logn/B). Therefore, comparing to their competitive ratio, our result not only removes the dependence on OPT, but\nalso improves the dependence on B by an order. We show that the improvement is due to the use of dynamic learning.\nMore recently, Molinaro and Ravi (2014) study the same problem and obtain a competitive ratio\nof 1\u2212O( \u221a m2 logm/B). The main structure of their algorithm (especially the way they obtain\nsquare root rather than cubic root) is modified from that in this paper. They further use a novel covering technique to remove the dependence on n in the competitive ratio, at an expense of\nincreasing an order of m. In contrast, we present the improvement from the cubic root to square root and how to remove the dependence on OPT.\nA comparison of the results of Kleinberg (2005), Devanur and Hayes (2009), Feldman et al.\n(2010), Molinaro and Ravi (2014) and this work is shown in Table 1.\nBesides the random permutation model, Devanur et al. (2011) study an online resource allocation problem under what they call the adversarial stochastic input model. This model generalizes the case when the columns are drawn from an i.i.d. distribution, however, it is more stringent than the random permutation model. In particular, their model does not allow the situations when there might be a number of \u201cshocks\u201d in the input series. For this input model, they develop an algorithm that achieves a competitive ratio of 1\u2212O ( max{ \u221a logm/B, \u221a \u03c0max logm/OPT} ) . Their result is significant in that it achieves near-optimal dependence on m. However, the dependence on OPT and the stronger assumption makes it not directly comparable to our results. And their algorithm uses quite different techniques from ours.\nIn the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive. However, as commented in Cooper (2002), this model can be reduced to a price independent arrival process with availability control under Poisson arrivals. Our model can be further viewed as a discrete version of the availability control model which is also used as an underlying model in Talluri and van Ryzin (1998) and discussed in Cooper (2002). The idea of using a threshold - or \u201cbid\u201d - price is not new. It is initiated in Williamson (1992), Simpson (1989) and investigated further in Talluri and van Ryzin (1998). In Talluri and van Ryzin (1998), the authors show that the bid price control policy is asymptotically optimal. However, they assume the knowledge on the arrival process and therefore the price is obtained by \u201cforecasting\u201d the future using the distribution information rather than \u201clearning\u201d from the past observations as we do in our paper. The idea of using linear programming to find the dual optimal bid price is discussed in Cooper (2002) where asymptotic optimality is also achieved. But again, the arrival process is assumed to be known which makes the analysis quite different.\nThe contribution of this paper is several fold. First, we study a general online linear programming framework, extending the scope of many prior work. And due to its dynamic learning capability,\nour algorithm is distribution free\u2013no knowledge on the input distribution is assumed except for the random order of arrival and the total number of entries. Moreover, instead of learning the price just once, we propose a dynamic learning algorithm that updates the prices as more information is revealed. The design of such an algorithm answers the question raised in Cooper (2002), that is, how often and when should one update the price? We give an explicit answer to this question by showing that updating the prices at geometric time intervals -not too sparse nor too often- is optimal. Thus we present a precisely quantified strategy for dynamic price update. Furthermore, we provide a non-trivial lower bound for this problem, which is the first of its kind and show for the first time that the dimensionality of the problem adds to its difficulty.\nIn our analysis, we apply many standard techniques from Probably Approximately Correct learning (PAC-learning), in particular, concentration bounds and covering arguments. Our dynamic learning also shares a similar idea as the \u201cdoubling trick\u201d used in learning problems. However, unlike the doubling trick which is typically applied to an unknown time horizon (Cesa-Bianchi and Lugosi (2006)), we show that a geometric pace of price updating in a fixed length of horizon with a careful design could also enhance the performance of the algorithm."}, {"heading": "1.4. Organization", "text": "The rest of the paper is organized as follows. In Section 2 and 3, we present our online algorithm and prove that it achieves 1\u2212O(\u01eb) competitive ratio under mild conditions on the input. To keep the discussions clear and easy to follow, we start in Section 2 with a simpler one-time learning algorithm. While the analysis for this simpler algorithm will be useful to demonstrate our proof techniques, the results obtained in this setting are weaker than those obtained by our dynamic learning algorithm, which is discussed in Section 3. In Section 4, we give a detailed proof of Theorem 2 regarding the necessity of lower bound condition used in our main theorem. In Section 5, we present several extensions of our study. Then we conclude our paper in Section 6."}, {"heading": "2. One-time Learning Algorithm", "text": "In this section, we propose a one-time learning algorithm for the online linear programming problem. We consider the following partial linear program defined only on the input until time s= \u01ebn (for the ease of notation, without loss of generality, we assume \u01ebn is an integer throughout our analysis): maximize \u2211s\nt=1 \u03c0txt subject to \u2211s\nt=1 aitxt \u2264 (1\u2212 \u01eb) snbi, i= 1, . . . ,m 0\u2264 xt \u2264 1, t= 1, . . . , s,\n(7)\nand its dual problem:\nminimize \u2211m i=1(1\u2212 \u01eb) snbipi+ \u2211s\nt=1 yt subject to \u2211m\ni=1 aitpi+ yt \u2265 \u03c0t, t= 1, . . . , s pi, yt \u2265 0, i= 1, . . . ,m, t= 1, . . . , s.\n(8)\nLet (p\u0302, y\u0302) be the optimal solution to (8). Note that p\u0302 has the natural meaning of the price for each resource. For any given price vector p, we define the allocation rule xt(p) as follows:\nxt(p) =\n{\n0 if \u03c0t \u2264 pTat 1 if \u03c0t > p Tat. (9)\nWe now state our one-time learning algorithm:\nAlgorithm OLA (One-time Learning Algorithm):\n1. Initialize xt = 0, for all t\u2264 s. And p\u0302 is defined as above. 2. For t= s+ 1, s+2, . . . , n, if aitxt(p\u0302)\u2264 bi \u2212 \u2211t\u22121 j=1 aijxj for all i, set xt = xt(p\u0302); otherwise, set\nxt = 0. Output xt.\nIn the one-time learning algorithm, we learn a dual price vector using the first \u01ebn arrivals. Then, at each time t > \u01ebn, we use this dual price to decide the current allocation, and execute this decision as long as it doesn\u2019t violate any of the constraints. An attractive feature of this algorithm is that it requires to solve only one small linear program, defined on \u01ebn variables. Note that the righthand-side of (7) is modified by a factor 1\u2212 \u01eb. This modification is to guarantee that with high probability, the allocation xt(p) does not violate the constraints. This trick is also used in Section 3 when we study the dynamic learning algorithm. In the next subsection, we prove the following proposition regarding the competitive ratio of the one-time learning algorithm, which relies on a stronger condition than Theorem 1:\nProposition 1. For any \u01eb > 0, the one-time learning algorithm is 1\u22126\u01eb competitive for the online linear program (2) in the random permutation model, for all inputs such that\nB =min i\nbi \u2265 6m log(n/\u01eb)\n\u01eb3 ."}, {"heading": "2.1. Competitive Ratio Analysis", "text": "Observe that the one-time learning algorithm waits until time s= \u01ebn, and then sets the solution at time t as xt(p\u0302), unless it violates the constraints. To prove its competitive ratio, we follow the following steps. First we show that if p\u2217 is the optimal dual solution to (1), then {xt(p\u2217)} is close to the primal optimal solution x\u2217, i.e., learning the dual price is sufficient to determine a close primal solution. However, since the columns are revealed in an online fashion, we are not able to obtain p\u2217 during the decision period. Instead, in our algorithm, we use p\u0302 as a substitute. We then show that p\u0302 is a good substitute of p\u2217: 1) with high probability, xt(p\u0302) satisfies all the constraints of the linear program; 2) the expected value of \u2211\nt \u03c0txt(p\u0302) is close to the optimal offline value. Before\nwe start our analysis, we make the following simplifying technical assumption in our discussion:\nAssumption 3. The problem inputs are in general position, namely for any price vector p, there can be at most m columns such that pTat = \u03c0t.\nAssumption 3 is not necessarily true for all inputs. However, as pointed out by Devanur and Hayes (2009), one can always randomly perturb \u03c0t by arbitrarily small amount \u03b7 through adding a random variable \u03bet taking uniform distribution on interval [0, \u03b7]. In this way, with probability 1, no p can satisfy m+1 equations simultaneously among pTat = \u03c0t, and the effect of this perturbation on the objective can be made arbitrarily small. Under this assumption, we can use the complementarity conditions of linear program (1) to obtain the following lemma.\nLemma 1. xt(p \u2217)\u2264 x\u2217t for all t, and under Assumption 3, x\u2217t and xt(p\u2217) differs for no more than m values of t.\nProof. Consider the offline linear program (1) and its dual (let p denote the dual variables associated with the first set of constraints and yt denote the dual variables associated with the constraints xt \u2264 1): minimize \u2211m\ni=1 bipi+ \u2211n\nt=1 yt subject to \u2211m\ni=1 aitpi + yt \u2265 \u03c0t, t= 1, ..., n pi, yt \u2265 0, i=1, ...,m, t= 1, ..., n.\n(10)\nBy the complementarity slackness conditions, for any optimal solution x\u2217 for the primal problem (1) and optimal solution (p\u2217,y\u2217) for the dual, we must have:\nx\u2217t \u00b7 ( m \u2211\ni=1\naitp \u2217 i + y \u2217 t \u2212\u03c0t\n)\n= 0 and (1\u2212x\u2217t ) \u00b7 y\u2217t =0 for all t.\nIf xt(p \u2217) = 1, by (9), \u03c0t > (p \u2217)Tat. Thus, by the constraint in (10), y \u2217 t > 0 and finally by the last complementarity condition, x\u2217t = 1. Therefore, we have xt(p \u2217)\u2264 x\u2217t for all t. On the other hand, if \u03c0t < (p \u2217)Tat, then we must have both xt(p \u2217) and x\u2217t = 0. Therefore, xt(p \u2217) = x\u2217t if (p\n\u2217)Tat 6= \u03c0t. Under Assumption 3, there are at most m values of t such that (p\u2217)Tat = \u03c0t. Therefore, x \u2217 t and xt(p \u2217) differs for no more than m values of t.\nLemma 1 shows that if an optimal dual solution p\u2217 to (1) is known, then xt(p \u2217)\u2019s obtained by our decision policy is close to the optimal offline solution. However, in our online algorithm, we use the sample dual price p\u0302 learned from the first few inputs, which could be different from the optimal dual price p\u2217. The remaining discussion attempts to show that the sample dual price p\u0302 will be sufficiently accurate for our purpose. In the following, we will frequently use the fact that the random order assumption can be interpreted as that the first s inputs are uniform random samples without replacement of size s from the n inputs. And we use S to denote the sample set of size s, and N to denote the complete input set of size n. We start with the following lemma which shows that with high probability, the primal solution xt(p\u0302) constructed using the sample dual price is feasible:\nLemma 2. The primal solution constructed using the sample dual price is a feasible solution to the linear program (1) with high probability. More precisely, with probability 1\u2212 \u01eb, n \u2211\nt=1\naitxt(p\u0302)\u2264 bi, \u2200i= 1, . . . ,m\ngiven B \u2265 6m log(n/\u01eb) \u01eb3 .\nProof. The proof will proceed as follows: Consider any fixed price p and i. We say a sample S is \u201cbad\u201d for this p and i if and only if p is the optimal dual price to (8) for the sample set S, but \u2211n\nt=1 aitxt(p) > bi. First, we show that the probability of bad samples is small for every fixed p and i. Then, we take a union bound over all distinct prices to prove that with high probability the learned price p\u0302 will be such that \u2211n\nt=1 aitxt(p\u0302)\u2264 bi for all i. To start with, we fix p and i. Define Yt = aitxt(p). If p is an optimal dual solution for the sample\nlinear program on S, applying Lemma 1 to the sample problem, we have\n\u2211\nt\u2208S\nYt = \u2211\nt\u2208S\naitxt(p)\u2264 \u2211\nt\u2208S\naitx\u0303t \u2264 (1\u2212 \u01eb)\u01ebbi,\nwhere x\u0303 is the primal optimal solution to the sample linear program on S. Now we consider the probability of bad samples for this p and i:\nP\n(\n\u2211\nt\u2208S\nYt \u2264 (1\u2212 \u01eb)\u01ebbi, \u2211\nt\u2208N\nYt \u2265 bi ) .\nWe first define Zt = biYt\u2211 t\u2208N Yt . It is easy to see that\nP\n(\n\u2211\nt\u2208S\nYt \u2264 (1\u2212 \u01eb)\u01ebbi, \u2211\nt\u2208N\nYt \u2265 bi ) \u2264 P ( \u2211\nt\u2208S\nZt \u2264 (1\u2212 \u01eb)\u01ebbi, \u2211\nt\u2208N\nZt = bi\n)\n.\nFurthermore, we have\nP\n(\n\u2211\nt\u2208S\nZt \u2264 (1\u2212 \u01eb)\u01ebbi, \u2211\nt\u2208N\nZt = bi\n) \u2264 P ( \u2223 \u2223 \u2223\n\u2223 \u2223\n\u2211\nt\u2208S\nZt \u2212 \u01eb \u2211\nt\u2208N\nZt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 \u01eb2bi, \u2211\nt\u2208N\nZt = bi\n)\n\u2264 P ( \u2223 \u2223 \u2223\n\u2223 \u2223\n\u2211\nt\u2208S\nZt \u2212 \u01eb \u2211\nt\u2208N\nZt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 \u01eb2bi \u2223 \u2223 \u2223 \u2223 \u2223 \u2211\nt\u2208N\nZt = bi\n)\n\u2264 2 exp (\u2212\u01eb3bi 2+ \u01eb ) \u2264 \u03b4\nwhere \u03b4 = \u01eb m\u00b7nm . The second to last step follows from the Hoeffding-Bernstein\u2019s Inequality for sampling without replacement (Lemma 10 in Appendix A) by treating Zt, t \u2208 S as the samples without replacement from Zt, t \u2208 N . We also used the fact that 0 \u2264 Zt \u2264 1 for all t, therefore \u2211\nt\u2208N(Zt\u2212 Z\u0304)2 \u2264 \u2211 t\u2208N Z 2 t \u2264 bi (and therefore the \u03c32R in Lemma 10 can be bounded by bi). Finally,\nthe last inequality is due to the assumption made on B.\nNext, we take a union bound over all distinct p\u2019s. We call two price vectors p and q distinct if and only if they result in distinct solutions, i.e., {xt(p)} 6= {xt(q)}. Note that we only need to consider distinct prices, since otherwise all the Yt\u2019s are exactly the same. Note that each distinct p is characterized by a unique separation of n points ({\u03c0t,at}nt=1) in m+1-dimensional space by a hyperplane. By results from computational geometry, the total number of such distinct prices is at most nm (Orlik and Terao (1992)). Taking union bound over the nm distinct prices, and i= 1, . . . ,m, we get the desired result.\nAbove we showed that with high probability, xt(p\u0302) is a feasible solution. In the following, we\nshow that it is also a near-optimal solution.\nLemma 3. The primal solution constructed using the sample dual price is a near-optimal solution to the linear program (1) with high probability. More precisely, with probability 1\u2212 \u01eb, \u2211\nt\u2208N\n\u03c0txt(p\u0302)\u2265 (1\u2212 3\u01eb)OPT\ngiven B \u2265 6m log(n/\u01eb) \u01eb3 . Proof. The proof is based on two observations. First, {xt(p\u0302)}nt=1 and p\u0302 satisfy all the complementarity conditions, and hence is the optimal primal and dual solution to the following linear program: maximize \u2211\nt\u2208N \u03c0txt subject to \u2211\nt\u2208N aitxt \u2264 b\u0302i, i= 1, . . . ,m 0\u2264 xt \u2264 1, t= 1, . . . , n\n(11)\nwhere b\u0302i = \u2211 t\u2208N aitxt(p\u0302) if p\u0302i > 0, and b\u0302i =max{ \u2211 t\u2208N aitxt(p\u0302), bi}, if p\u0302i = 0. Second, we show that if p\u0302i > 0, then with probability 1\u2212 \u01eb, b\u0302i \u2265 (1\u2212 3\u01eb)bi. To show this, let p\u0302 be the optimal dual solution of the sample linear program on set S and x\u0302 be the optimal primal solution. By the complementarity conditions of the linear program, if p\u0302i > 0, the i th constraint must be satisfied with equality. That is, \u2211\nt\u2208S aitx\u0302t = (1\u2212 \u01eb)\u01ebbi. Then, by Lemma 1 and the condition that B =mini bi \u2265 m\u01eb2 , we have\n\u2211\nt\u2208S\naitxt(p\u0302)\u2265 \u2211\nt\u2208S\naitx\u0302t \u2212m\u2265 (1\u2212 2\u01eb)\u01ebbi.\nThen, using the Hoeffding-Bernstein\u2019s Inequality for sampling without replacement, in a manner similar to the proof of Lemma 2, we can show that (the detailed proof is given in Appendix A.2) given the lower bound on B, with probability at least 1\u2212 \u01eb, for all i such that p\u0302i > 0:\nb\u0302i = \u2211\nt\u2208N\naitxt(p\u0302)\u2265 (1\u2212 3\u01eb)bi. (12)\nCombined with the case p\u0302i =0, we know that with probability 1\u2212 \u01eb, b\u0302i \u2265 (1\u22123\u01eb)bi for all i. Lastly, observing that whenever (12) holds, given an optimal solution x\u2217 to (1), (1\u22123\u01eb)x\u2217 will be a feasible solution to (11). Therefore, the optimal value of (11) is at least (1\u22123\u01eb)OPT, which is equivalently saying that\nn \u2211\nt=1\n\u03c0txt(p\u0302)\u2265 (1\u2212 3\u01eb)OPT.\nTherefore, the objective value for the online solution taken over the entire period is near-optimal. However, in the one-time learning algorithm, no decision is made during the learning period S, and only the decisions from periods {s+1, . . . , n} contribute to the objective value. The following lemma that relates the optimal value of the sample linear program (7) to the optimal value of the offline linear program (1) will bound the contribution from the learning period:\nLemma 4. Let OPT(S) denote the optimal value of the linear program (7) over sample S, and OPT(N) denote the optimal value of the offline linear program (1) over N . Then,\nE[OPT(S)]\u2264 \u01ebOPT(N).\nProof. Let (x\u2217,p\u2217,y\u2217) and (x\u0302, p\u0302, y\u0302) denote the optimal primal and dual solutions of linear program (1) on N , and sample linear program (7) on S, respectively.\n(p\u2217,y\u2217) = argmin bTp+ \u2211\nt\u2208N yt s.t. pTat + yt \u2265 \u03c0t, t\u2208N\np,y\u2265 0\n(p\u0302, y\u0302) = argmin (1\u2212 \u01eb)\u01ebbTp+ \u2211\nt\u2208S yt s.t. pTat + yt \u2265 \u03c0t, t\u2208 S\np,y\u2265 0.\nNote that S \u2286 N , thus (p\u2217,y\u2217) is a feasible solution to the dual of the linear program on S. Therefore, by the weak duality theorem:\nOPT(S)\u2264 \u01ebbTp\u2217 + \u2211\nt\u2208S\ny\u2217t .\nTherefore,\nE[OPT(S)]\u2264 \u01ebbTp\u2217 +E [ \u2211\nt\u2208S\ny\u2217t\n]\n= \u01eb(bTp\u2217 + \u2211\nt\u2208N\ny\u2217t ) = \u01ebOPT(N).\nNow, we are ready to prove Proposition 1:\nProof of Proposition 1: Using Lemma 2 and Lemma 3, with probability at least 1\u2212 2\u01eb, the following events happen:\nn \u2211\nt=1\naitxt(p\u0302)\u2264 bi, i= 1, . . . ,m\nn \u2211\nt=1\n\u03c0txt(p\u0302)\u2265 (1\u2212 3\u01eb)OPT.\nThat is, the decisions xt(p\u0302) are feasible and the objective value taken over the entire period {1, . . . , n} is near-optimal. Denote this event by E , where P (E)\u2265 1\u2212 2\u01eb. We have by Lemma 2, 3 and 4:\nE\n[\nn \u2211\nt=s+1\n\u03c0txt\n]\n= E\n[\nn \u2211\nt=1\n\u03c0txt \u2212 s \u2211\nt=1\n\u03c0txt\n]\n\u2265 E [ n \u2211\nt=1\n\u03c0txt(p\u0302)I(E) ] \u2212E [ s \u2211\nt=1\n\u03c0txt(p\u0302)\n]\n\u2265 (1\u2212 3\u01eb)P (E)OPT\u2212 \u01ebOPT\u2265 (1\u2212 6\u01eb)OPT\nwhere I(\u00b7) is the indicator function, the first inequality is because under E , xt = xt(p\u0302), and the second last inequality uses the fact that xt(p\u0302)\u2264 x\u0302t which is due to Lemma 1."}, {"heading": "3. Dynamic Learning Algorithm", "text": "The algorithm discussed in Section 2 uses the first \u01ebn inputs to learn a threshold price, and then applies it in the remaining time horizon. While this algorithm has its own merits, in particular, requires solving only a small linear program defined on \u01ebn variables, the lower bound required on B is stronger than that claimed in Theorem 1 by an \u01eb factor.\nIn this section, we propose an improved dynamic learning algorithm that will achieve the result in Theorem 1. Instead of computing the price only once, the dynamic learning algorithm will update the price every time the history doubles, that is, it learns a new price at time t= \u01ebn,2\u01ebn,4\u01ebn, . . .. To be precise, let p\u0302\u2113 denote the optimal dual solution for the following partial linear program defined on the inputs until time \u2113:\nmaximize \u2211\u2113\nt=1 \u03c0txt subject to \u2211\u2113\nt=1 aitxt \u2264 (1\u2212h\u2113) \u2113nbi, i=1, . . . ,m 0\u2264 xt \u2264 1, t= 1, . . . , \u2113\n(13)\nwhere the set of numbers h\u2113 are defined as follows:\nh\u2113 = \u01eb \u221a n \u2113 .\nAlso, for any given dual price vector p, we define the same allocation rule xt(p) as in (9). Our dynamic learning algorithm is stated as follows:\nAlgorithm DLA (Dynamic Learning Algorithm):\n1. Initialize t0 = \u01ebn. Set xt =0, for all t\u2264 t0. 2. Repeat for t= t0 +1, t0 +2, . . .\n(a) Set x\u0302t = xt(p\u0302 \u2113). Here \u2113= 2r\u01ebn where r is the largest integer such that \u2113 < t. (b) If aitx\u0302t \u2264 bi \u2212 \u2211t\u22121 j=1 aijxj for all i, then set xt = x\u0302t; otherwise, set xt =0. Output xt.\nNote that we update the dual price vector \u2308log2 (1/\u01eb)\u2309 times during the entire time horizon. Thus, the dynamic learning algorithm requires more computation. However, as we show next, it requires a weaker lower bound on B for proving the same competitive ratio. The intuition behind this improvement is as follows. Note that initially, at \u2113 = \u01ebn, h\u2113 = \u221a \u01eb > \u01eb. Thus, we have larger slacks at the beginning, and the large deviation argument for constraint satisfaction (as in Lemma 2) requires a weaker condition on B. As t increases, \u2113 increases, and h\u2113 decreases. However, for larger values of \u2113, the sample size is larger, making a weaker condition on B sufficient to prove the same error bound. Furthermore, h\u2113 decreases rapidly enough, such that the overall loss on the objective value is not significant. As one will see, the careful choice of the numbers h\u2113 plays an important role in proving our results."}, {"heading": "3.1. Competitive Ratio Analysis", "text": "The analysis for the dynamic learning algorithm proceeds in a manner similar to that for the onetime learning algorithm. However, stronger results for the price learned in each period need to be proved here. In the following, we assume \u01eb=2\u2212E and let L= {\u01ebn,2\u01ebn, . . . ,2E\u22121\u01ebn}. Lemma 5 and 6 are parallel to Lemma 2 and 3 in Section 2, however require a weaker condition on B:\nLemma 5. For any \u01eb > 0, with probability 1\u2212 \u01eb: 2\u2113 \u2211\nt=\u2113+1\naitxt(p\u0302 \u2113)\u2264 \u2113\nn bi, for all i\u2208 {1, . . . ,m}, \u2113\u2208L\ngiven B =mini bi \u2265 10m log (n/\u01eb)\u01eb2 .\nProof. The proof is similar to the proof of Lemma 2 but a more careful analysis is needed. We provide a brief outline here with a detailed proof in Appendix B.1. First, we fix p, i and \u2113. This time, we say a permutation is \u201cbad\u201d for this p, i and \u2113 if and only if p = p\u0302l (i.e., p is the learned price under the current arrival order) but \u22112\u2113\nt=\u2113+1 aitxt(p\u0302 l) > l n bi. By using the\nHoeffding-Bernstein\u2019s Inequality for sampling without replacement, we show that the probability of \u201cbad\u201d permutations is less than \u03b4 = \u01eb m\u00b7nm\u00b7E for any fixed p, i and \u2113 under the condition on B. Then by taking a union bound over all distinct prices, all items i and periods \u2113, the lemma is proved.\nIn the following, we use LPs(d) to denote the partial linear program that is defined on variables\ntill time s with right-hand-side in the inequality constraints set as d. That is,\nLPs(d) : maximize\n\u2211s\nt=1 \u03c0txt subject to \u2211s\nt=1 aitxt \u2264 di, i= 1, . . . ,m 0\u2264 xt \u2264 1, t= 1, . . . , s.\nAnd let OPTs(d) denote the optimal objective value for LPs(d).\nLemma 6. With probability at least 1\u2212 \u01eb, for all \u2113\u2208L:\n2\u2113 \u2211\nt=1\n\u03c0txt(p\u0302 \u2113)\u2265 (1\u2212 2h\u2113\u2212 \u01eb)OPT2\u2113\n(\n2\u2113 n b\n)\ngiven B =mini bi \u2265 10m log (n/\u01eb)\u01eb2 .\nProof. Let b\u0302i = \u22112\u2113 j=1 aijxj(p\u0302 \u2113) for i such that p\u0302\u2113i > 0, and b\u0302i =max{ \u22112\u2113 j=1 aijxj(p\u0302 \u2113), 2\u2113 n bi}, otherwise. Then the solution pair ({xt(p\u0302\u2113)}2\u2113t=1, p\u0302\u2113) satisfy all the complementarity conditions, thus are optimal solutions (primal and dual respectively) to the linear program LP2\u2113(b\u0302):\nmaximize \u22112\u2113\nt=1 \u03c0txt subject to \u22112\u2113\nt=1 aitxt \u2264 b\u0302i, i= 1, . . . ,m 0\u2264 xt \u2264 1, t= 1, . . . ,2\u2113.\nThis means 2\u2113 \u2211\nt=1\n\u03c0txt(p\u0302 \u2113) =OPT2\u2113(b\u0302)\u2265\n(\nmin i b\u0302i bi 2\u2113 n\n)\nOPT2\u2113\n(\n2\u2113 n b\n)\n.\nNow, we analyze the ratio b\u0302i 2\u2113bi/n . By definition, for i such that p\u0302\u2113i = 0, b\u0302i \u2265 2\u2113bi/n. Otherwise, using techniques similar to the proof of Lemma 5, we can prove that with probability 1\u2212 \u01eb, for all i,\nb\u0302i = 2\u2113 \u2211\nt=1\naitxt(p\u0302 \u2113)\u2265 (1\u2212 2h\u2113\u2212 \u01eb)\n2\u2113 n bi. (14)\nA detailed proof of (14) appears in Appendix B.2. And the lemma follows from (14).\nNext, similar to Lemma 4 in the previous section, we prove the following lemma relating the\noptimal value of the sample linear program to the optimal value of the offline linear program:\nLemma 7. For any \u2113,\nE\n[\nOPT\u2113\n(\n\u2113 n b\n)]\n\u2264 \u2113 n OPT.\nThe proof of lemma 7 is exactly the same as the proof for Lemma 4 thus we omit its proof.\nNow we are ready to prove Theorem 1.\nProof of Theorem 1: Observe that the output of the online solution at time t\u2208 {\u2113+1, . . . ,2\u2113} is xt(p\u0302 \u2113) as long as the constraints are not violated. By Lemma 5 and Lemma 6, with probability at least 1\u2212 2\u01eb: 2\u2113 \u2211\nt=\u2113+1\naitxt(p\u0302 \u2113)\u2264 \u2113\nn bi, for all i\u2208 {1, . . . ,m}, \u2113\u2208L\n2\u2113 \u2211\nt=1\n\u03c0txt(p\u0302 \u2113)\u2265 (1\u2212 2h\u2113\u2212 \u01eb)OPT2\u2113\n(\n2\u2113 n b\n)\n, for all \u2113\u2208L.\nDenote this event by E , where P (E)\u2265 1\u2212 2\u01eb. The expected objective value achieved by the online algorithm can be bounded as follows:\nE\n[\n\u2211\n\u2113\u2208L\n2\u2113 \u2211\nt=\u2113+1\n\u03c0txt\n]\n\u2265 E [ \u2211\n\u2113\u2208L\n2\u2113 \u2211\nt=\u2113+1\n\u03c0txt(p\u0302 \u2113)I(E)\n]\n\u2265 \u2211\nl\u2208L\nE\n[\n2\u2113 \u2211\nt=1\n\u03c0txt(p\u0302 l)I(E)\n]\n\u2212 \u2211\n\u2113\u2208L\nE\n[\n\u2113 \u2211\nt=1\n\u03c0txt(p\u0302 \u2113)I(E)\n]\n\u2265 \u2211\n\u2113\u2208L\n(1\u2212 2hl\u2212 \u01eb)E [ OPT2\u2113 ( 2\u2113\nn b\n) I(E) ] \u2212 \u2211\n\u2113\u2208L\nE\n[\nOPT\u2113\n(\n\u2113 n b\n) I(E) ]\n\u2265 P (E) \u00b7OPT\u2212 \u2211\n\u2113\u2208L\n2hlE\n[\nOPT2\u2113\n(\n2\u2113 n b\n) I(E) ] \u2212 \u01eb \u2211\n\u2113\u2208L\nE\n[\nOPT2\u2113\n(\n2\u2113 n b\n) I(E) ] \u2212E [OPT\u01ebn(\u01ebb)I(E)]\n\u2265 (1\u2212 2\u01eb)OPT\u2212 \u2211\n\u2113\u2208L\n2hlE\n[\nOPT2\u2113\n(\n2\u2113 n b\n)]\n\u2212 \u01eb \u2211\n\u2113\u2208L\nE\n[\nOPT2\u2113\n(\n2\u2113 n b\n)]\n\u2212E [OPT\u01ebn(\u01ebb)]\n\u2265 (1\u2212 2\u01eb)OPT\u2212 4 \u2211\n\u2113\u2208L\nh\u2113\u2113\nn OPT\u2212 2\u01eb\n\u2211\nl\u2208L\n\u2113 n OPT\u2212 \u01ebOPT\n\u2265 (1\u2212 15\u01eb)OPT.\nThe third inequality is due to Lemma 6, the second to last inequality is due to Lemma 7 and the last inequality follows from the fact that\n\u2211\n\u2113\u2208L\n\u2113 n = (1\u2212 \u01eb), and \u2211\n\u2113\u2208L\nh\u2113 \u2113 n = \u01eb \u2211\n\u2113\u2208L\n\u221a\n\u2113 n \u2264 2.5\u01eb.\nTherefore, Theorem 1 is proved."}, {"heading": "4. Worst-case Bound for any Algorithm", "text": "In this section, we prove Theorem 2, i.e., the condition B \u2265\u2126(logm/\u01eb2) is necessary for any online algorithm to achieve a competitive ratio of 1\u2212O(\u01eb). We prove this by constructing an instance of (1) with m items and B units of each item such that no online algorithm can achieve a competitive ratio of 1\u2212O(\u01eb) unless B \u2265\u2126(logm/\u01eb2).\nIn this construction, we refer to the 0 \u2212 1 vectors at\u2019s as demand vectors, and \u03c0t\u2019s as profit coefficients. Assume m= 2z for some integer z. We will construct z pairs of demand vectors such that the demand vectors in each pair are complement to each other, and do not share any item.\nHowever, every set of z vectors consisting of exactly one vector from each pair will share at least one common item. To achieve this, consider the 2z possible boolean strings of length z. The jth boolean string represents jth item for j = 1, . . . ,m= 2z (for illustrative purpose, we index the item from 0 in our later discussion). Let sij denote the value at i th bit of the jth string. Then, we construct a pair of demand vectors vi,wi \u2208 {0,1}m, by setting vij = sij, wij = 1\u2212 sij. Table 2 illustrates this construction for m= 8 (z= 3):\nNote that the pair of vectors vi,wi, i= 1, . . . , z are complement to each other. Consider any set of z demand vectors formed by picking exactly one of the two vectors vi and wi for each i= 1, . . . , z. Then form a bit string by setting sij =1 if this set has vector vi and 0 if it has vector wi. Then, all the vectors in this set share the item corresponding to the boolean string. For example, in Table 2, the demand vectors v3,w2,w1 share item 4(= \u2032 100\u2032), the demand vectors w3,v2,v1 share item 3(=\u2032 011\u2032) and so on.\nNow, we construct an instance consisting of \u2022 B/z inputs with profit coefficient 4 and demand vector vi, for each i=1, . . . , z. \u2022 qi inputs with profit 3 and demand vectorwi, for each i, where qi is a random variable following\nBinomial(2B/z,1/2).\n\u2022 \u221a\nB/4z inputs with profit 2 and demand vector wi, for each i.\n\u2022 2B/z\u2212 qi inputs with profit 1 and demand vector wi, for each i. Using the properties of demand vectors ensured in the construction, we prove the following claim:\nClaim 1. Let ri denote the number of vectors of type wi accepted by any 1\u2212 \u01eb competitive solution for the constructed example. Then, it must hold that\n\u2211\ni\n|ri \u2212B/z| \u2264 7\u01ebB.\nProof. Let OPT denote the optimal value of the offline problem. And let OPTi denote the profit obtained from demands accepted of type i. Let topwi(k) denote the sum of profits of top k inputs with demand vector wi. Then\nOPT= z \u2211\ni=1\nOPTi \u2265 z \u2211\ni=1\n(4B/z+topwi(B/z)) = 4B+ z \u2211\ni=1\ntopwi(B/z).\nLet O\u0302PT be the objective value of a solution which accepts ri vectors of type wi. First, note that \u2211\ni ri \u2264B. This is because all wis share one common item, and there are at most B units of this item available. Let Y be the set {i : ri >B/z}, and X be the remaining i\u2019s, i.e. X = {i : ri \u2264B/z}. Then, we show that the total number of accepted vis cannot be more than B\u2212 \u2211\ni\u2208Y ri+ |Y |B/z. Obviously, the set Y cannot contribute more than |Y |B/z vis. Let S \u2286X contribute the remaining vis. Now consider the item that is common to all wis in set Y and vis in the set S (there is at least one such item by construction). Since only B units of this item are available, the total number of vis contributed by S cannot be more than B \u2212 \u2211 i\u2208Y ri. Therefore the number of accepted vis is less than or equal to B\u2212\u2211i\u2208Y ri + |Y |B/z. Denote P = \u2211\ni\u2208Y ri\u2212|Y |B/z, M = |X|B/z\u2212 \u2211 i\u2208X ri. Then, P,M \u2265 0. And the objective value\nO\u0302PT \u2264 z \u2211\ni=1\ntopwi(ri)+ 4(B\u2212 \u2211\ni\u2208Y\nri + |Y |B/z)\n\u2264 z \u2211\ni=1\ntopwi(B/z)+ 3P \u2212M +4(B\u2212P )\n= OPT\u2212P \u2212M.\nSince OPT\u2264 7B, this means that, P +M must be less than 7\u01ebB in order to get an approximation ratio of 1\u2212 \u01eb or better. Here is a brief description of the remaining proof. By construction, for every i, there are exactly 2B/z demand vectors wi that have profit coefficients 1 and 3, and among them each has equal probability to take value 1 or 3. Now, from the previous claim, in order to get a near-optimal solution, one must select close to B/z demand vectors of type wi. Therefore, if the total number of (3,wi) inputs are more than B/z, then selecting any (2,wi) will cause a loss of 1 in profit as compared to the optimal profit; and if the total number of (3,wi) inputs are less thanB/z\u2212 \u221a B/4z, then rejecting any (2,wi) will cause a loss of 1 in profit. Using the central limit theorem, at any step, both these events can happen with a constant probability. Thus, every decision for (2,wi) might result in a loss with constant probability, which results in a total expected loss of \u2126( \u221a B/z) for every i, that is, a total loss of \u2126( \u221a zB).\nIf the number of wis to be accepted is not exactly B/z, some of these \u221a B/z decisions may not be mistakes, but as in the claim above, such cases cannot be more than 7\u01ebB. Therefore, the expected value of online solution,\nONLINE\u2264OPT\u2212\u2126( \u221a zB\u2212 7\u01ebB).\nSince OPT\u2264 7B, in order to get (1\u2212 \u01eb) approximation factor, we need\n\u2126( \u221a z/B\u2212 7\u01eb)\u2264 7\u01eb\u21d2B \u2265\u2126(z/\u01eb2) = \u2126(log(m)/\u01eb2).\nThis completes the proof of Theorem 2. A detailed exposition of the steps used in this proof\nappears in Appendix C."}, {"heading": "5. Extensions", "text": "We provide a few extensions of our results in this section."}, {"heading": "5.1. Online multi-dimensional linear program", "text": "We consider the following more general online linear programs with multi-dimensional decisions xt \u2208Rk at each step, as defined in (3) in Section 1:\nmaximize \u2211n t=1 f T t xt subject to \u2211n\nt=1 g T itxt \u2264 bi, i= 1, . . . ,m xTt e\u2264 1,xt \u2265 0, t= 1, . . . , n xt \u2208Rk, t= 1, . . . , n.\n(15)\nOur online algorithm remains essentially the same (as described in Section 3), with xt(p) now defined as follows:\nxt(p) =\n{\n0 if for all j, ftj \u2264 \u2211\ni pigitj er otherwise, where r \u2208 argmaxj(ftj \u2212 \u2211 i pigitj).\nHere er is the unit vector with 1 at the rth entry and 0 otherwise. And we break ties arbitrarily in our algorithm. Using the complementarity conditions of (15), and the lower bound condition on B as assumed in Theorem 3, we can prove the following lemmas.4 The proofs are very similar to the proofs for the one-dimensional case, and will be provided in Appendix D.\nLemma 8. Let x\u2217 and p\u2217 be the optimal primal and dual solutions to (15) respectively. Then x\u2217t and xt(p \u2217) differs for at most m values of t.\nLemma 9. Define p and q to be distinct if and only if xt(p) 6= xt(q) for some t. Then, there are at most nmk2m distinct price vectors.\nWith the above lemmas, the proof of Theorem 3 will follow exactly as the proof for Theorem 1."}, {"heading": "5.2. Online integer programs", "text": "From the definition of xt(p) in (9), our algorithm always outputs integer solutions. And since the competitive ratio analysis compares the online solution to the optimal solution of the corresponding linear programming relaxation, the competitive ratio stated in Theorem 1 also holds for the online integer programs. The same observation holds for the general online linear programs introduced in Section 5.1 since it also outputs integer solutions."}, {"heading": "5.3. Fast solution for large linear programs by column sampling", "text": "Apart from online problems, our algorithm can also be applied for solving (offline) linear programs\nthat are too large to consider all the variables explicitly. Similar to the one-time learning online\nsolution, one could randomly sample of \u01ebn variables, and use the dual solution p\u0302 for this smaller\nprogram to set the values of variables xj as xj(p\u0302). This approach is very similar to the column generation method used for solving large linear programs Dantzig (1963). Our result provides the\nfirst rigorous analysis of the approximation achieved by the approach of reducing the linear program\nsize by randomly selecting a subset of columns."}, {"heading": "6. Conclusions", "text": "In this paper, we provide a 1 \u2212 O(\u01eb) competitive algorithm for a general class of online linear programming problems under the assumption of random order of arrival and some mild conditions\non the right-hand-side input. The conditions we use are independent of the optimal objective value,\nthe objective coefficients, and the distributions of input data.\nOur dynamic learning algorithm works by dynamically updating a threshold price vector at\ngeometric time intervals, where the dual prices learned from the revealed columns in the previous\nperiod are used to determine the sequential decisions in the current period. Our dynamic learning\napproach might be useful in designing online algorithms for other problems.\nThere are many questions for future research. One important question is whether the current\nbound on the size of the right-hand-input B is tight? Currently as we show in this paper, there\nis a gap between our algorithm and the lower bound. Through some numerical experiments, we\nfind that the actual performance of our algorithm is close to the lower bound (see Wang (2012)).\nHowever, we are not able to prove it. Filling that gap would be a very interesting direction for\nfuture research."}, {"heading": "Appendix A: Supporting lemmas for Section 2", "text": "A.1. Hoeffding-Bernstein\u2019s Inequality for sampling without replacement\nBy Theorem 2.14.19 in van der Vaart and Wellner (1996):\nLemma 10. Let u1, u2, ...ur be random samples without replacement from the real numbers {c1, c2, ..., cR}. Then for every t > 0,\nP\n( \u2223\n\u2223 \u2223 \u2223 \u2223\nr \u2211\ni=1\nui \u2212 rc\u0304 \u2223 \u2223 \u2223 \u2223\n\u2223\n\u2265 t ) \u2264 2 exp ( \u2212 t 2\n2r\u03c32R + t\u2206R\n)\nwhere \u2206R =maxi ci\u2212mini ci, c\u0304= 1R \u2211 i ci, and \u03c3 2 R = 1 R \u2211R i=1(ci\u2212 c\u0304)2.\nA.2. Proof of inequality (12) We prove that with probability 1\u2212 \u01eb, b\u0302i = \u2211 t\u2208N aitxt(p\u0302) \u2265 (1\u2212 3\u01eb)bi given \u2211\nt\u2208S aitxt(p\u0302) \u2265 (1\u2212 2\u01eb)\u01ebbi. The proof is very similar to the proof of Lemma 2. Fix a price vector p and i. Define a permutation is \u201cbad\u201d for p, i if both (a) \u2211\nt\u2208S aitxt(p) \u2265 (1 \u2212 2\u01eb)\u01ebbi and (b) \u2211 t\u2208N aitxt(p) \u2264 (1\u2212 3\u01eb)bi hold. Define Yt = aitxt(p). Then, the probability of bad permutations is bounded by:\nP\n( \u2223\n\u2223 \u2223 \u2223 \u2223 \u2211\nt\u2208S\nYt \u2212 \u01eb \u2211\nt\u2208N\nYt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 \u01eb2bi \u2223 \u2223 \u2223 \u2223 \u2223 \u2211\nt\u2208N\nYt \u2264 (1\u2212 3\u01eb)bi ) \u2264 P ( \u2223 \u2223 \u2223 \u2223\n\u2223\n\u2211\nt\u2208S\nZt \u2212 \u01eb \u2211\nt\u2208N\nZt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 \u01eb2bi \u2223 \u2223 \u2223 \u2223 \u2223 \u2211\nt\u2208N\nZt = (1\u2212 3\u01eb)bi )\n\u2264 2 exp ( \u2212bi\u01eb 3\n3\n)\n\u2264 \u01eb m \u00b7nm\nwhere Zt = (1\u22123\u01eb)biYt\u2211\nt\u2208N Yt\nin the first inequality and the second inequality is because of Lemma 10 and the\nlast inequality follows from that bi \u2265 6m log(n/\u01eb)\u01eb3 . Summing over nm distinct prices and i= 1, . . . ,m, we get the desired inequality."}, {"heading": "Appendix B: Supporting lemmas for Section 3", "text": "B.1. Proof of Lemma 5 Consider \u2211\nt aitx\u0302t for a fixed i. For ease of notation, we temporarily omit the subscript i. Define\nYt = atxt(p). If x and p are the optimal primal and dual solutions for (13) and its dual respectively, then we have:\n\u2113 \u2211\nt=1\nYt = \u2113 \u2211\nt=1\natxt(p)\u2264 \u2113 \u2211\nt=1\natxt \u2264 (1\u2212h\u2113)b \u2113\nn .\nHere the first inequality is because of the definition of xt(p) and Lemma 1. Therefore, the probability of \u201cbad\u201d permutations for this p, i and \u2113 is bounded by:\nP\n(\n\u2113 \u2211\nt=1\nYt \u2264 (1\u2212h\u2113) b\u2113\nn ,\n2\u2113 \u2211\nt=\u2113+1\nYt \u2265 b\u2113\nn\n)\n\u2264 P ( \u2113 \u2211\nt=1\nYt \u2264 (1\u2212h\u2113) b\u2113\nn ,\n2\u2113 \u2211\nt=1\nYt \u2265 2b\u2113\nn\n)\n+P\n(\u2223\n\u2223 \u2223 \u2223 \u2223\n\u2113 \u2211\nt=1\nYt \u2212 1\n2\n2\u2113 \u2211\nt=1\nYt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 h\u2113 2 b\u2113 n , 2\u2113 \u2211\nt=1\nYt \u2264 2b\u2113\nn\n)\n. (16)\nFor the first term, we first define Zt = 2b\u2113Yt\nn \u2211\n2\u2113 t=1 Yt . It is easy to see that\nP\n(\n\u2113 \u2211\nt=1\nYt \u2264 (1\u2212h\u2113) b\u2113\nn ,\n2\u2113 \u2211\nt=1\nYt \u2265 2b\u2113\nn\n) \u2264 P ( \u2113 \u2211\nt=1\nZt \u2264 (1\u2212h\u2113) b\u2113\nn ,\n2\u2113 \u2211\nt=1\nZt = 2b\u2113\nn\n)\n.\nAnd furthermore, using Lemma 10, we have\nP\n(\n\u2113 \u2211\nt=1\nZt \u2264 (1\u2212h\u2113) b\u2113\nn ,\n2\u2113 \u2211\nt=1\nZt = 2b\u2113\nn\n) \u2264 P ( \u2113 \u2211\nt=1\nZt \u2264 (1\u2212h\u2113) b\u2113\nn\n\u2223 \u2223 \u2223 \u2223 \u2223 2\u2113 \u2211\nt=1\nZt = 2b\u2113\nn\n)\n\u2264 P ( \u2223 \u2223 \u2223\n\u2223 \u2223\n\u2113 \u2211\nt=1\nZt \u2212 1\n2\n2\u2113 \u2211\nt=1\nZt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 h\u2113 b\u2113 n \u2223 \u2223 \u2223 \u2223 \u2223 2\u2113 \u2211\nt=1\nZt = 2b\u2113\nn\n)\n\u2264 2 exp ( \u2212 \u01eb 2b\n2+hl\n)\n\u2264 \u03b4 2\nwhere \u03b4 = \u01eb m\u00b7nm\u00b7E .\nFor the second term of (16), we can define the same Zt, and we have\nP\n( \u2223\n\u2223 \u2223 \u2223 \u2223\n\u2113 \u2211\nt=1\nYt \u2212 1\n2\n2\u2113 \u2211\nt=1\nYt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 h\u2113 2 b\u2113 n , 2\u2113 \u2211\nt=1\nYt \u2264 2b\u2113\nn\n) \u2264 P ( \u2223 \u2223 \u2223\n\u2223 \u2223\n\u2113 \u2211\nt=1\nZt \u2212 1\n2\n2\u2113 \u2211\nt=1\nZt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 h\u2113 2 b\u2113 n , 2\u2113 \u2211\nt=1\nZt = 2b\u2113\nn\n)\n\u2264 P (\u2223 \u2223 \u2223\n\u2223 \u2223\n\u2113 \u2211\nt=1\nZt \u2212 1\n2\n2\u2113 \u2211\nt=1\nZt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 h\u2113 2 b\u2113 n \u2223 \u2223 \u2223 \u2223 \u2223 2\u2113 \u2211\nt=1\nZt = 2b\u2113\nn\n)\n\u2264 2 exp ( \u2212 \u01eb 2b\n8+2h\u2113\n)\n\u2264 \u03b4 2\nwhere the second to last step is due to Lemma 10 and the last step holds because h\u2113 \u2264 1 and the condition made on B.\nLastly, we define two prices to be distinct the same way as we do in the proof of Lemma 2.2. Then we take a union bound over all the nm distinct prices, i= 1, . . . ,m, and E values of \u2113, the lemma is proved.\nB.2. Proof of inequality (14) The proof is very similar to the proof of Lemma 5. Fix p, \u2113 and i \u2208 {1, . . . ,m}, we define \u201cbad\u201d permutations for p, i, \u2113 as those permutations such that all the following conditions hold: (a) p= p\u0302\u2113, that is, p is the price learned as the optimal dual solution for (13), (b) pi > 0, and (c) \u22112\u2113\nt=1 aitxt(p)\u2264 (1\u2212 2h\u2113\u2212 \u01eb) 2\u2113n bi. We will show that the probability of bad permutations is small. Define Yt = aitxt(p). If p is an optimal dual solution for (13), and pi > 0, then by the KKT conditions the ith inequality constraint holds with equality. Therefore, by Lemma 1, we have:\n\u2113 \u2211\nt=1\nYt = \u2113 \u2211\nt=1\naitxt(p)\u2265 (1\u2212h\u2113) \u2113\nn bi \u2212m\u2265 (1\u2212h\u2113\u2212 \u01eb)\n\u2113 n bi,\nwhere the last inequality follows from B =mini bi \u2265 m\u01eb2 , and \u2113\u2265 n\u01eb. Therefore, the probability of \u201cbad\u201d permutations for p, i, \u2113 is bounded by:\nP\n(\n\u2113 \u2211\nt=1\nYt \u2265 (1\u2212h\u2113\u2212 \u01eb) \u2113\nn bi,\n2\u2113 \u2211\nt=1\nYt \u2264 (1\u2212 2h\u2113\u2212 \u01eb) 2\u2113\nn bi\n)\n\u2264 P (\u2223 \u2223 \u2223\n\u2223 \u2223\n\u2113 \u2211\nt=1\nYt \u2212 1\n2\n2\u2113 \u2211\nt=1\nYt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 h\u2113 bi\u2113 n \u2223 \u2223 \u2223 \u2223 \u2223 2\u2113 \u2211\nt=1\nYt \u2264 (1\u2212 2h\u2113\u2212 \u01eb) 2\u2113\nn bi\n)\n\u2264 P ( \u2223 \u2223 \u2223\n\u2223 \u2223\n\u2113 \u2211\nt=1\nZt \u2212 1\n2\n2\u2113 \u2211\nt=1\nZt\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2265 h\u2113 bi\u2113 n \u2223 \u2223 \u2223 \u2223 \u2223 2\u2113 \u2211\nt=1\nZt = (1\u2212 2h\u2113\u2212 \u01eb) 2\u2113\nn bi\n)\n\u2264 2 exp ( \u2212\u01eb 2bi 2 ) \u2264 \u03b4,\nwhere Zt = (1\u22122h\u2113\u2212\u01eb)2\u2113biYt\nn \u2211\n2\u2113 t=1 Yt and \u03b4 = \u01eb m\u00b7nm\u00b7E . The last inequality follows from the condition on B. Next,\nwe take a union bound over all the nm distinct p\u2019s, i= 1, . . . ,m, and E values of \u2113, we conclude that with probability 1\u2212 \u01eb 2\u2113 \u2211\nt=1\naitx\u0302t(p\u0302 \u2113)\u2265 (1\u2212 2h\u2113\u2212 \u01eb)\n2\u2113 n bi\nfor all i such that p\u0302i > 0 and all \u2113."}, {"heading": "Appendix C: Detailed steps for Theorem 2", "text": "Let c1, . . . , cn denote the n customers. For each i, the set Ri \u2286 {c1, . . . , cn} of customers with bid vector wi and bid value 1 or 3 is fixed with |Ri|= 2B/z for all i. Conditional on set Ri the bid values of customers {cj, j \u2208Ri} are independent random variables that take value 1 or 3 with equal probability.\nNow consider the tth bid of (2,wi). In at least 1/2 of the random permutations, the number of bids from set Ri before the bid t is less than B/z. Conditional on this event, with a constant probability the bids in Ri before t take values such that the bids after t can make the number of (3,wi) bids more than B/z with a constant probability and less than B/z \u2212 \u221a B/4z with a constant probability. This probability calculation is similar to the one used by Kleinberg (2005) in his proof of the necessity of condition B \u2265\u2126(1/\u01eb2). For completeness, we derive it in the Lemma 11 towards the end of the proof.\nNow, in the first type of instances (in which the number of (3,wi) bids are more than B/z), retaining a (2,wi) bid is a \u201cpotential mistake\u201d of size 1; similarly, in the second type of instances (in which the number of (3,wi) bids are less than B/z), skipping a (2,wi) bid is a potential mistake of size 1. We call it a potential mistake of size 1 because it will cost a profit loss of 1 if the online algorithm decides to pick B/z of wi bids. Among these mistakes, |ri \u2212B/z| of them may be recovered in each instance by deciding to pick ri 6=B/z of wi bids. The total expected number of potential mistakes is \u2126( \u221a Bz) (since there are \u221a\nB/4z of (2,wi)\nbids for every i). By Claim 1, no more than a constant fraction of instances can recover more than 7\u01ebB of the potential mistakes.\nLet ONLINE denote the expected value for the online algorithm over random permutation and\nrandom instances of the problem. Therefore,\nONLINE\u2264OPT\u2212\u2126( \u221a zB\u2212 7\u01ebB).\nNow, observe that OPT\u2264 7B. This is because by construction every set of demand vectors (consisting of either vi or wi for each i) will have at least 1 item in common, and since there are only B units of this item available, at most 2B demand vectors can be accepted giving a profit of at most\n7B. Therefore, ONLINE \u2264 OPT(1\u2212 \u2126( \u221a z/B \u2212 7\u01eb)), and in order to get (1\u2212 \u01eb) approximation factor we need\n\u2126( \u221a z/B\u2212 7\u01eb)\u2264O(\u01eb)\u21d2B \u2265\u2126(z/\u01eb2).\nThis completes the proof of Theorem 2.\nLemma 11. Consider 2k random variables Yj, j =1, . . . ,2k that take value 0/1 independently with equal probability. Let r \u2264 k.Then with constant probability Y1, . . . , Yr take value such that \u22112k j=1 Yj can be greater or less than its expected value k by \u221a k/2 with equal constant probability.\nP\n( \u2223\n\u2223 \u2223 \u2223 \u2223\n2k \u2211\nj=1\nYj \u2212 k \u2223 \u2223 \u2223 \u2223\n\u2223\n\u2265 \u2308 \u221a k/2\u2309\n\u2223 \u2223 \u2223 \u2223 \u2223 Y1, . . . Yr ) \u2265 c\nfor some constant 0< c< 1.\nProof of Lemma 11:\n\u2022 Given r\u2264 k, |\u2211j\u2264r Yj \u2212 r/2| \u2264 \u221a k/4 with constant probability (by central limit theorem). \u2022 Given r\u2264 k, |\u2211j>r Yj \u2212 (2k\u2212 r)/2)| \u2265 3 \u221a k/4 with constant probability.\nGiven the above events |\u2211j Yj \u2212 k| \u2265 \u221a k/2, and by symmetry both events have equal probability."}, {"heading": "Appendix D: Online multi-dimensional linear program", "text": "D.1. Proof of Lemma 8 Using Lagrangian duality, observe that given optimal dual solution p\u2217, optimal solution x\u2217 is given by: maximize fTt xt \u2212 \u2211 i p \u2217 ig T itxt\nsubject to eTx\u2264 1,xt \u2265 0. (17)\nTherefore, it must be true that if x\u2217tr = 1, then r \u2208 argmaxj{ftj \u2212 (p\u2217)Tgtj} and ftr \u2212 (p\u2217)Tgtr \u2265 0 This means that for t\u2019s such that maxj{ftj \u2212 (p\u2217)Tgtj} is strictly positive and argmaxj returns a unique solution, xt(p \u2217) and x\u2217t are identical. By random perturbation argument there can be at most m values of t that does not satisfy this condition (for each such t, p satisfies an equation ftj \u2212 pTgtj = ftl \u2212 pTgtl for some j, l, or ftj \u2212 pTgtj = 0 for some j). This means x\u2217t and xt(p\u2217) differs for at most m values of t.\nD.2. Proof of Lemma 9 Consider nk2 expressions\nftj \u2212pTgtj \u2212 (ftl\u2212pTgtl), 1\u2264 j, l\u2264 k, j 6= l,1\u2264 t\u2264 n ftj \u2212pTgtj,1\u2264 j \u2264 k, 1\u2264 t\u2264 n.\nxt(p) is completely determined once we determine the subset of expressions out of these nk 2 expressions that are assigned a non-negative value. By theory of computational geometry, there can be at most (nk2)m such distinct assignments.\nEndnotes\n1. The assumption that aij \u2264 1 is not restrictive as we can normalize the constraint to meet this requirement.\n2. An example to show the knowledge of n is necessary to obtain a near-optimal algorithm is as follows. Suppose there is only one product and the inventory is n. And all ai\u2019s are 1. There might be n or 2n arrivals. And in either case, half of them have value 1 and half of them have value 2. Now consider any algorithm. If it accepts less than 2/3 among the first n arrivals, the loss is at least n/3 (or 1/6 of the optimal value) if in fact there are n arrivals in total. On the other hand, if it accepts more than 2/3 among the first n arrivals, then it must have accepted more than n/6 bids with value 1. And if the true number of arrivals is 2n, then it will also have a loss of at least 1/12 of the true optimal value. Thus if one doesn\u2019t know the exact n, there always exists a case where the loss is a constant fraction of the true optimal value.\n3. Here we assume the search engines use a pay-per-impression scheme. The model can be easily adapted to a pay-per-click scheme by multiplying the bid value by the click-through-rate parameters. Also we assume there is only one advertisement slot for each search result.\n4. Here we make an assumption similar to Assumption 3. That is, for any p, there can be at\nmost m arrivals such that there are ties in ftj \u2212 \u2211 i pigitj. As argued in the discussions following Assumption 3, this assumption is without loss of generality."}, {"heading": "Acknowledgments", "text": "The authors thank the two anonymous referees and the associate editor for their insightful comments and suggestions."}], "references": [{"title": "Throughput-competitive on-line routing", "author": ["B. Awerbuch", "Y. Azar", "S. Plotkin."], "venue": "FOCS\u201993: Proceedings of the 34th Annual IEEE Symposium on Foundations of Computer Science. 32\u201340.", "citeRegEx": "Awerbuch et al\\.,? 1993", "shortCiteRegEx": "Awerbuch et al\\.", "year": 1993}, {"title": "A knapsack secretary problem with applications", "author": ["M. Babaioff", "N. Immorlica", "D. Kempe", "R. Kleinberg."], "venue": "Approximation, Randomization, and Combinatorial Optimization. Algorithms and Techniques , Lecture Notes in Computer Science, vol. 4627. 16\u201328.", "citeRegEx": "Babaioff et al\\.,? 2007", "shortCiteRegEx": "Babaioff et al\\.", "year": 2007}, {"title": "Online auctions and generalized secretary problems", "author": ["M. Babaioff", "N. Immorlica", "D. Kempe", "R. Kleinberg."], "venue": "SIGecom Exch. 7(2) 1\u201311.", "citeRegEx": "Babaioff et al\\.,? 2008", "shortCiteRegEx": "Babaioff et al\\.", "year": 2008}, {"title": "Improved bounds for online stochastic matching", "author": ["B. Bahmani", "M. Kapralov."], "venue": "ESA\u201910: Proceedings of the 18th annual European conference on Algorithms: Part I . 170\u2013181.", "citeRegEx": "Bahmani and Kapralov.,? 2010", "shortCiteRegEx": "Bahmani and Kapralov.", "year": 2010}, {"title": "An overview of pricing models for revenue management", "author": ["G. Bitran", "R. Caldentey."], "venue": "Manufacturing and Service Operations Management 5(3) 203\u2013229.", "citeRegEx": "Bitran and Caldentey.,? 2003", "shortCiteRegEx": "Bitran and Caldentey.", "year": 2003}, {"title": "Online computation and competitive analysis", "author": ["A. Borodin", "R. El-Yaniv"], "venue": "Combridge", "citeRegEx": "Borodin and El.Yaniv.,? \\Q1998\\E", "shortCiteRegEx": "Borodin and El.Yaniv.", "year": 1998}, {"title": "Prediction, learning, and games", "author": ["N. Cesa-Bianchi", "G. Lugosi"], "venue": null, "citeRegEx": "Cesa.Bianchi and Lugosi.,? \\Q2006\\E", "shortCiteRegEx": "Cesa.Bianchi and Lugosi.", "year": 2006}, {"title": "Linear programming and extensions", "author": ["G. Dantzig"], "venue": null, "citeRegEx": "Dantzig,? \\Q1963\\E", "shortCiteRegEx": "Dantzig", "year": 1963}, {"title": "Dynamic pricing in the presence of inventory considerations: research", "author": ["W. Elmaghraby", "P. Keskinocak"], "venue": "Electronic Commerce", "citeRegEx": "Elmaghraby and Keskinocak.,? \\Q2003\\E", "shortCiteRegEx": "Elmaghraby and Keskinocak.", "year": 2003}, {"title": "overview, current practices and future directions", "author": ["J. Feldman", "M. Henzinger", "N. Korula", "V. Mirrokni", "C. Stein"], "venue": "Management Science", "citeRegEx": "Feldman et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Feldman et al\\.", "year": 2010}, {"title": "Online ad assignment with free", "author": ["J. Feldman", "N. Korula", "V. Mirrokni", "S. Muthukrishnan", "M. Pal"], "venue": "Algorithms\u2013ESA", "citeRegEx": "Feldman et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Feldman et al\\.", "year": 2010}, {"title": "Online stochastic matching: beating 1 ", "author": ["J. Feldman", "A. Mehta", "V. Mirrokni", "S. Muthukrishnan"], "venue": "disposal. WINE\u201909: Proceedings of the 5th Workshop on Internet and Network Economics", "citeRegEx": "Feldman et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Feldman et al\\.", "year": 2009}, {"title": "Optimal dynamic pricing of inventories with stochastic demand over finite", "author": ["G. 117\u2013126. Gallego", "G. van Ryzin"], "venue": null, "citeRegEx": "Gallego and Ryzin.,? \\Q1994\\E", "shortCiteRegEx": "Gallego and Ryzin.", "year": 1994}, {"title": "A multiproduct dynamic pricing problem and its application to network", "author": ["G. Gallego", "G. van Ryzin"], "venue": "horizons. Management Science", "citeRegEx": "Gallego and Ryzin.,? \\Q1997\\E", "shortCiteRegEx": "Gallego and Ryzin.", "year": 1997}, {"title": "Online budgeted matching in random input models with applications to adwords", "author": ["G. Goel", "A. Mehta"], "venue": null, "citeRegEx": "Goel and Mehta.,? \\Q2008\\E", "shortCiteRegEx": "Goel and Mehta.", "year": 2008}, {"title": "Online bipartite matching with unknown distributions", "author": ["C. Karande", "A. Mehta", "P. Tripathi"], "venue": "Proceedings of the 19th Annual ACM-SIAM Symposium on Discrete Algorithms", "citeRegEx": "Karande et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Karande et al\\.", "year": 2011}, {"title": "Online bipartite matching with random arrivals: an approach based on strongly", "author": ["M. Mahdian", "Q. Yan"], "venue": null, "citeRegEx": "Mahdian and Yan.,? \\Q2011\\E", "shortCiteRegEx": "Mahdian and Yan.", "year": 2011}, {"title": "Adwords and generalized on-line matching", "author": ["A. Mehta", "A. Saberi", "U. Vazirani", "V. Vazirani"], "venue": null, "citeRegEx": "Mehta et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Mehta et al\\.", "year": 2005}, {"title": "Geometry of online packing linear programs", "author": ["M. Molinaro", "R. Ravi"], "venue": "Proceedings of the 46th Annual IEEE Symposium on Foundations of Computer Science", "citeRegEx": "Molinaro and Ravi.,? \\Q2014\\E", "shortCiteRegEx": "Molinaro and Ravi.", "year": 2014}, {"title": "Weak convergence and empirical processes: with applications to statistics", "author": ["A. van der Vaart", "J. Wellner"], "venue": null, "citeRegEx": "Vaart and Wellner.,? \\Q1996\\E", "shortCiteRegEx": "Vaart and Wellner.", "year": 1996}, {"title": "Dynamic learning mechanism in revenue management problems", "author": ["Z. Springer. Wang"], "venue": null, "citeRegEx": "Wang,? \\Q2012\\E", "shortCiteRegEx": "Wang", "year": 2012}, {"title": "Airline network seat control", "author": ["University", "E.L. Palo Alto. Williamson"], "venue": "Ph. D. Thesis, MIT, Cambridge, MA .", "citeRegEx": "University and Williamson,? 1992", "shortCiteRegEx": "University and Williamson", "year": 1992}], "referenceMentions": [{"referenceID": 5, "context": "For an overview of the online optimization literature and its recent development, we refer the readers to Borodin and El-Yaniv (1998), Buchbinder and Naor (2009a) and Devanur (2011).", "startOffset": 106, "endOffset": 134}, {"referenceID": 5, "context": "For an overview of the online optimization literature and its recent development, we refer the readers to Borodin and El-Yaniv (1998), Buchbinder and Naor (2009a) and Devanur (2011).", "startOffset": 106, "endOffset": 163}, {"referenceID": 5, "context": "For an overview of the online optimization literature and its recent development, we refer the readers to Borodin and El-Yaniv (1998), Buchbinder and Naor (2009a) and Devanur (2011). In many examples mentioned above, the problem can be formulated as an online linear programming problem (Sometimes, people consider the corresponding integer program.", "startOffset": 106, "endOffset": 182}, {"referenceID": 15, "context": ", Mehta et al. (2005), Buchbinder and Naor (2009b)).", "startOffset": 2, "endOffset": 22}, {"referenceID": 15, "context": ", Mehta et al. (2005), Buchbinder and Naor (2009b)).", "startOffset": 2, "endOffset": 51}, {"referenceID": 1, "context": "However, this leads to very pessimistic performance bounds for this problem: no online algorithm can achieve better than O(1/n) approximation of the optimal offline solution (Babaioff et al. (2008)).", "startOffset": 175, "endOffset": 198}, {"referenceID": 1, "context": "However, this leads to very pessimistic performance bounds for this problem: no online algorithm can achieve better than O(1/n) approximation of the optimal offline solution (Babaioff et al. (2008)). On the other hand, although a priori input distribution can simplify the problem to a great extent, the choice of distribution is very critical and the performance can suffer if the actual input distribution is not as assumed. Specifically, Assumption 1 is weaker than assuming the columns are drawn independently from some (possibly unknown) distribution. Indeed, one can view n i.i.d. columns as first drawing n samples from the underlying distribution and then randomly permute them. Therefore, our proposed algorithm and its performance would also apply if the input data is drawn i.i.d. from some distribution. Assumption 2 is required since we need to use the quantity n to decide the length of history for learning the threshold prices in our algorithm. In fact, as shown in Devanur and Hayes (2009), it is necessary for any algorithm to get a near-optimal performance.", "startOffset": 175, "endOffset": 1007}, {"referenceID": 17, "context": "Agrawal, Wang and Ye: A Dynamic Near-Optimal Algorithm for Online Linear Programming 4 Article submitted to Operations Research; manuscript no. (Please, provide the manuscript number!) and K = {x\u2208Rk :xTe\u2264 1,x\u2265 0} (we use e to denote the all 1 vectors). The offline linear program is to choose x1,...,xn to solve maximize \u2211n j=1 f T j xj subject to \u2211n j=1 g T ijxj \u2264 bi, i= 1, ...,m xj \u2208K. In the corresponding online problem, given the previous t\u2212 1 decisions x1, . . . ,xt\u22121, each time we choose a k-dimensional decision xt \u2208Rk, satisfying: \u2211t j=1 g T ijxj \u2264 bi, i= 1, . . . ,m xt \u2208K, (3) using the knowledge up to time t. And the objective is to maximize \u2211n j=1 f T j xj over the entire time horizon. Note that Problem (2) is a special case of Problem (3) with k= 1. 1.1. Specific applications In the following, we show some specific applications of the online linear programming model. The examples are only a few among the wide range of applications of this model. 1.1.1. Online knapsack/secretary problem The one dimensional version of the online linear programming problem studied in this paper is usually referred as online knapsack or secretary problem. In such problems, a decision maker faces a sequence of options, each with a certain cost and a value, and he has to choose a subset of them in an online fashion so as to maximize the total value without violating the cost constraint. Applications of this problem arise in many contexts, such as hiring workers, scheduling jobs and bidding in sponsored search auctions. Random permutation model has been widely adopted in the study of this problem, see Kleinberg (2005) and Babaioff et al.", "startOffset": 9, "endOffset": 1631}, {"referenceID": 0, "context": "Random permutation model has been widely adopted in the study of this problem, see Kleinberg (2005) and Babaioff et al. (2007) and references thereafter.", "startOffset": 104, "endOffset": 127}, {"referenceID": 0, "context": "Random permutation model has been widely adopted in the study of this problem, see Kleinberg (2005) and Babaioff et al. (2007) and references thereafter. In those papers, either a constant competitive ratio is obtained for finite-sized problems or a near-optimal algorithm is proposed for large-sized problems. In this paper, we study an extension of this problem to higher dimension and propose a near-optimal algorithm for it. 1.1.2. Online routing problem Consider a computer network connected by m edges, each edge i has a bounded capacity (bandwidth) bi. There are a large number of requests arriving online, each asking for certain capacities at \u2208Rm in the network, along with a utility or price for his/her request. The offline problem for the decision maker is given by the following integer program: maximize \u2211n t=1 \u03c0txt subject to \u2211n t=1 aitxt \u2264 bi i= 1, . . . ,m xt \u2208 {0,1}. Discussions of this problem can be found in Buchbinder and Naor (2009b), Awerbuch et al.", "startOffset": 104, "endOffset": 958}, {"referenceID": 0, "context": "Discussions of this problem can be found in Buchbinder and Naor (2009b), Awerbuch et al. (1993) and references therein.", "startOffset": 73, "endOffset": 96}, {"referenceID": 10, "context": ", Mehta et al. (2005), Goel and Mehta (2008), Devanur and Hayes (2009), Karande et al.", "startOffset": 2, "endOffset": 22}, {"referenceID": 10, "context": "(2005), Goel and Mehta (2008), Devanur and Hayes (2009), Karande et al.", "startOffset": 8, "endOffset": 30}, {"referenceID": 10, "context": "(2005), Goel and Mehta (2008), Devanur and Hayes (2009), Karande et al.", "startOffset": 8, "endOffset": 56}, {"referenceID": 10, "context": "(2005), Goel and Mehta (2008), Devanur and Hayes (2009), Karande et al. (2011), Bahmani and Kapralov (2010), Mahdian and Yan (2011), Feldman et al.", "startOffset": 8, "endOffset": 79}, {"referenceID": 3, "context": "(2011), Bahmani and Kapralov (2010), Mahdian and Yan (2011), Feldman et al.", "startOffset": 8, "endOffset": 36}, {"referenceID": 3, "context": "(2011), Bahmani and Kapralov (2010), Mahdian and Yan (2011), Feldman et al.", "startOffset": 8, "endOffset": 60}, {"referenceID": 20, "context": "Agrawal, Wang and Ye: A Dynamic Near-Optimal Algorithm for Online Linear Programming Article submitted to Operations Research; manuscript no. (Please, provide the manuscript number!) 7 inputs (for example, in the online adwords problem, it is estimated that a large search engine could receive several billions of searches per day, even if we focus on a specific category, the number can still be in the millions) with reasonably large right-hand-side inputs (e.g., the budgets for the advertiser), the condition is not hard to satisfy. Furthermore, the conditions in Theorem 1 and 3 are just theoretical results, the performance of our algorithm might still be very good even if the conditions are not satisfied (as shown in some numerical tests in Wang (2012)).", "startOffset": 9, "endOffset": 762}, {"referenceID": 1, "context": "Various online algorithms have been studied under this model, including the secretary problem (Kleinberg (2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes (2009), Feldman et al.", "startOffset": 113, "endOffset": 136}, {"referenceID": 1, "context": "Various online algorithms have been studied under this model, including the secretary problem (Kleinberg (2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes (2009), Feldman et al.", "startOffset": 113, "endOffset": 204}, {"referenceID": 1, "context": "Various online algorithms have been studied under this model, including the secretary problem (Kleinberg (2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes (2009), Feldman et al. (2009b), Goel and Mehta (2008), Mahdian and Yan (2011), Karande et al.", "startOffset": 113, "endOffset": 228}, {"referenceID": 1, "context": "Various online algorithms have been studied under this model, including the secretary problem (Kleinberg (2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes (2009), Feldman et al. (2009b), Goel and Mehta (2008), Mahdian and Yan (2011), Karande et al.", "startOffset": 113, "endOffset": 251}, {"referenceID": 1, "context": "Various online algorithms have been studied under this model, including the secretary problem (Kleinberg (2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes (2009), Feldman et al. (2009b), Goel and Mehta (2008), Mahdian and Yan (2011), Karande et al.", "startOffset": 113, "endOffset": 275}, {"referenceID": 1, "context": "Various online algorithms have been studied under this model, including the secretary problem (Kleinberg (2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes (2009), Feldman et al. (2009b), Goel and Mehta (2008), Mahdian and Yan (2011), Karande et al. (2011), Bahmani and Kapralov (2010)) and the online packing problem (Feldman et al.", "startOffset": 113, "endOffset": 298}, {"referenceID": 1, "context": "Various online algorithms have been studied under this model, including the secretary problem (Kleinberg (2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes (2009), Feldman et al. (2009b), Goel and Mehta (2008), Mahdian and Yan (2011), Karande et al. (2011), Bahmani and Kapralov (2010)) and the online packing problem (Feldman et al.", "startOffset": 113, "endOffset": 327}, {"referenceID": 1, "context": "Various online algorithms have been studied under this model, including the secretary problem (Kleinberg (2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes (2009), Feldman et al. (2009b), Goel and Mehta (2008), Mahdian and Yan (2011), Karande et al. (2011), Bahmani and Kapralov (2010)) and the online packing problem (Feldman et al. (2010), Molinaro and Ravi (2014)).", "startOffset": 113, "endOffset": 382}, {"referenceID": 1, "context": "Various online algorithms have been studied under this model, including the secretary problem (Kleinberg (2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes (2009), Feldman et al. (2009b), Goel and Mehta (2008), Mahdian and Yan (2011), Karande et al. (2011), Bahmani and Kapralov (2010)) and the online packing problem (Feldman et al. (2010), Molinaro and Ravi (2014)).", "startOffset": 113, "endOffset": 408}, {"referenceID": 1, "context": "Various online algorithms have been studied under this model, including the secretary problem (Kleinberg (2005), Babaioff et al. (2008)), the online matching and adwords problem (Devanur and Hayes (2009), Feldman et al. (2009b), Goel and Mehta (2008), Mahdian and Yan (2011), Karande et al. (2011), Bahmani and Kapralov (2010)) and the online packing problem (Feldman et al. (2010), Molinaro and Ravi (2014)). Among these work, two types of results are obtained: one achieves a constant competitive ratio independent of the input parameters; the other focuses on the performance of the algorithm when the input size is large. Our paper falls into the second category. In the following literature review, we will focus ourselves on this category of work. The first result that achieves a near-optimal performance in the random permutation model is by Kleinberg (2005), in which a 1 \u2212 O(1/ \u221a B) competitive algorithm is proposed for the single dimensional multiple-choice secretary problem.", "startOffset": 113, "endOffset": 867}, {"referenceID": 16, "context": "Agrawal, Wang and Ye: A Dynamic Near-Optimal Algorithm for Online Linear Programming 8 Article submitted to Operations Research; manuscript no. (Please, provide the manuscript number!) techniques are required for our analysis. Specifically, Kleinberg (2005) recursively applies a randomized version of the classical secretary algorithm while we maintain a price based on the linear programming duality theory and have a fixed price updating schedule.", "startOffset": 9, "endOffset": 258}, {"referenceID": 16, "context": "Agrawal, Wang and Ye: A Dynamic Near-Optimal Algorithm for Online Linear Programming 8 Article submitted to Operations Research; manuscript no. (Please, provide the manuscript number!) techniques are required for our analysis. Specifically, Kleinberg (2005) recursively applies a randomized version of the classical secretary algorithm while we maintain a price based on the linear programming duality theory and have a fixed price updating schedule. We also prove that no online algorithm can achieve a competitive ratio better than 1\u2212\u03a9( \u221a logm/B) for the multi-dimensional problem. To the best of our knowledge, this is the first result that shows the necessity of dependence on the dimension m, for the best competitive ratio achievable for this problem. It clearly points out that high dimensionality indeed adds to the difficulty of this problem. Later, Devanur and Hayes (2009) study a linear programming based approach for the online adwords problem.", "startOffset": 9, "endOffset": 884}, {"referenceID": 9, "context": "Recently, Feldman et al. (2010) study a more general online packing problem which allows the dimension of the choice set to vary at each time period (a further extension of (3)).", "startOffset": 10, "endOffset": 32}, {"referenceID": 9, "context": "Recently, Feldman et al. (2010) study a more general online packing problem which allows the dimension of the choice set to vary at each time period (a further extension of (3)). They propose a one-time learning algorithm which achieves a competitive ratio that depends both on the righthand-side B and OPT. And the dependence on B is of order 1 \u2212 O( 3 \u221a m logn/B). Therefore, comparing to their competitive ratio, our result not only removes the dependence on OPT, but also improves the dependence on B by an order. We show that the improvement is due to the use of dynamic learning. More recently, Molinaro and Ravi (2014) study the same problem and obtain a competitive ratio of 1\u2212O( \u221a m2 logm/B).", "startOffset": 10, "endOffset": 625}, {"referenceID": 9, "context": "Recently, Feldman et al. (2010) study a more general online packing problem which allows the dimension of the choice set to vary at each time period (a further extension of (3)). They propose a one-time learning algorithm which achieves a competitive ratio that depends both on the righthand-side B and OPT. And the dependence on B is of order 1 \u2212 O( 3 \u221a m logn/B). Therefore, comparing to their competitive ratio, our result not only removes the dependence on OPT, but also improves the dependence on B by an order. We show that the improvement is due to the use of dynamic learning. More recently, Molinaro and Ravi (2014) study the same problem and obtain a competitive ratio of 1\u2212O( \u221a m2 logm/B). The main structure of their algorithm (especially the way they obtain square root rather than cubic root) is modified from that in this paper. They further use a novel covering technique to remove the dependence on n in the competitive ratio, at an expense of increasing an order of m. In contrast, we present the improvement from the cubic root to square root and how to remove the dependence on OPT. A comparison of the results of Kleinberg (2005), Devanur and Hayes (2009), Feldman et al.", "startOffset": 10, "endOffset": 1151}, {"referenceID": 9, "context": "Recently, Feldman et al. (2010) study a more general online packing problem which allows the dimension of the choice set to vary at each time period (a further extension of (3)). They propose a one-time learning algorithm which achieves a competitive ratio that depends both on the righthand-side B and OPT. And the dependence on B is of order 1 \u2212 O( 3 \u221a m logn/B). Therefore, comparing to their competitive ratio, our result not only removes the dependence on OPT, but also improves the dependence on B by an order. We show that the improvement is due to the use of dynamic learning. More recently, Molinaro and Ravi (2014) study the same problem and obtain a competitive ratio of 1\u2212O( \u221a m2 logm/B). The main structure of their algorithm (especially the way they obtain square root rather than cubic root) is modified from that in this paper. They further use a novel covering technique to remove the dependence on n in the competitive ratio, at an expense of increasing an order of m. In contrast, we present the improvement from the cubic root to square root and how to remove the dependence on OPT. A comparison of the results of Kleinberg (2005), Devanur and Hayes (2009), Feldman et al.", "startOffset": 10, "endOffset": 1177}, {"referenceID": 9, "context": "Recently, Feldman et al. (2010) study a more general online packing problem which allows the dimension of the choice set to vary at each time period (a further extension of (3)). They propose a one-time learning algorithm which achieves a competitive ratio that depends both on the righthand-side B and OPT. And the dependence on B is of order 1 \u2212 O( 3 \u221a m logn/B). Therefore, comparing to their competitive ratio, our result not only removes the dependence on OPT, but also improves the dependence on B by an order. We show that the improvement is due to the use of dynamic learning. More recently, Molinaro and Ravi (2014) study the same problem and obtain a competitive ratio of 1\u2212O( \u221a m2 logm/B). The main structure of their algorithm (especially the way they obtain square root rather than cubic root) is modified from that in this paper. They further use a novel covering technique to remove the dependence on n in the competitive ratio, at an expense of increasing an order of m. In contrast, we present the improvement from the cubic root to square root and how to remove the dependence on OPT. A comparison of the results of Kleinberg (2005), Devanur and Hayes (2009), Feldman et al. (2010), Molinaro and Ravi (2014) and this work is shown in Table 1.", "startOffset": 10, "endOffset": 1200}, {"referenceID": 9, "context": "Recently, Feldman et al. (2010) study a more general online packing problem which allows the dimension of the choice set to vary at each time period (a further extension of (3)). They propose a one-time learning algorithm which achieves a competitive ratio that depends both on the righthand-side B and OPT. And the dependence on B is of order 1 \u2212 O( 3 \u221a m logn/B). Therefore, comparing to their competitive ratio, our result not only removes the dependence on OPT, but also improves the dependence on B by an order. We show that the improvement is due to the use of dynamic learning. More recently, Molinaro and Ravi (2014) study the same problem and obtain a competitive ratio of 1\u2212O( \u221a m2 logm/B). The main structure of their algorithm (especially the way they obtain square root rather than cubic root) is modified from that in this paper. They further use a novel covering technique to remove the dependence on n in the competitive ratio, at an expense of increasing an order of m. In contrast, we present the improvement from the cubic root to square root and how to remove the dependence on OPT. A comparison of the results of Kleinberg (2005), Devanur and Hayes (2009), Feldman et al. (2010), Molinaro and Ravi (2014) and this work is shown in Table 1.", "startOffset": 10, "endOffset": 1226}, {"referenceID": 20, "context": "Agrawal, Wang and Ye: A Dynamic Near-Optimal Algorithm for Online Linear Programming Article submitted to Operations Research; manuscript no. (Please, provide the manuscript number!) 9 Competitiveness Kleinberg (2005) 1\u2212O (", "startOffset": 9, "endOffset": 218}, {"referenceID": 9, "context": "(only for m=1) Devanur and Hayes (2009) 1\u2212O( 3 \u221a \u03c0maxm logn/OPT) Feldman et al. (2010) 1\u2212O(max{ 3 \u221a m logn/B,\u03c0maxm logn/OPT}) Molinaro and Ravi (2012) 1\u2212O( \u221a m2 logm/B) This paper 1\u2212O( \u221a m logn/B) Table 1 Comparison of existing results Besides the random permutation model, Devanur et al.", "startOffset": 65, "endOffset": 87}, {"referenceID": 9, "context": "(only for m=1) Devanur and Hayes (2009) 1\u2212O( 3 \u221a \u03c0maxm logn/OPT) Feldman et al. (2010) 1\u2212O(max{ 3 \u221a m logn/B,\u03c0maxm logn/OPT}) Molinaro and Ravi (2012) 1\u2212O( \u221a m2 logm/B) This paper 1\u2212O( \u221a m logn/B) Table 1 Comparison of existing results Besides the random permutation model, Devanur et al.", "startOffset": 65, "endOffset": 151}, {"referenceID": 9, "context": "(only for m=1) Devanur and Hayes (2009) 1\u2212O( 3 \u221a \u03c0maxm logn/OPT) Feldman et al. (2010) 1\u2212O(max{ 3 \u221a m logn/B,\u03c0maxm logn/OPT}) Molinaro and Ravi (2012) 1\u2212O( \u221a m2 logm/B) This paper 1\u2212O( \u221a m logn/B) Table 1 Comparison of existing results Besides the random permutation model, Devanur et al. (2011) study an online resource allocation problem under what they call the adversarial stochastic input model.", "startOffset": 65, "endOffset": 296}, {"referenceID": 7, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003).", "startOffset": 242, "endOffset": 275}, {"referenceID": 7, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003).", "startOffset": 242, "endOffset": 341}, {"referenceID": 7, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003).", "startOffset": 242, "endOffset": 356}, {"referenceID": 4, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive.", "startOffset": 360, "endOffset": 388}, {"referenceID": 4, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive.", "startOffset": 360, "endOffset": 459}, {"referenceID": 4, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive. However, as commented in Cooper (2002), this model can be reduced to a price independent arrival process with availability control under Poisson arrivals.", "startOffset": 360, "endOffset": 556}, {"referenceID": 4, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive. However, as commented in Cooper (2002), this model can be reduced to a price independent arrival process with availability control under Poisson arrivals. Our model can be further viewed as a discrete version of the availability control model which is also used as an underlying model in Talluri and van Ryzin (1998) and discussed in Cooper (2002).", "startOffset": 360, "endOffset": 834}, {"referenceID": 4, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive. However, as commented in Cooper (2002), this model can be reduced to a price independent arrival process with availability control under Poisson arrivals. Our model can be further viewed as a discrete version of the availability control model which is also used as an underlying model in Talluri and van Ryzin (1998) and discussed in Cooper (2002). The idea of using a threshold - or \u201cbid\u201d - price is not new.", "startOffset": 360, "endOffset": 865}, {"referenceID": 4, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive. However, as commented in Cooper (2002), this model can be reduced to a price independent arrival process with availability control under Poisson arrivals. Our model can be further viewed as a discrete version of the availability control model which is also used as an underlying model in Talluri and van Ryzin (1998) and discussed in Cooper (2002). The idea of using a threshold - or \u201cbid\u201d - price is not new. It is initiated in Williamson (1992), Simpson (1989) and investigated further in Talluri and van Ryzin (1998).", "startOffset": 360, "endOffset": 964}, {"referenceID": 4, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive. However, as commented in Cooper (2002), this model can be reduced to a price independent arrival process with availability control under Poisson arrivals. Our model can be further viewed as a discrete version of the availability control model which is also used as an underlying model in Talluri and van Ryzin (1998) and discussed in Cooper (2002). The idea of using a threshold - or \u201cbid\u201d - price is not new. It is initiated in Williamson (1992), Simpson (1989) and investigated further in Talluri and van Ryzin (1998).", "startOffset": 360, "endOffset": 980}, {"referenceID": 4, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive. However, as commented in Cooper (2002), this model can be reduced to a price independent arrival process with availability control under Poisson arrivals. Our model can be further viewed as a discrete version of the availability control model which is also used as an underlying model in Talluri and van Ryzin (1998) and discussed in Cooper (2002). The idea of using a threshold - or \u201cbid\u201d - price is not new. It is initiated in Williamson (1992), Simpson (1989) and investigated further in Talluri and van Ryzin (1998). In Talluri and van Ryzin (1998), the authors show that the bid price control policy is asymptotically optimal.", "startOffset": 360, "endOffset": 1037}, {"referenceID": 4, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive. However, as commented in Cooper (2002), this model can be reduced to a price independent arrival process with availability control under Poisson arrivals. Our model can be further viewed as a discrete version of the availability control model which is also used as an underlying model in Talluri and van Ryzin (1998) and discussed in Cooper (2002). The idea of using a threshold - or \u201cbid\u201d - price is not new. It is initiated in Williamson (1992), Simpson (1989) and investigated further in Talluri and van Ryzin (1998). In Talluri and van Ryzin (1998), the authors show that the bid price control policy is asymptotically optimal.", "startOffset": 360, "endOffset": 1070}, {"referenceID": 4, "context": "In the operations research and management science communities, a dynamic and optimal pricing strategy for various online revenue management and resource allocation problems has always been an important research topic, some literature include Elmaghraby and Keskinocak (2003) ,Gallego and van Ryzin (1997, 1994), Talluri and van Ryzin (1998), Cooper (2002) and Bitran and Caldentey (2003). In Gallego and van Ryzin (1997, 1994) and Bitran and Caldentey (2003), the arrival processes are assumed to be price sensitive. However, as commented in Cooper (2002), this model can be reduced to a price independent arrival process with availability control under Poisson arrivals. Our model can be further viewed as a discrete version of the availability control model which is also used as an underlying model in Talluri and van Ryzin (1998) and discussed in Cooper (2002). The idea of using a threshold - or \u201cbid\u201d - price is not new. It is initiated in Williamson (1992), Simpson (1989) and investigated further in Talluri and van Ryzin (1998). In Talluri and van Ryzin (1998), the authors show that the bid price control policy is asymptotically optimal. However, they assume the knowledge on the arrival process and therefore the price is obtained by \u201cforecasting\u201d the future using the distribution information rather than \u201clearning\u201d from the past observations as we do in our paper. The idea of using linear programming to find the dual optimal bid price is discussed in Cooper (2002) where asymptotic optimality is also achieved.", "startOffset": 360, "endOffset": 1481}, {"referenceID": 19, "context": "Agrawal, Wang and Ye: A Dynamic Near-Optimal Algorithm for Online Linear Programming 10 Article submitted to Operations Research; manuscript no. (Please, provide the manuscript number!) our algorithm is distribution free\u2013no knowledge on the input distribution is assumed except for the random order of arrival and the total number of entries. Moreover, instead of learning the price just once, we propose a dynamic learning algorithm that updates the prices as more information is revealed. The design of such an algorithm answers the question raised in Cooper (2002), that is, how often and when should one update the price? We give an explicit answer to this question by showing that updating the prices at geometric time intervals -not too sparse nor too often- is optimal.", "startOffset": 9, "endOffset": 568}, {"referenceID": 6, "context": "However, unlike the doubling trick which is typically applied to an unknown time horizon (Cesa-Bianchi and Lugosi (2006)), we show that a geometric pace of price updating in a fixed length of horizon with a careful design could also enhance the performance of the algorithm.", "startOffset": 90, "endOffset": 121}, {"referenceID": 20, "context": "Agrawal, Wang and Ye: A Dynamic Near-Optimal Algorithm for Online Linear Programming 12 Article submitted to Operations Research; manuscript no. (Please, provide the manuscript number!) Assumption 3. The problem inputs are in general position, namely for any price vector p, there can be at most m columns such that pat = \u03c0t. Assumption 3 is not necessarily true for all inputs. However, as pointed out by Devanur and Hayes (2009), one can always randomly perturb \u03c0t by arbitrarily small amount \u03b7 through adding a random variable \u03bet taking uniform distribution on interval [0, \u03b7].", "startOffset": 9, "endOffset": 431}, {"referenceID": 20, "context": "Agrawal, Wang and Ye: A Dynamic Near-Optimal Algorithm for Online Linear Programming 14 Article submitted to Operations Research; manuscript no. (Please, provide the manuscript number!) Next, we take a union bound over all distinct p\u2019s. We call two price vectors p and q distinct if and only if they result in distinct solutions, i.e., {xt(p)} 6 = {xt(q)}. Note that we only need to consider distinct prices, since otherwise all the Yt\u2019s are exactly the same. Note that each distinct p is characterized by a unique separation of n points ({\u03c0t,at}t=1) in m+1-dimensional space by a hyperplane. By results from computational geometry, the total number of such distinct prices is at most n (Orlik and Terao (1992)).", "startOffset": 9, "endOffset": 711}, {"referenceID": 7, "context": "This approach is very similar to the column generation method used for solving large linear programs Dantzig (1963). Our result provides the first rigorous analysis of the approximation achieved by the approach of reducing the linear program size by randomly selecting a subset of columns.", "startOffset": 101, "endOffset": 116}, {"referenceID": 7, "context": "This approach is very similar to the column generation method used for solving large linear programs Dantzig (1963). Our result provides the first rigorous analysis of the approximation achieved by the approach of reducing the linear program size by randomly selecting a subset of columns. 6. Conclusions In this paper, we provide a 1 \u2212 O(\u01eb) competitive algorithm for a general class of online linear programming problems under the assumption of random order of arrival and some mild conditions on the right-hand-side input. The conditions we use are independent of the optimal objective value, the objective coefficients, and the distributions of input data. Our dynamic learning algorithm works by dynamically updating a threshold price vector at geometric time intervals, where the dual prices learned from the revealed columns in the previous period are used to determine the sequential decisions in the current period. Our dynamic learning approach might be useful in designing online algorithms for other problems. There are many questions for future research. One important question is whether the current bound on the size of the right-hand-input B is tight? Currently as we show in this paper, there is a gap between our algorithm and the lower bound. Through some numerical experiments, we find that the actual performance of our algorithm is close to the lower bound (see Wang (2012)).", "startOffset": 101, "endOffset": 1395}, {"referenceID": 7, "context": "This approach is very similar to the column generation method used for solving large linear programs Dantzig (1963). Our result provides the first rigorous analysis of the approximation achieved by the approach of reducing the linear program size by randomly selecting a subset of columns. 6. Conclusions In this paper, we provide a 1 \u2212 O(\u01eb) competitive algorithm for a general class of online linear programming problems under the assumption of random order of arrival and some mild conditions on the right-hand-side input. The conditions we use are independent of the optimal objective value, the objective coefficients, and the distributions of input data. Our dynamic learning algorithm works by dynamically updating a threshold price vector at geometric time intervals, where the dual prices learned from the revealed columns in the previous period are used to determine the sequential decisions in the current period. Our dynamic learning approach might be useful in designing online algorithms for other problems. There are many questions for future research. One important question is whether the current bound on the size of the right-hand-input B is tight? Currently as we show in this paper, there is a gap between our algorithm and the lower bound. Through some numerical experiments, we find that the actual performance of our algorithm is close to the lower bound (see Wang (2012)). However, we are not able to prove it. Filling that gap would be a very interesting direction for future research. Appendix A: Supporting lemmas for Section 2 A.1. Hoeffding-Bernstein\u2019s Inequality for sampling without replacement By Theorem 2.14.19 in van der Vaart and Wellner (1996): Lemma 10.", "startOffset": 101, "endOffset": 1681}], "year": 2014, "abstractText": "Authors are encouraged to submit new papers to INFORMS journals by means of a style file template, which includes the journal title. However, use of a template does not certify that the paper has been accepted for publication in the named journal. INFORMS journal templates are for the exclusive purpose of submitting to an INFORMS journal and should not be used to distribute the papers in print or online or to submit the papers to another publication.", "creator": "LaTeX with hyperref package"}}}