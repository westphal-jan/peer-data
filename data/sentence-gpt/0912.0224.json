{"id": "0912.0224", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Dec-2009", "title": "A Multi-stage Probabilistic Algorithm for Dynamic Path-Planning", "abstract": "Probabilistic sampling methods have become very popular to solve single-shot path planning problems. Rapidly-exploring Random Trees (RRTs) in particular have been shown to be efficient in solving high dimensional problems. Even though several RRT variants have been proposed for dynamic replanning, these methods only perform well in environments with infrequent changes in the data source.\n\n\n\n\n1.\n2.\n3.\n4.\n5.\n6.\n7.\n8.\n9.\n10.\n11.\n12.\n13.\n14.\n15.\n16.\n17.\n18.\n19.\n20.\n21.\n22.\n23.\n24.\n25.\n26.\n27.\n28.\n29.\n30.\n31.\n32.\n33.\n34.\n35.\n36.\n37.\n38.\n39.\n40.\n41.\n42.\n43.\n44.\n45.\n46.\n47.\n48.\n49.\n50.\n51.\n52.\n53.\n54.\n55.\n56.\n57.\n58.\n59.\n60.\n61.\n62.\n63.\n64.\n65.\n66.\n67.\n68.\n69.\n70.\n71.\n72.\n73.\n74.\n75.\n76.\n77.\n78.\n79.\n80.\n81.\n82.\n83.\n84.\n85.\n86.\n87.\n88.\n89.\n90.\n91.\n92.\n93.\n94.\n95.\n96.\n97.\n98.\n99.\n99.\n100.\n101.\n102.\n103.\n104.\n105.\n106.\n107.\n108.\n109.\n110.\n111.\n112.\n113.\n114.\n115.\n116.\n117.\n118.\n119.\n120.\n121.\n122.\n123.\n124.\n125.\n126.\n127.\n128.\n129.\n130.\n129.\n131.\n130.\n131.\n132.\n13.\n134.\n135.\n\n136.\n137.\n138.\n139.\n140", "histories": [["v1", "Tue, 1 Dec 2009 20:55:01 GMT  (136kb,D)", "http://arxiv.org/abs/0912.0224v1", "7 pages, 5 figures. Presented in Ingelectra 2009 conference"]], "COMMENTS": "7 pages, 5 figures. Presented in Ingelectra 2009 conference", "reviews": [], "SUBJECTS": "cs.AI cs.RO", "authors": ["nicolas a barriga", "mauricio araya-l\\'opez"], "accepted": false, "id": "0912.0224"}, "pdf": {"name": "0912.0224.pdf", "metadata": {"source": "CRF", "title": "A Multi-stage Probabilistic Algorithm for Dynamic Path-Planning", "authors": ["Nicolas A. Barriga", "Mauricio Araya-L\u00f3pez"], "emails": ["nbarriga@inf.utfsm.cl", "mauricio.araya@loria.fr"], "sections": [{"heading": null, "text": "Keywords-artificial intelligence; motion planning; RRT; Multi-stage; local search; greedy heuristics;\nI. INTRODUCTION\nThe dynamic path-planning problem consists in finding a suitable plan for each new configuration of the environment by recomputing a free-collision path using the new information available at each time step [5]. This kind of problem can be found for example by a robot trying to navigate through an area crowded with people, such as a shopping mall or supermarket. The problem has been addressed widely in its several flavors, such as cellular decomposition of the configuration space [12], partial environmental knowledge [11], high-dimensional configuration spaces [6] or planning with non-holonomic constraints [8]. However, simpler variations of this problem are complex enough that cannot be solved with deterministic techniques, and therefore they are worthy to study.\nThis paper is focused on finding and traversing a collisionfree path in two dimensional space, for a holonomic robot 1, without kinodynamic restrictions 2, in two different scenarios:\n\u2022 several unpredictably moving obstacles or adversaries. \u2022 partially known environment, when at some point in\ntime, a new obstacle is found.\n1A holonomic robot is a robot in which the controllable degrees of freedom is equal to the total degrees of freedom.\n2Kinodynamic planning is a problem in which velocity and acceleration bounds must be satisfied\nBesides from one (or few) new obstacle(s) in the second scenario we assume that we have perfect information of the environment at all times.\nWe will focus on continuous space algorithms and won\u2019t consider algorithms that use discretized representations of the configuration space, such as D* [12], because for high dimensional problems, the configuration space becomes intractable in terms of both memory and computation time, and there is the extra difficulty of calculating the discretization size, trading off accuracy versus computational cost.\nThe offline RRT is efficient at finding solutions but they are far from being optimal, and must be post-processed for shortening, smoothing or other qualities that might be desirable in each particular problem. Furthermore, replanning RRTs are costly in terms of computation time, as well as evolutionary and cell-decomposition approaches. Therefore, the novelty of this work is the mixture of the feasibility benefits of the RRTs, the repairing capabilities of local search, and the computational inexpensiveness of greedy algorithms, into our lightweight multi-stage algorithm.\nIn the following sections, we present several path planning methods that can be applied to the problem described above. In section II-A we review the basic offline, single-query RRT, a probabilistic method that builds a tree along the free configuration space until it reaches the goal state. Afterwards, we introduce the most popular replanning variants of the RRT: ERRT in section II-B, DRRT in section II-C and MP-RRT in section II-D. Then, in section III we present our new hybrid multi-stage algorithm with the experimental results and comparisons in section IV. At last, the conclusions and further work are discussed in section V."}, {"heading": "II. PREVIOUS AND RELATED WORK", "text": ""}, {"heading": "A. Rapidly-Exploring Random Tree", "text": "One of the most successful probabilistic sampling methods for offline path planning currently in use, is the Rapidlyexploring Random Tree (RRT), a single-query planner for static environments, first introduced in [9]. RRTs work towards finding a continuous path from a state qinit to a state qgoal in the free configuration space Cfree, by building a tree rooted at qinit. A new state qrand is uniformly sampled at random from the configuration space C. Then the nearest\nar X\niv :0\n91 2.\n02 24\nv1 [\ncs .A\nI] 1\nD ec\n2 00\n9\nnode, qnear, in the tree is located, and if qrand and the shortest path from qrand to qnear are in Cfree, then qrand is added to the tree. The tree growth is stopped when a node is found near qgoal. To speed up convergence, the search is usually biased to qgoal with a small probability. In [7], two new features are added to RRTs. First, the EXTEND function is introduced, which, instead of trying to add directly qrand to the tree, makes a motion towards qrand and tests for collisions.\nThen a greedier approach is introduced, which repeats EXTEND until an obstacle is reached. This ensures that most of the time, we will be adding states to the tree, instead of just rejecting new random states. The second extension is the use of two trees, rooted at qinit and qgoal, which are grown towards each other. This significantly decreases the time needed to find a path."}, {"heading": "B. ERRT", "text": "The execution extended RRT presented in [3] introduces two RRTs extensions to build an on-line planner: the waypoint cache and the adaptive cost penalty search, which improves re-planning efficiency and the quality of generated paths. The waypoint cache is implemented by keeping a constant size array of states, and whenever a plan is found, all the states in the plan are placed in the cache with random replacement. Then, when the tree is no longer valid, a new tree must be grown, and there are three possibilities for choosing a new target state. With probability P[goal], the goal is chosen as the target; With probability P[waypoint], a random waypoint is chosen, and with remaining probability a uniform state is chosen as before. Values used in [3] are P[goal]= 0.1 and P[waypoint]= 0.6. In the other extension \u2014 the adaptive cost penalty search \u2014 the planner dynamically modifies a parameter \u03b2 to help it finding shorter paths. A value of 1 for \u03b2 will always extend from the root node, while a value of 0 is equivalent to the original algorithm. Unfortunately, the solution presented in [3] lacks of implementation details and experimental results on this extension."}, {"heading": "C. Dynamic RRT", "text": "The Dynamic Rapidly-exploring Random Tree (DRRT) described in [4] is a probabilistic analog to the widely used D* family of algorithms. It works by growing a tree from qgoal to qinit. The principal advantage is that the root of the tree does not have to be changed during the lifetime of the planning and execution. Also, in some problem classes the robot has limited range sensors, thus moving obstacles (or new ones) are typically near the robot and not near the goal. In general, this strategy attempts to trim smaller branches and farther away from the root. When new information concerning the configuration space is received, the algorithm removes the newly-invalid branches of the tree, and grows the remaining tree, focusing, with a certain\nprobability(empirically tuned to 0.4 in [4]) to a vicinity of the recently trimmed branches, by using the a similar structure to the waypoint cache of the ERRT. In experimental results DRRT vastly outperforms ERRT."}, {"heading": "D. MP-RRT", "text": "The Multipartite RRT presented in [14] is another RRT variant which supports planning in unknown or dynamic environments. The MP-RRT maintains a forest F of disconnected sub-trees which lie in Cfree, but which are not connected to the root node qroot of T , the main tree. At the start of a given planning iteration, any nodes of T and F which are no longer valid are deleted, and any disconnected sub-trees which are created as a result are placed into F . With given probabilities, the algorithm tries to connect T to a new random state, to the goal state, or to the root of a tree in F . In [14], a simple greedy smoothing heuristic is used, that tries to shorten paths by skipping intermediate nodes. The MP-RRT is compared to an iterated RRT, ERRT and DRRT, in 2D, 3D and 4D problems, with and without smoothing. For most of the experiments, MP-RRT modestly outperforms the other algorithms, but in the 4D case with smoothing, the performance gap in favor of MP-RRT is much larger. The authors explained this fact due to MP-RRT being able to construct much more robust plans in the face of dynamic obstacle motion. Another algorithm that utilizes the concept of forests is the Reconfigurable Random Forests (RRF) presented in [10], but without the success of MP-RRT."}, {"heading": "III. A MULTI-STAGE PROBABILISTIC ALGORITHM", "text": "In highly dynamic environments, with many (or a few but fast) relatively small moving obstacles, regrowing trees are pruned too fast, cutting away important parts of the trees before they can be replaced. This reduce dramatically the performance of the algorithms, making them unsuitable for these class of problems. We believe that a better performance could be obtained by slightly modifying a RRT solution using simple obstacle-avoidance operations on the new colliding points of the path by informed local search. Then, the path could be greedily optimized if the path has reached the feasibility condition."}, {"heading": "A. Problem Formulation", "text": "At each time-step, the proposed problem could be defined as an optimization problem with satisfiability constraints. Therefore, given a path our objective is to minimize an evaluation function (i.e. distance, time, or path-points), with the Cfree constraint. Formally, let the path \u03c1 = p1p2 . . . pn a sequence of points, where pi \u2208 Rn a n-dimensional point (p1 = qinit, pn = qgoal), Ot \u2208 O the set of obstacles positions at time t, and eval : Rn \u00d7 O 7\u2192 R an evaluation function of the path depending on the object positions. Then, our ideal objective is to obtain the optimum \u03c1\u2217 path that\nminimize our eval function within a feasibility restriction in the form\n\u03c1\u2217 = argmin \u03c1 [eval(\u03c1,Ot)] with feas(\u03c1,Ot) = Cfree (1)\nwhere feas(\u00b7, \u00b7) is a feasibility function that equals to Cfree iff the path \u03c1 is collision free for the obstacles Ot. For simplicity, we use very naive eval(\u00b7, \u00b7) and feas(\u00b7, \u00b7) functions, but this could be extended easily to more complex evaluation and feasibility functions. The used feas(\u03c1,Ot) function assumes that the robot is a punctual object (dimensionless) in the space, and therefore, if all segments \u2212\u2212\u2212\u2212\u2192pipi+1 of the path do not collide with any object oj \u2208 Ot, we say that the path is in Cfree. The eval(\u03c1,Ot) function will be the points count of \u03c1, assuming that similar paths with less points are shorter. This could be easily changed to the euclidean distance, time, smoothness, clearness or several other optimization criterions."}, {"heading": "B. A Multi-stage Probabilistic Strategy", "text": "If solving equation 1 is not a simple task in static environments, solving dynamic versions turns out to be even more difficult. In dynamic path planning we cannot wait until reaching the optimal solution because we must deliver a \u201cgood enough\u201d plan within some time quantum. Then, a heuristic approach must be developed to tackle the on-line nature of the problem. The heuristic algorithms presented in sections II-B, II-C and II-D, extend a method developed for static environments, which produce a poor response to highly dynamic environments and an unwanted complexity of the algorithms.\nWe propose a multi-stage combination of three simple heuristic probabilistic techniques to solve each part of the problem: feasibility, initial solution and optimization.\n1) Feasibility: The key point in this problem is the hard constraint in equation 1 which must be met before even thinking about optimizing. The problem is that in highly dynamic environments a path turns rapidly from feasible to unfeasible \u2014 and the other way around \u2014 even if our path does not change. We propose a simple informed local search to obtain paths in Cfree. The idea is to randomly search for a Cfree path by modifying the nearest colliding segment of the path. As we include in the search some knowledge of the problem, the informed term is coined to distinguish it from blind local search. The details of the operators used for the modification of the path are described in section III-C.\n2) Initial Solution: The problem with local search algorithms is that they repair a solution that it is assumed to be near the feasibility condition. Trying to produce feasible paths from scratch with local search (or even with evolutionary algorithms [13]) is not a good idea due the randomness of the initial solution. Therefore, we propose feeding the informed local search with a standard RRT solution at the start of the planning, as can be seen in figure 1.\n3) Optimization: Without an optimization criteria, the path could grow infinitely large in time or size. Therefore, the eval(\u00b7, \u00b7) function must be minimized when a (temporary) feasible path is obtained. A simple greedy technique is used here: we test each point in the solution to check if it can be removed maintaining feasibility, if so, we remove it and check the following point, continuing until reaching the last one."}, {"heading": "C. Algorithm Implementation", "text": "Algorithm 1. Main() Require: qrobot \u2190 is the current robot position Require: qgoal \u2190 is the goal position\n1: while qrobot 6= qgoal do 2: updateWorld(time) 3: process(time)\nThe multi-stage algorithm proposed in this paper works by alternating environment updates and path planning, as\ncan be seen in Algorithm 1. The first stage of the path planning (see Algorithm 2) is to find an initial path using a RRT technique, ignoring any cuts that might happen during environment updates. Thus, the RRT ensures that the path found does not collide with static obstacles, but might collide with dynamic obstacles in the future. When a first path is found, the navigation is done by alternating a simple informed local search and a simple greedy heuristic as is shown in Figure 1.\nAlgorithm 2. process(time) Require: qrobot \u2190 is the current robot position Require: qstart \u2190 is the starting position Require: qgoal \u2190 is the goal position Require: Tinit \u2190 is the tree rooted at the robot position Require: Tgoal \u2190 is the tree rooted at the goal position Require: path \u2190 is the path extracted from the merged\nRRTs 1: qrobot \u2190 qstart 2: Tinit.init(qrobot) 3: Tgoal.init(qgoal) 4: while time elapsed < time do 5: if first path not found then 6: RRT(Tinit, Tgoal) 7: else 8: if path is not collision free then 9: firstCol \u2190 collision point closest to robot\n10: arc(path, firstCol) 11: mut(path, firstCol) 12: postProcess(path)\nThe second stage is the informed local search, which is a two step function composed by the arc and mutate operators (Algorithms 3 and 4). The first one tries to build a square arc around an obstacle, by inserting two new points\nbetween two points in the path that form a segment colliding with an obstacle, as is shown in Figure 2. The second step in the function is a mutation operator that moves a point close to an obstacle to a random point in the vicinity, as is graphically explained in Figure 3. The mutation operator is inspired by the ones used in the Adaptive Evolutionary Planner/Navigator(EP/N) presented in [13], while the arc operator is derived from the arc operator in the Evolutionary Algorithm presented in [1].\nAlgorithm 3. arc(path, firstCol) Require: vicinity \u2190 some vicinity size\n1: randDev \u2190 random(\u2212vicinity, vicinity) 2: point1 \u2190 path[firstCol] 3: point2 \u2190 path[firstCol+1] 4: if random()%2 then 5: newPoint1 \u2190 (point1[X]+randDev,point1[Y]) 6: newPoint2 \u2190 (point2[X]+randDev,point2[Y]) 7: else 8: newPoint1 \u2190 (point1[X],point1[Y]+randDev) 9: newPoint2 \u2190 (point2[X],point2[Y]+randDev)\n10: if path segments point1-newPoint1-newPoint2-point2 are collision free then 11: add new points between point1 and point2 12: else 13: drop new point2\nThe third and last stage is the greedy optimization heuristic, which can be seen as a post-processing for path shortening, that eliminates intermediate nodes if doing so does not create collisions, as is described in the Algorithm 5."}, {"heading": "IV. EXPERIMENTS AND RESULTS", "text": "The multi-stage strategy proposed here has been developed to navigate highly-dynamic environments, and therefore, our experiments should be aimed towards that purpose.\nAlgorithm 4. mut(path, firstCol) Require: vicinity \u2190 some vicinity size\n1: path[firstCol][X] + = random(\u2212vicinity, vicinity) 2: path[firstCol][Y] + = random(\u2212vicinity, vicinity) 3: if path segments before and after path[firstCol] are\ncollision free then 4: accept new point 5: else 6: reject new point\nAlgorithm 5. postProcess(path) 1: i \u2190 0 2: while i < path.size()-2 do 3: if segment path[i] to path[i+2] is collision free then 4: delete path[i+1] 5: else 6: i \u2190 i+1\nTherefore, we have tested our algorithm in two highlydynamic situations, both of them over a map representing an office building or shopping mall (i.e. with some static walls). Also, we have ran the DRRT and MP-RRT algorithms over the same situations in order to compare the performance of our proposal."}, {"heading": "A. Experimental Setup", "text": "The first environment for our experiments consists on a map with 30 moving obstacles the same size of the robot, with a random speed between 10% and 55% the speed of the robot. This dynamic environment is shown in figure 4.\nThe second environment uses the same map, but with six obstacles, three to four times the size of the robot, appearing at a predefined time and position. This partially known environment is shown in figure 5.\nThe three algorithms were ran a hundred times in each environment. The cutoff time was five minutes for the first environment and one minute for the second, after which, the robot was considered not to have reached the goal.\nB. Implementation Details\nThe algorithms where implemented in C++ using a framework 3 developed by the same authors.\nThere are several variations that can be found in the literature when implementing RRTs. For all our RRT variants, the following are the details on where we departed from the basics:\n\u2022 We always use two trees rooted at qinit and qgoal. \u2022 Our EXTEND function, if the point cannot be added\nwithout collisions to a tree, adds the mid point between the nearest tree node and the nearest collision point to it. \u2022 In each iteration, we try to add the new randomly generated point to both trees, and if successful in both, the trees are merged, as proposed in [7]. \u2022 We found that the success rate was somewhat lower if we allow the robot to advance towards the node nearest to the goal when the trees are disconnected, as proposed in [14]. The problem is that the robot would become stuck if it enters a small concave zone of the\n3MoPa homepage: https://csrg.inf.utfsm.cl/twiki4/bin/view/CSRG/MoPa\nenvironment(like a room in a building) while there are moving obstacles inside that zone. Therefore our robot only moves when the trees are connected.\nIn MP-RRT, the forest was handled simply replacing the oldest tree in it if the forest had reached the maximum size allowed.\nConcerning the parameter selection, the probability for selecting a point in the vicinity of a point in the waypoint cache in DRRT was set to 0.4 as suggested in [4]. The probability for trying to reuse a sub tree in MP-RRT was set to 0.1 as suggested in [14]. Also, the forest size was set to 25 and the minimum size of a tree to be saved in the forest was set to 5 nodes."}, {"heading": "C. Dynamic Environment Results", "text": "The results in table I show that it takes our algorithm around a third of the time it takes the DRRT and MP-RRT to get to the goal, with far less collision checks. It was expected that nearest neighbor lookups would be much lower in the multi-stage algorithm than in the other two, because they are only performed in the RRT phase, not during navigation. However, the multi-stage algorithm seems to be slighty less dependable, as it arrived to the goal 98 out of 100 times, while the other two managed to arrive always."}, {"heading": "D. Partially Known Environment Results", "text": "The results in table II show that our multi-stage algorithm is very undependable, though faster than the other two when it actually reaches the goal. Due to the simplicity of our local search, and that it basically just avoids obstacles by stepping to the side or letting the obstacle move out of the way, when the changes to the environment are significant and obstacles do not move, it is very prone to getting stuck."}, {"heading": "V. CONCLUSIONS", "text": "The new multi-stage algorithm proposed here has a very good performance in very dynamic environments. It behaves particularly well when several small obstacles are moving\naround seemingly randomly. It\u2019s major shortcoming is that it gets easily stuck when significant changes to the environment are made, such as big static obstacles appearing near the robot, a situation usually considered as a partially known environment."}, {"heading": "A. Future Work", "text": "There are several areas of improvement for the work presented in this paper. First of all, the multi-stage algorithm must recognize a situation where it is stuck, and restart an RRT from the current location, before continuing with the navigation phase. The detection could be as simple as recognizing that the robot has not moved out of a certain vicinity for a given period of time, or that the next collision in the planned path has been against the same obstacle during a given period of time, meaning that the local search has been unable to find a path around it. This will yield a much more dependable algorithm in different kinds of environments.\nA second area of improvement is to experiment with different on-line planners such as the EP/N presented in [13], a version of the EvP([1] and [2]) modified to work in continuous configuration space or a potential field navigator. Also, the local search presented here, could benefit from the use of more sophisticated operators.\nA third area of research that could be tackled is extending this algorithm to other types of environments, ranging from totally known and very dynamic, to static partially known or unknown environments. An extension to higher dimensional problems would be one logical way to go, as RRTs are know to work well in higher dimensions.\nFinally, as RRTs are suitable for kinodynamic planning, we only need to adapt the on-line stage of the algorithm to have a new multi-stage planner for problem with kinodynamic constraints."}], "references": [{"title": "An On-the-fly Evolutionary Algorithm for Robot Motion Planning", "author": ["T. Alfaro", "M. Riff"], "venue": "Lecture Notes in Computer Science,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2005}, {"title": "An Evolutionary Navigator for Autonomous Agents on Unknown Large-Scale Environments", "author": ["T. Alfaro", "M. Riff"], "venue": "INTELLIGENT AUTOMATION AND SOFT COMPUTING,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "Real-time randomized path planning for robot navigation", "author": ["J. Bruce", "M. Veloso"], "venue": "Intelligent Robots and System,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2002}, {"title": "Replanning with rrts", "author": ["D. Ferguson", "N. Kalra", "A. Stentz"], "venue": "Robotics and Automation,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "Gross motion planning\u2014a survey", "author": ["Y.K. Hwang", "N. Ahuja"], "venue": "ACM Comput. Surv.,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1992}, {"title": "Probabilistic roadmaps for path planning in high-dimensional configuration spaces", "author": ["L. Kavraki", "P. Svestka", "J.-C. Latombe", "M. Overmars"], "venue": "Robotics and Automation, IEEE Transactions on,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1996}, {"title": "Rrt-connect: An efficient approach to single-query path planning", "author": ["J.J.J. Kuffner", "S. LaValle"], "venue": "Robotics and Automation,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2000}, {"title": "Rapidly-exploring random trees: A new tool for path planning", "author": ["S.M. Lavalle"], "venue": "Technical report,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1998}, {"title": "An incremental learning approach to motion planning with roadmap management", "author": ["T.-Y. Li", "Y.-C. Shie"], "venue": "Robotics and Automation,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2002}, {"title": "Optimal and efficient path planning for partiallyknownenvironments", "author": ["A. Stentz"], "venue": "IEEE International Conference on Robotics and Automation,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1994}, {"title": "The Focussed D\u02c6* Algorithm for Real-Time Replanning", "author": ["A. Stentz"], "venue": "In International Joint Conference on Artificial Intelligence,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1995}, {"title": "Adaptive evolutionary planner/navigator for mobile robots", "author": ["J. Xiao", "Z. Michalewicz", "L. Zhang", "K. Trojanowski"], "venue": "Evolutionary Computation, IEEE Transactions on,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1997}, {"title": "Multipartite rrts for rapid replanning in dynamic environments", "author": ["M. Zucker", "J. Kuffner", "M. Branicky"], "venue": "Robotics and Automation,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2007}], "referenceMentions": [{"referenceID": 4, "context": "The dynamic path-planning problem consists in finding a suitable plan for each new configuration of the environment by recomputing a free-collision path using the new information available at each time step [5].", "startOffset": 207, "endOffset": 210}, {"referenceID": 10, "context": "The problem has been addressed widely in its several flavors, such as cellular decomposition of the configuration space [12], partial environmental knowledge [11], high-dimensional configuration spaces [6] or planning with non-holonomic constraints [8].", "startOffset": 120, "endOffset": 124}, {"referenceID": 9, "context": "The problem has been addressed widely in its several flavors, such as cellular decomposition of the configuration space [12], partial environmental knowledge [11], high-dimensional configuration spaces [6] or planning with non-holonomic constraints [8].", "startOffset": 158, "endOffset": 162}, {"referenceID": 5, "context": "The problem has been addressed widely in its several flavors, such as cellular decomposition of the configuration space [12], partial environmental knowledge [11], high-dimensional configuration spaces [6] or planning with non-holonomic constraints [8].", "startOffset": 202, "endOffset": 205}, {"referenceID": 10, "context": "We will focus on continuous space algorithms and won\u2019t consider algorithms that use discretized representations of the configuration space, such as D* [12], because for high dimensional problems, the configuration space becomes intractable in terms of both memory and computation time, and there is the extra difficulty of calculating the discretization size, trading off accuracy versus computational cost.", "startOffset": 151, "endOffset": 155}, {"referenceID": 7, "context": "One of the most successful probabilistic sampling methods for offline path planning currently in use, is the Rapidlyexploring Random Tree (RRT), a single-query planner for static environments, first introduced in [9].", "startOffset": 213, "endOffset": 216}, {"referenceID": 6, "context": "In [7], two new features are added to RRTs.", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "The execution extended RRT presented in [3] introduces two RRTs extensions to build an on-line planner: the waypoint cache and the adaptive cost penalty search, which improves re-planning efficiency and the quality of generated paths.", "startOffset": 40, "endOffset": 43}, {"referenceID": 2, "context": "Values used in [3] are P[goal]= 0.", "startOffset": 15, "endOffset": 18}, {"referenceID": 2, "context": "Unfortunately, the solution presented in [3] lacks of implementation details and experimental results on this extension.", "startOffset": 41, "endOffset": 44}, {"referenceID": 3, "context": "The Dynamic Rapidly-exploring Random Tree (DRRT) described in [4] is a probabilistic analog to the widely used", "startOffset": 62, "endOffset": 65}, {"referenceID": 3, "context": "4 in [4]) to a vicinity", "startOffset": 5, "endOffset": 8}, {"referenceID": 12, "context": "The Multipartite RRT presented in [14] is another RRT variant which supports planning in unknown or dynamic environments.", "startOffset": 34, "endOffset": 38}, {"referenceID": 12, "context": "In [14], a simple greedy smoothing heuristic is used, that tries to shorten paths by skipping intermediate nodes.", "startOffset": 3, "endOffset": 7}, {"referenceID": 8, "context": "Another algorithm that utilizes the concept of forests is the Reconfigurable Random Forests (RRF) presented in [10], but without the success of MP-RRT.", "startOffset": 111, "endOffset": 115}, {"referenceID": 11, "context": "Trying to produce feasible paths from scratch with local search (or even with evolutionary algorithms [13]) is not a good idea due the randomness of the initial solution.", "startOffset": 102, "endOffset": 106}, {"referenceID": 11, "context": "The mutation operator is inspired by the ones used in the Adaptive Evolutionary Planner/Navigator(EP/N) presented in [13], while the arc operator is derived from the arc operator in the Evolutionary Algorithm presented in [1].", "startOffset": 117, "endOffset": 121}, {"referenceID": 0, "context": "The mutation operator is inspired by the ones used in the Adaptive Evolutionary Planner/Navigator(EP/N) presented in [13], while the arc operator is derived from the arc operator in the Evolutionary Algorithm presented in [1].", "startOffset": 222, "endOffset": 225}, {"referenceID": 6, "context": "\u2022 In each iteration, we try to add the new randomly generated point to both trees, and if successful in both, the trees are merged, as proposed in [7].", "startOffset": 147, "endOffset": 150}, {"referenceID": 12, "context": "proposed in [14].", "startOffset": 12, "endOffset": 16}, {"referenceID": 3, "context": "4 as suggested in [4].", "startOffset": 18, "endOffset": 21}, {"referenceID": 12, "context": "1 as suggested in [14].", "startOffset": 18, "endOffset": 22}, {"referenceID": 11, "context": "A second area of improvement is to experiment with different on-line planners such as the EP/N presented in [13], a version of the EvP([1] and [2]) modified to work in continuous configuration space or a potential field navigator.", "startOffset": 108, "endOffset": 112}, {"referenceID": 0, "context": "A second area of improvement is to experiment with different on-line planners such as the EP/N presented in [13], a version of the EvP([1] and [2]) modified to work in continuous configuration space or a potential field navigator.", "startOffset": 135, "endOffset": 138}, {"referenceID": 1, "context": "A second area of improvement is to experiment with different on-line planners such as the EP/N presented in [13], a version of the EvP([1] and [2]) modified to work in continuous configuration space or a potential field navigator.", "startOffset": 143, "endOffset": 146}], "year": 2009, "abstractText": "Probabilistic sampling methods have become very popular to solve single-shot path planning problems. Rapidlyexploring Random Trees (RRTs) in particular have been shown to be efficient in solving high dimensional problems. Even though several RRT variants have been proposed for dynamic replanning, these methods only perform well in environments with infrequent changes. This paper addresses the dynamic path planning problem by combining simple techniques in a multi-stage probabilistic algorithm. This algorithm uses RRTs for initial planning and informed local search for navigation. We show that this combination of simple techniques provides better responses to highly dynamic environments than the RRT extensions. Keywords-artificial intelligence; motion planning; RRT; Multi-stage; local search; greedy heuristics;", "creator": "LaTeX with hyperref package"}}}