{"id": "1006.1518", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Jun-2010", "title": "The DCA:SOMe Comparison A comparative study between two biologically-inspired algorithms", "abstract": "The Dendritic Cell Algorithm (DCA) is an immune-inspired algorithm, developed for the purpose of anomaly detection. The algorithm performs multi-sensor data fusion and correlation which results in a 'context aware' detection system. Previous applications of the DCA have included the detection of potentially malicious port scanning activity, where it has produced high rates of true positives and low rates of false positives. These results were compared to the detection of DCA for the ECL, and the DCA's detection of non-infected hosts.\n\n\n\n\nIn addition, the DCA algorithm was used to identify the most likely potential target of the DCA, and the detection of potential targets of potential hosts. This was done by calculating the time it reached the target. During the initial scan, the algorithm calculates the probability of a DCA target being detected by a random or random algorithm. The algorithm then applies the expected value of the target target at the time of the target detection of a DCA target to ensure that the target is detected, thus reducing its chance to detect and protect the host.\nIn addition, the DCA algorithm is used to identify the most likely possible target for the ECL, and the detection of potential targets. This was done by calculating the time it reached the target. During the initial scan, the algorithm calculates the probability of a DCA target being detected by a random or random algorithm. The algorithm then applies the expected value of the target at the time of the target detection of a DCA target to ensure that the target is detected, thus reducing its chance to detect and protect the host.\nThe algorithms in these experiments were combined to investigate the potential of the DCA targets using algorithms from the various DCA networks that are based on the DCA network. The algorithm also analyzed potential targets of various DCA networks to better detect and prevent potential host attacks. However, most DCA networks do not generate random DCA detection using algorithms from the networks that are based on the DCA network. The DCA network has the following limitations:\n1. The DCA network has a large number of vulnerable hosts, and some of the attackers are not capable of detecting or preventing targets of any kind. 2. DCA networks have a relatively limited number of exposed hosts, and some of the attackers are not capable of detecting or preventing them from infecting any kind. 3. The DCA network has an estimated probability of a DCA target being infected by a DCA target in order to generate additional detection", "histories": [["v1", "Tue, 8 Jun 2010 10:41:56 GMT  (1598kb)", "http://arxiv.org/abs/1006.1518v1", "38 pages, 29 figures, 10 tables, Evolutionary Intelligence"]], "COMMENTS": "38 pages, 29 figures, 10 tables, Evolutionary Intelligence", "reviews": [], "SUBJECTS": "cs.AI cs.CR cs.NE", "authors": ["julie greensmith", "jan feyereisl", "uwe aickelin"], "accepted": false, "id": "1006.1518"}, "pdf": {"name": "1006.1518.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Julie Greensmith", "Jan Feyereisl"], "emails": [], "sections": [{"heading": null, "text": "1\n2\n3\n4\n5\n6 7 Julie Greensmith \u00b7 Jan Feyereisl \u00b7 Uwe Aickelin 8\n9 The DCA: SOMe Comparison 10 11 A comparative study between two biologically-inspired algorithms 12\n13\n14\n15\n16\n17 Received: date / Accepted: date\n18\n19\n20 Abstract The Dendritic Cell Algorithm (DCA) is an immune-inspired algorithm, developed for the 21 purpose of anomaly detection. The algorithm performs multi-sensor data fusion and correlation which 22 results in a \u2018context aware\u2019 detection system. Previous applications of the DCA have included the 23 detection of potentially malicious port scanning activity, where it has produced high rates of true 24 positives and low rates of false positives. In this work we aim to compare the performance of the 25 DCA and of a Self-Organizing Map (SOM) when applied to the detection of SYN port scans, through 26 experimental analysis. A SOM is an ideal candidate for comparison as it shares similarities with the 27 DCA in terms of the data fusion method employed. It is shown that the results of the two systems are 28 comparable, and both produce false positives for the same processes. This shows that the DCA can 29 produce anomaly detection results to the same standard as an established technique. 30 31 Keywords Dendritic Cell Algorithm \u00b7 Self-Organizing Map \u00b7 SYN scan detection \u00b7 comparison\n32\n33 34 1 Introduction 35 36 The Dendritic Cell Algorithm (DCA) is an immune-inspired algorithm, which is the latest addition 37 to a family of algorithms termed Artificial Immune Systems (AIS). Such systems use abstract models 38 of particular components of the human immune system to produce systems which perform similar 39 computational tasks to those seen in the human body. Previous approaches drew inspiration from the 40 adaptive immune system producing algorithms such as clonal selection [14] and negative selection [33]. 41 The negative selection approach has been used extensively in the domain of computer security specif42 ically in the detection of potential intrusions [44]. Such systems enjoyed initial success, but have since 43 been plagued with problems regarding scalability and the generation of excessive numbers of false 44 positive alerts. 45 Aickelin et al. [1] proposed an alternative which suggests that successful AIS should be constructed 46 using the \u2018danger theory\u2019 as inspiration. The danger theory suggests that the immune system responds 47 to signals generated by the host cells (i.e. by the tissue) during cell stress, ultimately leading to the 48 targeting of proteins present under the conditions of cell stress. It is a competing immunological theory, 49 though it is still widely debated within immunology itself. This theory is centred around the detection 50 of \u2018danger signals\u2019, which are released as a result of unplanned cell death, a process termed necrosis. 51 Upon the detection of danger signals, the immune system can be activated. In the absence of necrosis, 52 cells may die in a controlled manner as part of the regulatory processes found within the tissue, in a 53 54 Julie Greensmith, Jan Feyereisl and Uwe Aickelin School of Computer Science 55 University of Nottingham 56 Wollaton Road 57 Nottingham, NG8 1BB, UK 58 E-mail: [jqg, jqf, uxa]@cs.nott.ac.uk\n59\n60\n61\n62\n63\n64\n1\n2 process called apoptosis. Dendritic cells (DCs) are sensitive to both signal types and have the ability 3 to stimulate or suppress the adaptive immune system. DCs are the intrusion detection agents of the 4 human immune system, policing the tissue for potential sources of damage in the form of signals and 5 for potential culprits responsible for the damage in the form of \u2018antigen\u2019. Antigens are proteins which 6 can be \u2018presented\u2019 to the adaptive immune system by DCs, and can belong to pathogens or to the host 7 itself. 8 The DCA incorporates danger-based DC biology to form an algorithm that is both truly bio-inspired 9 and is capable of performing anomaly detection. It is a population based algorithm, where multiple\n10 DCs are programmed to process signals and antigen. \u2018Signals\u2019 are mapped to context information, such 11 as the behaviour of a monitored, e.g. CPU usage or network traffic statistics. \u2018Antigens\u2019 are mapped 12 as potential causes for the changes in behaviour, e.g. the system calls of a running program. The DCA 13 correlates the antigen and signal information across the population of cells to produce a consensus 14 coefficient value which is assessed to determine anomalous antigen. 15 The DCA has been successfully applied to a subset of intrusion detection problems, focussing on port 16 scan detection. Port scans are used to establish network layout and to uncover vulnerable computers. 17 The detection of the scanning phase of an attack can be highly beneficial, as upon its detection the 18 level of security can be increased across a network in response. The DCA has been applied to both 19 ping scans and SYN scans in realtime and offline [27] [25]. The algorithm produced high rates of true 20 positives and low rates of false positives. 21 While the performance of the DCA on these problems appears to be good, thus far no direct 22 comparison has been performed with another system on the same port scan data. The need for a 23 rigorous comparison is necessary to truly demonstrate the capabilities of this algorithm. The signal 24 processing component housed within the DCA bears some resemblance to the function of a neural 25 network [13]. Given these superficial similarities, the obvious next-step for the development of the DCA 26 is to compare its performance to that of a neural network based system, such as a Self-Organizing Map"}, {"heading": "27 (SOM) [47].", "text": "28 SOM is a clustering method of unsupervised learning where high dimensional data is mapped to 29 a lower dimensional space to create a feature map. This map is constructed from training data and 30 consists of a series of interconnected nodes. Upon the analysis of the test data, the incoming data items 31 are matched against nodes in the map with similar characteristics. SOM uses a similar process to a 32 single-layer neural network to generate the map, and a simple distance metric is used to match the 33 incoming test data to the most appropriate node. This technique can be used for anomaly detection 34 as the training data can consist of normal data items, with unclustered data representing a potential 35 anomaly. SOM is an excellent choice for comparison as it has a history of application within computer 36 security and can be manipulated to use similar input data as used with the DCA. 37 The aim of this paper is to compare the DCA with a SOM. To achieve this aim the two algorithms 38 are applied to the detection of an outbound SYN-based port scan using data captured from previous 39 real-time experiments performed with the DCA [25]. The results of this comparison indicate that the 40 DCA and SOM are both equally as effective at detecting SYN based port scans, and appear to make 41 similar false positive errors. As a baseline a k-means clustering algorithm is applied to the signals in 42 isolation. 43 This paper is structured as follows. In Section 2, the relevant background and context information 44 is given regarding problems in computer security and how these problems relate to port scanning in 45 addition to a summary of current port scanning techniques. In Sections 3 and 4, descriptions are given 46 of the DCA and SOM respectively, including details of their implementations. In Section 5, the two 47 approaches are compared experimentally. In Section 6 we perform an analysis and comparison between 48 the two systems based on the obtained results and debate their differences and similarities, further 49 validated by a baseline series. In the final sections we discuss the results of these comparisons and 50 present the implications for the future of the DCA. 51\n52 53 2 Related Work 54 55 2.1 Overview 56 57 As this paper encompasses a variety of techniques and concepts, this section is subdivided into three 58 parts. Firstly, the problems associated with port scans are described followed by a description of current 59\n60\n61\n62\n63\n64\n1\n2 scan detection techniques. This is followed by the related computer security work in AIS, including the 3 development of the DCA and the motivation for its development. This section continues with a brief 4 overview of the use of various SOM algorithms in computer security. 5\n6\n7 8 2.2 Port Scanning and Detection 9\n10 2.2.1 Introduction to Port Scanning 11 12 Insider attacks are one of the most costly and dangerous attacks performed against computerised 13 systems, with a large amount of known intrusions of intrusions attributed to internal attackers [6]. 14 This type of intrusion is defined through the attacker being a legitimate user of a system who behaves 15 in an unauthorised manner. Such insider attacks have the potential to cause major disruption given 16 that a large number of networks do not employ internal firewalling with many security countermeasures 17 focussing on the detection of external intruders. Insiders frequently know and have access to network 18 topology information. As insiders operate from within an organisation, this provides them with scope 19 to abuse a weak link in the security chain, namely the end users. Having knowledge and relationships 20 with other network users brings with it the potential to coerce passwords from legitimate users for 21 the purpose of gaining access across multiple machines on a network. This information can be used to 22 steal sensitive data, to cause damage to the network or to disguise the identity of the true attacker. 23 Such attacks frequently involve multiple stages. The initial stage is the information gathering stage, 24 which is followed by monitoring of potential victims, finally involving an intrusion. The information 25 gathering stage involves scouting the network for potential victim host machines to suit the nature of 26 the attack. For example, the insider may wish to exploit an FTP service and would therefore search the 27 network for hosts running FTP. Port scanning is used in the information gathering stage to retrieve 28 which hosts are currently running on the network, the IP addresses and DNS names of each host, 29 which \u2018ports\u2019 are currently \u2018open\u2019 and named running host services. 30 It is wise for an attacker to understand the network in question, to avoid wasting time trying to 31 exploit machines which are not receptive to an attack. It is pointless attempting to attack a host which 32 is no longer connected to the network! While scanners are not an \u2018intrusion\u2019 in the classical sense, they 33 are often a pre-cursor to an actual attack, and evidence of sufficient scanning across a network can 34 suggest that an attack may soon follow [39]. 35 A port is a specific endpoint on a network, which is a virtual address as part of a virtual circuit. It is 36 important to note that a port in this context is an abstract concept, not to be confused with a physical 37 port such as a serial port. Ports allow for the direct exchange of information between two hosts. It is 38 similar to a telephone number and is more specific than an IP address as it provides a direct connection 39 between two endpoints. Probing a port with a packet leads to information on the state of the port and 40 its host. Ports can be in three states if the scanned host is available, namely open, closed or filtered. 41 Port scanning tools such as nmap [17] can be used to send packets to various ports on remote hosts to 42 gain understanding regarding the status of the scanned host. The type of packet used to perform such 43 probes can be one of a number of types, including Internet Control Message Protocol (ICMP) ping, 44 TCP, and UDP. According to Bailey-Lee et al. [4], TCP SYN scans are the most commonly observed 45 scan, accounting for over half of all scans performed. 46 Additionally the scans themselves can be performed in a number of different ways, varying the 47 number of hosts scanned, the number of ports scanned, the IP address of the sender and the rate 48 at which packets are sent. The combination of the number of hosts (IP addresses) scanned and the 49 number of ports gives rise to three combinations of scan: 50 51 \u2013 Horizontal Scans: A wide range of IP addresses are scanned, though only one port per host is 52 probed. This kind of scan can be used if a particular service is to be exploited, such as an FTP 53 exploit whose success would depend on finding a host running the particular version of an FTP 54 server/client. 55 \u2013 Vertical Scans: A range of ports are specified for a single IP address. This is a scan of a single 56 host, where multiple services can be searched for. Example usage of this type of scan includes 57 characterising a specific target such as a web server to assess if any exploitable services are currently 58 running. 59\n60\n61\n62\n63\n64\n2 9\n10\n1\nVictim host present with open ports\n3 4 SYN 5 Attacker\n6\n7\nSYN/ACK\nRST\nVictim\n8 Victim host present with closed ports\nSYN\nAttacker RST\n11\n12 13 Victim host not attached to IP address\n18\nVictim\n19\n20 21 \u2013 Block Scans: This is a combination of both types of scan, where multiple ports are probed across a 22 range of IP addresses. This search is especially good for uncovering the topology of a network, for 23 locating servers, printers, client hosts etc. 24 25 A SYN scan, apart from being the most prevalent scan, can be used to retrieve a substantial amount 26 of information regarding the status of a host or a network. SYN scans exploit the \u20183-way handshake\u2019 27 employed by the TCP protocol. The 3-way handshake describes the specific manner in which two 28 endpoints communicate with each other and is the initial step in opening a TCP data stream. For 29 example two hosts are connected to one another via a switched ethernet, host A and host B. To initiate 30 TCP connections between A and B, A sends a TCP SYN (synchronisation) packet to B. Provided that 31 B can receive such TCP packets, B sends a SYN/ACK (synchronisation/acknowledgement) packet to 32 A in response to the initial SYN request. Host A then replies with ACK packets which are sent until 33 all data in the transmission stream is transferred. Upon completion, A sends B a FIN (finish) packet, 34 signalling that the data transfer is complete. Port scans based on TCP SYN packets exploit a flaw in 35 this 3-way connection method. 36 Instead of completing the 3-way handshake of \u2018SYN, SYN/ACK, ACK\u2019, upon receipt of the 37 SYN/ACK packet, the scanning host does not send an ACK packet in response: depending on the 38 initial response of remote host B depends on how the scanning host behaves. The various responses to 39 SYN requests are depicted in Figure 1. 40 In the case of a host with an open port, the victim sends the attacker a SYN/ACK packet in 41 response to the original SYN request. Instead of the attacker responding back with an ACK packet, a 42 RST packet is sent instead. This leaves the TCP connection \u2018half open\u2019. As the conversation remains 43 incomplete, it does not appear in system logs, making the SYN scan stealthy. Should the scanned victim 44 host have no open ports the attacker receives a RST packet. This however, informs the attacker that a 45 host is connected to an IP address. If no host is associated with a scanned IP address, the connection 46 will time out on the attackers machine, or the attacker will receive a \u201cdestination unreachable error\u201d 47 from an interim router or firewall.\n48 49 2.2.2 Port Scan Detection 50 51 Port scan detection components are frequently integrated with commercial intrusion detection systems 52 such as Snort [62]. The detection method used involves generating an \u2018alert\u2019 upon receiving \u2018X \u2019 con53 nections within \u2018Y \u2019 seconds from host IP address \u2018Z \u2019. There are three problems with this method. 54 Firstly, the majority of port scanners are equipped with the facility to fake the IP address, often 55 called spoofing, of the source machine, rendering Z unreliable. Secondly most scanners allow for the 56 randomisation of the duration between the sending of individual packets, including slowing the rate of 57 sending to avoid detection. This makes the detection of the scan difficult if Y is defined as a constant 58 value. Finally, should the port scan detector be host based, the performance of a detector in response 59\n60\n61\n62\n63\n64\n51\n1\n2 to an incoming scan will be impaired for the detection of horizontal scans, as only a single connection 3 is made to each host. This problem can be overcome through the detection of outbound port scans, as 4 per extrusion detection [6]. 5 To overcome some of these problems a handful of systems are developed as dedicated port scan 6 detectors. For example \u2018Spice\u2019 developed by Staniford et al. [68] incorporates an anomaly probability 7 score to dynamically adjust the duration of Y . This is useful for the detection of stealthier scans which 8 use randomised or slowed rates of scan packets sending. This detection technique is termed reverse 9 sequential hypothesis testing. It is used to further extent in research performed by Jung et al. [39],\n10 where it is combined with a network based approach and is used to identify potentially malicious 11 remote hosts in addition to detecting scanning activity. 12 In our previous research, the DCA is applied to the detection of various port scans. The DCA is 13 implemented as a host based system monitor, detecting the performance of an outbound port scan, in 14 attempt overcome some of the problems with using static time windows. Initially the DCA is applied to 15 the detection of simple ICMP ping scans [29], where the algorithm was used in real-time and produced 16 high rates of true positives and low rates of false positives. 17 In addition, DCA is used in the detection of a standard SYN scans, also in a real-time environ18 ment [27]. The results of this study show that the DCA shows promise as a successful port scan 19 detector. However the results presented were preliminary and as the experiments were performed \u2018live\u2019 20 in real-time, certain sensitivity could not be performed. Therefore, it is necessary to take this investi21 gation further and explore this application with more rigour. The experiments described in this paper 22 are extension experiments from the SYN scan data used in Greensmith and Aickelin [25]. 23\n24\n25 2.3 Artificial Immune Systems and Security 26\n27 2.3.1 Immunity by Design 28 29 Numerous computer security approaches are based on the principles of anomaly detection. This tech30 nique involves producing a profile of normal host behaviour, with any significant deviation from this 31 profile presumed to be malicious or anomalous. Various AIS have been applied as anomaly detection 32 algorithms within the field of computer security, given the obvious parallel of fighting computer viruses 33 with a computer immune system [18]. The research of AIS in security has extended past the detection 34 of viruses and has focussed on network intrusion detection [45]. 35 The AIS algorithms used in security are generally based on the principles of \u201cself-nonself discrimi36 nation\u201d. This is an immunological concept that the body has the ability to discriminate between self 37 and nonself (i.e. foreign) protein molecules, termed antigen. The natural mechanism by which the body 38 learns this discrimination is termed negative selection. In this process, self-reactive immune cells are 39 deleted during a \u2018training period\u2019 in embryonic development and infancy. This results in a tuned popu40 lation of cells, poised to react against any threat which is deemed nonself. These principles are used to 41 underpin the supervised negative selection algorithm. Negative selection itself is described eloquently 42 in a number of sources including the work of Hofmeyr and Forrest [32], Ji and Dasgupta [37] and 43 Balthrop et al. [5]. 44 Following its initial success in the detection of system call anomalies [32], the negative selection 45 approach was applied to the detection of anomalous network connections [44], where potential problems 46 with scaling and excessive false positive rates were uncovered. These empirical studies suggest that 47 negative selection might not be a suitable algorithm for use in computer security, with these notions 48 confirmed by the theoretical work performed by Stibor et al. [69]. Further analysis performed by the 49 same authors has given insights into the theoretical reasons for negative selection\u2019s problems [70], with 50 more evidence presented recently by Stibor et al. in [71].\n52 53 2.3.2 The Danger Project: The Missing Link? 54 55 The criticisms of negative selection have to some degree overwhelmed the positive aspects of its de56 velopment and have in some respect discredited the use of AIS in security [66]. Issues such as scaling 57 cannot be ignored, especially as anomaly detection is often required to be performed in real-time. The 58 theoretical proofs of these problems are evident and duly noted by the wider AIS community [72].The 59\n60\n61\n62\n63\n64\n1\n2 question of how to overcome these problems remains at the forefront of AIS research, focussing on the 3 incorporation of more advanced immunology. 4 An interdisciplinary approach is presented by Aickelin et al. [1], developed in 2003 through the Dan5 ger Project. Aickelin et al. believe that some of the problems shown with negative selection approaches 6 can be attributed to its biological naivety. It is recognised that the negative selection algorithm is 7 based on a naive model of central tolerance developed in the 1950s [12]. 8 Aickelin et al. propose that through close collaboration with immunologists, computer scientists 9 will be able to develop more biologically realistic AIS which could potentially overcome the problems\n10 of false positives and scaling observed with negative selection [1]. The DCA is developed using this 11 interdisciplinary approach [26], drawing inspiration from DCs as it is now widely accepted that these 12 cells are a major control unit in the human immune system. 13 The Danger Project brought innate immunology in to the AIS spotlight, as the innate immune 14 system is shown as responsible for the initial pathogen detection [52]. From this emerged two streams 15 of research which were based on innate principles, the Dendritic Cell Algorithm and the libtissue 16 system and its related algorithms [73]. The DCA will be explained in detail in Section 3, and is based 17 on an abstract model of the behaviour of natural DCs. The libtissue system is an innate immune 18 framework implemented as an API (application programming interface) [75]. 19\n20 21 2.3.3 Summary\n22 23 AIS have been used within computer security for over a decade. Despite its initial success, the negative 24 selection algorithm was not as useful as first thought due to problems with scaling and the generation 25 of excessive amounts of false positives. These negative aspects have been shown both theoretically and 26 experimentally. To remedy this problem, the research proposed by Aickelin et al. [1] developed into 27 the DCA and the libtissue framework, both of which have shown promise in the areas of port scan 28 and exploit detection respectively.\n29\n30 31 2.4 SOM and Security\n32 33 The Self-Organizing Map algorithm was developed by Teuvo Kohonen more than two decades ago [46], 34 yet its success in various fields of science, over the years, surpasses many other neural inspired algo35 rithms to date. The algorithm\u2019s strengths lie in a number of important scientific domains. Namely 36 visualisation, clustering, data processing, reduction and classification. In more specific terms SOM is 37 an unsupervised learning algorithm that is based on the competitive learning mechanism with self38 organizing properties. Besides its clustering properties SOM can also be classed as a method for 39 multidimensional scaling and projection. 40 SOM algorithms have been first applied to computer security applications almost ten years after 41 the algorithm\u2019s inception [19]. The majority of existing research however is limited to anomaly de42 tection, particularly network based intrusion detection [16]. Some work has been done on host based 43 anomaly detection using Kohonen\u2019s algorithm, however such work is rare [35], which is surprising, 44 due to the algorithms suitability to handle multidimensional, thus multi-signal data. On numerous 45 occasions SOM algorithms have been used as a pre-processor to other computational intelligence tools, 46 such as Hidden Markov Models (HMM) [11] [10] [43] or Radial Basis Function Networks [36]. Compar47 isons of SOM algorithms with other anomaly detection approaches have been performed on numerous 48 occasions in the past. Notably a comparison with HMM [76], AIS [21] [22], traditional neural net49 works [63] [50] [38] [49] [8], k-means clustering [42] as well as Adaptive Resonance Theory [3].\n50 51 2.4.1 SOM in Intrusion Detection 52 53 Besides the above mentioned comparisons of SOM algorithms with various computational intelligence 54 techniques, here we will describe the use of SOM algorithms in areas related to our comparison or that 55 could be of interest to the general reader. 56 A seminal paper on the use of SOM algorithms for intrusion detection was presented by Ramadas 57 et al. [59]. Their work employed the original SOM algorithm as a network based anomaly detection 58 module for a larger IDS. Besides being able to monitor all types of network traffic including SMTP 59\n60\n61\n62\n63\n64\n1\n2 protocol (email), the authors state that the SOM algorithm is particularly suitable to detect buffer3 overflow attacks. However, as with the majority of anomaly detection systems, the algorithm struggles 4 to recognise attacks which resemble normal behaviour in addition to boundary case behaviour, giving 5 rise to false positives. 6 Buffer overflow [20] attack detection was also tackled by Rhodes [60] using a multilayer SOM, 7 monitoring payloads. Bolzoni [9] also looked at payload monitoring using SOM by employing a two8 tier architecture system. 9 Gonzalez and Dasgupta [21] compared SOM against another AIS algorithm. Their Real-Valued\n10 Negative Selection algorithm is based on the original Negative Selection algorithm proposed by Forrest 11 et al. [18] with the difference of using a new representation. The original Negative Selection algorithm 12 has been applied to Intrusion Detection problems in the past and has received some criticism regarding 13 its \u201cscaling problems\u201d [44]. Gonzalez and Dasgupta argue that their new representation is the key to 14 avoiding the scaling issues of the original algorithm. Their results showed that for their particular 15 problem the SOM algorithm and their own algorithm were comparable overall. 16 Albarayak et al. [2] proposed a unique way of combining a number of existing SOM approaches 17 together in a node based IDS. Their thesis is of automatically determining the most suitable SOM 18 algorithm for each node within their system. Such a decision can be achieved using heuristic rules that 19 determine a suitable SOM algorithm based on the nodes environment. 20 Miller and Inoue [55] suggested using multiple intelligent agents, each of which contains a SOM on 21 its own. Such agents combine a signature and anomaly based detection technique in order to achieve 22 a collaborative IDS, which is able to improve its detection capabilities with the use of reinforcement 23 learning. 24 DeLooze [15] employed an ensemble of SOM networks for the purpose of an IDS as well as for attack 25 characterisation. Genetic algorithms were used for attack type generation, subsequently employed as 26 part of an IDS that is able to discriminate the type of attack that has occurred. 27 SOM algorithms have also been used for the analysis of executables. Yoo [78] analysed windows 28 executables by creating maps of EXE files before and after an infection by a virus. Such maps have 29 been subsequently analysed visually and found to have contained patterns, which can be thought of 30 as virus masks. The author concludes by stating that such masks can be used in the future for virus 31 detection in a similar manner to current anti-virus techniques. The difference being that a single mask 32 could detect viruses from a whole virus family rather than being able to find only a single variant. 33 Besides the original single network SOM algorithm, the previously described newer SOM variations 34 were employed for various security research scenarios. A number of papers discuss the advantages of 35 using multiple or hierarchical SOM networks in contrast to a single network SOM. These include the 36 work of Sarasamma et al. [64], Lichodzijewski et al. [51] and Kayacik et al. [41] [30] who all used 37 various versions of the Hierarchical SOM or employed multiple SOM networks for the purpose of 38 intrusion detection. Kayacik et al. [41] state that the best performance is achieved using a 2-layer 39 SOM and that their results are by far the best of any unsupervised learning based IDS to date. 40\n41 42 2.4.2 Visualisation using SOM in IDS 43 44 Due to the SOM algorithm\u2019s capability of visualising multidimensional data in a meaningful way, its use 45 lends itself ideally to its application in visualising computer security problems. Gonzalez et al. [23] use 46 this ability to visualise the self non-self space that they use for anomaly detection. This visualisation 47 presents a clear discrimination of the different behaviours of the monitored system. Hoglund et al. [34] 48 on the other hand employed visualisation of user behaviour. In their work various host based signals 49 were used for monitoring of users. A visual representation was subsequently presented to administrators 50 in order for them to be able to make an informed decision in case of unacceptable user behaviour.\n51 52 53 3 The Dendritic Cell Algorithm 54 55 3.1 Natural DCs 56 57 The DCA is based on the observed functions of natural dendritic cells. DCs are natural intrusion 58 detection agents, who monitor the host tissue for evidence of damage. In the human body, DCs have a 59\n60\n61\n62\n63\n64\n1\n2 dual role, as garbage collectors for tissue debris and as commanders of the adaptive immune system. 3 DCs belong to the innate immune system, and do not have the adaptive capability of the lymphocytes 4 of the adaptive immune system. DCs exist in three states of differentiation, immature, semi-mature 5 and mature, which determines their exact function [52]. Modulations between the different states are 6 dependent upon the receipt of signals while in the initial or immature state. Signals which indicate 7 damage cause a transition from immature to mature. Those signals indicating good health in the 8 monitored tissue cause a transition from immature to semi mature. The signals in question are derived 9 from numerous sources, including pathogens, from healthy dying cells, from damaged cells and from\n10 inflammation. Each DC has the capability to combine the relative proportions of input signals to 11 produce its own set of output signals. Input signals processed by DCs are categorised based on their 12 origin: 13 14 PAMPs: Pathogenic associated molecular patterns are proteins expressed exclusively by bacteria, 15 which can be detected by DCs and result in immune activation [56]. The presence of PAMPS 16 usually indicates an anomalous situation. 17 Danger signals: Signals produced as a result of unplanned necrotic cell death. On damage to a cell, 18 the chaotic breakdown of internal components form danger signals which accumulate in tissue [53]. 19 DCs are sensitive to changes in danger signal concentration. The presence of danger signals may 20 or may not indicate an anomalous situation, however the probability of an anomaly is higher than 21 under normal circumstances. 22 Safe signals: Signals produced via the process of normal cell death, namely apoptosis. Cells must 23 apoptose for regulatory reasons, and the tightly controlled process results in the release of various 24 signals into the tissue [54]. These \u2018safe signals\u2019 result in immune suppression. The presence of safe 25 signals almost certainly indicate that no anomalies are present. 26 Inflammation: Various immune-stimulating molecules can be released as a result of injury. Inflamma27 tory signals and the process of inflammation is not enough to stimulate DCs alone, but can amplify 28 the effects of the other three categories of signal [67]. It is not possible to say whether an anomaly is 29 more or less likely if inflammatory signals are present. However, their presence amplifies the above 30 three signals.\n31 Dendritic cells act as natural data fusion agents, producing various output signals in response to 32 the receipt of differing combinations of input signal. The relative concentration of output signal is 33 used to determine the exact state of differentiation, expressed by the production of two molecules, 34 namely the mature and semi-mature output signals. During this phase they are exposed to varying 35 concentrations of the input signals. Exposure to PAMPs, danger signals and safe signals causes the 36 increased production of costimulatory molecules, and a resulting removal from the tissue and migration 37 to a local lymph node. 38 DCs translate the signal information received in the tissue into a context for antigen presentation, 39 i.e. the antigen presented in an overall \u2018normal\u2019 or \u2018anomalous\u2019 context. The antigen collected while in 40 the immature phase is expressed on the surface of the DC. Whilst in the lymph node, DCs seek out T41 lymphocytes (T-cells) and attempt to bind expressed antigen with the T-cells variable region receptor. 42 T-cells with a high enough affinity for the presented antigen are influenced by the output signals of 43 the DC. DCs exposed to predominantly PAMPs and danger signals are termed \u2018mature DCs\u2019; they 44 produce mature output signals, which activate the bound T-cells. Conversely, if the DC is exposed to 45 predominantly safe signals the cell is termed semi-mature and antigens are presented in a safe context, 46 as little damage is evident when the antigen is collected. The balance between the signals is translated 47 via the signal processing and correlation ability of these cells. The overall immune system response is 48 based on the systemic maturation state average of the whole DC population on a per antigen basis. 49 An abstract view of this process is presented in Figure 2. 50\n51 52 3.2 Algorithm Overview 53 54 The purpose of the DCA is to correlate disparate data-streams in the form of antigen and signals and 55 to label groups of identical antigen as \u2018normal\u2019 or \u2018anomalous\u2019. This algorithm is population based 56 with each \u2018cell\u2019 expressed as an \u2018agent\u2019. The DCA is not only a classification algorithm, it also shares 57 properties with certain filtering techniques. It provides information representing how anomalous a group 58 of antigens are, not simply if a data item is anomalous or not. This is achieved through correlating 59\n60\n61\n62\n63\n64\n24\n1\n2\n3\n4\n5 6 Immature\n7\n8\n9\n10 11 -collect antigen\n-receive signals\n12 -in tissue\n13\n14\n15\n16\n17 18\nSafe Signals\nDanger Signals\nPAMPS\nSemi-mature\n-present antigen -produce costimulation -provide tolerance cytokines -in lymph node\nMature\n-present antigen -produce costimulation -provide reactive cytokines -in lymph node\nFig. 2 An abstract view of DC maturation and signals required for differentiation where cytokines are molec-\n19 ular messengers between immune system cells. 20\n21 Table 1 Table of cumulative output signals and their associated implications for the DCA. 22 23 Output signal Function CSM signal assessed against a threshold to limit the duration of DC signal and antigen sampling, based on a 25 migration threshold 26 Semi-mature signal terminal state to semi-mature if greater than re27 sultant mature signal value 28 Mature signal terminal state to mature if greater than resultant 29 semi-mature signal value\n30\n31 32 a time-series of input signals with a group of antigen. The signals used are pre-normalised and pre33 categorised data sources, which reflect the behaviour of the system being monitored. The co-occurrence 34 of antigen and high/low signal values forms the basis of categorisation for the antigen data. The primary 35 components of a DC based algorithm are as follows: 36 1. Individual DCs with the capability to perform multi-signal processing; 37 2. Antigen collection and presentation; 38 3. Sampling behaviour and state changes; 39 4. A population of DCs and their interactions with signals and antigen; 40 5. Incoming signals and antigen, with signals pre-categorised as PAMP, danger, safe or inflammation; 41 6. Multiple antigen presentation and analysis using \u2018types\u2019 of antigen; 42 7. Generation of anomaly coefficient for various different types of antigen. 43 44 Whilst in the immature state, the DC has three functions, which are performed each time a single 45 DC is updated, with the exact nature of this processing given in Section 3.4: 46 1. Sample antigen: the DC collects antigen from an external source (in our case, from the \u2018tissue\u2019) 47 and places the antigen in its own antigen storage data structure. 48 2. Update input signals: the DC collects values of all input signals present in the signal storage area. 49 3. Calculate interim output signals: at each iteration each DC calculates three temporary output 50 signal values from the received input signals, with the output values then added to form the cell\u2019s 51 cumulative output signals. 52 53 The signal processing used to transform the input to interim output signals is shown in Figure 3, 54 with the implications of each output signal given in Table 1. Costimulatory molecule (CSM) signal is 55 used to limit the sampling duration of an individual cell. Each cell is assigned a migration threshold 56 value upon creation. The CSM values are incremented each time a cell receives signal input. Once 57 the CSM exceeds the cell\u2019s migration threshold the cell is removed from the sampling population for 58 analysis. Different cells sample for different durations as each cell is assigned a random migration 59\n60\n61\n62\n63\n64\n2\n1 2 3 Inputs 4 5 PAMP-s0,0 6\n7\n8\n9 Danger-s 0,1\n10\n11\n12 13 Safe-s\nw\n0,0,0\nOutputs CSM-o\n0\nSemi-mature-o 1\nMature-o\n14 0,2\n15 Positive Weight\n16 Negative Weight 17\nw 0,2,2\nThickness of line ~ Transforming Weight\n18\nFig. 3 A representation of the three calculations performed by each DC, per update cycle, to derive the cell\u2019s outputs through fusing together the signal inputs. Two sample notations for the weights are shown. The\n19 inflammation signal (if any) applies to all transformations shown and is therefore not depicted. Details of the 20 notation are given in Section 3.4.\n21\n22 23 threshold value (within a range to match the normalised range of the input signals). This leads to a 24 \u2018time-window\u2019 effect which adds robustness to the algorithm, as the migration is signal dependent with 25 no fixed time dependency. During periods where signal values are large the rate of migration is higher 26 and therefore tighter coupling is given to the signal and antigen data. This effect is explored in more 27 detail in Oates et al. [58] where a theoretical analysis is provided. 28 Upon transition to a matured state, the DCs output signals are assessed to form the context of all 29 antigen collected. A higher \u2019mature\u2019 output signal value results in the assignment of a context value 30 of 1 to the DC, whereas a higher \u2018semi-mature\u2019 output signal value results in a context value of 0. 31 All antigen sampled by the DC over its lifetime are output with the assigned context value. Upon 32 completion of all data processing the mean context in which the antigens are presented is calculated 33 deriving an anomaly coefficient value per antigen type. Each antigen (suspect data item) is not unique, 34 but several identical antigens are sampled. The mature context antigen value - MCAV, is used to assess 35 is a particular antigen type is anomalous. The derivation of the MCAV per antigen type is shown in 36 Equation 1, 37 Zx 38 M C AVx = 39 Yx (1) 40 where M C AVx is the MCAV coefficient for antigen type x, Zx is the number of mature context 41 antigen presentations for antigen type x and Yx is the total number of antigen presented for antigen 42 type x. 43 The effectiveness of the MCAV is dependent upon the use of antigen types. This means that the 44 input antigens are not unique in value, but belong to a population in themselves. For example, the 45 ID value of a running program is used to form antigen, with each antigen generated every time the 46 program sends an instruction to the low level system. Therefore a population of antigen is used, linked 47 to the activity of the program and all bearing the same ID number. 48 To process signals, antigens and cells the DCA uses two virtual compartments: tissue and lymph 49 nodes. The tissue is used as storage for antigens and signals and the lymph node is used for MCAV 50 generation. The tissue consists of antigen and signal containers from which the DCs sample the input 51 data. Signals are updated at regular intervals and are not removed upon sampling by a DC. Antigens 52 are input in an event-driven manner and are removed from the tissue antigen store upon sampling by 53 a DC. 54 We suggest that the updates of antigen, signals and cells are performed independently, based on 55 previous experience with this algorithm. This is represented in Figure 4. The three updates need not 56 occur simultaneously: this temporal correlation between asynchronously arriving data is performed 57 by the processing of the cells themselves. The population dynamics are used to perform the actual 58 anomaly detection. The ultimate classification of a particular type of antigen is derived not from a 59\n60\n61\n62\n63\n64\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12 13 14 Fig. 4 A UML overview of the processes at the tissue level of the program, showing the asynchronous update 15 of cells, signals and antigen. It also shows the two main stages of update and initialisation and subsequent 16 analysis.\n17 clients server\n18 compartment\n19 antigen 20 systrace\n21\n22 response\n23\n24 signal 25 signal collector\n26\nantigen store\ncells (AIS, DCs)\nsignal store\n27 Fig. 5 Architecture used to support the DCA. Input data is processes via signal and antigen clients [75]. The 28 algorithm utilises this data and resides on a server.\n29\n30 31 single DC, but from an aggregate analysis produced across the DC population over the duration of an 32 experiment. 33\n34 35 3.3 libtissue 36 37 The Danger Project [1] has produced a variety of research outcomes alongside the DCA. Such outcomes 38 include the development of danger theory and DC based immunology [77]; a framework for developing 39 immune inspired algorithms called libtissue [75]; an investigation into the interactions between the 40 innate and adaptive immune system; artificial tissue [7] and the application of a naive version of the 41 DCA for the security of sensor networks. libtissue is the API used within the Danger Project for 42 the testing of ideas and algorithms, as shown in the works of Twycross [73] [75] and Greensmith et 43 al. [28] [29]. 44 libtissue is a library implemented in C which assists the development of immune inspired algo45 rithms on real-world data. It is based on principles of innate immunology [74] [75], through the use 46 of techniques from modelling, simulation and artificial life. It allows researchers to implement algo47 rithms as a collection of cells, antigen and signals, interacting within a specified compartment. The 48 implementation has a client/server architecture which separates data collection using clients, from data 49 processing on a server, as shown in Figure 5. 50 Input data is processed using libtissue clients, which transform raw data into antigen and signals. 51 Algorithms can be implemented within the libtissue server, as it provides all the required components 52 such as the ability to define different cell types, specifying receptors, compartments and internal signals. 53 Antigen and signal sources can be added to libtissue servers, facilitating the testing of the same 54 algorithm with a number of different data sources. Input data from the client are passed to and 55 represented in a compartment contained on a server known as the tissue compartment. This is a space 56 in which cells, signals and antigen interact. Each tissue compartment has a fixed-size antigen store 57 where collected antigens are placed. The tissue compartment also stores levels of signals, set by the 58 input clients. 59\n60\n61\n62\n63\n64\n1\n2\n3\n4\n5 6 \u2018Tissue\u2019 7 - Storage area for data\n8 S1\n9\n10 S 2\nSignal Matrix\nInput Data\nAg\n1\nAg\n2\nAntigen\n11 behavioural signals 12 (network flow)\n13\n14"}, {"heading": "15 Data Sampling", "text": "16 Phase 17\n18\nS 3 ...\nS n\nAg 3 ...\nAg n\ncollected data (process IDs)\n19"}, {"heading": "20 Maturation", "text": "21 Phase 22\nImmature Dendritic Cell Population\n23\n24\n25 \u2018Semi-Mature\u2019\n26\n27\n28\n29\n30\nmore safe signals\nmore danger signals\nAnalysis\n\u2018Mature\u2019\n31 Fig. 6 Illustration of the DCA showing data input, continuous sampling, the maturation process and aggregate 32 analysis.\n33\n34 35 3.4 DCA Implementation 36 37 The DCA is implemented as a libtissue server. Input signals are combined with antigen data, such 38 as a program ID number. This is achieved through using the population of artificial DCs to perform ag39 gregate sampling and data processing. Using multiple DCs means that multiple data items in the form 40 of antigen are sampled multiple times. If a single DC presents incorrect information, it becomes incon41 sequential provided that the majority of the DCs population derive the correct cell context represented 42 as the MCAV coefficient. 43 The DCA has two main stages: initialisation, and update. Initialisation involves setting various 44 parameters and is followed by the update stage. The update stage can be decomposed into tissue 45 update and cell cycle. Signal data is fed from the data-source to the tissue server through the tissue 46 client and is updated at a user defined rate. The cell cycle involves the regular update of the DC 47 population. Following the processing of all data, the MCAV coefficients are calculated for each antigen 48 type. An overview of this is given in Figure 6. 49 The tissue update is a continuous process, whereby the values of the tissue data structures are 50 refreshed. In this implementation, signals are updated at regular intervals - in our case, this is at a 51 rate of once per second. The update of antigen occurs on an event-driven basis, with antigen items 52 updated in the tissue each time new raw data appears in the system. The updated signals provide the 53 input signals for the population of DCs. 54 The cell cycle is a discrete process occurring at a user defined rate of once per second in this 55 research. Signals and antigen from the tissue data structures are accessed by the DCs during the cell 56 cycle. This includes an update of every DC in the system with new signal values and antigen. The 57 new values are processed and accumulated as the output vector of signals is generated. The cell cycle 58 and update of tissue continues until a stopping criterion is reached. Finally, the aggregation stage is 59\n60\n61\n62\n63\n64\n1\n2 initiated, where all collected antigens are subsequently analysed and the MCAV per antigen derived. 3 This procedure forms the required post-processing for use with this algorithm. 4\n5\n6 7 3.5 Parameters and Structures\n8 9 The algorithm is described formally using the following terms.\n10 \u2013 Indices: 11 i = 0, ..., I input signal index; 12 j = 0, ..., J input signal category index; 13 k = 0, ..., K tissue antigen index; 14 l = 0, ..., L DC cycle index; 15 m = 0, ..., M DC index; 16 n = 0, ..., N DC antigen index; 17 p = 0, ..., P DC output signal index. 18 19 \u2013 Parameters: 20 I = number of input signals per category (e.g. PAMP, Danger, Safe); 21 J = number of categories of input signal; 22 K = number of antigen in tissue antigen vector; 23 L = number of DC cycles; 24 M = number of DCs in population; 25 N = DC antigen vector size ; 26 P = number of output signals per DC; 27 Q = number of antigens sampled per DC, per cycle; 28 R = number of DC antigen receptors; 29 Tmax = tissue antigen vector size. 30 31 \u2013 Data Structures: 32 T = {S, A} - the tissue; 33 S = tissue signal matrix; 34 sij = a signal index i, category j in the signal matrix S; 35 A = tissue antigen vector; 36 ak = antigen k in the tissue antigen vector; 37 DCm ={s(m), a(m), o\u203ep (m), tm }- a DC within the population; 38 s(m) = signal matrix of DCm ; 39 a(m) = antigen vector of DCm ; 40 op (m) = output signal p of DCm ; 41 o\u203ep (m) = cumulative output signal p of DCm ; 42 tm = migration threshold of DCm ; 43 wijp = transforming weight from sij to op . 44\n45\n46 47 op (m) = X X\nwijp sij (m) Vp (2) 48 i 49 j=3 50 Each DCm transforms each value of s(m) to op (m). In Equation 2, a specific example is given for 51 use with four input signals, with one signal per category and consists of some additional components. 52 Additionally, the j = 3 component implies that signal category index is not summed with the other 53 three signal categories i.e. inflammation is not treated in the same manner as the other signals, as 54 shown in this equation. The interrelationships between the weights, determined through practical 55 immunology, are shown in Table 2. 56 The tissue has containers for signal and antigen values, namely S and A. In this example version 57 of the DCA, there are four categories of signal (J = 3) and one signal per category (I = 0). In this 58 instantiation s0,0 = PAMP signals, s0,1 = danger signals and s0,2 = safe signals and s0,3 = inflammation. 59\n60\n61\n62\n63\n64\nwijp j = 0 j = 1 j = 2\np = 0\np = 1\np = 2\nW 1\n0\nW 2\nW 1 2\n0 W 2 2\nW 1 \u2217 1.5\n1\n-W 2 \u2217 1.5\n1\n2 Table 2 Derivation and interrelationship between weights in the signal processing equation, where the values 3 of the PAMP weights are used to create all other weights relative to the PAMP weight. W 1 is the weight to 4 transform the PAMP signal to the CSM output signal and W 2 is the weight to transform the PAMP signal to 5 the mature output signal.\n6\n7\n8\n9\n10\n11\n12\n13 14 An antigen store is constructed for use within the tissue cycle where all DCs in the population can 15 collect antigen. 16 The cell update component maintains all DC data structures including the DC population of set 17 size M . Each DC has an input signal matrix, antigen vector, cumulative output signals and migration 18 threshold. The internal values of DCm are updated, based on current data in the tissue signal matrix 19 and antigen vector. The DC input signals, s(m) use the identical mapping for signal categories as tissue 20 s and are updated every cell cycle iteration. Each s(m) for DCm is updated via an overwrite every 21 cell cycle. These values are used to calculate output signal values, op(m) , for DCm , which are added 22 cumulatively over a number of cell cycles to form o\u203ep (m), where p = 0 is costimulatory value, p = 1 is 23 the semi-mature DC output signal and p = 2 is the mature DC output signal. With each cell update, 24 DCs sample R antigens from the tissue antigen vector A. 25 26 After the internal values of a DC are updated, o0 is assessed against tm the cell\u2019s migration threshold. 27 If o0 is greater than tm , the DC is \u2018removed\u2019 from the tissue. Here, \u2018remove\u2019 means that the DC is 28 de-allocated the receptors needed to sample the signal matrix and to collect antigen. On the next 29 update cycle, the remaining output signals are checked and the analysis procedure is initiated. 30 In this implementation, each DC is assigned a random value for tm , within a specified range. The 31 random value adds some diversity to the DC population. The value of o0 is increased on exposure 32 to any signal and proportionately to the strength of the input signal. By using randomly assigned 33 migration thresholds, each DC samples the signal matrix a different number of times throughout its 34 lifetime. Some exist for a short period sampling once or twice, others can persist for longer, dependent 35 on the strength of the signals. This creates a variable time window effect for the sampling. 36 Pseudocode for this specific instantiation of the DCA is given in Algorithm 1. This pseudocode 37 shows both the update of the tissue and the individual DCs. The stages of the algorithm are shown, 38 namely initialisation, update and analysis. While this provides the detail of the DC update mechanisms, 39 this pseudocode does not encapsulate the asynchronous nature of the update stages. As libtissue 40 is a multithreaded framework, the three updates are controlled by three different processes, therefore, 41 the three updates occur asynchronously. This architecture is particularly suited for real time data 42 processing as updates occur as and when they are required. 43\n44\n45\n46\n47 3.6 Antigen Aggregation 48\n49 50 Once DCm has been removed from the population, the contents of a(m) and values o\u203ep (m) are logged 51 to a file for the aggregation stage. Once completed, s(m), a(m) and o\u203ep (m) are all reset and DCm is 52 returned to the sampling population. The re-cycling of DCs continues until the stopping condition is 53 met (l = L). Once all data has been processed by the DCs, the output log of antigen-plus-context is 54 analysed. 55 The same antigen is presented multiple times with different context values. This information is 56 recorded in a log file. The total fraction of mature DCs presenting said antigen (where o\u203e1 > o\u203e2 ) is 57 divided by the total amount of times the antigen was presented namely o\u203e1 /(o\u203e1 + o\u203e2 ). This is used to 58 calculate the mean MCAV. Equation 1 describes this process. 59\n60\n61\n62\n63\n64\nij\n13\n17\n22\n1\n2 input : T = {S, A} 3 output: a and context\n4 create DCs; 5 initialise parameters {I , J, K, L, M, N, O, P, Q}; 6 for l < L do 7 update A and S; for m = 0 to M do 8 for n = 0 to Q do 9 DCm samples Q antigen from A;\n10 end 11 for i = 0 to I and j = 0 to J do 12 sDC = sij ;\nend for n = 0 to N do\n14 DCm processes an (m); 15 end 16 for p to P do\ncompute op ; o\u203ep (m) = o\u203ep (m) + op ;\n18 end\n19 if o0 (m) > tm then 20 DCm removed from population; 21 DCm migrate, print antigen and context; DCm reset antigen vector and all signals;\nend\n23 end 24 l++; 25 end\n26 analyse antigen and calculate MCAV 27 Algorithm 1: Pseudocode of the implemented DCA 28\n29\n30 3.7 Signals and Antigen 31\n32 An integral part of DC function is the ability to combine multiple signals to produce context informa33 tion. The semantics of the different categories of signal are derived from the study of the influence of 34 the different signals on DCs in vitro. Definitions of the characteristics of each signal category are given 35 below, with an example of an actual signal per category. This categorisation forms the signal selection 36 schema. Any number of sources of information can be mapped using the outlined principles. 37\n38 39 \u2013 PAMP - si0 , e.g. the number of error messages generated per second by a failed network connection: 40 1. a signature of abnormal behaviour, e.g. an error message; 41 2. a high degree of confidence of abnormality associated with an increase in this signal strength. 42 \u2013 Danger signal - si1 , e.g. the number of transmitted network packets per second: 43 1. measure of an attribute which significantly increases in response to abnormal behaviour; 44 2. a moderate degree of confidence of abnormality with increased level of this signal, though a low 45 signal strength can represent normal behaviour. 46 \u2013 Safe signal - si2 e.g. the inverse rate of change of number of network packets per second. A high 47 rate of change equals a low safe signal level and vice versa: 48 1. a confident indicator of normal behaviour in a predictable manner or a measure of steady49 behaviour; 50 2. measure of an attribute which increases signal concentration due to the lack of change in 51 strength.\n52 53 Signals, though interesting, are inconsequential without antigen. To a DC, antigen is an element 54 which is carried and presented to a T-cell, without regard for the structure of the antigen. Antigen is 55 the data to be classified and works well in the form of an identifier, be it an anomalous process ID 56 or the ID of a data item [26]. At this stage, minimal antigen processing is performed and the antigen 57 presented is an identical copy of the antigen collected. Detection is performed through the correlation 58 of antigen with fused signals. 59\n60\n61\n62\n63\n64\n1\n2 4 Self-Organizing Maps 3\n4 4.1 Biological Inspiration for SOM 5\n6 Various properties of the brain were used as an inspiration for a large set of algorithms and compu7 tational theories known as neural networks. Such algorithms have shown to be successful, however a 8 vital aspect of biological neural networks was omitted in the algorithm\u2019s development. This was the 9 notion of self-organization and spatial organization of information within the brain. In 1981 Kohonen\n10 proposed a method which takes into account these two biological properties and presented them in his 11 SOM algorithm [46]. 12 The SOM algorithm generates, usually, two dimensional maps representing a scaled version of 13 n-dimensional data used as the input to the algorithm. These maps can be thought of as \u201cneural 14 networks\u201d in the same sense as SOM\u2019s traditional rivals, artificial neural networks (ANNs). This is 15 due to the algorithm\u2019s inspiration from the way that mammalian brains are structured and operate 16 in a data reducing and self-organised fashion. Traditional ANNs originated from the functionality and 17 interoperability of neurons within the brain. The SOM algorithm on the other hand was inspired by 18 the existence of many kinds of \u201cmaps\u201d within the brain that represent spatially organised responses. 19 An example from the biological domain is the somatotopic map within the human brain, containing a 20 representation of the body and its adjacent and topographically almost identical motor map responsible 21 for the mediation of muscle activity [47]. 22 This spatial arrangement is vital for the correct functioning of the central nervous system [40]. This 23 is because similar types of information (usually sensory information) are held in close spatial proximity 24 to each other in order for successful information fusion to take place as well as to minimise the distance 25 when neurons with similar tasks communicate. For example sensory information of the leg lies next to 26 sensory information of the sole. 27 The fact that similarities in the input signals are converted into spatial relationships among the 28 responding neurons provides the brain with an abstraction ability that suppresses trivial detail and 29 only maps most important properties and features along the dimensions of the brain\u2019s map [61]. 30\n31\n32 4.2 SOM Algorithm Overview 33\n34 As the algorithm represents the above described functionality, it contains numerous methods that 35 achieve properties similar to the biological system. The SOM algorithm comprises of competitive 36 learning, self-organization, multidimensional scaling, global and local ordering of the generated map 37 and its adaptation. 38 There are two high-level stages of the algorithm that ensure a successful creation of a map. The 39 first stage is the global ordering stage in which we start with a map of predefined size with neurons 40 of random nature and using competitive learning and a method of self-organization, the algorithm 41 produces a rough estimation of the topography of the map based on the input data. Once a desired 42 number of input data is used for such estimation, the algorithm proceeds to the fine-tuning stage, 43 where the effect of the input data on the topography of the map is monotonically decreasing with 44 time, while individual neurons and their close topological neighbours are sensitised and thus fine tuned 45 to the present input. 46 The original algorithm developed by Kohonen comprises of initialisation followed by three vital 47 steps which are repeated until a condition is met: 48 49 \u2013 Choice of stimulus 50 \u2013 Response 51 \u2013 Adaptation 52 Each of these steps are described in detail in the next section. 53\n54 55 4.3 Algorithmic Detail and Implementation 56 57 A number of existing software packages that contain an implementation of the SOM algorithm are 58 available, however these are not ideal for some types of security research, such as real-time detection, 59\n60\n61\n62\n63\n64\n1\n2 due to their limited speed and integratability. For this reason a C++ based implementation is developed 3 according to the original incremental SOM algorithm as described by Kohonen [48]. In this section a 4 detailed analysis of the implemented algorithm and its step by step functional description follows. 5\n6 7 4.3.1 Initialisation\n8 9 A number of parameters have to be chosen before the algorithm is to begin execution. These include 10 the size of the map, its shape, the distance measure used for comparing how similar nodes are, to 11 each other and to the input feature vectors, as well as the kernel function used for the training of the 12 map. Kohonen suggested recommended values for these parameters [47], which are used throughout 13 our experiments. The values used in this paper are described in Section 5, found in Table 8. Once these 14 parameters are chosen, a map is created of the predefined size, populated with nodes, each of which is 15 assigned a vector of random values, wi , where i denotes node to which vector w belongs.\n16 17 4.3.2 Stimulus Selection 18 19 The next step in the SOM algorithm is the selection of the stimulus that is to be used for the generation 20 of the map. This is done by randomly selecting a subset of input feature vectors from a training data 21 set and presenting each input feature vector, x, to the map, one item per epoch. An epoch represents 22 one complete computation of the three vital steps of the algorithm. 23\n24 4.3.3 Response 25\n26 At this stage the algorithm takes the presented input, x and compares it against every node i within 27 the map by means of a distance measure between x and each nodes\u2019 weight vector wi . For example this 28 can be the Euclidean distance measure shown in Equation 3, where ||.|| is the Euclidean norm and wi 29 is the weight vector of node i. This way a winning node can be determined by finding a node within 30 the map with the smallest Euclidean distance from the presented vector x, here signified by c. 31\n32 c = argmin{||x \u2212 wi ||} (3) 33\n34 35 4.3.4 Adaptation\n36 37 Adaptation is the step where the winning node is adjusted to be slightly more similar to the input x. 38 This is achieved by using a kernel function, such as the Gaussian function (hci ) as seen in Equation 4 39 as part of a learning process.\n40\n41 hci (t) = \u03b1(t).exp 42\n||rc \u2212 ri || 2\n\u2212\n2\u03c32 (t)\n(4)\n43 In the above function, \u03b1(t) denotes a \u201clearning-rate factor\u201d and \u03c3(t) denotes the width of the 44 neighbourhood affected by the Gaussian function. Both of these parameters decrease monotonically 45 over time (t). During the first 1,000 steps, \u03b1(t) should have reasonably high values (e.g. close to 1). 46 This is called the global ordering stage and is responsible for proper ordering of wi . For the remaining 47 steps, \u03b1(t) should attain reasonably small values (\u2265 0.2), as this is the fine-tuning stage where only 48 fine adjustments to the map are performed. Both rc and ri are location vectors of the winner node 49 (denoted by subscript c) and i respectively, containing information about a node\u2019s location within the 50 map. 51\n52 wi (t + 1) = wi (t) + hci (t)[x(t) \u2212 wi (t)] (5) 53 54 55 The learning function itself is shown in Equation 5. Here the Gaussian kernel function hci is responsible 56 for the adjustment of all nodes according to the input feature vector x and each node\u2019s distance from 57 the winning node. This whole adaptation step is the vital part of the SOM algorithm that is responsible 58 for the algorithm\u2019s self-organisational properties. 59\n60\n61\n62\n63\n64\n17\n24\n1\n2 4.3.5 Repetition 3\n4 Stimulus selection, Response and Adaptation are repeated a desired number of times or until a map of 5 sufficient quality is generated. For our experiment this was set to a value suggested by Kohonen [48]. 6 He states that the number of steps should be at least 500 times the number of map units. For this 7 reason 100,000 epochs were used in our experiments. Another possible mechanism for the termination 8 of the algorithm is the calculation of the quantization error, which is the mean of ||x \u2212 wc || over the 9 training data. Once the overall quantization error falls below a certain threshold, the execution of\n10 the algorithm can stop as an acceptable lower dimensional representation of the input data has been 11 generated. 12\n13 14 5 Experimental Comparison 15 16 5.1 Scenarios\n18 For the experiments in this paper, two data sets are compiled, collected using a system of signal 19 collection scripts with raw input signal data collected from the Linux /proc filesystem. One data set 20 is termed passive normal (PN) and contains a SYN scan performed without normal processes invoked 21 by a user i.e. scan and shell processes. The second data set is termed active normal (AN). This data 22 set contains an identical SYN scan but is combined with simultaneous instances of normal programs 23 which are used actively by a user throughout the duration of the session i.e. scan, shell processes and\n25 a firefox web browser. 26 Block scans are conducted across 254 IP addresses connecting to multiple ports on each host 27 successfully probed. Approximately 70 hosts out of the 254 addresses scanned are available at any one 28 instance during the scan. For these scenarios, the DCA resides on a client machine which is connected 29 to the main network. As the scanned local hosts are part of a university network and the availability 30 of the hosts is beyond direct control, with the exception of the host on which the DCA monitors. The 31 scan performed in both data sets is a standard SYN scan, with a fast probe sending rate ( <0.1 seconds 32 per probe), facilitated through the use of the popular scanning tool, nmap [17]. The command invoked 33 to perform the SYN scan using nmap is \u201cnmap -sS -v xxx.xxx.xxx.1-254\u201d. 34 The AN data set is 7,000 seconds in duration, with \u2018normal\u2019 antigen generated by running a web 35 browser over a separate remote ssh session. During browsing, multiple downloads, chat sessions and the 36 receipt of e-mail occur representing different patterns of network behaviour. This actively generated 37 network traffic is provided to observe if the algorithms can differentiate between two highly active 38 processes which run simultaneously and modify the networking behaviour of the victim host. Having 39 both normal and anomalous processes running via the monitored ssh demon may make the detection 40 of the scan more difficult. This may increase the MCAV for the normal processes as the DCA relies on 41 the temporal correlation of signals and antigen to perform detection. 42 The PN data set is also 7,000 seconds in duration and comprises of a SYN scan and its pseudo43 terminal slave (pts) parent process as anomalous examples. The ssh demon process acts as normal 44 antigen and is needed to facilitate the remote login. In addition, a firefox browser runs throughout the 45 session, but the system calls are run locally and not through the ssh demon. Therefore this does not 46 form antigen, but can influence the input signal data.\n47 48 49 5.2 Data Pre-processing and Signals 50 51 The DCA relies on correct mapping of signals, ensured through the examination of preliminary samples 52 of input data. For the detection of SYN scans, seven signals are derived from behavioural attributes of 53 the victim host: two PAMPs, two danger signals, two safe signals and one inflammatory signal. Having 54 multiple signals per category may make the DCA more robust against random network fluctuations or 55 conversely could impede classification through conflicting inputs. 56 The PAMP signals (PAMP-1 and PAMP-2) are both taken from data sources which indicate a 57 scan specifically. Danger signals (DS-1 and DS-2) are derived from attributes which represent changes 58 in behaviour. Safe signals (SS-1 and SS-2) are also derived from changes in behaviour, but high safe 59\n60\n61\n62\n63\n64\nraw\n58\n1\n2 signal values are shown when the changes are small in magnitude. The inflammatory signal is simplified 3 to a binary signal i.e. inflammation present (1) or not (0). All PAMPs, danger and safe signals are 4 normalised within a range of zero to 100. A sketch of the input signals throughout the duration of the 5 two sessions are shown in Figures 7, 8 and 9 for the AN data set and in Figure 10, 11 and 12 for the 6 PN data set. 7 To devise a set of appropriate signals a number of preliminary experiments must be performed, 8 in addition to the acquisition of knowledge regarding the effects of scanning and normal networking 9 usage within a host. Initially a plethora of system variables are monitored under a variety of situations.\n10 The signals used in this experiment are network based attributes. This kind of system data appears 11 to be the most variable under scanning conditions. Once the candidate signals are selected, they are 12 then categorised using the general principles of signal selection i.e. PAMPs are signature-based, danger 13 signals are normal at low values and anomalous at high values etc. Following the categorisation, the 14 raw values of signals are transformed into normalised signals. 15 PAMP-1 is the number of ICMP \u2018destination unreachable\u2019 (DU) error messages received per second. 16 Scanning IP addresses attached to hosts which are firewalled against ICMP packets generate these error 17 messages in response to probing. This signal is shown to be useful in detecting ping scans and may also 18 be important for the detection of SYN scans, as an initial ping scan is performed to find running hosts. 19 In this experiment, the number of ICMP messages generated is significantly less than observed with a 20 ping scan. To account for this, normalisation of this signal includes multiplying the raw signal value 21 by five, capped at a value of 100 (equivalent to 20 DU errors per second). This process is represented 22 in Equation 6 where raw is the unmodified system data and signal represents the normalised output 23 signal. These terms apply to all equations described within this section. 24\n25 signal = min{100, raw * 5} (6) 26 27 PAMP-2 is the number of TCP reset packets sent and received per second. Due to the nature of 28 the scan, a volume of RST packets are created in both port status cases; they are generated from the 29 scanning host if ports are open and are generated by the remote hosts if ports are closed. RST packets 30 are not usually present in any considerable volume, so their increased frequency is a likely sign of 31 scanning activity. This signal is normalised linearly, with a maximum cap set at 100 RSTs per second. 32 This normalisation process is shown in Equation 7.\n33 34 signal = min{100, raw} (7)\n35 DS-1, the first danger signal is derived from the number of network packets sent per second. 36 Previous experiments with this signal data indicate that it is useful for the detection of outbound 37 scans [27]. A different approach is taken for the normalisation of this signal. A sigmoid function is 38 used to emphasise the differences in observed rate, making the range of 100 to 700 packets per second 39 more sensitive. This sensitive range is determined through preliminary data analysis of host behaviour 40 during scans and normal use, with 750 packets per second found to be the median value across the 41 plethora of preliminary data. This function makes the system less sensitive to fluctuations under 100 42 packets per second, whilst keeping the sensitivity of the higher values. A cap is set at 1500 packets 43 per second, resulting in a signal range between 0 and 100. The general sigmoid function used for this 44 transformation is shown in Equation 8, with the specific function shown in Equation 9. 45 46 1 f (x) = 47 1 + e\u2212x 48 i 1 (8) 49 signal = min{ 50 1 + 2(7.5\u2212 100 ) * 100, 100} (9)\n51 DS-2 is derived from the ratio of TCP packets to all other packets processed by the network card of 52 the scanning host. This may prove useful as during SYN scans there is a burst of traffic comprised of 53 almost entirely TCP type packets, which is not usually observed under normal conditions. The ratio is 54 normalised through multiplication by 100, to give this signal the same range as DS-1. This procedure 55 is shown in Equation 10. 56\n57 signal =\n59\n60\n61\n62\n63\n64\ni rawSignalT cp\nrawSignalAllP kts\n* 100 (10)\nN o rm\na lis\ne d S\nig n a l V\na lu\ne\nN o rm\na lis\ne d S\nig n\na l V\na lu\ne\n1\n2\n3 4 100\n5 6 80\n7 8 60\n9\n10 40\n11 12 20\n13 14 0\n15\n16\n17 18\n0 1000 2000 3000 4000\nTime(s)\n\u2212 PAMP\u22121 \u2212 PAMP\u22122\nFig. 7 Line graph of the PAMP (PAMP-1, PAMP-2) signals which constitute the AN (active normal) data\n19 set.\n20\n21\n22 23 100\n24 25 80\n26 27 60\n28 29 40\n30 31 20\n32 33 0\n34\n35\n36\n37\n0 1000 2000 3000 4000\nTime(s)\n\u2212 DS\u22121 \u2212 DS\u22122\n56 Fig. 9 Line graph of safe (SS-1, SS-2) signals which constitute the AN (active normal) data set.\n57\n58\n59\n60\n61\n62\n63\n64\nN o rm\na lis\ne d S\nig n a l V\na lu\ne\nN o rm\na lis\ne d S\nig n\na l V\na lu\ne\n1\n2\n3 4 100\n5 6 80\n7 8 60\n9\n10 40\n11 12 20\n13 14 0\n15\n16\n17 18\n0 1000 2000 3000 4000\nTime(s)\n\u2212 PAMP\u22121 \u2212 PAMP\u22122\nFig. 10 Line graph of the PAMP (PAMP-1, PAMP-2) signals which constitute the PN (passive normal) data\n19 set.\n20\n21\n22 23 100\n24 25 80\n26 27 60\n28 29 40\n30 31 20\n32 33 0\n34\n35\n36\n37\n0 1000 2000 3000 4000\nTime(s)\n\u2212 DS\u22121 \u2212 DS\u22122\n56 Fig. 12 Line graph of the safe (SS-1, SS-2) signals which constitute the PN (passive normal) data set.\n57\n58\n59\n60\n61\n62\n63\n64\nRange Signal Value 40 - 45 0 46- 50 10 51- 60 50 61 + 100\n1\n2 Table 3 Ranges used in the normalisation function of SS-2.\n3\n4\n5\n6\n7\n8\n9\n10 SS-1 is the rate of change of network packet sending per second. Safe signals are implemented to 11 counteract the effects of the other signals, hopefully reducing the number of false positive antigen types. 12 High values of this signal are achieved if the rate is low and vice versa. This implies that a large volume 13 of packets can be legitimate, as long as the rate at which the packets are sent remains constant. The 14 value for the rate of change can be calculated from the raw DS-1 signal value, though conveniently, the 15 proc file system also generates a moving-average representation of the rate of change of packets per 16 second (over 2 seconds). This raw value can be normalised between values of 10 and 100 and inverted 17 so that the safe signal value decreases as the raw signal value increases. This normalisation process is 18 described in Equation 11. 19 20 10 21 signal = min{100, max{0, (100 \u2212 raw) * 22 }} (11) 9 23 SS-2 is based on the observation that during SYN scans the average network packet size reduces to a 24 size of 40 bytes, with a low standard deviation. Preliminary observations under normal conditions show 25 that the average packet size for normal traffic is within a range of 70 and 90 bytes. A step function 26 is implemented to derive this signal with transformation values presented in Table 3. Preliminary 27 experiments have also shown that a moving average is needed to increase the sensitivity of this signal. 28 This average is created over a 60 second period. 29 The inflammatory signal is binary and based on the presence of remote root logins. If a root log-in 30 is detected through the monitored ssh demon, this signal is assigned a value of one. When used in the 31 signal processing equation, this multiplies the resultant values of the other signals by two, acting as 32 an amplifier for all other signals including the safe signal. This signal may be useful as to perform a 33 SYN scan the invocation has to come from a user with root privileges. While this is a very important 34 feature of the SYN scan process, it is not suitable for use as a PAMP signal as it can be easily spoofed. 35 Thorough analysis of the relationship between inflammation and the DCA is outside of the scope of 36 this paper and may feature in future work. While this signal influences the rates of migration of the 37 DCs, it does not influence the rates of detection as the addition of this signal increases the output 38 signal values for both the semi-mature output (o1 ) and the mature output (o2 ) signals. 39 As shown in Figure 7-9 and 10-12, the AN signals are more variable than the PN signals, as many 40 more processes run during the AN session. In the AN session, the nmap scan is invoked at 651 seconds. 41 Signals PAMP-1, PAMP-2 and DS-2 clearly change for the duration of the scan. The remaining signals 42 are less clear, though some evidence of changes throughout the scan duration is shown. The changes 43 are transient and localised in particular to the beginning of the scan, when the majority of probes are 44 sent to other hosts. 45 The signals of the PN data set are less noisy. Analysis of input antigen confirms nearly 99% of these 46 antigen belong to the anomalous pts and nmap processes. PAMP-1 and PAMP-2 are responsive to the 47 scan, as shown by their rapid decline towards the end of the scanning period, at 5,500 seconds. Changes 48 in DS-1 are more pronounced in the PN data set, yet the magnitude of this signal is smaller than 49 expected. DS-2 appears to be highly correlated with the scan, yielding values of over 20 throughout 50 the scan duration. SS-1 performs poorly and only decreases in response to the scan in a few select 51 places. SS-2 falls sharply in the middle of the scan, as predicted, but otherwise remains at a constant 52 level of 60 even after the scan has finished.\n53\n54 55 5.3 Antigen 56 57 Process identification numbers (PIDs) form the antigen and are generated each time a system call is 58 invoked. To provide antigen, all remote sessions facilitated by ssh are monitored for this experiment. 59\n60\n61\n62\n63\n64\nStatistic Nmap Firefox Mean Standard Deviation 1st Quartile 2nd Quartile (Median) 3rd Quartile 4th Quartile (Total) Mean/SD 2445 1243 1796 2106 2894 11758 1.97 880 840 76 792 1479 7156 1.05\nF re\nq u en\ncy\n(s y\nst e m\nc al\nls /s\n)\n20\n1\n2 Table 4 Summary statistics of the frequency of system calls for the nmap and firefox processes.\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12 100000\n13\n14 10000\n15\n16 1000\n17\n18 100\n19\n10\n21\n22 1 23 0 1000 2000 3000 4000 5000 6000 7000\n24 Time (s)\n25 26 Fig. 13 The frequency of system calls invoked by the nmap scan process for the AN data set. The trendline 27 represents a moving average over 100 data points. As this figure is presented on a logarithmic scale, the absence 28 of points indicates a frequency of zero system calls for that particular second.\n29 30 Using multiple system calls with identical PIDs allows for the aggregate antigen sampling method, 31 having multiple antigen per antigen type. This allows for the detection of active processes when changes 32 in signal values are observed. This technique is a form of process anomaly detection, but the actual 33 structure of the PID is not important in terms of its classification, i.e. no pattern matching is performed, 34 on the actual value of the PIDs: it is a label for the purpose of process identification. 35 A graph of the frequency of system calls invoked per second for the AN data set by the nmap 36 process is shown in Figure 13 and for the firefox process in Figure 14. In these two figures, individual 37 points represent the frequency of system calls per second, while the trendline represents a moving 38 average over 100 points. Summary statistics of the system call data are given in Table 4, which are 39 generated across the entire session for both processes. 40 The mean/median frequency of system calls for the nmap process is higher than the firefox process. 41 To assess which process is more variable, the means are divided by the standard deviations, as shown 42 in the summary table. This value is larger in the case of nmap than for firefox. This indicates that 43 relatively, the standard deviation of the firefox process is larger in comparison to the mean than that of 44 the nmap process. The various proportions of input system calls are represented as a chart in Figure 15 45 and shows that the nmap process invokes the majority of system calls in the AN data set. 46\n47 48 49 5.4 Special Cases for SOM 50 51 For use with the SOM both antigen and signal data must be correlated explicitly - this is a feature of 52 the DCA that cannot be translated for use with the SOM. To achieve this coupling, the timestamps of 53 the signal and antigen data are used. Each antigen is assigned the set of signals which occurs within 54 one second of the antigen generation. This results in what resembles a standard feature vector, where 55 antigens are the data item ID and signals form seven attributes. In addition to this pairing, the SOM 56 requires training data, to assign nodes and to create the map. Unlike the DCA which uses expert 57 knowledge, SOM requires training data sets and therefore ten sets are constructed. Each training set 58 consists of a diverse number of normal processes which use the networking facility of the host machine. 59\n60\n61\n62\n63\n64\nFr\ne q\nu e n c\ny (\nsy st\nem c\nal ls\n/s )\n2\n8\n1\n10000\n3\n4\n5 1000\n6\n7 100\n9\n10 10\n11\n12 13 1\n14\n15\n0 1000 2000 3000 4000 5000 6000 7000\nTime (s)\n16 Fig. 14 The frequency of system calls invoked by the firefox web browser process for the AN data set. The 17 trendline represents a moving average over 100 data points. This figure is presented on a logarithmic scale and 18 the absence of points indicates a frequency of zero system calls for that particular second.\n19\n20 FF_Parent\n21\n22 23\nPts\nFF_Child2\n24\n25 FF_Child1\n26 Others\n27\n28\n29\n30 31 32 Nmap\n33 Fig. 15 Proportionate chart of antigen per processes as input data for the active normal data set, where 34 FF Parent is the parent firefox process and FF Child1 and FF Child2 are the forked children of the parent 35 process.\n36\n37 38 5.4.1 Training 39 40 Due to the SOM algorithm\u2019s unsupervised learning nature, training data is required in order to generate 41 a map that is representative of normal behaviour. As described earlier this is not necessary for the 42 DCA as there is no training stage. A set of ten sessions of normal activity are generated in an identical 43 manner to the testing data except for the fact that no antigens are generated as the SOM is only 44 trained on signals. Antigen themselves bring no benefit to the SOM in the training stage. Each session 45 contains approximately 60 minutes worth of data. The data contains normal activity such as internet 46 browsing, chatting, file transfer and other activities performed by a standard user. 47 Once the data is collected, it is combined into one data set, which is subsequently used as the input 48 into the SOM algorithm. Input feature vectors are then selected from this data set at random and 49 presented to the map for computation. The training results in a map which can be seen in Figure 16. 50 In this example, the brighter the colour, the greater the dissimilarity of neighbouring nodes, with 51 the map representing four clusters. This shows one of the maps that was generated throughout our 52 experiments. Ten runs were performed, both for training and detection.\n53 54 5.4.2 Detection 55 56 The SOM algorithm itself cannot perform anomaly detection without any further processing. A mean57 ingful way has to be devised in order to be able to classify and make a decision whether a data item 58 or a set of items are anomalous. The aim of our experiments was to detect whether a whole process 59\n60\n61\n62\n63\n64\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 25 Fig. 16 An example map generated by the original SOM algorithm.\n26\n27 28 is anomalous or not. Thus a method for process, rather than signal set anomaly detection calculation 29 had to be developed. 30 For informational purposes a simple anomaly detection can be performed on our data by classifying 31 sets of signals only. This can be done by firstly using the calculation in Equation 3, which will determine 32 the winning node within our trained map. We will call this the Best Matching Unit (BMU). Once the 33 BMU is found, the actual Euclidean distance between the currently observed vector of signals and 34 the BMU is calculated. The most trivial anomaly detection is done by choosing a threshold for this 35 dissimilarity. If the currently observed item is too different from the BMU, then it is deemed anomalous. 36 In order to perform process anomaly detection, antigen information has to be correlated with signals 37 from the testing data. As the SOM is trained on signals only, antigens (PIDs) need to be correctly 38 correlated with the right signals in order to be able to link anomalous sets of signals to their respective 39 initiators (processes). Initial correlation is done by synchronizing antigens with signals using timestamp 40 information. Any antigen with timestamp t is assigned a signal set at time t, and for the purpose of 41 synchronisation t is measured in seconds. Once this synchronisation takes place, the signal set - antigen 42 coupling is assessed for its anomaly level using the BMU technique described previously. 43 As explained later in this section, the output antigen from the DCA are \u2019segmented\u2019 into fixed 44 sized sets for analysis. These \u2018antigen segments\u2019 consist of a specified number of output antigen used 45 to form the MCAV values. Multiple MCAV values are produced as a result of this procedure, which 46 may add additional sensitivity. To get a more meaningful and easily comparable results to the DCA, a 47 segmentation post-processing needs to be employed. This is achieved by selecting a segment size z which 48 generates the same number of segments as the DCA. The reason behind the differing segment sizes is 49 the way that synchronisation of signal and antigen is achieved in the SOM experiments compared to 50 the way it is achieved by the DCA. The DCA correlates antigen and signal as part of the algorithm\u2019s 51 operation whereas the signal and antigen need to be manually correlated at a pre-processing stage 52 before analysis using the SOM can occur. In our case z = 1,800; 18,000; 180,000 and 1,800,000. These 53 segment sizes produce the same number of segments as segment sizes of 100; 1,000; 10,000 and 100,000 54 respectively, used by the DCA. 55 Further post-processing is done by using a binary discrimination of how anomalous a signal set - 56 antigen coupling is. It was observed that the median dissimilarity value between an input feature vector 57 and the BMU is approximately 65. Thus this value is chosen as the threshold for deciding whether 58 a signal set-antigen coupling should be deemed anomalous and thus assigned a value of 1 or deemed 59\n60\n61\n62\n63\n64\nName Symbol Value Number of signals per category\nNumber of signals categories Max number of tissue antigen\nNumber of cells Max number of antigen per DC\nNumber of output signals per DC Number of DC antigen receptors\nI J K M N P Q\n0 3 499 99 49 3 9\n1\n2 Table 5 Default parameter settings for the DCA, chosen following the sensitivity analysis performed previ3 ously [24]. Values shown indexed from zero.\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13 14 normal and assigned a value of 0. These binary anomaly values are then used for the calculation of the 15 mean process anomaly value. 16 Segment generation is achieved by calculating the anomaly value for each signal set - antigen 17 coupling as described above, followed by further analysis of these results per the various antigen segment 18 sizes of z. Thus for z = 1,800, the first 1,800 data items were processed in the following way. For each 19 unique antigen a mean anomaly value is calculated for that given segment. Once this calculation is 20 performed, each segment contains a list of unique antigens with their associated mean anomaly value. 21 We call this the Mean Best Matching Unit (MBMU) value. This value gives an indication of how 22 anomalous a process is in the given antigen segment.\n23\n24 25 5.5 Experiments\n26 27 Two null hypotheses are used in these SYN scan experiments: 28 1. H1: modification of the antigen segment size will not influence the resultant anomaly coefficient 29 values for both normal and anomalous processes 30 2. H2: the DCA and the SOM will produce results which are not statistically different 31 32 Both the AN and PN data sets are used in this series. Each data set is collected using a real-time 33 version of the DCA, which also provides the opportunity to verify the detection rate results before an 34 in-depth analysis is performed. Ten runs are performed for each data set and the mean MCAV values 35 / MBMU values across the ten runs are recorded. Unlike previous experiments with the DCA, no 36 system parameters are varied for these experiments. Instead the number of antigen used in the MCAV 37 calculation is varied. 38 For the previous DCA application of ping scan detection, the sessions used are at most one minute 39 in duration and generate approximately 3,000 antigen. However, the AN and PN data sets generate 40 in excess of 100,000 antigen per process therefore analysis once all data is processed may not provide 41 meaningful results. Generating the output coefficient value at the end of the 7,000 second session is 42 too insensitive to changes which happen over a matter of seconds or minutes. Figures are generated 43 showing the varying coefficients per process as the session proceeds and comparisons drawn between 44 the performance for the two data sets. 45 In terms of assessment, the PIDs with the highest volume of antigen output are used as the processes 46 of interest. For the passive normal data set these processes are the nmap scan process and the pts parent 47 process of the SYN scan. The processes of interest for the active normal data set include the nmap 48 scan, pts process and the firefox browser. Graphs are generated showing the MCAV and MBMU for 49 each process of interest per z antigen presented, for the duration of the experiments for example z=100. 50 Higher values of MCAV are expected for the SYN scan process and its parent process the ssh demon, 51 than for the firefox browser. It is expected that smaller values of z will yield an improvement in the 52 precision and accuracy of the detection, though when z = 100, the system may be too sensitive and 53 an element of tolerance to false positives could be lost. The variants of z for the DCA are presented in 54 Table 6. 55 All data sets are collected and analyses with the DCA are performed on an AMD Athlon 1 GHz 56 Debian linux machine (kernel 2.4.10). A 2.66 GHz Intel Core 2 Duo Ubuntu linux machine (kernel 57 2.6.22) is used for the SOM processing. Data generated from the DCA machine is used in SOM 58 processing to avoid kernel discrepancies. The DCA is implemented in C (gcc 4.0.2) with the SOM 59\n60\n61\n62\n63\n64\nwijp j = 0 j = 1 j = 2 p = 0 p = 1 p = 2 4 0 8 2 0 4 6 1 -12\nParameter Global Ordering Fine-Tuning SOM size Epoch Limit Initial \u03b1 \u03b1 decay scheme Neighbourhood size Neighbourhood function Neighbourhood relation 10*10 100,000 0.9 Initial \u03b1(1 \u2212 t/1000) 5 Gaussian Square - - 0.02 - 1 - -\n1\n2 Table 6 The various sizes of antigen segment z used for the DCA and SOM respectively.\n3 4\n5 1,000 18,000 6 10,000 180,000 7 100,000 1,800,000 8\n9\n10 11\n12\n13\n14\n15\n16\n17\n18 Table 8 SOM parameters, where \u03b1 is the \u201clearning-rate factor\u201d and t is the current epoch.\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 29 implemented in C++ (g++ 4.1.3). All raw signals are derived using signal collection scripts, with 30 values taken from the /proc filesystem (PAMP-1, DS-1, SS-1, I), the tcpstat linux utility (DS-2, SS-2) 31 and a custom developed packet sniffer (PAMP-2). The system parameters used with the DCA are 32 shown in Table 5, derived as a result of previous DCA sensitivity analysis [24]. Weights for the signal 33 processing of these data are shown in Table 7. These weights provide a shorter time-window for the 34 duration of signal sampling per DC, shown to be advantageous for the detection of ping scans. The 35 migration threshold tm is assigned a value of 60 +/\u2212 30 which is the median signal value observed 36 across all signals. The parameters used for the SOM are shown in Table 8 and are chosen based on 37 recommended values as proposed by Kohonen [47]. 38 Antigens are generated using system calls, captured through the use of strace and through manip39 ulation within the antigen tissue client. The normalisation of the input signals is implemented using 40 the tissue client, antigen processed using a separate tissue client, with data processing and the DCA 41 performed using the tissue server process. An initial run of this system is performed to collect the 42 input data and to check for any potential coding errors. Input signals and antigens are collected and 43 recorded in a logfile using the real-time runs. Analysis of the preliminary real-time results of the output 44 antigen and empirical analysis of the input data indicate its suitability for use in these experiments. 45 The libtissue tcreplay client is used to perform the numerous runs of each data set. It is impor46 tant to stress that the system is designed to work in real-time, though tcreplay is used to provide 47 reproducibility of results, so a rigorous analysis can be performed.\n48\n49 50 5.6 DCA Results 51 52 The results of the DCA applied to the passive normal data are presented in Figures 17-19 and in 53 Table 9 and 10. The results for an antigen segment size z=100 are shown in Figure 17 and represent 54 results generated across ten runs by the DCA on the same data set. High MCAV values are shown 55 upon the initiation of the SYN scan for both nmap and pts processes. The moving average trendline 56 shows three distinct \u2018spikes\u2019 which correlate to the initial sending out of packets by the SYN scan, the 57 period of targeted scanning and the final stages where network connections are terminated and scan 58 results collated by the nmap process. 59\n60\n61\n62\n63\n64\nSegment Num PN Nmap PN Pts AN Nmap AN Firefox AN Pts 0 1 2 3 0.12 0.07 0 - 0.24 0.05 0 - 0.16 0.06 0.01 0.05 0.05 0.04 0.00 0.02 0.05 0.06 0.00 0.01\nM C\nA V\nC o\nef fi\nci en t M C A V C o e ff ic ie n t 6 9 24 25 26 27\n1\n2 1\n3\n4 0.8\n5\n0.6\n7\n8 0.4\n10 11 0.2\n12\n13 0\n14\n15\n0 500 1000 1500 2000 2500\nAntigen segment number\nNmap Pts Pts MA Nmap MA\n16 Fig. 17 PN results for the DCA for nmap SYN scan and pts processes. Points represent an average MCAV 17 derived from across the ten runs performed, where the size of the antigen segment is z=100. The trendline 18 represents a moving average across 50 data points.\n19\n20 1\n21\n22 0.8\n23\n0.6 Nmap\nPts Nmap MA\nPts MA 0.4\n28\n29 0.2\n30\n31 0\n32\n33\n0 50 100 150 200 250\nAntigen Segment Number\n34 Fig. 18 PN results for the DCA for nmap SYN scan and pts processes The size of the antigen segments (z) 35 is 1,000. This data represents an average MCAV derived from across the ten runs performed. The trendlines 36 represent moving averages per process of interest across 20 data points.\n37 38 Table 9 The results for both active (AN) and passive (PN) normal data sets for the DCA with an antigen 39 segment size of z = 100,000. Segment 0 includes antigen 0-99,999; segment 1 includes antigen 100,000 to 199,999 40 etc.\n41\n42\n43\n44\n45\n46\n47 48 While the pts process produces a high MCAV initially, between antigen segments 100 and 900 no 49 antigens are presented for the pts process, as it is inactive at this point. As the trendline is required 50 to clarify the results this indicates that a higher value of z would be preferable to clearly assess the 51 presence of an anomalous process. 52 In Figure 18, the result of the PN data set are presented where z=1,000. As with the results 53 presented in Figure 17, an initial spike of a high MCAV is shown, implying that the scan is in its initial 54 stages. While the individual points on this graph are not as dense as in Figure 17, the additional spikes 55 representing the latter stages of the scan are less in magnitude, though little difference in the initial 56 MCAV for the nmap processes is shown. 57 The results for z=10,000 are plotted in Figure 19 showing lower values for the pts process and a less 58 sustained response to the nmap SYN scan process. Sensitivity is lost when the value of z is increased 59\n60\n61\n62\n63\n64\nProcess AN PN Nmap Pts\nFirefox 0.07 0.04 0.03 0.19 0 n/a\nM C\nA V\nC\no ef\nfi ci\ne n t\n5\n1\n2\n3\n4\n1\n6\n7 0.8\n8\n9 0.6\n10 11 0.4\n12 13 0.2\n14 15 0\n16\n17\n0 5 10 15 20 25\nAntigen segment number\n29 Nmap Pts\n18 Fig. 19 PN results for the DCA for all three processes. Individual points not included for the sake of clarity. 19 The size of the antigen segments (z) is 10,000. This data represents an average MCAV derived from across the 20 ten runs performed. The trendlines represent moving averages per process of interest across ten data points.\n21\n22 Table 10 The results for the DCA for both active (AN) and passive (PN) normal data sets with an antigen 23 segment size of z = 1,000,000.\n24\n25\n26\n27\n28\n29 30 31 further as shown in Tables 9 and 10, with the maximum MCAVs greatly reduced from 1.0 in previous 32 experiments to 0.19 for the nmap process. 33 The AN results produced by the DCA show similar features. Figure 20 shows the results using the 34 smallest antigen segment size of z=100. In contrast to the PN data set, the nmap SYN scan is not 35 invoked until antigen segment 500. As shown on this graph, following the initiation of this scan, the 36 MCAV of all three processes of interest (nmap, pts, firefox) are shown to increase. 37 These increases in MCAV form four spikes throughout the session duration. The density of the 38 datapoints in this graph makes the correct interpretation of this graph somewhat difficult. This is 39 improved with the addition of a trendline, generated through applying a moving average of 50 points 40 across the data. During the scan period, the DCA presents antigen, irrespective of its source, in the 41 mature context, as shown through the generation of high MCAV values for both the nmap SYN scan 42 and firefox browser processes. This implies that the generation of false positives occurs when a normal 43 and anomalous process run simultaneously through the monitored ssh demon. 44 The results for antigen segments 0 to 500 are shown in Figure 21 for the sake of clarity. During 45 this period the majority of antigen presented belong to the firefox process and some modulation of 46 the behaviour of the monitored system occurs, as seen in the initial 500 seconds of Figure 20. Despite 47 these activities, the MCAVs presented in Figure 21 are all relatively low. This suggests that the DCA 48 using these particular signals responds appropriately to normal processes in the absence of scanning 49 activity. 50 In Figure 22, the results are presented for the AN data set where z=1,000. In comparison to 51 Figure 20, the trendlines of the graph are observably similar. Figure 23 shows that an antigen segment 52 size of z=10,000 produces observably different results to z=1,000. This is evident as the major spike 53 peak evident in Figure 20 and 22 is missing in Figure 23. Additionally, the only process technically 54 classed as \u2018anomalous\u2019 (MCAV above 0.5, chosen to reflect the proportion of nmap antigen in the input 55 data) is the nmap scan, though only briefly. This implies that the larger size of z increases the rate of 56 false negatives as shown through the lower values in Figure 23 and also shown in Tables 9 and 10. For 57 experiments where z = 100,000 and z=1,000,000, the MCAVs are also reduced. However, an interesting 58 effect is that there is a greater difference in the MCAVs of the normal and anomalous processes. 59\n60\n61\n62\n63\n64\nM C\nA V\nC o\nef fi\nci en\nt\nM C\nA V\nC\no ef\nfi ci\ne n t\n0\n1\n2 1\n3\n4 0.8 5\n6 7 0.6\n8\n9 0.4\n10\n11 0.2\n12\n13 0 14 0 500 1000 1500 2000 2500 3000 3500 15 Antigen Segment Number\nNmap Pts Firefox Nmap MA Firefox MA Pts MA\n16 Fig. 20 AN results for the DCA for nmap SYN scan and pts processes. Points represent an average MCAV 17 derived from across the ten runs performed, where the size of the antigen segment is z=100. The trendline 18 represents a moving average across 50 data points.\n19\n20\n21\n22\n23 1\n24\n25 0.8\n26\n27 0.6\n28 29 0.4\n30 31 0.2\n32\n33\n34\n35\n0 50 100 150 200 250 300 350 400 450 500\nAntigen Segment Number\nNmap Pts Firefox Pts MA Firefox MA\n36 Fig. 21 AN results for initial 500 antigen segments produced with the DCA to highlight the low MCAVs 37 yielded. Points represent an average MCAV derived from across the ten runs performed, where z = 100. The 38 trendline represents a moving average across 20 data points.\n39\n40 41 An example of this is evident in antigen segment zero presented in Table 9, where the MCAV for 42 the nmap scan is three times the magnitude of the MCAV of the firefox process. If the threshold of 43 anomaly is applied at a level of 0.1, this experiment would yield results which detected the nmap SYN 44 scan as anomalous and the firefox process as \u2018normal\u2019. Other examples of this are also shown for the 45 AN data set in Table 10. This implies that while larger values of z can produce false negatives, the 46 potential for the reduction of false positives is also evident.\n47\n48 49 5.7 SOM Results 50 51 The PN results for the SOM are presented in Figures 24-26. As with the results of the DCA, high 52 coefficient values are generated initially for both nmap and pts processes. A further \u2018spike\u2019 is evident 53 at segment numbers 1,000-1,200 of Figure 24. These trends are also evident in Figures 25 and 26. 54 Trendlines are added to each graph to represent a moving average per process. At the lowest level 55 of granularity of z=1,800 (equivalent in the number of segments to DCA z=100), it is unclear as to 56 exactly what the individual data points imply. Therefore a larger size of segment may be required, as 57 also found with the DCA. Again, sensitivity is lost as the size of z is large, as shown by the results 58 presented in Table 11 where z is 1,800,000. 59\n60\n61\n62\n63\n64\nM C\nA V\nC\noe ff\nic ie\nn t\nM C\nA V\nC o\ne ff\nic ie\nn t\n2\n31\n34\n40\n1\n1\n3\n4 0.8 5\n6 7 0.6\n8 9 0.4\n10\n11 0.2\n12\n13 0\n14\n15\n0 50 100 150 200 250 300 350\nAntigen Segment Number\nNmap Pts Firefox Nmap MA Pts MA Firefox MA\n16 Fig. 22 AN results for all three processes produced with the DCA. The size of the antigen segments (z) is 17 1,000. This data represents an average MCAV derived from across the ten runs performed. The trendlines 18 represent moving averages per process of interest across ten data points.\n19\n20\n21\n22\n23\n24 25 1\n26\n27 0.8\n28\n29 0.6\n30 Nmap\nFirefox\n0.4\n32\n33 0.2\n35 36 0\n0 5 10 15 20 25 30 35 40\nPts\n41 performed. The trendlines represent moving averages per process of interest across ten data points.\n42\n43\n44\n45 In a similar manner, the AN results for the SOM produce initially high coefficients for the nmap 46 process. The results for z=1,800 are presented in Figure 27. This shows a major spike at the point 47 of the scan commencement (segments 400-700). Unlike the DCA upon application of a trendline, it 48 appears that the response to the scan is not sustained as three peaks are evident, as opposed to 49 the single peak shown with the DCA. Also, the SOM produces high coefficient values for the firefox 50 process, suggesting that discrimination between active anomalous and active normal processes can not 51 be completely achieved by either algorithm. 52 53 The graphs produced for z=18,000 and 180,000 are shown in Figures 28 and 29 respectively. As 54 with the PN results, the response to the nmap decreases as the value of z increases. This is evident 55 from both graphs and in Table 11. Unlike the DCA, which produced MCAVs for nmap which are 56 consistently higher than with firefox (Figure 23), with the SOM results both the nmap and firefox 57 coefficients decrease at a similar rate, as exemplified in Figure 29. Statistical analysis is presented to 58 verify these observations in the next section. 59\n60\n61\n62\n63\n64\nSegment Num PN Nmap AN Nmap AN Firefox 0 1 2 3 4 5 0.293 0.135 - - - - 0.078 0.016 0.003 - - - 0.028 0.013 0.011 0.005 0.002 0.001\n\u25cf \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf \u25cf \u25cf\n\u25cf\n\u25cf\n\u25cf \u25cf\n\u25cf\n\u25cf \u25cf\nM B\nM U\nC o e ff ic\nie n t\nM B\nM U\nC o e ff ic\nie n t\n4 \u25cf 5\n\u25cf\n\u25cf\n\u25cf \u25cf\n\u25cf\n\u25cf\n15\n\u25cf\n\u25cf \u25cf\n1\n2\n3 1.0\n\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf \u25cf\n\u25cf\u25cf\n\u25cf\n\u25cf \u25cf \u25cf \u25cf\n\u25cf\u25cf \u25cf\n\u25cf \u25cf\u25cf\n\u25cf \u25cf \u25cf \u25cf \u25cf \u25cf\u25cf \u25cf \u25cf\n\u25cf \u25cf\n\u25cf \u25cf\u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf\n\u25cf\n0.8 \u25cf \u25cf\n\u25cf \u25cf \u25cf\n\u25cf \u25cf\n\u25cf \u25cf\n6 \u25cf \u25cf\n7 0.6 \u25cf 8\n\u25cf \u25cf \u25cf\u25cf \u25cf\n\u25cf \u25cf \u25cf\u25cf\n\u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf\u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf\n\u25cf \u25cf\n\u25cf \u25cf \u25cf \u25cf \u25cf\nNmap\n9 0.4 \u25cf\n10\n11 0.2 \u25cf 12\n\u25cf\u25cf\n\u25cf\u25cf\u25cf\n\u25cf\n\u25cf\n\u25cf \u25cf \u25cf\n\u25cf \u25cf\n\u25cf \u25cf\n\u25cf \u25cf \u25cf\n\u25cf\n\u25cf \u25cf\u25cf \u25cf \u25cf \u25cf\n\u25cf\n\u25cf \u25cf \u25cf\n\u25cf\n\u25cf\n\u25cf Pts \u2212 Nmap MA \u2212 Pts MA\n13 \u25cf\u25cf \u25cf\n\u25cf \u25cf \u25cf\n\u25cf\u25cf\u25cf\n\u25cf\n\u25cf \u25cf \u25cf\u25cf \u25cf\u25cf\n0.0 \u25cf \u25cf\n14\n\u25cf \u25cf \u25cf\n\u25cf \u25cf \u25cf \u25cf\n\u25cf \u25cf\n0 500 1000 1500 2000 2500\n16 Antigen Segment Number\n17 18 Fig. 24 PN results for all three processes using the SOM. The size of the output segments (z) is 1,800. This 19 data represents an average MBMU derived from across the ten runs performed. The trendlines represent moving 20 averages per process of interest across 50 data points.\n21\n22\n23 1.0\n24\n25 0.8\n26\n27 0.6\n28\n29 0.4\n30\n\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf \u25cf\n\u25cf \u25cf\n\u25cf \u25cf\n\u25cf\n\u25cf\n\u25cf\u25cf \u25cf \u25cf\n\u25cf \u25cf\n\u25cf \u25cf\n\u25cf\n\u25cf \u25cf \u25cf\n\u25cf\n\u25cf\n\u25cf\n\u25cf\n\u25cf\nNmap\n\u25cf Pts \u2212 Nmap MA \u2212 Pts MA\n31 0.2 \u25cf\n\u25cf\n32 \u25cf \u25cf\n\u25cf \u25cf\n33 0.0\n\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf \u25cf\u25cf\u25cf \u25cf\u25cf\u25cf\u25cf \u25cf \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf \u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf"}, {"heading": "34 0 50 100 150 200 250", "text": "35 Antigen Segment Number\n36 37 Fig. 25 PN results for all three processes using the SOM. The size of the output segments (z) is 18,000.\n38 This data represents an average MBMU derived from across the ten runs performed. The trendlines represent 39 moving averages per process of interest across 20 data points.\n40\n41 Table 11 The results for both active (AN) and passive (PN) normal data sets for the SOM with a segment 42 size of z = 1,800,000.\n43\n44\n45\n46\n47\n48\n49\n50\n51 52 6 Discussion: Analysis and Comparison 53 54 6.1 Null Hypothesis H1: Antigen segments 55 56 Performance of Mann-Whitney tests (an unpaired rank-based statistical test for non-parametric data [31]) 57 comparing the results are presented in Figure 20 with the other antigen segment sizes. The results of 58 this analysis are shown in Table 12, which assesses the rejection of null hypothesis H1. As indicated, in 59\n60\n61\n62\n63\nM B\nM U\nC o e ff ic\nie n t\nM B\nM U\nC o e ff ic\nie n t\n4\n6\n15\n1\n2 3\n1.0\n5\n0.8\n7\n0.6\n8\n9 0.4\n10 11\n0.2\n12 13 0.0 14\n\u25cf\n\u25cf\n\u25cf\n\u25cf\n\u25cf\n\u25cf\n\u25cf\n\u25cf \u25cf \u25cf \u25cf \u25cf\n\u25cf\n\u25cf\n\u25cf\n\u25cf \u25cf \u25cf \u25cf\n\u25cf\n\u25cf \u25cf \u25cf \u25cf \u25cf\nNmap \u25cf Pts \u2212 Nmap MA \u2212 Pts MA\n5 10 15 20 25\n16 Antigen Segment Number\n17 18 Fig. 26 PN results for all three processes using the SOM. The size of the output segments (z) is 180,000. 19 This data represents an average MBMU derived from across the ten runs performed. The trendlines represent 20 moving averages per process of interest across ten data points.\n21\n22\n23 1.0\n24\n25 0.8\n26 27 0.6\n28 29 0.4\n30 31 0.2\n32 33 0.0\n34\n35\n36\n0 500 1000 1500 2000 2500 3000 3500\nAntigen Segment Number\nNmap Pts Firefox\n\u2212 Nmap MA \u2212 Pts MA \u2212 Firefox MA\n37 Fig. 27 AN results for all three processes using the SOM. The size of the output segments (z) is 1,800. 38 This data represents an average MBMU derived from across the ten runs performed. The trendlines represent 39 moving averages per process of interest across 50 data points.\n40\n41 42 three out of the four tested cases, the data series are significantly different. This indicates that z does 43 have an influence on the results of the DCA. Some further work with this concept may prove fruitful, 44 especially if dynamic antigen segment sizes are used, linked to process activity. The demonstration of 45 statistical significance implies that null hypothesis H1 can be rejected. 46 As the data is not normally distributed for either algorithm, Mann-Whitney tests are performed 47 on the results of the SOM, comparing the results of z=1,800 with all other results for the AN nmap 48 process. The resultant p-values are presented in Table 13. These results show that the modification of 49 z produces a statistically significant effect on the resultant anomaly values. Therefore, null hypothesis 50 H1 is also rejected for the SOM in addition to its rejection produced by the DCA.\n51\n52 53 6.2 Null Hypothesis H2: Head to Head Comparison 54 55 To assess H2, the results produced by the DCA and SOM are compared statistically for one selected 56 antigen segment size. For this purpose DCA z=1,000 and SOM z=18,000 are used as they contain 57 approximately a similar number of segments for both nmap and firefox. As these data are not normally 58 distributed (confirmed by the application of the Shapiro-Wilk test) and do not form exact pairs, a one59\n60\n61\n62\n63\n64\nM B\nM U\nC o e ff ic\nie n t\nM B\nM U\nC o e ff ic\nie n t\n4\n6\n1\n2\n3 1.0\n5\n0.8\n7\n0.6\n8\n9 0.4\n10 11\n0.2\n12 13\n0.0\n14\n15\n16\n17\n0 50 100 150 200 250 300 350\nAntigen Segment Number\nNmap Pts Firefox\n\u2212 Nmap MA \u2212 Pts MA \u2212 Firefox MA\n18 Fig. 28 AN results for all three processes using the SOM. The size of the output segments (z) is 18,000. 19 This data represents an average MBMU derived from across the ten runs performed. The trendlines represent 20 moving averages per process of interest across 20 data points.\n21\n22 23 1.0\n24 25 0.8\n26 27 0.6\n28 29 0.4\n30 31 0.2\n32 33 0.0\n34\n35\n36\n0 5 10 15 20 25 30 35\nAntigen Segment Number\nNmap Pts Firefox\n\u2212 Nmap MA \u2212 Pts MA \u2212 Firefox MA\n37 Fig. 29 AN results for all three processes using the SOM. The size of the output segments (z) is 180,000. 38 This data represents an average MBMU derived from across the ten runs performed. The trendlines represent 39 moving averages per process of interest across ten data points.\n40 41 Table 12 The results of the Mann-Whitney test comparing the results of z=100 to the results of z=1,000, 42 z=10,000 and z=100,000. A confidence interval of 95 % is used and data which are statistically significantly 43 different are marked with an asterisk. 44 z p-value 45 1,000 <0.0001* 10,000 0.358 46 100,000 < 0.0001*\n47\n48 49 50 sided unpaired Mann-Whitney test is used to perform this comparison. As the sample size is in excess 51 of 300 datapoints, a 99% confidence interval is deemed appropriate for this assessment. 52 The results of this comparison for the firefox process yields a p-value of 0.02, which at the given 53 confidence interval implies that the two sets of results are not statistically significant. This implies 54 that the algorithms produce similar results for active normal processes. For the firefox process, null 55 hypothesis H2 cannot be rejected under these particular circumstances with these given data sets. 56 Upon performance of the same statistical test, the nmap process produces a p-value of 0.002, 57 which shows that the two algorithms produce statistically significant differences in the detection of the 58 scan process. To assess which system produces the better performance, an additional two-sided Mann59\n60\n61\n62\n63\n64\n24\n1\n2 Table 13 The results of the Mann-Whitney test comparing the SOM results of z=1,800 to the results of 3 z=18,000, z=180,000 and z=1,800,000. A confidence interval of 95 % is used and data which are statistically 4 significantly different are marked with an asterisk.\n5 z p-value\n6 18,000 <0.0001* 7 180,000 < 0.0001* 8 1,800,000 < 0.0001*\n9\n10\n11 Whitney is performed. The results of this test show that the DCA has the improved performance, 12 producing a p-value of 0.0001. Therefore null hypothesis H2 can be rejected for the nmap process and 13 that the DCA shows the better performance on this occasion. 14\n15 16 6.3 Baseline 17 18 To validate both sets of results and to ensure that both performances are improved over a baseline, 19 a k-means classifier is applied to the signal data. The classifier used belongs to the WEKA suite [65]. 20 In this test 52% of the signals were classed as belonging to one class while 48% to another class. This 21 implies that the necessary discrimination cannot be achieved through classification on the basis of 22 signals alone. This also shows that this data is non-trivial to classify and adds value to the results 23 produced for both the SOM and DCA.\n25\n26 27 6.4 Conjecture\n28 29 We have validated the use of the DCA as a serious competitor for anomaly detection applications. 30 Until this comparison we were still uncertain as to the quality of results produced by the DCA. This 31 comparison with the traditional SOM has shown that the DCA shows great promise as a successful AIS 32 algorithm. The performance produced by the DCA shows that the algorithm is capable of performing 33 at a level comparable to a standard technique. 34 It is interesting that the results for the firefox process are not statistically different for both algo35 rithms, yet differences are evident for the nmap process. This may be attributed to the method by 36 which the signals are processed. In the DCA, signals are assigned weights on a per-category basis. In 37 the SOM, all signals carry equal weight. Perhaps the fact that the DCA uses heavy weighting for both 38 PAMP and danger signals is responsible for the improved rate of nmap detection. 39 Alternatively, the correlation between antigen and signal occurs within the DCA but is performed 40 explicitly during the normalisation stage with the SOM. This activity-dependent association produced 41 by the DCA may mean that for the duration of the scan, the coupling between the signals and antigen 42 for the nmap process is tighter. This could be due to the fact that the amount of processed antigen is 43 increased. As noted by Oates et al [57] the increased DC migration rate may result in greater volumes 44 of processed antigen. This may result in a tighter coupling between antigen and signals during periods 45 of high activity and high signal levels. A theoretical analysis, outside of the scope of this paper, is 46 necessary to confirm the coupling mechanism and may provide insight as to the cause and nature of 47 this effect plus the further reaching consequences of applicability of the DCA.\n48\n49 50 7 Conclusions 51 52 In this paper we have compared two biologically inspired algorithms, the immune-inspired DCA and 53 the neurological-inspired SOM when applied to the detection of a SYN port scan. Two constructed 54 data sets are produced for this purpose consisting of 13 million data items to classify. Each algorithm 55 was successful at performing anomaly detection, with the number of antigen, z, used per classification 56 step varied. It is shown that both algorithms are sensitive to changes in z. A direct comparison between 57 the SOM and DCA is provided. For the normal processes, both algorithms performed equally well, with 58 the DCA producing a significantly improved performance at detecting the anomalous process. As a 59\n60\n61\n62\n63\n64\n11\n31\n36\n41\n1\n2 result, the DCA is shown to be a competitive anomaly detection algorithm. As further work, the DCA 3 will be applied experimentally to other large data sets, including further benchmarking with computer 4 security data and applications potentially including large-scale data which requires correlation, such 5 as data derived from radio telescopes. In addition a theoretical analysis of the DCA is required to 6 fully understand the nature of this relatively novel algorithm and to be able to assess future successful 7 applications. 8\n9 10 References\n12 1. U. Aickelin, P. Bentley, S. Cayzer, J. Kim, and J. McLeod. Danger theory: The link between AIS and IDS. 13 In Proc. of the 2nd International Conference on Artificial Immune Systems (ICARIS), LNCS 2787, pages 14 147\u2013155. Springer-Verlag, 2003. 15 2. S. Albayrak, C. Scheel, D. Milosevic, and A. Muller. Combining Self-Organizing Map Algorithms for 16 Robust and Scalable Intrusion Detection. In International Conference on Computational Intelligence for Modelling, Control and Automation and International Conference on Intelligent Agents, Web Technologies 17 and Internet Commerce, volume 2, 2005.\n18 3. M. Amini, R. Jalili, and H.R. Shahriari. RT-UNNID: A practical solution to real-time network-based 19 intrusion detection using unsupervised neural networks. Computers & Security, 25(6):459\u2013468, 2006. 20 4. C. Bailey-Lee, C. Roedel, and E. Silenok. Detection and characterization of port scan attacks. Technical 21 report, University of California San Diego (UCSD), 2003. 5. J. Balthrop, F. Esponda, S. Forrest, and M. Glickman. Coverage and generaliszation in an artificial immune 22 system. In Proc. of the Genetic and Evolutionary Computation Conference (GECCO), pages 3\u201310, 2002. 23 6. R. Bejtlich. Extrusion Detection: Security Monitoring for Internal Intrusions. Addison-Wesley Professional, 24 2005. 25 7. P. Bentley, J. Greensmith, and S. Ujjin. Two ways to grow tissue for artificial immune systems. In Proc. 26 of the 4th International Conference on Artificial Immune Systems (ICARIS), LNCS 3627, pages 139\u2013152. Springer-Verlag, 2005. 27 8. A. Bivens, C. Palagiri, R. Smith, B. Szymanski, and M. Embrechts. Network-Based Intrusion Detection 28 Using Neural Networks. Intelligent Engineering Systems through Artificial Neural Networks, 12(1):579\u2013584, 29 2002. 30 9. D. Bolzoni, S. Etalle, P. Hartel, and E. Zambon. Poseidon: a 2-tier anomaly-based network intrusion\ndetection system. In Fourth IEEE International Workshop on Information Assurance (IWIA\u201906), volume 0, pages 144\u2013156, Los Alamitos, CA, USA, 2006. IEEE Computer Society.\n32 10. Sung-Bae Cho. Incorporating soft computing techniques into a probabilitistic intrusion detection system. 33 IEEE Transactions on Systems, Man and Cybernetics, 32(2):154\u2013160, May 2002. 34 11. J. Choy and S.B. Cho. Anomaly Detection of Computer Usage Using Artificial Intelligence Techniques. 35 Advances in Artificial Intelligence: PRICAI 2000, 2112:31\u201343, 2001.\n12. R. Coico, G. Sunshine, and E. Benjamini. Immunology: A Short Course. Wiley-Liss, 2003. 13. S. Cross, R. Harrison, and R. Kennedy. Introduction to neural networks. The Lancet, 346(8982):1075\u20131079,\n37 October 1995.\n38 14. L. de Castro and J. Timmis. Artificial Immune Systems: A New Computational Approach. Springer-Verlag, 39 London. UK., September 2002. 40 15. L DeLooze. Attack Characterization and Intrusion Detection using an Ensemble of Self-Organizing Maps.\nIn International Joint Conference on Neural Networks (IJCNN\u201906), pages 2121\u20132128, 2006. 16. O. Depren, M. Topallar, E. Anarim, and M.K. Ciliz. An intelligent intrusion detection system (IDS) for\n42 anomaly and misuse detection in computer networks. Expert Systems With Applications, 29(4):713\u2013722, 43 2005. 44 17. F. Dostoevsky. nmap. http://www.insecure.org, last accessed, 5/10/07. 45 18. S. Forrest, A. Perelson, L. Allen, and R. Cherukuri. Self-nonself discrimination in a computer. In Proc. of the IEEE Symposium on Security and Privacy, pages 202\u2013209. IEEE Computer Society, 1994. 46 19. K.L. Fox, R.R. Henning, J.H. Reed, and R. Simonian. A neural network approach towards intrusion 47 detection. Proceedings of the 13th National Computer Security Conference, 10, 1990.\n48 20. D. Gollmann. Computer Security. John Wiley & Sons, Inc. New York, NY, USA, 1999. 49 21. F. Gonzalez and D. Dasgupta. Neuro-immune and self-organizing map approaches to anomaly detection: 50 A comparison. In Proceedings of the 1st International Conference on Artificial Immune Systems, pages 203\u2013211, 2002. 51 22. F. Gonzalez and D. Dasgupta. Anomaly detection using real-valued negative selection. Journal of Genetic 52 Programming and Evolvable Machines, 4:383\u2013403, 2003. 53 23. F.A. Gonza\u0301lez, J.C. Galeano, D.A. Rojas, and A. Veloza-Suan. Discriminating and visualizing anomalies 54 using negative selection and self-organizing maps. In Proceedings of the 2005 Conference on Genetic and 55 Evolutionary Computation, pages 297\u2013304. ACM Press New York, NY, USA, 2005. 24. J. Greensmith. The Dendritic Cell Algorithm. PhD thesis, School of Computer Science, University Of 56 Nottingham, 2007.\n57 25. J. Greensmith and U. Aickelin. Dendritic cells for syn scan detection. In Proceedings of the Genetic and 58 Evolutionary Computation Conference (GECCO 2007), pages 49\u201356, 2007.\n59\n60\n61\n62\n63\n64\n11\n21\n26\n31\n1\n2 26. J. Greensmith, U. Aickelin, and S. Cayzer. Introducing Dendritic Cells as a novel immune-inspired algo3 rithm for anomaly detection. In Proc. of the 4th International Conference on Artificial Immune Systems 4 (ICARIS), LNCS 3627, pages 153\u2013167. Springer-Verlag, 2005. 5 27. J. Greensmith, U. Aickelin, and G. Tedesco. Information fusion for anomaly detection with the dca. 6 Information Fusion, tbc(tbc):tbc, 2008.\n28. J. Greensmith, U. Aickelin, and J. Twycross. Articulation and clarification of the dendritic cell algorithm.\n7 In Proc. of the 5th International Conference on Artificial Immune Systems (ICARIS), LNCS 4163, pages 8 404\u2013417, 2006. 9 29. J. Greensmith, J. Twycross, and U. Aickelin. Dendritic cells for anomaly detection. In Proc. of the Congress\n10 on Evolutionary Computation (CEC), pages 664\u2013671, 2006.\n30. H. Gunes Kayacik, A. Nur Zincir-Heywood, and M.I. Heywood. A hierarchical SOM-based intrusion detection system. Engineering Applications of Artificial Intelligence, 20(4):439\u2013451, 2007.\n12 31. J.J. Higgins. An Introduction to Modern Nonparametric Statistics. Thomson Learning, 2004. 13 32. S. Hofmeyr and S. Forrest. Intrusion detection using sequences of system calls. Journal of Computer 14 Security, 6:151\u2013180, 1998. 15 33. S. Hofmeyr and S. Forrest. Immunity by design. In Proc. of the Genetic and Evolutionary Computation 16 Conference (GECCO), pages 1289\u20131296, 1999.\n34. A. Ho\u0308glund and K. Ha\u0308to\u0308nen. Computer network user behaviour visualization using self organizing maps. In\n17 L. Niklasson, M. Bode\u0301n, and T. Ziemke, editors, Proceedings of ICANN98, the 8th International Conference 18 on Artificial Neural Networks, volume 2, pages 899\u2013904. Springer, London, 1998. 19 35. A. Ho\u0308glund, K. Ha\u0308to\u0308nen, and A. Sorvari. A computer host-based user anomaly detection system using the 20 self-organizing map. In IJCNN (5), pages 411\u2013416, 2000.\n36. T. Horeis. Intrusion Detection with Neural Networks\u2013Combination of Self-Organizing Maps and Radial Basis Function Networks for Human Expert Integration. Computational Intelligence Society Student Research\n22 Grants, 2003. 23 37. Z. Ji and D. Dasgupta. Real-valued negative selection algorithm with variable-sized detectors. In Proc. of 24 the Genetic and Evolutionary Computation Conference (GECCO), pages 287\u2013298, 2004. 25 38. C. Jirapummin, N. Wattanapongsakorn, and P. Kanthamanon. Hybrid neural networks for intrusion\ndetection system. In 2002 International Technical Conference on Circuits/Systems,Computers and Communications (ITC-CSCC 2002), pages 928\u2013931, Phuket, Thailand, 2002.\n27 39. J. Jung, V. Paxson, A. Berger, and H. Balakrishnan. Fast portscan detection using sequential hypothesis 28 testing. Security and Privacy, IEEE Symposium on, pages 211\u2013225, 2004. 29 40. E.R. Kandel, J.H. Schwartz, and T.M. Jessell. Principles of Neural Science. McGraw-Hill/Appleton & 30 Lange, 2000.\n41. H. Kayacik, A. Zincir-Heywood, and M Heywood. On the capability of an SOM based intrusion detection system. In Proceedings of the International Joint Conference on Neural Networks, volume 3, 2003.\n32 42. H.G. Kayacik and N. Zincir-Heywood. Analysis of Three Intrusion Detection System Benchmark Datasets 33 Using Machine Learning Algorithms. In Proceedings of IEEE International Conference on Intelligence and 34 Security Informatics (ISI 2005), volume 3495 of LNCS, pages 362\u2013367, Atlanta, GA, USA, May 19-20 35 2005. Springer. 43. R. Khanna and H. Liu. System approach to intrusion detection using hidden Markov model. International 36 Conference On Communications And Mobile Computing, pages 349\u2013354, 2006.\n37 44. J. Kim and P. Bentley. Evaluating negative selection in an artificial immune system for network intrusion 38 detection. In Proc. of the Genetic and Evolutionary Computation Conference (GECCO), pages 1330 \u2013 39 1337, July 2001.\n40 45. J. Kim, P. Bentley, U. Aickelin, J. Greensmith, G. Tedesco, and J. Twycross. Immune system approaches\nto intrusion detection - a review. Natural Computing, page tbc, 2007. to appear, accepted for publication. 41 46. T. Kohonen. Automatic formation of topological maps of patterns in a self-organizing system. Proceedings 42 of the 2nd Scandinavian Conference on Image Analysis, pages 214\u2013220, 1981. 43 47. T. Kohonen. Self-Organizing Maps. Springer-Verlag, Berlin, 1996. 44 48. T. Kohonen. The self-organizing map. Proceedings of the IEEE, 78(9):1464\u20131480, Sep 1990. 45 49. SC Lee and DV Heinbuch. Training a neural-network based intrusion detector to recognizenovel attacks. Systems, Man and Cybernetics, Part A, IEEE Transactions on, 31(4):294\u2013299, 2001. 46 50. JZ Lei and A. Ghorbani. Network intrusion detection using an improved competitive learning neural 47 network. In Second Annual Conference on Communication Networks and Services Research, pages 190\u2013 48 197, 2004. 49 51. P. Lichodzijewski, A. Nur Zincir-Heywood, and M. Heywood. Dynamic intrusion detection using self 50 organizing maps. In The 14th Annual Canadian Information Technology Security Symposium (CITSS), 2002. 51 52. M. Lutz and G. Schuler. Immature, semi-mature and fully mature dendritic cells: which signals induce 52 tolerance or immunity? Trends in Immunology, 23(9):991\u20131045, 2002. 53 53. P. Matzinger. Tolerance, danger and the extended family. Annual Reviews in Immunology, 12:991\u20131045, 54 1994. 55 54. P. Matzinger. Friendly and dangerous signals: is the tissue in control? Nature Immunology, 8(1):11\u201313, 2007. 56 55. P. Miller and A. Inoue. Collaborative intrusion detection system. In 22nd International Conference of the 57 North American Fuzzy Information Processing Society (NAFIPS 2003), pages 519\u2013524, 2003. 58 56. K. Murphy, P. Travers, and M. Walport. Janeway\u2019s Immunobiology. Garland Science, 7th edition, 2008.\n59\n60\n61\n62\n63\n64\n6 19\n32\n1\n2 57. R. Oates, J. Greensmith, U. Aickelin, J. Garibaldi, and G. Kendall. The application of a dendritic cell 3 algorithm to a robotic classifier. In Proc. of the 6th International Conference on Artificial Immune Systems 4 (ICARIS), LNCS 4628, pages 204\u2013215, 2007. 5 58. R. Oates, G. Kendall, and J. Garibaldi. Frequency analysis for dendritic cell population tuning: Decimating\nthe dendritic cell. Submitted to Evolutionary Intellegence, 2007. 59. M. Ramadas, S. Ostermann, and B. Tjaden. Detecting Anomalous Network Traffic with Self-organizing\n7 Maps. In Proceedings of Recent Advances in Intrusion Detection: 6th International Symposium (RAID 8 2003), Pittsburgh, Pa, Usa, September 8-10 2003. Springer. 9 60. B. C. Rhodes, J. A. Mahaffey, and J. D. Cannady. Multiple self-organizing maps for intrusion detection.\n10 In Proceedings of the 23rd National Information Systems Security Conference, 2000. 61. H. Ritter, T. Martinetz, and K. Schulten. Neural Computation and Self-Organizing Maps; An Introduction. 11 Addison-Wesley Longman Publishing Co., Inc. Boston, MA, USA, 1992. 12 62. M. Roesch. Snort - lightweight intrusion detection for networks. In Proc. of the 13th USENIX conference 13 on System administration (LISA), pages 229\u2013238. USENIX Association, 1999. 14 63. S. Sarasamma and Q. Zhu. Min-max hyperellipsoidal clustering for anomaly detection in network security. Systems, Man and Cybernetics, Part B, IEEE Transactions on, 36(4):887\u2013901, 2006. 15 64. S.T. Sarasamma, Q.A. Zhu, and J. Huff. Hierarchical Kohonenen net for anomaly detection in network 16 security. IEEE Transactions on Systems, Man, and Cybernetics, Part B: Cybernetics, 35(2):302\u2013312, 2005. 17 65. S.Garner. Weka: The waikato environment for knowledge analysis. In In Proc. of the New Zealand Computer 18 Science Research Students Conference, pages 57\u201364, 1995.\n66. A. Somayaji, M. Locasto, and J. Feyereisl. Panel on the future of biologically-inspired security: Is there anything left to learn? In New Security Paradigms Workshop (NSPW\u201907), 2007.\n20 67. R. Sporri and C. Caetano. Inflammatory mediators are insufficient for full dendritic cell activation and 21 promote expansion of cd4+ t cell populations lacking helper function. Nature Immunology, 6(2):163\u2013170, 22 January 2005. 23 68. S. Staniford, J. Hoagland, and J. McAlerney. Practical automated detection of stealthy portscans. Journal of Computer Security, 10(1-2):105\u2013136, 2002. 24 69. T. Stibor, P. Mohr, J. Timmis, and C. Eckert. Is negative selection appropriate for anomaly detection? In 25 Proc. of Genetic and Evolutionary Computation Conference (GECCO), pages 321\u2013328, 2005. 26 70. T. Stibor, J. Timmis, and C. Eckert. Artificial immune systems for IT-security. it- Information technology, 27 48(3), 2006. 71. T. Stibor, J. Timmis, and C. Eckert. On permutation masks in hamming negative selection. In Proc. of the 28 5th International Conference on Artificial Immune Systems (ICARIS), LNCS 4163, pages 122\u2013135, 2006. 29 72. J. Timmis. Artificial immune systems: today and tomorrow. Natural Computing, 6(1):1\u201318, March 2007. 30 73. J. Twycross. Integrated Innate and Adaptive Artificial Immune Systems Applied to Process Anomaly 31 Detection. PhD thesis, University Of Nottingham, 2007.\n74. J. Twycross and U. Aickelin. Towards a conceptual framework for innate immunity. In Proc. of the 4th International Conference on Artificial Immune Systems (ICARIS), LNCS 3627, pages 112\u2013125. Springer-\n33 Verlag, 2005. 34 75. J. Twycross and U. Aickelin. libtissue - implementing innate immunity. In Proc. of the Congress on 35 Evolutionary Computation (CEC), pages 499\u2013506, 2006. 36 76. W. Wang, X. Guan, X. Zhang, and L. Yang. Profiling program behavior for anomaly intrusion detection based on the transition and frequency property of computer audit data. Computers & Security, 25(7):539\u2013 37 550, 2006. 38 77. C. Williams, R. Harry, and J. McLeod. Mechanisms of apoptosis induced DC suppression. Submitted to 39 the Journal of Immunology, 2007. 40 78. I.S. Yoo. Visualizing windows executable viruses using self-organizing maps. In Proceedings of the 2004 ACM workshop on Visualization and data mining for computer security, pages 82\u201389. ACM Press New 41 York, NY, USA, 2004.\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64"}], "references": [{"title": "Danger theory: The link between AIS and IDS", "author": ["U. Aickelin", "P. Bentley", "S. Cayzer", "J. Kim", "J. McLeod"], "venue": "Proc. of the 2nd International Conference on Artificial Immune Systems (ICARIS),", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "Combining Self-Organizing Map Algorithms for 16  Robust and Scalable Intrusion Detection", "author": ["S. Albayrak", "C. Scheel", "D. Milosevic", "A. Muller"], "venue": "In International Conference on Computational Intelligence for Modelling, Control and Automation and International Conference on Intelligent Agents, Web Technologies 17  and Internet Commerce,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "RT-UNNID: A practical solution to real-time network-based 19  intrusion detection using unsupervised neural networks", "author": ["M. Amini", "R. Jalili", "H.R. Shahriari"], "venue": "Computers & Security,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2006}, {"title": "Detection and characterization of port scan attacks", "author": ["C. Bailey-Lee", "C. Roedel", "E. Silenok"], "venue": "Technical 21  report, University of California San Diego (UCSD),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2003}, {"title": "Coverage and generaliszation in an artificial immune 22  system", "author": ["J. Balthrop", "F. Esponda", "S. Forrest", "M. Glickman"], "venue": "In Proc. of the Genetic and Evolutionary Computation Conference (GECCO),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2002}, {"title": "Extrusion Detection: Security Monitoring for Internal Intrusions", "author": ["R. Bejtlich"], "venue": "Addison-Wesley Professional,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2005}, {"title": "Two ways to grow tissue for artificial immune systems", "author": ["P. Bentley", "J. Greensmith", "S. Ujjin"], "venue": "In Proc. 26  of the 4th International Conference on Artificial Immune Systems (ICARIS),", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2005}, {"title": "Network-Based Intrusion Detection", "author": ["A. Bivens", "C. Palagiri", "R. Smith", "B. Szymanski", "M. Embrechts"], "venue": "Using Neural Networks. Intelligent Engineering Systems through Artificial Neural Networks,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2002}, {"title": "Poseidon: a 2-tier anomaly-based network intrusion detection system", "author": ["D. Bolzoni", "S. Etalle", "P. Hartel", "E. Zambon"], "venue": "In Fourth IEEE International Workshop on Information Assurance (IWIA\u201906),", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2006}, {"title": "Incorporating soft computing techniques into a probabilitistic intrusion detection system", "author": ["Sung-Bae Cho"], "venue": "IEEE Transactions on Systems, Man and Cybernetics,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2002}, {"title": "Anomaly Detection of Computer Usage Using Artificial Intelligence Techniques", "author": ["J. Choy", "S.B. Cho"], "venue": "Advances in Artificial Intelligence: PRICAI 2000,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2001}, {"title": "Immunology: A Short Course", "author": ["R. Coico", "G. Sunshine", "E. Benjamini"], "venue": "Wiley-Liss,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2003}, {"title": "Introduction to neural networks", "author": ["S. Cross", "R. Harrison", "R. Kennedy"], "venue": "The Lancet, 346(8982):1075\u20131079,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1995}, {"title": "Artificial Immune Systems: A New Computational Approach. Springer-Verlag, 39  London", "author": ["L. de Castro", "J. Timmis"], "venue": "UK., September", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2002}, {"title": "Attack Characterization and Intrusion Detection using an Ensemble of Self-Organizing Maps", "author": ["L DeLooze"], "venue": "In International Joint Conference on Neural Networks", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2006}, {"title": "Ciliz. An intelligent intrusion detection system (IDS) for 42  anomaly and misuse detection in computer networks", "author": ["O. Depren", "M. Topallar", "E. Anarim", "M.K"], "venue": "Expert Systems With Applications,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2005}, {"title": "Self-nonself discrimination in a computer", "author": ["S. Forrest", "A. Perelson", "L. Allen", "R. Cherukuri"], "venue": "In Proc. of the IEEE Symposium on Security and Privacy,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1994}, {"title": "A neural network approach towards intrusion 47  detection", "author": ["K.L. Fox", "R.R. Henning", "J.H. Reed", "R. Simonian"], "venue": "Proceedings of the 13th National Computer Security Conference,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1990}, {"title": "Computer Security", "author": ["D. Gollmann"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1999}, {"title": "Neuro-immune and self-organizing map approaches to anomaly detection: 50  A comparison", "author": ["F. Gonzalez", "D. Dasgupta"], "venue": "In Proceedings of the 1st International Conference on Artificial Immune Systems,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2002}, {"title": "Anomaly detection using real-valued negative selection", "author": ["F. Gonzalez", "D. Dasgupta"], "venue": "Journal of Genetic", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2003}, {"title": "Discriminating and visualizing anomalies 54  using negative selection and self-organizing maps", "author": ["F.A. Gonz\u00e1lez", "J.C. Galeano", "D.A. Rojas", "A. Veloza-Suan"], "venue": "In Proceedings of the 2005 Conference on Genetic and 55  Evolutionary Computation,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2005}, {"title": "The Dendritic Cell Algorithm", "author": ["J. Greensmith"], "venue": "PhD thesis, School of Computer Science,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2007}, {"title": "Dendritic cells for syn scan detection", "author": ["J. Greensmith", "U. Aickelin"], "venue": "In Proceedings of the Genetic and 58 Evolutionary Computation Conference (GECCO", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2007}, {"title": "Introducing Dendritic Cells as a novel immune-inspired algo3 rithm for anomaly detection", "author": ["J. Greensmith", "U. Aickelin", "S. Cayzer"], "venue": "In Proc. of the 4th International Conference on Artificial Immune Systems 4  (ICARIS),", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2005}, {"title": "Information fusion for anomaly detection with the dca", "author": ["J. Greensmith", "U. Aickelin", "G. Tedesco"], "venue": null, "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2008}, {"title": "Articulation and clarification of the dendritic cell algorithm", "author": ["J. Greensmith", "U. Aickelin", "J. Twycross"], "venue": "Proc. of the 5th International Conference on Artificial Immune Systems (ICARIS), LNCS 4163,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2006}, {"title": "Dendritic cells for anomaly detection", "author": ["J. Greensmith", "J. Twycross", "U. Aickelin"], "venue": "In Proc. of the Congress 10  on Evolutionary Computation (CEC),", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2006}, {"title": "A hierarchical SOM-based intrusion detection system", "author": ["H. Gunes Kayacik", "A. Nur Zincir-Heywood", "M.I. Heywood"], "venue": "Engineering Applications of Artificial Intelligence,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2007}, {"title": "An Introduction to Modern Nonparametric Statistics", "author": ["J.J. Higgins"], "venue": "Thomson Learning,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2004}, {"title": "Intrusion detection using sequences of system calls", "author": ["S. Hofmeyr", "S. Forrest"], "venue": "Journal of Computer 14  Security,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 1998}, {"title": "Immunity by design", "author": ["S. Hofmeyr", "S. Forrest"], "venue": "In Proc. of the Genetic and Evolutionary Computation", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 1999}, {"title": "Computer network user behaviour visualization using self organizing maps", "author": ["A. H\u00f6glund", "K. H\u00e4t\u00f6nen"], "venue": "Proceedings of ICANN98, the 8th International Conference 18  on Artificial Neural Networks,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 1998}, {"title": "Intrusion Detection with Neural Networks\u2013Combination of Self-Organizing Maps and Radial Basis Function Networks for Human Expert Integration", "author": ["T. Horeis"], "venue": "Computational Intelligence Society Student Research 22  Grants,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2003}, {"title": "Real-valued negative selection algorithm with variable-sized detectors", "author": ["Z. Ji", "D. Dasgupta"], "venue": "In Proc. of 24  the Genetic and Evolutionary Computation Conference (GECCO),", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2004}, {"title": "Hybrid neural networks for intrusion detection system", "author": ["C. Jirapummin", "N. Wattanapongsakorn", "P. Kanthamanon"], "venue": "International Technical Conference on Circuits/Systems,Computers and Communications (ITC-CSCC", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2002}, {"title": "Fast portscan detection using sequential hypothesis 28  testing", "author": ["J. Jung", "V. Paxson", "A. Berger", "H. Balakrishnan"], "venue": "Security and Privacy, IEEE Symposium on,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2004}, {"title": "Jessell. Principles of Neural Science. McGraw-Hill/Appleton", "author": ["E.R. Kandel", "J.H. Schwartz", "T.M"], "venue": null, "citeRegEx": "40", "shortCiteRegEx": "40", "year": 2000}, {"title": "On the capability of an SOM based intrusion detection system", "author": ["H. Kayacik", "A. Zincir-Heywood", "M Heywood"], "venue": "In Proceedings of the International Joint Conference on Neural Networks,", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2003}, {"title": "Analysis of Three Intrusion Detection System Benchmark Datasets 33  Using Machine Learning Algorithms", "author": ["H.G. Kayacik", "N. Zincir-Heywood"], "venue": "In Proceedings of IEEE International Conference on Intelligence and 34  Security Informatics (ISI 2005),", "citeRegEx": "42", "shortCiteRegEx": "42", "year": 2005}, {"title": "System approach to intrusion detection using hidden Markov model", "author": ["R. Khanna", "H. Liu"], "venue": "Conference On Communications And Mobile Computing,", "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2006}, {"title": "Evaluating negative selection in an artificial immune system for network intrusion 38  detection", "author": ["J. Kim", "P. Bentley"], "venue": "In Proc. of the Genetic and Evolutionary Computation Conference (GECCO),", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 2001}, {"title": "Immune system approaches to intrusion detection - a review", "author": ["J. Kim", "P. Bentley", "U. Aickelin", "J. Greensmith", "G. Tedesco", "J. Twycross"], "venue": "Natural Computing, page tbc,", "citeRegEx": "45", "shortCiteRegEx": "45", "year": 2007}, {"title": "Automatic formation of topological maps of patterns in a self-organizing system", "author": ["T. Kohonen"], "venue": "Proceedings 42  of the 2nd Scandinavian Conference on Image Analysis,", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 1981}, {"title": "Self-Organizing Maps", "author": ["T. Kohonen"], "venue": null, "citeRegEx": "47", "shortCiteRegEx": "47", "year": 1996}, {"title": "The self-organizing map", "author": ["T. Kohonen"], "venue": "Proceedings of the IEEE,", "citeRegEx": "48", "shortCiteRegEx": "48", "year": 1990}, {"title": "Training a neural-network based intrusion detector to recognizenovel attacks. Systems, Man and Cybernetics, Part A", "author": ["SC Lee", "DV Heinbuch"], "venue": "IEEE Transactions on,", "citeRegEx": "49", "shortCiteRegEx": "49", "year": 2001}, {"title": "Network intrusion detection using an improved competitive learning neural 47  network", "author": ["JZ Lei", "A. Ghorbani"], "venue": "In Second Annual Conference on Communication Networks and Services Research,", "citeRegEx": "50", "shortCiteRegEx": "50", "year": 2004}, {"title": "Dynamic intrusion detection using self 50  organizing maps", "author": ["P. Lichodzijewski", "A. Nur Zincir-Heywood", "M. Heywood"], "venue": "In The 14th Annual Canadian Information Technology Security Symposium (CITSS),", "citeRegEx": "51", "shortCiteRegEx": "51", "year": 2002}, {"title": "Immature, semi-mature and fully mature dendritic cells: which signals induce 52  tolerance or immunity", "author": ["M. Lutz", "G. Schuler"], "venue": "Trends in Immunology,", "citeRegEx": "52", "shortCiteRegEx": "52", "year": 2002}, {"title": "Tolerance, danger and the extended family", "author": ["P. Matzinger"], "venue": "Annual Reviews in Immunology, 12:991\u20131045,", "citeRegEx": "53", "shortCiteRegEx": "53", "year": 1994}, {"title": "Friendly and dangerous signals: is the tissue in control", "author": ["P. Matzinger"], "venue": "Nature Immunology,", "citeRegEx": "54", "shortCiteRegEx": "54", "year": 2007}, {"title": "Collaborative intrusion detection system", "author": ["P. Miller", "A. Inoue"], "venue": "In 22nd International Conference of the 57  North American Fuzzy Information Processing Society (NAFIPS", "citeRegEx": "55", "shortCiteRegEx": "55", "year": 2003}, {"title": "Janeway\u2019s Immunobiology", "author": ["K. Murphy", "P. Travers", "M. Walport"], "venue": "Garland Science,", "citeRegEx": "56", "shortCiteRegEx": "56", "year": 2008}, {"title": "The application of a dendritic cell 3 algorithm to a robotic classifier", "author": ["R. Oates", "J. Greensmith", "U. Aickelin", "J. Garibaldi", "G. Kendall"], "venue": "In Proc. of the 6th International Conference on Artificial Immune Systems 4 (ICARIS),", "citeRegEx": "57", "shortCiteRegEx": "57", "year": 2007}, {"title": "Frequency analysis for dendritic cell population tuning: Decimating the dendritic cell", "author": ["R. Oates", "G. Kendall", "J. Garibaldi"], "venue": "Submitted to Evolutionary Intellegence,", "citeRegEx": "58", "shortCiteRegEx": "58", "year": 2007}, {"title": "Detecting Anomalous Network Traffic with Self-organizing 7 Maps", "author": ["M. Ramadas", "S. Ostermann", "B. Tjaden"], "venue": "In Proceedings of Recent Advances in Intrusion Detection: 6th International Symposium (RAID", "citeRegEx": "59", "shortCiteRegEx": "59", "year": 2003}, {"title": "Multiple self-organizing maps for intrusion detection", "author": ["B.C. Rhodes", "J.A. Mahaffey", "J.D. Cannady"], "venue": "Proceedings of the 23rd National Information Systems Security Conference,", "citeRegEx": "60", "shortCiteRegEx": "60", "year": 2000}, {"title": "Neural Computation and Self-Organizing Maps; An Introduction. 11  Addison-Wesley Longman Publishing Co., Inc", "author": ["H. Ritter", "T. Martinetz", "K. Schulten"], "venue": null, "citeRegEx": "61", "shortCiteRegEx": "61", "year": 1992}, {"title": "Snort - lightweight intrusion detection for networks", "author": ["M. Roesch"], "venue": "In Proc. of the 13th USENIX conference 13  on System administration (LISA),", "citeRegEx": "62", "shortCiteRegEx": "62", "year": 1999}, {"title": "Min-max hyperellipsoidal clustering for anomaly detection in network security. Systems, Man and Cybernetics, Part B", "author": ["S. Sarasamma", "Q. Zhu"], "venue": "IEEE Transactions on,", "citeRegEx": "63", "shortCiteRegEx": "63", "year": 2006}, {"title": "Hierarchical Kohonenen net for anomaly detection in network 16  security", "author": ["S.T. Sarasamma", "Q.A. Zhu", "J. Huff"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics, Part B: Cybernetics,", "citeRegEx": "64", "shortCiteRegEx": "64", "year": 2005}, {"title": "Panel on the future of biologically-inspired security: Is there anything left to learn", "author": ["A. Somayaji", "M. Locasto", "J. Feyereisl"], "venue": "In New Security Paradigms Workshop (NSPW\u201907),", "citeRegEx": "66", "shortCiteRegEx": "66", "year": 2007}, {"title": "Inflammatory mediators are insufficient for full dendritic cell activation and 21  promote expansion of cd4+ t cell populations lacking helper function", "author": ["R. Sporri", "C. Caetano"], "venue": "Nature Immunology,", "citeRegEx": "67", "shortCiteRegEx": "67", "year": 2005}, {"title": "Practical automated detection of stealthy portscans", "author": ["S. Staniford", "J. Hoagland", "J. McAlerney"], "venue": "Journal of Computer Security,", "citeRegEx": "68", "shortCiteRegEx": "68", "year": 2002}, {"title": "Is negative selection appropriate for anomaly detection", "author": ["T. Stibor", "P. Mohr", "J. Timmis", "C. Eckert"], "venue": "Proc. of Genetic and Evolutionary Computation Conference (GECCO),", "citeRegEx": "69", "shortCiteRegEx": "69", "year": 2005}, {"title": "Artificial immune systems for IT-security", "author": ["T. Stibor", "J. Timmis", "C. Eckert"], "venue": "it- Information technology,", "citeRegEx": "70", "shortCiteRegEx": "70", "year": 2006}, {"title": "On permutation masks in hamming negative selection", "author": ["T. Stibor", "J. Timmis", "C. Eckert"], "venue": "In Proc. of the 28  5th International Conference on Artificial Immune Systems (ICARIS),", "citeRegEx": "71", "shortCiteRegEx": "71", "year": 2006}, {"title": "Artificial immune systems: today and tomorrow", "author": ["J. Timmis"], "venue": "Natural Computing,", "citeRegEx": "72", "shortCiteRegEx": "72", "year": 2007}, {"title": "Integrated Innate and Adaptive Artificial Immune Systems Applied to Process Anomaly 31  Detection", "author": ["J. Twycross"], "venue": "PhD thesis, University Of Nottingham,", "citeRegEx": "73", "shortCiteRegEx": "73", "year": 2007}, {"title": "Towards a conceptual framework for innate immunity", "author": ["J. Twycross", "U. Aickelin"], "venue": "In Proc. of the 4th International Conference on Artificial Immune Systems (ICARIS),", "citeRegEx": "74", "shortCiteRegEx": "74", "year": 2005}, {"title": "libtissue - implementing innate immunity", "author": ["J. Twycross", "U. Aickelin"], "venue": "In Proc. of the Congress on 35  Evolutionary Computation (CEC),", "citeRegEx": "75", "shortCiteRegEx": "75", "year": 2006}, {"title": "Profiling program behavior for anomaly intrusion detection based on the transition and frequency property of computer audit data", "author": ["W. Wang", "X. Guan", "X. Zhang", "L. Yang"], "venue": "Computers & Security,", "citeRegEx": "76", "shortCiteRegEx": "76", "year": 2006}, {"title": "Mechanisms of apoptosis induced DC suppression", "author": ["C. Williams", "R. Harry", "J. McLeod"], "venue": "Submitted to 39  the Journal of Immunology,", "citeRegEx": "77", "shortCiteRegEx": "77", "year": 2007}, {"title": "Visualizing windows executable viruses using self-organizing maps", "author": ["I.S. Yoo"], "venue": "ACM Press New 41 York, NY, USA,", "citeRegEx": "78", "shortCiteRegEx": "78", "year": 2004}], "referenceMentions": [{"referenceID": 13, "context": "Previous approaches drew inspiration from the 40 adaptive immune system producing algorithms such as clonal selection [14] and negative selection [33].", "startOffset": 118, "endOffset": 122}, {"referenceID": 31, "context": "Previous approaches drew inspiration from the 40 adaptive immune system producing algorithms such as clonal selection [14] and negative selection [33].", "startOffset": 146, "endOffset": 150}, {"referenceID": 41, "context": "41 The negative selection approach has been used extensively in the domain of computer security specif42 ically in the detection of potential intrusions [44].", "startOffset": 153, "endOffset": 157}, {"referenceID": 0, "context": "[1] proposed an alternative which suggests that successful AIS should be constructed 46 using the \u2018danger theory\u2019 as inspiration.", "startOffset": 0, "endOffset": 3}, {"referenceID": 25, "context": "The DCA has been applied to both 19 ping scans and SYN scans in realtime and offline [27] [25].", "startOffset": 85, "endOffset": 89}, {"referenceID": 23, "context": "The DCA has been applied to both 19 ping scans and SYN scans in realtime and offline [27] [25].", "startOffset": 90, "endOffset": 94}, {"referenceID": 12, "context": "The signal 24 processing component housed within the DCA bears some resemblance to the function of a neural 25 network [13].", "startOffset": 119, "endOffset": 123}, {"referenceID": 44, "context": "Given these superficial similarities, the obvious next-step for the development of the DCA 26 is to compare its performance to that of a neural network based system, such as a Self-Organizing Map 27 (SOM) [47].", "startOffset": 205, "endOffset": 209}, {"referenceID": 23, "context": "To achieve this aim the two algorithms 38 are applied to the detection of an outbound SYN-based port scan using data captured from previous 39 real-time experiments performed with the DCA [25].", "startOffset": 188, "endOffset": 192}, {"referenceID": 5, "context": "1 Introduction to Port Scanning 11 12 Insider attacks are one of the most costly and dangerous attacks performed against computerised 13 systems, with a large amount of known intrusions of intrusions attributed to internal attackers [6].", "startOffset": 233, "endOffset": 236}, {"referenceID": 36, "context": "It is pointless attempting to attack a host which 32 is no longer connected to the network! While scanners are not an \u2018intrusion\u2019 in the classical sense, they 33 are often a pre-cursor to an actual attack, and evidence of sufficient scanning across a network can 34 suggest that an attack may soon follow [39].", "startOffset": 305, "endOffset": 309}, {"referenceID": 3, "context": "[4], TCP SYN scans are the most commonly observed 45 scan, accounting for over half of all scans performed.", "startOffset": 0, "endOffset": 3}, {"referenceID": 59, "context": "2 Port Scan Detection 50 51 Port scan detection components are frequently integrated with commercial intrusion detection systems 52 such as Snort [62].", "startOffset": 146, "endOffset": 150}, {"referenceID": 5, "context": "This problem can be overcome through the detection of outbound port scans, as 4 per extrusion detection [6].", "startOffset": 104, "endOffset": 107}, {"referenceID": 64, "context": "[68] incorporates an anomaly probability 7 score to dynamically adjust the duration of Y .", "startOffset": 0, "endOffset": 4}, {"referenceID": 36, "context": "[39], 10 where it is combined with a network based approach and is used to identify potentially malicious 11 remote hosts in addition to detecting scanning activity.", "startOffset": 0, "endOffset": 4}, {"referenceID": 27, "context": "Initially the DCA is applied to 15 the detection of simple ICMP ping scans [29], where the algorithm was used in real-time and produced 16 high rates of true positives and low rates of false positives.", "startOffset": 75, "endOffset": 79}, {"referenceID": 25, "context": "17 In addition, DCA is used in the detection of a standard SYN scans, also in a real-time environ18 ment [27].", "startOffset": 105, "endOffset": 109}, {"referenceID": 23, "context": "The experiments described in this paper 22 are extension experiments from the SYN scan data used in Greensmith and Aickelin [25].", "startOffset": 124, "endOffset": 128}, {"referenceID": 16, "context": "Various AIS have been applied as anomaly detection 32 algorithms within the field of computer security, given the obvious parallel of fighting computer viruses 33 with a computer immune system [18].", "startOffset": 193, "endOffset": 197}, {"referenceID": 42, "context": "The research of AIS in security has extended past the detection 34 of viruses and has focussed on network intrusion detection [45].", "startOffset": 126, "endOffset": 130}, {"referenceID": 30, "context": "Negative selection itself is described eloquently 42 in a number of sources including the work of Hofmeyr and Forrest [32], Ji and Dasgupta [37] and 43 Balthrop et al.", "startOffset": 118, "endOffset": 122}, {"referenceID": 34, "context": "Negative selection itself is described eloquently 42 in a number of sources including the work of Hofmeyr and Forrest [32], Ji and Dasgupta [37] and 43 Balthrop et al.", "startOffset": 140, "endOffset": 144}, {"referenceID": 4, "context": "[5].", "startOffset": 0, "endOffset": 3}, {"referenceID": 30, "context": "44 Following its initial success in the detection of system call anomalies [32], the negative selection 45 approach was applied to the detection of anomalous network connections [44], where potential problems 46 with scaling and excessive false positive rates were uncovered.", "startOffset": 75, "endOffset": 79}, {"referenceID": 41, "context": "44 Following its initial success in the detection of system call anomalies [32], the negative selection 45 approach was applied to the detection of anomalous network connections [44], where potential problems 46 with scaling and excessive false positive rates were uncovered.", "startOffset": 178, "endOffset": 182}, {"referenceID": 65, "context": "[69].", "startOffset": 0, "endOffset": 4}, {"referenceID": 66, "context": "Further analysis performed by the 49 same authors has given insights into the theoretical reasons for negative selection\u2019s problems [70], with 50 more evidence presented recently by Stibor et al.", "startOffset": 132, "endOffset": 136}, {"referenceID": 67, "context": "in [71].", "startOffset": 3, "endOffset": 7}, {"referenceID": 62, "context": "2 The Danger Project: The Missing Link? 54 55 The criticisms of negative selection have to some degree overwhelmed the positive aspects of its de56 velopment and have in some respect discredited the use of AIS in security [66].", "startOffset": 222, "endOffset": 226}, {"referenceID": 68, "context": "The 58 theoretical proofs of these problems are evident and duly noted by the wider AIS community [72].", "startOffset": 98, "endOffset": 102}, {"referenceID": 0, "context": "[1], developed in 2003 through the Dan5 ger Project.", "startOffset": 0, "endOffset": 3}, {"referenceID": 11, "context": "It is recognised that the negative selection algorithm is 7 based on a naive model of central tolerance developed in the 1950s [12].", "startOffset": 127, "endOffset": 131}, {"referenceID": 0, "context": "propose that through close collaboration with immunologists, computer scientists 9 will be able to develop more biologically realistic AIS which could potentially overcome the problems 10 of false positives and scaling observed with negative selection [1].", "startOffset": 252, "endOffset": 255}, {"referenceID": 24, "context": "The DCA is developed using this 11 interdisciplinary approach [26], drawing inspiration from DCs as it is now widely accepted that these 12 cells are a major control unit in the human immune system.", "startOffset": 62, "endOffset": 66}, {"referenceID": 49, "context": "13 The Danger Project brought innate immunology in to the AIS spotlight, as the innate immune 14 system is shown as responsible for the initial pathogen detection [52].", "startOffset": 163, "endOffset": 167}, {"referenceID": 69, "context": "From this emerged two streams 15 of research which were based on innate principles, the Dendritic Cell Algorithm and the libtissue 16 system and its related algorithms [73].", "startOffset": 168, "endOffset": 172}, {"referenceID": 71, "context": "The libtissue system is an innate immune 18 framework implemented as an API (application programming interface) [75].", "startOffset": 112, "endOffset": 116}, {"referenceID": 0, "context": "[1] developed into", "startOffset": 0, "endOffset": 3}, {"referenceID": 43, "context": "32 33 The Self-Organizing Map algorithm was developed by Teuvo Kohonen more than two decades ago [46],", "startOffset": 97, "endOffset": 101}, {"referenceID": 17, "context": "41 the algorithm\u2019s inception [19].", "startOffset": 29, "endOffset": 33}, {"referenceID": 15, "context": "42 tection, particularly network based intrusion detection [16].", "startOffset": 59, "endOffset": 63}, {"referenceID": 10, "context": "46 such as Hidden Markov Models (HMM) [11] [10] [43] or Radial Basis Function Networks [36].", "startOffset": 38, "endOffset": 42}, {"referenceID": 9, "context": "46 such as Hidden Markov Models (HMM) [11] [10] [43] or Radial Basis Function Networks [36].", "startOffset": 43, "endOffset": 47}, {"referenceID": 40, "context": "46 such as Hidden Markov Models (HMM) [11] [10] [43] or Radial Basis Function Networks [36].", "startOffset": 48, "endOffset": 52}, {"referenceID": 33, "context": "46 such as Hidden Markov Models (HMM) [11] [10] [43] or Radial Basis Function Networks [36].", "startOffset": 87, "endOffset": 91}, {"referenceID": 72, "context": "Notably a comparison with HMM [76], AIS [21] [22], traditional neural net-", "startOffset": 30, "endOffset": 34}, {"referenceID": 19, "context": "Notably a comparison with HMM [76], AIS [21] [22], traditional neural net-", "startOffset": 40, "endOffset": 44}, {"referenceID": 20, "context": "Notably a comparison with HMM [76], AIS [21] [22], traditional neural net-", "startOffset": 45, "endOffset": 49}, {"referenceID": 60, "context": "49 works [63] [50] [38] [49] [8], k-means clustering [42] as well as Adaptive Resonance Theory [3].", "startOffset": 9, "endOffset": 13}, {"referenceID": 47, "context": "49 works [63] [50] [38] [49] [8], k-means clustering [42] as well as Adaptive Resonance Theory [3].", "startOffset": 14, "endOffset": 18}, {"referenceID": 35, "context": "49 works [63] [50] [38] [49] [8], k-means clustering [42] as well as Adaptive Resonance Theory [3].", "startOffset": 19, "endOffset": 23}, {"referenceID": 46, "context": "49 works [63] [50] [38] [49] [8], k-means clustering [42] as well as Adaptive Resonance Theory [3].", "startOffset": 24, "endOffset": 28}, {"referenceID": 7, "context": "49 works [63] [50] [38] [49] [8], k-means clustering [42] as well as Adaptive Resonance Theory [3].", "startOffset": 29, "endOffset": 32}, {"referenceID": 39, "context": "49 works [63] [50] [38] [49] [8], k-means clustering [42] as well as Adaptive Resonance Theory [3].", "startOffset": 53, "endOffset": 57}, {"referenceID": 2, "context": "49 works [63] [50] [38] [49] [8], k-means clustering [42] as well as Adaptive Resonance Theory [3].", "startOffset": 95, "endOffset": 98}, {"referenceID": 56, "context": "[59].", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "6 Buffer overflow [20] attack detection was also tackled by Rhodes [60] using a multilayer SOM, 7 monitoring payloads.", "startOffset": 18, "endOffset": 22}, {"referenceID": 57, "context": "6 Buffer overflow [20] attack detection was also tackled by Rhodes [60] using a multilayer SOM, 7 monitoring payloads.", "startOffset": 67, "endOffset": 71}, {"referenceID": 8, "context": "Bolzoni [9] also looked at payload monitoring using SOM by employing a two8 tier architecture system.", "startOffset": 8, "endOffset": 11}, {"referenceID": 19, "context": "9 Gonzalez and Dasgupta [21] compared SOM against another AIS algorithm.", "startOffset": 24, "endOffset": 28}, {"referenceID": 16, "context": "[18] with the difference of using a new representation.", "startOffset": 0, "endOffset": 4}, {"referenceID": 41, "context": "The original Negative Selection algorithm 12 has been applied to Intrusion Detection problems in the past and has received some criticism regarding 13 its \u201cscaling problems\u201d [44].", "startOffset": 174, "endOffset": 178}, {"referenceID": 1, "context": "[2] proposed a unique way of combining a number of existing SOM approaches 17 together in a node based IDS.", "startOffset": 0, "endOffset": 3}, {"referenceID": 52, "context": "20 Miller and Inoue [55] suggested using multiple intelligent agents, each of which contains a SOM on 21 its own.", "startOffset": 20, "endOffset": 24}, {"referenceID": 14, "context": "24 DeLooze [15] employed an ensemble of SOM networks for the purpose of an IDS as well as for attack 25 characterisation.", "startOffset": 11, "endOffset": 15}, {"referenceID": 74, "context": "Yoo [78] analysed windows 28 executables by creating maps of EXE files before and after an infection by a virus.", "startOffset": 4, "endOffset": 8}, {"referenceID": 61, "context": "[64], Lichodzijewski et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 48, "context": "[51] and Kayacik et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 38, "context": "[41] [30] who all used 37 various versions of the Hierarchical SOM or employed multiple SOM networks for the purpose of 38 intrusion detection.", "startOffset": 0, "endOffset": 4}, {"referenceID": 28, "context": "[41] [30] who all used 37 various versions of the Hierarchical SOM or employed multiple SOM networks for the purpose of 38 intrusion detection.", "startOffset": 5, "endOffset": 9}, {"referenceID": 38, "context": "[41] state that the best performance is achieved using a 2-layer 39 SOM and that their results are by far the best of any unsupervised learning based IDS to date.", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "[23] use 46 this ability to visualise the self non-self space that they use for anomaly detection.", "startOffset": 0, "endOffset": 4}, {"referenceID": 32, "context": "[34] 48 on the other hand employed visualisation of user behaviour.", "startOffset": 0, "endOffset": 4}, {"referenceID": 49, "context": "DCs exist in three states of differentiation, immature, semi-mature 5 and mature, which determines their exact function [52].", "startOffset": 120, "endOffset": 124}, {"referenceID": 53, "context": "15 which can be detected by DCs and result in immune activation [56].", "startOffset": 64, "endOffset": 68}, {"referenceID": 50, "context": "18 the chaotic breakdown of internal components form danger signals which accumulate in tissue [53].", "startOffset": 95, "endOffset": 99}, {"referenceID": 51, "context": "24 signals into the tissue [54].", "startOffset": 27, "endOffset": 31}, {"referenceID": 63, "context": "28 the effects of the other three categories of signal [67].", "startOffset": 55, "endOffset": 59}, {"referenceID": 55, "context": "[58] where a theoretical analysis is provided.", "startOffset": 0, "endOffset": 4}, {"referenceID": 71, "context": "Input data is processes via signal and antigen clients [75].", "startOffset": 55, "endOffset": 59}, {"referenceID": 0, "context": "3 libtissue 36 37 The Danger Project [1] has produced a variety of research outcomes alongside the DCA.", "startOffset": 37, "endOffset": 40}, {"referenceID": 73, "context": "Such outcomes 38 include the development of danger theory and DC based immunology [77]; a framework for developing 39 immune inspired algorithms called libtissue [75]; an investigation into the interactions between the 40 innate and adaptive immune system; artificial tissue [7] and the application of a naive version of the 41 DCA for the security of sensor networks.", "startOffset": 82, "endOffset": 86}, {"referenceID": 71, "context": "Such outcomes 38 include the development of danger theory and DC based immunology [77]; a framework for developing 39 immune inspired algorithms called libtissue [75]; an investigation into the interactions between the 40 innate and adaptive immune system; artificial tissue [7] and the application of a naive version of the 41 DCA for the security of sensor networks.", "startOffset": 162, "endOffset": 166}, {"referenceID": 6, "context": "Such outcomes 38 include the development of danger theory and DC based immunology [77]; a framework for developing 39 immune inspired algorithms called libtissue [75]; an investigation into the interactions between the 40 innate and adaptive immune system; artificial tissue [7] and the application of a naive version of the 41 DCA for the security of sensor networks.", "startOffset": 275, "endOffset": 278}, {"referenceID": 69, "context": "libtissue is the API used within the Danger Project for 42 the testing of ideas and algorithms, as shown in the works of Twycross [73] [75] and Greensmith et 43 al.", "startOffset": 130, "endOffset": 134}, {"referenceID": 71, "context": "libtissue is the API used within the Danger Project for 42 the testing of ideas and algorithms, as shown in the works of Twycross [73] [75] and Greensmith et 43 al.", "startOffset": 135, "endOffset": 139}, {"referenceID": 26, "context": "[28] [29].", "startOffset": 0, "endOffset": 4}, {"referenceID": 27, "context": "[28] [29].", "startOffset": 5, "endOffset": 9}, {"referenceID": 70, "context": "It is based on principles of innate immunology [74] [75], through the use 46 of techniques from modelling, simulation and artificial life.", "startOffset": 47, "endOffset": 51}, {"referenceID": 71, "context": "It is based on principles of innate immunology [74] [75], through the use 46 of techniques from modelling, simulation and artificial life.", "startOffset": 52, "endOffset": 56}, {"referenceID": 24, "context": "Antigen is 55 the data to be classified and works well in the form of an identifier, be it an anomalous process ID 56 or the ID of a data item [26].", "startOffset": 143, "endOffset": 147}, {"referenceID": 43, "context": "In 1981 Kohonen 10 proposed a method which takes into account these two biological properties and presented them in his 11 SOM algorithm [46].", "startOffset": 137, "endOffset": 141}, {"referenceID": 44, "context": "19 An example from the biological domain is the somatotopic map within the human brain, containing a 20 representation of the body and its adjacent and topographically almost identical motor map responsible 21 for the mediation of muscle activity [47].", "startOffset": 247, "endOffset": 251}, {"referenceID": 37, "context": "22 This spatial arrangement is vital for the correct functioning of the central nervous system [40].", "startOffset": 95, "endOffset": 99}, {"referenceID": 58, "context": "27 The fact that similarities in the input signals are converted into spatial relationships among the 28 responding neurons provides the brain with an abstraction ability that suppresses trivial detail and 29 only maps most important properties and features along the dimensions of the brain\u2019s map [61].", "startOffset": 298, "endOffset": 302}, {"referenceID": 45, "context": "For this reason a C++ based implementation is developed 3 according to the original incremental SOM algorithm as described by Kohonen [48].", "startOffset": 134, "endOffset": 138}, {"referenceID": 44, "context": "Kohonen suggested recommended values for these parameters [47], which are used throughout", "startOffset": 58, "endOffset": 62}, {"referenceID": 45, "context": "For our experiment this was set to a value suggested by Kohonen [48].", "startOffset": 64, "endOffset": 68}, {"referenceID": 25, "context": "36 Previous experiments with this signal data indicate that it is useful for the detection of outbound 37 scans [27].", "startOffset": 112, "endOffset": 116}, {"referenceID": 22, "context": "1 2 Table 5 Default parameter settings for the DCA, chosen following the sensitivity analysis performed previ3 ously [24].", "startOffset": 117, "endOffset": 121}, {"referenceID": 22, "context": "32 shown in Table 5, derived as a result of previous DCA sensitivity analysis [24].", "startOffset": 78, "endOffset": 82}, {"referenceID": 44, "context": "37 recommended values as proposed by Kohonen [47].", "startOffset": 45, "endOffset": 49}, {"referenceID": 29, "context": "1 Null Hypothesis H1: Antigen segments 55 56 Performance of Mann-Whitney tests (an unpaired rank-based statistical test for non-parametric data [31]) 57 comparing the results are presented in Figure 20 with the other antigen segment sizes.", "startOffset": 144, "endOffset": 148}, {"referenceID": 54, "context": "As noted by Oates et al [57] the increased DC migration rate may result in greater volumes", "startOffset": 24, "endOffset": 28}], "year": 2010, "abstractText": "2 3 4 5 6 7 Julie Greensmith \u00b7 Jan Feyereisl \u00b7 Uwe Aickelin 8 9 The DCA: SOMe Comparison 10 11 A comparative study between two biologically-inspired algorithms 12 13 14 15 16 17 Received: date / Accepted: date 18 19 20 Abstract The Dendritic Cell Algorithm (DCA) is an immune-inspired algorithm, developed for the 21 purpose of anomaly detection. The algorithm performs multi-sensor data fusion and correlation which 22 results in a \u2018context aware\u2019 detection system. Previous applications of the DCA have included the 23 detection of potentially malicious port scanning activity, where it has produced high rates of true 24 positives and low rates of false positives. In this work we aim to compare the performance of the 25 DCA and of a Self-Organizing Map (SOM) when applied to the detection of SYN port scans, through 26 experimental analysis. A SOM is an ideal candidate for comparison as it shares similarities with the 27 DCA in terms of the data fusion method employed. It is shown that the results of the two systems are 28 comparable, and both produce false positives for the same processes. This shows that the DCA can 29 produce anomaly detection results to the same standard as an established technique. 30 31", "creator": "PrimoPDF http://www.primopdf.com/"}}}