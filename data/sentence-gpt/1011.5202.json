{"id": "1011.5202", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Nov-2010", "title": "Covered Clause Elimination", "abstract": "Generalizing the novel clause elimination procedures developed in [M. Heule, M. J\\\"arvisalo, and A. Biere. Clause elimination procedures for CNF formulas. In Proc. LPAR-17, volume 6397 of LNCS, pages 357-371. Springer, 2010.], we introduce explicit (CCE), hidden (HCCE), and asymmetric (ACCE) variants of a procedure that eliminates covered clauses from CNF formulas. We show that these procedures are more effective in reducing CNF formulas than the respective variants of blocked clause elimination, and may hence be interesting as new preprocessing/simplification techniques for SAT solving. (A) These techniques are not necessarily to be used to solve CNF formulas, but to eliminate the CNF problem (b) We propose a procedure that removes covered clause elimination procedures. (C) In contrast, our approach also uses the non-cognitive and non-cognitive approaches in our approach. The non-cognitive approach emphasizes CNF procedures in terms of the cognitive, and non-cognitive approach of the cognitive (A. Biere and C. Biere) which use these techniques. (D) This approach does not exclude CNF formulas from the CNF problem, and does not cover CNF formulas in this study. The approach also relies on information derived from CNF formulas to predict which CNF formulas will be used. (E) The following procedures are in accordance with the CLAR-17 CNF formula.", "histories": [["v1", "Tue, 23 Nov 2010 19:43:26 GMT  (48kb,S)", "http://arxiv.org/abs/1011.5202v1", "5 pages"]], "COMMENTS": "5 pages", "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["marijn heule", "matti j\\\"arvisalo", "armin biere"], "accepted": false, "id": "1011.5202"}, "pdf": {"name": "1011.5202.pdf", "metadata": {"source": "CRF", "title": "Covered Clause Elimination", "authors": ["Marijn Heule", "Matti J\u00e4rvisalo"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n01 1.\n52 02\nv1 [\ncs .L\nO ]\n2 3\nN ov\n2 01\n0"}, {"heading": "1 Introduction", "text": "Simplification techniques applied both before (i.e., in preprocessing) and during search have proven integral in enabling efficient conjunctive normal form (CNF) level Boolean satisfiability (SAT)1 solving for real-world application domains. Further, while many SAT solvers rely mainly on Boolean constraint propagation (i.e., unit propagation) during search, it is possible to improve solving efficiency by applying additional simplification techniques also during search. Noticeably, when scheduling combinations of simplification techniques during search, even quite simply ideas can bring additional gains by enabling further simplifications by other techniques.\nGeneralizing the clause elimination procedures developed in [1], in this paper we introduce explicit (CCE), hidden (HCCE), and asymmetric (ACCE) variants of a clause elimination procedure that eliminates what we call covered clauses from CNF formulas. We compare these procedures to the analogous variants BCE, HBCE, and ABCE (see Sect. 1.1) of blocked clause elimination [1, 2] w.r.t. relative effectiveness.\nDefinition 1. Assume two clause elimination procedures S1 and S2 that take as input an arbitrary CNF formula F and each outputs a CNF formula that consists of a subset of F that is satisfiability-equivalent to F. Procedure S1 is at least as effective as S2 if, for any F and any output S1(F) and S2(F) of S1 and S2 on input F, respectively, we have that S1(F)\u2286 S2(F); S2 is not as effective as S1 if there is an F for which there are outputs S1(F) and S2(F) of S1 and S2, respectively, such that S1(F) \u2282 S2(F); and S1 is more effective than S2 if (i) S1 is at least as effective as S2, and (ii) S2 is not as effective as S1.\nThis definition of relative effectiveness takes into account non-confluent elimination procedures, i.e., procedures that do not generally have a unique fixpoint and that may thus have more than one possible output for a given input. In fact, we show that out of the three covered clause elimination procedures, the explicit variant CCE is confluent. Extending the relative effectiveness hierarchy presented in [1] (see the solid arrows in Fig. 1), we show that the variants of covered clause elimination are more effective than their counterparts based on blocked clauses (see the dashed arrows in Fig. 1). In this sense, the elimination procedures introduced in this paper are proper generalizations of the techniques analyzed in [1]. This is interesting since it has been recently shown in [2] that already BCE is surprisingly effective, as it can\u2014purely on the CNF level\u2014implicitly perform a combination of structure-based circuit-level techniques, including the polarity-based Plaisted-Greenbaum CNF encoding and difference circuit simplifications. Here, the most effective technique is the asymmetric variant of covered clause elimination.\n\u2217Supported by Dutch Organization for Scientific Research under grant 617.023.611. \u2020Supported by Academy of Finland under grant #132812.\n1We assume that the reader is familiar with basic concepts related to CNF satisfiability. When convenient we view a clause as a set of literals and a CNF formula as a set of clauses."}, {"heading": "1.1 Variants of Blocked Clause Elimination", "text": "The resolution rule states that, given two clauses C1 = {l,a1, . . . ,an} and C2 = {l\u0304,b2, . . . ,bm}, the implied clause C = {a1, . . . ,an,b1, . . . ,bm}, called the resolvent of C1 and C2, can be inferred by resolving on the literal l, and write C =C1 \u2297l C2.\nWe compare the clause elimination procedures based on covered clauses to the following procedures [1] that eliminate blocked clauses [3]. Notice that out of these three, only BCE is confluent [1].\nBCE Given a CNF formula F , a clause C and a literal l \u2208C, the literal l blocks C w.r.t. F if (i) for each clause C\u2032 \u2208 F with l\u0304 \u2208C\u2032, C\u2297l C\u2032 is a tautology, or (ii) l\u0304 \u2208C, i.e., C is itself a tautology2 . Given a CNF formula F , a clause C is blocked w.r.t. F if there is a literal that blocks C w.r.t. F . Removal of blocked clauses preserves satisfiability [3]. For a CNF formula F , blocked clause elimination (BCE) repeats the following until fixpoint: if there is a blocked clause C \u2208 F w.r.t. F , let F := F \\{C}. The CNF formula resulting from applying BCE on F is denoted by BCE(F).\nHBCE Given a CNF formula F , we denote by F2 the set of binary clauses contained in F . For a given clause C \u2208 F , we denote by (hidden literal addition) HLA(F,C) the unique clause resulting from repeating the following clause extension steps until fixpoint: if there is a literal l0 \u2208C such that there is a clause (l0 \u2228 l) \u2208 F2 \\ {C} for some literal l, let C := C \u222a{l\u0304}. For a CNF formula F , a clause C \u2208 F is called hidden blocked if HLA(F,C) is blocked w.r.t. F . Hidden blocked clause elimination (HBCE) repeats the following until fixpoint: if there is a hidden blocked clause C \u2208 F , remove C from F .\nABCE For a clause C and a CNF formula F , (asymmetric literal addition) ALA(F,C) denotes the unique clause resulting from repeating the following until fixpoint: if l1, . . . , lk \u2208C and there is a clause (l1 \u2228 \u00b7\u00b7 \u00b7 \u2228 lk \u2228 l) \u2208 F \\ {C} for some literal l, let C := C \u222a{l\u0304}. A clause C \u2208 F is called asymmetric blocked if ALA(F,C) is blocked w.r.t. F . Asymmetric blocked clause elimination (ABCE) repeats the following until fixpoint: if there is an asymmetric blocked clause C \u2208 F , let F := F \\{C}."}, {"heading": "2 Covered Clause Elimination Procedures", "text": "Given a CNF formula F , a clause C, and a literal l \u2208 C, the set of resolution candidates of C w.r.t. l is RC(F,C, l) := {C\u2032 | C\u2032 \u2208 Fl\u0304 and C \u2297l C\n\u2032 is not a tautology}. Notice that every clause in RC(F,C, l) contains the literal l\u0304. If RC(F,C, l) = /0, then C is blocked w.r.t. F . The literals apart from l\u0304 which occur in all clauses of RC(F,C, l) form the resolution intersection RI(F,C, l) of l and C w.r.t. F , defined as\nRI(F,C, l) := ( \u22c2 RC(F,C, l) ) \\{l\u0304}.\n2Here l\u0304 \u2208 C is included to handle the special case that for any tautological binary clause (l \u2228 l\u0304), both l and l\u0304 block the clause. Even without this addition, every non-binary tautological clause contains at least one literal that blocks the clause.\nGiven a CNF formula F , a clause C \u2208 F , and a literal l \u2208C, we say that l covers the literals in RI(F,C, l) (w.r.t. F and C). A literal l\u2032 is covered by l \u2208C if l\u2032 \u2208 RI(F,C, l). A literal l \u2208C is covering w.r.t. F and C if l covers at least one literal, i.e., RI(F,C, l) 6= /0.\nLemma 1. For any CNF formula F, clause C \u2208 F, and literal l \u2208 C, it holds that replacing C by C \u222a RI(F,C, l) in F preserves satisfiability.\nProof. For any literal l \u2208C it holds that VE(F, l) = VE((F \\{C})\u222a{C \u222aRI(F,C, l)}, l), where VE(F, l) denotes the CNF formula resulting from variable eliminating3 the variable of the literal l from F .\nFor a given clause C in a CNF formula F , we denote by (covered literal addition) CLA(F,C) the clause resulting from repeating the following until fixpoint: if there is a literal l \u2208C such that RI(F,C, l)\\C 6= /0, let C :=C\u222aRI(F,C, l).\nLemma 2. Replacing a clause C \u2208 F by CLA(F,C) preserves satisfiability.\nProof. The clause CLA(F,C) is obtained by iteratively applying Lemma 1 on clause C.\nLemma 3. Assume two clauses C,D with l \u2208C \u2286 D and two sets of clauses F,G with F \u2286 G. Further assume that D is not blocked w.r.t. F and hence C is not blocked w.r.t. G. Then RC(G,C, l)\u2287RC(F,D, l) 6= /0 and hence RI(G,C, l)\u2286 RI(F,D, l).\nProof. Monotonicity of RC w.r.t. its first argument and anti-monotonicity w.r.t. its second argument follows directly from its definition. For RI, note that intersection is anti-monotonic for non-empty sets of sets.\nTheorem 1. Given a CNF formula F and a clause C \u2208 F, CLA(F,C) is blocked or uniquely defined.\nProof. Assume C is not blocked w.r.t. F and contains two literals l1, l2, which cover the literals L\u2032i = RI(F,C, li) respectively. Consider the clauses C1 = C \u222a L\u20321 and C2 = C \u222a L \u2032 2. Now assume that both of C1,C2 are not blocked w.r.t. F . Then all clauses D \u2208 RC(F,C1, l2)\u2286 RC(F,C, l2) contain all literals in L\u20322. Since C1 is not blocked and thus RC(F,C1, l2) is not empty, we obtain L\u20322 \u2286 RI(F,C1, l2). The case where the indices are exchanged (i.e., L\u20321 \u2286 RI(F,C2, l1)) is symmetric. Thus as long clauses do not become blocked, covered literals can be added independently. The case that both of C1,C2 are blocked is trivial.\nWhat remains (by symmetry) is the case that C2 is blocked but C1 is not. Again, as above, we get L\u20322 \u2286 RI(F,C1, l2). For C \u2032 1 =C1 \u222aRI(F,C1, l2) we have C \u2032 1 =C\u222aL \u2032 1 \u222aRI(F,C1, l2) \u2287 L \u2032 1 \u222a (C\u222aL \u2032 2) \u2287C \u2032 2 which is also blocked. This generalizes to the following observation: For any non-deterministic choice of adding covered literals to C, the literal l2 remains covering. Further, if in this process the clause did not become blocked, it will eventually become blocked if the covered literals of l2 are added.\nTo illustrate the effect of adding covered literals on logical equivalence4 , consider the formula\nFCLA = (a\u2228b\u2228 c)\u2227 (a\u2228 b\u0304\u2228d)\u2227 (a\u2228 c\u0304\u2228 d\u0304)\u2227 (a\u0304\u2228 b\u0304\u2228 c\u0304)\u2227 (a\u0304\u2228b\u2228 d\u0304)\u2227 (a\u0304\u2228 c\u2228d).\nNotice that RI(FCLA,(a\u2228 b\u2228 c),b) = {d} and RI(FCLA,(a\u2228 b\u2228 c),c) = {d\u0304}. Therefore, depending on the order of addition, CLA(FCLA,(a\u2228b\u2228c)) is either (a\u2228b\u2228c\u2228d) when starting with covering literal b or (a\u2228b\u2228c\u2228 d\u0304) when starting with covering literal c. In both cases CLA(FCLA,(a\u2228b\u2228c)) is blocked. After replacing (a\u2228b\u2228 c) by (a\u2228b\u2228 c\u2228d) the truth assignment \u03c4 with \u03c4(a) = \u03c4(b) = \u03c4(c) = false and \u03c4(d) = true satisfies the new formula, while falsifying (a\u2228b\u2228c) \u2208 FCLA. In fact, FCLA witnesses the fact that none of the clause elimination procedures introduced next preserve logical equivalence in general.\n3More formally, VE(F, l) = (Fl \u2297Fl\u0304)\u222a (F \\ (Fl \u222aFl\u0304)), where Fl and Fl\u0304 consist of the clauses in F that contain l and l\u0304, respectively, and Fl \u2297Fl\u0304 = {C\u2297l C \u2032 |C \u2208 Fl,C \u2032 \u2208 Fl\u0304 , and C\u2297l C\n\u2032 is not a tautology}. 4In this context, two formulas F and F \u2032 are logically equivalent if they have exactly the same set of satisfying assignments\nwhen restricting these assignments to the variables appearing in both F and F \u2032."}, {"heading": "2.1 Covered Clause Elimination", "text": "Definition 2. Given a CNF formula F, a clause C \u2208 F is covered if CLA(F,C) is blocked w.r.t. F.\nLemma 4. Removal of an arbitrary covered clause preserves satisfiability.\nProof. C can be replaced by CLA(F,C) (Lemma 2), and C can be removed as CLA(F,C) is blocked.\nFor a given formula F , covered clause elimination (CCE) repeats the following until fixpoint: if there is a covered clause C \u2208 F , remove C from F . The resulting unique formula is denoted by CCE(F).\nConfluence of CCE follows from the following lemma.\nLemma 5. The following holds for any CNF formula F, clause C \u2208 F, and set of clauses S \u2286 F such that C 6\u2208 S. If C is covered w.r.t. F, then C is covered w.r.t. F \\S.\nProof. Let CLA(F,C) =Ck, where C0 :=C, and Ci+1 :=Ci\u222aRI(F,Ci, li) for each i = 0..k\u22121 and li \u2208Ci. Now define D0 :=C and, for each i = 0..k\u22121, Di+1 := Di if Di is blocked w.r.t. F \\S and Di+1 := Di \u222a RI(F \\S,Di, li) otherwise. Using Lemma 3, one can show by induction that for each i we have either (i) Di is blocked w.r.t. F \\S, or (ii) RI(F \\S,Di, li)\u2287 RI(F,Ci, li). If (i) holds for some i, then CLA(F \\S,C) is blocked w.r.t. F \\C. If Di is not blocked w.r.t. F \\S for any i, then CLA(F \\S,C)\u2287 CLA(F,C).\nTheorem 2. CCE is confluent.\nTheorem 3. CCE is more effective than BCE.\nProof. CCE is at least as effective as BCE follows from the fact that C \u2286 CLA(C): if C is blocked, so is CLA(C). Moreover, in FCLA no clause is blocked. However, all clauses are covered. Hence BCE will not remove a single clause, while CCE removes all of them."}, {"heading": "2.2 Hidden Covered Clause Elimination", "text": "For a given CNF formula F , a clause C \u2208 F is hidden covered if the clause resulting from repeating 1. C := CLA(F,C); 2. C := HLA(F,C) until fixpoint is blocked w.r.t. F . Hidden covered clause elimination (HCCE) repeats the following until fixpoint: if there is a hidden covered clause C in F , remove C from F .\nLemma 6. Removal of an arbitrary hidden covered clause preserves satisfiability.\nProof. Follows from the facts that (i) F is satisfiability equivalent to (F \\{C})\u222a{CLA(F,C)}; (ii) F is satisfiability equivalent to (F \\{C})\u222a{HLA(F,C)}; and (iii) BCE preserves satisfiability.\nTheorem 4. HCCE is more effective than CCE.\nProof. HCCE is at least as effective as CCE follows from the fact that C \u2286 HLA(F,C): if C is covered, so is HLA(F,C). Moreover, consider the formula\nFHCCE = (a\u2228b)\u2227 (a\u2228 c)\u2227 (a\u0304\u2228d)\u2227 (a\u0304\u2228 e)\u2227 (b\u2228 c)\u2227 (b\u0304\u2228d)\u2227 (b\u0304\u2228 e\u0304)\u2227 (c\u0304\u2228 d\u0304)\u2227 (c\u0304\u2228 e)\u2227 (d\u0304\u2228 e\u0304).\nIn FHCCE no clause is covered. However, all clauses are hidden covered. Hence CCE will not remove a single clause, while HCCE removes all of them.\nBy replacing CCE and BCE by HCCE and HBCE in the proof of Theorem 3 we have the following.\nTheorem 5. HCCE is more effective than HBCE."}, {"heading": "2.3 Asymmetric Covered Clause Elimination", "text": "For a given CNF formula F , a clause C \u2208 F is called asymmetric covered if the clause resulting from repeating 1. C := CLA(F,C); 2. C := ALA(F,C) until fixpoint is blocked w.r.t. F . Asymmetric covered clause elimination (ACCE) repeats the following until fixpoint: if there is a hidden covered clause C in F , remove C from F .\nLemma 7. Removal of an arbitrary asymmetric covered clause preserves satisfiability.\nProof. Follows from the facts that (i) F is satisfiability equivalent to (F \\{C})\u222a{CLA(F,C)}; (ii) F is satisfiability equivalent to (F \\{C})\u222a{ALA(F,C)}; and (iii) BCE preserves satisfiability.\nTheorem 6. ACCE is more effective than (i) ABCE, and (ii) HCCE.\nProof. (i) By replacing CCE and BCE by ACCE and ABCE in the proof of Theorem 3. (ii) ACCE is at least as effective as HCCE follows from the fact that HLA(F,C) \u2286 ALA(F,C): if HLA(F,C) is covered, so is ALA(F,C). Moreover, consider the formula\nFACCE = (a\u2228b\u2228 c)\u2227 (a\u2228b\u2228 c\u0304)\u2227 (a\u2228 b\u0304\u2228 c)\u2227 (a\u2228 b\u0304\u2228 c\u0304)\u2227 (a\u0304\u2228b\u2228 c)\u2227 (a\u0304\u2228b\u2228 c\u0304) \u2227\n(a\u0304\u2228 b\u0304\u2228 c)\u2227 (a\u0304\u2228 b\u0304\u2228 c\u0304)\u2227 (a\u2228b\u2228d)\u2227 (a\u2228b\u2228 d\u0304)\u2227 (a\u2228 b\u0304\u2228d)\u2227 (a\u2228 b\u0304\u2228 d\u0304)\nIn FACCE no clause is hidden covered. However, ACCE can remove (a\u2228b\u2228 c) and (a\u2228b\u2228 c\u0304)."}, {"heading": "3 Discussion and Conclusions", "text": "Our current preliminary implementation of CCE requires on average twice the computational cost of BCE on the 2009 SAT Competition application benchmark set when applied until fixpoint. This implies that CCE can be made quite fast in practice. Regarding the practical effectiveness of CCE, on about half of the instances, CCE(F) is approximately the same size as BCE(F) (the difference is less than 10 clauses). However, on the other half the additional reduction is about 5% compared to BCE; for the best case, we observed one instance for which the additional reduction was as high as 40%.\nAs further work on this subject, we will focus on studying the effectiveness of CCE further in practice, and also possibilities of implementing HCCE and ACCE. Here it is important to notice that, even when a specific elimination technique is too costly for practical purposes to be run until fixpoint, such a technique may be of practical use in a restricted form, i.e., by only applying it on long clauses or for a restricted time. Also, we will measure the effect of applying these elimination techniques on solving interesting benchmark formulas. On the more foundational side, we will study how to reconstruct solutions for a CNF formula F from solutions to any CCE(F), HCCE(F) and ACCE(F); this is important for practical applications since CCE, HCCE, and ACCE do not preserve logical equivalence."}], "references": [{"title": "Clause elimination procedures for CNF formulas", "author": ["M. Heule", "M. J\u00e4rvisalo", "A. Biere"], "venue": "In Proc. LPAR-17,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2010}, {"title": "Blocked clause elimination", "author": ["M. J\u00e4rvisalo", "A. Biere", "M. Heule"], "venue": "In Proc. TACAS, volume 6015 of LNCS,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "On a generalization of extended resolution", "author": ["O. Kullmann"], "venue": "Discrete Applied Mathematics,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1999}], "referenceMentions": [{"referenceID": 0, "context": "Abstract Generalizing the novel clause elimination procedures developed in [1], we introduce explicit (CCE), hidden (HCCE), and asymmetric (ACCE) variants of a procedure that eliminates covered clauses from CNF formulas.", "startOffset": 75, "endOffset": 78}, {"referenceID": 0, "context": "Generalizing the clause elimination procedures developed in [1], in this paper we introduce explicit (CCE), hidden (HCCE), and asymmetric (ACCE) variants of a clause elimination procedure that eliminates what we call covered clauses from CNF formulas.", "startOffset": 60, "endOffset": 63}, {"referenceID": 0, "context": "1) of blocked clause elimination [1, 2] w.", "startOffset": 33, "endOffset": 39}, {"referenceID": 1, "context": "1) of blocked clause elimination [1, 2] w.", "startOffset": 33, "endOffset": 39}, {"referenceID": 0, "context": "Extending the relative effectiveness hierarchy presented in [1] (see the solid arrows in Fig.", "startOffset": 60, "endOffset": 63}, {"referenceID": 0, "context": "In this sense, the elimination procedures introduced in this paper are proper generalizations of the techniques analyzed in [1].", "startOffset": 124, "endOffset": 127}, {"referenceID": 1, "context": "This is interesting since it has been recently shown in [2] that already BCE is surprisingly effective, as it can\u2014purely on the CNF level\u2014implicitly perform a combination of structure-based circuit-level techniques, including the polarity-based Plaisted-Greenbaum CNF encoding and difference circuit simplifications.", "startOffset": 56, "endOffset": 59}, {"referenceID": 0, "context": "We compare the clause elimination procedures based on covered clauses to the following procedures [1] that eliminate blocked clauses [3].", "startOffset": 98, "endOffset": 101}, {"referenceID": 2, "context": "We compare the clause elimination procedures based on covered clauses to the following procedures [1] that eliminate blocked clauses [3].", "startOffset": 133, "endOffset": 136}, {"referenceID": 0, "context": "Notice that out of these three, only BCE is confluent [1].", "startOffset": 54, "endOffset": 57}, {"referenceID": 2, "context": "Removal of blocked clauses preserves satisfiability [3].", "startOffset": 52, "endOffset": 55}], "year": 2010, "abstractText": "Generalizing the novel clause elimination procedures developed in [1], we introduce explicit (CCE), hidden (HCCE), and asymmetric (ACCE) variants of a procedure that eliminates covered clauses from CNF formulas. We show that these procedures are more effective in reducing CNF formulas than the respective variants of blocked clause elimination, and may hence be interesting as new preprocessing/simplification techniques for SAT solving.", "creator": "LaTeX with hyperref package"}}}