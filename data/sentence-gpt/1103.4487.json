{"id": "1103.4487", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Mar-2011", "title": "Handwritten Digit Recognition with a Committee of Deep Neural Nets on GPUs", "abstract": "The competitive MNIST handwritten digit recognition benchmark has a long history of broken records since 1998. The most recent substantial improvement by others dates back 7 years (error rate 0.4%) . Recently we were able to significantly improve this result, using graphics cards to greatly speed up training of simple but deep MLPs, which achieved 0.35%, outperforming all the previous more complex methods. Here we report another substantial improvement: 0.31% obtained using a committee of MLPs. This improved test is based on all the improvements made by members of the MNIST MNIST Collaborative. The MNIST Collaborative, as well as the MNIST Foundation, has been working for over a decade to develop an algorithm to improve the accuracy of MNIST programs.\n\n\nA previous version of this article did not address the specific MLPs of the MNIST Collaborative (a collection of MLPs in the MNIST Collaborative), but in the future we will add a separate MLP for our MNIST Collaborative to help people better understand their MLP and their MLP.", "histories": [["v1", "Wed, 23 Mar 2011 10:38:50 GMT  (110kb,D)", "http://arxiv.org/abs/1103.4487v1", "9 pages, 4 figures, 3 tables"]], "COMMENTS": "9 pages, 4 figures, 3 tables", "reviews": [], "SUBJECTS": "cs.LG cs.AI cs.CV cs.NE", "authors": ["dan c cire\\c{s}an", "ueli meier", "luca m gambardella", "j\\\"urgen schmidhuber"], "accepted": false, "id": "1103.4487"}, "pdf": {"name": "1103.4487.pdf", "metadata": {"source": "CRF", "title": "Handwritten Digit Recognition with a Committee of Deep Neural Nets on GPUs", "authors": ["Dan C. Cire\u015fan", "Ueli Meier", "Luca M. Gambardella", "J\u00fcrgen Schmidhuber"], "emails": [], "sections": [{"heading": null, "text": ""}, {"heading": "1 Introduction", "text": "Current automatic handwriting recognition algorithms are already pretty good at learning to recognize handwritten digits. More than a decade ago, Multilayer Perceptrons or MLPs (Werbos, 1974; LeCun, 1985; Rumelhart et al., 1986) were among the first classifiers tested on the now famous MNIST handwritten digit recognition benchmark. Most had few layers or few artificial neurons (units) per layer (LeCun et al., 1998), but apparently back then these were the biggest feasible MLPs, trained when CPU cores were at least 20 times slower than today. A more recent MLP with a single hidden layer of 800 units achieved 0.70% error (Simard et al., 2003). The latest substantial improvement by others occurred in 2003 (Simard et al., 2003) (error rate 0.4%). It was obtained with a convolutional neural network (CNN), using then novel elastic training image deformations. Ranzato et al. (2006, 2007) pre-trained each hidden CNN layer one by one in unsupervised fashion (this seems promising especially for small training sets), then used supervised learning to achieve 0.39% error rate. Recently we were able to significantly improve this result, obtaining an error rate of 0.35% using graphics cards (GPUs) to greatly speed up training of plain but deep MLPs (Ciresan et al., 2010). Deformations proved essential to prevent MLPs with up to 12 million free parameters from overfitting. To let the deformation process keep up with network training speed we had to port it onto the GPU as well.\nAt some stage in the classifier design process one usually has collected a set of possible classifiers. Often one of them yields best performance. Intriguingly, however, the sets of patterns misclassified by the different classifiers do not necessarily overlap. This information could be harnessed in a committee. In the context of handwritten recognition, Chellapilla et al. (2006) already showed how a combination of various classifiers can be trained more quickly than a single classifier yielding the same error rate. Here we focus on improving recognition rate using a committee of MLPs. Our goal is to produce a group of classifiers whose errors on various parts of the training set differ as much as possible (Bishop, 2006). We show that for handwritten digit recognition this can be achieved by training identical classifiers on data normalized in different ways prior to training."}, {"heading": "2 Distorting images to get more training instances", "text": "MNIST consists of two datasets, one for training (60,000 images) and one for testing (10,000 images). Many studies divide the training set into two sets consisting of 50,000 images for training and 10,000 for validation. So far, however, the best results on MNIST were obtained by deforming training images, thus greatly increasing their number. This allows for training networks with many weights, making them insensitive to in-class variability. Our network is also trained on numerous slightly deformed images, continually generated in online fashion; hence we may use the whole un-deformed training set for validation, without wasting training images. Pixel intensities of the original gray scale images range from 0 (background) to 255 (max foreground intensity). 28 \u00d7 28 = 784 pixels per image get mapped to real values pixel intensity127.5 \u2212 1.0 in [\u22121.0, 1.0], and are fed into the NN input layer.\nWe combine affine (rotation, scaling and horizontal shearing) and elastic deformations, characterized by the following real-valued parameters:\n\u2022 \u03c3 and \u03b1: for elastic distortions emulating uncontrolled oscillations of hand muscles (Simard et al., 2003). They are obtained by applying a displacement field to each digit. The displacement field is built by convolving a randomly initialized field with a Gaussian kernel whose standard deviation is defined by \u03c3. \u03b1 is a scaling factor controlling the amplitude of the applied elastic deformations;\n\u2022 \u03b2: a random angle from [\u2212\u03b2,+\u03b2] describes either rotation or horizontal shearing. In case of shearing, tan\u03b2 defines the ratio between horizontal displacement and image height;\n\u2022 \u03b3x, \u03b3y: for horizontal and vertical scaling, randomly selected from [1\u2212 \u03b3/100, 1 + \u03b3/100].\nAt the beginning of every epoch the entire MNIST training set gets deformed. Initial experiments with small networks suggested the following deformation parameters: \u03c3 = 5.0 \u2212 6.0, \u03b1 = 36.0 \u2212 38.0, \u03b3 = 15 \u2212 20. Since digits 1 and 7 are similar they get rotated/sheared less (\u03b2 = 7.5\u25e6) than other digits (\u03b2 = 15.0\u25e6).\nIt takes 83 CPU seconds to deform the 60,000 MNIST training images, most of them (75 seconds) for elastic distortions. Only the most time-consuming part of the latter\u2014convolution with a Gaussian kernel\u2014is ported to the GPU. The MNIST training set is split into 600 sequentially processed batches. MNIST digits are scaled from the original 28 \u00d7 28 pixels to 29 \u00d7 29 pixels, to get a proper center, which simplifies convolution. Each batch grid (10 \u00d7 10 images) has 290 \u00d7 290 cells, zero-padded to 310 \u00d7 310, thus avoiding margin effects when applying a Gaussian convolution kernel of size 21\u00d7 21.\nThe GPU program groups many threads into a block, where they share the same Gaussian kernel and parts of the random field. All 29 \u00d7 290 blocks contain 21 (the kernel size) \u00d710 threads, each computing a vertical strip of the convolution (Figure 1).\nGenerating the elastic displacement field takes only 1.5 seconds. Deforming the whole training set is more than 10 times faster, taking 6.5 instead of the original 83 seconds. Further optimizations would be possible by porting all deformations onto GPU, and by using the hardware\u2019s interpolation capabilities to perform the final bilinear interpolation. We omitted these since deformations are already pretty fast (deforming all images of one epoch takes only 3-10 % of total computation time, depending on MLP size)."}, {"heading": "3 Forming a committee", "text": "Preprocessing of the original MNIST data is mainly motivated by practical experience. MNIST digits are normalized such that the width or height of the bounding box equals 20 pixels. The variation of the aspect ratio for various digits is quite large, and we normalize the width of the bounding box to range from 10 to 20 pixels with a step-size of 2 pixels prior to training for all digits except ones. Normalizing the original MNIST training data results in 6 normalized training sets. In total we perform experiments with seven different data sets (6 normalized and the original MNIST).\nThe training procedure of a network is summarized in Figure 2. Each network is trained separately on normalized or original data. The normalization is done for all digits in the training set prior to training (normalization stage). During each training epoch the digits are distorted (Sec. 2) in a different way. For the network trained on original MNIST data the normalization step is omitted.\nWe perform six experiments to analyze performance improvements due to committees. Each committee consists of seven randomly initialized one-hidden-layer MLPs with 800 hidden units, trained with the same algorithm on randomly selected batches. The five committees differ only in how the data are preprocessed (or not) prior to training and on how the data are deformed during\ntraining. The committees are formed by simply averaging the corresponding outputs as shown in Figure 3.\nThe first two experiments are performed on undeformed original MNIST images. We train a committee of seven MLPs on original MNIST and we also form a committee of MLPs trained on preprocessed data. In Table 1 the error rates are listed for each of the individual nets and the committees. The improvement of the committee with respect to the individual nets is marginal for the first experiment. Adding preprocessing, the individual experts as well as the corresponding committee of the second experiment achieve substantially better recognition rates.\nTo study the combined effect of preprocessing and deformation, we perform four additional experiments on deformed MNIST (Tab. 2). Unless stated otherwise, default elastic deformation parameters \u03c3 = 6 and \u03b1 = 36 are used. All experiments with deformed images use independent horizontal and vertical scaling of maximum 12.5% and a maximum rotation of \u00b112.5\u25e6.\nExperiment 3 is similar to Experiment 1, except that the data are continually deformed. Error rates of the individual experts are much lower than without deformation (Tab. 1).\nIn experiment 4 we randomly reselect training and validation sets for each of the individual experts, simulating in this way the bootstrap aggregation technique (Breiman, 1996). The resulting committee performs slightly better than that of experiment 3.\nIn experiment 5 we vary deformations for each individual network. Error rates of some of the nets are bigger than in experiments 3 and 4, but the resulting committee has a lower error rate.\nIn the last experiment we train seven MLPs on preprocessed images that are also continually deformed during training. The error rate of the committee (0.43 %) is the best result ever reported for such a simple architecture."}, {"heading": "4 Experiments on GPUs", "text": "All simulations were performed on a computer with a Core i7 920 2.66GHz processor, 12GB of RAM, and a GTX 480 graphics card. The GPU accelerates the deformation routine by a factor of\n10 (only elastic deformations are GPU-optimized); the forward propagation (FP) and BP routines are sped up by a factor of 50. We pick the trained MLP with the lowest validation error, and evaluate it on the MNIST test set.\nOur GPU implementation of the MLP framework is explained by Ciresan et al. (2010). We use the architecture (841 neurons on the input layer, five hidden layers containing 2500, 2000, 1500, 1000 and 500 neurons, and 10 outputs) that has a very low 0.35% error rate on MNIST. We train six additional nets with the same architecture on preprocessed (normalized) data and form a committee by averaging the predictions of the individual nets. The MNIST data is already preprocessed such that the width or height of the digit is 20 pixels. Variations in writing style result in different aspect ratios of the handwritten digits. We therefore normalize the width of the digits (except for digits 1) to 10, 12, 14, 16, 18 and 20 pixels. Results of the nets trained on normalized data together with the resulting committee are listed in Table 3. Interestingly, the error of the committee (0.31%) is considerably lower than those of the individual nets. This is the best result ever reported on MNIST. The 31 misclassified digits are shown in Figure 4. Many of them are ambiguous and/or uncharacteristic, with obviously missing parts or strange strokes etc. Interestingly, the second guess of the network is correct for 29 out of the 31 misclassified digits."}, {"heading": "5 Conclusion", "text": "Current GPUs are more than 50 times faster than standard microprocessors when it comes to training big and deep neural networks with online back-propagation (weight update rate up to 7.5 \u00d7 109/s, and more than 1015 per trained network). On the competitive MNIST handwriting benchmark, single precision floating-point GPU-based committees of neural nets (each with a a different preprocessor motivated by observed variations in aspect ratio and slant of handwritten digits) outperform all previously published methods, including complex ones involving specialized architectures, unsupervised pre-training, combinations of machine learning classifiers etc. To avoid overfitting, training sets of sufficient size are obtained by appropriately distorting images."}, {"heading": "Acknowledgment", "text": "This work was partially funded by the Swiss Commission for Technology and Innovation (CTI), Project n. 9688.1 IFF: Intelligent Fill in Form."}], "references": [{"title": "Pattern Recognition and Machine Learning", "author": ["Christopher M. Bishop"], "venue": null, "citeRegEx": "Bishop.,? \\Q2006\\E", "shortCiteRegEx": "Bishop.", "year": 2006}, {"title": "Combining multiple classifiers for faster optical character recognition. In Document Analysis Systems VII, pages 358\u2013367", "author": ["Kumar Chellapilla", "Michael Shilman", "Patrice Simard"], "venue": null, "citeRegEx": "Chellapilla et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Chellapilla et al\\.", "year": 2006}, {"title": "Deep big simple neural nets for handwritten digit recognition", "author": ["Dan C. Ciresan", "Ueli Meier", "Luca M. Gambardella", "J\u00fcrgen Schmidhuber"], "venue": "Neural Computation,", "citeRegEx": "Ciresan et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Ciresan et al\\.", "year": 2010}, {"title": "Une proc\u00e9dure d\u2019apprentissage pour r\u00e9seau a seuil asymmetrique (a learning scheme for asymmetric threshold networks)", "author": ["Yann LeCun"], "venue": "In Proceedings of Cognitiva", "citeRegEx": "LeCun.,? \\Q1985\\E", "shortCiteRegEx": "LeCun.", "year": 1985}, {"title": "Gradient-based learning applied to document recognition", "author": ["Yann LeCun", "L\u00e9on Bottou", "Yoshua Bengio", "Patrick Haffner"], "venue": "Proceedings of the IEEE,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Efficient learning of sparse representations with an energy-based model", "author": ["Marc\u2019Aurelio Ranzato", "Christopher Poultney", "Sumit Chopra", "Yann LeCun"], "venue": "In J. Platt et al., editor, Advances in Neural Information Processing Systems (NIPS", "citeRegEx": "Ranzato et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Ranzato et al\\.", "year": 2006}, {"title": "Unsupervised learning of invariant feature hierarchies with applications to object recognition", "author": ["Marc\u2019Aurelio Ranzato", "Fu Jie Huang", "Y-Lan Boureau", "Yann LeCun"], "venue": "In Proc. Computer Vision and Pattern Recognition Conference", "citeRegEx": "Ranzato et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Ranzato et al\\.", "year": 2007}, {"title": "Learning internal representations by error propagation", "author": ["D.E. Rumelhart", "Geoffrey E. Hinton", "Ronald. J. Williams"], "venue": null, "citeRegEx": "Rumelhart et al\\.,? \\Q1986\\E", "shortCiteRegEx": "Rumelhart et al\\.", "year": 1986}, {"title": "Best practices for convolutional neural networks applied to visual document analysis", "author": ["Patrice Y. Simard", "Dave. Steinkraus", "John C. Platt"], "venue": "In Seventh International Conference on Document Analysis and Recognition,", "citeRegEx": "Simard et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Simard et al\\.", "year": 2003}], "referenceMentions": [{"referenceID": 3, "context": "More than a decade ago, Multilayer Perceptrons or MLPs (Werbos, 1974; LeCun, 1985; Rumelhart et al., 1986) were among the first classifiers tested on the now famous MNIST handwritten digit recognition benchmark.", "startOffset": 55, "endOffset": 106}, {"referenceID": 7, "context": "More than a decade ago, Multilayer Perceptrons or MLPs (Werbos, 1974; LeCun, 1985; Rumelhart et al., 1986) were among the first classifiers tested on the now famous MNIST handwritten digit recognition benchmark.", "startOffset": 55, "endOffset": 106}, {"referenceID": 4, "context": "Most had few layers or few artificial neurons (units) per layer (LeCun et al., 1998), but apparently back then these were the biggest feasible MLPs, trained when CPU cores were at least 20 times slower than today.", "startOffset": 64, "endOffset": 84}, {"referenceID": 8, "context": "70% error (Simard et al., 2003).", "startOffset": 10, "endOffset": 31}, {"referenceID": 8, "context": "The latest substantial improvement by others occurred in 2003 (Simard et al., 2003) (error rate 0.", "startOffset": 62, "endOffset": 83}, {"referenceID": 2, "context": "35% using graphics cards (GPUs) to greatly speed up training of plain but deep MLPs (Ciresan et al., 2010).", "startOffset": 84, "endOffset": 106}, {"referenceID": 0, "context": "Our goal is to produce a group of classifiers whose errors on various parts of the training set differ as much as possible (Bishop, 2006).", "startOffset": 123, "endOffset": 137}, {"referenceID": 0, "context": "In the context of handwritten recognition, Chellapilla et al. (2006) already showed how a combination of various classifiers can be trained more quickly than a single classifier yielding the same error rate.", "startOffset": 43, "endOffset": 69}, {"referenceID": 8, "context": "\u2022 \u03c3 and \u03b1: for elastic distortions emulating uncontrolled oscillations of hand muscles (Simard et al., 2003).", "startOffset": 87, "endOffset": 108}, {"referenceID": 2, "context": "Our GPU implementation of the MLP framework is explained by Ciresan et al. (2010). We use the architecture (841 neurons on the input layer, five hidden layers containing 2500, 2000, 1500, 1000 and 500 neurons, and 10 outputs) that has a very low 0.", "startOffset": 60, "endOffset": 82}], "year": 2011, "abstractText": "The competitive MNIST handwritten digit recognition benchmark has a long history of broken records since 1998. The most recent substantial improvement by others dates back 7 years (error rate 0.4%) . Recently we were able to significantly improve this result, using graphics cards to greatly speed up training of simple but deep MLPs, which achieved 0.35%, outperforming all the previous more complex methods. Here we report another substantial improvement: 0.31% obtained using a committee of MLPs.", "creator": "LaTeX with hyperref package"}}}