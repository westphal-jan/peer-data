{"id": "1106.0678", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Jun-2011", "title": "ATTac-2000: An Adaptive Autonomous Bidding Agent", "abstract": "The First Trading Agent Competition (TAC) was held from June 22nd to July 8th, 2000. TAC was designed to create a benchmark problem in the complex domain of e-marketplaces and to motivate researchers to apply unique approaches to a common task. This article describes ATTac-2000, the first-place finisher in TAC's highly competitive competition, and the first in the world to introduce such a process into a wide market. In its first major technical specification, it is a standard design, designed to be used in all major markets and in all large trading markets worldwide. This paper was presented on July 3rd, 2000 by the National Science Foundation and by the U.S. Federal Trade Commission in a paper titled: \"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions.\" This paper describes the current approach to the current TAC competition.\n\n\n\n\n\"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions\".\n\"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions\".\n\"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions\".\n\"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions\".\nThe first TAC competition was held in 2004 in the Netherlands, with a number of companies such as Visa, MasterCard, Visa, MasterCard, Visa and MasterCard being represented by ATMs in the Netherlands. This competition was held by the Netherlands's biggest consumer-oriented business. It was held in Amsterdam and Amsterdam's largest telecoms and telecoms operator.\nThe third competition was held in 2010 in the Netherlands. This was held in Belgium, with a number of firms such as TAC. It was held in Germany, the Netherlands, France, Germany, Sweden, Spain and France, respectively. This competition was held in Europe in 2008 and 2009.\n\"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions\".\n\"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions\".\n\"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions\".\n\"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions\".\n\"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions\".\n\"Fetal, Financial, and Financial Markets: A Standard Analysis of Economic Conditions\".\n\"F", "histories": [["v1", "Fri, 3 Jun 2011 14:55:42 GMT  (75kb)", "http://arxiv.org/abs/1106.0678v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["m kearns", "m l littman", "s singh", "p stone"], "accepted": false, "id": "1106.0678"}, "pdf": {"name": "1106.0678.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Michael L. Littman"], "emails": ["pstone@research.att.com", "mlittman@research.att.com", "satinder.baveja@syntekcapital.com", "michael.kearns@syntekcapital.com"], "sections": [{"heading": null, "text": "The First Trading Agent Competition (TAC) was held from June 22nd to July 8th, 2000. TAC was designed to create a benchmark problem in the complex domain of emarketplaces and to motivate researchers to apply unique approaches to a common task. This article describes ATTac-2000, the rst-place nisher in TAC. ATTac-2000 uses a principled bidding strategy that includes several elements of adaptivity . In addition to the success at the competition, isolated empirical results are presented indicating the robustness and e ectiveness of ATTac-2000's adaptive strategy."}, {"heading": "1. Introduction", "text": "The rst Trading Agent Competition (TAC) was held from June 22nd to July 8th, 2000, organized by a group of researchers and developers led by Michael Wellman of the University of Michigan and Peter Wurman of North Carolina State University (Wellman, Wurman, O'Malley, Bangera, Lin, Reeves, & Walsh, 2001). Their goals included providing a benchmark problem in the complex and rapidly advancing domain of e-marketplaces (Eisenberg, 2000) and motivating researchers to apply unique approaches to a common task. A key feature of TAC is that it required autonomous bidding agents to buy and sell multiple interacting goods in auctions of di erent types.\nAnother key feature of TAC was that participating agents competed against each other in a preliminary round and many practice games leading up to the nals. Thus, developers changed strategies in response to each others' agents in a sort of escalating arms race. Leading into the competition day, a wide variety of scenarios were possible. A successful agent needed to be able to perform well in any of these possible circumstances.\nThis article describes ATTac-2000, the rst-place nisher in TAC. ATTac-2000 uses a principled bidding strategy, which includes several elements of adaptivity . In addition to the success at the competition, isolated empirical results are presented indicating the robustness and e ectiveness of ATTac-2000's adaptive strategy.\nThe remainder of the article is organized as follows. Section 2 presents the details of the TAC domain. Section 3 introduces ATTac-2000, including the mechanisms behind its adaptivity. Section 4 describes the competition results and the results of controlled experiments testing ATTac-2000's adaptive components. Section 5 compares ATTac-2000\nc 2001 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.\nwith some of the other TAC participants. Section 6 presents possible directions for future research and concludes."}, {"heading": "2. TAC", "text": "A TAC game instance pits 8 autonomous bidding agents against one another. Each TAC agent is a simulated travel agent with 8 clients, each of whom would like to travel from TACtown to Boston and back again during a common 5-day period. Each client is characterized by a random set of preferences for the possible arrival and departure dates; hotel rooms (The Grand Hotel and Le Fleabag Inn); and entertainment tickets (symphony, theater, and baseball). To obtain utility for a client, an agent must construct a travel package for that client by purchasing airline tickets to and from TACtown and securing hotel reservations; it is possible to obtain additional utility by providing entertainment tickets as well. A TAC agent's score in a game instance is the di erence between the sum of its clients' utilities for the packages they receive and the agent's total expenditure.\nTAC agents buy ights, hotel rooms and entertainment tickets in di erent types of auctions. The TAC server, running at the University of Michigan, maintains the markets and sends price quotes to the agents. The agents connect over the Internet and send bids to the server that update the markets accordingly and execute transactions.\nEach game instance lasts 15 minutes and includes a total of 28 auctions of 3 di erent\ntypes.\nFlights (8 auctions): There is a separate auction for each type of airline ticket: ights to\nBoston (in ights) on days 1{4 and ights from Boston (out ights) on days 2{5. There is an unlimited supply of airline tickets, and their ask price periodically increases or decreases randomly by from $0 to $10. In all cases, tickets are priced between $150 and $600. When the server receives a bid at or above the ask price, the transaction is cleared immediately at the ask price. No resale of airline tickets is allowed.\nHotel Rooms (8): There are two di erent types of hotel rooms|the Boston Grand Hotel\n(BGH) and Le Fleabag Inn (LFI)|each of which has 16 rooms available on days 1{4. The rooms are sold in a 16th-price ascending (English) auction, meaning that for each of the 8 types of hotel rooms, the 16 highest bidders get the rooms at the 16th highest price. For example, if there are 15 bids for BGH on day 2 at $300, 2 bids at $150, and any number of lower bids, the rooms are sold for $150 to the 15 high bidders plus one of the $150 bidders (earliest received bid). The ask price is the current 16th-highest bid. Thus, agents have no knowledge of, for example, the current highest bid. New bids must be higher than the current ask price. No bid withdrawal and no resale is allowed. Transactions only clear when the auction closes. To prevent agents from all waiting until the end of the game to bid on hotel rooms, hotel auctions can close after an unspeci ed period (roughly one minute) of inactivity (no new bids received).\nEntertainment Tickets (12): Baseball, symphony, and theater tickets are each sold for\ndays 1{4 in continuous double auctions. Here, agents can buy and sell tickets, with transactions clearing immediately when one agent places a buy bid at a price at least as high as another agent's sell price. Unlike the other auction types in which the\ngoods are sold from a centralized stock, each agent starts with a random endowment of entertainment tickets. The prices sent to agents are the bid-ask spreads, i.e., the highest current bid price and the lowest current ask price (due to immediate clears, ask price is always greater than bid price). When a bid that beats the current bid (ask) price arrives, the sale price is the standing bid (ask) price, as opposed to the arriving ask (bid) price. In this case, bid withdrawal and ticket resale are both permitted.\nIn addition to unpredictable market prices, other sources of variability from game instance to game instance are the client pro les assigned to the agents and the random initial allotment of entertainment tickets. Each TAC agent has 8 clients with randomly assigned travel preferences. Clients have parameters for ideal arrival day, IAD (1{4); ideal departure day, IDD (2{5); grand hotel value, GHV ($50{$150); and entertainment values, EV ($0{$200) for each type of entertainment ticket.\nThe utility obtained by a client is determined by the travel package that it is given in combination with its preferences. To obtain a non-zero utility, the client must be assigned a feasible travel package consisting of an arrival day AD with the corresponding in ight, departure day DD with the corresponding out ight, and hotel rooms of the same type (BGH or LFI) for each day d such that AD d < DD. At most one entertainment ticket can be assigned for each day AD d < DD, and no client can be given more than one of the same entertainment ticket type. Given a feasible package, the client's utility is de ned as\n1000 travelPenalty+ hotelBonus+ funBonus\nwhere\ntravelPenalty = 100(jAD IAD j+ jDD IDD j)\nhotelBonus = GHV if the client is in the GBH, 0 otherwise.\nfunBonus = sum of relevant EV's for each entertainment ticket type assigned to the client.\nA TAC agent's nal score is simply the sum of its clients' utilities minus the agent's expenditures. Throughout the game instance, it must decide what bids to place in each of the 28 auctions. At the end of the game, it must submit a nal allocation of purchased goods to its clients.\nThe client preferences, allocations, and resulting utilities from one particular game from\nthe TAC nals (Game 3070 on the TAC server) are shown in Tables 1 and 2.\nFor full details on the design and mechanisms of the TAC server, see Wellman et al. (2001)."}, {"heading": "3. ATTac-2000", "text": "ATTac-2000 nished rst in the Trading Agent Competition using a principled bidding strategy, which included several elements of adaptivity . This adaptivity gave ATTac-2000 the exibility to cope with a wide variety of possible scenarios at the competition. In this section, we describe ATTac-2000's bidding strategy, its method for determining the best allocation of goods to clients, and its three forms of adaptivity. ATTac-2000's high-level strategy is summarized in Table 3."}, {"heading": "3.1 Bidding Strategy", "text": "TAC was de ned so as to be simple enough to have a low barrier to entry, yet complex enough to prevent tractable solution via direct game-theoretic analysis. Given that an optimal solution is not attainable, we use a principled approach that takes advantage of details of the TAC scenario. In general, ATTac-2000 aims to be robust to the parameter space de ned by TAC as well as to conceivable opponent strategies.\nAt every bidding opportunity, ATTac-2000 begins by computing the most pro table\nallocation of goods to clients (which we shall denote G ), given the goods that are currently owned and the current prices of hotels and ights. (See Section 3.3 for a caveat.) For the purposes of this computation, ATTac-2000 allocates, but does not consider buying or selling, entertainment tickets. In most cases, G is computed using integer linear programming, as described in Section 3.2.\nATTac-2000's high-level bidding strategy is based on the following two observations:\n1. Since airline prices periodically increase or decrease with equal probability, the ex-\npected change in price for each airline auction is $0. Indeed, it can be shown that if the airline auction is considered in isolation, waiting until the very end of the game to purchase tickets is an optimal strategy (except in the rare case that the price reaches the lowest allowed value).\n2. Since hotel prices are monotonically increasing, as the game proceeds, the hotel prices\napproach the eventual closing prices.\nTherefore, ATTac-2000 aims to delay most of its purchases, and particularly its airline purchases, until late in the game. ATTac-2000's high-level bidding strategy is based on the premise that it is best to delay \\committing\" to the current G for as long as possible. Although it continually reevaluates G , and is therefore never technically committed to anything, the markets are such that it is rarely advantageous to change a client's travel package if it would mean wasting an airline ticket or an expensive hotel room (thus requiring additional ones to be purchased).\nATTac-2000 accomplishes this delay of commitment by bidding in two di erent modes: passive and active. The passive mode, which lasts most of the game, is designed to keep as many options open as possible. During the passive mode, ATTac-2000 computes the average time it takes for it to compute and place its bids, T\nb\n(T\nb\nis the average time it takes to go\nthrough one iteration of the loop in step 1 of Table 3). We found that T\nb\nranged from 10\nseconds to well over a minute, and was primarily dependent upon the server's load. Call the time left in the game T\nl\n. When T\nl\n2 T\nb\n, ATTac-2000 switches to its active mode,\nduring which it buys the airline tickets required by the current G and places high bids for the required hotel rooms. Note that ATTac-2000 expects to run at most 2 bidding iterations in active mode. In fact, only 1 such iteration is necessary, but there is a huge cost to failing to complete the iteration before the end of the game. Planning for 2 active iterations leaves room for some error.\nBased on the current G , its current mode, and T\nl\n, ATTac-2000 bids for ights, hotel\nrooms, and entertainment tickets."}, {"heading": "3.1.1 Flights", "text": "While in the passive mode, ATTac-2000 does not bid in the airline auctions. In active mode, ATTac-2000 buys all currently unowned airline tickets needed for the current G . In most cases, that means that it only bids for airline tickets during its rst bidding opportunity in the active mode. However, in the face of drastically changing (hotel and entertainment ticket) prices, G could change su ciently to necessitate purchasing additional ights, instead of simply using the ones that have already been purchased."}, {"heading": "3.1.2 Hotels", "text": "When in the passive mode, ATTac-2000 bids in the hotel auctions either to try to win hotels cheaply should the auction close early, or to try to prevent the hotel auctions from closing early. It might be advantageous to prevent a hotel auction from closing if no rooms are currently desired in order to keep open the option of switching to that hotel should future market prices warrant it.\nFor each hotel room of type i (such as \\Grand Hotel, night 3\"), let H\ni\nbe the number\nof rooms of type i needed for G . Based on the current price of i, P\ni\n, ATTac-2000 tries to\nacquire n rooms where\nn =\n8 > > <\n> > :\n8 if P\ni\n= 0 (only true at the outset of the game)\nmax(H\ni\n; 4) if P\ni\n10\nmax(H\ni\n; 2) if P\ni\n20\nmax(H\ni\n; 1) if P\ni\n50:\nIf ATTac-2000's outstanding bids would already win n rooms should the auction close at the current price, then ATTac-2000 does nothing: should the auction close prematurely, ATTac-2000 wins the n rooms cheaply, and competitors lose the opportunity to get any rooms of type i later in the game. Otherwise, ATTac-2000 bids for n rooms at $1 above the current ask price. The formula for computing n was selected so as to risk wasting up to $40{$50 per room type for the bene t of maintaining exibility later in the game. The exact parameters here were chosen in an ad-hoc fashion without detailed experimentation. Our intuition is that ATTac-2000's performance is not very sensitive to their exact values.\nIn the active mode, ATTac-2000 bids on hotel rooms based on their marginal value within\nallocation G . Let V (G ) be the value of G (the income from all clients, minus the cost of the yet-to-be-acquired goods). Let G 0\nc\nbe the optimal allocation should client c fail to get\nits hotel rooms. Note that G\n0 c might di er from G in the distribution of entertainment\ntickets as well as in the ights and hotels of client c. ATTac-2000 bids for the hotel rooms assigned to client c in G at a price of V (G ) V (G 0\nc\n). Since at this point ights are a\nsunk cost, this price tends to be more than $1000.\nNotice that ATTac-2000 bids the full marginal utility for each hotel room required by the client's travel package. An alternative would have been to divide the marginal utility over the number of rooms in the package, which would have eliminated the risk of spending more on hotels than the itinerary is worth. On the other hand, failing to win a single hotel room is enough to invalidate the entire itinerary. ATTac-2000 bids the full marginal utility to maximize the chance that valid itineraries are obtained for all clients. In a combinatorial\nauction, the bidder would be able to be place a bid for the conjunction of the desired rooms and would therefore not need to choose between these two alternatives."}, {"heading": "3.1.3 Entertainment Tickets", "text": "ATTac-2000's bidding strategy for the entertainment tickets hypothesizes that for each ticket, the opponent buy (sell) price remains constant over the course of a single game (but may vary from game to game). So as to avoid underbidding (overbidding) for that price, ATTac-2000 gradually decreases (increases) its bid over the course of the game. The initial bids are always as optimistic as possible, but by the end of the game, ATTac-2000 is willing to settle for deals that are minimally pro table. In addition, this strategy serves to hedge against ATTac-2000's early uncertainty in its nal allocation of goods to clients.\nOn every bidding iteration, ATTac-2000 places a buy bid for each type of entertainment ticket, and a sell bid for each type of entertainment ticket that it currently owns. In all cases, the prices depend on the amount of time left in the game (T\nl\n), becoming less aggressive as\ntime goes on (see Figure 1).\ncate the calculated values of the tickets to ATTac-2000. The lines indicate the bid prices corresponding to those values. For example, the solid line (which increases over time) corresponds to the buy price relative to the buy value. Correspondence between the text and the lines is indicated by similar line types and boxes surrounding the text.\nFor each owned entertainment ticket E, if E is assigned in G , let V (E) be the value\nof E to the client to whom it is assigned in G (\\owned, allocated sell value\" in Figure 1). ATTac-2000 o ers to sell E for min(200; V (E) + ) where decreases linearly from 100 to 20 based on T\nl\n.\n1\nIf there is a current bid price greater than the resulting sell price, then\nATTac-2000 raises its sell price to 1 cent lower than the current bid price in order to get as high a price as possible.\nIf E is owned but not assigned in G (because all clients are either unavailable that night\nor already scheduled for that type of entertainment in G ), let V (E) be the maximum value\n1. Recall that $200 is the maximum possible value of E to any client under the TAC parameters.\nfor E over all clients, i.e. the greatest possible value of E given the client pro les (\\owned, unallocated sell value\" in Figure 1). ATTac-2000 o ers to sell E for max(50; V (E) ) where increases linearly from 0 to 50 based on T\nl\n. Once again, ATTac-2000 raises its price\nto meet an existing bid price that is greater than its target price. This strategy re ects the increasing likelihood as the game progresses that G will be close to the nal client allocation, and thus that any currently unused tickets will not be needed in the end. When in active mode, ATTac-2000 assumes that G is nal and o ers to sell any unneeded tickets for $30 in order to obtain at least some value for them (represented by the discrete point at the bottom right in Figure 1). Below $30, ATTac-2000 would rather waste the ticket than allow a competitor to make a large pro t.\nFinally, ATTac-2000 bids to buy each type of entertainment ticket E (including those that it is also o ering to sell) based on the increased value that would be derived by owning E. Let G 0\nE\nbe the optimal allocation that would result were E owned (\\buy value\" in\nFigure 1). Note that G\n0 E could have di erent ight and hotel assignments than G so as to\nmake most e ective use of E. Then, ATTac-2000 o ers to buy E for V (G\n0 E ) V (G ) ,\nwhere decreases linearly from 100 to 20 based on T\nl\n.\nAll of the parameters described in this section were chosen arbitrarily without detailed experimentation. Again our intuition is that, unless opponents know and explicitly exploit these values, ATTac-2000's performance is not very sensitive to them."}, {"heading": "3.2 Allocation Strategy", "text": "As is evident from Section 3.1, ATTac-2000 relies heavily on computing the current most pro table allocation of goods to clients, G . Since G changes as prices change, ATTac-2000 needs to recompute it at every bidding opportunity. By using an integer linear programming approach, ATTac-2000 was able to compute optimal nal allocations in every game instance during the tournament nals|one of only 2 entrants to do so. 2\nMost TAC participants used some form of greedy strategy for allocation (Greenwald & Stone, 2001). It is computationally feasible to quickly determine the maximum utility achievable by client 1 given a set of purchased goods, move on to client 2 with the remaining goods, etc. However, the greedy strategy can lead to suboptimal solutions. For example, consider 2 clients A and B with identical travel days IAD and IDD as well as identical entertainment values EV , but with A's GHV = $50 and B's GHV = $150. If the agent has exactly one of each type of hotel room for each day, the optimal assignment is clearly to assign the BGH to client B. However, if client A's utility is optimized rst, it will be assigned the BGH, leaving B to stay in LFI. The agent's resulting score would be 100 less than it could have been.\nAs an improvement over the basic greedy strategy, we implemented a heuristic approach that implements the greedy strategy over 100 random client orderings and chooses the most pro table resulting allocation. Empirically, the resulting allocation is often optimal, and never far from optimal. In addition, it is always very quick to compute. In a set of seven games from just before the tournament, the greedy allocator was run approximately 600 times and produced allocations that averaged 99.5% of the optimal value.\n2. As computed by Shou-de Lin of the TAC organizing team.\nAs the competition drew near, however, it became clear that every point would count. We therefore implemented an allocation strategy that is guaranteed to nd the optimal allocation of goods. 3 The integer linear programming approach used by ATTac-2000 works by de ning a set of variables, constraints on these variables, and an objective function. An assignment to the variables represents an allocation to the clients and the constraints ensure that the allocation is legal. The objective function encodes the fact that we seek the allocation with maximum value (utility minus cost).\nThe following notation is needed to describe the integer linear program. The formal notation is included for completeness; an equivalent English description follows each equation. The symbol c is a client (1 through 8). The symbol f is a feasible travel package, which consists of: the arrival day AD(f) (1 through 4); the departure day DD(f) (2 through 5), and the choice of hotel H(f) (BGH or LFI). There are 20 such travel packages. Symbol e is an entertainment ticket, which consists of: the day of the event D(e) (1 through 4), and the type of the event T (e) (baseball b, symphony s, or theater t). There are 12 di erent entertainment tickets. Symbol r is a resource (AD, DD, BGH, or LFI).\nUsing this notation, the 272 variables are: P (c; f), which indicates whether client c will be allocated feasible travel package f (160 variables); E(c; e), which indicates whether client c will be allocated entertainment ticket e (96 variables); and, B\nr\n(d) is the number of copies\nof resource r we would like to buy for day d (16 variables).\nThere are also several constants that de ne the problem: o\nr\n(d) is the number of tickets\nof resource r currently owned for day d, p\nr\n(d) is the current price for resource r on day d,\nu\nP\n(c; f) is utility to customer c for travel package f , and u\nE\n(c; e) is the utility to customer\nc for entertainment ticket e.\nGiven this notation, the objective is to maximize utility minus cost\nX\nc;f\nu\nP\n(c; f)P (c; f) +\nX\nc;e\nu\nE\n(c; e)E(c; e)\nX\nd2f2;3;4;5g\np\nDD\n(d)B\nDD\n(d)\nX\nd2f1;2;3;4g;r2fBGH;LFI;ADg\np\nr\n(d)B\nr\n(d)\nsubject to the following 188 constraints:\nFor all c,\nP\nf\nP (c; f) 1: No client gets more than one travel package (8 constraints).\nFor all d 2 f1; 2; 3; 4g,\nX\nc\nX\nf jAD(f)=d\nP (c; f) o\nAD\n(d) +B\nAD\n(d);\nFor all d 2 f1; 2; 3; 4g and h 2 fBGH;LFIg,\nX\nc\nX\nf jH(f)=h & AD(f) d<DD(f)\nP (c; f) o\nh\n(d) +B\nh\n(d);\n3. The general allocation problem is NP-complete, as it is equivalent to the set-packing problem (Garey &\nJohnson, 1979). Exhaustive search is computationally intractable even with only 8 clients.\nFor all d 2 f2; 3; 4; 5g,\nX\nc\nX\nf jDD(f)=d\nP (c; f) o\nDD\n(d) + B\nDD\n(d) :\nThe demand for resources from the selected travel packages must not exceed the sum of the owned and bought resources (16 constraints).\nFor all e,\nP\nc\nE(c; e) o\nE\n(e): The total quantity of each entertainment ticket allocated\ndoes not exceed what is owned (12 constraints).\nFor all c and e,\nP\nf jAD(f) D(e)<DD(f)\nP (c; f) E(c; e): An entertainment ticket can\nonly be used if its day is between the arrival and departure day of the selected travel package (96 constraints).\nFor all c and d 2 f1; 2; 3; 4g,\nP\nejD(e)=d\nE(c; e) 1: Each client can only use one\nentertainment ticket per day (32 constraints).\nFor all c and y 2 fb; s; tg,\nP\nejT (e)=y\nE(c; e) 1: Each client can only use each type of\nentertainment ticket once (24 constraints).\nAll variables are integers.\nThe solution to the resulting integer linear program is a value-maximizing allocation of owned resources to customers along with a list of resources that need to be purchased. Using the linear programming package \\LPsolve\", ATTac-2000 is usually able to nd the globally optimal solution in under one second on a 650 MHz Pentium II.\nNote that this is not by any means the only possible formulation of the allocation. Greenwald, Boyan, Kirby, and Reiter (2001) studied a variant and found that it performed extremely well on a collection of large, random allocation problems.\nThe above approach is guaranteed to nd the optimal allocation, and usually does so quickly. However, since integer linear programming is an NP-complete problem, some inputs can lead to signi cantly longer solution times. In a sample of 32 games taken shortly before the nals, the allocator was called 1866 times. In 93% of the cases, the optimization took a second or less. Less than 1% took 6 or more seconds. However, the 3 longest running times were all over a minute and all came from the same game. ATTac-2000 used the strategy that if an integer linear program takes 6 or more seconds to solve, the above-mentioned greedy strategy over random client orderings is used as a fall-back strategy for the rest of the game. This fall-back strategy was not needed during the tournament nals."}, {"heading": "3.3 Adaptivity", "text": "In a TAC game instance, the only information available to agents is the ask prices| individual bids are not visible. After each game, transaction-by-transaction data is available, but the lack of within-game information precluded competitors from using detailed models of opponent strategies in decision making. ATTac-2000 instead adapts its behavior on-line in three di erent ways: adaptable timing of bidding modes; adaptable allocation strategy; and adaptable hotel bidding."}, {"heading": "3.3.1 Timing of Bidding Modes", "text": "ATTac-2000 decides when to switch from the passive to the active bidding mode based on the observed server latency T\nb\nduring the current game instance (see Section 3.1)."}, {"heading": "3.3.2 Allocation", "text": "ATTac-2000 adapts its allocation strategy based on the amount of time it takes for the integer linear programming approach to determine optimal allocations in the current game instance (see Section 3.2)."}, {"heading": "3.3.3 Hotel Bidding", "text": "Perhaps most signi cantly, ATTac-2000 predicts the closing prices of hotel auctions based on their closing prices in previous games. Hotel bidding in TAC was particularly challenging due to the extreme volatility of prices near the end of the game. As stated in Section 3.1.2, at the end of the game ATTac-2000 bids the marginal utility for each desired hotel room, which was often in excess of $1000.\nDuring the preliminary competition, few agents bid their marginal utilities on hotel rooms. Those that did, however, generally dominated their competitors; such agents were high-bidders, bidding $1000, always winning the hotels on which they bid, but paying far less than their bids. Having observed a dominant strategy during the preliminary rounds, most agents, including ATTac-2000, adopted this high-bidding strategy during the actual competition. The result was many negative scores, as prices skyrocketed in the last moments of the game once there were 16 high bids for a given room.\nIn Section 3.1, we stated that ATTac-2000 computes G based on the current prices of the hotel rooms. Should the prices eventually become very high, ATTac-2000 would either end up paying too high a price for the hotel rooms or else fail to get travel packages for some of its clients. The only alternative was to avoid counting on obtaining contentious hotel rooms.\nSince strategies were changing up to the last minute before the nals, there was no way to identify a priori which hotels would be most contentious or whether hotel prices would actually skyrocket in the tournament. Therefore, ATTac-2000 divided the 8 hotel rooms into 4 equivalence classes, exploiting symmetries in the game (hotel rooms on days 1 and 4 should be equally in demand as should rooms on days 2 and 3), assigned priors to the expected closing prices of these rooms, and then adjusted these priors based on the observed closing prices during the tournament.\nAs expected, the Grand Hotel on days 2 and 3 turned out to be most contentious during the nals. Le Fleabag Inn on the same days was also fairly contentious. Whenever the actual price for a hotel was less than the predicted closing price, ATTac-2000 used the predicted hotel closing price for computing all of its allocation values.\nOne additional method for predicting whether hotel prices would skyrocket in a given game is to notice who the participants are and whether or not they tended to be highbidders in past games (see Figure 2). Although such information was not available via the server's API, a game's participants were always published beforehand on the TAC web page. By automatically downloading this information from the web (a practice whose ethicality was questioned at the competition), and matching against a precompiled database of which\nagents were high-bidders in the past, ATTac-2000 would only use the predicted hotel closing prices in games with 3 or more high-bidders involved: in games with fewer high-bidders, the prices of hotel rooms almost never skyrocketed 4 . As it turned out, all but one of ATTac2000's games in the semi- nals, and all games in the nals, involved several high-bidders, thus triggering the use of predicted hotel closing prices.\nEmpirical testing (Section 4) indicates that this strategy is extremely bene cial in situations in which hotel prices do indeed escalate, while it does not lead to signi cantly degraded performance when they do not."}, {"heading": "4. Results", "text": "TAC consisted of a preliminary round that ran over the course of a week and involved roughly 80 games for each of the 22 participants. The top 12 nishers were invited to the semi- nals and nals in Boston, MA on July 8th. Since agents and conditions were constantly changing, and since only 13 games were played by each agent in the semi- nals and nals, the competition does not provide a controlled testing environment. In this section, we describe ATTac-2000's success in the tournament, but also present empirical results of controlled tests that demonstrate the e ectiveness and robustness of ATTac-2000's adaptive strategy."}, {"heading": "4.1 The Competition", "text": "ATTac-2000's scores in the 88 preliminary-round games ranged from 3000 to over 4500 (mean 2700, std. dev. 1600). A good score in a game instance is in the 3000 to 4000 range. We noticed that there were many very bad scores (12 less than 1000 and seven less than 0).\n4. With just 2 high-bidders, the only way to have the price escalate would be if they bid for a combined\ntotal of 16 rooms of the same hotel type. That could only happen if all of their clients were to stay in the same hotel on the same night, a very unlikely scenario given the TAC parameters.\nThis is largely the result of ATTac-2000 not yet being imbued with its adaptive timing of bidding modes. During the preliminary round, ATTac-2000 shifted from passive to active bidding mode with 50 seconds left in the game instance. While 50 seconds is usually plenty of time to allow for at least 2 iterations through ATTac-2000's bidding loop, there were occasions in which the network and server lags were such that it would take more than 50 seconds to obtain updated market prices and submit bids. In this case, ATTac-2000 would either fail to buy airline tickets, or worse still, would buy airline tickets but not get the\nnal hotel bids in on time. Noticing that the server lag tended to be consistent within a game instance (perhaps due to the tra c patterns generated by the participating agents), we introduced the adaptive timing of bidding modes described in Section 3.3. After this change, ATTac-2000 was always able to complete at least one, and usually two, bidding loops in the active bidding phase.\nThe adaptive allocation strategy never came into play in the nals, as ATTac-2000 was able to optimally solve all of the allocation problems that came up during the nals very quickly using the integer linear programming method.\nHowever, the adaptive hotel bidding did play a big role. ATTac-2000 performed as well as the other best teams in the early TAC games when hotel prices (surprisingly) stayed low, and then out-performed the competitors in the nal games of the tournament when hotel prices suddenly rose to high levels. Indeed, in the last 2 games, some of the popular hotels closed at over $400. ATTac-2000 steered clear of these hotel rooms more e ectively than its closest competitors.\nTable 4 shows the scores of the 8 TAC nalists (Wellman et al., 2001). ATTac-2000's consistency (std. dev. 443 as opposed to 1600 in the preliminaries) is apparent: it avoided having any disastrous games, presumably due in large part to its adaptivity regarding timing and hotel bidding."}, {"heading": "4.2 Controlled Testing", "text": "In order to evaluate ATTac-2000's adaptive hotel bidding strategy in a controlled manner, we ran several game instances with ATTac-2000 playing against two variants of itself:\n1. High-bidder always computed G based on the current hotel prices (as opposed to\nusing priors and averages of past closing prices).\n2. Low-bidder always computed G as in variant 1, but also only bid for hotel rooms at\n$50 over the current ask price (as opposed to the marginal utility, which tended to be more than $1000).\nAt the extremes, with ATTac-2000 and 7 high-bidders playing, at least one hotel price skyrockets in every game since all agents bid very high for the hotel rooms. On the other hand, with ATTac-2000 and 7 low-bidders playing, hotel prices never skyrocket since all agents but ATTac-2000 bid close to the ask price. Our goal was to measure whether ATTac2000 could perform well in both extreme scenarios as well as various intermediate ones. Table 5 summarizes our results.\nseven agents averaged over all games in a controlled experiment. All di erences are statistically signi cant at the 0:001 level, except the one marked in italics. Each row corresponds to a di erent number of high-bidders (excluding ATTac2000 itself). The rst column presents the number of high-bidders as well as the number of experiments we ran for that scenario (in parentheses). The column labeled \\agent i\" shows how much better ATTac-2000 did on average than agent i. Scores above the stair-step line are for high-bidders (variant 1) and scores below the line are for low-bidders (variant 2). Results for identical agents are averaged to obtain a single average score di erence for each type of agent in each row. In all cases, ATTac-2000 beats the other agents.\nEach row of Table 5 corresponds to a di erent number of high-bidders in the game; for example, the row labeled with 4 high-bidders corresponds to ATTac-2000 playing with 4 copies of variant 1 and 3 copies of variant 2. Results for identical agents are averaged to obtain a single average score di erence for each type of agent in each row. In the rst column, we also show in parentheses the number of games played for the results in each row|each row re ects a di erent number of runs. In all cases, we ran enough game instances to achieve statistically signi cant results. However, in some cases we ran more instances than turned out to be required. The column labeled agent i shows the di erence between ATTac-2000's score and the score of agent i averaged over all games. In all scenarios, these\ndi erences are positive, showing that ATTac-2000 outscored all other agents on average.\n5\nStatistical signi cance was computed from paired T-tests; all results are signi cant at the 0:001 level except for the one marked in italics. As mentioned before, if the number of high-bidders is greater than or equal to 3, we expect the price for contentious hotels to rise, and in all such scenarios ATTac-2000 signi cantly outperforms all the other agents. The large score di erences appearing in the top rows of Table 5 are mainly due to the fact that the other agents get large, negative scores since they end up buying many expensive hotel rooms.\nIn these experiments, ATTac-2000 always uses its adaptive hotel price expectations, even when there are only 2 high-bidders. In the last row, when the number of high-bidders is 2, very little bidding up of hotel prices is expected and in this case, we do not get statistical signi cance relative to the two high-bidders (agent 2 and agent 3), since their strategies are nearly identical to ATTac-2000's in this case. We do get high statistical signi cance relative to all the other agents (copies of variant 2), however. Thus, ATTac-2000's adaptivity to hotel prices seems to help a lot when hotel prices do skyrocket and does not seem to prevent ATTac-2000 from winning on average when they don't.\nThe results of Table 5 provide strong evidence for ATTac-2000's ability to adapt robustly to varying number of competing agents that bid up hotel prices near the end of the game. Note that ATTac-2000 is not designed to perform well against itself. If 8 copies of ATTac2000 play against each other repeatedly, they will all favor the same hotel rooms and thus consistently all get large negative scores. It would be interesting to determine whether there exists a strategy that is both harmful to ATTac and bene cial to the adversary."}, {"heading": "5. Related Work", "text": "Although there has been a good deal of research on auction theory, especially from the perspective of auction mechanisms (Klemperer, 1999), studies of autonomous bidding agents and their interactions are relatively few and recent. TAC is one example. FM97.6 is another auction test-bed, which is based on shmarket auctions (Rodriguez-Aguilar, Martin, Noriega, Garcia, & Sierra, 2001). Automatic bidding agents have also been created in this domain (Gimenez-Funes, Godo, Rodriguez-Aguiolar, & Garcia-Calves, 1998). There have been a number of studies of agents bidding for a single good in multiple auctions (Ito, Fukuta, Shintani, & Sycara, 2000; Anthony, Hall, Dang, & Jennings, ; Preist, Bartolini, & Phillips, 2001). Outside of, but related to, the auction scenario, automatic shopping and pricing agents for internet commerce have been studied within a simpli ed model (Greenwald & Kephart, 1999).\nTwenty-two agents from 6 countries entered TAC, 12 of which quali ed to compete in the semi- nals and nals in Boston. The designs of these agents were motivated by a wide variety of research interests including machine learning, arti cial life, experimental economics, real-time systems, and choice theory (Greenwald & Stone, 2001).\nOur own approach was motivated by our research interests in multiagent learning (Littman,\n1994; Stone, 2000; Singh, Kearns, & Mansour, 2000). Based on the problem description, we expected to nd several learning opportunities in the domain. As noted above, detailed\n5. In general, ATTac-2000's average score decreased with increasing numbers of high-bidders, as games\nbecame more volatile.\nopponent modeling was precluded by the system dynamics. Nonetheless, ATTac-2000's adaptivity is one of the keys to its success, particularly in avoiding skyrocketing hotels.\nThe 2nd and 3rd place agents both used a di erent strategy to prepare for the possibility of skyrocketing hotels. Rather than avoiding popular hotels entirely by tracking closing prices across game instances, they both discouraged their agents from bidding for too many of any particular hotel room, thus spreading their demand across the rooms (Greenwald & Stone, 2001). While such a strategy is safer in the limit (i.e., it continues to work even if everyone uses it), it has a greater potential to cost the agent in the event that hotel prices do not skyrocket, since the agent will still distribute its demand to the less desirable rooms. On the other hand, ATTac-2000 would notice that the prices are not skyrocketing and thus bid for the optimal travel packages given current prices."}, {"heading": "6. Conclusion and Future Work", "text": "TAC-2000 was the rst autonomous bidding agent competition. While it was a very successful event, some minor improvements would increase its interest from a multiagent learning perspective.\nCurrently, there is no incentive to buy airline tickets until the end of the game. Were the price of ights to tend to increase, or were supply limited, agents would have to balance the advantage of keeping their options open against the savings of committing to travel packages earlier 6 .\nThe information structure of the TAC setup was such that it was impossible to observe the bidding patterns of individual agents during games. Nonetheless, the strategic behavior of individual agents often profoundly a ected market dynamics|particularly in the hotel auctions. It seems that it would be bene cial to be able to directly observe the behavior of each individual agent. Were there to be information available regarding the bidding behavior of the agents during the game (such that other agents could infer clients' preferences, and therefore market supply, demand, and prices), TAC agents would potentially be able to learn to predict market behavior as a game proceeds.\nWith or without these modi cations, we hope to be able to participate in future TACs,\nwith the goal of adding additional adaptive elements to ATTac-2000.\nAnother direction of future research is to apply the lessons learned from TAC to real simultaneous interacting auctions. It is straightforward to write bidding agents to participate in on-line auctions for a single good if the value to the client is xed ahead of time: the agent can bid slightly over the ask price until the auction closes or the price exceeds the value. However, when the values of multiple goods interact, such as is the case in TAC, agent deployment is not nearly so straightforward.\nOne such real application is the Federal Communications Commission's auctioning o\nof radio spectrum (Weber, 1997; Cramton, 1997). Especially for companies that are trying to achieve national coverage, the values of the di erent licenses interact in complex ways. Perhaps autonomous bidding agents will be able to a ect bidding strategies in such future\n6. This change has been adopted in the speci cation of TAC-01.\nauctions. Indeed, in related research we have begun down this path by creating straightforward bidding agents in a realistic FCC Auction Simulator (Csirik, Littman, Singh, & Stone, 2001).\nIn a more obvious application, an extended version of ATTac-2000 could potentially become useful to real travel agents, or to end users who wish to create their own travel packages."}, {"heading": "Acknowledgements", "text": "We would like to thank the TAC team at the University of Michigan, including Michael Wellman, Peter Wurman, Kevin O'Malley, Daniel Reeves, and William Walsh, for constructing the TAC server and responding promptly and cordially to our many requests while conducting the research reported here. We would also thank the anonymous reviewers for their helpful comments and suggestions."}], "references": [{"title": "The FCC spectrum auctions: An early assessment", "author": ["P.C. Cramton"], "venue": "Journal of Economics and Management Strategy,", "citeRegEx": "Cramton,? \\Q1997\\E", "shortCiteRegEx": "Cramton", "year": 1997}, {"title": "FAucS: An FCC spectrum auction simulator for autonomous bidding agents", "author": ["J.A. Csirik", "M.L. Littman", "S. Singh", "P. Stone"], "venue": "In Proceedings of the Second International Workshop on Electronic Commerce", "citeRegEx": "Csirik et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Csirik et al\\.", "year": 2001}, {"title": "In online auctions of the future, it'll be bot vs. bot vs. bot", "author": ["A. Eisenberg"], "venue": "The New York Times. August 17th", "citeRegEx": "Eisenberg,? \\Q2000\\E", "shortCiteRegEx": "Eisenberg", "year": 2000}, {"title": "Computers and Intractability: A Guide to the Theory of NP-completeness", "author": ["M.R. Garey", "D.S. Johnson"], "venue": null, "citeRegEx": "Garey and Johnson,? \\Q1979\\E", "shortCiteRegEx": "Garey and Johnson", "year": 1979}, {"title": "Designing bidding strategies for trading agents in electronic auctions", "author": ["E. Gimenez-Funes", "L. Godo", "J.A. Rodriguez-Aguiolar", "P. Garcia-Calves"], "venue": "In Proceedings of the Third International Conference on Multi-Agent Systems,", "citeRegEx": "Gimenez.Funes et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Gimenez.Funes et al\\.", "year": 1998}, {"title": "Bidding algorithms for simultaneous auctions", "author": ["A. Greenwald", "J. Boyan", "R.M. Kirby", "J. Reiter"], "venue": "In Proceedings of Third ACM Conference on E-Commerce,", "citeRegEx": "Greenwald et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Greenwald et al\\.", "year": 2001}, {"title": "Shopbots and pricebots", "author": ["A. Greenwald", "J.O. Kephart"], "venue": "In Proceedings of the Sixteenth International Joint Conference on Arti cial Intelligence,", "citeRegEx": "Greenwald and Kephart,? \\Q1999\\E", "shortCiteRegEx": "Greenwald and Kephart", "year": 1999}, {"title": "Autonomous bidding agents in the trading agent competition", "author": ["A. Greenwald", "P. Stone"], "venue": "IEEE Internet Computing,", "citeRegEx": "Greenwald and Stone,? \\Q2001\\E", "shortCiteRegEx": "Greenwald and Stone", "year": 2001}, {"title": "Biddingbot: a multiagent support system for cooperative bidding in multiple auctions", "author": ["T. Ito", "N. Fukuta", "T. Shintani", "K. Sycara"], "venue": "In Proceedings of the Fourth International Conference on MultiAgent Systems,", "citeRegEx": "Ito et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Ito et al\\.", "year": 2000}, {"title": "Auction theory: A guide to the literature", "author": ["P. Klemperer"], "venue": "Journal of Economic Surveys,", "citeRegEx": "Klemperer,? \\Q1999\\E", "shortCiteRegEx": "Klemperer", "year": 1999}, {"title": "Markov games as a framework for multi-agent reinforcement learning", "author": ["M.L. Littman"], "venue": "In Proceedings of the Eleventh International Conference on Machine Learning,", "citeRegEx": "Littman,? \\Q1994\\E", "shortCiteRegEx": "Littman", "year": 1994}, {"title": "Algorithm design for agents which participate in multiple simultaneous auctions", "author": ["C. Preist", "C. Bartolini", "I. Phillips"], "venue": "In Agent Mediated Electronic Commerce III (LNAI),", "citeRegEx": "Preist et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Preist et al\\.", "year": 2001}, {"title": "Towards a test-bed for trading agents in electronic auction markets. AI Communications", "author": ["J.A. Rodriguez-Aguilar", "F.J. Martin", "P. Noriega", "P. Garcia", "C. Sierra"], "venue": null, "citeRegEx": "Rodriguez.Aguilar et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Rodriguez.Aguilar et al\\.", "year": 2001}, {"title": "Nash convergence of gradient dynamics in general sum games", "author": ["S. Singh", "M. Kearns", "Y. Mansour"], "venue": "In Proceedings of the Sixteenth Conference on Uncertainty in Arti cial Intelligence (UAI),", "citeRegEx": "Singh et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Singh et al\\.", "year": 2000}, {"title": "Layered Learning in Multiagent Systems: A Winning Approach to Robotic Soccer", "author": ["P. Stone"], "venue": null, "citeRegEx": "Stone,? \\Q2000\\E", "shortCiteRegEx": "Stone", "year": 2000}, {"title": "Making more from less: Strategic demand reduction in the FCC spectrum auctions", "author": ["R.J. Weber"], "venue": "Journal of Economics and Management Strategy,", "citeRegEx": "Weber,? \\Q1997\\E", "shortCiteRegEx": "Weber", "year": 1997}, {"title": "A trading agent competition", "author": ["M.P. Wellman", "P.R. Wurman", "K. O'Malley", "R. Bangera", "Lin", "S.-d", "D. Reeves", "W.E. Walsh"], "venue": "IEEE Internet Computing,", "citeRegEx": "Wellman et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Wellman et al\\.", "year": 2001}], "referenceMentions": [{"referenceID": 2, "context": "Their goals included providing a benchmark problem in the complex and rapidly advancing domain of e-marketplaces (Eisenberg, 2000) and motivating researchers to apply unique approaches to a common task.", "startOffset": 113, "endOffset": 130}, {"referenceID": 16, "context": "For full details on the design and mechanisms of the TAC server, see Wellman et al. (2001).", "startOffset": 69, "endOffset": 91}, {"referenceID": 16, "context": "Table 4 shows the scores of the 8 TAC nalists (Wellman et al., 2001).", "startOffset": 46, "endOffset": 68}, {"referenceID": 9, "context": "Although there has been a good deal of research on auction theory, especially from the perspective of auction mechanisms (Klemperer, 1999), studies of autonomous bidding agents and their interactions are relatively few and recent.", "startOffset": 121, "endOffset": 138}, {"referenceID": 10, "context": "Our own approach was motivated by our research interests in multiagent learning (Littman, 1994; Stone, 2000; Singh, Kearns, & Mansour, 2000).", "startOffset": 80, "endOffset": 140}, {"referenceID": 14, "context": "Our own approach was motivated by our research interests in multiagent learning (Littman, 1994; Stone, 2000; Singh, Kearns, & Mansour, 2000).", "startOffset": 80, "endOffset": 140}, {"referenceID": 15, "context": "One such real application is the Federal Communications Commission's auctioning o of radio spectrum (Weber, 1997; Cramton, 1997).", "startOffset": 100, "endOffset": 128}, {"referenceID": 0, "context": "One such real application is the Federal Communications Commission's auctioning o of radio spectrum (Weber, 1997; Cramton, 1997).", "startOffset": 100, "endOffset": 128}], "year": 2013, "abstractText": "The First Trading Agent Competition (TAC) was held from June 22nd to July 8th, 2000. TAC was designed to create a benchmark problem in the complex domain of emarketplaces and to motivate researchers to apply unique approaches to a common task. This article describes ATTac-2000, the rst-place nisher in TAC. ATTac-2000 uses a principled bidding strategy that includes several elements of adaptivity . In addition to the success at the competition, isolated empirical results are presented indicating the robustness and e ectiveness of ATTac-2000's adaptive strategy.", "creator": "dvips 5.58 Copyright 1986, 1994 Radical Eye Software"}}}