{"id": "1106.4578", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Jun-2011", "title": "Propositional Independence - Formula-Variable Independence and Forgetting", "abstract": "Independence -- the study of what is relevant to a given problem of reasoning -- has received an increasing attention from the AI community. In this paper, we consider two basic forms of independence, namely, a syntactic one and a semantic one. We show features and drawbacks of them. In particular, while the syntactic form of independence is computationally easy to check, there are cases in which things that intuitively are not relevant are not recognized as such. We also consider the problem of forgetting, i.e., distilling from a knowledge base only the part that is relevant to the set of queries constructed from a subset of the alphabet. While such process is computationally hard, it allows for a simplification of subsequent reasoning, and can thus be viewed as a form of compilation: once the relevant part of a knowledge base has been extracted, all reasoning tasks to be performed can be simplified. As we demonstrated, this approach can be achieved with some simple steps: First, we compute a list of queries using the list of queries of the same language to derive a set of queries from the same language, such as Python.\n\nSecond, we compute a list of queries using the list of queries of the same language to derive a set of queries from the same language, such as Python. We now compute a list of queries with a subset of the same language to derive a set of queries from the same language, such as Python. We then extract a list of queries from the same language to derive a set of queries from the same language, such as Python. We also add a list of queries to the same language to derive a set of queries from the same language.\nThird, we apply a set of arguments to one particular problem, i.e., one specific set of queries, to a specific set of queries. These arguments may be a few words but the type of arguments to that particular set of queries can be defined by these arguments. Here, we consider two basic forms of independence:\nThe following arguments apply to an element that does not have the same meaning. To define the basic form of independence, we consider one form of independence:\nThe arguments apply to a element that does not have the same meaning. To define the basic form of independence, we consider one form of independence:\nThe arguments apply to a element that does not have the same meaning. To define the basic form of independence, we consider one form of independence:\nThe arguments apply to a element that does not have the same meaning. To define the", "histories": [["v1", "Wed, 22 Jun 2011 21:01:16 GMT  (172kb)", "http://arxiv.org/abs/1106.4578v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["j lang", "p liberatore", "p marquis"], "accepted": false, "id": "1106.4578"}, "pdf": {"name": "1106.4578.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": [], "sections": [{"heading": null, "text": "Propositional Independen eperforming more problem-oriented tasks su h as onsequen e nding, diagnosis, a -tion/update, de ision making et . Thus, Lit-simplifying (or Var(simplifying) a KBduring a preliminary o -line phase an prove helpful for improving on-line inferen esin e simpli ation never in reases the size of a KB. As shown by Proposition 23, asimilar on lusion annot be drawn to what on erns forgetting. This seems to be thepri e to be paid to bene t from the power of forgetting. However, this negative on lu-sion must be tempered by the two following omments. On the one hand, forgetting isinteresting per se; it is not only a tool that an help improving inferen e in some asesbut also a goal in several AI appli ations. On the other hand, our omplexity resultsrelate to the worst ase situation, only, and, as evoked before, forgetting is feasible inmany pra ti al ases. Finally, let us note that there are several omplete propositionalfragments for whi h forgetting is easy. Espe ially, as advo ated by Darwi he (1999), ompiling a KB into a DNNF formula during an o -line step an prove pra ti allyvaluable to a hieve forgetting in an e\u00c6 ient way, provided that the size of the ompiledform remains small enough (whi h annot be guaranteed in the worst ase). Sin e itis not known whether the DNNF fragment is stri tly more su in t than the primeimpli ates one (Darwi he & Marquis, 1999), the prime impli ates fragment an also betargeted with pro t as a ompilation language for some knowledge bases; espe ially,some re ent approa hes to the impli it representation of prime impli ates (Simon &del Val, 2001) exhibit very signi ant empiri al performan es (they enable the om-putation of sets of prime impli ates ontaining up to 1070 lauses). A ordingly, they an prove valuable for the pra ti al omputing of independen e and forgetting.A knowledgementsThe third author has been partly supported by the IUT de Lens, the Universit e d'Artois,the R egion Nord / Pas-de-Calais under the TACT-TIC proje t, and by the European Com-munity FEDER Program. Some results of this paper already appeared in Se tion 3 of thepaper (Lang & Marquis, 1998a) \\Complexity results for independen e and de nability inpropositional logi \", Pro . of the 6th International Conferen e on Prin iples of KnowledgeRepresentation and Reasoning (KR'98), pages 356-367, 1998.\n423\nLang, Liberatore, & Marquisalso ontains a variable from B if and only if every prime impli ate of ontainsa variable from B (sin e V ar( ) = A [B) if and only if is stri tly relevant toB. stri t relevan e (Lakemeyer, 1997){ Membership: Straightforward from Propositions 27 and 10.{ Hardness: By exhibiting a polynomial redu tion from sat-unsat to stri t rel-evan e of a formula to a subje t matter. To any pair h ; i of propo-sitional formulas, let rename( ) be a formula obtained from by renaming itsvariables. Obviously,(i) rename( ) is satis able if and only if is.Now, let new be a new variable, let = ^ new ^ :rename( )and V = V ar( ) [ fnewg. By Proposition 8, is Var-dependent on V if andonly if there is a prime impli ant of mentioning a variable from V , i.e., if andonly if ^ :rename( ) is satis able, thus, using (i):(ii) is Var-dependent on V if and only if both and : are satis able.Then, again after Proposition 8, is Var-independent from V ar( ) n V =V ar(rename( )) if and only if no prime impli ant of mentions a variablefrom V ar(rename( )), i.e., if and only if rename( ) is unsatis able, thus, using(i):(iii) is Var-independent from V ar( ) n V if and only if is satis able.Thus, from Proposition 27, (ii) and (iii), we get that is stri tly relevant to Vif and only if is satis able and rename( ) is not.\n438"}], "references": [], "referenceMentions": [], "year": 2011, "abstractText": null, "creator": "dvips(k) 5.86 Copyright 1999 Radical Eye Software"}}}