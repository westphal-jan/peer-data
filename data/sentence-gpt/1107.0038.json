{"id": "1107.0038", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Jun-2011", "title": "Dual Modelling of Permutation and Injection Problems", "abstract": "When writing a constraint program, we have to choose which variables should be the decision variables, and how to represent the constraints on these variables. In many cases, there is considerable choice for the decision variables. Consider, for example, permutation problems in which we have as many values as variables, and each variable takes an unique value. In such problems, we can choose between a primal and a dual viewpoint. In the dual viewpoint, each dual variable represents one of the primal values, whilst each dual value represents one of the primal variables. Alternatively, by means of channelling constraints to link the primal and dual variables, we can have a combined model with both sets of variables. In this paper, we perform an extensive theoretical and empirical study of such primal, dual and combined models for two classes of problems: permutation problems and injection problems. Our results show that it often be advantageous to use multiple viewpoints, and to have constraints which channel between them to maintain consistency. They also illustrate a general methodology for comparing different constraint models. For example, we used a set of constraint models to see how a variable might influence the value of an element in a constraint model. This approach has been used to evaluate whether one constraint model can influence the value of another, and what is the effect of these models?\n\n\n\nThe research shows that there is an increasing number of problems that people have encountered in their work and are not aware of. One study suggested that people might choose between one or more of those problems. The research found that people would prefer to learn how to define their problem. In other words, people might prefer to learn how to define their problem. This study showed that people who were given more problems, more answers, more choices, and more questions were given more answers. Finally, the study found that the questions about whether the problem is related to the relationship between the problem and the problem were significantly more important than those who were given more answers.\nAn interesting result of the research was that people who were given more answers were more likely to accept more complex problems. The problem model was chosen because people would prefer to learn how to define their problem in terms of the problem and where to use it in an alternative way. This idea is not based on any empirical data on how often people have faced problems with multiple problems, but on how many people had experienced them in the past.\nThe results are significant for both problems. A simple graph plots the probability of an error on a line as many as five times as large for the problem", "histories": [["v1", "Thu, 30 Jun 2011 20:37:09 GMT  (131kb)", "http://arxiv.org/abs/1107.0038v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["b hnich", "b m smith", "t walsh"], "accepted": false, "id": "1107.0038"}, "pdf": {"name": "1107.0038.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": [], "sections": [{"heading": null, "text": "Dual Modelling of Permutation and Inje tion Problems\nBrahim Hni h brahim 4 .u .ie Cork Constraint Computation Center University College Cork, Cork, Ireland\nBarbara M. Smith b.m.smith hud.a .uk S hool of Computing and Engineering Hudders eld, U.K\nToby Walsh tw 4 .u .ie Cork Constraint Computation Center University College Cork, Cork, Ireland.\nAbstra t\nWhen writing a onstraint program, we have to hoose whi h variables should be the de ision variables, and how to represent the onstraints on these variables. In many ases, there is onsiderable hoi e for the de ision variables. Consider, for example, permutation problems in whi h we have as many values as variables, and ea h variable takes an unique value. In su h problems, we an hoose between a primal and a dual viewpoint. In the dual viewpoint, ea h dual variable represents one of the primal values, whilst ea h dual value represents one of the primal variables. Alternatively, by means of hannelling onstraints to link the primal and dual variables, we an have a ombined model with both sets of variables. In this paper, we perform an extensive theoreti al and empiri al study of su h primal, dual and ombined models for two lasses of problems: permutation problems and inje tion problems. Our results show that it often be advantageous to use multiple viewpoints, and to have onstraints whi h hannel between them to maintain onsisten y. They also illustrate a general methodology for omparing di erent onstraint models."}, {"heading": "1. Introdu tion", "text": "Constraint programming is a highly su essful te hnology for solving a wide variety of ombinatorial problems like resour e allo ation, transportation, and s heduling. A onstraint program onsists of a set of de ision variables, ea h with an asso iated domain of values, and a set of onstraints de ning allowed values for subsets of these variables. The e\u00c6 ien y of a onstraint program depends on many fa tors in luding a good hoi e for the de ision variables, and areful modelling of the onstraints on these variables. There is often onsiderable hoi e as to what the de ision variables and their values should represent. For example, in an exam timetabling problem, the variables ould represent the exams, and the values represent the times. Alternatively, we an use a dual model in whi h the variables are the times, and the values are the exams. We always have a hoi e of this kind in permutation problems. In a permutation problem, we have as many values as variables, and ea h variable takes an unique value. We an therefore easily ex hange the roles of the variables and the values in representing the underlying problem. Many assignment, s heduling and\n2004 AI A ess Foundation. All rights reserved.\nrouting problems are permutation problems. For example, sports tournament s heduling\nan be modelled as nding a permutation of the games to t into the time slots, or a permutation of the time slots to t the games into. The aim of this paper is to ompare su h di erent models both theoreti ally and empiri ally.\nThe paper is stru tured as follows. In Se tion 2, we give the formalism and notation used in the rest of the paper. In Se tion 3, we present Langford's problem, whi h is used to illustrate the di erent ways we an model a permutation problem. We then introdu e a formal measure of onstraint tightness (Se tion 4) used to ompare theoreti ally the di erent models of permutation problems (Se tion 5). In Se tion 6, we ompare SAT (Boolean) models of permutation problems. In Se tions 7 and 8, we omplement the theoreti al results with some asymptoti and experimental analysis. We then explore the bene ts to bran hing heuristi s of having multiple viewpoints of the permutation (se tion 9). In Se tion 10, we extend our analysis to inje tive mappings. Finally, we end with related work (Se tion 11) and on lusions (Se tion 12)."}, {"heading": "2. Formal Ba kground", "text": "A onstraint satisfa tion problem (CSP) is a set of variables, ea h with a nite domain of values, and a set of onstraints. A onstraint onsists of a list of variables (the s ope) and a relation de ning the allowed values for these variables. A binary onstraint is a onstraint whose s ope is a pair of variables. A solution to a onstraint satisfa tion problem is an assignment of values to variables that satis es all the onstraints.\nA permutation problem is a onstraint satisfa tion problem in whi h ea h de ision variable takes an unique value, and there is the same number of values as variables. Hen e any solution assigns a permutation of the values to the variables. An important feature of permutation problems is that we an transpose the roles of the variables and the values in representing the underlying problem to give a new dual model whi h is also a permutation problem. Ea h variable in the original (primal) CSP be omes a value in the dual CSP, and vi e versa. The primal and the dual CSPs are equivalent sin e any solution to one an be translated into a solution to the other.\nWe an hoose either model arbitrarily to be the primal model, although in pra ti e it might be easier to express the problem onstraints in one of the models rather than the other, so we might tend to think of that model as the primal. We also onsider multiple permutation problems in whi h the variables divide into a number of (possibly overlapping) sets, ea h of whi h is a permutation problem. This lets us dis uss problems like quasigroups. An order n quasigroup (or Latin square) an be modeled as a multiple permutation problem\nontaining 2n overlapping permutation problems.\nAn inje tion problem is a onstraint satisfa tion problem in whi h ea h de ision variable takes an unique value, but there are now more values than variables. (Obviously, if there are fewer values than variables, the problem is trivially unsatis able.)\nMany levels of lo al onsisten y have been de ned for onstraint satisfa tion problems involving binary onstraints (for referen es see Debruyne and Bessi ere, 1997). A problem is (i; j)- onsistent i it has non-empty domains and any onsistent instantiation of i variables\nan be onsistently extended to j additional variables. A problem is ar - onsistent (AC) i it is (1; 1)- onsistent. A problem is path- onsistent (PC) i it is (2; 1)- onsistent. A\nproblem is strong path- onsistent (ACPC) i it is AC and PC. A problem is path inverse\nonsistent (PIC) i it is (1; 2)- onsistent. A problem is restri ted path- onsistent (RPC) i it is AC and if a value assigned to a variable is onsistent with just one value for an adjoining variable then for any other variable there is a ompatible value. A problem is singleton ar - onsistent (SAC) i it has non-empty domains and for any instantiation of a variable, the resulting subproblem an be made AC.\nFor non-binary onstraints, there has been less work on di erent levels of lo al onsisten y. One ex eption is generalized ar - onsisten y. A CSP with binary or non-binary\nonstraints is generalized ar - onsistent (GAC) i for any value for a variable in a onstraint, there exist ompatible values for all the other variables in the onstraint. For ordered domains (su h as integers), a problem is bounds onsistent (BC) i it has non-empty domains and an assignment of its minimum or maximum value to any variable in a (binary or nonbinary) onstraint an be onsistently extended to the other variables in the onstraint. In line with the de nitions introdu ed by Debruyne and Bessi ere (1997), we say that a lo al\nonsisten y property A is as strong as a lo al onsisten y property B (written A ,! B) i in any problem in whi h A holds then B holds, A is stronger than B (written A ! B) i A ,! B but not B ,! A, A is in omparable with B (written A B) i neither A ,! B nor B ,! A, and A is equivalent to B (written A $ B) i both A ,! B and B ,! A. It has been shown that: ACPC ! SAC ! PIC ! RPC ! AC ! BC (Debruyne & Bessi ere, 1997).\nBa ktra king algorithms are often used to nd solutions to CSPs. Su h algorithms try to extend partial assignments, enfor ing a lo al onsisten y after ea h extension and ba ktra king when this lo al onsisten y no longer holds. For example, the forward he king algorithm (FC) maintains a restri ted form of AC that ensures that the binary onstraints between the most re ently instantiated variable and any uninstantiated variables are AC. FC has been generalized to non-binary onstraints (Bessi ere, Meseguer, Freuder, & Larrosa, 1999). nFC0 makes every k-ary onstraint with k 1 variables instantiated AC. nFC1 applies (one pass of) AC to ea h onstraint or onstraint proje tion involving the urrent and exa tly one future variable. nFC2 applies (one pass of) GAC to ea h onstraint involving the urrent and at least one future variable. Three other generalizations of FC to non-binary onstraints, nFC3 to nFC5, degenerate to nFC2 on the single non-binary\nonstraint des ribing a permutation, so are not onsidered here. Finally, the maintaining ar - onsisten y algorithm (MAC) maintains AC during sear h, whilst MGAC maintains GAC."}, {"heading": "3. An Example", "text": "The n-queens problem is one of the simplest examples of a permutation problem. A ommon and natural model has a de ision variable for ea h row, with its value being the olumn in whi h the queen on that row lies. The dual model has a de ision variable for ea h\nolumn, with its value being the row on whi h the queen in that olumn lies. However, the n-queens problem is not ombinatorially hallenging as it be omes easier as n grows. For example, Morris (1992) has argued that there are no lo al maxima so throwing queens at random onto the board and performing min- on i ts hill- limbing will almost surely nd a solution. We fo us therefore on a di erent permutation problem that is simple like the\nn-queens problem but appears to be more ombinatorially hallenging. By using a simple example, the hara teristi s of permutation problems are hopefully more apparent than in more omplex problems where the other onstraints have a larger impa t.\nLangford's problem is prob024 in CSPLib (Gent & Walsh, 1999). A omprehensive\nhistory of the problem is given by Miller (2002). The problem is de ned as follows:\n\\A 27-digit sequen e in ludes the digits 1 to 9 three times ea h. There is one digit between the rst two 1s, and one digit between the last two 1s. There are just two digits between the rst two 2s, and two digits between the last two 2s, . . . and so on. Find all possible su h sequen es.\"\nThe problem an easily be generalized to the (n;m) problem where we have a sequen e of length n m, ontaining the integers 1 to m repeated exa tly n times. The above problem is thus the (3,9) problem. It has exa tly 6 solutions:\n181915267285296475384639743\n191218246279458634753968357\n191618257269258476354938743\n347839453674852962752816191\n347936483574692582762519181\n753869357436854972642812191\nNote that the last three solutions are the reverse of the rst three. This symmetry an be eliminated by adding onstraints; for instan e, in the (3,9) problem the se ond 9 annot be pla ed in the se ond half of the sequen e, and if it is in the entral position in the sequen e, the se ond 8 must be pla ed in the rst half of the sequen e. Su h onstraints have been added in what follows.\nThe rst model of Langford's problem we will onsider, whi h we shall arbitrarily all the primal model, has a variable for ea h o urren e of the digits. The value of this variable is the position in the sequen e of this o urren e. For example, the (3,9) problem has 27 variables, x\ni\nwith i 2 [1; 27\u2104. The value of x\ni\nis the lo ation in the sequen e of the\ni div m+1th o urren e of the digit i mod m. Thus, x\n1\nhas as its value the lo ation of\nthe 1st o urren e of the digit 1, x\n2\nhas as its value the lo ation of the 1st o urren e of\nthe digit 2, . . . , x\n9\nhas as its value the lo ation of the 1st o urren e of the digit 9, x\n10\nhas as its value the lo ation of the 2nd o urren e of the digit 1, and so on. We have a permutation onstraint that ensures that ea h digit o urren e o urs at a di erent position in the sequen e. This an be implemented either as a global all-di erent onstraint on all the x\ni\n, or as pairwise not-equals onstraints on ea h possible pair of variables. We all\nthe former the \\primal all-di erent\" model and the later the \\primal not-equals\" model. Finally, we have onstraints that the digit o urren es o ur in order down the sequen e and onstraints on the separation of the di erent o urren es of a digit: that is we have x\ni\n< x\ni+m\n< x\ni+2m\n, x\ni+m\nx\ni\n= i and x\ni+2m\nx\ni+m\n= i for i m.\nTable 1 gives the primal representation of the sequen e 23421314, a solution to the (2,4) problem. For larity, we also indi ate the orresponding digit o urren e using the notation \\d\nk\n\" for the kth o urren e of the digit d. For example, 3\n2\nis the 2nd o urren e of the\ndigit \\3\" and 2\n1\nis the 1st o urren e of the digit \\2\".\nThe dual model of Langford's problem has a variable for ea h lo ation in the sequen e. The value of this variable represents the digit o urren e at this lo ation. For example, the (3,9) problem has 27 variables, d\nj\nwith j 2 [1; 27\u2104. The value i of d\nj\nis an integer in the\ninterval [1; n m\u2104, representing the fa t that the i divm+1th o urren e of the digit i modm o urs at lo ation j. Thus, d\n3\n= 2 represents the fa t that the 1st o urren e of the digit 2\no urs at the 3rd lo ation, and d\n4\n= 10 represents the fa t that the 2nd o urren e of the\ndigit 1 o urs at the 4th lo ation, and so on.\nIn the dual model, we again have a permutation onstraint that ea h lo ation ontains a di erent digit o urren e. This an again be implemented via a global all-di erent onstraint on the d\nj\nor by pairwise not-equals onstraints on ea h pair of dual variables. We all the\nformer the \\dual all-di erent\" model and the later the \\dual not-equals\" model. The separation onstraints are not as simple to spe ify in the dual model. For example, for i m, we an add onstraints of the form: d\nj\n= i i d\nj+i+1\n= i + m and d\nj\n= i i\nd\nj+2 (i+1)\n= i + 2 m. Table 2 gives the dual representation of the sequen e 23421314, a\nsolution to the (2,4) problem.\nIt is possible to ombine primal and dual models by linking the two sets of variables, using hannelling onstraints to maintain onsisten y between the two viewpoints. This approa h is alled \\redundant modelling\" by Cheng et al. (1999). A similar idea was previously suggested, spe i ally for permutation problems, by Geelen (1992). In Langford's problem, the hannelling onstraints are x\ni\n= j i d\nj\n= i, and onstraints of the same form\nan be used in building a ombined primal/dual model of any permutation problem. Many onstraint toolkits support hannelling of this kind with e\u00c6 ient global onstraints. For example, ILOG Solver has a onstraint, Il Inverse, whi h an be used to repla e a set of individual onstraints of the form x\ni\n= j i d\nj\n= i, and the Si stus nite domain onstraint\nlibrary has an assignment predi ate whi h an be used similarly.\nThe ombined model is learly redundant as we an delete the onstraints of either individual model without in reasing the set of solutions. For instan e, in Langford's problem,\nwe need only express the separation onstraints in terms of either the primal or the dual variables. More surprisingly, the permutation onstraints on both the primal and the dual variables are also redundant. The existen e of the dual variables and the hannelling onstraints linking them to the primal variables are su\u00c6 ient to ensure that the values assigned to the primal variables are a permutation (and therefore the same must be true of the dual variables).\nEven if onstraints are logi ally redundant (that is, they an be deleted without hanging the set of solutions), they may still be useful during sear h. Logi ally redundant onstraints are often alled \\implied onstraints\", and useful implied onstraints are frequently added to a model to in rease the amount of onstraint propagation (Smith, Stergiou, &Walsh, 2000)). In the next se tion, we present a measure of onstraint tightness that allows us to determine when an implied onstraint added to a model will improve onstraint propagation. In the following se tion, we apply this measure of onstraint tightness to the di erent models of permutation problems introdu ed in this se tion. We are able to show, for example, that the\nhannelling onstraints not only make the binary not-equals onstraints redundant: they\nare tighter and an give more domain pruning."}, {"heading": "4. Constraint Tightness", "text": "Our de nition of onstraint tightness assumes that onstraints are de ned over the same variables and values or, as in the ase of primal and dual models, variables and values whi h are bije tively related. In this way, we an always ompare like with like. Our de nition of onstraint tightness is strongly in uen ed by the way lo al onsisten y properties are\nompared by Debruyne and Bessi ere (1997). Indeed, the de nition is parameterized by a lo al onsisten y property sin e the amount of pruning provided by a set of onstraints depends upon the level of lo al onsisten y being enfor ed. If we enfor e a high level of lo al\nonsisten y, we may get as mu h onstraint propagation with a loose onstraint as a mu h lower level of lo al onsisten y applied to a tight onstraint. Our measure of onstraint tightness would also be useful in a number of other appli ations (e.g. reasoning about the impa t of di erent lo al onsisten y te hniques on a single xed model).\nConsider a set of onstraints A de ned over a set of variables V\nA\n, and another set\nof onstraints B de ned over a set of variables V\nB\n, where there is a bije tion between\nassignments to V\nA\nand V\nB\n(in the rest of the paper, this bije tion is either the identity map,\nor that de ned by the hannelling onstraints). We say that the set of onstraints A is at least as tight as the set B with respe t to - onsisten y (written\nA\n,!\nB\n) i , given any\ndomains for their variables, if A is - onsistent then the equivalent domains of B a ording to the bije tion are also - onsistent. By onsidering all possible domains for the variables, this ordering measures the potential for domains to be pruned during sear h as variables are instantiated and domains pruned (possibly by other onstraints in the problem). Note that we dis uss the equivalent domains so that we an onsider primal and dual models in whi h the variables and values are di erent (but are in one to one relation with ea h other). We say that a set of onstraints A is tighter than a set B wrt - onsisten y (written\nA\n!\nB\n) i\nA\n,!\nB\nbut not\nB\n,!\nA\n, A is in omparable to B wrt - onsisten y\n(written\nA\nB\n) i neither\nA\n,!\nB\nnor\nB\n,!\nA\n, and A is equivalent to B wrt -\nonsisten y (written\nA\n$\nB\n) i both\nA\n,!\nB\nand\nB\n,!\nA\n. We an easily generalize\nthese de nitions to ompare - onsisten y on A with - onsisten y on B. This de nition of onstraint tightness has some ni e monotoni ity and xed-point properties whi h we will use extensively throughout this paper.\nProperty 1 (monotoni ity and xed-point)\n1. AC\nA[B\n,! AC\nA\n,! AC\nA\\B\n2. AC\nA\n! AC\nB\nimplies AC\nA[B\n$ AC\nA\nSimilar monotoni ity and xed-point properties hold for BC, RPC, PIC, SAC, ACPC, and GAC. We also extend these de nitions to ompare onstraint tightness wrt sear h algorithms like MAC and FC that maintain some lo al onsisten y during sear h. For example, we say that A is at least as tight as B wrt algorithm X (written X\nA\n,! X\nB\n) i ,\ngiven any xed variable and value ordering and any domains for the variables of A, X visits no more nodes to nd a solution of A or prove it unsatis able than X visits on B with the equivalent domains, and the equivalent variable and value ordering. Equivalen e here is again with respe t to the bije tion between the assignments to the variables of A and to B. We say that A is tighter than B wrt algorithm X (written X\nA\n! X\nB\n) i X\nA\n,! X\nB\nbut\nnot X\nB\n,! X\nA\n. Similar monotoni ity and xed-point properties an be given for FC, MAC\nand MGAC. Finally, we write X\nA\n) X\nB\nif X\nA\n! X\nB\nand there is a parameterized set of\nproblems of size n and a xed variable and value ordering with whi h X visits exponentially fewer nodes in n when applied to A than when applied to B. Our results an be extended to algorithms that nd all solutions. In addition, they an also be extended to a restri ted\nlass of dynami variable and value orderings (Ba hus, Chen, van Beek, & Walsh, 2002)."}, {"heading": "5. Theoreti al Comparison", "text": "We now have the theoreti al ma hinery needed to ompare the di erent ways we an model a permutation problem su h as Langford's problem. The primal not-equals model of a permutation has not-equals onstraints between the variables in ea h permutation. The primal all-di erent model has an all-di erent onstraint between the variables in ea h permutation. In a dual model, we inter hange variables for values. A ombined primal and dual model has both the primal and the dual variables, and hannelling onstraints linking them, of the form: x\ni\n= j i d\nj\n= i where x\ni\nis a primal variable and d\nj\nis a dual variable. A ombined\nmodel an also have not-equals and/or all-di erent onstraints on the primal and/or dual variables. There will, of ourse, typi ally be other onstraints on both sets of variables whi h depend on the nature of the permutation problem. For example, in Langford's problem we also have the separation onstraints. As a se ond example, in the all-interval series problem from CSPLib, the variables and the di eren es between neighboring variables are both permutations. In what follows, we do not onsider dire tly the ontribution of su h additional onstraints to pruning. However, the ease with whi h we an express ea h additional onstraint in the primal or the dual model and the resulting pruning power of these\nonstraints may determine our hoi e of the primal, dual or ombined model.\nWe will use the following subs ripts: \\6=\" for the primal not-equals onstraints, \\ \" for hannelling onstraints, \\6= \" for the primal not-equals and hannelling onstraints, \\6= 6=\"\nfor the primal not-equals, dual not-equals and hannelling onstraints, \\8\" for the primal all-di erent onstraint, \\8 \" for the primal all-di erent and hannelling onstraints, and \\8 8\" for the primal all-di erent, dual all-di erent and hannelling onstraints. Thus AC\n6=\nis AC applied to the primal not-equals onstraints, whilst SAC\n6=\nis SAC applied to the\nprimal not-equals and hannelling onstraints."}, {"heading": "5.1 Ar -Consisten y", "text": "We rst prove that, with respe t to AC, hannelling onstraints are tighter than the primal not-equals onstraints, but less tight than the primal all-di erent onstraint.\nTheorem 1 On a permutation problem:\nGAC\n8 8\n$ GAC\n8\n$ GAC\n8\n! AC\n6= 6=\n$ AC\n6=\n$ AC ! AC\n6=\nProof: In this and following proofs, we just prove the most important results. Others follow qui kly, often using transitivity, monotoni ity and the xed-point theorems.\nTo show GAC\n8\n! AC , onsider a permutation problem whose primal all-di erent\nonstraint is GAC. Suppose the hannelling onstraint between x\ni\nand d\nj\nwas not AC. Then\neither x\ni\nis set to j and d\nj\nhas i eliminated from its domain, or d\nj\nis set to i and x\ni\nhas j\neliminated from its domain. But neither of these two ases is possible by the onstru tion of the primal and dual model. Hen e the hannelling onstraints are all AC. To show stri tness, onsider a 5-variable permutation problem in whi h x\n1\n= x\n2\n= x\n3\n= f1; 2g and\nx\n4\n= x\n5\n= f3; 4; 5g. This is AC but not GAC\n8\n.\nTo show AC ! AC\n6=\n, suppose that the hannelling onstraints are AC. Consider a\nnot-equals onstraint, x\ni\n6= x\nj\n(i 6= j) that is not AC. Now, x\ni\nand x\nj\nmust have the same\nsingleton domain, fkg. Consider the hannelling onstraint between x\ni\nand d\nk\n. The only AC\nvalue for d\nk\nis i. Similarly, the only AC value for d\nk\nin the hannelling onstraint between\nx\nj\nand d\nk\nis j. But i 6= j. Hen e, d\nk\nhas no AC values. This is a ontradi tion as the\nhannelling onstraints are AC. Hen e all not-equals onstraints are AC. To show stri tness, onsider a 3-variable permutation problem with x\n1\n= x\n2\n= f1; 2g and x\n3\n= f1; 2; 3g. This\nis AC\n6=\nbut is not AC .\nTo show AC\n6= 6=\n$ AC , by monotoni ity, AC\n6= 6=\n,! AC . To show the reverse, onsider\na permutation problem whi h is AC but not AC\n6= 6=\n. Then there exists at least one not-\nequals onstraint that is not AC. Without loss of generality, let this be on two dual variables (a symmetri argument an be made for two primal variables). So both the asso iated (dual) variables, all them d\ni\nand d\nj\nmust have the same singleton domain, say fkg. Hen e, the\ndomain of the primal variable x\nk\nin ludes i and j. Consider the hannelling onstraint\nbetween x\nk\nand d\ni\n. Now this is not AC as the value x\nk\n= j has no support. This is a\nontradi tion.\nTo show GAC\n8 8\n$ GAC\n8\n, onsider a permutation problem that is GAC\n8\n. For every\npossible assignment of a value to a variable, there exist a onsistent extension to the other variables, x\n1\n= d\nx\n1\n; : : : x\nn\n= d\nx\nn\nwith x\ni\n6= x\nj\nfor all i 6= j. As this is a permutation, this\norresponds to the assignment of unique variables to values. Hen e, the orresponding dual\nall-di erent onstraint is GAC. Finally, the hannelling onstraints are trivially AC. 2\nUsing these identities, we an immediately dedu e, for instan e, that it does not in rease pruning to have both hannelling onstraints and primal (or dual) not-equals onstraints. Not-equals onstraints do not in rease the amount of onstraint propagation over that a hieved with hannelling onstraints alone. As our experiments show later on, they only add overhead to the onstraint solver. It is insightful to extra t from these proofs the reasons why ar - onsisten y performs di erent amounts of onstraint propagation in the di erent models. Ar - onsisten y deletes values in the domains of variables as follows:\nprimal not-equals onstraints: if the domain of any of the primal variables is redu ed\nto a singleton (either by onstraint propagation or by assignment in a ba ktra king algorithm), enfor ing AC on the primal not-equals onstraints removes this value from all other primal variables.\nhannelling onstraints: as with primal not-equals onstraints; in addition, if the do-\nmain of any dual variable is redu ed to a singleton, enfor ing AC on the hannelling\nonstraints removes this value from all other dual variables. In parti ular, if a value o urs in the domain of just one other primal variable, enfor ing AC on the hannelling\nonstraints ensures that no other value an be assigned to that primal variable.\nprimal all-di erent onstraint: enfor ing GAC on a primal all-di erent onstraint will\nprune all the values that are removed by enfor ing AC on the primal not-equals or\nhannelling onstraints. In addition, enfor ing GAC is sometimes able to prune other values (e.g. if we have two primal variables with only two values between them, these values will be removed from all other primal variables).\nIn brief, AC on the primal not-equals onstraints dete ts singleton variables, whilst AC on the hannelling onstraints dete ts both singleton variables and singleton values. GAC on a primal all-di erent onstraint, on the other hand, determines global onsisten y whi h in ludes singleton variables, singleton values and many other situations."}, {"heading": "5.2 Maintaining Ar -Consisten y", "text": "These results an be lifted to algorithms that maintain (generalized) ar - onsisten y during sear h. Indeed, the gaps between the primal all-di erent and the hannelling onstraints, and between the hannelling onstraints and the primal not-equals onstraints an be exponentially large. Note that not all di eren es in onstraint tightness result in exponential redu tions in sear h. For instan e, some di eren es between models whi h are only polynomial are identi ed in Cheng et al. (1999). Re all that we write X\nA\n) X\nB\ni X\nA\n! X\nB\nand\nthere is a problem on whi h algorithm X visits exponentially fewer bran hes with A than B. Note that GAC\n8\nand AC are both polynomial to enfor e, so an exponential redu tion\nin bran hes translates to an exponential redu tion in runtime.\nTheorem 2 On a permutation problem:\nMGAC\n8\n) MAC\n6= 6=\n$ MAC\n6=\n$ MAC ) MAC\n6=\nProof: We give proofs for the most important identities. Other results follow immediately from the last theorem.\nTo show MGAC\n8\n) MAC , onsider a (n+3)-variable permutation problem with x\ni\n=\nf1; : : : ; ng for i n+1 and x\nn+2\n= x\nn+3\n= fn+1; n+2; n+3g. Then, given a lexi ographi al\nvariable ordering, MGAC\n8\nimmediately fails, whilst MAC takes n! bran hes.\nTo show MAC ) MAC\n6=\n, onsider a (n+ 2)-variable permutation problem with x\n1\n=\nf1; 2g, and x\ni\n= f3; : : : ; n + 2g for i 2. Then, given a lexi ographi al variable ordering,\nMAC takes 2 bran hes to show insolubility, whilst MAC\n6=\ntakes 2(n 1)! bran hes. 2"}, {"heading": "5.3 Forward Che king", "text": "Maintaining (generalized) ar - onsisten y on large permutation problems an be expensive. We may therefore de ide to use a heaper lo al onsisten y property like that maintained by forward he king. For example, the Cho o nite-domain toolkit in Claire uses just nFC0 on all-di erent onstraints. The hannelling onstraints remain tighter than the primal not-equals onstraints wrt FC.\nTheorem 3 On a permutation problem:\nnFC2\n8\n! FC\n6= 6=\n$ FC\n6=\n$ FC ! FC\n6=\n! nFC0\n8\n\"\nnFC2\n8\n! nFC1\n8\nProof: Gent et al. (2000) prove FC\n6=\n,! nFC0\n8\n. To show stri tness on permutation\nproblems (as opposed to the more general lass of de omposable onstraints studied by Gent, Stergiou, and Walsh, 2000), onsider a 5-variable permutation problem with x\n1\n=\nx\n2\n= x\n3\n= x\n4\n= f1; 2; 3g and x\n5\n= f4; 5g. Irrespe tive of the variable and value ordering,\nFC shows the problem is unsatis able in at most 12 bran hes. nFC0 by omparison takes at least 18 bran hes.\nTo show FC ! FC\n6=\n, onsider assigning the value j to the primal variable x\ni\n. FC\n6=\nremoves j from the domain of all other primal variables. FC instantiates the dual variable d\nj\nwith the value i, and then removes i from the domain of all other primal variables.\nHen e, FC prunes all the values that FC\n6=\ndoes. To show stri tness, onsider a 4-variable\npermutation problem with x\n1\n= f1; 2g and x\n2\n= x\n3\n= x\n4\n= f3; 4g. Given a lexi ographi al\nvariable and numeri al value ordering, FC\n6=\nshows the problem is unsatis able in 4 bran hes.\nFC by omparison takes just 2 bran hes.\nGent et al. (2000) prove nFC1\n8\n,! FC\n6=\n. To show the reverse, onsider assigning the\nvalue j to the primal variable x\ni\n. FC\n6=\nremoves j from the domain of all primal variables\nex ept x\ni\n. However, nFC1\n8\nalso removes j from the domain of all primal variables ex ept\nx\ni\nsin e ea h o urs in a binary not-equals onstraint with x\ni\nobtained by proje ting out\nthe all-di erent onstraint. Hen e, nFC1\n8\n$ FC\n6=\n.\nTo show nFC2\n8\n! FC\n6= 6=\n, onsider instantiating the primal variable x\ni\nwith the value\nj. FC\n6= 6=\nremoves j from the domain of all primal variables ex ept x\ni\n, i from the domain\nof all dual variables ex ept d\nj\n, instantiates d\nj\nwith the value i, and then removes i from the\ndomain of all dual variables ex ept d\nj\n. nFC2\n8\nalso removes j from the domain of all primal\nvariables ex ept x\ni\n. The only possible di eren e is if one of the other dual variables, say\nd\nl\nhas a domain wipeout. If this happens, x\ni\nhas one value in its domain, l that is in the\ndomain of no other primal variable. Enfor ing GAC immediately dete ts that x\ni\nannot\ntake the value j, and must instead take the value k. Hen e nFC2\n8\nhas a domain wipeout\nwhenever FC\n6= 6=\ndoes. To show stri tness, onsider a 7-variable permutation problem with\nx\n1\n= x\n2\n= x\n3\n= x\n4\n= f1; 2; 3g and x\n5\n= x\n6\n= x\n7\n= f4; 5; 6; 7g. Irrespe tive of the variable\nand value ordering, FC\n6= 6=\ntakes at least 6 bran hes to show the problem is unsatis able.\nnFC2\n8\nby omparison takes no more than 4 bran hes.\nBessi ere et al. (1999) prove nFC2\n8\n,! nFC1\n8\n. To show stri tness on permutation prob-\nlems, onsider a 5-variable permutation problem with x\n1\n= x\n2\n= x\n3\n= x\n4\n= f1; 2; 3g and\nx\n5\n= f4; 5g. Irrespe tive of the variable and value ordering, nFC1 shows the problem is unsatis able in at least 6 bran hes. nFC2 by omparison takes no more than 3 bran hes. 2"}, {"heading": "5.4 Bounds Consisten y", "text": "Another ommon method to redu e osts is to enfor e just bounds onsisten y. For example, bounds onsisten y is used to prune a global onstraint involving a sum of variables and a set of inequalities (R egin & Rueher, 2000). As a se ond example, some of the experiments on permutation problems performed by Smith (2000) used bounds onsisten y on ertain of the onstraints. With bounds onsisten y on permutation problems, we obtain a very similar ordering of the models as with AC.\nTheorem 4 On a permutation problem:\nBC\n8\n! BC\n6= 6=\n$ BC\n6=\n$ BC ! BC\n6=\n\"\nAC\n6=\nProof: To show BC ! BC\n6=\n, onsider a permutation problem whi h is BC but one of\nthe primal not-equals onstraints is not BC. Then, it would involve two variables, x\ni\nand\nx\nj\nboth with identi al interval domains, [k; k\u2104. Enfor ing BC on the hannelling onstraint\nbetween x\ni\nand d\nk\nwould redu e d\nk\nto the domain [i; i\u2104. Enfor ing BC on the hannelling\nonstraint between x\nj\nand d\nk\nwould then ause a domain wipeout. But this ontradi ts the\nhannelling onstraints being BC. Hen e, all the primal not-equals onstraints must be BC.\nTo show stri tness. onsider a 3-variable permutation problem with x\n1\n= x\n2\n= [1; 2\u2104 and\nx\n3\n= [1; 3\u2104. This is BC\n6=\nbut not BC .\nTo show BC\n8\n! BC\n6= 6=\n, onsider a permutation problem whi h is BC\n8\n. Suppose we\nassign a boundary value j to a primal variable, x\ni\n(or equivalently, a boundary value i to\na dual variable, d\nj\n). As the all-di erent onstraint is BC, this an be extended to all the\nother primal variables using ea h of the values on e. This gives us a onsistent assignment for any other primal or dual variable. Hen e, it is BC\n6= 6=\n. To show stri tness, onsider a\n5-variable permutation problem with x\n1\n= x\n2\n= x\n3\n= [1; 2\u2104 and x\n4\n= x\n5\n= [3; 5\u2104. This is\nBC\n6= 6=\nbut not BC\n8\n.\nTo show AC\n6=\n! BC , onsider a permutation problem whi h is BC but not AC\n6=\n. Then\nthere must be one onstraint, x\ni\n6= x\nj\n, with x\ni\nand x\nj\nhaving the same singleton domain,\nfkg. But, if this is the ase, enfor ing BC on the hannelling onstraints between x\ni\nand\nd\nk\nand between x\nj\nand d\nk\nwould prove that the problem is unsatis able. Hen e, it is AC\n6=\n.\nTo show stri tness, onsider a 3-variable permutation problem with x\n1\n= x\n2\n= [1; 2\u2104 and\nx\n3\n= [1; 3\u2104. This is AC\n6=\nbut not BC . 2"}, {"heading": "5.5 Restri ted Path Consisten y", "text": "Debruyne and Bessi ere (1997) have shown that RPC is a promising ltering te hnique above AC. It prunes many of the PIC values at little extra ost to AC. Surprisingly, hannelling\nonstraints are in omparable to the primal not-equals onstraints wrt RPC. Channelling onstraints an in rease the amount of propagation (for example, when a dual variable has only one value left in its domain). However, RPC is hindered by the bipartite onstraint graph between primal and dual variables. Additional not-equals onstraints on primal and/or dual variables an therefore help propagation.\nTheorem 5 On a permutation problem;\nGAC\n8\n! RPC\n6= 6=\n! RPC\n6=\n! RPC\nRPC\n6=\nAC\nProof: To show RPC\nRPC\n6=\n, onsider a 4-variable permutation problem with x\n1\n=\nx\n2\n= x\n3\n= f1; 2; 3g and x\n4\n= f1; 2; 3; 4g. This is RPC\n6=\nbut not RPC . For the reverse\ndire tion, onsider a 5-variable permutation problem with x\n1\n= x\n2\n= x\n3\n= f1; 2g and\nx\n4\n= x\n5\n= f3; 4; 5g. This is RPC but not RPC\n6=\n.\nTo show RPC\n6=\n! RPC , onsider again the last example. This is RPC but not\nRPC\n6=\n.\nTo show RPC\n6= 6=\n! RPC\n6=\n, onsider a 6-variable permutation problem with x\n1\n= x\n2\n=\nf1; 2; 3; 4; 5; 6g and x\n3\n= x\n4\n= x\n5\n= x\n6\n= f4; 5; 6g. This is RPC\n6=\nbut not RPC\n6= 6=\n.\nTo show GAC\n8\n! RPC\n6= 6=\n, onsider a permutation problem whi h is GAC\n8\n. Suppose\nwe assign a value j to a primal variable, x\ni\n(or equivalently, a value i to a dual variable,\nd\nj\n). As the all-di erent onstraint is GAC, this an be extended to all the other primal variables using up all the other values. This gives us a onsistent assignment for any two other primal or dual variables. Hen e, the problem is PIC\n6= 6=\nand thus RPC\n6= 6=\n. To show\nstri tness, onsider a 7-variable permutation problem with x\n1\n= x\n2\n= x\n3\n= x\n4\n= f1; 2; 3g\nand x\n5\n= x\n6\n= x\n7\n= f4; 5; 6; 7g. This is RPC\n6= 6=\nbut not GAC\n8\n.\nTo show AC\nRPC\n6=\n, onsider a 4-variable permutation problem with x\n1\n= x\n2\n= x\n3\n=\nf1; 2; 3g and x\n4\n= f1; 2; 3; 4g. This is RPC\n6=\nbut not AC . For the reverse dire tion, onsider\na 5-variable permutation problem with x\n1\n= x\n2\n= x\n3\n= f1; 2g and x\n4\n= x\n5\n= f3; 4; 5g. This\nis AC but not RPC\n6=\n. 2"}, {"heading": "5.6 Path Inverse Consisten y", "text": "The in omparability of hannelling onstraints and primal not-equals onstraints remains when we move up the lo al onsisten y hierar hy from RPC to PIC.\nTheorem 6 On a permutation problem:\nGAC\n8\n! PIC\n6= 6=\n! PIC\n6=\n! PIC\nPIC\n6=\nAC\nProof: To show PIC\nPIC\n6=\n, onsider a 4-variable permutation problem with x\n1\n=\nx\n2\n= x\n3\n= f1; 2; 3g and x\n4\n= f1; 2; 3; 4g. This is PIC\n6=\nbut not PIC . Enfor ing PIC\non the hannelling onstraints redu es x\n4\nto the singleton domain f4g. For the reverse\ndire tion, onsider a 5-variable permutation problem with x\n1\n= x\n2\n= x\n3\n= f1; 2g and\nx\n4\n= x\n5\n= f3; 4; 5g. This is PIC but not PIC\n6=\n.\nTo show PIC\n6=\n! PIC , onsider a 5-variable permutation problem with x\n1\n= x\n2\n=\nx\n3\n= f1; 2g and x\n4\n= x\n5\n= f3; 4; 5g. This is PIC but not PIC\n6=\n.\nTo show PIC\n6= 6=\n! PIC\n6=\n, onsider a 6-variable permutation problem with x\n1\n= x\n2\n=\nf1; 2; 3; 4; 5; 6g and x\n3\n= x\n4\n= x\n5\n= x\n6\n= f4; 5; 6g. This is PIC\n6=\nbut not PIC\n6= 6=\n.\nTo show GAC\n8\n! PIC\n6= 6=\n, onsider a permutation problem in whi h the all-di erent\nonstraint is GAC. Suppose we assign a value j to a primal variable, x\ni\n(or equivalently, a\nvalue i to a dual variable, d\nj\n). As the all-di erent onstraint is GAC, this an be extended\nto all the other primal variables using up all the other values. This gives us a onsistent assignment for any two other primal or dual variables. Hen e, the not-equals and hannelling\nonstraints are PIC. To show stri tness, onsider a 7-variable permutation problem with\nx\n1\n= x\n2\n= x\n3\n= x\n4\n= f1; 2; 3g and x\n5\n= x\n6\n= x\n7\n= f4; 5; 6; 7g. This is PIC\n6= 6=\nbut not\nGAC\n8\n.\nTo show PIC\n6=\nAC , onsider a 4-variable permutation problem with x\n1\n= x\n2\n= x\n3\n=\nf1; 2; 3g and x\n4\n= f1; 2; 3; 4g. This is PIC\n6=\nbut not AC . Enfor ing AC on the hannelling\nonstraints redu es x\n4\nto the singleton domain f4g. For the reverse dire tion, onsider a\n5-variable permutation problem with x\n1\n= x\n2\n= x\n3\n= f1; 2g and x\n4\n= x\n5\n= f3; 4; 5g. This\nis AC but not PIC\n6=\n. 2"}, {"heading": "5.7 Singleton Ar -Consisten y", "text": "Debruyne and Bessi ere (1997) also showed that SAC is a promising ltering te hnique above both AC, RPC and PIC, pruning many values for its CPU time. Prosser et al. (2000) reported promising experimental results with SAC on quasigroup problems, a multiple permutation problem. Interestingly, as with AC (but unlike RPC and PIC whi h lie between AC and SAC), hannelling onstraints are tighter than the primal not-equals onstraints wrt SAC.\nTheorem 7 On a permutation problem:\nGAC\n8\n! SAC\n6= 6=\n$ SAC\n6=\n$ SAC ! SAC\n6=\nAC\nProof: To show SAC ! SAC\n6=\n, onsider a permutation problem that is SAC and any\ninstantiation for a primal variable x\ni\n. Suppose that the primal not-equals model of the\nresulting problem annot be made AC. Then there must exist two other primal variables, say x\nj\nand x\nk\nwhi h have at most one other value. Consider the dual variable asso iated\nwith this value. Then under this instantiation of the primal variable x\ni\n, enfor ing AC on the\nhannelling onstraint between the primal variable x\ni\nand the dual variable, and between\nthe dual variable and x\nj\nand x\nk\nresults in a domain wipeout on the dual variable. Hen e the\nproblem is not SAC . This is a ontradi tion. The primal not-equals model an therefore be made AC following the instantiation of x\ni\n. That is, the problem is SAC\n6=\n. To show stri tness,\nonsider a 5-variable permutation problem with domain x\n1\n= x\n2\n= x\n3\n= x\n4\n= f0; 1; 2g and\nx\n5\n= f3; 4g. This is SAC\n6=\nbut not SAC .\nTo show GAC\n8\n! SAC , onsider a permutation problem that is GAC\n8\n. Consider any\ninstantiation for a primal variable. This an be onsistently extended to all variables in the primal model. But this means that it an be onsistently extended to all variables in the primal and dual model, satisfying any ( ombination of) permutation or hannelling\nonstraints. As the hannelling onstraints are satis able, they an be made AC. Consider any instantiation for a dual variable. By a similar argument, taking the appropriate instantiation for the asso iated primal variable, the resulting problem an be made AC. Hen e, given any instantiation for a primal or dual variable, the hannelling onstraints an be made AC. That is, the problem is SAC , To show stri tness, onsider a 7-variable permutation problem with x\n1\n= x\n2\n= x\n3\n= x\n4\n= f0; 1; 2g and x\n5\n= x\n6\n= x\n7\n= f3; 4; 5; 6g. This\nSAC but is not GAC\n8\n.\nTo show SAC\n6=\nAC , onsider a four variable permutation problem in whi h x\n1\nto x\n3\nhave the f1; 2; 3g and x\n4\nhas the domain f0; 1; 2; 3g. This is SAC\n6=\nbut not AC . For the\nreverse, onsider a 4-variable permutation problem with x\n1\n= x\n2\n= f0; 1g and x\n3\n= x\n4\n=\nf0; 2; 3g. This is AC but not SAC\n6=\n. 2"}, {"heading": "5.8 Strong Path-Consisten y", "text": "Adding primal or dual not-equals onstraints to hannelling onstraints does not help AC or SAC. The following result shows that their addition does not help higher levels of lo al\nonsisten y like strong path- onsisten y (ACPC).\nTheorem 8 On a permutation problem:\nGAC\n8\nACPC\n6= 6=\n$ ACPC\n6=\n$ ACPC ! ACPC\n6=\nAC\nProof: To show ACPC ! ACPC\n6=\n, onsider some hannelling onstraints that are ACPC.\nNow AC ! AC\n6=\n, so we just need to show PC ! PC\n6=\n. Consider a onsistent pair of values,\nl and m for a pair of primal variables, x\ni\nand x\nj\n. Take any third primal variable, x\nk\n. As\nthe onstraint between d\nl\n, d\nm\nand x\nk\nis PC, we an nd a value for x\nk\nonsistent with\nthe hannelling onstraints. But this also satis es the not-equals onstraint between primal variables. Hen e, the problem is PC\n6=\n. To show stri tness, onsider a 4-variable permutation\nproblem with x\n1\n= x\n2\n= x\n3\n= x\n4\n= f1; 2; 3g. This is ACPC\n6=\nbut not ACPC .\nTo show ACPC\n6= 6=\n$ ACPC\n6=\n$ ACPC , we re all that AC\n6=\n$ AC\n6=\n$ AC . Hen e\nwe need just show that PC\n6=\n$ PC\n6=\n$ PC . Consider a permutation problem. Enfor ing\nPC on the hannelling onstraints alone infers both the primal and the dual not-equals\nonstraints. Hen e, PC\n6=\n$ PC\n6=\n$ PC .\nTo show GAC\n8\nACPC\n6= 6=\n, onsider a 6-variable permutation problem with x\n1\n= x\n2\n=\nx\n3\n= x\n4\n= f1; 2; 3g, and x\n5\n= x\n6\n= f4; 5; 6g. This is ACPC\n6= 6=\nbut not GAC\n8\n. For the\nreverse dire tion, onsider a 3-variable permutation problem with x\n1\n= x\n2\n= x\n3\n= f1; 2; 3g,\nand the additional binary onstraint even(x\n1\n+ x\n3\n). Enfor ing GAC\n8\nprunes the domains\nto x\n1\n= x\n3\n= f1; 3g, and x\n2\n= f2g. However, these domains are not ACPC\n6= 6=\n. Enfor ing\nACPC tightens the onstraint between x\n1\nand x\n3\nfrom not-equals to x\n1\n= 1; x\n3\n= 3 or\nx\n1\n= 3; x\n3\n= 1.\nTo show ACPC\n6=\nAC , onsider a 5-variable permutation problem with x\n1\n= x\n2\n=\nx\n3\n= f1; 2g, and x\n4\n= x\n5\n= f3; 4; 5g. This is AC but not ACPC\n6=\n. For the reverse dire tion,\nonsider again the 4-variable permutation problem with x\n1\n= x\n2\n= x\n3\n= x\n4\n= f1; 2; 3g. This\nis ACPC\n6=\nbut not AC . 2"}, {"heading": "5.9 Multiple Permutation Problems", "text": "These results extend to multiple permutation problems under a simple restri tion that the problem is triangle preserving (Stergiou & Walsh, 1999). That is, any triple of variables whi h are all-di erent must o ur together in at least one permutation. For example, the three onstraints all-di (x\n1\n; x\n2\n; x\n4\n), all-di (x\n1\n; x\n3\n; x\n5\n), and all-di (x\n2\n; x\n3\n; x\n6\n) are not triangle\npreserving as x\n1\n, x\n2\nand x\n3\nare all-di erent but are not in the same onstraint. The following\ntheorem olle ts together and generalizes many of the previous results.\nTheorem 9 On a multiple permutation problem:\nGAC\n8\nACPC\n6= 6=\n$ ACPC\n6=\n$ ACPC ! ACPC\n6=\nAC\n# # # #\nGAC\n8\n!SAC\n6= 6=\n$ SAC\n6=\n$ SAC\n! SAC\n6=\nAC\n# # # #\nGAC\n8\n!PIC\n6= 6=\n! PIC\n6=\n! PIC\nPIC\n6=\nAC\n# # # #\nGAC\n8\n!RPC\n6= 6=\n! RPC\n6=\n! RPC\nRPC\n6=\nAC\n# # # #\nGAC\n8\n!AC\n6= 6=\n$ AC\n6=\n$ AC\n! AC\n6=\n!BC\n# # # # #\nBC\n8\n!BC\n6= 6=\n$ BC\n6=\n$ BC\n! BC\n6=\nProof: The proofs lift in a straightforward manner from the single permutation ase. Lo al\nonsisten ies like ACPC, SAC, PIC and RPC onsider triples of variables. If these are linked together, we use the fa t that the problem is triangle preserving and a permutation is therefore de ned over them. If these are not linked together, we an de ompose the argument into AC on pairs of variables. Without triangle preservation, GAC\n8\n, may only\na hieve as high a level of onsisten y as AC\n6=\n. For example, onsider again the non-triangle\npreserving onstraints in the last paragraph. If x\n1\n= x\n2\n= x\n3\n= f1; 2g and x\n4\n= x\n5\n= x\n6\n=\nf1; 2; 3g then the problem is GAC\n8\n, but it is not RPC\n6=\n, and hen e neither PIC\n6=\n, SAC\n6=\nnor ACPC\n6=\n. 2"}, {"heading": "6. SAT Models", "text": "Another solution strategy is to en ode permutation problems into SAT and use a fast Davis-Putnam (DP) or lo al sear h pro edure. For example, Bejar and Manya (2000) report promising results for propositional en odings of round robin problems, whi h in lude permutation onstraints. We onsider here just \\dire t\" en odings into SAT as these have been used most ommonly in the past (Walsh, 2000). An alternative and promising en oding of CSPs into SAT is the \\support en oding\". Re ently, Gent (2002) has shown that unit propagation in the support en oding is equivalent to enfor ing ar - onsisten y in the original CSP, and this an be a hieved in asymptoti ally optimal time. To ompare the support en odings of the di erent models of a permutation problem, we simply need therefore to look at our results on ar - onsisten y. With the dire t en oding, unit propagation enfor es a level of lo al onsisten y less than ar - onsisten y. Indeed, the level of onsisten y is often identi al to that a hieved by the forward he king algorithm.\nIn the dire t en oding of a CSP into SAT, we have a Boolean variable X\nij\nwhi h is true\ni the primal variable x\ni\ntakes the value j. In the primal SAT model, there are n lauses to\nensure that ea h primal variable takes at least one value, O(n\n3\n) lauses to ensure that no\nprimal variable gets two values, and O(n\n3\n) lauses to ensure that no two primal variables\ntake the same value. Interestingly the hannelling SAT model has the same number of Boolean variables as the primal SAT model (as we an use X\nij\nto represent both the jth\nvalue of the primal variable x\ni\nand the ith value for the dual variable d\nj\n), and just n\nadditional lauses to ensure ea h dual variable takes a value. The O(n\n3\n) lauses to ensure\nthat no dual variable gets two values are equivalent to the lauses that ensure no two primal variables get the same value. The following results show that MAC is tighter than DP, and DP is equivalent to FC on these di erent models. In what follows, we assume that the FC algorithm uses a fail rst heuristi that instantiates variables with single values left in their domains before variables with a hoi e of values (Harali k & Elliot, 1980).\nTheorem 10 On a permutation problem:\nMGAC\n8\n! MAC\n6= 6=\n$ MAC\n6=\n$ MAC ! MAC\n6=\n# # # #\nMGAC\n8\n! DP\n6= 6=\n$ DP\n6=\n$ DP\n! DP\n6=\nl l l l\nMGAC\n8\n! FC\n6= 6=\n$ FC\n6=\n$ FC\n! FC\n6=\nProof: DP\n6=\n$ FC\n6=\nis a spe ial ase of Theorem 14 (Walsh, 2000), whilst MAC\n6=\n! FC\n6=\nis a spe ial ase of Theorem 15.\nTo show DP $ FC suppose unit propagation sets a literal l. There are four ases. In\nthe rst ase, a lause of the form X\ni1\n_ : : : _X\nin\nhas been redu ed to an unit. That is, we\nhave one value left for a primal variable. The fail rst heuristi in FC pi ks this last value to instantiate. In the se ond ase, a lause of the form :X\nij\n_ :X\nik\nfor j 6= k has been\nredu ed to an unit. This ensures that no primal variable gets two values. The FC algorithm trivially never tries two simultaneous values for a primal variable. In the third ase, a lause of the form :X\nij\n_ :X\nkj\nfor i 6= k has been redu ed to an unit. This ensures that no dual\nvariable gets two values. Again, the FC algorithm trivially never tries two simultaneous values for a dual variable. In the fourth ase, X\n1j\n_ : : : _X\nnj\nhas been redu ed to an unit.\nThat is, we have one value left for a dual variable. A fail rst heuristi in FC pi ks this last value to instantiate. Hen e, given a suitable bran hing heuristi , the FC algorithm tra ks the DP algorithm. To show the reverse, suppose forward he king removes a value. There are two ases. In the rst ase, the value i is removed from a dual variable d\nj\ndue to\nsome hannelling onstraint. This means that there is a primal variable x\nk\nwhi h has been\nset to some value l 6= j. Unit propagation on :X\nkl\n_ :X\nkj\nsets X\nkj\nto false, and then on\n:X\nij\n_:X\nkj\nsets X\nij\nto false as required. In the se ond ase, the value i is removed from a\ndual variable d\nj\n, again due to a hannelling onstraint. The proof is now dual to the rst\nase.\nTo show MAC ! DP , we use the fa t that MAC dominates FC and FC $ DP . To show stri tness, onsider a 3-variable permutation problem with additional binary onstraints that rule out the same value for all 3 primal variables. Enfor ing AC on the\nhannelling onstraints auses a domain wipeout on the dual variable asso iated with this\nvalue. As there are no unit lauses, DP does not immediately solve the problem.\nTo show DP ! DP\n6=\n, we note that the hannelling SAT model ontains more lauses.\nHen e, it dominates the primal SAT model. To show stri tness, onsider a four variable permutation problem with three additional binary onstraints that if x\n1\n= 1 then x\n2\n= 2,\nx\n3\n= 2 and x\n4\n= 2 are all ruled out. Consider bran hing on x\n1\n= 1. Unit propagation on\nboth models sets X\n12\n, X\n22\n, X\n32\n, X\n42\n, X\n21\n, X\n31\nand X\n41\nto false. On the hannelling SAT\nmodel, unit propagation against the lause X\n12\n_X\n22\n_X\n32\n_X\n42\nthen generates an empty\nlause. By omparison, unit propagation on the primal SAT model does no more work. 2"}, {"heading": "7. Asymptoti Comparison", "text": "The previous results tell us nothing about the relative ost of a hieving these lo al onsisten ies. Asymptoti analysis adds detail to the results. We an a hieve GAC\n8\nin O(n\n4\n)\ntime (R egin, 1994). AC on binary onstraints an be a hieved in O(ed\n2\n) where e is the\nnumber of onstraints and d is their domain size. As there are O(n\n2\n) hannelling on-\nstraints, AC naively takes O(n\n4\n) time. However, by taking advantage of the fun tional\nnature of hannelling onstraints, we an redu e this to O(n\n3\n) using the AC-5 algorithm\n(Hentenry k, Deville, & Teng, 1992). AC\n6=\nalso naively takes O(n\n4\n) time as there are O(n\n2\n)\nbinary not-equals onstraints. However, we an take advantage of the spe ial nature of a binary not-equals onstraint to redu e this to O(n 2 ) as ea h not-equals onstraint needs to be made AC just on e. We have proved that GAC\n8\n! AC ! AC\n6=\nand greater pruning\npower is re e ted in higher worst ase omplexity (O(n\n4\n), O(n\n3\n), O(n\n2\n) respe tively). Thus\nwe still need to run experiments to see if the additional pruning outweighs the potentially higher ost."}, {"heading": "8. Experimental Comparison", "text": "We ran a wide variety of experiments to explore the signi an e of these theoreti al and asymptoti di eren es. For example, even though binary not-equals onstraints do less pruning than the hannelling onstraints, they might still speed up sear h by pruning qui ker. We limit the rst set of experiments to a stati variable and value ordering as we wish to on rm the theoreti al results, and these are limited either to stati orderings or to a restri ted lass of dynami variable and value orderings in whi h we make \\equivalent\" bran hing de isions in the di erent sear h trees (Ba hus et al., 2002).\nAs explained before, many onstraint toolkits support hannelling with e\u00c6 ient global onstraints. For example, ILOG Solver has the Il Inverse onstraint, and the Si stus nite domain onstraint library has the assignment predi ate. Both perform a level of pruning whi h appears to be equivalent to enfor ing AC on the expli it hannelling onstraints. We therefore ompared this in our experiments to AC on the binary not-equals onstraints and GAC on the all-di erent onstraint. All the models are implemented in Solver 5.300, and are available via CSPLib. We lexi ographi ally order the variables and assign the values in numeri al order. We therefore only bran h on primal variables. As we observe very similar results on a range of permutation problems, we only show here results for Langford's problem.\nIn Table 3, we ompare the various models of a permutation when nding the rst solution to two instan es of Langford's problem. In Table 4, we ompare the same models when nding all solutions or proving that there are no solutions, for four instan es of Langford's problem. Only L(3,9) and L(3,10) in this table have any solutions. The experimental results on rm our theoreti al ndings. First, enfor ing GAC on an all-di erent\nonstraint does the most pruning, whilst enfor ing AC on the binary not-equals onstraints does the least, and enfor ing AC on the hannelling onstraints is in between. Runtimes are similarly ordered. Se ond, adding the primal or dual binary not-equals onstraints to the hannelling onstraints does not bring any more pruning, and merely adds overhead to the runtime. Third, adding extra onstraints to the primal or dual all-di erent onstraint a hieves the same amount of pruning as the all-di erent onstraint on its own, and again just adds overhead to the runtime."}, {"heading": "9. Dynami Variable And Value Ordering", "text": "The experimental results in the last se tion might seem to have settled the matter of how to model permutation problems. Enfor ing GAC on a single all-di erent onstraint always gave the smallest sear h trees and runtimes. However, this ignores a signi ant potential advantage of hannelling into a dual model. Dynami variable and value ordering heuristi s may be able to exploit the primal and dual viewpoints of a permutation to make better de isions. This is not a topi that an be easily addressed theoreti ally. However, the experimental results given in this se tion show that variable and value ordering heuristi s\nan pro t greatly from multiple viewpoints.\nA variable ordering heuristi like smallest domain is usually justi ed in terms of a failrst prin iple: we have to pi k eventually all the variables, so it is wise to hoose one that is hard to assign, giving us hopefully mu h onstraint propagation and a small sear h tree. A value ordering heuristi like maximum promise (Geelen, 1992) is usually justi ed in terms of a su eed- rst prin iple: we pi k a value likely to lead to a solution, so redu ing the risk of ba ktra king and trying one of the alternative values. In a permutation problem, we an bran h on the primal or the dual variables or on both. We shall show here that fail- rst on one viewpoint is ompatible with su eed- rst on the dual. To do so, we onsider the following heuristi s.\nSmallest domain, SD(p+d) : hoose the primal or the dual variable with the smallest\ndomain, and hoose the values in numeri order.\nPrimal smallest domain, SD(p) : hoose the primal variable with the smallest domain,\nand hoose the values in numeri order.\nDual smallest domain, SD(d) : hoose the dual variable with the smallest domain, and\nhoose the values in numeri order.\nDouble smallest domain, SD\n2\n(p+d) : hoose the primal/dual variable with the small-\nest domain, and hoose the value whose dual/primal variable has the smallest domain.\nPrimal double smallest domain, SD\n2\n(p) : hoose the primal variable with the small-\nest domain, and hoose the value whose dual variable has the smallest domain.\nDual double smallest domain, SD\n2\n(d) : hoose the dual variable with the smallest\ndomain, and hoose the value whose primal variable has the smallest domain.\nThe smallest domain heuristi on the dual has been used as a value ordering heuristi\nin a number of experimental studies (Jourdan, 1995; Cheng et al., 1999; Smith, 2000). The following argument shows that the double smallest domain heuristi s are ompatible with the fail rst prin iple for variable ordering and su eed rst for value ordering. Suppose we assign the primal value j to the primal variable x\ni\n(an analogous argument an be given if\nwe bran h on a dual variable). Constraint propagation will prune the primal value j from the other primal variables, and the dual value i from the other dual variables. Constraint propagation may do more than this if we have an all-di erent onstraint or hannelling\nonstraints. However, to a rst approximation, this is a reasonable starting point. The su eed rst value ordering heuristi omputes the \\promise\" of the di erent values by multiplying together the domain sizes of the uninstantiated variables (Geelen, 1992). Any term in this produ t is un hanged if j or i, depending on whether this is a primal or dual variable, does not o ur in the domain and is redu ed by 1 if j or i o urs. The produ t is likely to be maximized by ensuring we redu e as few terms as possible. That is, by ensuring j and i o ur in as few domains as possible. That is d\nj\nand x\ni\nhave the smallest domains\npossible. Hen e double smallest domain will bran h on the variable with smallest domain and tend to assign it the value with most promise.\nWe now ompare these heuristi s in an extensive set of experiments. The hypothesis we wish to test is that bran hing heuristi s an pro t from multiple viewpoints. We use the following olle tion of permutation problems in addition to Langford's problem:\nQuasigroup existen e problem: An orderm quasigroup is a Latin square of sizem, that\nis, an m m multipli ation table in whi h ea h element o urs in every row and every\nolumn. Quasigroup existen e problems determine the existen e or non-existen e of\nquasigroups of a given size with additional properties:\nQG3(m): denotes quasigroups of order m for whi h (a b) (b a) = a.\nQG4(m): denotes quasigroups of order m for whi h (b a) (a b) = a.\nWe additionally demand that the quasigroup is idempotent, i.e. a a = a for every element a. The problem is prob003 in CSPLib.\nGolomb rulers problem: A Golomb ruler onsists of n marks arranged along a ruler of\nlength m su h that the distan es between any pair of marks form a permutation. The problem is prob006 at CSPLib. In our experiments we spe ify the known optimal length and nd all optimal solutions.\nSport s heduling problem: The problem onsists of s heduling games between n teams\nover n 1 weeks when n is even (n weeks when n is odd). Ea h week is divided into n=2 periods when n is even ((n 1)=2 when n is odd). Ea h game is omposed of two slots, \"home\" and \"away\", where one team plays home and the other team plays away. The obje tive is to s hedule a game for ea h period of every week su h that: every team plays against every other team; a team plays exa tly on e a week when we have an even number of teams, and at most on e a week when we have an odd\nnumber of weeks; and a team plays at most twi e in the same period over the ourse of the season. The problem is prob026 in CSPLib.\nMagi squares problem: An order n magi square is an n by n matrix ontaining the\nnumbers 1 to n\n2\n, with the sum of ea h row, olumn, and diagonal being equal. The\nproblem is prob019 in CSPLib."}, {"heading": "9.1 Langford's Problem", "text": "The results are given in Table 5. We make a number of observations. Enfor ing AC on the primal not-equals model (\\6=\") gives the worst results (as it does in almost all the subsequent problem domains). We will not therefore dis uss it further. The best runtimes are obtained with the model, heuristi SD(p+d), i.e. from enfor ing a permutation by the hannelling onstraints alone and hoosing the variable with smallest domain, whether primal or dual. Using just the primal or just the dual variables as de ision variables tends to in rease runtimes. The bran hing heuristi does indeed pro t from the multiple viewpoints. Note that the 8 model is no longer the best strategy, in terms of either failures or runtimes, as it was in Table 4. This is despite the fa t that it has the strongest propagator. This model has only one viewpoint and this hinders the bran hing heuristi . Note also that the smallest sear h trees (but not runtimes) are obtained with the 8 model that ombines the all-di erent onstraint on the primal with the hannelling onstraints between the primal and dual, when we use both primal and dual variables as de ision variables. This ombination gives the bene ts of the strongest propagator and a dual viewpoint for the bran hing heuristi ."}, {"heading": "9.2 Quasigroups", "text": "The quasigroup existen e problem an be modelled as a multiple permutation problem with 2n interse ting permutation onstraints. We introdu e a variable for ea h entry in the multipli ation table of the quasigroup. We then post permutation onstraints on the variables of ea h row and ea h olumn. In Tables 6 and 7, we give results for two families of problems. As before, the 6= model gives the worst performan e, and by a onsiderable margin for the larger instan es. For QG3, all the other models and bran hing heuristi s give broadly similar performan e. A dual viewpoint, either by itself or in ombination with the primal viewpoint, does not o er any advantage, but does not hurt mu h either. For QG4, in Table 7, all the models and bran hing heuristi s are ompetitive, ex ept for the 6= model and the heuristi s that bran h only on the dual variables."}, {"heading": "9.3 Golomb Rulers", "text": "To model the Golomb rulers problem as a permutation problem, we introdu e a variable for ea h pairwise distan e between marks. Sin e we may have more values than variables, we introdu e additional variables to ensure that there are as many variables as values, as suggested by Geelen (1992). We an then post a permutation onstraint on this enlarged set of variables. In Table 8, we give results for nding all optimal length rulers for four instan es: Golomb(n;m) means the problem of nding a Golomb ruler of (minimal) length m with n marks. Despite the fa t that it has the strongest propagator, the 8 model is not\nompetitive on the larger instan es. Model and heuristi SD(p+d) gives the best runtimes\nfor the larger instan es, whereas adding the all-di erent onstraint (model 8 , heuristi SD(p+d)) gives the least sear h. Being for ed to bran h on just the primal variables hurts the bran hing heuristi ."}, {"heading": "9.4 Sport S heduling", "text": "Unlike the previous problems, we nd only the rst solution to the sports s heduling problem. This leads to mu h greater variation in performan e between the di erent models. We report results in Table 9. Good runtimes are obtained with the and 8 models, using the dual variables as de ision variables, either on their own or in ombination with the primal variables."}, {"heading": "9.5 Magi Squares", "text": "We model the order n magi square problem with a n by n matrix of variables whi h take values from 1 to n 2 . We then post a permutation onstraint on all the variables in the matrix, and sum onstraints on the rows, olumns and diagonals. Results are given in Table 10. Again, nding just the rst solution leads to wide variation in performan e between the models. Using only the dual variables as de ision variables is a bad hoi e, but the dual variables are helpful if used as de ision variables in ombination with the primal variables. For the largest instan e solved, the best strategy is the double smallest domain heuristi\non model or model 8 . The former explores a larger sear h tree, but does so very slightly qui ker than the latter.\nTo on lude, these results show that dynami bran hing heuristi s an be signi antly more e e tive when they look at both viewpoints of a permutation. Indeed, bran hing on primal or dual variables was often more important to our results than using a stronger propagator. For example, enfor ing GAC on an all-di erent onstraint, and sear hing just on the primal variables, often gave worse performan e than enfor ing AC on the hannelling onstraints, and thus being able to bran h on both sets of variables. In addition, in some problem lasses, the double smallest domain bran hing heuristi o ered the best performan e. As we have argued, this heuristi is onsistent with the fail rst prin iple for variable ordering and the su eed rst prin iple for value ordering.\nIt is worth noting that the results of our experiments run ounter to the usual expe tations of value ordering. We found that double smallest domain (that is, smallest domain for both variable ordering and value ordering) gave di erent numbers of ba ktra ks to smallest domain variable ordering, even when nding all solutions. It is generally thought that value ordering makes no di eren e to the overall sear h e ort when nding all solutions, if\nhronologi al ba ktra king is used. Indeed, the argument given earlier for su eed rst as a value ordering prin iple is based on nding only one solution: if we hoose the right value,\nwe an avoid ba ktra king to hoose another one. If we want to nd all solutions, we shall have to ba ktra k to try all the alternative values anyway. Smith (2000) shows how value ordering an make a di eren e to the sear h in Langford's problem, even when nding all solutions. In brief, when we ba ktra k having tried the assignment V ar = value, we an post the onstraint V ar 6= value. In some ases, propagation may now lead to immediate failure. A good ordering for the values an therefore save sear h."}, {"heading": "10. Inje tive Mappings", "text": "In many problems, variables may be onstrained to take unique values, but we have more values than variables. That is, we are looking for an inje tive mapping from the variables to the values. For example, an optimal 5-ti k Golomb ruler has ti ks at the marks 0, 1, 4, 9, and 11. The 10 inter-ti k distan es are all di erent but do not form a permutation as the distan e 6 is absent. Finding a 5-ti k Golomb ruler of length 11 an be modelled as a permutation problem by introdu ing an additional 11th variable to take on the missing value 6. Indeed, this is the method we use to model the problem in the last se tion. However, there are a number of alternative ways to model an inje tion from n variables into m values whi h we explore here.\nFor example, there are two simple primal models of an inje tion. In ea h we have n primal variables whi h take one of m possible values. In the primal all-di erent model (denoted by \\8\"), we simple post a single all-di erent onstraint on the primal variables.\nIn the primal not-equals model (denoted by \\6=\") we post binary not-equals onstraints between every two distin t primal variables. We an also use dual models. For example, in the dual not-equals model, we have m dual variables, ea h with a domain of m possible values (m n of these are dummy values), and binary not-equals onstraints between ea h pair of dual variables.\nWe will onsider three di erent ombined models whi h hannel between primal and dual\nmodels. In the rst ombined model (denoted by \\\n1\n\"), we have hannelling onstraints\nof the form x\ni\n= j implies d\nj\n= i and no additional dummy values for the dual variables.\nIn the se ond ombined model (denoted by \\\n2\n\"), the dual variables have m n extra\ndummy values, and we have hannelling onstraints of the form x\ni\n= j i d\nj\n= i. In\nthe third ombined model (denoted by \\\n3\n\"), the dual variables have just a single extra\ndummy value, and we have hannelling onstraints of the form x\ni\n= j i d\nj\n= i but only\nwhen j is not equal to the dummy value. Note that any of these hannelling onstraints alone (without additional onstraints on the primal or dual variables) is enough to de ne an inje tion.\nWe an also model an inje tion by introdu ing m n dummy primal variables and ensuring that this extended set of variables forms a bije tion. This ase is, however, overed by our earlier results on permutations."}, {"heading": "10.1 Ar -Consisten y", "text": "We rst prove that, with respe t to ar - onsisten y, the rst type of hannelling onstraints are as tight as the primal not-equals onstraints, but less tight than the primal all-di erent\nonstraint. Then, we prove that the se ond type of hannelling onstraints are as tight as the primal not-equals onstraints, but less tight than the hannelling and dual notequals onstraints, whi h are less tight than the primal all-di erent onstraint. Finally, we prove that the third type of hannelling onstraints are as tight as the primal not-equals\nonstraints but less tight than the primal all-di erent onstraint. This means that the three types of hannelling onstraints give the same pruning when we enfor e ar - onsisten y as the primal not-equals onstraints. Note, however, that we get more pruning when we add the dual not-equals onstraints (but not the primal not-equals onstraints). This is di erent to permutations where neither the addition of the primal nor the dual not-equals onstraints to the hannelling onstraint gave more pruning.\nTheorem 11 On an inje tion problem:\nGAC\n8\n! AC\n6=\n1\n$ AC\n1\n$ AC\n6=\nProof: To show GAC\n8\n! AC\n1\n, onsider an inje tion problem whose primal all-di erent\nonstraint is GAC. Suppose the hannelling onstraint between x\ni\nand d\nj\nwas not AC.\nThen x\ni\nis set to j and d\nj\nhas i eliminated from its domain. But this is not possible by\nthe onstru tion of the primal and dual model. Hen e the hannelling onstraints are all AC. To show stri tness, onsider an inje tion problem in whi h x\n1\n= x\n2\n= x\n3\n= f1; 2g and\nd\n1\n= d\n2\n= d\n3\n= d\n4\n= f1; 2; 3g. This is AC\n1\nbut not GAC\n8\n.\nTo show AC\n1\n$ AC\n6=\n, suppose that the hannelling onstraints are AC. Consider a\nnot-equals onstraint, x\ni\n6= x\nj\n(where i 6= j) that is not AC. Now, x\ni\nand x\nj\nmust have the\nsame singleton domain, fkg. Consider the hannelling onstraint between x\ni\nand d\nk\n. The\nonly AC value for d\nk\nis i. Similarly, the only AC value for d\nk\nin the hannelling onstraint\nbetween x\nj\nand d\nk\nis j. But i 6= j. Hen e, d\nk\nhas no AC values. This is a ontradi tion as\nthe hannelling onstraints are AC. Hen e all not-equals onstraints are AC. Now suppose that the not-equals onstraints are AC. Consider a hannelling onstraint between x\ni\nand\nd\nj\nthat is not AC. Then x\ni\nis set to j and d\nj\nhas i eliminated from its domain. But for i\nto be eliminated from the domain of d\nj\n, some other primal variable, say x\nk\nwhere k 6= i, is\nset to j, whi h eliminate j from the domain of x\ni\n(sin e the not-equals onstraints are AC).\nHen e, it is not possible to set x\ni\nto j and d\nj\nhas i eliminated from its domain. Thus, all\nhannelling onstraints are AC. 2\nTheorem 12 On an inje tion problem:\nGAC\n8\n! AC\n6=\n2\n6=\n$ AC\n2\n6=\n! AC\n2\n$ AC\n6=\nProof: To show GAC\n8\n! AC\n2\n6=\n, onsider an inje tion problem whi h is GAC\n8\n. Suppose\nthe not-equal onstraint between d\ni\nand d\nj\nwas not AC. Then, in the rst ase, d\ni\n= d\nj\n= k\nand k < n + 1, whi h is impossible be ause the hannelling onstraints x\nk\n= i i d\ni\n= k\nand x\nk\n= j i d\nj\n= k are AC. In the se ond ase, k would be greater than n, whi h\nis impossible by onstru tion of the primal and dual model. Hen e all binary not-equal\nonstraints on the dual variables are AC. To show stri tness, onsider an inje tion in whi h\nx\n1\n= x\n2\n= x\n3\n= f1; 2g, d\n1\n= d\n2\n= f1; 2; 3; 4; 5g, and d\n3\n= d\n4\n= d\n5\n= f4; 5g. This is AC\n2\n6=\nd\nbut not GAC\n8\n.\nTo show AC\n2\n6=\n! AC\n2\n, by monotoni ity, we have AC\n2\n6=\n,! AC\n2\n. To show stri tness,\nonsider an inje tion problem in whi h x\n1\n= x\n2\n= x\n3\n= f1; 2g, and d\n1\n= d\n2\n= f1; 2; 3; 4g,\nand d\n3\n= d\n4\n= f4g. This is AC\n2\nbut not GAC\n2\n6=\n.\nTo show AC\n2\n$ AC\n6=\n, suppose that the hannelling onstraints are AC. Consider a\nnot-equals onstraint, x\ni\n6= x\nj\n(where i 6= j) that is not AC. Now, x\ni\nand x\nj\nmust have the\nsame singleton domain, fkg. Consider the hannelling onstraint between x\ni\nand d\nk\n. The\nonly AC value for d\nk\nis i. Similarly, the only AC value for d\nk\nin the hannelling onstraint\nbetween x\nj\nand d\nk\nis j. But i 6= j. Hen e d\nk\nhas no AC values. This is a ontradi tion as\nthe hannelling onstraints are AC. Hen e all not-equals onstraints are AC. To show the reverse, suppose that the not-equals onstraints are AC. Consider a hannelling onstraint, x\ni\n= j i d\nj\n= i, that is not AC. Then, either x\ni\nis set to j and d\nj\nhas i eliminated from its\ndomain, or d\nj\nis set to i and x\ni\nhas j eliminated from its domain. But, for i to be eliminated\nfrom the domain of d\nj\n, some other primal variable, say x\nk\nwhere k 6= i, is set to j, whi h\nwill eliminate j from the domain of x\ni\n(sin e the not-equals onstraints are AC). Hen e it\nis not possible to set x\ni\nto j and d\nj\nhas i eliminated from its domain. For d\nj\nto be set to\ni, all the other values must be removed from its domain, but there is no way to remove any of the values bigger than n from the domain of d\nj\n, be ause at most we have n primal\nvariables. Thus, all hannelling onstraints are AC. 2\nTheorem 13 On an inje tion problem:\nGAC\n8\n! AC\n3\n$ AC\n6=\nProof: To show GAC\n8\n! AC\n3\n, onsider an inje tion in whi h x\n1\n= x\n2\n= x\n3\n= f1; 2g,\nx\n4\n= f1; 2; 3; 4; 5g, d\n1\n= d\n2\n= f1; 2; 3; 4; 5g, and d\n3\n= d\n4\n= d\n5\n= f4; 5g. This is GAC\n3\njW j\n,\nbut not GAC\n8\n.\nTo show AC\n3\n$ AC\n6=\n, suppose that the hannelling onstraints are AC. Consider a\nnot-equals onstraint, x\ni\n6= x\nj\n(where i 6= j) that is not AC. Now, x\ni\nand x\nj\nmust have the\nsame singleton domain, fkg. Consider the hannelling onstraint between x\ni\nand d\nk\n. The\nonly AC value for d\nk\nis i. Similarly, the only AC value for d\nk\nin the hannelling onstraint\nbetween x\nj\nand d\nk\nis j. But i 6= j. Hen e d\nk\nhas no AC values. This is a ontradi tion as\nthe hannelling onstraints are AC. Hen e all not-equals onstraints are AC. To show the reverse, suppose that the not-equals onstraints are AC. Consider a hannelling onstraint, x\ni\n= j i d\nj\n= i, that is not AC. Then, either x\ni\nis set to j and d\nj\nhas i eliminated from its\ndomain, or d\nj\nis set to i and x\ni\nhas j eliminated from its domain. But, for i to be eliminated\nfrom the domain of d\nj\n, some other primal variable, say x\nk\nwhere k 6= i, is set to j, whi h\nwill eliminate j from the domain of x\ni\n(sin e the not-equals onstraints are AC). Hen e it\nis not possible to set x\ni\nto j and d\nj\nhas i eliminated from its domain. For d\nj\nto be set to\ni, all the other values must be removed from its domain, but there is no way to remove any of the values bigger than n from the domain of d\nj\n, be ause we have at most n primal\nvariables. Thus, all hannelling onstraints are AC. 2"}, {"heading": "10.2 Asymptoti Comparison", "text": "The previous results ompare the di erent models with respe t to the amount of pruning a hieved. We an, for example, now rule out a model like \\6=\n1\n\" when enfor ing AC sin e\nwe get just as mu h pruning at less ost on the model\n1\n. However, these results do not\ndistinguish between, say, a model with primal not-equals onstraints, or any of the ombined models\n1\n,\n2\nor\n3\n. We get the same pruning in all four. We an add some details to these\nresults by omparing the asymptoti behaviour.\nThe relative ost of a hieving GAC\n8\nis O(n\n2\nm\n2\n), where n is the number of variables\nand m is their domain size. AC\n1\n, AC\n2\n, and AC\n3\nnaively take O(nm\n3\n) time. However, by\ntaking advantage of the fun tional nature of hannelling onstraints, we an redu e this to O(nm 2 ) for\n2\nand\n3\nand O(nm) for\n1\n. We proved in Theorem 11 that GAC\n8\n! AC\n1\n$ AC\n6=\nand their osts are O(n\n2\nm\n2\n), O(nm), and O(n\n2\n) respe tively. Asymptoti analy-\nsis shows that enfor ing AC\n1\nhas asymptoti ally slightly more ost than enfor ing AC\n6=\n.\nHowever, having the dual variables ould be advantageous in onjun tion with variable and value ordering heuristi s. We also proved in Theorem 12 that GAC\n8\n! AC\n2\n6=\n! AC\n2\n$ AC\n6=\nand their osts are O(n\n2\nm\n2\n), O(nm\n2\n), O(nm\n2\n), and O(n\n2\n) respe tively. Asymp-\ntoti analysis shows that the hannelling onstraints are more ostly than the not-equals\nonstraints and bring no more pruning. When we add not-equals onstraints on the dual variables, the overall asymptoti ost is still the same as the hannelling onstraints alone, but we a hieve more pruning. It is therefore a model worth onsidering. Finally, in Theorem 13 we proved that GAC\n8\n! AC\n3\n$ AC\n6=\nand their osts are O(n\n2\nm\n2\n), O(nm\n2\n), and\nO(n\n2\n) respe tively. Again, asymptoti analysis shows that hannelling onstraints are more ostly than the not-equals onstraints and bring no more pruning. Maintaining generalised\nar - onsisten y on the all-di erent onstraint is again the most ostly.\nTo on lude, these results show that, as might be expe ted, we in general get more pruning if we in rease the asymptoti ost. Models worth onsidering are the primal notequals model,\n2\n6=, and the primal all-di erent model. Ea h gives a di erent amount of\npruning at a di erent asymptoti ost. We might also onsider\n1\ninstead of the primal\nnot-equals model sin e, whilst it is asymptoti ally slightly more expensive, it lets us bran h on dual variables."}, {"heading": "10.3 Experiments With Stati Orderings", "text": "We again ran some experiments to explore the signi an e of these theoreti al and asymptoti di eren es. Table 11 gives results on some instan es of the Golomb rulers problem using a stati variable ordering. The experiments are again onsistent with the theoreti al results. First, enfor ing GAC on an all-di erent onstraint a hieves the most pruning and has the smallest runtimes. Se ond, on these problems instan es, enfor ing AC on the binary not-equals onstraints a hieves the same amount of pruning as maintaining AC on the hannelling onstraints. In addition, enfor ing AC on the hannelling onstraints takes longer\nto a hieve. Third, adding the hannelling onstraints to the primal all-di erent onstraint does not in rease pruning, and merely adds overhead to the runtime."}, {"heading": "10.4 Dynami Variable And Value Ordering Heuristi s", "text": "We also explored the advantage of multiple viewpoints of inje tion problems for dynami variable and value ordering heuristi s. In Table 12, we give results for Golomb ruler\nproblems. We observe that the primal all-di erent model is not ompetitive on the larger problems. The best runtimes are obtained with the hannelling onstraints (and a primal all-di erent onstraint) using the smallest domain or the double smallest domain heuristi on both sets of variables or on the dual variables. Being for ed to bran h on just the primal variables hurts the bran hing heuristi . A dual viewpoint appears to o er the bran hing heuristi very signi ant advantages on this problem.\nIn Table 13, we give results for the sport s heduling problem when there are an odd number of weeks. Despite the fa t that it has the strongest propagator, the primal alldi erent model is not ompetitive on the larger problems. The best runtimes are obtained with the hannelling onstraints and bran hing on the primal or dual variable with smallest domain. As with the Golomb ruler problem, being for ed to bran h on just the primal variables hurts the bran hing heuristi . A dual viewpoint appears to o er the bran hing heuristi very signi ant advantages on this problem. Note also that on the largest instan e, the smallest sear h tree is obtained with the hannelling and the all-di erent onstraints, bran hing on the primal or dual variable with smallest domain. To on lude, dynami bran hing heuristi s an again be signi antly more e e tive when they look at both the primal and dual viewpoint."}, {"heading": "11. Related Work", "text": "Cheng et al. (1999) studied modelling and solving the n-queens problem, and a nurse rostering problem using hannelling onstraints. They show that hannelling onstraints in rease the amount of onstraint propagation. They onje ture that the overheads asso iated with\nhannelling onstraints will pay o on problems whi h require large amounts of sear h, or lead to thrashing behaviour. They also show that hannelling onstraints open the door to interesting value ordering heuristi s. For permutation problems, a similar idea was previously proposed by Geelen (1992).\nChoi and Lee (2002) fo used on the study of ombined models of permutation problems. Their study in luded not only the permutation onstraints, but also all the other onstraints of the problem. Their omparison measure is an extension of the propagator omparison approa h of S hulte and Stu key (2001), whi h measures the di erent ombined models with respe t to their ability to prune the sear h spa e with onstraint propagation. However, their measure is independent of the level of onsisten y maintained on the onstraints and depends upon the set of orre t propagators instead. They theoreti ally dis over the riteria under whi h minimal ombined models have the same pruning power as full ombined models and empiri ally demonstrate the results on di erent permutation problems.\nBa hus et al. (2002) formally studied the e e tiveness of two modelling te hniques that transform a non-binary CSP into an equivalent binary CSP, namely, the dual transformation and the hidden one. An original model of the problem, its dual and its hidden transformations are ompared with respe t to the performan e of a number of lo al onsisten y te hniques in luding ar - onsisten y, and with respe t to the hronologi al ba ktra king algorithm, FC, and MAC.\nBorret and Tsang (1999) developed a framework for systemati model sele tion. They demonstrated their approa h on the evaluation of adding a ertain lass of implied onstraints to an original model. The evaluation heuristi used is based on an extension of the theoreti al omplexity estimates proposed by Nadel (1990). Their experimental results show that the approa h is promising. However, with this approa h one needs the instan e data to be an expli it input to the methods."}, {"heading": "12. Con lusions", "text": "We have performed an extensive study of dual modelling on permutation and inje tion problems. To ompare models, we de ned a measure of onstraint tightness parameterized by the level of lo al onsisten y being enfor ed. For permutation problems and enfor - ing ar - onsisten y, we proved that a single primal all-di erent onstraint is tighter than\nhannelling onstraints, but that hannelling onstraints are tighter than primal not-equals onstraints. The reason for this di eren e is that the primal not-equals onstraints dete t singleton variables (i.e. those variables with a single value), the hannelling onstraints dete t singleton variables and singleton values (i.e. those values whi h o ur in the domain of a single variable), whilst the primal all-di erent onstraint dete ts global onsisten y (whi h in ludes singleton variables, singleton values and many other situations). For lower levels of lo al onsisten y (e.g. that maintained by forward he king), hannelling onstraints remain tighter than primal not-equals onstraints. However, for ertain higher levels of\nlo al onsisten y like path inverse onsisten y, hannelling onstraints are in omparable to primal not-equals onstraints. For inje tion problems, we proved that, with respe t to ar -\nonsisten y, a single primal all-di erent onstraint is tighter than hannelling onstraints together with the dual not-equals onstraints, but that the hannelling onstraints alone are as tight as the primal not-equals onstraints. The asymptoti analysis allowed us to redu e further the number of models that might be worth onsidering. Experimental results on a wide range of problems supported these theoreti al results. For example, adding binary notequals onstraints to the hannelling onstraints does not in reasing pruning, and merely adds overhead to the runtimes. However, the experimental results also demonstrated the very signi ant bene ts of being able to bran h on both primal and dual variables. In many\nases, we obtained the best runtimes with just hannelling onstraints and a bran hing\nheuristi that looked at both primal and dual viewpoints.\nWhat general lessons an be learnt from this study? First, there are many possible models of even a simple problem like nding a permutation or an inje tion. In addition, no one model is best in all situations. We therefore need to support the user in modelling even simple problems. Se ond, it often pays to onstru t redundant models with multiple viewpoints of the same problem. Despite the overheads, the ability to bran h on dual variables an be very bene ial. Bran hing heuristi s that onsider multiple viewpoints\nan be very e e tive. Third, the additional onstraint propagation provided by global onstraints like all-di erent may not justify their ost. We often saw better performan e when we threw out the all-di erent onstraint. Fourth, our measure of onstraint tightness\nan be used to ompare di erent onstraint models. However, this measure an only reje t ertain models on the basis that they add overhead. We still must run experiments to determine if the additional onstraint propagation provided by tighter models is worth the\nost of this onstraint propagation. Ultimately, the question being addressed is entral to\nmany problems in arti ial intelligen e: the trade-o between sear h and inferen e."}, {"heading": "A knowledgements", "text": "B. Hni h and T. Walsh are urrently supported by S ien e Foundation Ireland (SFI) and an ILOG software grant. T. Walsh was also supported by an EPSRC advan ed resear h fellowship. We thank the other members of the APES resear h group (http://www.d s.stand.a .uk/~apes) for helpful dis ussions, and espe ially Ian Gent who en ouraged us to write this paper.\nReferen es\nBa hus, F., Chen, X., van Beek, P., &Walsh, T. (2002). Binary vs. Non-Binary Constraints.\nArti ial Intelligen e, 140 (1-2), 1{37.\nBejar, R., & Manya, F. (2000). Solving the round robin problem using propositional logi .\nIn Pro eedings of 17th National Conferen e on Arti ial Intelligen e, pp. 262{266. AAAI Press/The MIT Press.\nBessi ere, C., Meseguer, P., Freuder, E., & Larrosa, J. (1999). On forward he king for non-\nbinary onstraint satisfa tion. In Ja ar, J. (Ed.), Pro eedings of Fifth International\nConferen e on Prin iples and Pra ti e of Constraint Programming (CP99), pp. 88{ 102. LNCS 1713. Springer.\nBorrett, J., & Tsang, E. (1999). A ontext for onstraint satisfa tion problem formulation\nsele tion. Constraints, 6, 299{327.\nCheng, B., Choi, K., Lee, J., & Wu, J. (1999). In reasing onstraint propagation by redun-\ndant modeling: an experien e report. Constraints, 4, 167{192.\nChoi, C., & Lee, J. (2002). On the pruning behaviour of minimal ombined models for\npermutation CSPs. In Pro eedings of CP-2002 Workshop on Reformulating Constraint Satisfa tion Problems: Towards Systematisation and Automation.\nDebruyne, R., & Bessi ere, C. (1997). Some pra ti able ltering te hniques for the onstraint\nsatisfa tion problem. In Pro eedings of the 15th IJCAI, pp. 412{417. International Joint Conferen e on Arti ial Intelligen e.\nGeelen, P. (1992). Dual viewpoint heuristi s for binary onstraint satisfa tion problems. In\nPro eedings of the 10th ECAI, pp. 31{35. European Conferen e on Arti ial Intelligen e. Wiley.\nGent, I. (2002). Ar onsisten y in SAT. In van Harmelen, F. (Ed.), Pro eedings of ECAI-\n2002, pp. 121{125. IOS Press.\nGent, I., Stergiou, K., & Walsh, T. (2000). De omposable onstraints. Arti ial Intelligen e,\n123 (1-2), 133{156.\nGent, I., & Walsh, T. (1999). Csplib: a ben hmark library for onstraints. Te h. rep.,\nTe hni al report APES-09-1999. Available from http://d s.st-and.a .uk/~apes. A shorter version appears in Ja ar, J. (Ed.), Pro eedings of Fifth International Conferen e on Prin iples and Pra ti e of Constraint Programming (CP99), pp. 480{481. LNCS 1713. Springer.\nHarali k, R., & Elliot, G. (1980). In reasing tree sear h e\u00c6 ien y for onstraint satisfa tion\nproblems. Arti ial Intelligen e, 14, 263{313.\nHentenry k, P. V., Deville, Y., & Teng, C. (1992). A Generi Ar Consisten y Algorithm\nand its Spe ializations. Arti ial Intelligen e, 57, 291{321.\nJourdan, J. (1995). Con urrent Constraint Multiple Models in CLP and CC Languages:\nToward a Programming Methodology by Modeling. Ph.D. thesis, Denis Diderot University, Paris VII. Available as CMU-CS-91-120.\nMiller, J. (2002). Langford's problem.. Online des ription available at\nhttp://www.l ark.edu/~miller/langford.html.\nMorris, P. (1992). On the density of solutions in equilibrium points for the queens prob-\nlem. In Pro eedings of the 10th National Conferen e on AI, pp. 428{433. Ameri an Asso iation for Arti ial Intelligen e.\nNadel, B. (1990). Representation sele tion for onstraint satisfa tion: A ase study using\nn-Queens. IEEE Expert, 5, 16{23.\nProsser, P., Stergiou, K., & Walsh, T. (2000). Singleton onsisten ies. In De hter, R. (Ed.),\n6th International Conferen e on Prin iples and Pra ti es of Constraint Programming (CP-2000), pp. 353{368. LNCS 1894. Springer-Verlag.\nR egin, J. (1994). A ltering algorithm for onstraints of di eren e in CSPs. In Pro eedings of\nthe 12th National Conferen e on AI, pp. 362{367. Ameri an Asso iation for Arti ial Intelligen e.\nR egin, J., & Rueher, M. (2000). A global onstraint ombining a sum onstraint and dif-\nferen e onstraints. In De hter, R. (Ed.), Pro eedings of 6th International Conferen e on Prin iples and Pra ti e of Constraint Programming (CP2000), pp. 384{395. LNCS 1894. Springer.\nS hulte, C., & Stu key, P. (2001). When do bounds and domain propagation lead to the same\nsear h spa e. In Sondergaard, H. (Ed.), Pro eedings of 3rd International Conferen e on Prin iples and Pra ti e of De larative Programming (PPDP 2001), pp. 115{126. ACM Press.\nSmith, B., Stergiou, K., & Walsh, T. (2000). Using auxiliary variables and implied on-\nstraints to model non-binary problems. In Pro eedings of the 16th National Conferen e on AI, pp. 182{187. Ameri an Asso iation for Arti ial Intelligen e.\nSmith, B. (2000). Modelling a Permutation Problem. In Pro eedings of ECAI'2000 Work-\nshop on Modelling and Solving Problems with Constraints. Also available as Resear h Report from http://s om.hud.a .uk/sta /s ombms/papers.html.\nStergiou, K., & Walsh, T. (1999). The di eren e all-di eren e makes. In Pro eedings of\n16th IJCAI, pp. 414{419. International Joint Conferen e on Arti ial Intelligen e.\nWalsh, T. (2000). SAT v CSP. In De hter, R. (Ed.), 6th International Conferen e on\nPrin iples and Pra ti es of Constraint Programming (CP-2000), pp. 441{456. LNCS 1894. Springer-Verlag."}], "references": [], "referenceMentions": [], "year": 2013, "abstractText": "When writing a onstraint program, we have to hoose whi h variables should be the de ision variables, and how to represent the onstraints on these variables. In many ases, there is onsiderable hoi e for the de ision variables. Consider, for example, permutation problems in whi h we have as many values as variables, and ea h variable takes an unique value. In su h problems, we an hoose between a primal and a dual viewpoint. In the dual viewpoint, ea h dual variable represents one of the primal values, whilst ea h dual value represents one of the primal variables. Alternatively, by means of hannelling onstraints to link the primal and dual variables, we an have a ombined model with both sets of variables. In this paper, we perform an extensive theoreti al and empiri al study of su h primal, dual and ombined models for two lasses of problems: permutation problems and inje tion problems. Our results show that it often be advantageous to use multiple viewpoints, and to have onstraints whi h hannel between them to maintain onsisten y. They also illustrate a general methodology for omparing di erent onstraint models.", "creator": "dvips(k) 5.86 Copyright 1999 Radical Eye Software"}}}