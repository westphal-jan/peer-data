{"id": "1107.0098", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Jul-2011", "title": "A Probabilistic Attack on NP-complete Problems", "abstract": "Using the probability theory-based approach, this paper reveals the equivalence of an arbitrary NP-complete problem to a problem of checking whether a level hypersurface of a specifically constructed harmonic cost function (with all diagonal entries of its Hessian matrix equal to zero) intersects with a unit hypercube in many-dimensional Euclidean space. This connection suggests the possibility that methods of continuous mathematics can provide crucial insights into the most intriguing open questions in modern complexity theory. Here, we build upon the principle of continuous mathematics to investigate the existence of an infinite-dimensional space.\n\n\n\nFigure 1. A simplified and well-defined equation to a problem of applying a continuous mathematical solution to a problem of applying an arbitrary NP-complete problem to a problem of using a uniform-dimensional system. In this case, a constant number of dimensions of the given dimension will be calculated, in addition to being finite (i.e., infinitely smaller) by solving a linear equation (and the following mathematical formula for the constant is shown:\n$$ \\frac {x} = 4^2{x}^{5}^{6}^3 = 6$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\frac {x} = 4^2{x}^{5}^3 = 4$$$\nwhere \\", "histories": [["v1", "Fri, 1 Jul 2011 03:43:19 GMT  (950kb)", "http://arxiv.org/abs/1107.0098v1", "16 pages, 8 figures, 2 tables"], ["v2", "Thu, 21 Jul 2011 01:57:22 GMT  (942kb)", "http://arxiv.org/abs/1107.0098v2", "16 pages, 8 figures, 2 tables"], ["v3", "Thu, 2 Aug 2012 21:14:17 GMT  (1006kb)", "http://arxiv.org/abs/1107.0098v3", "16 pages, 8 figures, 2 tables"]], "COMMENTS": "16 pages, 8 figures, 2 tables", "reviews": [], "SUBJECTS": "cs.CC cs.AI cs.DM cs.DS", "authors": ["alexander y davydov"], "accepted": false, "id": "1107.0098"}, "pdf": {"name": "1107.0098.pdf", "metadata": {"source": "CRF", "title": "A Probabilistic Attack on NP-complete Problems", "authors": ["Alexander Y. Davydov"], "emails": ["alex.davydov@algoterra.com"], "sections": [{"heading": null, "text": "Key words: NP-complete, Harmonic cost function, Level hypersurface, Union bound, Universality"}, {"heading": "1 Introduction", "text": "Non-deterministic polynomial time complete (NP-complete) problems are of considerable theoretical and practical interest and play a central role in the theory of computational complexity in modern computer science. Currently, more than three thousand vital computational tasks in operations research, machine learning, hardware design, software verification, computational biology, and other fields have been shown to be NP-complete. The \u2018completeness\u2019 designates the property that, if an efficient (= polynomial-time) algorithm for solving any one of NP-complete problems could be found, then we would immediately have (as a minimum) an efficient algorithm for all problems in this class [1-4]. Despite persistent efforts by many talented researchers throughout several decades, it is not currently known whether NP-complete problems can be efficiently solved. An unproven conjecture broadly spread among complexity theorists is that such polynomial-time algorithm cannot exist. It is also a general belief that either proof or disproof of this conjecture can only be obtained through development of some new mathematical techniques. In the present paper, a novel approach to tackling NP-complete problems is proposed bringing a fresh perspective on the subject matter. More specifically, our approach takes the problem from the realm of discrete mathematics and reformulates it in the realm of continuous mathematics, where it is then treated using tools of mathematical analysis and probability theory. The main idea of the proposed method stems from recognizing that, owing to exponentially large solution space for whichever NP-complete problem, any prospective approach to solving it by examining solution candidates sequentially, one by one, is predestined to fail in yielding an efficient algorithm, regardless of how smart and sophisticated this approach is. Assume for a moment that an efficient algorithm for solving NP-complete problems does exist. Then we can only hope to discover it if, at the very minimum, we learn how to manipulate all the solution candidates simultaneously and avoid detailed examination of a specific candidate prematurely. At first sight, it seems like an impossible task. Surprisingly, this paper shows that it is attainable. The two key elements to success are (i) introduction of a new\nset of variables using probabilistic reasoning and (ii) smart choice of a cost function to be minimized which is expressed in terms of these variables. For definiteness, we will consider a specific NP-complete problem, the 3-bit Exact Cover (EC3) which is equivalent to Positive 1-in-3 SAT [5]. The problem is to decide whether there exists an assignment of N bits ),,,( 21 NzzzZ K= , each taking value 0 or 1, such that M clauses (constraints) are simultaneously satisfied. Each clause involves exactly three bits, say mk zz , and nz with { }Nnmk ,,2,1,, K\u2208 , and is satisfied if and only if one of the bits is 1 and the other two are 0, i.e., 1=++ nmk zzz . It is assumed that, within each clause, the indices k, m, and n are all distinct. The rest of the paper is organized as follows. In Section 2, we reformulate the EC3 problem in the realm of continuous mathematics using a new set of variables and a cost function with some rather remarkable properties. Section 3 presents an iterative algorithm for solving EC3 that candidly exploits these properties. The illustrative examples of the algorithm\u2019s performance for different problem sizes are given in Section 4. The empirical evidence of the surprising universality of variable flows as the algorithm proceeds at low clauses-to-variables ratios is presented in Section 5. Finally, in Section 6, we discuss open issues related to computational complexity of the presented algorithm and summarize the results."}, {"heading": "2 Reformulation of the EC3 Problem", "text": ""}, {"heading": "2.1 New variables and cost function", "text": "There are 2N possible assignments of bits kz , so checking them sequentially until a solution is found would take (on average) exponential time. Instead, one would like to evaluate all candidate solutions simultaneously and manipulate the whole pool of them in a manner ensuring that promising candidate solutions get enhanced attention while the unpromising ones become discouraged in some sense. To reach this goal, we introduce a set of new variables for the EC3 problem as follows. With each bit iz , we associate a\nprobability ix that value of iz is chosen as 0:\nxi = Pr{zi = 0}, 0 \u2264 xi \u2264 1, i = 1, 2, \u2026, N. (1) It follows that 1 \u2212 xi = Pr{zi = 1}, 0 \u2264 xi \u2264 1, i = 1, 2, \u2026, N. Vice versa, given some value of ]1,0[\u2208ix , the associated bit iz is selected to be 0 or 1 at random with probabilities ix and ix\u22121 , respectively. Let ),,,( 21 NxxxX K= denote an N-element vector representing the whole set of new variables. Consider two limiting cases. In first case, let all components of vector X be either 0 or 1. Then we have no ambiguity in choosing the corresponding bits Z, i.e., there is one-to-one correspondence between X and Z. In another limiting case, all components of vector X are distinct from either 0 or 1. Then, for a fixed vector X, we can choose any of 2N possible assignments of bits Z, although possibly with different weights. In particular, when ),,,( 2 1 2 1 2 1 K=X ,\neach assignment of bits has the same weight (probability), no one assignment is chosen more often (on average) than the other. Now we would like to construct a continuous cost function F for the EC3 problem with domain coinciding with the hypercube \u2126: 0 \u2264 xi \u2264 1, (i = 1,\u2026, N). The highly desired property of the cost function is its dependence upon the structure of the problem in such a way that makes it \u2018feel\u2019, in some sense, where the search for the satisfying assignments should be conducted. As a first step in search for such a function, let us find the probability Pi that a clause Ci is unsatisfied given some fixed X. Table 1 lists all possible assignments of three distinct bits involved in the clause Ci along with the corresponding probabilities.\nThe probability Pi reads\niiiiiiiii\niiiiiiiii\nnknmmknmk\nnmknmknmki\nxxxxxxxxx\nxxxxxxxxxP\n\u22c5\u2212\u22c5\u2212\u22c5\u2212\u22c5\u22c5\u22c5+\n=\u22c5\u22c5\u2212\u2212\u22c5\u2212\u22c5\u2212\u2212\u22c5\u22c5\u2212=\n31\n)1()1()1(1 (2)\nLet us now define a cost function as a sum of probabilities Pi for all clauses:\n),,()( 1 iii nmk\nM\ni i xxxPXF \u2211 = = (3)\nIf all clauses were independent, then F(X) would have a meaning of probability that at least one of the clauses of the corresponding EC3 problem is unsatisfied by the assignment of bits chosen in accordance with X. However, clauses that contain common variables are dependent and so one cannot interpret F as such probability in general case. Nevertheless, F has a number of interesting properties which happen to be very useful for reformulating the EC3 problem in terms of continuous mathematics. Let us now turn to investigating these properties."}, {"heading": "2.2 Properties of the cost function F", "text": "It is useful to expand the domain of the cost function F to the entire N-dimensional space \u211cN. This allows us to focus on general behavior of F without restrictions irrelevant to our goal and also has some other benefits as it will become evident shortly. The domain expansion is straightforward since F is a non-singular function everywhere in \u211cN. Lemma 1. F(X) is a harmonic function in \u211cN: 02 =\u2207 F . Moreover, F is a harmonic function of any non-empty subset of variables (assuming that values of the remaining variables are hold fixed). Proof: Since each clause Ci consists of three distinct bits, the corresponding probability Pi depends on three different variables. From (2), we then observe that\n0,0,0 2\n2\n2\n2\n2\n2\n= \u2202 \u2202 = \u2202 \u2202 = \u2202 \u2202\niii n\ni\nm\ni\nk\ni\nx\nP\nx\nP\nx\nP for any i, and the statement of the Lemma 1 immediately\nfollows. \u2584 From Lemma 1 and the well-known property of harmonic functions in \u211cN, it follows that the cost function F can attain its maximum and minimum values in an arbitrary compact domain D only on the boundary D\u03b4 (The maximum principle). Notice also that the Hessian matrix of function F has all its diagonal elements equal to zero everywhere in \u211cN. Lemma 2. F(X) > 0 everywhere in interior of the hypercube \u2126 (0 < xi < 1, i =1,\u2026, N). Proof: By definition, F is a sum of Pi that all attain non-negative values inside the hypercube \u2126 because they have a meaning of probability there. Note that \"inside the hypercube\" means that all components of vector X are different from either 0 or 1 although they might come very close to these limiting values. Recall that, any vector X inside \u2126 corresponds to all 2N assignments of logic variables although some of them are more probable that the other. Now suppose F(X) = 0 somewhere in the interior of \u2126. Then it follows that probabilities Pi = 0 for all i =1,\u2026, N simultaneously. This means that all clauses in the corresponding EC3 problem are satisfied with probability 1 irrespective of the assignment of logic variables! But clearly this is impossible. Thus, by reductio ad absurdum, F(X) must be positive everywhere inside the hypercube \u2126. F may or may not vanish only on the boundary \u2202\u2126. \u2584 Lemma 3. The spectrum of possible values of F on the vertices of the hypercube \u2126 is discrete and consists of integers from 0 to K, K \u2264 M: F = {0, 1, 2,\u2026, K} for X\u2208Vertices of \u2126\nThe value of F at any particular vertex gives the number of unsatisfied clauses of the corresponding EC3 problem, provided that logic variables are chosen in accordance with vector X at this vertex. K is the maximum number of clauses that can be simultaneously unsatisfied and it depends on the specific structure of the EC3 problem under consideration. Proof: As mentioned earlier, there is one-to-one correspondence between Z and X on the vertices of the hypercube \u2126. So there is no ambiguity in values of logic variables and hence every clause can be either satisfied or unsatisfied by the definite set of logic variables Z. This means that each Pi is either 1 (clause is unsatisfied) or 0 (clause is satisfied). Since F is a sum of all Pi, its spectrum of possible values consists of numbers of unsatisfied clauses and can vary from 0 to some integer K, which does not exceed M and is problem-specific. \u2584 Lemma 4. If a level hypersurface defined by the equation F(X) = 1 passes through the interior of \u2126, then there exists at least one satisfying bit assignment for the EC3 problem. Proof: Recall that, inside the hypercube \u2126, each Pi has the meaning of probability of an event Ai that the corresponding clause Ci is unsatisfied, i.e., { } \u2126\u2208= XXAP ii ,)(Pr . From the union bound (or Boole\u2019s inequality) [6], it follows\n\u2211 == \u2264       M i i M i i PA 11 Pr U , (4)\nwhich can be also recast as\n\u2211 == \u2264 \n  \n\n   \u2212 M\ni\ni\nM\ni i PA 11 Pr1 U (4a)\nApplying DeMorgan\u2019s law [7] to the lhs of (4a) and making use of the definition (3), one obtains\n)(1Pr 1\nXFA M\ni\ni \u2212\u2265       = I (5)\nIf F(X) = 1 inside \u2126, then there exists an open set \u2126\u2208*X where 1)( * <XF due to continuity of the cost function. It then follows from (5) that, for such *X , the probability\nof all clauses being simultaneously satisfied is positive: 0)(Pr 1 * >       = I M i i XA , which proves the Lemma 4."}, {"heading": "2.3 Reformulation of EC3 problem in the realm of continuous mathematics", "text": "In section 2.2, we presented a simple procedure of how, for a given EC3 problem with N logic variables and M clauses, a harmonic function F of N continuous variables can be\nconstructed in the analytic form. Function F defines a hypersurface S0 by the equation: F(X) = 0. From Lemma 2 it follows that there are only two possibilities:\n1. S0 intersects the hypercube \u2126 (0 \u2264 xi \u2264 1, i =1, 2, \u2026, N) on the boundary \u2202\u2126; 2. S0 does not have any common points with the hypercube \u2126.\nFrom the meaning of F, it is obvious that, in Case #1, the corresponding EC3 problem is satisfiable (and the vertices of \u2126 that belong to the hypersurface S0 uniquely determine the satisfying assignments of logic variables) while, in Case #2, the problem has no solutions. Thus EC3 can be thought of as a problem of intersection between a level hypersurface S0 of a harmonic cost function F and a unit hypercube in \u211c\nN. Alternatively, based on the Lemma 4, we can present the EC3 problem as a question of whether a hypersurface S1 defined by the equation F(X) = 1 intersects with the interior of the hypercube \u2126. In any case, we observe that the EC3, initially formulated as a problem in the realm of discrete mathematics, can be mapped into a problem in the realm of continuous mathematics. The reformulated problem can be then attacked using the methods of mathematical analysis, differential geometry, and manifold topology. New interesting algorithms for solving NP-complete problems may emerge as a result of these attacks. The next section presents an example of such an algorithm.\n3 Iterative Algorithm for Solving the EC3 Problem\nPossibly the simplest new algorithm for the ES3 problem belongs to the gradient descent family and is described as follows:\nBaby Steps Gradient Descent (BSGD) Algorithm (1) Construct cost function F(X) using Eqs (2) and (3); (2) Select a starting point )0(X inside \u2126 and a constant step parameter 0>\u03b7 ; (3) Repeat\n(3.1) Update: )(\n)( )()1( )(\nk\nn\nk k\nn\nk\nn x\nXF xx \u2202 \u2202 \u22c5\u2212=+ \u03b7 for Nn ...,,2,1= ;\n(3.2) if 1)1( >+knx then 1 )1( =+knx ;\n(3.3) if 0)1( <+knx then 0 )1( =+knx ;\nUntil stopping criterion )()1( kk XX =+ is satisfied (4) Compute: )(XF ; (5) if 0)( =XF then EC3 has a solution given by Z chosen in accordance with X; otherwise report that a single run from starting point )0(X failed to find a solution.\nSeveral remarks are in order. First, Lemma 1 guarantees that the algorithm presented above never becomes trapped at some local minimum simply because of absence of local minima for a harmonic function in interior of a compact domain. The only stationary points that can be encountered during evolution of X are the saddle points where 0=\u2207F . The saddle points form a set of measure zero in N\u211c , thus making the probability of X passing through them negligible. Nevertheless, saddles play a crucial role by being bifurcation points that separate different evolution paths. They may cause two trajectories that originate at close starting points to end up far away from each other. The noticeable saddle point in the interior of the hypercube \u2126 is ),,,(\n3 2 3 2 3 2 K=sX , as can be\neasily verified by differentiation of iP with respect to any variable. Hence this point must not be used to start the algorithm with. However, any other point in the vicinity of Xs can serve as a starting point (provided it is not a saddle). Second remark concerns consecutive runs of the algorithm, each time starting from a different point. If, during the latest run, the solution is found, we stop; otherwise we continue until maximum time designated to find a solution has been exhausted. With each unsuccessful run of the algorithm, the confidence that there is no solution increases. Whether it is possible or not to obtain a quantitative estimate of the probability that solution exists in terms of N, M, and the number of unsuccessful runs R is an open question which we will discuss briefly in Section 6. Third, notice that consecutive runs of the algorithm can be implemented in parallel. Once the cost function is generated, steps (2) through (4) of the BSGD can be carried out on K different processors simultaneously resulting in almost linear speedup, with each processor using its own starting point generated at random according to some protocol."}, {"heading": "4 Illustrative Examples", "text": "Let us consider several examples illustrating the performance of the algorithm described in Section 3. All problem instances presented below were generated randomly, and the starting points for consecutive runs of the BSGD algorithm were chosen at random lying on the surface of an N-dimensional sphere centered at ),,(\n2 1 2 1 K with the radius 0.05. PM\ndenotes the \u2018problem matrix\u2019 of size 3 \u00d7 M which consists of indices of variables involved in clauses columnwise. The step parameter \u03b7 was chosen to be equal to 0.005. A. Small-size problem: N = 15; M = 8 (M/N \u2245 0.53)\n108151512151315\n96131261476\n615721143\n=PM\nThe solution was found after the very first run: Z = (1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0) Figures 1 and 2 show the evolution of the cost function and the variables ),,1( Nnxn K= , respectively, as the algorithm proceeds. Notice that some xn are changing in nonmonotonic manner.\nB. Medium-size problem: N = 100; M = 40 (M/N = 0.4) It took four successive runs of the BSGD algorithm to find a solution. The evolution curves for the cost function F for all four runs are shown in Figure 3, and the evolution of the variables xn for the last successful run is presented in Figure 4.\nC. Large-size problem: N = 1000; M = 250 (M/N = 0.25) It took three runs to find a solution. Figures 5 and 6 present the results (see captions for details)."}, {"heading": "5 Universality of Variable Flows at Low Clauses-to-Variables Ratios", "text": "- Happy families are all alike; every unhappy family is unhappy in its own way.\nLeo Tolstoy, \u201cAnna Karenina\u201d There exists extensive empirical evidence suggesting that many constraint satisfaction problems exhibit phase transition phenomena from satisfiability to unsatisfiability as the ratio of the number of clauses (constraints) to the number of variables r (= M/N) passes through some threshold value *r in the limit \u221e\u2192N [8-11]. For the Positive 1-in-3 SAT (or EC3) problem, it is found by numerical experiments that 62.0* \u2248r [12]. Consequently, randomly generated instance of the EC3 problem with large N has a solution w.h.p. when *rr << . Figure 7 shows the evolution of variables xn for the randomly generated EC3 problem with 025.0=r (M = 25, N = 1000). Surprisingly, these variable flows are typical and persist for different problem instances with small r (which all have satisfying assignments w.h.p.). One can distinguish five families of well-separated variable flows, all originating from starting points around \u00bd (see Fig. 7): I \u2013 Monotonically growing towards 1; II \u2013 Monotonically growing to a plateau at (roughly) 2/3 and then splitting into two sub-flows leading in the opposite directions to 1 and 0, respectively; III \u2013 Growing towards 1 first and then returning to a plateau at \u00bd where the flow splits into two sub-flows towards 1 and 0, respectively; IV \u2013 Growing towards 1 first and then changing the direction towards 0; V \u2013 Horizontal flow of irrelevant variables (those that are not involved in any clause).\nIt is also worth noting that, for any variable and independently from the value of r, the slope of the corresponding trajectory can take only discrete set of values near the starting point close to \u00bd. Specifically, for any { }Nk ,,2,1 K\u2208 it holds\nkkk Cxx \u22c5\u2245\u2212 \u03b74 1)1()2( , (6)\nwhere { }MCk ,,2,1,0 K\u2208 denotes the total number of clauses that kx is involved in. Figure 8 clearly illustrates this fact by zooming in the leftmost region of Fig. 7.\nNumerical experiments show that, as the ratio r increases, the highly ordered behavior of variable flows (as demonstrated in Figure 7) starts to crumble, with new trajectories not belonging to any of the abovementioned five families beginning to appear. With further increase of r, the basic five types of flow become wider and start to overlap while at the same time share of the \u2018irregular\u2019 trajectories grows. Finally, when ratio r approaches the threshold value, only few variables follow the familiar paths, as illustrated in Table 2. The situation, to some extent, resembles the transition from laminar to turbulent flow in hydrodynamics, with control parameter r playing the role of the Reynolds number. The nature of such behavior of variable flows for randomly generated EC3 instances remains to be understood and maybe even quantified."}, {"heading": "6 Discussion and Concluding Remarks", "text": "The most interesting question regarding the BSGD algorithm concerns its computational complexity. This is a very difficult question and we will not attempt to fully address it in this paper. Instead, some preliminary analysis of the complexity issues is given below. Assume that the EC3 problem at hand has one or several satisfying bit assignments. Suppose also that, without knowing that the problem is satisfiable, we have run the BSGD algorithm independently (using randomly selected starting points) R times and it has failed to find at least one satisfying solution. How confident can we be that there is a solution to be found if we continue? Let q be a probability to find any satisfying bit assignment in a single run of the BSGD algorithm in case when at least one solution does exist. Then the expected number of trials until the first success ns is 1/q. Indeed, probability that exactly j trials are needed is { } 1)1(Pr \u2212\u2212== jqqjn , and hence\n[ ] { } qqjqjnjnEn j jj s /1)1(Pr 1 11\n=\u2212\u22c5\u22c5==\u22c5=\u2261 \u2212 \u221e\n=\n\u221e\n= \u2211\u2211 (7)\nIt is also easy to find a standard deviation \u03c3 for the number of trials until the first success:\n[ ] 2 2\n1\n12222 1)1( q q qqqjnnE\nj\nj\ns\n\u2212 =\u2212\u2212\u22c5=\u2212\u2261 \u2212\n\u221e\n= \u2212\u2211\u03c3 (8) Making use of the one-sided Chebyshev\u2019s inequality, we then obtain\n{ } 2)1(1\n1 Pr \u2212+\u2212 \u2212 \u2264\u22c5\u2265 kq q nkn s , (9)\nwhere k > 0. If, for instance, we select 11=k and run the BSGD algorithm\n)111( \u2212\u22c5= snR times without success, then, with confidence approximately 99%, we can conclude that no solutions exist and stop. The question of the complexity of the algorithm thus boils down to the estimation of ns: whether it grows as a polynomial or superpolynomial of the problem size N. Consider a set of all points inside a unit hypercube \u2126 which possess the following property: when used as starting entries to the BSGD algorithm, they evolve to the satisfying bit assignments during its progression. Let *\u2126 and ][ *\u2126Vol denote this set and its measure, respectively. Then, assuming that we choose the starting point at random with uniform distribution inside \u2126, we obtain\n][\n1\n][\n][ ** 1\n\u2126 = \u2126 \u2126 == \u2212 VolVol Vol qns (10)\nThus, we observe that the computational complexity of the EC3 problem is intrinsically linked to the properties of the corresponding harmonic cost function F in \u211cN. This connection suggests the possibility that methods of mathematical analysis, algebraic and differential topology, as well as other disciplines traditionally belonging to the domain of continuous mathematics may provide crucial insights into the most intriguing open questions in modern complexity theory.\nNeedless to say that the obtained results are relevant not only for the specific EC3 problem considered throughout this paper but for all NP-complete problems since they transform to each other by polynomial-time reduction. To summarize, we have demonstrated the equivalence of an arbitrary NPcomplete problem to a problem of checking whether a level hypersurface of a specifically constructed harmonic cost function (with all diagonal entries of its Hessian matrix equal to zero) intersects with a unit hypercube in many-dimensional Euclidean space. This is the main result of the paper which can potentially lead to development of new algorithms for NP-complete problems. As an illustration of power of our method, a simple iterative algorithm (BSGD) belonging to the gradient descent family has been implemented for the specific NP-complete problem (EC3 or Positive 1-in-3 SAT). The algorithm allows for almost linear speedup when carried out on multiple processors working in parallel. Numerical simulations confirm its good performance on problems of different sizes and reveal surprising universal behavior of variable flows for problems with low clause-tovariable ratios. The computational complexity of the BSGD algorithm remains an open question intrinsically linked to the properties of the corresponding harmonic cost function in \u211cN."}], "references": [{"title": "The complexity of theorem-proving procedures", "author": ["S.A. Cook"], "venue": "Proc. 3rd Ann. ACM Sympos. on Theory of Computing,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1971}, {"title": "Reducibility among combinatorial problems, in Complexity of Computer Computations", "author": ["R.M. Karp"], "venue": "Proc. Sympos", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1972}, {"title": "Computers and Intractability: A Guide to the Theory of NP- Completeness", "author": ["M.R. Garey", "D.S. Johnson"], "venue": "W.H. Freeman and Co", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1979}, {"title": "Combinatorial Optimization: Algorithms and Complexity", "author": ["C.H. Papadimitriou", "K. Steiglitz"], "venue": "Dover Publications,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1998}, {"title": "The complexity of satisfiability problems", "author": ["T.J. Schaefer"], "venue": "Proc. of the 10th Annual ACM Sympos. on Theory of Computing,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1978}, {"title": "Bonferroni-Type Inequalities with Applications, New York: Springer-Verlag", "author": ["J. Galambos", "I. Simonelli"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1996}, {"title": "Probability, Random Variables, and Stochastic Processes, 2nd ed", "author": ["A. Papoulis"], "venue": "New York: McGraw-Hill, p", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1984}, {"title": "An empirical study of phase transitions in binary constraint satisfaction problems", "author": ["P. Prosser"], "venue": "Artificial Intelligence, v", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1996}, {"title": "Determining computational complexity from characteristic \u2018phase transitions", "author": ["R. Monasson", "R. Zecchina", "S. Kirkpatrick", "B. Selman", "L. Troyansky"], "venue": "Nature, v", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1999}, {"title": "Exact Phase Transitions in Random Constraint Satisfaction Problems", "author": ["K. Xu", "W. Li"], "venue": "J. Artif. Intell. Res.,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2000}, {"title": "The phase transition in Exact Cover, Chicago", "author": ["V. Kalapala", "C. Moore"], "venue": "Journal of Theoretical Computer Science, 2008(5),", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2008}], "referenceMentions": [{"referenceID": 0, "context": "The \u2018completeness\u2019 designates the property that, if an efficient (= polynomial-time) algorithm for solving any one of NP-complete problems could be found, then we would immediately have (as a minimum) an efficient algorithm for all problems in this class [1-4].", "startOffset": 255, "endOffset": 260}, {"referenceID": 1, "context": "The \u2018completeness\u2019 designates the property that, if an efficient (= polynomial-time) algorithm for solving any one of NP-complete problems could be found, then we would immediately have (as a minimum) an efficient algorithm for all problems in this class [1-4].", "startOffset": 255, "endOffset": 260}, {"referenceID": 2, "context": "The \u2018completeness\u2019 designates the property that, if an efficient (= polynomial-time) algorithm for solving any one of NP-complete problems could be found, then we would immediately have (as a minimum) an efficient algorithm for all problems in this class [1-4].", "startOffset": 255, "endOffset": 260}, {"referenceID": 3, "context": "The \u2018completeness\u2019 designates the property that, if an efficient (= polynomial-time) algorithm for solving any one of NP-complete problems could be found, then we would immediately have (as a minimum) an efficient algorithm for all problems in this class [1-4].", "startOffset": 255, "endOffset": 260}, {"referenceID": 4, "context": "For definiteness, we will consider a specific NP-complete problem, the 3-bit Exact Cover (EC3) which is equivalent to Positive 1-in-3 SAT [5].", "startOffset": 138, "endOffset": 141}, {"referenceID": 5, "context": "From the union bound (or Boole\u2019s inequality) [6], it follows", "startOffset": 45, "endOffset": 48}, {"referenceID": 6, "context": "Applying DeMorgan\u2019s law [7] to the lhs of (4a) and making use of the definition (3), one obtains", "startOffset": 24, "endOffset": 27}, {"referenceID": 7, "context": "Leo Tolstoy, \u201cAnna Karenina\u201d There exists extensive empirical evidence suggesting that many constraint satisfaction problems exhibit phase transition phenomena from satisfiability to unsatisfiability as the ratio of the number of clauses (constraints) to the number of variables r (= M/N) passes through some threshold value * r in the limit \u221e \u2192 N [8-11].", "startOffset": 348, "endOffset": 354}, {"referenceID": 8, "context": "Leo Tolstoy, \u201cAnna Karenina\u201d There exists extensive empirical evidence suggesting that many constraint satisfaction problems exhibit phase transition phenomena from satisfiability to unsatisfiability as the ratio of the number of clauses (constraints) to the number of variables r (= M/N) passes through some threshold value * r in the limit \u221e \u2192 N [8-11].", "startOffset": 348, "endOffset": 354}, {"referenceID": 9, "context": "Leo Tolstoy, \u201cAnna Karenina\u201d There exists extensive empirical evidence suggesting that many constraint satisfaction problems exhibit phase transition phenomena from satisfiability to unsatisfiability as the ratio of the number of clauses (constraints) to the number of variables r (= M/N) passes through some threshold value * r in the limit \u221e \u2192 N [8-11].", "startOffset": 348, "endOffset": 354}, {"referenceID": 10, "context": "0 * \u2248 r [12].", "startOffset": 8, "endOffset": 12}, {"referenceID": 0, "context": "] [ 1 ] [ ] [ * * 1 \u03a9 = \u03a9 \u03a9 = = \u2212 Vol Vol Vol q ns (10)", "startOffset": 2, "endOffset": 7}], "year": 2011, "abstractText": "Using the probability theory-based approach, this paper reveals the equivalence of an arbitrary NPcomplete problem to a problem of checking whether a level hypersurface of a specifically constructed harmonic cost function (with all diagonal entries of its Hessian matrix equal to zero) intersects with a unit hypercube in many-dimensional Euclidean space. This connection suggests the possibility that methods of continuous mathematics can provide crucial insights into the most intriguing open questions in modern complexity theory.", "creator": "PrimoPDF http://www.primopdf.com"}}}