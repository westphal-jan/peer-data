{"id": "1201.0490", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Jan-2012", "title": "Scikit-learn: Machine Learning in Python", "abstract": "Scikit-learn is a Python module integrating a wide range of state-of-the-art machine learning algorithms for medium-scale supervised and unsupervised problems. This package focuses on bringing machine learning to non-specialists using a general-purpose high-level language. Emphasis is put on ease of use, performance, documentation, and API consistency, with the following modules:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Mon, 2 Jan 2012 16:42:40 GMT  (12kb)", "http://arxiv.org/abs/1201.0490v1", "Journal of Machine Learning Research (2011)"], ["v2", "Sun, 3 Mar 2013 10:24:49 GMT  (12kb)", "http://arxiv.org/abs/1201.0490v2", null], ["v3", "Tue, 10 Jan 2017 14:37:34 GMT  (12kb)", "http://arxiv.org/abs/1201.0490v3", null]], "COMMENTS": "Journal of Machine Learning Research (2011)", "reviews": [], "SUBJECTS": "cs.LG cs.MS", "authors": ["fabian pedregosa", "ga\\\"el varoquaux", "alexandre gramfort", "vincent michel", "bertrand thirion", "olivier grisel", "mathieu blondel", "gilles louppe", "peter prettenhofer", "ron weiss", "vincent dubourg", "jake vanderplas", "alexandre passos", "david cournapeau", "matthieu brucher", "matthieu perrot", "\\'edouard duchesnay"], "accepted": false, "id": "1201.0490"}, "pdf": {"name": "1201.0490.pdf", "metadata": {"source": "CRF", "title": "Scikit-learn: Machine Learning in Python", "authors": ["Fabian Pedregosa", "Alexandre Gramfort", "Olivier Grisel", "Vincent Dubourg", "Alexandre Passos", "Matthieu Brucher", "Matthieu Perrot", "Mikio Braun"], "emails": ["fabian.pedregosa@inria.fr", "gael.varoquaux@normalesup.org", "alexandre.gramfort@inria.fr", "vincent.michel@logilab.fr", "bertrand.thirion@inria.fr", "olivier.grisel@ensta.fr", "mblondel@ai.cs.kobe-u.ac.jp", "peter.prettenhofer@gmail.com", "ronweiss@gmail.com", "vincent.dubourg@gmail.com", "vanderplas@astro.washington.edu", "alexandre.tp@gmail.com", "cournape@gmail.com", "matthieu.brucher@gmail.com", "matthieu.perrot@cea.fr", "edouard.duchesnay@cea.fr"], "sections": [{"heading": null, "text": "Keywords: Python, supervised learning, unsupervised learning, model selection"}, {"heading": "1. Introduction", "text": "The Python programming language is establishing itself as one of the most popular languages for scientific computing. Thanks to its high-level interactive nature and its maturing ecosystem of scientific libraries, it is an appealing choice for algorithmic development and exploratory data analysis (Dubois, 2007; Milmann and Avaizis, 2011). Yet, as a generalpurpose language, it is increasingly used not only in academic settings but also in industry.\nScikit-learn harnesses this rich environment to provide state-of-the-art implementations of many well known machine learning algorithms, while maintaining an easy-to-use interface tightly integrated with the Python language. This answers the growing need for statistical data analysis by non-specialists in the software and web industries, as well as in fields outside of computer-science, such as biology or physics. Scikit-learn differs from other machine learning toolboxes in Python for various reasons: i) it is distributed under the BSD license ii) it incorporates compiled code for efficiency, unlike MDP (Zito et al., 2008) and pybrain (Schaul et al., 2010), iii) it depends only on numpy and scipy to facilitate easy distribution, unlike pymvpa (Hanke et al., 2009) that has optional dependencies such as R and shogun, and iv) it focuses on imperative programming, unlike pybrain which uses a data-flow framework. While the package is mostly written in Python, it incorporates the C++ libraries LibSVM (Chang and Lin, 2001) and LibLinear (Fan et al., 2008) that provide reference implementations of SVMs and generalized linear models with compatible\nlicenses. Binary packages are available on a rich set of platforms including Windows and any POSIX platforms. Furthermore, thanks to its liberal license, it has been widely distributed as part of major free software distributions such as Ubuntu, Debian, Mandriva, NetBSD and Macports and in commercial distributions such as the \u201cEnthought Python Distribution\u201d."}, {"heading": "2. Project Vision", "text": "Code quality. Rather than providing as many features as possible, the project\u2019s goal has been to provide solid implementations. Code quality is ensured with unit tests\u2014as of release 0.8, test coverage is 81%\u2014and the use of static analysis tools such as pyflakes and pep8. Finally, we strive to use consistent naming for the functions and parameters used throughout a strict adherence to the Python coding guidelines and numpy style documentation.\nBSD licensing. Most of the Python ecosystem is licensed with non-copyleft licenses. While such policy is beneficial for adoption of these tools by commercial projects, it does impose some restrictions: we are unable to use some existing scientific code, such as the GSL.\nBare-bone design and API. To lower the barrier of entry, we avoid framework code and keep the number of different objects to a minimum, relying on numpy arrays for data containers.\nCommunity-driven development. We base our development on collaborative tools such as git, github and public mailing lists. External contributions are welcome and encouraged.\nDocumentation. Scikit-learn provides a \u223c300 page user guide including narrative documentation, class references, a tutorial, installation instructions, as well as more than 60 examples, some featuring real-world applications. We try to minimize the use of machinelearning jargon, while maintaining precision with regards to the algorithms employed."}, {"heading": "3. Underlying Technologies", "text": "Numpy: the base data structure used for data and model parameters. Input data is presented as numpy arrays, thus integrating seamlessly with other scientific Python libraries. Numpy\u2019s view-based memory model limits copies, even when binding with compiled code (Van der Walt et al., 2011). It also provides basic arithmetic operations.\nScipy: efficient algorithms for linear algebra, sparse matrix representation, special functions and basic statistical functions. Scipy has bindings for many Fortran-based standard numerical packages, such as LAPACK. This is important for ease of installation and portability, as providing libraries around Fortran code can prove challenging on various platforms.\nCython: a language for combining C in Python. Cython makes it easy to reach the performance of compiled languages with Python-like syntax and high-level operations. It is also used to bind compiled libraries, eliminating the boilerplate code of Python/C extensions."}, {"heading": "4. Code Design", "text": "Objects specified by interface, not by inheritance. To facilitate the use of external objects with scikit-learn, inheritance is not enforced; instead, code conventions provide a consistent interface. The central object is an estimator, that implements a fit method, accepting as arguments an input data array and, optionally, an array of labels for supervised problems. Supervised estimators, such as SVM classifiers, can implement a predict method. Some\nestimators, that we call transformers, for example, PCA, implement a transformmethod, returning modified input data. Estimators may also provide a score method, which is an increasing evaluation of goodness of fit: a log-likelihood, or a negated loss function. The other important object is the cross-validation iterator, which provides pairs of train and test indices to split input data, for example K-fold, leave one out, or stratified cross-validation.\nModel selection. Scikit-learn can evaluate an estimator\u2019s performance or select parameters using cross-validation, optionally distributing the computation to several cores. This is accomplished by wrapping an estimator in a GridSearchCV object, where the \u201cCV\u201d stands for \u201ccross-validated\u201d. During the call to fit, it selects the parameters on a specified parameter grid, maximizing a score (the score method of the underlying estimator). predict, score, or transform are then delegated to the tuned estimator. This object can therefore be used transparently as any other estimator. Cross validation can be made more efficient for certain estimators by exploiting specific properties, such as warm restarts or regularization paths (Friedman et al., 2010). This is supported through special objects, such as the LassoCV. Finally, a Pipeline object can combine several transformers and an estimator to create a combined estimator to, for example, apply dimension reduction before fitting. It behaves as a standard estimator, and GridSearchCV therefore tune the parameters of all steps."}, {"heading": "5. High-level yet Efficient: Some Trade Offs", "text": "While scikit-learn focuses on ease of use, and is mostly written in a high level language, care has been taken to maximize computational efficiency. In Table 1, we compare computation time for a few algorithms implemented in the major machine learning toolkits accessible in Python. We use the Madelon data set (Guyon et al., 2004), 4400 instances and 500 attributes, The data set is quite large, but small enough for most algorithms to run.\nSVM. While all of the packages compared call libsvm in the background, the performance of scikit-learn can be explained by two factors. First, our bindings avoid memory copies and have up to 40% less overhead than the original libsvm Python bindings. Second, we patch libsvm to improve efficiency on dense data, use a smaller memory footprint, and better use\nmemory alignment and pipelining capabilities of modern processors. This patched version also provides unique features, such as setting weights for individual samples.\nLARS. Iteratively refining the residuals instead of recomputing them gives performance gains of 2\u201310 times over the reference R implementation (Hastie and Efron, 2004). Pymvpa uses this implementation via the Rpy R bindings and pays a heavy price to memory copies.\nElastic Net. We benchmarked the scikit-learn coordinate descent implementations of Elastic Net. It achieves the same order of performance as the highly optimized Fortran version glmnet (Friedman et al., 2010) on medium-scale problems, but performance on very large problems is limited since we do not use the KKT conditions to define an active set.\nkNN. The k-nearest neighbors classifier implementation constructs a ball tree (Omohundro, 1989) of the samples, but uses a more efficient brute force search in large dimensions.\nPCA. For medium to large data sets, scikit-learn provides an implementation of a truncated PCA based on random projections (Rokhlin et al., 2009).\nk-means. scikit-learn\u2019s k-means algorithm is implemented in pure Python. Its performance is limited by the fact that numpy\u2019s array operations take multiple passes over data."}, {"heading": "6. Conclusion", "text": "Scikit-learn exposes a wide variety of machine learning algorithms, both supervised and unsupervised, using a consistent, task-oriented interface, thus enabling easy comparison of methods for a given application. Since it relies on the scientific Python ecosystem, it can easily be integrated into applications outside the traditional range of statistical data analysis. Importantly, the algorithms, implemented in a high-level language, can be used as building blocks for approaches specific to a use case, for example, in medical imaging (Michel et al., 2011). Future work includes online learning, to scale to large data sets."}], "references": [{"title": "PyMVPA: A Python toolbox for multivariate pattern analysis of fMRI", "author": ["M. Hanke", "Y.O. Halchenko", "P.B. Sederberg", "S.J. Hanson", "J.V. Haxby", "S. Pollmann"], "venue": "data. Neuroinformatics,", "citeRegEx": "Hanke et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Hanke et al\\.", "year": 2009}, {"title": "Least Angle Regression, Lasso and Forward Stagewise", "author": ["T. Hastie", "B. Efron"], "venue": "http://cran.r-project.org/web/packages/lars/lars.pdf,", "citeRegEx": "Hastie and Efron.,? \\Q2004\\E", "shortCiteRegEx": "Hastie and Efron.", "year": 2004}, {"title": "A supervised clustering approach for fMRI-based inference of brain states", "author": ["V. Michel", "A. Gramfort", "G. Varoquaux", "E. Eger", "C. Keribin", "B. Thirion"], "venue": "Patt Rec, page epub ahead of print,", "citeRegEx": "Michel et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Michel et al\\.", "year": 2011}, {"title": "Scientific Python, volume 11 of Computing in Science & Engineering", "author": ["K.J. Milmann", "M. Avaizis", "editors"], "venue": "IEEE/AIP,", "citeRegEx": "Milmann et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Milmann et al\\.", "year": 2011}, {"title": "Five balltree construction algorithms", "author": ["S.M. Omohundro"], "venue": "ICSI Technical Report TR-89-063,", "citeRegEx": "Omohundro.,? \\Q1989\\E", "shortCiteRegEx": "Omohundro.", "year": 1989}, {"title": "A randomized algorithm for principal component analysis", "author": ["V. Rokhlin", "A. Szlam", "M. Tygert"], "venue": "SIAM Journal on Matrix Analysis and Applications,", "citeRegEx": "Rokhlin et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Rokhlin et al\\.", "year": 2009}, {"title": "The SHOGUN Machine Learning Toolbox", "author": ["S. Sonnenburg", "G. R\u00e4tsch", "S. Henschel", "C. Widmer", "J. Behr", "A. Zien", "F. de Bona", "A. Binder", "C. Gehl", "V. Franc"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Sonnenburg et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Sonnenburg et al\\.", "year": 2010}, {"title": "The NumPy array: a structure for efficient numerical computation", "author": ["S. Van der Walt", "S.C Colbert", "G. Varoquaux"], "venue": "Computing in Science and Engineering,", "citeRegEx": "Walt et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Walt et al\\.", "year": 2011}, {"title": "Modular toolkit for Data Processing (MDP): a Python data processing framework", "author": ["T. Zito", "N. Wilbert", "L. Wiskott", "P. Berkes"], "venue": "Frontiers in neuroinformatics,", "citeRegEx": "Zito et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Zito et al\\.", "year": 2008}], "referenceMentions": [{"referenceID": 8, "context": "Scikit-learn differs from other machine learning toolboxes in Python for various reasons: i) it is distributed under the BSD license ii) it incorporates compiled code for efficiency, unlike MDP (Zito et al., 2008) and pybrain (Schaul et al.", "startOffset": 194, "endOffset": 213}, {"referenceID": 0, "context": ", 2010), iii) it depends only on numpy and scipy to facilitate easy distribution, unlike pymvpa (Hanke et al., 2009) that has optional dependencies such as R and shogun, and iv) it focuses on imperative programming, unlike pybrain which uses a data-flow framework.", "startOffset": 96, "endOffset": 116}, {"referenceID": 0, "context": ", 2010), pymvpa (Hanke et al., 2009), MDP (Zito et al.", "startOffset": 16, "endOffset": 36}, {"referenceID": 8, "context": ", 2009), MDP (Zito et al., 2008) and Shogun (Sonnenburg et al.", "startOffset": 13, "endOffset": 32}, {"referenceID": 6, "context": ", 2008) and Shogun (Sonnenburg et al., 2010).", "startOffset": 19, "endOffset": 44}, {"referenceID": 1, "context": "Iteratively refining the residuals instead of recomputing them gives performance gains of 2\u201310 times over the reference R implementation (Hastie and Efron, 2004).", "startOffset": 137, "endOffset": 161}, {"referenceID": 4, "context": "The k-nearest neighbors classifier implementation constructs a ball tree (Omohundro, 1989) of the samples, but uses a more efficient brute force search in large dimensions.", "startOffset": 73, "endOffset": 90}, {"referenceID": 5, "context": "For medium to large data sets, scikit-learn provides an implementation of a truncated PCA based on random projections (Rokhlin et al., 2009).", "startOffset": 118, "endOffset": 140}, {"referenceID": 2, "context": "Importantly, the algorithms, implemented in a high-level language, can be used as building blocks for approaches specific to a use case, for example, in medical imaging (Michel et al., 2011).", "startOffset": 169, "endOffset": 190}], "year": 2017, "abstractText": "Scikit-learn is a Python module integrating a wide range of state-of-the-art machine learning algorithms for medium-scale supervised and unsupervised problems. This package focuses on bringing machine learning to non-specialists using a general-purpose high-level language. Emphasis is put on ease of use, performance, documentation, and API consistency. It has minimal dependencies and is distributed under the simplified BSD license, encouraging its use in both academic and commercial settings. Source code, binaries, and documentation can be downloaded from http://scikit-learn.sourceforge.net.", "creator": "LaTeX with hyperref package"}}}