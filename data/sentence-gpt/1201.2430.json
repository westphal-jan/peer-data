{"id": "1201.2430", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Jan-2012", "title": "A Well-typed Lightweight Situation Calculus", "abstract": "Situation calculus has been widely applied in Artificial Intelligence related fields. This formalism is considered as a dialect of logic programming language and mostly used in dynamic domain modeling. However, type systems are hardly deployed in situation calculus in the literature. In fact, the current practice of functional languages like Haskell and Go provides some of the most promising examples of functional languages that I've written in a few years. We used a traditional functional language like Haskell which was written in the 1970's and is now part of a new paradigm in functional programming. This paradigm has evolved from functional programming (finally), a functional language that uses functional programming to solve problems in more specific functional languages. In this series I will explain how functional languages were written and how it will be used as a foundation for the next phase of functional programming.\n\nThe current paradigm is called the Functional Programming Language (FOCL). In its present form FOCL is a type system based on Haskell and Haskell. FOCL consists of several classes of the following structures:\nThe FOCL contains three classes:\nFunctional Types that are defined by the FOCL:\nA Functional Type that is defined by the FOCL:\nA Type with the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nThe FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that is defined by the FOCL:\nA Type that", "histories": [["v1", "Wed, 11 Jan 2012 21:44:18 GMT  (18kb,D)", "https://arxiv.org/abs/1201.2430v1", "In Proceedings of the 21st Workshop on Logic-based methods in Programming Environments (WLPE'11), ICLP 2011 Workshop, pp. 62-73, Lexington, Kentucky, USA, July 2011"], ["v2", "Fri, 15 Jun 2012 23:18:40 GMT  (18kb,D)", "http://arxiv.org/abs/1201.2430v2", "In Proceedings of the 21st Workshop on Logic-based methods in Programming Environments (WLPE'11), ICLP 2011 Workshop, pp. 62-73, Lexington, Kentucky, USA, July 2011"]], "COMMENTS": "In Proceedings of the 21st Workshop on Logic-based methods in Programming Environments (WLPE'11), ICLP 2011 Workshop, pp. 62-73, Lexington, Kentucky, USA, July 2011", "reviews": [], "SUBJECTS": "cs.PL cs.AI", "authors": ["li tan"], "accepted": false, "id": "1201.2430"}, "pdf": {"name": "1201.2430.pdf", "metadata": {"source": "CRF", "title": "A Well-typed Lightweight Situation Calculus\u2217", "authors": ["Li Tan"], "emails": ["ltan003@cs.ucr.edu"], "sections": [{"heading": null, "text": "Submitted to: The 21st Workshop on Logic-based Methods in Programming Environments (WLPE 2011)\nc\u00a9 Li Tan This work is licensed under the Creative Commons Attribution License.\nA Well-typed Lightweight Situation Calculus\u2217\nLi Tan Department of Computer Science and Engineering\nUniversity of California, Riverside Riverside, CA, USA 92507 ltan003@cs.ucr.edu\nSituation calculus has been widely applied in Artificial Intelligence related fields. This formalism is considered as a dialect of logic programming language and mostly used in dynamic domain modeling. However, type systems are hardly deployed in situation calculus in the literature. To achieve a correct and sound typed program written in situation calculus, adding typing elements into the current situation calculus will be quite helpful. In this paper, we propose to add more typing mechanisms to the current version of situation calculus, especially for three basic elements in situation calculus: situations, actions and objects, and then perform rigid type checking for existing situation calculus programs to find out the well-typed and ill-typed ones. In this way, type correctness and soundness in situation calculus programs can be guaranteed by type checking based on our type system. This modified version of a lightweight situation calculus is proved to be a robust and well-typed system."}, {"heading": "1 Introduction", "text": "Introduced by John McCarthy in 1963 [10], situation calculus has been widely applied in Artificial Intelligence related research areas and other fields. This formalism is considered as a dialect of logic programming language and mostly used in dynamic domain modeling. Based on First Order Logic (FOL) [1] and Basic Action Theory [9], situation calculus can be used for reasoning efficiently by virtue of dynamic elements, such as actions and fluents. Basic concepts of situation calculus are fundamentals of First Order Logic and Set Theory in Mathematical Logic, which greatly facilitate the process of action-based reasoning in situation calculus.\nIn order to make programs sound and correct in semantics, people have proposed type systems [12] to ensure such significant properties. A well-typed programming language is determined by two semantic properties: preservation and progress. The first property makes sure that types are invariant under the evaluation and typing rules. And the progress property says a well-typed program never gets stuck. Nevertheless, little attention has been put on equipping formal languages good at dynamic modeling and reasoning, like situation calculus, with strong typing mechanisms. Indeed, situation Calculus is a typed second-order formal language, but from the viewpoint of type checking, it is not enough to finish smoothly. For instance, in situation calculus, only typed quantifiers are introduced for basic variables, while as for other logical expressions consisting of variables and connectives, fluents and predicates, current situation calculus emphasizes little on how to type check whether they are well-typed, how to type them thoroughly. Therefore, equipping other elements in current version of situation calculus with types is greatly needed for a complete and robust programming language with its type system, which is definitely feasible according to our investigation.\nIn this paper, in addition to the handy available typed variables, we propose to add more typing mechanisms to three basic elements in situation calculus: situations, actions and objects, consider a \u2217This work is also offered to present at the 20th International Workshop on Functional and (Constraint) Logic Programming (WFLP\u201911), Odense, Denmark, July 2011.\nar X\niv :1\n20 1.\n24 30\nv2 [\ncs .P\nL ]\n1 5\nJu n\n20 12\nclassical scenario for a piece of program based on the modified lightweight situation calculus, and then perform rigid type checking for the situation calculus program. If type errors are found, we would provide corresponding recommendation on how to correct the program into a well-typed one. Furthermore, to support our ideas in practice, we implement a type checker to semi-automatically finish the type checking work instead of working manually.\nWe organize our paper in the following way: section 2 introduces the related work on typing situation calculus and its variants; Section 3 presents the basic ideas on type systems and situation calculus in a straightforward way; Section 4 illustrates the primary ideas on how to type a lightweight core of the original situation calculus; Section 5 evaluates our typing mechanisms by type checking an existing piece of program in situation calculus and section 6 concludes this paper."}, {"heading": "2 Related Work", "text": "Due to its powerful action-based reasoning ability, situation calculus is often chosen as the formalism to express other models and programming languages which are either too complex to understand and use, like Artificial Intelligence in games [5] and Planning Domain Definition Language (PDDL) [6], or a little powerless to represent an entire complicated systems of different types, like Action Description Language (ADL) [11]. In the literature employing situation calculus as a formal method to express the semantics in PDDL [3] and ADL [4], the authors have tried to introduce some typing mechanisms, which is only limited to add type element in syntax, and only applied to variables. Other significant terms, such as fluents and predicates, are still typeless. Moreover, in semantics and reasoning, typing mechanisms are hardly discussed in these papers, neither is type checking.\nYilan Gu et al. [7] proposed a modified version of the situation calculus built using a two-variable fragment of the first-order logic extended with counting quantifiers. By introducing several additional groups of axiom to capture taxonomic reasoning and using similar regression operator in Raymond Reiter\u2019s work [13], the projection and executability problems are proved decidable although an initial knowledge base is incomplete and open. While their system concerns primarily on semantics of the new components proposed but rarely talks about typing on them, our well-typed version of situation calculus mentions typing mechanisms together with a modified situation calculus version in an all around way.\nThere are also some attempts on modifying situation calculus only based on a lightweight version of the original one. Gerhard Lakemeyer et al. [8] proposed a new logic dialect of situation calculus with the situation terms suppressed, namely, . That is, it is merely a similar formalism as a part of the current situation calculus. Moreover, in this paper, the authors consider how to map sentences between and situation calculus and try to prove is powerful enough to handle most cases as the situation calculus does, but mention little about how to type their new logic system as a fragment of situation calculus."}, {"heading": "3 Background Knowledge", "text": ""}, {"heading": "3.1 Type Systems", "text": "In the discipline of computer science, modern type systems are regarded as a formal mechanism originated from Alonzo Church\u2019s \u03bb calculus proposed in 1940 [2]. One possible definition of a type system is \u201ca tractable syntactic framework for classifying phrases according to the kinds of values they compute\u201d [12]. By associating types with each computed value, a compiler can detect meaningless or invalid code\nwritten in a given programming language. For instance, the expression \u201cmix = 29 + \u201cTan\u201d\u201d cannot get through type checking since a string cannot be added to a number.\nThere are many branches in type systems, such as inferred typing and manifest typing (implicit and explicit), and strong typing and weak typing. As for type checking, people can utilize dynamic type checking and static type checking, or a combination of both.\nThe primary and most obvious purpose of using type systems is to guarantee the correctness of programs, i.e., detect potential errors, while a well-typed system can further ensure the soundness (safety) of programs. The most important characteristics of a well-typed system are properties of preservation and progress. The former one makes sure a term can keep its type passed into the term that it is evaluated to, and the latter keeps reachability of a term: a typed term can either turn into a value or another related term, which means a well-typed term will not get stuck. In this paper, we plan to equip the current version of situation calculus with appropriate type system besides several original ones for variables. Thus, a program written in situation calculus can be easily type checked correct or not."}, {"heading": "3.2 Situation Calculus", "text": "Situation Calculus [10] is a formal method based on First Order Logic and Set Theory in Mathematical Logic, with a strong ability of action-based reasoning. This formalism is considered as a dialect of logic programming language and mostly used in dynamic domain modeling. In situation calculus, the world is comprised of situations, actions and objects. The semantics of these three key components in situation calculus is given informally below.\nA situation represents a possible world history, simply a sequence of actions, denoted by a first-order term. The constant s0 is used to denote the initial situation, namely, the empty sequence of actions.\nAn action represents any possible change to the world, denoted by a function, for example, drop(A), clean(B) and check in(ID).\nAn object represents an entity defined in the domain of a specific application, denoted by a first-order term, for example, x, robot A and table.\nMoreover, other than aforementioned three elements, there is another significant symbol used frequently in situation calculus, namely, fluents. A fluent represents a relation or a function whose truth values varies from one situation to the next, called relational fluent or functional fluent respectively.\nAdditionally, introduce two predefined binary symbols of fluents as follows: Function symbol do is defined as do: Action \u00d7 Situation\u2192 Situation, which maps an action a and a situation s to a new situation called successor situation, which results from performing the action a in the situation s. This successor situation is denoted as do(a, s).\nPredicate symbol Poss is defined as Poss: Action \u00d7 Situation. Similarly as above, Poss(a, s) means it is possible to execute the action a in the situation s. Note that in the original situation calculus, there is no return value for Poss. For consistency, in our well-typed system, we assign a unit value for every Poss predicate. In other words, Poss is defined as Poss: Action \u00d7 Situation\u2192 Unit (Capital \u201dU\u201d indicates it is a type but not a value.).\nAs mentioned before, fluents are used to represent a term whose value varies according to the changing of situations. As a comparison, another symbol is defined to denote a term whose value does varies with situations, namely, predicate. For example, hunger status(person, time) and weather condition(location, season) are relational fluents while drop(person, object) is a predicate, since in the first two fluents, the second arguments are actually situations, namely in situation calculus, s, and in the third term there is no specific situation, but only two objects, which means the value of this term will not change when situation changes."}, {"heading": "4 A Well-typed Mechanism in Situation Calculus", "text": ""}, {"heading": "4.1 A Lightweight Situation Calculus", "text": "The situation calculus we study and try to extend here is a lightweight version of its original form. Similarly as Featherweight Java (FJ), we only grab some core features in situation calculus and skip derivable forms to keep our ideas concise and efficient.\nAccording to the language of situation calculus, we keep all the static domain element: situations, actions and objects, and the majority of functional elements like fluents do and poss, and all the predicates. The components we ignore are those that either can derive from other elements or similarly be expressed by others. For instance, the ordering predicate v, which defines an ordering relation on situations, can be expressed implicitly by the return value of other fluents and predicates. Like the expression s\u2032 v s which denotes that s\u2032 is a proper subsequence of s, s\u2032 could be replaced with a fluent or predicate which leads s to s\u2032, say, do(findajob(person:Object, job:Object), s:Situation).\nLikewise, we replace countably infinitely many predicate symbols with arity n, (action\u222a ob ject)n with t, which is a shorthand of a sequence of terms t1, t2, . . . , tn (n\u2265 1)."}, {"heading": "4.2 Handy Typing Mechanism", "text": "In the original situation calculus, several elements such as quantifiers are typed [13]. The handy typed elements are described formally as follows:\nA typed notion \u03c4(x) is used to denote x associated with a finite set of all possible types: \u03c4(x) def= x : T1\u2228 x : T2\u2228 . . .\u2228 x : Tn, where T1,T2, . . . ,Tn are types of terms. Moreover, typed quantifiers are given by virtue of: (\u2200x : \u03c4)\u03c6(x) def= (\u2200x).\u03c4(x)\u2283 \u03c6(x), (\u2203x : \u03c4)\u03c6(x) def= (\u2203x).\u03c4(x)\u2227\u03c6(x). Thus, expressions that contain such typed quantifiers could be rewritten as sequences of conjunctions\nand disjunctions: (\u2200x : \u03c4)\u03c6(x)\u2261 \u03c6(T1)\u2228\u03c6(T2)\u2228 . . .\u2228\u03c6(Tn), (\u2203x : \u03c4)\u03c6(x)\u2261 \u03c6(T1)\u2227\u03c6(T2)\u2227 . . .\u2227\u03c6(Tn)."}, {"heading": "4.3 A New Type System in the Lightweight Situation Calculus", "text": "Although the original version of situation calculus equips some components with corresponding types and semantics, it is not enough to do type checking based on these definitions. We proposed a new well-typed system to enable potential task of type checking in a convenient way.\nSyntactic Forms t ::= . . . terms:\nx variable \u2200x universal quanti f ied variable \u2203x existential quanti f ied variable \u00act negative term t1 \u2283 t2 subset logical connection t1\u2227 t2 con junction logical connection t1\u2228 t2 dis junction logical connection\nt term sequence bt ::= . . . behavioral terms:\n\u00acbt negative behavioral term r(t,s) relational f luent f (t) predicate do(bt,s) f unctional f luent poss(bt,s) predicate f luent\nv ::= . . . values: unit poss predicate value true true boolean value f alse f alse boolean value T ::= . . . types: Unit type o f predicate f luent Bool type o f booleans Situation type o f behavioral terms Action type o f behavioral terms Ob ject type o f terms\nSemantics Given a world w comprised of situations, actions and objects and a set L(w) of all instances defined in w, if a term t holds in w, we write w |= t. Given a set of situations S = {s0,s1, . . . ,sn} (n\u2265 0), we have: w |= x \u21d4 x \u2208 L(w) w |= \u2200x \u21d4 \u2200si \u2208 S,w |= x w |= \u2203x \u21d4 \u2203si \u2208 S,w |= x w |= \u00acx \u21d4 w 6|= x w |= t1 \u2283 t2 \u21d4 w |= t1\u21d2 w |= t2 w |= t1\u2227 t2 \u21d4 w |= t1 and w |= t2 w |= t1\u2228 t2 \u21d4 w |= t1 or w |= t2 w |= t \u21d4 w |= t1,w |= t2, . . . ,w |= tn w |= \u00acbt \u21d4 w 6|= bt w |= r(t,s) \u21d4 w |= t and w |= s in r w |= f (t) \u21d4 w |= t in f w |= do(bt,s) \u21d4 \u2203si \u2208 S,bt holds in si w |= poss(bt,s) \u21d4 \u2203si \u2208 S,w |= ( si \u2283 do(bt,si)\n) Evaluation Rules t \u2192 t\u2019\n(x)bt \u2192 (x\u2032)bt (\u2200x)bt \u2192 (\u2200x\u2032)bt E-UNV\n(x)bt \u2192 (x\u2032)bt (\u2203x)bt \u2192 (\u2203x\u2032)bt E-EST\nt \u2192 t \u2032 \u00act \u2192 \u00act \u2032 , bt \u2192 bt \u2032 \u00acbt \u2192 \u00acbt \u2032 E-NEG\nt1 \u2192 t \u20321 t1 \u2283 t2 \u2192 t \u20321 \u2283 t2\nE-SPT\nt1 \u2192 t \u20321 t1 \u2227 t2 \u2192 t \u20321 \u2227 t2\nE-CONJ\nt1 \u2192 t \u20321 t1 \u2228 t2 \u2192 t \u20321 \u2228 t2\nE-DISJ\nt1 \u2192 t \u20321 t1, t2, ..., tn \u2192 t \u20321, t2, ..., tn\nE-SEQ\ndo(bt,s)\u2192 [s 7\u2192 s\u2032]bt E-DO\nposs(bt,s)\u2192 s\u2283 [s 7\u2192 s\u2032]bt E-POSS\nTyping Rules W ` t : T Here we continue to use W (rather than the lower case w used in semantics) instead of conventional \u0393 to denote a typing context. Formally, we have:\nW ` true : Bool T-TRUE\nW ` f alse : Bool T-FALSE\nx : T \u2208 W W ` x : T T-VAR\n\u2200r(x : T, t\u2212x, s) \u2208 W W ` (\u2200x : T ) r(t, s) T-UNV1\n\u2203r(x : T, t\u2212x, s) \u2208 W W ` (\u2203x : T ) r(t, s) T-EST1\n\u2200 f (x : T, t\u2212x) \u2208 W W ` (\u2200x : T ) f (t) T-UNV2\n\u2203 f (x : T, t\u2212x) \u2208 W W ` (\u2203x : T ) f (t) T-EST2\nW ` t : T W ` \u00act : T , W ` bt : T W ` \u00acbt : T T-NEG\nW ` (t1 : T1) \u2283 (t2 : T2) W ` (\u2200x \u2208 t1) x : T1 \u2283 (\u2200y \u2208 t2) y : T2 T-SPT\nW ` (t1 : T1) \u2227 (t2 : T2) W ` (\u2200x \u2208 t1) x : T1 \u2227 (\u2200y \u2208 t2) y : T2 T-CONJ\nW ` (t1 : T1) \u2228 (t2 : T2) W ` (\u2200x \u2208 t1) x : T1 \u2228 (\u2200y \u2208 t2) y : T2 T-DISJ\nW ` (t1 : T1), (t2 : T2), ..., (tn : Tn) W ` (\u2200x \u2208 t1) x : T1, ..., (\u2200z \u2208 tn) z : Tn T-SEQ\nW ` r : Ob ject\u2192Situation\u2192Situation, t : Ob ject, s : Situation W ` r(t, s) : Situation T-RELFLT\nW ` f : Ob ject\u2192Action W`t : Ob ject W ` f (t) : Action T-FUNFLT\nW, bt : Action ` s : Situation W ` do(bt, s) : Situation T-DO\nW, bt : Action ` s : Situation W ` poss(bt, s) : Unit T-POSS\nNote: 1. t is a shorthand of a sequence of terms t1, t2, . . . , tn (n\u2265 1). Hence t cannot possibly be empty. 2. The type Unit is defined as the type of value unit, where unit def= {t|(\u2200x \u2208 t) x : Bool\u2228Situation\u2228 Action\u2228Ob ject}, which means all elements in a unit should have the same type. 3. [s 7\u2192 s\u2032]bt in the computation rules E-DO and E-POSS means \u201cthe successor situation s\u2032 that results from executing the behavioral term bt in the situation s.\u201d See the items for E-DO and E-POSS in Table 1. 4. The shadowed typing rules are adapted from the handy typing mechanism for quantifiers in current version of situation calculus, which is discussed in section 4.1. 5. For simplicity, the detailed explanation is not given for typing rules T-RELFLT, T-FUNFLT, T-DO and T-POSS."}, {"heading": "5 Evaluation", "text": ""}, {"heading": "5.1 Case Description", "text": "Let us consider the following scenario: In face of an object x on the floor, say a vase, there is a robot r who wants to pick up this vase and paints it with some color, namely c. In situation calculus, we can describe this scenario using three statements:\nIn a given situation s that, say, there is a robot r and a vase x ready for situations later on, if the robot r then picked up the vase x and dropped it without holding it firmly, which made the vase became broken, then the vase must be a fragile object:\nf ragile(x,s)\u2283 broken(x,do(drop(r,x),s)) (1) If the robot successfully picked up the vase x and tried to paint it with one color c, holding it firmly, the vase would turn out to be in the color c: color(x,do(paint(x,c),s)) = c (2) Finally, let us consider the conditions on which it is possible for the robot r to pick up the vase x without any external help. The conditions should be a combination of three: the robot r is not holding any other object z, it is next to x, and x is not heavy:\nposs(pickup(r,x),s)\u2283 [(\u2200z)\u00acholding(r,z,s)]\u2227\u00acheavy(x)\u2227nextTo(r,x,s) (3)"}, {"heading": "5.2 Results and Analysis of Type Checking", "text": "Now let us do the type checking on the aforementioned three statements that represent a scenario in which a robot r wants to pick up a vase x by itself and paints it with some fancy color c. On the basis of the type system defined in section 4.2, if all the typing goes through and does not get stuck, the program written in situation calculus will be regarded as well-typed.\nFirst, we need to add predefined types for programs written in the original situation calculus by virtue of our new type system. Hence we have:\nf ragile(x : Ob ject,s : Situation)\u2283 broken(x : Ob ject,do(drop(r : Ob ject,x : Ob ject),s : Situation)) (1)\u2032 color(x : Ob ject,do(paint(x : Ob ject,c : Ob ject),s : Situation)) = c : Ob ject (2)\u2032\nposs(pickup(r : Ob ject,x : Ob ject),s : Situation)\u2283 [(\u2200z : Ob ject)\u00acholding(r : Ob ject,z : Ob ject,s : Situation)]\u2227\u00acheavy(x : Ob ject)\u2227nextTo(r : Ob ject,x : Ob ject,s : Situation) (3)\u2032\nAnd then we know the world w \u2261 {x,s,r,c,z} and W \u2261 {x : Ob ject,s : Situation,r : Ob ject,c : Ob ject,z : Ob ject}.\nNow, let us do typing derivation statement by statement. For (1)\u2032, We notice that T-SPT cannot be applied since (1)\u2032 is of a superset relationship between behavioral terms while T-SPT is for regular terms. Thus, we turn to prove that the type of the left hand side of \u201c\u2283\u201d is the same as that of the right hand side.\nFor typesetting simplicity, we omit \u201cW`\u201d, return types and the final step of T-VAR, and abbreviate \u201cObject\u201d, \u201cSituation\u201d and \u201cAction\u201d to \u201cObj\u201d, \u201cStn\u201d and \u201cAtn\u201d, respectively, in the following typing derivation.\nLeft hand side of \u201c\u2283\u201d in (1)\u2032: f ragile : Ob j\u2192 Stn\u2192 Stn, x : Ob j, s : Stn\nf ragile(x, s) T-RELFLT\nRight hand side of \u201c\u2283\u201d in (1)\u2032: drop : Ob j\u2192 Atn, r : Ob j, x : Ob j, s : Stn, broken : Ob j\u2192 Stn\u2192 Stn\ndrop(r : Ob j,x : Ob j), s : Stn, broken : Ob j\u2192 Stn\u2192 Stn T-FUNFLT\ndo(drop(r : Ob j,x : Ob j), s : Stn), broken : Ob j\u2192 Stn\u2192 Stn T-DO\nbroken(x : Ob j, do(drop(r : Ob j,x : Ob j), s : Stn)) T-RELFLT\nAccording to this typing derivation, we know that both types of the left hand side and right hand side are the same one: Situation. So this situation calculus statement is proved to be well-typed.\nFor (2)\u2032, we have the similar form of typing derivation: Left hand side of \u201c=\u201d in (2)\u2032:\npaint : Ob j\u2192 Atn, x : Ob j,c : Ob j, s : Stn, color : Ob j\u2192 Stn\u2192 Stn paint(x : Ob j,c : Ob j), s : Stn, color : Ob j\u2192 Stn\u2192 Stn T-FUNFLT\ndo(paint(x : Ob j,c : Ob j), s : Stn), color : Ob j\u2192 Stn\u2192 Stn T-DO\ncolor(x : Ob j, do(paint(x : Ob j,c : Ob j), s : Stn)) T-RELFLT\nRight hand side of \u201c=\u201d in (2)\u2032: c: Object According to this typing derivation, we find that the type of the left hand side is Situation, while the right hand side has a type: Object, which obviously leads to a mismatch. So this situation calculus statement is proved to be not well-typed. In fact, whatever type of c will bring about stuck terms or mismatches. Anyway, it can still be fixed. A possible correction is to change the right hand side to inColor(c: Object, s: Situation), i.e., to replace c with a corresponding relational fluent to match the type of the left hand side.\nLet us check the final sample statement similarly as we did previously: Left hand side of \u201c\u2283\u201d in (3)\u2032:\npickup : Ob j\u2192 Ob j\u2192 Atn, r : Ob j, x : Ob j, s : Stn pickup(r : Ob j, x : Ob j), s : Stn T-FUNFLT\nposs(pickup(r : Ob j, x : Ob j), s : Stn) T-POSS\nWhen coming to the right hand side of \u201c\u2283\u201d in (3)\u2032, we notice that T-CONJ cannot be applied since the right hand side of (3)\u2032 is of a conjunctive relationship between behavioral terms while T-CONJ is for regular terms. Thus, we turn to check whether types of each part of the conjunction are the same. If so, the final type should be Unit according to its definition.\nholding : Ob j\u2192 Ob j\u2192 Stn\u2192 Stn, r : Ob j, z : Ob j, s : Stn holding(r : Ob j, z : Ob j, s : Stn) T-RELFLT\n\u2200\u00acholding(r : Ob j, z : Ob j, s : Stn) T-NEG\n(\u2200z : Ob j)\u00acholding(r : Ob j, z : Ob j, s : Stn) T-UNV1\nSo we find that (\u2200z)\u00acholding(r : Ob ject,z : Ob ject,s : Situation) has a type Situation. Similarly, we can derive \u00acheavy(x : Ob ject) to be of type Action by taking two typing derivation steps and nextTo(r : Ob ject,x : Ob ject,s : Situation) to be of type Situation by taking one step. By definition, the type of the right hand side of \u201c\u2283\u201d in (3)\u2032 is not Unit since not all the subterms of the conjunction have the same type. Therefore, we can claim that (3)\u2032 is not well-typed as well. This time we can fix it intuitively by simply changing the functional fluent \u00acheavy(x : Ob ject) into a relational fluent \u00acheavy(x : Ob ject,s : Situation)."}, {"heading": "5.3 Implementation in OCaml", "text": "In the last section, types of every term and behavioral term written in a modified lightweight situation calculus with our type system are checked for consistency theoretically. Now we plan to implement a type checker in OCaml which does the same job as we do manually, that is, all the type checking work would be fulfilled by a type checker semi-automatically and efficiently, which can give a great hand for those who are doing tedious type checking alone.\nOne piece of sample code in OCaml which typechecks situation calculus statement (1)\u2032 as described in 5.2 is shown below:\n(* Types Definition *)\n# type unit = Unit of unit;;\n# type bool = Bool of bool;;\n# type stn = Situation;;\n# type atn = Action;;\n# type obj = Object;;\n(* T-RelFlt *)\n# let r t s =\nmatch t with\nObject -> match s with\nSituation -> Situation;;\n(* T-FunFlt *)\n# let f t1 t2 =\nmatch t1 with\nObject -> match t2 with\nObject -> Action;;\n(* T-Do *)\n# let does bt s =\nmatch bt with\nAction -> match s with\nSituation -> Situation;;\n(* Left Hand Side *)\n# let x = Object\nand s = Situation\nand fragile = r;;\nval x : obj = Object\nval s : stn = Situation\nval fragile : obj -> stn -> stn = <fun>\n# fragile (x:obj) (s:stn);;\n- : stn = Situation\n(* Right Hand Side *)\n# let b = Object\nand drop = f\nand broken = r;;\nval b : obj = Object\nval drop : obj -> obj -> atn = <fun>\nval broken : obj -> stn -> stn = <fun>\n# broken (x:obj) (does (drop (b:obj) (x:obj)) (s:stn));;\n- : stn = Situation\n(* This statement is proved to be well-typed *)\nIn the OCaml code above, we firstly defined the types in our type system, and then implemented the T-RELFLT, T-FUNFLT and T-DO typing rules. Finally some necessary variables, two relational fluents fragile and broken, and a funtional fluent drop are declared. As a type checking process, these fluents fragile, broken and drop are invoked with inputs of pre-defined variables to show the typing relationship among them, and the final types calculated for the left hand side and right hand side indicate whether this statement is well-typed.\nIn this way, all statements that we typechecked manually just now can be dumped into this type checker for semi-automatical type checking. Due to some limitation of typing rules in our system, we do need some additional manual work occasionally. For instance, we need to check by ourselves that whether the types of the left hand side and right hand side of a symbol \u201d\u2283\u201d are the same. Anyway, the type checker indeed facilitate our process of deciding whether a situation calculus program is well-typed or not."}, {"heading": "6 Conclusions", "text": "Type systems have been proposed to guarantee the soundness of program types by rigid typing mechanisms. As a popular formal language widely used in Artificial Intelligence related fields, situation calculus itself has insufficient methods to support a complete and robust type system, with a rudimentary typing mechanism: only typed quantifiers for variables. It is obviously not enough for type checking the current situation calculus programs. By virtue of our newly-introduced type system for a lightweight situation calculus which keep the core of the current one, we can easily do basic type checking for existing situation calculus programs which are referred a lot in various study of situation calculus. We also implemented the theoretical type system in OCaml as a type checker to substantiate our ideas. With the help of this type checker, precedent manual type checking work can be greatly automated for a better performance. As for the programs checked out to be ill-typed, we provide corresponding ways for cor-\nrecting them into well-typed forms."}, {"heading": "Acknowledgements", "text": "The author would like to thank all anonymous reviewers for their generous and constructive directives and comments on this paper."}], "references": [{"title": "An introduction to first-order logic. In: Handbook of Mathematical Logic, Studies in Logic and the Foundations of Mathematics", "author": ["Jon Barwise"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1977}, {"title": "A Formulation of the Simple Theory of Types", "author": ["Alonzo Church"], "venue": "Journal of Symbolic Logic, Volume", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1940}, {"title": "A Situation-Calculus Semantics for an Expressive Fragment of PDDL", "author": ["Jens Cla\u00dfen", "Yuxiao Hu", "Gerhard Lakemeyer"], "venue": "Proceedings of the 22nd National Conference on Artificial Intelligence,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2007}, {"title": "A Semantics for ADL as Progression in the Situation Calculus", "author": ["Jens Cla\u00dfen", "Gerhard Lakemeyer"], "venue": "Proceedings of the 11th Workshop on Non-Monotonic Reasoning,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "Representing Knowledge within the Situation Calculus using Interval-valued Epistemic Fluents", "author": ["John Funge"], "venue": "Reliable Computing,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1999}, {"title": "PDDL\u2014the planning domain definition language. In: Yale Center for Computational Vision and Control Technical Report CVC TR-98-003/DCS TR-1165", "author": ["Malik Ghallab", "Adele Howe", "Craig Knoblock", "Drew McDermott", "Ashwin Ram", "Manuela Veloso", "Daniel Weld", "David Wilkins"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1998}, {"title": "Decidable Reasoning in a Modified Situation Calculus", "author": ["Yilan Gu", "Mikhail Soutchanski"], "venue": "Proceedings of the International Joint Conference on Artificial Intelligence,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "Semantics for a useful fragment of the situation calculus", "author": ["Gerhard Lakemeyer", "Hector J. Levesque"], "venue": "Proceedings of the International Joint Conference on Artificial Intelligence,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2005}, {"title": "Situations, actions and causal laws", "author": ["John McCarthy"], "venue": "In: Stanford Artificial Intelligence Project,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1963}, {"title": "ADL: Exploring the middle ground between STRIPS and the Situation Calculus", "author": ["Edwin P.D. Pednault"], "venue": "Proceedings of the International Conference on the Principles of Knowledge Representation and Reasoning,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1989}, {"title": "Types and Programming Languages", "author": ["Benjamin C. Pierce"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2002}, {"title": "Knowledge in Action: Logical Foundations for Specifying and Implementing Dynamical Systems", "author": ["Raymond Reiter"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2001}], "referenceMentions": [{"referenceID": 8, "context": "Introduced by John McCarthy in 1963 [10], situation calculus has been widely applied in Artificial Intelligence related research areas and other fields.", "startOffset": 36, "endOffset": 40}, {"referenceID": 0, "context": "Based on First Order Logic (FOL) [1] and Basic Action Theory [9], situation calculus can be used for reasoning efficiently by virtue of dynamic elements, such as actions and fluents.", "startOffset": 33, "endOffset": 36}, {"referenceID": 10, "context": "In order to make programs sound and correct in semantics, people have proposed type systems [12] to ensure such significant properties.", "startOffset": 92, "endOffset": 96}, {"referenceID": 4, "context": "Due to its powerful action-based reasoning ability, situation calculus is often chosen as the formalism to express other models and programming languages which are either too complex to understand and use, like Artificial Intelligence in games [5] and Planning Domain Definition Language (PDDL) [6], or a little powerless to represent an entire complicated systems of different types, like Action Description Language (ADL) [11].", "startOffset": 244, "endOffset": 247}, {"referenceID": 5, "context": "Due to its powerful action-based reasoning ability, situation calculus is often chosen as the formalism to express other models and programming languages which are either too complex to understand and use, like Artificial Intelligence in games [5] and Planning Domain Definition Language (PDDL) [6], or a little powerless to represent an entire complicated systems of different types, like Action Description Language (ADL) [11].", "startOffset": 295, "endOffset": 298}, {"referenceID": 9, "context": "Due to its powerful action-based reasoning ability, situation calculus is often chosen as the formalism to express other models and programming languages which are either too complex to understand and use, like Artificial Intelligence in games [5] and Planning Domain Definition Language (PDDL) [6], or a little powerless to represent an entire complicated systems of different types, like Action Description Language (ADL) [11].", "startOffset": 424, "endOffset": 428}, {"referenceID": 2, "context": "In the literature employing situation calculus as a formal method to express the semantics in PDDL [3] and ADL [4], the authors have tried to introduce some typing mechanisms, which is only limited to add type element in syntax, and only applied to variables.", "startOffset": 99, "endOffset": 102}, {"referenceID": 3, "context": "In the literature employing situation calculus as a formal method to express the semantics in PDDL [3] and ADL [4], the authors have tried to introduce some typing mechanisms, which is only limited to add type element in syntax, and only applied to variables.", "startOffset": 111, "endOffset": 114}, {"referenceID": 6, "context": "[7] proposed a modified version of the situation calculus built using a two-variable fragment of the first-order logic extended with counting quantifiers.", "startOffset": 0, "endOffset": 3}, {"referenceID": 11, "context": "By introducing several additional groups of axiom to capture taxonomic reasoning and using similar regression operator in Raymond Reiter\u2019s work [13], the projection and executability problems are proved decidable although an initial knowledge base is incomplete and open.", "startOffset": 144, "endOffset": 148}, {"referenceID": 7, "context": "[8] proposed a new logic dialect of situation calculus with the situation terms suppressed, namely, .", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "In the discipline of computer science, modern type systems are regarded as a formal mechanism originated from Alonzo Church\u2019s \u03bb calculus proposed in 1940 [2].", "startOffset": 154, "endOffset": 157}, {"referenceID": 10, "context": "One possible definition of a type system is \u201ca tractable syntactic framework for classifying phrases according to the kinds of values they compute\u201d [12].", "startOffset": 148, "endOffset": 152}, {"referenceID": 8, "context": "Situation Calculus [10] is a formal method based on First Order Logic and Set Theory in Mathematical Logic, with a strong ability of action-based reasoning.", "startOffset": 19, "endOffset": 23}, {"referenceID": 11, "context": "In the original situation calculus, several elements such as quantifiers are typed [13].", "startOffset": 83, "endOffset": 87}], "year": 2014, "abstractText": "Situation calculus has been widely applied in Artificial Intelligence related fields. This formalism is considered as a dialect of logic programming language and mostly used in dynamic domain modeling. However, type systems are hardly deployed in situation calculus in the literature. To achieve a correct and sound typed program written in situation calculus, adding typing elements into the current situation calculus will be quite helpful. In this paper, we propose to add more typing mechanisms to the current version of situation calculus, especially for three basic elements in situation calculus: situations, actions and objects, and then perform rigid type checking for existing situation calculus programs to find out the well-typed and ill-typed ones. In this way, type correctness and soundness in situation calculus programs can be guaranteed by type checking based on our type system. This modified version of a lightweight situation calculus is proved to be a robust and well-typed system.", "creator": "LaTeX with hyperref package"}}}