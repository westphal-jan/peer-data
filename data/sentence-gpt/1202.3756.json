{"id": "1202.3756", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Feb-2012", "title": "Price Updating in Combinatorial Prediction Markets with Bayesian Networks", "abstract": "To overcome the #P-hardness of computing/updating prices in logarithm market scoring rule-based (LMSR-based) combinatorial prediction markets, Chen et al. [5] recently used a simple Bayesian network to represent the prices of securities in combinatorial predictionmarkets for tournaments, and showed that two types of popular securities are structure preserving. In this paper, we significantly extend this idea by employing Bayesian networks in general combinatorial prediction markets. We reveal a very natural connection between LMSR-based combinatorial prediction markets and probabilistic belief aggregation,which leads to a complete characterization of all structure preserving securities for decomposable network structures. Notably, the main results by Chen et al. [5] are corollaries of our characterization. We then prove that in order for a very basic set of securities to be structure preserving, the graph of the Bayesian network must be decomposable. We also discuss some approximation techniques for securities that are not structure preserving. In this paper, we apply two approaches to consider this problem.\n\n\nBayesian LMSR-based combinatorial prediction markets\nTo characterize the market price in combinatorial prediction markets, we show that the market price in these markets is defined by an input function. A key parameter is a term used to specify a range of information about the prices of the relevant securities (e.g. the current market price, the current market price, the current market price, the current market price). It is a term used to specify the price of the relevant securities, which is often called the \u2011-bar\u200c. We show that the probability of a given stock, as measured by the market price of one or more shares, is calculated with probability. In the present case, the probability of a given stock is a general probability. This probability is not to be limited to the stock price of a given stock and its shares, but rather the probability that the stock price of the corresponding stock will differ over time. This probability is also to be considered as a means of quantifying the market price of a given stock as well as its shares, as to represent the probability that a given stock will differ over time.\nIn terms of prediction markets, we show that the likelihood of the predicted stock to be stable is proportional to the probability of a given stock being stable over time, by using the \u2011-bar\u200c. These are very important for predicting the price of a given stock in a", "histories": [["v1", "Tue, 14 Feb 2012 16:41:17 GMT  (285kb)", "http://arxiv.org/abs/1202.3756v1", null]], "reviews": [], "SUBJECTS": "cs.GT cs.AI", "authors": ["david m pennock", "lirong xia"], "accepted": false, "id": "1202.3756"}, "pdf": {"name": "1202.3756.pdf", "metadata": {"source": "CRF", "title": "Price Updating in Combinatorial Prediction Markets with Bayesian Networks", "authors": ["David M. Pennock", "Lirong Xia"], "emails": [], "sections": [{"heading": null, "text": "To overcome the #P-hardness of computing/updating prices in logarithm market scoring rule-based (LMSR-based) combinatorial prediction markets, Chen et al. [5] recently used a simple Bayesian network to represent the prices of securities in combinatorial prediction markets for tournaments, and showed that two types of popular securities are structure preserving. In this paper, we significantly extend this idea by employing Bayesian networks in general combinatorial prediction markets. We reveal a very natural connection between LMSR-based combinatorial prediction markets and probabilistic belief aggregation,which leads to a complete characterization of all structure preserving securities for decomposable network structures. Notably, the main results by Chen et al. [5] are corollaries of our characterization. We then prove that in order for a very basic set of securities to be structure preserving, the graph of the Bayesian network must be decomposable. We also discuss some approximation techniques for securities that are not structure preserving."}, {"heading": "1 Introduction", "text": "In a predictionmarket, agents trade securities about the outcome of an uncertain event, for example, \u201cif event E happens, this security pays off $1\u201d. IfE does happen, the agent receives $1 for every share of the security owned; if E does not happen, the agent gets nothing. The price of a security reflects a collective value for \u201c$1 if E\u201d, or a group-wide or consensus probability of the eventE. The idea is to harness market efficiency and leverage agents\u2019 incentives to earn money in order to price events that might not otherwise be traded. In a predictionmarket, the primary goal is price discovery and thus information aggregation, not finding gains\n\u2217Part of this work was conducted at Yahoo! Research.\nfrom trade. The Iowa Electronic Market and Intrade are two examples of real-world prediction markets with a long history of tested results [1, 2]. See Chen and Pennock [7] for a recent survey of prediction mechanisms.\nIn this paper, we focus on prediction market mechanisms that employ a central market maker that determines the prices of securities algorithmically based on a cost function [6]. At any time, an interested agent can query the market maker for the price of a security and can either \u201ctake it or leave it\u201d: that is, decide to buy or sell some shares at the quoted price, or do nothing. After each (infinitesimal) trade, the market maker updates the prices of all securities. For example, suppose there is a prediction market on a Duke basketball game, and the current price for the security \u201cDuke wins\u201d is $ 0.8. If a risk-neutral agent believes that Duke will win with 0.9 probability, then she has an incentive to buy some shares of the security, because her expected profit for holding one share is 0.9 \u2212 0.8 = 0.1. If she buys some shares of the security, then its price will go up; on the other hand, if she sells some shares of the security (in this case, equivalent to buying shares of Duke\u2019s opponent), then its price will go down. See Section 2 for more details.\nSo far most work has been focusing on the prediction markets based on the cost function that corresponds to the logarithm market scoring rule (LMSR) [4, 5, 8, 16, 17]. Pricing securities in LMSR-based prediction markets by directly using the cost function takes time that is polynomial in the number of outcomes. Therefore, it works well if the number of outcomes is not too large. However, in many real-life situations the number of outcomes is exponentially large and has a combinatorial structure. Such situations are called combinatorial prediction markets [4, 5, 11, 16, 17]. For example, in the NCAA men\u2019s basketball tournament, there are 64 teams and therefore 63 matches in total to predict. Each match can be seen as a binary variable. It follows that the prediction market for this tournament has 263 \u2248 9.2 \u00d7 1018 outcomes. Therefore, in such situations, computing and updating the prices by directly using the cost function becomes computationally intractable. In fact,\npricing LMSR-based combinatorial prediction markets is #P-hard [4].\nIn LMSR-based prediction markets, at any time the prices of the securities that correspond to disjoint, exhaustive outcomes sum up to 1. Therefore, the market prices can be seen as a probability distribution (which we call market price distribution), and can be represented by a Bayesian network. This representation might drastically reduce the computational complexity of computing/updatingprices, especially when the network structure of the Bayesian network is simple. This idea was first explored by Chen et al. [5] for a class of LMSR-based combinatorial prediction markets for tournaments. They modeled the market price distribution by a Bayesian network whose graph is a balanced binary tree, and identified two types of popular securities with the following property: after any shares of any such securities are sold, the updated market price distribution can still be represented by a Bayesian network with the same structure. We call securities satisfying this property structure-preserving securities.\nHowever, the approach by Chen et al. has two limitations. First, their approach only works for LMSR-based combinatorial prediction markets for tournaments, and it is not clear how to extend the results to general LMSR-based combinatorial prediction markets. Second, they only identified two types of structure-preserving securities. It is not clear whether other types of popular securities are also structure preserving.\nOur contribution. In this paper, we significantly extend the idea in Chen at al. [5] to general LMSR-based combinatorial prediction markets. We first reveal a very natural connection between LMSR-based combinatorial prediction markets and probabilistic belief aggregation. More precisely, let Pr denote the current market price distribution, we show that for any security F , we can define a probability distribution PrF such that the updated market price distribution after selling some shares of F is exactly the same as the distribution obtained by aggregating Pr and PrF by a well-known parameterized opinion pool function called the logarithmic opinion pool, or LogOP. In light of this connection and a previous work on aggregatingBayesian networks [20], we obtain a full characterization of all structurepreserving securities for any decomposable network structure (that is, in the graph, any pair of parents of any variable are connected). Notably, the main results in Chen et al. [5] are corollaries of our characterization. We then show that in order for a very basic set of securities to be structure preserving, the network structure must be decomposable, which justifies the motivation for us to focus on decomposable network structures. Finally, we briefly discuss some ideas of approximations, when the security is not structure preserving."}, {"heading": "2 Preliminaries", "text": ""}, {"heading": "2.1 LMSR-based Prediction Market", "text": "Let \u2126 = {1, . . . , N} denote the set of outcomes of a random variable X . For any i \u2264 N , a security \u201cX = i\u201d means that holding each share of the security, the agent will receive $1 from the market maker, if X turns out to be i. In this paper, we use a quantity vector !q \u2208 RN to represent how many shares the market maker has sold in total for each security. That is, for each i \u2264 N , the market maker has sold !q(i) shares of \u201cX = i\u201d. A cost function based prediction market is characterized by a cost function C : RN \u2192 R and an initial quantity vector !q0. The price for \" shares of \u201cX = i\u201d is the marginal cost of incrementing the current quantity vector !q by \"!ei in C, where !ei is the N -dimensional vector whose ith component is 1 and the other components are 0. That is, if the agent wants to buy \" share of \u201cX = i\u201d, she must pay C(!q + \"!ei) \u2212 C(!q) to the market maker. The instantaneous price is lim!\u21920(C(!q+\"!ei)\u2212C(!q))/\", or equivalently \u2202C(!q)/\u2202!q(i). Note that price is always given in units of dollars per share, whereas cost is given in dollars.\nIn this paper, we focus on prediction markets with the cost function C(!q) = b log\n\u2211N i=1 e \"q(i)/b, where the parameter b is called the liquidity parameter for the market. This specific cost function corresponds to the logarithm market scoring rule (LMSR), and we call this type of prediction markets LMSR-based prediction markets. The following equation computes the instantaneous price I\"q(i) for the security \u201cX = i\u201d.\nI\"q(i) = \u2202C(!q)\n\u2202qi =\ne\"q(i)/b \u2211N\nj=1 e \"q(j)/b\nIt follows that \u2211 i\u2264N I\"q(i) = 1. Therefore, we also call I\"q the market price distribution."}, {"heading": "2.2 Combinatorial Prediction Markets", "text": "In combinatorial prediction markets [4], the set of outcomes \u2126 has a combinatorial structure. That is, each outcome is characterized by the values of a set of variables V = {X1, . . . , Xn}, where for each k \u2264 n, Xk takes a value in a domain \u2126k = {1, . . . , lk} with lk \u2265 2. It follows that \u2126 = \u21261 \u00d7 \u00b7 \u00b7 \u00b7 \u00d7 \u2126n. In this paper, a security is represented by a logical formula F over V in conjunctive normal form (CNF).1 That is, F = C1 \u2227 \u00b7 \u00b7 \u00b7 \u2227 CK , where for any i \u2264 K , Ci = Li1 \u2228 \u00b7 \u00b7 \u00b7 \u2228 Lisi , and L i j is either [Xk = l] or \u00ac[Xk = l] (equivalently, Xk *= l) for some variable Xk \u2208 V and some value l \u2208 \u2126k. Cj is called a clause and Lij is called a literal. If F is satisfied under the eventual true outcome (which is a valuation over V), then the market maker should pay the agent $1 for each share of F the agent holds; otherwise the agent receives nothing for\n1The representation of F does not affect our characterization results. It only affects the computational complexity of some problems studied later in this paper.\nholding F .\nBy definition, in an LMSR-based combinatorial prediction market, the instantaneous price ofF is the sum of the prices of the securities that correspond to the valuations under which F is satisfied. That is, I\"q(F ) = \u2211 \"v:F (\"v)=1 I\"q(!v) = ( \u2211\n\"v:F (\"v)=1 e \"q(\"v)/b)/(\n\u2211\n\"y e \"q(\"y)/b). Chen et al. [5] have\nshown that the price for\u2206b shares of F is b log(e\u2206I\"q(F )+ 1 \u2212 I\"q(F )). We note that computing I\"q(F ) is harder than computing marginal probabilities in I\"q , which is a wellknown #P-hard problem [9].2 However, there are many practical algorithms that compute I\"q(F ). For example, computing I\"q(F ) can be reduced to a special weighted model counting problem [3, 21]. In this paper, we do not focus on computing the (instantaneous) prices of securities; we will focus on the price-updating phase, that is, characterizing structure-preserving securities."}, {"heading": "2.3 Bayesian Networks and Probabilistic Belief Aggregation", "text": "A Bayesian network over V is a compact representation for a probability distribution Pr over V . It is composed of two parts: a direct acyclic graph (DAG) G = (V , E), and conditional preference tables (CPTs), one for each variable Xk \u2208 V , which specifies the conditional probability of Xk given any valuation of its parents in G. For any G and any Xk \u2208 V , let PaG(Xk) denote the set of parents of Xk in G; let ChG(Xk) denote the set of children of Xk in G; let DeG(Xk) denote the set of all descendants of Xk in G. The subscript G is sometimes omitted when causing no confusion. For any valuation !v of V , Pr(!v) = \u220f\nX\u2208V Pr(!v(X)|!v(Pa(X))), where for any V \u2286 V , !v(V ) is the valuation over V that agrees with !v. We say that Pr is compatible with G.\nFor any variableXk, let BlG(Xk) denote theMarkov blanket of Xk. That is, BlG(Xk) = Pa(Xk) \u222a Ch(Xk) \u222a \u22c3\nX\u2208Ch(Xk)(Pa(X) \\ {Xk}). A DAG G is decomposable, if for each variableXk \u2208 V , there is an edge between each pair of its parents in G. In other words,G is decomposable if for each variable Xk, BlG(Xk) = Pa(Xk) \u222a Ch(Xk). A probability distribution Pr is G-compatible, denoted by Pr \u223c G, if it can be represented by a Bayesian network whose DAG is G. Any G-compatible probability distribution Pr satisfies all local Markov properties in G: any variable Xk is conditionally independent of V \\ ({Xk} \u222a BlG(Xk)) given any valuation of BlG(Xk).\nProbabilistic belief aggregation has attracted a lot of interests in statistics [12, 13], and more recently in artificial intelligence [15, 18, 20]. The basic problem is to study how to aggregate the beliefs of multiple agents (represent-\n2In the setting of [5], computing I!q(F ) amounts to computing a marginal probability in a tree-structured Bayesian network (see Example 1), which the well-known belief propagation algorithm [19] takes polynomial time to solve.\ned by probability distributions) to a single probability distribution. The function that takes individual distributions as inputs and outputs a single combined distribution is a called an opinion pool function. One of the most wellknown opinion pool function is logarithmic opinion pool (LogOP), which is defined as follows (we only need to consider two inputs in this paper). Definition 1 Let Pr1 and Pr2 be two probability distributions over \u2126. For any \u03b11,\u03b12 \u2208 R, let Pr = LogOP(\u03b11Pr1,\u03b12Pr2) denote the probability distribution such that for any !v \u2208 \u2126, Pr(!v) \u221d ( Pr1(!v) )\u03b11 \u00b7 ( Pr2(!v) )\u03b12 .\nTo better present our results, we define the following terms. Definition 2 A DAG G admits a security F , if for any Gcompatible market price distribution Pr and any \u2206 \u2208 R, after \u2206b shares of F are sold, the new market price distribution is also G-compatible. In this case, we also say that F is structure preserving for G.\nWe remark that it is possible that for a particular Gcompatible market price distribution, after some shares of a non-structure-preserving security F are sold, the new market price distribution is still G-compatible."}, {"heading": "2.4 A Combinatorial Prediction Market for Tournaments", "text": "Chen et al. [5] used the following Bayesian network structure for pricing combinatorial prediction markets for tournaments of 2m teams. Definition 3 The tournament of 2m (m \u2265 2) teams {T1, . . . , T2m} is modeled by a binary tree composed of 2m \u2212 1 variables as follows. For any 1 \u2264 i \u2264 m, let Ri = {X2m\u2212i , . . . , X2m\u2212i+1\u22121}. For any j \u2264 2m\u22121 \u2212 1, X2j andX2j+1 are the two children ofXj;Xj takes a value in \u2126j , which is defined recursively as follows: for any j such that 2m\u22121 \u2264 j \u2264 2m \u2212 1, \u2126j = {T2j+1\u22122m , T2j+2\u22122m}; for any j \u2264 2m\u22121 \u2212 1, \u2126j = \u21262j \u222a \u21262j+1. That is, the domain of Xj is composed of all teams that can reachXj , and Ri is composed of all round i matches. The set of all variables is Vm = R1 \u222a . . . \u222aRm.\nExample 1Figure 1 illustrates a tournament of eight teams. The domain of each variable is also shown.\nIn this model, not all variables in Vm are binary, and an outcome is a valuation of the variables in Vm. We note that\nsome outcomes never happen in real-life tournaments. For example, if we already haveX1 = T1 (meaning that Team 1 is the winner of the whole tournament), then we cannot have X2 = T2 (which implies that Team 1 loses to Team 2 in the first round). Chen et al. [5] avoided this problem by focusing on the market price distributions that assign 0 probability to these inconsistent outcomes.\nChen et al. [5] proved the followingmain results: two types of popular securities are structure preserving for the DAG defined in Definition 3. The first type is composed of all securities of the form \u201cTeam i wins game Xk\u201d (Theorem 3.1 in Chen et al. [5]), which corresponds to the security [Xk = Ti]; the second type is composed of all securities of the form \u201cTeam i1 and i2 win games Xk1 and Xk2 , respectively, where Xk1 is the parent of Xk2\u201d (Theorem 3.2 in Chen et al. [5]), which corresponds to the security (Xk1 = Ti1) \u2227 (Xk2 = Ti2).\nAs we will see, our results significantly extend the results by Chen et al. in two dimensions: first, we give a complete characterization of all structure-preserving securities, including the two types studied by Chen et al., and second, our results work for any combinatorial prediction market, including the one illustrated in this section."}, {"heading": "3 A Natural Connection between LMSR and LogOP", "text": "In this section, we reveal a very natural connection between LMSR-based combinatorial prediction markets and probabilistic belief aggregation by LogOP. At a hight level, these two approaches (prediction markets and probabilistic belief aggregation) are close. In probabilistic belief aggregation, often, the agents\u2019 beliefs are expressed explicitly as probability distributions, so that we can directly use an opinion pool function to aggregate these distributions. On the other hand, in prediction markets, agents implicitly express part of their beliefs via their behavior in the markets (buying or selling securities), and the market price reflects the aggregated belief. Technically the connection is quite simple and intuitive: we first interpret the agents\u2019 behavior of buying a security F as a probability distribution PrF ; then, we use LogOP to merge PrF and the current market price distribution Pr, and show that the new distribution is exactly the updated market price distribution Pr after F is sold. PrF is defined as follows. Definition 4 For any logical formula F , let PrF denote the probability distribution such that for any valuation !v, PrF (!v) \u221d eF (\"v).\nThe main theorem of this section is the following. Theorem 1 Let \u2206 \u2208 R, and let Pr (respectively, Pr) denote the market price distribution before (respectively, after) an agent purchases \u2206b shares of a security F . We have Pr = LogOP(Pr,\u2206PrF ). Moreover, if both Pr and PrF satisfy all local Markov properties in a DAG G, then\nPr also satisfies all local Markov properties in G. Proof: Let !q denote the quantity vector corresponding to Pr. Let !1F denote the 0-1 vector over \u2126, where for any valuation !v over V , the !v component of !1F is F (!v). Let !t = !q + \u2206b!1F . It follows that Pr = I\"t. Let Pr\u2217 = LogOP(Pr, PrF ). For any pair of valuations !u, !w, we\nhave I\"t(!u) I\"t(!w) = I\"q(!u) I\"q(!w) \u00b7 e\u2206F (\"u) e\u2206F (\"w) = Pr(!u) Pr(!w) \u00b7\n(\nPrF (!u) PrF (!w)\n)\u2206\n=\nPr\u2217(!u) Pr\u2217(!w) . Therefore, Pr = Pr\u2217.\nIf both Pr and PrF satisfy all local Markov properties in G, then for any variable Xk, any i \u2264 lk, any valuation !v of BlG(Xk), and any pair of valuations !u, !w of V \\ ({Xk} \u222a BlG(Xk)), we have Pr(Xk = i,!v, !u) Pr(Xk = i,!v, !w) = PrF (Xk = i,!v, !u) PrF (Xk = i,!v, !w) = 1. Therefore, Pr(Xk = i,!v, !u) Pr(Xk = i,!v, !w) = Pr(Xk = i,!v, !u) Pr(Xk = i,!v, !w) \u00b7 ( PrF (Xk = i,!v, !u) PrF (Xk = i,!v, !w) )\u2206 = 1, which means that Pr also satisfies all local Markov properties in G. !\nWe are not aware of any previous work pointing out this simple and intuitive connection. The second part of Theorem 1 states that LogOP preserves the satisfiability of local Markov properties. This observation will be useful in proving our characterization of the structure-preserving securities. We note that in Theorem 1, when\u2206 < 0, an agent purchasing\u2206b shares of F from the market maker is equivalent to she selling \u2212\u2206b shares of F to the market maker.\nDefinition 4 did not specify how PrF is represented (e.g., by a Bayesian network). We next provide a necessary and sufficient condition on F for PrF to satisfy all local Markov properties in a DAG G. Definition 5 A logical formula F is compatible with a DAG G, if for any variable Xk, any valuation !v of BlG(Xk), any values i1, i2 \u2208 \u2126k, and any pair of valuations !u, !w of V \\ (BlG(Xk)\u222a{Xk}), the following condition holds: if F (Xk = i1,!v, !u) *= F (Xk = i2,!v, !u), then F (Xk = i1,!v, !u) = F (Xk = i1,!v, !w). Example 2 Let G be the DAG in Example 1. Let F = (X2 = T1) \u2227 (X5 = T3). F is compatible with G. Let F \u2032 = (X2 = T1) \u2227 (X5 = T3) \u2227 (X3 = T8). F \u2032 is not compatible with G, because F \u2032(X2 = T1, X5 = T3, X3 = T8) = 1 *= 0 = F \u2032(X2 = T1, X5 = T4, X3 = T8) and F \u2032(X2 = T1, X5 = T3, X3 = T8) = 1 *= 0 = F \u2032(X2 = T1, X5 = T3, X3 = T5). This violates the condition in Definition 5, where k = 5, i1 = T3, i2 = T4, !v = [X2 = T1], !u is a valuation where X3 = T8, and !w is a valuation where X3 = T5.\nThe condition in Definition 5 may seem unnatural at first, but in fact it has a quite intuitive explanation: F is compatible with G if for every variable Xk, the capability of\nchanging the value of F by changing the value of Xk only depends on the variables in the Markov blanket ofXk. Proposition 1 Let G be a DAG. PrF satisfies all local Markov properties in G if and only if F is compatible with G. Proof: Suppose PrF satisfies all local Markov properties. We recall that for any valuation !v, there are only two possible values of PrF (!v)\u2014it is either e/\u03b1 or 1/\u03b1, where \u03b1 is a normalizing factor. Therefore, suppose PrF (Xk = i1,!v, !u) *= PrF (Xk = i2,!v, !u), then we must have PrF (Xk = i1,!v, !w) = PrF (Xk = i1,!v, !u) *= PrF (Xk = i2,!v, !w) = PrF (Xk = i2,!v, !u). This corresponds to the condition in Definition 5, which proves the proposition. !\nIn general, satisfying all local Markov properties in G is a necessary but not sufficient condition for a probability distribution to be compatible with G. However, it is sufficient when G is decomposable, because for any variable Xk, BlG(Xk) = Pa(Xk) \u222a Ch(Xk). Therefore, we immediately have the following corollaries of Theorem 1 and Proposition 1 for decomposable DAGs. Corollary 1 PrF is compatible with a decomposable DAG G if and only if F is compatible with G.\nCorollary 2 Let \u2206 \u2208 R. Let Pr (respectively, Pr) denote the market price before (respectively, after) an agent purchases \u2206b shares of a security F . If both Pr and F are compatible with a decomposable DAG G, then Pr is also compatible with G.\nWe next show that the following securities are compatible with G. Proposition 2 Let G be a decomposable DAG. Any security F that only uses the variables in a clique in G is compatible with G. Proof: Let X denote the set of variables used in F . For any Xk \u2208 X , because X is a clique, X \u2286 BlG(Xk) = Pa(Xk) \u222a Ch(Xk). Therefore, the value of any variable in V \\ ({Xk} \u222a BlG(Xk)) does not affect the value of F , which means that F is compatible with G. !\nIn general, checking whether F is compatible with a decomposable DAG is coNP-complete. Proposition 3 It is coNP-complete to check whether a logical formula F is compatible with a decomposable DAG G. Proof: We prove that the coNP-hardness holds even when all variables are binary and G has no edges. For any k \u2264 n, let \u2126k = {1, 2}. Our proof is by a reduction from the complement of the well-known NP-complete problem SAT. In a SAT instance, we are given a logical formula H in CNF, and we are asked whether there exists a valuation under whichH = 1. Without loss of generality, letH be a CNF over {X2, . . . , Xn} that is not a tautology. Let !uH denote an arbitrary valuation under whichH is false. !uH can\nbe easily found by assigning values to make an arbitrary clause false. Let F = (X1 = 1) \u2227H .\nIf H is satisfiable, then there exists a valuation !vH under which H is true. Because F (X1 = 1,!vH) = 1 *= 0 = F (X1 = 2,!vH) and F (X1 = 1,!vH) = 1 *= 0 = F (X1 = 1, !uH), F is not compatible with G.\nOn the other hand, if H is not satisfiable, then for any valuation !v over {X1, . . . , Xn}, H is false, which means that F is always false. Therefore, F is compatible withG. This proves the coNP-hardess of the problem.\nThe membership in coNP is straightforward: it is easy to verify whether the condition in Definition 5 is violated, given k, i1, i2,!v, !u, and !w. Therefore, it is coNP-complete to verify whether F is compatible with G. !"}, {"heading": "4 Characterizing Structure-preserving Securities for Decomposable DAGs", "text": "In this section, we use the connection revealed in the last section to obtain a full characterization of structurepreserving securities for decomposable DAGs. This is the main theorem of the paper. We note that Corollary 2 implies that for F to be structure preserving for a decomposable DAG G, it suffices for F to be compatible with G. However, it is not immediately clear how to efficiently compute the new market price distribution. We say that a variable Xk is pivotal in F , if there exists a valuation !v of V \\ {Xk} and i1, i2 \u2264 lk such that F (Xk = i1,!v) *= F (Xk = i2,!v). Theorem 2 Let G be a decomposable DAG. F is structure preserving for G if and only if F is compatible with G. Moreover, after any shares of F is purchased, the new market price distribution can be computed in polynomial time, where only the CPTs of the pivotal variables and the ancestors of the pivotal variables in F are updated.\nProof: The \u201conly if\u201d part is obvious. Let Pru denote the uniform distribution, which is compatible with G. Then, by Theorem 1, for any structure-preserving security F , the market price after b shares of F are sold is LogOP(Pru, PrF ) = PrF , which is compatible with G. By Proposition 1, F is compatible with G.\nNext, we prove the \u201cif\u201d part by presenting a polynomialtime price-updating algorithm. By Theorem 1, after \u2206b shares of F are purchased, the market price distribution becomes LogOP(Pr,\u2206PrF ). It suffices if we can directly compute the outcome of LogOP. Fortunately, when the graph is decomposable, we can use the polynomial-time algorithm devised by Pennock andWellman (Section 3.4.1 in Pennock andWellman [20]) to compute LogOP(Pr,\u2206PrF ). W.l.o.g. for any k \u2264 n, Pa(Xk) \u2286 {X1, . . . , Xk\u22121}. The algorithm starts with the last variableXn, and updates CPTs of the variables in the reverse order. Given any valuation !v of Pa(Xn), for any i \u2264 lk, the algorithm computes\nPr(Xn = i,!v)/Pr(Xn = 1,!v), which uniquely determines the conditional probability Pr(Xn|!v). Then, the algorithm moves on toXn\u22121, and computes the conditional probabilities in a similar way, etc. We reproduce the algorithm in Pennock and Wellman [20] for completeness of the paper (Algorithm 1). For any variable Xk, we let [De(Xk) = !1] denote the event where all descendants of Xk take 1; for any Xj \u2208 De(Xk), we let [De(Xk)\u2212j = !1] denote the event where all descendants ofXk, exceptXj , take 1.\nAlgorithm 1: CompPrice Input: A graphG, a G-compatible probability distribution Pr, a G-compatible logical formula F , and\u2206 \u2208 R. Output: The market price distribution Pr after\u2206b shares\nof F are sold. 1 Compute the CPTs of PrF . 2 Pr(Xn|Pa(Xn)) \u221d Pr(Xn|Pa(Xn)) ( PrF (Xn|Pa(Xn)) )\u2206\n. 3 for k = n\u2212 1 downto 1 do 4 Pr(Xk|De(Xk) = !1,Pa(Xk)) \u221d Pr(Xk|De(Xk) =\n!1,Pa(Xk)) ( PrF (Xk|De(Xk) = !1,Pa(Xk)) )\u2206\n. 5 for i = 2 to lk do 6 Pr(Xk = 1|Pa(Xk)) Pr(Xk = i|Pa(Xk)) =\nPr(Xk = 1|De(Xk) = !1,Pa(Xk)) Pr(Xk = i|De(Xk) = !1,Pa(Xk)) \u00d7\n7 \u220f\nXj\u2208De(Xk) Pr(Xj = 1|Xk = i,De(Xk)\u2212j = !1,Pa(Xk)) Pr(Xj = 1|Xk = 1,De(Xk)\u2212j = !1, Pa(Xk))\n8 end 9 Compute Pr(Xk|Pa(Xk)). 10 end\nIt is not hard to see that in Algorithm 1, if a variable X is neither an ancestor of any pivotal variable nor pivotal, then the CPT ofX is not updated. !\nTheorem 2 is two-fold. On the positive side, if we can show that a security F is compatible with G, then F is very favorable for price-updating\u2014the market price distribution after any shares of F are traded is still G-compatible, as long as the the market price distribution before the trade is G-compatible. In particular, let G be the graph in Definition 3, if a security F is G-compatible, then we can ignore the assumption made in Chen et al. [5] that the inconsistent outcomes are assigned probability 0. Even though checking whether F is compatible with G is coNP-hard (Proposition 3), this compatibility check can be done offline.\nOn the negative side, requiring a security F to be Gcompatible is a strong condition\u2014it requires that trading any share of F does not change the network structure for any G-compatible market price distribution. It is possible that when the agents are only allowed to trade securities in some specific set (which might contain securities that are not compatible with G) from the very beginning, the mar-\nket price distribution is always compatible with G. Exploring such set of securities is a hard and practical problem for future research.\nWe recall that in a decomposable DAG G, any formula F that only uses the variables in a clique inG isG-compatible (Proposition 2). Therefore, we immediately obtain the following corollary. Corollary 3 Let G be a decomposable DAG. Any formula F that only uses the variables in a clique in G is structure preserving for G.\nWe note that the two main results in Chen et al. [5] are corollaries of Corollary 3. We recall that the Bayesian network used by Chen et al. is tree-structured (see Example 1), which is decomposable. Therefore, by Corollary 3, any security that only involves a single variable is structure preserving. In particular, for any team i and any variable Xk, the security [Xk = Ti] is structure preserving, which is Theorem 3.1 in Chen et al. [5]. For any pair of variables Xk1 and Xk2 where Xk1 is the parent of Xk2 , by Corollary 3, any security that only involves Xk1 and Xk2 is structure preserving. In particular, for any pair of teams Ti1 and Ti2 , the security (Xk1 = Ti1) \u2227 (Xk2 = Ti2) is structure preserving, which is Theorem 3.2 in Chen et al. [5]."}, {"heading": "5 Network Structures That Admit a Basic Set of Securities", "text": "In this section, we characterize the Bayesian network structures that admit a basic set of securities, which justifies our focus on decomposable network structures in the last section.\nTo prove our theorem, we will make use of the following lemma proved by Chen et al. [5], where Pr (respectively, Pr) is the market price distribution before (respectively, after) \u2206b shares of the security is purchased. Lemma 1 (Corollary 3.2 of [5]) Suppose \u2206b shares are purchased for event A, then for any events B and E,\nPr(B|E) = Pr(B|E) [ e\u2206Pr(A|BE) + Pr(A\u0304|BE) e\u2206Pr(A|E) + Pr(A\u0304|E) ]\nTheorem 3 Let G be a DAG. If for every k \u2264 n and every i \u2264 lk, the security [Xk = i] is structure preserving for G, then G is decomposable. Proof: For the sake of contradiction, suppose G is not decomposable. Then, there exists k3 \u2264 n and Xk1 , Xk2 \u2208 Pa(Xk3) such that there is no edge between Xk1 and Xk2 in G. W.l.o.g. let k1 = 1, k2 = 2, k3 = 3, and X1 is not a descendant of X2 in G. We define a G-compatible market price distribution Pr\u2217 as follows. For any valuation !v of Pa(X3) \\ {X1, X2}, we let Pr\u2217(X3 = 1|X1 = 1, X2 = 1,!v) = 14 and Pr\u2217(X3 = 2|X1 = 1, X2 = 1,!v) = 3 4 . For any k\u2032 \u2264 n, we let Pr\u2217(Xk\u2032 = 1|Pa(Xk\u2032 )) = Pr\u2217(Xk\u2032 = 2|Pa(Xk\u2032)) = 12 , if these conditional probabilities are not\ndefined previously. Let Pr\u2217 denote the market price distribution after \u2206b shares of [X3 = 1] are sold to an agent. Because [X3 = 1] is structure preserving for G, Pr\u2217 is Gcompatible. In what follows, we use Lemma 1 to prove that in Pr\u2217,X1 andX2 are not independent given any valuation !v of X2, which contradicts the assumption that there is no edge betweenX1 andX2 inG, andX1 is not a descendent ofX2.\nWe note that essentially Pr\u2217 is compatible with a DAG where there are only two edges: one from X1 to X3 and the other from X2 to X3. Therefore, in Pr\u2217, PaG(X2) is independent from X1, X2, and X3. For any valuation !v of PaG(X2), we have the following calculations. For any k = 1, 2, 3, we let E1k denote the valuationXk = 1.\n\u2022 Pr\u2217(E13 |!v) = Pr\u2217(E13 ) = 716 .\n\u2022 Pr\u2217(E13 |E11 ,!v) = Pr\u2217(E13 |E11) = 38 , Pr\u2217(E 1 3 |E 1 2 ,!v) = Pr\u2217(E13 |E12) = 38 .\n\u2022 Pr\u2217(E13 |E11 , E12 ,!v) = Pr\u2217(E13 |E11 , E12 ) = 14 .\nWe calculate Pr\u2217(E12 |!v) by Lemma 1 as follows (where A = E13 , B = E12 , and E = !v).\nPr\u2217(E12 |!v)\n=Pr\u2217(E12 |!v)\n[\ne\u2206Pr\u2217(E13 |E12 ,!v) + Pr\u2217(E13 |E12 ,!v) e\u2206Pr\u2217(E13 |!v) + Pr\u2217(E13 |!v)\n]\n=Pr\u2217(E12 ) [ e\u22066 + 10\ne\u22067 + 9\n]\nWe then calculate Pr\u2217(E12 |E11 ,!v) by Lemma 1 as follows (where A = E13 , B = E12 , and E = (E11 ,!v)). Because X1 is independent from X2 in Pr\u2217, we have Pr\u2217(E12 |E11 ,!v) = Pr\u2217(E12 |E11) = Pr\u2217(E12 ).\nPr\u2217(E12 |E11 ,!v)\n=Pr\u2217(E12 |E11 ,!v) [ e\u2206Pr\u2217(E13 |E 1 1 ,E 1 2 ,\"v)+Pr\u2217(E13 |E 1 1 ,E 1 2 ,\"v)\ne\u2206Pr\u2217(E13 |E 1 1 ,\"v)+Pr\u2217(E13 |E 1 1 ,\"v)\n]\n=Pr\u2217(E12) [ e\u22062 + 6\ne\u22063 + 5\n]\nFor any \u2206 *= 0, e \u22062 + 6\ne\u22063 + 5 *=\ne\u22066 + 10\ne\u22067 + 9 . Therefore, when\n\u2206 *= 0, Pr\u2217(E12 |!v) *= Pr\u2217(E12 |E11 ,!v), which means that given any valuation !v of the parents of X2 in G, X1 and X2 are not independent. However, because Pr\u2217 is Gcompatible and X1 is not a descendant of X2, we must have that X1 and X2 are independent given any valuation of the parents of X2, which is a contradiction. Therefore, G is decomposable. !\nIt follows from Theorem 1 and Corollary 3 that for any variable Xk and any value i \u2264 lk, the security [Xk = i] is structure preserving for any decomposable DAG over V , which leads to the following theorem.\nTheorem 4 A DAG G is decomposable if and only if for every k \u2264 n and every i \u2264 lk, the security [Xk = i] is structure preserving for G."}, {"heading": "6 Approximate Price Updating", "text": "For a security F , being compatible with a sparse decomposable DAG is a strong condition. Therefore, in practice it is important to study how to approximately update the market price distribution when a security F is not compatible with G, while keeping the Bayesian network structure G the same. Intuitively there are at least two ways to do so. The first is to approximate F by a G-compatible logical formula F \u2032 that is closest to F in terms of Hamming distance. Then, after F is sold, we update the market price distribution as if F \u2032 is sold. We do not pursue this approach in this paper.\nIn this section, we propose an approximation in light of the connection we revealed in Section 3. We recall that F corresponds to a distribution PrF (Definition 4), and subsequently price-updating in LMSR-based markets corresponds to aggregating Pr and PrF by LogOP. Therefore, we seek for a probability distribution Pr\u2217F that is compatible withG, and is as close to PrF as possible. A natural metric that measures the closeness between two probability distributions is the KL divergence (also known as relative entropy). For any pair of probability distributions Pr and Pr\u2032, KL(Pr, Pr\u2032) = \u2211\n\"v Pr(!v) log(Pr \u2032(!v)/Pr(!v)). We note that\nKL divergence is not a distance, because it is not commutative, that is, usually KL(Pr, Pr\u2032) *= KL(Pr\u2032, Pr). Then, after \u2206b shares of F is sold, we update the market price distribution by using Algorithm 1 to compute LogOP(Pr,\u2206Pr\u2217F ), where Pr is the market price distribution before F is sold.\nGiven PrF , finding Pr\u2217F that minimizes its KL divergence from PrF is a classical problem in Bayesian network learning, for which there is a conceptually simple and intuitive solution, defined as follows. Definition 6 For any logical formula F , let Pr\u2217F denote the G-compatible distribution where for any variable Xk, Pr\u2217F (Xk|PaG(Xk)) = PrF (Xk|PaG(Xk)).\nThat is, in Pr\u2217F , the CPT entry of Xk given any valuation !v of the parents ofXk in G is exactly the same as the conditional probability PrF (Xk|!v). Theorem 5 (Theorem 17.2 in Darwiche [10])\nPr\u2217F = arg minPr\u223cGKL(PrF ,Pr)\nWhen F is notG-compatible, PrF (Xk|PaG(Xk))might be hard to compute. The following proposition simplifies the computation, whose proof directly follows the definition of PrF and Bayes\u2019 rule, and therefore is omitted. Proposition 4 For any variableXk, any set of variables Y such that Xk *\u2208 Y , any valuation !y of Y , and any i \u2264 lk,\nwe have:\nPrF (Xk = i|!y) =\n(e\u2212 1)gF (Xk = i, !y) + \u220f\nXl (\u2208(Y \u222a{Xk}) |\u2126l|\n(e\u2212 1)gF (!y) + \u220f\nXl (\u2208Y |\u2126l|\nHere for any set of variable Z and any valuation !z of Z , gF (!z) = |{!v : F (!v) = 1 and !v(Z) = !z}|, where !v(Z) is the valuation over Z that agrees with !v.\nTherefore, computing PrF (Xk = i|!y) amounts to computing gF (Xk = i, !y) and gF (!y). These are standard model counting problems, which are #P-complete. However, there are many practical algorithms for computing their exact values as well as approximations [14]."}, {"heading": "7 Future Work", "text": "A number of questions remain for future research. Can we design efficient (randomized/approximation) algorithms to compute the price of a security when the market price distribution is represented by a sparse decomposable Bayesian network?3 How can we evaluate our approximation technique in real-life combinatorial prediction markets? Are there any better approximation methods? Can we find a natural set of (not necessarily structure-preserving) securities such that the market price distribution is always Gcompatible, if only the securities in this set are traded? More generally, we believe that the connection between prediction markets and probabilistic belief aggregationwill shed some light on designing better combinatorial prediction markets."}, {"heading": "Acknowledgements", "text": "Lirong Xia acknowledges a James B. Duke Fellowship and Vincent Conitzer\u2019s NSF CAREER 0953756 and IIS0812113, and an Alfred P. Sloan fellowship for support. We thank Yiling Chen and all UAI-11 reviewers for helpful suggestions and comments."}], "references": [{"title": "Results from a dozen years of election futures markets research", "author": ["Joyce E. Berg", "Robert Forsythe", "Forrest D. Nelson", "Thomas A. Rietz"], "venue": "The Handbook of Experimental Economics Results,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2008}, {"title": "Prediction market accuracy in the long run", "author": ["Joyce E. Berg", "Forrest D. Nelson", "Thomas A. Rietz"], "venue": "International Journal of Forecasting,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "On probabilistic inference by weighted model counting", "author": ["Mark Chavira", "Adnan Darwiche"], "venue": "Artificial Intelligence,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "Complexity of combinatorial market makers", "author": ["Yiling Chen", "Lance Fortnow", "Nicolas Lambert", "David M. Pennock", "Jennifer Wortman"], "venue": "In Proc. of EC,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2008}, {"title": "Pricing combinatorial markets for tournaments", "author": ["Yiling Chen", "Sharad Goel", "David M. Pennock"], "venue": "In Proc. of STOC,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "A utility framework for bounded-loss market makers", "author": ["Yiling Chen", "David M. Pennock"], "venue": "In Proc. of UAI,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2007}, {"title": "Designing markets for prediction", "author": ["Yiling Chen", "David M. Pennock"], "venue": "AI Magazine,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2010}, {"title": "A new understanding of prediction markets via no-regret learning", "author": ["Yiling Chen", "Jennifer Wortman Vaughan"], "venue": "In Proc. of EC,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "The computational complexity of probabilistic inference using Bayes belief networks", "author": ["Gregory F. Cooper"], "venue": "Artificial Intelligence,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1990}, {"title": "Modeling and Reasoning with Bayesian Networks", "author": ["Adnan Darwiche"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "Betting Boolean-style: A framework for trading in securities based on logical formulas", "author": ["Lance Fortnow", "Joe Kilian", "David M. Pennock", "Michael P. Wellman"], "venue": "Decision Support Systems,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2004}, {"title": "Group consensus probability distributions: A critical survey", "author": ["S. French"], "venue": "In Bayesian Statistics", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1985}, {"title": "Combining probability distributions: A critique and an annotated bibliography", "author": ["Christian Genest", "James V. Zidek"], "venue": "Statistical Science,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1986}, {"title": "Agreeing to disagree: Leveraging consensus and divergence in bayesian belief aggregation", "author": ["Kshanti Greene", "George Luger"], "venue": "In AAAI Spring Symposium,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "Combinatorial information market design", "author": ["Robin Hanson"], "venue": "Information Systems Frontiers,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2003}, {"title": "Logarithmic market scoring rules for modular combinatorial information aggregation", "author": ["Robin Hanson"], "venue": "Journal of Prediction Markets,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2007}, {"title": "Aggregating learned probabilistic beliefs", "author": ["II Pedrito Maynard-Reid", "Urszula Chajewska"], "venue": "In Proc. of UAI,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2001}, {"title": "Probabilistic reasoning in intelligent systems: Networks of plausible inference", "author": ["Judea Pearl"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1988}, {"title": "Graphical models for groups: Belief aggregation and risk sharing", "author": ["David M. Pennock", "Michael P. Wellman"], "venue": "Decision Analysis,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2005}, {"title": "Performing Bayesian inference by weighted model counting", "author": ["Tian Sang", "Paul Bearne", "Henry Kautz"], "venue": "In Proc. of AAAI,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2005}], "referenceMentions": [{"referenceID": 4, "context": "[5] recently used a simple Bayesian network to represent the prices of securities in combinatorial prediction markets for tournaments, and showed that two types of popular securities are structure preserving.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] are corollaries of our characterization.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "The Iowa Electronic Market and Intrade are two examples of real-world prediction markets with a long history of tested results [1, 2].", "startOffset": 127, "endOffset": 133}, {"referenceID": 1, "context": "The Iowa Electronic Market and Intrade are two examples of real-world prediction markets with a long history of tested results [1, 2].", "startOffset": 127, "endOffset": 133}, {"referenceID": 6, "context": "See Chen and Pennock [7] for a recent survey of prediction mechanisms.", "startOffset": 21, "endOffset": 24}, {"referenceID": 5, "context": "In this paper, we focus on prediction market mechanisms that employ a central market maker that determines the prices of securities algorithmically based on a cost function [6].", "startOffset": 173, "endOffset": 176}, {"referenceID": 3, "context": "So far most work has been focusing on the prediction markets based on the cost function that corresponds to the logarithm market scoring rule (LMSR) [4, 5, 8, 16, 17].", "startOffset": 149, "endOffset": 166}, {"referenceID": 4, "context": "So far most work has been focusing on the prediction markets based on the cost function that corresponds to the logarithm market scoring rule (LMSR) [4, 5, 8, 16, 17].", "startOffset": 149, "endOffset": 166}, {"referenceID": 7, "context": "So far most work has been focusing on the prediction markets based on the cost function that corresponds to the logarithm market scoring rule (LMSR) [4, 5, 8, 16, 17].", "startOffset": 149, "endOffset": 166}, {"referenceID": 14, "context": "So far most work has been focusing on the prediction markets based on the cost function that corresponds to the logarithm market scoring rule (LMSR) [4, 5, 8, 16, 17].", "startOffset": 149, "endOffset": 166}, {"referenceID": 15, "context": "So far most work has been focusing on the prediction markets based on the cost function that corresponds to the logarithm market scoring rule (LMSR) [4, 5, 8, 16, 17].", "startOffset": 149, "endOffset": 166}, {"referenceID": 3, "context": "Such situations are called combinatorial prediction markets [4, 5, 11, 16, 17].", "startOffset": 60, "endOffset": 78}, {"referenceID": 4, "context": "Such situations are called combinatorial prediction markets [4, 5, 11, 16, 17].", "startOffset": 60, "endOffset": 78}, {"referenceID": 10, "context": "Such situations are called combinatorial prediction markets [4, 5, 11, 16, 17].", "startOffset": 60, "endOffset": 78}, {"referenceID": 14, "context": "Such situations are called combinatorial prediction markets [4, 5, 11, 16, 17].", "startOffset": 60, "endOffset": 78}, {"referenceID": 15, "context": "Such situations are called combinatorial prediction markets [4, 5, 11, 16, 17].", "startOffset": 60, "endOffset": 78}, {"referenceID": 3, "context": "pricing LMSR-based combinatorial prediction markets is #P-hard [4].", "startOffset": 63, "endOffset": 66}, {"referenceID": 4, "context": "[5] for a class of LMSR-based combinatorial prediction markets for tournaments.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] to general LMSR-based combinatorial prediction markets.", "startOffset": 0, "endOffset": 3}, {"referenceID": 18, "context": "In light of this connection and a previous work on aggregatingBayesian networks [20], we obtain a full characterization of all structurepreserving securities for any decomposable network structure (that is, in the graph, any pair of parents of any variable are connected).", "startOffset": 80, "endOffset": 84}, {"referenceID": 4, "context": "[5] are corollaries of our characterization.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "In combinatorial prediction markets [4], the set of outcomes \u03a9 has a combinatorial structure.", "startOffset": 36, "endOffset": 39}, {"referenceID": 4, "context": "[5] have shown that the price for\u2206b shares of F is b log(eI\"q(F )+ 1 \u2212 I\"q(F )).", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "We note that computing I\"q(F ) is harder than computing marginal probabilities in I\"q , which is a wellknown #P-hard problem [9].", "startOffset": 125, "endOffset": 128}, {"referenceID": 2, "context": "For example, computing I\"q(F ) can be reduced to a special weighted model counting problem [3, 21].", "startOffset": 91, "endOffset": 98}, {"referenceID": 19, "context": "For example, computing I\"q(F ) can be reduced to a special weighted model counting problem [3, 21].", "startOffset": 91, "endOffset": 98}, {"referenceID": 11, "context": "Probabilistic belief aggregation has attracted a lot of interests in statistics [12, 13], and more recently in artificial intelligence [15, 18, 20].", "startOffset": 80, "endOffset": 88}, {"referenceID": 12, "context": "Probabilistic belief aggregation has attracted a lot of interests in statistics [12, 13], and more recently in artificial intelligence [15, 18, 20].", "startOffset": 80, "endOffset": 88}, {"referenceID": 13, "context": "Probabilistic belief aggregation has attracted a lot of interests in statistics [12, 13], and more recently in artificial intelligence [15, 18, 20].", "startOffset": 135, "endOffset": 147}, {"referenceID": 16, "context": "Probabilistic belief aggregation has attracted a lot of interests in statistics [12, 13], and more recently in artificial intelligence [15, 18, 20].", "startOffset": 135, "endOffset": 147}, {"referenceID": 18, "context": "Probabilistic belief aggregation has attracted a lot of interests in statistics [12, 13], and more recently in artificial intelligence [15, 18, 20].", "startOffset": 135, "endOffset": 147}, {"referenceID": 4, "context": "2In the setting of [5], computing I!q(F ) amounts to computing a marginal probability in a tree-structured Bayesian network (see Example 1), which the well-known belief propagation algorithm [19] takes polynomial time to solve.", "startOffset": 19, "endOffset": 22}, {"referenceID": 17, "context": "2In the setting of [5], computing I!q(F ) amounts to computing a marginal probability in a tree-structured Bayesian network (see Example 1), which the well-known belief propagation algorithm [19] takes polynomial time to solve.", "startOffset": 191, "endOffset": 195}, {"referenceID": 4, "context": "[5] used the following Bayesian network structure for pricing combinatorial prediction markets for tournaments of 2m teams.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] avoided this problem by focusing on the market price distributions that assign 0 probability to these inconsistent outcomes.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] proved the followingmain results: two types of popular securities are structure preserving for the DAG defined in Definition 3.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5]), which corresponds to the security [Xk = Ti]; the second type is composed of all securities of the form \u201cTeam i1 and i2 win games Xk1 and Xk2 , respectively, where Xk1 is the parent of Xk2\u201d (Theorem 3.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5]), which corresponds to the security", "startOffset": 0, "endOffset": 3}, {"referenceID": 18, "context": "1 in Pennock andWellman [20]) to compute LogOP(Pr,\u2206PrF ).", "startOffset": 24, "endOffset": 28}, {"referenceID": 18, "context": "We reproduce the algorithm in Pennock and Wellman [20] for completeness of the paper (Algorithm 1).", "startOffset": 50, "endOffset": 54}, {"referenceID": 4, "context": "[5] that the inconsistent outcomes are assigned probability 0.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] are corollaries of Corollary 3.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5], where Pr (respectively, Pr) is the market price distribution before (respectively, after) \u2206b shares of the security is purchased.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "2 of [5]) Suppose \u2206b shares are purchased for event A, then for any events B and E,", "startOffset": 5, "endOffset": 8}, {"referenceID": 9, "context": "2 in Darwiche [10])", "startOffset": 14, "endOffset": 18}], "year": 2011, "abstractText": "To overcome the #P-hardness of computing/updating prices in logarithm market scoring rule-based (LMSR-based) combinatorial prediction markets, Chen et al. [5] recently used a simple Bayesian network to represent the prices of securities in combinatorial prediction markets for tournaments, and showed that two types of popular securities are structure preserving. In this paper, we significantly extend this idea by employing Bayesian networks in general combinatorial prediction markets. We reveal a very natural connection between LMSR-based combinatorial prediction markets and probabilistic belief aggregation,which leads to a complete characterization of all structure preserving securities for decomposable network structures. Notably, the main results by Chen et al. [5] are corollaries of our characterization. We then prove that in order for a very basic set of securities to be structure preserving, the graph of the Bayesian network must be decomposable. We also discuss some approximation techniques for securities that are not structure preserving.", "creator": "dvips(k) 5.99 Copyright 2010 Radical Eye Software"}}}