{"id": "1204.0885", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Apr-2012", "title": "PID Parameters Optimization by Using Genetic Algorithm", "abstract": "Time delays are components that make time-lag in systems response. They arise in physical, chemical, biological and economic systems, as well as in the process of measurement and computation. In this work, we implement Genetic Algorithm (GA) in determining PID controller parameters to compensate the delay in First Order Lag plus Time Delay (FOLPD) and compare the results with Iterative Method and Ziegler-Nichols rule results.\n\n\n\n\nThe method of evaluation in the human model relies on using a mathematical method. In order to assess a system\u2019s behavior in the future, the methods used in the algorithm have the power to be applied to the underlying system, which is typically a set of algorithms that implement their performance optimisations. We therefore use the method to compare the performance of the human model\u2019s implementation using GADT and the algorithms that implement it.\nFigure 1: A model can detect performance in an iterative method.\nWe use a mathematical method that calculates the probability of a system achieving a maximum number of consecutive execution times during sequential execution (PQ). In order to find a complete set of optimal execution times for the algorithm, the algorithm has to choose the algorithms that achieve it. The algorithm receives a maximum of 5 iterations for the algorithm. This step is repeated to find the optimal number of consecutive execution times.\nIn the human model, a system is the only choice between execution times. This is also achieved by the algorithm\u2019s method that calculates the probability of an algorithm achieving a maximum number of consecutive execution times during sequential execution (PQ). This step is repeated to find the optimal number of consecutive execution times. The algorithm receives a maximum of 5 iterations for the algorithm. This step is repeated to find the optimal number of consecutive execution times.\nIn the human model, a system is the only choice between execution times. This is also achieved by the algorithm\u2019s method that calculates the probability of an algorithm achieving a maximum number of consecutive execution times during sequential execution (PQ). This step is repeated to find the optimal number of consecutive execution times.\nIn the human model, a system is the only choice between execution times. This is also achieved by the algorithm\u2019s method that calculates the probability of an algorithm achieving a maximum number of consecutive execution times during sequential execution (PQ). This step is repeated to find the optimal number of consecutive execution times. The algorithm receives a maximum of 5 iterations for the algorithm. This step is repeated to find the optimal number of", "histories": [["v1", "Wed, 4 Apr 2012 08:17:32 GMT  (283kb)", "http://arxiv.org/abs/1204.0885v1", "12 pages, 4 figures"]], "COMMENTS": "12 pages, 4 figures", "reviews": [], "SUBJECTS": "cs.SY cs.LG cs.NE", "authors": ["andri mirzal", "shinichiro yoshii", "masashi furukawa"], "accepted": false, "id": "1204.0885"}, "pdf": {"name": "1204.0885.pdf", "metadata": {"source": "CRF", "title": "PID Parameters Optimization by Using Genetic Algorithm", "authors": ["Andri Mirzal", "Shinichiro Yoshii", "Masashi Furukawa"], "emails": ["mack@complex.eng.hokudai.ac.jp"], "sections": [{"heading": null, "text": "In the previous work [1], authors have implemented and compared two tuning methods, Iterative Method and Ziegler-Nichols rule, to compensate the effect of delay in stability of systems and showed that Iterative Method has superior performance in analyzed cases, FOLPD (First Order Lag plus Time Delay). But there are some cases where we can\u2019t use these two tuning methods, i.e. the dynamic plants which its parameters are constantly changing. In this sort of systems, we have to do retuning in real time, which can\u2019t be applied by the tuning methods because we have to take the systems offline first in order to set its parameters. In this work, we extend our previous work [1] by implementing Genetic Algorithm (GA) in determining PID Controller parameters to compensate the delay in order one (FOLPD) and compare the results with Iterative Method and Ziegler-Nichols rule results."}, {"heading": "2. THE OBJECTIVE FUNCTIONS FITNESS VALUES", "text": "The most crucial step in applying GA is to choose the objective functions that are used to evaluate fitness of each chromosome. Some works [3] [4] use performance indices as the objective functions. In [3] author uses Mean of the Squared Error (MSE), Integral of Time multiplied by Absolute Error (ITAE), Integral of Absolute Magnitude of the Error (IAE), and Integral of the Squared Error (ISE), while in [4] authors use ISE, IAE, and ITAE. Here we use all four performance indices stated above and Integral of Time multiplied by the Squared Error (ITSE) to minimize the error signal E(s) and compare them to find the most suitable one. The performance indices are defined as follow [2]:\n( )\u222b= \u03c4\n0\n2)(1 dtte t MSE , \u222b= \u03c4\n0\n)( dttetITAE , \u222b= \u03c4\n0\n)( dtteIAE \u222b= \u03c4\n0\n2)( dtteISE , and \u222b= \u03c4\n0\n2)( dttteITSE (1)\nWhere e(t) is the error signal in time domain. The PID controller is used to minimize the error signals, or we can define more rigorously, in the term of error criteria: to minimize the value of performance indices mentioned above. And because the smaller the value of performance indices of the corresponding chromosomes the fitter the chromosomes will be, and vice versa, we define the fitness of the chromosomes as:\nindexeperformanc valuefitness 1= (2)"}, {"heading": "3. DELAY COMPONENT", "text": "Delay in control systems can be defined as time-interval between an event that start in one point with its output in another point within systems [5]. Delay is also recognized as transport lag,\ndeadtime, and time lag. Because delay always reduces stability of minimum phase systems (systems which don\u2019t have poles and zeros in the right half of s-plane), it is important to analysis stability of systems with time delay.\nWe can see delay effect in a system which causes time shift at system\u2019s output from figure above. The relationship between f(t) and f(t-T) can be written as:\n\u222b \u221e\n\u2212\u2212\u2212=\u2212\u2212 0 )()()]()([ dteTtuTtfTtuTtf stl (3)\nwhere u(t) is unit step. Let \u03c4 = t-T,\n\u222b\u222b \u221e\n\u2212\n+\u2212 \u221e\n\u2212 =\u2212\u2212 T Tsst deufdteTtuTtf \u03c4\u03c4\u03c4 \u03c4 )( 0 )()()()( (4)\nassume f(t) = 0 for t < 0,\n)(\n)(\n)(\n)()()()(\n0\n0\n0\n)()(\nsFe\ndefe\ndeef\ndeufdeuf\nTs\nsTs\nTss\nTs\nT\nTs\n\u2212\n\u221e \u2212\u2212\n\u221e \u2212\u2212\n\u221e +\u2212 \u221e\n\u2212\n+\u2212\n=\n=\n=\n=\n\u222b\n\u222b\n\u222b\u222b\n\u03c4\u03c4\n\u03c4\u03c4\n\u03c4\u03c4\u03c4\u03c4\u03c4\u03c4\n\u03c4\n\u03c4\n\u03c4\u03c4\n(5)\nSo, we get : )]()([)()]()([ tutfesFeTtuTtf TsTs ll \u2212\u2212 ==\u2212\u2212 (6)\nIn order to do tuning processes using GA, we approximate the delay with Direct Frequency Response (DFR) series. Actually in Matlab, there is time delay built in function, Pade series approximation, but we choose to use DFR series because first, it has been shown in [1] that this series has the smallest average error among the others seven series and the second is while the delay block function in Control Systems Toolbox (used to simulate Iterative Method and Ziegler-Nichols\ntuning rules) uses Pade series, the delay component modeled by tf.m function (used to construct transfer function of a system) is still in the complex frequency domain representation (see equation 10), so that we have to translate it into polynomial series representation. Furthermore, for simulation purpose, we use second order DFR series to circumvent unnecessary complexity, because as the order of the series are getting higher, not only the calculation becomes difficult but also it introduces new poles and zeros which make the system much more elusive.\nDFR series : 22 22 0954.049.01 0954.049.01 \u03c4\u03c4 \u03c4\u03c4\u03c4 ss sse s ++ +\u2212 \u2248\u2212 (7)"}, {"heading": "4. GENETIC ALGORITHM", "text": "PID controller parameters will be optimized by applying GA. Here we use Matlab Genetic Algorithm Toolbox [6] to simulate it. The first and the most crucial step is to encoding the problem into suitable GA chromosomes and then construct the population. Some works recommend 20 to 100 chromosomes in one population. The more the chromosomes number, the better the chance to get the optimal results. However, because we have to consider the execution time, we use 80 or 100 chromosomes in each generation. Encoding is done in real number rather than binary encoding because the latter discards the parameters value if it exceeds its precision capability. Each chromosome comprises of three parameters, Kd, Kp, Ki, with value bounds varied depend on the delay and objective functions used. After many experiments, we find that the value bounds should be set according to the Iterative Method and Ziegler-Nichols rule value range to ensure the convergence (there are many cases which the convergence can\u2019t be reached if we set the parameter value bounds arbitrarily, even though the optimal results included in those bounds range). The population in each generation is represented by 80 x 4 or 100 x 4 matrix, depends on the chromosomes number in population, which each row is one chromosome that comprise Kd, Kp, Ki values and the last column added to accommodate fitness values (F) of corresponding chromosomes.\nnchromosome . .\n2chromosome 1chromosome\n....\n.... 2122\n1111\n      \n\n      \n\nninpndn\nipd\nipd\nFKKK\nFKKK FKKK\n(8)\nWe use maximum generation termination (maxGenTerm.m) to terminate the program rather than considering the best chromosome fitness values changing rate because we want to control the execution time. However, the best chromosome fitness values changing rate is also being considered by running the programs until the best fitness value stop increasing, then we set that point as the maximum generation. After several experiments it\u2019s shown that there is no visible improvement after 300th generation, so we set 300 as the maximum generation. Matlab GA Toolbox [6] provides three selection techniques, Tournament Selection, Roulette Wheel Selection and Normalize Geometric Selection. Tournament Selection requires more execution time while Roulette Wheel Selection allows the weaker chromosomes to be selected many times, so we choose Normalized Geometric Selection to choose the parents. After parents being selected, the crossover operation will be done. We use arithmetic crossover (arithXover.m) function because it is specifically being used for floating point numbers and provides more than one crossover points. And we set four crossover points because our chromosome comprise of three alleles, one point crossover can not accommodate three alleles in one operation. Mutation is done by setting mutation probability around 0.1 percent. In general mutation operations should not be done too often because the searching process will change into random search as the mutation probability getting higher."}, {"heading": "5. APPLYING THE GENETIC ALGORITHM", "text": "There are several variables used as the standard to measure systems performance. In general, unit step input is used to test the systems, and the output signals is characterized by some standard performance measures: settling time, percent overshoot, error signal, rise time, peak time, and stability margin. All these measures are defined in time domain response. Figure 3 below describes standard performance measures of a typical system driven by unit step input. Percent overshoot is defined as the point where the system response reaches the peak, in this case 53%. There are several criteria for settling time, for example 1% criterion, 2% criterion, and 5% criterion. Here we use 5% criterion settling time. And for the rise time, actually in general, is measured as the time needed by systems to reach from 0 to 100% of final value or from 10% to 90% of final value. But, for measurement simplicity, we use 0 - 95% criterion. Peak time is the point where the maximum value reached (overshoot) at 3.2 second. And error signal is the difference between the input signal magnitude and system response final magnitude. In this work, we use G(s) = 1/s+1, delay is in the range of 0.01 to 1 second. And because the systems are\ncompensated by PID controller, the error signals are always zero. In addition to the five system standard performance measures described above, in Iterative Method and Ziegler-Nichols rule, we calculate the system performance indices described by equation (1) also. This is done because we want to compare it with the result of GA, which it\u2019s being optimized in the term of performance indices. Ideally, we can expect corresponding GA\u2019s performance indices should be always better than two tuning rules. To calculate performance indices, we approximate the integral in equation (1) with addition (sigma) and 0.01 second sampling time and set the sigma upper limit with 15 second for all analyzed cases, no matter how quick it reaches convergence values."}, {"heading": "6. SIMULATION RESULTS AND ANALYSIS", "text": "Parameter Ziegler-Nichols Iterative Method Optimized by MSE Optimized by IAE Optimized by ISE Optimized by ITAE Optimized by ITSE %OV 38% 15% 10% 6% 11% 10% 8% ST5% 1.53 1.54 1.47 1.01 1.45 0.745 1.37 RT 0.444 0.912 0.453 0.495 0.455 0.588 0.474 PT 0.613 3.43 0.576 0.622 0.576 0.836 0.597 SM 36.25 37.86 33.68 33.8 24.4 36.8 32"}, {"heading": "6.1. Standard performance measures.", "text": ""}, {"heading": "Percent Overshoot", "text": "While figure 3(a) summarizes the values change of percent overshoots with respect to the time delay, table 1 gives its average values. Ziegler-Nichols rule gives the biggest value for all time delay, consequently its average value is the biggest also, 38%. Here the difference between two tuning methods and GA methods can be seen: while tuning methods have almost the same pattern, its value decreasing as the time delay growing bigger, except for small value of delay where Ziegler-Nichols rule gives increasing values, the GA methods give almost constant value, around 10% as long the time delay is not too small, except for case optimized by ITAE, where the percent overshoot value fluctuates and decreasing as time delay increasing. Table 1 shows that GA produces much better percent overshoot than two others tuning methods, especially if optimized by IAE criterion. So it can be concluded that GA can be used to optimized percent overshoot."}, {"heading": "Settling Time", "text": "The value of settling time (5% criterion) all over the time delay is summarized by figure 3(b), where it can be seen that almost all methods, except for GA optimized by IAE and ITAE, fall under almost the same straight line with positive slope. It means that as the delay increasing, the settling time will\nincrease linearly. In table 1 we can see that the settling time average value is not so different among all methods, in the range 1.37 second to 1.54 second, except for GA optimized by ITAE 0.745 second and IAE 1.01 second. However, because the others GA methods results are in agree with two tuning methods, we can\u2019t really differentiate these results. So it can be said that the settling time is not optimized by GA methods."}, {"heading": "Rise Time", "text": "The third variable is rise time, which plotted in figure 3(c) using logarithmic scale in y axis. We can see strong pattern which all the results, except for Iterative Method, have almost the same value all over the time delay. And it should not be surprising if we get almost the same average value for all result, around 0.44 second to 0.59 second, except for Iterative Method, 0.912 second. Another interesting thing is, in general, almost in all range of time delay the curves keep their ranking unchanged, with order from the biggest value: Iterative Method, ITAE, IAE, ITSE, ISE, MSE, and Ziegler-Nichols rule. From the average value (table 1), the best result is given by Ziegler-Nichols rule, 0.444 second and the worst one is Iterative Method 0.912 second, and all GA methods produce almost the same average value. But because GA results are not so different compared to Ziegler-Nichols rule, it can\u2019t be concluded that GA can optimize the rise time."}, {"heading": "Peak Time", "text": "Almost the same pattern, as in rise time plots, is shown on the peak time plots on figure 3(d), except Iterative Method, in large delay range, tends to diverge, where all methods show almost the same values for all over time delay. But we must pay attention on GA optimized by ITAE because there is a range which its value is bigger than the others. Except for Iterative Method which is 3.43 second, all others methods produce peak time around 0.57 second to 0.83 second. The best values are given by GA optimized by MSE and ISE, 0.576 second. Like rise time, in general, almost in all range of time delay the curves keep their ranking unchanged, with order from the biggest value: Iterative Method, ITAE, IAE, Ziegler-Nichols, ITSE, MSE, and ISE. And because the GA methods produce peak time plots which only better than Iterative Method, not Ziegler-Nichols, the peak time can\u2019t be optimized by GA methods."}, {"heading": "Stability Margin", "text": "The last standard performance measure is stability margin (figure 3(e)). Stability margin is the maximum gain that can be set before system response goes into sinusoidal cycle. In the simulations, this is done by simply increasing value of Kc until sinusoidal cycle happens, and the stability margin of corresponding system is Kc at sinusoidal cycle.\nThis is the first result that shows consistency all over time delay range, which all curves fall under almost the same line. So this is the strongest patterns, and because the stronger the pattern, the less the ability of GA methods to optimize corresponding performance measures, we can\u2019t use GA methods to optimize the stability margin. Conversely, the GA methods are likely to produce less stable systems. Like rise time and peak time, in general, almost in all range of time delay the curves keep their ranking unchanged, with order from the biggest value: Iterative Method, ITAE, Ziegler-Nichols, IAE, ITSE, ISE, and MSE. But unlike settling time, rise time, and peak time, stability margin values reduce as the time delay increases."}, {"heading": "6.2. Performance Indices", "text": "We differentiate the term standard performance measures and performance indices here, where standard performance measures have already been discussed above, performance indices are: MSE, IAE, ISE, ITAE, and ITSE. Table 2 below summarizes performance indices from simulation results. As expected, the average values of GA performance indices are always smaller than its corresponding Ziegler-Nichols and Iterative Method. Moreover Ziegler-Nichols rule produces smaller average performance indices values than Iterative Method does for all time delay values range.\nAlthough it can be seen that MSE has the smallest average values for all three methods, and IAE has the largest average values for Ziegler-Nichols and GA methods, and only second in Iterative Method, it doesn\u2019t imply that one must use MSE and must avoid using IAE as a objective function in GA because these performance indices, as shown by equations (1), have different definitions and cannot be compared. Moreover, as shown in table 1, GA method optimized by MSE doesn\u2019t produce the best results for all analyzed standard performance measures, only for peak time. To get more insight about the comparison among these methods, we plot values change of each performance indices with respect to time delay below.\nAll five figures above confidently show that GA method gives the smallest values of all performance indices analyzed for all range of time delay. So not only in average values, but also for all measured values does GA method produce the smallest corresponding performance indices. However, the differences between GA method and two tuning methods results, except for ITAE objective function where the differences increase as the time delay increases, are not impressive enough to come into conclusion that GA method is much better than two others methods in minimizing error criteria. Besides, we must consider the convergence problem arises in applying GA, which in this work the experiments don\u2019t always come into desired solutions. Even though we set the value bounds based on the previous results from two tuning methods, it only improves the probability that the simulations come into convergence results (from 45 cases, there two times failed to reach convergence results)."}, {"heading": "7. CONCLUSIONS", "text": "1. Genetic Algorithm applied in PID controller improves FOLPD transient response compared to\ntwo tuning methods. This is shown by average percent overshoot reduction, more than 70% and 30% with respect to the Ziegler-Nichols rule and Iterative Method, while keep the rise time and peak time almost unchanged and improves the settling time. However, there is payoff in the stability margin which reduces slightly compared to two tuning methods. 2. The average values of GA performance indices, as expected, are always smaller than its corresponding Ziegler-Nichols and Iterative Method. Moreover Ziegler-Nichols rule produces smaller average performance indices values than Iterative Method does for all time delay values range. However, the differences between GA method and two tuning methods results, except for ITAE objective function where the differences increase as the time delay increases, are not impressive enough to come into conclusion that GA method is much better than two others methods in minimizing error criteria. 3. There are convergence problems that arise in applying GA, which in this work the experiments don\u2019t always come into desired solutions. Even though we set the value bounds based on the previous results from two tuning methods, it only improves the probability that the simulations come into convergence results. Moreover, the value bounds setting based on tuning methods results discards the possibility to find optimum results from others value ranges."}, {"heading": "Shinichiro Yoshii", "text": "Masashi Furukawa"}], "references": [{"title": "Approximation and Compensation of Delay in Analog Control Systems, \u7cbe\u5bc6\u5de5\u5b66\u4f1a\u5317\u6d77\u5ea6\u652f\u90e8\u5b66\u8853\u8b1b\u6f14\u4f1a", "author": ["Andri Mirzal", "Shinichiro Yoshii", "Masashi Furukawa"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2006}, {"title": "On-line PID Controller Tuning using Genetic Algorithms", "author": ["Ian Griffin"], "venue": "Dublin City University,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2003}, {"title": "The Estimation and Compensation of Processes with Time Delays", "author": ["A. O\u2019 Dwyer"], "venue": "Ph.D. Thesis,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1996}, {"title": "A Genetic Algorithm for Function Optimization: A Matlab Implementation", "author": ["C.R. Houck", "J. Joines", "M.Kay"], "venue": "ACM Transactions on Mathematical Software,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1996}], "referenceMentions": [{"referenceID": 0, "context": "INTRODUCTION In the previous work [1], authors have implemented and compared two tuning methods, Iterative Method and Ziegler-Nichols rule, to compensate the effect of delay in stability of systems and showed that Iterative Method has superior performance in analyzed cases, FOLPD (First Order Lag plus Time Delay).", "startOffset": 34, "endOffset": 37}, {"referenceID": 0, "context": "In this work, we extend our previous work [1] by implementing Genetic Algorithm (GA) in determining PID Controller parameters to compensate the delay in order one (FOLPD) and compare the results with Iterative Method and Ziegler-Nichols rule results.", "startOffset": 42, "endOffset": 45}, {"referenceID": 1, "context": "Some works [3] [4] use performance indices as the objective functions.", "startOffset": 11, "endOffset": 14}, {"referenceID": 1, "context": "In [3] author uses Mean of the Squared Error (MSE), Integral of Time multiplied by Absolute Error (ITAE), Integral of Absolute Magnitude of the Error (IAE), and Integral of the Squared Error (ISE), while in [4] authors use ISE, IAE, and ITAE.", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "DELAY COMPONENT Delay in control systems can be defined as time-interval between an event that start in one point with its output in another point within systems [5].", "startOffset": 162, "endOffset": 165}, {"referenceID": 0, "context": "Actually in Matlab, there is time delay built in function, Pade series approximation, but we choose to use DFR series because first, it has been shown in [1] that this series has the smallest average error among the others seven series and the second is while the delay block function in Control Systems Toolbox (used to simulate Iterative Method and Ziegler-Nichols", "startOffset": 154, "endOffset": 157}, {"referenceID": 3, "context": "Here we use Matlab Genetic Algorithm Toolbox [6] to simulate it.", "startOffset": 45, "endOffset": 48}, {"referenceID": 3, "context": "Matlab GA Toolbox [6] provides three selection techniques, Tournament Selection, Roulette Wheel Selection and Normalize Geometric Selection.", "startOffset": 18, "endOffset": 21}], "year": 2006, "abstractText": "Time delays are components that make time-lag in systems response. They arise in physical, chemical, biological and economic systems, as well as in the process of measurement and computation. In this work, we implement Genetic Algorithm (GA) in determining PID controller parameters to compensate the delay in First Order Lag plus Time Delay (FOLPD) and compare the results with Iterative Method and Ziegler-Nichols rule results.", "creator": "PScript5.dll Version 5.2"}}}