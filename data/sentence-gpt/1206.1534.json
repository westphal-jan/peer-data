{"id": "1206.1534", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Jun-2012", "title": "Software Aging Analysis of Web Server Using Neural Networks", "abstract": "Software aging is a phenomenon that refers to progressive performance degradation or transient failures or even crashes in long running software systems such as web servers. It mainly occurs due to the deterioration of operating system resource, fragmentation and numerical error accumulation. A primitive method to fight against software aging is software rejuvenation by applying a small amount of hardware and resources to the aging system. A recent study of 764,638 users aged 32 and over shows that 80% of the aging data collected from the age of 38 and above are collected from around the world. As a result, 70% of the time it is recorded is used to make an impact on software performance. The authors explain that their findings are not only an attempt to prove that aging is irreversible and can prevent serious human error.\n\n\n\nWhile the authors recommend that older individuals and persons of age be advised to use newer devices to perform better than older users, they also note that older users will benefit from an improved approach that focuses on aging. To be continued, the authors recommend that older users have the opportunity to apply a new hardware and resources at a competitive price.", "histories": [["v1", "Thu, 7 Jun 2012 15:52:46 GMT  (252kb)", "http://arxiv.org/abs/1206.1534v1", "11 pages, 8 figures, 1 table; International Journal of Artificial Intelligence &amp; Applications (IJAIA), Vol.3, No.3, May 2012"]], "COMMENTS": "11 pages, 8 figures, 1 table; International Journal of Artificial Intelligence &amp; Applications (IJAIA), Vol.3, No.3, May 2012", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["g sumathi", "r raju"], "accepted": false, "id": "1206.1534"}, "pdf": {"name": "1206.1534.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["R. Raju"], "emails": ["swasthik36@gmail.com", "rajupdy@gmail.com"], "sections": [{"heading": null, "text": "DOI : 10.5121/ijaia.2012.3302 11\nSoftware aging is a phenomenon that refers to progressive performance degradation or transient failures or even crashes in long running software systems such as web servers. It mainly occurs due to the deterioration of operating system resource, fragmentation and numerical error accumulation. A primitive method to fight against software aging is software rejuvenation. Software rejuvenation is a proactive fault management technique aimed at cleaning up the system internal state to prevent the occurrence of more severe crash failures in the future. It involves occasionally stopping the running software, cleaning its internal state and restarting it. An optimized schedule for performing the software rejuvenation has to be derived in advance because a long running application could not be put down now and then as it may lead to waste of cost. This paper proposes a method to derive an accurate and optimized schedule for rejuvenation of a web server (Apache) by using Radial Basis Function (RBF) based Feed Forward Neural Network, a variant of Artificial Neural Networks (ANN). Aging indicators are obtained through experimental setup involving Apache web server and clients, which acts as input to the neural network model. This method is better than existing ones because usage of RBF leads to better accuracy and speed in convergence.\nKEYWORDS\nSoftware aging, software rejuvenation, rejuvenation schedule, ANN & RBF"}, {"heading": "1. INTRODUCTION", "text": "Software aging is a phenomenon that refers to progressive performance degradation or transient failures or even crashes in long running software systems such as web servers. It mainly occurs due to the deterioration of operating system resource, fragmentation and numerical error accumulation [1]. Unexpected downtime cost due to software aging is high mainly in ecommerce websites and safety/business-critical applications. Software aging injures the usability of the software system and brings inconvenience to the users. It mostly occurs due to the accumulation of runtime errors. Runtime errors are the resultant of residual software effects such as memory leaking and unreleased file locks. These residual defects are difficult to be unveiled in the testing phase because there are few observable errors during the in-house testing phase. Even if they are unveiled, practical experience shows that most of corresponding errors are transient in nature [6],\nand difficult to be localized and removed. Therefore, these residual defects must be tolerated by users during operational phase.\nThus, like in humans, aging in software also cannot be avoided. We can just prolong the aging process or can reduce the effect caused by aging. So, the only possible solution to fight against aging is to reset the software system and clean its runtime environment before severe aging occurs, thereby avoiding system crash. This method is called software rejuvenation [7]. Software rejuvenation is a proactive fault management technique aimed at cleaning up the system internal state to prevent the occurrence of more severe crash failures in the future. It can maintain the robustness of software systems and avoid unexpected system outages."}, {"heading": "2. OBJECTIVE OF THE PAPER", "text": "Every long running application must face the process of aging in its life time. This phenomenon of software aging, if left unseen will cause failure or even lead to the crash of entire system. Since aging cannot be avoided, the only remedy available to prevent the system from failure and to bring it back to the robust state is Software Rejuvenation. The important objective that must be taken into consideration is the appropriate time when the rejuvenation has to be performed, as periodic rejuvenation leads to wastage of cost because long running application such as a web server could not be put down now and then. This paper aims to obtain an accurate and optimized schedule for rejuvenation of a web server namely Apache. To do so, the status of aging indicators, the parameters that denotes aging process, has to be forecasted. The values are forecasted using Radial Basis Function based Feed Forward Neural Network. The proposed model leads to better accuracy and speed in convergence rate than the existing analytical and statistical models as these models assume the underlying probability distribution used for scheduling, leading to poor accuracy."}, {"heading": "3. RELATED WORKS", "text": "The existing works on software aging is comes under either model-based approach or measurement-based approach. In model-based approach, certain assumption such as the origin and result of software aging are made and based on these assumptions a mathematical model is built. This model is either analytical or stochastic. The existing researches on model-based studies involve the proposal of a three state stochastic model to determine the best time to restart a telecommunication system switch [7] and Garg et al. analysed software aging in a transaction system and proposed an analytical model to estimated the probability of losing an arriving transaction and the expected response time of a transaction [8]. Dohi et al. built semi-Markov reward process models of software aging to solve the same problem [9, 10]. All these above mentioned models suffer from a drawback that the mathematical assumptions cannot be easily validated in practice and the derived mathematical properties are not useful for software maintenance [3].\nIn measurement-based approach, the aging indicators are monitored and based on the collected data the robustness of the system is assessed by applying statistical regression techniques such as auto regression [1], threshold auto regression [4] and autoregressive moving average model [5], to the monitored data. Wavelet Network is also used to solve the same problem [15]. The rate of software aging is usually not constant and it depends upon the system workload which varies according to time. Thus, time series model fits well to predict the future resource usage. Shishiny et al. proposed an MLP based Neural Network model to analyse software aging and predict the resource usage [16].\nThis work intend to provide a better optimal schedule for rejuvenation with increased accuracy rate and speed in convergence than the existing work, by using RBF based Neural Network to analyse resource usage data collected on a typical long-running software system namely, a web server, to assess the suitability of RBF based Neural Network for the analysis of software aging."}, {"heading": "4. EXPERIMENTAL SETUP", "text": "To obtain an optimized schedule for rejuvenation, the aging indicators required for forecasting has to be obtained. Many aging indicators are available. For experimental purpose, three aging indicators namely, response time of the web server, used swap space and free physical memory are taken into consideration. In order to obtain the values of these aging indicators, an experimental setup shown in Figure 1 is made. The platform is deployed with an Apache server, two clients, and a 100M switch. The three computers are connected via the switch to each other. Linux Fedora 10 operating system is installed on the three computers, whose configuration is as follows:\nServer configuration: Processor Frequency: Dual Core 2GHz; Memory: 2GMB; Client configuration: Processor Frequency: single-core 1.4GHz; Memory: 512MB;\nHttperf [17], a Web server test tool, is deployed on the clients to generate artificial concurrent requests with exponential time intervals to access the static html files on the Apache server. Since Apache has been well tested in practice, it is difficult for us to observe its aging symptoms in a short period under a normal runtime environment and the default parameter settings. It is necessary to find some way to expedite the aging of Apache. In the experiments, we adjust two parameters that are related to the accumulation of the effects of software errors:\nMaxRequestPerChild and MaxSpareServers [2]. The first parameter limits the number of requests handled by each child process of Apache. The second parameter, MaxSpareServers, sets the maximum number of idle child processes. When the number of requests is low, some of existing child processes may be at idle state. If there are more than MaxSpareServers idle processes, Apache will kill excess ones. By setting it to zero, we can turn off this mechanism so that no child processes will be killed during runtime.\nThe used swap space and free physical memory are collected from /proc file system of Linux. From the /proc file system and with the help of the Linux monitoring tool procmon, measurements were periodically collected. Each Httperf request accesses one of five specified files of sizes 500 bytes, 5 kB, 50 kB, 500 kB, and 5MB on the server. Httperf is not only a workload generator, but it can also be employed for monitoring performance information. For collecting resource usage data over a long time period, a shell program was used to run httperf periodically. As for the connection rate, a value of 400 requests per second was chosen, which puts the web server in an overload state, and should speed up software aging."}, {"heading": "5. ARTIFICIAL NEURAL NETWORK", "text": "Artificial Neural Network is one of the machine learning technique that is inspired by the organization and functioning of biological neurons. ANN has several advantages over statistical methods. Artificial neural network can be universal function approximators for even non-linear functions. It can also estimate piece-wise approximations of functions and has the ability to discover patterns adaptively from the data. When an appropriate number of nonlinear processing unit is given as input, neural networks can learn from experience and estimate any complex functional relationship with high accuracy [11]. Numerous successful ANN applications have been reported in the literature in a variety of fields including pattern recognition and forecasting [12]."}, {"heading": "5.1. ANN for Time Series Forecasting", "text": "The usage of ANN for time series analysis relies entirely on the data that were observed and is powerful enough to represent any form of time series. ANN can learn even in the case of noisy data and can represent nonlinear time series. For example, given a series of values of the variable x at time step t and at past time steps x(t), x(t-1), x(t-2),\u2026, x(t-m), we look for an unknown function F such that; x(t+n)=F[x(t), x(t-1), x(t-2),\u2026, x(t-m)], which gives an n-step predictor of order m for the quantity x."}, {"heading": "6. RBFNN FOR SOFTWARE AGING FORECASTING", "text": "Radial Basis Functions emerged as a variant of ANN in late 80\u2019s. RBF\u2019s are embedded in a two layer neural network, where each hidden unit implements a radial activated function. The output units implement a weighted sum of hidden unit outputs. Unlike MLP network model, RBFNN does not have weight adjustment in the link between the input layer and hidden layer. In RBFNN weights are adjusted only in the link between the hidden layer and output layer. RBF networks have excellent approximation capabilities [18]. Due to their nonlinear approximation properties, RBF networks are able to model complex mappings, which perceptron neural networks can only model by means of multiple intermediary layers.\nFigure 2 shows the radial basis function neural network. The bell shaped curves in the hidden nodes indicate that each hidden layer node represents a bell shaped radial basis function that is centered on a vector in the feature space. There are no weights on the lines from the input nodes to the hidden nodes. The input vector is fed to each m-th hidden node with the following radial basis function\nYm = fm(X) = exp[-|X-Cm| 2 /(2\u03c3 2 )] (1)\nwhere |X-Cm|\n2 is the square of the distance between the input feature vector X and the center\nvector Cm for that radial basis function. The values {Ym} are the outputs from the radial basis functions. The values equidistant from the center in all directions have the same values, so this is why these are called radial basis functions. The outputs from the hidden layer nodes are weighted by the weights on the lines and the weighted sum is computed at each j-th output node as\nZj = (1/M)\u2211(m-1, M) \u00b5mjYm (2)\nThe collected data set is divided into two segments, one to train the RBFNN and the other for testing. The testing segment is used to evaluate the forecasting performance of the RBFNN in predicting the performance parameters\u2019 values, since the work proposed follows supervised learning technique."}, {"heading": "6.1 Training the RBFNN", "text": "In order to predict the status of aging indicators to obtain an optimized schedule for rejuvenation, the RBFNN has to be trained such that the mean square error is minimized to the maximum extent. The mean square error function that is to be minimized by adjusting the parameters {\u00b5mj} is similar to the one for BPNN except that this is much simpler to minimize. There is only one set of parameters instead of two as was the case for BPNNs. Upon suppressing the index q we have\nE= (1/J)\u2211(j-1,J) (tj - Zj)\n2\nE= (1/J)\u2211(j-1,J) (tj \u2013 (1/M)\u2211(m-1,M) \u00b5mj Ym) 2 (3)\nThus,\n\u2202E/\u2202\u00b5MJ = (\u2202E/\u2202ZJ)( \u2202ZJ/\u2202\u00b5MJ)\n\u2202E/\u2202\u00b5MJ = [(-2/J) \u2211(J-1,J) (TJ - ZJ)](YM/M) (4)\nUpon putting this into the steepest descent method\n\u00b5mj (k+1) = \u00b5mj (k) + [2\u03b7/(JM)] \u2211(j-1,J) (tj - Zj)] Ym (5)\nwhere \u03b7 is the learning rate, or step size, as before. Upon training over all Q feature vector inputs and their corresponding target output vectors, equation (5) becomes\n\u00b5mj (k+1)=\u00b5mj (k) + [2\u03b7/(JM)] \u2211(q-1, Q) \u2211(j-1,J)(tj (q) \u2013 Zj (q))]Ym q (6)\nThe center vectors {C(m): m=1,\u2026..,M} on which to center the radial basis function , the exempler vectors {X (q) :q=1,\u2026..Q} are considered as centers by putting C (m) =X (q) for m=1,\u2026..,Q. Once the network is trained, it is tested with the help of last segment of the observed data."}, {"heading": "7. PARAMETERS FOR PERFORMANCE EVALUATION", "text": "The accuracy in forecasting the exhaustion of resources to obtain an optimized schedule for rejuvenation of web server is measured by Root Mean Square Error (RMSE) and Mean Absolute Percent Error (MAPE)."}, {"heading": "7.1 Root Mean Square Error", "text": "The root mean squared error, Ei of an individual program i is evaluated by the equation:\nwhere P(ij) is the value predicted by the individual program i for sample case j (out of n sample cases); and Tj is the target value for sample case j.\nFor a perfect fit, P(ij) = Tj and Ei = 0. So, the Ei index ranges from 0 to infinity, with 0 corresponding to the ideal."}, {"heading": "7.2 Mean Absolute Percent Error", "text": "MAPE is calculated by averaging the percentage difference between the fitted (forecast) line and the original data:\nMAPE= 1/n [ \u2211t | et/yt | * 100 ]\nwhere y represents the original series and e the original series minus the forecast, and n the number of observations."}, {"heading": "8. RESULTS", "text": "The results produced by the RBF neural network model to predict an optimized schedule for rejuvenation of Apache web server are represented below."}, {"heading": "8.1 Response Time", "text": "Figure 3 shows the graph of preprocessed response time of Apache web server collected for a period of about a week. The vertical line in the graph partitions the data into the set used for training and the set used for testing.\nFigure 4 shows the predicted response time obtained from the RBFNN model. The predicted results are compared with observed data segment. From the graph it is clear that the convergence obtained is faster and accurate."}, {"heading": "8.2 Swap Space Used", "text": "Figure 5 shows swap space usage of the Apache Web server collected for a period of about 15 days. The graph shows considerable increases in used swap space at fixed intervals.\nFigure 6 shows the predicted swap space usage obtained by the RBFNN model. The predicted results are compared with the last segment of observed data used for testing which shows accuracy in prediction."}, {"heading": "8.3 Free Physical Memory", "text": "Figure 7 shows the graph of free physical memory of Apache web server collected for a period of about a week. The data is preprocessed by scaling because when the physical memory approaches it\u2019s allowed lower limit, the system frees up memory by paging. The vertical solid line in the graph segments the data into the set used for training and the set used for testing.\nFigure 8 shows the free physical memory space predicted by the RBFNN model. The predicted results are compared with the last segment of observed data set. From the graph it is clear that the convergence obtained is faster and accurate."}, {"heading": "9. EVALUATION OF PREDICTED RESULTS", "text": "The result of aging indicators predicted using RBF based feed forward neural network model is evaluated using the parameters RMSE and MAPE as shown in Table.1 and the results are compared with the existing MLP model."}, {"heading": "10. CONCLUSION", "text": "This paper worked on obtaining an accurate and optimized schedule for rejuvenating a web server (Apache web server for example) to prevent it from crashes due to the phenomenon called software aging.To obtain the schedule for rejuvenation the aging indicators are selected and real time values are obtained through experimental set up. A segment of the obtained values are used for training the RBFNN model which further predicts the expected results of aging indicators. The predicted results are evaluated using the accuracy parameters such as RMSE and MAPE. Also the obtained results are represented graphically to illustrate convergence rate and accuracy."}, {"heading": "11. REFERENCES", "text": "[1] Michael Grottke, Lei Li, Kalyanaraman Vaidyanathan, and Kishor S. Trivedi, \u201cAnalysis of Software\nAging in a Web Server\u201d, IEEE Transactions on Reliability, vol. 55, no. 3, September 2006\n[2] Yun-Fei Jia, Lei Zhao and Kai-Yuan Cai, \u201cA Nonlinear Approach to Modeling of Software Aging in a\nWeb Server\u201d, 15th Asia-Pacific Software Engineering Conference, 2008\n[3] Yun-Fei Jia, Jing-Ya Su, and Kai-Yuan Cai, \u201cA Feedback Control Approach for Software\nRejuvenation in a Web Server\u201d, 978-1-4244-3417-6/08, 2008 IEEE\n[4] Xiu-E Chen, Quan Quan, Yun-Fei Jia and Kai-Yuan Cai, \u201cA Threshold Autoregressive Model for\nSoftware Aging\u201d, Proceedings of the Second IEEE International Symposium on Service-Oriented System Engineering 0-7695-2726-4/06, 2006\n[5] Lei Li, Kalyanaraman Vaidyanathan and Kishor S. Trivedi, \u201cAn Approach for Estimation of Software\nAging in a Web Server\u201d, Proceedings of the 2002 International Symposium on Empirical Software Engineering 0-7695-1796-X/02, 2002\n[6] A. T. Tai, L. Alkalaj, and S. N. Chau, \u201cOn-board preventive maintenance: a design-oriented analytic\nstudy for long-life applications\u201d, Performance Evaluation, 35, 215\u2013232, 1998\n[7] Y. Huang, C. Kintala, N. Kolettis, and N. Fulton, \u201cSoftware Rejuvenation: Analysis, Module and\nApplications\u201d, in Proceedings of the 25th IEEE International Symposium on Fault-Tolerant Computing, pp. 381-390, Pasadena, USA, June 1995.\n[8] S. Garg, A. Puliafito, M. Telek, and K. S. Trivedi, \u201cAnalysis of Software Rejuvenation Using Markov\nRegenerative Stochastic Petri Net\u201d, in Proceedings of the Sixth International Symposium on Software Reliability Engineering, pp. 24-27, 1995.\n[9] T. Dohi, K. Goseva-Popstojanova, and K. S. Trivedi, \u201cAnalysis of software cost models with\nrejuvenation\u201d, in Proceedings of the International Symposium on High Assurance Systems Engineering, pp. 25\u201334, 2000\n[10] T. Dohi, K. Goseva-Popstojanova, and K. S. Trivedi, \u201cEstimating software rejuvenation schedules in\nhigh assurance systems\u201d, Computer Journal, 44(6):473\u2013485, 2001\n[11] Xin Yao, Senior Member, IEEE, \u201cEvolving Artificial Neural Networks\u201d, Proceedings of the IEEE,\nvol. 87, no. 9, September 1999\n[12] Hornik, K., Stinchcombe, M., White, H., \u201cMultilayer feedforward networks are universal\napproximators\u201d, Neural Networks 3, 551-560, 1989\n[13] Zhang, G. Peter and Qi, Min, \u201cNeural network forecasting for seasonal and trend time series\u201d,\nEuropean Journal of Operational Research 160, 501-514, 2005\n[14] Hassoun,M. H., \u201cFundamentals of Artificial Neural Networks\u201d, MIT Press, 1995\n[15] Xu, J., You, J. and Zhang,K., \u201cA Neural-Wavelet based Methodology for software Aging\nForecasting\u201d, IEEE International Conference on Systems, Man and Cybernetics, Volume 1, Issue , 10-12 Oct. 2005 Page(s): 59 \u2013 63 Vol. 1, 2005\n[16] Hisham El-Shishiny, Sally Sobhy Deraz, Omar B. Badreddin, \u201cMining Software Aging: A Neural\nNetwork Approach\u201d, 978-1-4244-2703-1/08, 2008 IEEE\n[17] D. Mosberger and T. Jin, \u201cHttperf - A Tool for Measuring Web Server Performance\u201d, in the First\nWorkshop on Internet Server Performance, Madison, USA, June 1998.\n[18] Park. J, Sandberg. J.W, \u201cUniversal Approximation using Radial Basis Functions Network\u201d, Neural\nComputation, vol.3, pp. 246-257\n[19] David Lorge Parnas, \u201cSoftware Aging\u201d, 0270-5257/9 4000 1994 IEEE\n[20] Michael Grottke, Rivalino Matias Jr., Kishor S. Trivedi, \u201dThe Fundamentals of Software Aging\u201d, 1st\nInternational Workshop on Software Aging and Rejuvenation, IEEE, 2008\n[21] QingE WU, ZhenYu Han, TianSong Guo, \u201cApplication of an Uncertain Reasoning Approach to\nSoftware Aging Detection\u201d, Fifth International Joint Conference onINC, IMS and IDC, 2009\nAuthors G. Sumathi is pursuing her M.Tech degree in Computer Science and Engineering in Sri Manakula Vinayagar Engineering College, Pondicherry University, Puducherry, India. Her research area includes Artificial Intelligence, Software Engineering and MANET. She presented papers in various International Conferences on Aritificial Intelligence and Networking.\nMr.R.Raju is pursuing his PhD and received the M.Tech Degree in Computer Science and Engineering from Pondicherry University, Puducherry. His current research involves in Software Engineering and Cloud computing. He is presently working with Sri Manakula Vinayagar Engineering College (Affiliated to Pondicherry University, Puducherry) as Associate Professor in the Department of Information Technology."}], "references": [{"title": "Analysis of Software Aging in a Web Server", "author": ["Michael Grottke", "Lei Li", "Kalyanaraman Vaidyanathan", "Kishor S. Trivedi"], "venue": "IEEE Transactions on Reliability,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2006}, {"title": "A Nonlinear Approach to Modeling of Software Aging in a Web Server", "author": ["Yun-Fei Jia", "Lei Zhao", "Kai-Yuan Cai"], "venue": "15th Asia-Pacific Software Engineering Conference,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "A Feedback Control Approach for Software Rejuvenation in a Web Server", "author": ["Yun-Fei Jia", "Jing-Ya Su", "Kai-Yuan Cai"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "A Threshold Autoregressive Model for Software Aging", "author": ["Xiu-E Chen", "Quan Quan", "Yun-Fei Jia", "Kai-Yuan Cai"], "venue": "Proceedings of the Second IEEE International Symposium on Service-Oriented System Engineering", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "An Approach for Estimation of Software Aging in a Web Server", "author": ["Lei Li", "Kalyanaraman Vaidyanathan", "Kishor S. Trivedi"], "venue": "Proceedings of the 2002 International Symposium on Empirical Software Engineering", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2002}, {"title": "On-board preventive maintenance: a design-oriented analytic study for long-life applications", "author": ["A.T. Tai", "L. Alkalaj", "S.N. Chau"], "venue": "Performance Evaluation,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1998}, {"title": "Software Rejuvenation: Analysis, Module and Applications", "author": ["Y. Huang", "C. Kintala", "N. Kolettis", "N. Fulton"], "venue": "Proceedings of the 25th IEEE International Symposium on Fault-Tolerant Computing,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1995}, {"title": "Analysis of Software Rejuvenation Using Markov Regenerative Stochastic Petri Net", "author": ["S. Garg", "A. Puliafito", "M. Telek", "K.S. Trivedi"], "venue": "Proceedings of the Sixth International Symposium on Software Reliability Engineering,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1995}, {"title": "Analysis of software cost models with rejuvenation", "author": ["T. Dohi", "K. Goseva-Popstojanova", "K.S. Trivedi"], "venue": "Proceedings of the International Symposium on High Assurance Systems Engineering,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2000}, {"title": "Estimating software rejuvenation schedules in high assurance systems", "author": ["T. Dohi", "K. Goseva-Popstojanova", "K.S. Trivedi"], "venue": "Computer Journal,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2001}, {"title": "Multilayer feedforward networks are universal approximators", "author": ["K. Hornik", "M. Stinchcombe", "H. White"], "venue": "Neural Networks", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1989}, {"title": "Neural network forecasting for seasonal and trend time series", "author": ["Zhang", "G. Peter", "Qi", "Min"], "venue": "European Journal of Operational Research", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2005}, {"title": "Fundamentals of Artificial Neural Networks", "author": ["M.H. Hassoun"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1995}, {"title": "A Neural-Wavelet based Methodology for software Aging Forecasting", "author": ["J. Xu", "J. You", "K. Zhang"], "venue": "IEEE International Conference on Systems, Man and Cybernetics,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2005}, {"title": "Httperf - A Tool for Measuring Web Server Performance", "author": ["D. Mosberger", "T. Jin"], "venue": "in the First Workshop on Internet Server Performance,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1998}, {"title": "Application of an Uncertain Reasoning Approach to Software Aging Detection", "author": ["QingE WU", "ZhenYu Han", "TianSong Guo"], "venue": "Fifth International Joint Conference onINC, IMS and IDC,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2009}], "referenceMentions": [{"referenceID": 0, "context": "It mainly occurs due to the deterioration of operating system resource, fragmentation and numerical error accumulation [1].", "startOffset": 119, "endOffset": 122}, {"referenceID": 5, "context": "Even if they are unveiled, practical experience shows that most of corresponding errors are transient in nature [6],", "startOffset": 112, "endOffset": 115}, {"referenceID": 6, "context": "This method is called software rejuvenation [7].", "startOffset": 44, "endOffset": 47}, {"referenceID": 6, "context": "The existing researches on model-based studies involve the proposal of a three state stochastic model to determine the best time to restart a telecommunication system switch [7] and Garg et al.", "startOffset": 174, "endOffset": 177}, {"referenceID": 7, "context": "analysed software aging in a transaction system and proposed an analytical model to estimated the probability of losing an arriving transaction and the expected response time of a transaction [8].", "startOffset": 192, "endOffset": 195}, {"referenceID": 8, "context": "built semi-Markov reward process models of software aging to solve the same problem [9, 10].", "startOffset": 84, "endOffset": 91}, {"referenceID": 9, "context": "built semi-Markov reward process models of software aging to solve the same problem [9, 10].", "startOffset": 84, "endOffset": 91}, {"referenceID": 2, "context": "All these above mentioned models suffer from a drawback that the mathematical assumptions cannot be easily validated in practice and the derived mathematical properties are not useful for software maintenance [3].", "startOffset": 209, "endOffset": 212}, {"referenceID": 0, "context": "In measurement-based approach, the aging indicators are monitored and based on the collected data the robustness of the system is assessed by applying statistical regression techniques such as auto regression [1], threshold auto regression [4] and autoregressive moving average model [5], to the monitored data.", "startOffset": 209, "endOffset": 212}, {"referenceID": 3, "context": "In measurement-based approach, the aging indicators are monitored and based on the collected data the robustness of the system is assessed by applying statistical regression techniques such as auto regression [1], threshold auto regression [4] and autoregressive moving average model [5], to the monitored data.", "startOffset": 240, "endOffset": 243}, {"referenceID": 4, "context": "In measurement-based approach, the aging indicators are monitored and based on the collected data the robustness of the system is assessed by applying statistical regression techniques such as auto regression [1], threshold auto regression [4] and autoregressive moving average model [5], to the monitored data.", "startOffset": 284, "endOffset": 287}, {"referenceID": 13, "context": "Wavelet Network is also used to solve the same problem [15].", "startOffset": 55, "endOffset": 59}, {"referenceID": 14, "context": "Experimental Setup Httperf [17], a Web server test tool, is deployed on the clients to generate artificial concurrent requests with exponential time intervals to access the static html files on the Apache server.", "startOffset": 27, "endOffset": 31}, {"referenceID": 1, "context": "14 MaxRequestPerChild and MaxSpareServers [2].", "startOffset": 42, "endOffset": 45}, {"referenceID": 10, "context": "Numerous successful ANN applications have been reported in the literature in a variety of fields including pattern recognition and forecasting [12].", "startOffset": 143, "endOffset": 147}], "year": 2012, "abstractText": "Software aging is a phenomenon that refers to progressive performance degradation or transient failures or even crashes in long running software systems such as web servers. It mainly occurs due to the deterioration of operating system resource, fragmentation and numerical error accumulation. A primitive method to fight against software aging is software rejuvenation. Software rejuvenation is a proactive fault management technique aimed at cleaning up the system internal state to prevent the occurrence of more severe crash failures in the future. It involves occasionally stopping the running software, cleaning its internal state and restarting it. An optimized schedule for performing the software rejuvenation has to be derived in advance because a long running application could not be put down now and then as it may lead to waste of cost. This paper proposes a method to derive an accurate and optimized schedule for rejuvenation of a web server (Apache) by using Radial Basis Function (RBF) based Feed Forward Neural Network, a variant of Artificial Neural Networks (ANN). Aging indicators are obtained through experimental setup involving Apache web server and clients, which acts as input to the neural network model. This method is better than existing ones because usage of RBF leads to better accuracy and speed in convergence.", "creator": "PScript5.dll Version 5.2.2"}}}