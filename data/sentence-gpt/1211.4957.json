{"id": "1211.4957", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Nov-2012", "title": "An Experiment on the Connection between the DLs' Family DL<ForAllPiZero> and the Real World", "abstract": "This paper describes the analysis of a selected testbed of Semantic Web ontologies, by a SPARQL query, which determines those ontologies that can be related to the description logic DL&lt;ForAllPiZero&gt;, introduced in [4] and studied in [9]. We will see that a reasonable number of them is expressible within such computationally efficient language. We expect that, in a long-term view, a temporalization of description logics, and consequently, of OWL(2), can open new perspectives for the inclusion in this language of a greater number of ontologies of the testbed and, hopefully, of the \"real world\".", "histories": [["v1", "Wed, 21 Nov 2012 08:18:54 GMT  (22kb)", "https://arxiv.org/abs/1211.4957v1", "15 pages, 2 sections, 2 appendices, 4 tables"], ["v2", "Fri, 23 Nov 2012 09:59:40 GMT  (22kb)", "http://arxiv.org/abs/1211.4957v2", "15 pages, 2 sections, 2 appendices, 4 tables"]], "COMMENTS": "15 pages, 2 sections, 2 appendices, 4 tables", "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["antonio pisasale", "domenico cantone"], "accepted": false, "id": "1211.4957"}, "pdf": {"name": "1211.4957.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["(cantone@dmi.unict.it)", "(fluoro@email.it)"], "sections": [{"heading": null, "text": "ar X\niv :1\n21 1.\n49 57\nv2 [\ncs .A\nI] 2\n3 N\nov 2\n01 2\nThis paper describes the analysis of a selected testbed of Semantic Web ontologies, by a SPARQL query, which determines those ontologies that can be related to the description logic DL<\u2200\u03c00>, introduced in [4] and studied in [9]. We will see that a reasonable number of them is expressible within such computationally efficient language. We expect that, in a long-term view, a temporalization of description logics, and consequently, of OWL(2), can open new perspectives for the inclusion in this language of a greater number of ontologies of the testbed and, hopefully, of the \u201creal world\u201d.\nINTRODUCTION\nIn the last years, Semantic Web has increasingly expanded its area of influence. Being an innovative instrument for the retrieval of not expressly stored information and a way of organizing concepts and relations by their meaning, it broadens up plenty of horizons for knowledge representation. Though, only a bunch of experts and researchers know that under a suprisingly vast dimension of new features there lies amathematical and logical structure inside which they fight day by day for the balancing of expressiveness and efficiency. The Description Logics formalisms, which wewill see in Section 1, are the formal bases for the so-calledWeb 3.0, that should allow one to automatically infer (and retrieve) new information from reasoning on \u201csematicized\u201d knowledge repositories. Some examples of families of logics are described in the following, together with a short coverage of arguments such as RDF graphs and OWL.\nSection 2 introduces the description logic DL<\u2200\u03c00>, showing notable characteristics of expressive power and polynomial complexity. In the same section, a more detailed description of the analysis, which may be seen as a conceptual experiment, follows. Our purpose is to show that a good number of real-world ontologies may be related to this family of logics. Results are promising enough to spur us to stay on this path and complement it with studies on temporalization of Description Logics and, consequently, of Semantic Web (briefly touched in this report), which we will approach in the near future.\nThe SPARQL query which was specifically created to assess the membership of some real-world ontologies to the aforementioned logic is reported in Appendix A."}, {"heading": "1 THEORETICAL FUNDAMENTALS", "text": ""}, {"heading": "1.1 Description Logics", "text": "Description Logics (DLs) are a family of formalisms for knowledge representation, built on logic-based semantics. They are founded on some fundamental ideas:\n\u2022 basic syntactic \u201cblocks\u201d are atomic concepts (1-ary predicates), atomic roles (2-ary predicates) and individuals (costants);\n\u2022 the expressiveness of a certain language depends on the use of a set of chosen constructors, that give birth to complex concepts and roles starting from existing ones;\n\u2022 bymeans of classification of concepts, a subsumption hierarchy is established, which specifies what concept includes or is included by another;"}, {"heading": "1 THEORETICAL FUNDAMENTALS 2", "text": "\u2022 implied knowledge is automatically obtained through a logic procedure, called reasoning, essentially based on the application of inference rules to subsumption between concepts, and an instance definitions between individuals and the latter.\nOn the assumption that a Knowledge Representation System (KR-System) is to give an answer to a user query, reasoning algorithms for DLs should be regarded as decisional procedures which return a positive or negative verdict. This raises the decision problem for such languages. Furthermore, having an answer does not alwaysmean getting it in a reasonable lapse of time, and that compels us to consider also the complexity of algorithms at stake. Decidability and complexity directly depend on the expressive power of the description logic we use: whereas very expressive DLs tend to have inference problems and be computationally hard (or even undecidable), the DLs that are more efficient in reasoning turn out to be not espressive enough to represent all concepts and relations in the domain of interest. Research still going on in the field of DLs just aims at the ability of balancing expressiveness against efficiency, while not dropping semantic precision that could make it applicable to real world situations.\nADescription Logics Knowledge Base (DLKB) is made of two components: TBox (Terminological Box) and ABox (Assertional Box). The former contains the vocabulary, i.e., the definitions of atomic and non-atomic concepts and roles, called axioms, whereas the latter describes individuals in terms of this vocabulary, i.e. it includes the declarations, called assertions, of their instances. By means of the TBox we can name complex descriptions of concepts and roles. The language for such a naming is what distinguishes one DL from another and is based on a model-theoretic semantics. Thus statements in TBox and ABox can be regarded as first-order logic formulas. Reasoning procedures for the terminological part are used to verify the satisfiability of a description (i.e., its noncontradictoriness), or whether it may be subsumed by another (i.e., whether the latter is more general than the former), while those for the assertive part establish whether its set of assertion is consistent (i.e., it has a model or it entails that a certain individual is an instance of a given concept). Satisfiability tests for descriptions and consistency tests for a set of assertion allow one to establish whether the knowledge base is meaningful or not, whereas subsumption tests allow one to maintain a hierarchy of concepts ab universali; finally, instance tests give one the ability of querying the system against single individuals.\nMore formally, a generic DL axiom is a formula of one of the following types:\n\u2022 C \u2261 D (equivalence between concepts)\n\u2022 C \u2291 D (subsumption between concepts)\n\u2022 R \u2261 S (equivalence between roles)\n\u2022 R \u2291 S (subsumption between roles),1\nwhere the symbols C,D are names or expressions of complex concepts, which are formed by 1-ary or 2-ary operations on/between atomic (indicated by A in the following) or complex concepts, while R,S are names or expressions of complex roles which are formed by 1-ary or 2-ary operations on/between atomic (indicated by P in the following) or complex roles.\nA generic DL assertion is a formula of one of the following types:\n\u2022 C (a) (concept assertion)\n\u2022 R (a, b) (role assertion),\nwhere the symbols a, b are names of individuals, for which the concept C or the roleR holds.2\nFrom a semantical point of view, an interpretation I is a pair (\u2206I , \u00b7I), where the non-empty set\u2206I represents the domain of the interpretation and the interpretation function \u00b7I associates a set AI \u2286 \u2206I to every atomic concept A , a relation P I \u2286 \u2206I \u00d7 \u2206I to every atomic role P , and an element aI \u2208 \u2206I to every individual a. We write:3\n\u2022 I |= (C \u2261 D) iff4 CI = DI\n\u2022 I |= (C \u2291 D) iff CI \u2286 DI\n\u2022 I |= (R \u2261 S) iff RI = SI\n\u2022 I |= (R \u2291 S) iff RI \u2286 SI\n1The equivalence and subsumption between roles may be indicated also by the symbols= and\u2286, respectively. 2A large number of constructs is listed in the table at the end of this section. 3In the following, I |= \u03c6means \u201cI satisfies \u03c6, where \u03c6 can be an axiom or an assertion. A syntax/semantical reference for themain axioms,\nassertions and property declarations is listed in the table at the end of this section. 4\u201cIff\u201d is short for \u201cif and only if\u201d."}, {"heading": "1 THEORETICAL FUNDAMENTALS 3", "text": "\u2022 I |= C (a) iff aI \u2208 CI\n\u2022 I |= R (a, b) iff (a, b)I \u2208 RI\nFinally, we say that I is a model for a DLKB K (and write I |= K) if I satisfies all the axioms and assertions of K . The latter is said to be consistent if there exists at least an interpretation satisfying it, and the search of this interpretation (consistency problem) is just the clue to reasoning."}, {"heading": "1.2 Families of logics", "text": "As already observed, distinct DLs are characterized by the constructs allowed to form complex concepts and roles starting from atomic ones. The names are usually specified by a series of alphabet letters and symbols. In the following, we will not concentrate on formal semantics, but, for the sake of clarity, we will only hint at themeaning of some constructs.\nBy way of an example, we briefly describe the ALC logic (Attributive Language with Complements). Its syntax obeys the following rules:\nC,D \u2192 A | \u22a4 | \u22a5 | \u00acC | C \u2293D | C \u2294D | \u2200R.C | \u2203R.C ,\nwhere \u22a4 denotes the concept enclosing any other one (top concept), \u22a5 denotes the concept enclosed in any other one (bottom concept), \u00ac negates a concept; \u2294 represents the union of concepts (notice the analogy with the corresponding set operators) and\u2293 represents the intersectionof concepts. The last two constructs are called respectively universal and existential restriction, and are pivotal in research connected to this report. The concepts that can be built inALC are calledALC -concepts.The axioms and assertions that may be expressed in theALC logic are\nC \u2261 D, C \u2291 D, C (a) ,\nwhich indicate, respectively, equivalence and subsumption (also called GCI, General Concept Inclusion) between two concepts, and the membership of a concept. However, reasoning in ALC has a PSPACE-complete computational complexity.\nIn addition to those seen above, the most common constructs for concepts which can be formed in DLs are \u2264 1.R (functional restriction, denoted F , that is equivalent to \u2203R.\u22a4), \u2264 nR and \u2265 nR (numerical restrictions , N , which enclose the functional one), \u2264 nR.C and \u2265 nR.C (qualified restrictions, Q , that include the numerical ones), {a} and {a1, . . . , an} (nominals, O ), and \u2203R.Self (self-concept). Contructs for roles are often denoted by an operator symbol inside brackets after the name of the logic. They are R\u2212 (inverse role, I), R \u222a S,R \u2229 S and \u00acR (role union, intersection and complement, respectively), R \u25e6 S (role composition, also used in chain), R+ and R\u2217 (transitive and reflexive-transitive closure of roles), id (C)(concept identity), and RC|, R|D and RC|D (role restrictions). Sometimes, the symbols U (or \u2207, universal role, defining the role which encloses any other one) and N (or \u25b3, empty role, defining the role enclosed in any other one) are used. Other kinds of axioms which can be introduced are R \u2261 S (equivalence between roles), R \u2291 S (hierarchy between roles, H , denoted also by R \u2286 S), and the relative assertionR (a, b) (role instance). The reflexive, irreflexive, symmetric, antisymmetric, transitive, intransitive, disjunctive (two roles having no pair of elements in common), functional and inverse functional properties for roles are denoted by symbols that often differ in literature, but are never ambiguous, e.g. respectively Sym (R) ,Asym (R) ,Refl (R) , Irrefl (R) ,Tr (R) , Intr (R) ,Disj (R) ,Fn (R) , InvFn (R). When transitive property is allowed, we use the symbol S , which corresponds to ALC(+). Sometimes, even small differences among logics (e.g., limitation on the use of atomic rather than complex roles on the right or left part of an assertion) can make a big difference in expressiveness and complexity. Thus, it is not always easy to concisely denote DLs, that consequently constitute an ever-open research field.\nOne ormore among the abovedescripted constructs, axioms and assertions are present in the families of logics that are the base of languages used in ontologies. Among these, an important example is the logic sROIQ(D) (in literature always denoted by SROIQ(D) ), at the bottom of the OWL 2 DL profile, which will be discussed in the following (the letter in parenthesis indicates the use of concrete domains, that will not be discussed here). Its syntax is easily inferred from the symbols, while its complexity is N2EXPTIME-hard.5\n5By the symbol R , we mean that a DL allows complex inclusions of the kindR \u25e6 S \u2291 R andR \u25e6 S \u2291 S."}, {"heading": "1 THEORETICAL FUNDAMENTALS 4", "text": ""}, {"heading": "1.3 Semantic Web", "text": "The so-called Web 2.0 describes the current model of information search. The difference with Web 1.0 is represented by the change in the origin of this information (from below\u2212users\u2212rather than from above\u2212webmasters).\n6The use ofTrans (R),Refl (R), and so on, looks like adding a new type of axiom. Actually, they must be regarded as abbreviations of more complex expressions involving equivalence, subsumption and various constructs which we will not be treated here."}, {"heading": "1 THEORETICAL FUNDAMENTALS 5", "text": "Yet, a paradigm change in its fundamental structure has not occured, as the creator of Web, Tim Berners-Lee, wished instead. Indeed, contents are still exclusively made up of pages connected by links, whose nontrivial words, together with metadata, are indexed by search engines, by means of which a correspondence between those and the one inserted by users can be found. In this way, notwithstanding the high efficiency and precision of the algorithms involved, such engines constitute a \u201cstupid\u201d example of information retrieval, where the matching between terms, even if advanced, weighs more than their meaning.\nThe change brought by the so-called Semantic Web (SW orWeb 3.0) addresses the main issue that in the Web, as we know it, most of the contents are structured in order to be read by humans, rather than investigated by programs in an automatic way. A computer can jump from page to page by following links, but it does not make any assumption on the semantics of their contents. SW is an extension of \u201cprevious\u201dWeb that allows one to assign a meaning to information and providesmachineswith the ability to elaborate and \u201cunderstand\u201dwhat in the past they could only show. For all this to work, computers should be able to access well-structured information schemas and apply inference rules to permit automatic reasoning, in order to delocalize knowledge representation and spread it over theNet. The languages these rules apply should be expressive enough tomake theWeb capable of \u201creasoning\u201d in a versatile and widespread way. That is made possibile by tools such as eXstensible Markup Language (XML), Resource Description Framework (RDF ) and the ontologies described by the Ontology Web Language (OWL)."}, {"heading": "1.4 RDF graphs", "text": "RDF is a model for representation of information on the Web. The basic idea is that every resource (concept, class, property, object, value, etc.) can be univocally described in terms of simple or identified-by-valueproperties. All this permits to schematize an RDF model by means of an oriented graph, whose nodes represent primitive objects and whose edges denote properties. The limited vocabulary of RDF is extended by RDFS (RDF Schema), which allows one to define classes and properties in a more powerful way. E.g., it is possibile to define a property as a relation by indicating its domain and/or range, or say what class is a subclass of another.\nFrom a data structure point of view, an RDF graph may be seen as a set of triples of type (subject predicate object). For each triple, subject and object are two nodes connected by an edge that represents a predicate; thus, the subject of a triple may be the object of another and viceversa. Each of these nodes may be identified by a URI/IRI, and so it can represent a resource, or it may be simply a \u201cconnector\u201d (in this case, it is called a blank node, bnode, or anonymous node). If an object is not a subject of another triple, it may also be a literal, i.e., a datum representing a value in a certain domain.\nOn the representation side, W3C suggests five types of serializations for an RDF graph, themost used of which are RDF/XML (XML language is used) and Turtle (descriptions through lists of triples).7 XML is used because of its precise representation of data. Thus, they can be shared, by means of RDF, among various Web applications while preserving their original meaning."}, {"heading": "1.5 Ontologies", "text": "OWLontologies extend RDFS vocabulary further.8 If RDFS guarantees generality and precision in constructing knowledge representation, withOWLwe reach such an expressiveness that we can \u201cargue\u201d about described information and \u201cextract\u201d more, through reasoning. It provides powerful tools to define classes (that represent concepts), properties (relations among classes) and individuals (their instances), and gives the chance to combine them in logic constraints by means of which necessity and/or sufficiency may be expressed.\nUpon a W3C recommendation, OWL is made up of three sublanguages with increasing expressiveness: OWL Lite, OWL DL and OWL Full. The first two have an almost total correspondence between two peculiar DLs (resp. SHIF (D)and SHOIN (D)).\n9 The last one uses the same subset of OWL DL constructs, but allows them to be unconstrained, according to RDF style. Due to the lack of restrictions on transitive property and to the possibility of handling concepts as individuals (metamodeling), OWL Full turns out to be undecidable and thus, for the correspondence between that and any of the aforesaid DLs, OWL DL is the most expressive decidable sublanguage of OWL.10\nOWL 2 extends OWL by enhancing its features and expressiveness. Apart from a limited number of cases, OWL 2 is perfectly \u201cbackward compatible\u201d with the old OWL (which we call OWL 1 to differentiate it from the OWL 2), i.e., all the ontologies of the latter keep the same semantics as that they had before, even if \u201cfed\u201d to a reasoner for OWL 2. Concisely, OWL 2 introduces a simplification into the writing of the most common statements, it permits\n7The serialization of an object is the process which allows one to represent it in an accessible way, in our case a text file. 8Computer science ambitiously draw on the philosophical term ontology to show that the OWL language can describe the world starting from its ultimate constituents and from relations among them. 9OWL-Lite and OWL-DL provide the possibility of defining annotations, which correspondent DLs do not do. In any case, annotations affect neither reasoning, nor complexity, nor decidability. For the sake of precision, OWL-Lite is considered a \u201csyntactic subset\u201d of OWL-DL. 10Obviously, nothing excludes there is another decidable and more expressive\u2212but not studied yet\u2212sublanguage."}, {"heading": "1 THEORETICAL FUNDAMENTALS 6", "text": "metamodeling, together with some new constructs which increase its expressiveness, and it extends support to data types.\nAs for sublanguages, in OWL 2 we can deal with OWL 2 Full and OWL 2 DL. As mentioned before, the latter corresponds to the sROIQ(D) logic. Though the former may be syntactically seen as the union of the latter with RDFS, it is semantically compatible with OWL 2 DL(insofar as its semantics allows one to draw all the inferences that can be drawn by using the semantics of OWL 2 DL). Similarly to the analogue sublanguage OWL 1 Full, OWL 2 finds application in the modelling of concepts where reasoning is not required. A new feature of OWL 2 is the use of profiles (i.e., fragments of language) OWL 2 EL, OWL 2 QL and OWL 2 RL:11 the first is useful for applications involving ontologies that contain a great number of classes and/or properties; the second aims at those applications with large volumes of instances, where answering the queries is of primary importance (from which the name QL, Query Language); the last profile is useful in applications not requiring the sacrifice of too much expressiveness to efficiency. We will not delve into the structural characteristics of these profiles. Here, we only say that they are grounded on very different DLs, each of them fit for the specific purpose they are designed for."}, {"heading": "1.6 Syntactical correspondence of OWL(2) with DLs", "text": "As to its practical representation, an ontology is a RDF/XML-structured text file, but, for our goals, it will be more useful to think to it in terms of an RDF graph and, thus, of triples. Table 1.3 describes the correspondence between the most common constructs of DLs and such triples (or a single resource, where applicable), which use RDF(S) syntax together with that of OWL(2). It also contains the names given byOWL to the fundamental concepts and roles of DLs. It is interesting to notice how a DL construct often corresponds tomore triples, which sometimes makes interpretation quite hard. The symbols _:x and _list in the Table 1.3 indicate respectively a blank node and a list (a structure we will not deal with), whereas the prefixes before the elements of triples represent standard W3C namespaces, which serve as abbreviations for the URIs they refer to.12"}, {"heading": "1.7 SPARQL", "text": "One of the most widespread languages for querying against ontologies is SPARQL ( recursive acronym for SPARQL Protocol And RDF Query Language). Although it has lots of analogies with SQL, most of which syntactical, it is equipped with a fundamentally different semantics. As query languages for databases essentially work on tables and handle logic conditions to select the rows of these tables that satisfy them, the WHERE clause in SPARQL finds matches between the triples of the query and those of the ontology indicated in the FROM clause. The logic assessments are relegated to the FILTER operator, which possesses a big expressive power, thanks to its several functions, but is rarely used due to the loss of efficiency that its presence may cause.13 The SELECT clause is very similar to that of SQL. It accepts DISTINCT as a keyword and the classical aggregation operators (COUNT, SUM, MIN, AVG and MAX), while the GROUP BY and HAVING clauses are often used (another similarity) to refine the selection. The involved variables are preceded by the symbol \u2019?\u2019, whereas constants do not have a particular syntax, even if they generally coincide with URI/IRIs of resources present in the ontology one is handling.\nAnalyzing in finer detail the WHERE clause, one can say that the triples tomatch are enclosed in a blockbetween braces and separated by a dot, which implies their intersection. Inside these braces, more sub-blocks may be found, which are useful in making the union (UNION operator) and the difference (MINUS operator) between sets. The matching is valid if the variables having the same names in the clause have the same values in the ontology. There exist some useful shortenings, such as the use of semicolon or colon in place of dot, which act respectively in the following way:\n?s ?p1 ?o1 ; ?p2 ?o2 . shortens ?s ?p1 ?o1 . ?s ?p2 ?o2 .\n?s ?p ?o1 , ?o2 . shortens ?s ?p ?o1 . ?s ?p ?o2 .\nIn addition to selection, one can also have the DESCRIBE, ASK and CONSTRUCT query types, which wewill not review here. The employment of the PREFIX clauses, that precede the real query and indicate the abbreviations for namespaces used inside of it, is quite peculiar.\n11In this way, OWL 1 Lite, OWL 1 DL and OWL 2 DL may be considered profiles of OWL 2. 12The correspondences between namespaces and prefixes are:\nrdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#\nrdfs: http://www.w3.org/2000/01/rdf-schema#\nowl: http://www.w3.org/2002/07/owl#\nxsd: http://www.w3.org/2001/XMLSchema#\n13Depending on implementation, the FROM clausemay be implied because software loads in memory the ontology model separately."}, {"heading": "1 THEORETICAL FUNDAMENTALS 7", "text": ""}, {"heading": "2 ANALYSIS AND RESULTS", "text": ""}, {"heading": "2.1 The family DL<\u2200\u03c00>", "text": "Description Logics derived from decidable fragments of set theory, generally denoted by the notation DL<LANGUAGE_NAME>, are having considerable importance.\nThe family of logics underlying this class of ontologies, object of research this project is based on, is focused on the fragment \u2200\u03c00 , which has a good expressiveness w.r.t. knowledge representation in real-world applications. The interest aroused by that is related to NP-completeness of its decision procedure in some cases of practical relevance. DL<\u2200\u03c00>-concepts and DL<\u2200 \u03c0 0>-roles are formed according to the syntax 14\nC,D \u2192 A | \u22a4 | \u22a5 | \u00acC | C \u2293D | C \u2294D | {a} | \u2203R.Self | \u2203R. {a} R,S \u2192 P | U | R\u2212 | \u00acR | R \u2293 S | R \u2294 S | RC| |R|D | RC|D | id (C) | sym (R) ,\nwhile aDL<\u2200\u03c00>-KB is made of axioms and assertions of the following kind:\nC \u2261 D C \u2291 D C \u2291 \u2200R.D \u2203R.C \u2291 D C (a) R (a, b) R \u2261 S R \u2291 S R \u25e6R\u2032 \u2291 S Trans (R) Refl (R) Asym (R) Fn (R) InvFn (R) .\nWe may notice that universal restriction is allowed only in the right part of a subsumption, whereas existential restriction can appear only in the left part. In addition, neither numerical, nor qualified restrictions are allowed."}, {"heading": "2.2 Description of the experiment", "text": "Our analysis is aimed at selecting ontologies corresponding to the DL<\u2200\u03c00> family, in order to use them as a base of study for this family of logics in real-world applications. To do that, it is necessary to query against as many as possible publicly available ontologies in a quick and efficient way. The use of queries in SPARQL conveniently lends itself to the purpose. The management is provided by dOWLphin, a Java library specifically created in order to easily load the ontologies and prepare the queries. The underlying library is Jena, one of the most common collections of API for the Semantic Web, that is very handy because it can directly deal with triples. As a front-end GUI, the program QuAny was used, which was born inside the experiment too and allows one to query against local and remote ontologies, and save on disk the corresponding results, for future verification."}, {"heading": "2.3 Results and future objectives", "text": "The query was employed to test a significant number of ontologies of BioPortal, the web portal of the National Center for Biomedical Ontology. This choice was not random, but motivated mainly by two reasons: the first concerns the large amount of ontologies present on the portal, coming from repositories of biomedical resources spread all over the world; the second is relative to the connection that these ontologies have with the real world in general, and with human life and medicine in particular, which are fields offering several matters for reflection on how widely knowledge of so important themes may be schematized and represented, and, most of all, on the role reasoning may have in automatically inferring new information.\nAround 30% of the ontologies resulted member of the language DL<\u2200\u03c00>, which brings good hopes for reasoning on them, given that\u2212we remind\u2212w.r.t. computational complexity we are in the NP-completeness realm. Concerning the remaining 70%, efficient algorithms for conversion will have to be considered and semantic tests will have to be done, as previously happened for theDL<MLSS\u00d72,m > language (cfr. [3]).\nIn Appendix B, a table shows which ontologies were recognized as members of the language DL<\u2200\u03c00>.\n14The symbol sym (R) denotes symmetric closure ofR."}, {"heading": "A ANALYSIS OF THE SPARQL QUERY", "text": "As we are going to see in the implementation, to write declaratively what an algorithm could do through a list of well-constructed statements is not an immediate operation to undertake. The final query is the result of various logical lines of argument concerning the conversion from DL<\u2200\u03c00>-constructs into those of RDF(S)/OWL(2), opportunely applied to some test ontologies.\nFromTable 1.3, one infers that, for the ontology under examination to be considered part of the family of logics seen before, the allowed elements of RDF(S)/OWL(2) are the following:\n\u2022 class or property definition (rdf:type)\n\u2022 top concept (owl:Thing)\n\u2022 bottom concept (owl:Nothing)\n\u2022 concept negation (owl:complementOf)\n\u2022 intersection and union of concepts (resp. owl:intersectionOfand owl:unionOf)\n\u2022 singleton (owl:oneOf)\n\u2022 self concept (owl:hasSelf)\n\u2022 value restriction (owl:hasValue)\n\u2022 universal role (owl:topObjectProperty)\n\u2022 role inverse (owl:inverseOf)\n\u2022 intersection and union of roles (not present in OWL 2)15\n\u2022 role restrictions (not present in OWL 2)\n\u2022 identity concept (not present in OWL 2)\n\u2022 symmetric closure (it can be emulated bymeans of union and inverse of roles)\n\u2022 equivalence axiom between concepts (owl:equivalentClass)\n\u2022 subsumption axiom between concepts (rdfs:subClassOf)\n\u2022 exiistential restriction (owl:someValuesFrom) only in the left part of a subsumption\n\u2022 universal restriction (owl:allValuesFrom) only in the right part of a subsumption\n\u2022 minimal numerical restriction (owl:minCardinality)with cardinality not greater than 1, only in the left part of a subsumption\n\u2022 declaration of concept membership (rdf:type)\n\u2022 declaration of role membership\n\u2022 equivalece between roles (owl:equivalentProperty)\n\u2022 inclusion between roles (owl:subPropertyOf)\n\u2022 role chaining (owl:PropertyChainAxiom)\n\u2022 transitive property (owl:TransitiveProperty)\n\u2022 reflexive property (owl:ReflexiveProperty)\n\u2022 asymmetric property (owl:AsymmetricProperty)\nWe have to add to these all the ones that can be deduced from a combination of them, such as\n\u2022 disjunction between concepts (owl:disjointWith,owl:members)\n15Obviously, we may ignore the constructs not present in OWL 2, since they cannot be a cause of rejection of the ontology."}, {"heading": "A ANALYSIS OF THE SPARQL QUERY 11", "text": "\u2022 union of disjoint concepts (owl:disjointUnionOf)\n\u2022 equivalence and non-equivalence between individuals (resp. owl:sameAs and owl:differentFrom)\n\u2022 empty role (owl:bottomObjectProperty)\n\u2022 role domain (rdfs:domain, some cases excluded)16\n\u2022 role range (rdfs:range)\n\u2022 disjunction of properties (owl:propertyDisjointWith,owl:members)\n\u2022 irreflexive property (owl:IrreflexiveProperty)\n\u2022 symmetric property (owl:SymmetricProperty)\n\u2022 direct and inverse functional property (resp. owl:FunctionalProperty,owl:InverseFunctionalProperty)\n\u2022 declaration of role non-membership (owl:NegativePropertyAssertion)\nConsequently, the constructs which cause the rejection of an ontology are:\n\u2022 existential restriction not in the left part of a subsumption\n\u2022 universal restriction not in the right part of a subsumption\n\u2022 minimal numerical restriction with cardinality greater than 1 or not in the left part of a subsumption\n\u2022 qualified numerical restrictions (owl:[max|min]QualifiedCardinality,owl:qualifiedCardinality)\n\u2022 maximum and exact unqualified numerical restrictions (resp. owl:maxCardinality,owl:cardinality)\n\u2022 some cases of domain declaration17\n\u2022 datatype (rdfs:Datatype, owl:DatatypeProperty)\nIn order to create the query, we must consider that the language DL<\u2200\u03c00> is very expressive and provides constructs and axioms which range over several elements of RDF(S)/OWL(2). Thus, to abbreviate the task of enumerating them, the criterion of selecting the triples not related to the language was adopted. Consequently, the result of the query will contain at least a triple if the examined ontology is to be rejected. There are asmany clauses as the elements to consider, connected by the UNION operator; thus, if at least amatch is found, a non empty result will be obtained, i.e., the analyzed ontology will not be a member of the language.\nNow, let us analyze the correctness of the query in detail (the relative row number is indicated in brackets, when necessary).\n\u2022 The first clause (lines 7-19) includes the triples corresponding to existential restrictions (line 8). Yet, not all of themcontribute to the rejection of the ontology, but only thosewhich are not in the left part of a subsumption. Thus, in line 10 we force their exclusion, provided that any is found. If this is not the case, we find a match, according to line 8; otherwise, we must control that neither of the following cases occurs (lines 11-17):18\n\u2013 the anonymous node corresponding to a restriction is in the right part of any triple (line 12): that allows one to include all the axioms with the restriction and the various operators (e.g., union, intersection, complement, etc.) which work on lists and single classes in the right part;\n\u2013 the above-mentioned node is in the left part of a triple corresponding to an axiom (lines 13-16): that allows one to include single and multiple equivalences and disjunctions.\n\u2022 The second clause (lines 19-33) includes the triples corresponding to universal restrictions (line 20). When a triple of this kind is found, in order for amatching to be valid, it is also necessary to check that at least either of the following cases occurs (lines 22-31):\n\u2013 the anonymous node corresponding to a restriction is in the right part of a triple (line 23), but this triple is not a subsumption (line 24), nor that node is the domain of a property (line 25);\n16Role domain corresponds to the DLs\u2019 axiom \u2203R.\u22a4 \u2291 C, so it is necessary to verify that C is satisfactorily expressed by the language. 17Cf. footnote 16. 18The second-level MINUS operator could be optimized by including the various triples contained in its clauses after line 8; nonetheless, we must not forget that the matching of triples is a notoriusly not very much efficient operation: the choice of double-nesting concurs to avoid that SPARQL engine performs useless searches when no subsumption in line 10 is found."}, {"heading": "A ANALYSIS OF THE SPARQL QUERY 12", "text": "\u2013 the above-mentioned node is in the left part of a triple (line 27), but it is not part of the definition of the restriction itself (lines 28-30) (otherwise, an ever-false conditionwould be represented): that is to control that the restriction is neither in the left part of an axiom, nor in the left part of some class construct.\n\u2022 The third clause (lines 33-46) includes the triples corresponding to an operator of minimal cardinality (line 34). Here we proceed (line 36 and lines 39-43) as in the first clause, with the difference (line 37) that the cardinality value must be not greater than 1 too.19\n\u2022 The remaining clauses (lines 47-51) check for datatype (lines 47 and 48), qualified cardinality (line 49: the onClass property is peculiar to this kind of restriction), exact and maximum cardinality (lines 50 and 51) triples.\n\u2022 For the purpose of accelerating the execution, the use of the LIMIT operator (line 52) reduces the size of results to only one element, which is enough to reject the ontology.\n1 PREFIX rdf: <http://www.w3.org/1999/02/22 -rdf -syntax-ns#> 2 PREFIX rdfs: <http://www.w3.org/2000/01/rdf -schema#> 3 PREFIX owl: <http://www.w3.org/2002/07/owl#> 4 5 SELECT * 6 WHERE { 7 { 8 ?left owl:someValuesFrom ?class . 9 MINUS {\n10 ?left rdfs:subClassOf ?right . 11 MINUS { 12 { ?s ?p ?left . } UNION 13 { ?left owl:equivalentClass ?right . } UNION 14 { ?left owl:disjointWith ?right . } UNION 15 { ?left owl:members ?right . } UNION 16 { ?left owl:disjointUnionOf ?right . } 17 } 18 } 19 } UNION { 20 ?restr owl:allValuesFrom ?class . 21 { 22 { 23 ?x ?prop ?restr . 24 MINUS { ?x rdfs:subClassOf ?restr . } 25 MINUS { ?x rdfs:domain ?restr . } 26 } UNION { 27 ?restr ?prop ?x . 28 MINUS { ?restr rdf:type ?x . } 29 MINUS { ?restr owl:onProperty ?x . } 30 MINUS { ?restr owl:allValuesFrom ?x . } 31 } 32 } 33 } UNION { 34 ?left owl:minCardinality ?num . 35 MINUS { 36 ?left rdfs:subClassOf ?right . 37 FILTER (?num <=1) . 38 MINUS { 39 { ?s ?p ?left . } UNION 40 { ?left owl:equivalentClass ?right . } UNION 41 { ?left owl:disjointWith ?right . } UNION 42 { ?left owl:members ?right . } UNION 43 { ?left owl:disjointUnionOf ?right . } 44 }\n19Footnote 18 holds also for the nested MINUSes.\nA ANALYSIS OF THE SPARQL QUERY 13\n45 } 46 } UNION 47 { ?s ?p owl:DatatypeProperty . } UNION 48 { ?s ?p rdfs:Datatype . } UNION 49 { ?s owl:onClass ?o . } UNION 50 { ?s owl:cardinality ?o . } UNION 51 { ?s owl:maxCardinality ?o . } 52 } LIMIT 1"}, {"heading": "B TEST AGAINST BIOPORTAL ONTOLOGIES", "text": "The SPARQLquerywas testedagainst the ontologies of BioPortal, available at the link http://rest.bioontology.org/biopor The API KEY is an identifier for the registered users. The following table associates the ID of the previous URL to the symbolic name of the corrispondent ontology and highlights the ones which belong to the language.\nID Name Res ID Name Res ID Name Res\n1033 NMR Metabolomics Investig. Y 1362 Hymenoptera Anatomy N 1552 Reprod. Trait and Phenotype Y\n1039 ProteomicsData N 1369 PhysicalFields Y 1560 Cognitive Paradigm N\n1052 Proteins N 1381 NIF Dysfunction Y 1565 Medical Social Entities Y\n1054 Amino-acid N 1393 Information Artifacts N 1567 Pharmacovigilance Y\n1056 Basic Vertebrate Anatomy N 1394 Syndromic Surveillance N 1569 Host Pathogen Interactions N\n1058 SNP N 1398 Language Disorder in Autism Y 1570 Traditional Med. Constitution Y\n1059 Computer-based Patient Record N 1399 Pilot Ontology N 1571 Traditional Med. Other Factors Y\n1060 Epoch Clinical Trial N 1401 Nursing Practice N 1572 Trad. Med. Signs and Symptoms Y\n1061 Pharmacogenomics N 1402 NIF Cell N 1573 Traditional Med. Meridian Y\n1068 Subcellular Anatomy N 1406 LinkingKing2PEP N 1576 FDAMed. Devices N\n1082 Gene Regulation (GRO) N 1407 Description of Dynamics N 1578 HOM-Helixhauser Scores N\n1083 NanoParticles N 1409 PKO Re Y 1580 Adverse Event Reporting N\n1084 NIFSTD Y 1410 Kinetic Simulation Algorithm N 1581 Health Indicators N\n1086 Disease Genetic Investigation N 1411 Functioning, Disability and Health N 1582 CAO N\n1087 Geographical Regions Y 1413 Software N 1588 General Purpose Datatypes N\n1088 MaHCO N 1414 General Medical Science Y 1596 HOM_MDCs-DRGS N\n1089 BIRNLex N 1415 CTCAE N 1613 BoneDysplasia N\n1092 Infectious Diseases N 1417 Influenza N 1615 Chemogenomics N\n1100 Genetic Intervals N 1418 TOK N 1616 Phylogenetics Y\n1104 Biomedical Resource N 1438 Breast tissue cell lines N 1625 HOM-ICD9PCS N\n1106 Gene Regulation (BOOTStrep) N 1439 General Formal (GFO) N 1627 HOMERUN Metadata N\n1116 Bleeding History Phenotype N 1440 General Formal (GFO-Bio) N 1629 HOM-UCARE Demographics N\n1122 Skin Physiology N 1444 Chemical Information N 1631 HOM-Harvard N\n1123 Biomedical Investigations N 1461 Translational Medicine N 1633 Cognitive Alias N\n1126 Family Health History N 1484 External Causes of Injuries N 1638 Data Mining Y\n1128 Comparative Data Analysis N 1487 Body System Y 1639 Epilepsy N\n1130 Cancer Research andMgmt N 1488 SysMO-JERM N 1640 Pediatric Terminology N\n1131 MGED N 1489 Adverse Events N 1641 HOM-ICD9CM-ECODES N\n1134 BioTop N 1494 Tissue Microarray N 1642 HOM-DXPROCS MDCDRG N\n1136 Experimental Factors Y 1497 PMA 2010 N 1643 HOM-ICD9_PROCS OSHPD N\n1141 Physics for Biology N 1500 RNA N 1648 HOM-DATASOURCE OSHPD N\n1142 Cardiac Electrophysiology Y 1501 Neomark Oral Cancer-based N 1650 Units Y\n1146 Electrocardiography N 1505 MicroRNA Target Prediction N 1652 HOM-OSHPD Use cases N\n1149 Dermatology Lexicon N 1515 Interaction Network Y 1653 HOM-PROCS2 OSHPD N\n1172 Vaccines N 1521 Neural Motor Recovery Y 1658 Hewan Invertebrata N\n1183 Lipids N 1522 BioPAX N 1665 Student Health Record N\n1190 Parasite LifeCycle N 1523 OBOE-SBC N 1666 Emotion N\n1192 Proteomics Pipeline Infrastructures N 1524 OBOE N 1667 HOM-DATASOURCE OSHPDSC N\n1237 Situation-based Access Control N 1530 Animal natural history N 1668 HOM-OSHPD-SC N\n1247 GeoSpecies N 1532 SemanticScience Y 1671 Quantitative Imaging Biomarkers N\n1249 Smoking Behavior Risk N 1533 BioAssay N 1672 DIKB-Evidence N\n1290 ABA Adult Mouse Brain Y 1534 Apollo-akesios Y 1676 Randomized Controlled Trials N\n1304 Breast Cancer Grading N 1537 Brucellosis N 1686 Neomark Oral Cancer Y\n1314 Cell Line (2) N 1538 Roles Y 1696 Synapses Y\n1321 Neural ElectroMagnetic Ontology N 1540 Drug Discovery Investigations N 3002 Mental Functioning Y\n1332 Basic Formal Ontology Y 1541 Cell Line (MCCL 2) N\n1335 Parasite Experiments N 1550 PHARE N"}], "references": [{"title": "The Description Logic Handbook: Theory, Implementation, and Applications - 2: Basic Description Logics", "author": ["Franz Baader", "Werner Nutt"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "Web Semantico in Le Scienze - 393 (Italian translation of The Semantic Web", "author": ["Tim Berners-Lee", "James Hendler", "Ora Lassila", "Il"], "venue": "Scientific American),", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2001}, {"title": "A Decidable Quantified Fragment of Set Theory Involving Ordered Pairs with Applications to Description Logics in Computer Science Logic (CSL\u201911) - 25th International Workshop/20th", "author": ["Domenico Cantone", "Cristiano Longo", "Marianna Nicolosi Asmundo"], "venue": "Annual Conference of the EACSL,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Foundations of Semantic Web Technologies", "author": ["Pascal Hitzler", "Markus Kr\u00f6tzsch", "Sebastian Rudolph"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2009}, {"title": "Reducing OWL entailment to description logic satisfiability", "author": ["Ian Horrocks", "Peter F. Patel-Schneider"], "venue": "Journal of Web Semantics,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2004}, {"title": "Resource Description Framework (RDF): Concepts and Abstract", "author": ["Graham Klyne", "Jeremy J. Carroll"], "venue": "Syntax on <http://www.w3.org/TR/rdf-concepts>,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2004}, {"title": "Set Theory for Knowledge Representation", "author": ["Cristiano Longo"], "venue": "Ph.D. Thesis,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "The Description Logic Handbook: Theory, Implementation, and Applications - 1: An Introduction to Description Logics", "author": ["Daniele Nardi", "Ronald J. Brachman"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2003}, {"title": "RDFS(FA): Connecting RDF(S) and OWL DL in IEEE Transaction on Knowledge and Data Engineering", "author": ["Jeff Z. Pan", "Ian Horrocks"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2007}], "referenceMentions": [{"referenceID": 2, "context": "This paper describes the analysis of a selected testbed of Semantic Web ontologies, by a SPARQL query, which determines those ontologies that can be related to the description logic DL<\u2200\u03c00>, introduced in [4] and studied in [9].", "startOffset": 205, "endOffset": 208}, {"referenceID": 6, "context": "This paper describes the analysis of a selected testbed of Semantic Web ontologies, by a SPARQL query, which determines those ontologies that can be related to the description logic DL<\u2200\u03c00>, introduced in [4] and studied in [9].", "startOffset": 224, "endOffset": 227}], "year": 2012, "abstractText": "This paper describes the analysis of a selected testbed of Semantic Web ontologies, by a SPARQL query, which determines those ontologies that can be related to the description logic DL<\u2200\u03c00>, introduced in [4] and studied in [9]. We will see that a reasonable number of them is expressible within such computationally efficient language. We expect that, in a long-term view, a temporalization of description logics, and consequently, of OWL(2), can open new perspectives for the inclusion in this language of a greater number of ontologies of the testbed and, hopefully, of the \u201creal world\u201d.", "creator": "LaTeX with hyperref package"}}}