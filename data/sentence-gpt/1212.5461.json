{"id": "1212.5461", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Dec-2012", "title": "Interactive Ant Colony Optimisation (iACO) for Early Lifecycle Software Design", "abstract": "Software design is crucial to successful software development, yet is a demanding multi-objective problem for software engineers. In an attempt to assist the software designer, interactive (i.e., using software to create new interfaces to display the content of a file or display a new layout) tooling tooling system, we developed the code for three free software open source projects that utilize 3D-printed materials from 3D printed materials: CAD, CAD, CML, and others. We use this method to create custom software design, in which designers can build a series of tools that are easily customized and easily customized.\n\n\n\n\nIn each free open source project, we are designed to make a variety of software components available on all 3D printed materials including the CAD program or 3D printed materials. It is a simple tool that works in almost any environment. It also provides a large variety of useful tools, which will help you optimize and optimize your project in a reasonable way.\nA 3D printed material is a 3D printed material that can be used to print the components that will be used in the CAD program or 3D printed materials: CAD.\nThe software is designed to work with the 3D printed material for creating the CAD program or 3D printed materials: CAD.\nFor any free software program or software project, it is necessary to be able to produce a high-quality CAD product. You may need to learn 3D printed materials from all 3D printed materials available on the 3D printed material:\nThe 3D printed materials have a standard thickness and are not affected by special materials or features, such as 3D printing, printed materials, etc.\nThe 3D printed materials are not fully assembled and can be printed out using a conventional method, such as printing from any materials. It is not possible to print the 3D printed materials to any of the 3D printed materials.\nThe 3D printed materials are designed to be printed from 3D printed material.\nA 3D printed material consists of an 8 mm diameter plastic layer (3D print surface), a circular plastic layer (2D print surface), a 1 mm diameter metal layer (2D print surface) and a 3D printed material called a \"mesh\". In each 3D printed material, the printed material contains a 3D printed material that is not suitable for printing.\nThis 3D printed material is not fully assembled and is not suitable for printing, since it has a large diameter, can be used as a substrate for printing", "histories": [["v1", "Fri, 21 Dec 2012 14:31:42 GMT  (530kb)", "http://arxiv.org/abs/1212.5461v1", "31 pages including appendices"], ["v2", "Mon, 23 Jun 2014 10:52:48 GMT  (532kb)", "http://arxiv.org/abs/1212.5461v2", "31 pages including appendices"]], "COMMENTS": "31 pages including appendices", "reviews": [], "SUBJECTS": "cs.SE cs.AI", "authors": ["christopher l simons", "jim smith", "paul white"], "accepted": false, "id": "1212.5461"}, "pdf": {"name": "1212.5461.pdf", "metadata": {"source": "CRF", "title": "Interactive Ant Colony Optimization (iACO) for Early Lifecycle Software Design", "authors": ["Christopher L. Simons", "Jim Smith"], "emails": ["paul.white}@uwe.ac.uk"], "sections": [{"heading": null, "text": "Software design is crucial to successful software development, yet is a demanding multi-objective problem for software engineers. In an attempt to assist the software designer, interactive (i.e. human in-the-loop) meta-heuristic search techniques such as evolutionary computing have been applied and show promising results. Recent investigations have also shown that Ant Colony Optimization (ACO) can outperform evolutionary computing as a potential search engine for interactive software design. With a limited computational budget, ACO produces superior candidate design solutions in a smaller number of iterations. Building on these findings, we propose a novel interactive ACO (iACO) approach to assist the designer in early lifecycle software design, in which the search is steered jointly by subjective designer evaluation as well as machine fitness functions relating the structural integrity and surrogate elegance of software designs. Results show that iACO is speedy, responsive and highly effective in enabling interactive, dynamic multi-objective search in early lifecycle software design. Study participants rate the iACO search experience as compelling. Results of machine learning of fitness measure weightings indicate that software design elegance does indeed play a significant role in designer evaluation of candidate software design. We conclude that the evenness of the number of attributes and methods among classes (NAC) is a significant surrogate elegance measure, which in turn suggests that this evenness of distribution, when combined with structural integrity, is an implicit but crucial component of effective early lifecycle software design.\nKeywords: Ant Colony Optimization, Software Design, Interactive Search"}, {"heading": "1 INTRODUCTION", "text": "Software design is both fundamental to the successful development of softwareintensive systems and cognitively demanding for software engineers to perform. Indeed, in early-lifecycle software design, designers wrestle with numerous tradeoff judgments as they formulate candidate design solutions as a basis for subsequent down-stream development activities. In an attempt to assist the\nsoftware designer, interactive meta-heuristic search techniques such as evolutionary algorithms (EAs) with the software designer \u2018in-the-loop\u2019 have been recently studied and show promising results. After early empirical investigations incorporating designer preferences in search [1], [2], subsequent studies have combined quantitative machine-calculated fitness functions with qualitative designer evaluation of design elegance in a dynamic, multi-objective, interactive search [3]. These studies show that the precise balance of factors affecting the subjective judgments of the human software designer is highly significant but poorly understood \u2013 hence the oft-heard references to the \u201cart\u201d of software design.\nInterestingly, however, recent investigations comparing different meta-\nheuristic search approaches have shown that ant colony optimization (ACO) can outperform evolutionary computation in quantitative search with respect to arriving at design solution candidates of superior fitness at earlier iterations / generations [4], [5]. This suggests that as an engine for interactive search, ACO has great potential. One major contribution of this paper is to exploit this potential by surveying a range of approaches to interactive multi-objective search, and then making an informed proposal for interactive ACO (iACO) for software design (Section 3). To evaluate the proposal, we describe the experimental methodology for an empirical study involving a number of software engineers in three case studies of early lifecycle software design (Section 4). Results of empirical investigations are presented in Section 5, while threats to validity are discussed in Section 6. Finally in Section 7, we conclude by assessing the effectiveness of iACO in assisting the software designer in early lifecycle software design."}, {"heading": "2 BACKGROUND", "text": ""}, {"heading": "2.1 Search-Based Early-Cycle Software Design", "text": "From its early roots using genetic algorithms to evolve software test sequences [6], [7], the idea that many aspects of software development are essentially optimization problems, and as such are amenable to automated search, has rapidly gained currency. In most cases the search suffers from combinatorial explosion, and the \u201cfitness\u201d landscapes are thought to exhibit discontinuities and multiple optima, motivating the use of meta-heuristics to perform the search. The term \u201cSearch Based Software Engineering\u201d (SBSE) was coined around the turn of the\nmillennium by Harman and Jones [8]. In the last decade applications of SBSE can be found across the spectrum of the software development lifecycle, including requirements analysis and scheduling [9], design tools and techniques [2], [10], software testing [11], automated bug fixing [12], and software maintenance [13]. A comprehensive repository of publications in SBSE is maintained by Zhang [14].\nIn early-lifecycle software development, it is necessary to first define\nrequirements for the software system-to-be relevant to the problem domain under investigation. Then the designer identifies and evaluates concepts and information relevant to the design problem domain. This is an intensely people-centric activity, and typically involves multi-objective trade-offs using competing criteria [15], [16], [17]. Clearly, such design trade-offs are largely subjective, depending greatly on the competence of the individuals performing the design. Using the object-oriented paradigm, the identified concepts and information are expressed as \u201cobjects\u201d and \u201cclasses\u201d and these constructs have crucial relevance to subsequent downstream software implementation and testing. The Unified Modelling Language (UML) [18] is widely used by software designers to visualize and specify classes as well as other aspects of software designs. Using the UML, classes are placeholders or groupings of attributes (i.e. data that need to be stored, computed and accessed), and methods (i.e. units of execution by which objects communicate with other objects, programs and users). Thus early lifecycle software design can be formulated as a search among possible design structures for those comprising an appropriate grouping of attributes and methods into classes."}, {"heading": "2.2 Interactive Meta-Heuristic Optimization", "text": "Fundamentally, the aim of interactive meta-heuristic search in early lifecycle software design is to support rather than replace the designer. Indeed, interactive EAs have been successfully applied in a wide range of applications to facilitate user-personalization. Typically the user is presented with a number of solutions, and rates them according to how well they meet their desiderata. This process implicitly captures the user's multi-objective decision making processes without the need for time consuming explicit knowledge-acquisition process [19]. Well known early applications include face-recognition [20], the evolution of computer graphics [21], and fitting Cochlear Implants [22].\nInteractive multi-objective search techniques have also been widely used\nin the Multi-Criteria Decision Making (MCDM) community to gain insight into combinatorial optimization problems. Miettinen [23] provides a comprehensive survey of interactive search methods and distinguishes various methods of decision-maker involvement in multi-objective search, such as a priori methods: \u201cwhere the decision maker must specify their preferences, hopes and opinions\u201d before the automated search, as opposed to a posteriori methods, which perform automated search to proceed without human guidance, then provide the decision maker with a selection of alternative solutions. Both these methods are differentiated from interactive search wherein the human actively participates in the on-going search process. Belton et al. [24] examine interactive multi-objective optimization from a learning perspective, and speculate on ways to enable mutual learning between decision makers and search processes while emphasizing the role of interactive decision making software tools and environments. Deb attempts to consolidate knowledge of the MCDM and SBSE communities to assess the state-of-the-art in evolutionary multi-objective optimization [25]. Deb also considers multi-objective user evaluation in search and highlights the need for a dynamic search process in which objectives, constraints and search parameters may change over time to suit the interaction of the individual (our emphasis)."}, {"heading": "2.3 Reducing the Cognitive Burden of Interactive Search", "text": "The reliance on human guidance and judgment to direct and control the search, presents both potential weaknesses and strengths. On one hand, human subjective assessment tends to have a component of inconsistency and non-linearity of focus over time [26], which creates a need for rapid convergence. On the other hand, the ability to swiftly maneuver the search interactively can be exploited as a powerful strategy for adapting an otherwise naive search process. There have been a number of studies addressing the issues related to minimizing fatigue, both physical and psychological, that can result from prolonged interaction times and the possible stress of the evaluation process. Discretizing continuous fitness values into five or seven levels was shown to facilitate decision making, without significantly compromising convergence [27]. This limit on capacity for processing information has been comprehensively discussed in Miller [28] where\nhe suggests organizing the information successively into a sequence of \u201cchunks\u201d to help stretch this limit on bandwidth.\nAn alternative approach to reducing time taken to discover good solutions\nis combining larger population sizes with a screening mechanism in which only a few individuals showing superior fitness are displayed to the user. Several methods have been proposed as \u201csurrogate models\u201d of user-provided fitness by, for example, clustering individuals [29], [30] or using multiple fuzzy state-value functions to approximate the trajectory of human scoring [31]. Avigad et al. [32], propose a multi-objective EA in which a model-based fitness of sub-concept solutions (using a sorting and ranking procedure) is combined with human evaluation. Similar approaches are reported by Brintrup et al. [33]. Previously [3] we have used periodic qualitative (user-provided) evaluations of software designs to dynamically update a surrogate model that combined quantitative measurements of structural integrity and metrics relating to design symmetry to drive the evolution of elegant software designs with reduced need for human evaluations.\nOf course, a computationally efficient search engine is a prerequisite for a\ncompelling interactive search experience. To minimize any frustration and/or fatigue for the user, and to maximize the consistency of user interaction, the underlying computational search must achieve a number of characteristics (see e.g. [19], [23]). Firstly, it must effectively explore the search space to arrive at candidate solutions of superior fitness, while at the same time allowing the search to be jointly steered by subjective user evaluation. Secondly, it must produce superior candidate design solutions in a minimum number of search iterations to provide a sense of positive progress for the user. Thirdly, it must be capable of multi-objective search, and be dynamically sensitive to user evaluation."}, {"heading": "2.4 Choice of Meta-Heuristics for Interactive Search", "text": "Evolutionary computing is well understood and has a long history of success in interactive search, but history per se is not necessarily a good scientific motivation for investigation. With this in mind, the multi-objective performance of evolutionary algorithms (EAs, e.g. [34]) and ant colony optimization (SimpleACO or S-ACO [35], [36]) have been compared by Simons and Smith for software design, with respect to both structural integrity and surrogate elegance\nmetrics [4], [5]. The results are summarized as follows. Given a large computational budget (in terms of search iterations), an evolutionary algorithm with an integer-based representation emerges as superior. The evolutionary algorithm is also more robust for very large scale design problems where the number of classes in a software design is high. However, if the computational budget is limited (as is likely in interactive search), then a very different picture emerges. In this case, using a graph representation of software designs, ACO finds higher quality solutions, and in less search iterations. Moreover, in design solutions where the number of classes is fewer (but nevertheless typical of a realistic design problem) and the number of attributes and methods are high, ACO discovers candidate design solutions in approximately half the number of search iterations of the evolutionary algorithm. Simons and Smith conclude that ACO has significant potential as a search engine for interactive software design.\nIt is perhaps surprising to note that very few examples of interactive\nsearch involving ACO appear in the research literature. An early attempt to apply ACO to the design of constrained engineering design problems is reported in [37]. Some years pass before there is a report of interactive search with Particle Swarm Optimization used to design temperature profiles for a batch beer fermenter in 2005 [38]. Xing et al. [39] report the use of interactive fuzzy ACO for Job Shop Problems in 2007, while Ugur and Aydin describe an interactive simulation for solving the TSP using ACO in 2009 [40]. More recently, Albakour et al. report the use of ACO to simulate and interact with user query logs to learn knowledge about user behavior in a collection of documents [41].\nNotwithstanding the above, it would seem that reports of interactive ACO\nused in any design domain are not abundant in the literature. Nevertheless, our previous encouraging results of ACO as a search engine strongly suggest that application of ACO for interactive software design shows great potential."}, {"heading": "3 PROPOSED APPROACH", "text": "In this section, the software design problem and solution representations of the proposed approach are described, and this is followed by a specification of the fitness measures used. Next, the iACO search engine is described. Lastly, the proposed approach to software designer interaction is outlined to show how the designer\u2019s qualitative evaluations are integrated with the iACO search engine."}, {"heading": "3.1 Representation", "text": "The software design problem is specified by means of UML use cases i.e. scenarios of usage of the software system-to-be described in terms of the interactions of humans (as actors) with the automated system [18]. The natural language text of the use case descriptions is analyzed as follows. Nouns are identified as data; verbs are identified as actions. If a datum is acted upon by the action, as is typical when the datum and action are co-located in a single interaction in the use case scenario, the action is said to \u201cuse\u201d the datum. Thus in the language of UML, a software design problem is defined by a set of \u201cmethods\u201d (actions), a set of \u201cattributes\u201d (data), and their corresponding \u201cuses\u201d. This mapping ensures traceability from the design problem to the design solution. A full description of this software design problem specification can be found at [2].\nThe software design solution representation used is inspired by models for\nthe Travelling Salesman Problem (TSP) and Vehicle Routing Problem (VRP) [42]. A solution consists of a complete path through a graph whose vertices represent elements of a software design solution. These are all of the attributes and methods, and we also add \u201cend of class\u201d elements (akin to \u201creturn to depot\u201d markers) to delimit the scope of individual classes in the design solution path."}, {"heading": "3.2 Fitness Measures", "text": "To reflect the multi-objective nature of the ACO search, a combination of fitness measures is used. The first fitness measure provides an assessment of the structural integrity of a software design. Designers typically strive for high cohesion in classes (to reflect a clear purpose) and low coupling between objects (to ensure the design is robust yet flexible to change). Thus, the first fitness measure is inspired by the \u201cCoupling Between Objects\u201d (CBO) measure [43]. For each candidate solution path, the CBO is calculated as the proportion of all \u201cuses\u201d of attributes by methods that occur across class boundaries. Thus, conveniently, a completely de-coupled design (all uses occur inside classes) scores a CBO of 1.0 while a completely coupled design scores a CBO of zero.\nThe second and third fitness measures provide an assessment of the\nelegance of the software design. We have previously proposed and investigated four novel quantitative elegance metrics relating to the evenness of distribution of attributes and methods among classes within the design [3]. That analysis revealed\nthat two are particularly useful and effective, and it is these that we use as surrogates for human qualitative elegance evaluation. They are:\n Numbers Among Classes (NAC) is the arithmetic mean of the standard\ndeviations of the numbers of attributes, and of methods among the classes of a design. The notion here is that the lower the value for NAC elegance, the more symmetrical the appearance of attributes and methods among the classes in the design as a whole.\n Attribute to Method Ratio (ATMR) is the standard deviation of the ratio of\nattributes to methods among the classes in a design. The notion here is that the lower the value of ATMR elegance, the more symmetrical the appearance of attributes and methods in individual classes of the design.\nGood solutions are obtained through the minimization of CBO, NAC and ATMR."}, {"heading": "3.3 iACO Search Engine", "text": "The design of the proposed iACO search engine has been influenced by the results of previous recent studies [44], [45], [46] and also draws inspiration from the MAX-MIN Ant System (MMAS) [47]. Indeed, three aspects of the elitist MMAS have been incorporated into the proposed iACO search engine. Firstly, only the iteration-best ant, i.e. the ant that produced the best candidate solution path in the current iteration, deposits pheromone. Secondly, the possible range of pheromone trail values are limited to an interval [tmin, tmax], and thirdly, pheromone trails are initialized to the upper trail limit i.e. tmax. However, the variant of MMAS used in this study does differ from the original MMAS in two respects to meet the needs of the software design domain. Firstly, local search is not conducted at each iteration and secondly, the influence of pheromone update is controlled by an additional parameter, \u00b5."}, {"heading": "3.4 Software Designer Interaction", "text": "Providing effective interactive search for the software designer requires that we address the following questions:\n3.4.1 What implicit factors underlie the user\u2019s value judgments?\nThe underlying value judgment made by the software designer relates to\nthe trade-off between structural integrity in terms of class cohesion and design\ncoupling, and design elegance. Having been presented with a visualization of a candidate software design solution, the software designer is invited to provide an overall evaluation on a scale of 1 to 100 where 1 is poor and 100 is good. With the twin aims of (i) reducing the number of interactions, and (ii) increasing our understanding of this value judgment process, the iACO uses a surrogate fitness model whose parameters are adapted in response to the periodic user evaluations. Historically interactive EAs have ranged between presenting a single individual for evaluation, to presenting the entire population for ranking [19], [23]. This continuum, especially ranking, clearly makes increasing cognitive demands of the user. Moreover, a single software design solution will typically be semantically rich in terms of design information, therefore since the iACO primarily uses the surrogate model for fitness, we present a single solution for evaluation selected at random from the set of non-dominated solutions within the population. The specific method adopted for the surrogate model is multiple linear regression:\nPredicted_User_Evaluation = a0 + a1*CBO + a2*NAC + a3*ATMR (1)\nwhere a0, a1, a2 and a3 are constants, initialized to 0, 0.34, 0.33,0.33 respectively and thereafter updated whenever new observations become available. The new weights for each fitness function are then calculated in proportion to their coefficient i.e. a weighted sum approach."}, {"heading": "3.4.2 How are candidate solutions presented to the designer?", "text": "Candidate solutions are presented in the form of UML class diagrams. Since color has been found to play an important role in design visualization [2], [3] it is used to reflect one aspect of the relative fitness of classes presented. It is proposed to trial the use of two color metaphors in this study: \u2018traffic lights\u2019 and \u2018water tap\u2019. Classes with high, intermediate or low cohesion are coloured respectively in green/amber/red (traffic light) or red/amber/blue (water taps). Couples between classes are shown graphically as an unbroken line, with an arrowhead showing the direction of the couple. The stronger the coupling between classes, the thicker the line used. Examples of software design solution visualizations are available at [48]."}, {"heading": "3.4.3 When does the designer interact with search?", "text": "The crucial issue here is that user fatigue and loss of consistency places a limited \u201cbudget\u201d on the number of interactions, which must be spent wisely. The starting\npoint of the overall search process is the first iteration of MMAS wherein the generation of design solution paths is at random. However, previous work has shown that the multi-objective ACO search engine requires possibly 50 iterations to achieve reasonable fitness with respect to the three measures [5]. Moreover, using surrogate models makes it unnecessary for the designer to interact at each ACO iteration. Hence a better approach is to encourage a sense of positive progress in ACO search and enable designer interaction after an interval of several ACO iterations. Building on promising previous work [3], we employ an adaptive, fitness proportionate iteration interval. When poor values are observed for fitness measures, the scheme produces a high iteration interval (corresponding to 10 to 15 ACO iterations), as fitness measures improve, the iteration interval decreases. This allows the ACO search engine to speedily explore the search space, but also allows the designer evaluation to increasingly influence the direction of search as the interactive episode progresses.\nMiettinen ([23] p. 134) provides three stopping criteria: \u201cEither the\ndecision maker gets tired of the solution process, some algorithmic stopping (convergence) rule is fulfilled, or the decision maker finds a desirable solution and wants to stop. It is difficult to define precisely when a solution is desirable enough to become a final solution\u201d. In this work, stopping is entirely at the discretion of the software designer."}, {"heading": "3.4.4 What means are provided to promote designer learning?", "text": "Several mechanisms are provided to promote designer learning, and are centered on the notion of the designer having the opportunity to provide \u2018hints\u2019 to the iACO search engine. For example, it is possible for the designer to focus on individual classes of the design solution considered interesting and useful, and \u2018freeze\u2019 the classes with respect to on-going search. In terms of the evolving search, the designer is mentally \u201canchoring\u201d i.e. fixing their thinking on some bias or partial \u2018chunk\u2019 of the solution [49]. It is also possible for the designer to \u2018unfreeze\u2019 class(es) at any interaction. This \u2018freezing\u2019 mechanism also provides an effective mechanism for the designer to address larger scale designs \u2013 smaller \u2018chunks\u2019 of the solution can be controlled before moving onto further design chunks. An additional designer learning mechanism is the ability to place interesting and useful software design solutions into an archive as iACO search progresses. This archive recall and comparison of interesting design solutions\ndiminishes cognitive burden and promotes learning. A flow chart of the iACO algorithm is shown in Figure 1.\nWith respect to multi-objective ACO, a number of possibilities have been considered and evaluated for pheromone update, including weighted sum, weighted product pheromone update, multiple ant colonies and/or multiple pheromone matrices [44], [46]. However, given the requirement that the proposed\niACO search engine be capable of dynamically adapting to the value judgments (evaluation) of the software designer during search while providing speedy search, computational straightforwardness and speed of execution is the priority and so the design choice of multiple ant colonies and multiple matrices has been rejected at this stage. In addition, empirical investigations to compare the performance of weighted sum versus weighted product pheromone update have been conducted for the three case studies used in the paper (see next section). For the sake of brevity, we can report that empirical results show that weighted sum update performance is marginally superior to weighted product update for the software design problem. (This finding is interesting insofar as it differs from the findings of Lopez-Ibanez and Stutzle on bi-objective TSP problem [46] with respect to approximation of the center of the Pareto front.)"}, {"heading": "4 EXPERIMENTAL METHODOLOGY", "text": "In this section, we first describe our choice of software design problem domains for use in our experiments. Then, secondly, we state algorithm parameters used. Lastly, we describe our methodology for an empirical investigation to assess the performance of iACO when used by software designers from a variety of backgrounds and experience."}, {"heading": "4.1 Software Design Problems", "text": "A useful discussion on the choice of test problems for experimental comparison in meta-heuristic search is provided by Eiben and Smith ([50], pp.252-258), who compare and contrast the use of predefined problem instances (e.g. benchmark problems), problem instance generators, and \u2018real world\u2019 problems. Clearly, the use of predefined benchmark problems is preferable. Unfortunately, we are not aware of the existence of any recognized benchmark software design problems, either in the research literature or from industrial practice. It would be possible to generate instances of design problems, for example, with randomly defined attributes and methods. However, this presents the problem of semantics and understanding for the designer \u2013 it is likely that the generated design problem would be meaningless. Therefore, we have selected three real world software design problems from a variety of domains, with a range of scale.\nThe first problem is a generalized abstraction of a Cinema Booking\nSystem (CBS), which addresses, for example, making an advance booking for a showing of a film at a cinema, and payment for tickets on attending the cinema auditorium. A specification of the use cases of is available at [51]. The second problem is an extension to a student administration system performed by the inhouse information systems department at the authors\u2019 university. The University sought to record outcomes relating to its Graduate Development Program (GDP). The extension was implemented and deployed in 2008. A specification of the use cases used in the development is available from [52]. The third problem is based on an industrial case study \u2013 Select Cruises (SC) - relating to a company selling nautical adventure holidays on tall-masted ships. The automated system handles quotation requests, cruise reservations, payment and confirmation via paper letter mailing. A specification of the use cases is available at [53]. Manual software designs have been performed by appropriate experienced software designers from the three industrial problem domains and are available from [54]. The manually performed designs for CBS and GDP show 5 classes while the manually performed design for SC shows 15 classes, and so the numbers of classes in the design solutions presented in the iACO environment is the same. Table 1 shows the number of attributes, methods and uses for each design problem and the values for different fitness metrics for the manual design."}, {"heading": "4.2 Algorithm Parameters", "text": "Values in Table 2 for the parameters N, \u03b1, \u00b5, \u03c3, are derived from the promising performances reported in [5], while those for MMAS-specific tmin and tmax are based on [47] and empirical evaluation with respect to the chosen representation."}, {"heading": "4.3 Empirical Methodology", "text": "Eleven software development professionals with experience of early lifecycle software design were invited to participate in trials using the proposed iACO approach. Relevant information concerning their background is given in Appendix 1. The total experience of software development of the participants amounts to 228 years in both academia and industrial practice. Participants 4 and 9 are authors of this paper. Details of the Research Ethics process can be found at [55]. In brief, the iACO approach is explained to participants and use of the iACO environment is presented using a dummy design problem. Each of the three software design problems is then described. Once underway, each interactive design episode is allowed to proceed until the participant decides to halt. However, to prevent user fatigue, each participant session is curtailed after one hour whether or not the planned schedule of five episodes had been completed.\nIn order to test the effect of design problem (CBS, GDP and SC), the\n\u2018freeze\u2019 and \u2018archive\u2019 capability, as well as the effect of the color scheme, an experimental schedule of five episodes was devised and is shown in Appendix 2. At each ACO iteration, a record is stored containing enough details to fully identify the specific run, along with the best values for CBO, NAC and ATMR achieved by the colony in that iteration. In addition, at each ACO iteration where designer interaction occurs, all details of the user\u2019s interaction (value of evaluation, classes frozen/unfrozen, archive) along with the updated values for the weights of CBO, NAC and ATMR are also recorded. Lastly, at the end of the iACO design session, each participant is invited to provide any comments on their overall human experience of the trial. Such comments might include any\nsatisfying aspects, any aspects that generated user fatigue, and any suggestions for enhancement of the overall human experience."}, {"heading": "5 RESULTS", "text": "All experimental data are available at [56]; we next report key findings."}, {"heading": "5.1 Number of Interactions", "text": "Table 3 shows the number of interactions during design episodes for each participant and each design problem. Where a participant did not conduct a design episode due to time constraints, this is shown as \u201c-\u201d. Participants evaluated candidate software designs on a total of 962 interactions. Immediately apparent is the great variation in the number of interactions among the participants, reflecting a variety of individual approaches. Numbers for CBS and GDP are higher than SC as the experimental design meant that most participants undertook two design episodes for these design problems. Thus to analyze these figures, the numbers of interactions for each design problem have been examined further, and the results are summarized in Table 4 where standard deviations are shown in parentheses. The highlights of Table 4 are twofold: firstly, there is a high variation in number of interactions for the CBS and GDP design problems when compared to SC, and secondly, the mean number of interactions for CBS and GDP are similar and much higher than that for SC. Wilcoxon Signed Ranks Test confirms that while the differences between CBS and SC, and GDP and SC are significant (p = .027 and p = .028 respectively), the differences between CBS and GDP are not. To explain these outcomes, if we look to the numbers of classes in each of the design problems, we find that the number of classes in candidate design solutions for CBS and GDP is 5, whereas for SC the number is 15. Therefore, it seems likely that the cognitive load on the software design is higher for the SC design problem, accounting for the significant differences in the number of interactions."}, {"heading": "5.2 Example Fitness Values", "text": "A typical example of the fitness values curves achieved in an interactive iACO design episode is shown in Figure 2. A mid-scale design problem i.e. GDP has been chosen for illustration from a design episode for Participant 2. Figure 2 shows that the iACO search engine appears highly effective in achieving superior\nfitness values for all three design measures, performing well within 35 iterations. Thereafter, at the end of the design episode, all three fitness measures are superior to values for the corresponding manual design. However, while this is a typical example, a degree on variation in the design episodes has also been observed, not least in the number of iterations reached before halting.\niACOdesign episode for a mid-scale design problem (GDP)."}, {"heading": "5.3 Variation in Fitness Values at End of Episodes", "text": "Table 5 shows the best values obtained for the three fitness metrics at the last interaction of each participant episode. In table 5, \u2018N\u2019 indicates the number of participant episodes at the end of which fitness values have been recorded. The \u2018Best\u2019 row shows the single best value achieved in all episodes for each design problem, while the \u2018Mean\u2019 row shows the mean of all best values at the end of episodes for each design problem, with the standard deviation shown in parentheses. Fitness values for the manually produced software designs are shown in italic font for comparison. Bold font is used to indicate that fitness values achieved (either single best or mean best) using iACO are superior to those of the manually produced design. To establish if the differences between mean values are statistically significant, the single sample t-test has been used to compare the sample means (i.e. of the manual designs) against the means for the target designs.\nFor the sake of brevity, p values are only shown where differences are significant at the alpha = 0.05 level. Analyzing each fitness measure in turn, we firstly see that for CBO, mean values for CBS and SC are a little inferior to values for the manually produced design, and this difference is statistically significant. However, the mean CBO value for the GDP problem is very similar to that produced for the manual design, and the best CBO value is superior. Secondly, for NAC, it is evident that the best value achieved is superior to the manual design value for all design problems, and the mean values are also superior for GDP and SC, the difference being statistically significant for the SC problem. Thirdly, for the ATMR metric, all best values and the mean values are superior for all design problems, and the differences for the mean values are statistically significant.\nOverall, the results appear to indicate that candidate design solutions\nproduced by participants using the iACO environment can be superior to the manually produced design with respect to NAC and ATMR values, although a little inferior for CBO. With regard to design problem, results obtained for GDP are excellent, but although still good, perhaps less so for CBS and SC. The character of the results may be to some extent explained by the multi-objective nature of the design evaluation, and the increased scale of the SC problem (15\nclasses to the 5 for CBS and GDP). Overall, these results are interesting, and appear to suggest not only that iACO is effective overall in searching for software design solutions, but also that elegance does indeed play an important role in software design. Of course, the superior elegance values arrived at during participant designer episodes could be caused by a number of factors, not least the multi-objective value judgments made by the participants. However, it is also highly likely that these results are influenced by the iACO learning mechanisms during interactive search, and this is discussed in section 5.5."}, {"heading": "5.4 Effect of Designer Hints", "text": "To examine the effect of freezing and color scheme, we conducted a 2 x 2 mixed analysis of variance with freezing (on, off) as a 2 level between subjects variable and color scheme (traffic lights, water tap) as a 2 level repeated measures factor with outcomes CBO and NAC at the last designer interaction. However, there are two important considerations in our analysis. Firstly, because the sample size is restricted, the largest design problem CBS (N=22) has been chosen as for analysis. GDP and SC, with sample sizes of 17 and 6 respectively, have therefore not been analyzed. (Of course, if significant results are not obtained for CBS, there seems little point in proceeding to analyze GDP and SC.) Secondly, we find that the ATMR data presents a curious distribution. Of the 22 data values for ATMR at the end of iACO design episodes for the CBS, further inspection reveals that the value 0.036 presents 20 times. Indeed, there are only 2 discrepant values, i.e. 0.224 and 0.044 (which explains the low standard deviation obtained for ATMR in table 6). This suggests that ATMR is less sensitive as a measure in the multi-objective evaluation performed by participants in this investigation, and possible causes and consequences of this are discussed in the following sections.\nFor both CBO and NAC, the analysis reveals no statistically significant\ndifferences between results obtained with freezing on and freezing off, or for the color scheme used. Nevertheless, it does appear that when freezing is on, better results are obtained with the water tap color scheme. On the other hand, when freezing is off, it appears that better results are obtained with the traffic light color scheme. However, mixed analysis of variance indicates that this potential statistical interaction effect is not statistically significant. Thus while this appearance is indicative of the effect of freezing and color scheme, it is not\nconclusive. In an attempt to explain these findings, we suggest that the variability in participant interaction with the iACO environment for the given sample size is a factor. It was also observed that while some participants made heavy use of the freeze capability, others did not despite being aware of its presence. With regard to color scheme, participants seemed able to use both effectively, and results of the participant questionnaire are reported in section 5.6, \u201cHuman Experience\u201d."}, {"heading": "5.5 Learning of Fitness Weights", "text": "Mean values of the weights for CBO, NAC and ATMR (WCBO, WNAC, WATMR respectively) learned by the iACO environment at the final interaction at the end of episodes are shown with standard deviation in parentheses in table 6. Table 6 reveals the overall balance obtained between the learned weights, and also the impact of scale of design problem. Firstly, it is evident that WCBO emerges as the highest learned weight for all three design problems. It is also evident that WNAC appears as the lowest learned weight overall, although not for SC. This strongly suggests that the balance between the three learned weights is problem dependent."}, {"heading": "SC (N=6) 0.817 (0.073) 0.096 (0.073) 0.086 (0.063)", "text": "Secondly, we see that WNAC is similar across all scales of design problem whereas WCBO increases and WATMR decreases with scale. We conjecture that as the cognitive load of the design problem increases, the iACO environment learns that participants are placing less emphasis on qualitative design elegance and rely more on the quantitative measure of Coupling Between Objects (CBO).\nTo further explain the above characteristics, we draw on the findings\nrelated to the ATMR measure discussed in previous sections, wherein the data suggested that ATMR is not as sensitive a measure at CBO or NAC. Interestingly, it was observed during design episodes that from time-to-time, the participants were presented with visualizations of candidate software design solution paths that show the \u201cGod Class\u201d anti-pattern [57]. This is generally regarded by\nsoftware designers as a most inelegant design solution to be avoided, wherein a single class acts as an incoherent grouping of a large number of attributes and methods, typically leaving other classes with ineffectively small numbers. An example of a \u201cGod Class\u201d solution for the GDP problem is shown in Figure 3. The values of CBO, NAC and ATMR fitness for this solution are 0.439 (0.297), 8.691 (2.592) and 0.194 (0.199) respectively, with values from the manual design in parentheses for comparison. It is evident that for this candidate software design, although CBO and ATMR are approaching or better than the manual design, the\nvalue of NAC is inferior. It is, of course, fundamental to multi-objective search that the fitness metrics used in search conflict. However, when a God Class is present, it seems likely that the CBO and ATMR metrics are not in conflict, as the God Class creates high values for both measures. To help shed further light on this behavior, Figure 4 shows the best fitness value curves obtained when a \u2018God class\u2019 comes to predominate a design solution. This shows that best fitness values for all three measures initially progress well until generation 95 when a simultaneous improvement in CBO and dramatic decrease in NAC are evident. At this point, it seems possible that the improvement in CBO comes at the expense of NAC, although ATMR appears steady. This behavior appears consistent with (i) ATMR being less sensitive and (ii) a lack of sufficient conflict between the CBO and ATMR measures.\nTogether, the results of Figures 3 and 4 suggest that the influence of NAC\non steering the search can be diminished, which accounts for the low WNAC values learned by the iACO environment. Furthermore, given the lack of sensitivity of ATMR as a surrogate elegance measure, we conjecture that in future work, a bi-\nobjective search using CBO and NAC measures alone can be effective to achieve elegant candidate software design solutions with interactive ACO."}, {"heading": "5.6 Human Experience", "text": "Ten of the eleven participants responded to the questionnaire [55] and the results are as follows. Asked to rate how compelling they found the interactive ACO design experience on a scale from 1 (\u201cNot at all compelling\u201d) to 5 (\u201cVery Compelling\u201d), five participants rated the interactive design experience at 5, while the other five participants rated the experience at 4. We applied 95% confidence levels for proportion (using the Pearson Clopper intervals) and found this to be a statistically significant positive rating (p = .002). Participants were also asked to rate how effective they found the iACO design experience at achieving useful and relevant software design solution paths, (scale as before with \u201ceffective\u201d replacing \u201ccompelling\u201d) Three participants rated the effectiveness at 5, four participants rated the effectiveness at 4, and a further three participants rated the effectiveness at 3. Although 7 ratings are positive and three ratings are neutral, 95% confidence levels for proportions does not show statistical significance. We conjecture that this is consistent with, and reflects the participants\u2019 perception of the findings in the previous section. It seems possible that although the iACO environment achieves design solutions of superior fitness, the lack of sensitivity of the ATMR metrics might be implicitly perceived as constraining the effectiveness of interactive search.\nWhen asked to comment on their preferred color scheme, 7 out of 10\nparticipants stated a preference for \u2018traffic lights\u2019, whereas the remaining 3 participants expressed a preference for the \u2018water tap\u2019 scheme. Although this indicates a greater preference for the \u2018traffic lights\u2019 scheme, the results of the previous section seem to indicate that the color scheme does not have a statistically significant effect on the participant performance using iACO environment. We also found no statistically significant difference between the mean values for CBO, NAC and ATMR between the preferred and the least preferred color scheme. This suggests that participants perform well with either color scheme and that the iACO search is robust with respect to the implementation of color scheme visualization.\nMany of the \u201cfree text\u201d participant comments about the iACO experience\nwere positive e.g. \u201cthe tool looks good and works well\u201d, and \u201cthe tool did seem to help quickly arrive at an optimal class design\u201d. Other participants commented on the effectiveness of the design visualization e.g. \u201cthe visibility of the cohesion and coupling\u201d and the use of a color scheme that \u201cspeeded up the decision process\u201d. When asked for suggestions for improving the iACO experience, participants suggested even more interactivity, such as a visual indication of a frozen class (perhaps an ice cube icon on top of the class), the ability to backtrack along the history of the episode and restarting search from a particular design variant, and the capability to hint to the iACO environment by \u2018drag and drop\u2019 of attributes and methods from one class grouping to another."}, {"heading": "6 THREATS TO VALIDITY", "text": "With respect to the interval validity of results, the iACO design experience is highly dependent on the design context, and so every attempt has been made to make a consistent design context for all participants. The same briefing has been received by all participants and all trials have been conducted in the same iACO environment. An additional threat to internal validity is the Hawthorn affect, in which participant behavior may be changed by the special situation and social treatment they received during the experiment. To counter this, participation was conducted as consistently as possible; furthermore it was explained to participants that the halting of interactive design episodes was entirely at their discretion and that there was no expectation in relation to the particular designs arrived at.\nTwo other threats to internal validity include the learning affect and the\nfatigue affect. The learning effect threatens validity in the sense that participant capability improves during the episodes through learning by repetition. To counter this, the experimental setup includes a period of familiarization with a dummy design problem first, so that knowledge of how to use the iACO environment is instilled prior to proceeding with the three design problems. The fatigue effect is mitigated by ensuring that design episodes are halted after one hour\u2019s duration.\nWith respect to external validity of results, the outcomes of the\ninvestigations depend on the number and experience of the participants being representative of some segment of the software design community. The 228 years\u2019 experience of professional software development among the 11 participants\nincludes 149 years of academic experience. It also includes 79 years of industrial software design and development experience for participants 1, 7 and 10 who have architected and developed software across a wide variety of software design domains, within object-oriented and service-based technical architectures worldwide. While a greater number of participants would have lent greater robustness to the statistical analysis of the study, the years of experience of the trial participants suggests a level of credibility for their evaluations of the candidate software designs presented by the interactive ACO environment."}, {"heading": "7 CONCLUSIONS", "text": "As judged from the quantitative results and participant feedback, we conclude that ACO is highly effective as a search engine for interactive, dynamic multiobjective interactive search in early lifecycle software design. Indeed, with speedy discovery of useful candidate software design solution paths, study participants rate the interactive ACO search experience as compelling. While the results into the influence of color scheme and designer \u2018hints\u2019 such a freezing have proved statistically inconclusive, the sample size is relatively small and great variation in participant behavior during interaction is evident. Nevertheless, study participants have provided positive ratings and comments for both \u2018hint\u2019 capabilities, and we plan their incorporation in any future investigations.\nResults of machine learning of fitness measure weightings are interesting\nand indicate that software design elegance does indeed play a significant role in designer evaluation of candidate software design. Furthermore, we conclude that the surrogate elegance measure of the ratio of attributes to methods (ATMR) is less effective in multi-objective search, as it fails to steer the search away from the \u201cGod class\u201d anti-pattern. This is significant as it seems likely that the evenness of the distribution of attributes and methods among classes (NAC) is the more significant surrogate elegance measure, which in turn suggests that this evenness of distribution, when combined with structural integrity, is an implicit but crucial component of effective early lifecycle software design."}, {"heading": "In the following participant schedule, TL refers to the \u2019Traffic Lights\u2019 color", "text": "scheme, while WT refers to the \u2018Water Tap\u2019 color scheme.\nEpisode\nParticipant 1 2 3 4 5\nProblem CBS CBS GDP GDP SC\n1 Freeze off off off on on\nColor TL WT any any TL\n2 Freeze off off on off off\nColor WT TL any any TL\n3 Freeze off off off on On\nColor TL WT any any WT\n4 Freeze off off on off off\nColor WT TL any any WT\n5 Freeze off off off on on\nColor TL WT any any TL\n6 Freeze on on off on On\nColor TL WT any any WT\n7 Freeze on on on off off\nColor WT TL any any WT\n8 Freeze on on off on on\nColor TL WT any any TL\n9 Freeze on on on off off\nColor TL WT any any TL\n10 Freeze on on off on on\nColor TK WT any any WT\n11 Freeze on on on off off\nColor WT TL any any WT"}], "references": [{"title": "An Empirical Investigation of Search-based Computational Support for Conceptual Software Engineering Design", "author": ["C.L. Simons", "I.C. Parmee"], "venue": "Proceedings of the 2009 IEEE International Conference on Systems, Man, and Cybernetics,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2009}, {"title": "Interactive, Evolutionary Search in Upstream Object-oriented Software Design", "author": ["C.L. Simons", "I.C. Parmee", "R. Gwynllyw"], "venue": "IEEE Transactions on Software Engineering,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Elegant, Object-Oriented Software Design via Interactive Evolutionary Computation", "author": ["C.L. Simons", "I.C. Parmee"], "venue": "IEEE Trans. Systems, Man, and Cybernetics: Part C \u2013 Applications and Reviews", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "A Comparison of Evolutionary Algorithms and Ant Colony Optimisation for Interactive Software Design", "author": ["C.L. Simons", "J.E. Smith"], "venue": "Fast Abstract Collection of the 4th Symposium of Search-Based Software Engineering,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "A Comparison of Meta-heuristic Search for Interactive Software Design", "author": ["C.L. Simons", "J.E. Smith"], "venue": "Soft Computing", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Application of Genetic Algorithms to Software Testing", "author": ["S Xanthakis"], "venue": "Proceedings of the 5  th International Conference on Software Engineering,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1992}, {"title": "Evolving Software Test Data - GAs Learn Self-expression", "author": ["J.E. Smith", "T.C. Fogarty"], "venue": "Evolutionary Computing,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1996}, {"title": "Search-Based Software Engineering", "author": ["M. Harman", "B.J. Jones"], "venue": "Information and Software Technology, vol. 43,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2001}, {"title": "Cooperative Co-evolutionary Optimisation of Software Project Assignments and Job Scheduling", "author": ["J. Ren", "M. Harman", "M. Di Penta"], "venue": "Proceedings of the 3  rd International Symposium of Search Based Software Engineering (SSBSE", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2011}, {"title": "Solving the Class Responsibility Assignment Problem in Object-Oriented Analysis with Multi-objective Genetic Algorithms", "author": ["M. Bowman", "L.C. Briand", "Y. Labiche"], "venue": "IEEE Transactions in Software Engineering,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2010}, {"title": "Search-Based Software Test Data Generation: a Survey", "author": ["P. McMinn"], "venue": "Software Testing, Verification and Reliability,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2004}, {"title": "Automatic Program Repair with Evolutionary Computing", "author": ["W. Weimer", "S. Forrest", "C. Le Goues", "T. Nguyen"], "venue": "Communications of the ACM,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2010}, {"title": "Search-Based Refactoring for Software Maintenance", "author": ["M. O\u2019Keeffe", "M.O. Cinneide"], "venue": "Journal of Systems and Software,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2008}, {"title": "Repository of Publications on Search-based Software Engineering", "author": ["Y. Zhang"], "venue": "http://crestweb.cs.ucl.ac.uk/resources/sbse_repository/ Accessed", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "Agile Software Development: Principles, Patterns and Practices", "author": ["R.C. Martin"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2003}, {"title": "Requirements and Aesthetics", "author": ["N. Maiden"], "venue": "IEEE Software,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2011}, {"title": "Interactive Evolutionary Computation: Fusion of the Capabilities of EC Optimization and Human Evaluation", "author": ["H. Takagi"], "venue": "Proceedings of the IEEE,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2001}, {"title": "Tracking a Criminal Suspect through \"Face-Space\" with a Genetic Algorithm", "author": ["C. Caldwell", "V.S. Johnston"], "venue": "Proceedings of the 4th International Conference on Genetic Algorithms,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1991}, {"title": "Artificial Evolution for Computer Graphics", "author": ["K. Sims"], "venue": "Computer Graphics,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 1991}, {"title": "Interactive Evolution for Cochlear Implants Fitting", "author": ["P. Legrand", "C. Bourgeois-Republique", "V. Pean", "E. Harboun-Cohen", "J. Levy-Vehel", "B. Frachet", "E. Lutton", "P. Collet"], "venue": "Genetic Programming and Evolvable Machines,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2007}, {"title": "Nonlinear Multiobjective Optimization", "author": ["K.M. Miettinen"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1998}, {"title": "Interactive Multiobjective Optimization from a Learning Perspective", "author": ["V. Belton", "J. Branke", "P. Eskelinen", "S. Greco", "J. Molina", "F. Ruiz", "R. Slowinski"], "venue": "Multiobjective Optimization: Interactive and Evolutionary Approaches,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2008}, {"title": "Advances in Evolutionary Multi-Objective Optimization", "author": ["K. Deb"], "venue": "Proceedings of the 4  th International Symposium on Search-Based Software Engineering (SSBSE),", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2012}, {"title": "Adaptive Surface Inspection via Interactive Evolution", "author": ["P. Caleb-Solly", "J.E. Smith"], "venue": "Image and Vision Computing,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2007}, {"title": "An Input Method using Discrete Fitness Values for Interactive Genetic Algorithms", "author": ["M. Ohsaki", "H. Takagi", "K. Ohya"], "venue": "Journal of Intelligent and Fuzzy Systems,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 1998}, {"title": "The Magical Number Seven, Plus or Minus Two: Some Limits on our Capacity for Processing Information", "author": ["G. Miller"], "venue": "Psychology Review, vol. 63,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 1956}, {"title": "Interactive Genetic Algorithm with Wavelet Coefficients for Emotional Image Retrieval", "author": ["Lee", "J.-Y", "Cho", "S.-B"], "venue": "Proceedings of the 5th International Conference on Soft Computing and Information /Intelligent Systems,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1999}, {"title": "Visual Interactive Evolutionary Algorithm for High Dimensional Data Clustering and Outlier Detection", "author": ["L. Boudjeloud", "F. Poulet"], "venue": "Proceedings of the 9  th Pacific-Asia Conference on Advances in Knowledge Discovery and Design,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2005}, {"title": "Multiple Fuzzy State-value Functions for Human Evaluation through Interactive Trajectory Planning of a Partner Robot", "author": ["N. Kubota", "Y. Nojima", "F. Kojima", "T. Fukuda"], "venue": "Soft Computing,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2006}, {"title": "Interactive Concept-based Search using MOEA: the Hierarchical Preference Case", "author": ["G. Avigad", "A. Moshaiov", "N. Brauner"], "venue": "International Journal of Computational Intelligence,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2005}, {"title": "Ergonomic Chair Design by Fusing Qualitative and Quantitative Criteria using Interactive Genetic Algorithms", "author": ["A. Brintrup", "J. Ramsden", "H. Takagi", "A. Tiwari"], "venue": "IEEE Transactions on Evolutionary Computation,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2008}, {"title": "Introduction to Evolutionary Computing, Springer", "author": ["A.E. Eiben", "J.E. Smith"], "venue": null, "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2003}, {"title": "Ant Algorithms for Discrete Optimization", "author": ["M. Dorigo", "G. Di Caro"], "venue": "Artificial Life,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 1999}, {"title": "Ant Colony Optimization", "author": ["M. Dorigo", "T. Stutzle"], "venue": null, "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2004}, {"title": "The Ant Colony Metaphor for Search Continuous Design Spaces", "author": ["G. Bilchev", "I.C. Parmee"], "venue": "Evolutionary Computing: Lecture Notes in Computer Science", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 1995}, {"title": "Interactive Particle Swarm Optimisation", "author": ["J. Madar", "J. Abonyi", "F. Szeifert"], "venue": "Proceedings of the 5  th International Conference on Intelligent Systems Design and Applications (ISDA", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2005}, {"title": "Interactive Fuzzy Multi-Objective Ant Colony Optimisation with Linguistically Quantified Decision Functions for Flexible Job Shop Scheduling Problems", "author": ["Xing", "L.-N", "Chen", "Y.-W", "Yang", "K.-W"], "venue": "Proceedings of Frontiers in the Convergence of Bioscience and Information (FBIT", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2007}, {"title": "An Interactive Simulation and Analysis Software for Solving TSP using Ant Colony Optimization Algorithms", "author": ["A. U\u011fur", "D. Aydin"], "venue": "Advances in Engineering Software,", "citeRegEx": "40", "shortCiteRegEx": "40", "year": 2009}, {"title": "Exploring Ant Colony Optimisation for Adaptive Interactive Search", "author": ["Albakour", "M.-D", "U. Kruschwitz", "N. Nanas", "D. Song", "M. Fasli", "A. De Roeck"], "venue": "Proceedings of Advances in Information Retrieval Theory,", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2011}, {"title": "The Vehicle Routing Problem", "author": ["P. Toth", "D. Vigo"], "venue": null, "citeRegEx": "42", "shortCiteRegEx": "42", "year": 2001}, {"title": "An Investigation into the Applicability and Validity of Object-oriented Design Metrics", "author": ["R. Harrison", "S. Councell", "R. Nithi"], "venue": "Empirical Software Engineering,", "citeRegEx": "43", "shortCiteRegEx": "43", "year": 1998}, {"title": "Ant Colony for Multi-Objective Optimisation Problems", "author": ["I. Alaya", "Solnon", "K.C. Ghedira"], "venue": "Proceedings of the 19  th IEEE International Conference on Tools with Artificial Intelligence,", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 2007}, {"title": "Ant Colony Optimisation: Overview and Recent Advances", "author": ["M. Dorigo", "T. Stutzle"], "venue": "Handbook of Metaheuristics: International Series in Operations Research and Management Science,", "citeRegEx": "45", "shortCiteRegEx": "45", "year": 2010}, {"title": "An Experimental Analysis of Design Choices for Multi- Objectives Ant Colony Optimisation Algorithms", "author": ["M. Lopez-Ibanez", "T. Stutzle"], "venue": "Swarm Intelligence,", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 2012}, {"title": "MAX-MIN Ant System", "author": ["T. Stutzle", "H. Hoos"], "venue": "Future Generation Computer Systems,", "citeRegEx": "47", "shortCiteRegEx": "47", "year": 2000}, {"title": "The Effects of Anchoring in Interactive MCDM Solution Methods", "author": ["J.T. Buchanan", "H.G. Daellenbach"], "venue": "Computers and Operations Research,", "citeRegEx": "49", "shortCiteRegEx": "49", "year": 1997}, {"title": "An Introduction to Evolutionary Computing, Springer", "author": ["A.E. Eiben", "J.E. Smith"], "venue": null, "citeRegEx": "50", "shortCiteRegEx": "50", "year": 2003}, {"title": "Use Case Specifications for Cinema Booking System", "author": ["C.L. Simons"], "venue": "http://www.cems.uwe.ac.uk/~clsimons/CaseStudies/CinemaBookingSystem.htm Accessed", "citeRegEx": "51", "shortCiteRegEx": "51", "year": 2012}, {"title": "Use Case Specifications for Graduate Development Program", "author": ["C.L. Simons"], "venue": "http://www.cems.uwe.ac.uk/~clsimons/CaseStudies/GraduateDevelopmentProgram.htm Accessed", "citeRegEx": "52", "shortCiteRegEx": "52", "year": 2012}, {"title": "Use Case Specifications for Select Cruises", "author": ["C.L. Simons"], "venue": "http://www.cems.uwe.ac.uk/~clsimons/CaseStudies/SelectCruises.htm Accessed", "citeRegEx": "53", "shortCiteRegEx": "53", "year": 2012}, {"title": "Manual Software Designs for Problem Domains", "author": ["C.L. Simons"], "venue": "http://www.cems.uwe.ac.uk/~clsimons/CaseStudies/ManualDesigns.pdf Accessed", "citeRegEx": "54", "shortCiteRegEx": "54", "year": 2012}, {"title": "Ethical Approval Documents", "author": ["C.L. Simons"], "venue": "http://www.cems.uwe.ac.uk/~clsimons/Ethics/ Acessed", "citeRegEx": "55", "shortCiteRegEx": "55", "year": 2012}, {"title": "Anti-Patterns: Refactoring Software, Architectures, and Projects in Crisis, Wiley", "author": ["W.J. Brown", "R.C. Malveau", "H.W. McCormick III", "T.J. Mowbray"], "venue": "Freeze on on off on On Color TL WT any any WT 7 Freeze on on on off off Color WT TL any any WT 8 Freeze on on off on on Color TL WT any any TL 9 Freeze on on on off off Color TL WT any any TL 10 Freeze on on off on on Color TK WT any any WT 11 Freeze on on on off off Color WT TL any any WT", "citeRegEx": "57", "shortCiteRegEx": "57", "year": 1998}], "referenceMentions": [{"referenceID": 0, "context": "After early empirical investigations incorporating designer preferences in search [1], [2], subsequent studies have combined quantitative machine-calculated fitness functions with qualitative designer evaluation of design elegance in a dynamic, multi-objective, interactive search [3].", "startOffset": 82, "endOffset": 85}, {"referenceID": 1, "context": "After early empirical investigations incorporating designer preferences in search [1], [2], subsequent studies have combined quantitative machine-calculated fitness functions with qualitative designer evaluation of design elegance in a dynamic, multi-objective, interactive search [3].", "startOffset": 87, "endOffset": 90}, {"referenceID": 2, "context": "After early empirical investigations incorporating designer preferences in search [1], [2], subsequent studies have combined quantitative machine-calculated fitness functions with qualitative designer evaluation of design elegance in a dynamic, multi-objective, interactive search [3].", "startOffset": 281, "endOffset": 284}, {"referenceID": 3, "context": "Interestingly, however, recent investigations comparing different metaheuristic search approaches have shown that ant colony optimization (ACO) can outperform evolutionary computation in quantitative search with respect to arriving at design solution candidates of superior fitness at earlier iterations / generations [4], [5].", "startOffset": 318, "endOffset": 321}, {"referenceID": 4, "context": "Interestingly, however, recent investigations comparing different metaheuristic search approaches have shown that ant colony optimization (ACO) can outperform evolutionary computation in quantitative search with respect to arriving at design solution candidates of superior fitness at earlier iterations / generations [4], [5].", "startOffset": 323, "endOffset": 326}, {"referenceID": 5, "context": "From its early roots using genetic algorithms to evolve software test sequences [6], [7], the idea that many aspects of software development are essentially optimization problems, and as such are amenable to automated search, has rapidly gained currency.", "startOffset": 80, "endOffset": 83}, {"referenceID": 6, "context": "From its early roots using genetic algorithms to evolve software test sequences [6], [7], the idea that many aspects of software development are essentially optimization problems, and as such are amenable to automated search, has rapidly gained currency.", "startOffset": 85, "endOffset": 88}, {"referenceID": 7, "context": "3 millennium by Harman and Jones [8].", "startOffset": 33, "endOffset": 36}, {"referenceID": 8, "context": "In the last decade applications of SBSE can be found across the spectrum of the software development lifecycle, including requirements analysis and scheduling [9], design tools and techniques [2], [10], software testing [11], automated bug fixing [12], and software maintenance [13].", "startOffset": 159, "endOffset": 162}, {"referenceID": 1, "context": "In the last decade applications of SBSE can be found across the spectrum of the software development lifecycle, including requirements analysis and scheduling [9], design tools and techniques [2], [10], software testing [11], automated bug fixing [12], and software maintenance [13].", "startOffset": 192, "endOffset": 195}, {"referenceID": 9, "context": "In the last decade applications of SBSE can be found across the spectrum of the software development lifecycle, including requirements analysis and scheduling [9], design tools and techniques [2], [10], software testing [11], automated bug fixing [12], and software maintenance [13].", "startOffset": 197, "endOffset": 201}, {"referenceID": 10, "context": "In the last decade applications of SBSE can be found across the spectrum of the software development lifecycle, including requirements analysis and scheduling [9], design tools and techniques [2], [10], software testing [11], automated bug fixing [12], and software maintenance [13].", "startOffset": 220, "endOffset": 224}, {"referenceID": 11, "context": "In the last decade applications of SBSE can be found across the spectrum of the software development lifecycle, including requirements analysis and scheduling [9], design tools and techniques [2], [10], software testing [11], automated bug fixing [12], and software maintenance [13].", "startOffset": 247, "endOffset": 251}, {"referenceID": 12, "context": "In the last decade applications of SBSE can be found across the spectrum of the software development lifecycle, including requirements analysis and scheduling [9], design tools and techniques [2], [10], software testing [11], automated bug fixing [12], and software maintenance [13].", "startOffset": 278, "endOffset": 282}, {"referenceID": 13, "context": "A comprehensive repository of publications in SBSE is maintained by Zhang [14].", "startOffset": 74, "endOffset": 78}, {"referenceID": 14, "context": "This is an intensely people-centric activity, and typically involves multi-objective trade-offs using competing criteria [15], [16], [17].", "startOffset": 127, "endOffset": 131}, {"referenceID": 15, "context": "This is an intensely people-centric activity, and typically involves multi-objective trade-offs using competing criteria [15], [16], [17].", "startOffset": 133, "endOffset": 137}, {"referenceID": 16, "context": "This process implicitly captures the user's multi-objective decision making processes without the need for time consuming explicit knowledge-acquisition process [19].", "startOffset": 161, "endOffset": 165}, {"referenceID": 17, "context": "Well known early applications include face-recognition [20], the evolution of computer graphics [21], and fitting Cochlear Implants [22].", "startOffset": 55, "endOffset": 59}, {"referenceID": 18, "context": "Well known early applications include face-recognition [20], the evolution of computer graphics [21], and fitting Cochlear Implants [22].", "startOffset": 96, "endOffset": 100}, {"referenceID": 19, "context": "Well known early applications include face-recognition [20], the evolution of computer graphics [21], and fitting Cochlear Implants [22].", "startOffset": 132, "endOffset": 136}, {"referenceID": 20, "context": "Miettinen [23] provides a comprehensive survey of interactive search methods and distinguishes various methods of decision-maker involvement in multi-objective search, such as a priori methods: \u201cwhere the decision maker must specify their preferences, hopes and opinions\u201d before the automated search, as opposed to a posteriori methods, which perform automated search to proceed without human guidance, then provide the decision maker with a selection of alternative solutions.", "startOffset": 10, "endOffset": 14}, {"referenceID": 21, "context": "[24] examine interactive multi-objective optimization from a learning perspective, and speculate on ways to enable mutual learning between decision makers and search processes while emphasizing the role of interactive decision making software tools and environments.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "Deb attempts to consolidate knowledge of the MCDM and SBSE communities to assess the state-of-the-art in evolutionary multi-objective optimization [25].", "startOffset": 147, "endOffset": 151}, {"referenceID": 23, "context": "On one hand, human subjective assessment tends to have a component of inconsistency and non-linearity of focus over time [26], which creates a need for rapid convergence.", "startOffset": 121, "endOffset": 125}, {"referenceID": 24, "context": "Discretizing continuous fitness values into five or seven levels was shown to facilitate decision making, without significantly compromising convergence [27].", "startOffset": 153, "endOffset": 157}, {"referenceID": 25, "context": "This limit on capacity for processing information has been comprehensively discussed in Miller [28] where", "startOffset": 95, "endOffset": 99}, {"referenceID": 26, "context": "Several methods have been proposed as \u201csurrogate models\u201d of user-provided fitness by, for example, clustering individuals [29], [30] or using multiple fuzzy state-value functions to approximate the trajectory of human scoring [31].", "startOffset": 122, "endOffset": 126}, {"referenceID": 27, "context": "Several methods have been proposed as \u201csurrogate models\u201d of user-provided fitness by, for example, clustering individuals [29], [30] or using multiple fuzzy state-value functions to approximate the trajectory of human scoring [31].", "startOffset": 128, "endOffset": 132}, {"referenceID": 28, "context": "Several methods have been proposed as \u201csurrogate models\u201d of user-provided fitness by, for example, clustering individuals [29], [30] or using multiple fuzzy state-value functions to approximate the trajectory of human scoring [31].", "startOffset": 226, "endOffset": 230}, {"referenceID": 29, "context": "[32], propose a multi-objective EA in which a model-based fitness of sub-concept solutions (using a sorting and ranking procedure) is combined with human evaluation.", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": "[33].", "startOffset": 0, "endOffset": 4}, {"referenceID": 2, "context": "Previously [3] we have used periodic qualitative (user-provided) evaluations of software designs to dynamically update a surrogate model that combined quantitative measurements of structural integrity and metrics relating to design symmetry to drive the evolution of elegant software designs with reduced need for human evaluations.", "startOffset": 11, "endOffset": 14}, {"referenceID": 16, "context": "[19], [23]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 20, "context": "[19], [23]).", "startOffset": 6, "endOffset": 10}, {"referenceID": 31, "context": "[34]) and ant colony optimization (SimpleACO or S-ACO [35], [36]) have been compared by Simons and Smith for software design, with respect to both structural integrity and surrogate elegance", "startOffset": 0, "endOffset": 4}, {"referenceID": 32, "context": "[34]) and ant colony optimization (SimpleACO or S-ACO [35], [36]) have been compared by Simons and Smith for software design, with respect to both structural integrity and surrogate elegance", "startOffset": 54, "endOffset": 58}, {"referenceID": 33, "context": "[34]) and ant colony optimization (SimpleACO or S-ACO [35], [36]) have been compared by Simons and Smith for software design, with respect to both structural integrity and surrogate elegance", "startOffset": 60, "endOffset": 64}, {"referenceID": 3, "context": "6 metrics [4], [5].", "startOffset": 10, "endOffset": 13}, {"referenceID": 4, "context": "6 metrics [4], [5].", "startOffset": 15, "endOffset": 18}, {"referenceID": 34, "context": "An early attempt to apply ACO to the design of constrained engineering design problems is reported in [37].", "startOffset": 102, "endOffset": 106}, {"referenceID": 35, "context": "Some years pass before there is a report of interactive search with Particle Swarm Optimization used to design temperature profiles for a batch beer fermenter in 2005 [38].", "startOffset": 167, "endOffset": 171}, {"referenceID": 36, "context": "[39] report the use of interactive fuzzy ACO for Job Shop Problems in 2007, while Ugur and Aydin describe an interactive simulation for solving the TSP using ACO in 2009 [40].", "startOffset": 0, "endOffset": 4}, {"referenceID": 37, "context": "[39] report the use of interactive fuzzy ACO for Job Shop Problems in 2007, while Ugur and Aydin describe an interactive simulation for solving the TSP using ACO in 2009 [40].", "startOffset": 170, "endOffset": 174}, {"referenceID": 38, "context": "report the use of ACO to simulate and interact with user query logs to learn knowledge about user behavior in a collection of documents [41].", "startOffset": 136, "endOffset": 140}, {"referenceID": 1, "context": "A full description of this software design problem specification can be found at [2].", "startOffset": 81, "endOffset": 84}, {"referenceID": 39, "context": "The software design solution representation used is inspired by models for the Travelling Salesman Problem (TSP) and Vehicle Routing Problem (VRP) [42].", "startOffset": 147, "endOffset": 151}, {"referenceID": 40, "context": "Thus, the first fitness measure is inspired by the \u201cCoupling Between Objects\u201d (CBO) measure [43].", "startOffset": 92, "endOffset": 96}, {"referenceID": 2, "context": "We have previously proposed and investigated four novel quantitative elegance metrics relating to the evenness of distribution of attributes and methods among classes within the design [3].", "startOffset": 185, "endOffset": 188}, {"referenceID": 41, "context": "The design of the proposed iACO search engine has been influenced by the results of previous recent studies [44], [45], [46] and also draws inspiration from the MAX-MIN Ant System (MMAS) [47].", "startOffset": 108, "endOffset": 112}, {"referenceID": 42, "context": "The design of the proposed iACO search engine has been influenced by the results of previous recent studies [44], [45], [46] and also draws inspiration from the MAX-MIN Ant System (MMAS) [47].", "startOffset": 114, "endOffset": 118}, {"referenceID": 43, "context": "The design of the proposed iACO search engine has been influenced by the results of previous recent studies [44], [45], [46] and also draws inspiration from the MAX-MIN Ant System (MMAS) [47].", "startOffset": 120, "endOffset": 124}, {"referenceID": 44, "context": "The design of the proposed iACO search engine has been influenced by the results of previous recent studies [44], [45], [46] and also draws inspiration from the MAX-MIN Ant System (MMAS) [47].", "startOffset": 187, "endOffset": 191}, {"referenceID": 16, "context": "Historically interactive EAs have ranged between presenting a single individual for evaluation, to presenting the entire population for ranking [19], [23].", "startOffset": 144, "endOffset": 148}, {"referenceID": 20, "context": "Historically interactive EAs have ranged between presenting a single individual for evaluation, to presenting the entire population for ranking [19], [23].", "startOffset": 150, "endOffset": 154}, {"referenceID": 1, "context": "Since color has been found to play an important role in design visualization [2], [3] it is used to reflect one aspect of the relative fitness of classes presented.", "startOffset": 77, "endOffset": 80}, {"referenceID": 2, "context": "Since color has been found to play an important role in design visualization [2], [3] it is used to reflect one aspect of the relative fitness of classes presented.", "startOffset": 82, "endOffset": 85}, {"referenceID": 4, "context": "However, previous work has shown that the multi-objective ACO search engine requires possibly 50 iterations to achieve reasonable fitness with respect to the three measures [5].", "startOffset": 173, "endOffset": 176}, {"referenceID": 2, "context": "Building on promising previous work [3], we employ an adaptive, fitness proportionate iteration interval.", "startOffset": 36, "endOffset": 39}, {"referenceID": 20, "context": "Miettinen ([23] p.", "startOffset": 11, "endOffset": 15}, {"referenceID": 45, "context": "fixing their thinking on some bias or partial \u2018chunk\u2019 of the solution [49].", "startOffset": 70, "endOffset": 74}, {"referenceID": 41, "context": "With respect to multi-objective ACO, a number of possibilities have been considered and evaluated for pheromone update, including weighted sum, weighted product pheromone update, multiple ant colonies and/or multiple pheromone matrices [44], [46].", "startOffset": 236, "endOffset": 240}, {"referenceID": 43, "context": "With respect to multi-objective ACO, a number of possibilities have been considered and evaluated for pheromone update, including weighted sum, weighted product pheromone update, multiple ant colonies and/or multiple pheromone matrices [44], [46].", "startOffset": 242, "endOffset": 246}, {"referenceID": 43, "context": "(This finding is interesting insofar as it differs from the findings of Lopez-Ibanez and Stutzle on bi-objective TSP problem [46] with respect to approximation of the center of the Pareto front.", "startOffset": 125, "endOffset": 129}, {"referenceID": 46, "context": "A useful discussion on the choice of test problems for experimental comparison in meta-heuristic search is provided by Eiben and Smith ([50], pp.", "startOffset": 136, "endOffset": 140}, {"referenceID": 47, "context": "A specification of the use cases of is available at [51].", "startOffset": 52, "endOffset": 56}, {"referenceID": 48, "context": "A specification of the use cases used in the development is available from [52].", "startOffset": 75, "endOffset": 79}, {"referenceID": 49, "context": "A specification of the use cases is available at [53].", "startOffset": 49, "endOffset": 53}, {"referenceID": 50, "context": "Manual software designs have been performed by appropriate experienced software designers from the three industrial problem domains and are available from [54].", "startOffset": 155, "endOffset": 159}, {"referenceID": 4, "context": "Values in Table 2 for the parameters N, \u03b1, \u03bc, \u03c3, are derived from the promising performances reported in [5], while those for MMAS-specific tmin and tmax are based on [47] and empirical evaluation with respect to the chosen representation.", "startOffset": 105, "endOffset": 108}, {"referenceID": 44, "context": "Values in Table 2 for the parameters N, \u03b1, \u03bc, \u03c3, are derived from the promising performances reported in [5], while those for MMAS-specific tmin and tmax are based on [47] and empirical evaluation with respect to the chosen representation.", "startOffset": 167, "endOffset": 171}, {"referenceID": 51, "context": "Details of the Research Ethics process can be found at [55].", "startOffset": 55, "endOffset": 59}, {"referenceID": 52, "context": "Interestingly, it was observed during design episodes that from time-to-time, the participants were presented with visualizations of candidate software design solution paths that show the \u201cGod Class\u201d anti-pattern [57].", "startOffset": 213, "endOffset": 217}, {"referenceID": 51, "context": "Ten of the eleven participants responded to the questionnaire [55] and the results are as follows.", "startOffset": 62, "endOffset": 66}], "year": 2012, "abstractText": "Software design is crucial to successful software development, yet is a demanding multi-objective problem for software engineers. In an attempt to assist the software designer, interactive (i.e. human in-the-loop) meta-heuristic search techniques such as evolutionary computing have been applied and show promising results. Recent investigations have also shown that Ant Colony Optimization (ACO) can outperform evolutionary computing as a potential search engine for interactive software design. With a limited computational budget, ACO produces superior candidate design solutions in a smaller number of iterations. Building on these findings, we propose a novel interactive ACO (iACO) approach to assist the designer in early lifecycle software design, in which the search is steered jointly by subjective designer evaluation as well as machine fitness functions relating the structural integrity and surrogate elegance of software designs. Results show that iACO is speedy, responsive and highly effective in enabling interactive, dynamic multi-objective search in early lifecycle software design. Study participants rate the iACO search experience as compelling. Results of machine learning of fitness measure weightings indicate that software design elegance does indeed play a significant role in designer evaluation of candidate software design. We conclude that the evenness of the number of attributes and methods among classes (NAC) is a significant surrogate elegance measure, which in turn suggests that this evenness of distribution, when combined with structural integrity, is an implicit but crucial component of effective early lifecycle software design.", "creator": "Microsoft\u00ae Word 2010"}}}