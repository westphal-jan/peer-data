{"id": "1301.1332", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Jan-2013", "title": "A Logic Programming Approach to Integration Network Inference", "abstract": "The discovery, representation and reconstruction of (technical) integration networks from Network Mining (NM) raw data is a difficult problem for enterprises. This is due to large and complex IT landscapes within and across enterprise boundaries, heterogeneous technology stacks, and fragmented data. To remain competitive, visibility into the enterprise and partner IT networks on different, interrelated abstraction levels is desirable.\n\n\n\n\nA fundamental part of the complexity of the network is a unique ability to provide intergroup communication across multiple networks and networks, and as with many of the above mentioned examples, such as IT services and data-sharing networks. Many networks are based on the same network; a few are based on two networks: the One in the US, with several locations in the USA, and the Two in the UK. For example, data sharing networks are located in the UK, and are in the UK and are in the UK. Some other networks can serve as a standard network for interconnection, in some regions, and on the global network.\nOne of the main advantages of interconnection is that they provide easy access to many networks across the network. A typical interconnection network with all the relevant data may not be complete, but the only real advantage of interconnection is that it is easy to connect to many network regions in one direction, with the data on the other end of the network. A typical interconnection network with the data on the other end of the network is not one of the main advantages of interconnection. In a typical interconnection network with a certain number of different types of data, the only way to get a high level of interconnection is for the data in the rest of the network.\nFor example, a single network can connect to a total of 11.3 billion users worldwide, and can connect up to 1.5 billion people. An example is a single network in India (about 60 million people), and can connect at least 12 million people in Europe, in the USA, in the UK, and in the UK. In this case, the connection can be as simple as connecting to a single database of data, and can be as simple as connecting to a single database of data.\nFor example, a single network can connect to a total of 11.3 billion users worldwide, and can connect up to 1.5 billion people in Europe, in the UK, and in the UK. In this case, the connection can be as simple as connecting to a single database of data, and can be as simple as connecting to a", "histories": [["v1", "Mon, 7 Jan 2013 20:52:40 GMT  (850kb)", "https://arxiv.org/abs/1301.1332v1", "15 pages, The 26th Workshop on Logic Programming (WLP), Bonn, 2012"], ["v2", "Tue, 8 Jan 2013 16:24:10 GMT  (436kb,D)", "http://arxiv.org/abs/1301.1332v2", "15 pages, The 26th Workshop on Logic Programming (WLP), Bonn, 2012"]], "COMMENTS": "15 pages, The 26th Workshop on Logic Programming (WLP), Bonn, 2012", "reviews": [], "SUBJECTS": "cs.DB cs.AI", "authors": ["daniel ritter"], "accepted": false, "id": "1301.1332"}, "pdf": {"name": "1301.1332.pdf", "metadata": {"source": "CRF", "title": "A Logic Programming Approach to Integration Network Inference", "authors": ["Daniel Ritter"], "emails": ["daniel.ritter@sap.com"], "sections": [{"heading": null, "text": "Keywords: Datalog, Integration Networks, Knowledge Representation, Logic Programming, Network Inference, Network Mining"}, {"heading": "1 Introduction", "text": "Enterprises are highly connected to partners and even competitors as part of value chains consisting of business processes. The business document exchange is actually implemented by complex, underlying networks of application and middleware systems, called integration networks. To remain competitive enterprises have to adapt their business processes in a timely and flexible manner, which requires visibility and control over the integration network. However, currently information is locked into systems of an enterprise. To overcome this situation, a new discipline, called Network Mining (NM), strives to discover and extract raw data hidden within heterogeneous systems in complex enterprise landscapes [21,20]. The raw data implicitly contains information about the integration network, i.e. middleware and application. From that, our system reconstructs integration networks. For the system user, the resulting linked real-world data describing the \u201das-is\u201d network can then be captured in e.g. network-centric BPMN models [19].\nA generalized view of such a network is shown in Fig. 1. When looking at an enterprise landscape, the systems within the integration network can be classified into different categories based on the integration content and the role they\nar X\niv :1\n30 1.\n13 32\nv2 [\ncs .D\nB ]\n8 J\nan 2\n01 3\nplay. The classification provides insight into the capabilities and complexity of the network and allows to manage business processes, contextualized visualization and operation on the network. These categories span from applications with embedded integration or even mediation capabilities, like proxies, enterprise services, composite applications or applications with service adaptation (Categories I+II), over standalone Enterprise Service Bus (ESB) or middleware instances with flexible pipeline processing, e.g. mapping, routing and connectivity for legacy systems (Category III+IV), to Business to Business (B2B) gateways for cross-enterprise document exchange (Categories V+VI) and system management solutions, which allow to operate these systems, their software and lifecycle (Category VII).\nIn this paper we present an approach to model and reconstruct integration networks from discovered raw data using logic programming, more precisely standard Datalog with recursion and stratified negation. We describe how information in form of NM raw data can be represented independent of their original domain in a Network Integration Model (NIM) and how user facts can be added. We have chosen Datalog to represent this model, which we use to develop Datalog programs (i.e. a finite set of Datalog rules) that express the network. That means identifying entity equivalences, computing edges and semantic references as well as dealing with user input. We validated our approach on simulated integration network data and report our experience with the network inference Datalog system in real-world enterprise networks as well as possible extensions.\nIn Section 2 we describe the problem domain and state on design principles and decisions in Section 3. Section 4 defines the NIM and Section 5 introduces the inference algorithm. Section 6 shows experimental results and states on ex-\nperiences. Section 7 concludes with related work, before we draw conclusions and outline future research in Section 8."}, {"heading": "2 Motivation", "text": "Our premise is that relevant data for computing integration networks is hidden in enterprise system landscapes. However, for that it has to be discovered by NM from mostly disjoint domains in different formats with different meaning [20]. The integration networks derived from the discovered information consist of nodes and edges on different abstraction levels.\nThe basic entities of the integration network are logical systems (e.g. tenants, applications, integration middleware) and message flows, which are either direct connectivity or mediated communication/ integration. The actual information about these entities as well as their semantics are discovered by Network Mining (NM) systems [20]. However, the discovered raw data is domain-specific and needs to be translated into a domain independent model for network inference, while preserving its semantics. The definition of a Network Integration Model (NIM) is the basis for applying network inference algorithms. Since the raw data comes from disjoint domains, in different formats with different semantics, inference algorithms have to deal with possibly duplicate, fragmented, uncertain or incorrect information while computing the network. Fig. 2 schematically shows some of these challenges. For instance, entity equivalences have to be identified and handled. Direct and transitive edges have to be calculated and semantic relations between nodes have to be inferred. Fig. 2(a) shows systems SX1 and SX2 discovered from domain X exchanging messages over middleware system MWX1, and systems SY1 and SY2 discovered from domain Y exchanging messages over middleware system MWY1. Here, SX2 and SY2 denote the same system, as well as MWX1 and SY1 are equivalent. Based on the inferred equivalences, the nodes are partitioned as equivalence relations Eq, i.e. Eq(MWX1, SY1) and Eq(SX2, SY2), and the edges are computed accordingly (see Fig. 2(b)). Systems or applications run on physical hosts, e.g. H1 from discovery domain Host. The relationships between systems and hosts are not considered as edges but semantic references within the network. Hosts build the bridge to the related domain of system management networks, which are addressed by [18,11]. A new host CS1 is added to the network as user knowledge on which SY1 runs. When merging systems MWX1 and SY1 the semantic relation is preserved."}, {"heading": "3 Design Principles and Decisions", "text": "The major design decisions taken were about finding a representation for an integration model and a language to express inference algorithms. We needed to select (1) an approach, which does not require to modify the system when changing the inference programs or the integration model, (2) a well-understood\nrepresentation for information suitable for the inference approach, and (3) a sufficiently powerful inference technique, simple enough to be used by our customers and partners to define their own inference programs.\nThe necessity of (1) is derived from developing the inference programs in the early prototypes. The domain of the data and the scope of inference evolved - and it will continue to do so as more data sources are integrated and inference is refined. Hence the lifecycle of the data model and of the inference programs needs to be decoupled from that of the system. Since system landscapes and business networks for large enterprises are very complex and many implementations need customer-specific modifications or extensions both (2) and (3) are required. As the relational model is a foundation for most business applications and is thus well-understood by customers, it is a natural choice for (2). Consequently, we initially considered SQL and its imperative extensions to express inference programs. However, as network analysis and inference are expressed more naturally using recursive rules we moved towards logic programming languages like Prolog or Datalog, choosing Datalog for its simpler semantics."}, {"heading": "4 The Integration Network (Inference) Model", "text": "The model for representing integration networks as virtual \u201das-is\u201d enterprise landscape covers a representative intersection of entities from the enterprise integration middleware space [15]. Although this domain has many aspects, which are even differently treated in different system implementations, we identified a common, core meta-model, which we call Network Integration Model (NIM). The basic NIM entities relevant for the inference are introduced subsequently, while more entities might be explained later where necessary.\nThe base premise for defining an integration meta-model is to represent the actual physical hosts in the enterprise landscape as first class entities and then find the interfaces provided or called by them during message-based communication. Since most of the communication actually addresses logical entities like applications or tenants, called systems, running on the physical hosts, a System is considered a node of the network. That means, systems represent (business) application and integration logic. For the communication with other systems via messages the MessageFlow represents edges in the network. Technically, messages are exchanged over interfaces, Interface, and channels, containing e.g. service bindings and operations, which we represent as IncomingConfiguration and OutgoingConfiguration. The inbound and outbound configurations are considered separate entities, since they carry important information about the message flows, thus helping to reconstruct the network\u2019s edges. This notion can also be found in a common graph traversal algebra to set custom processors or actions when entering or leaving a node [23]. Fig. 3 shows the basic NIM entities and their relations."}, {"heading": "5 The Network Inference Approach", "text": "The algorithm for computing integration networks consists of multiple steps, which have been identified for a parallel analysis allowing it to scale across large datasets of NM raw data. Since the information is represented in the NIM, the inference mechanism is independent of the specific integration and system domains. As discussed in Section 2, unique systems and hosts are identified by equivalence algorithms and semantic links between hosts and systems are computed (step 1). Based on that, incoming and outgoing configurations are identified (step 2) and then used to reconstruct message flows through building separate call graphs (steps 3,4) which are merged afterwards (step 5). Then message flows are linked with application and integration content (step 6) and\nuser knowledge is integrated. With user knowledge, the quality of the inference mechanism can be improved and information complemented or enriched. Within the inference programs, all user knowledge literals end with the \u201duser\u201d postfix, while discovered knowledge ends with \u201ddisc\u201d (i.e. edb relation).\nTo formalize the network reconstruction, a logic programming approach is used, in which the algorithms are described by Datalog rules and the discovered raw data is a set of Datalog facts according to NIM. The different processes of adding newly discovered information and removing outdated is continuous. For that, each piece of discovered information is annotated with a timestamp. However, instead of removing outdated information that is referenced by higher layer information models as in [19], it is kept and marked outdated until it is not referenced anymore.\nStep 1: Identify unique hosts and systems To identify hosts and systems uniquely through building equivalence classes, the single instances have to be identified. While hosts can be identified by e.g. host name, IP-address, the systems have no universally applicable identification scheme, thus they are usually identified using context dependent identifiers. For instance, the set of host identifiers can be an IP-address, the DNS name, and a host name. This information mainly comes from different, disjoint instances of system management software, mostly from IT service management [18] and virtualization systems [11]. All identifiers are contained in the equivalence class and any reference to one of them identifies the host. While these equivalence classes are not stable over time, it is quite likely that at least one of the elements of an equivalence class does not change if another one changes, thus making the identification more robust. That way, identity can be maintained over long periods of time in the presence of constant but gradual change. The raw facts from NM are host disc(host id, URI) and system disc(sys id, URI), which relate a host id or sys id to an addressable URI. Relations like same host disc(host id1, host id2) and same sys disc(sys id1, sys id2) connect two host or system identifiers, e.g. which refer to the same physical host or logical system. The semantic relation runs on disc(sys id, host id) connects a system to the host that it runs on. For simplicity, homogenous clusters of machines are also considered as one host.\nListing 1.1. Host equivalence exploiting information about system landscape\nsame sys (? s y s i d 1 , ? s y s i d 2 ) :\u2212 s ame sy s d i s c (? s y s i d 1 , ? s y s i d 2 ) . same sys (? s y s i d 1 , ? s y s i d 2 ) :\u2212 same sys (? s y s i d 1 , ? s y s i d 3 ) , same sys (? s y s i d 3 , ? s y s i d 2 ) .\nsame host (? ho s t i d1 , ? ho s t i d2 ) :\u2212 r un s on d i s c (? s y s i d 1 , ? ho s t i d1 ) , r un s on d i s c (? s y s i d 2 , ? ho s t i d2 ) , same sys (? s y s i d 1 , ? s y s i d 2 ) .\nBased on that, rules for e.g. same sys and same host are used to infer equivalence classes that allow to write rules that exploit the information about system landscapes. For instance, more than one system can run on one physical host, but one system cannot run on more than one host, Listing 1.1.\nStep 2: Determine Incoming and Outgoing Calls In current middleware route configurations, the senders of incoming calls to the system can be registered but are mostly unknown. On the other hand, components like the file adapter and the Apple Push Notification Service (APNS) always contain the sender system [15]. However, for outgoing calls from the sender system, e.g. via HTTP, SOAP, receiver or outgoing call configurations are needed to initiate the message flow to the receiver. This results in an outgoing and incoming call graph depicted in Fig. 4(a). The incoming disc(sys id, URI) and outgoing disc(sys id, URI) facts relate a sys id to a URI of an incoming configuration or an outgoing configuration for the identified system.\nStep 3: Determine Message Flows based on Outgoing Calls Since outgoing calls are made to a particular endpoint, the corresponding call configurations contain an identifier for the receiving host or system. These identifiers can then be matched against the identifiers that were determined in step 1. If no identifiers are available, these call configurations are processed in step 4. To relate outgoing call configurations to receiver systems recv disc(URI, sys id) relates a URI to an outgoing configuration to a sys id that identifies a receiving system or similarily recv host disc(URI, host id) for hosts.\nListing 1.2. Message flow from outgoing configuration\nmsg flow (? s y s i d s nd , ? s y s i d r e c v ) :\u2212 ou tgo i ng d i s c (? s y s i d s nd , ?RCONF) , r e c v d i s c (?RCONF, ? s y s i d r e c v ) .\nListing 1.3. Message flow for host configurations\nmsg f low host (? ho s t i d s end , ? h o s t i d r e c v ) :\u2212 r un s on d i s c (? s y s i d s nd , ? ho s t i d s end ) , ou t go i ng d i s c (? s y s i d s nd , ?RCONF) , r e c v h o s t d i s c (?RCONF, ? h o s t i d r e c v ) .\nThen message flow(sys id snd, sys id recv) rules determine the message flows between systems (Listing 1.2) and message flow host(host id send, host id recv) between hosts (Listing 1.3). That results into a an extension of the call graph shown in Fig. 4(b), in which S1 represents a system connected to other systems via incoming and outgoing configurations.\nStep 4: Determine Message Flows based on Incoming Calls Similar to the previous step, incoming call configurations are identified. For that, send disc(URI, sys id) facts are related via URI to incoming configurations. Again, this results in an extension of the call graph.\nStep 5: Merge Call Graphs for a System So far unique hosts and systems are identified and message flows are determined for a single system. Now, the identified incoming and outgoing call configurations from different systems are matched. This is done by matching compatible protocols, message types, etc. After new message flows are identified, the call graph is extended by the merged information (see Fig. 5). In case some incoming or outgoing call configurations do not match to already identified call configurations, they are kept in the model as \u201dunlinked\u201d configurations for matching new configurations.\nStep 6: Link Message Flows to Application and Integration Content The outgoing and incoming call configurations with hosts and systems result in a view of the network. However, these message flows only conclude communication between hosts and systems. The outgoing and incoming call configurations also have a link to application and integration content deployed and running on the systems. This content refers to the particular process or integration steps that trigger outgoing calls or receive incoming calls. In other words, process models [1] and middleware routes [15], i.e. integration flow (IFlow) or integration process, give insight into the details within systems and hosts and could be used to correlate operational data to trace messages through middleware systems.\nListing 1.4. Identifying IFlows\ni f l ow (? s y s i d s nd , ? s y s i d r e c v , ? sys id mw , ?URI) :\u2212 msg f l ow d i s c (? s y s i d s nd , ? sys id mw , ?URI) , msg f l ow d i s c (? sys id mw , ? s y s i d r e c v , ?URI) .\nFor instance, the IFlow if low(sendsys id, recvsys id,mwsys id, URI) relates senders to receivers through a middleware system, which can be calculated e.g. through the rule in Listing 1.4."}, {"heading": "6 Results and Experiences", "text": "For the evaluation of our approach, we used our Datalog system, which is a basic Datalog implementation in Java/OSGi based on [25], that allows to evaluate recursive rules and supports basic data types, comparisons and expressions in Datalog rules. The raw data comes from our Network Mining prototype, which discovers information in our testbed and transforms it to NIM Datalog facts. The testbed consists of two middleware systems, i.e. HXP and H73, of different releases for mediated communication, and have embedded IDoc and WebService capabilities for direct communication and a System Landscape Directory (SLD)\nfor system management information. This setup contains real-world conditions which we found in our customer landscapes, e.g. cross-middleware inference, combination of embedded and mediated communication, fragmented information registered in different domains.\nThe results of the experiments are shown, e.g. for systems and message flows in HXP in Table 1, 2 and for H73 in Table 3, 4. The tables show two aspects of the system, namely the discovery and the inference quality. For the inference, the entries for systems and message flows as well as top-level connections are important. The discovery is mainly depicted by attribute entries for the network entities and show minor gaps in the discovery process., e.g. in the category \u201dCorrect System Attributes\u201d (see Table 1). For the HXP-PI system, 12 nodes and\n55 node attributes are expected (see Table 1). In total 13 top-level connections are expected which group 31 message flows (see Table 2). Furthermore, the toplevel connection have 26 attributes, while the message flows have 372 attributes.\nFor the cross middleware systems and message flow inference, in total 18 unique, logical systems were inferred from 29 partially duplicate raw facts via equivalence determination (see Table 1 and 3) and 34 message flows have to be reconstructed and grouped to 17 top-level connections using incoming and outgoing call graph merge operations. For instance, logical system HXP 105 from PI-HXP with runs-on host id xxx2474 from SLD was found in the middleware configuration and SLD system information facts and merged into an equivalence class (see Table 5). At the same time, the corresponding message flows between HXP 105 to HXP 106 were reconstructed from PI configuration (conf.) and runtime (runt.) data connected to the system equivalence sets and merged into an\ntop-level connection group (see Table 6). The group consists of the message flow over sender interface FlightSeatAvailQuery to system HXP 106, which checks for free seats and is followed by a message to the same system over interface BookOrderRequest in case of a positive answer to the first query. If the booking order request was successful, system HXP 106 answers over interface FlightBookOrderConfirm to confirm the request. No unexpected systems or message flows were found and the complete network structure was reconstructed correctly.\nSimilarly, the H73-PI system has 3 parties, i.e. B2B contexts, 6 expected nodes with 31 attributes (for Table 3), 4 top-level connections, grouping 6 flows (for Table 4), with 8 attributes on the top-level connections and 78 on the message flows.\nThe detailed inference results are only shown partially due to the mass of data discovered. Hence Table 5 shows an excerpt of the results of systems with the discovered description, the inferred host and the equivalence class denoted by \u201ddiscovered system\u201d. Similarly, an excerpt of the inferred message flows are shown in Table 6. For that, the top-level connections, i.e. grouped message flows are listed with their message flows denoted by sender and receiver and the type of discovered facts from which the data came from (as \u201dFrom\u201d). In the excerpt, all message flows themselves build an equivalence class of same flows found in runtime logs (runt.) and configuration (config.).\nDue to good results in our testbed, we applied the system to real-world customer landscapes as shown in Fig. 6. This real-world validation was very successful on both counts. Firstly, it proved that the auto-discovery and inference is indeed feasible and resulted in highly reliable results. Secondly, our system would\nbe quite helpful in the everyday work of an integration architect, consultant or integration developer, since it gives an overview of the complete integration network which is currently not possible within the integration middleware tools. The system reduces the effort to document integration scenarios substantially, in particularly by a foreseen export of network details into PDF or office format. That helps to answer specific questions about the network, which are currently still impossible (or difficult) to achieve. For example, when combining configuration and runtime data it is possible to find connections that are not used any longer or were seldom used in a given period of time. Hence, one of the customers plan an upgrade project and with such a system a substantial migration time and effort will be saved."}, {"heading": "7 Related Work", "text": "Our approach for integration network represention and inference is based on Datalog, which is a well-researched topic [12,25] that had its revival recently due to good parallelization capabilities, latest through the work of Hellerstein et al. [2,14]. Even in the enterprise analytics domain, Datalog was recently applied, mainly through work of [5,6,7]. However, these approaches address non-network inference domains for which they define extensions.\nIn terms of the meta-model for integration network, [23] represents closest known related work, in which a path algebra is defined that is used to traverse arbitrary graphs. Similarly we define nodes and edges with inbound and outbound connectors, however different in terms of meaning and usage.\nFor NM systems in general, related work is conducted in the area of Process Mining (PM) initiated by [1], which sits between computational intelligence and data mining. It has similar requirements for data discovery, conformance and enhancement with respect to NM [20], but does not work with network models and inference. PM exclusively strives to derive BPM models from process logs. Hence PM complements NM in the area of business process discovery.\nGaining insight into the network of physical and virtual nodes within enterprises is only addressed by the Host entity in NIM, since it is not primarily relevant for visualizing and operating integration networks. This domain is mainly addressed by the IT service management [18] and virtualization community [11], which could be considered when introducing physical entities to our meta-model.\nThe linked (web) data research shares similar approaches and methodologies, which have so far neglected linked data within enterprises and mainly focused on RDF-based approaches [9,10]. Applications of Datalog in the area of linked data [22,8] and semantic web [16] show that it is used in the inference domain, however not used for network inference."}, {"heading": "8 Discussion and Future Work", "text": "In this paper we introduce a new domain for information discovery, machine learning, and network reconstruction, for which we defined a modeling and inference approach to reconstruct integration networks from NM raw data using Datalog. The network model developed specifically for the connectivity and integration domains and covers an intersection of the relevant entities, which we\nderived through the analysis of several middleware systems on the market. We encoded the discovered raw data as Datalog facts to create a domain independent knowledge base and applied rule-based inference representing a multi-step network inference approach. We validated our approach on a simulated integration network and reported our experiments on applying our system to real-world enterprise networks. The evaluation shows good results with respect to the challenges like equivalence class determination, flow- and cross-middleware network reconstruction as introduced in Section 2. Although the network structure could be reconstructed very well, the discovery range should be improved to attach more integration details to the attributes of the network entity instances.\nFuture work will be conducted in several areas, among them the improvement of the discovery range, the inference of business process models from NM data and the correlation to integration networks as well as extensions to standard Datalog to improve the current implementation. For instance, the efficient compilation of Datalog programs to current hardware [17], distributed systems [24] or pruning with CHR [4] could guarantee more efficient Datalog processing. Since not all facts have the same certainty, we will also look into probabilistic extensions of Datalog like [26,13], which could help to express different levels of certainty with respect to network model instances. The work conducted in [3] will be considered for time aspects, which could help to prune large, outdated networks from system landscapes with historical data."}], "references": [{"title": "Process Mining: Discovery", "author": ["W. van der Aalst"], "venue": "Conformance and Enhancement of Business Processes,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "BOOMAnalytics: Exploring Data-centric, Declarative Programming for the Cloud", "author": ["P. Alvaro", "T. Condie", "N. Conway", "K. Elmeleegy", "J.M. Hellerstein", "R.C. Sears"], "venue": "EuroSys,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Dedalus: Datalog in Time and Space", "author": ["P. Alvaro", "W.R. Marczak", "N. Conway", "D. Maier", "R. Sears"], "venue": "Datalog 2.0,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "Approximating Constraint Propagation in Datalog", "author": ["D. Campagna", "B. Sarna-Starosta", "T. Schrijvers"], "venue": "11th International Colloquium on Implementation of Constraint LOgic Programming Systems (CICLOPS),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Datalog for Enterprise Applications \u2013 From Industrial Applications to Rese", "author": ["M. Aref"], "venue": "Datalog 2.0 Workshop,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2010}, {"title": "LogicBlox for Enterprise Applications", "author": ["M. Aref"], "venue": "Northern California Database Day,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2011}, {"title": "Datalog and Emerging Applications: An Interactive Tutorial", "author": ["S.S. Huang", "T.J. Green", "B.T. Loo"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "Distributed data management on the web", "author": ["S. Abiteboul"], "venue": "Datalog 2.0 Workshop,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "Linked Data \u2013 The Story so Far", "author": ["Bizer", "T.C. Heath", "T. Berners-Lee"], "venue": "International Journal on Semantic Web and Information Systems,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2009}, {"title": "The Emerging Web of Linked Data", "author": ["C. Bizer"], "venue": "IEEE Intelligent Systems,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "Network virtualization: state of the art and research challenges", "author": ["Chowdhury", "N.M.M.K", "R. Boutaba"], "venue": "Communications Magazine,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2009}, {"title": "The magic of logical inference in probabilistic programming", "author": ["B. Gutmann", "I. Thon", "A. Kimmig", "M. Bruynooghe", "L. De Raedt"], "venue": "Theory and Practice of Logic Programming,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2011}, {"title": "The Declarative Imperative \u2013 Experiences and Conjectures in Distributed Logic", "author": ["J.M. Hellerstein"], "venue": "Technical Report, Berkeley,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2010}, {"title": "Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions", "author": ["G. Hohpe", "B. Woolf"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2003}, {"title": "Using Datalog on the Semantic Web", "author": ["B. Motik"], "venue": "Datalog 2.0 Workshop,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2010}, {"title": "Efficiently Compiling Efficient Query Plans for Modern Hardware", "author": ["T. Neumann"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2011}, {"title": "Topic Overview \u2013 IT Service Management", "author": ["P O\u2019Neill"], "venue": "Technical Report, Forrester Research,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2006}, {"title": "Building a Business Graph System and Network integration", "author": ["D. Ritter", "J. Ackermann", "A. Bhatt", "F.O. Hoffmann"], "venue": "Model based on BPMN. In: 3rd International Workshop on BPMN, Luzern,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2011}, {"title": "From Network Mining to Large Scale Business Networks", "author": ["D. Ritter"], "venue": "International Workshop on Large Scale Network Analysis (LSNA), WWW Companion,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2012}, {"title": "Towards Business Network Management", "author": ["D. Ritter"], "venue": "Confenis: 6th International Conference on Research and Practical Issues of Enterprise Information Systems,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2012}, {"title": "Using Datalog for Rule-Based Reasoning over Web Data: Challenges and Next Steps", "author": ["A. Polleres"], "venue": "Datalog 2.0 Workshop,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2010}, {"title": "A Path Algebra for Multi-Relational Graphs", "author": ["M.A. Rodriguez", "P. Neubauer"], "venue": "International Workshop on Graph Data Management (GDM), Hannover,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2011}, {"title": "Optimizing Large-Scale Semi-Naive Datalog Evaluation in Hadoop", "author": ["M. Shaw", "P. Koutris", "B. Howe", "D. Suciu"], "venue": "Datalog 2.0,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2012}, {"title": "Principles of Database and Knowledge-Base Systems Volume I", "author": ["J.D. Ullman"], "venue": "Computer Science Press,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1988}, {"title": "DTProbLog: A decision-theoretic probabilistic Prolog", "author": ["G. Van den Broeck", "I. Thon", "M. van Otterlo", "L. De Raedt"], "venue": "Proceedings of the AAAI Conference on Artificial Intelligence", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2010}], "referenceMentions": [{"referenceID": 19, "context": "To overcome this situation, a new discipline, called Network Mining (NM), strives to discover and extract raw data hidden within heterogeneous systems in complex enterprise landscapes [21,20].", "startOffset": 184, "endOffset": 191}, {"referenceID": 18, "context": "To overcome this situation, a new discipline, called Network Mining (NM), strives to discover and extract raw data hidden within heterogeneous systems in complex enterprise landscapes [21,20].", "startOffset": 184, "endOffset": 191}, {"referenceID": 17, "context": "network-centric BPMN models [19].", "startOffset": 28, "endOffset": 32}, {"referenceID": 18, "context": "However, for that it has to be discovered by NM from mostly disjoint domains in different formats with different meaning [20].", "startOffset": 121, "endOffset": 125}, {"referenceID": 18, "context": "The actual information about these entities as well as their semantics are discovered by Network Mining (NM) systems [20].", "startOffset": 117, "endOffset": 121}, {"referenceID": 16, "context": "Hosts build the bridge to the related domain of system management networks, which are addressed by [18,11].", "startOffset": 99, "endOffset": 106}, {"referenceID": 10, "context": "Hosts build the bridge to the related domain of system management networks, which are addressed by [18,11].", "startOffset": 99, "endOffset": 106}, {"referenceID": 13, "context": "The model for representing integration networks as virtual \u201das-is\u201d enterprise landscape covers a representative intersection of entities from the enterprise integration middleware space [15].", "startOffset": 186, "endOffset": 190}, {"referenceID": 21, "context": "This notion can also be found in a common graph traversal algebra to set custom processors or actions when entering or leaving a node [23].", "startOffset": 134, "endOffset": 138}, {"referenceID": 17, "context": "However, instead of removing outdated information that is referenced by higher layer information models as in [19], it is kept and marked outdated until it is not referenced anymore.", "startOffset": 110, "endOffset": 114}, {"referenceID": 16, "context": "This information mainly comes from different, disjoint instances of system management software, mostly from IT service management [18] and virtualization systems [11].", "startOffset": 130, "endOffset": 134}, {"referenceID": 10, "context": "This information mainly comes from different, disjoint instances of system management software, mostly from IT service management [18] and virtualization systems [11].", "startOffset": 162, "endOffset": 166}, {"referenceID": 13, "context": "On the other hand, components like the file adapter and the Apple Push Notification Service (APNS) always contain the sender system [15].", "startOffset": 132, "endOffset": 136}, {"referenceID": 0, "context": "In other words, process models [1] and middleware routes [15], i.", "startOffset": 31, "endOffset": 34}, {"referenceID": 13, "context": "In other words, process models [1] and middleware routes [15], i.", "startOffset": 57, "endOffset": 61}, {"referenceID": 23, "context": "For the evaluation of our approach, we used our Datalog system, which is a basic Datalog implementation in Java/OSGi based on [25], that allows to evaluate recursive rules and supports basic data types, comparisons and expressions in Datalog rules.", "startOffset": 126, "endOffset": 130}, {"referenceID": 23, "context": "Our approach for integration network represention and inference is based on Datalog, which is a well-researched topic [12,25] that had its revival recently due to good parallelization capabilities, latest through the work of Hellerstein et al.", "startOffset": 118, "endOffset": 125}, {"referenceID": 1, "context": "[2,14].", "startOffset": 0, "endOffset": 6}, {"referenceID": 12, "context": "[2,14].", "startOffset": 0, "endOffset": 6}, {"referenceID": 4, "context": "Even in the enterprise analytics domain, Datalog was recently applied, mainly through work of [5,6,7].", "startOffset": 94, "endOffset": 101}, {"referenceID": 5, "context": "Even in the enterprise analytics domain, Datalog was recently applied, mainly through work of [5,6,7].", "startOffset": 94, "endOffset": 101}, {"referenceID": 6, "context": "Even in the enterprise analytics domain, Datalog was recently applied, mainly through work of [5,6,7].", "startOffset": 94, "endOffset": 101}, {"referenceID": 21, "context": "In terms of the meta-model for integration network, [23] represents closest known related work, in which a path algebra is defined that is used to traverse arbitrary graphs.", "startOffset": 52, "endOffset": 56}, {"referenceID": 17, "context": "Real-world customer network in a network-centric BPMN notation [19] inferred", "startOffset": 63, "endOffset": 67}, {"referenceID": 0, "context": "For NM systems in general, related work is conducted in the area of Process Mining (PM) initiated by [1], which sits between computational intelligence and data mining.", "startOffset": 101, "endOffset": 104}, {"referenceID": 18, "context": "It has similar requirements for data discovery, conformance and enhancement with respect to NM [20], but does not work with network models and inference.", "startOffset": 95, "endOffset": 99}, {"referenceID": 16, "context": "This domain is mainly addressed by the IT service management [18] and virtualization community [11], which could be considered when introducing physical entities to our meta-model.", "startOffset": 61, "endOffset": 65}, {"referenceID": 10, "context": "This domain is mainly addressed by the IT service management [18] and virtualization community [11], which could be considered when introducing physical entities to our meta-model.", "startOffset": 95, "endOffset": 99}, {"referenceID": 8, "context": "The linked (web) data research shares similar approaches and methodologies, which have so far neglected linked data within enterprises and mainly focused on RDF-based approaches [9,10].", "startOffset": 178, "endOffset": 184}, {"referenceID": 9, "context": "The linked (web) data research shares similar approaches and methodologies, which have so far neglected linked data within enterprises and mainly focused on RDF-based approaches [9,10].", "startOffset": 178, "endOffset": 184}, {"referenceID": 20, "context": "Applications of Datalog in the area of linked data [22,8] and semantic web [16] show that it is used in the inference domain, however not used for network inference.", "startOffset": 51, "endOffset": 57}, {"referenceID": 7, "context": "Applications of Datalog in the area of linked data [22,8] and semantic web [16] show that it is used in the inference domain, however not used for network inference.", "startOffset": 51, "endOffset": 57}, {"referenceID": 14, "context": "Applications of Datalog in the area of linked data [22,8] and semantic web [16] show that it is used in the inference domain, however not used for network inference.", "startOffset": 75, "endOffset": 79}, {"referenceID": 15, "context": "For instance, the efficient compilation of Datalog programs to current hardware [17], distributed systems [24] or pruning with CHR [4] could guarantee more efficient Datalog processing.", "startOffset": 80, "endOffset": 84}, {"referenceID": 22, "context": "For instance, the efficient compilation of Datalog programs to current hardware [17], distributed systems [24] or pruning with CHR [4] could guarantee more efficient Datalog processing.", "startOffset": 106, "endOffset": 110}, {"referenceID": 3, "context": "For instance, the efficient compilation of Datalog programs to current hardware [17], distributed systems [24] or pruning with CHR [4] could guarantee more efficient Datalog processing.", "startOffset": 131, "endOffset": 134}, {"referenceID": 24, "context": "Since not all facts have the same certainty, we will also look into probabilistic extensions of Datalog like [26,13], which could help to express different levels of certainty with respect to network model instances.", "startOffset": 109, "endOffset": 116}, {"referenceID": 11, "context": "Since not all facts have the same certainty, we will also look into probabilistic extensions of Datalog like [26,13], which could help to express different levels of certainty with respect to network model instances.", "startOffset": 109, "endOffset": 116}, {"referenceID": 2, "context": "The work conducted in [3] will be considered for time aspects, which could help to prune large, outdated networks from system landscapes with historical data.", "startOffset": 22, "endOffset": 25}], "year": 2017, "abstractText": "The discovery, representation and reconstruction of (technical) integration networks from Network Mining (NM) raw data is a difficult problem for enterprises. This is due to large and complex IT landscapes within and across enterprise boundaries, heterogeneous technology stacks, and fragmented data. To remain competitive, visibility into the enterprise and partner IT networks on different, interrelated abstraction levels is desirable. We present an approach to represent and reconstruct the integration networks from NM raw data using logic programming based on first-order logic. The raw data expressed as integration network model is represented as facts, on which rules are applied to reconstruct the network. We have built a system that is used to apply this approach to real-world enterprise landscapes and we report on our experience with this system.", "creator": "LaTeX with hyperref package"}}}