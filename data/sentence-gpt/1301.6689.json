{"id": "1301.6689", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Jan-2013", "title": "A Hybrid Anytime Algorithm for the Constructiion of Causal Models From Sparse Data", "abstract": "We present a hybrid constraint-based/Bayesian algorithm for learning causal networks in the presence of sparse data. The algorithm searches the space of equivalence classes of models (essential graphs) using a heuristic based on conventional constraint-based techniques. Each essential graph is then converted into a directed acyclic graph and scored using a Bayesian scoring metric.\n\n\n\n\nThe Bayesian analysis provides a detailed and highly intuitive framework for modeling the neural networks. Using a Bayesian model, we apply Bayesian estimation to neural networks (SMA) that are derived from the Bayesian neural networks. Our algorithm generates a Bayesian rank and discriminates across the nodes and sub-points of the nodes. The rank and discriminates between nodes, and therefore results in the classification and classification of neural networks. This results in a neural network, with no additional dimensionality.\nBayesian neural networks [ edit ]\nBayesian networks are based on an approximation to Bayesian learning models (BDS) for learning causal networks. They are based on the Bayesian approximation to Bayesian learning models, with the Bayesian algorithm performing an analysis of the posterior distributions for BDS and for learning the posterior distribution. We define the posterior distribution in a Bayesian hierarchical clustering tree, called a Bayesian hierarchical clustering tree (BDS). The Bayesian hierarchical clustering tree has been derived in a Bayesian system by using a Bayesian approach with some caveats. We describe the Bayesian clustering tree as an example of the Bayesian clustering tree. The Bayesian model contains a set of Bayesian-derived Bayesian-derived models, with some limitations. These models consist of two Bayesian models: Bayesian and Bayesian-derived models. Bayesian models, for example, have a BDF, and Bayesian-derived models. BDF models, for example, have a BDF, and Bayesian-derived models. BDF models are highly efficient and thus have a Bayesian-derived model.\nBayesian models are based on the Bayesian-derived model. A Bayesian model requires the estimation of the posterior distribution and discriminates between nodes, and a Bayesian model requires a Bayesian model that can represent a model that can account for the posterior distribution and discriminates between nodes. However, Bayesian models can also predict which model is the correct model for the posterior distribution.\nBayesian models have a Bayesian representation in the posterior distribution. This is often expressed as a Bayesian representation of a model in", "histories": [["v1", "Wed, 23 Jan 2013 15:57:34 GMT  (267kb)", "http://arxiv.org/abs/1301.6689v1", "Appears in Proceedings of the Fifteenth Conference on Uncertainty in Artificial Intelligence (UAI1999)"]], "COMMENTS": "Appears in Proceedings of the Fifteenth Conference on Uncertainty in Artificial Intelligence (UAI1999)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["denver dash", "marek j druzdzel"], "accepted": false, "id": "1301.6689"}, "pdf": {"name": "1301.6689.pdf", "metadata": {"source": "CRF", "title": "A Hybrid Anytime Algorithm for the Construction of Causal Models From Sparse Data", "authors": ["Denver Dash"], "emails": ["ddash@sis.pitt.", "marek@sis."], "sections": [{"heading": null, "text": "We present a hybrid constraint based/Bayesian algorithm for learning causal networks in the presence of sparse data. The algorithm searches the space of equivalence classes of models (essential graphs) using a heuristic based on conventional constraint based techniques. Each essential graph is then converted into a directed acyclic graph and scored using a Bayesian scoring met ric. Two variants of the algorithm are devel oped and tested using data from randomly generated networks of sizes from 15 to 45 nodes with data sizes ranging from 250 to 2000 records. Both variations are compared to, and found to consistently outperform two variations of greedy search with restarts.\n1 Introduction\nMethods for learning probabilistic graphical models can be partitioned into at least two general classes of methods: constraint-based search and Bayesian meth ods. The constraint-based approaches [Spirtes et al., 1993, Verma and Pearl, 1991] search the data for condi tional independence relations from which it is in princi ple possible to deduce the Markov equivalence class of the underlying causal graph. Two notable constraint based algorithms are the PC algorithm which assumes that no hidden variables are present and the FCI al gorithm which is capable of learning something about the causal relationships even assuming there are la tent variables present in the data [Spirtes et al., 1993]. Bayesian methods [Cooper and Herskovits, 1992] uti lize a search-and-score procedure to search the space of\ndags, and use the posterior density as a scoring func tion. There are many variations on Bayesian meth ods (see [Heckerman, 1998] for a comprehensive review of the literature); however, most research has focused on the application of greedy heuristics, combined with techniques to avoid local maxima in the posterior den sity (e.g., greedy search with random restarts or best first searches).\nBoth constraint-based and Bayesian approaches have advantages and disadvantages. Constraint-based ap proaches are relatively quick and possess the ability to deal with latent variables. However, constraint-based approaches rely on an arbitrary significance level to decide independencies, and they can be unstable in the sense that an error early on in the search can have a cascading effect that causes a drastically different graph to result. Bayesian methods can be applied even with very little data where conditional independence tests are likely to break down. Both approaches have the ability to incorporate background knowledge in the form of temporal ordering, or forbidden or forced arcs, but Bayesian approaches have the added advantage of being able to flexibly incorporate users' background knowledge in the form of prior probabilities over the structures and over the parameters of the network. Also, Bayesian approaches are capable of dealing with incomplete records in the database. The most serious drawback to the Bayesian approaches is the fact that they are relatively slow.\nTypically Bayesian search procedures operate on the space of directed acyclic graphs ( dags). However, re cently researchers have investigated performing greedy Bayesian searches on the space of equivalence classes of dags [Spirtes et al., 1995, Madigan et al., 1995, Chickering, 1996]. The graphical objects representing equivalence classes have been called by several names (\"patterns\", \"completed pdag representations\" , \"max imally oriented graphs\" , and \"essential graphs\" ). We will use the term \"essential graph\" because we feel it is both descriptive and concise (but we acknowledge that\nA Hybrid Algorithm for Construction of Causal Models 143\nthe term \"pattern\" is more prevalent). An essential graph is a special case of a chain graph, possessing both directed and non-directed arcs, but no directed cycles. In order to specify an equivalence class it is necessary and sufficient to specify both a set of undirected adja cencies and a set of v-structures ( a.k.a. \"non-shielded colliders\", a structure such as X -+ Y +- Z such that X is not adjacent to Z) possessed by the dag [Chick ering, 1995]. An essential graph therefore possesses undirected adjacencies when two nodes are adjacent, and it may possess directed adjacencies if a triple of nodes possesses a v-structure or if an ar_c is required to be directed due to other v-structures [Anderson et al., 1995]. The space of essential graphs is smaller than the space of dags; therefore it is hoped that perform ing a search directly within this space might be ben eficial; however, the Bayesian metric must be applied to a dag, therefore these procedures incur the addi tional cost required to convert back and forth between essential-graph-space and dag-space. Results from the above work have shown to be promising, however.\nResearchers have also developed two-stage hybrid al gorithms, where the first stage performs a constraint based search and uses the resulting graph as input into a second-stage Bayesian search. In particular, [Singh and Valtorta, 1993] use the PC algorithm to generate an absolute temporal ordering on the nodes for use with the K2 algorithm [Cooper and Herskovits, 1992], which requires such an ordering on the input. [Spirtes et al., 1995] use the PC algorithm to generate a good starting graph for use in their greedy search over the space of essential graphs.\nWe describe in this paper two new variants of a hy brid constraint-based/Bayesian algorithm that is effec tive for sparse data. The algorithms use conventional constraint-based methods to search the space of essen tial graphs, convert these to dag-space, and then pro ceed in different ways to apply Bayesian techniques. In Section 2 we review the PC algorithm and the Bayesian scoring metric. In Section 3 we describe the new al gorithms in detail. Finally, in Section 4 we describe the design and results of some experimental tests that were used to analyze the algorithms, including some comparisons to a conventional Bayesian greedy search algorithm and to a hybrid constraint-based/Bayesian algorithm.\n2 The PC Algorithm and the Bayesian Criterion\nThe PC algorithm is a constraint-based algorithm for finding the essential graph corresponding to the causal graph which generated the data. This algorithm as sumes the Causal Markov Condition and the Causal\nFaithfulness Condition as well as valid statistical de cisions. We sketch this algorithm below. For a de tailed description the reader is referred to [Spirtes et al., 1993].\nThe procedure takes as input a database over a set of variables V, a test of conditional independence I(x, viS), and a significance level 0 < a < 1. Im plicitly the algorithm also takes an ordering order(V) over the nodes which specifies in which order to check for independencies.\nProcedure 1 (PC Algorithm (sketch))\nInput: A database D over a set of variables V, a test of conditional independence: I(x, viS), a signifi cance level: 0 < a < 1, and an ordering order(V) over V.\nOutput: An essential graph over V.\n1. Construct the complete undirected graph over V.\n2. For all adjacent nodes x and v, try to sepa rate nodes by checking first for lower-order, then for progressively higher-order conditional inde pendencies between x and V\u00b7 Check a conditional independence relation I ( x, vIS) if and only if all variables in S are adjacent to either x or y. If a conditional independence relation is discovered between x and v, then remove the edge between x and v, thus decreasing the number of possible sets, S. Conditional independencies should be checked in the order specified by order(V).\n3. For each triple of nodes (x, v, z) such that x is adjacent to v and v is adjacent to z but x is not adjacent to z, Orient x-y-z as x -+ y +- z if and only if v was not in the set S that separated x and z in step 2.\n4. Repeat, until no more edges can be directed:\n(a) Direct all arcs necessary to avoid new v structures.\n(b) Direct all arcs necessary to avoid cycles.\nThe specification of order(V) is not typically empha sized in the statement of the PC algorithm; however, it will be important for us later, so we explicate it here. It should be noted that order(V) does not spec ify a temporal ordering over the variables. It merely is an arbitrary parameter that specifies in what order to check for independencies. In the infinite sample limit, the output of the algorithm would be independent of these different orderings.\nSteps 1 and 4 are performed in O(n2) time. Steps 2 and 3, however are exponential in n, in the worst case.\n144 Dash and Druzdzel\nThe worst case occurs when the generating graph is very dense; in particular, the computational time com plexity of PC is bounded by n2 (n - 1)k-l j(k - 1)!, where k is the maximum degree of any node in the graph. This expression provides a loose upper bound on the worst-case complexity; the average-case com plexity depends on the details of the structure of the underlying causal graph.\nThe Bayesian metric that we use was first derived by [Cooper and Herskovits, 1992]. This score is the joint density P(D, S) = P(DIS)P(S) which is pro portional to the posterior density P(D, S) ex: P(SID). Under certain assumptions about the form of the pri ors over the parameters of the model and under the assumptions of parameter independence (see [Hecker man, 1998] for details of these assumptions and other issues) the logarithm of P(D, S) can be calculated ef ficiently and in closed form.\n3 Description of the Algorithms\nAs stated previously, the PC algorithm is unstable. In both step 2 and in step 3 an error made early on can ha.;,e cascading effects in the output. This effect is es pecially apparent for sparse data sets with many vari ables. [Spirtes et al., 1993] note this instability and remark that in practice step 2 is much more stable than step 3. Because of these instabilities, the output of the PC algorithm is sensitive to the order in which conditional independencies are checked. Of course the output is also sensitive to the value of the significance level, a specified by the input. The algorithms de scribed here capitalize on these sensitivities in the PC algorithm to perform a search through the space of essential graphs; namely, by varying these arbitrary parameters it is possible to generate many different essential graphs with the same set of data.\nAn example of this effect is shown in Figure 1. The PC algorithm was run on 4 databases ranging from 250 to 2000 records containing 15 variables each. Each database was generated by a different randomly gen erated graph (see Section 4 for details about how the data-generating graphs were created). PC was run on each of these four data sets 1300 times. After each termination of PC, the order(V) was changed ran domly and a new a was drawn from a uniform distri bution in the range from 0.005 to 0.2, and PC was run again. This procedure was repeated 1300 times per data set. This figure depicts the number of distinct graphs generated out of 1300 attempts. For example, in the database with 1000 records, the PC algorithm generated almost 450 distinct essential graphs out of 1300 attempts. Clearly, this procedure is effective for searching the space of essential graphs. However, Fig-\nure 1 indicates that the ability to search the space begins to decrease as the number of records increases. This is because the statistical decisions become more robust with increasing data and make fewer errors. Conversely, since the space of essential graphs grows rapidly as the number of variables grows, the num ber of distinct graphs generated should also sharply increase with the number of variables.\nThe first procedure we describe performs a search of essential graph space using the PC algorithm as a heuristic, then randomly converts each essential graph to a dag and scores the dag using the Bayesian met ric. It is an \"anytime\" algorithm in the sense that the longer the algorithm runs the better its output will be. We will call this algorithm EGS for \"essential graph search\".\nProcedure 2 (EGS)\nInput: A database D over a set of variables V, a dis tribution P( a) over the significance level a, a test of independence I(x, yiS), an initial configuration for order(V), and an integer n.\nOutput: An essential graph.\nRepeat:\n1. Draw an a from P(a). 2. Call PerformPC(a, order(V), D, I) to gener\nate an essential graph G'.\nA Hybrid Algorithm for Construction of Causal Models 145\n3. Randomly convert G' to a dag S'. 4. Calculate P(D, S') and record the structure\nwith the maximum value. 5. Randomly generate a different configuration\nof order(V).\nUntil: n structures are generated without updating the maximum value of P(D, S').\nMany variations of this algorithm are possible. Since the metric being used is not invariant over dags in the same equivalence class, it may be more reasonable to generate and score all possible dags from a given essen tial graph, rather than randomly picking a single one. Another possibility is to use a scoring function that is invariant under equivalence class transformations. [Beckerman et al., 1995] suggests one possibility for an invariant metric. We conjectured that our results would not be too sensitive to these factors.\nThe second algorithm is a variation on EGS which in serts in place of step 4 an entire greedy search proce dure over the space of dags. It is thus a form of greedy search with restarts that uses EGS to generate the graphs to use at each new restart interval. We call this algorithm EGS/GS, for \"EGS/Greedy Search\" varia tion\" .\nAgain, many variations are possible. In our experi ments, all greedy search procedures used the same ba sic procedure: Some initial graph is first selected as a starting point. From there three search operators are tried in succession: Add(x, y) adds an arc between x and y, Del(x, y) deletes an arc between x and y, and Rev(x, y) reverses an arc between x and y. The re sults of these operations are then calculated for each pair of nodes (x, y), and the operation that results in the largest increase in score was chosen. Another pos sibility is to use the K2 algorithm as a basis for the greedy search.\nThese algorithms assume for simplicity that no hid den variables are present. Unfortunately, it is possible that the PC algorithm will detect some hidden vari ables in the course of its search through essential graph space. This can happen when directing arcs in step 3 of the PC algorithm. In particular, if two triples of variables exist: A-B-C and B-C-D, and PC si multaneously detects two v-structures A -+ B +- C and B -+ C +- D, then PC will create a structure B +-t C, which can be interpreted as a hidden common parent of B and C. Although this feature is useful in general, we do not deal with it here. Therefore, step 3 of the PC algorithm was modified so that it never added a double-headed edge to the graph. This was accomplished by checking triples in an order specified by order(V) and simply prohibiting the second head\nof any double-headed arcs whenever they appear.\nIt is also possible, but much more rare, for step 3 of PC to create a directed cycle in the graph. This can occur when a \"pinwheel\" structure is found as shown in Figure 2. Again, for convenience we reject graphs containing these structures.\nOne might question the necessity or the validity of ma nipulating the significance level parameter in an arbi trary way, as we are suggesting here. After all, well established rules have been developed in the statistics community over the decades to assist us in choosing meaningful significance levels for hypothesis testing. Also, [Spirtes et al., 1993] have developed guidelines based on extensive experimental tests for which signif icance levels to choose in the course of constraint-based causal discovery.\nWe propose both theoretical and experimental justifi cation for searching over the significance level. On the oretical grounds, we argue that the process of search ing for a causal graph using tests for significance is a considerably different procedure than the standard hypothesis testing that has been studied in statistics for decades. In a typical hypothesis test, say a stu dent t-test, the significance level is used to judge the probability of a single hypothesis. By contrast, the number of hypotheses tested in a typical constraint based search is typically a polynomial function of the number of variables in the model. Therefore, it is much more likely that one of these hypothesis tests will fail by chance and an arc will be erroneously added or deleted from the model. This fact, coupled with the fact that constraint-based searches tend to be unsta ble in errors made early-on in the search, means that constraint-based searches are much more sensitive to the significance level than traditional hypothesis tests.\nTo empirically demonstrate the importance of vary ing the significance level during the search, Figure 3 shows the number of graphs of maximal quality (as measured by the Bayesian metric) found as a function\n146 Dash and Druzdzel\nof significance level for the EGS algorithm performed on 50 databases of 500 records generated by a set of 50 graphs having 15 nodes and mean number of arcs equal to 22. It can be seen that although clearly the significance of 0.01 was the most important, over 70% of the maximal quality graphs generated were gener ated at other significance levels over the course of these EGS runs.\n4 Experiments\nWe performed three experiments comparing EGS and EGS/GS to two variations of greedy search with restarts. Both variations of greedy search operate on the space of dags and explore the space using the op erations described in Section 3. Both variations score the resulting structure using the metric P(D, S) and at each step pick the operation that maximizes this quantity. All greedy search procedures reported in this paper also take advantage of the separability of the P(D, S) metric so that only portions of the metric relevant to the nodes that have changed need to be recalculated at each step (See [Heckerman, 1998] for details of separable criteria).\nThe first variant of greedy search, which we call \"GS\" begins the search with a random graph and at each restart interval generates a new random graph. The second variant \"GS/1\" uses the PC algorithm to initi ate the search, then at each subsequent restart a new dag is generated randomly.\nIn all of the experiments described below, random data was generated using randomly constructed graphs and linear standard-normal (J.L = 0, a = 1) models with random parameters drawn from a uniform distribution between 0.1 and 0.9. That is, if a variable Y had a single parent X in the model, then the value for Y was generated to beY = f3X + '\"'f, where 0.1 < f3 < 0.9 and 'Y was standard normal.\nAfter a new essential graph a was learned for an orig inal graph G, four quantities were calculated: Adj+ is the number of adjacencies present inG' but not inG, Adj_ is the number of adjacencies present inG but not in G', Arcs+ is the number of directed arcs present in G' but not in G, and Arcs_ is the number of directed arcs present in G but not in G'. Thus, if G' = G Adj+ = Adj_ = Arcs+ = Arcs_ = 0. Experiment 1. The first experiment compared the four algorithms {EGS, EGSJGS, GS, GS/1} by run ning each algorithm {50, 20, 10} times for datasets con taining {15, 30, 45} variables, respectively. In each ex periment the generating graph had M arcs =1.5 times the number of nodes, and each database had 500 records. The results of this experiment are shown in Figure 4.\nIt is clear from this figure that EGS consistently outperforms all the other algorithms. Furthermore, EGS/GS consistently outperforms GS, but EGS/GS and GS/1 are often comparable. Note in each figure that the vertical axis is scaled to the maximum num ber of nodes. There appears to be little dependence on the number of nodes, although EGS may perform relatively better on graphs with many nodes.\nThe evident performance difference between EGS and EGS/GS seems to imply that search time is much bet ter spent searching the space of essential graphs than searching the space of dags. A considerable major ity of the search time (well over 90%) in the EGS/GS algorithm was spent in the greedy dag search.\nExperiment 2. The second experiment investigated the dependence of the algorithm results on the num ber of records in the database. 50 dags were gen erated each with 15 nodes and M arcs = 22. Four databases were generated with N records for N = {250, 500, 1000, 2000}. From these databases an es sential graph was learned using each of the four al gorithms {EGS, EGS/GS, GS, GS/1}. These re sults are shown in Figure 5 and Figure 6. Figure 5 shows the average results for the EGS algorithm only. Figure 6 shows the average value of the quan tity Errar = Adi+ + Adj_ +Arcs+ +Arcs_ for each of the four algorithms as a function of the size of the data set. The EGS and EGS/GS algorithms show dramatic improvement as the number of records in-\nA Hybrid Algorithm for Construction of Causal Models 147\n- 15 vars,-22-arcs; 500 data points- -\nEJGS\n.GS/1\nOEGS/GS\nOEGS\n_ 30 vars, 45 arcs, 500 data points _\nliJGS\n.GS/1\nOEGS/GS\nOEGS\n-45- vars, 67 .arcs, 500 data points- -\n[!JGS\n.GS/1\nOEGS/GS\nOEGS\narcs deleted\nadjs added adjs deleted arcs added arcs deleted\nFigure 4: Experimental results showing the mean number of adjacencies added, adjacencies deleted, arcs added and arcs deleted for each of the four algorithms. Each generating graph had 15, 30, and 45 nodes with M arcs =22, 45, and 67, respectively.\n12\n10\n8\n6\n4\n2\n0 250\n15 vars, 22 arcs\n. - - . ..\n500\n-+-- adjs added .......__ adjs deleted -+-arcs added ---*-arcs deleted\n1000 2000\nFigure 5: The dependence of Adi+, Adj_, Arcs+, and Arcs_ on the number of records in the database for EGS, for a study with generating graphs having 15 nodes and M arcs = 22.\n148 Dash and Druzdzel\nEach generating graph had 15 nodes with M arcs = 44 and each data set had 500 records.\ncreases compared to GS and GS/1. It is evident from Figure 6 however, that none of the algorithms using a greedy search have converged. This fact is evident because the error term is not decreasing as a function of increasing data size.\nExperiment 3. The final experiment tested the vari ation of the quality of the algorithms with the den sity of the generating graph. The algorithms were tested using 50 generating graphs of 15 nodes and M arcs = 44. 500 records were generated for each test. The results of this experiment are shown in Figure 7. Comparing this graph to Figure 4a, it is evident that EGS and EGS/GS are not as effective on dense graphs. This is expected because of the added complexity incurred by constraint-based algo rithms for dense graphs. Nonetheless, the graphs gen erated in this experiment were quite dense by com mon standards, over twice as dense as the ALARM network, a common benchmark model, and still EGS outperformed GS and GS/1.\n5 Conclusions and Future Work\nThe idea behind this work is a simple one that com bines already well-established ideas into yet another variant on search and score methods. Still it is interest ing that the technique of searching over the arbitrary parameters in the otherwise deterministic constraint based algorithms has not been tried previously. How powerful this method will turn out to be remains to\nbe seen. Unfortunately, there are many possible crite ria by which we could judge the efficacy of this algo rithm, and whether one is much better than another is not clear. One common approach is to attempt to Jearn a gold standard network, such as the ALARM network. The value of this approach for the EGS al gorithm is probably limited however, because EGS is only expected to perform well for small data sets, but most previous tests on the ALARM net have not fo cused on the sparse data regime.\nWe have, however, provided evidence that the EGS algorithm is worth investigating more closely. It con sistently out performs the two general variants of greedy search algorithms considered in this paper. Furthermore, the marked improvement of EGS over the EGS/GS variant is even more evidence that the essential graph search is more efficient than the greedy search. Nonetheless there are many variations of these algorithms that could be compared to. It remains to see how EGS compares to these algorithms as well. Also, as mentioned in Section 3, there are many vari ations of EGS itself that could be tried.\nEGS and EGS/GS assumed no latent variables. An obvious extension would be to include latent variables in the search. This could be done most effectively by using the FCI algorithm as the heuristic for the essen tial graph search. The resulting graphs could be scored with a Bayesian score using techniques for dealing with missing data, for example the EM algorithm using the BIC criterion, or using stochastic sampling methods. It may also be worthwhile to find a more principled approach to selecting the distribution from which the significance level is drawn.\nOverall, techniques combining constraint-based and Bayesian approaches to learning, as well as approaches for searching over the space of essential graphs con tinue to show promise.\nAcknowledgments\nWe would like to thank the U AI reviewers for their insightful and incisive comments. This research was supported by the Air Force Office of Scientific Research under grant number F49620-97-1-0225 to University of Pittsburgh, and by the National Science Foundation under Faculty Early Career Development (CAREER) Program, grant IRI-9624629.\nReferences\n[Anderson et al., 1995] Anderson, Steen; Madigan, David; and Perlman, Michael 1995. A char acterization of Markov equivalence classes for acyclic digraphs. Technical report 287, see\nA Hybrid Algorithm for Construction of Causal Models 149\nhttp:/ fwww.stat.washington.edu/tech.reports, Uni versity of Washington.\n[Chickering, 1995] Chickering, David Maxwell 1995. A transformational characterization of equivalent Bayesian network structures. In Proceedings of the Eleventh Annual Conference on Uncertainty in Ar tificial Intelligence (UAI-g5), Montreal, Quebec, Canada. 87-98.\n[Chickering, 1996] Chickering, David Maxwell 1996. Learning equivalence classes of Bayesian network structures. In Proceedings of the Twelfth Annual"}, {"heading": "Conference on Uncertainty in Artificial Intelligence", "text": "(UAJ-g6), Portland, Oregon. 150-157.\n[Cooper and Herskovits, 1992] Cooper, Gregory F. and Herskovits, Edward 1992. A Bayesian method for the induction of probabilistic networks from data. Machine Learning 9:309-347.\n[Heckerman et al., 1995] Heckerman, David.; Geiger, Dan; and Chickering, D. 1995. Learning Bayesian networks: The combination of knowledge and sta tistical data. Machine Learning 20:197-243.\n[Heckerman, 1998] Heckerman, David 1998. Bayesian networks for data mining. Data Mining and Knowl edge Discovery 1(1):79-119.\n[Madigan et al., 1995] Madigan, David; Anderson, Steen A.; Perlman, Michael D.; and Volin sky, Chris T. 1995. Bayesian model averag ing and model selection for Markov equivalence classes of acyclic digraphs. Technical report, see http:/ fwww.stat.washington.edu/bayesjpapers.html, University of Washington.\n[Singh and Valtorta, 1993] Singh, Moninder and Val torta, Marco 1993. An algorithm for the construc tion of Bayesian network structures from data. In Proceedings of the Ninth Annual Conference on Un certainty in Artificial Intelligence (UAI-g3), San Francisco, CA. Morgan Kaufmann Publishers. 259- 265.\n[Spirtes et al., 1993] Spirtes, Peter; Glymour, Clark; and Scheines, Richard 1993. Causation, Prediction, and Search. Springer Verlag, New York.\n[Spirtes et al., 1995] Spirtes, Peter; Richardson, Thomas; and Meek, Christopher 1995. Learning Bayesian networks with discrete variables from data. In Proceedings of the First International Conference on Knowledge Discovery and Data Min ing. 294-299.\n[Verma and Pearl, 1991] Verma, Thomas S. and Pearl, Judea 1991. Equivalence and synthesis\nof causal models. In Bonissone, P.P.; Henrion, M.; Kana!, L.N.; and Lemmer, J.F., editors 1991, Un certainty in Artificial Intelligence 6. Elsevier Science Publishers B.V. (North Holland). 255-268."}], "references": [{"title": "David; and Perlman", "author": ["Anderson, Steen", "Madigan"], "venue": "Michael", "citeRegEx": "Anderson et al.. 1995", "shortCiteRegEx": null, "year": 1995}, {"title": "and Herskovits", "author": ["Cooper", "Gregory F"], "venue": "Edward", "citeRegEx": "Cooper and Herskovits. 1992", "shortCiteRegEx": null, "year": 1992}, {"title": "Dan; and Chickering", "author": ["Heckerman, David.", "Geiger"], "venue": "D.", "citeRegEx": "Heckerman et al.. 1995", "shortCiteRegEx": null, "year": 1995}, {"title": "David; Anderson", "author": ["Madigan"], "venue": "Steen A.; Perlman, Michael D.; and Volin\u00ad sky, Chris T.", "citeRegEx": "Madigan et al.. 1995", "shortCiteRegEx": null, "year": 1995}, {"title": "Moninder and Val\u00ad torta", "author": ["Singh"], "venue": "Marco", "citeRegEx": "Singh and Valtorta. 1993", "shortCiteRegEx": null, "year": 1993}, {"title": "Clark; and Scheines", "author": ["Spirtes, Peter", "Glymour"], "venue": "Richard", "citeRegEx": "Spirtes et al.. 1993", "shortCiteRegEx": null, "year": 1993}, {"title": "Learning Bayesian networks with discrete variables from data", "author": ["Peter", "Thomas Richardson", "Christopher Meek"], "venue": "In Proceedings of the First International", "citeRegEx": "Peter et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Peter et al\\.", "year": 1995}], "referenceMentions": [{"referenceID": 5, "context": "Two notable constraint\u00ad based algorithms are the PC algorithm which assumes that no hidden variables are present and the FCI al\u00ad gorithm which is capable of learning something about the causal relationships even assuming there are la\u00ad tent variables present in the data [Spirtes et al., 1993].", "startOffset": 270, "endOffset": 292}, {"referenceID": 1, "context": "Bayesian methods [Cooper and Herskovits, 1992] uti\u00ad lize a search-and-score procedure to search the space of Marek J.", "startOffset": 17, "endOffset": 46}, {"referenceID": 0, "context": "An essential graph therefore possesses undirected adjacencies when two nodes are adjacent, and it may possess directed adjacencies if a triple of nodes possesses a v-structure or if an ar_ c is required to be directed due to other v-structures [Anderson et al., 1995].", "startOffset": 244, "endOffset": 267}, {"referenceID": 4, "context": "In particular, [Singh and Valtorta, 1993] use the PC algorithm to generate an absolute temporal ordering on the nodes for use with the K2 algorithm [Cooper and Herskovits, 1992], which requires such an ordering on the input.", "startOffset": 15, "endOffset": 41}, {"referenceID": 1, "context": "In particular, [Singh and Valtorta, 1993] use the PC algorithm to generate an absolute temporal ordering on the nodes for use with the K2 algorithm [Cooper and Herskovits, 1992], which requires such an ordering on the input.", "startOffset": 148, "endOffset": 177}, {"referenceID": 5, "context": "For a de\u00ad tailed description the reader is referred to [Spirtes et al., 1993].", "startOffset": 55, "endOffset": 77}, {"referenceID": 1, "context": "The Bayesian metric that we use was first derived by [Cooper and Herskovits, 1992].", "startOffset": 53, "endOffset": 82}, {"referenceID": 5, "context": "[Spirtes et al., 1993] note this instability and remark that in practice step 2 is much more stable than step 3.", "startOffset": 0, "endOffset": 22}, {"referenceID": 5, "context": "Also, [Spirtes et al., 1993] have developed guidelines based on extensive experimental tests for which signif\u00ad icance levels to choose in the course of constraint-based causal discovery.", "startOffset": 6, "endOffset": 28}], "year": 2011, "abstractText": "We present a hybrid constraint\u00ad based/Bayesian algorithm for learning causal networks in the presence of sparse data. The algorithm searches the space of equivalence classes of models (essential graphs) using a heuristic based on conventional constraint\u00ad based techniques. Each essential graph is then converted into a directed acyclic graph and scored using a Bayesian scoring met\u00ad ric. Two variants of the algorithm are devel\u00ad oped and tested using data from randomly generated networks of sizes from 15 to 45 nodes with data sizes ranging from 250 to 2000 records. Both variations are compared to, and found to consistently outperform two variations of greedy search with restarts.", "creator": "pdftk 1.41 - www.pdftk.com"}}}