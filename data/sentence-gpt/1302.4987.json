{"id": "1302.4987", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Feb-2013", "title": "Path Planning under Time-Dependent Uncertainty", "abstract": "Standard algorithms for finding the shortest path in a graph require that the cost of a path be additive in edge costs, and typically assume that costs are deterministic. We consider the problem of uncertain edge costs, with potential probabilistic dependencies among the costs. Although these dependencies violate the standard dynamic-programming decomposition, we identify a weaker stochastic consistency condition that justifies a generalized dynamic-programming approach based on stochastic dominance. We present a revised path-planning algorithm and prove that it produces optimal paths under time-dependent uncertain costs. We test the algorithm by applying it to a model of stochastic bus networks, and present empirical performance results comparing it to some alternatives. Finally, we consider extensions of these concepts to a more general class of problems of heuristic search under uncertainty. These extensions provide a more efficient method for selecting and performing a particular network without being deterministic. This results in the conclusion that the algorithm is not an accurate approximation of the ideal path by which it is best suited for a particular problem.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Wed, 20 Feb 2013 15:24:00 GMT  (299kb)", "http://arxiv.org/abs/1302.4987v1", "Appears in Proceedings of the Eleventh Conference on Uncertainty in Artificial Intelligence (UAI1995)"]], "COMMENTS": "Appears in Proceedings of the Eleventh Conference on Uncertainty in Artificial Intelligence (UAI1995)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["michael p wellman", "matthew ford", "kenneth larson"], "accepted": false, "id": "1302.4987"}, "pdf": {"name": "1302.4987.pdf", "metadata": {"source": "CRF", "title": "Path Planning under Time-Dependent Uncertainty", "authors": ["Michael P. Wellman", "Matthew Ford"], "emails": ["}@eecs.umich.edu"], "sections": [{"heading": null, "text": "1 INTRODUCTION\nMost research on state-space search in Artificial In telligence and Operations Research assumes that the cost of a path is the sum of the cost of its edges, and that the cost of edges are known with certainty. The standard search algorithms (best-first (priority-first) search, A*) rely on these assumptions for their op timality guarantees. Nonlinear path costs, or equiv alently, probabilistic and dependent path costs, can defeat these algorithms, as we see below.\nIn this paper, we focus on the problem of proba bilistic and dependent path costs. We demonstrate that given a relatively weak form of stochastic consis tency (monotonicity) condition, slightly modified ver sions of the standard algorithms will produce optimal results. The modification is that instead of storing only the best path to each intermediate node, we now\nstore all admissible paths, where admissibility is based on stochastic dominance. Although this can increase complexity significantly, because we prune the domi nated paths, the typical search is far short of exhaus tive.\nIn the following section, we define the problem and present an example illustrating the difficulty with us ing the standard path-planning algorithms. Subse quent sections introduce the concept of stochastic con sistency, develop the modified algorithm, and estab lish its optimality properties. We then illustrate the algorithm by applying it to a stochastic bus-network model, and present some empirical results on randomly generated examples. Finally, we discuss extended ap plicability of the basic concepts introduced.\n2 PATH PLANNING UNDER TIME-DEPENDENT\nUNCERTAINTY\nConsider a transportation network with V nodes de noting locations and E edges denoting possible trans portation operations between the locations connected. If travel times are static (that is, the duration of a trip from a to b does not depend on departure time), then we can compute the fastest route from any given origin to all possible destinations using Dijkstra's well-known shortest-path algorithm, where the costs on each link are the travel times. This algorithm has a worst-case complexity of O(V2).1 The basic idea behind this algo rithm is dynamic programming-we start from the ori gin and systematically find the best paths to all other nodes, using the previously-found best paths. This procedure exploits the optimality principle, which dic tates that the best path from a to b through c must be comprised of the best paths from a to c and c to b.\nIf the travel times are stochastic but independent (that is, the distribution of travel times for one link does not depend on the actual travel time on others), then the route with the fastest expected total travel time can\n1 For sparse graphs, a simple variant of the algorithm has a running time of O(Elog V).\nPath Planning under Time-Dependent Uncertainty 533\nbe found similarly with Dijkstra's algorithm, where the costs on each link correspond to expected travel times.\nUnfortunately, this shortest-path algorithm is not universally valid when the travel times are time dependent. This sort of situation should be expected in realistic highway networks, where traffic patterns vary throughout the day, as well as in other transportation networks (e.g., bus routes), where transfer times de pend on fixed schedules. Buses and other scheduled services are time dependent because the time to get from a to b depends on which bus we catch and how long we have to wait, which depends on when we arrive at a. Time dependence can arise in both the determin istic and stochastic cases.\nFor an example of stochastic time dependence, sup pose we are planning a trip from Ann Arbor, Michigan, to Montreal, Quebec, and intend to take the Cana dian portion of the trip by train from Windsor, On tario. The transportation network for this example is depicted in Figure 1. It is noon, and we have two options for the journey from Ann Arbor to Windsor. First, we could take the bus. The bus is very reliable, and is guaranteed to arrive at the Windsor depot at exactly 13: 30. Our second option is to call Leadfoot Taxi Service, which has the potential to get us there earlier, but with some uncertainty. This is because the driver's aggressive highway tactics may reduce the travel time, but we run the risk of getting pulled over by the Detroit Autobahn Patrol, or delayed by suspi cious customs agents at the border. Specifically, the taxi's travel time is uniformly distributed between 70 and 120 minutes, that is, our arrival at Windsor is ,..... U[13: 10, 14: 00].\nGiven that our aim is to minimize the expected travel time to Montreal, which option should we take? The expected arrival of Leadfoot at Windsor is 13: 35, whereas the expected arrival of the bus is of course 13: 30. This suggests that the bus might be preferred. Suppose that the next eastbound train from Windsor departs at 13:45, and the subsequent one is scheduled for several hours later. By taking the bus, we are guar anteed to make the next train, but with Leadfoot, we will miss the train with probability 0. 3. In this case, the bus is indeed the better choice. But suppose the next train were scheduled to leave at 13: 25 instead. In this event, the bus would be guaranteed to miss the connection, whereas Leadfoot would offer us an oppor tunity to catch the train with probability 0. 3. Thus, we see that the best path from Ann Arbor to Windsor\ndepends on the schedule from Windsor to Montreal, and hence the optimality principle is violated. With out the decomposition that would be justified by this principle, it appears that we must in general explore all paths from origin to destination, an exponentially complex prospect.\nLet us return briefly to the deterministic case. For de terministic time dependence, it has been shown (Kauf man & Smith 1993) that the standard shortest-path algorithm is indeed sound as long as the network sat isfies the following reasonable consistency condition. Let s and t be departure times such that s $ t, and let Cij ( x) denote the time-dependent cost (travel time) of traveling from location i to location j at time x. The network is consistent iff for all i and j,\nS + Cij (s) $ t + Cij{t) . (1)\nThis consistency condition seems quite reasonable for time-dependent transportation networks. It merely says that although leaving later can perhaps reduce the duration of traversing an edge, it cannot decrease the ultimate arrival time. Given this condition, the principle of optimality underlying Dijkstra's algorithm applies, and the shortest-path problem can be solved relatively efficiently.\nA stochastic version of (1), with the times replaced by expectations, would similarly validate the use of the standard algorithm with expectations. That is, if E[s] $ E[t] implies that for all i and j,\nE[s + Cij (s) ] $ E[t + Cij{t) ] ,\nthen the optimality principle would be preserved. However, this version would not be reasonable, as demonstrated by the example above. There the bus has an earlier expected arrival time at Windsor, but depending on the train schedule may not lead to an earlier expected arrival time at Montreal. Hall (1986) presents some other simple examples where the condi tion above is violated, and consequently, where the ex pectation version of the shortest-path algorithm would produce suboptimal paths.\n3 STOCHASTIC CONSISTENCY\nAs an alternative, we propose the following condition. Let Cij ( x) denote the time-dependent travel time (a random variable) from location i to location j given departure at time x. Let us say the network is stochas tical l y consistent iff for all i, j, s $ t, and z,\nPr( s + Cij (s) $ z) 2: Pr(t + Cij (t) $ z) . (2) In other words, the probability of arriving by any given time z cannot be increased by leaving later. This ap pears to be the most natural (and most benign) gener alization of the deterministic consistency condition (1). It is clearly satisfied by our example above, as long as the later trains are not expected to pass the ear lier ones. And if they were (for example, an express\n534 Wellman, Ford, and Larson\ntrain), we could recover stochastic consistency by sim ply modifying our policy at Windsor station to wait for the best train. Indeed, as long as waiting at a location is allowed without penalty, we can impose stochastic consistency on any network. 2\nEquation (2) is based on the concept of stochastic dom inance (Stoyan 1983; Whitmore & Findlay 1978), a common way to extend an ordering relation to random variables. Taking arrival time at a node as a random variable, one arrival distribution dominates another iff its cumulative probability function is uniformly greater than or equal to that of the other. It can be shown (see, for example, Fishburn and Vickson (1978)) that this is equivalent to the statement that the dominant arrival time has a lower expectation than the other, for any monotone transformation of the arrival times.3 What this means is that the dominant arrival time is preferred regardless of the degree of time preference, whether it is linear in arrival time or even a deadline function (i.e., where all we care about is arrival by a given time), as long as utility is nonincreasing in du ration.\nThis condition justifies a modified version of the shortest-path algorithm, where instead of maintain ing the shortest path found to all intermediate nodes (in the uncertain case, a probability distribution of travel times), we maintain all undominated paths. If one path to a node dominates another (in the sense of stochastic ordering), then the stochastic consistency condition ensures that the latter cannot be part of an overall shortest path. This generalized use of the op timum principle can lead to substantial savings if the network contains many dominated paths, as we would expect.\n4 PRIORITY-FIRST SE ARCH WITH DOMIN ANCE PRUNING\nThe following algorithm is a generalized variant of priority-first search (PFS), in which we prune search by dominance rather than simple comparison of path costs. To accommodate this generalization, we must maintain a set of undominated paths with each node encountered, rather than a single best found so far. The algorithm, called PFS-Dominance, is described by the following elements:\nInput: a transportation network with uncertain time dependent edge costs, a nonincreasing utility function\n2For example, we can simply delete the local train from the network, or, treat the express train as going directly to the distal node (which is of course what it does). It is pos sible to conceive of situations where waiting is not allowed (e.g., communication networks with limited storage buffers at the nodes), but for most realistic transportation appli cations we can think of, the condition is quite reasonable.\n3When dealing with utilities, rather than costs, the directions of relationships in these statements would be reversed.\nu, an origin (optionally with a specified starting time), and a destination.\nOutput: a sequence of nodes, corresponding to a path of edges taken from the origin to the destination.\nData structures:\n\u2022 PQ, a priority queue. Items associate a node with a path and a path cost, with path costs prioritized by expectation under u.4\n\u2022 Closed list, a lookup table. Associates nodes with the undominated paths found thus far to that node.\nProcedure:\n1. Add origin to PQ with path cost 0. 2. Get highest-priority item from PQ. If this item\nhas lower expected utility than a known path to the destination, then terminate and return the best path (the one maximizing u) to the desti nation found so far.\n3. Add item to closed list. If there is already another path to that node with dominating priority, then do nothing and go to step 2. Otherwise, add the path and its cost to the closed-list associated with this node.\n4. Generate successors to this item. Construct new paths for each possible bus we could take from this node, and put the resulting items on PQ. Go to step 2.\nNote that this algorithm is just like basic PFS, except for the dominance criterion and termination condition.\nTheorem 1 If the network is stochastically consistent and u is nonincreasing, then P FS-Dominance will find the optimal path from the origin to the destination.\nProof : The algorithm explores the the space of paths exhaustively, except for two classes of paths: (i) paths pruned by stochastic dominance, and (ii) paths not yet explored when the termination condition becomes satisfied. To establish the result, we show that the algorithm selects the best path among those explored, and that the unexplored paths can never be optimal.\nLet us consider first the paths pruned by stochastic dominance. Suppose P1 and P2 are two paths to node i, and that P1 dominates P2. Let P1(:z:) denote the probability of arriving at node i by time :z: using path P1, and P2( :z:) the corresponding probability for path P2\u2022 Suppose we extend these paths by adding the edge from i to j. The probability that we will arrive at j by time z using the extension of path P is given by\nj Pr(:z: + Cij(:z:)::::; z)dP(:z:), (3) 4We could use any nonincreasing function of arrival time as priority (e.g., simple expectation, or earliest possible arrival time) for the exploration part of the algorithm, but using u simplifies the termination condition.\nPath Planning under Time-Dependent Uncertainty 535\nBecause the network is stochastically consistent (2) , we know that the inner probability expression is a non increasing function of x. And since P1 stochastically dominates P2, this implies that the value of (3) with P1 substituted for P exceeds the corresponding value with P2. Moreover, since this holds for any z, we have that the extended version of P1 stochastically domi nates that of P2. By repeating this argument, we see that for any extension of path P2, there is a corre sponding extension of P1 at least as good. Therefore, P2 can never be the prefix of a uniquely optimal path, and we can prune it safely.\nThe algorithm terminates when an existing path to the destination has higher expected utility than the path at the top of PQ. Since the network is stochasti cally consistent, extending paths on PQ can only lower their expected utility. And since the existing path has higher expected utility than the highest priority (ex pected utility) path on the PQ, it is preferred to all p_aths on the PQ, as well as all their possible exten Sions.\nWhen the above condition is met, we are left with a set of undominated paths to the destination. Since we have eliminated only inadmissible alternatives, picking the best one of these yields the optimal path. QED.\nThe above theorem establishes that stochastic dom inance is a valid pruning criterion for stochastically consistent networks. In fact, it can also be shown that for any more aggressive pruning criterion, we could construct a stochastically consistent network in which the discarded path's extension is arbitrarily bet ter than the one retained. In this sense, stochastic dominance is exactly the right pruning relation for this class of problems.5\n5 EMPIRIC AL STUDIES\n5.1 THE BUS NETWORK MODEL\nIn order to test the PFS-Dominance algorithm we adopted a simple model of scheduled bus service, b\ufffded on the model developed by Hall (1986) . Consider a di rected graph in which a single edge represents a series of buses traveling from one node to another. The travel time of a single bus in this model is assumed to follow the exponential (EXP) distribution, which defined by two parameters, M and A. The distribution for x, the bus's arrival time, is given by:\nEXP [M, .\\] = { ote-<x-M)/>. if X 2: M otherwise We can integrate this function from M to t to obtain\n5This does not definitively establish the optimality of t\ufffde pruning\n_ algorithm, because it is based on only a pair\nWise companson. By examining the set of admissible paths (e.g., pruning paths dominated by convex combinations of existing paths), we could perhaps generate fewer paths without sacrificing optimality.\nthe probability that the bus will arrive by time t:\nPr(x \ufffd t) = 1-e-(t-M)f>. (4)\nFrom these definitions, we see that M represents the earliest possible arrival time for a bus, and A the aver age time of arrival beyond M. That is, the expected arrival time for a bus is M + A. Note that there is no finite time by which the bus is guaranteed to arrive.\nGiven the arrival model above, a bus is described by a departure time, d, along with the (M, A) parameters. Clearly, we must stipulate that d \ufffd M, as the bus cannot arrive at the next stop before it leaves. An edge in the bus network is described as a sequence of buses, ((dt, Mt, At), . . . , (dk, Mk, .\\k)}. In order to make this graph stochastically consistent (2), we must ensure that fo_r a particular edge with multiple buses, each bus dommates all subsequent buses.\nLet A and B be buses with parameters (MA, AA) and (MB, AB), respectively. Recall that dominance holds iff the cumulative probability of arrival by t ( equa tion ( 4) ) for A is at least as great as for B, for all t. It is easy to show that A dominates B iff MA \ufffd MB and AA \ufffd AB (see (Stoyan 1983) ) . The former condition is perhaps obviously necessary; the earliest arrival time must be earlier for the dominating bus. The \u00b7latter condition is required because ( 4) is strictly decreasing in A, and in fact if AB < AA then there is some t for which bus B has higher cumulative arrival probability, regardless of the M values.\nWe can therefore ensure stochastic consistency for the bus network by requiring for each edge that d\u00b7 < d\u00b7 \u2022 \u2022\nI I J 1mphes M; \ufffd Mj and A; \ufffd Aj. Given this condition it is always optimal to take the next departing bus o\ufffd a given edge, regardless of the time of arrival at the bus stop.\nOne final issue is what to do if we arrive at a node after all the buses have left. This is always possible, due to the unboundedness of the exponential distribution. In our model, we assume that the traveler can choose to walk, which would \ufffdake time W- EXP[.M, \ufffd]. We fur ther assume that M is high enough so that one would \ufffdever choose the walking option over a bus and that A is sufficiently great to assure stochastic c\ufffdnsistency.\n5.2 PATH COSTS\nTo apply the priority-first search method, we need a way to calculate the distribution of travel times for sequences of buses. First, let us consider a two-edge path, from the origin to node a, and then from node a to node b. Because the departure time from the ori gin is fixed, we simply take the next bus departing for a. However, we cannot determine which of the buses from a to b will be taken, because the arrival time at a is uncertain. Therefore, in order to calculate the arrival time at b, we consider each bus we could take from a, weighted by the probability that we will take it. These weights are simply the probabilities that we\n536 Wellman, Ford, and Larson\nwill arrive at a during the intervals in which each bus is next. Therefore the path cost to b can be described by a list of exponentials, associated with scalar prob abilities. Because there is some finite probability that we will miss all of the buses, we must also include this remainder probability of incurring the walking cost W.\nNow consider an extension of this path to node c. We can extend the path cost in a similar manner, using the path cost to b to calculate the probability of taking each bus, and associating that probability with the parameters of the respective bus to c. The result (for any number of edges ) is a list of the same form-a sequence of triples (p, M, .X) , describing the ultimate bus in the path along with the probability of taking it.\nWe have noted above the criterion for stochastic dom inance of individual buses. But to apply the algorithm PFS-Dominance we need to evaluate stochastic dom inance of path costs, which are weighted sequences of buses. We illustrate this concept with an example. Let cl and c2 be two path costs.\nc1 ((0. 5, 5, 5), (0. 3, 15, 5 )) , c2 = ((0. 44, 10, 5 ), (0. 26, 20, 5 )) .\nThat is, C1 is distributed EXP[5, 5 ] with probability 0.5, and EXP[15, 5 ] with probability 0. 3. It has walk ing cost W with the remaining probability 0.2.\nAlthough C2 includes a bus that dominates one in cl, and vice versa, it is nevertheless the case that cl stochastically dominates C2\u2022 That is, for any time z, the probability that one arrives at the destination by time z is greater under path cost cl than under c2. This relationship becomes clearer if we lay out the two path costs on a number line. In Figure 2, C1 and C2 are arranged on top of each other, sorted by bus de parture time, with the width of each bus proportional to its probability.\nTo determine dominance of the overall costs, we test dominance of each vertical slice. Because this network is stochastically consistent, ordering the buses by de parture time is tantamount to ordering them by dom inance. Therefore, to evaluate dominance of C1 over c2, we can simply evaluate individual bus dominance at each probability threshold of cl. Given these techniques and definitions, we now have all the components of PFS-Dominance for the bus network model. We can extend the model slightly by\nalso allowing constant edge costs, to represent walking between a pair of nodes.\n5.3 COMPU TATIONAL RESULTS\nTo test the PFS-Dominance algorithm on this bus model, we randomly generated a series of networks of varying size. Each network is an n x n grid, with each edge assigned a sequence of buses defined by the three parameters (m, A, /): minimum trip time, av erage delay, and frequency. Frequency dictates the departure times for the various buses, and a bus de parting at time d (some multiple of f ) is distributed EXP[d + m, .X]. The grid structure we generate is il lustrated in Figure 3. In our tests, the origin is at the lower left, and the destination at the upper right.\nTo evaluate the algorithm, we counted the number of paths explored for grids of different sizes. As a base line, we note that the total number of paths from origin to destination in an n x n grid is6\n( 2n-2 ) . n-1 In Figure 4, we plot the path count for square grids of sizes up to 17. Each point represents one randomly generated network. We also attempted to run the PFS algorithm without dominance pruning, but were un able to solve problems of size greater than n = 8, due to space limitations. Note that we counted all paths generated, including intermediate ones, which explains how the non-dominance algorithm can generate more paths than the total number to the destination.\nThus we see that dominance pruning permits us to solve problems of considerably greater size than would be possible with exhaustive search. Of course, pruning\n6To see this, observe that every path has length exactly 2n - 2, defined by how we choose the n - 1 points at which we go \"up\".\nPath Planning under Time-Dependent Uncertainty 537\n10000 9000 I 8000 7000 (J i 6000\n... 5000 'li 4000 } 3000 I 2000\n1000 0 4 6 10 11 12 13 14 15 16 17\nSlzo (n)\nFigure 4: The number of paths generated by PFS Dominance for grids of varying size. The nonmono tonicity of this measure with n is likely attributable to our small sample size (one randomly generated net work for each value).\nby expectation (i.e., using the standard shortest-path algorithm) will generate a much smaller (polynomial) number of paths, but can produce suboptimal results. In general, we can trade off path cost for computa tional efficiency by adopting more strident pruning cri teria (i.e., weakening the dominance criterion) .\n6 ADAPTIVE PATH PLANNING\nIn the version of the stochastic bus problem presented above, the traveler constructs a complete path in ad vance, and executes it in an open-loop manner. How ever, in many realistic situations, the traveler may make decisions along the way about which bus to take, based on the uncertainty resolved along the way. In particular, the traveler typically knows what time it is when arriving at a bus stop, and this may influence the optimal edge to take from that node.\nIn closed-loop, or adaptive path planning, the planning algorithm produces a policy as output, rather than a single path. For any arrival time at any node, the policy specifies which outgoing edge to take. In other words, the product is a conditional plan. This plan should have a higher expected utility than the optimal open-loop plan, in general, but may be more complex to construct.\nTo compare the quality of conditional and uncondi tional plans, we implemented an adaptive path plan ning algorithm based on dynamic programming, and tested it on our bus-network model. The algorithm, Adaptive-Path, is described below.\nInput: an acyclic transportation network, a nonin creasing utility function u, and a destination.7\nOutput: a policy for each node, consisting of a par titioning of the set of arrival times from 0 to infinity,\n7The origin and starting time are not inputs because the algorithm computes optimal policies for all possible starting points.\nwhere each interval in the partition is associated with an outgoing edge.\nProcedure:\n1. Let all nodes have no policy, except the desti nation node, and nodes without outgoing edges, which are assigned degenerate policies.\n2. If all nodes have policies, terminate and return the policies for all nodes.\n3. Choose a node with no policy, whose successors all have policies.\n4. Partition the set of arrival times from 0 to infinity into a finite set of intervals, where each interval is started by a possible departure, and ends at the next departure opportunity.s\n5. For each interval, calculate the expected utility of each departure option (e.g., each bus that departs after the interval), and select the option with max imum expected utility. Because we have already computed policies for all of the successor nodes, calculating these expected utilities is straightfor ward. Associate the optimal choice and its ex pected utility with the interval.\n6. Go to step 2.\nBecause it is simply dynamic programming applied backward from the destination, this algorithm pro duces optimal policies as long as the network is acyclic. We applied this algorithm to a 10 x 10 bus network, us ing a deadline utility function. In the deadline model, utility is unity if we arrive before the deadline, and zero if we arrive afterward. Thus, expected utility is simply the probability of making the deadline. We ran the algorithm for deadlines between 150 and 250 min utes, at one-minute intervals. The results are plotted in Figure 5.\nFor comparison with the open-loop case, we ran the algorithms PFS-Dominance and the standard shortest-path algorithm (PFS with pruning based on expected value) on the same 101 problems.9 Deadlines near 150 are nearly impossible to meet for any algo rithm, and deadlines greater than 230 are very easy. In intermediate cases, we notice differences among the algorithms. As expected, the adaptive algorithm al ways performs best, and the expected-value algorithm the worst. PFS-Dominance outperforms the latter because it produces the optimal path, but this falls short of the optimal policy.\n8Here we exploit the fact that our buses leave nodes at fixed scheduled times. Some constraint of this sort is required in order to keep the policies finite.\n9 Actually, only Adaptive-Path required 101 runs. For PFS-Dominance we ran the search once, terminating when the top of PQ was stochastically dominated by an existing path. Then we used the various deadlines to se lect from the same admissible set. For the expected-value case, only one run was required. The deadline criterion is ignored and we use the same path every time.\nWe have also considered partially adaptive path plan ning, where uncertainty is resolved at some nodes but not others. The result is a hybrid algorithm, which uses the adaptive algorithm where allowed, and PFS Dominance elsewhere. In its open-loop planning, PFS-Dominance treats any adaptive node as a desti nation. If the network is acyclic, this hybrid algorithm produces the optimal policy using the available infor mation. As expected, with partial adaptivity the re sults are intermediate in value between the pure open and closed-loop cases.\n7 RELATED WORK\nAlthough there has been a great deal of previous work on deterministic versions (static and dynamic) of ve hicle routing problems, relatively little effort (until re cently) has been devoted to stochastic formulations of these tasks. This is true especially in the case of problems with multiple objectives (e.g., travel time, safety, expense, route familiarity), which have rarely been analyzed under stochastic assumptions (see (List e t al. 1991) for the few exceptions).\nPolychronopoulos (1992) presents a taxonomy of sto chastic shortest-path problems, in which the main dis tinction is what the uncertainty is about:\n1. which edges are available to traverse,\n2. which vertex results from traversing an edge, or\n3. the edge costs.\nFor example, Qi and Poole (1991) address the first kind of uncertainty, as does much work in theoret ical computer science. Our work addresses the last\ntype, which we believe to be the most prevalent form of uncertainty in path-planning problems. Indeed, de terminism in state transitions might be regarded as ne ce ssary for regarding our problem as path planning; otherwise we are not really choosing a path at all.\nA number of works have focused on simplifying distri butions over edge costs, so that Dijkstra's algorithm can then be applied. However this generally works for limited classes of utility functions, and produces ar bitrarily suboptimal results for others. For example, Kamburowski (1985) discusses reducing the distribu tion of a path to an \"optimality index\" using measures such as mean, variance, the probability that the path takes the minimum possible time, and the variance of the path from the minimum possible time. Eiger, et al. (1985) show how utility functions that are linear or exponential in edge costs validate the optimality principle, and thus Dijkstra's algorithm.\nThe approach taken here is a version of ge ne ralized dy namic programming (Carraway, Morin, & Moskowitz 1990) , which is essentially dynamic programming with a totally ordered criterion replaced with a partial order. We have cast generalized DP as PFS with dominance-pruning, which leads to a concise algo rithm description. The partial-order concept has been most often been applied to multicriteria! optimization. Stewart and White extend this to include a heuristic estimate of distance to a goal, in their multiobjective version of A* (Stewart & White 1991) .\nLikewise, Loui (1983) uses dominance to solve multi attribute, deterministic shortest path problems. Mir chandani and Soroush (1985) use mean/variance dom inance to solve the problem when the cost distribution of arcs can be uniquely described by the mean and variance (this possibility had also been noted by Loui).\nGiven all this prior work, the specific contribution of this paper is a formulation of the stochastic consis tency condition, and identiying stochastic dominance as the appropriate pruning criterion to apply in the PFS-Dominance algorithm. The idea of stochastic consistency is related to our previous work on qualita tive probabilistic influences (Wellman 1990) ; the con dition can be interpreted as saying that taking any edge is a positive influence on arrival time.\nThe idea of imposing a consistency condition was in spired by the work of Kaufman and Smith (1993) (noted above) in the deterministic context. Bard and Bennett (1991) use an approximation of stochastic dominance to reduce the search in stochastic networks; however, they apply the dominance condition in a preprocessing stage, rather than incrementally during search, and do not exploit the stochastic consistency condition. Moreover, their heuristic use of \"near dom inance\" can be made to yield arbitrarily suboptimal paths, depending on the utility function.\nFinally, as mentioned above, our bus-network model is based on the work of Hall (1986) . Hall notes the diffi-\nPath Planning under Time-Dependent Uncertainty 539\nculty of the time-dependent, stochastic shortest path problem, and proposes an algorithm that generates all paths in order of earliest possible arrival, termi nating when this earliest-possible measure exceeds the expected time of a path already found. We suspect that this algorithm is far less efficient on average than PFS-Dominance, but it appears that this algorithm has never been implemented, and we have not yet our selves carried out a systematic comparison.\n8 DISCUSSION AND EXTENSIONS\nAlthough our exposition has focused on particular transportation optimization problems, what we are re ally interested in is extending state-space search meth ods to dramatically broader problem classes. The as sumption of additive costs is typically not seriously examined by AI authors, probably due to the focus on deterministic problems, and because it was unclear how to relax the assumption anyway. In extending standard AI techniques to the uncertain case, we seek to do so in as broad a manner as possible. Thus, han dling special cases such as Gaussian distributions or completely independent edge costs is of only limited interest. In this work, we have identified a qualitative, widely applicable, monotonicity condition (stochastic consistency) that in turn justifies a generic pruning method (stochastic dominance), each of which can be employed regardless of the analytic form or represen tational formalism used to express uncertainty.\nIn ongoing work, we intend to extend these concepts to other search frameworks. For example, with a heuristic estimate of remaining distance, the PFS Dominance algorithm becomes a stochastic version of A* (analogous to multiobjective A* (Stewart & White 1991)). Indeed, we have implemented such an algo rithm, and have tested it on a stochastic version of the 8-puzzle, where the costs of moving tiles is uncertain and the utility function nonlinear. Results from this work will be reported at a later date.\nWe would also like to explore the possibility that some search problems formulated with uncertain state tran sitions could be reformulated as path planning prob lems (i.e., deterministic state transitions), with the uncertainty relegated to edge cost. If such a transi tion would preserve the stochastic consistency condi tion without unduly blowing up the state space, our methods could prove advantageous. Right now, we have only speculation.\nFinally, we also contemplate further refinements, such as developing space-limited versions of the algorithm using techniques from recent AI work.\nAcknowledgements\nThis work was supported in part by Grant F49620-941-0027 from the Air Force Office of Scientific Research, and an NSF National Young Investigator award. We\nwould also like to thank Robert Smith, Izak Duenyas, Chip White, and Runping Qi for helpful exchanges.\nReferences\nBard, J. F., and Bennett, J. E. 1991. Arc reduction and path preference in stochastic acyclic networks. Management Science 37:198-215.\nCarraway, R. L.; Morin, T. L.; and Moskowitz, H. 1990. Generalized dynamic programming for mul ticriteria optimization. European Journal of Opera tional Research 44:95-104. Eiger, A.; Mirchandani, P. B.; and Soroush, H. 1985. Path preferences and optimal paths in probabilistic networks. Transportation Science 19:75-84. Fishburn, P. C., and Vickson, R. G. 1978. Theoretical foundations of stochastic dominance. In Whitmore and Findlay (1978). Hall, R. W. 1986. The fastest path through a network with random time-dependent travel times. Trans portation Science 20(3):182-188. Kamburowski, J. 1985. A note on the stochastic shortest route problem. Operations Research 22:696- 698. Kaufman, D. E., and Smith, R. L. 1993. Fastest paths in time-dependent networks for intelligent vehicle highway systems application. IVHS Journal 1(1). List, G. F.; Mirchandani, P. B.; Turnquist, M. A.; and Zografos, K. G. 1991. Modeling and analysis for hazardous materials transportation: Risk analy sis, routing/scheduling, and facility location. Trans portation Science 25:100-114. Loui, R. P. 1983. Optimal paths in graphs with stochastic or multidimensional weights. Communica tions of the ACM 26:670-676. Mirchandani, P. B., and Soroush, H. 1985. Optimal paths in probabilistic networks: A case with tempo rary preferences. Transportation Science 12:365-381. Polychronopoulos, G. H. 1992. Stochastic and Dy nammic Shortest Distance Problems. Ph.D. Disser tation, Massachusetts Institute of Technology. Tech nical Report 199. Qi, R., and Poole, D. 1991. High level path plan ning with uncertainty. In Proceedings of the Seventh Conference on Uncertainty in Artificial Intelligence, 287-294. Stewart, B. S., and White, III, C. C. 1991. Multiob jective A*. Journal of the ACM 38:775-814. Stoyan, D. 1983. Comparison Methods for Queues and Other Stochastic Models. John Wiley and Sons. Wellman, M. P. 1990. Fundamental concepts of qual itative probabilistic networks. Artificial Intelligence 44:257-303. Whitmore, G. A., and Findlay, M. C., eds. 1978. Stochastic Dominance: An Approach to Decision Making Under Risk. Lexington, MA: D. C. Heath and Company."}], "references": [{"title": "Arc reduction and path preference in stochastic acyclic networks", "author": ["J.F. Bard", "J.E. Bennett"], "venue": "Management Science 37:198-215.", "citeRegEx": "Bard and Bennett,? 1991", "shortCiteRegEx": "Bard and Bennett", "year": 1991}, {"title": "Generalized dynamic programming for mul\u00ad ticriteria optimization", "author": ["R.L. Carraway", "T.L. Morin", "H. Moskowitz"], "venue": "European Journal of Opera\u00ad tional Research 44:95-104.", "citeRegEx": "Carraway et al\\.,? 1990", "shortCiteRegEx": "Carraway et al\\.", "year": 1990}, {"title": "Path preferences and optimal paths in probabilistic networks", "author": ["A. Eiger", "P.B. Mirchandani", "H. Soroush"], "venue": "Transportation Science 19:75-84.", "citeRegEx": "Eiger et al\\.,? 1985", "shortCiteRegEx": "Eiger et al\\.", "year": 1985}, {"title": "Theoretical foundations of stochastic dominance", "author": ["P.C. Fishburn", "R.G. Vickson"], "venue": "Whitmore and Findlay (1978).", "citeRegEx": "Fishburn and Vickson,? 1978", "shortCiteRegEx": "Fishburn and Vickson", "year": 1978}, {"title": "The fastest path through a network with random time-dependent travel times", "author": ["R.W. Hall"], "venue": "Trans\u00ad portation Science 20(3):182-188.", "citeRegEx": "Hall,? 1986", "shortCiteRegEx": "Hall", "year": 1986}, {"title": "A note on the stochastic shortest route problem", "author": ["J. Kamburowski"], "venue": "Operations Research 22:696698.", "citeRegEx": "Kamburowski,? 1985", "shortCiteRegEx": "Kamburowski", "year": 1985}, {"title": "Fastest paths in time-dependent networks for intelligent vehicle\u00ad highway systems application", "author": ["D.E. Kaufman", "R.L. Smith"], "venue": "IVHS Journal 1(1).", "citeRegEx": "Kaufman and Smith,? 1993", "shortCiteRegEx": "Kaufman and Smith", "year": 1993}, {"title": "Modeling and analysis for hazardous materials transportation: Risk analy\u00ad sis, routing/scheduling, and facility location", "author": ["G.F. List", "P.B. Mirchandani", "M.A. Turnquist", "K.G. Zografos"], "venue": "Trans\u00ad portation Science 25:100-114.", "citeRegEx": "List et al\\.,? 1991", "shortCiteRegEx": "List et al\\.", "year": 1991}, {"title": "Optimal paths in graphs with stochastic or multidimensional weights", "author": ["R.P. Loui"], "venue": "Communica\u00ad tions of the ACM 26:670-676.", "citeRegEx": "Loui,? 1983", "shortCiteRegEx": "Loui", "year": 1983}, {"title": "Optimal paths in probabilistic networks: A case with tempo\u00ad rary preferences", "author": ["P.B. Mirchandani", "H. Soroush"], "venue": "Transportation Science 12:365-381.", "citeRegEx": "Mirchandani and Soroush,? 1985", "shortCiteRegEx": "Mirchandani and Soroush", "year": 1985}, {"title": "Stochastic and Dy\u00ad nammic Shortest Distance Problems", "author": ["G.H. Polychronopoulos"], "venue": "Ph.D. Disser\u00ad tation, Massachusetts Institute of Technology. Tech\u00ad nical Report 199.", "citeRegEx": "Polychronopoulos,? 1992", "shortCiteRegEx": "Polychronopoulos", "year": 1992}, {"title": "High level path plan\u00ad ning with uncertainty", "author": ["R. Qi", "D. Poole"], "venue": "Proceedings of the Seventh Conference on Uncertainty in Artificial Intelligence, 287-294.", "citeRegEx": "Qi and Poole,? 1991", "shortCiteRegEx": "Qi and Poole", "year": 1991}, {"title": "Multiob\u00ad jective A", "author": ["B.S. Stewart", "III White", "C.C."], "venue": "Journal of the ACM 38:775-814.", "citeRegEx": "Stewart et al\\.,? 1991", "shortCiteRegEx": "Stewart et al\\.", "year": 1991}, {"title": "Comparison Methods for Queues and Other Stochastic Models", "author": ["D. Stoyan"], "venue": "John Wiley and Sons.", "citeRegEx": "Stoyan,? 1983", "shortCiteRegEx": "Stoyan", "year": 1983}, {"title": "Fundamental concepts of qual\u00ad itative probabilistic networks", "author": ["M.P. Wellman"], "venue": "Artificial Intelligence 44:257-303.", "citeRegEx": "Wellman,? 1990", "shortCiteRegEx": "Wellman", "year": 1990}, {"title": "Stochastic Dominance: An Approach to Decision Making Under Risk", "author": ["G.A. Whitmore", "M.C. Findlay"], "venue": null, "citeRegEx": "Whitmore and Findlay,? \\Q1978\\E", "shortCiteRegEx": "Whitmore and Findlay", "year": 1978}], "referenceMentions": [{"referenceID": 4, "context": "Hall (1986) presents some other simple examples where the condi\u00ad tion above is violated, and consequently, where the ex\u00ad pectation version of the shortest-path algorithm would produce suboptimal paths.", "startOffset": 0, "endOffset": 12}, {"referenceID": 13, "context": "Equation (2) is based on the concept of stochastic dom\u00ad inance (Stoyan 1983; Whitmore & Findlay 1978), a common way to extend an ordering relation to random variables.", "startOffset": 63, "endOffset": 101}, {"referenceID": 3, "context": "It can be shown (see, for example, Fishburn and Vickson (1978)) that this is equivalent to the statement that the dominant arrival time has a lower expectation than the other, for any monotone transformation of the arrival times.", "startOffset": 35, "endOffset": 63}, {"referenceID": 4, "context": "In order to test the PFS-Dominance algorithm we adopted a simple model of scheduled bus service, b\ufffded on the model developed by Hall (1986) .", "startOffset": 128, "endOffset": 140}, {"referenceID": 13, "context": "It is easy to show that A dominates B iff MA \ufffd MB and AA \ufffd AB (see (Stoyan 1983) ) .", "startOffset": 67, "endOffset": 80}, {"referenceID": 11, "context": "For example, Qi and Poole (1991) address the first kind of uncertainty, as does much work in theoret\u00ad ical computer science.", "startOffset": 13, "endOffset": 33}, {"referenceID": 5, "context": "For example, Kamburowski (1985) discusses reducing the distribu\u00ad tion of a path to an \"optimality index\" using measures such as mean, variance, the probability that the path takes the minimum possible time, and the variance of the path from the minimum possible time.", "startOffset": 13, "endOffset": 32}, {"referenceID": 5, "context": "For example, Kamburowski (1985) discusses reducing the distribu\u00ad tion of a path to an \"optimality index\" using measures such as mean, variance, the probability that the path takes the minimum possible time, and the variance of the path from the minimum possible time. Eiger, et al. (1985) show how utility functions that are linear or exponential in edge costs validate the optimality principle, and thus Dijkstra's algorithm.", "startOffset": 13, "endOffset": 289}, {"referenceID": 8, "context": "Likewise, Loui (1983) uses dominance to solve multi\u00ad attribute, deterministic shortest path problems.", "startOffset": 10, "endOffset": 22}, {"referenceID": 8, "context": "Likewise, Loui (1983) uses dominance to solve multi\u00ad attribute, deterministic shortest path problems. Mir\u00ad chandani and Soroush (1985) use mean/variance dom\u00ad inance to solve the problem when the cost distribution of arcs can be uniquely described by the mean and", "startOffset": 10, "endOffset": 135}, {"referenceID": 14, "context": "The idea of stochastic consistency is related to our previous work on qualita\u00ad tive probabilistic influences (Wellman 1990) ; the con\u00ad dition can be interpreted as saying that taking any edge is a positive influence on arrival time.", "startOffset": 109, "endOffset": 123}, {"referenceID": 5, "context": "The idea of imposing a consistency condition was in\u00ad spired by the work of Kaufman and Smith (1993) (noted above) in the deterministic context.", "startOffset": 75, "endOffset": 100}, {"referenceID": 0, "context": "Bard and Bennett (1991) use an approximation of stochastic dominance to reduce the search in stochastic networks;", "startOffset": 0, "endOffset": 24}, {"referenceID": 4, "context": "Finally, as mentioned above, our bus-network model is based on the work of Hall (1986) .", "startOffset": 75, "endOffset": 87}], "year": 2011, "abstractText": "Standard algorithms for finding the short\u00ad est path in a graph require that the cost of a path be additive in edge costs, and typically assume that costs are determinis\u00ad tic. We consider the problem of uncertain edge costs, with potential probabilistic de\u00ad pendencies among the costs. Although these dependencies violate the standard dynamic\u00ad programming decomposition, we identify a weaker stochastic consistency condition that justifies a generalized dynamic-programming approach based on stochastic dominance. We present a revised path-planning algorithm and prove that it produces optimal paths under time-dependent uncertain costs. We test the algorithm by applying it to a model of stochastic bus networks, and present em\u00ad pirical performance results comparing it to some alternatives. Finally, we consider ex\u00ad tensions of these concepts to a more general class of problems of heuristic search under uncertainty.", "creator": "pdftk 1.41 - www.pdftk.com"}}}