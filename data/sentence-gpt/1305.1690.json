{"id": "1305.1690", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-May-2013", "title": "Unsatisfiable Cores for Constraint Programming", "abstract": "Constraint Programming (CP) solvers typically tackle optimization problems by repeatedly finding solutions to a problem while placing tighter and tighter bounds on the solution cost. This approach is somewhat naive, especially for soft-constraint optimization problems in which the soft constraints are mostly satisfied. Unsatisfiable-core approaches to solving soft constraint problems in Boolean Satisfiability (e.g. MAXSAT) force all soft constraints to hold initially. When solving fails they return an unsatisfiable core, as a set of soft constraints that cannot hold simultaneously. Using this information the problem is relaxed to allow certain soft constraint(s) to be violated and solving continues. Since Lazy Clause Generation (LCG) solvers can also return unsatisfiable cores we can adapt the MAXSAT unsatisfiable core approach to CP. We implement the original MAXSAT unsatisfiable core solving algorithms WPM1, MSU3 in a state-of-the-art LCG solver and show that there exist problems which benefit from this hybrid approach.\n\n\n\nWe also show that there exists significant performance gains in the performance of two solvers with finite weights. While there is little support for this approach, it is extremely efficient in many tasks involving both linear and finite weights. Since this approach is not only possible in the linear and finite weights, it also does not take a significant amount of time to solve problems that require a particular combination of finite weights.\nThe problem in this post is a little less complex. However, the problems are still relatively straightforward to solve, and we are continuing to explore some features of this approach.\nThe following two problems solve a problem:\nA linear and finite weights\nA linear and finite weights\nA finite weights\nA linear and finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights\nA finite weights", "histories": [["v1", "Wed, 8 May 2013 01:50:05 GMT  (39kb,D)", "http://arxiv.org/abs/1305.1690v1", "Submitted to CP2013"]], "COMMENTS": "Submitted to CP2013", "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["nicholas downing", "thibaut feydy", "peter j stuckey"], "accepted": false, "id": "1305.1690"}, "pdf": {"name": "1305.1690.pdf", "metadata": {"source": "CRF", "title": "Unsatisfiable Cores for Constraint Programming", "authors": ["Nicholas Downing", "Peter J. Stuckey"], "emails": ["ndowning@csse.unimelb.edu.au", "tfeydy@csse.unimelb.edu.au", "pjs@csse.unimelb.edu.au"], "sections": [{"heading": "1 Introduction", "text": "In this paper we consider how to make Constraint Programming (CP) solvers better at tackling soft-constraint problems. CP solvers typically tackle optimization problems using branch-and-bound, and although soft-constraint problems can easily be mapped into a CP optimization framework, a distinguishing feature is that we expect most soft constraints to hold, at least on typical problems. CP solvers rely heavily on propagation to cut down the search space, but soft constraints have little propagation ability (because even though the constraints are likely to be hold, we do not know for sure), and search takes over.\nHence, existing CP solvers are nearly always terrible at soft constraint problems, a deficiency made worse by the fact that typical search strategies are unaware of where the good solutions lie, such that in some cases, thousands of solutions must be enumerated before the solver gets close to proving optimality. Indeed problems which are good for CP are almost always better with Mixed Integer Programming (MIP) once we soften the constraints. Here, we consider a different approach, which is to lift the unsatisfiable-core solving approaches from MAXSAT and integrate them into a CP solver.\n? NICTA is funded by the Australian Government as represented by the Department of Broadband, Communications and the Digital Economy and the Australian Research Council through the ICT Centre of Excellence program.\nar X\niv :1\n30 5.\n16 90\nv1 [\ncs .L\nO ]\n8 M\nay 2\n01 3\nBy aggressively assuming that soft constraints hold, including the intensional soft constraints characteristic of CP problems, we can either find a solution or an unsatisfiable core, as a set of soft constraints which cannot hold simultaneously. Given an unsatisfiable core we adjust our assumptions and proceed, until feasibility is reached. We show that this approach maps well to CP solvers (as long as they can derive an unsatisfiable core, which means in practice that the CP solver must use Lazy Clause Generation), and that there are problems can benefit enormously from such an approach."}, {"heading": "2 Lazy Clause Generation (LCG)", "text": "We give a brief description of propagation-based solving and LCG, for more details see [12]. We consider problems consisting of constraints C over integer variables x1, . . ., xn, each with a given finite domain Dorig(xi). A feasible solution is a valuation \u03b8 to the variables, which satisfies all constraints C, and lies in the domain Dorig = Dorig(x1)\u00d7 . . .\u00d7Dorig(xn), i.e. \u03b8(xi) \u2208 Dorig(xi).\nA propagation solver keeps a domain restriction D(xi) \u2286 Dorig(xi) for each variable and considers only solutions that lie within D = D(x1)\u00d7 . . . \u00d7D(xn). Solving interleaves propagation, which repeatedly applies propagators to remove unsupported values, and search which splits the domain of some variable and considers the resulting sub-problems. This continues until all variables are fixed (success) or failure is detected (backtrack and try another subproblem).\nLazy clause generation is implemented by introducing Boolean variables for each potential value of a CP variable, named Jxi = jK, and for each bound, Jxi \u2265 jK. Negating them gives Jxi 6= jK and Jxi \u2264 j \u2212 1K. Fixing such a literal modifies D(xi) to make the corresponding fact true, and vice versa. Hence the literals give an alternate Boolean representation of the domain, which supports reasoning. Lazy clause generation makes use of clauses to record nogoods, where a clause is a disjunction of (or essentially just a set of) literals.\nIn a lazy clause generation solver, the actions of propagators (and search) to change domains are recorded in an implication graph over the literals. Whenever a propagator changes a domain it must explain how the change occurred in terms of literals, that is, each literal l that is made true must be explained by a clause L\u2192 l where L is a conjunction of literals. When the propagator detects failure it must explain the failure as a nogood, L\u2192 false, with L a conjunction of literals which cannot hold simultaneously. Then L is used for conflict analysis [11] to generate a nogood that explains the failure."}, {"heading": "3 MAXSAT solving algorithms", "text": "Before discussing how we integrate MAXSAT solving methods into CP, we illustrate the original MAXSAT algorithms by means of a simple clausal example.\nExample 1. Consider Boolean variables x1, x2, x3 and clausal constraints\nC1 \u2261 x1, C2 \u2261 x2, C3 \u2261 x3, C4 \u2261 \u00acx1 \u2228 \u00acx2, C5 \u2261 \u00acx1 \u2228 \u00acx3.\nThen {C1, C2, C4} is an unsatisfiable core, because x1 = x2 = true violates C4. Similarly {C1, C3, C5} is an unsatisfiable core, because x1 = x3 = true violates C5. As a Boolean Satisfiability (SAT) problem this is infeasible. As a Maximum Satisfiability (MAXSAT) problem, we can allow some soft constraint(s) to be violated. For example if we relax C2 and C3 we find a solution x1 = true, x2 = x3 = false, with 2 violated constraints. Or if we relax C1 we find a better solution x1 = false, x2 = x3 = true, which has only one constraint violated. ut\nFor MAXSAT we minimize z = \u2211n j=1 violated(Cj) where n is the number of clauses and violated(Cj) = 0 if Cj holds or 1 if Cj is violated. A generalization is weighted partial MAXSAT where z = \u2211n j=1 wj violated(Cj) given wj a weight attached to each soft clause Cj , and hard clauses encoded by wj =\u221e."}, {"heading": "3.1 Branch-and-bound algorithm", "text": "For branch-and-bound we first convert the soft-constraint problem into a hardconstraint problem using violator variables vj . We rewrite Cj to Cj \u2228 vj , that is, the original clause Cj will now only be enforced if its violator vj is false.\nExample 2. Adding violator variables v1, . . . , v5 to the soft clauses C1, . . . , C5 of Example 1 yields the hard-constraint optimization problem\nminimize z = v1 + v2 + v3 + v4 + v5 such that C1 \u2261 x1 \u2228 v1, C2 \u2261 x2 \u2228 v2, C3 \u2261 x3 \u2228 v3, C4 \u2261 x1 \u2228 \u00acx2 \u2228 v4, C5 \u2261 \u00acx1 \u2228 \u00acx3 \u2228 v5.\nViolator variables which are false disappear, whereas violator variables which are true automatically satisfy their clause which hence plays no further role. ut\nAlgorithm 1 Branch-and-bound for weighted partial MAXSAT\ninputs: clauses C1, . . . , Cn with weights w1, . . . , wn over variables x1, . . . , xm outputs: valuation \u03b8opt minimizing zopt = sum of weights of violated constraints (\u03b8opt, zopt)\u2190 (none, none) add violator variables to constraints: Cj \u2190 Cj \u222a {vj} for j \u2208 1..n where wj <\u221e while SAT solver finds a valuation \u03b8 to the clause set do\n(\u03b8opt, zopt)\u2190 ( \u03b8, \u2211n j=1 wj\u03b8(vj) ) , where vj = 1 for true, 0 for false/nonexistent\nadd a decomposition of the constraint \u2211n\nj=1 wjvj < zopt to the clause set\nBranch-and-bound search is defined in Algorithm 1. We treat the problem as a hard-constraint satisfaction problem and simply find any solution \u03b8, calculate its objective value and add a new constraint to the problem enforcing that the next solution found should have an improved objective value. When this fails, the most recent solution found (if any) is optimal.\nThe weakness of branch and bound for soft-constraint problems is that soft constraints do not propagate, so we need to set violator variables false before the solver learns anything. In contrast branch-and-bound is very good for infeasible problems since it detects infeasibility in the first solve."}, {"heading": "3.2 Fu and Malik (Msu1 or Wpm1) algorithm", "text": "Fu and Malik [5] proposed the Msu1 algorithm for MAXSAT solving, later generalized by Anso\u0301tegui et al. [1] to Wpm1 for the weighted case. These algorithms iterate through a series of infeasible SAT problems until feasibility is reached. When the SAT solver fails, it returns an unsatisfiable core as a set of clauses that cannot hold simultaneously. Soft clauses in the set are relaxed using a fresh set of violator variables which are constrained so that at most one is true (atmost1 constraint), and solving continues. The first solution found is guaranteed to minimize the number of, or sum of weights of, violated clauses.\nAlgorithm 2 Wpm1 for weighted partial MAXSAT (Msu1 is a special case)\ninputs: clauses C1, . . . , Cn with weights w1, . . . , wn over variables x1, . . . , xm outputs: valuation \u03b8opt minimizing zopt = sum of weights of violated constraints zmin \u2190 0 repeat\nif SAT solver finds valuation \u03b8 to the clause set then (\u03b8opt, zopt)\u2190 (\u03b8, zmin); break otherwise, SAT solver returns an unsatisfiable core {Cu1 , . . . , Cuk} find minimum increase in z implied by the core: wmin \u2190 minkj=1 wuj if wmin =\u221e then\n(\u03b8opt, zopt)\u2190 (none,none); break zmin \u2190 zmin + wmin create a fresh set of violator variables we\u2019ll call vu1 , . . . , vuk for now for j \u2208 1..k where wuj <\u221e do\nif wuj > wmin then add a new copy of clause Cuj to the clause set with weight wuj \u2212 wmin\nrelax the original copy of the clause: (Cuj , wuj )\u2190 (Cuj \u222a {vuj}, wmin) add a decomposition of the atmost1 constraint \u2211k j=1 vuj \u2264 1 to the clause set delete all learnt clauses (or at least those invalidated by the above changes)\nWpm1 or equivalently Msu1 is defined in Algorithm 2. Solving the MAXSAT problem as SAT with soft clauses considered hard, we find either a solution or an unsatisfiable core. In the latter case, we create a new MAXSAT problem by encoding into it an allowance that we will not charge the first wmin units of the penalty for violating the clauses in the unsatisfiable core. If multiple clauses of the core are violated or if violated clause(s) have weight greater than wmin then the remaining violation will be charged as usual. The amount of penalty waived, accumulates in zmin. Eventually the MAXSAT problem is solved with cost 0 (i.e. all soft clauses are satisfied), then zmin is the optimal solution cost.\nNote the similarity of Wpm1 with destructive lower bound search where we set the objective z = 0, solve, if that fails increase it by one, re-solve and repeat; the first solution found is optimal. Wpm1 does better by restricting where the violation is allowed to occur for z = 1 and at each further stage in the search.\nExample 3. To the problem of Example 1 we now add an extra variable x4 and the extra clauses C6 \u2261 x4 and C7 \u2261 \u00acx3 \u2228 \u00acx4. The first unsatisfiable core is\n{C1, C3, C5}. Rewriting these clauses with violator variables v1, v3, v5 gives\nC1 \u2261 x1\u2228v1, C2 \u2261 x2, C3 \u2261 x3\u2228v3, C4 \u2261 \u00acx1\u2228\u00acx2, C5 \u2261 \u00acx1\u2228\u00acx3\u2228v5\nwhere v1 + v3 + v5 \u2264 1 which we decompose to the additional hard clauses\n\u00acv1 \u2228 \u00acv3, \u00acv1 \u2228 \u00acv5, \u00acv3 \u2228 \u00acv5.\nThen solving fails by deriving the empty clause as shown in Figure 1. The leaves of this tree show that the next core is {C1, C2, C3, C4, C6, C7}. Relaxing the problem again (including C1 and C3 that had already been relaxed) gives\nC1 \u2261 x1 \u2228 v1 \u2228 v\u20321, C2 \u2261 x2 \u2228 v\u20322, C3 \u2261 x3 \u2228 v3 \u2228 v\u20323, C4 \u2261 \u00acx1 \u2228 \u00acx2 \u2228 v\u20324, C5 \u2261 \u00acx1 \u2228 \u00acx3 \u2228 v5, C6 \u2261 x4 \u2228 v\u20326, C7 \u2261 \u00acx3 \u2228 \u00acx4 \u2228 v\u20327, v1 + v3 + v5 \u2264 1, v\u20321 + v \u2032 2 + v \u2032 3 + v \u2032 4 + v \u2032 6 + v \u2032 7 \u2264 1.\nThis has a solution with x1 = x2 = true, x3 = false, x4 = true, which violates original clauses C3 and C4, and is optimal with cost 2. ut"}, {"heading": "3.3 Marques-Silva & Planes (Msu3) algorithm", "text": "The difficulty with Wpm1 is that it is extremely aggressive, in the sense that the only soft-constraint violations allowed are those which are already known to exist. On many problems the aggressive approach pays off, but on other problems either too many unsatisfiable cores need to be enumerated before achieving feasibility, or else the problems get more and more difficult to prove infeasible (the increasing number of atmost1 constraints leads to an exponential number of relaxation-variable assignments, some of which may be symmetric).\nMarques-Silva & Planes [10] proposed Msu3 for solving problems which Wpm1 does not handle efficiently for the above reasons. Msu3 is defined in Algorithm 3. It is a hybrid unsatisfiable-core and branch-and-bound approach, which leverages some of the benefits of unsatisfiable-core solving, without being so aggressive. All soft constraints are considered hard initially, but each time an unsatisfiable core is found, all constraints in the set revert to soft, then the ordinary branch-and-bound process continues, to minimize their violations.\nMsu3 resembles binary search, we probe an initially overconstrained problem, if that fails we relax it, otherwise we constrain to find a better solution.\nExample 4. Rewriting Example 1 in the required format gives the same problem described in Example 2 plus the additional temporary clauses\nC \u20321 \u2261 \u00acv1, C \u20322 \u2261 \u00acv2, C \u20323 \u2261 \u00acv3, C \u20324 \u2261 \u00acv4, C \u20325 \u2261 \u00acv5.\nAlgorithm 3 Msu3 for weighted partial MAXSAT\ninputs: clauses C1, . . . , Cn with weights w1, . . . , wn over variables x1, . . . , xm outputs: valuation \u03b8opt minimizing zopt = sum of weights of violated constraints (\u03b8opt, zopt)\u2190 (none, none) for j \u2208 1..n where wj <\u221e do\nadd violator variable to constraint: Cj \u2190 Cj \u222a {vj} add temporary singleton clause: C\u2032j \u2190 {\u00acvj}\nrepeat if SAT solver finds a valuation \u03b8 to the clause set then (\u03b8opt, zopt)\u2190 ( \u03b8, \u2211n j=1 wj\u03b8(vj) ) , where vj is treated as in Algorithm 1\nadd a decomposition of the constraint \u2211n\nj=1 wjvj < zopt to the clause set\nelse SAT solver returns an unsatisfiable core {Cu1 , . . . , Cuk , C \u2032 u\u20321 , . . . , C\u2032u\u2032 ` }\nif the unsatisfiable core contains no temporary clauses, i.e. ` = 0 then break delete the identified temporary clauses C\u2032u\u20321 , . . . , C\u2032u\u2032 ` from the problem delete all learnt clauses (or at least those invalidated by the above change)\nSolving fails with unsatisfiable core {C1, C2, C4, C \u20321, C \u20322, C \u20324}. Removing C \u20321, C \u20322, C \u20324 from the problem yields the solution x1 = false, x2 = x3 = true, z = 1. Constraining z \u2264 0 propagates v1 = v2 = v4 = false and returns the unsatisfiable core {C1, C2, C4}, which has no temporaries, hence solving terminates. ut"}, {"heading": "4 Unsatisfiable cores for LCG", "text": "We can straightforwardly adapt the previously-described soft-constraint optimization approaches to CP. A soft intensional constraint Ij is represented as a half-reified constraint [4] of the form ij \u2192 Ij where ij is the indicator variable for the constraint Ij . If ij is true then the constraint holds, and if ij is false then the constraint has no effect.\nNote that a CP solver which has a propagator for the constraint Ij can straightforwardly be extended to provide a half-reified version of the constraint. Furthermore, the explanation algorithm for for Ij in an LCG solver can also easily be extended to explain the half-reified version.\nBy adding indicator variables we effectively map the soft constraint problem to a MAXSAT problem. If the soft intensional constraint Ij has a weight wj then we add Cj \u2261 ij as a soft, singleton, indicator clause with weight wj . Now we can apply Wpm1 or Msu3 effectively unchanged on the weighted indicator clauses. Soft constraints are enforced when their indicator clauses hold. Unsatisfiable cores enumerate conflicting indicator clauses and hence soft constraints.\nFor Wpm1 (Algorithm 2) these indicator clauses play an important role, as they will be progressively relaxed and won\u2019t necessarily be singletons by the end of solving. For branch-and-bound (Algorithm 1) and Msu3 (Algorithm 3), the indicator clauses disappear (leaving only temporary clauses in the Msu3\ncase), because instead of augmenting the indicator clauses with violators vj and creating a useless implication, we can simply equate ij with \u00acvj .\nTo make use of soft global constraints that return a number of violations, we can simply use literals encoding the integer violation count. For example the constraint soft alldifferent([x1, . . . , xn], z) enforces that z is a violation count, e.g. the number of pairs xi = xj , 1 \u2264 i < j \u2264 n. The usual LCG encoding of z creates bounds variables Jz \u2265 1K, Jz \u2265 2K, etc. We can make an indicator clause from each of these literals with weights equal to the marginal cost of each soft alldifferent violation, and hence map to a weighted soft clause problem."}, {"heading": "5 Experimental evaluation", "text": "To illustrate the potential usefulness of unsatisfiable core based optimization for CP, we consider a soft constraint variant of the Resource Constrained Project Scheduling Problems (RCPSP). Rather than minimize makespan, we constrain the makespan to be some percentage of the optimal makespan, and soften all the precedences. These problems are similar to RCPSP where the aim is to minimize the number of tardy jobs (that finish after their specified due date).\nTo create instances we take each RCPSP/max [2] instance Mi from the sets ubo20, sm j30, ubo50 in PSPLib [7], which are systematically generated by ProGen/max [13], and a proven lower bound li on its minimum makespan, usually the optimal makespan. We constrain all tasks in Mi to complete before time \u03b1li for each \u03b1 \u2208 {.7, .8, .9}. We maximize the number, or in a second experiment, the sum of randomly chosen weights 1..10, of precedences that hold.\nWe aim to show that Wpm1 and Msu3 can be advantageous over branch-andbound, hence we run an LCG solver with all three methods. A secondary aim is to show that LCG-based unsatisfiable core approaches can be superior to other solving technologies, so we provide best known decompositions to pseudo-Boolean (PB), MAXSAT and MIP, and evaluate them on (i) SAT-based PB solver MiniSAT+ 19/11/2012 [3], (ii) unsatisfiability-based MAXSAT solver MSUnCore 6/6/2011 [10], and (iii) MIP solvers CPLEX 12.4 and SCIP 3.0.1.\nFor our own solver we used CPX, a state-of-the-art LCG solver, but modified to implement the Wpm1 and Msu3 algorithms. CPX and SCIP both use learning and a built-in cumulative propagator. In these tests CPX uses activity-based search with phase saving and geometric restarts; the other solvers use their default searches which are similar, at least for the SAT-based solvers.\nWe use a cluster of Dell PowerEdge 1950 with 2 \u00d7 2.0 GHz Intel Quad Core Xeon E5405, 2\u00d76MB Cache, 16 GB RAM, 600s timeouts, and 1GB memory limit per core. Data files are available from http://www.csse.unimelb.edu.au/ ~pjs/unsat_core. We disregard infeasible instances, where branch-and-bound will always be superior; almost all soft-constraint problems of interest are feasible. We also disregard instances for which all solvers timed out.\nThe results shown in Table 1 compare our solver CPX using branch-andbound, Wpm1 (or Msu1 as a special case) and Msu3 (first three columns) with the SAT-based solvers MiniSAT+ using branch-and-bound and MSUnCore using Wpm1 or Msu3 (next three columns) and the MIP solvers (last two columns).\nThe numbers shown are geometric mean of solving time (s; using 600s as solving time for instances that timed out), followed by number of timeouts. The best solving time and (equal-)best number of timeouts are highlighted.\nThe results show that both Wpm1 and Msu3 can be highly advantageous over branch-and-bound when used with a learning CP solver. As the makespan constraint becomes more generous, the percentage of soft constraints that can hold increases, and the advantages of Wpm1 and Msu3 over branch-and-bound (in assuming that soft constraints hold), become more pronounced.\nAs the problems become larger, the huge numbers of variables created by the decompositions begin to overwhelm the SAT/MIP solvers, demonstrating the importance of using an LCG solving approach in addition to the unsatisfiabilitybased algorithms Wpm1 and Msu3 already available in the MSUnCore solver."}, {"heading": "6 Related work and conclusion", "text": "Specialized solvers [6,8] have been highly successful for soft-constraint CSPs in extensional form. These approaches are similar to Wpm1 as they both effectively shift part of the cost function as inconsistencies are detected. But many problems (such as the scheduling problem we investigate) are not feasible to encode using extensional constraints only. We are unaware of any other approaches to soft intensionally defined constraint problems beyond branch-and-bound, apart from PBO/WBO [3,9] which support intensionally-defined linear constraints only.\nIn this paper we demonstrate how to use unsatisfiable-core methods developed for MAXSAT to solve CP optimization problems containing soft constraints, by making use of the facility of LCG solvers to generate unsatisfiable\ncores. The results clearly show that CP solvers should incorporate unsatisfiable core optimization algorithms, since they can be dramatically superior to branchand-bound on appropriate problems."}], "references": [{"title": "Solving (Weighted) Partial MaxSAT through Satisfiability Testing", "author": ["C. Anstegui", "M. Bonet", "J. Levy"], "venue": "Kullmann, O. (ed.) Theory and Applications of Satisfiability Testing - SAT 2009, Lecture Notes in Computer Science, vol. 5584, pp. 427\u2013440. Springer Berlin Heidelberg", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2009}, {"title": "Scheduling project networks with resource constraints and time windows", "author": ["M. Bartusch", "R. M\u00f6hring", "F. Radermacher"], "venue": "Annals of Operations Research 16(1), 199\u2013 240", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1988}, {"title": "Translating Pseudo-Boolean Constraints into SAT", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "JSAT 2(1-4), 1\u201326", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2006}, {"title": "Half Reification and Flattening", "author": ["T. Feydy", "Z. Somogyi", "P. Stuckey"], "venue": "Lee, J. (ed.) Principles and Practice of Constraint Programming CP 2011, Lecture Notes in Computer Science, vol. 6876, pp. 286\u2013301. Springer Berlin / Heidelberg", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2011}, {"title": "On Solving the Partial MAX-SAT Problem", "author": ["Z. Fu", "S. Malik"], "venue": "Biere, A., Gomes, C.P. (eds.) Theory and Applications of Satisfiability Testing - SAT 2006, Lecture Notes in Computer Science, vol. 4121, pp. 252\u2013265. Springer Berlin Heidelberg", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2006}, {"title": "Existential arc consistency: Getting closer to full arc consistency in weighted CSPs", "author": ["S. de Givry", "F. Heras", "M. Zytnicki", "J. Larrosa"], "venue": "International Joint Conference on AI - IJCAI05. pp. 193\u2013198. AAAI Press", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2005}, {"title": "PSPLIB} - A project scheduling problem library: {OR} Software - {ORSEP} Operations Research Software Exchange Program", "author": ["R. Kolisch", "A. Sprecher"], "venue": "European Journal of Operational Research 96(1), 205\u2013216", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1997}, {"title": "In the quest of the best form of local consistency for Weighted CSP", "author": ["J. Larrosa", "T. Schiex"], "venue": "International Joint Conference on AI - IJCAI03. pp. 239\u2013244. AAAI Press", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2003}, {"title": "Algorithms for Weighted Boolean Optimization", "author": ["V. Manquinho", "J. Marques-Silva", "J. Planes"], "venue": "Kullmann, O. (ed.) Theory and Applications of Satisfiability Testing - SAT 2009, Lecture Notes in Computer Science, vol. 5584, pp. 495\u2013508. Springer Berlin Heidelberg", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2009}, {"title": "Algorithms for Maximum Satisfiability Using Unsatisfiable Cores", "author": ["J. Marques-Sila", "J. Planes"], "venue": "Gulati, K. (ed.) Advanced Techniques in Logic Synthesis, Optimizations and Applications, pp. 171\u2013182. Springer New York", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2011}, {"title": "Chaff: engineering an efficient SAT solver", "author": ["M.W. Moskewicz", "C.F. Madigan", "Y. Zhao", "L. Zhang", "S. Malik"], "venue": "Proceedings of the 38th annual Design Automation Conference. pp. 530\u2013535. DAC \u201901, ACM, New York, NY, USA", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2001}, {"title": "Propagation via lazy clause generation", "author": ["O. Ohrimenko", "P.J. Stuckey", "M. Codish"], "venue": "Constraints 14, 357\u2013391", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2009}, {"title": "ProGen/max: A New Problem Generator for Different ResourceConstrained Project Scheduling Problems with Minimal and Maximal Time Lags", "author": ["C. Schwindt"], "venue": "Tech. Rep. WIOR 449, Universit\u00e4t Karlsruhe", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1995}], "referenceMentions": [{"referenceID": 11, "context": "We give a brief description of propagation-based solving and LCG, for more details see [12].", "startOffset": 87, "endOffset": 91}, {"referenceID": 10, "context": "Then L is used for conflict analysis [11] to generate a nogood that explains the failure.", "startOffset": 37, "endOffset": 41}, {"referenceID": 4, "context": "Fu and Malik [5] proposed the Msu1 algorithm for MAXSAT solving, later generalized by Ans\u00f3tegui et al.", "startOffset": 13, "endOffset": 16}, {"referenceID": 0, "context": "[1] to Wpm1 for the weighted case.", "startOffset": 0, "endOffset": 3}, {"referenceID": 9, "context": "Marques-Silva & Planes [10] proposed Msu3 for solving problems which Wpm1 does not handle efficiently for the above reasons.", "startOffset": 23, "endOffset": 27}, {"referenceID": 3, "context": "A soft intensional constraint Ij is represented as a half-reified constraint [4] of the form ij \u2192 Ij where ij is the indicator variable for the constraint Ij .", "startOffset": 77, "endOffset": 80}, {"referenceID": 1, "context": "To create instances we take each RCPSP/max [2] instance Mi from the sets ubo20, sm j30, ubo50 in PSPLib [7], which are systematically generated by ProGen/max [13], and a proven lower bound li on its minimum makespan, usually the optimal makespan.", "startOffset": 43, "endOffset": 46}, {"referenceID": 6, "context": "To create instances we take each RCPSP/max [2] instance Mi from the sets ubo20, sm j30, ubo50 in PSPLib [7], which are systematically generated by ProGen/max [13], and a proven lower bound li on its minimum makespan, usually the optimal makespan.", "startOffset": 104, "endOffset": 107}, {"referenceID": 12, "context": "To create instances we take each RCPSP/max [2] instance Mi from the sets ubo20, sm j30, ubo50 in PSPLib [7], which are systematically generated by ProGen/max [13], and a proven lower bound li on its minimum makespan, usually the optimal makespan.", "startOffset": 158, "endOffset": 162}, {"referenceID": 2, "context": "A secondary aim is to show that LCG-based unsatisfiable core approaches can be superior to other solving technologies, so we provide best known decompositions to pseudo-Boolean (PB), MAXSAT and MIP, and evaluate them on (i) SAT-based PB solver MiniSAT+ 19/11/2012 [3], (ii) unsatisfiability-based MAXSAT solver MSUnCore 6/6/2011 [10], and (iii) MIP solvers CPLEX 12.", "startOffset": 264, "endOffset": 267}, {"referenceID": 9, "context": "A secondary aim is to show that LCG-based unsatisfiable core approaches can be superior to other solving technologies, so we provide best known decompositions to pseudo-Boolean (PB), MAXSAT and MIP, and evaluate them on (i) SAT-based PB solver MiniSAT+ 19/11/2012 [3], (ii) unsatisfiability-based MAXSAT solver MSUnCore 6/6/2011 [10], and (iii) MIP solvers CPLEX 12.", "startOffset": 329, "endOffset": 333}, {"referenceID": 5, "context": "Specialized solvers [6,8] have been highly successful for soft-constraint CSPs in extensional form.", "startOffset": 20, "endOffset": 25}, {"referenceID": 7, "context": "Specialized solvers [6,8] have been highly successful for soft-constraint CSPs in extensional form.", "startOffset": 20, "endOffset": 25}, {"referenceID": 2, "context": "We are unaware of any other approaches to soft intensionally defined constraint problems beyond branch-and-bound, apart from PBO/WBO [3,9] which support intensionally-defined linear constraints only.", "startOffset": 133, "endOffset": 138}, {"referenceID": 8, "context": "We are unaware of any other approaches to soft intensionally defined constraint problems beyond branch-and-bound, apart from PBO/WBO [3,9] which support intensionally-defined linear constraints only.", "startOffset": 133, "endOffset": 138}], "year": 2013, "abstractText": "Constraint Programming (CP) solvers typically tackle optimization problems by repeatedly finding solutions to a problem while placing tighter and tighter bounds on the solution cost. This approach is somewhat naive, especially for soft-constraint optimization problems in which the soft constraints are mostly satisfied. Unsatisfiable-core approaches to solving soft constraint problems in Boolean Satisfiability (e.g. MAXSAT) force all soft constraints to hold initially. When solving fails they return an unsatisfiable core, as a set of soft constraints that cannot hold simultaneously. Using this information the problem is relaxed to allow certain soft constraint(s) to be violated and solving continues. Since Lazy Clause Generation (LCG) solvers can also return unsatisfiable cores we can adapt the MAXSAT unsatisfiable core approach to CP. We implement the original MAXSAT unsatisfiable core solving algorithms Wpm1, Msu3 in a state-of-the-art LCG solver and show that there exist problems which benefit from this hybrid approach.", "creator": "LaTeX with hyperref package"}}}