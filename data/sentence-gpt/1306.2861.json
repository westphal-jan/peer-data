{"id": "1306.2861", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Jun-2013", "title": "Bayesian Inference and Learning in Gaussian Process State-Space Models with Particle MCMC", "abstract": "State-space models are successfully used in many areas of science, engineering and economics to model time series and dynamical systems. We present a fully Bayesian approach to inference and learning in nonlinear nonparametric state-space models. We place a Gaussian process prior over the transition dynamics, resulting in a flexible model able to capture complex dynamical phenomena. However, to enable efficient inference, we marginalize over the dynamics of the model and instead infer directly the joint smoothing distribution through the use of specially tailored Particle Markov Chain Monte Carlo samplers. Once a sample from the smoothing distribution is computed, the state transition predictive distribution can be formulated analytically. We make use of sparse Gaussian process models to greatly reduce the computational complexity of the approach. With a Gaussian process we expect to have a highly efficient linear model which is optimized for the model, the likelihood that the model will have the best probability of solving the nonlinear state-space model is significantly reduced. In this way we have an efficient finite-state model which is optimized for the model, a robust linear model with very low probability of solving the nonlinear state-space model.\n\n\n\n\nWe hope that all of our methods have a high number of features, including a few examples, including the best Bayesian model, and a complete list of the more than 250 features to learn.", "histories": [["v1", "Wed, 12 Jun 2013 15:20:28 GMT  (526kb,D)", "https://arxiv.org/abs/1306.2861v1", null], ["v2", "Tue, 17 Dec 2013 16:10:24 GMT  (531kb,D)", "http://arxiv.org/abs/1306.2861v2", null]], "reviews": [], "SUBJECTS": "stat.ML cs.LG cs.SY", "authors": ["roger frigola", "fredrik lindsten", "thomas b sch\u00f6n", "carl e rasmussen"], "accepted": true, "id": "1306.2861"}, "pdf": {"name": "1306.2861.pdf", "metadata": {"source": "CRF", "title": "Bayesian Inference and Learning in Gaussian Process State-Space Models with Particle MCMC", "authors": ["Roger Frigola", "Fredrik Lindsten", "Thomas B. Sch\u00f6n"], "emails": ["rf342@cam.ac.uk", "cer54@cam.ac.uk", "lindsten@isy.liu.se", "thomas.schon@it.uu.se"], "sections": [{"heading": "1 Introduction", "text": "State-space models (SSMs) constitute a popular and general class of models in the context of time series and dynamical systems. Their main feature is the presence of a latent variable, the state xt \u2208 X , Rnx , which condenses all aspects of the system that can have an impact on its future. A discrete-time SSM with nonlinear dynamics can be represented as\nxt+1 = f(xt,ut) + vt, (1a) yt = g(xt,ut) + et, (1b)\nwhere ut denotes a known external input, yt denotes the measurements, vt and et denote i.i.d. noises acting on the dynamics and the measurements, respectively. The function f encodes the dynamics and g describes the relationship between the observation and the unobserved states.\nWe are primarily concerned with the problem of learning general nonlinear SSMs. The aim is to find a model that can adaptively increase its complexity when more data is available. To this effect, we employ a Bayesian nonparametric model for the dynamics (1a). This provides a flexible model that is not constrained by any limiting assumptions caused by postulating a particular functional form. More specifically, we place a Gaussian process (GP) prior [1] over the unknown function f . The resulting model is a generalization of the standard parametric SSM. The functional form of the observation model g is assumed to be known, possibly parameterized by a finite dimensional parameter. This is often a natural assumption, for instance in engineering applications where g corresponds to a sensor model \u2013 we typically know what the sensors are measuring, at least up to some unknown parameters. Furthermore, using too flexible models for both f and g can result in problems of non-identifiability.\nWe adopt a fully Bayesian approach whereby we find a posterior distribution over all the latent entities of interest, namely the state transition function f , the hidden state trajectory x0:T , {xi}Ti=0\nar X\niv :1\n30 6.\n28 61\nv2 [\nst at\n.M L\n] 1\n7 D\nec 2\nand any hyper-parameter \u03b8 of the model. This is in contrast with existing approaches for using GPs to model SSMs, which tend to model the GP using a finite set of target points, in effect making the model parametric [2]. Inferring the distribution over the state trajectory p(x0:T | y0:T ,u0:T ) is an important problem in itself known as smoothing. We use a tailored particle Markov Chain Monte Carlo (PMCMC) algorithm [3] to efficiently sample from the smoothing distribution whilst marginalizing over the state transition function. This contrasts with conventional approaches to smoothing which require a fixed model of the transition dynamics. Once we have obtained an approximation of the smoothing distribution, with the dynamics of the model marginalized out, learning the function f is straightforward since its posterior is available in closed form given the state trajectory. Our only approximation is that of the sampling algorithm. We report very good mixing enabled by the use of recently developed PMCMC samplers [4] and the exact marginalization of the transition dynamics.\nThere is by now a rich literature on GP-based SSMs. For instance, Deisenroth et al. [5, 6] presented refined approximation methods for filtering and smoothing for already learned GP dynamics and measurement functions. In fact, the method proposed in the present paper provides a vital component needed for these inference methods, namely that of learning the GP model in the first place. Turner et al. [2] applied the EM algorithm to obtain a maximum likelihood estimate of parametric models which had the form of GPs where both inputs and outputs were parameters to be optimized. This type of approach can be traced back to [7] where Ghahramani and Roweis applied EM to learn models based on radial basis functions. Wang et al. [8] learn a SSM with GPs by finding a MAP estimate of the latent variables and hyper-parameters. They apply the learning in cases where the dimension of the observation vector is much higher than that of the latent state in what becomes a form of dynamic dimensionality reduction. This procedure would have the risk of overfitting in the common situation where the state-space is high-dimensional and there is significant uncertainty in the smoothing distribution."}, {"heading": "2 Gaussian Process State-Space Model", "text": "We describe the generative probabilistic model of the Gaussian process SSM (GP-SSM) represented in Figure 1b by\nf(xt) \u223c GP ( m\u03b8x(xt), k\u03b8x(xt,x \u2032 t) ) , (2a)\nxt+1 | ft \u223c N (xt+1 | ft,Q), (2b) yt | xt \u223c p(yt | xt,\u03b8y), (2c)\nand x0 \u223c p(x0), where we avoid notational clutter by omitting the conditioning on the known inputs ut. In addition, we put a prior p(\u03b8) over the various hyper-parameters \u03b8 = {\u03b8x,\u03b8y,Q}. Also, note that the measurement model (2c) and the prior on x0 can take any form since we do not rely on their properties for efficient inference.\nThe GP is fully described by its mean function and its covariance function. An interesting property of the GP-SSM is that any a priori insight into the dynamics of the system can be readily encoded in the mean function. This is useful, since it is often possible to capture the main properties of the dynamics, e.g. by using a simple parametric model or a model based on first principles. Such\nsimple models may be insufficient on their own, but useful together with the GP-SSM, as the GP is flexible enough to model complex departures from the mean function. If no specific prior model is available, the linear mean function m(xt) = xt is a good generic choice. Interestingly, the prior information encoded in this model will normally be more vague than the prior information encoded in parametric models. The measurement model (2c) implicitly contains the observation function g and the distribution of the i.i.d. measurement noise et."}, {"heading": "3 Inference over States and Hyper-parameters", "text": "Direct learning of the function f in (2a) from input/output data {u0:T\u22121,y0:T } is challenging since the states x0:T are not observed. Most (if not all) previous approaches attack this problem by reverting to a parametric representation of f which is learned alongside the states. We address this problem in a fundamentally different way by marginalizing out f , allowing us to respect the nonparametric nature of the model. A challenge with this approach is that marginalization of f will introduce dependencies across time for the state variables that lead to the loss of the Markovian structure of the state-process. However, recently developed inference methods, combining sequential Monte Carlo (SMC) and Markov chain Monte Carlo (MCMC) allow us to tackle this problem. We discuss marginalization of f in Section 3.1 and present the inference algorithms in Sections 3.2 and 3.3."}, {"heading": "3.1 Marginalizing out the State Transition Function", "text": "Targeting the joint posterior distribution of the hyper-parameters, the latent states and the latent function f is problematic due to the strong dependencies between x0:T and f . We therefore marginalize the dynamical function from the model, and instead target the distribution p(\u03b8,x0:T | y1:T ) (recall that conditioning on u0:T\u22121 is implicit). In the MCMC literature, this is referred to as collapsing [9]. Hence, we first need to find an expression for the marginal prior p(\u03b8,x0:T ) = p(x0:T | \u03b8)p(\u03b8). Focusing on p(x0:T | \u03b8) we note that, although this distribution is not Gaussian, it can be represented as a product of Gaussians. Omitting the dependence on \u03b8 in the notation, we obtain\np(x1:T | \u03b8,x0) = T\u220f\nt=1\np(xt | \u03b8,x0:t\u22121) = T\u220f\nt=1\nN ( xt | \u00b5t(x0:t\u22121),\u03a3t(x0:t\u22121) ) , (3a)\nwith\n\u00b5t(x0:t\u22121) = mt\u22121 + Kt\u22121,0:t\u22122K\u0303 \u22121 0:t\u22122 (x1:t\u22121 \u2212m0:t\u22122), (3b)\n\u03a3t(x0:t\u22121) = K\u0303t\u22121 \u2212Kt\u22121,0:t\u22122K\u0303\u221210:t\u22122K>t\u22121,0:t\u22122 (3c)\nfor t \u2265 2 and \u00b51(x0) = m0, \u03a31(x0) = K\u03030. Equation (3) follows from the fact that, once conditioned on x0:t\u22121, a one-step prediction for the state variable is a standard GP prediction. Here, we have defined the mean vector m0:t\u22121 , [ m(x0) > . . . m(xt\u22121) >]> and the (nxt) \u00d7 (nxt) positive definite matrix K0:t\u22121 with block entries [K0:t\u22121]i,j = k(xi\u22121,xj\u22121). We use two sets of indices, as in Kt\u22121,0:t\u22122, to refer to the off-diagonal blocks of K0:t\u22121. We also define K\u03030:t\u22121 = K0:t\u22121 + It \u2297Q. We can also express (3a) more succinctly as,\np(x1:t | \u03b8,x0) = |(2\u03c0)nxtK\u03030:t\u22121|\u2212 1 2 exp(\u22121\n2 (x1:t \u2212m0:t\u22121)>K\u0303\u221210:t\u22121(x1:t \u2212m0:t\u22121)). (4)\nThis expression looks very much like a multivariate Gaussian density function. However, we emphasize that this is not the case since both m0:t\u22121 and K\u03030:t\u22121 depend (nonlinearly) on the argument x1:t. In fact, (4) will typically be very far from Gaussian."}, {"heading": "3.2 Sequential Monte Carlo", "text": "With the prior (4) in place, we now turn to posterior inference and we start by considering the joint smoothing distribution p(x0:T | \u03b8,y0:T ). The sequential nature of the proposed model suggests the use of SMC. Though most well known for filtering in Markovian SSMs \u2013 see [10, 11] for an introduction \u2013 SMC is applicable also for non-Markovian latent variable models. We seek to approximate the sequence of distributions p(x0:t | \u03b8,y0:t), for t = 0, . . . , T . Let {xi0:t\u22121,wit\u22121}Ni=1\nbe a collection of weighted particles approximating p(x0:t\u22121 | \u03b8,y0:t\u22121) by the empirical distribution, p\u0302(x0:t\u22121 | \u03b8,y0:t\u22121) , \u2211N i=1 w i t\u22121\u03b4xi0:t\u22121(x0:t\u22121). Here, \u03b4z(x) is a point-mass located at z. To propagate this sample to time t, we introduce the auxiliary variables {ait}Ni=1, referred to as ancestor indices. The variable ait is the index of the ancestor particle at time t \u2212 1, of particle xit. Hence, xit is generated by first sampling a i t with P(ait = j) = w j t\u22121. Then, x i t is generated as,\nxit \u223c p(xt | \u03b8,x ait 0:t\u22121,y0:t), (5)\nfor i = 1, . . . , N . The particle trajectories are then augmented according to xi0:t = {x ait 0:t\u22121,x i t}. Sampling from the one-step predictive density is a simple (and sensible) choice, but we may also consider other proposal distributions. In the above formulation the resampling step is implicit and corresponds to sampling the ancestor indices (cf. the auxiliary particle filter, [12]). Finally, the particles are weighted according to the measurement model, wit \u221d p(yt | \u03b8,xit) for i = 1, . . . , N , where the weights are normalized to sum to 1."}, {"heading": "3.3 Particle Markov Chain Monte Carlo", "text": "There are two shortcomings of SMC: (i) it does not handle inference over hyper-parameters; (ii) despite the fact that the sampler targets the joint smoothing distribution, it does in general not provide an accurate approximation of the full joint distribution due to path degeneracy. That is, the successive resampling steps cause the particle diversity to be very low for time points t far from the final time instant T .\nTo address these issues, we propose to use a particle Markov chain Monte Carlo (PMCMC, [3, 13]) sampler. PMCMC relies on SMC to generate samples of the highly correlated state trajectory within an MCMC sampler. We employ a specific PMCMC sampler referred to as particle Gibbs with ancestor sampling (PGAS, [4]), given in Algorithm 1. PGAS uses Gibbs-like steps for the state trajectory x0:T and the hyper-parameters \u03b8, respectively. That is, we sample first x0:T given \u03b8, then \u03b8 given x0:T , etc. However, the full conditionals are not explicitly available. Instead, we draw samples from specially tailored Markov kernels, leaving these conditionals invariant. We address these steps in the subsequent sections.\nAlgorithm 1 Particle Gibbs with ancestor sampling (PGAS) 1. Set \u03b8[0] and x1:T [0] arbitrarily. 2. For ` \u2265 1 do\n(a) Draw \u03b8[`] conditionally on x0:T [`\u2212 1] and y0:T as discussed in Section 3.3.2. (b) Run CPF-AS (see [4]) targeting p(x0:T | \u03b8[`],y0:T ), conditionally on x0:T [`\u2212 1]. (c) Sample k with P(k = i) = wiT and set x1:T [`] = xk1:T .\n3. end"}, {"heading": "3.3.1 Sampling the State Trajectories", "text": "To sample the state trajectory, PGAS makes use of an SMC-like procedure referred to as a conditional particle filter with ancestor sampling (CPF-AS). This approach is particularly suitable for non-Markovian latent variable models, as it relies only on a forward recursion (see [4]). The difference between a standard particle filter (PF) and the CPF-AS is that, for the latter, one particle at each time step is specified a priori. Let these particles be denoted x\u03030:T = {x\u03030, . . . , x\u0303T }. We then sample according to (5) only for i = 1, . . . , N \u2212 1. The N th particle is set deterministically: xNt = x\u0303t. To be able to construct the N th particle trajectory, xNt has to be associated with an ancestor particle at time t\u2212 1. This is done by sampling a value for the corresponding ancestor index aNt . Following [4], the ancestor sampling probabilities are computed as\nw\u0303it\u22121|T \u221d w i t\u22121 p({xi0:t\u22121, x\u0303t:T },y0:T ) p(xi0:t\u22121,y0:t\u22121) \u221d wit\u22121 p({xi0:t\u22121, x\u0303t:T }) p(xi0:t\u22121) = wit\u22121p(x\u0303t:T | xi0:t\u22121). (6)\nwhere the ratio is between the unnormalized target densities up to time T and up to time t \u2212 1, respectively. The second proportionality follows from the mutual conditional independence of the observations, given the states. Here, {xi0:t\u22121, x\u0303t:T } refers to a path in XT+1 formed by concatenating\nthe two partial trajectories. The above expression can be computed by using the prior over state trajectories given by (4). The ancestor sampling weights {w\u0303it\u22121|T } N i=1 are then normalized to sum to 1 and the ancestor index aNt is sampled with P(aNt = j) = w j t\u22121|t.\nThe conditioning on a prespecified collection of particles implies an invariance property in CPF-AS, which is key to our development. More precisely, given x\u03030:T let x\u0303\u20320:T be generated as follows:\n1. Run CPF-AS from time t = 0 to time t = T , conditionally on x\u03030:T . 2. Set x\u0303\u20320:T to one of the resulting particle trajectories according to P(x\u0303\u20320:T = xi0:T ) = wiT .\nFor any N \u2265 2, this procedure defines an ergodic Markov kernel MN\u03b8 (x\u0303\u20320:T | x\u03030:T ) on XT+1, leaving the exact smoothing distribution p(x0:T | \u03b8,y0:T ) invariant [4]. Note that this invariance holds for any N \u2265 2, i.e. the number of particles that are used only affect the mixing rate of the kernel MN\u03b8 . However, it has been experienced in practice that the autocorrelation drops sharply as N increases [4, 14], and for many models a moderateN is enough to obtain a rapidly mixing kernel."}, {"heading": "3.3.2 Sampling the Hyper-parameters", "text": "Next, we consider sampling the hyper-parameters given a state trajectory and sequence of observations, i.e. from p(\u03b8 | x0:T ,y0:T ). In the following, we consider the common situation where there are distinct hyper-parameters for the likelihood p(y0:T | x0:T ,\u03b8y) and for the prior over trajectories p(x0:T | \u03b8x). If the prior over the hyper-parameters factorizes between those two groups we obtain p(\u03b8 | x0:T ,y0:T ) \u221d p(\u03b8y | x0:T ,y0:T ) p(\u03b8x | x0:T ). We can thus proceed to sample the two groups of hyper-parameters independently. Sampling \u03b8y will be straightforward in most cases, in particular if conjugate priors for the likelihood are used. Sampling \u03b8x will, nevertheless, be harder since the covariance function hyper-parameters enter the expression in a non-trivial way. However, we note that once the state trajectory is fixed, we are left with a problem analogous to Gaussian process regression where x0:T\u22121 are the inputs, x1:T are the outputs and Q is the likelihood covariance matrix. Given that the latent dynamics can be marginalized out analytically, sampling the hyper-parameters with slice sampling is straightforward [15]."}, {"heading": "4 A Sparse GP-SSM Construction and Implementation Details", "text": "A naive implementation of the CPF-AS algorithm will give rise toO(T 4) computational complexity, since at each time step t = 1, . . . , T , a matrix of size T \u00d7 T needs to be factorized. However, it is possible to update and reuse the factors from the previous time step, bringing the total computational complexity down to the familiar O(T 3). Furthermore, by introducing a sparse GP model, we can reduce the complexity to O(M2T ) where M T . In Section 4.1 we introduce the sparse GP model and in Section 4.2 we provide insight into the efficient implementation of both the vanilla GP and the sparse GP."}, {"heading": "4.1 FIC Prior over the State Trajectory", "text": "An important alternative to GP-SSM is given by exchanging the vanilla GP prior over f for a sparse counterpart. We do not consider the resulting model to be an approximation to GP-SSM, it is still a GP-SSM, but with a different prior over functions. As a result we expect it to sometimes outperform its non-sparse version in the same way as it happens with their regression siblings [16].\nMost sparse GP methods can be formulated in terms of a set of so called inducing variables [17]. These variables live in the space of the latent function and have a set I of corresponding inducing inputs. The assumption is that, conditionally on the inducing variables, the latent function values are mutually independent. Although the inducing variables are marginalized analytically \u2013 this is key for the model to remain nonparametric \u2013 the inducing inputs have to be chosen in such a way that they, informally speaking, cover the same region of the input space covered by the data. Crucially, in order to achieve computational gains, the number M of inducing variables is selected to be smaller than the original number of data points. In the following, we will use the fully independent conditional (FIC) sparse GP prior as defined in [17] due to its very good empirical performance [16].\nAs shown in [17], the FIC prior can be obtained by replacing the covariance function k(\u00b7, \u00b7) by, kFIC(xi,xj) = s(xi,xj) + \u03b4ij ( k(xi,xj)\u2212 s(xi,xj) ) , (7)\nwhere s(xi,xj) , k(xi, I)k(I, I)\u22121k(I,xj), \u03b4ij is Kronecker\u2019s delta and we use the convention whereby when k takes a set as one of its arguments it generates a matrix of covariances. Using the Woodbury matrix identity, we can express the one-step predictive density as in (3), with\n\u00b5FICt (x0:t\u22121) = mt\u22121 + Kt\u22121,IPKI,0:t\u22122\u039b \u22121 0:t\u22122 (x1:t\u22121 \u2212m0:t\u22122), (8a)\n\u03a3FICt (x0:t\u22121) = K\u0303t\u22121 \u2212 St\u22121 + Kt\u22121,IPKI,t\u22121, (8b)\nwhere P , (KI,I + KI,0:t\u22122\u039b\u221210:t\u22122K0:t\u22122,I) \u22121, \u039b0:t\u22122 , diag[K\u03030:t\u22122 \u2212 S0:t\u22122] and SA,B , KA,IK \u22121 I,IKI,B. Despite its apparent cumbersomeness, the computational complexity involved in computing the above mean and covariance is O(M2t), as opposed to O(t3) for (3). The same idea can be used to express (4) in a form which allows for efficient computation. Here diag refers to a block diagonalization if Q is not diagonal.\nWe do not address the problem of choosing the inducing inputs, but note that one option is to use greedy methods (e.g. [18]). The fast forward selection algorithm is appealing due to its very low computational complexity [18]. Moreover, its potential drawback of interference between hyperparameter learning and active set selection is not an issue in our case since hyper-parameters will be fixed for a given run of the particle filter."}, {"heading": "4.2 Implementation Details", "text": "As pointed out above, it is crucial to reuse computations across time to attain theO(T 3) orO(M2T ) computational complexity for the vanilla GP and the FIC prior, respectively. We start by discussing the vanilla GP and then briefly comment on the implementation aspects of FIC.\nThere are two costly operations of the CPF-AS algorithm: (i) sampling from the prior (5), requiring the computation of (3b) and (3c) and (ii) evaluating the ancestor sampling probabilities according to (6). Both of these operations can be carried out efficiently by keeping track of a Cholesky factorization of the matrix K\u0303({xi0:t\u22121, x\u0303t:T\u22121}) = LitLi>t , for each particle i = 1, . . . , N . Here, K\u0303({xi0:t\u22121, x\u0303t:T\u22121}) is a matrix defined analogously to K\u03030:T\u22121, but where the covariance function is evaluated for the concatenated state trajectory {xi0:t\u22121, x\u0303t:T\u22121}. From Lit, it is possible to identify sub-matrices corresponding to the Cholesky factors for the covariance matrix \u03a3t(xi0:t\u22121) as well as for the matrices needed to efficiently evaluate the ancestor sampling probabilities (6).\nIt remains to find an efficient update of the Cholesky factor to obtain Lit+1. As we move from time t to t + 1 in the algorithm, x\u0303t will be replaced by xit in the concatenated trajectory. Hence, the matrix K\u0303({xi0:t, x\u0303t+1:T\u22121}) can be obtained from K\u0303({xi0:t\u22121, x\u0303t:T\u22121}) by replacing nx rows and columns, corresponding to a rank 2nx update. It follows that we can compute Lit+1 by making nx successive rank one updates and downdates on Lit. In summary, all the operations at a specific time step can be done in O(T 2) computations, leading to a total computational complexity of O(T 3). For the FIC prior, a naive implementation will give rise to O(M2T 2) computational complexity. This can be reduced to O(M2T ) by keeping track of a factorization for the matrix P. However, to reach the O(M2T ) cost all intermediate operations scaling with T has to be avoided, requiring us to reuse not only the matrix factorizations, but also intermediate matrix-vector multiplications."}, {"heading": "5 Learning the Dynamics", "text": "Algorithm 1 gives us a tool to compute p(x0:T ,\u03b8 | y1:T ). We now discuss how this can be used to find an explicit model for f . The goal of learning the state transition dynamics is equivalent to that of obtaining a predictive distribution over f\u2217 = f(x\u2217), evaluated at an arbitrary test point x\u2217,\np(f\u2217 | x\u2217,y1:T ) = \u222b p(f\u2217 | x\u2217,x0:T ,\u03b8) p(x0:T ,\u03b8 | y1:T ) dx0:T d\u03b8. (9)\nUsing a sample-based approximation of p(x0:T ,\u03b8 | y1:T ), this integral can be approximated by\np(f\u2217 | x\u2217,y1:T ) \u2248 1\nL L\u2211 `=1 p(f\u2217 | x\u2217,x0:T [`],\u03b8[`]) = 1 L L\u2211 `=1 N (f\u2217 | \u00b5`(x\u2217),\u03a3`(x\u2217)), (10)\nwhere L is the number of samples and \u00b5`(x\u2217) and \u03a3`(x\u2217) follow the expressions for the predictive distribution in standard GP regression if x0:T\u22121[`] are treated as inputs, x1:T [`] are treated as outputs and Q is the likelihood covariance matrix. This mixture of Gaussians is an expressive representation of the predictive density which can, for instance, correctly take into account multimodality arising from ambiguity in the measurements. Although factorized covariance matrices can be pre-computed, the overall computational cost will increase linearly with L.The computational cost can be reduced by thinning the Markov chain using e.g. random sub-sampling or kernel herding [19].\nIn some situations it could be useful to obtain an approximation from the mixture of Gaussians consisting in a single GP representation. This is the case in applications such as control or real time filtering where the cost of evaluating the mixture of Gaussians can be prohibitive. In those cases one could opt for a pragmatic approach and learn the mapping x\u2217 7\u2192 f\u2217 from a cloud of points {x0:T [`], f0:T [`]}L`=1 using sparse GP regression. The latent function values f0:T [`] can be easily sampled from the normally distributed p(f0:T [`] | x0:T [`],\u03b8[`])."}, {"heading": "6 Experiments", "text": ""}, {"heading": "6.1 Learning a Nonlinear System Benchmark", "text": "Consider a system with dynamics given by xt+1 = axt + bxt/(1 + x2t ) + cut + vt, vt \u223c N (0, q) and observations given by yt = dx2t + et, et \u223c N (0, r), with parameters (a, b, c, d, q, r) = (0.5, 25, 8, 0.05, 10, 1) and a known input ut = cos(1.2(t + 1)). One of the difficulties of this system is that the smoothing density p(x0:T | y0:T ) is multimodal since no information about the sign of xt is available in the observations. The system is simulated for T = 200 time steps, using log-normal priors for the hyper-parameters, and the PGAS sampler is then run for 50 iterations using N = 20 particles. To illustrate the capability of the GP-SSM to make use of a parametric model as baseline, we use a mean function with the same parametric form as the true system, but parameters (a, b, c) = (0.3, 7.5, 0). This function, denoted model B, is manifestly different to the actual state transition (green vs. black surfaces in Figure 2), also demonstrating the flexibility of the GP-SSM.\nFigure 2 (left) shows the samples of x0:T (red). It is apparent that the distribution covers two alternative state trajectories at particular times (e.g. t = 10). In fact, it is always the case that this bi-modal distribution covers the two states of opposite signs that could have led to the same observation (cyan). In Figure 2 (right) we plot samples from the smoothing distribution, where each circle corresponds to (xt,ut,E[ft]). Although the parametric model used in the mean function of the GP (green) is clearly not representative of the true dynamics (black), the samples from the smoothing distribution accurately portray the underlying system. The smoothness prior embodied by the GP allows for accurate sampling from the smoothing distribution even when the parametric model of the dynamics fails to capture important features.\nTo measure the predictive capability of the learned transition dynamics, we generate a new dataset consisting of 10 000 time steps and present the RMSE between the predicted value of f(xt,ut) and the actual one. We compare the results from GP-SSM with the predictions obtained from two parametric models (one with the true model structure and one linear model) and two known models (the ground truth model and model B). We also report results for the sparse GP-SSM using an FIC prior with 40 inducing points. Table 1 summarizes the results, averaged over 10 independent training and test datasets. We also report the RMSE from the joint smoothing sample to the ground truth trajectory."}, {"heading": "6.2 Learning a Cart and Pole System", "text": "We apply our approach to learn a model of a cart and pole system used in reinforcement learning. The system consists of a cart, with a free-spinning pendulum, rolling on a horizontal track. An external force is applied to the cart. The system\u2019s dynamics can be described by four states and a set of nonlinear ordinary differential equations [20]. We learn a GP-SSM based on 100 observations of the state corrupted with Gaussian noise. Although the training set only explores a small region of the 4-dimensional state space, we can learn a model of the dynamics which can produce one step ahead predictions such the ones in Figure 3. We obtain a predictive distribution in the form of a mixture of Gaussians from which we display the first and second moments. Crucially, the learned model reports different amounts of uncertainty in different regions of the state-space. For instance, note the narrower error-bars on some states between t = 320 and t = 350. This is due to the model being more confident in its predictions in areas that are closer to the training data."}, {"heading": "7 Conclusions", "text": "We have shown an efficient way to perform fully Bayesian inference and learning in the GP-SSM. A key contribution is that our approach retains the full nonparametric expressivity of the model. This is made possible by marginalizing out the state transition function, which results in a nontrivial inference problem that we solve using a tailored PGAS sampler.\nA particular characteristic of our approach is that the latent states can be sampled from the smoothing distribution even when the state transition function is unknown. Assumptions about smoothness and parsimony of this function embodied by the GP prior suffice to obtain high-quality smoothing distributions. Once samples from the smoothing distribution are available, they can be used to describe a posterior over the state transition function. This contrasts with the conventional approach to inference in dynamical systems where smoothing is performed conditioned on a model of the state transition dynamics."}], "references": [{"title": "Gaussian Processes for Machine Learning", "author": ["C.E. Rasmussen", "C.K.I. Williams"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2006}, {"title": "State-space inference and learning with Gaussian processes,", "author": ["R. Turner", "M.P. Deisenroth", "C.E. Rasmussen"], "venue": "International Conference on Artificial Intelligence and Statistics, ser. W&CP,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Particle Markov chain Monte Carlo methods,", "author": ["C. Andrieu", "A. Doucet", "R. Holenstein"], "venue": "Journal of the Royal Statistical Society: Series B (Statistical Methodology),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "Ancestor sampling for particle Gibbs,", "author": ["F. Lindsten", "M. Jordan", "T.B. Sch\u00f6n"], "venue": "Advances in Neural Information Processing Systems 25,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "Robust filtering and smoothing with Gaussian processes,", "author": ["M. Deisenroth", "R. Turner", "M. Huber", "U. Hanebeck", "C. Rasmussen"], "venue": "IEEE Transactions on Automatic Control,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Expectation Propagation in Gaussian process dynamical systems,", "author": ["M. Deisenroth", "S. Mohamed"], "venue": "Advances in Neural Information Processing Systems 25,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "Learning nonlinear dynamical systems using an EM algorithm,", "author": ["Z. Ghahramani", "S. Roweis"], "venue": "Advances in Neural Information Processing Systems 11,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1999}, {"title": "Gaussian process dynamical models,", "author": ["J. Wang", "D. Fleet", "A. Hertzmann"], "venue": "Advances in Neural Information Processing Systems 18,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2006}, {"title": "A tutorial on particle filtering and smoothing: Fifteen years later,", "author": ["A. Doucet", "A. Johansen"], "venue": "The Oxford Handbook of Nonlinear Filtering,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2011}, {"title": "Particle filter theory and practice with positioning applications,", "author": ["F. Gustafsson"], "venue": "IEEE Aerospace and Electronic Systems Magazine,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2010}, {"title": "Filtering via simulation: Auxiliary particle filters,", "author": ["M.K. Pitt", "N. Shephard"], "venue": "Journal of the American Statistical Association,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1999}, {"title": "Backward simulation methods for Monte Carlo statistical inference,", "author": ["F. Lindsten", "T.B. Sch\u00f6n"], "venue": "Foundations and Trends in Machine Learning,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2013}, {"title": "On the use of backward simulation in the particle Gibbs sampler,", "author": ["F. Lindsten", "T.B. Sch\u00f6n"], "venue": "Proceedings of the 2012 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP),", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "Slice sampling for simulation based fitting of spatial data models,", "author": ["D.K. Agarwal", "A.E. Gelfand"], "venue": "Statistics and Computing,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2005}, {"title": "Sparse Gaussian processes using pseudo-inputs,", "author": ["E. Snelson", "Z. Ghahramani"], "venue": "Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2006}, {"title": "A unifying view of sparse approximate Gaussian process regression,", "author": ["J. Qui\u00f1onero-Candela", "C.E. Rasmussen"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2005}, {"title": "Fast Forward Selection to Speed Up Sparse Gaussian Process Regression,", "author": ["M. Seeger", "C. Williams", "N. Lawrence"], "venue": "Artificial Intelligence and Statistics", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2003}, {"title": "Super-samples from kernel herding,", "author": ["Y. Chen", "M. Welling", "A. Smola"], "venue": "Proceedings of the 26th Conference on Uncertainty in Artificial Intelligence (UAI", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2010}, {"title": "Efficient reinforcement learning using Gaussian processes,", "author": ["M. Deisenroth"], "venue": "Ph.D. dissertation, Karlsruher Institut fu\u0308r Technologie,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": "More specifically, we place a Gaussian process (GP) prior [1] over the unknown function f .", "startOffset": 58, "endOffset": 61}, {"referenceID": 1, "context": "This is in contrast with existing approaches for using GPs to model SSMs, which tend to model the GP using a finite set of target points, in effect making the model parametric [2].", "startOffset": 176, "endOffset": 179}, {"referenceID": 2, "context": "We use a tailored particle Markov Chain Monte Carlo (PMCMC) algorithm [3] to efficiently sample from the smoothing distribution whilst marginalizing over the state transition function.", "startOffset": 70, "endOffset": 73}, {"referenceID": 3, "context": "We report very good mixing enabled by the use of recently developed PMCMC samplers [4] and the exact marginalization of the transition dynamics.", "startOffset": 83, "endOffset": 86}, {"referenceID": 4, "context": "[5, 6] presented refined approximation methods for filtering and smoothing for already learned GP dynamics and measurement functions.", "startOffset": 0, "endOffset": 6}, {"referenceID": 5, "context": "[5, 6] presented refined approximation methods for filtering and smoothing for already learned GP dynamics and measurement functions.", "startOffset": 0, "endOffset": 6}, {"referenceID": 1, "context": "[2] applied the EM algorithm to obtain a maximum likelihood estimate of parametric models which had the form of GPs where both inputs and outputs were parameters to be optimized.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "This type of approach can be traced back to [7] where Ghahramani and Roweis applied EM to learn models based on radial basis functions.", "startOffset": 44, "endOffset": 47}, {"referenceID": 7, "context": "[8] learn a SSM with GPs by finding a MAP estimate of the latent variables and hyper-parameters.", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "Though most well known for filtering in Markovian SSMs \u2013 see [10, 11] for an introduction \u2013 SMC is applicable also for non-Markovian latent variable models.", "startOffset": 61, "endOffset": 69}, {"referenceID": 9, "context": "Though most well known for filtering in Markovian SSMs \u2013 see [10, 11] for an introduction \u2013 SMC is applicable also for non-Markovian latent variable models.", "startOffset": 61, "endOffset": 69}, {"referenceID": 10, "context": "the auxiliary particle filter, [12]).", "startOffset": 31, "endOffset": 35}, {"referenceID": 2, "context": "To address these issues, we propose to use a particle Markov chain Monte Carlo (PMCMC, [3, 13]) sampler.", "startOffset": 87, "endOffset": 94}, {"referenceID": 11, "context": "To address these issues, we propose to use a particle Markov chain Monte Carlo (PMCMC, [3, 13]) sampler.", "startOffset": 87, "endOffset": 94}, {"referenceID": 3, "context": "We employ a specific PMCMC sampler referred to as particle Gibbs with ancestor sampling (PGAS, [4]), given in Algorithm 1.", "startOffset": 95, "endOffset": 98}, {"referenceID": 3, "context": "(b) Run CPF-AS (see [4]) targeting p(x0:T | \u03b8[`],y0:T ), conditionally on x0:T [`\u2212 1].", "startOffset": 20, "endOffset": 23}, {"referenceID": 3, "context": "This approach is particularly suitable for non-Markovian latent variable models, as it relies only on a forward recursion (see [4]).", "startOffset": 127, "endOffset": 130}, {"referenceID": 3, "context": "Following [4], the ancestor sampling probabilities are computed as", "startOffset": 10, "endOffset": 13}, {"referenceID": 3, "context": "For any N \u2265 2, this procedure defines an ergodic Markov kernel M \u03b8 (x\u03030:T | x\u03030:T ) on X, leaving the exact smoothing distribution p(x0:T | \u03b8,y0:T ) invariant [4].", "startOffset": 159, "endOffset": 162}, {"referenceID": 3, "context": "However, it has been experienced in practice that the autocorrelation drops sharply as N increases [4, 14], and for many models a moderateN is enough to obtain a rapidly mixing kernel.", "startOffset": 99, "endOffset": 106}, {"referenceID": 12, "context": "However, it has been experienced in practice that the autocorrelation drops sharply as N increases [4, 14], and for many models a moderateN is enough to obtain a rapidly mixing kernel.", "startOffset": 99, "endOffset": 106}, {"referenceID": 13, "context": "Given that the latent dynamics can be marginalized out analytically, sampling the hyper-parameters with slice sampling is straightforward [15].", "startOffset": 138, "endOffset": 142}, {"referenceID": 14, "context": "As a result we expect it to sometimes outperform its non-sparse version in the same way as it happens with their regression siblings [16].", "startOffset": 133, "endOffset": 137}, {"referenceID": 15, "context": "Most sparse GP methods can be formulated in terms of a set of so called inducing variables [17].", "startOffset": 91, "endOffset": 95}, {"referenceID": 15, "context": "In the following, we will use the fully independent conditional (FIC) sparse GP prior as defined in [17] due to its very good empirical performance [16].", "startOffset": 100, "endOffset": 104}, {"referenceID": 14, "context": "In the following, we will use the fully independent conditional (FIC) sparse GP prior as defined in [17] due to its very good empirical performance [16].", "startOffset": 148, "endOffset": 152}, {"referenceID": 15, "context": "As shown in [17], the FIC prior can be obtained by replacing the covariance function k(\u00b7, \u00b7) by, k(xi,xj) = s(xi,xj) + \u03b4ij ( k(xi,xj)\u2212 s(xi,xj) ) , (7)", "startOffset": 12, "endOffset": 16}, {"referenceID": 16, "context": "[18]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "The fast forward selection algorithm is appealing due to its very low computational complexity [18].", "startOffset": 95, "endOffset": 99}, {"referenceID": 17, "context": "random sub-sampling or kernel herding [19].", "startOffset": 38, "endOffset": 42}, {"referenceID": 18, "context": "The system\u2019s dynamics can be described by four states and a set of nonlinear ordinary differential equations [20].", "startOffset": 109, "endOffset": 113}], "year": 2013, "abstractText": "State-space models are successfully used in many areas of science, engineering and economics to model time series and dynamical systems. We present a fully Bayesian approach to inference and learning (i.e. state estimation and system identification) in nonlinear nonparametric state-space models. We place a Gaussian process prior over the state transition dynamics, resulting in a flexible model able to capture complex dynamical phenomena. To enable efficient inference, we marginalize over the transition dynamics function and infer directly the joint smoothing distribution using specially tailored Particle Markov Chain Monte Carlo samplers. Once a sample from the smoothing distribution is computed, the state transition predictive distribution can be formulated analytically. Our approach preserves the full nonparametric expressivity of the model and can make use of sparse Gaussian processes to greatly reduce computational complexity.", "creator": "LaTeX with hyperref package"}}}