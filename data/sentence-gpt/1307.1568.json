{"id": "1307.1568", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-Jul-2013", "title": "Using MathML to Represent Units of Measurement for Improved Ontology Alignment", "abstract": "Ontologies provide a formal description of concepts and their relationships in a knowledge domain. The goal of ontology alignment is to identify semantically matching concepts and relationships across independently developed ontologies that purport to describe the same knowledge. In order to handle the widest possible class of ontologies, many alignment algorithms rely on terminological and structural meth- ods, but the often fuzzy nature of concepts complicates the matching process, and a more general approach is preferred.\n\n\n\n\nThe most common examples of alignment algorithms are to use the standard syntax (e.g. the word \u200f\u200f , which means \u202c \u201c). The more precise usage of the metallistic and ontological syntax is not clear, but a more general usage of the standard syntax is still necessary for distinguishing a particular ontological or ontological language.\nThe best use for alignment algorithms for alignment algorithms is the use of an example which involves a particular syntactic and ontological system. The alignment algorithm should be interpreted as a type of structure where a semantic system is defined by a particular semantic system.\nIn the case of the class \"Algorithm-A\" which employs \u201cAlgorithm-B\u201d (see Figure 1), the alignment algorithm must be used to identify a particular set of attributes with respect to the corresponding category. The alignment algorithm should be used to identify the corresponding syntactic, ontological, and other attributes for each attribute.\nThis approach should also avoid the general use of the \u202e\u2013\u2212\u202d or \u202e\u2013\u2013\u2212\u202d syntactic properties.\nThe most common alignment algorithm is to use the same set of attributes for each attribute. This approach must be used to identify a particular set of attributes with respect to the corresponding categories.\nA particular alignment algorithm should be used to identify a particular set of attributes with respect to the corresponding category. The alignment algorithm should be used to identify a particular set of attributes with respect to the corresponding categories.\nThe best use for alignment algorithms is the use of an example which involves a particular syntactic and ontological system. The alignment algorithm should be used to identify a particular set of attributes with respect to the corresponding categories.\nA specific alignment algorithm should be used to identify a specific set of attributes with respect to the corresponding categories. The alignment algorithm should be used to identify a particular set of attributes with respect to the corresponding categories. The alignment algorithm should be used to identify a particular set of attributes with respect to the corresponding categories.\nThe most common alignment algorithm is to", "histories": [["v1", "Fri, 5 Jul 2013 10:05:34 GMT  (263kb)", "http://arxiv.org/abs/1307.1568v1", "Conferences on Intelligent Computer Mathematics (CICM 2013), Bath, England"]], "COMMENTS": "Conferences on Intelligent Computer Mathematics (CICM 2013), Bath, England", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["chau do", "eric j pauwels"], "accepted": false, "id": "1307.1568"}, "pdf": {"name": "1307.1568.pdf", "metadata": {"source": "CRF", "title": "Using MathML to Represent Units of Measurement for Improved Ontology Alignment", "authors": ["Eric J. Pauwels"], "emails": ["eric.pauwels}@cwi.nl"], "sections": [{"heading": null, "text": "Keywords: MathML, ontology matching, ontology alignment, units of measurement"}, {"heading": "1 Introduction and Motivation", "text": "An increasing number of scientific and technological areas, including multiagents, bioinformatics and the semantic web, are making use of ontologies to better represent their knowledge domain. An ontology describes a domain of interest by presenting a vocabulary as well as definitions of the terms used in the vocabulary [1]. With independent individuals and groups developing their own ontologies, we are faced with the problem of heterogeneous representation across ontologies. This is quite problematic when it becomes necessary to amalgamate or link data between various sources. Over the years, several solutions have been proposed for matching ontologies (i.e. identify corresponding or matching terms in different ontologies). Most take a generic approach in order to deal with the widest possible variety of ontologies from various domains. Consequently, these\n\u22c6 The final publication is available at http://link.springer.com.\nmatchers do not take advantage of domain specific attributes which could lead to better matches.\nOne area of application where a domain-agnostic approach might be suboptimal concerns units of measurement. Units are particularly interesting since, unlike more common concepts which often carry multiple meanings, they have a clear definition due to an inherent mathematical structure. For example, person can be interpreted as either equivalent to human or as a subclass of human, both alignments are acceptable depending on the application. Contrast this to units of measurement, where there are well established rules, such that a unit defined in one ontology should only be matched to equivalent units in another ontology. Aligning units of measurement ontologies is of particular importance to areas requiring data sharing or conversion between units, just to name a few. For example, independent sensor networks may use different ontologies to represent their measurements and a mapping is required when their data is consolidated.\nThe aim of this paper is to propose a semi-automatic solution for the problem of aligning units of measurement ontologies. The solution we propose hinges on the use of MathML to extend the semantic description of the units that already exist in the ontology. To understand the underlying idea of our approach, consider two ontologies, \u21261 and \u21262, containing definitions for units of measurement. Assuming that these definitions contain both the dimensions and conversion values of the units, it cannot be assumed that the way this information is represented and encoded is similar. For example, assume in ontology \u21261 the unit degree Celsius is denoted as degreeCelsius respectively, whereas in ontology \u21262 it is known as ThermoUnit C. More often than not, these two ontologies will have been developed by groups working independently. To circumvent this problem, we propose to insert for each unit in an ontology a MathML-encoded description using the information available in the ontology. In the degree Celsius example, a straightforward search based on a generic lexical comparison would find it difficult to spot this match. But if both ontologies contain the MathML-encoded relationship between Celsius and the base unit Kelvin, i.e. Tc = Tk \u2212 273.15, then matching of these terms across the ontologies becomes trivial.\nOur choice for using MathML in these encodings is motivated by the fact that this is already a widely accepted language for describing mathematical equations. Furthermore, due to its standardization, it is possible to write a generic program that can process different equations. Although in general, matching ontologies is difficult, the problem is made more manageable through the creation of a richer set of structures and relationships, which encode the precise mathematical relationships that exist between measurement units. This allows for more exact matchings as well as non-obvious ones (e.g. NewtonPerMeter and joule per square metre).\nThis paper focuses on units defined in RDFS/OWL ontologies. For ontologies, even the ones within the confines of RDFS and OWL, there is no explicit requirement to represent the mathematical structure of units. The definitions vary from extremely minimal (for example only the names of the units) to more complex (some ontologies define dimensions, conversions, alternative symbols\nand so on). Even in the latter case, there is no clear and consistent manner for representing the mathematical structure. For example, to denote division between two units, one ontology defines the properties numerator and denominator, while another merely defines the property hasOperand and indicates the division by the inversion of the unit (e.g. perKilogram). To make matters worse, the labeling of concepts in ontologies are different (some examples encountered were: cubic metre vs. meterCubed, Vector L1 vs. SI length dimension exponent for the length dimension). Additionally, the structure and organization of concepts within ontologies can vary. Due to these variations, there is no logical link between units in different ontologies.\nThe semantic web is composed of layers, each building upon the previous one. The ontology vocabulary level defines the terms and relationships for concepts. The layer above this, the logic level, builds upon this foundation using reasoners to provide inferences. Reasoners lack the arithmetic skills to spot the correspondence between a statement such as \u201c1 week hasDuration 7 days\u201d in one ontology and the concatenation of statements \u201c1 day hasDuration 86400 secs\u201d and \u201c1 week hasDuration 604800 secs\u201d in another. Providing mathematical descriptions of these facts (encoded in MathML which is amenable to manipulations by software such as Mathematica) creates new opportunities for more effective identification.\nThe rest of the paper is structured as follows: first, in section 2 we describe some background information and related work. This is followed by a description of our proposed solution in section 3. Section 4, outlines the application of our approach to real life ontologies. Finally, section 5 outlines the results, followed by the conclusions and future work in section 6."}, {"heading": "2 Background and Related Work", "text": "While this paper focuses on units represented within RDFS/OWL ontologies, units have been considered and represented in other related areas. OpenMath for example, deals with units using content dictionaries (CD). In [2] and [3], the representation of units in CDs is proposed and discussed. A question of whether or not RDF is a more suitable means of representation is also raised, but not definitively dealt with by the authors. [4] builds upon these CDs and suggests changes for better conformance to the SI standard. As will be explained later on, our method of inserting MathML into existing ontologies utilizes the information available within them. The information is extracted and MathML is automatically generated without any recognition of the unit that is being processed. Therefore we do not attempt to match the units to ones available in CDs.\nAn alignment between ontologies is described as a set of correspondences. Correspondences represent a relationship (equivalence, subclass, disjointness, etc.) between the entities of the two ontologies being aligned. Entities here can refer to classes, properties, individuals and so on. Consider two ontologies, \u21261 and \u21262, to be aligned, where \u21261 has the class dog, denoted here as \u21261:dog and\n\u21262 has the classes animal and canine, denoted as \u21262:animal and \u21262:canine. The correspondences that make up the alignment would be:\n1. \u21261:dog is a subclass of \u21262:animal 2. \u21261:dog is equivalent to \u21262:canine\nThe matching process can have additional inputs, such as a partial initial alignment, weights and thresholds (varies between matching algorithms) and sources for common knowledge (e.g. WordNet [5], UMLS [6]). Depending on the matching algorithm, the correspondence may have a level of confidence (normally between 0 and 1) associated with it [7].\nOver the years, many ontology matching systems have been proposed, some of which are summarized in [1], [8], [9]. Although the approach taken by each system is different, most are based on terminological and structural methods. Terminological methods refers to the use of lexical comparisons of the labels, comments and/or other annotations of each entity. Structural comparisons look at for example similarities in the hierarchy of the ontology structure or the corresponding neighbors of matched entities. Semantic methods can also be applied for verification of matches or building on initial matches. These methods include looking at the range of values, cardinality, the transitivity and symmetry of the entities [7].\nIn an effort to find a common basis on which to compare ontology matching systems, the Ontology Alignment Evaluation Initiative (OAEI [10]) was formed. The initiative is composed of several tracks dealing with ontologies from different areas such as biomedical, conferences and anatomy. In particular the benchmark tests (see [11] for more information) have generated quantitative results, allowing for the comparison between different matching systems and tracking of advancements in these systems. It is clear that many of the systems are generic matchers, while some have more inclination towards specific areas (e.g. ASMOV towards the biomedical area). This is further indicated in the test case ontologies, which deal mainly with concepts from various domains.\nOur proposed matching allows for an n to m cardinality (n entities in one ontology can align to m entities in the second ontology), which is an important improvement over a simple lexical comparison. Matching systems commonly only produce a one to one alignment [7]. Ones that provide an n to m alignment are AgreementMaker, COMA++ and ASMOV.\nAgreementMaker comprises of a first layer, which produces similarity matrices based on concepts between the two provided ontologies. The features of the concepts (e.g. label, comments, annotations) are compared using syntactic and lexical comparisons. The results are fed into the second layer, which uses conceptual or structural methods to improve the results. Descendant\u2019s Similarity Inheritance (DSI) and Sibling\u2019s Similarity Contribution (SSC) are examples of the algorithms used for this stage. The last layer outputs a final matching or alignment by combining two or more matchers from the previous layers. For the first two layers, several matchers are available for comparison [12].\nSimilarly, COMA++ is based on an iterative process constructed of three main steps. The first is component identification, where relevant components\nfor matching are determined. The second step is the matcher execution which applies multiple matchers in order to compute component similarities. The final step is similarity combination, where the correspondences between components is found from the calculated similarities [13].\nASMOV initially applies a pre-processing step to the two input ontologies. This step is terminological based and uses either an external thesaurus or string comparison method. The next step comprises of the structural methods, the first being a calculation of relation or hierarchical similarity. The second part comprises of internal or restriction similarity based on the established restrictions between classes and properties. Finally, an extensional similarity is found using data instances in the ontology [14].\nClearly these matchers are generically designed to deal with a wide variety of ontologies. Our approach focuses on the area of units of measurement and applies MathML to better represent the semantics of the units in order to increase correct equivalence alignments.\nThe incorporation of MathML into ontologies has been done before. For example, the Systems Biology Ontology (SBO) from the European Bioinformatics Institute [15] incorporates subject related equations using MathML. However, other than representing equations, the MathML is not being used further. More interesting usages of MathML can be seen in the Systems Biology of Microorganisms initiative, which has the aim of producing computerized mathematical models representing the dynamic molecular process of a micro-organism [16]. Within this initiative, SysMO Seek is an\u201cassets catalogue\u201d representing information such as models, experiments, and data. MathML is used to represent the mathematical models [17].\nAnother notable area where MathML and ontologies merge, is the OntoModel tool. Utilized for pharmaceutical product development, OntoModel allows for model creation, manipulation, querying and searching. It uses a combination of Content MathML and OWL. The former is used to represent the mathematical equations and the latter is used for the ontologies that represent the mathematical models and other related information [18].\nWhile SysMo Seek and OntoModel use MathML to represent mathematical equations/models, the MathML is not used to align ontologies as we propose here."}, {"heading": "3 Proposed Alignment Approach", "text": "The main contention of this paper is that MathML could play a pivotal role in this effort of efficient ontology alignment. MathML comes in two distinct flavors: Presentation MathML simply specifies what formulas should look like, while the aim of Content MathML is to encode the exact semantics of mathematical expressions. With the introduction of version 3.0, MathML has come closer in-line with OpenMath, particularly with respect to content dictionaries [19]. Obviously, we are interested in Content MathML and in the remainder of this paper we will use MathML as shorthand for Content MathML version 3.0.\nOntologies describing units of measurement routinely provide information on their fundamental physical dimensions (e.g. length, mass, time, etc. ) and their conversion value (e.g. Celsius = 5/9(Fahrenheit - 32)). As can be seen, the conversion value includes both a multiplier and an offset. A special case is dimensionless units, which are sometimes represented by an additional \u201cdimension\u201d, and must be handled in a slightly different manner (more on this later). Usually, it is understood that the conversions convert back to the SI base and/or derived units. For example watt can be described as either joule per second (W = J/s) or kilogram-meter-squared per second-cubed (W = kg \u00b7 m2/s3). This wording in itself illustrates another problem with lexical representation. Does the term \u201csquared\u201d correspond to the meter only or to kilogram-meter? Although to a person, this is clear, to a machine different interpretations are possible, unless a convention has already been established. The introduction of MathML resolves this ambiguity. To determine if two units are equivalent, their dimensions and conversion values must match.\nThe basic idea underpinning our approach is very straightforward. Suppose we have two ontologies, say \u21261 which relates concepts \u03b1, \u03b2, \u03b3, . . . (we will denote this as \u21261 = {\u03b1, \u03b2, \u03b3, . . .}) and a second ontology \u21262 = {\u03be, \u03b7, \u03b6, . . .}. In addition, let us assume that we are given as prior knowledge that concept \u03b1 in \u21261 is equivalent to concept \u03be (denoted here as \u21261 : \u03b1 \u2194 \u21262 : \u03be), as well as \u21261 : \u03b2 \u2194 \u21262 : \u03b7. If we now are able to determine (e.g. using MathML) that \u03b3 = \u03b1/\u03b2 but also that \u03b6 = \u03be/\u03b7 then we can confidently infer the previously unknown match \u21261 : \u03b3 \u2194 \u21262 : \u03b6.\nSpecifically, our matcher requires three inputs: \u2126\u20321, \u2126 \u2032 2 and initial matchings (prior knowledge). \u2126\u20321 and \u2126 \u2032 2 are ontologies, which have been modified by inserting MathML into them as an alternate representation of their units. In order to align the units in the two ontologies, the MathML representation is compared, with the initial matchings acting as a common reference point. Our matcher will provide correspondences with only equivalence relations. A more detailed explanation is given in the following sections."}, {"heading": "3.1 Minimum Prior Knowledge", "text": "As pointed out earlier, all units can be described both in SI base units and in derived units which, in turn, can be re-expressed in base units. Therefore, it can be concluded that all units can be described using the seven SI base units: meter, kilogram, kelvin, second, candela, ampere and mole. In view of this, in order to match two unit ontologies, only the SI base units need to be matched as a starting point. This is used as the minimum prior knowledge that is required to process the MathML labels. An assumption that our general approach makes is that the unit conversion values are always relative to the SI base units and this is reflected in the MathML comparison. When two units of measurement ontologies are to be matched, the user must supply an initial matching between the base units found in each ontology."}, {"heading": "3.2 Generation and Insertion of MathML", "text": "The difficulty in generating MathML and inserting it into an existing ontology depends on the structure of the ontology and what information is available in it. For instance, different ontologies will use different properties to indicate that one unit is the quotient of two other units. However, given a well structured ontology that is consistent in how it represents the units, a repeatable pattern will emerge as to where the necessary information for the MathML encoding can be found. A program can be written to automatically process these patterns and recast them in MathML code. We inserted MathML into three exisiting ontologies, one of which will be looked at in more detail later on. But in the end, the effort of inserting MathML will vary from ontology to ontology.\nFor the purposes of our approach, the MathML need only be inserted such that it is accessible by our matcher. Consequently, there is no need for integrating the MathML with the existing ontology such that any external semantic reasoner (e.g. Fact++, Pellet) can process it. With this in mind, we take a similar approach as OntoModel, which generates the MathML for an equation and incorporates it as a string into a hasML property [18]. While a specific data property could be developed, it did not make sense to create a new ontology just for one data property for the MathML code. Consequently, it was decided to incorporate the MathML into the ontologies as an rdfs:comment with an rdf:parseType=\"Literal\" to indicate that markup language is being used (see [20] and [21])."}, {"heading": "3.3 Processing of MathML", "text": "Once the ontologies have MathML inserted to represent their units, the matching process can begin to determine equivalent units. Before a comparison of the MathML code can be done, it must first be extracted from each ontology for every unit. By this, we mean that a search is done in each ontology for an rdfs:comment containing MathML code. The assumption by the matcher is that each unit that will be considered and aligned already has the corresponding MathML inserted. Expanding upon this initial matching of units (i.e. aligning entities without corresponding MathML) is a topic of future work (section 6). As noted previously, some units describe their conversions not in SI base units, but derived units. Both approaches are commonly used. Therefore, when comparing the MathML code, it must be checked to see if the units can be broken down further if they are not expressed in terms of base units.\nAs an example, consider we are given by the user the initial base units matchings of:\n\u21261:meter \u2194 \u21262:metre \u21261:kilogram \u2194 \u21262:kilogram \u21261:second \u2194 \u21262:second time \u21261:kelvin \u2194 \u21262:kelvin\n\u21261:candela \u2194 \u21262:candela \u21261:ampere \u2194 \u21262:ampere\n\u21261:mole \u2194 \u21262:mole\nWhere \u21261 is the first ontology and \u21262 is the second ontology. We encounter the units \u21261:joule and \u21262:newton metre during the matching process. They are given by the following equations (represented in MathML):\n\u21261 : joule = (\u21261 : newton)\u00d7 (\u21261 : meter) (1)\n\u21262 : newton metre = (\u21262 : metre) 2 \u00d7 (\u21262 : kilogram) (\u21262 : second time)2\n(2)\nHere eq. (1) is expressed in the derived unit of newton, while eq. (2) is expressed completely in base units. Having only the base units as initial matchings, in order to compare these two units, the unit of \u21261:newton needs to be processed first. Therefore the following equation has to be first determined by the matcher:\n\u21261 : newton = (\u21261 : meter)\u00d7 (\u21261 : kilogram)\n(\u21261 : second)2 (3)\nKnowing eq. (3), when the matcher encounters eq. (1), it searches for \u21261:newton and upon finding it, reconstructs eq. (1) in its base units. Now the two units can be compared, with reference to the initial matchings. Once the dimensions and conversion values match, it can be concluded that the units are equivalent. This does not apply however to dimensionless units. For example, the units radian and steradian are both dimensionless and have a conversion multiplier of 1 and 0 offset. In this case, a lexical comparison (i.e. using different distance measurements) is used. When the comparison is completed, equivalence rules representing the alignment can be created and the results outputted to a file for later processing."}, {"heading": "4 Application of Approach", "text": "As a proof of concept, the approach outlined in the previous section was applied to three ontologies. The implementation is divided into two phases. f Phase I involves the following pre-processing steps for each individual ontology:\n1. Find dimension and conversion data for the units 2. Generate MathML based on information of previous step and insert as\nrdfs:comment\n3. Output modified file of ontology with the MathML code\nPhase II compares two modified ontologies given initial matchings of the base units:\n1. Read in the initial matchings file and two ontology files. Extract the MathML. 2. Compare the units (specifically their dimensions and conversion value) and\ndetermine which are equivalent 3. Output a file containing equivalence rules between the units of the two on-\ntologies\nThe approach is broken down into two phases in order to make the implementation more modular . A general program can be written for Phase II, since the MathML is standardized. This program can be reused for comparison between any two units ontologies. The onus of inserting the MathML into the ontology can be placed on either its creator or a third party."}, {"heading": "4.1 Phase I", "text": "Inserting MathML into Existing Ontologies The three ontologies looked at in this work are: 1) Quantities, Units, Dimensions and Types (QUDT) [22], 2) Ontologies of units of measure 1.8 (OM) [23] and 3) Semantic Web for Earth and Environmental Terminology (SWEET) version 2.2 [24]. QUDT was originally developed by NASA for the NASA Exploration Initiatives Ontology Models project. It is currently being developed by TopQuadrant (see [25]) and NASA. The OM ontology was developed at Wageningen UR - Food & Biobased Research by the Intelligent Systems group. OM was designed to improve upon the deficiencies found in other units ontologies and was based on standards found in the field of units of measure. Additionally, the ontology is made more accessible by providing web services for things such as listing units by application area and unit conversion [26], [27]. SWEET is another ontology developed by NASA, but this time from the Jet Propulsion Laboratory. The focus of this ontology is on the Earth sciences and it bases its terms on the keywords found in the NASA Global Change Master Dictionary [28]. The three ontologies are supported by prominent organizations, while OM purports to be an improved ontology, designed in light of the flaws of previous units ontologies.\nAll three ontologies are fairly different in their structures and labeling. As a result different programs were written to insert the MathML into each ontology. However the general approach is similar in that patterns in the structure of the ontologies were first identified. A program was then written, using the Apache Jena library (http://jena.apache.org/) for Java and SPARQL queries, to utilize these patterns in order to extract the necessary information for the resulting MathML equation. Due to space restrictions, we provide a description of only the insertion of MathML into the OM ontology.\nThe OM ontology is well structured with units broken down into groups based on whether they are single, a multiple, an exponent or comprising of a\ndivision and so on. The units\u2019 mathematical relationship to other units is further expressed by object and data properties. To make this discussion more concrete, figure 1 shows an example of how unit division (in this case millimetre per day) is structured in the OM ontology. Here the unit division breaks down into the numerator and denominator object properties. In this example, they point to millimetre and day respectively. The two terms and their position in the division operation are clearly indicated through these properties. By following the numerator arm, it is seen that millimetre is comprised of the singular unit metre, which also happens to be a base unit. Millimetre also has a prefix milli with a value of 1e-3. This value comprises part of the overall conversion necessary to convert millimetre per day to metre per second. The denominator path breaks down the unit day into a numerical value of 86400 (the number of seconds in a day) and a unit of measure or measurement scale, second-time. The conversion value is determined as 1e-3/86400. The dimensions can be extracted in several ways. Either the speed-dimension can be directly processed or the length-dimension and time-dimension can be processed with the knowledge that one is the numerator and the other the denominator. Not shown in the figure, is that these dimensions break down into the seven dimensions: time, length, mass, amount of substance, temperature, electric-current and luminosity.\nOther units consisting of a division, are represented similarly. The organization is different for unit multiplication, exponentiation and so on. What this example shows is that there are patterns in the OM structure which, once recognized, can be used to automatically determine the conversion value and dimensions of a unit. For example, numerical values found in the numerator section should be divided by the values found in the denominator section. In the case of multiplication where the unit breaks down into term 1 and term 2, values\nfound after processing terms 1 and 2 should be multiplied. The dimensions are either processed directly if the unit has dimension data or constructed from the dimensions of the base units that comprise it.\nAfter studying the OM ontology, we found that only a handful of these patterns exist. Recognizing this made it possible to write a program that searched the ontology, extracted the dimension data and calculated the conversion data.\nThe approach for the QUDT and SWEET ontologies was the same. In all three, we were able to identify patterns that covered the majority of units. Some units which did not fall within these patterns had to be handled manually. Reasons for this non-conformity vary from unusual units to errors in the ontologies.\nGenerating MathML Each unit is represented by an equation which incorporates its dimension and conversion data. In other words the unit is described in terms of its SI equivalent units and the conversion values necessary to convert to these SI units. The general structure of such a conversion equation is shown in eq. 4 below:\nunit = a\u00d7 [n x1 1 ][n x2 2 ][n x3 3 ]...\n[dy11 ][d y2 2 ][d y3 3 ]...\n+ b (4)\nHere a represents the conversion multiplier and b the conversion offset of the unit. The variables ni and dj represent the different units this unit is comprised of. So as noted before, the latter can be base SI units or derived units. Basically, for our approach to work they can be any other unit as long as it is possible to trace them back to a base SI unit. At least one of ni and dj should be present, but there is no limitation on the combination of these variables, this depends on the unit. The structure of the general conversion eq. 4 is fairly straightforward, simplifying the generation of the MathML encoding. An example of MathML code generated and inserted as a label is given in figure 2 for the unit newton.\nAs can be seen in the figure, the references to the other units in the ontology are given by the id attribute. The variables n1, n2, d3 are equivalent to the ni and dj in eq. 4. In this manner, the variables show the relationship of one unit to other ones in the ontology, which can eventually be traced back to the SI base units. After the MathML is inserted into the rdfs:comment of each unit, the modified model of the ontology is outputted to a file."}, {"heading": "4.2 Phase II", "text": "The implementation of this phase can be a standalone program. It will process ontology files containing MathML in their rdfs:comment. In addition, an initial alignment containing equivalences between the seven SI base units is provided to the program. Below is a detailed description of the steps.\nExtract MathML A search through the ontologies for all individuals containing MathML code is initially done. This is done by conducting a SPARQL query for all rdfs:comment and a filter is applied for only comments containing\nMathML. The results of this query are assumed to be all the processable units. In other words, anything without MathML is ignored (see Future Work, section 6). The MathML is then parsed to extract the dimension and conversion data.\nCompare Units Once all the units in each ontology have the necessary information extracted, a comparison can be made using the initial matching data. Since no further information is known about the ontologies, a very general approach was taken. In the first pass, each unit in one ontology is compared to all the ones in the other. To compare the dimension data, the initial matching units and units that have already been found to be the same, are referred to. The reason for this is, as mentioned before in section 3.3, some units may be described in terms of other ones. Hence, a second pass is necessary to catch all the units which were not matched due to this reason. The steps of the comparison are summarized in figure 3.\n\u2013 Step 1: First the simplest comparison is made by checking if the offsets of the conversion value are the same. If they are not, the units are not equivalent and a false is returned by the function. \u2013 Step 2: Second, the multiplier of the conversion value is compared to see if they are the same. \u2013 Step 3: Once the conversion value is confirmed to be the same, the dimensions are looked at next. If the units are expressed in units other than base SI units, these must first be broken down or matched. For example, tesla can be given as T = N/(A\u00d7m). If tesla is described in terms of newton (N) in both ontologies and newton has already been matched, then no breakdown is required. Otherwise a search is done for newton (already\nchecked units are stored in memory) and if found, T will be modified to T = (kg\u00d7m)/(A\u00d7m\u00d7s2). \u2013 Step 4: The next step, reduce dimensions, checks if there are the same units in the denominator and numerator and reduces them, resulting in T = kg/(A\u00d7s2). \u2013 Step 5: Once the units have been reduced as necessary, they can be compared with reference to the initial mappings and already matched units, to see if they are the same. If they are, the units match. Output the matched units."}, {"heading": "5 Results", "text": "To evaluate our matching approach, we manually aligned the ontologies for comparison (referred to as reference alignments). Following suit with the OAEI comparisons, we calculate the precision, recall and F-measure. The measurements of precision and recall are well known in information retrieval, but have been modified to take into consideration the semantics of alignments for the purposes of evaluating ontology alignments [29]. For this reason, we use the Alignment API version 4.4 to compare the generated alignments from our method with the reference alignments. The results are given in table 1. The F-measures, being a combination of the precision and recall values, are fairly good. As a point of reference, the highest F-measure produced by the matchers\nparticipating in the OAEI competition from 2007-2010 was around 0.86 [1]. As can be seen the recall values are very good, indicating that most of the alignments in the reference are covered by the generated ones. The precision values are lower, indicating there are a number of false positives (i.e. units that were incorrectly identified as equivalent by the MathML approach). Looking closer at the results, the false positives fall into the following categories:\n1. Mathematically equivalent but conceptually different units: There are two sub-types within this category. The first covers matches such as hertz = becquerel. While they are mathematically equivalent (both being equal to 1/s), conceptually they are different, with the former representing frequency and the latter representing radioactive decay. The second sub-type encompasses matches such as (square meter \u00b7 steradian) = square meter. When reduced completely, steradian becomes dimensionless and the equation is once again mathematically equivalent. This problem could be dealt with by modifying the Reduce dimensions step in the comparison. Both problems could also be handled by adding additional checks (e.g. lexical comparison of the labels). 2. Incorrect information in the ontologies: The insertion of the MathML is dependent on the information in the ontologies and if this information is incorrect, the resulting MathML and therefore the comparison is affected. Several problems were found in each of the ontologies. For example in QUDT, there are incorrect conversion values for the units of teaspoon, tablespoon and centistokes. Also there are no conversion values for the units of degree Celsius per minute and year tropical, to name a few. In the OM ontology the dimensions were wrong for the current density dimension and the permittivity dimension. In the SWEET ontology, some of the units were incorrectly composed. For example, the unit joule is only composed of perSecondSquared and kilogram, missing the meter squared.\nThese issues can be improved upon in future work, which will increase the precision values. Supporting documents for the results can be found at [30]."}, {"heading": "6 Conclusion and Future Work", "text": "Ontology alignment is a difficult problem, but by harnessing domain specific attributes, this problem can be simplified. We have shown that in the area of\nunits of ontologies, MathML can be used to better represent the semantics of the units in order to compare them between ontologies. The generated alignments provide good precision and recall values when compared to manually created reference alignments.\nFor future work, we intend to improve upon the results by using further checks to ensure that the matched units are conceptually correct as well as mathematically. Furthermore, it will be interesting to look at combining this approach with other methods of ontology alignment. For example, the MathML matching can be used as an initial match in combination with lexical comparisons for non-mathematical concepts. This initial mapping is then fed into an algorithm which considers structural similarities between the two ontologies to build upon the initial matching. Another advantage of inserting MathML is that the information for conversion between units is more explicit. Instead of having to find the dimension information (to see if the units are compatible) and the conversion information within the ontologies, the MathML can be referred to. We intend to explore this area in the future for different applications, such as automatic unit conversion of sensor data between different networks.\nAcknowledgements The authors gratefully acknowledge financial support by CWI\u2019s Computational Energy Systems project (sponsored by the Dutch National Science Foundation NWO) and wish to thank Dr. Christoph Lange for his valuable comments."}], "references": [{"title": "Ontology matching: state of the art and future challenges", "author": ["P. Shvaiko", "J. Euzenat"], "venue": "IEEE Transactions on Knowledge and Data Engineering", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Units and dimensions in OpenMath", "author": ["J.H. Davenport", "W.A. Naylor"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2003}, {"title": "Unit knowledge management", "author": ["J. Stratford", "J.H. Davenport"], "venue": "Intelligent Computer Mathematics. Springer", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2008}, {"title": "OpenMath content dictionaries for SI quantities and units", "author": ["J.B. Collins"], "venue": "Intelligent Computer Mathematics. Springer", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2009}, {"title": "Ontology Alignment Evaluation Initiative: six years of experience", "author": ["J. Euzenat", "C. Meilicke", "H. Stuckenschmidt", "P. Shvaiko", "C. Trojahn"], "venue": "Journal on data semantics XV", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Semantic integration: a survey of ontology-based approaches", "author": ["N.F. Noy"], "venue": "SIGMOD record 33(4)", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2004}, {"title": "A survey on ontology mapping", "author": ["N. Choi", "I.Y. Song", "H. Han"], "venue": "ACM Sigmod Record 35(3)", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2006}, {"title": "Ontology matching benchmarks: generation and evaluation", "author": ["M. Rosoiu", "C.T. dos Santos", "J Euzenat"], "venue": "Proc. 6th ISWC workshop on ontology matching (OM).", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2011}, {"title": "AgreementMaker: efficient matching for large real-world schemas and ontologies", "author": ["I.F. Cruz", "F.P. Antonelli", "C. Stroe"], "venue": "Proceedings of the VLDB Endowment 2(2)", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2009}, {"title": "Schema and ontology matching with COMA++", "author": ["D. Aumueller", "H.H. Do", "S. Massmann", "E. Rahm"], "venue": "Proceedings of the 2005 ACM SIGMOD international conference on Management of data, ACM", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2005}, {"title": "Ontology matching with semantic verification", "author": ["Y.R. Jean-Mary", "E.P. Shironoshita", "M.R. Kabuka"], "venue": "Web Semantics: Science, Services and Agents on the World Wide Web 7(3)", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2009}, {"title": "Why linked data is not enough for scientists", "author": ["S. Bechhofer", "I. Buchan", "D. De Roure", "P. Missier", "J. Ainsworth", "J. Bhagat", "P. Couch", "D. Cruickshank", "M. Delderfield", "I Dunlop"], "venue": "Future Generation Computer Systems", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2011}, {"title": "Ontologies and Languages for Representing Mathematical Knowledge on the Semantic Web", "author": ["C. Lange"], "venue": "Semantic Web Journal 4(2)", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2013}, {"title": "OntoMODEL: ontological mathematical modeling knowledge management in pharmaceutical product development, 1: conceptual framework", "author": ["P. Suresh", "S.H. Hsu", "P. Akkisetty", "G.V. Reklaitis", "V. Venkatasubramanian"], "venue": "Industrial & Engineering Chemistry Research 49(17)", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2010}, {"title": "How semantics can improve engineering processes: A case of units of measure and quantities", "author": ["H. Rijgersberg", "M. Wigham", "J. Top"], "venue": "Advanced Engineering Informatics 25(2)", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2011}, {"title": "Ontology of units of measure and related concepts", "author": ["H. Rijgersberg", "M. van Assem", "J. Top"], "venue": "Semantic Web 4(1)", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2013}, {"title": "Semantic Web for Earth and Environmental Terminology (SWEET)", "author": ["Raskin", "Rob"], "venue": ".pdf Accessed on November", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2012}, {"title": "Semantic precision and recall for ontology alignment evaluation", "author": ["J. Euzenat"], "venue": "Proc. 20th International Joint Conference on Artificial Intelligence (IJCAI).", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2007}], "referenceMentions": [{"referenceID": 0, "context": "An ontology describes a domain of interest by presenting a vocabulary as well as definitions of the terms used in the vocabulary [1].", "startOffset": 129, "endOffset": 132}, {"referenceID": 1, "context": "In [2] and [3], the representation of units in CDs is proposed and discussed.", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "In [2] and [3], the representation of units in CDs is proposed and discussed.", "startOffset": 11, "endOffset": 14}, {"referenceID": 3, "context": "[4] builds upon these CDs and suggests changes for better conformance to the SI standard.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "Depending on the matching algorithm, the correspondence may have a level of confidence (normally between 0 and 1) associated with it [7].", "startOffset": 133, "endOffset": 136}, {"referenceID": 0, "context": "Over the years, many ontology matching systems have been proposed, some of which are summarized in [1], [8], [9].", "startOffset": 99, "endOffset": 102}, {"referenceID": 5, "context": "Over the years, many ontology matching systems have been proposed, some of which are summarized in [1], [8], [9].", "startOffset": 104, "endOffset": 107}, {"referenceID": 6, "context": "Over the years, many ontology matching systems have been proposed, some of which are summarized in [1], [8], [9].", "startOffset": 109, "endOffset": 112}, {"referenceID": 4, "context": "These methods include looking at the range of values, cardinality, the transitivity and symmetry of the entities [7].", "startOffset": 113, "endOffset": 116}, {"referenceID": 7, "context": "In particular the benchmark tests (see [11] for more information) have generated quantitative results, allowing for the comparison between different matching systems and tracking of advancements in these systems.", "startOffset": 39, "endOffset": 43}, {"referenceID": 4, "context": "Matching systems commonly only produce a one to one alignment [7].", "startOffset": 62, "endOffset": 65}, {"referenceID": 8, "context": "For the first two layers, several matchers are available for comparison [12].", "startOffset": 72, "endOffset": 76}, {"referenceID": 9, "context": "The final step is similarity combination, where the correspondences between components is found from the calculated similarities [13].", "startOffset": 129, "endOffset": 133}, {"referenceID": 10, "context": "Finally, an extensional similarity is found using data instances in the ontology [14].", "startOffset": 81, "endOffset": 85}, {"referenceID": 11, "context": "More interesting usages of MathML can be seen in the Systems Biology of Microorganisms initiative, which has the aim of producing computerized mathematical models representing the dynamic molecular process of a micro-organism [16].", "startOffset": 226, "endOffset": 230}, {"referenceID": 12, "context": "MathML is used to represent the mathematical models [17].", "startOffset": 52, "endOffset": 56}, {"referenceID": 13, "context": "The former is used to represent the mathematical equations and the latter is used for the ontologies that represent the mathematical models and other related information [18].", "startOffset": 170, "endOffset": 174}, {"referenceID": 13, "context": "With this in mind, we take a similar approach as OntoModel, which generates the MathML for an equation and incorporates it as a string into a hasML property [18].", "startOffset": 157, "endOffset": 161}, {"referenceID": 14, "context": "Additionally, the ontology is made more accessible by providing web services for things such as listing units by application area and unit conversion [26], [27].", "startOffset": 150, "endOffset": 154}, {"referenceID": 15, "context": "Additionally, the ontology is made more accessible by providing web services for things such as listing units by application area and unit conversion [26], [27].", "startOffset": 156, "endOffset": 160}, {"referenceID": 16, "context": "The focus of this ontology is on the Earth sciences and it bases its terms on the keywords found in the NASA Global Change Master Dictionary [28].", "startOffset": 141, "endOffset": 145}, {"referenceID": 17, "context": "The measurements of precision and recall are well known in information retrieval, but have been modified to take into consideration the semantics of alignments for the purposes of evaluating ontology alignments [29].", "startOffset": 211, "endOffset": 215}, {"referenceID": 0, "context": "86 [1].", "startOffset": 3, "endOffset": 6}], "year": 2013, "abstractText": "Ontologies provide a formal description of concepts and their relationships in a knowledge domain. The goal of ontology alignment is to identify semantically matching concepts and relationships across independently developed ontologies that purport to describe the same knowledge. In order to handle the widest possible class of ontologies, many alignment algorithms rely on terminological and structural methods, but the often fuzzy nature of concepts complicates the matching process. However, one area that should provide clear matching solutions due to its mathematical nature, is units of measurement. Several ontologies for units of measurement are available, but there has been no attempt to align them, notwithstanding the obvious importance for technical interoperability. We propose a general strategy to map these (and similar) ontologies by introducing MathML to accurately capture the semantic description of concepts specified therein. We provide mapping results for three ontologies, and show that our approach improves on lexical comparisons.", "creator": " TeX output 2013.07.05:1201"}}}