{"id": "1307.7405", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "28-Jul-2013", "title": "Reasoning for Moving Blocks Problem: Formal Representation and Implementation", "abstract": "The combined approach of the Qualitative Reasoning and Probabilistic Functions for the knowledge representation is proposed. The method aims at represent uncertain, qualitative knowledge that is essential for the moving blocks task's execution. The attempt to formalize the commonsense knowledge is performed with the Situation Calculus language for reasoning and robot's beliefs representation. The following approaches to the Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem Calculus: A Problem", "histories": [["v1", "Sun, 28 Jul 2013 21:14:29 GMT  (138kb,D)", "http://arxiv.org/abs/1307.7405v1", null]], "reviews": [], "SUBJECTS": "cs.RO cs.AI", "authors": ["p a wa{\\l}\\c{e}ga"], "accepted": false, "id": "1307.7405"}, "pdf": {"name": "1307.7405.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": [], "sections": [{"heading": null, "text": "Keywords: Situation Calculus, Knowledge Representation, Qualitative Reasoning, Implementation, Moving Blocks"}, {"heading": "1 Introduction", "text": "Reasoning algorithms that may represent incomplete and uncertain knowledge are greatly needful in a number of robotic applications, where the exact information is hardly available. In such cases, the probabilistic reasoning methods are mostly in use because of their ability to model uncertain knowledge and cognitive agent\u2019s beliefs. In parallel, there are also many attempts to develop qualitative approaches inspired by the human way of interpreting the surrounding world. Such methods allow to model imprecise and uncertain information, vary the grain of the reasoning, eliminate information overload, and fasten program execution (see [5] and [6] for details). The qualitative approach is still being explored, therefore a number of new methods are lately developed as presented in [2], [12], [11], and [1], among others.\nThe proposed approach is a combination of both approaches: Qualitative Reasoning and Probabilistic Functions. The developed method for beliefs\u2019 representation is universal but was implemented and tested for a specific scenario in which the robot\u2019s task is to move cubic blocks in order to obtain the goal configuration using qualitative reasoning methods, with no numerical, quantitative information. One of the main advantages of the approach is the formal language\nar X\niv :1\n30 7.\n74 05\nv1 [\ncs .R\nO ]\n2 8\nJu l 2\nthat describes the robot\u2019s knowledge as a set of different, often inconsistent, beliefs. The formalism is based on the second order Situation Calculus language ([9], [13]) that was established in order to reason about actions and change. The main concepts to be used are:\n\u2013 Actions that may change the world features,\n\u2013 Situations which are possible states of the world that are in fact sequences of actions, called histories of the world,\n\u2013 Fluents that describe features of a specified situation.\nIn the Situation Calculus language the initial situation S0 is an empty sequence of actions. The binary function symbol do maps a pair (a, s), for an action a and a situation s, to a successor situation obtained by performing a to s. For example, the situation that occurs after performance of an action a1 in the initial situation S0, followed by a2 and a1 once more, is denoted by do(a1, do(a2, do(a1, S0))). Actions are usually parametrized, e.g., moving a block from a column n to the top of a column n\u2032 may be represented as an expression move(n, n\u2032), where move is a binary function symbol. The situation that results from moving block from a column n to a column n\u2032, and then moving it back from n\u2032 to n is denoted by do(move(n\u2032, n), (do(move(n, n\u2032), S0))). Fluents may be functional or relational, but we will use only functional fluents that return values describing the world\u2019s features in a specified situation. For instance, the robot\u2019s belief that a column n is large in a situation s can be represented as the functional fluent large(n, s) whose value describes a degree of the robot\u2019s belief. In our approach robot\u2019s beliefs about columns of blocks are described with qualities Large, Medium, Small, and Zero, although values of the corresponding functional fluents are expressed in terms of probability. Therefore, we develop a reasoning method that is based on the probabilistic approach. Furthermore, since the similarity to fuzzy logic was observed, the idea of triangular membership functions is used (see [7]). The proposed approach is not only developed but also implemented in the Prolog declarative programming language, which is often used to model artificial intelligence methods [3]. Therefore, it may be tested and the performance quality may be measured in different simulated situations.\nMost significant observed advantages of the proposed approach are: scalability feature, incomplete and uncertain knowledge representation, reasoning without strictly numerical information. Mentioned pros are essential for those robotic systems that need to work in the unknown environment or have information that is not enough precise to reason with classical quantitative methods. On the other hand, since the probabilistic reasoning algorithms are implemented in order to model the uncertainty, in some cases the robot possesses incorrect beliefs and is unable to complete the given task. Although the disadvantages cannot be ignored, the developed method has a number of significant features that are crucial for robotic application.\nThe paper is organized as follows. In Section 2 the formal approach of representing beliefs, its language and axioms are introduced. Afterwards, solutions to the Qualification Problem and the Frame Problem are proposed. In Section 3 a\nbrief breakdown of the Prolog implementation is shown. Three systems performance tests that present correct and faulty functionality are shown in Section 4. Finally, conclusions and future work plans are presented in Section 5."}, {"heading": "2 The formal beliefs\u2019 representation in the Situation Calculus with probabilistic functions", "text": "A specific scenario consists of a plane table with cubic blocks situated on its surface and the robot located in front of them. Separate columns are formed with blocks that are put on the top of each other as shown in Fig. 1.\nThe robot is equipped with an arm that can grab and move individual objects. At the beginning, blocks are placed on the table in the requested configuration which constitutes a goal setup. The robot observes the configuration and keeps its pure qualitative representation in mind. Afterwards, blocks are shuffled and a new configuration called an initial state is shown to the robot. The system\u2019s task is to observe the given configuration and plan the actions\u2019 sequence that will bring back the goal configuration i.e. in the final configuration height of each column will be the same as in the goal configuration. Predicates that are used for beliefs\u2019 description and reasoning procedure express qualitative (symbolic) information e.g. \u201dcolumn 1 is large\u201d. Therefore, the exact number of blocks in columns is unknown for the robot. Furthermore, since observations take place only twice \u2013 when the goal and the initial states are presented \u2013 the robot cannot check effects of performed actions.\nThe Situation Calculus formal approach is used in order to describe changes of robot\u2019s beliefs. The adapted second order language consists of the following alphabet:\n\u2013 Standard logical symbols: \u2227, \u00ac, \u2203,\n\u2013 Individual variables: a for actions, s for situations, n for columns made of blocks, \u2013 Constants Large, Medium, Small, and Zero to represent qualitative values, \u2013 Function symbols for situations: the initial situation S0 and a binary function\nsymbol do, whose value do(a, s), for an action a and a situation s, represents a situation s\u2032 that results from applying an action a in situation s, \u2013 The binary predicate symbol \u2282 for an ordering relation on situations (transitive, irreflexive, and asymmetric); s \u2282 s\u2032 means that in a situation s performance of at least one action a may lead to a situation s\u2032; a binary predicate symbol \u2286 is defined as usual: s \u2286 s\u2032 iff s = s\u2032 or s \u2282 s\u2032, \u2013 The binary predicate symbol Poss; Poss(a, s) represents a possibility to perform an action a in a situation s, \u2013 The unary predicate symbol col for a situation independent relation; col(n) represents the fact that n is a column, \u2013 The binary function symbol move for a move action; move(n, n\u2032) means that the top block from a column n is moved to the top of a column n\u2032, \u2013 Binary function symbols for functional fluents. Fluents describing agent\u2019s beliefs \u2013 large, medium, small, and zero \u2013 map a pair (n, s) to a value from the interval \u30080, 1\u3009 interpreted as a degree of robot\u2019s belief; large(2, s) = 0.9 means that in situation s the robot has a strong belief (with a degree of 0.9) that a column 2 is Large. Other fluents are used in order to describe the goal situation \u2013 goal \u2013 and main agent\u2019s beliefs \u2013 believe. Both of them are defined on pairs (n, s) and return one of the qualitative values: Large, Medium, Small, or Zero, e.g. goal(2, s) = Large means that in situation s the robot\u2019s goal is to construct a column 2 that will Large and believe(2, s) = Small means that in situation s the robot\u2019s main believe about a column 2 is that it\u2019s Small.\nThe initial situation S0 denotes the robot\u2019s beliefs and goals that were given to him at the beginning of the scenario. Performing different actions (that are in fact move-actions done by the robot) leads to different situations, namely different agent\u2019s belief states. A demonstrative tree of situations graph is presented in Fig. 2.\nThe robot\u2019s task is to find a sequence of actions that leads to a situation in which his beliefs are equal to the given goals, thus to a situation in which believe(n) = goal(n) holds for all n. If it is impossible to find such a path, then the robot\u2019s solution should bring him to the closest situation to the given goal. Fundamental axioms of the approach are shown in Fig. 3.\nThe main idea of our method is to represent agent\u2019s beliefs in terms of the combined means: the qualitative and probabilistic (quasi-fuzzy) ones. Therefore, specific functional fluents for robot\u2019s beliefs are implemented. They return floating point numbers from the interval \u30080, 1\u3009 that are treated as a degree of the belief, where 0 means the weakest belief and 1 the strongest one. In the case of inconsistent beliefs occurrence \u2013 such as \u201dcolumn n is large\u201d and \u201dcolumn n is small\u201d with the same degree of belief \u2013 an additional, main agent\u2019s belief fluent believe with an argument n is implemented. It may return one of the qualitative values: Large, Medium, Small, or Zero.\nThe most desired situation occurs when values of belief fluents change triangular membership functions known from the fuzzy logic (see [7]), i.e., the increase of some belief function value leads to the reduction of the \u201dnearest belief function\u201d value, where the \u201dnearest belief function\u201d corresponds to the next most probable state to occur. In Fig. 4 we present an example, where the number of blocks in a column n affects on agent\u2019s beliefs, namely large(n), medium(n), small(n), zero(n). Thus, adding the 9th block to the column increases a belief that this column is large and decreases a belief that it is medium.\nResearches on the qualitative modelling and reasoning indicate that a pure qualitative approach is usually impractical and impossible to be implemented. Programmable methods used in the Qualitative Reasoning usually make use of a quantitative approach at least on some basic level. Although such implementations are more natural and intuitive due to usage of qualitative methods, numerical values still cannot be omitted and, as a consequence, hybrid approaches are most applicable. The proposed approach should be treated as such a hybrid method, since it combines qualitative and quantitative methods. Belief fluents refer to qualities such as \u201dcolumn n is large\u201d, \u201dcolumn n is small\u201d, whereas values of functional fluents are expressed with the quantitative probabilistic description. An action performance results with the belief fluents value changes which are precisely and numerically defined.\nOne of the most desired feature of qualitative systems is the scalability (see [5] for details). Not only the quantization needs to be relevant to the problem but also the ability of changing the grain of the reasoning should be provided. The fulfillment of such a constraint allows to change the modelling precision and is called scalability. The proposed method provides such a feature, as the number of qualities and a degree of actions\u2019 influence on numerical fluents\u2019 values may be freely changed. The more qualities are, the more precise modelling becomes.\nThere are three fundamental problems in the reasoning about actions: the Qualification Problem, the Frame Problem and the Ramification Problem. In order to exploit the Situation Calculus formal language all of them need to be considered and solutions for them ought to be proposed.\nThe Qualification Problem states that it is impossible to define all preconditions of an action. As a result, no inference of the form Poss(a, s) about executable actions a in a particular situation s may be obtained. In order to explain the problem clearly and formally, let us consider an example in which the system\ncontains the axiom (1) of the form:\nPoss(move(n, n\u2032), s)\u2192 (col(n) \u2227 col(n\u2032) \u2227 \u00ac(believe(n, s) = Zero)) (1)\nIt means that if it is possible for the robot to move a block from a column n to a column n\u2032 in a situation s, then n and n\u2032 are columns and the robot believes that there are at least some blocks on the column n. Unfortunately, the reverse implication that is:\n(col(n) \u2227 col(n\u2032) \u2227 \u00ac(believe(n, s) = Zero))\u2192 Poss(move(n, n\u2032), s) (2)\nis false. Hence, it is impossible to infer when a move action is executable. The condition (2) is unacceptable, since it may be impossible to perform a move action, for instance, when the top block on a column n may be glued to the table or too heavy to be picked up by the robot. The number of such qualifications in a complex domain is extremely large, so it is obviously impossible to specify all of them. The preferable solution to the problem is to specify only important preconditions which are directly connected to an action\u2019s execution and ignore minor ones (until they arise). In most cases defining all preconditions is impractical or even impossible, whereas the presented solution allows to overcome both implementation and logical problems.\nThe Frame Problem concerns unchanged fluents after action\u2019s performance. A great number of such frame axioms need to be declared (their number is equal to the number of actions multiplied by the number of fluents). For instance, the axiom (3) states that moving one block from a column n to a column n\u2032 does not affect the agent\u2019s main belief about the other column n\u2032\u2032.\nbelieve(n\u2032\u2032, s) = believe(n\u2032\u2032, do(move(n, n\u2032), s)) (3)\nThe solution that was chosen is to assume that fluents may change only due to defined actions and no unknown effect may occur. That kind of solution is the simplest one, nevertheless it is good enough for the developed approach.\nThe Qualification Problem is about indirect effects that are caused by actions performance e.g. moving the bottom block from a particular column leads to change of upper blocks position. A number of such effects cannot be provided, and may occur in some specific situations. Defining every single indirect effect is unreasonable and usually impossible. Therefore, our solution is to define a list of causal laws that describe indirect effects that occur when specific conditions are fulfilled. Summing up, direct effect are specified and additional causal laws for computing indirect effect are provided."}, {"heading": "3 The implementation", "text": "The implementation of the described scenario is done with the Prolog environment. Additionally, the IndiGolog [10] \u2013 an agent architecture with the Situation Calculus implementation, completely programmed in Prolog \u2013 is used. It provides all elements of the Situation Calculus language and common programming\nstructures like \u201dif\u201d condition and the \u201dwhile\u201d loop. The whole reasoning module is fully implemented in the IndiGolog architecture. Now, we will present and describe its parts.\nConstants. The only constants used in the program are columns numbers. The example presented in Fig. 5 corresponds to the blocks\u2019 configuration shown in Fig. 1. It consists of five columns, where the expression col(N) means that N is a column.\ncol(N) :- N=1; N=2; N=3; N=4; N=5.\nFig. 5. Constants represent numbers of columns.\nActions. There is a single group of actions that may be performed by the robot for instance, moving the top block from a column X and putting it on the top of a column Y. The Prolog definition is presented in Fig. 6.\nprim_action(move(X,Y)) :- col(X),col(Y).\nFig. 6. Action move(X, Y).\nFluents. One of the functional fluents describes the goal configuration to be achieved. It may return any quality available for a specified column. Other functional fluents denote beliefs\u2019 states of the robotic agent. The fluent large(N) returns a degree of a belief that a column N is large in a current state and it remains in the interval \u30080, 1\u3009 as described in Section 2. The program code depicted in Fig. 7 shows additional three fluents: medium(N), small(N), and zero(N). They play the analogous role as large(N). One more functional fluent \u2013 believe(N) \u2013 is used to denote the most probable state of column N according to the robotic agent\u2019s knowledge. No relational fluents have been used.\nCausal laws. The actions\u2019 influence on fluents\u2019 values has been described by making use of fixed laws. In fact, since values of fluents denote agent\u2019s beliefs, causal laws expose the actions\u2019 influence on the robot\u2019s beliefs. Every action move(X, Y) changes robot\u2019s beliefs about the height of columns X and Y, namely, column X is believed to decrease and column X to increase. Depending on earlier beliefs about X and Y height, different causal laws are to occur.\nA short part of causal laws section is presented in the program code in Fig. 8. It describes how agent\u2019s beliefs change when a block from a column X is taken, if X was believed to be large so far. The probabilistic value of the functional fluent large(X) decreases and the value of the fluent medium(X) increases. Furthermore, if the value of medium(X) becomes greater than 0.5 (or equivalently, greater than the value of fluent large(X)), then the agent will believe that the column X is medium rather than large.\nPreconditions. The action move(X, Y) is executable when a column X is not empty (see Fig. 9). It is worth noting that this precondition is constituted with respect to the robot\u2019s knowledge. Therefore, if the agent\u2019s beliefs are incorrect, he may try to take a block from an empty column.\nposs(move(X,_)) :- neg(believe(X)=zero) ).\nFig. 9. An example of a precondition.\nBelief functional fluents and the change of their values play the most significant role in our approach. Now, we will provide an illustrative example and its detailed description. Table 1 presents agent\u2019s qualitative belief states with respect to the precise number of blocks in a column n. As we mentioned in Section 2, the proposed approach uses a scalability feature. In our case there are four qualities, namely Large, Medium, Small, and Zero. Large denotes any column whose number of blocks is in the interval \u30089, 12\u3009. Similarly, Medium, Small, and Zero denote any column whose number of blocks is in the interval \u30085, 8\u3009, \u30081, 4\u3009 and zero, respectively (see the top two ranks of Table 1). There are four main agent\u2019s belief fluents related to a column n, i.e., large(n), medium(n), small(n), and zero(n). Thus, if in the initial situation shown to the agent the column n has 11 blocks and he recognizes the column as large, then his initial beliefs should be as follows: large(n) = 1, medium(n) = 0, small(n) = 0, and zero(n) = 0 (see\nthe third column of Table 1). Performing an action move(n, n\u2032), i.e., taking the top block from a column n and placing it somewhere else, results in a change of belief fluents\u2019 values. The magnitude of such a change depends on the granularity of qualities and equals 1granularity . In our case the granularity equals 4, so the magnitude is 0.25. If one block from a column n is moved, then large(n) decreases, while medium(n) increases. Thus, the final agent\u2019s beliefs should be: large(n) = 0.75, medium(n) = 0.25, small(n) = 0, zero(n) = 0 (see the fourth column of Table 1). In a similar way, further move-actions change the agent\u2019s beliefs as illustrated in Table 1.\nThe initial blocks setup has a significant meaning for the whole reasoning process. Table 2 shows values of belief fluents for four different initial setups, namely with 12 blocks, 11 blocks, 10 blocks, and 9 blocks in n. Although in all these cases the robot qualifies n as large, further inferences about its height are different, and even in some cases reasoning leads to false beliefs."}, {"heading": "4 Performance tests", "text": "A number of tests for different initial and goal configurations were performed. The same scenario as a described one in Section 2 was simulated, i.e, there were five columns made of blocks and four qualities, namely Large, Medium, Small, and Zero. When the initial situation is shown to the robot, he assigns a quality value to each column and keeps in mind only such a qualitative representation. Therefore, the first column with 8 blocks in one initial situation and with 5 blocks in another initial situation is represented by the robot in both these cases in the same way, namely as a Medium column. This kind of system\u2019s behaviour may lead to mistaken reasoning and inability to complete a given task. Now, we present three different simulations, namely a goal achievement in a well established initial situation, a goal achievement in a borderline initial situation, and an inability to complete a given goal in a specific borderline initial situation.\nTable 3 shows a goal achievement simulation. Initial situation is well established for every column, which means that no borderline values are to be used. Borderline numbers of blocks in a Medium column are 5 and 8, since Medium denotes any column whose number of blocks is in the interval \u30085, 8\u3009. System\u2019s behaviour presented in Table 3 leads to the goal achievement for every column. Another goal achievement simulation is presented in Table 4. Borderline numbers of blocks are established in order to make the goal achievement more difficult. Nevertheless, the given task is completed and no mistakes in blocks configuration for every column occur. At last in Table 5 a simulation, in which the goal is not achieved is presented. The robot obtains a goal for columns 2, 3, 4, and 5, but failed to place blocks in the first column properly. He believes that the final number of blocks in the first column that consists of 8 blocks corresponds to the Large quality but in fact it corresponds to the Medium quality. The robot\u2019s belief is incorrect, and therefore, the goal is not achieved. However, occasional mistakes cannot be eliminated as only the qualitative representation and not a quantitative exact number of block in each column is known to the robot."}, {"heading": "5 Conclusion and future work", "text": "The combined method for reasoning about actions and robot\u2019s beliefs has been presented. The approach is implemented in the Prolog declarative programming\nlanguage, therefore the method may be tested and modified. The main advantages of the presented approach are: scalability feature, formal language usage, incomplete and uncertain knowledge representation, qualitative reasoning without strictly numerical information. The mentioned features are essential for robotic application which cannot use the quantitative, numerical methods of reasoning. Such situations are common and occur in an unknown environment, when sensors are not able to return precise information or in cases when the reasoning need to be achieved quickly and classical numerical methods need too much time (or too much computational power). The method was implemented for the moving blocks problem, but since more fluents and rules of reasoning might be easily defined, this method can be used for other problems as well.\nThe future work consists of the reasoning system\u2019s extension for further robotic applications, for instance, for the qualitative representation of moving objects in general and qualitative methods of detection. Another idea is to exploit a method for systems where no certain knowledge may be achieved, e.g., when the gain of information always contains a noise that cannot be filtered. The implementation for the real robot and not only simulated one is also taken into consideration. Additionally, the usage of the ExpCog framework [4] that has been established in order to integrate different robot reasoning approaches is planned."}, {"heading": "Acknowledgments", "text": "The work presented in this paper is supported by the Polish National Science Centre grant 2011/02/A/HS1/00395. The author would like to thank Joanna Golin\u0301ska \u2013 Pilarek for her valuable criticism and members of the ExpCog project,\nnamely: Mehul Bhatt, Jakob Suchan, Maciej Przybylski for a great chance to work with their ExpCog framework."}], "references": [{"title": "Iterated belief change in the situation calculus", "author": ["S. Shapiro", "M. Pagnucco", "Y. Lesp\u00e9rance", "H.J. Levesque"], "venue": "Artificial Intelligence 175(1)", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2011}, {"title": "Reasoning about space, actions and change: A paradigm for applications of spatial reasoning", "author": ["M. Bhatt"], "venue": "In Hazarika, S., ed.: Qualitative Spatio-Temporal Representation and Reasoning: Trends and Future Directions. IGI Global", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2012}, {"title": "Prolog: Programming for Artificial Intelligence", "author": ["I. Bratko"], "venue": "3rd edn. AddisonWesley Longman Publishing Co., Inc., Boston, MA, USA", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2001}, {"title": "The expcog framework: High-level spatial control and planning for cognitive robotics", "author": ["M. Bhatt", "J. Suchan"], "venue": "bridges between the methodological and practical work of the robotics and cognitive systems communities - from sensors to concepts. In: Intelligent Systems Reference Library. Springer", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2013}, {"title": "Qualititative phisics: past, present, and future", "author": ["K.D. Forbus"], "venue": "In Shrobe, H.E., for Artificial Intelligence, A.A., eds.: Exploring Artificial Intelligence: Survey Talks from the National Conferences on Artificial Intelligence. Kaufmann, San Mateo, CA", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1988}, {"title": "Qualitative process theory: Twelve years after", "author": ["K.D. Forbus"], "venue": "Artificial Intelligence 59(1-2)", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1993}, {"title": "Fuzzy Sets and Fuzzy Logic: Theory and Applications", "author": ["G.J. Klir", "B. Yuan"], "venue": "Prentice-Hall, Inc., Upper Saddle River, NJ, USA", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1995}, {"title": "Hybrid Artificial Intelligent Systems \u2013 7th International Conference, HAIS 2012, Salamanca, Spain, March 28-30th, 2012", "author": ["E. Corchado", "V. Sn\u00e1sel", "A. Abraham", "M. Wo\u017aniak", "M. Gra\u00f1a", "S.B. Cho", "eds."], "venue": "Proceedings, Part I. In Corchado, E., Sn\u00e1sel, V., Abraham, A., Wo\u017aniak, M., Gra\u00f1a, M., Cho, S.B., eds.: HAIS (1). Volume 7208 of Lecture Notes in Computer Science., Springer", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2012}, {"title": "Situation calculus", "author": ["F. Lin"], "venue": "In van Harmelen, F., Lifschitz, V., Porter, B., eds.: Handbook of Knowledge Representation. Elsevier Science, San Diego, USA", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2008}, {"title": "Incremental execution of guarded theories", "author": ["G. De Giacomo", "H.J. Levesque", "S. Sardi\u00f1a"], "venue": "ACM Transactions on Computational Logic 2(4)", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2001}, {"title": "A PDL approach for qualitative velocity", "author": ["A. Burrieza", "E. Mu\u00f1oz Velasco", "M. Ojeda-Aciego"], "venue": "International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems 19(1)", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2011}, {"title": "Knowledge in Action: Logical Foundations for Specifying and Implementing Dynamical Systems", "author": ["R. Reiter"], "venue": "The MIT Press, Cambridge, Massachusetts", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2001}], "referenceMentions": [{"referenceID": 4, "context": "Such methods allow to model imprecise and uncertain information, vary the grain of the reasoning, eliminate information overload, and fasten program execution (see [5] and [6] for details).", "startOffset": 164, "endOffset": 167}, {"referenceID": 5, "context": "Such methods allow to model imprecise and uncertain information, vary the grain of the reasoning, eliminate information overload, and fasten program execution (see [5] and [6] for details).", "startOffset": 172, "endOffset": 175}, {"referenceID": 1, "context": "The qualitative approach is still being explored, therefore a number of new methods are lately developed as presented in [2], [12], [11], and [1], among others.", "startOffset": 121, "endOffset": 124}, {"referenceID": 10, "context": "The qualitative approach is still being explored, therefore a number of new methods are lately developed as presented in [2], [12], [11], and [1], among others.", "startOffset": 126, "endOffset": 130}, {"referenceID": 0, "context": "The qualitative approach is still being explored, therefore a number of new methods are lately developed as presented in [2], [12], [11], and [1], among others.", "startOffset": 142, "endOffset": 145}, {"referenceID": 8, "context": "The formalism is based on the second order Situation Calculus language ([9], [13]) that was established in order to reason about actions and change.", "startOffset": 72, "endOffset": 75}, {"referenceID": 11, "context": "The formalism is based on the second order Situation Calculus language ([9], [13]) that was established in order to reason about actions and change.", "startOffset": 77, "endOffset": 81}, {"referenceID": 6, "context": "Furthermore, since the similarity to fuzzy logic was observed, the idea of triangular membership functions is used (see [7]).", "startOffset": 120, "endOffset": 123}, {"referenceID": 2, "context": "The proposed approach is not only developed but also implemented in the Prolog declarative programming language, which is often used to model artificial intelligence methods [3].", "startOffset": 174, "endOffset": 177}, {"referenceID": 6, "context": "The most desired situation occurs when values of belief fluents change triangular membership functions known from the fuzzy logic (see [7]), i.", "startOffset": 135, "endOffset": 138}, {"referenceID": 4, "context": "One of the most desired feature of qualitative systems is the scalability (see [5] for details).", "startOffset": 79, "endOffset": 82}, {"referenceID": 9, "context": "Additionally, the IndiGolog [10] \u2013 an agent architecture with the Situation Calculus implementation, completely programmed in Prolog \u2013 is used.", "startOffset": 28, "endOffset": 32}, {"referenceID": 3, "context": "Additionally, the usage of the ExpCog framework [4] that has been established in order to integrate different robot reasoning approaches is planned.", "startOffset": 48, "endOffset": 51}], "year": 2013, "abstractText": "The combined approach of the Qualitative Reasoning and Probabilistic Functions for the knowledge representation is proposed. The method aims at represent uncertain, qualitative knowledge that is essential for the moving blocks task\u2019s execution. The attempt to formalize the commonsense knowledge is performed with the Situation Calculus language for reasoning and robot\u2019s beliefs representation. The method is implemented in the Prolog programming language and tested for a specific simulated scenario. In most cases the implementation enables us to solve a given task, i.e., move blocks to desired positions. The example of robot\u2019s reasoning and main parts of the implemented program\u2019s code are presented.", "creator": "LaTeX with hyperref package"}}}