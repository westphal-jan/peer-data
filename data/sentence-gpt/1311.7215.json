{"id": "1311.7215", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "28-Nov-2013", "title": "Solving Minimum Vertex Cover Problem Using Learning Automata", "abstract": "Minimum vertex cover problem is an NP-Hard problem with the aim of finding minimum number of vertices to cover graph. In this paper, a learning automaton based algorithm is proposed to find minimum vertex cover in graph. In the proposed algorithm, each vertex of graph is equipped with a learning automaton that has two actions in the candidate or non-candidate of the corresponding vertex cover set. Due to characteristics of learning automata, this algorithm significantly reduces the number of covering vertices of graph. The proposed algorithm based on learning automata iteratively minimize the candidate vertex cover through the update its action probability. As the proposed algorithm proceeds, a candidate solution nears to optimal solution of the minimum vertex cover problem. In order to evaluate the proposed algorithm, several experiments conducted on DIMACS dataset which compared to conventional methods. Experimental results show the major superiority of the proposed algorithm over the other methods.\n\n\nTo implement the proposed algorithm, a candidate solution at a time can be found in the following sequence:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 53 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 35 36 37 38 39 40 41 42 43 45 46 47 48 49 50 51 52 53 55 56 57 59 61 62 63 64 65 66 67 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 85 86 87 88 90 91 92 93 94 95 96 97 98 99 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 19", "histories": [["v1", "Thu, 28 Nov 2013 05:49:34 GMT  (492kb)", "http://arxiv.org/abs/1311.7215v1", "5 pages, 5 figures, conference"]], "COMMENTS": "5 pages, 5 figures, conference", "reviews": [], "SUBJECTS": "cs.AI cs.DM", "authors": ["aylin mousavian", "alireza rezvanian", "mohammad reza meybodi"], "accepted": false, "id": "1311.7215"}, "pdf": {"name": "1311.7215.pdf", "metadata": {"source": "CRF", "title": "Solving Minimum Vertex Cover Problem Using Learning Automata", "authors": ["Aylin Mousavian", "Alireza Rezvanian", "Mohammad Reza Meybodi"], "emails": ["a.mousavian@qiau.ac.ir", "a.rezvanian@aut.ac.ir", "mmeybodi@aut.ac.ir"], "sections": [{"heading": null, "text": "problem with the aim of finding minimum number of vertices to cover graph. In this paper, a learning automaton based algorithm is proposed to find minimum vertex cover in graph. In the proposed algorithm, each vertex of graph is equipped with a learning automaton that has two actions in the candidate or noncandidate of the corresponding vertex cover set. Due to characteristics of learning automata, this algorithm significantly reduces the number of covering vertices of graph. The proposed algorithm based on learning automata iteratively minimize the candidate vertex cover through the update its action probability. As the proposed algorithm proceeds, a candidate solution nears to optimal solution of the minimum vertex cover problem. In order to evaluate the proposed algorithm, several experiments conducted on DIMACS dataset which compared to conventional methods. Experimental results show the major superiority of the proposed algorithm over the other methods.\nKeywords\u2014 Minimum Vertex Cover; NP-Hard problems;\nLearning Automata; Distributed learning automata.\nI. INTRODUCTION\nSet cover of undirected graph G=(V,E) is a subset SV, such\nthat every vertex vV is either in S or adjacent to a vertex of S. In particular, vertex cover (VC) is set of vertices that cover all vertices in arbitrary graph, in other words, undirected graph G=(V,E), S\u2286V is subset of vertices if (u,v)E then uS or vS. Vertex set with minimum cardinality is known as minimum vertex cover (MVC). Minimum vertex cover problem (MVCP) is a NP-Complete problem [7, 8] which has exponential time complexity. Several practical applications of this problem include communication networks, social network [16], computer network and bioinformatics [1, 2]. MVCP introduced by Gary and Johnson and proved by Karp as NP-complete problem in connected graph in 1972. Therefore it is almost impossible finding polynomial time complexity algorithm for solving it. Thus many researchers have attracted to solve minimum vertex cover problem [9, 18]. Theoretical studied were carried out on the set cover by Cerderia and Pinto as focusing on the inequality conditions of vertices and edges in graphs [3, 19, 21].\nIn general, proposed solutions for MVCP are classified in two categories as heuristic and approximation algorithms [15]. Although, exact solution as branch and bound technique has been proposed for this problem, the time complexity is very high [4]. Heuristic algorithms for solving this problem have received many attractions for obtaining good approximate and near optimal results in reasonable time. For example, a greedy algorithm starts with an empty set, then, at each step, selects the best candidate with maximum degree and continues to reach the stop condition [3]. A popular approximation technique removes vertices of edges that have been chosen randomly from set. In this algorithm, the obtained result is always lower than twice the optimum solution, although this approximate method does not optimum solution but can be provided near optimal solution [5]. In [21], two approximation algorithms have been suggested for MVCP. The first method tries to select multiple nodes and uses minimum steiner tree to connect edges between them by minimum number of nodes to reach minimum vertex cover, thus another method must be applied to calculate minimum number of vertices of candidate set. This process increased running time. Second algorithm uses greedy technique similar to former method while the optimal number of nodes must be determined before as input of algorithm [21]. Another successful heuristic method for solving minimum vertex cover is genetic algorithm which finds a local optimum solution [4]. According to local optimality, the previous methods may provide better solution for MVC, but it is shown that genetic algorithm obtains answers in less time [4, 22]. Other successful method that can be referred here is parallel dynamic interaction (PDI), this method works much better than genetic and greedy methods in terms of convergence percentage of solution in consecutive iterations but has a higher running time and it does not provide a good result in large graphs [11]. In recent years, several learning automata based algorithms are presented to solve graph problems and successful results have been reported in literatures such as shortest path problem [10], minimum spanning tree problem [24], minimum dominating set problem [25], maximum clique problem [13, 6] and graph coloring problem [26].\nIn this paper, learning automata is applied to solve minimum vertex cover problem. In the proposed algorithm, a network of learning automata is created corresponding given graph, the collaboration between learning automata and learning mechanism that exist for each automaton, make the proposed algorithm able to obtain near optimal solutions. The rest of paper is organized as follows. In section 2 learning automata and distributed learning automata are introduced briefly. In Section 3 proposed algorithm based on distributed learning automata is described in detail. The performance of proposed algorithm is evaluated through the simulation experiments in section 4. Finally section 5 concludes the paper.\nII. LEARNING AUTOMATA\nLearning automaton (LA) [12, 14] is an abstract model of finite state machine so that it can perform finite actions which randomly chosen and evaluated by a stochastic environment and response is given as reward or penalty to LA. LA uses feedback of environment and select next action. During this process, LA learns how to chooses the best action from a set of allowed actions. Figure 1 illustrates relationship between the LA and the its random environment.\nFig. 1. The relationship between the LA and its random environment\nLA with variable structure can be described with quadruple {\u03b1, \u03b2, p, T} where \u03b1={\u03b11,\u2026,\u03b1r} denotes the finite set of actions and \u03b2={\u03b21,\u2026,\u03b2m} is the set of input values that can be taken by reinforcement signal and p={p1,\u2026,pr} is probability vector of each action. P(n+1)=T[\u03b1(n), \u03b2(n), p(n)] is learning algorithm where is updated in each iteration. Equations (1) and (2) illustrate changes in probability vector according to performance evaluation of \u03b1i in each step. Automaton updates its action probability set based on equation (1) for favorable responses as:\ni i i\nj j\np (n 1) p (n) a[1 p (n)]\np (n 1) (1 a)p (n) j, j i\n         (1)\nAnd equation (2) for unfavorable ones:\ni i\nj j\np (n 1) (1 b)p (n)\nb p (n 1) (1 b)p (n) j, j i\nr 1\n  \n        \n \n(2)\nWhere P(n) is the action probability vector at instant n. r is the number of actions that can be taken by the LA. a and b denote reward and penalty parameters and determine the amount of increases and decreases of the action probabilities, respectively. If a=b learning algorithm is called linear reward penalty (LRP), if b<<a given learning algorithm is called linear reward-\u03b5 penalty (LR-\u03b5P), and finally if b=0 it is called linear reward inaction (LR-I) [24-26]."}, {"heading": "A. Distributed Learning Automata", "text": "A learning automaton is a simple agent for doing simple things. The full potential of learning automata is realized when they are interconnected to work together. A distributed learning automata (DLA) is a network of learning automata cooperating to solve a particular problem. In this network, each time just one automata is active. Number of actions performed by an automaton is equal to number of learning automata connected to it. By choosing an action of automata in this network, the connected automata at other side will be activated. The model of DLA network denotes a graph in each of vertex is an automaton [10]."}, {"heading": "III. THE PROPOSED ALGORITHM", "text": "In this section, a proposed algorithm based on learning automaton for solving minimum vertex cover problem is presented. Undirected graph G=(V,E) is served as input of algorithm and output is minimum expected vertex cover set. At first, a network of learning automata is formed by assigning an automaton to each vertex. Set of action that can be taken by learning automata is edges connected to each vertex of graph. This means the number of each automaton\u2019s action equal to number of set of edges connected to it. Initially, it is assumed that all automatons are disabled. In first iteration, one automata is chosen randomly and activated, then chosen automata is added to covering set, All its neighbors are added to the set of neighborhood then this automata chooses one of its action (edges connected to automata). Selection of automata in first iteration is randomly because the\nRandom Environment\nLearning Automata Response\nAction\nStart Node\n(Vs)\nDestination\nNode (Vd)\nLA3\nLA1 LA4\nLA2\nNext node\n1 3\n1 2\nprobabilities of all edges are equal. This process is continued until the cardinality of covering set is equal to the predefined threshold. Chosen automata of each iteration placed in a separate category as path, then activated automata are known respectively. After each iteration, number of vertices for covering set is compared with previous covering set vertices and automata with minimum set of vertices covering having maximum neighbors get rewarded, otherwise penalized them. Updating vector probability and learning mechanism function is mentioned in section 2. Stopping condition can be applied as a certain number of iterations to proposed algorithm. In this paper, in addition to specified number of iterations, the entropy of probability action vector is used as a criterion for stopping condition. It is noticed that, at first, learning automata chooses its action with equal probability and will converge to an optimal value in learning process; this can be easily demonstrated by using entropy of action probability vector. Entropy is a fundamental concept in thermodynamic representing the degree of order/disorder in thermodynamic system that plays an important role in various fields of computer science, such as learning. Entropy in its basic indicates a measure of uncertainty action of learning automata at next selection. Higher entropy indicates greater degree of uncertainty at choosing next action. High uncertainty in the probability vector for learning automata means that automata have no useful information for achieving goal and select their actions randomly, but lower uncertainty measure indicates automata with higher likelihood select one of actions and have useful information to get the target. Suppose that {p1, p2, \u2026, pr} is the action probability vector of learning automata with r actions, entropy of action probability vector is determined as follows:\n    r\ni ii 1 E P p log p    (3)\nEntropy value will be highest when all actions probability is the same. At successive iterations entropy value will be came down [23]. In case of two-actions learning automata, entropy value will be between 0 and 1. For other case if number of actions is greater than two, it can be re-scaled between 0 to 1. The general structure of proposed algorithm is shown in the following diagram as figure 3. Thus LA learns how to choose best action with minimum vertex cover in successive iterations. This process will be continued until the solution reach to near optimal. In next section, experimental simulations are demonstrated to evaluate proposed algorithm."}, {"heading": "IV. SIMULATION RESULTS", "text": "To evaluate the proposed algorithm, DIMACS benchmark is used in experiments. For proposed algorithm, all experiments have been implemented using LR-I with learning rate 0.3 in learning algorithms. Results of proposed algorithm (VCLA) are compared with results of state of the art techniques such as EWLS [20] and EWCC [9] in table 1. The number of vertex cover in graphs is listed in table1. \u201cCn\u201d indicates the number of covering nodes, \u201cLp\u201d means the number of iterations required to achieve an acceptable answer. It is noted that successful rate of all algorithms for table 1 is obtained 100%\nAccording to results in the table 1, proposed algorithm (CVLA) has considerable success in terms of cover size and coverage loop.\nConvergence of proposed method based on entropy changes\non various benchmark graphs as is shown in figure 4. The rate of entropy changes were tested an average of 10 independent run for 1000 iteration.\na) P_hat7002\nb) C500\nc) Dsjc500\nAccording to the obtained results in figure 4, the downward entropy diagram shows effective information on convergence and is close to optimal value. Interestingly the proposed algorithm has fast convergence in experiments. In all instances and different performances full convergence with minimum number of nodes has been obtained with %100 success rate. Comparison of coverage in SA and ESA [17] methods for proposed algorithm is also shown in figure 5 as a bar chart diagram for P_hat3003.\nBased on demonstrated results given in table 1, figures 4 and figure 5, the proposed algorithm has favorable performance in comparison to ESA, EWCC, EWLS and SA methods. Comparing proposed algorithm to other algorithms indicates that the number of covering nodes has came down which is a result of using less iteration than that of mentioned algorithms.\nV. CONCLUSION\nIn this paper, a new algorithm for minimum vertex cover problem was proposed using distributed learning automata. As mentioned above, most of the methods starting from a random set of optimal search whereas in proposed algorithm in each step define vertex set and improved the response using learning mechanism and good result have been obtained for minimum vertex cover problem. Due to exponential complexity of minimum vertex cover problem, the algorithm is not supposed to reach optimal solution in reasonable time, but the results show that proposed algorithm optimizes solutions than other well-known algorithms in minimum vertex cover problem.\nREFERENCES\n[1] F.C. Gomes, C.N. Meneses, P. M. Pardalos,G. Valdisio, R. Viana,\u201dExperimental analysis of approximation algorithms for the vertex\ncover and set covering problems,\u201d Computers & Operations Research,\nvol. 33, pp. 3520-3534, 2006. [2] Y. Cheng Chen, W. Chih Peng, S.Yin Lee, \u201cEfficient algorithms for\ninfluence maximization in social networks,\u201d Knowledge and Information\nSystems, vol. 33, pp. 577-601, 2012. [3] S. Bouamama, C. Blum, A. Boukerram, \u201cA population-based iterated\ngreedy algorithm for the minimum weight vertex cover problem,\u201d Applied\nSoft Computing, vol. 12, pp. 1632-1639, 2012. [4] C. Witt, \u201cAnalysis of an iterated local search algorithm for vertex cover in\nsparse random graphs,\u201d Theoretical Computer Science, vol. 425, pp. 117-\n125, 2012. [5] J.Cardinal, M. Karpinski, \u201cApproximating subdense instances of covering\nproblems,\u201d Electronic Notes in Discrete Mathematics, vol. 37, pp. 297-\n302, 2011. [6] M. Soleimani-Pouri, A. Rezvanian, M. R. Meybodi, \u201cSolving maximum\nclique problem in stochastic graphs using learning automata,\u201d Proceedings of 2012 Fourth International Conference on Computational Aspects of Social Networks (CASoN), 2012, pp. 115-119.\n[7] P. Horak, K. McAvaney, \u201cOn covering vertices of a graph by trees,\u201d\nDiscrete Mathematics, vol. 308, pp. 4414-4418, 2008. [8] S. Chiba, S. Fujita, \u201cCovering vertices by a specified number of disjoint\ncycles, edges and isolated vertices,\u201d Discrete Mathematics, vol. 313, pp.\n269-277, 2013. [9] S. Richter, M. Helmert, C. Gretton, \u201cA stochastic local search approach to\nvertex cover,\u201d Advances in Artificial Intelligence, vol. 4667, J. Hertzberg,\nEd. Springer Berlin Heidelberg, 2007, pp. 412-426. [10] H. Beigy, M. R. Meybodi, \u201cUtilizing distributed learning automata to\nsolve stochastic shortest path problem,\u201d International Journal of Uncertainty, Fuzziness and Knowledge-based Systems, vol. 14, no. 5, pp. 591-617, 2006. [11] I. K. Evans, \u201cEvolutionary algorithms for vertex cover, in Evolutionary\nProgramming VII, vol. 1447, V. W. Porto, Ed. Springer Berlin Heidelberg, 1998, pp. 377-386. [12] A. Rezvanian, M. R. Meybodi, \u201cTracking extrema in dynamic\nenvironments using a learning automata-based immune algorithm,\u201d in Grid and Distributed Computing, Control and Automation, vol. 121, T. Kim, Ed. Springer Berlin Heidelberg, 2010, pp. 216\u2013225. [13] M. Soleimani-Pouri, A. Rezvanian, M. R. Meybodi, \u201cFinding a maximum clique using ant colony optimization and particle swarm\noptimization in social networks,\u201d Proceedings of the 2012 International Conference on Advances in Social Networks Analysis and Mining (ASONAM 2012), 2012, pp. 58-61. [14] A. Rezvanian, M. R. Meybodi, \u201cAn adaptive mutation operator for\nartificial immune network using learning automata in dynamic environments\u201d Proceedings of the 2010 Second World Congress on Nature and Biologically Inspired Computing (NaBIC 2010), 2010, pp. 479-483. [15] R. Jovanovic, M. Tuba, \u201cAn ant colony optimization algorithm with\nimproved pheromone correction strategy for the minimum weight vertex cover problem,\u201d Applied Soft Computing, vol. 11, pp 5360-5366, 2011. [16] F. Amiri, N. Yazdani, H. Faili, and A. Rezvanian, \u201cA novel community\ndetection algorithm for privacy preservation in social networks,\u201d in Intelligent Informatics, vol. 18, A. Abraham, Ed. Springer Berlin Heidelberg, 2013, pp. 443\u2013450. [17] X. Xu, J. Ma, An efficient simulated annealing algorithm for the minimum vertex cover problem, Neurocomputing, vol. 69, pp. 913-916,\n2006.\n[18] E. Halperin, \u201cImproved approximation algorithms for the vertex cover problem in graphs and hypergraphs,\u201d SIAM Journal on Computing, vol.\n31, pp. 1608\u20131623, 2012.\n[19] B. Escoffier, L. Gourves, J. Monnot, \u201cComplexity and approximation results for the connected vertex cover problem in graphs and\nhypergraphs,\u201d Journal of Discrete Algorithms, vol. 8, pp. 36-49, 2010.\n[20] S. Cai, K. Su, A .Sattar, \u201cLocal search with edge weighting and configuration checking heuristics for minimum vertex cover,\u201d Artificial\nIntelligence, Volume 175, pp.1672-1696, 2011.\n[21] Z. Zhang, X. Gao, W. Wu, \u201cAlgorithms for connected set cover problem and fault-tolerant connected set cover problem,\u201d Theoretical Computer\nScience, vol. 410, pp. 812-817, 2009.\n[22] R. Arakaki, and L. Lorena, \u201cA constructive genetic algorithm for the maximal covering location problem, Proceedings of 4th Metaheuristics\nInternational Conference (MIC 2001), 2001, pp. 13-17.\n[23] B. Masoumi, M. R. Meybodi, \u201cspeeding up learning automata based multi agent systems using the concepts of stigmergy and entropy,\u201d\nJournal of Expert Systems with Applications, vol. 38, no. 7, pp. 8105-\n8118, 2011. [24] J. A. Torkestani, M. R. Meybodi, \u201cLearning automata based algorithms\nfor solving stochastic minimum spanning tree problem,\u201d Journal of\nApplied Soft Computing, vol. 11, no. 16, pp. 4064-4077, 2011. [25] J. A. Torkestani, M. R. Meybodi, \u201cFinding minimum weight connected\ndominating set in stochastic graph based on learning automata,\u201d\nInformation Sciences, no. 200, pp.57-77, 2012. [26] J. A. Torkestani, M. R. Meybodi, \u201cA cellular learning automata based\nalgorithm for solving the vertex coloring problem,\u201d Expert Systems with Applications, vol. 38, no. 8, pp. 9237-9247, 2011."}], "references": [{"title": "Viana,\u201dExperimental analysis of approximation algorithms for the vertex cover and set covering problems,", "author": ["F.C. Gomes", "C.N. Meneses", "P.M. Pardalos", "R.G. Valdisio"], "venue": "Computers & Operations Research,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2006}, {"title": "Efficient algorithms for influence maximization in social networks", "author": ["Y. Cheng Chen", "W. Chih Peng", "S.Yin Lee"], "venue": "Knowledge and Information Systems, vol. 33, pp. 577-601, 2012.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2012}, {"title": "A population-based iterated greedy algorithm for the minimum weight vertex cover problem", "author": ["S. Bouamama", "C. Blum", "A. Boukerram"], "venue": "Applied Soft Computing, vol. 12, pp. 1632-1639, 2012.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "Analysis of an iterated local search algorithm for vertex cover in sparse random graphs", "author": ["C. Witt"], "venue": "Theoretical Computer Science, vol. 425, pp. 117- 125, 2012.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2012}, {"title": "Approximating subdense instances of covering problems", "author": ["J.Cardinal", "M. Karpinski"], "venue": "Electronic Notes in Discrete Mathematics, vol. 37, pp. 297- 302, 2011.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2011}, {"title": "Solving maximum clique problem in stochastic graphs using learning automata", "author": ["M. Soleimani-Pouri", "A. Rezvanian", "M.R. Meybodi"], "venue": "Proceedings of 2012 Fourth International Conference on Computational Aspects of Social Networks (CASoN), 2012, pp. 115-119.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "On covering vertices of a graph by trees", "author": ["P. Horak", "K. McAvaney"], "venue": "Discrete Mathematics, vol. 308, pp. 4414-4418, 2008.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2008}, {"title": "Covering vertices by a specified number of disjoint cycles, edges and isolated vertices", "author": ["S. Chiba", "S. Fujita"], "venue": "Discrete Mathematics, vol. 313, pp. 269-277, 2013.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2013}, {"title": "A stochastic local search approach to vertex cover", "author": ["S. Richter", "M. Helmert", "C. Gretton"], "venue": "Advances in Artificial Intelligence, vol. 4667, J. Hertzberg, Ed. Springer Berlin Heidelberg, 2007, pp. 412-426.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2007}, {"title": "Utilizing distributed learning automata to solve stochastic shortest path problem", "author": ["H. Beigy", "M.R. Meybodi"], "venue": "International Journal of Uncertainty, Fuzziness and Knowledge-based Systems, vol. 14, no. 5, pp. 591-617, 2006.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2006}, {"title": "Evolutionary algorithms for vertex cover", "author": ["I.K. Evans"], "venue": "Evolutionary Programming VII,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1998}, {"title": "Tracking extrema in dynamic environments using a learning automata-based immune algorithm", "author": ["A. Rezvanian", "M.R. Meybodi"], "venue": "Grid and Distributed Computing, Control and Automation, vol. 121, T. Kim, Ed. Springer Berlin Heidelberg, 2010, pp. 216\u2013225.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2010}, {"title": "Finding a maximum clique using ant colony optimization and particle swarm optimization in social networks", "author": ["M. Soleimani-Pouri", "A. Rezvanian", "M.R. Meybodi"], "venue": "Proceedings of the 2012 International Conference on Advances in Social Networks Analysis and Mining (ASONAM 2012), 2012, pp. 58-61.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}, {"title": "An adaptive mutation operator for artificial immune network using learning automata in dynamic environments", "author": ["A. Rezvanian", "M.R. Meybodi"], "venue": "Proceedings of the 2010 Second World Congress on Nature and Biologically Inspired Computing", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2010}, {"title": "An ant colony optimization algorithm with improved pheromone correction strategy for the minimum weight vertex cover problem", "author": ["R. Jovanovic", "M. Tuba"], "venue": "Applied Soft Computing, vol. 11, pp 5360-5366, 2011.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2011}, {"title": "A novel community detection algorithm for privacy preservation in social networks", "author": ["F. Amiri", "N. Yazdani", "H. Faili", "A. Rezvanian"], "venue": "Intelligent Informatics, vol. 18, A. Abraham, Ed. Springer Berlin Heidelberg, 2013, pp. 443\u2013450.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2013}, {"title": "An efficient simulated annealing algorithm for the minimum vertex cover", "author": ["X. Xu", "J. Ma"], "venue": "problem, Neurocomputing,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2006}, {"title": "Improved approximation algorithms for the vertex cover problem in graphs and hypergraphs", "author": ["E. Halperin"], "venue": "SIAM Journal on Computing, vol. 31, pp. 1608\u20131623, 2012.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2012}, {"title": "Complexity and approximation results for the connected vertex cover problem in graphs and hypergraphs", "author": ["B. Escoffier", "L. Gourves", "J. Monnot"], "venue": "Journal of Discrete Algorithms, vol. 8, pp. 36-49, 2010.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2010}, {"title": "Local search with edge weighting and configuration checking heuristics for minimum vertex cover", "author": ["S. Cai", "K. Su", "A .Sattar"], "venue": "Artificial Intelligence, Volume 175, pp.1672-1696, 2011.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2011}, {"title": "Algorithms for connected set cover problem and fault-tolerant connected set cover problem", "author": ["Z. Zhang", "X. Gao", "W. Wu"], "venue": "Theoretical Computer Science, vol. 410, pp. 812-817, 2009.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2009}, {"title": "A constructive genetic algorithm for the maximal covering location problem, Proceedings of 4 Metaheuristics International Conference (MIC", "author": ["R. Arakaki", "L. Lorena"], "venue": null, "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2001}, {"title": "speeding up learning automata based multi agent systems using the concepts of stigmergy and entropy", "author": ["B. Masoumi", "M.R. Meybodi"], "venue": "Journal of Expert Systems with Applications, vol. 38, no. 7, pp. 8105- 8118, 2011.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2011}, {"title": "Learning automata based algorithms for solving stochastic minimum spanning tree problem", "author": ["J.A. Torkestani", "M.R. Meybodi"], "venue": "Journal of Applied Soft Computing, vol. 11, no. 16, pp. 4064-4077, 2011.", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2011}, {"title": "Finding minimum weight connected dominating set in stochastic graph based on learning automata", "author": ["J.A. Torkestani", "M.R. Meybodi"], "venue": "Information Sciences, no. 200, pp.57-77, 2012.", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2012}, {"title": "A cellular learning automata based algorithm for solving the vertex coloring problem", "author": ["J.A. Torkestani", "M.R. Meybodi"], "venue": "Expert Systems with Applications, vol. 38, no. 8, pp. 9237-9247, 2011.", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2011}], "referenceMentions": [{"referenceID": 6, "context": "Minimum vertex cover problem (MVCP) is a NP-Complete problem [7, 8] which has exponential time complexity.", "startOffset": 61, "endOffset": 67}, {"referenceID": 7, "context": "Minimum vertex cover problem (MVCP) is a NP-Complete problem [7, 8] which has exponential time complexity.", "startOffset": 61, "endOffset": 67}, {"referenceID": 15, "context": "Several practical applications of this problem include communication networks, social network [16], computer network and bioinformatics [1, 2].", "startOffset": 94, "endOffset": 98}, {"referenceID": 0, "context": "Several practical applications of this problem include communication networks, social network [16], computer network and bioinformatics [1, 2].", "startOffset": 136, "endOffset": 142}, {"referenceID": 1, "context": "Several practical applications of this problem include communication networks, social network [16], computer network and bioinformatics [1, 2].", "startOffset": 136, "endOffset": 142}, {"referenceID": 8, "context": "Thus many researchers have attracted to solve minimum vertex cover problem [9, 18].", "startOffset": 75, "endOffset": 82}, {"referenceID": 17, "context": "Thus many researchers have attracted to solve minimum vertex cover problem [9, 18].", "startOffset": 75, "endOffset": 82}, {"referenceID": 2, "context": "Theoretical studied were carried out on the set cover by Cerderia and Pinto as focusing on the inequality conditions of vertices and edges in graphs [3, 19, 21].", "startOffset": 149, "endOffset": 160}, {"referenceID": 18, "context": "Theoretical studied were carried out on the set cover by Cerderia and Pinto as focusing on the inequality conditions of vertices and edges in graphs [3, 19, 21].", "startOffset": 149, "endOffset": 160}, {"referenceID": 20, "context": "Theoretical studied were carried out on the set cover by Cerderia and Pinto as focusing on the inequality conditions of vertices and edges in graphs [3, 19, 21].", "startOffset": 149, "endOffset": 160}, {"referenceID": 14, "context": "In general, proposed solutions for MVCP are classified in two categories as heuristic and approximation algorithms [15].", "startOffset": 115, "endOffset": 119}, {"referenceID": 3, "context": "Although, exact solution as branch and bound technique has been proposed for this problem, the time complexity is very high [4].", "startOffset": 124, "endOffset": 127}, {"referenceID": 2, "context": "For example, a greedy algorithm starts with an empty set, then, at each step, selects the best candidate with maximum degree and continues to reach the stop condition [3].", "startOffset": 167, "endOffset": 170}, {"referenceID": 4, "context": "In this algorithm, the obtained result is always lower than twice the optimum solution, although this approximate method does not optimum solution but can be provided near optimal solution [5].", "startOffset": 189, "endOffset": 192}, {"referenceID": 20, "context": "In [21], two approximation algorithms have been suggested for MVCP.", "startOffset": 3, "endOffset": 7}, {"referenceID": 20, "context": "Second algorithm uses greedy technique similar to former method while the optimal number of nodes must be determined before as input of algorithm [21].", "startOffset": 146, "endOffset": 150}, {"referenceID": 3, "context": "Another successful heuristic method for solving minimum vertex cover is genetic algorithm which finds a local optimum solution [4].", "startOffset": 127, "endOffset": 130}, {"referenceID": 3, "context": "According to local optimality, the previous methods may provide better solution for MVC, but it is shown that genetic algorithm obtains answers in less time [4, 22].", "startOffset": 157, "endOffset": 164}, {"referenceID": 21, "context": "According to local optimality, the previous methods may provide better solution for MVC, but it is shown that genetic algorithm obtains answers in less time [4, 22].", "startOffset": 157, "endOffset": 164}, {"referenceID": 10, "context": "Other successful method that can be referred here is parallel dynamic interaction (PDI), this method works much better than genetic and greedy methods in terms of convergence percentage of solution in consecutive iterations but has a higher running time and it does not provide a good result in large graphs [11].", "startOffset": 308, "endOffset": 312}, {"referenceID": 9, "context": "In recent years, several learning automata based algorithms are presented to solve graph problems and successful results have been reported in literatures such as shortest path problem [10], minimum spanning tree problem [24], minimum dominating set problem [25], maximum clique problem [13, 6] and graph coloring problem [26].", "startOffset": 185, "endOffset": 189}, {"referenceID": 23, "context": "In recent years, several learning automata based algorithms are presented to solve graph problems and successful results have been reported in literatures such as shortest path problem [10], minimum spanning tree problem [24], minimum dominating set problem [25], maximum clique problem [13, 6] and graph coloring problem [26].", "startOffset": 221, "endOffset": 225}, {"referenceID": 24, "context": "In recent years, several learning automata based algorithms are presented to solve graph problems and successful results have been reported in literatures such as shortest path problem [10], minimum spanning tree problem [24], minimum dominating set problem [25], maximum clique problem [13, 6] and graph coloring problem [26].", "startOffset": 258, "endOffset": 262}, {"referenceID": 12, "context": "In recent years, several learning automata based algorithms are presented to solve graph problems and successful results have been reported in literatures such as shortest path problem [10], minimum spanning tree problem [24], minimum dominating set problem [25], maximum clique problem [13, 6] and graph coloring problem [26].", "startOffset": 287, "endOffset": 294}, {"referenceID": 5, "context": "In recent years, several learning automata based algorithms are presented to solve graph problems and successful results have been reported in literatures such as shortest path problem [10], minimum spanning tree problem [24], minimum dominating set problem [25], maximum clique problem [13, 6] and graph coloring problem [26].", "startOffset": 287, "endOffset": 294}, {"referenceID": 25, "context": "In recent years, several learning automata based algorithms are presented to solve graph problems and successful results have been reported in literatures such as shortest path problem [10], minimum spanning tree problem [24], minimum dominating set problem [25], maximum clique problem [13, 6] and graph coloring problem [26].", "startOffset": 322, "endOffset": 326}, {"referenceID": 11, "context": "Learning automaton (LA) [12, 14] is an abstract model of finite state machine so that it can perform finite actions which randomly chosen and evaluated by a stochastic environment and response is given as reward or penalty to LA.", "startOffset": 24, "endOffset": 32}, {"referenceID": 13, "context": "Learning automaton (LA) [12, 14] is an abstract model of finite state machine so that it can perform finite actions which randomly chosen and evaluated by a stochastic environment and response is given as reward or penalty to LA.", "startOffset": 24, "endOffset": 32}, {"referenceID": 23, "context": "If a=b learning algorithm is called linear reward penalty (LRP), if b<<a given learning algorithm is called linear reward-\u03b5 penalty (LR-\u03b5P), and finally if b=0 it is called linear reward inaction (LR-I) [24-26].", "startOffset": 203, "endOffset": 210}, {"referenceID": 24, "context": "If a=b learning algorithm is called linear reward penalty (LRP), if b<<a given learning algorithm is called linear reward-\u03b5 penalty (LR-\u03b5P), and finally if b=0 it is called linear reward inaction (LR-I) [24-26].", "startOffset": 203, "endOffset": 210}, {"referenceID": 25, "context": "If a=b learning algorithm is called linear reward penalty (LRP), if b<<a given learning algorithm is called linear reward-\u03b5 penalty (LR-\u03b5P), and finally if b=0 it is called linear reward inaction (LR-I) [24-26].", "startOffset": 203, "endOffset": 210}, {"referenceID": 9, "context": "The model of DLA network denotes a graph in each of vertex is an automaton [10].", "startOffset": 75, "endOffset": 79}, {"referenceID": 9, "context": "cause activation of LAj by LAi [10, 13].", "startOffset": 31, "endOffset": 39}, {"referenceID": 12, "context": "cause activation of LAj by LAi [10, 13].", "startOffset": 31, "endOffset": 39}, {"referenceID": 22, "context": "At successive iterations entropy value will be came down [23].", "startOffset": 57, "endOffset": 61}, {"referenceID": 19, "context": "Results of proposed algorithm (VCLA) are compared with results of state of the art techniques such as EWLS [20] and EWCC [9] in table 1.", "startOffset": 107, "endOffset": 111}, {"referenceID": 8, "context": "Results of proposed algorithm (VCLA) are compared with results of state of the art techniques such as EWLS [20] and EWCC [9] in table 1.", "startOffset": 121, "endOffset": 124}, {"referenceID": 16, "context": "Comparison of coverage in SA and ESA [17] methods for proposed algorithm is also shown in figure 5 as a bar chart", "startOffset": 37, "endOffset": 41}], "year": 2013, "abstractText": "Minimum vertex cover problem is an NP-Hard problem with the aim of finding minimum number of vertices to cover graph. In this paper, a learning automaton based algorithm is proposed to find minimum vertex cover in graph. In the proposed algorithm, each vertex of graph is equipped with a learning automaton that has two actions in the candidate or noncandidate of the corresponding vertex cover set. Due to characteristics of learning automata, this algorithm significantly reduces the number of covering vertices of graph. The proposed algorithm based on learning automata iteratively minimize the candidate vertex cover through the update its action probability. As the proposed algorithm proceeds, a candidate solution nears to optimal solution of the minimum vertex cover problem. In order to evaluate the proposed algorithm, several experiments conducted on DIMACS dataset which compared to conventional methods. Experimental results show the major superiority of the proposed algorithm over the other methods. Keywords\u2014 Minimum Vertex Cover; NP-Hard problems; Learning Automata; Distributed learning automata.", "creator": "Microsoft\u00ae Word 2010"}}}