{"id": "1312.0127", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Nov-2013", "title": "Characterizing and Extending Answer Set Semantics using Possibility Theory", "abstract": "Answer Set Programming (ASP) is a popular framework for modeling combinatorial problems. However, ASP cannot easily be used for reasoning about uncertain information. Possibilistic ASP (PASP) is an extension of ASP that combines possibilistic logic and ASP. In PASP a weight is associated with each rule, where this weight is interpreted as the certainty with which the conclusion can be established when the body is known to hold. As such, it allows us to model and reason about uncertain information in an intuitive way. In this paper we present new semantics for PASP, in which rules are interpreted as constraints on possibility distributions. Special models of these constraints are then identified as possibilistic answer sets. In addition, since ASP is a special case of PASP in which all the rules are entirely certain, we obtain a new characterization of ASP in terms of constraints on possibility distributions. This allows us to uncover a new form of disjunction, called weak disjunction, that has not been previously considered in the literature. In addition to introducing and motivating the semantics of weak disjunction, we also pinpoint its computational complexity. In particular, while the complexity of most reasoning tasks coincides with standard disjunctive ASP, we find that brave reasoning for programs with weak disjunctions is easier. This is due to the simplicity of ASP that allows us to describe simple functions with weak disjunction. It is also because of the simplicity of the proposed method, that we are able to describe some examples of the simple-and-complex-satisfaction method. As such, we have found that strong disjunction can be used in many cases. We are able to understand the concept of weak disjunction in terms of constraint. In such a case the only rule to apply strong disjunction is the rule which is not the rule which is the constraint which is not the constraint which is the constraint which is not the constraint which is not the constraint which is not the constraint which is not the constraint which is the constraint which is not the constraint which is the constraint which is not the constraint which is the constraint which is not the constraint which is the constraint which is the constraint which is the constraint which is the constraint which is not the constraint which is the constraint which is not the constraint which is not the constraint which is not the constraint which is the constraint which is not the constraint which is not the constraint which is not the constraint which is the constraint which is not the constraint which is not the constraint which", "histories": [["v1", "Sat, 30 Nov 2013 17:12:48 GMT  (364kb)", "http://arxiv.org/abs/1312.0127v1", "39 pages and 16 pages appendix with proofs. This article has been accepted for publication in Theory and Practice of Logic Programming, Copyright Cambridge University Press"]], "COMMENTS": "39 pages and 16 pages appendix with proofs. This article has been accepted for publication in Theory and Practice of Logic Programming, Copyright Cambridge University Press", "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["kim bauters", "steven schockaert", "martine de cock", "dirk vermeir"], "accepted": false, "id": "1312.0127"}, "pdf": {"name": "1312.0127.pdf", "metadata": {"source": "CRF", "title": "Characterizing and Extending Answer Set Semantics using Possibility Theory", "authors": ["KIM BAUTERS", "STEVEN SCHOCKAERT", "MARTINE DE COCK", "DIRK VERMEIR"], "emails": ["kim.bauters@gmail.com)", "s.schockaert@cs.cardiff.ac.uk)", "martine.decock@ugent.be)", "dirk.vermeir@vub.ac.be)"], "sections": [{"heading": null, "text": "ar X\niv :1\nAnswer Set Programming (ASP) is a popular framework for modeling combinatorial problems. However, ASP cannot easily be used for reasoning about uncertain information. Possibilistic ASP (PASP) is an extension of ASP that combines possibilistic logic and ASP."}, {"heading": "In PASP a weight is associated with each rule, where this weight is interpreted as the certainty with which the conclusion can be established when the body is known to hold.", "text": "As such, it allows us to model and reason about uncertain information in an intuitive way. In this paper we present new semantics for PASP, in which rules are interpreted as constraints on possibility distributions. Special models of these constraints are then identified as possibilistic answer sets. In addition, since ASP is a special case of PASP in which all the rules are entirely certain, we obtain a new characterization of ASP in terms of constraints on possibility distributions. This allows us to uncover a new form of disjunction, called weak disjunction, that has not been previously considered in the literature. In addition to introducing and motivating the semantics of weak disjunction, we also pinpoint its computational complexity. In particular, while the complexity of most reasoning tasks coincides with standard disjunctive ASP, we find that brave reasoning for programs with weak disjunctions is easier.\nKEYWORDS: logic programming, answer set programming, possibility theory"}, {"heading": "1 Introduction", "text": "Answer set programming (ASP) is a form of logic programming with a fully declarative semantics, centered around the notion of a stable model. Syntactically, an ASP program is a set of rules of the form (head\u2190 body) where head is true whenever body is true. Possibilistic ASP (PASP) extends upon ASP by associating a weight with every rule, which is interpreted as the necessity with which we can derive the head of the rule when the body is known to hold. Semantics for PASP have been introduced in (Nicolas et al. 2006) for possibilistic normal programs and later extended to possibilistic disjunctive programs in (Nieves et al. 2013). Under these semantics, a possibilistic rule with certainty \u03bb allows us to derive head with certainty min(\u03bb,N(body)) where N(body) denotes the necessity of the body, i.e. the certainty of head is restricted by the least certain piece of information in the derivation chain. Specifically, to deal with PASP rules without negation-as-failure, the semantics from (Nicolas et al. 2006) treat such rules as implications in possibilistic logic (Dubois et al. 1994). When faced with negation-as-failure, the semantics from (Nicolas et al. 2006) rely on the reduct operation from classical ASP. Essentially, this means that the weights associated with the rules are initially ignored, the classical reduct is determined and the weights are then reassociated with the corresponding rules in the reduct. Given this particular treatment of negation-as-failure, the underlying intuition of \u2018not l\u2019 is \u201c\u2018l\u2019 cannot be derived with a strictly positive certainty\u201d. Indeed, as soon as \u2018l\u2019 can be derived with a certainty \u03bb > 0, \u2018l\u2019 is treated as true when determining the reduct. However, this particular understanding of negationas-failure is not always the most intuitive one.\nConsider the following example. You want to go to the airport, but you notice that your passport will expire in less than three months. Some countries require that the passport is at least valid for an additional three months on the date of entry. As such, you have some certainty that your passport might be invalid (invalid ). When you are not entirely certain that your passport is invalid, you should still go to the airport (airport) and check-in nonetheless. Indeed, since you are not absolutely certain that you will not be allowed to board, you might still get lucky. We have the possibilistic program:\n0.1: invalid \u2190\n1: airport \u2190 not invalid\nwhere 0.1 and 1 are the weights associated with the rules (invalid \u2190) and airport \u2190 invalid , respectively. Clearly, what we would like to be able to conclude with a high certainty is that you need to go to the airport to check-in. However, as the semantics from (Nicolas et al. 2006) adhere to a different intuition of negation-as-failure, the conclusion is that you need to go to the airport with a necessity of 0. Or, in other words, you should not go to the airport at all.\nAs a first contribution in this paper, we present new semantics for PASP by interpreting possibilistic rules as constraints on possibility distributions. These semantics do not correspond with the semantics from (Nicolas et al. 2006) when considering programs with negation-as-failure. Specifically, the semantics presented in\nthis paper can be used in settings in which the possibilistic answer sets according to (Nicolas et al. 2006) do not correspond with the intuitively acceptable results. For the example mentioned above, the conclusion under the new semantics is that you need to go to the airport with a necessity of 0.9.\nIn addition, the new semantics allow us to uncover a new characterization of ASP in terms of possibility theory. Over the years, many equivalent approaches have been proposed to define the notion of an answer set. One of the most popular characterizations is in terms of the Gelfond-Lifschitz reduct (Gelfond and Lifzchitz 1988) in which an answer set is guessed and verified to be stable. This characterization is used in the semantics for PASP as presented in (Nicolas et al. 2006). Alternatively, the answer set semantics of normal programs can be defined in terms of autoepistemic logic (Marek and Truszczyn\u0301ski 1991), a well-known non-monotonic modal logic. An important advantage of the latter approach is that autoepistemic logic enjoys more syntactic freedom, which opens the door to more expressive forms of logic programming. However, as has been shown early on in (Lifschitz and Schwarz 1993), the characterization in terms of autoepistemic logic does not allow us to treat classical negation or disjunctive rules in a natural way, which weakens its position as a candidate for generalizing ASP from normal programs to e.g. disjunctive programs. Equilibrium logic (Pearce 1997) offers yet another way for characterizing and extending ASP, but does not feature modalities which limits its potential for epistemic reasoning as it does not allow us to reason over the established knowledge of an agent. The new characterization of ASP, as presented in this paper, is a characterization in terms of necessary and contingent truths, where possibility theory is used to express our certainty in logical propositions. Such a characterization is unearthed by looking at ASP as a special case of PASP in which the rules are certain and no uncertainty is allowed in the answer sets. It highlights the intuition of ASP that the head of a rule is certain when the information encoded in its body is certain. Furthermore, this characterization stays close to the intuition of the Gelfond-Lifschitz reduct, while sharing the explicit reference to modalities with autoepistemic logic.\nAs a second contribution, we show in this paper how this new characterization of ASP in terms of possibility theory can be used to uncover a new form of disjunction in both ASP and PASP. As indicated, we have that the new semantics offer us an explicit reference to modalities, i.e. operators with which we can qualify a statement. Epistemic logic is an example of a modal logic in which we use the modal operatorK to reason about knowledge, where K is intuitively understood as \u201cwe know that\u201d. A statement such as a\u2228 b\u2228 c can then be treated in two distinct ways. On the one hand, we can interpret this statement as Ka \u2228 Kb \u2228 Kc, which makes it explicit that we know that one of the disjuncts is true. This treatment corresponds with the understanding of disjunction in disjunctive ASP and will be referred to as strong disjunction. Alternatively, we can interpret a \u2228 b \u2228 c as K(a \u2228 b \u2228 c) which only states that we know that the disjunction is true, i.e. we do not know which of the disjuncts is true. We will refer to this form of disjunction as weak disjunction. This is the new form of disjunction that we will discuss in this paper, as it allows us\nto reason in settings where a choice cannot or should not be made. Still, such a framework allows for non-trivial forms of reasoning.\nConsider the following example. A SCADA (supervisory control and data acquisition) system is used to monitor the brewing of beer in an industrialised setting. To control the fermentation, the system regularly verifies an air-lock for the presence of bubbles. An absence of bubbles may be due to a number of possible causes. On the one hand there may be a production problem such as a low yeast count or low temperature. Adding yeast when the temperature is low results in a beer with a strong yeast flavour, which should be avoided. Raising the temperature when there is too little yeast present will kill off the remaining yeast and will ruin the entire batch. On the other hand, there may be technical problems. There may be a malfunction in the SCADA system, which can be verified by running a diagnostic. The operator runs a diagnostic (diagnostic), which reports back that there is no malfunction (\u00acmalfunction). Or, alternatively, the air-lock may not be sealed correctly (noseal). The operator furthermore checks the temperature because he suspects that the temperature is the problem (verifytemp), but the defective temperature sensor returns no temperature when checked (notemp). These three technical problems require physical maintenance and the operator should send someone out to fix them. Technical problems do not affect the brewing. As such, the brewing process should not be interrupted for such problems as this will ruin the current batch. If there is a production problem, however, the brewing process needs to be interrupted as soon as possible (in addition, evidently, to interrupting the brewing process when the brewing is done). This prevents the current batch from being ruined due to over-brewing but also allows the interaction with the contents of the kettle. In particular, when the problem is diagnosed to be low yeast the solution is to add a new batch of yeast and restart the process. Similarly, low temperature can be solved by raising the kettle temperature and restarting the fermentation process. Obviously, the goal is to avoid ruining the current batch. An employer radios in that the seal is okay. We have the following program:\nlowyeast \u2228 lowtemp \u2228 noseal \u2228malfunction \u2190 not bubbles\ndiagnostic \u2190\n\u00acmalfunction \u2190 diagnostic\nverifytemp \u2190\nnotemp \u2190 verifytemp\nmaintenance \u2190 noseal \u2228malfunction \u2228 notemp\nbrew \u2190 not (lowyeast \u2228 lowtemp \u2228 done)\naddyeast \u2190 lowyeast\nraisetemp \u2190 lowtemp\nruin \u2190 raisetemp, not lowtemp\nruin \u2190 addyeast , not lowyeast\nruin \u2190 not brew , not (lowtemp \u2228 lowyeast)\n\u2190 ruin\n\u00acnoseal \u2190\nThe program above does not use the standard ASP syntax since we allow for disjunction in the body. Furthermore, the disjunction used in the head and the body is weak disjunction. The only information that we can therefore deduce from e.g. the first rule is (lowyeast \u2228 lowtemp \u2228 noseal \u2228malfunction). At first, this new form of disjunction may indeed appear weaker that strong disjunction since it does not induce a choice. Still, even without inducing a choice, conclusions obtained from other rules may allow us to refine our knowledge. In particular, note that from lowyeast \u2228 lowtemp \u2228 noseal \u2228 malfunction together with \u00acmalfunction and \u00acnoseal we can entail lowyeast \u2228 lowtemp. Similarly, conclusions can also have prerequisites that are disjunctions. For example, we can no longer deduce brew since lowyeast \u2228 lowtemp entails lowyeast \u2228 lowtemp \u2228 done. From maintenance \u2190 noseal \u2228 malfunction \u2228 notemp and notemp we can deduce that we should call maintenance. However, we do not yet have enough information to diagnose whether yeast should be added or whether the temperature should be raised. The unique answer set of this program, according to the semantics of weak disjunction which we present in Section 4, is given by\n{lowyeast \u2228 lowtemp,maintenance,\ndiagnostic,\u00acmalfunction , verifytemp, notemp,\u00acnoseal}\nThe expressiveness of weak disjunction becomes clear when we study its complexity. In particular, we show that while most complexity results coincide with the strong disjunctive semantics, the complexity of brave reasoning (deciding whether a literal \u2018l\u2019 is entailed by a consistent answer set of program P ) in absence of negationas-failure is lower for weak disjunction. Still, the expressiveness is higher than for normal programs. The complexity results are summarized in Table 1 in Section 5.\nThe remainder of this paper is organized as follows. In Section 2 we provide the reader with some important notions from answer set programming and possibilistic logic. In Section 3 we introduce new semantics for PASP which can furthermore be used to characterize normal ASP programs using possibility theory. In Section 4 we characterize disjunctive ASP in terms of constraints on possibility distributions and we discuss the complexity results of the new semantics for PASP in detail in Section 5. Related work is discussed in Section 6 and we formulate our conclusions in Section 7.\nThis paper aggregates and extends parts of our work from (Bauters et al. 2011) and substantially extends a previous conference paper (Bauters et al. 2010), which did not consider classical negation nor computational complexity. In addition, rather than limiting ourselves to atoms in this paper, we extend our work to cover the case of literals, which offer interesting and unexpected results in the face of weak disjunction. Complexity results are added for all reasoning tasks and full proofs are provided in appendix."}, {"heading": "2 Background", "text": "We start by reviewing the definitions from both answer set programming and possibilistic logic that will be used in the remainder of the paper. We then review the semantics of PASP from (Nicolas et al. 2006), a framework that combines possibilistic logic and ASP. Finally, we recall some notions from complexity theory."}, {"heading": "2.1 Answer Set Programming", "text": "To define ASP programs, we start from a finite set of atoms A. A literal is defined as an atom a or its classical negation \u00aca. For L a set of literals, we use \u00acL to denote the set {\u00acl | l \u2208 L} where, by definition, \u00ac\u00aca = a. A set of literals L is consistent if L\u2229 \u00acL = \u2205. We write the set of all literals as L = (A\u222a\u00acA). A naf-literal is either a literal \u2018l\u2019 or a literal \u2018l\u2019 preceded by not, which we call the negation-as-failure operator. Intuitively, \u2018not l\u2019 is true when we cannot prove \u2018l\u2019. An expression of the form\nl0; ...; lk \u2190 lk+1, ..., lm, not lm+1, ..., not ln\nwith li a literal for every 0 \u2264 i \u2264 n, is called a disjunctive rule. We call l0; ...; lk the head of the rule (interpreted as a disjunction) and lk+1, ..., lm, not lm+1, ..., not ln the body of the rule (interpreted as a conjunction). For a rule r we use head(r) and body(r) to denote the set of literals in the head, resp. the body. Specifically, we use body+(r) to denote the set of literals in the body that are not preceded by the negation-as-failure operator \u2018not\u2019 and body\u2212(r) for those literals that are preceded by \u2018not\u2019. Whenever a disjunctive rule does not contain negation-as-failure, i.e. when n = m, we say that it is a positive disjunctive rule. A rule with an empty body, i.e. a rule of the form (l0; ...; lk \u2190), is called a fact and is used as a shorthand for (l0; ...; lk \u2190 \u22a4) with \u22a4 a special language construct that denotes tautology. A rule with an empty head, i.e. a rule of the form (\u2190 lk+1, ..., lm, not lm+1, ..., not ln), is called a constraint rule and is used as a shorthand for the rule of the form (\u22a5 \u2190 lk+1, ..., lm, not lm+1, ..., not ln) with \u22a5 a special language construct that denotes contradiction.\nA (positive) disjunctive program P is a set of (positive) disjunctive rules. A normal rule is a disjunctive rule with at most one literal in the head. A simple rule is a normal rule with no negation-as-failure. A definite rule is a simple rule with no classical negation, i.e. in which all literals are atoms. A normal ( resp. simple, definite) program P is a set of normal (resp. simple, definite) rules.\nThe Herbrand base BP of a disjunctive program P is the set of atoms appearing in P . We define the set of literals that are relevant for a disjunctive program P as LitP = (BP \u222a \u00acBP ). An interpretation I of a disjunctive program P is any set of literals I \u2286 LitP . A consistent interpretation I is an interpretation I that does not contain both a and \u00aca for some a \u2208 I.\nA consistent interpretation I is said to be amodel of a positive disjunctive rule r if head(r)\u2229I 6= \u2205 or body(r) 6\u2286 I, i.e. the body is false or the head is true. In particular, a consistent interpretation I is a model of a constraint rule r if body(r) 6\u2286 I. If for an interpretation I and a constraint rule r we have that body(r) \u2286 I, then we say\nthat the interpretation I violates the constraint rule r. Notice that for a fact rule we require that head(r) \u2229 I 6= \u2205, i.e. at least one of the literals in the head must be true. Indeed, otherwise I would not be a model of r. An interpretation I of a positive disjunctive program P is a model of P either if I is consistent and for every rule r \u2208 P we have that I is a model of r, or if I = LitP . It follows from this definition that LitP is always a model of P , and that all other models of P (if any) are consistent interpretations, which we will further on also refer to as consistent models. We say that I is an answer set of the positive disjunctive program P when I is a minimal model of P w.r.t. set inclusion.\nThe semantics of an ASP program with negation-as-failure is based on the idea of a stable model (Gelfond and Lifzchitz 1988). The reduct P I of a disjunctive program P w.r.t. the interpretation I is defined as:\nP I ={l0; . . . ; lk \u2190 lk+1, ..., lm | ({lm+1, ..., ln} \u2229 I = \u2205)\n\u2227 (l0; ...; lk \u2190 lk+1, ..., lm, not lm+1, ..., not ln) \u2208 P}.\nAn interpretation I is said to be an answer set of the disjunctive program P when I is an answer set of the positive disjunctive program P I (hence the notion of stable model). Note that we can also write the disjunctive program P as P = P \u2032\u222aC where C is the set of constraint rules in P . An interpretation I then is an answer set of the disjunctive program P when I is an answer set of P \u2032 and I is a model of C, i.e. I does not violate any constraints in C. Whenever P has consistent answer sets, i.e. answer sets that are consistent interpretations, we say that P is a consistent program. When P has the answer set LitP , then this is the unique (Baral 2003) inconsistent answer set and we say that P is an inconsistent program.\nAnswer sets of simple programs can also be defined in a more procedural way. By using the immediate consequence operator TP , which is defined for a simple program P without constraint rules and w.r.t. an interpretation I as:\nTP (I) = {l0 | (l0 \u2190 l1, ..., lm) \u2208 P \u2227 {l1, ..., lm} \u2286 I} .\nWe use P \u22c6 to denote the fixpoint which is obtained by repeatedly applying TP starting from the empty interpretation \u2205, i.e. it is the least fixpoint of TP w.r.t. set inclusion. When the interpretation P \u22c6 is consistent, P \u22c6 is the (unique and consistent) answer set of the simple program P without constraint rules. When we allow constraint rules, an interpretation is a (consistent) answer set of P = P \u2032 \u222aC iff I is a (consistent) answer set of P and I is a model of C. For both simple and normal programs, with or without constraint rules, we have that LitP is the (unique and inconsistent) answer set of P if P has no consistent answer set(s)."}, {"heading": "2.2 Possibilistic Logic", "text": "An interpretation in possibilistic logic corresponds with the notion of an interpretation in propositional logic. We represent such an interpretation as a set of atoms \u03c9, where \u03c9 |= a if a \u2208 \u03c9 and \u03c9 |= \u00aca otherwise with |= the satisfaction relation from classical logic. The set of all interpretations is defined as \u2126 = 2A, with A a finite set of atoms. At the semantic level, possibilistic logic (Dubois et al. 1994) is defined in\nterms of a possibility distribution \u03c0 on the universe of interpretations. A possibility distribution, which is an \u2126 \u2192 [0, 1] mapping, encodes for each interpretation (or world) \u03c9 to what extent it is plausible that \u03c9 is the actual world. By convention, \u03c0(\u03c9) = 0 means that \u03c9 is impossible and \u03c0(\u03c9) = 1 means that no available information prevents \u03c9 from being the actual world. A possibility distribution \u03c0 is said to be normalized if \u2203\u03c9 \u2208 \u2126 \u00b7\u03c0(\u03c9) = 1, i.e. at least one interpretation is entirely plausible. We say that a possibility distribution \u03c0 is vacuous when \u2200\u03c9 \u2208 \u2126 \u00b7 \u03c0(\u03c9) = 0. Note that possibility degrees are mainly interpreted qualitatively: when \u03c0(\u03c9) > \u03c0(\u03c9\u2032), \u03c9 is considered more plausible than \u03c9\u2032. For two possibility distributions \u03c01 and \u03c02 with the same domain \u2126 we write \u03c01 \u2265 \u03c02 when \u2200\u03c9 \u2208 \u2126 \u00b7 \u03c01(\u03c9) \u2265 \u03c02(\u03c9) and we write \u03c01 > \u03c02 when \u03c01 \u2265 \u03c02 and \u03c01 6= \u03c02.\nA possibility distribution \u03c0 induces two uncertainty measures that allow us to\nrank propositions. The possibility measure \u03a0 is defined by (Dubois et al. 1994):\n\u03a0(p) = max {\u03c0(\u03c9) | \u03c9 |= p}\nand evaluates the extent to which a proposition p is consistent with the beliefs expressed by \u03c0. The dual necessity measure N is defined by:\nN(p) = 1\u2212\u03a0(\u00acp)\nand evaluates the extent to which a proposition p is entailed by the available beliefs (Dubois et al. 1994). Note that we always have N(\u22a4) = 1 for any possibility distribution, while \u03a0(\u22a4) = 1 (and, related, N(\u22a5) = 0) only holds when the possibility distribution is normalized (i.e. only normalized possibility distributions can express consistent beliefs) (Dubois et al. 1994). To identify the possibility/necessity measure associated with a specific possibility distribution \u03c0X, we will use a subscript notation, i.e. \u03a0X and NX are the corresponding possibility and necessity measure, respectively. We omit the subscript when the possibility distribution is clear from the context.\nAn important property of necessity measures is the min-decomposability property w.r.t. conjunction: N(p \u2227 q) = min(N(p), N(q)) for all propositions p and q. However, for disjunction only the inequality N(p \u2228 q) \u2265 max(N(p), N(q)) holds. As possibility measures are the dual measures of necessity measures, they have the property of max-decomposability w.r.t. disjunction, whereas for the conjunction only the inequality \u03a0(p \u2227 q) \u2264 min (\u03a0(p),\u03a0(q)) holds.\nAt the syntactic level, a possibilistic knowledge base consists of pairs (p, c) where p is a propositional formula and c \u2208 ]0, 1] expresses the certainty that p is the case. Formulas of the form (p, 0) are not explicitly represented in the knowledge base since they encode trivial information. A formula (p, c) is interpreted as the constraint N(p) \u2265 c, i.e. a possibilistic knowledge base \u03a3 corresponds to a set of constraints on possibility distributions. Typically, there can be many possibility distributions that satisfy these constraints. In practice, we are usually only interested in the least specific possibility distribution, which is the possibility distribution that makes minimal commitments, i.e. the greatest possibility distribution w.r.t. the ordering > defined above. Such a least specific possibility distribution always exists and is unique (Dubois et al. 1994).\nIn Section 4 we will also consider constraints that deviate from the form of constraints we just discussed. As a result, there can be multiple minimally specific possibility distributions rather than a unique least specific possibility distribution. To increase the uniformity throughout the paper we immediately start using the concept of a minimally specific possibility distribution, which is a maximal possibility distribution w.r.t. the ordering >, even though the distinction between the least specific possibility distribution and minimally specific possibility distributions only becomes relevant once we discuss the characterization of disjunctive programs."}, {"heading": "2.3 Possibilistic Answer Set Programming", "text": "Possibilistic ASP (PASP) (Nicolas et al. 2006) combines ASP and possibility theory by associating a weight with each rule, where the weight denotes the necessity with which the head of the rule can be concluded given that the body is known to hold. If it is uncertain whether the body holds, the necessity with which the head can be derived is the minimum of the weight associated with the rule and the degree to which the body is necessarily true.\nSyntactically, a possibilistic disjunctive (resp. normal, simple, definite) program is a set of pairs p = (r, \u03bb) with r a disjunctive (resp. normal, simple, definite) rule and \u03bb \u2208 ]0, 1] a certainty associated with r. Possibilistic rules with \u03bb = 0 are generally omitted as only trivial information can be derived from them. We will also write a possibilistic rule p = (r, \u03bb) with r a disjunctive rule of the form (l0; ...; lk \u2190 lk+1, ..., lm, not lm+1, ..., not ln) as:\n\u03bb : l0; ...; lk \u2190 lk+1, ..., lm, not lm+1, ..., not ln.\nFor a possibilistic rule p = (r, \u03bb) we use p\u2217 to denote r, i.e. the classical rule obtained by ignoring the certainty. Similarly, for a possibilistic program P we use P \u2217 to denote the set of rules {p\u2217 | p \u2208 P}. The set of all weights found in a possibilistic program P is denoted by cert(P ) = {\u03bb | p = (r, \u03bb) \u2208 P}. We will also use the extended set of weights cert+(P ), defined as cert+(P ) = {\u03bb | \u03bb \u2208 cert(P )} \u222a {1\u2212 \u03bb | \u03bb \u2208 cert(P )} \u222a {\n0, 12 , 1 } .\nSemantically, PASP is based on a generalization of the concept of an interpretation. In classical ASP, an interpretation can be seen as a mapping I : LitP \u2192 {0, 1}, i.e. a literal l \u2208 LitP is either true or false. This notion is generalized in PASP to a valuation, which is a function V : LitP \u2192 [0, 1]. The underlying intuition of V (l) = \u03bb is that the literal \u2018l\u2019 is true with certainty \u2018\u03bb\u2019, which we will also write in set notation as l\u03bb \u2208 V . As such, a valuation corresponds with the set of constraints { N(l) \u2265 \u03bb | l\u03bb \u2208 V } . Note that, like interpretations in ASP, these valuations are of an epistemic nature, i.e. they reflect what we know about the truth of atoms. For notational convenience, we often also use the set notation V = { l\u03bb, . . . } . In accordance with this set notation, we write V = \u2205 to denote the valuation in which each literal is mapped to 0. For \u03bb \u2208 [0, 1] a certainty and V a valuation, we use V \u03bb to denote the classical projection {l | l \u2208 LitP , V (l) \u2265 \u03bb}. We also use V \u03bb = {l | l \u2208 LitP , V (l) > \u03bb}, i.e. those literals that can be derived to be true with certainty strictly greater than \u2018\u03bb\u2019. A valuation is said to be consistent when V 0 is\nconsistent. In such a case, there always exists a normalized possibility distribution \u03c0V such that NV (l) = V (l).\nWe now present a straightforward extension of the semantics for PASP introduced in (Nicolas et al. 2006). Let the \u03bb-cut P\u03bb of a possibilistic program P , with \u03bb \u2208 [0, 1], be defined as:\nP\u03bb = {r | (r, \u03bb \u2032) \u2208 P and \u03bb\u2032 \u2265 \u03bb} ,\ni.e. the rules in P with an associated certainty higher than or equal to \u2018\u03bb\u2019.\nDefinition 1 Let P be a possibilistic simple program and V a valuation. The immediate consequence operator TP is defined as:\nTP (V )(l0) = max { \u03bb \u2208 [0, 1] | V \u03bb |= l1, ..., lm and (l0 \u2190 l1, ..., lm) \u2208 P\u03bb } .\nThe intuition of Definition 1 is that we can derive the head only with the certainty of the weakest piece of information, i.e. the necessity of the conclusion is restricted either by the certainty of the rule itself or the lowest certainty of the literals used in the body of the rule. Note that the immediate consequence operator defined in Definition 1 is equivalent to the one proposed in (Nicolas et al. 2006), although we formulate it somewhat differently. Also, the work from (Nicolas et al. 2006) only considered definite programs, even though adding classical negation does not impose any problems.\nAs before, we use P \u22c6 to denote the fixpoint obtained by repeatedly applying TP starting from the minimal valuation V = \u2205, i.e. the least fixpoint of TP w.r.t. set inclusion. A valuation V is said to be the answer set of a possibilistic simple program if V = P \u22c6 and V is consistent. Answer sets of possibilistic normal programs are defined using a reduct. Let L be a set of literals. The reduct PL of a possibilistic normal program is defined as (Nicolas et al. 2006):\nPL = {(head(r) \u2190 body+(r), \u03bb) | (r, \u03bb) \u2208 P and body\u2212(r) \u2229 L = \u2205} .\nA consistent valuation V is said to be a possibilistic answer set of the possibilistic normal program P iff ( P (V 0) )\u22c6 = V , i.e. if V is the answer set of the reduct P (V 0).\nExample 1 Consider the possibilistic normal program P from the introduction:\n0.1: invalid \u2190\n1: airport \u2190 not invalid\nIt is easy to verify that { invalid0 .1 } is a possibilistic answer set of P . Indeed, P {invalid} is the set of rules:\n0.1: invalid \u2190\nfrom which it trivially follows that (P {invalid}) \u22c6 = { invalid 0 .1 } . The conclusion is thus that we do not need to go to the airport, which differs from our intuition of the problem. We will revisit this example in Example 4 in Section 3.2.\nThe semantics we presented allow for classical negation, even though this was not considered in (Nicolas et al. 2006). However, adding classical negation does not impose any problems and could, as an alternative, easily be simulated in ASP (Baral 2003)."}, {"heading": "2.4 Complexity Theory", "text": "Finally, we recall some notions from complexity theory. The complexity classes \u03a3P2 and \u03a0P2 are defined as follows (Papadimitriou 1994):\n\u03a3P0 = \u03a0 P 0 = P \u03a3P1 = NP \u03a3 P 2 = NP NP \u03a0P1 = coNP \u03a0 P 2 = co\u03a3 P 2\nwhere NPNP is the class of problems that can be solved in polynomial time on a non-deterministic machine with an NP oracle, i.e. assuming a procedure that can solve NP problems in constant time. We also consider the complexity class BH2 (Cai et al. 1988), which is the class of all languages L such that L = L1 \u2229 L2, where L1 is in NP and L2 is in coNP. For a general complexity class C, a problem is C-hard if any problem in C can be polynomially reduced to this problem. A problem is said to be C-complete if the problem is in C and the problem is C-hard. Deciding the validity of a Quantified Boolean Formula (QBF) \u03c6 = \u2203X1\u2200X2 \u00b7 p(X1, X2) with p(X1, X2) in disjunctive normal form (DNF) is the canonical \u03a3 P 2 -complete problem. The decision problems we consider in this paper are brave reasoning (deciding whether a literal \u2018l\u2019 (clause \u2018e\u2019) is entailed by a consistent answer set of program P ), cautious reasoning (deciding whether a literal \u2018l\u2019 (clause \u2018e\u2019) is entailed by every consistent answer set of a program P ) and answer set existence (deciding whether a program P has a consistent answer set). Brave reasoning as well as answer set existence for simple, normal and disjunctive programs is P-complete, NP-complete and \u03a3P2 -complete, respectively (Baral 2003). Cautious reasoning for simple, normal and disjunctive programs is P-complete, coNP-complete and \u03a0P2 - complete (Baral 2003)."}, {"heading": "3 Characterizing (P)ASP", "text": "ASP lends itself well to being characterized in terms of modalities. For instance, ASP can be characterized in autoepistemic logic by interpreting \u2018not a\u2019 as the epistemic formula \u00acLa (\u201ca is not believed\u201d) (Gelfond 1987). In this paper, as an alternative, we show how ASP can be characterized within possibility theory. To arrive at this characterization, we first note that ASP is essentially a special case of PASP in which every rule is certain. As such, we will show how PASP can be characterized within possibility theory. This characterization does not coincide with the semantics proposed in (Nicolas et al. 2006) for PASP, as the semantics from (Nicolas et al. 2006) rely on the classical Gelfond-Lifschitz reduct. Rather, the semantics that we propose for PASP adhere to a different intuition of negation-\nas-failure. A characterization of ASP is then obtained from these new semantics by considering the special case in which all rules are entirely certain.\nThis characterization of ASP, while still in terms of modalities, stays close in spirit to the Gelfond-Lifschitz reduct. In contrast to the characterization in terms of autoepistemic logic it does not require a special translation of literals to deal with classical negation and disjunction. The core idea of our characterization is to encode the meaning of each rule as a constraint on possibility distributions. Particular minimally specific possibility distributions that satisfy all the constraints imposed by the rules of a program will then correspond to the answer sets of that program. In this section, we first limit our scope to possibilistic simple programs (Section 3.1). Afterwards we will broaden the scope and also consider possibilistic normal programs (Section 3.2). The most general case, in which we also consider possibilistic disjunctive programs, will be discussed in Section 4."}, {"heading": "3.1 Characterizing Possibilistic Simple Programs", "text": "When considering a fact, i.e. a rule of the form r = (l0 \u2190 \u22a4), we know by definition that this rule encodes that the literal in the head is necessarily true, i.e. N(l0) = 1. If we attach a weight to a fact, then this expresses the knowledge that we are not entirely certain of the conclusion in the head, i.e. for a possibilistic rule p = (r, \u03bb) we have that N(l0) \u2265 N(\u22a4). Note that the constraint uses \u2265, as there may be other rules in the program that allow us to deduce l0 with a greater certainty.\nIn a similar fashion we can characterize a rule of the form (l0 \u2190 l1, ..., lm) as the constraint N(l0) \u2265 N(l1 \u2227 ... \u2227 lm) which is equivalent to the constraint N(l0) \u2265 min(N(l1), ..., N(lm)) due to the min-decomposability property of the necessity measure. Indeed, the intuition of such a rule is that the head is only necessarily true when every part of the body is true. When associating a weight with a rule, we obtain the constraint N(l0) \u2265 min(N(l1), ..., N(lm), \u03bb) for a possibilistic rule p = (r, \u03bb) with r = (l0 \u2190 l1, ..., lm). Similarly, to characterize a constraint rule, i.e. a rule of the form r = (\u22a5 \u2190 l1, ..., lm), we use the constraint N(\u22a5) \u2265 min(N(l1), ..., N(lm)), or, in the possibilistic case with p = (r, \u03bb), the constraint N(\u22a5) \u2265 min(N(l1), ..., N(lm), \u03bb).\nDefinition 2 Let P be a possibilistic simple program and \u03c0 : \u2126 \u2192 [0, 1] a possibility distribution. For every p \u2208 P , the constraint \u03b3(p) imposed by p = (r, \u03bb) with \u03bb \u2208 ]0, 1], r = (l0 \u2190 l1, ..., lm) and m \u2265 0 is given by\nN(l0) \u2265 min(N(l1), ..., N(lm), \u03bb). (1)\nCP = {\u03b3(p) | p \u2208 P} is the set of constraints imposed by program P . If \u03c0 satisfies the constraints in CP , \u03c0 is said to be a possibilistic model of CP , written \u03c0 |= CP . A possibilistic model of CP will also be called a possibilistic model of P . We write SP for the set of all minimally specific possibilistic models of P .\nDefinition 3\nLet P be a possibilistic simple program. Let \u03c0 be a minimally specific model of P , i.e. \u03c0 \u2208 SP . Then V = { lN (l) | l \u2208 LitP } is called a possibilistic answer set of P .\nExample 2 Consider the possibilistic simple program P with the rules:\n0.8 :a\u2190 0.6 :\u00acb\u2190 a\n0.7 : c\u2190 a,\u00acb 0.9 : d\u2190 d.\nThe set CP consists of the constraints:\nN(a) \u2265 0.8 N(\u00acb) \u2265 min(N(a), 0.6)\nN(c) \u2265 min(N(a), N(\u00acb), 0.7) N(d) \u2265 min(N(d), 0.9).\nIt is easy to see that the last constraint is trivial and can be omitted and that the other constraints can be simplified to \u03a0(\u00aca) \u2264 0.2, \u03a0(b) \u2264 0.4 and \u03a0(\u00acc) \u2264 0.4. The least specific possibility distribution that satisfies these constraints is given by:\n\u03c0({a, b, c, d}) = 0.4 \u03c0({a, c, d}) = 1 \u03c0({b, c, d}) = 0.2 \u03c0({c, d}) = 0.2\n\u03c0({a, b, c}) = 0.4 \u03c0({a, c}) = 1 \u03c0({b, c}) = 0.2 \u03c0({c}) = 0.2\n\u03c0({a, b, d}) = 0.4 \u03c0({a, d}) = 0.4 \u03c0({b, d}) = 0.2 \u03c0({d}) = 0.2\n\u03c0({a, b}) = 0.4 \u03c0({a}) = 0.4 \u03c0({b}) = 0.2 \u03c0({}) = 0.2.\nBy definition, since the possibility distribution \u03c0 satisfies the given constraints, is a possibilistic model. Furthermore, it is easy to see that \u03c0 is the unique minimally specific possibilistic model (due to least specificity). We can verify that N(\u00aca) = N(b) = N(\u00acc) = N(\u00acd) = 0 since we have that \u03c0({a, c, d}) = 1 and that N(d) = 0 since \u03c0({a, c}) = 1. Furthermore it is easy to verify that N(a) = 0.8, N(\u00acb) = 0.6 and N(c) = 0.6. Hence we find that V = { a0 .8 ,\u00acb0 .6 , c0 .6 } is a possibilistic answer set of P .\nIn particular, when we consider all the rules to be entirely certain, i.e. \u03bb = 1, the results are compatible with the semantics of classical ASP.\nExample 3 Consider the program P = {(b\u2190 a), (\u00aca \u2190)}. The set of constraints CP is given by N(b) \u2265 N(a) and N(\u00aca) \u2265 N(\u22a4). The first constraint can be rewritten as 1\u2212\u03a0(\u00acb) \u2265 1\u2212\u03a0(\u00aca), i.e. as \u03a0(\u00aca) \u2265 \u03a0(\u00acb). The last constraint can be rewritten as 1\u2212\u03a0(a) \u2265 1, i.e. as \u03a0(a) = max {\u03c0(\u03c9) | \u03c9 |= a} = 0. Given these two constraints, we find that SP contains exactly one element, which is defined by\n\u03c0({a, b}) = 0 \u03c0({a}) = 0\n\u03c0({b}) = 1 \u03c0({}) = 1.\nNotice how the first constraint turned out to be of no relevance for this particular example. Indeed, due to the principle of minimal specificity and since there is nothing that prevents \u03a0(\u00aca) = 1, we find that N(a) = 1 \u2212 \u03a0(\u00aca) = 0. Therefore the first constraint simplifies to N(b) \u2265 0. Once more, due to the principle of minimal specificity we thus find that N(b) = 0 as there is no information that prevents\n\u03a0(\u00acb) = 1. To find out whether a, b, \u00aca and \u00acb are necessarily true w.r.t. the least specific possibility distribution \u03c0 \u2208 SP arising from the program, we verify whether N(a) = 1, N(b) = 1, N(\u00aca) = 1 and N(\u00acb) = 1, respectively, with N the necessity measure induced by the unique least specific possibility distribution \u03c0 \u2208 SP . As desired, we find that N(\u00aca) = 1\u2212\u03a0(a) = 1 whereas N(a) = N(b) = N(\u00acb) = 0. The unique possibilistic answer set is therefore { \u00aca1 } . As we will see, it then follows from Proposition 1 that the unique classical answer set of P is {\u00aca}.\nIn Propositions 1 and 2, below, we prove that this is indeed a correct characterization of simple programs. First, we present a technical lemma.\nLemma 1 Let L be a set of literals, M \u2286 L a consistent set of literals and let the possibility distribution \u03c0 be defined as \u03c0(\u03c9) = 1 if \u03c9 |= M and \u03c0(\u03c9) = 0 otherwise. Then M = {l | N(l) = 1, l \u2208 L}.\nThe proof is given in the online appendix of the paper, pp. 1\u20132.\nProposition 1 Let P be a simple program. If \u03c0 \u2208 SP then either the unique consistent answer set of P is given by M = {l | N(l) = 1, l \u2208 LitP } or \u03c0 is the vacuous distribution, in which case P does not have any consistent answer sets.\nThe proof is given in the online appendix of the paper, pp. 2\u20134.\nProposition 2 Let P be a simple program. If M is an answer set of P then the possibility distribution \u03c0 defined by \u03c0(\u03c9) = 1 iff \u03c9 |=M and \u03c0(\u03c9) = 0 otherwise belongs to SP .\nThe proof is given in the online appendix of the paper, pp. 4."}, {"heading": "3.2 Characterizing Possibilistic Normal Programs", "text": "To deal with negation-as-failure, we rely on a reduct-style approach in which a valuation is guessed and it is verified whether this guess is indeed stable. The approach taken in (Gelfond and Lifzchitz 1988) to deal with negation-as-failure is to guess an interpretation and verify whether this guess is stable. We propose to treat a rule of the form r = (l0 \u2190 l1, ..., lm, not lm+1, ..., not ln) as the constraint\nN(l0) \u2265 min (N(l1), ..., N(lm), 1\u2212 V (lm+1), ..., 1\u2212 V (ln))\nwhere V is the guess for the valuation and where we assume min({}) = 1. Or, when we consider a possibilistic rule p = (r, \u03bb), we treat it as the constraint\nN(l0) \u2265 min (N(l1), ..., N(lm), 1\u2212 V (lm+1), ..., 1\u2212 V (ln), \u03bb) .\nWe like to make it clear to the reader that the characterization of normal programs in terms of constraints on possibility distributions in its basic form is little more than a reformulation of the Gelfond-Lifschitz approach. The key difference is that this characterization can be used to guess the certainty with which we can\nderive particular literals from the available rules, rather than guessing what may or may not be derived from it. Nevertheless, this difference plays a crucial role when dealing with uncertain rules. In particular, this characterization of PASP does not coincide with the semantics of (Nicolas et al. 2006) and adheres to a different intuition for negation-as-failure.\nDefinition 4 Let P be a possibilistic normal program and let V be a valuation. For every p \u2208 P , the constraint \u03b3 V (p) induced by p = (r, \u03bb) with \u03bb \u2208 ]0, 1], r = (l0 \u2190 l1, ..., lm, not lm+1, ..., not ln) and V is given by\nN(l0) \u2265 min (N(l1), ..., N(lm), 1\u2212 V (lm+1), ..., 1\u2212 V (ln), \u03bb) . (2)\nC(P,V ) = {\u03b3V (p) | p \u2208 P} is the set of constraints imposed by program P and valuation V , and S(P,V ) is the set of all minimally specific possibilistic models of C(P,V ).\nDefinition 5 Let P be a possibilistic normal program and let V be a valuation. Let \u03c0 \u2208 S(P,V ) be such that\n\u2200l \u2208 LitP \u00b7N(l) = V (l)\nthen V = { lN (l) | l \u2208 LitP } is called a possibilistic answer set of P .\nExample 4 Consider the possibilistic normal program P from Example 1. The constraints CP induced by P are:\nN(invalid) \u2265 0.1\nN(airport) \u2265 min(1\u2212 V (invalid ), 1)\nFrom the first constraint it readily follows that we need to choose V (invalid) = 0.1 to comply with the principle of minimal specificity. The other constraint can then readily be simplified to:\nN(airport) \u2265 0.9\nHence it follows that V = { invalid0 .1 , airport0 .9 } is the unique possibilistic answer set of P .\nIt is easy to see that the proposed semantics remain closer to the intuition of the possibilistic normal program discussed in the introduction. Indeed, we conclude with a high certainty that we need to go to the airport.\nStill, it is interesting to further investigate the particular relationship between the semantics for PASP as proposed in (Nicolas et al. 2006) and the semantics presented in this section. Let the possibilistic rule r be of the form:\n\u03bb : l0; ...; lk \u2190 lk+1, ..., lm, not lm+1, ..., not ln.\nWhen we determine the reduct w.r.t. a valuation V of the possibilistic program\ncontaining r, then the certainty of the rule in the reduct that corresponds with r can be verified to be:\nmin(FN (V (lm+1)), ..., FN (V (ln)), \u03bb)\nwith FN a fuzzy negator, i.e. where FN is a decreasing function with FN (0) = 1 and FN (1) = 0. In particular, for the semantics of (Nicolas et al. 2006) we have that FN is the Go\u0308del negator FG, defined as FG(0) = 1 and FG(c) = 0 with 0 < c \u2264 1. In the semantics for PASP presented in this section, FN is the Lukasiewicz negator F L(c) = 1\u2212 c with 0 \u2264 c \u2264 1. Thus, for a rule such as:\n0.9: b \u2190 not a\nand a valuation V = { a0 .2 } we obtain under the approach from (Nicolas et al. 2006) the reduct (0: b \u2190 ), whereas under our approach we obtain the constraint N(b) \u2265 min(0.9, 1 \u2212 0.2), which can be encoded by the rule (0.8: b \u2190 ). Essentially, the difference between both semantics can thus be reduced to a difference in the choice of negator. However, even though the semantics share similarities, there is a notable difference in the underlying intuition of both approaches. Specifically, in the semantics presented in this paper, we have that \u2018not l\u2019 is understood as \u201cthe degree to which \u2018\u00acl\u2019 is possible\u201d, or, equivalently, \u201cthe degree to which it is not the case that we can derive \u2018l\u2019 with certainty\u201d. This contrasts with the intuition of \u2018not l\u2019 in (Nicolas et al. 2006) as a Boolean condition and understood as \u201cwe cannot derive \u2018l\u2019 with a strictly positive certainty\u201d.\nInterestingly, we find that the complexity of the main reasoning tasks for possibilistic normal programs remains at the same level of the polynomial hierarchy as the corresponding normal ASP programs.\nWhile we will see in Section 5 that the complexity of possibilistic normal programs remains unchanged compared to classical normal programs, it is important to note that under the semantics proposed in this section there is no longer a 1-on-1 mapping between the classical answer sets of a normal program and the possibilistic answer sets. Indeed, if we consider a possibilistic normal program constructed from a classical normal program where we attach certainty \u03bb = 1 to each rule, then we can sometimes obtain additional intermediary answer sets. Consider the next example:\nExample 5\nConsider the normal program with the single rule a \u2190 not a. This program has no classical answer sets. Now consider the possibilistic normal program P with the rule"}, {"heading": "1: a \u2190 not a.", "text": "The set of constraints C(P,V ) is given by\nN(a) \u2265 min(1 \u2212 V (a), 1).\nThis constraint can be rewritten as\nN(a) \u2265 min(1\u2212 V (a), 1)\n\u2261 N(a) \u2265 1\u2212 V (a)\n\u2261 1\u2212\u03a0(\u00aca) \u2265 1\u2212 V (a)\n\u2261 \u03a0(\u00aca) \u2264 V (a).\nWe thus find that the set S(P,V ) is a singleton with \u03c0 \u2208 S(P,V ) defined by \u03c0({a}) = 1 and \u03c0({}) = V (a). We can now establish for which choices of V (a) it holds that V (a) = N(a):\nV (a) = N(a)\n\u03a0(\u00aca) = 1\u2212\u03a0(\u00aca)\n2 \u00b7 \u03a0(\u00aca) = 1\nand thus, since \u03a0(\u00aca) \u2264 V (a), we have \u03c0({}) = 0.5. The unique possibilistic answer set of P is therefore { a0 .5 } . In the same way, one may verify that the program"}, {"heading": "1: a \u2190 not b 1: b \u2190 not a", "text": "has an infinite number of possibilistic answer sets, i.e. { ac, b1\u2212c } for every c \u2208 [0, 1]. For practical purposes, however, this behavior has a limited impact as we only need to consider a finite number of certainty levels to perform brave/cautious reasoning. Indeed, we only need to consider the certainties used in the program, their complement to account for negation-as-failure and 12 to account for the intermediary value as in Example 5. Thus, for the main reasoning tasks it suffices to limit our attention to the certainties from the set cert+(P ).\nWe now show that when we consider rules with an absolute certainty, i.e. classical normal programs, we obtain a correct characterization of classical ASP, provided that we restrict ourselves to absolutely certain conclusions, i.e. valuations V for which it holds that \u2200l \u00b7 V (l) \u2208 {0, 1}.\nExample 6\nConsider the program P with the rules\na\u2190 b\u2190 b c\u2190 a, not b.\nThe set of constraints C(P,V ) is then given by\nN(a) \u2265 1 N(b) \u2265 N(b) N(c) \u2265 min (N(a), 1 \u2212 V (b)) .\nWe can rewrite the first constraint as 1\u2212\u03a0(\u00aca) \u2265 1 and thus \u03a0(\u00aca) = 0. The second\nconstraint is trivially satisfied and, since it does not entail any new information, can be dropped. The last constraint can be rewritten as \u03a0(\u00acc) \u2264 1\u2212min(1\u2212\u03a0(\u00aca), 1\u2212 V (b)), which imposes an upper bound on the value that \u03a0(\u00acc) can assume. Since we already know that \u03a0(\u00aca) = 0 we can further simplify this inequality to \u03a0(\u00acc) \u2264 1\u2212min(1\u22120, 1\u2212V (b)) = 1\u2212(1\u2212V (b)) = V (b). In conclusion, the program imposes the constraints\n\u03a0(\u00aca) = 0 \u03a0(\u00acc) \u2264 V (b).\nThe set S(P,V ) then contains exactly one element, which is defined by\n\u03c0({a, b, c}) = 1 \u03c0({b, c}) = 0\n\u03c0({a, b}) = V (b) \u03c0({b}) = 0\n\u03c0({a, c}) = 1 \u03c0({c}) = 0\n\u03c0({a}) = V (b) \u03c0({}) = 0.\nNote that this possibility distribution is independent of the choice for V (a) and V (c) since there are no occurrences of \u2018not a\u2019 and \u2018not c\u2019 in P . It remains then to determine for which choices of V (b) it holds that V (b) = N(b), i.e. for which the guess V (b) is stable. We have:\nV (b) = N(b) = 1\u2212\u03a0(\u00acb) = 1\u2212max {\u03c0(\u03c9) | \u03c9 |= \u00acb} = 0\nand thus we find that \u03c0({a, b}) = \u03c0({a}) = 0. We have N(a) = 1 \u2212 \u03a0(\u00aca) = 1, N(c) = 1 \u2212 \u03a0(\u00acc) = 1 and N(b) = 1 \u2212 \u03a0(\u00acb) = 0. As we will see in the next propositions, the unique answer set of P is therefore {a, c}.\nProposition 3 Let P be a normal program and V a valuation. Let \u03c0 \u2208 S(P,V ) be such that\n\u2200l \u2208 LitP \u00b7 V (l) = N(l) ; and (3)\n\u2200l \u2208 LitP \u00b7N(l) \u2208 {0, 1} (4)\nthen M = {l | N(l) = 1, l \u2208 LitP} is an answer set of the normal program P .\nProof This proposition is a special case of Proposition 5 presented below.\nNote that the requirement stated in (4) cannot be omitted. Let us consider Example 5, in which we considered the normal program P = {a\u2190 not a}. This normal program P has no classical answer sets. The constraint that corresponds with the rule (a \u2190 not a) is N(a) \u2265 1 \u2212 V (a). For a choice of V = { a0.5 } , however, we would find that V (a) = N(a) and thus that V is an answer set of P if we were to omit this requirement.\nProposition 4 Let P be a normal program. If M is an answer set of P , there is a valuation V , defined by V (l) = 1 if l \u2208M and V (l) = 0 otherwise, and a possibility distribution \u03c0 \u2208 S(P,V ) such that for every l \u2208 LitP we have V (l) = N(l) (i.e. N(l) = 1 if l \u2208M and N(l) = 0 otherwise).\nProof This proposition is a special case of Proposition 6 presented below.\nWe like to point out to the reader that we could try to encode the information in a rule in such a way that we interpret \u2018not a\u2019 as \u03a0(\u00aca), which closely corresponds to the intuition of negation-as-failure. Indeed, when it is completely possible to assume that \u2018\u00aca\u2019 is true, then surely \u2018not a\u2019 is true. Under this encoding, however, we run into a significant problem. Consider the rules (b \u2190 not c) and (c \u2190 not b). These rules would then correspond with the constraints N(b) \u2265 \u03a0(\u00acc) and N(c) \u2265 \u03a0(\u00acb), respectively. Notice though that both constraints can be rewritten as the constraint 1 \u2212 \u03a0(\u00acb) \u2265 \u03a0(\u00acc). This would imply that both rules are semantically equivalent in ASP, which is clearly not the case. Hence we cannot directly encode \u2018not a\u2019 as \u03a0(\u00aca) and guessing a valuation is indeed necessary since without the guess V we would not be able to obtain a unique set of constraints. As we have shown this only affects literals preceded by negation-as-failure and we can continue to interpret a literal \u2018b\u2019 as N(b)."}, {"heading": "4 Possibilistic Semantics of Disjunctive ASP Programs", "text": "We now turn our attention to how we can characterize disjunctive rules. We found in Section 3 that we can characterize a rule of the form r = (head \u2190 body) as the constraint N(head) \u2265 N(body), or, similarly, that we can characterize a possibilistic rule p = (r, \u03bb) as the constraint N(head) \u2265 min(N(body), \u03bb). Such a characterization works particularly well due the min-decomposability w.r.t. conjunction. Indeed, since the body of e.g. a simple rule r = (l0 \u2190 l1, ..., lm) is a conjunction of literals we can write body = l1 \u2227 ... \u2227 lm. Then N(body) can be rewritten as min(N(l1), ..., N(lm)), which allows for a straightforward simplification. In a similar fashion, for a positive disjunctive rule r = (l0; ...; lk \u2190 lk+1, ..., lm) we can readily write N(body) as min(N(lk+1), ..., N(lm)). We would furthermore like to simplify N(head) with head = l0 \u2228 ... \u2228 lk. However, we do not have that N(head) = max(N(l0), ..., N(lk)). Indeed, in general we only have that N(head) \u2265 max(N(l0), ..., N(lk)). This means that we can either choose to interpret the head as max(N(l0), ..., N(lk)) or N(l0 \u2228 ... \u2228 lk). In particular, a possibilistic disjunctive rule p = (r, \u03bb) with\nr = (l0; ...; lk \u2190 lk+1, ..., lm, not lm+1, ..., not ln)\ncan either be interpreted as the constraint\nmax(N(l0), ..., N(lk)) \u2265 min(N(lk+1), ..., N(lm), 1\u2212 V (lm+1), ..., 1\u2212 V (ln), \u03bb)\n(5)\nwhich we will call the strong interpretation of disjunction, or as the constraint\nN(l0 \u2228 ... \u2228 lk) \u2265 min(N(lk+1), ..., N(lm), 1\u2212 V (lm+1), ..., 1\u2212 V (ln), \u03bb) (6)\nwhich we will call the weak interpretation of disjunction. In the remainder of this paper, we syntactically differentiate between both approaches by using the nota-\ntion l0; ...; lk and l0 \u2228 ... \u2228 lk to denote the strong and the weak interpretation of disjunction, respectively.\nThe choice of how to treat disjunction is an important one that crucially impacts the nature of the resulting answer sets. For example, the non-deterministic nature of strong disjunction provides a useful way to generate different (candidate) solutions, whereas weak disjunction is oftentimes better suited when we are interested in modelling the epistemic state of an agent since it amounts to accepting the disjunction as being true rather than making a choice of which disjunct to accept. In this section we consider both characterizations; the characterization of disjunction as (5) is discussed in Section 4.1 and in Section 4.2 we discuss the characterization as (6). In particular we will show that the first characterization of disjunction corresponds to the semantics of disjunction found in ASP whereas the Boolean counterpart of the second characterization has, to the best of our knowledge, not yet been studied in the literature."}, {"heading": "4.1 Strong Possibilistic Semantics of Disjunctive Rules", "text": "We first consider the characterization of disjunction in which we treat a disjunction of the form \u2018l0; ...; lk\u2019 as max(N(l0), . . . , N(lk)). As it turns out, under these strong possibilistic semantics the disjunction behaves as in classical ASP.\nDefinition 6 Let P be a possibilistic disjunctive program and let V be a valuation. For every possibilistic disjunctive rule p = (r, \u03bb) with \u03bb \u2208 ]0, 1] and r = (l0; ...; lk \u2190 lk+1, ..., lm, not lm+1, ..., not ln) the constraint \u03b3 s V (p) induced by p and V is given by\nmax(N(l0), ..., N(lk)) \u2265 min(N(lk+1), ..., N(lm), 1\u2212V (lm+1), ..., 1\u2212V (ln), \u03bb) (7)\nCs(P,V ) = { \u03b3s V (p) | p \u2208 P } is the set of constraints imposed by program P and V , and Ss(P,V ) is the set of all minimally specific possibilistic models of C s (P,V ). 1\nWhenever P is a positive disjunctive program, i.e. whenever P is a disjunctive program without negation-as-failure, (7) is independent of V and we simplify the notation to \u03b3s, CsP and S s P .\nNotice that, unlike in possibilistic logic where a unique least specific possibility distribution exists because of the specific form of the considered constraints, the constraint of the form (7) can give rise to multiple minimally specific possibility distributions of which some will correspond with answer sets. Indeed, the program P = {a; b\u2190} induces the constraint max(N(a), N(b)) \u2265 1, which has two minimally specific possibility distributions, yet no least specific possibility distribution. Indeed, we have the minimally specific possibility distributions \u03c01, \u03c02 defined by\n\u03c01({a, b}) = 1 \u03c01({b}) = 0 \u03c02({a, b}) = 1 \u03c02({b}) = 1\n\u03c01({a}) = 1 \u03c01({}) = 0 \u03c02({a}) = 0 \u03c02({}) = 0\n1 We use the superscript \u2018s\u2019 to highlight that we employ the semantics of strong disjunction.\nDefinition 7 Let P be a possibilistic disjunctive program and let V be a valuation. Let \u03c0 \u2208 Ss(P,V ) be such that\n\u2200l \u2208 LitP \u00b7N(l) = V (l)\nthen V = { lN (l) | l \u2208 LitP } is called a possibilistic answer set of P .\nWe now further illustrate the semantics and the underlying intuition by consid-\nering a possibilistic disjunctive program in detail.\nExample 7\nConsider the possibilistic (positive) disjunctive program P with the following rules:\n0.8: a; b \u2190\n0.6: c \u2190 a\n0.4: c \u2190 b.\nThe constraints CsP induced by this program are:\nmax(N(a), N(b)) \u2265 0.8\nN(c) \u2265 min(N(a), 0.6)\nN(c) \u2265 min(N(b), 0.4).\nFrom the first constraint it follows that we either need to choose V (a) = 0.8 or V (b) = 0.8, in accordance with the principal of minimal specificity. Hence, we either obtain V (c) = 0.6 or V (c) = 0.4. As such we find that the two unique possibilistic answer sets of P are { a0 .8 , c0 .6 } and { b0 .8 , c0 .4 } .\nAs before, if we restrict ourselves to rules that are entirely certain we obtain a characterization of disjunctive programs in classical ASP.\nExample 8\nConsider the program P with the rules\na; b\u2190 a\u2190 b\nThe set of constraints CsP is given by\nmax(N(a), N(b)) \u2265 N(\u22a4) = 1 N(a) \u2265 N(b).\nIntuitively, the first constraint induces a choice. To satisfy this constraint, we need to take either N(a) = 1 or N(b) = 1. Depending on our choice, we can consider two possibility distributions. The possibility distribution \u03c01 is the least specific possibility distribution that satisfies the constraints N(a) = 1 and N(a) \u2265 N(b), whereas \u03c02 is the least specific possibility distribution satisfying the constraints N(b) = 1 and N(a) \u2265 N(b):\n\u03c01({a, b}) = 1 \u03c01({b}) = 0\n\u03c01({a}) = 1 \u03c01({}) = 0\nand\n\u03c02({a, b}) = 1 \u03c02({b}) = 0\n\u03c02({a}) = 0 \u03c02({}) = 0.\nIt is clear that the possibility distribution \u03c02 cannot be minimally specific w.r.t. the constraints max(N(a), N(b)) = 1 and N(a) \u2265 N(b) since \u03c01({a}) > \u03c02({a}) and \u03c01(\u03c9) \u2265 \u03c02(\u03c9) for all other interpretations \u03c9. We thus have that S s P only contains a single element, namely \u03c01. With N the necessity measure induced by \u03c01 we obtain N(a) = 1 and N(b) = 0. As will follow from Proposition 5 and 6 the unique answer set of P is therefore {a}. Let us now add the rule (b\u2190 not b) to P . Notice that in classical ASP this extended program has no answer sets. The set of constraints Cs(P,V ) is given by:\nCsP \u222a {N(b) \u2265 1\u2212 V (b)} .\nThis new constraint, intuitively, tells us that \u2018b\u2019 must necessarily be true, since we force it to be true whenever it is not true. Note, however, that the act of making \u2018b\u2019 true effectively removes the motivation for making it true in the first place. As expected, we cannot find any minimally specific possibilistic model that agrees with the constraints imposed by P and V such that \u2200l \u2208 LitP \u00b7 N(l) \u2208 {0, 1}. The problem has to do with our choice of V (b). If we take V (b) = 1 then the constraint imposed by the first rule still forces us to choose either N(a) = 1 or N(b) = N(a) = 1 due to the interplay with the constraint imposed by the second rule. However, Ss(P,V ) contains only one minimally specific possibility distribution, namely the one with N(a) = 1. Hence N(b) = 0 6= V (b). If we take V (b) = 0 then the last rule forces N(b) = 1. Hence V (b) = 0 6= 1 = N(b).\nNow that we have clarified the intuition, we can formalize the connection between the strong possibilistic semantics and classical disjunctive ASP.\nProposition 5 Let P be a disjunctive program, V a valuation and let \u03c0 \u2208 Ss(P,V ) be such that\n\u2200l \u2208 LitP \u00b7 V (l) = N(l) ; and (8)\n\u2200l \u2208 LitP \u00b7N(l) \u2208 {0, 1} (9)\nthen M = {l | N(l) = 1, l \u2208 LitP} is an answer set of the disjunctive program P .\nThe proof is given in the online appendix of the paper, pp. 4\u20135.\nProposition 6\nLet P be a disjunctive program. If M is an answer set of P , there is a valuation V , defined as V (l) = 1 if l \u2208M and V (l) = 0 otherwise, and a possibility distribution \u03c0, defined as \u03c0(\u03c9) = 1 if \u03c9 |= M and \u03c0(\u03c9) = 0 otherwise, such that \u03c0 \u2208 Ss(P,V ) and for every l \u2208 LitP we have V (l) = N(l).\nThe proof is given in the online appendix of the paper, pp. 5\u20136."}, {"heading": "4.2 Weak Possibilistic Semantics of Disjunctive Rules", "text": "Under the strong possibilistic semantics of disjunction we consider all the disjuncts of a satisfied rule separately. Under this non-deterministic view the rule (a; b \u2190) means that \u2018a\u2019 is believed to be true or \u2018b\u2019 is believed to be true. When looking at answer sets as epistemic states it becomes apparent that there is also another choice in how we can treat disjunction in the head. Indeed, we can look at the disjunction as a whole to hold, without making any explicit choices as to which of the disjuncts holds. When trying to reason about one\u2019s knowledge there are indeed situations in which we do not want, or simply cannot make, a choice as to which of the disjuncts is true. This implies that we need to look at an answer set as a set of clauses, rather than a set of literals.\nAn elaborate example using weak disjunction and uncertainty has been given in\nSection 1. In this subsection we consider the semantics of such programs. For starters, we will extend the PASP semantics with the notion of clauses, rather than literals, and define an applicable immediate consequence operator for programs composed of clauses. We then prove some important properties, such as the monotonicity of the immediate consequence operator. For the classical case (i.e. when omitting weights), we furthermore characterize the complexity of clausal programs, both with and without negation-as-failure in Section 5. In particular, we show how the complexity is critically determined by whether we restrict ourselves to atoms and highlight, as shown by the higher complexity of some of the reasoning tasks, that weak disjunction is a non-trivial extension of ASP.\nWe start by formally defining possibilistic clausal programs, i.e. possibilistic programs with a syntax that allows for disjunction in the body. We then define the weak possibilistic semantics of such clausal programs in terms of constraints on possibility distributions. We also introduce an equivalent characterization based on an immediate consequence operator and a reduct, which is more in line with the usual treatment of ASP programs. When all the rules are entirely certain we obtain the classical counterpart, which we name clausal programs."}, {"heading": "4.2.1 Semantical Characterization", "text": "We rely on the notion of a clause, i.e. a finite disjunction of literals. Consistency and entailment for sets of clauses are defined as in propositional logic. As such, we can derive from the information \u2018a \u2228 b \u2228 c\u2019 and \u2018\u00acb\u2019 that \u2018a \u2228 c\u2019 is true.\nDefinition 8 A clausal rule is an expression of the form (e0 \u2190 e1, ..., em, not em+1, ..., not en) with ei a clause for every 0 \u2264 i \u2264 n. A positive clausal rule is an expression of the form (e0 \u2190 e1, ..., em) , i.e. a clausal rule without negation-as-failure. A (positive) clausal program is a finite set of (positive) clausal rules.\nFor a clausal rule, which is of the form r = (e0 \u2190 e1, ..., em, not em+1, ..., not en), we say that e0 is the head and that e1, ..., em, not em+1, ..., not en is the body of the clausal rule. We use the notation head(r) and body(r) to denote the clause in\nthe head, resp. the set of clauses in the body. The Herbrand base BP of a clausal program P is still defined as the set of atoms appearing in P . As such, possibility distributions are defined in the usual way as \u03c0 : 2BP \u2192 [0, 1] mappings.\nUntil now, we were able to define the possibility distributions that satisfied the constraints imposed by the rules in a program in terms of a valuation V , i.e. a V : LitP \u2192 [0, 1] mapping. This need no longer be the case. Specifically, note that we will now impose constraints of the form N(l0 \u2228 ... \u2228 lk) \u2265 \u03bb. Assume that we have a possibility distribution \u03c0 defined as\n\u03c0({a, b, c}) = 0 \u03c0({a, b}) = 0 \u03c0({a, c}) = 1 \u03c0({a}) = 1\n\u03c0({b, c}) = 0 \u03c0({b}) = 0 \u03c0({c}) = 1 \u03c0({}) = 0.\nThis possibility distribution is the least specific possibility distribution that satisfies the constraints N(a\u2228b\u2228c) = 1 and N(\u00acb) = 1. However, it can be verified that this possibility distribution cannot be defined in terms of a mapping V : LitP \u2192 [0, 1].\nInstead, we define the set of clauses appearing in the head of the rules of a clausal program P as ClauseP = {head(r) | r \u2208 P}. Given a clausal program, it is clear that the only information that can be derived from the program are those clauses that are in the head of a rule. To compactly describe a possibility distribution imposed by clausal programs we will thus, for the remainder of this section and for Section 5, take a valuation V to be a ClauseP \u2192 [0, 1] mapping. As before, a valuation V corresponds with the set of constraints { N(e) \u2265 \u03bb | e\u03bb \u2208 V } . The set notation for valuations and the notations V \u03bb and V \u03bb are extended as usual. Entailment for valuations is defined as in possibilistic logic, i.e. if we consider the least specific possibility distribution \u03c0V satisfying the constraints { NV (e) \u2265 \u03bb | e\u03bb \u2208 V } then V |= p\u03bb with \u2018p\u2019 a proposition iff NV (p) \u2265 \u03bb. In particular, recall from possibilistic logic the inference rules (GMP) or graded modus ponens, i.e. we can infer from N(\u03b1) \u2265 \u03bb and N(\u03b1 \u2192 \u03b2) \u2265 \u03bb\u2032 that N(\u03b2) \u2265 min(\u03bb, \u03bb\u2032). In addition recall the inference rule (S), i.e. we can infer from N(\u03b1) \u2265 \u03bb that N(\u03b1) \u2265 \u03bb\u2032 with \u03bb \u2265 \u03bb\u2032.\nDefinition 9 A possibilistic (positive) clausal program is a set of possibilistic (positive) clausal rules, which are pairs p = (r, \u03bb) with r a (positive) clausal rule and \u03bb \u2208 ]0, 1] a certainty associated with r.\nWe define P \u2217 and the \u03bb-cut P\u03bb as usual.\nWe are now almost able to define the semantics of weak disjunction. In the previous sections we guessed a valuation and used this valuation to deal with negationas-failure. However, for clausal programs, a new problem arises. Note that the least specific possibility distribution that satisfies the constraints N(a \u2228 b \u2228 c) = 1 and N(\u00acb) = 1 is also the least specific possibility distribution that satisfies the constraints N(a \u2228 c) and N(\u00acb). As such, if ClauseP = {(a \u2228 b \u2228 c), (\u00acb), (a \u2228 c)}, there would not be a unique valuation that can be used to define this least specific possibility distribution. Indeed, a valuation uniquely defines a possibility distribution, but not vice versa. To avoid such ambiguity, we will instead immediately guess a possibility distribution \u03c0V and use this possibility distribution to deal with negation-as-failure in a clausal program.\nDefinition 10 Let P be a possibilistic clausal program and let \u03c0V be a possibility distribution. For every p \u2208 P , the constraint \u03b3w\u03c0V (p) induced by p = (r, \u03bb) with \u03bb \u2208 ]0, 1], r = (e0 \u2190 e1, ..., em, not em+1, ..., not en) and \u03c0V under the weak possibilistic semantics is given by\nN(e0) \u2265 min(N(e1), ..., N(em), 1\u2212NV (em+1), ..., 1\u2212NV (en), \u03bb). (10)\nCw(P,\u03c0V ) = { \u03b3w\u03c0V (p) | p \u2208 P } is the set of constraints imposed by program P and \u03c0V , and Sw(P,\u03c0V ) is the set of all minimally specific possibilistic models of C w (P,\u03c0V ) .\nWhenever P is a possibilistic (positive) clausal program, i.e. whenever P is a\npossibilistic clausal program without negation-as-failure, (10) is independent of \u03c0V and we simplify the notation to \u03b3w, CwP and S w P .\nDefinition 11 Let P be a possibilistic clausal program. Let \u03c0V be a possibility distribution such that \u03c0V \u2208 Sw(P,\u03c0V ). We then say that \u03c0V is a possibilistic answer set of P .\nAs already indicated we can also use a valuation V to concisely describe \u03c0V . When we say that V is a possibilistic answer set of the clausal program P we are, more precisely, stating that the possibility distribution induced by V is a possibilistic answer set of the clausal program P .\nLemma 2 Let P be a possibilistic positive clausal program. Then Sw(P,\u03c0V ) is a singleton, i.e. \u03c0 \u2208 Sw(P,\u03c0V ) is a least specific possibility distribution.\nProof This readily follows from the form of the constraints imposed by the rules p \u2208 P and since a possibilistic positive clausal program is free of negation-as-failure.\nExample 9 Consider the possibilistic clausal program P with the rules:\n1 : a \u2228 c \u2228 d\u2190\n0.4 :\u00acd\u2190\n0.8 : e\u2190 not (a \u2228 b \u2228 c).\nWe have that Cw(P,\u03c0V ) is the set of constraints:\nN(a \u2228 c \u2228 d) \u2265 1\nN(\u00acd) \u2265 0.4\nN(e) \u2265 min(1\u2212NV (a \u2228 b \u2228 c), 0.8).\nWe can rewrite the first constraint as N(\u00acd \u2192 a \u2228 c) \u2265 1. Given the second constraint N(\u00acd) \u2265 0.4 we can apply the inference rule (GMP) to conclude that N(a\u2228 c) \u2265 0.4. From propositional logic we know that (a\u2228 c) \u2192 (a\u2228 b\u2228 c), i.e. we also have N(a \u2228 b \u2228 c) \u2265 0.4.\nFor \u03c0V to be an answer set of P we know from Definition 11 that we must have that \u03c0 \u2208 Sw(P,\u03c0V ) with \u03c0 = \u03c0V . In other words, we must have that NV (a \u2228 b \u2228 c) = N(a \u2228 b \u2228 c) \u2265 0.4. Due to the principle of least specificity, which implies that N(a \u2228 b \u2228 c) = 0.4, the last constraints can be simplified toN(e) \u2265 min(1\u2212 0.4, 0.8) or N(e) \u2265 0.6. As such, the least specific possibility distribution defined by the constraints N(e) \u2265 0.6, N(a \u2228 c \u2228 d) \u2265 1 and N(\u00acd) \u2265 0.4 is a possibilistic answer set of P .\nNotice that we implicitly defined the possibilistic answer set of the previous example as a valuation, i.e. in terms of clauses that appear in the head. Alternatively we could thus write that V = { e0 .6 , a \u2228 b \u2228 d1 ,\u00acb0 .4 } defines the possibilistic answer set of P . This idea will be further developed in Section 4.2.2 to avoid the need to explicitly define a possibility distribution (which would require an exponential amount of space) and instead rely on an encoding of a possibility distribution by a (polynomial) set of weighted clauses.\nFor the crisp case, we only want clauses that are either entirely certain or completely uncertain, i.e. true or false. To this end, we add the constraint (11), which is similar to (4) from Proposition 3.\nDefinition 12 Let P be a clausal program and \u03c0V \u2208 Sw(P,\u03c0V ) a possibility distribution such that\n\u2200\u03c9 \u2208 \u2126 \u00b7 \u03c0V (\u03c9) \u2208 {0, 1} (11)\nthen \u03c0V is called an answer set of P ."}, {"heading": "4.2.2 Syntactic Characterization", "text": "We now introduce a syntactic counterpart of the semantics for weak disjunction by defining an immediate consequence and reduct operator. As such, it is more in line with the classical Gelfond-Lifschitz approach. In addition, the syntactic approach only needs polynomial size (as we will only consider clauses appearing in the head of the clausal rules). Indeed, what we will do is formalise the idea of using a valuation to determine the possibilistic answer sets of a clausal program, rather than relying on an exponential possibility distribution.\nDefinition 13\nLet P be a possibilistic positive clausal program. We define the immediate consequence operator TwP as:\nTwP (V )(e0) = max { \u03bb \u2208 [0, 1] | (e0 \u2190 e1, ..., em) \u2208 P\u03bb and \u2200i \u2208 {1, ...,m} \u00b7 V \u03bb |= ei } .\nWe use P \u22c6w to denote the fixpoint which is obtained by repeatedly applying T w P starting from the minimal clausal valuation V = \u2205, i.e. the least fixpoint of TwP w.r.t. set inclusion. When P is a positive clausal program we take \u03bb \u2208 {0, 1}.\nExample 10 Consider the clausal program P with the clausal rules\n1 : a \u2228 b \u2228 c\u2190\n0.4 :\u00acb\u2190\n0.8 : e\u2190 (a \u2228 c \u2228 d).\nWe can easily verify that, starting from V = \u2205, we obtain\nTwP (V )(a \u2228 b \u2228 c) = 1 and\nTwP (V )(\u00acb) = 0.4.\nIn the next iteration we furthermore find that\nTwP (T w P (V ))(e) = 0.4\nsince (0.8: e \u2190 (a \u2228 c \u2228 d)) \u2208 P0.4 and since (TwP (V )) 0.4 |= a \u2228 c \u2228 d. In addition, this is the least fixpoint, i.e. we have P \u22c6w = { (a \u2228 b \u2228 c)1 ,\u00acb0 .4 , e0 .4 } .\nNotice that this definition of the immediate consequence operator is a generalization of the immediate consequence operator for possibilistic simple programs (see Definition 1). Indeed, for a possibilistic positive clausal program where all clauses contain only a single literal, i.e. a possibilistic simple program, we have that P \u22c6 = P \u22c6w. In addition, when all clauses contain only a single literal, we can simplify the immediate consequence operator and simply write ei \u2208 V \u03bb instead of V \u03bb |= ei. We now show that the fixpoint obtained from the immediate consequence operator TwP is indeed the answer set of P .\nProposition 7 Let P be a possibilistic positive clausal program without possibilistic constraint rules. Then P \u22c6w is a possibilistic answer set of P .\nThe proof is given in the online appendix of the paper, pp. 6\u20137.\nThus far, we only considered possibilistic positive clausal programs. If we allow for negation-as-failure, we will also need to generalize the notion of a reduct. As usual, in the classical case we want that an expression of the form \u2018not e\u2019 is true when \u2018e\u2019 cannot be entailed. Furthermore, since we are working in the possibilistic case, we want to take the degrees into account when determining the reduct.\nDefinition 14 Given a possibilistic clausal program P and a valuation V , the reduct PV of P w.r.t. V is defined as:\nPV = { ((e0 \u2190 e1, ..., em),min(\u03bbrule , \u03bbbody)) | min(\u03bbrule , \u03bbbody) > 0\n\u2227 \u03bbbody = max { \u03bb | \u2200i \u2208 {m+ 1, ..., n} \u00b7 V 1\u2212\u03bb 6|= ei, \u03bb \u2208 [0, 1] }\n\u2227 ((e0 \u2190 e1, ..., em, not em+1, ..., not en), \u03bbrule) \u2208 P}\nThis definition corresponds with the Gelfond-Lifschitz reduct when we consider crisp clausal programs where each clause consists of exactly one literal. Indeed, if\nwe consider clauses with exactly one literal, we could simplify \u2200i \u2208 {m+ 1, ..., n} \u00b7 V 1\u2212\u03bb 6|= ei to {em+1, ..., en} \u2229 V 1\u2212\u03bb = \u2205. This new reduct generalises the GelfondLifschitz reduct in two ways. Firstly, we now have clauses, i.e. we now need to verify whether the negative body is not entailed by our guess. Secondly, we need to take the weights attached to the rules, which we interpret as certainties, into account. In particular, the certainty of the reduct of a rule is limited by the certainty of the negative body of the rule and the certainty of the rule itself. In the crisp case these certainty degrees would become trivial.\nProposition 8\nA valuation E is a possibilistic answer set of the possibilistic clausal program P without possibilistic constraint rules iff E is a possibilistic answer set of PE .\nThe proof is given in the online appendix of the paper, pp. 7. Before we discuss the complexity results, we look at an example to further uncover the intuition of clausal programs.\nExample 11\nConsider the possibilistic clausal program P with the following rules:\n0.7 :a \u2228 b \u2228 c\u2190 0.2 :\u00acb\u2190 1 : d\u2190 not (a \u2228 c \u2228 f) 1 : e\u2190 not c.\nThe reduct PV with V = { (a \u2228 b \u2228 c)0 .7 , (\u00acb)0 .2 , d0 .8 , e1 } is then:\n0.7 :a \u2228 b \u2228 c\u2190 0.2 :\u00acb\u2190 0.8 : d\u2190 1 : e\u2190\nsince V 1\u22120.8 |= a \u2228 c but V 1\u22120.8 6|= a \u2228 c and V 1\u22121 6|= c. We then have that (PV ) \u22c6\nw = { (a \u2228 b \u2228 c)0 .7 , (\u00acb)0 .2 , d0 .8 , e1 } , hence V is indeed an answer set of P ."}, {"heading": "5 Complexity Results", "text": "Before we discuss the complexity results of the weak possibilistic semantics for disjunctive rules (Section 4.2), we first look at the complexity results of both possibilistic normal programs (Section 3.2) and the strong possibilistic semantics for disjunctive rules (Section 4.1). As such, for Proposition 9, 10, 11 and 12 we once again consider a valuation V for a possibilistic normal/disjunctive program P as a V : LitP \u2192 [0, 1] mapping. We find that for possibilistic normal programs the addition of weights does not affect the complexity compared to classical normal programs.\nProposition 9 (possibilistic normal program; brave reasoning)\nLet P be a possibilistic normal program. The problem of deciding whether there exists a possibilistic answer set V of P such that V (l) \u2265 \u03bb is NP-complete.\nThe proof is given in the online appendix of the paper, pp. 8.\nProposition 10 (possibilistic normal program; cautious reasoning) Let P be a possibilistic normal program. The problem of deciding whether for all possibilistic answer sets V of P we have that V (l) \u2265 \u03bb is coNP-complete.\nThe proof is given in the online appendix of the paper, pp. 9.\nSimilarly, we find for possibilistic disjunctive programs under the strong disjunctive semantics that the addition of weights does not affect the complexity compared to classical disjunctive programs.\nProposition 11 (possibilistic disjunctive program; brave reasoning) Let P be a possibilistic disjunctive program. The problem of deciding whether there is a possibilistic answer set V such that V (l) \u2265 \u03bb is a \u03a3P2 -complete problem.\nThe proof is given in the online appendix of the paper, pp. 9-10.\nProposition 12 (possibilistic disjunctive program; cautious reasoning) Let P be a possibilistic disjunctive program. The problem of deciding whether for all possibilistic answer sets V we have that V (l) \u2265 \u03bb is a \u03a0P2 -complete problem.\nThe proof is given in the online appendix of the paper, pp. 10-11.\nWe now look at the complexity of the weak possibilistic semantics for disjunctive rules for a variety of decision problems and under a variety of restrictions. In particular, throughout this section we look at the complexity of weak disjunction in the crips case that allows us to compare these results against the complexity of the related decision problems in classical ASP and other epistemic extensions of ASP, e.g. (Truszczyn\u0301ski 2011; Vlaeminck et al. 2012). As we will see, for certain classes of clausal programs, decision problems exist where weak disjunction is computationally less complex than disjunctive programs while remaining more complex than normal programs.\nAn overview of the complexity results available in the literature for disjunctive programs as well as the new results for weak disjunction (in the crisp case) which we discuss in the remainder of this section can be found in Table 1.\nProposition 13 (weak disjunction, positive clausal program; brave reasoning) Let P be a positive clausal program. The problem of deciding whether a clause \u2018e\u2019 is entailed by a consistent answer set E of P is BH2-hard.\nThe proof is given in the online appendix of the paper, pp. 11-12.\nProposition 14 (weak disjunction, positive clausal program; brave reasoning) Let P be a positive clausal program. The problem of deciding whether a clause \u2018e\u2019 is entailed by a consistent answer set M of P is in BH2.\nThe proof is given in the online appendix of the paper, pp. 12-13.\nCorollary 1 Let P be a positive clausal program. The problem of deciding whether a clause \u2018e\u2019 is entailed by a consistent answer set E of P is BH2-complete.\nCorollary 2 (weak disjunction, positive clausal program; answer set existence)\nDetermining whether a positive clausal program P has a consistent answer set is an NP-complete problem.\nThe proof is given in the online appendix of the paper, pp. 14.\nCorollary 3 (weak disjunction, positive clausal program; cautious reasoning)\nCautious reasoning, i.e. determining whether a clause \u2018e\u2019 is entailed by every answer set M of a positive clausal program P is coNP-complete.\nThe proof is given in the online appendix of the paper, pp. 14.\nSurprisingly, the expressivity of positive clausal programs under the weak interpretation of disjunction is directly tied to the ability to use classical negation in clauses. If we limit ourselves to positive clausal programs without classical negation we find that the expressiveness is restricted to P.\nIn order to see this, let us take a closer look at the immediate consequence operator for clausal programs as defined in Definition 13. When there are no occurrences of classical negation we can simplify this immediate consequence operator to\nTwP (E) = {e0 | e0 \u2190 e1, ..., em \u2208 P \u2227 \u2200i \u2208 {1, ...,m} \u00b7 \u2203e \u2208 E \u00b7 e \u2286 ei}\nwhere e \u2286 ei is defined as the subset relation where we interpret e and ei as sets of literals, i.e. e = (l1 \u2228 ... \u2228 ln) is interpreted as {l1, ..., ln}.\nProposition 15 Let P be a positive clausal program without classical negation. We can find the unique answer set of P in polynomial time.\nThe proof is given in the online appendix of the paper, pp. 14. We now examine the complexity of general clausal programs. We will do this by showing that the problem of determining the satisfiability of a QBF of the form \u03c6 = \u2203X1\u2200X2 \u00b7 p(X1, X2) with p(X1, X2) in DNF can be reduced to the problem of determining whether a clause \u2018e\u2019 is entailed by a consistent answer set M of the clausal program P . We start with the definition of our reduction.\nDefinition 15 Let \u03c6 = \u2203X1\u2200X2 \u00b7 p(X1, X2) be a QBF with p(X1, X2) = \u03b81 \u2228 ... \u2228 \u03b8n a formula in disjunctive normal form with Xi sets of variables. We define the clausal program P\u03c6 corresponding to \u03c6 as\nP\u03c6 = {x\u2190 not \u00acx | x \u2208 X1} \u222a {\u00acx\u2190 not x | x \u2208 X1} (12)\n\u222a {\u00ac\u03b8t \u2228 sat\u2190 | 1 \u2264 t \u2264 n} (13)\n\u222a {\u2190 not sat} (14)\nwith \u00ac\u03b8t the clausal representation of the negation of the formula \u03b8t, e.g. when \u03b8t = x1 \u2227 \u00acx2 \u2227 ... \u2227 \u00acxk then \u00ac\u03b8t = \u00acx1 \u2228 x2 \u2228 ... \u2228 xk.\nExample 12 Given the QBF \u03c6 = \u2203p1, p2\u2200q1, q2 \u00b7 (p1 \u2227 q1) \u2228 (p2 \u2227 q2) \u2228 (\u00acq1 \u2227 \u00acq2) the clausal program P\u03c6 is\np1 \u2190 not \u00acp1\n\u00acp1 \u2190 not p1\np2 \u2190 not \u00acp2\n\u00acp2 \u2190 not p2\n\u00acp1 \u2228 \u00acq1 \u2228 sat \u2190\n\u00acp2 \u2228 \u00acq2 \u2228 sat \u2190\nq1 \u2228 q2 \u2228 sat \u2190\n\u2190 not sat .\nNotice how M = {p1, p2,\u00acp1 \u2228 \u00acq1 \u2228 sat ,\u00acp2 \u2228 \u00acq2 \u2228 sat , q1 \u2228 q2 \u2228 sat} is an answer set of P\u03c6 and that M |= sat . Accordingly we find that the QBF is satisfied.\nIf we take the QBF \u03c6\u2032 = \u2203p1, p2\u2200q1, q2 \u00b7 (p1 \u2227 q1) \u2228 (p2 \u2227 q2) then the clausal program P\u03c6\u2032 corresponding to \u03c6 \u2032 is the program P\u03c6 in which the penultimate rule has been removed. Notice how P\u03c6\u2032 has no answer sets, because we are not able to entail \u2018sat \u2019 from any of the answer sets of P\u03c6\u2032 . Indeed, the QBF \u03c6 \u2032 is not satisfiable.\nProposition 16 (weak disjunction; brave reasoning) Let P be a clausal program. The problem of deciding whether a clause \u2018e\u2019 is entailed by a consistent answer set M of P is \u03a3P2 -hard.\nThe proof is given in the online appendix of the paper, pp. 14-15.\nProposition 17 (weak disjunction; brave reasoning) Let P be a clausal program. The problem of deciding whether a clause \u2018e\u2019 is entailed by a consistent answer set M of P is in \u03a3P2 .\nThe proof is given in the online appendix of the paper, pp. 15.\nCorollary 4 Let P be a clausal program. The problem of deciding whether a clause \u2018e\u2019 is entailed by a consistent answer set E of P is \u03a3P2 -complete.\nCorollary 5 (weak disjunction; answer set existence) Determining whether a clausal program P has a consistent answer set is an \u03a3P2 - complete problem.\nThe proof is given in the online appendix of the paper, pp. 15.\nCorollary 6 (weak disjunction; cautious reasoning) Cautious reasoning, i.e. determining whether a clause \u2018e\u2019 is entailed by every answer set M of a clausal program P , is \u03a0P2 -complete.\nProof This problem is complementary to brave reasoning, i.e. we verify that there does not exist an answer set M \u2032 of P such that \u2018\u00ace\u2019 is entailed by M \u2032."}, {"heading": "6 Related Work", "text": "The work presented in this paper touches on various topics that have been the subject of previous research. In this section we structure our discussion of related existing work along 3 main lines. Previous work on the semantics of disjunctive programs is discussed in Section 6.1. In Section 6.2 we look at how ASP and possibility theory have been used in the literature for epistemic reasoning. Finally, in Section 6.3, we look at prior work on characterizing rules with possibility theory and fuzzy logic."}, {"heading": "6.1 Semantics of Disjunctive Programs", "text": "Many characterizations of stable models have been proposed in the literature. We refer the reader to (Lifschitz 2010) for a concise overview of thirteen such definitions. One of the earliest characterizations of stable models was in terms of autoepistemic logic (Moore 1985). Formulas in autoepistemic logic are constructed using atoms and propositional connectives, as well as the modal operator L, which intuitively stands for \u201cit is believed\u201d. The characterization of stable models proposed in (Gelfond and Lifschitz 1991) based on autoepistemic logic is to look at \u2018not a\u2019 as the expression \u2018\u00acLa\u2019, a choice which clearly stands out for its simplicity and intuitively. For example, to explain the semantics of the rule a0 \u2190 a1, ..., am, not am+1, ..., not an one would consider the formula a1\u2227...\u2227am\u2227\u00acLam+1\u2227 ... \u2227 \u00acLan \u2192 a0. Yet this characterization does have some problems. Indeed, it\nwas soon afterwards realized that this correspondence does not hold for programs with classical negation or disjunction in the head. A more involved characterization based on autoepistemic logic that does work for classical negation and disjunction has been proposed in (Lifschitz and Schwarz 1993). The idea is to look at literals \u2018l\u2019 that are not preceded by negation as failure as the formula (l\u2227Ll), while one still looks at a literal of the form \u2018not l\u2019 as the formula \u00acLl. In our approach, an expression of the form \u2018not l\u2019 is essentially identified with \u03a0(\u00acl), which clearly resembles the first characterization in terms of autoepistemic logic. By staying closer to the Gelfond-Lifschitz reduct, our approach is more elegant in that we do not require a special translation of literals in order to be able to deal with classical negation and disjunction.\nSeveral authors have already proposed alternatives and extensions to the semantics of disjunctive programs. Ordered disjunction (Brewka 2002) falls in the latter category and allows to use the head of the rule to formulate alternative solutions in their preferred order. For example, a rule such as l1 \u00d7 ... \u00d7 lk \u2190 represents the knowledge that l1 is preferred over l2 which is preferred over l3 . . . , but that at the very least we want lk to be true. As such it allows for an easy way to express context dependent preferences. The semantics of ordered disjunction allow certain non-minimal models to be answer sets, hence, unlike the work in this paper, it does not adhere to the standard semantics of disjunctive rules in ASP.\nAnnotated disjunctions are another example of a framework that changes the semantics of disjunctive programs (Vennekens et al. 2004). It is based on the idea that every disjunct in the head of a rule is annotated with a probability. Interestingly, both ordered and annotated disjunction rely on split programs, as found in the possible model semantics (Sakama and Inoue 1994). These semantics provide an alternative to the minimal model semantics. The idea is to split a disjunctive program into a number of normal programs, one for each possible choice of disjuncts in the head, of which the minimal Herbrand models are then the possible models of the disjunctive programs. Intuitively this means that a possible model represents a set of atoms for which a possible justification is present in the program. In line with our conclusions for weak disjunction, using the possible model semantics also leads to a lower computational complexity.\nNot all existing extensions of disjunction allow non-minimal models. For example, in (Buccafurri et al. 2002) an extension of disjunctive logic programs is presented which adds the idea of inheritance. Conflicts between rules are then resolved in favor of more specific rules. Such an approach allows for an intuitive way to deal with default reasoning and exceptions. In particular, the semantics allow for rules to be marked as being defeasible and allows to specify an order or inheritance tree among (sets of) rules. Interestingly, the complexity of the resulting system is not affected and coincides with the complexity of ordinary disjunctive programs."}, {"heading": "6.2 Epistemic Reasoning with ASP and Possibility Theory", "text": "In (Gelfond 1991) it was argued that classical ASP, while later proven to have strong epistemic foundations (Loyer and Straccia 2006), is not well-suited for epistemic\nreasoning. Specifically, ASP lacks mechanisms for introspection and can thus not be used to e.g. reason based on cautiously deducible information. At the same time, however, it was shown that extensions of ASP could be devised that do allow for a natural form of epistemic reasoning. The language ASPK proposed in (Gelfond 1991) allows for modal atoms, e.g. Ka, where K is a modal operator that can intuitively be read as \u201cit is known that [a is true]\u201d. These new modal atoms can in turn be used in the body of rules. The semantics of ASPK were originally based on a three-valued interpretation (to allow for the additional truth value \u2018uncertain\u2019), but later, in (Truszczyn\u0301ski 2011), it was shown that this is not essential and that a more classical two-valued possible world structure can also be considered. In addition, further extensions are discussed that allow for epistemic reasoning over arbitrary theories, where it is shown that ASPK can be encoded within these extensions. The complexity is studied for these extensions and is shown to be brought up one level w.r.t. ASP, e.g. to \u03a3P3 for disjunctive epistemic programs.\nAlternatively, existing extensions of ASP can be used to implement some epistemic reasoning tasks, such as reasoning based on brave/cautious conclusions. This idea is proposed in (Faber and Woltran 2009) to overcome the need for an intermediary step to compute the desired consequences of the ASP program P1, before being fed into P2. Rather, they propose a translation to manifold answer set programs, which exploit the concept of weak constraints (Buccafurri et al. 2000) to allow for such programs to access all desired consequences of P1 within a single answer set. As such, for problems that can be cast into this particular form, only a single ASP program needs to be evaluated and the intermediary step is made obsolete.\nAs we mentioned in Section 6.1, the semantics of ASP can also be expressed in terms of autoepistemic logic (Marek and Truszczyn\u0301ski 1991). These semantics have the benefit of making the modal operator explicit, allowing for an extensions of ASP that incorporates such explicit modalities to better express exactly which form of knowledge is required. However, since autoepistemic logic treats negation-as-failure as a modality, it is quite hard to extend to the uncertain case. Furthermore, as already discussed, it as shown in (Lifschitz and Schwarz 1993) that this characterization does not allow us to treat classical negation or disjunctive rules in a natural way, which weakens its position as a candidate for generalizing ASP from normal programs to e.g. disjunctive programs.\nPossibility theory, which can e.g. be used for belief revision, has a strong epistemic\nnotion and shares a lot of commonalities with epistemic entrenchments (Dubois and Prade 1991). Furthermore, in (Dubois et al. 2012) a generalization of possibilistic logic is studied, which corresponds to a weighted version of a fragment of the modal logic KD. In this logic, epistemic states are represented as possibility distributions, and logical formulas are used to express constraints on possible epistemic states. In this paper, we similarly interpret rules in ASP as constraints on possibility distributions, which furthermore allows us to unearth the semantics of weak disjunction."}, {"heading": "6.3 Characterization of Rules using Possibility Theory and Fuzzy Logic", "text": "A large amount of research has focused on how possibility distributions can be used to assign a meaning to rules. For example, possibility theory has been used to model default rules (Benferhat et al. 1992; Benferhat et al. 1997). Specifically, a default rule \u201cif a then b\u201d is interpreted as \u03a0(a\u2227b) > \u03a0(a\u2227\u00acb), which captures the intuition that when a is known to hold, b is more plausible than \u00acb, if all that is known is that a holds. In this approach entailment is defined by looking at the least specific possibility distributions which is similar in spirit to our approach for characterizing ASP rules (although the notion of least specific possibility distribution is defined, in this context, w.r.t. the plausibility ordering on interpretations induced by the possibility degrees).\nThe work on possibilistic logic (Dubois et al. 1994) forms the basis of possibilistic logic programming (Dubois et al. 1991). The idea of possibilistic logic programming is to start from a necessity-valued knowledge base, which is a finite set of pairs (\u03c6 \u03b1), called necessity-valued formulas, with \u03c6 a closed first-order formula and \u03b1 \u2208 [0, 1]. Semantically, a necessity-valued formula expresses a constraint of the form N(\u03c6) \u2265 \u03b1 on the set of possibility distributions. A possibilistic logic program is then a set of necessity-valued implications. As rules are essentially modelled using material implication, however, the stable model semantics cannot straightforwardly be characterized using possibilistic logic programming. For example, the knowledge base {(a\u2192 b 1), (\u00acb 1)}, which represents the program {b\u2190 a,\u00acb\u2190}, induces that N(\u00aca) = 1. Indeed, the semantics of this knowledge base indicate that \u03a0(a \u2227 \u00acb) = 0 and \u03a0(b) = 0, i.e. we find that \u03a0(a) = 0. In other words: a direct encoding using possibilistic logic programming allows for contraposition, which is not in accordance with the stable model semantics.\nRules in logic can also be interpreted as statements of conditional probability (Jaynes 2003). In the possibilistic setting this notion has been adapted to the notion of conditional necessity measures. Rules can be then also be modelled in terms of conditional necessity measures (Benferhat et al. 1997; Dubois and Prade 1997; Benferhat et al. 2002). The conditional possibility measure \u03a0 (\u03c8 | \u03c6) is defined as the greatest solution to the equation \u03a0(\u03c6\u2227\u03c8) = min(\u03a0 (\u03c8 | \u03c6) ,\u03a0(\u03c6)) in accordance with the principle of least specificity. It can be derived mathematically that this gives us \u03a0 (\u03c8 | \u03c6) = 1 if \u03a0(\u03c8 \u2227 \u03c6) = \u03a0(\u03c6) and \u03a0 (\u03c8 | \u03c6) = \u03a0(\u03c8 \u2227 \u03c6) otherwise whenever \u03a0(\u03c6) > 0. When \u03a0(\u03c6) = 0, then by convention \u03a0 (\u03c8 | \u03c6) = 1 for every \u03c8 6= \u22a5 and \u03a0 (\u22a5 | \u03c6) = 0, otherwise. The conditional necessity measure is defined as N (\u03c8 | \u03c6) = 1\u2212\u03a0(\u00ac\u03c8 | \u03c6). However, there does not seem to be a straightforward way to capture the stable model semantics using conditional necessity measures, especially when classical negation is allowed. Indeed, if we represent the semantics of the program {b\u2190 a,\u00acb\u2190} as the constraints N (b | a) \u2265 1 and N (\u00aca | \u22a4) \u2265 1. Using the definition of the conditional necessity measure, the first constraint is equivalent to 1\u2212\u03a0(\u00acb | a) \u2265 1, i.e. \u03a0 (\u00acb | a) = 0. The second constraint simplifies to \u03a0(a) = 0, which, using the convention stated above gives rise to \u03a0 (\u00acb | a) = 1, clearly a contradictory result to the earlier conclusion that \u03a0 (\u00acb | a) = 0.\nThe work in (Nicolas et al. 2006) was one of the first papers to explore the idea\nof combining possibility theory with ASP. Rather than defining the semantics of ASP in terms of constraints on possibility distributions as we did in this paper, the goal was to allow one to reason with possibilities in ASP programs. In this way one can associate certainties with the information encoded in an ASP program. The approach from (Nicolas et al. 2006) upholds the 1-on-1 relationship between the classical answer sets of a normal program and the possibilistic answer sets, which brings with it some advantages. One of those advantages is that it allows us to deal with possibilistic nested programs (Nieves and Lindgren 2012). The work from Nicolas et al. was later extended to also cover the case of disjunctive ASP in (Nieves et al. 2013). The latter approach allows us to e.g. capture qualitative information by considering partially ordered sets, which would not be straightforward to accomplish in our work. However, the approaches from (Nicolas et al. 2006) and (Nieves et al. 2013) work by taking a possibilistic ASP program and reducing it \u2013 by ignoring the certainty values \u2013 to a possibilistic ASP program without negation-as-failure. As such, both approaches loose the certainty encoded through negation-as-failure, since the certainty values are not taken into account.\nPossibility theory has also been used to define various semantics of fuzzy if-then rules (Zadeh 1992). Rather than working with literals, fuzzy if-then rules consider fuzzy predicates which each have their own universe of discourse. To draw conclusions from a set of fuzzy if-then rules, mechanisms are needed that can produce an (intuitively acceptable) conclusion from a set of such rules.\nFinally, a formal connection also exists between the approach from Section 3 and the work on residuated logic programs (Dama\u0301sio and Pereira 2001) under the Go\u0308del semantics. Both approaches are different in spirit, however, in the same way that possibilistic logic (which deals with uncertainty or priority) is different from Go\u0308del logic (which deals with graded truth). The formal connection is due to the fact that necessity measures are min-decomposable and disappears as soon as classical negation or disjunction is considered."}, {"heading": "7 Conclusions", "text": "In this paper we defined semantics for Possibilistic ASP (PASP), a framework that combines possibility theory and ASP to allow for reasoning under (qualitative) uncertainty. These semantics are based on the interpretation of possibilistic rules as constraints on possibility distributions. We showed how our semantics for PASP differ from existing semantics for PASP. Specifically, they adhere to a different intuition for negation-as-failure. As such, they can be used to arrive at acceptable results for problems where the possibilistic answer sets according to the existing semantics for PASP do not necessarily agree with our intuition of the problem. In addition, we showed how our semantics for PASP allowed for a new characterization of ASP. When looking at ASP as a special case of PASP, we naturally recover the intuition of a rule that the head is certain whenever we are certain that the body holds. The resulting characterization stays close to the intuition of the stable model semantics, yet also shares the explicit reference to modalities with autoepistemic logic. We showed that this characterization not only naturally characterizes normal\nprograms, i.e. programs with negation-a-failure, but can also naturally characterize disjunctive programs and programs with classical negation.\nDue to our explicit reference to modalities in the semantics, we are furthermore able to characterize an alternative semantics for disjunction in the head of a rule that has a more epistemic flavour than the standard treatment of disjunction in ASP, i.e. given a rule of the form (a \u2228 b \u2190) we do not obtain two answer sets, but rather we have \u2018a \u2228 b\u2019 as-is in the answer set. While such a characterization might seem weak, we showed that the interplay with literals significantly affects the expressiveness. Indeed, we found that the problem of brave reasoning/cautious reasoning under these weak semantics for disjunction for a program without negationas-failure, but with classical negation, is BH2-complete and coNP-complete, respectively. This highlights that weak disjunction is not merely syntactic sugar, i.e. it cannot simply be simulated in normal ASP without causing an exponential blow-up. For strong disjunction, on the other hand, we have obtained that brave and cautious reasoning without negation-as-failure are \u03a3P2 -complete and coNP-complete, respectively. As such, the weak semantics for disjunction detailed in this paper allow us to work with disjunction in a less complex way that still remains non-trivial. If, however, we restrict ourselves to atoms, then brave reasoning under the weak semantics for disjunction is P-complete."}], "references": [{"title": "A simple modal logic for reasoning about revealed beliefs", "author": ["M. Banerjee", "D. Dubois"], "venue": "Proceedings of the 10th European Conference on Symbolic and Quantitative Approaches to Reasoning with Uncertainty (ECSQARU\u201909). 805\u2013816.", "citeRegEx": "Banerjee and Dubois,? 2009", "shortCiteRegEx": "Banerjee and Dubois", "year": 2009}, {"title": "Knowledge, Representation, Reasoning and Declarative Problem Solving", "author": ["C. Baral"], "venue": "Cambridge University Press.", "citeRegEx": "Baral,? 2003", "shortCiteRegEx": "Baral", "year": 2003}, {"title": "Possibilistic answer set programming revisited", "author": ["K. Bauters", "S. Schockaert", "M. De Cock", "D. Vermeir"], "venue": "Proceedings of the 26th Conference on Uncertainty in Artificial Intelligence (UAI).", "citeRegEx": "Bauters et al\\.,? 2010", "shortCiteRegEx": "Bauters et al\\.", "year": 2010}, {"title": "Weak and strong disjunction in possibilistic ASP", "author": ["K. Bauters", "S. Schockaert", "M. De Cock", "D. Vermeir"], "venue": "Proceedings of the 11th International Conference on Scalable Uncertainty Management (SUM).", "citeRegEx": "Bauters et al\\.,? 2011", "shortCiteRegEx": "Bauters et al\\.", "year": 2011}, {"title": "On the transformation between possibilistic logic bases and possibilistic causal networks", "author": ["S. Benferhat", "D. Dubois", "L. Garcia", "H. Prade"], "venue": "International Journal of Approximate Reasoning 29, 2, 135\u2013173.", "citeRegEx": "Benferhat et al\\.,? 2002", "shortCiteRegEx": "Benferhat et al\\.", "year": 2002}, {"title": "Representing default rules in possibilistic logic", "author": ["S. Benferhat", "D. Dubois", "H. Prade"], "venue": "Proceedings of the 3rd International Conference on Principles of Knowledge Representation and Reasoning (KR). 673\u2013684.", "citeRegEx": "Benferhat et al\\.,? 1992", "shortCiteRegEx": "Benferhat et al\\.", "year": 1992}, {"title": "Nonmonotonic reasoning, conditional objects and possibility theory", "author": ["S. Benferhat", "D. Dubois", "H. Prade"], "venue": "Artificial Intelligence 92, 1\u20132, 259\u2013276.", "citeRegEx": "Benferhat et al\\.,? 1997", "shortCiteRegEx": "Benferhat et al\\.", "year": 1997}, {"title": "Logic programming with ordered disjunction", "author": ["G. Brewka"], "venue": "Proceedings of the 18th National Conference on Artificial Intelligence (AAAI). 100\u2013105.", "citeRegEx": "Brewka,? 2002", "shortCiteRegEx": "Brewka", "year": 2002}, {"title": "Disjunctive logic programs with inheritance", "author": ["F. Buccafurri", "W. Faber", "N. Leone"], "venue": "Theory and Practice of Logic Programming 2, 3, 293\u2013321.", "citeRegEx": "Buccafurri et al\\.,? 2002", "shortCiteRegEx": "Buccafurri et al\\.", "year": 2002}, {"title": "Enhancing disjunctive datalog by constraints", "author": ["F. Buccafurri", "N. Leone", "P. Rullo"], "venue": "IEEE Transactions on Knowledge and Data Engineering 12, 5, 845\u2013860.", "citeRegEx": "Buccafurri et al\\.,? 2000", "shortCiteRegEx": "Buccafurri et al\\.", "year": 2000}, {"title": "The boolean hierarchy I: Structural properties", "author": ["Cai", "J.-Y", "T. Gundermann", "J. Hartmanis", "L. Hemachandra", "V. Sewelson", "K. Wagner", "G. Wechsung"], "venue": "SIAM Journal on Computing", "citeRegEx": "Cai et al\\.,? \\Q1988\\E", "shortCiteRegEx": "Cai et al\\.", "year": 1988}, {"title": "Monotonic and residuated logic programs", "author": ["C.V. Dam\u00e1sio", "L.M. Pereira"], "venue": "ECSQARU \u201901: Proceedings of the 6th European Conference on Symbolic and Quantitative Approaches to Reasoning with Uncertainty. 748\u2013759.", "citeRegEx": "Dam\u00e1sio and Pereira,? 2001", "shortCiteRegEx": "Dam\u00e1sio and Pereira", "year": 2001}, {"title": "Towards possibilistic logic programming", "author": ["D. Dubois", "J. Lang", "H. Prade"], "venue": "Proceedings of the 8th International Conference on Logic Programming (ICLP). 581\u2013 595.", "citeRegEx": "Dubois et al\\.,? 1991", "shortCiteRegEx": "Dubois et al\\.", "year": 1991}, {"title": "Possibilistic logic", "author": ["D. Dubois", "J. Lang", "H. Prade"], "venue": "Handbook of Logic for Artificial Intelligence and Logic Programming 3, 1, 439\u2013513.", "citeRegEx": "Dubois et al\\.,? 1994", "shortCiteRegEx": "Dubois et al\\.", "year": 1994}, {"title": "Epistemic entrenchment and possibilistic logic", "author": ["D. Dubois", "H. Prade"], "venue": "Artificial Intelligence 50, 2, 223\u2013239.", "citeRegEx": "Dubois and Prade,? 1991", "shortCiteRegEx": "Dubois and Prade", "year": 1991}, {"title": "A synthetic view of belief revision with uncertain inputs in the framework of possibility theory", "author": ["D. Dubois", "H. Prade"], "venue": "International Journal of Approximate Reasoning 17, 2-3, 295\u2013324.", "citeRegEx": "Dubois and Prade,? 1997", "shortCiteRegEx": "Dubois and Prade", "year": 1997}, {"title": "Stable models in generalized possibilistic logic", "author": ["D. Dubois", "H. Prade", "S. Schockaert"], "venue": "Proceedings of the 13th International Conference on Principles of Knowledge Representation and Reasoning (KR\u201912), 519\u2013529.", "citeRegEx": "Dubois et al\\.,? 2012", "shortCiteRegEx": "Dubois et al\\.", "year": 2012}, {"title": "Complexity results for disjunctive logic programming and application to nonmonotonic logics", "author": ["T. Eiter", "G. Gottlob"], "venue": "Proceedings of the 1993 International Logic Programming Symposium (ILPS). 266\u2013278.", "citeRegEx": "Eiter and Gottlob,? 1993", "shortCiteRegEx": "Eiter and Gottlob", "year": 1993}, {"title": "Manifold answer-set programs for meta-reasoning", "author": ["W. Faber", "S. Woltran"], "venue": "LPNMR. Lecture Notes in Computer Science, vol. 5753. Springer, 115\u2013128.", "citeRegEx": "Faber and Woltran,? 2009", "shortCiteRegEx": "Faber and Woltran", "year": 2009}, {"title": "On stratified autoepistemic theories", "author": ["M. Gelfond"], "venue": "Proceedings of the 6th National Conference on Artificial Intelligence (AAAI). 207\u2013211.", "citeRegEx": "Gelfond,? 1987", "shortCiteRegEx": "Gelfond", "year": 1987}, {"title": "Strong introspection", "author": ["M. Gelfond"], "venue": "Proceedings of the 9th National conference on Artificial intelligence (AAAI\u201991). 386\u2013391.", "citeRegEx": "Gelfond,? 1991", "shortCiteRegEx": "Gelfond", "year": 1991}, {"title": "Classical negation in logic programs and disjunctive databases", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "New Generation Computing 9, 365\u2013385.", "citeRegEx": "Gelfond and Lifschitz,? 1991", "shortCiteRegEx": "Gelfond and Lifschitz", "year": 1991}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifzchitz"], "venue": "Proceedings of the 5th International Conference on Logic Programming (ICLP). 1081\u20131086.", "citeRegEx": "Gelfond and Lifzchitz,? 1988", "shortCiteRegEx": "Gelfond and Lifzchitz", "year": 1988}, {"title": "Logic in Computer Science: Modelling and Reasoning about Systems", "author": ["M. Huth", "M. Ryan"], "venue": "Cambridge University Press.", "citeRegEx": "Huth and Ryan,? 2004", "shortCiteRegEx": "Huth and Ryan", "year": 2004}, {"title": "Probability Theory: The Logic of Science", "author": ["E. Jaynes"], "venue": "Cambridge University Press.", "citeRegEx": "Jaynes,? 2003", "shortCiteRegEx": "Jaynes", "year": 2003}, {"title": "Thirteen definitions of a stable model", "author": ["V. Lifschitz"], "venue": "Fields of Logic and Computation. Lecture Notes in Computer Science, vol. 6300. 488\u2013503.", "citeRegEx": "Lifschitz,? 2010", "shortCiteRegEx": "Lifschitz", "year": 2010}, {"title": "Extended logic programs as autoepistemic theories", "author": ["V. Lifschitz", "G. Schwarz"], "venue": "In Proceedings of the 2nd International Workshop on Logic Programming and Nonmonotonic Reasoning. 101\u2013114.", "citeRegEx": "Lifschitz and Schwarz,? 1993", "shortCiteRegEx": "Lifschitz and Schwarz", "year": 1993}, {"title": "Epistemic foundation of stable model semantics", "author": ["Y. Loyer", "U. Straccia"], "venue": "Theory and Practice of Logic Programming 6, 4, 355\u2013393.", "citeRegEx": "Loyer and Straccia,? 2006", "shortCiteRegEx": "Loyer and Straccia", "year": 2006}, {"title": "Autoepistemic logic", "author": ["W. Marek", "M. Truszczy\u0144ski"], "venue": "Journal of the ACM 38, 587\u2013618.", "citeRegEx": "Marek and Truszczy\u0144ski,? 1991", "shortCiteRegEx": "Marek and Truszczy\u0144ski", "year": 1991}, {"title": "Semantical considerations on nonmonotonic logic", "author": ["R. Moore"], "venue": "Artificial Intelligence 29, 1, 75\u201394.", "citeRegEx": "Moore,? 1985", "shortCiteRegEx": "Moore", "year": 1985}, {"title": "On the complexity of fragments of modal logics", "author": ["L.A. Nguyen"], "venue": "Proceedings of the 5th International Conference on Advances in Modal logic (AiML\u201905). 249\u2013268.", "citeRegEx": "Nguyen,? 2005", "shortCiteRegEx": "Nguyen", "year": 2005}, {"title": "Possibilistic uncertainty handling for answer set programming", "author": ["P. Nicolas", "L. Garcia", "I. St\u00e9phan", "C. Lef\u00e8vre"], "venue": "Annals of Mathematics and Artificial Intelligence 47, 1\u20132, 139\u2013181.", "citeRegEx": "Nicolas et al\\.,? 2006", "shortCiteRegEx": "Nicolas et al\\.", "year": 2006}, {"title": "Possibilistic nested logic programs", "author": ["J.C. Nieves", "H. Lindgren"], "venue": "Technical Communications of the 28th International Conference on Logic Programming (ICLP\u201912). 267\u2013276.", "citeRegEx": "Nieves and Lindgren,? 2012", "shortCiteRegEx": "Nieves and Lindgren", "year": 2012}, {"title": "Semantics for possibilistic disjunctive programs", "author": ["J.C. Nieves", "M. Osorio", "U. Cort\u00e9s"], "venue": "Theory and Practice of Logic Programming 13, 1, 33\u201370.", "citeRegEx": "Nieves et al\\.,? 2013", "shortCiteRegEx": "Nieves et al\\.", "year": 2013}, {"title": "Computational complexity", "author": ["C. Papadimitriou"], "venue": "Addison-Wesley.", "citeRegEx": "Papadimitriou,? 1994", "shortCiteRegEx": "Papadimitriou", "year": 1994}, {"title": "A new logical characterization of stable models and answer sets", "author": ["D. Pearce"], "venue": "Proceedings of the 2nd International Workshop on Non-Monotonic Extensions of Logic Programming (NMELP). Lecture Notes in Artificial Intelligence, vol. 1216. 57\u201370.", "citeRegEx": "Pearce,? 1997", "shortCiteRegEx": "Pearce", "year": 1997}, {"title": "An alternative approach to the semantics of disjunctive logic programs and deductive databases", "author": ["C. Sakama", "K. Inoue"], "venue": "Journal of Automated Reasoning 13, 1, 145\u2013 172.", "citeRegEx": "Sakama and Inoue,? 1994", "shortCiteRegEx": "Sakama and Inoue", "year": 1994}, {"title": "Revisiting epistemic specifications", "author": ["M. Truszczy\u0144ski"], "venue": "Logic Programming, Knowledge Representation, and Nonmonotonic Reasoning. Lecture Notes in Computer Science, vol. 6565. Springer Berlin Heidelberg, 315\u2013333.", "citeRegEx": "Truszczy\u0144ski,? 2011", "shortCiteRegEx": "Truszczy\u0144ski", "year": 2011}, {"title": "Logic programs with annotated disjunctions", "author": ["J. Vennekens", "S. Verbaeten", "M. Bruynooghe"], "venue": "Proceedings of the 20th International Conference on Logic Programming (ICLP). Lecture Notes in Computer Science, vol. 3132. 431\u2013445.", "citeRegEx": "Vennekens et al\\.,? 2004", "shortCiteRegEx": "Vennekens et al\\.", "year": 2004}, {"title": "Ordered epistemic logic: Semantics, complexity and applications", "author": ["H. Vlaeminck", "J. Vennekens", "M. Bruynooghe", "M. Denecker"], "venue": "Principles of Knowledge Representation and Reasoning: Proceedings of the 13th International Conference (KR\u201912).", "citeRegEx": "Vlaeminck et al\\.,? 2012", "shortCiteRegEx": "Vlaeminck et al\\.", "year": 2012}, {"title": "Fuzzy logic and the calculus of fuzzy if-then rules", "author": ["L. Zadeh"], "venue": "Proceedings of the 22nd IEEE International Symposium on Multiple-Valued Logic (ISMVL). 480\u2013480.", "citeRegEx": "Zadeh,? 1992", "shortCiteRegEx": "Zadeh", "year": 1992}], "referenceMentions": [{"referenceID": 31, "context": "Semantics for PASP have been introduced in (Nicolas et al. 2006) for possibilistic normal programs and later extended to possibilistic disjunctive programs in (Nieves et al.", "startOffset": 43, "endOffset": 64}, {"referenceID": 33, "context": "2006) for possibilistic normal programs and later extended to possibilistic disjunctive programs in (Nieves et al. 2013).", "startOffset": 100, "endOffset": 120}, {"referenceID": 31, "context": "Specifically, to deal with PASP rules without negation-as-failure, the semantics from (Nicolas et al. 2006) treat such rules as implications in possibilistic logic (Dubois et al.", "startOffset": 86, "endOffset": 107}, {"referenceID": 13, "context": "2006) treat such rules as implications in possibilistic logic (Dubois et al. 1994).", "startOffset": 62, "endOffset": 82}, {"referenceID": 31, "context": "When faced with negation-as-failure, the semantics from (Nicolas et al. 2006) rely on the reduct operation from classical ASP.", "startOffset": 56, "endOffset": 77}, {"referenceID": 31, "context": "However, as the semantics from (Nicolas et al. 2006) adhere to a different intuition of negation-as-failure, the conclusion is that you need to go to the airport with a necessity of 0.", "startOffset": 31, "endOffset": 52}, {"referenceID": 31, "context": "These semantics do not correspond with the semantics from (Nicolas et al. 2006) when considering programs with negation-as-failure.", "startOffset": 58, "endOffset": 79}, {"referenceID": 31, "context": "this paper can be used in settings in which the possibilistic answer sets according to (Nicolas et al. 2006) do not correspond with the intuitively acceptable results.", "startOffset": 87, "endOffset": 108}, {"referenceID": 22, "context": "One of the most popular characterizations is in terms of the Gelfond-Lifschitz reduct (Gelfond and Lifzchitz 1988) in which an answer set is guessed and verified to be stable.", "startOffset": 86, "endOffset": 114}, {"referenceID": 31, "context": "This characterization is used in the semantics for PASP as presented in (Nicolas et al. 2006).", "startOffset": 72, "endOffset": 93}, {"referenceID": 28, "context": "Alternatively, the answer set semantics of normal programs can be defined in terms of autoepistemic logic (Marek and Truszczy\u0144ski 1991), a well-known non-monotonic modal logic.", "startOffset": 106, "endOffset": 135}, {"referenceID": 26, "context": "However, as has been shown early on in (Lifschitz and Schwarz 1993), the characterization in terms of autoepistemic logic does not allow us to treat classical negation or disjunctive rules in a natural way, which weakens its position as a candidate for generalizing ASP from normal programs to e.", "startOffset": 39, "endOffset": 67}, {"referenceID": 35, "context": "Equilibrium logic (Pearce 1997) offers yet another way for characterizing and extending ASP, but does not feature modalities which limits its potential for epistemic reasoning as it does not allow us to reason over the established knowledge of an agent.", "startOffset": 18, "endOffset": 31}, {"referenceID": 3, "context": "This paper aggregates and extends parts of our work from (Bauters et al. 2011) and substantially extends a previous conference paper (Bauters et al.", "startOffset": 57, "endOffset": 78}, {"referenceID": 2, "context": "2011) and substantially extends a previous conference paper (Bauters et al. 2010), which did not consider classical negation nor computational complexity.", "startOffset": 60, "endOffset": 81}, {"referenceID": 31, "context": "We then review the semantics of PASP from (Nicolas et al. 2006), a framework that combines possibilistic logic and ASP.", "startOffset": 42, "endOffset": 63}, {"referenceID": 22, "context": "The semantics of an ASP program with negation-as-failure is based on the idea of a stable model (Gelfond and Lifzchitz 1988).", "startOffset": 96, "endOffset": 124}, {"referenceID": 1, "context": "When P has the answer set LitP , then this is the unique (Baral 2003) inconsistent answer set and we say that P is an inconsistent program.", "startOffset": 57, "endOffset": 69}, {"referenceID": 13, "context": "At the semantic level, possibilistic logic (Dubois et al. 1994) is defined in", "startOffset": 43, "endOffset": 63}, {"referenceID": 13, "context": "The possibility measure \u03a0 is defined by (Dubois et al. 1994):", "startOffset": 40, "endOffset": 60}, {"referenceID": 13, "context": "and evaluates the extent to which a proposition p is entailed by the available beliefs (Dubois et al. 1994).", "startOffset": 87, "endOffset": 107}, {"referenceID": 13, "context": "only normalized possibility distributions can express consistent beliefs) (Dubois et al. 1994).", "startOffset": 74, "endOffset": 94}, {"referenceID": 13, "context": "Such a least specific possibility distribution always exists and is unique (Dubois et al. 1994).", "startOffset": 75, "endOffset": 95}, {"referenceID": 31, "context": "Possibilistic ASP (PASP) (Nicolas et al. 2006) combines ASP and possibility theory by associating a weight with each rule, where the weight denotes the necessity with which the head of the rule can be concluded given that the body is known to hold.", "startOffset": 25, "endOffset": 46}, {"referenceID": 31, "context": "We now present a straightforward extension of the semantics for PASP introduced in (Nicolas et al. 2006).", "startOffset": 83, "endOffset": 104}, {"referenceID": 31, "context": "Note that the immediate consequence operator defined in Definition 1 is equivalent to the one proposed in (Nicolas et al. 2006), although we formulate it somewhat differently.", "startOffset": 106, "endOffset": 127}, {"referenceID": 31, "context": "Also, the work from (Nicolas et al. 2006) only considered definite programs, even though adding classical negation does not impose any problems.", "startOffset": 20, "endOffset": 41}, {"referenceID": 31, "context": "The reduct P of a possibilistic normal program is defined as (Nicolas et al. 2006):", "startOffset": 61, "endOffset": 82}, {"referenceID": 31, "context": "The semantics we presented allow for classical negation, even though this was not considered in (Nicolas et al. 2006).", "startOffset": 96, "endOffset": 117}, {"referenceID": 1, "context": "However, adding classical negation does not impose any problems and could, as an alternative, easily be simulated in ASP (Baral 2003).", "startOffset": 121, "endOffset": 133}, {"referenceID": 34, "context": "The complexity classes \u03a3P2 and \u03a0P2 are defined as follows (Papadimitriou 1994): \u03a3P0 = \u03a0 P 0 = P \u03a3P1 = NP \u03a3 P 2 = NP NP", "startOffset": 58, "endOffset": 78}, {"referenceID": 10, "context": "We also consider the complexity class BH2 (Cai et al. 1988), which is the class of all languages L such that L = L1 \u2229 L2, where L1 is in NP and L2 is in coNP.", "startOffset": 42, "endOffset": 59}, {"referenceID": 1, "context": "Brave reasoning as well as answer set existence for simple, normal and disjunctive programs is P-complete, NP-complete and \u03a3P2 -complete, respectively (Baral 2003).", "startOffset": 151, "endOffset": 163}, {"referenceID": 1, "context": "Cautious reasoning for simple, normal and disjunctive programs is P-complete, coNP-complete and \u03a0P2 complete (Baral 2003).", "startOffset": 109, "endOffset": 121}, {"referenceID": 19, "context": "For instance, ASP can be characterized in autoepistemic logic by interpreting \u2018not a\u2019 as the epistemic formula \u00acLa (\u201ca is not believed\u201d) (Gelfond 1987).", "startOffset": 137, "endOffset": 151}, {"referenceID": 31, "context": "This characterization does not coincide with the semantics proposed in (Nicolas et al. 2006) for PASP, as the semantics from (Nicolas et al.", "startOffset": 71, "endOffset": 92}, {"referenceID": 31, "context": "2006) for PASP, as the semantics from (Nicolas et al. 2006) rely on the classical Gelfond-Lifschitz reduct.", "startOffset": 38, "endOffset": 59}, {"referenceID": 22, "context": "The approach taken in (Gelfond and Lifzchitz 1988) to deal with negation-as-failure is to guess an interpretation and verify whether this guess is stable.", "startOffset": 22, "endOffset": 50}, {"referenceID": 31, "context": "In particular, this characterization of PASP does not coincide with the semantics of (Nicolas et al. 2006) and adheres to a different intuition for negation-as-failure.", "startOffset": 85, "endOffset": 106}, {"referenceID": 31, "context": "Still, it is interesting to further investigate the particular relationship between the semantics for PASP as proposed in (Nicolas et al. 2006) and the semantics presented in this section.", "startOffset": 122, "endOffset": 143}, {"referenceID": 31, "context": "In particular, for the semantics of (Nicolas et al. 2006) we have that FN is the G\u00f6del negator FG, defined as FG(0) = 1 and FG(c) = 0 with 0 < c \u2264 1.", "startOffset": 36, "endOffset": 57}, {"referenceID": 31, "context": "we obtain under the approach from (Nicolas et al. 2006) the reduct (0: b \u2190 ), whereas under our approach we obtain the constraint N(b) \u2265 min(0.", "startOffset": 34, "endOffset": 55}, {"referenceID": 31, "context": "This contrasts with the intuition of \u2018not l\u2019 in (Nicolas et al. 2006) as a Boolean condition and understood as \u201cwe cannot derive \u2018l\u2019 with a strictly positive certainty\u201d.", "startOffset": 48, "endOffset": 69}, {"referenceID": 37, "context": "(Truszczy\u0144ski 2011; Vlaeminck et al. 2012).", "startOffset": 0, "endOffset": 42}, {"referenceID": 39, "context": "(Truszczy\u0144ski 2011; Vlaeminck et al. 2012).", "startOffset": 0, "endOffset": 42}, {"referenceID": 17, "context": "(1) (Eiter and Gottlob 1993) (6) Proposition 15 (2) (Baral 2003) (7) Proposition 16 and 17 (3) Proposition 13 and 14 (8) Corollary 5 (4) Corollary 2 (9) Corollary 6 (5) Corollary 3", "startOffset": 4, "endOffset": 28}, {"referenceID": 1, "context": "(1) (Eiter and Gottlob 1993) (6) Proposition 15 (2) (Baral 2003) (7) Proposition 16 and 17 (3) Proposition 13 and 14 (8) Corollary 5 (4) Corollary 2 (9) Corollary 6 (5) Corollary 3", "startOffset": 52, "endOffset": 64}, {"referenceID": 25, "context": "We refer the reader to (Lifschitz 2010) for a concise overview of thirteen such definitions.", "startOffset": 23, "endOffset": 39}, {"referenceID": 29, "context": "One of the earliest characterizations of stable models was in terms of autoepistemic logic (Moore 1985).", "startOffset": 91, "endOffset": 103}, {"referenceID": 21, "context": "The characterization of stable models proposed in (Gelfond and Lifschitz 1991) based on autoepistemic logic is to look at \u2018not a\u2019 as the expression \u2018\u00acLa\u2019, a choice which clearly stands out for its simplicity and intuitively.", "startOffset": 50, "endOffset": 78}, {"referenceID": 26, "context": "A more involved characterization based on autoepistemic logic that does work for classical negation and disjunction has been proposed in (Lifschitz and Schwarz 1993).", "startOffset": 137, "endOffset": 165}, {"referenceID": 7, "context": "Ordered disjunction (Brewka 2002) falls in the latter category and allows to use the head of the rule to formulate alternative solutions in their preferred order.", "startOffset": 20, "endOffset": 33}, {"referenceID": 38, "context": "Annotated disjunctions are another example of a framework that changes the semantics of disjunctive programs (Vennekens et al. 2004).", "startOffset": 109, "endOffset": 132}, {"referenceID": 36, "context": "Interestingly, both ordered and annotated disjunction rely on split programs, as found in the possible model semantics (Sakama and Inoue 1994).", "startOffset": 119, "endOffset": 142}, {"referenceID": 8, "context": "For example, in (Buccafurri et al. 2002) an extension of disjunctive logic programs is presented which adds the idea of inheritance.", "startOffset": 16, "endOffset": 40}, {"referenceID": 20, "context": "In (Gelfond 1991) it was argued that classical ASP, while later proven to have strong epistemic foundations (Loyer and Straccia 2006), is not well-suited for epistemic", "startOffset": 3, "endOffset": 17}, {"referenceID": 27, "context": "In (Gelfond 1991) it was argued that classical ASP, while later proven to have strong epistemic foundations (Loyer and Straccia 2006), is not well-suited for epistemic", "startOffset": 108, "endOffset": 133}, {"referenceID": 20, "context": "The language ASP proposed in (Gelfond 1991) allows for modal atoms, e.", "startOffset": 29, "endOffset": 43}, {"referenceID": 37, "context": "The semantics of ASP were originally based on a three-valued interpretation (to allow for the additional truth value \u2018uncertain\u2019), but later, in (Truszczy\u0144ski 2011), it was shown that this is not essential and that a more classical two-valued possible world structure can also be considered.", "startOffset": 145, "endOffset": 164}, {"referenceID": 18, "context": "This idea is proposed in (Faber and Woltran 2009) to overcome the need for an intermediary step to compute the desired consequences of the ASP program P1, before being fed into P2.", "startOffset": 25, "endOffset": 49}, {"referenceID": 9, "context": "Rather, they propose a translation to manifold answer set programs, which exploit the concept of weak constraints (Buccafurri et al. 2000) to allow for such programs to access all desired consequences of P1 within a single answer set.", "startOffset": 114, "endOffset": 138}, {"referenceID": 28, "context": "1, the semantics of ASP can also be expressed in terms of autoepistemic logic (Marek and Truszczy\u0144ski 1991).", "startOffset": 78, "endOffset": 107}, {"referenceID": 26, "context": "Furthermore, as already discussed, it as shown in (Lifschitz and Schwarz 1993) that this characterization does not allow us to treat classical negation or disjunctive rules in a natural way, which weakens its position as a candidate for generalizing ASP from normal programs to e.", "startOffset": 50, "endOffset": 78}, {"referenceID": 14, "context": "be used for belief revision, has a strong epistemic notion and shares a lot of commonalities with epistemic entrenchments (Dubois and Prade 1991).", "startOffset": 122, "endOffset": 145}, {"referenceID": 16, "context": "Furthermore, in (Dubois et al. 2012) a generalization of possibilistic logic is studied, which corresponds to a weighted version of a fragment of the modal logic KD.", "startOffset": 16, "endOffset": 36}, {"referenceID": 5, "context": "For example, possibility theory has been used to model default rules (Benferhat et al. 1992; Benferhat et al. 1997).", "startOffset": 69, "endOffset": 115}, {"referenceID": 6, "context": "For example, possibility theory has been used to model default rules (Benferhat et al. 1992; Benferhat et al. 1997).", "startOffset": 69, "endOffset": 115}, {"referenceID": 13, "context": "The work on possibilistic logic (Dubois et al. 1994) forms the basis of possibilistic logic programming (Dubois et al.", "startOffset": 32, "endOffset": 52}, {"referenceID": 12, "context": "1994) forms the basis of possibilistic logic programming (Dubois et al. 1991).", "startOffset": 57, "endOffset": 77}, {"referenceID": 24, "context": "Rules in logic can also be interpreted as statements of conditional probability (Jaynes 2003).", "startOffset": 80, "endOffset": 93}, {"referenceID": 6, "context": "Rules can be then also be modelled in terms of conditional necessity measures (Benferhat et al. 1997; Dubois and Prade 1997; Benferhat et al. 2002).", "startOffset": 78, "endOffset": 147}, {"referenceID": 15, "context": "Rules can be then also be modelled in terms of conditional necessity measures (Benferhat et al. 1997; Dubois and Prade 1997; Benferhat et al. 2002).", "startOffset": 78, "endOffset": 147}, {"referenceID": 4, "context": "Rules can be then also be modelled in terms of conditional necessity measures (Benferhat et al. 1997; Dubois and Prade 1997; Benferhat et al. 2002).", "startOffset": 78, "endOffset": 147}, {"referenceID": 31, "context": "The work in (Nicolas et al. 2006) was one of the first papers to explore the idea", "startOffset": 12, "endOffset": 33}, {"referenceID": 31, "context": "The approach from (Nicolas et al. 2006) upholds the 1-on-1 relationship between the classical answer sets of a normal program and the possibilistic answer sets, which brings with it some advantages.", "startOffset": 18, "endOffset": 39}, {"referenceID": 32, "context": "One of those advantages is that it allows us to deal with possibilistic nested programs (Nieves and Lindgren 2012).", "startOffset": 88, "endOffset": 114}, {"referenceID": 33, "context": "was later extended to also cover the case of disjunctive ASP in (Nieves et al. 2013).", "startOffset": 64, "endOffset": 84}, {"referenceID": 31, "context": "However, the approaches from (Nicolas et al. 2006) and (Nieves et al.", "startOffset": 29, "endOffset": 50}, {"referenceID": 33, "context": "2006) and (Nieves et al. 2013) work by taking a possibilistic ASP program and reducing it \u2013 by ignoring the certainty values \u2013 to a possibilistic ASP program without negation-as-failure.", "startOffset": 10, "endOffset": 30}, {"referenceID": 40, "context": "Possibility theory has also been used to define various semantics of fuzzy if-then rules (Zadeh 1992).", "startOffset": 89, "endOffset": 101}, {"referenceID": 11, "context": "Finally, a formal connection also exists between the approach from Section 3 and the work on residuated logic programs (Dam\u00e1sio and Pereira 2001) under the G\u00f6del semantics.", "startOffset": 119, "endOffset": 145}], "year": 2013, "abstractText": "Answer Set Programming (ASP) is a popular framework for modeling combinatorial problems. However, ASP cannot easily be used for reasoning about uncertain information. Possibilistic ASP (PASP) is an extension of ASP that combines possibilistic logic and ASP. In PASP a weight is associated with each rule, where this weight is interpreted as the certainty with which the conclusion can be established when the body is known to hold. As such, it allows us to model and reason about uncertain information in an intuitive way. In this paper we present new semantics for PASP, in which rules are interpreted as constraints on possibility distributions. Special models of these constraints are then identified as possibilistic answer sets. In addition, since ASP is a special case of PASP in which all the rules are entirely certain, we obtain a new characterization of ASP in terms of constraints on possibility distributions. This allows us to uncover a new form of disjunction, called weak disjunction, that has not been previously considered in the literature. In addition to introducing and motivating the semantics of weak disjunction, we also pinpoint its computational complexity. In particular, while the complexity of most reasoning tasks coincides with standard disjunctive ASP, we find that brave reasoning for programs with weak disjunctions is easier.", "creator": "LaTeX with hyperref package"}}}