{"id": "1401.3827", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jan-2014", "title": "Efficient Planning under Uncertainty with Macro-actions", "abstract": "Deciding how to act in partially observable environments remains an active area of research. Identifying good sequences of decisions is particularly challenging when good control performance requires planning multiple steps into the future in domains with many states. Towards addressing this challenge, we present an online, forward-search algorithm called the Posterior Belief Distribution (PBD) that is based on a large database of all factors affecting PBD that are predicted to be relevant for this particular field. The PBD has a low degree of consistency.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Thu, 16 Jan 2014 04:36:09 GMT  (1450kb)", "http://arxiv.org/abs/1401.3827v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["ruijie he", "emma brunskill", "nicholas roy"], "accepted": false, "id": "1401.3827"}, "pdf": {"name": "1401.3827.pdf", "metadata": {"source": "CRF", "title": "Efficient Planning under Uncertainty with Macro-actions", "authors": ["Ruijie He", "Emma Brunskill", "Nicholas Roy"], "emails": ["RUIJIE@CSAIL.MIT.EDU", "EMMA@CS.BERKELEY.EDU", "NICKROY@CSAIL.MIT.EDU"], "sections": [{"heading": null, "text": "Deciding how to act in partially observable environments remains an active area of research. Identifying good sequences of decisions is particularly challenging when good control performance requires planning multiple steps into the future in domains with many states. Towards addressing this challenge, we present an online, forward-search algorithm called the Posterior Belief Distribution (PBD). PBD leverages a novel method for calculating the posterior distribution over beliefs that result after a sequence of actions is taken, given the set of observation sequences that could be received during this process. This method allows us to efficiently evaluate the expected reward of a sequence of primitive actions, which we refer to as macro-actions. We present a formal analysis of our approach, and examine its performance on two very large simulation experiments: scientific exploration and a target monitoring domain. We also demonstrate our algorithm being used to control a real robotic helicopter in a target monitoring experiment, which suggests that our approach has practical potential for planning in real-world, large partially observable domains where a multi-step lookahead is required to achieve good performance."}, {"heading": "1. Introduction", "text": "Consider an autonomous helicopter tasked with protecting ships anchored in a busy harbor. At each time step, the helicopter must know if anything is moving too close to the ships it is guarding, but due to its sensor limits, the helicopter cannot observe the whole harbor at once. The only way to keep its ships safe is to keep moving continuously throughout the harbor, keeping track of all the other moving agents. The helicopter does well when it senses that another boat has moved too close to one of its charges, but false alarms are costly. The helicopter\u2019s controller must decide how to move around, what to report and when, in order to maximize its own performance.\nThis problem requires decision-making in an uncertain, partially observable domain, a common challenge for any agent operating in a real-world environment. The helicopter problem just described is an example of a general class of problems that are particularly difficult for two reasons. First, to make a decision, the agent must take into consideration its present estimate of the location and orientation of each of the targets. All of these quantities will typically be real-valued. In\nc\u00a92011 AI Access Foundation. All rights reserved.\nthe standard terminology of Markov decision processes (MDPs), the state space consists of a large number of continuous variables. Second, to make a decision now, the agent must reason about how its estimate of the state of the world may change many time steps into the future, under different possible helicopter and target actions. Any problem with many variables to consider and a long time horizon to plan over suffers from the curse of dimensionality and the curse of history (Pineau, Gordon, & Thrun, 2003a). We refer to such problems as large and long.\nIn this paper we present a new planning algorithm for large, long, partially observable MDPs (POMDPs), such as the target monitoring example. Beyond target monitoring, there are numerous other problems, such as scientific exploration of extreme environments and autonomous management of retirement portfolios, which may be posed as large, long POMDPs.\nThough there has been substantial progress in POMDP planning over the last decade, most approaches still struggle to scale to large domains described by many state variables, where each variable may take on a large or infinite number of potential values. Symbolic Perseus (Poupart, 2005) was used to find a good solution to a hand-washing domain with 11 state variables, but each variable took on a relatively small number of values (at most 10 values). Recently online forward search approaches have been used to achieve encouraging performance on some large1 POMDPs, such as the work by Ross, Chaib-draa and Pineau (2008b) and Paquet, Tobin and Chaibdraa (2005). However, the cost of performing a generic forward search scales exponentially with the search horizon. The target monitoring example described above not only is too large to be solved by offline approaches, but, as we will demonstrate later, also requires a long horizon search to achieve good performance, limiting the effectiveness of standard forward search for long problems.\nAs an effort towards scaling to large, long, partially observable decision making, we introduce the Posterior Belief Distribution (PBD) algorithm. PBD leverages the insight that for certain environments which have specific structure, the distribution of belief states (which in turn are distributions over states) that arise from a fixed sequence of actions can be computed efficiently and analytically. This distribution over beliefs, or posterior belief distribution, allows us to scale to large, long POMDP problems using efficient forward search with temporally-extended action sequences, which we refer to as macro-actions. PBD selects an action for the current belief by planning over a restricted policy space defined by the input macro-action set, and then re-plans after the selected action is taken and a new observation is received. Note that this implies that the policy executed does not necessarily equal the policy space used for planning, since only the first step of a macroaction is executed before re-planning is performed. This characteristic of PBD is very similar to receding horizon controllers (RHC) (such as Mayne, Rawlings, Rao, & Scokaert, 2000; Kuwata & How, 2004). RHCs consider a finite-horizon policy space when performing planning, but can execute over a much longer horizon by repeatedly re-planning.\nIn this paper we demonstrate that our PBD algorithm achieves good performance on large, long POMDP problems which are either outside the scope of prior approaches, or on which prior approaches fail to find good quality policies. Our experimental results demonstrate that PBD performs well with an attractive computational cost on several large, long simulation problems, including a variant of the ROCKSAMPLE POMDP benchmark problem (Smith & Simmons, 2005) and a simulated target monitoring example. We also demonstrate the PBD algorithm on a real-world version of the target monitoring problem, where we use a robotic helicopter platform to monitor multiple ground vehicles (Section 6.4). This demonstration suggests that PBD has practical potential for real\n1. Unless otherwise specified, when we describe a domain as \u201clarge\u201d we will be referring to a domain described by the\nvalues of a number of state variables, where each variable can take on many or an infinite number of values.\nrobotic domains. In this paper, the macro-actions are assumed to be provided by a domain expert2; however, to decouple the impact of our specific choice of macro-actions, we also provide experimental results where we modify alternate approaches (including a state-of-the-art planner) to use macro-actions, and still find performance advantages for our presented methods.\nThe rest of the paper is organized as follows. Section 2 first provides a brief background on planning under uncertainty using forward search. We then introduce our PBD algorithm in Section 3, and consider a slight variant of PBD that is applicable to a larger set of domains in Section 4. In Section 5 we provide a formal analysis of the PBD algorithm, and then in Section 6 we present experimental results. We present related work in Section 7 and finally conclude in Section 8."}, {"heading": "2. Background: Planning under Uncertainty using Forward Search", "text": "Formally, we assume that our decision-making under state-uncertainty problem consists of the following known components:\n\u2022 S is a set of states. Each state s \u2208 S consists of an assignment of values to each of L state variables, sl. The domain of each state variable may be either discrete or continuous.\n\u2022 A is a set of actions (controls) a \u2208 A, which can be either discrete or continuous.\n\u2022 Z is a set of observations z \u2208 Z , which can be either discrete or continuous.\n\u2022 p(s\u2032|s, a) is a transition function (also known as a dynamics model) which encodes the probability of transitioning to state s\u2032 after taking action a from state s. We assume the dynamics satisfy the Markov assumption that the new state is only a function of the immediately prior\nstate and action.\n\u2022 p(z|s) is an observation function (also known as a measurement or sensor model) that encodes the probability of receiving observation z in state s.3\n\u2022 b0 is a distribution over possible initial states, where b0(s) is the probability that the initial state is s. This distribution is known as the initial belief state, and is a well-formed distribution that sums to one across all states.\n\u2022 r(s, a) is a reward (or cost) function that describes the utility the agent receives for taking action a in state s. Slightly abusing notation, r(b, a) is the expected reward for taking action a given a distribution over current states (belief) b.\n\u2022 \u03b3 is a discount factor that determines the weights of immediate rewards relative to the rewards that will be received at a later time step.\nThe states S are not fully observable. Instead, at every time step, the agent receives an observation after taking an action. The agent must therefore make decisions based on the prior history of observations it has received, z1:t, and actions it has taken, a1:t, up to time t. As the world states are assumed to be Markov, instead of maintaining an ever-expanding list of past observations and\n2. In other work we have demonstrated that we can automatically construct good macro-actions for smaller\nPOMDPs (He, Brunskill, & Roy, 2010b). Integrating these two lines of work is an interesting area for future work but is outside the scope of this paper.\n3. It is easy to extend our framework to allow the observation to depend on the prior state, action, and posterior state.\nactions, a sufficient statistic, known as a belief bt(s), is used to summarize the probability of the world being in each state given its past history,\nbt(s) = Pr(st = s|a0, z1, . . . , zt\u22121, at\u22121, zt). (1)\nThe agent can therefore plan based only on the current belief state, rather than on all past actions and observations (Smallwood & Sondik, 1973). For example, in the target monitoring problem introduced in Section 1, the agent maintains a belief over the possible locations of each target. The agent updates its belief at each step, after taking an action a and receiving an observation z (such as a camera image of a far off target), using the Bayes filter:\nb\u2032(s\u2032) = \u03c4(b, a, z) = \u03b7 p(z|a, s\u2032) \u222b\ns\u2208S p(s\u2032|s, a)b(s)ds (2)\nwhere \u03c4(b, a, z) represents the belief update function and \u03b7 is a normalization constant. The planning problem is to compute a policy \u03c0 : b \u2192 a, which is a mapping from belief states to actions, that maximizes the expected sum of future4 discounted utilities:\n\u03c0 = argmax\n[\n\u221e \u2211\ni=1\n\u03b3iE[r(bi)]\n]\n, (3)\nwhere E[r(bi)] denotes the expected reward at time step i given the actions specified by \u03c0 and possible observations received.\nMany POMDP solvers, such as those by Smith and Simmons (2005), Porta, Vlassis, Spaan, and Poupart (2006) and Kurniawati, Hsu, and Lee (2008), perform POMDP planning offline by calculating a value function over the belief space V : b \u2192 R. V (b) is the expected total reward of starting from any belief state b and following an optimal policy5,\nV (b) = max a\u2208A\n[\nr(b, a) + \u03b3\n\u222b\nz\u2208Z p(z|b, a)V (\u03c4(b, a, z))\n]\n, (4)\nwhere p(z|b, a) = \u222b s p(z|s, a)b(s)ds. Given a value function over the belief space, a policy \u03c0 can be extracted by finding the action a which maximizes Equation 4.\nInstead of computing a value function over the entire belief space in advance of acting, we take an alternate approach of planning online, only explicitly computing a policy (that is, an action) for the current belief. In particular, an action is selected by performing a fixed-horizon forward search which is used to estimate the values of each of the possible action choices starting from the current belief. This action-selection approach is closely related to methods from the controls community, including Model Predictive/Receding Horizon Control, and forward search has also received recent attention in the AI POMDP community (see the recent survey in Ross, Pineau, Paquet, & Chaibdraa, 2008a).\nTo select an action for the current belief, generic forward search approaches compute a lookahead AND-OR tree (Figure 1). The goal of the tree is to estimate the value of taking each of the\n4. We will assume in this paper that we are interested in problems with an infinite horizon. If the problem has a finite\nhorizon, the discount factor \u03b3 can be set to 1, and our forward search process (which we will shortly describe) will search out to a depth of at most the problem\u2019s finite horizon.\n5. This is often intractable to compute, so in practice the value function is often approximate.\npossible actions from the current belief b, in order to take the action with the greatest value. Given the root belief b, the tree is constructed by first branching on all possible actions from the root. After each action, the tree then branches on possible observations. For each distinct action-observation combination, we can compute the resulting internal belief that would occur if that action-observation trajectory were followed using Equation 2. This process of alternately branching on actions and observations is repeated out to a finite depth. This depth, known as the search horizon, determines how far into the future the effects of actions are considered when selecting a possible action for the root (current) belief state.\nOnce the tree has been constructed, the value of the actions at the root are computed by propagating the rewards from the beliefs at the leaf nodes back to the root. Starting at the leaf node rewards, we take an expectation over observations. We then add in the expected immediate reward from taking the parent action, and next take the maximum reward across all sibling action nodes. This process is repeated all the way up to the root node. The expected rewards are maximized across actions but summed across observations because the agent can choose which action to take, but must optimize over the expected distribution of observations.\nAfter the planning phase, the forward search procedure executes the action at the root with the largest value, and then receives an observation. Given the previous belief, action taken, and observation received, a new belief is computed using Equation 2. The forward search planning process then repeats, with the new belief as the root node. Re-planning after every time step enables the agent to condition on the action selected and the actual observation received.\nThere are a number of attractive characteristics of an online, forward-search framework. First, computational effort is directed only towards belief states that are reachable from the current belief under different actions. This property enables a forward search planner to compute a meaningful policy in an arbitrarily large environment, since only a subset of the environment is relevant at any point. Second, online, forward-search fits well into systems that need good, time constrained solutions where a large amount of advance computation is not possible. Lastly, forward search does\nnot have to compute an explicit representation of the value function, which can be an advantage in factored domains where belief updating and immediate expected reward calculations are relatively simple, but the value function itself is complex to represent.6\nHowever, the computational cost of generic forward search will still scale with the cost of the belief updating and immediate expected reward calculations, multiplied by the number of tree nodes which grows exponentially with the search horizon. The costs of belief updating and calculating the immediate expected reward typically scale either linearly or exponentially with the number of state variables and the size of their respective domains, depending on the independence relations among the state variables. When the state variables are continuously-valued, and therefore take on an infinite number of values, we will typically need to employ some parametric or compressed representation in order to make these calculations tractable. The number of tree nodes scales exponentially with the horizon according toO((|A||Z|)H), where |A| and |Z| are the number of actions and observations respectively and H is the search horizon. Therefore, standard forward search approaches will typically struggle when there are many state variables and/or state variables with large domains and when a large H-step lookahead is necessary to achieve good performance.\nOne approach to accelerating planning over large, long horizon problems is to use temporally extended macro-actions, a technique that has been used successfully in fully observable settings for some years (Sutton, Precup, & Singh, 1999). There has been limited exploration of these ideas for partially observable settings (exceptions include those by Theocharous & Kaelbling, 2003; Hsiao, Lozano-Pe\u0301rez, & Kaelbling, 2008; Kurniawati, Du, Hsu, & Lee, 2009). In our work we define a macro-action as a finite open-loop sequence of primitive actions that is executed without regard to the observations received during the execution of this action sequence. For example, in our target monitoring problem, one macro-action could be for the helicopter to travel to a key region, which might involve a sequence of individual turns and straight line moves. By restricting the action space to a set of length Lmacro-actions, the number of expanded nodes due to the action branching factor can be reduced from|A|H to |A\u0303|H\u0303 where A\u0303 is the set of length L (or longer) macro-actions, and H\u0303 = HL is the macro-action horizon or depth 7."}, {"heading": "2.1 Macro-action Construction", "text": "If only a small set of macro-actions are evaluated during the search, the restricted action space will result in significant computational savings due to the smaller exponent H\u0303 (vs. H) in the computational complexity expression. However, this restriction can also result in poor algorithmic performance if all the macro-actions being evaluated are unsuitable. In this paper, we assume that macro-actions are provided by a domain expert as part of a comprehensive strategy to scaling up to large problems with a multi-step lookahead. The macro-actions we use in our experimental results consist of open-loop policies which are a function of properties of the belief state at which the macro-action is originated, and can be either computed and stored offline or computed online at every timestep. Further details are provided in the experimental section.\nOur reliance on domain knowledge in this paper is similar to prior work in the fully observable community that separately investigated the potential advantage of macro-actions before turning to\n6. An example of such a domain is one in which the state space is a set of independent variables, but the reward is an\naggregate function of these variables.\n7. The macro-action depth refers to the number of macro-actions that are executed in sequence from the root belief node\nto the leaves.\nthe challenge of learning these macro-actions (see the work by Sutton et al., 1999 for an overview of one particular formalism). Although constructing macro-actions automatically is beyond the scope of this paper, we have presented in related work a domain-independent algorithm (PUMA) that automatically generates macro-actions for planning in partially observable domains (He et al., 2010b). Borrowing the notion of sub-goal states from the fully-observable planning literature (McGovern, 1998; Stolle & Precup, 2002), PUMA uses a heuristic that macro-actions can be designed to take the agent, under the fully-observable model, from a possible start state under the current belief to a sub-goal state. The PUMA algorithm was tested on variations of the experimental domains that are used in this paper, and we encourage the reader to refer to the above-mentioned paper for more details.\nRegardless of how the set of macro-actions are generated, several key computational challenges remain to scale macro-action forward-search to large, long environments. First, recall the number of nodes in generic forward search scales as O(|A|H |Z|H). Using macro-actions reduces the first term in the product, but does not directly change the second term, so the number of tree nodes still is an exponential function of the search horizon H . Second, using macro-actions does not directly alleviate the cost of performing belief updates and expected reward computations at each tree node, and these computational costs can be substantial in large domains. The central contribution of our paper is a method for efficiently and analytically computing the result of a macro-action given any possible observation sequence received during its execution. This will allow us to use temporallyextended actions to scale to certain types of large, long POMDPs."}, {"heading": "3. The Posterior Belief Distribution Algorithm", "text": "To plan with macro-actions in a forward search manner, we must compute the expected reward received during a macro-action, as well as the expected future value after taking that macro-action. The reward the planner can expect to receive from a macro-action is the expected sum of the rewards under each of the posterior beliefs the agent will reach after each action in the macro-action. However, the process is complicated by the fact that posterior the belief is also a result of receiving an observation. As the agent does not know which observations will be received during the macroaction, it cannot compute a single posterior belief reached during the macro-action, and therefore cannot compute the expected reward.\nOf course, an easy solution is to consider all possible observations, and compute the expected reward of all possible beliefs that can result from all possible observations that could be received during a macro-action. By computing the expected reward at each observation node, the AND-OR tree constructed during forward search implicitly computes this expectation over all possible observation sequences. But, if computing the expected reward of a macro-action requires enumerating all possible observation sequences that could be experienced during execution, the evaluation of a macro-action will grow intractable quickly (see Figure 2(a)). The number of observation sequences to be considered will grow exponentially with the length of the macro-action, and enumerating all possible observations may not even be feasible in domains with continuous observations. One alternative may be to sample observation sequences for a given macro-action (Figure 2(b)), but sampling is likely to still be computationally intensive due to the per-sample cost of performing a belief update and expected reward calculation at each step of each sampled observation sequence.\nWe can avoid this computational burden by realizing that it is sometimes possible to analytically represent the distribution over posterior beliefs. For a given sequence of actions, what we need is the\nAll possible observations are expanded. (b) A subset of possible observation trajectories are sampled. (c) Compute an analytic distribution over the posterior beliefs, which could have been generated via an exhaustive enumeration of all possible observation sequences. b0 is the initial belief, while bi,j refers to the j th belief leaf node at depth i.\nexpected reward for those actions; if we cannot compute the distribution over states ahead of time, but can compute a distribution over state distributions, we can still compute the expected reward. A graphical depiction of this process is shown in Figure 2(c). By analytically computing a distribution over beliefs, we avoid not only the exponential explosion of potential observation sequences (as a function of the macro-action length), but also the costly step of performing many individual belief updates along the possible observation sequences.\nWe define bdist as the posterior distribution over beliefs after a macro-action. We will show in the next subsection (3.1) that when the parametric form of the model is such that the belief is always Gaussian, then the distribution over posterior beliefs is itself a Gaussian over Gaussian beliefs, as illustrated in Figure 3. This property follows from the fact that all future beliefs are Gaussian. The random variables described by the distribution over posterior beliefs are therefore the means and covariances of the posterior beliefs. In this case, bdist consists of an expression for the distribution over belief means and an expression for the distribution over the covariances after a macro-action. We will show that the means are distributed according to a Gaussian and the covariances are a delta function over a single covariance, allowing us to represent the entire distribution over beliefs as a Gaussian distribution over beliefs means and a single belief covariance. In Section 3.2 we will further show that we can analytically compute the expected reward of the distribution over beliefs resulting from a macro-action for certain classes of reward functions. Given the ability to analytically compute a distribution over posterior beliefs, we will show in Section 5 the computational complexity of forward search is reduced to a function of the macro-action horizon H\u0303: for macro-actions of length 2 or more (L \u2265 2) we will see that it is significantly faster to search to long horizons."}, {"heading": "3.1 Exact Computation of Posterior Belief Distribution", "text": "Let us assume for the moment that the agent\u2019s belief can be exactly represented as a Gaussian distribution over a continuous state space, and that the observation and transition models are both linear-Gaussian. Formally, the state transition and observation models can be represented as follows:\nst = Ast\u22121 +Bat + \u03b5t, \u03b5t \u223c N (0, P ) (5) zt = Cst + \u03b4, \u03b4 \u223c N (0, Q) (6)\nwhere A and B are dynamics matrices, C is the observation matrix, P is the covariance of the Gaussian dynamics process and Q is the covariance of the measurement noise.\nWhen the state-transition and observation models are normally distributed and linear functions of the state, the Kalman filter (1960) provides a closed-form solution for the posterior belief over states, N (\u00b5t,\u03a3t) given a prior belief over states, N (\u00b5t\u22121,\u03a3t\u22121),\n\u00b5t = A\u00b5t\u22121 +Bat \u00b5t = \u00b5t +Kt(zt \u2212 C\u00b5t) (7) \u03a3t = A\u03a3t\u22121A T + P \u03a3t = (C TQ\u22121C +\u03a3 \u22121 t ) \u22121, (8)\nwhere N (f, F ) is a D-dimensional Gaussian with mean f and covariance matrix F , Kt = \u03a3tC T (C\u03a3tC T +Q)\u22121 is the Kalman gain and \u00b5t and \u03a3t are the mean and covariance after an action is taken but before incorporating the measurement.\nOur key interest is to represent the distribution over possible beliefs that could result after taking a particular action, but receiving any of the possible observations. Note that in the current setup, all posterior beliefs are Gaussians, and can therefore be completely characterized by their mean and covariance. We now derive an expression for the distribution over the posterior belief means, under any possible observation, when the prior distribution over beliefs is simply a delta function over a single belief. We first re-express the observation model as\nzt \u223c N (Cst, Q) (9)\nwhich we can use to compute an expression for the probability of an observation given the belief mean, p(zt|\u00b5t), by marginalizing over st \u223c N (\u00b5t,\u03a3t), as\np(zt|\u00b5t) = \u222b p(zt|st)p(st|\u00b5t)dst (10) = N (C\u00b5t, C\u03a3tCT +Q). (11)\nWe can perform further linear transformations to obtain an expression for the distribution of posterior means, under any potential observation:\nzt \u223c N (C\u00b5t, C\u03a3tCT +Q) (12) zt \u2212 C\u00b5t \u223c N (0, C\u03a3tCT +Q) (13)\nKt(zt \u2212 C\u00b5t) \u223c N (0,Kt(C\u03a3tCT +Q)KTt ) (14) \u00b5t +Kt(zt \u2212 C\u00b5t) \u223c N (\u00b5t,Kt(C\u03a3tCT +Q)KTt ) (15)\n\u00b5t \u223c N (\u00b5t,Kt(C\u03a3tCT +Q)KTt ) (16) \u00b5t \u223c N (\u00b5t,\u03a3tCTKTt ) (17)\nwhere Equation 17 is computed by substituting the definition of the Kalman gain.\nAt this point, a somewhat unusual change has occurred, in that \u00b5t, the mean of the distribution itself, is now a random variable. Without knowing the value of the particular observation that occurs after a primitive action, we cannot deterministically predict the posterior mean of the belief.8 However, we can model the probability of any specific belief state, which effectively means that we will compute a distribution over the belief means \u00b5 and covariances \u03a3. Equation 17 shows that the distribution over the belief means is normally distributed about \u00b5t, with a covariance that depends on the prior covariance \u03a3t and the observation model parameters. Sampling a mean from this distribution is equivalent to selecting a particular observation.\nWe have just presented a formula for calculating the posterior distribution over belief means after one action, and any possible observation. We now wish to show that the posterior distribution over beliefs means after a sequence of actions remains a Gaussian distribution. This will allow us to compute an analytic expression for the posterior distribution over beliefs that could result from a macro-action. We therefore require a method to iteratively use Equation 17 in order to compute the posterior distribution over beliefs for a complete macro-action and any possible observation sequence.\nWe first combine the process and measurement updates for a single primitive action belief update in order to get an expression for the posterior belief means in terms of the prior belief mean. We marginalize over \u00b5t, the posterior belief after the transition update but before the observation update, using p(\u00b5t|\u00b5t\u22121) = \u222b\np(\u00b5t|\u00b5t)p(\u00b5t|\u00b5t\u22121)d\u00b5t. As \u00b5t is a deterministic function of \u00b5t\u22121 (see Equation 7a), then p(\u00b5t|\u00b5t\u22121) is simply a delta function, which means that p(\u00b5t|\u00b5t\u22121) is identical to Equation 17 after substituting \u00b5t using Equation 7a:\np(\u00b5t|\u00b5t\u22121) = N (A\u00b5t\u22121 +Bat,\u03a3tCTKTt ). (18)\nIn a one-step belief update, the belief mean at the prior time step, \u00b5t\u22121, is assumed to be a known value. However, for a macro-action, once the first primitive action has been taken, the posterior be-\n8. Note that we will show later in this section that we can deterministically predict the posterior belief covariance. Its\ndistribution is a Dirac delta that is independent of the specific observation received.\nlief mean will depend on the received observation. In absence of the knowledge of that received observation, we will instead have a distribution over the belief means. Therefore, for the second primitive action in the macro-action, the prior belief is now given as a Gaussian \u00b5t\u22121 \u223c N (mt\u22121,\u03a3\u00b5t\u22121) where mt\u22121 and \u03a3 \u00b5 t\u22121 are random variables. In order to compute the probability distribution over \u00b5t, we must integrate over this distribution of prior belief means \u00b5t\u22121:\np(\u00b5t|mt\u22121,\u03a3\u00b5t\u22121) = \u222b\n\u00b5t\u22121\np(\u00b5t|\u00b5t\u22121)p(\u00b5t\u22121|mt\u22121,\u03a3\u00b5t\u22121)d\u00b5t\u22121. (19)\nSince both terms inside the integral are Gaussian distributions, we can analytically combine these two Gaussians, one of which is independent of \u00b5t\u22121 and one of which is dependent on \u00b5t\u22121. Integrating over \u00b5t\u22121, as we had done in Equations 9-11, we find that the mean of the posterior belief means is conveniently still a Gaussian distribution over a function of the prior mean of the belief means and covariance:\n\u00b5t \u223c N (Amt\u22121 +Bat, A\u03a3\u00b5t\u22121AT +\u03a3tCTKTt ) (20)\nor\n\u00b5t \u223c N (mt,\u03a3\u00b5t ) (21)\nwhere mt = Amt\u22121 + Bat and \u03a3 \u00b5 t = A\u03a3 \u00b5 t\u22121A T + \u03a3tC TKTt . Equation 20 can now be used to predict the posterior mean distribution after a multi-step action sequence. Assuming that the agent is currently at time t and has a particular prior mean \u00b5t (which we can also express as a Gaussian with zero covariance, N (\u00b5t, 0)), the posterior mean after an action sequence of D time steps is distributed as follows:\n\u00b5t+D \u223c N (mt+D,\u03a3\u00b5t:t+D) (22)\nwhere\nmt+D = f(\u00b5t\u22121, A,B, at+1:t+D) (23)\n= A mt+D\u22121 +B at+D (24) = ADmt + D \u2211\ni=1\nAD\u2212iBat+i, (25)\nand\n\u03a3\u00b5t:t+D = t+D \u2211\ni=t\nAt+D\u2212i\u03a3iC T i D T i (A t+D\u2212i)T . (26)\nNote thatmt+D does not depend on observations; it gives the mean of the distribution of beliefs that might result from the received observations. mt+D is dependent only on the state-transition model parameters and can be calculated via a recursive update along the action sequence.\nWe now consider the covariance of the posterior beliefs that may result after taking a macroaction. Recall that for a single belief, the posterior covariance after taking a primitive action and receiving a particular observation can be calculated using Equation 8. Note that this formula is independent of the actual received observation zt, and the prior \u00b5t\u22121 or posterior mean \u00b5t. Formally, this\nproperty exists because the Fisher information associated with the observation model is independent of the specific observations. Therefore, the posterior covariance after any observation sequence of known length can be calculated in closed form given the prior covariance, without needing to know the observations received along the way.\nWe can now specify the form of bdist, the posterior distribution over beliefs after a macro-action:\nbdist(\u00b5t+T ,\u03a3) = N (f(\u00b5t\u22121, A,B, at:t+T ),\u03a3\u00b5t:T ) \u00b7 \u03b4(\u03a3,\u03a3\u2032) (27) where bdist(\u00b5t+T ,\u03a3) is the probability of arriving in posterior belief b = N (\u00b5t+T ,\u03a3) after taking a particular macro-action, Equation 22 defines the distribution over belief means, and \u03a3\u2032 is computed by iteratively applying Equation 8. This expression shows that for problems with linear-Gaussian state-transition and observation models, we can exactly calculate the distribution of posterior beliefs associated with a macro-action."}, {"heading": "3.2 Calculating the Expected Reward", "text": "The prior section outlined a procedure for calculating the posterior set of beliefs after a macroaction. The reason to compute this distribution is in turn to be able to calculate the expected reward of each macro-action, which will be used to compute the best action for the current belief.\nTo calculate the expected reward of a macro-action, we start by considering the expected reward of starting in a particular belief state b0 and executing a L-length macro-action a\u0303 consisting of actions a1, a2, . . . , aL. This may be expressed as\nr(b0, a\u03031:L) = r(b0, a1) + \u03b3\n\u222b\nz1\np(z1|b0, a)Q(ba1,z1 , a\u03032:L) (28)\nwhere we have used ba1,z1 to represent the updated belief after taking action a1 and receiving observation z1 from b0, a\u03032:L to represent the macro-action consisting of the second through L-th primitive actions of the macro-action a\u0303, and Q(ba1,z1 , a\u03032:L) to represent the future expected reward of taking the remaining actions from belief ba1,z1 . Recursively expanding the second term in Equation 28 we obtain the following expression\nr(b0, a\u03031:L) = r(b0, a1) + \u03b3\n\u222b\nz1\np(z1|b0, a1)r(ba1,z1 , a2) +\n\u03b32 \u222b\nz1,z2\np(z1|b0, a1)p(z2|ba1,z1 , a2)r(ba1,z1,a2,z2 , a3) + \u00b7 \u00b7 \u00b7 (29)\n\u03b3L\u22121 \u222b\nz1,...,zL\n[\nL\u22121 \u220f\ni=1\np(zi|ba1,z1,...,ai\u22121,zi\u22121 , ai) ] r(ba1,...aL\u22121,zL\u22121 , aL). (30)\nThe first term in Equation 29 represents the expected reward from taking the first primitive action in the macro-action from the initial belief state. The remaining terms each represent the expected reward at the i-th primitive action of the macro-action, where the expectation is taken over all possible i \u2212 1 length sequences of observations that could have been received up to that point (as well as the standard integration over the state space). From Equation 27 we have a closed form expression for the distribution over belief states possible after a sequence of primitive actions. We can use this to re-express Equation 29 as a function of the distributions over beliefs:\nr(b0, a\u03031:L) = r(b0, a1) + L \u2211\ni=2\n\u03b3i\u22121r(bi\u22121dist, ai) (31)\nwhere bi\u22121dist is used to represent the posterior distribution over beliefs that results after taking the first i \u2212 1 primitive actions in macro action a\u0303. Slightly abusing notation, r(bdist, ai) represents the expected reward for taking action ai given the posterior distribution over beliefs bdist, and is expressed as\nr(bdist, ai) =\n\u222b\nb\n\u222b\ns b(s)bdist(b)r(s, ai)dsdb. (32)\nCombining Equations 31 and 32, we can see that the expected reward of a macro-action can be calculated from the sum of the expected reward of taking a primitive action from the posterior distribution of beliefs at each step along the macro-action.\nRecall from the prior section that the posterior distribution over beliefs can be factored into a Gaussian distribution over the belief means \u00b5 (Equation 22), and a Dirac delta distribution over the belief covariances \u03a3 (since all beliefs will have identical covariances):\nbdist(\u00b5,\u03a3) = N (\u00b5|ma,\u03a3\u00b5a)\u03b4(\u03a3,\u03a3a) (33)\nwherema is the mean of the belief means after primitive action a, \u03a3 \u00b5 a is the covariance of the belief means after primitive action a, and \u03a3a is the covariance of a belief state after primitive action a. As the belief state itself is a Gaussian,\nb(s) = N (s|\u00b5,\u03a3), (34)\nwe can re-express the reward as\nr(bdist, a) =\n\u222b\ns\n\u222b\n\u00b5,\u03a3 r(s, a)N (s|\u00b5,\u03a3)N (\u00b5|ma,\u03a3\u00b5a)\u03b4(\u03a3,\u03a3a)dsd\u00b5d\u03a3 (35)\n=\n\u222b\ns\n\u222b\n\u00b5 r(s, a)N (s|\u00b5,\u03a3a)N (\u00b5|ma,\u03a3\u00b5a)d\u00b5ds, (36)\nwhere the second line follows due to the Dirac delta distribution on the belief covariances. Expanding out the formula for N (s|\u00b5,\u03a3) we see it is identical to the formula for N (\u00b5|s,\u03a3):\nN (s|\u00b5,\u03a3) = 1\u221a 2\u03c0|\u03a3|Nd/2 exp(\u22121 2 (s\u2212 \u00b5)\u03a3\u22121(s\u2212 \u00b5)T ) (37)\n= 1\u221a 2\u03c0|\u03a3|Nd/2 exp(\u22121 2 (\u00b5\u2212 s)\u03a3\u22121(\u00b5\u2212 s)T ) (38) = N (\u00b5|s,\u03a3). (39)\nTherefore, we can substitute the equivalent expression to yield\nr(bdist, a) =\n\u222b\ns\n\u222b\n\u00b5 r(s, a)N (\u00b5|s,\u03a3a)N (\u00b5|ma,\u03a3\u00b5a)d\u00b5ds. (40)\nCompleting the square in the exponent, we re-express the product of the above two Gaussians as\nr(bdist, a) =\n\u222b\ns\n\u222b\n\u00b5 r(s, a)N (s|ma,\u03a3a +\u03a3\u00b5a)N (\u00b5|c\u0302, C\u0302)d\u00b5ds, (41)\nwhere C\u0302 = (\u03a3\u22121a + (\u03a3 \u00b5 a)\u22121)\u22121 and c\u0302 = C\u0302(ma(\u03a3 \u00b5 a)\u22121 + \u00b5\u03a3\u22121a ). We then integrate over \u00b5 to get\nr(bdist, a) =\n\u222b\ns r(s, a)N (s|ma,\u03a3a +\u03a3\u00b5a)ds. (42)\nIf the reward model itself is a weighted sum of Nr Gaussians,\nr(s, a) =\nNr \u2211\nj=1\nwjN (s|\u03b6j ,\u03a5j), (43)\nthen the integral in Equation 42 can be evaluated in closed form as\nr(bdist, a) =\n\u222b\ns\nNr \u2211\nj=1\nwjN (s|\u03b6j ,\u03a5j)N (s|ma,\u03a3a +\u03a3\u00b5a)ds (44)\n=\nNr \u2211\nj=1\nwjN (\u03b6j |ma,\u03a5j +\u03a3a +\u03a3\u00b5a) \u222b\ns N (s|c1, C1), (45)\nwhere we have again completed the square in the exponent, and defined new constantsC1 = (\u03a5 \u22121 j + (\u03a3a + \u03a3 \u00b5 a)\u22121)\u22121 and c1 = C1(\u03b6j\u03a5 \u22121 j + ma(\u03a3a + \u03a3 \u00b5 a)\u22121). Integrating we obtain an analytic expression for the expected reward of a primitive action under a distribution of beliefs:\nr(bdist, a) =\nNr \u2211\nj=1\nwjN (\u03b6j |ma,\u03a5j +\u03a3a +\u03a3\u00b5a). (46)\nA similar closed-form expression is available if the reward model is a polynomial function of\nthe state,\nr(s, a) =\nNr \u2211\nj=1\nwjs j , (47)\ninstead of a weighted sum of Gaussians. Substituting Equation 47 into Equation 42 yields\nr(bdist, a) =\n\u222b\ns\nNr \u2211\nj=1\nwjs jN (s|ma,\u03a3a +\u03a3\u00b5a)ds\n=\nNr \u2211\nj=1\nwj\n\u222b\ns sjN (s|ma,\u03a3a +\u03a3\u00b5a)ds. (48)\nTherefore, evaluating the expected reward involves calculating the first Nr moments of a Gaussian distribution. Each of these moments is an analytic expression of the Gaussian mean and covariance.9 So, for reward models that are either a weighted sum of Gaussians, or which are polynomial functions of the state space, the expected reward of a macro-action (Equation 28) can be computed analytically.\nFor other arbitrary reward models it may not be possible to analytically compute the expected reward of taking a primitive action in a particular distribution over beliefs. In such cases, we can approximate the expectation in Equation 42 by sampling.\n9. The Gaussian distribution is completely described by its first two moments; all higher order moments are simply\nfunctions of the first two moments."}, {"heading": "3.3 Branching on Posterior Beliefs", "text": "So far we have discussed how to compute the posterior distribution over beliefs that can arise after executing a single macro-action, and how to compute the expected reward associated with that distribution. But during planning we wish to compute the value of not taking just a single macroaction, but sequences of macro-actions. This allows us to consider scenarios much further in the future, which can be useful in selecting the best action to take for the current belief. For example, consider a large office space domain where a robot is trying to navigate to a goal location, and macro-actions are to go to the end of a hallway and turn left or right. Assuming the robot starts far from the goal location, a series of macro-actions will most likely be needed in order to reach the goal, and therefore it will be important during forward search to consider a search horizon of multiple macro-actions.\nHowever, when constructing the forward search tree, it is not immediately clear how to evaluate each branch in the three at the end of each macro-action. We have a closed form expression for the posterior distribution over beliefs at the end of the macro-action. This posterior set represents the distribution of beliefs possible given all possible observation sequences that could be received during the macro-action\u2019s execution. However, different individual posterior beliefs, or different subsets of the posterior belief distribution, may be associated with different best subsequent macroactions in the tree, because different individual posterior beliefs are implicitly the result of receiving a different set of observations during the macro-action execution and may reveal important information about the environment that result in different best subsequent macro-actions. Though the motivation behind macro-actions is that it is reasonable to act in an open-loop fashion for a limited\nAlgorithm 1 Forward Search with Macro-Actions\nRequire: Initial belief b0, Discount factor \u03b3, Macro-action search depth H\u0303 , Sampling number Ns 1: t \u2190 0 2: loop\n3: Compute set of macro-actions A\u0303 4: for each macro-action a\u0303i \u2208 A\u0303 do 5: Q(bt, a\u0303i) = EXPAND(a\u0303i, bt, \u03b3, H\u0303,Ns) {See Algorithm 2} 6: end for\n7: Execute first action a1 of a\u0303 = argmaxa\u0303Q(bt, a\u0303) 8: Obtain new observation zt and reward rt 9: bt+1 = \u03c4(bt, at, zt) 10: t \u2190 t+ 1 11: end loop\ntime period, the received observation sequence does provide information about the underlying belief that is likely to be useful for selecting future macro-actions.\nSince we do not know in advance which subsets of posterior beliefs are associated with the same best subsequent macro-action, we instead sample from the posterior belief distribution, and then evaluate future macro-actions for each of these samples (see Figure 4 for an illustration). Sampling a posterior belief is equivalent to implicitly sampling an observation sequence for the planned macroaction, without having to actually perform belief updates along the action-observation trajectory. Note that the potential space of observation sequences grows exponentially with the macro-action length. As the posterior distribution over beliefs is a Gaussian, its properties can be completely described by its mean and covariance, which means that the posterior distribution over beliefs will typically be of much lower dimension than the observation sequence space. Experimentally we will see much better performance sampling from the posterior belief distribution than from sampling from the space of observation sequences. The sampled beliefs essentially form a non-parametric, particle estimate of the posterior distribution of beliefs that is present after taking the macro-action. As the number of samples Ns goes to infinity, the sampled distribution will become an arbitrarily good approximation of the full posterior distribution of beliefs. As the covariance is a Dirac delta distribution, sampling is needed only for the posterior mean distribution, generating posterior belief samples by associating each posterior mean sample with the posterior covariance \u03a3t+T ."}, {"heading": "3.4 The PBD Algorithm Summary", "text": "We are now ready to present our PBD forward search algorithm (Algorithm 1). Given the current belief, we select an action by constructing a macro-action forward search tree. Placing the current belief at the root, we expand each possible macro-action (Algorithm 2), computing the expected reward and the resulting posterior set of beliefs. We then sample a fixed number of posterior beliefs. Forward search then proceeds from each of these sampled beliefs. We repeat this process out to a fixed horizon depth and then select an action for the current belief by estimating its value, starting from the search leaf nodes. After executing this action, an observation is received, and the new belief state is computed. The whole process then repeats for this new belief state. Note that PBD will only ever select actions that are the first action of a macro-action. If all primitive actions are to\nAlgorithm 2 EXPAND \u2013 Expand Macro-actions via PBD\n1: Input: Macro-action a\u0303, Belief state bt, Discount factor \u03b3, Macro-action search depth H\u0303 , No. posterior belief samples per macro-action Ns 2: if H\u0303 = 0 then 3: return 0\n4: else {Expand Macro-action a\u0303={a1, . . . , aL}} 5: Ra\u0303 = 0 6: bdist = bt 7: for j = 1 to L do 8: Ra\u0303 = Ra\u0303 + \u03b3 \u2217 r(bdist, aj) 9: Update the posterior distribution of beliefs bdist 10: end for 11: for i = 1 to Ns do 12: Sample posterior mean ni according to N (mt+T ,\u03a3\u00b5t+T ) 13: bi \u2190 N (ni,\u03a3t+T ) 14: Generate next set of macro-actions A\u0303next 15: for a\u0303nexti \u2208 A\u0303next do 16: Q(bi, a\u0303 next i ) = EXPAND(a\u0303 next i ,bi,\u03b3,H\u0303 \u2212 1,Ns) 17: end for 18: V = Ra\u0303 + 1 Ns \u03b3Lmaxa\u0303nexti Q(bi, a\u0303 next i )) 19: end for 20: return V 21: end if\nbe considered, the number of macro-actions that are evaluated for the root belief at every timestep must be at least the same as the size of the primitive action space, and each primitive action must be the first action of at least one macro-action."}, {"heading": "4. Approximate Computation of Posterior Belief Distributions", "text": "The PBD algorithm described so far assumes that the transition and observation functions are linear functions of the state with Gaussian noise. When these functions are non-linear, the traditional Kalman filter model no longer provides an exact belief update, and for the PBD algorithm, the distribution of posterior beliefs cannot be calculated exactly. In this section we briefly describe an extension to the PBD algorithm to handle a wider class of observation models, namely parametric models that are members of the exponential family of distributions (Barndorff-Nielsen, 1979). For non-linear transition models, there exist techniques such as the extended Kalman filter to approximate the posterior with a Gaussian; however, we do not formally consider incorporating such techniques into our PBD algorithm here.\nWe choose to consider exponential family observation models since this family includes a wide array of distributions, such as Gaussian, Bernoulli, and Poisson distributions, and has certain appealing mathematical properties. In particular, we leverage work by West, Harrison and Migon (1985) who constructed linear-Gaussian models that approximate the non-Gaussian exponential family observation model in the neighborhood of the conditional mode, st|zt. They then used the approximate\nlinear-Gaussian observation mode in a traditional Kalman filter, to maintain a closed-form Gaussian representation of the posterior belief, creating an exponential family Kalman Filter (efKF). For completeness we include West et al.\u2019s derivation of the filter in Appendix A, and we present the main equations here.\nConstructing the approximate linear-Gaussian observation model requires computation of the first two moments of the distribution and the linearization around the mean estimate at every time step. An exponential family observation model can be represented as follows,\np(zt|\u03b8t) = exp(zTt \u03b8t \u2212 \u03b2t(\u03b8t) + \u03bat(zt)), \u03b8t = W (st) (49)\nwhere st is the hidden state of the system, \u03b8t and \u03b2t(\u03b8t) are the canonical parameter and normalization factor of the distribution, and W (.) maps the states to canonical parameter values. W (.) is also known as the canonical link function, and depends on the particular member of the exponential family.\nThe first two moments of the distribution (West et al., 1985) are\nE(zt|\u03b8t) = \u03b2\u0307t = \u2202\u03b2t(\u03b8t)\n\u2202\u03b8t\n\u2223 \u2223 \u2223\n\u03b8t=W (\u00b5t) V ar(zt|\u03b8t) = \u03b2\u0308t =\n\u22022\u03b2t(\u03b8t)\n\u2202\u03b8t\u2202\u03b8Tt\n\u2223 \u2223 \u2223\n\u03b8t=W (\u00b5t) (50)\nwhere \u03b2\u0307t and \u03b2\u0308t are the derivatives of the exponential family distribution\u2019s normalization factor, both linearized about \u03b8t = W (\u00b5t).\nGiven an action-observation sequence, the posterior mean of the agent\u2019s belief in the efKF can\nthen be updated according to\n\u00b5t = A\u00b5t\u22121 +Bat \u00b5t = \u00b5t + K\u0303t(z\u0303t \u2212W (\u00b5t)), (51) \u03a3t = A\u03a3t\u22121A T + P \u03a3t = (\u03a3 \u22121 t + Y T t \u03b2\u0308tYt) \u22121, (52)\nwhere K\u0303t = \u03a3tYt(Yt\u03a3tY T t + \u03b2\u0308 \u22121 t ) \u22121 is the efKF Kalman gain, and z\u0303t = \u03b8t \u2212 \u03b2\u0308\u22121t \u00b7 (\u03b2\u0307t \u2212 zt) is the projection of the observation onto the parameter space of the exponential family observation model. Yt = \u2202\u03b8t \u2202st \u2223 \u2223 st=\u00b5t is the gradient of the exponential family distribution\u2019s canonical parameter, linearized about \u00b5t. We can now incorporate these results to compute a modified form for the posterior belief mean and covariance distributions, which were represented by Equations 8 and 22 when the observation model was linear Gaussian. Now, for exponential family observation models, the posterior belief covariance comes from Equation 52. The expression for the distribution of the posterior means can be modified based on the efKF equations:\n\u00b5t+T \u223c N (f(\u00b5t\u22121, At:t+T , Bt:t+T , at:t+T ), t+T \u2211\ni=t\n\u03a3iY T i K\u0303 T i ). (53)\nIt is worth noting that in contrast to our prior expressions for the posterior belief distribution (Equations 8 and 22), which are exact and completely independent of the received observations, Equations 52 and 53 are no longer independent of the observations obtained because the observation model parameters are linearized about the prior mean \u00b5t. Hence while the parameters are independent of the observation that will be obtained for a macro-action sequence of length 1, for a\nlonger macro-action, the observation model parameters depend on the prior observations obtained. We approximate this update by linearizing about the mean of the prior mean distributionmt at each step along the action sequence, rather than the true prior belief mean \u00b5t. We will shortly see that we still obtain good experimental results using this approximation.\nAn alternate popular approach for non-Gaussian systems is to use a particle filter to represent the system state. However, in high dimensional, continuous environments similar to the ones considered in this paper, particle filters often suffer from particle depletion, or require a very large number of particles to accurately capture the posterior. The costs of belief updating and expected reward calculations scale with the number of particles. In contrast, our approximate PBD computation has the same computational complexity as our exact PBD computation, which we will demonstrate in later sections to scale polynomially with the number of state dimensions.\nThis approximate method for computing the posterior distribution over beliefs can be used as a\nsubstitute for exactly calculating the posterior distribution over beliefs in the PBD algorithm."}, {"heading": "5. Analysis", "text": "Here we provide a formal analysis of the accuracy and computational complexity of our PBD algorithm. Throughout this section we assume belief states can be represented exactly as Gaussian distributions: in other words, we assume a linear-Gaussian system. In the following sections we will demonstrate experimentally that the PBD algorithm is useful in a wider variety of problems using an EKF or the efKF described in Section 4, but incorporating the error of these approximate filtering techniques into an analysis of the algorithm is a topic for future research."}, {"heading": "5.1 Performance", "text": "PBD selects actions by performing a limited-horizon forward search using a restricted policy space induced by the macro-actions. However, during execution, only the first step of the macro-action is taken. After an observation is received, the belief state is updated, and then planning is repeated from the resulting belief. By only taking the first primitive action, the system may take sequences of actions that do not correspond to any of the known macro-actions, effectively expanding the considered policy space. As a result, the performance will be at least as good as actually executing the entire macro-action. However, it would be useful to determine if any claims can be made about the belief-action values calculated as part of the PBD algorithm. Obviously, the received rewards of the executed policy will always be less than or equal to the optimal policy\u2019s rewards, since the policy space considered during planning is smaller than the full policy space. However, the values calculated by the PBD algorithm are only approximate values due to the approximations (such as sampling a subset of the posterior beliefs) made during the computation process. We now prove that for linear-Gaussian systems, the values computed by PBD, minus an additional epsilon term due to the approximations incurred by sampling a subset of the posterior beliefs after each macro-action, are probabilistically guaranteed to be a lower bound on the true optimal values. For the purpose of this analysis we will assume that all rewards are scaled to lie between 0 and 1. M is the maximum number of macro-actions.\nTheorem 5.1 Given a linear-Gaussian system, an initial belief b, and any \u03b4 > 0, and for any reward model which is either a weighted sum of Gaussians, or a polynomial function, the following\nlower bound on the optimal value of b holds\nVPBD(b)\u2212 \u01ebH\u0303 \u2264 V \u2217(b)\nwith probability at least 1 \u2212 \u03b4, where \u01ebH\u0303 = \u03b3HVmax + 11\u2212\u03b3 ( \u221a V 2max Ns log( (MNs) H\u0303 \u03b4 )), Vmax is a bound on the maximum value10, and VPBD(b) is the best value computed for b by the PBD planning algorithm.\nProof First recall in the PBD algorithm that after each macro-action, a subset of the possible posterior beliefs are sampled from the posterior belief distribution, before the tree is further expanded. Note that this is equivalent to implicitly sampling a subset of the observation trajectories that might have been received during that macro-action: each sampled posterior belief corresponds to the belief that would result by following the macro-action and receiving a particular sequence of observations. Consider an alternate variant of a macro-action forward search in which observation sequences are exhaustively enumerated11: that is, for each macro-action of length L, all |Z|L possible observation sequences are expanded. In this case, the forward search tree constructed is precisely a subset of a full POMDP forward search tree, since the macro-actions mean that only a subset of actions are expanded. Therefore, the computed values of this alternate algorithm are directly a lower bound on the optimal finite-horizon value, since the policy space considered is a strict subset of the full optimal finite-horizon policy space.\nHowever, for computational reasons, at each macro-action tree node, only a subset of observation sequences are sampled, and the results are averaged across the observation sequences. As observation sequences that happen to lead to higher rewards may be, by chance, disproportionately sampled, the resulting VPBD value could be an upper bound to the true optimal value. However, we can now probabilistically bound this error induced by observation sampling,\nPrior work by Kearns, Mansour and Ng (2002) proved bounds on the MDP state values computed using a sampled-states forward search given certain constraints on the number of samples, and the horizon of the forward search. McAllester and Singh (1999) extended these ideas to POMDPs, showing that similar bounds on the calculated values of a POMDP belief state could be computed if a sufficient number of observations were sampled, and forward search was computed out to a sufficiently large horizon. These results can be applied with little modification to our PBD algorithm. Essentially we can consider a new meta-POMDP in which the only available actions are macro-actions, and observations are sequences of primitive observations. Since we can compute the expected reward of macro-actions analytically (due to the assumed form of the reward model), the only errors in evaluating the root belief node values for a macro-action policy come from limited sampling of the observation trajectories, and performing a finite horizon lookahead. The prior results of McAllester and Singh directly apply to our meta-POMDP, and therefore, the values computed by PBD.\nTo obtain our final result, we depart slightly from the presentation of Kearns, Mansour and Ng who sought to compute the number of samples required, and the horizon required, to ensure the resulting root state-action values were within a specified \u01eb bound of the true value. In contrast, we seek to compute the resulting error from an input number of samples Ns and fixed horizon H\u0303 .\n10. The maximum value can be trivially upper bounded by maxs,a r(s, a)/(1 \u2212 \u03b3). 11. This is possible only if there are a finite number of observations.\nIn the proof of Kearns, Mansour and Ng, they show that the error between the calculated H\u0303horizon state-action value QH\u0303(b, a) and the true infinite-horizon policy value Q(b, a) is\n|QH\u0303(b, a)\u2212Q(b, a)| \u2264 \u03b3H\u0303Vmax + \u01eb\n1\u2212 \u03b3 (54)\nwith probability at least 1\u2212 \u03b4 if\n\u03b4 \u2265 (MNs)H\u0303exp(\u2212\u01eb2Ns/V 2max). (55)\nWe can solve Equation 55 for \u01eb, to yield\n\u01eb \u2264\n\u221a\nV 2max Ns log ((MNs)H\u0303 \u03b4 ) . (56)\nSubstituting Equation 56 into Equation 54 and re-arranging yields the desired result.\nIf the reward of a macro-action cannot be analytically computed, we can approximate its value by sampling Nr samples at each primitive action along the length-L macro-action. For an input \u03b4\u2032 we can compute a probabilistic bound on the resulting error of the approximate value at each primitive action using Chernoff\u2019s bound. Using the union bound, the probability that the true error will exceed this threshold at any primitive action along the macro-action is no more than L\u03b4\u2032, and the resulting error is at most the sum of the error at each primitive action. This error (and probability of error) can be easily incorporated to extend Theorem 1 to the case of generic reward models.\nNote that Theorem 1 only states that with high probability that VPBD \u2212 \u01ebH\u0303 is a lower bound on the optimal value: it does not provide a tight bound on how close the computed VPBD is to the optimal value. To state this in an alternate way, \u01ebH\u0303 provides a bound on the error introduced by sampling observation sequences, but PBD still is designed to only search over a limited policy space, that defined by the macro-actions chosen and used in the forward search. Therefore in general the computed values, even when a large number of observation sequences are sampled, may be substantially less than the value under the optimal policy."}, {"heading": "5.2 Computational Complexity", "text": "One of the central contributions of our work is providing an efficient macro-action forward search algorithm that can scale to long horizons and large problems. We now analyze the computational complexity of our approach. The computational cost will be a function of two operations: computing the posterior distribution over beliefs, and computing the expected reward of a distribution over beliefs. As we will shortly see, the computational complexity of these operations is a polynomial function of the state space dimension.12 This low order relationship is possible due to the particular parametric representation employed for the posterior distribution over beliefs: representing the posterior distribution over beliefs as a Gaussian requires a number of parameters that scales only quadratically with the number of state dimensions.13 PBD is therefore able to scale to large domains. Our computational complexity results are summarized in Table 1. Throughout this analysis\n12. If there are multiple independent state variables, or factors, the complexity increases linearly with the number of\nindependent factors.\n13. To represent a Gaussian inX dimensions requires anX-dimensional vector to specify the mean, andO(X2) parameters to specify the covariance.\nwe presume that the macro-actions themselves were selected or computed in advance; in general, the cost of computing domain-relevant macro-actions will depend on the particular domain, and we do not here analyze the possible additional computational cost incurred during macro-action construction."}, {"heading": "5.2.1 COMPLEXITY OF GAUSSIAN BELIEF UPDATING FOR A LENGTH L MACRO-ACTION", "text": "The computation for the posterior distribution over beliefs resulting from a macro-action was presented in Equation 53, and consists of a set of matrix multiplications and inversions. Matrix multiplication is an O(D2) computation, where D is the state space dimension. Matrix inversion can be done in O(D3) time. Therefore the computational cost of performing a single update of the posterior over belief states is an O(D3) operation. This update must be performed for each primitive action in a length-L macro-action a\u0303, resulting in a computational cost of\nO(LD3) (57)\nfor a single macro-action.\nIn Section 4 we presented a set of equations (Equations 50- 53) that we use to approximately compute the posterior distribution over beliefs when the observation model is not Gaussian, but is an exponential family. These equations again consist of a set of matrix multiplications, and the cost of a single update, and cost of updating over a length-L macro-action will again be O(D3) and O(LD3), respectively.14"}, {"heading": "5.2.2 COMPLEXITY OF ANALYTICALLY COMPUTING THE EXPECTED REWARD OF A LENGTH", "text": "L MACRO-ACTION\nThe second component of the computational cost comes when we evaluate the expected reward of a macro-action. If the reward is a weighted sum of Nr Gaussians, as specified by Equation 43, this operation involves evaluating the value of NrL Gaussians at particular fixed points. Evaluating a D-dimensional Gaussian at a single point is an O(D3) operation, due to the inverse covariance that must be computed. The cost for performing this operation NrL times is simply O(NrLD3). Therefore the total cost for evaluating the expected reward of a macro-action when the reward model is a weighted sum of Nr Gaussians is:\nO(LD3(Nr + 1)). (58)\nIf instead the reward model is aNr-th degree polynomial function of the state, then the expected reward calculation consists of the cost of calculating theNr-moments of aD-dimensional Gaussian distribution (Equation 48). Assume without loss of generality that we are computing the Nr-th central moment of a D-dimensional Gaussian: a non-central moment can always be converted into a central moment by adding and subtracting a mean term. Let the Nr-th central moment denote moments of the form E[(s1 \u2212 E[s1])2(s2 \u2212 E[s2]) . . . (sD \u2212 E[sD])] or E[(s2 \u2212 E[s2])Nr ], and \u03c3ij denote the ij-th entry of the covariance matrix. From the work by Triantafyllopoulos (2003) we know that if Nr is odd, the central Nr-th moments are zero, and if Nr is even (Nr = 2k) any Nr-th\n14. The actual computational cost will be higher for the efKF filter since additional operations must be performed to link\nthe observation and the parameter space, but these operations will similarly be cubic or lower functions of the state space dimension.\ncentral moments can be decomposed into a sum over products of k covariance terms. For example, for a four-dimensional Gaussian, one of the fourth central moments (k = 2, 4 = 2k) is\nE[(s1 \u2212 \u00b51)(s2 \u2212 \u00b52)(s3 \u2212 \u00b53)(s4 \u2212 \u00b54)] = \u03c312\u03c334 + \u03c314\u03c323 + \u03c313\u03c324 = \u2211\n1,2,3,4\n\u03c3ij\u03c3kl (59)\nwhere the sum is taken over all permutations of product pairs (in this case, 12/34, 14/23, 13/24). For any 2k-th central moment,\nE[(si1 \u2212 E[si1 ])(sj1 \u2212 E[sj1 ]) . . . (sik \u2212 E[sik ])(sjk \u2212 E[sjk ])] = \u2211 \u03c3i1j1\u03c3i2j2 . . . \u03c3ikjk (60)\nwhere the sum is again taken over all permutations of product pairs. This sum yields (Nr \u2212 1)!/(2k\u22121(k \u2212 1)!) terms which consist of covariance elements to the power of at most k. For a particular central moment, this cost is independent of the dimension of the state space. Therefore the cost is dominated by the number of terms, which grows at slightly less than O(Nr!). There will also be an additional cost if the original polynomial was not a central moment calculation, which will involve at most Nr D-dimensional matrix multiplications, yielding a cost of O(NrD2). In summary, the cost of computing the expected reward when the reward is a polynomial function will be\nO(L(D3 +Nr! +NrD2)). (61)"}, {"heading": "5.2.3 COMPLEXITY OF CONDITIONAL MACRO-ACTION PLANNING (PBD)", "text": "Sampling beliefs from the posterior distribution over beliefs requires sampling from a multivariate Gaussian over the distribution of belief means, which we accomplish by computing the Cholesky decomposition of the covariance matrix, \u03a3 = AAT , an O(D3) operation. Each belief mean is generated by first constructing a D-dimensional vector q, consisting of D independent samples from a standard (scalar) normal distribution. A sample from the desired multivariate Gaussian N (s|\u00b5,\u03a3) is simply \u00b5 + Aq. Sampling Ns times involves the one-time cost of computing the Cholesky decomposition plus the matrix-vector multiplication for each sample, yielding a cost of\nO(D3 +NsD2). (62)\nThis procedure is performed at every branch point in the forward search tree (in other words, at all macro-action nodes except those at the tree leaves). For concreteness, consider a horizon of two macro-actions (H\u0303 = 2). After expanding out each of the |A\u0303| macro-actions, we will sample Ns beliefs. From each resulting belief state, we will again expand each of the |A\u0303| macro-actions: refer back to Figure 4 for an illustration. The computational complexity is now the sum of the cost at horizon one and two:\nO(|A\u0303|(LD3Nr +NsD2 +D3) + |A\u0303|2NsLD3Nr) = O(|A\u0303|(NsD2 +D3) + |A\u0303|2NsLD3C), (63)\nwhere the second expression is derived by considering only the higher order terms. In general, the computational complexity of selecting an action using PBD when considering a future horizon of H\u0303 macro-actions is\nO(|A\u0303|H\u0303\u22121N H\u0303\u22122s (NsD2 +D3) + |A\u0303|H\u0303N H\u0303\u22121s LD3C). (64)"}, {"heading": "5.2.4 COMPLEXITY OF PBD WITH ARBITRARY REWARD MODELS", "text": "For arbitrary reward models it will not be possible to analytically compute the expected reward. Instead the expected reward for each primitive action a within the macro-action a\u0303 can be approximated by sampling D-dimensional states and estimating the expected reward by averaging the reward of each sampled state.15 The cost of sampling Ns states from a multivariate Gaussian is an O(D3 + NsD2) operation (from Equation 62). Assuming that calculating the reward for each sample takes time linear in the state dimension, then sampling rewards adds an additional\nO(D3 +NsD2D) = O(D3(Ns + 1)) (65)\ncost to each primitive action within a macro-action, yielding a total complexity of PBD planning with reward sampling of:\nO(|A\u0303|H\u0303N H\u0303s LD3 + |A\u0303|H\u0303N H\u0303s LD2). (66)"}, {"heading": "6. Experimental Results", "text": "In this section we test our algorithm on planning under uncertainty problems. The PBD algorithm assumes that the transition models of the problem domains can be approximated as linear Gaussians. Our results on problems inspired by two different research communities, scientific exploration from the POMDP literature (Smith & Simmons, 2005) and target monitoring from the sensor resource management domain, suggest that numerous domains do satisfy this assumption. More generally, using a linear Gaussian dynamics models is a common approximation in the controls community, and has been used to approximate even very complex dynamics such as the physiological changes involved in glucose control for diabetics (Patek, Breton, Chen, Solomon, & Kovatchev, 2007).\nDespite the different origins and state space representations of the two problems that we will shortly present results for, they both involve reasoning multiple steps into the future in order to make good decisions in a very large domain. Our PBD algorithm outperforms existing approaches in both settings. We also demonstrate our algorithm in a target monitoring problem on an actual\n15. Note that if the rewards are bounded, for a given \u01eb and \u03b4, sampling a sufficient number of samples Ns = f(\u01eb, \u03b4), guarantees the estimate of the expected reward of a primitive action is is \u01eb-close to the true expected value, with probability at least 1 \u2212 \u03b4. The proof of this is a simple application of Hoeffding\u2019s inequality (1963). If Ns is set such that the estimated reward of each primitive action is \u01eb\nL close to the true expected primitive action reward with\nprobability at least 1\u2212 \u03b4 \u01eb , then the triangle inequality and union bound guarantee that the expected reward of the entire length-L macro-action is \u01eb-close to the true expected reward for the macro-action with probability at least 1 \u2212 \u03b4.\nhelicopter platform, underscoring the applicability of our algorithm to real-world domains. In all results the macro-action search horizon H\u0303 was chosen empirically given computational constraints, as is common in forward search approaches. We explicitly explore the performance changes as the search horizon is varied in Table 3. We did not use a domain-specific estimate of the future node value of search tree leaf nodes: in some domains it may be easier to specify macro-actions than a heuristic value function, and a side benefit of PBD is to be able to efficiently search to sufficient depths such that a heuristic is not required."}, {"heading": "6.1 Generic Baselines", "text": "In both problems we compare the PBD algorithm to state-of-the-art approaches from the relevant research community \u2014 POMDP planners and sensor resource management algorithms for the scientific exploration and target monitoring problems respectively.\nTo fully examine the impact of analytically computing the posterior distribution over beliefs, we also constructed a variety of algorithms that do not currently exist in the literature. These algorithms are given access to the same hand-coded macro-actions as those used by the PBD algorithm. We first constructed comparison algorithms which use a macro-action forward search but sample observation trajectories rather than working with a posterior distribution over beliefs. Sampling observation sequences produces a particle approximation of the resulting distribution over beliefs, thereby providing a baseline algorithm that does not use an analytic representation of the posterior belief distribution. These algorithms are referred to as the macro-action discrete (MAD) algorithm when the underlying state space is discrete, and the macro-action continuous (MAC) algorithm when the state space is continuous.\nWe also implemented an offline point-based POMDP solver that was given access to the macroactions used by the forward search algorithms.16 Specifically, we modified the state-of-the-art POMDP planner SARSOP (Kurniawati et al., 2008) algorithm from the Approximate POMDP Planning (APPL) Toolkit17 and incorporated macro-actions to guide the sampling of belief points that are used for the point-based value backups. Instead of the SARSOP algorithm using performance bounds to guide the sampling of the point-based beliefs, the modified SARSOP algorithm uses a macro-action and a sampled, same-length observation sequence to generate additional point-based belief samples. This implementation is also a modified version of the MiGS (Kurniawati et al., 2009) by the same authors. However, due to the offline, point-based nature of this modified algorithm, we were only able to evaluate the algorithm on two of the five problem domains used in this paper.\nFinally, we considered an experimental comparison to an open-loop version of PBD, in which no conditioning on the received observations is ever performed; however, initial experiments suggested that this variant performed very poorly in our domains of interest, and so we did not explore it further."}, {"heading": "6.2 Rocksample", "text": "The scientific exploration ROCKSAMPLE problem is a benchmark POMDP problem proposed by Smith and Simmons (2005), and subsequently extended to the FieldVisionRockSample (FVRS)\n16. For a formal discussion of the differences between the offline point-based and online forward search POMDP algo-\nrithms, we refer the reader to the survey paper by Ross et al. (2008a).\n17. Approximate POMDP Planning Toolkit. http://bigbird.comp.nus.edu.sg/pmwiki/farm/appl/\nagent (pink square) explores and samples rocks (circles) in the world. White circles correspond to rocks with positive value, black otherwise. Yellow squares indicate locations of the rock information beacons. The blue sidebar is the exit region. Red lines indicate paths taken by an agent executing the (b) SARSOP and (c) PBD policies. We see that the SARSOP policy only explores rocks and not the beacons; it cannot search far enough ahead to model the value of the beacons. In contrast, the PBD plan visits the beacons and then heads directly for the high-value rocks.\nproblem by Ross and Chaib-draa (2007). Initial experiments in these domains revealed that searching only to a shallow depth was sufficient to obtain good policies. As our interest is in domains which require long-horizon lookahead, we created a new variant of the ROCKSAMPLE problem called the Information Search Rocksample (ISRS) problem, shown in Figure 5(a). In ISRS an agent explores and samples k rocks in a n \u00d7 n grid world. The positions of the agent (pink square) and the rocks (circles) are fully observable, but the value of each rock (good or bad) is unknown to the agent. At every time step, the agent receives a binary observation of the value of each rock. The accuracy of this observation depends not on the agent\u2019s proximity to the rocks themselves but on the agent\u2019s proximity to rock information beacons (yellow squares), each of which correspond to a particular rock (for example, information beacons could be mountain tops that offer a particularly good view of a far off geologic formation). A key characteristic of ISRS that is not present in ROCKSAMPLE or FVRS is that the rock information beacons are not at the same locations as the rock themselves. Unlike previous ROCKSAMPLE formulations, information gathering and reward exploitation require different actions in ISRS.\nThe agent gets a fixed positive reward for collecting a good rock (white circle), a negative reward for collecting a bad rock (black circle), and a smaller positive reward for exiting the problem (the blue sidebar on the right). A discount factor \u03b3 = 0.99 encourages the agent to collect rewards sooner. All other actions have zero rewards.\nThe observation model is a Bernoulli distribution with the noise of the distribution scaled with\nthe distance to the beacon, such that:\np(zi,t|si, rt, RBi) = {\n0.5 + (si \u2212 0.5)2 \u2212\u2016rt\u2212RBi\u20162 D0 zi,t = 1 0.5\u2212 (si \u2212 0.5)2 \u2212\u2016rt\u2212RBi\u20162 D0 zi,t = 0 (67)\nwhere zi,t is a binary {0 or 1} observation for the value of the rock i at time t, si is the true value {0 or 1} of the rock, rt is the agent\u2019s position at time t, RBi is the location of the information beacon associated with rock i, D0 is a tuning parameter that controls how quickly the accuracy of the observations\ndecrease with greater distance between the agent and the beacon.\nFor example, at an information beacon, the agent, with absolute certainty, receives an observation that matches the true value of the corresponding rock, whereas when the distance between the agent and the beacon is infinite, the agent receives an \u201caccurate\u201d observation with 0.5 probability.\nAll variants of the ROCKSAMPLE problem, including our new ISRS problem, are formulated with discrete state, action and observation sets. To allow the use of our PBD and MAC algorithms, we approximate the agent\u2019s belief of each rock\u2019s value as a Gaussian distribution over the [0,1] state space, and take advantage of the efKF presented in Section 4 to represent the ROCKSAMPLE problem\u2019s Bernoulli observation model (Equation 67: see Appendix B for details).\nEach macro-action is a finite, open-loop sequence of primitive actions. For the ROCKSAMPLE problem, there are five primitive actions: single steps in the four cardinal directions and the rock sampling action. Recall that the agent\u2019s position is fully observable and its actions are deterministic. Using domain knowledge, the macro-actions considered from a particular belief state are macroactions that, given the agent\u2019s current position, consist of a sequence of actions that enables the agent to move to each rock, each information beacon, or to the nearest exit. This results in 2k + 1 macro-actions being considered for forward search at every belief node. As the agent operates in a grid world, there may be multiple action sequences with the same, shortest distance between two grid squares: the macro-action considered is the one where the agent would move as diagonally as possible, so as to replicate the agent\u2019s shortest path movement in a continuous map. In addition, if the agent is currently on a rock (which is fully observable), additional macro-actions where the agent first collects the rock before executing one of the 2k+1 default macro-actions are considered, resulting in twice as many macro-actions. The set of macro-actions therefore varies with every belief node.18 For an ISRS problem with 5 rocks in a 8 \u00d7 8 grid world, the average macro-action length was 4.76, with a minimum and maximum macro-action length of 1 and 12 respectively.\nAs the ROCKSAMPLE family of problems originates from the POMDP literature, we compared our macro-action algorithms to existing state-of-the-art POMDP solvers: the fast upper-bound of QMDP (Littman, Cassandra, & Kaelbling, 1995), the point-based offline value-iteration techniques HSVI2 (Smith & Simmons, 2005) and SARSOP (Kurniawati et al., 2008), as well as RTBSS (Paquet, Chaib-draa, & Ross, 2006), an online, factored, forward search algorithm. We also evaluated a modified version of the SARSOP algorithm that was given access to the same macro-actions used by the forward search macro-action algorithms. Since all approaches, including our own, are approximations, we also include as an upper bound the value of the fully observable problem.\nTable 2 compares the performance of the different algorithms in the ISRS problem. Each algorithm was tested on 10 different initial conditions (which rocks were high valued and which were low valued), and each scenario was tested 20 times. The HSVI2 and SARSOP algorithms were executed offline for a range of durations,19 while the forward search algorithms were allowed to search\n18. However, if two belief nodes have the same agent position, their macro-actions will be identical. 19. The offline execution durations for both HSVI2 and SARSOP were chosen empirically. HSVI2 was able to search\nfor solutions to the ISRS[8,5] problem for 1,000s offline before running out of memory. It was found that the values computed by SARSOP remained constant after 25,000s.\nout to pre-defined depths. Here, depth refers to the primitive action depth in the RTBSS algorithm, and the macro-action depth in the macro-action algorithms (MAC, PBD and MAD). In addition, a pre-defined number of samples were used to obtain posterior beliefs after every action/macro-action. We abuse notation here slightly by using samples to refer to observations in the RTBSS algorithm, observation sequences in the MAD and MAC algorithms, and to samples from the posterior belief distribution in the PBD algorithm.\nWe also attempted to allow the RTBSS algorithm to search to the same primitive action search depth as the macro-action algorithms do on average, i.e. 4.76\u00d7 3 \u2248 14, by reducing the number of observations that are sampled per action. We found that even if only 1 observation was sampled per action, RTBSS could only achieve a search depth of 10 in reasonable computation time.\nThe macro-action algorithms do significantly better than most of the other benchmark solvers. Figure 5(b) and 5(c) compare the policies generated by the SARSOP algorithm and the PBD algorithm in the ISRS problem. Both SARSOP and HSVI2 explore parts of the belief space guided by an upper bound on belief-action values. A long lookahead is required to realize that visiting beacons and then rocks has a higher value that visiting rocks, so many iterations and therefore substantial computation time is required for SARSOP and HSVI2 to sample the beliefs that will lead to them computing a higher-value policy. In the considerable offline computation time provided, both SARSOP and HSVI2 did not discover that it is valuable for the agent to make a detour to the information beacons before approaching the rocks. Instead, they directly approach the rocks and make decisions based on the noisy observations that are obtained due to the large distance from the information beacons.\nThe RTBSS algorithm does reasonably well when it is able to search deep enough, once again emphasizing the need for planning under uncertainty algorithms to search far into the future in order to perform well. Nevertheless, when the same amount of online planning time is available, the MAD algorithm still outperforms the RTBSS algorithm. Macro-actions allow the algorithms to uncover\nthe potential value of moving to an information beacon without incurring the computational cost of primitive-action forward search; this allows our macro-action forward search approaches to perform better than prior primitive-action approaches. Figure 5(c) shows that a PBD agent\u2019s policy involves visiting some of the information beacons to gather information about which of the rocks are good (white circles), before traveling to those rocks to sample them. In this domain, MAD does better than the PBD algorithm since the problem specification is made up of discrete states, whereas the parametric approaches must approximate the world models during planning. In addition, the fullyfactored nature of the problem domain, where the state of each rock value is independent, keeps the computational requirements of the MAD algorithm relatively small.\nSimilarly, when the SARSOP algorithm was modified to incorporate the hand-coded macroactions, this offline, point-based algorithm performed much better than existing offline approaches, including the SARSOP algorithm without access to macro-actions. This result re-emphasizes that well-designed macro-actions can be very valuable in generating good policies in partially observable domains. However, not all problem domains, especially those with large, factored domains that are of interest in this paper, can be represented and solved in an offline manner, and we shall shortly see the benefit of PBD for such settings.\nWe also performed additional analysis on the three macro-action forward search algorithms. Table 3 compares the different rewards obtained by the macro-action algorithms for different macroaction depths, as well as the time taken by the planner to return a decision at every time step. The sharp performance jump that occurs when the macro-action search depth is increased from 2 to 3 emphasizes the need to search to a longer horizon in the ISRS problem before a good policy can be generated. However, the computational cost of the algorithms also increases exponentially with the macro-action search depth. This table also illustrates the small loss in performance induced by approximating the discrete problem with the continuous representation of either MAC or PBD, and the substantial increase in computational speed using PBD.\nNext we examine the relative performance and computational cost of PBD, MAC and MAD, as the number of samples changes (Table 4) up to a search depth of 3. Recall that the PBD algorithm samples from the posterior belief at each node in the search tree, and evaluates the expected future reward of subsequent macro-actions for each sample. Different regions of the posterior belief space may plan to use different subsequent macro-actions, allowing the planner to implicitly condition its plans on the received observations. However, the sampling used to partition the posterior belief space and assign different actions to different beliefs introduces a source of approximation error and additional computational complexity. As predicted by our earlier computational complexity analysis, PBD scales best of the three algorithms as the number of samples increases, since it does\nnot have to perform belief updates along each sampled trajectory explicitly. In general, performance improves with more samples, although the improvement was not statistically significant in the ISRS problem. However, when a decision-making under uncertainty problem requires a large number of posterior beliefs to be sampled after every macro-action, the PBD algorithm results in consistently faster performance for the same number of samples. Once again, MAD has a slight performance edge due to the approximation of the discrete ISRS problem with continuous variables implicit in PBD, but the difference is again not significant.\nThe macro-action forward search nature of our algorithm also allows us to scale to much larger versions of the ROCKSAMPLE problem, since unlike offline techniques, it is unnecessary to generate a policy that spans the entire belief space. We compared the algorithms on two additional ISRS problems \u2014 a 16 by 16 grid with 6 rocks, and a 100 by 100 grid with 30 rocks.\nBoth problem domains were too large for most of the benchmark solvers that were originally used for comparison, though the SARSOP and RTBSS algorithms could be implemented for the ISRS[15,6] problem domain. Table 5(a) shows the performance of SARSOP and the forward search algorithms for the ISRS[15,6] problem domain. The modified SARSOP algorithm that incorporates macro-actions ran out of memory after computing a policy offline for 900s. Because the forward search macro-action algorithms are better able to concentrate computational resources on the reachable belief space from the agent\u2019s current belief, the forward search macro-action algorithms perform much better than both the SARSOP algorithm and the modified version that incorporates macro-actions. Similarly, while the forward search single-action RTBSS algorithm performed reasonably well on the ISRS[8,5] problem if the search depth was sufficiently large, the algorithm was\nunable to search sufficiently deep in reasonable time on the larger ISRS[15,6] problem, resulting in poorer performance than the forward search macro-action algorithms.\nWe further implemented the macro-action algorithms on a ISRS[100,30] problem domain, which far exceeds any problem that can be solved by a traditional POMDP solver, including the modified SARSOP algorithm that incorporates macro-actions. Table 5(b) compares the results of the three macro-action algorithms to the fully observable value, which provides a strict upper bound of the maximum possible reward for the problem. Such large problems also underscore the value of having macro-actions to limit the branching factor of the forward search."}, {"heading": "6.3 Target Monitoring", "text": "We next consider a target monitoring problem related to those studied in the sensor resource management literature (Scott, Harris, & Chong, 2009). In this problem (Figure 6), a helicopter agent has to track multiple targets that are moving independently with noisy dynamics. The helicopter operates in 3D space, while the targets move on the 2D ground plane. The helicopter is equipped with a downward-facing camera for monitoring the environment, and if a target is within the fieldof-view of the camera sensor, the agent receives a noisy observation of the location and orientation of the target. We assume for simplicity that the observations of each target are unique, allowing us to ignore the data association problem that has been addressed elsewhere.\nThe noise associated with the agent\u2019s observation of a target depends on the agent\u2019s position relative to the target. When the helicopter is close to the ground it can only observe a small region, but can determine the position of objects within that small region to a high level of accuracy. When the helicopter flies at a higher altitude, it can view a wider region of the environment, but its\nmeasurements will be less precise. Similarly, the closer the helicopter is to a particular target, the more accurate the helicopter\u2019s observation of that target is expected to be. Reflecting this intuition, we use a Gaussian observation model where the noise covariance is a function of the position of the helicopter and target: details of this sensor model are provided in Appendix C. One desirable attribute of our sensor model is that if the helicopter is very uncertain about a target\u2019s location, even if the helicopter is close to the target\u2019s mean location, a single observation is unlikely to localize the target. If the target location is very uncertain, there is a low probability that the target is within the helicopter\u2019s field of view.\nThe agent\u2019s pose is fully observable, though the actions that it takes are subject to a small amount of additive Gaussian noise. As a result, unlike the ROCKSAMPLE domains, the open-loop nature of macro-actions means that the planner cannot perfectly predict the vehicles\u2019 pose at the end of the macro-action. Each target\u2019s motion is determined by its translational and rotational velocities. The model provides the agent with a prior over these velocities, but at every time step, the target\u2019s true velocities are additive functions of these fixed input controls and Gaussian noise. In the parametric formulation, the agent maintains a Gaussian belief over each target\u2019s state, and in order to compare MAD, we discretize the continuous state spaces of the agent\u2019s and targets\u2019 positions, and maintain a probability distribution over each discrete target state. Due to computational memory constraints, for a 100m by 100m by 20m target monitoring problem in the x, y and z directions, we were limited to a discretization with 10m resolution in the x, y directions, 5m in the z direction, and 45\u25e6 angular resolution.\nWe focus on a particular decision-theoretic version of the sensor resource management problem, where at each time step the agent must decide if each of the targets is inside an area of interest. These areas of interest are indicated by the yellow squares in Figure 6. The agent receives a positive reward if it successfully reports that a target is in an interest region, a negative reward if it wrongly decides that the target is in the region, and no reward if it decides that the target is not in the region, regardless of the target\u2019s actual state. Small costs are incurred for the agent\u2019s motion. We call this the TARGETMONITOR problem.\nGiven the current location of the agent, macro-actions were generated by computing the sequence of actions that will enable the agent to move to a particular altitude over the means of each target belief. For a particular desired destination, a macro-action is constructed by first computing the shortest path between the agent\u2019s current and desired location, and then dividing this path into primitive actions based on the maximum length of each primitive action. We also included a hovering macro-action that consists of hovering at the agent\u2019s current location for four time steps. Note that the agent\u2019s current location is fully-observable, and for the purpose of generating macroactions, we assume that the primitive actions are noise-free. Hence, for each primitive action, the helicopter is assumed to move by the mean expected change. Similar to the ROCKSAMPLE problem, although the macro-actions are generated according to a policy that relies on domain knowledge, the macro-actions themselves are evaluated in the forward-search algorithms as open-loop sequences of primitive actions. We compare the forward search macro-action algorithms to a range of intuitive strategies and prior approaches. The first algorithm is the greedy strategy, which returns the primitive action that results in the largest expected reward in the next step. The next two approaches are the Worst Target (WT) policies, which are hand-coded policies of traveling to the target that has the largest uncertainty of all the targets being tracked. The intuition is that the agent\u2019s goal in general is to localize the targets in the environment. The two algorithms differ based on whether the agent chooses a new target to travel to after each time step (WT-single), or re-plans only after it has reached the target it had initially chosen (WT-macro). Finally, we compared our algorithm to the nominal belief optimization (NBO) algorithm proposed by Scott, Harris and Chong (2009). The NBO algorithm also assumes a Kalman filter model for the target monitoring problem, but rather than considering the entire distribution of posterior beliefs, only the most likely posterior belief after an action is considered. In this algorithm, the most likely posterior belief for a Gaussian belief update is given by the posterior mean without incorporating any observations, and the covariance given by linearizing about the most likely mean at each step. Although the original algorithm uses an optimization approach to search for action sequences, here we modify the NBO algorithm by adopting a forward search approach, evaluating each macro-action based on the most likely posterior belief.20\nTable 6 presents results for the TARGETMONITOR problem, comparing the algorithms in scenarios with different number of targets. These results demonstrate that the PBD algorithm, with its closed form representation of the distribution of posterior beliefs after an action, finds a significantly better policy than alternate approaches. Figure 7 demonstrates a typical policy executed by the PBD algorithm. The agent begins in the middle of the grid world, and approaches a target at a high altitude (Figure 7(b)), maximizing the likelihood of localizing that target. If none of the targets seem to be approaching a region of interest, the agent hovers in the same position to conserve energy (Figure 7(c)). When one of the targets may potentially be entering a region of interest, the agent focuses on that target, tracking it carefully to ensure that it knows when the target is exactly in the region of interest (Figure 7(d),(e)). The agent subsequently travels to a high altitude and repeats the process of localizing another target with potential rewards (Figure 7(f)).\nConsidering the entire distribution of posterior beliefs, rather than just the maximum likelihood posterior belief, is valuable because the agent is able to reason that there is a possibility that the\n20. As noted by the authors, the NBO algorithm focuses on a new method for approximating the Q-value, rather than on\nthe optimization techniques. While they adopt a generic search approach for performing the optimization, the authors also point to forward-search POMDP algorithms as good search techniques in which their Q-value approximations could be incorporated. Our use of forward search with the NBO Q-value approximation does not affect the results.\nof the agent\u2019s sensor, which is directly proportionate to the agent\u2019s height. The size of the error ellipses indicate the agent\u2019s uncertainty associated with each target at each time step. The agent alternates between flying at a high altitude to maximize the likelihood of observing targets (b),(f) and focusing on a single target that is near/has entered an area of interest (e).\ntarget could be within a region of interest. In contrast, the NBO approach only considers the most likely posterior belief, and will seek to localize the target only if the mean of its belief appears to be heading into a region of interest. While the consideration of the entire distribution of posterior beliefs necessarily incurs greater computational cost, we demonstrate in Section 6.4 that we are able to track two targets in real-time using an implementation of the PBD algorithm that has not been optimized for speed.\nTable 6 also shows that because the PBD algorithm directly computes the distribution of posterior beliefs after a macro-action, the computational cost of the PBD algorithm is significantly lower than the MAC algorithm. The MAC algorithm suffers a greater computational cost as it generates the set of posterior beliefs after a macro-action by sampling observation sequences and explicitly performing belief updating along each sample trajectory. In addition, because the TARGETMONITOR problem has a state space that is fundamentally continuous, the resolution of the state space\ndiscretization that was achievable given computational memory constraints was still unable to capture the inherent characteristics of the target monitoring problem, resulting in the poor performance of MAD in the TARGETMONITOR problem.\nIn the single-target case, we also observed the result that the PBD algorithm does worse than the hand-coded policy of the agent traveling to the target with the largest uncertainty (WT-single). When the problem only involves a single target, such a policy equates to having the agent hover over the sole target at every step, which is the optimal policy in the single target case. In contrast, we observe that the MAC and PBD algorithms return policies that result in the agent periodically leaving the target to fly to a higher altitude, resulting in greater noise in the observations and corresponding loss of rewards on average. By restricting the MAC and PBD algorithms to planning with macro-actions, we restrict the set of plans the agent can consider in order to search deeper, rather than a shorter conditional plan that is conditioned on the observations after each primitive action. Even though the agent re-plans after every time step, without this conditional plan, an agent executing the MAC or PBD algorithms will execute the \u201csafe\u201d policy and fly to a higher altitude, which maximizes the likelihood of keeping the target well-localized when it is unable to condition its actions based on subsequent observations. This example highlights the trade-off we make by considering a smaller class of policies (those that can be expressed as chains of macro-actions) compared to the full policy set. While in simple problems, such as a single-target TARGETMONITOR problem, the policy restriction can clearly be a limitation, our macro-action algorithms perform significantly better than the other benchmark approaches when there are multiple targets, in scenarios that are arguably more complicated and require more sophisticated planning algorithms."}, {"heading": "6.4 Real-world Helicopter Experiments", "text": "Finally, as a proof of concept, we demonstrate the PBD algorithm on a live instantiation of the TARGETMONITOR problem. A motivating application for this monitoring problem is our involvement (He et al., 2010a) in the 1st US-Asian Demonstration and Assessment of Micro Aerial Vehicle (MAV) and Unmanned Ground Vehicle (UGV) Technology (MAV\u201908 competition). The mission was a hostage rescue scenario, where an aerial vehicle had to guide ground units to a hostage building while avoiding an enemy guard vehicle. Our aerial vehicle therefore had to plan paths in order\nto be able to monitor the different ground objects and report whenever any of them arrived at an area of interest.\nWe demonstrate this scenario on an actual helicopter platform monitoring multiple ground vehicles in an indoor environment (Figure 8b). In previous work (He, Prentice, & Roy, 2008; Bachrach, He, & Roy, 2009), we developed a quadrotor helicopter (Figure 8a) that is capable of autonomous flight in unstructured and unknown indoor environments. The helicopter uses a laser rangefinder to localize itself in the environment.\nWe mounted a downward-facing camera to make observations of the target. Since target detection is not the focus of this paper, each of the ground vehicles had a known, distinctive color, to be detected and distinguished easily with a simple blob detection algorithm. Given the helicopter\u2019s position in the world and the image coordinates of the detected object, we were able to recover an estimate of the position and orientation of a target observation in global coordinates. The helicopter only received an observation of the target when the target was within the camera\u2019s field-of-view, and although the helicopter platform hovered relatively stably, slight oscillations persisted, which resulted in noisier observations when the helicopter was flying at higher altitudes. Hence, the helicopter had to choose actions that balanced between obtaining more accurate observations at low altitudes and a larger field-of-view by flying high.\nTwo ground vehicles were driven autonomously in the environment with open-loop control, and the helicopter had to plan actions that would accurately localize both targets. To replicate the TARGETMONITOR problem, we marked out three areas of interest where the helicopter had to\npredict at every time step if the targets were within those areas (Figure 8c). We applied the PBD algorithm to plan paths for the helicopter that maximized the likelihood that it could accurately report whenever a target is in an area of interest. However, rather than sending open-loop control actions to the helicopter, as we did in the simulation experiments, for safety reasons we closed the loop around the position of the helicopter, sending desired waypoints that we wanted the helicopter to navigate to. The helicopter\u2019s true state in the world was actually partially observable, and the helicopter had to rely on an onboard laser scanner to localize its position in the environment.\nFigure 9 shows a 3D view of the helicopter as it monitors and reports on the locations of the ground targets. As the helicopter flew around the environment, it obtained observations of the target, which were then used to update the agent\u2019s belief of the targets. Figure 10 provides snapshots of the helicopter executing a plan that is computed online by the PBD algorithm. The helicopter exhibited similar behaviors to those that were observed in the simulation experiments. The helicopter alternated between the two targets in the environment to report when either target was in an area of interest. When the agent had a large uncertainty over a particular target\u2019s location, it would also fly to a higher altitude in order to increase its sensor field-of-view, thereby maximizing the likelihood that it will be able to re-localize the targets. A video of the complete system in action is available at: http://groups.csail.mit.edu/rrg/index.php?n=Main.Videos.\nAs a coarse measure of achieved reward, we evaluated how well the helicopter running PBD did at monitoring when a target entered an area of interest, and compared it to the WT-Single and NBO algorithms. The ground truth of the number of times the targets actually entered the areas of interests in each trial was found by using a video camera mounted overhead above the environment. Table 7 indicates that the PBD algorithm did a much better job of monitoring the targets\u2019 positions than both the WT-Single and NBO algorithms. In particular, we observed that both the WT-Single and NBO algorithms seldom took advantage of the ability to increase the agent\u2019s sensor field-ofview by having the agent fly to a higher altitude. An agent applying these two algorithms therefore had a higher probability of losing track of the targets completely."}, {"heading": "7. Related Work", "text": "Decision-making under uncertainty when the states are partially observable is most commonly discussed under the Partially Observable Markov Decision Process (POMDP) framework, though this problem has also been analyzed in other research domains under similar assumptions. While it is beyond the scope of this paper to provide a comprehensive survey of POMDP techniques, pointbased methods such as HSVI2 (Smith & Simmons, 2005) and SARSOP (Kurniawati et al., 2008) are often considered state-of-the-art offline methods, leveraging the piece-wise and convex aspects of the value function to perform value updates at selected beliefs. These approaches assume a discretestate representation, but offline approaches that use parametric representations have been proposed for continuous-valued state spaces (Brooks, Makarenko, Williams, & Durrant-Whyte, 2006; Brunskill, Kaelbling, Lozano-Perez, & Roy, 2008; Porta et al., 2006). Hoey and Poupart (2005) have also addressed continuous observation spaces by finding lossless partitions of the observation space. Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a).\nMacro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach.\nSeveral offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al. (2009). Pineau et al.\u2019s PolCA+ (2003b) algorithm uses a hierarchical approach to solving discrete-state POMDPs. Similarly, Hansen and Zhou (2003) propose hierarchical controllers that exploit a user-specified hierarchy for planning, while Charlin et al. (2007) provide a method for automatically discovering a problem hierarchy. Yu, Chuang, Gerkey, Gordon and Ng (2005) provide an optimal algorithm for planning if no observations were available. Foka and Trahanias\u2019s (2007) solution involves building a hierarchy of nested representations and solutions. Their focus is on discrete-state problems, particularly navigation applications. Theocharous and Kaelbling\u2019s (2003) discrete-state reinforcement learning approach samples observation trajectories and solves for the expected reward of a discrete\nset of belief points using function approximation. Kurniawati et al. (2009) recently used macroactions to guide the sampling of belief points for use in an offline point-based POMDP solver.\nHowever, these prior macro-action POMDP approaches compute a value function off-line, are not aimed at scaling to very large domains, and will struggle in the environments considered in this paper. An exception to this is the work by Hsiao and colleagues (2008, 2010) who used a form of macro-actions for those robot manipulation tasks that involve a large state space. The focus of their work is on robust manipulation under uncertainty, and their work only considers a very short horizon of action trajectories. Except for the work by Kurniawati et al. (2009), all these macroaction POMDP approaches, like our PBD algorithm, assume the macro-actions are provided by a domain expert.\nIn the sensor resource management domain, planning under uncertainty techniques are used in the context of planning sensor placements to track single or multiple targets. Existing algorithms often adopt a myopic, or greedy strategy when it comes to planning (Krause & Guestrin, 2007), but notable exceptions include the work by Scott et al. (2009) and Kreucher, Hero III, Kastella, and Chang (2004). Kreucher et al. describe a multi-target tracking problem, where non-myopic sensor management is necessary for multi-target tracking. The authors use a particle filter approach to represent the agent\u2019s belief of the target\u2019s location, and seek to find paths that will result in the greatest KL divergence in density before and after the measurement. To look ahead more than one action, this algorithm uses Monte Carlo sampling to generate possible observation outcomes. They also provide an information-directed path searching scheme to reduce the complexity of the Monte Carlo sampling, as well as value heuristics that will help direct the search. It is possible that some of their insights could be used in combination with our macro-action formulation to strengthen both approaches. In the experimental section we compared our approach to the work by Scott et al. (2009), who directly formulated target tracking as a POMDP, and proposed the Nominal Belief Optimization (NBO) algorithm that computes the most likely belief after an action for deeper forward search. In contrast, our algorithm explicitly computes the entire set of possible posterior beliefs after a macro-action. Recently two groups (Erez & Smart, 2010; Platt, Tedrake, LozanoPerez, & Kaelbling, 2010) have independently proposed an approach that lies in the middle of this spectrum: beliefs are updated by assuming that the most likely observation is received, but the variance is increased. In contrast, our approach represents that each resulting belief may be fairly peaked, but the mean of the beliefs may be spread out. This more complete representation may be advantageous if there are sharp changes in the reward function.\nAs stated in the introduction, the finite-horizon forward search, act, and re-plan strategy PBD follows can be seen as an instance of the Model Predictive Control/Receding Horizon Control (MPC/ RHC) framework from the controls community. Examples of MPC and RHC include the work by Kuwata and How (2004), Bellingham, Richards, and How (2002), and Richards, Kuwata, and How (2003). A special case of RHC control is Certainty Equivalence Control, or CEC (see Bertsekas, 2007 for an overview). In fully observable systems, CEC first assumes all stochastic operations (such as transitions) take on their expected value, and then solves a finite-horizon deterministic control problem. CEC may be applied in partially observable environments by first sampling an initial state from the belief state. Though CEC can be very efficient in large domains, a key limitation of its use in partially observable environments is that a CEC-style controller will never take information-gathering actions. Returning to the generic class of MPC approaches, to our knowledge no prior model predictive controllers have used macro-actions nor developed the notion of a pos-\nterior distribution of beliefs, which enables our PBD approach to scale to large uncertain domains where a multi-step lookahead is required."}, {"heading": "8. Conclusion", "text": "In this paper we have presented the Posterior Belief Distribution algorithm. PBD is a forwardsearch algorithm for large (consisting of many variables, each of which can take on many values) partially observable domains. PBD analytically and efficiently computes the resulting distribution of posterior belief states possible after a sequence of actions. This allows the computational cost of evaluating the reward associated with a macro-action to be tractable, which we leverage to enable longer horizon lookahead search during online planning. We have presented theoretical and experimental results evaluating the performance and computational cost of our macro-action algorithms. Our algorithms were applied to problem domains that span multiple research communities, and consistently performed better than prior approaches in large domains which require multi-step lookahead for good performance. Finally, we demonstrated our algorithm on a real robotic helicopter, underscoring the applicability of our algorithm for planning in real-world, long-horizon, partially observable domains."}, {"heading": "9. Acknowledgments", "text": "Ruijie He, E. Brunskill and N. Roy were supported by the National Science Foundation (NSF) Division of Information and Intelligent Systems (IIS) under Grant #0546467 and by the Office of Naval Research under the \u201cDecentralized Reasoning in Reduced Information Spaces\u201d project, Contract # N00014-09-1-1052. We wish to thank Finale Doshi-Velez, Alborz Geramifard, Josh Joseph, Brandon Luders, Javier Velez, and Matthew Walter for valuable discussions and feedback. Daniel Gurdan, Jan Stumpf and Markus Achtelik provided the quadrotor helicopter and the support of Ascending Technologies. Abraham Bachrach, Anton De Winter, Garrett Hemann, Albert Huang, and Samuel Prentice assisted with the development of the software and hardware for the helicopter demonstration. We also appreciate early POMDP forward search discussions with Leslie Pack Kaelbling and Tomas Lozano-Perez."}, {"heading": "Appendix A: Exponential Family Kalman Filter", "text": "Building on statistical economics research for time-series analysis of non-Gaussian observations (Durbin & Koopman, 2000), we present the Kalman filter equivalent for systems with linear-Gaussian statetransitions and observation models that belong to the exponential family of distributions.\nThe state-transition and observation models can be represented as follows:\nst = Atst\u22121 +Btat + \u03b5t, st\u22121 \u223c N(\u00b5t\u22121,\u03a3t\u22121), \u03b5t \u223c N(0, Pt) (68) p(zt|\u03b8t) = exp(zTt \u03b8t \u2212 \u03b2t(\u03b8t) + \u03bat(zt)), \u03b8t = W (st). (69)\nFor the state-transition model, st is the system\u2019s hidden state, at is the control actions, At and Bt are the linear transition matrices, and \u01ebt is the state-transition Gaussian noise with covariance Pt.\nThe observation model belongs to the exponential family of distributions. \u03b8t and \u03b2t(\u03b8t) are the canonical parameter and normalization factor of the distribution, and W (.) maps the states to canonical parameter values. W (.) depends on the particular member of the exponential family. For\nease of notation, we let\n\u03c5t(zt|\u03b8t) = \u2212 log p(zt|\u03b8t) = \u2212zTt \u03b8t + \u03b2t(\u03b8t) + \u03bat(zt). (70) Following the traditional Kalman filter, the process update can be written as\n\u00b5t = At\u00b5t\u22121 +Btat, \u03a3t = At\u03a3t\u22121A T t + Pt, (71)\nwhere \u00b5t and \u03a3t are the mean and covariances of the posterior belief after the process update but before the measurement udpate. For the measurement update, we seek to find the conditional mode\n\u00b5t = argmax st\np(st|zt) (72)\n= argmax st\np(zt|st)b(st) (Bayes rule) (73)\n= argmax st\np(zt|\u03b8t)b(st) (74)\n= argmax st\nexp(\u2212Jt), where Jt = \u2212 log p(zt|\u03b8t) + 1\n2 (st \u2212 \u00b5t)T\u03a3 \u22121 t (st \u2212 \u00b5t) (75)\n\u21d2 0 = \u2202Jt \u2202st\n\u2223 \u2223 \u2223\nst=\u00b5t =\n\u2202\u03c5t(zt, \u03b8t)\n\u2202\u03b8t\n\u2202\u03b8t \u2202st +\u03a3 \u22121 t (\u00b5t \u2212 \u00b5t). (76)\nTaking the derivative of \u03b8t = W (st) about the prior mean \u00b5t, we let\nYt = \u2202W (st)\n\u2202st\n\u2223 \u2223 \u2223 \u2223\nst=\u00b5t\n. (77)\nSimilarly, performing a Taylor expansion on \u2202\u03c5t(zt|\u03b8t)\n\u2202\u03b8t about \u03b8t = W (\u00b5t),\n\u2202\u03c5t(zt|\u03b8t) \u2202\u03b8t = \u2202\u03c5t(zt|\u03b8t) \u2202\u03b8t\n\u2223 \u2223 \u2223 \u2223\n\u03b8t=\u03b8t + \u22022\u03c5t(zt|\u03b8t) \u2202\u03b8t\u2202\u03b8Tt\n\u2223 \u2223 \u2223 \u2223\n\u03b8t=\u03b8t\n(\u03b8t \u2212 \u03b8t) (78)\n\u2202\u03c5t(zt|\u03b8t) \u2202\u03b8t =\u03c5\u0307t + \u03c5\u0308t(\u03b8t \u2212 \u03b8t) (79)\nwhere \u03c5\u0307t = \u2202\n\u2202\u03b8t (\u2212zTt \u03b8t + \u03b2t(\u03b8t)\u2212 \u03bat(zt))\n\u2223 \u2223 \u2223 \u2223\n\u03b8t=\u03b8t\n, (Eqn. 70) (80)\n= \u2202\u03b2t(\u03b8t)\n\u2202\u03b8t\n\u2223 \u2223 \u2223 \u2223\n\u03b8t=\u03b8t\n\u2212zt (81)\n\u03c5\u0307t =\u03b2\u0307t \u2212 zt (82)\nand \u03c5\u0308t = \u22022\u03b2t(zt|\u03b8t) \u2202\u03b8t\u2202\u03b8Tt\n\u2223 \u2223 \u2223 \u2223\n\u03b8t=\u03b8t\n(\u03b8t \u2212 \u03b8t). (83)\n\u03c5\u0308t =\u03b2\u0308t (84)\nPlugging Equations 82 and 84 into Equation 79, and then into Equation 76,\nY Tt (\u03b2\u0307t \u2212 zt + \u03b2\u0308t(\u03b8t \u2212 \u03b8t)) =\u2212 \u03a3 \u22121 t (\u00b5t \u2212 \u00b5t) (85)\nY Tt \u03b2\u0308t(\u03b2\u0308 \u22121 t (\u03b2\u0307t \u2212 zt)\u2212 \u03b8t + \u03b8t) =\u2212 \u03a3 \u22121 t (\u00b5t \u2212 \u00b5t) (86) Y Tt \u03b2\u0308t((\u03b8t \u2212 \u03b2\u0308\u22121t (\u03b2\u0307t \u2212 zt))\u2212 \u03b8t) =\u03a3 \u22121 t (\u00b5t \u2212 \u00b5t) (87)\nY Tt \u03b2\u0308t(z\u0303t \u2212W (st)) =\u03a3 \u22121 t (\u00b5t \u2212 \u00b5t), (88)\nwhere z\u0303t = (\u03b8t \u2212 \u03b2\u0308\u22121t (\u03b2\u0307t \u2212 zt)) is the projection of the observation onto the parameter space of the exponential family distribution, and is independent of st. In Equation 88 we substituted \u03b8t using Equation 69.\nMean Update\nUsing Equation 88 and substituting \u00b5t for st,\n\u03a3 \u22121 t (\u00b5t \u2212 \u00b5t) = Y Tt \u03b2\u0308t(z\u0303t \u2212W (\u00b5t)) (89)\n= Y Tt \u03b2\u0308t(z\u0303t \u2212W (\u00b5t)) +W (\u00b5t)\u2212W (\u00b5t) (90) = Y Tt \u03b2\u0308t(z\u0303t \u2212W (\u00b5t))\u2212 Y Tt \u03b2\u0308t(W (\u00b5t)\u2212W (\u00b5t)). (91)\nLinearizingW (st) about \u00b5t,\nW (st) = W (\u00b5t) +W \u2032(st)st=\u00b5t(st \u2212 \u00b5t) (92)\n= W (\u00b5t) + Yt (\u00b5t \u2212 \u00b5t) (93) \u21d2 \u03a3\u22121t (\u00b5t \u2212 \u00b5t) = Y Tt \u03b2\u0308t(z\u0303t \u2212W (\u00b5t))\u2212 Y Tt \u03b2\u0308tYt (\u00b5t \u2212 \u00b5t) (94) Y Tt \u03b2\u0308t(z\u0303t \u2212W (\u00b5t)) = (\u03a3 \u22121 t + Y T t \u03b2\u0308tYt )(\u00b5t \u2212 \u00b5t) (95)\n= \u03a3\u22121t (\u00b5t \u2212 \u00b5t) (96) \u21d2 \u00b5t \u2212 \u00b5t = \u03a3tY Tt \u03b2\u0308t(z\u0303t \u2212W (\u00b5t)), (97)\nwhere \u03a3tY T t \u03b2\u0308t = K\u0303t is the Kalman gain for non-Gaussian exponential family distributions. Via a standard transformation, the Kalman gain can be written in terms of covariances other than \u03a3t,\nK\u0303t = \u03a3tY T t (Yt\u03a3tY T t + \u03b2\u0308 \u22121 t ) \u22121 (98)\nand \u00b5t = \u00b5t + K\u0303t(z\u0303t \u2212W (\u00b5t)). (99)\nCovariance Update\nGiven a Gaussian posterior belief, \u2202 2J\n\u2202s2t is the inverse of the covariance of the agent\u2019s belief\n\u03a3\u22121t = \u22022J\n\u2202s2t (100)\n= \u2202\n\u2202x (\u03a3\n\u22121 t (st \u2212 \u00b5t)\u2212 Y Tt \u03b2\u0308t(z\u0303t \u2212W (st))) (101)\n= \u03a3 \u22121 t + Y T t \u03b2\u0308tYt (102)\n\u21d2 \u03a3t = (\u03a3\u22121t + Y Tt \u03b2\u0308tYt)\u22121. (103)"}, {"heading": "Appendix B. Rock Sample Observation Model", "text": "In the Rocksample problem, the Bernoulli observation function can be written as follows. Recall that rt is the agent\u2019s position at time t, RBi is the location of the information beacon associated with rock i, zi,t is a binary observation of the value of rock i at time t, and si,t is the true value of\nrock i at time t. Then if we let di,t =\u2016 rt \u2212RBi \u20162, then\np(zi,t|RVi,t = si,t, rt, RBi) (104) = (0.5 + (si,t \u2212 0.5)2\u2212di,t/D0)zi,t(0.5\u2212 (si,t \u2212 0.5)2\u2212di,t/D0)1\u2212zi,t (105)\n= exp(zi,t ln 0.5 + (si,t \u2212 0.5)2\u2212di,t/D0 0.5\u2212 (si,t \u2212 0.5)2\u2212di,t/D0 + ln(0.5\u2212 (si,t \u2212 0.5)2\u2212di,t/D0)) (106) = exp(zi,t\u03b8t \u2212 \u03b2t(\u03b8t)). (107)\nWe therefore have the parameters of the exponential family observation model\n\u03b8i,t = W (si,t, rt, RBi) (108)\n= ln 0.5 + (si,t \u2212 0.5)2\u2212di,t/D0 0.5\u2212 (si,t \u2212 0.5)2\u2212di,t/D0\n(109)\n\u03b2i,t = \u2212 ln(0.5\u2212 (si,t \u2212 0.5)2\u2212di,t/D0) (110) = ln(exp(\u03b8i,t) + 1). (111)\nWe can then derive the derivatives Yi,t and \u03b2\u0308i,t\nYt = \u2202W (si,t, rt, RBi)\n\u2202si,t\n\u2223 \u2223 \u2223 \u2223\nsi,t=m\u0302i,t\n(112)\n= \u2202\n\u2202si,t ln 0.5 + (si,t \u2212 0.5)2\u2212di,t/D0 0.5\u2212 (si,t \u2212 0.5)2\u2212di,t/D0\n\u2223 \u2223 \u2223 \u2223\nsi,t=m\u0302i,t\n(113)\n= 2\u2212di,t/D0 0.5 + (m\u0302i,t \u2212 0.5)2\u2212di,t/D0 \u00b7 1 0.5\u2212 (m\u0302i,t \u2212 0.5)2\u2212di,t/D0\n(114)\nwhere s\u0302i,t is the mean of the belief used for linearization. Since\n\u21d2 \u03b2i,t = ln(exp(\u03b8i,t) + 1), (115)\nthen\n\u03b2\u0308i,t = \u22022bi,t \u2202\u03b82i,t\n\u2223 \u2223 \u2223 \u2223\n\u03b8i,t=\u03b8\u0302i,t\n(116)\n= exp(\u03b8\u0302i,t) exp(\u03b8\u0302i,t) + 1 \u2212 exp(2\u03b8\u0302i,t) (exp(\u03b8\u0302i,t) + 1)2 . (117)"}, {"heading": "Appendix C. Target Tracking Observation Model", "text": "We adopt an observation model for target tracking where the target observation obtained has Gaussian noise and the noise covariance \u03a3zi is a function of the position of the helicopter and target i:\n\n zxi zyi z\u03b8i\n\n = f\n\n\n\n xi yi \u03b8i\n\n\n\n+N (0,\u03a3zi)\n\u03a3zi = g(xi, yi, xa, ya, ha),\nwhere xi, yi, \u03b8i is the pose of target i, while xa, ya, ha correspond to the agent\u2019s position and height in the environment. zxi, zyi, z\u03b8i is the observation of target i in image coordinates.\nThe covariance function itself is specified as\ng(xi, yi, xa, ya, ha) = C1ha + C2\n([\nxi yi\n] \u2212 [\nxa ya\n])([\nxi yi\n] \u2212 [\nxa ya\n])T\nha + C3,\nwhere C1, C2 and C3 are constants. In the generic belief update expression where the target position, si = [xi; yi; \u03b8i], is unknown,\nb\u2032(s\u2032i) \u221d p(z|s\u2032i, a,\u03a3zi) \u222b\nsi\np(s\u2032i|si, a)b(si)dsi s.t. \u222b\ns\u2032i\nb\u2032(s\u2032i)ds \u2032 i = 1,\nwhich means that each possible s\u2032i would be associated with a different covariance \u03a3zi. Performing this integration exactly would not keep the distribution Gaussian. Instead, we approximate the observation model by computing a single expected covariance \u03a3\u0302zi given the current belief distribution:\n\u03a3\u0302zi = E[\u03a3zi] =\n\u222b\nsi\nb(si)\u03a3zi(si)dsi.\nSubstituting in the exact expressions for the covariance function and the belief after an action is taken but before incorporating the measurement, ba(s) \u223c N (si|\u00b5,\u03a3), we get:\nE[\u03a3zi] =\n\u222b N ([\nxi yi\n] \u2223\n\u2223 \u2223 \u2223 \u00b5xy,\u03a3xy\n)\n(\nC1ha \u2212 C2 ha\n([\nxi yi\n] \u2212 [\nxa ya\n])([\nxi yi\n] \u2212 [\nxa ya\n])T\n+ C3\n)\ndxidyi.\nand by adding and subtracting \u00b5xy from the second term, reduces to\nE[\u03a3zi] = C1ha + C2 ha\n( \u00b5xy \u2212 [ xa ya ])( \u00b5xy \u2212 [ xa ya\n])T\n+ C2 ha \u03a3xy\nwhere \u00b5xy,\u03a3xy refer to the translational components of the agent\u2019s belief. In contrast to simpler observation models, our observation model has the desirable characteristic that if a target\u2019s location is very uncertain, namely its covariance \u03a3xy is very large, then even if the target\u2019s mean location is close to the helicopter\u2019s mean location, the expected benefit of receiving an observation (in terms of reducing the target\u2019s uncertainty) is still small. This property comes out automatically from the above derivation, since E[\u03a3zi] includes the current target covariance \u03a3xy. Figure 11 provides an illustration of the expected covariance for different locations of the target relative to the agent, agent heights, and target belief covariances."}], "references": [{"title": "Autonomous flight in unstructured and unknown indoor environments", "author": ["A. Bachrach", "R. He", "N. Roy"], "venue": "In Proceedings of the European Micro Aerial Vehicle (EMAV) Conference", "citeRegEx": "Bachrach et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Bachrach et al\\.", "year": 2009}, {"title": "Information and exponential families in statistical theory", "author": ["O. Barndorff-Nielsen"], "venue": "Bulletin of the American Mathematics Society,", "citeRegEx": "Barndorff.Nielsen,? \\Q1979\\E", "shortCiteRegEx": "Barndorff.Nielsen", "year": 1979}, {"title": "Receding horizon control of autonomous aerial vehicles", "author": ["J. Bellingham", "A. Richards", "J. How"], "venue": "In Proceedings of the American Control Conference (ACC),", "citeRegEx": "Bellingham et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Bellingham et al\\.", "year": 2002}, {"title": "Dynamic Programming and Optimal Control, vol. 1 & 2, 2nd", "author": ["D. Bertsekas"], "venue": "Athena Scientific", "citeRegEx": "Bertsekas,? \\Q2007\\E", "shortCiteRegEx": "Bertsekas", "year": 2007}, {"title": "Solving POMDPs: RTDP-Bel vs. point-based algorithms", "author": ["B. Bonet", "H. Geffner"], "venue": "In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "Bonet and Geffner,? \\Q2009\\E", "shortCiteRegEx": "Bonet and Geffner", "year": 2009}, {"title": "Parametric POMDPs for planning in continuous state spaces", "author": ["A. Brooks", "A. Makarenko", "S. Williams", "H. Durrant-Whyte"], "venue": "Robotics and Autonomous Systems,", "citeRegEx": "Brooks et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Brooks et al\\.", "year": 2006}, {"title": "Continuous-state POMDPs with hybrid dynamics", "author": ["E. Brunskill", "L. Kaelbling", "T. Lozano-Perez", "N. Roy"], "venue": "In Proceedings of the International Symposium on Artificial Intelligence and Mathematics (ISAIM)", "citeRegEx": "Brunskill et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Brunskill et al\\.", "year": 2008}, {"title": "Automated hierarchy discovery for planning in partially observable environments", "author": ["L. Charlin", "P. Poupart", "R. Shioda"], "venue": "In Advances in Neural Information Processing Systems (NIPS)", "citeRegEx": "Charlin et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Charlin et al\\.", "year": 2007}, {"title": "Time series analysis of non-Gaussian observations based on state space models from both classical and Bayesian perspectives", "author": ["J. Durbin", "S. Koopman"], "venue": "Journal of the Royal Statistical Society: Series B (Methodological),", "citeRegEx": "Durbin and Koopman,? \\Q2000\\E", "shortCiteRegEx": "Durbin and Koopman", "year": 2000}, {"title": "A Scalable Method for Solving High-Dimensional Continuous POMDPs Using Local Approximation", "author": ["T. Erez", "W. Smart"], "venue": "In Proceedings of the Conference on Uncertainty in Artificial Intelligence (UAI)", "citeRegEx": "Erez and Smart,? \\Q2010\\E", "shortCiteRegEx": "Erez and Smart", "year": 2010}, {"title": "Real-time hierarchical POMDPs for autonomous robot navigation", "author": ["A. Foka", "P. Trahanias"], "venue": "Robotics and Autonomous Systems,", "citeRegEx": "Foka and Trahanias,? \\Q2007\\E", "shortCiteRegEx": "Foka and Trahanias", "year": 2007}, {"title": "Synthesis of hierarchical finite-state controllers for POMDPs", "author": ["E. Hansen", "R. Zhou"], "venue": "In Proceedings of the Thirteenth International Conference on Automated Planning and Scheduling (ICAPS)", "citeRegEx": "Hansen and Zhou,? \\Q2003\\E", "shortCiteRegEx": "Hansen and Zhou", "year": 2003}, {"title": "On the design and use of a micro air vehicle to track and avoid adversaries", "author": ["R. He", "A. Bachrach", "M. Achtelik", "A. Geramifard", "D. Gurdan", "S. Prentice", "J. Stumpf", "N. Roy"], "venue": "International Journal of Robotics Research,", "citeRegEx": "He et al\\.,? \\Q2010\\E", "shortCiteRegEx": "He et al\\.", "year": 2010}, {"title": "PUMA: planning under uncertainty with macro-actions", "author": ["R. He", "E. Brunskill", "N. Roy"], "venue": "In Proceedings of the Association for the Advancement of Artificial Intelligence (AAAI)", "citeRegEx": "He et al\\.,? \\Q2010\\E", "shortCiteRegEx": "He et al\\.", "year": 2010}, {"title": "Planning in information space for a quadrotor helicopter in GPS-denied environments", "author": ["R. He", "S. Prentice", "N. Roy"], "venue": "In Proceedings of the International Conference of Robotics and Automation (ICRA),", "citeRegEx": "He et al\\.,? \\Q2008\\E", "shortCiteRegEx": "He et al\\.", "year": 2008}, {"title": "Probability inequalities for sums of bounded random variables", "author": ["W. Hoeffding"], "venue": "Journal of the American Statistical Association,", "citeRegEx": "Hoeffding,? \\Q1963\\E", "shortCiteRegEx": "Hoeffding", "year": 1963}, {"title": "Solving POMDPs with continuous or large discrete observation spaces", "author": ["J. Hoey", "P. Poupart"], "venue": "In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI)", "citeRegEx": "Hoey and Poupart,? \\Q2005\\E", "shortCiteRegEx": "Hoey and Poupart", "year": 2005}, {"title": "Task-driven tactile exploration", "author": ["K. Hsiao", "L. Kaelbling", "T. Lozano-P\u00e9rez"], "venue": "In Proceedings of Robotics: Science and Systems (RSS)", "citeRegEx": "Hsiao et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Hsiao et al\\.", "year": 2010}, {"title": "Robust belief-based execution of manipulation programs", "author": ["K. Hsiao", "T. Lozano-P\u00e9rez", "L. Kaelbling"], "venue": "In Proceedings of the Workshop on the Algorithmic Foundations of Robotics (WAFR)", "citeRegEx": "Hsiao et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Hsiao et al\\.", "year": 2008}, {"title": "A new approach to linear filtering and prediction problems", "author": ["R.E. Kalman"], "venue": "Transactions of the ASME\u2013Journal of Basic Engineering,", "citeRegEx": "Kalman,? \\Q1960\\E", "shortCiteRegEx": "Kalman", "year": 1960}, {"title": "A sparse sampling algorithm for near-optimal planning in large Markov decision processes", "author": ["M. Kearns", "Y. Mansour", "A. Ng"], "venue": "Machine Learning,", "citeRegEx": "Kearns et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Kearns et al\\.", "year": 2002}, {"title": "Near-optimal observation selection using submodular functions", "author": ["A. Krause", "C. Guestrin"], "venue": "In Proceedings of the National Conference on Artificial Intelligence (AAAI),", "citeRegEx": "Krause and Guestrin,? \\Q2007\\E", "shortCiteRegEx": "Krause and Guestrin", "year": 2007}, {"title": "Efficient methods of non-myopic sensor management for multitarget tracking", "author": ["C. Kreucher", "A. Hero III", "K. Kastella", "D. Chang"], "venue": "In Proceedings of the IEEE Conference on Decision and Control (CDC),", "citeRegEx": "Kreucher et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Kreucher et al\\.", "year": 2004}, {"title": "Motion planning under uncertainty for robotic tasks with long time horizons", "author": ["H. Kurniawati", "Y. Du", "D. Hsu", "W. Lee"], "venue": "In Proceedings of the International Symposium of Robotics Research (ISRR)", "citeRegEx": "Kurniawati et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Kurniawati et al\\.", "year": 2009}, {"title": "SARSOP: Efficient point-based POMDP planning by approximating optimally reachable belief spaces", "author": ["H. Kurniawati", "D. Hsu", "W. Lee"], "venue": "In Proceedings of the Robotics: Science and Systems (RSS)", "citeRegEx": "Kurniawati et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Kurniawati et al\\.", "year": 2008}, {"title": "Three dimensional receding horizon control for UAVs", "author": ["Y. Kuwata", "J. How"], "venue": "In Proceedings of the AIAA Guidance, Navigation, and Control Conference and Exhibit (GNC),", "citeRegEx": "Kuwata and How,? \\Q2004\\E", "shortCiteRegEx": "Kuwata and How", "year": 2004}, {"title": "Learning policies for partially observable environments: scaling up", "author": ["M. Littman", "A. Cassandra", "L. Kaelbling"], "venue": "In Proceedings of the Twlfth International Conference on Machine Learning (ICML),", "citeRegEx": "Littman et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Littman et al\\.", "year": 1995}, {"title": "Self-improving factory simulation using continuous-time average-reward reinforcement learning", "author": ["S. Mahadevan", "N. Marchalleck", "T. Das", "A. Gosavi"], "venue": "In Proceedings of the International Conference on Machine Learning (ICML),", "citeRegEx": "Mahadevan et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Mahadevan et al\\.", "year": 1997}, {"title": "Constrained model predictive control", "author": ["D.Q. Mayne", "J.B. Rawlings", "C.V. Rao", "P.O.M. Scokaert"], "venue": "Stability and optimality. Automatica,", "citeRegEx": "Mayne et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Mayne et al\\.", "year": 2000}, {"title": "Approximate planning for factored POMDPs using belief state simplification", "author": ["D. McAllester", "S. Singh"], "venue": "In Proceedings of the Conference on Uncertainty in Artificial Intelligence (UAI),", "citeRegEx": "McAllester and Singh,? \\Q1999\\E", "shortCiteRegEx": "McAllester and Singh", "year": 1999}, {"title": "acQuire-macros: An algorithm for automatically learning macro-actions", "author": ["A. McGovern"], "venue": "In NIPS 98 Workshop on Abstraction and Hierarchy in Reinforcement Learning", "citeRegEx": "McGovern,? \\Q1998\\E", "shortCiteRegEx": "McGovern", "year": 1998}, {"title": "Hybrid POMDP algorithms. In Workshop on MultiAgent Sequential Decision Making in Uncertain Domains (MSDM)", "author": ["S. Paquet", "B. Chaib-draa", "S. Ross"], "venue": null, "citeRegEx": "Paquet et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Paquet et al\\.", "year": 2006}, {"title": "An online POMDP algorithm for complex multiagent environments", "author": ["S. Paquet", "L. Tobin", "B. Chaib-draa"], "venue": "In Proceedings of the Conference on Autonomous agents and Multiagent systems (AAMAS),", "citeRegEx": "Paquet et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Paquet et al\\.", "year": 2005}, {"title": "Linear quadratic gaussianbased closed-loop control of type 1 diabetes", "author": ["S. Patek", "M. Breton", "Y. Chen", "C. Solomon", "B. Kovatchev"], "venue": "Journal of Diabetes Science and Technology,", "citeRegEx": "Patek et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Patek et al\\.", "year": 2007}, {"title": "Point-based value iteration: An anytime algorithm for POMDPs", "author": ["J. Pineau", "G. Gordon", "S. Thrun"], "venue": "In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "Pineau et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Pineau et al\\.", "year": 2003}, {"title": "Policy-contingent abstraction for robust robot control", "author": ["J. Pineau", "G. Gordon", "S. Thrun"], "venue": "In Proceedings of the Conference on Uncertainty in Artificial Intelligence (UAI)", "citeRegEx": "Pineau et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Pineau et al\\.", "year": 2003}, {"title": "Belief space planning assuming maximum likelihood observations", "author": ["R. Platt", "R. Tedrake", "T. Lozano-Perez", "L. Kaelbling"], "venue": "In Proceedings of Robotics: Science and Systems (RSS)", "citeRegEx": "Platt et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Platt et al\\.", "year": 2010}, {"title": "Point-based value iteration for continuous POMDPs", "author": ["J. Porta", "N. Vlassis", "M. Spaan", "P. Poupart"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Porta et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Porta et al\\.", "year": 2006}, {"title": "Exploiting Structure to Efficiently Solve Large Scale Partially Observable Markov Decision Processes", "author": ["P. Poupart"], "venue": "Ph.D. thesis,", "citeRegEx": "Poupart,? \\Q2005\\E", "shortCiteRegEx": "Poupart", "year": 2005}, {"title": "Experimental demonstrations of real-time MILP control", "author": ["A. Richards", "Y. Kuwata", "J. How"], "venue": "In Proceeding of the AIAA Guidance,", "citeRegEx": "Richards et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Richards et al\\.", "year": 2003}, {"title": "AEMS: An anytime online search algorithm for approximate policy refinement in large POMDPs", "author": ["S. Ross", "B. Chaib-draa"], "venue": "In Proceedings of the International Joint Conference in Artificial Intelligence (IJCAI),", "citeRegEx": "Ross and Chaib.draa,? \\Q2007\\E", "shortCiteRegEx": "Ross and Chaib.draa", "year": 2007}, {"title": "Online planning algorithms for POMDPs", "author": ["S. Ross", "J. Pineau", "S. Paquet", "B. Chaib-draa"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Ross et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Ross et al\\.", "year": 2008}, {"title": "Bayesian reinforcement learning in continuous POMDPs with application to robot navigation", "author": ["S. Ross", "B. Chaib-draa", "J. Pineau"], "venue": "In Proceedings of the International Conference on Robotics and Automation (ICRA). IEEE", "citeRegEx": "Ross et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Ross et al\\.", "year": 2008}, {"title": "A POMDP framework for coordinated guidance of autonomous UAVs for multitarget tracking", "author": ["A. Scott", "Z. Harris", "E. Chong"], "venue": "EURASIP Journal on Advances in Signal Processing,", "citeRegEx": "Scott et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Scott et al\\.", "year": 2009}, {"title": "The optimal control of partially observable Markov processes over a finite horizon", "author": ["R. Smallwood", "E. Sondik"], "venue": "Operations Research,", "citeRegEx": "Smallwood and Sondik,? \\Q1973\\E", "shortCiteRegEx": "Smallwood and Sondik", "year": 1973}, {"title": "Point-based POMDP algorithms: Improved analysis and implementation", "author": ["T. Smith", "R. Simmons"], "venue": "In Proceedings of the Conference on Uncertainty in Artificial Intelligence (UAI)", "citeRegEx": "Smith and Simmons,? \\Q2005\\E", "shortCiteRegEx": "Smith and Simmons", "year": 2005}, {"title": "Learning options in reinforcement learning", "author": ["M. Stolle", "D. Precup"], "venue": "Lecture Notes in Computer Science,", "citeRegEx": "Stolle and Precup,? \\Q2002\\E", "shortCiteRegEx": "Stolle and Precup", "year": 2002}, {"title": "Between MDPs and semi-MDPs: A framework for temporal abstraction in reinforcement learning", "author": ["R. Sutton", "D. Precup", "S. Singh"], "venue": "Artificial Intelligence,", "citeRegEx": "Sutton et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Sutton et al\\.", "year": 1999}, {"title": "Approximate planning in POMDPs with macro-actions", "author": ["G. Theocharous", "L. Kaelbling"], "venue": "In Advances in Neural Processing Information Systems (NIPS)", "citeRegEx": "Theocharous and Kaelbling,? \\Q2003\\E", "shortCiteRegEx": "Theocharous and Kaelbling", "year": 2003}, {"title": "On the central moments of the multidimensional Gaussian distribution", "author": ["K. Triantafyllopoulos"], "venue": "The Mathematical Scientist,", "citeRegEx": "Triantafyllopoulos,? \\Q2003\\E", "shortCiteRegEx": "Triantafyllopoulos", "year": 2003}, {"title": "Dynamic generalized linear models and Bayesian forecasting", "author": ["M. West", "P. Harrison", "H. Migon"], "venue": "Journal of the American Statistical Association,", "citeRegEx": "West et al\\.,? \\Q1985\\E", "shortCiteRegEx": "West et al\\.", "year": 1985}, {"title": "Open-loop plans in multi-robot POMDPs", "author": ["C. Yu", "J. Chuang", "B. Gerkey", "G. Gordon", "A. Ng"], "venue": null, "citeRegEx": "Yu et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Yu et al\\.", "year": 2005}], "referenceMentions": [{"referenceID": 38, "context": "Symbolic Perseus (Poupart, 2005) was used to find a good solution to a hand-washing domain with 11 state variables, but each variable took on a relatively small number of values (at most 10 values).", "startOffset": 17, "endOffset": 32}, {"referenceID": 38, "context": "Symbolic Perseus (Poupart, 2005) was used to find a good solution to a hand-washing domain with 11 state variables, but each variable took on a relatively small number of values (at most 10 values). Recently online forward search approaches have been used to achieve encouraging performance on some large POMDPs, such as the work by Ross, Chaib-draa and Pineau (2008b) and Paquet, Tobin and Chaibdraa (2005).", "startOffset": 18, "endOffset": 369}, {"referenceID": 38, "context": "Symbolic Perseus (Poupart, 2005) was used to find a good solution to a hand-washing domain with 11 state variables, but each variable took on a relatively small number of values (at most 10 values). Recently online forward search approaches have been used to achieve encouraging performance on some large POMDPs, such as the work by Ross, Chaib-draa and Pineau (2008b) and Paquet, Tobin and Chaibdraa (2005). However, the cost of performing a generic forward search scales exponentially with the search horizon.", "startOffset": 18, "endOffset": 408}, {"referenceID": 44, "context": "Many POMDP solvers, such as those by Smith and Simmons (2005), Porta, Vlassis, Spaan, and Poupart (2006) and Kurniawati, Hsu, and Lee (2008), perform POMDP planning offline by calculating a value function over the belief space V : b \u2192 R.", "startOffset": 37, "endOffset": 62}, {"referenceID": 38, "context": "Many POMDP solvers, such as those by Smith and Simmons (2005), Porta, Vlassis, Spaan, and Poupart (2006) and Kurniawati, Hsu, and Lee (2008), perform POMDP planning offline by calculating a value function over the belief space V : b \u2192 R.", "startOffset": 90, "endOffset": 105}, {"referenceID": 38, "context": "Many POMDP solvers, such as those by Smith and Simmons (2005), Porta, Vlassis, Spaan, and Poupart (2006) and Kurniawati, Hsu, and Lee (2008), perform POMDP planning offline by calculating a value function over the belief space V : b \u2192 R.", "startOffset": 90, "endOffset": 141}, {"referenceID": 30, "context": "Borrowing the notion of sub-goal states from the fully-observable planning literature (McGovern, 1998; Stolle & Precup, 2002), PUMA uses a heuristic that macro-actions can be designed to take the agent, under the fully-observable model, from a possible start state under the current belief to a sub-goal state.", "startOffset": 86, "endOffset": 125}, {"referenceID": 19, "context": "When the state-transition and observation models are normally distributed and linear functions of the state, the Kalman filter (1960) provides a closed-form solution for the posterior belief over states, N (\u03bct,\u03a3t) given a prior belief over states, N (\u03bct\u22121,\u03a3t\u22121), \u03bct = A\u03bct\u22121 +Bat \u03bct = \u03bct +Kt(zt \u2212 C\u03bct) (7) \u03a3t = A\u03a3t\u22121A T + P \u03a3t = (C QC +\u03a3 \u22121 t ) , (8) where N (f, F ) is a D-dimensional Gaussian with mean f and covariance matrix F , Kt = \u03a3tC T (C\u03a3tC T +Q)\u22121 is the Kalman gain and \u03bct and \u03a3t are the mean and covariance after an action is taken but before incorporating the measurement.", "startOffset": 113, "endOffset": 134}, {"referenceID": 1, "context": "In this section we briefly describe an extension to the PBD algorithm to handle a wider class of observation models, namely parametric models that are members of the exponential family of distributions (Barndorff-Nielsen, 1979).", "startOffset": 202, "endOffset": 227}, {"referenceID": 1, "context": "In this section we briefly describe an extension to the PBD algorithm to handle a wider class of observation models, namely parametric models that are members of the exponential family of distributions (Barndorff-Nielsen, 1979). For non-linear transition models, there exist techniques such as the extended Kalman filter to approximate the posterior with a Gaussian; however, we do not formally consider incorporating such techniques into our PBD algorithm here. We choose to consider exponential family observation models since this family includes a wide array of distributions, such as Gaussian, Bernoulli, and Poisson distributions, and has certain appealing mathematical properties. In particular, we leverage work by West, Harrison and Migon (1985) who constructed linear-Gaussian models that approximate the non-Gaussian exponential family observation model in the neighborhood of the conditional mode, st|zt.", "startOffset": 203, "endOffset": 755}, {"referenceID": 50, "context": "The first two moments of the distribution (West et al., 1985) are", "startOffset": 42, "endOffset": 61}, {"referenceID": 29, "context": "McAllester and Singh (1999) extended these ideas to POMDPs, showing that similar bounds on the calculated values of a POMDP belief state could be computed if a sufficient number of observations were sampled, and forward search was computed out to a sufficiently large horizon.", "startOffset": 0, "endOffset": 28}, {"referenceID": 49, "context": "From the work by Triantafyllopoulos (2003) we know that if Nr is odd, the central Nr-th moments are zero, and if Nr is even (Nr = 2k) any Nr-th", "startOffset": 17, "endOffset": 43}, {"referenceID": 15, "context": "The proof of this is a simple application of Hoeffding\u2019s inequality (1963). If Ns is set such that the estimated reward of each primitive action is \u01eb L close to the true expected primitive action reward with probability at least 1\u2212 \u03b4 \u01eb , then the triangle inequality and union bound guarantee that the expected reward of the entire length-L macro-action is \u01eb-close to the true expected reward for the macro-action with probability at least 1 \u2212 \u03b4.", "startOffset": 45, "endOffset": 75}, {"referenceID": 24, "context": "Specifically, we modified the state-of-the-art POMDP planner SARSOP (Kurniawati et al., 2008) algorithm from the Approximate POMDP Planning (APPL) Toolkit and incorporated macro-actions to guide the sampling of belief points that are used for the point-based value backups.", "startOffset": 68, "endOffset": 93}, {"referenceID": 23, "context": "This implementation is also a modified version of the MiGS (Kurniawati et al., 2009) by the same authors.", "startOffset": 59, "endOffset": 84}, {"referenceID": 45, "context": "2 Rocksample The scientific exploration ROCKSAMPLE problem is a benchmark POMDP problem proposed by Smith and Simmons (2005), and subsequently extended to the FieldVisionRockSample (FVRS)", "startOffset": 100, "endOffset": 125}, {"referenceID": 41, "context": "For a formal discussion of the differences between the offline point-based and online forward search POMDP algorithms, we refer the reader to the survey paper by Ross et al. (2008a). 17.", "startOffset": 162, "endOffset": 182}, {"referenceID": 40, "context": "problem by Ross and Chaib-draa (2007). Initial experiments in these domains revealed that searching only to a shallow depth was sufficient to obtain good policies.", "startOffset": 11, "endOffset": 38}, {"referenceID": 24, "context": "As the ROCKSAMPLE family of problems originates from the POMDP literature, we compared our macro-action algorithms to existing state-of-the-art POMDP solvers: the fast upper-bound of QMDP (Littman, Cassandra, & Kaelbling, 1995), the point-based offline value-iteration techniques HSVI2 (Smith & Simmons, 2005) and SARSOP (Kurniawati et al., 2008), as well as RTBSS (Paquet, Chaib-draa, & Ross, 2006), an online, factored, forward search algorithm.", "startOffset": 321, "endOffset": 346}, {"referenceID": 24, "context": "While it is beyond the scope of this paper to provide a comprehensive survey of POMDP techniques, pointbased methods such as HSVI2 (Smith & Simmons, 2005) and SARSOP (Kurniawati et al., 2008) are often considered state-of-the-art offline methods, leveraging the piece-wise and convex aspects of the value function to perform value updates at selected beliefs.", "startOffset": 166, "endOffset": 191}, {"referenceID": 37, "context": "These approaches assume a discretestate representation, but offline approaches that use parametric representations have been proposed for continuous-valued state spaces (Brooks, Makarenko, Williams, & Durrant-Whyte, 2006; Brunskill, Kaelbling, Lozano-Perez, & Roy, 2008; Porta et al., 2006).", "startOffset": 169, "endOffset": 290}, {"referenceID": 47, "context": "Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997).", "startOffset": 144, "endOffset": 165}, {"referenceID": 12, "context": "Hoey and Poupart (2005) have also addressed continuous observation spaces by finding lossless partitions of the observation space.", "startOffset": 0, "endOffset": 24}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains.", "startOffset": 15, "endOffset": 40}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al.", "startOffset": 15, "endOffset": 517}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al.", "startOffset": 15, "endOffset": 1153}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al.", "startOffset": 15, "endOffset": 1177}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al.", "startOffset": 15, "endOffset": 1214}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al.", "startOffset": 15, "endOffset": 1241}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al.", "startOffset": 15, "endOffset": 1275}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al. (2009). Pineau et al.", "startOffset": 15, "endOffset": 1304}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al. (2009). Pineau et al.\u2019s PolCA+ (2003b) algorithm uses a hierarchical approach to solving discrete-state POMDPs.", "startOffset": 15, "endOffset": 1336}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al. (2009). Pineau et al.\u2019s PolCA+ (2003b) algorithm uses a hierarchical approach to solving discrete-state POMDPs. Similarly, Hansen and Zhou (2003) propose hierarchical controllers that exploit a user-specified hierarchy for planning, while Charlin et al.", "startOffset": 15, "endOffset": 1443}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al. (2009). Pineau et al.\u2019s PolCA+ (2003b) algorithm uses a hierarchical approach to solving discrete-state POMDPs. Similarly, Hansen and Zhou (2003) propose hierarchical controllers that exploit a user-specified hierarchy for planning, while Charlin et al. (2007) provide a method for automatically discovering a problem hierarchy.", "startOffset": 15, "endOffset": 1558}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al. (2009). Pineau et al.\u2019s PolCA+ (2003b) algorithm uses a hierarchical approach to solving discrete-state POMDPs. Similarly, Hansen and Zhou (2003) propose hierarchical controllers that exploit a user-specified hierarchy for planning, while Charlin et al. (2007) provide a method for automatically discovering a problem hierarchy. Yu, Chuang, Gerkey, Gordon and Ng (2005) provide an optimal algorithm for planning if no observations were available.", "startOffset": 15, "endOffset": 1667}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al. (2009). Pineau et al.\u2019s PolCA+ (2003b) algorithm uses a hierarchical approach to solving discrete-state POMDPs. Similarly, Hansen and Zhou (2003) propose hierarchical controllers that exploit a user-specified hierarchy for planning, while Charlin et al. (2007) provide a method for automatically discovering a problem hierarchy. Yu, Chuang, Gerkey, Gordon and Ng (2005) provide an optimal algorithm for planning if no observations were available. Foka and Trahanias\u2019s (2007) solution involves building a hierarchy of nested representations and solutions.", "startOffset": 15, "endOffset": 1772}, {"referenceID": 4, "context": "Recent work by Bonet and Geffner (2009) suggests that alternate point-based approaches that use tabular representations of the value function may also be competitive with prior point-based approaches which used \u03b1-vector representations, and this alternate representation may be useful for continuous domains. The ideas in this paper are more closely related to the body of online, forward search POMDP techniques that only compute an action for the current belief, which were recently surveyed by Ross et al. (2008a). Macro-actions have been considered in depth within the fully observable Markov decision process community, and are typically known as \u201coptions\u201d (Sutton et al., 1999), or posed as part of a semi-Markov decision process (Mahadevan, Marchalleck, Das, & Gosavi, 1997). These prior formalisms for temporally-extended actions include closed-loop policies that persist until a termination state is achieved. It would be interesting to explore in the future how these richer notions of macro-actions could be incorporated into our approach. Several offline POMDP approaches use macro-actions such as those of Pineau, Gordon, and Thrun (2003b), Hansen and Zhou (2003), Charlin, Poupart, and Shioda (2007), Foka and Trahanias (2007), Theocharous and Kaelbling (2003) and Kurniawati et al. (2009). Pineau et al.\u2019s PolCA+ (2003b) algorithm uses a hierarchical approach to solving discrete-state POMDPs. Similarly, Hansen and Zhou (2003) propose hierarchical controllers that exploit a user-specified hierarchy for planning, while Charlin et al. (2007) provide a method for automatically discovering a problem hierarchy. Yu, Chuang, Gerkey, Gordon and Ng (2005) provide an optimal algorithm for planning if no observations were available. Foka and Trahanias\u2019s (2007) solution involves building a hierarchy of nested representations and solutions. Their focus is on discrete-state problems, particularly navigation applications. Theocharous and Kaelbling\u2019s (2003) discrete-state reinforcement learning approach samples observation trajectories and solves for the expected reward of a discrete", "startOffset": 15, "endOffset": 1968}, {"referenceID": 21, "context": "Kurniawati et al. (2009) recently used macroactions to guide the sampling of belief points for use in an offline point-based POMDP solver.", "startOffset": 0, "endOffset": 25}, {"referenceID": 21, "context": "Kurniawati et al. (2009) recently used macroactions to guide the sampling of belief points for use in an offline point-based POMDP solver. However, these prior macro-action POMDP approaches compute a value function off-line, are not aimed at scaling to very large domains, and will struggle in the environments considered in this paper. An exception to this is the work by Hsiao and colleagues (2008, 2010) who used a form of macro-actions for those robot manipulation tasks that involve a large state space. The focus of their work is on robust manipulation under uncertainty, and their work only considers a very short horizon of action trajectories. Except for the work by Kurniawati et al. (2009), all these macroaction POMDP approaches, like our PBD algorithm, assume the macro-actions are provided by a domain expert.", "startOffset": 0, "endOffset": 701}, {"referenceID": 21, "context": "Kurniawati et al. (2009) recently used macroactions to guide the sampling of belief points for use in an offline point-based POMDP solver. However, these prior macro-action POMDP approaches compute a value function off-line, are not aimed at scaling to very large domains, and will struggle in the environments considered in this paper. An exception to this is the work by Hsiao and colleagues (2008, 2010) who used a form of macro-actions for those robot manipulation tasks that involve a large state space. The focus of their work is on robust manipulation under uncertainty, and their work only considers a very short horizon of action trajectories. Except for the work by Kurniawati et al. (2009), all these macroaction POMDP approaches, like our PBD algorithm, assume the macro-actions are provided by a domain expert. In the sensor resource management domain, planning under uncertainty techniques are used in the context of planning sensor placements to track single or multiple targets. Existing algorithms often adopt a myopic, or greedy strategy when it comes to planning (Krause & Guestrin, 2007), but notable exceptions include the work by Scott et al. (2009) and Kreucher, Hero III, Kastella, and Chang (2004).", "startOffset": 0, "endOffset": 1172}, {"referenceID": 21, "context": "Kurniawati et al. (2009) recently used macroactions to guide the sampling of belief points for use in an offline point-based POMDP solver. However, these prior macro-action POMDP approaches compute a value function off-line, are not aimed at scaling to very large domains, and will struggle in the environments considered in this paper. An exception to this is the work by Hsiao and colleagues (2008, 2010) who used a form of macro-actions for those robot manipulation tasks that involve a large state space. The focus of their work is on robust manipulation under uncertainty, and their work only considers a very short horizon of action trajectories. Except for the work by Kurniawati et al. (2009), all these macroaction POMDP approaches, like our PBD algorithm, assume the macro-actions are provided by a domain expert. In the sensor resource management domain, planning under uncertainty techniques are used in the context of planning sensor placements to track single or multiple targets. Existing algorithms often adopt a myopic, or greedy strategy when it comes to planning (Krause & Guestrin, 2007), but notable exceptions include the work by Scott et al. (2009) and Kreucher, Hero III, Kastella, and Chang (2004). Kreucher et al.", "startOffset": 0, "endOffset": 1223}, {"referenceID": 21, "context": "Kreucher et al. describe a multi-target tracking problem, where non-myopic sensor management is necessary for multi-target tracking. The authors use a particle filter approach to represent the agent\u2019s belief of the target\u2019s location, and seek to find paths that will result in the greatest KL divergence in density before and after the measurement. To look ahead more than one action, this algorithm uses Monte Carlo sampling to generate possible observation outcomes. They also provide an information-directed path searching scheme to reduce the complexity of the Monte Carlo sampling, as well as value heuristics that will help direct the search. It is possible that some of their insights could be used in combination with our macro-action formulation to strengthen both approaches. In the experimental section we compared our approach to the work by Scott et al. (2009), who directly formulated target tracking as a POMDP, and proposed the Nominal Belief Optimization (NBO) algorithm that computes the most likely belief after an action for deeper forward search.", "startOffset": 0, "endOffset": 874}, {"referenceID": 21, "context": "Kreucher et al. describe a multi-target tracking problem, where non-myopic sensor management is necessary for multi-target tracking. The authors use a particle filter approach to represent the agent\u2019s belief of the target\u2019s location, and seek to find paths that will result in the greatest KL divergence in density before and after the measurement. To look ahead more than one action, this algorithm uses Monte Carlo sampling to generate possible observation outcomes. They also provide an information-directed path searching scheme to reduce the complexity of the Monte Carlo sampling, as well as value heuristics that will help direct the search. It is possible that some of their insights could be used in combination with our macro-action formulation to strengthen both approaches. In the experimental section we compared our approach to the work by Scott et al. (2009), who directly formulated target tracking as a POMDP, and proposed the Nominal Belief Optimization (NBO) algorithm that computes the most likely belief after an action for deeper forward search. In contrast, our algorithm explicitly computes the entire set of possible posterior beliefs after a macro-action. Recently two groups (Erez & Smart, 2010; Platt, Tedrake, LozanoPerez, & Kaelbling, 2010) have independently proposed an approach that lies in the middle of this spectrum: beliefs are updated by assuming that the most likely observation is received, but the variance is increased. In contrast, our approach represents that each resulting belief may be fairly peaked, but the mean of the beliefs may be spread out. This more complete representation may be advantageous if there are sharp changes in the reward function. As stated in the introduction, the finite-horizon forward search, act, and re-plan strategy PBD follows can be seen as an instance of the Model Predictive Control/Receding Horizon Control (MPC/ RHC) framework from the controls community. Examples of MPC and RHC include the work by Kuwata and How (2004), Bellingham, Richards, and How (2002), and Richards, Kuwata, and How (2003).", "startOffset": 0, "endOffset": 2004}, {"referenceID": 21, "context": "Kreucher et al. describe a multi-target tracking problem, where non-myopic sensor management is necessary for multi-target tracking. The authors use a particle filter approach to represent the agent\u2019s belief of the target\u2019s location, and seek to find paths that will result in the greatest KL divergence in density before and after the measurement. To look ahead more than one action, this algorithm uses Monte Carlo sampling to generate possible observation outcomes. They also provide an information-directed path searching scheme to reduce the complexity of the Monte Carlo sampling, as well as value heuristics that will help direct the search. It is possible that some of their insights could be used in combination with our macro-action formulation to strengthen both approaches. In the experimental section we compared our approach to the work by Scott et al. (2009), who directly formulated target tracking as a POMDP, and proposed the Nominal Belief Optimization (NBO) algorithm that computes the most likely belief after an action for deeper forward search. In contrast, our algorithm explicitly computes the entire set of possible posterior beliefs after a macro-action. Recently two groups (Erez & Smart, 2010; Platt, Tedrake, LozanoPerez, & Kaelbling, 2010) have independently proposed an approach that lies in the middle of this spectrum: beliefs are updated by assuming that the most likely observation is received, but the variance is increased. In contrast, our approach represents that each resulting belief may be fairly peaked, but the mean of the beliefs may be spread out. This more complete representation may be advantageous if there are sharp changes in the reward function. As stated in the introduction, the finite-horizon forward search, act, and re-plan strategy PBD follows can be seen as an instance of the Model Predictive Control/Receding Horizon Control (MPC/ RHC) framework from the controls community. Examples of MPC and RHC include the work by Kuwata and How (2004), Bellingham, Richards, and How (2002), and Richards, Kuwata, and How (2003).", "startOffset": 0, "endOffset": 2042}, {"referenceID": 21, "context": "Kreucher et al. describe a multi-target tracking problem, where non-myopic sensor management is necessary for multi-target tracking. The authors use a particle filter approach to represent the agent\u2019s belief of the target\u2019s location, and seek to find paths that will result in the greatest KL divergence in density before and after the measurement. To look ahead more than one action, this algorithm uses Monte Carlo sampling to generate possible observation outcomes. They also provide an information-directed path searching scheme to reduce the complexity of the Monte Carlo sampling, as well as value heuristics that will help direct the search. It is possible that some of their insights could be used in combination with our macro-action formulation to strengthen both approaches. In the experimental section we compared our approach to the work by Scott et al. (2009), who directly formulated target tracking as a POMDP, and proposed the Nominal Belief Optimization (NBO) algorithm that computes the most likely belief after an action for deeper forward search. In contrast, our algorithm explicitly computes the entire set of possible posterior beliefs after a macro-action. Recently two groups (Erez & Smart, 2010; Platt, Tedrake, LozanoPerez, & Kaelbling, 2010) have independently proposed an approach that lies in the middle of this spectrum: beliefs are updated by assuming that the most likely observation is received, but the variance is increased. In contrast, our approach represents that each resulting belief may be fairly peaked, but the mean of the beliefs may be spread out. This more complete representation may be advantageous if there are sharp changes in the reward function. As stated in the introduction, the finite-horizon forward search, act, and re-plan strategy PBD follows can be seen as an instance of the Model Predictive Control/Receding Horizon Control (MPC/ RHC) framework from the controls community. Examples of MPC and RHC include the work by Kuwata and How (2004), Bellingham, Richards, and How (2002), and Richards, Kuwata, and How (2003). A special case of RHC control is Certainty Equivalence Control, or CEC (see Bertsekas, 2007 for an overview).", "startOffset": 0, "endOffset": 2080}], "year": 2011, "abstractText": "Deciding how to act in partially observable environments remains an active area of research. Identifying good sequences of decisions is particularly challenging when good control performance requires planning multiple steps into the future in domains with many states. Towards addressing this challenge, we present an online, forward-search algorithm called the Posterior Belief Distribution (PBD). PBD leverages a novel method for calculating the posterior distribution over beliefs that result after a sequence of actions is taken, given the set of observation sequences that could be received during this process. This method allows us to efficiently evaluate the expected reward of a sequence of primitive actions, which we refer to as macro-actions. We present a formal analysis of our approach, and examine its performance on two very large simulation experiments: scientific exploration and a target monitoring domain. We also demonstrate our algorithm being used to control a real robotic helicopter in a target monitoring experiment, which suggests that our approach has practical potential for planning in real-world, large partially observable domains where a multi-step lookahead is required to achieve good performance.", "creator": null}}}