{"id": "1402.2224", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-Feb-2014", "title": "Characterizing the Sample Complexity of Private Learners", "abstract": "In 2008, Kasiviswanathan et al. defined private learning as a combination of PAC learning and differential privacy. Informally, a private learner is applied to a collection of labeled individual information and outputs a hypothesis while preserving the privacy of each individual. This model is useful for measuring a person's privacy in this respect.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Mon, 10 Feb 2014 17:45:00 GMT  (26kb)", "http://arxiv.org/abs/1402.2224v1", null]], "reviews": [], "SUBJECTS": "cs.CR cs.LG", "authors": ["amos beimel", "kobbi nissim", "uri stemmer"], "accepted": false, "id": "1402.2224"}, "pdf": {"name": "1402.2224.pdf", "metadata": {"source": "CRF", "title": "Characterizing the Sample Complexity of Private Learners", "authors": ["Amos Beimel", "Kobbi Nissim Uri Stemmer"], "emails": ["beimel@cs.bgu.ac.il", "kobbi@cs.bgu.ac.il", "stemmer@cs.bgu.ac.il"], "sections": [{"heading": null, "text": "ar X\niv :1\n40 2.\n22 24\nv1 [\ncs .C\nR ]\n1 0\nFe b\nWe give a combinatorial characterization of the sample size sufficient and necessary to privately learn a class of concepts. This characterization is analogous to the well known characterization of the sample complexity of non-private learning in terms of the VC dimension of the concept class. We introduce the notion of probabilistic representation of a concept class, and our new complexity measure RepDim corresponds to the size of the smallest probabilistic representation of the concept class.\nWe show that any private learning algorithm for a concept class C with sample complexity m implies RepDim(C) = O(m), and that there exists a private learning algorithm with sample complexity m = O(RepDim(C)). We further demonstrate that a similar characterization holds for the database size needed for privately computing a large class of optimization problems and also for the well studied problem of private data release.\n\u2217A preliminary version of this paper appeared in [4]. Research partially supported by the Israel Science Foundation (grants No. 938/09 and 2761/12) and by the Frankel Center for Computer Science.\nContents"}, {"heading": "1 Introduction 1", "text": "1.1 Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1.2 Our Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2"}, {"heading": "2 Preliminaries 4", "text": "2.1 Preliminaries from Privacy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 2.2 Preliminaries from Learning Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 2.3 Private Learning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 2.4 The Exponential Mechanism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 2.5 Concentration Bounds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6"}, {"heading": "3 The Sample Complexity of Private Learners 6", "text": "3.1 Equivalence of (\u03b1, \u03b2)-Probabilistic Representation and Private Learning . . . . . . . 7"}, {"heading": "4 From a Probabilistic Representation to a Deterministic Representation 14", "text": ""}, {"heading": "5 Probabilistic Representation for Privately Solving Optimization Problems 17", "text": "5.1 Exact 3SAT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21"}, {"heading": "6 Extensions 21", "text": "6.1 (\u01eb, \u03b4)-Differential Privacy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 6.2 Probabilistic Representation Using a Hypothesis Class . . . . . . . . . . . . . . . . . 22\n7 A Probabilistic Representation for Points 24"}, {"heading": "1 Introduction", "text": "Motivated by the observation that learning generalizes many of the analyses applied to large collections of data, Kasiviswanathan el al. [17] defined in 2008 private learning as a combination of probably approximately correct (PAC) learning [20] and differential privacy [12]. A PAC learner is given a collection of labeled examples (sampled according to an unknown probability distribution and labeled according to an unknown concept) and generalizes the labeled examples into a hypothesis h that should predict with high accuracy the labeling of fresh examples taken from the same unknown distribution and labeled with the same unknown concept.\nThe privacy requirement is that the choice of h preserves differential privacy of sample points. Intuitively this means that this choice should not be significantly affected by any particular sample. Differential privacy is increasingly accepted as a standard for rigorous privacy and recent research has shown that differentially private variants exists to many analyses. We refer the reader to surveys of Dwork [10, 11].\nThe sample complexity required for learning a concept class C determines the amount of labeled data needed for learning a concept c \u2208 C. It is well known that the sample complexity of learning a concept class C (non-privately) is proportional to a complexity measure of the class C knowns as the VC-dimension [21, 7, 14]. Kasiviswanathan et al. [17] proved that a private learner exists for every finite concept class. The proof is via a generic construction that exhibits sample complexity logarithmic in the size of the concept class. The VC-dimension of a concept class is bounded by this quantity (and significantly lower for some interesting concept classes), and hence the results of [17] left open the possibility that the sample complexity of private learning may be significantly higher than that of non-private learning.\nIn analogy to the characterization of the sample complexity of (non-private) PAC learners via the VC-dimension, we give a combinatorial characterization of the sample size sufficient and necessary for private PAC learners. Towards obtaining this characterization, we introduce the notion of probabilistic representation of a concept class. We note that our characterization, as the VC-dimension characterization, ignores the computation required by the learner. Some of our algorithms are, however, computationally efficient."}, {"heading": "1.1 Related Work", "text": "We start with a short description of prior work on the sample complexity of private learning. To simplify the exposition, we ignore dependencies on the error, confidence and privacy parameters by considering them constants for this and the following section. The dependency on these parameters would be made explicit in the later sections of the paper.\nRecall that the sample complexity of non-private learners for a class of functions C is proportional to the VC-dimension of the class [7, 14] \u2013 a combinatorial measure of the class that is equal to the size of the largest set of inputs that is shattered by the class. This characterization, as ours, ignores the computation required by the learner.\nKasiviswanathan et al. [17] showed, informally, that every finite concept class C can be learned privately (ignoring computational complexity). Their construction is based on the exponential mechanism of McSherry and Talwar [18], and the O(ln |C|) bound on sample complexity results from the union bound argument used in the analysis of the exponential mechanism. Computationally efficient learners were shown to exist by Blum et al. [5] for all concept classes that can be efficiently learned in the statistical queries model. Kasiviswanathan et al. [17] showed an example of a concept\nclass \u2013 the class of parity functions \u2013 that is not learnable in the statistical queries model but can be learned privately and efficiently. These positive results suggest that many \u201cnatural\u201d computational learning tasks that are efficiently learned non-privately can be learned privately and efficiently.\nBeimel et al. [3] studied the sample complexity of private learning. They examined the concept class of point functions POINTd where each concept evaluates to one on exactly one point of the domain and to zero otherwise. Note that the VC-dimension of POINTd is one. Beimel et al. proved lower bounds on the sample complexity of properly and privately learning the class POINTd (and related classes), implying that the VC dimension of a class does not characterize the sample complexity of private proper learning. On the other hand, they observed that the sample complexity can be improved for improper private learners whenever there exists a smaller hypothesis class H that represents C in the sense that for every concept c \u2208 C and for every distribution on the examples, there is a hypothesis h \u2208 H that is close to c. Using the exponential mechanism to choose among the hypotheses in H instead of C, the sample complexity is reduced to ln |H| (this is why the size of the representation H is defined to be ln |H|). For some classes this can dramatically improve the sample complexity, e.g., for the class POINTd (defined in Example 3.2), the sample complexity is improved from O(ln | POINTd |) = O(d) to O(ln d). Using other techniques, Beimel et al. showed that the sample complexity of learning POINTd can be reduced even further to O(1), hence showing the largest possible gap between proper and non proper private learning. Such a gap does not exists for non-private learning.\nChaudhuri and Hsu [8] studied the sample complexity needed for private learning infinite concept classes when the data is drawn from a continuous distribution. They showed that under these settings there exists a simple concept class for which any proper learner that uses a finite number of examples and guarantees differential privacy fails to satisfy accuracy guarantee for at least one data distribution. This implies that the results of Kasiviswanathan et al. [17] do not extend to infinite hypothesis classes. Interestingly, our results imply an improper private algorithm for an infinite extension of the class POINT (that is, a class over the natural numbers of all boolean functions that return 1 on exactly one number).\nChaudhuri and Hsu [8] also study learning algorithms that are only required to protect the privacy of the labels (and do not necessarily protect the privacy of the examples themselves). They prove upper bounds and lower bounds on the sample complexity of such algorithms. In particular, they prove a lower bound on the sample complexity using the doubling dimension of the disagreement metric of the hypothesis class with respect to the unlabeled data distribution. This result does not imply our characterization as the privacy requirement in protecting the labels is much weaker than protecting the sample point and the label.\nA line of research (started in [19]) that is very relevant to our paper is boosting learning algorithms, that is, taking learning algorithms that have a big classification error and producing a learning algorithm with small error. Dwork et al. [13] show how to privately boost accuracy, that is, given a private learning algorithms that have a big classification error, they produce a private learning algorithm with small error. In Lemma 3.18, we show how to boost the accuracy \u03b1 for probabilistic representations. This gives an alternative private boosting, whose proof is simpler. However, as it uses the exponential mechanism, it is (generally) not computationally efficient."}, {"heading": "1.2 Our Results", "text": "Beimel et al. [3] showed how to use a representation of a class to privately learn it. We make an additional step in improving the sample complexity by considering a probabilistic representation\nof a concept class C. Instead of one collection H representing C, we consider a list of collections H1, . . . ,Hr such that for every c \u2208 C and every distribution on the examples, if we sample a collection Hi from the list, then with high probability there is a hypothesis h \u2208 Hi that is close to c. To privately learn C, the learning algorithm first samples i \u2208 {1, . . . , r} and then uses the exponential mechanism to select a hypothesis from Hi. This reduces the sample complexity to O(maxi ln |Hi|); the size of the probabilistic representation is hence defined to be maxi ln |Hi|.\nWe show that for POINTd there exists a probabilistic representation of size O(1). This results in a private learning algorithm with sample complexity O(1), matching a different private algorithm for POINTd presented in [3]. Our new algorithm offers some improvement in the sample complexity compared to the algorithm of [3] when considering the learning and privacy parameters. Furthermore, our algorithm can be made computationally efficient without making any computational hardness assumptions, while the efficient version in [3] assumes the existence of one-way functions. Finally, it is conceptually simpler and in particular it avoids the sub-sampling technique used in [3].\nOne can ask if there are private learning algorithms with smaller sample complexity than the size of the smallest probabilistic representation. We show that the answer is no \u2014 the size of the smallest probabilistic representation is a lower bound on the sample complexity. Thus, the size of the smallest probabilistic representation of a class C, which we call the representation dimension and denote by RepDim(C), characterizes (up to constants) the sample size necessary and sufficient for privately learning the class C. We also show that for concepts defined over a finite domain, the difference between the sizes of the best deterministic and probabilistic representation is bounded. Namely, that if C is a concept class over the domain {0, 1}d, then there exists a deterministic representation of C of size O(RepDim(C) + ln d). Thus, for classes whose smallest deterministic representation is of size \u03c9(ln d), the size of the smallest deterministic representation characterizes the sample complexity of private learning of the class.\nThe notion of probabilistic representation applies not only to private learning, but also to optimization problems. We consider a scenario where there is a domain X, a database S of m records, each taken from the domain X, a set of solutions F , and a quality function q : X\u2217 \u00d7F \u2192 [0, 1] that we wish to maximize. If the exponential mechanism is used for (approximately) solving the problem, then the size of the database should be \u2126(ln |F|) in order to achieve a reasonable approximation. Using our notions of a representation of F and of a probabilistic representation of F , one can reduce the size of the minimal database without paying too much in the quality of the solution. Interestingly, a similar notion to representation, called \u201csolution list algorithms\u201d, was considered in [2] for constructing secure protocols for search problems while leaking only a few bits on the input. Curiously, their notion of leakage is very different from that of differential privacy.\nWe give two examples of such optimization problems. First, an example inspired by [2]: each record in the database is a clause with exactly 3 literals and we want to find an assignment satisfying at least 7/8 fraction of the clauses while protecting the privacy of the clauses. A construction of [2] yields a deterministic representation for this problem where the size of the database can be much smaller. Using a probabilistic representation, we can give a good assignment even for databases of constant size. This example is a simple instance of a scenario, where each individual has a preference on the solution and we want to choose a solution maximizing the number of individuals whose preference are met, while protecting the privacy of the preference. Another example of optimization is sanitization, where given a database we want to publish a synthetic database, which gives a similar utility as the original database while protecting the privacy of the individual records of the database. Using our techniques, we study the minimal database size for which sanitization\ngives reasonable performance with respect to a given family of queries.\nOpen Problem. We still do not know the relation between this dimension and the VC dimension. By Sauer\u2019s Lemma, if C is a concept class over {0, 1}d, then the number of functions in C is at most exp(d\u00b7VC(C)). By [17], there is a private learning algorithm for C whose sample size is O(d\u00b7VC(C)), thus, the probabilistic representation dimension of C is O(d \u00b7VC(C)). We do not know if there is a class C such that RepDim(C) \u226b VC(C). A candidate for such separation appears in [1]."}, {"heading": "2 Preliminaries", "text": "Notation. We use O\u03b3(g(n)) as a shorthand for O(h(\u03b3) \u00b7 g(n)) for some non-negative function h. Given a set B of cardinality r, and a distribution P on {1, 2, . . . , r}, we use the notation b \u2208P B to denote a random element of B chosen according to P."}, {"heading": "2.1 Preliminaries from Privacy", "text": "A database is a vector S = (z1, . . . , zm) over a domain X, where each entry zi \u2208 S represents information contributed by one individual. Databases S1 and S2 are called neighboring if they differ in exactly one entry. An algorithm preserves differential privacy if neighboring databases induce nearby outcome distributions. Formally,\nDefinition 2.1 (Differential Privacy [12]). A randomized algorithm A is \u01eb-differentially private if for all neighboring databases S1, S2, and for all sets F of outputs,\nPr[A(S1) \u2208 F ] \u2264 exp(\u01eb) \u00b7 Pr[A(S2) \u2208 F ]. (1)\nThe probability is taken over the random coins of A.\nAn immediate consequence of the definition is that for any two databases S1, S2 \u2208 X m, and for\nall sets F of outputs, Pr[A(S1) \u2208 F ] \u2265 exp(\u2212\u01ebm) \u00b7 Pr[A(S2) \u2208 F ]."}, {"heading": "2.2 Preliminaries from Learning Theory", "text": "Let Xd = {0, 1} d. A concept c : Xd \u2192 {0, 1} is a function that labels examples taken from the domain Xd by either 0 or 1. A concept class C over Xd is a class of concepts mapping Xd to {0, 1}. PAC learning algorithms are given examples sampled according to an unknown probability distribution D over Xd, and labeled according to an unknown target concept c \u2208 C. The generalization error of a hypothesis h : Xd \u2192 {0, 1} is defined as\nerrorD(c, h) = Pr x\u2208DXd [h(x) 6= c(x)].\nFor a labeled sample S = (xi, yi) m i=1, the empirical error of h is\nerrorS(h) = 1\nm |{i : h(xi) 6= yi}|.\nDefinition 2.2. An \u03b1-good hypothesis for c and D is a hypothesis h such that errorD(c, h) \u2264 \u03b1.\nDefinition 2.3 (PAC Learning [20]). Algorithm A is an (\u03b1, \u03b2)-PAC learner for a concept class C over Xd using hypothesis class H and sample size m if for all concepts c \u2208 C, all distributions D on Xd, given an input of m samples S = (z1, . . . , zm), where zi = (xi, c(xi)) and xi are drawn i.i.d. from D, algorithm A outputs a hypothesis h \u2208 H satisfying\nPr[errorD(c, h) \u2264 \u03b1] \u2265 1\u2212 \u03b2.\nThe probability is taken over the random choice of the examples in S according to D and the coin tosses of the learner A.\nDefinition 2.4. An algorithm satisfying Definition 2.3 with H \u2286 C is called a proper PAC learner; otherwise it is called an improper PAC learner."}, {"heading": "2.3 Private Learning", "text": "As a private learner is a PAC learner, its outcome hypothesis should also be a good predictor of labels. Hence, the privacy requirement from a private learner is not that an application of the hypothesis h on a new sample (pertaining to an individual) should leak no information about the sample.\nDefinition 2.5 (Private PAC Learning [17]). Let A be an algorithm that gets an input S = (z1, . . . , zm). Algorithm A is an (\u03b1, \u03b2, \u01eb)-PPAC learner for a concept class C over Xd using hypothesis class H and sample size m if\nPrivacy. Algorithm A is \u01eb-differentially private (as formulated in Definition 2.1);\nUtility. Algorithm A is an (\u03b1, \u03b2)-PAC learner for C using H and sample size m (as formulated in Definition 2.3)."}, {"heading": "2.4 The Exponential Mechanism", "text": "We next describe the exponential mechanism of McSherry and Talwar [18]. We present its private learning variant; however, it can be used in more general scenarios. The goal here is to chooses a hypothesis h \u2208 H approximately minimizing the empirical error. The choice is probabilistic, where the probability mass that is assigned to each hypothesis decreases exponentially with its empirical error.\nInputs: a privacy parameter \u01eb, a hypothesis class H, and m labeled samples S = (xi, yi) m i=1.\n1. \u2200h \u2208 H define q(S, h) = |{i : h(xi) = yi}|.\n2. Randomly choose h \u2208 H with probability\nexp (\u01eb \u00b7 q(S, h)/2)\u2211 f\u2208H exp (\u01eb \u00b7 q(S, f)/2) .\nProposition 2.6. Denote e\u0302 , minf\u2208H{errorS(f)}. The probability that the exponential mechanism outputs a hypothesis h such that errorS(h) > e\u0302+\u2206 is at most |H| \u00b7 exp(\u2212\u01eb\u2206m/2). Moreover, The exponential mechanism is \u01eb differentially private."}, {"heading": "2.5 Concentration Bounds", "text": "Let X1, . . . ,Xn be independent random variables where Pr[Xi = 1] = p and Pr[Xi = 0] = 1 \u2212 p for some 0 < p < 1. Clearly, E[ \u2211 iXi] = pn. Chernoff and Hoeffding bounds show that the sum is concentrated around this expected value:\nPr [\u2211\ni Xi > (1 + \u03b4)pn\n] \u2264 exp ( \u2212pn\u03b42/3 ) for \u03b4 > 0,\nPr [\u2211\ni Xi < (1\u2212 \u03b4)pn\n] \u2264 exp ( \u2212pn\u03b42/2 ) for 0 < \u03b4 < 1,\nPr [\u2223\u2223\u2223 \u2211\ni Xi \u2212 pn\n\u2223\u2223\u2223 > \u03b4 ] \u2264 2 exp ( \u22122\u03b42/n ) for \u03b4 \u2265 0.\nThe first two inequalities are known as the multiplicative Chernoff bounds [9], and the last inequality is known as the Hoeffding bound [16]."}, {"heading": "3 The Sample Complexity of Private Learners", "text": "In this section we present a combinatorial measure of a concept class C that characterizes the sample complexity necessary and sufficient for privately learning C. The measure is a probabilistic representation of the class C. We start with the notation of deterministic representation from [3].\nDefinition 3.1 ([3]). A hypothesis class H is an \u03b1-representation for a class C if for every c \u2208 C and every distribution D on Xd there exists a hypothesis h \u2208 H such that errorD(c, h) \u2264 \u03b1.\nExample 3.2 (POINTd). For j \u2208 Xd, define cj : Xd \u2192 {0, 1} as cj(x) = 1 if x = j, and cj(x) = 0 otherwise. Define POINTd = {cj}j\u2208Xd . In [3] it was shown that for \u03b1 < 1/2, every \u03b1-representation for POINTd must be of cardinality at least d, and that an \u03b1-representation Hd for POINTd exists where |Hd| = O(d/\u03b1 2).\nThe above representation can be used for non-private learning, by taking a big enough sample and finding a hypothesis h \u2208 Hd minimizing the empirical error. For private learning it was shown in [3] that a sample of size O\u03b1,\u03b2,\u01eb(log |Hd|) suffices, with a learner that employs the exponential mechanism to choose a hypothesis from Hd.\nDefinition 3.3. For a hypothesis class H we denote size(H) = ln |H|. We define the Deterministic Representation Dimension of a concept class C as\nDRepDim(C) = min { size(H) : H is a 1\n4 -representation for C\n} .\nRemark 3.4. Choosing 14 is arbitrary; we could have chosen any (smaller than 1 2) constant.\nExample 3.5. By the results of [3], stated in the previous example, DRepDim(POINTd) = \u03b8(ln(d)).\nWe are now ready to present the notion of a probabilistic representation. The idea behind this notion is that we have a list of hypothesis classes, such that for every concept c and distribution D, if we sample a hypothesis class from the list, then with high probability it contains a hypothesis that is close to c.\nDefinition 3.6. Let P be a distribution over {1, 2, . . . , r}, and let H = {H1,H2, . . . ,Hr} be a family of hypothesis classes (every Hi \u2208 H is a set of boolean functions). We say that (H ,P) is an (\u03b1, \u03b2)-probabilistic representation for a class C if for every c \u2208 C and every distribution D on Xd:\nPr P [\u2203h \u2208 Hi s.t. errorD(c, h) \u2264 \u03b1] \u2265 1\u2212 \u03b2.\nThe probability is over randomly choosing a set Hi \u2208P H .\nRemark 3.7. As we will see in Section3.1, the existence of such a probabilistic representation (H ,P) for a concept class C implies the existence of a private learning algorithm for C with sample complexity that depends on the cardinality of the hypothesis classes Hi \u2208 H . The sample complexity will not depend on r = |H |. Nevertheless, in Section 4 we will see that there always exists a probabilistic representation in which r is bounded.\nExample 3.8 (POINTd). In Section 7 we construct for every \u03b1 and every \u03b2 a pair (H ,P) that (\u03b1, \u03b2)-probabilistically represents the class POINTd, where H contains all the sets of at most 4 \u03b1 ln(1/\u03b2) boolean functions.\nDefinition 3.9. Let H = {H1,H2, . . . ,Hr} be a family of hypothesis classes. We denote |H | = r, and size(H ) = max{ ln |Hi| : Hi \u2208 H }. We define the Representation Dimension of a concept class C as\nRepDim(C) = min    size(H ) : \u2203P s.t. (H ,P) is a (14 , 1 4)-probabilistic\nrepresentation for C\n   .\nRemark 3.10. Choosing \u03b1 = \u03b2 = 14 is arbitrary; we could have chosen any two (smaller than 1 2) constants.\nExample 3.11 (POINTd). The size of the probabilistic representation mentioned in Example 3.8 is ln( 4\u03b1 ln(1/\u03b2)). Placing \u03b1 = \u03b2 = 1 4 , we see that the Representation Dimension of POINTd is constant."}, {"heading": "3.1 Equivalence of (\u03b1, \u03b2)-Probabilistic Representation and Private Learning", "text": "We now show that RepDim(C) characterizes the sample complexity of private learners. We start by showing in Lemma 3.12 that an (\u03b1, \u03b2)-probabilistic representation of C implies a private learning algorithm whose sample complexity is the size of the representation. We then show in Lemma 3.16 that if there is a private learning algorithm with sample complexity m, then there is probabilistic representation of C of size O(m); this lemma implies that RepDim(C) is a lower bound on the sample complexity. Recall that RepDim(C) is the size of the smallest probabilistic representation for \u03b1 = \u03b2 = 1/4. Thus, to complete the proof we show in Lemma 3.18 that a probabilistic representation with \u03b1 = \u03b2 = 1/4 implies a probabilistic representation for arbitrary \u03b1 and \u03b2.\nLemma 3.12. If there a exists pair (H ,P) that (\u03b1, \u03b2)-probabilistically represents a class C, then for every \u01eb there exists an algorithm A that (6\u03b1, 4\u03b2, \u01eb)-PPAC learns C with a sample size m =\nO (\n1 \u03b1\u01eb(size(H ) + ln( 1 \u03b2 ))\n) .\nProof. Let (H ,P) be an (\u03b1, \u03b2)-probabilistic representation for the class C, and consider the following algorithm A:\nInputs: S = (xi, yi) m i=1, and a privacy parameter \u01eb.\n1. Randomly choose Hi \u2208P H . 2. Choose h \u2208 Hi using the exp. mechanism with \u01eb.\nBy the properties of the exponential mechanism, A is \u01eb-differentially private. We will show that with sample size m = O (\n1 \u03b1\u01eb(size(H ) + ln( 1 \u03b2 ))\n) , algorithm A is a (6\u03b1, 4\u03b2)-PAC learner for C. Fix\nsome c \u2208 C and D, and define the following 3 good events:\nE1 Hi chosen in step 1 contains at least one hypothesis h s.t. errorS(h) \u2264 2\u03b1.\nE2 For every h \u2208 Hi s.t. errorS(h) \u2264 3\u03b1, it holds that errorD(c, h) \u2264 6\u03b1\nE3 The exponential mechanism chooses an h such that errorS(h) \u2264 \u03b1+minf\u2208Hi {errorS(f)}.\nWe first show that if those 3 good events happen, algorithm A returns a 6\u03b1-good hypothesis. Event E1 ensures the existence of a hypothesis f \u2208 Hi s.t. errorS(f) \u2264 2\u03b1. Thus, event E1 \u2229 E3 ensures algorithm A chooses (using the exponential mechanism) a hypothesis h \u2208 Hi s.t. errorS(h) \u2264 3\u03b1. Event E2 ensures therefore that this h obeys errorD(c, h) \u2264 6\u03b1.\nWe will now show that those 3 events happen with high probability. As (H ,P) is an (\u03b1, \u03b2)probabilistic representation for the class C, the chosen Hi contains a hypothesis h s.t. errorD(c, h) \u2264 \u03b1 with probability at least 1\u2212 \u03b2; by the Chernoff bound with probability at least 1\u2212 exp(\u2212m\u03b1/3) this hypothesis has empirical error at most 2\u03b1. Event E1 happens with probability at least (1 \u2212 \u03b2)(1 \u2212 exp(\u2212m\u03b1/3)) > 1\u2212 (\u03b2 + exp(\u2212m\u03b1/3)), which is at least (1\u2212 2\u03b2) for m \u2265 3\u03b1 ln(1/\u03b2).\nUsing the Chernoff bound, the probability that a hypothesis h s.t. errorD(c, h) > 6\u03b1 has empirical error \u2264 3\u03b1 is less than exp(\u2212m\u03b13/4). Using the union bound, the probability that there is such a hypothesis inHi is at most |Hi|\u00b7exp(\u2212m\u03b13/4). Therefore, Pr[E2] \u2265 1\u2212|Hi|\u00b7exp(\u2212m\u03b13/4). For m \u2265 43\u03b1 (ln( |Hi| \u03b2 )), this probability is at least (1\u2212 \u03b2).\nThe exponential mechanism ensures that the probability of event E3 is at least 1 \u2212 |Hi| \u00b7\nexp(\u2212\u01eb\u03b1m/2) (see Section 2.4), which is at least (1\u2212 \u03b2) for m \u2265 2\u03b1\u01eb ln( |Hi| \u03b2 ).\nAll in all, by setting m = 3\u03b1\u01eb(size(H ) + ln( 1 \u03b2 )) we ensure that the probability of A failing to\noutput a 6\u03b1-good hypothesis is at most 4\u03b2.\nWe will demonstrate the above lemma with two examples:\nExample 3.13 (Efficient learner for POINTd). As described in Example 3.8, there exists an (H ,P) that (\u03b1/6, \u03b2/4)-probabilistically represents the class POINTd, where size(H ) = O\u03b1,\u03b2,\u01eb(1). By Lemma 3.12, there exists an algorithm that (\u03b1, \u03b2, \u01eb)-PPAC learns C with sample size m = O\u03b1,\u03b2,\u01eb(1).\nThe existence of an algorithm with sample complexity O(1) was already proven in [3]. Moreover, assuming the existence of oneway functions, their learner is efficient. Our constructions yields an efficient learner, without assumptions. To see this, consider again algorithm A presented in the above proof, and note that as size(H ) is constant, step 2 could be done in constant time. Step 1 can be done efficiently as we can efficiently sample a set Hi \u2208P H . In Claim 7.1 we initially construct a probabilistic representation in which the description of every hypothesis is exponential in d. The representation is than revised using pairwise independence to yield a representation in which every hypothesis h has a short description, and given x the value h(x) can be computed efficiently.\nExample 3.14 (POINTN). Consider the class POINTN, which is exactly like POINTd, only over the natural numbers. By results of [8, 3], it is impossible to properly PPAC learn the class POINTN. Our construction can yield an (inefficient) improper private learner for POINTN with O\u03b1,\u03b2,\u01eb(1) samples. The details are deferred to Section 7.\nThe next lemma shows that a private learning algorithm implies a probabilistic representation. This lemma can be used to lower bound the sample complexity of private learners.\nLemma 3.15. If there exists an algorithm A that (\u03b1, 12 , \u01eb)-PPAC learns a concept class C with a sample size m, then there exists a pair (H ,P) that (\u03b1, 1/4)-probabilistically represents the class C such that size(H ) = O (m\u01eb).\nProof. Let A be an (\u03b1, 12 , \u01eb)-PPAC learner for a class C using hypothesis class F whose sample size is m. For a target concept c \u2208 C and a distribution D on Xd, we define G as the set of all hypotheses h \u2208 F such that errorD(c, h) \u2264 \u03b1. Fix some c \u2208 C and a distribution D on Xd. As A is an (\u03b1, 12)-PAC learner, PrD,A [A(S) \u2208 G] \u2265 1 2 , where the probability is over A\u2019s randomness and over sampling the examples in S (according to D). Therefore, there exists a database S of m samples such that PrA [A(S) \u2208 G] \u2265 1 2 , where the probability is only over the randomness of A. As A is \u01eb-differentially private, PrA [ A(~0) \u2208 G ] \u2265 e\u2212m\u01eb \u00b7 PrA [A(S) \u2208 G] \u2265 1 2e \u2212m\u01eb, where ~0 is a\ndatabase with m zeros.1 That is, PrA [ A(~0) /\u2208 G ] \u2264 1\u2212 12e \u2212m\u01eb. Now, consider a set H containing the outcomes of 2 ln(4)em\u01eb executions of A(~0). The probability that H does not contain an \u03b1-good hypothesis is at most (1 \u2212 12e \u2212m\u01eb)2 ln(4)e m\u01eb \u2264 14 . Thus, H = {H \u2286 F : |H| \u2264 2 ln(4)e m\u01eb}, and P, the distribution induced by A(~0), are an (\u03b1, 1/4)-probabilistic representation for class C. It follows that size(H ) = max{ ln |H| : H \u2208 H } = ln(2 ln(4)) +m\u01eb.\nThe above lemma yields a lower bound of \u2126 ( 1 \u01eb RepDim(C) ) on the sample complexity of private learners for a concept class C. To see this, fix \u03b1 \u2264 14 and let A be an (\u03b1, 1 2 , \u01eb)-PPAC learner for C with sample size m. By the above lemma, there exists a pair (H ,P) that (\u03b1, 1/4)-probabilistically represents C s.t. size(H ) = ln(2 ln(4))+m\u01eb. Therefore, by definition, RepDim(C) \u2264 ln(2 ln(4))+m\u01eb. Thus, m \u2265 1\u01eb (RepDim(C) \u2212 ln(2 ln(4))) = \u2126 ( 1 \u01eb RepDim(C) ) .\nIn order to refine this lower bound (and incorporate \u03b1 in it), we will need a somewhat stronger version of this lemma:\nLemma 3.16. Let \u03b1 \u2264 1/4. If there exists an algorithm A that (\u03b1, 12 , \u01eb)-PPAC learns a concept class C with a sample size m, then there exists a pair (H ,P) that (1/4, 1/4)-probabilistically represents the class C such that size(H ) = O (m\u01eb\u03b1).\nProof. Let A be an (\u03b1, 12 , \u01eb)-PPAC learner for the class C using hypothesis class F whose sample size is m. Without loss of generality, we can assume that m \u2265 3 ln(4)4\u03b1 (since A can ignore part of the sample). For a target concept c \u2208 C and a distribution D on Xd, we define\nG\u03b1D = {h \u2208 F : errorD(c, h) \u2264 \u03b1}.\nFix some c \u2208 C and a distribution D on Xd, and define the following distribution D\u0303 on Xd:\nPr D\u0303 [x] =\n{ 1\u2212 4\u03b1+ 4\u03b1 \u00b7 PrD[x], x = 0 d.\n4\u03b1 \u00b7 PrD[x], x 6= 0 d.\n1Choosing ~0 is arbitrary; we could have chosen any database.\nNote that for every x \u2208 Xd,\nPr D\u0303 [x] \u2265 4\u03b1 \u00b7 Pr D [x]. (2)\nAs A is an (\u03b1, 12)-PAC learner, it holds that\nPr D\u0303,A\n[ A(S) \u2208 G\u03b1\nD\u0303\n] \u2265 1\n2 ,\nwhere the probability is over A\u2019s randomness and over sampling the examples in S (according to D\u0303). In addition, by inequality (2), every hypothesis h with errorD(c, h) > 1/4 has error strictly greater than \u03b1 under D\u0303:\nerrorD\u0303(c, h) \u2265 4\u03b1 \u00b7 errorD(c, h) > \u03b1.\nSo, every \u03b1-good hypothesis for c and D\u0303 is a 14 -good hypothesis for c and D. That is, G \u03b1 D\u0303 \u2286 G 1/4 D . Therefore, Pr D\u0303,A [ A(S) \u2208 G 1/4 D ] \u2265 12 .\nWe say that a database S of m labeled examples is good if the unlabeled example 0d appears in S at least (1 \u2212 8\u03b1)m times. Let S be a database constructed by taking m i.i.d. samples from D\u0303, labeled by c. By the Chernoff bound, S is good with probability at least 1\u2212 exp(\u22124\u03b1m/3). Hence,\nPr D\u0303,A\n[ (A(S) \u2208 G\n1/4 D ) \u2227 (S is good)\n] \u2265 1\n2 \u2212 exp(\u22124\u03b1m/3) \u2265\n1 4 .\nTherefore, there exists a database Sgood of m samples that contains the unlabeled sample 0 d\nat least (1 \u2212 8\u03b1)m times, and PrA [ A(Sgood) \u2208 G 1/4 D ] \u2265 14 , where the probability is only over the randomness of A. All of the examples in Sgood (including the example 0 d) are labeled by c.\nFor \u03c3 \u2208 {0, 1}, denote by ~0\u03c3 a database containing m copies of the example 0 d labeled as \u03c3. As A is \u01eb-differentially private, and as the target concept c labels the example 0d by either 0 or 1, for at least one \u03c3 \u2208 {0, 1} it holds that\nPr A [A(~0\u03c3) \u2208 G 1/4 D ] \u2265 exp(\u22128\u03b1\u01ebm) \u00b7 PrA\n[ A(Sgood) \u2208 G 1/4 D ]\n\u2265 exp(\u22128\u03b1\u01ebm) \u00b7 1/4. (3)\nThat is, PrA[A(~0\u03c3) /\u2208 G 1/4 D ] \u2264 1 \u2212 1 4e \u22128\u03b1\u01ebm. Now, consider a set H containing the outcomes of 4 ln(4)e8\u03b1\u01ebm executions of A(~00), and the outcomes of 4 ln(4)e 8\u03b1\u01ebm executions of A(~01). The probability that H does not contain a 14 -good hypothesis for c and D is at most (1\u2212 1 4e \u22128\u03b1\u01ebm)4 ln(4)e 8\u03b1\u01ebm\n\u2264 1 4 . Thus, H = { H \u2286 F : |H| \u2264 2 \u00b7 4 ln(4)e8\u03b1\u01ebm } , and P, the distribution induced by A(~00) and A(~01), are a (1/4, 1/4)-probabilistic representation for the class C. Note that the value c(0 d) is unknown, and can be either 0 or 1. Therefore the construction uses the two possible values (one of them correct).\nIt holds that size(H ) = max{ ln |H| : H \u2208 H } = ln(8 ln(4)) + 8\u03b1\u01ebm = O (m\u01eb\u03b1).\nLemma 3.18 shows how to construct a probabilistic representation for an arbitrary \u03b1 and \u03b2 from a probabilistic representation with \u03b1 = \u03b2 = 1/4; in other words we boost \u03b1 and \u03b2. The proof\nof this lemma is combinatorial. It allows us to start with a private learning algorithm with constant \u03b1 and \u03b2, move to a representation, use the combinatorial boosting, and move back to a private algorithm with small \u03b1 and \u03b2. This should be contrasted with the private boosting of [13] which is algorithmic and more complicated (however, the algorithm of Dwork et al. [13] is computationally efficient).\nWe first show how to construct a probabilistic representation for arbitrary \u03b2 from a probabilistic representation with \u03b2 = 1/4.\nClaim 3.17. For every concept class C and for every \u03b2, there exists a pair (H ,P) that (1/4, \u03b2)probabilistically represents C where size(H ) \u2264 RepDim(C) + ln ln(1/\u03b2).\nProof. Let \u03b2 < 1/4, and let (H 0,P0) be a (14 , 1 4 )- probabilistic representation for C with size(H 0) = RepDim(C) , k0 (that is, for every H 0 i \u2208 H 0 it holds that |H0i | \u2264 e k0). Denote H 0 = {H01,H 0 2, . . . ,H 0 r}, and consider the following family of hypothesis classes:\nH 1 = { H0i1 \u222a \u00b7 \u00b7 \u00b7 \u222a H 0 iln(1/\u03b2) : 1 \u2264 i1 \u2264 \u00b7 \u00b7 \u00b7 \u2264 iln(1/\u03b2) \u2264 r } .\nNote that for every H1i \u2208 H 1 it holds that |H1i | \u2264 ln(1/\u03b2)e k0 and so size(H 1) , k1 \u2264 k0 + ln ln(1/\u03b2). We will now show an appropriate distribution P1 on H 1 s.t. (H 1,P1) is a (14 , \u03b2)probabilistic representation for C. To this end, consider the following process for randomly choosing an H1 \u2208 H 1:\n1. Denote M = ln(1/\u03b2) 2. For i = 1, . . . ,M :\nRandomly choose H0i \u2208P0 H 0.\n3. Return H1 = \u22c3M\ni=1 H 0 i .\nThe above process induces a distribution on H 1, denoted as P1. As H 0 is a (14 , 1 4 )-probabilistic\nrepresentation for C, we have that\nPr P1\n[ \u2204h \u2208 H1 s.t. errorD(c, h) \u2264 1/4 ] =\n= M\u220f\ni=1\nPr P0\n[ \u2204h \u2208 H0i s.t. errorD(c, h) \u2264 1/4 ] \u2264\n\u2264\n( 1\n4\n)M \u2264 \u03b2.\nLemma 3.18. For every concept class C, every \u03b1, and every \u03b2, there exists (H ,P) that (\u03b1, \u03b2)probabilistically represents C where\nsize(H ) = O ( ln( 1\n\u03b1 ) \u00b7\n( RepDim(C) + ln ln ln( 1\n\u03b1 ) + ln ln(\n1 \u03b2 ) )) .\nProof. Let C be a concept class, and let (H 1,P1) be a (14 , \u03b2/T )-probabilistic representation for C (where T will be set later). By Claim 3.17, such a representation exists with size(H 1) , k1 \u2264 RepDim(C) + ln ln(T/\u03b2). We use H 1 and P1 to create an (\u03b1, \u03b2)- probabilistic representation for C. We begin with two notations:\n1. For T hypotheses h1, . . . , hT we denote by majh1,...,hT the majority hypothesis. That is, majh1,...,hT (x) = 1 if and only if |{hi : hi(x) = 1}| \u2265 T/2.\n2. For T hypothesis classes H1, . . . ,HT we denote MAJ(H1, . . . ,HT ) = { majh1,...,hT : \u22001\u2264i\u2264T hi \u2208 Hi } .\nConsider the following family of hypothesis classes:\nH = { MAJ(Hi1 , . . . ,HiT ) : Hi1 , . . . ,HiT \u2208 H 1 } .\nMoreover, denote the distribution on H induced by the following random process as P:\nFor j = 1, . . . , T : Randomly choose Hij \u2208P1 H 1 Return MAJ(Hi1 , . . . ,HiT ).\nNext we show that (H ,P) is an (\u03b1, \u03b2)-probabilistic representation for C: For a fixed pair of a target concept c and a distribution D, randomly choose Hi1 , . . . ,HiT \u2208P1 H\n1. We now show that with probability at least (1\u2212\u03b2) the set MAJ(Hi1 , . . . ,HiT ) contains at least one \u03b1-good hypothesis for c,D.\nTo this end, denote D1 = D and consider the following thought experiment, inspired by the Adaboost Algorithm of [15]:\nFor t = 1. . . . , T :\n1. Fail if Hit does not contain a 1 4 -good hypothesis for c,Dt. 2. Denote by ht \u2208 Hit a 1 4 -good hypothesis for c,Dt.\n3. Dt+1(x) = { 2Dt(x), if ht(x) 6= c(x).( 1\u2212 errorDt(c,ht)\n1\u2212errorDt (c,ht)\n) Dt(x), otherwise.\nNote that as D1 is a probability distribution on Xd; the same is true for D2,D3, . . . ,DT . As (H 1,P1) is a (14 , \u03b2/T )-probabilistic representation for C, the failure probability of every iteration is at most \u03b2/T . Thus (using the union bound), with probability at least (1\u2212\u03b2) the whole thought experiment will succeed, and in this case we show that the error of hfin = majh1,...,hT is at most \u03b1.\nConsider the set R = {x : hfin(x) 6= c(x)} \u2286 Xd. This is the set of points on which at least T/2 of h1, . . . , hT err. Next consider the partition of R to the following sets:\nRt = { x \u2208 R : ( ht(x) 6= c(x) ) \u2227 ( \u2200i>t hi(x) = c(x) )} .\nThat is, Rt contains the points x \u2208 R on which ht is last to err. Clearly Dt(Rt) \u2264 1/4, as Rt is a\nsubset of the set of points on which ht errs. Moreover,\nDt(Rt) \u2265 D1(Rt) \u00b7 2 T/2 \u00b7 ( 1\u2212 errorDt(c, ht)\n1\u2212 errorDt(c, ht)\n)t\u2212T/2\n\u2265 D1(Rt) \u00b7 2 T/2 \u00b7 ( 1\u2212 1/4\n1\u2212 1/4\n)t\u2212T/2\n\u2265 D1(Rt) \u00b7 2 T/2 \u00b7 ( 1\u2212 1/4\n1\u2212 1/4\n)T/2\n= D(Rt) \u00b7\n( 4\n3\n)T/2 ,\nso,\nD(Rt) \u2264 Dt(Rt) \u00b7\n( 4\n3\n)\u2212T/2 \u2264 1\n4 \u00b7\n( 4\n3\n)\u2212T/2 .\nFinally,\nerrorD(c, hfin) = D(R) = T\u2211\nt=T/2\nD(Rt) \u2264\n\u2264 T 2 \u00b7 1 4 \u00b7\n( 4\n3\n)\u2212T/2 = T\n8 \u00b7\n( 4\n3\n)\u2212T/2 .\nChoosing T = 14 ln( 2\u03b1 ), we get that errorD(c, hfin) \u2264 \u03b1. Hence, (H ,P) is an (\u03b1, \u03b2)-probabilistic\nrepresentation for C. Moreover, for every Hi \u2208 H we have that |Hi| \u2264 ( ek1 )T , and so\nsize(H ) \u2264 k1 \u00b7 T \u2264 ( RepDim(C) + ln ln(T/\u03b2) ) T = O ( ln( 1\n\u03b1 ) \u00b7\n( RepDim(C) + ln ln ln( 1\n\u03b1 ) + ln ln(\n1 \u03b2 ) )) .\nThe next theorem states the main result of this section \u2013 RepDim characterizes the sample complexity of private learning.\nTheorem 3.19. Let C be a concept class. \u0398\u0303\u03b2\n( RepDim(C)\n\u03b1\u01eb\n) samples are necessary and sufficient for\nthe private learning of the class C.\nProof. Fix some \u03b1 \u2264 1/4, \u03b2 \u2264 1/2, and \u01eb. By Lemma 3.18, there exists a pair (H ,P) that (\u03b16 , \u03b2 4 )-represent class C, where size(H ) = O ( ln(1/\u03b1) \u00b7 ( RepDim(C) + ln ln ln(1/\u03b1) + ln ln(1/\u03b2) )) . Therefore, by Lemma 3.12, there exists an algorithm A that (\u03b1, \u03b2, \u01eb)-PPAC learns the class C with a sample size\nm = O\u03b2\n( 1\n\u03b1\u01eb ln(\n1 \u03b1 ) \u00b7\n( RepDim(C) + ln ln ln( 1\n\u03b1 )\n)) .\nFor the lower bound, let A be an (\u03b1, \u03b2, \u01eb)-PPAC learner for the class C with a sample size m, where \u03b1 \u2264 1/4 and \u03b2 \u2264 1/2. By Lemma 3.16, there exists an (H ,P) that (14 , 1 4)- probabilistically\nrepresents the class C and size(H ) = ln(8)+ln ln(4)+8\u03b1\u01ebm. Therefore, by definition, RepDim(C) \u2264 ln(8 ln(4)) + 8\u03b1\u01ebm. Thus,\nm \u2265 1 8\u03b1\u01eb \u00b7 ( RepDim(C)\u2212 ln(8 ln(4)) ) = \u2126\n( RepDim(C)\n\u03b1\u01eb\n) ."}, {"heading": "4 From a Probabilistic Representation to a Deterministic Repre-", "text": "sentation\nIn this section we will establish a connection between the (probabilistic) representation dimension of a class and its deterministic representation dimension.\nObservation 4.1. Let (H ,P) be an (\u03b1, \u03b2)-probabilistic representation for a concept class C. Then, B = \u22c3 Hi\u2208H Hi is an \u03b1-representation of C.\nProof. As (H ,P) is an (\u03b1, \u03b2)-probabilistic representation for C, for every c and every D\nPr P [\u2203h \u2208 Hi s.t errorD(c, h) \u2264 \u03b1] \u2265 1\u2212 \u03b2 > 0.\nThe probability is over choosing a set Hi \u2208P H . In particular, for every c and every D there exists an Hi \u2208 H that contains an \u03b1-good hypothesis.\nThe simple construction in Observation 4.1 may result in a very large deterministic representation. For example, in Claim 7.1 we show an (H ,P) that (\u03b1, \u03b2)- probabilistically represents the class POINTd, where H contains all the sets of at most 4 \u03b1 ln(\n1 \u03b2 ) boolean functions. While\u22c3\nHi\u2208H Hi = 2 Xd is indeed an \u03b1-representation for POINTd, it is extremely over-sized. We will show that it is not necessary to take the union of all the Hi\u2019s in H in order to get an \u03b1-representation for C. As (H ,P) is an (\u03b1, \u03b2)-probabilistic representation, for every c and every D, with probability at least 1 \u2212 \u03b2 a randomly chosen Hi \u2208P H contains an \u03b1-good hypothesis. The straight forward strategy here is to first boost \u03b2 as in Claim 3.17, and then use the union bound over all possible c \u2208 C and over all possible distributions D on Xd. Unfortunately, there are infinitely many such distributions, and the proof will be somewhat more complicated.\nDefinition 4.2. Let H = {H1,H2, . . . ,Hr} be a family of hypothesis classes, and P be a distribution over {1, . . . , r}. We will denote the following non private algorithm as Learner(H ,P,m, \u03b3):\nInput: a sample S = (xi, yi) m i=1.\n1. Randomly choose Hi \u2208P H . 2. If for every h \u2208 Hi errorS(h) > \u03b3, then fail. 3. Return h \u2208 Hi minimizing errorS(h).\nWe will say that Learner(H ,P,m, \u03b3) is \u03b2-successful for a class C over Xd, if for every c \u2208 C and every distribution D on Xd, given an input sample drawn i.i.d. according to D and labeled by c, algorithm Learner fails with probability at most \u03b2.\nClaim 4.3. If (H ,P) is an (\u03b1, \u03b2)-probabilistic representation for a class C, then, for m \u2265 3 \u03b1 ln(1/\u03b2), algorithm Learner(H ,P,m, 2\u03b1) is 2\u03b2-successful for C.\nProof. We will show that with probability at least 1 \u2212 2\u03b2, the set Hi (chosen in Step 1) contains at least one hypothesis h s.t. errorS(h) \u2264 2\u03b1. As (H ,P) is an (\u03b1, \u03b2)-probabilistic representation for class C, the chosen Hi will contain a hypothesis h s.t. errorD(c, h) \u2264 \u03b1 with probability at least 1\u2212\u03b2; by the Chernoff bound with probability at least 1\u2212exp(\u2212m\u03b1/3) this hypothesis has empirical error at most 2\u03b1. The set Hi contains a hypothesis h s.t. errorS(h) \u2264 2\u03b1 with probability at least (1\u2212\u03b2)(1\u2212exp(\u2212m\u03b1/3)) > 1\u2212(\u03b2+exp(\u2212m\u03b1/3)), which is at least (1\u22122\u03b2) for m \u2265 3\u03b1 ln(1/\u03b2).\nClaim 4.4. Let H be a family of hypothesis classes, and P a distribution on it. Let \u03b3, \u03b2 and m be such that m \u2265 4\u03b3 (size(H ) + ln( 1 \u03b2 )). If Learner(H ,P,m, \u03b3) is \u03b2-successful for a class C over Xd, then there exists H\u0302 \u2286 H and a distribution P\u0302 on it, s.t. Learner(H\u0302 , P\u0302 ,m, \u03b3) is a (2\u03b3, 3\u03b2)-PAC\nlearner for C and \u2223\u2223\u2223H\u0302 \u2223\u2223\u2223 = d\u00b7m\u03b22 .\nProof. For every input S = (xi, yi) m i=1, denote by pS the probability of Learner(H ,P,m, \u03b3) failing on step 2 (the probability is only over the choice of Hi \u2208P H in the first step). As Learner(H ,P,m, \u03b3) is \u03b2-successful,\nPr P,D\n[ Learner(H ,P,m, \u03b3) fails ] = \u2211\nS\nPr D [S] \u00b7 pS \u2264 \u03b2.\nConsider the following process, denoted by Proc, for randomly choosing a multiset H\u0303 of size t (t will be set later):\nFor i = 1, . . . , t : Randomly choose Hi \u2208P H Return H\u0303 = (H1,H2, ...,Ht).\nDenote by Ut the uniform distribution on {1, 2, . . . , t}. As before, for every input S = (xi, yi) m i=1, denote by p\u0303S the probability of Learner(H\u0303 ,Ut,m, \u03b3) failing on its second step (again, the probability is only over the choice of Hi \u2208Ut H\u0303 in the first step). Using those notations:\nPr Ut,D\n[ Learner(H\u0303 ,Ut,m, \u03b3) fails ] = \u2211\nS\nPr D [S] \u00b7 p\u0303S.\nFix a sample S. As the choice of Hi \u2208Ut H\u0303 is uniform,\np\u0303S =\n\u2223\u2223\u2223 { Hi \u2208 H\u0303 : \u2200h \u2208 Hi errorS(h) > \u03b3 }\u2223\u2223\u2223 \u2223\u2223\u2223H\u0303 \u2223\u2223\u2223 .\nUsing the Hoeffding bound,\nPr Proc\n[ |p\u0303S \u2212 pS| \u2265 \u03b2 ] \u2264 2e\u22122t\u03b2 2 .\nThe probability is over choosing the multiset H\u0303 . There are at most 2m(d+1) samples of size m (as every entry in the sample is an element of Xd, concatenated with a label bit). Using the union bound over all possible samples S,\nPr Proc\n[ \u2203S s.t. |p\u0303S \u2212 pS | \u2265 \u03b2 ] \u2264 2m(d+1) \u00b7 2 \u00b7 e\u22122t\u03b2 2 .\nFor t \u2265 m\u00b7d \u03b22 the above probability is strictly less than 1. This means that for t = m\u00b7d \u03b22 there exists a multiset H\u0302 such that |p\u0302S \u2212 pS | \u2264 \u03b2 for every sample S. We will show that for this H\u0302 , Learner(H\u0302 ,Ut,m, \u03b3) is a (2\u03b3, 3\u03b2)-PAC learner. Fix a target concept c \u2208 C and a distribution D on Xd. Define the following two good events:\nE1 Learner(H\u0302 ,Ut,m, \u03b3) outputs a hypothesis h such that errorS(h) \u2264 \u03b3.\nE2 For every h \u2208 Hi s.t. errorS(h) \u2264 \u03b3, it holds that errorD(c, h) \u2264 2\u03b3.\nNote that if those two events happen, Learner(H\u0302 ,Ut,m, \u03b3) returns a 2\u03b3-good hypothesis for c and D. We will show that those two events happen with high probability. We start by bounding the failure probability of Learner(H\u0302 ,Ut,m, \u03b3).\nPr Ut,D\n[ Learner(H\u0302 ,Ut,m, \u03b3) fails ]\n= \u2211\nS\nPr D [S] \u00b7 p\u0302S\n\u2264 \u2211\nS\nPr D [S] \u00b7 (pS + \u03b2)\n= Pr P,D\n[ Learner(H ,P,m, \u03b3) fails ] + \u03b2 \u2264 2\u03b2.\nWhen Learner(H\u0302 ,Ut,m, \u03b3) does not fail, it returns a hypothesis h with empirical error at most \u03b3. Thus, Pr[E1] \u2265 1\u2212 2\u03b2.\nUsing the Chernoff bound, the probability that a hypothesis h with errorD(c, h) > 2\u03b3 has empirical error \u2264 \u03b3 is less than exp(\u2212m\u03b3/4). Using the union bound, the probability that there is such a hypothesis in Hi is at most |Hi| \u00b7 exp(\u2212m\u03b3/4). Therefore, Pr[E2] \u2265 1\u2212 |Hi| \u00b7 exp(\u2212m\u03b3/4). For m \u2265 4\u03b3 ln( |Hi| \u03b2 ), this probability is at least (1\u2212 \u03b2).\nAll in all, the probability of Learner(H ,P,m, \u03b3) failing to output a 2\u03b3-good hypothesis is at most 3\u03b2.\nTheorem 4.5. If there exists a pair (H ,P) that (\u03b1, \u03b2)-probabilistically represents a class C over\nXd (where |H | might be very big), then there exists a pair (H\u0302 , P\u0302) that (4\u03b1, 6\u03b2)-probabilistically represents C, where H\u0302 \u2286 H , and\n\u2223\u2223\u2223H\u0302 \u2223\u2223\u2223 = 3d\n4\u03b1\u03b22\n( size(H ) + ln( 1\n\u03b2 )\n) .\nProof. Let (H ,P) be an (\u03b1, \u03b2)-probabilistic representation for a class C. Set m = 3\u03b1(size(H ) + ln( 1\u03b2 )). By Claim 4.3, Learner(H ,P,m, 2\u03b1) is 2\u03b2-successful for class C. By Claim 4.4, there exists an H\u0302 \u2286 H and a distribution P\u0302 on it, such that Learner(H\u0302 , P\u0302 ,m, 2\u03b1) is a (4\u03b1, 6\u03b2)-PAC learner\nfor C and \u2223\u2223\u2223H\u0302 \u2223\u2223\u2223 = d\u00b7m4\u03b22 = 3d4\u03b1\u03b22 (size(H ) + ln( 1\u03b2 )). Assume towards contradiction that (H\u0302 , P\u0302) does not (4\u03b1, 6\u03b2)-represent C. So, there exist a concept c \u2208 C and a distribution D s.t., with probability strictly greater than 6\u03b2, a randomly chosen Hi \u2208P\u0302 H\u0302 does not contain a 4\u03b1-good hypothesis for c,D. Therefore, for those c and D, Learner(H\u0302 , P\u0302 ,m, 2\u03b1) will fail to return a 4\u03b1-good hypothesis with probability strictly greater than 6\u03b2.\nTheorem 4.6. For every class C over Xd there exists a 1 4-representation B such that size(B) = O(ln(d) + RepDim(C)).\nProof. By Lemma 3.18, there exists a pair (H ,P) that ( 116 , 1 12)-probabilistically represents C such that size(H ) = O(RepDim(C)). Using Theorem 4.5, there exists a pair (H\u0302 , P\u0302) that (14 , 1 2)- probabilistically represents C, such that size(H\u0302 ) = size(H ) and\n\u2223\u2223\u2223H\u0302 \u2223\u2223\u2223 = O (d \u00b7 size(H )) .\nWe can now use Observation 4.1 and construct the set B = \u22c3\nHi\u2208 H\u0302 Hi which is a 1 4 -representation\nfor the class C. In addition,\n|B| = O (\u2223\u2223\u2223H\u0302 \u2223\u2223\u2223 \u00b7 esize(H ) ) = O ( d \u00b7 size(H ) \u00b7 esize(H ) ) .\nThus, size(B) = ln |B| = O (ln(d) + RepDim(C)).\nCorollary 4.7. For every concept class C over Xd, DRepDim(C) = O(ln(d) + RepDim(C)).\nCorollary 4.8. There exists a constant N s.t. for every concept class C over Xd where DRepDim(C) \u2265 N log(d), the sample complexity that is necessary and sufficient for privately learning C is \u0398\u03b1,\u03b2(DRepDim(C))."}, {"heading": "5 Probabilistic Representation for Privately Solving Optimiza-", "text": "tion Problems\nThe notion of probabilistic representation applies not only to private learning, but also to a broader task of optimization problems. We consider the following scenario:\nDefinition 5.1. An optimization problem OPT over a universe X and a set of solutions F is defined by a quality function q : X\u2217 \u00d7 F \u2192 [0, 1]. Given a database S, the task is to choose a solution f \u2208 F such that q(S, f) is maximized.\nNotation. We will refer to the optimization problem defined by a quality function q as OPTq.\nDefinition 5.2. An \u03b1-good solution for a database S is a solution s such that q(S, s) \u2265 maxf\u2208F{q(S, f)}\u2212 \u03b1.\nGiven an optimization problem OPTq, one can use the exponential mechanism to choose a solution s \u2208 F . In general, this method achieves a reasonable solution only for databases of size \u2126(log |F|/\u01eb). To see this, consider a case where there exists a database S of m records such that exactly one solution t \u2208 F has a quality of q(S, t) = 1, and every other f \u2208 F has a quality of q(S, f) = 1/2. The probability of the exponential mechanism choosing t is:\nPr[t is chosen] = exp(\u01ebm/2)\n(|F| \u2212 1) \u00b7 exp(\u01ebm/4) + exp(\u01ebm/2) .\nUnless\nm \u2265 4\u01eb ln(|F| \u2212 1) = \u2126( 1 \u01eb ln |F|), (4)\nthe above probability is strictly less than 1/2. Using our notations of probabilistic representation, it might be possible to reduce the necessary database size.\nConsider using the exponential mechanism for choosing a solution s, not out of F , but rather from a smaller set of solutions B. Roughly speaking, the factor of ln |F| in requirement (4) will now be replaced with ln |B|, which corresponds to size of the representation. Therefore, the database size m should be at least ln |B|/\u01eb. So m needs to be bigger than the size of the representation by at least a factor of 1/\u01eb.\nIn the following analysis we will denote this required gap, i.e., m/ ln |B|, as \u2206. We will see that the existence of a private approximation algorithm implies a probabilistic representation with 1 < \u2206 \u2248 1\u01eb , and that a probabilistic representation with \u2206 > 1 implies a private approximation algorithm. Bigger \u2206 corresponds to better privacy; however, it might be harder to achieve.\nDefinition 5.3. Let OPTq be an optimization problem over a universe X and a set of solutions F . Let B be a set of solutions, and denote size(B) = ln |B|. We say that B is an \u03b1-deterministic representation of OPTq for databases of m elements if for every S \u2208 X\nm there exists a solution s \u2208 B such that q(S, s) \u2265 maxf\u2208F{q(S, f)} \u2212 \u03b1.\nDefinition 5.4. Let B be an \u03b1-deterministic representation of OPTq for databases of m elements. Denote \u2206 , msize(B) . If \u2206 > 1, then we say that the ratio of B is \u2206.\nAn \u03b1-deterministic representation B with ratio \u2206 is required to support all the databases of m = \u2206 \u00b7 size(B) elements. That is, for every S \u2208 Xm, the set B is required to contain at least one \u03b1-good solution.\nFix S \u2208 Xm. Intuitively, \u2206 controls the ratio between m and number of bits needed to represent an \u03b1-good solution for S. As B contains an \u03b1-good solution for S, and assuming B is publicly known, this solution could be represented with ln |B| = size(B) = m/\u2206 bits.\nDefinition 5.5. Let OPTq be an optimization problem over a universe X and a set of solutions F . Let P be a distribution over {1, 2, . . . , r}, and let B = {B1,B2, . . . ,Br} be a family of solution sets for OPTq. We denote size(B) = max{ ln |Bi| : Bi \u2208 B }. We say that (B,P) is an (\u03b1, \u03b2)probabilistic representation of OPTq for databases of m elements if for every S \u2208 X m:\nPr P\n[ \u2203s \u2208 Bi s.t. q(S, s) \u2265 max\nf\u2208F {q(S, f)} \u2212 \u03b1\n] \u2265 1\u2212 \u03b2.\nDefinition 5.6. Let (B,P) be an (\u03b1, \u03b2)-probabilistic representation of OPTq for databases of m elements. Denote \u2206 , msize(B) . If \u2206 > 1, then we say that the ratio of the representation is \u2206. Definition 5.7. An optimization problem OPTq is bounded if \u2223\u2223\u2223|S1| \u00b7 q(S1, f)\u2212 |S2| \u00b7 q(S2, f)\n\u2223\u2223\u2223 \u2264 1 for every solution f and every two neighboring databases S1, S2.\nWe are interested in approximating bounded optimization problems, while guaranteeing differential privacy:\nDefinition 5.8. Let OPTq be a bounded optimization problem over a universe X and a set of solutions F . An algorithm A is an (\u03b1, \u03b2, \u01eb)-private approximation algorithm for OPTq with a database of m records if:\n1. Algorithm A is \u01eb-differentially private (as formulated in Definition 2.1);\n2. For every S \u2208 Xm, algorithm A outputs with probability at least (1\u2212\u03b2) a solution s such that q(S, s) \u2265 maxf\u2208F{q(S, f)} \u2212 \u03b1.\nExample 5.9 (Sanitization). Consider a class of predicates C over X. A database S contains points taken from X. A predicate query Qc for c \u2208 C is defined as Qc(S) = 1 |S| \u00b7 |{xi \u2208 S : c(xi) = 1}|. Blum et al. [6] defined a sanitizer (or data release mechanism) as a differentially private algorithm that, on input a database S, outputs another database S\u0302 with entries taken from X. A sanitizer A is (\u03b1, \u03b2)-useful for predicates in the class C if for every database S it holds that\nPr A\n[ \u2200c \u2208 C \u2223\u2223Qc(S)\u2212Qc(S\u0302) \u2223\u2223 \u2264 \u03b1 ] \u2265 1\u2212 \u03b2.\nThis scenario can be viewed as a bounded optimization problem: The solutions are sanitized databases. For an input database S and and a sanitized database S\u0302, the quality function is\nq(S, S\u0302) = 1\u2212max c\u2208C\n{ |Qc(S)\u2212Qc(S\u0302)| } .\nTo see that this optimization problem is bounded, note that for every two neighboring databases S1, S2 of m elements, and every c \u2208 C it holds that |Qc(S1) \u2212 Qc(S2)| \u2264 1 m . Therefore, for every sanitized database f ,\nm \u00b7 |q(S1, f)\u2212 q(S2, f)| = m \u00b7 \u2223\u2223\u2223\u2223maxc\u2208C {|Qc(S1)\u2212Qc(f)|} \u2212maxc\u2208C {|Qc(S2)\u2212Qc(f)|} \u2223\u2223\u2223\u2223 \u2264 1\nThe next two lemmas establish an equivalence between a private approximation algorithm and a probabilistic representation for a bounded optimization problem.\nLemma 5.10. Let OPTq be a bounded optimization problem over a universe X. If there exists a pair (B,P) that (\u03b1, \u03b2)-probabilistically represents OPTq for databases of m elements, s.t. the ratio of (B,P) is \u2206 > 1, then for every \u03b1\u0302, \u03b2\u0302, \u01eb satisfying\n\u2206 \u2265 2\n\u01eb\u03b1\u0302\n( 1 + ln(1/\u03b2\u0302)\nsize(B)\n) ,\nthere exists an ( (\u03b1+ \u03b1\u0302), (\u03b2 + \u03b2\u0302), \u01eb ) -approximation algorithm for OPTq with a database of size m.\nProof. Consider the following algorithm A:\nInputs: a database S \u2208 Xm, and a privacy parameter \u01eb.\n1. Randomly choose Bi \u2208P B.\n2. Choose s \u2208 Bi using the exponential mechanism, that is, with probability\nexp(\u01eb \u00b7m \u00b7 q(S, s)/2)\u2211 f\u2208Bi exp(\u01eb \u00b7m \u00b7 q(S, f)/2) .\nBy the properties of the exponential mechanism, A is \u01eb-differentially private. Fix a database S \u2208 Xm, and define the following 2 bad events:\nE1 The set Bi chosen in step 1 does not contain a solution s s.t. q(S, s) \u2265 maxf\u2208F{q(S, f)} \u2212\u03b1.\nE2 The solution s chosen in step 2 is such that q(S, s) < maxt\u2208Bi q(S, t)\u2212 \u03b1\u0302.\nNote that if those two bad events do not occur, algorithm A outputs a solution s such that q(S, s) \u2265 maxf\u2208F{q(S, f)}\u2212\u03b1\u2212 \u03b1\u0302. As (B,P) is an (\u03b1, \u03b2)-probabilistic representation of OPTq for databases of size m, event E1 happens with probability at most \u03b2. By the properties of the exponential mechanism, the probability of event E2 is bounded by |Bi| \u00b7 exp(\u2212\u01ebm\u03b1\u0302/2). As m = \u2206size(B), this probability is at most\nPr[E2] \u2264 size(B) \u00b7 exp(\u2212\u01ebm\u03b1\u0302/2)\n= size(B) \u00b7 exp(\u2212\u01eb\u2206size(B)\u03b1\u0302/2)\n\u2264 size(B) \u00b7 exp ( \u2212 ( 1 + ln(1/\u03b2\u0302)\nsize(B)\n) size(B) )\n= size(B) \u00b7 exp(\u2212 size(B)\u2212 ln(1/\u03b2\u0302)) = \u03b2\u0302.\nTherefore, algorithm A outputs an (\u03b1+\u03b1\u0302)-good solution with probability at least (1\u2212\u03b2\u2212\u03b2\u0302).\nLemma 5.11. Let OPTq be an optimization problem. If there exists an (\u03b1, \u03b2, \u01eb)-private approximation algorithm for OPTq with a database of m records, then for every \u03b2\u0302 satisfying\n\u2206 , m\nln( 11\u2212\u03b2 ) + ln ln( 1 \u03b2\u0302 ) +m \u00b7 \u01eb\n> 1,\nthere exists a pair (B,P) that (\u03b1, \u03b2\u0302)-probabilistically represents OPTq for databases of m elements, where the ratio of the representation is \u2206.\nProof. Let A be an (\u03b1, \u03b2, \u01eb)-private approximation algorithm for OPTq, with a sample size m. Fix an arbitrary input database S \u2208 Xm. Define G as the set of all solutions s, possibly outputted by A, such that q(S, s) \u2265 maxf\u2208F{q(S, f)} \u2212 \u03b1. As A is an (\u03b1, \u03b2, \u01eb)-approximation algorithm,\nPrA [A(S) \u2208 G] \u2265 1\u2212\u03b2. As A is \u01eb-differentially private, PrA\n[ A(~0) \u2208 G ] \u2265 (1\u2212\u03b2)e\u2212m\u01eb, where ~0 is a\ndatabase withm zeros. That is, PrA\n[ A(~0) /\u2208 G ] \u2264 1\u2212(1\u2212\u03b2)e\u2212m\u01eb. Now, consider a set B containing\nthe outcomes of \u0393 , 11\u2212\u03b2 ln( 1 \u03b2\u0302 )em\u01eb executions of A(~0). The probability that B does not contain a solutions s \u2208 G is at most (1\u2212(1\u2212\u03b2)e\u2212m\u01eb)\u0393 \u2264 \u03b2\u0302. Thus, B = {B \u2286 support(A) : |B| \u2264 \u0393}, and P, the distribution induced by A(~0), are an (\u03b1, \u03b2\u0302)-probabilistic representation of OPTq for databases with m elements. Moreover, the ratio of the representation is\nm\nsize(B) =\nm\nmax{ ln |B| : B \u2208 B }\n= m\nln( 11\u2212\u03b2 ) + ln ln( 1 \u03b2\u0302 ) +m\u01eb\n= \u2206."}, {"heading": "5.1 Exact 3SAT", "text": "Consider the following bounded optimization problem, denoted as OPTE3SAT: The universe X is the set of all possible clauses with exactly 3 different literals over n variables, and the set of solutions F is the set of all possible 2n assignments. Given a database S = (\u03c31, \u03c32, . . . , \u03c3m) containing m E3CNF clauses, the quality of an assignment a \u2208 F is\nq(S, a) = |{i : a(\u03c3i) = 1}|\nm .\nAiming at the (very different) objective of secure protocols for search problems, Beimel et al. [2] defined the notation of solution-list algorithms, which corresponds to our notation of deterministic representation. We next rephrase their results using our notations.\nR1 For every \u03b1 > 0 and every \u2206 > 1, there exists a set B that (\u03b1 + 1/8)-deterministically represents OPTE3SAT for databases of size m = O ( \u2206(ln ln(n) + ln(1/\u03b1) ) ), and a ratio of \u2206.\nR2 Let \u03b1 < 1/2 and \u2206 > 1. For every set B that \u03b1- deterministically represents OPTE3SAT for databases of size m with a ratio of \u2206, it holds that m = \u2126 ( ln ln(n) ) .\nUsing (R1) and a deterministic version of Lemma 5.10, for every \u03b1, \u03b2, \u01eb > 0, there exists an( (1/8 + \u03b1), \u03b2, \u01eb ) - approximation algorithm for OPTE3SAT with a database of m = O\u03b1,\u03b2,\u01eb(ln ln(n)) clauses. By (R2), this is the best possible using a deterministic representation. We can reduce the necessary database size, using a probabilistic representation. Fix a clause with three different literals. If we pick an assignment at random, then with probability at least 7/8 it satisfies the clause. Now, fix any exact 3CNF formula. If we pick an assignment at random, then the expected fraction of satisfied clauses is at least 7/8. Moreover, for every 0 < \u03b1 < 7/8, the fraction of satisfied clauses is at least (7/8 \u2212 \u03b1) with probability at least \u03b1\u03b1+1/8 . So, if we pick t = ln(1/\u03b2)ln(\u03b1+1/8)+ln(1/\u03b1) random assignments, the probability that none of them will satisfy at least (7/8 \u2212 \u03b1)m clauses is at most (\n\u03b1 \u03b1+1/8\n)t = \u03b2. So, for every \u2206 > 1,\nB = {B : B is a set of at most t assignments},\nand P, the distribution induced on B by randomly picking t assignments, are an ( (1/8 + \u03b1), \u03b2 ) - probabilistic representation of OPTE3SAT for databases of size \u2206 \u00b7 ln(t) and a ratio of \u2206. By Lemma 5.11, for every \u01eb there exists an ( (1/8 + \u03b1), \u03b2, \u01eb ) -approximation algorithm for OPTE3SAT with a database of m = o\u03b1,\u03b2,\u01eb(1) clauses."}, {"heading": "6 Extensions", "text": ""}, {"heading": "6.1 (\u01eb, \u03b4)-Differential Privacy", "text": "The notation of \u01eb-differential privacy was generalized to (\u01eb, \u03b4)-differential privacy, where the requirement in inequality (1) is changed to\nPr[A(S1) \u2208 F ] \u2264 exp(\u01eb) \u00b7 Pr[A(S2) \u2208 F ] + \u03b4.\nThe proof of Lemma 3.16 remains valid even if algorithm A is only (\u01eb, \u03b4)-differential private for\n\u03b4 \u2264 18e \u22128\u03b1\u01ebm(1\u2212 e\u2212\u01eb). (5)\nTo see this, note that inequality (3) changes to\nPr A\n[ A(~0) \u2208 G ] \u2265\n\u2265 ((( Pr A [A(S) \u2208 G] \u00b7 e\u2212\u01eb \u2212 \u03b4 ) e\u2212\u01eb \u2212 \u03b4 ) \u00b7 \u00b7 \u00b7 ) e\u2212\u01eb \u2212 \u03b4\n\u2265 1\n4 e\u22128\u03b1\u01ebm \u2212 \u03b4\n( 8\u03b1m\u22121\u2211\ni=0\ne\u2212i\u01eb\n)\n\u2265 1\n4 e\u22128\u03b1\u01ebm \u2212 \u03b4\n( 1\n1\u2212 e\u2212\u01eb\n) \u2265 1\n8 e\u22128\u03b1\u01ebm.\nThe rest of the proof remains almost intact (only minor changes in the constants). With that in mind, we see that the lower bound showed in Theorem 3.19 for \u01eb-differentially private (that is, with \u03b4 = 0) learners also applies for (\u01eb, \u03b4)-differentially private learners satisfying inequality (5). That\nis, every such learner for a class C must use \u2126 ( RepDim(C)\n\u03b1\u01eb\n) samples.\nWhen using (\u01eb, \u03b4)-differential privacy, \u03b4 should be negligible in the security parameter, that is, in d \u2013 the representation length of elements in Xd. Therefore, using (\u01eb, \u03b4)-differential privacy instead of \u01eb-differential privacy cannot reduce the sample complexity for PPAC learning a concept class C whenever RepDim(C) = O (log(d))."}, {"heading": "6.2 Probabilistic Representation Using a Hypothesis Class", "text": "We will now consider a generalization of our representation notations that can be useful when considering PPAC learners that use a specific hypothesis class. In particular, those notation can be useful when considering proper-PPAC learners, that is, a learner that learns a class C using a hypothesis class B \u2286 C.\nDefinition 6.1. We define the \u03b1-Deterministic Representation Dimension of a concept class C using a hypothesis class B as\nDRepDim\u03b1(C,B) = min   size(H) : H \u2286 B is an \u03b1-representation for class C    .\nNote that DRepDim 1 4 (C, 2Xd) = DRepDim(C). The dependency on \u03b1 in the above definition is necessary: if C is not contained in B then for every small enough \u03b1, the hypothesis class B itself does not \u03b1-represents C (and therefore no subset H \u2286 B can \u03b1-represent C). Moreover, when considering the notations of representation using a hypothesis class, our boosting technique for \u03b1 does not work (as the boosting uses more complex hypotheses).\nExample 6.2. Beimel et al. [3] showed that for every \u03b1 < 1, every subset H ( POINTd does not \u03b1-represent the class POINTd. Therefore, DRepDim\u03b1(POINTd, POINTd) = \u03b8(d) for every \u03b1 < 1.\nDefinition 6.3. A pair (H ,P) is an (\u03b1, \u03b2)-probabilistic representation for a concept class C using a hypothesis class B if:\n1. (H ,P) is an (\u03b1, \u03b2)-probabilistic representation for the class C, as formulated in Definition 3.6.\n2. Every Hi \u2208 H is a subset of B.\nNote that whenever B = 2Xd , this definition is identical to Definition 3.6. Using this general notation, we can restate Lemma 3.12 and Lemma 3.16 as follows:\nLemma 6.4. If there exists a pair (H ,P) that (\u03b1, \u03b2)- probabilistically represents a class C using a hypothesis class B, then for every \u01eb and every \u03b3 there exists an algorithm A that (\u03b1+\u03b3, 3\u03b2, \u01eb)-PPAC learns C using B and a sample size m = O((size(H ) + ln( 1\u03b2 ))max{ 1 \u03b3\u01eb , 1 \u03b32 }).\nNote that in the above lemma the resulting algorithm A has accuracy (\u03b1+ \u03b3) as opposed to 6\u03b1 in lemma 3.12, where \u03b3 is arbitrary. While in section 3 we did not mind the multiplicative factor of 6 in the accuracy parameter (as we could boost it back), replacing it with an additive factor of \u03b3 might be of value in this section as our boosting technique for the accuracy parameter does not work here. As an example, consider a representation with \u03b1 = 110 . Without boosting capabilities, this change makes the difference between the ability to generate an algorithm with \u03b1 = 610 , or an algorithm with \u03b1 = 110 + 1 1000 .\nProof. Let (H ,P) be an (\u03b1, \u03b2)-probabilistic representation for class C using a hypothesis class B, and consider the following algorithm A:\nInputs: S = (xi, yi) m i=1, and a privacy parameter \u01eb.\n1. Randomly choose Hi \u2208P H . 2. Choose h \u2208 Hi using the exp. mechanism with \u01eb.\nFirst note that the support of A is indeed (a subset of) B. By the properties of the exponential mechanism, A is \u01eb-differentially private. Fix some c \u2208 C and D, and define the following 3 good events:\nE1 Hi chosen in step 1 contains at least one hypothesis h s.t. errorD(h) \u2264 \u03b1.\nE2 For every h \u2208 Hi it holds that |errorS(h)\u2212 errorD(c, h)| \u2264 \u03b3 3 .\nE3 The exponential mechanism chooses an h such that errorS(h) \u2264 \u03b3 3 +minf\u2208Hi {errorS(f)}.\nNote that if those 3 good events happen, algorithm A returns an (\u03b1+ \u03b3)-good hypothesis. We will now show that those 3 events happen with high probability.\nAs (H ,P) is an (\u03b1, \u03b2)-probabilistic representation for the class C, event E1 happens with probability at least 1\u2212 \u03b2.\nUsing the Hoeffding bound, event E2 happens with probability at leat 1 \u2212 2|Hi| exp(\u2212 2 9\u03b3 2m).\nFor m \u2265 9 2\u03b32 ln(2|Hi|\u03b2 ), this probability is at leat 1\u2212 \u03b2.\nThe exponential mechanism ensures that the probability of event E3 is at least 1 \u2212 |Hi| \u00b7\nexp(\u2212\u01eb\u03b3m/6) (see Section 2.4), which is at least (1\u2212 \u03b2) for m \u2265 6\u03b3\u01eb ln( |Hi| \u03b2 ).\nAll in all, by setting m = 6(size(H ) + ln( 2\u03b2 ))max{ 1 \u03b32 , 1\u03b3\u01eb} we ensure that the probability of A\nfailing to output an (\u03b1+ \u03b3)-good hypothesis is at most 3\u03b2.\nLemma 6.5. If there exists an algorithm A that (\u03b1, 12 , \u01eb)-PPAC learns a concept class C using a hypothesis class B and a sample size m, then there exists a pair (H ,P) that (\u03b1, 1/4)-probabilistically represents the class C using the hypothesis class B where size(H ) = O (m\u01eb).\nThe proof of Lemma 6.5 is identical to the proof of Lemma 3.15.\nDefinition 6.6. We define the \u03b1-Probabilistic Representation Dimension of a concept class C using a hypothesis class B as\nRepDim\u03b1(C,B) = min    size(H ) : \u2203P s.t. (H ,P) is an (\u03b1, 14)-prob. representation for C using B    .\nExample 6.7. Beimel et al. [3] showed that for every \u03b1 < 1, every proper-PPAC learner for POINTd requires \u2126((d+log(1/\u03b2))/(\u01eb\u03b1)) labled examples. Using Lemma 6.4, we get that RepDim\u03b1(POINTd, POINTd) = \u2126(d).\nWe still do not know the relation between the representation dimension of a concept class and its VC dimension. However, the above example shows a strong separation between the VC dimension of the class POINTd and RepDim\u03b1(POINTd, POINTd)."}, {"heading": "7 A Probabilistic Representation for Points", "text": "Example 3.8 states the existence of a constant size probabilistic representation for the class POINTd. We now give the construction.\nClaim 7.1. There exists an (\u03b1, \u03b2)-probabilistic representation for POINTd of size ln(4/\u03b1)+ln ln(1/\u03b2). Furthermore, each hypothesis h in each Hi has a short description and given x, the value h(x) can be computed efficiently.\nProof. Consider the following set of hypothesis classes\nH = { H \u2286 2Xd : |H| \u2264 4\n\u03b1 ln(\n1 \u03b2 )\n} .\nThat is, H \u2208 H if H contains at most 4\u03b1 ln( 1 \u03b2 ) boolean functions. We will show an appropriate distribution P s.t. (H ,P) is an (\u03b1, \u03b2)-probabilistic representation of the class POINTd. To this end, fix a target concept cj \u2208 POINTd and a distribution D on Xd (remember that j is the unique point on which cj(j) = 1). We need to show how to randomly choose an H \u2208R H such that with probability at least (1 \u2212 \u03b2) over the choice of H, there will be at least one h \u2208 H such that errorD(cj , h) \u2264 \u03b1. Consider the following process for randomly choosing an H \u2208 H :\n1. Denote M = 4\u03b1 ln( 1 \u03b2 ) 2. For i = 1, . . . ,M construct hypothesis hi as follows: For each x \u2208 Xd (independently):\nLet hi(x) = 1 with probability \u03b1/2, and hi(x) = 0 otherwise.\n3. Return H = {h1, h2, . . . , hM}.\nThe above process induces a distribution on H , denoted as P. We will next analyze the probability that the returned H does not contain an \u03b1-good hypothesis. We start by fixing some i and analyzing the expected error of hi, conditioned on the event that hi(j) = 1. The probability is taken over the random coins used to construct hi.\nE hi\n[ errorD(cj , hi) \u2223\u2223\u2223 hi(j) = 1 ] =\n= E hi\n[ E\nx\u2208D\n[ \u2223\u2223cj(x)\u2212 hi(x) \u2223\u2223 ] \u2223\u2223\u2223 hi(j) = 1 ]\n= E x\u2208D [ E hi [ \u2223\u2223cj(x)\u2212 hi(x) \u2223\u2223 \u2223\u2223\u2223 hi(j) = 1 ]] \u2264 \u03b1 2 .\nUsing Markov\u2019s Inequality,\nPr hi\n[ errorD(cj , hi) \u2265 \u03b1 \u2223\u2223\u2223\u2223 hi(j) = 1 ] \u2264 1\n2 .\nSo, the probability that hi is \u03b1-good for cj and D is:\nPr hi [errorD(cj , hi) \u2264 \u03b1] \u2265\n\u2265 Pr hi [hi(j) = 1] \u00b7 Pr hi\n[ errorD(cj , hi) \u2264 \u03b1 \u2223\u2223\u2223\u2223 hi(j) = 1 ]\n\u2265 \u03b1 2 \u00b7 1 2 = \u03b1 4 .\nThus, the probability that H fails to contain an \u03b1-good hypothesis is at most ( 1\u2212 \u03b14 )M , which is less than \u03b2 for our choice of M . This concludes the proof that (H ,P) is an (\u03b1, \u03b2)-probabilistic representation for POINTd.\nWhen a hypothesis hi() was constructed in the above random process, the value of hi(x) was independently drawn for every x \u2208 Xd. This results in a hypothesis whose description size is O(2\nd), which in turn, will result in a non efficient learning algorithm. We next construct hypotheses whose description is short. To achieve this goal, we note that in the above analysis we only care about the probability that hi(x) = 0 given that hi(j) = 1. Thus, we can choose the values of hi in a pairwise independent way, e.g., using a random polynomial of degree 2. The size of the description in this case is O(d).\nObservation 7.2. Consider the class POINTN, defined in Example 3.14. The above construction can be adjusted to yield an (inefficient) improper private learner for POINTN with O\u03b1,\u03b2,\u01eb(1) samples. The only adjustments necessary are in the construction of the (\u03b1, \u03b2)-probabilistic representation. Specifically, we need to specify how to randomly draw a boolean function h over the natural numbers, such that for every x \u2208 N the probability of h(x) = 1 is \u03b1/2, and the values of h on every two distinct points in N are independent. This can be done easily, as a random real number could be interpreted as a random function over N."}], "references": [{"title": "Bounds on the sample complexity for private learning and private data release", "author": ["A. Beimel", "H. Brenner", "S.P. Kasiviswanathan", "K. Nissim"], "venue": "Machine learning", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2013}, {"title": "Private approximation of search problems", "author": ["A. Beimel", "P. Carmi", "K. Nissim", "E. Weinreb"], "venue": "SIAM J. Comput., 38(5):1728\u20131760", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2008}, {"title": "Bounds on the sample complexity for private learning and private data release", "author": ["A. Beimel", "S.P. Kasiviswanathan", "K. Nissim"], "venue": "TCC, volume 5978 of LNCS, pages 437\u2013454. Springer", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2010}, {"title": "Characterizing the sample complexity of private learners", "author": ["A. Beimel", "K. Nissim", "U. Stemmer"], "venue": "ITCS, pages 97\u2013110", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2013}, {"title": "Practical privacy: The SuLQ framework", "author": ["A. Blum", "C. Dwork", "F. McSherry", "K. Nissim"], "venue": "PODS, pages 128\u2013138. ACM", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2005}, {"title": "A learning theory approach to non-interactive database privacy", "author": ["A. Blum", "K. Ligett", "A. Roth"], "venue": "STOC, pages 609\u2013618. ACM", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2008}, {"title": "Learnability and the Vapnik- Chervonenkis dimension", "author": ["A. Blumer", "A. Ehrenfeucht", "D. Haussler", "M.K. Warmuth"], "venue": "ACM, 36(4):929\u2013965", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1989}, {"title": "Sample complexity bounds for differentially private learning", "author": ["K. Chaudhuri", "D. Hsu"], "venue": "COLT, 19:155\u2013186", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2011}, {"title": "A measure of asymptotic efficiency for tests of a hypothesis based on the sum of observations", "author": ["H. Chernoff"], "venue": "Ann. Math. Statist., 23:493\u2013507", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1952}, {"title": "The differential privacy frontier", "author": ["C. Dwork"], "venue": "O. Reingold, editor, TCC, volume 5444 of LNCS, pages 496\u2013502. Springer", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2009}, {"title": "A firm foundation for private data analysis", "author": ["C. Dwork"], "venue": "Commun. of the ACM, 54(1):86\u201395", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2011}, {"title": "Calibrating noise to sensitivity in private data analysis", "author": ["C. Dwork", "F. McSherry", "K. Nissim", "A. Smith"], "venue": "S. Halevi and T. Rabin, editors, TCC, volume 3876 of LNCS, pages 265\u2013284. Springer", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2006}, {"title": "Boosting and differential privacy", "author": ["C. Dwork", "G.N. Rothblum", "S.P. Vadhan"], "venue": "FOCS, pages 51\u201360", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2010}, {"title": "A general lower bound on the number of examples needed for learning", "author": ["A. Ehrenfeucht", "D. Haussler", "M.J. Kearns", "L.G. Valiant"], "venue": "Inf. Comput., 82(3):247\u2013261", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1989}, {"title": "A decision-theoretic generalization of on-line learning and an application to boosting", "author": ["Y. Freund", "R.E. Schapire"], "venue": "Journal of Computer and System Sciences, 55(1):119 \u2013 139", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1997}, {"title": "Probability inequalities for sums of bounded random variables", "author": ["W. Hoeffding"], "venue": "Journal of the American Statistical Association, 58(301):13\u201330", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1963}, {"title": "What can we learn privately? SIAM J", "author": ["S.P. Kasiviswanathan", "H.K. Lee", "K. Nissim", "S. Raskhodnikova", "A. Smith"], "venue": "Comput., 40(3):793\u2013826", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2011}, {"title": "Mechanism design via differential privacy", "author": ["F. McSherry", "K. Talwar"], "venue": "FOCS, pages 94\u2013103. IEEE", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2007}, {"title": "The strength of weak learnability", "author": ["R.E. Schapire"], "venue": "Mach. Learn., 5(2):197\u2013227", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1990}, {"title": "A theory of the learnable", "author": ["L.G. Valiant"], "venue": "Communications of the ACM, 27:1134\u20131142", "citeRegEx": "20", "shortCiteRegEx": null, "year": 1984}, {"title": "On the uniform convergence of relative frequencies of events to their probabilities", "author": ["V.N. Vapnik", "A.Y. Chervonenkis"], "venue": "Theory of Probability and its Applications, 16:264", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1971}], "referenceMentions": [{"referenceID": 16, "context": "defined private learning as a combination of PAC learning and differential privacy [17].", "startOffset": 83, "endOffset": 87}, {"referenceID": 3, "context": "A preliminary version of this paper appeared in [4].", "startOffset": 48, "endOffset": 51}, {"referenceID": 16, "context": "[17] defined in 2008 private learning as a combination of probably approximately correct (PAC) learning [20] and differential privacy [12].", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[17] defined in 2008 private learning as a combination of probably approximately correct (PAC) learning [20] and differential privacy [12].", "startOffset": 104, "endOffset": 108}, {"referenceID": 11, "context": "[17] defined in 2008 private learning as a combination of probably approximately correct (PAC) learning [20] and differential privacy [12].", "startOffset": 134, "endOffset": 138}, {"referenceID": 9, "context": "We refer the reader to surveys of Dwork [10, 11].", "startOffset": 40, "endOffset": 48}, {"referenceID": 10, "context": "We refer the reader to surveys of Dwork [10, 11].", "startOffset": 40, "endOffset": 48}, {"referenceID": 20, "context": "It is well known that the sample complexity of learning a concept class C (non-privately) is proportional to a complexity measure of the class C knowns as the VC-dimension [21, 7, 14].", "startOffset": 172, "endOffset": 183}, {"referenceID": 6, "context": "It is well known that the sample complexity of learning a concept class C (non-privately) is proportional to a complexity measure of the class C knowns as the VC-dimension [21, 7, 14].", "startOffset": 172, "endOffset": 183}, {"referenceID": 13, "context": "It is well known that the sample complexity of learning a concept class C (non-privately) is proportional to a complexity measure of the class C knowns as the VC-dimension [21, 7, 14].", "startOffset": 172, "endOffset": 183}, {"referenceID": 16, "context": "[17] proved that a private learner exists for every finite concept class.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "The VC-dimension of a concept class is bounded by this quantity (and significantly lower for some interesting concept classes), and hence the results of [17] left open the possibility that the sample complexity of private learning may be significantly higher than that of non-private learning.", "startOffset": 153, "endOffset": 157}, {"referenceID": 6, "context": "Recall that the sample complexity of non-private learners for a class of functions C is proportional to the VC-dimension of the class [7, 14] \u2013 a combinatorial measure of the class that is equal to the size of the largest set of inputs that is shattered by the class.", "startOffset": 134, "endOffset": 141}, {"referenceID": 13, "context": "Recall that the sample complexity of non-private learners for a class of functions C is proportional to the VC-dimension of the class [7, 14] \u2013 a combinatorial measure of the class that is equal to the size of the largest set of inputs that is shattered by the class.", "startOffset": 134, "endOffset": 141}, {"referenceID": 16, "context": "[17] showed, informally, that every finite concept class C can be learned privately (ignoring computational complexity).", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "Their construction is based on the exponential mechanism of McSherry and Talwar [18], and the O(ln |C|) bound on sample complexity results from the union bound argument used in the analysis of the exponential mechanism.", "startOffset": 80, "endOffset": 84}, {"referenceID": 4, "context": "[5] for all concept classes that can be efficiently learned in the statistical queries model.", "startOffset": 0, "endOffset": 3}, {"referenceID": 16, "context": "[17] showed an example of a concept", "startOffset": 0, "endOffset": 4}, {"referenceID": 2, "context": "[3] studied the sample complexity of private learning.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "Chaudhuri and Hsu [8] studied the sample complexity needed for private learning infinite concept classes when the data is drawn from a continuous distribution.", "startOffset": 18, "endOffset": 21}, {"referenceID": 16, "context": "[17] do not extend to infinite hypothesis classes.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "Chaudhuri and Hsu [8] also study learning algorithms that are only required to protect the privacy of the labels (and do not necessarily protect the privacy of the examples themselves).", "startOffset": 18, "endOffset": 21}, {"referenceID": 18, "context": "A line of research (started in [19]) that is very relevant to our paper is boosting learning algorithms, that is, taking learning algorithms that have a big classification error and producing a learning algorithm with small error.", "startOffset": 31, "endOffset": 35}, {"referenceID": 12, "context": "[13] show how to privately boost accuracy, that is, given a private learning algorithms that have a big classification error, they produce a private learning algorithm with small error.", "startOffset": 0, "endOffset": 4}, {"referenceID": 2, "context": "[3] showed how to use a representation of a class to privately learn it.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "This results in a private learning algorithm with sample complexity O(1), matching a different private algorithm for POINTd presented in [3].", "startOffset": 137, "endOffset": 140}, {"referenceID": 2, "context": "Our new algorithm offers some improvement in the sample complexity compared to the algorithm of [3] when considering the learning and privacy parameters.", "startOffset": 96, "endOffset": 99}, {"referenceID": 2, "context": "Furthermore, our algorithm can be made computationally efficient without making any computational hardness assumptions, while the efficient version in [3] assumes the existence of one-way functions.", "startOffset": 151, "endOffset": 154}, {"referenceID": 2, "context": "Finally, it is conceptually simpler and in particular it avoids the sub-sampling technique used in [3].", "startOffset": 99, "endOffset": 102}, {"referenceID": 0, "context": "We consider a scenario where there is a domain X, a database S of m records, each taken from the domain X, a set of solutions F , and a quality function q : X\u2217 \u00d7F \u2192 [0, 1] that we wish to maximize.", "startOffset": 165, "endOffset": 171}, {"referenceID": 1, "context": "Interestingly, a similar notion to representation, called \u201csolution list algorithms\u201d, was considered in [2] for constructing secure protocols for search problems while leaking only a few bits on the input.", "startOffset": 104, "endOffset": 107}, {"referenceID": 1, "context": "First, an example inspired by [2]: each record in the database is a clause with exactly 3 literals and we want to find an assignment satisfying at least 7/8 fraction of the clauses while protecting the privacy of the clauses.", "startOffset": 30, "endOffset": 33}, {"referenceID": 1, "context": "A construction of [2] yields a deterministic representation for this problem where the size of the database can be much smaller.", "startOffset": 18, "endOffset": 21}, {"referenceID": 16, "context": "By [17], there is a private learning algorithm for C whose sample size is O(d\u00b7VC(C)), thus, the probabilistic representation dimension of C is O(d \u00b7VC(C)).", "startOffset": 3, "endOffset": 7}, {"referenceID": 0, "context": "A candidate for such separation appears in [1].", "startOffset": 43, "endOffset": 46}, {"referenceID": 11, "context": "1 (Differential Privacy [12]).", "startOffset": 24, "endOffset": 28}, {"referenceID": 19, "context": "3 (PAC Learning [20]).", "startOffset": 16, "endOffset": 20}, {"referenceID": 16, "context": "5 (Private PAC Learning [17]).", "startOffset": 24, "endOffset": 28}, {"referenceID": 17, "context": "We next describe the exponential mechanism of McSherry and Talwar [18].", "startOffset": 66, "endOffset": 70}, {"referenceID": 8, "context": "The first two inequalities are known as the multiplicative Chernoff bounds [9], and the last inequality is known as the Hoeffding bound [16].", "startOffset": 75, "endOffset": 78}, {"referenceID": 15, "context": "The first two inequalities are known as the multiplicative Chernoff bounds [9], and the last inequality is known as the Hoeffding bound [16].", "startOffset": 136, "endOffset": 140}, {"referenceID": 2, "context": "We start with the notation of deterministic representation from [3].", "startOffset": 64, "endOffset": 67}, {"referenceID": 2, "context": "1 ([3]).", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "In [3] it was shown that for \u03b1 < 1/2, every \u03b1-representation for POINTd must be of cardinality at least d, and that an \u03b1-representation Hd for POINTd exists where |Hd| = O(d/\u03b1 2).", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "For private learning it was shown in [3] that a sample of size O\u03b1,\u03b2,\u01eb(log |Hd|) suffices, with a learner that employs the exponential mechanism to choose a hypothesis from Hd.", "startOffset": 37, "endOffset": 40}, {"referenceID": 2, "context": "By the results of [3], stated in the previous example, DRepDim(POINTd) = \u03b8(ln(d)).", "startOffset": 18, "endOffset": 21}, {"referenceID": 2, "context": "The existence of an algorithm with sample complexity O(1) was already proven in [3].", "startOffset": 80, "endOffset": 83}, {"referenceID": 7, "context": "By results of [8, 3], it is impossible to properly PPAC learn the class POINTN.", "startOffset": 14, "endOffset": 20}, {"referenceID": 2, "context": "By results of [8, 3], it is impossible to properly PPAC learn the class POINTN.", "startOffset": 14, "endOffset": 20}, {"referenceID": 12, "context": "This should be contrasted with the private boosting of [13] which is algorithmic and more complicated (however, the algorithm of Dwork et al.", "startOffset": 55, "endOffset": 59}, {"referenceID": 12, "context": "[13] is computationally efficient).", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "To this end, denote D1 = D and consider the following thought experiment, inspired by the Adaboost Algorithm of [15]: For t = 1.", "startOffset": 112, "endOffset": 116}, {"referenceID": 0, "context": "An optimization problem OPT over a universe X and a set of solutions F is defined by a quality function q : X\u2217 \u00d7 F \u2192 [0, 1].", "startOffset": 117, "endOffset": 123}, {"referenceID": 5, "context": "[6] defined a sanitizer (or data release mechanism) as a differentially private algorithm that, on input a database S, outputs another database \u015c with entries taken from X.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "[2] defined the notation of solution-list algorithms, which corresponds to our notation of deterministic representation.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "[3] showed that for every \u03b1 < 1, every subset H ( POINTd does not \u03b1-represent the class POINTd.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "[3] showed that for every \u03b1 < 1, every proper-PPAC learner for POINTd requires \u03a9((d+log(1/\u03b2))/(\u01eb\u03b1)) labled examples.", "startOffset": 0, "endOffset": 3}], "year": 2014, "abstractText": "In 2008, Kasiviswanathan et al. defined private learning as a combination of PAC learning and differential privacy [17]. Informally, a private learner is applied to a collection of labeled individual information and outputs a hypothesis while preserving the privacy of each individual. Kasiviswanathan et al. gave a generic construction of private learners for (finite) concept classes, with sample complexity logarithmic in the size of the concept class. This sample complexity is higher than what is needed for non-private learners, hence leaving open the possibility that the sample complexity of private learning may be sometimes significantly higher than that of non-private learning. We give a combinatorial characterization of the sample size sufficient and necessary to privately learn a class of concepts. This characterization is analogous to the well known characterization of the sample complexity of non-private learning in terms of the VC dimension of the concept class. We introduce the notion of probabilistic representation of a concept class, and our new complexity measure RepDim corresponds to the size of the smallest probabilistic representation of the concept class. We show that any private learning algorithm for a concept class C with sample complexity m implies RepDim(C) = O(m), and that there exists a private learning algorithm with sample complexity m = O(RepDim(C)). We further demonstrate that a similar characterization holds for the database size needed for privately computing a large class of optimization problems and also for the well studied problem of private data release. A preliminary version of this paper appeared in [4]. Research partially supported by the Israel Science Foundation (grants No. 938/09 and 2761/12) and by the Frankel Center for Computer Science.", "creator": "LaTeX with hyperref package"}}}