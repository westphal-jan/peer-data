{"id": "1402.4413", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Feb-2014", "title": "Towards Ultra Rapid Restarts", "abstract": "We observe a trend regarding restart strategies used in SAT solvers. A few years ago, most state-of-the-art solvers restarted on average after a few thousands of backtracks. Currently, restarting after a dozen backtracks results in much better performance.\n\n\n\nIn 2010, a new feature for SOLUTORS was introduced in the Solvers class:\nWe've also updated the solvers class to be more powerful and easier to use.\nWe also added two new features for SolUTORS:\nWe've updated the solvers class to be more powerful and easier to use.\nWhen the first version of the solvers class was released, we had an entire list of problems that required more attention. Many were more frustrating. Some were more difficult to learn.\nWhen a system was updated to include both SolUTORS and SOLUTORS, the system required more attention. Many were more frustrating. Some were more frustrating.\nWhen a system was updated to include both SolUTORS and SOLUTORS, the system required more attention. Many were more frustrating. Some were more frustrating.\nThe following table shows the problems that require more attention:\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolving problems that require more attention:\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS : No progress\nSolUTORS :", "histories": [["v1", "Tue, 18 Feb 2014 17:39:39 GMT  (23kb)", "http://arxiv.org/abs/1402.4413v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["shai haim", "marijn heule"], "accepted": false, "id": "1402.4413"}, "pdf": {"name": "1402.4413.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Marijn Heule"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n40 2.\n44 13\nv1 [\ncs .A\nI] 1\n8 Fe\nb 20"}, {"heading": "1 Introduction", "text": "Restarts have been proposed for satisfiability (SAT) solvers to counter heavy-tail behavior [1]. Initially, branching heuristics were randomized to make sure that the search-tree would be different after each restart. Also, restarts should not be applied too frequently to guarantee that a solver can explore the entire search-tree between two restarts in case a problem has no solutions. For modern conflict-driven clause learning (CDCL) solvers [2] this is no longer required. Decision heuristics are dynamic and updated after every conflict [3]. By recording conflict clauses, CDCL solvers can proof unsatisfiability even in case of ultra rapid restarts.\nNowadays, restarts have become an essential feature of CDCL solvers. Many different strategies have been studied and used [4\u201311]. State-of-the-art SAT solvers tend to restart more and more frequently. An explanation for this trend is that the heuristics and data-structures have become restart-friendly. Therefore we decided to experiment with strategies that restart radically faster than commonly used in the CDCL solvers. The results show that these strategies are effective on the industrial benchmarks of the SAT 2009 competition."}, {"heading": "2 Restarts", "text": "Restart strategies have been used in SAT solvers for over a decade. First, we will provide an overview of their use in state-of-the-art solvers. Second, we will discuss two aspects of CDCL solvers, heuristics and data structures, that influenced these strategies. Recent developments in these areas facilitate frequent restarts. Third, we argue that \u2013 due to rapid restarts \u2013 CDCL solvers have become complete local search solvers.\n\u22c6 The second author is supported by the Dutch Organization for Scientific Research (NWO) under grant 617.023.611"}, {"heading": "2.1 A history of restart strategies", "text": "Although currently all competitive CDCL solvers use restarts, this was not always the case. The solver grasp [12], which first introduced clause learning in the context of satisfiability testing, did not use restarts in its original version. Following the work of Gomes et al. [1], which demonstrated the effectiveness of restart for addressing issues arising from the heavy-tailed distribution, developers started equipping their solvers with fixed-size restart strategies. The solvers zChaff [3], BerkMin [13] use rather frequent fixed restarts with restart sizes of 700 and 550 respectively, while the solver Siege [14] uses a larger fixed restart size of 16,000 conflicts.\nMiniSAT 1.13 [15] was the first to demonstrate the effectiveness of the geometric restart strategy suggested by Walsh [5]. Starting with a small first restart, the size of consecutive restarts grows geometrically. A commonly used restart strategy in the recent years is based on a sequence of restart sizes suggested by Luby et al. [4]. In their work the authors show that the suggested sequence is log optimal when the runtime distribution of the problems is unknown. In this strategy the length of restart i is u \u00b7 ti when u is a constant unit run and\nti =\n{\n2 k\u22121, if i = 2k \u2212 1\nti\u22122k\u22121+1, if 2k\u22121 \u2264 i < 2k \u2212 1.\nSince unit runs are commonly short, solvers using the Luby restart strategy exhibit frequent restarts. The solvers Rsat 2.0 [16] and TiniSat [17] use a unit run of 512 conflicts, while MiniSAT 2.1 [18] and precoSAT [8] use a shorter unit run of 100 conflicts. The solver picoSAT [7] introduced a frequent restart strategy in which the restart length grows geometrically until it reaches a bound. At this point the restart sequence starts again and the bound grows geometrically. Another approach, which receives much attention lately, combines an underlying uniform restart strategy with a dynamic element which can induce, or suppress, restarts. The dynamic decision can be made according to variable agility [6\u20138], variety of decision levels in learnt clauses and backtrack sizes [9, 10], or using local search techniques [11]."}, {"heading": "2.2 Direction heuristics", "text": "Direction heuristics select the value for decision variables. In theory, these heuristics can be very powerful: Perfect direction heuristics would result in a solver that never needs to backtrack to find a solution. If such a heuristic exists, which can be computed in polynomial time, then P = NP . CDCL solvers use a variety of direction heursics.\nFor instance, zChaff maintains two counters for each variable, one for true and one for false. These counters refer to the activity in recent conflicts. The sign of the highest counter is preferred. The direction heuristics in MiniSAT are very minimalistic: It uses negative branching: i.e. the decision variable is always assigned to false. Although it might seem a bit arbitrary, it is not. Two properties of this heuristic contribute the fast performance. First, it consequently chooses the same sign. Therefore it keeps searching in the same search space. Second, always branching on false is much better than always branching on true. The latter is an artifact of the encoding of most\nbenchmark instances. A direction heuristics technique called phase-saving was introduced in Rsat. Phase-saving assigns each decision variable to the value last forced by Boolean constraint propagation (BCP). In essence, this technique was already used in local search solvers. We will further discuss this in Section 2.4.\nThe changes in direction heuristics can hardly be separated from the trend we observed for restart strategies. Rapid restarts only make sense in case the solver will not end up in a completely different search space again and again. With the direction heuristics used in zChaff this could easily happen. If for a high ranked variable both counters are almost equal than that variable can be flipped frequently. While using negative branching it will happen less often. Yet as soon as a decision variable is chosen which BCP mostly assigns to true, the search space becomes different. However, phase-saving is ideal for rapid restarts since this direction heuristic ensures one hardly moves after a restart."}, {"heading": "2.3 Boolean constraint propagation", "text": "Most of the computational cost of CDCL solvers is spent on BCP. Moskewicz et al. [3] state that in most cases it is greater than 90% of the total cost. This observation has consequences for rapid restart strategies: If a solver would restart very frequently, say after every couple of conflicts, then it often has to go down the search-tree all the way from the root. As a result, much more time will be spent on BCP slowing down the solver.\nAn important breakthrough in speeding up BCP is the introduction of the watch literal data structure in zChaff [3]. This data structure is now used in all state-of-the-art CDCL solvers. It has been implemented very efficiently in MiniSAT [15]. Recent improvements of this data structure were used in picoSAT [7]. Additionally, the relative burden of BCP can be reduced by spending more time on reasoning techniques. For example by making conflict analysis stronger. Two recent improvements in this direction are conflict clause minimization [19] and conflict clause (self-) subsumption [20].\nBoth developments influence the optimal restart strategy. The cheaper the relative cost of going down the search-tree, the cheaper it is to perform a restart. Therefore, it is expected that future improvements in BCP speed and additional reasoning will ensure that the optimal restart strategy will be more rapid."}, {"heading": "2.4 Complete local search", "text": "Ten challenges for SAT solving have been posed by Selman et al. [21] in 1997. Although several of these challenges have been faced, hardly any progress has been reported on Challenge 5: Desiging a competitive complete local search solver. Appearently, it is hard to add completeness to local search solvers effectively. On the other hand, CDCL solvers have been slowly begun to mimic local search solvers. This could explain why the performance of current CDCL solvers heavily depends on the seed, even for unsatisfiable benchmarks.\nAn important step towards local search is the introduction of phase-saving in CDCL solvers in 2007 [16]. Essentially the same technique is used in the local search SAT solver UnitWalk [22] since 2001. The UnitWalk algorithm starts by initializing a\nrandom full assignment. In each iteration, this assignment is improved by the following procedure: First, a random order of the variables is created. Second, the most important (based on this random order) free variable is assigned to the value in the full assignment. Third, BCP is applied. Each assignment due to BCP is copied to the full assignment. After BCP is finished, the procedure returns to the second step until all variables are assigned. In other words, both techniques copy the value from the full assignment for decision variables and copy the value to the full assignment for implied variables.\nDue to the combination of phase-saving and rapid restarts, one can argue that CDCL solvers hardly perform search anymore. They merely improve the full assignment, while recording clauses for every encountered conflict. Therefore, modern CDCL solvers could be considered as complete local search solvers. This claim will become stronger if the trend towards ultra rapid restarts will continue."}, {"heading": "3 Results", "text": "Because we observed several signs in favor of ultra rapid restarts, we decided to experiment with strategies that restart radically faster compared to those used in the current CDCL solvers. The dataset we have used for this experiment includes all industrial instances which were used in the SAT competition of 2009. All the experiments presented in this paper were conducted on a cluster of 14 Dual Intel Xeon CPUs with EM64T (64- bit) extensions, running at 3.2GHz with 4GB of RAM under Debian GNU/Linux 4.0.\nThe solver we used for the experiments is the award-winning MiniSAT 2.0 which we equipped with a phase-saving direction heuristic. We experimented with 12 different unit runs for the Luby sequence and used a timeout of 900 seconds. To provide more stable numbers, we ran all experiments with three different seeds.\nThe original version of MiniSAT 2.0, which applies negative branching and uses a geometrical restart strategy, solves 100 instances (44 SAT, 56 UNSAT) within the timeout. Figure 1 shows the results for the adapted solver using phase-saving and Luby sequences. Notice that using any of these Luby sequences solves many more benchmark instances compared to the original version. The optimal restart strategy for this test set seems around a unit run of 6 or 8. Recall that this number is much smaller than what is commonly used in CDCL solvers.\nThe size of the unit run has a clear impact on the number of conflicts the solver encounters while solving a problem. Table 1 shows the average numbers. The smaller the unit run, the smaller the number of conflicts. Although the results using a unit run of 1 and 512 show a comparable performance on the dataset, the former resolves significantly fewer conflicts. Apparently, smaller unit runs require less search to solve instances. The results using other unit runs hint in this direction as well. Therefore, we expect that \u2013 assuming that the (relative) cost of performing a restart will further be reduced \u2013 even smaller unit runs will appear optimal in the future."}, {"heading": "4 Conclusions", "text": "We showed that the award winning solver MiniSAT 2.0 can significantly be improved by adding phase-saving and rapid restarts. The optimal strategy on the industrial benchmarks of the SAT 2009 competition restarts far more frequently compared to strategies used by the current state-of-the-art solvers. This result supports our observation that SAT solvers tend towards ultra rapid restarts and become complete local search solvers."}], "references": [{"title": "Boosting combinatorial search through randomization", "author": ["C. Gomes", "B. Selman", "H.A. Kautz"], "venue": "AAAI/IAAI.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1998}, {"title": "Chapter 4", "author": ["J.P. Marques-Silva", "I. Lynce", "S. Malik"], "venue": "Conflict-Driven Clause Learning SAT Solvers. In Handbook of Satisfiability. IOS Press", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2009}, {"title": "Chaff: engineering an efficient SAT solver", "author": ["M. Moskewicz", "C. Madigan", "Y. Zhao", "L. Zhang", "S. Malik"], "venue": "Proceedings of the 38th conference on Design automation", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2001}, {"title": "Optimal speedup of Las Vegas algorithms", "author": ["M. Luby", "A. Sinclair", "D. Zuckerman"], "venue": "Inf. Process. Lett. 47(4)", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1993}, {"title": "Search in a small world", "author": ["T. Walsh"], "venue": "In Dean, T., ed.: IJCAI 99: Proceedings of the Sixteenth International Joint Conference on Artificial Intelligence, Morgan Kaufmann", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1999}, {"title": "PicoSAT essentials", "author": ["A. Biere"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation 4", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2008}, {"title": "Rsat description for SAT competition", "author": ["K. Pipatsrisawat", "A. Darwiche"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "GRASP - a new search algorithm for satisfiability", "author": ["J. Marques-Silva", "K.A. Sakallah"], "venue": "ICCAD.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1996}, {"title": "BerkMin: a fast and robust sat-solver", "author": ["E. Goldberg", "Y. Novikov"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2002}, {"title": "Efficient algorithms for clause learning SAT solvers", "author": ["L. Ryan"], "venue": "PhD thesis, Simon Fraser University, School of Computing Science", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2004}, {"title": "An extensible SAT-solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "In Giunchiglia, E., Tacchella, A., eds.: Theory and Applications of Satisfiability Testing, 6th International Conference, SAT 2003. LNCS 2919, Springer", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2003}, {"title": "A lightweight component caching scheme for satisfiability solvers", "author": ["K. Pipatsrisawat", "A. Darwiche"], "venue": "In Marques-Silva, J., Sakallah, K.A., eds.: SAT 2007: Theory and Applications of Satisfiability Testing, 10th International Conference. LNCS 4501, Springer", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2007}, {"title": "A case for simple SAT solvers", "author": ["J. Huang"], "venue": "In Bessiere, C., ed.: CP. LNCS 4741, Springer", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2007}, {"title": "Minisat 2.1 and minisat++ 1.0 sat race 2008 editions", "author": ["N. S\u00f6rensson", "N. E\u00e9n"], "venue": "Technical report", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2008}, {"title": "Minisat v1.13 a sat solver with conflict-clause minimization", "author": ["N. S\u00f6rensson", "N. E\u00e9n"], "venue": "Technical report", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2005}, {"title": "On-the-fly clause improvement", "author": ["H. Han", "F. Somenzi"], "venue": "Theory and Applications of Satisfiability Testing - SAT 2009. LNCS 5584, Springer", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2009}, {"title": "Ten challenges in propositional reasoning and search", "author": ["B. Selman", "H. Kautz", "D. McAllester"], "venue": "IJCAI\u201997, San Francisco, CA, USA, Morgan Kaufmann Publishers Inc.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1997}, {"title": "Solving boolean satisfiability using local search guided by unit clause elimination", "author": ["E. Hirsch", "A. Kojevnikov"], "venue": "Principles and Practice of Constraint Programming", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2001}, {"title": "Theory and Applications of Satisfiability Testing - SAT 2008, 11th International Conference, SAT 2008, Guangzhou, China, May 12-15, 2008", "author": ["H.K. B\u00fcning", "X. Zhao", "eds."], "venue": "Proceedings. In B\u00fcning, H.K., Zhao, X., eds.: SAT. LNCS 4996, Springer", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [{"referenceID": 0, "context": "Restarts have been proposed for satisfiability (SAT) solvers to counter heavy-tail behavior [1].", "startOffset": 92, "endOffset": 95}, {"referenceID": 1, "context": "For modern conflict-driven clause learning (CDCL) solvers [2] this is no longer required.", "startOffset": 58, "endOffset": 61}, {"referenceID": 2, "context": "Decision heuristics are dynamic and updated after every conflict [3].", "startOffset": 65, "endOffset": 68}, {"referenceID": 3, "context": "Many different strategies have been studied and used [4\u201311].", "startOffset": 53, "endOffset": 59}, {"referenceID": 4, "context": "Many different strategies have been studied and used [4\u201311].", "startOffset": 53, "endOffset": 59}, {"referenceID": 5, "context": "Many different strategies have been studied and used [4\u201311].", "startOffset": 53, "endOffset": 59}, {"referenceID": 6, "context": "Many different strategies have been studied and used [4\u201311].", "startOffset": 53, "endOffset": 59}, {"referenceID": 7, "context": "The solver grasp [12], which first introduced clause learning in the context of satisfiability testing, did not use restarts in its original version.", "startOffset": 17, "endOffset": 21}, {"referenceID": 0, "context": "[1], which demonstrated the effectiveness of restart for addressing issues arising from the heavy-tailed distribution, developers started equipping their solvers with fixed-size restart strategies.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "The solvers zChaff [3], BerkMin [13] use rather frequent fixed restarts with restart sizes of 700 and 550 respectively, while the solver Siege [14] uses a larger fixed restart size of 16,000 conflicts.", "startOffset": 19, "endOffset": 22}, {"referenceID": 8, "context": "The solvers zChaff [3], BerkMin [13] use rather frequent fixed restarts with restart sizes of 700 and 550 respectively, while the solver Siege [14] uses a larger fixed restart size of 16,000 conflicts.", "startOffset": 32, "endOffset": 36}, {"referenceID": 9, "context": "The solvers zChaff [3], BerkMin [13] use rather frequent fixed restarts with restart sizes of 700 and 550 respectively, while the solver Siege [14] uses a larger fixed restart size of 16,000 conflicts.", "startOffset": 143, "endOffset": 147}, {"referenceID": 10, "context": "13 [15] was the first to demonstrate the effectiveness of the geometric restart strategy suggested by Walsh [5].", "startOffset": 3, "endOffset": 7}, {"referenceID": 4, "context": "13 [15] was the first to demonstrate the effectiveness of the geometric restart strategy suggested by Walsh [5].", "startOffset": 108, "endOffset": 111}, {"referenceID": 3, "context": "[4].", "startOffset": 0, "endOffset": 3}, {"referenceID": 11, "context": "0 [16] and TiniSat [17] use a unit run of 512 conflicts, while MiniSAT 2.", "startOffset": 2, "endOffset": 6}, {"referenceID": 12, "context": "0 [16] and TiniSat [17] use a unit run of 512 conflicts, while MiniSAT 2.", "startOffset": 19, "endOffset": 23}, {"referenceID": 13, "context": "1 [18] and precoSAT [8] use a shorter unit run of 100 conflicts.", "startOffset": 2, "endOffset": 6}, {"referenceID": 5, "context": "The solver picoSAT [7] introduced a frequent restart strategy in which the restart length grows geometrically until it reaches a bound.", "startOffset": 19, "endOffset": 22}, {"referenceID": 5, "context": "The dynamic decision can be made according to variable agility [6\u20138], variety of decision levels in learnt clauses and backtrack sizes [9, 10], or using local search techniques [11].", "startOffset": 63, "endOffset": 68}, {"referenceID": 6, "context": "The dynamic decision can be made according to variable agility [6\u20138], variety of decision levels in learnt clauses and backtrack sizes [9, 10], or using local search techniques [11].", "startOffset": 135, "endOffset": 142}, {"referenceID": 2, "context": "[3] state that in most cases it is greater than 90% of the total cost.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "An important breakthrough in speeding up BCP is the introduction of the watch literal data structure in zChaff [3].", "startOffset": 111, "endOffset": 114}, {"referenceID": 10, "context": "It has been implemented very efficiently in MiniSAT [15].", "startOffset": 52, "endOffset": 56}, {"referenceID": 5, "context": "Recent improvements of this data structure were used in picoSAT [7].", "startOffset": 64, "endOffset": 67}, {"referenceID": 14, "context": "Two recent improvements in this direction are conflict clause minimization [19] and conflict clause (self-) subsumption [20].", "startOffset": 75, "endOffset": 79}, {"referenceID": 15, "context": "Two recent improvements in this direction are conflict clause minimization [19] and conflict clause (self-) subsumption [20].", "startOffset": 120, "endOffset": 124}, {"referenceID": 16, "context": "[21] in 1997.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "An important step towards local search is the introduction of phase-saving in CDCL solvers in 2007 [16].", "startOffset": 99, "endOffset": 103}, {"referenceID": 17, "context": "Essentially the same technique is used in the local search SAT solver UnitWalk [22] since 2001.", "startOffset": 79, "endOffset": 83}], "year": 2014, "abstractText": "We observe a trend regarding restart strategies used in SAT solvers. A few years ago, most state-of-the-art solvers restarted on average after a few thousands of backtracks. Currently, restarting after a dozen backtracks results in much better performance. The main reason for this trend is that heuristics and data structures have become more restart-friendly. We expect further continuation of this trend, so future SAT solvers will restart even more rapidly. Additionally, we present experimental results to support our observations.", "creator": "dvips(k) 5.991 Copyright 2011 Radical Eye Software"}}}