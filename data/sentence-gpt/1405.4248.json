{"id": "1405.4248", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-May-2014", "title": "Les math\\'ematiques de la langue : l'approche formelle de Montague", "abstract": "We present a natural language modelization method which is strongely relying on mathematics. This method, called \"Formal Semantics,\" has been initiated by the American linguist Richard M. Montague in the 1970's. The algorithm, built from a number of mathematical techniques, is a highly robust mathematical framework that can be applied to the domain of linguistic analysis. We first investigate the use of functional language models (the basic models) to assess the functional language model of language.\n\n\n\nThe framework is composed of a framework of a theoretical framework based on a mathematical framework, the first to describe functional language models. This framework uses a number of mathematical methods to assess the functional language model of language analysis. For example, we can identify the type of the language, how many units of the language should be translated to the language's output. For example, we can identify the order of number of sentences, and how many parts of the language should be used. The resulting language model is then used to identify the grammatical, grammatical, grammatical, grammatical, grammatical, and grammatical features. We define the functional language model as \"Formal Semantics,\" which is \"a framework of a theoretical framework based on a mathematical framework.\" For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language should be used. For example, we can identify the type of the language, how many parts of the language", "histories": [["v1", "Fri, 16 May 2014 17:17:19 GMT  (19kb,D)", "http://arxiv.org/abs/1405.4248v1", "14 pages, in French. Will appear in the journal Quadrature (this http URL) in 2015"]], "COMMENTS": "14 pages, in French. Will appear in the journal Quadrature (this http URL) in 2015", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["yannis haralambous"], "accepted": false, "id": "1405.4248"}, "pdf": {"name": "1405.4248.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["formelle de Montague", "Yannis Haralambous", "\u2212\u2212\u2212\u2192 LangLog"], "emails": [], "sections": [{"heading": null, "text": "Les math\u00e9matiques de la langue : l\u2019approche formelle de Montague\u2217\nYannis Haralambous"}, {"heading": "19 mai 2014", "text": "R\u00e9sum\u00e9\nNous pr\u00e9sentons une m\u00e9thode de mod\u00e9lisation de la langue naturelle qui est fortement bas\u00e9e sur les math\u00e9matiques. Cette m\u00e9thode, appel\u00e9e \u00abs\u00e9mantique formelle\u00bb, a \u00e9t\u00e9 initi\u00e9e par le linguiste am\u00e9ricain Richard M. Montague dans les ann\u00e9es 1970. Elle utilise des outils math\u00e9matiques tels que les langages et grammaires formels, la logique du 1er ordre, la th\u00e9orie de types et le \u03bb-calcul. Nous nous proposons de faire d\u00e9couvrir au lecteur tant la s\u00e9mantique formelle de Montague que les outils math\u00e9matiques dont il s\u2019est servi."}, {"heading": "1 Introduction", "text": "La mod\u00e9lisation math\u00e9matique de la langue que nous pr\u00e9sentons ici, date des ann\u00e9es 70 du si\u00e8cle dernier. Les langages artificiels (comme le langage de la logique ou les divers langages de programmation) existaient d\u00e9j\u00e0 mais les linguistes pensaient que les langues naturelles \u00e9taient bien trop chaotiques pour que l\u2019on puisse leur appliquer les m\u00eames m\u00e9thodes que pour les langages artificiels. Arrive alors un certain Richard M. Montague qui pr\u00e9tend que c\u2019est tout \u00e0 fait possible, \u00e0 condition d\u2019utiliser des outils math\u00e9matiques \u00e9volu\u00e9s, et il le d\u00e9montre \u00e0 travers trois articles (dont le premier, de 1970, s\u2019intitule, de mani\u00e8re assez provocante, L\u2019anglais en tant que langage formel [13]). Malheureusement Montague est mort assez jeune 1 mais son travail a n\u00e9anmoins r\u00e9volutionn\u00e9 la linguistique et l\u2019a rapproch\u00e9 des math\u00e9matiques et de l\u2019informatique.\nDans cet article nous allons d\u00e9crire les outils math\u00e9matiques dont s\u2019est servi Montague pour mod\u00e9liser la langue naturelle : les langages formels, les grammaires formelles, le \u03bb-calcul typ\u00e9, la logique du 1er ordre, la th\u00e9orie des ensembles. Ce texte s\u2019inspire fortement (tout en le simplifiant) de l\u2019ouvrage [4]."}, {"heading": "2 L\u2019approche de Montague", "text": "La langue sert avant tout de parler du monde. Nos points de d\u00e9part seront donc le \u00abmonde\u00bb et la \u00ablangue\u00bb. Le \u00abmonde\u00bb, que nous noterons Monde peut \u00eatre le monde r\u00e9el, un monde imaginaire, ou simplement un ensemble d\u2019objets ou d\u2019id\u00e9es abstraites (d\u2019ailleurs, \u00e0 la section 7.3 nous parlerons de l\u2019ensemble des \u00abmondes possibles\u00bb). La \u00ablangue (naturelle)\u00bb, que nous noterons LangNat, sera un ensemble de phrases fran\u00e7aises, orthographiquement et syntaxiquement correctes, et qui se r\u00e9f\u00e8rent aux objets de l\u2019ensemble Monde.\nPour \u00e9tudier la langue, Montague propose d\u2019intercaler entre LangNat et Monde, un ensemble de formules \u00e9crites dans un langage artificiel interm\u00e9diaire, bas\u00e9 sur la logique de 1er ordre et le \u03bb-calcul typ\u00e9. Nous noterons par LangLog l\u2019ensemble des traductions des phrases de LangNat dans ce langage.\n\u2217Une version plus \u00e9volu\u00e9e de ce texte va para\u00eetre dans la revue Quadrature (http://www.quadrature.info) en 2015.\n1. Et de mani\u00e8re tragique, au point o\u00f9 sa mort a inspir\u00e9 un roman policier, la S\u00e9mantique du meurtre d\u2019Aifric Campbell [3].\nar X\niv :1\n40 5.\n42 48\nv1 [\ncs .C\nL ]\n1 6\nM ay\n2 01\n4\nOn a donc la situation suivante :\nLangNat Trad\u2212\u2212\u2212\u2192 LangLog Inter\u2212\u2212\u2212\u2192Monde,\no\u00f9 Trad est la traduction des phrases fran\u00e7aises en langage interm\u00e9diaire, et Inter le lien entre LangLog et le Monde que l\u2019on appelle interpr\u00e9tation 2.\nDans la suite nous utilisons des caract\u00e8res b\u00e2ton inclin\u00e9s pour repr\u00e9senter les mots de LangNat, et des caract\u00e8res gras pour repr\u00e9senter les entit\u00e9s de Monde. Ainsi, G\u00e9rard \u2208 LangNat sera un nom (propre) masculin de six lettres, qui se prononce /Ze.KaK/. Par contre, g\u00e9rard \u2208 Monde sera un individu, en chair et en os, identifi\u00e9 par ce pr\u00e9nom. On va consid\u00e9rer que dans Monde il n\u2019y a qu\u2019un seul g\u00e9rard.\nDans cet article nous allons d\u00e9crire, dans l\u2019ordre, LangNat (\u00a7 3), LangLog (\u00a7 4), Trad (\u00a7 5) et Monde/Inter (\u00a7 6)."}, {"heading": "3 La structure de la langue", "text": "Parmi les nombreuses mani\u00e8res d\u2019\u00e9tudier la langue naturelle, celles qui vont nous int\u00e9resser dans cet article sont la syntaxe et la s\u00e9mantique. La syntaxe \u00e9tudie grosso modo la composition des phrases, c\u2019est-\u00e0-dire la mani\u00e8re dont les mots se combinent pour former des phrases, selon leurs cat\u00e9gories grammaticales (nom, adjectif, adverbe, verbe, etc.).\nLa s\u00e9mantique est l\u2019\u00e9tude de la signification. Il s\u2019av\u00e8re que la syntaxe est un outil indispensable pour l\u2019\u00e9tude de la s\u00e9mantique gr\u00e2ce au\nprincipe suivant :\nPrincipe de compositionnalit\u00e9. La s\u00e9mantique d\u2019une phrase s\u2019obtient \u00e0 partir des s\u00e9mantiques de ses parties et de la mani\u00e8re dont elles ont \u00e9t\u00e9 compos\u00e9es (= la syntaxe de la phrase).\nEn effet, pour comprendre le sens de la phrase G\u00e9rard aime Alice il faut savoir ce que sont (ou peuvent \u00eatre) G\u00e9rard, Alice et l\u2019action d\u2019aimer, et identifier par la syntaxe de la phrase le fait que c\u2019est G\u00e9rard qui est en position de sujet et c\u2019est donc lui qui aime Alice, et non pas l\u2019inverse.\nPour commencer, voyons comment analyser syntaxiquement les phrases de LangNat. Les outils math\u00e9matiques qui vont nous servir sont les langages formels et les grammaires formelles."}, {"heading": "3.1 Langages formels", "text": "D\u00e9finissons d\u2019abord la notion de mono\u00efde libre. Soit \u03a3 un ensemble quelconque que nous allons appeler alphabet.\nD\u00e9finition 1. On appelle mono\u00efde libre (\u03a3\u2217, \u00b7, \u03b5) sur \u03a3, l\u2019ensemble de tous les produits x1 \u00b7 \u00b7 \u00b7xn (n \u2265 1) d\u2019\u00e9l\u00e9ments de \u03a3, auquel on ajoute l\u2019\u00e9l\u00e9ment \u03b5, appel\u00e9 \u00e9l\u00e9ment neutre. La loi \u00b7 doit \u00eatre associative.\nOn appelle concat\u00e9nation la loi du mono\u00efde, et on s\u2019autorise de ne pas la noter. Les \u00e9l\u00e9ments du mono\u00efde sont appel\u00e9s \u00abmots\u00bb, et \u03b5 est le \u00abmot vide\u00bb.\nD\u00e9finition 2. Un langage formel L sur un alphabet \u03a3 est un sous-ensemble quelconque du mono\u00efde libre \u03a3\u2217.\nCe qui fait la force des langages formels, c\u2019est que \u2014 malgr\u00e9 son appellation \u2014, un \u00abalphabet\u00bb n\u2019est pas forc\u00e9ment un ensemble de lettres. Les \u00e9l\u00e9ments d\u2019un \u00abalphabet\u00bb peuvent \u00eatre des motscl\u00e9 d\u2019un langage de programmation (dans ce cas, un \u00abmot\u00bb sera, par exemple, un programme dans ce langage), des symboles math\u00e9matiques (un \u00abmot\u00bb sera alors une formule), des nucl\u00e9otides (un\n2. Attention, ici le mot \u00abinterpr\u00e9tation\u00bb a un sens technique strict (cf. \u00a7 6), qu\u2019il ne faut pas confondre avec celui du langage courant.\n\u00abmot\u00bb sera alors un sous-brin d\u2019ADN), etc. Dans notre cas, l\u2019\u00abalphabet\u00bb sera form\u00e9 de mots de la langue fran\u00e7aise, et les \u00e9l\u00e9ments de LangNat seront des phrases de la langue fran\u00e7aise.\nSe pose alors la question : si un langage formel est un sous-ensemble quelconque du mono\u00efde libre, alors comment le d\u00e9crire ?\nToute la difficult\u00e9 est l\u00e0 : comment choisir les mots qui forment un langage formel \u2014 ou, de mani\u00e8re \u00e9quivalente, comment d\u00e9cider si un mot appartient ou non \u00e0 un langage formel donn\u00e9 (\u00e9ventuellement infini) ?\nUne m\u00e9thode pour d\u00e9crire des langages formels est celle des grammaires formelles."}, {"heading": "3.2 Grammaires formelles", "text": "Une grammaire formelle est un ensemble de r\u00e8gles de production. En partant d\u2019un symbole appel\u00e9 \u00abaxiome de d\u00e9part\u00bb, on applique ces r\u00e8gles \u00e0 un ensemble de symboles auxiliaires appel\u00e9s \u00abnon-terminaux\u00bb jusqu\u2019\u00e0 aboutir aux mots du langage que l\u2019on souhaite d\u00e9finir (et qui donc s\u2019appellent \u00abterminaux\u00bb, puisqu\u2019on ne peut aller plus loin).\nD\u00e9finition 3. Soit \u03a3 un alphabet. Une grammaire formelle G est un quadruplet (S, V,\u03a3, P ) o\u00f9 S est un \u00e9l\u00e9ment appel\u00e9 axiome de d\u00e9part, V l\u2019ensemble des symboles non-terminaux, \u03a3 l\u2019ensemble des symboles terminaux, et P l\u2019ensemble des productions.\nUne production p est un couple (X,u), o\u00f9 X \u2208 V \u222a {S}, et u \u2208 (\u03a3 \u222a V )\u2217 (c\u2019est-\u00e0-dire le mono\u00efde libre sur les \u00e9l\u00e9ments de \u03a3 et de V ).\nUne suite d\u2019applications successives de productions est appel\u00e9e une d\u00e9rivation.\nOn note une telle production p : X \u2192 u. Une production envoie donc un \u00e9l\u00e9ment non-terminal (d\u2019o\u00f9 son nom de \u00abnon-terminal\u00bb) ou l\u2019axiome de d\u00e9part, \u00e0 un mot comportant des terminaux et des non-terminaux. On peut appliquer des productions aux mots : si p : X \u2192 u et si le mot w s\u2019\u00e9crit w1Xw2 alors p produira le mot w1uw2. Mais attention : si w s\u2019\u00e9crit w1Xw2Xw3 alors une application de p peut produire w1uw2Xw3 ou w1Xw2uw3 (mais pas les deux en m\u00eame temps, pour que cela arrive il faudrait l\u2019appliquer deux fois). Et si w ne contient pas X, alors p laisse w inchang\u00e9.\nOn se pose alors la question suivante : est-ce qu\u2019un mot w peut \u00eatre l\u2019image d\u2019une d\u00e9rivation partant de S ? On dira alors que w est G-d\u00e9rivable.\nD\u00e9finition 4. Soit G = (S, V,\u03a3, P ) une grammaire formelle. Le langage formel engendr\u00e9 par G, not\u00e9 LG, est l\u2019ensemble des \u00e9l\u00e9ments de \u03a3\u2217 qui sont G-d\u00e9rivables.\nNotons bien que les \u00e9l\u00e9ments de LG sont tous des mots sur des terminaux. En effet, l\u2019axiome de d\u00e9part et les non-terminaux sont indispensables pour obtenir le langage formel engendr\u00e9 mais n\u2019y apparaissent pas eux-m\u00eames. Dans notre cas, les non-terminaux vont \u00eatre des cat\u00e9gories et fonctions grammaticales. Prenons un exemple. On peut d\u00e9crire syntaxiquement la phrase G\u00e9rard dort par la grammaire p1 : S\u2192 GN GV p2 : GN\u2192 N p3 : GV\u2192 V p4 : N\u2192 G\u00e9rard p5 : V\u2192 dort o\u00f9 S est l\u2019axiome de d\u00e9part ; les symboles GN (groupe nominal), GV (groupe verbal), N (nom) et V (verbe) sont des non-terminaux ; et, enfin, G\u00e9rard et dort sont des terminaux."}, {"heading": "3.3 Arbre syntaxique d\u2019une phrase", "text": "Comme on vient de le voir, pour d\u00e9crire la structure syntaxique d\u2019une phrase, il suffit de donner sa d\u00e9rivation partant de S, c\u2019est-\u00e0-dire l\u2019ensemble de productions \u00e0 travers lesquelles on obtient cette phrase.\nCette d\u00e9rivation peut \u00eatre admirablement bien illustr\u00e9e par un arbre syntaxique : il s\u2019agit d\u2019un arbre (c\u2019est-\u00e0-dire d\u2019un graphe connexe sans cycle) orient\u00e9, dont la racine est l\u2019axiome initial, les sommets interm\u00e9diaires sont les non-terminaux qui interviennent dans la production de la phrase, et les feuilles sont les mots de la phrase. Tout ensemble d\u2019ar\u00eates (orient\u00e9es) sortant d\u2019un sommet repr\u00e9sente alors une production, et les enfants d\u2019un sommet sont exactement les symboles de la partie droite de sa production.\nL\u2019arbre syntaxique de la fig. 1 repr\u00e9sente la d\u00e9rivation partant de S qui produit la phrase G\u00e9rard aime Alice."}, {"heading": "4 Le langage interm\u00e9diaire", "text": "La prochaine \u00e9tape consiste \u00e0 d\u00e9crire LangLog, c\u2019est-\u00e0-dire les formules du langage interm\u00e9diaire. Ce langage est bas\u00e9 sur deux outils math\u00e9matiques : la logique du 1er ordre et le \u03bb-calcul typ\u00e9.\n4.1 Notions de logique du 1er ordre Nous ne d\u00e9velopperons ici de la logique du 1er ordre que ce qui est n\u00e9cessaire pour notre expos\u00e9. Pour d\u00e9finir les formules logiques nous allons nous servir des symboles suivants : 1. symboles de constante a, b, c, . . . ; 2. symboles de variable x, y, z, . . . ; 3. symboles de pr\u00e9dicat P,Q,R, . . . qui prennent un certain nombre d\u2019arguments (on appelle\narit\u00e9 le nombre d\u2019arguments d\u2019un pr\u00e9dicat). Les arguments peuvent \u00eatre des variables ou des constantes. On note, par exemple, P (a, b, x) le pr\u00e9dicat ternaire dont les arguments sont a, b, x ;\n4. symboles d\u2019op\u00e9rateur qui s\u2019appliquent aux pr\u00e9dicats : l\u2019op\u00e9rateur unaire de n\u00e9gation \u00ac, et les op\u00e9rateurs binaires de conjonction \u2227, de disjonction \u2228, d\u2019implication \u2192, de double implication \u2194 ;\n5. symboles de quantificateur existentiel \u2203 et universel \u2200, qui s\u2019appliquent aux variables ; 6. le symbole d\u2019\u00e9galit\u00e9 = ; 7. des parenth\u00e8ses.\nD\u00e9finition 5. On d\u00e9finit une formule logique de mani\u00e8re r\u00e9cursive : 1. Un pr\u00e9dicat d\u2019arit\u00e9 n appliqu\u00e9 \u00e0 n constantes et/ou variables est une formule. 2. Si a et b sont des constantes ou des variables, a = b est une formule. 3. Si f est une formule, (f) et \u00acf sont des formules. 4. Si f est une formule et x une variable, \u2203x f et \u2200x f sont des formules. 5. Si f et g sont des formules, f \u2227 g, f \u2228 g, f \u2192 g et f \u2194 g sont des formules.\nLe lecteur aura sans doute remarqu\u00e9 que nous venons d\u2019\u00e9num\u00e9rer une multitude de symboles sans donner leur signification.\nIl y a une raison \u00e0 cela : en fait, une formule logique n\u2019est a priori rien d\u2019autre qu\u2019un assemblage de symboles abstraits (selon les r\u00e8gles syntaxiques donn\u00e9es par la d\u00e9finition 5) et c\u2019est gr\u00e2ce \u00e0 ce degr\u00e9 \u00e9lev\u00e9 d\u2019abstraction qu\u2019elle peut \u00eatre appliqu\u00e9e \u00e0 une infinit\u00e9 de situations diff\u00e9rentes.\nPour appliquer une formule \u00e0 une situation et lui donner ainsi un \u00absens\u00bb, on fait une interpr\u00e9tation, c\u2019est-\u00e0-dire une correspondance entre LangLog etMonde. Mais qu\u2019est-ce qu\u2019une interpr\u00e9tation au juste ?\nD\u00e9finition 6. Soit Z2 l\u2019ensemble {vrai, faux}. Une interpr\u00e9tation d\u2019une formule logique \u03c6 est une application Inter : LangLog \u2192 Monde telle que pour chaque constante c de \u03c6, Inter(c) \u2208 Monde, et pour chaque pr\u00e9dicat n-aire P de \u03c6, Inter(P ) est une fonction Monden \u2192 Z2. D\u2019autre part, pour toute variable x de \u03c6, Inter(x) devient une variable \u00e0 valeurs dans Monde.\nL\u2019interpr\u00e9tation de l\u2019op\u00e9rateur unaire \u00ac est une application Z2 \u2192 Z2 et celles des op\u00e9rateurs binaires \u2227, \u2228, \u2192 et \u2194 sont des applications Z2 \u00d7 Z2 \u2192 Z2, dont les valeurs sont donn\u00e9es par la table suivante (po\u00e9tiquement appel\u00e9e table de v\u00e9rit\u00e9) :\n\u03c6 \u03c8 \u00ac\u03c6 \u03c6 \u2227 \u03c8 \u03c6 \u2228 \u03c8 \u03c6\u2192 \u03c8 \u03c6\u2194 \u03c8 vrai vrai faux vrai vrai vrai vrai vrai faux faux faux vrai faux faux faux vrai vrai faux vrai vrai faux faux faux vrai faux faux vrai vrai\nDans une interpr\u00e9tation donn\u00e9e, une formule qui ne contient aucune variable est n\u00e9cessairement vraie ou fausse. Il en est de m\u00eame lorsqu\u2019elle contient uniquement des variables quantifi\u00e9es, c\u2019est\u00e0-dire telles que pour chacune il y ait un quantificateur qui lui soit appliqu\u00e9. Une variable non quantifi\u00e9e est appel\u00e9e libre. L\u2019interpr\u00e9tation d\u2019une formule contenant n variables libres est une fonction Monden \u2192 Z2 : sa valeur de v\u00e9rit\u00e9 d\u00e9pend des valeurs que prennent ses variables libres.\nApr\u00e8s cette rapide introduction \u00e0 (une partie de) la logique du 1er ordre, voyons comment traduire les phrases de LangNat en des formules logiques.\n5 Traduction LangNat\u2192 LangLog Nous allons noter Trad l\u2019application qui traduit les phrases de LangNat en des formules de LangLog. Une phrase du type G\u00e9rard dort d\u00e9crit une situation o\u00f9 il y a un agent identifi\u00e9 par le nom G\u00e9rard qui effectue l\u2019action de dormir. Dans la formule logique il est naturel de prendre une constante g pour repr\u00e9senter G\u00e9rard .\n\u00c0 son tour, g doit \u00eatre interpr\u00e9t\u00e9e par l\u2019entit\u00e9 du monde r\u00e9el qui correspond \u00e0 G\u00e9rard , notons cette entit\u00e9 g\u00e9rard. On a donc Trad(G\u00e9rard) = g et Inter(g) = g\u00e9rard.\nLe choix naturel pour traduire le verbe dort est un pr\u00e9dicat unaire dort. L\u2019interpr\u00e9tation de dort va \u00eatre une fonctionMonde\u2192 Z2, et, en particulier, on aura Inter(dort(g)) = Inter(dort)(Inter(g)) = Inter(dort)(g\u00e9rard) = vrai.\nMais comment d\u00e9duire la formule dort(g) \u00e0 partir de la grammaire formelle de la syntaxe de la phrase G\u00e9rard dort ? Cette grammaire n\u00e9cessite les r\u00e8gles suivantes : p1 : S\u2192 GN GV p2 : GN\u2192 N p3 : GV\u2192 V p4 : N\u2192 G\u00e9rard p5 : V\u2192 dort\nTous les symboles de cette grammaire sont traduits dans LangLog : en effet, GV et V sont traduits par le pr\u00e9dicat dort, GN et N par la constante g et, par le principe de compositionnalit\u00e9, S devient alors dort(g). On d\u00e9finit :\nTrad(S) = dort(g) Trad(GN) = Trad(N) = g Trad(GV ) = Trad(V ) = dort.\nNotre traduction est compl\u00e8te puisque tous les sommets de l\u2019arbre syntaxique de la phrase de LangNat ont \u00e9t\u00e9 traduits dans LangLog.\nPrenons maintenant une phrase l\u00e9g\u00e8rement plus complexe : G\u00e9rard aime Alice (cf. fig. 1). On peut s\u2019attendre \u00e0 avoir Trad(S) = aime(g, a) o\u00f9 g et a sont des constantes logiques dont les interpr\u00e9tations sont le vilain g\u00e9rard et la belle alice. De m\u00eame, dans ce cas, Trad(aime) = aime.\nMais attention ! Avons-nous traduit tous les sommets de l\u2019arbre de la fig. 1 en LangLog ? H\u00e9las, non ! Car, quelle est alors la traduction de GV? On ne peut \u00e9crire aime(_, a), cela n\u2019est pas une formule logique valide...\nMontague aurait pu s\u2019arr\u00eater l\u00e0, en disant : \u00abje sais traduire mes terminaux (G\u00e9rard , aime, Alice) et mon axiome de d\u00e9part (S) en langage logique, peu me chaut le reste\u00bb.\nQue nenni ! Son g\u00e9nie a consist\u00e9 \u2014 entre autres \u2014 \u00e0 dire que si l\u2019on veut \u00eatre honn\u00eate avec soim\u00eame, si l\u2019on veut aller au fond des choses, alors le principe de compositionnalit\u00e9 doit s\u2019appliquer partout, aussi bien dans LangNat, que dans LangLog, et la traduction d\u2019une composition doit \u00eatre la composition des traductions.\nAutrement dit : si S produit GN et GV, alors la traduction de S doit s\u2019obtenir \u00e0 partir des traductions de GN et de GV. Mais avec les outils math\u00e9matiques d\u00e9crits jusqu\u2019\u00e0 maintenant, cela n\u2019est pas possible. Il faut donc se servir d\u2019outils plus performants. Montague en a choisi deux : la th\u00e9orie des types et le \u03bb-calcul.\nVoyons d\u2019abord ce que sont les types et \u00e0 quoi ils servent."}, {"heading": "5.1 Th\u00e9orie des types", "text": "Avant de traduire en LangLog tous les sommets d\u2019un arbre syntaxique, il faut d\u00e9j\u00e0 se demander de quelle mani\u00e8re ils se combinent entre eux. Un exemple : dans la phrase G\u00e9rard aime Alice, l\u2019interpr\u00e9tation du pr\u00e9dicat binaire aime peut \u00eatre consid\u00e9r\u00e9e comme une application Monde2 \u2192 Z2 (elle envoie la paire d\u2019entit\u00e9s (g\u00e9rard,alice) vers la valeur vrai si g\u00e9rard aime alice et vers faux sinon).\nAutre exemple : dans la phrase G\u00e9rard aime Alice et Paul d\u00e9teste Virginie, la particule de coordination et va combiner deux phrases pour en produire une nouvelle, son interpr\u00e9tation sera donc une application Z2 \u00d7 Z2 \u2192 Z2.\nLa situation se complique encore plus dans le cas des adverbes : dans G\u00e9rard aime beaucoup Alice, l\u2019adverbe beaucoup agit sur le verbe, donc on peut consid\u00e9rer qu\u2019il transforme une application Monde2 \u2192 Z2 en une autre application Monde2 \u2192 Z2.\nEt que dire alors des modificateurs d\u2019adverbe comme vraiment beaucoup : en effet, vraiment agit sur beaucoup et est donc un transformateur de transformateur d\u2019application Monde2 \u2192 Z2...\nComment g\u00e9rer cette complexit\u00e9 qui semble cro\u00eetre inexorablement ? Voici la mod\u00e9lisation math\u00e9matique qui nous d\u00e9livre du cauchemar d\u00e9crit ci-dessus : Montague consid\u00e8re qu\u2019il n\u2019existe que deux types s\u00e9mantiques primitifs : celui de \u00abformule\u00bb (dont l\u2019interpr\u00e9tation dans Monde sera vrai ou faux) et celui de \u00abconstante individuelle\u00bb (dont l\u2019interpr\u00e9tation sera un \u00e9l\u00e9ment de Monde). Il note t les formules et e les constantes. Ensuite il prend le mono\u00efde libre {e, t}\u2217 dont il note la loi comme un produit scalaire \u3008,\u3009. Attention : cette loi n\u2019est pas associative, donc pas question de faire des \u00absimplifications\u00bb : \u3008e, \u3008e, t\u3009\u3009 n\u2019est pas la m\u00eame chose que \u3008\u3008e, e\u3009, t\u3009 !\nEnsuite, il appelle les \u00e9l\u00e9ments de ce mono\u00efde, des types s\u00e9mantiques complexes et fait correspondre chaque sommet de l\u2019arbre syntaxique \u00e0 un type s\u00e9mantique complexe, de la mani\u00e8re suivante : l\u2019\u00e9l\u00e9ment de gauche de \u3008,\u3009 est la \u00abdonn\u00e9e d\u2019entr\u00e9e\u00bb du type, son \u00e9l\u00e9ment de droite est sa \u00abdonn\u00e9e de sortie\u00bb.\nExemple : un pr\u00e9dicat unaire, comme dort, s\u2019applique \u00e0 une constante, son interpr\u00e9tation fournit une valeur de Z2. On dira donc qu\u2019il est de type \u3008e, t\u3009 (= \u00abil prend un e et il nous rend un t\u00bb).\nMais attention : on ne prend qu\u2019un seul \u00e9l\u00e9ment d\u2019entr\u00e9e \u00e0 la fois ! Un pr\u00e9dicat binaire ne sera donc pas de type \u3008{e, e}, t\u3009 (cette syntaxe n\u2019est pas valide) mais sera d\u00e9crit de mani\u00e8re r\u00e9cursive comme \u3008e, \u3008e, t\u3009\u3009.\nSi on y r\u00e9fl\u00e9chit un peu, c\u2019est parfaitement logique : un pr\u00e9dicat binaire auquel on fournit une valeur devient pr\u00e9dicat unaire, donc pour une entr\u00e9e e, la sortie est \u3008e, t\u3009. De m\u00eame, le type d\u2019un pr\u00e9dicat ternaire sera \u3008e, \u3008e, \u3008e, t\u3009\u3009\u3009 et ainsi de suite...\nDe la m\u00eame mani\u00e8re, la particule de conjonction et sera de type \u3008t, \u3008t, t\u3009\u3009, l\u2019adverbe beaucoup de type \u3008\u3008e, t\u3009, \u3008e, t\u3009\u3009, et le modificateur d\u2019adverbe vraiment, de type \u3008\u3008\u3008e, t\u3009, \u3008e, t\u3009\u3009, \u3008\u3008e, t\u3009, \u3008e, t\u3009\u3009\u3009. Arriv\u00e9 \u00e0 ce stade, le lecteur/la lectrice doit normalement se sentir \u00e9bloui(e) devant l\u2019\u00e9poustouflante beaut\u00e9 de ce mod\u00e8le : en effet, quelque soit le type s\u00e9mantique d\u2019un mot, aussi complexe soit-il, on peut le d\u00e9crire simplement par un \u00e9l\u00e9ment du mono\u00efde libre {e, t}\u2217... c\u2019est simple et efficace.\nNous r\u00e9\u00e9crivons sur la fig. 2 l\u2019arbre syntaxique de la fig. 1 en rempla\u00e7ant les symboles de la grammaire formelles par leurs types s\u00e9mantiques. Le lecteur peut constater que (a) \u00e0 chaque fois qu\u2019un sommet n\u2019a qu\u2019un seul enfant, le type s\u00e9mantique ne change pas, et (b) \u00e0 chaque fois qu\u2019un sommet a plusieurs enfants, leurs types s\u00e9mantiques se composent : ainsi, \u3008e, t\u3009 appliqu\u00e9 \u00e0 e donne t, et \u3008e, \u3008e, t\u3009\u3009 appliqu\u00e9 \u00e0 e donne \u3008e, t\u3009. On note \u00d7 cette composition : \u3008e, t\u3009 \u00d7 e = t. Pour qu\u2019une composition T1 \u00d7 T2 puisse avoir lieu, il faut que T1 soit un type complexe et que sa premi\u00e8re composante soit \u00e9gale \u00e0 T2.\nLa coh\u00e9rence s\u00e9mantique d\u2019une phrase provient du fait que les types s\u00e9mantiques des sommets de son arbre syntaxique se composent correctement, pour arriver au type de S qui est, invariablement, t (comme on peut le constater sur le graphe de la fig. 2).\nTout cela est bien pens\u00e9, mais on constate que l\u2019on ne sait toujours pas comment \u00e9crire les formules logiques correspondant aux sommets interm\u00e9diaires de l\u2019arbre syntaxique. C\u2019est l\u00e0 que le \u03bb-calcul vient \u00e0 la rescousse."}, {"heading": "5.2 Le \u03bb-calcul", "text": "Sous ce nom exotique et myst\u00e9rieux se cache tout simplement la notion de fonction : appliquer un \u00ab\u03bb-op\u00e9rateur\u00bb \u00e0 une expression math\u00e9matique ou logique revient tout simplement \u00e0 la transformer en fonction.\nAinsi, \u03bbx.f(x) est la m\u00eame chose que x 7\u2192 f(x), c\u2019est-\u00e0-dire la fonction f . L\u2019int\u00e9r\u00eat de la notation est qu\u2019elle nous permet de d\u00e9finir toutes sortes de fonctions. Par exemple, \u03bbx.\u03bby.(x+ y) est la fonction (de deux variables) qui \u00e0 (x, y) associe x + y, alors que \u03bbx.(x + y) est la fonction (d\u2019une variable) qui \u00e0 x associe la somme x+ y (sans donner plus d\u2019information sur y). De m\u00eame, \u03bbP.P (x) est la fonction qui associe \u00e0 un pr\u00e9dicat unaire sa valeur en x et \u03bbP.\u03bbx.P (x) est la fonction qui \u00e0 P et \u00e0 x associe P (x). Les amateurs de \u03bb-calcul s\u2019amusent m\u00eame \u00e0 noter \u03bbx.x la fonction identit\u00e9 et \u03bbx.c la fonction constante de valeur c.\nLorsqu\u2019on a une fonction f , on peut l\u2019appliquer \u00e0 une valeur x, et on note le r\u00e9sultat f(x). De m\u00eame, on peut appliquer une \u03bb-expression \u00e0 une valeur. Ainsi (\u03bbx. sin(x))(\u03c02 ) est tout simplement sin(\u03c02 ). On appelle cela, tout naturellement, une application.\nL\u2019utilisation que Montague fait de la notation \u03bb est tr\u00e8s judicieuse. Elle ob\u00e9it au principe suivant :\nPrincipe de \u00abcomposition-application\u00bb. Toute composition de types s\u00e9mantiques correspond \u00e0 une application de \u03bb-expressions.\nCe principe va nous guider pour retrouver les \u03bb-expressions correspondant aux sommets des arbres syntaxiques.\nPrenons comme exemple la phrase G\u00e9rard aime Alice et les arbres des fig. 1 et 2. On sait d\u00e9j\u00e0 que Trad(GN1) = g, Trad(GN2) = a et Trad(S) = aime(g, a). Appliquons le principe de composition-application pour trouver Trad(GV) et Trad(V).\nMais avant de le faire, un petit changement s\u2019impose, afin de nous mettre en conformit\u00e9 avec la th\u00e9orie des types : on n\u2019\u00e9crira plus aime(g, a) pour G\u00e9rard aime Alice, comme on l\u2019a fait jusqu\u2019\u00e0 maintenant, mais aime(a)(g). Cela ne change en rien l\u2019amour ind\u00e9fectible de G\u00e9rard pour Alice, c\u2019est juste que maintenant \u00abaime\u00bb n\u2019est plus un \u00abbanal pr\u00e9dicat binaire\u00bb, mais est fi\u00e8rement devenu un type complexe \u3008e, \u3008e, t\u3009\u3009 !\nRaisonnons maintenant \u00e0 reculons : on vient de d\u00e9cr\u00e9ter que Trad(S) = aime(a)(g) ; d\u2019autre part, on sait que Trad(GN1) = g ; quel sera Trad(GV) ?\nLaissons-nous guider par les types : dans la fig. 2, le type de GV est \u3008e, t\u3009. On peut en conclure que Trad(GV) n\u00e9cessite un \u03bb-op\u00e9rateur, qui doit capter le e pour en faire un t. Et c\u2019est ce \u03bb-op\u00e9rateur qui va recevoir le g quand on va appliquer Trad(GV) \u00e0 g. \u00c9crivons donc Trad(GV) = \u03bby.aime(a)(y).\nV\u00e9rifions : Trad(GV)(g) = (\u03bby.aime(a)(y))(g) = aime(a)(g) = Trad(S), donc tout va bien. De la m\u00eame mani\u00e8re, on d\u00e9finit Trad(V) = \u03bbx.\u03bby.aime(x)(y), et on v\u00e9rifie : Trad(V)(a) = (\u03bbx.\u03bby.aime(x)(y))(a) = \u03bby.aime(a)(y) = Trad(GV). cqfd. Le lecteur trouvera sur la fig. 3 la traduction dans LangLog de l\u2019arbre syntaxique de la phrase G\u00e9rard aime Alice :\nOn constate que la taille et la complexit\u00e9 des formules logiques sont assez vari\u00e9es : alors que Trad(GN1) = g et Trad(GN2) = a sont tr\u00e8s simples, Trad(V) est bien plus complexe. On peut dire qu\u2019intuitivement cela montre le potentiel d\u2019action cach\u00e9 dans le verbe : lorsque on monte vers la racine, le verbe agit sur les autres constituants, jusqu\u2019\u00e0 fournir la phrase compl\u00e8te."}, {"heading": "5.3 Un exemple : la coordination", "text": "Pour montrer la force de cette th\u00e9orie et exercer un peu nos neurones, posons-nous un petit casse-t\u00eate : la coordination. Le probl\u00e8me commence quand l\u2019insatiable G\u00e9rard se met \u00e0 pr\u00e9f\u00e9rer Alexia alors qu\u2019il aime Alice. Prenons la phrase G\u00e9rard aime Alice mais pr\u00e9f\u00e8re Alexia, et son arbre syntaxique (fig. 4). Les indices des GV et cGV servent uniquement \u00e0 les distinguer dans la suite. On a not\u00e9 cGV3 la partie mais pr\u00e9f\u00e8re Alexia, qui n\u2019est pas un simple groupe verbal mais un \u00abgroupe verbal muni d\u2019une conjonction\u00bb (d\u2019o\u00f9 le \u00abc\u00bb de cGV).\nQue dire de cette phrase ? Le mot mais correspond logiquement \u00e0 une conjonction et donc la traduction de S sera aime(a)(g)\u2227pre\u0301fe\u0300re(a\u2032)(g) o\u00f9 a = Trad(Alice) et a\u2032 = Trad(Alexia). D\u2019apr\u00e8s la section pr\u00e9c\u00e9dente, Trad(GV2) et Trad(GV4) seront resp. \u03bby.aime(a)(y) et \u03bby.pre\u0301fe\u0300re(a\u2032)(y).\nLa grande question est : que seront Trad(GV1), Trad(cGV3), et surtout Trad(CONJ) ?\nTra\u00e7ons d\u2019abord l\u2019arbre des types (fig. 5). Pour GV1, GV2, GV4, rien de nouveau, ce sont des \u3008e, t\u3009, comme tout GV qui se respecte. Quid de cGV3 ? Coinc\u00e9 entre GV1 et GV2, il ne peut \u00eatre que \u3008\u3008e, t\u3009, \u3008e, t\u3009\u3009. Et donc, CONJ ne peut \u00eatre que \u3008\u3008e, t\u3009, \u3008\u3008e, t\u3009, \u3008e, t\u3009\u3009\u3009 (intuitivement : \u00e0 partir d\u2019un pr\u00e9dicat, et ensuite d\u2019un deuxi\u00e8me pr\u00e9dicat, il fournit un nouveau pr\u00e9dicat).\nEt maintenant, pour trouver Trad(GV1), Trad(cGV3) et Trad(CONJ), allons de nouveau \u00e0 reculons :\n1. Pour trouver Trad(GV1) il faut \u00e9liminer (le terme correct est \u00ab\u03bb-abstraire\u00bb) g de Trad(S) = aime(a)(g) \u2227 pre\u0301fe\u0300re(a\u2032)(g). On le fait en \u00e9crivant Trad(S) = \u03bbx.(aime(a)(x) \u2227 pre\u0301fe\u0300re(a\u2032)(x))(g) et donc Trad(GV1) = \u03bbx.(aime(a)(x) \u2227 pre\u0301fe\u0300re(a\u2032)(x)).\n2. Essayons de \u03bb-abstraire Trad(GV2) de Trad(GV1) pour obtenir Trad(cGV3) : on a Trad(GV1) = \u03bbx.(aime(a)(x)\u2227pre\u0301fe\u0300re(a\u2032)(x)) = \u03bbx.aime(a)(x)\u2227\u03bbx.pre\u0301fe\u0300re(a\u2032)(x). Le terme \u03bbx.aime(a)(x) est un pr\u00e9dicat.\nOn peut le \u03bb-abstraire en l\u2019\u00e9crivant sous la forme \u03bbP.(P )(\u03bbx.aime(a)(x)), ce qui donne Trad(GV1) = \u03bbP.(P \u2227\u03bbx.pre\u0301fe\u0300re(a\u2032)(x))(\u03bbx.aime(a)(x)) et donc, par le principe de compositionapplication, Trad(cGV3) = \u03bbP.(P \u2227 \u03bbx.pre\u0301fe\u0300re(a\u2032)(x)).\n3. De la m\u00eame mani\u00e8re, nous \u03bb-abstrayons Trad(GV4) de Trad(cGV3) et ce qui reste sera Trad(CONJ). On trouve Trad(cGV3) = \u03bbQ.\u03bbP.(P \u2227 Q)(\u03bbx.pre\u0301fe\u0300re(a\u2032)(x)) et donc, enfin, Trad(CONJ) = \u03bbQ.\u03bbP.(P \u2227Q).\n\u00c0 y r\u00e9fl\u00e9chir, ce r\u00e9sultat n\u2019a rien d\u2019\u00e9tonnant : apr\u00e8s tout, un op\u00e9rateur binaire comme \u2227 n\u2019associe-t-il pas deux pr\u00e9dicats P et Q au pr\u00e9dicat P \u2227Q ?"}, {"heading": "5.4 La quantification", "text": "Prenons maintenant la phrase tout le monde aime Alice. La diff\u00e9rence avec G\u00e9rard aime Alice est que si G\u00e9rard (grammaticalement, un nom) peut \u00eatre traduit par une constante g et puis interpr\u00e9t\u00e9 par une entit\u00e9 g\u00e9rard, on ne peut faire de m\u00eame pour tout le monde (un pronom ind\u00e9fini), que l\u2019on sera logiquement oblig\u00e9 d\u2019interpr\u00e9ter par la totalit\u00e9 des objets de Monde (puisque c\u2019est \u00abtout le monde\u00bb qui aime Alice).\nCela ne va pas changer outre mesure l\u2019arbre syntaxique de la phrase (fig. 6), mais on voit la diff\u00e9rence au niveau de l\u2019arbre des types (fig. 7b). L\u00e0 o\u00f9 G\u00e9rard \u00e9tait traduit par un type e, tout le monde est traduit par un \u3008\u3008e, t\u3009, t\u3009, c\u2019est-\u00e0-dire qu\u2019il prend le groupe verbal \u03bbx.aime(a)(x) en entr\u00e9e et retourne une valeur de v\u00e9rit\u00e9 (la r\u00e9ponse \u00e0 la question : \u00abtout le monde aime-t-il Alice ?\u00bb).\nQuelle va \u00eatre la traduction de S ? Il est naturel de se servir du quantificateur universel pour \u00e9crire Trad(S) = \u2200x (aime(a)(x)).\nSachant que GV se traduit par \u03bbx.aime(a)(x), quelle va \u00eatre la traduction de PRN? Voici comment s\u2019y prendre : posons P = \u03bbx.aime(a)(x), P est donc un pr\u00e9dicat unaire. S devient alors \u2200x (P (x)), que l\u2019on peut \u03bb-abstraire en (\u03bbQ.(\u2200x (Q(x)))(P ), et on reconna\u00eet ici une fonction de pr\u00e9dicat appliqu\u00e9e au pr\u00e9dicat P . Mais ce pr\u00e9dicat n\u2019est autre que la traduction de GV, et on a donc trouv\u00e9 une fonction qui, appliqu\u00e9e \u00e0 GV, nous donne S : d\u2019apr\u00e8s le principe de compositionnalit\u00e9, cela n\u2019est rien d\u2019autre que la traduction de PRN.\nOn remplace donc P par sa valeur et on a Trad(tout le monde) = \u03bbP.(\u2200x (P (x))), qui est bien de type \u3008\u3008e, t\u3009, t\u3009."}, {"heading": "5.5 L\u2019article d\u00e9fini", "text": "Que de plus simple dans la langue fran\u00e7aise que l\u2019article d\u00e9fini \u00able, la, les\u00bb ? Et pourtant, sa traduction en LangLog sera pour nous un petit challenge ! Prenons la phrase le philosophe aime Alice (fig. 8). Notons tout de suite que philosophe ne peut \u00eatre traduit par une constante, comme, par exemple, G\u00e9rard , puisque \u00ab\u00eatre philosophe\u00bb est une propri\u00e9t\u00e9, et les propri\u00e9t\u00e9s sont traduites par des pr\u00e9dicats unaires. Ainsi, on \u00e9crira philosophe(g) pour dire que g est philosophe. De m\u00eame, \u2203x philosophe(x) signifie qu\u2019il existe un philosophe. Et donc, si la phrase de d\u00e9part \u00e9tait un philosophe aime Alice (avec un article ind\u00e9fini), sa traduction en LangLog serait \u2203x (philosophe(x) \u2227 aime(a)(x)).\nD\u2019o\u00f9 l\u2019arbre de types de la phrase le philosophe aime Alice (fig. 9), o\u00f9 l\u2019on affecte \u00e0 philosophe le type \u3008e, t\u3009 (le m\u00eame que celui du verbe aime) et donc GN1 devient \u3008\u3008e, t\u3009, t\u3009. Il ne nous reste\nd\u2019autre choix pour le que de lui affecter le type \u3008\u3008e, t\u3009, \u3008\u3008e, t\u3009, t\u3009\u3009, autrement dit : il prend un \u3008e, t\u3009 (philosophe) et ensuite un autre \u3008e, t\u3009 (aime) et retourne une valeur de v\u00e9rit\u00e9.\nMais comment traduire alors l\u2019article d\u00e9fini le ? Formulons la question autrement : comment indiquer qu\u2019il n\u2019y a qu\u2019un seul philosophe, et que quand on dit le philosophe on parle justement de lui ? Pour r\u00e9pondre \u00e0 cette question, rappelons-nous que dans la d\u00e9finition de la formule logique de 1er ordre (d\u00e9f. 5, p. 4) nous avons mentionn\u00e9 la relation binaire = (\u00ab\u00e9galit\u00e9\u00bb). Mais qu\u2019est-ce donc l\u2019\u00ab\u00e9galit\u00e9\u00bb ?\nC\u2019est une vaste question philosophique dont on ne parle gu\u00e8re en cours de math\u00e9matiques... et pourtant, en logique du 1er ordre, l\u2019\u00ab\u00e9galit\u00e9\u00bb a un sens bien particulier, que voici : \u00e9crire a = b signifie que l\u2019on demande que dans toute interpr\u00e9tation, les constantes (ou variables) a et b soient interpr\u00e9t\u00e9es par le m\u00eame \u00e9l\u00e9ment de Monde.\nEt c\u2019est ainsi qu\u2019on traduit l\u2019unicit\u00e9 : il n\u2019y a qu\u2019un seul philosophe x si et seulement si pour tout individu y tel que y soit philosophe, on ait x = y.\nLa phrase le philosophe aime Alice se traduira donc par \u2203x (\u2200y (philosophe(y) \u2194 x = y) \u2227 aime(a)(x)).\nEn appliquant les m\u00eames m\u00e9thodes de \u03bb-abstraction que dans la section pr\u00e9c\u00e9dente, on trouve que la traduction de l\u2019article d\u00e9fini le ne peut \u00eatre que\nTrad(le) = \u03bbQ.(\u03bbP.(\u2203x (\u2200y (Q(y)\u2194 (x = y)) \u2227 P (x)))).\nLe lecteur peut imaginer le d\u00e9sarroi de l\u2019\u00e9tudiant en linguistique qui, ayant rat\u00e9 le premier cours, se retrouve devant une formalisation de la langue naturelle qui traduit un des mots les plus simples de sa langue par cette horrible formule... Est-ce bien raisonnable ? En fait, nous n\u2019avons fait que rendre visible l\u2019important potentiel s\u00e9mantique de ce petit mot grammatical \u2014 \u00e0 premi\u00e8re vue, insignifiant \u2014 qu\u2019est l\u2019article d\u00e9fini.\n6 L\u2019ensemble Monde et la fonction d\u2019interpr\u00e9tation Inter Jusqu\u2019ici nous avons surtout parl\u00e9 de Trad : LangNat\u2192 LangLog. Il ne reste plus qu\u2019\u00e0 d\u00e9crire plus pr\u00e9cis\u00e9ment Monde, ainsi que la fonction Inter : LangLog \u2192Monde. Pour cela, nous allons nous servir d\u2019un autre outil math\u00e9matique, bien plus connu cette fois-ci : la th\u00e9orie des ensembles.\nAinsi, si a = Trad(Alice) et g = Trad(G\u00e9rard) deviennent dans Monde la belle alice et le vilain g\u00e9rard, que dire alors des autres sommets des arbres syntaxiques que nous avons \u00e9tudi\u00e9s ?\nL\u00e0 aussi Montague a eu les bonnes id\u00e9es ! D\u2019apr\u00e8s la d\u00e9finition de l\u2019interpr\u00e9tation d\u2019une formule (d\u00e9f. 6), un pr\u00e9dicat unaire est interpr\u00e9t\u00e9 par une fonction Monde\u2192 Z2, o\u00f9 Z2 est l\u2019ensemble {vrai, faux}. Notons par ZMonde2 les fonctions de Monde dans Z2. Alors Inter(\u03bbx.P (x)) \u2208 ZMonde2 , c\u2019est-\u00e0-dire que l\u2019interpr\u00e9tation d\u2019un pr\u00e9dicat unaire de LangLog est un \u00e9l\u00e9ment de ZMonde2 .\nCette propri\u00e9t\u00e9 se g\u00e9n\u00e9ralise aux pr\u00e9dicats n-aires quelconques. En effet, il suffit de constater qu\u2019un pr\u00e9dicat binaire devient une fonction qui \u00e0 chaque \u00e9l\u00e9ment de Monde associe un pr\u00e9dicat unaire. Donc Inter(\u03bbx.\u03bby.P (x)(y)) \u2208 ZMondeMonde2 , et ainsi de suite...\nCela semble abstrait, mais en r\u00e9alit\u00e9 on ne fait que manipuler de simples relations binaires. Prenons un exemple : supposons que Monde = {alice,g\u00e9rard,billy} (not\u00e9s dans LangLog par a, g, b) et que l\u2019on ait Inter(aime(a)(g)) = vrai et Inter(aime(a)(b)) = vrai. Que va \u00eatre Inter(\u03bby.aime(a)(y)) ? Ce sera un \u00e9l\u00e9ment de ZMonde2 : l\u2019ensemble de relations binaires \u03c6a = {(alice, faux), (g\u00e9rard,vrai), (billy,vrai)} (puisque g\u00e9rard et billy aiment alice, mais alice ne s\u2019aime pas elle-m\u00eame). Nous avons appel\u00e9 \u03c6a cet ensemble de relations binaires puisqu\u2019il s\u2019agit de savoir qui aime alice. De la m\u00eame mani\u00e8re, il existe \u03c6g et \u03c6b qui concernent g\u00e9rard et billy.\nQue sera alors Inter(\u03bbx.\u03bby.aime(x)(y)) ? Ce sera un \u00e9l\u00e9ment de ZMonde Monde\n2 : un ensemble de relations binaires entre des \u00e9l\u00e9ments de Monde et des fonctions Monde\u2192 Z2. Dans notre cas, ce sera tout simplement \u03a6 = {(alice, \u03c6a), (g\u00e9rard, \u03c6g), (billy, \u03c6b)}.\nSupposons que nous souhaitions savoir si Inter(aime(g)(a)) est vrai. \u00c9crivons\nInter(aime(g)(a))\n= Inter((\u03bbx.\u03bby.aime(x)(y))(g)(a))\n= Inter(\u03bbx.\u03bby.aime(x)(y))(Inter(g))(Inter(a))\n= \u03a6(Inter(g))(Inter(a))\n= \u03c6g(Inter(a)) = faux,\ndonc, h\u00e9las, alice n\u2019aime (toujours) pas g\u00e9rard. On voit donc de quelle mani\u00e8re il est possible d\u2019interpr\u00e9ter n\u2019importe quelle formule de LangLog."}, {"heading": "7 Et le reste...", "text": "Cet article est d\u00e9j\u00e0 assez long. Jusqu\u2019ici, nous avons parcouru et partiellement illustr\u00e9 une partie de la th\u00e9orie de Montague. Le restant de sa th\u00e9orie est tout aussi utile et int\u00e9ressant, mais n\u2019implique pas de nouvel outil math\u00e9matique ; nous allons donc nous contenter d\u2019en d\u00e9crire rapidement les grandes lignes."}, {"heading": "7.1 Inf\u00e9rence", "text": "Ce qui fait la force de la logique math\u00e9matique est le fait qu\u2019\u00e0 partir d\u2019un ensemble de formules (que l\u2019on consid\u00e8re vraies pour une interpr\u00e9tation donn\u00e9e), on a des m\u00e9canismes (appel\u00e9s r\u00e8gles d\u2019inf\u00e9rence) pour obtenir de nouvelles formules (\u00e9galement vraies dans la m\u00eame interpr\u00e9tation). On admet donc certaines formules en tant qu\u2019axiomes et on en d\u00e9duit d\u2019autres, appel\u00e9es th\u00e9or\u00e8mes. C\u2019est ainsi que fonctionnent les math\u00e9matiques : que ce soit en g\u00e9om\u00e9trie, en alg\u00e8bre ou en analyse, on admet certains axiomes et on construit des th\u00e9ories en d\u00e9montrant des th\u00e9or\u00e8mes.\nUn exemple de r\u00e8gle d\u2019inf\u00e9rence tr\u00e8s utile est le modus ponens : si on a \u03c6 \u2192 \u03c8 et \u03c6 alors on peut en d\u00e9duire \u03c8 (exemple : si on admet que tous les hommes sont mortels et que Socrate est un homme, alors on peut en d\u00e9duire que Socrate est mortel).\nMontague introduit le m\u00e9canisme des r\u00e8gles d\u2019inf\u00e9rence dans LangLog."}, {"heading": "7.2 La temporalit\u00e9", "text": "Pour analyser des phrases comme G\u00e9rard n\u2019aime plus Alice, Montague introduit la temporalit\u00e9 dans LangLog. Le temps y est repr\u00e9sent\u00e9 de deux mani\u00e8res : par des instants et par des intervalles\ntemporels. Il propose des op\u00e9rateurs entre les intervalles : deux intervalles [t1, t2] et [t3, t4] peuvent se chevaucher (quand, par exemple, t1 < t3 < t2 < t4), \u00eatre totalement disjoints (t2 < t3) ou s\u2019imbriquer l\u2019un dans l\u2019autre (t1 < t2 < t3 < t4).\nChaque formule de LangLog est index\u00e9e temporellement : sa valeur de v\u00e9rit\u00e9 d\u00e9pend (outre les variables libres qu\u2019elle contient) de ses propri\u00e9t\u00e9s temporelles."}, {"heading": "7.3 Les mondes possibles/accessibles", "text": "Pour analyser des phrases comme G\u00e9rard aime peut-\u00eatre Alice, mais certainement pas Alexia, Montague introduit les notions de modalit\u00e9 et de mondes accessibles. Il propose deux op\u00e9rateurs modaux : \u03c6 qui signifie \u00ab\u03c6 est n\u00e9cessairement vraie\u00bb, et \u03c6 qui signifie \u00ab\u03c6 est peut-\u00eatre vraie\u00bb.\nPour formaliser ces notions, il parle de \u00abmondes accessibles\u00bb : en effet, on a toujours dit que Monde pouvait \u00eatre un monde hypoth\u00e9tique quelconque, alors pourquoi ne pas en imaginer plusieurs, voire tous les mondes possibles et imaginables ? Mais comme cela est un peu \u00e9loign\u00e9 de la r\u00e9alit\u00e9 des probl\u00e8mes que l\u2019on peut se poser, il est plus raisonnable de parler de mondes \u00abaccessibles\u00bb : ce sont ceux qui constituent des alternatives plausibles \u00e0 un monde donn\u00e9. SiMonde et Monde\u2032 sont des mondes, on peut imaginer une relation binaire Accessible(Monde,Monde\u2032) qui signifie que Monde\u2032 est accessible \u00e0 partir de Monde.\nAlors la formule \u03c6 est \u00abn\u00e9cessairement vraie\u00bb ( \u03c6) si elle est vraie dans tous les mondes accessibles \u00e0 partir du monde courant, et elle est \u00abpeut-\u00eatre\u00bb vraie ( \u03c6), si elle est vraie dans certains de ces mondes."}, {"heading": "7.4 Intensionnalit\u00e9", "text": "D\u00e9finir un ensemble extensionnellement consiste \u00e0 \u00e9num\u00e9rer ses \u00e9l\u00e9ments, le d\u00e9finir intensionnellement consiste \u00e0 en donner les propri\u00e9t\u00e9s. Ainsi, {p | p \u2264 10, p premier} est une d\u00e9finition intensionnelle et {2, 3, 5, 7} la d\u00e9finition sensationnelle du m\u00eame ensemble.\nMontague se sert de l\u2019intensionnalit\u00e9 pour englober en un seul objet math\u00e9matique les valeurs d\u2019une expression dans tous les mondes accessibles. Ainsi, si aime(a)(g) est vrai dans les mondes Monde1, Monde2 et Monde4, et aime(a\u2032)(g) est vrai dans les mondes Monde1, Monde2 et Monde3, alors ces deux formules ont la m\u00eame valeur de v\u00e9rit\u00e9 dans certains mondes mais pas dans tous. On dira que leurs intensions sont diff\u00e9rentes.\nL\u2019intension d\u2019une formule est donc une fonction qui envoie diff\u00e9rents mondes vers les valeurs de v\u00e9rit\u00e9 correspondantes des formules. En comparant les intensions de deux formules, on compare leur \u00abcomportement\u00bb dans tous les mondes accessibles, c\u2019est bien plus puissant que de les comparer dans un seul monde. Cette notion est tellement importante pour Montague que sa th\u00e9orie est souvent appel\u00e9e s\u00e9mantique intensionnelle."}, {"heading": "8 Conclusion", "text": "Nous avons explor\u00e9 les outils math\u00e9matiques qui ont servi \u00e0 Montague et \u00e0 ceux qui l\u2019ont suivi pour mod\u00e9liser la langue naturelle en tant que langage formel. Ce parcours nous a permis d\u2019\u00e9voquer et de d\u00e9crire bri\u00e8vement les langages et grammaires formels, une version l\u00e9g\u00e8rement restreinte de la logique de 1er ordre, la th\u00e9orie de types, le \u03bb-calcul. Dans chaque cas nous avons tent\u00e9 de justifier l\u2019utilit\u00e9 de l\u2019outil pour l\u2019analyse de la langue naturelle, et de l\u2019illustrer par des exemples.\nNotre but a \u00e9t\u00e9 de faire d\u00e9couvrir au lecteur comment les math\u00e9matiques permettent d\u2019\u00e9tudier les liens entre la langue naturelle et le monde \u2014 liens qui nous affectent tous profond\u00e9ment puisque, comme disait Wittgestein :\n\u00abdie Grenzen meiner Sprache bedeuten die Grenzen meiner Welt\u00bb (= les limites de ma langue sont les limites de mon propre monde) [14, \u00a7 5.6]\nConseils de lecture Les langages et grammaires formels sont d\u00e9crits avec beaucoup de rigueur dans [6]. La logique du 1er ordre est admirablement bien pr\u00e9sent\u00e9e par J.-P. Delahaye dans [7]. En ce qui concerne la s\u00e9mantique de Montague, une pr\u00e9sentation tr\u00e8s accessible est donn\u00e9e dans [9]. L\u2019ouvrage [5] est un peu plus technique mais tout aussi abordable. Enfin, [10], tir\u00e9 du S\u00e9minaire de philosophie et math\u00e9matiques de l\u2019ENS (dirig\u00e9, excusez du peu, par J. Dieudonn\u00e9 et R. Thom), en donne une synth\u00e8se tr\u00e8s efficace. Dans son expos\u00e9 film\u00e9 \u00abLa mod\u00e9lisation math\u00e9matique des langues naturelles\u00bb de l\u2019Universit\u00e9 de tous les savoirs, S. Kahane parle de la s\u00e9mantique de Montague [12, 30\u203224\u2032\u2032\u201334\u203245\u2032\u2032] avant d\u2019encha\u00eener sur une de ses propres contributions : les grammaires \u00e0 bulles [11].\nEnfin, en ce qui concerne la vie (et la mort) de Richard M. Montague, voir l\u2019essai That\u2019s just Semantics ! [1], ainsi que les romans [2], [3] et [8].\nR\u00e9f\u00e9rences [1] Sacha Arnold. That\u2019s just Semantics ! en ligne : http://shar.es/StiAm [2] David Berlinski. Less than meets the eye. St. Martin\u2019s Press, 1994. [3] Aifric Campbell. The Semantics of Murder. Serpent\u2019s Tail, 2009. [4] Ronnie Cann. Formal Semantics, an Introduction. Cambridge Univ. Press, 1993. [5] Michel Chambreuil and Jean-Claude Pariente. Langue naturelle et logique. Peter Lang, 1990. [6] Patrick Dehornoy. Math\u00e9matiques de l\u2019informatique. Dunod, 2000. [7] Jean-Paul Delahaye. Outils logiques pour l\u2019intelligence artificielle. Eyrolles, 1988. [8] Samuel Delany. The mad man. Masquerade Books, 1996. [9] Michel Galmiche. S\u00e9mantique linguistique et logique. puf, 1991. [10] Paul Gochet. La s\u00e9mantique r\u00e9cursive de Davidson et de Montague. In Penser les math\u00e9-\nmatiques (S\u00e9minaire de philosophie et math\u00e9matiques de l\u2019\u00c9cole normale sup\u00e9rieure), pages 73\u201387. \u00c9ditions du Seuil, 1982.\n[11] Sylvain Kahane. Extractions dans une grammaire de d\u00e9pendance \u00e0 bulles. TAL, 41 :187\u2013216, 2000.\n[12] Sylvain Kahane. La mod\u00e9lisation math\u00e9matique des langues naturelles (vid\u00e9o). http://www.canal-u.tv/video/universite_de_tous_les_savoirs/la_modelisation_ mathematique_des_langues_naturelles.1315 2002.\n[13] Richard M. Montague. English as a formal language. In B. Visentini et al., editors, Linguaggi nella Societ\u00e0 et nella Tecnica, pages 188\u2013211. Edizioni di Comunit\u00e0, 1970.\n[14] Ludwig Wittgenstein. Tractatus logico-philosophicus. Tel. Gallimard, 2001."}], "references": [{"title": "Less than meets the eye", "author": ["David Berlinski"], "venue": "St. Martin\u2019s Press,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1994}, {"title": "The Semantics of Murder", "author": ["Aifric Campbell"], "venue": "Serpent\u2019s Tail,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2009}, {"title": "Formal Semantics, an Introduction", "author": ["Ronnie Cann"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1993}, {"title": "Outils logiques pour l\u2019intelligence artificielle", "author": ["Jean-Paul Delahaye"], "venue": "Eyrolles,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1988}, {"title": "The mad man", "author": ["Samuel Delany"], "venue": "Masquerade Books,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1996}, {"title": "S\u00e9mantique linguistique et logique", "author": ["Michel Galmiche"], "venue": "puf,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1991}, {"title": "Extractions dans une grammaire de d\u00e9pendance", "author": ["Sylvain Kahane"], "venue": "a\u0300 bulles. TAL,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2000}, {"title": "La mod\u00e9lisation math\u00e9matique des langues naturelles (vid\u00e9o)", "author": ["Sylvain Kahane"], "venue": "http://www.canal-u.tv/video/universite_de_tous_les_savoirs/la_modelisation_ mathematique_des_langues_naturelles.1315", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2002}, {"title": "English as a formal language", "author": ["Richard M. Montague"], "venue": "Edizioni di Comunita\u0300,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1970}], "referenceMentions": [{"referenceID": 8, "context": "Montague qui pr\u00e9tend que c\u2019est tout \u00e0 fait possible, \u00e0 condition d\u2019utiliser des outils math\u00e9matiques \u00e9volu\u00e9s, et il le d\u00e9montre \u00e0 travers trois articles (dont le premier, de 1970, s\u2019intitule, de mani\u00e8re assez provocante, L\u2019anglais en tant que langage formel [13]).", "startOffset": 258, "endOffset": 262}, {"referenceID": 2, "context": "Ce texte s\u2019inspire fortement (tout en le simplifiant) de l\u2019ouvrage [4].", "startOffset": 67, "endOffset": 70}, {"referenceID": 1, "context": "Et de mani\u00e8re tragique, au point o\u00f9 sa mort a inspir\u00e9 un roman policier, la S\u00e9mantique du meurtre d\u2019Aifric Campbell [3].", "startOffset": 116, "endOffset": 119}, {"referenceID": 3, "context": "Delahaye dans [7].", "startOffset": 14, "endOffset": 17}, {"referenceID": 5, "context": "En ce qui concerne la s\u00e9mantique de Montague, une pr\u00e9sentation tr\u00e8s accessible est donn\u00e9e dans [9].", "startOffset": 95, "endOffset": 98}, {"referenceID": 6, "context": "Kahane parle de la s\u00e9mantique de Montague [12, 30\u203224\u2032\u2032\u201334\u203245\u2032\u2032] avant d\u2019encha\u00eener sur une de ses propres contributions : les grammaires \u00e0 bulles [11].", "startOffset": 145, "endOffset": 149}, {"referenceID": 0, "context": "Montague, voir l\u2019essai That\u2019s just Semantics ! [1], ainsi que les romans [2], [3] et [8].", "startOffset": 73, "endOffset": 76}, {"referenceID": 1, "context": "Montague, voir l\u2019essai That\u2019s just Semantics ! [1], ainsi que les romans [2], [3] et [8].", "startOffset": 78, "endOffset": 81}, {"referenceID": 4, "context": "Montague, voir l\u2019essai That\u2019s just Semantics ! [1], ainsi que les romans [2], [3] et [8].", "startOffset": 85, "endOffset": 88}, {"referenceID": 0, "context": "es/StiAm [2] David Berlinski.", "startOffset": 9, "endOffset": 12}, {"referenceID": 1, "context": "[3] Aifric Campbell.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "[4] Ronnie Cann.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[7] Jean-Paul Delahaye.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[8] Samuel Delany.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[9] Michel Galmiche.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "[11] Sylvain Kahane.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "[12] Sylvain Kahane.", "startOffset": 0, "endOffset": 4}, {"referenceID": 8, "context": "[13] Richard M.", "startOffset": 0, "endOffset": 4}], "year": 2014, "abstractText": "Nous pr\u00e9sentons une m\u00e9thode de mod\u00e9lisation de la langue naturelle qui est fortement bas\u00e9e sur les math\u00e9matiques. Cette m\u00e9thode, appel\u00e9e \u00abs\u00e9mantique formelle\u00bb, a \u00e9t\u00e9 initi\u00e9e par le linguiste am\u00e9ricain Richard M. Montague dans les ann\u00e9es 1970. Elle utilise des outils math\u00e9matiques tels que les langages et grammaires formels, la logique du 1er ordre, la th\u00e9orie de types et le \u03bb-calcul. Nous nous proposons de faire d\u00e9couvrir au lecteur tant la s\u00e9mantique formelle de Montague que les outils math\u00e9matiques dont il s\u2019est servi.", "creator": "LaTeX with hyperref package"}}}