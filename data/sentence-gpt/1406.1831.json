{"id": "1406.1831", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Jun-2014", "title": "Analyzing noise in autoencoders and deep networks", "abstract": "Autoencoders have emerged as a useful framework for unsupervised learning of internal representations, and a wide variety of apparently conceptually disparate regularization techniques have been proposed to generate useful features. Here we extend existing denoising autoencoders to additionally inject noise before the nonlinearity, and at the hidden unit activations. We show that a wide variety of previous methods, including denoising, contractive, and sparse autoencoders, as well as dropout can be interpreted using this framework as an important benchmark tool.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Fri, 6 Jun 2014 22:49:11 GMT  (749kb,D)", "http://arxiv.org/abs/1406.1831v1", null]], "reviews": [], "SUBJECTS": "cs.NE cs.LG", "authors": ["ben poole", "jascha sohl-dickstein", "surya ganguli"], "accepted": false, "id": "1406.1831"}, "pdf": {"name": "1406.1831.pdf", "metadata": {"source": "CRF", "title": "Analyzing noise in autoencoders and deep networks", "authors": ["Ben Poole", "Jascha Sohl-Dickstein", "Surya Ganguli"], "emails": ["poole@cs.stanford.edu", "sganguli}@stanford.edu"], "sections": [{"heading": "1 Introduction", "text": "Regularization through noise [3, 1] has regained focus recently in the training of supervised neural networks. Randomly dropping out units while performing backpropagation has been shown to consistently improve the performance of large neural networks [13, 10]. Stochastic pooling, where a set of input units are gated based off their activations, has also been shown to improve performance in convolutional nets over noiseless max and average pooling [23, 15]. The role of input noise in training unsupervised networks has also been extensively explored in recent years [21]. Injecting noise into the input layer of autoencoders has been shown to yield useful representations in these denoising autoencoders.\nMotivated by the success of noise injection at the input layer in autoencoders, and at the hidden layers in supervised learning settings, we systematically explore the role of noise injection at all layers in unsupervised feature learning models. As we shall see, this provides a unified framework for unsupervised learning based on the principle that hidden representations should be robust to noise. This yields an extension of prior methods for regularizing autoencoders that we call the noisy autoencoder (NAE). For certain types of NAEs, we are able to marginalize out the noise, and derive a set of penalties that relate noise injection with contractive autoencoders, sparse autoencoders, dropout, and ICA. Experiments on MNIST and CIFAR-10 validate the effectiveness of noisy autoencoders at learning useful features for classification.\nBuilding upon the recent success of dropout, we also experiment with further supervised fine-tuning of NAEs in which the noise is also injected at the supervised stage. We show that training noisy autoencoders with dropout noise, and supervised fine-tuning with dropout noise, allows us to waste less capacity in larger autoencoder networks. We also show that purely supervised training with additive Gaussian noise beats dropout on MNIST. We compare the effect of these different types of noise, and argue that these results point to an interaction between noise in unsupervised and super-\nar X\niv :1\n40 6.\n18 31\nv1 [\ncs .N\nE ]\n6 J\nun 2\n01 4\nvised learning that may be more complex. These results suggest that we may be able to optimize stacked learning strategies by introducing different types of noise for the unsupervised pretraining relative to the supervised fine-tuning."}, {"heading": "2 Autoencoder Framework", "text": ""}, {"heading": "2.1 Autoencoders and Denoising Autoencoders", "text": "An autoencoder is a type of one layer neural network that is trained to reconstruct its inputs. In the complete case, this can trivially be accomplished using an identity transformation. However, if the network is constrained in some manner, then the autoencoder tends to learn a more interesting representation of the input data that can be useful in other tasks such as object recognition. The autoencoder consists of an encoder that maps inputs to a hidden representation: f(x) = sf (Wx+b), and a decoder that maps the hidden representation back to the inputs: g(h) = sg(W \u2032h + d). The composition of the encoder and decoder yield the reconstruction function: r(x) = g(f(x)). The typical training criterion for autoencoders is minimizing the reconstruction error, \u2211 x\u2208X L(x, r(x)) with respect to some loss L, typically either squared error or the binary cross-entropy [2].\nDenoising autoencoders (DAEs) are an extension of autoencoders trained to reconstruct a clean version of an input from its corrupted version [21]. The denoising task requires the network to learn representations that are able to remove the corrupted noise. Prior work has shown that DAEs can be stacked to learn more complex representations that are useful for a variety of tasks [5, 21, 4]. The objective for the DAE can be written as \u2211 x\u2208X E [L(x, r(x\u0303))] where x\u0303 is a corrupted version of the input x."}, {"heading": "2.2 Noisy Autoencoder Model", "text": "Inspired by the recent work on dropout, we extend denoising autoencoders to allow for the injection of additional noise at the input and output of the hidden units. We call these models noisy autoencoders (NAEs) as their hidden representations are stochastic, and no longer a deterministic function of the input. Injecting noise into both the inputs and hidden representations of autoencoders has been proposed for linear networks in prior work by [11], but has not been analyzed in detail for nonlinear representations. We parameterize the noise in the NAE as a tuple ( I , H, Z) that characterizes the distribution of the noises corrupting the input, hidden unit inputs, and hidden activations respectively (see Figure 1). We define the encoder and reconstruction function for the NAE model as:\nh\u0303(x, I , Z , H) = f\u0303\u03b8(x) = sf ((W (x I) + b) Z) H (1) r(x, I , Z , H) = sg ([ W \u2032h\u0303(x, I , Z , H) + d ] H ) (2)\nwhere denotes either addition or multiplication, sf and sg are elementwise nonlinearities and we use tildes to denote corrupted versions of variables. As with the DAE, we optimize the expected reconstruction error when training: \u2211 x\u2208X E [L(x, r\u0303(x, I , Z , H)].\nWhen using the NAE to extract features or perform denoising on testing data we can compute the expectation of the noisy hidden activation or reconstruction by sampling from the NAE. However, this can be prohibitively costly on large datasets. Instead, we can approximate the expectation by scaling each of the corrupted variables by their expectation as in dropout. In practice we only use noise where the corruption of the input variable does not alter the mean so that no scaling is needed. The test-time hidden representation and reconstruction are then computed in the same way as the vanilla autoencoder."}, {"heading": "2.3 Relationships between noise types", "text": "Due to the parameterization of noise in the noisy autoencoder, there are many possible choices of noise ( I , Z , H), that will yield equivalent effective noise on the reconstruction. In particular, we can always rewrite a NAE so that the only source of noise is on the hidden activations H.\nTo analyze the effect of introducing noise before the encoder nonlinearity, we perform a first-order Taylor expansion of the encoder function: sf (Wx\u0303 + Z) \u2248 sf (Wx\u0303) + diag(s\u2032f (Wx\u0303))) Z . Thus,\nfor small noise, adding noise Z \u223c Q to the linear encoder part is equivalent to having hidden noise: H \u223c diag(s\u2032f (Wx\u0303)))Q. If the input noise is Gaussian with some covariance \u03a3, then the equivalent hidden unit input noise is Gaussian with covariance W\u03a3WT . If the singular values of W are sufficiently small, then we can use the above result to get the effective hidden noise: H \u223c N(0,diag(s\u2032f (Wx))W\u03a3WT ). If the input noise is dropout (multiplicative bernoulli), then we can use the result from [22] to approximate Z as a Gaussian with some mean and diagonal covariance. These simple relationships allow us to identify the covariance structure of noise at the hidden unit activations that corresponds to input and hidden unit input noise."}, {"heading": "2.4 Marginalized Noise Penalties", "text": "To understand the impact that these additional sources of noise have on autoencoder training we analyze a simplified NAE. We assume that the decoder is linear (sg(x) = x), the loss function used is squared error, and that all the corruptions are applied independently to each neuron. This allows us to exactly marginalize out the noise on the hidden unit activations using a result from [3]:\nE [ \u2016x\u2212 r(x, H)\u20162 ] = \u2016x\u2212 r(x)\u20162 + tr(WWTVar(h\u0303|h)) (3)\nWe can then apply the approximation results from above to yield cost functions corresponding to marginalizing out each different type of noise independently:\nL(W ) \u2248 \u2211 x\u2208X [r\u0304(x) + cH(x) + cZ(x) + cI(x)] (4)\ncH(x) = \u2211d i=1 Var(h\u0303i|h)\u2016wi\u20162 (5)\ncZ(x) \u2248 \u2211d i=1 Var(z\u0303i|z)(f \u2032(wTi x)\u2016wi\u2016)2 (6)\ncI(x) \u2248 \u2016WWTdiag(f \u2032(Wx))Var(x\u0303|x)\u20162F (7) where d is the number of hidden units, and w\u2032i is the ith column of W\n\u2032. Note that the penalty cH(x) is exact, while the penalties for noise at the input and hidden unit inputs will only be accurate when the variance of their noises are small. These penalties allow us to relate injection of noise in a NAE with regularization penalties from other regularized autoencoders."}, {"heading": "3 Connections to prior work", "text": "The noisy autoencoder and associated marginalized noise penalties provide a framework for comparing many types of regularized autoencoders, and help to explain the utility of injecting noise into more general neural networks."}, {"heading": "3.1 Regularized Autoencoders", "text": "The marginalized input noise penalty from the noisy autoencoder provides an intuition in the success of denoising autoencoders. If we use tied weights, and additive Gaussian corrupting noise with variance \u03c32 then the penalty becomes:\ncI(x) = \u2016WWTdiag(s\u2032f (Wx))\u03c32\u20162F = \u03c34 \u2211 i,j ( \u2016wTi wj\u2016(s\u2032f (wTi x)) )2 (8)\nThis penalty encourages the hidden units to learn orthogonal representations of the input, and provides a contractive-like penalty on individual filters. A similar type of penalty is found when learning overcomplete representations with reconstruction ICA, where they use \u2016WWT \u2212 I\u20162F to encourage a diverse set of filters [14].\nWhen stacking denoising autoencoders, we end up with a similar structure to a noisy autoencoder. In the case of building a two layer network, the standard practice is to first train a denoising autoencoder on the input, then compute the first layer representation by encoding the clean inputs. Training a denoising autoencoder on the second layer will corrupt the first layer representation, but will not impact the prior encoding model learned for the first layer. In contrast, training a NAE with noise on the hidden unit activations allows for the first layer representation to learn to be robust to noise in its hidden representation.\nContractive autoencoders aim to learn a representation that is insensitive to small changes in the input space [16]. They penalize the Frobenius norm of the Jacobian of the encoder function, \u03bb||Jf (x)||2F = \u2211d i=1 s \u2032 f (w T i x)\u2016wi\u20162. If we inject additive white Gaussian noise at the hidden inputs, then we recover the same penalty. Alternatively, we can inject additive noise with covariance diag(s\u2032f (Wx)\n2) at the hidden unit activations and recover the exact penalty. This result has been previously reported in [17], and motivated the contractive penalty.\nSparse autoencoders force all hidden units to have similar mean activations[8] . We cannot directly relate this penalty to a form of noise, but we can recover a penalty that encourages sparsity on hidden unit activations. If we inject additive Gaussian noise on the activations of the hidden units with variance equal to the uncorrupted hidden unit activation then the marginalized noise penalty becomes: cH(x) = \u2211d i=1 hi\u2016wi\u20162. If activations are non-negative then this penalty will force many of the hidden unit activations to zero. We note that experimental results from neuroscience have shown that cortical neurons exhibit Poisson-like noise statistics with a Fano factor of 1."}, {"heading": "3.2 Dropout", "text": "Dropout is a simple regularizer used in training neural networks that applies multiplicative bernoulli noise to all units in a neural network [10]. This noise has been shown to effectively regularize deep neural networks, and has been linked to preventing co-adaptation of neurons and model averaging [9]. The primary motivation for NAEs was the success of dropout in improving generalization performance. We can analyze the effect of dropout noise in NAEs by computing the corresponding marginalized noise penalty: cH(x) = \u2211d i=1 Var(h\u0303i|h)\u2016w\u2032i\u20162 = p(1 \u2212 p) \u2211d i=1(hi\u2016w\u2032i\u2016)2 Thus dropout in a NAE shrinks the average size of the projective fields (hi\u2016w\u2032i\u2016) of the hidden units. Shrinking the size of the projective field helps to reduce the sensitivity of the reconstruction to dropping out hidden units."}, {"heading": "3.3 Other models", "text": "Recent work in neuroscience has shown that single-layer models trained with input and output noise and optimized to maximize mutual information yield receptive fields resembling those found in biological systems [7, 12]. Similar to our work, these models show the importance of input noise and hidden activation noise on learning representations.\nIn semantic hashing, Gaussian noise is injected at an intermediate layer to learn binary representations [19]. These representations allow for fast matching in lower-dimensional space using binary codes. To the best of our knowledge the advantage of adding noise in terms of accuracy of the fully trained autoencoder is not discussed."}, {"heading": "4 Autoencoder Experiments", "text": "Our theoretical analysis of noisy autoencoders shows that NAEs can implement a variety of regularized autoencoder penalties. Here we evaluate the effectiveness of noisy autoencoders at learning representations through a variety of experiments on natural images, MNIST, and CIFAR-10.\nAll experiments used stochastic gradient descent with momentum to train models. We found that momentum was critical in training both autoencoders and supervised deep networks. Learning rates, batch size, and additional hyperparameters were selected through a combination of manual and automatic grid searches on validation sets. We consider autoencoders with a sigmoidal encoder, linear decoder, and squared error loss. We experimented with isotropic Gaussian input noise with fixed variance \u03c32I , isotropic Gaussian hidden unit input noise with fixed variance \u03c3 2 Z , and hidden unit activation noise that was either dropout (with inclusion probability p), additive zero mean Gaussian with variance \u03c32H or multiplicative Gaussian with mean 1 and variance \u03c3 2 H. Unless otherwise specified, we fix the input noise to be \u03c32I = 0.1, and the number of hidden units to be 1000. All experiments were run in Python using the Pylearn21 framework on a single Intel Xeon machine with an NVIDIA GTX 660 GPU."}, {"heading": "4.1 Denoising Natural Images", "text": "In our first experiment, we evaluated the effect of dropout noise on the generalization performance of a noisy autoencoder. We trained two NAEs on 12x12 patches drawn from the van Hateren natural image dataset [20]. The first NAE had noise on the input but not hidden activations (simply a DAE), while the second additionally had dropout noise with p = 0.5 on the hidden activations. We evaluated denoising performance on an independent set of image patches with noise variance equal to the corrupting input noise of the NAE, and computed the average reconstruction error over 1000 noisy inputs. The NAE with and without dropout had average reconstruction errors of 2.5, and 3.2 respectively. Thus NAEs are able to improve denoising performance over typical DAEs."}, {"heading": "4.2 Effect on MNIST Features", "text": "To better understand the impact of dropout on NAE features, we trained a set of models with varying levels of input noise and dropout noise on hidden activations. We used smaller networks for this experiment, with 250 hidden units and training on only the first 10,000 digits of MNIST.\nIn Figure 2 (left), we show the effect of input noise and hidden unit activation noise on the learned features. With no input or hidden activation noise, the noisy autoencoder reduces to a vanilla autoencoder and tends to learn features which do not capture interesting structure in the data. As we increase the input noise, we learn features that capture increasingly larger local structure in the digits, as found in DAEs [21]. Increasing hidden activation noise leads to more global features that tend to resemble large strokes or segments of digits. If we increase both input noise and activation noise, we find features which resemble larger sections of digits. We also evaluated the classification error for these different models by using them to initialize a multilayer perceptron with a softmax classifier on top of the learned hidden representation. Importantly, we find the best performing model for classification contains both input noise and hidden activation noise (Figure 2, right)."}, {"heading": "4.3 MNIST Classification", "text": "To better evaluate the impact of hidden unit input and activation noise on NAE classification performance, we trained larger models with 2000 hidden units and fixed the Gaussian input noise variance at 0.1. We considered Gaussian noise at the hidden unit inputs, and both dropout and Gaussian noise at the hidden unit activations. These models were used as initialization for a MLP that was trained with standard backpropagation. The level of hidden noise on 10000 heldout examples from the training set was used to optimize the noise level. We also trained standard autoencoders, DAEs, and CAEs of the same architecture. We found that NAEs with a dropout of p = 0.25 achieved the lowest test error of 138.\n1http://github.com/lisa-lab/pylearn2\nGiven the pretrained NAE, we can also perform noisy backpropagation where we continue injecting noise into the model while training the classifier. This noise can be the same as when we perform pretraining, but it can also be an entirely different type of noise. We consider performing noisy backpropagation with \u03c32I = 0.1, and hidden noise that is either dropout with p = 0.25, or Gaussian additive noise with \u03c32H = 0.025. We find that the NAE dropout model tuned with dropout noise achieves a test error of 99. To the best of our knowledge, this is the lowest classification error achieved on MNIST with a single layer model. This model is able to waste less capacity in a large network, but requires regularization while performing supervised fine-tuning to prevent overfitting.\nSupervised training with Gaussian hidden noise also improves performance relative to standard backpropagation. However, Gaussian hidden noise does not help very much in the unsupervised features as it simply does weight decay."}, {"heading": "4.4 CIFAR-10 Classification", "text": "To validate the utility of NAEs in other models, we also analyze the CIFAR-10 dataset. We train a NAE with \u03c32I = 0.25, dropout hidden activation noise with p = 0.5, and 800 units on 6x6 patches extracted from the CIFAR-10 dataset. Using these features, we extract a high level representation of full size images using the pipeline from [6]. Training an SVM classifier on the resulting representation yielded an accuracy of 74.5%. This accuracy is slightly lower than that reported for the higher-order CAE [18], but better than all other regularized autoencoder representations. Training a DAE results in a lower accuracy of 73.6%, indicating that adding dropout noise while learning features is helpful."}, {"heading": "4.5 Purely Supervised MNIST", "text": "We have shown that different types of noise can be used to regularize hidden representations and improve classification performance on MNIST and CIFAR-10. Furthermore, we found that both dropout and additive Gaussian noise on hidden activations while fine-tuning can improve classification error. Here we experiment with a deep MNIST model from [10]. This model consists of two hidden layers of 1200 rectified linear units, and was trained with dropout on the inputs and hidden activations. It was formerly the state-of-the-art result for single models not incorporating prior domain knowledge or pretraining, but has recently been surpassed by maxout networks [9]. Both these networks utilize dropout while training, and the same scaling we perform at test time. Instead of training with dropout, we use other types of noise on the input and hidden unit activations. We experimented with additive Gaussian noise with a fixed variance, and additive Gaussian noise whose variance was proportional to the mean activation (we call this Poisson noise as a shorthand). We optimized these networks using SGD with momentum using the same parameters as in [10]. As in previous experiments, we fixed \u03c32I = 0.1, and selected \u03c3 2 H through cross validation for additive Gaussian noise. We found that our best Gaussian model had 85 errors on the test set and the best Poisson model has 92 errors, beating both dropout and maxout networks.\nTo better understand why these other types of noise beats dropout and the noiseless version, we visualized the hidden representation for both networks (Figure 3). We find that Gaussian noise leads to less noisy first layer filters, and tends to group together more similar second layer features. To further understand the influence of noise on the network, we analyzed the activations across the 3 different types of noise, and the noiseless network. We found that all types of noise increase both the lifetime and population sparsity of neurons in both layers of the network. Gaussian noise yielded the sparsest second layer representations, while dropout noise yieldest the sparsest first layer representations both in lifetime and population sparseness (Figure 4, rows 1 and 2). We also found that noise decorrelated activations relative to the noiseless network (Figure 4, row 3). This decorrelation with noise also flattened the spectrum of the activations, where the cumulative variance explained grew slower for the noisy networks (Figure 4, row 4). These results show that noise acts to sparsity and decorrelate representations, and spread information more evenly across the network."}, {"heading": "5 Discussion", "text": "In summary, by proposing a unifying principle for auto-encoders, namely robustness of autoencoders to injections of noise at all levels of internal representation, we have generated a framework for viewing a wide variety of previous training algorithms through a unified lens. Different choices of where to inject noise, and what type of noise, lead to different algorithms. This allows us to generate many new training algorithms by designing noise, not only in NAE\u2019s but also in networks engaged in direct supervised learning.\nUsing these techniques we can achieve very good performance on benchmark tasks. We are able to obtain the best performing pretrained one layer model on MNIST, as well as the best performing\n(a) (b)\ndeep model that does not incorporate prior knowledge or pretraining. However, we stress that we have perhaps not even begun to explore the full power of NAEs, as we have not systematically explored the huge design space for what type of noise to inject, and where and when to inject it. A great deal of research lies ahead in understanding this design space and generating the algorithms and theories for automatically making data dependent design choices in this space. Furthermore, both the space of noise that is useful for supervised training must also be explored, as well as how noise in NAEs and noise while supervised fine-tuning interact to optimize performance.\nFinally, intuitively, why might noise injection in the internal representations of a deep network be a good idea? We hypothesize that because each training data point has an inherent noise ball around its hidden representation, classification will not be possible unless data points of different classes lie outside each other\u2019s noise balls. This introduces an effective repulsion between data points of different classes in the space of hidden representations. On the other hand, the invariance of the classifier required to properly categorize different inputs of the same class introduces an inherent compressive force in the projective map from the input level to the hidden level. Thus noise on internal representations leads to a spreading of representations of different classes, and a contraction within classes that may be beneficial for generalization."}], "references": [{"title": "The effects of adding noise during backpropagation training on a generalization performance", "author": ["Guozhong An"], "venue": "Neural computation,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1996}, {"title": "Deep Learning of Representations: Looking Forward", "author": ["Yoshua Bengio"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Training with noise is equivalent to Tikhonov regularization", "author": ["Chris M Bishop"], "venue": "Neural computation,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1995}, {"title": "Marginalized Denoising Autoencoders for Domain Adaptation", "author": ["Minmin Chen", "Zhixiang Xu", "Kilian Weinberger", "Fei Sha"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "Boltzmann Machines and Denoising Autoencoders for Image Denoising", "author": ["Kyunghyun Cho"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "An analysis of single-layer networks in unsupervised feature learning", "author": ["A Coates", "H Lee", "A Y Ng"], "venue": "Ann Arbor,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "Efficient coding of spatial information in the primate retina", "author": ["E Doi", "J L Gauthier", "G D Field", "J Shlens"], "venue": "The Journal of ", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "Measuring invariances in deep networks", "author": ["Ian Goodfellow", "Quoc Le", "Andrew Saxe", "Honglak Lee", "Andrew Y Ng"], "venue": "Advances in neural information processing systems,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2009}, {"title": "Improving neural networks by preventing co-adaptation of feature detectors", "author": ["Geoffrey E Hinton", "Nitish Srivastava", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan R Salakhutdinov"], "venue": "Pairwise Correlation", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2012}, {"title": "Improved Generalization by Adding both Auto-Association and Hidden-Layer- Noise to Neural-Network-Based-Classifiers", "author": ["H Inayoshi", "T Kurita"], "venue": "Machine Learning for Signal Processing,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2005}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoff Hinton"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2012}, {"title": "Ica with reconstruction cost for efficient overcomplete feature learning", "author": ["Quoc V Le", "Alexandre Karpenko", "Jiquan Ngiam", "Andrew Y Ng"], "venue": "Advances in neural information processing systems,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2011}, {"title": "Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations", "author": ["Honglak Lee", "Roger Grosse", "Rajesh Ranganath", "Andrew Y Ng"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "Contractive auto-encoders: Explicit invariance during feature extraction", "author": ["S Rifai", "P Vincent", "X Muller", "X Glorot", "Y Bengio"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2011}, {"title": "Adding noise to the input of a model trained with a regularized objective", "author": ["Salah Rifai", "Xavier Glorot", "Yoshua Bengio", "Pascal Vincent"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2011}, {"title": "Higher order contractive auto-encoder", "author": ["Salah Rifai", "Gr\u00e9goire Mesnil", "Pascal Vincent", "Xavier Muller", "Yoshua Bengio", "Yann Dauphin", "Xavier Glorot"], "venue": "In ECML PKDD\u201911: Proceedings of the 2011 European conference on Machine learning and knowledge discovery in databases", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2011}, {"title": "Independent component filters of natural images compared with simple cells in primary visual cortex", "author": ["J Hans van Hateren", "Arjen van der Schaaf"], "venue": "Proceedings of the Royal Society of London. Series B: Biological Sciences,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1998}, {"title": "Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion", "author": ["P Vincent", "H Larochelle", "I Lajoie", "Y Bengio", "P A Manzagol"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2010}, {"title": "Stochastic Pooling for Regularization of Deep Convolutional Neural Networks", "author": ["Matthew D Zeiler", "Rob Fergus"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2013}], "referenceMentions": [{"referenceID": 2, "context": "Regularization through noise [3, 1] has regained focus recently in the training of supervised neural networks.", "startOffset": 29, "endOffset": 35}, {"referenceID": 0, "context": "Regularization through noise [3, 1] has regained focus recently in the training of supervised neural networks.", "startOffset": 29, "endOffset": 35}, {"referenceID": 10, "context": "Randomly dropping out units while performing backpropagation has been shown to consistently improve the performance of large neural networks [13, 10].", "startOffset": 141, "endOffset": 149}, {"referenceID": 8, "context": "Randomly dropping out units while performing backpropagation has been shown to consistently improve the performance of large neural networks [13, 10].", "startOffset": 141, "endOffset": 149}, {"referenceID": 18, "context": "Stochastic pooling, where a set of input units are gated based off their activations, has also been shown to improve performance in convolutional nets over noiseless max and average pooling [23, 15].", "startOffset": 190, "endOffset": 198}, {"referenceID": 12, "context": "Stochastic pooling, where a set of input units are gated based off their activations, has also been shown to improve performance in convolutional nets over noiseless max and average pooling [23, 15].", "startOffset": 190, "endOffset": 198}, {"referenceID": 17, "context": "The role of input noise in training unsupervised networks has also been extensively explored in recent years [21].", "startOffset": 109, "endOffset": 113}, {"referenceID": 1, "context": "The typical training criterion for autoencoders is minimizing the reconstruction error, \u2211 x\u2208X L(x, r(x)) with respect to some loss L, typically either squared error or the binary cross-entropy [2].", "startOffset": 193, "endOffset": 196}, {"referenceID": 17, "context": "Denoising autoencoders (DAEs) are an extension of autoencoders trained to reconstruct a clean version of an input from its corrupted version [21].", "startOffset": 141, "endOffset": 145}, {"referenceID": 4, "context": "Prior work has shown that DAEs can be stacked to learn more complex representations that are useful for a variety of tasks [5, 21, 4].", "startOffset": 123, "endOffset": 133}, {"referenceID": 17, "context": "Prior work has shown that DAEs can be stacked to learn more complex representations that are useful for a variety of tasks [5, 21, 4].", "startOffset": 123, "endOffset": 133}, {"referenceID": 3, "context": "Prior work has shown that DAEs can be stacked to learn more complex representations that are useful for a variety of tasks [5, 21, 4].", "startOffset": 123, "endOffset": 133}, {"referenceID": 9, "context": "Injecting noise into both the inputs and hidden representations of autoencoders has been proposed for linear networks in prior work by [11], but has not been analyzed in detail for nonlinear representations.", "startOffset": 135, "endOffset": 139}, {"referenceID": 2, "context": "This allows us to exactly marginalize out the noise on the hidden unit activations using a result from [3]:", "startOffset": 103, "endOffset": 106}, {"referenceID": 11, "context": "A similar type of penalty is found when learning overcomplete representations with reconstruction ICA, where they use \u2016WWT \u2212 I\u2016F to encourage a diverse set of filters [14].", "startOffset": 167, "endOffset": 171}, {"referenceID": 13, "context": "Contractive autoencoders aim to learn a representation that is insensitive to small changes in the input space [16].", "startOffset": 111, "endOffset": 115}, {"referenceID": 14, "context": "This result has been previously reported in [17], and motivated the contractive penalty.", "startOffset": 44, "endOffset": 48}, {"referenceID": 7, "context": "Sparse autoencoders force all hidden units to have similar mean activations[8] .", "startOffset": 75, "endOffset": 78}, {"referenceID": 8, "context": "Dropout is a simple regularizer used in training neural networks that applies multiplicative bernoulli noise to all units in a neural network [10].", "startOffset": 142, "endOffset": 146}, {"referenceID": 6, "context": "Recent work in neuroscience has shown that single-layer models trained with input and output noise and optimized to maximize mutual information yield receptive fields resembling those found in biological systems [7, 12].", "startOffset": 212, "endOffset": 219}, {"referenceID": 16, "context": "We trained two NAEs on 12x12 patches drawn from the van Hateren natural image dataset [20].", "startOffset": 86, "endOffset": 90}, {"referenceID": 17, "context": "As we increase the input noise, we learn features that capture increasingly larger local structure in the digits, as found in DAEs [21].", "startOffset": 131, "endOffset": 135}, {"referenceID": 5, "context": "Using these features, we extract a high level representation of full size images using the pipeline from [6].", "startOffset": 105, "endOffset": 108}, {"referenceID": 15, "context": "This accuracy is slightly lower than that reported for the higher-order CAE [18], but better than all other regularized autoencoder representations.", "startOffset": 76, "endOffset": 80}, {"referenceID": 8, "context": "Here we experiment with a deep MNIST model from [10].", "startOffset": 48, "endOffset": 52}, {"referenceID": 8, "context": "We optimized these networks using SGD with momentum using the same parameters as in [10].", "startOffset": 84, "endOffset": 88}], "year": 2014, "abstractText": "Autoencoders have emerged as a useful framework for unsupervised learning of internal representations, and a wide variety of apparently conceptually disparate regularization techniques have been proposed to generate useful features. Here we extend existing denoising autoencoders to additionally inject noise before the nonlinearity, and at the hidden unit activations. We show that a wide variety of previous methods, including denoising, contractive, and sparse autoencoders, as well as dropout can be interpreted using this framework. This noise injection framework reaps practical benefits by providing a unified strategy to develop new internal representations by designing the nature of the injected noise. We show that noisy autoencoders outperform denoising autoencoders at the very task of denoising, and are competitive with other single-layer techniques on MNIST, and CIFAR10. We also show that types of noise other than dropout improve performance in a deep network through sparsifying, decorrelating, and spreading information across representations.", "creator": "LaTeX with hyperref package"}}}