{"id": "1409.3446", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Sep-2014", "title": "Consensus-Based Modelling using Distributed Feature Construction", "abstract": "A particularly successful role for Inductive Logic Programming (ILP) is as a tool for discovering useful relational features for subsequent use in a predictive model. Conceptually, the case for using ILP to construct relational features rests on treating these features as functions, the automated discovery of which necessarily requires some form of first-order learning. Practically, there are now several reports in the literature that suggest that augmenting any existing features with ILP-discovered relational features can substantially improve the predictive power of a model. While the approach is straightforward enough, much still needs to be done to scale it up to explore more fully the space of possible features that can be constructed by an ILP system. This is in principle, infinite and in practice, extremely large. Applications have been confined to heuristic or random selections from this space. In this paper, we address this computational difficulty by allowing features to be constructed in a distributed manner. That is, there is a network of computational units, each of which employs an ILP engine to construct some small number of features and then builds a (local) model. We then employ a consensus-based algorithm, in which neighboring nodes share information to update local models. For a category of models (those with convex loss functions), it can be shown that the algorithm will result in all nodes converging to a consensus model. In practice, it may be slow to achieve this convergence. Nevertheless, our results on synthetic and real datasets that suggests that in relatively short time the \"best\" node in the network reaches a model whose predictive accuracy is comparable to that obtained using more computational effort in a non-distributed setting (the best node is identified as the one whose weights converge first). However, in an application where the input data is non-distributed, the optimal results can vary across nodes in several ways. First, we estimate that an increase in the likelihood that a model that fails to converge will be a \"best\" node in the network. In a model with a sparse distribution (the best one), this can be considered to be a \"best\" node, but in a model where the input data is non-distributed, the optimal results are still not equal. We use the same approach to model the following situations, in which a model that fails to converge, does not converge to a consensus model because it is an entirely natural distribution of the output data (an alternative approach to model-based models that are not currently based on natural selection). Second, the model is highly predictive, while the model", "histories": [["v1", "Thu, 11 Sep 2014 14:11:02 GMT  (216kb,D)", "http://arxiv.org/abs/1409.3446v1", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["haimonti dutta", "ashwin srinivasan"], "accepted": false, "id": "1409.3446"}, "pdf": {"name": "1409.3446.pdf", "metadata": {"source": "CRF", "title": "Consensus-Based Modelling using Distributed Feature Construction", "authors": ["Haimonti Dutta", "Ashwin Srinivasan"], "emails": ["haimonti@buffalo.edu", "ashwin@iiitd.ac.in"], "sections": [{"heading": null, "text": "? A short 6-page version of this paper was presented at the 24th International Conference on Inductive Logic Programming, held in conjunction with ECML PKDD, France. Furthermore, a significant part of the work in this paper was done when the first author was an Associate Research Scientist at the Center for Computational Learning Systems (CCLS), Columbia University, NY.\nar X\niv :1\n40 9.\n34 46\nv1 [\ncs .L\nG ]\n1 1"}, {"heading": "1 Introduction", "text": "The field of Inductive Logic Programming (ILP) has made steady progress over the past two decades, in advancing the theory, implementation and application of logic-based relational learning. A characteristic of this form of machine-learning is that data, prior knowledge and hypotheses are usually\u2014but not always\u2014 expressed in a subset of first-order logic, namely logic programs. Side-stepping for the moment the question \u201cwhy logic programs?\u201d, it is evident that settling on some variant of first-order logic allows the construction of tools that enable the automatic construction of descriptions that use relations (used here in the formal sense of a truth value assignment to n-tuples).\nThere is at least one kind of tasks where some form of relational learning would appear to be necessary. This is to do with the identification of functions (again used formally, in the sense of being a uniquely defined relation) whose domain is the set of instances in the data. An example is the construction of new \u201cfeatures\u201d for data analysis based on existing relations (\u201cf(m) = y if a molecule m has 3 or more benzene rings fused together otherwise f(m) = n\u201d). Such features are not intended to constitute a stand-alone description of a system\u2019s structure. Instead, their purpose is to enable different kinds of data analysis to be performed better. These may be constructing models for discrimination, joint probability distributions, forecasting, clustering, and so on. If a logic-based relational learner like an ILP engine is used to construct these relational features, then each feature is formulated as a logical formula. A measure of comprehensibility will be retained in the resulting models that use these features.\nThe approach usually, but not always, separates relational learning (to discover features) and modelling (to build models using these features). There will of course be problems that require the joint identification of relational with features and models\u2014the emerging area of statistical relational learning (SRL), for example, deals with the conceptual and implementation issues that arise in the joint estimation of statistical parameters and relational models. It would appear that separate construction of features and statistical models would represent no more than a poor man\u2019s SRL. Nevertheless, there is now a growing body of research that suggests that augmenting any existing features with ILPconstructed relational ones can substantially improve the predictive power of a statistical model (see, for example: [29, 49, 52, 47, 53]). There are thus very good practical reasons to persist with this variant of statistical and logical learning for data analysis.\nThere are known shortcomings with the approach which can limit its applicability. First, the set possible relational features is usually not finite This has led to an emphasis on syntactic and semantic restrictions constraining the features to some finite set. In practice this set is still very large, and it is intractable to identify an optimal subset of features. ILP engines for feature-construction therefore employ some form of heuristic search. Second, much needs to be done to scale ILP-based feature discovery up to meet modern \u201cbig\u201d data requirements. This includes the abilities to discover features using very large datasets not all stored in one place, and perhaps only in secondary memory; from rela-\ntional data arriving in a streaming manner; and from data which do not conform to expected patterns (the concept changes, or the background knowledge becomes inappropriate). Third, even with \u201csmall\u201d data, it is well-known that obtaining the value of a feature function for a data instance can be computationally hard. This means that obtaining the feature-vector representation using ILP-discovered features can take large amounts of time.\nThis paper is concerned only with the first of these problems, namely how to construct models when feature-spaces are very large. Each node has access to some (but not all) relational features constructed by an ILP engine, and constructs a local linear model. Using a simple consensus-based algorithm, all nodes in the network converge on the optimal weights for all the features. The setting is naturally amenable to distributed learning, providing us with a mechanism of scaling-up the construction of models using ILP-based feature discovery. Our approach does not result an optimal answer to the feature-selection problem. However it does have some positive aspects: it provides one way of distributing the computational task of feature-construction; and given multiple, possibly overlapping sets of relational features, it provides one way of identifying the best model (for a specific category of models). Figure 1 illustrates this. The algorithm for distributed feature estimation, described in Section 3.1 is an implementation of such an approach.\nSection 2 presents related work; Section 3.1 formulates the problem as one of consensus-based model construction. Section 3.2 presents an iterative procedure for constructing models in a network of nodes capable of exchanging informa-\ntion about their local models. Experimental results are in Section 4. Section 5 discussed open issues and concludes the paper."}, {"heading": "2 Related Work", "text": "Techniques for selecting from a (large) but finite set of features of known size d has been well-studied within the machine learning, usually under the umbrellaterms of filter-based or wrapper-based methods (see for example, [28, 36]). While most of the early work was intended for implementation on a single machine, feature-selection from fixed-sized feature spaces has been extended to a distributed setting for large datasets. Here, the data are partitioned and placed on different processors; processors must communicate to find parameters that minimize loss over the entire dataset. However, communication has to be fast enough so that network latencies do not offset computational gains. The partitioning scheme \u2013 horizontal (all instances have the same features) or vertical (instances have access to only a subset of features) plays an important role in the design of these distributed algorithms. Early work in decentralized optimization was marked by interest in consensus-based learning, distributed optimization and minimization with the seminal work of Bertsekas, Tsitsiklis and colleagues ([60, 59, 7]). More recently, researchers have shown that convergence properties of these decentralized algorithms can be related to the network topology by using spectral properties of random walks or path averaging arguments on the underlying graph structure ([11, 51, 20, 6]). Learning feature subsets in distributed environments using decentralized optimization has become an active area of research ([21, 1, 15]) in recent years.\nAgarwal et al. [1] present a system and a set of techniques for learning linear predictors with convex losses on terabyte sized datasets. Their goal is to learn problems of the form min w\u2208Rd \u2211n i=1 l(w\nTxi; yi)+\u03bbR(w) where xi is the feature vector of the ith example, w is the weight vector and R is a regularizer. The data are split horizontally and examples are partitioned on different nodes of a cluster. Duchi et al. [21] present a dual averaging sub-gradient method which maintains and forms weighted averages of sub-gradients in the network. An interesting contribution of this work is the association of convergence of the algorithm with the underlying spectral properties of the network. Similar techniques for learning linear predictors have been presented elsewhere ([37, 38, 62], [42, 12]). The algorithm presented in this paper differs from this body of literature in that the data are split vertically amongst nodes in the cluster thereby necessitating a different algorithm design strategy. In addition, this is a batch algorithm and hence quite different from distributed online learning counterparts ([19, 34, 9]).\nDas et al. [18] show that three popular feature selection criteria \u2013 misclassification gain, gini index and entropy can be learnt in a large peer-to-peer network. This is then combined with protocols for asynchronous distributed averaging and the secure sum protocols to present a privacy preserving asynchronous feature selection algorithm.\nExisting literature on discovering a subset of interesting features from large, complex search spaces such as those by ILP engines adapt one of the following strategies:\n1. Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem. 2. Optimally [24, 41] solve a convex optimization problem with sparsity inducing regularizers; 3. Compute all relational features that satisfy some quality criterion by systematically and efficiently exploring a prescribed search space [44, 27, 4, 3, 45, 2, 46, 5, 22].\nAgain, much of this has been of a non-distributed nature, and usually assume a bound on the size of the feature-space. The latter is not the case for a technique like the one proposed in [29]. This describes a randomized local search based technique which repeatedly constructs features and then performs a greedy local search starting from this subset. Since enumeration of all local moves can be prohibitively large, the selection of moves is guided by errors made by the model constructed using the current set of features. Nothing is assumed about the size of the feature-space, making it a form of vertical partitioning of the kind we are interested in. Multiple random searches can clearly be conducted in parallel (although this is not done in the paper). As with most randomised techniques of this kind, not much can be said about the final model.\nPerhaps of most interest to the work here is the Sparse Network Of Winnow classifers described in [48, 13]. As it stands, this horizontally partitions the data into subsets, constructs multiple linear models using Winnow\u2019s multiplicative update process, and finally uses a majority vote to arrive at a consensus classification. This would appear, on the surface to be quite different to what we propose here. Nevertheless, there are reasons to believe that this approach can be usefully extended to the setting we propose. It has been shown elsewhere that the Winnow-based approach can be extended to an infinite-attribute setting [?]. The work in this paper shows that consensus linear models are possible when convex cost functions are used. Finally, from the ILP-viewpoint, [55] shows how it is possible to construct Winnow-based models in an infinite-attribute setting using an ILP engine with a stream-based model of the data. Taken together, this suggests that a combination of the techniques we propose, and those in [13] can be used to develop linear models that can handle both horizontal partitioning of the data and vertical partitioning of the feature-space."}, {"heading": "3 Consensus-Based Model Construction", "text": ""}, {"heading": "3.1 Problem Description", "text": "Let M denote an n\u00d7m matrix with real-valued entries. This matrix represents a dataset of n tuples of the form Xi \u2208 Rm, 1 \u2264 i \u2264 n. Assume, without loss of generality, this dataset has been vertically distributed over k sites S1, S2, \u00b7 \u00b7 \u00b7 , Sk\nInput: n\u00d7mi matrix at each site Si, G(V,E) which encapsulates the underlying communication framework, T : no of iterations Output: Each site Si has Wi \u2248Wg[1 : mi] for t = 1 to T do\n(a) Site Si computes MiW T i locally and estimates the loss function; (b) Site Si gossips with its neighbors Sj \u2208 {Ni} and obtains MjWTj for each neighbor; (c) Site Si locally updates its function estimate as Jti = \u03b1ii(MiW T i ) + \u03b1ji(MjW T j ) ; (d) Update the local weight vectors using stochastic gradient descent as follows: \u2202Lp \u2202Wi\n= \u2212Xp(Yp \u2212 Jti (W ti (p))); (e) If there is no significant change in the local weight vectors of one of the sites then stop\nend Algorithm 1: Consensus-Based Modelling\ni.e. site S1 has m1 features, S2 has m2 features and so on, such that |m1| + |m2| + \u00b7 \u00b7 \u00b7 + |mk| = |m|, where |mi| represents the number of features at site Si\n3. Let M1 denote the n\u00d7m1 matrix representing the dataset held by S1, M2 denote the n\u00d7m2 matrix representing the dataset held by S2 and so on. Thus, M = M1 : M2 : \u00b7 \u00b7 \u00b7 : Mk denotes the concatenation of the local datasets.\nWe want to learn a linear discriminative function over the data set M . The global function to be estimated is represented by fg = MW T g where Wg is assumed to be a 1\u00d7m weight vector. If only the local data is used, at site S1, the local function estimated would be f1 = M1W T 1 . At site S2, the local function estimated would be f2 = M2W T 2 . The goal is to describe a de-centralized algorithm for computing the weight vectors at sites S1, \u00b7 \u00b7 \u00b7Sk such that on termination W1 \u2248 Wg[1 : m1],W2 \u2248 Wg[1 : m2], \u00b7 \u00b7 \u00b7Wk \u2248 Wg[1 : mk] where Wg[1 : mi] represents the part of the global weight vector for the attributes stored at that site Si. Clearly, if all the datasets are transferred to a central location, the global weight vector can be estimated. Our objective is to learn the function in the decentralized setting assuming that transfer of actual data tuples is expensive and may not be allowed (say for example due to privacy concerns). The weights obtained at each site on termination of the algorithm will be used for ranking the features."}, {"heading": "3.2 Algorithm", "text": "We state the following assumptions under which the distributed algorithm operates:\nAssumption 1: Model of Distributed Computation. The distributed algorithm evolves over discrete time with respect to a \u201cglobal\u201d clock4. Each site has\n3 In the more general setting, Site Si has a random subset of features mi \u2282 m. 4 Existence of this clock is of interest only for theoretical analysis.\naccess to a local clock. Furthermore, each site has its own memory and can perform local computation (such as computing the gradient on its local attributes). It stores fi, which is the estimated local function. Besides its own computation, sites may receive messages from their neighbors which will help in evaluation of the next estimate for the local function.\nAssumption 2: Communication Protocols. Sites Si are connected to one another via an underlying communication framework represented by a graphG(V,E), such that each site Si \u2208 {S1, S2, \u00b7 \u00b7 \u00b7 , Sk} is a vertex and an edge eij \u2208 E connects sites Si and Sj . Communication delays on the edges in the graph are assumed to be zero. It must be noted that the communication framework is usually expected to be application dependent. In cases where no intuitive framework exists, it may be possible to simply rely on the physical connectivity of the machines, for example, if the sites Si are part of a large cluster.\nAlgorithm 1 describes how the weights for attributes will be estimated using a consensus-based protocol. There are two main sub-parts of the algorithm: (1) Exchange of local function estimate and (2) Local update based on stochastic gradient descent. Each of these sub-parts are discussed in further detail below. Furthermore, assume that J : Rm \u2192 [0,\u221e] is a continuously differentiable nonnegative cost function with a Lipschitz continuous derivative.\nExchange of Local Function Estimate: Each site locally computes the loss based on its attributes and then gossips with the neighbors to get information on other attributes. On receiving an update from a neighbor, the site re-evaluates Ji by forming a component-wise convex combination of its old vector and the values in the messages received from neighbors i.e. J t+1i = \u03b1ii(XiW T i )+\u03b1ji(XjW T j ). It is interesting to note that \u03b1il, 0 \u2264 \u03b1il \u2264 1, is a non-negative weight that captures the fraction of information site i is willing to share with site l. The choice of \u03b1il may be deterministic or randomized and may or may not depend on the time t [30]. The k\u00d7 k matrix A comprising of \u03b1il, 1 \u2264 i \u2264 k, 1 \u2264 l \u2264 k is a \u201cstochastic\u201d matrix such that it has non-negative entries and each row sums to one. More generally, this reflects the state transition probabilities between sites. Figure 2 illustrates the state transition between two sites Si and Sj .\nAnother interpretation of the diffusion of Ji amongst the neighbors of i involves drawing analogies from Markov chains \u2013 the diffusion is mathematically identical to the evolution of state occupation probabilities. Furthermore, a simple vector equation can be written for updating J ti to J t+1 i i.e. J t+1 i = A(i)(J t i )Ni where A(i) corresponds to the row i of the matrix A and (J ti )Ni is a matrix that has |Ni| rows (each row corresponding to a neighbor of Site Si) and n columns (each column corresponding to all the instances). More generally, J t+1 = AJ t where J t+1 is a k\u00d7 n matrix storing the local function estimates of each of the n instances at site k and A is the k\u00d7k transition probability matrix corresponding to all the sites. It follows that limt\u2192\u221eA\nt exists and this controls the rate of convergence of the algorithm.\nWe introduce the notion of average function estimate in the network Jti =\u2211 i Jti k which allocates equal weight to all the local function estimates and serves as a baseline against which individual sites Si\u2019s can compare their performance. Philosophically, this also implies that each local site should at least try to attain as much information as required to converge to the average function estimate. Since \u2211 i \u03b1ij = 1, this estimate is invariant.\nThe A matrix has interesting properties which allow us to show that convergence to Jti occurs. One such property is the Perron-Frobenius theory of irreducible non-negative matrices. We state the theorem here for continuity.\nTheorem 1 Perron-Frobenius [61] Let A be a positive, irreducible matrix such that the rows sum to 1. Then the following are true:\n1. The eigenvalues of A of unit magnitude are the k-th roots of unity for some k and are all simple.\n2. The eigenvalues of A of unit magnitude are the k-th roots of unity if and only if A is similar under a permutation to a k cyclic matrix\n3. all eigenvalues of A are bounded by 1.\nSince the eigenvalues ofA are bounded by 1, it can be shown that J ti converges to the average function estimate Jti if and only if -1 is not an eigen value [61]. Let \u03bbn \u2264 \u03bbn\u22121 \u2264 \u00b7 \u00b7 \u00b7 \u2264 \u03bb2 < \u03bb1 = 1 be the eigenvalues of A with \u03bb1 = 1. Also assume that \u03b3(A) = maxi>1|\u03bbi|. It can be shown that \u2016 J t+1i \u2212 J ti \u20162\u2264 \u03b32 \u2016 J ti \u2212 J ti \u2016. If \u03b3 = 1, then system fails to converge [61], [16].\nLocal Stochastic Gradient update is done as follows: W t+1i = W t i \u2212 \u03b7tisti where sti = \u2202Jti \u2202W ti (Xr,W t i ), Xr \u2208 Rmi is the estimated gradient, W ti is the weight vector and \u03b7ti is the learning rate at node i at time t."}, {"heading": "3.3 Convergence", "text": "The proof of convergence of the algorithm makes use of the following concept: In the distributed setting, the process of information exchange between k sites can be modeled as a non-stationary Markov chain. A non-stationary Markov chain is weakly ergodic if the dependence on the state distribution vanishes as time tends to infinity [60]. A detailed discussion regarding convergence of the algorithm is presented here.\nFirst, we make the following assumptions about the cost function J :\nAssumption 3:\n1. There holds J(W t) \u2265 0, for every W t \u2208 Rm 2. Lipschitz Continuity of \u2207J : The function J is continuously differentiable\nand there exists a constant K1 such that\n\u2016 \u2207J(W t1)\u2212\u2207J(W t2) \u2016\u2264 K1 \u2016W t1 \u2212W t2 \u2016,\u2200 W t1 ,W t2 \u2208 Rm. (1)\n3. If J satisfies the Lipschitz condition above, then\nJ(W t1 +W t2) \u2264 J(W t1) + (W t2)\u2207J(W t1) \u2032 + K\n2 \u2016W t2 \u201622, for all W t1 ,W t2 \u2208 Rm.\nIn our algorithm, the vector W t is split over sites S1, S2, \u00b7 \u00b7 \u00b7 , Sk. The attributes at site Si, (1 \u2264 i \u2264 k) are updated according to the following equation:\nW t+1i = W t i \u2212 \u03b7tisti (2)\nwhere \u03b7ti is the step size and s t i is the descent direction at site Si. Let T i be the set of times when processor i makes an update. It is assumed that sti = 0 when t /\u2208 T i. For times t \u2208 T i, we assume that the update direction is such that the cost function decreases and sti has the opposite sign from \u2207Ji(W ti ). The underlying deterministic gossip algorithm is described by:\nW t+1i = \u2211\n{i|t\u2208T i}\n\u03b1iiW t i + \u2211 {j|t\u2208T i} \u03b1ijW t j (3)\nwhere the coefficients \u03b1\u2019s are non-negative scalars.\nExample 1 Let Si and Sj be the only two sites communicating with each other. Then equation 3 reduces to\nW t+1i = \u03b1iiW t i + \u03b1ijW t j\n= \u03b1ii(W t\u22121 i \u2212 \u03b7 t\u22121 i s t\u22121 i ) + \u03b1ij(W t\u22121 j \u2212 \u03b7 t\u22121 j s t\u22121 j ) = (\u03b1iiW t\u22121 i + \u03b1ijW t\u22121 j )\u2212 (\u03b1ii\u03b7 t\u22121 i s t\u22121 i + \u03b1ij\u03b7 t\u22121 j s t\u22121 j ) = \u00b7 \u00b7 \u00b7 = (\u03b1iiW 1 i + \u03b1ijW 1 j )\u2212 (\u03b1ii(\u03b7t\u22121i s t\u22121 i + \u03b7 t\u22122 i s t\u22122 i \u00b7 \u00b7 \u00b7+ \u03b7 1 i s 1 i ) + \u03b1ij(\u03b7 t\u22121 j s t\u22121 j + \u03b7 t\u22122 j s t\u22122 j + \u00b7 \u00b7 \u00b7+ \u03b7 1 j s 1 j ))\nHence, by induction it can be shown that:\nW ti = k\u2211 j=1 \u03b1ijW 1 j + t\u22121\u2211 \u03c4=1 k\u2211 j=1 \u03b1ij\u03b7 \u03c4 j s \u03c4 j (4)\nIt is also assumed that there exist positive constants K4 and K5 such that stepsizes \u03b7ti are bounded as follows: K4 t \u2264 \u03b7 t i \u2264 K5t . Furthermore, the following assumptions hold true:\nAssumption 4:\n1. \u2200i, j and 0 \u2264 \u03c4 \u2264 t, 0 \u2264 \u03b1ij \u2264 1. 2. For any i, j and \u03c4 \u2265 0, the limit of \u03b1ij as t tends to infinity exists and is the\nsame for all i and is denoted by \u03b1i 3. There exists some \u03b7 > 0 such that \u03b1j \u2265 \u03b7 and \u2200j \u2208 {1, \u00b7 \u00b7 \u00b7 , k} and \u03c4 \u2265 0 4. There exists constants A > 0 and \u03c1 \u2208 (0, 1) such that |\u03b1ij\u2212\u03b1j | \u2264 A\u03c1t\u2212\u03c4 ,\u2200t > \u03c4 > 0\nAssumption 5: Descent Lemma [7] at each site: (a) For every i and t we have,\nsti\u2207Ji(W ti ) \u2264 0. (5)\n(b) There exist positive constants K2 and K3 such that\nK2|\u2207Ji(W ti )| \u2264 |sti| \u2264 K3|\u2207Ji(W ti )| (6)\nLet S(t) be the set of random variables defined by: S(t) = {s\u03c4i |i \u2208 {1, \u00b7 \u00b7 \u00b7 , k}, \u03c4 < t}. The variables in S(t) are the only sources of randomness upto the time t at site i. The set S(t) is also a representation of the entire history of the algorithm upto the moment that the update directions s\u03c4i are generated.\nAssumption 6: Stochastic Descent Lemma [7] at each site: There exist positive constants K6, K7 and K8 such that: (a)\n\u2207J(W ti )\u2032E[sti|S(t)] \u2264 \u2212K6 \u2016 \u2207J(W ti ) \u20162,\u2200t \u2208 T i. (7)\n(b) E[\u2016 sti \u20162 |S(t)] \u2264 K7 \u2016 \u2207J(W ti ) \u20162 +K8,\u2200t \u2208 T i. (8)\nTheorem 5 implies that the expected direction of the update given the past history is in the descent direction. In Theorem 6 the presence of constant K8 in the inequality allows the algorithm to make non-zero updates even when the minimum has been reached.\nAssumption 7: Partial Asynchronism [7]) There exists a positive integer B such that: (a) For every i and for every t \u2265 0 at least one of the elements of the set {t, t+ 1, \u00b7 \u00b7 \u00b7 , t+B \u2212 1} belongs to T i. (b) There holds max{0, t\u2212B + 1} \u2264 \u03c4 tij \u2264 t, for all i and j and t \u2265 0.\nFinally, for completion we introduce the notions of martingales and the martingale convergence theorem(s) which are required for the proofs in this appendix.\nA martingale is a model of a fair game where knowledge of past events never helps predict the mean of the future winnings. In general, a martingale is a stochastic process for which, at a particular time in the realized sequence, the expectation of the next value in the sequence is equal to the present observed value even given knowledge of all prior observed values at a current time5. A formal definition (using measure theory [58]) is given below:\nLet (\u03c3,F , P ) be a probability space. A martingale sequence of length n, is a sequence X1, X2, \u00b7 \u00b7 \u00b7 , Xn of random variables and corresponding sub-\u03c3 fields F1,F2, \u00b7 \u00b7 \u00b7 ,Fn that satisfy the following relations:\n\u2022 Each Xi is an integrable random variable which is measurable with respect to the corresponding \u03c3-field Fi. \u2022 The sigma fields are increasing Fi \u2282 Fi+1 for every i \u2022 For every i \u2208 [1, 2, \u00b7 \u00b7 \u00b7 , n\u2212 1], we have the relation, Xi = E[Xi+1|Fi] almost\neverywhere P .\nAlong the same lines,\n\u2022 A submartingale is defined as: for every i, Xi \u2264 E[Xi+1|Fi] almost everywhere P and \u2022 A supermartingale is defined as: for every i, Xi \u2265 E[Xi+1|Fi] almost every-\nwhere P .\nMartingale convergence theorem is a special type of theorem since the convergence follows from the structural properties of the sequence of random variables. The Supermartingale Convergence theorem and a variant used in proofs is presented next.\nSupermartingale Convergence Theorem [7]: Let {Yi} be a sequence of random variables and let {Fi} be a sequence of finite sets of random variables such that Fi \u2282 Fi+1 for each i. Suppose that:\n\u2022 Each Yi is non-negative \u2022 For each i, we have E[Yi] <\u221e \u2022 For each i, we have E[Yi+1|Fi] \u2264 Yi with probability 1.\nThen there exists a non-negative random variable Y such that the sequence of {Yi} converges to Y with probability 1.\n5 http://en.wikipedia.org/wiki/Martingale (probability theory)\nAn extension of the above theorem, can be stated as follows: Let {Yi} and {Zi} be two sequence of random variables. Let {Fi} be a sequence of finite sets of random variables such that Fi \u2282 Fi+1 for each i. Suppose that:\n\u2022 The random variables Yi and Zi are non-negative. \u2022 There holds E[Yi+1|Fi] \u2264 Yi + Zi,\u2200i with probability 1. \u2022 There holds \u2211\u221e i=1E[Zi] <\u221e.\nThen there exists a nonnegative random variable Y such that the sequence {Yi} converges to Y with probability 1.\nProposition 1.0. Convergence of the DFE Algorithm Under the Assumptions 1.0-3.0, there exists some \u03b70 > 0, such that if 0 < \u03b7ti < \u03b7 0, then:\n1. limt\u2192\u221e J(W t i ) exists and is the same for all i with probability 1. 2. limt\u2192\u221e(W t i \u2212W tj ) = 0 with probability 1 and in the mean square sense. 3. For every i, limt\u2192\u221e\u2207J(W ti ) = 0. 4. Suppose that the set {W |J(W ) \u2264 C} is bounded for every C \u2208 R; then\nthere exists a unique vector W \u2217 at which J is minimized and this is the unique vector at which \u2207J vanishes. Then W ti converges to W \u2217 for each i with probability 1.\nProof. Without loss of generality, assume that \u03b7ti = 1 t ,\u2200i, t.\nWe note that the underlying gossip protocol illustrated by equation 3 has a simple structure but is not easy to manipulate in algorithms primarily because we have one such equation for each i and they are generally coupled. Thus we need to keep track of vectors W t1 ,W t 2 , \u00b7 \u00b7 \u00b7 ,W tk simultaneously. Analysis would be simpler if we could associate one single vector Wt that summarizes the information contained in W ti \u2019s. Let Wt be defined as follows:\nWt = k\u2211 i=1 \u03b1iW 1 i + t\u22121\u2211 \u03c4=1 k\u2211 i=1 \u03b1i\u03b7 \u03c4 i s \u03c4 i (9)\nThe interpretation of vector Wt is quite interesting in the following sense \u2013 if the sites stopped performing updates at time t\u0304, but keep communicating and forming convex combinations of their states using the gossip protocol, they will asymptotically agree and the vector they agree upon is Wt. Finally, Wt+1 = Wt + \u2211k i=1 \u03b1i\u03b7 t is t i.\nDefine also the following:\nbt = k\u2211 i=1 \u2016 sti \u2016, t \u2265 1. (10)\nGt = \u2212 k\u2211 i=1 \u2207J(W ti )\u2032\u03b1isti, t \u2265 1. (11)\nLemma 1.0 (a) If t \u2208 T i, then\nE[Gt|S(t)] \u2265 K6\u03bb \u2211\n{i|t\u2208T i}\n\u2016 \u2207J(W ti )\u2032 \u20162\u2265 0, (12)\nwhere \u03b1ii > \u03bb,\u2200i \u2208 {1, \u00b7 \u00b7 \u00b7 , k} and \u03bb > 0. (b) If t \u2265 1, then\nE[(bt)2|S(t)] \u2264 A1E[Gt|S(t)] +A2 (13)\nwhere A1 = kK7 \u03bbK6 and A2 = k 2K8 Proof: Using Assumption 2.0b, Equation 7 and the fact that si = 0, t /\u2208 T i, we have:\nE[Gt|S(t)] = \u2212 \u2211 i|t\u2208T i \u2207J(W ti )\u03b1iE[sti|S(t)]\n\u2265 \u2211 i|t\u2208T i K6 \u2016 \u2207J(W ti ) \u20162 \u03b1i\n\u2265 \u03bbK6 \u2211 i|t\u2208T i \u2016 \u2207J(W ti ) \u20162\nThis proves part (a) of the Lemma. Applying Equation 8 we obtain,\nE[(bt)2|S(t)] = E[( k\u2211 i=1 \u2016 sti \u2016)2|S(t)]\n\u2264 k k\u2211 i=1 E[\u2016 sti \u20162 |S(t)]\n\u2264 k k\u2211 i=1 (K7 \u2016 \u2207J(W ti ) \u20162 +K8) \u2264 kK7 \u03bbK6 E[Gt|S(t)] + k2K8\nwhere the last inequality uses the proof in part (a). Q.E.D. Lemma 2.0 For every t \u2265 1, we have\n\u2016 Wt \u2212W ti \u2016\u2264 A t\u22121\u2211 \u03c4=1 1 \u03c4 \u03c1t\u2212\u03c4 b\u03c4 (14)\nwhere A > 0, \u03c1 \u2208 (0, 1) Proof: Subtracting Equation 9 from Equation 4 we have\nWt \u2212W ti = t\u22121\u2211 \u03c4=1 k\u2211 j=1 1 \u03c4 [\u03b1j \u2212 \u03b1ij ]stj (15)\nFurthermore, using Assumption 1.1 (a) and definition 10 we obtain,\n\u2016 Wt \u2212W ti \u2016 \u2264 t\u22121\u2211 \u03c4=1 1 \u03c4 k\u2211 j=1 A\u03c1t\u2212\u03c4 \u2016 s\u03c4j \u2016\n\u2264 A t\u22121\u2211 \u03c4=1 1 \u03c4 \u03c1t\u2212\u03c4 b\u03c4 [Q.E.D]\nUsing the fact that Wt+1 = Wt + \u2211k i=1 \u03b1i\u03b7 t is t i and Assumption 1.0 (3) we\nobtain:\nJ(Wt+1) = J(Wt + k\u2211 i=1 \u03b1i\u03b7 t is t i)\n\u2264 J(Wt) + k\u2211 i=1 \u03b1i\u03b7 t is t i\u2207J(Wt+1) \u2032 + K 2 \u2016 k\u2211 i=1 \u03b1i\u03b7 t is t i \u201622\n\u2264 J(Wt) + 1 t k\u2211 i=1 \u03b1is t i\u2207J(W t+1i ) \u2032 + 1 t k\u2211 i=1 \u03b1is t i(\u2207J(Wt+1) \u2032 \u2212\u2207J(W t+1i ) \u2032 ) + K 2t2 \u2016 sti \u201622\n\u2264 J(Wt)\u2212 1 t G(t) + 1 t k\u2211 i=1 \u03b1is t iK1 \u2016 Wt+1 \u2212W t+1i \u2016 + K 2t2 (bt)2\n\u2264 J(Wt)\u2212 1 t G(t) + K1 t k\u2211 i=1 \u03b1is t iA t\u22121\u2211 \u03c4=1 1 \u03c4 \u03c1t\u2212\u03c4 b\u03c4 + K 2t2 (bt)2\n\u2264 J(Wt)\u2212 1 t G(t) + K1A t bt t\u22121\u2211 \u03c4=1 1 \u03c4 \u03c1t\u2212\u03c4 b\u03c4 + K 2t2 (bt)2\n\u2264 J(Wt)\u2212 1 t G(t) +K1A t\u22121\u2211 \u03c4=1 1 t\u03c4 \u03c1t\u2212\u03c4 b\u03c4 bt + K 2t2 (bt)2\n\u2264 J(Wt)\u2212 1 t G(t) +K1A t\u22121\u2211 \u03c4=1 \u03c1t\u2212\u03c4 ( (b\u03c4 )2 \u03c42 + (bt)2 t2 ) + K 2t2 (bt)2\n\u2264 J(Wt)\u2212 1 t G(t) +A3 t\u2211 \u03c4=1 \u03c1t\u2212\u03c4 (b\u03c4 )2 \u03c42 (16)\nwhere A3 = K1A 1\u2212\u03c1 + K 2\nLemma 3.0 There holds \u221e\u2211 t=1 1 t E[Gt] <\u221e (17)\nWe take expectations of both sides of the above inequality and use Equation 13 to bound E[(bt)2]. This yeilds:\nE[J(Wt+1)] \u2264 E[J(Wt)]\u2212 1 t E[Gt] +A3 t\u2211 \u03c4=1 \u03c1t\u2212\u03c4 1 \u03c42 (A1E[G \u03c4 +A2]). (18)\nLet t = 1, 2, \u00b7 \u00b7 \u00b7 , t\u0304 and add the resulting inequalities from Equation 18. Then,\nE[J(W t\u0304+1)] \u2264 J(W1)\u2212 t\u0304\u2211 t=1 1 t E[Gt] +A2A3 t\u0304\u2211 t=1 t\u2211 \u03c4=1 \u03c1t\u2212\u03c4 1 \u03c42 +A1A3 t\u0304\u2211 t=1 t\u2211 \u03c4=1 \u03c1t\u2212\u03c4 1 \u03c42 E[G\u03c4 ]\n= J(W1)\u2212 t\u0304\u2211 t=1 1 t E[Gt](1\u2212A1A3 1 t t\u0304\u2211 t=1 \u03c1t\u2212\u03c4 ) +A2A3 t\u0304\u2211 t=1 t\u2211 \u03c4=1 \u03c1t\u2212\u03c4 1 \u03c42\n\u2264 J(W1)\u2212 t\u0304\u2211 t=1 1 t E[Gt](1\u2212 A1A3 t(1\u2212 \u03c1) ) +A2A3 t\u0304\u2211 \u03c4=1\n1\n\u03c42(1\u2212 \u03c1)\nThe term A2A3 \u2211t\u0304 \u03c4=1 1 \u03c42(1\u2212\u03c1) is bounded since the infinite sum \u2211\u221e \u03c4=1 1 \u03c42(1\u2212\u03c1)\nis bounded. If \u2211\u221e t=1 1 tE[G\nt] = +\u221e, then the right hand side would equal \u2212\u221e. However, the left hand side is non-negative. This proves the lemma. [Q.E.D]\nLemma 4.0 The sequence {J(Wt} converges with probability 1.\nProof: Taking conditional expectation of inequality 16, conditioned on S(t) and using Lemma 1.0 we have,\nE[J(Wt+1)|S(t)] \u2264 J(Wt) +A3 t\u2211\n\u03c4=1\n\u03c1t\u2212\u03c4 1\n\u03c42 E[(b\u03c4 )2|S(t)] (19)\nLet Z(t) = \u2211t \u03c4=1 \u03c1 t\u2212\u03c4 1 \u03c42E[b\n\u03c4 2|S(t)]. Using Lemma 1.0 (b) and Lemma 3.0 we have:\n\u221e\u2211 t=1 E[Z(t)] = 1 1\u2212 \u03c1 \u2211 t=1 \u221e 1 t2 E[(b\u03c4 )2]\n\u2264 1 1\u2212 \u03c1 \u2211 t=1 \u221e 1 t2 (A1E[G t +A2) <\u221e. (20)\nUsing inequalities 19 and 20, a variant of the Supermartingale theorem applies and hence {J(Wt} converges with probability 1.[Q.E.D]"}, {"heading": "4 Empirical Evaluation", "text": ""}, {"heading": "4.1 Aims", "text": "Our objective is to investigate empirically the utility of the consensus-based algorithm we have described. We use Model(k, f) to denote the model returned the consensus-based algorithm in Section 3.2 using k nodes in a network, each of which can call on an ILP engine to construct at most f features. In this section, we compare the performance of:Model(N,F ) (N > 1) withModel(1, N\u00d7F ) The latter effectively represents the model constructed in a non-distributed manner, with all features present at a single centralised node. For simplicity, we will call the former the Distributed model and the latter the Centralised model.\nWe intend to examine if there is empirical support for the conjecture that the performance of the Distributed model is better than that of the Centralised model. We are assuming that the performance of a model-construction method is given by the pair (A, T ) where A is an unbiased estimate of the predictive accuracy of the classifier, and T is an unbiased estimate of the time taken to construct a model. In all cases, the time taken to construct a model also includes the time taken to identify the set of features by the ILP engine and the time to compute their values. When k > 1, the time will also include time for exchanging information. Comparison of pairs (A1, T1) and (A2, T2) will simply be lexicographic comparisons."}, {"heading": "4.2 Materials", "text": "Data Data for experiments are in two categories:\n1. Synthetic. We use the \u201cTrains\u201d problem posed by R. Michalski for controlled experiments. Datasets of 1000 examples are obtained for randomly drawn target concepts (see \u201cMethods\u201d below).6 For this we use S.H. Muggleton\u2019s random train generator7 that defines a random process for generating examples. We will use this data for controlled experiments to test principal conjecture about the comparative performances of Distributed and Centralised models. 2. Real. We report results from experiments conducted using some wellstudied real world biochemical toxicology problems (Mutagenesis [31]; Carcinogenesis [32]; and DssTox [?]). Our purpose in examining performance on the real-data is twofold. First, we intend to see if the use of linear models is too restrictive for real problems. Second, we would like to see if the results obtained on synthetic data are reflected on real-world problems. We note that for these problems predictive accuracy is the primary concern.\n6 We note here that we are not concerned with large numbers of examples here, since the main investigation is concerned with subsets of the feature-space, and not of the data instances. 7 http://www.doc.ic.ac.uk/\u223cshm/Software/GenerateTrains/\nAlgorithms and Machines The DFE algorithm has been implemented on a Peer-to-Peer simulator, PeerSim [39]. This software sets up the network by initializing the nodes and the protocols to be used by them. The newscast protocol, an epidemic content distribution and topology management protocol is used. Nodes can perform actions on local data as well as communicate with each other by selecting a neighbour to communicate with (using an underlying overlay network). In each communication step, they mutually update their approximations of the value to be calculated, based on their previous approximations. The emergent topology from newscast protocol has a very low diameter and is very close to a random graph ([25],[26]).\nThe ILP system used in all experiments is Aleph [54]. The latest version of this program (Aleph 6) is available from the second author. The Prolog compiler used is Yap (version 6.2.0). The programs are executed on a dual Quad-Core AMD Opteron 2384 processors equipped with 2.7 GHz processors, 32 GB RAM, and local storage of 4 \u00d7 146 GB 15K RPM Serial attached SCSI (SAS) hard disks."}, {"heading": "4.3 Method", "text": "For the synthetic data, we distinguish between \u201csimple\u201d targets (comprising disjuncts of 1-4 features) and \u201ccomplex\u201d targets (comprising disjuncts of 8\u2013 12 features).8 We call this dimension \u201cTarget\u201d. Our method for experiments is straightforward:\n1. For each value of Target\n(a) Randomly draw a target concept from Target (b) Classify each data instance as + or \u2212 using the target concept (c) Randomly generate a network with N nodes (d) For each node in the network:\ni. Set the number of iterations T and initialize the learning parameter \u03b7i for the node. It is assumed that all nodes agree on the initial choice of T and \u03b7i = \u03b7.\nii. Execute the algorithm described in Section ?? for T iterations and the ILP engine restricted to constructing F features\niii. Record the predictive accuracy A of the (local) model along with the time T taken to construct the model (this includes the feature construction time, and the feature computation time). The pair (A, T ) is the performance of the Distributed model for the concept. (e) Using a network with a single node: i. Execute the algorithm described in Section ?? for T iterations, learn-\ning parameter \u03b7, and the ILP engine restricted to constructing N\u00d7F features\n8 This distinction between simple and complex is based on results from cognitive psychology which suggest that people find it difficult to remember concepts with larger that 7 disjuncts.\nii. Record the predictive accuracy A\u2032 of the mode along with the time taken to construct the model T \u2032 (again, this includes the feature construction time and feature computation time). The pair (A\u2032, T \u2032) is the performance of the Centralised model for the concept.\n2. Compare the performances of the Distributed and the Centralised models for the concepts.\nThe following additional details are relevant:\n1. Two sources of sampling variation result with this method. First, variations are possible with the target drawn in Step 1a. Second, to ensure that both Distributed and Centralised approaches are constructing features from the same feature-space, we employ the facility within Aleph of drawing features from an explicitly defined feature space (this is specified using a large tabulation of features allowed by the language constraints). Although only \u201cgood\u201d features are retained (see below), sampling variations can nevertheless result for both Distributed and Centralised models from step of drawing features. In effect, we are performing a randomised search for good features within a pre-defined feature space. We report averages for 5 repetitions of draws for the target, and 5 repetitions of the randomised search for a given target. 2. A target is generated as follows. For simple targets, the number of features is chosen randomly from the range 1 to 4. For complex concepts, the number of features is randomly chosen from the range 8 to 12. Features are then randomly constructed using the ILP engine, and their disjunction constitute the target concept. 3. As noted previously, data instances for controlled experiments are drawn from the \u201cTrains\u201d problem. The data generator uses S.H. Muggletons random train generator. This implements a random process in which each data instance generated contains the complete description of a data object (nominally, a \u201ctrain\u201d). 4. An initial set of parameters needs to be set for the ILP engine to describe \u201cgood\u201d features. These include C, the maximum number of literals in any acceptable clause constructed by the ILP system; Nodes, the maximum number of nodes explored in any single search conducted by the ILP system; Minacc, the minimum accuracy required of any acceptable clause; and Minpos, the minimum number of positive examples to be entailed by any acceptable clause. C and Nodes are directly concerned with the search space explored by the ILP system. Minacc and Minpos are concerned with the quality of results returned (they are equivalent to \u201cprecision\u201d and \u201csupport\u201d used in the data mining literature). We set C = 4, Nodes=5000, Minacc=0.75 and Minpos=2 for our experiments here. There is no principled reason for these choices, other than that they have been shown to work well in the literature. 5. The parameters for the PeerSim simulator include the size of the network, degree distribution of the nodes and the protocol to be executed at each node. We report here on experiments with a distributed network withN = 10 nodes. Each of these nodes can construct up to F = 500 features (per class)\nand the centralised approach can construct up to N \u00d7 F = 5000 features (per class). 6. The experiments here use the Hinge loss function. The results reported are for values of T that the stochastic gradient descent method starts to diverge. 7. The learning rate \u03b7i remains a difficult parameter in any SGD-based method. There is no clear picture on how this should be set. We have adopted the following domain-driven approach. In general, lower values of the learning rate imply a longer search. We use three different learning rates corresponding to domains requiring high, moderate and low amounts of search (corresponding to complex, moderate or simple target concepts). The corresponding learning rates are 0.01, 0.1 and 1. We reiterate that there is no prescribed method for deciding these values, and better results may be possible with other values. The maximum number of iterations T is set to a high value (1000). The algorithm may terminate earlier, if there are no significant changes to its weight vector. 8. Since the tasks considered here are binary classification tasks, the performance of the ILP system in all experiments will be taken to be the classification accuracy of the model produced by the system. By this we mean the usual measure computed from a 2 \u00d7 2 cross-tabulation of actual and predicted classes of instances. We would like the final performance measure to be as unbiased as possible by the experimental estimates obtained during optimization, and estimates are reported on a holdout set. 9. With results from multiple repetitions (as we have here), it is possible to perform a Wilcoxon signed-rank test for both differences and accuracy and differences in time. This allows a quantitative assessment of difference in performance between the Distributed and the Centralised models. However, results with 5 repetitions are unreliable, and we prefer to report on a qualitative assessment, in terms of the average of accuracy and time taken.\nA data instance in each of the real datasets is a molecule, and contains the complete description of the molecule. This includes: (a) bulk properties, like molecular weight, logP values etc.; and (b) the atomic structure of the molecule, along with the bonds between the atoms. For these datasets, clearly there are no concepts to be drawn, and sampling variation results solely from the featureconstruction process. We therefore only report on experimental results obtained from repeating the randomised search for features. Again, estimates of predictive accuracy are obtained from a holdout set. For mutagenesis and carcinogenesis, each of the 10 computational nodes in the distributed network construbcts up to 500 features, and the centralised approach constructs up to 5000 features (per class). For DssTox, we found there were fewer high precision features than the other two datasets. So the nodes in the distributed network constructs up to 50 features and the centralised node up to 500 features (per class)"}, {"heading": "4.4 Results", "text": "We present first the main results from the from the experiments on synthetic data (shown in Fig.3). The primary observations in these experiments are as follows:\n(1) On average, as concepts vary, the distributed algorithm appears to achieve higher accuracies than the centralised approach, although the differences may not be significant for a randomly chosen concept; (2) On average, as concepts vary, the time taken for model construction by the distributed approach can be substantially lower9; and (3) The variation in both accuracies and time with the distributed approach due to both changes in the concept, or due to repetitions of feature-construction appear to be less than the centralised approach.\nTaken together, these results suggest that good, stable models can be obtained from the distributed approach fairly quickly, and that the approach might present an efficient alternative to a centralised approach in which all features are constructed by a single computational unit.\nWhat can we expect from the consensus-based learner on the real datasets? Results are in Fig.4), and we observe the following: (1) There is a significant difference in accuracies between the distributed and centralised models on two\n9 Although not apparent in the tabulation, the time is dominated by the time for constructing features. As a result, we note that the ratio of times for the centralised and distributed approaches need not be (linearly) proportional to the number of nodes in the network. For example, the search for a large subset of good features conducted by the a centralised approach may take much longer than the search for several small subsets conducted by the distributed approach.\nof the datasets (Canc330 and DssTox). On balance, we cannot conclude from this that there is either one of the models is better; (2) As with the synthetic data, the time for the distributed models is substantially lower. As before, the time is dominated by the feature-construction effort. For the real data sets, it appears that it is substantially easier to get smaller subsets of good features than larger ones (as observed from the substantial difference in the times between the distributed and centralised models); and (3) Comparisons against the baseline suggest that the use of linear models is not overly restrictive, since the models obtained are not substantially worse (predictively speaking) than the ones obtained by ILP in the past.\nAgain, taken together, these results provide support to the trends observed with the controlled experiments and suggest that the distributed approach would continue to perform at least as well as the centralised approach on real data.\nWe turn now to some issues that have been brought out by the experiments:\nThe learning rate \u03bb. As will all methods based on stochastic gradient descent, the central parameter remains the learning rate \u03bb. Many strategies have been suggested in literature to automatically adjust the learning rates. (see for example [8], [10], [17], [57]). In general, the learning rate on an iteration \u03b7i of the algorithm here is of the form \u03b7i = B T\u2212\u03b1 ; B = e\n\u2212\u03bbT ; 0 < \u03b1 \u2264 1. For experiments reported above, we have used fixed values of \u03bb based on our assessment of the search required (see the additional details in the Methods section). The choice of \u03bb is dataset dependent and hence this parameter needs to assigned in some domain-dependent manner (as we have done here). Convergence Accuracy. In experiments here (both with synthetic and real data), we have observed that the predictive accuracy of the model from the distributed setting is comparable to the predictive accuracy from the non-distributed setting. Unlike gains in time which can be expected from a distributed setting, it is not evident beforehand what can be expected on the accuracy front. This is because the models constructed in the two settings sample different sets of features. The results here suggest a conjecture that\nthe consensus-based approach will always converge to model that is within some small error bound of the model from a centralised approach with the same number of features. We have some reason to believe that this conjecture may hold in some circumstances, based on the use of Sanov\u2019s theorem [50] and related techniques."}, {"heading": "5 Conclusion", "text": "A particularly effective form of Inductive Logic Programming has been its use to construct new features that can be used to augment existing descriptors of a dataset. Experimental studies reported in the literature have repeatedly shown that the relational features constructed by an ILP engine can substantially assist in the analysis of data. Models constructed in this way have looked at both classification and regression, and improvements have resulted in each case. Practical difficulties have remained to be addressed though. The rich language of firstorder logic used by ILP systems engenders a very large space of possible new features. The resulting computational difficulties of finding interesting features is not easily overcome by the usual ILP-based methods of language bias or constraints. In this paper, we have introduced what appears to be the first attempt at the use of a distributed algorithm for feature selection in ILP which also has some provable guarantees of convergence. The experimental results we have presented suggest that the algorithm is able to identify good models, using significantly lesser computational resources than that needed by a non-distributed approach.\nThere are a number of ways in which the work here could be extended further. Conceptually, we have outlined a conjecture in the previous section that we believe is worth investigating further. If it is proven to hold, then this would be a first-of-its-kind result for consensus-based methods. In implementation terms, we are able to extend the approach we have proposed to other kinds of models that use convex loss functions, and to consider a consensus-based version of the SNoW architecture. This latter will give us the ability to partition very large datasets, and to deal with very large feature-spaces at once. is also not required within the approach that all computational nodes draw from the same feature space (this was a constraint imposed here to evaluate the centralised and distributed models in a controlled manner). It may be both interesting and desirable for nodes to sample from different feature-spaces, or with different support and precision constraints. Finally, We need to investigate whether certain kinds of network topologies are better than others (currently, we impose no control, and use a randomly generated network). Experimentally, we recognise that results on more real-world datasets are always desirable: we hope the results here will provide the impetus to explore distributed feature construction by ILP on many more real datasets."}, {"heading": "Acknowledgements", "text": "H.D. is also an adjunct assistant professor at the Department of Computer Science at IIIT, Delhi and an Affiliated Member of the Institute of Data Sciences, Columbia University, NY. A.S. also holds visiting positions at the School of CSE, University of New South Wales, Sydney; and at the Dept. of Computer Science, Oxford University, Oxford."}], "references": [{"title": "A reliable effective terascale linear learning system", "author": ["A. Agarwal", "O. Chapelle", "M. Dud\u0301\u0131k", "J. Langford"], "venue": "Journal of Machine Learning Research 15, 1111\u20131133", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2014}, {"title": "Mining sequential patterns", "author": ["R. Agrawal", "R. Srikant"], "venue": "ICDE", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1995}, {"title": "Generalization of pattern-growth methods for sequential pattern mining with gap constraints", "author": ["C. Antunes", "A.L. Oliveira"], "venue": "MLDM", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2003}, {"title": "bitspade: A lattice-based sequential pattern mining algorithm using bitmap representation", "author": ["S. Aseervatham", "A. Osmani", "E. Viennet"], "venue": "ICDM", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2006}, {"title": "Sequential pattern mining using a bitmap representation", "author": ["J. Ayres", "J. Gehrke", "T. Yiu", "J. Flannick"], "venue": "KDD", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2002}, {"title": "Order-optimal consensus through randomized path averaging", "author": ["F. Benezit", "A. Dimakis", "P. Thiran", "M. Vetterli"], "venue": "Information Theory, IEEE Transactions on 56(10), 5150\u20135167", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2010}, {"title": "Parallel and Distributed Computation: Numerical Methods", "author": ["D.P. Bertsekas", "J.N. Tsitsiklis"], "venue": "Athena Scientific, Belmont, MA.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1997}, {"title": "Large-scale machine learning with stochastic gradient descent", "author": ["L. Bottou"], "venue": "Y. Lechevallier, G. Saporta (eds.) Proceedings of the 19th International Conference on Computational Statistics (COMPSTAT\u20192010), pp. 177\u2013187. Springer, Paris, France", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2010}, {"title": "The tradeoffs of large scale learning", "author": ["L. Bottou", "O. Bousquet"], "venue": "Optimization for Machine Learning, pp. 351\u2013368. MIT Press", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2011}, {"title": "The tradeoffs of large scale learning", "author": ["L. Bottou", "O. Bousquet"], "venue": "Optimization for Machine Learning, pp. 351\u2013368. MIT Press", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2011}, {"title": "Randomized gossip algorithms", "author": ["S. Boyd", "A. Ghosh", "B. Prabhakar", "D. Shah"], "venue": "IEEE/ACM Trans. Netw. 14(SI), 2508\u20132530", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2006}, {"title": "Distributed optimization and statistical learning via the alternating direction method of multipliers", "author": ["S. Boyd", "N. Parikh", "E. Chu", "B. Peleato", "J. Eckstein"], "venue": "Found. Trends Mach. Learn. 3(1), 1\u2013122", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2011}, {"title": "The snow learning architecture", "author": ["A. Carlson", "C. Cumby", "J. Rosen", "D. Roth"], "venue": "Tech. Rep. UIUCDCS-R-99-2101, UIUC Computer Science Department", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1999}, {"title": "Identification of class specific discourse patterns", "author": ["A. Chalamalla", "S. Negi", "L.V. Subramaniam", "G. Ramakrishnan"], "venue": "CIKM, pp. 1193\u20131202", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2008}, {"title": "Unsupervised distributed feature selection for multi-view object recognition", "author": ["C. Christoudias", "R. Urtasun", "T. Darrell"], "venue": "Tech. Rep. MIT-CSAIL-TR-2008-009, MIT, CSAIL", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2008}, {"title": "Dynamic load balancing for distributed memory multiprocessors", "author": ["G. Cybenko"], "venue": "Proceedings of the Journal of Parallel and Distributed Computing 7, pp. 279\u2013301", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1989}, {"title": "Note on learning rate schedules for stochastic optimization", "author": ["C. Darken", "J. Moody"], "venue": "Proceedings of the 1990 Conference on Advances in Neural Information Processing Systems 3, NIPS-3, pp. 832\u2013838", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1990}, {"title": "A local asynchronous distributed privacy preserving feature selection algorithm for large peer-to-peer networks", "author": ["K. Das", "K. Bhaduri", "H. Kargupta"], "venue": "Knowl. Inf. Syst. 24(3), 341\u2013367", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2010}, {"title": "Optimal distributed online prediction using mini-batches", "author": ["O. Dekel", "R. Gilad-Bachrach", "O. Shamir", "L. Xiao"], "venue": "J. Mach. Learn. Res. 13(1), 165\u2013202", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2012}, {"title": "Geographic gossip: efficient aggregation for sensor networks", "author": ["A. Dimakis", "A. Sarwate", "M. Wainwright"], "venue": "Information Processing in Sensor Networks, 2006. IPSN 2006. The Fifth International Conference on, pp. 69\u201376", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2006}, {"title": "Dual Averaging for Distributed Optimization: Convergence Analysis and Network Scaling", "author": ["J. Duchi", "A. Agarwal", "M. Wainwright"], "venue": "IEEE Transactions on Automatic Control 57(3), 592\u2013606", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2012}, {"title": "Spirit: Sequential pattern mining with regular expression constraints", "author": ["M.N. Garofalakis", "R. Rastogi", "K. Shim"], "venue": "VLDB", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1999}, {"title": "An l1 regularization framework for optimal rule combination", "author": ["Y. Han", "J. Wang"], "venue": "ECML/PKDD", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2009}, {"title": "Efficient rule ensemble learning using hierarchical kernels", "author": ["P. Jawanpuria", "J.S. Nath", "G. Ramakrishnan"], "venue": "ICML, pp. 161\u2013168", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2011}, {"title": "The peer sampling service: Experimental evaluation of unstructured gossip-based implementations", "author": ["M. Jelasity", "R. Guerraoui", "A.M. Kermarrec", "M. Steen"], "venue": "Middleware 2004, Lecture Notes in Computer Science, vol. 3231, pp. 79\u201398", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2004}, {"title": "Gossip-based aggregation in large dynamic networks", "author": ["M. Jelasity", "A. Montresor", "\u00d6. Babaoglu"], "venue": "ACM Trans. Comput. Syst. 23(3), 219\u2013252", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2005}, {"title": "Mining minimal distinguishing subsequence patterns with gap constraints", "author": ["X. Ji", "J. Bailey", "G. Dong"], "venue": "Knowledge and Information Systems", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2006}, {"title": "Irrelevant features and the subset selection problem", "author": ["G.H. John", "R. Kohavi", "K. Pfleger"], "venue": "PROCEEDINGS OF THE ELEVENTH INTERNATIONAL Conference on Machine Learning, pp. 121\u2013129. Morgan Kaufmann", "citeRegEx": "28", "shortCiteRegEx": null, "year": 1994}, {"title": "Feature construction using theoryguided sampling and randomised search", "author": ["S. Joshi", "G. Ramakrishnan", "A. Srinivasan"], "venue": "ILP, pp. 140\u2013157", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2008}, {"title": "Gossip-based computation of aggregate information", "author": ["D. Kempe", "A. Dobra", "J. Gehrke"], "venue": "Foundations of Computer Science, 2003. Proceedings. 44th Annual IEEE Symposium on, pp. 482\u2013491", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2003}, {"title": "Structure-activity relationships derived by machine learning: the use of atoms and their bond connectivities to predict mutagenicity by inductive logic programming", "author": ["R.D. King", "S.H. Muggleton", "A. Srinivasan", "M.J. Sternberg"], "venue": "Proceedings of the National Academy of Sciences of the United States of America 93(1), 438\u201342", "citeRegEx": "31", "shortCiteRegEx": null, "year": 1996}, {"title": "Prediction of rodent carcinogenicity bioassays from molecular structure using inductive logic programming", "author": ["R.D. King", "A. Srinivasan"], "venue": "Environmental Health Perspectives 104, pp. 1031\u20131040", "citeRegEx": "32", "shortCiteRegEx": null, "year": 1996}, {"title": "An application of boosting to graph classification", "author": ["T. Kudo", "E. Maeda", "Y. Matsumoto"], "venue": "NIPS", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2004}, {"title": "Slow learners are fast", "author": ["J. Langford", "A. Smola", "M. Zinkevich"], "venue": "Advances in Neural Information Processing Systems 22, pp. 2331\u20132339", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2009}, {"title": "Inductive inference of vl decision rules", "author": ["J. Larson", "R.S. Michalski"], "venue": "SIGART Bull. (63), 38\u201344", "citeRegEx": "35", "shortCiteRegEx": null, "year": 1977}, {"title": "Feature Selection for Knowledge Discovery and Data Mining", "author": ["H. Liu", "H. Motoda"], "venue": "Kluwer Academic Publishers, Norwell, MA, USA", "citeRegEx": "36", "shortCiteRegEx": null, "year": 1998}, {"title": "Parallel gradient distribution in unconstrained optimization", "author": ["L. Mangasarian"], "venue": "SIAM Journal on Control and Optimization 33(6), 1916\u20131925", "citeRegEx": "37", "shortCiteRegEx": null, "year": 1995}, {"title": "Distributed training strategies for the structured perceptron", "author": ["R. McDonald", "K. Hall", "G. Mann"], "venue": "Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the Association for Computational Linguistics, HLT \u201910, pp. 456\u2013464. Association for Computational Linguistics, Stroudsburg, PA, USA", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2010}, {"title": "PeerSim: A scalable P2P simulator", "author": ["A. Montresor", "M. Jelasity"], "venue": "Proc. of the 9th Int. Conference on Peer-to-Peer (P2P\u201909), pp. 99\u2013100. Seattle, WA", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2009}, {"title": "Towards efficient named-entity rule induction for customizability", "author": ["A. Nagesh", "G. Ramakrishnan", "L. Chiticariu", "R. Krishnamurthy", "A. Dharkar", "P. Bhattacharyya"], "venue": "EMNLP-CoNLL, pp. 128\u2013138", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2012}, {"title": "Rule ensemble learning using hierarchical kernels in structured output spaces", "author": ["N. Nair", "A. Saha", "G. Ramakrishnan", "S. Krishnaswamy"], "venue": "AAAI", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2012}, {"title": "Hogwild!: A lock-free approach to parallelizing stochastic gradient descent", "author": ["F. Niu", "B. Recht", "C. R\u00e9", "S.J. Wright"], "venue": "Advances in Neural Information Processing Systems 24, 693\u2013701", "citeRegEx": "42", "shortCiteRegEx": null, "year": 2011}, {"title": "Discriminative subsequence mining for action classification", "author": ["S. Nowozin", "G. Bakr", "K. Tsuda"], "venue": "CVPR", "citeRegEx": "43", "shortCiteRegEx": null, "year": 2007}, {"title": "Mining sequential patterns by pattern-growth: The prefixspan approach", "author": ["J. Pei"], "venue": "Journal of Machine Learning Research 16-11", "citeRegEx": "44", "shortCiteRegEx": null, "year": 2004}, {"title": "Constraint-based sequential pattern mining: the pattern-growth methods", "author": ["J. Pei", "J. Han", "W. Wang"], "venue": "Journal of Intelligent Information Systems", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2005}, {"title": "From sequential pattern mining to structured pattern mining: A pattern-growth approach", "author": ["J. Pei", "J. Han", "X.F. Yan"], "venue": "Journal of Computer Science and Technology 9(3), 257\u2013279", "citeRegEx": "46", "shortCiteRegEx": null, "year": 2004}, {"title": "Using ilp to construct features for information extraction from semi-structured text", "author": ["G. Ramakrishnan", "S. Joshi", "S. Balakrishnan", "A. Srinivasan"], "venue": "ILP, pp. 211\u2013224", "citeRegEx": "47", "shortCiteRegEx": null, "year": 2007}, {"title": "Learning to resolve natural language ambiguities: A unified approach", "author": ["D. Roth"], "venue": "Proceedings of the Fifteenth National/Tenth Conference on Artificial Intelligence/Innovative Applications of Artificial Intelligence, AAAI \u201998/IAAI \u201998, pp. 806\u2013813", "citeRegEx": "48", "shortCiteRegEx": null, "year": 1998}, {"title": "What kinds of relational features are useful for statistical learning", "author": ["A. Saha", "A. Srinivasan", "G. Ramakrishnan"], "venue": "ILP", "citeRegEx": "49", "shortCiteRegEx": "49", "year": 2012}, {"title": "On the probability of large deviations of random variables", "author": ["I.N. Sanov"], "venue": "Mat. Sbornik, vol. 42, pp. 11\u201344", "citeRegEx": "50", "shortCiteRegEx": null, "year": 1957}, {"title": "Gossip algorithms", "author": ["D. Shah"], "venue": "Found. Trends Netw. 3(1), 1\u2013125", "citeRegEx": "51", "shortCiteRegEx": null, "year": 2009}, {"title": "An investigation into feature construction to assist word sense disambiguation", "author": ["L. Specia", "A. Srinivasan", "S. Joshi", "G. Ramakrishnan", "M. Graas Volpe Nunes"], "venue": "Machine Learning 76(1), 109\u2013136", "citeRegEx": "52", "shortCiteRegEx": null, "year": 2009}, {"title": "Word sense disambiguation using inductive logic programming", "author": ["L. Specia", "A. Srinivasan", "G. Ramakrishnan", "M. das Gra\u00e7as Volpe Nunes"], "venue": "ILP, pp. 409\u2013423", "citeRegEx": "53", "shortCiteRegEx": null, "year": 2006}, {"title": "The aleph manual", "author": ["A. Srinivasan"], "venue": null, "citeRegEx": "54", "shortCiteRegEx": "54", "year": 1999}, {"title": "An empirical study of on-line models for relational data streams", "author": ["A. Srinivasan", "M. Bain"], "venue": "Tech. Rep. 201401, School of Computer Science and Engineering, UNSW", "citeRegEx": "55", "shortCiteRegEx": null, "year": 2014}, {"title": "Parameter screening and optimisation for ilp using designed experiments", "author": ["A. Srinivasan", "G. Ramakrishnan"], "venue": "Journal of Machine Learning Research 12, 627\u2013662", "citeRegEx": "56", "shortCiteRegEx": null, "year": 2011}, {"title": "An introduction to measure theory", "author": ["T. Tao"], "venue": null, "citeRegEx": "58", "shortCiteRegEx": "58", "year": 2011}, {"title": "Problems in decentralized decision making and computation", "author": ["J.N. Tsitsiklis"], "venue": "Ph.D. thesis, Department of EECS, MIT", "citeRegEx": "59", "shortCiteRegEx": null, "year": 1984}, {"title": "Distributed asynchronous deterministic and stochastic gradient optimization algorithms", "author": ["J.N. Tsitsiklis", "D.P. Bertsekas", "M. Athans"], "venue": "IEEE Transactions on Automatic Control, vol. AC-31", "citeRegEx": "60", "shortCiteRegEx": null, "year": 1986}, {"title": "Matrix Iterative Analysis", "author": ["R. Varga"], "venue": "Prentice Hall, Englewood Cliffs, NJ", "citeRegEx": "61", "shortCiteRegEx": null, "year": 1962}, {"title": "Parallelized stochastic gradient descent", "author": ["M. Zinkevich", "M. Weimer", "A.J. Smola", "L. Li"], "venue": "NIPS, vol. 4, p. 4", "citeRegEx": "62", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 28, "context": "Nevertheless, there is now a growing body of research that suggests that augmenting any existing features with ILPconstructed relational ones can substantially improve the predictive power of a statistical model (see, for example: [29, 49, 52, 47, 53]).", "startOffset": 231, "endOffset": 251}, {"referenceID": 48, "context": "Nevertheless, there is now a growing body of research that suggests that augmenting any existing features with ILPconstructed relational ones can substantially improve the predictive power of a statistical model (see, for example: [29, 49, 52, 47, 53]).", "startOffset": 231, "endOffset": 251}, {"referenceID": 51, "context": "Nevertheless, there is now a growing body of research that suggests that augmenting any existing features with ILPconstructed relational ones can substantially improve the predictive power of a statistical model (see, for example: [29, 49, 52, 47, 53]).", "startOffset": 231, "endOffset": 251}, {"referenceID": 46, "context": "Nevertheless, there is now a growing body of research that suggests that augmenting any existing features with ILPconstructed relational ones can substantially improve the predictive power of a statistical model (see, for example: [29, 49, 52, 47, 53]).", "startOffset": 231, "endOffset": 251}, {"referenceID": 52, "context": "Nevertheless, there is now a growing body of research that suggests that augmenting any existing features with ILPconstructed relational ones can substantially improve the predictive power of a statistical model (see, for example: [29, 49, 52, 47, 53]).", "startOffset": 231, "endOffset": 251}, {"referenceID": 34, "context": "An illustrative example of the consensus-based approach using Michalski\u2019s \u201cTrains\u201d problem [35].", "startOffset": 91, "endOffset": 95}, {"referenceID": 27, "context": "Techniques for selecting from a (large) but finite set of features of known size d has been well-studied within the machine learning, usually under the umbrellaterms of filter-based or wrapper-based methods (see for example, [28, 36]).", "startOffset": 225, "endOffset": 233}, {"referenceID": 35, "context": "Techniques for selecting from a (large) but finite set of features of known size d has been well-studied within the machine learning, usually under the umbrellaterms of filter-based or wrapper-based methods (see for example, [28, 36]).", "startOffset": 225, "endOffset": 233}, {"referenceID": 58, "context": "Early work in decentralized optimization was marked by interest in consensus-based learning, distributed optimization and minimization with the seminal work of Bertsekas, Tsitsiklis and colleagues ([60, 59, 7]).", "startOffset": 198, "endOffset": 209}, {"referenceID": 57, "context": "Early work in decentralized optimization was marked by interest in consensus-based learning, distributed optimization and minimization with the seminal work of Bertsekas, Tsitsiklis and colleagues ([60, 59, 7]).", "startOffset": 198, "endOffset": 209}, {"referenceID": 6, "context": "Early work in decentralized optimization was marked by interest in consensus-based learning, distributed optimization and minimization with the seminal work of Bertsekas, Tsitsiklis and colleagues ([60, 59, 7]).", "startOffset": 198, "endOffset": 209}, {"referenceID": 10, "context": "More recently, researchers have shown that convergence properties of these decentralized algorithms can be related to the network topology by using spectral properties of random walks or path averaging arguments on the underlying graph structure ([11, 51, 20, 6]).", "startOffset": 247, "endOffset": 262}, {"referenceID": 50, "context": "More recently, researchers have shown that convergence properties of these decentralized algorithms can be related to the network topology by using spectral properties of random walks or path averaging arguments on the underlying graph structure ([11, 51, 20, 6]).", "startOffset": 247, "endOffset": 262}, {"referenceID": 19, "context": "More recently, researchers have shown that convergence properties of these decentralized algorithms can be related to the network topology by using spectral properties of random walks or path averaging arguments on the underlying graph structure ([11, 51, 20, 6]).", "startOffset": 247, "endOffset": 262}, {"referenceID": 5, "context": "More recently, researchers have shown that convergence properties of these decentralized algorithms can be related to the network topology by using spectral properties of random walks or path averaging arguments on the underlying graph structure ([11, 51, 20, 6]).", "startOffset": 247, "endOffset": 262}, {"referenceID": 20, "context": "Learning feature subsets in distributed environments using decentralized optimization has become an active area of research ([21, 1, 15]) in recent years.", "startOffset": 125, "endOffset": 136}, {"referenceID": 0, "context": "Learning feature subsets in distributed environments using decentralized optimization has become an active area of research ([21, 1, 15]) in recent years.", "startOffset": 125, "endOffset": 136}, {"referenceID": 14, "context": "Learning feature subsets in distributed environments using decentralized optimization has become an active area of research ([21, 1, 15]) in recent years.", "startOffset": 125, "endOffset": 136}, {"referenceID": 0, "context": "[1] present a system and a set of techniques for learning linear predictors with convex losses on terabyte sized datasets.", "startOffset": 0, "endOffset": 3}, {"referenceID": 20, "context": "[21] present a dual averaging sub-gradient method which maintains and forms weighted averages of sub-gradients in the network.", "startOffset": 0, "endOffset": 4}, {"referenceID": 36, "context": "Similar techniques for learning linear predictors have been presented elsewhere ([37, 38, 62], [42, 12]).", "startOffset": 81, "endOffset": 93}, {"referenceID": 37, "context": "Similar techniques for learning linear predictors have been presented elsewhere ([37, 38, 62], [42, 12]).", "startOffset": 81, "endOffset": 93}, {"referenceID": 60, "context": "Similar techniques for learning linear predictors have been presented elsewhere ([37, 38, 62], [42, 12]).", "startOffset": 81, "endOffset": 93}, {"referenceID": 41, "context": "Similar techniques for learning linear predictors have been presented elsewhere ([37, 38, 62], [42, 12]).", "startOffset": 95, "endOffset": 103}, {"referenceID": 11, "context": "Similar techniques for learning linear predictors have been presented elsewhere ([37, 38, 62], [42, 12]).", "startOffset": 95, "endOffset": 103}, {"referenceID": 18, "context": "In addition, this is a batch algorithm and hence quite different from distributed online learning counterparts ([19, 34, 9]).", "startOffset": 112, "endOffset": 123}, {"referenceID": 33, "context": "In addition, this is a batch algorithm and hence quite different from distributed online learning counterparts ([19, 34, 9]).", "startOffset": 112, "endOffset": 123}, {"referenceID": 8, "context": "In addition, this is a batch algorithm and hence quite different from distributed online learning counterparts ([19, 34, 9]).", "startOffset": 112, "endOffset": 123}, {"referenceID": 17, "context": "[18] show that three popular feature selection criteria \u2013 misclassification gain, gini index and entropy can be learnt in a large peer-to-peer network.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem.", "startOffset": 10, "endOffset": 22}, {"referenceID": 42, "context": "Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem.", "startOffset": 10, "endOffset": 22}, {"referenceID": 32, "context": "Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem.", "startOffset": 10, "endOffset": 22}, {"referenceID": 28, "context": "Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem.", "startOffset": 40, "endOffset": 68}, {"referenceID": 48, "context": "Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem.", "startOffset": 40, "endOffset": 68}, {"referenceID": 39, "context": "Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem.", "startOffset": 40, "endOffset": 68}, {"referenceID": 13, "context": "Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem.", "startOffset": 40, "endOffset": 68}, {"referenceID": 51, "context": "Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem.", "startOffset": 40, "endOffset": 68}, {"referenceID": 46, "context": "Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem.", "startOffset": 40, "endOffset": 68}, {"referenceID": 52, "context": "Optimally [23, 43, 33] or heuristically [29, 49, 40, 14, 52, 47, 53] solve a discrete optimization problem.", "startOffset": 40, "endOffset": 68}, {"referenceID": 23, "context": "Optimally [24, 41] solve a convex optimization problem with sparsity inducing regularizers; 3.", "startOffset": 10, "endOffset": 18}, {"referenceID": 40, "context": "Optimally [24, 41] solve a convex optimization problem with sparsity inducing regularizers; 3.", "startOffset": 10, "endOffset": 18}, {"referenceID": 43, "context": "Compute all relational features that satisfy some quality criterion by systematically and efficiently exploring a prescribed search space [44, 27, 4, 3, 45, 2, 46, 5, 22].", "startOffset": 138, "endOffset": 170}, {"referenceID": 26, "context": "Compute all relational features that satisfy some quality criterion by systematically and efficiently exploring a prescribed search space [44, 27, 4, 3, 45, 2, 46, 5, 22].", "startOffset": 138, "endOffset": 170}, {"referenceID": 3, "context": "Compute all relational features that satisfy some quality criterion by systematically and efficiently exploring a prescribed search space [44, 27, 4, 3, 45, 2, 46, 5, 22].", "startOffset": 138, "endOffset": 170}, {"referenceID": 2, "context": "Compute all relational features that satisfy some quality criterion by systematically and efficiently exploring a prescribed search space [44, 27, 4, 3, 45, 2, 46, 5, 22].", "startOffset": 138, "endOffset": 170}, {"referenceID": 44, "context": "Compute all relational features that satisfy some quality criterion by systematically and efficiently exploring a prescribed search space [44, 27, 4, 3, 45, 2, 46, 5, 22].", "startOffset": 138, "endOffset": 170}, {"referenceID": 1, "context": "Compute all relational features that satisfy some quality criterion by systematically and efficiently exploring a prescribed search space [44, 27, 4, 3, 45, 2, 46, 5, 22].", "startOffset": 138, "endOffset": 170}, {"referenceID": 45, "context": "Compute all relational features that satisfy some quality criterion by systematically and efficiently exploring a prescribed search space [44, 27, 4, 3, 45, 2, 46, 5, 22].", "startOffset": 138, "endOffset": 170}, {"referenceID": 4, "context": "Compute all relational features that satisfy some quality criterion by systematically and efficiently exploring a prescribed search space [44, 27, 4, 3, 45, 2, 46, 5, 22].", "startOffset": 138, "endOffset": 170}, {"referenceID": 21, "context": "Compute all relational features that satisfy some quality criterion by systematically and efficiently exploring a prescribed search space [44, 27, 4, 3, 45, 2, 46, 5, 22].", "startOffset": 138, "endOffset": 170}, {"referenceID": 28, "context": "The latter is not the case for a technique like the one proposed in [29].", "startOffset": 68, "endOffset": 72}, {"referenceID": 47, "context": "Perhaps of most interest to the work here is the Sparse Network Of Winnow classifers described in [48, 13].", "startOffset": 98, "endOffset": 106}, {"referenceID": 12, "context": "Perhaps of most interest to the work here is the Sparse Network Of Winnow classifers described in [48, 13].", "startOffset": 98, "endOffset": 106}, {"referenceID": 54, "context": "Finally, from the ILP-viewpoint, [55] shows how it is possible to construct Winnow-based models in an infinite-attribute setting using an ILP engine with a stream-based model of the data.", "startOffset": 33, "endOffset": 37}, {"referenceID": 12, "context": "Taken together, this suggests that a combination of the techniques we propose, and those in [13] can be used to develop linear models that can handle both horizontal partitioning of the data and vertical partitioning of the feature-space.", "startOffset": 92, "endOffset": 96}, {"referenceID": 29, "context": "The choice of \u03b1il may be deterministic or randomized and may or may not depend on the time t [30].", "startOffset": 93, "endOffset": 97}, {"referenceID": 59, "context": "Theorem 1 Perron-Frobenius [61] Let A be a positive, irreducible matrix such that the rows sum to 1.", "startOffset": 27, "endOffset": 31}, {"referenceID": 59, "context": "Since the eigenvalues ofA are bounded by 1, it can be shown that J t i converges to the average function estimate J i if and only if -1 is not an eigen value [61].", "startOffset": 158, "endOffset": 162}, {"referenceID": 59, "context": "If \u03b3 = 1, then system fails to converge [61], [16].", "startOffset": 40, "endOffset": 44}, {"referenceID": 15, "context": "If \u03b3 = 1, then system fails to converge [61], [16].", "startOffset": 46, "endOffset": 50}, {"referenceID": 58, "context": "A non-stationary Markov chain is weakly ergodic if the dependence on the state distribution vanishes as time tends to infinity [60].", "startOffset": 127, "endOffset": 131}, {"referenceID": 6, "context": "Assumption 5: Descent Lemma [7] at each site: (a) For every i and t we have,", "startOffset": 28, "endOffset": 31}, {"referenceID": 6, "context": "Assumption 6: Stochastic Descent Lemma [7] at each site: There exist positive constants K6, K7 and K8 such that: (a) \u2207J(W t i )E[si|S(t)] \u2264 \u2212K6 \u2016 \u2207J(W t i ) \u2016,\u2200t \u2208 T .", "startOffset": 39, "endOffset": 42}, {"referenceID": 6, "context": "Assumption 7: Partial Asynchronism [7]) There exists a positive integer B such that: (a) For every i and for every t \u2265 0 at least one of the elements of the set {t, t+ 1, \u00b7 \u00b7 \u00b7 , t+B \u2212 1} belongs to T .", "startOffset": 35, "endOffset": 38}, {"referenceID": 56, "context": "A formal definition (using measure theory [58]) is given below: Let (\u03c3,F , P ) be a probability space.", "startOffset": 42, "endOffset": 46}, {"referenceID": 6, "context": "Supermartingale Convergence Theorem [7]: Let {Yi} be a sequence of random variables and let {Fi} be a sequence of finite sets of random variables such that Fi \u2282 Fi+1 for each i.", "startOffset": 36, "endOffset": 39}, {"referenceID": 30, "context": "We report results from experiments conducted using some wellstudied real world biochemical toxicology problems (Mutagenesis [31]; Carcinogenesis [32]; and DssTox [?]).", "startOffset": 124, "endOffset": 128}, {"referenceID": 31, "context": "We report results from experiments conducted using some wellstudied real world biochemical toxicology problems (Mutagenesis [31]; Carcinogenesis [32]; and DssTox [?]).", "startOffset": 145, "endOffset": 149}, {"referenceID": 38, "context": "Algorithms and Machines The DFE algorithm has been implemented on a Peer-to-Peer simulator, PeerSim [39].", "startOffset": 100, "endOffset": 104}, {"referenceID": 24, "context": "The emergent topology from newscast protocol has a very low diameter and is very close to a random graph ([25],[26]).", "startOffset": 106, "endOffset": 110}, {"referenceID": 25, "context": "The emergent topology from newscast protocol has a very low diameter and is very close to a random graph ([25],[26]).", "startOffset": 111, "endOffset": 115}, {"referenceID": 53, "context": "The ILP system used in all experiments is Aleph [54].", "startOffset": 48, "endOffset": 52}, {"referenceID": 55, "context": "The Baseline models are the ones reported in [56] (these are cross-validation estimates, whereas the estimates for Centralised and Distributed models are from holdout sets).", "startOffset": 45, "endOffset": 49}, {"referenceID": 7, "context": "(see for example [8], [10], [17], [57]).", "startOffset": 17, "endOffset": 20}, {"referenceID": 9, "context": "(see for example [8], [10], [17], [57]).", "startOffset": 22, "endOffset": 26}, {"referenceID": 16, "context": "(see for example [8], [10], [17], [57]).", "startOffset": 28, "endOffset": 32}, {"referenceID": 49, "context": "We have some reason to believe that this conjecture may hold in some circumstances, based on the use of Sanov\u2019s theorem [50] and related techniques.", "startOffset": 120, "endOffset": 124}], "year": 2014, "abstractText": "A particularly successful role for Inductive Logic Programming (ILP) is as a tool for discovering useful relational features for subsequent use in a predictive model. Conceptually, the case for using ILP to construct relational features rests on treating these features as functions, the automated discovery of which necessarily requires some form of first-order learning. Practically, there are now several reports in the literature that suggest that augmenting any existing features with ILPdiscovered relational features can substantially improve the predictive power of a model. While the approach is straightforward enough, much still needs to be done to scale it up to explore more fully the space of possible features that can be constructed by an ILP system. This is in principle, infinite and in practice, extremely large. Applications have been confined to heuristic or random selections from this space. In this paper, we address this computational difficulty by allowing features to be constructed in a distributed manner. That is, there is a network of computational units, each of which employs an ILP engine to construct some small number of features and then builds a (local) model. We then employ a consensus-based algorithm, in which neighbouring nodes share information to update local models. For a category of models (those with convex loss functions), it can be shown that the algorithm will result in all nodes converging to a consensus model. In practice, it may be slow to achieve this convergence. Nevertheless, our results on synthetic and real datasets that suggests that in relatively short time the \u201cbest\u201d node in the network reaches a model whose predictive accuracy is comparable to that obtained using more computational effort in a non-distributed setting (the best node is identified as the one whose weights converge first). ? A short 6-page version of this paper was presented at the 24th International Conference on Inductive Logic Programming, held in conjunction with ECML PKDD, France. Furthermore, a significant part of the work in this paper was done when the first author was an Associate Research Scientist at the Center for Computational Learning Systems (CCLS), Columbia University, NY. ar X iv :1 40 9. 34 46 v1 [ cs .L G ] 1 1 Se p 20 14 2 Haimonti Dutta and Ashwin Srinivasan", "creator": "TeX"}}}