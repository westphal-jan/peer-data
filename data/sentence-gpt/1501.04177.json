{"id": "1501.04177", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Jan-2015", "title": "Second International Nurse Rostering Competition (INRC-II) --- Problem Description and Rules ---", "abstract": "In this paper, we provide all information to participate to the Second International Nurse Rostering Competition (INRC-II). First, we describe the problem formulation, which, differently from INRC-I, is a multi-stage procedure. Second, we illustrate all the necessary infrastructure do be used together with the participant's solver, including the testbed, the file formats, and the validation/simulation tools. Finally, we state the rules of the competition. All update-to-date information about the competition is available at the end of the entry period.", "histories": [["v1", "Sat, 17 Jan 2015 09:06:08 GMT  (28kb,D)", "http://arxiv.org/abs/1501.04177v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["sara ceschia", "nguyen thi thanh dang", "patrick de causmaecker", "stefaan haspeslagh", "rea schaerf"], "accepted": false, "id": "1501.04177"}, "pdf": {"name": "1501.04177.pdf", "metadata": {"source": "CRF", "title": "Second International Nurse Rostering Competition (INRC-II) \u2014 Problem Description and Rules \u2014", "authors": ["Sara Ceschia", "Nguyen Thi Thanh Dang", "Patrick De Causmaecker", "Stefaan Haspeslagh", "Andrea Schaerf"], "emails": ["sara.ceschia@uniud.it", "schaerf@uniud.it", "nguyenthithanh.dang@kuleuven-kulak.be", "patrick.decausmaecker@kuleuven-kulak.be", "stefaan.haspeslagh@vives.be"], "sections": [{"heading": "1 Introduction", "text": "Nurse rostering is a very important problem in healthcare management. Early papers date from the seventies, but especially in the last decade, it has drawn significant attention; see [4, 5] for a review of literature and a classification.\nThe First International Nurse Rostering Competition (INRC-I) [8] was run in 2010. The competition welcomed 15 submissions in three categories (sprint, medium and long tracks). Since then, several research groups took this formulation and the corresponding instances as a challenge [1, 3, 6, 7, 11, 9, 12] and produced remarkable results. Optimal solutions as well as new best solutions have also been found and reported.\nThe problem considered for INRC-I was the assignment of nurses to shifts in a fixed planning horizon, subject to a large number of hard and soft constraint types.\nFor the Second International Nurse Rostering Competition (INRC-II), we propose a smaller set of constraint types, but within a multi-stage formulation of the problem. That is, the solvers of the participants are requested to deal with a sequence of cases, referring to consecutive weeks of a longer planning horizon (4 or 8 weeks).\nThe search method designed by the participants has to be able to solve a single stage of the problem corresponding to one week. Some information, called history, is carried out between consecutive weeks, so that the one coming from the previous week has to be taken into account by the solver. The history includes border data, such as the last worked shift of each nurse, and counters for cumulative data, such as total worked night shifts. Counters\u2019 value has to be checked against global thresholds, but only at the end of the planning period. The planning horizon is not rolling [2] but fixed, in the sense that in the final week all counters are checked against their limits.\nar X\niv :1\n50 1.\n04 17\n7v 1\nWe provide a simple command-line simulation/validation software to be used simulate the solution process and to evaluate the quality of the solver. The simulator invokes the participant\u2019s solver for each stage iteratively, then updates the history after each single execution. The provided validator concatenates the solutions for all weeks, and evaluates them all together, along with the cumulative data coming from the final history.\nThe solver should take into account the following separate input sources:\nScenario: Information that is global to all weeks of the entire planning horizon, such as nurse contracts and shift types.\nWeek data: Specific data of the single week, like daily coverage requirements and nurse preferences for specific days.\nHistory: Information that must be passed from a week to the other, in order to compute constraint violations properly. It includes border information and global counters.\nThe solver must deliver an output file, based on which, the simulator computes the new history file, to be passed back to the solver for the solution of the next week. As will be explained further, besides the mandatory input and output files, a custom data file may be used to exchange information between two stages.\nThe paper is organised as follows. Section 2 illustrates the problem definition. Section 3 describes the testbed. Section 4 shows the software tools made available to the participants to evaluate their solver. Finally, Section 5 describes the rules of the competition. Appendix A describes the file formats and Appendix B provides a deeper look at the constraint evaluation. All update-to-date information about the competition is available at http://mobiz.vives.be/inrc2/."}, {"heading": "2 Problem definition", "text": "The basic (one-stage) problem consists in the weekly scheduling of a fixed number of nurses using a set of shifts, such that in each day a nurse works a shift or has a day-off. Nurses may have multiple skills, and for each skill we are given different coverage requirements.\nGiven the multi-stage nature of the overall process, the input data of the problem comes from three different sources, called scenario, week data, and history, as explained in the following sections. The way the information is organised in the files is explained in Appendix A."}, {"heading": "2.1 Scenario", "text": "The scenario represents the general data common to all stages of the overall process. It contains the following information:\nPlanning horizon: The number of weeks that compose the planning period.\nSkills: The list of skills included in the problem (head nurse, regular nurse, trainee, . . . ). Each nurse has one or more skills, but in each working shift she/he covers exactly one skill request.\nContracts: Each nurse has one specific contract (full time, part time, on call, . . . ). The contract sets limits on the distribution and the number of assignments within the planning horizon. In detail, it contains:\n\u2022 minimum and maximum total number of assignments in the planning horizon; \u2022 minimum and maximum number of consecutive working days; \u2022 minimum and maximum number of consecutive days-off; \u2022 maximum number of working week-ends in the planning horizon; \u2022 a Boolean value representing the presence of the Complete week-end constraint to the nurse, which\nstates that the nurse should work both days of the week-end or none of them.\nNurses: For each nurse, the name (identifier), the contract and the set of skills are given.\nShift types: For each shift type (early, late, night, . . . ), it is given the minimum and maximum number of consecutive assignments of that specific type, and a matrix of forbidden shift type successions is given. For example, it may not be allowed to assign to a nurse an early shift the day after a late one."}, {"heading": "2.2 Week data", "text": "The week data contains the specific data for the single week. It consists of the following information:\nRequirements: It is given, for each shift, for each skill, for each week day, the optimal and minimum number of nurses necessary to fulfil the working duties.\nNurse requests: It is given, a set of triples, each one composed by the nurse name, the week day, and a shift. The presence of a given triple represents the request of the nurse not to work in the given shift in the given day. The special shift name Any represents the request of not working in any shift of the day, i.e. having a day-off.\nThe above information varies from week to week, due to variability on the number of current patients and specific preferences of nurses.\nConventionally, all weeks start with Monday, so that the data is stored in the order Mon, Tue, . . . , Sun."}, {"heading": "2.3 History", "text": "The history contains the information that must be carried over from one week to the following one, so as to evaluate the constraints correctly. In detail, it reports for each nurse the following two types of information:\nBorder data: The border data is used for checking the constraints on consecutive assignments. They are:\n\u2022 shift worked in the last day of the previous week, or the special value None if the nurse had a day-off; \u2022 number of consecutive worked shifts of the same type and number of consecutive worked shifts in\ngeneral (both are 0 if the last worked shift is None);\n\u2022 number of consecutive days-off (0 if the last worked shift is not None).\nCounters: The counters collect the cumulative value over the weeks of specific quantities of interest, that have to be checked only at the end of the planning period. They are:\n\u2022 total number of worked shifts; \u2022 total number of worked week-ends.\nThe history is computed after each week based on the solution delivered by the solver and on the previous history. The history passed to the solver for the first week has all counter values equal to 0, whereas the border data can have any value."}, {"heading": "2.4 Solution", "text": "The full solution process is a loop that executes at each step the solver for a week, iterating for all weeks in the planning period (4 or 8 weeks).\nAfter each week, the history information is computed based on the solution and the previous history, and delivered in a new file. This is done by the simulator provided, whereas the solver must deliver only the solution itself.\nThe complete process is sketched in Figure 1(a), assuming a scenario of 4 weeks. Input files are colored in different shades of cyan, and the output ones in different shades on magenta.\nIn addition to generating a solution file after solving each stage, the solver might want to save some other prediction information in a custom file (in yellow in Figure 1) and passing it to the next solver call, in order to guide the solving of the next stage better. The content and the format of this file is free, but its name is set by the simulator, as described in Section 4.1.\nThe output produced by the solver is a list of assignments of nurses to shifts and skills. Each entry contains the nurse name, the week day, the shift, and the skill. As an example, consider the entry \u3008Mary, Tue, Night, HeadNurse\u3009, that states that the nurse Mary works on Tuesday the night shift with the role of head nurse.\nThe quality of the overall solution is evaluated, as shown in Figure 1(b), for the entire planning horizon based on:\n\u2022 the solution for each week containing the assignments of the nurses to shifts and skills, using the requirements in the week data file and the border data in the history file;\n\u2022 the counters of the final history file, against the limits provided in the scenario."}, {"heading": "2.5 Constraints", "text": "According to the setting outlined above, we split the constraints into two sets: those that can be computed for each week separately, and those that are computed only globally at the end of the planning period.\nAs customary, they are also split into hard and soft constraints. The former must be always satisfied, and the latter contribute to the objective function. The weight of each single soft constraint is shown prior to its description below."}, {"heading": "2.5.1 Constraints on the single week", "text": "Below is the list of hard (H) and soft (S) constraint types:\nH1. Single assignment per day: A nurse can be assigned to at most one shift per day.\nH2. Under-staffing: The number of nurses for each shift for each skill must be at least equal to the minimum requirement.\nH3. Shift type successions: The shift type assignments of one nurse in two consecutive days must belong to the legal successions provided in the scenario.\nH4. Missing required skill: A shift of a given skill must necessarily be fulfilled by a nurse having that skill.\nS1. Insufficient staffing for optimal coverage (30): The number of nurses for each shift for each skill must be equal to the optimal requirement. Each missing nurse is penalised according to the weight provided. Extra nurses above the optimal value are not considered in the cost.\nS2. Consecutive assignments (15/30): Minimum and maximum number of consecutive assignments, per shift or global, should be respected. Their evaluation involves also the border data. Each extra or missing day is multiplied by the corresponding weight. The weights for consecutive shift constraint and for consecutive working days are respectively 15 and 30.\nS3. Consecutive days off (30): Minimum and maximum number of consecutive days off should be respected. Their evaluation involves also the border data. Each extra or missing day is multiplied by the corresponding weight.\nS4. Preferences (10): Each assignment to an undesired shift is penalised by the corresponding weight.\nS5. Complete week-end (30): Every nurse that has the complete weekend value set to true, must work both week-end days or none. If she/he works only one of the two days Sat and Sun this is penalised by the corresponding weight."}, {"heading": "2.5.2 Constraints spanning over the planning horizon", "text": "The following (soft) constraints are evaluated only at the end of the planning period:\nS6. Total assignments (20): For each nurse the total number of assignments (working days) must be included within the limits (minimum and maximum) enforced by her/his contract. The difference (in either direction), multiplied by its weight, is added to the objective function.\nS7. Total working week-ends (30): For each nurse the number of working weed-ends must be less than or equal to the maximum. The number of worked week-ends in excess is added to the objective function multiplied by the weight. A week-end is considered \u201cworking\u201d if at least one of the two days (Sat and Sun) is busy for the nurse.\nObviously, the solver should take constraints S6 and S7 into account in each single stage. However, their violation values have a decreasing degree of uncertainty going from one week to the following one, and only in the last week they can be evaluated exactly. It is up to the solver to decide the way to model them in the cost function in the previous weeks."}, {"heading": "3 Instances", "text": "One complete solution process requires as input a scenario, an initial history, and 4 (or 8) week data, and it produces 4 (or 8) week solutions and one final history. Scenario, week data, history, and week solutions are written in separate files each one with its own syntax.\nFor ease of processing, all files are provided in XML, JSON, and text-only formats, and each participant can use the format that he/she considers as most convenient for his/her implementation. File formats are explained in Appendix A.\nFiles belonging to the same case are grouped in a dataset, which is composed by the following set of files:\n\u2022 1 scenario file;\n\u2022 3 initial history files;\n\u2022 10 week data files.\nAn instance is thus a specific scenario, an initial history, and a sequence of 4 (or 8) week data files, all belonging to the same dataset. The same week data file can also be used multiple times in the same instance.\nWe provide a testbed composed of 14 datasets, one for each combination of number of weeks and number of nurses, taken from the sets {30,40,50,60,80,100,120} and {4,8}, respectively. Datasets are named using these two number with the prefixes n (for nurses) and w for weeks. For example, the dataset n050w8 is the (unique) one with 50 nurses and 8 weeks.\nIn addition, three test datasets, n005w4, n012w8, and n012w4, are provided for testing and debugging purposes. For the test datasets, we also provide the solution for three specific instances.\nThe instances of the competition testbed that will be used for evaluating the participants will be released on May 15th as the late data."}, {"heading": "4 Tools", "text": "We provide to the participants a suite of software tools. The simulator manages the multi-stage solution process. The validator certificates the quality of a given instance. The benchmark executable computes the allowed running time for each computer. Finally, the feasibility checker gives the possibility to the participant to check that a specific instance of a given dataset has or not at least one solution that satisfies all hard constraints."}, {"heading": "4.1 Simulator", "text": "On the competition website, the java program Simulator.jar that runs the simulation and delivers the costs is available. As shown in Figure 1, the simulator receives a scenario file, an initial history file, the solver\u2019s executable file name and a sequence of week data files as its input. It then applies the solver on each week data file, generating a history file for each stage based on the solution obtained from each solver call. After the last week data file in the sequence is solved, the validator is called to evaluate the whole planning horizon. Besides the basic input described above, the user can also specify random seeds for his/her solver, the directory where the solver is run in, and the directory where all solution files, generated history files, log files (the solver\u2019s console output after each solver call) and the validator\u2019s results are saved in. In addition to generating a solution file after solving each stage, the solver might want to save some other information in a custom file and passing it to the next solver call, in order to guide the solving of the next stage better. Such a need is also supported by the simulator.\nThe simulator is called using the following command line parameters (parameters in the square brackets are optional):\njava -jar Simulator.jar --sce <Scenario_File> --his <Initial_History_File> --weeks <Week_Data_File_1> .. <Week_Data_File_N> --solver <Solver_Executable> [--runDir <Running_Directory>] [--outDir <Output_Directory>] [--cus] [--rand <Random_Seed_1> .. <Random_Seed_N>]\nIn detail:\n\u2022 File names of the scenario file, initial history files, and week data files can have either absolute or relative path. If they are relative, they will be taken from the current working directory (not the Running Directory).\n\u2022 The number of week data files N must be equal to the number of weeks stated in the scenario file.\n\u2022 Before each solver\u2019s call, the command line cd <Running Directory> will be called.\n\u2022 The number of random seeds specified after the --rand option can be either one or N. If only one random seed is given, it will be used for all solver\u2019s calls.\nThe simulator works under the assumption that the solver has the following command line:"}, {"heading": "Solver_Executable --sce <Scenario_File> --his <Initial_History_File> --week <Week_Data_File> --sol <Solution_File_Name> [--cusIn <Custom_Input_File>] [--cusOut <Custom_Output_File>] [--rand <Random_Seed>]", "text": "The simulator generates the following files in the directory Output Directory:\n\u2022 history-week0.<extension>, history-week1.<extension>, ..., history-weekN.<extension>: history files generated by the simulator after each solver call. The <extension> is set based on the relevant input file format.\n\u2022 custom-week0, custom-week1, ..., custom-weekN: custom files generated by the solver, if the --cus option is used.\n\u2022 result-week0.txt, result-week1.txt, ..., result-weekN.txt: log files for all solver calls.\n\u2022 Validator-results.txt: results of the validator.\nThe simulator asks the solver to generate a single solution file for each stage. These solution files are also located in the directory Output Directory, under the names sol-week0.<extension>, sol-week1.<extension>, ..., sol-weekN.<extension>.\nImportant note: the simulator and the validator must be in the same directory. As an example, the command line for the simulator\njava -jar Simulator.jar --his H0-n005w4-0.txt --sce Sc-n005w4.txt --weeks WD-n005w4-2.txt WD-n005w4-0.txt WD-n005w4-2.txt WD-n005w4-1.txt --solver ./program.exe --runDir Devel/ --outDir Simulator_out/ --cus --rand 10 11 12 13\nproduces the following subsequent command lines\ncd Devel/\n./program.exe --sce /home/nguyen/data/Sc-n005w4.txt --his /home/nguyen/data/H0-n005w4-0.txt --week /home/nguyen/data/WD-n005w4-2.txt --sol /home/nguyen/data/Simulator_out/sol-week0.txt --cusOut /home/nguyen/data/Simulator_out/custom-week0 --rand 10\n./program.exe --sce /home/nguyen/data/Sc-n005w4.txt --his /home/nguyen/data/Simulator_out/history-week0.txt --week /home/nguyen/data/WD-n005w4-0.txt --sol /home/nguyen/data/Simulator_out/sol-week1.txt --cusIn /home/nguyen/data/Simulator_out/custom-week0 --cusOut /home/nguyen/data/Simulator_out/custom-week1 --rand 11\n./program.exe --sce /home/nguyen/data/Sc-n005w4.txt --his /home/nguyen/data/Simulator_out/history-week1.txt --week /home/nguyen/data/WD-n005w4-2.txt --sol /home/nguyen/data/Simulator_out/sol-week2.txt --cusIn /home/nguyen/data/Simulator_out/custom-week1 --cusOut /home/nguyen/data/Simulator_out/custom-week2 --rand 12\n./program.exe --sce /home/nguyen/data/Sc-n005w4.txt --his /home/nguyen/data/Simulator_out/history-week2.txt --week /home/nguyen/data/WD-n005w4-1.txt --sol /home/nguyen/data/Simulator_out/sol-week3.txt --cusIn /home/nguyen/data/Simulator_out/custom-week2 --cusOut /home/nguyen/data/Simulator_out/custom-week3 --rand 13\nGiven that the current working directory is /home/nguyen/data/"}, {"heading": "4.2 Validator", "text": "The validator is a java program that checks for the validity of a solution of an instance, and calculate the corresponding objective function value according to the evaluation method (see also Appendix B) and the constraints\u2019 weights described in Section 2.4. The validator is automatically called by the simulator at the end of the solving procedure. It can also be used as a stand-alone program with the following syntax:\njava -jar Validator.jar --sce <Scenario_File> --his <Initial_History_File> --weeks <Week_Data_File_1> .. <Week_Data_File_N> --sols <Solution_File_1> .. <Solution_File_N> [--verbose]\nIf the --verbose option is used, details of each soft constraint\u2019s violation of each nurse are shown. As an example, the command line\njava -jar validator.jar --sce n005w4/Sc-n005w4.txt --his n005w4/H0-n005w4-0.txt --weeks n005w4/WD-n005w4-1.txt n005w4/WD-n005w4-2.txt n005w4/WD-n005w4-3.txt n005w4/WD-n005w4-3.txt --sols Solutions/Sol-n005w4-1-0.txt Solutions/Sol-n005w4-2-1.txt"}, {"heading": "Solutions/Sol-n005w4-3-2.txt Solutions/Sol-n005w4-3-3.txt", "text": "produces an output like:\n|M|T|W|T|F|S|S| |M|T|W|T|F|S|S| |M|T|W|T|F|S|S| |M|T|W|T|F|S|S|\n------------------------------------------------------------------------- Patrick |N|-|E|E|E|L|L| |-|-|E|E|L|L|L| |-|N|N|N|N|N|N| |-|L|L|L|L|N|N| Andrea |L|L|-|-|L|L|L| |N|N|N|N|N|-|L| |L|L|L|-|-|N|N| |N|N|N|-|-|E|E| Stefaan |N|N|N|N|-|-|-| |E|E|L|L|-|-|E| |N|N|-|-|E|E|E| |N|N|-|-|-|L|L| Sara |-|-|-|N|N|N|N| |N|-|-|-|E|E|E| |E|L|L|L|-|-|-| |E|E|E|E|E|-|-| Nguyen |E|E|L|L|-|E|E| |L|L|-|L|N|N|N| |-|E|E|E|L|L|L| |-|L|L|N|N|N|N|\nHard constraint violations -------------------------- Minimal coverage constraints: 0 Required skill constraints: 0 Illegal shift type succession constraints: 0 Single assignment per day: 0\nCost per constraint type ------------------------ Total assignment constraints: 320 Consecutive constraints: 465 Non working days constraints: 330 Preferences: 70 Max working weekend: 210 Complete weekends: 60 Optimal coverage constraints: 240\n------------------------ Total cost: 1695"}, {"heading": "4.3 Benchmark", "text": "The benchmark program is designed to test how fast your machine is at doing the sort of things that are involved in rostering. For each problem size, which is defined as the number of nurses in the scenario file, the program tells you how long you can run your algorithm for each stage. It is not possible to provide perfectly equitable benchmarks across many platforms and algorithms, and we know that the benchmark may be kinder to some people than others. It is pointed out that all the finalists will be run on a standard machine therefore creating a \u2018level playing field\u2019.\nThe benchmark is only suitable for individual, single processor machines. It is not suitable, for example, for specialist parallel machines or clusters. In general, for multi-core machines, one single core is allowed to be used for the competition.\nThe benchmark is provided as an executable for various architectures. If your architecture is not among the ones provided please contact us to obtain the program.\nThe program should be run when the machine is not being used for anything else. The program will report how long it took, and hence the length of time you can run your rostering algorithm per stage, for each number of nurses.\nOn a relatively modern PC, the benchmark program will grant the participant approximately 10+30\u2217(N\u221220) seconds for each stage, in which N is the number nurses."}, {"heading": "4.4 Feasibility Checker", "text": "It could be possible that some instance created from a given dataset is infeasible. In order to prevent participants from wasting time for searching for feasible solutions when they do not exists, a feasibility checker is provided. This tool is a web service and can be found on the competition website from November 5, 2014."}, {"heading": "5 Competition rules", "text": ""}, {"heading": "5.1 General rules", "text": "This competition seeks to encourage research into automated nurse rostering methods for solving a multi-stage nurse rostering problem, and to offer prizes to the most successful methods. It is the spirit of these rules that is important, not the letter. With any set of rules for any competition it is possible to work within the letter of the rules but outside the spirit.\nRule 1: The organisers reserve the right to disqualify any participant from the competition at any time if the participant is determined by the organisers to have worked outside the spirit of the competition rules. The organisers\u2019 decision is final in any matter.\nRule 2: The organisers reserve the right to change the rules at any time, if they believe it is necessary for the sake of preserving the correct operation of the competition. Any change of rules will be accompanied by a general email to all participants.\nRule 3: The competition has a deadline when all submissions must be uploaded. The deadline is strict and no extensions will be given under any circumstances.\nRule 4: Participants can use any programming language. The use of third-party software is allowed under the following restrictions:\n\u2022 it is free software; \u2022 it\u2019s behaviour is (reasonably) documented; \u2022 it runs under a commonly-used operating system (Unix/Linux, Windows, or Mac OS X).\nRule 5: Participants have to benchmark their machine with the program provided in order to know how much time they have available to run their program for each stage on their machines. The solver should run on a single core of the machine.\nRule 6: The solver should take as input the files in one of the formats described, and produce as output a list of solution files for all stages (in the same format). It should do so within the allowed CPU time.\nRule 7: The solver used should be the same executable for all weeks, but obviously internally it could exploit the information regarding the week it is solving, and adapt its behavior depending on it.\nRule 8: The solver can be either deterministic or stochastic. In both cases, participants must be prepared to show that the results are repeatable in the given computer time. In particular, the participants that use a stochastic algorithm should code their program in such a way that the exact run that produced each solution submitted can be repeated (by recording the random seed).\nRule 9: Along with the solution for each instance, the participants should also submit a concise and clear description of their algorithm, so that in principle others can implement it.\nRule 10: A set of 5 finalists will be chosen after the competition deadline. Ordering of participants will be based on the scores obtained on the provided instances. The actual list will be based on the ranks of solvers on each single instance. The mean average of the ranks will produce the final place list. More details on how the orderings will be established can be found in Section 5.3.\nRule 11: The finalists will be asked to provide the executable that will be run and tested by the organisers. The finalists\u2019 solvers will be rerun by the organisers on new instances (including new datasets). It is the responsibility of the participant to ensure all information is provided to enable the organisers to recreate the solution. If appropriate information is not received or indeed the submitted solutions cannot be recreated, another finalist will be chosen from the original participants.\nRule 12: Finalists\u2019 eventual place listings will be based on the ranks on each single instance for a set of trials on all instances. As with Rule 10, an explanation of the procedures to be used can be found in Section 5.3.\nRule 13: In some circumstances, finalists may be required to show source code to the organisers. This is simply to check that they have stuck to the rules and will be treated in the strictest confidence.\nRule 14: Organisers of the competition cannot participate to it."}, {"heading": "5.2 Dates", "text": "The competition starts on October 17, 2014. On this date, we release the datasets, this specification paper, the simulator, the validator and the benchmark program. The web service for the feasibility checker is available on November 5, 2014. On May 15, 2015, the late data, i.e., a list of specific instances created from the competition testbed, will be released. The deadline for submission of participants\u2019 best results and their solvers is June 1, 2015. Notifications of the finalists will be sent out on July 1, 2015. The winners will be announced at the MISTA 2015 Conference in Prague (August 25-27, 2015)."}, {"heading": "5.3 Adjudication procedure", "text": "We follow the same adjudication procedure of INRC-I [8], from which in turn has been imported from the Second International Timetabling Competition (ITC-2007) [10]. It is repeated here for the sake on selfcontainedness.\nLet m be the total number of instances and k be the number of participants. Let Xij be the value of the objective function s supplied (and verified) by participant i for instance j. In case participant i provides an infeasible solution for instance j or he/she does not provide it at all, Xij is assigned a conventional value M larger than all the results supplied by the other participants for that instance.\nThe matrix X of results is transformed into a matrix of ranks R assigning to each Rij a value from 1 to k. That is, for instance j the supplied X1j , X2j , . . . ,Xkj are compared with each other and the rank 1 is assigned to the smallest observed value, the rank 2 to the second smallest, and so on to the rank k, which is assigned to the largest value for instance ij. We use average ranks in case of ties.\nConsider the example with m = 6 instances and k = 7 participants in Table 1. The ranks are shown in Table 2.\nWe define for each solver the mean of the ranks. The finalists of the competition will be the 5 solvers with the lowest mean ranks. In case of a tie for entering the last positions, all the last equal-mean solvers are included in the final (in this case the finalists will be more than 5). In the example, the mean ranks are shown in Table 3. In this case the finalists would be solvers 1, 3, 5, 6 and 7.\nThe organisers will check the runs of the candidate finalist with the submitted seed to make sure that the submitted runs are repeatable. If they are not, then another entrant will be chosen for the final.\nFor the final, the same evaluation process is repeated for the finalists with the following differences:\n1. New instances, including hidden datasets, will be used.\n2. The solvers will be run by the organisers, thus the finalist should give support to the organisers in the process of compiling and running the solvers.\n3. For each instance, the organisers will run 10 independent trails with seeds chosen at random. For each trial, we will compute the ranks and average them on all trials on all instances.\nThe winner is the one with the lowest mean rank. In case of a tie, 1 trial is added for all instances until a single winner is found."}, {"heading": "5.4 Prizes", "text": "The top three will divide e 1729 among them (first prize e 819, second e 637, third e 273), and will be offered free registration to PATAT 2016, that will include a special track on the competition."}, {"heading": "A File formats", "text": "In this appendix we describe the format for the input files (scenario, week data, and history) and output file (solution). Only the text-only format is explained in details, given that XML and JSON files are organised with the same structure, but in a more self-explanatory way."}, {"heading": "Scenario", "text": "The first line of the scenario file contains the name of the dataset in the format nXXXwY, where XXX is the number of nurses and Y the number of weeks of the planning horizon. This is the identifier of the scenario that is subsequently used in the relating history, week data, and solution files."}, {"heading": "SCENARIO = n005w4", "text": "Then it is reported the length of the planning horizon, expressed in number of weeks, and the number and names of skills for nurses."}, {"heading": "WEEKS = 4", "text": ""}, {"heading": "SKILLS = 2 HeadNurse Nurse", "text": "The shift types section indicates the number of shift types available, and for each one, the identifier (its name), and the minimum and the maximum number of consecutive assignments allowed. For each shift type, it is also detailed the forbidden shift types sequences as \u3008preceding shift type\u3009 \u3008number forbidden successions\u3009 \u3008succeeding shift type list\u3009. In the following example, the successions Late \u2192 Early, Night \u2192 Early and Night \u2192 Late are forbidden."}, {"heading": "SHIFT_TYPES = 3", "text": "Early (2,5) Late (2,3) Night (4,5)"}, {"heading": "FORBIDDEN_SHIFT_TYPES_SUCCESSIONS Early 0", "text": "Late 1 Early Night 2 Early Late\nIn the contract section it is listed the name of the contract type, and the lower and upper limits on working and rest days. In detail, it establishes the minimum and the maximum number of total assignments in the planning horizon, the minimum and the maximum number of consecutive working days, the minimum and the maximum number of consecutive days off, the maximum number of working weekends, and the presence (1) or absence (0) of the complete weekend constraint."}, {"heading": "CONTRACTS = 2", "text": "FullTime (15,22) (3,5) (2,3) 2 1 PartTime (7,11) (3,5) (3,5) 2 1\nFinally, the nurse section reports the total number of nurses available, and for each nurse his/her identifier (the name), the contract type, the number of skills owned and their names.\nNURSES = 5 Patrick FullTime 2 HeadNurse Nurse Andrea FullTime 2 HeadNurse Nurse Stefaan PartTime 2 HeadNurse Nurse Sara PartTime 1 Nurse Nguyen FullTime 1 Nurse"}, {"heading": "Week data", "text": "In the week data file, first of all there is the identifier of the corresponding scenario; then all the data about coverage requirements and nurse preferences is listed.\nWEEK_DATA n005w4\nA coverage requirement is specified by the shift type, the skill, and for each day of the week (from Monday to Sunday), the minimum coverage and the optimal coverage."}, {"heading": "REQUIREMENTS", "text": "Early HeadNurse (1,1) (0,0) (0,0) (0,0) (0,0) (1,1) (0,0) Early Nurse (1,2) (1,1) (1,1) (0,1) (1,1) (1,1) (0,1) Late HeadNurse (1,1) (0,1) (1,1) (0,0) (0,0) (0,0) (0,0) Late Nurse (1,1) (1,1) (0,1) (0,1) (1,1) (1,1) (1,1) Night HeadNurse (0,0) (1,1) (0,0) (0,0) (1,1) (1,1) (0,0) Night Nurse (0,1) (1,1) (1,1) (1,1) (1,1) (0,1) (1,1)\nFinally, the number of shift off requests is reported with the following grammar: \u3008nurse\u3009 \u3008shift type\u3009 \u3008day\u3009. The special shift type Any means that the nurse would like to have a day off.\nSHIFT_OFF_REQUESTS = 3 Sara Any Thu Sara Night Sat Stefaan Late Sat"}, {"heading": "History", "text": "The first line of the history file describes the week to which the history refers to (i.e. 0 for the initial history file, 1 after the first week, . . . ) and the relating scenario file.\nHISTORY 0 n005w4\nIn addition, the file contains the nurse history, in terms of total number of assignments, total number of worked weekends, last assigned shift type, number of consecutive assignments of the last shift type, number of consecutive worked days and number of consecutive days off.\nNURSE_HISTORY Patrick 0 0 Night 1 4 0 Andrea 0 0 Early 3 3 0 Stefaan 0 0 None 0 0 3 Sara 0 0 Late 1 4 0 Nguyen 0 0 None 0 0 1"}, {"heading": "Solution", "text": "The solution file gives the assignment of nurses to shifts and skills. The file starts with the reference to the solved week and to the scenario."}, {"heading": "SOLUTION", "text": ""}, {"heading": "3 n005w4", "text": "Then each single assignment is shown (in any order), reporting the name of the nurse, the day, the shift type and the skill considered. Days off are neglected."}, {"heading": "ASSIGNMENTS = 26 Patrick Mon Late HeadNurse Patrick Tue Night HeadNurse", "text": "Patrick Fri Early Nurse\nPatrick Sat Early Nurse Patrick Sun Late Nurse Andrea Mon Early HeadNurse Andrea Tue Late Nurse .. Nguyen Fri Late Nurse Nguyen Sat Late Nurse Nguyen Sun Night Nurse"}, {"heading": "B Constraint evaluation", "text": "In this appendix, we explain in more detail some of the constraints presented in Section 2.5. Specifically, we believe that the constraints that involve border data (history file) need a deeper explanation. Conversely, constraints H1, H2, S1, S4, S5, S6, and S7 do not rely on border data for their evaluation, and, in our opinion, their evaluation is straightforward and not subject to ambiguous interpretation.\nFor the remaining constraints, we exhaustively describe their evaluation at both borders of a stage. In the descriptions that follow, for simplicity, we omit the weight of the (soft) constraints, and we focus on the amount of the violation. For simplicity, we assume that the input data is the one included in the following fragment of a scenario file, setting all limits to the same value 3."}, {"heading": "SHIFT_TYPES = 2", "text": "Early (3,3) Late (3,3)"}, {"heading": "FORBIDDEN_SHIFT_TYPES_SUCCESSIONS Early 0", "text": "Late 1 Early"}, {"heading": "CONTRACTS = 1", "text": "FullTime (...,...) (3,3) (3,3) ...\nSection B.1 explains the number of consecutive working days constraints (S2). In section B.2 the evaluation of the number of consecutive days off constraints is explained (S3). Section B.3 elaborates on the forbidden shift type successions constraint (H3).\nB.1 Number of consecutive assignments (S2)\nMaximum number of consecutive working days\nThe evaluation of the constraint at the start of a stage depends on the value c of the number of consecutive working days at the beginning of a stage (from history). In Table 4, the constraint is evaluated for c = 5, showing for clarity also the week before the planning period.\nThe symbol \u2022 is used to mean any working shift, and the symbol \u2013 means a day off. An empty cell is used for assignments irrelevant for the example under consideration.\nAs it can be seen, the evaluator only counts the \u2018extra\u2019 amount of violation, as part of the violation has already been taken into account during the evaluation of the previous stage (see table 6).\nFrom this point on, the previous planning period will be represented by a single column denoting the value of the relevant counter from history. Table 5 shows the evaluation of the constraint for different values of c.\nTable 6 shows the evaluation of the constraint for the maximum consecutive working days at the end of a stage.\nMinimum number of consecutive working days\nTable 7 evaluates the constraint for the minimum consecutive working days. If c \u2265 3, then no violation of this constraint can occur at the beginning of a stage. As it is uncertain what the assignments at the beginning of the next stage are, the minimum number of consecutive working days constraint is not taken into account at the end of a stage.\nNote that both the maximum and minimum constraints are evaluated per series. In Table 8, there are two series of length 1 and 2, respectively, that produce two and one violations, respectively (minimum is 3).\nMinimum and maximum number of consecutive assignments to the same shift\nThe examples presented in the previous paragraphs work similarly for the consecutive assignments to the same shift, by replacing the symbol \u2022 with the specific shift (E or L, in this example) and the symbol \u2013 with a day off or any shift different from the given one.\nB.2 Number of consecutive days off (S3)\nB.2.1 Maximum number of consecutive days off\nThe evaluation of the constraint at the start of a stage depends on the value of the number of consecutive days off from the history, that we call c again. Table 9 shows the evaluation of the maximum number of consecutive days off constraint at the beginning of the stage.\nIn Table 10, we show the violations of the maximum number of consecutive days off constraint at the end of a stage; the history is not involve in this case.\nB.2.2 Minimum number of consecutive days off\nTable 11 shows the evaluation of the minimum number of consecutive days off constraint at the beginning of the stage.\nB.3 Forbidden shift type successions\nIn Table 12, the evaluation of the constraint for the forbidden succession at the beginning of the stage is shown. As can be seen, the constraint is violated only when the last assigned shift type from history is equal to Late and the Monday shift is Early."}], "references": [{"title": "Nurse rostering using modified harmony search algorithm. In Swarm, Evolutionary, and Memetic Computing, volume 7077 of Lecture", "author": ["Mohammed A Awadallah", "Ahamad Tajudin Khader", "Mohammed Azmi Al-Betar", "Asaju La\u2019aro Bolaji"], "venue": "Notes in Computer Science,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "Short-term nurse scheduling in response to daily fluctuations in supply and demand", "author": ["Jonathan F Bard", "Hadi W Purnomo"], "venue": "Health Care Management Science,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "New approaches to nurse rostering benchmark instances", "author": ["Edmund K Burke", "Tim Curtois"], "venue": "European Journal of Operational Research,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "The state of the art of nurse rostering", "author": ["Edmund K Burke", "Patrick De Causmaecker", "Greet Vanden Berghe", "Hendrik Van Landeghem"], "venue": "Journal of Scheduling,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2004}, {"title": "A categorisation of nurse rostering problems", "author": ["Patrick De Causmaecker", "Greet Vanden Berghe"], "venue": "Journal of Scheduling,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "A variable neighborhood search based matheuristic for nurse rostering problems", "author": ["Federico Della Croce", "Fabio Salassa"], "venue": "Annals of Operations Research,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2014}, {"title": "Personnel rostering by means of variable neighborhood search", "author": ["Martin Josef Geiger"], "venue": "In Operations Research Proceedings", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2010}, {"title": "The first international nurse rostering competition", "author": ["Stefaan Haspeslagh", "Patrick De Causmaecker", "Andrea Schaerf", "Martin St\u00f8levik"], "venue": "Annals of Operations Research,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "Adaptive neighborhood search for nurse rostering", "author": ["Zhipeng L\u00fc", "Jin-Kao Hao"], "venue": "European Journal of Operational Research,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "Setting the research agenda in automated timetabling: The second international timetabling competition", "author": ["Barry McCollum", "Andrea Schaerf", "Ben Paechter", "Paul McMullan", "Rhyd Lewis", "Andrew J. Parkes", "Luca Di Gaspero", "Rong Qu", "Edmund K. Burke"], "venue": "INFORMS Journal on Computing,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2010}, {"title": "Integer programming techniques for the nurse rostering problem", "author": ["HG Santos", "TAM Toffolo", "S Ribas", "RAM Gomes"], "venue": "Annals of Operations Research,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "A generic two-phase stochastic variable neighborhood approach for effectively solving the nurse rostering problem", "author": ["Ioannis P Solos", "Ioannis X Tassopoulos", "Grigorios N Beligiannis"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2013}], "referenceMentions": [{"referenceID": 3, "context": "Early papers date from the seventies, but especially in the last decade, it has drawn significant attention; see [4, 5] for a review of literature and a classification.", "startOffset": 113, "endOffset": 119}, {"referenceID": 4, "context": "Early papers date from the seventies, but especially in the last decade, it has drawn significant attention; see [4, 5] for a review of literature and a classification.", "startOffset": 113, "endOffset": 119}, {"referenceID": 7, "context": "The First International Nurse Rostering Competition (INRC-I) [8] was run in 2010.", "startOffset": 61, "endOffset": 64}, {"referenceID": 0, "context": "Since then, several research groups took this formulation and the corresponding instances as a challenge [1, 3, 6, 7, 11, 9, 12] and produced remarkable results.", "startOffset": 105, "endOffset": 128}, {"referenceID": 2, "context": "Since then, several research groups took this formulation and the corresponding instances as a challenge [1, 3, 6, 7, 11, 9, 12] and produced remarkable results.", "startOffset": 105, "endOffset": 128}, {"referenceID": 5, "context": "Since then, several research groups took this formulation and the corresponding instances as a challenge [1, 3, 6, 7, 11, 9, 12] and produced remarkable results.", "startOffset": 105, "endOffset": 128}, {"referenceID": 6, "context": "Since then, several research groups took this formulation and the corresponding instances as a challenge [1, 3, 6, 7, 11, 9, 12] and produced remarkable results.", "startOffset": 105, "endOffset": 128}, {"referenceID": 10, "context": "Since then, several research groups took this formulation and the corresponding instances as a challenge [1, 3, 6, 7, 11, 9, 12] and produced remarkable results.", "startOffset": 105, "endOffset": 128}, {"referenceID": 8, "context": "Since then, several research groups took this formulation and the corresponding instances as a challenge [1, 3, 6, 7, 11, 9, 12] and produced remarkable results.", "startOffset": 105, "endOffset": 128}, {"referenceID": 11, "context": "Since then, several research groups took this formulation and the corresponding instances as a challenge [1, 3, 6, 7, 11, 9, 12] and produced remarkable results.", "startOffset": 105, "endOffset": 128}, {"referenceID": 1, "context": "The planning horizon is not rolling [2] but fixed, in the sense that in the final week all counters are checked against their limits.", "startOffset": 36, "endOffset": 39}, {"referenceID": 7, "context": "3 Adjudication procedure We follow the same adjudication procedure of INRC-I [8], from which in turn has been imported from the Second International Timetabling Competition (ITC-2007) [10].", "startOffset": 77, "endOffset": 80}, {"referenceID": 9, "context": "3 Adjudication procedure We follow the same adjudication procedure of INRC-I [8], from which in turn has been imported from the Second International Timetabling Competition (ITC-2007) [10].", "startOffset": 184, "endOffset": 188}], "year": 2015, "abstractText": "In this paper, we provide all information to participate to the Second International Nurse Rostering Competition (INRC-II). First, we describe the problem formulation, which, differently from INRC-I, is a multi-stage procedure. Second, we illustrate all the necessary infrastructure do be used together with the participant\u2019s solver, including the testbed, the file formats, and the validation/simulation tools. Finally, we state the rules of the competition. All update-to-date information about the competition is available at http://mobiz.vives.be/inrc2/.", "creator": "LaTeX with hyperref package"}}}