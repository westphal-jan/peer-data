{"id": "1502.03167", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Feb-2015", "title": "Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift", "abstract": "Training Deep Neural Networks is complicated by the fact that the distribution of each layer's inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization, and makes it notoriously hard to train models with saturating nonlinearities. We refer to this phenomenon as internal covariate shift, and address the problem by normalizing layer inputs and by restricting the model to one layer.\n\n\n\nThe linearity of each layer's inputs is related to the time required to train and the number of inputs to an input layer during the training. This is also the reason that many models with large input layers are highly sensitive to the degree of error, and that the training model is not particularly reliable if the input layer is not uniformly distributed and can be highly inaccurate. For example, one study in the 1970s demonstrated that a linear system with 100 input layers per layer per layer and an output layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer per layer", "histories": [["v1", "Wed, 11 Feb 2015 01:44:18 GMT  (30kb)", "http://arxiv.org/abs/1502.03167v1", null], ["v2", "Fri, 13 Feb 2015 17:31:36 GMT  (30kb)", "http://arxiv.org/abs/1502.03167v2", null], ["v3", "Mon, 2 Mar 2015 20:44:12 GMT  (30kb)", "http://arxiv.org/abs/1502.03167v3", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["sergey ioffe", "christian szegedy"], "accepted": true, "id": "1502.03167"}, "pdf": {"name": "1502.03167.pdf", "metadata": {"source": "CRF", "title": "Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift", "authors": ["Sergey Ioffe"], "emails": ["sioffe@google.com", "szegedy@google.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n50 2.\n03 16\n7v 1\n[ cs\n.L G\n] 1\n1 Fe\nb 20\n15\nTraining Deep Neural Networks is complicated by the fact that the distribution of each layer\u2019s inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization, and makes it notoriously hard to train models with saturating nonlinearities. We refer to this phenomenon as internal covariate shift, and address the problem by normalizing layer inputs. Our method draws its strength from making normalization a part of the model architecture and performing the normalization for each training mini-batch. Batch Normalization allows us to use much higher learning rates and be less careful about initialization. It also acts as a regularizer, in some cases eliminating the need for Dropout. Applied to a state-of-the-art image classification model, Batch Normalization achieves the same accuracy with 14 times fewer training steps, and beats the original model by a significant margin. Using an ensemble of batchnormalized networks, we improve upon the best published result on ImageNet classification: reaching 4.9% top-5 validation error (and 4.8% test error), exceeding the accuracy of human raters."}, {"heading": "1 Introduction", "text": "Deep learning has dramatically advanced the state of the art in vision, speech, and many other areas. Stochastic gradient descent (SGD) has proved to be an effective way of training deep networks, and SGD variants such as momentum Sutskever et al. (2013) and Adagrad Duchi et al. (2011) have been used to achieve state of the art performance. SGD optimizes the parameters \u0398 of the network, so as to minimize the loss\n\u0398 = argmin \u0398\n1\nN\nN\u2211\ni=1\n\u2113(xi,\u0398)\nwhere x1...N is the training data set. With SGD, the training proceeds in steps, and at each step we consider a minibatch x1...m of size m. The mini-batch is used to approximate the gradient of the loss function with respect to the parameters, by computing\n1\nm\n\u2202\u2113(xi,\u0398)\n\u2202\u0398 .\nUsing mini-batches of examples, as opposed to one example at a time, is helpful in several ways. First, the gradient of the loss over a mini-batch is an estimate of the gradient over the training set, whose quality improves as the batch size increases. Second, computation over a batch can be much more efficient than m computations for individual examples, due to the parallelism afforded by the modern computing platforms.\nWhile stochastic gradient is simple and effective, it requires careful tuning of the model hyper-parameters, specifically the learning rate used in optimization, as well as the initial values for the model parameters. The training is complicated by the fact that the inputs to each layer are affected by the parameters of all preceding layers \u2013 so that small changes to the network parameters amplify as the network becomes deeper.\nThe change in the distributions of layers\u2019 inputs presents a problem because the layers need to continuously adapt to the new distribution. When the input distribution to a learning system changes, it is said to experience covariate shift Shimodaira (2000). This is typically handled via domain adaptation Jiang (2008). However, the notion of covariate shift can be extended beyond the learning system as a whole, to apply to its parts, such as a sub-network or a layer. Consider a network computing\n\u2113 = F2(F1(u,\u03981),\u03982)\nwhere F1 and F2 are arbitrary transformations, and the parameters \u03981,\u03982 are to be learned so as to minimize the loss \u2113. Learning \u03982 can be viewed as if the inputs x = F1(u,\u03981) are fed into the sub-network\n\u2113 = F2(x,\u03982).\nFor example, a gradient descent step\n\u03982 \u2190 \u03982 \u2212 \u03b1\nm\nm\u2211\ni=1\n\u2202F2(xi,\u03982)\n\u2202\u03982\n(for batch size m and learning rate \u03b1) is exactly equivalent to that for a stand-alone network F2 with input x. Therefore, the input distribution properties that make training more efficient \u2013 such as having the same distribution between the training and test data \u2013 apply to training the sub-network as well. As such it is advantageous for the distribution of x to remain fixed over time. Then, \u03982 does\nnot have to readjust to compensate for the change in the distribution of x.\nFixed distribution of inputs to a sub-network would have positive consequences for the layers outside the subnetwork, as well. Consider a layer with a sigmoid activation function z = g(Wu + b) where u is the layer input, the weight matrix W and bias vector b are the layer parameters to be learned, and g(x) = 11+exp(\u2212x) . As |x| increases, g\u2032(x) tends to zero. This means that for all dimensions of x = Wu+b except those with small absolute values, the gradient flowing down to u will vanish and the model will train slowly. However, since x is affected by W, b and the parameters of all the layers below, changes to those parameters during training will likely move many dimensions of x into the saturated regime of the nonlinearity and slow down the convergence. This effect is amplified as the network depth increases. In practice, the saturation problem and the resulting vanishing gradients are usually addressed by using Rectified Linear Units Nair & Hinton (2010) ReLU(x) = max(x, 0), careful initialization Bengio & Glorot (2010); Saxe et al. (2013), and small learning rates. If, however, we could ensure that the distribution of nonlinearity inputs remains more stable as the network trains, then the optimizer would be less likely to get stuck in the saturated regime, and the training would accelerate.\nWe refer to the change in the distributions of internal nodes of a deep network, in the course of training, as Internal Covariate Shift. Eliminating it offers a promise of faster training. We propose a new mechanism, which we call Batch Normalization, that takes a step towards reducing internal covariate shift, and in doing so dramatically accelerates the training of deep neural nets. It accomplishes this via a normalization step that fixes the means and variances of layer inputs. Batch Normalization also has a beneficial effect on the gradient flow through the network, by reducing the dependence of gradients on the scale of the parameters or of their initial values. This allows us to use much higher learning rates without the risk of divergence. Furthermore, batch normalization regularizes the model and reduces the need for Dropout Srivastava et al. (2014). Finally, Batch Normalization makes it possible to use saturating nonlinearities by preventing the network from getting stuck in the saturated modes.\nIn Sec. 4.2, we apply Batch Normalization to the bestperforming ImageNet classification network, and show that we can match its performance using only 7% of the training steps, and can further exceed its accuracy by a substantial margin. Using an ensemble of such networks trained with Batch Normalization, we achieve the top-5 error rate that improves upon the best known results on ImageNet classification."}, {"heading": "2 Towards Reducing Internal Covariate Shift", "text": "We define Internal Covariate Shift as the change in the distribution of network activations due to the change in network parameters during training. To improve the training, we seek to reduce the internal covariate shift. By fixing the distribution of the layer inputs x as the training progresses, we expect to improve the training speed. It has been long known LeCun et al. (1998b); Wiesler & Ney (2011) that the network training converges faster if its inputs are whitened \u2013 i.e., linearly transformed to have zero means and unit variances, and decorrelated. As each layer observes the inputs produced by the layers below, it would be advantageous to achieve the same whitening of the inputs of each layer. By whitening the inputs to each layer, we would take a step towards achieving the fixed distributions of inputs that would remove the ill effects of the internal covariate shift.\nWe could consider whitening activations at every training step or at some interval, either by modifying the network directly or by changing the parameters of the optimization algorithm to depend on the network activation values Wiesler et al. (2014); Raiko et al. (2012); Povey et al. (2014); Desjardins & Kavukcuoglu. However, if these modifications are interspersed with the optimization steps, then the gradient descent step may attempt to update the parameters in a way that requires the normalization to be updated, which reduces the effect of the gradient step. For example, consider a layer with the input u that adds the learned bias b, and normalizes the result by subtracting the mean of the activation computed over the training data: x\u0302 = x \u2212 E[x] where x = u + b, X = {x1...N} is the set of values of x over the training set, and E[x] = 1N \u2211N i=1 xi. If a gradient descent step ignores the dependence of E[x] on b, then it will update b \u2190 b + \u2206b, where \u2206b \u221d \u2212\u2202\u2113/\u2202x\u0302. Then u + (b + \u2206b) \u2212 E[u + (b + \u2206b)] = u + b \u2212 E[u + b]. Thus, the combination of the update to b and subsequent change in normalization led to no change in the output of the layer nor, consequently, the loss. As the training continues, b will grow indefinitely while the loss remains fixed. This problem can get worse if the normalization not only centers but also scales the activations. We have observed this empirically in initial experiments, where the model blows up when the normalization parameters are computed outside the gradient descent step.\nThe issue with the above approach is that the gradient descent optimization does not take into account the fact that the normalization takes place. To address this issue, we would like to ensure that, for any parameter values, the network always produces activations with the desired distribution. Doing so would allow the gradient of the loss with respect to the model parameters to account for the normalization, and for its dependence on the model parameters \u0398. Let again x be a layer input, treated as a\nvector, and X be the set of these inputs over the training data set. The normalization can then be written as a transformation\nx\u0302 = Norm(x,X )\nwhich depends not only on the given training example x but on all examples X \u2013 each of which depends on \u0398 if x is generated by another layer. For backpropagation, we would need to compute the Jacobians\n\u2202Norm(x,X ) \u2202x and \u2202Norm(x,X ) \u2202X ;\nignoring the latter term would lead to the explosion described above.\nWithin this framework, whitening the layer inputs is complicated. One reason is that it would require a computation of covariance matrices over the training data; this would be hard to accomplish in a stochastic gradient descent setup. A more fundamental problem is that the normalization Norm(x,X ) would include the computation of the Singular Value Decomposition of X , which is not a continuous function of X O\u2019Neil (2005). So, \u2202Norm(x,X )\u2202X cannot be computed everywhere \u2013 and is expensive to compute where it can be. This motivates us to seek an alternative that performs input normalization in a way that is differentiable and does not require the analysis of the entire training set after every parameter update.\nSome of the previous approaches (e.g. Lyu & Simoncelli (2008)) use statistics computed over a single training example, or, in the case of image networks, over different feature maps at a given location. However, this changes the representation ability of a network by discarding the absolute scale of activations. We want to a preserve the information in the network, by normalizing the activations in a training example relative to the statistics of the entire training data."}, {"heading": "3 Normalization via Mini-Batch Statistics", "text": "Since the full whitening of each layer\u2019s inputs is costly and not everywhere differentiable, we make two necessary simplifications. The first is that instead of whitening the features in layer inputs and outputs jointly, we will normalize each scalar feature independently, by making it have the mean of zero and the variance of 1. For a layer with d-dimensional input x = (x(1) . . . x(d)), we will normalize each dimension\nx\u0302(k) = x(k) \u2212 E[x(k)]\u221a\nVar[x(k)]\nwhere the expectation and variance are computed over the training data set. As shown in LeCun et al. (1998b), such normalization speeds up convergence, even when the features are not decorrelated.\nNote that simply normalizing each input of a layer may change what the layer can represent. For instance, normalizing the inputs of a sigmoid would constrain them to the linear regime of the nonlinearity. To address this, we make sure that the transformation inserted in the network can represent the identity transform. To accomplish this, we introduce, for each activation x(k), a pair of parameters \u03b3(k), \u03b2(k), which scale and shift the normalized value:\ny(k) = \u03b3(k)x\u0302(k) + \u03b2(k).\nThese parameters are learned along with the original model parameters, and restore the representation power of the network. Indeed, by setting \u03b3(k) = \u221a Var[x(k)] and \u03b2(k) = E[x(k)], we could recover the original activations, if that were the optimal thing to do.\nIn the batch setting where each training step is based on the entire training set, we would use the whole set to normalize activations. However, this is impractical when using stochastic optimization. Therefore, we make the second simplification: since we use mini-batches in stochastic gradient training, each mini-batch produces estimates of the mean and variance of each activation. This way, the statistics used for normalization can fully participate in the gradient backpropagation.\nConsider a mini-batch B of size m. Since the normalization is applied to each activation independently, let us focus on a particular activation x(k) and omit k for clarity. We have m values of this activation in the mini-batch,\nB = {x1...m}.\nLet the normalized values be x\u03021...m, and their linear transformations be y1...m. We refer to the transform\nBN\u03b3,\u03b2 : x1...m \u2192 y1...m as the Batch Normalizing Transform. We present the BN Transform in Algorithm 1. In the algorithm, \u01eb is a constant added to the mini-batch variance for numerical stability.\nInput: Values of x over a mini-batch: B = {x1...m}; Parameters to be learned: \u03b3, \u03b2 Output: {yi = BN\u03b3,\u03b2(xi)}\n\u00b5B \u2190 1\nm\nm\u2211\ni=1\nxi // mini-batch mean\n\u03c32B \u2190 1\nm\nm\u2211\ni=1\n(xi \u2212 \u00b5B)2 // mini-batch variance\nx\u0302i \u2190 xi \u2212 \u00b5B\u221a \u03c32 B + \u01eb\n// normalize\nyi \u2190 \u03b3x\u0302i + \u03b2 \u2261 BN\u03b3,\u03b2(xi) // scale and shift\nAlgorithm 1: Batch Normalizing Transform, applied to activation x over a mini-batch.\nThe BN transform can be added to a network to manipulate any activation. In the notation y = BN\u03b3,\u03b2(x), we\nindicate that the parameters \u03b3 and \u03b2 are to be learned, but it should be noted that the BN transform does not independently process the activation in each training example. Rather, BN\u03b3,\u03b2(x) depends both on the training example and the other examples in the mini-batch. The scaled and shifted values y are passed to other network layers. The normalized activations x\u0302 are internal to our transformation, but their presence is crucial. The distributions of values of any x\u0302 has the expected value of 0 and the variance of 1, as long as the elements of each mini-batch are sampled from the same distribution, and if we neglect \u01eb. This can be seen by observing that\u2211m\ni=1 x\u0302i = 0 and 1 m \u2211m i=1 x\u0302 2 i = 1, and taking expectations. Each normalized activation x\u0302(k) can be viewed as an input to a sub-network composed of the linear transform y(k) = \u03b3(k)x\u0302(k) + \u03b2(k), followed by the other processing done by the original network. These sub-network inputs all have fixed means and variances, and although the joint distribution of these normalized x\u0302(k) can change over the course of training, we expect that the introduction of normalized inputs accelerates the training of the sub-network and, consequently, the network as a whole.\nDuring training we need to backpropagate the gradient of loss \u2113 through this transformation, as well as compute the gradients with respect to the parameters of the BN transform. We use chain rule, as follows (before simplification):\n\u2202\u2113 \u2202x\u0302i = \u2202\u2113\u2202yi \u00b7 \u03b3 \u2202\u2113 \u2202\u03c32\nB\n= \u2211m\ni=1 \u2202\u2113 \u2202x\u0302i \u00b7 (xi \u2212 \u00b5B) \u00b7 \u221212 (\u03c32B + \u01eb)\u22123/2\n\u2202\u2113 \u2202\u00b5B = (\u2211m i=1 \u2202\u2113 \u2202x\u0302i \u00b7 \u22121\u221a\n\u03c32 B +\u01eb\n) + \u2202\u2113\n\u2202\u03c32 B\n\u00b7 \u2211 m i=1 \u22122(xi\u2212\u00b5B)\nm\n\u2202\u2113 \u2202xi = \u2202\u2113\u2202x\u0302i \u00b7 1\u221a \u03c32 B +\u01eb + \u2202\u2113 \u2202\u03c32 B \u00b7 2(xi\u2212\u00b5B)m + \u2202\u2113\u2202\u00b5B \u00b7 1 m\n\u2202\u2113 \u2202\u03b3 = \u2211m i=1 \u2202\u2113 \u2202yi \u00b7 x\u0302i \u2202\u2113 \u2202\u03b2 = \u2211m i=1 \u2202\u2113 \u2202yi\nThus, BN transform is a differentiable transformation that introduces normalized activations into the network. This ensures that as the model is training, layers can continue learning on input distributions that exhibit less internal covariate shift, thus accelerating the training. Furthermore, the learned affine transform applied to these normalized activations allows the BN transform to represent the identity transformation and preserves the network capacity."}, {"heading": "3.1 Training and Inference with BatchNormalized Networks", "text": "To Batch-Normalize a network, we specify a subset of activations and insert the BN transform for each of them, according to Alg. 1. Any layer that previously received x as the input, now receives BN(x). A model employing Batch Normalization can be trained using batch gradient descent, or Stochastic Gradient Descent with a mini-batch size m > 1, or with any of its variants such as Adagrad\nDuchi et al. (2011). The normalization of activations that depends on the mini-batch allows efficient training, but is neither necessary nor desirable during inference; we want the output to depend only on the input, deterministically. For this, once the network has been trained, we use the normalization\nx\u0302 = x\u2212 E[x]\u221a Var[x] + \u01eb\nusing the population, rather than mini-batch, statistics. Neglecting \u01eb, these normalized activations have the same mean 0 and variance 1 as during training. We use the unbiased variance estimate Var[x] = mm\u22121 \u00b7 EB[\u03c32B], where the expectation is over training mini-batches of size m and \u03c32 B\nare their sample variances. Using moving averages instead, we can track the accuracy of a model as it trains. Since the means and variances are fixed during inference, the normalization is simply a linear transform applied to each activation. It may further be composed with the scaling by \u03b3 and shift by \u03b2, to yield a single linear transform that replaces BN(x). Algorithm 2 summarizes the procedure for training batch-normalized networks.\nInput: Network N with trainable parameters \u0398; subset of activations {x(k)}Kk=1 Output: Batch-normalized network for inference, NinfBN 1: NtrBN \u2190 N // Training BN network 2: for k = 1 . . .K do 3: Add transformation y(k) = BN\u03b3(k),\u03b2(k)(x\n(k)) to NtrBN (Alg. 1)\n4: Modify each layer in NtrBN with input x (k) to take y(k) instead 5: end for 6: Train NtrBN to optimize the parameters \u0398 \u222a {\u03b3(k), \u03b2(k)}Kk=1 7: NinfBN \u2190 NtrBN // Inference BN network with frozen // parameters\n8: for k = 1 . . .K do 9: // For clarity, x \u2261 x(k), \u03b3 \u2261 \u03b3(k), \u00b5B \u2261 \u00b5(k)B , etc.\n10: Process multiple training mini-batches B, each of size m, and average over them:\nE[x]\u2190 EB[\u00b5B] Var[x]\u2190 mm\u22121EB[\u03c32B]\n11: In NinfBN, replace the transform y = BN\u03b3,\u03b2(x) with y = \u03b3\u221a\nVar[x]+\u01eb \u00b7 x+\n( \u03b2 \u2212 \u03b3 E[x]\u221a\nVar[x]+\u01eb\n)\n12: end for\nAlgorithm 2: Training a Batch-Normalized Network"}, {"heading": "3.2 Batch-Normalized Convolutional Networks", "text": "Batch Normalization can be applied to any set of activations in the network. Here, we focus on transforms\nthat consist of an affine transformation followed by an element-wise nonlinearity:\nz = g(Wu + b)\nwhere W and b are learned parameters of the model, and g(\u00b7) is the nonlinearity such as sigmoid or ReLU. This formulation covers both fully-connected and convolutional layers. We add the BN transform immediately before the nonlinearity, by normalizing x = Wu+b. We could have also normalized the layer inputs u, but since u is likely the output of another nonlinearity, the shape of its distribution is likely to change during training, and constraining its first and second moments would not eliminate the covariate shift. In contrast, Wu + b is more likely to have a symmetric, non-sparse distribution, that is \u201cmore Gaussian\u201d Hyva\u0308rinen & Oja (2000); normalizing it is likely to produce activations with a stable distribution.\nNote that, since we normalizeWu+b, the bias b can be ignored since its effect will be canceled by the subsequent mean subtraction (the role of the bias is subsumed by \u03b2 in Alg. 1). Thus, z = g(Wu + b) is replaced with\nz = g(BN(Wu))\nwhere the BN transform is applied independently to each dimension of x = Wu, with a separate pair of learned parameters \u03b3(k), \u03b2(k) per dimension.\nFor convolutional layers, we additionally want the normalization to obey the convolutional property \u2013 so that different elements of the same feature map, at different locations, are normalized in the same way. To achieve this, we jointly normalize all the activations in a minibatch, over all locations. In Alg. 1, we let B be the set of all values in a feature map across both the elements of a mini-batch and spatial locations \u2013 so for a mini-batch of size m and feature maps of size p \u00d7 q, we use the effective mini-batch of size m\u2032 = |B| = m \u00b7 p q. We learn a pair of parameters \u03b3(k) and \u03b2(k) per feature map, rather than per activation. Alg. 2 is modified similarly, so that during inference the BN transform applies the same linear transformation to each activation in a given feature map."}, {"heading": "3.3 Batch Normalization enables higher", "text": "learning rates\nIn traditional deep networks, too-high learning rate may result in the gradients that explode or vanish, as well as getting stuck in poor local minima. Batch Normalization helps address these issues. By normalizing activations throughout the network, it prevents small changes to the parameters from amplifying into larger and suboptimal changes in activations in gradients; for instance, it prevents the training from getting stuck in the saturated regimes of nonlinearities.\nBatch Normalization also makes training more resilient to the parameter scale. Normally, large learning rates may increase the scale of layer parameters, which then amplify\nthe gradient during backpropagation and lead to the model explosion. However, with Batch Normalization, backpropagation through a layer is unaffected by the scale of its parameters. Indeed, for a scalar a,\nBN(Wu) = BN((aW )u)\nand we can show that\n\u2202BN((aW )u) \u2202u = \u2202BN(Wu) \u2202u \u2202BN((aW )u) \u2202(aW ) = 1 a \u00b7 \u2202BN(Wu) \u2202W\nThe scale does not affect the layer Jacobian nor, consequently, the gradient propagation. Moreover, larger weights lead to smaller gradients, and Batch Normalization will stabilize the parameter growth.\nWe further conjecture that Batch Normalization may lead the layer Jacobians to have singular values close to 1, which is known to be beneficial for training Saxe et al. (2013). Consider two consecutive layers with normalized inputs, and the transformation between these normalized vectors: z\u0302 = F (x\u0302). If we assume that x\u0302 and z\u0302 are Gaussian and uncorrelated, and that F (x\u0302) \u2248 J x\u0302 is a linear transformation for the given model parameters, then both x\u0302 and z\u0302 have unit covariances, and I = Cov[\u0302z] = JCov[x\u0302]JT = JJT . Thus, JJT = I , and so all singular values of J are equal to 1, which preserves the gradient magnitudes during backpropagation. In reality, the transformation is not linear, and the normalized values are not guaranteed to be Gaussian nor independent, but we nevertheless expect Batch Normalization to help make gradient propagation better behaved. The precise effect of Batch Normalization on gradient propagation remains an area of further study."}, {"heading": "3.4 Batch Normalization regularizes the model", "text": "When training with Batch Normalization, a training example is seen in conjunction with other examples in the mini-batch, and the training network no longer producing deterministic values for a given training example. In our experiments, we found this effect to be advantageous to the generalization of the network. Whereas Dropout Srivastava et al. (2014) is typically used to reduce overfitting, in a batch-normalized network we found that it can be either removed or reduced in strength."}, {"heading": "4 Experiments", "text": ""}, {"heading": "4.1 Activations over time", "text": "To verify the effects of internal covariate shift on training, and the ability of Batch Normalization to combat it, we considered the problem of predicting the digit class on the MNIST dataset LeCun et al. (1998a). We used a very simple network, with a 28x28 binary image as input, and\n3 fully-connected hidden layers with 100 activations each. Each hidden layer computes y = g(Wu+b) with sigmoid nonlinearity, and the weights W initialized to small random Gaussian values. The last hidden layer is followed by a fully-connected layer with 10 activations (one per class) and cross-entropy loss. We trained the network for 50000 steps, with 60 examples per mini-batch. We added Batch Normalization to each hidden layer of the network, as in Sec. 3.1. We were interested in the comparison between the baseline and batch-normalized networks, rather than achieving the state of the art performance on MNIST (which the described architecture does not).\nFigure 1(a) shows the fraction of correct predictions by the two networks on held-out test data, as training progresses. The batch-normalized network enjoys the higher test accuracy. To investigate why, we studied inputs to the sigmoid, in the original network N and batchnormalized network NtrBN (Alg. 2) over the course of training. In Fig. 1(b,c) we show, for one typical activation from the last hidden layer of each network, how its distribution evolves. The distributions in the original network change significantly over time, both in their mean and the variance, which complicates the training of the subsequent layers. In contrast, the distributions in the batchnormalized network are much more stable as training progresses, which aids the training."}, {"heading": "4.2 ImageNet classification", "text": "We applied Batch Normalization to a new variant of the Inception network Szegedy et al. (2014), trained on the ImageNet classification task Russakovsky et al. (2014). The network has a large number of convolutional and pooling layers, with a softmax layer to predict the image class, out of 1000 possibilities. Convolutional layers use ReLU as the nonlinearity. The main difference to the network described in Szegedy et al. (2014) is that the 5 \u00d7 5 convolutional layers are replaced by two consecutive layers of 3 \u00d7 3 convolutions with up to 128 filters. The network contains 13.6 \u00b7 106 parameters, and, other than the top softmax layer, has no fully-connected layers. More\ndetails are given in the Appendix. We refer to this model as Inception in the rest of the text. The model was trained using a version of Stochastic Gradient Descent with momentum Sutskever et al. (2013), using the mini-batch size of 32. The training was performed using a large-scale, distributed architecture (similar to Dean et al. (2012)). All networks are evaluated as training progresses by computing the validation accuracy @1, i.e. the probability of predicting the correct label out of 1000 possibilities, on a held-out set, using a single crop per image.\nIn our experiments, we evaluated several modifications of Inception with Batch Normalization. In all cases, Batch Normalization was applied to the input of each nonlinearity, in a convolutional way, as described in section 3.2, while keeping the rest of the architecture constant."}, {"heading": "4.2.1 Accelerating BN Networks", "text": "Simply adding Batch Normalization to a network does not take full advantage of our method. To do so, we further changed the network and its training parameters, as follows:\nIncrease learning rate. In a batch-normalized model, we have been able to achieve a training speedup from higher learning rates, with no ill side effects (Sec. 3.3).\nRemove Dropout. As described in Sec. 3.4, Batch Normalization fulfills some of the same goals as Dropout. Removing Dropout from Modified BN-Inception speeds up training, without increasing overfitting.\nReduce the L2 weight regularization. While in Inception an L2 loss on the model parameters controls overfitting, in Modified BN-Inception the weight of this loss is reduced by a factor of 5. We find that this improves the accuracy on the held-out validation data.\nAccelerate the learning rate decay. In training Inception, learning rate was decayed exponentially. Because our network trains faster than Inception, we lower the learning rate 6 times faster.\nRemove Local Response Normalization While Inception and other networks Srivastava et al. (2014) benefit from it, we found that with Batch Normalization it is not necessary.\nShuffle training examples more thoroughly. We enabled within-shard shuffling of the training data, which prevents the same examples from always appearing in a mini-batch together. This led to about 1% improvements in the validation accuracy, which is consistent with the view of Batch Normalization as a regularizer (Sec. 3.4): the randomization inherent in our method should be most beneficial when it affects an example differently each time it is seen.\nReduce the photometric distortions. Because batchnormalized networks train faster and observe each training example fewer times, we let the trainer focus on more \u201creal\u201d images by distorting them less."}, {"heading": "4.2.2 Single-Network Classification", "text": "We evaluated the following networks, all trained on the LSVRC2012 training data, and tested on the validation data:\nInception: the network described at the beginning of Section 4.2, trained with the initial learning rate of 0.0015.\nBN-Baseline: Same as Inception with Batch Normalization before each nonlinearity.\nBN-x5: Inception with Batch Normalization and the modifications in Sec. 4.2.1. The initial learning rate was increased by a factor of 5, to 0.0075. The same learning rate increase with original Inception caused the model parameters to reach machine infinity.\nBN-x30: Like BN-x5, but with the initial learning rate 0.045 (30 times that of Inception).\nBN-x5-Sigmoid: Like BN-x5, but with sigmoid nonlinearity g(t) = 11+exp(\u2212x) instead of ReLU. We also attempted to train the original Inception with sigmoid, but the model remained at the accuracy equivalent to chance.\nIn Figure 2, we show the validation accuracy of the networks, as a function of the number of training steps. Inception reached the accuracy of 72.2% after 31 \u00b7 106 training steps. The Figure 3 shows, for each network, the number of training steps required to reach the same 72.2% accuracy, as well as the maximum validation accuracy reached by the network and the number of steps to reach it.\nBy only using Batch Normalization (BN-Baseline), we match the accuracy of Inception in less than half the number of training steps. By applying the modifications in Sec. 4.2.1, we significantly increase the training speed of the network. BN-x5 needs 14 times fewer steps than Inception to reach the 72.2% accuracy. Interestingly, increasing the learning rate further (BN-x30) causes the model to train somewhat slower initially, but allows it to reach a higher final accuracy. It reaches 74.8% after 6\u00b7106 steps, i.e. 5 times fewer steps than required by Inception to reach 72.2%.\nWe also verified that the reduction in internal covariate shift allows deep networks with Batch Normalization\nto be trained when sigmoid is used as the nonlinearity, despite the well-known difficulty of training such networks. Indeed, BN-x5-Sigmoid achieves the accuracy of 69.8%. Without Batch Normalization, Inception with sigmoid never achieves better than 1/1000 accuracy."}, {"heading": "4.2.3 Ensemble Classification", "text": "The current reported best result on the ImageNet Large Scale Visual Recognition Competition is reached by the Deep Image ensemble of traditional models Wu et al. (2015). Here we report a top-5 validation error of 4.9% (and 4.82% on the test set), which improves upon the previous best result despite using 15X fewer parameters and lower resolution receptive field. Our system exceeds the estimated accuracy of human raters according to Russakovsky et al. (2014).\nFor our ensemble, we used 6 networks. Each was based on BN-x30, modified via some of the following: increased initial weights in the convolutional layers; using Dropout (with the Dropout probability of 5% or 10%, vs. 40% for the original Inception); and using non-convolutional, per-activation Batch Normalization with last hidden layers of the model. Each network achieved its maximum accuracy after about 6 \u00b7 106 training steps. The ensemble prediction was based on the arithmetic average of class probabilities predicted by the constituent networks. The details of ensemble and multicrop inference are similar to Szegedy et al. (2014).\nWe demonstrate in Fig. 4 that batch normalization allows us to set new state-of-the-art by a healthy margin on the ImageNet classification challenge benchmarks."}, {"heading": "5 Conclusion", "text": "We have presented a novel mechanism for dramatically accelerating the training of deep networks. It is based on the premise that covariate shift, which is known to complicate the training of machine learning systems, also applies to sub-networks and layers, and removing it from\ninternal activations of the network may aid in training. Our proposed method draws its power from normalizing activations, and from incorporating this normalization in the network architecture itself. This ensures that the normalization is appropriately handled by any optimization method that is being used to train the network. To enable stochastic optimization methods commonly used in deep network training, we perform the normalization for each mini-batch, and backpropagate the gradients through the normalization parameters. Batch Normalization adds only two extra parameters per activation, and in doing so preserves the representation ability of the network. We presented an algorithm for constructing, training, and performing inference with batch-normalized networks. The resulting networks can be trained with saturating nonlinearities, are more tolerant to increased training rates, and often do not require Dropout for regularization.\nMerely adding Batch Normalization to a state-of-theart image classification model yields a substantial speedup in training. By further increasing the learning rates, removing Dropout, and applying other modifications afforded by Batch Normalization, we reach the previous state of the art with only a small fraction of training steps \u2013 and then beat the state of the art in single-network image classification. Furthermore, by combining multiple models trained with Batch Normalization, we perform better than the best known system on ImageNet, by a significant margin.\nIn this work, we have not explored the full range of possibilities that Batch Normalization potentially enables. Our future work includes applications of our method to Recurrent Neural Networks Pascanu et al. (2013), where the internal covariate shift and the vanishing or exploding gradients may be especially severe, and which would allow us to more thoroughly test the hypothesis that normalization improves gradient propagation (Sec. 3.3). We plan to investigate whether Batch Normalization can help with domain adaptation, in its traditional sense \u2013 i.e. whether the normalization performed by the network would allow it to more easily generalize to new data distributions, perhaps with just a recomputation of the population means and variances (Alg. 2). Finally, we believe that further theoretical analysis of the algorithm would allow still\nmore improvements and applications."}], "references": [{"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["Bengio", "Yoshua", "Glorot", "Xavier"], "venue": "In Proceedings of AISTATS 2010,", "citeRegEx": "Bengio et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2010}, {"title": "Large scale distributed deep networks", "author": ["Dean", "Jeffrey", "Corrado", "Greg S", "Monga", "Rajat", "Chen", "Kai", "Devin", "Matthieu", "Le", "Quoc V", "Mao", "Mark Z", "Ranzato", "Marc\u2019Aurelio", "Senior", "Andrew", "Tucker", "Paul", "Yang", "Ke", "Ng", "Andrew Y"], "venue": "In NIPS,", "citeRegEx": "Dean et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Dean et al\\.", "year": 2012}, {"title": "Adaptive subgradient methods for online learning and stochastic optimization", "author": ["Duchi", "John", "Hazan", "Elad", "Singer", "Yoram"], "venue": "J. Mach. Learn. Res.,", "citeRegEx": "Duchi et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Duchi et al\\.", "year": 2011}, {"title": "Independent component analysis: Algorithms and applications", "author": ["A. Hyv\u00e4rinen", "E. Oja"], "venue": "Neural Netw.,", "citeRegEx": "Hyv\u00e4rinen and Oja,? \\Q2000\\E", "shortCiteRegEx": "Hyv\u00e4rinen and Oja", "year": 2000}, {"title": "A literature survey on domain adaptation of statistical classifiers", "author": ["Jiang", "Jing"], "venue": null, "citeRegEx": "Jiang and Jing.,? \\Q2008\\E", "shortCiteRegEx": "Jiang and Jing.", "year": 2008}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Efficient backprop", "author": ["Y. LeCun", "L. Bottou", "G. Orr", "K. Muller"], "venue": "Neural Networks: Tricks of the trade. Springer,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Nonlinear image representation using divisive normalization", "author": ["S Lyu", "Simoncelli", "E P"], "venue": "In Proc. Computer Vision and Pattern Recognition,", "citeRegEx": "Lyu et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Lyu et al\\.", "year": 2008}, {"title": "Rectified linear units improve restricted boltzmann machines", "author": ["Nair", "Vinod", "Hinton", "Geoffrey E"], "venue": "In ICML,", "citeRegEx": "Nair et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Nair et al\\.", "year": 2010}, {"title": "Critical points of the singular value decomposition", "author": ["O\u2019Neil", "Kevin A"], "venue": "SIAM J. Matrix Analysis Applications,", "citeRegEx": "O.Neil and A.,? \\Q2005\\E", "shortCiteRegEx": "O.Neil and A.", "year": 2005}, {"title": "On the difficulty of training recurrent neural networks", "author": ["Pascanu", "Razvan", "Mikolov", "Tomas", "Bengio", "Yoshua"], "venue": "In Proceedings of the 30th International Conference on Machine Learning,", "citeRegEx": "Pascanu et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Pascanu et al\\.", "year": 2013}, {"title": "Parallel training of deep neural networks with natural gradient and parameter averaging", "author": ["Povey", "Daniel", "Zhang", "Xiaohui", "Khudanpur", "Sanjeev"], "venue": "CoRR, abs/1410.7455,", "citeRegEx": "Povey et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Povey et al\\.", "year": 2014}, {"title": "Deep learning made easier by linear transformations in perceptrons", "author": ["Raiko", "Tapani", "Valpola", "Harri", "LeCun", "Yann"], "venue": "In International Conference on Artificial Intelligence and Statistics (AISTATS),", "citeRegEx": "Raiko et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Raiko et al\\.", "year": 2012}, {"title": "Exact solutions to the nonlinear dynamics of learning in deep linear neural networks", "author": ["Saxe", "Andrew M", "McClelland", "James L", "Ganguli", "Surya"], "venue": "CoRR, abs/1312.6120,", "citeRegEx": "Saxe et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Saxe et al\\.", "year": 2013}, {"title": "Improving predictive inference under covariate shift by weighting the log-likelihood function", "author": ["Shimodaira", "Hidetoshi"], "venue": "Journal of Statistical Planning and Inference,", "citeRegEx": "Shimodaira and Hidetoshi.,? \\Q2000\\E", "shortCiteRegEx": "Shimodaira and Hidetoshi.", "year": 2000}, {"title": "Dropout: A simple way to prevent neural networks from overfitting", "author": ["Srivastava", "Nitish", "Hinton", "Geoffrey", "Krizhevsky", "Alex", "Sutskever", "Ilya", "Salakhutdinov", "Ruslan"], "venue": "J. Mach. Learn. Res.,", "citeRegEx": "Srivastava et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 2014}, {"title": "On the importance of initialization and momentum in deep learning", "author": ["Sutskever", "Ilya", "Martens", "James", "Dahl", "George E", "Hinton", "Geoffrey E"], "venue": "In ICML (3),", "citeRegEx": "Sutskever et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2013}, {"title": "Mean-normalized stochastic gradient for large-scale deep learning", "author": ["Wiesler", "Simon", "Richard", "Alexander", "Schl\u00fcter", "Ralf", "Ney", "Hermann"], "venue": "Neural Information Processing Systems", "citeRegEx": "Wiesler et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Wiesler et al\\.", "year": 2011}, {"title": "The notable architecture changes compared to the GoogLeNet model", "author": ["table", "please consult Szegedy"], "venue": null, "citeRegEx": "table and Szegedy,? \\Q2014\\E", "shortCiteRegEx": "table and Szegedy", "year": 2014}], "referenceMentions": [{"referenceID": 15, "context": "Stochastic gradient descent (SGD) has proved to be an effective way of training deep networks, and SGD variants such as momentum Sutskever et al. (2013) and Adagrad Duchi et al.", "startOffset": 129, "endOffset": 153}, {"referenceID": 2, "context": "(2013) and Adagrad Duchi et al. (2011) have been used to achieve state of the art performance.", "startOffset": 19, "endOffset": 39}, {"referenceID": 13, "context": "In practice, the saturation problem and the resulting vanishing gradients are usually addressed by using Rectified Linear Units Nair & Hinton (2010) ReLU(x) = max(x, 0), careful initialization Bengio & Glorot (2010); Saxe et al. (2013), and small learning rates.", "startOffset": 217, "endOffset": 236}, {"referenceID": 15, "context": "Furthermore, batch normalization regularizes the model and reduces the need for Dropout Srivastava et al. (2014). Finally, Batch Normalization makes it possible to use saturating nonlinearities by preventing the network from getting stuck in the saturated modes.", "startOffset": 88, "endOffset": 113}, {"referenceID": 5, "context": "It has been long known LeCun et al. (1998b); Wiesler & Ney (2011) that the network training converges faster if its inputs are whitened \u2013 i.", "startOffset": 23, "endOffset": 44}, {"referenceID": 5, "context": "It has been long known LeCun et al. (1998b); Wiesler & Ney (2011) that the network training converges faster if its inputs are whitened \u2013 i.", "startOffset": 23, "endOffset": 66}, {"referenceID": 15, "context": "We could consider whitening activations at every training step or at some interval, either by modifying the network directly or by changing the parameters of the optimization algorithm to depend on the network activation values Wiesler et al. (2014); Raiko et al.", "startOffset": 228, "endOffset": 250}, {"referenceID": 11, "context": "(2014); Raiko et al. (2012); Povey et al.", "startOffset": 8, "endOffset": 28}, {"referenceID": 11, "context": "(2012); Povey et al. (2014); Desjardins & Kavukcuoglu.", "startOffset": 8, "endOffset": 28}, {"referenceID": 5, "context": "As shown in LeCun et al. (1998b), such normalization speeds up convergence, even when the features are not decorrelated.", "startOffset": 12, "endOffset": 33}, {"referenceID": 2, "context": "A model employing Batch Normalization can be trained using batch gradient descent, or Stochastic Gradient Descent with a mini-batch size m > 1, or with any of its variants such as Adagrad Duchi et al. (2011). The normalization of activations that depends on the mini-batch allows efficient training, but is neither necessary nor desirable during inference; we want the output to depend only on the input, deterministically.", "startOffset": 188, "endOffset": 208}, {"referenceID": 13, "context": "We further conjecture that Batch Normalization may lead the layer Jacobians to have singular values close to 1, which is known to be beneficial for training Saxe et al. (2013). Consider two consecutive layers with normalized inputs, and the transformation between these normalized vectors: \u1e91 = F (x\u0302).", "startOffset": 157, "endOffset": 176}, {"referenceID": 15, "context": "Whereas Dropout Srivastava et al. (2014) is typically used to reduce overfitting, in a batch-normalized network we found that it can be either removed or reduced in strength.", "startOffset": 16, "endOffset": 41}, {"referenceID": 5, "context": "To verify the effects of internal covariate shift on training, and the ability of Batch Normalization to combat it, we considered the problem of predicting the digit class on the MNIST dataset LeCun et al. (1998a). We used a very simple network, with a 28x28 binary image as input, and", "startOffset": 193, "endOffset": 214}, {"referenceID": 15, "context": "The model was trained using a version of Stochastic Gradient Descent with momentum Sutskever et al. (2013), using the mini-batch size of 32.", "startOffset": 83, "endOffset": 107}, {"referenceID": 1, "context": "The training was performed using a large-scale, distributed architecture (similar to Dean et al. (2012)).", "startOffset": 85, "endOffset": 104}, {"referenceID": 15, "context": "Remove Local Response Normalization While Inception and other networks Srivastava et al. (2014) benefit from it, we found that with Batch Normalization it is not necessary.", "startOffset": 71, "endOffset": 96}, {"referenceID": 10, "context": "Our future work includes applications of our method to Recurrent Neural Networks Pascanu et al. (2013), where the internal covariate shift and the vanishing or exploding gradients may be especially severe, and which would allow us to more thoroughly test the hypothesis that normalization improves gradient propagation (Sec.", "startOffset": 81, "endOffset": 103}], "year": 2015, "abstractText": "Training Deep Neural Networks is complicated by the fact that the distribution of each layer\u2019s inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization, and makes it notoriously hard to train models with saturating nonlinearities. We refer to this phenomenon as internal covariate shift, and address the problem by normalizing layer inputs. Our method draws its strength from making normalization a part of the model architecture and performing the normalization for each training mini-batch. Batch Normalization allows us to use much higher learning rates and be less careful about initialization. It also acts as a regularizer, in some cases eliminating the need for Dropout. Applied to a state-of-the-art image classification model, Batch Normalization achieves the same accuracy with 14 times fewer training steps, and beats the original model by a significant margin. Using an ensemble of batchnormalized networks, we improve upon the best published result on ImageNet classification: reaching 4.9% top-5 validation error (and 4.8% test error), exceeding the accuracy of human raters.", "creator": "LaTeX with hyperref package"}}}