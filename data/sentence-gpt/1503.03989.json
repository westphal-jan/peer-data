{"id": "1503.03989", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-Mar-2015", "title": "An implementation of Apertium based Assamese morphological analyzer", "abstract": "Morphological Analysis is an important branch of linguistics for any Natural Language Processing Technology. Morphology studies the word structure and formation of word of a language. In current scenario of NLP research, morphological analysis techniques have become more popular day by day.\n\n\n\n\nNLP has been widely used as a research tool. Its purpose is to identify the language in terms of how it is used and when to express. In the United States, the NLP team has successfully identified the language for about 500 languages, with the majority of them in the United States.\nThe National Language Research Council (NLRB) is the primary official source of information.", "histories": [["v1", "Fri, 13 Mar 2015 09:03:21 GMT  (464kb)", "http://arxiv.org/abs/1503.03989v1", null]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["mirzanur rahman", "shikhar kumar sarma"], "accepted": false, "id": "1503.03989"}, "pdf": {"name": "1503.03989.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["APERTIUM BASED ASSAMESE", "MORPHOLOGICAL ANALYZER", "Mirzanur Rahman", "Shikhar Kumar Sarma"], "emails": [], "sections": [{"heading": null, "text": "DOI : 10.5121/ijnlc.2015.4102 23\nTechnology. Morphology studies the word structure and formation of word of a language. In current scenario of NLP research, morphological analysis techniques have become more popular day by day. For processing any language, morphology of the word should be first analyzed. Assamese language contains very complex morphological structure. In our work we have used Apertium based Finite-State-Transducers for developing morphological analyzer for Assamese Language with some limited domain and we get 72.7% accuracy\nKEYWORDS Assamese Language, Morphology, Natural Language Processing, FST\n1.INTRODUCTION Assamese is the major language spoken in Assam. The state Assam is the north \u2013eastern part of the country. Assamese Language served as a bridge language among different speech communities in the whole area of the state. The language Assamese is an Indo-Aryan language originated from Vedic dialects [1]. The language as it stands today, passes through tremendous modifications in all the component viz. phonology, morphology, conjunction etc. There are two variations of Assamese language according to dialectical regions [2] i.e. Eastern Assamese and Western Assamese Language. Both are different in terms of phonology and morphology. But still the written text is same for all the regions.\nMorphology is an important component of any language. So, before any processing, we must first analyze the morphology of the words of that language. In language processing technology such as Machine Translation [15], Parsing, POS Tagger, Text summarization etc requires morphological analyzers to find out the lexical component of a word. And lexical components are the very important parts of a grammar of a language.\nIn our work we have considered only the standard written Assamese Text corpus and use Apertium engine with Lttoolbox to build morphological analyzer for Assamese language. In this paper we have discuss how we proceed towards developing morphological analyzer."}, {"heading": "2. MORPHOLOGY OF A LANGUAGE", "text": "In Language Technology research, morphological analysis studies the structure of words and word formation of a language.\nWords in a language can be divided into many small units which are known as morpheme [10]. Recognizing different morpheme in a word with their lexical properties is known as morphological analysis. For example in English language\n Girls=Girl +s\no Root : Girl (category- noun) o Affix: \u201es\u201f (indefinite plural marker)\nIn the above example the word \u201cGirls\u201d is a combination of \u201cGirl\u201d morpheme and \u201cs\u201d morpheme. When we analyze a word with morphological analyzer, it should provide all the combination of morpheme with their lexical properties.\nAccording to Golockchandra Goswami [1], all the morphemes of Assamese Language can be divided in to three categories.\no Root Morpheme o Sub- Root Morpheme o Affixes Morpheme\nRoot morphemes are the main morpheme depending on which all the morphological construction is done and affixes are attached. Root morpheme may be categorize into other Parts-of-speech category like noun, pronoun, verb, indeclinable etc.\nFor example in Assamese Language:\n \u09b2\u2019\u09f0\u09be\u099c\u09a8 = \u09b2\u2019\u09f0\u09be + \u099c\u09a8 o Root: \u09b2\u2019\u09f0\u09be (Category -Noun) o Affix: \u099c\u09a8 (Definite Article, singular case marker)\nSub-root morphemes are the morpheme which can occur as an independent root as well as a suffix in an Assamese sentence.\nFor example:\n \u0996\u09a8, \u099c\u09a8 \u09a1\u09be\u09b2 etc. can be used as a root word or as a suffix for singular definitive o \u09ae\u09be\u09a8\u09b9\u09c1\u099c\u09a8 \u09ac\u09f0 \u09ad\u09be\u09b2 (\u201c\u099c\u09a8\u201d is used as a singular suffix marker) o \u09ae\u09ae\u09be\u09f0 \u099c\u09a8 \u0986\u09b9\u09b9\u09b2\u09b2\u09b2\u09a8? (\u201c\u099c\u09a8\u201d is used as a independent root)  \u09ae\u09ac\u09be\u09f0/\u09ae\u09ac\u09be\u09f0\u09f0, \u09b9\u09ac\u09b2\u09be\u0995 etc can be used as a root word or as a suffix for plural definitive o \u09ac\u09b8\u09cd\u09a4\u09c1\u09ae\u09ac\u09be\u09f0\u09f0 \u09a6\u09be\u09ae \u09a8\u09be\u0987\u09f7 (\u201c\u09ae\u09ac\u09be\u09f0\u09f0\u201d is used as a plural suffix marker) o \u09ae \u09be\u09ae\u09be\u09b2\u09b2\u09be\u0995\u09f0 \u09ae\u09ac\u09be\u09f0\u09f0 \u09b9\u0995 \u0996\u09ac\u09f0? (\u201c\u09ae\u09ac\u09be\u09f0\u09f0\u201d is used as a independent root)\nAffixes are always added to the root and it contains some own meaning. But they have no separate existence and can never form a free form alone or in conjunction with themselves.\nFor Example: \u098f (\u09ae\u09be\u09a8\u09b2\u09c1\u09b9), \u0995 (\u09ae\u09be\u09a8\u09b9\u09c1\u0995), \u09b2\u09b2 (\u09ae \u09be\u09ae\u09be\u09b2\u09b2),\u09b2\u0995 (\u09ad\u09be\u09b2\u09b2\u0995) etc"}, {"heading": "3. PRIOR ARTS", "text": "For Assamese language also we have found some of the reported work for morphological analysis. In this section we will try to summarize all the reported work related to Assamese morphological analysis.\n In [3], the authors have presented building Morphological Analyzers using the Suffix Stripping method for the four languages \u2013 Assamese, Bengali, Bodo and Oriya. In the\nproposed mechanism they have deals with only inflectional suffixes. The method involves identifying individual suffixes from a series of suffixes attached to a stem/root, using morpheme sequencing rules.\nIn the approach the analyzer analyses the inflected form of a word into suffixes and stems by using a root/stem dictionary (for identifying legitimate roots/stems), a list of suffixes, comprising of all possible suffixes that various categories can take (in order to identify a valid suffix), and the morpheme sequencing rules. . The authors get 50 % coverage for 7000 to 8000 root entries.\n In [4], the authors have presented A Suffix-based Noun and Verb Classifier for an Inflectional Language. In the proposed mechanism they have consider only the morpho-\nsyntactic properties of Assamese words. Assamese words can be categorized into inflected classes (noun, pronoun, adjective and verb) and un-inflected classes (adverb and particle.\n In [5], the authors describe an approach to unsupervised learning of morphology from an unannotated corpus for Assamese Language in their paper \u201cAcquisition of Morphology of\nan Indic Language from Text Corpus\u201d. In their paper they have present & elaborately discussed an unsupervised method for acquisition of Assamese morphology from a text corpus. This is the initial work towards unsupervised morphological analysis and it is very suitable for Assamese language. This approach, acquire the suffixation morphology of the language from a text corpus of about 300,000 words and build a morphological lexicon. The F-measure of the suffix acquisition is about 69%.\n In [6], the authors have presented suffix stripping approach, where they add a rule engine which generates all the possible suffix sequences for analyzing morphology of a word.\nThey got 82% accuracy with a root-word list of size 20,000 approximately with this method.\n In [7], the authors combine a rule based algorithm and HMM based algorithm. Where rule based algorithm is used for predicting multiple letter suffixes and an HMM based\nalgorithm for predicting the single letter suffixes .This added method can predict morphologically inflected words with 92% accuracy.\n In [8] Utpal Sarma proposed an unsupervised method for learning morphology of a language in his Ph.D thesis \u201cUnsupervised Learning of Morphology of a Highly\nInflectional Language\u201d"}, {"heading": "4. IMPLEMENTATION USING APERTIUM AND LTTOOLBOX", "text": "Apertium is a rule-based open-source shallow-transfer machine translation platform [11]. It is free software and released under the terms of the GNU General Public License. It includes the engine, maintenance tools, and open linguistic data for several language pairs. Lttoolbox is a toolbox for lexical processing, morphological analysis and generation of words. Lttoolbox used finite-state transducers (FST). FST are a type of finite-state automata, which may be used as one-pass morphological analyzers.\nIn Apertium, the analyzer data is stored in Apertium\u201fs dictionary (dix) format with XML syntax. The analyzer can be easily converted to a morphological generator from the single morphological database (monodix), depending on in which direction the system read the dictionary. If the system read the dictionary from left to right, we obtain the analyzer, and read from right to left, we obtain the generator. It is proven that an XML based dictionary (monodix) is generally faster than a normal text or database based dictionary.\nFor creating Morphological Analyzer, different modules of Apertium engine are required."}, {"heading": "4.1. Dictionary", "text": "An Apertium based system can use two types of dictionaries, Monolingual and Bilingual Dictionary. Monolingual dictionary is used for Morphological analyzer & generator and Bilingual dictionary is used for machine translation purpose. In our work, we use monolingual dictionary."}, {"heading": "4.2. Paradigm definitions <pardef>", "text": "A Paradigm is the complete set of related inflectional and productive derivational word forms of a given category. A paradigm can be understood as a small dictionary of alternative transformations that can be concatenated to the parts of words (or to entries of another paradigm) to specify regularities in the lexical processing of the dictionary entries, such as inflection regularities. In the definition along with the root word it contains other information like category, gender, number, person, case marker, tense etc."}, {"heading": "4.3. Element for Reference to a Paradigm", "text": "Apertium provides a lexico-semantic layer, for working with inflection of a word. The layer introduces the lexemes into derivation and concurrently follows the inflection of the derived\nlexeme. It is used inside <pardefs> entry. Main advantage of using reference paradigm is that, there is no need to write all the inflected forms of a lemma in a morphological dictionary entry because it can be referred from other paradigms."}, {"heading": "4.4. Morpheme", "text": "All the root word (morpheme) is included in the dictionary, generated for Morphological Analyzer. The dictionary is different from a conventional dictionary, because it contains other information with morpheme like lexical categories and their corresponding paradigm."}, {"heading": "4.5. Lttoolbox Modules", "text": "Lttoolbox contains three modules, lexical processing (lt-comp), morphological analysis & generation (lt-proc) and Expansion (lt-expand).\nFor Morphological analysis lt-comp and lt-proc module is required, lt-comp for processing and ltproc for generation [12]. Lt-comp module is responsible for compiling our morphological dictionaries into its own finite-sate representation and lt-comp module is responsible for processing the compiled input data into required output.\n4.5.1. Compilation:\nlt-comp module compile the given .dix format file into binary format from left to right (LR) or from right to lest (RL). When we compile with LR, it creates an analyzer and RL usually creates a generator.\nSyntax of lt-comp: $ lt-comp lr apertium-asm.morph.dix analyser.bin Compile the apertium-asm.morph.dix dictionary in a left-to-right manner into the binary analyser.bin $ lt-comp rl apertium-asm.morph.dix generator.bin\nCompile the apertium-asm.morph.dix dictionary in a right-to-left manner into the binary generator.bin\n4.5.2. Processing:\nlt-proc module contains two functions, one is analysis (which is the default mode)\nand generation. Analysis converts surface forms into the set of possible lexical forms, while generation converts a lexical form into the corresponding surface form.\nSyntax of lt-proc:\n$ echo \u201c\u099a\u0995\u09c1\u09af\u09c1\u09b9\u09f0\" | lt-proc analyser.bin Output: ^\u099a\u0995\u09c1\u09af\u09c1\u09b9\u09f0/\u099a\u0995\u09c1<n><pl>$ Here we analyze the Assamese word \u099a\u0995\u09c1\u09af\u09c1\u09b9\u09f0 (Eyes) with the binary format dictionary (left-to-right) analyser.in\n$ echo \"^\u099a\u0995\u09c1<n><pl>$\" | lt-proc -g generator.bin Output: \u099a\u0995\u09c1\u09af\u09c1\u09b9\u09f0 Here we generate the plural form of Assamese word \u099a\u0995\u09c1 (Eye) with the binary format dictionary (right-to-left) generator.bin"}, {"heading": "4.6. Meaning of Analyzers Output format", "text": ""}, {"heading": "4.7. Current Dictionary", "text": "In our current work, we have considered only limited number of word with selected Parts-ofSpeech (POS) categories. The following table shows summery of our used database entries\nAs a source of our dictionary, we have use following sources\n Assamese text corpus obtained from Language Technology Development Project, Gauhati University\n Asamiya Abhidhan [9]\nAll the dictionary entries are done manually by using notepad++ software. The root words lexical categories are verified by linguistics, so that the output of the analyzer is proper."}, {"heading": "5. EVALUATION AND TEST RESULT", "text": "In the above table (Table no 1) we have seen that the number of dictionary entry is only 24565, which is not a very high in number. Since the work is going on, we can expect in future we will have an XML dictionary with large number of entries. Here we have considered only the most frequently used words in Assamese Language.\nTill now we have not added any rule for lexical selection in the Apertium engine. That\u201fs why some times it cannot analyze a word properly. For example, the Assamese word \u099c\u09a8 can be used as a suffix or it can be used as a person name. Most of the time the word \u099c\u09a8 (man in general) (Definite Article) is used as a suffix in Assamese sentences, but if someone use this word as a person name (Though \u099c\u09a8(jhon) (Proper noun) is not commonly used as a name in Assam) then our analyzer cannot give proper analysis. We have faced another problem with this analyzer is that if a word has more than one meaning depending on the situation and position within the sentence, it cannot analyze properly. For Example the Assamese Words: \u09ae\u09be\u09b2\u09be (Garland) and \u0985\u09a8\u09b2 (Fire). Both can be used as a material noun or proper noun depending on the use of the word in the sentence.\nIn testing phase we have use a set of data collected from different Assamese blogs and pages containing 1120 words (after Cleaning). Words are first tokenize and passes through cleaning process (for removing stop word, delimiter and extra white space ) with the help of java programming language. Then one by one we pass the word to the Apertium engine for analysis and store the result in a text file. The text file is checked manually for correctness of the results. The result we have found is shown below\nFrom the above table we have seen that the analyzer provides only 72.7% correct results .Other 27% are wrongly recognize due to limited database entry , unavailability of lexical rules for selecting proper category and limited POS category."}, {"heading": "6. CONCLUSION", "text": "In this paper we have discus about the implementation of a Morphological analyzer using Apertium & Lttoolbox. At present this analyzer can handles only inflectional morphology, since we are excluding derivational morphology and we are working on noun, pronoun, verb and adverb. Our current dictionary can only provide information about suffixes.\nForm the previous works (in section III) we can see that maximum works done with supervised suffix stripping method. Only limited no of [5, 8] reported work has implement unsupervised technique for analyzing the morphology. Here we have used supervised Finite-state-transducer (FST) method with the help of Apertium engine, since Finite-state-transducers have many\nadvantages [13]. With the help of single source, FST can work as bidirectional engine for both analysis and generation and they are fast (thousands of words per second), and compact. Currently our morphological analyzer is in initial stage. In the future we will extend our work to the remaining grammatical categories, include derivational morphology and populate dictionary with prefix information to get better performance."}, {"heading": "ACKNOWLEDGEMENTS", "text": "The authors are thankful to the Department of Information Technology, Gauhati University for providing us the corpus, which helped us in building the MA system and people from Language Technology Development Project, Gauhati University for their immense support"}], "references": [{"title": "Assamese, Its Formation and Development", "author": ["Bani Kanta Kakati"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1962}, {"title": "Developing Morphological Analyzer for Four Indian Languages Using A Rule Based Affix Stripping Approach\u201d, Linguistic Data Consortium for Indian Languages, CIIL", "author": ["Mona Parakh", "Rajesha N"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "A Suffix based Noun and Verb Classifier for an Inflectional Language", "author": ["Navanath Saharia", "Utpal Sharma", "Jugal Kalita"], "venue": "International Conference on Asian Language Proceesing(IALP-10),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2010}, {"title": "Acquisition of Morphology of an Indic Language from Text Corpus", "author": ["Sharma", "Utpal", "Kalita", "Jugal K", "Das", "Rajib K"], "venue": "ACM Transactions of Asian Language Information Processing (TALIP),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Analysis and Evaluation of Stemming Algorithms: A case study with Assamese", "author": ["Navanath Saharia", "Utpal Sharma", "Jugal Kalita"], "venue": "Proceedings of the International Conference on Advances in Computing, Communications and Informatics,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "An Improved Stemming Approach Using HMM for a Highly Inflectional Language", "author": ["Navanath Saharia", "Kishori M. Konwar", "Utpal Sharma", "Jugal Kalita"], "venue": "Proceedings of 14th International Conference on Intelligent Text Processing and Computational Linguistics (CICLing),", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2013}, {"title": "Unsupervised Learning of Morphology of a Highly Inflectional Language", "author": ["Utpal Sharma"], "venue": "Phd. Thesis,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2006}], "referenceMentions": [{"referenceID": 0, "context": "There are two variations of Assamese language according to dialectical regions [2] i.", "startOffset": 79, "endOffset": 82}, {"referenceID": 1, "context": "\uf0b7 In [3], the authors have presented building Morphological Analyzers using the Suffix Stripping method for the four languages \u2013 Assamese, Bengali, Bodo and Oriya.", "startOffset": 5, "endOffset": 8}, {"referenceID": 2, "context": "\uf0b7 In [4], the authors have presented A Suffix-based Noun and Verb Classifier for an Inflectional Language.", "startOffset": 5, "endOffset": 8}, {"referenceID": 3, "context": "\uf0b7 In [5], the authors describe an approach to unsupervised learning of morphology from an unannotated corpus for Assamese Language in their paper \u201cAcquisition of Morphology of an Indic Language from Text Corpus\u201d.", "startOffset": 5, "endOffset": 8}, {"referenceID": 4, "context": "\uf0b7 In [6], the authors have presented suffix stripping approach, where they add a rule engine which generates all the possible suffix sequences for analyzing morphology of a word.", "startOffset": 5, "endOffset": 8}, {"referenceID": 5, "context": "\uf0b7 In [7], the authors combine a rule based algorithm and HMM based algorithm.", "startOffset": 5, "endOffset": 8}, {"referenceID": 6, "context": "\uf0b7 In [8] Utpal Sarma proposed an unsupervised method for learning morphology of a language in his Ph.", "startOffset": 5, "endOffset": 8}, {"referenceID": 3, "context": "Only limited no of [5, 8] reported work has implement unsupervised technique for analyzing the morphology.", "startOffset": 19, "endOffset": 25}, {"referenceID": 6, "context": "Only limited no of [5, 8] reported work has implement unsupervised technique for analyzing the morphology.", "startOffset": 19, "endOffset": 25}], "year": 2015, "abstractText": "Morphological Analysis is an important branch of linguistics for any Natural Language Processing Technology. Morphology studies the word structure and formation of word of a language. In current scenario of NLP research, morphological analysis techniques have become more popular day by day. For processing any language, morphology of the word should be first analyzed. Assamese language contains very complex morphological structure. In our work we have used Apertium based Finite-State-Transducers for developing morphological analyzer for Assamese Language with some limited domain and we get 72.7% accuracy", "creator": "Microsoft\u00ae Word 2010"}}}