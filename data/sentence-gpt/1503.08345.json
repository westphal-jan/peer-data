{"id": "1503.08345", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "28-Mar-2015", "title": "Implementing an intelligent version of the classical sliding-puzzle game for unix terminals using Golang's concurrency primitives", "abstract": "A smarter version of the sliding-puzzle game is developed using the Go programming language. The game runs in computer system's terminals. Mainly, it was developed for UNIX-type systems but because of cross-platform compatibility of the programming language used, it works very well in nearly all the operating systems. It is an OS for Linux and Linux-based systems.\n\n\nThe game starts in the US using the Go programming language on a computer. It is set in the C language with a variety of programming languages and was originally based on Go, but was developed using Go and Javascript.\nYou can also check out the game's description.\nThere is also the game's description.\nIt's very similar to other games (the game is a Go program) such as TAS-X, where there are only 3 main components.", "histories": [["v1", "Sat, 28 Mar 2015 20:35:02 GMT  (76kb)", "http://arxiv.org/abs/1503.08345v1", "8 pages"], ["v2", "Sat, 22 Aug 2015 17:07:32 GMT  (15kb)", "http://arxiv.org/abs/1503.08345v2", "8 pages"]], "COMMENTS": "8 pages", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["pravendra singh"], "accepted": false, "id": "1503.08345"}, "pdf": {"name": "1503.08345.pdf", "metadata": {"source": "CRF", "title": "Implementing an intelligent version of the classical sliding-puzzle game for unix terminals using Golang's concurrency primitives", "authors": ["Pravendra Singh"], "emails": ["hackpravj@gmail.com"], "sections": [{"heading": null, "text": "A smarter version of the sliding-puzzle game is developed using the Go programming language. The game runs in computer system's terminals. Mainly, it was developed for UNIX-type systems but because of cross-platform compatibility of the programming language used, it works very well in nearly all the operating systems.\nThe game uses Go's concurrency primitives to simplify most of the hefty parts of the game. Real time notification functionality is also developed using language's built-in concurrency support.\nKeywords: Artificial Intelligence, Concurrent Programming, Programming Languages, Golang, Game Development"}, {"heading": "1. Introduction", "text": "Sliding puzzles[1] have their own reputation in the world of artificial intelligence and graph theory since a long. The oldest type of sliding puzzle game is known as fifteen puzzle[1]. It is believed to be invented in 1874 by Noyes Palmer Chapman[2], a postmaster in New York state. The game consists of a 4x4 board with 16 tiles in it. Each tile have numbers drawn on it except one tile, which is either blank or sometimes have digit '0' on it. The task for the game is to re-order all the tiles in a particular manner, where you are only allowed to move the blank tile at a time.\nThis type of puzzles have many variants also. The 3x3 board puzzle being fairly popular among them, also known as the 8-puzzle game. In this type, the game board consists of 9 tiles. In this paper, we will use the 8-puzzle game board into consideration.\nOn the other hand, Go is a new[3] programming language initially developed at Google, also known as Golang[4]. It's a compiled and statically-typed language with built-in support for concurrent programming. Golang is gaining popularity as the language for system programming and developer operations."}, {"heading": "2. Solvability", "text": "Here, the standard 8-puzzle game board is being considered, where the task of the game is to put the tiles in such a way that the last tile is blank and all other tiles have numbers in increasing order(from 1 to 8). A total of 362880(9!) board configurations are possible but only half of them are actually solvable according to our constraints[23].\nSo the game generates random configurations of the game board and uses an built-in package named 'scanner'[5] to scan the board for its solvability. If the board is not really solvable then it generates a new one recursively.\nFor its implementation, package 'scanner' uses the discussion from the paper \"Notes on the 15 puzzle\"[6]. A simplified version of this, can be found on the \"Analysis of Sixteen Puzzle\"[7].\nPackage 'scanner' implements an algorithm to check for solvability of any board configuration. Its time complexity is O(n2). The algorithm returns a boolean value and an integer value, respectively implying whether a board is solvable or not and the index of blank tile in the board, if any.\nfunc IsLegal(size int, values []int) (bool, int) { var inversions int n := len(values)\nfor i := 0; i < (n - 1); i++ { if (values[i] != 0) && (values[i] != 1) { for j := i + 1; j < n; j++ { if (values[j] != 0) && (values[i] > values[j]) { inversions++ } } } }\nif (size%2 == 1) && (inversions%2 == 0) { return true, zeroIndex(values) } return false, -1 }"}, {"heading": "3. Puzzle Solution", "text": "The game comes with an built-in package named 'solver'[5] that powers some features of it. For example, using the solver, the game shows optimal number of moves to solve any board configuration in real time. All the player moves are tracked and scored accordingly with the help of the solver.\nThe package 'solver' is implemented using Golang's native data structures and interfaces. It uses\nA-star algorithm[9] for traversing game's state space."}, {"heading": "3.1 Heuristic Function", "text": "The heuristic function used in the implementation is 'Misplaced Tiles'[8]. Which is an admissible function[11], h(n) \u2264 h*(n). Then it will never overestimate the actual travelling distance and the solution will be always optimal.\nfunc heuristicScore(b board.Board) int { var score int\nfor i := 0; i < 3; i++ { for j := 0; j < 3; j++ { if b.Rows[i].Tiles[j].Value != ((3*i + j + 1) % 9) { score++ } } }\nreturn score }"}, {"heading": "3.2 Open List Data Structure", "text": "In the implementation, the game uses a custom data structure to accomplish the open-list required in the A-star algorithm execution. Open List maintains a collection of game-state nodes to be traversed at any given time.\ntype OpenList struct { nodeTable map[board.Board]Node table map[board.Board]bool\nqueue *PriorityQueue }"}, {"heading": "3.2.1 nodeTable", "text": "Golang provides a built-in map[10] type that implements a hash table.\nA map is an unordered group of elements of one type, called the element type, indexed by a set of unique keys of another type, called the key type. The value of an uninitialized map is nil.[10]\nnodeTable maps a board configuration to a node in game's state space. No node appears twice when we move from start to goal state, so there is not any ambiguity. It helps us traversing the path once the search is complete."}, {"heading": "3.2.2 table", "text": "table is also a map which maps board configurations a boolean value. It is used to check that whether a board configuration is present there in the open-list or not. By default it returns false whenever the board is absent."}, {"heading": "3.2.3 queue", "text": "queue represents a Priority Queue[12] data structure, precisely it is a min-priority queue. It is used to select a child node of node, having least travelling cost. Values of travelling cost are used as priorities for nodes. It is built using golang's 'container/heap'[13] package."}, {"heading": "3.3 Close List Data Structure", "text": "Similar to Open List, the solver also uses a Close List data structure. It is used to label nodes as Already Traversed.\ntype CloseList struct { table map[board.Board]bool }"}, {"heading": "3.3.1 table", "text": "table here is similar to the one used in Open List. It maps a board configuration to a boolean value, indicating whether a board is present in closed list or not."}, {"heading": "4. Path Traversing", "text": "The search algorithm terminates when the node to enter in the close list is the goal node. While traversing all the nodes in the game's state space, it keeps a track of all the nodes and their respective child nodes.\nFor this, it keeps a map from child-board configuration to parent-board configuration, generating a many-to-one mapping because a board configuration can have 2 to 4 new board configurations as child.\n// mapping from child to parent board configurations relation map[board.Board]board.Board\nTo collect the exact moves from start to the goal state, it forms a linked-list structure of board configurations, where the goal state is at the tail of the list and at the head it has the board to move next, from the current board configuration. It is built using the 'container/list'[14] package of Golang.\n// generating the linked-list representing path to move on state := s.Goal\nfor s.relation[state] != start { state = s.relation[state] s.Path.PushFront(state) } s.Path.PushBack(s.Goal)"}, {"heading": "5. Scoring Function", "text": "The game has its own scoring function. The package 'score'[15] helps implementing this. At any state space node(n), the score for the game can be calculated by the function, score(n).\nscore(n) = ACS(n) / Total Moves\nACS(n) = Accumulated Correct Score for the node n\n| 0; if node n is start state\nwhere ACS(n) = | ACS(parent(n)) + 1; if last move was correct\n| ACS(parent(n)) - 1; if last move was wrong\nSo in the game, the maximum possible score of 1 will be scored in only one case when all the moves from player were correct throughout the goal state. When the total number of moves is 0, the score will also be 0."}, {"heading": "6. Game Interface", "text": "The graphic user interface for the game is built using Box-drawing characters[16], like it was used in early text-mode video hardware emulators, also known as Semigraphics[17].\nIt uses Golang port[18] of the termbox library for writing text-based user interfaces. Coloring the interfaces is done using normal 8-colors, with foreground and background attributes for special formatting."}, {"heading": "7. Real Time Notification", "text": "Golang provides built-in support to simplify concurrent programming with the help goroutines and channels.\nA goroutine is a lightweight thread of execution. Channels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine.[19]\nIn this case, the game uses goroutines to provide an asynchronous or non-blocking experience. So that the graphic interface of game can be drawn and acted upon as soon as the game starts while the 'solver' stays busy solving the puzzle in the background at the same time.\nNow, this can lead to a problem in slow systems. For example, when the game's interface is visible but the 'solver' is taking its time to solve the puzzle and the player gives any input event, the game is not likely to handle the request properly. Because the other sections of the game like 'score' package needs the puzzle to be solved first.\nTo solve this, the other concurrency primitive, Channel of the language is used. It works with the goroutines and implements the notification system for the game and helps manitaining the asynchronous characteristic of the game.\nThe game consists of packages 'notification'[20] and 'surface'[21] that implements this functionality. Package 'notification' has a channel named 'Tunnel', which let us flow string objects through it.\nGolang has the keyword go to run any portion of code as a goroutine and chan is the keyword for channels.\ntype Notification struct { Tunnel chan string }\nThe start of the game initiates a goroutine which listens to any object passing through the channel and update the notification in real time.\ngo func() { for e := range s.Notifier.Tunnel { s.solvableMoves = s.gameSolver.Path.Len()\ns.currentBoard = s.gameSolver.Path.Front()\n// updates the notification message s.Message = e s.drawBoard() } }()\nSo whenever a player moves in wrong direction, the game starts a new goroutine to solve the new board configuration. If the user tries to move when the 'solver' has not yet solved the puzzle, it notifies the player to wait for a while. It invokes the 'Ready To Play' notification as soon as the 'solver' is done solving for the configuration to let the player know that he is ready to play. Here[22], you can see list of all the notifications used in the game.\n// wrong move by player s.gameSolver = solver.New(s.gameBoard)\ngo func() { s.gameSolver.Solve() s.solved = false s.solvableMoves = s.gameSolver.Path.Len()\ns.NotificationColor = termbox.ColorGreen\n// PASS THE NOTIFICATION INTO THE CHANNEL s.Notifier.Tunnel <- notification.ReadyToPlayMessage }()\nThe notification channel Tunnel is closed when the game is complete or whenever player quits the game.\nclose(s.Notifier.Tunnel)"}, {"heading": "8. Acknowledgements", "text": "The author is grateful to his Artificial Intelligence course instructor, Mr. Partha Pratim Roy. Rob Pike, Ken Thompson, Robert Griesemer and many Golang contributors to make the language such stupendous. nsf(https://github.com/nsf) for developing the termbox-go library."}, {"heading": "9. References", "text": "[1] Sliding puzzle - http://en.wikipedia.org/wiki/Sliding_puzzle\n[2] The 15 Puzzle, by Jerry Slocum & Dic Sonneveld, 2006. ISBN 1-890980-15-3\n[3] Release History The Go Programming Language - https://golang.org/doc/devel/release.html\n[4] The Go Programming Language - https://golang.org/\n[5] Package 'solver' - https://github.com/pravj/puzzl/blob/master/solver/solver.go\n[6] Notes on the \"15\" Puzzle - Wm. Woolsey Johnson and William E. Story\n[7] Analysis of the Sixteen Puzzle, Kevin Gong - http://kevingong.com/Math/SixteenPuzzle.html\n[8] Heuristicwiki - Misplaced Tiles - http://heuristicswiki.wikispaces.com/Misplaced+Tiles\n[9] A* search algorithm - http://en.wikipedia.org/wiki/A*_search_algorithm\n[10] The Go Programming Language Specification - Map types - https://golang.org/ref/spec#Map_types\n[11] Admissible heuristic - http://en.wikipedia.org/wiki/Admissible_heuristic\n[12] Priority queue - http://en.wikipedia.org/wiki/Priority_queue\n[13] Package heap - The Go Programming Language - http://golang.org/pkg/container/heap/\n[14] Package list - The Go Programming Language - http://golang.org/pkg/container/list/\n[15] Package 'score' - https://github.com/pravj/puzzl/blob/master/score/score.go\n[16] Box-drawing character - http://en.wikipedia.org/wiki/Box-drawing_character\n[17] Semigraphics - http://en.wikipedia.org/wiki/Semigraphics\n[18] Package termbox - http://godoc.org/github.com/nsf/termbox-go\n[19] Go By Example - https://gobyexample.com/channels\n[20] Package 'notification' - https://github.com/pravj/puzzl/blob/master/notification/notification.go\n[21] Package 'surface' - https://github.com/pravj/puzzl/blob/master/surface/surface.go\n[22] Notification Messages - https://github.com/pravj/puzzl/blob/development/notification/notification.go#L5-L14\n[23] M. Gardner. The Mathematical Puzzles of Sam Loyd. Dover, 1959"}], "references": [{"title": "The Mathematical Puzzles of Sam Loyd", "author": ["M. Gardner"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1959}], "referenceMentions": [{"referenceID": 0, "context": "A total of 362880(9!) board configurations are possible but only half of them are actually solvable according to our constraints[23].", "startOffset": 128, "endOffset": 132}], "year": 2015, "abstractText": "A smarter version of the sliding-puzzle game is developed using the Go programming language. The game runs in computer system's terminals. Mainly, it was developed for UNIX-type systems but because of cross-platform compatibility of the programming language used, it works very well in nearly all the operating systems. The game uses Go's concurrency primitives to simplify most of the hefty parts of the game. Real time notification functionality is also developed using language's built-in concurrency support.", "creator": null}}}